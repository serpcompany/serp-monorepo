[
  {
    "owner": "hyperium",
    "repo": "hyper",
    "content": "TITLE: Server Functionality Improvements\nDESCRIPTION: Server-side enhancements including default body types, TCP server compatibility and request path/query access\nSOURCE: https://github.com/hyperium/hyper/blob/master/CHANGELOG.md#2025-04-20_snippet_15\n\n\n\n----------------------------------------\n\nTITLE: HTTP Core Feature Updates\nDESCRIPTION: Core HTTP functionality improvements including bytes integration, custom body streams, and status code enhancements\nSOURCE: https://github.com/hyperium/hyper/blob/master/CHANGELOG.md#2025-04-20_snippet_14\n\n\n\n----------------------------------------\n\nTITLE: Client Configuration Enhancements\nDESCRIPTION: New client features including HTTP enforcement, request body access, status code handling, proxy support and connection timeouts\nSOURCE: https://github.com/hyperium/hyper/blob/master/CHANGELOG.md#2025-04-20_snippet_12\n\n\n\n----------------------------------------\n\nTITLE: Rust TLS/SSL Server Support\nDESCRIPTION: Implementation of TLS/SSL support for server-side operations\nSOURCE: https://github.com/hyperium/hyper/blob/master/CHANGELOG.md#2025-04-20_snippet_41\n\n\n\n----------------------------------------\n\nTITLE: Header Implementation Additions\nDESCRIPTION: Extensive additions to header support including new header types (Cookie, Link, Warning, etc.) and improved header manipulation methods\nSOURCE: https://github.com/hyperium/hyper/blob/master/CHANGELOG.md#2025-04-20_snippet_13\n\n\n\n----------------------------------------\n\nTITLE: Creating HTTP Server in Rust\nDESCRIPTION: Server is no longer the primary entry point. Instead, an Http type is created and then either bind to receive a Server, or it can be passed to other Tokio things.\nSOURCE: https://github.com/hyperium/hyper/blob/master/CHANGELOG.md#2025-04-20_snippet_24\n\nLANGUAGE: Rust\nCODE:\n```\nlet http = Http::new();\nlet server = http.bind(&addr).unwrap();\n```\n\n----------------------------------------\n\nTITLE: Exploring Body Trait for Unknown Frames in Rust\nDESCRIPTION: A potential implementation for the Body trait that would support unknown frames through a Frame struct with different kinds. This approach allows for extension with different frame types while maintaining compatibility.\nSOURCE: https://github.com/hyperium/hyper/blob/master/docs/ROADMAP-1.0.md#2025-04-20_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\npub trait Body {\n    type Data;\n    fn poll_frame(..) -> Result<Option<Frame<Self::Data>>>;\n}\n\npub struct Frame<T>(Kind<T>);\n\nenum Kind<T> {\n   Data(T),\n   Trailers(HeaderMap),\n   Unknown(Box<dyn FrameThingy>),\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing Body::is_empty() with Body::is_end_stream() in Rust\nDESCRIPTION: The Body::is_empty() method has been replaced with Body::is_end_stream(), which comes from the Payload trait. This is a direct replacement with equivalent functionality.\nSOURCE: https://github.com/hyperium/hyper/blob/master/CHANGELOG.md#2025-04-20_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\n// Before in 0.11.x\nbody.is_empty()\n\n// After in 0.12\nbody.is_end_stream()\n```\n\n----------------------------------------\n\nTITLE: Body Implementation Feature Updates\nDESCRIPTION: Implementation of various traits (Extend, IntoIterator, Default) for Body and Chunk types to improve ergonomics and functionality\nSOURCE: https://github.com/hyperium/hyper/blob/master/CHANGELOG.md#2025-04-20_snippet_11\n\n\n\n----------------------------------------\n\nTITLE: Rust SSL Verification with Generic Parameters\nDESCRIPTION: Update that allows for more generic SSL verification using unboxed closures in the net module\nSOURCE: https://github.com/hyperium/hyper/blob/master/CHANGELOG.md#2025-04-20_snippet_40\n\n\n\n----------------------------------------\n\nTITLE: HTTP/2 Race Condition Fix in Client Dispatcher\nDESCRIPTION: Fix for race condition in HTTP/2 client dispatcher implementation\nSOURCE: https://github.com/hyperium/hyper/blob/master/CHANGELOG.md#2025-04-20_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nf202230c6fa274f6a4e6cbaad57ca59beb0a5125\n```\n\n----------------------------------------\n\nTITLE: Updating Header Content-Length Example in Rust Hyper\nDESCRIPTION: Example showing how to set content-length header before and after the migration to http types. In 0.12, typed headers are replaced with constants and HeaderValue from the http crate.\nSOURCE: https://github.com/hyperium/hyper/blob/master/CHANGELOG.md#2025-04-20_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\n// Before in 0.11.x\nuse hyper::header::ContentLength;\nres.headers_mut().set(ContentLength(15));\n```\n\nLANGUAGE: rust\nCODE:\n```\n// After in 0.12\nuse hyper::header::{CONTENT_LENGTH, HeaderValue};\nres.headers_mut().insert(CONTENT_LENGTH, HeaderValue::from_static(\"15\"));\n```\n\n----------------------------------------\n\nTITLE: Using Uri Instead of Url in Rust\nDESCRIPTION: The Url type is no longer used. Any instance in the Client API has been replaced with hyper::Uri. Error::Uri has changed types to hyper::error::UriError.\nSOURCE: https://github.com/hyperium/hyper/blob/master/CHANGELOG.md#2025-04-20_snippet_22\n\nLANGUAGE: Rust\nCODE:\n```\nuse hyper::Uri;\n\nlet uri: Uri = \"http://example.com\".parse().unwrap();\n\n// Error handling\nmatch result {\n    Err(hyper::error::UriError::InvalidUri) => { ... },\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using MIME Types in Rust\nDESCRIPTION: The mime macro and Mime constructor have been removed. Use constants or parse from strings for less common MIME types.\nSOURCE: https://github.com/hyperium/hyper/blob/master/CHANGELOG.md#2025-04-20_snippet_31\n\nLANGUAGE: Rust\nCODE:\n```\nuse mime;\n\n// Common MIME types\nlet json = mime::APPLICATION_JSON;\n\n// Less common MIME types\nlet custom = \"application/x-custom\".parse::<mime::Mime>().unwrap();\n```\n\n----------------------------------------\n\nTITLE: Using Uri Instead of RequestUri in Rust\nDESCRIPTION: The name of RequestUri has changed to Uri. It is no longer an enum, but an opaque struct with getter methods.\nSOURCE: https://github.com/hyperium/hyper/blob/master/CHANGELOG.md#2025-04-20_snippet_25\n\nLANGUAGE: Rust\nCODE:\n```\nlet uri: Uri = \"http://example.com/path?query\".parse().unwrap();\nlet path = uri.path();\nlet query = uri.query();\n```\n\n----------------------------------------\n\nTITLE: Implementing Pin in Rust\nDESCRIPTION: Implements Read/Write for Pin, which may conflict with existing user implementations.\nSOURCE: https://github.com/hyperium/hyper/blob/master/CHANGELOG.md#2025-04-20_snippet_1\n\nLANGUAGE: Rust\nCODE:\n```\nPin<...>\n```\n\n----------------------------------------\n\nTITLE: Implementing AsRef<str> for Method\nDESCRIPTION: Implementation of the AsRef<str> trait for the Method type to allow string reference operations.\nSOURCE: https://github.com/hyperium/hyper/blob/master/CHANGELOG.md#2025-04-20_snippet_33\n\nLANGUAGE: rust\nCODE:\n```\nimpl AsRef<str> for Method\n```\n\n----------------------------------------\n\nTITLE: Parsing Headers in Rust\nDESCRIPTION: Header::parse_header now receives &Raw, instead of &[Vec<u8>]. Raw provides several methods to ease using it, but may require some changes to existing code.\nSOURCE: https://github.com/hyperium/hyper/blob/master/CHANGELOG.md#2025-04-20_snippet_28\n\nLANGUAGE: Rust\nCODE:\n```\nimpl Header for MyHeader {\n    fn parse_header(raw: &Raw) -> ParseResult<Self> {\n        // Use methods on raw to access the header value\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating HTTP dependency in Rust\nDESCRIPTION: Updates the http dependency to version 1.0.\nSOURCE: https://github.com/hyperium/hyper/blob/master/CHANGELOG.md#2025-04-20_snippet_2\n\nLANGUAGE: Rust\nCODE:\n```\nhttp 1.0\n```\n\n----------------------------------------\n\nTITLE: Feature: HTTP Body Upgrade\nDESCRIPTION: Upgrade to http-body 1.0.0-rc.2 dependency version\nSOURCE: https://github.com/hyperium/hyper/blob/master/CHANGELOG.md#2025-04-20_snippet_8\n\nLANGUAGE: text\nCODE:\n```\n51b45e3f8580da5667a45395e6622455b10e2ad3\n```\n\n----------------------------------------\n\nTITLE: Enabling client upgrades in Rust\nDESCRIPTION: Requires calling Connection::with_upgrades() to enable client HTTP/1 upgrades.\nSOURCE: https://github.com/hyperium/hyper/blob/master/CHANGELOG.md#2025-04-20_snippet_4\n\nLANGUAGE: Rust\nCODE:\n```\nConnection::with_upgrades()\n```\n\n----------------------------------------\n\nTITLE: Using Unicase for Headers in Rust\nDESCRIPTION: Some headers now use unicase::Ascii instead of UniCase. Upgrade code to use Ascii::new(s).\nSOURCE: https://github.com/hyperium/hyper/blob/master/CHANGELOG.md#2025-04-20_snippet_32\n\nLANGUAGE: Rust\nCODE:\n```\nuse unicase::Ascii;\n\nlet ascii_str = Ascii::new(\"example\");\n```\n\n----------------------------------------\n\nTITLE: Accessing Cookie Header in Rust\nDESCRIPTION: The Cookie header is no longer a wrapper over Vec<String>. It must be accessed via its get and set methods.\nSOURCE: https://github.com/hyperium/hyper/blob/master/CHANGELOG.md#2025-04-20_snippet_16\n\nLANGUAGE: Rust\nCODE:\n```\n// Old way (no longer valid):\n// cookie_header.0[0]\n\n// New way:\ncookie_header.get(0)\ncookie_header.set(value)\n```\n\n----------------------------------------\n\nTITLE: Rust-Analyzer Settings for Hyper\nDESCRIPTION: Recommended settings for VSCode's rust-analyzer extension when working with the Hyper project. These settings ensure that the \"full\" feature is taken into account when checking the project.\nSOURCE: https://github.com/hyperium/hyper/blob/master/docs/CODE_STYLE.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"rust-analyzer.cargo.features\": [\"full\"],\n\"rust-analyzer.check.features\": [\"full\"],\n```\n\n----------------------------------------\n\nTITLE: Using StatusCode in Rust\nDESCRIPTION: The from_u16 function has been removed. Use StatusCode::try_from instead. The status module is now private.\nSOURCE: https://github.com/hyperium/hyper/blob/master/CHANGELOG.md#2025-04-20_snippet_29\n\nLANGUAGE: Rust\nCODE:\n```\nuse hyper::StatusCode;\n\nlet status = StatusCode::try_from(200).unwrap();\n```\n\n----------------------------------------\n\nTITLE: Comparing StatusCode in Rust\nDESCRIPTION: When explicitly checking the StatusCode, such as with an equality comparison, you need to use the value instead of a reference.\nSOURCE: https://github.com/hyperium/hyper/blob/master/CHANGELOG.md#2025-04-20_snippet_21\n\nLANGUAGE: Rust\nCODE:\n```\n// Old way:\nif *status == StatusCode::Ok { ... }\n\n// New way:\nif status == StatusCode::Ok { ... }\n```\n\n----------------------------------------\n\nTITLE: Bug Fix: Send Error on Client Dispatch Misbehavior\nDESCRIPTION: Fix to send an error back to the client when dispatch misbehaves, addressing issue #2649\nSOURCE: https://github.com/hyperium/hyper/blob/master/CHANGELOG.md#2025-04-20_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n75aac9f47fe0246016e6133cd3cfa35b63c8904e\n```\n\n----------------------------------------\n\nTITLE: Accessing Host Header Fields in Rust\nDESCRIPTION: The fields of the Host header are no longer directly available. Use the getter methods instead.\nSOURCE: https://github.com/hyperium/hyper/blob/master/CHANGELOG.md#2025-04-20_snippet_26\n\nLANGUAGE: Rust\nCODE:\n```\nlet host: &Host = request.headers().get::<Host>().unwrap();\nlet hostname = host.hostname();\nlet port = host.port();\n```\n\n----------------------------------------\n\nTITLE: Using Quality Values in Rust\nDESCRIPTION: Usage of Quality(num) should be changed to q(num) for representing quality values in HTTP headers.\nSOURCE: https://github.com/hyperium/hyper/blob/master/CHANGELOG.md#2025-04-20_snippet_17\n\nLANGUAGE: Rust\nCODE:\n```\n// Old way:\nQuality(0.8)\n\n// New way:\nq(0.8)\n```\n\n----------------------------------------\n\nTITLE: Handling Null Origin in Rust\nDESCRIPTION: Origin.scheme and Origin.host now return Options, since the Origin could be null.\nSOURCE: https://github.com/hyperium/hyper/blob/master/CHANGELOG.md#2025-04-20_snippet_20\n\nLANGUAGE: Rust\nCODE:\n```\nlet scheme: Option<&str> = origin.scheme();\nlet host: Option<&str> = origin.host();\n```\n\n----------------------------------------\n\nTITLE: Handling Remote Address in Request in Rust\nDESCRIPTION: Request.remote_addr is now an Option<SocketAddr>, instead of SocketAddr.\nSOURCE: https://github.com/hyperium/hyper/blob/master/CHANGELOG.md#2025-04-20_snippet_23\n\nLANGUAGE: Rust\nCODE:\n```\nif let Some(addr) = request.remote_addr() {\n    println!(\"Remote address: {}\", addr);\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Between HttpDate and SystemTime in Rust\nDESCRIPTION: HttpDate no longer has public fields. Conversion between HttpDate and SystemTime should be done as needed.\nSOURCE: https://github.com/hyperium/hyper/blob/master/CHANGELOG.md#2025-04-20_snippet_18\n\nLANGUAGE: Rust\nCODE:\n```\n// Convert HttpDate to SystemTime\nlet system_time: SystemTime = http_date.into();\n\n// Convert SystemTime to HttpDate\nlet http_date: HttpDate = SystemTime::now().into();\n```\n\n----------------------------------------\n\nTITLE: Formatting Headers in Rust\nDESCRIPTION: The fmt_header method has changed to take a different formatter. For headers that implement fmt::Display, f.fmt_line(self) can be used.\nSOURCE: https://github.com/hyperium/hyper/blob/master/CHANGELOG.md#2025-04-20_snippet_19\n\nLANGUAGE: Rust\nCODE:\n```\nimpl Header for MyHeader {\n    fn fmt_header(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        f.fmt_line(self)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Headers in Rust\nDESCRIPTION: Headers.remove() now returns Option<H> instead of bool. To determine if a header exists, use Headers.has().\nSOURCE: https://github.com/hyperium/hyper/blob/master/CHANGELOG.md#2025-04-20_snippet_27\n\nLANGUAGE: Rust\nCODE:\n```\n// Removing a header\nlet removed: Option<HeaderValue> = headers.remove(HeaderName::from_static(\"example\"));\n\n// Checking if a header exists\nif headers.has::<ExampleHeader>() {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Status Code Class in Rust\nDESCRIPTION: Usage of status.class() should change to equivalent status.is_*() methods.\nSOURCE: https://github.com/hyperium/hyper/blob/master/CHANGELOG.md#2025-04-20_snippet_30\n\nLANGUAGE: Rust\nCODE:\n```\n// Old way:\n// if status.class() == StatusClass::Success { ... }\n\n// New way:\nif status.is_success() { ... }\n```\n\n----------------------------------------\n\nTITLE: Renaming executor types in Rust\nDESCRIPTION: Renames ExecutorClient to Http2ClientConnExec and Http2ConnExec to Http2ServerConnExec.\nSOURCE: https://github.com/hyperium/hyper/blob/master/CHANGELOG.md#2025-04-20_snippet_3\n\nLANGUAGE: Rust\nCODE:\n```\nHttp2ClientConnExec\nHttp2ServerConnExec\n```\n\n----------------------------------------\n\nTITLE: Setting default max concurrent streams in Rust\nDESCRIPTION: Sets a default max concurrent streams value for the HTTP/2 server builder.\nSOURCE: https://github.com/hyperium/hyper/blob/master/CHANGELOG.md#2025-04-20_snippet_5\n\nLANGUAGE: Rust\nCODE:\n```\nHTTP/2 server builder\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation for Hyper Project Governance\nDESCRIPTION: Comprehensive markdown documentation that outlines the project's governance model, including decision-making framework, roles (Contributor, Triager, Collaborator, Maintainer), responsibilities, privileges, and paths for advancement within the project structure.\nSOURCE: https://github.com/hyperium/hyper/blob/master/docs/GOVERNANCE.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Governance\n\n## Making decisions\n\nThere's two main pieces to the way decisions are made in hyper:\n\n1. A decision-making framework\n2. The people who apply it\n\nThe people are described [lower down in this document](#roles).\n\n### Decision-making framework\n\nWe start with the users. The project wouldn't exist without them, and it exists\nin order to enable users to do amazing things with HTTP. We listen to our\nusers. Some actively contribute their thoughts, but many others we must seek\nout to learn about their usage, joys, and headaches. Those insights allow our\nexperts to determine the best solutions for the users.\n\nWe then define a set of [TENETS](./TENETS.md), which are guiding principles\nthat can be used to measure aspects of individual decisions. It should be\npossible to identify one or more tenets that apply to why a decision is made.\nAnd the set helps us balance which priorities are more important for our users.\n\nWe combine the usecases with the tenets to come up with a [VISION](./VISION.md)\nthat provides a longer-term plan of what hyper _should_ look like.\n\nFinally, we define a [ROADMAP](./ROADMAP.md) that describes what the\nshort-term, tactical changes to bring hyper closer in line with the vision.\n\n## Roles\n\nThese are the roles people can fill when participating in the project. A list\nof the people in each role is available in [MAINTAINERS](./MAINTAINERS.md).\n\n### Contributor\n\nA contributor is anyone who contributes their time to provide value for the\nproject. This could be in the form of code, documentation, filing issues,\ndiscussing designs, or helping others on the issue tracker or in chat.\n\nAll contributors MUST follow the [Code of Conduct][coc].\n\n👋  **New here?** [This could be you!][contrib]\n\n\n### Triager\n\nTriagers assess issues on the issue tracker. They help make sure the work is\nwell organized, and are critical for making new issue reporters feeling\nwelcome.\n\nResponsibilities:\n\n- Adhere to the [Code of Conduct][coc]\n- Follow the [triager's guide][triage-guide]\n\nPrivileges:\n\n- Can edit, label, and close issues\n- Member of the organization\n- Can be assigned issues and pull requests\n\nHow to become:\n\n- Make a few [contributions][contrib] to the project, to show you can follow\n  the [Code of Conduct][coc].\n- Self-nominate by making a pull request adding yourself to the\n  [list](./MAINTAINERS.md#triagers).\n\n\n### Collaborator\n\nCollaborators are contributors who have been helping out in a consistent basis.\n\nResponsibilities:\n\n- Be exemplars of the [Code of Conduct][coc]\n- Internalize the [VISION](./VISION.md)\n- Reviewing pull requests from other contributors\n- Provide feedback on proposed features and design documents\n- [Welcome new contributors][triage-guide]\n- Answer questions in issues and/or chat\n- Mentor contributors to become members\n\nPrivileges:\n\n- Can review and merge pull requests\n- Can trigger re-runs of CI, and approve CI for first-time contributors\n- Can assign issues and pull requests to other organization members\n\nHow to become:\n\n- Work at fulfilling the above responsibilities.\n- Any collaborator may nominate a contributor who has been around for some time\n  and is already filling the responsibilities.\n- Another collaborator must second the nomination.\n- If there are no objections, a maintainer will welcome the new collaborator.\n\nDon't be afraid to ask a collaborator for what you could work on to reach this\ngoal!\n\n### Maintainer\n\nMaintainers are the project admins. Besides being a collaborator, they take care\nof house-keeping duties, help lead the direction, and have the final authority when\nrequired.\n\n[coc]: ./CODE_OF_CONDUCT.md\n[contrib]: ../CONTRIBUTING.md\n[triage-guide]: ./ISSUES.md#triaging\n```\n\n----------------------------------------\n\nTITLE: Buffer Fix Implementation\nDESCRIPTION: Fix for get_buf functionality to prevent returning consumed part of buffer. Issue #406 fix.\nSOURCE: https://github.com/hyperium/hyper/blob/master/CHANGELOG.md#2025-04-20_snippet_38\n\nLANGUAGE: rust\nCODE:\n```\n04e3b5651561f087fee7c0345fe77d217d3ad35a\n```\n\n----------------------------------------\n\nTITLE: Reflect Bounds Addition\nDESCRIPTION: Updates to remove slice pattern and add Reflect bounds for Rust compatibility.\nSOURCE: https://github.com/hyperium/hyper/blob/master/CHANGELOG.md#2025-04-20_snippet_39\n\nLANGUAGE: rust\nCODE:\n```\nc9f2c841ff0e68dead38e762ed5f8c0f42255bc4\n```\n\n----------------------------------------\n\nTITLE: Making ReadBuf::new public in Rust\nDESCRIPTION: Makes the ReadBuf::new constructor public in the rt module.\nSOURCE: https://github.com/hyperium/hyper/blob/master/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\nReadBuf::new\n```\n\n----------------------------------------\n\nTITLE: HTTP Response Send Method\nDESCRIPTION: Addition of a send method to Response type for writing sized bodies. Addresses issue #446.\nSOURCE: https://github.com/hyperium/hyper/blob/master/CHANGELOG.md#2025-04-20_snippet_34\n\nLANGUAGE: rust\nCODE:\n```\nResponse.send(sized_body)\n```\n\n----------------------------------------\n\nTITLE: HTTP Raw Status Handling\nDESCRIPTION: Modification to keep raw reason phrase in RawStatus implementation. Addresses issue #497.\nSOURCE: https://github.com/hyperium/hyper/blob/master/CHANGELOG.md#2025-04-20_snippet_36\n\nLANGUAGE: rust\nCODE:\n```\nRawStatus.reason_phrase\n```\n\n----------------------------------------\n\nTITLE: Content-Encoding Header Implementation\nDESCRIPTION: Code implementing the content-encoding header functionality. Part of feature additions in v0.3.3.\nSOURCE: https://github.com/hyperium/hyper/blob/master/CHANGELOG.md#2025-04-20_snippet_37\n\nLANGUAGE: rust\nCODE:\n```\n2983e8dea21f02a31012a25b0a302a128768030a\n```\n\n----------------------------------------\n\nTITLE: Rust Header Formatting Fix\nDESCRIPTION: Fix for formatting output of several headers and UserAgent header implementation change to not use Show trait\nSOURCE: https://github.com/hyperium/hyper/blob/master/CHANGELOG.md#2025-04-20_snippet_42\n\n\n\n----------------------------------------\n\nTITLE: Headers Test Module Configuration\nDESCRIPTION: Makes the test_module optional in header macro implementation. References issue #490.\nSOURCE: https://github.com/hyperium/hyper/blob/master/CHANGELOG.md#2025-04-20_snippet_35\n\nLANGUAGE: rust\nCODE:\n```\ntest_module! header\n```\n\n----------------------------------------\n\nTITLE: Building Hyper C API with Standard Cargo Command\nDESCRIPTION: Command to compile the Hyper C API as a C dynamic library using rustc. This requires the RUSTFLAGS environment variable to enable the unstable FFI feature and specifies the required feature flags and crate type.\nSOURCE: https://github.com/hyperium/hyper/blob/master/capi/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nRUSTFLAGS=\"--cfg hyper_unstable_ffi\" cargo rustc --features client,http1,http2,ffi --crate-type cdylib\n```\n\n----------------------------------------\n\nTITLE: Building Hyper C API with Cargo-C Tool\nDESCRIPTION: Optional command to build and install the Hyper C API as a shared library using the cargo-c extension. This method also requires enabling the unstable FFI feature and specifies the necessary feature flags.\nSOURCE: https://github.com/hyperium/hyper/blob/master/capi/README.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nRUSTFLAGS=\"--cfg hyper_unstable_ffi\" cargo cbuild --features client,http1,http2,ffi --release\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Error Message Duplication in hyper\nDESCRIPTION: An example showing how hyper's error formatting causes duplication when combined with error reporters that crawl the source chain. Each error in the chain repeats information from errors below it, creating redundant output.\nSOURCE: https://github.com/hyperium/hyper/blob/master/docs/ROADMAP-1.0.md#2025-04-20_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nerror fetching website: error trying to connect: tcp connect error: Connection refused (os error 61)\ntcp connect error: Connection refused (os error 61)\nConnection refused (os error 61)\n```\n\n----------------------------------------\n\nTITLE: Defining Project Charter in Markdown\nDESCRIPTION: This snippet defines the project charter for Hyper, stating its purpose as a protective and efficient HTTP library for all.\nSOURCE: https://github.com/hyperium/hyper/blob/master/docs/TENETS.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Charter\n\n> hyper is a protective and efficient HTTP library for all.\n```\n\n----------------------------------------\n\nTITLE: Listing Project Tenets in Markdown\nDESCRIPTION: This snippet introduces the concept of tenets as guiding principles for the project, explaining their role in decision-making.\nSOURCE: https://github.com/hyperium/hyper/blob/master/docs/TENETS.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n# Tenets\n\nTenets are guiding principles. They guide how decisions are made for the whole\nproject. Ideally, we do all of them all the time. In some cases, though, we may\nbe forced to decide between slightly penalizing one goal or another. In that\ncase, we tend to support those goals that come earlier in the list over those\nthat come later (but every case is different).\n```\n\n----------------------------------------\n\nTITLE: Using rustfmt for Code Style Checking in Hyper\nDESCRIPTION: Commands for checking code style conformance across the Hyper project files. Since the standard cargo fmt command doesn't work in Hyper, these platform-specific commands should be used instead.\nSOURCE: https://github.com/hyperium/hyper/blob/master/docs/CODE_STYLE.md#2025-04-20_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n# Mac or Linux\nrustfmt --check --edition 2021 $(git ls-files '*.rs')\n\n# Powershell\nGet-ChildItem . -Filter \"*.rs\" -Recurse | foreach { rustfmt --check --edition 2021 $_.FullName }\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Commit Message Format in Markdown\nDESCRIPTION: This snippet shows the required format for git commit messages in the Hyper project. It illustrates the structure with a header (containing type, scope, and subject), followed by a body and footer, separated by blank lines.\nSOURCE: https://github.com/hyperium/hyper/blob/master/docs/COMMITS.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<type>(<scope>): <subject>\n<BLANK LINE>\n<body>\n<BLANK LINE>\n<footer>\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation for Pull Request Guidelines\nDESCRIPTION: Detailed markdown documentation explaining the process of submitting pull requests to the Hyper project, including testing requirements, commit guidelines, and feedback handling procedures.\nSOURCE: https://github.com/hyperium/hyper/blob/master/docs/PULL_REQUESTS.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Pull Requests\n\nPull requests are the way to submit changes to the hyper repository.\n\n## Submitting a Pull Request\n\nIn most cases, it a good idea to discuss a potential change in an\n[issue](ISSUES.md). This will allow other contributors to provide guidance and\nfeedback _before_ significant code work is done, and can increase the\nlikelihood of getting the pull request merged.\n\n### Tests\n\nIf the change being proposed alters code (as opposed to only documentation for\nexample), it is either adding new functionality to hyper or it is fixing\nexisting, broken functionality. In both of these cases, the pull request should\ninclude one or more tests to ensure that hyper does not regress in the future.\n\n### Commits\n\nOnce code, tests, and documentation have been written, a commit needs to be\nmade. Following the [commit guidelines](COMMITS.md) will help with the review\nprocess by making your change easier to understand, and makes it easier for\nhyper to produce a valuable changelog with each release.\n\nHowever, if your message doesn't perfectly match the guidelines, **do not\nworry!** The person that eventually merges can easily fixup the message at that\ntime.\n\n### Opening the Pull Request\n\nFrom within GitHub, open a new pull request from your personal branch.\n\nOnce opened, pull requests are usually reviewed within a few days.\n\n### Discuss and Update\n\nYou will probably get feedback or requests for changes to your Pull Request.\nThis is a big part of the submission process so don't be discouraged! Some\ncontributors may sign off on the Pull Request right away, others may have more\ndetailed comments or feedback. This is a necessary part of the process in order\nto evaluate whether the changes are correct and necessary.\n\nAny community member can review a PR and you might get conflicting feedback.\nKeep an eye out for comments from code owners to provide guidance on\nconflicting feedback.\n\nYou don't need to close the PR and create a new one to address feedback. You\nmay simply push new commits to the existing branch.\n```\n\n----------------------------------------\n\nTITLE: Dependencies Configuration for Hyper Examples\nDESCRIPTION: Cargo.toml dependencies section listing all required packages for running the Hyper examples, including core HTTP functionality, async runtime, logging, and serialization libraries.\nSOURCE: https://github.com/hyperium/hyper/blob/master/examples/README.md#2025-04-20_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\nhyper = { version = \"1\", features = [\"full\"] }\ntokio = { version = \"1\", features = [\"full\"] }\npretty_env_logger = \"0.5\"\nhttp-body-util = \"0.1\"\nbytes = \"1\"\nserde = { version = \"1.0\", features = [\"derive\"] }\nserde_json = \"1.0\"\nform_urlencoded = \"1\"\nhttp = \"1\"\nfutures-util = { version = \"0.3\", default-features = false }\n```\n\n----------------------------------------\n\nTITLE: Hyper Project Labels Documentation\nDESCRIPTION: Markdown documentation of the labeling system used in Hyper's issue tracker, including area labels, blocked labels, category labels, and effort labels. Each label type is organized hierarchically with detailed descriptions.\nSOURCE: https://github.com/hyperium/hyper/blob/master/docs/ISSUES.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Area\n\nThe area labels describe what part of hyper is relevant.\n\n- **A-body**: streaming request and response bodies.\n- **A-client**: the HTTP client.\n- **A-dependencies**: library dependencies.\n- **A-docs**: documentation.\n- **A-error**: error reporting and types.\n- **A-ffi**: the C API.\n- **A-http1**: the HTTP/1 specifics.\n- **A-http2**: the HTTP/2 specifics.\n- **A-server**: the HTTP server.\n- **A-tests**: the unit and integration tests.\n\n### Blocked\n\nThese labels indicate an issue is \"blocked\" for some reason.\n\n- **B-breaking-change**: a breaking change that is waiting for the next semver-compatible release.\n- **B-rfc**: request for comments. More discussion is needed to explore the design.\n- **B-upstream**: waiting on something in a dependency or the compiler.\n\n### Category\n\nThe category marks what kind of issue this is.\n\n- **C-bug**: something is wrong, this is bad!\n- **C-feature**: this is a new feature request, adding something new.\n- **C-performance**: make existing working code go faster.\n- **C-refactor**: improve internal code to help readability and maintenance.\n- **C-chore**: a general chore or maintenance task.\n\n### Effort\n\nThe effort labels are a best-guess at roughly how much effort and knowledge of hyper is needed to accomplish the task.\n\n- **E-easy**: a great starting point for a new contributor.\n- **E-medium**: some knowledge of how hyper internals work would be useful.\n- **E-hard**: likely requires a deeper understanding of how hyper internals work.\n```\n\n----------------------------------------\n\nTITLE: Displaying GitHub Issue Query Links in Markdown\nDESCRIPTION: These code snippets demonstrate how to create markdown links to specific GitHub issue queries for the Hyper project. They include links to feature requests and issues marked for request-for-comment.\nSOURCE: https://github.com/hyperium/hyper/blob/master/CONTRIBUTING.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[feat]: https://github.com/hyperium/hyper/issues?q=is%3Aissue+is%3Aopen+label%3AC-feature\n```\n\nLANGUAGE: markdown\nCODE:\n```\n[b-rfc]: https://github.com/hyperium/hyper/issues?q=is%3Aissue+is%3Aopen+label%3AB-rfc\n```"
  }
]