[
  {
    "owner": "istio",
    "repo": "istio",
    "content": "TITLE: Deploying Bookinfo with Custom Images to Kubernetes\nDESCRIPTION: Command to deploy the Bookinfo application to Kubernetes using the updated YAML files with custom image references. This deploys all necessary services, deployments, and service accounts.\nSOURCE: https://github.com/istio/istio/blob/master/samples/bookinfo/README.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ cd ../../\n$ kubectl apply -f samples/bookinfo/platform/kube/bookinfo.yaml\nserviceaccount/bookinfo-details created\ndeployment.apps/details-v1 created\nserviceaccount/bookinfo-ratings created\n...\n```\n\n----------------------------------------\n\nTITLE: Deploying the complete Helloworld service in Kubernetes with Istio\nDESCRIPTION: This command deploys both versions of the Helloworld service using kubectl. It assumes automatic sidecar injection is enabled in the cluster.\nSOURCE: https://github.com/istio/istio/blob/master/samples/helloworld/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f helloworld.yaml\n```\n\n----------------------------------------\n\nTITLE: Checking Bookinfo Pod Status after Deployment\nDESCRIPTION: Command to check the status of deployed Bookinfo pods in Kubernetes. Shows how to verify all pods are in the 'Running' state before testing the application.\nSOURCE: https://github.com/istio/istio/blob/master/samples/bookinfo/README.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ kubectl get pods\nNAME                              READY   STATUS    RESTARTS   AGE\ndetails-v1-7f556f5c6b-485l2       2/2     Running   0          10m\nproductpage-v1-84c8f95c8d-tlml2   2/2     Running   0          10m\nratings-v1-66777f856b-2ls78       2/2     Running   0          10m\nreviews-v1-64c47f4f44-rx642       2/2     Running   0          10m\nreviews-v2-66b6b95f44-s5nt6       2/2     Running   0          10m\nreviews-v3-7f69dd7fd4-zjvc8       2/2     Running   0          10m\n```\n\n----------------------------------------\n\nTITLE: Structuring Nested Parallel Tests in Go\nDESCRIPTION: Shows complex hierarchical organization of parallel and sequential tests. Demonstrates how parallel tests run in relation to their siblings and parent tests, useful for understanding test execution order.\nSOURCE: https://github.com/istio/istio/blob/master/tests/integration/README.md#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nfunc TestMyLogic(t *testing.T) {\n    framework.NewTest(t).\n        Run(func(ctx framework.TestContext) {\n            ctx.NewSubTest(\"T1\").\n                Run(func(ctx framework.TestContext) {\n                    ctx.NewSubTest(\"T1a\").\n                        RunParallel(func(ctx framework.TestContext) {\n                            // Run in parallel with T1b\n                        })\n                    ctx.NewSubTest(\"T1b\").\n                        RunParallel(func(ctx framework.TestContext) {\n                            // Run in parallel with T1a\n                        })\n                    // Exits before T1a and T1b are run.\n                })\n\n            ctx.NewSubTest(\"T2\").\n                Run(func(ctx framework.TestContext) {\n                    ctx.NewSubTest(\"T2a\").\n                        RunParallel(func(ctx framework.TestContext) {\n                            // Run in parallel with T2b\n                        })\n                    ctx.NewSubTest(\"T2b\").\n                        RunParallel(func(ctx framework.TestContext) {\n                            // Run in parallel with T2a\n                        })\n                    // Exits before T2a and T2b are run.\n                })\n        })\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Environment-Agnostic Constructor in Go\nDESCRIPTION: This code provides an environment-agnostic constructor for a component, supporting both native and Kubernetes environments.\nSOURCE: https://github.com/istio/istio/blob/master/tests/integration/README.md#2025-04-23_snippet_10\n\nLANGUAGE: go\nCODE:\n```\npackage mycomponent\n\nfunc New(ctx resource.Context) (i Instance, err error){\n    err = resource.UnsupportedEnvironment(ctx.Environment())\n    ctx.Environment().Case(environment.Native, func() {\n        i, err = newNative(ctx)\n    })\n    ctx.Environment().Case(environment.Kube, func() {\n        i, err = newKube(ctx)\n    })\n    return\n}\n\nfunc NewOrFail(t test.Failer, ctx resource.Context) Instance {\n    i, err := New(ctx)\n    if err != nil {\n        t.Fatal(err)\n    }\n    return i\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Istio Helm Repository\nDESCRIPTION: Commands to add the Istio Helm repository and update local repository information. This is required before installing any Istio Helm charts.\nSOURCE: https://github.com/istio/istio/blob/master/manifests/charts/istio-control/istio-discovery/README.md#2025-04-23_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nhelm repo add istio https://istio-release.storage.googleapis.com/charts\nhelm repo update\n```\n\n----------------------------------------\n\nTITLE: Deploying Application with Custom Envoy Bootstrap\nDESCRIPTION: This command deploys a helloworld application that uses the custom Envoy bootstrap configuration through the sidecar.istio.io/bootstrapOverride annotation.\nSOURCE: https://github.com/istio/istio/blob/master/samples/custom-bootstrap/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f example-app.yaml\n```\n\n----------------------------------------\n\nTITLE: Working with Istio Components in Tests\nDESCRIPTION: Demonstrates creating and using Istio components (Galley and Pilot) in tests. Components provide abstractions for Istio resources and are automatically managed by the framework for proper lifecycle handling.\nSOURCE: https://github.com/istio/istio/blob/master/tests/integration/README.md#2025-04-23_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nfunc TestMyLogic(t *testing.T) {\n    framework.\n        NewTest(t).\n        Run(func(ctx framework.TestContext) {\n            // Create the components.\n            g := galley.NewOrFail(ctx, ctx, galley.Config{})\n            p := pilot.NewOrFail(ctx, ctx, pilot.Config {})\n\n            // Apply configuration via Galley.\n            ctx.ApplyConfigOrFail(ctx, nil, mycfg)\n\n            // Wait until Pilot has received the configuration update.\n            p.StartDiscoveryOrFail(t, discoveryRequest)\n            p.WatchDiscoveryOrFail(t, timeout,\n                func(response *xdsapi.DiscoveryResponse) (b bool, e error) {\n                    // Validate that the discovery response has the configuration applied.\n                })\n            // Do more stuff...\n        }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing HBONE Server in Golang\nDESCRIPTION: Example of using the HBONE Golang library to create and run a server instance.\nSOURCE: https://github.com/istio/istio/blob/master/pkg/hbone/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ns := hbone.NewServer()\n// TLS is strongly recommended in real world\nl, _ := net.Listen(\"tcp\", \"0.0.0.0:15008\")\ns.Serve(l)\n```\n\n----------------------------------------\n\nTITLE: Installing Istio CRDs with kubectl apply\nDESCRIPTION: Commands to install Istio Custom Resource Definitions (CRDs), which is the first step of installation. Users can either apply using kustomize or directly from files.\nSOURCE: https://github.com/istio/istio/blob/master/manifests/charts/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -k github.com/istio/installer/base\n\n```\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f base/files\n```\n\n----------------------------------------\n\nTITLE: Setting up Istio Helm Repository\nDESCRIPTION: These commands add the Istio Helm repository and update the local repository cache. This is a prerequisite for installing the Istio base chart.\nSOURCE: https://github.com/istio/istio/blob/master/manifests/charts/base/README.md#2025-04-23_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nhelm repo add istio https://istio-release.storage.googleapis.com/charts\nhelm repo update\n```\n\n----------------------------------------\n\nTITLE: Using Component in Test Function in Go\nDESCRIPTION: This snippet shows how to use a newly created component in a test function within the Istio testing framework.\nSOURCE: https://github.com/istio/istio/blob/master/tests/integration/README.md#2025-04-23_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nfunc TestMyLogic(t *testing.T) {\n    framework.\n        NewTest(t).\n        Run(func(ctx framework.TestContext) {\n            // Create the components.\n            g := myComponent.NewOrFail(ctx, ctx)\n\n            // Do more stuff...\n        }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a ManyCollection for Service Endpoints in Go\nDESCRIPTION: Shows how to create a ManyCollection that computes a list of service endpoints, similar to the Kubernetes core endpoints controller. It uses Fetch with a label filter to query pods.\nSOURCE: https://github.com/istio/istio/blob/master/pkg/kube/krt/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nEndpoints := krt.NewManyCollection[Endpoint](func(ctx krt.HandlerContext, svc *v1.Service) (res []Endpoint) {\n    for _, c := range krt.Fetch(ctx, Pods, krt.FilterLabel(svc.Spec.Selector)) {\n      res = append(res, Endpoint{Service: svc.Name, Pod: pod.Name, IP: pod.status.PodIP})\n    }\n    return res\n}) // Results in a Collection[Endpoint]\n```\n\n----------------------------------------\n\nTITLE: Setting Up Istio Helm Repository\nDESCRIPTION: Commands to add the Istio Helm repository and update it. This is a prerequisite for installing the Istio Gateway chart.\nSOURCE: https://github.com/istio/istio/blob/master/manifests/charts/gateway/README.md#2025-04-23_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nhelm repo add istio https://istio-release.storage.googleapis.com/charts\nhelm repo update\n```\n\n----------------------------------------\n\nTITLE: Deploying Httpbin with Manual Sidecar Injection\nDESCRIPTION: Command to manually inject Istio sidecar and deploy httpbin service when automatic injection is not enabled.\nSOURCE: https://github.com/istio/istio/blob/master/samples/httpbin/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f <(istioctl kube-inject -f httpbin.yaml)\n```\n\n----------------------------------------\n\nTITLE: Benchmarking krt vs Legacy Controllers in Go\nDESCRIPTION: This benchmark compares the performance of krt-based controllers to legacy hand-written controllers. It shows metrics for both execution time and memory allocation, indicating that krt has about 10% overhead compared to the legacy implementation.\nSOURCE: https://github.com/istio/istio/blob/master/pkg/kube/krt/README.md#2025-04-23_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nname                  time/op\nControllers/krt-8     13.4ms ±23%\nControllers/legacy-8  11.4ms ± 6%\n\nname                  alloc/op\nControllers/krt-8     15.2MB ± 0%\nControllers/legacy-8  12.9MB ± 0%\n```\n\n----------------------------------------\n\nTITLE: Configuring Echo Instance for VM Deployment in Go\nDESCRIPTION: Code example showing how to configure and deploy an Echo application instance as a VM in Istio. Demonstrates setting up ports and VM-specific configuration parameters using echo.Config.\nSOURCE: https://github.com/istio/istio/blob/master/tests/integration/pilot/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nports := []echo.Port{\n   {\n       Name:     \"http\",\n       Protocol: protocol.HTTP,\n       InstancePort: 8090,\n       ServicePort:  8090,\n   },\n}\necho.Config{\n   Service:    \"vm\",\n   Namespace:  \"virtual-machine\",\n   Ports:      ports,\n   Pilot:      p,\n   DeployAsVM: true,\n   VMImage:    vm.DefaultVMImage\n}\n```\n\n----------------------------------------\n\nTITLE: Create Observability Namespace and Deploy Collector\nDESCRIPTION: Commands to create a dedicated namespace for observability and deploy the otel-collector\nSOURCE: https://github.com/istio/istio/blob/master/samples/open-telemetry/tracing/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create namespace observability\nkubectl -n observability apply -f ../otel.yaml\n```\n\n----------------------------------------\n\nTITLE: Installing Istio Control Plane Components\nDESCRIPTION: Commands to install Istio's discovery component in different namespaces, demonstrating how to run multiple versions (stable and master) side by side.\nSOURCE: https://github.com/istio/istio/blob/master/manifests/charts/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\niop istio-control istio-discovery $IBASE/istio-control/istio-discovery \\\n            --set global.istioNamespace=istio-system\n\n# Second istio-discovery, using master version of istio\nTAG=latest HUB=gcr.io/istio-testing iop istio-master istio-discovery-master $IBASE/istio-control/istio-discovery \\\n            --set policy.enable=false \\\n            --set global.istioNamespace=istio-master\n```\n\n----------------------------------------\n\nTITLE: Installing Gateway API CRDs on Kubernetes\nDESCRIPTION: Commands to check if Gateway API CRDs are installed and install them if not present. Uses kubectl kustomize to fetch and apply the CRDs from the kubernetes-sigs/gateway-api repository.\nSOURCE: https://github.com/istio/istio/blob/master/samples/helloworld/gateway-api/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get crd gateways.gateway.networking.k8s.io || \\\n  { kubectl kustomize \"github.com/kubernetes-sigs/gateway-api/config/crd?ref=v0.5.0\" | kubectl apply -f -; }\n```\n\n----------------------------------------\n\nTITLE: Installing Istio Gateway Helm Chart\nDESCRIPTION: Command to install the Istio Gateway Helm chart with the release name 'istio-ingressgateway'.\nSOURCE: https://github.com/istio/istio/blob/master/manifests/charts/gateway/README.md#2025-04-23_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nhelm install istio-ingressgateway istio/gateway\n```\n\n----------------------------------------\n\nTITLE: Implementing HBONE Client in Golang\nDESCRIPTION: Example of using the HBONE Golang library to create a client connection with custom headers and TLS configuration.\nSOURCE: https://github.com/istio/istio/blob/master/pkg/hbone/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nd := hbone.NewDialer(hbone.Config{\n    ProxyAddress: \"1.2.3.4:15008\",\n    Headers: map[string][]string{\n        \"some-addition-metadata\": {\"test-value\"},\n    },\n    TLS:          nil, // TLS is strongly recommended in real world\n})\nclient, _ := d.Dial(\"tcp\", testAddr)\nclient.Write([]byte(\"hello world\"))\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Bookinfo Sample in Bash\nDESCRIPTION: Sets up environment variables for the Docker hub and tag to be used in integration tests and building Docker images. The HUB variable defines the Docker repository, while TAG specifies the version number or user ID.\nSOURCE: https://github.com/istio/istio/blob/master/samples/bookinfo/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# This defines the docker hub to use when running integration tests and building docker images\n# eg: HUB=\"docker.io/istio\", HUB=\"gcr.io/istio-testing\"\nexport HUB=\"docker.io/$USER\"\n\n# This defines the docker tag to use when running integration tests and\n# building docker images to be your user id. You may also set this variable\n# this to any other legitimate docker tag.\nexport TAG=<version number>\n```\n\n----------------------------------------\n\nTITLE: Installing Istio Base Chart with OpenShift Profile\nDESCRIPTION: Installs the Istio base chart, which creates cluster-wide CRDs, cluster bindings, and cluster resources. It uses the 'openshift' profile for OpenShift compatibility.\nSOURCE: https://github.com/istio/istio/blob/master/manifests/charts/install-OpenShift.md#2025-04-23_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nhelm install istio-base -n istio-system manifests/charts/base --set profile=openshift\n```\n\n----------------------------------------\n\nTITLE: Deploying All Istio Telemetry Addons with kubectl\nDESCRIPTION: Shell command to deploy all telemetry addons (Prometheus, Grafana, Kiali, Jaeger) for Istio at once using kubectl. This provides a quick way to enable all observability features.\nSOURCE: https://github.com/istio/istio/blob/master/samples/addons/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nkubectl apply -f samples/addons\n```\n\n----------------------------------------\n\nTITLE: Setting Istio Revision in YAML\nDESCRIPTION: Example YAML configuration for specifying a control plane revision. This is used for canary deployments when running multiple versions of Istio in the same cluster.\nSOURCE: https://github.com/istio/istio/blob/master/manifests/charts/istio-control/istio-discovery/README.md#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nrevision: my-revision-name\n```\n\n----------------------------------------\n\nTITLE: Installing Istio CNI Plugin with OpenShift Profile\nDESCRIPTION: Installs the Istio CNI plugin chart in the 'kube-system' namespace. This should be installed after the base chart and before the istiod chart.\nSOURCE: https://github.com/istio/istio/blob/master/manifests/charts/install-OpenShift.md#2025-04-23_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nhelm install istio-cni -n kube-system manifests/charts/istio-cni --set profile=openshift\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-network Gateway in YAML\nDESCRIPTION: YAML configuration for deploying a Gateway to be used as a Multi-network Gateway for network 'network-1'.\nSOURCE: https://github.com/istio/istio/blob/master/manifests/charts/gateway/README.md#2025-04-23_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nnetworkGateway: network-1\n```\n\n----------------------------------------\n\nTITLE: Creating Component Directory in Go\nDESCRIPTION: This snippet shows how to create a new directory for a component in the Istio testing framework.\nSOURCE: https://github.com/istio/istio/blob/master/tests/integration/README.md#2025-04-23_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ cd ${ISTIO}/pkg/test/framework/components\n$ mkdir mycomponent\n```\n\n----------------------------------------\n\nTITLE: Running Integration Tests with Go Test\nDESCRIPTION: This command demonstrates how to run integration tests for a specific component using the Go test command with the integ tag.\nSOURCE: https://github.com/istio/istio/blob/master/tests/integration/README.md#2025-04-23_snippet_12\n\nLANGUAGE: console\nCODE:\n```\n$ go test -tags=integ ./tests/integration/mycomponent/...\n```\n\n----------------------------------------\n\nTITLE: Installing Istio Discovery (istiod) with OpenShift Profile\nDESCRIPTION: Installs the Istio Control Plane (istiod) chart in the 'istio-system' namespace. It uses the 'openshift' profile for OpenShift compatibility.\nSOURCE: https://github.com/istio/istio/blob/master/manifests/charts/install-OpenShift.md#2025-04-23_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nhelm install -n istio-system istiod manifests/charts/istio-control/istio-discovery --set profile=openshift\n```\n\n----------------------------------------\n\nTITLE: Installing Istio with OpenTelemetry ALS Provider\nDESCRIPTION: Command to install Istio with OpenTelemetry ALS configuration using istioctl.\nSOURCE: https://github.com/istio/istio/blob/master/samples/open-telemetry/loki/REAME.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nistioctl install -f iop.yaml -y\n```\n\n----------------------------------------\n\nTITLE: Viewing Istio Gateway Chart Configuration Options\nDESCRIPTION: Command to display the supported configuration options and documentation for the Istio Gateway chart.\nSOURCE: https://github.com/istio/istio/blob/master/manifests/charts/gateway/README.md#2025-04-23_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nhelm show values istio/gateway\n```\n\n----------------------------------------\n\nTITLE: Using HBONE CLI Client\nDESCRIPTION: Example of using the HBONE client CLI tool to send requests through an HBONE proxy with TLS certificates.\nSOURCE: https://github.com/istio/istio/blob/master/pkg/hbone/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo install ./pkg/test/echo/cmd/client\n# Send request to 127.0.0.1:8080 (Note only IPs are supported) via an HBONE proxy on port 15008\nclient --hbone-client-cert tests/testdata/certs/cert.crt --hbone-client-key tests/testdata/certs/cert.key \\\n  http://127.0.0.1:8080 \\\n  --hbone 127.0.0.1:15008\n```\n\n----------------------------------------\n\nTITLE: Configuring Istio Telemetry for OpenTelemetry\nDESCRIPTION: Creates a Telemetry resource in the istio-system namespace that configures Istio to send access logs to the OpenTelemetry collector using the 'otel' provider.\nSOURCE: https://github.com/istio/istio/blob/master/samples/open-telemetry/als/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncat <<EOF | kubectl apply -n istio-system -f -\napiVersion: telemetry.istio.io/v1\nkind: Telemetry\nmetadata:\n  name: mesh-default\n  namespace: istio-system\nspec:\n  accessLogging:\n    - providers:\n      - name: otel\nEOF\n```\n\n----------------------------------------\n\nTITLE: Deploying SPIRE Server and Agent\nDESCRIPTION: Command to deploy SPIRE components from the spire-quickstart.yaml manifest. This must be done before installing Istio to ensure proper socket injection.\nSOURCE: https://github.com/istio/istio/blob/master/samples/security/spire/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f spire-quickstart.yaml\n```\n\n----------------------------------------\n\nTITLE: Viewing Available Configuration Options\nDESCRIPTION: Command to display all available configuration values and documentation for the Istiod Helm chart. This helps in customizing the installation.\nSOURCE: https://github.com/istio/istio/blob/master/manifests/charts/istio-control/istio-discovery/README.md#2025-04-23_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nhelm show values istio/istiod\n```\n\n----------------------------------------\n\nTITLE: Generating Self-signed SSL Certificates with OpenSSL in Bash\nDESCRIPTION: Two-step process for creating self-signed certificates using OpenSSL. First generates a 2048-bit RSA private key, then creates a self-signed X.509 certificate valid for 10 years (3650 days) using SHA-256 for signature.\nSOURCE: https://github.com/istio/istio/blob/master/tests/testdata/certs/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nopenssl genrsa -out cert.key 2048\nopenssl req -new -x509 -sha256 -key cert.key -out cert.crt -days 3650\n```\n\n----------------------------------------\n\nTITLE: Creating Istio Gateway and VirtualService for WebSocket Support\nDESCRIPTION: Creates the Istio Gateway and VirtualService resources that enable WebSocket connection upgrades for incoming traffic.\nSOURCE: https://github.com/istio/istio/blob/master/samples/websockets/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create -f samples/websockets/route.yaml\n```\n\n----------------------------------------\n\nTITLE: Viewing Istio Ztunnel Chart Configuration Options\nDESCRIPTION: Command to display the supported configuration options and documentation for the Istio Ztunnel Helm chart. This is useful for understanding available customization options.\nSOURCE: https://github.com/istio/istio/blob/master/manifests/charts/ztunnel/README.md#2025-04-23_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nhelm show values istio/ztunnel\n```\n\n----------------------------------------\n\nTITLE: Deploying TCP Echo Service with Istio Sidecar Injection\nDESCRIPTION: This command applies the TCP Echo deployment manifest to Kubernetes, with Istio sidecar injection enabled using istioctl kube-inject. It creates both a service and deployment for the TCP Echo application.\nSOURCE: https://github.com/istio/istio/blob/master/samples/tcp-echo/README.md#2025-04-23_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ kubectl apply -f <(istioctl kube-inject -f tcp-echo.yaml)\nservice/tcp-echo created\ndeployment.apps/tcp-echo created\n```\n\n----------------------------------------\n\nTITLE: Building Docker Images for Bookinfo Sample in Bash\nDESCRIPTION: Builds Docker images for the Bookinfo sample using the build-services.sh script with the --load option. This command compiles the code and loads the resulting images into the local Docker daemon.\nSOURCE: https://github.com/istio/istio/blob/master/samples/bookinfo/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd samples/bookinfo\nBOOKINFO_TAG=$TAG BOOKINFO_HUB=$HUB src/build-services.sh --load\n```\n\n----------------------------------------\n\nTITLE: Applying Telemetry Configuration\nDESCRIPTION: Command to apply Telemetry resource configuration for Istio access log forwarding.\nSOURCE: https://github.com/istio/istio/blob/master/samples/open-telemetry/loki/REAME.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f telemetry.yaml\n```\n\n----------------------------------------\n\nTITLE: Testing the Helloworld service via Istio ingress gateway\nDESCRIPTION: These commands set up the gateway URL and test access to the Helloworld service through the Istio ingress gateway.\nSOURCE: https://github.com/istio/istio/blob/master/samples/helloworld/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nexport GATEWAY_URL=$INGRESS_HOST:$INGRESS_PORT\ncurl http://$GATEWAY_URL/hello\n```\n\n----------------------------------------\n\nTITLE: Deploying the External Authorization Service in Kubernetes\nDESCRIPTION: Command to deploy the external authorization service in a dedicated pod using kubectl and a predefined YAML configuration.\nSOURCE: https://github.com/istio/istio/blob/master/samples/extauthz/README.md#2025-04-23_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ kubectl apply -f ext-authz.yaml\nservice/ext-authz created\ndeployment.apps/ext-authz created\n```\n\n----------------------------------------\n\nTITLE: Deploying Individual Istio Telemetry Addons with kubectl\nDESCRIPTION: Shell command to deploy a specific telemetry addon for Istio, using Prometheus as an example. This allows for selective installation of only needed observability components.\nSOURCE: https://github.com/istio/istio/blob/master/samples/addons/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubectl apply -f samples/addons/prometheus.yaml\n```\n\n----------------------------------------\n\nTITLE: Installing Istio Ztunnel Helm Chart\nDESCRIPTION: Command to install the Istio Ztunnel Helm chart. This will deploy the Ztunnel component in your Kubernetes cluster.\nSOURCE: https://github.com/istio/istio/blob/master/manifests/charts/ztunnel/README.md#2025-04-23_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nhelm install ztunnel istio/ztunnel\n```\n\n----------------------------------------\n\nTITLE: Building and Running Istio Fuzzers with OSS-Fuzz\nDESCRIPTION: Commands to clone the OSS-Fuzz repository, build the Istio fuzzing image, and build the fuzzers for Istio. This setup is required to run fuzzing tests locally on Istio code.\nSOURCE: https://github.com/istio/istio/blob/master/tests/fuzz/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone --depth=1 https://github.com/google/oss-fuzz.git\ncd oss-fuzz\npython infra/helper.py build_image istio\npython infra/helper.py build_fuzzers istio ~/go/src/istio.io/istio\n```\n\n----------------------------------------\n\nTITLE: Apply Telemetry Configuration\nDESCRIPTION: Commands to apply the Telemetry resource configuration\nSOURCE: https://github.com/istio/istio/blob/master/samples/open-telemetry/tracing/README.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n <namespace> apply -f ./telemetry.yaml\nkubectl apply -f ./telemetry.yaml\n```\n\n----------------------------------------\n\nTITLE: Deploying OpenTelemetry Collector in Kubernetes\nDESCRIPTION: This command applies the OpenTelemetry collector configuration from an external YAML file to the observability namespace in Kubernetes.\nSOURCE: https://github.com/istio/istio/blob/master/samples/open-telemetry/als/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f ../otel.yaml -n observability\n```\n\n----------------------------------------\n\nTITLE: Applying APT Package Manager Configuration for External Access in Istio\nDESCRIPTION: Demonstrates how to allow pods to access APT package repositories by applying the aptget.yaml configuration. This enables apt-get update and apt-get install commands to work properly from within Istio-managed pods.\nSOURCE: https://github.com/istio/istio/blob/master/samples/external/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create -f aptget.yaml\n```\n\n----------------------------------------\n\nTITLE: Running setupkind.sh Script with Basic Parameters\nDESCRIPTION: Example showing basic usage of the setupkind.sh script to create a KinD cluster with specified name, Kubernetes version, and IP space. The script supports configuring the cluster name, Kubernetes release, IP address space for load balancers, and IP family options.\nSOURCE: https://github.com/istio/istio/blob/master/samples/kind-lb/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./setupkind.sh --cluster-name cluster1 --k8s-release 1.22.1 --ip-space 255 -i dual\n\nWhere:\n  -n|--cluster-name  - name of the k8s cluster to be created\n  -r|--k8s-release   - the release of the k8s to setup, latest available if not given\n  -s|--ip-space      - the 2nd to the last part for public ip addresses, 255 if not given, valid range: 0-255.\n  -m|--mode          - setup the required number of nodes per deployment model. Values are sidecar (1 node) or ambient (minimum of 2)\n  -w|--worker-nodes  - the number of worker nodes to create. Default is 1\n  --pod-subnet       - the pod subnet to specify. Default is 10.244.0.0/16 for IPv4 and fd00:10:244::/56 for IPv6\n  --service-subnet   - the service subnet to specify. Default is 10.96.0.0/16 for IPv4 and fd00:10:96::/112 for IPv6\n  -i|--ip-family     - ip family to be supported, default is ipv4 only. Value should be ipv4, ipv6, or dual\n  --ipv6gw          - set ipv6 as the gateway, necessary for dual-stack IPv6-preferred clusters\n  -h|--help          - print the usage of this script\n```\n\n----------------------------------------\n\nTITLE: Installing Istio CNI Chart in Kubernetes\nDESCRIPTION: Command to install the Istio CNI chart with the release name 'istio-cni' in the 'kube-system' namespace. This is the recommended installation method to ensure proper prioritization.\nSOURCE: https://github.com/istio/istio/blob/master/manifests/charts/istio-cni/README.md#2025-04-23_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nhelm install istio-cni istio/cni -n kube-system\n```\n\n----------------------------------------\n\nTITLE: Installing Istiod Helm Chart\nDESCRIPTION: Commands to create the istio-system namespace and install the Istiod Helm chart. This deploys the Istio control plane in your Kubernetes cluster.\nSOURCE: https://github.com/istio/istio/blob/master/manifests/charts/istio-control/istio-discovery/README.md#2025-04-23_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nkubectl create namespace istio-system\nhelm install istiod istio/istiod --namespace istio-system\n```\n\n----------------------------------------\n\nTITLE: Testing with Fortio to Generate Traffic\nDESCRIPTION: Command to execute a curl request from the Fortio pod to the httpbin service to generate traffic that will produce access logs.\nSOURCE: https://github.com/istio/istio/blob/master/samples/open-telemetry/als/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl exec -it $(kubectl get po | grep fortio | awk '{print $1}') -- fortio curl httpbin:8000/ip\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Label Selection in Go\nDESCRIPTION: These commands show how to run tests with specific labels using the --istio.test.select flag for including or excluding tests.\nSOURCE: https://github.com/istio/istio/blob/master/tests/integration/README.md#2025-04-23_snippet_13\n\nLANGUAGE: console\nCODE:\n```\n$ go test ./... --istio.test.select +customsetup\n$ go test ./... --istio.test.select -customsetup\n$ go test ./... --istio.test.select +customsetup,-postsubmit\n```\n\n----------------------------------------\n\nTITLE: Deploying Complete Istio Stack with Bookinfo using Skaffold\nDESCRIPTION: Command to deploy the full Istio stack including base, control plane, ingress, Kiali, and the Bookinfo sample application using Skaffold's run command.\nSOURCE: https://github.com/istio/istio/blob/master/samples/cicd/skaffold/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nskaffold run -m ingress,kiali,bookinfo\n```\n\n----------------------------------------\n\nTITLE: Enabling GitHub Access for Istio-Managed Pods\nDESCRIPTION: Shows how to configure Istio to allow pods to access GitHub repositories by applying the github.yaml configuration. This enables git clone operations to succeed when targeting GitHub URLs.\nSOURCE: https://github.com/istio/istio/blob/master/samples/external/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create -f github.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring PyPI Access for Python Package Installation in Istio\nDESCRIPTION: Illustrates how to allow pods to access Python Package Index (PyPI) by applying the pypi.yaml configuration. This enables pip commands to work properly for updating Python libraries from within Istio-managed pods.\nSOURCE: https://github.com/istio/istio/blob/master/samples/external/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create -f pypi.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring Weight-Based Traffic Routing\nDESCRIPTION: Command to apply a route rule that distributes traffic 90% to v1 and 10% to v2 of the helloworld service.\nSOURCE: https://github.com/istio/istio/blob/master/samples/helloworld/gateway-api/README.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f ./helloworld-route.yaml\n```\n\n----------------------------------------\n\nTITLE: Deploying Istio Base and Istiod using Skaffold\nDESCRIPTION: Command to deploy the base Istio installation and Istiod control plane using Skaffold's run command with the istiod module.\nSOURCE: https://github.com/istio/istio/blob/master/samples/cicd/skaffold/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nskaffold run -m istiod\n```\n\n----------------------------------------\n\nTITLE: Installing Istio Base Chart\nDESCRIPTION: This snippet demonstrates how to create the istio-system namespace and install the Istio base chart with the release name 'istio-base'. This sets up the shared resources required by all Istio revisions.\nSOURCE: https://github.com/istio/istio/blob/master/manifests/charts/base/README.md#2025-04-23_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nkubectl create namespace istio-system\nhelm install istio-base istio/base -n istio-system\n```\n\n----------------------------------------\n\nTITLE: Upgrading Existing Helm Release to New Chart\nDESCRIPTION: Command to upgrade an existing Helm release of the old Istio ingress gateway chart to the new unified gateway chart.\nSOURCE: https://github.com/istio/istio/blob/master/manifests/charts/gateway/README.md#2025-04-23_snippet_8\n\nLANGUAGE: console\nCODE:\n```\nhelm upgrade istio-ingress manifests/charts/gateway -n istio-system --set name=istio-ingressgateway --set labels.app=istio-ingressgateway --set labels.istio=ingressgateway\n```\n\n----------------------------------------\n\nTITLE: Setting Up Istio Ambient Mesh with ArgoCD\nDESCRIPTION: Bash commands to deploy Istio, supporting software, and the bookinfo sample application. The script replaces a placeholder repository URL with the user's actual repository URL in all YAML files, then creates the meta-application in ArgoCD.\nSOURCE: https://github.com/istio/istio/blob/master/samples/ambient-argo/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nread -p 'Please enter the URL to your repo:'\nOLD_REPO='{repo-placeholder}'\nfind . \\( -type d -name .git -prune \\) -o -type f -name '*.yaml' -print0 | xargs -0 sed -i s,$OLD_REPO,$NEW_REPO,g\nargocd create application -f meta-application.json\n```\n\n----------------------------------------\n\nTITLE: Compiling Bookinfo Sample Code in Bash\nDESCRIPTION: Compiles the Bookinfo sample code using the build-services.sh script. It uses the previously set BOOKINFO_TAG and BOOKINFO_HUB environment variables to specify the Docker image tag and hub.\nSOURCE: https://github.com/istio/istio/blob/master/samples/bookinfo/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd samples/bookinfo\nBOOKINFO_TAG=$TAG BOOKINFO_HUB=$HUB src/build-services.sh\n```\n\n----------------------------------------\n\nTITLE: Granting Admin Permissions in Kubernetes\nDESCRIPTION: Creates a cluster role binding to grant the current user cluster admin permissions.\nSOURCE: https://github.com/istio/istio/blob/master/tests/integration/GKE.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create clusterrolebinding myname-cluster-admin-binding \\\n   --clusterrole=cluster-admin \\\n   --user=$(gcloud config get-value core/account)\n```\n\n----------------------------------------\n\nTITLE: Deploying East-West Gateway for Istio Multicluster Setup\nDESCRIPTION: This snippet demonstrates how to deploy an East-West Gateway in a primary Istio cluster. It uses environment variables to specify the mesh, cluster, and network, then generates and applies the gateway manifest.\nSOURCE: https://github.com/istio/istio/blob/master/samples/multicluster/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport MESH=mesh1\nexport CLUSTER=cluster1\nexport NETWORK=network1\n./samples/multicluster/gen-eastwest-gateway.sh | \\\n    istioctl manifest generate -f - | \\\n    kubectl apply -f -\n```\n\n----------------------------------------\n\nTITLE: Manual Sidecar Injection for Custom Bootstrap Configuration\nDESCRIPTION: These commands manually inject the Istio sidecar into the application deployment when automatic sidecar injection is not enabled, then apply the modified configuration.\nSOURCE: https://github.com/istio/istio/blob/master/samples/custom-bootstrap/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nistioctl kube-inject -f example-app.yaml -o example-app-istio.yaml\nkubectl apply -f example-app-istio.yaml\n```\n\n----------------------------------------\n\nTITLE: Deploying Sleep Service with SPIRE Integration\nDESCRIPTION: Commands to deploy a modified version of the sleep service with SPIRE integration enabled, with options for environments with and without automatic sidecar injection.\nSOURCE: https://github.com/istio/istio/blob/master/samples/security/spire/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f sleep-spire.yaml\n```\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f <(istioctl kube-inject -f sleep-spire.yaml)\n```\n\n----------------------------------------\n\nTITLE: Installing Istio with SPIRE Configuration\nDESCRIPTION: Command to install Istio using the custom SPIRE configuration profile. Requires istioctl version 1.14 or newer.\nSOURCE: https://github.com/istio/istio/blob/master/samples/security/spire/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nistioctl install -f istio-spire-config.yaml\n```\n\n----------------------------------------\n\nTITLE: Testing Httpbin Service with Curl Commands\nDESCRIPTION: Series of kubectl commands to test different httpbin endpoints using dockerqa/curl image. Tests include HTML response, status code 500, and delayed response endpoints.\nSOURCE: https://github.com/istio/istio/blob/master/samples/httpbin/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl run -i --rm --restart=Never dummy --image=dockerqa/curl:ubuntu-trusty --command -- curl --silent httpbin:8000/html\nkubectl run -i --rm --restart=Never dummy --image=dockerqa/curl:ubuntu-trusty --command -- curl --silent --head httpbin:8000/status/500\ntime kubectl run -i --rm --restart=Never dummy --image=dockerqa/curl:ubuntu-trusty --command -- curl --silent httpbin:8000/delay/5\n```\n\n----------------------------------------\n\nTITLE: Updating Generated Manifests in Istio\nDESCRIPTION: Commands to regenerate manifests after updating Helm charts. This ensures that the istioctl binary includes the correct version of the charts for testing purposes.\nSOURCE: https://github.com/istio/istio/blob/master/manifests/charts/UPDATING-CHARTS.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ make copy-templates update-golden\n```\n\n----------------------------------------\n\nTITLE: Exposing Istiod Service for Primary-Remote Istio Configuration\nDESCRIPTION: This command applies a configuration to expose the Istiod service through the East-West Gateway. This is necessary for giving a remote cluster access to the control plane in a primary cluster.\nSOURCE: https://github.com/istio/istio/blob/master/samples/multicluster/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f samples/multicluster/expose-istiod.yaml -n istio-system\n```\n\n----------------------------------------\n\nTITLE: Installing WebSocket App with Manual Sidecar Injection\nDESCRIPTION: Creates a Kubernetes deployment with the Tornado WebSocket application using manual sidecar injection through istioctl.\nSOURCE: https://github.com/istio/istio/blob/master/samples/websockets/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create -f <(istioctl kube-inject -f samples/websockets/app.yaml)\n```\n\n----------------------------------------\n\nTITLE: Istio Mesh Configuration\nDESCRIPTION: YAML configuration for enabling OpenTelemetry extension provider in Istio mesh\nSOURCE: https://github.com/istio/istio/blob/master/samples/open-telemetry/tracing/README.md#2025-04-23_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nmesh: |-\n  extensionProviders:\n  - name: otel-tracing\n    opentelemetry:\n      port: 4317\n      service: opentelemetry-collector.observability.svc.cluster.local\n```\n\n----------------------------------------\n\nTITLE: Installing Istio with Demo Profile\nDESCRIPTION: Command to install Istio using the demo profile with the istioctl tool. The -y flag automatically confirms the installation without prompting.\nSOURCE: https://github.com/istio/istio/blob/master/samples/open-telemetry/als/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nistioctl install --set profile=demo -y\n```\n\n----------------------------------------\n\nTITLE: Initializing Test Suite with TestMain in Go\nDESCRIPTION: Creates a basic TestMain function to bootstrap an Istio test suite. This is required for all tests using the framework, with only one suite allowed per package.\nSOURCE: https://github.com/istio/istio/blob/master/tests/integration/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc TestMain(m *testing.M) {\n    framework.\n        NewSuite(\"mysuite\", m).\n        Run()\n}\n```\n\n----------------------------------------\n\nTITLE: OpenTelemetry Collector Base Configuration\nDESCRIPTION: Basic YAML configuration for otel-collector defining receivers, processors, and exporters\nSOURCE: https://github.com/istio/istio/blob/master/samples/open-telemetry/tracing/README.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nreceivers:\n  otlp:\n    protocols:\n      grpc:\n      http:\nprocessors:\n  batch:\nexporters:\n  logging:\n    loglevel: debug\nservice:\n  pipelines:\n    logs:\n      receivers: [otlp]\n      processors: [batch]\n      exporters: [logging]\n```\n\n----------------------------------------\n\nTITLE: Exposing Services for Multi-network Istio Configuration\nDESCRIPTION: This command applies a configuration to expose services through the East-West Gateway in each cluster. This enables cross-cluster load balancing between clusters in different networks.\nSOURCE: https://github.com/istio/istio/blob/master/samples/multicluster/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f samples/multicluster/expose-services.yaml -n istio-system\n```\n\n----------------------------------------\n\nTITLE: Setting up Istio Helm Repository\nDESCRIPTION: Commands to add the Istio Helm repository and update the local repository cache. This is a prerequisite for installing the Istio Ztunnel chart.\nSOURCE: https://github.com/istio/istio/blob/master/manifests/charts/ztunnel/README.md#2025-04-23_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nhelm repo add istio https://istio-release.storage.googleapis.com/charts\nhelm repo update\n```\n\n----------------------------------------\n\nTITLE: Jaeger Exporter Configuration\nDESCRIPTION: YAML configuration for setting up Jaeger as the tracing exporter in otel-collector\nSOURCE: https://github.com/istio/istio/blob/master/samples/open-telemetry/tracing/README.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nexporters:\n  jaeger:\n    endpoint: jaeger-collector.istio-system.svc.cluster.local:14250\n    tls:\n      insecure: true\n    sending_queue:\n      enabled: true\n    retry_on_failure:\n      enabled: true\nservice:\n  pipelines:\n    traces:\n      exporters:\n      - jaeger\n```\n\n----------------------------------------\n\nTITLE: Building and Pushing All Docker Images with Buildx\nDESCRIPTION: Command to build all sample docker images and push them to a registry. By default pushes to localhost:5000 and builds for linux/amd64,linux/arm64 platforms. Can be customized using HUB and PLATFORMS variables.\nSOURCE: https://github.com/istio/istio/blob/master/samples/builder/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker buildx bake --push\n```\n\n----------------------------------------\n\nTITLE: Applying the Helloworld gateway configuration in Istio\nDESCRIPTION: This command applies the gateway configuration required for external access to the Helloworld service in Istio.\nSOURCE: https://github.com/istio/istio/blob/master/samples/helloworld/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f helloworld-gateway.yaml\n```\n\n----------------------------------------\n\nTITLE: Applying Helloworld Gateway Configuration\nDESCRIPTION: Command to apply the gateway configuration for the helloworld service, which creates a Kubernetes Gateway resource that also deploys an associated controller.\nSOURCE: https://github.com/istio/istio/blob/master/samples/helloworld/gateway-api/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f ./helloworld-gateway.yaml\n```\n\n----------------------------------------\n\nTITLE: Setting Up Environment Variables for Gateway Access\nDESCRIPTION: Commands to wait for the gateway to be ready and then set the INGRESS_HOST environment variable to the gateway's address for accessing the service.\nSOURCE: https://github.com/istio/istio/blob/master/samples/helloworld/gateway-api/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl wait --for=condition=ready gtw helloworld-gateway\nexport INGRESS_HOST=$(kubectl get gtw helloworld-gateway -o jsonpath='{.status.addresses[*].value}')\n```\n\n----------------------------------------\n\nTITLE: Viewing Kubelet CNI Plugin Logs\nDESCRIPTION: Command to view the last 1000 kubelet log entries using journalctl, which contain CNI plugin execution logs, filtered through less for better searching.\nSOURCE: https://github.com/istio/istio/blob/master/cni/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\njournalctl -t kubelet -n 1000 | less\n```\n\n----------------------------------------\n\nTITLE: Checking Istio Version Configuration\nDESCRIPTION: A bash command that uses yq to quickly check what Istio versions are configured in the repository. It extracts version information from the control-plane-appset.yaml file, tag information from tags.yaml, and finds all targetRevision entries across Istio YAML files.\nSOURCE: https://github.com/istio/istio/blob/master/samples/ambient-argo/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyq '.spec.generators[0].list.elements' < istio/control-plane-appset.yaml  && yq '.spec.source.helm.valuesObject.base.tags' < istio/tags.yaml && grep 'targetRevision' istio/*.yaml\n```\n\n----------------------------------------\n\nTITLE: Setting Up Helm Repository for Istio Charts\nDESCRIPTION: Commands to add the Istio Helm repository and update the local repository cache. This is a prerequisite for installing the Istio CNI chart.\nSOURCE: https://github.com/istio/istio/blob/master/manifests/charts/istio-cni/README.md#2025-04-23_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nhelm repo add istio https://istio-release.storage.googleapis.com/charts\nhelm repo update\n```\n\n----------------------------------------\n\nTITLE: Creating a Singleton Collection for ConfigMap Count in Go\nDESCRIPTION: Demonstrates how to create a Singleton collection that keeps track of the number of ConfigMaps in the cluster. It uses the krt.NewSingleton function and Fetch operation to query other collections.\nSOURCE: https://github.com/istio/istio/blob/master/pkg/kube/krt/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nConfigMapCount := krt.NewSingleton[int](func(ctx krt.HandlerContext) *int {\n    cms := krt.Fetch(ctx, ConfigMaps)\n    return ptr.Of(len(cms))\n})\n```\n\n----------------------------------------\n\nTITLE: Installing WebSocket App with Automatic Sidecar Injection\nDESCRIPTION: Creates a Kubernetes deployment with the Tornado WebSocket application using automatic sidecar injection.\nSOURCE: https://github.com/istio/istio/blob/master/samples/websockets/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create -f samples/websockets/app.yaml\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Istiod Helm Chart\nDESCRIPTION: Command to remove the Istiod deployment from the Kubernetes cluster. This will delete the Istio control plane but won't remove CRDs.\nSOURCE: https://github.com/istio/istio/blob/master/manifests/charts/istio-control/istio-discovery/README.md#2025-04-23_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nhelm delete istiod --namespace istio-system\n```\n\n----------------------------------------\n\nTITLE: Running HBONE Server via CLI\nDESCRIPTION: Example of using the HBONE server CLI tool to start a TLS-enabled server on a specified port.\nSOURCE: https://github.com/istio/istio/blob/master/pkg/hbone/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngo install ./pkg/test/echo/cmd/server\n# Serve on port 15008 (default) with TLS\nserver --tls 15008 --crt tests/testdata/certs/cert.crt --key tests/testdata/certs/cert.key\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Suite with Setup in Go\nDESCRIPTION: Shows how to configure a test suite with custom setup, including deploying Istio and running your own setup code. This allows for test-wide environment setup before tests run.\nSOURCE: https://github.com/istio/istio/blob/master/tests/integration/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc TestMain(m *testing.M) {\n    framework.\n        NewSuite(\"mysuite\", m).\n        // Deploy Istio on the cluster\n        Setup(istio.Setup(nil, nil)).\n        // Run your own custom setup\n        Setup(mySetup).\n        Run()\n}\n\nfunc mySetup(ctx resource.Context) error {\n    // Your own setup code\n    return nil\n}\n```\n\n----------------------------------------\n\nTITLE: Install Istio with Demo Profile\nDESCRIPTION: Command to install Istio with the demo profile that includes OpenTelemetry tracing\nSOURCE: https://github.com/istio/istio/blob/master/samples/open-telemetry/tracing/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nistioctl install --set profile=demo -y\n```\n\n----------------------------------------\n\nTITLE: Deploying specific versions of the Helloworld application\nDESCRIPTION: These commands allow deploying specific versions (v1 or v2) of the Helloworld application independently using label selectors.\nSOURCE: https://github.com/istio/istio/blob/master/samples/helloworld/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f helloworld.yaml -l version=v1\nkubectl apply -f helloworld.yaml -l version=v2\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple KinD Clusters with Different IP Spaces\nDESCRIPTION: Example demonstrating how to create multiple KinD clusters with different IP spaces to avoid address overlapping. Each cluster uses a different value for the ip-space parameter to ensure load balancer IP addresses don't conflict.\nSOURCE: https://github.com/istio/istio/blob/master/samples/kind-lb/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./setupkind.sh --cluster-name cluster1 --ip-space 255 -i dual\n./setupkind.sh --cluster-name cluster2 --ip-space 245 -i dual\n```\n\n----------------------------------------\n\nTITLE: Configuring Mesh Settings in YAML\nDESCRIPTION: Example YAML configuration for setting Mesh Config options. This demonstrates how to configure access logs to write to standard output.\nSOURCE: https://github.com/istio/istio/blob/master/manifests/charts/istio-control/istio-discovery/README.md#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nmeshConfig:\n  accessLogFile: /dev/stdout\n```\n\n----------------------------------------\n\nTITLE: Creating Release Note File in YAML for Istio\nDESCRIPTION: This snippet demonstrates the structure of a release note file for Istio. It includes fields for specifying the type of change, affected area, related issues, documentation links, and detailed notes for releases, upgrades, and security updates.\nSOURCE: https://github.com/istio/istio/blob/master/releasenotes/README.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: release-notes/v2\nkind: bug-fix\narea: traffic-management\n\n# issue is a list of GitHub issues resolved in this note.\nissue:\n  - https://github.com/istio/istio/issues/23622\n  - 23624\n\ndocs:\n - '[usage] https://istio.io/latest/docs/tasks/traffic-management/request-routing/'\n - '[reference] https://istio.io/latest/docs/reference/config/istio.mesh.v1alpha1/'\n\nreleaseNotes:\n- |\n  **Fixed** an issue preventing the operator from recreating watched resources if they are deleted\n\nupgradeNotes:\n  - title: Change the readiness port of gateways\n    content: |\n      If you are using the 15020 port to check the health of your Istio ingress gateway with your Kubernetes network load balancer, change the port from 15020 to 15021.\n\nsecurityNotes:\n- |\n  __[CVE-2020-15104](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-15104)__:\n  When validating TLS certificates, Envoy incorrectly allows a wildcard DNS Subject Alternative Name to apply to multiple subdomains. For example, with a SAN of `*.example.com`, Envoy incorrectly allows `nested.subdomain.example.com`, when it should only allow `subdomain.example.com`.\n    - CVSS Score: 6.6 [AV:N/AC:H/PR:H/UI:N/S:C/C:H/I:L/A:N/E:F/RL:O/RC:C](https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator?vector=AV:N/AC:H/PR:H/UI:N/S:C/C:H/I:L/A:N/E:F/RL:O/RC:C&version=3.1)\n```\n\n----------------------------------------\n\nTITLE: Setting up IPv6-Preferred Dual-Stack KinD Cluster\nDESCRIPTION: Example showing how to create a dual-stack KinD cluster that prefers IPv6 over IPv4 addressing. This configuration specifies custom pod and service subnets with IPv6 addresses listed first, and enables the IPv6 gateway option.\nSOURCE: https://github.com/istio/istio/blob/master/samples/kind-lb/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./setupkind.sh --cluster-name cluster2 --ip-space 245 -i dual --pod-subnet \"fd00:100:96::/48,100.96.0.0/11\" --service-subnet \"fd00:100:64::/108,100.64.0.0/13\" --ipv6gw\n```\n\n----------------------------------------\n\nTITLE: Telemetry Resource Configuration\nDESCRIPTION: YAML configuration for the Telemetry resource defining tracing providers\nSOURCE: https://github.com/istio/istio/blob/master/samples/open-telemetry/tracing/README.md#2025-04-23_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ntracing:\n- providers:\n  - name: otel-tracing\n  randomSamplingPercentage: 0\n```\n\n----------------------------------------\n\nTITLE: Deploying Istio with Ingress Gateway using Skaffold\nDESCRIPTION: Command to deploy Istio base, control plane, and ingress gateway components using Skaffold's run command with the ingress module.\nSOURCE: https://github.com/istio/istio/blob/master/samples/cicd/skaffold/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nskaffold run -m ingress\n```\n\n----------------------------------------\n\nTITLE: Updating YAML Files with Custom Image References\nDESCRIPTION: Command to update the Bookinfo YAML deployment files to reference custom-built Docker images. Sets the BOOKINFO_UPDATE environment variable to trigger the YAML update process.\nSOURCE: https://github.com/istio/istio/blob/master/samples/bookinfo/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncd samples/bookinfo\nexport BOOKINFO_UPDATE=true\nBOOKINFO_TAG=test1.0 BOOKINFO_HUB=user1 src/build-services.sh\n```\n\n----------------------------------------\n\nTITLE: Retrieving SPIRE-Issued SVID Certificate\nDESCRIPTION: Commands to extract the SPIFFE Verifiable Identity Document (SVID) from the sleep pod using istioctl and decode it for inspection.\nSOURCE: https://github.com/istio/istio/blob/master/samples/security/spire/README.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nexport SLEEP_POD=$(kubectl get pod -l app=sleep -o jsonpath=\"{.items[0].metadata.name}\")\nistioctl pc secret $SLEEP_POD -o json | jq -r \\\n'.dynamicActiveSecrets[0].secret.tlsCertificate.certificateChain.inlineBytes' | base64 --decode > chain.pem\n```\n\n----------------------------------------\n\nTITLE: Deploy OpenTelemetry Collector\nDESCRIPTION: Command to deploy the otel-collector backend to a specified namespace\nSOURCE: https://github.com/istio/istio/blob/master/samples/open-telemetry/tracing/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n <namespace> apply -f ../otel.yaml\n```\n\n----------------------------------------\n\nTITLE: Verifying Pod's Bootstrap Configuration in Istio\nDESCRIPTION: This command inspects the actual Envoy bootstrap configuration being used by a specific pod in the Istio service mesh.\nSOURCE: https://github.com/istio/istio/blob/master/samples/custom-bootstrap/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nistioctl proxy-config bootstrap <POD-NAME>\n```\n\n----------------------------------------\n\nTITLE: Creating Intermediate CA for Specific Cluster Example in Istio\nDESCRIPTION: Example of generating an intermediate CA certificate for a cluster named 'cluster01'. This creates certificates that include the cluster location in the Subject field to differentiate between clusters.\nSOURCE: https://github.com/istio/istio/blob/master/tools/certs/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmake -f Makefile.k8s.mk cluster01-cacerts\n```\n\n----------------------------------------\n\nTITLE: Open Jaeger Dashboard\nDESCRIPTION: Command to access the Jaeger dashboard through Istio\nSOURCE: https://github.com/istio/istio/blob/master/samples/open-telemetry/tracing/README.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nistioctl dashboard jaeger\n```\n\n----------------------------------------\n\nTITLE: Deploying Istio with Ingress and Kiali using Skaffold\nDESCRIPTION: Command to deploy Istio base, control plane, ingress gateway, and Kiali dashboard using Skaffold's run command with multiple modules.\nSOURCE: https://github.com/istio/istio/blob/master/samples/cicd/skaffold/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nskaffold run -m ingress,kiali\n```\n\n----------------------------------------\n\nTITLE: Installing Istio Gateway with OpenShift Profile\nDESCRIPTION: Command to install the Istio Gateway chart with the OpenShift profile for deployment in an OpenShift cluster.\nSOURCE: https://github.com/istio/istio/blob/master/manifests/charts/gateway/README.md#2025-04-23_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nhelm install istio-ingressgateway istio/gateway --set profile=openshift\n```\n\n----------------------------------------\n\nTITLE: Building Specific Docker Images with Buildx\nDESCRIPTION: Command to build and push specific sample images rather than the complete set. Example shows building the helloworld-v1 and tcp-echo-server images.\nSOURCE: https://github.com/istio/istio/blob/master/samples/builder/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker buildx bake --push examples-helloworld-v1 tcp-echo-server\n```\n\n----------------------------------------\n\nTITLE: Deploying Helloworld Service Versions\nDESCRIPTION: Command to deploy two versions (v1 and v2) of the helloworld service using a predefined YAML configuration.\nSOURCE: https://github.com/istio/istio/blob/master/samples/helloworld/gateway-api/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f ../helloworld.yaml\n```\n\n----------------------------------------\n\nTITLE: Dashboard Generation Command\nDESCRIPTION: Shell command to generate all required dashboard output for both Jsonnet-based and legacy dashboards.\nSOURCE: https://github.com/istio/istio/blob/master/manifests/addons/dashboards/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./manifests/addons/gen.sh\n```\n\n----------------------------------------\n\nTITLE: Visualizing Config Ingestion Flow with Mermaid Diagram\nDESCRIPTION: This diagram represents the high-level config ingestion flow in Istiod, showing how Service Discovery and ConfigStore components feed into PushContext, while Service Discovery also contributes to Endpoints processing. The diagram emphasizes the separate, optimized path for endpoint updates.\nSOURCE: https://github.com/istio/istio/blob/master/architecture/networking/pilot.md#2025-04-23_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n    sd(Service Discovery)\n    cs(ConfigStore)\n    ep(Endpoints)\n    pc(PushContext)\n    sd-->pc\n    cs-->pc\n    sd-->ep\n```\n\n----------------------------------------\n\nTITLE: Installing Loki in Istio System Namespace\nDESCRIPTION: Command to deploy Loki logging system in the istio-system namespace.\nSOURCE: https://github.com/istio/istio/blob/master/samples/open-telemetry/loki/REAME.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f ../../addons/loki.yaml -n istio-system\n```\n\n----------------------------------------\n\nTITLE: Applying Service Version Definitions\nDESCRIPTION: Command to apply service version definitions, which are required by Gateway API for backend service definitions instead of using DestinationRule subsets as in Istio API.\nSOURCE: https://github.com/istio/istio/blob/master/samples/helloworld/gateway-api/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f ./helloworld-versions.yaml\n```\n\n----------------------------------------\n\nTITLE: Authenticated Request Flow Diagram\nDESCRIPTION: Mermaid diagram illustrating the flow of an authenticated request to a captured destination in the mesh\nSOURCE: https://github.com/istio/istio/blob/master/architecture/ambient/peer-authentication.md#2025-04-23_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD;\nsrc[src pod]-->|15008|ztunnel{ztunnel}\nztunnel-->|HBONE|dwp{\"destination waypoint (all policy applied here)\"}\ndwp{destination waypoint}-->|15008|dztunnel{destination ztunnel}\ndztunnel-->|host network|dst[dst pod]\n```\n\n----------------------------------------\n\nTITLE: Testing HTTP Request Generation\nDESCRIPTION: Command to execute a test HTTP request from fortio pod to httpbin service.\nSOURCE: https://github.com/istio/istio/blob/master/samples/open-telemetry/loki/REAME.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubectl exec -it deploy/fortio -- fortio curl httpbin:8000/ip\n```\n\n----------------------------------------\n\nTITLE: Pushing Bookinfo Docker Images to Docker Hub\nDESCRIPTION: Command to build and push Bookinfo service Docker images to Docker Hub. Uses environment variables to set the Docker Hub username (HUB) and version tag (TAG) for the images.\nSOURCE: https://github.com/istio/istio/blob/master/samples/bookinfo/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd samples/bookinfo\nBOOKINFO_LATEST=true BOOKINFO_TAG=$TAG BOOKINFO_HUB=$HUB src/build-services.sh --push\n```\n\n----------------------------------------\n\nTITLE: Running Security Fuzz Tests in Kubernetes - Bash\nDESCRIPTION: Command to execute security fuzz tests against an existing Istio deployment in Kubernetes. Tests JWT authentication and authorization bypasses using specialized web vulnerability fuzzers.\nSOURCE: https://github.com/istio/istio/blob/master/tests/integration/security/fuzz/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo test ./tests/integration/security/fuzz/... -p 1 -v -tags=\"integfuzz integ\" -test.run \"TestFuzzAuthorization|TestRequestAuthentication\" \\\n  --istio.test.nocleanup --istio.test.env kube  --istio.test.kube.deploy=false - -timeout 30m \\\n  --istio.test.pullpolicy=IfNotPresent --istio.test.kube.loadbalancer=false --log_output_level=tf:debug\n```\n\n----------------------------------------\n\nTITLE: OpenTelemetry Collector Configuration\nDESCRIPTION: YAML configuration for the OpenTelemetry collector that sets up a gRPC receiver on port 4317, processes logs in batches, and exports them to stdout for debugging.\nSOURCE: https://github.com/istio/istio/blob/master/samples/open-telemetry/als/README.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nreceivers:\n  otlp:\n    protocols:\n      grpc:\n      http:\nprocessors:\n  batch:\nexporters:\n  logging:\n    loglevel: debug\nservice:\n  pipelines:\n    logs:\n      receivers: [otlp]\n      processors: [batch]\n      exporters: [logging]\n```\n\n----------------------------------------\n\nTITLE: Deploying Httpbin with Automatic Sidecar Injection\nDESCRIPTION: Command to deploy httpbin service when automatic sidecar injection is enabled in the Istio mesh.\nSOURCE: https://github.com/istio/istio/blob/master/samples/httpbin/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f httpbin.yaml\n```\n\n----------------------------------------\n\nTITLE: Visualizing Ztunnel Component Relationships with Mermaid\nDESCRIPTION: A flowchart diagram showing the relationships between CNI Plugin, CNI Agent, Ztunnel, and Pods. It illustrates how the CNI plugin calls the CNI Agent, which programs Ztunnel and watches Pods, while Ztunnel operates within Pods.\nSOURCE: https://github.com/istio/istio/blob/master/architecture/ambient/ztunnel-cni-lifecycle.md#2025-04-23_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    CNIP[\"CNI Plugin\"]\n    CNI[\"CNI Agent\"]\n    Z[\"Ztunnel\"]\n    Pods[\"Pods\"]\n    CNI --Programs--> Z\n    CNI --Watches--> Pods\n    Z --Runs Within--> Pods\n    CNIP --Calls--> CNI\n```\n\n----------------------------------------\n\nTITLE: Opening Grafana Dashboard\nDESCRIPTION: Command to access the Grafana dashboard for log visualization.\nSOURCE: https://github.com/istio/istio/blob/master/samples/open-telemetry/loki/REAME.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nistioctl dashboard grafana\n```\n\n----------------------------------------\n\nTITLE: Testing Istio Service Communication\nDESCRIPTION: Commands to execute a curl request to the Bookinfo ratings service from within the mesh. First exports the curl pod name to a variable, then executes a curl command inside the pod.\nSOURCE: https://github.com/istio/istio/blob/master/samples/curl/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport CURL_POD=$(kubectl get pod -l app=curl -o jsonpath={.items..metadata.name})\nkubectl exec -it $CURL_POD -c curl -- curl http://ratings.default.svc.cluster.local:9080/ratings/1\n{\"id\":1,\"ratings\":{\"Reviewer1\":5,\"Reviewer2\":4}}\n```\n\n----------------------------------------\n\nTITLE: Creating ClusterSPIFFEID Resource\nDESCRIPTION: Command to apply a ClusterSPIFFEID resource that defines registration entries for workloads with the SPIRE managed identity label.\nSOURCE: https://github.com/istio/istio/blob/master/samples/security/spire/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f clusterspiffeid.yaml\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Integration Test in Go\nDESCRIPTION: Demonstrates how to define a basic integration test that creates a component (Pilot) and applies configuration. The framework.TestContext wraps the testing.T interface.\nSOURCE: https://github.com/istio/istio/blob/master/tests/integration/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc TestMyLogic(t *testing.T) {\n    framework.\n        NewTest(t).\n        Run(func(ctx framework.TestContext) {\n            // Create a component\n            p := pilot.NewOrFail(ctx, ctx, cfg)\n\n            // Use the component.\n            // Apply Kubernetes Config\n            ctx.ApplyConfigOrFail(ctx, nil, mycfg)\n\n            // Do more stuff here.\n        }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Ingress Gateway for SPIRE\nDESCRIPTION: Command to patch the Istio Ingress Gateway deployment, adding the SPIRE managed identity label to enable SPIRE-based identity.\nSOURCE: https://github.com/istio/istio/blob/master/samples/security/spire/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl patch deployment istio-ingressgateway -n istio-system -p '{\"spec\":{\"template\":{\"metadata\":{\"labels\":{\"spiffe.io/spire-managed-identity\": \"true\"}}}}}}'\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Bootstrap Configuration in Istio\nDESCRIPTION: This command applies a ConfigMap containing the custom Envoy bootstrap configuration to the Kubernetes cluster.\nSOURCE: https://github.com/istio/istio/blob/master/samples/custom-bootstrap/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f custom-bootstrap.yaml\n```\n\n----------------------------------------\n\nTITLE: Cleanup Resources\nDESCRIPTION: Commands to clean up the resources created during the demo by removing the OpenTelemetry collector deployment and Istio Telemetry resource.\nSOURCE: https://github.com/istio/istio/blob/master/samples/open-telemetry/als/README.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nkubectl delete -f ../otel.yaml -n observability\nkubectl delete telemetry mesh-default -n istio-system\n```\n\n----------------------------------------\n\nTITLE: Viewing OpenTelemetry Collector Logs\nDESCRIPTION: Command to view the logs from the OpenTelemetry collector pod in the observability namespace, which should contain the Istio access logs.\nSOURCE: https://github.com/istio/istio/blob/master/samples/open-telemetry/als/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubectl logs $(kubectl get po -n observability | grep otel | awk '{print $1}') -n observability\n```\n\n----------------------------------------\n\nTITLE: Setting up Kubernetes Horizontal Pod Autoscaler for Helloworld services\nDESCRIPTION: These commands configure autoscaling for both versions of the Helloworld service and check the status of the Horizontal Pod Autoscaler.\nSOURCE: https://github.com/istio/istio/blob/master/samples/helloworld/README.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nkubectl autoscale deployment helloworld-v1 --cpu-percent=50 --min=1 --max=10\nkubectl autoscale deployment helloworld-v2 --cpu-percent=50 --min=1 --max=10\nkubectl get hpa\n```\n\n----------------------------------------\n\nTITLE: Deploying a custom version of the Helloworld service\nDESCRIPTION: This command uses a script to generate a custom version of the Helloworld YAML and applies it directly to the Kubernetes cluster.\nSOURCE: https://github.com/istio/istio/blob/master/samples/helloworld/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./gen-helloworld.sh --version customversion | \\\n    kubectl apply -f -\n```\n\n----------------------------------------\n\nTITLE: Configuring Istio Components and Global Settings in YAML\nDESCRIPTION: This YAML configuration file sets up various Istio components, gateways, and global settings. It enables the base component, configures ingress and egress gateways, sets the image hub and tag, and defines global values such as the Istio namespace and config validation.\nSOURCE: https://github.com/istio/istio/blob/master/operator/cmd/mesh/testdata/profile-dump/output/all_off.txt#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents.base.enabled=true\ncomponents.cni.enabled=false\ncomponents.egressGateways[0].enabled=false\ncomponents.egressGateways[0].name=\"istio-egressgateway\"\ncomponents.ingressGateways[0].enabled=true\ncomponents.ingressGateways[0].name=\"istio-ingressgateway\"\ncomponents.pilot.enabled=false\nhub=\"gcr.io/istio-testing\"\nprofile=\"default\"\ntag=\"latest\"\nvalues.defaultRevision=\"\"\nvalues.global.configValidation=true\nvalues.global.istioNamespace=\"istio-system\"\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up SPIRE Namespace\nDESCRIPTION: Command to delete the SPIRE namespace and all resources within it as part of the teardown process.\nSOURCE: https://github.com/istio/istio/blob/master/samples/security/spire/README.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nkubectl delete namespace spire\n```\n\n----------------------------------------\n\nTITLE: Generating load on the Helloworld service for testing autoscaling\nDESCRIPTION: These commands run a load generation script twice to create sufficient load for triggering the autoscaler on the Helloworld service.\nSOURCE: https://github.com/istio/istio/blob/master/samples/helloworld/README.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n./loadgen.sh &\n./loadgen.sh & # run it twice to generate lots of load\n```\n\n----------------------------------------\n\nTITLE: Viewing OpenTelemetry Collector Logs\nDESCRIPTION: Command to view the logs from the OpenTelemetry collector pods.\nSOURCE: https://github.com/istio/istio/blob/master/samples/open-telemetry/loki/REAME.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nkubectl logs -l app=opentelemetry-collector -n istio-system --tail=-1\n```\n\n----------------------------------------\n\nTITLE: Deploying OpenTelemetry Collector\nDESCRIPTION: Command to deploy the OpenTelemetry collector configuration in the istio-system namespace.\nSOURCE: https://github.com/istio/istio/blob/master/samples/open-telemetry/loki/REAME.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f otel.yaml -n istio-system\n```\n\n----------------------------------------\n\nTITLE: Reproducing Fuzzing Failures in Istio\nDESCRIPTION: Command to reproduce a specific fuzzing failure using a downloaded test case from ClusterFuzz. This helps developers debug and fix issues found by fuzzing.\nSOURCE: https://github.com/istio/istio/blob/master/tests/fuzz/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython infra/helper.py reproduce istio FuzzX ~/Downloads/clusterfuzz-testcase-minimized-FuzzX-1234\n```\n\n----------------------------------------\n\nTITLE: Displaying Istio Gateway Routes Configuration Table\nDESCRIPTION: A table output showing configured routes in an Istio Gateway. The table lists routes with their VHOST names, domain patterns, path matching patterns, and associated virtual services. It includes both named virtual hosts and default backend routes.\nSOURCE: https://github.com/istio/istio/blob/master/istioctl/pkg/writer/envoy/configdump/testdata/routes/k8s-gateway-http-route-path-prefix/output.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nNAME        VHOST NAME                 DOMAINS                 MATCH                  VIRTUAL SERVICE\nhttp.80     httpbin.example.com:80     httpbin.example.com     PathPrefix:/get        http-0-istio-autogenerated-k8s-gateway.default\n            backend                    *                       /healthz/ready*        \n            backend                    *                       /stats/prometheus*     \n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Cluster-Wide SPIRE Resources\nDESCRIPTION: Commands to remove all cluster-scoped resources created for the SPIRE integration, including roles, bindings, webhooks, and custom resource definitions.\nSOURCE: https://github.com/istio/istio/blob/master/samples/security/spire/README.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nkubectl delete clusterrole spire-server-cluster-role spire-agent-cluster-role manager-role\nkubectl delete clusterrolebinding spire-server-cluster-role-binding spire-agent-cluster-role-binding manager-role-binding\nkubectl delete role spire-server-role leader-election-role\nkubectl delete rolebinding spire-server-role-binding leader-election-role-binding\nkubectl delete ValidatingWebhookConfiguration spire-controller-manager-webhook\nkubectl delete csidriver csi.spiffe.io\nkubectl delete CustomResourceDefinition clusterspiffeids.spire.spiffe.io\nkubectl delete CustomResourceDefinition clusterfederatedtrustdomains.spire.spiffe.io\n```\n\n----------------------------------------\n\nTITLE: Checking the status of Helloworld service autoscaling\nDESCRIPTION: This command checks the status of the Horizontal Pod Autoscaler to verify if it has scaled the replicas in response to the load.\nSOURCE: https://github.com/istio/istio/blob/master/samples/helloworld/README.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get hpa\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Logging in Istio Test Framework\nDESCRIPTION: Command to enable debug-level logging for the test framework and MCP protocol stack components during test execution. The log_output_level flag controls the verbosity of logging for specific components.\nSOURCE: https://github.com/istio/istio/blob/master/tests/integration/README.md#2025-04-23_snippet_15\n\nLANGUAGE: console\nCODE:\n```\n$ go test ./... --log_output_level=tf:debug\n```\n\n----------------------------------------\n\nTITLE: Testing Bookinfo Application via Command Line\nDESCRIPTION: Command to test that the Bookinfo application is functioning correctly by making an HTTP request to the productpage service from within a pod. Uses kubectl exec to run a curl command within the ratings pod.\nSOURCE: https://github.com/istio/istio/blob/master/samples/bookinfo/README.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ kubectl exec -it \"$(kubectl get pod -l app=ratings -o jsonpath='{.items[0].metadata.name}')\" -c ratings -- curl productpage:9080/productpage | grep -o \"<title>.*</title>\"\n<title>Simple Bookstore App</title>\n```\n\n----------------------------------------\n\nTITLE: Testing Denied Authorization Request\nDESCRIPTION: Command to test the external authorization service with a request that should be denied (contains an invalid authorization header). Shows the expected 403 Forbidden response.\nSOURCE: https://github.com/istio/istio/blob/master/samples/extauthz/README.md#2025-04-23_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ kubectl exec -it $(kubectl get pod -l app=sleep -o jsonpath={.items..metadata.name}) -c sleep -- curl -v ext-authz:8000 -H \"x-ext-authz: bla\"\n    > GET / HTTP/1.1\n    > Host: ext-authz-server:8000\n    > User-Agent: curl/7.73.0-DEV\n    > Accept: */*\n    > x-ext-authz: allowx\n    >\n    * Mark bundle as not supporting multiuse\n    < HTTP/1.1 403 Forbidden\n    < x-ext-authz-check-result: denied\n    < date: Tue, 03 Nov 2020 03:14:02 GMT\n    < content-length: 76\n    < content-type: text/plain; charset=utf-8\n    < x-envoy-upstream-service-time: 44\n    < server: envoy\n    <\n    * Connection #0 to host ext-authz-server left intact\n    denied by ext_authz for not found header `x-ext-authz: allow` in the request\n```\n\n----------------------------------------\n\nTITLE: Displaying Istio, Istio Proxy, and Envoy Version Information in Plaintext\nDESCRIPTION: This snippet shows the version information for an Istio deployment. It includes Istio core at version 1.10.0, Istio Proxy with a specific commit hash, and Envoy proxy at version 1.18.3 with build details.\nSOURCE: https://github.com/istio/istio/blob/master/istioctl/pkg/writer/envoy/configdump/testdata/versionsummary.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nIstio Version:       1.10.0\nIstio Proxy Version: 436f365a8007cd8a13a9f1321e7cce94bcc8883e\nEnvoy Version:       1.18.3/Clean/RELEASE/BoringSSL\n```\n\n----------------------------------------\n\nTITLE: Applying DaemonSet for Cluster-wide Core Dump Configuration in Kubernetes\nDESCRIPTION: This kubectl command applies a DaemonSet that configures core dump settings across all nodes in the Kubernetes cluster. It requires elevated privileges.\nSOURCE: https://github.com/istio/istio/blob/master/samples/proxy-coredump/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f daemonset.yaml\n```\n\n----------------------------------------\n\nTITLE: Testing Service Access with Load Distribution\nDESCRIPTION: Command to test access to the helloworld service by sending multiple requests to see the traffic distribution between v1 and v2 versions.\nSOURCE: https://github.com/istio/istio/blob/master/samples/helloworld/gateway-api/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nfor run in {1..10}; do curl http://$INGRESS_HOST/hello; done\n```\n\n----------------------------------------\n\nTITLE: Displaying Istio Version Information\nDESCRIPTION: Shows the version details for Istio, Istio Proxy, and Envoy components\nSOURCE: https://github.com/istio/istio/blob/master/istioctl/pkg/proxyconfig/testdata/config_dump_summary.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nIstio Version:       1.21.0-1226\nIstio Proxy Version: ee85c5f28702f00621aed895915fca565796b9e4\nEnvoy Version:       0.0.0\n```\n\n----------------------------------------\n\nTITLE: Migrating Existing Resources to Helm Management\nDESCRIPTION: Bash script to forcibly take ownership of existing resources for Helm management during migration.\nSOURCE: https://github.com/istio/istio/blob/master/manifests/charts/gateway/README.md#2025-04-23_snippet_9\n\nLANGUAGE: console\nCODE:\n```\nKINDS=(service deployment)\nRELEASE=istio-ingressgateway\nNAMESPACE=istio-system\nfor KIND in \"${KINDS[@]}\"; do\n    kubectl --namespace $NAMESPACE --overwrite=true annotate $KIND $RELEASE meta.helm.sh/release-name=$RELEASE\n    kubectl --namespace $NAMESPACE --overwrite=true annotate $KIND $RELEASE meta.helm.sh/release-namespace=$NAMESPACE\n    kubectl --namespace $NAMESPACE --overwrite=true label $KIND $RELEASE app.kubernetes.io/managed-by=Helm\ndone\n```\n\n----------------------------------------\n\nTITLE: Testing Bookinfo Application via Browser\nDESCRIPTION: Example URL for accessing the Bookinfo application in a web browser. Shows how to verify the application is working by accessing the product page through the browser interface.\nSOURCE: https://github.com/istio/istio/blob/master/samples/bookinfo/README.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nhttp://192.168.39.116:31395/productpage\n```\n\n----------------------------------------\n\nTITLE: Configuring Egress Gateway in YAML\nDESCRIPTION: YAML configuration for deploying a Gateway to be used as an Egress Gateway, setting the service type to ClusterIP.\nSOURCE: https://github.com/istio/istio/blob/master/manifests/charts/gateway/README.md#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nservice:\n  # Egress gateways do not need an external LoadBalancer IP\n  type: ClusterIP\n```\n\n----------------------------------------\n\nTITLE: Customizing Gateway Resource Names and Labels in YAML\nDESCRIPTION: YAML configuration to override default resource names and selector labels for migrating existing installations.\nSOURCE: https://github.com/istio/istio/blob/master/manifests/charts/gateway/README.md#2025-04-23_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nname: my-custom-gateway # Override the name to match existing resources\nlabels:\n  app: \"\" # Unset default app selector label\n  istio: ingressgateway # override default istio selector label\n  foo: bar # Add the existing custom selector label\n```\n\n----------------------------------------\n\nTITLE: Testing TCP Echo Service with Netcat\nDESCRIPTION: This command creates a temporary busybox pod to send the text 'world' to the TCP Echo service on port 9000 using netcat. It demonstrates how the server prepends 'hello' to the received text and returns 'hello world'.\nSOURCE: https://github.com/istio/istio/blob/master/samples/tcp-echo/README.md#2025-04-23_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ kubectl run -i --rm --restart=Never dummy --image=busybox -- sh -c \"echo world | nc tcp-echo 9000\"\nhello world\npod \"dummy\" deleted\n```\n\n----------------------------------------\n\nTITLE: Deploying Curl Service Pod in Kubernetes\nDESCRIPTION: Command to deploy the curl service pod using kubectl\nSOURCE: https://github.com/istio/istio/blob/master/samples/curl/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f curl.yaml\n```\n\n----------------------------------------\n\nTITLE: Example Output of Updating YAML Files for Custom Images\nDESCRIPTION: Example execution showing the process of updating YAML files to use custom Docker images. Shows how environment variables control the image tag and repository, and how sed commands update the references in deployment files.\nSOURCE: https://github.com/istio/istio/blob/master/samples/bookinfo/README.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ export BOOKINFO_UPDATE=true\n$ BOOKINFO_TAG=test1.0 BOOKINFO_HUB=user1 src/build-services.sh\n+++ dirname samples/bookinfo/src/build-services.sh\n++ cd samples/bookinfo/src\n++ pwd\n+ SCRIPTDIR=/work/samples/bookinfo/src\n+ cd /work/samples/bookinfo/src/../../..\n+ h=user1\n+ t=test1.0\n+ [[ user1 == \\i\\s\\t\\i\\o ]]\n+ [[ user1 == \\d\\o\\c\\k\\e\\r\\.\\i\\o\\/\\i\\s\\t\\i\\o ]]\n+ plat=linux/amd64\n+ [[ '' == \\t\\r\\u\\e ]]\n+ env TAG=test1.0 HUB=docker.io/user1 docker buildx bake -f samples/bookinfo/src/docker-bake.hcl --set '*.platform=linux/amd64'\n...\n => CACHED [examples-bookinfo-ratings-v-faulty 4/6] COPY ratings.js /opt/microservices/                                                                                                               0.0s\n => CACHED [examples-bookinfo-ratings-v-faulty 5/6] WORKDIR /opt/microservices                                                                                                                        0.0s\n => CACHED [examples-bookinfo-ratings-v-faulty 6/6] RUN npm install                                                                                                                                   0.0s\nWARNING: No output specified for examples-bookinfo-mysqldb, examples-bookinfo-ratings-v-faulty, examples-bookinfo-reviews-v2, examples-bookinfo-reviews-v3, examples-bookinfo-productpage-v-flooding, examples-bookinfo-ratings-v-unhealthy, examples-bookinfo-ratings-v-unavailable, examples-bookinfo-ratings-v1, examples-bookinfo-details-v2, examples-bookinfo-reviews-v1, examples-bookinfo-productpage-v1, examples-bookinfo-ratings-v-delayed, examples-bookinfo-details-v1, examples-bookinfo-ratings-v2, examples-bookinfo-mongodb target(s) with docker-container driver. Build result will only remain in the build cache. To push result image into registry use --push or to load image into docker use --load\n+ [[ true == \\t\\r\\u\\e ]]\n+ find ./samples/bookinfo/platform -name '*bookinfo*.yaml' -exec sed -i.bak 's#image:.*\\(\\/examples-bookinfo-.*\\):.*#image: user1\\1:test1.0#g' '{}' +\n```\n\n----------------------------------------\n\nTITLE: Testing Allowed Authorization Request\nDESCRIPTION: Command to test the external authorization service with a request that should be allowed (contains the header 'x-ext-authz: allow'). Shows the expected successful response.\nSOURCE: https://github.com/istio/istio/blob/master/samples/extauthz/README.md#2025-04-23_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ kubectl exec -it $(kubectl get pod -l app=sleep -o jsonpath={.items..metadata.name}) -c sleep -- curl -v ext-authz:8000 -H \"x-ext-authz: allow\"\n   *   Trying 10.97.88.183:8000...\n   * Connected to ext-authz-server (10.97.88.183) port 8000 (#0)\n   > GET / HTTP/1.1\n   > Host: ext-authz-server:8000\n   > User-Agent: curl/7.73.0-DEV\n   > Accept: */*\n   > x-ext-authz: allow\n   >\n   * Mark bundle as not supporting multiuse\n   < HTTP/1.1 200 OK\n   < x-ext-authz-result: allowed\n   < date: Tue, 03 Nov 2020 03:06:11 GMT\n   < content-length: 0\n   < x-envoy-upstream-service-time: 19\n   < server: envoy\n   <\n   * Connection #0 to host ext-authz-server left intact\n```\n\n----------------------------------------\n\nTITLE: Generating Python Requirements File with pip-compile\nDESCRIPTION: Command used to generate the requirements file with specific hashes for each package. The command uses pip-compile with the --allow-unsafe flag to permit potentially unsafe packages and --generate-hashes to include package hashes for verification.\nSOURCE: https://github.com/istio/istio/blob/master/samples/bookinfo/src/productpage/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\npip-compile --allow-unsafe --generate-hashes requirements.in\n```\n\n----------------------------------------\n\nTITLE: Referencing Validation Rules in Go\nDESCRIPTION: Shows the file paths for validation rules in the Istio Operator project. The IstioOperatorSpec API is validated using rules in validate.go, while Helm values.yaml API is validated in validate_values.go.\nSOURCE: https://github.com/istio/istio/blob/master/architecture/environments/operator.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npkg/validate/validate.go\n```\n\nLANGUAGE: go\nCODE:\n```\npkg/validate/validate_values.go\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up TCP Echo Service Deployment\nDESCRIPTION: This command removes the TCP Echo service and deployment from the Kubernetes cluster by deleting the resources defined in the tcp-echo.yaml file.\nSOURCE: https://github.com/istio/istio/blob/master/samples/tcp-echo/README.md#2025-04-23_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ kubectl delete -f tcp-echo.yaml\nservice \"tcp-echo\" deleted\ndeployment.apps \"tcp-echo\" deleted\n```\n\n----------------------------------------\n\nTITLE: Installing Istio Egress Gateway with OpenShift Profile\nDESCRIPTION: Installs the Istio Egress Gateway chart in the 'istio-system' namespace. This sets up the load balancer for egress traffic.\nSOURCE: https://github.com/istio/istio/blob/master/manifests/charts/install-OpenShift.md#2025-04-23_snippet_5\n\nLANGUAGE: console\nCODE:\n```\nhelm install -n istio-system istio-egress manifests/charts/gateways/istio-egress --set profile=openshift\n```\n\n----------------------------------------\n\nTITLE: Implementing CLI Commands in Go with Cobra\nDESCRIPTION: Lists the file paths for various CLI commands implemented using Cobra in the Istio Operator project. Includes commands for manifest handling, profile management, and upgrade operations.\nSOURCE: https://github.com/istio/istio/blob/master/architecture/environments/operator.md#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n../operator/cmd/mesh/\n```\n\nLANGUAGE: go\nCODE:\n```\n../operator/cmd/mesh/manifest.go\n```\n\nLANGUAGE: go\nCODE:\n```\n../operator/cmd/mesh/install.go\n```\n\nLANGUAGE: go\nCODE:\n```\n../operator/cmd/mesh/manifest-diff.go\n```\n\nLANGUAGE: go\nCODE:\n```\n../operator/cmd/mesh/manifest-generate.go\n```\n\nLANGUAGE: go\nCODE:\n```\n../operator/cmd/mesh/profile.go\n```\n\nLANGUAGE: go\nCODE:\n```\n../operator/cmd/mesh/profile-dump.go\n```\n\nLANGUAGE: go\nCODE:\n```\n../operator/cmd/mesh/profile-list.go\n```\n\nLANGUAGE: go\nCODE:\n```\n../operator/cmd/mesh/upgrade.go\n```\n\n----------------------------------------\n\nTITLE: Creating a Collection for SimplePod Transformation in Go\nDESCRIPTION: Shows how to create a Collection that transforms Pod objects into SimplePod objects. This approach is more efficient than using a Singleton collection for the same purpose.\nSOURCE: https://github.com/istio/istio/blob/master/pkg/kube/krt/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nSimplePods := krt.NewCollection[SimplePod](func(ctx krt.HandlerContext, pod *v1.Pod) *SimplePod {\n    return &SimplePod{Name: pod.Name}\n}) // Results in a Collection[SimplePod]\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Custom Bootstrap Resources\nDESCRIPTION: These commands remove the custom bootstrap ConfigMap and the example application from the Kubernetes cluster.\nSOURCE: https://github.com/istio/istio/blob/master/samples/custom-bootstrap/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl delete -f custom-bootstrap.yaml\nkubectl delete -f example-app.yaml\n```\n\n----------------------------------------\n\nTITLE: Deploying only the Helloworld service definition in Kubernetes\nDESCRIPTION: This command applies only the service part of the Helloworld application by using a label selector for the service component.\nSOURCE: https://github.com/istio/istio/blob/master/samples/helloworld/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f helloworld.yaml -l service=helloworld\n```\n\n----------------------------------------\n\nTITLE: Cleanup Resources\nDESCRIPTION: Commands to remove all installed components and configurations.\nSOURCE: https://github.com/istio/istio/blob/master/samples/open-telemetry/loki/REAME.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nkubectl delete -f otel.yaml -n istio-system\nkubectl delete telemetry mesh-logging -n istio-system\nistioctl uninstall --purge -y\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up WebSocket Demo Resources\nDESCRIPTION: Removes all resources created for the WebSocket demo application including the Istio routing rules and the application deployment.\nSOURCE: https://github.com/istio/istio/blob/master/samples/websockets/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl delete -f samples/websockets/route.yaml\nkubectl delete -f samples/websockets/app.yaml\n```\n\n----------------------------------------\n\nTITLE: Verifying SPIRE as Certificate Issuer\nDESCRIPTION: Command to inspect the certificate and verify it was issued by SPIRE by examining the certificate subject information.\nSOURCE: https://github.com/istio/istio/blob/master/samples/security/spire/README.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nopenssl x509 -in chain.pem -text | grep SPIRE\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Resources\nDESCRIPTION: Commands to remove all resources created during the tutorial, including the gateway, service versions, and the helloworld application itself.\nSOURCE: https://github.com/istio/istio/blob/master/samples/helloworld/gateway-api/README.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nkubectl delete -f ./helloworld-gateway.yaml\nkubectl delete -f ./helloworld-versions.yaml\nkubectl delete -f ../helloworld.yaml\n```\n\n----------------------------------------\n\nTITLE: Istio Agent Environment Configuration Variables\nDESCRIPTION: Definition of environment variables used to configure the Istio agent's behavior, including CA settings, certificate paths, authentication options, and debug capabilities.\nSOURCE: https://github.com/istio/istio/blob/master/architecture/security/istio-agent.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Variable | Description |\n| - | - |\n|CA_ADDR|Address of CA, defaults to discoveryAddress|\n|CA_PROVIDER|Type of CA; supported values are GoogleCA or Citadel (although anything but GoogleCA will use Citadel); defaults to Citadel|\n|PROV_CERT|certificates to be used for mTLS communication with control plane only; NOT for workload mTLS|\n|OUTPUT_CERTS|write all fetched certificates to some directory. Used to support applications that need certificates (Prometheus) as well as rotating mTLS control plane authentication.|\n|FILE_MOUNTED_CERTS|completely disable CA path, exclusively use certs mounted into the pod with set certificate file locations|\n|CREDENTIAL_FETCHER_TYPE|allows using custom credential fetcher, for VMs with existing identity|\n|CREDENTIAL_IDENTITY_PROVIDER|just used to control the audience for VMs with existing identity|\n|PROXY_XDS_VIA_AGENT|use istio-agent to proxy XDS. True for all use cases now, likely can be always-on now or soon|\n|PROXY_XDS_DEBUG_VIA_AGENT|Offer XDS istio.io/debug API on agent's 15004 HTTP endpoint. (Requires PROXY_XDS_VIA_AGENT)|\n|{XDS,CA}_ROOT_CA|explicitly configure root certificate path|\n|PILOT_CERT_PROVIDER|just used to determine XDS/CA root certificate; redundant with {XDS,CA}_ROOT_CA.|\n```\n\n----------------------------------------\n\nTITLE: Generating Workload Certificates for Istio CA in Shell\nDESCRIPTION: Commands to generate workload certificates and keys for different service accounts. The first example generates certificates for 'foo' and 'bar' service accounts, while the second example shows how to generate certificates signed by an alternative root certificate.\nSOURCE: https://github.com/istio/istio/blob/master/samples/certs/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./generate-workload.sh foo\n./generate-workload.sh bar\n```\n\nLANGUAGE: shell\nCODE:\n```\n./generate-workload.sh name namespace serviceAccount tmpDir use-alternative-root\n./generate-workload.sh name namespace serviceAccount tmpDir use-alternative-root\n```\n\n----------------------------------------\n\nTITLE: Verifying SPIRE Agent Deployment\nDESCRIPTION: Command to wait for the SPIRE agent pod to become ready before proceeding with Istio installation.\nSOURCE: https://github.com/istio/istio/blob/master/samples/security/spire/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl wait pod --for=condition=ready -n spire -l app=spire-agent\n```\n\n----------------------------------------\n\nTITLE: Specifying Common Name for SSL Certificate\nDESCRIPTION: Example FQDN (Fully Qualified Domain Name) to use as the common name when prompted during certificate creation. This should be set to the domain that will be secured by the certificate.\nSOURCE: https://github.com/istio/istio/blob/master/tests/testdata/certs/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\napi.company.com\n```\n\n----------------------------------------\n\nTITLE: Visualizing Config Flow and Push Process with Mermaid Diagram\nDESCRIPTION: This diagram illustrates the configuration update flow from initial change detection through debouncing, PushContext recomputation, to enqueueing in the Push Queue. It also shows how the Pusher component polls the queue and triggers client updates, completing the push process cycle.\nSOURCE: https://github.com/istio/istio/blob/master/architecture/networking/pilot.md#2025-04-23_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n    subgraph Config Flow\n        cu(Config Update)\n        db(Debounce)\n        pc(Recompute Push Context)\n        pq(Push Queue)\n        cu-->db\n        db--Trigger Once Steady-->pc\n        pc--Enqueue All Clients-->pq\n    end\n    subgraph Proxy\n        c(Client)\n    end\n    subgraph Pusher\n        pj(Push Job)\n        pj--read-->pq\n        pj--trigger-->c\n    end\n```\n\n----------------------------------------\n\nTITLE: Creating Sub-Tests in Go\nDESCRIPTION: Demonstrates using ctx.NewSubTest() to create nested tests similar to Go's t.Run(). This allows for organizing tests in a hierarchical structure for better organization and readability.\nSOURCE: https://github.com/istio/istio/blob/master/tests/integration/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc TestMyLogic(t *testing.T) {\n    framework.\n        NewTest(t).\n        Run(func(ctx framework.TestContext) {\n\n            // Create a component\n            g := galley.NewOrFail(ctx, ctx, cfg)\n\n            configs := []struct{\n                name: string\n                yaml: string\n            } {\n                // Some array of YAML\n            }\n\n            for _, cfg := range configs {\n                ctx.NewSubTest(cfg.name).\n                    Run(func(ctx framework.TestContext) {\n                        ctx.ApplyConfigOrFail(ctx, nil, mycfg)\n                        // Do more stuff here.\n                    })\n            }\n        })\n}\n```\n\n----------------------------------------\n\nTITLE: Warning Header for Copied Manifest\nDESCRIPTION: A warning message in markdown format that informs users this is a copied file and provides instructions for making changes to the original file.\nSOURCE: https://github.com/istio/istio/blob/master/manifests/helm-profiles/warning-edit.txt#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# WARNING: DO NOT EDIT, THIS FILE IS A COPY.\n# The original version of this file is located at /manifests/helm-profiles directory.\n# If you want to make a change in this file, edit the original one and run \"make gen\".\n```\n\n----------------------------------------\n\nTITLE: Configuring Istio RequestAuthentication Policy with JWT in YAML\nDESCRIPTION: This YAML snippet defines a RequestAuthentication policy for Istio, specifying the issuer and JWKS URI for JWT validation.\nSOURCE: https://github.com/istio/istio/blob/master/security/tools/jwt/samples/README.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: security.istio.io/v1\nkind: RequestAuthentication\nmetadata:\n  name: \"jwt-example\"\nspec:\n  selector:\n    matchLabels:\n      app: httpbin\n  jwtRules:\n  - issuer: \"testing@secure.istio.io\"\n    jwksUri: \"https://raw.githubusercontent.com/istio/istio/master/security/tools/jwt/samples/jwks.json\"\n```\n\n----------------------------------------\n\nTITLE: Generating ECC Root Certificate for Istio Tests using ECDSA\nDESCRIPTION: Command to generate an ECC root certificate using ECDSA signature algorithm by running the generate_cert utility. This creates a self-signed certificate authority certificate with elliptic curve cryptography.\nSOURCE: https://github.com/istio/istio/blob/master/security/pkg/pki/testdata/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo run main.go -ec-sig-alg ECDSA -ca true\n```\n\n----------------------------------------\n\nTITLE: Visualizing Istio Controllers Relationships with Mermaid\nDESCRIPTION: This Mermaid diagram illustrates the relationships between various controllers in Istiod, including Service Discovery, ConfigStore, VMs, Gateway, and Ingress controllers. It shows dependencies and data flows between different components.\nSOURCE: https://github.com/istio/istio/blob/master/architecture/networking/pilot.md#2025-04-23_snippet_4\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph BT\n    crd(\"CRD Watcher\")\n    subgraph Service Discovery\n        ksd(\"Kubernetes Controller\")\n        sesd(\"Service Entry Controller\")\n        msd(\"Memory Controller\")\n        asd(\"Aggregate\")\n        ksd--Join-->asd\n        sesd--Join-->asd\n        msd--Join-->asd\n        ksd<--\"Data Sharing\"-->sesd\n    end\n    subgraph ConfigStore\n        ccs(\"CRD Client\")\n        xcs(\"XDS Store\")\n        fcs(\"File Store\")\n        mcs(\"Memory Store\")\n        acs(\"Aggregate\")\n        ccs--Join-->acs\n        xcs--Join-->acs\n        fcs--Join-->acs\n        mcs--Join-->acs\n    end\n    subgraph VMs\n        vmhc(\"Health Check\")\n        vmar(\"Auto Registration\")\n    end\n    subgraph Gateway\n        twc(\"Tag Watcher\")\n        gdc(\"Gateway Deployment\")\n        gcc(\"Gateway Class\")\n        twc--Depends-->gdc\n        gdc-.-gcc\n    end\n    subgraph Ingress\n        ic(\"Ingress Controller\")\n        isc(\"Ingress Status Controller\")\n        ic-.-isc\n    end\n    mcsc(\"Multicluster Secret\")\n    scr(\"Credentials Controller\")\n    mcsc--\"1 per cluster\"-->scr\n    mcsc--\"1 per cluster\"-->ksd\n    crd--Depends-->ccs\n\n    iwhc(\"Injection Webhook\")\n    vwhc(\"Validation Webhook\")\n    nsc(\"Namespace Controller\")\n    ksd--\"External Istiod\"-->nsc\n    ksd--\"External Istiod\"-->iwhc\n\n    df(\"Discovery Filter\")\n\n    axc(\"Auto Export Controller\")\n\n    mcfg(\"Mesh Config\")\n    dfc(\"Default Revision Controller\")\n```\n\n----------------------------------------\n\nTITLE: Checking Google Cloud SDK Installation in Bash\nDESCRIPTION: Verifies if the Google Cloud SDK is installed by checking for the 'gcloud' command.\nSOURCE: https://github.com/istio/istio/blob/master/tests/integration/GKE.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwhich gcloud\n```\n\n----------------------------------------\n\nTITLE: Fetching Root CA from Existing Kubernetes Cluster in Istio\nDESCRIPTION: Retrieves the root CA certificate and key from an Istio-enabled Kubernetes cluster. This command accesses either the istio-ca-secret or the cacerts secret from the current kubeconfig context.\nSOURCE: https://github.com/istio/istio/blob/master/tools/certs/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake -f Makefile.k8s.mk fetch-root-ca\n```\n\n----------------------------------------\n\nTITLE: Fetching and Using JWT Token in Bash\nDESCRIPTION: This Bash snippet demonstrates how to fetch a JWT token from a URL and use it in a curl request to test authentication.\nSOURCE: https://github.com/istio/istio/blob/master/security/tools/jwt/samples/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nTOKEN=$(curl https://raw.githubusercontent.com/istio/istio/master/security/tools/jwt/samples/demo.jwt -s)\ncurl --header \"Authorization: Bearer $TOKEN\" $INGRESS_HOST/headers -s -o /dev/null -w \"%{http_code}\\n\"\n```\n\n----------------------------------------\n\nTITLE: Creating Self-Signed Root CA Certificate in Istio\nDESCRIPTION: Generates a self-signed root CA key and certificate using the provided Makefile. This is the foundation for establishing a certificate chain of trust in Istio multicluster deployments.\nSOURCE: https://github.com/istio/istio/blob/master/tools/certs/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake -f Makefile.selfsigned.mk root-ca\n```\n\n----------------------------------------\n\nTITLE: Configuring Sysctl and Ulimit for Core Dumps in Bash\nDESCRIPTION: This command configures the kernel core pattern to save core dumps in the Istio data directory and sets unlimited core file size. It affects all processes on the node.\nSOURCE: https://github.com/istio/istio/blob/master/samples/proxy-coredump/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsysctl -w kernel.core_pattern=/var/lib/istio/data/core.proxy && ulimit -c unlimited\n```\n\n----------------------------------------\n\nTITLE: Visualizing ConfigStore Components with Mermaid Diagram\nDESCRIPTION: This diagram illustrates the structure of the ConfigStore component, showing how different clients (XDS, CRD, Filesystem) feed into an aggregate store. The ConfigStore provides a standard interface for reading various resources and wraps them in a common config.Config struct.\nSOURCE: https://github.com/istio/istio/blob/master/architecture/networking/pilot.md#2025-04-23_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n    subgraph ConfigStore\n        xcs(XDS Client)\n        ccs(CRD Client)\n        fcs(Filesystem Client)\n        acs(Aggregate)\n        xcs-->acs\n        ccs-->acs\n        fcs-->acs\n    end\n```\n\n----------------------------------------\n\nTITLE: Generating New JWT Token with Python Script in Bash\nDESCRIPTION: This Bash command shows how to use a Python script to generate a new JWT token with custom expiration and issuer.\nSOURCE: https://github.com/istio/istio/blob/master/security/tools/jwt/samples/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nTOKEN=$(./gen-jwt.py key.pem --expire=300 --iss \"new-issuer@secure.istio.io\")\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Cluster with GKE Script in Bash\nDESCRIPTION: Uses a provided script to create a Kubernetes cluster on Google Kubernetes Engine (GKE) with specified cluster name.\nSOURCE: https://github.com/istio/istio/blob/master/tests/integration/GKE.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./tests/integration/create_cluster_gke.sh -c ${CLUSTER_NAME}\n```\n\n----------------------------------------\n\nTITLE: Displaying Istio HTTP Route Configuration Table\nDESCRIPTION: This is a formatted table output from an Istio command showing HTTP route configurations. It displays routes with their associated virtual hosts, domains, URL match patterns, and virtual services. The output includes routes for httpbin.example.com and backend services.\nSOURCE: https://github.com/istio/istio/blob/master/istioctl/pkg/writer/envoy/configdump/testdata/routes/istio-gateway-http-route-prefix/output.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nNAME          VHOST NAME                 DOMAINS                 MATCH                  VIRTUAL SERVICE\nhttp.8080     httpbin.example.com:80     httpbin.example.com     /get*                  httpbin.default\n              backend                    *                       /stats/prometheus*     \n              backend                    *                       /healthz/ready*        \n```\n\n----------------------------------------\n\nTITLE: Installing Python JWT Dependencies with pip\nDESCRIPTION: This Bash command installs the required Python package 'jwcrypto' for JWT operations using pip.\nSOURCE: https://github.com/istio/istio/blob/master/security/tools/jwt/samples/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npip install jwcrypto\n```\n\n----------------------------------------\n\nTITLE: Installing Python Dependencies for JWT Generation\nDESCRIPTION: Command to install the required Google Auth package using pip.\nSOURCE: https://github.com/istio/istio/blob/master/security/tools/jwt/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install google-auth\n```\n\n----------------------------------------\n\nTITLE: Getting GKE Cluster Credentials in Bash\nDESCRIPTION: Retrieves the credentials for the created GKE cluster to enable kubectl access.\nSOURCE: https://github.com/istio/istio/blob/master/tests/integration/GKE.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngcloud container clusters get-credentials ${CLUSTER_NAME} \\\n   --zone ${ZONE} --project ${PROJECT_ID}\n```\n\n----------------------------------------\n\nTITLE: Running a Monitor in Golang\nDESCRIPTION: This snippet shows how to run a monitor by providing a stop channel. The Start method initiates an asynchronous polling loop and returns immediately.\nSOURCE: https://github.com/istio/istio/blob/master/pilot/pkg/config/monitor/README.md#2025-04-23_snippet_1\n\nLANGUAGE: golang\nCODE:\n```\nstop := make(chan struct{})\n...\nmonitor.Start(stop)\n```\n\n----------------------------------------\n\nTITLE: Viewing Istio Gateway Route Configuration Table\nDESCRIPTION: Console output showing the gateway routing table with columns for name, virtual host name, domains, URL match patterns and virtual service mappings. This output shows two backend routes configured for health check and Prometheus metrics endpoints.\nSOURCE: https://github.com/istio/istio/blob/master/istioctl/pkg/writer/envoy/configdump/testdata/routes/empty-gateway/output.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nNAME     VHOST NAME     DOMAINS     MATCH                  VIRTUAL SERVICE\n         backend        *           /healthz/ready*        \n         backend        *           /stats/prometheus*     \n```\n\n----------------------------------------\n\nTITLE: Cleaning up Helloworld service resources from Kubernetes\nDESCRIPTION: These commands remove all the resources created for the Helloworld service, including deployments, gateway configuration, and the autoscalers.\nSOURCE: https://github.com/istio/istio/blob/master/samples/helloworld/README.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nkubectl delete -f helloworld.yaml\nkubectl delete -f helloworld-gateway.yaml\nkubectl delete hpa helloworld-v1 helloworld-v2\n```\n\n----------------------------------------\n\nTITLE: Displaying Script Help Information\nDESCRIPTION: Command to display help information for the sa-jwt.py script.\nSOURCE: https://github.com/istio/istio/blob/master/security/tools/jwt/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython sa-jwt.py -h\n```\n\n----------------------------------------\n\nTITLE: Creating GKE Cluster Manually in Bash\nDESCRIPTION: Creates a Kubernetes cluster on Google Kubernetes Engine with specified parameters such as zone, project ID, cluster version, machine type, and number of nodes.\nSOURCE: https://github.com/istio/istio/blob/master/tests/integration/GKE.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngcloud container clusters \\\n  create ${CLUSTER_NAME} \\\n  --zone ${ZONE} \\\n  --project ${PROJECT_ID} \\\n  --cluster-version ${CLUSTER_VERSION} \\\n  --machine-type ${MACHINE_TYPE} \\\n  --num-nodes ${NUM_NODES} \\\n  --enable-kubernetes-alpha \\\n  --no-enable-legacy-authorization\n```\n\n----------------------------------------\n\nTITLE: Visualizing Istio Client Abstraction Hierarchy with Mermaid\nDESCRIPTION: A flowchart diagram illustrating the relationship between different client abstractions in Istio, showing how krt.Collection builds on kclient.Client, which builds on kube.Client, which ultimately builds on Kubernetes client-go.\nSOURCE: https://github.com/istio/istio/blob/master/architecture/networking/controllers.md#2025-04-23_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    kcg[\"Kubernetes client-go\"]\n    ic[\"Istio kube.Client\"]\n    ikc[\"Istio kclient.Client\"]\n    ikrt[\"Istio krt.Collection\"]\n    ikrt--\"Builds on\"-->ikc--\"Builds on\"-->ic--\"Builds on\"-->kcg\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Header for Istio Source Files\nDESCRIPTION: Standard copyright and license notice that should be included at the beginning of all Istio source files. It indicates that the code is owned by Istio Authors and is available under the Apache License 2.0, with a reference to the full license text.\nSOURCE: https://github.com/istio/istio/blob/master/common/scripts/copyright-banner-go.txt#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// Copyright Istio Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Example JWT Generation Commands\nDESCRIPTION: Example commands showing how to use the script to generate JWTs with various options, including specifying service account file, issuer, audience, and custom claims.\nSOURCE: https://github.com/istio/istio/blob/master/security/tools/jwt/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./sa-jwt.py /path/to/service_account.json -iss frod@gserviceaccount.com -aud foo,bar\n./sa-jwt.py /path/to/service_account.json -iss frod@gserviceaccount.com -aud foo,bar -claims key1:value1,key2:value2\n```\n\n----------------------------------------\n\nTITLE: Building Istio Images for Linux on MacOS in Bash\nDESCRIPTION: Sets the target operating system to Linux before building and pushing Istio Docker images on MacOS.\nSOURCE: https://github.com/istio/istio/blob/master/tests/integration/GKE.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nGOOS=linux make docker push\n```\n\n----------------------------------------\n\nTITLE: Sample JWT Payload in JSON\nDESCRIPTION: This JSON snippet shows the payload of a sample JWT token, including expiration time, custom claims, and issuer information.\nSOURCE: https://github.com/istio/istio/blob/master/security/tools/jwt/samples/README.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"exp\": 4685989700,\n  \"foo\": \"bar\",\n  \"iat\": 1532389700,\n  \"iss\": \"testing@secure.istio.io\",\n  \"sub\": \"testing@secure.istio.io\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Kubernetes Settings for Istio Components in YAML\nDESCRIPTION: This YAML snippet illustrates how to configure Kubernetes settings for Istio components using the IstioOperatorSpec API.\nSOURCE: https://github.com/istio/istio/blob/master/architecture/environments/operator.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ntrafficManagement:\n  components:\n    pilot:\n      k8s:\n        hpaSpec:\n          # HPA spec, as defined in K8s API\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Resources\nDESCRIPTION: Commands to clean up the deployed Kubernetes resources (sleep pod and external authorization service) after testing.\nSOURCE: https://github.com/istio/istio/blob/master/samples/extauthz/README.md#2025-04-23_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ kubectl delete -f ../sleep/sleep.yaml\n$ kubectl delete -f ext-authz.yaml\n```\n\n----------------------------------------\n\nTITLE: Displaying Helm Release Status Commands\nDESCRIPTION: Template commands to show users how to get more information about their Helm release after successful installation of ztunnel.\nSOURCE: https://github.com/istio/istio/blob/master/manifests/charts/ztunnel/templates/NOTES.txt#2025-04-23_snippet_0\n\nLANGUAGE: helm\nCODE:\n```\n$ helm status {{ .Release.Name }} -n {{ .Release.Namespace }}\n$ helm get all {{ .Release.Name }} -n {{ .Release.Namespace }}\n```\n\n----------------------------------------\n\nTITLE: Running a Specific Istio Fuzzer\nDESCRIPTION: Command to run a specific fuzzer (FuzzValidateMeshConfig in this example) against the Istio codebase. This allows targeted fuzzing of particular components.\nSOURCE: https://github.com/istio/istio/blob/master/tests/fuzz/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython infra/helper.py run_fuzzer istio FuzzValidateMeshConfig\n```\n\n----------------------------------------\n\nTITLE: Upgrading Calico Images for Istio Integration in Shell\nDESCRIPTION: These commands use the 'crane' tool to copy Calico images from Docker Hub to the Istio-testing GCR repository. This process is necessary when upgrading Calico versions. The VERSION variable should be updated to reflect the desired Calico version.\nSOURCE: https://github.com/istio/istio/blob/master/prow/config/calico.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nexport VERSION=v3.27.0\n\ncrane cp {docker.io,gcr.io/istio-testing}/calico/cni:\"${VERSION}\"\ncrane cp {docker.io,gcr.io/istio-testing}/calico/node:\"${VERSION}\"\ncrane cp {docker.io,gcr.io/istio-testing}/calico/kube-controllers:\"${VERSION}\"\n```\n\n----------------------------------------\n\nTITLE: Building and Pushing Istio Docker Images in Bash\nDESCRIPTION: Builds Istio Docker images locally and pushes them to a registry using Make commands.\nSOURCE: https://github.com/istio/istio/blob/master/tests/integration/GKE.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# Build images on the local docker.\nmake docker\n\n# Push images to docker registry\nmake push\n```\n\n----------------------------------------\n\nTITLE: Multi-stage Test Structure\nDESCRIPTION: Illustrates the file naming convention for multi-stage tests, showing how to organize files for different test stages with corresponding input and expected output files.\nSOURCE: https://github.com/istio/istio/blob/master/pkg/test/datasets/Readme.md#2025-04-23_snippet_3\n\nLANGUAGE: plain\nCODE:\n```\n# Input file for the test\n.../dataset/**/<testname>_<stageNo>.yaml\n.../dataset/**/<testname>_<stageNo>_meshconfig.yaml\n.../dataset/**/<testname>_<stageNo>_expected.json\n\ne.g.\n# First stage files. Meshconfig carries over to the next stage\n.../dataset/**/foo_0.yaml\n.../dataset/**/foo_0_meshconfig.yaml\n.../dataset/**/foo_0_expected.json\n# Second stage files.\n.../dataset/**/foo_1.yaml\n.../dataset/**/foo_1_expected.json\n```\n\n----------------------------------------\n\nTITLE: Running Go Fuzz Tests Command\nDESCRIPTION: Shell command for executing Go fuzz tests using standard Go tooling, targeting specific packages and fuzz test functions.\nSOURCE: https://github.com/istio/istio/blob/master/pkg/fuzz/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo test ./path/to/pkg -v -run=^$ -fuzz=Fuzz\n```\n\n----------------------------------------\n\nTITLE: Replacing Docker Hub Images with Istio-testing Copies in Shell\nDESCRIPTION: This command uses sed to replace all occurrences of 'docker.io' with 'gcr.io/istio-testing' in the calico.yaml file. This ensures that Istio-testing's copies of the images are used instead of the default Docker Hub images.\nSOURCE: https://github.com/istio/istio/blob/master/prow/config/calico.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsed -ie \"s?docker.io?gcr.io/istio-testing?g\" calico.yaml\n```\n\n----------------------------------------\n\nTITLE: Defining Python Dependencies with Hash Verification\nDESCRIPTION: A requirements file that specifies exact versions and hash values for Python packages. This ensures reproducible and secure installations by verifying package integrity. The file uses the pip requirements format with hash verification.\nSOURCE: https://github.com/istio/istio/blob/master/samples/bookinfo/src/productpage/requirements.txt#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n#\nblinker==1.9.0 \\\n    --hash=sha256:b4ce2265a7abece45e7cc896e98dbebe6cead56bcf805a3d23136d145f5445bf \\\n    --hash=sha256:ba0efaa9080b619ff2f3459d1d500c57bddea4a6b424b60a91141db6fd2f08bc\n    # via flask\ncertifi==2025.1.31 \\\n    --hash=sha256:3d5da6925056f6f18f119200434a4780a94263f10d1c21d032a6f6b2baa20651 \\\n    --hash=sha256:ca78db4565a652026a4db2bcdf68f2fb589ea80d0be70e03929ed730746b84fe\n    # via requests\ncharset-normalizer==3.4.1 \\\n    --hash=sha256:0167ddc8ab6508fe81860a57dd472b2ef4060e8d378f0cc555707126830f2537 \\\n    --hash=sha256:01732659ba9b5b873fc117534143e4feefecf3b2078b0a6a2e925271bb6f4cfa \\\n    --hash=sha256:01ad647cdd609225c5350561d084b42ddf732f4eeefe6e678765636791e78b9a \\\n    --hash=sha256:04432ad9479fa40ec0f387795ddad4437a2b50417c69fa275e212933519ff294 \\\n    --hash=sha256:0907f11d019260cdc3f94fbdb23ff9125f6b5d1039b76003b5b0ac9d6a6c9d5b \\\n    --hash=sha256:0924e81d3d5e70f8126529951dac65c1010cdf117bb75eb02dd12339b57749dd \\\n    --hash=sha256:09b26ae6b1abf0d27570633b2b078a2a20419c99d66fb2823173d73f188ce601 \\\n    --hash=sha256:09b5e6733cbd160dcc09589227187e242a30a49ca5cefa5a7edd3f9d19ed53fd \\\n    --hash=sha256:0af291f4fe114be0280cdd29d533696a77b5b49cfde5467176ecab32353395c4 \\\n    --hash=sha256:0f55e69f030f7163dffe9fd0752b32f070566451afe180f99dbeeb81f511ad8d \\\n    --hash=sha256:1a2bc9f351a75ef49d664206d51f8e5ede9da246602dc2d2726837620ea034b2 \\\n    --hash=sha256:22e14b5d70560b8dd51ec22863f370d1e595ac3d024cb8ad7d308b4cd95f8313 \\\n    --hash=sha256:234ac59ea147c59ee4da87a0c0f098e9c8d169f4dc2a159ef720f1a61bbe27cd \\\n    --hash=sha256:2369eea1ee4a7610a860d88f268eb39b95cb588acd7235e02fd5a5601773d4fa \\\n    --hash=sha256:237bdbe6159cff53b4f24f397d43c6336c6b0b42affbe857970cefbb620911c8 \\\n    --hash=sha256:28bf57629c75e810b6ae989f03c0828d64d6b26a5e205535585f96093e405ed1 \\\n    --hash=sha256:2967f74ad52c3b98de4c3b32e1a44e32975e008a9cd2a8cc8966d6a5218c5cb2 \\\n    --hash=sha256:2a75d49014d118e4198bcee5ee0a6f25856b29b12dbf7cd012791f8a6cc5c496 \\\n    --hash=sha256:2bdfe3ac2e1bbe5b59a1a63721eb3b95fc9b6817ae4a46debbb4e11f6232428d \\\n    --hash=sha256:2d074908e1aecee37a7635990b2c6d504cd4766c7bc9fc86d63f9c09af3fa11b \\\n    --hash=sha256:2fb9bd477fdea8684f78791a6de97a953c51831ee2981f8e4f583ff3b9d9687e \\\n    --hash=sha256:311f30128d7d333eebd7896965bfcfbd0065f1716ec92bd5638d7748eb6f936a \\\n    --hash=sha256:329ce159e82018d646c7ac45b01a430369d526569ec08516081727a20e9e4af4 \\\n    --hash=sha256:345b0426edd4e18138d6528aed636de7a9ed169b4aaf9d61a8c19e39d26838ca \\\n    --hash=sha256:363e2f92b0f0174b2f8238240a1a30142e3db7b957a5dd5689b0e75fb717cc78 \\\n    --hash=sha256:3a3bd0dcd373514dcec91c411ddb9632c0d7d92aed7093b8c3bbb6d69ca74408 \\\n    --hash=sha256:3bed14e9c89dcb10e8f3a29f9ccac4955aebe93c71ae803af79265c9ca5644c5 \\\n    --hash=sha256:44251f18cd68a75b56585dd00dae26183e102cd5e0f9f1466e6df5da2ed64ea3 \\\n    --hash=sha256:44ecbf16649486d4aebafeaa7ec4c9fed8b88101f4dd612dcaf65d5e815f837f \\\n    --hash=sha256:4532bff1b8421fd0a320463030c7520f56a79c9024a4e88f01c537316019005a \\\n    --hash=sha256:49402233c892a461407c512a19435d1ce275543138294f7ef013f0b63d5d3765 \\\n    --hash=sha256:4c0907b1928a36d5a998d72d64d8eaa7244989f7aaaf947500d3a800c83a3fd6 \\\n    --hash=sha256:4d86f7aff21ee58f26dcf5ae81a9addbd914115cdebcbb2217e4f0ed8982e146 \\\n    --hash=sha256:5777ee0881f9499ed0f71cc82cf873d9a0ca8af166dfa0af8ec4e675b7df48e6 \\\n    --hash=sha256:5df196eb874dae23dcfb968c83d4f8fdccb333330fe1fc278ac5ceeb101003a9 \\\n    --hash=sha256:619a609aa74ae43d90ed2e89bdd784765de0a25ca761b93e196d938b8fd1dbbd \\\n    --hash=sha256:6e27f48bcd0957c6d4cb9d6fa6b61d192d0b13d5ef563e5f2ae35feafc0d179c \\\n    --hash=sha256:6ff8a4a60c227ad87030d76e99cd1698345d4491638dfa6673027c48b3cd395f \\\n    --hash=sha256:73d94b58ec7fecbc7366247d3b0b10a21681004153238750bb67bd9012414545 \\\n    --hash=sha256:7461baadb4dc00fd9e0acbe254e3d7d2112e7f92ced2adc96e54ef6501c5f176 \\\n    --hash=sha256:75832c08354f595c760a804588b9357d34ec00ba1c940c15e31e96d902093770 \\\n    --hash=sha256:7709f51f5f7c853f0fb938bcd3bc59cdfdc5203635ffd18bf354f6967ea0f824 \\\n    --hash=sha256:78baa6d91634dfb69ec52a463534bc0df05dbd546209b79a3880a34487f4b84f \\\n    --hash=sha256:7974a0b5ecd505609e3b19742b60cee7aa2aa2fb3151bc917e6e2646d7667dcf \\\n    --hash=sha256:7a4f97a081603d2050bfaffdefa5b02a9ec823f8348a572e39032caa8404a487 \\\n    --hash=sha256:7b1bef6280950ee6c177b326508f86cad7ad4dff12454483b51d8b7d673a2c5d \\\n    --hash=sha256:7d053096f67cd1241601111b698f5cad775f97ab25d81567d3f59219b5f1adbd \\\n    --hash=sha256:804a4d582ba6e5b747c625bf1255e6b1507465494a40a2130978bda7b932c90b \\\n    --hash=sha256:807f52c1f798eef6cf26beb819eeb8819b1622ddfeef9d0977a8502d4db6d534 \\\n    --hash=sha256:80ed5e856eb7f30115aaf94e4a08114ccc8813e6ed1b5efa74f9f82e8509858f \\\n    --hash=sha256:8417cb1f36cc0bc7eaba8ccb0e04d55f0ee52df06df3ad55259b9a323555fc8b \\\n    --hash=sha256:8436c508b408b82d87dc5f62496973a1805cd46727c34440b0d29d8a2f50a6c9 \\\n    --hash=sha256:89149166622f4db9b4b6a449256291dc87a99ee53151c74cbd82a53c8c2f6ccd \\\n    --hash=sha256:8bfa33f4f2672964266e940dd22a195989ba31669bd84629f05fab3ef4e2d125 \\\n    --hash=sha256:8c60ca7339acd497a55b0ea5d506b2a2612afb2826560416f6894e8b5770d4a9 \\\n    --hash=sha256:91b36a978b5ae0ee86c394f5a54d6ef44db1de0815eb43de826d41d21e4af3de \\\n    --hash=sha256:955f8851919303c92343d2f66165294848d57e9bba6cf6e3625485a70a038d11 \\\n    --hash=sha256:97f68b8d6831127e4787ad15e6757232e14e12060bec17091b85eb1486b91d8d \\\n    --hash=sha256:9b23ca7ef998bc739bf6ffc077c2116917eabcc901f88da1b9856b210ef63f35 \\\n    --hash=sha256:9f0b8b1c6d84c8034a44893aba5e767bf9c7a211e313a9605d9c617d7083829f \\\n    --hash=sha256:aabfa34badd18f1da5ec1bc2715cadc8dca465868a4e73a0173466b688f29dda \\\n    --hash=sha256:ab36c8eb7e454e34e60eb55ca5d241a5d18b2c6244f6827a30e451c42410b5f7 \\\n    --hash=sha256:b010a7a4fd316c3c484d482922d13044979e78d1861f0e0650423144c616a46a \\\n    --hash=sha256:b1ac5992a838106edb89654e0aebfc24f5848ae2547d22c2c3f66454daa11971 \\\n    --hash=sha256:b7b2d86dd06bfc2ade3312a83a5c364c7ec2e3498f8734282c6c3d4b07b346b8 \\\n    --hash=sha256:b97e690a2118911e39b4042088092771b4ae3fc3aa86518f84b8cf6888dbdb41 \\\n    --hash=sha256:bc2722592d8998c870fa4e290c2eec2c1569b87fe58618e67d38b4665dfa680d \\\n    --hash=sha256:c0429126cf75e16c4f0ad00ee0eae4242dc652290f940152ca8c75c3a4b6ee8f \\\n    --hash=sha256:c30197aa96e8eed02200a83fba2657b4c3acd0f0aa4bdc9f6c1af8e8962e0757 \\\n    --hash=sha256:c4c3e6da02df6fa1410a7680bd3f63d4f710232d3139089536310d027950696a \\\n    --hash=sha256:c75cb2a3e389853835e84a2d8fb2b81a10645b503eca9bcb98df6b5a43eb8886 \\\n    --hash=sha256:c96836c97b1238e9c9e3fe90844c947d5afbf4f4c92762679acfe19927d81d77 \\\n    --hash=sha256:d7f50a1f8c450f3925cb367d011448c39239bb3eb4117c36a6d354794de4ce76 \\\n    --hash=sha256:d973f03c0cb71c5ed99037b870f2be986c3c05e63622c017ea9816881d2dd247 \\\n    --hash=sha256:d98b1668f06378c6dbefec3b92299716b931cd4e6061f3c875a71ced1780ab85 \\\n    --hash=sha256:d9c3cdf5390dcd29aa8056d13e8e99526cda0305acc038b96b30352aff5ff2bb \\\n    --hash=sha256:dad3e487649f498dd991eeb901125411559b22e8d7ab25d3aeb1af367df5efd7 \\\n    --hash=sha256:dccbe65bd2f7f7ec22c4ff99ed56faa1e9f785482b9bbd7c717e26fd723a1d1e \\\n    --hash=sha256:dd78cfcda14a1ef52584dbb008f7ac81c1328c0f58184bf9a84c49c605002da6 \\\n    --hash=sha256:e218488cd232553829be0664c2292d3af2eeeb94b32bea483cf79ac6a694e037 \\\n    --hash=sha256:e358e64305fe12299a08e08978f51fc21fac060dcfcddd95453eabe5b93ed0e1 \\\n    --hash=sha256:ea0d8d539afa5eb2728aa1932a988a9a7af94f18582ffae4bc10b3fbdad0626e \\\n    --hash=sha256:eab677309cdb30d047996b36d34caeda1dc91149e4fdca0b1a039b3f79d9a807 \\\n    --hash=sha256:eb8178fe3dba6450a3e024e95ac49ed3400e506fd4e9e5c32d30adda88cbd407 \\\n    --hash=sha256:ecddf25bee22fe4fe3737a399d0d177d72bc22be6913acfab364b40bce1ba83c \\\n    --hash=sha256:eea6ee1db730b3483adf394ea72f808b6e18cf3cb6454b4d86e04fa8c4327a12 \\\n    --hash=sha256:f08ff5e948271dc7e18a35641d2f11a4cd8dfd5634f55228b691e62b37125eb3 \\\n    --hash=sha256:f30bf9fd9be89ecb2360c7d94a711f00c09b976258846efe40db3d05828e8089 \\\n    --hash=sha256:fa88b843d6e211393a37219e6a1c1df99d35e8fd90446f1118f4216e307e48cd \\\n    --hash=sha256:fc54db6c8593ef7d4b2a331b58653356cf04f67c960f584edb7c3d8c97e8f39e \\\n    --hash=sha256:fd4ec41f914fa74ad1b8304bbc634b3de73d2a0889bd32076342a573e0779e00 \\\n    --hash=sha256:ffc9202a29ab3920fa812879e95a9e78b2465fd10be7fcbd042899695d75e616\n    # via requests\nclick==8.1.8 \\\n    --hash=sha256:63c132bbbed01578a06712a2d1f497bb62d9c1c0d329b7903a866228027263b2 \\\n    --hash=sha256:ed53c9d8990d83c2a27deae68e4ee337473f6330c040a31d4225c9574d16096a\n    # via flask\ndeprecated==1.2.18 \\\n    --hash=sha256:422b6f6d859da6f2ef57857761bfb392480502a64c3028ca9bbe86085d72115d \\\n    --hash=sha256:bd5011788200372a32418f888e326a09ff80d0214bd961147cfed01b5c018eec\n    # via\n    #   opentelemetry-api\n    #   opentelemetry-propagator-b3\n    #   opentelemetry-semantic-conventions\ndominate==2.9.1 \\\n    --hash=sha256:558284687d9b8aae1904e3d6051ad132dd4a8c0cf551b37ea4e7e42a31d19dc4 \\\n    --hash=sha256:cb7b6b79d33b15ae0a6e87856b984879927c7c2ebb29522df4c75b28ffd9b989\n    # via flask-bootstrap\nflask==3.1.0 \\\n    --hash=sha256:5f873c5184c897c8d9d1b05df1e3d01b14910ce69607a117bd3277098a5836ac \\\n    --hash=sha256:d667207822eb83f1c4b50949b1623c8fc8d51f2341d65f72e1a1815397551136\n    # via\n    #   -r requirements.in\n    #   flask-bootstrap\n    #   flask-json\nflask-bootstrap==3.3.7.1 \\\n    --hash=sha256:cb08ed940183f6343a64e465e83b3a3f13c53e1baabb8d72b5da4545ef123ac8\n    # via -r requirements.in\nflask-json==0.4.0 \\\n    --hash=sha256:07945d66024f3b77694ce1db5d1fe83940f2aa3bcad8a608535686be67e4bc48 \\\n    --hash=sha256:1c1b87a657daa2179fc19f1ffc78204a716c7c5139673dc5038772db4d9f1988\n    # via -r requirements.in\nfuture==1.0.0 \\\n    --hash=sha256:929292d34f5872e70396626ef385ec22355a1fae8ad29e1a734c3e43f9fbc216 \\\n    --hash=sha256:bd2968309307861edae1458a4f8a4f3598c03be43b97521076aebf5d94c07b05\n    # via -r requirements.in\ngevent==24.11.1 \\\n    --hash=sha256:1c3443b0ed23dcb7c36a748d42587168672953d368f2956b17fad36d43b58836 \\\n```\n\n----------------------------------------\n\nTITLE: Displaying Istio Service Endpoint Status in Command Line Format\nDESCRIPTION: A tabular display of service endpoint status in an Istio service mesh. The output shows endpoint IP addresses with ports, their health status, locality information (if any), and full cluster identifiers for each endpoint.\nSOURCE: https://github.com/istio/istio/blob/master/istioctl/pkg/writer/envoy/configdump/testdata/endpoint/portfilter_output.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nNAME                  STATUS      LOCALITY     CLUSTER\n10.244.0.176:8080     HEALTHY                  outbound|80||istio-ingressgateway.istio-system.svc.cluster.local\n10.244.0.189:8080     HEALTHY                  outbound|80||skywalking-ui.skywalking.svc.cluster.local\n```\n\n----------------------------------------\n\nTITLE: Skip Test Configuration\nDESCRIPTION: Shows how to configure tests to be skipped using a .skip file alongside the test input file.\nSOURCE: https://github.com/istio/istio/blob/master/pkg/test/datasets/Readme.md#2025-04-23_snippet_2\n\nLANGUAGE: plain\nCODE:\n```\n# Input file for the test\n.../dataset/**/<testname>.yaml\n\n# Optional file, indicating that the test should be skipped.\n.../dataset/**/<testname>.skip\n```\n\n----------------------------------------\n\nTITLE: Creating Istio System Namespace in Kubernetes\nDESCRIPTION: Creates the 'istio-system' namespace in Kubernetes, which is the default namespace for Istio installation.\nSOURCE: https://github.com/istio/istio/blob/master/manifests/charts/install-OpenShift.md#2025-04-23_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nkubectl create namespace istio-system\n```\n\n----------------------------------------\n\nTITLE: Viewing Istio CNI Chart Configuration Options\nDESCRIPTION: Command to display the supported configuration options and documentation for the Istio CNI chart. This helps in understanding and customizing the chart installation.\nSOURCE: https://github.com/istio/istio/blob/master/manifests/charts/istio-cni/README.md#2025-04-23_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nhelm show values istio/istio-cni\n```\n\n----------------------------------------\n\nTITLE: Running Parallel Tests in Go\nDESCRIPTION: Shows how to run tests in parallel using RunParallel() which relies on Go's t.Parallel() under the hood. This is useful for tests that have significant startup times to improve overall test execution time.\nSOURCE: https://github.com/istio/istio/blob/master/tests/integration/README.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc TestMyLogic(t *testing.T) {\n    framework.\n        NewTest(t).\n        RunParallel(func(ctx framework.TestContext) {\n            // ...\n        }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a ManyCollection for Container Names in Go\nDESCRIPTION: Demonstrates how to use a ManyCollection to compute a list of all container names across all pods. This approach is more efficient for one-to-many mappings.\nSOURCE: https://github.com/istio/istio/blob/master/pkg/kube/krt/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nContainerNames := krt.NewManyCollection[string](func(ctx krt.HandlerContext, pod *v1.Pod) (res []string) {\n    for _, c := range pod.Spec.Containers {\n      res = append(res, c.Name)\n    }\n    return res\n}) // Results in a Collection[string]\n```\n\n----------------------------------------\n\nTITLE: Installing Istio Ingress Gateway with OpenShift Profile\nDESCRIPTION: Installs the Istio Ingress Gateway chart in the 'istio-system' namespace. This sets up the load balancer for ingress traffic.\nSOURCE: https://github.com/istio/istio/blob/master/manifests/charts/install-OpenShift.md#2025-04-23_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nhelm install -n istio-system istio-ingress manifests/charts/gateways/istio-ingress --set profile=openshift\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Istio Ztunnel Helm Chart\nDESCRIPTION: Command to uninstall and delete the Istio Ztunnel Helm chart. This will remove the Ztunnel component from your Kubernetes cluster.\nSOURCE: https://github.com/istio/istio/blob/master/manifests/charts/ztunnel/README.md#2025-04-23_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nhelm delete ztunnel\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies with Hash Values\nDESCRIPTION: This snippet shows how Python package dependencies are specified in a requirements file, including version numbers and SHA256 hash values for package verification. The format used is compatible with pip, the Python package installer.\nSOURCE: https://github.com/istio/istio/blob/master/samples/bookinfo/src/productpage/requirements.txt#2025-04-23_snippet_2\n\nLANGUAGE: Text\nCODE:\n```\ngreenlet==3.2.0 \\\n    --hash=sha256:0010e928e1901d36625f21d008618273f9dda26b516dbdecf873937d39c9dff0 \\\n    --hash=sha256:04e781447a4722e30b4861af728cb878d73a3df79509dc19ea498090cea5d204 \\\n    --hash=sha256:0e14541f9024a280adb9645143d6a0a51fda6f7c5695fd96cb4d542bb563442f \\\n    # via gevent\ngunicorn==23.0.0 \\\n    --hash=sha256:ec400d38950de4dfd418cff8328b2c8faed0edb0d517d3394e457c317908ca4d \\\n    --hash=sha256:f014447a0101dc57e294f6c18ca6b40227a4c90e9bdb586042628030cba004ec\n    # via -r requirements.in\nidna==3.10 \\\n    --hash=sha256:12f65c9b470abda6dc35cf8e63cc574b1c52b11df2c86030af0ac09b01b13ea9 \\\n    --hash=sha256:946d195a0d259cbba61165e88e65941f16e9b36ea6ddb97f00452bae8b1287d3\n    # via requests\n```\n\n----------------------------------------\n\nTITLE: Generating Intermediate CA Certificate for Cluster in Istio\nDESCRIPTION: Creates an intermediate CA certificate for a specific cluster based on the fetched root CA. The $(cluster name) parameter should be replaced with the actual cluster name.\nSOURCE: https://github.com/istio/istio/blob/master/tools/certs/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake -f Makefile.k8s.mk $(cluster name)-cacerts\n```\n\n----------------------------------------\n\nTITLE: Showing Istio Route Configurations\nDESCRIPTION: Lists configured routes with virtual host names, domains, and matching rules\nSOURCE: https://github.com/istio/istio/blob/master/istioctl/pkg/proxyconfig/testdata/config_dump_summary.txt#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nNAME                                                              VHOST NAME            DOMAINS     MATCH     VIRTUAL SERVICE\nroute/inbound-vip|8000|http|httpbin.default.svc.cluster.local     inbound|http|8000     *           /*        \n```\n\n----------------------------------------\n\nTITLE: Installing Istio-CNI with Special Handling for GKE Clusters\nDESCRIPTION: Optional step to install Istio Container Network Interface (CNI) in a dedicated namespace, with special arguments for Google Kubernetes Engine (GKE) clusters.\nSOURCE: https://github.com/istio/istio/blob/master/manifests/charts/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nISTIO_CNI_ARGS=\n# TODO: What k8s data can we use for this check for whether GKE?\nif [[ \"${ISTIO_CLUSTER_ISGKE}\" == \"true\" ]]; then\n    ISTIO_CNI_ARGS=\"--set cni.cniBinDir=/home/kubernetes/bin\"\nfi\niop kube-system istio-cni $IBASE/istio-cni/ ${ISTIO_CNI_ARGS}\n```\n\n----------------------------------------\n\nTITLE: Deploying a Sleep Pod for Testing\nDESCRIPTION: Command to deploy a sleep pod that will be used to send test requests to the external authorization service.\nSOURCE: https://github.com/istio/istio/blob/master/samples/extauthz/README.md#2025-04-23_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ kubectl apply -f ../sleep/sleep.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring and Running a File Change Monitor in Golang\nDESCRIPTION: This example demonstrates how to configure and run a monitor that watches for file changes to update an in-memory config store. It includes setting up the config store, creating a file snapshot object, and running the controller and monitor.\nSOURCE: https://github.com/istio/istio/blob/master/pilot/pkg/config/monitor/README.md#2025-04-23_snippet_2\n\nLANGUAGE: golang\nCODE:\n```\n// Configure the config store\nstore := memory.Make(configDescriptor)\ncontroller = memory.NewController(store)\n// Create an object that will take snapshots of config\nfileSnapshot := configmonitor.NewFileSnapshot(args.Config.FileDir, configDescriptor)\n// Provide snapshot func to monitor\nfileMonitor := configmonitor.NewMonitor(controller, 100*time.Millisecond, fileSnapshot.ReadFile)\n\n// Run the controller and monitor\nstop := make(chan struct{})\ngo controller.run(stop)\nmonitor.Start(stop)\n```\n\n----------------------------------------\n\nTITLE: Defining Component API in Go\nDESCRIPTION: This code defines the API for a new component in the Istio testing framework, including methods for performing actions and handling errors.\nSOURCE: https://github.com/istio/istio/blob/master/tests/integration/README.md#2025-04-23_snippet_8\n\nLANGUAGE: go\nCODE:\n```\npackage mycomponent\n\ntype Instance interface {\n    resource.Resource\n\n    DoStuff() error\n    DoStuffOrFail(t test.Failer)\n}\n```\n\n----------------------------------------\n\nTITLE: Regenerating Operator Protocol Buffers in Istio\nDESCRIPTION: Command to regenerate Go structs for schema validation after updating the operator/pkg/apis/values_types.proto file. This ensures istioctl properly validates user-provided values against the schema.\nSOURCE: https://github.com/istio/istio/blob/master/manifests/charts/UPDATING-CHARTS.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ make operator-proto\n```\n\n----------------------------------------\n\nTITLE: Viewing Helm Release Status After Installation in Istio\nDESCRIPTION: Commands for checking the status and details of a successfully installed Istio Helm chart. The template uses Helm's built-in variables to reference the release name and namespace dynamically.\nSOURCE: https://github.com/istio/istio/blob/master/manifests/charts/istio-cni/templates/NOTES.txt#2025-04-23_snippet_0\n\nLANGUAGE: helm\nCODE:\n```\n\"{{ .Release.Name }}\" successfully installed!\n\nTo learn more about the release, try:\n  $ helm status {{ .Release.Name }} -n {{ .Release.Namespace }}\n  $ helm get all {{ .Release.Name }} -n {{ .Release.Namespace }}\n```\n\n----------------------------------------\n\nTITLE: Displaying Istio Gateway Installation Success Message in Helm Template\nDESCRIPTION: A template message that displays after successful installation of an Istio Gateway. It includes dynamic references to release name and namespace, with suggestions for next commands and documentation links.\nSOURCE: https://github.com/istio/istio/blob/master/manifests/charts/gateway/templates/NOTES.txt#2025-04-23_snippet_0\n\nLANGUAGE: helm\nCODE:\n```\n\"{{ include \"gateway.name\" . }}\" successfully installed!\n\nTo learn more about the release, try:\n  $ helm status {{ .Release.Name }} -n {{ .Release.Namespace }}\n  $ helm get all {{ .Release.Name }} -n {{ .Release.Namespace }}\n\nNext steps:\n  * Deploy an HTTP Gateway: https://istio.io/latest/docs/tasks/traffic-management/ingress/ingress-control/\n  * Deploy an HTTPS Gateway: https://istio.io/latest/docs/tasks/traffic-management/ingress/secure-ingress/\n```\n\n----------------------------------------\n\nTITLE: OpenTelemetry Collector Configuration\nDESCRIPTION: YAML configuration for OpenTelemetry collector defining receivers, processors, exporters, and pipeline setup for log collection and forwarding to Loki.\nSOURCE: https://github.com/istio/istio/blob/master/samples/open-telemetry/loki/REAME.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n    receivers:\n      otlp:\n        protocols:\n          grpc:\n          http:\n    processors:\n      batch:\n      attributes:\n        actions:\n        - action: insert\n          key: loki.attribute.labels\n          value: podName, namespace,cluster,meshID\n    exporters:\n      loki:\n        endpoint: \"http://loki.istio-system.svc:3100/loki/api/v1/push\"\n      logging:\n        loglevel: debug\n    extensions:\n      health_check:\n    service:\n      extensions:\n      - health_check\n      pipelines:\n        logs:\n          receivers: [otlp]\n          processors: [attributes]\n          exporters: [loki, logging]\n```\n\n----------------------------------------\n\nTITLE: Displaying Istio Listener Configurations\nDESCRIPTION: Shows configured listeners with their addresses, ports, matching rules and destination clusters\nSOURCE: https://github.com/istio/istio/blob/master/istioctl/pkg/proxyconfig/testdata/config_dump_summary.txt#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nNAME                   ADDRESSES PORT  MATCH DESTINATION\nlistener/main_internal           0     ALL   Cluster: inbound-vip|8100|http|httpbin.default.svc.cluster.local\nlistener/main_internal           0     ALL   Cluster: inbound-vip|8000|http|httpbin.default.svc.cluster.local\nlistener/main_internal           0     ALL   Cluster: encap\nlistener/main_internal           0     ALL   Cluster: encap\nlistener/              0.0.0.0   15021 ALL   Inline Route: /healthz/ready*\n```\n\n----------------------------------------\n\nTITLE: Example Output of Pushing Bookinfo Docker Images\nDESCRIPTION: Example execution of the build-services.sh script showing how to push custom-tagged Bookinfo images to Docker Hub. It demonstrates setting the tag to 'test1.0' and hub to 'docker.io/user1'.\nSOURCE: https://github.com/istio/istio/blob/master/samples/bookinfo/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ BOOKINFO_TAG=test1.0 BOOKINFO_HUB=docker.io/user1  src/build-services.sh --push\n+++ dirname ./build-services.sh\n++ cd .\n++ pwd\n+ SCRIPTDIR=/work/samples/bookinfo/src\n+ cd /work/samples/bookinfo/src/../../..\n+ h=docker.io/user1\n+ t=test1.0\n+ [[ docker.io/user1 == \\i\\s\\t\\i\\o ]]\n+ [[ docker.io/user1 == \\d\\o\\c\\k\\e\\r\\.\\i\\o\\/\\i\\s\\t\\i\\o ]]\n+ plat=linux/amd64\n+ [[ '' == \\t\\r\\u\\e ]]\n+ env TAG=test1.0 HUB=docker.io/user1 docker buildx bake -f samples/bookinfo/src/docker-bake.hcl --set '*.platform=linux/amd64' --push\n...\n => => pushing layers                                                                                                                                                                                11.1s\n => => pushing manifest for docker.io/user1/examples-bookinfo-reviews-v3:test1.0@sha256:4c9e2dfcabdfc55fba9037967ee412690b23d676481713eb88985926e229c8db                                          0.7s\n => [auth] user1/examples-bookinfo-ratings-v2:pull,push token for registry-1.docker.io                                                                                                            0.0s\n => [auth] user1/examples-bookinfo-ratings-v-delayed:pull,push token for registry-1.docker.io                                                                                                     0.0s\n => [auth] user1/examples-bookinfo-ratings-v-unavailable:pull,push token for registry-1.docker.io                                                                                                 0.0s\n => [auth] user1/examples-bookinfo-ratings-v-unhealthy:pull,push token for registry-1.docker.io                                                                                                   0.0s\n => [auth] user1/examples-bookinfo-ratings-v-faulty:pull,push token for registry-1.docker.io                                                                                                      0.0s\n => [auth] user1/examples-bookinfo-mongodb:pull,push token for registry-1.docker.io                                                                                                               0.0s\n => [auth] user1/examples-bookinfo-details-v1:pull,push token for registry-1.docker.io                                                                                                            0.0s\n => [auth] user1/examples-bookinfo-productpage-v1:pull,push token for registry-1.docker.io                                                                                                        0.0s\n => [auth] user1/examples-bookinfo-details-v2:pull,push token for registry-1.docker.io                                                                                                            0.0s\n => [auth] user1/examples-bookinfo-productpage-v-flooding:pull,push token for registry-1.docker.io                                                                                                0.0s\n => [auth] user1/examples-bookinfo-reviews-v1:pull,push token for registry-1.docker.io                                                                                                            0.0s\n => [auth] user1/examples-bookinfo-reviews-v3:pull,push token for registry-1.docker.io                                                                                                            0.0s\n => [auth] user1/examples-bookinfo-reviews-v2:pull,push token for registry-1.docker.io                                                                                                            0.0s\n+ [[ true == \\t\\r\\u\\e ]]\n+ find ./samples/bookinfo/platform -name '*bookinfo*.yaml' -exec sed -i.bak 's#image:.*\\(\\/examples-bookinfo-.*\\):.*#image: docker.io\\/user1\\1:test1.0#g' '{}' +\n```\n\n----------------------------------------\n\nTITLE: Defining Namespace Specialization in IstioOperatorSpec YAML\nDESCRIPTION: This YAML snippet demonstrates how to specialize namespaces for the gateway feature and its components in the IstioOperatorSpec API.\nSOURCE: https://github.com/istio/istio/blob/master/architecture/environments/operator.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: install.istio.io/v1alpha1\nkind: IstioOperator\nmetadata:\n  namespace: istio-operator\nspec:\n  components:\n    ingressGateways:\n    - name: istio-ingressgateway\n      enabled: true\n      namespace: istio-gateways\n```\n\n----------------------------------------\n\nTITLE: Implementing Native Component in Go\nDESCRIPTION: This snippet demonstrates how to implement a native version of a component, including resource tracking and error handling.\nSOURCE: https://github.com/istio/istio/blob/master/tests/integration/README.md#2025-04-23_snippet_9\n\nLANGUAGE: go\nCODE:\n```\npackage mycomponent\n\ntype nativeComponent struct {\n    id resource.ID\n    // ...\n}\n\nfunc newNative(ctx resource.Context) (Instance, error) {\n    if config.Galley == nil {\n        return nil, errors.New(\"galley must be provided\")\n    }\n\n    instance := &nativeComponent{}\n    instance.id = ctx.TrackResource(instance)\n\n    //...\n    return instance, nil\n}\n\nfunc (c *nativeComponent) ID() resource.ID {\n    return c.id\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing Multicluster Controller Relationships with Mermaid\nDESCRIPTION: This diagram illustrates the relationships between various controllers in Istio's multicluster setup. It shows how the Multicluster Secret controller is the root, with Credentials and Kubernetes Service controllers branching off, and further sub-controllers under the Kubernetes Service controller.\nSOURCE: https://github.com/istio/istio/blob/master/architecture/networking/pilot.md#2025-04-23_snippet_5\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph BT\n    mcsc(\"Multicluster Secret\")\n    scr(\"Credentials Controller\")\n    ksd(\"Kubernetes Service Controller\")\n    nsc(\"Namespace Controller\")\n    wes(\"Workload Entry Store\")\n    iwh(\"Injection Patcher\")\n    aex(\"Auto Service Export\")\n    scr-->mcsc\n    ksd-->mcsc\n    nsc-->ksd\n    wes-->ksd\n    iwh-->ksd\n    aex-->ksd\n```\n\n----------------------------------------\n\nTITLE: Basic Test File Structure\nDESCRIPTION: Demonstrates the required file structure for conversion tests, including input YAML, optional mesh config, and expected JSON output files.\nSOURCE: https://github.com/istio/istio/blob/master/pkg/test/datasets/Readme.md#2025-04-23_snippet_1\n\nLANGUAGE: plain\nCODE:\n```\n# Input file for the test\n.../dataset/**/<testname>.yaml\n\n# Optional Mesh Config Input file\n.../dataset/**/<testname>_meshconfig.yaml\n\n# Required expected resources file.\n.../dataset/**/<testname>_expected.json\n```\n\n----------------------------------------\n\nTITLE: Configuring Feature and Component Enablement in YAML\nDESCRIPTION: This YAML example shows how to enable or disable features and components in the IstioOperatorSpec API.\nSOURCE: https://github.com/istio/istio/blob/master/architecture/environments/operator.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntelemetry:\n  enabled: true\n  v2:\n    enabled: false\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Custom Kube Config in Go\nDESCRIPTION: This command shows how to run tests using a specific Kubernetes configuration file.\nSOURCE: https://github.com/istio/istio/blob/master/tests/integration/README.md#2025-04-23_snippet_14\n\nLANGUAGE: console\nCODE:\n```\n$ go test ./... -p 1 --istio.test.kube.config ~/.kube/config\n```\n\n----------------------------------------\n\nTITLE: Displaying Istio Namespace Policy Table\nDESCRIPTION: A formatted table showing Istio namespace policies including their names, actions, and scopes. The table displays two policies: 'allow-nothing' and 'allow-waypoint' in the default namespace.\nSOURCE: https://github.com/istio/istio/blob/master/istioctl/pkg/writer/ztunnel/configdump/testdata/policies.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nNAMESPACE POLICY NAME    ACTION SCOPE\ndefault   allow-nothing  Allow  Namespace\ndefault   allow-waypoint Allow  WorkloadSelector\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Istio Gateway Helm Chart\nDESCRIPTION: Command to uninstall and delete the 'istio-ingressgateway' deployment.\nSOURCE: https://github.com/istio/istio/blob/master/manifests/charts/gateway/README.md#2025-04-23_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nhelm delete istio-ingressgateway\n```\n\n----------------------------------------\n\nTITLE: Unauthenticated Traffic Flow with Permissive Policy\nDESCRIPTION: Mermaid diagram showing the flow of unauthenticated traffic through the mesh with a permissive PeerAuthentication policy\nSOURCE: https://github.com/istio/istio/blob/master/architecture/ambient/peer-authentication.md#2025-04-23_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD;\nsrc[src pod]-->|plaintext port|ztunnel{\"ztunnel (L4 policy applied here)\"}\nztunnel{ztunnel}-->|TLS|wp{waypoint}\nwp-->|mTLS|ztunnel\nztunnel-->|plaintext|dst[dst pod]\n```\n\n----------------------------------------\n\nTITLE: Expected Output JSON Structure\nDESCRIPTION: Defines the expected JSON structure for test output files, showing the format for resource collections with metadata and body components.\nSOURCE: https://github.com/istio/istio/blob/master/pkg/test/datasets/Readme.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"collection\": [\n    {\n      \"Metadata\": {\n        \"name\": \"output-resource-1\"\n      },\n      \"Body\": {}\n    },\n    {\n      \"Metadata\": {\n        \"name\": \"outout-resource-2\"\n      },\n      \"Body\": {}\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: GRPC Port Configuration\nDESCRIPTION: YAML configuration for the otel-collector service port specification\nSOURCE: https://github.com/istio/istio/blob/master/samples/open-telemetry/tracing/README.md#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  ports:\n    - name: grpc-otlp\n      port: 4317\n      protocol: TCP\n      targetPort: 4317\n```\n\n----------------------------------------\n\nTITLE: Setting Istio Environment Variables for Pre-built Images in Bash\nDESCRIPTION: Configures environment variables to use pre-built Istio images from a specific registry and tag.\nSOURCE: https://github.com/istio/istio/blob/master/tests/integration/GKE.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nexport HUB=\"gcr.io/istio-testing\"\nexport TAG=\"latest\"\n```\n\n----------------------------------------\n\nTITLE: Cleanup Resources\nDESCRIPTION: Commands to remove the deployed OpenTelemetry resources\nSOURCE: https://github.com/istio/istio/blob/master/samples/open-telemetry/tracing/README.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n observability delete -f ./telemetry.yaml\nkubectl -n observability delete -f ../otel.yaml\n```\n\n----------------------------------------\n\nTITLE: Authorization Configuration in YAML\nDESCRIPTION: Translated Authorization configuration that implements the PeerAuthentication policy by denying unauthenticated traffic except for port 9090\nSOURCE: https://github.com/istio/istio/blob/master/architecture/ambient/peer-authentication.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\naction: DENY\ngroups:\n- rules:\n  - matches:\n    - notPrincipals:\n      - presence: {}\n- rules:\n  - matches:\n    - notDestinationPorts:\n      - 9090\nname: converted_peer_authentication_strict-and-permissive-mtls\nscope: WORKLOAD_SELECTOR\n```\n\n----------------------------------------\n\nTITLE: Generating RSA Private Key with OpenSSL in Bash\nDESCRIPTION: This Bash command uses OpenSSL to generate a new 2048-bit RSA private key and save it to a file.\nSOURCE: https://github.com/istio/istio/blob/master/security/tools/jwt/samples/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nopenssl genrsa -out key.pem 2048\n```\n\n----------------------------------------\n\nTITLE: Referencing Default Profile in Istio Manifests\nDESCRIPTION: Shows the file path for the default configuration profile used in Istio Operator when no profile is explicitly selected by the user.\nSOURCE: https://github.com/istio/istio/blob/master/architecture/environments/operator.md#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n../manifests/profiles/default.yaml\n```\n\n----------------------------------------\n\nTITLE: Viewing Istio Base Release Information using Helm\nDESCRIPTION: Helm commands for inspecting the status and details of an installed Istio base release. Uses template variables for release name and namespace.\nSOURCE: https://github.com/istio/istio/blob/master/manifests/charts/base/templates/NOTES.txt#2025-04-23_snippet_0\n\nLANGUAGE: helm\nCODE:\n```\n$ helm status {{ .Release.Name }} -n {{ .Release.Namespace }}\n$ helm get all {{ .Release.Name }} -n {{ .Release.Namespace }}\n```\n\n----------------------------------------\n\nTITLE: Configuring PeerAuthentication Policy in YAML\nDESCRIPTION: Example PeerAuthentication resource that defines strict mTLS for workloads labeled 'app: a' with permissive mode for port 9090\nSOURCE: https://github.com/istio/istio/blob/master/architecture/ambient/peer-authentication.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: security.istio.io/v1\nkind: PeerAuthentication\nmetadata:\n  name: strict-and-permissive-mtls\nspec:\n  selector:\n    matchLabels:\n      app: a\n  mtls:\n    mode: STRICT\n  portLevelMtls:\n    9090:\n      mode: PERMISSIVE\n```\n\n----------------------------------------\n\nTITLE: Configuring Istio Components in Properties Format\nDESCRIPTION: This snippet defines configuration settings for Istio components. It enables the base component, disables CNI and pilot, configures an egress gateway (disabled), and sets up an ingress gateway (enabled).\nSOURCE: https://github.com/istio/istio/blob/master/operator/cmd/mesh/testdata/profile-dump/output/config_path.txt#2025-04-23_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nbase.enabled=true\ncni.enabled=false\negressGateways[0].enabled=false\negressGateways[0].name=\"istio-egressgateway\"\ningressGateways[0].enabled=true\ningressGateways[0].name=\"istio-ingressgateway\"\npilot.enabled=false\n```\n\n----------------------------------------\n\nTITLE: Creating JWKS and Demo JWT with Python Script in Bash\nDESCRIPTION: This Bash command uses a Python script to generate a new JWKS (JSON Web Key Set) and a demo JWT token with custom expiration and claims.\nSOURCE: https://github.com/istio/istio/blob/master/security/tools/jwt/samples/README.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngen-jwt.py key.pem -jwks=./jwks.json --expire=3153600000 --claims=foo:bar > demo.jwt\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Galley Test Data\nDESCRIPTION: Shows the basic directory and file structure for organizing Galley test datasets by area, including locations for test data, entry-point code, and generated assets.\nSOURCE: https://github.com/istio/istio/blob/master/pkg/test/datasets/Readme.md#2025-04-23_snippet_0\n\nLANGUAGE: plain\nCODE:\n```\n# Area specific test data set.\ngalley/testdatasets/<area>/dataset/...\n\n# Custom entry-point code for the data set, in a given area.\ngalley/testdatasets/<area>/dataset.go\n\n# Generated Go file for test assets\ngalley/testdatasets/<area>/dataset.gen.go\n```\n\n----------------------------------------\n\nTITLE: Listing Istio Cluster Configurations\nDESCRIPTION: Displays configured clusters with their service FQDN, ports, subsets, direction and destination rules\nSOURCE: https://github.com/istio/istio/blob/master/istioctl/pkg/proxyconfig/testdata/config_dump_summary.txt#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nNAME                                                                SERVICE FQDN                          PORT     SUBSET     DIRECTION       TYPE       DESTINATION RULE\ncluster/agent                                                       cluster/agent                         -        -          -               STATIC     \ncluster/inbound-vip|8000|http|httpbin.default.svc.cluster.local     httpbin.default.svc.cluster.local     8000     http       inbound-vip     EDS        \ncluster/prometheus_stats                                            cluster/prometheus_stats              -        -          -               STATIC     \n```\n\n----------------------------------------\n\nTITLE: Visualizing Service Discovery Controllers with Mermaid Diagram\nDESCRIPTION: This diagram shows the relationships between Kubernetes Controller and ServiceEntry Controller, illustrating how they process different resource types to generate ServiceInstances and WorkloadInstances. It shows the cross-controller communication where ServiceEntry can select Pods and Services can select WorkloadEntries.\nSOURCE: https://github.com/istio/istio/blob/master/architecture/networking/pilot.md#2025-04-23_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n    subgraph Kube Controller\n        s(Services)\n        e(Endpoints)\n        p(Pods)\n        ksi(ServiceInstances)\n        kwi(WorkloadInstances)\n        s-->ksi\n        e-->ksi\n        p-->kwi\n    end\n    subgraph ServiceEntry Controller\n        se(ServiceEntry)\n        we(WorkloadEntry)\n        ssi(ServiceInstances)\n        swi(WorkloadInstances)\n        se-->ssi\n        swi-->ssi\n        we-->swi\n    end\n    kwi-->ssi\n    swi-->ksi\n```\n\n----------------------------------------\n\nTITLE: Python Package Requirements with SHA-256 Hashes\nDESCRIPTION: Requirements file listing Python package dependencies with their versions and corresponding SHA-256 hashes for security verification. Each package entry includes multiple hash values to verify package integrity during installation.\nSOURCE: https://github.com/istio/istio/blob/master/samples/bookinfo/src/productpage/requirements.txt#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nzipp==3.21.0 \\\n    --hash=sha256:2c9958f6430a2040341a52eb608ed6dd93ef4392e02ffe219417c1b28b5dd1f4 \\\n    --hash=sha256:ac1bbe05fd2991f160ebce24ffbac5f6d11d83dc90891255885223d42b3cd931\n    # via importlib-metadata\nzope-event==5.0 \\\n    --hash=sha256:2832e95014f4db26c47a13fdaef84cef2f4df37e66b59d8f1f4a8f319a632c26 \\\n    --hash=sha256:bac440d8d9891b4068e2b5a2c5e2c9765a9df762944bda6955f96bb9b91e67cd\n    # via gevent\nzope-interface==7.2 \\\n    --hash=sha256:033b3923b63474800b04cba480b70f6e6243a62208071fc148354f3f89cc01b7 \\\n    # via gevent\nsetuptools==78.1.0 \\\n    --hash=sha256:18fd474d4a82a5f83dac888df697af65afa82dec7323d09c3e37d1f14288da54 \\\n    --hash=sha256:3e386e96793c8702ae83d17b853fb93d3e09ef82ec62722e61da5cd22376dcd8\n    # via\n    #   -r requirements.in\n    #   zope-event\n    #   zope-interface\n```\n\n----------------------------------------\n\nTITLE: Implementing Go Fuzz Test for HTTP Building\nDESCRIPTION: Example implementation of a fuzz test using Istio's pkg/fuzz helpers to test HTTP building functionality. Demonstrates struct initialization with custom validators and basic test execution.\nSOURCE: https://github.com/istio/istio/blob/master/pkg/fuzz/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// Define a new fuzzer. Must have Fuzz prefix\nfunc FuzzBuildHTTP(f *testing.F) {\n  fuzz.Fuzz(f, func(fg fuzz.Helper) {\n    // Setup a few structs for testing\n    bundle := fuzz.Struct[trustdomain.Bundle](fg)\n        // This one has a custom validator\n    push := fuzz.Struct[*model.PushContext](fg, validatePush)\n        // *model.Proxy, and other types, implement the fuzz.Validator interface and already validate some basics.\n    node := fuzz.Struct[*model.Proxy](fg)\n    selectionOpts := model.WorkloadSelectionOpts{\n      Namespace:       node.ConfigNamespace,\n      WorkloadLabels:  node.Labels,\n    }\n    option := fuzz.Struct[Option](fg)\n\n    // Run our actual test code. In this case, we are just checking nothing crashes.\n    // In other tests, explicit assertions may be helpful.\n    policies := push.AuthzPolicies.ListAuthorizationPolicies(selectionOpts)\n    New(bundle, push, policies, option).BuildHTTP()\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying GKE Cluster Creation Script Help in Bash\nDESCRIPTION: Shows the help information for the GKE cluster creation script.\nSOURCE: https://github.com/istio/istio/blob/master/tests/integration/GKE.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./tests/integration/create_cluster_gke.sh -h\n```\n\n----------------------------------------\n\nTITLE: Listing Istio Certificate Status\nDESCRIPTION: Displays certificate information including type, status, validity, and expiration dates\nSOURCE: https://github.com/istio/istio/blob/master/istioctl/pkg/proxyconfig/testdata/config_dump_summary.txt#2025-04-23_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nRESOURCE NAME      TYPE           STATUS     VALID CERT     SERIAL NUMBER                        NOT AFTER                NOT BEFORE\nsecret/default     Cert Chain     ACTIVE     false          6fbee254c22900615cb1f74e3d2f1713     2023-05-16T01:32:52Z     2023-05-15T01:30:52Z\nsecret/ROOTCA      CA             ACTIVE     true           193a543fe2b0d9cd4847675394dfc54      2033-05-02T03:41:33Z     2023-05-05T03:41:33Z\n```\n\n----------------------------------------\n\nTITLE: Defining and Checking Removed Configuration Parameters in Go Templates\nDESCRIPTION: Creates a dictionary of removed configuration parameters and their replacements, then checks if any are still being used in the current Values. Will trigger a failure if removed configurations are detected.\nSOURCE: https://github.com/istio/istio/blob/master/manifests/charts/istio-control/istio-discovery/templates/NOTES.txt#2025-04-23_snippet_2\n\nLANGUAGE: go-template\nCODE:\n```\n{{-\n  $failDeps := dict\n    \"telemetry.v2.prometheus.configOverride\"\n    \"telemetry.v2.stackdriver.configOverride\"\n    \"telemetry.v2.stackdriver.disableOutbound\"\n    \"telemetry.v2.stackdriver.outboundAccessLogging\"\n    \"global.tracer.stackdriver.debug\" \"meshConfig.defaultConfig.tracing.stackdriver.debug\"\n    \"global.tracer.stackdriver.maxNumberOfAttributes\" \"meshConfig.defaultConfig.tracing.stackdriver.maxNumberOfAttributes\"\n    \"global.tracer.stackdriver.maxNumberOfAnnotations\" \"meshConfig.defaultConfig.tracing.stackdriver.maxNumberOfAnnotations\"\n    \"global.tracer.stackdriver.maxNumberOfMessageEvents\" \"meshConfig.defaultConfig.tracing.stackdriver.maxNumberOfMessageEvents\"\n    \"meshConfig.defaultConfig.tracing.stackdriver.debug\" \"Istio supported tracers\"\n    \"meshConfig.defaultConfig.tracing.stackdriver.maxNumberOfAttributes\" \"Istio supported tracers\"\n    \"meshConfig.defaultConfig.tracing.stackdriver.maxNumberOfAnnotations\" \"Istio supported tracers\"\n    \"meshConfig.defaultConfig.tracing.stackdriver.maxNumberOfMessageEvents\" \"Istio supported tracers\"\n}}\n{{- range $dep, $replace := $failDeps }}\n{{- /* Complex logic to turn the string above into a null-safe traversal like ((.Values.global).certificates */}}\n{{- $res := tpl (print \"{{\" (repeat (split \".\" $dep | len) \"(\")  \".Values.\" (replace \".\" \").\" $dep) \")}}\") $}}\n{{- if not (eq $res \"\")}}\n{{fail (print $dep \" is removed\")}}\n{{- end }}\n{{- end }}\n{{- if eq $.Values.global.pilotCertProvider \"kubernetes\" }}\n{{- fail \"pilotCertProvider=kubernetes is not supported\" }}\n{{- end }}\n```\n\n----------------------------------------\n\nTITLE: Generated Python Test Dependencies with Hash Verification\nDESCRIPTION: This pip-compiled test requirements file lists all the Python packages needed for testing the Istio project, along with their specific versions and hash signatures for security verification. It was generated using pip-compile from a test-requirements.in file.\nSOURCE: https://github.com/istio/istio/blob/master/samples/bookinfo/src/productpage/test-requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\n#\n# This file is autogenerated by pip-compile with Python 3.12\n# by the following command:\n#\n#    pip-compile --generate-hashes test-requirements.in\n#\ncertifi==2024.7.4 \\\n    --hash=sha256:5a1e7645bc0ec61a09e26c36f6106dd4cf40c6db3a1fb6352b0244e7fb057c7b \\\n    --hash=sha256:c198e21b1289c2ab85ee4e67bb4b4ef3ead0892059901a8d5b622f24a1101e90\n    # via requests\ncharset-normalizer==3.3.2 \\\n    --hash=sha256:06435b539f889b1f6f4ac1758871aae42dc3a8c0e24ac9e60c2384973ad73027 \\\n    --hash=sha256:06a81e93cd441c56a9b65d8e1d043daeb97a3d0856d177d5c90ba85acb3db087 \\\n    --hash=sha256:0a55554a2fa0d408816b3b5cedf0045f4b8e1a6065aec45849de2d6f3f8e9786 \\\n    --hash=sha256:0b2b64d2bb6d3fb9112bafa732def486049e63de9618b5843bcdd081d8144cd8 \\\n    --hash=sha256:10955842570876604d404661fbccbc9c7e684caf432c09c715ec38fbae45ae09 \\\n    --hash=sha256:122c7fa62b130ed55f8f285bfd56d5f4b4a5b503609d181f9ad85e55c89f4185 \\\n    --hash=sha256:1ceae2f17a9c33cb48e3263960dc5fc8005351ee19db217e9b1bb15d28c02574 \\\n    --hash=sha256:1d3193f4a680c64b4b6a9115943538edb896edc190f0b222e73761716519268e \\\n    --hash=sha256:1f79682fbe303db92bc2b1136016a38a42e835d932bab5b3b1bfcfbf0640e519 \\\n    --hash=sha256:2127566c664442652f024c837091890cb1942c30937add288223dc895793f898 \\\n    --hash=sha256:22afcb9f253dac0696b5a4be4a1c0f8762f8239e21b99680099abd9b2b1b2269 \\\n    --hash=sha256:25baf083bf6f6b341f4121c2f3c548875ee6f5339300e08be3f2b2ba1721cdd3 \\\n    --hash=sha256:2e81c7b9c8979ce92ed306c249d46894776a909505d8f5a4ba55b14206e3222f \\\n    --hash=sha256:3287761bc4ee9e33561a7e058c72ac0938c4f57fe49a09eae428fd88aafe7bb6 \\\n    --hash=sha256:34d1c8da1e78d2e001f363791c98a272bb734000fcef47a491c1e3b0505657a8 \\\n    --hash=sha256:37e55c8e51c236f95b033f6fb391d7d7970ba5fe7ff453dad675e88cf303377a \\\n    --hash=sha256:3d47fa203a7bd9c5b6cee4736ee84ca03b8ef23193c0d1ca99b5089f72645c73 \\\n    --hash=sha256:3e4d1f6587322d2788836a99c69062fbb091331ec940e02d12d179c1d53e25fc \\\n    --hash=sha256:42cb296636fcc8b0644486d15c12376cb9fa75443e00fb25de0b8602e64c1714 \\\n    --hash=sha256:45485e01ff4d3630ec0d9617310448a8702f70e9c01906b0d0118bdf9d124cf2 \\\n    --hash=sha256:4a78b2b446bd7c934f5dcedc588903fb2f5eec172f3d29e52a9096a43722adfc \\\n    --hash=sha256:4ab2fe47fae9e0f9dee8c04187ce5d09f48eabe611be8259444906793ab7cbce \\\n    --hash=sha256:4d0d1650369165a14e14e1e47b372cfcb31d6ab44e6e33cb2d4e57265290044d \\\n    --hash=sha256:549a3a73da901d5bc3ce8d24e0600d1fa85524c10287f6004fbab87672bf3e1e \\\n    --hash=sha256:55086ee1064215781fff39a1af09518bc9255b50d6333f2e4c74ca09fac6a8f6 \\\n    --hash=sha256:572c3763a264ba47b3cf708a44ce965d98555f618ca42c926a9c1616d8f34269 \\\n    --hash=sha256:573f6eac48f4769d667c4442081b1794f52919e7edada77495aaed9236d13a96 \\\n    --hash=sha256:5b4c145409bef602a690e7cfad0a15a55c13320ff7a3ad7ca59c13bb8ba4d45d \\\n    --hash=sha256:6463effa3186ea09411d50efc7d85360b38d5f09b870c48e4600f63af490e56a \\\n    --hash=sha256:65f6f63034100ead094b8744b3b97965785388f308a64cf8d7c34f2f2e5be0c4 \\\n    --hash=sha256:663946639d296df6a2bb2aa51b60a2454ca1cb29835324c640dafb5ff2131a77 \\\n    --hash=sha256:6897af51655e3691ff853668779c7bad41579facacf5fd7253b0133308cf000d \\\n    --hash=sha256:68d1f8a9e9e37c1223b656399be5d6b448dea850bed7d0f87a8311f1ff3dabb0 \\\n    --hash=sha256:6ac7ffc7ad6d040517be39eb591cac5ff87416c2537df6ba3cba3bae290c0fed \\\n    --hash=sha256:6b3251890fff30ee142c44144871185dbe13b11bab478a88887a639655be1068 \\\n    --hash=sha256:6c4caeef8fa63d06bd437cd4bdcf3ffefe6738fb1b25951440d80dc7df8c03ac \\\n    --hash=sha256:6ef1d82a3af9d3eecdba2321dc1b3c238245d890843e040e41e470ffa64c3e25 \\\n    --hash=sha256:753f10e867343b4511128c6ed8c82f7bec3bd026875576dfd88483c5c73b2fd8 \\\n    --hash=sha256:7cd13a2e3ddeed6913a65e66e94b51d80a041145a026c27e6bb76c31a853c6ab \\\n    --hash=sha256:7ed9e526742851e8d5cc9e6cf41427dfc6068d4f5a3bb03659444b4cabf6bc26 \\\n    --hash=sha256:7f04c839ed0b6b98b1a7501a002144b76c18fb1c1850c8b98d458ac269e26ed2 \\\n    --hash=sha256:802fe99cca7457642125a8a88a084cef28ff0cf9407060f7b93dca5aa25480db \\\n    --hash=sha256:80402cd6ee291dcb72644d6eac93785fe2c8b9cb30893c1af5b8fdd753b9d40f \\\n    --hash=sha256:8465322196c8b4d7ab6d1e049e4c5cb460d0394da4a27d23cc242fbf0034b6b5 \\\n    --hash=sha256:86216b5cee4b06df986d214f664305142d9c76df9b6512be2738aa72a2048f99 \\\n    --hash=sha256:87d1351268731db79e0f8e745d92493ee2841c974128ef629dc518b937d9194c \\\n    --hash=sha256:8bdb58ff7ba23002a4c5808d608e4e6c687175724f54a5dade5fa8c67b604e4d \\\n    --hash=sha256:8c622a5fe39a48f78944a87d4fb8a53ee07344641b0562c540d840748571b811 \\\n    --hash=sha256:8d756e44e94489e49571086ef83b2bb8ce311e730092d2c34ca8f7d925cb20aa \\\n    --hash=sha256:8f4a014bc36d3c57402e2977dada34f9c12300af536839dc38c0beab8878f38a \\\n    --hash=sha256:9063e24fdb1e498ab71cb7419e24622516c4a04476b17a2dab57e8baa30d6e03 \\\n    --hash=sha256:90d558489962fd4918143277a773316e56c72da56ec7aa3dc3dbbe20fdfed15b \\\n    --hash=sha256:923c0c831b7cfcb071580d3f46c4baf50f174be571576556269530f4bbd79d04 \\\n    --hash=sha256:95f2a5796329323b8f0512e09dbb7a1860c46a39da62ecb2324f116fa8fdc85c \\\n    --hash=sha256:96b02a3dc4381e5494fad39be677abcb5e6634bf7b4fa83a6dd3112607547001 \\\n    --hash=sha256:9f96df6923e21816da7e0ad3fd47dd8f94b2a5ce594e00677c0013018b813458 \\\n    --hash=sha256:a10af20b82360ab00827f916a6058451b723b4e65030c5a18577c8b2de5b3389 \\\n    --hash=sha256:a50aebfa173e157099939b17f18600f72f84eed3049e743b68ad15bd69b6bf99 \\\n    --hash=sha256:a981a536974bbc7a512cf44ed14938cf01030a99e9b3a06dd59578882f06f985 \\\n    --hash=sha256:a9a8e9031d613fd2009c182b69c7b2c1ef8239a0efb1df3f7c8da66d5dd3d537 \\\n    --hash=sha256:ae5f4161f18c61806f411a13b0310bea87f987c7d2ecdbdaad0e94eb2e404238 \\\n    --hash=sha256:aed38f6e4fb3f5d6bf81bfa990a07806be9d83cf7bacef998ab1a9bd660a581f \\\n    --hash=sha256:b01b88d45a6fcb69667cd6d2f7a9aeb4bf53760d7fc536bf679ec94fe9f3ff3d \\\n    --hash=sha256:b261ccdec7821281dade748d088bb6e9b69e6d15b30652b74cbbac25e280b796 \\\n    --hash=sha256:b2b0a0c0517616b6869869f8c581d4eb2dd83a4d79e0ebcb7d373ef9956aeb0a \\\n    --hash=sha256:b4a23f61ce87adf89be746c8a8974fe1c823c891d8f86eb218bb957c924bb143 \\\n    --hash=sha256:bd8f7df7d12c2db9fab40bdd87a7c09b1530128315d047a086fa3ae3435cb3a8 \\\n    --hash=sha256:beb58fe5cdb101e3a055192ac291b7a21e3b7ef4f67fa1d74e331a7f2124341c \\\n    --hash=sha256:c002b4ffc0be611f0d9da932eb0f704fe2602a9a949d1f738e4c34c75b0863d5 \\\n    --hash=sha256:c083af607d2515612056a31f0a8d9e0fcb5876b7bfc0abad3ecd275bc4ebc2d5 \\\n    --hash=sha256:c180f51afb394e165eafe4ac2936a14bee3eb10debc9d9e4db8958fe36afe711 \\\n    --hash=sha256:c235ebd9baae02f1b77bcea61bce332cb4331dc3617d254df3323aa01ab47bd4 \\\n    --hash=sha256:cd70574b12bb8a4d2aaa0094515df2463cb429d8536cfb6c7ce983246983e5a6 \\\n    --hash=sha256:d0eccceffcb53201b5bfebb52600a5fb483a20b61da9dbc885f8b103cbe7598c \\\n    --hash=sha256:d965bba47ddeec8cd560687584e88cf699fd28f192ceb452d1d7ee807c5597b7 \\\n    --hash=sha256:db364eca23f876da6f9e16c9da0df51aa4f104a972735574842618b8c6d999d4 \\\n    --hash=sha256:ddbb2551d7e0102e7252db79ba445cdab71b26640817ab1e3e3648dad515003b \\\n    --hash=sha256:deb6be0ac38ece9ba87dea880e438f25ca3eddfac8b002a2ec3d9183a454e8ae \\\n    --hash=sha256:e06ed3eb3218bc64786f7db41917d4e686cc4856944f53d5bdf83a6884432e12 \\\n    --hash=sha256:e27ad930a842b4c5eb8ac0016b0a54f5aebbe679340c26101df33424142c143c \\\n    --hash=sha256:e537484df0d8f426ce2afb2d0f8e1c3d0b114b83f8850e5f2fbea0e797bd82ae \\\n    --hash=sha256:eb00ed941194665c332bf8e078baf037d6c35d7c4f3102ea2d4f16ca94a26dc8 \\\n    --hash=sha256:eb6904c354526e758fda7167b33005998fb68c46fbc10e013ca97f21ca5c8887 \\\n    --hash=sha256:eb8821e09e916165e160797a6c17edda0679379a4be5c716c260e836e122f54b \\\n    --hash=sha256:efcb3f6676480691518c177e3b465bcddf57cea040302f9f4e6e191af91174d4 \\\n    --hash=sha256:f27273b60488abe721a075bcca6d7f3964f9f6f067c8c4c605743023d7d3944f \\\n    --hash=sha256:f30c3cb33b24454a82faecaf01b19c18562b1e89558fb6c56de4d9118a032fd5 \\\n    --hash=sha256:fb69256e180cb6c8a894fee62b3afebae785babc1ee98b81cdf68bbca1987f33 \\\n    --hash=sha256:fd1abc0d89e30cc4e02e4064dc67fcc51bd941eb395c502aac3ec19fab46b519 \\\n    --hash=sha256:ff8fa367d09b717b2a17a052544193ad76cd49979c805768879cb63d9ca50561\n    # via requests\nidna==3.7 \\\n    --hash=sha256:028ff3aadf0609c1fd278d8ea3089299412a7a8b9bd005dd08b9f8285bcb5cfc \\\n    --hash=sha256:82fee1fc78add43492d3a1898bfa6d8a904cc97d8427f683ed8e798d07761aa0\n    # via requests\nrequests==2.32.2 \\\n    --hash=sha256:dd951ff5ecf3e3b3aa26b40703ba77495dab41da839ae72ef3c8e5d8e2433289 \\\n    --hash=sha256:fc06670dd0ed212426dfeb94fc1b983d917c4f9847c863f313c9dfaaffb7c23c\n    # via requests-mock\nrequests-mock==1.5.2 \\\n    --hash=sha256:7a5fa99db5e3a2a961b6f20ed40ee6baeff73503cf0a553cc4d679409e6170fb \\\n    --hash=sha256:8ca0628dc66d3f212878932fd741b02aa197ad53fd2228164800a169a4a826af\n    # via -r test-requirements.in\nsix==1.16.0 \\\n    --hash=sha256:1e61c37477a1626458e36f7b1d82aa5c9b094fa4802892072e49de9c60c4c926 \\\n    --hash=sha256:8abb2f1d86890a2dfb989f9a77cfcfd3e47c2a354b01111771326f8aa26e0254\n    # via requests-mock\nurllib3==2.2.2 \\\n    --hash=sha256:a448b2f64d686155468037e1ace9f2d2199776e17f0a46610480d311f73e3472 \\\n    --hash=sha256:dd505485549a7a552833da5e6063639d0d177c04f23bc3864e41e5dc5f612168\n    # via requests\n```\n\n----------------------------------------\n\nTITLE: Script Help Output Display\nDESCRIPTION: The complete help output showing all available options for the sa-jwt.py script, including details about required and optional arguments.\nSOURCE: https://github.com/istio/istio/blob/master/security/tools/jwt/README.md#2025-04-23_snippet_2\n\nLANGUAGE: plain\nCODE:\n```\nusage: ./sa-jwt.py [-h] [-iss ISS] [-aud AUD] [-sub SUB] [-claims CLAIMS] service_account_file\n\nPython script generates a JWT signed by a Google service account\n\npositional arguments:\n  service_account_file  The path to your service account key file (in JSON\n                        format).\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -iss ISS, --iss ISS   iss claim. This should be your service account email.\n  -aud AUD, --aud AUD   aud claim. This is comma-separated-list of audiences.\n  -sub SUB, --sub SUB   sub claim. If not provided, it is set to the same as\n                        iss claim.\n  -claims CLAIMS, --claims CLAIMS\n                        Other claims in format name1:value1,name2:value2 etc.\n                        Only string values are supported.\n```\n\n----------------------------------------\n\nTITLE: Processing Deprecated Configuration Warnings in Go Templates\nDESCRIPTION: Iterates through the deprecated configuration parameters, checks if they are used in the current Values, and generates appropriate warning messages. Uses complex template logic to safely traverse nested values.\nSOURCE: https://github.com/istio/istio/blob/master/manifests/charts/istio-control/istio-discovery/templates/NOTES.txt#2025-04-23_snippet_1\n\nLANGUAGE: go-template\nCODE:\n```\n{{- range $dep, $replace := $deps }}\n{{- /* Complex logic to turn the string above into a null-safe traversal like ((.Values.global).certificates */}}\n{{- $res := tpl (print \"{{\" (repeat (split \".\" $dep | len) \"(\")  \".Values.\" (replace \".\" \").\" $dep) \")}}\") $}}\n{{- if not (eq $res \"\")}}\nWARNING: {{$dep|quote}} is deprecated; use {{$replace|quote}} instead.\n{{- end }}\n{{- end }}\n```\n\n----------------------------------------\n\nTITLE: Viewing Istio Pod Network Configuration in Kubernetes\nDESCRIPTION: A table displaying Istio-managed pods in a Kubernetes cluster with their networking details. The table shows pods in the default namespace, their IP addresses, the worker nodes they're deployed on, waypoint status (all None), and the communication protocols (mostly HBONE with one TCP instance).\nSOURCE: https://github.com/istio/istio/blob/master/istioctl/pkg/writer/ztunnel/configdump/testdata/workloadsummary_default.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nNAMESPACE POD NAME                       ADDRESS     NODE            WAYPOINT PROTOCOL\ndefault   details-v1-698d88b-krdw7       10.244.2.55 ambient-worker2 None     HBONE\ndefault   httpbin-7447985f87-t8hv7       10.244.1.40 ambient-worker  None     TCP\ndefault   productpage-v1-675fc69cf-kkrm2 10.244.2.56 ambient-worker2 None     HBONE\ndefault   ratings-v1-6484c4d9bb-8xc2r    10.244.2.57 ambient-worker2 None     HBONE\ndefault   reviews-v1-5b5d6494f4-c7z5w    10.244.1.41 ambient-worker  None     HBONE\ndefault   reviews-v2-5b667bcbf8-twvx6    10.244.1.42 ambient-worker  None     HBONE\ndefault   reviews-v3-5b9bd44f4-z9ms4     10.244.1.43 ambient-worker  None     HBONE\ndefault   sleep-7656cf8794-lxcmx         10.244.2.58 ambient-worker2 None     HBONE\n```\n\n----------------------------------------\n\nTITLE: Displaying Istio Proxy Status Configuration Table\nDESCRIPTION: A formatted table showing the status of various Istio discovery services (xDS) for multiple proxies. The table includes proxy names, cluster assignments, synchronization states for different discovery services, control plane details, and version information.\nSOURCE: https://github.com/istio/istio/blob/master/istioctl/pkg/writer/pilot/testdata/multiXdsStatusSinglePilot.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nNAME       CLUSTER      CDS       LDS        EDS        RDS          ECDS         ISTIOD      VERSION\nproxy1     cluster1     STALE     SYNCED     SYNCED     NOT SENT     NOT SENT     istiod1     1.20\nproxy2     cluster2     STALE     SYNCED     STALE      SYNCED       NOT SENT     istiod1     1.20\n```\n\n----------------------------------------\n\nTITLE: Showing Istio Endpoint Status\nDESCRIPTION: Lists endpoint configurations with their health status and cluster assignments\nSOURCE: https://github.com/istio/istio/blob/master/istioctl/pkg/proxyconfig/testdata/config_dump_summary.txt#2025-04-23_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nNAME                                                       STATUS      LOCALITY     CLUSTER\nendpoint/envoy://connect_originate/192.168.195.248:800     HEALTHY                  inbound-vip|8100|http|httpbin.default.svc.cluster.local\nendpoint/127.0.0.1:15000                                   HEALTHY                  prometheus_stats\n```\n\n----------------------------------------\n\nTITLE: Declaring Google Auth Dependencies\nDESCRIPTION: A text file specifying the Google authentication package requirement, typically used in package management or dependency configuration.\nSOURCE: https://github.com/istio/istio/blob/master/security/tools/jwt/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ngoogle-auth\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Boilerplate Notice Template\nDESCRIPTION: Standard boilerplate notice that should be included in source files to apply the Apache License 2.0. The template contains placeholders for copyright year and owner that need to be replaced with actual information.\nSOURCE: https://github.com/istio/istio/blob/master/licenses/github.com/Masterminds/goutils/LICENSE.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\n----------------------------------------\n\nTITLE: ASCII Art Bridge Structure\nDESCRIPTION: An ASCII art diagram representing a bridge or triangular structure created with text characters. The drawing uses various ASCII characters including slashes, backslashes, vertical bars, and underscores to create a visual representation.\nSOURCE: https://github.com/istio/istio/blob/master/pkg/art/istio-ascii.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n        |\\          \n        | \\         \n        |  \\        \n        |   \\       \n      /||    \\      \n     / ||     \\     \n    /  ||      \\    \n   /   ||       \\   \n  /    ||        \\  \n /     ||         \\ \n/______||__________\\\n____________________\n  \\__       _____/  \n     \\_____/        \n```\n\n----------------------------------------\n\nTITLE: Mounting Egress Gateway Certificates in Istio YAML Configuration\nDESCRIPTION: This YAML snippet defines the mount path and name for egress gateway certificates in an Istio configuration. It specifies where the certificate files should be mounted within the container filesystem.\nSOURCE: https://github.com/istio/istio/blob/master/operator/cmd/mesh/testdata/profile-dump/output/list_path.txt#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n[0].mountPath=\"/etc/istio/egressgateway-certs\"\n[0].name=\"egressgateway-certs\"\n```\n\n----------------------------------------\n\nTITLE: Conditional Next Steps Based on Istio Profile in Go Templates\nDESCRIPTION: Displays different next steps and documentation links based on the selected Istio profile. Provides specific guidance for the 'ambient' profile versus other profiles.\nSOURCE: https://github.com/istio/istio/blob/master/manifests/charts/istio-control/istio-discovery/templates/NOTES.txt#2025-04-23_snippet_3\n\nLANGUAGE: go-template\nCODE:\n```\nNext steps:\n{{- $profile := default \"\" .Values.profile }}\n{{- if (eq $profile \"ambient\") }}\n  * Get started with ambient: https://istio.io/latest/docs/ops/ambient/getting-started/\n  * Review ambient's architecture: https://istio.io/latest/docs/ops/ambient/architecture/\n{{- else }}\n  * Deploy a Gateway: https://istio.io/latest/docs/setup/additional-setup/gateway/\n  * Try out our tasks to get started on common configurations:\n    * https://istio.io/latest/docs/tasks/traffic-management\n    * https://istio.io/latest/docs/tasks/security/\n    * https://istio.io/latest/docs/tasks/policy-enforcement/\n{{- end }}\n  * Review the list of actively supported releases, CVE publications and our hardening guide:\n    * https://istio.io/latest/docs/releases/supported-releases/\n    * https://istio.io/latest/news/security/\n    * https://istio.io/latest/docs/ops/best-practices/security/\n\nFor further documentation see https://istio.io website\n```\n\n----------------------------------------\n\nTITLE: Configuring Active Loggers for Istio Components\nDESCRIPTION: This YAML configuration defines the active loggers for different Istio components and sets their logging levels. All loggers are set to the 'warning' level, which means only warning and higher severity messages will be logged.\nSOURCE: https://github.com/istio/istio/blob/master/istioctl/pkg/writer/envoy/logging/testdata/logging.txt#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nactive loggers:\n  admin: warning\n  aws: warning\n  assert: warning\n  backtrace: warning\n  client: warning\n  config: warning\n  connection: warning\n  dubbo: warning\n  file: warning\n  filter: warning\n  forward_proxy: warning\n  grpc: warning\n  hc: warning\n  health_checker: warning\n  http: warning\n  http2: warning\n  hystrix: warning\n  init: warning\n  io: warning\n  jwt: warning\n  kafka: warning\n  lua: warning\n  main: warning\n  misc: warning\n  mongo: warning\n  quic: warning\n  pool: warning\n  rbac: warning\n  redis: warning\n  router: warning\n  runtime: warning\n  stats: warning\n  secret: warning\n  tap: warning\n  testing: warning\n  thrift: warning\n  tracing: warning\n  upstream: warning\n  udp: warning\n  wasm: warning\n```\n\n----------------------------------------\n\nTITLE: Defining Dependencies Dictionary for Deprecated Configuration in Go Templates\nDESCRIPTION: Creates a dictionary mapping deprecated Istio configuration parameters to their recommended replacements. This template code is used to generate warnings when deprecated configurations are detected in the installation values.\nSOURCE: https://github.com/istio/istio/blob/master/manifests/charts/istio-control/istio-discovery/templates/NOTES.txt#2025-04-23_snippet_0\n\nLANGUAGE: go-template\nCODE:\n```\n{{-\n  $deps := dict\n    \"global.outboundTrafficPolicy\" \"meshConfig.outboundTrafficPolicy\"\n    \"global.certificates\" \"meshConfig.certificates\"\n    \"global.localityLbSetting\" \"meshConfig.localityLbSetting\"\n    \"global.policyCheckFailOpen\" \"meshConfig.policyCheckFailOpen\"\n    \"global.enableTracing\" \"meshConfig.enableTracing\"\n    \"global.proxy.accessLogFormat\" \"meshConfig.accessLogFormat\"\n    \"global.proxy.accessLogFile\" \"meshConfig.accessLogFile\"\n    \"global.proxy.concurrency\" \"meshConfig.defaultConfig.concurrency\"\n    \"global.proxy.envoyAccessLogService\" \"meshConfig.defaultConfig.envoyAccessLogService\"\n    \"global.proxy.envoyAccessLogService.enabled\" \"meshConfig.enableEnvoyAccessLogService\"\n    \"global.proxy.envoyMetricsService\" \"meshConfig.defaultConfig.envoyMetricsService\"\n    \"global.proxy.protocolDetectionTimeout\" \"meshConfig.protocolDetectionTimeout\"\n    \"global.proxy.holdApplicationUntilProxyStarts\" \"meshConfig.defaultConfig.holdApplicationUntilProxyStarts\"\n    \"pilot.ingress\" \"meshConfig.ingressService, meshConfig.ingressControllerMode, and meshConfig.ingressClass\"\n    \"global.mtls.enabled\" \"the PeerAuthentication resource\"\n    \"global.mtls.auto\" \"meshConfig.enableAutoMtls\"\n    \"global.tracer.lightstep.address\" \"meshConfig.defaultConfig.tracing.lightstep.address\"\n    \"global.tracer.lightstep.accessToken\" \"meshConfig.defaultConfig.tracing.lightstep.accessToken\"\n    \"global.tracer.zipkin.address\" \"meshConfig.defaultConfig.tracing.zipkin.address\"\n    \"global.tracer.datadog.address\" \"meshConfig.defaultConfig.tracing.datadog.address\"\n    \"global.meshExpansion.enabled\" \"Gateway and other Istio networking resources, such as in samples/multicluster/\"\n    \"istiocoredns.enabled\" \"the in-proxy DNS capturing (ISTIO_META_DNS_CAPTURE)\"\n}}\n```\n\n----------------------------------------\n\nTITLE: Setting Istio Environment Variables for Custom Images in Bash\nDESCRIPTION: Sets environment variables for custom Istio Docker images, including hub, tag, and Google Storage bucket.\nSOURCE: https://github.com/istio/istio/blob/master/tests/integration/GKE.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nexport HUB=myname\nexport TAG=latest\nexport GS_BUCKET=mybucket\n```\n\n----------------------------------------\n\nTITLE: Querying GKE Kubelet Logs with Stackdriver in Console\nDESCRIPTION: This command uses gcloud to read the last 10 kubelet logs containing 'cmdAdd' in the message. It filters logs from k8s_node resources and formats the output as JSON.\nSOURCE: https://github.com/istio/istio/blob/master/cni/README.md#2025-04-23_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ gcloud logging read \"resource.type=k8s_node AND jsonPayload.SYSLOG_IDENTIFIER=kubelet AND jsonPayload.MESSAGE:cmdAdd\" --limit 10 --format json\n```\n\n----------------------------------------\n\nTITLE: Creating CNI Daemonset Manifest\nDESCRIPTION: YAML configuration to generate a CNI Daemonset manifest for Istio. This uses an empty profile, enables only the CNI component, and sets it to run in the kube-system namespace.\nSOURCE: https://github.com/istio/istio/blob/master/tests/integration/pilot/testdata/upgrade/README.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: install.istio.io/v1alpha1\nkind: IstioOperator\nspec:\n  hub: gcr.io/istio-release\n  profile: empty\n  components:\n    cni:\n      enabled: true\n      namespace: kube-system\n```\n\n----------------------------------------\n\nTITLE: Cherry-Pick Command for Istio Releases\nDESCRIPTION: Instructions for triggering the istio-testing bot to perform automated cherry-picks to release branches using PR comments. This shows the specific command syntax for backporting changes.\nSOURCE: https://github.com/istio/istio/blob/master/RELEASE_BRANCHES.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n/cherry-pick release-X.XX\n```\n\n----------------------------------------\n\nTITLE: Creating Revisioned IstioOperator for Installation\nDESCRIPTION: YAML configuration to generate a revisioned IstioOperator manifest for a specific Istio version. This configuration disables the base component, enables the pilot component, disables the ingressGateway, and sets resource requests for the proxy.\nSOURCE: https://github.com/istio/istio/blob/master/tests/integration/pilot/testdata/upgrade/README.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: install.istio.io/v1alpha1\nkind: IstioOperator\nspec:\n  hub: gcr.io/istio-release\n  revision: 1-x-y\n  components:\n    base:\n      enabled: false\n    pilot:\n      enabled: true\n    ingressGateways:\n      - name: istio-ingressgateway\n        enabled: false\n\n  values:\n    global:\n      proxy:\n        resources:\n          requests:\n            cpu: 10m\n            memory: 40m\n```\n\n----------------------------------------\n\nTITLE: Generating ECC Client Certificate Signed by Root Certificate for Istio Tests\nDESCRIPTION: Command to generate an ECC client certificate signed by a previously created root certificate. The command uses the ECDSA signature algorithm and creates a certificate for the 'watt' service account name (SAN).\nSOURCE: https://github.com/istio/istio/blob/master/security/pkg/pki/testdata/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngo run main.go -ec-sig-alg ECDSA -san watt -signer-cert ../../pkg/pki/testdata/ec-root-cert.pem -signer-priv ../../pkg/pki/testdata/ec-root-key.pem -mode signer\n```\n\n----------------------------------------\n\nTITLE: Creating a Monitor in Golang\nDESCRIPTION: This snippet demonstrates how to create a monitor by providing a crd.Controller, polling interval, and a function that returns []*model.Config.\nSOURCE: https://github.com/istio/istio/blob/master/pilot/pkg/config/monitor/README.md#2025-04-23_snippet_0\n\nLANGUAGE: golang\nCODE:\n```\nmonitor := file.NewMonitor(\n    controller,      // The crd controller holding the store and event handlers\n    1*time.Second,   // How quickly the monitor requests new snapshots\n    getSnapshotFunc) // The function used to acquire new config\n```"
  }
]