[
  {
    "owner": "litespeedtech",
    "repo": "openlitespeed",
    "content": "TITLE: Initializing CMake Project for OpenLiteSpeed\nDESCRIPTION: Sets up the CMake project for OpenLiteSpeed, including version, module includes, and global build settings. It also defines platform-specific options and optional module builds.\nSOURCE: https://github.com/litespeedtech/openlitespeed/blob/master/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.0)\nset( CMAKE_EXPORT_COMPILE_COMMANDS ON)\n\nProject(openlitespeed VERSION 1.8.3)\nINCLUDE( ${PROJECT_SOURCE_DIR}/CMakeModules/common.cmake)\nINCLUDE(GNUInstallDirs)\n\nSET(CMAKE_INCLUDE_CURRENT_DIR ON)\nset(CMAKE_SKIP_BUILD_RPATH TRUE)\n\nSET(LSQUIC_SERVER_MODE 1)\n\nif (CMAKE_HOST_SYSTEM_NAME MATCHES \"Linux\" AND \n    CMAKE_SYSTEM_PROCESSOR MATCHES \"x86_64\")\n    if (${ALPINE})\n        message(\"Alpine X64\")\n    else()\n        message(\"Set LINUX_X64\")\n        set (LINUX_X64 ON)\n    endif()\nendif()\nif (CMAKE_HOST_SYSTEM_NAME MATCHES \"Darwin\")\n    set (NOT_MACOS OFF)\nelse()\n    set (NOT_MACOS ON)\nendif()\nOPTION(MOD_PAGESPEED \"Whether pagespeed should be built\" ${LINUX_X64})\nOPTION(MOD_SECURITY \"Whether mod_security should be built\" ${NOT_MACOS})\nOPTION(MOD_LUA \"Whether Lua should be built\" ${LINUX_X64})\nOPTION(MOD_REQPARSER \"Whether modreqparser should be built\" OFF)\nOPTION(MOD_INSPECTOR \"Whether modinspector should be built\" OFF)\nOPTION(MOD_UPLOADPROGRESS \"Whether uploadprogress should be built\" OFF)\nOPTION(MOD_LSPHP \"Whether mod_lsphp should be built\" OFF)\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific Library Configuration\nDESCRIPTION: Configures platform-specific libraries based on the system processor and host system name. For ARM64 architectures, it includes the atomic library, and for FreeBSD vs other systems, it selects the appropriate C++ standard library.\nSOURCE: https://github.com/litespeedtech/openlitespeed/blob/master/src/CMakeLists.txt#2025-04-17_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nif(${CMAKE_SYSTEM_PROCESSOR} STREQUAL \"aarch64\")\n  set(LIBATOMIC atomic)\nendif()\n\nif(${CMAKE_HOST_SYSTEM_NAME} STREQUAL \"FreeBSD\")\n  set(STDCXX libc++.a)\nelse()\n  set(STDCXX libstdc++.a)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating OpenLiteSpeed Executable\nDESCRIPTION: Defines the main OpenLiteSpeed executable target by combining the main source files with the unit test source files.\nSOURCE: https://github.com/litespeedtech/openlitespeed/blob/master/src/CMakeLists.txt#2025-04-17_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(openlitespeed ${openlitespeed_SRCS}\n    ${unittest_STAT_SRCS}\n)\n```\n\n----------------------------------------\n\nTITLE: Installing the OpenLiteSpeed Executable\nDESCRIPTION: Configures the installation of the OpenLiteSpeed executable to the bin directory in the target installation path.\nSOURCE: https://github.com/litespeedtech/openlitespeed/blob/master/src/CMakeLists.txt#2025-04-17_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(TARGETS openlitespeed DESTINATION bin)\n```\n\n----------------------------------------\n\nTITLE: Creating Shared Memory Utility Executables\nDESCRIPTION: Defines two utility executables for shared memory operations: ls_shmstat for showing shared memory statistics and ls_shmhashstat for shared memory hash statistics.\nSOURCE: https://github.com/litespeedtech/openlitespeed/blob/master/src/CMakeLists.txt#2025-04-17_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(ls_shmstat\n    shm/ls_shmstat.cpp\n)\n\nadd_executable(ls_shmhashstat\n    shm/ls_shmhashstat.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Compiler Flags and Definitions for OpenLiteSpeed\nDESCRIPTION: Configures compiler flags for different compilers (GCC, Clang) and sets various build definitions. It also includes platform-specific settings for Linux, such as io_uring and Linux AIO support.\nSOURCE: https://github.com/litespeedtech/openlitespeed/blob/master/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(MY_CMAKE_FLAGS  \"${MY_CMAKE_FLAGS} -Wall -Wextra -Wno-unused-parameter -Wno-unused-function\")\n\nif (CMAKE_CXX_COMPILER_ID STREQUAL \"GNU\")\n    set(MY_CMAKE_FLAGS \"${MY_CMAKE_FLAGS} -Wno-ignored-qualifiers\")\n    set(MY_CMAKE_FLAGS \"${MY_CMAKE_FLAGS} -Wno-unused-result\")\n    set(MY_CMAKE_FLAGS \"${MY_CMAKE_FLAGS} -Wno-format-truncation\")\nendif()\n\nif(OPT_SSE4)\nset(MY_CMAKE_FLAGS  \"${MY_CMAKE_FLAGS} -march=corei7 -maes -mpclmul -mpopcnt\")\nendif(OPT_SSE4)\n\nset(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} ${MY_CMAKE_FLAGS}\")\nset(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} ${MY_CMAKE_FLAGS}\")\n\nadd_definitions(-DDISABLE_OBJ_POOL)\nadd_definitions(-D_GLIBCXX_USE_CXX11_ABI=0)\nadd_definitions(-DH3_ALPN=\"\\\\x02h3\\\\x05h3-29\")\n\nif (${CMAKE_HOST_SYSTEM_NAME} MATCHES \"Linux\")\n    set(COMPILE_IO_URING\n        true)\n    add_definitions(-DIOURING)\n    set(COMPILE_LINUX_AIO\n        true)\n    add_definitions(-DLS_AIO_USE_LINUX_AIO)\n    set(LINUX_AIO_LIB\n        aio)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake and Compiler Flags for OpenLiteSpeed Module\nDESCRIPTION: Sets the minimum required CMake version and configures compiler flags for debug and release builds. It adds the -Wall flag to both configurations.\nSOURCE: https://github.com/litespeedtech/openlitespeed/blob/master/src/modules/modreqparser/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.0)\n\nset(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} -Wall\")\nset(CMAKE_CSS_FLAGS_RELEASE \"${CMAKE_CXX_FLAGS_RELEASE} -Wall\")\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Version and Machine Architecture Detection for PageSpeed Module\nDESCRIPTION: Configures CMake minimum version requirement and detects the machine architecture to determine the correct platform directory for PageSpeed Optimization Library (PSOL) includes and libraries.\nSOURCE: https://github.com/litespeedtech/openlitespeed/blob/master/src/modules/pagespeed/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.0)\n\n#set(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} -Wall -O2 -g\")\n#set(CMAKE_CSS_FLAGS_RELEASE \"${CMAKE_CXX_FLAGS_RELEASE} -Wall -O2 -g\")\n\n#execute_process( COMMAND ${PROJECT_SOURCE_DIR}/src/modules/pagespeed/dlpsol.sh )\n\nexecute_process( COMMAND uname -m\n                OUTPUT_VARIABLE  MACHINE_TYPE )\nstring(STRIP ${MACHINE_TYPE} MACHINE_TYPE)\n\nif( \"${MACHINE_TYPE}\" STREQUAL \"x86_64\" )\n    set(OSVERSION \"x64\")\nelse()\n    set(OSVERSION \"ia32\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building ModSecurity Module for OpenLiteSpeed with CMake\nDESCRIPTION: This CMake script defines the build configuration for the ModSecurity module in OpenLiteSpeed. It sets C++17 standard, includes ModSecurity headers, configures large file support, handles compiler warnings, and specifies the required libraries to link against. The script builds a shared library named mod_security without the default 'lib' prefix.\nSOURCE: https://github.com/litespeedtech/openlitespeed/blob/master/src/modules/modsecurity-ls/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.0)\n\nset(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -std=gnu++17 -Wall\")\n\ninclude_directories(${PROJECT_SOURCE_DIR}/../third-party/ModSecurity/headers/)\n\nexecute_process( COMMAND getconf LFS_CFLAGS\n            OUTPUT_VARIABLE  LFS_CFLAGS )\n\nadd_definitions( ${LFS_CFLAGS} )\n\ninclude(CheckCCompilerFlag)\nset(EXTRA_FLAGS \"\")\ncheck_c_compiler_flag(-Wno-unused-function HAS_NO_UNUSED_FUNCTION)\nif(HAS_NO_UNUSED_FUNCTION)\n    # Silence warnings about unused modsecurity::intervention::clear() et al:\n    set(EXTRA_FLAGS \"${EXTRA_FLAGS} -Wno-unused-function\")\nendif()\ncheck_c_compiler_flag(-Wno-sign-compare HAS_NO_SIGN_COMPARE)\nif(HAS_NO_SIGN_COMPARE)\n    # Silence warnings in rules.h:\n    set(EXTRA_FLAGS \"${EXTRA_FLAGS} -Wno-sign-compare\")\nendif()\nset_source_files_properties(mod_security.cpp PROPERTIES COMPILE_FLAGS ${EXTRA_FLAGS})\n\nadd_library(mod_security SHARED\n    mod_security.cpp\n)\n\n\ntarget_link_libraries(mod_security libmodsecurity.a\n    -nodefaultlibs libstdc++.a\n    pthread rt -llmdb -lxml2 -lcurl -lssl -lcrypto -lz -lpcre -lyajl\n    ${LIBSAN} crypt m gcc_eh c c_nonshared gcc)\n\nset_target_properties(mod_security PROPERTIES PREFIX \"\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Third-Party Libraries for OpenLiteSpeed\nDESCRIPTION: Sets up additional libraries and their corresponding definitions, including BoringSSL, Brotli compression, IP2Location, and IPTOGEO2. It also configures git submodules and generates the config.h file.\nSOURCE: https://github.com/litespeedtech/openlitespeed/blob/master/CMakeLists.txt#2025-04-17_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(BSSL_ADD_LIB  libdecrepit.a)\nset(BROTLI_ADD_LIB  libbrotlidec-static.a libbrotlienc-static.a libbrotlicommon-static.a)\nadd_definitions(-DUSE_BROTLI)\nset(IP2LOC_ADD_LIB  libIP2Location.a)\nadd_definitions(-DUSE_IP2LOCATION)\nset(MMDB_LIB  maxminddb)\nadd_definitions(-DENABLE_IPTOGEO2)\n\nadd_definitions(-DTEST_OUTPUT_PLAIN_CONF)\nadd_definitions(-DDEBUG_POOL)\nadd_definitions(-DOPENSSL_NO_CXX)\n\nexecute_process( COMMAND getconf LFS_CFLAGS\n    OUTPUT_VARIABLE  LFS_CFLAGS )\n\nadd_definitions( ${LFS_CFLAGS} )\nadd_definitions(-DUSE_UDNS)\n\nfind_package(Git QUIET)\nif (GIT_FOUND AND EXISTS \"${PROJECT_SOURCE_DIR}/.git\")\n  option(GIT_SUBMODULE \"Check submodules during build\" ON)\n  if (GIT_SUBMODULE)\n    execute_process(COMMAND ${GIT_EXECUTABLE} submodule update --init --recursive --force\n                    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}\n                    RESULT_VARIABLE GIT_SUBMOD_RESULT)\n    if(NOT GIT_SUBMOD_RESULT EQUAL \"0\")\n      message(FATAL_ERROR \"git submodule update --init failed with ${GIT_SUBMOD_RESULT}, please checkout submodules\")\n    endif()\n  endif()\nendif()\n\nconfigure_file(${CMAKE_CURRENT_SOURCE_DIR}/src/config.h.cmake ${CMAKE_CURRENT_BINARY_DIR}/src/config.h)\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenLiteSpeed EDIO Module with CMake\nDESCRIPTION: Defines the build configuration for the OpenLiteSpeed EDIO (Event-Driven I/O) static library. It sets up requirements, includes common configuration, conditionally configures io_uring support, specifies source files, and handles conditional compilation based on feature flags.\nSOURCE: https://github.com/litespeedtech/openlitespeed/blob/master/src/edio/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.0)\nINCLUDE( ${PROJECT_SOURCE_DIR}/CMakeModules/common.cmake)\n\nif(${COMPILE_IO_URING})\n    add_definitions(-DOLS_IOURING_DEBUG)\n    include_directories(BEFORE SYSTEM liburing liburing/include)\nendif()\n\nSET(edio_STAT_SRCS\n#    eventnotifier.cpp\n   reactorindex.cpp\n   fdindex.cpp\n   kqueuer.cpp\n   epoll.cpp\n   rtsigio.cpp\n   ediostream.cpp\n   outputbuf.cpp\n   cacheos.cpp\n   inputstream.cpp\n   bufferedos.cpp\n   outputstream.cpp\n   flowcontrol.cpp\n   iochain.cpp\n   multiplexerfactory.cpp\n   eventreactor.cpp\n   poller.cpp\n   multiplexer.cpp\n   pollfdreactor.cpp\n   lookupfd.cpp\n   devpoller.cpp\n   sigeventdispatcher.cpp\n   aiooutputstream.cpp\n   aiosendfile.cpp\n   eventnotifier.cpp\n   eventprocessor.cpp\n   evtcbque.cpp\n   ssledstream.cpp\n   lsaioreq.cpp\n   lsposixaioreq.cpp\n)\n\nif(${COMPILE_IO_URING})\nLIST(APPEND\n   edio_STAT_SRCS\n   iouring.cpp\n   liburing/queue.c\n   liburing/register.c\n   liburing/setup.c\n   liburing/syscall.c\n   lsiouringreq.cpp\n)\nendif()\nif(${COMPILE_IO_URING} OR ${COMPILE_LINUX_AIO})\nLIST(APPEND\n   edio_STAT_SRCS\n   linuxaio.cpp\n   lslinuxaioreq.cpp\n)\nendif()\n\nadd_library(edio STATIC ${edio_STAT_SRCS})\n```\n\n----------------------------------------\n\nTITLE: Creating HTTP Static Library in OpenLiteSpeed\nDESCRIPTION: Creates a static library named 'http' from all the source files defined in http_STAT_SRCS variable. This library contains all the HTTP functionality needed by the OpenLiteSpeed web server.\nSOURCE: https://github.com/litespeedtech/openlitespeed/blob/master/src/http/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(http STATIC ${http_STAT_SRCS})\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenLiteSpeed Modules with CMake\nDESCRIPTION: Defines the build configuration for OpenLiteSpeed server modules. The file always includes the core modules (modgzip and cache) and conditionally compiles additional modules based on configuration flags such as MOD_REQPARSER, MOD_PAGESPEED, MOD_LUA, and others.\nSOURCE: https://github.com/litespeedtech/openlitespeed/blob/master/src/modules/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.0)\n\nadd_subdirectory(modgzip)\nadd_subdirectory(cache)\n\nif (MOD_REQPARSER)\n    message(\"Make mod_reqparser\")\n    add_subdirectory(modreqparser)\nendif()\n\nif (MOD_PAGESPEED)\n    message(\"Make mod_pagespeed\")\n    add_subdirectory(pagespeed)\nendif()\n\nif (MOD_LUA)\n    message(\"Make mod_lua\")\n    add_subdirectory(lua)\nendif()\n\nif (MOD_INSPECTOR)\n    message(\"Make mod_inspector\")\n    add_subdirectory(modinspector)\nendif()\n\nif (MOD_UPLOADPROGRESS)\n    message(\"Make UploadProgress\")\n    add_subdirectory(uploadprogress)\nendif()\n\nif (MOD_LSPHP)\n    message(\"Make mod_lsphp\")\n    add_subdirectory(mod_lsphp)\nendif()\n\nif (MOD_SECURITY)\n    message(\"Make mod_security\")\n    add_subdirectory(modsecurity-ls)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Main Static Library Source Files for OpenLiteSpeed\nDESCRIPTION: Defines the list of source files to be compiled into the 'main' static library component of OpenLiteSpeed. Includes core server functionality files and references an SSL context configuration from another directory.\nSOURCE: https://github.com/litespeedtech/openlitespeed/blob/master/src/main/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nSET(main_STAT_SRCS\n   mainserverconfig.cpp\n   lshttpdmain.cpp\n   serverinfo.cpp\n   httpconfigloader.cpp\n   httpserver.cpp\n   plainconf.cpp\n   configctx.cpp\n   zconfclient.cpp\n   zconfmanager.cpp\n   ../sslpp/sslcontextconfig.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for OpenLiteSpeed PHP Module\nDESCRIPTION: This CMake configuration file sets up the build environment for the mod_lsphp shared library. It defines compiler flags for debug and release builds, includes necessary directories, adds Large File Support (LFS) capabilities, and specifies build properties for the PHP module to be used with OpenLiteSpeed web server.\nSOURCE: https://github.com/litespeedtech/openlitespeed/blob/master/src/modules/mod_lsphp/src/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.0)\n\nset(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} -Wall\")\nset(CMAKE_CSS_FLAGS_RELEASE \"${CMAKE_CXX_FLAGS_RELEASE} -Wall\")\n\ninclude_directories(./;../;../../;)\n\nexecute_process( COMMAND getconf LFS_CFLAGS\n            OUTPUT_VARIABLE  LFS_CFLAGS )\n\nadd_definitions( ${LFS_CFLAGS} )\n\nadd_library(mod_lsphp SHARED\n            mod_lsphp.c\n)\nset_target_properties(mod_lsphp PROPERTIES PREFIX \"\")\n```\n\n----------------------------------------\n\nTITLE: Creating the Main Static Library Target for OpenLiteSpeed\nDESCRIPTION: Adds a new static library target named 'main' to the build system, using the previously defined source files list.\nSOURCE: https://github.com/litespeedtech/openlitespeed/blob/master/src/main/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(main STATIC ${main_STAT_SRCS})\n```\n\n----------------------------------------\n\nTITLE: Defining Library Dependencies\nDESCRIPTION: Sets up the complete list of library dependencies for the OpenLiteSpeed server. The comment notes that the order of dependencies is critical as components depend on libraries listed after them in the list.\nSOURCE: https://github.com/litespeedtech/openlitespeed/blob/master/src/CMakeLists.txt#2025-04-17_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\n# NOTE: When creating a new directory, the order it is placed in this list\n# matters.  Everything listed depends on things listed AFTER it, though\n# it won't depend on everything after it.  Inter-dependency may be fixed\n# by listing one directory twice, though this isn't recommended.\n# So for example, if edio depends on your new directory, your directory\n# should be listed AFTER edio.  PLEASE TRY TO KEEP THIS NEAT!\nSET( litespeedlib\n    ${ASAN_LIB} cache modgzip lsiapi main http spdy ssi http\n    registry cgi fcgi jk extensions lsapi proxy\n    socket sslpp lsshm thread log4cxx adns \n    quic h2 lsquic -Wl,--whole-archive util lsr -Wl,--no-whole-archive ${MMDB_LIB}\n    edio libssl.a libcrypto.a ${BSSL_ADD_LIB} ${libUnitTest}\n    libz.a libpcre.a libexpat.a libxml2.a\n    ${IP2LOC_ADD_LIB} ${BROTLI_ADD_LIB} udns ${LINUX_AIO_LIB} \n    -nodefaultlibs pthread rt ${LIBSAN} ${LIBATOMIC} \n    ${CMAKE_DL_LIBS} ${STDCXX} crypt bcrypt m gcc_eh c c_nonshared gcc\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for OpenLiteSpeed Utility Library\nDESCRIPTION: Lists all the source files that will be compiled into the OpenLiteSpeed utility static library. This includes various utility classes and functions for HTTP handling, data structures, compression, and system operations.\nSOURCE: https://github.com/litespeedtech/openlitespeed/blob/master/src/util/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nSET(util_STAT_SRCS\n   httpfetchdriver.cpp\n   httpfetch.cpp\n   linkobjpool.cpp\n   pidfile.cpp\n   hashdatacache.cpp\n   keydata.cpp\n   tlinklist.cpp\n   rlimits.cpp\n   duplicable.cpp\n   gfactory.cpp\n   fdpass.cpp\n   pcregex.cpp\n   autostr.cpp\n   staticobj.cpp\n   pool.cpp\n   hashstringmap.cpp\n   ghash.cpp\n   emailsender.cpp\n   guardedapp.cpp\n   crashguard.cpp\n   iconnection.cpp\n   dlinkqueue.cpp\n   connpool.cpp\n   compressor.cpp\n   gzipbuf.cpp\n   brotlibuf.cpp\n   vmembuf.cpp\n   blockbuf.cpp\n   stringlist.cpp\n   semaphore.cpp\n   refcounter.cpp\n   gpointerlist.cpp\n   linkedobj.cpp\n   objpool.cpp\n   gpath.cpp\n   poolalloc.cpp\n   env.cpp\n   xmlnode.cpp\n   iovec.cpp\n   accesscontrol.cpp\n   signalutil.cpp\n   loopbuf.cpp\n   stringtool.cpp\n   tsingleton.cpp\n   pcutil.cpp\n   daemonize.cpp\n   configentry.cpp\n   datetime.cpp\n   resourcepool.cpp\n   linkedqueue.cpp\n   httputil.cpp\n   radixtree.cpp\n   misc/profiletime.cpp\n   sysinfo/partitioninfo.cpp\n   sysinfo/nicdetect.cpp\n   sysinfo/systeminfo.cpp\n   ni_fio.c\n   filtermatch.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring PSOL Version and Include Directories for PageSpeed Module\nDESCRIPTION: Sets the PageSpeed Optimization Library version and configures all the necessary include directories required for building the module. These include paths to various third-party libraries that PSOL depends on, with architecture-specific paths.\nSOURCE: https://github.com/litespeedtech/openlitespeed/blob/master/src/modules/pagespeed/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(PSOL_VER 1.11.33.4)\nset(PSOL_LIB ${PROJECT_SOURCE_DIR}/../third-party/psol-${PSOL_VER})\n\ninclude_directories(\n                ${PSOL_LIB}/include\n                ${PSOL_LIB}/include/url\n                ${PSOL_LIB}/include/third_party/apr/src/include\n                ${PSOL_LIB}/include/third_party/chromium/src\n\t\t${PSOL_LIB}/include/third_party/pagespeed\n                ${PSOL_LIB}/include/third_party/protobuf/src/src\n                ${PSOL_LIB}/include/third_party/google-sparsehash/src\n                ${PSOL_LIB}/include/third_party/re2/src\n                ${PSOL_LIB}/include/out/Debug/obj/gen/protoc_out/instaweb\n                ${PSOL_LIB}/include/third_party/apr/gen/arch/linux/${OSVERSION}/include\n                ${PSOL_LIB}/include/third_party/css_parser/src\n                ${PSOL_LIB}/include/third_party/google-sparsehash/gen/arch/linux/${OSVERSION}/include/)\n```\n\n----------------------------------------\n\nTITLE: Adding OpenLiteSpeed Project Subdirectories\nDESCRIPTION: Adds all the project component subdirectories to the build. Each subdirectory contains a separate module of the OpenLiteSpeed server with its own CMakeLists.txt file.\nSOURCE: https://github.com/litespeedtech/openlitespeed/blob/master/src/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(adns)\nadd_subdirectory(edio)\nadd_subdirectory(extensions)\nadd_subdirectory(http)\nadd_subdirectory(liblsquic)\nadd_subdirectory(log4cxx)\nadd_subdirectory(lsiapi)\nadd_subdirectory(lsr)\nadd_subdirectory(main)\nadd_subdirectory(modules)\nadd_subdirectory(quic)\nadd_subdirectory(shm)\nadd_subdirectory(socket)\nadd_subdirectory(spdy)\nadd_subdirectory(sslpp)\nadd_subdirectory(ssi)\nadd_subdirectory(thread)\nadd_subdirectory(util)\nadd_subdirectory(h2)\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building H2 Static Library for OpenLiteSpeed Web Server\nDESCRIPTION: This CMake script configures the build process for the HTTP/2 module in OpenLiteSpeed. It sets the minimum required CMake version to 3.0, defines a preprocessor macro for xxhash header location, lists all source files for the H2 module including the HTTP/2 connection and stream implementations, and creates a static library named 'h2'.\nSOURCE: https://github.com/litespeedtech/openlitespeed/blob/master/src/h2/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.0)\n\nadd_definitions(-DXXH_HEADER_NAME=\"lsr/xxhash.h\")\n\nSET(h2_STAT_SRCS\nh2connection.cpp\nh2protocol.cpp\nh2stream.cpp\nh2streampool.cpp\nunpackedheaders.cpp\nh2connbase.cpp\nh2streambase.cpp\n../lshpack/lshpack.c\n)\n\nadd_library(h2 STATIC ${h2_STAT_SRCS})\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenLiteSpeed Lua Module Build with CMake\nDESCRIPTION: The configuration script sets up the build environment for the OpenLiteSpeed Lua module. It defines include paths for LuaJIT headers, sets compiler flags for warnings, specifies source files for the module, and configures linking against the LuaJIT library and other system dependencies.\nSOURCE: https://github.com/litespeedtech/openlitespeed/blob/master/src/modules/lua/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.0)\nINCLUDE( ${PROJECT_SOURCE_DIR}/CMakeModules/common.cmake)\n\nset(LUAJITDIR \"${PROJECT_SOURCE_DIR}/../third-party/include/luajit-2.1/\")\ninclude_directories(${LUAJITDIR})\n\nset(CMAKE_VERBOSE_MAKEFILE ON)\nset(MY_CMAKE_WARNING_FLAGS  \" -Wall -Wextra -Wno-unused-parameter\" )\nset(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} ${MY_CMAKE_WARNING_FLAGS}\" )\n#set(CMAKE_C_FLAGS \" -Wall \" )\n#set(CMAKE_C_FLAGS_DEBUG \"${CMAKE_C_FLAGS_DEBUG} ${MY_CMAKE_WARNING_FLAGS}\" )\nset(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS}  ${MY_CMAKE_WARNING_FLAGS}\" )\nset(LUAJITHEADERS ${LUAJITDIR}/luajit.h)\n\nSET(lua_STAT_SRCS\n    lsluaengine.cpp\n    edluastream.cpp\n    lsluaapi.cpp\n    lsluasession.cpp\n    lsluaheader.cpp\n    lsluashared.cpp\n    lsluaregex.cpp\n    modlua.cpp\n)\n\n\nadd_library(mod_lua MODULE ${lua_STAT_SRCS} ${LUAJITHEADERS})\ntarget_link_libraries(mod_lua libluajit.a\n    -nodefaultlibs libstdc++.a\n    pthread rt\n    ${LIBSAN} crypt m gcc_eh c c_nonshared gcc)\nset_target_properties(mod_lua PROPERTIES PREFIX \"\")\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenLiteSpeed Static Library in CMake\nDESCRIPTION: This snippet sets the minimum CMake version, defines the source files for the OpenLiteSpeed static library (lsr), and creates the library target. It includes various utility and core functionality source files.\nSOURCE: https://github.com/litespeedtech/openlitespeed/blob/master/src/lsr/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.0)\n\n########### next target ###############\n\nSET(lsr_STAT_SRCS \n   ls_aho.c\n   ls_base64.c\n   ls_buf.c\n   ls_confparser.c\n   ls_crc64.c\n   ls_dlinkq.c\n   ls_fileio.c\n   ls_hash.c\n   ls_lfqueue.c\n   ls_lfstack.c\n   ls_link.c\n   ls_llmq.c\n   ls_llxq.c\n   ls_lock.c\n   ls_loopbuf.c\n   ls_map.c\n   ls_md5.c\n   ls_mpscq.c\n   ls_objarray.c\n   ls_objpool.c\n   ls_pcreg.c\n   ls_pool.c\n   ls_ptrlist.c\n   ls_sha1.c\n   ls_shm.cpp\n   ls_stack.c\n   ls_str.c\n   ls_strlist.c\n   ls_strtool.c\n   ls_time.c\n   ls_tsstack.c\n   ls_xpool.c\n   xxhash.c\n)\n\nadd_library(lsr STATIC ${lsr_STAT_SRCS} )\n```\n\n----------------------------------------\n\nTITLE: Defining HTTP Module Source Files in OpenLiteSpeed\nDESCRIPTION: Lists all the C++ source files that make up the HTTP module of the OpenLiteSpeed web server. These files implement various HTTP functionalities including request handling, virtual hosting, authentication, caching, and more.\nSOURCE: https://github.com/litespeedtech/openlitespeed/blob/master/src/http/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nSET(http_STAT_SRCS\n   moduserdir.cpp\n   contextnode.cpp\n   phpconfig.cpp\n   pipeappender.cpp\n   awstats.cpp\n   rewriterulelist.cpp\n   throttlecontrol.cpp\n   rewriteengine.cpp\n   rewritemap.cpp\n   rewriterule.cpp\n   reqstats.cpp\n   hotlinkctrl.cpp\n   contextlist.cpp\n   urimatch.cpp\n   expiresctrl.cpp\n   stderrlogger.cpp\n   htauth.cpp\n   userdir.cpp\n   authuser.cpp\n   httplistenerlist.cpp\n   httpvhostlist.cpp\n   htpasswd.cpp\n   httphandler.cpp\n   httplogsource.cpp\n   accesslog.cpp\n   accesscache.cpp\n   clientinfo.cpp\n   clientcache.cpp\n   httprange.cpp\n   connlimitctrl.cpp\n   denieddir.cpp\n   httpserverconfig.cpp\n   httpextconnector.cpp\n   statusurlmap.cpp\n   contexttree.cpp\n   httpcgitool.cpp\n   httpsignals.cpp\n   handlertype.cpp\n   handlerfactory.cpp\n   staticfilecachedata.cpp\n   staticfilecache.cpp\n   cacheelement.cpp\n   httpcache.cpp\n   chunkoutputstream.cpp\n   chunkinputstream.cpp\n   httplog.cpp\n   httpmime.cpp\n   sendfileinfo.cpp\n   httpcontext.cpp\n   httpserverversion.cpp\n   vhostmap.cpp\n   eventdispatcher.cpp\n   staticfilehandler.cpp\n   reqhandler.cpp\n   httpvhost.cpp\n   httpresourcemanager.cpp\n   ntwkiolink.cpp\n   httpmethod.cpp\n   httpver.cpp\n   httpstatuscode.cpp\n   httpstatusline.cpp\n   httpheader.cpp\n   smartsettings.cpp\n   httplistener.cpp\n   httpresp.cpp\n   httpreq.cpp\n   httpsession.cpp\n   iptogeo2.cpp\n   iptoloc.cpp\n   moov.cpp\n   #requestvars.cpp\n   hiostream.cpp\n   hiohandlerfactory.cpp\n   hiochainstream.cpp\n   httprespheaders.cpp\n   l4handler.cpp\n   httpaiosendfile.cpp\n   serverprocessconfig.cpp\n   httpstats.cpp\n   reqparser.cpp\n   subrequest.cpp\n   recaptcha.cpp\n   expression.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building OpenLiteSpeed SSI Module with CMake\nDESCRIPTION: This CMake configuration sets up the build for the Server-Side Includes (SSI) module as a static library. It defines the minimum required CMake version (3.0), lists all source files needed for the SSI module including a dependency from the HTTP module, and creates the static library target.\nSOURCE: https://github.com/litespeedtech/openlitespeed/blob/master/src/ssi/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.0)\n\n\n########### next target ###############\n\nSET(ssi_STAT_SRCS\n   ssiengine.cpp\n   ssiconfig.cpp\n   ssiruntime.cpp\n   ssiscript.cpp\n   ../http/requestvars.cpp\n)\n\nadd_library(ssi STATIC ${ssi_STAT_SRCS})\n```\n\n----------------------------------------\n\nTITLE: Defining Unit Test Source Files\nDESCRIPTION: Sets up the comprehensive list of unit test source files organized by component, including tests for EDIO, HTTP, sockets, utilities, SPDY protocol, LSI API, and threading. These are included in the main build for testing purposes.\nSOURCE: https://github.com/litespeedtech/openlitespeed/blob/master/src/CMakeLists.txt#2025-04-17_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nSET(unittest_STAT_SRCS\n   ../test/edio/bufferedostest.cpp\n   ../test/edio/multiplexertest.cpp\n   ../test/extensions/fcgistartertest.cpp\n   ../test/http/expirestest.cpp\n   ../test/http/rewritetest.cpp\n   ../test/http/httprequestlinetest.cpp\n   ../test/http/httprangetest.cpp\n   ../test/http/denieddirtest.cpp\n   ../test/http/statusurlmaptest.cpp\n   ../test/http/contexttreetest.cpp\n   ../test/http/httpmimetest.cpp\n   ../test/http/httpcgitooltest.cpp\n   ../test/http/chunkostest.cpp\n   ../test/http/chunkistest.cpp\n   ../test/http/httplistenerstest.cpp\n   ../test/http/httpvhostlisttest.cpp\n   ../test/http/httpreqtest.cpp\n   ../test/http/httpreqheaderstest.cpp\n   ../test/http/httpbuftest.cpp\n   ../test/http/httpheadertest.cpp\n   ../test/http/datetimetest.cpp\n   ../test/http/reqparsertest.cpp\n   ../test/socket/hostinfotest.cpp\n   ../test/socket/tcpsockettest.cpp\n   ../test/socket/coresockettest.cpp\n   ../test/util/pcregextest.cpp\n   ../test/util/ghashtest.cpp\n   ../test/util/linkedobjtest.cpp\n   ../test/util/dlinkqueuetest.cpp\n   ../test/util/gzipbuftest.cpp\n   ../test/util/brotlibuftest.cpp\n   ../test/util/vmembuftest.cpp\n   ../test/util/gpathtest.cpp\n   ../test/util/poolalloctest.cpp\n   ../test/util/xmlnodetest.cpp\n   ../test/util/accesscontroltest.cpp\n   ../test/util/loopbuftest.cpp\n   ../test/util/logfiletest.cpp\n   ../test/util/stringmaptest.cpp\n   ../test/util/httpfetchtest.cpp\n   ../test/util/partitioninfotest.cpp\n   ../test/util/filtermatchtest.cpp\n   ../test/util/gmaptest.cpp\n   ../test/util/ahotest.cpp\n   ../test/util/stringtooltest.cpp\n   ../test/util/gpointerlisttest.cpp\n   ../test/util/objarraytest.cpp\n   ../test/util/objpooltest.cpp\n   ../test/util/radixtreetest.cpp\n   ../test/spdy/spdyzlibfiltertest.cpp\n   ../test/spdy/spdyconnectiontest.cpp\n   ../test/spdy/dummiostream.cpp\n   ../test/spdy/pushtest.cpp\n   ../test/lsiapi/moduledata.cpp\n   ../test/lsiapi/moduletimertest.cpp\n   ../test/lsiapi/lsiapihookstest.cpp\n   ../test/lsiapi/envhandler.cpp\n   ../test/lsiapi/moduleconf.cpp\n   ../test/lsr/ls_ahotest.cpp\n   ../test/lsr/ls_confparsertest.cpp\n   ../test/lsr/ls_base64test.cpp\n   ../test/lsr/ls_buftest.cpp\n   ../test/lsr/ls_dlinkqtest.cpp\n   ../test/lsr/ls_hashtest.cpp\n   ../test/lsr/ls_linktest.cpp\n   ../test/lsr/ls_loopbuftest.cpp\n   ../test/lsr/ls_maptest.cpp\n   ../test/lsr/ls_md5test.cpp\n   ../test/lsr/ls_objarraytest.cpp\n   ../test/lsr/ls_objpooltest.cpp\n   ../test/lsr/ls_pcregtest.cpp\n   ../test/lsr/ls_pooltest.cpp\n   ../test/lsr/ls_ptrlisttest.cpp\n   ../test/lsr/ls_sha1test.cpp\n   ../test/lsr/ls_strtest.cpp\n   ../test/lsr/ls_strlisttest.cpp\n   ../test/lsr/ls_strtooltest.cpp\n   ../test/lsr/ls_xpooltest.cpp\n   ../test/thread/pthreadworkqueuetest.cpp\n   ../test/thread/threadtest.cpp\n   ../test/thread/workcrewtest.cpp\n   ../test/shm/shmbaselrutest.cpp\n   ../test/shm/shmxtest.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building Socket Library in OpenLiteSpeed with CMake\nDESCRIPTION: This CMake script sets up the build configuration for the socket library component of OpenLiteSpeed. It includes common build settings from a separate module, defines all the source files that make up the socket library, and creates a static library target named 'socket'.\nSOURCE: https://github.com/litespeedtech/openlitespeed/blob/master/src/socket/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.0)\nINCLUDE( ${PROJECT_SOURCE_DIR}/CMakeModules/common.cmake)\n\n\nSET(socket_STAT_SRCS\n   reuseport.cpp\n   gsockaddr.cpp\n   hostinfo.cpp\n   tcpsockopt.cpp\n   tcpserversocket.cpp\n   tcpconnection.cpp\n   streamsocket.cpp\n   serversocket.cpp\n   coresocket.cpp\n)\n\nadd_library(socket STATIC ${socket_STAT_SRCS})\n```\n\n----------------------------------------\n\nTITLE: Creating PHP Module Build Target in CMake for OpenLiteSpeed\nDESCRIPTION: Defines a custom CMake target to build the PHP module for OpenLiteSpeed. The command passes environment variables like ASAN, TSAN and compiler settings to the build script, executed in the mod_lsphp directory.\nSOURCE: https://github.com/litespeedtech/openlitespeed/blob/master/src/modules/mod_lsphp/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(php ALL COMMAND ${CMAKE_COMMAND} -E env ASAN=${ASAN} TSAN=${TSAN} CC=${CMAKE_C_COMPILER} CXX=${CMAKE_CXX_COMPILER} ./build.sh\n    WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}/src/modules/mod_lsphp)\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Cache Library in CMake for OpenLiteSpeed\nDESCRIPTION: Defines the build configuration for the cache module of OpenLiteSpeed. It sets the minimum CMake version, configures include paths, and specifies the source files that should be compiled into a static library named 'cache'.\nSOURCE: https://github.com/litespeedtech/openlitespeed/blob/master/src/modules/cache/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.0)\n\ninclude_directories(./;../;../../;)\n\nadd_library(cache STATIC \n    cachemanager.cpp\n    shmcachemanager.cpp\n    cacheentry.cpp\n    cachehash.cpp \n    cachestore.cpp\n    ceheader.cpp\n    dirhashcacheentry.cpp \n    dirhashcachestore.cpp\n    cacheconfig.cpp\n    cachectrl.cpp\n    cache.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries to Executables\nDESCRIPTION: Links the previously defined library dependencies to the OpenLiteSpeed executable and the shared memory utility executables. Includes commented out linking for currently unused executables.\nSOURCE: https://github.com/litespeedtech/openlitespeed/blob/master/src/CMakeLists.txt#2025-04-17_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(openlitespeed ${litespeedlib} )\n\ntarget_link_libraries(ls_shmstat lsshm log4cxx edio util lsr pthread rt )\n\ntarget_link_libraries(ls_shmhashstat lsshm log4cxx edio util lsr pthread rt )\n\n# target_link_libraries(ctbench ${litespeedlib} )\n\n# target_link_libraries(shmtest ${litespeedlib} )\n\n# target_link_libraries(shmlru_test ${litespeedlib} )\n```\n\n----------------------------------------\n\nTITLE: Configuring FastCGI Static Library Build in CMake\nDESCRIPTION: Defines source files and creates a static library target named 'fcgi' using CMake. The configuration specifies multiple FastCGI component source files including environment handling, application configuration, and connection management.\nSOURCE: https://github.com/litespeedtech/openlitespeed/blob/master/src/extensions/fcgi/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.0)\n\nSET(fcgi_STAT_SRCS\n   fcgienv.cpp\n   fcgiappconfig.cpp\n   fcgiapp.cpp\n   fcginamevaluepair.cpp\n   fcgiconnection.cpp\n   fcgirecord.cpp\n)\n\nadd_library(fcgi STATIC ${fcgi_STAT_SRCS})\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building cmd_ns Executable with CMake\nDESCRIPTION: This CMake script sets up the build configuration for the cmd_ns executable. It defines source files, includes necessary directories, and specifies linking requirements. The script also sets a compiler definition to exclude LSCGID functionality.\nSOURCE: https://github.com/litespeedtech/openlitespeed/blob/master/support/cmd_ns/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 2.8)\n\nadd_definitions(-DNOT_LSCGID)\n\nSET(cmd_ns_SRCS\n    cmd_ns.c\n    nsopts.c\n    nspersist.c\n    nsutils.c\n    ns.c\n)\n\ninclude_directories(${CMAKE_CURRENT_SOURCE_DIR}/../../src/extensions/cgi)\n\nadd_executable(cmd_ns ${cmd_ns_SRCS} )\n\ntarget_link_libraries(cmd_ns\n    rt )\n```\n\n----------------------------------------\n\nTITLE: Configuring LSIAPI Static Library Build with CMake\nDESCRIPTION: This CMake script configures the build process for the LSIAPI (LiteSpeed Server API) static library. It sets the minimum required CMake version to 3.0, defines a list of source files to be compiled, and creates a static library target named 'lsiapi' using these source files.\nSOURCE: https://github.com/litespeedtech/openlitespeed/blob/master/src/lsiapi/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.0)\n\nSET(lsiapi_STAT_SRCS \n    ediohandler.cpp\n    envmanager.cpp\n    lsimoduledata.cpp\n    lsiapihooks.cpp\n    modulehandler.cpp\n    lsiapi.cpp\n    lsiapi_const.cpp\n    lsiapilib.cpp\n    lsiapigd.cpp\n    modulemanager.cpp\n    moduletimer.cpp\n)\n\nadd_library(lsiapi STATIC ${lsiapi_STAT_SRCS})\n```\n\n----------------------------------------\n\nTITLE: Configuring ModGzip Static Library Build in CMake\nDESCRIPTION: Defines the minimum CMake version requirement and configures the build for the modgzip static library. Specifies source files and creates the library target.\nSOURCE: https://github.com/litespeedtech/openlitespeed/blob/master/src/modules/modgzip/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.0)\n\nSET(modgzip_STAT_SRCS \nmodgzip.cpp\n)\n\nadd_library(modgzip STATIC  ${modgzip_STAT_SRCS})\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for OpenLiteSpeed SPDY Module\nDESCRIPTION: This CMake snippet sets the minimum required CMake version and defines the source files for the SPDY module. It then creates a static library target named 'spdy' using these source files.\nSOURCE: https://github.com/litespeedtech/openlitespeed/blob/master/src/spdy/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.0)\n\n\n########### next target ###############\n\nSET(spdy_STAT_SRCS \nspdyprotocol.cpp \nspdyconnection.cpp \nspdystream.cpp\nspdyzlibfilter.cpp\nspdystreampool.cpp\nspdydebug.cpp\n)\n\nadd_library(spdy STATIC ${spdy_STAT_SRCS})\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for CGI Static Library in CMake\nDESCRIPTION: Specifies the source files to be compiled into the CGI static library. This includes various C++ and C files that implement CGI functionality, suexec, and namespace utilities.\nSOURCE: https://github.com/litespeedtech/openlitespeed/blob/master/src/extensions/cgi/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nSET(cgi_STAT_SRCS\n   suexec.cpp\n   cgidreq.cpp\n   cgidconfig.cpp\n   cgidworker.cpp\n   cgidconn.cpp\n   lscgid.cpp\n   cgroupconn.cpp\n   cgroupuse.cpp\n   ns.c\n   nsopts.c\n   nspersist.c\n   nsutils.c\n   use_bwrap.c\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Extensions Source Files\nDESCRIPTION: Defines the list of C++ source files that comprise the extensions static library. Includes core functionality for load balancing, worker management, and SSL connections.\nSOURCE: https://github.com/litespeedtech/openlitespeed/blob/master/src/extensions/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nSET(extensions_STAT_SRCS\n   loadbalancer.cpp\n   localworkerconfig.cpp\n   localworker.cpp\n   pidlist.cpp\n   iprocessortimer.cpp\n   httpextprocessor.cpp\n   extrequest.cpp\n   extworker.cpp\n   extconn.cpp\n   extworkerconfig.cpp\n   #l4conn.cpp\n   ssl4conn.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for OpenLiteSpeed QUIC Library\nDESCRIPTION: This CMake script sets the minimum required CMake version and defines the source files for the QUIC static library. It includes files for QUIC shared memory, UDP listener, QUIC engine, QUIC stream, and protocol buffer set implementations.\nSOURCE: https://github.com/litespeedtech/openlitespeed/blob/master/src/quic/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.0)\n\n\n########### next target ###############\n\nSET(quic_STAT_SRCS quicshm.cpp udplistener.cpp \n    quicengine.cpp\n    quicstream.cpp\n    pbset.cpp\n    #pkt_capture.c\n)\n\nadd_library(quic STATIC ${quic_STAT_SRCS})\n```\n\n----------------------------------------\n\nTITLE: Configuring Main OpenLiteSpeed Unit Test Executable in CMake\nDESCRIPTION: Defines the main unit test executable target for OpenLiteSpeed, specifying the source files to include and the libraries to link against. This establishes the primary test binary for the project.\nSOURCE: https://github.com/litespeedtech/openlitespeed/blob/master/test/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(ols_unittest\n    ../src/httpdtest.cpp\n    ../src/modules/prelinkedmods.cpp\n    ../src/main/configctx.cpp\n    ${unittest_STAT_SRCS}\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building the SSL++ Static Library with CMake\nDESCRIPTION: This CMake script sets up the build configuration for the SSL++ module in OpenLiteSpeed. It defines the minimum CMake version required, lists all the source files to be compiled, and creates a static library target named 'sslpp'.\nSOURCE: https://github.com/litespeedtech/openlitespeed/blob/master/src/sslpp/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.0)\n\n\n########### next target ###############\n\nSET(sslpp_STAT_SRCS\n   sslcontextconfig.cpp\n   sslengine.cpp\n   sslcert.cpp\n   sslcertcomp.cpp\n   sslerror.cpp\n   sslconnection.cpp\n   sslcontext.cpp\n   sslocspstapling.cpp\n   sslsesscache.cpp\n   sslticket.cpp\n   sslutil.cpp\n   sslasyncpk.cpp\n   ocsp/ocsp.c\n   ls_fdbuf_bio.c\n)\n\nadd_library(sslpp STATIC ${sslpp_STAT_SRCS})\n```\n\n----------------------------------------\n\nTITLE: Configuring Thread Library Build with CMake\nDESCRIPTION: Defines the CMake build configuration for the OpenLiteSpeed thread library. It specifies the minimum CMake version (3.0), lists all source files for the thread library, and creates a static library target named 'thread'.\nSOURCE: https://github.com/litespeedtech/openlitespeed/blob/master/src/thread/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.0)\n\n\n########### next target ###############\n\nSET(thread_STAT_SRCS\n   mtnotifier.cpp\n   pthreadcond.cpp\n   pthreadmutex.cpp\n   pthreadworkqueue.cpp\n   thread.cpp\n   workcrew.cpp\n   worker.cpp\n   crewworker.cpp\n   offloader.cpp\n)\n\nadd_library(thread STATIC ${thread_STAT_SRCS} )\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for OpenLiteSpeed Shared Memory Library\nDESCRIPTION: Sets up the CMake build environment for the OpenLiteSpeed shared memory (lsshm) library component. It defines source files for the static library build and includes a commented alternative for building as a shared library.\nSOURCE: https://github.com/litespeedtech/openlitespeed/blob/master/src/shm/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.0)\n\nSET(shm_STAT_SRCS addrmap.cpp\n    lsshm.cpp\n    lsshmhash.cpp\n    lsshmlock.cpp\n    lsshmpool.cpp\n    lsshmtidmgr.cpp\n    lsshmhashobserver.cpp\n)\n\nadd_library(lsshm STATIC ${shm_STAT_SRCS} )\n\n#add_library(lsshm SHARED ${shm_STAT_SRCS} )\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for Log4cxx Static Library\nDESCRIPTION: Lists all the source files to be compiled into the log4cxx static library. This includes appender management, file handling, logging events, formatters, and other core logging functionality.\nSOURCE: https://github.com/litespeedtech/openlitespeed/blob/master/src/log4cxx/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nSET(log4cxx_STAT_SRCS\n   appendermanager.cpp\n   fileappender.cpp\n   logrotate.cpp\n   patternlayout.cpp\n   loggingevent.cpp\n   ilog.cpp\n   bench.cpp\n   layout.cpp\n   appender.cpp\n   logger.cpp\n   level.cpp\n   logsession.cpp\n   tmplogid.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for the Proxy Static Library\nDESCRIPTION: Sets up the list of source files to be compiled into the static library for the proxy module.\nSOURCE: https://github.com/litespeedtech/openlitespeed/blob/master/src/extensions/proxy/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nSET(proxy_STAT_SRCS\n   proxyconfig.cpp\n   proxyworker.cpp\n   proxyconn.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Defining LSAPI Source Files\nDESCRIPTION: Defines the source files that compose the LSAPI library, including worker, request, connection, and configuration components.\nSOURCE: https://github.com/litespeedtech/openlitespeed/blob/master/src/extensions/lsapi/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nSET(lsapi_STAT_SRCS\n   lsapiworker.cpp\n   lsapireq.cpp\n   lsapiconn.cpp\n   lsapiconfig.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Creating JK Static Library Target\nDESCRIPTION: Creates a static library target named 'jk' using the previously defined source files\nSOURCE: https://github.com/litespeedtech/openlitespeed/blob/master/src/extensions/jk/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(jk STATIC ${jk_STAT_SRCS})\n```\n\n----------------------------------------\n\nTITLE: Defining JavaScript Module Source Files\nDESCRIPTION: Defines the source files required for the JavaScript module compilation, including lsjsengine.cpp and modjs.cpp.\nSOURCE: https://github.com/litespeedtech/openlitespeed/blob/master/src/modules/js/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nSET(js_STAT_SRCS \n    lsjsengine.cpp\n    modjs.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build Settings for OpenLiteSpeed JS Module\nDESCRIPTION: Sets up CMake configuration including minimum version, compiler flags, and warning options. Enables verbose makefile output and configures warning flags for both C and C++ compilation.\nSOURCE: https://github.com/litespeedtech/openlitespeed/blob/master/src/modules/js/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.0)\nINCLUDE( ${PROJECT_SOURCE_DIR}/CMakeModules/common.cmake)\n\nset(CMAKE_VERBOSE_MAKEFILE ON)\nset(MY_CMAKE_WARNING_FLAGS  \" -Wall -Wextra -Wno-unused-parameter\" )\nset(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} ${MY_CMAKE_WARNING_FLAGS}\" )\n#set(CMAKE_C_FLAGS \" -Wall \" )\n#set(CMAKE_C_FLAGS_DEBUG \"${CMAKE_C_FLAGS_DEBUG} ${MY_CMAKE_WARNING_FLAGS}\" )\nset(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS}  ${MY_CMAKE_WARNING_FLAGS}\" )\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring PageSpeed Shared Module Library\nDESCRIPTION: Defines the modpagespeed shared library by specifying its source files, links it against the PageSpeed automatic library, and configures the output library to have no prefix in its filename.\nSOURCE: https://github.com/litespeedtech/openlitespeed/blob/master/src/modules/pagespeed/CMakeLists.txt#2025-04-17_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(modpagespeed SHARED  pagespeed.cpp  log_message_handler.cpp\n            ls_message_handler.cpp\n            ls_server_context.cpp\n            ls_rewrite_driver_factory.cpp\n            ls_caching_headers.cpp\n            ls_rewrite_options.cpp \n            ls_base_fetch.cpp\n            ls_uamatcher.cpp\n            )\n\ntarget_link_libraries(modpagespeed ${PSOL_LIB}/lib/Debug/linux/${OSVERSION}/pagespeed_automatic.a)\nset_target_properties(modpagespeed PROPERTIES PREFIX \"\")\n```\n\n----------------------------------------\n\nTITLE: Configuring IO_URING Dependencies in OpenLiteSpeed HTTP Module\nDESCRIPTION: Includes necessary directories for IO_URING support when the COMPILE_IO_URING flag is enabled. These directories contain the liburing headers required for asynchronous I/O operations.\nSOURCE: https://github.com/litespeedtech/openlitespeed/blob/master/src/http/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.0)\n\nif(${COMPILE_IO_URING})\n    include_directories(BEFORE SYSTEM liburing ../edio/liburing/include)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Building Shared Library for OpenLiteSpeed modreqparser Module\nDESCRIPTION: Defines the 'modreqparser' target as a shared library and sets its properties. It specifies the source file and removes the default library prefix.\nSOURCE: https://github.com/litespeedtech/openlitespeed/blob/master/src/modules/modreqparser/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(modreqparser SHARED  modreqparser.cpp)\n\nset_target_properties(modreqparser PROPERTIES PREFIX \"\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Lock-Free Stack Test Executable in CMake\nDESCRIPTION: Creates a test executable for the lock-free stack implementation, including profile timing functionality for performance measurement. Links against lsr, thread, pthread, pcre, and rt libraries.\nSOURCE: https://github.com/litespeedtech/openlitespeed/blob/master/test/CMakeLists.txt#2025-04-17_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(ls_lfstacktest\nlsr/ls_lfstacktest.cpp\n../src/util/misc/profiletime.cpp\n${lsr_SRCS}\n${test_SRCS}\n)\ntarget_link_libraries(ls_lfstacktest lsr thread pthread pcre rt )\n```\n\n----------------------------------------\n\nTITLE: Configuring ADNS Static Library Build with CMake\nDESCRIPTION: Defines the build configuration for the ADNS static library using CMake. It sets the minimum required CMake version to 3.0, specifies the source file (adns.cpp), and creates a static library target.\nSOURCE: https://github.com/litespeedtech/openlitespeed/blob/master/src/adns/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.0)\n\nSET(adns_STAT_SRCS \n    adns.cpp\n)\n\nadd_library(adns STATIC ${adns_STAT_SRCS} )\n```\n\n----------------------------------------\n\nTITLE: Configuring Low-Latency Message Queue Test Executable in CMake\nDESCRIPTION: Defines a test executable for the low-latency message queue implementation. This target is built from a C source file and links against the lsr, thread, pthread, and pcre libraries.\nSOURCE: https://github.com/litespeedtech/openlitespeed/blob/master/test/CMakeLists.txt#2025-04-17_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(ls_llmqtest\nlsr/ls_llmqtest.c\n${lsr_SRCS}\n)\ntarget_link_libraries(ls_llmqtest lsr thread pthread pcre )\n```\n\n----------------------------------------\n\nTITLE: Creating LSAPI Static Library Target\nDESCRIPTION: Creates a static library target named 'lsapi' using the previously defined source files.\nSOURCE: https://github.com/litespeedtech/openlitespeed/blob/master/src/extensions/lsapi/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(lsapi STATIC ${lsapi_STAT_SRCS})\n```\n\n----------------------------------------\n\nTITLE: Configuring Lock Testing Executable in CMake\nDESCRIPTION: Creates a test executable for evaluating various locking mechanisms in the lsr library. This target links against lsr, thread, pthread, and pcre libraries to test thread synchronization primitives.\nSOURCE: https://github.com/litespeedtech/openlitespeed/blob/master/test/CMakeLists.txt#2025-04-17_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(ls_locktest\nlsr/ls_locktest.cpp\n${lsr_SRCS}\n)\ntarget_link_libraries(ls_locktest lsr thread pthread pcre )\n```\n\n----------------------------------------\n\nTITLE: Setting Compiler Flags and Building modinspector Shared Library in CMake\nDESCRIPTION: This CMake script configures the build environment with appropriate flags for debug and release builds, adds Large File System support, and creates a shared library from modinspector.cpp with no prefix in the output filename.\nSOURCE: https://github.com/litespeedtech/openlitespeed/blob/master/src/modules/modinspector/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.0)\n\nset(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} -Wall\")\nset(CMAKE_CSS_FLAGS_RELEASE \"${CMAKE_CXX_FLAGS_RELEASE} -Wall\")\n\nexecute_process( COMMAND getconf LFS_CFLAGS\n            OUTPUT_VARIABLE  LFS_CFLAGS )\n\nadd_definitions( ${LFS_CFLAGS} )\n\nadd_library(modinspector SHARED\n    modinspector.cpp\n)\n\nset_target_properties(modinspector PROPERTIES PREFIX \"\")\n```\n\n----------------------------------------\n\nTITLE: Configuring POST Request Test Executables in CMake\nDESCRIPTION: Defines two test executables for POST request handling tests. These targets are designed to test HTTP POST functionality with different implementations, linking only with the pthread library.\nSOURCE: https://github.com/litespeedtech/openlitespeed/blob/master/test/CMakeLists.txt#2025-04-17_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(POSTtest2\nmthandler/POSTtest2.cpp\n)\ntarget_link_libraries(POSTtest2 pthread )\n\nadd_executable(POSTtest\nmthandler/POSTtest.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building unmount_ns Executable with CMake\nDESCRIPTION: This CMake snippet sets up the build configuration for the unmount_ns executable. It specifies the minimum CMake version, defines a preprocessor macro, lists source files, sets include directories, creates the executable, and links required libraries.\nSOURCE: https://github.com/litespeedtech/openlitespeed/blob/master/support/unmount_ns/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.0)\n\nadd_definitions(-DNOT_LSCGID)\n\nSET(unmount_ns_SRCS\n    unmount_ns.c\n    nsopts.c\n    nspersist.c\n    nsutils.c\n    ns.c\n)\n\ninclude_directories(${CMAKE_CURRENT_SOURCE_DIR}/../../src/extensions/cgi)\n#link_directories(${CMAKE_CURRENT_SOURCE_DIR}/../../../third-party/lib/)\n\nadd_executable(unmount_ns ${unmount_ns_SRCS} )\n\ntarget_link_libraries(unmount_ns rt)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for OpenLiteSpeed Registry Static Library\nDESCRIPTION: Specifies the source files (appconfig.cpp and extappregistry.cpp) that comprise the registry static library component in OpenLiteSpeed.\nSOURCE: https://github.com/litespeedtech/openlitespeed/blob/master/src/extensions/registry/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nSET(registry_STAT_SRCS \n   appconfig.cpp\n   extappregistry.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Stack Implementation Test Executable in CMake\nDESCRIPTION: Defines a test executable for the stack implementation, including profile timing for performance measurement. Links against lsr, thread, pthread, pcre, and rt libraries for accurate timing and thread safety testing.\nSOURCE: https://github.com/litespeedtech/openlitespeed/blob/master/test/CMakeLists.txt#2025-04-17_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(ls_stacktest\nlsr/ls_stacktest.cpp\n../src/util/misc/profiletime.cpp\n${lsr_SRCS}\n${test_SRCS}\n)\ntarget_link_libraries(ls_stacktest lsr thread pthread pcre rt )\n```\n\n----------------------------------------\n\nTITLE: Creating Static Library Target for OpenLiteSpeed Registry Component\nDESCRIPTION: Adds a static library build target named 'registry' using the previously defined source files in the registry_STAT_SRCS variable.\nSOURCE: https://github.com/litespeedtech/openlitespeed/blob/master/src/extensions/registry/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(registry STATIC ${registry_STAT_SRCS})\n```\n\n----------------------------------------\n\nTITLE: Configuring Lock-Free Queue Test Executable in CMake\nDESCRIPTION: Defines a test executable for the lock-free queue implementation. This target links against the lsr, thread, pthread, and pcre libraries to test thread safety and performance of queue operations.\nSOURCE: https://github.com/litespeedtech/openlitespeed/blob/master/test/CMakeLists.txt#2025-04-17_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(ls_lfqueuetest\nlsr/ls_lfqueuetest.c\n${lsr_SRCS}\n)\n\ntarget_link_libraries(ls_lfqueuetest lsr thread pthread pcre )\n```\n\n----------------------------------------\n\nTITLE: Creating CGI Static Library in CMake\nDESCRIPTION: Adds a new static library target named 'cgi' using the previously defined source files. This library will be compiled and can be linked into the main OpenLiteSpeed binary.\nSOURCE: https://github.com/litespeedtech/openlitespeed/blob/master/src/extensions/cgi/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(cgi STATIC ${cgi_STAT_SRCS})\n```\n\n----------------------------------------\n\nTITLE: Configuring Thread Safety Test Executable in CMake\nDESCRIPTION: Creates a test executable for evaluating thread safety of various components in the lsr library. This target links against lsr, thread, pthread, and pcre libraries to assess concurrent access behavior.\nSOURCE: https://github.com/litespeedtech/openlitespeed/blob/master/test/CMakeLists.txt#2025-04-17_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(ls_thrsafetest\nlsr/ls_thrsafetest.cpp\n${lsr_SRCS}\n)\ntarget_link_libraries(ls_thrsafetest lsr thread pthread pcre )\n```\n\n----------------------------------------\n\nTITLE: Creating the Proxy Static Library\nDESCRIPTION: Adds a static library target named 'proxy' with the previously defined source files.\nSOURCE: https://github.com/litespeedtech/openlitespeed/blob/master/src/extensions/proxy/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(proxy STATIC ${proxy_STAT_SRCS})\n```\n\n----------------------------------------\n\nTITLE: Configuring Valgrind Test Executable in CMake\nDESCRIPTION: Defines a test executable specifically designed for memory leak and error detection with Valgrind. This target is built from a C source file and links against lsr, thread, pthread, and pcre libraries.\nSOURCE: https://github.com/litespeedtech/openlitespeed/blob/master/test/CMakeLists.txt#2025-04-17_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(ls_valgrindtest\nlsr/ls_valgrindtest.c\n${lsr_SRCS}\n)\ntarget_link_libraries(ls_valgrindtest lsr thread pthread pcre )\n```\n\n----------------------------------------\n\nTITLE: Defining CMake Version Requirement for OpenLiteSpeed\nDESCRIPTION: Sets the minimum required CMake version to 3.0 for building the OpenLiteSpeed project.\nSOURCE: https://github.com/litespeedtech/openlitespeed/blob/master/src/main/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.0)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries for OpenLiteSpeed Unit Tests in CMake\nDESCRIPTION: Configures library linking for the main unit test executable, including dependencies on various internal components, third-party libraries, and system libraries. This ensures the test executable has access to all required code.\nSOURCE: https://github.com/litespeedtech/openlitespeed/blob/master/test/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nSET( unittestlib\n    modgzip cache lsiapi main http ssi http lsiapi\n    registry cgi fcgi jk extensions lsapi proxy\n    socket sslpp lsshm thread log4cxx adns\n    quic h2 lsquic bcrypt\n    -Wl,--whole-archive util lsr -Wl,--no-whole-archive\n    edio udns pthread rt ${CMAKE_DL_LIBS} ${libUnitTest} ${BSSL_ADD_LIB}\n    ${LINUX_AIO_LIB} libz.a libpcre.a libexpat.a libxml2.a\n    ${BROTLI_ADD_LIB} ${IP2LOC_ADD_LIB} ${MMDB_LIB} atomic\n    spdy crypt libssl.a libcrypto.a\n    -Wl,-Map=ols_unittest.map)\n\ntarget_link_libraries(ols_unittest ${unittestlib} )\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Version for OpenLiteSpeed Utility Library\nDESCRIPTION: Specifies the minimum required version of CMake for building the OpenLiteSpeed utility library.\nSOURCE: https://github.com/litespeedtech/openlitespeed/blob/master/src/util/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.0)\n```\n\n----------------------------------------\n\nTITLE: Adding Extension Subdirectories\nDESCRIPTION: Adds various extension module subdirectories to the build process including FastCGI, CGI, JK, proxy, registry, and LSAPI modules.\nSOURCE: https://github.com/litespeedtech/openlitespeed/blob/master/src/extensions/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(fcgi)\nadd_subdirectory(cgi)\nadd_subdirectory(jk)\nadd_subdirectory(proxy)\nadd_subdirectory(registry)\nadd_subdirectory(lsapi)\n```\n\n----------------------------------------\n\nTITLE: Creating Static Library Target for OpenLiteSpeed Utility\nDESCRIPTION: Adds a new static library target named 'util' to the CMake project, using the previously defined source files.\nSOURCE: https://github.com/litespeedtech/openlitespeed/blob/master/src/util/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(util STATIC ${util_STAT_SRCS} )\n```\n\n----------------------------------------\n\nTITLE: Setting Unit Test Source Files in CMake for OpenLiteSpeed\nDESCRIPTION: Defines a comprehensive list of source files for the main OpenLiteSpeed unit test suite. These source files cover various components of the server including HTTP handling, socket operations, utilities, threading, and more.\nSOURCE: https://github.com/litespeedtech/openlitespeed/blob/master/test/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nSET(unittest_STAT_SRCS\n   edio/bufferedostest.cpp\n   edio/multiplexertest.cpp\n#   extensions/fcgistartertest.cpp\n   http/httpiptogeo2test.cpp\n   http/expirestest.cpp\n   http/rewritetest.cpp\n   http/httprequestlinetest.cpp\n   http/httprangetest.cpp\n   http/denieddirtest.cpp\n   http/statusurlmaptest.cpp\n   http/contexttreetest.cpp\n   http/httpmimetest.cpp\n   http/httpcgitooltest.cpp\n   http/chunkostest.cpp\n   http/chunkistest.cpp\n   http/httplistenerstest.cpp\n   http/httpvhostlisttest.cpp\n   http/httpreqtest.cpp\n   http/httpreqheaderstest.cpp\n   http/httpbuftest.cpp\n   http/httpheadertest.cpp\n   http/datetimetest.cpp\n   http/reqparsertest.cpp\n   socket/hostinfotest.cpp\n   socket/tcpsockettest.cpp\n   socket/coresockettest.cpp\n   util/pcregextest.cpp\n   util/ghashtest.cpp\n   util/linkedobjtest.cpp\n   util/dlinkqueuetest.cpp\n   util/gzipbuftest.cpp\n   util/brotlibuftest.cpp\n   util/vmembuftest.cpp\n   util/filtermatchtest.cpp\n   util/gpathtest.cpp\n   util/poolalloctest.cpp\n   util/xmlnodetest.cpp\n   util/accesscontroltest.cpp\n   util/loopbuftest.cpp\n   util/logfiletest.cpp\n   util/stringmaptest.cpp\n   util/httpfetchtest.cpp\n   util/partitioninfotest.cpp\n   util/gmaptest.cpp\n   util/ahotest.cpp\n   util/stringtooltest.cpp\n   util/gpointerlisttest.cpp\n   util/objarraytest.cpp\n   util/objpooltest.cpp\n   util/radixtreetest.cpp\n   spdy/pushtest.cpp\n   spdy/spdyzlibfiltertest.cpp\n   spdy/spdyconnectiontest.cpp\n   spdy/dummiostream.cpp\n   lsiapi/moduledata.cpp\n   lsiapi/moduletimertest.cpp\n   lsiapi/lsiapihookstest.cpp\n   lsiapi/envhandler.cpp\n   lsiapi/moduleconf.cpp\n   lsr/ls_ahotest.cpp\n   lsr/ls_confparsertest.cpp\n   lsr/ls_base64test.cpp\n   lsr/ls_buftest.cpp\n   lsr/ls_dlinkqtest.cpp\n   lsr/ls_hashtest.cpp\n   lsr/ls_linktest.cpp\n   lsr/ls_loopbuftest.cpp\n   lsr/ls_maptest.cpp\n   lsr/ls_md5test.cpp\n   lsr/ls_objarraytest.cpp\n   lsr/ls_objpooltest.cpp\n   lsr/ls_pcregtest.cpp\n   lsr/ls_pooltest.cpp\n   lsr/ls_ptrlisttest.cpp\n   lsr/ls_sha1test.cpp\n   lsr/ls_strtest.cpp\n   lsr/ls_strlisttest.cpp\n   lsr/ls_strtooltest.cpp\n   lsr/ls_xpooltest.cpp\n   thread/pthreadworkqueuetest.cpp\n   thread/threadtest.cpp\n   thread/workcrewtest.cpp\n   thread/mtnotifiertest.cpp\n   shm/shmbaselrutest.cpp\n   shm/shmxtest.cpp\n   unittest_main.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Minimum Version\nDESCRIPTION: Sets the minimum required CMake version to 3.0 for building the project\nSOURCE: https://github.com/litespeedtech/openlitespeed/blob/master/src/extensions/jk/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.0)\n```\n\n----------------------------------------\n\nTITLE: Configuring Large File Support\nDESCRIPTION: Retrieves and applies Large File Support (LFS) compiler flags using getconf\nSOURCE: https://github.com/litespeedtech/openlitespeed/blob/master/src/modules/uploadprogress/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nexecute_process( COMMAND getconf LFS_CFLAGS\n            OUTPUT_VARIABLE  LFS_CFLAGS )\n\nadd_definitions( ${LFS_CFLAGS} )\n```\n\n----------------------------------------\n\nTITLE: Defining JK Library Source Files\nDESCRIPTION: Defines the source files required to build the JK static library, including AJP13 protocol and worker implementation files\nSOURCE: https://github.com/litespeedtech/openlitespeed/blob/master/src/extensions/jk/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nSET(jk_STAT_SRCS\n   jkajp13.cpp\n   jworker.cpp\n   jworkerconfig.cpp\n   jconn.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Defining LFS_CFLAGS for PageSpeed Module\nDESCRIPTION: Executes the getconf command to retrieve Large File Support (LFS) compiler flags and adds them to the build definitions for proper large file handling.\nSOURCE: https://github.com/litespeedtech/openlitespeed/blob/master/src/modules/pagespeed/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nexecute_process( COMMAND getconf LFS_CFLAGS\n            OUTPUT_VARIABLE  LFS_CFLAGS )\n\nadd_definitions( ${LFS_CFLAGS} )\n```\n\n----------------------------------------\n\nTITLE: Creating Log4cxx Static Library Target\nDESCRIPTION: Defines the target for creating a static library named 'log4cxx' using the previously defined source files.\nSOURCE: https://github.com/litespeedtech/openlitespeed/blob/master/src/log4cxx/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(log4cxx STATIC ${log4cxx_STAT_SRCS})\n```\n\n----------------------------------------\n\nTITLE: Compiling Lsrecaptcha Module (Shell)\nDESCRIPTION: Instructions for manually compiling the lsrecaptcha module. It requires Golang to be installed and the GOROOT environment variable to be set. The compilation process generates a binary named '_recaptcha' which should be copied to the server's lsrecaptcha directory.\nSOURCE: https://github.com/litespeedtech/openlitespeed/blob/master/src/modules/lsrecaptcha/README.md#2025-04-17_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nbuild_lsrecaptcha.sh\n```\n\n----------------------------------------\n\nTITLE: Creating JavaScript Module Library Target\nDESCRIPTION: Creates a module library target for the JavaScript component and sets its properties to remove the default library prefix.\nSOURCE: https://github.com/litespeedtech/openlitespeed/blob/master/src/modules/js/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(mod_js MODULE ${js_STAT_SRCS} )\nset_target_properties(mod_js PROPERTIES PREFIX \"\")\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for OpenLiteSpeed CGI Module\nDESCRIPTION: Sets the minimum required CMake version and configures include directories for glib-2.0. This ensures the necessary dependencies are available for compilation.\nSOURCE: https://github.com/litespeedtech/openlitespeed/blob/master/src/extensions/cgi/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.0)\n\n#include_directories(\"/usr/lib64/glib-2.0/include\")\n#include_directories(\"/usr/include/glib-2.0\")\n```\n\n----------------------------------------\n\nTITLE: Conditional Build Configuration for Linux System in CMake\nDESCRIPTION: This CMake configuration sets the minimum required version and conditionally includes build subdirectories only when running on a Linux host system. It specifically adds the 'unmount_ns' and 'cmd_ns' subdirectories when the system matches Linux.\nSOURCE: https://github.com/litespeedtech/openlitespeed/blob/master/support/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.0)\n\nif (${CMAKE_HOST_SYSTEM_NAME} MATCHES \"Linux\")\n    add_subdirectory(unmount_ns)\n    add_subdirectory(cmd_ns)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Version Requirement\nDESCRIPTION: Specifies the minimum required CMake version for building the project.\nSOURCE: https://github.com/litespeedtech/openlitespeed/blob/master/src/extensions/lsapi/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.0)\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version Requirement\nDESCRIPTION: Specifies the minimum required version of CMake to build the project.\nSOURCE: https://github.com/litespeedtech/openlitespeed/blob/master/src/extensions/proxy/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.0)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Minimum Version Requirement for OpenLiteSpeed\nDESCRIPTION: Sets the minimum required CMake version to 3.0 for building the OpenLiteSpeed registry component.\nSOURCE: https://github.com/litespeedtech/openlitespeed/blob/master/src/extensions/registry/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.0)\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version and Link Directories\nDESCRIPTION: Sets the minimum required CMake version to 3.0 and adds '/usr/lib64' to the linker search paths.\nSOURCE: https://github.com/litespeedtech/openlitespeed/blob/master/src/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.0)\n\nlink_directories(\"/usr/lib64\")\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Version Requirement\nDESCRIPTION: Specifies the minimum required CMake version for building the project.\nSOURCE: https://github.com/litespeedtech/openlitespeed/blob/master/src/extensions/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.0)\n```\n\n----------------------------------------\n\nTITLE: Creating Extensions Static Library\nDESCRIPTION: Creates a static library named 'extensions' using the previously defined source files.\nSOURCE: https://github.com/litespeedtech/openlitespeed/blob/master/src/extensions/CMakeLists.txt#2025-04-17_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(extensions STATIC ${extensions_STAT_SRCS})\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Minimum Version for Log4cxx Library\nDESCRIPTION: Sets the minimum required CMake version to 3.0 for the build system.\nSOURCE: https://github.com/litespeedtech/openlitespeed/blob/master/src/log4cxx/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.0)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Version and Compiler Flags\nDESCRIPTION: Defines the minimum required CMake version and sets compiler warning flags for both debug and release builds\nSOURCE: https://github.com/litespeedtech/openlitespeed/blob/master/src/modules/uploadprogress/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.0)\n\nset(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} -Wall\")\nset(CMAKE_CSS_FLAGS_RELEASE \"${CMAKE_CXX_FLAGS_RELEASE} -Wall\")\n```\n\n----------------------------------------\n\nTITLE: Legacy Makefile.am Reference for OpenLiteSpeed\nDESCRIPTION: Commented-out reference to the original Makefile.am that was used before migrating to CMake. Contains autotools configuration for building the main library with compilation flags and source files.\nSOURCE: https://github.com/litespeedtech/openlitespeed/blob/master/src/main/CMakeLists.txt#2025-04-17_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n#original Makefile.am contents follow:\n\n######## kdevelop will overwrite this part!!! (begin)##########\n#noinst_LIBRARIES = libmain.a\n#\n#INCLUDES = $(all_includes)\n#\n#libmain_a_METASOURCES = AUTO\n#\n#libmain_a_SOURCES = lshttpdmain.cpp serverinfo.cpp httpserverbuilder.cpp \\\n#\thttpserver.cpp\n#\n#\n#EXTRA_DIST = license.cpp license.h httpserver.cpp httpserver.h httpserverbuilder.cpp httpserverbuilder.h serverinfo.cpp serverinfo.h lshttpdmain.cpp lshttpdmain.h timestamp.h\n#\n######## kdevelop will overwrite this part!!! (end)############\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Types and Sanitizers for OpenLiteSpeed\nDESCRIPTION: Sets up different build types including Debug, Thread Sanitizer (TSAN), Address Sanitizer (ASAN), and profiling. It configures compiler flags and definitions based on the selected build type.\nSOURCE: https://github.com/litespeedtech/openlitespeed/blob/master/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nIF (CMAKE_BUILD_TYPE MATCHES \"Debug\")\nif (${CMAKE_HOST_SYSTEM_NAME} MATCHES \"Linux\")\n    set (ASAN \"1\")\n    set (BUILD_TEST \"1\")\n    add_definitions(-DRUN_TEST)\n    set(libUnitTest  libUnitTest++.a)\nendif()\nENDIF()\n\nIF (CMAKE_BUILD_TYPE MATCHES \"tsan\")\n    set (TSAN \"1\")\nENDIF()\n\nIF (CMAKE_BUILD_TYPE MATCHES \"asan\")\n    set (ASAN \"1\")\nENDIF()\n\nIF (CMAKE_BUILD_TYPE MATCHES \"heaptrack\")\n    set(MY_CMAKE_FLAGS  \"-g -O0 \")\n    add_definitions(-DASAN_DBG)\n    add_definitions(-DDEBUG_POOL)\nENDIF()\n\nIF (CMAKE_BUILD_TYPE MATCHES \"prof\")\n    set(MY_CMAKE_FLAGS \"-g -pg -O2 -D_PROFILE_ -DNDEBUG\")\nENDIF()\n\nIF (CMAKE_BUILD_TYPE MATCHES \"pkgdbg\")\n    set(MY_CMAKE_FLAGS \"-g -O0\")\nENDIF()\n\nIF(TSAN)\n    set(MY_CMAKE_FLAGS  \"-g -O0 -DUSE_THREADCHECK -DDYNAMIC_ANNOTATIONS_ENABLED -fsanitize=thread -fsanitize-blacklist=${PROJECT_SOURCE_DIR}/thread_sanitizer_blacklist\")\n    add_definitions(-DASAN_DBG)\n    set(LIBSAN  libtsan.a)\nELSE(TSAN)\n    IF(ASAN)\n        set(MY_CMAKE_FLAGS  \"-g -O0 -fsanitize=address -fsanitize-recover=address -fno-omit-frame-pointer\")\n        add_definitions(-DLS_VG_DEBUG)\n        add_definitions(-DASAN_DBG)\n        add_definitions(-DDEBUG_POOL)\n        set(LIBSAN  libasan.a)\n    ENDIF(ASAN)\nENDIF(TSAN)\n```\n\n----------------------------------------\n\nTITLE: Defining Upload Progress Library\nDESCRIPTION: Configures the uploadprogress shared library build target and removes the default library prefix\nSOURCE: https://github.com/litespeedtech/openlitespeed/blob/master/src/modules/uploadprogress/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(uploadprogress SHARED\n    uploadprogress.cpp\n)\n\nset_target_properties(uploadprogress PROPERTIES PREFIX \"\")\n```\n\n----------------------------------------\n\nTITLE: Legacy Makefile Configuration Reference\nDESCRIPTION: Original Makefile.am configuration showing the equivalent autotools build setup for the FastCGI library. Includes source file definitions and distribution package contents.\nSOURCE: https://github.com/litespeedtech/openlitespeed/blob/master/src/extensions/fcgi/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: makefile\nCODE:\n```\n#noinst_LIBRARIES = libfcgi.a\n#\n#INCLUDES = $(all_includes)\n#\n#libfcgi_a_METASOURCES = AUTO\n#\n#libfcgi_a_SOURCES = fcgienv.cpp fcgiappconfig.cpp fcgiapp.cpp fcginamevaluepair.cpp fcgiconnection.cpp fcgirecord.cpp \n#\n#\n#EXTRA_DIST = fcgirecord.cpp fcgirecord.h fcgiconnection.cpp fcgiconnection.h fcginamevaluepair.cpp fcginamevaluepair.h fcgiapp.cpp fcgiapp.h fcgidef.h fcgiappconfig.cpp fcgiappconfig.h fcgienv.cpp fcgienv.h\n```\n\n----------------------------------------\n\nTITLE: Commented Context Tree Benchmark Executable\nDESCRIPTION: Contains a commented-out definition for a context tree benchmarking executable that is not currently part of the build.\nSOURCE: https://github.com/litespeedtech/openlitespeed/blob/master/src/CMakeLists.txt#2025-04-17_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\n# add_executable(ctbench\n#     modules/prelinkedmods.cpp\n#     ../test/http/contexttreebench.cpp\n#     httpdtest.cpp\n# )\n```\n\n----------------------------------------\n\nTITLE: Commented CMake Clean Files Configuration\nDESCRIPTION: A commented-out directive that would have set additional files to be cleaned during the 'make clean' process, specifically targeting the UnitTest++ library file.\nSOURCE: https://github.com/litespeedtech/openlitespeed/blob/master/src/modules/mod_lsphp/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n#set_directory_properties(PROPERTIES  ADDITIONAL_MAKE_CLEAN_FILES \"${PROJECT_SOURCE_DIR}/src/test/unittest-cpp/UnitTest++/libUnitTest++.a\")\n```\n\n----------------------------------------\n\nTITLE: Defining Main OpenLiteSpeed Source Files\nDESCRIPTION: Sets up the primary source files needed to build the OpenLiteSpeed web server executable. Includes the prelinked modules, HTTP daemon test, and main entry point file.\nSOURCE: https://github.com/litespeedtech/openlitespeed/blob/master/src/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nSET(openlitespeed_SRCS\n   modules/prelinkedmods.cpp\n   httpdtest.cpp\n   main.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Modifying Auto Globals Initialization in OPcache (C)\nDESCRIPTION: This snippet shows a change in the initialization of auto globals strings. The modification sets the third parameter of zend_string_init to 0 instead of 1, potentially affecting the persistence of the created string.\nSOURCE: https://github.com/litespeedtech/openlitespeed/blob/master/src/modules/mod_lsphp/php-7.2-opcache-patch.txt#2025-04-17_snippet_0\n\nLANGUAGE: C\nCODE:\n```\njit_auto_globals_str[i] = zend_string_init(jit_auto_globals_info[i].name, jit_auto_globals_info[i].len, 0);\n```\n\n----------------------------------------\n\nTITLE: GPL License Header Template for Source Files\nDESCRIPTION: A template for the license header that should be included at the beginning of each source file. It includes placeholders for program name, copyright year, and author name, along with the standard GPL license text.\nSOURCE: https://github.com/litespeedtech/openlitespeed/blob/master/GPL.txt#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n<one line to give the program's name and a brief idea of what it does.>\nCopyright (C) <year>  <name of author>\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses/>.\n```\n\n----------------------------------------\n\nTITLE: Terminal Program Interactive Mode License Notice\nDESCRIPTION: A template for the short notice that terminal-based programs should display when started in interactive mode. It includes copyright information and directs users to commands that show warranty and redistribution details.\nSOURCE: https://github.com/litespeedtech/openlitespeed/blob/master/GPL.txt#2025-04-17_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n<program>  Copyright (C) <year>  <name of author>\nThis program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\nThis is free software, and you are welcome to redistribute it\nunder certain conditions; type `show c' for details.\n```\n\n----------------------------------------\n\nTITLE: GPL License Notice Template for Source Files\nDESCRIPTION: A template for the standard GPL license notice that should be added to the beginning of source files when applying the GNU GPL to a new program. It includes placeholders for program name, copyright year, and author.\nSOURCE: https://github.com/litespeedtech/openlitespeed/blob/master/dist/GPL.txt#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n<one line to give the program's name and a brief idea of what it does.>\nCopyright (C) <year>  <name of author>\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses/>.\n```\n\n----------------------------------------\n\nTITLE: Terminal Interaction Notice for GPL Programs\nDESCRIPTION: A template for a short notice that GPL-licensed programs with terminal interaction should display when starting in interactive mode. It informs users about warranty disclaimers and redistribution conditions.\nSOURCE: https://github.com/litespeedtech/openlitespeed/blob/master/dist/GPL.txt#2025-04-17_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n<program>  Copyright (C) <year>  <name of author>\nThis program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\nThis is free software, and you are welcome to redistribute it\nunder certain conditions; type `show c' for details.\n```\n\n----------------------------------------\n\nTITLE: Original Makefile.am Reference for OpenLiteSpeed CGI Module\nDESCRIPTION: Contains commented-out content from the original Makefile.am, providing reference for the previous build configuration. It includes library definition, include paths, and source file listings.\nSOURCE: https://github.com/litespeedtech/openlitespeed/blob/master/src/extensions/cgi/CMakeLists.txt#2025-04-17_snippet_3\n\nLANGUAGE: Makefile\nCODE:\n```\n#original Makefile.am contents follow:\n\n######## kdevelop will overwrite this part!!! (begin)##########\n#noinst_LIBRARIES = libcgi.a\n#\n#INCLUDES = $(all_includes)\n#\n#libcgi_a_METASOURCES = AUTO\n#\n#libcgi_a_SOURCES = suexec.cpp cgidreq.cpp cgidconfig.cpp cgidworker.cpp cgidconn.cpp \n#\n#\n#EXTRA_DIST = cgidconn.cpp cgidconn.h cgidworker.cpp cgidworker.h cgidconfig.cpp cgidconfig.h cgidreq.cpp cgidreq.h lscgiddef.h suexec.cpp suexec.h \n#\n######## kdevelop will overwrite this part!!! (end)############\n```"
  }
]