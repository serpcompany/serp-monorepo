[
  {
    "owner": "vinyzu",
    "repo": "botright",
    "content": "TITLE: Installing Botright with Pip\nDESCRIPTION: These commands install Botright and its dependencies using pip, including upgrading pip, installing the library, installing browser binaries, and installing the hcaptcha solver.\nSOURCE: https://github.com/vinyzu/botright/blob/main/docs/index.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade pip\npip install botright\nplaywright install\npython -c 'import hcaptcha_challenger; solver.install(clip=True)'\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Botright Usage with Playwright in Python\nDESCRIPTION: This code shows how to integrate Botright with Playwright in Python's async mode. It initializes Botright, creates a new browser instance, navigates to a webpage, and closes the Botright client. It requires asyncio and the botright library.\nSOURCE: https://github.com/vinyzu/botright/blob/main/README.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\n\nimport botright\n\n\nasync def main():\n    botright_client = await botright.Botright()\n    browser = await botright_client.new_browser()\n    page = await browser.new_page()\n\n    # Continue by using the Page\n    await page.goto(\"https://google.com\")\n\n    await botright_client.close()\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Initializing Botright Session\nDESCRIPTION: Initializes a Botright session with configurable options such as headless mode, image blocking, response caching, user action layer visibility, element scrolling, and fingerprint spoofing.  The session is created using `await botright.Botright()` and returns a `Botright` object. Keyword arguments control browser behavior and stealth features.\nSOURCE: https://github.com/vinyzu/botright/blob/main/docs/botright.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nawait botright.Botright()\n```\n\n----------------------------------------\n\nTITLE: Creating a New Browser Instance\nDESCRIPTION: Creates a new Botright browser instance with optional proxy settings and Playwright context arguments.  `await botright_client.new_browser()` creates the browser, allowing specification of a proxy server address and leveraging Playwright's context configuration. It returns a `botright.extended_typing.Browser` object.\nSOURCE: https://github.com/vinyzu/botright/blob/main/docs/botright.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nawait botright_client.new_browser()\n```\n\n----------------------------------------\n\nTITLE: Basic Botright Usage Example\nDESCRIPTION: This Python code demonstrates the basic usage of Botright to launch a browser, open a page, navigate to a URL, and print the page title using asynchronous functions.\nSOURCE: https://github.com/vinyzu/botright/blob/main/docs/index.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nimport botright\n\n\nasync def main():\n    botright_client = await botright.Botright()\n    browser = await botright_client.new_browser()\n    page = await browser.new_page()\n\n    await page.goto(\"http://playwright.dev\")\n    print(await page.title())\n\n    await botright_client.close()\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Solving a reCaptcha\nDESCRIPTION: Solves a reCaptcha on the current page. `await page.solve_recaptcha()` is called to solve the captcha. It returns the solved `reCaptchaKey`.\nSOURCE: https://github.com/vinyzu/botright/blob/main/docs/botright.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nawait page.solve_recaptcha()\n```\n\n----------------------------------------\n\nTITLE: Solving an hCaptcha\nDESCRIPTION: Solves an hCaptcha on the current page using the optional rqData. `await page.solve_hcaptcha()` is called to initiate the solving process.  The `rqdata` parameter is used to mock the captcha. It returns the solved `hCaptchaKey`.\nSOURCE: https://github.com/vinyzu/botright/blob/main/docs/botright.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nawait page.solve_hcaptcha()\n```\n\n----------------------------------------\n\nTITLE: Getting an hCaptcha Key\nDESCRIPTION: Spawns a new page and attempts to solve an hCaptcha using the provided sitekey and rqData. `await page.get_hcaptcha()` triggers the captcha solving process. It requires the hCaptcha `sitekey` and optional `rqdata` as input, returning the solved `hCaptchaKey`.\nSOURCE: https://github.com/vinyzu/botright/blob/main/docs/botright.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nawait page.get_hcaptcha()\n```\n\n----------------------------------------\n\nTITLE: Solving a geeTest\nDESCRIPTION: Solves a geeTest (v3 or v4) captcha on the current page with a specified mode for IconCaptchas. `await page.solve_geetest()` initiates the solving process. The `mode` parameter specifies the algorithm used to solve the IconCaptchas, defaulting to `canny`. It returns the solved `geeTestKey`.\nSOURCE: https://github.com/vinyzu/botright/blob/main/docs/botright.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nawait page.solve_geetest()\n```\n\n----------------------------------------\n\nTITLE: Installing Botright with pip and Playwright\nDESCRIPTION: This snippet demonstrates how to install the Botright library using pip and then install the necessary Playwright browsers. Playwright is a prerequisite for Botright to function correctly.\nSOURCE: https://github.com/vinyzu/botright/blob/main/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install botright\nplaywright install\n```\n\n----------------------------------------\n\nTITLE: Botright Creep.js Example\nDESCRIPTION: This Python code demonstrates how to use Botright to navigate to Creep.js, wait for the page to load, and take a full-page screenshot, showcasing basic browser automation functionality.\nSOURCE: https://github.com/vinyzu/botright/blob/main/docs/index.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nimport botright\n\n\nasync def main():\n    botright_client = await botright.Botright()\n    browser = await botright_client.new_browser()\n    page = await browser.new_page()\n\n    await page.goto(\"https://abrahamjuliot.github.io/creepjs/\")\n    await page.wait_for_timeout(5000) # Wait for stats to load\n    await page.screenshot(path=\"example.png\", full_page=True)\n\n    await botright_client.close()\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Creating Virtual Environment\nDESCRIPTION: This command utilizes the `make virtualenv` command to create a virtual environment for the project using the specifications provided in the `Makefile`. This isolates the project's dependencies from the global Python environment, ensuring consistency and preventing conflicts. The `source .venv/bin/activate` command then activates the newly created virtual environment.\nSOURCE: https://github.com/vinyzu/botright/blob/main/docs/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake virtualenv\n```\n\nLANGUAGE: bash\nCODE:\n```\nsource .venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Botright REPL Example\nDESCRIPTION: This code snippet shows how to use Botright interactively within the Python REPL, demonstrating launching the browser, navigating to a website, taking a screenshot, and closing the browser.\nSOURCE: https://github.com/vinyzu/botright/blob/main/docs/index.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> import botright\n   >>> botright_client = await botright.Botright()\n   # Pass headless=False to botright.Botright() to see the browser UI\n   >>> browser = await botright_client.new_browser()\n   >>> page = await browser.new_page()\n   >>> await page.goto(\"https://abrahamjuliot.github.io/creepjs/\")\n   >>> await page.wait_for_timeout(5000) # Wait for stats to load\n   >>> await page.screenshot(path=\"example.png\", full_page=True)\n   >>> await botright_client.close()\n>>> botright_client = await botright.Botright()\n# Pass headless=False to botright.Botright() to see the browser UI\n>>> browser = await botright_client.new_browser()\n>>> page = await browser.new_page()\n>>> await page.goto(\"https://abrahamjuliot.github.io/creepjs/\")\n>>> await page.wait_for_timeout(5000) # Wait for stats to load\n>>> await page.screenshot(path=\"example.png\", full_page=True)\n>>> await botright_client.close()\n```\n\n----------------------------------------\n\nTITLE: Botright Pyinstaller Example\nDESCRIPTION: This Python code demonstrates a simple Botright script that navigates to a website and takes a screenshot. It is used as an example for creating a standalone executable with Pyinstaller.\nSOURCE: https://github.com/vinyzu/botright/blob/main/docs/index.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# main.py\nimport asyncio\nimport botright\n\n\nasync def main():\n    botright_client = await botright.Botright()\n    browser = await botright_client.new_browser()\n    page = await browser.new_page()\n\n    page.goto(\"http://whatsmyuseragent.org/\")\n    page.screenshot(path=\"example.png\")\n\n    await botright_client.close()\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Installing in Develop Mode\nDESCRIPTION: This command installs the project in develop mode using the `make install` command, which allows you to make changes to the source code and have them immediately reflected without needing to reinstall the package.  This is useful for development and testing.\nSOURCE: https://github.com/vinyzu/botright/blob/main/docs/CONTRIBUTING.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmake install\n```\n\n----------------------------------------\n\nTITLE: Configuring Pyinstaller with Botright (Bash)\nDESCRIPTION: This bash command sets the PLAYWRIGHT_BROWSERS_PATH environment variable to 0, installs Firefox using Playwright, and then uses Pyinstaller to create a single-file executable from main.py. This bundles the browser with the executable.\nSOURCE: https://github.com/vinyzu/botright/blob/main/docs/index.rst#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nPLAYWRIGHT_BROWSERS_PATH=0 playwright install firefox\npyinstaller -F main.py\n```\n\n----------------------------------------\n\nTITLE: Configuring Pyinstaller with Botright (Powershell)\nDESCRIPTION: This PowerShell script sets the PLAYWRIGHT_BROWSERS_PATH environment variable to 0, installs Firefox using Playwright, and then uses Pyinstaller to create a single-file executable from main.py. This bundles the browser with the executable.\nSOURCE: https://github.com/vinyzu/botright/blob/main/docs/index.rst#_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\n$env:PLAYWRIGHT_BROWSERS_PATH=\"0\"\nplaywright install firefox\npyinstaller -F main.py\n```\n\n----------------------------------------\n\nTITLE: Configuring Pyinstaller with Botright (Batch)\nDESCRIPTION: This batch script sets the PLAYWRIGHT_BROWSERS_PATH environment variable to 0, installs Firefox using Playwright, and then uses Pyinstaller to create a single-file executable from main.py. This bundles the browser with the executable.\nSOURCE: https://github.com/vinyzu/botright/blob/main/docs/index.rst#_snippet_6\n\nLANGUAGE: batch\nCODE:\n```\nset PLAYWRIGHT_BROWSERS_PATH=0\nplaywright install firefox\npyinstaller -F main.py\n```\n\n----------------------------------------\n\nTITLE: Adding Upstream Repository\nDESCRIPTION: This command adds the original Botright repository as a remote named `upstream`.  This allows you to fetch updates from the main repository and keep your fork synchronized.\nSOURCE: https://github.com/vinyzu/botright/blob/main/docs/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit remote add upstream https://github.com/Vinyzu/botright\n```\n\n----------------------------------------\n\nTITLE: Creating a New Branch\nDESCRIPTION: This command creates a new branch named `my_contribution` using `git checkout -b my_contribution`. This isolates your changes from the main branch, allowing you to work on your contribution without affecting the stable codebase.\nSOURCE: https://github.com/vinyzu/botright/blob/main/docs/CONTRIBUTING.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b my_contribution\n```\n\n----------------------------------------\n\nTITLE: Running Tests\nDESCRIPTION: This command executes the project's test suite using `make test`, ensuring that all tests pass and the codebase is functioning as expected. It is crucial to run tests before submitting any contributions.\nSOURCE: https://github.com/vinyzu/botright/blob/main/docs/CONTRIBUTING.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmake test\n```\n\n----------------------------------------\n\nTITLE: Cloning a Forked Repository\nDESCRIPTION: This command clones a forked repository from GitHub to your local machine.  Replace `YOUR_GIT_USERNAME` with your actual GitHub username.  This creates a local copy of the repository for development.\nSOURCE: https://github.com/vinyzu/botright/blob/main/docs/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:YOUR_GIT_USERNAME/botright.git\n```\n\n----------------------------------------\n\nTITLE: Pushing Changes to Fork\nDESCRIPTION: This command pushes the changes from the local branch `my_contribution` to the forked repository on GitHub using `git push origin my_contribution`. This makes your changes available for review and integration into the main project.\nSOURCE: https://github.com/vinyzu/botright/blob/main/docs/CONTRIBUTING.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ngit push origin my_contribution\n```\n\n----------------------------------------\n\nTITLE: Formatting Code\nDESCRIPTION: This command formats the code using the project's code formatter by running `make fmt`. This ensures that the codebase adheres to a consistent style, making it easier to read and maintain.\nSOURCE: https://github.com/vinyzu/botright/blob/main/docs/CONTRIBUTING.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmake fmt\n```\n\n----------------------------------------\n\nTITLE: Running Linter\nDESCRIPTION: This command runs the project's linter using `make lint`. Linters analyze the code for potential errors, style violations, and other issues, helping to maintain code quality and consistency.\nSOURCE: https://github.com/vinyzu/botright/blob/main/docs/CONTRIBUTING.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nmake lint\n```\n\n----------------------------------------\n\nTITLE: Project Dependencies\nDESCRIPTION: This snippet outlines the project dependencies, specifying the exact versions used. These dependencies are essential for the project's functionality, covering areas like asynchronous programming, HTTP requests, browser automation, math, image processing, and artificial intelligence.\nSOURCE: https://github.com/vinyzu/botright/blob/main/requirements.txt#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nasync_class #==0.5.0\nhttpx==0.27.0\nplaywright==1.42.0\nundetected-playwright-patch>=1.40.0.post1700587210000\npybrowsers==0.5.2\nchrome-fingerprints==1.1\n\n# Math and Others\nnumpy==1.26.4\n# scipy==1.11.4\n# Image Processing\n# Pillow==10.2.0\n\n\n# Artificial Intelligence\nhcaptcha_challenger>=0.10.1.post2\nrecognizer==1.4\n# yolov5==7.0.13\n# sentence_transformers #==2.2.2\n# easyocr==1.7.1\n# opencv-python~=4.9.0.80\nsetuptools~=69.5.1\nloguru==0.7.2\n```\n\n----------------------------------------\n\nTITLE: Makefile Targets List\nDESCRIPTION: This snippet showcases the available targets within the project's `Makefile`.  These targets provide shortcuts for common development tasks such as installing dependencies, formatting code, running tests, building documentation, and managing the project's virtual environment. The `make help` target displays the available targets and their descriptions. Each target maps to a shell command sequence to perform its described task.\nSOURCE: https://github.com/vinyzu/botright/blob/main/docs/CONTRIBUTING.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nUsage: make <target>\n\nTargets:\nhelp:             ## Show the help.\ninstall:          ## Install the project in dev mode.\nfmt:              ## Format code using black & isort.\nlint:             ## Run pep8, black, mypy linters.\ntest: lint        ## Run tests and generate coverage report.\nwatch:            ## Run tests on every change.\nclean:            ## Clean unused files.\nvirtualenv:       ## Create a virtual environment.\nrelease:          ## Create a new tag for release.\ndocs:             ## Build the documentation.\nswitch-to-poetry: ## Switch to poetry package manager.\ninit:             ## Initialize the project based on an application template.\n```\n\n----------------------------------------\n\nTITLE: Releasing a New Version\nDESCRIPTION: This command triggers the release process, which involves creating a new tag and pushing it to the remote repository using `make release`. The `make release` command will prompt for the new version number. The action will also update the changelog and make a commit. A `PIPY_API_TOKEN` secret must be set up on GitHub for automatic release to PyPI.\nSOURCE: https://github.com/vinyzu/botright/blob/main/docs/CONTRIBUTING.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nmake release\n```"
  }
]