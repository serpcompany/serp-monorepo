[
  {
    "owner": "pimcore",
    "repo": "pimcore",
    "content": "TITLE: Configuring Nginx for Pimcore Development Environment\nDESCRIPTION: This Nginx configuration is tailored for a Pimcore development environment. It includes settings for PHP-FPM, asset handling, thumbnails, and various Pimcore-specific requirements. Note that this configuration is not suitable for production use.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/23_Installation_and_Upgrade/03_System_Setup_and_Hosting/02_Nginx_Configuration.md#2025-04-17_snippet_0\n\nLANGUAGE: nginx\nCODE:\n```\nupstream php-pimcore10 {\n    server unix:/var/run/php/pimcore.sock;\n}\n\nmap $args $static_page_root {\n    default                                 /var/tmp/pages;\n    \"~*(^|&)pimcore_editmode=true(&|$)\"     /var/nonexistent;\n    \"~*(^|&)pimcore_preview=true(&|$)\"      /var/nonexistent;\n    \"~*(^|&)pimcore_version=[^&]+(&|$)\"     /var/nonexistent;\n}\n\nmap $uri $static_page_uri {\n    default                                 $uri;\n    \"/\"                                     /%home;\n}\n\nserver {\n    listen 80;\n    listen [::]:80;\n    server_name YOUPROJECT.local;\n    root /var/www/pimcore/public;\n    index index.php;\n    \n    # Filesize depending on your data\n    client_max_body_size 100m;\n\n    # It is recommended to seclude logs per virtual host\n    access_log  /var/log/access.log;\n    error_log   /var/log/error.log error;\n\n    # Protected Assets\n    #\n    ### 1. Option - Restricting access to certain assets completely\n    #\n    # location ~ ^/protected/.* {\n    #   return 403;\n    # }\n    # location ~ ^/var/.*/protected(.*) {\n    #   return 403;\n    # }\n    #\n    # location ~ ^/cache-buster\\-[\\d]+/protected(.*) {\n    #   return 403;\n    # }\n    #\n    ### 2. Option - Checking permissions before delivery\n    #\n    # rewrite ^(/protected/.*) /index.php$is_args$args last;\n    #\n    # location ~ ^/var/.*/protected(.*) {\n    #   return 403;\n    # }\n    #\n    # location ~ ^/cache-buster\\-[\\d]+/protected(.*) {\n    #   return 403;\n    # }\n\n    # Pimcore Head-Link Cache-Busting\n    rewrite ^/cache-buster-(?:\\d+)/(.*) /$1 last;\n\n    # Stay secure\n    #\n    # a) don't allow PHP in folders allowing file uploads\n    location ~* /var/assets/.*\\.php(/|$) {\n        return 404;\n    }\n    # b) Prevent clients from accessing hidden files (starting with a dot)\n    # Access to `/.well-known/` is allowed.\n    # https://www.mnot.net/blog/2010/04/07/well-known\n    # https://tools.ietf.org/html/rfc5785\n    location ~* /\\.(?!well-known/) {\n        deny all;\n        log_not_found off;\n        access_log off;\n    }\n    # c) Prevent clients from accessing to backup/config/source files\n    location ~* (?:\\.(?:bak|conf(ig)?|dist|fla|in[ci]|log|psd|sh|sql|sw[op])|~)$ {\n        deny all;\n    }\n\n    # Some Admin Modules need this:\n    # Server Info, Opcache\n    location ~* ^/admin/external {\n        rewrite .* /index.php$is_args$args last;\n    }\n    \n    # Thumbnails\n    location ~* .*/(image|video)-thumb__\\d+__.* {\n        try_files /var/tmp/thumbnails$uri /index.php;\n        expires 2w;\n        access_log off;\n        add_header Cache-Control \"public\";\n    }\n\n    # Assets\n    # Still use a allowlist approach to prevent each and every missing asset to go through the PHP Engine.\n    # If you are using remote storages like S3 or Google Cloud Storage, this doesn't work. You either deactivate it and handle it in PHP\n    # or redirect these suffixes directly to your CDN URL. Additionally you should configure the frontend url prefixes accordingly, see: https://pimcore.com/docs/pimcore/current/Development_Documentation/Installation_and_Upgrade/System_Setup_and_Hosting/File_Storage_Setup.html\n    location ~* ^(?!/admin|/asset/webdav)(.+?)\\.((?:css|js)(?:\\.map)?|jpe?g|gif|png|svgz?|eps|exe|gz|zip|mp\\d|m4a|ogg|ogv|webp|webm|pdf|docx?|xlsx?|pptx?)$ {\n        try_files /var/assets$uri $uri =404;\n        expires 2w;\n        access_log off;\n        log_not_found off;\n        add_header Cache-Control \"public\";\n    }\n\n    location / {\n        error_page 404 /meta/404;\n        try_files $static_page_root$static_page_uri.html $uri /index.php$is_args$args;\n    }\n\n    # Use this location when the installer has to be run\n    # location ~ /(index|install)\\.php(/|$) {\n    #\n    # Use this after initial install is done:\n    location ~ ^/index\\.php(/|$) {\n        send_timeout 1800;\n        fastcgi_read_timeout 1800;\n        # regex to split $uri to $fastcgi_script_name and $fastcgi_path_info\n        fastcgi_split_path_info ^(.+\\.php)(/.+)$;\n        # Check that the PHP script exists before passing it\n        try_files $fastcgi_script_name =404;\n        # include fastcgi.conf if needed\n        include fastcgi.conf;\n        # Bypass the fact that try_files resets $fastcgi_path_info\n        # see: http://trac.nginx.org/nginx/ticket/321\n        set $path_info $fastcgi_path_info;\n        fastcgi_param PATH_INFO $path_info;\n\n        # Activate these, if using Symlinks and opcache\n        # fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;\n        # fastcgi_param DOCUMENT_ROOT $realpath_root;\n\n        fastcgi_pass php-pimcore10;\n        # Prevents URIs that include the front controller. This will 404:\n        # http://domain.tld/index.php/some-path\n        # Remove the internal directive to allow URIs like this\n        internal;\n    }\n\n    # PHP-FPM Status and Ping\n    location /fpm- {\n        access_log off;\n        include fastcgi_params;\n        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n        location /fpm-status {\n            allow 127.0.0.1;\n            # add additional IP's or Ranges\n            deny all;\n            fastcgi_pass php-pimcore10;\n        }\n        location /fpm-ping {\n            fastcgi_pass php-pimcore10;\n        }\n    }\n    # nginx Status\n    # see: https://nginx.org/en/docs/http/ngx_http_stub_status_module.html\n    location /nginx-status {\n        allow 127.0.0.1;\n        deny all;\n        access_log off;\n        stub_status;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Building and Rendering Basic Navigation in Twig\nDESCRIPTION: Core example showing how to build a navigation container from the document structure and render it. The snippet demonstrates retrieving the navigation root node and setting up the main navigation container.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/03_Documents/03_Navigation.md#2025-04-17_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{# get root node if there is no document defined (for pages which are routed directly through static route) #}\n{% if not document is defined or not document %}\n    {% set document = pimcore_document(1) %}\n{% endif %}\n\n{# get the document which should be used to start in navigation | default home #}\n{% set navStartNode = document.getProperty('navigationRoot') %}\n{% if not navStartNode is instanceof('\\\\Pimcore\\\\Model\\\\Document\\\\Page') %}\n    {% set navStartNode = pimcore_document(1) %}\n{% endif %}\n\n{% set mainNavigation = pimcore_build_nav({\n    active: document,\n    root: navStartNode\n}) %}\n\n{# later you can render the navigation #}\n{{ pimcore_render_nav(mainNavigation) }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Virtual Host for Pimcore in Apache\nDESCRIPTION: This Apache virtual host configuration sets up SSL, PHP handling via FastCGI, and necessary rewrite rules for Pimcore. It includes settings for document root, SSL certificates, and logging.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/23_Installation_and_Upgrade/03_System_Setup_and_Hosting/01_Apache_Configuration.md#2025-04-17_snippet_1\n\nLANGUAGE: apacheconf\nCODE:\n```\n<VirtualHost *:443>\n        ServerName YOUPROJECT.local\n        DocumentRoot  /var/www/public\n\n        <FilesMatch \\.php$>\n            SetHandler \"proxy:unix:/var/run/php/pimcore.sock|fcgi://localhost\"\n        </FilesMatch>\n\n        <Directory /var/www/public>\n                Options FollowSymLinks\n                AllowOverride All\n                Require all granted\n        </Directory>\n\n        SSLEngine on\n        # NEEDS TO BE CHANGED\n        SSLCertificateFile /etc/getssl/YOUPROJECT.local/YOUPROJECT.local.crt\n        SSLCertificateKeyFile /etc/getssl/YOUPROJECT.local/YOUPROJECT.local.key\n        SSLCertificateChainFile /etc/getssl/YOUPROJECT.local/chain.crt\n\n        RewriteEngine On\n\n        # THE FOLLOWING NEEDS TO BE THE VERY LAST REWRITE RULE IN THIS VHOST\n        # this is needed to pass the auth header correctly - fastcgi environment\n        RewriteRule \".*\" \"-\" [E=HTTP_AUTHORIZATION:%{HTTP:Authorization},L]\n\n        ErrorLog ${APACHE_LOG_DIR}/YOUPROJECT.local_443_error.log\n        CustomLog ${APACHE_LOG_DIR}/YOUPROJECT.local_443_access.log combined\n</VirtualHost>\n```\n\n----------------------------------------\n\nTITLE: Working with Pimcore Object Listings in PHP\nDESCRIPTION: Shows how to use object listings to retrieve, filter, and sort Pimcore objects. Includes examples of setting conditions, using prepared statements, and applying various filtering and ordering options.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/03_Working_with_PHP_API.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse \\Pimcore\\Model\\DataObject;\n\n$entries = new DataObject\\Myclassname\\Listing();\n$entries->setOffset($offset);\n$entries->setLimit($perPage);\n$entries->setOrderKey(\"date\");\n$entries->setOrder(\"desc\");\n$entries->setCondition(\"name LIKE ?\", [\"%bernie%\"]); // use prepared statements! Mysqli only supports ? placeholders\n// or\n$entries->setCondition(\"name LIKE :name\", [\"name\" => \"%bernie%\"]); // With PDO_Mysql you can use named parameters\n// to add param to the condition (until build 181 this cannot be used with setCondition in the same listing, you should use setCondition OR addConditionParam but not both)\n$entries->addConditionParam(\"city = ?\", \"New York\", \"AND\"); // concatenator can be AND or OR\n\n//use array bindings for prepared statements\n$entries->setCondition(\"city IN (?)\", [[\"New York\", \"Chicago\"]]);\n// or\n$entries->setCondition(\"city IN (:cities)\", [\"cities\" => [\"New York\", \"Chicago\"]]); // named parameters\n\n//if necessary you can of course custom build your query\n$entries->setCondition(\"name LIKE \" . $entries->quote(\"%bernie%\")); // make sure that you quote variables in conditions!\n\n// some data types support direct filtering, which can be verified via 'isFilterable()' method on field definition:\nif ($entries->getClass()->getFieldDefinition('fieldname e.g. name or age or city')->isFilterable()) {\n    $entries->filterByName('Jan'); // filters for name='Jan'\n    $entries->filterByAge(18, '>='); // filters for age >= 18\n    $entries->filterByCity([[\"New York\", \"Chicago\"]], 'IN (?)'); // filters for city IN ('New York','Chicago')\n}\n\nforeach ($entries as $entry) {\n    $entry->getName();\n}\n \n// there is also a shorthand eg.:\n$items = DataObject\\Myclassname::getList([\n    \"offset\" => $offset,\n    \"limit\" => $perPage,\n    \"orderKey\" => \"date\",\n    \"order\" => \"desc\"\n]);\n \n// order by multiple columns\n$items = DataObject\\Myclassname::getList([\n    \"offset\" => $offset,\n    \"limit\" => $perPage,\n    \"orderKey\" => [\"date\", \"name\"],\n    \"order\" => \"desc\"\n]);\n \n// with different directions\n$items = DataObject\\Myclassname::getList([\n    \"offset\" => $offset,\n    \"limit\" => $perPage,\n    \"orderKey\" => [\"name\", \"date\"],\n    \"order\" => [\"asc\",\"desc\"]\n]);\n \n// with random order\n$items = new DataObject\\PhoneProduct\\Listing();\n$items->setOrderKey(\"RAND()\", false);\n \nforeach ($items as $item) {\n    echo $item . \"<br />\"; // output the path of the object\n}\n \n// with subselect in order\n$items = new DataObject\\PhoneProduct\\Listing();\n$items->setOrderKey(\"(SELECT id FROM sometable GROUP BY someField)\", false);\n```\n\n----------------------------------------\n\nTITLE: Setting HTTP Security Headers in Nginx\nDESCRIPTION: This snippet configures various HTTP security headers, including Content-Security-Policy, Referrer-Policy, Feature-Policy, and X-Frame-Options. These headers enhance the security of the web application.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/23_Installation_and_Upgrade/03_System_Setup_and_Hosting/02_Nginx_Configuration.md#2025-04-17_snippet_4\n\nLANGUAGE: nginx\nCODE:\n```\nserver_tokens off;\n\nadd_header Content-Security-Policy \"default-src 'self';\" always;\n\nadd_header Referrer-Policy same-origin;\n\nadd_header Feature-Policy \"geolocation 'none';midi 'none';sync-xhr 'none';microphone 'none';camera 'none';magnetometer 'none';gyroscope 'none';fullscreen 'self';payment 'none';\";\nadd_header Permissions-Policy \"geolocation=(), midi=(), sync-xhr=(), microphone=(), camera=(), magnetometer=(), gyroscope=(), fullscreen=(self), payment=()\";\n\nadd_header X-Frame-Options \"SAMEORIGIN\" always;\n\nadd_header X-Xss-Protection \"1; mode=block\" always;\n\nadd_header X-Content-Type-Options \"nosniff\" always;\n```\n\n----------------------------------------\n\nTITLE: Configuring PHP 8 Opcache and JIT in php.ini\nDESCRIPTION: This snippet shows the configuration settings to enable Opcache and JIT compiler in PHP 8 for improved performance. It enables Opcache for both server and CLI modes, and sets the JIT buffer size.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/23_Installation_and_Upgrade/03_System_Setup_and_Hosting/09_Performance_Guide.md#2025-04-17_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nopcache.enable=1 # enables the Opcache for PHP server\nopcache.enable_cli=1 # enables the Opcache for CLI mode\nopcache.jit_buffer_size=256M # JIT buffer memory size. 0 value disables the JIT compiler.\n```\n\n----------------------------------------\n\nTITLE: Creating Symfony Bundle Extension Class for Service Loading\nDESCRIPTION: Implementation of a Symfony bundle extension class that loads service definitions from a YAML configuration file. The extension follows naming conventions and uses YamlFileLoader to load service definitions from a specified configuration directory.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/20_Extending_Pimcore/13_Bundle_Developers_Guide/01_Loading_Service_Definitions.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// src/MyBundle/DependencyInjection/AppExtension.php\n\nnamespace MyBundle\\DependencyInjection;\n\nuse Symfony\\Component\\Config\\FileLocator;\nuse Symfony\\Component\\DependencyInjection\\ContainerBuilder;\nuse Symfony\\Component\\DependencyInjection\\Extension\\Extension;\nuse Symfony\\Component\\DependencyInjection\\Loader\\YamlFileLoader;\n\nclass AppExtension extends Extension\n{\n    public function load(array $configs, ContainerBuilder $container): void\n    {\n        // create a YamlFileLoader - this could also be a XmlFileLoader if you want to load XML \n        $loader = new YamlFileLoader(\n            $container,\n            // looks in src/MyBundle/Resources/config\n            new FileLocator(__DIR__ . '/../Resources/config')\n        );\n\n        // load services.yaml\n        $loader->load('services.yaml');\n        \n        // more load() calls as needed...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Pimcore Objects by Field Values\nDESCRIPTION: Demonstrates various methods to retrieve Pimcore objects based on specific field values, including handling of localized fields and object variants.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/03_Working_with_PHP_API.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse \\Pimcore\\Model\\DataObject;\n\n// get a list of cities in Austria\n$list = DataObject\\City::getByCountry(\"AT\");\nforeach ($list as $city) {\n    // do something with the cities\n    $city->getZip();\n    ...\n}\n \n \n// get a city by zip\n$city = DataObject\\City::getByZip(5020, 1);\n$city->getZip(); // do something with the city\n \n \n \n// get the first 10 cities in Austria\n$list = DataObject\\City::getByCountry(\"AT\", 10);\nforeach ($list as $city) {\n    // do something with the cities\n    $city->getZip();\n}\n\n// Get Objects matching a value of a property\n$result = DataObject\\ClassName::getByMyfieldname($value, ['limit' => $limit, 'offset' => $offset]);\n\n// or object variants matching a value\n$result = DataObject\\ClassName::getByMyfieldname($value, ['limit' => $limit, 'offset' => $offset, 'objectTypes' => [DataObject::OBJECT_TYPE_VARIANT]]);\n\n// or for localized fields\n$result = DataObject\\ClassName::getByMyfieldname($value, ['locale' => $locale, 'limit' => $limit, 'offset' => $offset]);\n\n// or object variants matching a value in localized fields\n$result = DataObject\\ClassName::getByMyfieldname($value, ['locale' => $locale, 'limit' => $limit, 'offset' => $offset, 'objectTypes' => [DataObject::OBJECT_TYPE_VARIANT]]);\n\n// or object variants and objects matching a value in localized fields\n$result = DataObject\\ClassName::getByMyfieldname($value, ['locale' => $locale, 'limit' => $limit, 'offset' => $offset, 'objectTypes' => [DataObject::OBJECT_TYPE_VARIANT, DataObject::OBJECT_TYPE_OBJECT]]);\n\n// Get an Object List/Object by Localized Fields\n$list = DataObject\\News::getByLocalizedfields($fieldName, $value, $locale, $limit | array('limit' => $limit, 'offset' => $offset, 'unpublished' => $unpublished));\n\n// or\n$list = DataObject\\News::getByFieldName($value, $locale, $limit | array('limit' => $limit, 'offset' => $offset, 'unpublished' => $unpublished));\n```\n\n----------------------------------------\n\nTITLE: Using Pimcore Thumbnails in Twig Templates\nDESCRIPTION: Demonstrates various ways to implement Pimcore's thumbnail functionality in Twig templates, including using predefined configurations and dynamic settings. Shows usage with direct asset objects, document image editables, and from object fields.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/02_MVC/02_Template/04_Thumbnails.md#2025-04-17_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{# Use directly on the asset object - myThumbnail is the name of the thumbnail configured in thumbnail configuration #}\n{% set asset = asset('/path/to/image.jpg') %}\n{{ asset.getThumbnail('myThumbnail').getHtml() | raw }}\n\n{# Use directly on the asset object using dynamic configuration #}\n{% set asset = asset('/path/to/image.jpg') %}\n{{ asset.getThumbnail({\n    width: 500,\n    format: 'png'\n}).getHtml() | raw }}\n\n{# Use with the image editable in documents #}\n<div>\n    <p> \n    {{ pimcore_image('image', {\n        thumbnail: 'myThumbnail',\n       })\n    }}\n    </p>\n</div>\n\n{# Use with the image editable in documents using dynamic configuration #}\n{{ pimcore_image('image', {\n    thumbnail: {\n        width: 500,\n        height: 0,\n        aspectratio: true,\n        interlace: true,\n        quality: 95,\n        format: 'PNG'\n    }\n}) }}\n\n{# Use from an object-field #}\n{% if myObject.myImage is instanceof('Asset\\\\Image') %}\n    <img src=\"{{ myObject.myImage.getThumbnail('myThumbnail').getHref() }}\" />\n{% endif %}\n\n{# Use from an object-field using dynamic configuration #}\n{% if myObject.myImage is instanceof('Asset\\\\Image') %}\n    <img src=\"{{ myObject.myImage.getThumbnail({width: 220, format: 'jpeg'}).getHref() }}\" />\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Implementing an IFrame Areabrick Class in PHP\nDESCRIPTION: Example of a PHP class for an IFrame area brick that provides metadata for the extension manager and template auto-discovery. The class includes methods for name, description, and reload behavior.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/03_Documents/01_Editables/02_Areablock/02_Bricks.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// src/Document/Areabrick/Iframe.php\n\nnamespace App\\Document\\Areabrick;\n\nuse Pimcore\\Extension\\Document\\Areabrick\\AbstractTemplateAreabrick;\n\nclass Iframe extends AbstractTemplateAreabrick\n{\n    public function getName(): string\n    {\n        return 'IFrame';\n    }\n\n    public function getDescription(): string\n    {\n        return 'Embed contents from other URL (websites) via iframe';\n    }\n    \n    public function needsReload(): bool\n    {\n        // optional\n        // here you can decide whether adding this bricks should trigger a reload\n        // in the editing interface, this could be necessary in some cases. default=false\n        return false;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Content Template with Pimcore Editables\nDESCRIPTION: This Twig template extends a layout and defines a content block with Pimcore editables. It includes an input field for a headline and an iterable block containing sublines and WYSIWYG content areas that can be managed through the Pimcore admin interface.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/01_Getting_Started/06_Create_a_First_Project.md#2025-04-17_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% extends 'layout.html.twig' %}\n\n{% block content %}\n    <h1>{{ pimcore_input(\"headline\", {\"width\": 540}) }}</h1>\n\n    {% for i in pimcore_iterate_block(pimcore_block('contentblock')) %}\n        <h2>{{ pimcore_input('subline') }}</h2>\n        {{ pimcore_wysiwyg('content') }}\n    {% endfor %}\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Options Provider in PHP for Pimcore Select Types\nDESCRIPTION: This PHP class implements the SelectOptionsProviderInterface to provide dynamic options for select fields in Pimcore. It includes methods for generating options, setting default values, and determining if options are static.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/01_Object_Classes/01_Data_Types/30_Dynamic_Select_Types.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Website;\n\nuse Pimcore\\Model\\DataObject\\ClassDefinition\\Data;\nuse Pimcore\\Model\\DataObject\\ClassDefinition\\DynamicOptionsProvider\\SelectOptionsProviderInterface;\n\n\nclass OptionsProvider implements SelectOptionsProviderInterface\n{\n    public function getOptions(array $context, Data $fieldDefinition): array\n    {\n        $object = isset($context[\"object\"]) ? $context[\"object\"] : null;\n        $fieldname = \"id: \" . ($object ? $object->getId() : \"unknown\") . \" - \" .$context[\"fieldname\"];\n        $result = array(\n\n            array(\"key\" => $fieldname .\" == A\", \"value\" => 2),\n            array(\"key\" => $fieldname .\" == C\", \"value\" => 4),\n            array(\"key\" => $fieldname .\" == F\", \"value\" => 5)\n\n        );\n        return $result;\n    }\n\n    /**\n     * Returns the value which is defined in the 'Default value' field\n     */\n    public function getDefaultValue(array $context, Data $fieldDefinition): ?string \n    {\n        if (method_exists($fieldDefinition, 'getDefaultValue')) {\n            return $fieldDefinition->getDefaultValue();\n        }\n\n        return null;\n    }\n\n    public function hasStaticOptions(array $context, Data $fieldDefinition): bool\n    {\n        return true;\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Performing CRUD Operations on Pimcore Objects in PHP\nDESCRIPTION: Demonstrates how to create, read, update, and delete Pimcore objects using the PHP API. Includes examples of setting object properties, saving objects with version notes, and retrieving objects by ID, foreign ID, or path.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/03_Working_with_PHP_API.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse \\Pimcore\\Model\\DataObject;\n\n// Create a new object\n$newObject = new DataObject\\Myclassname(); \n$newObject->setKey(\\Pimcore\\Model\\Element\\Service::getValidKey('New Name', 'object'));\n$newObject->setParentId(123);\n$newObject->setName(\"New Name\");\n$newObject->setDescription(\"Some Text\");\n\n// the optional parameter allows you to provide additional info\n// currently supported:\n//      * versionNote: note added to the version (see version tab)\n$newObject->save([\"versionNote\" => \"my new version\"]);\n\n\n//getting objects\n$myObject = DataObject\\Myclassname::getById(167);\n\n//reading data\n$myObject->getName();\n$myObject->getDescription();\n\n// it's also possible to get an object by an foreign ID\n$city = DataObject\\City::getByZip(5020,1);\n\n// you can also get an object by id where you don't know the type\n$object = DataObject::getById(235);\n\n// or obtain an object by path\n$object = DataObject::getByPath(\"/path/to/the/object\");\n\n// or get data objects matching a defined set of object types (default is to fetch data objects and variants)\n$product = DataObject\\Product::getByColor('purple', 1, 0, [Product::OBJECT_TYPE_VARIANT]);\n\n//updating and saving objects\n$myObject->setName(\"My Name\");\n$myObject->save();\n\n\n//deleting objects\n$city->delete();\n```\n\n----------------------------------------\n\nTITLE: Loading and Editing an Existing Document in Pimcore PHP\nDESCRIPTION: This snippet shows how to load an existing document by ID, access its WYSIWYG editable content, and modify the content. It demonstrates getting and setting editable values, as well as saving changes.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/03_Documents/09_Working_with_PHP_API.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n//LOAD A DOCUMENT\n$document = \\Pimcore\\Model\\Document::getById(4);\nif($document) {\n    //the logic when the type of the document is page\n    /** @var \\Pimcore\\Model\\Document\\Page $document */\n\n    /** @var \\Pimcore\\Model\\Document\\Editable\\Wysiwyg $wysiwygElement */\n    $wysiwygElement = $document->getEditable('content');\n    var_dump($wysiwygElement->getData());\n\n}\n```\n\nLANGUAGE: php\nCODE:\n```\n//...\n/** @var \\Pimcore\\Model\\Document\\Editable\\Wysiwyg $wysiwygElement */\n$wysiwygElement = $document->getEditable('content');\n$wysiwygElement->setDataFromResource('<p>Lorem Ipsum is simply dummy text of the printing and typesetting.</p>');\n$document->save(); //save changes in the document\n```\n\n----------------------------------------\n\nTITLE: Accessing Localized Field Data in Pimcore PHP\nDESCRIPTION: These examples demonstrate how to retrieve localized field data from a Pimcore object, both using the globally registered locale and specifying a particular language.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/01_Object_Classes/01_Data_Types/50_Localized_Fields.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// with global registered locale\n$object = DataObject::getById(234);\n$object->getInput1(); // will return the en_US data for the field \"input1\"\n\n\n// get specific localized data, regardless which locale is globally registered\n$object->getInput1(\"de\"); // will return the German value for the field \"input1\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Pagination with Knp Paginator in Pimcore\nDESCRIPTION: Complete example of implementing pagination using Knp Paginator, including controller action, view template, and pagination partial.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/03_Working_with_PHP_API.md#2025-04-17_snippet_8\n\nLANGUAGE: php\nCODE:\n```\npublic function testAction(Request $request, \\Knp\\Component\\Pager\\PaginatorInterface $paginator): Response\n{\n    $list = new DataObject\\Simple\\Listing();\n    $list->setOrderKey(\"name\");\n    $list->setOrder(\"asc\");\n \n    $paginator = $paginator->paginate(\n        $list,\n        $request->query->getInt('page', 1),\n        10\n    );\n\n    return $this->render('Test/Test.html.twig', [\n        'paginator' => $paginator,\n        'paginationVariables' => $paginator->getPaginationData()\n    ]);\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% for item in paginator %}\n    <h2>{{ item.name }}</h2>\n{% endfor %}\n<br />\n \n{% include 'includes/pagination.html.twig' %}\n```\n\nLANGUAGE: twig\nCODE:\n```\n<nav aria-label=\"Pagination\">\n    <ul class=\"pagination justify-content-center\">\n        {%  if(paginationVariables.previous is defined) %}\n            <li class=\"page-item\">\n                <a class=\"page-link prev\" href=\"{{  pimcore_url({'page': paginationVariables.previous}) }}\" aria-label=\"Previous\">\n                    <span aria-hidden=\"true\"></span>\n                </a>\n            </li>\n        {%  endif %}\n\n        {%  for page in paginationVariables.pagesInRange %}\n\n            {%  if(paginationVariables.current == page) %}\n\n                <li class=\"page-item active\" aria-current=\"page\">\n                                  <span class=\"page-link\">\n                                    {{  page }}\n                                    <span class=\"sr-only\">(current)</span>\n                                  </span>\n                </li>\n\n            {%  else %}\n                <li class=\"page-item\"><a class=\"page-link\" href=\"{{  pimcore_url({'page': page}) }}\">{{ page }}</a></li>\n            {%  endif %}\n\n        {% endfor %}\n\n        {%  if(paginationVariables.next is defined) %}\n            <li class=\"page-item\">\n                <a class=\"page-link next\" href=\"{{  pimcore_url({'page': paginationVariables.next}) }}\" aria-label=\"Next\">\n                    <span class=\"flip\" aria-hidden=\"true\"></span>\n                </a>\n            </li>\n        {%  endif %}\n    </ul>\n</nav>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Pimcore Console Command in PHP\nDESCRIPTION: Example of creating a custom console command by extending Pimcore's AbstractCommand class. Shows usage of various output methods including dump(), writeError(), writeInfo(), writeComment(), and writeQuestion().\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/19_Development_Tools_and_Details/11_Console_CLI.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Command;\n\nuse Pimcore\\Console\\AbstractCommand;\nuse Symfony\\Component\\Console\\Attribute\\AsCommand;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\n#[AsCommand(\n    name: 'awesome:command',\n    description: 'Awesome command'\n)]\nclass AwesomeCommand extends AbstractCommand\n{\n    protected function execute(InputInterface $input, OutputInterface $output): int\n    {\n        // dump\n        $this->dump(\"Isn't that awesome?\");\n\n        // add newlines through flags\n        $this->dump(\"Dump #2\");\n\n        // only dump in verbose mode\n        $this->dumpVerbose(\"Dump verbose\");\n        \n        // Output as white text on red background.\n        $this->writeError('oh noes!');\n\n        // Output as green text.\n        $this->writeInfo('info');\n\n        // Output as blue text.\n        $this->writeComment('comment');\n\n        // Output as yellow text.\n        $this->writeQuestion('question');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retina and Custom Thumbnail Image Examples in Twig\nDESCRIPTION: Examples of creating retina images, custom thumbnails and drop targets using Pimcore's image component in Twig templates. Includes configuration for high resolution displays and custom drop zones.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/03_Documents/01_Editables/14_Image.md#2025-04-17_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{# Get retina image #}\n{{ pimcore_image(\"myImage\", {\n    \"thumbnail\": {\n        \"width\": 200,\n        \"height\": 200\n    },\n    \"highResolution\": 2\n}) }}\n\n{# Will output<img src=\"/var/thumb_9999__auto_xxxxxxxx@2x.png\" width=\"200\" height=\"200\" /> <!-- but the real image size is 400x400 pixel --> #}\n\n\n{# Custom image tag (thumbnail objects) #}\n{% if editmode %}\n    {{ pimcore_image(\"myImage\", {\"thumbnail\": \"myThumbnail\"}) }}\n{% else %}\n    {% set thumbnail = pimcore_image(\"myImage\").getThumbnail(\"myThumbnail\") %}\n    <img src=\"{{ thumbnail }}\" width=\"{{ thumbnail.width }}\" height=\"{{ thumbnail.height }}\" />\n{% endif %}\n\n\n\n\n{# Custom drop targets #}\n<div class=\"myCustomImageDropTarget anotherClass\">My first alternative drop target</div>\n{{ pimcore_image(\"image\", {\n    \"thumbnail\": \"contentfullimage\",\n    \"dropClass\": \"myCustomImageDropTarget\"\n}) }}\n<div class=\"myCustomImageDropTarget someClass\">My second alternative drop target</div>\n```\n\n----------------------------------------\n\nTITLE: Assigning Relations via PHP API\nDESCRIPTION: Demonstrates how to set Many-To-One and Many-To-Many relations using PHP API in Pimcore\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/01_Object_Classes/01_Data_Types/70_Relation_Types.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Pimcore\\Model\\DataObject;\nuse Pimcore\\Model\\Document;\nuse Pimcore\\Model\\Asset;\n\n$object = DataObject::getById(12345);\n\n$object->setMyManyToOneField(Document::getById(23));\n\n$object->setMyManyToManyField([\n    Asset::getById(350),\n    DataObject::getByPath(\"/products/testproduct\")\n]);\n\n$object->setMyManyToManyObjectField([\n    DataObject\\Product::getById(98),\n    DataObject\\Product::getById(99)\n]);\n\n$object->save();\n```\n\n----------------------------------------\n\nTITLE: Embedding Images in Email with Pimcore\\Mail in PHP\nDESCRIPTION: Shows how to embed images in an email using Pimcore\\Mail. It demonstrates two methods of embedding: using asset data directly or using the asset's file path.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/19_Development_Tools_and_Details/25_Email_Framework/01_Pimcore_Mail.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$mail = new \\Pimcore\\Mail();\n$mail->to('example@pimcore.org');\n\n$mail->embed($asset->getData(), 'logo', $asset->getMimeType());\n//or\n$mail->embedFromPath($asset->getRealFullPath(), 'logo', $asset->getMimeType());\n\n$mail->html(\"Embedded Image: <img src='cid:logo'>\"); //image name(passed second argument in embed) as ref\n$mail->send();\n```\n\n----------------------------------------\n\nTITLE: Implementing Date Editable with Custom Format in Twig\nDESCRIPTION: This snippet demonstrates how to create a date widget in Pimcore using the pimcore_date function. It specifies a custom format for editmode and an ISO format for frontend output. The example uses 'd.m.Y' for editmode and 'DD.MM.YYYY' for frontend display.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/03_Documents/01_Editables/10_Date.md#2025-04-17_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ pimcore_date(\"myDate\", {\n    \"format\": \"d.m.Y\",\n    \"outputIsoFormat\": \"DD.MM.YYYY\"\n}) }}\n```\n\n----------------------------------------\n\nTITLE: Area Editable with Parameters in Twig\nDESCRIPTION: An advanced example showing how to implement an Area editable with custom parameters. This demonstrates passing specific parameters to the 'gallery-single-images' brick that can be accessed within the brick template.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/03_Documents/01_Editables/04_Area.md#2025-04-17_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n<div>\n    {{ pimcore_area(\"myArea\", {\n        type: \"gallery-single-images\",\n        params: {\n            \"gallery-single-images\": {\n                \"param1\": 123,\n            }\n        }\n    }) }}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Performing CRUD Operations on Assets in Pimcore PHP\nDESCRIPTION: This snippet demonstrates how to create, read, update, and delete assets using Pimcore's PHP API. It includes examples of setting asset properties, saving with version notes, and retrieving assets by ID or path.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/04_Assets/01_Working_with_PHP_API.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n//creating and saving new asset\n$newAsset = new \\Pimcore\\Model\\Asset();\n$newAsset->setFilename(\"myAsset.png\");\n$newAsset->setData(file_get_contents(\"some-file.png\"));\n$newAsset->setParent(\\Pimcore\\Model\\Asset::getByPath(\"/\"));\n\n// the optional parameter allows you to provide additional info\n// currently supported:\n//      * versionNote: note added to the version (see version tab)\n$newAsset->save([\"versionNote\" => \"my new version\"]);\n\n//getting assets\n$asset1 = \\Pimcore\\Model\\Asset::getById(3456);\n$asset2 = \\Pimcore\\Model\\Asset::getByPath(\"/my-assets/sample.png\");\n\n//updating assets\n$asset1->setData(file_get_contents(\"some-updated-file.png\"));\n$asset1->save();\n\n//deleting assets\n$asset2->delete();\n```\n\n----------------------------------------\n\nTITLE: Implementing PathFormatterInterface in PHP for Pimcore\nDESCRIPTION: A sample path formatter class that implements custom path formatting for assets and objects in Pimcore. It handles different types of elements (News, BlogArticle, Assets) and can display custom information including asset metadata and object properties. The formatter supports context-aware formatting and handles batch operations.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/01_Object_Classes/05_Class_Settings/50_Path_Formatter.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\PathFormatter;\n\nuse Pimcore\\Model\\Asset;\nuse Pimcore\\Model\\Element\\ElementInterface;\nuse Pimcore\\Model\\DataObject\\BlogArticle;\nuse Pimcore\\Model\\DataObject\\ClassDefinition\\Data;\nuse Pimcore\\Model\\DataObject\\ClassDefinition\\PathFormatterInterface;\nuse Pimcore\\Model\\DataObject\\Concrete;\nuse Pimcore\\Model\\DataObject\\News;\n\nclass TheFormatter implements PathFormatterInterface\n{\n    /**\n     * @param array $result containing the nice path info. Modify it or leave it as it is. Pass it out afterwards!\n     * @param ElementInterface $source the source object\n     * @param array $targets list of nodes describing the target elements\n     * @param array $params optional parameters. may contain additional context information in the future. to be defined.\n     * \n     * @return array list of display names.\n     */\n    public function formatPath(array $result, ElementInterface $source, array $targets, array $params): array\n    {\n        /** @var Data $fd */\n        $fd = $params['fd'];\n        $context = $params['context'];\n\n        foreach ($targets as $key => $item) {\n            $newPath = ($item['path'] ?? $item['fullpath']) . ' - ' . time();\n            if (isset($context['language'])) {\n                $newPath .= ' ' . $context['language'];\n            }\n\n            if ($item['type'] === 'object') {\n                $targetObject = Concrete::getById($item['id']);\n                if ($targetObject instanceof News) {\n                    $newPath = $targetObject->getTitle() . ' - ' . $targetObject->getShortText();\n                }  else if ($targetObject instanceof BlogArticle) {\n                    $newPath = $targetObject->getTitle();\n                }\n            } elseif ($item['type'] === 'asset') {\n                $asset = Asset::getById($item['id']);\n                if ($asset) {\n                    $title = $asset->getMetadata('title');\n\n                    if (!$title) {\n                        $title = 'this asset does not have a title, use ' . $newPath . ' instead';\n                    }\n                    if ($fd instanceof Data\\ManyToManyRelation) {\n                        $newPath = '<img src=\"' . $asset . '\" style=\"width: 25px; height: 18px;\" />' . $title;\n                    } else {\n                        $newPath = $title;\n                    }\n                }\n            }\n                \n            // don't forget to use the same key, otherwise the matching doesn't work\n            $result[$key] = $newPath;\n        }\n\n        return $result;\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing Pimcore FrontendController with Various Response Types\nDESCRIPTION: This code demonstrates a DefaultController that extends FrontendController with multiple action methods showcasing different ways to return responses in Pimcore. It includes examples of template rendering, using attributes, adding response headers, and returning JSON or custom responses.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/02_MVC/00_Controller.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Controller;\n\nuse Pimcore\\Controller\\FrontendController;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Pimcore\\Controller\\Attribute\\ResponseHeader;\n\nclass DefaultController extends FrontendController\n{   \n    /**\n    * Very simple example using $this->>render() and passing the parameter 'foo'\n    */\n    public function myAction(): Response\n    {\n        return $this->render('content/default.html.twig', [\"foo\" => \"bar\"]);\n    }\n\n    /**\n     * Example using the #[Template] attribute to resolve the view. \n     * The frontend controller also provides methods to add response headers or via attributes without having\n     * access to the final response object (as it is automatically created when rendering the view).\n     *\n     */\n     #[Template('/default/header.html.twig')]\n     #[ResponseHeader(key: \"X-Foo\", values: [\"123456\", \"98765\"])]\n    public function headerAction(Request $request): array\n    {\n        // schedule a response header via code\n        $this->addResponseHeader('X-Foo', 'bar', false, $request);\n        \n        return [\"foo\" => \"bar\"];\n    }\n    \n    /**\n     * This action returns a JSON response. \n    */\n    public function jsonAction(Request $request): JsonResponse\n    {\n        return $this->json(array('key' => 'value'));\n    }\n    \n    /**\n     * This returns a standard symfony Response object \n    */\n    public function customAction(Request $request): Response\n    {\n        return new Response(\"Just some text\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Pimcore Editables in Twig Templates\nDESCRIPTION: Examples of using Pimcore editables (input, WYSIWYG, select) in Twig templates with proper variable handling and HTML escaping considerations.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/02_MVC/02_Template/README.md#2025-04-17_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n<h1>{{ pimcore_input('headline') }}</h1>\n\n{{ pimcore_wysiwyg('content') }}\n\n{{ pimcore_select('type', { reload: true, store: [[\"video\",\"video\"], [\"image\",\"image\"]] }) }}\n```\n\n----------------------------------------\n\nTITLE: Launching Pimcore Installer\nDESCRIPTION: Commands to navigate to project directory and launch the Pimcore installation process\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/01_Getting_Started/00_Installation/01_Webserver_Installation.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd ./my-project\n./vendor/bin/pimcore-install\n```\n\n----------------------------------------\n\nTITLE: Creating Custom REST API Controller in Pimcore (PHP)\nDESCRIPTION: This code snippet demonstrates how to create a custom REST API endpoint in Pimcore using a Symfony controller. It retrieves blog articles and returns them as JSON data. The endpoint is accessible at '/custom-pimcore-webservice/rest/get-products'.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/26_Best_Practice/20_Building_Custom_Rest_APIs.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Controller;\n\nuse Pimcore\\Model\\DataObject;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\Routing\\Attribute\\Route;\nuse \\Pimcore\\Controller\\FrontendController;\n\nclass CustomRestController extends FrontendController\n{\n    #[Route('/custom-pimcore-webservice/rest/get-products')]\n    public function defaultAction(Request $request): JsonResponse\n    {\n        // do some authorization here ...\n\n        $blogs = new DataObject\\BlogArticle\\Listing();\n\n        foreach ($blogs as $key => $blog) {\n            $data[] = array(\n                \"title\" => $blog->getTitle(),\n                \"description\" => $blog->getText(),\n                \"tags\" => $blog->getTags());\n        }\n\n        return $this->json([\"success\" => true, \"data\" => $data]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Website Settings in Controller\nDESCRIPTION: Example of accessing website configuration in a PHP controller using dependency injection.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/18_Tools_and_Features/27_Website_Settings.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Symfony\\Component\\HttpFoundation\\Response;\n\nclass TestController\n{\n    public function testAction(array $websiteConfig): Response\n    {\n        $recaptchaKeyPublic = $websiteConfig['recaptchaPublic'];\n        \n        // ...\n    }    \n}\n```\n\n----------------------------------------\n\nTITLE: Sending a Rich Text (HTML) Email in PHP\nDESCRIPTION: PHP code snippet demonstrating how to send an HTML email with CC and BCC recipients using Pimcore\\Mail.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/19_Development_Tools_and_Details/25_Email_Framework/README.md#2025-04-17_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$mail = new \\Pimcore\\Mail();\n$mail->to('example@pimcore.org');\n$mail->bcc(\"bcc@pimcore.org\");\n$mail->html(\"<b>some</b> rich text\");\n$mail->send();\n```\n\n----------------------------------------\n\nTITLE: Advanced Image Editable Usage with Configuration in Twig\nDESCRIPTION: Shows how to use the Image Editable with additional configuration options such as title, width, height, and thumbnail. This example demonstrates setting a specific thumbnail for the rendered image.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/03_Documents/01_Editables/14_Image.md#2025-04-17_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{{ pimcore_image(\"myImage\", {\n    \"title\": \"Drag your image here\",\n    \"width\": 200,\n    \"height\": 200,\n    \"thumbnail\": \"contentimages\"\n}) }}\n```\n\n----------------------------------------\n\nTITLE: Storing and Rendering Pimcore Editables in Twig Variables\nDESCRIPTION: Example of storing a Pimcore editable in a Twig variable and properly rendering HTML content using the raw filter to prevent HTML escaping.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/02_MVC/02_Template/README.md#2025-04-17_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% set content = pimcore_wysiwyg('content') %}\n\n{# this will be escaped HTML #}\n{{ content }}\n\n{# HTML will be rendered #}\n{{ content|raw }}\n```\n\n----------------------------------------\n\nTITLE: Accessing and Manipulating Asset Metadata in Pimcore PHP\nDESCRIPTION: This snippet shows various ways to access and manipulate asset metadata using Pimcore's PHP API. It includes examples of getting metadata for different languages, setting new metadata, and removing existing metadata.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/04_Assets/01_Working_with_PHP_API.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$asset = Asset::getById(123);\n\n// get the title for the current language (request attribute `_locale`)\n$asset->getMetadata(\"title\");\n\n// get the English title\n$asset->getMetadata(\"title\", \"en\");\n// if there's no title for \"en\" but one without a language this will be returned (fallback mechanism).\n\n// get all available metadata\n$asset->getMetadata();\n\n// get all available metadata for a specific language along with metadata which have no language assigned\n$asset->getMetadata(null, 'en');\n\n// get exclusively all the metadata that have a specific language\n$asset->getMetadata(null, 'en', true);\n\n// get metadata in raw format. ie: including metadata input type, language, value and name\n$asset->getMetadata('title', null, true, true);\n\n// Set the English title\n$asset->addMetadata(\"title\", \"input\", \"the new title\", \"en\");\n\n// Remove the English title\n$asset->removeMetadata(\"title\", \"en\");\n\n// Remove the title in all languages\n$asset->removeMetadata(\"title\", \"*\");\n```\n\n----------------------------------------\n\nTITLE: Pimcore Object Data Type Storage Example - Date Fields\nDESCRIPTION: SQL table structure showing how date/time data types are stored in object_store tables\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/19_Development_Tools_and_Details/05_Database_Model.md#2025-04-17_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nDate bigint(20) NULL\nDate & Time bigint(20) NULL\nTime varchar(5) NULL\n```\n\n----------------------------------------\n\nTITLE: PHP Event Listener Implementation for Static Resources\nDESCRIPTION: PHP class implementing event listeners to add custom CSS and JavaScript files to the Pimcore admin interface\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/20_Extending_Pimcore/13_Bundle_Developers_Guide/06_Event_Listener_UI.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\EventListener;\n\nuse Pimcore\\Event\\BundleManager\\PathsEvent;\n\nclass PimcoreAdminListener\n{\n    public function addCSSFiles(PathsEvent $event): void\n    {\n        $event->addPaths([\n            '/admin-static/css/admin-style.css',\n        ]);\n    }\n\n    public function addJSFiles(PathsEvent $event): void\n    {\n        $event->addPaths([\n            '/admin-static/js/startup.js',\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Importing Pimcore Data Objects using PHP\nDESCRIPTION: This snippet demonstrates how to create a Symfony command for importing data into Pimcore. It shows the creation of single and multiple data objects programmatically.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/05_External_System_Interaction.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Command;\n\nuse Pimcore\\Console\\AbstractCommand;\nuse Symfony\\Component\\Console\\Attribute\\AsCommand;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\nuse Pimcore\\Model\\DataObject;\n\n#[AsCommand(\n    name: 'app:awesome',\n    description: 'Awesome command'\n)]\nclass AwesomeCommand extends AbstractCommand\n{\n    protected function execute(InputInterface $input, OutputInterface $output): int\n    {\n        //create single object\n        $object = new DataObject\\Myclass();\n        $object->setKey(1);\n        $object->setParentId(1);\n        $object->setPublished(true);\n        $object->setMyattribute(\"This is a test\");\n        $object->save();\n\n\n        // or create multiple objects\n        for ($i = 0; $i < 60; $i++) {\n            $o = new DataObject\\News();\n            $o->setKey(uniqid() . \"-\" . $i);\n            $o->setParentId(1);\n            $o->setPublished(true);\n            $o->save();\n\n            $output->writeln(\"Created object \" . $o->getFullPath() . \"\\n\");\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Frontend Controller in Pimcore\nDESCRIPTION: This PHP code defines a ContentController that extends FrontendController. It includes a defaultAction method that returns an empty array and uses the Template attribute to specify the template file to be rendered.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/01_Getting_Started/06_Create_a_First_Project.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Controller;\n\nuse Pimcore\\Controller\\FrontendController;\nuse Symfony\\Bridge\\Twig\\Attribute\\Template;\nuse Symfony\\Component\\HttpFoundation\\Request;\n\nclass ContentController extends FrontendController\n{\n    #[Template('content/default.html.twig')]\n    public function defaultAction(Request $request): array\n    {\n        return [];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Cache Usage in PHP Action\nDESCRIPTION: Example of using Pimcore cache in a custom action to store and retrieve HTTP data with specified lifetime and tags.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/19_Development_Tools_and_Details/09_Cache/README.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$lifetime = 99999;\n$cacheKey = md5($uri);\nif(!$data = \\Pimcore\\Cache::load($cacheKey)) {\n    $data = \\Pimcore\\Tool::getHttpData('http://www.pimcore.org/...');\n    \\Pimcore\\Cache::save(\n        $data,\n        $cacheKey,\n        [\"output\",\"tag1\",\"tag2\"],\n        $lifetime);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Pimcore Cache Pool in YAML\nDESCRIPTION: YAML configuration for setting up Pimcore's cache pool with Redis or Doctrine DBAL adapter. Defines cache lifetime, adapter type, and connection settings.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/19_Development_Tools_and_Details/09_Cache/README.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nframework:\n    cache:\n        pools:\n            pimcore.cache.pool:\n                public: true\n                #tags: true\n                default_lifetime: 31536000  # 1 year\n                #adapter: pimcore.cache.adapter.doctrine_dbal\n                #provider: 'doctrine.dbal.default_connection'\n                adapter: cache.adapter.redis_tag_aware\n                provider: 'redis://localhost'\n```\n\n----------------------------------------\n\nTITLE: Configuring Full Page Cache in YAML for Pimcore\nDESCRIPTION: This YAML configuration snippet demonstrates how to enable and configure the Full Page Cache in Pimcore. It sets the cache lifetime, excludes a specific cookie, and defines a pattern for excluding certain URLs from caching.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/19_Development_Tools_and_Details/09_Cache/03_Full_Page_Cache.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# config/config.yaml\npimcore:\n    full_page_cache:\n        enabled: true\n        lifetime: 120\n        exclude_cookie: 'pimcore_admin_sid'\n        exclude_patterns: '@^/test/de@'\n```\n\n----------------------------------------\n\nTITLE: Sending an Email Document with Dynamic Parameters in PHP\nDESCRIPTION: PHP code snippet demonstrating how to send an email document with dynamic parameters using Pimcore\\Mail.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/19_Development_Tools_and_Details/25_Email_Framework/README.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n//dynamic parameters\n$params = array('firstName' => 'Pim',\n                'lastName' => 'Core',\n                'product' => \\Pimcore\\Model\\DataObject::getById(73613)\n                );\n \n//sending the email\n$mail = new \\Pimcore\\Mail();\n$mail->to('example@pimcore.org');\n$mail->setDocument('/email/myemaildocument');\n$mail->setParams($params);\n$mail->send();\n```\n\n----------------------------------------\n\nTITLE: Using Pimcore Workflow API with Transitions\nDESCRIPTION: Demonstrates how to interact with workflows using both Symfony API and Pimcore Workflow Manager. Shows how to check and apply transitions, handle additional data, and save workflow subjects.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/07_Workflow_Management/09_Working_with_PHP_API.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n/**\n * $object ... your element, e.g. a Pimcore data object\n * $workflowRegistry Symfony\\Component\\Workflow\\Registry from Symfony container\n */\n \n$workflow = $workflowRegistry->get($object, 'workflow');\n\nif($workflow->can($object, 'content_ready')) {\n\n    //modify workflow via Symfony API and without saving additional data\n    $workflow->apply($object, 'content_ready');\n    \n    //make sure you save the workflow subject afterwards if any data was changed during transition \n    //e.g. by a marking store\n    $object->save(); \n\n}\n\nif($workflow->can($object, 'publish')) {\n\n    //modify workflow with Pimcore Workflow Manager - notes are written with additional data\n    $additionalData = [\n        NotesSubscriber::ADDITIONAL_DATA_NOTES_COMMENT => 'this is some additional note',\n        NotesSubscriber::ADDITIONAL_DATA_NOTES_ADDITIONAL_FIELDS => [\n            'timeWorked' => 20\n        ]\n    ];\n\n    /**\n     * $workflowManager Pimcore\\Workflow\\Manager from Symfony container\n     */\n    \n    //last parameter defines if workflow subject should be saved after transition \n    $workflowManager->applyWithAdditionalData($workflow, $object, 'publish', $additionalData, true);\n\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Email Instance with Pimcore Tool in PHP\nDESCRIPTION: Demonstrates how to use the Pimcore\\Tool::getMail() method to create a preconfigured Symfony\\Component\\Mime\\Email instance based on Pimcore system settings. This is useful for system components or plugins that need to send emails.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/19_Development_Tools_and_Details/17_Static_Helpers.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$mail = Pimcore\\Tool::getMail($recipients, $subject);\n// For any plugin or website applications it might be convenient to use this mail configuration instead of having to care for these settings themselves.\n```\n\n----------------------------------------\n\nTITLE: Basic Image Editable Usage in Twig\nDESCRIPTION: Demonstrates the simplest implementation of the Image Editable in Twig. This code generates an image area in the backend and displays the image at the frontend.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/03_Documents/01_Editables/14_Image.md#2025-04-17_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ pimcore_image(\"myImage\") }}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Renderer for Dynamic Text Labels in PHP\nDESCRIPTION: Example implementation of a custom renderer class that implements DynamicTextLabelInterface to generate dynamic text content. The class accepts object data and context parameters to render HTML text with dynamic values including timestamps and object properties.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/01_Object_Classes/03_Layout_Elements/01_Dynamic_Text_Labels.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Helpers;\n\nuse Pimcore\\Model\\DataObject\\Concrete;\n\nclass CustomRenderer implements DynamicTextLabelInterface\n{\n    /**\n     * @param string $data as provided in the class definition\n     */\n    public function renderLayoutText(string $data, ?Concrete $object, array $params): string\n    {\n        $text = '<h1 style=\"color: #F00;\">Last reload: ' . date('c') . '</h1>' .\n            '<h2>Additional Data: ' . $data . '</h2>';\n\n        if ($object) {\n            $text .= '<h3>BTW, my fullpath is: ' . $object->getFullPath() . ' and my ID is ' . $object->getId() . '</h3>';\n        }\n\n        return $text;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Image Thumbnails in Twig\nDESCRIPTION: This code shows how to access image thumbnails in Twig templates. Similar to the PHP implementation, it demonstrates both getting the path to the thumbnail and generating the complete HTML image tag with high-resolution alternatives.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/04_Assets/03_Working_with_Thumbnails/01_Image_Thumbnails.md#2025-04-17_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% set image = pimcore_asset(1234) %}\n\n{# get path to thumbnail, e.g. `/foo/bar/362/image-thumb__362__content/foo.webp #}\n<img src=\"{{ image.thumbnail('myThumbnailName') }}\">\n\n{# preferred alternative - let Pimcore create the whole image tag #}\n{# including high-res alternatives (srcset) or media queries, if configured #}\n{{ image.thumbnail('myThumbnailName').html|raw }}\n```\n\n----------------------------------------\n\nTITLE: Loading Pimcore Objects in Twig Templates\nDESCRIPTION: Examples of loading Pimcore objects (documents, assets, data objects) in Twig templates using ID or path-based functions.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/02_MVC/02_Template/README.md#2025-04-17_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{% set myObject = pimcore_object(123) %}\n{{ myObject.getTitle() }}\n```\n\n----------------------------------------\n\nTITLE: Sending a Rich Text (HTML) Email with Twig Expressions using Pimcore\\Mail in PHP\nDESCRIPTION: Illustrates how to send an HTML email with Twig expressions using Pimcore\\Mail. It sets multiple recipients, passes parameters for Twig rendering, and includes HTML content.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/19_Development_Tools_and_Details/25_Email_Framework/01_Pimcore_Mail.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$mail = new \\Pimcore\\Mail();\n$mail->to('example@pimcore.org');\n$mail->bcc(\"bcc@pimcore.org\");\n$mail->setParams([\n    'myParam' => 'Just a simple text'\n]);\n$mail->html(\"<b>some</b> rich text: {{ myParam }}\");\n$mail->send();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Group and Key Data in Classification Store\nDESCRIPTION: Shows how to iterate through groups and keys in a Classification Store, accessing configurations and values including handling of QuantityValue types.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/01_Object_Classes/01_Data_Types/15_Classification_Store.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n/** @var \\Pimcore\\Model\\DataObject\\Classificationstore $classificationStore */\n$classificationStore = $dataObject->get<YOUR_CLASSIFICATION_FIELD>();\n\nforeach ($classificationStore->getGroups() as $group) {\n    var_dump($group->getConfiguration()->getName());\n\n    foreach ($group->getKeys() as $key) {\n        $keyConfiguration = $key->getConfiguration();\n\n        $value = $key->getValue();\n        if ($value instanceof \\Pimcore\\Model\\DataObject\\Data\\QuantityValue) {\n            $value = (string)$value;\n        }\n\n        var_dump([\n            $keyConfiguration->getId(),\n            $keyConfiguration->getType(),\n            $keyConfiguration->getName(),\n            $keyConfiguration->getTitle(),\n            $value,\n            ($key->getFieldDefinition() instanceof QuantityValue),\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Document Listings in Pimcore PHP\nDESCRIPTION: This snippet shows how to create a document listing, set conditions, and iterate over the results. It demonstrates filtering documents by parent ID and publication status.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/03_Documents/09_Working_with_PHP_API.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$listing = new \\Pimcore\\Model\\Document\\Listing(); \n$listing->setCondition(\"parentId = 82\");\nforeach($listing as $doc) {\n    // do whatever you like\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Document Listing Example in Pimcore PHP\nDESCRIPTION: This snippet demonstrates an advanced usage of document listings, including setting multiple conditions, ordering, offset, and limit. It also shows how to get the total count and load ID list.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/03_Documents/09_Working_with_PHP_API.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$listing = new \\Pimcore\\Model\\Document\\Listing();\n$listing->setUnpublished(1);\n$listing->setCondition(\"`parentId` = 82\")\n    ->setOrderKey(['key', 'published'])\n    ->setOrder('desc')\n    ->setOffset(2)\n    ->setLimit(2);\n    \n    \n$listing->getTotalCount(); \n$listing->loadIdList(); \n\nforeach($listing as $item) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Layout Template in Twig for Pimcore\nDESCRIPTION: This snippet demonstrates how to create a basic HTML layout template in Twig that can be extended by other templates. It includes a block named 'content' that will be replaced by content from child templates.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/02_MVC/02_Template/01_Layouts.md#2025-04-17_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Example</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"/static/css/global.css\" />\n</head>\n<body>\n    <div id=\"site\">\n        {{ block('content') }}\n    </div>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Verifying Custom Permissions in Pimcore AdminController\nDESCRIPTION: PHP controller implementation showing how to check custom permissions in a Pimcore admin controller. Uses UserAwareController and JsonHelperTrait to handle permission verification and JSON responses.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/20_Extending_Pimcore/24_Add_Your_Own_Permissions.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Controller;\n\nuse Pimcore\\Controller\\UserAwareController;\nuse Pimcore\\Controller\\Traits\\JsonHelperTrait;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Attribute\\Route;\n\nclass AdminController extends UserAwareController\n{\n    use JsonHelperTrait;\n\n    #[Route('/admin/my-admin-action')]\n    public function myAdminAction(Request $request): Response\n    {\n        $pimcoreUser = $this->getPimcoreUser();\n\n        if ($pimcoreUser?->isAllowed('my_permission')) {\n            // ...\n        }\n        \n        return $this->jsonResponse(['success' => true]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Two Factor Authentication Settings in Pimcore\nDESCRIPTION: YAML configuration for customizing the server name and issuer name displayed in the Google Authenticator app. These settings control how the authentication appears in the 2FA app interface.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/18_Tools_and_Features/40_Two_Factor_Authentication.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n scheb_two_factor:\n     google:\n         server_name: Pimcore                                # Server name used in QR code\n         issuer: Pimcore 2 Factor Authentication             # Issuer name used in QR code\n```\n\n----------------------------------------\n\nTITLE: Implementing High-Performance Navigation Caching in PHP\nDESCRIPTION: This PHP class extends the navigation functionality to implement high-performance caching. It uses a pageCallback to map custom data onto navigation page items, allowing for efficient retrieval of document properties without bypassing the cache.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/03_Documents/03_Navigation.md#2025-04-17_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Twig\\Extension;\n\nuse Pimcore\\Model\\Document;\nuse Pimcore\\Navigation\\Container;\nuse Pimcore\\Twig\\Extension\\Templating\\Navigation;\nuse Twig\\Extension\\AbstractExtension;\nuse Twig\\TwigFunction;\n\nclass NavigationExtension extends AbstractExtension\n{\n    protected Navigation $navigationHelper;\n\n    public function __construct(Navigation $navigationHelper)\n    {\n        $this->navigationHelper = $navigationHelper;\n    }\n    \n    /**\n     * @return TwigFunction[]\n     */\n    public function getFunctions(): array\n    {\n        return [\n            new TwigFunction('app_navigation_custom', [$this, 'getCustomNavigation'])\n        ];\n    }\n    \n    /**\n     * @throws \\Exception\n     */\n    public function getCustomNavigation(Document $document, Document $startNode): Container\n    {\n        $navigation = $this->navigationHelper->build([\n            'active' => $document,\n            'root' => $startNode, \n            'pageCallback' => function ($page, $document) {\n                $page->setCustomSetting(\"myCustomProperty\", $document->getProperty(\"myCustomProperty\"));\n                $page->setCustomSetting(\"subListClass\", $document->getProperty(\"subListClass\"));\n                $page->setCustomSetting(\"title\", $document->getTitle());\n                $page->setCustomSetting(\"headline\", $document->getEditable(\"headline\")->getData());\n            }]\n        );\n\n        return $navigation;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Site Root Document\nDESCRIPTION: Code examples for getting the root document of the current site, with fallback to default document when not in a site context.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/02_MVC/04_Routing_and_URLs/08_Working_with_Sites.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nif (\\Pimcore\\Model\\Site::isSiteRequest()) {\n    $site = \\Pimcore\\Model\\Site::getCurrentSite();\n    $navStartNode = $site->getRootDocument();\n} else {\n    $navStartNode = \\Pimcore\\Model\\Document::getById(1);\n}\n```\n\nLANGUAGE: twig\nCODE:\n```\n    {% if pimcore_site_is_request() %}\n        {% set site = pimcore_site_current() %}\n        {% set navStartNode = site.getRootDocument() %}\n    {% else %}\n        {% set navStartNode = pimcore_document(1) %}\n    {% endif %}\n```\n\n----------------------------------------\n\nTITLE: Managing Runtime Cache with Pimcore Listings and Objects\nDESCRIPTION: Demonstrates how to handle runtime cache when deleting items from listings and fetching objects with force parameter. Shows cache invalidation techniques and comparison of cached vs. fresh object loading.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/26_Best_Practice/95_Working_With_Runtime_Cache.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n//Delete item from the list\n$list = new \\Pimcore\\Model\\DataObject\\Myclassname\\Listing;\n//or\n$list = new \\Pimcore\\Model\\Document\\Listing;\n//or\n$list = new \\Pimcore\\Model\\Asset\\Listing;\n$list->load();\n$list->current()->delete(); //delete current item from list\n\n$list->load(); //call load again to reset the runtime cache\n\nforeach ($list as $element) {\n    ...\n}\n\n//using force param to load latest data from database\n\\Pimcore\\Model\\DataObject::getById(123) === \\Pimcore\\Model\\DataObject::getById(123) => true\n\n\\Pimcore\\Model\\DataObject::getById(123) === \\Pimcore\\Model\\DataObject::getById(123, ['force' => true]) => false\n```\n\n----------------------------------------\n\nTITLE: Using pimcorecache Extension in Twig for Template Caching\nDESCRIPTION: The pimcorecache extension allows caching specific template sections. This example demonstrates basic usage with a time-to-live (ttl) parameter of 60 seconds, caching the current microtime output.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/02_MVC/02_Template/02_Template_Extensions/README.md#2025-04-17_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% pimcorecache \"test_cache_key\" ttl(60) %}\n    <h1>This is some cached microtime</h1>\n    {{ 'now'|date('U') }}\n{% endpimcorecache %}\n```\n\n----------------------------------------\n\nTITLE: Using Prepared Statement Placeholders in Pimcore Object Listings\nDESCRIPTION: Demonstrates how to use prepared statement placeholders and variables in Pimcore object listings for secure and efficient database queries.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/03_Working_with_PHP_API.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse \\Pimcore\\Model\\DataObject;\n\n$entries = new DataObject\\Myclassname\\Listing();\n$entries->setCondition(\"name LIKE ?\", \"%bernie%\");\n$entries->load();\n \nforeach($entries as $entry) {...}\n \n// using more variables / placeholders\n$entries = new DataObject\\Myclassname\\Listing();\n$entries->setCondition(\"name LIKE ? AND date > ?\", [\"%bernie%\", time()]);\n$entries->load();\n \nforeach($entries as $entry) {...}\n \n \n// using named placeholders (recommended)\n$entries = new DataObject\\Myclassname\\Listing();\n$entries->setCondition(\"name LIKE :name AND date > :date\", [\"name\" => \"%bernie%\", \"date\" => time()]);\n$entries->load();\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Block Editable in Twig\nDESCRIPTION: Shows the basic implementation of a Block Editable in a Twig template. This example creates a content block containing a subline input and a WYSIWYG editor.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/03_Documents/01_Editables/06_Block.md#2025-04-17_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% pimcoreblock \"contentblock\" %}\n    <h2>{{ pimcore_input(\"subline\") }}</h2>\n    {{ pimcore_wysiwyg(\"content\") }}\n{% endpimcoreblock %}\n```\n\n----------------------------------------\n\nTITLE: Deleting Relations via PHP API\nDESCRIPTION: Shows how to remove all elements from Many-To-Many fields in Pimcore\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/01_Object_Classes/01_Data_Types/70_Relation_Types.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$object->setMyManyToManyField([]);\n\n//that would have the same result\n$object->setMyManyToManyField(null);\n```\n\n----------------------------------------\n\nTITLE: Implementing postOpenObject Event Listener for Custom Button in Pimcore (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to add a custom button to the Pimcore object editor toolbar for a specific object class. It listens for the 'postOpenObject' event, checks if the opened object is of class 'ShopProduct', and adds a new button to download a PDF.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/26_Best_Practice/05_Adding_Button_To_Object_Editor.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.addEventListener(pimcore.events.postOpenObject, (e) => {\n    if (e.detail.object.data.general.className === 'ShopProduct') {\n        e.detail.object.toolbar.add({\n            text: t('show-pdf'),\n            iconCls: 'pimcore_icon_pdf',\n            scale: 'small',\n            handler: function (obj) {\n                //do some stuff here, e.g. open a new window with an PDF download\n            }.bind(this, e.detail.object)\n        });\n        pimcore.layout.refresh();\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Layout Template in Pimcore\nDESCRIPTION: This Twig template serves as the main layout for the website. It includes HTML structure, CSS styling, and a placeholder for content using Twig's block functionality. The layout provides consistent styling and structure across all pages that extend it.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/01_Getting_Started/06_Create_a_First_Project.md#2025-04-17_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Example</title>\n    <style>\n        body {\n            padding: 0;\n            margin: 0;\n            font-family: \"Lucida Sans Unicode\", Arial;\n            font-size: 14px;\n        }\n    \n        #site {\n            margin: 0 auto;\n            width: 600px;\n            padding: 30px 0 0 0;\n            color: #65615E;\n        }\n    \n        h1, h2, h3 {\n            font-size: 18px;\n            padding: 0 0 5px 0;\n            border-bottom: 1px solid #001428;\n            margin-bottom: 5px;\n        }\n    \n        h3 {\n            font-size: 14px;\n            padding: 15px 0 5px 0;\n            margin-bottom: 5px;\n            border-color: #cccccc;\n        }\n    \n        img {\n            border: 0;\n        }\n    \n        p {\n            padding: 0 0 5px 0;\n        }\n    \n        a {\n            color: #000;\n        }\n    \n        #logo {\n            text-align: center;\n            padding: 50px 0;\n        }\n    \n        #logo hr {\n            display: block;\n            height: 1px;\n            overflow: hidden;\n            background: #BBB;\n            border: 0;\n            padding: 0;\n            margin: 30px 0 20px 0;\n        }\n    \n        .claim {\n            text-transform: uppercase;\n            color: #BBB;\n        }\n    \n        #site ul {\n            padding: 10px 0 10px 20px;\n            list-style: circle;\n        }\n    \n        .buttons {\n            margin-bottom: 100px;\n            text-align: center;\n        }\n    \n        .buttons a {\n            display: inline-block;\n            background: #6428b4;\n            color: #fff;\n            padding: 5px 10px;\n            margin-right: 10px;\n            width: 40%;\n            border-radius: 2px;\n            text-decoration: none;\n        }\n    \n        .buttons a:hover {\n            background: #1C8BC1;\n        }\n    \n        .buttons a:last-child {\n            margin: 0;\n        }\n    \n    </style>\n</head>\n<body>\n    <div id=\"site\">\n        <div id=\"logo\">\n            <a href=\"http://www.pimcore.com/\"><img src=\"/bundles/pimcoreadmin/img/logo-claim-gray.svg\"\n                                                   style=\"width: 400px;\"/></a>\n            <hr/>\n        </div>\n        {{ block('content') }}\n    </div>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Accessing System Configuration in Pimcore PHP Controller\nDESCRIPTION: This PHP code demonstrates how to access the system configuration within a Pimcore controller using dependency injection and the Config class.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/18_Tools_and_Features/25_System_Settings.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Controller;\n\nuse Pimcore\\Config;\nuse Pimcore\\Controller\\FrontendController;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\nclass DefaultController extends FrontendController\n{\n    public function defaultAction(Request $request, SystemSettingsConfig $config): Response\n    {\n        // use type-hinting to inject the config service\n        $config = Config::getSystemConfiguration();\n        $bar = $config['general']['valid_languages'];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Many-To-Many Relations with Element Metadata\nDESCRIPTION: Demonstrates how to work with Advanced Many-To-Many relations using ElementMetadata\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/01_Object_Classes/01_Data_Types/70_Relation_Types.md#2025-04-17_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Pimcore\\Model\\DataObject;\nuse Pimcore\\Model\\Document;\n\n$referencedElement = Document::getById(123);\n$references = [];\n$elementMetadata = new DataObject\\Data\\ElementMetadata('metadata', ['text', 'number'], $referencedElement);\n\n//set into the metadata field (named text) the value \"my lovely text\"\n$elementMetadata->setText('my lovely text');\n\n//set into the metadata field (named Number) the value 23\n$elementMetadata->setNumber(23);\n\n\n$references[] = $elementMetadata;\n\n//set the metadata array to your object\n$object->setMetadata($references);\n```\n\n----------------------------------------\n\nTITLE: Implementing Adaptive Bitrate Video Streaming with Twig\nDESCRIPTION: Twig example showing how to implement adaptive bitrate video streaming in Pimcore. The code uses the pimcore_video tag with a specified thumbnail configuration to generate a video element with MPEG-DASH (.mpd) support.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/04_Assets/03_Working_with_Thumbnails/03_Video_Thumbnails.md#2025-04-17_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{{ pimcore_video('campaignVideo', {\n        width: auto,\n        height: auto,\n        thumbnail: 'new'\n    }) }}\n```\n\n----------------------------------------\n\nTITLE: Implementing Product Controller in PHP\nDESCRIPTION: ContentController class implementation with default and product actions using Symfony components and Pimcore's FrontendController.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/01_Getting_Started/06_Create_a_First_Project.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Controller;\n\nuse Pimcore\\Controller\\FrontendController;\nuse Symfony\\Bridge\\Twig\\Attribute\\Template;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\nclass ContentController extends FrontendController\n{\n    #[Template('content/default.html.twig')]\n    public function defaultAction (Request $request): array\n    {\n        return [];\n    }\n    \n    public function productAction(Request $request): Response\n    {\n        return $this->render('content/product.html.twig');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Twig Template for IFrame Areabrick\nDESCRIPTION: Twig template for an IFrame area brick that provides an editing interface in editmode and renders an iframe with customizable settings in the frontend. The template uses Pimcore editables for configuration.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/03_Documents/01_Editables/02_Areablock/02_Bricks.md#2025-04-17_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n/* templates/areas/iframe/view.html.twig */\n\n{% set urlField = pimcore_input(\"iframe_url\") %}\n{% set widthField = pimcore_numeric(\"iframe_width\") %}\n{% set heightField = pimcore_numeric(\"iframe_height\") %}\n{% set transparentField = pimcore_checkbox(\"iframe_transparent\") %}\n\n{% if editmode %}\n    <div>\n        <h2>IFrame</h2>\n        <div>\n            URL: {{ urlField|raw }}\n        </div>\n        <br/>\n        <b>Advanced Configuration</b>\n        <div>\n            Width: {{ widthField|raw }}px (default: 100%)\n        </div>\n        <div>\n            Height: {{ heightField|raw }}px (default: 400px)\n        </div>\n        <div>\n            Transparent: {{ transparentField|raw }} (default: false)\n        </div>\n    </div>\n{% else %}\n    {% if not urlField.isEmpty() %}\n        \n        {% set transparent = \"false\" %}\n        {% set width = \"100%\" %}\n        {% set height = \"400\" %}\n\n        {% if not widthField.isEmpty() %}\n            {% set width = widthField.data %}    \n        {% endif %}\n\n        {% if not heightField.isEmpty() %}\n            {% set height = heightField.data %}    \n        {% endif %}\n\n        {% if transparentField.isChecked() %}\n            {% set transparent = \"true\" %}    \n        {% endif %}\n\n        <iframe src=\"{{ urlField }}\" width=\"{{ width }}\" height=\"{{ height }}\" allowtransparency=\"{{ transparent }}\" frameborder=\"0\"></iframe>\n\n    {% endif %}\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Implementing Full Product Template with Data Display\nDESCRIPTION: Enhanced Twig template that displays product details including name and description, with proper handling of editmode.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/01_Getting_Started/06_Create_a_First_Project.md#2025-04-17_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n{% extends 'layout.html.twig' %}\n{% block content %}\n    <h1>{{ pimcore_input(\"headline\", {\"width\": 540}) }}</h1>\n\n    <div class=\"product-info\">\n        {% if editmode %}\n            {{ pimcore_relation(\"product\") }}\n        {% else %}\n            {% set product = pimcore_relation(\"product\").element %} \n            {% if product %} \n                <h2>{{ product.name }}</h2>\n                <div class=\"content\">\n                    {{ product.description|raw }}\n                </div>\n            {% endif %}\n        {% endif %}\n    </div>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Implementing Vote DAO Class in PHP\nDESCRIPTION: Data Access Object implementation for Vote model with methods for CRUD operations using database abstraction.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/20_Extending_Pimcore/17_Custom_Persistent_Models.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Model\\Vote;\n\nuse Pimcore\\Model\\Dao\\AbstractDao;\nuse Pimcore\\Model\\Exception\\NotFoundException;\n\nclass Dao extends AbstractDao\n{\n    protected string $tableName = 'votes';\n\n    /**\n     * get vote by id\n     *\n     * @throws NotFoundException\n     */\n    public function getById(?int $id = null): void\n    {\n        if ($id !== null)  {\n            $this->model->setId($id);\n        }\n\n        $data = $this->db->fetchAssociative('SELECT * FROM '.$this->tableName.' WHERE id = ?', [$this->model->getId()]);\n\n        if (!$data) {\n            throw new NotFoundException(\"Object with the ID \" . $this->model->getId() . \" doesn't exists\");\n        }\n\n        $this->assignVariablesToModel($data);\n    }\n\n    /**\n     * save vote\n     */\n    public function save(): void\n    {\n        $vars = get_object_vars($this->model);\n\n        $buffer = [];\n\n        $validColumns = $this->getValidTableColumns($this->tableName);\n\n        if (count($vars)) {\n            foreach ($vars as $k => $v) {\n                if (!in_array($k, $validColumns)) {\n                    continue;\n                }\n\n                $getter = \"get\" . ucfirst($k);\n\n                if (!is_callable([$this->model, $getter])) {\n                    continue;\n                }\n\n                $value = $this->model->$getter();\n\n                if (is_bool($value)) {\n                    $value = (int)$value;\n                }\n\n                $buffer[$k] = $value;\n            }\n        }\n\n        if ($this->model->getId() !== null) {\n            $this->db->update($this->tableName, $buffer, [\"id\" => $this->model->getId()]);\n            return;\n        }\n\n        $this->db->insert($this->tableName, $buffer);\n        $this->model->setId($this->db->lastInsertId());\n    }\n\n    /**\n     * delete vote\n     */\n    public function delete(): void\n    {\n        $this->db->delete($this->tableName, [\"id\" => $this->model->getId()]);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Sidebar Navigation with Custom HTML Prefix in Twig\nDESCRIPTION: Shows how to create a sidebar navigation with a custom HTML prefix for the menu elements and additional configuration options like expanding sibling nodes.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/03_Documents/03_Navigation.md#2025-04-17_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n<div class=\"my-sidebar-menu\">\n    {% set sideNav = pimcore_build_nav({active: document, root: navStartNode, htmlMenuPrefix: 'my-nav-'}) %}\n    \n    {{ pimcore_render_nav(sideNav, 'menu', 'renderMenu', {\n        ulClass: 'nav my-sidenav',\n        expandSiblingNodesOfActiveBranch: true\n    }) }}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Settings to Assets in Pimcore PHP\nDESCRIPTION: This snippet demonstrates how to programmatically add custom settings or properties to assets in Pimcore. It shows retrieving an asset, getting its custom settings, modifying them, and saving the asset.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/04_Assets/01_Working_with_PHP_API.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$asset = Asset::getById(2345);\n$settings = $asset->getCustomSettings();\n$settings[\"mySetting\"] = \"this is my value this can be everythin also an array or an object not only a string\";\n$asset->setCustomSettings($settings);\n$asset->save();\n```\n\n----------------------------------------\n\nTITLE: YouTube/Vimeo Video Integration with Options in Twig\nDESCRIPTION: Demonstrates how to embed videos from external services like YouTube and Vimeo with additional configuration options for autoplay and other features.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/03_Documents/01_Editables/38_Video.md#2025-04-17_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n<section id=\"campaign_video\">\n    {{ pimcore_video(\"campaignVideo\", {\n            width: 700,\n            height: 400,\n            youtube: {\n                autoplay: true,\n                modestbranding: true\n            },\n            vimeo: {\n                autoplay: true,\n                loop: true\n            }\n       })\n    }}\n</section>\n```\n\n----------------------------------------\n\nTITLE: Setting Geopoint Data in PHP for Pimcore\nDESCRIPTION: Demonstrates how to programmatically set a geopoint using latitude and longitude coordinates in Pimcore. It uses the Pimcore\\Model\\DataObject\\Data\\GeoCoordinates class to create a point object.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/01_Object_Classes/01_Data_Types/40_Geographic_Types.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$longitude = 107.6191228;\n$latitude = -6.9174639;\n$point = new \\Pimcore\\Model\\DataObject\\Data\\GeoCoordinates($latitude, $longitude);\n$object->setPoint($point);\n$object->save();\n```\n\n----------------------------------------\n\nTITLE: Implementing Twig Templates in Pimcore Controllers (PHP)\nDESCRIPTION: Example of controller implementation with Twig templates in Pimcore using both attribute-based template resolution and direct rendering approaches.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/02_MVC/02_Template/README.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Controller;\n\nuse Pimcore\\Controller\\FrontendController;\nuse Symfony\\Bridge\\Twig\\Attribute\\Template;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\nclass MyController extends FrontendController\n{\n    /**\n     * The attribute will resolve the defined view\n     */\n    #[Template('content/default.html.twig', vars: ['param1' => 'value1'])]\n    public function attributeAction(): void\n    {   \n    }\n    \n    public function directRenderAction(): Response\n    {\n        return $this->render('my/custom/action.html.twig', ['param1' => 'value1']);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Permission Control Event in Pimcore\nDESCRIPTION: Event handler for dynamically controlling element permissions in Pimcore using the ElementEvents::ELEMENT_PERMISSION_IS_ALLOWED event. This allows runtime manipulation of user permissions for specific elements.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/22_Administration_of_Pimcore/07_Users_and_Roles.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPimcore\\Event\\ElementEvents::ELEMENT_PERMISSION_IS_ALLOWED\n```\n\n----------------------------------------\n\nTITLE: Querying Objects Referencing a User in Pimcore\nDESCRIPTION: This PHP method retrieves all objects that reference a specific user in Pimcore. It's useful for finding dependencies when working with user select fields.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/01_Object_Classes/01_Data_Types/README.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nPimcore\\Tool\\Admin::getObjectsReferencingUser($userId)\n```\n\n----------------------------------------\n\nTITLE: Video Transcoding with Pimcore Thumbnails in PHP\nDESCRIPTION: Example demonstrating how to transcode video assets using Pimcore's thumbnail system. The code shows how to check the transcoding status and access paths to different video formats after processing is complete.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/04_Assets/03_Working_with_Thumbnails/03_Video_Thumbnails.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$asset = Asset::getById(123);\nif($asset instanceof Asset\\Video) {\n \n   $thumbnail = $asset->getThumbnail(\"myVideoThumbnail\"); // returns an array\n   if($thumbnail[\"status\"] == \"finished\") {\n      p_r($thumbnail[\"formats\"]); // transcoding finished, print the paths to the different formats\n      /*\n         OUTPUTS:\n         Array(\n             \"mp4\" => \"/Sample%20Content/Videos/123/video-thumb__123__myVideoThumbnail...mp4\",\n             \"webm\" => \"/Sample%20Content/Videos/123/video-thumb__123__myVideoThumbnail...webm\"\n         )\n      */\n   } else if ($thumbnail[\"status\"] == \"inprogress\")  {\n      echo \"transcoding in progress, please wait ...\";\n   } else {\n      echo \"transcoding failed :(\";\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Unpublished Objects in Pimcore\nDESCRIPTION: Demonstrates how to retrieve unpublished objects using list settings and global configuration. Shows both listing creation methods and global unpublished object visibility settings.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/03_Working_with_PHP_API.md#2025-04-17_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$list = \\Pimcore\\Model\\DataObject\\News::getList([\"unpublished\" => true]);\n\n//or \n\n$list = new \\Pimcore\\Model\\DataObject\\News\\Listing();\n$list->setUnpublished(true);\n$list->load();\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n// revert to the default API behaviour, and setUnpublished can be used as usually\n\\Pimcore\\Model\\DataObject::setHideUnpublished(true);\n\n// force to return all objects including unpublished ones, even if setUnpublished is set to false\n\\Pimcore\\Model\\DataObject::setHideUnpublished(false);\n```\n\n----------------------------------------\n\nTITLE: Implementing Rate-Limited Location Blocks for Pimcore Thumbnail Generation\nDESCRIPTION: Nginx location configuration that implements rate limiting for on-demand thumbnail generation in Pimcore. It creates a two-stage process with a bucket allowing 15 requests before rejecting additional ones with HTTP 429, while maintaining proper caching headers.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/23_Installation_and_Upgrade/03_System_Setup_and_Hosting/02_Nginx_Configuration.md#2025-04-17_snippet_8\n\nLANGUAGE: nginx\nCODE:\n```\n    # Pimcore On-Demand Thumbnail generation\n    # with Rate-Limit.\n    location ~* .*/(image|video)-thumb__\\d+__.* {\n        try_files /var/tmp/thumbnails$uri @imggen;\n        expires 2w;\n        access_log off;\n        add_header Cache-Control \"public\";\n    }\n    location @imggen {\n        limit_req zone=imggen burst=15;\n        try_files /var/tmp/thumbnails$uri /index.php;\n        expires 2w;\n        access_log off;\n        add_header Cache-Control \"public\";\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing Adaptive Design with pimcore_device\nDESCRIPTION: The pimcore_device extension enables responsive design by detecting the client device type. This example shows conditional content rendering based on device type with a default fallback.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/02_MVC/02_Template/02_Template_Extensions/README.md#2025-04-17_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n{% set device = pimcore_device('desktop') %}\n{% if device.isPhone() %}\n    This is my phone content\n{% elseif device.isTablet() %}\n    This text is shown on a tablet\n{% elseif device.isDesktop() %}\n    This is for default desktop Browser\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Using Pimcore Block Elements in Twig Templates\nDESCRIPTION: Example of implementing a Pimcore Block editable in Twig templates using the pimcoreblock tag to iterate through block elements.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/02_MVC/02_Template/README.md#2025-04-17_snippet_6\n\nLANGUAGE: twig\nCODE:\n```\n{% pimcoreblock \"contentblock\" %}\n    <h2>{{ pimcore_input(\"subline\") }}</h2>\n    {{ pimcore_wysiwyg(\"content\") }}\n{% endpimcoreblock %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced Areabrick with Dialog Box in PHP\nDESCRIPTION: This snippet demonstrates how to create an advanced Areabrick configuration with a dialog box using tab panels and various Pimcore editables. It includes complex layout structure and multiple editable types across different tabs.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/03_Documents/01_Editables/02_Areablock/02_Bricks.md#2025-04-17_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Document\\Areabrick;\n\nuse Pimcore\\Extension\\Document\\Areabrick\\EditableDialogBoxConfiguration;\nuse Pimcore\\Extension\\Document\\Areabrick\\EditableDialogBoxInterface;\nuse Pimcore\\Model\\Document\\Editable;\nuse Pimcore\\Model\\Document\\Editable\\Area\\Info;\n\nclass WysiwygWithImages extends AbstractAreabrick implements EditableDialogBoxInterface\n{\n    public function getName(): string\n    {\n        return 'WYSIWYG w. Images';\n    }\n\n    public function getEditableDialogBoxConfiguration(Editable $area, ?Info $info): EditableDialogBoxConfiguration\n    {\n        $config = new EditableDialogBoxConfiguration();\n        $config->setWidth(600);\n        \n        $config->setItems([\n            'type' => 'tabpanel',\n            'items' => [\n                [\n                    'type' => 'panel',\n                    'title' => 'Tab 1',\n                    'items' => [\n                        (new Editable\\Wysiwyg())\n                            ->setName('myDialogWysiwyg')\n                            ->setLabel('Some additional Text'),\n                            \n                        (new Editable\\Video())\n                            ->setName('myDialogVideo'),\n                            \n                        (new Editable\\Textarea())\n                            ->setName('myDialogTextarea'),\n                            \n                        (new Editable\\Table())\n                            ->setName('myDialogTable'),\n                            \n                        (new Editable\\Snippet())\n                            ->setName('myDialogSnippet'),\n                            \n                        (new Editable\\Select())\n                            ->setName('myDialogSelect')\n                            ->setConfig([\n                                'store' => [\n                                    ['foo', 'Foo'],\n                                    ['bar', 'Bar'],\n                                    ['baz', 'Baz'],\n                                ]\n                            ]),\n                            \n                        (new Editable\\Numeric())\n                            ->setName('myDialogNumber'),\n                            \n                        (new Editable\\Multiselect())\n                            ->setName('myDialogMultiSelect')\n                            ->setConfig([\n                                'store' => [\n                                    ['foo', 'Foo'],\n                                    ['bar', 'Bar'],\n                                    ['baz', 'Baz'],\n                                ]\n                            ]),\n                        \n                        (new Editable\\Checkbox())\n                            ->setName('myDialogCheckbox')\n                            ->setLabel('This is the checkbox label 😸'),\n                        \n                        (new Editable\\Input())\n                            ->setName('myDialogInput'),\n                    ]\n                ],\n                [\n                    'type' => 'panel',\n                    'title' => 'Tab 2',\n                    'items' => [\n                        (new Editable\\Input())\n                            ->setName('anotherInput'),\n                        \n                        (new Editable\\Link())\n                            ->setName('myDialogLink'),\n                        \n                        (new Editable\\Image())\n                            ->setName('myDialogImage'),\n                        \n                        (new Editable\\Embed())\n                            ->setName('myEmbed'),\n                        \n                        (new Editable\\Date())\n                            ->setName('myDialogDate'),\n                    ]\n                ],\n                [\n                    'type' => 'panel',\n                    'title' => 'Tab 3',\n                    'items' => [\n                        (new Editable\\Renderlet())\n                            ->setName('myDialogRenderlet'),\n                            \n                        (new Editable\\Relations())\n                            ->setName('myDialogRelations'),\n                            \n                        (new Editable\\Relation())\n                            ->setName('myDialogRelation')\n                            ->setLabel('Just a single relation 😹'),\n                            \n                        (new Editable\\Pdf())\n                            ->setName('myDialogPdf'),\n                    ]\n                ]\n            ]\n        ]);\n\n        return $config;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Object Brick Data in PHP\nDESCRIPTION: Demonstrates how to retrieve data from an Object Brick using the PHP API. It shows accessing a product object and getting a specific attribute from its 'Tire' Object Brick.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/01_Object_Classes/01_Data_Types/60_Object_Bricks.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n//receiving data of a Objectbrick\n$product = DataObject\\Product::getById(4);\n$tiretype = $product->getBricks()->getTire()->getTiretype();\n```\n\n----------------------------------------\n\nTITLE: Modifying Internal Object List Queries in Pimcore\nDESCRIPTION: Examples of accessing and modifying internal Doctrine QueryBuilder for object listings, including debugging techniques.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/03_Working_with_PHP_API.md#2025-04-17_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// This example lists all cars that have been sold.\n\nuse Doctrine\\DBAL\\Query\\QueryBuilder;\nuse Pimcore\\Model\\DataObject\\Car\\Listing;\n\n$list = new Listing();\n\n$list->onCreateQueryBuilder(\n    function (QueryBuilder $queryBuilder) {\n        $queryBuilder->join(\n            'object_localized_CAR_en',\n            'object_query_EF_OSOI',\n            'onlineOrderItem',\n            'onlineOrderItem.product__id = object_localized_CAR_en.id'\n        );\n    }\n);\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Doctrine\\DBAL\\Query\\QueryBuilder;\nuse Pimcore\\Model\\DataObject\\Car\\Listing;\n\n$list = new Listing();\n\n$list->onCreateQueryBuilder(\n    function (QueryBuilder $queryBuilder) {\n        // echo query\n        echo $queryBuilder->getSQL();\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Using Navigation with Partial Templates in Twig\nDESCRIPTION: Demonstrates two methods for using custom partial templates to render navigation: renderPartial method for one-time use and setPartial for all subsequent render calls.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/03_Documents/03_Navigation.md#2025-04-17_snippet_8\n\nLANGUAGE: twig\nCODE:\n```\n{# \\Pimcore\\Navigation\\Renderer\\Menu #}\n{% set menuRenderer = pimcore_nav_renderer('menu') %}\n\n{# either use the renderPartial method to use a partial once #}\n{{ menuRenderer.renderPartial(mainNavigation, 'includes/navigation.html.twig') | raw }}\n\n{# or set the partial on the renderer (will be valid for all subsequent render calls) #}\n{% do menuRenderer.setPartial('includes/navigation.html.twig') %}\n{{ menuRenderer.render(mainNavigation) | raw }}\n```\n\n----------------------------------------\n\nTITLE: Setting a Quantity Value for a Data Object in PHP\nDESCRIPTION: This code snippet shows how to set a quantity value for a data object in Pimcore. It creates a new Test object, retrieves a unit by its abbreviation, and sets the 'Height' field with a new quantity value.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/01_Object_Classes/01_Data_Types/55_Number_Types.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Pimcore\\Model\\DataObject;\n\n$parent = DataObject::getByPath(\"/\");\n\n$object = new DataObject\\Test();\n$unit = DataObject\\QuantityValue\\Unit::getByAbbreviation(\"km\");\n$object->setKey(\"test2\");\n$object->setParent($parent);\n$object->setHeight(new DataObject\\Data\\QuantityValue(27, $unit->getId()));\n$object->save();\n```\n\n----------------------------------------\n\nTITLE: Creating Parent PHP Class for Product Variant Handling\nDESCRIPTION: Demonstrates how to create an AbstractProduct class that extends Pimcore's Concrete class to handle product variants. Implements a getVariants() method to retrieve product variants by explicitly specifying the variant type.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/26_Best_Practice/02_Implementing_Product_Information_Management.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Model;\nuse Pimcore\\Model\\DataObject;\n\nclass AbstractProduct extends DataObject\\Concrete\n{\n    /**\n    * @return self[]\n    */\n    public function getVariants(): array\n    {\n        $variantType = self::OBJECT_TYPE_VARIANT; //variant\n        $variants = $this->getChildren(array($variantType))->load();\n        return $variants;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Object Brick Data in PHP\nDESCRIPTION: Demonstrates how to query for Object Brick data using the PHP API. It shows how to add Object Bricks to a DataObject\\Listing and use their attributes in the query condition.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/01_Object_Classes/01_Data_Types/60_Object_Bricks.md#2025-04-17_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n//querying for Objectbrick data\n$productList = DataObject\\Product::getList([\n    /* add here all Objectbricks you need in the condition */\n    \"objectbricks\" => [\"Tire\",\"Brake\"],\n    /* in the condition access Objectbrick attributes with OBJECTBRICKNAME.ATTRIBUTENAME */\n    \"condition\" => \"Tire.dimension > 200\"\n]);\n```\n\n----------------------------------------\n\nTITLE: Creating Event Listener for Custom Asset Loading in PHP\nDESCRIPTION: This snippet shows how to create an event listener to add custom JS paths for loading in the Pimcore Admin UI. It implements the EventSubscriberInterface and handles the BundleManagerEvents::JS_PATHS event.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/20_Extending_Pimcore/13_Bundle_Developers_Guide/13_Loading_Admin_UI_Assets.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\EventListener;\n\nuse Pimcore\\Event\\BundleManager\\PathsEvent;\nuse Pimcore\\Event\\BundleManagerEvents;\nuse Symfony\\Component\\EventDispatcher\\EventSubscriberInterface;\n\nclass AdminAssetsListener implements EventSubscriberInterface\n{\n    public static function getSubscribedEvents(): array\n    {\n        return [\n            BundleManagerEvents::JS_PATHS => 'onJsPaths'\n        ];\n    }\n\n    public function onJsPaths(PathsEvent $event): void\n    {\n        $event->addPaths([\n            '/bundles/app/js/admin.js'\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Environment Configuration for Debug Mode in Pimcore\nDESCRIPTION: Environment variables configuration in .env file to enable debug mode and set application environment for debugging tools.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/19_Development_Tools_and_Details/13_Debugging.md#2025-04-17_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nAPP_ENV=dev\nAPP_DEBUG=1\n```\n\n----------------------------------------\n\nTITLE: Working with Localized Fields in Pimcore Object Listings\nDESCRIPTION: Shows how to work with localized fields in Pimcore object listings, including setting conditions on localized fields and disabling localized fields in listings.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/03_Working_with_PHP_API.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$entries = new \\Pimcore\\Model\\DataObject\\Myclassname\\Listing();\n$entries->setLocale(\"en\");\n$entries->setCondition(\"name LIKE :name\", [\"name\" => \"%term%\"]); // name is a field inside a localized field container\n\n// Disable Localized Fields in listings\n$entries = new \\Pimcore\\Model\\DataObject\\Myclassname\\Listing();\n$entries->setIgnoreLocalizedFields(true);\n$entries->load();\n```\n\n----------------------------------------\n\nTITLE: Accessing Image Thumbnails in PHP\nDESCRIPTION: This code demonstrates how to access image thumbnails in PHP using the getThumbnail() method, which returns the path to the thumbnail file or generates HTML code for the image tag including high-resolution alternatives.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/04_Assets/03_Working_with_Thumbnails/01_Image_Thumbnails.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$image = Asset::getById(1234);\n\n// get path to thumbnail, e.g. `/foo/bar/362/image-thumb__362__content/foo.webp\n$pathToThumbnail = $image->getThumbnail(\"myThumbnailName\");\n\n// preferred alternative - let Pimcore create the whole image tag\n// including high-res alternatives (srcset) or media queries, if configured\n$htmlCode = $image->getThumbnail(\"myThumbnail\")->getHtml();\n```\n\n----------------------------------------\n\nTITLE: Installing Dependency with Composer in Pimcore\nDESCRIPTION: Demonstrates how to use Composer to add a new dependency to a Pimcore project. This example installs the 'mtdowling/cron-expression' package.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/20_Extending_Pimcore/01_Add_Your_Own_Dependencies_and_Packages.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require mtdowling/cron-expression\n```\n\n----------------------------------------\n\nTITLE: Retrieving Available Languages in Pimcore PHP\nDESCRIPTION: This snippet demonstrates how to get an array of valid languages for the front-end website using Pimcore's Tool class.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/01_Object_Classes/01_Data_Types/50_Localized_Fields.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$languages = \\Pimcore\\Tool::getValidLanguages();\n```\n\n----------------------------------------\n\nTITLE: Displaying Image Thumbnail in Twig Template\nDESCRIPTION: Shows how to display a thumbnail of an image field in a Twig template, using the getThumbnail() method on the asset object.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/01_Object_Classes/01_Data_Types/45_Image_Types.md#2025-04-17_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% if object.myImage is instanceof('Pimcore\\Model\\Asset\\Image') %}\n    {{ object.myImage.thumbnail('myThumbnailDefinitionName').html }}\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Custom Logger Implementation\nDESCRIPTION: PHP example showing how to inject and use a custom logger in a service class.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/19_Development_Tools_and_Details/07_Logging.md#2025-04-17_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nclass SomeService {\n    public function __construct(\\Psr\\Log\\LoggerInterface $customLogLogger)\n    {\n        $customLogLogger->debug('Test Message');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Cached Snippet Implementation in Twig\nDESCRIPTION: Example showing how to implement a cached snippet editable. Enables caching for better performance when snippet content doesn't need to be dynamically generated on each request.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/03_Documents/01_Editables/32_Snippet.md#2025-04-17_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{{ pimcore_snippet(\"mySnippet\", {cache: true}) }}\n```\n\n----------------------------------------\n\nTITLE: Complete Example of a Document Page Extending a Layout in Pimcore\nDESCRIPTION: This example demonstrates a complete document page template that extends a layout and overrides the 'content' block. It includes a Pimcore editable input field for a headline.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/02_MVC/02_Template/01_Layouts.md#2025-04-17_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% extends 'layout.html.twig' %}\n...\n{% block content %}\n<h1>\n    {{ pimcore_input('headline', {'width': 540}) }}\n</h1>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Setting Video Data in Pimcore PHP\nDESCRIPTION: Demonstrates how to set video data programmatically in a Pimcore DataObject. Shows setting an asset video with a poster image, including title and description.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/01_Object_Classes/01_Data_Types/98_Video_Type.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n// asset video with poster image\n\n$object = DataObject::getById(789);\n$assetVideo = Asset::getById(123);\n$assetImage = Asset::getById(456);\n\n$videoData= new DataObject\\Data\\Video();\n$videoData->setData($assetVideo);\n$videoData->setType(\"asset\");\n$videoData->setPoster($assetImage);\n$videoData->setTitle(\"My Title\");\n$videoData->setDescription(\"My Description\");\n\n$object->setMyVideo($videoData);\n$object->save();\n```\n\n----------------------------------------\n\nTITLE: Installing Pimcore Demo Package with Docker\nDESCRIPTION: Command to create a new Pimcore project using the demo package which includes exemplary blueprints. Uses PHP 8.2 and sets proper user permissions.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/01_Getting_Started/00_Installation/00_Docker_Based_Installation.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -u `id -u`:`id -g` --rm -v `pwd`:/var/www/html pimcore/pimcore:php8.2-latest composer create-project pimcore/demo my-project\n```\n\n----------------------------------------\n\nTITLE: Using UUID Tools in Pimcore PHP\nDESCRIPTION: Demonstrates core UUID operations including retrieving UUIDs for elements, getting elements by UUID, and creating new UUIDs using the Tool\\UUID class.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/19_Development_Tools_and_Details/19_UUID_Support.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Pimcore\\Bundle\\UuidBundle\\Model\\Tool;\n  \n//get UUID for given element (document, asset, class, object)\n$uuid = Tool\\UUID::getByItem($document);\n \n//get element for given UUID\n$document = Tool\\UUID::getByUuid($uuid);\n \n//create and save uuid for given element\n$uuid = Tool\\UUID::create($document);\n```\n\n----------------------------------------\n\nTITLE: Exporting Pimcore Data Objects to CSV using PHP\nDESCRIPTION: This snippet shows how to export data objects to a CSV file using a Pimcore object listing and PHP's file handling functions.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/05_External_System_Interaction.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$file = fopen(\"export.csv\",\"w\");\n\n$entries = new DataObject\\Myclassname\\Listing();\n$entries->setCondition(\"name LIKE ?\", \"%bernie%\");\n \nforeach($entries as $entry) { \n   fputcsv($file, [\n       'id' => $entry->getId(),\n       'name' => $entry->getName()\n   ]);\n}\n\nfclose($file);\n```\n\n----------------------------------------\n\nTITLE: Creating and Setting Link Object in Pimcore\nDESCRIPTION: Demonstrates how to create and configure a Link object programmatically in Pimcore, including path, text, and title settings.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/01_Object_Classes/01_Data_Types/65_Others.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$l = new DataObject\\Data\\Link();               \n$l->setPath(\"http://www.pimcore.org\");    \n$l->setText(\"pimcore.org\");            \n$l->setTitle(\"Visit pimcore.org\");               \n$object->setLink($l);\n```\n\n----------------------------------------\n\nTITLE: Accessing Document Language in PHP Controller\nDESCRIPTION: Demonstrates how to retrieve the localization setting for a document in a PHP controller. It shows two methods: using the request object and directly accessing the document property.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/06_Multi_Language_i18n/02_Localize_your_Documents.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// in your controller / action\n$locale = $request->getLocale(); \n//or \n$language = $this->document->getProperty(\"language\");\n \n// any document\n$doc = \\Pimcore\\Model\\Document::getById(234);\n$language = $doc->getProperty(\"language\");\n```\n\n----------------------------------------\n\nTITLE: Updating References in Cloned Pimcore Elements using PHP\nDESCRIPTION: This snippet demonstrates how to update references in cloned Pimcore elements using the rewriteIds() method. It uses a rewrite configuration to map old object IDs to new ones, ensuring that references are properly updated in the cloned object.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/18_Tools_and_Features/31_Cloning Elements.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$rewriteConfig = array(\n    \"object\" => array(\n        176 => 190\n    )\n);\n$object = DataObject\\Service::rewriteIds($object, $rewriteConfig);\n```\n\n----------------------------------------\n\nTITLE: Rendering Document Content with Document Service in PHP\nDESCRIPTION: Shows how to use the Pimcore\\Model\\Document\\Service::render() method to render a page outside of a view. This is useful for scenarios like sending emails with rendered page content. The method accepts optional parameters and a flag to include layout.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/19_Development_Tools_and_Details/17_Static_Helpers.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$optionalParams = ['foo' => 'bar', 'hum'=>'bug'];\n$useLayout = true;\n$content = Document\\Service::render(Document::getById(2), $optionalParams, $useLayout);\necho $content;\n```\n\n----------------------------------------\n\nTITLE: Creating Notes & Events using Pimcore API in PHP\nDESCRIPTION: This snippet demonstrates how to create a new Note object in Pimcore, set its properties, and add additional data. It shows how to associate the note with a DataObject and save it.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/18_Tools_and_Features/05_Notes_and_Events.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Pimcore\\Model;\n\n$object = Model\\DataObject::getById(4);\n\n$note = new Model\\Element\\Note();\n$note->setElement($object);\n$note->setDate(time());\n$note->setType(\"erp_import\");\n$note->setTitle(\"changed availabilities to xyz\");\n$note->setUser(0);\n\n// you can add as much additional data to notes & events as you want\n$note->addData(\"myText\", \"text\", \"Some Text\");\n$note->addData(\"myObject\", \"object\", Model\\DataObject::getById(7));\n$note->addData(\"myDocument\", \"document\", Model\\Document::getById(18));\n$note->addData(\"myAsset\", \"asset\", Model\\Asset::getById(20));\n\n$note->save();\n```\n\n----------------------------------------\n\nTITLE: Creating a Bundle Setup Event Subscriber in PHP\nDESCRIPTION: PHP class implementing EventSubscriberInterface to modify the list of recommended and required bundles during Pimcore installation, specifically adding the PimcoreAdminBundle.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/01_Getting_Started/02_Advanced_Installation_Topics/README.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\EventSubscriber;\n\nuse Pimcore\\Bundle\\AdminBundle\\PimcoreAdminBundle;\nuse Pimcore\\Bundle\\InstallBundle\\Event\\BundleSetupEvent;\nuse Pimcore\\Bundle\\InstallBundle\\Event\\InstallEvents;\nuse Symfony\\Component\\EventDispatcher\\EventSubscriberInterface;\n\nclass BundleSetupSubscriber implements EventSubscriberInterface\n{\n    public static function getSubscribedEvents(): array\n    {\n        return [\n            InstallEvents::EVENT_BUNDLE_SETUP => [\n                ['bundleSetup'],\n            ],\n        ];\n    }\n\n    public function bundleSetup(BundleSetupEvent $event): void\n    {\n        // make bundle installable (using --install-bundles) and recommend it in interactive installation\n        $event->addInstallableBundle('PimcoreAdminBundle', PimcoreAdminBundle::class, true);\n\n        // add required bundle\n        $event->addRequiredBundle('PimcoreAdminBundle', PimcoreAdminBundle::class);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Areabrick Methods in PHP\nDESCRIPTION: This snippet shows how to implement custom methods on an Areabrick class, including action(), postRenderAction(), and custom HTML wrapper methods. It demonstrates handling request parameters, returning responses, and customizing the brick's HTML structure.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/03_Documents/01_Editables/02_Areablock/02_Bricks.md#2025-04-17_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Document\\Areabrick;\n\nuse Pimcore\\Extension\\Document\\Areabrick\\AbstractTemplateAreabrick;\nuse Pimcore\\Model\\Document\\Editable\\Area\\Info;\nuse Symfony\\Component\\HttpFoundation\\RedirectResponse;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\nclass Iframe extends AbstractTemplateAreabrick\n{\n    // other methods defined above\n    // \n    public function action(Info $info): ?RedirectResponse\n    {\n        $myVar = $info->getRequest()->get('myParam');\n\n        $info->setParam('myVar', $myVar);\n\n        // optionally return a response object\n        if ('POST' === $info->getRequest()->getMethod()) {\n            return new RedirectResponse('/foo');\n        }\n\n        return null;\n    }\n\n    // OPTIONAL METHODS\n\n    // executed after a brick is rendered\n    public function postRenderAction(Info $info): ?Response\n    {\n    }\n\n    // returns a custom html wrapper element (return an empty string if you don't want a wrapper element)\n    public function getHtmlTagOpen(Info $info): string\n    {\n        return '<span class=\"customWrapperDiv\">';\n    }\n\n    public function getHtmlTagClose(Info $info): string\n    {\n        return '</span>';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Multiselect Editable in Twig\nDESCRIPTION: This code snippet demonstrates how to implement a Multiselect editable in Pimcore using Twig. It shows the editmode configuration with options for cars, motorcycles, and accessories, and displays the selected categories in the frontend.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/03_Documents/01_Editables/22_Multiselect.md#2025-04-17_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% if editmode %}\n    {{ pimcore_multiselect(\"categories\", {\n        \"width\": 200,\n        \"height\": 100,\n        \"store\": [\n            [\"cars\", \"Cars\"],\n            [\"motorcycles\", \"Motorcycles\"],\n            [\"accessories\", \"Accessories\"],\n        ]\n    }) }}\n{% else %}\n    <p>{{ \"This page is linked to\" | trans }}\n        {% for categoryKey in pimcore_multiselect(\"categories\").getData %}\n            <span>\n            {{ categoryKey | trans }}\n        </span>\n        {% endfor %}\n        categories\n    </p>\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Implementing ProductLinkGenerator Class in PHP\nDESCRIPTION: Sample implementation of a Link Generator for product objects. It generates URLs for Car and AccessoryPart objects, including logic for handling inherited values and navigation paths.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/01_Object_Classes/05_Class_Settings/30_Link_Generator.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Website\\LinkGenerator;\n\nuse App\\Model\\Product\\AccessoryPart;\nuse App\\Model\\Product\\Car;\nuse App\\Website\\Tool\\Text;\nuse Pimcore\\Bundle\\EcommerceFrameworkBundle\\Model\\ProductInterface;\nuse Pimcore\\Model\\DataObject;\nuse Pimcore\\Model\\DataObject\\ClassDefinition\\LinkGeneratorInterface;\nuse Pimcore\\Bundle\\EcommerceFrameworkBundle\\Model\\DefaultMockup;\n\nclass ProductLinkGenerator extends AbstractProductLinkGenerator implements LinkGeneratorInterface\n{\n    public function generate(object $object, array $params = []): string\n    {\n        if (!($object instanceof Car || $object instanceof AccessoryPart)) {\n            throw new \\InvalidArgumentException('Given object is no Car');\n        }\n\n        return $this->doGenerate($object, $params);\n    }\n\n    public function generateWithMockup(ProductInterface $object, array $params = []): string\n    {\n        return $this->doGenerate($object, $params);\n    }\n\n    protected function doGenerate(ProductInterface $object, array $params): string\n    {\n        return DataObject\\Service::useInheritedValues(true, function () use ($object, $params) {\n            return $this->pimcoreUrl->__invoke(\n                [\n                    'productname' => Text::toUrl($object->getOSName() ? $object->getOSName() : 'product'),\n                    'product' => $object->getId(),\n                    'path' => $this->getNavigationPath($object->getMainCategory(), $params['rootCategory'] ?? null),\n                    'page' => null\n                ],\n                'shop-detail',\n                true\n            );\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Saving Pimcore Objects in PHP\nDESCRIPTION: Demonstrates how to save Pimcore objects using the PHP API. Objects can be instantiated, filled with data, and then saved using the 'save' method.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/README.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nsave\n```\n\n----------------------------------------\n\nTITLE: Retrieving Tags for a Pimcore Asset Element via PHP\nDESCRIPTION: This code snippet demonstrates how to retrieve all tags associated with a specific Pimcore asset using the getTagsForElement method. It specifies the element type as 'asset' and uses an asset ID to fetch its tags.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/18_Tools_and_Features/09_Tags.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$tags = \\Pimcore\\Model\\Element\\Tag::getTagsForElement('asset', 30);\ndump($tags);\n```\n\n----------------------------------------\n\nTITLE: Custom News Model Class Implementation in PHP\nDESCRIPTION: Example PHP class showing how to implement a custom News model that extends the core Pimcore News class. Demonstrates adding custom attributes and methods while maintaining inheritance.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/20_Extending_Pimcore/03_Overriding_Models.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php \n\nnamespace App\\Model\\DataObject; \n\nclass News extends \\Pimcore\\Model\\DataObject\\News\n{\n    // start overriding stuff \n    public function getMyCustomAttribute(): mixed\n    {\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying for Objects with Specific Object Brick in PHP\nDESCRIPTION: Shows how to query for objects that have a specific Object Brick using the PHP API. It demonstrates querying for all products that have the 'Tire' Object Brick.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/01_Object_Classes/01_Data_Types/60_Object_Bricks.md#2025-04-17_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n//return all Products that have the Objectbrick \"Tire\"\n$productList = DataObject\\Product::getList([\n    /* add here all Objectbricks you need in the condition */\n    \"objectbricks\" => [\"Tire\"],\n    /* in the condition access Objectbrick attributes with OBJECTBRICKNAME.ATTRIBUTENAME */\n    \"condition\" => \"Tire.fieldname != ''\"\n]);\n```\n\n----------------------------------------\n\nTITLE: Protected Asset Controller Implementation in PHP\nDESCRIPTION: PHP controller implementation for handling protected asset delivery with custom permission checks.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/04_Assets/07_Restricting_Public_Asset_Access.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Controller;\n\nuse Pimcore\\Controller\\FrontendController;\nuse Pimcore\\Model\\Asset;\nuse Pimcore\\Model\\Asset\\Service;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpFoundation\\StreamedResponse;\nuse Symfony\\Component\\HttpKernel\\Exception\\AccessDeniedHttpException;\n\nclass MyAssetController extends FrontendController\n{\n    public function protectedAssetAction(Request $request): Response\n    {\n        // IMPORTANT!\n        // Add your code here to check permission!\n\n\n        // the following code is responsible to deliver asset & thumbnail contents\n        // modify it the way you need it for your use-case\n        $pathInfo = $request->getPathInfo();\n        $asset = Asset::getByPath($pathInfo);\n        if ($asset){\n            $stream = $asset->getStream();\n            return new StreamedResponse(function () use ($stream) {\n                fpassthru($stream);\n            }, 200, [\n                'Content-Type' => $asset->getMimeType(),\n            ]);\n        } else {\n            return Asset\\Service::getStreamedResponseByUri($pathInfo);\n        }\n\n        throw new AccessDeniedHttpException('Access denied.');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TransmissionInterface in PHP for Pimcore Data Objects\nDESCRIPTION: This code snippet defines an interface 'TransmissionInterface' with two methods for retrieving gearbox type and number of gears. It's used to extend the functionality of the Cars data object class.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/01_Object_Classes/05_Class_Settings/26_Interfaces_and_traits.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// src/Model/Product/TransmissionInterface.php\n\nnamespace App\\Model\\Product;\n\ninterface TransmissionInterface\n{\n    public function getGearboxType(): ?string;\n\n    public function getNumberOfGears(): ?int;\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Area Editable Data in PHP\nDESCRIPTION: Demonstrates how to programmatically access the data within an Area editable using PHP. This example shows how to load a document, get the Area editable, and retrieve a Block element from within it.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/03_Documents/01_Editables/04_Area.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// load document\n$document = \\Pimcore\\Model\\Document\\Page::getByPath('/en/basic-examples/galleries');\n\n/** @var \\Pimcore\\Model\\Document\\Editable\\Area $area */\n$area = $document->getEditable('myArea');\n\n/** @var \\Pimcore\\Model\\Document\\Editable\\Block $block */\n$block = $area->getElement('gallery');\n?>\n```\n\n----------------------------------------\n\nTITLE: HTML5 Video with Automatic Transcoding using video.js\nDESCRIPTION: Implements an HTML5 video player with automatic video transcoding support using video.js library and custom attributes.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/03_Documents/01_Editables/38_Video.md#2025-04-17_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n<!DOCTYPE HTML>\n<html>\n<head>\n    <link href=\"http://vjs.zencdn.net/5.4.4/video-js.css\" rel=\"stylesheet\">\n</head>\n<body>\n    {{ pimcore_video(\"myVideo\", {\n            thumbnail: \"example\",\n            width: 400,\n            height: 300,\n            attributes: {\n                \"class\": \"video-js custom-class\",\n                \"preload\": \"auto\",\n                \"controls\": \"\",\n                \"data-custom-attr\": \"my-test\"\n            }\n        })\n    }}\n \n    <script src=\"http://vjs.zencdn.net/5.4.4/video.js\"></script>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Accessing and Manipulating Structured Table Data with PHP in Pimcore\nDESCRIPTION: This snippet demonstrates how to access and modify data in a Structured Table using Pimcore's PHP API. It shows how to retrieve the entire table, access specific rows and columns, set values, and populate the table with an array of data.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/01_Object_Classes/01_Data_Types/85_Structured_Table.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n/** @var \\Pimcore\\Model\\DataObject\\Data\\StructuredTable $structuredData */\n$structuredData = $object->getAdditionalinfo();\n\n//Returns an associated array of row CommunityEdition with all columns\n$structuredData->getCommunityedition();\n\n//Returns an associated array of row CommunityEdition with all columns\n$structuredData->getCommunityedition__support();\n\n//Delivers an associated array of row CommunityEdition with all columns\n$structuredData->setCommunityedition__support(\"Forum\");\n\n//Alternative way of setting data to a structured table\n$data = [];\n$data['communityedition']['opensource'] = true;\n$structuredData->setData($data);\n```\n\n----------------------------------------\n\nTITLE: Handling Renderlet in PHP Controller Action\nDESCRIPTION: This PHP code snippet shows how to handle the Renderlet in a controller action. It validates the input, retrieves assets, and passes them to the view.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/03_Documents/01_Editables/28_Renderlet.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n#[Template('my-gallery.html.twig')]\npublic function myGalleryAction(Request $request): array\n{\n    if ('asset' === $request->query->get('type')) {\n        $asset = Asset::getById($request->query->getInt('id'));\n        if ('folder' === $asset->getType()) {\n            return [\n                'assets' => $asset->getChildren()\n            ];\n        }\n    }\n\n    return [];\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Meta Tags with Twig HeadMeta Extension\nDESCRIPTION: Shows how to output the configured meta tags in a Twig template using the HeadMeta helper.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/02_MVC/02_Template/02_Template_Extensions/02_HeadMeta.md#2025-04-17_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{{ pimcore_head_meta() }}\n```\n\n----------------------------------------\n\nTITLE: Implementing Timestamp Preview in Pimcore Controller Action\nDESCRIPTION: This PHP code snippet demonstrates how to use the OutputTimestampResolver service in a Pimcore controller action to get the current output timestamp. This enables the time slider functionality in the document preview.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/19_Development_Tools_and_Details/39_Preview_Scheduled_Content.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npublic function timestampAction(OutputTimestampResolver $outputTimestampResolver): Response\n{\n    $currentTimestamp = $outputTimestampResolver->getOutputTimestamp();\n\n    $response = \"\n    <html><head></head><body>\n        current time is \" . date(\"Y-m-d H:i\", $currentTimestamp) . \"\n    </body></html>\n    \";\n\n    return new Response($response);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New Product Variant\nDESCRIPTION: Shows how to programmatically create a new product variant by setting the parent product and specifying the object type as variant.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/26_Best_Practice/02_Implementing_Product_Information_Management.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Pimcore\\Model\\DataObject\\Product;\nuse Pimcore\\Model\\DataObject\\AbstractObject;\n\n    $tshirt = Product::getByName(\"Classic T-Shirt\", \"en\", 1);\n\n    $orange = new Product();\n    $orange->setKey(\"Orange\");\n    $orange->setParent($tshirt);\n    $orange->setType(AbstractObject::OBJECT_TYPE_VARIANT);\n\n    $orange->save();\n```\n\n----------------------------------------\n\nTITLE: Setting and Retrieving Placeholder Content in Twig\nDESCRIPTION: Demonstrates basic usage of the Placeholder extension to set and retrieve content. It uses the 'pimcore_placeholder' function to set a value and then output it.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/02_MVC/02_Template/02_Template_Extensions/00_Placeholder.md#2025-04-17_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% do pimcore_placeholder('foo').set(\"Some text for later\") %}\n\n{# outputs \"Some text for later\" #}\n{{ pimcore_placeholder('foo') }}\n```\n\n----------------------------------------\n\nTITLE: Retrieving and Managing Tags for Pimcore Elements via PHP API\nDESCRIPTION: This code snippet showcases the core methods available in Pimcore's Tag API for retrieving tags associated with elements, adding new tags, removing tags, and setting tags for elements. It demonstrates how to interact with tags programmatically for Documents, Assets, and Data Objects.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/18_Tools_and_Features/09_Tags.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n/**\n * returns all assigned tags for element\n *\n * @return Tag[]\n */\npublic static function getTagsForElement(string $cType, int $cId): array\n{\n    $tag = new Tag();\n\n    return $tag->getDao()->getTagsForElement($cType, $cId);\n}\n\n/**\n * adds given tag to element\n */\npublic static function addTagToElement(string $cType, int $cId, Tag $tag): void\n{\n    $tag->getDao()->addTagToElement($cType, $cId);\n}\n\n/**\n * removes given tag from element\n */\npublic static function removeTagFromElement(string $cType, int $cId, Tag $tag): void\n{\n    $tag->getDao()->removeTagFromElement($cType, $cId);\n}\n\n/**\n * sets given tags to element and removes all other tags\n * to remove all tags from element, provide empty array of tags\n *\n * @param Tag[] $tags\n */\npublic static function setTagsForElement(string $cType, int $cId, array $tags): void\n{\n    $tag = new Tag();\n    $tag->getDao()->setTagsForElement($cType, $cId, $tags);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Advanced Checkbox with Conditional Logic in Twig\nDESCRIPTION: Advanced example demonstrating how to use a Pimcore checkbox with conditional logic. This snippet shows how to check the checkbox state and execute code conditionally based on whether it's checked.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/03_Documents/01_Editables/08_Checkbox.md#2025-04-17_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\nSetting XYZ: {{ pimcore_checkbox(\"myCheckbox\") }}\n\n{% if pimcore_checkbox(\"myCheckbox\").isChecked() %}\n    <div>\n        {{ dump(\"do something\") }}\n    </div>\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Hotspots and Markers Data Structure Example in PHP\nDESCRIPTION: Example output structures for getHotspots() and getMarker() methods showing the format of returned data including positions, dimensions and custom data fields.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/03_Documents/01_Editables/14_Image.md#2025-04-17_snippet_5\n\nLANGUAGE: php\nCODE:\n```\narray(1) {\n  [0] => array(6) {\n    [\"top\"] => float(36.8)\n    [\"left\"] => float(39.5)\n    [\"width\"] => int(5)\n    [\"height\"] => float(6.6666666666667)\n    [\"data\"] => array(2) {\n      [0] => object(Pimcore\\Model\\Element\\Data\\MarkerHotspotItem)#171 (3) {\n        [\"name\"] => string(30) \"checkbox_data_added_to_hotspot\"\n        [\"type\"] => string(8) \"checkbox\"\n        [\"value\"] => bool(true)\n      }\n      [1] => object(Pimcore\\Model\\Element\\Data\\MarkerHotspotItem)#172 (3) {\n        [\"name\"] => string(28) \"object_data_added_to_hotspot\"\n        [\"type\"] => string(6) \"object\"\n        [\"value\"] => int(6)\n      }\n    }\n    [\"name\"] => NULL\n  }\n}\n\narray(1) {\n  [0] => array(4) {\n    [\"top\"] => float(35.466666666667)\n    [\"left\"] => float(69.9)\n    [\"data\"] => array(1) {\n      [0] => object(Pimcore\\Model\\Element\\Data\\MarkerHotspotItem)#173 (3) {\n        [\"name\"] => string(31) \"Textarea data added to the marker\"\n        [\"type\"] => string(8) \"textarea\"\n        [\"value\"] => string(38) \"Here is a description of marked place.\"\n      }\n    }\n    [\"name\"] => NULL\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Cache Control Functions Overview\nDESCRIPTION: Collection of PHP functions demonstrating various cache control operations like enabling/disabling cache, clearing tags, and setting write behavior.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/19_Development_Tools_and_Details/09_Cache/README.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// disable the cache globally\n\\Pimcore\\Cache::disable();\n \n// enable the cache globally\n\\Pimcore\\Cache::enable();\n \n// invalidate caches using a tag\n\\Pimcore\\Cache::clearTag(\"mytag\");\n \n// invalidate caches using tags\n\\Pimcore\\Cache::clearTags([\"mytag\",\"output\"]);\n \n// clear the whole cache\n\\Pimcore\\Cache::clearAll();\n \n// disable the queue and limit and write immediately\n\\Pimcore\\Cache::setForceImmediateWrite(true);\n```\n\n----------------------------------------\n\nTITLE: Generating Document Thumbnails with Various Options in PHP\nDESCRIPTION: This snippet demonstrates how to generate thumbnails from document assets in Pimcore. It shows examples of creating thumbnails using predefined configurations, dynamic settings, specifying page numbers, and creating thumbnails for all pages in a document.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/04_Assets/03_Working_with_Thumbnails/05_Document_Thumbnails.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$asset = Asset::getById(123);\nif($asset instanceof Asset\\Document) {\n \n   // get a thumbnail of the first page, resized to the configuration of \"myThumbnail\"\n   echo $asset->getImageThumbnail(\"myThumbnail\");\n \n \n   // get the thumbnail for the third (see second parameter) page using a dynamic configuration\n   echo $asset->getImageThumbnail([\"width\" => 230, \"contain\" => true], 2);\n \n    \n   // get the thumbnail URL for all pages, but do not generate them immediately (see third parameter) - the thumbnails are then generated on request\n   $thumbnailUrls = [];\n   for($i=1; $i<=$asset->getPageCount(); $i++) {\n      $thumbnailUrls[] = $asset->getImageThumbnail(\"myThumbnail\", $i, true);\n   }\n \n}\n```\n\n----------------------------------------\n\nTITLE: Handling Workflow Transition Events\nDESCRIPTION: PHP event listener implementation showing how to access additional data from workflow transition events.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/07_Workflow_Management/09_Working_with_PHP_API.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\EventListener;\n\nuse Symfony\\Component\\Workflow\\Event\\TransitionEvent;\n\nclass WorkflowsEventListener\n{\n    public function onCloseProduct(TransitionEvent $event): void\n    {\n        $context = $event->getContext();\n        $additionalData = $context[\"additional\"];\n        \n        $mySelectValue = $additionalData[\"mySelect\"];;\n        \n        // do something with the value\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting All Object Bricks from a Field in PHP\nDESCRIPTION: Demonstrates how to remove all Object Bricks from an Object Brick field using the PHP API. It calls the delete method on the bricks and saves the product.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/01_Object_Classes/01_Data_Types/60_Object_Bricks.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n//remove all ObjectBricks from an ObjectBrick field\n$product->getBricks()->delete($product);\n$product->save();\n```\n\n----------------------------------------\n\nTITLE: Setting Object Brick Data in PHP\nDESCRIPTION: Shows how to set data in an Object Brick using the PHP API. It demonstrates updating the 'tiretype' attribute of a 'Tire' Object Brick and saving the changes.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/01_Object_Classes/01_Data_Types/60_Object_Bricks.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n//setting data of a Objectbrick\n$product = DataObject\\Product::getById(4);\n$product->getBricks()->getTire()->setTiretype(\"Winter\");\n$product->save();\n```\n\n----------------------------------------\n\nTITLE: Giving Consent using Pimcore's Consent Service in PHP\nDESCRIPTION: This snippet demonstrates how to use the Pimcore\\DataObject\\Consent\\Service to give consent for a customer. It includes setting up the consent message, meta information, and calling the giveConsent method. The code assumes the Customer object has been saved and has an ID.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/01_Object_Classes/01_Data_Types/20_Consent.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php \n\n    $customer = Customer::getById(345);\n\n    $consentMessage = \"lorem ipsum\"; //insert exact text that was displayed to the user\n    $metaInfo = [\n        'ip' => $request->getClientIp()\n    ]; \n    \n    /**\n    *  @var Pimcore\\DataObject\\Consent\\Service $consentService\n    **/\n    $consentService->giveConsent($customer, \"directMailing\", $consentMessage, $metaInfo);\n```\n\n----------------------------------------\n\nTITLE: Notification Service Core Methods Implementation\nDESCRIPTION: Core notification service methods for finding individual and listing multiple notifications. Includes find() method for getting notification by ID and findAll() method for retrieving filtered lists of notifications.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/18_Tools_and_Features/41_Notifications.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n    /**\n     * @throws UnexpectedValueException\n     */\n    public function find(int $id): Notification\n    {\n        $notification = Notification::getById($id);\n\n        if (!$notification instanceof Notification) {\n            throw new UnexpectedValueException(\"Notification with the ID {$id} doesn't exists\");\n        }\n\n        return $notification;\n    }\n    \n    /**\n     * @param array<string, mixed> $filter\n     * @param array{offset?: int|string, limit?: int|string|null} $options\n     *\n     * @return array{total: int, data: Notification[]}\n     *\n     * @throws Exception\n     */\n    public function findAll(array $filter = [], array $options = []): array\n    {\n        $listing = new Listing();\n\n        $filter  = [...$filter, ...['isStudio' => 0]];\n\n        $conditions = [];\n        $conditionVariables = [];\n        foreach ($filter as $key => $value) {\n            if (isset($value['condition'])) {\n                $conditions[] = $value['condition'];\n                $conditionVariables[] = $value['conditionVariables'] ?? [];\n            } else {\n                $conditions[] = $key . ' = :' . $key;\n                $conditionVariables[] = [$key => $value];\n            }\n        }\n\n        $condition = implode(' AND ', $conditions);\n        $listing->setCondition($condition, array_merge(...$conditionVariables));\n\n        $listing->setOrderKey('creationDate');\n        $listing->setOrder('DESC');\n        $offset = $options['offset'] ?? 0;\n        $limit = $options['limit'] ?? null;\n\n        if (is_string($offset)) {\n            //TODO: Trigger deprecation\n            $offset = (int) $offset;\n        }\n        if (is_string($limit)) {\n            //TODO: Trigger deprecation\n            $limit = (int) $limit;\n        }\n\n        $this->beginTransaction();\n\n        $result = [\n            'total' => $listing->count(),\n            'data' => $listing->getItems($offset, $limit),\n        ];\n\n        $this->commit();\n\n        return $result;\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating and Adding Field Collection Items in PHP\nDESCRIPTION: This snippet demonstrates how to programmatically create a new object, instantiate a field collection, add items to it, and assign it to the object. It uses a 'Collectiontest' object class and a 'MyCollection' field collection type.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/01_Object_Classes/01_Data_Types/35_Fieldcollections.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$object = new DataObject\\Collectiontest();\n\n$object->setParentId(1);\n$object->setUserOwner(1);\n$object->setUserModification(1);\n$object->setCreationDate(time());\n$object->setKey(uniqid() . rand(10, 99));\n\n$items = new DataObject\\Fieldcollection();\n\nfor ($i = 0; $i < 5; $i++) {\n    $item = new DataObject\\Fieldcollection\\Data\\MyCollection();\n    $item->setMyinput(\"This is a test \" . $i);\n    $items->add($item);\n}\n\n$object->setCollectionitems($items);\n$object->save();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Product Variants Using getVariants()\nDESCRIPTION: Shows how to retrieve variants for a specific product using the getVariants() method defined in the AbstractProduct class.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/26_Best_Practice/02_Implementing_Product_Information_Management.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Pimcore\\Model\\DataObject;\n\n    $product = DataObject\\Product::getById(1);\n    $variants = $product->getVariants();\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Document Class in PHP\nDESCRIPTION: Demonstrates how to create a custom 'Book' document class that extends Pimcore's base Document model. The class defines a custom type 'book'.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/20_Extending_Pimcore/13_Bundle_Developers_Guide/08_Adding_Document_Types.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// src/Model/Document/Book.php\n\nnamespace App\\Model\\Document;\n\nclass Book extends \\Pimcore\\Model\\Document\n{\n    // do override the type here\n    protected string $type = 'book';\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Localized Fields in Pimcore DataObjects\nDESCRIPTION: Examples of retrieving DataObjects using localized fields with different locales and limits. Shows multiple ways to query cities and countries using both direct methods and localized field queries.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/03_Working_with_PHP_API.md#2025-04-17_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse \\Pimcore\\Model\\DataObject;\n\n// get a list of cities in Austria by localized field using default locale\n$list = DataObject\\City::getByLocalizedfields(\"country\", \"Österreich\");\n// or\n$list = DataObject\\City::getByCountry(\"Österreich\");\n \n// get a city by localized name using default locale\n$city = DataObject\\City::getByLocalizedfields(\"city\", \"Wels\", null, 1);\n// or\n$city = DataObject\\City::getByLocalizedfields(\"city\", \"Wels\", null, ['limit' => 1]);\n// or\n$city = DataObject\\City::getByCity(\"Wels\", null, 1);\n \n// get the first 10 cities in Austria by localized field using default locale\n$list = DataObject\\City::getByLocalizedfields(\"country\", \"Österreich\", null, 10);\n// or\n$list = DataObject\\City::getByCountry(\"Österreich\", null, 10);\n  \n// get the first 10 cities in Austria by localized field \"de\" locale\n$list = DataObject\\City::getByLocalizedfields(\"country\", \"Österreich\", \"de\", 10);\n// or\n$list = DataObject\\City::getByCountry(\"Österreich\", \"de\", 10);\n \n//get a country by localized name in english\n$country = DataObject\\Country::getByLocalizedfields(\"name\", \"Austria\", \"en\", 1);\n// or\n$country = DataObject\\Country::getByName(\"Austria\", \"en\", 1);\n```\n\n----------------------------------------\n\nTITLE: Advanced Many-To-One Object Relations with Metadata\nDESCRIPTION: Shows how to access and manage Advanced Many-To-One Object relations with metadata\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/01_Object_Classes/01_Data_Types/70_Relation_Types.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Pimcore\\Model\\DataObject;\n\n$object = DataObject::getById(73585);\n\n//getting list of assigned objects with metadata (array of DataObject\\Data\\ObjectMetadata)\n$objects = $object->getMetadata();\n\n//get first object of list\n$relation = $objects[0];\n\n//get relation object\n$relationObject = $relation->getObject();\n\n//access meta data via getters (getter = key of metadata column)\n$metaText = $relation->getText();\n$metaNumber = $relation->getNumber();\n$metaSelect = $relation->getSelect();\n$metaBool = $relation->getBool();\n\n//setting data via setter\n$relation->setText(\"MetaText2\");\n$relation->setNumber(5512);\n$object->save();\n```\n\n----------------------------------------\n\nTITLE: Filtering Pimcore Assets Based on Tags in PHP\nDESCRIPTION: This PHP function demonstrates how to filter a Pimcore Asset listing based on selected tags. It includes options for considering child tags and constructs SQL conditions for efficient filtering.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/26_Best_Practice/85_Using_Tags_for_Filtering.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n    public function filterForTags(Asset\\Listing $listing, Request $request): Asset\\Listing\n    {\n        // get tags IDs to filter for - e.g. from request param\n        $values = $request->query->all('tags-filter') ?: explode(',', $request->query->getString('tags-filter'));\n\n        if($values)\n        {\n            $conditionParts = [];\n            foreach ($values as $tagId) {\n\n                //decide if child tags should be considered or not\n                if ($request->query->getBool(\"considerChildTags\")) {\n                    $tag = \\Pimcore\\Model\\Element\\Tag::getById((int)$tagId);\n                    if ($tag) {\n                        //get ID path of tag or filtering the child tags\n                        $tagPath = $tag->getFullIdPath();\n                        \n                        $conditionParts[] = \"id IN (\n                            SELECT cId FROM tags_assignment INNER JOIN tags ON tags.id = tags_assignment.tagid \n                            WHERE \n                                ctype = 'asset' AND \n                                (id = \" . (int) $tagId . \" OR idPath LIKE \" . $listing->quote(Db::get()->escapeLike($tagPath) . \"%\") . \")\n                        )\";\n                    }\n                } else {\n                    $conditionParts[] = \"id IN (\n                        SELECT cId FROM tags_assignment WHERE ctype = 'asset' AND tagid = \" . (int) $tagId . \n                    \")\";\n                }\n            }\n\n\n            if (count($conditionParts) > 0) {\n                $condition = implode(\" AND \", $conditionParts);\n                $listing->addConditionParam($condition);\n            }\n        }\n        return $listing; \n    }\n```\n\n----------------------------------------\n\nTITLE: Managing Memory in Pimcore Large-Scale Operations using PHP\nDESCRIPTION: This snippet demonstrates how to manage memory issues when working with a large number of objects in Pimcore, including garbage collection and runtime cache management.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/05_External_System_Interaction.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// just call this static method\n\\Pimcore::collectGarbage();\n\n// Or use RuntimeCache::disable() before iterate many objects to avoid excesive memory usage.\n\n\\Pimcore::collectGarbage([\"myImportantKey\", \"myConfig\"]);\n\n// You can also add items to the static list of globally protected keys by passing them to\n$longRunningHelper = \\Pimcore::getContainer()->get(\\Pimcore\\Helper\\LongRunningHelper::class);\n$longRunningHelper->addPimcoreRuntimeCacheProtectedItems([\"myVeryImportantKey\", \"mySuperImportKey\", \"...\"]);\n\n// This list is maintained as long as the process exists. You can remove protected keys again by calling\n$longRunningHelper->removePimcoreRuntimeCacheProtectedItems([\"myVeryImportantKey\", \"mySuperImportKey\", \"...\"]);\n```\n\n----------------------------------------\n\nTITLE: Implementing UserInterface in Pimcore Object User Class\nDESCRIPTION: Custom User class that extends Pimcore's base User class and implements Symfony's UserInterface. Includes password credential management through the eraseCredentials method.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/19_Development_Tools_and_Details/10_Security_Authentication/01_Authenticate_Pimcore_Objects.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// src/Model/DataObject/User.php\n\nnamespace App\\Model\\DataObject;\n\nuse Pimcore\\Model\\DataObject\\ClassDefinition\\Data\\Password;\nuse Pimcore\\Model\\DataObject\\User as BaseUser;\nuse Symfony\\Component\\Security\\Core\\User\\UserInterface;\n\n/**\n * Our custom user class implementing Symfony's UserInterface.\n */\nclass User extends BaseUser implements UserInterface\n{\n    /**\n     * Trigger the hash calculation to remove the plain text password from the instance. \n     * \n     * This is necessary to make sure no plain text passwords are serialized.\n     */\n    public function eraseCredentials(): void\n    {\n        /** @var Password $field */\n        $field = $this->getClass()->getFieldDefinition('password');\n        $field->getDataForResource($this->getPassword(), $this);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Event Listener to Disable Full Page Cache in PHP\nDESCRIPTION: This PHP class defines an event listener that can disable the Full Page Cache based on custom conditions. It listens for the FullPageCacheEvents::CACHE_RESPONSE event and sets caching to false when conditions are met.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/19_Development_Tools_and_Details/09_Cache/03_Full_Page_Cache.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Symfony\\Component\\EventDispatcher\\Attribute\\AsEventListener;\n\nclass DetermineFullPageCacheEventListener\n{\n    #[AsEventListener(\\Pimcore\\Event\\FullPageCacheEvents::CACHE_RESPONSE)]\n    public function determineFullPageCache(\\Pimcore\\Event\\Cache\\FullPage\\CacheResponseEvent $event): void\n    {\n        $response = $event->getResponse();\n        if (true) { // Replace with your custom condition\n            $event->setCache(false);\n        }    \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Notification to User Group\nDESCRIPTION: Example of sending a notification to all users in a specific group using the NotificationService. Demonstrates group notification with optional linked asset.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/18_Tools_and_Features/41_Notifications.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Pimcore\\Model\\Notification\\Service\\NotificationService;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\npublic function defaultAction(\n    Request $request,\n    NotificationService $notificationService\n): Response {\n    $element = Asset::getById(1); // Optional\n    \n    $notificationService->sendToGroup(\n        4, // Group recipient\n        2, // User sender 0 - system\n        'Example notification',\n        'Example message', \n        $element // Optional linked element\n    );\n    \n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Listener for Pimcore Element Pre-Update Events\nDESCRIPTION: PHP class implementing an event listener for pre-update events on Pimcore assets, documents, and data objects. It demonstrates how to handle different element types and modify them before updates are persisted.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/20_Extending_Pimcore/11_Event_API_and_Event_Manager.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\EventListener;\n  \nuse Pimcore\\Event\\Model\\ElementEventInterface;\nuse Pimcore\\Event\\Model\\DataObjectEvent;\nuse Pimcore\\Event\\Model\\AssetEvent;\nuse Pimcore\\Event\\Model\\DocumentEvent;\n\nclass TestListener\n{\n    public function onPreUpdate(ElementEventInterface $e): void\n    {\n        if ($e instanceof AssetEvent) {\n            // do something with the asset\n            $foo = $e->getAsset(); \n        } else if ($e instanceof DocumentEvent) {\n            // do something with the document\n            $foo = $e->getDocument(); \n        } else if ($e instanceof DataObjectEvent) {\n            // do something with the object\n            $foo = $e->getObject(); \n            $foo->setMyValue(microtime(true));\n            // we don't have to call save here as we are in the pre-update event anyway ;-) \n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Objects by Field Collections in Pimcore\nDESCRIPTION: Shows how to filter objects using field collection attributes with different syntax options. Demonstrates condition building for field collection queries.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/03_Working_with_PHP_API.md#2025-04-17_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$list = new DataObject\\Collectiontest\\Listing();\n$list->addFieldCollection(\"MyCollection\", \"collection\");\n$list->addFieldCollection(\"MyCollection\");\n$list->setCondition(\"`MyCollection~collection`.myinput = 'hugo' AND `MyCollection`.myinput = 'testinput'\");\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$list = \\Pimcore\\Model\\DataObject\\Collectiontest::getList([\n   \"fieldCollections\" => [\n      [\"type\" => \"MyCollection\", \"fieldname\" => \"collection\"],\n      [\"type\" => \"MyCollection\"]\n   ],\n   \"condition\" => \"`MyCollection~collection`.myinput = 'hugo' AND `MyCollection`.myinput = 'testinput'\"\n]);\n```\n\n----------------------------------------\n\nTITLE: Manipulating Website Settings in Controller\nDESCRIPTION: Example of modifying website settings programmatically in a PHP controller, including retrieving, modifying, and saving setting values.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/18_Tools_and_Features/27_Website_Settings.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Symfony\\Component\\HttpFoundation\\Response;\n\nclass TestController\n{\n    public function testAction(): Response\n    {\n        // get the \"somenumber\" setting for \"de\"\n        // if the property does not exist you will get the setting with not language provided\n        $somesetting = \\Pimcore\\Model\\WebsiteSetting::getByName('somenumber', null, 'de');\n        $currentnumber = $somesetting->getData();\n        //Now do something with the data or set new data\n        //Count up in this case\n        $newnumber = $currentnumber + 1;\n        $somesetting->setData($newnumber);\n        $somesetting->save();\n        \n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Including Documents with pimcore_inc\nDESCRIPTION: The pimcore_inc function allows including other documents like snippets within a template. This example shows including a document by path.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/02_MVC/02_Template/02_Template_Extensions/README.md#2025-04-17_snippet_6\n\nLANGUAGE: twig\nCODE:\n```\n{{ pimcore_inc(\"/shared/boxes/buttons\") }}\n```\n\n----------------------------------------\n\nTITLE: Advanced PHP Thumbnail Manipulation\nDESCRIPTION: Advanced examples of thumbnail manipulation in PHP, including custom attributes, callbacks, and format conversion.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/04_Assets/03_Working_with_Thumbnails/01_Image_Thumbnails.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$thumbnail = $asset->getThumbnail(\"myThumbnail\");\n\n// get the final dimensions of the thumbnail\n$width = $thumbnail->getWidth();\n$height = $thumbnail->getHeight();\n\n// get the html \"<picture>\" tag with custom class\necho $thumbnail->getHtml(['imgAttributes' => [\"class\" => \"custom-class\"]]);\n\n// get the path to the thumbnail\n$path = $thumbnail->getPath();\n\n// get path and disable deferred thumbnails\n$path = $thumbnail->getPath([\"deferredAllowed\" => false]);\n\n// getting the full url to a thumbnail\n$path = $thumbnail->getFrontendPath();\n\n// examples for callbacks\n$thumbnail->getHtml([\n    'useDataSrc' => true,\n    'pictureAttributes' => [\n        'data-bar' => uniqid(),\n    ],\n    'imgAttributes' => [\n        'data-foo' => uniqid(),\n    ],\n    'imgCallback' => function ($attributes) {\n        $attributes['data-foo'] = 'new value';\n        return $attributes;\n    },\n    'sourceCallback' => function ($attributes) {\n        $attributes['data-custom-source-attr'] = uniqid();\n        return $attributes;\n    },\n    'pictureCallback' => function ($attributes) {\n        $attributes['data-custom-picture-attr'] = uniqid();\n        return $attributes;\n    },\n    'disableImgTag' => true,\n    'lowQualityPlaceholder' => true,\n]);\n```\n\n----------------------------------------\n\nTITLE: Extending Navigation with Custom Items in PHP\nDESCRIPTION: This PHP class extends Pimcore's navigation functionality to add custom news and category items to the navigation. It uses link generators and callbacks to dynamically populate the navigation structure.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/03_Documents/03_Navigation.md#2025-04-17_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Twig\\Extension;\n\nuse App\\Website\\LinkGenerator\\NewsLinkGenerator;\nuse App\\Website\\LinkGenerator\\CategoryLinkGenerator; \nuse Pimcore\\Model\\Document;\nuse Pimcore\\Navigation\\Container;\nuse Pimcore\\Twig\\Extension\\Templating\\Navigation;\nuse Twig\\Extension\\AbstractExtension;\nuse Twig\\TwigFunction;\n\nclass NavigationExtension extends AbstractExtension\n{\n    protected Navigation $navigationHelper;\n    protected NewsLinkGenerator $newsLinkGenerator;\n    protected CategoryLinkGenerator $categoryLinkGenerator;\n\n    public function __construct(Navigation $navigationHelper, NewsLinkGenerator $newsLinkGenerator, CategoryLinkGenerator $categoryLinkGenerator)\n    {\n        $this->navigationHelper = $navigationHelper;\n        $this->newsLinkGenerator = $newsLinkGenerator;\n        $this->categoryLinkGenerator = $categoryLinkGenerator;\n    }\n\n    /**\n     * @return TwigFunction[]\n     */\n    public function getFunctions(): array\n    {\n        return [\n            new TwigFunction('app_navigation_links', [$this, 'getNavigationLinks'])\n        ];\n    }\n\n    /**\n     * @throws \\Exception\n     */\n    public function getNavigationLinks(Document $document, Document $startNode): Container\n    {\n        $navigation = $this->navigationHelper->build([\n            'active' => $document,\n            'root' => $startNode,\n            'pageCallback' => function($page, $document) {\n                /** @var \\Pimcore\\Model\\Document $document */\n                /** @var \\Pimcore\\Navigation\\Page\\Document $page */\n                if($document->getProperty(\"templateType\") == \"news\") {\n                    $list = new \\Pimcore\\Model\\DataObject\\News\\Listing;\n                    $list->load();\n                    foreach($list as $news) {\n                        $detailLink = $this->newsLinkGenerator->generate($news, ['document' => $document]);\n                        $uri = new \\Pimcore\\Navigation\\Page\\Document([\n                            \"label\" => $news->getTitle(),\n                            \"id\" => \"object-\" . $news->getId(),\n                            \"uri\" => $detailLink,\n                        ]);\n                        $page->addPage($uri);\n                    }\n                }\n            },\n            'rootCallback' => function(Container $navigation) {\n                $list = new \\Pimcore\\Model\\DataObject\\Category\\Listing;\n                $list->load();\n                foreach($list as $category) {\n                    $detailLink = $this->categoryLinkGenerator->generate($category);\n                    $categoryDocument = new \\Pimcore\\Navigation\\Page\\Document([\n                        \"label\" => $category->getName(),\n                        \"id\" => \"object-\" . $category->getId(),\n                        \"uri\" => $detailLink,\n                    ]);\n                    $navigation->addPage($categoryDocument);\n                }\n            }\n        ]);\n\n        return $navigation;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Preparing Tag Data for Template in PHP\nDESCRIPTION: This snippet demonstrates how to prepare tag data for a template in a Pimcore controller. It retrieves a list of tags based on a parent node or root tags, and converts them to an array format suitable for frontend use.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/26_Best_Practice/85_Using_Tags_for_Filtering.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php \n\n//prepare data for template in your controller \n$tagList = new \\Pimcore\\Model\\Element\\Tag\\Listing();\n\n//select parent node for tags or use all root tags.\nif ($this->getParam(\"node\")) {\n    $tagList->setCondition(\"parentId = ?\", $request->query->getInt(\"node\"));\n} else {\n    $tagList->setCondition(\"ISNULL(parentId) OR parentId = 0\");\n}\n$tagList->setOrderKey(\"name\");\n$tags = [];\nforeach ($tagList->load() as $tag) {\n    $tags[] = $this->convertTagToArray($tag, $request->query->get('tags-filter'));\n}\n```\n\n----------------------------------------\n\nTITLE: Lazy Loading Configuration in Twig\nDESCRIPTION: Example of configuring lazy loading behavior for thumbnails using Twig.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/04_Assets/03_Working_with_Thumbnails/01_Image_Thumbnails.md#2025-04-17_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n{{ image.thumbnail('example').html({\n    'imgAttributes': {\n        'loading': 'eager',\n    }\n})|raw }}\n```\n\n----------------------------------------\n\nTITLE: Using Settings Store with Scope\nDESCRIPTION: Demonstrates the recommended usage pattern of Settings Store with a scope parameter. Shows how to store, retrieve, list, and delete settings while using a scope identifier for better organization.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/19_Development_Tools_and_Details/42_Settings_Store.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// store or update setting (id, data, type, scope)\nSettingsStore::set('my-setting-id', 'this is some setting value', SettingsStore::TYPE_STRING, 'bundle-settings-1');\n\n// load setting by id (id, scope)\n$setting = SettingsStore::get('my-setting-id', 'bundle-settings-1');\n\n// load all settings ids for specific scope\n$ids = SettingsStore::getIdsByScope('bundle-settings-1');\n\n// delete setting (id, scope)\nSettingsStore::delete('my-setting-id', 'bundle-settings-1');\n```\n\n----------------------------------------\n\nTITLE: Rendering Breadcrumbs Navigation in Twig\nDESCRIPTION: Example of how to render a breadcrumbs navigation path using the breadcrumbs renderer, with a custom home link prefix.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/03_Documents/03_Navigation.md#2025-04-17_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n<div class=\"my-breadcrumbs\">\n    <a href=\"/\">{{ 'Home'|trans }}</a> >\n    {{ pimcore_render_nav(mainNavigation, 'breadcrumbs') }}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Document Tree with WHERE Clause Filtering in YAML\nDESCRIPTION: Configures a custom document tree view for Magazine section, filtering documents based on type and key conditions. Includes comprehensive context menu settings.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/01_Object_Classes/05_Class_Settings/20_Custom_Views.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\npimcore:\n    custom_views:\n        definitions:\n            c3da6659-c8b3-f3ed-2eda-70b2d3756730:\n                name: Magazine\n                treetype: document\n                position: right\n                rootfolder: /en/Magazine\n                showroot: true\n                sort: -12\n                treeContextMenu:\n                    document:\n                        items:\n                            add: true\n                            addSnippet: true\n                            addLink: true\n                            addEmail: true\n                            addHardlink: true\n                            addFolder: true\n                            paste: true\n                            pasteCut: true\n                            copy: true\n                            cut: true\n                            rename: true\n                            unpublish: true\n                            publish: true\n                            delete: true\n                            open: true\n                            convert: true\n                            searchAndMove: true\n                            useAsSite: true\n                            editSite: true\n                            removeSite: true\n                            lock: true\n                            unlock: true\n                            lockAndPropagate: true\n                            unlockAndPropagate: true\n                            reload: true\n                icon: /bundles/pimcoreadmin/img/flat-color-icons/reading.svg\n                where: \"(type = 'folder' OR (type = 'page' and `key` NOT LIKE '%%g%%' OR type = 'link'))\"\n```\n\n----------------------------------------\n\nTITLE: Checking User Permissions in Pimcore Frontend\nDESCRIPTION: This snippet demonstrates how to use the Frontend Permission Toolkit Service to check if a user is allowed to perform a certain action. It retrieves the user object from Symfony security and uses the permission service to check for a specific resource.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/26_Best_Practice/15_Build_Role_Rights_System_for_Frontends.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n//get user object from Symfony\n$userObject = $this->get('security.token_storage')->getToken()->getUser();\n\n//get permission service from container\n$permissionService = \\Pimcore::getContainer()->get(\"bundle.frontendpermissiontoolkit.service\");\n\nif($permissionService->isAllowed($userObject, \"order\")) {\n    //do some stuff, show some stuff, whatever ...\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing JobStep in Handler using PHP\nDESCRIPTION: Shows how to access the JobStep object within a handler. This can be useful for retrieving step configurations in the handler.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/19_Development_Tools_and_Details/08_Generic_Execution_Engine/01_Jobs_and_Jobruns/02_JobRun.md#2025-04-17_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n$jobRun = $this->getJobRun($message);\n$steps = $jobRun->getJob()?->getSteps();\nif($steps !== null) {\n    $step = $steps[$jobRun->getCurrentStep()] ?? null;\n    if($step) {\n        return $step->getSelectionMode();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Object Reference for Localized Fields in Field Collections\nDESCRIPTION: This code snippet shows how to set the object reference when using localized fields inside field collections. This step is necessary before calling any localized field-related methods.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/01_Object_Classes/01_Data_Types/35_Fieldcollections.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$item = new DataObject\\Fieldcollection\\Data\\MyCollection();\n$item->setObject($object);\n```\n\n----------------------------------------\n\nTITLE: Setting Meta Tags with Twig HeadMeta Extension\nDESCRIPTION: Demonstrates how to set various meta tags including SEO description, Open Graph tags, and content type specifications using the Pimcore HeadMeta extension in Twig.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/02_MVC/02_Template/02_Template_Extensions/02_HeadMeta.md#2025-04-17_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{# setting meta description #}\n{% do pimcore_head_meta().appendName('description', 'My SEO description for my awesome page') %}\n\n{# setting open graph tags #}\n{% do pimcore_head_meta().setProperty('og:title', 'my article title') %}\n{% do pimcore_head_meta().setProperty('og:type', 'article') %}\n\n{# setting content type and character set #}\n{% do pimcore_head_meta().appendHttpEquiv('Content-Type', 'text/html; charset=UTF-8').appendHttpEquiv('Content-Language', 'en-US') %}\n```\n\n----------------------------------------\n\nTITLE: Advanced PDF Rendering with PimcoreWebToPrintBundle in PHP\nDESCRIPTION: This snippet shows a more advanced implementation of PDF rendering using PimcoreWebToPrintBundle. It includes custom parameters and adapter-specific configurations for different PDF processors like PdfReactor, Gotenberg, and Chromium.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/18_Tools_and_Features/30_Rendering_PDFs.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\nclass BlogController extends FrontendController\n{\n    public function indexAction(Request $request): Response\n    {\n        //your custom code....\n\n        //return the pdf\n        $params = [\n              'document' => $this->document,\n              'editmode' => $this->editmode,\n          ];\n        $params['testPlaceholder'] = ' :-)';\n        $html = $this->renderView(':Blog:index.html.php', $params);\n\n        $adapter = \\Pimcore\\Bundle\\WebToPrintBundle\\Processor::getInstance();\n        //add custom settings if necessary\n        if ($adapter instanceof \\Pimcore\\Bundle\\WebToPrintBundle\\Processor\\PdfReactor) {\n            //Config settings -> http://www.pdfreactor.com/product/doc/webservice/php.html#Configuration\n            $params['adapterConfig'] = [\n                'author' => 'Max Mustermann',\n                'title' => 'Custom Title',\n                'javaScriptMode' => 0,\n                'addLinks' => true,\n                'appendLog' => true,\n                'enableDebugMode' => true\n            ];\n        } elseif ($adapter instanceof \\Pimcore\\Bundle\\WebToPrintBundle\\Processor\\Gotenberg) {\n            $params = Config::getWeb2PrintConfig();\n            $params = json_decode($params['gotenbergSettings'], true) ?: [];\n        } elseif ($adapter instanceof \\Pimcore\\Bundle\\WebToPrintBundle\\Processor\\Chromium) {\n            $params = Config::getWeb2PrintConfig();\n            $params = json_decode($params['chromiumSettings'], true) ?: [];\n        }\n\n        return new Response(\n            $adapter->getPdfFromString($html, $params),\n            200,\n            array(\n                'Content-Type' => 'application/pdf',\n                // 'Content-Disposition'   => 'attachment; filename=\"custom-pdf.pdf\"' //direct download\n            )\n        );\n    }\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Asset Document Processing in Pimcore\nDESCRIPTION: YAML configuration for controlling asset document processing features in Pimcore. Settings include options to disable thumbnail generation, page count processing, text extraction, PDF scanning, and PDF display behavior.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/04_Assets/README.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\npimcore:\n    assets:\n        document:\n            thumbnails:\n                enabled: false #disable generating thumbnail for asset documents\n            process_page_count: false #disable processing page count\n            process_text: false #disable processing text extraction\n            scan_pdf: false #disable scanning PDF documents for unsafe JavaScript.\n            open_pdf_in_new_tab: all-pdfs #show only thumbnail for every pdf \n            #open_pdf_in_new_tab: only-unsafe #show only thumbnail for pdf with JavaScript\n            #open_pdf_in_new_tab: none #show every pdf (not recommended)\n```\n\n----------------------------------------\n\nTITLE: Implementing Vote Listing DAO in Pimcore\nDESCRIPTION: A complete implementation of a Data Access Object (DAO) for the Vote model listing, extending Pimcore's AbstractDao class. It includes methods for retrieving records from the database, handling pagination, and calculating total counts. The class uses Doctrine's QueryBuilder for constructing SQL queries.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/20_Extending_Pimcore/17_Custom_Persistent_Models.md#2025-04-17_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Model\\Vote\\Listing;\n\nuse Pimcore\\Model\\Listing;\nuse App\\Model;\nuse Doctrine\\DBAL\\Query\\QueryBuilder as DoctrineQueryBuilder;\nuse Pimcore\\Model\\Listing\\Dao\\QueryBuilderHelperTrait;\n\nclass Dao extends Listing\\Dao\\AbstractDao\n{\n    use QueryBuilderHelperTrait;\n\n    protected string $tableName = 'votes';\n\n    /**\n     * Get tableName, either for localized or non-localized data.\n     *\n     * @throws \\Exception\n     */\n    protected function getTableName(): string\n    {\n        return $this->tableName;\n    }\n\n    public function getQueryBuilder(): DoctrineQueryBuilder\n    {\n        $queryBuilder = $this->db->createQueryBuilder();\n        $field = $this->getTableName().'.id';\n        $queryBuilder->select(sprintf('SQL_CALC_FOUND_ROWS %s as id', $field));\n        $queryBuilder->from($this->getTableName());\n\n        $this->applyListingParametersToQueryBuilder($queryBuilder);\n\n        return $queryBuilder;\n    }\n\n    /**\n     * Loads objects from the database.\n     *\n     * @return Model\\Vote[]\n     */\n    public function load(): array\n    {\n        // load id's\n        $list = $this->loadIdList();\n\n        $objects = [];\n        foreach ($list as $id) {\n            if ($object = Model\\Vote::getById($id)) {\n                $objects[] = $object;\n            }\n        }\n\n        $this->model->setData($objects);\n\n        return $objects;\n    }\n\n    /**\n     * Loads a list for the specicifies parameters, returns an array of ids.\n     *\n     * @return int[]\n     * @throws \\Exception\n     */\n    public function loadIdList(): array\n    {\n        $query = $this->getQueryBuilder();\n        $objectIds = $this->db->fetchFirstColumn($query->getSQL(), $query->getParameters(), $query->getParameterTypes());\n        $this->totalCount = (int) $this->db->fetchOne('SELECT FOUND_ROWS()');\n\n        return array_map('intval', $objectIds);\n    }\n\n    /**\n     * Get Count.\n     *\n     * @throws \\Exception\n     */\n    public function getCount(): int\n    {\n        if ($this->model->isLoaded()) {\n            return count($this->model->getData());\n        } else {\n            $idList = $this->loadIdList();\n\n            return count($idList);\n        }\n    }\n\n    /**\n     * Get Total Count.\n     *\n     * @throws \\Exception\n     */\n    public function getTotalCount(): int\n    {\n        $queryBuilder = $this->getQueryBuilder();\n        $this->prepareQueryBuilderForTotalCount($queryBuilder, $this->getTableName() . '.id');\n        \n        if ($this->isQueryBuilderPartInUse($queryBuilder, 'groupBy') || $this->isQueryBuilderPartInUse($queryBuilder, 'having')) {\n            return (int)$this->db->fetchOne('SELECT COUNT(*)  FROM (' . $queryBuilder->getSQL() . ') as XYZ');\n        } else {\n            return (int)$this->db->fetchOne($queryBuilder->getSql(), $queryBuilder->getParameters(), $queryBuilder->getParameterTypes());\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Page Document in Pimcore PHP\nDESCRIPTION: This snippet demonstrates how to create a new page document using Pimcore's PHP API. It sets the key, parent ID, and saves the document with an optional version note.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/03_Documents/09_Working_with_PHP_API.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n//CREATE A PAGE DOCUMENT\n$page = new \\Pimcore\\Model\\Document\\Page();\n$page->setKey('document8');\n$page->setParentId(82); // id of a document or folder\n\n// the optional parameter allows you to provide additional info\n// currently supported:\n//      * versionNote: note added to the version (see version tab)\n$page->save([\"versionNote\" => \"my new version\"]);\n```\n\n----------------------------------------\n\nTITLE: Adding Submenus to Existing Navigation\nDESCRIPTION: JavaScript implementation for adding submenus to existing navigation items in Pimcore UI\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/20_Extending_Pimcore/13_Bundle_Developers_Guide/06_Event_Listener_UI.md#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\npimcore.registerNS(\"pimcore.bundle.glossary.startup\");\n\npimcore.bundle.glossary.startup = Class.create({\n    initialize: function () {\n        document.addEventListener(pimcore.events.preMenuBuild, this.preMenuBuild.bind(this));\n    },\n\n    preMenuBuild: function (e) {\n        let menu = e.detail.menu;\n        const user = pimcore.globalmanager.get('user');\n        const perspectiveCfg = pimcore.globalmanager.get(\"perspective\");\n\n        if (menu.extras && user.isAllowed(\"glossary\") && perspectiveCfg.inToolbar(\"extras.glossary\")) {\n            menu.extras.items.push({\n                text: t(\"glossary\"),\n                iconCls: \"pimcore_nav_icon_glossary\",\n                priority: 5,\n                itemId: 'pimcore_menu_extras_glossary',\n                handler: this.editGlossary,\n            });\n        }\n    },\n\n    editGlossary: function() {\n        try {\n            pimcore.globalmanager.get(\"bundle_glossary\").activate();\n        } catch (e) {\n            pimcore.globalmanager.add(\"bundle_glossary\", new pimcore.bundle.glossary.settings());\n        }\n    }\n});\n\nconst pimcoreBundleGlossary = new pimcore.bundle.glossary.startup();\n```\n\n----------------------------------------\n\nTITLE: Configuring Object Tree with Condition Filter in YAML\nDESCRIPTION: Creates a custom object tree view for Events, filtered to show only events with Salzburg tag. Includes tree context menu configuration and custom joins for filtering.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/01_Object_Classes/05_Class_Settings/20_Custom_Views.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\npimcore:\n    custom_views:\n        definitions:\n            87705013-edb9-c9ec-0f5e-c3ee45ca4459:\n                name: Events\n                treetype: object\n                position: right\n                rootfolder: /Events\n                showroot: false\n                sort: 0\n                treeContextMenu:\n                    object:\n                        items:\n                            add: true\n                            addFolder: true\n                            importCsv: true\n                            cut: true\n                            copy: true\n                            paste: true\n                            delete: true\n                            rename: true\n                            reload: true\n                            publish: true\n                            unpublish: true\n                            searchAndMove: true\n                            lock: true\n                            unlock: true\n                            lockAndPropagate: true\n                            unlockAndPropagate: true\n                            changeChildrenSortBy: true\n                classes: ''\n                joins: [\n                    {\n                        type: left,\n                        name: { ev: object_query_EV },\n                        condition: 'objects.id = ev.oo_id',\n                        columns: { ev: tags }\n                    }\n                ]\n                id: 87705013-edb9-c9ec-0f5e-c3ee45ca4459\n                icon: /bundles/pimcoreadmin/img/flat-color-icons/vip.svg\n                where: ''\n                having: 'ev.tags LIKE \"%%Salzburg%%\"'\n```\n\n----------------------------------------\n\nTITLE: Disabling Full Page Cache via Response Headers in PHP\nDESCRIPTION: This PHP code snippet shows how to disable the Full Page Cache by adding a 'Cache-Control: no-store' header to the response. This method also disables middleware and browser caching.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/19_Development_Tools_and_Details/09_Cache/03_Full_Page_Cache.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$response->headers->addCacheControlDirective('no-store');\n```\n\n----------------------------------------\n\nTITLE: Passing Editmode Parameter to Renderlet in Twig\nDESCRIPTION: This snippet shows how to pass the editmode parameter to the Renderlet in a Twig template, allowing for editmode-aware functionality within the Renderlet.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/03_Documents/01_Editables/28_Renderlet.md#2025-04-17_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{{\n\tpimcore_renderlet(\"myRenderlet\", {\n\t\t....\n\t\t\"editmode\": editmode\n\t})\n}}\n```\n\n----------------------------------------\n\nTITLE: Generating URLs for Different Pimcore Sites\nDESCRIPTION: Example demonstrating how to generate URLs that point to different sites within a Pimcore installation using the site parameter in different formats.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/02_MVC/04_Routing_and_URLs/02_Custom_Routes.md#2025-04-17_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n{# using the Site object #}\n{{ path('news', {\n    id: 4,\n    text: \"some-text\",\n    site: pimcore_site(3)\n}) }}\n\n{# using the ID #}\n{{ path('news', {\n    id: 4,\n    text: \"some-text\",\n    site: 3\n}) }}\n\n{# using one of the hostname assiged to the site #}\n{{ path('news', {\n    id: 4,\n    text: \"some-text\",\n    site: \"subsite.example.com\"\n}) }}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom WYSIWYG Editor in JavaScript\nDESCRIPTION: JavaScript code snippet showing how to add a custom editor to the pimcore.wysiwyg.editors array. This is necessary for integrating different editors for various use cases in Pimcore.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/03_Documents/01_Editables/40_WYSIWYG.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nif(!parent.pimcore.wysiwyg) {\n    parent.pimcore.wysiwyg = {};\n    parent.pimcore.wysiwyg.editors = [];\n}\nparent.pimcore.wysiwyg.editors.push(\"Custom_Editor\");\n```\n\n----------------------------------------\n\nTITLE: Pimcore Bootstrap Script\nDESCRIPTION: PHP bootstrap file for initializing Pimcore environment before running tests.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/19_Development_Tools_and_Details/29_Testing/01_Application_Testing.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ninclude \"../../vendor/autoload.php\";\n\n\\Pimcore\\Bootstrap::setProjectRoot();\n\\Pimcore\\Bootstrap::bootstrap();\n```\n\n----------------------------------------\n\nTITLE: Basic Classification Store Operations in PHP\nDESCRIPTION: Demonstrates setting and getting values in Classification Store, including handling active groups and collection mappings. Shows usage with QuantityValue type and group management.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/01_Object_Classes/01_Data_Types/15_Classification_Store.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// setter, group id = 1, key id id = 2, language = de\n\n// the value is of type \"quantity value\" where 1 is the unit ID in this example\n$heightValue = new \\Pimcore\\Model\\DataObject\\Data\\QuantityValue(13, 1);\n$object->getClassificationStore2()->setLocalizedKeyValue(1, 2, $heightValue, \"de\");\n// 1 = group id\n$object->getClassificationStore2()->setActiveGroups([1 => true]);\n  \n// provide additional information about which collection the group belongs to\n// group 1 belongs to collection with ID 2\n$object->getClassificationStore2()->setGroupCollectionMapping(1, 2);\n  \n// retrieve the mapping \n// this will return 2 => collection with ID 2\n$object->getClassificationStore2()->getGroupCollectionMapping(1);\n  \n// getter, group id = 1, key id id = 2, language = de\n$value = $object->getClassificationStore2()->getLocalizedKeyValue(1, 2, \"de\");\n  \n// get the list of active groups\n$store = $object->getClassificationStore2();\n$groups = $store->getActiveGroups();\n  \n// get all values as associative array [groupId][keyid][language] => value\n$allValues = $store->getItems();\n```\n\n----------------------------------------\n\nTITLE: Populating an ImageGallery in PHP\nDESCRIPTION: Shows how to create and populate an ImageGallery object with a collection of Advanced Images (Hotspotimages) in PHP.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/01_Object_Classes/01_Data_Types/45_Image_Types.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$galleryData = [\n\tAssetImage,\n\tAssetImage,\n\t//....\n];\n\n$items = [];\nforeach($galleryData as $img){\n\n   $advancedImage = new \\Pimcore\\Model\\DataObject\\Data\\Hotspotimage();\n   $advancedImage->setImage($img);\n   $items[] = $advancedImage;\n}\n\n$news->setGallery(new \\Pimcore\\Model\\DataObject\\Data\\ImageGallery($items));\n\n?>\n```\n\n----------------------------------------\n\nTITLE: Adding an Asset as an Attachment with Pimcore\\Mail in PHP\nDESCRIPTION: Demonstrates how to add a Pimcore Asset as an attachment to an email using Pimcore\\Mail. It checks if the variable is an Asset instance before attaching.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/19_Development_Tools_and_Details/25_Email_Framework/01_Pimcore_Mail.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nif($asset instanceof Asset) {\n   $mail->attach($asset->getData(), $asset->getFilename(), $asset->getMimeType());\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Cropped Image Thumbnail in PHP\nDESCRIPTION: Demonstrates how to get the cropped image thumbnail from an Advanced Image (Hotspotimage) object using the getThumbnail() method in PHP.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/01_Object_Classes/01_Data_Types/45_Image_Types.md#2025-04-17_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$hotspotImage = $object->getHotspot1(); // name of the field in Pimcore is \"hotspot1\" in this case (class definition)\n \necho $hotspotImage->getThumbnail(); // this example returns the image cropped with the original dimensions\n \necho $hotspotImage->getThumbnail(\"myCustomThumbnail\"); // this example returns the cropped thumbnail according to the configuration (similar to document's $this->image())\n```\n\n----------------------------------------\n\nTITLE: Using DeviceDetector in a Pimcore Controller\nDESCRIPTION: Demonstrates how to use the DeviceDetector helper in a Pimcore controller to detect device types and perform conditional actions based on the detected device.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/19_Development_Tools_and_Details/21_Adaptive_Design_Helper.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Pimcore\\Tool\\DeviceDetector;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\nclass TestController extends Action\n{\n    public function testAction(): Response\n    {\n        $device = DeviceDetector::getInstance();\n        $device->getDevice(); // returns \"phone\", \"tablet\" or \"desktop\"\n \n        if($device->isDesktop() || $device->isTablet()) {\n            // do something\n        }\n        \n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Workflow Transitions with Additional Fields\nDESCRIPTION: YAML configuration showing how to define additional fields for workflow transitions, including custom select fields with options.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/07_Workflow_Management/09_Working_with_PHP_API.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntransitions:\n    close_product:\n        from: open\n        to: closed\n        options:\n            label: close product\n            notes:\n                commentEnabled: 1\n                commentRequired: 1\n                additionalFields:\n                    -\n                        name: mySelect\n                        title: please select a type\n                        fieldType: select\n                        fieldTypeSettings:\n                            options:\n                                -\n                                    key: Option A\n                                    value: a\n                                -\n                                    key: Option B\n                                    value: b\n                                -\n                                    key: Option C\n                                    value: c\n```\n\n----------------------------------------\n\nTITLE: Calculator Class Implementation in Pimcore\nDESCRIPTION: Implementation of a calculator class that implements CalculatorClassInterface to compute sum of two fields in different language contexts\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/01_Object_Classes/01_Data_Types/10_Calculated_Value_Type.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace App;\n\nuse Pimcore\\Logger;\nuse Pimcore\\Model\\DataObject\\Concrete;\nuse Pimcore\\Model\\DataObject\\ClassDefinition\\CalculatorClassInterface;\nuse Pimcore\\Model\\DataObject\\Data\\CalculatedValue;\n \nclass Calculator implements CalculatorClassInterface\n{\n    public function compute(Concrete $object, CalculatedValue $context): string\n    {\n        if ($context->getFieldname() == \"sum\") {\n            $language = $context->getPosition();\n            return $object->getXValue($language) + $object->getYValue($language);\n        } else {\n            Logger::error(\"unknown field\");\n            return '';\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding a PDF asset with Twig in Pimcore\nDESCRIPTION: Basic example of embedding a PDF document in a Pimcore page using the pimcore_pdf Twig function. The code creates a container with a specified width for the PDF document. Users can drag and drop documents from the Assets tree in the editmode.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/03_Documents/01_Editables/26_PDF.md#2025-04-17_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n<div class=\"pdf\">\n    {{ pimcore_pdf(\"myPdf\", {\"width\": 640}) }}        \n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Event Listeners in YAML for Pimcore Assets, Documents, and Objects\nDESCRIPTION: YAML configuration to register event listeners for pre-update events on Pimcore assets, documents, and data objects. This allows hooking into the update process for these element types.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/20_Extending_Pimcore/11_Event_API_and_Event_Manager.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n    App\\EventListener\\TestListener:\n        tags:\n            - { name: kernel.event_listener, event: pimcore.asset.preUpdate, method: onPreUpdate }\n            - { name: kernel.event_listener, event: pimcore.document.preUpdate, method: onPreUpdate }\n            - { name: kernel.event_listener, event: pimcore.dataobject.preUpdate, method: onPreUpdate }\n```\n\n----------------------------------------\n\nTITLE: Disabling Full Page Cache Listener in a Pimcore Controller\nDESCRIPTION: This PHP code snippet demonstrates how to disable the Full Page Cache listener entirely within a Pimcore controller action. It uses dependency injection to obtain the FullPageCacheListener service and disables it with a custom reason.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/19_Development_Tools_and_Details/09_Cache/03_Full_Page_Cache.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n    use Pimcore\\Bundle\\CoreBundle\\EventListener\\Frontend\\FullPageCacheListener;\n    \n    public function portalAction(Request $request, FullPageCacheListener $fullPageCacheListener)\n    {\n       $fullPageCacheListener->disable('Your disable reason');\n       return $this->redirect('de');\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Asset Tree with Property-based Filtering in YAML\nDESCRIPTION: Sets up a custom asset tree view for Panama Impressions, hiding assets with HIDE property set to true. Includes custom positioning and context menu configuration.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/01_Object_Classes/05_Class_Settings/20_Custom_Views.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\npimcore:\n    custom_views:\n        definitions:\n            186632eb-5ad3-6ac6-61f8-7a75e64f2204:\n                name: 'Panama Impressions'\n                treetype: asset\n                position: left\n                rootfolder: /examples/panama\n                showroot: false\n                sort: -4\n                treeContextMenu:\n                    asset:\n                        items:\n                            add:\n                                hidden: false\n                                items:\n                                    upload: true\n                                    uploadCompatibility: true\n                                    uploadZip: true\n                            addFolder: true\n                            rename: true\n                            copy: true\n                            cut: true\n                            paste: true\n                            pasteCut: true\n                            delete: true\n                            searchAndMove: true\n                            lock: true\n                            unlock: true\n                            lockAndPropagate: true\n                            unlockAndPropagate: true\n                            reload: true\n                joins: [\n                    {\n                        type: left,\n                        name: { meta: properties },\n                        condition: \"(meta.cid = assets.id AND meta.ctype = 'asset' AND name = 'HIDE')\",\n                        columns: { hide: data }\n                    }\n                ]\n                icon: /bundles/pimcoreadmin/img/flat-color-icons/camera_identification.svg\n                where: ''\n                having: 'type = \"folder\" OR hide is NULL or hide != 1'\n```\n\n----------------------------------------\n\nTITLE: Implementing Bundle Dependencies in Pimcore (PHP)\nDESCRIPTION: Shows how to implement the DependentBundleInterface to define bundle dependencies. This ensures that required bundles are loaded together with the main bundle.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/20_Extending_Pimcore/13_Bundle_Developers_Guide/04_Bundle_Collection.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace CustomBundle;\n\nuse Pimcore\\HttpKernel\\Bundle\\DependentBundleInterface;\nuse Pimcore\\HttpKernel\\BundleCollection\\BundleCollection;\nuse Symfony\\Component\\HttpKernel\\Bundle\\Bundle;\n\nclass CustomBundle extends Bundle implements DependentBundleInterface\n{\n    public static function registerDependentBundles(BundleCollection $collection): void\n    {\n        // register any bundles your bundle depends on here\n        $collection->addBundle(new FooBundle);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: PHP API Usage for Calculated Values\nDESCRIPTION: Example of retrieving calculated values using PHP API in different language contexts\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/01_Object_Classes/01_Data_Types/10_Calculated_Value_Type.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$object = DataObject::getByPath(\"/demoobject\");\n$valueDe =  $object->getSum(\"de\");   // => 38\n$valueEn =  $object->getSum(\"en\");   // => 11\n```\n\n----------------------------------------\n\nTITLE: Advanced Twig Thumbnail Configuration\nDESCRIPTION: Examples of advanced thumbnail configuration in Twig templates, including custom attributes and alt text handling.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/04_Assets/03_Working_with_Thumbnails/01_Image_Thumbnails.md#2025-04-17_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n/* adding custom html attributes */\n{{ image.thumbnail({\n    'width': 180,\n    'height': 180,\n    'cover': true,\n}).html({\n    'imgAttributes': {\n        'class': 'thumbnail-class',\n    },\n    'data-my-name': 'my value',\n    'attributes': {\n        'non-standard': 'HTML attributes',\n        'another': 'one'\n    }\n})|raw }}\n\n/* same with a thumbnail definition */\n{{ image.thumbnail('exampleScaleWidth').html({\n    'pictureAttributes': {\n        'class': 'thumbnail-class',\n    },\n    'data-my-name': 'my value',\n})|raw }}\n\n/* disable width & height attributes */\n{{ image.thumbnail('exampleScaleWidth').html({}, ['width', 'height'])|raw }}\n\n/* add alt text */\n{{ image.thumbnail('exampleScaleWidth').html({'alt': 'top priority alt text'})|raw }}\n```\n\n----------------------------------------\n\nTITLE: Creating Event Listener to Include Custom JS in Editmode\nDESCRIPTION: This PHP class defines an event listener that adds the custom JavaScript file to the editmode. It implements the addJSFiles method to include the custom editable's JS file.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/20_Extending_Pimcore/13_Bundle_Developers_Guide/09_Adding_Document_Editables.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// src/EventListener/PimcoreAdminListener.php\n\nnamespace App\\EventListener;\n\nuse Pimcore\\Event\\BundleManager\\PathsEvent;\n\nclass PimcoreAdminListener\n{\n    public function addJSFiles(PathsEvent $event): void\n    {\n        $event->addPaths([\n            '/bundles/app/js/pimcore/document/editables/markdown.js',\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring NGINX for Static Page Generation in Pimcore\nDESCRIPTION: NGINX configuration for handling static pages generated by Pimcore. This snippet includes two parts: a map block to be added before the server block, and a modification to the location block.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/19_Development_Tools_and_Details/20_Static_Page_Generator.md#2025-04-17_snippet_1\n\nLANGUAGE: nginx\nCODE:\n```\nmap $args $static_page_root {\n    default                                 /var/tmp/pages;\n    \"~*(^|&)pimcore_editmode=true(&|$)\"     /var/nonexistent;\n    \"~*(^|&)pimcore_preview=true(&|$)\"      /var/nonexistent;\n    \"~*(^|&)pimcore_version=[^&]+(&|$)\"     /var/nonexistent;\n}\n\nmap $uri $static_page_uri {\n    default                                 $uri;\n    \"/\"                                     /%home;\n}\n```\n\nLANGUAGE: nginx\nCODE:\n```\nserver {\n    ... \n    \n    location / {\n        error_page 404 /meta/404;\n        try_files $static_page_root$static_page_uri.html $uri /index.php$is_args$args;\n    }\n    \n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Product Variants Using Object Listing\nDESCRIPTION: Demonstrates how to retrieve product variants using Pimcore's listing functionality by explicitly setting the object type to variant.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/26_Best_Practice/02_Implementing_Product_Information_Management.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Pimcore\\Model\\DataObject\\Product;\nuse Pimcore\\Model\\DataObject\\AbstractObject;\n\n    $list = new Product\\Listing();\n    $list->setObjectTypes([AbstractObject::OBJECT_TYPE_VARIANT]);\n    $variants = $list->load();\n```\n\n----------------------------------------\n\nTITLE: Accessing Current Element in FOR_EACH Selection Mode (PHP)\nDESCRIPTION: Shows how to access the current element being processed in a step handler when using the FOR_EACH selection processing mode. This method is used within the AbstractAutomationActionHandler class.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/19_Development_Tools_and_Details/08_Generic_Execution_Engine/01_Jobs_and_Jobruns/04_Step_Configuration.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ngetSubjectFromMessage()\n```\n\n----------------------------------------\n\nTITLE: Rendering Custom Navigation in Twig\nDESCRIPTION: This Twig snippet demonstrates how to render the custom navigation created by the PHP extension. It uses the 'app_navigation_news_links' function to generate the navigation and 'pimcore_render_nav' to display it.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/03_Documents/03_Navigation.md#2025-04-17_snippet_13\n\nLANGUAGE: twig\nCODE:\n```\n{% set navigation = app_navigation_news_links(document, navStartNode) %}\n\n<div class=\"my-navigation\">\n    {{ pimcore_render_nav(navigation, 'menu', 'renderMenu', {\n        expandSiblingNodesOfActiveBranch: true,\n        ulClass: {\n            default: 'nav my-sidenav'\n        }\n    }) }}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing AdminAssetsSubscriber in PHP\nDESCRIPTION: This PHP class defines an event subscriber that listens for the CSS_PATHS event and adds a custom CSS file path to style the Pimcore backend UI.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/26_Best_Practice/71_Style_Backend_Depending_On_App-Env.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\EventSubscriber;\n\nclass AdminAssetsSubscriber implements \\Symfony\\Component\\EventDispatcher\\EventSubscriberInterface\n{\n    public static function getSubscribedEvents(): array\n    {\n        return [\n            \\Pimcore\\Bundle\\AdminBundle\\Event\\BundleManagerEvents::CSS_PATHS => 'onCssPaths',\n        ];\n    }\n\n    public function onCssPaths(\\Pimcore\\Event\\BundleManager\\PathsEvent $event): void\n    {\n        $event->addPaths(['/css/env.css']);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Redis Configuration Settings\nDESCRIPTION: Recommended Redis configuration settings for Pimcore cache including memory limits and policies.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/19_Development_Tools_and_Details/09_Cache/README.md#2025-04-17_snippet_1\n\nLANGUAGE: conf\nCODE:\n```\nmaxmemory 768mb\n                   \n# IMPORTANT! Other policies will cause random inconsistencies of your data!\nmaxmemory-policy volatile-lru   \nsave \"\"\n```\n\n----------------------------------------\n\nTITLE: Handling Document Paths in Sites\nDESCRIPTION: Methods to retrieve full document paths both including and relative to the site root, demonstrated in PHP and Twig.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/02_MVC/04_Routing_and_URLs/08_Working_with_Sites.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$document->getRealFullpath(); // returns the path including the site-root\n$document->getFullPath(); // returns the path relative to the site-root\n```\n\nLANGUAGE: twig\nCODE:\n```\ndocument.getRealFullpath()   {# returns the path including the site-root #}\ndocument->getFullPath()  {# returns the path relative to the site-root #}\n```\n\n----------------------------------------\n\nTITLE: Implementing productCell Action in PHP Controller\nDESCRIPTION: This PHP code defines a controller action that handles the product cell rendering. It retrieves a product by ID and renders a template with the product data.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/26_Best_Practice/40_Integrating_Commerce_Data_with_Content.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\npublic function productCellAction(Request $request): Response\n{\n    $id = $request->attribute->getInt('id');\n    $type = $request->attribute->get('type');\n\n    if ($type === 'object') {\n        $product = Product::getById($id);\n\n        return $this->render('product/product_cell.html.twig', ['product' => $product]);\n    }\n\n    throw new \\Exception('Invalid Type');\n}\n```\n\n----------------------------------------\n\nTITLE: Adding New Object Brick to Product in PHP\nDESCRIPTION: Illustrates the process of adding a new Object Brick to a product object using the PHP API. It creates a new product, adds a 'Tire' Object Brick, sets its attributes, and saves the product.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/01_Object_Classes/01_Data_Types/60_Object_Bricks.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n//adding a new Objectbrick to an object\n$product = new DataObject\\Product();\n$product->setKey(\"testproduct\");\n$product->setParent(DataObject\\Product::getById(4));\n\n$product->setName(\"testproduct\");\n\n$tireBrick = new DataObject\\Objectbrick\\Data\\Tire($product);\n$tireBrick->setTiretype(\"allyear\");\n$product->getBricks()->setTire($tireBrick);\n$product->save();\n```\n\n----------------------------------------\n\nTITLE: Using Manual Block Mode in Twig\nDESCRIPTION: Demonstrates the manual block mode implementation, which provides more control over HTML structure. This example creates a table with block elements as cells.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/03_Documents/01_Editables/06_Block.md#2025-04-17_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n{% pimcoremanualblock \"contentblock\" limit(6) %}\n    <table>\n     <tr>\n     {% blockiterate %}\n         <td customAttribute=\"{{ pimcore_input(\"myInput\").getData() }}\">\n            {% do _block.blockStart() %}\n                <div style=\"width:200px; height:200px;border:1px solid black;\">\n                    {{ pimcore_input(\"myInput\") }}\n                </div>\n            {% do _block.blockEnd() %}\n        </td>\n     {% endblockiterate %}\n     </tr>\n</table>\n{% endpimcoremanualblock %}\n```\n\n----------------------------------------\n\nTITLE: Implementing Textarea Editable in Twig Templates\nDESCRIPTION: This snippet demonstrates how to implement a textarea editable element in a Twig template. The example configures a product description with enabled line breaks, a height of 300 pixels, and a placeholder text. The resulting textarea allows multi-line content entry in the Pimcore admin interface.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/03_Documents/01_Editables/36_Textarea.md#2025-04-17_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n<p class=\"product-description\">\n    {{ pimcore_textarea(\"product_description\", {\n        \"nl2br\": true,\n        \"height\": 300,\n        \"placeholder\": \"Product Description\"\n    }) }}\n</p>\n```\n\n----------------------------------------\n\nTITLE: Setting Table Data Programmatically in PHP\nDESCRIPTION: Example of how to set table data programmatically using PHP by passing a multidimensional array to the setter method.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/01_Object_Classes/01_Data_Types/90_Table.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$object->setTable([\n    [\"one\", \"two\", \"three\"], \n    [\"four\", \"five\", \"six\"], \n    [\"seven\", \"eight\", \"nine\"]\n]);\n```\n\n----------------------------------------\n\nTITLE: Querying Object Variants Using getChildren\nDESCRIPTION: Demonstrates how to retrieve all variants of a specific object using the getChildren method with object type filtering.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/01_Object_Classes/05_Class_Settings/70_Variants.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$objectX->getChildren([DataObject::OBJECT_TYPE_VARIANT]);\n```\n\n----------------------------------------\n\nTITLE: Setting Localized Field Data in Pimcore PHP\nDESCRIPTION: This snippet shows how to set localized field data for a specific language in a Pimcore object.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/01_Object_Classes/01_Data_Types/50_Localized_Fields.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$object = DataObject::getById(234);\n$object->setInput1(\"My Name\", \"fr\"); // set the French value for the field \"input1\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Block Element Data in Twig\nDESCRIPTION: Shows how to access data from specific blocks within a document, including nested elements like images from gallery blocks.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/03_Documents/01_Editables/06_Block.md#2025-04-17_snippet_10\n\nLANGUAGE: twig\nCODE:\n```\n{# load document #}\n{% set document = pimcore_document_by_path('/en/More-Stuff/Developers-Corner/Galleries') %}\n\n{# get the first picture from the first \"gallery-carousel\" brick #}\n{% set image = document.getEditable('content').getElement('gallery-single-images')[5].getBlock('gallery').getElements()[0].getImage('image') %}\n\n{{ dump(document.getEditable('content').getElement('gallery-single-images')) }}\n{{ dump(image.getSrc()) }}\n```\n\n----------------------------------------\n\nTITLE: Customizing Pimcore Startup Process\nDESCRIPTION: Example of customizing Pimcore's startup process by setting trusted proxies configuration in startup.php.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/01_Getting_Started/04_Configuration.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n// /config/pimcore/startup.php\n\nuse \\Symfony\\Component\\HttpFoundation\\Request;\n\nRequest::setTrustedProxies(['192.0.0.1', '10.0.0.0/8'], Request::HEADER_X_FORWARDED_ALL);\n```\n\n----------------------------------------\n\nTITLE: Accessing Hotspots of an Advanced Image in PHP\nDESCRIPTION: Demonstrates how to programmatically access the hotspots defined on an Advanced Image (Hotspotimage) object in PHP.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/01_Object_Classes/01_Data_Types/45_Image_Types.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$hotspotImage = $object->getHotspot1(); // name of the field in Pimcore is \"hotspot1\" in this case (class definition)\n \n//get the assigned Asset\\Image\n$image = $hotspotImage->getImage();\n \n//get an array of all defined hotspots\n$hotspots = $hotspotImage->getHotspots();\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Markdown Editable Class in PHP\nDESCRIPTION: This snippet demonstrates how to create a custom Markdown editable class that extends Pimcore's base Editable class. The class should implement all required methods from the EditableInterface.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/20_Extending_Pimcore/13_Bundle_Developers_Guide/09_Adding_Document_Editables.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// src/Model/Document/Editable/Markdown.php\n\nnamespace App\\Model\\Document\\Editable;\n\nclass Markdown extends \\Pimcore\\Model\\Document\\Editable\n{\n    // methods as required by Pimcore\\Model\\Document\\Editable and Pimcore\\Model\\Document\\Editable\\EditableInterface\n}\n```\n\n----------------------------------------\n\nTITLE: Bootstrap 4 Custom Navigation Example in Twig\nDESCRIPTION: Complete example of a custom navigation implementation for Bootstrap 4, including dropdown menus for parent pages and manual ACL condition checking for each navigation item.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/03_Documents/03_Navigation.md#2025-04-17_snippet_11\n\nLANGUAGE: twig\nCODE:\n```\n{% set navStartNode = document.getProperty('navigation_root') %}\n{% if not navStartNode is instanceof('\\\\Pimcore\\\\Model\\\\Document\\\\Page')  %}\n    {% if pimcore_site_is_request() %}\n        {% set site = pimcore_site_current() %}\n        {% set navStartNode = site.getRootDocument() %}\n    {% else %}\n        {% set navStartNode = pimcore_document(1) %}\n    {% endif %}\n{% endif %}\n\n{% set mainNavigation = pimcore_build_nav({active: document, root: navStartNode}) %}\n\n{% set menuRenderer = pimcore_nav_renderer('menu') %}\n\n<nav class=\"navbar navbar-expand-lg navbar-light bg-light\">\n    <a class=\"navbar-brand\" href=\"#\">Navbar</a>\n    <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNavDropdown\" aria-controls=\"navbarNavDropdown\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n        <span class=\"navbar-toggler-icon\"></span>\n    </button>\n    <div class=\"collapse navbar-collapse\" id=\"navbarNavDropdown\">\n        <ul class=\"navbar-nav\">\n            {% for page in mainNavigation %}\n                {# here need to manually check for ACL conditions #}\n                {% if page.isVisible() and menuRenderer.accept(page)  %}\n                    {% set hasChildren = page.hasPages() %}\n                    {% if not hasChildren %}\n                        <li class=\"nav-item\">\n                            <a class=\"nav-link\" href=\"{{ page.getHref() }}\">{{ page.getLabel() }}</a>\n                        </li>\n                    {% else %}\n                        <li class=\"nav-item dropdown\">\n                            <a class=\"nav-link dropdown-toggle\" href=\"{{ page.getHref() }}\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">{{ page.getLabel() }}</a>\n                            <div class=\"dropdown-menu\" aria-labelledby=\"navbarDropdownMenuLink\">\n                                {% for child in page.getPages() %}\n                                    {% if child.isVisible() and menuRenderer.accept(child) %}\n                                            <a class=\"dropdown-item\" href=\"{{ child.getHref() }}\">{{ child.getLabel() }}</a>\n                                    {% endif %}\n                                {% endfor %}\n                            </div>\n                        </li>\n                    {% endif %}\n                {% endif %}\n            {% endfor %}\n        </ul>\n    </div>\n</nav>\n```\n\n----------------------------------------\n\nTITLE: Rendering Multi-Level Meta Navigation in Twig\nDESCRIPTION: Shows how to configure a multi-level navigation menu with depth-specific CSS classes. Includes two approaches: using an array of classes per depth level or using a default class for all levels.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/03_Documents/03_Navigation.md#2025-04-17_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n<div class=\"my-menu\">\n    {# you can use array for ulClass to provide depth level classes #}\n    {{ pimcore_render_nav(mainNavigation, 'menu', 'renderMenu', {\n        maxDepth: 2,\n        ulClass: {\n            0: 'nav navbar-nav',\n            1: 'nav navbar-nav-second',\n            2: 'nav navbar-nav-third'\n        }\n    }) }}\n\n    {# alternatively, you can use 'default' key to apply class on all depth levels #}\n    {{ pimcore_render_nav(mainNavigation, 'menu', 'renderMenu', {\n            maxDepth: 2,\n            ulClass: {\n                default: 'nav navbar-nav'\n            }\n    }) }}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using Pimcore Embed Editable in Twig Templates\nDESCRIPTION: Examples demonstrating basic and advanced usage of the pimcore_embed Twig function. Shows both simple implementation and configuration with custom width parameter.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/03_Documents/01_Editables/25_Embed.md#2025-04-17_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{# Basic usage #}\n{{ pimcore_embed(\"socialWidgets\") }}\n\n{# Advanced usage #}\n{{ pimcore_embed(\"socialWidgets\", {\"width\": 540}) }}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Link Editable in Twig\nDESCRIPTION: Demonstrates how to use the Link Editable in a Twig template. It shows a simple implementation where a link is created using the pimcore_link function.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/03_Documents/01_Editables/18_Link.md#2025-04-17_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n<p>\n    {{ \"Visit our\" | trans }}\n    {{ pimcore_link(\"blogLink\") }}\n</p>\n```\n\n----------------------------------------\n\nTITLE: Converting Pimcore Tags to Array for Bootstrap Treeview\nDESCRIPTION: These PHP functions convert Pimcore Tag objects to an array format compatible with bootstrap treeview. It includes logic for handling tag hierarchies and checking assigned tags.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/26_Best_Practice/85_Using_Tags_for_Filtering.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php \n/**\n*  Function to convert tags to an array that is expected by bootstrap tree view\n*/\nprotected function convertTagToArray(\\Pimcore\\Model\\Element\\Tag $tag, $assignedTagIds)\n{\n    $tagArray = [\n        \"id\" => $tag->getId(),\n        \"text\" => $tag->getName()\n    ];\n    $state = [];\n    $state[\"checked\"] = array_search($tag->getId(), $assignedTagIds) !== false;\n    $tagArray[\"state\"] = $state;\n    $children = $tag->getChildren();\n    foreach ($children as $child) {\n        $childrenNodes = $this->convertTagToArray($child, $assignedTagIds);\n        if($this->hasCheckedNodes($childrenNodes)) {\n            $tagArray[\"state\"][\"expanded\"] = true;\n        }\n        $tagArray['nodes'][] = $childrenNodes;\n    }\n    return $tagArray;\n}\n\nprotected function hasCheckedNodes($nodesArray) {\n    $it = new \\RecursiveIteratorIterator(\n        new \\ParentIterator(new \\RecursiveArrayIterator($nodesArray)),\n        \\RecursiveIteratorIterator::SELF_FIRST\n    );\n    foreach ($it as $key => $value) {\n        if ($key == 'state' && $value['checked']) {\n            return true;\n        }\n    }\n    return false;\n}\n```\n\n----------------------------------------\n\nTITLE: Sending a Plain Text Email with Pimcore\\Mail in PHP\nDESCRIPTION: Shows how to send a simple plain text email using Pimcore\\Mail. It sets the recipient and the text content of the email.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/19_Development_Tools_and_Details/25_Email_Framework/01_Pimcore_Mail.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$mail = new \\Pimcore\\Mail();\n$mail->to('example@pimcore.org');\n$mail->text(\"This is just plain text\");\n$mail->send();\n```\n\n----------------------------------------\n\nTITLE: Displaying Related Element Types Using Relations Editable in Twig\nDESCRIPTION: This snippet demonstrates how to use the Relations editable in a Twig template to display a list of related element types. It shows both the editmode and frontend rendering.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/03_Documents/01_Editables/13_Relations_Many-To-Many.md#2025-04-17_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n<p>{{ \"Types of elements\" | trans }}:</p>\n{% if editmode %}\n    {{ pimcore_relations(\"objectPaths\") }}\n{% else %}\n<ul>\n    {% for element in pimcore_relations(\"objectPaths\") %}\n        <li>{{ element.getType() }}</li>\n    {% endfor %}\n</ul>\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Creating a Job Object in PHP for Pimcore Generic Execution Engine\nDESCRIPTION: This snippet demonstrates how to create a Job object with multiple steps, selected elements, and environment data. It uses the Job class from the Pimcore\\Bundle\\GenericExecutionEngineBundle\\Model namespace.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/19_Development_Tools_and_Details/08_Generic_Execution_Engine/01_Jobs_and_Jobruns/01_Jobs.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$job = new Job(\n  'my-first-job',\n  [\n    new JobStep('Step 1', MyFirstTestMessage::class, '', [], StepSelectionMode::FOR_EACH),\n    new JobStep('Step 2', MySecondTestMessage::class, '', [], StepSelectionMode::FOR_EACH),\n  ],\n  [new ElementDescriptor('object', 234)],\n  [\n     'foo' => 'bar'\n  ]\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Quantity Value Unit in PHP\nDESCRIPTION: This snippet demonstrates how to programmatically create a new quantity value unit in Pimcore. It sets the abbreviation, long name, and group for the unit before saving it.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/01_Object_Classes/01_Data_Types/55_Number_Types.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$unit = new Pimcore\\Model\\DataObject\\QuantityValue\\Unit();\n$unit->setAbbreviation(\"km\");   // mandatory\n$unit->setLongname(\"kilometers\");\n$unit->setGroup(\"dimension\");\n$unit->save();\n```\n\n----------------------------------------\n\nTITLE: Creating Simple Document Links in Twig Templates with Pimcore\nDESCRIPTION: These code snippets demonstrate how to create links to other documents in Pimcore using Twig templating. The first approach uses the pimcore_document helper directly in the href attribute, while the second assigns the document to a variable first and then uses its fullpath property.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/02_MVC/04_Routing_and_URLs/00_Documents_and_Pretty_URLs.md#2025-04-17_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n<a href=\"{{ pimcore_document(2) }}\">Test-Link</a>\n\n/* OR */\n\n{% set document = pimcore_document(2) %}\n<a href=\"{{ document.fullpath }}\">Test-Link</a>\n```\n\n----------------------------------------\n\nTITLE: Implementing Select Editable with Basic Usage in Twig\nDESCRIPTION: This snippet demonstrates how to implement a Select Editable in Pimcore using Twig. It shows the editable in both editmode and frontend, with options for validity periods and translations.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/03_Documents/01_Editables/30_Select.md#2025-04-17_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% if editmode %}\n    {{ pimcore_select(\"valid_for\", {\n            \"store\": [\n                [\"one-month\", \"One month\"],\n                [\"three-months\", \"Three months\"],\n                [\"unlimited\", \"Unlimited\"]\n            ],\n            \"defaultValue\": \"unlimited\"\n        }) }}\n{% else %}\n    <p>\n        {{ \"Something is valid for\" | trans }}:{{ pimcore_select(\"valid_for\").getData() | trans  }}\n    </p>\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Implementing Editable Dialog Box for Areabrick in PHP\nDESCRIPTION: Example of implementing the EditableDialogBoxInterface to provide additional configuration options for an area brick. This class creates a dialog with input, checkbox, and date fields.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/03_Documents/01_Editables/02_Areablock/02_Bricks.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Document\\Areabrick;\n\nuse Pimcore\\Extension\\Document\\Areabrick\\EditableDialogBoxConfiguration;\nuse Pimcore\\Extension\\Document\\Areabrick\\EditableDialogBoxInterface;\nuse Pimcore\\Model\\Document;\nuse Pimcore\\Model\\Document\\Editable;\nuse Pimcore\\Model\\Document\\Editable\\Area\\Info;\n\nclass WysiwygWithImages extends AbstractAreabrick implements EditableDialogBoxInterface\n{\n    public function getName(): string\n    {\n        return 'WYSIWYG w. Images';\n    }\n\n    public function getEditableDialogBoxConfiguration(Document\\Editable $area, ?Info $info): EditableDialogBoxConfiguration\n    {\n        $config = new EditableDialogBoxConfiguration();\n        $config->setWidth(600);\n        //$config->setReloadOnClose(true);\n        \n        $config->setItems([\n            [\n                (new Editable\\Input())\n                    ->setName('myDialogInput')\n                    ->setLabel('Some additional Text'), // labels are optional\n                    \n                (new Editable\\Checkbox())\n                    ->setName('myDialogCheckbox')\n                    ->setLabel('This is the checkbox label')\n                    ->setDialogDescription('This is a description for myDialogCheckbox'),  // descriptions are optional\n                    \n                (new Editable\\Date())\n                    ->setName('myDialogDate')\n            ]\n        ]);\n\n        return $config;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Pimcore Migrations with Doctrine Commands\nDESCRIPTION: Examples of running migrations for Pimcore core, specific bundles, and project-specific changes using Doctrine migration commands with the Pimcore-specific --prefix option.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/19_Development_Tools_and_Details/37_Migrations.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# just run migrations of the Pimcore core\n./bin/console doctrine:migrations:migrate --prefix=Pimcore\\\\Bundle\\\\CoreBundle\n\n# run migrations of a certain bundle\n./bin/console doctrine:migrations:migrate --prefix=Vendor\\\\PimcoreExampleBundle\n\n# generate a project specific migration\n./bin/console doctrine:migrations:generate --namespace=App\\\\Migrations\n\n# run project specific migrations\n./bin/console doctrine:migrations:migrate --prefix=App\\\\Migrations\n```\n\n----------------------------------------\n\nTITLE: Configuring Pimcore Modify Permissions for Admin and Non-Admin Users in YAML\nDESCRIPTION: This YAML configuration uses the 'modify' shorthand to set permissions for Pimcore admin users and other users. Admins are allowed to modify (save, publish, unpublish, delete, rename) objects, while these actions are hidden for non-admin users.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/07_Workflow_Management/04_Permissions.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n   places:\n      closed:\n         permissions:\n           - condition: is_fully_authenticated() and 'ROLE_PIMCORE_ADMIN' in role_names\n             modify: true\n           - modify: false\n```\n\n----------------------------------------\n\nTITLE: Retrieving Document Language in Twig Template\nDESCRIPTION: Shows how to access the language property of a document within a Twig template. This is useful for displaying or using the document's language in the frontend.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/06_Multi_Language_i18n/02_Localize_your_Documents.md#2025-04-17_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% set documentLanguage = document.getProperty('language') %}\n```\n\n----------------------------------------\n\nTITLE: Getting Display Names for Select Values\nDESCRIPTION: Demonstrates how to retrieve display names for both single select and multiselect field values using Pimcore's Service class.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/01_Object_Classes/01_Data_Types/80_Select_Types.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Pimcore\\Model\\DataObject;\n\n$o = DataObject::getById(49);\n\n// for a (single) select data field\n$valuesSingle = DataObject\\Service::getOptionsForSelectField($o, \"select\"); \n$selectedValueSingle = $valuesSingle[$o->getSelect()];\n\n// for a multiselect data field\n$multiSelectFieldValues = DataObject\\Service::getOptionsForMultiSelectField($o, \"multiSelectField\");\n$selectedValues = array_map(\n    static fn($value) => $multiSelectFieldValues[$value],\n    $o->getMultiSelectField()\n); // For PHP >= 7.4\n\n$selectedValues = array_map(\n    static function($value) use ($multiSelectFieldValues) {\n        return $multiSelectFieldValues[$value];\n    }, $o->getMultiSelectField()\n); // For PHP <= 7.3\n```\n\n----------------------------------------\n\nTITLE: Creating Pimcore User and Member Object Programmatically in PHP\nDESCRIPTION: Demonstrates how to programmatically create a new Pimcore user and associate it with a member object. The code shows user creation with basic properties and member object creation with user association.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/19_Development_Tools_and_Details/31_Extending_a_Backend_User.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Pimcore\\Model\\User;\nuse Pimcore\\Model\\DataObject;\n...\n \n//create a new user for Sydney\n$user = User::create([\n    \"parentId\" => (int) $userGroup->getId(),\n    \"username\" => \"sydney\",\n    \"password\" => \"password1234\",\n    \"hasCredentials\" => true,\n    \"active\" => true\n]);\n \n...\n \n//create the Sydney member object\n$object = new DataObject\\Member();\n$object->setCreationDate(time());\n$object->setUserOwner($currentUser->getId());\n$object->setUserModification($currentUser->getId());\n$object->setPublished(true);\n \n$object->setName(\"Sydney Subsidiary\");\n$object->setKey(\"member1234\");\n//select the user belonging to this object\n$object->setUser($user->getId());\n \n$object->setParentId($parentFolderId);\n$object->save();\n \n...\n```\n\n----------------------------------------\n\nTITLE: Implementing AdminStyleListener in PHP\nDESCRIPTION: PHP implementation of the AdminStyleListener class to handle custom element styles for specific Pimcore elements.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/18_Tools_and_Features/02_Custom_Icons.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\EventListener;\n\nclass AdminStyleListener\n{\n    public function onResolveElementAdminStyle(\\Pimcore\\Bundle\\AdminBundle\\Event\\ElementAdminStyleEvent $event): void\n    {\n        $element = $event->getElement();\n        // decide which default styles you want to override\n        if ($element instanceof \\App\\Model\\Product\\Car) {\n            $event->setAdminStyle(new \\App\\Model\\Product\\AdminStyle\\Car($element));\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Select Field Values via PHP API\nDESCRIPTION: Demonstrates how to programmatically set values for different types of select fields including single select, multiselect, language, country, and user fields.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/01_Object_Classes/01_Data_Types/80_Select_Types.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$object->setSelect(\"1\");\n$object->setMultiselect([\"1\",\"2\"]);\n$object->setLanguage(\"en\");\n$object->setCountry(\"AU\");\n$object->setUser(1);\n$object->save();\n```\n\n----------------------------------------\n\nTITLE: Rendering Simple Sidebar Navigation in Twig\nDESCRIPTION: Basic implementation of a sidebar navigation menu without custom configuration.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/03_Documents/03_Navigation.md#2025-04-17_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n<div class=\"my-sidebar-menu\">\n   {{ pimcore_nav_renderer('menu').renderMenu(mainNavigation) }}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using Vote Listing in Pimcore Service Layer\nDESCRIPTION: Example of how to use the Vote listing to retrieve votes from the database with conditions. This snippet demonstrates creating a list object, setting a condition to filter votes with scores greater than 1, and loading the resulting Vote objects.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/20_Extending_Pimcore/17_Custom_Persistent_Models.md#2025-04-17_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$list = \\App\\Model\\Vote::getList();\n$list->setCondition(\"score > ?\", [1]);\n$votes = $list->load();\n```\n\n----------------------------------------\n\nTITLE: Defining Workflow Places in YAML\nDESCRIPTION: Specifies the different states (places) in the product workflow, including new, rejected, and update content. Each place has a label, color, and some have associated object layouts.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/07_Workflow_Management/05_Workflow_Tutorial.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nplaces:\n    new:\n        label: 'New product'\n        color: '#377ea9'\n        permissions:\n            - objectLayout: 1\n    rejected:\n        label: 'Rejected product'\n        color: '#28a013'\n    update_content:\n        label: 'Update Content'\n        title: 'Updating content step'\n        color: '#d9ef36'\n        permissions:\n            - objectLayout: 2\n```\n\n----------------------------------------\n\nTITLE: Overriding Bundle Dependencies in Pimcore Kernel (PHP)\nDESCRIPTION: Shows how to override bundle dependencies by registering them manually in the Kernel with different priorities or configurations.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/20_Extending_Pimcore/13_Bundle_Developers_Guide/04_Bundle_Collection.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App;\n\nuse Pimcore\\HttpKernel\\BundleCollection\\BundleCollection;\nuse Pimcore\\Kernel as PimcoreKernel;\n\nclass Kernel extends PimcoreKernel\n{\n    public function registerBundlesToCollection(BundleCollection $collection): void\n    {\n        // register FooBundle manually\n        $collection->addBundle(FooBundle::class, 25);\n        \n        // FooBundle won't be registered again here as it is already registered\n        $collection->addBundle(new \\CustomBundle\\CustomBundle);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Locking All Fields in a Pimcore Class\nDESCRIPTION: This PHP snippet demonstrates how to programmatically lock all fields in a Pimcore class with a specific ID. It retrieves the class definition, iterates through all field definitions, and sets each field to locked before saving the class.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/01_Object_Classes/05_Class_Settings/35_Locking_Fields.md#2025-04-17_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$class = DataObject\\ClassDefinition::getById(7);\n$fields = $class->getFieldDefinitions();\n \nforeach ($fields as $field) {\n   $field->setLocked(true);\n}\n \n$class->save();\n```\n\n----------------------------------------\n\nTITLE: Implementing Permission Check Event Listener in PHP\nDESCRIPTION: PHP implementation of the event listener that modifies object permissions. Checks product origin and current user permissions to dynamically adjust access rights for Pimcore backend UI operations.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/26_Best_Practice/60_Modifying_Permissions_based_on_Object_Data.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\EventListener;\n\nuse ... \n\nclass MyEventListener\n{\n    protected UserLoader $userLoader;\n\n    public function __construct(UserLoader $userLoader)\n    {\n        $this->userLoader = $userLoader;\n    }\n\n\n    public function checkPermissions(GenericEvent $event): void\n    {\n        $object = $event->getArgument(\"object\");\n        if($object instanceof Product) {\n\n            //data element that is send to Pimcore backend UI\n            $data = $event->getArgument(\"data\");\n\n            //get product origin\n            $origin = 'erp1';\n\n            //get current user\n            $user = $this->userLoader->getUser();\n\n            //check if allowed and if not change permission\n            if(!$user || !$user->isAllowed(\"editing_origin_$origin\")) {\n\n                $data['userPermissions']['save'] = false;\n                $data['userPermissions']['publish'] = false;\n                $data['userPermissions']['unpublish'] = false;\n                $data['userPermissions']['delete'] = false;\n                $data['userPermissions']['create'] = false;\n                $data['userPermissions']['rename'] = false;\n\n            }\n\n            $event->setArgument(\"data\", $data);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Twig View for Renderlet Gallery\nDESCRIPTION: This Twig template demonstrates how to create a view for rendering the gallery assets passed from the controller action. It iterates over the assets and displays them using a thumbnail.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/03_Documents/01_Editables/28_Renderlet.md#2025-04-17_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% if assets %}\n\t<div class=\"my-gallery\">\n\t\t{% for asset in assets %}\n\t\t\t{% if asset is instanceof('\\\\Pimcore\\\\Model\\\\Asset\\\\Image') %}\n\t\t\t\t<div class=\"gallery-row\">\n                    {{ asset.getThumbnail(\"myThumbnailName\").getHTML()|raw }}\n\t\t\t\t</div>\n\t\t\t{% endif %}\n\t\t{% endfor %}\n\t</div>\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Converting Quantity Values Using UnitConversionService in PHP\nDESCRIPTION: This snippet demonstrates how to convert quantity values between different units using the UnitConversionService in Pimcore. It converts a value from meters to millimeters.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/01_Object_Classes/01_Data_Types/55_Number_Types.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$originalValue = new QuantityValue(3, Unit::getByAbbreviation('m')->getId());\n$converter = $this->container->get(\\Pimcore\\Model\\DataObject\\QuantityValue\\UnitConversionService::class);\n$convertedValue = $converter->convert($originalValue, Unit::getByAbbreviation('mm'));\n// $convertedValue is a QuantityValue with value 3000 and unit mm\n```\n\n----------------------------------------\n\nTITLE: Implementing MyProductTeaser Area Brick in PHP\nDESCRIPTION: This snippet defines a MyProductTeaser class that extends AbstractAreabrick. It sets up the basic structure for a Product Teaser area brick in Pimcore.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/26_Best_Practice/40_Integrating_Commerce_Data_with_Content.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Document\\Areabrick;\n\nclass MyProductTeaser extends AbstractAreabrick\n{\n    public function getName(): string\n    {\n        return 'My Product Teaser';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HTML Sanitizer for WYSIWYG in YAML\nDESCRIPTION: YAML configuration for the HTML sanitizer used in WYSIWYG editables. It defines allowed attributes, elements, and other sanitization rules to clean HTML content from unwanted tags and parameters.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/03_Documents/01_Editables/40_WYSIWYG.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nframework:\n    html_sanitizer:\n        sanitizers:\n            pimcore.wysiwyg_sanitizer:\n                max_input_length: -1\n                allow_attributes:\n                    pimcore_type: '*'\n                    pimcore_id: '*'\n                allow_relative_links: true\n                allow_relative_medias: true\n                allow_elements:\n                    span: [ 'class', 'style', 'id' ]\n                    div: [ 'class', 'style', 'id' ]\n                    p: [ 'class', 'style', 'id' ]\n                    strong: 'class'\n                    em: 'class'\n                    h1: [ 'class', 'id' ]\n                    h2: [ 'class', 'id' ]\n                    h3: [ 'class', 'id' ]\n                    h4: [ 'class', 'id' ]\n                    h5: [ 'class', 'id' ]\n                    h6: [ 'class', 'id' ]\n                    a: [ 'class', 'id', 'href', 'target', 'title', 'rel', 'style' ]\n                    table: [ 'class', 'style', 'cellspacing', 'cellpadding', 'border', 'width', 'height', 'id' ]\n                    colgroup: 'class'\n                    col: [ 'class', 'style', 'id' ]\n                    thead: [ 'class', 'id' ]\n                    tbody: [ 'class', 'id' ]\n                    tr: [ 'class', 'id' ]\n                    td: [ 'class', 'id' ]\n                    th: [ 'class', 'id', 'scope' ]\n                    ul: [ 'class', 'style', 'id' ]\n                    li: [ 'class', 'style', 'id' ]\n                    ol: [ 'class', 'style', 'id' ]\n                    u: [ 'class', 'id' ]\n                    i: [ 'class', 'id' ]\n                    b: [ 'class', 'id' ]\n                    caption: [ 'class', 'id' ]\n                    sub: [ 'class', 'id' ]\n                    sup: [ 'class', 'id' ]\n                    blockquote: [ 'class', 'id' ]\n                    s: [ 'class', 'id' ]\n                    iframe: [ 'frameborder', 'height', 'longdesc', 'name', 'sandbox', 'scrolling', 'src', 'title', 'width' ]\n                    br: ''\n                    img: [ 'class', 'id', 'alt', 'style', 'src' ]\n                    hr: ''\n```\n\n----------------------------------------\n\nTITLE: Deleting Specific Object Brick in PHP\nDESCRIPTION: Shows how to delete a specific Object Brick (in this case, 'Tire') from a product using the PHP API. It sets the 'doDelete' flag on the brick and saves the product.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/01_Object_Classes/01_Data_Types/60_Object_Bricks.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$productBricks = $product->getBricks();\n$tireBrick = $productBricks->getTire();\n\nif ($tireBrick) {\n    $tireBrick->setDoDelete(true);\n}\n$product->save();\n```\n\n----------------------------------------\n\nTITLE: Using Link Generator in Twig Template with pimcoreUrl\nDESCRIPTION: Twig template example demonstrating the use of the pimcoreUrl function to generate links for a list of car objects.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/01_Object_Classes/05_Class_Settings/30_Link_Generator.md#2025-04-17_snippet_6\n\nLANGUAGE: twig\nCODE:\n```\n<ul class=\"foo\">\n    {% for car in carList %}\n        <li><a href=\"{{ path('pimcore_element', {'element': car}) }}\">{{ car.getName() }}</a></li>\n    {% endfor %}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Implementing Scheduled Block Editable in Twig\nDESCRIPTION: This snippet demonstrates the basic usage of the Scheduled Block Editable in a Twig template. It iterates through the block items, rendering an input field and an image for each item. In the frontend, only the item with the current timestamp will be displayed.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/03_Documents/01_Editables/42_Scheduled_Block.md#2025-04-17_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% for i in pimcore_scheduledblock(\"block\").iterator %}\n    <h2>{{ pimcore_input(\"blockinput\") }}</h2>\n    {{ pimcore_image(\"myimage\") }}\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Creating Persistent Copies of Elements in Pimcore using PHP\nDESCRIPTION: This code snippet shows how to create persistent copies of different types of elements (assets, documents, and objects) in Pimcore using the copyAsChild() method of the corresponding service. It requires a user object and specifies both the target (parent) and source elements.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/18_Tools_and_Features/31_Cloning Elements.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$user = \\Pimcore\\Model\\User::getById(123);\n\n$assetService = new \\Pimcore\\Model\\Asset\\Service($user);\n$assetService->copyAsChild($target, $source);\n\n$documentService = new \\Pimcore\\Model\\Document\\Service($user);\n$documentService->copyAsChild($target, $source); // additional arguments are available for inheritance, ...\n\n$objectService = new \\Pimcore\\Model\\DataObject\\Service($user);\n$objectService->copyAsChild($target, $source);\n```\n\n----------------------------------------\n\nTITLE: Basic Local Asset Video Integration in Twig\nDESCRIPTION: Creates a container for embedding local video files with specified width and height parameters.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/03_Documents/01_Editables/38_Video.md#2025-04-17_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n<section id=\"campaign_video\">\n    {{ pimcore_video(\"campaignVideo\", {\n        width: 700,\n        height: 400\n    }) }}\n</section>\n```\n\n----------------------------------------\n\nTITLE: Implementing Glossary in Twig Template\nDESCRIPTION: Twig template code showing how to define a region where glossary terms should be replaced. Uses the pimcore_glossary filter with a WYSIWYG content area.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/18_Tools_and_Features/21_Glossary.md#2025-04-17_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% apply pimcore_glossary %}\n<div>\n    {{ pimcore_wysiwyg('content', { height: 200 }) }}\n</div>\n{% endapply %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Simple Supports for Workflow in YAML\nDESCRIPTION: Demonstrates how to configure workflow support for a single entity class or multiple entity classes using YAML. This is the simplest way to define which entities are supported by the workflow.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/07_Workflow_Management/03_Support_Strategies.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsupports: Pimcore\\Model\\DataObject\\Product\n```\n\nLANGUAGE: yaml\nCODE:\n```\nsupports:\n    - Pimcore\\Model\\DataObject\\Product\n    - Pimcore\\Model\\DataObject\\ProductCategory\n```\n\n----------------------------------------\n\nTITLE: Implementing Blog Sitemap Generator in PHP\nDESCRIPTION: Custom generator class that extends AbstractElementGenerator to create sitemap entries for BlogArticle models. Includes filtering, processing and URL generation logic.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/18_Tools_and_Features/39_Sitemaps.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Sitemaps;\n\nuse Pimcore\\Model\\DataObject\\BlogArticle;\nuse Pimcore\\Bundle\\SeoBundle\\Sitemap\\Element\\AbstractElementGenerator;\nuse Pimcore\\Bundle\\SeoBundle\\Sitemap\\Element\\GeneratorContext;\nuse Presta\\SitemapBundle\\Service\\UrlContainerInterface;\nuse Presta\\SitemapBundle\\Sitemap\\Url\\UrlConcrete;\nuse Symfony\\Component\\Routing\\Generator\\UrlGeneratorInterface;\n\nclass BlogGenerator extends AbstractElementGenerator\n{\n    public function populate(UrlContainerInterface $urlContainer, string $section = null): void\n    {\n        if (null !== $section && $section !== 'blog') {\n            // do not add entries if section doesn't match\n            return;\n        }\n\n        $section = 'blog';\n\n        $list = new BlogArticle\\Listing();\n        $list->setOrderKey('date');\n        $list->setOrder('DESC');\n\n        // the context contains metadata for filters/processors\n        // it contains at least the url container, but you can add additional data\n        // with the params parameter\n        $context = new GeneratorContext($urlContainer, $section, ['foo' => 'bar']);\n\n        /** @var BlogArticle $blogArticle */\n        foreach ($list as $blogArticle) {\n            // only add element if it is not filtered\n            if (!$this->canBeAdded($blogArticle, $context)) {\n                continue;\n            }\n\n            // use a link generator to generate an URL to the article\n            // you need to make sure the link generator generates an absolute url\n            $link = $blogArticle->getClass()->getLinkGenerator()->generate($blogArticle, [\n                'referenceType' => UrlGeneratorInterface::ABSOLUTE_URL\n            ]);\n\n            // create an entry for the sitemap\n            $url = new UrlConcrete($link);\n\n            // run url through processors\n            $url = $this->process($url, $blogArticle, $context);\n\n            // processors can return null to exclude the url\n            if (null === $url) {\n                continue;\n            }\n\n            // add the url to the container\n            $urlContainer->addUrl($url, $section);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Document in Pimcore PHP\nDESCRIPTION: This snippet demonstrates how to delete a document using Pimcore's PHP API. It loads a document by ID and then calls the delete method.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/03_Documents/09_Working_with_PHP_API.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$document = \\Pimcore\\Model\\Document::getById(110);\nif ($document) {\n    $document->delete();\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping Select Value to Enum in Pimcore\nDESCRIPTION: This code shows how to map a select field value to its corresponding enum case in Pimcore, using the EnumTryFromNullableTrait. It also demonstrates retrieving the label for the selected option.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/01_Object_Classes/01_Data_Types/77_Select_Options.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$value = $product->getSelectField();\n$testOption = TestOptions::tryFromNullable($value);\nif ($testOption !== null) {\n    $label = $testOption->getLabel();\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Navigation Template in Twig\nDESCRIPTION: This Twig template demonstrates how to use the mapped data from the cached navigation. It iterates through the navigation pages and renders them with custom classes and attributes.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/03_Documents/03_Navigation.md#2025-04-17_snippet_16\n\nLANGUAGE: twig\nCODE:\n```\n{% for page in pages %}\n    {% if page.isVisible() %}\n        {% set activeClass = page.getActive(true) ? 'active' : '' %}\n        <li class=\"{{ activeClass }}\">\n            <a href=\"{{ page.getUri() }}\" target=\"{{ page.getTarget() }}\">{{ page.getLabel() }}</a>\n            <ul class=\"{{ page.getCustomSetting(\"subListClass\") }}\" role=\"menu\">\n                {% include 'navigation/partials/partials/main.html.twig' with {pages: page.getPages()} %}\n            </ul>\n        </li>\n    {% endif %}\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Including Document Objects with Parameters\nDESCRIPTION: Example showing how to include a document object with additional parameters using pimcore_inc.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/02_MVC/02_Template/02_Template_Extensions/README.md#2025-04-17_snippet_8\n\nLANGUAGE: twig\nCODE:\n```\n{% set doc = pimcore_doc(477) %}\n{{ pimcore_inc(doc, {param: 'value'}) }}\n```\n\n----------------------------------------\n\nTITLE: Advanced Input Editable Configuration in Twig\nDESCRIPTION: Shows how to implement a Pimcore input editable with additional configuration parameters. This example specifies a custom width of 540 pixels for the input field.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/03_Documents/01_Editables/16_Input.md#2025-04-17_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n<h2>\n    {{ pimcore_input(\"headerLine\", {\"width\": 540}) }}\n</h2>\n```\n\n----------------------------------------\n\nTITLE: Setting Title Segments in Twig with HeadTitle Helper\nDESCRIPTION: This snippet demonstrates how to add multiple title segments and configure the separator. It shows adding individual parts to the title and setting a separator character between segments.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/02_MVC/02_Template/02_Template_Extensions/05_HeadTitle.md#2025-04-17_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% do pimcore_head_title('My first part') %}\n{% do pimcore_head_title('The 2nd part') %}\n\n{# setting the site in the title; possibly in the layout script: #}\n{% do pimcore_head_title('My Pimcore Website') %}\n\n{# setting a separator string for segments: #}\n{% do pimcore_head_title().setSeparator(' / ') %}\n```\n\n----------------------------------------\n\nTITLE: Running Pimcore Core Migrations\nDESCRIPTION: This command runs the core migrations for Pimcore. It's essential for applying any database schema changes or data migrations that come with the new version.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/23_Installation_and_Upgrade/07_Updating_Pimcore/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbin/console doctrine:migrations:migrate --prefix=Pimcore\\\\Bundle\\\\CoreBundle\n```\n\n----------------------------------------\n\nTITLE: Using Static Method for Document Listing in Pimcore PHP\nDESCRIPTION: This snippet shows an alternative way to get a document listing using a static method. It demonstrates setting various parameters like unpublished status, condition, order, offset, and limit.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/03_Documents/09_Working_with_PHP_API.md#2025-04-17_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n//list all published children from the folder\n/** @var \\Pimcore\\Model\\Document\\Listing $listing */\n$listing = \\Pimcore\\Model\\Document::getList([\n    'unpublished' => true,\n    'condition' => \"`parentId` = 82\",\n    'orderKey' => ['key', 'published'],\n    'order' => 'desc',\n    'offset' => 2,\n    'limit' => 2\n]);\n```\n\n----------------------------------------\n\nTITLE: Accessing Dynamic Parameters in Twig Email Template\nDESCRIPTION: Example of how to access dynamic parameters passed to the email document in a Twig template.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/19_Development_Tools_and_Details/25_Email_Framework/README.md#2025-04-17_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\nHello {{ firstName }} {{ lastName }}\nRegarding the product {{ product.getName() }} ....\n```\n\n----------------------------------------\n\nTITLE: Configuring WYSIWYG Editable in Twig Template\nDESCRIPTION: Example of how to use the pimcore_wysiwyg function in a Twig template to create a WYSIWYG editable field. It demonstrates setting height, width, and placeholder options.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/03_Documents/01_Editables/40_WYSIWYG.md#2025-04-17_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ pimcore_wysiwyg(\"myWYSIWYG\", {\n    \"height\": 600,\n    \"width\": 1100,\n    \"placeholder\": \"Enter your content\"\n}) }}\n```\n\n----------------------------------------\n\nTITLE: Generating URLs with Optional Parameters in Twig\nDESCRIPTION: Example showing how to generate URLs based on custom routes using the Twig path() function, including handling optional parameters defined in the route pattern.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/02_MVC/04_Routing_and_URLs/02_Custom_Routes.md#2025-04-17_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\npath('news category', {\n    text: 'Test',\n    id: 67,\n    categoryId: 33,\n    getExample: 'some value'\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Object Variant in PHP\nDESCRIPTION: Example of programmatically creating an object variant by setting the parent object and variant type. Shows how to create a product variant with specific properties.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/01_Object_Classes/05_Class_Settings/70_Variants.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$objectX = new DataObject\\Product();\n$objectX->setParent(DataObject\\Product::getById(362603));\n$objectX->setKey(\"variantname\");\n$objectX->setColor(\"black\");\n$objectX->setType(DataObject::OBJECT_TYPE_VARIANT);\n$objectX->save();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Reverse Object Relations in PHP\nDESCRIPTION: This code snippet demonstrates how to get the owner objects of a Reverse Object Relation field using the PHP API in Pimcore. It uses the getter method of the object to retrieve the relations.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/01_Object_Classes/01_Data_Types/75_Reverse_Object_Relation_Type.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$ownerRelations = $object->getMyReverseObjectRelationField();\n```\n\n----------------------------------------\n\nTITLE: Running Specific Test Group in Pimcore\nDESCRIPTION: Command to execute a specific test group (dataTypeLocal) within the Model suite using Codeception in a Docker container. This allows for more granular test execution.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/19_Development_Tools_and_Details/29_Testing/02_Core_Tests.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose exec php vendor/bin/codecept run -c . Model -vvv -g dataTypeLocal\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS S3 Storage Adapter\nDESCRIPTION: Configuration for using AWS S3 as the storage adapter for Pimcore assets.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/23_Installation_and_Upgrade/03_System_Setup_and_Hosting/03_File_Storage_Setup.md#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nflysystem:\n    storages:\n        pimcore.asset.storage:\n            adapter: 'aws'\n            visibility: public\n            options:\n                client: 'assets_s3'\n                bucket: 'bucket-name'\n                prefix: assets\n```\n\n----------------------------------------\n\nTITLE: Implementing Translations in PHP Controller\nDESCRIPTION: Shows how to use the TranslatorInterface in a Pimcore controller to translate text. Demonstrates basic translation and variable interpolation using the translator service.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/06_Multi_Language_i18n/04_Shared_Translations.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Controller;\n\nuse Pimcore\\Controller\\FrontendController;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Contracts\\Translation\\TranslatorInterface;\n\nclass ContentController extends FrontendController\n{\n    public function defaultAction(TranslatorInterface $translator): Response\n    {\n        $translatedLegalNotice = $translator->trans(\"legal_notice\");\n        $siteName = \"Demo\"; // or get dynamically\n        // variable interpolation, 'about' translates to 'About {{siteName}}'\n        $translatedAbout = $translator->trans(\"about\", ['siteName' => $siteName]);\n        \n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Car DataObject Icon in PHP\nDESCRIPTION: PHP class extending AdminStyle to provide custom icons for Car DataObjects based on their type.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/18_Tools_and_Features/02_Custom_Icons.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model\\Product\\AdminStyle;\n\nuse Pimcore\\Model\\DataObject;\nuse Pimcore\\Model\\Element\\AdminStyle;\n\nclass Car extends AdminStyle\n{\n    protected ElementInterface $element;\n\n    public function __construct(ElementInterface $element)\n    {\n        parent::__construct($element);\n\n        $this->element = $element;\n\n        if ($element instanceof \\App\\Model\\Product\\Car) {\n            DataObject\\Service::useInheritedValues(true, function () use ($element) {\n                if ($element->getObjectType() == 'actual-car') {\n                    // setting this to false is necessary for the elementIcon to actually be used\n                    $this->elementIconClass = false;\n                    $this->elementIcon = '/bundles/pimcoreadmin/img/twemoji/1f697.svg';\n                }\n            });\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using DataObjectParam Attribute for Unpublished Objects\nDESCRIPTION: Example demonstrating how to use the #[DataObjectParam] attribute to configure additional options for param resolving, such as working with unpublished objects.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/02_MVC/04_Routing_and_URLs/02_Custom_Routes.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\npublic function detailAction(\n    #[DataObjectParam(unpublished: true)] DataObject\\News $news\n): Response {\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing External ID Lookup UI in Pimcore Admin Interface\nDESCRIPTION: JavaScript extension that adds a menu item and keyboard shortcut (Ctrl+Shift+L) to search for objects by external ID. Creates a message box prompt and makes an AJAX request to a backend endpoint to retrieve and open the corresponding object.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/26_Best_Practice/70_Open_By-External_Id.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.addEventListener(pimcore.events.pimcoreReady, (e) => {\n    const shortcutKey = 'l';\n    const endPoint = '/admin/find-by-external-id';\n\n\n    const messageBoxTitle = t('app_external_id_messagebox_title');\n    const messageBoxText = t('app_external_id_messagebox_errormessage');\n    const menuTitle = t('app_external_id_menu_title');\n\n\n    const openMessageBox = function() {\n        Ext.MessageBox.prompt(t(\"open_data_object\"), messageBoxTitle, function(btn, text){\n            if(btn == 'ok'){\n                Ext.Ajax.request({\n                    url: endPoint,\n                    method: \"post\",\n                    params: {\n                        'external-id': text\n                    },\n                    success: function(response){\n                        var res = Ext.decode(response.responseText);\n                        if(res) {\n                            pimcore.helpers.openElement(res, 'object');\n                        } else{\n                            pimcore.helpers.showNotification(t(\"error\"), messageBoxText, \"error\");\n                        }\n                    }\n                });\n            }\n        })\n    };\n\n    const toolbar = pimcore.globalmanager.get(\"layout_toolbar\");\n    const fileMenu = toolbar.fileMenu;\n    if(fileMenu) {\n        fileMenu.insert(4, {\n            text: menuTitle,\n            iconCls: 'pimcore_icon_object pimcore_icon_overlay_go',\n            cls: 'pimcore_main_menu',\n            handler: openMessageBox\n        });\n    }\n\n    new Ext.util.KeyMap({\n        target: document,\n        key: shortcutKey,\n        fn: openMessageBox,\n        ctrl:true,\n        alt:false,\n        shift:true,\n        stopEvent:true\n    });\n\n});\n```\n\n----------------------------------------\n\nTITLE: Using Configured Session in a Controller in PHP\nDESCRIPTION: This code snippet shows how to use a configured session in a controller. It demonstrates checking for an existing session, retrieving a specific session bag, and setting a value in the bag.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/19_Development_Tools_and_Details/35_Working_with_Sessions.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nif ($request->hasSession()) {\n    $session = $request->getSession();\n     \n    /** @var AttributeBag $bag */\n    $bag = $session->getBag('session_cart');\n    $bag->set('foo', 1);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Types for Notes and Events in Pimcore YAML\nDESCRIPTION: This YAML configuration snippet shows how to specify custom types for notes and events in Pimcore. It demonstrates how to set different types for documents, assets, and objects.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/18_Tools_and_Features/05_Notes_and_Events.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\npimcore_admin:\n    documents:\n        notes_events:\n            types:\n                - \"\"\n                - \"content\"\n                - \"seo\"\n                - \"some other type\"\n    assets:\n        notes_events:\n            types:\n                - \"\"\n                - \"content\"\n                - \"licese renewal\"\n                - \"some other type\"\n    objects:\n        notes_events:\n            types:\n                - \"\"\n                - \"manual data change\"\n                - \"some other type\"\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Admin Path Identifier in Pimcore\nDESCRIPTION: Configures a custom admin path identifier in config/config.yaml. The identifier must be at least 20 characters long and should not start with '/admin' for Pimcore versions <= 6.0.5.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/19_Development_Tools_and_Details/40_Custom_Admin_Login_Entry_Point.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\npimcore_admin: \n    custom_admin_path_identifier: min20CharCustomToken\n```\n\n----------------------------------------\n\nTITLE: Configuring BCrypt Password Hashing in Pimcore YAML\nDESCRIPTION: YAML configuration example showing how to set up BCrypt password hashing with a custom cost parameter of 13. This configuration applies to both Pimcore backend users and password fields in custom Pimcore objects.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/19_Development_Tools_and_Details/10_Security_Authentication/00_Configure_Password_Hashing_Algorithm.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\npimcore:\n    security:\n        password:\n            algorithm: !php/const PASSWORD_BCRYPT\n            options:\n                cost: 13\n```\n\n----------------------------------------\n\nTITLE: Creating and Filtering Asset Listings in Pimcore PHP\nDESCRIPTION: This snippet shows how to create and manipulate asset listings using Pimcore's PHP API. It demonstrates setting conditions, order, and loading the list.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/04_Assets/01_Working_with_PHP_API.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$list = new \\Pimcore\\Model\\Asset\\Listing();\n$list->setCondition(\"...\");\n$list->setOrderKey(\"filename\");\n$list->setOrder(\"DESC\");\n$list->load();\n```\n\n----------------------------------------\n\nTITLE: Rebuilding Pimcore Classes in PHP\nDESCRIPTION: Command to rebuild Pimcore classes and database structure based on updated class definition files. This is essential after deploying changes to class definitions.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/21_Deployment/05_Deployment_Tools.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./bin/console pimcore:deployment:classes-rebuild\n```\n\n----------------------------------------\n\nTITLE: Processing Table Editable Data in Twig\nDESCRIPTION: This example shows how to conditionally render the Table Editable in edit mode and process its data in view mode. It uses the getData() method to retrieve the table data as an array.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/03_Documents/01_Editables/34_Table.md#2025-04-17_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% if editmode %}\n    {{ pimcore_table(\"productProperties\", {\n        \"width\": 700,\n        \"defaults\": {\n            \"cols\": 3,\n            \"rows\": 4,\n            \"data\": [\n                [\"Attribute name\", \"Value\", \"Additional column\"],\n                [\"Color\", \"Black\", \"\"],\n                [\"Size\", \"Large\", \"\"],\n                [\"Availability\", \"Out of stock\", \"\"]\n            ]\n        }\n    }) }}\n{% else %}\n    {% set data = pimcore_table(\"productProperties\").getData() %}\n    \n    {# returns the data as an array #}\n    {# do something with it ;-) #}\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Accessing Parameters in a Brick Template with Twig\nDESCRIPTION: Shows how to access parameters within a brick template that were passed to the Area editable. This snippet demonstrates how to display the 'param1' value from the previous example.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/03_Documents/01_Editables/04_Area.md#2025-04-17_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n<div>\n    {{ param1 }}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Extending a Layout Template in Twig for Pimcore\nDESCRIPTION: This snippet shows how to extend a layout template in a child template using the 'extends' keyword in Twig.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/02_MVC/02_Template/01_Layouts.md#2025-04-17_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% extends 'layout.html.twig' %}\n```\n\n----------------------------------------\n\nTITLE: Running Redis Cache Tests in Pimcore\nDESCRIPTION: Command to run Redis cache tests using Codeception in a Docker container. It requires setting the PIMCORE_TEST_REDIS_DSN environment variable for Redis connection.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/19_Development_Tools_and_Details/29_Testing/02_Core_Tests.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose exec php vendor/bin/codecept run -c . Cache\n```\n\n----------------------------------------\n\nTITLE: Configuring Application Logger Levels in YAML\nDESCRIPTION: YAML configuration examples for setting minimum and maximum log levels for application logging.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/18_Tools_and_Features/17_Application_Logger.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napplicationlog:\n    loggers:\n        db:\n            min_level_or_list: ['debug', 'info']\n```\n\n----------------------------------------\n\nTITLE: Configuring Link Generator Services in YAML\nDESCRIPTION: Defines Symfony services for Link Generators in YAML configuration. These services are set as public to allow direct access.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/01_Object_Classes/05_Class_Settings/30_Link_Generator.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n    # ---------------------------------------------------------\n    # Link Generators for DataObjects\n    # ---------------------------------------------------------\n    App\\Website\\LinkGenerator\\CategoryLinkGenerator:\n        public: true\n\n    App\\Website\\LinkGenerator\\ProductLinkGenerator:\n        public: true\n\n    ...\n```\n\n----------------------------------------\n\nTITLE: Customizing Asset Styles and Icons in PHP\nDESCRIPTION: PHP class extending AdminStyle to provide custom styles, icons, and tooltips for Asset objects in Pimcore.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/18_Tools_and_Features/02_Custom_Icons.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Model\\Product\\AdminStyle;\n\nuse Pimcore\\Model\\Asset;\nuse Pimcore\\Model\\Element\\AdminStyle;\n\nclass AssetEventStyle extends AdminStyle\n{\n    public function __construct(ElementInterface $element)\n    {\n        parent::__construct($element);\n\n        if ($element instanceof Asset\\Image) {\n            if (strpos($element->getKey(), 'C') === 0) {\n                $this->elementIconClass = null;\n                $this->elementIcon = '/bundles/pimcoreadmin/img/twemoji/1f61c.svg';\n            }\n\n            $this->elementQtipConfig = [\n                'title' => 'ID: ' . $element->getId(),\n                'text' => 'Path: ' . $element->getFullPath()\n                        . '<br>Modified: ' . date('c', $element->getModificationDate())\n                        . '<br>Size:  '. $element->getWidth() . 'x' . $element->getHeight() . \" px\"\n            ];\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Context Information in Link Generator\nDESCRIPTION: Example of how to access context information (such as the associated document) within a Link Generator method.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/01_Object_Classes/05_Class_Settings/30_Link_Generator.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\npublic function generate(Concrete $object, array $params = []): string\n{\n    if (isset($params['document']) && $params['document'] instanceof Document) {\n        // param contains context information\n        $documentPath = $params['document']->getFullPath();\n    }\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Getter for Inherited Field Collection Data\nDESCRIPTION: This code snippet demonstrates how to implement inheritance for field collections by overriding the getter method. It checks for inherited values and returns them if available, otherwise falling back to the object's own data.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/01_Object_Classes/01_Data_Types/35_Fieldcollections.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\npublic function getFieldCollection(): mixed\n{\n    $data = parent::getFieldCollection();\n\n    $inheritedData = DataObject\\Service::useInheritedValues(true, function() use ($data) {\n        if (\\Pimcore\\Model\\DataObject::doGetInheritedValues($this) && $this->getClass()->getFieldDefinition(\"fieldCollection\")->isEmpty($data)) {\n            try {\n                return $this->getValueFromParent(\"fieldCollection\");\n            } catch (\\Pimcore\\Model\\DataObject\\Exception\\InheritanceParentNotFoundException $e) {\n                // no data from parent available, continue ... \n                return null;\n            }\n        }\n        return null;\n    });\n\n    return $inheritedData ?? $data;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Block with Localized Fields in PHP\nDESCRIPTION: Shows how to create a block that includes localized fields with multiple language values.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/01_Object_Classes/01_Data_Types/05_Blocks.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$object = DataObject::getById(4);\n\n$data = [\n    \"input1\" => new BlockElement('input1', 'input', 'NewValue1'),\n    \"input2\" => new BlockElement('input2', 'input', 'NewValue2'),\n    \"myhref\" => new BlockElement('myhref', 'manyToManyRelation', [$object]),\n    \"localizedfields\" => new BlockElement('localizedfields', 'localizedfields', new Localizedfield([\n        \"de\" => [\n            \"localizedInput\" => \"Mein deutscher Text\"\n        ],\n        \"en\" => [\n            \"localizedInput\" => \"My English text\"\n        ]\n    ]))\n];\n\n$object->setMyBlockField([$data]); \n```\n\n----------------------------------------\n\nTITLE: Cloning Elements Using Service::cloneMe in PHP\nDESCRIPTION: This snippet demonstrates how to create a safe copy of an original element in Pimcore using the Service::cloneMe() method. It's important to note that this method does not update internal references.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/18_Tools_and_Features/31_Cloning Elements.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$new = Pimcore\\Model\\Element\\Service::cloneMe($source)\n```\n\n----------------------------------------\n\nTITLE: Accessing Admin Config in PHP Controller\nDESCRIPTION: This PHP snippet demonstrates how to access the admin settings configuration in a Pimcore controller. It shows dependency injection of the AdminConfig service and retrieval of specific configuration values.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/18_Tools_and_Features/26_Appearance_and_Branding.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Controller;\n\nuse Pimcore\\Bundle\\AdminBundle\\System\\AdminConfig;\nuse Pimcore\\Controller\\FrontendController;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\nclass DefaultController extends FrontendController\n{\n    public function defaultAction(Request $request, AdminConfig $config): Response\n    {\n        // use type-hinting to inject the config service\n        $config = $config->getAdminSystemSettingsConfig();\n        $bar = $config['branding']['color_login_screen'];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Pimcore Console Usage Commands\nDESCRIPTION: Examples of basic console command usage, including listing all available commands and executing a specific command.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/19_Development_Tools_and_Details/11_Console_CLI.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n# get a list of all registered commands\n$ ./bin/console list\n \n# call the foo:bar command\n$ ./bin/console foo:bar\n```\n\n----------------------------------------\n\nTITLE: Sending Notification to Individual User\nDESCRIPTION: Example of sending a notification to a specific user using the NotificationService. Shows how to specify recipient, sender, message content and optional linked element.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/18_Tools_and_Features/41_Notifications.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Pimcore\\Model\\Notification\\Service\\NotificationService;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\npublic function defaultAction(\n    Request $request,\n    NotificationService $notificationService\n): Response {\n    $element = Asset::getById(1); // Optional\n    \n    $notificationService->sendToUser(\n        4, // User recipient\n        2, // User sender 0 - system\n        'Example notification',\n        'Example message', \n        $element // Optional linked element\n    );\n    \n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Input Field Value in PHP\nDESCRIPTION: This snippet demonstrates how to set the value of an input field in Pimcore using PHP. It shows setting a string value to the input field and then saving the object.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/01_Object_Classes/01_Data_Types/95_Text_Types.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$object->setInput(\"Some Text\");\n$object->save();\n```\n\n----------------------------------------\n\nTITLE: Basic Input Editable Usage in Twig\nDESCRIPTION: Demonstrates the basic implementation of a Pimcore input editable field. Creates a simple text input area within an h2 heading.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/03_Documents/01_Editables/16_Input.md#2025-04-17_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n<h2>\n {{ pimcore_input(\"myHeadline\") }}\n</h2>\n```\n\n----------------------------------------\n\nTITLE: Displaying Video Using Document Tag in Pimcore\nDESCRIPTION: Shows how to display a video using Pimcore's document video tag. Includes configuration for thumbnail, dimensions, and custom attributes while handling different video types.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/01_Object_Classes/01_Data_Types/98_Video_Type.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n\n$object = DataObject::getById(1234);\n$v = $object->getMyVideo();\n$videoData = $v->getData();\n\nif($videoData) {\n    $video = new \\Pimcore\\Model\\Document\\Editable\\Video();\n    $video->setConfig([\n        \"thumbnail\" => \"myVideoThumb\", // specify your thumbnail here - IMPORTANT!\n        \"width\" => \"100%\",\n        \"height\" => 480,\n        \"attributes\" => [\"class\" => \"video-js custom-class\", \"preload\" => \"auto\", \"controls\" => \"\", \"data-custom-attr\" => \"my-test\"]\n    ]);\n    $video->setType($v->getType());\n    $video->setTitle($v->getTitle());\n    $video->setDescription($v->getDescription());\n    $video->setId(($videoData instanceof Asset) ? $videoData->getId() : $videoData);\n    if($v->getPoster()) {\n        $video->setPoster($v->getPoster()->getId());\n    }\n    echo $video->frontend();\n\n}\n```\n\n----------------------------------------\n\nTITLE: Site Utility Functions in PHP\nDESCRIPTION: Helper functions for handling site-related operations like getting site for document and checking document site associations.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/02_MVC/04_Routing_and_URLs/08_Working_with_Sites.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n\\Pimcore\\Tool\\Frontend::getSiteForDocument($document);\n\\Pimcore\\Tool\\Frontend::isDocumentInCurrentSite($document);\n\\Pimcore\\Tool\\Frontend::isDocumentInSite($site, $document);\n```\n\n----------------------------------------\n\nTITLE: Customizing Asset Upload Paths in Pimcore\nDESCRIPTION: PHP code example showing how to dynamically modify asset upload paths in Pimcore based on the context of the upload, such as the related object and field.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/20_Extending_Pimcore/11_Event_API_and_Event_Manager.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n\\Pimcore::getEventDispatcher()->addListener(AssetEvents::RESOLVE_UPLOAD_TARGET,\n    function(\\Pimcore\\Event\\Model\\Asset\\ResolveUploadTargetEvent $event) {\n        $context = $event->getContext();\n        if ($context[\"containerType\"] == \"object\") {\n            $objectId = $context[\"objectId\"];\n            $newsObject = News::getById($objectId);\n            if ($newsObject) {\n                $fieldname = $context[\"fieldname\"];\n                $targetPath = $newsObject->getPath() . $newsObject->getKey() . \"/\" . $fieldname;\n                $parent = \\Pimcore\\Model\\Asset\\Service::createFolderByPath($targetPath);\n                if ($parent) {\n                    $event->setParentId($parent->getId());\n                }\n            }\n\n        }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Frontend JavaScript for Custom Editable\nDESCRIPTION: This JavaScript code creates a frontend class for the custom Markdown editable. It extends the textarea editable and overrides the getType method to return the custom type.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/20_Extending_Pimcore/13_Bundle_Developers_Guide/09_Adding_Document_Editables.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// /public/js/pimcore/document/editables/markdown.js\n\npimcore.registerNS(\"pimcore.document.editables.markdown\");\npimcore.document.editables.markdown = Class.create(pimcore.document.editables.textarea, {\n    getType: function () {\n        return \"markdown\";\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Unpublished Relations\nDESCRIPTION: Example of handling unpublished relations in Pimcore\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/01_Object_Classes/01_Data_Types/70_Relation_Types.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n//also include unpublished relations form now on\nDataObject::setHideUnpublished(false);\n//get a related object that is either published or unpublished\n$relationObject = $relation->getObject();\n//return to normal behavior\nDataObject::setHideUnpublished(true);\n```\n\n----------------------------------------\n\nTITLE: Maintenance Cron Job Configuration\nDESCRIPTION: Example cron job configuration for running Pimcore maintenance tasks and message consumers\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/01_Getting_Started/00_Installation/01_Webserver_Installation.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n*/5 * * * * /your/project/bin/console pimcore:maintenance\n\n*/5 * * * * /your/project/bin/console messenger:consume pimcore_core pimcore_maintenance pimcore_scheduled_tasks pimcore_search_backend_message --time-limit=300\n*/5 * * * * /your/project/bin/console messenger:consume pimcore_asset_update --time-limit=300\n*/5 * * * * /your/project/bin/console messenger:consume pimcore_image_optimize --time-limit=300\n```\n\n----------------------------------------\n\nTITLE: Retrieving Previous Version of an Object in PHP\nDESCRIPTION: PHP code snippet demonstrating how to retrieve a previous version of an object in Pimcore using the versioning API.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/18_Tools_and_Features/01_Versioning.md#2025-04-17_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$versions = $currentObject->getVersions();\n$previousVersion = $versions[count($versions)-2];\n$previousObject = $previousVersion->getData();\n```\n\n----------------------------------------\n\nTITLE: Accessing Website Settings in Twig Templates\nDESCRIPTION: Examples of accessing website configuration values in Twig templates, including retrieving entire config or specific values with optional defaults.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/18_Tools_and_Features/27_Website_Settings.md#2025-04-17_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{# access the whole configuration #}\n{{ pimcore_website_config() }}\n\n{# or only a single value #}\n{{ pimcore_website_config('googleMapsKey') }}\n\n{# you can pass a default value in case the value is not configured #}\n{{ pimcore_website_config('googleMapsKey', 'NOT SET') }}\n```\n\n----------------------------------------\n\nTITLE: Configuring .htaccess for Pimcore in Apache\nDESCRIPTION: This .htaccess file contains essential rewrite rules and configurations for Pimcore. It includes directives for URL rewriting, asset handling, static page serving, and optional performance optimizations like compression and caching.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/23_Installation_and_Upgrade/03_System_Setup_and_Hosting/01_Apache_Configuration.md#2025-04-17_snippet_0\n\nLANGUAGE: apacheconf\nCODE:\n```\n# Use the front controller as index file. It serves as a fallback solution when\n# every other rewrite/redirect fails (e.g. in an aliased environment without\n# mod_rewrite). Additionally, this reduces the matching process for the\n# start page (path \"/\") because otherwise Apache will apply the rewriting rules\n# to each configured DirectoryIndex file (e.g. index.php, index.html, index.pl).\nDirectoryIndex index.php\n\n# By default, Apache does not evaluate symbolic links if you did not enable this\n# feature in your server configuration. Uncomment the following line if you\n# install assets as symlinks or if you experience problems related to symlinks\n# when compiling LESS/Sass/CoffeScript assets.\n# Options FollowSymlinks\n\n# Disabling MultiViews prevents unwanted negotiation, e.g. \"/index\" should not resolve\n# to the front controller \"/index.php\" but be rewritten to \"/index.php/index\".\n<IfModule mod_negotiation.c>\n    Options -MultiViews\n</IfModule>\n\n# mime types\nAddType video/mp4 .mp4\nAddType video/webm .webm\nAddType image/webp .webp\nAddType image/jpeg .pjpeg\n\nOptions +SymLinksIfOwnerMatch\n\n# Use UTF-8 encoding for anything served text/plain or text/html\nAddDefaultCharset utf-8\n\nRewriteEngine On\n\n<IfModule mod_headers.c>\n    <FilesMatch \"\\.(jpe?g|png)$\">\n        Header always unset X-Content-Type-Options\n    </FilesMatch>\n</IfModule>\n\n# Determine the RewriteBase automatically and set it as environment variable.\n# If you are using Apache aliases to do mass virtual hosting or installed the\n# project in a subdirectory, the base path will be prepended to allow proper\n# resolution of the index.php file and to redirect to the correct URI. It will\n# work in environments without path prefix as well, providing a safe, one-size\n# fits all solution. But as you do not need it in this case, you can comment\n# the following 2 lines to eliminate the overhead.\nRewriteCond %{REQUEST_URI}::$1 ^(/.+)/(.*)::\\2$\nRewriteRule ^(.*) - [E=BASE:%1]\n\n# Sets the HTTP_AUTHORIZATION header removed by Apache\nRewriteCond %{HTTP:Authorization} .\nRewriteRule ^ - [E=HTTP_AUTHORIZATION:%{HTTP:Authorization}]\n\n# Redirect to URI without front controller to prevent duplicate content\n# (with and without `/index.php`). Only do this redirect on the initial\n# rewrite by Apache and not on subsequent cycles. Otherwise we would get an\n# endless redirect loop (request -> rewrite to front controller ->\n# redirect -> request -> ...).\n# So in case you get a \"too many redirects\" error or you always get redirected\n# to the start page because your Apache does not expose the REDIRECT_STATUS\n# environment variable, you have 2 choices:\n# - disable this feature by commenting the following 2 lines or\n# - use Apache >= 2.3.9 and replace all L flags by END flags and remove the\n#   following RewriteCond (best solution)\nRewriteCond %{ENV:REDIRECT_STATUS} ^$\nRewriteRule ^index\\.php(?:/(.*)|$) %{ENV:BASE}/$1 [R=301,L]\n\n<IfModule mod_status.c>\n    RewriteCond %{REQUEST_URI} ^/(fpm|server)-(info|status|ping)\n    RewriteRule . - [L]\n</IfModule>\n\n# restrict access to dotfiles\nRewriteCond %{REQUEST_FILENAME} -d [OR]\nRewriteCond %{REQUEST_FILENAME} -l [OR]\nRewriteCond %{REQUEST_FILENAME} -f\nRewriteRule /\\.|^\\.(?!well-known/) - [F,L]\n\n# ASSETS: check if request method is GET (because of WebDAV) and if the requested file (asset) exists on the filesystem, if both match, deliver the asset directly\nRewriteCond %{REQUEST_METHOD} ^(GET|HEAD)\nRewriteCond %{DOCUMENT_ROOT}/var/assets%{REQUEST_URI} -f\nRewriteRule ^(.*)$ /var/assets%{REQUEST_URI} [PT,L]\n\n# Thumbnails\nRewriteCond %{REQUEST_URI} .*/(image|video)-thumb__[\\d]+__.*\nRewriteCond %{DOCUMENT_ROOT}/var/tmp/thumbnails%{REQUEST_URI} -f\nRewriteRule ^(.*)$ /var/tmp/thumbnails%{REQUEST_URI} [PT,L]\n\n# static pages\nSetEnvIf Request_URI ^(.*)$ STATIC_PAGE_URI=$1\nSetEnvIf Request_URI / STATIC_PAGE_URI=/%home\n\nRewriteCond %{REQUEST_METHOD} ^(GET|HEAD)\nRewriteCond %{QUERY_STRING}   !(pimcore_editmode=true|pimcore_preview|pimcore_version)\nRewriteCond %{DOCUMENT_ROOT}/var/tmp/pages%{STATIC_PAGE_URI}.html -f\nRewriteRule ^(.*)$ /var/tmp/pages%{STATIC_PAGE_URI}.html [PT,L]\n\n# cache-buster rule for scripts & stylesheets embedded using view helpers\nRewriteRule ^cache-buster\\-[\\d]+/(.*) $1 [PT,L]\n\n# If the requested filename exists, simply serve it.\n# We only want to let Apache serve files and not directories.\nRewriteCond %{REQUEST_FILENAME} -f\nRewriteRule ^ - [L]\n\n# Rewrite all other queries to the front controller.\nRewriteRule ^ %{ENV:BASE}/index.php [L]\n\n\n\n\n##########################################\n### OPTIONAL PERFORMANCE OPTIMIZATIONS ###\n##########################################\n\n<IfModule mod_deflate.c>\n    # Force compression for mangled headers.\n    # http://developer.yahoo.com/blogs/ydn/posts/2010/12/pushing-beyond-gzipping\n    <IfModule mod_setenvif.c>\n        <IfModule mod_headers.c>\n            SetEnvIfNoCase ^(Accept-EncodXng|X-cept-Encoding|X{15}|~{15}|-{15})$ ^((gzip|deflate)\\s*,?\\s*)+|[X~-]{4,13}$ HAVE_Accept-Encoding\n            RequestHeader append Accept-Encoding \"gzip,deflate\" env=HAVE_Accept-Encoding\n        </IfModule>\n    </IfModule>\n\n    # Compress all output labeled with one of the following MIME-types\n    # (for Apache versions below 2.3.7, you don't need to enable `mod_filter`\n    #  and can remove the `<IfModule mod_filter.c>` and `</IfModule>` lines\n    #  as `AddOutputFilterByType` is still in the core directives).\n    <IfModule mod_filter.c>\n        AddOutputFilterByType DEFLATE application/atom+xml application/javascript application/json \\\n            application/vnd.ms-fontobject application/x-font-ttf application/rss+xml \\\n            application/x-web-app-manifest+json application/xhtml+xml \\\n            application/xml font/opentype image/svg+xml image/x-icon \\\n            text/css text/html text/plain text/x-component text/xml text/javascript\n    </IfModule>\n</IfModule>\n\n<IfModule mod_expires.c>\n    ExpiresActive on\n    ExpiresDefault \"access plus 31536000 seconds\"\n\n    # specific overrides\n    #ExpiresByType text/css \"access plus 1 year\"\n</IfModule>\n\n<IfModule pagespeed_module>\n    # pimcore mod_pagespeed integration\n    # pimcore automatically disables mod_pagespeed in the following situations: debug-mode on, /admin, preview, editmode, ...\n    # if you want to disable pagespeed for specific actions in pimcore you can use $this->disableBrowserCache() in your action\n    RewriteCond %{REQUEST_URI} ^/(mod_)?pagespeed_(statistics|message|console|beacon|admin|global_admin)\n    RewriteRule . - [L]\n\n    ModPagespeed Off\n    AddOutputFilterByType MOD_PAGESPEED_OUTPUT_FILTER text/html\n    ModPagespeedModifyCachingHeaders off\n    ModPagespeedRewriteLevel PassThrough\n    # low risk filters\n    ModPagespeedEnableFilters remove_comments,recompress_images\n    # low and moderate filters, recommended filters, but can cause problems\n    ModPagespeedEnableFilters lazyload_images,extend_cache_images,inline_preview_images,sprite_images\n    ModPagespeedEnableFilters combine_css,rewrite_css,move_css_to_head,flatten_css_imports,extend_cache_css,prioritize_critical_css\n    ModPagespeedEnableFilters extend_cache_scripts,combine_javascript,canonicalize_javascript_libraries,rewrite_javascript\n    # high risk\n    #ModPagespeedEnableFilters defer_javascript,local_storage_cache\n</IfModule>\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL Database for Pimcore\nDESCRIPTION: Command to create a new MySQL database with utf8mb4 character set and collation for Pimcore. This step is required before running the web-based installer.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/23_Installation_and_Upgrade/03_System_Setup_and_Hosting/05_DB_Setup.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmysql -u root -p -e \"CREATE DATABASE project_database CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci;\"\n```\n\n----------------------------------------\n\nTITLE: Registering PimcoreAdminBundle in Kernel\nDESCRIPTION: Code snippet showing how to register the PimcoreAdminBundle in the application kernel after installing it via composer. The bundle is added to the BundleCollection with a priority of 60.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/23_Installation_and_Upgrade/09_Upgrade_Notes/README.md#2025-04-17_snippet_9\n\nLANGUAGE: php\nCODE:\n```\npublic function registerBundlesToCollection(BundleCollection $collection): void\n{\n    // pimcore bundles\n    $collection->addBundle(new \\Pimcore\\Bundle\\AdminBundle\\PimcoreAdminBundle\\PimcoreAdminBundle(), 60);\n}\n```\n\n----------------------------------------\n\nTITLE: Forcing Device Type in Pimcore URL Parameters\nDESCRIPTION: Shows how to force a specific device type by adding the 'forceDeviceType' parameter to URLs. This sets a cookie to remember the forced device type for the browser session.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/19_Development_Tools_and_Details/21_Adaptive_Design_Helper.md#2025-04-17_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n/your/link?forceDeviceType=desktop\n/another/link?forceDeviceType=tablet\n/a/mobile/link?forceDeviceType=phone\n```\n\n----------------------------------------\n\nTITLE: Customizing Element Resolution in Pimcore Admin UI\nDESCRIPTION: PHP code snippet demonstrating how to hook into the element resolution process in Pimcore's admin UI. This example shows custom logic for resolving objects by title instead of ID.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/20_Extending_Pimcore/11_Event_API_and_Event_Manager.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n\\Pimcore::getEventDispatcher()->addListener(AdminEvents::RESOLVE_ELEMENT, function(ResolveElementEvent $event) {\n    $id  = $event->getId();\n    if ($event->getType() == \"object\") {\n        if (is_numeric($event->getId())) {\n            return;\n        }\n\n        $listing = new News\\Listing();\n        $listing->setLocale('en');\n        $listing->setLimit(1);\n        $listing->setCondition('title LIKE ' . $listing->quote('%' . $id . '%'));\n        $listing = $listing->load();\n        if ($listing) {\n            $id = ($listing[0])->getId();\n            $event->setId($id);\n        }\n    }               \n```\n\n----------------------------------------\n\nTITLE: Implementing PreviewGeneratorInterface for Product Preview in PHP\nDESCRIPTION: This code snippet demonstrates a sample implementation of the PreviewGeneratorInterface for a Product object in Pimcore. It includes methods for generating a preview URL and configuring preview parameters.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/01_Object_Classes/05_Class_Settings/56_Preview_Generator.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Service\\PreviewParamProvider;\n\nuse App\\Website\\LinkGenerator\\ProductLinkGenerator;\nuse Pimcore\\Model\\DataObject\\ClassDefinition\\PreviewGeneratorInterface;\nuse Pimcore\\Model\\DataObject\\Concrete;\n\nclass ProductPreviewParamProvider implements PreviewGeneratorInterface\n{\n    protected ProductLinkGenerator $productLinkGenerator;\n\n    public function __construct(ProductLinkGenerator $productLinkGenerator)\n    {\n        $this->productLinkGenerator = $productLinkGenerator;\n    }\n\n    public function generatePreviewUrl(Concrete $object, array $params): string\n    {\n        $additionalParams = [];\n        foreach($this->getPreviewConfig($object) as $paramStore) {\n            $paramName = $paramStore['name'];\n            if($paramValue = $params[$paramName]) {\n                $additionalParams[$paramName] = $paramValue;\n            }\n        }\n\n        return $this->productLinkGenerator->generate($object, $additionalParams);\n    }\n\n    public function getPreviewConfig(Concrete $object): array\n    {\n        return [\n            [\n                'name' => '_locale',\n                'label' => 'Locale',\n                'values' => [\n                    'English' => 'en',\n                    'German' => 'de'\n                ],\n                'defaultValue' => 'en'\n            ],\n            [\n                'name' => 'otherParam',\n                'label' => 'Other',\n                'values' => [\n                    'Label Text' => 'value',\n                    'Option #2' => 2,\n                    'Custom Option' => 'custom'\n                ],\n                'defaultValue' => 'value'\n            ]\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Edit Mode Calculator Method in Pimcore\nDESCRIPTION: Implementation of getCalculatedValueForEditMode method to display calculated values in the object editor\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/01_Object_Classes/01_Data_Types/10_Calculated_Value_Type.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\npublic function getCalculatedValueForEditMode(Concrete $object, CalculatedValue $context): string\n{\n    $language = $context->getPosition();\n    $result = $object->getXValue($language) . \" + \" . $object->getYValue($language) . \" = \" . $this->compute($object, $context);\n    return $result;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Pimcore Object Brick Definition in PHP\nDESCRIPTION: Command to import a Pimcore object brick definition from a JSON file. This is part of the class definition deployment process.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/21_Deployment/05_Deployment_Tools.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./bin/console pimcore:definition:import:objectbrick /brick_jsonfile_path.json\n```\n\n----------------------------------------\n\nTITLE: Manual Block with Additional CSS Class in Editmode\nDESCRIPTION: Demonstrates how to add a custom CSS class to the editmode div element for styling purposes in the admin interface.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/03_Documents/01_Editables/06_Block.md#2025-04-17_snippet_8\n\nLANGUAGE: twig\nCODE:\n```\n{% pimcoremanualblock \"gridblock\" %}\n<div>\n    {% blockiterate %}\n        {% do _block.blockStart(true, false, \"my-additional-class\") %}\n        Add additional class 'my-addional-class' to editmode-div\n        {% do _block.blockEnd() %}\n    {% endblockiterate %}\n</div>\n{% endpimcoremanualblock %}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Generated Link for a Document\nDESCRIPTION: PHP code snippet demonstrating how to retrieve the generated link for a Document object using its ID.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/01_Object_Classes/05_Class_Settings/30_Link_Generator.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$d = Document\\Link::getById(203);\necho($d->getHref());\n```\n\n----------------------------------------\n\nTITLE: Executing a Job using JobExecutionAgentInterface in PHP for Pimcore\nDESCRIPTION: This code snippet shows how to execute a job using the startJobExecution method of the JobExecutionAgentInterface. It demonstrates passing the job object, an optional owner ID, and an execution context.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/19_Development_Tools_and_Details/08_Generic_Execution_Engine/01_Jobs_and_Jobruns/01_Jobs.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$jobExecutionAgent->startJobExecution($job, null, 'my-custom-context');\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Layout Type to Class Definition Editor Context Menu\nDESCRIPTION: This JavaScript code adds a custom layout type to the context menu of the Class Definition editor. It uses the pimcore.events.prepareClassLayoutContextMenu event to insert the new layout type.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/20_Extending_Pimcore/13_Bundle_Developers_Guide/12_Adding_Object_ Layout_types.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.addEventListener(pimcore.events.prepareClassLayoutContextMenu, (e) => {\n     if (e.detail.allowedTypes.root !== undefined) {\n         e.detail.allowedTypes.root.push('myLayoutType');\n     }\n});\n```\n\n----------------------------------------\n\nTITLE: Dispatching WYSIWYG Change Event in JavaScript\nDESCRIPTION: JavaScript code for dispatching a custom event to notify Pimcore core about changes in the WYSIWYG field. This is crucial for integrating custom editors and updating the content in Pimcore.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/03_Documents/01_Editables/40_WYSIWYG.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.dispatchEvent(new CustomEvent(pimcore.events.changeWysiwyg, {\n    detail: {\n        e: {target:{id: textareaId}},\n        data: this.activeEditor.getSemanticHTML(), //text of the editor-field\n        context: e.detail.context //the context in which the editor is registered (object, document ...) \n    }\n}));\n```\n\n----------------------------------------\n\nTITLE: Filtering Relations in PHP\nDESCRIPTION: Examples of filtering single and many-to-many relations using PHP API in Pimcore\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/01_Object_Classes/01_Data_Types/70_Relation_Types.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$relationId = 162;\n$list = new \\Pimcore\\Model\\DataObject\\Example\\Listing();\n$list->setCondition(\"mySingleRelation__id = \".$relationId);\n$objects=$list->load();\n\n\n$relationId = 345;\n$list = new \\Pimcore\\Model\\DataObject\\Example\\Listing();\n$list->setCondition(\"myManyToManyRelations like '%,object|\".$relationId.\",%'\");\n$objects=$list->load();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Video Data in Pimcore PHP\nDESCRIPTION: Demonstrates how to retrieve video data from a Pimcore DataObject. Shows how to access a video field and display its contents, which can be an asset video, YouTube video, or Vimeo video.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/01_Object_Classes/01_Data_Types/98_Video_Type.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n    $object = DataObject::getById(1234);\n    print_r($object->getMyVideo());\n?>\n```\n\n----------------------------------------\n\nTITLE: Sending a Plain Text Email in PHP\nDESCRIPTION: PHP code snippet showing how to send a simple plain text email using Pimcore\\Mail.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/19_Development_Tools_and_Details/25_Email_Framework/README.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$mail = new \\Pimcore\\Mail();\n$mail->to('example@pimcore.org');\n$mail->text(\"This is just plain text\");\n$mail->send();\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Database Connection Class in PHP\nDESCRIPTION: Implements a custom database connection class that extends Doctrine's PrimaryReadReplicaConnection. The class adds specific MySQL configuration settings for InnoDB storage engine and SQL mode upon connection.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/26_Best_Practice/55_Primary-Replica_Database_Connection.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Db;\n\nuse Doctrine\\DBAL\\Connections\\PrimaryReadReplicaConnection;\n\nclass Connection extends PrimaryReadReplicaConnection\n{\n    /**\n     * @param string|null $connectionName\n     */\n    public function connect($connectionName = null): bool\n    {\n        $returnValue = parent::connect($connectionName);\n\n        if ($returnValue) {\n            $this->_conn->query('SET default_storage_engine=InnoDB;');\n            $this->_conn->query(\"SET sql_mode = '';\");\n        }\n\n        return $returnValue;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Server for Pimcore\nDESCRIPTION: Optional MySQL server configuration to enforce utf8mb4 character set and lowercase table names. This configuration should be placed in a file named pimcore.cnf in the server config directory.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/23_Installation_and_Upgrade/03_System_Setup_and_Hosting/05_DB_Setup.md#2025-04-17_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n# MySQL Server configuration for Pimcore.\n# @See https://dev.mysql.com/doc/refman/8.0/en/option-files.html\n# @See https://pimcore.com/docs/pimcore/11.0/Development_Documentation/Installation_and_Upgrade/System_Setup_and_Hosting/DB_Setup.html\n\n# Applies to any client connecting to this sever\n[client]\ndefault-character-set=utf8mb4\n\n# Applies to mysql cli client application\n[mysql]\ndefault-character-set=utf8mb4\n\n# Applies to mysql server\n[mysqld]\ncharacter-set-server=utf8mb4\ncollation-server=utf8mb4_unicode_520_ci\ninit-connect='SET NAMES utf8mb4'\nlower_case_table_names=1\n```\n\n----------------------------------------\n\nTITLE: Configuring Location Blocks for Pimcore Assets and PHP Handling\nDESCRIPTION: This section defines various location blocks for handling Pimcore assets, thumbnails, and PHP scripts. It includes security measures to prevent access to sensitive files and configures caching for assets.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/23_Installation_and_Upgrade/03_System_Setup_and_Hosting/02_Nginx_Configuration.md#2025-04-17_snippet_5\n\nLANGUAGE: nginx\nCODE:\n```\nlocation ~* /var/assets/.*\\.php(/|$) {\n    return 404;\n}\n\nlocation ~* /\\.(?!well-known/) {\n    deny all;\n    log_not_found off;\n    access_log off;\n}\n\nlocation ~* (?:\\.(?:bak|conf(ig)?|dist|fla|in[ci]|log|psd|sh|sql|sw[op])|~)$ {\n    deny all;\n}\n\nlocation ~* ^/admin/external {\n    rewrite .* /index.php$is_args$args last;\n}\n\nlocation ~* .*/(image|video)-thumb__\\d+__.* {\n    try_files /var/tmp/thumbnails$uri /index.php;\n    expires 2w;\n    access_log off;\n    add_header Cache-Control \"public\";\n}\n\nlocation ~* ^(?!/admin|/asset/webdav)(.+?)\\.((?:css|js)(?:\\.map)?|jpe?g|gif|png|svgz?|eps|exe|gz|zip|mp\\d|m4a|ogg|ogv|webp|webm|pdf|docx?|xlsx?|pptx?)$ {\n    try_files /var/assets$uri $uri =404;\n    expires 2w;\n    access_log off;\n    log_not_found off;\n    add_header Cache-Control \"public\";\n}\n\nlocation / {\n    error_page 404 /meta/404;\n    try_files $static_page_root$uri.html $uri /index.php$is_args$args;\n}\n\nlocation ~ ^/index\\.php(/|$) {\n    send_timeout 1800;\n    fastcgi_read_timeout 1800;\n    fastcgi_split_path_info ^(.+\\.php)(/.+)$;\n    try_files $fastcgi_script_name =404;\n    include fastcgi.conf;\n    set $path_info $fastcgi_path_info;\n    fastcgi_param PATH_INFO $path_info;\n    fastcgi_param HTTP_PROXY \"\";\n    fastcgi_pass php-pimcore10;\n    internal;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom View in Pimcore YAML\nDESCRIPTION: YAML configuration for setting up a custom view for car products in Pimcore. Defines tree structure, permissions, and display settings for a specific product directory.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/18_Tools_and_Features/13_Perspectives.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n#var/config/perspectives/perspective.yaml\n\n...\n4e9f892c-7734-f5fa-d6f0-31e7f9787ffc:\n    name: Cars\n    treetype: object\n    position: left\n    rootfolder: '/Product Data/Cars'\n    showroot: false\n    sort: 3\n    treeContextMenu:\n        object:\n            items:\n                add: true\n                addFolder: true\n                importCsv: true\n                cut: true\n                copy: true\n                paste: true\n                delete: true\n                rename: true\n                reload: true\n                publish: true\n                unpublish: true\n                searchAndMove: true\n                lock: true\n                unlock: true\n                lockAndPropagate: true\n                unlockAndPropagate: true\n                changeChildrenSortBy: true\n    icon: /bundles/pimcoreadmin/img/flat-white-icons/automotive.svg\n    classes: CAR\n    joins: {  }\n    id: 4e9f892c-7734-f5fa-d6f0-31e7f9787ffc\n```\n\n----------------------------------------\n\nTITLE: Generating Image Snapshots from Video Assets in PHP\nDESCRIPTION: Example code showing how to get preview image thumbnails from video assets in Pimcore. The code demonstrates loading a video asset and generating either a configured thumbnail or a dynamic thumbnail at a specific timestamp.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/04_Assets/03_Working_with_Thumbnails/03_Video_Thumbnails.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$asset = Asset::getById(123);\nif($asset instanceof Asset\\Video) {\n \n   // get a preview image thumbnail of the video, resized to the configuration of \"myThumbnail\"\n   echo $asset->getImageThumbnail(\"myThumbnail\");\n \n   // get a snapshot (image) out of the video at the time of 10 secs. (see second parameter) using a dynamic image thumbnail configuration\n   echo $asset->getImageThumbnail([\"width\" => 250], 10);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Twig Sandbox Security Policy in YAML\nDESCRIPTION: YAML configuration for setting up Twig sandbox security policies, defining allowed tags, filters, and functions for template rendering in Pimcore's dynamic text labels.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/01_Object_Classes/03_Layout_Elements/01_Dynamic_Text_Labels.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n    pimcore:\n          templating_engine:\n              twig:\n                sandbox_security_policy:\n                  tags: ['if']\n                  filters: ['upper']\n                  functions: ['include', 'path']\n```\n\n----------------------------------------\n\nTITLE: Debugging Symfony Config for Pimcore\nDESCRIPTION: Commands to debug and dump Pimcore's Symfony configuration values and reference.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/01_Getting_Started/04_Configuration.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# this is a core Symfony command and works for every bundle, just omit the\n# \"pimcore\" argument to get a list of all bundles\n$ bin/console debug:config pimcore\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/console config:dump-reference pimcore\n```\n\n----------------------------------------\n\nTITLE: Advanced Areablock Configuration in Twig\nDESCRIPTION: Demonstrates advanced areablock configuration with allowed areas, grouping, and parameter passing. Includes global and brick-specific parameters.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/03_Documents/01_Editables/02_Areablock/README.md#2025-04-17_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{{ pimcore_areablock(\"myAreablock\", {\n            \"allowed\": [\"iframe\",\"googletagcloud\",\"spacer\",\"rssreader\"],\n            \"group\": {\n                \"First Group\": [\"iframe\", \"spacer\"],\n                \"Second Group\": [\"rssreader\"]\n            },\n            \"globalParams\": {\n                \"myGlobalParam\": \"Global param value\"\n            },\n            \"params\": {\n                \"iframe\": {\n                    \"parameter1\": \"value1\",\n                    \"parameter2\": \"value2\"\n                },\n                \"googletagcloud\": {\n                    \"param1\": \"value1\"\n                }\n            }\n        })\n    }}\n```\n\n----------------------------------------\n\nTITLE: Creating MyProductTeaser Template in Twig\nDESCRIPTION: This Twig template implements the frontend structure for the MyProductTeaser area brick. It uses a Pimcore block and renderlet to create a dynamic product teaser.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/26_Best_Practice/40_Integrating_Commerce_Data_with_Content.md#2025-04-17_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n<div class=\"row\">\n    {% for i in pimcore_block('teaserblock').iterator %}\n        {{ pimcore_renderlet('productteaser', {\n            controller: 'shop',\n            action: 'productCell',\n            width: 270,\n            height: 370,\n            title: 'Drag a product here',\n            editmode: editmode\n        }) }}\n    {% endfor %}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Setting Up Bootstrap Treeview with Tag Data in JavaScript\nDESCRIPTION: This JavaScript snippet initializes a bootstrap treeview with the prepared tag data. It sets up the treeview with checkboxes and specifies the initial level of expansion.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/26_Best_Practice/85_Using_Tags_for_Filtering.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// template script to set up bootstrap treeview \n\n$tree = $('#filter-tag-tree');\n$tree.treeview({data: <?=json_encode($this->tagTree)?>, showCheckbox: true, levels: 1});\n```\n\n----------------------------------------\n\nTITLE: Creating Database Table Schema for Votes in SQL\nDESCRIPTION: SQL schema definition for creating a basic votes table with id, username and score fields using UTF-8 encoding.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/20_Extending_Pimcore/17_Custom_Persistent_Models.md#2025-04-17_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `votes` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `username` varchar(255) DEFAULT NULL,\n  `score` int(5) DEFAULT NULL,\n  PRIMARY KEY (`id`)\n) DEFAULT CHARSET=utf8mb4\n```\n\n----------------------------------------\n\nTITLE: Setting Geobounds Data in PHP for Pimcore\nDESCRIPTION: Shows how to set Geobounds data in Pimcore using PHP. It creates two GeoCoordinates objects for the north-east and south-west points, then uses these to create a Geobounds object.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/01_Object_Classes/01_Data_Types/40_Geographic_Types.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Pimcore\\Model\\DataObject\\Data\\Geobounds;\nuse Pimcore\\Model\\DataObject\\Data\\GeoCoordinates;\n\n$northEast = new GeoCoordinates(150.96588134765625, -33.704920213014425);\n$southWest = new GeoCoordinates(150.60333251953125, -33.893217379440884);\n$object->setBounds(new Geobounds($northEast,$southWest));\n$object->save();\n```\n\n----------------------------------------\n\nTITLE: Saving Objects with Metadata\nDESCRIPTION: Example of saving objects with metadata in Pimcore relations\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/01_Object_Classes/01_Data_Types/70_Relation_Types.md#2025-04-17_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Pimcore\\Model\\DataObject;\n\n//load your object (in this object we save the metadata objects)\n$object = DataObject::getById(73585);\n\n//create a empty array for your metadata objects\n$objectArray = [];\n\n//loop throu the objectlist (or array ...) and create object metadata\nforeach ($yourObjectsList as $yourObject) {\n  \n    //create the objectmetadata Object, \"yourObject\" is the referenced object\n    $objectMetadata = new DataObject\\Data\\ObjectMetadata('metadata', ['text', 'number'],  $yourObject);\n    //set into the metadata field (named text) the value \"Metadata\"\n    $objectMetadata->setText('Metadata');\n    //set into the metadata field (named Number) the value 23\n    $objectMetadata->setNumber(23);\n\n    //add to the empty \"objectArray\" array\n    $objectArray[] = $objectMetadata;\n}\n\n//set the metadataArray to your object\n$object->setMetadata($objectArray);\n\n// now save all\n$object->save();\n```\n\n----------------------------------------\n\nTITLE: Accessing Markers of an Advanced Image in PHP\nDESCRIPTION: Shows how to retrieve the markers defined on an Advanced Image (Hotspotimage) object in PHP.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/01_Object_Classes/01_Data_Types/45_Image_Types.md#2025-04-17_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$hotspotImage = $object->getHotspot1(); // name of the field in Pimcore is \"hotspot1\" in this case (class definition)\n//get an array of all defined marker\n$marker = $hotspotImage->getMarker();\n```\n\n----------------------------------------\n\nTITLE: Basic Area Editable Implementation in Twig\nDESCRIPTION: A simple example of implementing an Area editable with a specified type in a Twig template. This snippet demonstrates how to create an area with the 'gallery-single-images' brick type.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/03_Documents/01_Editables/04_Area.md#2025-04-17_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n<div>\n{{ pimcore_area(\"myArea\", {\"type\": \"gallery-single-images\"}) }}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Datatype Configuration in Pimcore YAML\nDESCRIPTION: YAML configuration to register a custom datatype in Pimcore by extending the pimcore.objects.class_definitions.data.map. This should be placed in config/config.yaml or in a bundle's auto-loaded configuration file.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/20_Extending_Pimcore/13_Bundle_Developers_Guide/11_Adding_Object_Datatypes.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\npimcore:\n    objects:\n        class_definitions:\n            data:\n                map:\n                  myDataType: \\App\\Model\\DataObject\\Data\\MyDataType\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL InnoDB Buffer Pool Size in my.cnf\nDESCRIPTION: This configuration sets the InnoDB buffer pool size in MySQL, which is crucial for improving database performance. The buffer pool caches table and index data in main memory for faster access.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/23_Installation_and_Upgrade/03_System_Setup_and_Hosting/09_Performance_Guide.md#2025-04-17_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[mysqld]\n    innodb_buffer_pool_size=5G # needs to be adjusted according to your data\n```\n\n----------------------------------------\n\nTITLE: Generated HTML Output with Glossary Terms\nDESCRIPTION: Example of the HTML output generated by the glossary feature, showing how terms are wrapped in abbr tags with titles and links are created.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/18_Tools_and_Features/21_Glossary.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<p>\n    <abbr title=\"Hypertext Preprocessor\">PHP</abbr> is a widely used, general-purpose scripting language that was originally designed for web development to produce dynamic web pages. For this purpose, <abbr title=\"Hypertext Preprocessor\">PHP</abbr> code is embedded into the HTML source document and interpreted by a web server with a <abbr title=\"Hypertext Preprocessor\">PHP</abbr> processor module, which generates the web page&nbsp; document. As a general-purpose programming language, <abbr title=\"Hypertext Preprocessor\">PHP</abbr> code is processed by an interpreter application in command-line mode performing desired operating system operations and producing program output on its standard output channel. It may also function as a graphical application. <abbr title=\"Hypertext Preprocessor\">PHP</abbr> is available as a processor for most modern web servers and as standalone interpreter on most operating systems and computing platforms. You can <a href=\"https://www.php.net/\">download</a> it free at php.net.\n</p>\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic Options Provider as Symfony Service in YAML\nDESCRIPTION: This YAML snippet demonstrates how to define a custom options provider as a Symfony service. It specifies the service name, class, and visibility.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/01_Object_Classes/01_Data_Types/30_Dynamic_Select_Types.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  website.optionsprovider:\n    class: Website\\OptionsProvider\n    public: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Workflow Places (States) in YAML\nDESCRIPTION: This snippet demonstrates how to define places (states) in a Pimcore workflow. Each place has a label, color for visual identification, and can be linked to a custom layout through permissions.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/26_Best_Practice/02_Implementing_Product_Information_Management.md#2025-04-17_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\npimcore:\n    workflows:\n        product_workflow:\n            places:\n                base_data:\n                    label: 'Base Data'\n                    color: '#ffd700'\n                    permissions:\n                      - objectLayout: basedata\n```\n\n----------------------------------------\n\nTITLE: Sending an Email Document with Pimcore\\Mail in PHP\nDESCRIPTION: Demonstrates how to send an email document using Pimcore\\Mail. It sets the recipient, specifies the email document, and passes parameters for template rendering.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/19_Development_Tools_and_Details/25_Email_Framework/01_Pimcore_Mail.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$params = ['firstName' => 'Pim', 'lastName' => 'Core', 'product' => 73613];\n\n$mail = new \\Pimcore\\Mail();\n$mail->to('example@pimcore.org');\n$mail->setDocument('/email/myemaildocument');\n$mail->setParams($params);\n$mail->send();\n```\n\n----------------------------------------\n\nTITLE: Configuring Model Class Overrides in Pimcore YAML\nDESCRIPTION: YAML configuration example showing how to map core Pimcore model classes to custom override classes. This configuration goes in config/config.yaml and defines class override mappings for News and News Listing objects.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/20_Extending_Pimcore/03_Overriding_Models.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\npimcore:\n    models:\n        class_overrides:\n            'Pimcore\\Model\\DataObject\\News': 'App\\Model\\DataObject\\News'\n            'Pimcore\\Model\\DataObject\\News\\Listing': 'App\\Model\\DataObject\\News\\Listing'\n```\n\n----------------------------------------\n\nTITLE: Creating Product Cell Template in Twig\nDESCRIPTION: This Twig template defines the HTML structure for displaying a single product cell. It includes product details such as image, name, price, and a buy button.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/26_Best_Practice/40_Integrating_Commerce_Data_with_Content.md#2025-04-17_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{% set col = app.request.get('editmode') ? 12 : 3 %}\n\n<div class=\"col-sm-{{ col }} col-lg-{{ col }} col-md-{{ col }}\">\n    <div class=\"thumbnail product-list-item\">\n        <a href=\"{{ product.linkProduct.detailUrl }}\">\n            {{ product.getFirstImage('productList').html({class: 'product-image'}) }}\n            <div class=\"caption\">\n                <h4 class=\"pull-right\">{{ product.OSPrice }}</h4>\n\n                <h4>{{ product.OSName }}</h4>\n    \n                <p>{{ product.description|striptags|trim[:70] }}</p>\n\n            </div>\n        </a>\n\n        <div class=\"buttons\">\n            <div class=\"row\">\n                <div class=\"col-md-6\">\n                </div>\n                <div class=\"col-md-6\">\n                    <a href=\"{{ pimcore_url({\n                        language: language,\n                        action: 'add',\n                        item: product.id,\n                    }, 'cart') }}\" class=\"btn btn-success btn-product\">\n                        <span class=\"glyphicon glyphicon-shopping-cart\"></span>\n                        {{ 'shop.buy'|trans }}\n                    </a>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of HeadScript Extension in Twig\nDESCRIPTION: Demonstrates how to add both external JavaScript files and inline scripts using the HeadScript extension. The example shows appending a jQuery file and an inline script variable.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/02_MVC/02_Template/02_Template_Extensions/03_HeadScript.md#2025-04-17_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{# adding scripts #}\n{% do pimcore_head_script().appendFile('/js/jquery.js').appendScript(onloadScript) %}\n```\n\n----------------------------------------\n\nTITLE: Basic Relation Editable Usage in Twig\nDESCRIPTION: Creates a simple relation editable that allows referencing any Pimcore element (document, asset, object) without restrictions.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/03_Documents/01_Editables/12_Relation_Many-To-One.md#2025-04-17_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ pimcore_relation(\"myRelation\") }}\n```\n\n----------------------------------------\n\nTITLE: Rerunning a Job Run in PHP\nDESCRIPTION: Shows how to rerun a job run using the JobExecutionAgentInterface. This method sets the job run state to 'running' and restarts its execution.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/19_Development_Tools_and_Details/08_Generic_Execution_Engine/01_Jobs_and_Jobruns/02_JobRun.md#2025-04-17_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n$jobExecutionAgent->rerunJobRun($jobRun->getId(), $ownerId);\n```\n\n----------------------------------------\n\nTITLE: Pimcore InlineScript Helper Methods\nDESCRIPTION: Example showing the two main helper methods for managing scripts in Pimcore templates. pimcore_inline_script() is used for scripts in the HTML body, while pimcore_head_script() is for scripts in the head section.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/02_MVC/02_Template/02_Template_Extensions/06_InlineScript.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\npimcore_inline_script()\npimcore_head_script()\n```\n\n----------------------------------------\n\nTITLE: Content Controller Test Implementation\nDESCRIPTION: PHP functional test class for testing controller responses using Pimcore's WebTestCase.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/19_Development_Tools_and_Details/29_Testing/01_Application_Testing.md#2025-04-17_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace Tests\\App\\Controller;\n\nuse Pimcore\\Test\\WebTestCase;\n\nclass ContentControllerTest extends WebTestCase\n{\n    public function testRedirectFromEn(): void\n    {\n        $client = static::createClient();\n        $client->request('GET', '/en');\n\n        $this->assertTrue($client->getResponse()->isRedirect());\n\n        $client->followRedirect();\n\n        $this->assertEquals('/', $client->getRequest()->getPathInfo());\n    }\n\n    public function testPortal(): void\n    {\n        $client = static::createClient();\n\n        $crawler = $client->request('GET', '/');\n\n        $response = $client->getResponse();\n\n        $this->assertTrue($response->isSuccessful(), 'response status is 2xx');\n\n        $this->assertTrue($response->headers->contains('X-Custom-Header', 'Foo'));\n        $this->assertTrue($response->headers->contains('X-Custom-Header', 'Bar'));\n        $this->assertTrue($response->headers->contains('X-Custom-Header2', 'Bazinga'));\n\n        $this->assertEquals(\n            1,\n            $crawler->filter('h1:contains(\"Ready to be impressed?\")')->count()\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Vote Model Class in PHP\nDESCRIPTION: PHP class implementation for the Vote model extending AbstractModel with getters/setters and basic CRUD operations.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/20_Extending_Pimcore/17_Custom_Persistent_Models.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Model;\n\nuse Pimcore\\Model\\AbstractModel;\nuse Pimcore\\Model\\Exception\\NotFoundException;\n\nclass Vote extends AbstractModel\n{\n    public ?int $id = null;\n\n    public ?string $username = null;\n\n    public ?int $score = null;\n\n    /**\n     * get score by id\n     */\n    public static function getById(int $id): ?self\n    {\n        try {\n            $obj = new self;\n            $obj->getDao()->getById($id);\n            return $obj;\n        }\n        catch (NotFoundException $ex) {\n            \\Pimcore\\Logger::warn(\"Vote with id $id not found\");\n        }\n\n        return null;\n    }\n\n    public function setScore(?int $score): void\n    {\n        $this->score = $score;\n    }\n\n    public function getScore(): ?int\n    {\n        return $this->score;\n    }\n\n    public function setUsername(?string $username): void\n    {\n        $this->username = $username;\n    }\n\n    public function getUsername(): ?string\n    {\n        return $this->username;\n    }\n\n    public function setId(?int $id): void\n    {\n        $this->id = $id;\n    }\n\n    public function getId(): ?int\n    {\n        return $this->id;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Renderlet Editable in Twig Template\nDESCRIPTION: This snippet demonstrates how to specify a Renderlet Editable in a Twig template. It shows the configuration options including controller, title, and height.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/03_Documents/01_Editables/28_Renderlet.md#2025-04-17_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n<section id=\"renderlet-gallery\">\n    {{\n        pimcore_renderlet(\"myGallery\", {\n            \"controller\": \"App\\\\Controller\\\\ContentController::myGalleryAction\",\n            \"title\": \"Drag an asset folder here to get a gallery\",\n            \"height\": 400\n        })\n    }}\n</section>\n```\n\n----------------------------------------\n\nTITLE: Download Link Implementation with Relation Editable in Twig\nDESCRIPTION: Creates a download link using a relation editable. In edit mode, it shows the relation picker, while in frontend mode it generates a download link if the selected element is an asset.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/03_Documents/01_Editables/12_Relation_Many-To-One.md#2025-04-17_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% if editmode %}\n    {{ pimcore_relation(\"myRelation\") }}\n{% else %}\n    {% if pimcore_relation(\"myRelation\").getElement() is instanceof('\\\\Pimcore\\\\Model\\\\Asset')  %}\n        <a href=\"{{ pimcore_relation(\"myRelation\").getFullPath() }}\">{{ \"Download\" | trans }}</a>\n    {% endif %}\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Disabling Cache in PHP Code\nDESCRIPTION: Simple example showing how to disable the Pimcore cache programmatically, with a warning about production usage.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/19_Development_Tools_and_Details/09_Cache/README.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n\\Pimcore\\Cache::disable();\n```\n\n----------------------------------------\n\nTITLE: Configuring System Settings Storage in Pimcore YAML\nDESCRIPTION: This YAML configuration sets up the system settings to be written and read from the settings store in Pimcore.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/18_Tools_and_Features/25_System_Settings.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\npimcore:\n    config_location:\n        system_settings:\n            write_target:\n                type: 'settings-store'\n            read_target:\n                type: 'settings-store'\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom HTML Rendering for Workflow Transitions in YAML\nDESCRIPTION: Specifies the configuration for custom HTML rendering within a workflow transition. It allows defining a custom service for HTML rendering and setting the position of the custom HTML within the modal.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/07_Workflow_Management/01_Configuration_Details/README.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ncustomHtml:\n    service: 'App\\Service\\Workflow\\CustomHtmlService'\n    position: 'top'\n```\n\n----------------------------------------\n\nTITLE: Random Priority Processor Implementation\nDESCRIPTION: Custom processor that adds random priority values to sitemap entries.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/18_Tools_and_Features/39_Sitemaps.md#2025-04-17_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Sitemaps\\Processor;\n\nuse Pimcore\\Model\\Element\\ElementInterface;\nuse Pimcore\\Bundle\\SeoBundle\\Sitemap\\Element\\GeneratorContextInterface;\nuse Pimcore\\Bundle\\SeoBundle\\Sitemap\\Element\\ProcessorInterface;\nuse Presta\\SitemapBundle\\Sitemap\\Url\\Url;\nuse Presta\\SitemapBundle\\Sitemap\\Url\\UrlConcrete;\n\nclass RandomPriorityProcessor implements ProcessorInterface\n{\n    public function process(Url $url, ElementInterface $element, GeneratorContextInterface $context): Url\n    {\n        if ($url instanceof UrlConcrete) {\n            $url->setPriority(rand(0, 10) / 10);\n        }\n\n        // important: return an Url instance to be added. if your\n        // processor returns null it will be omitted.\n        return $url;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Bundles in Pimcore Kernel using BundleCollection (PHP)\nDESCRIPTION: Demonstrates various ways to register bundles using the BundleCollection in the Pimcore Kernel. It shows how to add bundles with different priorities, environment restrictions, and lazy loading.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/20_Extending_Pimcore/13_Bundle_Developers_Guide/04_Bundle_Collection.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App;\n\nuse Pimcore\\HttpKernel\\BundleCollection\\BundleCollection;\nuse Pimcore\\HttpKernel\\BundleCollection\\Item;\nuse Pimcore\\HttpKernel\\BundleCollection\\LazyLoadedItem;\nuse Pimcore\\Kernel as PimcoreKernel;\n\nclass Kernel extends PimcoreKernel\n{\n    public function registerBundlesToCollection(BundleCollection $collection): void\n    {\n        // add a bundle\n        $collection->addBundle(new BundleA());\n\n        // add a bundle, set a higher priority and restrict it to an environment\n        $collection->addBundle(new BundleB(), 10, ['dev']);\n\n        // add a bundle again - it will be ignored and still be loaded with prio 10\n        $collection->addBundle(new BundleB());\n\n        // add a bundle as string argument to load it lazily - the class instance will\n        // only be built when really needed (when the environment matches), so this makes\n        // sense for every item added with an environment restriction\n        $collection->addBundle(BundleC::class, 10, ['dev']);\n\n        // addBundle() is actually just a wrapper for add() which you can also directly use\n        $collection->add(new Item(new BundleD(), 10, ['dev', 'prod']));\n\n        // addBundle() is actually just a wrapper for add() which you can also directly use\n        $collection->add(new LazyLoadedItem(BundleE::class, 10, ['dev']));\n\n        // the collection expectes an ItemInterface - if needed you can get fancy and implement\n        // your own item type\n        $collection->add(new FancyItem(/* whatever your item needs */));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Document Types in YAML Configuration\nDESCRIPTION: YAML configuration for defining document types, including class, translatability, valid table, and other behavioral settings.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/23_Installation_and_Upgrade/09_Upgrade_Notes/README.md#2025-04-17_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\ndocuments:\n    type_definitions:\n        map:\n            page:\n                class: \\Pimcore\\Model\\Document\\Page\n                translatable: true\n                valid_table: 'page'\n                direct_route: true\n                translatable_inheritance: true\n                children_supported: true\n                only_printable_childrens: false\n                predefined_document_types: true\n```\n\n----------------------------------------\n\nTITLE: Translating Select Editable Options in Twig\nDESCRIPTION: This snippet demonstrates how to translate options of a Select Editable in Twig using the admin translation domain. It uses the current admin user's language for translation.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/06_Multi_Language_i18n/07_Admin_Translations.md#2025-04-17_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ pimcore_select(\"select\", {\n\t\"store\": [\n\t\t[\"option1\", {{ \"Option One\"|trans({}, 'admin', pimcore_editmode_admin_language()) }}],\n\t\t[\"option2\", {{ \"Option Two\"|trans({}, 'admin', pimcore_editmode_admin_language()) }}],\n\t\t[\"option3\", {{ \"Option Three\"|trans({}, 'admin', pimcore_editmode_admin_language()) }}]\n\t]\n}) }}\n```\n\n----------------------------------------\n\nTITLE: HTTP/2 Push Support Configuration in Twig\nDESCRIPTION: Shows how to configure HTTP/2 Push support with the HeadLink helper using the WebLink Component. Demonstrates enabling web links globally, setting attributes, and configuring individual items.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/02_MVC/02_Template/02_Template_Extensions/01_HeadLink.md#2025-04-17_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{# enable web links for every item #}\n{% do pimcore_head_link().enableWebLinks() %}\n\n{# set web link attributes passed to every item #}\n{% do pimcore_head_link().setWebLinkAttributes({as: 'style'}) %}\n\n{# enable webLink on an item level #}\n{# the item will be added even if enableWebLinks() was not called #}\n{% do pimcore_head_link().setWebLinkAttributes({as: 'style'}) %}\n\n{# disable webLink on an item level #}\n{# the item won't be added even if enableWebLinks() was called #}\n{% do pimcore_head_link().appendStylesheet('/static/css/styles.css', 'screen', false, {webLink: {as: 'style'}}) %}\n\n{# override the used method (default is preload()) #}\n{% do pimcore_head_link().appendStylesheet('/static/css/styles.css', 'screen', false, {'webLink': {method: 'prefetch'}}) %}\n```\n\n----------------------------------------\n\nTITLE: Using Link Editable within Block Editable in Twig\nDESCRIPTION: Shows how to create a list of links using the Link Editable within a Block Editable. This example demonstrates creating multiple editable links in a loop.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/03_Documents/01_Editables/18_Link.md#2025-04-17_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n<h3>{{ \"Useful links\" | trans }}</h3>\n<ul>\n    {% for i in pimcore_block(\"linkblock\").iterator %}\n        <li>{{ pimcore_link(\"myLink\", {\"class\": \"special-link-class\"}) }}</li>\n    {% endfor %}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Finding Objects Associated with Pimcore User in PHP\nDESCRIPTION: Shows how to retrieve all objects that reference a specific Pimcore user using the DataObject\\Service utility class.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/19_Development_Tools_and_Details/31_Extending_a_Backend_User.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$objects = \\Pimcore\\Model\\DataObject\\Service::getObjectsReferencingUser($userId);\n```\n\n----------------------------------------\n\nTITLE: Updating Localized Log for Job Run in PHP\nDESCRIPTION: Demonstrates how to update a localized log entry for a job run using the JobRunRepository. This method writes an untranslated message to the job run object and adds a translated version to the log.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/19_Development_Tools_and_Details/08_Generic_Execution_Engine/01_Jobs_and_Jobruns/02_JobRun.md#2025-04-17_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$this->jobRunRepository->updateLogLocalized(\n    $jobRun, 'pimcore_copilot_job_execution_job_cancelled', ['%job_run_id%' => $jobRun->getId()]\n);\n```\n\n----------------------------------------\n\nTITLE: Sorting Areablock Items in Twig\nDESCRIPTION: Demonstrates how to configure custom sorting for areablock items in the menu.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/03_Documents/01_Editables/02_Areablock/README.md#2025-04-17_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{{ pimcore_areablock(\"content\", {\n    \"allowed\": [\"image\",\"video\",\"wysiwyg\"],\n    \"sorting\": [\"wysiwyg\",\"video\",\"image\"],\n}) }}\n```\n\n----------------------------------------\n\nTITLE: Disabling and Enabling Versioning in PHP\nDESCRIPTION: PHP code snippets to disable and enable versioning for the current process in Pimcore. This is useful for operations like imports or synchronizations where versioning is not needed.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/18_Tools_and_Features/01_Versioning.md#2025-04-17_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n\\Pimcore\\Model\\Version::disable(); // to disable versioning for the current process\n\\Pimcore\\Model\\Version::enable(); // to enable versioning for the current process\n```\n\n----------------------------------------\n\nTITLE: Creating and Assigning a New Tag to a Pimcore Asset via PHP\nDESCRIPTION: This code snippet shows how to create a new tag and assign it to a specific Pimcore asset. It creates a new Tag object, sets its name, saves it, and then uses the addTagToElement method to associate the tag with an asset.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/18_Tools_and_Features/09_Tags.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$tag =  new \\Pimcore\\Model\\Element\\Tag();\ntry {\n    $tag->setName('newtag')->save();\n    \\Pimcore\\Model\\Element\\Tag::addTagToElement('asset', 30, $tag);\n} catch (Exception $e) {\n// ....\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Event Listener Service in YAML\nDESCRIPTION: Service configuration for registering the event listener that handles permission modifications. Sets up the MyEventListener class with UserLoader dependency and binds it to the pimcore.admin.dataobject.get.preSendData event.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/26_Best_Practice/60_Modifying_Permissions_based_on_Object_Data.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n    app.event_listener.my_event_listner:\n        class: App\\EventListener\\MyEventListener\n        arguments:\n            - '@Pimcore\\Security\\User\\UserLoader'\n        tags:\n            - { name: kernel.event_listener, event: pimcore.admin.dataobject.get.preSendData, method: checkPermissions }\n```\n\n----------------------------------------\n\nTITLE: Using Pimcore IntlFormatter Service\nDESCRIPTION: Example of using the Pimcore IntlFormatter service to format dates, numbers, and currencies. Shows how to initialize the service, set locale, and format different types of values using various formatting options.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/06_Multi_Language_i18n/09_Formatting_Service.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$service = \\Pimcore::getContainer()->get(Pimcore\\Localization\\IntlFormatter::class);\n\n//optionally set locale (otherwise it is resolved from the request)\n$service->setLocale(\"de\");\n\necho $service->formatDateTime($time, IntlFormatter::DATETIME_MEDIUM);\necho $service->formatNumber(\"45632325.32\");\necho $service->formatCurrency(\"45632325.32\", \"EUR\");\n\n\n//for formatting currencies you can also define a pattern\necho $service->formatCurrency(\"45632325.32\", \"EUR\", \"#,##0.00 ¤¤\");\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Asset Type in Pimcore Configuration\nDESCRIPTION: YAML configuration to register the custom InDesign asset type in Pimcore. It specifies the PHP class and file extension matching pattern for the new asset type.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/20_Extending_Pimcore/13_Bundle_Developers_Guide/07_Adding_Asset_Types.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# /config/config.yaml\n\npimcore:\n    assets:\n        type_definitions:\n            map:\n                indesign:\n                    class: \\App\\Model\\Asset\\InDesign\n                    matching: [\"/\\\\.indd/\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Doctrine Database Mappings in YAML\nDESCRIPTION: YAML configuration for setting up Doctrine DBAL connection mapping types for enum and bit fields.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/23_Installation_and_Upgrade/07_Updating_Pimcore/10_V6_to_V10.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndoctrine:\n  dbal:\n    connections:\n      default:\n        mapping_types:\n          enum: string\n          bit: boolean\n```\n\n----------------------------------------\n\nTITLE: Registering Custom GDPR Data Provider Service in YAML\nDESCRIPTION: YAML configuration for registering a custom GDPR data provider service. Shows both autoconfiguration and manual tag configuration approaches.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/18_Tools_and_Features/35_GDPR_Data_Extractor.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# either enable autoconfigure as _defaults (or only for your service)\nservices:\n    _defaults:\n        autoconfigure: true\n        public: false\n\n    App\\GDPR\\DataProvider\\MyCustomDataProvider: ~\n\n# or specify the tag manually if not using autoconfiguration\nservices:\n    _defaults:\n        public: false\n\n    App\\GDPR\\DataProvider\\MyCustomDataProvider:\n        tags:\n            - { name: pimcore.gdpr.data-provider }\n```\n\n----------------------------------------\n\nTITLE: Absolute URL Generator Implementation\nDESCRIPTION: Example processor showing how to use Pimcore's URL generator to create absolute URLs for sitemap entries.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/18_Tools_and_Features/39_Sitemaps.md#2025-04-17_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Sitemaps\\Processor;\n\nuse Pimcore\\Model\\Element\\ElementInterface;\nuse Pimcore\\Bundle\\SeoBundle\\Sitemap\\Element\\GeneratorContextInterface;\nuse Pimcore\\Bundle\\SeoBundle\\Sitemap\\Element\\ProcessorInterface;\nuse Pimcore\\Bundle\\SeoBundle\\Sitemap\\UrlGeneratorInterface;\nuse Presta\\SitemapBundle\\Sitemap\\Url\\Url;\nuse Presta\\SitemapBundle\\Sitemap\\Url\\UrlConcrete;\n\nclass RandomPathProcessor implements ProcessorInterface\n{\n    private UrlGeneratorInterface $urlGenerator;\n\n    public function __construct(UrlGeneratorInterface $urlGenerator)\n    {\n        $this->urlGenerator = $urlGenerator;\n    }\n\n    public function process(Url $url, ElementInterface $element, GeneratorContextInterface $context): UrlConcrete\n    {\n        $path = $this->urlGenerator->generateUrl('/foo/bar');\n        $url  = new UrlConcrete($path);\n\n        return $url;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Image Markers and Hotspots Implementation in Twig\nDESCRIPTION: Demonstrates how to implement image markers and hotspots in Pimcore including data templates and output handling. Shows usage of getMarker() and getHotspots() methods with examples of their return data structures.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/03_Documents/01_Editables/14_Image.md#2025-04-17_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n<div>\n    <p>\n        {{ pimcore_image(\"myImage\", {\n            \"title\": \"Drag your image here\",\n            \"width\": 400,\n            \"height\": 400,\n            \"thumbnail\": \"content\"\n        }) }}\n\n        {% if not editmode %}\n            {% set image = pimcore_image(\"myImage\") %}\n            {% if image.getHotspots() %}\n                {{ dump(image.getHotspots()) }}\n            {% endif %}\n            {% if image.getMarker() %}\n                {{ dump(image.getMarker()) }}\n            {% endif %}\n        {% endif %}\n    </p>\n</div>\n\n\n{# Predefined Data Templates; use \"hotspot\" instead of the \"marker\" key to add templates for hotspots #}\n{{ pimcore_image(\"image\", {\n    'thumbnail': 'my-thumbnail',\n    'predefinedDataTemplates': {\n        'marker': [\n            {\n                'menuName': 'Menu Name',\n                'name': 'Config Name',\n                'data': [\n                    {\n                        'name': 'my textfield',\n                        'type': 'textfield',\n                    }\n                ]\n            }\n        ]\n    }\n}) }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Nginx Server for Pimcore with SSL and HTTP/2\nDESCRIPTION: This snippet sets up the main Nginx server block for a Pimcore project. It configures SSL, defines the server name and root directory, and includes basic SSL settings.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/23_Installation_and_Upgrade/03_System_Setup_and_Hosting/02_Nginx_Configuration.md#2025-04-17_snippet_2\n\nLANGUAGE: nginx\nCODE:\n```\nserver {\n    listen 443 ssl http2;\n    listen [::]:443 ssl http2;\n\n    server_name YOUPROJECT.local;\n\n    root /var/www/pimcore/public;\n    index index.php;\n\n    # SSL Certificate and Key\n    ssl_certificate   /etc/letsencrypt/live/YOUPROJECT.local/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/YOUPROJECT.local/privkey.pem;\n\n    # ... (additional SSL configuration)\n}\n```\n\n----------------------------------------\n\nTITLE: Responding with 404 Status Code in PHP Controller for Pimcore\nDESCRIPTION: This PHP code snippet shows how to properly respond with a 404 status code in a Pimcore controller action. It checks for the existence and published status of a DataObject before throwing a NotFoundHttpException.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/02_MVC/04_Routing_and_URLs/02_Custom_Routes.md#2025-04-17_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse \\Symfony\\Component\\HttpKernel\\Exception\\NotFoundHttpException; \n\n// ...\n\npublic function testAction(Request $request): Response\n{\n    $object = DataObject::getById($request->query->getInt('id')); \n    if( !$object || ( !$object->isPublished() && !$this->editmode) ) {\n        throw new NotFoundHttpException('Not found');\n    }\n    \n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Placeholder Content Using Twig Set (Recommended)\nDESCRIPTION: Demonstrates the recommended method for setting placeholder content using Twig's 'set' tag and the 'pimcore_placeholder' function. This replaces the deprecated 'captureStart' and 'captureEnd' methods.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/02_MVC/02_Template/02_Template_Extensions/00_Placeholder.md#2025-04-17_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n{% set placeholderData %}\n    {% for datum in data %}\n        <div class=\"foo\">\n            <h2>{{ datum.title }}</h2>\n            <p>{{ datum.content }}</p>\n        </div>\n    {% endfor %}\n{% endset %}\n\n{% do pimcore_placeholder('foo').set(placeholderData) %}\n{{ pimcore_placeholder('foo') }}\n```\n\n----------------------------------------\n\nTITLE: Formatting Aggregated Content with Placeholders in Twig\nDESCRIPTION: Shows how to use the Placeholder extension to format aggregated content. It sets prefix, separator, indent, and postfix for the content, which will be rendered as an unordered list with custom formatting.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/02_MVC/02_Template/02_Template_Extensions/00_Placeholder.md#2025-04-17_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% do pimcore_placeholder('foo').setPrefix(\"<ul>\\n    <li>\")\n    .setSeparator(\"</li><li>\\n\")\n    .setIndent(4)\n    .setPostfix(\"</li></ul>\\n\")\n%}\n\n{# outputs as unordered list with pretty indentation #}\n{{ pimcore_placeholder('foo') }}\n```\n\n----------------------------------------\n\nTITLE: Restricting Video Types in Twig\nDESCRIPTION: Shows how to limit the available video source types for a video editable using the allowedTypes parameter.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/03_Documents/01_Editables/38_Video.md#2025-04-17_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n<section id=\"campaign_video\">\n    {{ pimcore_video(\"campaignVideo\", {\n            allowedTypes: [\"asset\", \"youtube\"]\n       })\n    }}\n</section>\n```\n\n----------------------------------------\n\nTITLE: Using the Vote Model in PHP\nDESCRIPTION: Example of creating and saving a new Vote instance using the implemented model.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/20_Extending_Pimcore/17_Custom_Persistent_Models.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$vote = new \\App\\Model\\Vote();\n$vote->setScore(3);\n$vote->setUsername('foobar!'.mt_rand(1, 999));\n$vote->save();\n```\n\n----------------------------------------\n\nTITLE: Setting Geopolygon Data in PHP for Pimcore\nDESCRIPTION: Demonstrates how to set Geopolygon data in Pimcore using PHP. It creates an array of GeoCoordinates objects representing the points of the polygon.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/01_Object_Classes/01_Data_Types/40_Geographic_Types.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Pimcore\\Model\\DataObject\\Data\\GeoCoordinates;\n\n$data = [\n    new GeoCoordinates(-33.464671118242684, 150.54428100585938),\n    new GeoCoordinates(-33.913733814316245, 150.73654174804688),\n    new GeoCoordinates(-33.9946115848146, 151.2542724609375)\n];\n$object->setPolygon($data);\n$object->save();\n```\n\n----------------------------------------\n\nTITLE: URL Slug Controller Example in Pimcore\nDESCRIPTION: Example of a controller handling URL slugs in Pimcore, showing parameter resolution and object handling.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/01_Object_Classes/01_Data_Types/65_Others.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Controller;\n\nuse Pimcore\\Controller\\FrontendController;\nuse Pimcore\\Model\\DataObject;\nuse Symfony\\Component\\HttpFoundation\\Request;\n\nclass ProductController extends FrontendController\n{\n    public function slugAction(Request $request, DataObject\\Foo $object, DataObject\\Data\\UrlSlug $urlSlug): array\n    {\n        // we use param resolver to the the matched data object ($object)\n        // $urlSlug contains the context information of the slug\n\n        return [\n            'product' => $object\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Block in PHP\nDESCRIPTION: Example of creating a new block with multiple elements including relations in Pimcore.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/01_Object_Classes/01_Data_Types/05_Blocks.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n/** \n * @var DataObject\\Data\\BlockElement $blockElement \n * \n * BlockElement( name, type, data )\n */\n $object = DataObject::getById(4);\n \n $data = [\n    \"input1\" => new BlockElement('input1', 'input', 'NewValue1'),\n    \"input2\" => new BlockElement('input2', 'input', 'NewValue2'),\n    \"myhref\" => new BlockElement('myhref', 'manyToManyRelation', [$object])\n    ];\n \n $blockElement = new BlockClass();\n $blockElement->setBlockElement1([$data]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Content Security Policy URLs in Pimcore\nDESCRIPTION: YAML configuration for adding additional allowed URLs to Content Security Policy directives in Pimcore admin interface. Demonstrates how to specify external sources for scripts and styles.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/26_Best_Practice/75_Security_Concept.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# config/config.yaml\npimcore_admin:\n    admin_csp_header:\n        additional_urls:\n            script-src:\n                - 'https://oreo.cat/scripts/meow.js' \n                - 'https://bagheera.cat/*'\n            style-src:\n                - 'https://oreo.cat/scripts/meow.css'\n```\n\n----------------------------------------\n\nTITLE: Implementing Translations in Twig Templates\nDESCRIPTION: Demonstrates how to use translation filters in Twig templates with variable interpolation. Shows translation of simple text and parameters using the trans filter.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/06_Multi_Language_i18n/04_Shared_Translations.md#2025-04-17_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n<div>\n    <address>&copy; {{ 'Copyright'|trans }}</address>\n    <a href=\"/imprint\">{{ 'Imprint'|trans }}</a>\n    {# variable interpolation, 'about' translates to 'About {{siteName}}' #}\n    <a href=\"/about\">{{ 'about'|trans({'{{siteName}}': siteName}) }}</a>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom View for Events in Pimcore YAML\nDESCRIPTION: This YAML snippet defines a custom view configuration for Events in Pimcore. It sets up the tree structure, root folder, context menu options, and includes a database join condition to filter events tagged with 'Salzburg'.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/01_Object_Classes/05_Class_Settings/21_Custom_View_Example.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n#var/config/custom-views/87705013-edb9-c9ec-0f5e-c3ee45ca4459.yaml\n\npimcore:\n    custom_views:\n        definitions:\n            87705013-edb9-c9ec-0f5e-c3ee45ca4459:\n                name: Events\n                treetype: object\n                position: left\n                rootfolder: /Events\n                showroot: false\n                sort: 0\n                treeContextMenu:\n                    object:\n                        items:\n                            add: true\n                            addFolder: true\n                            importCsv: true\n                            cut: true\n                            copy: true\n                            paste: true\n                            delete: true\n                            rename: true\n                            reload: true\n                            publish: true\n                            unpublish: true\n                            searchAndMove: true\n                            lock: true\n                            unlock: true\n                            lockAndPropagate: true\n                            unlockAndPropagate: true\n                            changeChildrenSortBy: true\n                classes: ''\n                joins: [\n                    {\n                        type: left,\n                        name: { ev: object_query_EV },\n                        condition: 'objects.id = ev.oo_id',\n                        columns: { ev: tags }\n                    }\n                ]\n                id: 87705013-edb9-c9ec-0f5e-c3ee45ca4459\n                icon: /bundles/pimcoreadmin/img/flat-color-icons/vip.svg\n                where: ''\n                having: 'ev.tags LIKE \"%%Salzburg%%\"'\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Report Adapter Factory in YAML\nDESCRIPTION: YAML configuration to register a custom report adapter factory as a service. This example uses the DefaultCustomReportAdapterFactory with a custom adapter class.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/18_Tools_and_Features/29_Custom_Reports.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napp.custom_report.adapter.factory.custom:\n   class: Pimcore\\Bundle\\CustomReportsBundle\\Tool\\Adapter\\DefaultCustomReportAdapterFactory\n   arguments:\n       - 'App\\CustomReport\\Adapter\\Custom'\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Layout Type to All Supported Layout Types\nDESCRIPTION: This JavaScript snippet adds a custom layout type to all currently supported layout types in the Class Definition editor. It iterates through the allowedTypes object and appends the new layout type to each array.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/20_Extending_Pimcore/13_Bundle_Developers_Guide/12_Adding_Object_ Layout_types.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfor (let layout in allowedTypes) {\n    if (allowedTypes[layout] !== undefined\n        && allowedTypes[layout].length > 0\n    ) {\n        allowedTypes[layout].push('myLayoutType')\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Workflow Notifications in YAML\nDESCRIPTION: YAML configuration example showing how to set up workflow notifications for transitions. Demonstrates configuring notification recipients (users/roles), notification channels (email/Pimcore), and email template settings.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/07_Workflow_Management/README.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntransitions:\n    myTransition:\n        options:\n            notificationSettings:\n                - \n                  condition: \"\"\n                  notifyUsers: ['admin']\n                  notifyRoles: ['projectmanagers', 'admins']\n                  channelType:\n                     - mail\n                     - pimcore_notification\n                  mailType: 'template'\n                  mailPath: '@PimcoreCore/Workflow/NotificationEmail/notificationEmail.html.twig'\n```\n\n----------------------------------------\n\nTITLE: Installing Extracted Bundles for Pimcore 11 via Composer\nDESCRIPTION: This bash command installs the extracted bundles that were separated from the core in Pimcore 11, such as the EcommerceFrameworkBundle and PersonalizationBundle.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/23_Installation_and_Upgrade/07_Updating_Pimcore/12_V10_to_V11.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require pimcore/system-info-bundle pimcore/file-explorer-bundle pimcore/personalization-bundle pimcore/google-marketing-bundle pimcore/web-to-print-bundle pimcore/ecommerce-framework-bundle pimcore/newsletter-bundle\n```\n\n----------------------------------------\n\nTITLE: Handling Document Parameters in Controller\nDESCRIPTION: PHP controller method showing how to access parameters passed to an included document and pass them to the template.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/02_MVC/02_Template/02_Template_Extensions/README.md#2025-04-17_snippet_11\n\nLANGUAGE: php\nCODE:\n```\npublic function otherDocumentAction(Request $request): array\n{\n    return ['parameterToPass' => $request->query->get('parameterToPass')];\n}\n```\n\n----------------------------------------\n\nTITLE: Generating PHP Backed Enum for Select Options in Pimcore\nDESCRIPTION: This snippet shows the PHP code generated for a Select Options configuration in Pimcore. It creates a backed enum with cases for each option, including methods for retrieving labels and values.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/01_Object_Classes/01_Data_Types/77_Select_Options.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Pimcore\\Model\\DataObject\\SelectOptions;\n\nenum TestOptions: string implements \\App\\SelectOptions\\DataInterface, \\App\\SelectOptions\\NameInterface\n{\n    use \\Pimcore\\Model\\DataObject\\SelectOptions\\Traits\\EnumGetValuesTrait;\n    use \\Pimcore\\Model\\DataObject\\SelectOptions\\Traits\\EnumTryFromNullableTrait;\n    use \\App\\SelectOptions\\DataTrait;\n    use \\App\\SelectOptions\\NameTrait;\n\n    case Ten = 'ten';\n    case Twenty = '20';\n    case Check = '√';\n    case C = '©';\n    case Multiple_Word_Value = 'Multiple Word Value';\n\n    public function getLabel(): string\n    {\n        return match ($this) {\n            self::Ten => '10',\n            self::Twenty => 'Twenty',\n            self::Check => '√',\n            self::C => '©',\n            self::Multiple_Word_Value => 'Multiple Word Value',\n        };\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Building and Rendering Navigation with Pimcore Twig Extensions\nDESCRIPTION: Example showing how to build and render a navigation structure using Pimcore's navigation helpers.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/02_MVC/02_Template/02_Template_Extensions/README.md#2025-04-17_snippet_14\n\nLANGUAGE: twig\nCODE:\n```\n{% set navigation = pimcore_build_nav({\n    active: document,\n    root: navRootDocument\n}) %}\n{{ pimcore_render_nav(navigation) }}\n\n{# you can also fetch the renderer instance and call custom render methods #}\n{% set renderer = pimcore_nav_renderer('menu') %}\n{{ renderer.render(navigation) }}\n```\n\n----------------------------------------\n\nTITLE: Accessing All Elements in FOR_ALL Selection Mode (PHP)\nDESCRIPTION: Illustrates how to access all selected elements in a step handler when using the FOR_ALL selection processing mode. This method is used within the AbstractAutomationActionHandler class to process multiple elements at once.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/19_Development_Tools_and_Details/08_Generic_Execution_Engine/01_Jobs_and_Jobruns/04_Step_Configuration.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\ngetSubjectsFromMessage()\n```\n\n----------------------------------------\n\nTITLE: Populating an Advanced Image Type in PHP\nDESCRIPTION: Shows how to create and populate an Advanced Image (Hotspotimage) object with an Asset image in PHP.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/01_Object_Classes/01_Data_Types/45_Image_Types.md#2025-04-17_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$image = Asset::getById(123);\n$advancedImage = new DataObject\\Data\\Hotspotimage();\n$advancedImage->setImage($image);\n// ...\n \n$object->setMyAdvancedImage($advancedImage);\n```\n\n----------------------------------------\n\nTITLE: Using Settings Store without Scope\nDESCRIPTION: Shows the alternative usage pattern of Settings Store without a scope parameter. Demonstrates basic operations for storing, retrieving, and deleting settings without scope organization.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/19_Development_Tools_and_Details/42_Settings_Store.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// store or update setting (id, data, type)\nSettingsStore::set('my-setting-id', 'this is some setting value', 'string');\n\n// load setting by id\n$setting = SettingsStore::get('my-setting-id');\n\n// load all settings ids for specific scope\n$ids = SettingsStore::getIdsByScope('bundle-settings-1');\n\n// delete setting\nSettingsStore::delete('my-setting-id');\n```\n\n----------------------------------------\n\nTITLE: Setting an Image Field Programmatically in PHP\nDESCRIPTION: Demonstrates how to set an object's image field programmatically by passing a Pimcore\\Model\\Asset\\Image to the setter method.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/01_Object_Classes/01_Data_Types/45_Image_Types.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$image = Asset\\Image::getByPath(\"/examples/example1.jpg\");\n$object->setImage($image);\n$object->save();\n```\n\n----------------------------------------\n\nTITLE: Disabling Fallback Languages for Localized Fields in Pimcore PHP\nDESCRIPTION: This code shows how to disable fallback language behavior for localized fields using the Localizedfield model.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/01_Object_Classes/01_Data_Types/50_Localized_Fields.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n\\Pimcore\\Model\\DataObject\\Localizedfield::setGetFallbackValues(false);\n```\n\n----------------------------------------\n\nTITLE: Accessing Localized Block Values in PHP\nDESCRIPTION: Demonstrates how to retrieve localized values from block entries in Pimcore.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/01_Object_Classes/01_Data_Types/05_Blocks.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n        $object = DataObject\\BlockClass::getById(48);\n        $blockItems = $object->getBlockElement1();\n        $firstBlockItem = $blockItems[0];\n        $localizedfields = $firstBlockItem[\"localizedfields\"]->getData();\n        // after that use it as you would to it with `Pimcore\\Model\\DataObject\\LocalizedField::getLocalizedValue`\n```\n\n----------------------------------------\n\nTITLE: Automating Migration Execution in Composer\nDESCRIPTION: JSON snippet for composer.json to automatically run all available migrations after 'composer update', including bundle and app-specific migrations.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/19_Development_Tools_and_Details/37_Migrations.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"post-update-cmd\": [\n    \"./bin/console doctrine:migrations:migrate\"\n]\n```\n\n----------------------------------------\n\nTITLE: Ordering Scripts with HeadScript Extension in Twig\nDESCRIPTION: Shows how to control the loading order of JavaScript files using append, prepend, and offsetSet methods. This is useful when managing dependencies between scripts.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/02_MVC/02_Template/02_Template_Extensions/03_HeadScript.md#2025-04-17_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{# Putting scripts in order #}\n\n{# place at a particular offset to ensure loaded last #}\n{% do pimcore_head_script().offsetSetFile(100, '/js/myfuncs.js') %}\n\n{# append uses next index, 101 #}\n{% do pimcore_head_script().appendFile('/js/jquery-plugin-xyz.js') %}\n\n{# but always have base prototype script load first: #}\n{% do pimcore_head_script().prependFile('/js/jquery.js') %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Maintenance Page with Bundle Resource\nDESCRIPTION: YAML configuration for customizing the maintenance page template using a bundle resource path. Defines the MaintenancePageListener service with appropriate event listener tags.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/20_Extending_Pimcore/15_Maintenance_Mode.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nPimcore\\Bundle\\CoreBundle\\EventListener\\MaintenancePageListener:\n    calls:\n        - [loadTemplateFromResource, ['@@App/Resources/misc/maintenance.html']]\n    tags:\n        - { name: kernel.event_listener, event: kernel.request, method: onKernelRequest, priority: 620 }\n```\n\n----------------------------------------\n\nTITLE: High Resolution Config in YAML\nDESCRIPTION: Configuration for setting maximum scaling factor for high-resolution images in Pimcore.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/04_Assets/03_Working_with_Thumbnails/01_Image_Thumbnails.md#2025-04-17_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n  pimcore:\n    assets:\n      thumbnails:\n        max_scaling_factor: 6.0\n```\n\n----------------------------------------\n\nTITLE: Directory Structure Migration Commands\nDESCRIPTION: Bash commands for restructuring the project directory layout according to Symfony Flex guidelines.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/23_Installation_and_Upgrade/07_Updating_Pimcore/10_V6_to_V10.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmv app/config/ config/\nmv web/ public/\nmv app/Resources/views/ templates/\nmv src/AppBundle/* src/\nmv public/app.php public/index.php\nmv app/AppKernel.php src/Kernel.php\n```\n\n----------------------------------------\n\nTITLE: Configuring Storage Locations in Pimcore YAML\nDESCRIPTION: YAML configuration for specifying write targets and storage directories for various Pimcore configuration types like image thumbnails, video thumbnails, document types, and other customizable settings.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/21_Deployment/03_Configuration_Environments.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\npimcore:\n    config_location:\n        image_thumbnails:\n            write_target:\n                type: 'symfony-config'\n                options:\n                    directory: '/var/www/html/var/config/image-thumbnails'\n        video_thumbnails:\n            write_target:\n                type: 'disabled'\n        document_types:\n            write_target:\n                type: 'disabled'\n        predefined_properties:\n            write_target:\n                type: 'settings-store'\n        predefined_asset_metadata:\n            write_target:\n                type: 'symfony-config'\n                options:\n                    directory: '/var/www/html/var/config/predefined_asset_metadata'\n        perspectives:\n            write_target:\n                type: 'symfony-config'\n                options:\n                    directory: '/var/www/html/var/config/perspectives'\n        custom_views:\n            write_target:\n                type: 'symfony-config'\n                options:\n                    directory: '/var/www/html/var/config/custom_views'\n        object_custom_layouts:\n            write_target:\n                type: 'symfony-config'\n                options:\n                    directory: '/var/www/html/var/config/object_custom_layouts'\n        select_options:\n            write_target:\n                type: 'symfony-config'\n                options:\n                    directory: '/var/www/html/var/config/select_options'\n```\n\n----------------------------------------\n\nTITLE: Navigation Implementation with Site Support in Twig\nDESCRIPTION: Navigation setup that handles multi-site configurations by detecting the current site and using its root document as the navigation starting point.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/03_Documents/03_Navigation.md#2025-04-17_snippet_10\n\nLANGUAGE: twig\nCODE:\n```\n{% set navStartNode = document.getProperty('navigation_root') %}\n{% if not navStartNode is instanceof('\\\\Pimcore\\\\Model\\\\Document\\\\Page')  %}\n    {% if pimcore_site_is_request() %}\n        {% set site = pimcore_site_current() %}\n        {% set navStartNode = site.getRootDocument() %}\n    {% else %}\n        {% set navStartNode = pimcore_document(1) %}\n    {% endif %}\n{% endif %}\n\n{% set navigation = pimcore_build_nav({active: document, root: navStartNode}) %}\n{{ pimcore_render_nav(navigation, 'menu', 'renderMenu', {\n    maxDepth: 1,\n    ulClass: {\n        'default': 'nav navbar-nav'\n    }\n}) }}\n```\n\n----------------------------------------\n\nTITLE: Activating Extracted Bundles in Pimcore 11 Config\nDESCRIPTION: This PHP code snippet shows how to activate the extracted bundles in the 'config/bundles.php' file for Pimcore 11, enabling various functionalities like e-commerce, personalization, and SEO.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/23_Installation_and_Upgrade/07_Updating_Pimcore/12_V10_to_V11.md#2025-04-17_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n\\Pimcore\\Bundle\\EcommerceFrameworkBundle\\PimcoreEcommerceFrameworkBundle::class => ['all' => true], \n\\Pimcore\\Bundle\\PersonalizationBundle\\PimcorePersonalizationBundle::class => ['all' => true],\n\\Pimcore\\Bundle\\GlossaryBundle\\PimcoreGlossaryBundle::class => ['all' => true],\n\\Pimcore\\Bundle\\SeoBundle\\PimcoreSeoBundle::class => ['all' => true],\n\\Pimcore\\Bundle\\SimpleBackendSearchBundle\\PimcoreSimpleBackendSearchBundle::class => ['all' => true],\n\\Pimcore\\Bundle\\CustomReportsBundle\\PimcoreCustomReportsBundle::class => ['all' => true],\n\\Pimcore\\Bundle\\GoogleMarketingBundle\\PimcoreGoogleMarketingBundle::class => ['all' => true],\n\\Pimcore\\Bundle\\ApplicationLoggerBundle\\PimcoreApplicationLoggerBundle::class => ['all' => true],\n\\Pimcore\\Bundle\\WebToPrintBundle\\PimcoreWebToPrintBundle::class => ['all' => true], \n\\Pimcore\\Bundle\\TinymceBundle\\PimcoreTinymceBundle::class => ['all' => true],\n\\Pimcore\\Bundle\\StaticRoutesBundle\\PimcoreStaticRoutesBundle::class => ['all' => true],\n\\Pimcore\\Bundle\\NewsletterBundle\\PimcoreNewsletterBundle::class => ['all' => true],\n\\Pimcore\\Bundle\\WordExportBundle\\PimcoreWordExportBundle::class => ['all' => true],\n\\Pimcore\\Bundle\\XliffBundle\\PimcoreXliffBundle::class => ['all' => true],\n\\Pimcore\\Bundle\\FileExplorerBundle\\PimcoreFileExplorerBundle::class => ['all' => true],\n\\Pimcore\\Bundle\\SystemInfoBundle\\PimcoreSystemInfoBundle::class => ['all' => true],\n```\n\n----------------------------------------\n\nTITLE: Referencing Environment Variables in Job Step Configuration (PHP)\nDESCRIPTION: Demonstrates how to reference environment variables within the configuration array of a JobStep. This allows for dynamic configuration based on environment settings.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/19_Development_Tools_and_Details/08_Generic_Execution_Engine/01_Jobs_and_Jobruns/04_Step_Configuration.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\njob_env('<env_variable_name>')\n```\n\n----------------------------------------\n\nTITLE: Passing Parameters to Included Documents\nDESCRIPTION: Example showing how to pass parameters from one template to another through the included document.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/02_MVC/02_Template/02_Template_Extensions/README.md#2025-04-17_snippet_10\n\nLANGUAGE: twig\nCODE:\n```\n{{ pimcore_inc('/some/other/document', { 'parameterToPass': parameterToPass }) }}\n```\n\n----------------------------------------\n\nTITLE: Using Parameters in Included Document Template\nDESCRIPTION: Example showing how to use parameters in the included document's Twig template.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/02_MVC/02_Template/02_Template_Extensions/README.md#2025-04-17_snippet_13\n\nLANGUAGE: twig\nCODE:\n```\n...\n{{ parameterToPass }}\n...\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Search Implementation in Pimcore\nDESCRIPTION: JavaScript code demonstrating how to register a custom search implementation using Pimcore's search implementation registry. Creates a new class that initializes on pimcoreReady event and registers the custom implementation.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/20_Extending_Pimcore/25_Implement_Your_Own_Search.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\npimcore.registerNS('pimcore.bundle.search');\n\npimcore.bundle.search = Class.create({\n    initialize: function () {\n        document.addEventListener(pimcore.events.pimcoreReady, this.pimcoreReady.bind(this));\n    },\n\n    pimcoreReady: function () {\n        this.searchRegistry = pimcore.globalmanager.get('searchImplementationRegistry');\n        this.searchRegistry.registerImplementation(new your.custom.search.implementation());\n    }\n)};\n```\n\n----------------------------------------\n\nTITLE: Initializing Product Workflow Configuration in YAML\nDESCRIPTION: Sets up the basic structure for a product workflow in Pimcore's config.yaml file. It defines the workflow type, label, and supported object class.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/07_Workflow_Management/05_Workflow_Tutorial.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\npimcore:\n    workflows:\n        workflow:\n            label: 'Product Workflow'\n            type: 'state_machine'\n            supports:\n            - 'Pimcore\\Model\\DataObject\\Product'\n            places:\n                #TODO\n            transitions:\n                #TODO\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Document Type in YAML Configuration\nDESCRIPTION: Shows how to register the custom 'Book' document type in the Pimcore configuration using YAML. This maps the 'book' type to the custom class.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/20_Extending_Pimcore/13_Bundle_Developers_Guide/08_Adding_Document_Types.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# /config/config.yaml\n\npimcore:\n    documents:\n        type_definitions:\n            map:\n                book: \n                    class: \\App\\Model\\Document\\Book\n```\n\n----------------------------------------\n\nTITLE: Updating Block Data in PHP\nDESCRIPTION: Shows how to update values within a block element in Pimcore.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/01_Object_Classes/01_Data_Types/05_Blocks.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n        // ... same as above ...\n        $firstBlockItem[\"input2\"]->setData(time());\n        $object->save();\n```\n\n----------------------------------------\n\nTITLE: Accessing Route Variables in a Controller\nDESCRIPTION: Example of how to access variables from custom routes in a controller action. Shows how to retrieve parameters from the request object that were defined as placeholders in the route pattern.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/02_MVC/04_Routing_and_URLs/02_Custom_Routes.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Controller;\n\nuse Pimcore\\Controller\\FrontendController;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\nclass NewsController extends FrontendController\n{\n    public function detailAction(Request $request): Response\n    {\n        $id = $request->query->getInt('news');\n        $text = $request->query->getString('text');\n        \n        // ...\n        return $this->render('news/detail.html.twig');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Base Workflow Template with Placeholders in YAML\nDESCRIPTION: Demonstrates the base workflow configuration with placeholders for state field name and locale. Includes places, transitions, and permissions configuration that can be referenced by other workflows.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/07_Workflow_Management/01_Configuration_Details/01_Placeholder_Example/README.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\npimcore:\n  workflows:\n    product_workflow_local_de: &local_workflow_reference\n        placeholders:\n          '%%stateFieldName%%': 'translationStateDe'\n          '%%locale%%': 'de'\n        enabled: true\n        label: \"Local Release Workflow\"\n        type: \"state_machine\"\n        supports: &local_workflow_supports_ref\n          - \\Pimcore\\Model\\DataObject\\Product\n        initial_markings: \"local_300_basic_data_pending\"\n        marking_store: &local_workflow_marking_store_ref\n          type: single_state\n          arguments:\n            -\n              %%stateFieldName%%\n        places: &local_workflow_places_ref\n\n            100_new:\n              label: \"Basic Data Pending from Global Workflow (%%locale%%)\"\n              visibleInHeader: true\n              color:  '#cddc39'\n              colorInverted: false\n              permissions:\n                - publish: true\n\n            local_300_basic_data_pending:\n              label: \"Pending\"\n              visibleInHeader: true\n              color:  '#cddc39'\n              colorInverted: false\n              permissions:\n                - publish: true\n\n             ...\n             \n        transitions: &local_workflow_transitions_ref\n            to_published:\n                to: local_400_published\n                from: [local_700_locked]\n                guard: is_fully_authenticated() and ('ROLE_PIMCORE_ADMIN' in role_names or 'ROLE_RECIPE_WORKFLOW_FINISH_DEVELOPMENT' in role_names)\n                options:\n                  label: 'Set to local_400_published'\n\n            ....\n```\n\n----------------------------------------\n\nTITLE: Configuring Filesystem Version Storage Adapter in YAML\nDESCRIPTION: YAML configuration to set up the FileSystemVersionStorageAdapter as the default storage mechanism for Pimcore versions. This adapter stores version data in the filesystem.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/18_Tools_and_Features/01_Versioning.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nPimcore\\Model\\Version\\Adapter\\VersionStorageAdapterInterface:\n    public: true\n    alias: Pimcore\\Model\\Version\\Adapter\\FileSystemVersionStorageAdapter\n\nPimcore\\Model\\Version\\Adapter\\FileSystemVersionStorageAdapter: ~\n```\n\n----------------------------------------\n\nTITLE: Defining Controller as Service in YAML for Pimcore Custom Routes\nDESCRIPTION: This YAML configuration defines a controller as a service for use in Pimcore custom routes. It sets up the DefaultController class and injects the service container.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/02_MVC/04_Routing_and_URLs/02_Custom_Routes.md#2025-04-17_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  app.controller.default:\n    class: App\\Controller\\DefaultController\n    calls:\n      - [setContainer, ['@service_container']]\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Page Router in Pimcore\nDESCRIPTION: YAML configuration for enabling and configuring the static page router in Pimcore, useful when using custom remote storage for static pages.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/19_Development_Tools_and_Details/20_Static_Page_Generator.md#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\npimcore:\n    documents:\n        static_page_router:\n            enabled: true\n            route_pattern: '@^/(en/Magazine|de/Magazin)@'\n```\n\n----------------------------------------\n\nTITLE: Deprecated Block Implementation in Twig\nDESCRIPTION: Shows the deprecated implementation of a Block Editable using iterator. This method will be removed in Pimcore 12.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/03_Documents/01_Editables/06_Block.md#2025-04-17_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n<!-- Deprecated! Will be removed in Pimcore 12 -->\n{% for i in pimcore_block(\"contentblock\").iterator %}\n    <h2>{{ pimcore_input(\"subline\") }}</h2>\n    {{ pimcore_wysiwyg(\"content\") }}\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Pimcore Write Targets\nDESCRIPTION: YAML configuration for setting up Pimcore write targets and storage directories for various resources.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/23_Installation_and_Upgrade/07_Updating_Pimcore/11_Preparing_for_V11.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\npimcore:\n  config_location:\n    image_thumbnails:\n      write_target:\n        type: 'symfony-config'\n        options:\n          directory: '/var/www/html/var/config/image-thumbnails'\n    document_types:\n      write_target:\n        type: 'settings-store'\n```\n\n----------------------------------------\n\nTITLE: Custom Navigation Partial Template Example in Twig\nDESCRIPTION: Basic custom navigation partial template that loops through pages and renders each as a menu element with custom HTML structure.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/03_Documents/03_Navigation.md#2025-04-17_snippet_9\n\nLANGUAGE: twig\nCODE:\n```\n{% for page in pages %}\n    <div class=\"my-menu-element\">\n        {{ pimcore_nav_renderer('menu').htmlify(page) | raw }}\n    </div>\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Flysystem Storage Adapters in Pimcore\nDESCRIPTION: Basic configuration for different storage locations in Pimcore including assets, thumbnails, versions, and admin resources using the local adapter.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/23_Installation_and_Upgrade/03_System_Setup_and_Hosting/03_File_Storage_Setup.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nflysystem:\n    storages:\n        pimcore.asset.storage:\n            adapter: 'local'\n            visibility: private\n            directory_visibility: public\n            options:\n                directory: '%kernel.project_dir%/public/var/assets'\n        pimcore.asset_cache.storage:\n            adapter: 'local'\n            visibility: private\n            options:\n                directory: '%kernel.project_dir%/public/var/tmp/asset-cache'\n        pimcore.thumbnail.storage:\n            adapter: 'local'\n            visibility: private\n            directory_visibility: public\n            options:\n                directory: '%kernel.project_dir%/public/var/tmp/thumbnails'\n        pimcore.version.storage:\n            adapter: 'local'\n            visibility: private\n            options:\n                directory: '%kernel.project_dir%/var/versions'\n        pimcore.recycle_bin.storage:\n            adapter: 'local'\n            visibility: private\n            options:\n                directory: '%kernel.project_dir%/var/recyclebin'\n        pimcore.admin.storage:\n            adapter: 'local'\n            visibility: private\n            options:\n                directory: '%kernel.project_dir%/var/admin'\n```\n\n----------------------------------------\n\nTITLE: Linking Back to Main Site using Twig in Pimcore\nDESCRIPTION: This snippet demonstrates how to create a link back to the main site using Twig's path function in Pimcore. It includes parameters for id, text, and site.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/02_MVC/04_Routing_and_URLs/02_Custom_Routes.md#2025-04-17_snippet_6\n\nLANGUAGE: twig\nCODE:\n```\n{{ path('news', {\n    id: 4,\n    text: \"some-text\",\n    site: 0\n}) }}\n```\n\n----------------------------------------\n\nTITLE: Using Link Generator in Twig Template with path() Function\nDESCRIPTION: Twig template example showing how to use the path() function to generate links for a list of car objects.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/01_Object_Classes/05_Class_Settings/30_Link_Generator.md#2025-04-17_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n<ul class=\"foo\">\n    {% for car in carList %}\n        <li><a href=\"{{ path(car) }}\">{{ car.getName() }}</a></li>\n    {% endfor %}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Configuring Pimcore Full Page Cache\nDESCRIPTION: YAML configuration for enabling Pimcore's full page cache with settings for lifetime, excluded cookies, and URL patterns to exclude from caching. This improves performance by serving cached responses for subsequent requests.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/23_Installation_and_Upgrade/03_System_Setup_and_Hosting/09_Performance_Guide.md#2025-04-17_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\npimcore:\n    full_page_cache:\n        enabled: true\n        lifetime: 120\n        exclude_cookie: 'pimcore_admin_sid'\n        exclude_patterns: '@^/test/de@'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Property Value in Twig Template\nDESCRIPTION: Demonstrates how to access a document property named 'hideNavigation' using Twig template syntax. This snippet shows the basic method for retrieving property values in Pimcore templates.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/18_Tools_and_Features/07_Properties.md#2025-04-17_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{# retrieve the value of a property named \"hideNavigation\" #}\n{% set hideNavigation = document.getProperty('hideNavigation') %}\n```\n\n----------------------------------------\n\nTITLE: Defining Bundle Services in YAML Configuration\nDESCRIPTION: YAML configuration file that defines services to be loaded by the bundle extension. This example shows how to define a custom service with its class specification.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/20_Extending_Pimcore/13_Bundle_Developers_Guide/01_Loading_Service_Definitions.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config/services.yaml\n\nservices:\n    my_custom_class:\n        class: MyBundle\\Custom\\Class\n```\n\n----------------------------------------\n\nTITLE: Manual Area Brick Service Definition in YAML\nDESCRIPTION: YAML configuration for manually registering an area brick as a service with dependencies. This example shows how to inject a logger service and tag the brick for Pimcore registration.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/03_Documents/01_Editables/02_Areablock/02_Bricks.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# a service.yaml file defining services\nservices:\n    App\\Document\\Areabrick\\Iframe:\n        arguments: ['@logger']\n        tags:\n            - { name: pimcore.area.brick, id: iframe }\n```\n\n----------------------------------------\n\nTITLE: Configuring Admin Translation Language Mapping in YAML\nDESCRIPTION: This YAML configuration snippet shows how to override the language of admin translations in the editmode of documents. It maps Croatian (hr) to English (en) and Chinese (zh) to Simplified Chinese (zh_Hans).\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/06_Multi_Language_i18n/07_Admin_Translations.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config/config.yaml\npimcore:\n    translations:\n        admin_translation_mapping:\n            'hr': 'en'\n            'zh': 'zh_Hans'\n```\n\n----------------------------------------\n\nTITLE: Using Param Resolver with Symfony Routing\nDESCRIPTION: Example showing how to use Pimcore's param resolver to automatically convert data object IDs in the request to actual objects. This code demonstrates type hinting with Symfony routing attributes.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/02_MVC/04_Routing_and_URLs/02_Custom_Routes.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n    use Symfony\\Component\\HttpFoundation\\Request;\n    use Symfony\\Component\\Routing\\Attribute\\Route;\n    ....\n\n     #[Template('/news/test')]\n     #[Route('/news/{news}')]\n    public function detailAction(DataObject\\News $news): array\n    {\n        return [\n            'news' => $news\n        ];\n    }\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of HeadStyle in Twig\nDESCRIPTION: Shows how to append a new style tag using the HeadStyle extension. This is the simplest way to add inline styles to your Pimcore template.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/02_MVC/02_Template/02_Template_Extensions/04_HeadStyle.md#2025-04-17_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% do pimcore_head_style().appendStyle(styles) %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Version Stack Trace Disable in YAML\nDESCRIPTION: YAML configuration to disable stack trace generation for versions of assets, documents, and objects in Pimcore. This can be used to reduce the amount of data stored for each version.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/18_Tools_and_Features/01_Versioning.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\npimcore:\n    assets:\n        versions:\n            disable_stack_trace: true\n    documents:\n        versions:\n            disable_stack_trace: true\n    objects:\n        versions:\n            disable_stack_trace: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Twig Sandbox Security Policy in YAML\nDESCRIPTION: YAML configuration for allowing specific tags, filters, and functions in the Twig sandbox for email template rendering.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/19_Development_Tools_and_Details/25_Email_Framework/README.md#2025-04-17_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n    pimcore:\n          templating_engine:\n              twig:\n                sandbox_security_policy:\n                  tags: ['if']\n                  filters: ['upper']\n                  functions: ['include', 'path']\n```\n\n----------------------------------------\n\nTITLE: Configuring Appearance & Branding Settings Storage in Pimcore 11\nDESCRIPTION: This YAML configuration sets up the storage location for Appearance & Branding settings in Pimcore 11, using the settings store for both reading and writing.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/23_Installation_and_Upgrade/07_Updating_Pimcore/12_V10_to_V11.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\npimcore_admin:\n    config_location:\n        admin_system_settings:\n            write_target:\n                type: 'settings-store'\n            read_target:\n                type: 'settings-store'\n```\n\n----------------------------------------\n\nTITLE: Configuring State Table Marking Store in YAML\nDESCRIPTION: Default marking store configuration that stores place information in the element_workfow_state table. Best suited for Assets and Documents.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/07_Workflow_Management/02_Marking_Stores.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n   marking_store:\n      type: state_table\n```\n\n----------------------------------------\n\nTITLE: Configuring Pimcore IntlFormatter Service\nDESCRIPTION: YAML configuration example showing how to customize the IntlFormatter service by overriding default currency patterns for different locales.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/06_Multi_Language_i18n/09_Formatting_Service.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n    # Formatting service for dates, times and numbers\n    Pimcore\\Localization\\IntlFormatter:\n        calls:\n            - [setCurrencyFormat, ['en', '¤ #,##0.0']]\n            - [setCurrencyFormat, ['de', '#,##0.00 ¤¤']]\n```\n\n----------------------------------------\n\nTITLE: Configuring Expression Support Strategy for Workflow in YAML\nDESCRIPTION: Shows how to use an expression-based support strategy in YAML configuration. This allows applying the workflow to entities only under certain conditions, defined by a Symfony expression.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/07_Workflow_Management/03_Support_Strategies.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsupport_strategy:\n    type: expression\n    arguments:\n        - Pimcore\\Model\\DataObject\\Product\n        - \"subject.getProductType() == 'article'\"\n```\n\n----------------------------------------\n\nTITLE: Database Collation Update SQL Queries\nDESCRIPTION: SQL queries to update database and table collations from utf8mb4_general_ci to utf8mb4_unicode_520_ci. Includes statements for changing database collation, table collation, and column collation.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/23_Installation_and_Upgrade/09_Upgrade_Notes/README.md#2025-04-17_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n-- Change database collation\nALTER DATABASE `your_database_name` COLLATE utf8mb4_unicode_520_ci;\n-- For tables\nSELECT CONCAT('ALTER TABLE `', TABLE_NAME, '` COLLATE utf8mb4_unicode_520_ci;') \nFROM INFORMATION_SCHEMA.TABLES \nWHERE TABLE_SCHEMA = 'your_database_name' \n  AND TABLE_COLLATION = 'utf8mb4_general_ci'\nORDER BY TABLE_NAME;    \n-- For columns\nSELECT CONCAT('ALTER TABLE `', TABLE_NAME, '` CHANGE `', COLUMN_NAME, '` `', COLUMN_NAME, '` ', COLUMN_TYPE, ' CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci;')\nFROM INFORMATION_SCHEMA.COLUMNS\nWHERE TABLE_SCHEMA = 'your_database_name'\n  AND COLLATION_NAME = 'utf8mb4_general_ci'\nORDER BY TABLE_NAME;\n```\n\n----------------------------------------\n\nTITLE: Configuring Primary/Replica Database Connection in YAML\nDESCRIPTION: YAML configuration for setting up primary/replica database connections in Doctrine DBAL. Specifies the custom connection wrapper class and defines replica connection parameters.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/26_Best_Practice/55_Primary-Replica_Database_Connection.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndoctrine:\n    dbal:\n        connections:\n            default:\n                wrapper_class: '\\App\\Db\\Connection'\n                replicas:\n                    replica1:\n                          host: 'replica1'\n                          port: 3306\n                          dbname: dbname\n                          user: username\n                          password: password\n                          charset: UTF8MB4\n```\n\n----------------------------------------\n\nTITLE: Safe Value Modification with Inheritance in Pimcore\nDESCRIPTION: Example showing how to safely modify inherited values by cloning objects before modification to prevent affecting parent objects.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/01_Object_Classes/05_Class_Settings/25_Inheritance.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$silverCar = Car::getById(262);\nif ($silverCar instanceof Car) {\n    $location = $silverCar->getLocation();\n    if($location === null) {\n        throw new RuntimeException(\"...\");\n    }\n    $locationClone = clone $location;\n    $locationClone->setLongitude(99);\n    $locationClone->setLatitude(99);\n    $silverCar->setLocation($locationClone);\n    $silverCar->save();    \n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Symfony Messenger Transports with Failed Jobs Handler\nDESCRIPTION: YAML configuration for setting up Symfony Messenger transports including a dedicated failed jobs queue. Demonstrates configuration for both Doctrine and RabbitMQ transport options with failure handling mechanisms.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/01_Getting_Started/02_Advanced_Installation_Topics/01_Symfony_Messenger.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nframework:\n    messenger:\n        transports:\n            pimcore_failed_jobs:\n                dsn: \"doctrine://default?queue_name=pimcore_failed_jobs&table_name=messenger_messages_pimcore_failed\"\n\n            pimcore_core:\n                dsn: \"doctrine://default?queue_name=pimcore_core\"\n                # For RabbitMQ (recommended) use this as example:\n                # dsn: \"amqp://rabbitmq:5672/%2f/pimcore_core\"\n                failure_transport: pimcore_failed_jobs\n```\n\n----------------------------------------\n\nTITLE: Creating PHP Asset Class for InDesign in Pimcore\nDESCRIPTION: Defines a custom InDesign asset class that extends Pimcore's base Asset model. This class sets the asset type to 'indesign' and should be placed in the App\\Model\\Asset namespace.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/20_Extending_Pimcore/13_Bundle_Developers_Guide/07_Adding_Asset_Types.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// src/Model/Asset/InDesign.php\n\nnamespace App\\Model\\Asset;\n\nclass InDesign extends \\Pimcore\\Model\\Asset\n{\n    protected string $type = 'indesign';\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Temporary Files in Pimcore using PHP\nDESCRIPTION: This snippet shows how to delete temporary files created during processing in Pimcore before the script ends.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/05_External_System_Interaction.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n\\Pimcore::deleteTemporaryFiles();\n```\n\n----------------------------------------\n\nTITLE: Enabling Auto-Create Redirects in Pimcore SEO YAML Configuration\nDESCRIPTION: This YAML configuration enables automatic creation of redirects when moving or renaming documents in Pimcore for SEO and user experience purposes.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/02_MVC/04_Routing_and_URLs/04_Redirects.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\npimcore_seo:\n    redirects:\n        auto_create_redirects: true\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Editable in Pimcore Configuration\nDESCRIPTION: This YAML configuration snippet shows how to register the custom Markdown editable in the Pimcore editable map. This step is crucial for Pimcore to recognize and use the custom editable.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/20_Extending_Pimcore/13_Bundle_Developers_Guide/09_Adding_Document_Editables.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# /config/config.yaml\n\npimcore:\n    documents:\n        editables:\n            map:\n                markdown: \\App\\Model\\Document\\Editable\\Markdown\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Checkbox in Twig with Pimcore\nDESCRIPTION: Simple example showing how to add a checkbox editable element in a Twig template using Pimcore's checkbox helper function.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/03_Documents/01_Editables/08_Checkbox.md#2025-04-17_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ pimcore_checkbox(\"myCheckbox\") }}\n```\n\n----------------------------------------\n\nTITLE: Adding Conditional Styles with HeadStyle in Twig\nDESCRIPTION: Demonstrates how to add styles with conditional comments using the HeadStyle extension. This is useful for targeting specific browsers or versions.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/02_MVC/02_Template/02_Template_Extensions/04_HeadStyle.md#2025-04-17_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% do pimcore_head_style().appendStyle(styles, {'conditional': 'lt IE 11'}) %}\n```\n\n----------------------------------------\n\nTITLE: Rendering Title Segments in Twig\nDESCRIPTION: This snippet shows how to render the complete title with all segments in a Twig template. The output will combine all previously added title segments with the configured separator.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/02_MVC/02_Template/02_Template_Extensions/05_HeadTitle.md#2025-04-17_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{{ pimcore_head_title() }}\n{# renders My first part / The 2nd part / My Pimcore Website #}\n```\n\n----------------------------------------\n\nTITLE: SettingsStore Installer Implementation\nDESCRIPTION: PHP implementation of a SettingsStore-aware installer with installation state management and migration handling.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/20_Extending_Pimcore/13_Bundle_Developers_Guide/05_Pimcore_Bundles/01_Installers.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Pimcore\\Bundle\\DummyBundle;\n\nuse Pimcore\\Bundle\\DummyBundle\\Migrations\\Version20210304111225;\nuse Pimcore\\Extension\\Bundle\\Installer\\SettingsStoreAwareInstaller;\n\nclass Installer extends SettingsStoreAwareInstaller\n{\n    public function getLastMigrationVersionClassName(): ?string\n    {\n        // return fully qualified classname of last migration that should be marked as migrated during install\n        return Version20210304111225::class;\n    }\n\n    public function install(): void\n    {\n        //do your install stuff   \n\n        $this->markInstalled();\n        //or call parent::install();     \n    }\n\n    public function uninstall(): void\n    {\n        //do your uninstall stuff\n\n        $this->markUninstalled();\n        //or call parent::uninstall();   \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Asset Protection Routes in YAML\nDESCRIPTION: Route configuration for handling protected asset access through a custom controller action.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/04_Assets/07_Restricting_Public_Asset_Access.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nasset_protect:\n    path: /protected/{path}\n    defaults: { _controller: App\\Controller\\MyAssetController::protectedAssetAction }\n    requirements:\n        path: '.*'\n        \ncache_buster_asset_protect:\n    path: /cache-buster-{id}/protected/{path}\n    defaults: { _controller: App\\Controller\\MyAssetController:protectedAssetAction }\n    requirements:\n        id: '\\d+'\n        path: '.*'\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Support Strategy in PHP\nDESCRIPTION: Shows an example implementation of a custom support strategy in PHP. This class needs to implement the WorkflowSupportStrategyInterface and be registered in the service container.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/07_Workflow_Management/03_Support_Strategies.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\Workflow;\n\nuse Symfony\\Component\\Workflow\\SupportStrategy\\WorkflowSupportStrategyInterface;\nuse Symfony\\Component\\Workflow\\WorkflowInterface;\n\nclass SupportStrategy implements WorkflowSupportStrategyInterface\n{\n    public function supports(WorkflowInterface $workflow, object $subject): bool\n    {\n        if ($subject instanceof \\Pimcore\\Model\\DataObject\\Test) {\n            return true;\n        }\n\n        return false;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS S3 Client for Pimcore\nDESCRIPTION: Configuration for setting up AWS S3 client service with required credentials and endpoint information.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/23_Installation_and_Upgrade/03_System_Setup_and_Hosting/03_File_Storage_Setup.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n    assets_s3:\n        class: 'Aws\\S3\\S3Client'\n        arguments:\n            -  endpoint: 'https://s3.eu-central-1.amazonaws.com'\n               region: 'eu-central-1'\n               version: 'latest'\n               credentials:\n                   key: '%env(S3_STORAGE_KEY)%'\n                   secret: '%env(S3_STORAGE_SECRET)%'\n```\n\n----------------------------------------\n\nTITLE: Using the instanceof Test in Pimcore Twig Templates\nDESCRIPTION: Example of using the instanceof Twig test to check if an object is an instance of a specific class, particularly useful for conditional handling of different asset types.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/02_MVC/02_Template/README.md#2025-04-17_snippet_7\n\nLANGUAGE: twig\nCODE:\n```\n{% if image is instanceof('\\\\Pimcore\\\\Model\\\\Asset\\\\Image') %}\n    {# ... #}\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Pimcore Permissions for Admin and Non-Admin Users in YAML\nDESCRIPTION: This YAML configuration sets different permissions for Pimcore admin users and other users. Admins are allowed to publish and delete objects, while these actions are suppressed for non-admin users.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/07_Workflow_Management/04_Permissions.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n   places:\n      closed:\n         permissions:\n           - condition: is_fully_authenticated() and 'ROLE_PIMCORE_ADMIN' in role_names\n             publish: true\n             delete: true\n           - publish: false\n             delete: false\n```\n\n----------------------------------------\n\nTITLE: Configuring Pimcore Workflow in YAML\nDESCRIPTION: Comprehensive YAML configuration schema for Pimcore workflows, including place definitions, transitions, permissions, and additional settings. The configuration allows for defining workflow states, transitions between states, permission rules, and custom UI elements.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/07_Workflow_Management/01_Configuration_Details/README.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\npimcore: \n    workflows:\n\n        # Prototype\n        name:\n            # Placeholder values in this workflow configuration (locale: \"%%locale%%\") will be replaced by the given placeholder value (eg. \"de_AT\")\n            placeholders:\n                # Example:\n                placeholders:\n                    %%locale%%:          de_AT\n\n            # Can be used to enable or disable the workflow.\n            enabled:              true\n\n            # When multiple custom view or permission settings from different places in different workflows are valid, the workflow with the highest priority will be used.\n            priority:             0\n\n            # Will be used in the backend interface as nice name for the workflow. If not set the technical workflow name will be used as label too.\n            label:                ~\n\n            # Enable default audit trail feature provided by Symfony. Take a look at the Symfony docs for more details.\n            audit_trail:\n                enabled:              false\n\n            # A workflow with type \"workflow\" can handle multiple places at one time whereas a state_machine provides a finite state_machine (only one place at one time). Take a look at the Symfony docs for more details.\n            type:                 ~ # One of \"workflow\"; \"state_machine\"\n\n            # Handles the way how the state/place is stored. If not defined \"state_table\" will be used as default. Take a look at the marking store section of the Pimcore workflow docs for a description of the different types.\n            marking_store:\n                type:                 ~ # One of \"multiple_state\"; \"single_state\"; \"state_table\"; \"data_object_multiple_state\"; \"data_object_splitted_state\"\n                arguments:            []\n                service:              ~\n\n            # List of supported entity classes. Take a look at the Symfony docs for more details.\n            supports:\n\n                # Example:\n                - \\Pimcore\\Model\\DataObject\\Product\n\n            # Can be used to implement a special logic which subjects are supported by the workflow. For example only products matching certain criteria. Take a look at the support strategies page of the Pimcore workflow docs for more details.\n            support_strategy:\n\n                # Examples:\n                type:                expression\n                arguments:\n                    - \\Pimcore\\Model\\DataObject\\Product\n                    - subject.getProductType() == \"article\" and is_fully_authenticated() and \"ROLE_PIMCORE_ADMIN\" in role_names\n\n                # Type \"expression\": a symfony expression to define a criteria.\n                type:                 ~ # One of \"expression\"\n                arguments:            []\n\n                # Define a custom service to handle the logic. Take a look at the Symfony docs for more details.\n                service:              ~\n\n            # Possibility to add multiple initial places.\n            initial_markings:     []\n\n            places:\n\n                # Example:\n                places:\n                    closed:\n                        label:               close product\n                        permissions:\n                            -\n                                condition:           is_fully_authenticated() and 'ROLE_PIMCORE_ADMIN' in role_names\n                                modify:\n                            -\n                                modify:\n                                objectLayout:        2\n\n                # Prototype\n                -\n\n                    # Nice name which will be used in the Pimcore backend.\n                    label:                ~\n\n                    # Title/tooltip for this place when it is displayed in the header of the Pimcore element detail view in the backend.\n                    title:                ''\n\n                    # Color of the place which will be used in the Pimcore backend.\n                    color:                '#bfdadc'\n\n                    # If set to true the color will be used as border and font color otherwise as background color.\n                    colorInverted:        false\n\n                    # If set to false, the place will be hidden in the header of the Pimcore element detail view in the backend.\n                    visibleInHeader:      true\n                    permissions:\n\n                        # Prototype\n                        -\n\n                            # A symfony expression can be configured here. The first set of permissions which are matching the condition will be used.\n                            condition:            ~\n\n                            # save permission as it can be configured in Pimcore workplaces\n                            save:                 ~\n\n                            # publish permission as it can be configured in Pimcore workplaces\n                            publish:              ~\n\n                            # unpublish permission as it can be configured in Pimcore workplaces\n                            unpublish:            ~\n\n                            # delete permission as it can be configured in Pimcore workplaces\n                            delete:               ~\n\n                            # rename permission as it can be configured in Pimcore workplaces\n                            rename:               ~\n\n                            # view permission as it can be configured in Pimcore workplaces\n                            view:                 ~\n\n                            # settings permission as it can be configured in Pimcore workplaces\n                            settings:             ~\n\n                            # versions permission as it can be configured in Pimcore workplaces\n                            versions:             ~\n\n                            # properties permission as it can be configured in Pimcore workplaces\n                            properties:           ~\n\n                            # a short hand for save, publish, unpublish, delete + rename\n                            modify:               ~\n\n                            # if set, the user will see the configured custom data object layout\n                            objectLayout:         ~\n            transitions:          # Required\n\n                # Example:\n                close_product:\n                    from:                open\n                    to:                  closed\n                    options:\n                        label:               close product\n                        notes:\n                            commentEnabled:      1\n                            commentRequired:     1\n                            additionalFields:\n                                -\n                                    name:                accept\n                                    title:               accept terms\n                                    required:            1\n                                    fieldType:           checkbox\n                                -\n                                    name:                select\n                                    title:               please select a type\n                                    setterFn:            setSpecialWorkflowType\n                                    fieldType:           select\n                                    fieldTypeSettings:\n                                        options:\n                                            -\n                                                key:                 Option A\n                                                value:               a\n                                            -\n                                                key:                 Option B\n                                                value:               b\n                                            -\n                                                key:                 Option C\n                                                value:               c\n\n                # Prototype\n                -\n                    name:                 ~ # Required\n\n                    # An expression to block the transition\n                    guard:                ~ # Example: is_fully_authenticated() and 'ROLE_JOURNALIST' in role_names and subject.getTitle() == 'My first article'\n                    from:                 []\n                    to:                   []\n                    options:\n\n                        # Nice name for the Pimcore backend.\n                        label:                ~\n                        notes:\n\n                            # If enabled a detail window will open when the user executes the transition. In this detail view the user be asked to enter a \"comment\". This comment then will be used as comment for the notes/events feature.\n                            commentEnabled:       false\n\n                            # Set this to true if the comment should be a required field.\n                            commentRequired:      false\n\n                            # Can be used for data objects. The comment will be saved to the data object additionally to the notes/events through this setter function.\n                            commentSetterFn:      ~\n\n                            # Can be used for data objects to prefill the comment field with data from the data object.\n                            commentGetterFn:      ~\n\n                            # Set's the type string in the saved note.\n                            type:                 'Status update'\n\n                            # An optional alternative \"title\" for the note, if blank the actions transition result is used.\n                            title:                ~\n\n                            # Add additional field to the transition detail window.\n                            additionalFields:\n```\n\n----------------------------------------\n\nTITLE: Modifying Link Generator Method Signature for Mockup Support\nDESCRIPTION: Alternative method signature for the generate method to support mockups or arbitrary objects by using a more generic object type hint.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/01_Object_Classes/05_Class_Settings/30_Link_Generator.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n    public function generate(object $object, array $params = []): string\n    {\n        //...\n    }\n```\n\n----------------------------------------\n\nTITLE: Example Functional Test Implementation\nDESCRIPTION: Functional test class demonstrating front page testing using Codeception's Symfony module capabilities.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/19_Development_Tools_and_Details/29_Testing/01_Application_Testing.md#2025-04-17_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Tests\\Functional\\App;\n\nuse Tests\\FunctionalTester;\n\nclass IndexPageCest\n{\n    public function testFrontpage(FunctionalTester $I): void\n    {\n        $I->amOnPage('/');\n        $I->canSeeResponseCodeIs(200);\n        $I->amOnRoute('document_1');\n\n        $I->seeElement('#site #logo a', ['href' => 'http://www.pimcore.com/']);\n        $I->seeElement('#site #logo img', ['src' => '/bundles/pimcoreadmin/img/logo-claim-gray.svg']);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom PHP Log Handler in Symfony\nDESCRIPTION: YAML configuration for changing the default PHP log file location in Pimcore using Monolog handler.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/19_Development_Tools_and_Details/07_Logging.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nmonolog:\n    handlers:\n        error:\n            type: stream\n            path: \"%kernel.logs_dir%/own_php.log\"\n            level: error\n```\n\n----------------------------------------\n\nTITLE: Configuring Email Settings in YAML\nDESCRIPTION: Example YAML configuration for email settings in Pimcore, including sender and return information.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/19_Development_Tools_and_Details/25_Email_Framework/README.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\npimcore:\n    email:\n        sender:\n            name: 'Pimcore Demo'\n            email: demo@pimcore.com\n        return:\n            name: ''\n            email: ''\n```\n\n----------------------------------------\n\nTITLE: Configuring Data Object Multiple State Marking Store in YAML\nDESCRIPTION: Configuration for storing multiple workflow states in a data object multiselect field.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/07_Workflow_Management/02_Marking_Stores.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n   marking_store:\n      type: data_object_multiple_state\n      arguments:\n         - workflowState\n```\n\n----------------------------------------\n\nTITLE: Basic Controller Usage of Application Logger\nDESCRIPTION: Example of using ApplicationLogger in a Pimcore controller with dependency injection and container fetching.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/18_Tools_and_Features/17_Application_Logger.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Controller;\n\nuse Pimcore\\Bundle\\ApplicationLoggerBundle\\ApplicationLogger;\nuse Pimcore\\Controller\\FrontendController;\n\nclass TestController extends FrontendController\n{\n    public function testAction(ApplicationLogger $logger): void\n    {\n        $logger->error('Your error message');\n        $logger->alert('Your alert');\n        $logger->debug('Your debug message', ['foo' => 'bar']);\n    }\n    \n    public function anotherAction(): void\n    {\n        $logger = $this->get(ApplicationLogger::class);\n        $logger->error('Your error message');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Data Object Splitted State Marking Store in YAML\nDESCRIPTION: Configuration for storing different workflow states in different Pimcore data object attributes using place-to-attribute mapping.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/07_Workflow_Management/02_Marking_Stores.md#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n   marking_store:\n       type: data_object_splitted_state\n       arguments:\n           - text_open: workflowStateText\n             text_finished: workflowStateText\n             text_released: workflowStateText\n\n             images_open: workflowStateImages\n             images_finished: workflowStateImages\n             images_released: workflowStateImages\n```\n\n----------------------------------------\n\nTITLE: Generated PHP Class for Car Data Object in Pimcore\nDESCRIPTION: This code snippet shows the generated PHP class for the Car data object after implementing the TransmissionInterface and using the TransmissionTrait. It demonstrates how Pimcore integrates the interface and trait into the data object class.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/01_Object_Classes/05_Class_Settings/26_Interfaces_and_traits.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// var/classes/DataObject/Car.php\n...\nclass Car extends \\App\\Model\\Product\\AbstractProduct implements \\App\\Model\\Product\\TransmissionInterface {\n\nuse \\App\\Traits\\TransmissionTrait;\n\nprotected $classId = \"CAR\";\nprotected $className = \"Car\";\n...\n```\n\n----------------------------------------\n\nTITLE: PHPUnit Configuration\nDESCRIPTION: XML configuration for PHPUnit testing setup, including test suite definition and environment settings.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/19_Development_Tools_and_Details/29_Testing/01_Application_Testing.md#2025-04-17_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:noNamespaceSchemaLocation=\"https://schema.phpunit.de/7.4/phpunit.xsd\"\n         bootstrap=\"vendor/autoload.php\"\n         colors=\"true\">\n    <testsuite name=\"default\">\n        <directory suffix=\"Test.php\">tests</directory>\n    </testsuite>\n\n    <filter>\n        <allowlist processUncoveredFilesFromAllowlist=\"true\">\n            <directory suffix=\".php\">src</directory>\n        </allowlist>\n    </filter>\n\n    <php>\n        <env name=\"SYMFONY_PHPUNIT_VERSION\" value=\"7.4\" />\n    </php>\n</phpunit>\n```\n\n----------------------------------------\n\nTITLE: Implementing Age Filter for Sitemap Entries\nDESCRIPTION: Custom filter implementation that excludes elements older than a specified number of years from the sitemap.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/18_Tools_and_Features/39_Sitemaps.md#2025-04-17_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Sitemaps\\Filter;\n\nuse Pimcore\\Model\\Element\\ElementInterface;\nuse Pimcore\\Bundle\\SeoBundle\\Sitemap\\Element\\FilterInterface;\nuse Pimcore\\Bundle\\SeoBundle\\Sitemap\\Element\\GeneratorContextInterface;\n\nclass AgeFilter implements FilterInterface\n{\n    private int $maxYears;\n\n    public function __construct(int $maxYears = 1)\n    {\n        $this->maxYears = $maxYears;\n    }\n\n    public function canBeAdded(ElementInterface $element, GeneratorContextInterface $context): bool\n    {\n        $modicationDate = \\DateTimeImmutable::createFromFormat('U', (string)$element->getModificationDate());\n        $now            = new \\DateTimeImmutable();\n\n        $diff = $modicationDate->diff($now);\n\n        // exclude element if years is more than the configured amount\n        return $diff->y < $this->maxYears;\n    }\n\n    public function handlesChildren(ElementInterface $element, GeneratorContextInterface $context): bool\n    {\n        // not matching the age constraint does not mean not handling children\n        return true;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Write Target for System Settings in Pimcore YAML\nDESCRIPTION: This YAML snippet shows how to set the write target for system settings to the settings store in Pimcore.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/18_Tools_and_Features/25_System_Settings.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\npimcore:\n    config_location:\n        system_settings:\n            write_target:\n                type: 'settings-store'\n```\n\n----------------------------------------\n\nTITLE: Complete Security Configuration\nDESCRIPTION: Final YAML configuration combining password hasher factory and firewall settings with HTTP basic authentication.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/19_Development_Tools_and_Details/10_Security_Authentication/01_Authenticate_Pimcore_Objects.md#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\npimcore:\n    security:\n        # the password hasher factory as defined in services.yaml\n        password_hasher_factories:\n            App\\Model\\DataObject\\User: website_demo.security.password_hasher_factory\n\nsecurity:\n    providers:\n        # the user provider as defined in services.yaml\n        demo_cms_provider:\n            id: website_demo.security.user_provider\n\n    firewalls:\n        # demo_cms firewall is valid for the whole site\n        demo_cms_fw:\n            # the provider defined above\n            provider: demo_cms_provider\n            http_basic: ~\n```\n\n----------------------------------------\n\nTITLE: Backend Controller for External ID Lookup in Pimcore\nDESCRIPTION: Symfony controller that handles external ID lookup requests. Accepts an external ID parameter and returns the corresponding Pimcore object ID if found.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/26_Best_Practice/70_Open_By-External_Id.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Controller\\Admin;\n\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\Routing\\Attribute\\Route;\n\nclass BackendController\n{\n    #[Route('/admin/find-by-external-id')]\n    public function findByWordpressId(Request $request): JsonResponse\n    {\n        if ($id = $request->query->getInt('external-id')) {\n            if($object = MyObject::getByExternalId($id)) {\n                return new JsonResponse($object->getId());\n            }\n        }\n\n        return new JsonResponse(0);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Rebuilding Classes, ObjectBricks, FieldCollections, and CustomLayouts in Pimcore 11\nDESCRIPTION: This bash command executes a migration to rebuild classes, objectBricks, fieldCollections, and customLayouts in Pimcore 11.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/23_Installation_and_Upgrade/07_Updating_Pimcore/12_V10_to_V11.md#2025-04-17_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nbin/console doctrine:migration:exec 'Pimcore\\Bundle\\CoreBundle\\Migrations\\Version20240708083500'\n```\n\n----------------------------------------\n\nTITLE: Configuring User Provider Service\nDESCRIPTION: YAML service configuration for the ObjectUserProvider that loads users from the custom User class by username.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/19_Development_Tools_and_Details/10_Security_Authentication/01_Authenticate_Pimcore_Objects.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# config/services.yaml\nservices:\n    # The user provider loads users by Username.\n    # Pimcore provides a simple ObjectUserProvider which is able to load users from a specified class by a configured\n    # field. The website_demo.security.user_provider will load users from the App\\Model\\DataObject\\User by looking at\n    # their username field.\n    website_demo.security.user_provider:\n        class: Pimcore\\Security\\User\\ObjectUserProvider\n        arguments: ['App\\Model\\DataObject\\User', 'username']\n```\n\n----------------------------------------\n\nTITLE: Registering Third-Party Bundles in Pimcore Kernel\nDESCRIPTION: Shows how to extend the Pimcore Kernel class to register third-party bundles. This example demonstrates adding bundles with different priorities and environment specifications.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/20_Extending_Pimcore/01_Add_Your_Own_Dependencies_and_Packages.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App;\n\nuse Pimcore\\HttpKernel\\BundleCollection\\BundleCollection;\nuse Pimcore\\Kernel as PimcoreKernel;\n\nclass Kernel extends PimcoreKernel\n{\n    /**\n     * Adds bundles to register to the bundle collection. The collection is able\n     * to handle priorities and environment specific bundles.\n     */\n    public function registerBundlesToCollection(BundleCollection $collection): void\n    {\n        if (class_exists('\\\\XYZBundle\\\\XYZBundle')) {\n            $collection->addBundle(new \\XYZBundle\\XYZBundle);\n        }\n\n        // add a custom third-party bundle here with a high priority and only for dev environment\n        $collection->addBundle(new Third\\Party\\PartyBundle, 10, ['dev']);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring DocumentTreeGenerator Service in YAML\nDESCRIPTION: YAML configuration for the DocumentTreeGenerator service defining filters, processors and options for sitemap generation. Demonstrates how to set up document filtering, property processing, and domain handling options.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/18_Tools_and_Features/39_Sitemaps.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n    Pimcore\\Bundle\\SeoBundle\\Sitemap\\Document\\DocumentTreeGenerator:\n        arguments:\n            $filters:\n                - '@Pimcore\\Bundle\\SeoBundle\\Sitemap\\Element\\Filter\\PublishedFilter'\n                - '@Pimcore\\Bundle\\SeoBundle\\Sitemap\\Element\\Filter\\PropertiesFilter'\n                - '@Pimcore\\Bundle\\SeoBundle\\Sitemap\\Document\\Filter\\DocumentTypeFilter'\n                - '@Pimcore\\Bundle\\SeoBundle\\Sitemap\\Document\\Filter\\SiteRootFilter'\n            $processors:\n                - '@Pimcore\\Bundle\\SeoBundle\\Sitemap\\Element\\Processor\\ModificationDateProcessor'\n                - '@Pimcore\\Bundle\\SeoBundle\\Sitemap\\Element\\Processor\\PropertiesProcessor'\n            $options:\n                handleMainDomain: true\n                handleCurrentSite: false\n                handleSites: true\n```\n\n----------------------------------------\n\nTITLE: Initializing Pimcore Workflow Configuration in YAML\nDESCRIPTION: This snippet shows how to initialize a basic workflow configuration in the config.yaml file. It defines a product workflow with a state machine type, specifies which class it supports, and configures the marking store to track the workflow state.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/26_Best_Practice/02_Implementing_Product_Information_Management.md#2025-04-17_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\npimcore:\n    workflows:\n        product_workflow:\n            label: 'Product Workflow'\n\n            type: 'state_machine'\n\n            supports:\n              - 'Pimcore\\Model\\DataObject\\Product'\n\n            marking_store:\n                type: single_state\n                arguments:\n                  - marking\n```\n\n----------------------------------------\n\nTITLE: Defining Sitemap Generator Interface in PHP\nDESCRIPTION: This PHP interface defines the structure for sitemap generators in Pimcore. It requires a 'populate' method to add entries to the URL container.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/18_Tools_and_Features/39_Sitemaps.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Pimcore\\Bundle\\SeoBundle\\Sitemap;\n\nuse Presta\\SitemapBundle\\Service\\UrlContainerInterface;\n\ninterface GeneratorInterface\n{\n    /**\n     * Populates the sitemap\n     */\n    public function populate(UrlContainerInterface $urlContainer, string $section = null): void;\n}\n```\n\n----------------------------------------\n\nTITLE: NGINX Configuration for Main Domain Static Pages in Pimcore\nDESCRIPTION: NGINX configuration changes required when using the main domain option for static pages in Pimcore.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/19_Development_Tools_and_Details/20_Static_Page_Generator.md#2025-04-17_snippet_6\n\nLANGUAGE: nginx\nCODE:\n```\nmap $args $static_page_root {\n    default                                 /var/tmp/pages/$host;\n    \"~*(^|&)pimcore_editmode=true(&|$)\"     /var/nonexistent;\n    \"~*(^|&)pimcore_preview=true(&|$)\"      /var/nonexistent;\n    \"~*(^|&)pimcore_version=[^&]+(&|$)\"     /var/nonexistent;\n}\n\nmap $uri $static_page_uri {\n    default                                 $uri;\n    \"/\"                                     /%home;\n}\n```\n\n----------------------------------------\n\nTITLE: Localized Fields Table Structure\nDESCRIPTION: Database schema for localized fields showing views and tables for language-specific data storage.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/19_Development_Tools_and_Details/05_Database_Model.md#2025-04-17_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n| Table/View | Purpose |\n| ---------- | ------- |\n| object_localized_(id)_(language-code) View | A database view per language, combining regular and localized data fields |\n| object_localized_data_(id) Table | Stores localized field data |\n| object_localized_query_(id)_(language-code) Table | Analog to object_query_(id) |\n```\n\n----------------------------------------\n\nTITLE: Defining Workflow Transitions in YAML\nDESCRIPTION: This snippet shows how to configure transitions between workflow states. It specifies source states, destination state, an optional guard function to validate transitions, and additional options like custom labels and note-taking functionality.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/26_Best_Practice/02_Implementing_Product_Information_Management.md#2025-04-17_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\npimcore:\n    workflows:\n        product_workflow:\n            transitions:\n                product_images:\n                    from: [ translations, enrichment ]\n                    to: images\n                    guard: subject.checkTranslationsCompleted()\n                    options:\n                        label: 'Edit Images'\n                        notes:\n                        commentEnabled: true\n                        commentRequired: false\n                        iconClass: 'pimcore_icon_image'\n```\n\n----------------------------------------\n\nTITLE: Custom Log Channel Configuration\nDESCRIPTION: YAML configuration for setting up custom log channels and handlers in Monolog.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/19_Development_Tools_and_Details/07_Logging.md#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nmonolog:\n    handlers:\n        custom_handler:\n            level:    debug\n            type:     stream\n            path:     '%kernel.logs_dir%/custom.log'\n            channels: [custom_log]\n    channels: [custom_log, some_other_channel]\n```\n\n----------------------------------------\n\nTITLE: Configuring Allowed Types and Subtypes for Relations Editable in Twig\nDESCRIPTION: This example shows how to configure the Relations editable with specific allowed types, subtypes, and classes. It restricts the user to adding only assets (videos and images) and objects (of class 'person').\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/03_Documents/01_Editables/13_Relations_Many-To-Many.md#2025-04-17_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{{ pimcore_relations(\"objectPaths\", {\n    \"types\": [\"asset\",\"object\"],\n    \"subtypes\": {\n        \"asset\": [\"video\",\"image\"],\n        \"object\": [\"object\"]\n    },\n    \"classes\": [\"person\"]\n}) }}\n```\n\n----------------------------------------\n\nTITLE: Preselecting an Option in Select Editable with Twig\nDESCRIPTION: This snippet shows how to preselect an option in the Select Editable using the setDataFromResource() method. It checks if the select is empty and sets a default value if so.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/03_Documents/01_Editables/30_Select.md#2025-04-17_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% if editmode %}\n    {% if pimcore_select('valid_for').isEmpty() %}\n        {% do pimcore_select('valid_for').setDataFromResource('unlimited') %}\n    {% endif %}\n    \n    ...\n    \n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Disabling Asset Document Background Processing\nDESCRIPTION: YAML configuration to disable various background processing features for asset documents, including thumbnail generation, page count processing, text extraction, and PDF security scanning.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/23_Installation_and_Upgrade/09_Upgrade_Notes/README.md#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\npimcore:\n    assets:\n        document:\n            thumbnails:\n                enabled: false #disable generating thumbnail for Asset Documents\n            process_page_count: false #disable processing page count\n            process_text: false #disable processing text extraction\n            scan_pdf: false #disable scanning PDF documents for unsafe JavaScript.\n```\n\n----------------------------------------\n\nTITLE: Adding Additional Workflow Places and Transitions in YAML\nDESCRIPTION: Expands the workflow with more places for updating content, pictures, and validating stock and price. Includes corresponding transitions between these new places.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/07_Workflow_Management/05_Workflow_Tutorial.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nplaces:\n    update_picture:\n        label: 'Update Product Picture'\n        title: 'Update the product picture'\n        color: '#d9ef36'\n        permissions:\n            - objectLayout: 3            \n    validate_stock_and_price:\n        label: 'Validate Stock + Price'\n        title: 'Check the quantity and the price'\n        color: '#d9ef36'\n        permissions:\n            - objectLayout: 4            \n    content_prepared:\n        label: 'Content Prepared'\n        title: 'Content ready to publish'\n        color: '#28a013'\n\ntransitions:\n    content_updated:\n        from: update_content\n        to: update_picture\n        options:\n            label: 'Content up-to-date'\n            notes:\n                commentEnabled: true\n                commentRequired: false\n    picture_updated:\n        from: update_picture\n        to: validate_stock_and_price\n        options:\n            label: 'Picture up-to-date'\n            notes:\n                commentEnabled: true\n                commentRequired: false\n    content_ready:\n        from: validate_stock_and_price\n        to: content_prepared\n        options:\n            label: 'Content is ready to publish'\n```\n\n----------------------------------------\n\nTITLE: Configuring System Settings Storage in Pimcore 11\nDESCRIPTION: This YAML configuration sets up the storage location for System Settings in Pimcore 11, using the settings store for both reading and writing.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/23_Installation_and_Upgrade/07_Updating_Pimcore/12_V10_to_V11.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\npimcore:\n    config_location:\n        system_settings:\n            write_target:\n                type: 'settings-store'\n            read_target:\n                type: 'settings-store'\n```\n\n----------------------------------------\n\nTITLE: Restricted Relation Editable with Type Filtering in Twig\nDESCRIPTION: Creates a relation editable that only allows selecting specific types, subtypes, and classes of Pimcore elements. This example restricts selections to video/image assets and Person objects.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/03_Documents/01_Editables/12_Relation_Many-To-One.md#2025-04-17_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{{ pimcore_relation(\"myRelation\", {\n    \"types\": [\"asset\",\"object\"],\n    \"subtypes\": {\n        \"asset\": [\"video\", \"image\"],\n        \"object\": [\"object\"],\n    },\n    \"classes\": [\"person\"]\n}) }}\n```\n\n----------------------------------------\n\nTITLE: Creating a Rate Limiting Zone for Pimcore Image Generation in Nginx\nDESCRIPTION: Configuration snippet to create a rate limiting zone in Nginx's http section that restricts thumbnail generation to 5 requests per second per server name. This helps prevent server overload from excessive parallel image processing.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/23_Installation_and_Upgrade/03_System_Setup_and_Hosting/02_Nginx_Configuration.md#2025-04-17_snippet_7\n\nLANGUAGE: nginx\nCODE:\n```\n# Zone to Limit Pimcore On-demand Image generation\nlimit_req_zone $server_name zone=imggen:1M rate=5r/s;\n```\n\n----------------------------------------\n\nTITLE: Advanced pimcorecache Usage with All Options\nDESCRIPTION: Example showing all available options for the pimcorecache extension, including custom tag, ttl value, and force parameter to enable caching even in admin mode.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/02_MVC/02_Template/02_Template_Extensions/README.md#2025-04-17_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% pimcorecache \"test_cache_key\" ttl(60) tags(['custom_tag']) force(true) %}\n    <h1>This is some cached microtime</h1>\n    {{ 'now'|date('U') }}\n{% endpimcorecache %}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Adapter Factory to Pimcore Configuration in YAML\nDESCRIPTION: YAML configuration to add a custom adapter factory to the Pimcore custom reports configuration. This step is necessary to make the custom adapter available for use in reports.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/18_Tools_and_Features/29_Custom_Reports.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\npimcore_custom_reports:\n    adapters:\n        myAdapter: app.custom_report.adapter.factory.custom\n```\n\n----------------------------------------\n\nTITLE: Service Configuration with Application Logger\nDESCRIPTION: YAML configuration for service dependency injection with ApplicationLogger.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/18_Tools_and_Features/17_Application_Logger.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nApp\\YourService: \n    calls:\n        - [setLogger, ['@Pimcore\\Bundle\\ApplicationLoggerBundle\\ApplicationLogger']]\n```\n\n----------------------------------------\n\nTITLE: Setting Checkbox Value in Pimcore\nDESCRIPTION: Example showing how to set a checkbox value programmatically in Pimcore using a boolean value.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/01_Object_Classes/01_Data_Types/65_Others.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$object->setCheckbox(true);\n```\n\n----------------------------------------\n\nTITLE: Basic Bundle Installer Implementation\nDESCRIPTION: PHP implementation of a basic Pimcore bundle class that retrieves the installer from the service container.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/20_Extending_Pimcore/13_Bundle_Developers_Guide/05_Pimcore_Bundles/01_Installers.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App;\n\nuse Pimcore\\Extension\\Bundle\\AbstractPimcoreBundle;\n\nclass App extends AbstractPimcoreBundle\n{\n    public function getInstaller(): Installer\n    {\n        return $this->container->get(Installer::class);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic JavaScript Event Listener Setup\nDESCRIPTION: Example of setting up a basic JavaScript event listener for Pimcore UI events\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/20_Extending_Pimcore/13_Bundle_Developers_Guide/06_Event_Listener_UI.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.addEventListener(pimcore.events.pimcoreReady, (e) => {\n    //print out the parameters of the event\n    console.log(e.detail)\n});\n```\n\n----------------------------------------\n\nTITLE: Setting CLI Tool Execute Permissions\nDESCRIPTION: Command to add execute permissions for CLI tools in the bin directory, allowing execution of Pimcore and Symfony console commands for both user and group.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/23_Installation_and_Upgrade/03_System_Setup_and_Hosting/03_File_Permissions.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nchmod ug+x bin/*\n```\n\n----------------------------------------\n\nTITLE: Configuring Composer JSON for Pimcore Bundle\nDESCRIPTION: Example composer.json configuration for a Pimcore bundle, defining package type, autoloading, and bundle registration through extra config.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/20_Extending_Pimcore/13_Bundle_Developers_Guide/05_Pimcore_Bundles/README.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"myVendor/myBundleName\",\n    \"type\": \"pimcore-bundle\",\n    \"autoload\": {\n        \"psr-4\": {\n            \"MyBundleName\\\\\": \"\"\n        }\n    },\n    \"extra\": {\n        \"pimcore\": {\n            \"bundles\": [\n                \"MyBundleName\\\\MyBundleName\"\n            ]\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Event Listener Service in Pimcore YAML Configuration\nDESCRIPTION: YAML configuration to register a DataObject event listener service that handles post-update events for bundle product price calculations\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/26_Best_Practice/02_Implementing_Product_Information_Management.md#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n    App\\EventListener\\DataObjectListener:\n        tags:\n          - { name: kernel.event_listener, event: pimcore.dataobject.postUpdate, method: onObjectPostUpdate }\n```\n\n----------------------------------------\n\nTITLE: Basic Area Brick Implementation in PHP\nDESCRIPTION: A basic implementation of an area brick class that implements AreabrickInterface. When placed in the App\\Document\\Areabrick namespace, Pimcore will automatically register it as a service.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/03_Documents/01_Editables/02_Areablock/02_Bricks.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Document\\Areabrick;\n\nuse Pimcore\\Extension\\Document\\Areabrick\\AreabrickInterface;\n\nclass Iframe implements AreabrickInterface\n{\n    // implementing class methods\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Maintenance Task with Messenger Transport in YAML (Pimcore)\nDESCRIPTION: This snippet shows how to register a maintenance task in Pimcore using a separate messenger transport. It includes the additional 'messengerMessageClass' property in the tag configuration.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/20_Extending_Pimcore/16_Maintenance_Tasks.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nApp\\Maintenance\\MyMaintenanceTask:\n    tags:\n        - { name: pimcore.maintenance.task, type: my_maintenance_task, messengerMessageClass: '\\App\\Messenger\\MyMaintenanceMessage' }\n```\n\n----------------------------------------\n\nTITLE: Configuring Workflow Transition Notification Settings in YAML\nDESCRIPTION: Defines the structure for configuring notification settings in a workflow transition. It includes options for setting conditions, notifying users and roles, channel types, and mail settings.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/07_Workflow_Management/01_Configuration_Details/README.md#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nnotificationSettings:\n    -\n        condition:            ~\n        notifyUsers:          []\n        notifyRoles:          []\n        channelType:\n            - mail\n        mailType:             template # One of \"template\"; \"pimcore_document\"\n        mailPath:             '@PimcoreCore/Workflow/NotificationEmail/notificationEmail.html.twig'\n```\n\n----------------------------------------\n\nTITLE: Implementing Vote Listing Class in PHP\nDESCRIPTION: Implementation of a Listing class for Vote model that supports pagination and iteration.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/20_Extending_Pimcore/17_Custom_Persistent_Models.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Model\\Vote;\n\nuse Pimcore\\Model;\nuse Pimcore\\Model\\Paginator\\PaginateListingInterface;\n\nclass Listing extends Model\\Listing\\AbstractListing implements PaginateListingInterface\n{\n    /**\n     * List of Votes.\n     */\n    public ?array $data = null;\n\n    public ?string $locale = null;\n\n    /**\n     * get total count.\n     */\n    public function count(): int\n    {\n        return $this->getTotalCount();\n    }\n\n    /**\n     * get all items.\n     */\n    public function getItems(int $offset, int $itemCountPerPage): array\n    {\n        $this->setOffset($offset);\n        $this->setLimit($itemCountPerPage);\n\n        return $this->load();\n    }\n\n    /**\n     * Get Paginator Adapter.\n     *\n     * @return $this\n     */\n    public function getPaginatorAdapter(): static\n    {\n        return $this;\n    }\n\n    /**\n     * Set Locale.\n     */\n    public function setLocale(?string $locale): void\n    {\n        $this->locale = $locale;\n    }\n\n    /**\n     * Get Locale.\n     */\n    public function getLocale(): ?string\n    {\n        return $this->locale;\n    }\n\n    /**\n     * Methods for Iterator.\n     */\n\n    /**\n     * Rewind.\n     */\n    public function rewind(): void\n    {\n        $this->getData();\n        reset($this->data);\n    }\n\n    /**\n     * current.\n     */\n    public function current(): mixed\n    {\n        $this->getData();\n\n        return current($this->data);\n    }\n\n    /**\n     * key.\n     */\n    public function key(): mixed\n    {\n        $this->getData();\n\n        return key($this->data);\n    }\n\n    /**\n     * next.\n     */\n    public function next(): void\n    {\n        $this->getData();\n        next($this->data);\n    }\n\n    /**\n     * valid.\n     */\n    public function valid(): bool\n    {\n        $this->getData();\n\n        return $this->current() !== false;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Pimcore Bundles with Console Commands\nDESCRIPTION: Console commands for generating new Pimcore bundles interactively or with specified namespace\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/20_Extending_Pimcore/13_Bundle_Developers_Guide/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# generate bundle interactively\n$ bin/console pimcore:generate:bundle\n\n# generate bundle with a given name and don't ask questions\n$ bin/console pimcore:generate:bundle --namespace=Acme/FooBundle --no-interaction\n```\n\n----------------------------------------\n\nTITLE: Retrieving Symfony Services using Pimcore Test Helper\nDESCRIPTION: Example showing how to grab a Symfony service using the Pimcore test helper module. This approach is preferred over the Codeception Symfony module due to better compatibility with Symfony 6 and reduced test complexity.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/19_Development_Tools_and_Details/29_Testing/03_Testing_Services.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Pimcore\\Tests\\Support\\Helper\\Pimcore;\n\n/** @var Pimcore $pimcoreModule */\n$pimcoreModule = $this->getModule('\\\\' . Pimcore::class);\n$mailerService = $pimcoreModule->grabService('mailer');\n```\n\n----------------------------------------\n\nTITLE: Registering Sitemap Routes in YAML\nDESCRIPTION: This YAML configuration registers the routes for PrestaSitemapBundle, allowing access to sitemaps via '/sitemap.xml' and '/sitemap.<section>.xml'.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/18_Tools_and_Features/39_Sitemaps.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nPrestaSitemapBundle:\n    resource: \"@PrestaSitemapBundle/config/routing.yml\"\n    prefix:   /\n```\n\n----------------------------------------\n\nTITLE: Basic Thumbnail HTML Generation in Twig\nDESCRIPTION: Examples of basic thumbnail generation using Twig templates, including direct asset usage and document image tags.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/04_Assets/03_Working_with_Thumbnails/01_Image_Thumbnails.md#2025-04-17_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n/* Use directly on the asset object */\n{{ pimcore_asset_by_path('/path/to/image.jpg').thumbnail('myThumbnail').html|raw }}\n\n/* ... with some additional options */\n{{ pimcore_asset_by_path('/path/to/image.jpg').thumbnail('myThumbnail').html({\n    pictureAttributes: {\n        data-test: \"my value\"\n    },\n    disableImgTag: true\n})|raw }}\n\n/* Use with the image tag in documents */\n<div>\n    <p>\n        {{ pimcore_image('myImage', {'thumbnail': 'myThumbnail'}) }}\n    </p>\n</div>\n\n/* Use without pre-configured thumbnail */\n{{ pimcore_image('myImage', {\n    'thumbnail': {\n        'width': 500,\n        'aspectratio': true,\n        'interlace': true,\n        'quality': 85,\n        'format': 'png'\n    }\n}) }}\n\n/* Use from an object-field */\n/* where \"myThumbnail\" is the name of the thumbnail configuration in settings -> thumbnails */\n{% if myObject.myImage %}\n   {{ myObject.myImage.thumbnail('myThumbnail').html|raw }}\n{% endif %}\n\n/* Use from an object-field with dynamic configuration */\n<img src=\"{{ myObject.myImage.thumbnail({'width': 220, 'format': 'jpeg'}) }}\" />\n\n/* Use directly on the asset object using dynamic configuration */\n{{ pimcore_asset_by_path('/path/to/image.jpg').thumbnail({'width': 500, 'format': 'png'}).html|raw}}\n```\n\n----------------------------------------\n\nTITLE: Automating Pimcore Installation with Docker\nDESCRIPTION: Command for automating Pimcore installation using Docker Compose with parameters for admin credentials, database configuration, and non-interactive mode.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/01_Getting_Started/02_Advanced_Installation_Topics/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose exec php vendor/bin/pimcore-install --admin-username=admin --admin-password=admin \\\n  --mysql-username=username --mysql-password=password --mysql-database=pimcore \\\n  --mysql-host-socket=127.0.0.1 --mysql-port=3306 \\\n  --no-interaction\n```\n\n----------------------------------------\n\nTITLE: Configuring Delegate Version Storage Adapter in YAML\nDESCRIPTION: YAML configuration for setting up the DelegateVersionStorageAdapter in Pimcore. This adapter uses different storage methods based on data size thresholds.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/18_Tools_and_Features/01_Versioning.md#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nPimcore\\Model\\Version\\Adapter\\VersionStorageAdapterInterface:\n    public: true\n    alias: Pimcore\\Model\\Version\\Adapter\\DelegateVersionStorageAdapter\n\nPimcore\\Model\\Version\\Adapter\\DelegateVersionStorageAdapter:\n    public: true\n    arguments:\n        $byteThreshold: 1000000\n        $defaultAdapter: '@Pimcore\\Model\\Version\\Adapter\\DatabaseVersionStorageAdapter'\n        $fallbackAdapter: '@Pimcore\\Model\\Version\\Adapter\\FileSystemVersionStorageAdapter'\n\nPimcore\\Model\\Version\\Adapter\\FileSystemVersionStorageAdapter: ~\n\nPimcore\\Model\\Version\\Adapter\\DatabaseVersionStorageAdapter:\n    arguments:\n        $databaseConnection: '@doctrine.dbal.versioning_connection'\n```\n\n----------------------------------------\n\nTITLE: Monolog Handler Configuration\nDESCRIPTION: YAML configuration for using ApplicationLogger as a Monolog handler with channel filtering.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/18_Tools_and_Features/17_Application_Logger.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nmonolog:\n    handlers:\n        application_logger_db:\n            type: service\n            id: Pimcore\\Bundle\\ApplicationLoggerBundle\\Handler\\ApplicationLoggerDb\n            channels: [\"application_logger\"]\n```\n\n----------------------------------------\n\nTITLE: Generating URLs with Default Route Values in Twig\nDESCRIPTION: Example showing how to generate URLs using predefined default values from the route configuration. Only non-default parameters need to be specified.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/02_MVC/04_Routing_and_URLs/02_Custom_Routes.md#2025-04-17_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\npath('news category', {\n    categoryId: 776,\n})\n```\n\n----------------------------------------\n\nTITLE: Running Pimcore System Requirements Check via CLI\nDESCRIPTION: Command to check Pimcore system requirements using the CLI. This tool provides an overview of required and optional system requirements for running Pimcore applications.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/23_Installation_and_Upgrade/01_System_Requirements.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbin/console pimcore:system:requirements:check\n```\n\n----------------------------------------\n\nTITLE: Setting Directory Ownership in Pimcore\nDESCRIPTION: Command to set proper ownership for Pimcore's var and public/var directories. Requires replacing YOURUSER and YOURGROUP with actual system user and group that executes PHP.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/23_Installation_and_Upgrade/03_System_Setup_and_Hosting/03_File_Permissions.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nchown -R YOURUSER:YOURGROUP var public/var\n```\n\n----------------------------------------\n\nTITLE: Installing PimcoreSeoBundle\nDESCRIPTION: Command to install the PimcoreSeoBundle which is required for robots.txt functionality\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/18_Tools_and_Features/38_Robots.txt.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbin/console pimcore:bundle:install PimcoreSeoBundle\n```\n\n----------------------------------------\n\nTITLE: Configuring Auto Save Intervals for Documents and Objects in Pimcore YAML\nDESCRIPTION: This YAML configuration snippet shows how to set the auto save interval for documents and objects in Pimcore. The interval is specified in seconds, with a default of 60 seconds. Setting the interval to 0 disables the auto save functionality.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/18_Tools_and_Features/02_Auto_Save_Drafts.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\npimcore: \n    \n    documents: \n        auto_save_interval: 60 # saving interval in seconds, default 60s, set to 0 to disable it\n    \n    objects: \n        auto_save_interval: 60 # saving interval in seconds, default 60s, set to 0 to disable it\n```\n\n----------------------------------------\n\nTITLE: Advanced Configuration of Numeric Editable in Twig\nDESCRIPTION: An advanced implementation of the numeric editable with configuration options including width, minimum value, maximum value, and decimal precision settings. This allows for more controlled numeric input with defined constraints.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/03_Documents/01_Editables/24_Numeric.md#2025-04-17_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{{ pimcore_numeric(\"myNumber\", {\n\t\t\"width\": 300,\n\t\t\"minValue\": 0,\n\t\t\"maxValue\": 100,\n\t\t\"decimalPrecision\": 0\n\t}) \n}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Auto-Create Redirects in YAML\nDESCRIPTION: YAML configuration to enable automatic creation of redirects when moving documents in the tree. This setting applies to URLSlugs and Pretty URLs.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/23_Installation_and_Upgrade/09_Upgrade_Notes/README.md#2025-04-17_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\npimcore_seo:\n    redirects:\n        auto_create_redirects: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Event Perspective in Pimcore YAML\nDESCRIPTION: Detailed YAML configuration for a custom 'Event' perspective in Pimcore. Defines the element tree layout, toolbar settings, and visibility of various administrative menu items. Located in var/config/perspectives/Event.yaml.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/18_Tools_and_Features/14_Perspective_Example.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n#var/config/perspectives/Event.yaml\n\npimcore:\n    perspectives:\n        definitions:\n            Event:\n                elementTree:\n                    -\n                        type: customview\n                        position: left\n                        sort: 0\n                        expanded: true\n                        hidden: false\n                        id: 87705013-edb9-c9ec-0f5e-c3ee45ca4459\n                iconCls: null\n                icon: /bundles/pimcoreadmin/img/flat-color-icons/vip.svg\n                toolbar:\n                    file:\n                        hidden: true\n                        items:\n                            perspectives: true\n                            dashboards: true\n                            openDocument: true\n                            openAsset: true\n                            openObject: true\n                            searchReplace: true\n                            schedule: true\n                            seemode: true\n                            closeAll: true\n                            help: true\n                            about: true\n                    marketing:\n                        hidden: true\n                        items:\n                            reports: true\n                            tagmanagement: true\n                            targeting: true\n                            seo:\n                                hidden: false\n                                items:\n                                    documents: true\n                                    robots: true\n                                    httperrors: true\n                    extras:\n                        hidden: true\n                        items:\n                            glossary: true\n                            redirects: true\n                            translations: true\n                            recyclebin: true\n                            plugins: true\n                            notesEvents: true\n                            applicationlog: true\n                            gdpr_data_extractor: true\n                            emails: true\n                            maintenance: true\n                            systemtools:\n                                hidden: false\n                                items:\n                                    phpinfo: true\n                                    opcache: true\n                                    requirements: true\n                                    serverinfo: true\n                                    database: true\n                                    fileexplorer: true\n                    settings:\n                        hidden: true\n                        items:\n                            customReports: true\n                            marketingReports: true\n                            documentTypes: true\n                            predefinedProperties: true\n                            predefinedMetadata: true\n                            system: true\n                            website: true\n                            web2print: true\n                            users:\n                                hidden: false\n                                items:\n                                    users: true\n                                    roles: true\n                            thumbnails: true\n                            objects:\n                                hidden: false\n                                items:\n                                    classes: true\n                                    fieldcollections: true\n                                    objectbricks: true\n                                    quantityValue: true\n                                    classificationstore: true\n                                    bulkExport: true\n                                    bulkImport: true\n                            routes: true\n                            cache:\n                                hidden: false\n                                items:\n                                    clearAll: true\n                                    clearData: true\n                                    clearSymfony: true\n                                    clearOutput: true\n                                    clearTemp: true\n                            adminTranslations: true\n                            tagConfiguration: true\n                            perspectiveEditor: true\n                    search:\n                        hidden: true\n                        items:\n                            quickSearch: true\n                            documents: true\n                            assets: true\n                            objects: true\n                    datahub:\n                        hidden: true\n```\n\n----------------------------------------\n\nTITLE: Appending Content to Placeholder in Twig\nDESCRIPTION: Shows how to append additional content to an existing placeholder using the 'append' method. This is an alternative to the deprecated 'captureStart' method with 'APPEND' type.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/02_MVC/02_Template/02_Template_Extensions/00_Placeholder.md#2025-04-17_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n{% set placeholderData %}\n    Test to append some additional content\n{% endset %}\n\n{% do pimcore_placeholder('foo').append(placeholderData) %}\n{{ pimcore_placeholder('foo') }}\n```\n\n----------------------------------------\n\nTITLE: Calculator Test Implementation\nDESCRIPTION: PHP test class demonstrating basic unit testing with PHPUnit including data providers.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/19_Development_Tools_and_Details/29_Testing/01_Application_Testing.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Tests\\App;\n\nuse App\\Calculator;\nuse PHPUnit\\Framework\\TestCase;\n\nclass CalculatorTest extends TestCase\n{\n    private Calculator $calculator;\n\n    protected function setUp(): void\n    {\n        $this->calculator = new Calculator();\n    }\n\n    public function testAdd(): void\n    {\n        $this->assertEquals(15, $this->calculator->add(10, 5));\n    }\n\n    /**\n     * @dataProvider addDataProvider\n     */\n    public function testAddWithProvider(int $a, int $b, int $expected): void\n    {\n        $this->assertEquals($expected, $this->calculator->add($a, $b));\n    }\n\n    public function addDataProvider(): array\n    {\n        return [\n            [1, 2, 3],\n            [10, 5, 15],\n            [-5, 5, 0],\n            [5, -5, 0],\n            [0, 10, 10],\n            [-50, -50, -100],\n            [-50, 10, -40]\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Clearing Output Cache in PHP\nDESCRIPTION: This PHP snippet demonstrates how to clear the output cache in Pimcore by removing ignored tags and clearing specific cache tags.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/22_Administration_of_Pimcore/02_Cleanup_Data_Storage.md#2025-04-17_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// remove \"output\" out of the ignored tags, if a cache lifetime is specified\nCache::removeIgnoredTagOnClear('output');\n\n// empty document cache\nCache::clearTags(['output', 'output_lifetime']);\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Admin Entry Point Route\nDESCRIPTION: Defines a custom route in routing.yaml for the admin entry point. Maps a custom URL path to the Pimcore CoreBundle controller action for handling admin entry point.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/19_Development_Tools_and_Details/40_Custom_Admin_Login_Entry_Point.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nmy_custom_admin_entry_point:\n    path: /my-custom-login-page\n    controller: Pimcore\\Bundle\\CoreBundle\\Controller\\PublicServicesController::customAdminEntryPointAction\n```\n\n----------------------------------------\n\nTITLE: Including Subrequests in Pimcore Twig Templates\nDESCRIPTION: Example of including another document (snippet) as a subrequest within a Twig template using the pimcore_inc function.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/02_MVC/02_Template/README.md#2025-04-17_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n{# include another document #}\n{{ pimcore_inc('/snippets/foo') }}\n```\n\n----------------------------------------\n\nTITLE: Converting JavaScript Plugin to Event Listener\nDESCRIPTION: Example showing how to convert a Pimcore plugin class to use the new event listener system for handling object save events.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/23_Installation_and_Upgrade/07_Updating_Pimcore/11_Preparing_for_V11.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\npimcore.registerNS(\"pimcore.plugin.MyTestBundle\");\n\npimcore.plugin.MyTestBundle = Class.create(pimcore.plugin.admin, {\n    getClassName: function () {\n        return \"pimcore.plugin.MyTestBundle\";\n    },\n\n    initialize: function () {\n        pimcore.plugin.broker.registerPlugin(this);\n    },\n\n    preSaveObject: function (object, type) {\n        var userAnswer = confirm(\"Are you sure you want to save \" + object.data.general.className + \"?\");\n        if (!userAnswer) {\n            throw new pimcore.error.ActionCancelledException('Cancelled by user');\n        }\n    }\n});\n\nvar MyTestBundlePlugin = new pimcore.plugin.MyTestBundle();\n```\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.addEventListener(pimcore.events.preSaveObject, (e) => {\n    let userAnswer = confirm(`Are you sure you want to save ${e.detail.object.data.general.className}?`);\n    if (!userAnswer) {\n       e.preventDefault();\n       e.stopPropagation();\n       pimcore.helpers.showNotification(t(\"Info\"), t(\"saving_failed\") + ' ' + 'placeholder', 'info');\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Generator Service Configuration in YAML\nDESCRIPTION: YAML configuration for registering the blog generator service with filters and processors, and making it available to the core listener.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/18_Tools_and_Features/39_Sitemaps.md#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# services.yaml\n\nservices:\n    _defaults:\n        autowire: true\n        autoconfigure: true\n        public: false\n\n    App\\Sitemaps\\BlogGenerator:\n        arguments:\n            $filters:\n                - '@Pimcore\\Bundle\\SeoBundle\\Sitemap\\Element\\Filter\\PublishedFilter'\n                - '@Pimcore\\Bundle\\SeoBundle\\Sitemap\\Element\\Filter\\PropertiesFilter'\n            $processors:\n                - '@Pimcore\\Bundle\\SeoBundle\\Sitemap\\Element\\Processor\\ModificationDateProcessor'\n                - '@Pimcore\\Bundle\\SeoBundle\\Sitemap\\Element\\Processor\\PropertiesProcessor'\n```\n\nLANGUAGE: yaml\nCODE:\n```\n# config.yaml\n\npimcore_seo:\n    sitemaps:\n        generators:\n            app_blog:\n                generator_id: App\\Sitemaps\\BlogGenerator\n```\n\n----------------------------------------\n\nTITLE: Basic Bundle Service Configuration\nDESCRIPTION: YAML configuration for defining a basic bundle installer service with public access.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/20_Extending_Pimcore/13_Bundle_Developers_Guide/05_Pimcore_Bundles/01_Installers.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n    App\\Installer:\n        public: true\n```\n\n----------------------------------------\n\nTITLE: Static Page Generator Benchmark Results (After)\nDESCRIPTION: Apache Benchmark results after enabling Static Page Generator for a Magazine page. Shows dramatic performance improvement with nearly 24x faster response times due to serving pre-generated static HTML.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/23_Installation_and_Upgrade/03_System_Setup_and_Hosting/09_Performance_Guide.md#2025-04-17_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nTime taken for tests:   0.033 seconds\nTime per request:       6.686 [ms] (mean)\nTime per request:       0.334 [ms] (mean, across all concurrent requests)\n\nConnection Times (ms)\n              min  mean[+/-sd] median   max\nConnect:        0    0   0.4      0       1\nProcessing:     2    5   1.5      5      10\nWaiting:        2    5   1.6      5      10\nTotal:          3    6   1.3      6      10\n```\n\n----------------------------------------\n\nTITLE: Configuring Optional Bundles in Pimcore YAML\nDESCRIPTION: YAML configuration for optional bundles including custom reports and static routes configuration settings.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/21_Deployment/03_Configuration_Environments.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\npimcore_custom_reports:\n    config_location:\n        custom_reports:\n            write_target:\n                type: 'symfony-config'\n\npimcore_static_routes:\n    config_location:\n        staticroutes:\n            write_target:\n                type: 'symfony-config'\n       ...\n```\n\n----------------------------------------\n\nTITLE: Security Configuration Update - YAML\nDESCRIPTION: Update to remove deprecated 'enable_authenticator_manager' setting from security.yaml configuration file.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/23_Installation_and_Upgrade/07_Updating_Pimcore/13_V11_to_V12.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsecurity:\n  enable_authenticator_manager: # remove this deprecated setting\n```\n\n----------------------------------------\n\nTITLE: Installation and Setup Navigation Index\nDESCRIPTION: Markdown navigation structure showing the available documentation sections for Pimcore installation, system setup, and upgrade procedures.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/23_Installation_and_Upgrade/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Installation, Setup and Upgrade\n\n## General Topics\n- [Installation Guide](../01_Getting_Started/README.md)\n  - [Apache Configuration](03_System_Setup_and_Hosting/01_Apache_Configuration.md)\n  - [Nginx Configuration](03_System_Setup_and_Hosting/02_Nginx_Configuration.md)\n  - [File Permissions](03_System_Setup_and_Hosting/03_File_Permissions.md)\n  - [Database Setup](03_System_Setup_and_Hosting/05_DB_Setup.md)\n  - [Additional Tools Installation](03_System_Setup_and_Hosting/06_Additional_Tools_Installation.md)\n- [Updating Pimcore](07_Updating_Pimcore/README.md)\n- [Upgrade Notes](09_Upgrade_Notes/README.md)\n\n## Advanced Topics\n- [Performance Guide](03_System_Setup_and_Hosting/09_Performance_Guide.md)\n```\n\n----------------------------------------\n\nTITLE: Converting Quantity Values Using Object Methods in PHP\nDESCRIPTION: These snippets show alternative methods to convert quantity values directly using object methods. They demonstrate conversion from meters to millimeters using both unit object and abbreviation string.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/01_Object_Classes/01_Data_Types/55_Number_Types.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$originalValue = new QuantityValue(3, Unit::getByAbbreviation('m')->getId());\n$convertedValue = $originalValue->convertTo(Unit::getByAbbreviation('mm'));\n// $convertedValue is a QuantityValue with value 3000 and unit mm\n```\n\nLANGUAGE: php\nCODE:\n```\n$originalValue = new QuantityValue(3, Unit::getByAbbreviation('m')->getId());\n$convertedValue = $originalValue->convertTo('mm');\n// $convertedValue is a QuantityValue with value 3000 and unit mm\n```\n\n----------------------------------------\n\nTITLE: Initializing Table Editable with Default Data in Twig\nDESCRIPTION: This snippet demonstrates how to initialize a Table Editable with predefined columns, rows, and data. It sets the width and default structure for the table.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/03_Documents/01_Editables/34_Table.md#2025-04-17_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ pimcore_table(\"productProperties\", {\n    \"width\": 700,\n    \"defaults\": {\n        \"cols\": 3,\n        \"rows\": 4,\n        \"data\": [\n            [\"Attribute name\", \"Value\", \"Additional column\"],\n            [\"Color\", \"Black\", \"\"],\n            [\"Size\", \"Large\", \"\"],\n            [\"Availability\", \"Out of stock\", \"\"]\n        ]\n    }\n}) }}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Execution Context in YAML\nDESCRIPTION: Configuration to define a custom execution context with a specific translations domain and error handling strategy.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/19_Development_Tools_and_Details/08_Generic_Execution_Engine/02_Configuration/02_Configuration.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\npimcore_generic_execution_engine:\n    execution_context:\n        my_custom_context:\n            translations_domain: my_custom_domain\n            error_handling: 'continue_on_error'\n```\n\n----------------------------------------\n\nTITLE: Custom Main Navigation Implementation\nDESCRIPTION: JavaScript class implementation for adding custom main navigation items to the Pimcore UI\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/20_Extending_Pimcore/13_Bundle_Developers_Guide/06_Event_Listener_UI.md#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\npimcore.plugin.mybundle = Class.create({\n    initialize: function () {\n        document.addEventListener(pimcore.events.preMenuBuild, this.preMenuBuild.bind(this));\n    },\n\n    preMenuBuild: function (e) {\n        let menu = e.detail.menu;\n\n        let items = [];\n        menu.mybundle = {\n            label: t('myBundleLabel'),\n            iconCls: 'pimcore_main_nav_icon_myIcon',\n            priority: 42,\n            items: items,\n            shadow: false,\n            handler: this.openMyBundle,\n            noSubmenus: true,\n            cls: \"pimcore_navigation_flyout\",\n        };\n    },\n\n    openMyBundle: function(e) {\n        try {\n            pimcore.globalmanager.get(\"plugin_pimcore_mybundle\").activate();\n        } catch (e) {\n            pimcore.globalmanager.add(\"plugin_pimcore_mybundle\", new pimcore.plugin.mybundle());\n        }\n    }\n});\n\nvar myBundle = new pimcore.plugin.mybundle();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Block Data in PHP\nDESCRIPTION: Example showing how to retrieve values from a block element in Pimcore. Demonstrates accessing nested data within block items.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/01_Object_Classes/01_Data_Types/05_Blocks.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n        $object = DataObject\\BlockClass::getById(48);\n        $blockItems = $object->getBlockElement1();\n        $firstBlockItem = $blockItems[0];\n        echo($firstBlockItem[\"input2\"]->getData());\n```\n\n----------------------------------------\n\nTITLE: Running All Pimcore Core Tests with Codeception\nDESCRIPTION: Command to execute all Pimcore core tests using Codeception inside a Docker container. It runs the tests with maximum verbosity.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/19_Development_Tools_and_Details/29_Testing/02_Core_Tests.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose exec php vendor/bin/codecept run -c . -vvv\n```\n\n----------------------------------------\n\nTITLE: Configuring Sitemap Generators in YAML\nDESCRIPTION: This YAML configuration demonstrates how to register and configure sitemap generators in Pimcore, including enabling/disabling generators and setting their priority.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/18_Tools_and_Features/39_Sitemaps.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\npimcore_seo:\n    sitemaps:\n        generators:\n            app_news:\n                enabled: true\n                priority: 50\n                generator_id: App\\Sitemaps\\NewsGenerator\n\n            # Pimcore ships a default document tree generator which is enabled by default\n            # but you can easily disable it here.\n            pimcore_documents:\n                enabled: false\n```\n\n----------------------------------------\n\nTITLE: Listing Object Variants Using Object List\nDESCRIPTION: Shows how to query object variants using the Product Listing class with object type filtering.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/01_Object_Classes/05_Class_Settings/70_Variants.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$list = new DataObject\\Product\\Listing();\n$list->setObjectTypes([DataObject::OBJECT_TYPE_VARIANT]);\n$list->load();\n\n// or\n\nDataObject\\Product::getList([\n    \"objectTypes\" => [DataObject::OBJECT_TYPE_VARIANT]\n]);\n```\n\n----------------------------------------\n\nTITLE: Displaying External Image in Twig Template\nDESCRIPTION: Demonstrates how to display an external image in a Twig template by accessing the URL of the ExternalImage object.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/01_Object_Classes/01_Data_Types/45_Image_Types.md#2025-04-17_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% if object.getExternalImage() is instanceof('\\\\Pimcore\\\\Model\\\\DataObject\\\\Data\\\\ExternalImage') %}\n    <img src=\"{{ object.getExternalImage().getUrl() }}\" />\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Apache for Static Page Generation in Pimcore\nDESCRIPTION: Apache configuration for handling static pages generated by Pimcore. This snippet should be added to the project's .htaccess file after the 'Thumbnails' section.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/19_Development_Tools_and_Details/20_Static_Page_Generator.md#2025-04-17_snippet_0\n\nLANGUAGE: apache\nCODE:\n```\n# static pages\nSetEnvIf Request_URI ^(.*)$ STATIC_PAGE_URI=$1\nSetEnvIf Request_URI / STATIC_PAGE_URI=/%home\n\nRewriteCond %{REQUEST_METHOD} ^(GET|HEAD)\nRewriteCond %{QUERY_STRING}   !(pimcore_editmode=true|pimcore_preview|pimcore_version)\nRewriteCond %{DOCUMENT_ROOT}/var/tmp/pages%{STATIC_PAGE_URI}.html -f\nRewriteRule ^(.*)$ /var/tmp/pages%{STATIC_PAGE_URI}.html [PT,L]\n```\n\n----------------------------------------\n\nTITLE: Updating Security Configuration for New Authenticator\nDESCRIPTION: YAML configuration update to enable the new security authenticator manager in security.yaml.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/23_Installation_and_Upgrade/07_Updating_Pimcore/11_Preparing_for_V11.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nsecurity:\n    enable_authenticator_manager: true\n```\n\n----------------------------------------\n\nTITLE: Implementing Localized Workflow Instances in YAML\nDESCRIPTION: Shows how to create multiple locale-specific workflows by referencing the base template and overriding placeholders for different languages (English, Croatian, Romanian).\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/07_Workflow_Management/01_Configuration_Details/01_Placeholder_Example/README.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n    product_workflow_local_en:\n        placeholders:\n          '%%stateFieldName%%': 'translationStateEn'\n          '%%locale%%': 'en'\n          '%%flag%%': 'gb'\n        enabled: true\n        label: \"Local Release Workflow\"\n        type: \"state_machine\"\n        supports:\n          <<: *local_workflow_supports_ref\n        initial_markings: \"local_300_basic_data_pending\"\n        marking_store:\n          <<: *local_workflow_marking_store_ref\n        places:\n          <<: *local_workflow_places_ref\n        transitions:\n          <<: *local_workflow_transitions_ref\n\n    product_workflow_local_hr:\n      placeholders:\n        '%%stateFieldName%%': \"translationStateHr\"\n        '%%locale%%': \"hr\"\n        '%%flag%%': 'hr'\n      enabled: true\n      label: \"Local Release Workflow\"\n      type: \"state_machine\"\n      supports:\n        <<: *local_workflow_supports_ref\n      initial_markings: \"local_300_basic_data_pending\"\n      marking_store:\n        <<: *local_workflow_marking_store_ref\n      places:\n        <<: *local_workflow_places_ref\n      transitions:\n        <<: *local_workflow_transitions_ref\n\n    product_workflow_local_ro:\n      placeholders:\n        '%%stateFieldName%%': \"translationStateRo\"\n        '%%locale%%': \"ro\"\n        '%%flag%%': 'ro'\n      enabled: true\n      label: \"Local Release Workflow\"\n      type: \"state_machine\"\n      supports:\n        <<: *local_workflow_supports_ref\n      initial_markings: \"local_300_basic_data_pending\"\n      marking_store:\n        <<: *local_workflow_marking_store_ref\n      places:\n        <<: *local_workflow_places_ref\n      transitions:\n        <<: *local_workflow_transitions_ref\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Redirect Status Codes in Pimcore SEO YAML Configuration\nDESCRIPTION: This YAML configuration extends the list of redirect status codes by adding a custom code (308) in Pimcore. The new status codes will be visible in the admin interface.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/02_MVC/04_Routing_and_URLs/04_Redirects.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\npimcore_seo:\n    redirects:\n        status_codes:\n            308: Permanent Redirect\n```\n\n----------------------------------------\n\nTITLE: Default Robots.txt Configuration\nDESCRIPTION: Default robots.txt content generated when no specific configuration is set for a site\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/18_Tools_and_Features/38_Robots.txt.md#2025-04-17_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Disabling Dependency Resolution in Pimcore\nDESCRIPTION: YAML configuration to disable the dependency resolution feature in Pimcore. This prevents the system from automatically resolving dependencies between elements.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/23_Installation_and_Upgrade/09_Upgrade_Notes/README.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\npimcore:\n  dependency:\n    enabled: false\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Document Types in Pimcore\nDESCRIPTION: Command line syntax for removing type-specific tables and enum types from the documents table. Protected types include page, link, snippet, folder, hardlink, and email.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/03_Documents/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbin/console pimcore:documents:cleanup <type1> <type2> <type3>\n```\n\n----------------------------------------\n\nTITLE: Configuring Asynchronous Dependency Resolution in Pimcore\nDESCRIPTION: YAML configuration for enabling asynchronous dependency resolution using Symfony Messenger. This allows dependencies to be processed in the background through a queue system instead of synchronously.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/23_Installation_and_Upgrade/09_Upgrade_Notes/README.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nframework:\n    messenger:\n        transports:\n            pimcore_dependencies: \"doctrine://default?queue_name=pimcore_dependencies\"\n        routing:\n            'Pimcore\\Messenger\\ElementDependenciesMessage': pimcore_dependencies\n```\n\n----------------------------------------\n\nTITLE: Clearing Temporary Files in PHP\nDESCRIPTION: This PHP snippet demonstrates how to clear public and system temporary files in Pimcore, including thumbnail caches and asset caches.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/22_Administration_of_Pimcore/02_Cleanup_Data_Storage.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// clear public files\nTool\\Storage::get('thumbnail')->deleteDirectory('/');\nDb::get()->executeQuery('TRUNCATE TABLE assets_image_thumbnail_cache');\n\nTool\\Storage::get('asset_cache')->deleteDirectory('/');\n\n// clear system files\nrecursiveDelete(PIMCORE_SYSTEM_TEMP_DIRECTORY, false);\n```\n\n----------------------------------------\n\nTITLE: Configuring UUID Instance Identifier in Pimcore\nDESCRIPTION: YAML configuration to enable UUID support by setting a unique instance identifier in the config.yaml file.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/19_Development_Tools_and_Details/19_UUID_Support.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\npimcore_uuid:\n  instance_identifier: 'your_unique_instance_identifier'\n```\n\n----------------------------------------\n\nTITLE: Referencing Recommended .gitignore for Pimcore Projects\nDESCRIPTION: This snippet provides a link to the recommended .gitignore file for Pimcore projects, hosted on the official Pimcore demo repository. The file is tailored to exclude common temporary files and directories generated by Pimcore during runtime.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/21_Deployment/01_Version_Control_Systems.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* [https://github.com/pimcore/demo/blob/11.x/.gitignore](https://github.com/pimcore/demo/blob/11.x/.gitignore)\n```\n\n----------------------------------------\n\nTITLE: I18n Translation Usage in JavaScript\nDESCRIPTION: Example of using Pimcore's translation function in JavaScript code\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/20_Extending_Pimcore/13_Bundle_Developers_Guide/06_Event_Listener_UI.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nt('translation_key')\n```\n\n----------------------------------------\n\nTITLE: Displaying Select Option in Twig Template\nDESCRIPTION: Shows how to display the selected option's display name in a Twig template.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/01_Object_Classes/01_Data_Types/80_Select_Types.md#2025-04-17_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n{{ colorOptions[product.color] }}\n```\n\n----------------------------------------\n\nTITLE: Example Unit Test Implementation\nDESCRIPTION: Sample unit test class demonstrating various testing scenarios including calculations, object comparisons, and exception testing.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/19_Development_Tools_and_Details/29_Testing/01_Application_Testing.md#2025-04-17_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Tests\\Unit\\App;\n\nuse Codeception\\Test\\Unit;\n\nclass ExampleTest extends Unit\n{\n    protected \\Tests\\UnitTester $tester;\n\n    public function testPhpCanCalculate(): void\n    {\n        $this->assertEquals(15, 10 + 5);\n        $this->assertEquals(100, pow(10, 2));\n    }\n\n    /**\n     * @dataProvider addDataProvider\n     */\n    public function testPhpCanAddWithProvider(int $a, int $b, int $expected): void\n    {\n        $this->assertEquals($expected, $a + $b, sprintf('%d + %d = %d', $a, $b, $expected));\n    }\n\n    public function testSomethingElse(): void\n    {\n        $obj1 = new \\stdClass();\n        $obj2 = new \\stdClass();\n        $obj3 = new \\stdClass();\n\n        $obj1->obj = $obj3;\n        $obj2->obj = $obj3;\n\n        $this->assertNotNull($obj1);\n        $this->assertNotNull($obj2);\n        $this->assertNotNull($obj3);\n\n        $this->assertNotSame($obj1, $obj2);\n        $this->assertSame($obj1->obj, $obj2->obj);\n        $this->assertSame($obj3, $obj1->obj);\n        $this->assertSame($obj3, $obj2->obj);\n    }\n\n    public function testException(): void\n    {\n        $this->expectException(\\RuntimeException::class);\n        $this->expectExceptionMessage('This test is about to fail');\n\n        throw new \\RuntimeException('This test is about to fail');\n    }\n\n    public function addDataProvider(): array\n    {\n        return [\n            [1, 2, 3],\n            [10, 5, 15],\n            [-5, 5, 0],\n            [5, -5, 0],\n            [0, 10, 10],\n            [-50, -50, -100],\n            [-50, 10, -40]\n        ];\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL/MariaDB System Variables for Pimcore\nDESCRIPTION: MySQL/MariaDB configuration settings recommended for Pimcore. It enables InnoDB file per table and loads the archive plugin for MariaDB.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/23_Installation_and_Upgrade/01_System_Requirements.md#2025-04-17_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[mysqld]\ninnodb_file_per_table = 1\n\n[mariadb]\nplugin_load_add = ha_archive\n```\n\n----------------------------------------\n\nTITLE: Registering Maintenance Task in YAML (Pimcore)\nDESCRIPTION: This snippet demonstrates how to register a new maintenance task in Pimcore using YAML configuration. It shows the basic structure for tagging a custom maintenance task class.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/20_Extending_Pimcore/16_Maintenance_Tasks.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nApp\\Maintenance\\MyMaintenanceTask:\n    tags:\n        - { name: pimcore.maintenance.task, type: my_maintenance_task }\n```\n\n----------------------------------------\n\nTITLE: Upgrading Pimcore Version 11 using Composer\nDESCRIPTION: This snippet shows the command to update Pimcore using Composer with an increased memory limit. It's a crucial step in the upgrade process to ensure all dependencies are updated correctly.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/23_Installation_and_Upgrade/07_Updating_Pimcore/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nCOMPOSER_MEMORY_LIMIT=-1 composer update\n```\n\n----------------------------------------\n\nTITLE: Object Save Validation in JavaScript\nDESCRIPTION: Implementation of frontend validation before saving Pimcore objects using event prevention\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/20_Extending_Pimcore/13_Bundle_Developers_Guide/06_Event_Listener_UI.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.addEventListener(pimcore.events.preSaveObject, (e) => {\n    let userAnswer = confirm(`Are you sure you want to save ${e.detail.object.data.general.className}?`);\n    if (!userAnswer) {\n        e.preventDefault();\n        e.stopPropagation();\n        pimcore.helpers.showNotification(t(\"Info\"), t(\"saving_failed\") + ' ' + 'placeholder', 'info');\n\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Adding CSP Nonce to Inline Scripts in Twig Templates\nDESCRIPTION: Twig template code showing how to add Content Security Policy nonce attribute to inline scripts for proper execution in Pimcore admin interface.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/26_Best_Practice/75_Security_Concept.md#2025-04-17_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n<script {{ pimcore_csp.getNonceHtmlAttribute()|raw }}>\n```\n\n----------------------------------------\n\nTITLE: WebP Delegate Configuration in XML\nDESCRIPTION: XML configuration for WebP encoding delegate in ImageMagick to support quality settings.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/04_Assets/03_Working_with_Thumbnails/01_Image_Thumbnails.md#2025-04-17_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<delegate decode=\"png\" encode=\"webp\" command=\"&quot;cwebp&quot; -quiet -q %Q &quot;%i&quot; -o &quot;%o&quot;\"/>\n```\n\n----------------------------------------\n\nTITLE: Outputting HeadStyle Content in Twig\nDESCRIPTION: Shows how to output all the collected style declarations in your layout script. This should typically be placed in the <head> section of your HTML.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/02_MVC/02_Template/02_Template_Extensions/04_HeadStyle.md#2025-04-17_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{{ pimcore_head_style() }}\n```\n\n----------------------------------------\n\nTITLE: Capturing Content for Placeholders in Twig (Deprecated)\nDESCRIPTION: Illustrates the deprecated method of capturing content for placeholders. It uses 'captureStart' and 'captureEnd' to capture a loop's output and store it in the placeholder.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/02_MVC/02_Template/02_Template_Extensions/00_Placeholder.md#2025-04-17_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{# Default capture: append #}\n{% do pimcore_placeholder('foo').captureStart() %}\n\n{% for datum in data %}\n    <div class=\"foo\">\n        <h2>{{ datum.title }}</h2>\n        <p>{{ datum.content }}</p>\n    </div>\n{% endfor %}\n\n{% do pimcore_placeholder('foo').captureEnd() %}\n\n{{ pimcore_placeholder('foo') }}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Select Field Options\nDESCRIPTION: Shows how to access available options for select fields in both regular objects and ObjectBricks.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/01_Object_Classes/01_Data_Types/80_Select_Types.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$fd = $object->getClass()->getFieldDefinition(\"multiselect\");\n$options = $fd->getOptions();\n```\n\nLANGUAGE: php\nCODE:\n```\n$fd = $brick->getDefinition()->getFieldDefinition(\"multiselect\");\n$options = $fd->getOptions();\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Version Storage Adapter in YAML\nDESCRIPTION: YAML configuration to set up the DatabaseVersionStorageAdapter for storing Pimcore version data in a database. This allows version data to be stored in a separate database.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/18_Tools_and_Features/01_Versioning.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nPimcore\\Model\\Version\\Adapter\\VersionStorageAdapterInterface:\n    public: true\n    alias: Pimcore\\Model\\Version\\Adapter\\DatabaseVersionStorageAdapter\n\nPimcore\\Model\\Version\\Adapter\\DatabaseVersionStorageAdapter:\n    arguments:\n        $databaseConnection: '@doctrine.dbal.versioning_connection'\n```\n\n----------------------------------------\n\nTITLE: Initializing Pimcore Bootstrap for Tests\nDESCRIPTION: Bootstrap file that initializes Pimcore environment for testing, including autoloader configuration and environment setup.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/19_Development_Tools_and_Details/29_Testing/01_Application_Testing.md#2025-04-17_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Pimcore\\Tests\\Support\\Util\\Autoloader;\n\ndefine('PIMCORE_PROJECT_ROOT', realpath(__DIR__ . '/..'));\n\nputenv('APP_ENV=test');\n\nrequire_once PIMCORE_PROJECT_ROOT . '/vendor/autoload.php';\n\n\\Pimcore\\Bootstrap::setProjectRoot();\n\\Pimcore\\Bootstrap::bootstrap();\n\\Pimcore\\Bootstrap::kernel();\n\nrequire_once PIMCORE_PROJECT_ROOT . '/vendor/pimcore/pimcore/tests/Support/Util/Autoloader.php';\n\nAutoloader::addNamespace('Pimcore\\Tests\\Support', PIMCORE_PROJECT_ROOT . '/vendor/pimcore/pimcore/tests/Support');\n```\n\n----------------------------------------\n\nTITLE: Disable New Notifications Check Configuration\nDESCRIPTION: YAML configuration to disable only the automatic checking of new unread notifications while keeping the notification system enabled.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/18_Tools_and_Features/41_Notifications.md#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\npimcore_admin:\n    notifications:\n        check_new_notification:\n            enabled: false\n```\n\n----------------------------------------\n\nTITLE: Installing PHPStan Dependencies for Pimcore\nDESCRIPTION: Composer commands to install the necessary dependencies for running PHPStan analysis on Pimcore. It includes both minimum and full analysis requirements.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/19_Development_Tools_and_Details/29_Testing/02_Core_Tests.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# minimum\ncomposer require \"phpstan/phpstan:^0.12\" \"phpstan/phpstan-symfony:^0.12\"\n\n# required if you want to do a full analysis\ncomposer require \"elasticsearch/elasticsearch:^7.11\" \"composer/composer:*\" \n```\n\n----------------------------------------\n\nTITLE: Clearing Pimcore Data Cache\nDESCRIPTION: This command clears the Pimcore data cache after an update. It's an important step to ensure that the application uses the latest data structures and configurations.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/23_Installation_and_Upgrade/07_Updating_Pimcore/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbin/console pimcore:cache:clear\n```\n\n----------------------------------------\n\nTITLE: Example of Checking Document Navigation Exclusion in Twig\nDESCRIPTION: Shows how to check if a document is excluded from navigation via its properties.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/03_Documents/03_Navigation.md#2025-04-17_snippet_7\n\nLANGUAGE: twig\nCODE:\n```\n{% do document.getProperty('navigation_exclude') %}\n```\n\n----------------------------------------\n\nTITLE: NGINX Configuration for Static Page Generation\nDESCRIPTION: NGINX configuration block that sets up mappings for serving static pages while handling special Pimcore parameters (editmode, preview, versions) appropriately.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/23_Installation_and_Upgrade/09_Upgrade_Notes/README.md#2025-04-17_snippet_7\n\nLANGUAGE: nginx\nCODE:\n```\nmap $args $static_page_root {\n    default                                 /var/tmp/pages/$host;\n    \"~*(^|&)pimcore_editmode=true(&|$)\"     /var/nonexistent;\n    \"~*(^|&)pimcore_preview=true(&|$)\"      /var/nonexistent;\n    \"~*(^|&)pimcore_version=[^&]+(&|$)\"     /var/nonexistent;\n}\nmap $uri $static_page_uri {\n    default                                 $uri;\n    \"/\"                                     /%home;\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Site Request Status in PHP and Twig\nDESCRIPTION: Code examples showing how to check if the current request is inside a subsite, both using PHP and Twig syntax.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/02_MVC/04_Routing_and_URLs/08_Working_with_Sites.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nif(\\Pimcore\\Model\\Site::isSiteRequest()) { /* ... */ }\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% if pimcore_site_is_request() %}\n    {# ... #}\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of HeadLink Helper in Twig\nDESCRIPTION: Demonstrates how to set links in a view script and render them using the HeadLink helper. Shows appendStylesheet and prependStylesheet with various attributes.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/02_MVC/02_Template/02_Template_Extensions/01_HeadLink.md#2025-04-17_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{# setting links in a view script: #}\n{% do pimcore_head_link().appendStylesheet('/styles/basic.css') %}\n{% do pimcore_head_link({rel: 'icon', href: '/img/favicon.ico'}, 'PREPEND').prependStylesheet('/styles/moz.css', 'screen', true,  {id: 'my_stylesheet'}) %}\n\n{# rendering the links: #}\n{{ pimcore_head_link() }}\n```\n\n----------------------------------------\n\nTITLE: Implementing TransmissionTrait in PHP for Pimcore Data Objects\nDESCRIPTION: This code snippet defines a trait 'TransmissionTrait' that implements the methods defined in the TransmissionInterface. It provides default implementations for getGearboxType and getNumberOfGears methods.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/01_Object_Classes/05_Class_Settings/26_Interfaces_and_traits.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// src/Traits/TransmissionTrait.php\n\nnamespace App\\Traits;\n\ntrait TransmissionTrait\n{\n    public function getGearboxType(): ?string\n    {\n        return \"manual\";\n    }\n\n    public function getNumberOfGears(): ?int\n    {\n        return 5;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing WSL Resources in Windows IDE\nDESCRIPTION: Demonstrates how to access mounted resources within a Windows IDE using a virtual network share path. This allows developers to work on files stored in the WSL environment.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/23_Installation_and_Upgrade/03_System_Setup_and_Hosting/10_Fix_Performance_Issues_on_Windows.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n\\\\wsl$\\<YOUR_DISTRIBUTION>\\home\\<USER>\\pimcore\n```\n\n----------------------------------------\n\nTITLE: Auto Format Configuration in YAML\nDESCRIPTION: YAML configuration for customizing auto-formats and their qualities in thumbnail generation.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/04_Assets/03_Working_with_Thumbnails/01_Image_Thumbnails.md#2025-04-17_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\npimcore:\n    assets:\n        image:\n            thumbnails:\n                auto_formats:\n                    avif:\n                        quality: 15\n                    webp:\n                        quality: null\n                        enabled: true\n```\n\n----------------------------------------\n\nTITLE: Optimizing Composer Autoloader in PHP\nDESCRIPTION: Command to optimize Composer's autoloader after creating new classes. This ensures newly created classes are properly registered.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/21_Deployment/05_Deployment_Tools.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncomposer dump-autoload --optimize\n```\n\n----------------------------------------\n\nTITLE: Basic Snippet Usage in Twig\nDESCRIPTION: Basic implementation of a snippet editable with width and height parameters. This demonstrates how to embed a snippet with specific dimensions.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/03_Documents/01_Editables/32_Snippet.md#2025-04-17_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ pimcore_snippet(\"mySnippet\", {\"width\": 250, \"height\": 100}) }}\n```\n\n----------------------------------------\n\nTITLE: RGBA Color Manipulation in Pimcore\nDESCRIPTION: API examples showing how to work with RGBA color values in Pimcore, including getting and setting color values.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/01_Object_Classes/01_Data_Types/65_Others.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$o = \\Pimcore\\Model\\DataObject\\User::getById(50);\n// get the color, can be null!\n$color = $o->getMyColor();\n// get the RGB part as hex with leading #\n                \nvar_dump($color->getHex());\n\n// get the RGBA value (with alpha component) has without leading hash\nvar_dump($color->getHex(true, false));\n\n// get the RGBA value as array (R,G,B 0-255, Alpha 0-1)\nvar_dump($color->getCssRgba(true, true));\n\n// set the RGBA value\n$color->setRgba(0, 0, 255, 64);\n```\n\n----------------------------------------\n\nTITLE: Disabling Document Thumbnails in YAML Configuration\nDESCRIPTION: This YAML configuration snippet shows how to completely disable the thumbnail generation for asset documents in Pimcore. This can be useful to save server resources when document thumbnails are not needed.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/04_Assets/03_Working_with_Thumbnails/05_Document_Thumbnails.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\npimcore:\n    assets:\n        document:\n            thumbnails:\n                enabled: false\n```\n\n----------------------------------------\n\nTITLE: Configuring Initial Workflow Transitions in YAML\nDESCRIPTION: Defines the first set of transitions in the workflow, including rejecting a product and starting the processing. Includes options for adding notes and comments.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/07_Workflow_Management/05_Workflow_Tutorial.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ntransitions:\n    reject_product:\n        from: new\n        to: rejected\n        options:\n            label: 'Reject the product'\n            notes:\n                commentEnabled: true\n                commentRequired: true\n    start_processing:\n        from: new\n        to: update_content\n        options:\n            label: 'Start processing the product'\n```\n\n----------------------------------------\n\nTITLE: Configuring Perspective Toolbar in YAML\nDESCRIPTION: Example YAML configuration for customizing the toolbar menu in a Pimcore perspective, including hiding menus and specifying submenu items.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/18_Tools_and_Features/13_Perspectives.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n\"[perspectiveName][\\\"toolbar\\\"][i][menuName]\": string (file,marketing,extras,settings,search)\n\"[perspectiveName][\\\"toolbar\\\"][i][menuName][\\\"hidden\\\"]\": boolean\n\"[perspectiveName][\\\"toolbar\\\"][i][menuName][\\\"items\\\"][\\\"itemsName\\\"]\": boolean\n```\n\n----------------------------------------\n\nTITLE: Modify Notification Check Interval Configuration\nDESCRIPTION: YAML configuration to change the interval for checking new unread notifications to 60 seconds.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/18_Tools_and_Features/41_Notifications.md#2025-04-17_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\npimcore_admin:\n    notifications:\n        check_new_notification:\n            interval: 60\n```\n\n----------------------------------------\n\nTITLE: Querying Scheduled Tasks in SQL\nDESCRIPTION: SQL query showing the structure of the schedule_tasks table in the database. It displays the columns and an example row for a publish task.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/18_Tools_and_Features/03_Scheduling.md#2025-04-17_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n`schedule_tasks`\n# id, cid, ctype, date, action, version, active\n'7', '76', 'object', '1474034700', 'publish', NULL, '1'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Available Option Values in Pimcore Select Options\nDESCRIPTION: This snippet demonstrates how to retrieve all available option values from a Select Options enum in Pimcore using the EnumGetValuesTrait.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/01_Object_Classes/01_Data_Types/77_Select_Options.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nTestOptions::getValues();\n```\n\n----------------------------------------\n\nTITLE: Executing Pimcore Core Migrations in PHP\nDESCRIPTION: Command to run Pimcore core migrations after composer update. This is now required manually as automatic execution has been removed.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/23_Installation_and_Upgrade/09_Upgrade_Notes/README.md#2025-04-17_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nbin/console doctrine:migrations:migrate --prefix=Pimcore\\\\Bundle\\\\CoreBundle\n```\n\n----------------------------------------\n\nTITLE: In-Template Caching with Twig in Pimcore\nDESCRIPTION: Twig template example showing how to use Pimcore's in-template caching for navigation menu generation. This allows caching specific portions of a template that are resource-intensive to generate.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/23_Installation_and_Upgrade/03_System_Setup_and_Hosting/09_Performance_Guide.md#2025-04-17_snippet_11\n\nLANGUAGE: twig\nCODE:\n```\n{% set cache = pimcore_cache(\"main_navigation_cache\", 60) %}\n{% if not cache.start() %}\n    {% set navStartNode = document.getProperty('navigation_root') %}\n\n    {% if not navStartNode is instanceof('\\\\Pimcore\\\\Model\\\\Document') %}\n        {% set navStartNode = pimcore_document(1) %}\n    {% endif %}\n\n    {% set mainNavigation = app_navigation_data_links(document, navStartNode) %}\n    <div class=\"container\">\n        ...\n        {{\n            pimcore_render_nav(mainNavigation, 'menu', 'renderMenu', {\n                maxDepth: 2,\n                ulClass: {\n                    0: 'navbar-nav menu-links ml-4 m-auto',\n                    1: 'dropdown dropdown-menu',\n                    'default': 'dropdown-menu dropdown-submenu'\n                }\n            })\n        }}\n        ...\n    </div>\n    {% do cache.end() %}\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Adding Image Display to Product Template\nDESCRIPTION: Final Twig template implementation that includes product image display using thumbnail configuration.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/01_Getting_Started/06_Create_a_First_Project.md#2025-04-17_snippet_6\n\nLANGUAGE: twig\nCODE:\n```\n<div class=\"content\">\n    {% if product.picture %}\n        {{ product.picture.thumbnail(\"content\").html|raw }}\n    {% endif %}\n\n    {{ product.description|raw }}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Pimcore Area Brick Tag Definition\nDESCRIPTION: Definition of the pimcore.area.brick dependency injection tag used for registering custom area bricks that are not automatically discovered by the service.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/20_Extending_Pimcore/13_Dependency_Injection_Tags.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| `pimcore.area.brick` | Used to register your [custom area bricks](../03_Documents/01_Editables/02_Areablock/02_Bricks.md), which are not loaded by the discovering service |\n```\n\n----------------------------------------\n\nTITLE: Installing PDF Generation Tools on Debian-based Linux\nDESCRIPTION: Command to install LibreOffice, pdftotext, Inkscape, and other related tools for PDF generation in Pimcore.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/23_Installation_and_Upgrade/03_System_Setup_and_Hosting/06_Additional_Tools_Installation.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\napt-get install libreoffice libreoffice-script-provider-python libreoffice-math xfonts-75dpi poppler-utils inkscape libxrender1 libfontconfig1 ghostscript\n```\n\n----------------------------------------\n\nTITLE: Configuring Allowed Thumbnail Formats in Pimcore YAML\nDESCRIPTION: This YAML configuration snippet demonstrates how to extend the list of supported thumbnail formats in Pimcore. It includes the default formats and shows where to add custom formats.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/04_Assets/03_Working_with_Thumbnails/README.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\npimcore:\n    assets:\n        thumbnails:\n            allowed_formats:\n                - 'avif'\n                - 'eps'\n                - 'gif'\n                - 'jpeg'\n                - 'jpg'\n                - 'pjpeg'\n                - 'png'\n                - 'svg'\n                - 'tiff'\n                - 'webm'\n                - 'webp'\n                - 'pdf'\n                - 'print' # Add your desired format here\n```\n\n----------------------------------------\n\nTITLE: Configuring Perspective Tree Elements in YAML\nDESCRIPTION: Example YAML configuration for defining custom perspective tree elements, including type, position, and ID for custom views.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/18_Tools_and_Features/13_Perspectives.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\"[perspectiveName][\\\"elementTree\\\"][i][\\\"type\\\"]\": string (documents,objects,assets,customview)\n\"[perspectiveName][\\\"elementTree\\\"][i][\\\"position\\\"]\": string (left,right)\n\"[perspectiveName][\\\"elementTree\\\"][i][\\\"id\\\"]\": integer\n```\n\n----------------------------------------\n\nTITLE: Customizing Storage for Static Pages in Pimcore\nDESCRIPTION: YAML configuration for customizing the local storage path for static pages generated by Pimcore using Flysystem.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/19_Development_Tools_and_Details/20_Static_Page_Generator.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nflysystem:\n    storages:\n        pimcore.document_static.storage:\n            adapter: 'local'\n            visibility: public\n            options:\n                directory: '%kernel.project_dir%/public/var/tmp/pages'\n```\n\n----------------------------------------\n\nTITLE: Importing Pimcore Field Collection Definition in PHP\nDESCRIPTION: Command to import a Pimcore field collection definition from a JSON file. This is used when deploying field collection changes.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/21_Deployment/05_Deployment_Tools.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n./bin/console pimcore:definition:import:fieldcollection /collection_jsonfile_path.json\n```\n\n----------------------------------------\n\nTITLE: Database Table References for Composite Indices\nDESCRIPTION: List of database table patterns that support composite indices in Pimcore, including object query, store, and localized data tables.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/01_Object_Classes/05_Class_Settings/05_Composite_Indices.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nobject_query_*\nobject_store_*\nobject_localized_data_*\nobject_localized_query_*\n```\n\n----------------------------------------\n\nTITLE: Disabling Cache for Included Documents\nDESCRIPTION: Example of disabling the cache when including a document with pimcore_inc.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/02_MVC/02_Template/02_Template_Extensions/README.md#2025-04-17_snippet_9\n\nLANGUAGE: twig\nCODE:\n```\n{{ pimcore_inc(123, null, false) }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Doctrine Migrations in Pimcore Project\nDESCRIPTION: YAML configuration example for setting up Doctrine migrations in a Pimcore project, specifying the migrations path for app-specific migrations.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/19_Development_Tools_and_Details/37_Migrations.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndoctrine_migrations:\n    migrations_paths:\n        'App\\Migrations': '%kernel.project_dir%/src/Migrations'\n```\n\n----------------------------------------\n\nTITLE: Configuring Nginx for WebDAV in Pimcore\nDESCRIPTION: Updated Nginx configuration to support the new WebDAV URL for assets in Pimcore.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/23_Installation_and_Upgrade/09_Upgrade_Notes/README.md#2025-04-17_snippet_13\n\nLANGUAGE: nginx\nCODE:\n```\n# Assets\n....  \nlocation ~* ^(?!/admin|/asset/webdav)(.+?)....\n```\n\n----------------------------------------\n\nTITLE: Benchmark Results Before Cache Optimization\nDESCRIPTION: Apache Benchmark (ab) results showing performance metrics before implementing caching optimizations. Shows request times and connection statistics for 100 requests with 20 concurrent connections.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/23_Installation_and_Upgrade/03_System_Setup_and_Hosting/09_Performance_Guide.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nTime taken for tests:   6.495 seconds\nTime per request:       1299.007 [ms] (mean)\nTime per request:       64.950 [ms] (mean, across all concurrent requests)\n\nConnection Times (ms)\n              min  mean[+/-sd] median   max\nConnect:        0    0   0.4      0       3\nProcessing:   386 1178 209.6   1222    1550\nWaiting:      383 1169 208.5   1215    1539\nTotal:        386 1178 209.6   1222    1551\n```\n\n----------------------------------------\n\nTITLE: Manual Block Mode with Custom Button Position\nDESCRIPTION: Shows how to customize the position of block control buttons in manual mode by wrapping them in a custom div element.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/03_Documents/01_Editables/06_Block.md#2025-04-17_snippet_6\n\nLANGUAGE: twig\nCODE:\n```\n{% pimcoremanualblock \"gridblock\" %}\n    <table>\n        <tr>\n        {% blockiterate %}\n            <td customAttribute=\"{{ pimcore_input(\"myInput\").data }}\">\n                {% do _block.blockStart(false) %}\n                <div style=\"background-color: #fc0; margin-bottom: 10px; padding: 5px; border: 1px solid black;\">\n                    {% do _block.blockControls() %}\n                </div>\n                <div style=\"width:200px; height:200px;border:1px solid black;\">\n                    {{ pimcore_input(\"myInput\") }}\n                </div>\n                {% do _block.blockEnd() %}\n            </td>\n        {% endblockiterate %}\n        </tr>\n    </table>\n{% endpimcoremanualblock %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Event Subscriber Service in YAML\nDESCRIPTION: This YAML configuration sets up an event subscriber service for the application, allowing automatic registration of event subscribers in the specified directory.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/26_Best_Practice/71_Style_Backend_Depending_On_App-Env.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n    # Event subscribers\n    App\\EventSubscriber\\:\n        resource: '../src/EventSubscriber/*'\n        tags: [ 'kernel.event_subscriber' ]\n```\n\n----------------------------------------\n\nTITLE: Enabling Targeting in Personalization Bundle Configuration\nDESCRIPTION: YAML configuration to enable targeting functionality in the PimcorePersonalizationBundle. Targeting is now using an opt-in approach and must be explicitly enabled.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/23_Installation_and_Upgrade/09_Upgrade_Notes/README.md#2025-04-17_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\npimcore_personalization:\n    targeting:\n        enabled: true\n```\n\n----------------------------------------\n\nTITLE: Advanced Block Usage with getCurrent() Method\nDESCRIPTION: Demonstrates how to use the getCurrent() method with Block Editable to conditionally display content based on the iteration index.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/03_Documents/01_Editables/06_Block.md#2025-04-17_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% pimcoreblock \"contentblock\" reload(true) %}\n    {% if _block.current > 0 %}\n        Insert this line only after the first iteration<br />\n        <br />\n    {% endif %}\n\n    <h2>{{ pimcore_input(\"subline\") }}</h2>\n{% endpimcoreblock %}\n```\n\n----------------------------------------\n\nTITLE: Handling Ajax Requests for Static Pages in Pimcore\nDESCRIPTION: JavaScript code snippet demonstrating how to make an Ajax request to a static page in Pimcore using the Fetch API with the necessary XMLHttpRequest header.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/19_Development_Tools_and_Details/20_Static_Page_Generator.md#2025-04-17_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nfetch('/test/page', {\n    headers: {\n        'X-Requested-With': 'XMLHttpRequest',\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Loading Pimcore Objects by Path in Twig Templates\nDESCRIPTION: Example of loading Pimcore objects by their path and accessing properties directly using Twig syntax.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/02_MVC/02_Template/README.md#2025-04-17_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n{% set myObject = pimcore_object_by_path(\"/path/to/my/object\") %}\n{{ myObject.title }}\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variables for Sensitive Data During Installation\nDESCRIPTION: Example of using environment variables to pass sensitive data (like database credentials) during Pimcore installation to avoid exposing it in command line arguments.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/01_Getting_Started/02_Advanced_Installation_Topics/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ PIMCORE_INSTALL_MYSQL_USERNAME=username PIMCORE_INSTALL_MYSQL_PASSWORD=password ./vendor/bin/pimcore-install \\\n  --admin-username=admin --admin-password=admin \\\n  --mysql-database=pimcore \\\n  --no-interaction\n```\n\n----------------------------------------\n\nTITLE: Configuring Frontend Asset Prefixes in Pimcore\nDESCRIPTION: Configuration for setting up CDN or custom frontend prefixes for assets and thumbnails in Pimcore.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/23_Installation_and_Upgrade/03_System_Setup_and_Hosting/03_File_Storage_Setup.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\npimcore:\n    assets:\n        frontend_prefixes:\n            source: https://oreo-12345678990.cloudfront.net/asset\n            thumbnail: https://tavi-12345678990.cloudfront.net/thumbnail\n```\n\n----------------------------------------\n\nTITLE: Setting Global Error Handling Strategy in YAML\nDESCRIPTION: Configuration to set the global error handling strategy to 'stop_on_first_error' for all job runs as a fallback.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/19_Development_Tools_and_Details/08_Generic_Execution_Engine/02_Configuration/02_Configuration.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\npimcore_generic_execution_engine:\n    error_handling: 'stop_on_first_error'\n```\n\n----------------------------------------\n\nTITLE: SettingsStore Installer Service Configuration\nDESCRIPTION: YAML configuration for defining a SettingsStore installer service with bundle injection.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/20_Extending_Pimcore/13_Bundle_Developers_Guide/05_Pimcore_Bundles/01_Installers.md#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n    Pimcore\\Bundle\\DummyBundle\\Installer:\n        public: true\n        arguments:\n            $bundle: \"@=service('kernel').getBundle('PimcoreDummyBundle')\"\n```\n\n----------------------------------------\n\nTITLE: Single Class Override Configuration in Pimcore YAML\nDESCRIPTION: Simplified YAML configuration example showing a single class override mapping for the News object class in Pimcore.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/20_Extending_Pimcore/03_Overriding_Models.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\npimcore:\n    models:\n        class_overrides:\n            'Pimcore\\Model\\DataObject\\News': 'App\\Model\\DataObject\\News'\n```\n\n----------------------------------------\n\nTITLE: Executing Symfony Router Debugger Command\nDESCRIPTION: Command to list all configured Symfony routes in a Pimcore application using Symfony's router debugger CLI tool.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/02_MVC/04_Routing_and_URLs/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./bin/console debug:router\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple State Marking Store in YAML\nDESCRIPTION: Configuration for storing multiple workflow states in a single attribute. Suitable when a subject can be in multiple states simultaneously.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/07_Workflow_Management/02_Marking_Stores.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n   marking_store:\n      type: multiple_state\n      arguments:\n         - workflowState\n```\n\n----------------------------------------\n\nTITLE: Configuring AdminStyleListener in YAML\nDESCRIPTION: YAML configuration for registering the AdminStyleListener to handle custom element styles in Pimcore.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/18_Tools_and_Features/02_Custom_Icons.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nApp\\EventListener\\AdminStyleListener:\n    tags:\n      - { name: kernel.event_listener, event: pimcore.admin.resolve.elementAdminStyle, method: onResolveElementAdminStyle }\n```\n\n----------------------------------------\n\nTITLE: Configuring GDPR Data Extractor in YAML\nDESCRIPTION: YAML configuration for the Pimcore Admin Bundle's GDPR Data Extractor. Defines settings for data object classes, including which classes to include, deletion permissions, and relation attributes to include in exports.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/18_Tools_and_Features/35_GDPR_Data_Extractor.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Default configuration for \"PimcoreAdminBundle\"\npimcore_admin:\n    gdpr_data_extractor:\n\n        # Settings for DataObjects DataProvider\n        dataObjects:\n\n            # Configure which classes should be considered, array key is class name\n            classes:\n\n                # Prototype: \n                #     MY_CLASS_NAME: \n                #               include: true\n                #               allowDelete: false\n                #               includedRelations:\n                #                       - manualSegemens\n                #                       - calculatedSegments\n                #                         \n                -\n\n                    # Set if class should be considered in export.\n                    include:              true\n\n                    # Allow delete of objects directly in preview grid.\n                    allowDelete:          false\n\n                    # List relation attributes that should be included recursively into export.\n                    includedRelations:    []\n```\n\n----------------------------------------\n\nTITLE: In-Template Caching Benchmark Results (After)\nDESCRIPTION: Apache Benchmark results showing page performance after implementing in-template caching for navigation. Shows approximately 20% improvement in response times due to caching resource-intensive template sections.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/23_Installation_and_Upgrade/03_System_Setup_and_Hosting/09_Performance_Guide.md#2025-04-17_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nTime taken for tests:   0.644 seconds\nTime per request:       128.881 [ms] (mean)\nTime per request:       6.444 [ms] (mean, across all concurrent requests)\n\nConnection Times (ms)\n              min  mean[+/-sd] median   max\nConnect:        0    0   0.3      0       1\nProcessing:    41  113  28.6    114     175\nWaiting:       34  109  28.3    111     169\nTotal:         42  113  28.4    114     175\n```\n\n----------------------------------------\n\nTITLE: Using Inherited Values in Pimcore Data Objects\nDESCRIPTION: New helper function to use inherited values in Pimcore Data Objects.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/23_Installation_and_Upgrade/09_Upgrade_Notes/README.md#2025-04-17_snippet_14\n\nLANGUAGE: PHP\nCODE:\n```\nDataObject\\Service::useInheritedValues();\n```\n\n----------------------------------------\n\nTITLE: Ordering Styles with HeadStyle in Twig\nDESCRIPTION: Illustrates how to control the order of style declarations using various methods like offsetSetStyle, appendStyle, and prependStyle. This is crucial for maintaining the correct cascade order in CSS.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/02_MVC/02_Template/02_Template_Extensions/04_HeadStyle.md#2025-04-17_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% do pimcore_head_style().offsetSetStyle(100, customStyles) %}\n\n{% do pimcore_head_style().appendStyle(finalStyles) %}\n\n{% do pimcore_head_style().prependStyle(firstStyles) %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Translation Debugging in Pimcore YAML\nDESCRIPTION: YAML configuration for customizing the translation debugging feature in Pimcore. Allows enabling/disabling the debugging functionality and customizing the parameter name used to trigger translation debugging.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/19_Development_Tools_and_Details/15_Magic_Parameters.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\npimcore:\n    translations:\n        debugging:\n            enabled: false\n            # you could also change the parameter from pimcore_debug_translations to something else\n            parameter: my_custom_parameter\n```\n\n----------------------------------------\n\nTITLE: Deferred Thumbnail Generation in PHP\nDESCRIPTION: Demonstrates how to force immediate thumbnail generation instead of deferring it until needed.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/04_Assets/03_Working_with_Thumbnails/01_Image_Thumbnails.md#2025-04-17_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$asset = Asset\\Image::getById(123);\n$asset->getThumbnail(\"myConfig\", false); // set the 2nd parameter to false\n```\n\n----------------------------------------\n\nTITLE: Adding Additional Log Entries to Job Run in PHP\nDESCRIPTION: Illustrates how to add additional log entries to a job run using the JobRunExtractorInterface. This can be useful for providing extra information about job run cancellation or failure.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/19_Development_Tools_and_Details/08_Generic_Execution_Engine/01_Jobs_and_Jobruns/02_JobRun.md#2025-04-17_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n$this->jobRunExtractor->logMessageToJobRun(\n            $jobRun,   \n            'translation_key',\n            [\n                '%param1%' => $var1,\n                '%param2%' => $var2                \n            ]\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Password Hasher Factory Service\nDESCRIPTION: YAML service configuration for the UserAwarePasswordHasherFactory that handles password hashing for User objects.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/19_Development_Tools_and_Details/10_Security_Authentication/01_Authenticate_Pimcore_Objects.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# The password hasher factory is responsible for verifying the password hash for a given user. As we need some special\n# handling to be able to work with the password field, we use the UserAwarePasswordHasherFactory  to build a dedicated\n# hasher per user. This service is configured in pimcore.security.password_hasher_factories to handle our user model.\nservices:\n    website_demo.security.password_hasher_factory:\n        class: Pimcore\\Security\\Hasher\\Factory\\UserAwarePasswordHasherFactory\n        arguments:\n            - Pimcore\\Security\\Hasher\\PasswordFieldHasher\n            - ['password']\n```\n\n----------------------------------------\n\nTITLE: Listing Available Pimcore CLI Commands\nDESCRIPTION: Command to display all available command line tasks in Pimcore. This command provides a comprehensive list of built-in commands that can be executed via the command line interface.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/22_Administration_of_Pimcore/05_Commandline_Interface.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n./bin/console list\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Resource Event Listeners in YAML\nDESCRIPTION: YAML configuration for adding CSS and JavaScript files to the Pimcore admin backend through event listeners\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/20_Extending_Pimcore/13_Bundle_Developers_Guide/06_Event_Listener_UI.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  # adds additional static files to admin backend\n  App\\EventListener\\PimcoreAdminListener:\n    tags:\n      - { name: kernel.event_listener, event: pimcore.bundle_manager.paths.css, method: addCSSFiles }\n      - { name: kernel.event_listener, event: pimcore.bundle_manager.paths.js, method: addJSFiles }\n```\n\n----------------------------------------\n\nTITLE: Updating Workflow Transitions for Multiple From States in YAML\nDESCRIPTION: Modifies existing transitions to allow multiple starting places, enabling more flexible workflow paths.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/07_Workflow_Management/05_Workflow_Tutorial.md#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ntransitions:\n    reject_product:\n        from: [new, content_prepared]\n        to: rejected\n        options:\n            label: 'Reject the product'\n            notes:\n                commentEnabled: true\n                commentRequired: true\n    start_processing:\n        from: [new, content_prepared]\n        to: update_content\n        options:\n            label: 'Start processing the product'\n            notes:\n                commentEnabled: true\n                commentRequired: false\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Scaling Factor for Image Thumbnails\nDESCRIPTION: YAML configuration to increase the maximum scaling factor for image thumbnails beyond the default limit of 5.0. This is useful for generating very high-resolution thumbnails.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/23_Installation_and_Upgrade/09_Upgrade_Notes/README.md#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n  pimcore:\n    assets:\n      thumbnails:\n        max_scaling_factor: 6.0\n```\n\n----------------------------------------\n\nTITLE: Configuring Pimcore Class Override\nDESCRIPTION: YAML configuration to override the default Pimcore User class with custom implementation.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/19_Development_Tools_and_Details/10_Security_Authentication/01_Authenticate_Pimcore_Objects.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config/config.yaml\npimcore:\n    models:\n        class_overrides:\n            'Pimcore\\Model\\DataObject\\User': 'App\\Model\\DataObject\\User'\n```\n\n----------------------------------------\n\nTITLE: Truncating Recycle Bin Database\nDESCRIPTION: SQL command to clear the recycle bin database table.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/23_Installation_and_Upgrade/07_Updating_Pimcore/10_V6_to_V10.md#2025-04-17_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nTRUNCATE TABLE recyclebin;\n```\n\n----------------------------------------\n\nTITLE: Expression-based Calculated Values in Pimcore\nDESCRIPTION: Examples of using expression language for simple calculated values, showing how to access object properties and context data.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/01_Object_Classes/01_Data_Types/10_Calculated_Value_Type.md#2025-04-17_snippet_0\n\nLANGUAGE: expression\nCODE:\n```\n# print ID of data object\nobject.getId()\n\n# print firstname and lastname of data object\nobject.getFirstname() ~ ' ' ~ object.getLastname()\n\n# check if field is empty\nobject.getText() != '' ? 'yes' : 'no'\n\n# get fieldname of current field\ndata.getFieldname()\n```\n\n----------------------------------------\n\nTITLE: Configuring Symfony Assets Installation in Composer\nDESCRIPTION: Configuration snippet for composer.json to modify the default asset installation behavior in Symfony, allowing relative symlinks instead of file copying.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/23_Installation_and_Upgrade/09_Upgrade_Notes/README.md#2025-04-17_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extra\": {\n    \"symfony-assets-install\": \"relative\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Final Workflow Place and Transition in YAML\nDESCRIPTION: Defines the final 'accepted' place and the 'publish' transition, including role-based access control and additional fields for time tracking.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/07_Workflow_Management/05_Workflow_Tutorial.md#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nplaces:\n    accepted:\n        label: 'Accepted product'\n        color: '#28a013'\n\ntransitions:\n    publish:\n        from: content_prepared\n        to: accepted\n        guard: \"is_fully_authenticated() and is_granted('ROLE_PIMCORE_ADMIN')\"\n        options:\n            label: 'Publish the product'\n            notes:\n                commentEnabled: true\n                commentRequired: true\n                additionalFields:\n                    - name: 'timeWorked'\n                      fieldType: 'input'\n                      title: 'Time Spent'\n                      required: true\n```\n\n----------------------------------------\n\nTITLE: Static Page Generator Benchmark Results (Before)\nDESCRIPTION: Apache Benchmark results before enabling Static Page Generator for a Magazine page. Shows baseline performance metrics for static content delivery.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/23_Installation_and_Upgrade/03_System_Setup_and_Hosting/09_Performance_Guide.md#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nTime taken for tests:   0.803 seconds\nTime per request:       160.651 [ms] (mean)\nTime per request:       8.033 [ms] (mean, across all concurrent requests)\n\nConnection Times (ms)\n              min  mean[+/-sd] median   max\nConnect:        0    0   1.6      0      15\nProcessing:    55  140  47.6    129     274\nWaiting:       53  136  46.8    127     268\nTotal:         57  141  47.7    130     274\n```\n\n----------------------------------------\n\nTITLE: Displaying Pimcore Directory Structure in Markdown Table\nDESCRIPTION: This code snippet presents a markdown table that lists the main directories in a Pimcore project and provides a brief description of each directory's purpose.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/01_Getting_Started/03_Directory_Structure.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Directory                                            | Description                               |\n|------------------------------------------------------|-------------------------------------------|\n| `/bin/`      | Executable files (e.g. bin/console).                                               |\n| `/config/`   | The application configuration.                                                     |\n| `/public/`   | This is the **document root** (public folder) for your project - point your vhost to this directory!  |\n| `/src/`      | The project's PHP code (Services, Controllers, EventListeners, ...)                |\n| `/templates/`| The application templates.                                                     |\n| `/var/`      | Private generated files - not accessible via the web (cache, logs, etc.).          |\n| `/vendor/`   | All third-party libraries are there. It's the default location for packages installed by [Composer](https://getcomposer.org/) / [Packagist](https://packagist.org/). |\n```\n\n----------------------------------------\n\nTITLE: Configuring Valid Languages in System Settings\nDESCRIPTION: Example YAML configuration showing the recommended format for storing valid languages in system_settings.yaml using an array format instead of the previous format.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/23_Installation_and_Upgrade/09_Upgrade_Notes/README.md#2025-04-17_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\npimcore:\n    general:\n        valid_languages:\n            - en\n            - de\n```\n\n----------------------------------------\n\nTITLE: Enabling PimcoreCustomReportsBundle in PHP\nDESCRIPTION: Code snippet to enable the PimcoreCustomReportsBundle in the bundles.php file. This is a prerequisite for using the custom reports feature in Pimcore.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/18_Tools_and_Features/29_Custom_Reports.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nPimcore\\Bundle\\CustomReportsBundle\\PimcoreCustomReportsBundle::class => ['all' => true]\n```\n\n----------------------------------------\n\nTITLE: Configuring Mailer Transports in YAML\nDESCRIPTION: YAML configuration for setting up main and newsletter email transports in Pimcore.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/19_Development_Tools_and_Details/25_Email_Framework/README.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nframework:\n    mailer:\n        transports:\n            main: smtp://user:pass@smtp.example.com:port\n            pimcore_newsletter: smtp://user:pass@smtp.example.com:port\n```\n\n----------------------------------------\n\nTITLE: Configuring Apache Rules for Asset Protection\nDESCRIPTION: Apache .htaccess configuration to restrict access to protected assets and their thumbnails using rewrite rules.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/04_Assets/07_Restricting_Public_Asset_Access.md#2025-04-17_snippet_0\n\nLANGUAGE: apache\nCODE:\n```\nRewriteRule ^protected/.* - [F,L]\nRewriteRule ^var/.*/protected(.*) - [F,L]\nRewriteRule ^cache-buster\\-[\\d]+/protected(.*) - [F,L]\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Page Generation for Subdomains\nDESCRIPTION: YAML configuration to enable static page generation based on a site's main domain, which allows for organized static page output in domain-specific directories.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/23_Installation_and_Upgrade/09_Upgrade_Notes/README.md#2025-04-17_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\npimcore:\n    documents:\n        static_page_router:\n            use_main_domain: true #generates pages in path /public/var/tmp/pages/my-domain.com/en.html\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Cache for Pimcore 11\nDESCRIPTION: This YAML configuration shows how to adapt the Redis cache configuration for Pimcore 11, removing the 'tags' option and using the 'cache.adapter.redis_tag_aware' adapter.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/23_Installation_and_Upgrade/07_Updating_Pimcore/12_V10_to_V11.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nframework:\n    cache:\n        pools:\n            pimcore.cache.pool:\n                #tags: true // this line needs to be removed\n                public: true \n                default_lifetime: 31536000  # 1 year\n                adapter: cache.adapter.redis_tag_aware # use this instead of pimcore.cache.adapter.redis_tag_aware\n                ...\n```\n\n----------------------------------------\n\nTITLE: PHPStan Analysis Levels Table in Markdown\nDESCRIPTION: Markdown table documenting PHPStan's different analysis levels and their corresponding checks. The table progresses from basic checks at level 0 to advanced nullable type checking at level 8.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/19_Development_Tools_and_Details/29_Testing/02_Core_Tests.md#2025-04-17_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n| Level | Checks                                                                                                                                                                         |\n| ----- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| 0     | basic checks, unknown classes, unknown functions, unknown methods called on $this, wrong number of arguments passed to those methods and functions, always undefined variables |\n| 1     | possibly undefined variables, unknown magic methods and properties on classes with __call and __get                                                                            |\n| 2     | unknown methods checked on all expressions (not just $this), validating PHPDocs                                                                                                |\n| 3     | return types, types assigned to properties                                                                                                                                     |\n| 4     | basic dead code checking - always false instanceof and other type checks, dead else branches, unreachable code after return; etc.                                              |\n| 5     | checking types of arguments passed to methods and functions                                                                                                                    |\n| 6     | check for missing typehints                                                                                                                                                    |\n| 7     | report partially wrong union types                                                                                                                                             |\n| 8     | report calling methods and accessing properties on nullable types                                                                                                              |\n```\n\n----------------------------------------\n\nTITLE: Key Bindings Configuration in YAML\nDESCRIPTION: YAML configuration for setting up custom key bindings in Pimcore admin interface\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/20_Extending_Pimcore/13_Bundle_Developers_Guide/06_Event_Listener_UI.md#2025-04-17_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\npimcore_admin:\n    user:\n        default_key_bindings:\n            glossary:\n                key: 'G'\n                action: glossary\n                alt: true\n                shift: true\n```\n\n----------------------------------------\n\nTITLE: Accessing Brick Parameters in Twig\nDESCRIPTION: Shows how to access brick-specific parameters within a brick template.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/03_Documents/01_Editables/02_Areablock/README.md#2025-04-17_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{{ param1 }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Read and Write Targets for Admin System Settings in YAML\nDESCRIPTION: This YAML snippet demonstrates how to set both read and write targets for admin system settings to 'settings-store' in the Pimcore configuration.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/18_Tools_and_Features/26_Appearance_and_Branding.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\npimcore_admin:\n    config_location:\n        admin_system_settings:\n            write_target:\n                type: 'settings-store'\n            read_target:\n                type: 'settings-store'\n```\n\n----------------------------------------\n\nTITLE: Listing JSON Array Columns in MySQL Database for Pimcore 11 Upgrade\nDESCRIPTION: This bash script lists columns that contain the 'json_array' type, which needs to be changed to 'json' when upgrading to Pimcore 11, as 'json_array' is removed in doctrine/dbal 3.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/23_Installation_and_Upgrade/07_Updating_Pimcore/12_V10_to_V11.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmysqldump -u <USERNAME> -p <PASSWORD> --no-data <DATABASENAME> | grep -i json_array\n```\n\n----------------------------------------\n\nTITLE: Generating URLs with pimcore_url\nDESCRIPTION: Example showing how to generate URLs using the pimcore_url function with an object parameter. This uses Pimcore's link generator for the object.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/02_MVC/02_Template/02_Template_Extensions/README.md#2025-04-17_snippet_15\n\nLANGUAGE: twig\nCODE:\n```\n{% set object = pimcore_object(769) %}\n{{ pimcore_url({'object': object}) }}\n```\n\n----------------------------------------\n\nTITLE: Exception-Safe Editable Rendering in Twig\nDESCRIPTION: This snippet shows how to render editables in a way that allows exceptions to be thrown properly. Using the render() method instead of relying on __toString prevents Pimcore from catching exceptions, which is useful for debugging, especially with complex editables like areablocks.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/03_Documents/01_Editables/README.md#2025-04-17_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n<h1>{{ pimcore_input(\"headline\").render()|raw }}</h1>\n```\n\n----------------------------------------\n\nTITLE: Overriding Pimcore Constants\nDESCRIPTION: Example of overriding Pimcore's default constants by defining them in a custom constants.php file.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/01_Getting_Started/04_Configuration.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n// to use this file you have to rename it to constants.php\n// you can use this file to overwrite the constants defined in lib/Bootstrap.php\n\ndefine(\"PIMCORE_CLASS_DIRECTORY\", \"/my/tmp/path\");\n\n```\n\n----------------------------------------\n\nTITLE: Pimcore Object Data Type Storage Example - Text Fields\nDESCRIPTION: SQL table structure showing how text-based data types are stored in object_store tables\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/19_Development_Tools_and_Details/05_Database_Model.md#2025-04-17_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nInput varchar(255) NULL\nTextarea longtext NULL\nwysiwyg longtext NULL\npassword varchar(255) NULL\n```\n\n----------------------------------------\n\nTITLE: Enabling/Disabling Maintenance Mode via CLI\nDESCRIPTION: Console commands to enable or disable Pimcore's maintenance mode from the command line interface.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/20_Extending_Pimcore/15_Maintenance_Mode.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nbin/console pimcore:maintenance-mode --enable\nbin/console pimcore:maintenance-mode --disable\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Actions for Pimcore Workflows in YAML\nDESCRIPTION: Specifies the structure for configuring global actions in a Pimcore workflow. It includes options for setting labels, icons, object layouts, guards, and state changes. It also allows for configuring notes and custom HTML rendering.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/07_Workflow_Management/01_Configuration_Details/README.md#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nglobalActions:\n    -\n        label:                ~\n        iconClass:            ~\n        objectLayout:         false\n        guard:                ~\n        saveSubject:          false\n        to:                   []\n        notes:\n            commentEnabled:       false\n            commentRequired:      false\n            commentSetterFn:      ~\n            commentGetterFn:      ~\n            type:                 'Status update'\n            title:                ~\n            additionalFields:\n                -\n                    name:                 ~ # Required\n                    fieldType:            ~ # One of \"input\"; \"textarea\"; \"select\"; \"datetime\"; \"date\"; \"user\"; \"checkbox\", Required\n                    title:                ~\n                    required:             false\n                    setterFn:             ~\n                    fieldTypeSettings:    []\n        customHtml:\n            service: 'App\\Service\\Workflow\\CustomHtmlService'\n            position: 'top'\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Layout Type in Pimcore YAML Configuration\nDESCRIPTION: This YAML configuration extends the Pimcore objects class definitions to include a custom layout type. It maps the layout type name to its corresponding PHP class.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/20_Extending_Pimcore/13_Bundle_Developers_Guide/12_Adding_Object_ Layout_types.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\npimcore:\n    objects:\n        class_definitions:\n            layout:\n                map:\n                  myLayoutType: \\App\\Model\\DataObject\\ClassDefinition\\Layout\\MyLayoutType\n```\n\n----------------------------------------\n\nTITLE: Setting User Modification for Versioning in PHP\nDESCRIPTION: PHP code example showing how to set the userModification when saving an object in Pimcore. This ensures the correct user is shown in the version history.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/18_Tools_and_Features/01_Versioning.md#2025-04-17_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$object->setUserModification(0);\n$object->save();\n```\n\n----------------------------------------\n\nTITLE: JavaScript Key Binding Implementation\nDESCRIPTION: JavaScript class implementation for registering custom key bindings in Pimcore UI\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/20_Extending_Pimcore/13_Bundle_Developers_Guide/06_Event_Listener_UI.md#2025-04-17_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\npimcore.registerNS(\"pimcore.bundle.glossary.startup\");\n\npimcore.bundle.glossary.startup = Class.create({\n    initialize: function () {\n        document.addEventListener(pimcore.events.preRegisterKeyBindings, this.registerKeyBinding.bind(this));\n    },\n    \n    registerKeyBinding: function(e) {\n        const user = pimcore.globalmanager.get('user');\n        if (user.isAllowed(\"glossary\")) {\n            pimcore.helpers.keyBindingMapping.glossary = function() {\n                pimcoreBundleGlossary.editGlossary();\n            }\n        }\n    }\n});\n\nconst pimcoreBundleGlossary = new pimcore.bundle.glossary.startup();\n```\n\n----------------------------------------\n\nTITLE: Implementing Package Version Trait in Pimcore Bundle\nDESCRIPTION: PHP implementation of a Pimcore bundle class using PackageVersionTrait to handle composer package versioning.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/20_Extending_Pimcore/13_Bundle_Developers_Guide/05_Pimcore_Bundles/README.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndeclare(strict_types=1);\n\nnamespace Company\\FooBundle;\n\nuse Pimcore\\Extension\\Bundle\\AbstractPimcoreBundle;\nuse Pimcore\\Extension\\Bundle\\Traits\\PackageVersionTrait;\n\nclass FooBundle extends AbstractPimcoreBundle\n{\n    use PackageVersionTrait;\n\n    protected function getComposerPackageName(): string\n    {\n        // getVersion() will use this name to read the version from\n        // PackageVersions and return a normalized value\n        return 'company/foo-bundle';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Root Codeception Setup\nDESCRIPTION: Root-level Codeception configuration that includes test directory settings and memory limits.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/19_Development_Tools_and_Details/29_Testing/01_Application_Testing.md#2025-04-17_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nsettings:\n    memory_limit: 1024M\n    colors: true\npaths:\n    output: var/log\ninclude:\n  - tests\n```\n\n----------------------------------------\n\nTITLE: Redirect Log Entry Example\nDESCRIPTION: Example of a redirect log entry showing timestamp, IP address, and redirect details.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/19_Development_Tools_and_Details/07_Logging.md#2025-04-17_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n2021-04-26T14:03:20+0200 : 10.242.2.255          Custom-Redirect ID: 1, Source: /asdsad/redirectsource/asd -> /en/Events\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Admin Route Name\nDESCRIPTION: Optional configuration to specify a custom route name for the admin entry point. This is required for generating login as user links in the user administration interface.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/19_Development_Tools_and_Details/40_Custom_Admin_Login_Entry_Point.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\npimcore_admin:\n    custom_admin_route_name: myCustomAdminRoute\n```\n\n----------------------------------------\n\nTITLE: Disable All Notifications Configuration\nDESCRIPTION: YAML configuration to completely disable the notifications system in Pimcore admin interface.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/18_Tools_and_Features/41_Notifications.md#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\npimcore_admin:\n    notifications:\n        enabled: false\n```\n\n----------------------------------------\n\nTITLE: Registering Translation Domains in YAML\nDESCRIPTION: YAML configuration for registering custom translation domains to be considered valid in Pimcore.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/23_Installation_and_Upgrade/09_Upgrade_Notes/README.md#2025-04-17_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\npimcore:\n    translations:\n        domains:\n            - site_1\n            - site_2\n```\n\n----------------------------------------\n\nTITLE: Table Data Storage Format Example\nDESCRIPTION: Example of how table data is stored in the database TEXT column, with columns separated by '|' and rows by line breaks.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/01_Object_Classes/01_Data_Types/90_Table.md#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\none|two|three\nfour|five|six\nseven|eight|nine\n```\n\n----------------------------------------\n\nTITLE: Media Query Handling in PHP\nDESCRIPTION: Examples of handling media queries in thumbnail configurations and generating responsive images.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/04_Assets/03_Working_with_Thumbnails/01_Image_Thumbnails.md#2025-04-17_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$a = Asset::getById(71);\n\n// list all available medias in \"galleryCarousel\" thumbnail configuration\np_r(array_keys(Asset\\Image\\Thumbnail\\Config::getByName(\"galleryCarousel\")->getMedias()));\n\n// get the <picture> element for \"galleryCarousel\" => default behavior\n$a->getThumbnail(\"galleryCarousel\")->getHtml();\n\n// get path of thumbnail for media query min-width: 940px\n$a->getThumbnail(\"galleryCarousel\")->getMedia(\"(min-width: 940px)\");\n\n// get <img> tag for media query min-width: 320px including @srcset 2x\n$a->getThumbnail(\"galleryCarousel\")->getMedia(\"(min-width: 320px)\")->getHtml();\n\n// get 2x thumbnail path for media query min-width: 320px\n$a->getThumbnail(\"galleryCarousel\")->getMedia(\"(min-width: 320px)\", 2);\n```\n\n----------------------------------------\n\nTITLE: Installing PngQuant on Debian-based Linux\nDESCRIPTION: Command to install PngQuant, an image optimizer for PNG files, using apt-get package manager.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/23_Installation_and_Upgrade/03_System_Setup_and_Hosting/06_Additional_Tools_Installation.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\napt-get install pngquant\n```\n\n----------------------------------------\n\nTITLE: CSS for Multi-Level Navigation Display Control\nDESCRIPTION: CSS rules for controlling the visibility of nested navigation levels, showing only the active branch of a multi-level navigation menu up to 3 levels deep.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/03_Documents/03_Navigation.md#2025-04-17_snippet_6\n\nLANGUAGE: css\nCODE:\n```\n#navigation ul li ul {\n    display:none;\n}\n\n#navigation ul li.active ul {\n    display:block;\n}\n\n#navigation ul li.active ul li ul {\n    display:none;\n}\n\n#navigation ul li.active ul li.active ul {\n    display:block;\n}\n\n#navigation ul li.active ul li.active ul li ul {\n    display:none;\n}\n\n#navigation ul li.active ul li.active ul li.active ul{\n    display:block;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis for Pimcore Caching\nDESCRIPTION: Redis configuration settings recommended for Pimcore caching. It sets the maximum memory and memory policy to ensure proper caching behavior.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/23_Installation_and_Upgrade/01_System_Requirements.md#2025-04-17_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\nmaxmemory 768mb\n                   \nmaxmemory-policy volatile-lru   \nsave \"\"\n```\n\n----------------------------------------\n\nTITLE: Installing PimcoreCustomReportsBundle via Command Line\nDESCRIPTION: Shell command to install the PimcoreCustomReportsBundle using the Pimcore console command. This step is necessary after enabling the bundle in the configuration.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/18_Tools_and_Features/29_Custom_Reports.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nbin/console pimcore:bundle:install PimcoreCustomReportsBundle\n```\n\n----------------------------------------\n\nTITLE: Rendering First-Level Meta Navigation in Twig\nDESCRIPTION: Demonstrates how to render only the first level of a navigation menu with custom CSS classes. Shows both the direct renderer call and the alternative render function approach.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/03_Documents/03_Navigation.md#2025-04-17_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{{ pimcore_nav_renderer('menu').renderMenu(mainNavigation,{\n    maxDepth: 1,\n    ulClass: 'nav navbar-nav'\n}) | raw }}\n\n{#alternatively, you can use the render function to use the given renderer and render method#}\n<div class=\"my-menu\">\n    {# the menu() shortcut is not available in twig #}\n    {{ pimcore_render_nav(mainNavigation, 'menu', 'renderMenu', {\n        maxDepth: 1,\n        ulClass: 'nav navbar-nav'\n    }) }}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Image Adapter Service in YAML for Pimcore\nDESCRIPTION: This YAML configuration specifies the image processing adapter to be used by Pimcore. It sets the GD adapter as the implementation for the AdapterInterface and ensures the service is public. The example uses GD, but Imagick could be used instead.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/04_Assets/03_Working_with_Thumbnails/01_Image_Thumbnails.md#2025-04-17_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nservices: \n    Pimcore\\Image\\AdapterInterface:\n        alias: Pimcore\\Image\\Adapter\\GD\n        public: true\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Product Template in Twig\nDESCRIPTION: Initial Twig template for product display with editmode check and product relation editable.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/01_Getting_Started/06_Create_a_First_Project.md#2025-04-17_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n{% extends 'layout.html.twig' %}\n\n{% block content %}\n    <h1>{{ pimcore_input(\"headline\", {\"width\": 540}) }}</h1>\n\n    <div class=\"product-info\">\n        {% if editmode %}\n            {{ pimcore_relation(\"product\") }}\n        {% else %}\n            <!-- Product information-->\n        {% endif %}\n    </div>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Development Mode Configuration for Pimcore\nDESCRIPTION: Environment variable configuration to enable development mode for enhanced debugging features.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/19_Development_Tools_and_Details/13_Debugging.md#2025-04-17_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\nPIMCORE_DEV_MODE=true\n```\n\n----------------------------------------\n\nTITLE: ICC Color Profile Configuration in YAML\nDESCRIPTION: YAML configuration for ICC color profiles in Pimcore for CMYK to RGB conversion.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/04_Assets/03_Working_with_Thumbnails/01_Image_Thumbnails.md#2025-04-17_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\npimcore:\n    assets:\n        # Absolute path to default ICC RGB profile (if no embedded profile is given)\n        icc_rgb_profile: null\n\n        # Absolute path to default ICC CMYK profile (if no embedded profile is given)\n        icc_cmyk_profile: null\n```\n\n----------------------------------------\n\nTITLE: Configuring Nginx for Pimcore Production Environment\nDESCRIPTION: This Nginx configuration is designed for a Pimcore production environment. It focuses on security and includes SSL configuration. The configuration redirects all HTTP traffic to HTTPS and sets up proper handling for .well-known locations.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/23_Installation_and_Upgrade/03_System_Setup_and_Hosting/02_Nginx_Configuration.md#2025-04-17_snippet_1\n\nLANGUAGE: nginx\nCODE:\n```\nupstream php-pimcore10 {\n    server unix:/var/run/php/pimcore.sock;\n}\n\nmap $args $static_page_root {\n    default                                 /var/tmp/pages;\n    \"~*(^|&)pimcore_editmode=true(&|$)\"     /var/nonexistent;\n    \"~*(^|&)pimcore_preview=true(&|$)\"      /var/nonexistent;\n    \"~*(^|&)pimcore_version=[^&]+(&|$)\"     /var/nonexistent;\n}\n\nserver {\n    listen 80;\n    listen [::]:80;\n\n    server_name YOUPROJECT.local;\n\n    root /var/www/pimcore/public;\n\n    # We accept .well-known in case of acme challenge (e.g. letsencrypt)\n    # Everything else, however, is return hostname with / location\n    # A good reference as explaination can be found here:\n    # https://www.digitalocean.com/community/tutorials/understanding-nginx-server-and-location-block-selection-algorithms#matching-location-blocks\n    location ~* /\\.well-known/ {\n      try_files $uri /;\n    }\n\n    # Please note that return is cheaper than redirect    \n    # See: https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/#taxing-rewrites\n    location / {\n       return 301 https://$host$request_uri;\n    } \n}\n\n# SSL-related configuration as recommended as \"intermediate\" by mozilla\n# See: https://ssl-config.mozilla.org/\n# This configuration utilizes nginx 1.17.7, OpenSSL 1.1.1d \n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Codeception Test Setup\nDESCRIPTION: Initial Codeception configuration file that defines test directories, namespaces and basic behavior for custom test setup.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/19_Development_Tools_and_Details/29_Testing/01_Application_Testing.md#2025-04-17_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nnamespace: Tests\nsupport_namespace: Support\nactor_suffix: Tester\npaths:\n    tests: .\n    output: ./_output\n    data: ./Support/Data\n    support: ./Support\n    envs: ./_envs\nsettings:\n    bootstrap: _bootstrap.php\n    colors: true\nparams:\n    - env\nextensions:\n    enabled:\n        - Codeception\\Extension\\RunFailed\n```\n\n----------------------------------------\n\nTITLE: Modern Approach to Capturing Style Declarations in Twig\nDESCRIPTION: Shows the recommended method for capturing and adding style declarations as of Pimcore 11.4.0. This approach uses a combination of Twig's set tag and the appendStyle method.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/02_MVC/02_Template/02_Template_Extensions/04_HeadStyle.md#2025-04-17_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n{% set inlineStyle %}\n    body {\n        background-color: red\n    }\n{% endset %}\n{% do pimcore_head_style().appendStyle(inlineStyle) %}\n\n{# Example if you wish to specify additional attributes for the <style> tag #}\n{% do pimcore_head_style().appendStyle(inlineStyle, {\"media\": \"screen\"}) %}\n```\n\n----------------------------------------\n\nTITLE: Registering Bundle Setup Subscriber in YAML Configuration\nDESCRIPTION: YAML configuration to register the BundleSetupSubscriber service in Symfony, making it available to modify bundle lists during installation.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/01_Getting_Started/02_Advanced_Installation_Topics/README.md#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n    # default configuration for services in *this* file\n    _defaults:\n        # automatically injects dependencies in your services\n        autowire: true\n        # automatically registers your services as commands, event subscribers, etc.\n        autoconfigure: true\n        # this means you cannot fetch services directly from the container via $container->get()\n        # if you need to do this, you can override this setting on individual services\n        public: false\n\n    # ---------------------------------------------------------\n    # Event Subscribers\n    # ---------------------------------------------------------\n    App\\EventSubscriber\\BundleSetupSubscriber: ~\n```\n\n----------------------------------------\n\nTITLE: Full Page Cache Benchmark Results (Before)\nDESCRIPTION: Apache Benchmark results showing homepage performance before implementing full page cache. The metrics show baseline performance for 100 requests with 20 concurrent connections.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/23_Installation_and_Upgrade/03_System_Setup_and_Hosting/09_Performance_Guide.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nTime taken for tests:   0.704 seconds\nTime per request:       140.810 [ms] (mean)\nTime per request:       7.040 [ms] (mean, across all concurrent requests)\n\nConnection Times (ms)\n              min  mean[+/-sd] median   max\nConnect:        0    0   0.3      0       1\nProcessing:    45  120  27.7    123     166\nWaiting:       45  120  27.7    122     165\nTotal:         46  120  27.5    123     166\n```\n\n----------------------------------------\n\nTITLE: Special Context Variables Example\nDESCRIPTION: Example showing how to use special context variables like fileObject, relatedObject, and component in logging.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/18_Tools_and_Features/17_Application_Logger.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Controller;\n\nuse Pimcore\\Bundle\\ApplicationLoggerBundle\\ApplicationLogger;\nuse Pimcore\\Bundle\\ApplicationLoggerBundle\\FileObject;\nuse Pimcore\\Model\\DataObject\\AbstractObject;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\nclass TestController\n{\n    public function testAction(ApplicationLogger $logger): Response\n    {\n        $fileObject = new FileObject('some interesting data');\n        $myObject   = DataObject::getById(73);\n        \n        $logger->error('my error message', [\n            'fileObject'    => $fileObject,\n            'relatedObject' => $myObject, \n            'component'     => 'different component',\n            'source'        => 'Stack trace or context-relevant information'\n        ]);\n        \n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Layout Selection in PHP\nDESCRIPTION: PHP event listener implementation that modifies Pimcore backend UI data to show specific custom layouts based on product hierarchy levels. Handles layout selection, modification, and removal of unused layouts.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/26_Best_Practice/83_Showing_Custom_Layouts_based_on_Object_Data.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\EventListener;\n\nuse ... \n\nclass MyEventListener\n{\n    public function selectCustomLayout(GenericEvent $event): void\n    {\n        $object = $event->getArgument('object');\n        if ($object instanceof Product) {\n            //get product hierarchy level\n            $hierarchyLevel = $object->getLevel(); \n\n            //data element that is send to Pimcore backend UI\n            $data = $event->getArgument('data');\n\n            switch ($hierarchyLevel) {\n                case 'Article':\n                    $data = $this->doModifyCustomLayouts($data, $object, 2, [0, 1]);\n                    break;\n                case 'Color Variant':\n                    $data = $this->doModifyCustomLayouts($data, $object, 1, [0, 2]);\n                    break;\n                default:\n                    $data = $this->doModifyCustomLayouts($data, $object, 0, [1, 2]);\n                    break;\n            }\n            \n            $event->setArgument('data', $data);\n        }\n    }\n\n    private function doModifyCustomLayouts(array $data, Product $object, int $customLayoutToSelect, array $layoutsToRemove): array\n    {\n        //set current layout to subcategory layout\n        $data['currentLayoutId'] = $customLayoutToSelect;\n        $customLayout = CustomLayout::getById($customLayoutToSelect);\n        $data['layout'] = $customLayout->getLayoutDefinitions();\n        Service::enrichLayoutDefinition($data['layout'], $object);\n        \n        if (!empty($layoutsToRemove)) {\n            //remove main layout from valid layouts\n            $validLayouts = $data['validLayouts'];\n            foreach($validLayouts as $key => $validLayout) {\n                if(in_array($validLayout['id'], $layoutsToRemove)) {\n                    unset($validLayouts[$key]);\n                }\n            }\n            $data['validLayouts'] = array_values($validLayouts);            \n        }\n\n        return $data; \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing JPEGOptim on Debian-based Linux\nDESCRIPTION: Commands to download and install JPEGOptim, an image optimizer for JPEG files used in Pimcore.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/23_Installation_and_Upgrade/03_System_Setup_and_Hosting/06_Additional_Tools_Installation.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nwget https://github.com/imagemin/jpegoptim-bin/raw/main/vendor/linux/jpegoptim -O /usr/local/bin/jpegoptim\nchmod 0755 /usr/local/bin/jpegoptim\n```\n\n----------------------------------------\n\nTITLE: Alternative Controller Method for Document Parameters\nDESCRIPTION: A more convenient controller approach that directly renders the template with passed parameters.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/02_MVC/02_Template/02_Template_Extensions/README.md#2025-04-17_snippet_12\n\nLANGUAGE: php\nCODE:\n```\npublic function otherDocumentAction(Request $request): Response\n{\n    return $this->render(\":Default:someOtherDocument.html.twig\", ['parameterToPass' => $request->query->get('parameterToPass')]);\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Output of Table Editable getData() Method in PHP\nDESCRIPTION: This snippet shows the structure of the array returned by the getData() method of the Table Editable. It represents the table data as a multi-dimensional array.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/03_Documents/01_Editables/34_Table.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\narray(4) {\n  [0] => array(3) {\n    [0] => string(14) \"Attribute name\"\n    [1] => string(5) \"Value\"\n    [2] => string(17) \"Additional column\"\n  }\n  [1] => array(3) {\n    [0] => string(5) \"Color\"\n    [1] => string(5) \"Black\"\n    [2] => string(0) \"\"\n  }\n  [2] => array(3) {\n    [0] => string(4) \"Size\"\n    [1] => string(5) \"Large\"\n    [2] => string(0) \"\"\n  }\n  [3] => array(3) {\n    [0] => string(12) \"Availability\"\n    [1] => string(12) \"Out of stock\"\n    [2] => string(0) \"\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Pimcore Glossary Bundle\nDESCRIPTION: Command to install the PimcoreGlossaryBundle which is required for using the glossary feature.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/18_Tools_and_Features/21_Glossary.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbin/console pimcore:bundle:install PimcoreGlossaryBundle\n```\n\n----------------------------------------\n\nTITLE: Pimcore Object Data Type Storage Example - Select Fields\nDESCRIPTION: SQL table structure showing how selection data types are stored in object_store tables\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/19_Development_Tools_and_Details/05_Database_Model.md#2025-04-17_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSelect varchar(255) NULL\nUser varchar(255) NULL\nCountry varchar(255) NULL\nLanguage varchar(255) NULL\nMultiselection text NULL\nCountries text NULL\nLanguages text NULL\n```\n\n----------------------------------------\n\nTITLE: Checking Pimcore System Requirements via CLI\nDESCRIPTION: Command to check Pimcore system requirements using the CLI. This requires the pimcore/system-info-bundle package to be installed.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/23_Installation_and_Upgrade/03_System_Setup_and_Hosting/06_Additional_Tools_Installation.md#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nbin/console pimcore:system:requirements:check\n```\n\n----------------------------------------\n\nTITLE: Checking Editmode in Renderlet Twig Template\nDESCRIPTION: This snippet demonstrates how to check the editmode status within a Renderlet Twig template, allowing for conditional rendering based on whether the page is in edit mode or not.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/03_Documents/01_Editables/28_Renderlet.md#2025-04-17_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n{% if editmode %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic Execution Engine in YAML\nDESCRIPTION: Default configuration for the Generic Execution Engine, specifying error handling and execution context with a default translations domain.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/19_Development_Tools_and_Details/08_Generic_Execution_Engine/02_Configuration/02_Configuration.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\npimcore_generic_execution_engine:\n    error_handling: 'continue_on_error'\n    execution_context:\n        default:\n            translations_domain: admin\n```\n\n----------------------------------------\n\nTITLE: Configuring Nginx Rules for Asset Protection\nDESCRIPTION: Nginx server configuration to restrict access to protected assets and their thumbnails using location blocks.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/04_Assets/07_Restricting_Public_Asset_Access.md#2025-04-17_snippet_1\n\nLANGUAGE: nginx\nCODE:\n```\nlocation ~ ^/protected/.* {\n  return 403;\n}\n\nlocation ~ ^/var/.*/protected(.*) {\n  return 403;\n}\n\nlocation ~ ^/cache-buster\\-[\\d]+/protected(.*) {\n  return 403;\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Deprecated Security Configuration in YAML\nDESCRIPTION: Instructions to remove the deprecated 'enable_authenticator_manager' setting from the security.yaml file. This change is necessary due to Symfony 6.2 deprecating this setting.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/19_Development_Tools_and_Details/10_Security_Authentication/05_Authenticator_Based_Security.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsecurity:\n    # Remove the following line:\n    # enable_authenticator_manager: true\n```\n\n----------------------------------------\n\nTITLE: Installing PimcoreGenericExecutionEngineBundle in Pimcore\nDESCRIPTION: Command to install the PimcoreGenericExecutionEngineBundle using the Pimcore console. This bundle is required to use the Generic Execution Engine feature.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/19_Development_Tools_and_Details/08_Generic_Execution_Engine/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbin/console pimcore:bundle:install PimcoreGenericExecutionEngineBundle\n```\n\n----------------------------------------\n\nTITLE: Disabling Usage Statistics Configuration\nDESCRIPTION: YAML configuration to disable usage statistics logging in Pimcore.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/19_Development_Tools_and_Details/07_Logging.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\npimcore:\n    general:\n        disable_usage_statistics: true\n```\n\n----------------------------------------\n\nTITLE: Capturing Style Declarations with HeadStyle in Twig (Deprecated)\nDESCRIPTION: Demonstrates the deprecated method of capturing style declarations using captureStart() and captureEnd(). This approach allows for programmatic generation of CSS within Twig templates.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/02_MVC/02_Template/02_Template_Extensions/04_HeadStyle.md#2025-04-17_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n{% do pimcore_head_style().captureStart() %}\n    body {\n        background-color: red\n    }\n{% do pimcore_head_style().captureEnd() %}\n```\n\n----------------------------------------\n\nTITLE: Migration Console Commands\nDESCRIPTION: Example Bash commands for managing Pimcore migrations with different prefixes and bundles.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/20_Extending_Pimcore/13_Bundle_Developers_Guide/05_Pimcore_Bundles/01_Installers.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# only run migrations for the Pimcore core\n./bin/console doctrine:migrations:migrate --prefix=Pimcore\\\\Bundle\\\\CoreBundle\n\n# list migrations for the CMF bundle\n./bin/console doctrine:migrations:list --prefix=CustomerManagementFrameworkBundle\\\\Migrations\n\n# run all migrations\n./bin/console doctrine:migrations:migrate\n```\n\n----------------------------------------\n\nTITLE: Configuring Event Listener in YAML\nDESCRIPTION: Service configuration for registering an event listener that handles custom layout selection based on object hierarchy\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/26_Best_Practice/83_Showing_Custom_Layouts_based_on_Object_Data.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n    app.event_listener.my_event_listner:\n        class: App\\EventListener\\MyEventListener\n        tags:\n            - { name: kernel.event_listener, event: pimcore.admin.dataobject.get.preSendData, method: selectCustomLayout }\n```\n\n----------------------------------------\n\nTITLE: Running PHPStan Analysis on Pimcore\nDESCRIPTION: Command to execute PHPStan analysis on Pimcore codebase. It sets a dedicated temporary directory and uses unlimited memory to perform the analysis.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/19_Development_Tools_and_Details/29_Testing/02_Core_Tests.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nTMPDIR=/tmp/[dedicateddir] ./vendor/bin/phpstan analyse --memory-limit=-1\n```\n\n----------------------------------------\n\nTITLE: Querying Processed Scheduled Tasks in SQL\nDESCRIPTION: SQL query showing the state of the schedule_tasks table after a task has been processed. The 'active' column is updated to '0' to indicate completion.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/18_Tools_and_Features/03_Scheduling.md#2025-04-17_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n`schedule_tasks`\n# id, cid, ctype, date, action, version, active\n'8', '76', 'object', '1474034700', 'publish', NULL, '0'\n```\n\n----------------------------------------\n\nTITLE: Executing Pimcore Version Cleanup Maintenance Task\nDESCRIPTION: This command runs the version cleanup maintenance task in Pimcore, which helps in managing versioning data based on configured settings.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/22_Administration_of_Pimcore/02_Cleanup_Data_Storage.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./bin/console pimcore:maintenance -j versioncleanup\n```\n\n----------------------------------------\n\nTITLE: Creating Unix-based Backup for Pimcore\nDESCRIPTION: A basic shell script that creates a comprehensive backup of a Pimcore installation. The script creates a tar archive of the project files and includes a MySQL database dump. Excludes temporary directories like var/tmp, var/log, var/cache, and var/sessions.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/22_Administration_of_Pimcore/01_Backups.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# change directory to your project root \ncd /var/www/your/project/\n\n# create an archive of the entire project root, excluding temporary files\ntar cfv /tmp/my-poor-mans-backup.tar ./\n\n# create the mysql dump\nmysqldump -u youruser -p yourdatabase > /tmp/my-poor-mans-backup.sql \n\n# put the dump into the tar archive\ntar rf /tmp/my-poor-mans-backup.tar /tmp/my-poor-mans-backup.sql\n\n# zip the archive (of course you can also use xz or any other tool) \ngzip /tmp/my-poor-mans-backup.tar\n```\n\n----------------------------------------\n\nTITLE: Installing Pimcore Demo Package\nDESCRIPTION: Command to create a new Pimcore project using the demo package that includes example blueprints\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/01_Getting_Started/00_Installation/01_Webserver_Installation.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nCOMPOSER_MEMORY_LIMIT=-1 composer create-project pimcore/demo my-project\n```\n\n----------------------------------------\n\nTITLE: Automating Pimcore Installation on Web Server\nDESCRIPTION: Command for automating Pimcore installation on a standard web server with parameters for admin credentials, database configuration, and non-interactive mode.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/01_Getting_Started/02_Advanced_Installation_Topics/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./vendor/bin/pimcore-install --admin-username=admin --admin-password=admin \\\n  --mysql-username=username --mysql-password=password --mysql-database=pimcore \\\n  --mysql-host-socket=127.0.0.1 --mysql-port=3306 \\\n  --no-interaction\n```\n\n----------------------------------------\n\nTITLE: Generated HTML for Adaptive Bitrate Video Streaming\nDESCRIPTION: Example HTML output generated by Pimcore's video tag showing how adaptive bitrate streaming is implemented. The HTML includes both MP4 source and MPEG-DASH source for adaptive streaming.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/04_Assets/03_Working_with_Thumbnails/03_Video_Thumbnails.md#2025-04-17_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<video width=\"100%\" height=\"auto\" controls=\"controls\" class=\"pimcore_video\" preload=\"auto\" src=\"blob:http://xyz/01f91372-ddd8-4d3f-ac85-e420432d9704\">\n    <source type=\"video/mp4\" src=\"/videodata/955/video-thumb__955__campaignVideo/Volkswagen-Van.mp4\">\n    <source type=\"application/dash+xml\" src=\"/videodata/955/video-thumb__955__campaignVideo/Volkswagen-Van.mpd\">\n</video>\n```\n\n----------------------------------------\n\nTITLE: Image Editable with High-Res in Twig\nDESCRIPTION: Example of using image editable with high-resolution thumbnail configuration in Twig templates.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/04_Assets/03_Working_with_Thumbnails/01_Image_Thumbnails.md#2025-04-17_snippet_9\n\nLANGUAGE: twig\nCODE:\n```\n{{ pimcore_image('myImage', {'thumbnail': 'contentimages'}) }}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{{ pimcore_image('myImage', {thumbnail: {\n    width: 250,\n    contain: true,\n    highResolution: 2\n}}) }}\n```\n\n----------------------------------------\n\nTITLE: Rendering Link HTML in Frontend\nDESCRIPTION: Shows how to retrieve and render a link's HTML in a Pimcore template.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/01_Object_Classes/01_Data_Types/65_Others.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$object = DataObject::getById(234);\n?>\n\n<ul>\n  <li><?= $object->getMyLink()->getHtml(); ?></li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Creating Deeplinks for Asset Types in Pimcore Admin\nDESCRIPTION: This code block shows how to structure URLs for deeplinks to different asset types in the Pimcore admin interface. Examples are provided for images, documents, folders, and videos.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/20_Extending_Pimcore/23_Deeplinks_into_Admin_Interface.md#2025-04-17_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nhttps://acme.com/admin/login/deeplink?asset_23_image \nhttps://acme.com/admin/login/deeplink?asset_34_document\nhttps://acme.com/admin/login/deeplink?asset_56_folder\nhttps://acme.com/admin/login/deeplink?asset_78_video\n```\n\n----------------------------------------\n\nTITLE: Usage Log Entry Example\nDESCRIPTION: Example of usage log entries showing timestamp, user ID, controller action, and request parameters.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/19_Development_Tools_and_Details/07_Logging.md#2025-04-17_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n2021-04-26T13:18:35+0200 : 2|Pimcore\\Bundle\\AdminBundle\\Controller\\Admin\\Document\\PageController::saveAction|pimcore_admin_document_page_save|{\"task\":\"publish\",\"id\":\"1\",\"data\":\"{\\\"cImage_0\\\":{\\\"data\\\":{\\\"id\\\":337,\\\"path\\\":\\\"\\\\/...\"}\n2021-04-26T13:18:35+0200 : 2|Pimcore\\Bundle\\AdminBundle\\Controller\\Admin\\Asset\\AssetController::getImageThumbnailAction|pimcore_admin_asset_getimagethumbnail|{\"id\":\"3\",\"alt\":\"\",\"height\":\"undefined\",\"thumbnail\":\"portalCarousel\",\"pimcore_editmode\":\"1\"}\n```\n\n----------------------------------------\n\nTITLE: Installing Pimcore Skeleton Package with Docker\nDESCRIPTION: Command to create a new Pimcore project using the skeleton package for experienced developers. Uses PHP 8.2 and sets proper user permissions.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/01_Getting_Started/00_Installation/00_Docker_Based_Installation.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -u `id -u`:`id -g` --rm -v `pwd`:/var/www/html pimcore/pimcore:php8.2-latest composer create-project pimcore/skeleton my-project\n```\n\n----------------------------------------\n\nTITLE: Setting Up MySQL User Permissions for Pimcore\nDESCRIPTION: SQL commands to create a new MySQL user with full permissions on the Pimcore database. These permissions are necessary for Pimcore to function correctly.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/23_Installation_and_Upgrade/03_System_Setup_and_Hosting/05_DB_Setup.md#2025-04-17_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE USER 'project_user'@'localhost' IDENTIFIED BY 'PASSWORD';\nGRANT ALL ON `project_database`.* TO 'project_user'@'localhost';\n```\n\n----------------------------------------\n\nTITLE: Cleaning Recycle Bin for Items Older Than Specified Days\nDESCRIPTION: This command cleans up items in the Pimcore recycle bin that are older than a specified number of days.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/22_Administration_of_Pimcore/02_Cleanup_Data_Storage.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./bin/console  pimcore:recyclebin:cleanup --older-than-days=60\n```\n\n----------------------------------------\n\nTITLE: Installing WebP Support on Debian-based Linux\nDESCRIPTION: Command to install WebP library for WebP image support in Pimcore, using apt-get package manager.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/23_Installation_and_Upgrade/03_System_Setup_and_Hosting/06_Additional_Tools_Installation.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\napt-get install webp\n```\n\n----------------------------------------\n\nTITLE: Registering Event Listener in Symfony Services Configuration\nDESCRIPTION: This YAML configuration registers the PimcoreAdminListener as a service and tags it to listen for the editmode_js event, which is triggered when Pimcore loads JavaScript files for the editmode.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/20_Extending_Pimcore/13_Bundle_Developers_Guide/09_Adding_Document_Editables.md#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  App\\EventListener\\PimcoreAdminListener:\n    tags:\n      - { name: kernel.event_listener, event: pimcore.bundle_manager.paths.editmode_js, method: addJSFiles }\n```\n\n----------------------------------------\n\nTITLE: Cancelling a Job Run in PHP\nDESCRIPTION: Demonstrates how to cancel a job run using the JobExecutionAgentInterface. This method sets the job run state to 'cancelled' and stops its execution.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/19_Development_Tools_and_Details/08_Generic_Execution_Engine/01_Jobs_and_Jobruns/02_JobRun.md#2025-04-17_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n$jobExecutionAgent->cancelJobRun($jobRun->getId());\n```\n\n----------------------------------------\n\nTITLE: Automating Bundle Installation with Pimcore\nDESCRIPTION: Command for installing Pimcore with specific bundles automatically, using the --install-bundles parameter to specify which recommended bundles to install.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/01_Getting_Started/02_Advanced_Installation_Topics/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./vendor/bin/pimcore-install --admin-username=admin --admin-password=admin \\\n--mysql-username=username --mysql-password=password --mysql-database=pimcore \\\n--mysql-host-socket=127.0.0.1 --mysql-port=3306 \\\n--install-bundles=PimcoreApplicationLoggerBundle,PimcoreCustomReportsBundle \\\n--no-interaction\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory\nDESCRIPTION: Command to change into the project's root directory before installation\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/01_Getting_Started/00_Installation/01_Webserver_Installation.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd /your/project\n```\n\n----------------------------------------\n\nTITLE: Symfony WebLink Configuration in YAML\nDESCRIPTION: Shows the necessary Symfony configuration to enable the WebLink component for HTTP/2 Push support. This setting is enabled by default in Pimcore's core config.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/02_MVC/02_Template/02_Template_Extensions/01_HeadLink.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# config.yaml\n\nframework:\n    web_links:\n        enabled: true\n```\n\n----------------------------------------\n\nTITLE: Running Specific Test Suite in Pimcore\nDESCRIPTION: Command to run a specific test suite (in this case, 'Model') using Codeception inside a Docker container. It demonstrates how to target a particular suite of tests.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/19_Development_Tools_and_Details/29_Testing/02_Core_Tests.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose exec php vendor/bin/codecept run -c . Model -vvv\n```\n\n----------------------------------------\n\nTITLE: Reinitializing MySQL Data Directory\nDESCRIPTION: Bash commands to reinitialize the MySQL data directory after changing the lower_case_table_names setting. This process will delete all existing databases, so backup is required before execution.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/23_Installation_and_Upgrade/03_System_Setup_and_Hosting/05_DB_Setup.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf /var/lib/mysql\nmkdir /var/lib/mysql\nchown mysql:mysql /var/lib/mysql\nmysqld --initialize\n```\n\n----------------------------------------\n\nTITLE: Constructing Deeplinks for Object Types in Pimcore Admin\nDESCRIPTION: This snippet illustrates the URL format for creating deeplinks to various object types in the Pimcore admin interface. It includes examples for standard objects, variants, and folders.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/20_Extending_Pimcore/23_Deeplinks_into_Admin_Interface.md#2025-04-17_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nhttps://acme.com/admin/login/deeplink?object_24_object \nhttps://acme.com/admin/login/deeplink?object_98_variant \nhttps://acme.com/admin/login/deeplink?object_66_folder\n```\n\n----------------------------------------\n\nTITLE: Generating Deeplinks for Document Types in Pimcore Admin\nDESCRIPTION: This snippet demonstrates the URL structure for creating deeplinks to various document types in the Pimcore admin interface. It includes examples for pages, snippets, links, hardlinks, and emails.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/20_Extending_Pimcore/23_Deeplinks_into_Admin_Interface.md#2025-04-17_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nhttps://acme.com/admin/login/deeplink?document_123_page \nhttps://acme.com/admin/login/deeplink?document_45_snippet \nhttps://acme.com/admin/login/deeplink?document_67_link \nhttps://acme.com/admin/login/deeplink?document_8_hardlink \nhttps://acme.com/admin/login/deeplink?document_9_email \n```\n\n----------------------------------------\n\nTITLE: Configuring Single State Marking Store in YAML\nDESCRIPTION: Configuration for storing workflow state in a single attribute using setter method. Suitable when a model can only be in one state at a time.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/07_Workflow_Management/02_Marking_Stores.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n   marking_store:\n      type: single_state\n      arguments:\n         - workflowState\n```\n\n----------------------------------------\n\nTITLE: Data Types Table Structure\nDESCRIPTION: Database schema for basic data types including Image, Image Advanced, Video, Checkbox, and Link fields. Details column types and storage formats.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/19_Development_Tools_and_Details/05_Database_Model.md#2025-04-17_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Data Type | Default | Comment |\n| ---- | --------- | ------- | ------- |\n| Image | int(11) | NULL | ID of the image asset |\n| Image Advanced | int(11), text | NULL | Creates a column `(name)__image`(int)  for the image assets id and the column `(name)__hotspots`(text). Hotspots are stored serialized. |\n| Video | text | NULL | Serialized data |\n| Checkbox | tinyint(1) | NULL | Boolean value (1 = true) |\n| Link | text | NULL | Serialized data |\n```\n\n----------------------------------------\n\nTITLE: Registering Admin UI Classic Bundle in Pimcore 11 Kernel\nDESCRIPTION: This PHP code snippet shows how to register the admin-ui-classic-bundle in the Kernel for Pimcore 11, which is necessary after the update.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/23_Installation_and_Upgrade/07_Updating_Pimcore/12_V10_to_V11.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\npublic function registerBundlesToCollection(BundleCollection $collection): void\n{\n    // pimcore bundles\n    $collection->addBundle(new \\Pimcore\\Bundle\\AdminBundle\\PimcoreAdminBundle(), 60);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL Database\nDESCRIPTION: Command to create a new MySQL database for the Pimcore project with UTF-8 character encoding\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/01_Getting_Started/00_Installation/01_Webserver_Installation.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmysql -u root -p -e \"CREATE DATABASE project_database charset=utf8mb4;\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Post-Update Migrations in Composer\nDESCRIPTION: JSON configuration for automatically running doctrine migrations after composer update.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/23_Installation_and_Upgrade/07_Updating_Pimcore/11_Preparing_for_V11.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"post-update-cmd\": [\n    \"./bin/console doctrine:migrations:migrate\"\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Translation Domains in YAML\nDESCRIPTION: YAML configuration for registering valid translation domains in Pimcore\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/20_Extending_Pimcore/13_Bundle_Developers_Guide/README.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\npimcore:\n    translations:\n        domains:\n            - site_1\n            - site_2\n```\n\n----------------------------------------\n\nTITLE: Installing OptiPng on Debian-based Linux\nDESCRIPTION: Command to install OptiPng, another image optimizer for PNG files, using apt-get package manager.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/23_Installation_and_Upgrade/03_System_Setup_and_Hosting/06_Additional_Tools_Installation.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\napt-get install optipng\n```\n\n----------------------------------------\n\nTITLE: Setting Geopolyline Data in PHP for Pimcore\nDESCRIPTION: Shows how to set Geopolyline data in Pimcore using PHP. It creates an array of GeoCoordinates objects representing the points of the polyline path.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/01_Object_Classes/01_Data_Types/40_Geographic_Types.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Pimcore\\Model\\DataObject\\Data\\GeoCoordinates;\n\n$data = [\n    new GeoCoordinates(-33.464671118242684, 150.54428100585938),\n    new GeoCoordinates(-33.913733814316245, 150.73654174804688),\n    new GeoCoordinates(-33.9946115848146, 151.2542724609375)\n];\n$object->setPolyline($data);\n$object->save();\n```\n\n----------------------------------------\n\nTITLE: PHP Controller Action Reference for Book Listing\nDESCRIPTION: Reference path to the PHP controller action that handles book listing functionality in Pimcore.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/03_Documents/07_Predefined_Document_Types.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nApp\\Controller\\BookController::listAction\n```\n\n----------------------------------------\n\nTITLE: Configuring Maintenance Page with External Template\nDESCRIPTION: YAML configuration for customizing the maintenance page template using an external file path. Defines the MaintenancePageListener service for templates located outside a bundle.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/20_Extending_Pimcore/15_Maintenance_Mode.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nPimcore\\Bundle\\CoreBundle\\EventListener\\MaintenancePageListener:\n    calls:\n        - [loadTemplateFromPath, ['/templates/maintenance.html']]\n    tags:\n        - { name: kernel.event_listener, event: kernel.request, method: onKernelRequest, priority: 620 }\n```\n\n----------------------------------------\n\nTITLE: File Path Reference in Markdown\nDESCRIPTION: Markdown reference to localized fields documentation within the Pimcore documentation structure.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/06_Multi_Language_i18n/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n../05_Objects/01_Object_Classes/01_Data_Types/50_Localized_Fields.md#definition-of-required-languages\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Numeric Editable in Twig\nDESCRIPTION: A simple implementation of the numeric editable component in a Twig template. This creates a basic numeric input field that can be edited in the Pimcore admin interface.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/03_Documents/01_Editables/24_Numeric.md#2025-04-17_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ pimcore_numeric(\"myNumber\") }}\n```\n\n----------------------------------------\n\nTITLE: Twig Template Path for Book Listing\nDESCRIPTION: File path reference to the Twig template that renders the book listing view.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/03_Documents/07_Predefined_Document_Types.md#2025-04-17_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\ntemplates/book/list.html.twig\n```\n\n----------------------------------------\n\nTITLE: Text Datatypes Table in Markdown\nDESCRIPTION: Markdown table showing text-based data types including input, textarea, wysiwyg and password fields with their descriptions.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/01_Object_Classes/01_Data_Types/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                     | Description                                                                                                                                                                                                                                                                                                                                                                                                                                                                    |\n|--------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| input                    | text input field                                                                                                                                                                                                                                                                                                                                                                                                                                                                |\n| textarea                 | textarea                                                                                                                                                                                                                                                                                                                                                                                                                                                                        |\n| wysiwyg                  | text area with formatting options through a WYSIWYG editor                                                                                                                                                                                                                                                                                                                                                                                                                      |\n| password                 | password field                                                                                                                                                                                                                                                                                                                                                                                                                                                                  |\n```\n\n----------------------------------------\n\nTITLE: Accessing Content Main Document in PHP\nDESCRIPTION: This code snippet demonstrates how to retrieve a document and its associated main document in Pimcore using PHP. It loads a document by ID, then accesses its main document and displays keys of both documents.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/03_Documents/11_Inheritance.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$document = \\Pimcore\\Model\\Document\\Page::getById(130);\ndump([\n    'main_document' => $document->getContentMainDocument()->getKey(),\n    'document' => $document->getKey()\n]);\n```\n\n----------------------------------------\n\nTITLE: Configuring PSR-4 Autoloader in Composer\nDESCRIPTION: JSON configuration for setting up PSR-4 autoloading in composer.json, including both App and AppBundle namespaces.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/23_Installation_and_Upgrade/07_Updating_Pimcore/10_V6_to_V10.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"autoload\": {\n    \"psr-4\": {\n      \"App\\\\\": [\"src/\"],\n      \"AppBundle\\\\\": [\"src/\"],\n      \"Pimcore\\\\Model\\\\DataObject\\\\\": \"var/classes/DataObject\",\n      ... some other items maybe\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Default Notifications Configuration\nDESCRIPTION: Default YAML configuration for Pimcore notifications system, showing enabled state and check interval settings.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/18_Tools_and_Features/41_Notifications.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\npimcore_admin:\n    notifications:\n        enabled: true\n        check_new_notification:\n            enabled: true\n            interval: 30\n```\n\n----------------------------------------\n\nTITLE: Pimcore Admin Translation Keys\nDESCRIPTION: Translation key format for customizing the Add Object dialog title and text. Keys must use the actual class name (case-sensitive) to target specific object types.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/08_Customize_Editing_Interface.md#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nobject_add_dialog_custom_title.CLASSNAME\nobject_add_dialog_custom_text.CLASSNAME\n```\n\n----------------------------------------\n\nTITLE: Configuring Write Target for Admin System Settings in YAML\nDESCRIPTION: This YAML snippet shows how to set the write target for admin system settings to 'settings-store' in the Pimcore configuration.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/18_Tools_and_Features/26_Appearance_and_Branding.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\npimcore_admin:\n    config_location:\n        admin_system_settings:\n            write_target:\n                type: 'settings-store'\n```\n\n----------------------------------------\n\nTITLE: Configuring Security Settings in Pimcore Demo\nDESCRIPTION: Directory paths to example security configuration and controller implementation in the Pimcore Demo CMS profile. Shows file locations for security.yaml and AccountController implementations.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/19_Development_Tools_and_Details/10_Security_Authentication/README.md#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nconfig/packages/security.yaml\\nsrc/Controller/AccountController.php\n```\n\n----------------------------------------\n\nTITLE: Installing FFMPEG on Debian-based Linux\nDESCRIPTION: Command to install FFMPEG using apt-get package manager. FFMPEG is used for video transcoding in Pimcore.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/23_Installation_and_Upgrade/03_System_Setup_and_Hosting/06_Additional_Tools_Installation.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install ffmpeg\n```\n\n----------------------------------------\n\nTITLE: Deprecated Advanced Block Usage with getCurrent()\nDESCRIPTION: Shows the deprecated way to implement conditional content based on block iteration index. This approach will be removed in Pimcore 12.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/03_Documents/01_Editables/06_Block.md#2025-04-17_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n<!-- Deprecated! Will be removed in Pimcore 12 -->\n{% set myBlock = pimcore_block(\"contentblock\", {\"reload\": true}) %}\n{% for i in myBlock.iterator %}\n    {% if myBlock.current > 0 %}\n        Insert this line only after the first iteration<br />\n        <br />\n    {% endif %}\n\n    <h2>{{ pimcore_input(\"subline\") }}</h2>\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Installing Gotenberg PHP Library via Composer\nDESCRIPTION: Command to install the Gotenberg PHP library using Composer. This is required when using Gotenberg for PDF generation.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/23_Installation_and_Upgrade/03_System_Setup_and_Hosting/06_Additional_Tools_Installation.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require gotenberg/gotenberg-php ^2.0\n```\n\n----------------------------------------\n\nTITLE: Manual Mode Areablock Implementation in Twig\nDESCRIPTION: Demonstrates manual mode usage for custom HTML implementation, particularly useful for table layouts.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/03_Documents/01_Editables/02_Areablock/README.md#2025-04-17_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n{% set areaBlock = pimcore_areablock(\"myArea\", {\"manual\":true}) %}\n\n{% do areaBlock.start() %}\n<table>\n    {% for i in areaBlock.iterator %}\n        {% set info = areaBlock.buildInfoObject() %}\n        {% do areaBlock.blockConstruct() %}\n            <tr>\n                <td>\n                    {% set templateParams = areaBlock.blockStart(info) %}\n                    {% do areaBlock.content(info, templateParams) %}\n                    {% do areaBlock.blockEnd() %}\n                </td>\n            </tr>\n        {% do areaBlock.blockDestruct() %}\n    {% endfor %}\n</table>\n{% do areaBlock.end() %}\n```\n\n----------------------------------------\n\nTITLE: Pimcore Object Data Type Storage Example - Numeric Fields\nDESCRIPTION: SQL table structure showing how numeric data types are stored in object_store tables\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/19_Development_Tools_and_Details/05_Database_Model.md#2025-04-17_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nNumber double/decimal(64,3) NULL\nSlider double NULL\n```\n\n----------------------------------------\n\nTITLE: Preconfiguring Pimcore Installer with Database Credentials\nDESCRIPTION: YAML configuration file that preconfigures database credentials for the Pimcore installer, including support for environment variables to avoid hardcoding sensitive information.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/01_Getting_Started/02_Advanced_Installation_Topics/README.md#2025-04-17_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n# config/installer.yaml\n\npimcore_install:\n    parameters:\n        database_credentials:\n            user:                 username\n            password:             password\n            dbname:               pimcore\n            \n            # env variables can be directly read with the %env() syntax\n            # see https://symfony.com/blog/new-in-symfony-3-2-runtime-environment-variables\n            host:                 \"%env(DB_HOST)%\"\n            port:                 \"%env(DB_PORT)%\"\n```\n\n----------------------------------------\n\nTITLE: Interactive Program License Notice Template\nDESCRIPTION: Template for a short license notice to be displayed when an interactive program starts, including copyright and warranty information.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/gpl-3.0.txt#2025-04-17_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n<program>  Copyright (C) <year>  <name of author>\nThis program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\nThis is free software, and you are welcome to redistribute it\nunder certain conditions; type `show c' for details.\n```\n\n----------------------------------------\n\nTITLE: Using the 'instanceof' Test in Twig with Pimcore\nDESCRIPTION: This code demonstrates how to use the 'instanceof' test in Twig to check if an object is an instance of a specific class. It also shows the usage of the 'pimcore_data_object' test which validates if an object is an instance of Pimcore\\Model\\DataObject\\Concrete.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/02_MVC/02_Template/02_Template_Extensions/README.md#2025-04-17_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{# using 'instanceof' checks if object is instanceof provided classname #}\n{% if product is instanceof('App\\\\Model\\\\Product\\\\Car') %}\n    ...\n{% endif %}\n\n{# using 'pimcore_data_object' checks if object is instanceof \\Pimcore\\Model\\DataObject\\Concrete #}\n{% if product is pimcore_data_object %}\n ...\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Functional Test Suite\nDESCRIPTION: Configuration for functional test suite using Pimcore helper, including database and class directory setup options.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/19_Development_Tools_and_Details/29_Testing/01_Application_Testing.md#2025-04-17_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nactor: FunctionalTester\nmodules:\n    enabled:\n        - \\Tests\\Support\\Helper\\Functional\n        - \\Pimcore\\Tests\\Support\\Helper\\Pimcore:\n            connect_db: true\n            initialize_db: true\n            purge_class_directory: true\n            setup_objects: false\n```\n\n----------------------------------------\n\nTITLE: Capturing Scripts with HeadScript Helper in Twig (Deprecated)\nDESCRIPTION: Demonstrates the deprecated method of capturing JavaScript code programmatically with Twig tags within captureStart() and captureEnd() methods. This approach allows mixing dynamic Twig variables in JavaScript.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/02_MVC/02_Template/02_Template_Extensions/03_HeadScript.md#2025-04-17_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{% do pimcore_head_script().captureStart() %}\nvar action = '{{ baseUrl }}';\n$('#foo_form').attr(\"action\", action);\n{% do pimcore_head_script().captureEnd() %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Asset Thumbnail Allowed Formats in Pimcore\nDESCRIPTION: YAML configuration for specifying which file formats can be used for asset thumbnails in Pimcore. This example shows the default formats and demonstrates how to add a custom format (PDF).\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/23_Installation_and_Upgrade/09_Upgrade_Notes/README.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n  pimcore:\n    assets:\n      thumbnails:\n        allowed_formats:\n          - 'avif'\n          - 'eps'\n          - 'gif'\n          - 'jpeg'\n          - 'jpg'\n          - 'pjpeg'\n          - 'png'\n          - 'svg'\n          - 'tiff'\n          - 'webm'\n          - 'webp'\n          - 'pdf' # Add your desired format here\n```\n\n----------------------------------------\n\nTITLE: Pimcore Database Schema - Table Structure Overview\nDESCRIPTION: Markdown table showing the complete list of default Pimcore database tables and their descriptions. Includes system tables, content management tables, and utility tables that are essential for Pimcore's operation.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/19_Development_Tools_and_Details/05_Database_Model.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Table                                   | Description                                                                                                                                                                                                             |\n|-----------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| application_logs                        | Contains all application logs. For more information see [Application Logger](../18_Tools_and_Features/17_Application_Logger.md). Additionally, there might be application_logs_archive* tables for old logging entries. | \n| assets                                  | Assets (Images, etc.), with system metadata                                                                                                                                                                             |\n| assets_metadata                         | Additional user metadata (Metadata tab in the asset panel)                                                                                                                                                              |\n| classes                                 | List of all object classes with ID and name. Everything else is stored in PHP configuration files.                                                                                                                      |\n| classificationstore_collectionrelations | Relation Collection - Group for Classification Store                                                                                                                                                                    | \n| classificationstore_collections         | Collections of Classification Store                                                                                                                                                                                     |\n| classificationstore_groups              | Groups of Classification Store                                                                                                                                                                                          |\n| classificationstore_keys                | Keys of Classification Store                                                                                                                                                                                            |\n| classificationstore_relations           | Relation Group - Key for Classification Store                                                                                                                                                                           |\n| classificationstore_stores              | Stores of Classification Store                                                                                                                                                                                          |\n| custom_layouts                          | Definition of the `custom layouts` for object classes                                                                                                                                                                   |\n| dependencies                            | Stores dependencies between elements such as objects, assets, documents                                                                                                                                                 |\n| documents                               | List of all documents, folders, links, hardlinks, emails and snippets of the document area with meta- and config-data, relations                                                                                        |\n| documents_editables                     | Editables of documents (data), in a serialized form                                                                                                                                                                     |\n| documents_email                         | Extra config data                                                                                                                                                                                                       |\n| documents_hardlink                      | Extra config data                                                                                                                                                                                                       |\n| documents_link                          | Extra config data                                                                                                                                                                                                       |\n| documents_page                          | Extra config data                                                                                                                                                                                                       |\n| documents_printpage                     | Extra config data                                                                                                                                                                                                       |\n| documents_snippet                       | Extra config data                                                                                                                                                                                                       |\n| documents_translations                  | Relation between same documents for different languages                                                                                                                                                                 |\n| edit_lock                               | Tracks which user opened which resource in the backend                                                                                                                                                                  |\n| element_workflow_state                  | Keeps track of workflow state for all elements                                                                                                                                                                          |\n| email_blocklist                         | Blocklist for eMail-addresses                                                                                                                                                                                           \n| email_log                               | Log for sent emails                                                                                                                                                                                                     |\n| glossary                                | Words to auto-link in texts. See [Glossary](../18_Tools_and_Features/21_Glossary.md)                                                                                                                                    |\n| http_error_log                          | HTTP error log                                                                                                                                                                                                          |\n| lock_keys                               | Store for Locking functionality                                                                                                                                                                                         |\n| notes                                   | [Notes](../18_Tools_and_Features/05_Notes_and_Events.md) for elements                                                                                                                                                   | \n| notes_data                              | Additional data for notes                                                                                                                                                                                               | \n| objects                                 | List of all objects with metadata like id, class name, path, parent, ...                                                                                                                                                |\n| object_url_slugs                        | [URL Slug](../05_Objects/01_Object_Classes/01_Data_Types/65_Others.md) data                                                                                                                                             |\n| properties                              | Data from the `properties` tab                                                                                                                                                                                          |\n| quantityvalue_units                     | Available quantities for quantity value object data type                                                                                                                                                                |\n| recyclebin                              | Stores metadata of deleted elements                                                                                                                                                                                     |\n```\n\n----------------------------------------\n\nTITLE: Configuring Nginx for WebDAV access in Pimcore\nDESCRIPTION: This Nginx configuration snippet ensures that WebDAV requests to the /asset/webdav path are properly handled. The location directive excludes WebDAV paths from other processing rules.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/04_Assets/05_Accessing_Assets_via_WebDAV.md#2025-04-17_snippet_0\n\nLANGUAGE: nginx\nCODE:\n```\nlocation ~* ^(?!/admin|/asset/webdav)(.+?)....\n```\n\n----------------------------------------\n\nTITLE: Setting Timezone Configuration in Pimcore\nDESCRIPTION: YAML configuration to set the timezone for Pimcore, which will be used for displaying date/time values in the admin backend.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/01_Getting_Started/02_Advanced_Installation_Topics/README.md#2025-04-17_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\npimcore:\n    general:\n        timezone: Europe/Berlin\n```\n\n----------------------------------------\n\nTITLE: Composer Autoload Configuration\nDESCRIPTION: JSON configuration to exclude PHPUnit from composer's autoload classmap.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/19_Development_Tools_and_Details/29_Testing/01_Application_Testing.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n  \"autoload\": {\n    \"exclude-from-classmap\": [\n      \"vendor/phpunit\"\n    ]\n  }\n```\n\n----------------------------------------\n\nTITLE: Installing Locale Support Packages on Debian-based Systems\nDESCRIPTION: Command to install all required packages for proper locale support by PHP on Debian-based systems.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/23_Installation_and_Upgrade/01_System_Requirements.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\napt-get install locales-all\n```\n\n----------------------------------------\n\nTITLE: Installing AWS S3 Adapter\nDESCRIPTION: Command to install the AWS S3 adapter for Flysystem integration.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/23_Installation_and_Upgrade/03_System_Setup_and_Hosting/03_File_Storage_Setup.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require league/flysystem-aws-s3-v3\n```\n\n----------------------------------------\n\nTITLE: Defining Custom CSS for Non-Production Environments\nDESCRIPTION: This CSS snippet applies a distinctive background style to the Pimcore backend UI body when the application environment is not set to 'prod', using the data-app-env attribute.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/26_Best_Practice/71_Style_Backend_Depending_On_App-Env.md#2025-04-17_snippet_2\n\nLANGUAGE: css\nCODE:\n```\nbody:not([data-app-env='prod']) #pimcore_body {\n    background: repeating-linear-gradient(\n        -45deg,\n        #005baa,\n        #005baa 5px,\n        #0c0f12 30px,\n        #0c0f12 10px\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Cache Pool in Pimcore\nDESCRIPTION: YAML configuration for setting up a Redis cache pool in Pimcore with a default lifetime of one year. This establishes the primary cache adapter for Pimcore's caching system.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/23_Installation_and_Upgrade/03_System_Setup_and_Hosting/09_Performance_Guide.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nframework:\n    cache:\n        pools:\n            pimcore.cache.pool:\n                public: true\n                default_lifetime: 31536000  # 1 year\n                adapter: cache.adapter.redis_tag_aware\n                provider: 'redis://localhost'\n```\n\n----------------------------------------\n\nTITLE: Displaying Numeric Value in Both View and Edit Modes\nDESCRIPTION: Example showing how to display the numeric value in both frontend and editmode by using the getData() method. This is useful when you need to show the actual value within the admin interface.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/03_Documents/01_Editables/24_Numeric.md#2025-04-17_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n<p>\n    {{ pimcore_numeric(\"myNumber\").getData() }}\n</p>\n```\n\n----------------------------------------\n\nTITLE: Storage Migration Configuration\nDESCRIPTION: Configuration for migrating content between different storage types, showing both source and target storage setups.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/23_Installation_and_Upgrade/03_System_Setup_and_Hosting/03_File_Storage_Setup.md#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nflysystem:\n    storages:\n        pimcore.asset.storage.source:\n            adapter: 'local'\n            visibility: public\n            options:\n                directory: '%kernel.project_dir%/public/var/assets'\n\n        pimcore.asset.storage.target:\n            adapter: 'aws'\n            visibility: public\n            options:\n                client: 'assets_s3'\n                bucket: 'bucket-name'\n                prefix: asset\n\n        pimcore.thumbnail.storage.source:\n            adapter: 'local'\n            visibility: private\n            directory_visibility: public\n            options:\n                directory: '%kernel.project_dir%/public/var/tmp/thumbnails'\n\n        pimcore.thumbnail.storage.target:\n            adapter: 'aws'\n            visibility: public\n            options:\n                client: 'assets_s3'\n                bucket: 'bucket-name'\n                prefix: thumbnail\n```\n\n----------------------------------------\n\nTITLE: Capturing Content to Specific Key in Twig (Deprecated)\nDESCRIPTION: Shows how to capture content to a specific key in the placeholder container. This method is also deprecated as of Pimcore 11.4.0.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/02_MVC/02_Template/02_Template_Extensions/00_Placeholder.md#2025-04-17_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{#Default capture: to key #}\n{% do pimcore_placeholder('foo').captureStart('SET', 'data') %}\n\n{% for datum in data %}\n    <div class=\"foo\">\n        <h2>{{ datum.title }}</h2>\n        <p>{{ datum.content }}</p>\n    </div>\n{% endfor %}\n\n{% do pimcore_placeholder('foo').captureEnd() %}\n\n{{ pimcore_placeholder('foo').data | raw }}\n```\n\n----------------------------------------\n\nTITLE: Translation Pluralization Example in Twig\nDESCRIPTION: Demonstrates how to use ICU Message Format translations for pluralization in Twig templates. Shows different outputs based on count values.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/06_Multi_Language_i18n/04_Shared_Translations.md#2025-04-17_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{{ 'cars_sold'|trans({'sold_count': 0}) }}\n{# output: No car sold yet. #}\n\n{{ 'cars_sold'|trans({'sold_count': 1}) }}\n{# output: Only one car sold. #}\n\n{{ 'cars_sold'|trans({'sold_count': 100}) }}\n{# output: Total of 100 cars sold! #}\n```\n\n----------------------------------------\n\nTITLE: Including Documents by ID with pimcore_inc\nDESCRIPTION: Example of including a document by its ID using the pimcore_inc function.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/02_MVC/02_Template/02_Template_Extensions/README.md#2025-04-17_snippet_7\n\nLANGUAGE: twig\nCODE:\n```\n{{ pimcore_inc(256) }}\n```\n\n----------------------------------------\n\nTITLE: Objectbricks Table Structure\nDESCRIPTION: Database schema for Objectbricks tables showing query and storage tables.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/19_Development_Tools_and_Details/05_Database_Model.md#2025-04-17_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n| Table/View | Purpose |\n| ---------- | ------- |\n| object_brick_query_(id) Table | Analog to object_query_(id) |\n| object_brick_store_(id) Table | Main data storage |\n```\n\n----------------------------------------\n\nTITLE: Installing Exiftool on Debian-based Linux\nDESCRIPTION: Command to install Exiftool, a library for reading, writing, and editing metadata in various file types, using apt-get package manager.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/23_Installation_and_Upgrade/03_System_Setup_and_Hosting/06_Additional_Tools_Installation.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\napt-get install libimage-exiftool-perl\n```\n\n----------------------------------------\n\nTITLE: Installing Pimcore Skeleton Package\nDESCRIPTION: Command to create a new Pimcore project using the skeleton package intended for experienced developers\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/01_Getting_Started/00_Installation/01_Webserver_Installation.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nCOMPOSER_MEMORY_LIMIT=-1 composer create-project pimcore/skeleton my-project\n```\n\n----------------------------------------\n\nTITLE: Composer Package Management Commands\nDESCRIPTION: Shell commands for removing and adding Composer dependencies during migration.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/23_Installation_and_Upgrade/07_Updating_Pimcore/10_V6_to_V10.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer remove --no-update wikimedia/composer-merge-plugin doctrine/migrations php-http/guzzle6-adapter\ncomposer require --no-update php-http/guzzle7-adapter:^0.1.1\n```\n\n----------------------------------------\n\nTITLE: Creating Version Data Table in SQL\nDESCRIPTION: SQL script to create the 'versionsData' table required for storing version data when using the DatabaseVersionStorageAdapter in Pimcore.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/18_Tools_and_Features/01_Versioning.md#2025-04-17_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `versionsData` (\n  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,\n  `cid` int(11) unsigned DEFAULT NULL,\n  `ctype` enum('document','asset','object') DEFAULT NULL,\n  `metaData` longblob DEFAULT NULL,\n  `binaryData` longblob DEFAULT NULL,\n  PRIMARY KEY (`id`)\n)\n```\n\n----------------------------------------\n\nTITLE: Registering Dependent Bundles with Environment Restrictions in Pimcore (PHP)\nDESCRIPTION: Demonstrates how to register dependent bundles with environment restrictions and lazy loading for improved performance.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/20_Extending_Pimcore/13_Bundle_Developers_Guide/04_Bundle_Collection.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n// ...\nuse Pimcore\\HttpKernel\\BundleCollection\\LazyLoadedItem;\n\nclass CustomBundle extends Bundle implements DependentBundleInterface\n{\n    public static function registerDependentBundles(BundleCollection $collection): void\n    {\n        // call addBundle with a class name as string and restrict it to the dev environment\n        $collection->addBundle(FooBundle::class, 0, ['dev']);\n\n        // directly add a LazyLoadedItem - this is what addBundle does internally when gets a string\n        $collection->add(new LazyLoadedItem(FooBundle::class, 0, ['dev']));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Listener for Failed Job Run Notification in PHP\nDESCRIPTION: This code snippet demonstrates how to create an event listener that sends an email notification when a job run fails. It uses the JobRunStateChangedEvent to detect state changes and the Pimcore Mail class to send the notification.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/19_Development_Tools_and_Details/08_Generic_Execution_Engine/03_Extending/03_Extending_Generic_Execution_Engine.md#2025-04-17_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nnamespace AppBundle\\EventListener;\n\nuse Pimcore\\Bundle\\GenericExecutionEngineBundle\\Event\\JobRunStateChangedEvent;\nuse Pimcore\\Mail;\nuse Symfony\\Component\\EventDispatcher\\EventSubscriberInterface;\n\nclass SendEmailOnFailedState implements EventSubscriberInterface\n{\n    \n    public static function getSubscribedEvents()\n    {\n        return [\n            JobRunStateChangedEvent::class  => 'onFailedState',\n        ];\n    }\n\n    public function onFailedState(JobRunStateChangedEvent $event)\n    {\n        $state = $event->getNewState(); \n        if ($state !== 'failed') {\n            return;\n        }\n\n        // Notify user about failed job run\n        $mail = new Mail();\n        $mail->addTo('user@lorem.com', 'User');\n        $mail->setSubject('Job Run ' .$event->getJobRunId() . ' failed');\n        $mail->setBody('The job run ' . $event->getJobRunId() . ' failed. Please check the job run log for more information.');\n        $mail->send();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Flushing Asset Versions in MySQL and Filesystem\nDESCRIPTION: These commands delete all versioning information for assets from the MySQL database and remove the corresponding files from the filesystem. Similar commands can be used for objects and documents.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/22_Administration_of_Pimcore/02_Cleanup_Data_Storage.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmysql -e \"DELETE FROM ###.versions WHERE ctype='asset';\"\nrm -r var/versions/asset\n```\n\n----------------------------------------\n\nTITLE: Deprecated Manual Block Mode Implementation\nDESCRIPTION: Shows the deprecated way to implement manual block mode with custom HTML structure. This approach will be removed in Pimcore 12.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/03_Documents/01_Editables/06_Block.md#2025-04-17_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n<!-- Deprecated! Will be removed in Pimcore 12 -->\n{% set block = pimcore_block(\"gridblock\", {\"manual\": true, \"limit\": 6}).start() %}\n<table>\n    <tr>\n        {% for b in block.iterator %}\n            {% do block.blockConstruct() %}\n              <td customAttribute=\"{{ pimcore_input(\"myInput\").getData() }}\">\n                    {% do block.blockStart() %}\n                        <div style=\"width:200px; height:200px;border:1px solid black;\">\n                            {{ pimcore_input(\"myInput\") }}\n                        </div>\n                    {% do block.blockEnd() %}\n                </td>\n            {% do block.blockDestruct() %}\n        {% endfor %}\n    </tr>\n</table>\n{% do block.end() %}\n```\n\n----------------------------------------\n\nTITLE: Installing Graphviz on Debian-based Linux\nDESCRIPTION: Command to install Graphviz, a graph visualization software used for Workflow in Pimcore, using apt-get package manager.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/23_Installation_and_Upgrade/03_System_Setup_and_Hosting/06_Additional_Tools_Installation.md#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\napt-get install graphviz\n```\n\n----------------------------------------\n\nTITLE: Deprecated Manual Block with Custom Button Position\nDESCRIPTION: Shows the deprecated way to customize block control buttons position. This approach will be removed in Pimcore 12.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/03_Documents/01_Editables/06_Block.md#2025-04-17_snippet_7\n\nLANGUAGE: twig\nCODE:\n```\n<!-- Deprecated! Will be removed in Pimcore 12 -->\n{% set block = pimcore_block(\"gridblock\", {\"manual\": true}).start() %}\n<table>\n    <tr>\n        {% for b in block.iterator %}\n            {% do block.blockConstruct() %}\n                <td customAttribute=\"{{ pimcore_input(\"myInput\").data }}\">\n                    {% do block.blockStart(false) %}\n                        <div style=\"background-color: #fc0; margin-bottom: 10px; padding: 5px; border: 1px solid black;\">\n                            {% do block.blockControls() %}\n                        </div>\n                        <div style=\"width:200px; height:200px;border:1px solid black;\">\n                            {{ pimcore_input(\"myInput\") }}\n                        </div>\n                    {% do block.blockEnd() %}\n                </td>\n            {% do block.blockDestruct() %}\n        {% endfor %}\n    </tr>\n</table>\n{% do block.end() %}\n```\n\n----------------------------------------\n\nTITLE: Basic Areablock Integration in Twig\nDESCRIPTION: Shows the simplest way to integrate an areablock editable in a document template.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/03_Documents/01_Editables/02_Areablock/README.md#2025-04-17_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ pimcore_areablock(\"myAreablock\") }}\n```\n\n----------------------------------------\n\nTITLE: Navigation Links in Markdown\nDESCRIPTION: Markdown links to various administrative documentation sections including backups, CLI, and user management\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/22_Administration_of_Pimcore/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* [Backup of Pimcore](./01_Backups.md)\n* [Commandline Interface of Pimcore](./05_Commandline_Interface.md)\n* [Users and Roles](./07_Users_and_Roles.md)\n```\n\n----------------------------------------\n\nTITLE: In-Template Caching Benchmark Results (Before)\nDESCRIPTION: Apache Benchmark results showing page performance before implementing in-template caching for navigation. Shows baseline metrics for the Magazine page.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/23_Installation_and_Upgrade/03_System_Setup_and_Hosting/09_Performance_Guide.md#2025-04-17_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nTime taken for tests:   0.808 seconds\nTime per request:       161.603 [ms] (mean)\nTime per request:       8.080 [ms] (mean, across all concurrent requests)\n\nConnection Times (ms)\n              min  mean[+/-sd] median   max\nConnect:        0    0   0.3      0       1\nProcessing:    48  137  35.8    135     207\nWaiting:       45  133  35.4    130     204\nTotal:         49  137  35.7    135     207\n```\n\n----------------------------------------\n\nTITLE: Admin Translations Link\nDESCRIPTION: Internal documentation link to Admin Translations section.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/06_Multi_Language_i18n/README.md#2025-04-17_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n./07_Admin_Translations.md\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Newsletter Documents in Pimcore 11\nDESCRIPTION: This bash command cleans up Newsletter documents if the Newsletter functionality is not used in Pimcore 11.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/23_Installation_and_Upgrade/07_Updating_Pimcore/12_V10_to_V11.md#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nbin/console pimcore:documents:cleanup newsletter\n```\n\n----------------------------------------\n\nTITLE: Generating PHPStan Baseline for Pimcore\nDESCRIPTION: Command to generate a PHPStan baseline file for Pimcore. This baseline contains all current errors and allows for detecting new errors without fixing existing ones first.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/19_Development_Tools_and_Details/29_Testing/02_Core_Tests.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nvendor/bin/phpstan analyse --memory-limit=-1 --generate-baseline\n```\n\n----------------------------------------\n\nTITLE: Overriding BlogArticle Model for JSON Serialization in Pimcore (PHP)\nDESCRIPTION: This code snippet shows how to override the BlogArticle model in Pimcore to implement the JsonSerializable interface. It allows for custom serialization of the entire object when converting to JSON for API responses.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/26_Best_Practice/20_Building_Custom_Rest_APIs.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Model\\DataObject;\n\nclass BlogArticle extends \\Pimcore\\Model\\DataObject\\BlogArticle implements \\JsonSerializable\n{\n    public function jsonSerialize(): array\n    {\n        $vars = get_object_vars($this);\n\n        return $vars;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Tooltips for Car Objects in PHP\nDESCRIPTION: PHP method to create custom tooltips for Car objects in Pimcore, including image thumbnails and descriptions.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/18_Tools_and_Features/02_Custom_Icons.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\npublic function getElementQtipConfig(): ?array\n{\n    if ($this->element instanceof \\App\\Model\\Product\\Car) {\n        $element = $this->element;\n\n        return DataObject\\Service::useInheritedValues(true, function () use ($element) {\n            $text = '<h1>' . $element->getName() . '</h1>';\n\n            $mainImage = $element->getMainImage();\n            if ($mainImage) {\n                $thumbnail = $mainImage->getThumbnail(\"content\");\n                $text .= '<p><img src=\"' . $thumbnail . '\" width=\"150\" height=\"150\"/></p>';\n            }\n\n            $text .= wordwrap($this->element->getDescription(), 50, \"<br>\");\n\n            return [\n                \"title\" => \"ID: \" . $element->getId() . \" - Year: \" . $element->getProductionYear(),\n                \"text\" => $text,\n            ];\n        });\n    }\n\n    return parent::getElementQtipConfig();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Main Domain for Static Pages in Pimcore\nDESCRIPTION: YAML configuration for enabling the use of main domain in static page URLs instead of document paths in Pimcore.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/19_Development_Tools_and_Details/20_Static_Page_Generator.md#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\npimcore:\n    documents:\n        static_page_generator:\n            use_main_domain: true\n```\n\n----------------------------------------\n\nTITLE: Cleaning Temporary Files and Recycle Bin\nDESCRIPTION: Bash commands for removing temporary files and directories during migration.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/23_Installation_and_Upgrade/07_Updating_Pimcore/10_V6_to_V10.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nrm -r var/tmp\nrm -r public/var/tmp\n```\n\n----------------------------------------\n\nTITLE: Field Collections Table Structure\nDESCRIPTION: Database schema for field collections showing collection data storage structure.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/19_Development_Tools_and_Details/05_Database_Model.md#2025-04-17_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n| Table/View | Purpose |\n| ---------- | ------- |\n| object_collection_(collection-name)_(object-id) | Stores data of the field collections fields and the order (index) |\n```\n\n----------------------------------------\n\nTITLE: Full Page Cache Benchmark Results (After)\nDESCRIPTION: Apache Benchmark results showing homepage performance after implementing full page cache. Shows modest improvement in response times compared to before full page cache implementation.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/23_Installation_and_Upgrade/03_System_Setup_and_Hosting/09_Performance_Guide.md#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nTime taken for tests:   0.646 seconds\nTime per request:       129.298 [ms] (mean)\nTime per request:       6.465 [ms] (mean, across all concurrent requests)\n\nConnection Times (ms)\n              min  mean[+/-sd] median   max\nConnect:        0    0   0.3      0       1\nProcessing:    45  115  26.0    116     167\nWaiting:       45  114  26.0    116     166\nTotal:         46  115  25.9    116     167\n```\n\n----------------------------------------\n\nTITLE: Importing Pimcore Class Definition in PHP\nDESCRIPTION: Command to import a Pimcore class definition from a JSON file. This allows for version-controlled class definitions to be deployed.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/21_Deployment/05_Deployment_Tools.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n./bin/console pimcore:definition:import:class /class_jsonfile_path.json\n```\n\n----------------------------------------\n\nTITLE: Production Environment Settings in YAML\nDESCRIPTION: YAML configuration example for enabling configuration changes in production environment using settings-store target.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/21_Deployment/03_Configuration_Environments.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\npimcore:\n    config_location:\n        predefined_properties:\n            write_target:\n                type: 'settings-store'\n```\n\n----------------------------------------\n\nTITLE: Customizing Tree Context Menu in YAML\nDESCRIPTION: Shows how to customize the context menu options in a custom view by hiding specific menu items. Demonstrates both simple and detailed configuration approaches.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/01_Object_Classes/05_Class_Settings/20_Custom_Views.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\npimcore:\n    custom_views:\n        definitions:\n            186632eb-5ad3-6ac6-61f8-7a75e64f2204:\n                treeContextMenu:\n                    asset:\n                        items:\n                            add:\n                                hidden: false\n                                items:\n                                    upload: true\n                                    uploadCompatibility: true\n                                    uploadZip: true\n                            addFolder: false\n                            rename: true\n                            copy: false\n                            cut: false\n                            paste: true\n                            pasteCut: true\n                            delete: true\n                            searchAndMove: true\n                            lock: false\n                            unlock: true\n                            lockAndPropagate: true\n                            unlockAndPropagate: true\n                            reload: true\n```\n\n----------------------------------------\n\nTITLE: Configuring PHP-FPM and Nginx Status Monitoring\nDESCRIPTION: This snippet sets up locations for PHP-FPM status and ping, as well as Nginx status monitoring. These endpoints are typically used for health checks and performance monitoring.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/23_Installation_and_Upgrade/03_System_Setup_and_Hosting/02_Nginx_Configuration.md#2025-04-17_snippet_6\n\nLANGUAGE: nginx\nCODE:\n```\nlocation /fpm- {\n    access_log off;\n    include fastcgi_params;\n    fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n    location /fpm-status {\n        allow 127.0.0.1;\n        deny all;\n        fastcgi_pass php-pimcore10;\n    }\n    location /fpm-ping {\n        fastcgi_pass php-pimcore10;\n    }\n}\n\nlocation /nginx-status {\n    allow 127.0.0.1;\n    deny all;\n    access_log off;\n    stub_status;\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Inheritance Values Access in Pimcore\nDESCRIPTION: Shows how to disable inheritance when accessing object values by using DataObject\\Service::userInheritedValues() with a false flag.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/01_Object_Classes/05_Class_Settings/25_Inheritance.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nDataObject\\Service::userInheritedValues(false, function() {\n    // ... your code goes here\n    // ...\n    // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Retry Strategy for Pimcore Generic Execution Engine in YAML\nDESCRIPTION: This YAML configuration sets up the data source name (DSN) for the execution engine and configures the retry strategy. It specifically sets max_retries to 0 to prevent data corruption.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/19_Development_Tools_and_Details/08_Generic_Execution_Engine/01_Jobs_and_Jobruns/01_Jobs.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\npimcore_generic_execution_engine:\n    dsn: 'doctrine://default?queue_name=pimcore_generic_execution_engine'\n    retry_strategy:\n        max_retries: 0 # no retries to prevent data corruption\n```\n\n----------------------------------------\n\nTITLE: Configuring Workflow Event Listener Service\nDESCRIPTION: YAML configuration for registering a workflow transition event listener in services.yaml.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/07_Workflow_Management/09_Working_with_PHP_API.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n    App\\EventListener\\WorkflowsEventListener:\n        tags:        \n            - { name: kernel.event_listener, event: workflow.projectWorkflow.transition.close_product, method: onCloseProduct }\n```\n\n----------------------------------------\n\nTITLE: Markdown External Link\nDESCRIPTION: External link to Pimcore's translation project on POEditor platform.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/06_Multi_Language_i18n/README.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nhttps://poeditor.com/join/project/VWmZyvFVMH\n```\n\n----------------------------------------\n\nTITLE: Areablock with Brick Limits in Twig\nDESCRIPTION: Shows how to limit the number of specific bricks that can be added to an areablock.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/03_Documents/01_Editables/02_Areablock/README.md#2025-04-17_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n{{ pimcore_areablock(\"myAreablock\", {\n        \"allowed\": [\"iframe\",\"teasers\",\"wysiwyg\"],\n        \"limits\": {\n            \"iframe\": 1,\n            \"teasers\": 2\n        },\n        \"limit\": 5\n    })\n}}\n```\n\n----------------------------------------\n\nTITLE: Flushing Entire Recycle Bin Manually\nDESCRIPTION: These commands manually flush the entire recycle bin by truncating the database table and removing the corresponding files from the filesystem.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/22_Administration_of_Pimcore/02_Cleanup_Data_Storage.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmysql -e \"TRUNCATE TABLE ###.recyclebin;\"\nrm -r var/recyclebin\n```\n\n----------------------------------------\n\nTITLE: Configuring SSI for Static Page Generation in Pimcore\nDESCRIPTION: YAML configuration for enabling NGINX SSI (Server Side Includes) module for generating static pages in Pimcore.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/19_Development_Tools_and_Details/20_Static_Page_Generator.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\npimcore:\n    document:\n        static_page_generator:\n            headers:\n                - { name: \"Surrogate-Capability\", value: 'device=\"SSI/1.0\"' }\n```\n\n----------------------------------------\n\nTITLE: Listing Both Objects and Variants\nDESCRIPTION: Example of querying both regular objects and variants using the Product Listing class.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/01_Object_Classes/05_Class_Settings/70_Variants.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$list = new DataObject\\Product\\Listing();\n$list->setObjectTypes([DataObject::OBJECT_TYPE_VARIANT,DataObject::OBJECT_TYPE_OBJECT]);\n$list->load();\n```\n\n----------------------------------------\n\nTITLE: Removing Orphaned Custom Settings in Pimcore 11\nDESCRIPTION: These bash commands remove orphaned custom settings related to face detection, which was removed in Pimcore 11.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/23_Installation_and_Upgrade/07_Updating_Pimcore/12_V10_to_V11.md#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nbin/console pimcore:assets:remove-custom-setting faceCoordinates\nbin/console pimcore:assets:remove-custom-setting disableFocalPointDetection\nbin/console pimcore:assets:remove-custom-setting disableImageFeatureAutoDetection\n```\n\n----------------------------------------\n\nTITLE: Adding Parameters to Document Links in Twig Templates with Pimcore\nDESCRIPTION: This code snippet shows how to create a link to the current document while adding URL parameters. The pimcore_url helper function takes an array of parameters that will be appended to the current document's URL.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/02_MVC/04_Routing_and_URLs/00_Documents_and_Pretty_URLs.md#2025-04-17_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n<a href=\"{{ pimcore_url({'key': 'value'}) }}\">Test-Link</a>\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Session Name in Pimcore YAML\nDESCRIPTION: YAML configuration to set a custom session name for Pimcore to prevent cookie collisions with other applications on the same domain. This configuration changes the default PHP session name from PHPSESSID to PIMCORE_SESSION_ID.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/23_Installation_and_Upgrade/03_System_Setup_and_Hosting/08_Multi_Application_Setup.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nframework:\n    session:\n        name: \"PIMCORE_SESSION_ID\"\n```\n\n----------------------------------------\n\nTITLE: Rendering an Input Editable in Twig\nDESCRIPTION: This snippet demonstrates how to make a headline editable in a Pimcore document using the pimcore_input editable in a Twig template. The editable will appear as an input widget in admin mode and render the content in frontend mode.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/03_Documents/01_Editables/README.md#2025-04-17_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n<h1>{{ pimcore_input(\"headline\") }}</h1>\n```\n\n----------------------------------------\n\nTITLE: Adding Conditional Comments to HeadScript in Twig\nDESCRIPTION: Example of how to add conditional comments to script tags using the HeadScript extension. This allows hiding scripts from specific browsers, in this case browsers older than IE 11.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/02_MVC/02_Template/02_Template_Extensions/03_HeadScript.md#2025-04-17_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% do pimcore_head_script().appendFile(\n    '/js/prototype.js',\n    'text/javascript',\n    {conditional: 'lt IE 11'}\n%}\n```\n\n----------------------------------------\n\nTITLE: Website Setting Events Declaration\nDESCRIPTION: Definition of event constants for website setting lifecycle events including pre/post add, update, and delete operations.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/18_Tools_and_Features/27_Website_Settings.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nnamespace Pimcore\\Event;\n\nfinal class WebsiteSettingEvents\n{\n    /**\n     * @Event(\"Pimcore\\Event\\Model\\WebsiteSettingEvent\")\n     *\n     * @var string\n     */\n    public const PRE_ADD = 'pimcore.websiteSetting.preAdd';\n\n    /**\n     * @Event(\"Pimcore\\Event\\Model\\WebsiteSettingEvent\")\n     *\n     * @var string\n     */\n    public const POST_ADD = 'pimcore.websiteSetting.postAdd';\n\n    /**\n     * @Event(\"Pimcore\\Event\\Model\\WebsiteSettingEvent\")\n     *\n     * @var string\n     */\n    public const PRE_UPDATE = 'pimcore.websiteSetting.preUpdate';\n\n    /**\n     * @Event(\"Pimcore\\Event\\Model\\WebsiteSettingEvent\")\n     *\n     * @var string\n     */\n    public const POST_UPDATE = 'pimcore.websiteSetting.postUpdate';\n\n    /**\n     * @Event(\"Pimcore\\Event\\Model\\WebsiteSettingEvent\")\n     *\n     * @var string\n     */\n    public const PRE_DELETE = 'pimcore.websiteSetting.preDelete';\n\n    /**\n     * @Event(\"Pimcore\\Event\\Model\\WebsiteSettingEvent\")\n     *\n     * @var string\n     */\n    public const POST_DELETE = 'pimcore.websiteSetting.postDelete';\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Workflow Transition Fields in YAML\nDESCRIPTION: Defines the structure for configuring fields in a workflow transition. It includes options for setting the field name, type, title, and whether it's required. Additional settings allow for custom setter functions and field type configurations.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/07_Workflow_Management/01_Configuration_Details/README.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nname:                 ~ # Required\nfieldType:            ~ # One of \"input\"; \"numeric\"; \"textarea\"; \"select\"; \"datetime\"; \"date\"; \"user\"; \"checkbox\", Required\ntitle:                ~\nrequired:             false\nsetterFn:             ~\nfieldTypeSettings:    []\n```\n\n----------------------------------------\n\nTITLE: Installing PHPUnit Bridge in Composer\nDESCRIPTION: Command to add Symfony's PHPUnit bridge package as a dev dependency to the project.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/19_Development_Tools_and_Details/29_Testing/01_Application_Testing.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ composer require --dev 'symfony/phpunit-bridge:*'\n```\n\n----------------------------------------\n\nTITLE: Basic GPL License Header Template\nDESCRIPTION: Template for the standard GPL license header to be included at the start of source files, including copyright notice and license terms.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/gpl-3.0.txt#2025-04-17_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n<one line to give the program's name and a brief idea of what it does.>\nCopyright (C) <year>  <name of author>\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses/>.\n```\n\n----------------------------------------\n\nTITLE: Output Example from getPosterAsset Method\nDESCRIPTION: Shows the structure of the output array returned by the getPosterAsset() method, including status and video format information.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/03_Documents/01_Editables/38_Video.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n[\n    [status] => finished\n    [formats] => Array\n        (\n            [mp4] => /var/tmp/video_3414__example.mp4\n        )\n]\n```\n\n----------------------------------------\n\nTITLE: Migration Configuration\nDESCRIPTION: YAML configuration for defining migration paths for different Pimcore bundles.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/20_Extending_Pimcore/13_Bundle_Developers_Guide/05_Pimcore_Bundles/01_Installers.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndoctrine_migrations:\n    migrations_paths:\n        'Pimcore\\Bundle\\DataHubBundle\\Migrations': '@PimcoreDataHubBundle/Migrations'\n        'CustomerManagementFrameworkBundle\\Migrations': '@PimcoreCustomerManagementFrameworkBundle/Migrations'\n```\n\n----------------------------------------\n\nTITLE: Checking for Search Implementation in Pimcore\nDESCRIPTION: JavaScript code showing two methods to check if a custom search implementation has been registered in Pimcore's search implementation registry.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/20_Extending_Pimcore/25_Implement_Your_Own_Search.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\npimcore.globalmanager.get('searchImplementationRegistry').hasImplementation();\n\n//or a more readable way\npimcore.helpers.hasSearchImplementation()\n```\n\n----------------------------------------\n\nTITLE: Registering a Session Bag through EventListener in PHP\nDESCRIPTION: This code snippet demonstrates how to implement an EventListener to register a custom session bag before the session starts. It uses Symfony's event system and HttpFoundation component.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/19_Development_Tools_and_Details/35_Working_with_Sessions.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n \nnamespace TestBundle\\EventListener;\n\nuse Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag;\nuse Symfony\\Component\\HttpFoundation\\Session\\SessionInterface;\n \nclass SessionBagListener implements EventSubscriberInterface\n{\n    public static function getSubscribedEvents(): array\n    {\n        return [\n            //run after Symfony\\Component\\HttpKernel\\EventListener\\SessionListener\n            KernelEvents::REQUEST => ['onKernelRequest', 127],\n        ];\n    }\n\n    public function onKernelRequest(RequestEvent $event): void\n    {\n        if (!$event->isMainRequest()) {\n            return;\n        }\n        \n        if ($event->getRequest()->attributes->get('_stateless', false)) {\n            return;\n        }\n\n        $session = $event->getRequest()->getSession();\n        \n        //do not register bags, if session is already started\n        if ($session->isStarted()) {\n            return;\n        }\n\n        $bag = new AttributeBag('_session_cart');\n        $bag->setName('session_cart');\n \n        $session->registerBag($bag);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New Pimcore Classes from Configuration in PHP\nDESCRIPTION: Command to create new Pimcore classes in the database from configuration files. This is useful when deploying new class definitions.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/21_Deployment/05_Deployment_Tools.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./bin/console pimcore:deployment:classes-rebuild --create-classes\n```\n\n----------------------------------------\n\nTITLE: Moving Admin Assets\nDESCRIPTION: Bash commands for relocating user images and custom logo to new directory structure.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/23_Installation_and_Upgrade/07_Updating_Pimcore/10_V6_to_V10.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmkdir var/admin\nmv var/user-image var/admin/user-image\nmkdir var/admin\nmv var/config/custom-logo.* var/admin/custom-logo.image\n```\n\n----------------------------------------\n\nTITLE: Using Deprecated pimcore_cache Method in Twig\nDESCRIPTION: The deprecated pimcore_cache function provides an alternative syntax for caching. This example shows how to create a cache block with manual start and end control.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/02_MVC/02_Template/02_Template_Extensions/README.md#2025-04-17_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{% set cache = pimcore_cache(\"test_cache_key\", 60) %}\n{% if not cache.start() %}\n    <h1>This is some cached microtime</h1>\n    {{ 'now'|date('U') }}\n    {% do cache.end() %}\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Locating Bundle Configurations in Pimcore\nDESCRIPTION: This PHP class, BundleConfigLocator, is responsible for locating configuration files from bundles in Pimcore. It searches for environment-specific and general configuration files in multiple formats (php, yaml, xml) within the Resources/config/pimcore directory of each bundle.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/20_Extending_Pimcore/13_Bundle_Developers_Guide/03_Auto_Loading_Config_And_Routing_Definitions.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Locates configs from bundles if Resources/config/pimcore exists.\n *\n * Will first try to locate <name>_<environment>.<suffix> and fall back to <name>.<suffix> if the\n * environment specific lookup didn't find anything. All known suffixes are searched, so e.g. if a config.yaml\n * and a config.php exist, both will be used.\n *\n * Example: lookup for config will try to locate the following files from every bundle (will return all files it finds):\n *\n *  - Resources/config/pimcore/config_dev.php\n *  - Resources/config/pimcore/config_dev.yaml\n *  - Resources/config/pimcore/config_dev.xml\n *\n * If the previous lookup didn't return any results, it will fall back to:\n *\n *  - Resources/config/pimcore/config.php\n *  - Resources/config/pimcore/config.yaml\n *  - Resources/config/pimcore/config.xml\n */\nclass BundleConfigLocator {}\n```\n\n----------------------------------------\n\nTITLE: Interface Implementation Requirements - PHP\nDESCRIPTION: New required function implementations for CustomReportAdapterInterface including getColumnsWithMetadata and getPagination methods.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/23_Installation_and_Upgrade/07_Updating_Pimcore/13_V11_to_V12.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// Required implementations:\n// bundles/CustomReportsBundle/src/Tool/Adapter/CustomReportAdapterInterface.php\ngetColumnsWithMetadata();\ngetPagination();\n```\n\n----------------------------------------\n\nTITLE: Date Datatypes Table in Markdown\nDESCRIPTION: Markdown table listing date-related data types including date, date & time, and time fields with their descriptions.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/01_Object_Classes/01_Data_Types/README.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                     | Description                                                                                                                                                                                                                                                                                                                                                                                                                                                                    |\n|--------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| date                     | calendar date selector                                                                                                                                                                                                                                                                                                                                                                                                                                                          |\n| date & time              | calendar date selector + combo box for time                                                                                                                                                                                                                                                                                                                                                                                                                                     |\n| time                     | combo box for time                                                                                                                                                                                                                                                                                                                                                                                                                                                     |\n```\n\n----------------------------------------\n\nTITLE: Simple PDF Rendering with PimcoreWebToPrintBundle in PHP\nDESCRIPTION: This snippet demonstrates a basic implementation of rendering a PDF using PimcoreWebToPrintBundle. It renders an HTML view and then converts it to a PDF, which is returned as the response.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/18_Tools_and_Features/30_Rendering_PDFs.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\nclass BlogController extends FrontendController\n{\n    public function indexAction(Request $request): Response\n    {\n        //your custom code....\n\n        //return the pdf\n        $html = $this->renderView(':Blog:index.html.php', [\n            'document' => $this->document,\n            'editmode' => $this->editmode,\n        ]);\n        return new Response(\n            \\Pimcore\\Bundle\\WebToPrintBundle\\Processor::getInstance()->getPdfFromString($html),\n            200,\n            array(\n                'Content-Type' => 'application/pdf',\n            )\n        );\n    }\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Bundle Product Price Calculator Event Listener in PHP\nDESCRIPTION: PHP implementation of an event listener that automatically calculates bundle product prices based on component products with a 20% discount applied\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/26_Best_Practice/02_Implementing_Product_Information_Management.md#2025-04-17_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace App\\EventListener;\n\nuse Pimcore\\Event\\Model\\DataObjectEvent;\nuse Pimcore\\Model\\DataObject\\Product;\n\nclass DataObjectListener \n{\n    public function onObjectPostUpdate(DataObjectEvent $e): void\n    {\n        $obj = $e->getObject();\n    \n        if ($obj instanceof Product) {\n            $bundleProducts = $obj->getBundle_products();\n            $currentPrice = $obj->getBundlePrice();\n        \n            if (count($bundleProducts) >0) {\n                $bundlePrice = 0;\n        \n                foreach($bundleProducts as $product){\n                    $price = $product->getPrice()->getValue();\n                    $bundlePrice += $price;\n                }\n                \n                //substract the 20% of the sum\n                $bundlePrice = round($bundlePrice*0.8,2);\n        \n                //Add this check to avoid circular saves\n                if ($bundlePrice != $currentPrice) {\n                    $obj->setBundlePrice($bundlePrice);\n                    $obj->save();\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Document Links\nDESCRIPTION: Internal documentation links to various sections of Pimcore's localization documentation.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/06_Multi_Language_i18n/README.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n./02_Localize_your_Documents.md\n./04_Shared_Translations.md\n../05_Objects/01_Object_Classes/01_Data_Types/50_Localized_Fields.md\n../05_Objects/01_Object_Classes/01_Data_Types/15_Classification_Store.md\n```\n\n----------------------------------------\n\nTITLE: Generating Thumbnails for a List of Assets in PHP\nDESCRIPTION: This code example demonstrates how to generate thumbnails for a list of different asset types. It uses the match expression to handle different asset types (Image or Document) appropriately when generating thumbnails.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/04_Assets/03_Working_with_Thumbnails/05_Document_Thumbnails.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n   $list = new Asset\\Listing();\n   $assets = $list->getAssets();\n   foreach ($assets as $asset) {\n      echo match (true) {\n         $asset instanceof Asset\\Image => $asset->getThumbnail('myThumbnail')?->getPath(),\n         $asset instanceof Asset\\Document => $asset->getImageThumbnail('myThumbnail')?->getPath(),\n         default => '',\n      };\n   }\n```\n\n----------------------------------------\n\nTITLE: Configuring Opcache Preloading in php.ini\nDESCRIPTION: This configuration enables Opcache preloading in PHP, which can significantly improve application performance by preloading commonly used framework files. It specifies the user that runs PHP-FPM and the path to the preload file.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/23_Installation_and_Upgrade/03_System_Setup_and_Hosting/09_Performance_Guide.md#2025-04-17_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\nopcache.preload_user=www-data # user that runs PHP(-FPM)\nopcache.preload=/var/www/html/var/cache/prod/App_KernelProdContainer.preload.php # path to preload file in project's /var/cache directory\n```\n\n----------------------------------------\n\nTITLE: Configuring Complete Perspective in Pimcore YAML\nDESCRIPTION: Full YAML configuration for a custom perspective including element trees, toolbar settings, and feature visibility settings for different sections of the Pimcore admin interface.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/18_Tools_and_Features/13_Perspectives.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n#var/config/perspectives/perspective.yaml\n\n...\ndemo:\n    elementTree:\n        -\n            type: customview\n            position: left\n            sort: 0\n            expanded: false\n            hidden: false\n            id: 4e9f892c-7734-f5fa-d6f0-31e7f9787ffc\n        -\n            type: assets\n            position: right\n            sort: 0\n            expanded: false\n            hidden: false\n            treeContextMenu:\n                asset:\n                    items:\n                        add:\n                            hidden: false\n                            items:\n                                upload: true\n                                uploadCompatibility: true\n                                uploadZip: true\n                        addFolder: true\n                        rename: true\n                        copy: true\n                        cut: true\n                        paste: true\n                        pasteCut: true\n                        delete: true\n                        searchAndMove: true\n                        lock: true\n                        unlock: true\n                        lockAndPropagate: true\n                        unlockAndPropagate: true\n                        reload: true\n    iconCls: pimcore_nav_icon_perspective\n    icon: null\n    toolbar:\n        file:\n            hidden: true\n            items:\n                perspectives: false\n                dashboards: false\n                openDocument: false\n                openAsset: false\n                openObject: false\n                searchReplace: false\n                schedule: false\n                seemode: false\n                closeAll: false\n                help: false\n                about: false\n        marketing:\n            hidden: true\n            items:\n                reports: false\n                tagmanagement: false\n                targeting: false\n                seo:\n                    hidden: false\n                    items:\n                        documents: false\n                        robots: false\n                        httperrors: false\n        extras:\n            hidden: true\n            items:\n                glossary: false\n                redirects: false\n                translations: false\n                recyclebin: false\n                plugins: false\n                notesEvents: false\n                applicationlog: false\n                gdpr_data_extractor: false\n                emails: false\n                maintenance: false\n                systemtools:\n                    hidden: false\n                    items:\n                        phpinfo: false\n                        opcache: false\n                        requirements: false\n                        serverinfo: false\n                        database: false\n                        fileexplorer: false\n        settings:\n            hidden: true\n            items:\n                customReports: false\n                marketingReports: false\n                documentTypes: false\n                predefinedProperties: false\n                predefinedMetadata: false\n                system: false\n                website: false\n                web2print: false\n                users:\n                    hidden: false\n                    items:\n                        users: false\n                        roles: false\n                thumbnails: false\n                objects:\n                    hidden: false\n                    items:\n                        classes: false\n                        fieldcollections: false\n                        objectbricks: false\n                        quantityValue: false\n                        classificationstore: false\n                        bulkExport: false\n                        bulkImport: false\n                routes: false\n                cache:\n                    hidden: false\n                    items:\n                        clearAll: false\n                        clearData: false\n                        clearSymfony: false\n                        clearOutput: false\n                        clearTemp: false\n                adminTranslations: false\n                tagConfiguration: false\n                perspectiveEditor: false\n        search:\n            hidden: false\n            items:\n                quickSearch: false\n                documents: true\n                assets: false\n                objects: false\n        datahub:\n            hidden: false\n```\n\n----------------------------------------\n\nTITLE: Rendering Cached Navigation in Twig\nDESCRIPTION: This Twig snippet shows how to render the cached navigation using the custom navigation function and a custom partial template. It demonstrates the use of the 'app_navigation_custom' function and the 'pimcore_nav_renderer'.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/03_Documents/03_Navigation.md#2025-04-17_snippet_15\n\nLANGUAGE: twig\nCODE:\n```\n{% set mainNavigation = app_navigation_custom(document, navStartNode) %}\n{% set menuRenderer = pimcore_nav_renderer('menu') %}\n{% do menuRenderer.setPartial(\"navigation/partials/navigation.html.twig\") %}\n{{ menuRenderer.render(mainNavigation) | raw }}\n```\n\n----------------------------------------\n\nTITLE: Markdown Navigation Structure for System Setup Documentation\nDESCRIPTION: A structured markdown document organizing system setup and infrastructure documentation links into General and Advanced topic sections.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/23_Installation_and_Upgrade/03_System_Setup_and_Hosting/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# System Setup & Hosting/Infrastructure Topics\n\n## General Topics\n- [Installation Guide](../../01_Getting_Started/README.md)\n- [Apache Configuration](01_Apache_Configuration.md)\n- [Nginx Configuration](02_Nginx_Configuration.md)\n- [Database Setup](05_DB_Setup.md)\n- [Additional Tools Installation](06_Additional_Tools_Installation.md)\n\n## Advanced Topics\n- [Multi-application setup](08_Multi_Application_Setup.md)\n- [Performance Guide](09_Performance_Guide.md)\n```\n\n----------------------------------------\n\nTITLE: Implementing PreGetValueHook in Pimcore Parent Class\nDESCRIPTION: Demonstrates how to implement the PreGetValueHookInterface in a custom parent class to modify data before it's returned to the caller.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/01_Object_Classes/05_Class_Settings/25_Inheritance.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace Website\\DataObject;\n\nuse \\Pimcore\\Model\\DataObject;\n\nclass Special extends DataObject\\Concrete implements DataObject\\PreGetValueHookInterface\n{\n    public function preGetValue(string $key): ?string\n    {\n        if ($key == \"myCustomProperty\") {\n            return strtolower($object->myCustomProperty);\n        }\n\n        return null;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Glossary Terms with pimcore_glossary\nDESCRIPTION: The pimcore_glossary filter replaces terms defined in the Pimcore glossary system with their configured representations throughout a content block.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/02_MVC/02_Template/02_Template_Extensions/README.md#2025-04-17_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n{% apply pimcore_glossary %}\nMy content\n{% endapply %}\n```\n\n----------------------------------------\n\nTITLE: Installing Pimcore Skeleton Application\nDESCRIPTION: Commands to install and set up a new empty Pimcore skeleton application. Uses Composer to create the project and includes the initial installation step.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nCOMPOSER_MEMORY_LIMIT=-1 composer create-project pimcore/skeleton ./my-project\ncd ./my-project\n./vendor/bin/pimcore-install\n```\n\n----------------------------------------\n\nTITLE: Deprecated Manual Block with Additional CSS Class\nDESCRIPTION: Shows the deprecated way to add a custom CSS class to block elements in editmode. This approach will be removed in Pimcore 12.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/03_Documents/01_Editables/06_Block.md#2025-04-17_snippet_9\n\nLANGUAGE: twig\nCODE:\n```\n<!-- Deprecated! Will be removed in Pimcore 12 -->\n{% set block = pimcore_block(\"gridblock\", {\"manual\": true}).start() %}\n<div>\n    {% for b in block.iterator %}\n        {% do block.blockConstruct() %}\n            {% do block.blockStart(true, false, \"my-additional-class\") %}\n                Add additional class 'my-addional-class' to editmode-div\n            {% do block.blockEnd() %}\n        {% do block.blockDestruct() %}\n    {% endfor %}\n</div>\n{% do block.end() %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Support Strategy for Workflow in YAML\nDESCRIPTION: Demonstrates how to configure a custom support strategy service in YAML. This approach is used when very specific logic is needed to determine workflow support.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/07_Workflow_Management/03_Support_Strategies.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nsupport_strategy:\n    service: App\\Workflow\\SupportStrategy\n```\n\n----------------------------------------\n\nTITLE: Modern Approach for Inline Scripts with HeadScript in Twig\nDESCRIPTION: Shows the recommended modern approach to capture JavaScript code with Twig variables using a combination of set and appendScript methods. Includes an example with additional script tag attributes.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/02_MVC/02_Template/02_Template_Extensions/03_HeadScript.md#2025-04-17_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n{% set inlineScript %}\n    var action = '{{ baseUrl }}';\n    $('#foo_form').attr(\"action\", action);\n{% endset %}\n{% do pimcore_head_script().appendScript(inlineScript) %}\n\n{# Example if you wish to specify additional attributes for the <script> tag #}\n{% do pimcore_head_script().appendScript(inlineScript, \"text/javascript\", {\"async\": \"async\"}) %}\n```\n\n----------------------------------------\n\nTITLE: Displaying Select Options in Controller\nDESCRIPTION: Shows how to prepare select field options in a controller for use in a Twig template.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/01_Object_Classes/01_Data_Types/80_Select_Types.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Pimcore\\Model\\DataObject;\n\n$product = DataObject::getById(49);\n// for a select data field\n$colorOptions = DataObject\\Service::getOptionsForSelectField($product, \"color\");\n\nreturn $this->render('foo/bar.html.twig', ['colorOptions' => $colorOptions]);\n```\n\n----------------------------------------\n\nTITLE: Checking Custom Permissions in Pimcore Frontend\nDESCRIPTION: JavaScript code that checks for custom permissions in the frontend bundle. Listens for the pimcoreReady event and verifies if the current user has the specified permission.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/20_Extending_Pimcore/24_Add_Your_Own_Permissions.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.addEventListener(pimcore.events.pimcoreReady, (e) => {\n    if(pimcore.currentuser.permissions.indexOf(\"my_permission\") >= 0) {\n        //...\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Starting Job Execution with Custom Context in PHP\nDESCRIPTION: PHP code snippet demonstrating how to start a job execution with a custom execution context.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/19_Development_Tools_and_Details/08_Generic_Execution_Engine/02_Configuration/02_Configuration.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$jobExecutionAgent->startJobExecution($job, $owner, 'my_custom_context');\n```\n\n----------------------------------------\n\nTITLE: HTTP Debug Headers in Pimcore\nDESCRIPTION: HTTP response headers used by Pimcore for debugging cache and system information.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/19_Development_Tools_and_Details/13_Debugging.md#2025-04-17_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nX-Pimcore-Output-Cache-Tag:output_<SOME_HASH>\nX-Pimcore-Cache-Date:<CACHE_DATE>\nX-Pimcore-Output-Cache-Disable-Reason:<SOME REASON>\nX-Powered-By:pimcore\n```\n\n----------------------------------------\n\nTITLE: Disabling Content Security Policy in Pimcore\nDESCRIPTION: YAML configuration to disable the Content Security Policy header in Pimcore admin interface.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/26_Best_Practice/75_Security_Concept.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config/config.yaml\npimcore_admin:\n    admin_csp_header:\n        enabled: false\n```\n\n----------------------------------------\n\nTITLE: Creating Classification Store Elements Programmatically\nDESCRIPTION: Demonstrates how to create new Classification Store elements including key configurations, groups, collections, and their relationships through PHP code.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/01_Object_Classes/01_Data_Types/15_Classification_Store.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// KeyConfig\n\n// first of all, define the datatype which is quantity value in this example\n$definition = new \\Pimcore\\Model\\DataObject\\ClassDefinition\\Data\\QuantityValue();\n$definition->setName(\"height\");\n$definition->setTitle(\"Height\");\n\n$keyConfig = new \\Pimcore\\Model\\DataObject\\Classificationstore\\KeyConfig();\n$keyConfig->setStoreId($storeId);\n$keyConfig->setName($name);\n$keyConfig->setDescription($description);\n$keyConfig->setEnabled(true);\n$keyConfig->setType($definition->getFieldtype());\n$keyConfig->setDefinition(json_encode($definition)); // The definition is used in object editor to render fields\n$keyConfig->save();  \n\n// Group\n$groupConfig = new \\Pimcore\\Model\\DataObject\\Classificationstore\\GroupConfig();\n$groupConfig->setStoreId($storeId);\n$groupConfig->setName($name);\n$groupConfig->setDescription($description);\n$groupConfig->save();\n\n// Collection\n$collectionConfig = new \\Pimcore\\Model\\DataObject\\Classificationstore\\CollectionConfig();\n$collectionConfig->setStoreId($storeId);\n$collectionConfig->setName($name);\n$collectionConfig->setDescription($description);\n$collectionConfig->save();\n\n// Add a key to group\n$keyRel = new \\Pimcore\\Model\\DataObject\\Classificationstore\\KeyGroupRelation();\n$keyRel->setGroupId($groupConfig->getId());\n$keyRel->setKeyId($keyConfig->getId());\n$keyRel->save();\n\n// Add a group to a collection\n$groupRel = new \\Pimcore\\Model\\DataObject\\Classificationstore\\CollectionGroupRelation();\n$groupRel->setGroupId($groupConfig->getId());\n$groupRel->setColId($collectionConfig->getId());\n$groupRel->save();\n```\n\n----------------------------------------\n\nTITLE: Simple Markdown Header\nDESCRIPTION: A markdown header labeled 'Details' without any additional content.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/07_Workflow_Management/01_Configuration_Details/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Details\n```\n\n----------------------------------------\n\nTITLE: Configuring SSL Settings for Nginx\nDESCRIPTION: This section configures detailed SSL settings, including session handling, protocols, ciphers, and HSTS. It also sets up OCSP stapling for improved SSL performance.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/23_Installation_and_Upgrade/03_System_Setup_and_Hosting/02_Nginx_Configuration.md#2025-04-17_snippet_3\n\nLANGUAGE: nginx\nCODE:\n```\nssl_session_timeout 1d;\nssl_session_cache shared:MozSSL:10m;  # about 40000 sessions\nssl_session_tickets off;\n\nssl_dhparam /etc/ssl/dhparam.pem;\n\nssl_protocols TLSv1.2 TLSv1.3;\nssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;\nssl_prefer_server_ciphers off;\n\n# HSTS (ngx_http_headers_module is required) (63072000 seconds)\nadd_header Strict-Transport-Security \"max-age=63072000\" always;\n\n# OCSP stapling\nssl_stapling on;\nssl_stapling_verify on;\n\nssl_trusted_certificate /etc/ssl/letsencrypt.cot.pem;\n\nresolver 127.0.0.1;\n```\n\n----------------------------------------\n\nTITLE: Benchmark Results After Cache Optimization\nDESCRIPTION: Apache Benchmark (ab) results showing improved performance metrics after implementing caching optimizations. Shows approximately 15% improvement in response times compared to before.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/23_Installation_and_Upgrade/03_System_Setup_and_Hosting/09_Performance_Guide.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nTime taken for tests:   5.560 seconds\nTime per request:       1111.956 [ms] (mean)\nTime per request:       55.598 [ms] (mean, across all concurrent requests)\n\nConnection Times (ms)\n              min  mean[+/-sd] median   max\nConnect:        0    0   0.3      0       2\nProcessing:   314 1021 196.1   1010    2106\nWaiting:      312 1010 192.8    998    2080\nTotal:        315 1021 196.0   1011    2107\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Web2Print Documents in Pimcore 11\nDESCRIPTION: This bash command and SQL queries clean up Web2Print documents and permissions if the Web2Print functionality is not used in Pimcore 11.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/23_Installation_and_Upgrade/07_Updating_Pimcore/12_V10_to_V11.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nbin/console pimcore:documents:cleanup printpage printcontainer\n```\n\nLANGUAGE: sql\nCODE:\n```\nDELETE FROM `users_permission_definitions` WHERE `key` = 'web2print_settings';\nUPDATE `users` SET `permissions`=REGEXP_REPLACE(`permissions`, '(?:^|,)web2print_settings(?:$|,)', '') WHERE `permissions` REGEXP '(?:^|,)web2print_settings(?:$|,)';\n```\n\n----------------------------------------\n\nTITLE: Implementing PimcoreBundleAdminClassicInterface with Encore in PHP\nDESCRIPTION: This snippet demonstrates how to implement the PimcoreBundleAdminClassicInterface in a Pimcore bundle class, using Encore to load built assets. It shows how to use the EncoreHelper to get build paths for CSS and JS files.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/20_Extending_Pimcore/13_Bundle_Developers_Guide/13_Loading_Admin_UI_Assets.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Pimcore\\Extension\\Bundle\\AbstractPimcoreBundle;\nuse Pimcore\\Extension\\Bundle\\PimcoreBundleAdminClassicInterface;\nuse Pimcore\\Extension\\Bundle\\Traits\\BundleAdminClassicTrait;\nuse Pimcore\\Extension\\Bundle\\Traits\\PackageVersionTrait;\nuse Pimcore\\Helper\\EncoreHelper;\n\nclass EncoreBundle extends AbstractPimcoreBundle implements PimcoreBundleAdminClassicInterface\n{\n    use BundleAdminClassicTrait;\n    use PackageVersionTrait;\n\n    public function getCssPaths(): array\n    {\n        return EncoreHelper::getBuildPathsFromEntrypoints($this->getPath() . '/public/build/encorebundle/entrypoints.json', 'css');\n    }\n\n    public function getJsPaths(): array\n    {\n        return EncoreHelper::getBuildPathsFromEntrypoints($this->getPath() . '/public/build/encorebundle/entrypoints.json');\n    }\n\n    public function getPath(): string\n    {\n        return \\dirname(__DIR__);\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Image Editable with Direct Thumbnail Configuration in Twig\nDESCRIPTION: Demonstrates how to use the Image Editable with a direct thumbnail configuration. This example shows how to specify custom thumbnail settings like width, height, interlace, and quality.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/03_Documents/01_Editables/14_Image.md#2025-04-17_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{{ pimcore_image(\"myImage\", {\n    \"title\": \"Drag your image here\",\n    \"width\": 200,\n    \"height\": 200,\n    \"thumbnail\": {\n        \"width\": 200,\n        \"height\": 200,\n        \"interlace\": true,\n        \"quality\": 90\n    }\n}) }}\n```\n\n----------------------------------------\n\nTITLE: Number Datatypes Table in Markdown\nDESCRIPTION: Markdown table describing numeric data types including numeric spinner, slider, and quantity value fields with their descriptions.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/05_Objects/01_Object_Classes/01_Data_Types/README.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                     | Description                                                                                                                                                                                                                                                                                                                                                                                                                                                                    |\n|--------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| numeric                  | spinner field for number input                                                                                                                                                                                                                                                                                                                                                                                                                                                  |\n| slider                   | number input with slider widget (min - max slider)                                                                                                                                                                                                                                                                                                                                                                                                                              |\n| quantity value           | number input with an additional unit. available units can be configured centrally.  |\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Document Controller in Pimcore\nDESCRIPTION: YAML configuration to set the default controller and action for Pimcore documents when only a template is specified. This defines the fallback controller behavior.\nSOURCE: https://github.com/pimcore/pimcore/blob/12.x/doc/03_Documents/README.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\npimcore:\n    documents:\n        default_controller:App\\Controller\\DefaultController::defaultAction\n```"
  }
]