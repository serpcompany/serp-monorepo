[
  {
    "owner": "standardbeagle",
    "repo": "bifrostql",
    "content": "TITLE: GraphQL Authorization Validation Rule Implementation in C#\nDESCRIPTION: Implements a validation rule that enforces authentication and permission requirements before query execution. It validates that mutations require authentication and checks field-level permissions against the user's claims.\nSOURCE: https://github.com/standardbeagle/bifrostql/blob/main/docs/graphql-dotnet-authorization.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class RequiresAuthValidationRule : IValidationRule\n{\n    public Task<INodeVisitor> ValidateAsync(ValidationContext context)\n    {\n        var userContext = context.UserContext as GraphQLUserContext;\n        var authenticated = userContext.User?.IsAuthenticated() ?? false;\n\n        return Task.FromResult(new EnterLeaveListener(_ =>\n        {\n            // Validate mutations require authentication\n            _.Match<Operation>(op =>\n            {\n                if (op.OperationType == OperationType.Mutation && !authenticated)\n                {\n                    context.ReportError(new ValidationError(\n                        context.Document.Source,\n                        \"6.1.1\",\n                        $\"Authorization is required to access {op.Name}.\",\n                        op) { Code = \"auth-required\" });\n                }\n            });\n\n            // Validate field-level permissions\n            _.Match<Field>(fieldAst =>\n            {\n                var fieldDef = context.TypeInfo.GetFieldDef();\n                if (fieldDef.RequiresPermissions() &&\n                    (!authenticated || !fieldDef.CanAccess(userContext.User.Claims)))\n                {\n                    context.ReportError(new ValidationError(\n                        context.Document.Source,\n                        \"6.1.1\",\n                        $\"You are not authorized to run this query.\",\n                        fieldAst) { Code = \"auth-required\" });\n                }\n            });\n        }));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Permission Extension Methods for GraphQL Types in C#\nDESCRIPTION: Defines extension methods to manage permissions on GraphQL types and fields. These methods provide functionality to check permissions, check if a user has access based on claims, and set permission requirements on types and fields.\nSOURCE: https://github.com/standardbeagle/bifrostql/blob/main/docs/graphql-dotnet-authorization.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic static class GraphQLExtensions\n{\n    public static readonly string PermissionsKey = \"Permissions\";\n\n    // Check if type requires any permissions\n    public static bool RequiresPermissions(this IProvideMetadata type)\n    {\n        var permissions = type.GetMetadata<IEnumerable<string>>(PermissionsKey, new List<string>());\n        return permissions.Any();\n    }\n\n    // Check if user has all required permissions\n    public static bool CanAccess(this IProvideMetadata type, IEnumerable<string> claims)\n    {\n        var permissions = type.GetMetadata<IEnumerable<string>>(PermissionsKey, new List<string>());\n        return permissions.All(x => claims?.Contains(x) ?? false);\n    }\n\n    // Check for specific permission\n    public static bool HasPermission(this IProvideMetadata type, string permission)\n    {\n        var permissions = type.GetMetadata<IEnumerable<string>>(PermissionsKey, new List<string>());\n        return permissions.Any(x => string.Equals(x, permission));\n    }\n\n    // Add required permission\n    public static void RequirePermission(this IProvideMetadata type, string permission)\n    {\n        var permissions = type.GetMetadata<List<string>>(PermissionsKey);\n\n        if (permissions == null)\n        {\n            permissions = new List<string>();\n            type.Metadata[PermissionsKey] = permissions;\n        }\n\n        permissions.Add(permission);\n    }\n\n    // Fluent API for adding permission to field builder\n    public static FieldBuilder<TSourceType, TReturnType> RequirePermission<TSourceType, TReturnType>(\n        this FieldBuilder<TSourceType, TReturnType> builder, string permission)\n    {\n        builder.FieldType.RequirePermission(permission);\n        return builder;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Input Error Handling in Field Resolver\nDESCRIPTION: Example of handling input validation in a GraphQL field resolver by throwing an ExecutionError\nSOURCE: https://github.com/standardbeagle/bifrostql/blob/main/docs/graphql-dotnet-errors.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nField<NonNullGraphType<OrderGraph>>(\"order\")\n    .Argument<NonNullGraphType<IntGraphType>>(\"id\")\n    .Resolve(context =>\n    {\n        var order = _orderService.GetById(context.GetArgument<int>(\"id\"));\n        if (order == null)\n            throw new ExecutionError(\"Invalid order id\");\n    });\n```\n\n----------------------------------------\n\nTITLE: Accessing UserContext in Field Resolvers\nDESCRIPTION: Demonstrates how to access the UserContext object within a field resolver to retrieve custom data.\nSOURCE: https://github.com/standardbeagle/bifrostql/blob/main/docs/graphql-dotnet-user-context.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Query : ObjectGraphType\n{\n  public Query()\n  {\n    Field<DroidType>(\"hero\")\n      .Resolve(context =>\n      {\n        var userContext = context.UserContext as MyGraphQLUserContext;\n        // Use userContext here\n      });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Root Schema Structure in BifrostQL GraphQL\nDESCRIPTION: The root schema definition that organizes BifrostQL into two main types: 'database' for queries and 'databaseInput' for mutations. This structure creates a clear separation between read and write operations.\nSOURCE: https://github.com/standardbeagle/bifrostql/blob/main/docs/graphql-dotnet-query-organization.md#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nschema {\n  query: database\n  mutation: databaseInput\n}\n```\n\n----------------------------------------\n\nTITLE: Unhandled Exception Handler with Database Logging\nDESCRIPTION: Implementation of an unhandled exception delegate that logs errors to a database and returns the log ID\nSOURCE: https://github.com/standardbeagle/bifrostql/blob/main/docs/graphql-dotnet-errors.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar executer = new DocumentExecuter();\nvar result = executer.ExecuteAsync(options =>\n{\n    \n    ...\n    \n    options.UnhandledExceptionDelegate = async context =>\n    {\n        try\n        {\n            using var db = new MyDatabaseContext();\n            var errorLog = new ErrorLog {\n                DateStamp = DateTime.UtcNow,\n                Message = context.Exception.Message,\n                Details = context.Exception.ToString()\n            };\n            db.ErrorLogs.Add(errorLog);\n            await db.SaveChangesAsync();\n            context.Exception.Data[\"errorLogId\"] = errorLog.Id;\n        }\n        catch\n        {\n        }\n    };\n});\n```\n\n----------------------------------------\n\nTITLE: Creating UserContext with HTTP User Claims\nDESCRIPTION: Shows how to extend the UserContext class to include user claims from HTTP requests for authentication purposes.\nSOURCE: https://github.com/standardbeagle/bifrostql/blob/main/docs/graphql-dotnet-user-context.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyGraphQLUserContext : Dictionary<string, object?>\n{\n    public ClaimsPrincipal User { get; set; }\n\n    public MyGraphQLUserContext(ClaimsPrincipal user)\n    {\n        User = user;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing InstrumentFieldsMiddleware for Metrics in GraphQL .NET\nDESCRIPTION: A complete example of field middleware that adds instrumentation for metrics collection during field resolution. It conditionally enables metrics and captures metadata about the field being resolved.\nSOURCE: https://github.com/standardbeagle/bifrostql/blob/main/docs/graphql-dotnet-field-middleware.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class InstrumentFieldsMiddleware : IFieldMiddleware\n{\n    public ValueTask<object?> ResolveAsync(IResolveFieldContext context, FieldMiddlewareDelegate next)\n    {\n        return context.Metrics.Enabled\n            ? ResolveWhenMetricsEnabledAsync(context, next)\n            : next(context);\n    }\n\n    private async ValueTask<object?> ResolveWhenMetricsEnabledAsync(IResolveFieldContext context, FieldMiddlewareDelegate next)\n    {\n        var name = context.FieldAst.Name.StringValue;\n\n        var metadata = new Dictionary<string, object?>\n        {\n            { \"typeName\", context.ParentType.Name },\n            { \"fieldName\", name },\n            { \"returnTypeName\", context.FieldDefinition.ResolvedType!.ToString() },\n            { \"path\", context.Path },\n        };\n\n        using (context.Metrics.Subject(\"field\", name, metadata))\n            return await next(context).ConfigureAwait(false);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphQL with System.Text.Json and Newtonsoft.Json in ASP.NET Core\nDESCRIPTION: Example showing how to configure GraphQL in ASP.NET Core services collection using either System.Text.Json or Newtonsoft.Json. This demonstrates the basic setup required for each serialization library.\nSOURCE: https://github.com/standardbeagle/bifrostql/blob/main/docs/graphql-dotnet-serialization.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// Using System.Text.Json\nservices.AddGraphQL(b => b\n    .AddSystemTextJson());\n\n// Using Newtonsoft.Json\nservices.AddGraphQL(b => b\n    .AddNewtonsoftJson());\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Validation Rule using ExecutionOptions in C#\nDESCRIPTION: This code shows how to add a custom validation rule using ExecutionOptions in GraphQL .NET. It demonstrates executing a schema with a custom validation rule combined with core rules.\nSOURCE: https://github.com/standardbeagle/bifrostql/blob/main/docs/graphql-dotnet-query-validation.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nawait schema.ExecuteAsync(_ =>\n{\n  _.Query = \"...\";\n  _.ValidationRules =\n    new[]\n    {\n      new RequiresAuthValidationRule()\n    }\n    .Concat(DocumentValidator.CoreRules);\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Table Type with Relationships in BifrostQL GraphQL\nDESCRIPTION: Example of a 'Customer' type definition that includes table columns, relationships to other tables, dynamic join capabilities, and aggregation functions. Shows how BifrostQL represents database tables in GraphQL.\nSOURCE: https://github.com/standardbeagle/bifrostql/blob/main/docs/graphql-dotnet-query-organization.md#2025-04-21_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\ntype Customer {\n  id: ID!\n  name: String!\n  email: String\n  # Relationships\n  orders: [Order!]\n  # Dynamic joins\n  _join(table: String!): [JoinedTable!]\n  # Aggregations\n  _agg: CustomerAggregates\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Object Type in GraphQL.NET\nDESCRIPTION: C# implementation of the 'Droid' object type using GraphQL.NET. It defines a DroidType class inheriting from ObjectGraphType<Droid>, setting up the name, description, and fields with their respective types and descriptions.\nSOURCE: https://github.com/standardbeagle/bifrostql/blob/main/docs/graphql-dotnet-schema-types.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class DroidType : ObjectGraphType<Droid>\n{\n    public DroidType()\n    {\n        Name = \"Droid\";\n        Description = \"A mechanical creature in the Star Wars universe.\";\n        Field(d => d.Name, nullable: true).Description(\"The name of the droid.\");\n        Field<ListGraphType<EpisodeEnum>>(\"appearsIn\").Description(\"Which movie they appear in.\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Database Query Type in BifrostQL GraphQL\nDESCRIPTION: The 'database' type serves as the entry point for all read operations in BifrostQL. It exposes database tables as fields and includes a metadata query for schema information.\nSOURCE: https://github.com/standardbeagle/bifrostql/blob/main/docs/graphql-dotnet-query-organization.md#2025-04-21_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\ntype database {\n  customers: [Customer!]\n  orders: [Order!]\n  products: [Product!]\n  _dbSchema(graphQlName: String): [dbTableSchema!]!\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Validation Rule for Connection Size Limits in C#\nDESCRIPTION: This code demonstrates how to implement a custom validation rule for connection size limits in GraphQL .NET. It defines a NoConnectionOver1000ValidationRule class that enforces a maximum of 1000 rows for connections.\nSOURCE: https://github.com/standardbeagle/bifrostql/blob/main/docs/graphql-dotnet-query-validation.md#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class NoConnectionOver1000ValidationRule : ValidationRuleBase, IVariableVisitorProvider, INodeVisitor\n{\n    public override ValueTask<INodeVisitor?> GetPostNodeVisitorAsync(ValidationContext context)\n        => context.ArgumentValues != null ? new(this) : default;\n\n    ValueTask INodeVisitor.EnterAsync(ASTNode node, ValidationContext context)\n    {\n        if (node is not GraphQLField fieldNode)\n            return default;\n\n        var fieldDef = context.TypeInfo.GetFieldDef();\n        if (fieldDef == null || fieldDef.ResolvedType?.GetNamedType() is not IObjectGraphType connectionType || !connectionType.Name.EndsWith(\"Connection\"))\n            return default;\n\n        if (!(context.ArgumentValues?.TryGetValue(fieldNode, out var args) ?? false))\n            return default;\n\n        ArgumentValue lastArg = default;\n        if (!args.TryGetValue(\"first\", out var firstArg) && !args.TryGetValue(\"last\", out lastArg))\n            return default;\n\n        var rows = (int?)firstArg.Value ?? (int?)lastArg.Value ?? 0;\n        if (rows > 1000)\n            context.ReportError(new ValidationError(\"Cannot return more than 1000 rows\"));\n\n        return default;\n    }\n\n    ValueTask INodeVisitor.LeaveAsync(ASTNode node, ValidationContext context) => default;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring UserContext Builder in Startup\nDESCRIPTION: Demonstrates how to configure a UserContext builder in the application startup to automatically populate the context with HTTP user claims.\nSOURCE: https://github.com/standardbeagle/bifrostql/blob/main/docs/graphql-dotnet-user-context.md#2025-04-21_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddGraphQL()\n        .AddUserContextBuilder(httpContext => new MyGraphQLUserContext(httpContext.User));\n```\n\n----------------------------------------\n\nTITLE: Schema-Level Validation using Schema Node Visitor in C#\nDESCRIPTION: This snippet illustrates schema-level validation using a schema node visitor in GraphQL .NET. It defines a NoConnectionOver1000Visitor class that adds validation to connection fields, limiting them to 1000 rows.\nSOURCE: https://github.com/standardbeagle/bifrostql/blob/main/docs/graphql-dotnet-query-validation.md#2025-04-21_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddGraphQL(b => b\n    .AddSchema<MySchema>()\n    .AddSchemaVisitor<NoConnectionOver1000Visitor>());\n    \npublic class NoConnectionOver1000Visitor : BaseSchemaNodeVisitor\n{\n    public override void VisitObjectFieldArgumentDefinition(QueryArgument argument, FieldType field, IObjectGraphType type, ISchema schema)\n        => argument.Validator += GetValidator(argument, field);\n\n    public override void VisitInterfaceFieldArgumentDefinition(QueryArgument argument, FieldType field, IInterfaceGraphType type, ISchema schema)\n        => field.Validator += GetValidator(argument, field);\n\n    private static Action<object?>? GetValidator(QueryArgument argument, FieldType field)\n    {\n        if (!field.ResolvedType!.GetNamedType().Name.EndsWith(\"Connection\"))\n            return null;\n\n        if (argument.Name != \"first\" && argument.Name != \"last\")\n            return null;\n\n        return value =>\n        {\n            if (value is int intValue && intValue > 1000)\n                throw new ArgumentException(\"Cannot return more than 1000 rows.\");\n        };\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample GraphQL Error Response Format\nDESCRIPTION: Example JSON response showing how a FormatException is structured when thrown within a product field resolver\nSOURCE: https://github.com/standardbeagle/bifrostql/blob/main/docs/graphql-dotnet-errors.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"errors\": [\n    {\n      \"message\": \"Error trying to resolve field 'product'.\",\n      \"locations\": [\n        {\n          \"line\": 3,\n          \"column\": 5\n        }\n      ],\n      \"path\": [\n        \"product\"\n      ],\n      \"extensions\": {\n        \"code\": \"FORMAT\",\n        \"codes\": [\n          \"FORMAT\"\n        ]\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Query Filtering and Pagination in BifrostQL GraphQL\nDESCRIPTION: Example of how to query the 'customers' table with filtering, sorting, and pagination arguments. This demonstrates BifrostQL's flexible querying capabilities for database tables.\nSOURCE: https://github.com/standardbeagle/bifrostql/blob/main/docs/graphql-dotnet-query-organization.md#2025-04-21_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  customers(\n    filter: CustomerFilterInput\n    sort: [CustomerSortInput!]\n    first: Int\n    after: String\n  ) {\n    id\n    name\n    email\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Metrics per Execution in GraphQL.NET\nDESCRIPTION: Demonstrates how to enable metrics for a specific execution using DocumentExecutor. This approach allows for fine-grained control over when metrics are collected.\nSOURCE: https://github.com/standardbeagle/bifrostql/blob/main/docs/graphql-dotnet-metrics.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar executor = new DocumentExecutor();\nExecutionResult result = executor.ExecuteAsync(_ =>\n{\n    _.Schema = schema;\n    _.Query = \"...\";\n    _.EnableMetrics = true;\n    _.FieldMiddleware.Use<InstrumentFieldsMiddleware>();\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing IFieldMiddleware Interface in C#\nDESCRIPTION: The core interface definition for creating field middleware in GraphQL .NET. This interface requires implementing the ResolveAsync method that processes field resolution.\nSOURCE: https://github.com/standardbeagle/bifrostql/blob/main/docs/graphql-dotnet-field-middleware.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface IFieldMiddleware\n{\n    ValueTask<object?> ResolveAsync(IResolveFieldContext context, FieldMiddlewareDelegate next);\n}\n```\n\n----------------------------------------\n\nTITLE: Field-Level Validation in GraphQL .NET\nDESCRIPTION: This snippet illustrates field-level validation in GraphQL .NET. It shows how to add validation rules to input arguments or input object fields using the Validate method.\nSOURCE: https://github.com/standardbeagle/bifrostql/blob/main/docs/graphql-dotnet-query-validation.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nField(x => x.FirstName)\n    .Validate(value =>\n    {\n        if (((string)value).Length >= 10)\n            throw new ArgumentException(\"Length must be less than 10 characters.\");\n    });\n\nField(x => x.Age)\n    .Validate(value =>\n    {\n        if ((int)value < 18)\n            throw new ArgumentException(\"Age must be 18 or older.\");\n    });\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Validation Rule using Dependency Injection in C#\nDESCRIPTION: This snippet demonstrates how to add a custom validation rule using dependency injection in GraphQL .NET. It uses the AddGraphQL method to configure the schema and add a custom validation rule.\nSOURCE: https://github.com/standardbeagle/bifrostql/blob/main/docs/graphql-dotnet-query-validation.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddGraphQL(b => b\n  .AddSchema<MySchema>()\n  .AddSystemTextJson()\n  .AddValidationRule<RequiresAuthValidationRule>());\n```\n\n----------------------------------------\n\nTITLE: Defining Mutation Type Structure in BifrostQL GraphQL\nDESCRIPTION: The 'databaseInput' type that groups all write operations in BifrostQL. Each database table has corresponding mutation fields for operations like insert, update, and delete.\nSOURCE: https://github.com/standardbeagle/bifrostql/blob/main/docs/graphql-dotnet-query-organization.md#2025-04-21_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\ntype databaseInput {\n  customers: CustomerMutations\n  orders: OrderMutations\n  products: ProductMutations\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Type Mappings in GraphQL.NET Schema\nDESCRIPTION: Example demonstrating how to register custom type mappings in a GraphQL.NET schema. Shows mapping CLR types to output, input, and scalar graph types, including overriding default scalar mappings.\nSOURCE: https://github.com/standardbeagle/bifrostql/blob/main/docs/graphql-dotnet-schema-types.md#2025-04-21_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MySchema\n{\n    public void MySchema()\n    {\n        ...\n\n        // For output graphs, map the 'User' data model class to the output object graph type 'UserGraphType'\n        this.RegisterTypeMapping<User, UserGraphType>();\n\n        // For input graphs, map the 'User' data model class to the input object graph type 'UserInputGraphType'\n        this.RegisterTypeMapping<User, UserInputGraphType>();\n\n        // For input or output graphs, map the 'Vector' class/struct to the scalar graph type 'VectorGraphType'\n        this.RegisterTypeMapping<Vector, VectorGraphType>();\n\n        // Override Guid default mapping to use the custom scalar graph type 'MyGuidGraphType'\n        this.RegisterTypeMapping<Guid, MyGuidGraphType>()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Subscription Resolver in C#\nDESCRIPTION: C# implementation of a chat subscription resolver that returns an IObservable<Message> stream for real-time updates. The class inherits from ObjectGraphType and defines a 'messageAdded' field that uses ResolveStream for handling the subscription.\nSOURCE: https://github.com/standardbeagle/bifrostql/blob/main/docs/graphql-dotnet-subscriptions.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class ChatSubscriptions : ObjectGraphType\n{\n  private readonly IChat _chat;\n\n  public ChatSubscriptions(IChat chat)\n  {\n    _chat = chat;\n\n    Field<MessageType, Message>(\"messageAdded\")\n      .ResolveStream(ResolveStream);\n  }\n\n  private IObservable<Message> ResolveStream(IResolveFieldContext context)\n  {\n    return _chat.Messages();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic UserContext Class in C#\nDESCRIPTION: Demonstrates how to create a simple UserContext class that inherits from Dictionary<string, object?> for use with GraphQL.NET.\nSOURCE: https://github.com/standardbeagle/bifrostql/blob/main/docs/graphql-dotnet-user-context.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyGraphQLUserContext : Dictionary<string, object?>\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Validation Rule to Disable Introspection in C#\nDESCRIPTION: This snippet shows how to implement a custom validation rule to disable introspection in GraphQL .NET. It defines a NoIntrospectionValidationRule class that reports an error for __schema and __type fields.\nSOURCE: https://github.com/standardbeagle/bifrostql/blob/main/docs/graphql-dotnet-query-validation.md#2025-04-21_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic class NoIntrospectionValidationRule : ValidationRuleBase\n{\n    private static readonly MatchingNodeVisitor<GraphQLField> _visitor = new(\n        (field, context) =>\n        {\n            if (field.Name.Value == \"__schema\" || field.Name.Value == \"__type\")\n                context.ReportError(new NoIntrospectionError(context.Document.Source, field));\n        });\n\n    public override ValueTask<INodeVisitor?> GetPreNodeVisitorAsync(ValidationContext context) => new(_visitor);\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Permissions to GraphQL Types in C#\nDESCRIPTION: Demonstrates how to apply permission requirements at both the type level and field level in a GraphQL type definition. This example shows requiring a general permission for all fields in a type and an additional permission for a specific field.\nSOURCE: https://github.com/standardbeagle/bifrostql/blob/main/docs/graphql-dotnet-authorization.md#2025-04-21_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyGraphType : ObjectGraphType\n{\n    public MyGraphType()\n    {\n        // Require permission for all fields in this type\n        this.RequirePermission(\"READ_ONLY\");\n        \n        // Require additional permission for specific field\n        Field(x => x.Secret).RequirePermission(\"Admin\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Metrics via Dependency Injection in GraphQL.NET\nDESCRIPTION: Shows how to enable metrics globally using dependency injection. This method is useful for enabling metrics throughout the application, especially in development environments.\nSOURCE: https://github.com/standardbeagle/bifrostql/blob/main/docs/graphql-dotnet-metrics.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddGraphQL(b => b\n    .AddSchema<StarWarsSchema>()\n    .AddApolloTracing()\n    .AddSystemTextJson());\n```\n\n----------------------------------------\n\nTITLE: Registering Multiple Field Middlewares Using IEnumerable\nDESCRIPTION: Demonstrates how to register and use multiple field middlewares using dependency injection with IEnumerable. This approach allows for a more flexible middleware pipeline.\nSOURCE: https://github.com/standardbeagle/bifrostql/blob/main/docs/graphql-dotnet-field-middleware.md#2025-04-21_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MySchema : Schema\n{\n    public MySchema(\n        IServiceProvider services,\n        MyQuery query,\n        IEnumerable<IFieldMiddleware> middlewares)\n        : base(services)\n    {\n        Query = query;\n        foreach (var middleware in middlewares)\n            FieldMiddleware.Use(middleware);\n    }\n}\n\n// In Startup.cs\nservices.AddSingleton<ISchema, MySchema>();\nservices.AddSingleton<IFieldMiddleware, InstrumentFieldsMiddleware>();\nservices.AddSingleton<IFieldMiddleware, MyMiddleware>();\n```\n\n----------------------------------------\n\nTITLE: Direct Error Addition to Context\nDESCRIPTION: Example showing how to directly add errors to the IResolveFieldContext.Errors property\nSOURCE: https://github.com/standardbeagle/bifrostql/blob/main/docs/graphql-dotnet-errors.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nField<DroidType>(\"hero\")\n    .Resolve(context =>\n    {\n        context.Errors.Add(new ExecutionError(\"Error Message\"));\n        return ...;\n    });\n);\n```\n\n----------------------------------------\n\nTITLE: Mutation Example for Inserting Data in BifrostQL GraphQL\nDESCRIPTION: An example mutation that inserts a new customer record. Shows how write operations are performed through the 'databaseInput' root type and specific table mutation fields.\nSOURCE: https://github.com/standardbeagle/bifrostql/blob/main/docs/graphql-dotnet-query-organization.md#2025-04-21_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\nmutation {\n  databaseInput {\n    customers {\n      insert(input: {\n        name: \"John Doe\"\n        email: \"john@example.com\"\n      }) {\n        id\n        name\n        email\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Field Middleware Using a Class in GraphQL .NET\nDESCRIPTION: Shows how to register field middleware using a middleware class instance. This approach is suitable when the middleware is implemented as a separate class.\nSOURCE: https://github.com/standardbeagle/bifrostql/blob/main/docs/graphql-dotnet-field-middleware.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar schema = new Schema();\nschema.Query = new MyQuery();\nschema.FieldMiddleware.Use(new InstrumentFieldsMiddleware());\n```\n\n----------------------------------------\n\nTITLE: Dependency Injection for Field Middleware in Schema Constructor\nDESCRIPTION: Shows how to register field middleware in a schema constructor using dependency injection. The middleware is injected into the schema constructor for use.\nSOURCE: https://github.com/standardbeagle/bifrostql/blob/main/docs/graphql-dotnet-field-middleware.md#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MySchema : Schema\n{\n    public MySchema(\n        IServiceProvider services,\n        MyQuery query,\n        InstrumentFieldsMiddleware middleware)\n        : base(services)\n    {\n        Query = query;\n        FieldMiddleware.Use(middleware);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Enumeration Case Conversion in GraphQL.NET\nDESCRIPTION: This snippet shows how to create a custom enumeration case conversion by inheriting from EnumerationGraphType<TEnum> and overriding the ChangeEnumCase method.\nSOURCE: https://github.com/standardbeagle/bifrostql/blob/main/docs/graphql-dotnet-schema-types.md#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class CamelCaseEnumerationGraphType<T> : EnumerationGraphType<T> where T : Enum\n{\n    protected override string ChangeEnumCase(string val) => val.ToCamelCase();\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Validation Attribute for Type-First Schemas in C#\nDESCRIPTION: This code demonstrates how to create a custom validation attribute for type-first schemas in GraphQL .NET. It includes a MyMaxLength attribute that enforces a maximum length on string arguments.\nSOURCE: https://github.com/standardbeagle/bifrostql/blob/main/docs/graphql-dotnet-query-validation.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyMaxLength : GraphQLAttribute\n{\n    private readonly int _maxLength;\n    public MyMaxLength(int maxLength)\n    {\n        _maxLength = maxLength;\n    }\n\n    public override void Modify(ArgumentInformation argumentInformation)\n    {\n        if (argumentInformation.TypeInformation.Type != typeof(string))\n        {\n            throw new InvalidOperationException(\"MyMaxLength can only be used on string arguments.\");\n        }\n    }\n\n    public override void Modify(QueryArgument queryArgument)\n    {\n        queryArgument.Validate(value =>\n        {\n            if (((string)value).Length > _maxLength)\n            {\n                throw new ArgumentException($\"Value is too long. Max length is {_maxLength}.\");\n            }\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional Metrics via HTTP Header in GraphQL.NET\nDESCRIPTION: Defines an extension method to enable metrics based on the presence of a specific HTTP header. This allows for conditional enabling of metrics in production environments.\nSOURCE: https://github.com/standardbeagle/bifrostql/blob/main/docs/graphql-dotnet-metrics.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic static class GraphQLBuilderMetricsExtensions\n{\n    public static IGraphQLBuilder EnableMetricsByHeader(\n        this IGraphQLBuilder builder, \n        string headerName = \"X-GRAPHQL-METRICS\")\n    {\n        return builder.ConfigureExecution(async (options, next) =>\n        {\n            if (!options.EnableMetrics)\n            {\n                var accessor = options.RequestServices.GetRequiredService<IHttpContextAccessor>();\n                options.EnableMetrics = accessor.HttpContext.Request.Headers.ContainsKey(headerName);\n            }\n            return await next(options).ConfigureAwait(false);\n        });\n    }\n}\n\n// Usage in Startup.cs\nservices.AddGraphQL(b => b\n    .AddSchema<StarWarsSchema>()\n    .EnableMetricsByHeader()\n    .AddSystemTextJson());\n```\n\n----------------------------------------\n\nTITLE: Executing GraphQL Query with UserContext\nDESCRIPTION: Shows how to use the custom UserContext when executing GraphQL queries using the ExecuteAsync method.\nSOURCE: https://github.com/standardbeagle/bifrostql/blob/main/docs/graphql-dotnet-user-context.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nawait schema.ExecuteAsync(_ =>\n{\n  _.Query = \"...\";\n  _.UserContext = new MyGraphQLUserContext();\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Query with Enumeration Argument in GraphQL.NET\nDESCRIPTION: This snippet demonstrates how to implement a GraphQL.NET query type that handles an enumeration argument, showing how to access the argument value.\nSOURCE: https://github.com/standardbeagle/bifrostql/blob/main/docs/graphql-dotnet-schema-types.md#2025-04-21_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\npublic class StarWarsQuery : ObjectGraphType<object>\n{\n    public StarWarsQuery()\n    {\n        Name = \"Query\";\n\n        Field<ListGraphType<HumanType>>(\"humans\")\n            .Argument<NonNullGraphType<EpisodeEnum>>(\"appearsIn\", \"An episode the human appears in.\")\n            .Resolve(context => \n            {\n                // episode = 4\n                var episode = context.GetArgument<int>(\"appearsIn\");\n\n                // Alternatively, get the argument as an enum. episodeFromEnum = Episodes.NEWHOPE\n                var episodeFromEnum = context.GetArgument<Episodes>(\"appearsIn\");\n\n                // full implementation would access data store to get humans by episode.\n                return default(Human);\n            }\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Middleware in Dependency Injection Container\nDESCRIPTION: Shows how to register field middleware in the dependency injection container. This allows the middleware to be resolved and used in the schema constructor.\nSOURCE: https://github.com/standardbeagle/bifrostql/blob/main/docs/graphql-dotnet-field-middleware.md#2025-04-21_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddSingleton<InstrumentFieldsMiddleware>();\n```\n\n----------------------------------------\n\nTITLE: Configuring Schema-First Enumeration Types in GraphQL.NET\nDESCRIPTION: This snippet shows how to configure schema-first enumeration types in GraphQL.NET, mapping them to C# enumeration types.\nSOURCE: https://github.com/standardbeagle/bifrostql/blob/main/docs/graphql-dotnet-schema-types.md#2025-04-21_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nvar schema = Schema.For(definitions, c =>\n{\n    // example 1: define the \"Animal\" schema enumeration type to use the C# type Animal\n    c.Types.Include<Animal>();\n\n    // example 2: define the \"AnimalType\" schema enumeration type to use the C# type Animal\n    c.Types.Include<Animal>(\"AnimalType\");\n\n    // example 3: define the \"Animal\" schema enumeration type to use the C# type Animal\n    c.Types.For(\"Animal\").Type = typeof(Animal);\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a GraphQL Subscription Query\nDESCRIPTION: A GraphQL subscription query that listens for new messages and receives updates with sender information, content, and timestamp.\nSOURCE: https://github.com/standardbeagle/bifrostql/blob/main/docs/graphql-dotnet-subscriptions.md#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nsubscription MessageAdded {\n  messageAdded {\n    from {\n      id\n      displayName\n    }\n    content\n    sentAt\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Enumerations with Attributes in .NET for GraphQL.NET\nDESCRIPTION: This snippet demonstrates how to define enumerations with various attributes in .NET for use with GraphQL.NET, including descriptions and deprecation reasons.\nSOURCE: https://github.com/standardbeagle/bifrostql/blob/main/docs/graphql-dotnet-schema-types.md#2025-04-21_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n[CamelCase]\npublic enum CamelCaseEnum\n{\n    FirstValue,\n    SecondValue\n}\n\n[Description(\"The Star Wars movies.\")]\n[Obsolete(\"Optional. Sets the GraphQL DeprecationReason for the whole enum.\")]\npublic enum Episodes\n{\n    [Description(\"Episode 1: The Phantom Menace\")]\n    [Obsolete(\"Optional. Sets the GraphQL DeprecationReason for this member.\")]\n    PHANTOMMENACE = 1,\n\n    [Description(\"Episode 4: A New Hope\")]\n    NEWHOPE  = 4,\n\n    [Description(\"Episode 5: The Empire Strikes Back\")]\n    EMPIRE  = 5,\n\n    [Description(\"Episode 6: Return of the Jedi\")]\n    JEDI  = 6\n}\n\npublic class EpisodeEnum : EnumerationGraphType<Episodes>\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Query with Relationships Example in BifrostQL GraphQL\nDESCRIPTION: An example query that demonstrates how to fetch orders along with their related customer information, showing BifrostQL's ability to traverse relationships between tables.\nSOURCE: https://github.com/standardbeagle/bifrostql/blob/main/docs/graphql-dotnet-query-organization.md#2025-04-21_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  database {\n    orders {\n      id\n      orderDate\n      customer {\n        name\n        email\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Scoped Dependencies in Singleton Field Middleware\nDESCRIPTION: Shows how to handle scoped dependencies in singleton field middleware by resolving them during the field resolution process rather than in the constructor.\nSOURCE: https://github.com/standardbeagle/bifrostql/blob/main/docs/graphql-dotnet-field-middleware.md#2025-04-21_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyFieldMiddleware : IFieldMiddleware\n{\n    private readonly IHttpContextAccessor _accessor;\n    private readonly IMySingletonService _service;\n\n    public MyFieldMiddleware(IHttpContextAccessor accessor, IMySingletonService service)\n    {\n        _accessor = accessor;\n        _service = service;\n    }\n\n    public ValueTask<object?> ResolveAsync(IResolveFieldContext context, FieldMiddlewareDelegate next)\n    {\n        var scopedDependency1 = accessor.HttpContext.RequestServices.GetRequiredService<IMyService1>();\n        var scopedDependency2 = accessor.HttpContext.RequestServices.GetRequiredService<IMyService2>();\n        // Use dependencies\n        return next(context);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Standard GraphQL Error Response Format in BifrostQL\nDESCRIPTION: Example of the standard GraphQL error response format used by BifrostQL. Shows the structure with error message, locations, path and extensions containing error code, timestamp and details.\nSOURCE: https://github.com/standardbeagle/bifrostql/blob/main/docs/error-handling.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"errors\": [\n    {\n      \"message\": \"Error message\",\n      \"locations\": [\n        {\n          \"line\": 2,\n          \"column\": 3\n        }\n      ],\n      \"path\": [\"field\", \"subfield\"],\n      \"extensions\": {\n        \"code\": \"ERROR_CODE\",\n        \"timestamp\": \"2025-01-28T13:37:00Z\",\n        \"details\": {}\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Type Mapping with Attributes in GraphQL.NET\nDESCRIPTION: Example showing how to annotate a CLR class with InputType and OutputType attributes to specify which graph types should be used for the class in GraphQL schema.\nSOURCE: https://github.com/standardbeagle/bifrostql/blob/main/docs/graphql-dotnet-schema-types.md#2025-04-21_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\n[InputType(typeof(WidgetInputGraphType))]\n[OutputType(typeof(WidgetGraphType))]\npublic class Widget\n{\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Error Handling in BifrostQL with C#\nDESCRIPTION: C# code example for implementing custom error handling by extending BifrostQL's built-in error handling infrastructure. Shows how to configure error logging options during service registration.\nSOURCE: https://github.com/standardbeagle/bifrostql/blob/main/docs/error-handling.md#2025-04-21_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddGraphQL(b => b\n    .AddBifrostErrorLogging(options => \n    {\n        options.EnableConsole = true;\n        options.EnableFile = true;\n        options.MinimumLevel = LogLevel.Debug;\n        options.LogFilePath = \"custom/path/to/logs\";\n    }));\n```\n\n----------------------------------------\n\nTITLE: Configuring Kestrel Server for Synchronous I/O with Newtonsoft.Json\nDESCRIPTION: Example showing how to configure the Kestrel server to allow synchronous I/O operations when using GraphQL.NewtonsoftJson. This configuration is required because Newtonsoft.Json performs synchronous operations on the underlying stream.\nSOURCE: https://github.com/standardbeagle/bifrostql/blob/main/docs/graphql-dotnet-serialization.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// Allow synchronous I/O when using Newtonsoft.Json\nservices.Configure<KestrelServerOptions>(options =>\n{\n    options.AllowSynchronousIO = true;\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Error Message Override\nDESCRIPTION: Example of overriding the default error message for specific exception types\nSOURCE: https://github.com/standardbeagle/bifrostql/blob/main/docs/graphql-dotnet-errors.md#2025-04-21_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\noptions.UnhandledExecutionDelegate = ctx =>\n{\n    if (ctx.Exception is SqlException)\n        ctx.ErrorMessage = \"A database error has occurred.\";\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring BifrostQL Error Handling in appsettings.json\nDESCRIPTION: JSON configuration for BifrostQL logging settings in appsettings.json file. Options include enabling console and file logging, setting minimum log level, and specifying a custom log file path.\nSOURCE: https://github.com/standardbeagle/bifrostql/blob/main/docs/error-handling.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"BifrostQL\": {\n    \"Logging\": {\n      \"EnableConsole\": true,\n      \"EnableFile\": true,\n      \"MinimumLevel\": \"Information\",\n      \"FilePath\": \"logs/bifrostql.log\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Metrics Output in Apollo Tracing Format\nDESCRIPTION: Illustrates the structure of the metrics data output, following the Apollo Tracing format. It includes overall execution timing, phase timing, and resolver-level metrics.\nSOURCE: https://github.com/standardbeagle/bifrostql/blob/main/docs/graphql-dotnet-metrics.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"hero\": {\n      \"name\": \"R2-D2\",\n      \"friends\": [\n        {\n          \"name\": \"Luke\"\n        },\n        {\n          \"name\": \"C-3PO\"\n        }\n      ]\n    }\n  },\n  \"extensions\": {\n    \"tracing\": {\n      \"version\": 1,\n      \"startTime\": \"2018-07-28T21:39:27.160902Z\",\n      \"endTime\": \"2018-07-28T21:39:27.372902Z\",\n      \"duration\": 212304000,\n      \"parsing\": {\n        \"startOffset\": 57436000,\n        \"duration\": 21985999\n      },\n      \"validation\": {\n        \"startOffset\": 57436000,\n        \"duration\": 21985999\n      },\n      \"execution\": {\n        \"resolvers\": [\n          {\n            \"path\": [\"hero\"],\n            \"parentType\": \"Query\",\n            \"fieldName\": \"hero\",\n            \"returnType\": \"Character\",\n            \"startOffset\": 147389000,\n            \"duration\": 2756000\n          }\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Query Example in BifrostQL GraphQL\nDESCRIPTION: A simple query example that fetches basic customer information. Demonstrates the nested structure where database tables are accessed through the 'database' root type.\nSOURCE: https://github.com/standardbeagle/bifrostql/blob/main/docs/graphql-dotnet-query-organization.md#2025-04-21_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  database {\n    customers {\n      id\n      name\n      email\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Field Middleware Using a Delegate in GraphQL .NET\nDESCRIPTION: Demonstrates how to register field middleware using a delegate function. This approach allows for inline middleware definition without creating a separate class.\nSOURCE: https://github.com/standardbeagle/bifrostql/blob/main/docs/graphql-dotnet-field-middleware.md#2025-04-21_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nschema.FieldMiddleware.Use(next =>\n{\n    return context =>\n    {\n        // your code here\n        var result = next(context);\n        // your code here\n        return result;\n    };\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Object Type in GraphQL\nDESCRIPTION: Example of defining a 'Droid' object type in GraphQL schema language. It includes a 'name' field of type String and an 'appearsIn' field which is a list of Episode enum values.\nSOURCE: https://github.com/standardbeagle/bifrostql/blob/main/docs/graphql-dotnet-schema-types.md#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype Droid {\n  name: String\n  appearsIn: [Episode]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Droid Class in .NET\nDESCRIPTION: C# class definition for the Droid entity, corresponding to the GraphQL object type. It includes properties for Name (string) and AppearsIn (List<Episode>).\nSOURCE: https://github.com/standardbeagle/bifrostql/blob/main/docs/graphql-dotnet-schema-types.md#2025-04-21_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Droid\n{\n  public string Name { get; set; }\n  public List<Episode> AppearsIn { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: BifrostQL Log Output Example\nDESCRIPTION: Example of a log entry generated by BifrostQL's logging system. The log includes timestamp, log level, error message, query path, source location, additional details, and stack trace.\nSOURCE: https://github.com/standardbeagle/bifrostql/blob/main/docs/error-handling.md#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n2025-01-28 13:37:00.123 [Error] GraphQL Error: Unable to resolve field 'product'\nPath: query/product\nLocation: Line 3, Column 5\nDetails: Invalid product ID provided\nStack Trace: ...\n```\n\n----------------------------------------\n\nTITLE: Defining FieldMiddlewareDelegate in C#\nDESCRIPTION: The delegate type that represents the next middleware in the pipeline, which is passed to each middleware for continuation of the resolution process.\nSOURCE: https://github.com/standardbeagle/bifrostql/blob/main/docs/graphql-dotnet-field-middleware.md#2025-04-21_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic delegate ValueTask<object?> FieldMiddlewareDelegate(IResolveFieldContext context);\n```\n\n----------------------------------------\n\nTITLE: Defining Enumerations in .NET\nDESCRIPTION: This snippet demonstrates how to define an equivalent enumeration for Star Wars episodes in .NET, including backing values for each member.\nSOURCE: https://github.com/standardbeagle/bifrostql/blob/main/docs/graphql-dotnet-schema-types.md#2025-04-21_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic enum Episodes\n{\n    NEWHOPE = 4,\n    EMPIRE = 5,\n    JEDI = 6\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Error Response Format in JSON\nDESCRIPTION: This JSON snippet shows the format of a GraphQL error response. It includes an errors array with details about the validation error, including the error message, location, and additional metadata.\nSOURCE: https://github.com/standardbeagle/bifrostql/blob/main/docs/graphql-dotnet-query-validation.md#2025-04-21_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"errors\": [\n    {\n      \"message\": \"Invalid value for argument 'firstName' of field 'testMe'. Length must be less than 10 characters.\",\n      \"locations\": [\n        {\n          \"line\": 1,\n          \"column\": 14\n        }\n      ],\n      \"extensions\": {\n        \"code\": \"INVALID_VALUE\",\n        \"codes\": [\n          \"INVALID_VALUE\",\n          \"ARGUMENT\"\n        ],\n        \"number\": \"5.6\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Types with Enumeration Fields in GraphQL.NET\nDESCRIPTION: This snippet demonstrates how to define GraphQL types with enumeration fields in GraphQL.NET, using both string and integer backing values.\nSOURCE: https://github.com/standardbeagle/bifrostql/blob/main/docs/graphql-dotnet-schema-types.md#2025-04-21_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\npublic class HumanString\n{\n    //i.e. \"NEWHOPE\", \"EMPIRE\", \"JEDI\"\n    public string[] AppearsIn { get; set; }\n}\n\npublic class HumanStringType: ObjectGraphType<HumanString>\n{\n    public HumanStringType()\n    {\n        Name = \"HumanString\";\n        Field<ListGraphType<EpisodeEnum>>(\"appearsIn\").Description(\"Which movie they appear in.\");\n    }\n}\n\npublic class HumanInt\n{\n    //i.e. 4, 5, 6\n    public int[] AppearsIn { get; set; }\n}\n\npublic class HumanIntType: ObjectGraphType<HumanInt>\n{\n    public HumanIntType()\n    {\n        Name = \"HumanInt\";\n        Field<ListGraphType<EpisodeEnum>>(\"appearsIn\").Description(\"Which movie they appear in.\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Enumerations as Arguments in GraphQL Queries\nDESCRIPTION: This snippet shows a GraphQL query using an enumeration as an argument to filter humans appearing in a specific film.\nSOURCE: https://github.com/standardbeagle/bifrostql/blob/main/docs/graphql-dotnet-schema-types.md#2025-04-21_snippet_9\n\nLANGUAGE: graphql\nCODE:\n```\nquery HumansAppearingIn($episode: Episode!){\n    humans(appearsIn: $episode){\n        id\n        name\n        appearsIn\n    }\n}\n\n# example query variables:\n# {\n#   \"episode\":\"NEWHOPE\"\n# }\n```\n\n----------------------------------------\n\nTITLE: Manually Creating EnumerationGraphType in GraphQL.NET\nDESCRIPTION: This snippet shows how to manually create an EnumerationGraphType in GraphQL.NET, allowing for custom descriptions and values.\nSOURCE: https://github.com/standardbeagle/bifrostql/blob/main/docs/graphql-dotnet-schema-types.md#2025-04-21_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\npublic class EpisodeEnum : EnumerationGraphType\n{\n    public EpisodeEnum()\n    {\n        Name = \"Episode\";\n        Description = \"One of the films in the Star Wars Trilogy.\";\n        Add(\"NEWHOPE\", 4, \"Released in 1977.\");\n        Add(\"EMPIRE\", 5, \"Released in 1980.\");\n        Add(\"JEDI\", 6, \"Released in 1983.\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Enumerations in GraphQL\nDESCRIPTION: This snippet shows how to define an enumeration for Star Wars episodes using GraphQL schema language.\nSOURCE: https://github.com/standardbeagle/bifrostql/blob/main/docs/graphql-dotnet-schema-types.md#2025-04-21_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nenum Episode {\n  NEWHOPE\n  EMPIRE\n  JEDI\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook Components and Assets in MDX\nDESCRIPTION: Imports the Meta component from Storybook and various SVG assets for use in the introduction page. The Meta component configures the page's title in Storybook navigation.\nSOURCE: https://github.com/standardbeagle/bifrostql/blob/main/examples/edit-db/src/stories/Introduction.stories.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Meta } from '@storybook/addon-docs';\nimport Code from './assets/code-brackets.svg';\nimport Colors from './assets/colors.svg';\nimport Comments from './assets/comments.svg';\nimport Direction from './assets/direction.svg';\nimport Flow from './assets/flow.svg';\nimport Plugin from './assets/plugin.svg';\nimport Repo from './assets/repo.svg';\nimport StackAlt from './assets/stackalt.svg';\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint Parser Options for TypeScript\nDESCRIPTION: Configuration example for setting up ESLint parser options in a TypeScript React project. Includes settings for ECMAScript version, module type, and TypeScript configuration files.\nSOURCE: https://github.com/standardbeagle/bifrostql/blob/main/examples/host-edit-db/README.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  // other rules...\n  parserOptions: {\n    ecmaVersion: 'latest',\n    sourceType: 'module',\n    project: ['./tsconfig.json', './tsconfig.node.json'],\n    tsconfigRootDir: __dirname,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Storybook Page Title with Meta Component\nDESCRIPTION: Uses the Meta component to define this page as the introduction page in Storybook navigation.\nSOURCE: https://github.com/standardbeagle/bifrostql/blob/main/examples/edit-db/src/stories/Introduction.stories.mdx#2025-04-21_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<Meta title=\"Introduction\" />\n```\n\n----------------------------------------\n\nTITLE: DI Configuration for Unhandled Exception Handler\nDESCRIPTION: Example of configuring unhandled exception handling using dependency injection with IGraphQLBuilder\nSOURCE: https://github.com/standardbeagle/bifrostql/blob/main/docs/graphql-dotnet-errors.md#2025-04-21_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddGraphQL(b => b\n    .AddSchema<MySchema()\n    .AddUnhandledExceptionHandler(async (context, options) =>\n    {\n        try\n        {\n            await using var scope = options.RequestServices!.CreateAsyncScope();\n            var db = scope.ServiceProvider.GetRequiredService<MyDatabaseContext>();\n            var errorLog = new ErrorLog {\n                Query = options.Query ?? options.Document?.Source.ToString(),\n                DateStamp = DateTime.UtcNow,\n                Message = context.Exception.Message,\n                Details = context.Exception.ToString()\n            };\n            db.ErrorLogs.Add(errorLog);\n            await db.SaveChangesAsync();\n            context.Exception.Data[\"errorLogId\"] = errorLog.Id;\n        }\n        catch\n        {\n        }\n    })\n);\n```\n\n----------------------------------------\n\nTITLE: Defining CSS Styles for Storybook Introduction Page\nDESCRIPTION: CSS styling for the introduction page, including responsive layouts, link styling, and custom tips formatting. The styles are defined within a style tag using a template literal.\nSOURCE: https://github.com/standardbeagle/bifrostql/blob/main/examples/edit-db/src/stories/Introduction.stories.mdx#2025-04-21_snippet_2\n\nLANGUAGE: CSS\nCODE:\n```\n  {`\n    .subheading {\n      --mediumdark: '#999999';\n      font-weight: 900;\n      font-size: 13px;\n      color: #999;\n      letter-spacing: 6px;\n      line-height: 24px;\n      text-transform: uppercase;\n      margin-bottom: 12px;\n      margin-top: 40px;\n    }\n\n    .link-list {\n      display: grid;\n      grid-template-columns: 1fr;\n      grid-template-rows: 1fr 1fr;\n      row-gap: 10px;\n    }\n\n    @media (min-width: 620px) {\n      .link-list {\n        row-gap: 20px;\n        column-gap: 20px;\n        grid-template-columns: 1fr 1fr;\n      }\n    }\n\n    @media all and (-ms-high-contrast:none) {\n    .link-list {\n        display: -ms-grid;\n        -ms-grid-columns: 1fr 1fr;\n        -ms-grid-rows: 1fr 1fr;\n      }\n    }\n\n    .link-item {\n      display: block;\n      padding: 20px 30px 20px 15px;\n      border: 1px solid #00000010;\n      border-radius: 5px;\n      transition: background 150ms ease-out, border 150ms ease-out, transform 150ms ease-out;\n      color: #333333;\n      display: flex;\n      align-items: flex-start;\n    }\n\n    .link-item:hover {\n      border-color: #1EA7FD50;\n      transform: translate3d(0, -3px, 0);\n      box-shadow: rgba(0, 0, 0, 0.08) 0 3px 10px 0;\n    }\n\n    .link-item:active {\n      border-color: #1EA7FD;\n      transform: translate3d(0, 0, 0);\n    }\n\n    .link-item strong {\n      font-weight: 700;\n      display: block;\n      margin-bottom: 2px;\n    }\n\n    .link-item img {\n      height: 40px;\n      width: 40px;\n      margin-right: 15px;\n      flex: none;\n    }\n\n    .link-item span {\n      font-size: 14px;\n      line-height: 20px;\n    }\n\n    .tip {\n      display: inline-block;\n      border-radius: 1em;\n      font-size: 11px;\n      line-height: 12px;\n      font-weight: 700;\n      background: #E7FDD8;\n      color: #66BF3C;\n      padding: 4px 12px;\n      margin-right: 10px;\n      vertical-align: top;\n    }\n\n    .tip-wrapper {\n      font-size: 13px;\n      line-height: 20px;\n      margin-top: 40px;\n      margin-bottom: 40px;\n    }\n\n    .tip-wrapper code {\n      font-size: 12px;\n      display: inline-block;\n    }\n  `}\n```\n\n----------------------------------------\n\nTITLE: Referencing File Path for Storybook Introduction\nDESCRIPTION: Displays a tip with the file path for editing the Introduction markdown file in Storybook.\nSOURCE: https://github.com/standardbeagle/bifrostql/blob/main/examples/edit-db/src/stories/Introduction.stories.mdx#2025-04-21_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\n<code>stories/Introduction.stories.mdx</code>\n```"
  }
]