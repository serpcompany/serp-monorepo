[
  {
    "owner": "azuread",
    "repo": "microsoft-identity-web",
    "content": "TITLE: Web API Authentication Configuration in C#\nDESCRIPTION: Extension methods for configuring Microsoft Identity Web API authentication. Includes methods for setting up JWT Bearer authentication.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_13\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.MicrosoftIdentityWebApiAuthenticationBuilderExtensions.AddMicrosoftIdentityWebApi(this Microsoft.AspNetCore.Authentication.AuthenticationBuilder! builder, Microsoft.Extensions.Configuration.IConfiguration! configuration, string! configSectionName = \"AzureAd\", string! jwtBearerScheme = \"Bearer\", bool subscribeToJwtBearerMiddlewareDiagnosticsEvents = false) -> Microsoft.Identity.Web.MicrosoftIdentityWebApiAuthenticationBuilderWithConfiguration!\n```\n\n----------------------------------------\n\nTITLE: Requiring Scopes or App Permissions in ASP.NET Core Authorization Policies (C#)\nDESCRIPTION: This extension method allows an AuthorizationPolicyBuilder to require either a set of scopes or application permissions for policy evaluation, adhering to advanced OAuth2 and RBAC scenarios. It accepts two IEnumerable<string> for allowed scopes and allowed app permission values. Requires Microsoft.Identity.Web and Microsoft.AspNetCore.Authorization. The method returns the updated AuthorizationPolicyBuilder for further configuration or endpoint mapping.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net7.0/PublicAPI.Shipped.txt#2025-04-23_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Identity.Web.PolicyBuilderExtensions.RequireScopeOrAppPermission(this Microsoft.AspNetCore.Authorization.AuthorizationPolicyBuilder! authorizationPolicyBuilder, System.Collections.Generic.IEnumerable<string!>! allowedScopeValues, System.Collections.Generic.IEnumerable<string!>! allowedAppPermissionValues) -> Microsoft.AspNetCore.Authorization.AuthorizationPolicyBuilder!\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure AD B2C Authentication in ASP.NET Core\nDESCRIPTION: This code demonstrates how to set up Azure AD B2C authentication in an ASP.NET Core application. It configures the authentication scheme and options specific to B2C, such as the instance, domain, client ID, and sign-up/sign-in policy.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/netstandard2.0/PublicAPI.Unshipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddAuthentication(OpenIdConnectDefaults.AuthenticationScheme)\n    .AddMicrosoftIdentityWebApp(Configuration.GetSection(\"AzureAdB2C\"));\n```\n\n----------------------------------------\n\nTITLE: Web App Authentication Configuration in C#\nDESCRIPTION: Extension methods for configuring Microsoft Identity Web App authentication. Includes methods for setting up OpenID Connect and cookie authentication.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.MicrosoftIdentityWebAppAuthenticationBuilderExtensions.AddMicrosoftIdentityWebApp(this Microsoft.AspNetCore.Authentication.AuthenticationBuilder! builder, Microsoft.Extensions.Configuration.IConfiguration! configuration, string! configSectionName = \"AzureAd\", string! openIdConnectScheme = \"OpenIdConnect\", string? cookieScheme = \"Cookies\", bool subscribeToOpenIdConnectMiddlewareDiagnosticsEvents = false, string? displayName = null) -> Microsoft.Identity.Web.MicrosoftIdentityWebAppAuthenticationBuilderWithConfiguration!\n```\n\n----------------------------------------\n\nTITLE: Adding Session Per-User Token Cache to Service Collection (C#)\nDESCRIPTION: This extension method configures per-user session token caching by registering the necessary services on the IServiceCollection in ASP.NET Core, supporting secure, user-specific token storage with Microsoft.Identity.Web. To be called during app startup configuration. Dependencies: Microsoft.Identity.Web, Microsoft.Extensions.DependencyInjection. Returns the IServiceCollection ready for use.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net7.0/PublicAPI.Shipped.txt#2025-04-23_snippet_19\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Identity.Web.TokenCacheProviders.Session.SessionTokenCacheProviderExtension.AddSessionPerUserTokenCache(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!\n```\n\n----------------------------------------\n\nTITLE: Configuring Downstream Web API Authentication in C#\nDESCRIPTION: Extension methods for adding and configuring downstream Web API authentication. Includes methods for adding downstream APIs with configuration or options.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.DownstreamWebApiExtensions.AddDownstreamWebApi(this Microsoft.Identity.Web.MicrosoftIdentityAppCallsWebApiAuthenticationBuilder! builder, string! serviceName, Microsoft.Extensions.Configuration.IConfiguration! configuration) -> Microsoft.Identity.Web.MicrosoftIdentityAppCallsWebApiAuthenticationBuilder!\n\nstatic Microsoft.Identity.Web.DownstreamWebApiExtensions.AddDownstreamWebApi(this Microsoft.Identity.Web.MicrosoftIdentityAppCallsWebApiAuthenticationBuilder! builder, string! serviceName, System.Action<Microsoft.Identity.Web.DownstreamWebApiOptions!>! configureOptions) -> Microsoft.Identity.Web.MicrosoftIdentityAppCallsWebApiAuthenticationBuilder!\n```\n\n----------------------------------------\n\nTITLE: Configuring Protected Web API Authentication in Startup\nDESCRIPTION: Replaces the default Azure AD Bearer authentication with Microsoft Identity Web's protected web API configuration. This setup validates JWT bearer tokens and configures in-memory token caching.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/tests/DevApps/B2CWebAppCallsWebApi/README-incremental-instructions.md#2025-04-23_snippet_5\n\nLANGUAGE: CSharp\nCODE:\n```\nservices.AddProtectedWebApi(Configuration)\n     .AddInMemoryTokenCaches();\n```\n\n----------------------------------------\n\nTITLE: Adding Required Scope or App Permission Authorization Middleware to Service Collection (C#)\nDESCRIPTION: This extension registers both scope- and app-permission-based authorization into the IServiceCollection, enabling endpoints to allow access based on either requirement depending on the client's credentials. It is vital in scenarios where both user and application permissions may apply. It requires Microsoft.Identity.Web and Microsoft.Extensions.DependencyInjection. Returns the configured IServiceCollection.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net7.0/PublicAPI.Shipped.txt#2025-04-23_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Identity.Web.RequiredScopeOrAppPermissionExtensions.AddRequiredScopeOrAppPermissionAuthorization(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!\n```\n\n----------------------------------------\n\nTITLE: Adding Session-backed Token Cache for App - Microsoft.Identity.Web - C#\nDESCRIPTION: AddSessionAppTokenCache extends IServiceCollection to configure an in-memory session-based token cache for application tokens, suitable for multi-tenant or confidential client scenarios. Include this during Startup configuration to persist tokens across sessions using the session middleware. Dependencies: Microsoft.Identity.Web, Microsoft.Extensions.DependencyInjection, and session state middleware enabled.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net9.0/PublicAPI.Shipped.txt#2025-04-23_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Identity.Web.TokenCacheProviders.Session.SessionTokenCacheProviderExtension.AddSessionAppTokenCache(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!\n```\n\n----------------------------------------\n\nTITLE: Requiring Scope or App Permission on Endpoint Convention Builder (C# Generic Extension)\nDESCRIPTION: This generic extension adds both required scopes and application permissions to endpoint convention builders, facilitating granular access control directly at the endpoint definition level. It accepts scope and app permission strings as arrays. Dependencies are Microsoft.Identity.Web and ASP.NET Core routing. Returns typed builder instance ready for further configuration.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net7.0/PublicAPI.Shipped.txt#2025-04-23_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Identity.Web.RequiredScopeOrAppPermissionExtensions.RequireScopeOrAppPermission<TBuilder>(this TBuilder endpointConventionBuilder, string![]! scope, string![]! appPermission) -> TBuilder\n```\n\n----------------------------------------\n\nTITLE: Replacing AddDownstreamWebApi with AddDownstreamApi in service registration\nDESCRIPTION: Shows how to update the service registration code in startup.cs or program.cs by replacing AddDownstreamWebApi with AddDownstreamApi.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/docs/blog-posts/downstreamwebapi-to-downstreamapi.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n.AddDownstreamWebApi(\"serviceName\", Configuration.GetSection(\"SectionName\"))\n```\n\nLANGUAGE: csharp\nCODE:\n```\n.AddDownstreamApi(\"serviceName\", Configuration.GetSection(\"SectionName\"))\n```\n\n----------------------------------------\n\nTITLE: Requiring Scope or App Permission on Endpoints - Microsoft.Identity.Web - C#\nDESCRIPTION: RequireScopeOrAppPermission<TBuilder> is an extension that allows developers to enforce required scopes and/or app permissions on specific endpoints using endpoint conventions. Accepts arrays of scopes and app permissions, returning the convention builder for method chaining. Helps specify granular security requirements per endpoint. Requires Microsoft.Identity.Web.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net9.0/PublicAPI.Shipped.txt#2025-04-23_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Identity.Web.RequiredScopeOrAppPermissionExtensions.RequireScopeOrAppPermission<TBuilder>(this TBuilder endpointConventionBuilder, string![]! scope, string![]! appPermission) -> TBuilder\n```\n\n----------------------------------------\n\nTITLE: Adding Required Scope or App Permission Authorization to ASP.NET Core Services (C#)\nDESCRIPTION: Adds middleware and service configuration for support of authorization policies based on both OAuth scopes and application permissions. Called during dependency injection setup, this method returns the IServiceCollection, ready for further DI chaining. Best used in resource APIs requiring both delegated and app permission authorization with Microsoft.Identity.Web.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_18\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Identity.Web.RequiredScopeOrAppPermissionExtensions.AddRequiredScopeOrAppPermissionAuthorization(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!\n```\n\n----------------------------------------\n\nTITLE: Adding Required Scope Authorization to ASP.NET Core Services (C#)\nDESCRIPTION: This method adds middleware components and services necessary to enforce required scopes via dependency injection. Intended for startup configuration, it returns the modified IServiceCollection, allowing for further DI registration chaining. Must be called within the ASP.NET Core application's service configuration and assumes that downstream policies or endpoints will specify required scopes using other extension methods.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Identity.Web.RequiredScopeExtensions.AddRequiredScopeAuthorization(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!\n```\n\n----------------------------------------\n\nTITLE: Adding Downstream API to IServiceCollection in C#\nDESCRIPTION: Extension methods for IServiceCollection to add a downstream API. These methods allow configuring the API using either an IConfiguration object or an Action delegate.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.DownstreamApi/PublicAPI/net6.0/PublicAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.DownstreamApiExtensions.AddDownstreamApi(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, string! serviceName, Microsoft.Extensions.Configuration.IConfiguration! configuration) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.DownstreamApiExtensions.AddDownstreamApi(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, string! serviceName, System.Action<Microsoft.Identity.Abstractions.DownstreamApiOptions!>! configureOptions) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!\n```\n\n----------------------------------------\n\nTITLE: Initializing Microsoft.Identity.Web in ASP.NET Core\nDESCRIPTION: Shows how to register and configure Microsoft.Identity.Web services in an ASP.NET Core application. This example demonstrates the use of AddMicrosoftIdentityWebApp extension method to add authentication services.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net8.0/PublicAPI.Unshipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic void ConfigureServices(IServiceCollection services)\n{\n    services.AddMicrosoftIdentityWebApp(Configuration);\n\n    services.AddRazorPages();\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Required Scopes to Endpoint Convention Builders (C# Generic Extension)\nDESCRIPTION: This generic extension method decorates endpoint convention builders with required scopes, making it easy to declare necessary OAuth2 scopes for controllers or endpoint routes. Accepts scope strings as params, returns the same builder with constraints applied. Requires Microsoft.Identity.Web and is typically used within ASP.NET Core routing or endpoint definitions.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net7.0/PublicAPI.Shipped.txt#2025-04-23_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Identity.Web.RequiredScopeExtensions.RequireScope<TBuilder>(this TBuilder endpointConventionBuilder, params string![]! scope) -> TBuilder\n```\n\n----------------------------------------\n\nTITLE: Marking Endpoint with Required Scopes - Microsoft.Identity.Web - C#\nDESCRIPTION: The generic RequireScope<TBuilder> extension enables endpoints to be decorated with a required set of scopes. Accepts a params array of scope strings, and returns the same TBuilder for fluent configuration. Intended for use in endpoint routing or convention setup, this method helps in binding scope requirements directly to individual endpoints. Requires Microsoft.Identity.Web.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net9.0/PublicAPI.Shipped.txt#2025-04-23_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Identity.Web.RequiredScopeExtensions.RequireScope<TBuilder>(this TBuilder endpointConventionBuilder, params string![]! scope) -> TBuilder\n```\n\n----------------------------------------\n\nTITLE: Verifying User Scope from HttpContext in C#\nDESCRIPTION: This extension method checks if the user principal associated with the current HttpContext possesses at least one of the specified scopes (delegated permissions). It throws an exception if the verification fails.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net6.0/PublicAPI.Shipped.txt#2025-04-23_snippet_24\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Identity.Web.Resource.ScopesRequiredHttpContextExtensions.VerifyUserHasAnyAcceptedScope(this Microsoft.AspNetCore.Http.HttpContext! context, params string![]! acceptedScopes) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining IDownstreamWebApi interface method in C#\nDESCRIPTION: Defines a method CallWebApiForUserAsync in the IDownstreamWebApi interface for making authenticated web API calls on behalf of a user.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.IDownstreamWebApi.CallWebApiForUserAsync<TInput, TOutput>(string! serviceName, TInput input, System.Action<Microsoft.Identity.Web.DownstreamWebApiOptions!>? downstreamWebApiOptionsOverride = null, System.Security.Claims.ClaimsPrincipal? user = null) -> System.Threading.Tasks.Task<TOutput?>!\n```\n\n----------------------------------------\n\nTITLE: Adding Downstream API with Options Configuration in C#\nDESCRIPTION: Extends IServiceCollection to add a downstream API service using a configuration action. This method provides more flexibility in configuring the DownstreamApiOptions during setup.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.DownstreamApi/PublicAPI/net9.0/PublicAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.DownstreamApiExtensions.AddDownstreamApi(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, string! serviceName, System.Action<Microsoft.Identity.Abstractions.DownstreamApiOptions!>! configureOptions) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!\n```\n\n----------------------------------------\n\nTITLE: Requiring Scopes or App Permissions in ASP.NET Core with Microsoft.Identity.Web (C#)\nDESCRIPTION: This extension method enables simultaneous configuration of accepted OAuth scopes and app permissions on an AuthorizationPolicyBuilder, supporting resource APIs that accept both delegated and application permissions. It takes two IEnumerable<string> parameters: allowed scopes and allowed app permissions. Returns the modified AuthorizationPolicyBuilder for chained configuration. Requires integration with Microsoft.Identity.Web and is intended for resource API scenarios with both user and app authentication.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Identity.Web.PolicyBuilderExtensions.RequireScopeOrAppPermission(this Microsoft.AspNetCore.Authorization.AuthorizationPolicyBuilder! authorizationPolicyBuilder, System.Collections.Generic.IEnumerable<string!>! allowedScopeValues, System.Collections.Generic.IEnumerable<string!>! allowedAppPermissionValues) -> Microsoft.AspNetCore.Authorization.AuthorizationPolicyBuilder!\n```\n\n----------------------------------------\n\nTITLE: Requiring OAuth2 Scopes in ASP.NET Core Authorization Policies (C#)\nDESCRIPTION: These extension methods for AuthorizationPolicyBuilder require one or more scopes as part of an authorization policy in ASP.NET Core. They can accept allowed scope values either as a params string array or an IEnumerable<string>, enabling flexible usage. These methods require Microsoft.Identity.Web and Microsoft.AspNetCore.Authorization as dependencies, and are used to restrict endpoint access to callers presenting specific scopes in their JWT tokens. Inputs are the builder and the list of required scope strings; output is the same builder configured with the scope policy.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net7.0/PublicAPI.Shipped.txt#2025-04-23_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Identity.Web.PolicyBuilderExtensions.RequireScope(this Microsoft.AspNetCore.Authorization.AuthorizationPolicyBuilder! authorizationPolicyBuilder, params string![]! allowedValues) -> Microsoft.AspNetCore.Authorization.AuthorizationPolicyBuilder!\n```\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Identity.Web.PolicyBuilderExtensions.RequireScope(this Microsoft.AspNetCore.Authorization.AuthorizationPolicyBuilder! authorizationPolicyBuilder, System.Collections.Generic.IEnumerable<string!>! allowedValues) -> Microsoft.AspNetCore.Authorization.AuthorizationPolicyBuilder!\n```\n\n----------------------------------------\n\nTITLE: Adding Required Scope Authorization Middleware to Service Collection (C#)\nDESCRIPTION: This extension method for IServiceCollection enables required scope authorization middleware in an ASP.NET Core application. It registers services necessary for enforcing that API calls present the expected OAuth2 scopes. Dependency on Microsoft.Identity.Web and Microsoft.Extensions.DependencyInjection. The method accepts the service collection as input and returns it configured to support required scope checking.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net7.0/PublicAPI.Shipped.txt#2025-04-23_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Identity.Web.RequiredScopeExtensions.AddRequiredScopeAuthorization(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!\n```\n\n----------------------------------------\n\nTITLE: Adding Session-Based App Token Cache to Service Collection (C#)\nDESCRIPTION: This method extends IServiceCollection to add session-wide application token caching for authentication tokens in ASP.NET Core apps using Microsoft.Identity.Web. It should be configured at startup to allow secure storage of tokens using the session provider. Dependencies: Microsoft.Identity.Web, Microsoft.Extensions.DependencyInjection. Returns the updated IServiceCollection instance.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net7.0/PublicAPI.Shipped.txt#2025-04-23_snippet_18\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Identity.Web.TokenCacheProviders.Session.SessionTokenCacheProviderExtension.AddSessionAppTokenCache(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!\n```\n\n----------------------------------------\n\nTITLE: Validating App Roles in HttpContext - Microsoft.Identity.Web - C#\nDESCRIPTION: The ValidateAppRole extension for HttpContext checks whether the user's claims possess any of the accepted application roles. Takes a params array of accepted role strings and performs validation upon the current request context, throwing if validation fails. Useful for APIs requiring explicit app role checks inside middleware or controllers. Required namespace: Microsoft.Identity.Web.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net9.0/PublicAPI.Shipped.txt#2025-04-23_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Identity.Web.Resource.RolesRequiredHttpContextExtensions.ValidateAppRole(this Microsoft.AspNetCore.Http.HttpContext! context, params string![]! acceptedRoles) -> void\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Downstream API Support to Microsoft Identity Web\nDESCRIPTION: Extension method that extends an existing Microsoft Identity Web configuration with the ability to call multiple downstream APIs. It adds token acquisition, Microsoft Graph API, and in-memory token caching capabilities.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net6.0/PublicAPI.Unshipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic static MicrosoftIdentityWebAppAuthenticationBuilder AddMultipleDownstreamWebApiSupport(\n    this MicrosoftIdentityWebAppAuthenticationBuilder builder)\n{\n    builder.EnableTokenAcquisitionToCallDownstreamApi()\n        .AddMicrosoftGraph()\n        .AddInMemoryTokenCaches();\n\n    return builder;\n}\n```\n\n----------------------------------------\n\nTITLE: Generic Downstream Web API Operations in C#\nDESCRIPTION: Generic extension methods for making HTTP requests to downstream Web APIs. Includes methods for GET, POST, and PUT operations with user context.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.DownstreamWebApiGenericExtensions.GetForUserAsync<TOutput>(this Microsoft.Identity.Web.IDownstreamWebApi! downstreamWebApi, string! serviceName, string! relativePath, System.Action<Microsoft.Identity.Web.DownstreamWebApiOptions!>? downstreamWebApiOptionsOverride = null, System.Security.Claims.ClaimsPrincipal? user = null, string? authenticationScheme = null) -> System.Threading.Tasks.Task<TOutput?>!\n\nstatic Microsoft.Identity.Web.DownstreamWebApiGenericExtensions.PostForUserAsync<TOutput, TInput>(this Microsoft.Identity.Web.IDownstreamWebApi! downstreamWebApi, string! serviceName, string! relativePath, TInput inputData, System.Action<Microsoft.Identity.Web.DownstreamWebApiOptions!>? downstreamWebApiOptionsOverride = null, System.Security.Claims.ClaimsPrincipal? user = null, string? authenticationScheme = null) -> System.Threading.Tasks.Task<TOutput?>!\n```\n\n----------------------------------------\n\nTITLE: Registering Microsoft Identity Web with Downstream API Options\nDESCRIPTION: Extension method that registers Microsoft Identity Web services in an ASP.NET Core application with support for calling downstream APIs. It configures token acquisition and token validation with provided options.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net6.0/PublicAPI.Unshipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic static MicrosoftIdentityWebAppAuthenticationBuilder AddMicrosoftIdentityWebAppWithConfiguration(\n    this IServiceCollection services,\n    IConfiguration configuration,\n    string configSectionName = \"AzureAd\",\n    string? openIdConfigurationEndpoint = null)\n{\n    MicrosoftIdentityWebAppAuthenticationBuilder microsoftIdentityWebAppAuthenticationBuilder =\n        services.AddAuthentication(OpenIdConnectDefaults.AuthenticationScheme)\n        .AddMicrosoftIdentityWebApp(\n            options =>\n            {\n                if (configuration != null)\n                {\n                    configuration.GetSection(configSectionName).Bind(options);\n                }\n\n                if (!string.IsNullOrEmpty(openIdConfigurationEndpoint))\n                {\n                    options.MetadataAddress = openIdConfigurationEndpoint;\n                }\n            });\n\n    return microsoftIdentityWebAppAuthenticationBuilder;\n}\n```\n\n----------------------------------------\n\nTITLE: Requiring Specific Scopes on Endpoint Convention Builder in ASP.NET Core (C#)\nDESCRIPTION: This generic extension allows EndpointConventionBuilder instances (e.g., for minimal APIs) to require specified OAuth scopes directly at endpoint configuration time. Accepts a params array of non-null strings for required scopes and returns the generic TBuilder for fluent configuration. Useful for endpoint-based routing where authorization requirements must be set per-route.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Identity.Web.RequiredScopeExtensions.RequireScope<TBuilder>(this TBuilder endpointConventionBuilder, params string![]! scope) -> TBuilder\n```\n\n----------------------------------------\n\nTITLE: Validating User App Roles via HttpContext (C#)\nDESCRIPTION: This method, as an extension on HttpContext, validates whether the calling user possesses any of a set of accepted roles (appRoles). Designed to enforce role-based access control, it throws an error or blocks access if the user's claims do not meet requirements. It depends on Microsoft.Identity.Web and ASP.NET Core HttpContext. Accepted roles are passed as a params array; no value is returned.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net7.0/PublicAPI.Shipped.txt#2025-04-23_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Identity.Web.Resource.RolesRequiredHttpContextExtensions.ValidateAppRole(this Microsoft.AspNetCore.Http.HttpContext! context, params string![]! acceptedRoles) -> void\n```\n\n----------------------------------------\n\nTITLE: Enabling Authentication Middleware in Web API\nDESCRIPTION: This snippet shows how to enable the authentication middleware in the Web API's Startup.cs Configure method. It must be added before the MVC middleware to ensure requests are authenticated before reaching the controllers.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/tests/DevApps/WebAppCallsWebApiCallsGraph/README-incremental-instructions.md#2025-04-23_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\napp.UseAuthentication();\napp.UseMvc();\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure AD Authentication Options in C# using Microsoft Identity Web\nDESCRIPTION: This code configures Azure AD authentication options for an ASP.NET Core application. It sets up client credentials, token validation parameters, and claim mapping. The configuration includes options for authority, audience, issuer validation, and custom claim actions.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net462/InternalAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n#nullable enable\n\nusing Microsoft.AspNetCore.Authentication;\nusing Microsoft.AspNetCore.Authentication.JwtBearer;\nusing Microsoft.Extensions.Options;\nusing Microsoft.Identity.Web;\nusing Microsoft.IdentityModel.Tokens;\n\nnamespace Microsoft.Identity.Web;\n\ninternal class ConfigureJwtBearerOptions : IConfigureNamedOptions<JwtBearerOptions>\n{\n    private readonly MicrosoftIdentityOptions _microsoftIdentityOptions;\n\n    public ConfigureJwtBearerOptions(IOptions<MicrosoftIdentityOptions> microsoftIdentityOptions)\n    {\n        _microsoftIdentityOptions = microsoftIdentityOptions.Value;\n    }\n\n    public void Configure(string? name, JwtBearerOptions options)\n    {\n        if (name != JwtBearerDefaults.AuthenticationScheme)\n        {\n            return;\n        }\n\n        Configure(options);\n    }\n\n    public void Configure(JwtBearerOptions options)\n    {\n        if (string.IsNullOrEmpty(_microsoftIdentityOptions.ClientId))\n        {\n            throw new InvalidOperationException(IDWebErrorMessage.ClientIdIsMissing);\n        }\n\n        options.Authority = options.Authority ?? _microsoftIdentityOptions.Authority;\n        options.Audience = options.Audience ?? _microsoftIdentityOptions.ClientId;\n\n        // This is an Microsoft identity platform Web API\n        options.TokenValidationParameters.ValidateIssuer = options.TokenValidationParameters.ValidateIssuer && _microsoftIdentityOptions.ValidateIssuer;\n        options.TokenValidationParameters.IssuerValidator = AadIssuerValidator.GetAadIssuerValidator(options.Authority);\n\n        // B2C doesn't use UseProofOfKeyExchange\n        if (!_microsoftIdentityOptions.IsB2C)\n        {\n            // In the case of a sovereignCloud, the instance is no longer a \"well known\" authority\n            if (string.IsNullOrEmpty(new Uri(options.Authority).AbsolutePath.Trim('/')))\n            {\n                // For a multi-tenant scenarios\n                options.TokenValidationParameters.ConfigurationManager = new ConfigurationManager<OpenIdConnectConfiguration>(\n                    $\"{options.Authority}.well-known/openid-configuration\",\n                    new OpenIdConnectConfigurationRetriever(),\n                    new HttpDocumentRetriever())\n                {\n                    AutomaticRefreshInterval = options.TokenValidationParameters.AutomaticRefreshInterval,\n                    RefreshInterval = options.TokenValidationParameters.RefreshInterval,\n                };\n            }\n        }\n\n        // If the developer registered an IssuerValidator, don't overwrite it\n        if (options.TokenValidationParameters.ValidateIssuer && options.TokenValidationParameters.IssuerValidator == null)\n        {\n            // If you want to accept multiple issuers, use the AadIssuerValidator\n            options.TokenValidationParameters.IssuerValidator = AadIssuerValidator.IssuerValidator;\n        }\n\n        // Avoids having to type \"Bearer\" in Postman\n        options.Events = options.Events ?? new JwtBearerEvents();\n        options.Events.OnMessageReceived = options.Events.OnMessageReceived ?? (async context =>\n        {\n            // Potential code to handle x5c claim\n            if (context.Request.Query.TryGetValue(\"token\", out var token))\n            {\n                context.Token = token;\n            }\n            await Task.CompletedTask.ConfigureAwait(false);\n        });\n\n        options.Events.OnTokenValidated = options.Events.OnTokenValidated ?? (async context =>\n        {\n            await Task.CompletedTask.ConfigureAwait(false);\n        });\n\n        // .NET Core 3.1 does not have AddTokenDecryptionKey in TokenValidationParameters\n#if NET6_0_OR_GREATER\n        // Handling of encrypted tokens\n        if (_microsoftIdentityOptions.TokenDecryptionCertificates != null)\n        {\n            foreach (var certificate in _microsoftIdentityOptions.TokenDecryptionCertificates)\n            {\n                options.TokenValidationParameters.TokenDecryptionKey = new X509SecurityKey(certificate);\n            }\n        }\n#endif\n\n        if (!_microsoftIdentityOptions.AllowWebApiToBeAuthorizedByACL)\n        {\n            options.Events.OnTokenValidated = options.Events.OnTokenValidated ?? (async context =>\n            {\n                if (context.Principal?.Claims != null)\n                {\n                    context.Principal = ClaimsPrincipalExtension.Merge(context.Principal, context.Principal.GetTenantId(),\n                        _microsoftIdentityOptions.SuggestedCacheDuration, AadClaimTypes);\n                }\n                await Task.CompletedTask.ConfigureAwait(false);\n            });\n        }\n\n        // Handling of ESTS issued tokens, which are base64 URL encoded, but not padded (like JWTs)\n        if (_microsoftIdentityOptions.AllowStandardEstsIssuedTokens)\n        {\n            options.TokenValidationParameters.Base64UrlEncodedUniqueId = true;\n        }\n\n        // Add claim mappings to map Azure AD resource_access, roles, scp, wids claims to Microsoft Identity Web claims\n        options.MapInboundClaims = false;\n        options.TokenValidationParameters.RoleClaimType = \"roles\";\n        options.ClaimActions.MapAllExcept(\"aud\", \"iss\", \"iat\", \"nbf\", \"exp\", \"aio\", \"c_hash\", \"uti\", \"nonce\");\n        options.ClaimActions.MapJsonKey(ClaimConstants.Scope, ClaimConstants.Scp);\n        options.ClaimActions.MapJsonKey(ClaimConstants.Scp, ClaimConstants.Scp);\n        options.ClaimActions.MapJsonKey(ClaimConstants.Roles, ClaimConstants.Roles);\n        options.ClaimActions.MapJsonKey(ClaimConstants.Role, ClaimConstants.Roles);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ILoginErrorAccessor Interface in C#\nDESCRIPTION: Specifies an interface for accessing and setting login error messages. It includes methods to get and set error messages associated with an HTTP context, and a property to check if the accessor is enabled.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net6.0/PublicAPI.Shipped.txt#2025-04-23_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.ILoginErrorAccessor.GetMessage(Microsoft.AspNetCore.Http.HttpContext! context) -> string?\nMicrosoft.Identity.Web.ILoginErrorAccessor.IsEnabled.get -> bool\nMicrosoft.Identity.Web.ILoginErrorAccessor.SetMessage(Microsoft.AspNetCore.Http.HttpContext! context, string? message) -> void\n```\n\n----------------------------------------\n\nTITLE: Validating Required App Roles in HttpContext (C#)\nDESCRIPTION: This extension method for HttpContext validates that the currently authenticated principal possesses any of the specified accepted roles. It accepts a params array of non-null strings representing accepted security roles and throws if none match. Key in resource APIs that need granular RBAC using Azure AD app roles.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_20\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Identity.Web.Resource.RolesRequiredHttpContextExtensions.ValidateAppRole(this Microsoft.AspNetCore.Http.HttpContext! context, params string![]! acceptedRoles) -> void\n```\n\n----------------------------------------\n\nTITLE: Microsoft Identity Web API Authentication Configuration\nDESCRIPTION: Extension methods for configuring Microsoft Identity Web API authentication with JWT bearer tokens and Azure AD integration.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net6.0/PublicAPI.Shipped.txt#2025-04-23_snippet_15\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.MicrosoftIdentityWebApiAuthenticationBuilderExtensions.AddMicrosoftIdentityWebApi(this Microsoft.AspNetCore.Authentication.AuthenticationBuilder! builder, Microsoft.Extensions.Configuration.IConfiguration! configuration, string! configSectionName = \"AzureAd\", string! jwtBearerScheme = \"Bearer\", bool subscribeToJwtBearerMiddlewareDiagnosticsEvents = false) -> Microsoft.Identity.Web.MicrosoftIdentityWebApiAuthenticationBuilderWithConfiguration!\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication Services in Client Web App\nDESCRIPTION: This snippet shows how to set up authentication services in the client web app's Startup.cs file. It configures MSAL for authentication and adds an in-memory token cache for the web app to call a protected web API.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/tests/DevApps/WebAppCallsWebApiCallsGraph/README-incremental-instructions.md#2025-04-23_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nservices.AddSignIn(Configuration)\n        .AddWebAppCallsProtectedWebApi(new string[] { Configuration[\"TodoList:TodoListScope\"] })\n        .AddInMemoryTokenCaches();\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Downstream APIs from Configuration Section in C#\nDESCRIPTION: Adds multiple downstream API services to the IServiceCollection using a configuration section. This method allows for configuring multiple downstream APIs at once through an IConfigurationSection instance.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.DownstreamApi/PublicAPI/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.DownstreamApiExtensions.AddDownstreamApis(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, Microsoft.Extensions.Configuration.IConfigurationSection! configurationSection) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!\n```\n\n----------------------------------------\n\nTITLE: HTTP Method-Specific API Calls in C#\nDESCRIPTION: Methods for making HTTP GET, POST, PUT, and DELETE requests to downstream APIs, with separate methods for application and user contexts.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.DownstreamApi/PublicAPI/net472/InternalAPI.Shipped.txt#2025-04-23_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.DownstreamApi.GetForAppAsync<TInput, TOutput>(string? serviceName, TInput input, System.Action<Microsoft.Identity.Abstractions.DownstreamApiOptionsReadOnlyHttpMethod!>? downstreamApiOptionsOverride = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TOutput?>!\n\nMicrosoft.Identity.Web.DownstreamApi.PostForUserAsync<TInput, TOutput>(string? serviceName, TInput input, System.Action<Microsoft.Identity.Abstractions.DownstreamApiOptionsReadOnlyHttpMethod!>? downstreamApiOptionsOverride = null, System.Security.Claims.ClaimsPrincipal? user = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TOutput?>!\n\nMicrosoft.Identity.Web.DownstreamApi.PutForAppAsync<TInput, TOutput>(string? serviceName, TInput input, System.Action<Microsoft.Identity.Abstractions.DownstreamApiOptionsReadOnlyHttpMethod!>? downstreamApiOptionsOverride = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TOutput?>!\n\nMicrosoft.Identity.Web.DownstreamApi.DeleteForUserAsync<TInput>(string? serviceName, TInput input, System.Action<Microsoft.Identity.Abstractions.DownstreamApiOptionsReadOnlyHttpMethod!>? downstreamApiOptionsOverride = null, System.Security.Claims.ClaimsPrincipal? user = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!\n```\n\n----------------------------------------\n\nTITLE: Calling API Asynchronously in C#\nDESCRIPTION: Methods for calling downstream APIs asynchronously with various overloads for different scenarios, including user and application contexts.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.DownstreamApi/PublicAPI/net472/InternalAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.DownstreamApi.CallApiAsync(Microsoft.Identity.Abstractions.DownstreamApiOptions! downstreamApiOptions, System.Security.Claims.ClaimsPrincipal? user = null, System.Net.Http.HttpContent? content = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage!>!\n\nMicrosoft.Identity.Web.DownstreamApi.CallApiAsync(string? serviceName, System.Action<Microsoft.Identity.Abstractions.DownstreamApiOptions!>? downstreamApiOptionsOverride = null, System.Security.Claims.ClaimsPrincipal? user = null, System.Net.Http.HttpContent? content = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage!>!\n```\n\n----------------------------------------\n\nTITLE: Configuring Downstream Web API Authentication Extensions\nDESCRIPTION: Extension methods for adding and configuring downstream web API authentication using Microsoft Identity Web. Includes methods for adding web API authentication with configuration or option delegates.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net9.0/PublicAPI.Shipped.txt#2025-04-23_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.DownstreamWebApiExtensions.AddDownstreamWebApi(this Microsoft.Identity.Web.MicrosoftIdentityAppCallsWebApiAuthenticationBuilder! builder, string! serviceName, Microsoft.Extensions.Configuration.IConfiguration! configuration) -> Microsoft.Identity.Web.MicrosoftIdentityAppCallsWebApiAuthenticationBuilder!\n\nstatic Microsoft.Identity.Web.DownstreamWebApiExtensions.AddDownstreamWebApi(this Microsoft.Identity.Web.MicrosoftIdentityAppCallsWebApiAuthenticationBuilder! builder, string! serviceName, System.Action<Microsoft.Identity.Web.DownstreamWebApiOptions!>! configureOptions) -> Microsoft.Identity.Web.MicrosoftIdentityAppCallsWebApiAuthenticationBuilder!\n```\n\n----------------------------------------\n\nTITLE: Microsoft Graph Extension Methods\nDESCRIPTION: Extension methods for MicrosoftIdentityAppCallsWebApiAuthenticationBuilder to configure Microsoft Graph authentication and client factories. Includes methods for both user-delegated and app-only scenarios.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.GraphServiceClient/PublicAPI/net6.0/PublicAPI.Shipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.MicrosoftGraphExtensions.AddMicrosoftGraph(this Microsoft.Identity.Web.MicrosoftIdentityAppCallsWebApiAuthenticationBuilder! builder, Microsoft.Extensions.Configuration.IConfigurationSection! configurationSection) -> Microsoft.Identity.Web.MicrosoftIdentityAppCallsWebApiAuthenticationBuilder!\nstatic Microsoft.Identity.Web.MicrosoftGraphExtensions.AddMicrosoftGraph(this Microsoft.Identity.Web.MicrosoftIdentityAppCallsWebApiAuthenticationBuilder! builder, string! graphBaseUrl = \"https://graph.microsoft.com/v1.0\", System.Collections.Generic.IEnumerable<string!>? defaultScopes = null) -> Microsoft.Identity.Web.MicrosoftIdentityAppCallsWebApiAuthenticationBuilder!\nstatic Microsoft.Identity.Web.MicrosoftGraphExtensions.AddMicrosoftGraphAppOnly(this Microsoft.Identity.Web.MicrosoftIdentityAppCallsWebApiAuthenticationBuilder! builder, System.Func<Microsoft.Kiota.Abstractions.Authentication.IAuthenticationProvider!, Microsoft.Graph.GraphServiceClient!>! graphServiceClientFactory) -> Microsoft.Identity.Web.MicrosoftIdentityAppCallsWebApiAuthenticationBuilder!\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure AD Authentication Services in ASP.NET Core\nDESCRIPTION: This snippet adds Microsoft Identity authentication services to the application's service collection. It configures the services to use Azure AD with options loaded from configuration.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.Diagnostics/PublicAPI/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nbuilder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)\n    .AddMicrosoftIdentityWebApi(builder.Configuration.GetSection(\"AzureAd\"));\n```\n\n----------------------------------------\n\nTITLE: Implementing RequiredScopeAttribute Class in C#\nDESCRIPTION: This class represents an attribute for required scopes. It includes properties for accepted scopes, reusability, and configuration keys.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net9.0/PublicAPI.Shipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.Resource.RequiredScopeAttribute\nMicrosoft.Identity.Web.Resource.RequiredScopeAttribute.AcceptedScope.get -> string![]?\nMicrosoft.Identity.Web.Resource.RequiredScopeAttribute.AcceptedScope.set -> void\nMicrosoft.Identity.Web.Resource.RequiredScopeAttribute.IsReusable.get -> bool\nMicrosoft.Identity.Web.Resource.RequiredScopeAttribute.IsReusable.set -> void\nMicrosoft.Identity.Web.Resource.RequiredScopeAttribute.RequiredScopeAttribute() -> void\nMicrosoft.Identity.Web.Resource.RequiredScopeAttribute.RequiredScopeAttribute(params string![]! acceptedScopes) -> void\nMicrosoft.Identity.Web.Resource.RequiredScopeAttribute.RequiredScopesConfigurationKey.get -> string?\nMicrosoft.Identity.Web.Resource.RequiredScopeAttribute.RequiredScopesConfigurationKey.set -> void\n```\n\n----------------------------------------\n\nTITLE: Defining ITokenAcquisition Interface Methods in C#\nDESCRIPTION: Defines the `ITokenAcquisition` interface, which provides methods for acquiring access tokens and authentication results for both applications (client credentials flow) and users (on-behalf-of flow). Methods accept parameters like scopes, authentication scheme, tenant ID, user principal, and token acquisition options. It also includes a method to determine the effective authentication scheme.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.TokenAcquisition/PublicAPI/net462/PublicAPI.Shipped.txt#2025-04-23_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Identity.Web.ITokenAcquisition\nMicrosoft.Identity.Web.ITokenAcquisition.GetAccessTokenForAppAsync(string! scope, string? authenticationScheme, string? tenant = null, Microsoft.Identity.Web.TokenAcquisitionOptions? tokenAcquisitionOptions = null) -> System.Threading.Tasks.Task<string!>!\nMicrosoft.Identity.Web.ITokenAcquisition.GetAccessTokenForUserAsync(System.Collections.Generic.IEnumerable<string!>! scopes, string? authenticationScheme, string? tenantId = null, string? userFlow = null, System.Security.Claims.ClaimsPrincipal? user = null, Microsoft.Identity.Web.TokenAcquisitionOptions? tokenAcquisitionOptions = null) -> System.Threading.Tasks.Task<string!>!\nMicrosoft.Identity.Web.ITokenAcquisition.GetAuthenticationResultForAppAsync(string! scope, string? authenticationScheme, string? tenant = null, Microsoft.Identity.Web.TokenAcquisitionOptions? tokenAcquisitionOptions = null) -> System.Threading.Tasks.Task<Microsoft.Identity.Client.AuthenticationResult!>!\nMicrosoft.Identity.Web.ITokenAcquisition.GetAuthenticationResultForUserAsync(System.Collections.Generic.IEnumerable<string!>! scopes, string? authenticationScheme, string? tenantId = null, string? userFlow = null, System.Security.Claims.ClaimsPrincipal? user = null, Microsoft.Identity.Web.TokenAcquisitionOptions? tokenAcquisitionOptions = null) -> System.Threading.Tasks.Task<Microsoft.Identity.Client.AuthenticationResult!>!\nMicrosoft.Identity.Web.ITokenAcquisition.GetEffectiveAuthenticationScheme(string? authenticationScheme) -> string!\n```\n\n----------------------------------------\n\nTITLE: Requiring Scopes in ASP.NET Core with Microsoft.Identity.Web (C#)\nDESCRIPTION: These extension methods allow attaching required OAuth scopes to an AuthorizationPolicyBuilder, enforcing scope-based authorization within ASP.NET Core controllers or endpoints. They accept allowed values either as a params array or an IEnumerable of strings. Dependencies include Microsoft.Identity.Web and ASP.NET Core authorization infrastructure. Returns the original AuthorizationPolicyBuilder, enabling fluent configuration. All inputs must be non-null string values representing valid scope names.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Identity.Web.PolicyBuilderExtensions.RequireScope(this Microsoft.AspNetCore.Authorization.AuthorizationPolicyBuilder! authorizationPolicyBuilder, params string![]! allowedValues) -> Microsoft.AspNetCore.Authorization.AuthorizationPolicyBuilder!\n```\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Identity.Web.PolicyBuilderExtensions.RequireScope(this Microsoft.AspNetCore.Authorization.AuthorizationPolicyBuilder! authorizationPolicyBuilder, System.Collections.Generic.IEnumerable<string!>! allowedValues) -> Microsoft.AspNetCore.Authorization.AuthorizationPolicyBuilder!\n```\n\n----------------------------------------\n\nTITLE: Defining Microsoft Identity Options and Configuration - Microsoft Identity Web - C#\nDESCRIPTION: Outlines the structure and properties of the MicrosoftIdentityOptions class, which encapsulates configurable settings for authentication scenarios. The class exposes various get/set properties controlling allowed behaviors (like web API ACL authorization), credential sources, domain, error paths, extra query parameters, instance URLs, and other advanced options for custom flows. Instantiated with default constructor, some properties expect complex types like CredentialDescription or CertificatelessOptions. Primarily consumed via dependency injection and configuration binding.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.TokenAcquisition/PublicAPI/net472/PublicAPI.Shipped.txt#2025-04-23_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Identity.Web.MicrosoftIdentityOptions\nMicrosoft.Identity.Web.MicrosoftIdentityOptions.AllowWebApiToBeAuthorizedByACL.get -> bool\nMicrosoft.Identity.Web.MicrosoftIdentityOptions.AllowWebApiToBeAuthorizedByACL.set -> void\nMicrosoft.Identity.Web.MicrosoftIdentityOptions.ClientCertificates.get -> System.Collections.Generic.IEnumerable<Microsoft.Identity.Web.CertificateDescription!>?\nMicrosoft.Identity.Web.MicrosoftIdentityOptions.ClientCertificates.set -> void\nMicrosoft.Identity.Web.MicrosoftIdentityOptions.ClientCredentials.get -> System.Collections.Generic.IEnumerable<Microsoft.Identity.Abstractions.CredentialDescription!>?\nMicrosoft.Identity.Web.MicrosoftIdentityOptions.ClientCredentials.set -> void\nMicrosoft.Identity.Web.MicrosoftIdentityOptions.ClientCredentialsUsingManagedIdentity.get -> Microsoft.Identity.Web.CertificatelessOptions?\nMicrosoft.Identity.Web.MicrosoftIdentityOptions.ClientCredentialsUsingManagedIdentity.set -> void\nMicrosoft.Identity.Web.MicrosoftIdentityOptions.DefaultUserFlow.get -> string?\nMicrosoft.Identity.Web.MicrosoftIdentityOptions.Domain.get -> string?\nMicrosoft.Identity.Web.MicrosoftIdentityOptions.Domain.set -> void\nMicrosoft.Identity.Web.MicrosoftIdentityOptions.EditProfilePolicyId.get -> string?\nMicrosoft.Identity.Web.MicrosoftIdentityOptions.EditProfilePolicyId.set -> void\nMicrosoft.Identity.Web.MicrosoftIdentityOptions.ErrorPath.get -> string?\nMicrosoft.Identity.Web.MicrosoftIdentityOptions.ErrorPath.set -> void\nMicrosoft.Identity.Web.MicrosoftIdentityOptions.ExtraQueryParameters.get -> System.Collections.Generic.IDictionary<string!, string!>?\nMicrosoft.Identity.Web.MicrosoftIdentityOptions.ExtraQueryParameters.set -> void\nMicrosoft.Identity.Web.MicrosoftIdentityOptions.Instance.get -> string!\nMicrosoft.Identity.Web.MicrosoftIdentityOptions.Instance.set -> void\nMicrosoft.Identity.Web.MicrosoftIdentityOptions.LegacyCacheCompatibilityEnabled.get -> bool\nMicrosoft.Identity.Web.MicrosoftIdentityOptions.LegacyCacheCompatibilityEnabled.set -> void\nMicrosoft.Identity.Web.MicrosoftIdentityOptions.MicrosoftIdentityOptions() -> void\nMicrosoft.Identity.Web.MicrosoftIdentityOptions.ResetPasswordPath.get -> string?\nMicrosoft.Identity.Web.MicrosoftIdentityOptions.ResetPasswordPath.set -> void\nMicrosoft.Identity.Web.MicrosoftIdentityOptions.ResetPasswordPolicyId.get -> string?\nMicrosoft.Identity.Web.MicrosoftIdentityOptions.ResetPasswordPolicyId.set -> void\n\n```\n\n----------------------------------------\n\nTITLE: Verifying Accepted Scopes in HttpContext (C#)\nDESCRIPTION: This method checks that the authenticated user context contains at least one of the accepted OAuth scopes. It takes a params array of required scope strings and throws an exception if none are found on the user principal. Useful for API resources validating delegated permissions per-request.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_21\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Identity.Web.Resource.ScopesRequiredHttpContextExtensions.VerifyUserHasAnyAcceptedScope(this Microsoft.AspNetCore.Http.HttpContext! context, params string![]! acceptedScopes) -> void\n```\n\n----------------------------------------\n\nTITLE: Verifying Accepted Scopes in HttpContext for Resource Access (C#)\nDESCRIPTION: This extension for HttpContext ensures that the requestor possesses at least one of the specified accepted scopes in their access token before proceeding. Designed to be used in protected APIs, it throws or halts execution if the necessary scope is not present. Inputs are the context and a params array of scopes; no return value. Dependencies: Microsoft.Identity.Web, ASP.NET Core.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net7.0/PublicAPI.Shipped.txt#2025-04-23_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Identity.Web.Resource.ScopesRequiredHttpContextExtensions.VerifyUserHasAnyAcceptedScope(this Microsoft.AspNetCore.Http.HttpContext! context, params string![]! acceptedScopes) -> void\n```\n\n----------------------------------------\n\nTITLE: Configuring Downstream Web API Authentication\nDESCRIPTION: Extension methods for adding and configuring downstream web API authentication in Microsoft Identity Web applications. Includes methods for adding API configurations and handling HTTP client authentication.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net6.0/PublicAPI.Shipped.txt#2025-04-23_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.DownstreamWebApiExtensions.AddDownstreamWebApi(this Microsoft.Identity.Web.MicrosoftIdentityAppCallsWebApiAuthenticationBuilder! builder, string! serviceName, Microsoft.Extensions.Configuration.IConfiguration! configuration) -> Microsoft.Identity.Web.MicrosoftIdentityAppCallsWebApiAuthenticationBuilder!\n\nstatic Microsoft.Identity.Web.DownstreamWebApiExtensions.AddDownstreamWebApi(this Microsoft.Identity.Web.MicrosoftIdentityAppCallsWebApiAuthenticationBuilder! builder, string! serviceName, System.Action<Microsoft.Identity.Web.DownstreamWebApiOptions!>! configureOptions) -> Microsoft.Identity.Web.MicrosoftIdentityAppCallsWebApiAuthenticationBuilder!\n```\n\n----------------------------------------\n\nTITLE: Adding Downstream API to MicrosoftIdentityAppCallsWebApiAuthenticationBuilder with Configuration in C#\nDESCRIPTION: Adds a downstream API service to the MicrosoftIdentityAppCallsWebApiAuthenticationBuilder using a configuration object. This method is specific to the authentication builder and allows for configuring the downstream API options through an IConfiguration instance.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.DownstreamApi/PublicAPI/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.DownstreamApiExtensions.AddDownstreamApi(this Microsoft.Identity.Web.MicrosoftIdentityAppCallsWebApiAuthenticationBuilder! builder, string! serviceName, Microsoft.Extensions.Configuration.IConfiguration! configuration) -> Microsoft.Identity.Web.MicrosoftIdentityAppCallsWebApiAuthenticationBuilder!\n```\n\n----------------------------------------\n\nTITLE: Defining IDownstreamWebApi Interface in C#\nDESCRIPTION: Defines an interface for calling downstream web APIs on behalf of a user. It includes a method for making authenticated calls with optional overrides for downstream API options and user claims.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net6.0/PublicAPI.Shipped.txt#2025-04-23_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.IDownstreamWebApi.CallWebApiForUserAsync<TInput, TOutput>(string! serviceName, TInput input, System.Action<Microsoft.Identity.Web.DownstreamWebApiOptions!>? downstreamWebApiOptionsOverride = null, System.Security.Claims.ClaimsPrincipal? user = null) -> System.Threading.Tasks.Task<TOutput?>!\n```\n\n----------------------------------------\n\nTITLE: Authentication Builder Extensions\nDESCRIPTION: Extension methods for configuring web API and web app authentication\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net6.0/InternalAPI.Shipped.txt#2025-04-23_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.MicrosoftIdentityWebApiAuthenticationBuilder.CallsWebApiImplementation(Microsoft.Extensions.DependencyInjection.IServiceCollection! services, string! jwtBearerAuthenticationScheme, System.Action<Microsoft.Identity.Client.ConfidentialClientApplicationOptions!>! configureConfidentialClientApplicationOptions, Microsoft.Extensions.Configuration.IConfigurationSection? configurationSection = null) -> void\nstatic Microsoft.Identity.Web.MicrosoftIdentityWebAppAuthenticationBuilder.WebAppCallsWebApiImplementation(Microsoft.Extensions.DependencyInjection.IServiceCollection! services, System.Collections.Generic.IEnumerable<string!>? initialScopes, System.Action<Microsoft.Identity.Web.MicrosoftIdentityOptions!>? configureMicrosoftIdentityOptions, string! openIdConnectScheme, System.Action<Microsoft.Identity.Client.ConfidentialClientApplicationOptions!>? configureConfidentialClientApplicationOptions) -> void\n```\n\n----------------------------------------\n\nTITLE: Adding Microsoft Graph Support (Client Factory/Scopes) in C#\nDESCRIPTION: An extension method for `MicrosoftIdentityAppCallsWebApiAuthenticationBuilder` that adds Microsoft Graph support using a custom factory function to create the `GraphServiceClient` and specifying initial scopes. This allows for advanced customization of the Graph client.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.MicrosoftGraph/PublicAPI/net6.0/PublicAPI.Shipped.txt#2025-04-23_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Identity.Web.MicrosoftGraphExtensions.AddMicrosoftGraph(this Microsoft.Identity.Web.MicrosoftIdentityAppCallsWebApiAuthenticationBuilder! builder, System.Func<Microsoft.Graph.IAuthenticationProvider!, Microsoft.Graph.GraphServiceClient!>! graphServiceClientFactory, System.Collections.Generic.IEnumerable<string!>! initialScopes) -> Microsoft.Identity.Web.MicrosoftIdentityAppCallsWebApiAuthenticationBuilder!\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication in Web API Startup\nDESCRIPTION: This snippet configures the Web API to validate bearer access tokens received from the client. It sets up the Protected Web API middleware with an in-memory token cache for validating tokens from the Microsoft identity platform.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/tests/DevApps/WebAppCallsWebApiCallsGraph/README-incremental-instructions.md#2025-04-23_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nservices.AddProtectedWebApi(Configuration)\n     .AddInMemoryTokenCaches();\n```\n\n----------------------------------------\n\nTITLE: Installing Microsoft.Identity.Web.GraphServiceClient NuGet Package\nDESCRIPTION: Command to add the Microsoft.Identity.Web.GraphServiceClient package to a .NET project using the dotnet CLI.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.GraphServiceClient/Readme.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Microsoft.Identity.Web.GraphServiceClient\n```\n\n----------------------------------------\n\nTITLE: Configuring Microsoft Identity Web Services in Client App\nDESCRIPTION: Adds Microsoft Identity Web services to the client application for signing in and calling protected web APIs. This configuration includes setting up MSAL.NET with an in-memory token cache.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/tests/DevApps/B2CWebAppCallsWebApi/README-incremental-instructions.md#2025-04-23_snippet_4\n\nLANGUAGE: CSharp\nCODE:\n```\nservices.AddSignIn(Configuration)\n        .AddWebAppCallsProtectedWebApi(new string[] { Configuration[\"TodoList:TodoListScope\"] })\n        .AddInMemoryTokenCaches();\n```\n\n----------------------------------------\n\nTITLE: Validating App Role from HttpContext in C#\nDESCRIPTION: This extension method checks if the user principal associated with the current HttpContext possesses at least one of the specified application roles. It throws an exception if the validation fails.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net6.0/PublicAPI.Shipped.txt#2025-04-23_snippet_23\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Identity.Web.Resource.RolesRequiredHttpContextExtensions.ValidateAppRole(this Microsoft.AspNetCore.Http.HttpContext! context, params string![]! acceptedRoles) -> void\n```\n\n----------------------------------------\n\nTITLE: Requiring Scope or App Permission on AuthorizationPolicyBuilder in C#\nDESCRIPTION: This extension method adds a requirement to an ASP.NET Core AuthorizationPolicyBuilder that the authenticated identity must possess either one of the specified scopes (delegated permissions) OR one of the specified app permissions (application permissions/roles).\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net6.0/PublicAPI.Shipped.txt#2025-04-23_snippet_18\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Identity.Web.PolicyBuilderExtensions.RequireScopeOrAppPermission(this Microsoft.AspNetCore.Authorization.AuthorizationPolicyBuilder! authorizationPolicyBuilder, System.Collections.Generic.IEnumerable<string!>! allowedScopeValues, System.Collections.Generic.IEnumerable<string!>! allowedAppPermissionValues) -> Microsoft.AspNetCore.Authorization.AuthorizationPolicyBuilder!\n```\n\n----------------------------------------\n\nTITLE: Querying Microsoft Graph with Authentication Scheme using Microsoft.GraphServiceClient - C#\nDESCRIPTION: This code snippet demonstrates how to specify a particular authentication scheme (using JwtBearerDefaults.AuthenticationScheme) when querying users from the Microsoft Graph API with the Microsoft.GraphServiceClient in an ASP.NET Core application. The dependency on Microsoft.Identity.Web is required to access the authentication methods. The key parameter is the authentication scheme, which determines the policy for token acquisition. Input is via the _graphServiceClient configured for the application; the output is the number of users returned by the query. The authentication scheme must match the expected setup for bearer tokens.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.GraphServiceClient/Readme.md#2025-04-23_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nvar messages = await _graphServiceClient.Users\n                .Request()\n                .WithAuthenticationScheme(JwtBearerDefaults.AuthenticationScheme)\n                .GetAsync();\nint NumberOfUsers = messages.Count;\n\n```\n\n----------------------------------------\n\nTITLE: Adding Scope-based Authorization - Microsoft.Identity.Web - C#\nDESCRIPTION: AddRequiredScopeAuthorization extends IServiceCollection to register services needed for scope-based authorization checks at the ASP.NET Core dependency injection level. Call this during service configuration to enable the necessary policies for required scopes. Requires Microsoft.Identity.Web and Microsoft.Extensions.DependencyInjection.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net9.0/PublicAPI.Shipped.txt#2025-04-23_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Identity.Web.RequiredScopeExtensions.AddRequiredScopeAuthorization(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!\n```\n\n----------------------------------------\n\nTITLE: Defining IMicrosoftIdentityAuthenticationDelegatingHandlerFactory Interface in C#\nDESCRIPTION: Defines an interface for creating delegating handlers for app and user authentication. It includes methods to create handlers for both application and user contexts.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net6.0/PublicAPI.Shipped.txt#2025-04-23_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.IMicrosoftIdentityAuthenticationDelegatingHandlerFactory.CreateAppHandler(string? serviceName) -> System.Net.Http.DelegatingHandler!\nMicrosoft.Identity.Web.IMicrosoftIdentityAuthenticationDelegatingHandlerFactory.CreateUserHandler(string? serviceName) -> System.Net.Http.DelegatingHandler!\n```\n\n----------------------------------------\n\nTITLE: Adding Downstream API with Action in C#\nDESCRIPTION: Adds a downstream API service to the IServiceCollection using an Action delegate. This method allows for configuring the downstream API options through a lambda expression or method.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.DownstreamApi/PublicAPI/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.DownstreamApiExtensions.AddDownstreamApi(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, string! serviceName, System.Action<Microsoft.Identity.Abstractions.DownstreamApiOptions!>! configureOptions) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!\n```\n\n----------------------------------------\n\nTITLE: Configuring Downstream Web API Authentication Extensions\nDESCRIPTION: Extension methods for adding and configuring downstream web API authentication in Microsoft Identity Web applications. Includes methods for adding downstream API support with configuration or options-based setup.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net7.0/PublicAPI.Shipped.txt#2025-04-23_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.DownstreamWebApiExtensions.AddDownstreamWebApi(this Microsoft.Identity.Web.MicrosoftIdentityAppCallsWebApiAuthenticationBuilder! builder, string! serviceName, Microsoft.Extensions.Configuration.IConfiguration! configuration) -> Microsoft.Identity.Web.MicrosoftIdentityAppCallsWebApiAuthenticationBuilder!\nstatic Microsoft.Identity.Web.DownstreamWebApiExtensions.AddDownstreamWebApi(this Microsoft.Identity.Web.MicrosoftIdentityAppCallsWebApiAuthenticationBuilder! builder, string! serviceName, System.Action<Microsoft.Identity.Web.DownstreamWebApiOptions!>! configureOptions) -> Microsoft.Identity.Web.MicrosoftIdentityAppCallsWebApiAuthenticationBuilder!\n```\n\n----------------------------------------\n\nTITLE: Registering Microsoft Identity UI Services in C#\nDESCRIPTION: Defines the `AddMicrosoftIdentityUI` extension method for `IMvcBuilder`. This method registers the necessary services, controllers, and Razor Pages required for the Microsoft Identity Web UI features (like sign-in, sign-out pages) within an ASP.NET Core application's dependency injection container and MVC setup.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.UI/PublicAPI.Shipped.txt#2025-04-23_snippet_22\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Identity.Web.UI.ServiceCollectionExtensions.AddMicrosoftIdentityUI(this Microsoft.Extensions.DependencyInjection.IMvcBuilder! builder) -> Microsoft.Extensions.DependencyInjection.IMvcBuilder!\n```\n\n----------------------------------------\n\nTITLE: Downstream API POST Methods for User Authentication\nDESCRIPTION: Method overloads for making POST requests to downstream APIs with user authentication. Supports generic input/output types with JSON serialization options and cancellation tokens.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.DownstreamApi/PublicAPI/net8.0/InternalAPI.Shipped.txt#2025-04-23_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.DownstreamApi.PostForUserAsync<TInput, TOutput>(string? serviceName, TInput input, System.Text.Json.Serialization.Metadata.JsonTypeInfo<TInput>! inputJsonTypeInfo, System.Text.Json.Serialization.Metadata.JsonTypeInfo<TOutput!>! outputJsonTypeInfo, System.Action<Microsoft.Identity.Abstractions.DownstreamApiOptionsReadOnlyHttpMethod!>? downstreamApiOptionsOverride = null, System.Security.Claims.ClaimsPrincipal? user = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TOutput?>!\n```\n\n----------------------------------------\n\nTITLE: Adding Microsoft Graph Beta Client Services\nDESCRIPTION: Extension methods to register Microsoft Graph Beta client services in the dependency injection container. Provides three overloads: default configuration, configuration from IConfiguration section, and configuration via action delegate.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.GraphServiceClientBeta/PublicAPI/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n#nullable enable\nMicrosoft.Identity.Web.GraphBetaServiceCollectionExtensions\nstatic Microsoft.Identity.Web.GraphBetaServiceCollectionExtensions.AddMicrosoftGraphBeta(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!\nstatic Microsoft.Identity.Web.GraphBetaServiceCollectionExtensions.AddMicrosoftGraphBeta(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, Microsoft.Extensions.Configuration.IConfiguration! configurationSection) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!\nstatic Microsoft.Identity.Web.GraphBetaServiceCollectionExtensions.AddMicrosoftGraphBeta(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, System.Action<Microsoft.Identity.Web.GraphServiceClientOptions!>! configureMicrosoftGraphOptions) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!\n```\n\n----------------------------------------\n\nTITLE: Requiring Scope with AuthorizationPolicyBuilder - Microsoft.Identity.Web - C#\nDESCRIPTION: This extension defines overloaded RequireScope methods for AuthorizationPolicyBuilder, allowing the enforcement of specific OAuth2 scopes within ASP.NET Core authorization policies. It takes either a params string array or an IEnumerable of strings as allowed scope values. Use these methods to require that an incoming token contains one of the specified scopes; otherwise, the authorization fails. Dependencies include Microsoft.Identity.Web and Microsoft.AspNetCore.Authorization namespaces.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net9.0/PublicAPI.Shipped.txt#2025-04-23_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Identity.Web.PolicyBuilderExtensions.RequireScope(this Microsoft.AspNetCore.Authorization.AuthorizationPolicyBuilder! authorizationPolicyBuilder, params string![]! allowedValues) -> Microsoft.AspNetCore.Authorization.AuthorizationPolicyBuilder!\n```\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Identity.Web.PolicyBuilderExtensions.RequireScope(this Microsoft.AspNetCore.Authorization.AuthorizationPolicyBuilder! authorizationPolicyBuilder, System.Collections.Generic.IEnumerable<string!>! allowedValues) -> Microsoft.AspNetCore.Authorization.AuthorizationPolicyBuilder!\n```\n\n----------------------------------------\n\nTITLE: Defining MicrosoftIdentityAuthenticationBaseOptions Class in C#\nDESCRIPTION: Represents base options for Microsoft Identity authentication. It includes properties for authentication scheme, scopes, tenant, user flow, and token acquisition options.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net6.0/PublicAPI.Shipped.txt#2025-04-23_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.MicrosoftIdentityAuthenticationBaseOptions\nMicrosoft.Identity.Web.MicrosoftIdentityAuthenticationBaseOptions.AuthenticationScheme.get -> string?\nMicrosoft.Identity.Web.MicrosoftIdentityAuthenticationBaseOptions.AuthenticationScheme.set -> void\nMicrosoft.Identity.Web.MicrosoftIdentityAuthenticationBaseOptions.GetScopes() -> string![]!\nMicrosoft.Identity.Web.MicrosoftIdentityAuthenticationBaseOptions.IsProofOfPossessionRequest.get -> bool\nMicrosoft.Identity.Web.MicrosoftIdentityAuthenticationBaseOptions.IsProofOfPossessionRequest.set -> void\nMicrosoft.Identity.Web.MicrosoftIdentityAuthenticationBaseOptions.MicrosoftIdentityAuthenticationBaseOptions() -> void\nMicrosoft.Identity.Web.MicrosoftIdentityAuthenticationBaseOptions.Scopes.get -> string?\nMicrosoft.Identity.Web.MicrosoftIdentityAuthenticationBaseOptions.Scopes.set -> void\nMicrosoft.Identity.Web.MicrosoftIdentityAuthenticationBaseOptions.Tenant.get -> string?\nMicrosoft.Identity.Web.MicrosoftIdentityAuthenticationBaseOptions.Tenant.set -> void\nMicrosoft.Identity.Web.MicrosoftIdentityAuthenticationBaseOptions.TokenAcquisitionOptions.get -> Microsoft.Identity.Web.TokenAcquisitionOptions!\nMicrosoft.Identity.Web.MicrosoftIdentityAuthenticationBaseOptions.TokenAcquisitionOptions.set -> void\nMicrosoft.Identity.Web.MicrosoftIdentityAuthenticationBaseOptions.UserFlow.get -> string?\nMicrosoft.Identity.Web.MicrosoftIdentityAuthenticationBaseOptions.UserFlow.set -> void\n```\n\n----------------------------------------\n\nTITLE: Creating ASP.NET Core Blazor WebAssembly with Azure AD Authentication\nDESCRIPTION: Command to create an ASP.NET Core Blazor WebAssembly application with Microsoft Identity Web integration for Azure AD authentication. The command includes parameters for tenant ID, client ID, and API configuration.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net7.0/PublicAPI.Unshipped.txt#2025-04-23_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ndotnet new blazorwasm2 --auth SingleOrg --tenant-id \"[Enter the tenant ID here to use from the Azure portal, e.g. 'contoso.onmicrosoft.com' or 'da41245a5-11b3-996c-00a8-4d99re19f292']\" --client-id \"[Enter the Client (application) ID of the app registration from the Azure portal, e.g. ba74781c2-53c2-442a-97c2-3d60re42f403]\" --domain [Enter your domain name, e.g. contoso.onmicrosoft.com] --default-scope [Enter the API scope for the web API, e.g. api://11111111-1111-1111-1111-111111111111/access_as_user] --app-id-uri [Enter the App ID URI of the web API, e.g. api://11111111-1111-1111-1111-111111111111] --api-client-id \"[Enter the client ID of the web API. e.g. 89ea5c94-7736-4e25-95ad-3fa95f62b66e]\"\n```\n\n----------------------------------------\n\nTITLE: Requiring Scope on AuthorizationPolicyBuilder (params array) in C#\nDESCRIPTION: This extension method adds a requirement to an ASP.NET Core AuthorizationPolicyBuilder that the authenticated user must possess at least one of the specified scopes (delegated permissions). It accepts scopes as a parameter array.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net6.0/PublicAPI.Shipped.txt#2025-04-23_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Identity.Web.PolicyBuilderExtensions.RequireScope(this Microsoft.AspNetCore.Authorization.AuthorizationPolicyBuilder! authorizationPolicyBuilder, params string![]! allowedValues) -> Microsoft.AspNetCore.Authorization.AuthorizationPolicyBuilder!\n```\n\n----------------------------------------\n\nTITLE: Declaring Identity Web Core Types and Interfaces - Microsoft.Identity.Web - C#\nDESCRIPTION: This snippet lists key extension classes and interfaces that compose the Microsoft.Identity.Web library. These include authentication builders, token acquisition methods, certificate observation contracts, and extensibility types, which are fundamental entry points for developers integrating Azure AD and identity management in .NET web applications. Dependencies include core .NET and Microsoft.Identity.Web namespaces. Functionality covers authentication extension, distributed/in-memory token caching, event handling, and claims management.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.TokenAcquisition/PublicAPI/net6.0/PublicAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Identity.Web.ApplicationBuilderExtensions\nMicrosoft.Identity.Web.BeforeTokenAcquisitionForApp\nMicrosoft.Identity.Web.BeforeTokenAcquisitionForTestUser\nMicrosoft.Identity.Web.ClaimConstants\nMicrosoft.Identity.Web.Constants\nMicrosoft.Identity.Web.Experimental.CerticateObserverAction\nMicrosoft.Identity.Web.Experimental.CerticateObserverAction.Deselected = 1 -> Microsoft.Identity.Web.Experimental.CerticateObserverAction\nMicrosoft.Identity.Web.Experimental.CerticateObserverAction.Selected = 0 -> Microsoft.Identity.Web.Experimental.CerticateObserverAction\nMicrosoft.Identity.Web.Experimental.CertificateChangeEventArg\nMicrosoft.Identity.Web.Experimental.CertificateChangeEventArg.Action.get -> Microsoft.Identity.Web.Experimental.CerticateObserverAction\nMicrosoft.Identity.Web.Experimental.CertificateChangeEventArg.Action.set -> void\nMicrosoft.Identity.Web.Experimental.CertificateChangeEventArg.Certificate.get -> System.Security.Cryptography.X509Certificates.X509Certificate2?\nMicrosoft.Identity.Web.Experimental.CertificateChangeEventArg.Certificate.set -> void\nMicrosoft.Identity.Web.Experimental.CertificateChangeEventArg.CertificateChangeEventArg() -> void\nMicrosoft.Identity.Web.Experimental.CertificateChangeEventArg.CredentialDescription.get -> Microsoft.Identity.Abstractions.CredentialDescription?\nMicrosoft.Identity.Web.Experimental.CertificateChangeEventArg.CredentialDescription.set -> void\nMicrosoft.Identity.Web.Experimental.ICertificatesObserver\nMicrosoft.Identity.Web.Experimental.ICertificatesObserver.OnClientCertificateChanged(Microsoft.Identity.Web.Experimental.CertificateChangeEventArg! e) -> void\nMicrosoft.Identity.Web.Extensibility.BaseAuthorizationHeaderProvider\nMicrosoft.Identity.Web.Extensibility.BaseAuthorizationHeaderProvider.BaseAuthorizationHeaderProvider(System.IServiceProvider! serviceProvider) -> void\nMicrosoft.Identity.Web.Internal.WebApiBuilders\nMicrosoft.Identity.Web.ITokenAcquisition\nMicrosoft.Identity.Web.ITokenAcquisition.GetAccessTokenForAppAsync(string! scope, string? authenticationScheme, string? tenant = null, Microsoft.Identity.Web.TokenAcquisitionOptions? tokenAcquisitionOptions = null) -> System.Threading.Tasks.Task<string!>!\nMicrosoft.Identity.Web.ITokenAcquisition.GetAccessTokenForAppAsync(string! scope, string? tenant = null, Microsoft.Identity.Web.TokenAcquisitionOptions? tokenAcquisitionOptions = null) -> System.Threading.Tasks.Task<string!>!\nMicrosoft.Identity.Web.ITokenAcquisition.GetAccessTokenForUserAsync(System.Collections.Generic.IEnumerable<string!>! scopes, string? authenticationScheme, string? tenantId = null, string? userFlow = null, System.Security.Claims.ClaimsPrincipal? user = null, Microsoft.Identity.Web.TokenAcquisitionOptions? tokenAcquisitionOptions = null) -> System.Threading.Tasks.Task<string!>!\nMicrosoft.Identity.Web.ITokenAcquisition.GetAccessTokenForUserAsync(System.Collections.Generic.IEnumerable<string!>! scopes, string? tenantId = null, string? userFlow = null, System.Security.Claims.ClaimsPrincipal? user = null, Microsoft.Identity.Web.TokenAcquisitionOptions? tokenAcquisitionOptions = null) -> System.Threading.Tasks.Task<string!>!\nMicrosoft.Identity.Web.ITokenAcquisition.GetAuthenticationResultForAppAsync(string! scope, string? authenticationScheme, string? tenant = null, Microsoft.Identity.Web.TokenAcquisitionOptions? tokenAcquisitionOptions = null) -> System.Threading.Tasks.Task<Microsoft.Identity.Client.AuthenticationResult!>!\nMicrosoft.Identity.Web.ITokenAcquisition.GetAuthenticationResultForAppAsync(string! scope, string? tenant = null, Microsoft.Identity.Web.TokenAcquisitionOptions? tokenAcquisitionOptions = null) -> System.Threading.Tasks.Task<Microsoft.Identity.Client.AuthenticationResult!>!\nMicrosoft.Identity.Web.ITokenAcquisition.GetAuthenticationResultForUserAsync(System.Collections.Generic.IEnumerable<string!>! scopes, string? authenticationScheme, string? tenantId = null, string? userFlow = null, System.Security.Claims.ClaimsPrincipal? user = null, Microsoft.Identity.Web.TokenAcquisitionOptions? tokenAcquisitionOptions = null) -> System.Threading.Tasks.Task<Microsoft.Identity.Client.AuthenticationResult!>!\nMicrosoft.Identity.Web.ITokenAcquisition.GetAuthenticationResultForUserAsync(System.Collections.Generic.IEnumerable<string!>! scopes, string? tenantId = null, string? userFlow = null, System.Security.Claims.ClaimsPrincipal? user = null, Microsoft.Identity.Web.TokenAcquisitionOptions? tokenAcquisitionOptions = null) -> System.Threading.Tasks.Task<Microsoft.Identity.Client.AuthenticationResult!>!\nMicrosoft.Identity.Web.ITokenAcquisition.GetEffectiveAuthenticationScheme(string? authenticationScheme) -> string!\nMicrosoft.Identity.Web.ITokenAcquisition.ReplyForbiddenWithWwwAuthenticateHeader(System.Collections.Generic.IEnumerable<string!>! scopes, Microsoft.Identity.Client.MsalUiRequiredException! msalServiceException, Microsoft.AspNetCore.Http.HttpResponse? httpResponse = null) -> void\nMicrosoft.Identity.Web.ITokenAcquisition.ReplyForbiddenWithWwwAuthenticateHeader(System.Collections.Generic.IEnumerable<string!>! scopes, Microsoft.Identity.Client.MsalUiRequiredException! msalServiceException, string? authenticationScheme, Microsoft.AspNetCore.Http.HttpResponse? httpResponse = null) -> void\nMicrosoft.Identity.Web.ITokenAcquisition.ReplyForbiddenWithWwwAuthenticateHeaderAsync(System.Collections.Generic.IEnumerable<string!>! scopes, Microsoft.Identity.Client.MsalUiRequiredException! msalServiceException, Microsoft.AspNetCore.Http.HttpResponse? httpResponse = null) -> System.Threading.Tasks.Task!\nMicrosoft.Identity.Web.MicrosoftIdentityAppCallsWebApiAuthenticationBuilder\nMicrosoft.Identity.Web.MicrosoftIdentityAppCallsWebApiAuthenticationBuilder.AddDistributedTokenCaches() -> Microsoft.Identity.Web.MicrosoftIdentityAppCallsWebApiAuthenticationBuilder!\nMicrosoft.Identity.Web.MicrosoftIdentityAppCallsWebApiAuthenticationBuilder.AddInMemoryTokenCaches(System.Action<Microsoft.Identity.Web.TokenCacheProviders.InMemory.MsalMemoryTokenCacheOptions!>? configureOptions = null, System.Action<Microsoft.Extensions.Caching.Memory.MemoryCacheOptions!>? memoryCacheOptions = null) -> Microsoft.Identity.Web.MicrosoftIdentityAppCallsWebApiAuthenticationBuilder!\nMicrosoft.Identity.Web.MicrosoftIdentityBaseAuthenticationBuilder\nMicrosoft.Identity.Web.MicrosoftIdentityBaseAuthenticationBuilder.ConfigurationSection.get -> Microsoft.Extensions.Configuration.IConfigurationSection?\nMicrosoft.Identity.Web.MicrosoftIdentityBaseAuthenticationBuilder.ConfigurationSection.set -> void\nMicrosoft.Identity.Web.MicrosoftIdentityBaseAuthenticationBuilder.MicrosoftIdentityBaseAuthenticationBuilder(Microsoft.Extensions.DependencyInjection.IServiceCollection! services, Microsoft.Extensions.Configuration.IConfigurationSection? configurationSection = null) -> void\nMicrosoft.Identity.Web.MicrosoftIdentityBaseAuthenticationBuilder.Services.get -> Microsoft.Extensions.DependencyInjection.IServiceCollection!\nMicrosoft.Identity.Web.MicrosoftIdentityOptions\nMicrosoft.Identity.Web.MicrosoftIdentityOptions.AllowWebApiToBeAuthorizedByACL.get -> bool\nMicrosoft.Identity.Web.MicrosoftIdentityOptions.AllowWebApiToBeAuthorizedByACL.set -> void\n```\n\n----------------------------------------\n\nTITLE: Token Cache Provider Implementation in C#\nDESCRIPTION: Session-based token cache provider class with methods for reading, writing and removing cache entries\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Identity.Web.TokenCacheProviders.Session.MsalSessionTokenCacheProvider.ReadCacheBytesAsync(string! cacheKey) -> System.Threading.Tasks.Task<byte[]?>!\noverride Microsoft.Identity.Web.TokenCacheProviders.Session.MsalSessionTokenCacheProvider.WriteCacheBytesAsync(string! cacheKey, byte[]! bytes) -> System.Threading.Tasks.Task!\noverride Microsoft.Identity.Web.TokenCacheProviders.Session.MsalSessionTokenCacheProvider.RemoveKeyAsync(string! cacheKey) -> System.Threading.Tasks.Task!\n```\n\n----------------------------------------\n\nTITLE: Requiring Scope or App Permission with AuthorizationPolicyBuilder - Microsoft.Identity.Web - C#\nDESCRIPTION: The RequireScopeOrAppPermission extension for AuthorizationPolicyBuilder enables policies that accept either a set of OAuth2 scopes or app permissions. It requires an IEnumerable for allowed scopes and another for allowed app permission values, providing flexible enforcement of authentication requirements. This is particularly useful for APIs that support both user and app access tokens. Microsoft.AspNetCore.Authorization and Microsoft.Identity.Web are required as dependencies.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net9.0/PublicAPI.Shipped.txt#2025-04-23_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Identity.Web.PolicyBuilderExtensions.RequireScopeOrAppPermission(this Microsoft.AspNetCore.Authorization.AuthorizationPolicyBuilder! authorizationPolicyBuilder, System.Collections.Generic.IEnumerable<string!>! allowedScopeValues, System.Collections.Generic.IEnumerable<string!>! allowedAppPermissionValues) -> Microsoft.AspNetCore.Authorization.AuthorizationPolicyBuilder!\n```\n\n----------------------------------------\n\nTITLE: Implementing Microsoft Graph Authentication Builder Extensions in C#\nDESCRIPTION: Extension methods for MicrosoftIdentityAppCallsWebApiAuthenticationBuilder to configure Microsoft Graph authentication with various options and client factories.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.MicrosoftGraphBeta/PublicAPI/net9.0/PublicAPI.Shipped.txt#2025-04-23_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic static class MicrosoftGraphExtensions\n{\n    public static MicrosoftIdentityAppCallsWebApiAuthenticationBuilder AddMicrosoftGraph(this MicrosoftIdentityAppCallsWebApiAuthenticationBuilder builder, IConfigurationSection configurationSection);\n    public static MicrosoftIdentityAppCallsWebApiAuthenticationBuilder AddMicrosoftGraph(this MicrosoftIdentityAppCallsWebApiAuthenticationBuilder builder, string graphBaseUrl = \"https://graph.microsoft.com/v1.0\", string defaultScopes = \"user.read\");\n    public static MicrosoftIdentityAppCallsWebApiAuthenticationBuilder AddMicrosoftGraph(this MicrosoftIdentityAppCallsWebApiAuthenticationBuilder builder, Action<MicrosoftGraphOptions> configureMicrosoftGraphOptions);\n    public static MicrosoftIdentityAppCallsWebApiAuthenticationBuilder AddMicrosoftGraph(this MicrosoftIdentityAppCallsWebApiAuthenticationBuilder builder, Func<IAuthenticationProvider, GraphServiceClient> graphServiceClientFactory, IEnumerable<string> initialScopes);\n    public static MicrosoftIdentityAppCallsWebApiAuthenticationBuilder AddMicrosoftGraphAppOnly(this MicrosoftIdentityAppCallsWebApiAuthenticationBuilder builder, Func<IAuthenticationProvider, GraphServiceClient> graphServiceClientFactory);\n}\n```\n\n----------------------------------------\n\nTITLE: Performing GET Request for Application in C#\nDESCRIPTION: This method performs a GET request to a downstream API on behalf of the application. It supports generic input and output types, and allows for customization of the API options.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.DownstreamApi/PublicAPI/net8.0/InternalAPI.Shipped.txt#2025-04-23_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.DownstreamApi.GetForAppAsync<TInput, TOutput>(string? serviceName, TInput input, System.Action<Microsoft.Identity.Abstractions.DownstreamApiOptionsReadOnlyHttpMethod!>? downstreamApiOptionsOverride = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TOutput?>!\n```\n\n----------------------------------------\n\nTITLE: Microsoft Identity Authentication Handler Configuration\nDESCRIPTION: Extension methods for configuring Microsoft Identity authentication handlers in HTTP clients. Supports both app and user authentication scenarios with configuration or options-based setup.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net7.0/PublicAPI.Shipped.txt#2025-04-23_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.MicrosoftIdentityAuthenticationMessageHandlerHttpClientBuilderExtensions.AddMicrosoftIdentityAppAuthenticationHandler(this Microsoft.Extensions.DependencyInjection.IHttpClientBuilder! builder, string! serviceName, Microsoft.Extensions.Configuration.IConfiguration! configuration) -> Microsoft.Extensions.DependencyInjection.IHttpClientBuilder!\nstatic Microsoft.Identity.Web.MicrosoftIdentityAuthenticationMessageHandlerHttpClientBuilderExtensions.AddMicrosoftIdentityUserAuthenticationHandler(this Microsoft.Extensions.DependencyInjection.IHttpClientBuilder! builder, string! serviceName, System.Action<Microsoft.Identity.Web.MicrosoftIdentityAuthenticationMessageHandlerOptions!>! configureOptions) -> Microsoft.Extensions.DependencyInjection.IHttpClientBuilder!\n```\n\n----------------------------------------\n\nTITLE: Adding Microsoft Graph Beta Client Extensions in C#\nDESCRIPTION: Extension methods that add Microsoft Graph Beta client services with different configuration options. Includes three overloads for basic setup, configuration section-based setup, and delegate-based configuration.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.GraphServiceClientBeta/PublicAPI/net9.0/PublicAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n#nullable enable\nMicrosoft.Identity.Web.GraphBetaServiceCollectionExtensions\nstatic Microsoft.Identity.Web.GraphBetaServiceCollectionExtensions.AddMicrosoftGraphBeta(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!\nstatic Microsoft.Identity.Web.GraphBetaServiceCollectionExtensions.AddMicrosoftGraphBeta(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, Microsoft.Extensions.Configuration.IConfiguration! configurationSection) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!\nstatic Microsoft.Identity.Web.GraphBetaServiceCollectionExtensions.AddMicrosoftGraphBeta(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, System.Action<Microsoft.Identity.Web.GraphServiceClientOptions!>! configureMicrosoftGraphOptions) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!\n```\n\n----------------------------------------\n\nTITLE: Web API Authentication Configuration\nDESCRIPTION: Extension methods for setting up Microsoft Identity authentication in Web APIs. Includes JWT bearer token configuration and middleware diagnostics options.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net7.0/PublicAPI.Shipped.txt#2025-04-23_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.MicrosoftIdentityWebApiAuthenticationBuilderExtensions.AddMicrosoftIdentityWebApi(this Microsoft.AspNetCore.Authentication.AuthenticationBuilder! builder, Microsoft.Extensions.Configuration.IConfiguration! configuration, string! configSectionName = \"AzureAd\", string! jwtBearerScheme = \"Bearer\", bool subscribeToJwtBearerMiddlewareDiagnosticsEvents = false) -> Microsoft.Identity.Web.MicrosoftIdentityWebApiAuthenticationBuilderWithConfiguration!\n```\n\n----------------------------------------\n\nTITLE: HTTP Method-Specific API Calls in C#\nDESCRIPTION: Specialized methods for making HTTP requests using specific HTTP methods (GET, POST, PATCH, DELETE) with support for strongly-typed inputs and outputs.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.DownstreamApi/PublicAPI/net6.0/InternalAPI.Shipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.DownstreamApi.GetForAppAsync<TOutput>(string? serviceName, System.Action<Microsoft.Identity.Abstractions.DownstreamApiOptionsReadOnlyHttpMethod!>? downstreamApiOptionsOverride = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TOutput?>!\n```\n\n----------------------------------------\n\nTITLE: Retrieving Mail Folders with Custom Scopes and Authentication Scheme\nDESCRIPTION: C# code showing how to override default options when calling Microsoft Graph, including specifying custom scopes and authentication scheme.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.GraphServiceClient/Readme.md#2025-04-23_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nvar mailFolders = await _graphServiceClient.Me.MailFolders.GetAsync(r =>\n{\n    r.Options.WithScopes(\"Mail.Read\")\n             .WithAuthenticationScheme(JwtBearerDefaults.AuthenticationScheme);\n});\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar mailFolders = await _graphServiceClient.Me.MailFolders.GetAsync(r =>\n{\n    r.Options.WithAuthenticationOptions(o =>\n    {\n        o.Scopes = new string[] { \"Mail.Read\" };\n        o.AcquireTokenOptions.AuthenticationOptionsName = JwtBearerDefaults.AuthenticationScheme;\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Session-Based Per-User Token Cache Services in C#\nDESCRIPTION: This extension method registers services with the dependency injection container (IServiceCollection) to configure Microsoft.Identity.Web to use the ASP.NET Core session for caching user-specific tokens (delegated permissions).\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net6.0/PublicAPI.Shipped.txt#2025-04-23_snippet_26\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Identity.Web.TokenCacheProviders.Session.SessionTokenCacheProviderExtension.AddSessionPerUserTokenCache(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!\n```\n\n----------------------------------------\n\nTITLE: Performing GET Request for User in C#\nDESCRIPTION: This method performs a GET request to a downstream API on behalf of the user. It supports generic input and output types, and allows for customization of the API options and specifying the user.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.DownstreamApi/PublicAPI/net8.0/InternalAPI.Shipped.txt#2025-04-23_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.DownstreamApi.GetForUserAsync<TInput, TOutput>(string? serviceName, TInput input, System.Action<Microsoft.Identity.Abstractions.DownstreamApiOptionsReadOnlyHttpMethod!>? downstreamApiOptionsOverride = null, System.Security.Claims.ClaimsPrincipal? user = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TOutput?>!\n```\n\n----------------------------------------\n\nTITLE: Creating ASP.NET Core Web API with Azure AD B2C Authentication\nDESCRIPTION: Command to create an ASP.NET Core web API with Microsoft Identity Web integration for Azure AD B2C authentication. The command includes parameters for instance, tenant ID, client ID, and policy ID.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net7.0/PublicAPI.Unshipped.txt#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ndotnet new webapi2 --auth B2C --aad-b2c-instance \"[Enter the instance of Azure AD B2C, e.g. https://fabrikam.b2clogin.com/]\" --domain [Enter your domain name, e.g. contoso.onmicrosoft.com] --client-id \"[Enter the Client (application) ID of the app registration from the Azure portal, e.g. ba74781c2-53c2-442a-97c2-3d60re42f403]\" --susi-policy-id \"[Enter the sign up / sign in policy ID for B2C, e.g. b2c_1_susi]\" --tenant-id \"[Enter the tenant ID here to use from the Azure portal, e.g. 'contoso.onmicrosoft.com' or 'da41245a5-11b3-996c-00a8-4d99re19f292']\"\n```\n\n----------------------------------------\n\nTITLE: Registering Downstream API Clients in DI - Microsoft Identity Web Extensions - C#\nDESCRIPTION: Extension methods for Microsoft.Extensions.DependencyInjection to register and configure downstream API clients within the DI container. Enables lifetime customization and configures standardized downstream API registration. Must be invoked during service configuration (typically in Startup.cs or Program.cs) to wire API clients correctly for injection.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.DownstreamApi/PublicAPI/net9.0/InternalAPI.Shipped.txt#2025-04-23_snippet_18\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Identity.Web.DownstreamApiExtensions.AddDownstreamApiWithLifetime(Microsoft.Extensions.DependencyInjection.IServiceCollection! services, Microsoft.Extensions.DependencyInjection.ServiceLifetime lifetime) -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Identity.Web.DownstreamApiExtensions.RegisterDownstreamApi(Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> void\n```\n\n----------------------------------------\n\nTITLE: Microsoft Identity Web App Authentication Configuration\nDESCRIPTION: Extension methods for configuring Microsoft Identity Web App authentication in ASP.NET Core applications. Provides options for OpenID Connect and cookie authentication setup.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net9.0/PublicAPI.Shipped.txt#2025-04-23_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.MicrosoftIdentityWebAppAuthenticationBuilderExtensions.AddMicrosoftIdentityWebApp(this Microsoft.AspNetCore.Authentication.AuthenticationBuilder! builder, Microsoft.Extensions.Configuration.IConfiguration! configuration, string! configSectionName = \"AzureAd\", string! openIdConnectScheme = \"OpenIdConnect\", string? cookieScheme = \"Cookies\", bool subscribeToOpenIdConnectMiddlewareDiagnosticsEvents = false, string? displayName = null) -> Microsoft.Identity.Web.MicrosoftIdentityWebAppAuthenticationBuilderWithConfiguration!\n```\n\n----------------------------------------\n\nTITLE: Getting RequestId Property in ErrorModel (C#)\nDESCRIPTION: Defines the getter for the `RequestId` property in the `ErrorModel` class. This property holds the unique identifier for the current request, which is useful for tracing and debugging errors. It returns a nullable string.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.UI/PublicAPI.Shipped.txt#2025-04-23_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Identity.Web.UI.Areas.MicrosoftIdentity.Pages.Account.ErrorModel.RequestId.get -> string?\n```\n\n----------------------------------------\n\nTITLE: Configuring App-Only Authentication for Graph Requests in C#\nDESCRIPTION: An extension method for Microsoft Graph base request types (like `IBaseRequest`). It configures the request to use app-only authentication (client credentials flow) instead of user-delegated permissions. An optional tenant ID can be specified.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.MicrosoftGraph/PublicAPI/net6.0/PublicAPI.Shipped.txt#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Identity.Web.BaseRequestExtensions.WithAppOnly<T>(this T baseRequest, bool appOnly = true, string? tenant = null) -> T\n```\n\n----------------------------------------\n\nTITLE: CallApiAsync Methods for HTTP Operations\nDESCRIPTION: Collection of methods for making HTTP requests to downstream APIs with support for both app and user authentication contexts. Includes generic and non-generic variants with options for input/output serialization.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.DownstreamApi/PublicAPI/net8.0/InternalAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.DownstreamApi.CallApiAsync(Microsoft.Identity.Abstractions.DownstreamApiOptions! downstreamApiOptions, System.Security.Claims.ClaimsPrincipal? user = null, System.Net.Http.HttpContent? content = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage!>!\n```\n\n----------------------------------------\n\nTITLE: Calling Downstream API for User Authentication in C#\nDESCRIPTION: Method to call a downstream API using user authentication, with options for input and output serialization and user claims.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.DownstreamApi/PublicAPI/net9.0/InternalAPI.Shipped.txt#2025-04-23_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.DownstreamApi.CallApiForUserAsync<TInput, TOutput>(string? serviceName, TInput input, System.Action<Microsoft.Identity.Abstractions.DownstreamApiOptions!>? downstreamApiOptionsOverride = null, System.Security.Claims.ClaimsPrincipal? user = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TOutput?>!\n```\n\n----------------------------------------\n\nTITLE: Adding Downstream API to MicrosoftIdentityAppCallsWebApiAuthenticationBuilder with Action in C#\nDESCRIPTION: Adds a downstream API service to the MicrosoftIdentityAppCallsWebApiAuthenticationBuilder using an Action delegate. This method is specific to the authentication builder and allows for configuring the downstream API options through a lambda expression or method.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.DownstreamApi/PublicAPI/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.DownstreamApiExtensions.AddDownstreamApi(this Microsoft.Identity.Web.MicrosoftIdentityAppCallsWebApiAuthenticationBuilder! builder, string! serviceName, System.Action<Microsoft.Identity.Abstractions.DownstreamApiOptions!>! configureOptions) -> Microsoft.Identity.Web.MicrosoftIdentityAppCallsWebApiAuthenticationBuilder!\n```\n\n----------------------------------------\n\nTITLE: Adding Downstream API with Configuration in C#\nDESCRIPTION: Adds a downstream API service to the IServiceCollection using a configuration object. This method allows for configuring the downstream API options through an IConfiguration instance.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.DownstreamApi/PublicAPI/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.DownstreamApiExtensions.AddDownstreamApi(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, string! serviceName, Microsoft.Extensions.Configuration.IConfiguration! configuration) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!\n```\n\n----------------------------------------\n\nTITLE: Downstream Web API Interface Method Declaration\nDESCRIPTION: Definition of method signatures for calling downstream web APIs with authentication support\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.IDownstreamWebApi.CallWebApiForAppAsync(string! serviceName, string? authenticationScheme, System.Action<Microsoft.Identity.Web.DownstreamWebApiOptions!>? downstreamWebApiOptionsOverride = null, System.Net.Http.StringContent? content = null) -> System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage!>!\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Microsoft Identity Web API Authentication Configuration\nDESCRIPTION: This comprehensive example shows how to configure Microsoft Identity Web API authentication with customization of both identity options and token validation parameters. It demonstrates the most flexible configuration approach.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.Diagnostics/PublicAPI/net9.0/PublicAPI.Shipped.txt#2025-04-23_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddMicrosoftIdentityWebApiAuthentication(Configuration, configSectionName: \"AzureAd\", configureMicrosoftIdentityOptions: options =>\n{\n    // Microsoft Identity options customization\n}, configureTokenValidationParameters: tokenValidationParameters =>\n{\n    // Token validation parameter customization\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Downstream API to Authentication Builder with Options Configuration in C#\nDESCRIPTION: Extends MicrosoftIdentityAppCallsWebApiAuthenticationBuilder to add a downstream API service using a configuration action. This method provides more control over the DownstreamApiOptions when chaining authentication configuration methods.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.DownstreamApi/PublicAPI/net9.0/PublicAPI.Shipped.txt#2025-04-23_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.DownstreamApiExtensions.AddDownstreamApi(this Microsoft.Identity.Web.MicrosoftIdentityAppCallsWebApiAuthenticationBuilder! builder, string! serviceName, System.Action<Microsoft.Identity.Abstractions.DownstreamApiOptions!>! configureOptions) -> Microsoft.Identity.Web.MicrosoftIdentityAppCallsWebApiAuthenticationBuilder!\n```\n\n----------------------------------------\n\nTITLE: Downstream API Method Signatures in C#\nDESCRIPTION: Collection of method signatures for making downstream API calls, including POST and PUT operations for both application and user contexts. Methods support generic input/output types, optional service name, downstream API options override, user claims, and cancellation tokens.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.DownstreamApi/PublicAPI/net7.0/InternalAPI.Shipped.txt#2025-04-23_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.DownstreamApi.PostForAppAsync<TInput>(string? serviceName, TInput input, System.Action<Microsoft.Identity.Abstractions.DownstreamApiOptionsReadOnlyHttpMethod!>? downstreamApiOptionsOverride = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!\n\nMicrosoft.Identity.Web.DownstreamApi.PostForUserAsync<TInput, TOutput>(string? serviceName, TInput input, System.Action<Microsoft.Identity.Abstractions.DownstreamApiOptionsReadOnlyHttpMethod!>? downstreamApiOptionsOverride = null, System.Security.Claims.ClaimsPrincipal? user = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TOutput?>!\n\nMicrosoft.Identity.Web.DownstreamApi.PutForAppAsync<TInput, TOutput>(string? serviceName, TInput input, System.Action<Microsoft.Identity.Abstractions.DownstreamApiOptionsReadOnlyHttpMethod!>? downstreamApiOptionsOverride = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TOutput?>!\n```\n\n----------------------------------------\n\nTITLE: Adding Session-backed Token Cache per User - Microsoft.Identity.Web - C#\nDESCRIPTION: AddSessionPerUserTokenCache sets up a token cache in session storage for user-specific tokens within an ASP.NET Core application. Register this with IServiceCollection to allow per-user token caching, enhancing token persistence and reuse in applications with user authentication. Requires Microsoft.Identity.Web and session middleware configuration.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net9.0/PublicAPI.Shipped.txt#2025-04-23_snippet_18\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Identity.Web.TokenCacheProviders.Session.SessionTokenCacheProviderExtension.AddSessionPerUserTokenCache(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!\n```\n\n----------------------------------------\n\nTITLE: Registering Microsoft Graph Client (Custom Config) in C#\nDESCRIPTION: An extension method for `IServiceCollection` that registers Microsoft Graph services while allowing custom configuration via an `Action<MicrosoftGraphOptions>`. This enables setting specific base URLs or default scopes during startup.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.MicrosoftGraph/PublicAPI/net6.0/PublicAPI.Shipped.txt#2025-04-23_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Identity.Web.GraphServiceCollectionExtensions.AddMicrosoftGraph(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, System.Action<Microsoft.Identity.Web.MicrosoftGraphOptions!>! configureMicrosoftGraphOptions) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!\n```\n\n----------------------------------------\n\nTITLE: Configuring Microsoft Identity Web API Authentication with Token Validation Parameters\nDESCRIPTION: This code demonstrates how to customize token validation parameters when configuring Microsoft Identity Web API authentication. It provides fine-grained control over how tokens are validated by the middleware.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.Diagnostics/PublicAPI/net9.0/PublicAPI.Shipped.txt#2025-04-23_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddMicrosoftIdentityWebApiAuthentication(Configuration, configSectionName: \"AzureAd\", configureMicrosoftIdentityOptions: null, configureTokenValidationParameters: tokenValidationParameters =>\n{\n    // Token validation parameter customization goes here\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Required Scope Authorization Services in C#\nDESCRIPTION: This extension method registers the necessary services with the dependency injection container (IServiceCollection) to enable authorization based on required scopes using Microsoft.Identity.Web.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net6.0/PublicAPI.Shipped.txt#2025-04-23_snippet_19\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Identity.Web.RequiredScopeExtensions.AddRequiredScopeAuthorization(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!\n```\n\n----------------------------------------\n\nTITLE: Adding Microsoft Graph Support to Service Collection\nDESCRIPTION: C# code to add Microsoft Graph support to the service collection in the startup method, with default scopes set to 'User.Read'.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.GraphServiceClient/Readme.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Identity.Web;\n\nservices.AddMicrosoftGraph();\n```\n\n----------------------------------------\n\nTITLE: Token Acquisition Method Implementation\nDESCRIPTION: Method implementation for acquiring access tokens for applications and users with Azure AD authentication\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.AppServicesAuthenticationTokenAcquisition.GetAccessTokenForAppAsync(string! scope, string? authenticationScheme, string? tenant = null, Microsoft.Identity.Web.TokenAcquisitionOptions? tokenAcquisitionOptions = null) -> System.Threading.Tasks.Task<string!>!\n```\n\n----------------------------------------\n\nTITLE: Associating User Principal with Graph Requests in C#\nDESCRIPTION: An extension method for Microsoft Graph base request types. It associates a specific user principal (`ClaimsPrincipal`) with the request, ensuring the token is acquired for that user.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.MicrosoftGraph/PublicAPI/net6.0/PublicAPI.Shipped.txt#2025-04-23_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Identity.Web.BaseRequestExtensions.WithUser<T>(this T baseRequest, System.Security.Claims.ClaimsPrincipal! user) -> T\n```\n\n----------------------------------------\n\nTITLE: Registering Microsoft Graph Client (Default Config) in C#\nDESCRIPTION: An extension method for `IServiceCollection` that registers the necessary services for using Microsoft Graph with default configuration options. It enables dependency injection of `GraphServiceClient`.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.MicrosoftGraph/PublicAPI/net6.0/PublicAPI.Shipped.txt#2025-04-23_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Identity.Web.GraphServiceCollectionExtensions.AddMicrosoftGraph(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!\n```\n\n----------------------------------------\n\nTITLE: Adding App-Only Microsoft Graph Support (Client Factory) in C#\nDESCRIPTION: An extension method for `MicrosoftIdentityAppCallsWebApiAuthenticationBuilder` specifically for configuring app-only (client credential) authentication for Microsoft Graph. It uses a custom factory function to create the `GraphServiceClient` tailored for app-only scenarios.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.MicrosoftGraph/PublicAPI/net6.0/PublicAPI.Shipped.txt#2025-04-23_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Identity.Web.MicrosoftGraphExtensions.AddMicrosoftGraphAppOnly(this Microsoft.Identity.Web.MicrosoftIdentityAppCallsWebApiAuthenticationBuilder! builder, System.Func<Microsoft.Graph.IAuthenticationProvider!, Microsoft.Graph.GraphServiceClient!>! graphServiceClientFactory) -> Microsoft.Identity.Web.MicrosoftIdentityAppCallsWebApiAuthenticationBuilder!\n```\n\n----------------------------------------\n\nTITLE: Base Request Extension Methods for Authentication Configuration\nDESCRIPTION: Extension methods for customizing authentication behavior including app-only auth, authentication schemes, scopes, and user claims.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.MicrosoftGraphBeta/PublicAPI/net6.0/PublicAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Identity.Web.BaseRequestExtensions.WithAppOnly<T>(this T baseRequest, bool appOnly = true, string? tenant = null) -> T\nstatic Microsoft.Identity.Web.BaseRequestExtensions.WithAuthenticationOptions<T>(this T baseRequest, System.Action<Microsoft.Identity.Abstractions.AuthorizationHeaderProviderOptions!>! overrideAuthenticationOptions) -> T\nstatic Microsoft.Identity.Web.BaseRequestExtensions.WithAuthenticationScheme<T>(this T baseRequest, string! authenticationScheme) -> T\nstatic Microsoft.Identity.Web.BaseRequestExtensions.WithScopes<T>(this T baseRequest, params string![]! scopes) -> T\nstatic Microsoft.Identity.Web.BaseRequestExtensions.WithUser<T>(this T baseRequest, System.Security.Claims.ClaimsPrincipal! user) -> T\n```\n\n----------------------------------------\n\nTITLE: Implementing OIDC Signed Assertion Loader - Microsoft.Identity.Web - C#\nDESCRIPTION: Defines the class and core members for OidcIdpSignedAssertionLoader, responsible for managing and loading OIDC identity provider signed assertions. Key methods include property accessors for CredentialSource and Name, and an asynchronous method to load assertions given a credential description and optional parameters. Constructor dependencies include ILogger, IOptionsMonitor, IConfiguration, and ITokenAcquirerFactory. Inputs are credential descriptions and loader parameters, while output is a Task representing the loaded assertion. All dependencies must be properly configured and injected.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.OidcFIC/PublicAPI/net9.0/InternalAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n#nullable enable\nMicrosoft.Identity.Web.OidcFic.OidcIdpSignedAssertionLoader\nMicrosoft.Identity.Web.OidcFic.OidcIdpSignedAssertionLoader.CredentialSource.get -> Microsoft.Identity.Abstractions.CredentialSource\nMicrosoft.Identity.Web.OidcFic.OidcIdpSignedAssertionLoader.LoadIfNeededAsync(Microsoft.Identity.Abstractions.CredentialDescription! credentialDescription, Microsoft.Identity.Abstractions.CredentialSourceLoaderParameters? parameters = null) -> System.Threading.Tasks.Task!\nMicrosoft.Identity.Web.OidcFic.OidcIdpSignedAssertionLoader.Name.get -> string!\nMicrosoft.Identity.Web.OidcFic.OidcIdpSignedAssertionLoader.OidcIdpSignedAssertionLoader(Microsoft.Extensions.Logging.ILogger<Microsoft.Identity.Web.OidcFic.OidcIdpSignedAssertionLoader!>! logger, Microsoft.Extensions.Options.IOptionsMonitor<Microsoft.Identity.Abstractions.MicrosoftIdentityApplicationOptions!>! options, Microsoft.Extensions.Configuration.IConfiguration! configuration, Microsoft.Identity.Abstractions.ITokenAcquirerFactory! tokenAcquirerFactory) -> void\n```\n\n----------------------------------------\n\nTITLE: Generic Downstream Web API Call Extensions\nDESCRIPTION: Extension methods for making typed HTTP requests to downstream web APIs. Supports GET, POST, and PUT operations with optional user context and authentication scheme overrides.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net7.0/PublicAPI.Shipped.txt#2025-04-23_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.DownstreamWebApiGenericExtensions.CallWebApiForUserAsync<TOutput>(this Microsoft.Identity.Web.IDownstreamWebApi! downstreamWebApi, string! serviceName, System.Action<Microsoft.Identity.Web.DownstreamWebApiOptions!>? downstreamWebApiOptionsOverride = null, System.Security.Claims.ClaimsPrincipal? user = null, string? authenticationScheme = null) -> System.Threading.Tasks.Task<TOutput?>!\nstatic Microsoft.Identity.Web.DownstreamWebApiGenericExtensions.GetForUserAsync<TOutput>(this Microsoft.Identity.Web.IDownstreamWebApi! downstreamWebApi, string! serviceName, string! relativePath, System.Action<Microsoft.Identity.Web.DownstreamWebApiOptions!>? downstreamWebApiOptionsOverride = null, System.Security.Claims.ClaimsPrincipal? user = null, string? authenticationScheme = null) -> System.Threading.Tasks.Task<TOutput?>!\n```\n\n----------------------------------------\n\nTITLE: Configuring Microsoft Graph Beta Service Extensions in C#\nDESCRIPTION: Extension methods for IServiceCollection that add Microsoft Graph Beta API client services. Provides three overloads: basic registration, configuration-based setup, and delegate-based configuration.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.GraphServiceClientBeta/PublicAPI/net6.0/PublicAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n#nullable enable\nMicrosoft.Identity.Web.GraphBetaServiceCollectionExtensions\nstatic Microsoft.Identity.Web.GraphBetaServiceCollectionExtensions.AddMicrosoftGraphBeta(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!\nstatic Microsoft.Identity.Web.GraphBetaServiceCollectionExtensions.AddMicrosoftGraphBeta(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, Microsoft.Extensions.Configuration.IConfiguration! configurationSection) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!\nstatic Microsoft.Identity.Web.GraphBetaServiceCollectionExtensions.AddMicrosoftGraphBeta(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, System.Action<Microsoft.Identity.Web.GraphServiceClientOptions!>! configureMicrosoftGraphOptions) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!\n```\n\n----------------------------------------\n\nTITLE: Verifying Accepted Scopes in HttpContext - Microsoft.Identity.Web - C#\nDESCRIPTION: VerifyUserHasAnyAcceptedScope is an extension that validates whether the current user holds any of the provided accepted scopes. It operates on HttpContext, accepts a params array of scopes, and throws exceptions if none are found, enforcing scope-based access at runtime. This is typically used within API controllers or middleware. Depends on Microsoft.Identity.Web.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net9.0/PublicAPI.Shipped.txt#2025-04-23_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Identity.Web.Resource.ScopesRequiredHttpContextExtensions.VerifyUserHasAnyAcceptedScope(this Microsoft.AspNetCore.Http.HttpContext! context, params string![]! acceptedScopes) -> void\n```\n\n----------------------------------------\n\nTITLE: Configuring Microsoft Identity Web API Authentication with Configuration Sections\nDESCRIPTION: This snippet shows how to add Microsoft Identity Web API authentication using specific configuration sections from appsettings.json. It allows for more targeted configuration by specifying the exact section name to use.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.Diagnostics/PublicAPI/net9.0/PublicAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddMicrosoftIdentityWebApiAuthentication(Configuration, \"AzureAd\");\n```\n\n----------------------------------------\n\nTITLE: Adding Downstream API with Lambda Configuration in C#\nDESCRIPTION: This method adds a downstream API service to the dependency injection container using a lambda expression for configuration. It allows for more programmatic configuration of the DownstreamApiOptions.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.DownstreamApi/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.DownstreamApiExtensions.AddDownstreamApi(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, string! serviceName, System.Action<Microsoft.Identity.Abstractions.DownstreamApiOptions!>! configureOptions) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!\n```\n\n----------------------------------------\n\nTITLE: Adding Scope or App Permission Authorization - Microsoft.Identity.Web - C#\nDESCRIPTION: AddRequiredScopeOrAppPermissionAuthorization adds the infrastructure required for both scope-based and app-permission-based authorization to the ASP.NET Core service collection. Register this via IServiceCollection to prepare APIs for hybrid token validation scenarios involving either delegated (user) or application permissions. Requires Microsoft.Identity.Web and Microsoft.Extensions.DependencyInjection.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net9.0/PublicAPI.Shipped.txt#2025-04-23_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Identity.Web.RequiredScopeOrAppPermissionExtensions.AddRequiredScopeOrAppPermissionAuthorization(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!\n```\n\n----------------------------------------\n\nTITLE: Configuring Single-Tenant Azure AD Authentication in .NET\nDESCRIPTION: Code snippet showing how to configure Azure AD authentication for a single tenant organization within a .NET application. It uses the AddMicrosoftIdentityWebApi method and configures the application to accept tokens from only one Azure AD tenant with specific options.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.Azure/PublicAPI.Unshipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddMicrosoftIdentityWebApi(Configuration)\n        .EnableTokenAcquisitionToCallDownstreamApi()\n            .AddMicrosoftGraph(Configuration.GetSection(\"DownstreamApi\"))\n            .AddInMemoryTokenCaches();\n```\n\n----------------------------------------\n\nTITLE: Microsoft Graph Integration Extensions in C#\nDESCRIPTION: Extension methods for configuring Microsoft Graph integration in web applications. Includes methods for setting up Graph client with various authentication options and configurations.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.MicrosoftGraph/PublicAPI/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.MicrosoftGraphExtensions.AddMicrosoftGraph(this Microsoft.Identity.Web.MicrosoftIdentityAppCallsWebApiAuthenticationBuilder! builder, Microsoft.Extensions.Configuration.IConfigurationSection! configurationSection) -> Microsoft.Identity.Web.MicrosoftIdentityAppCallsWebApiAuthenticationBuilder!\nstatic Microsoft.Identity.Web.MicrosoftGraphExtensions.AddMicrosoftGraph(this Microsoft.Identity.Web.MicrosoftIdentityAppCallsWebApiAuthenticationBuilder! builder, string! graphBaseUrl = \"https://graph.microsoft.com/v1.0\", string! defaultScopes = \"user.read\") -> Microsoft.Identity.Web.MicrosoftIdentityAppCallsWebApiAuthenticationBuilder!\n```\n\n----------------------------------------\n\nTITLE: Deserialization Helper Methods for DownstreamApi - Microsoft Identity Web - C#\nDESCRIPTION: Static async methods for reading and deserializing HTTP API responses using System.Text.Json. Optional JsonTypeInfo parameter enables custom JSON polymorphic or type-safe parsing. Dependencies include HttpResponseMessage, DownstreamApiOptions, and System.Text.Json. Returns Task<TOutput?>, allowing null outputs if deserialization fails or response is empty.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.DownstreamApi/PublicAPI/net9.0/InternalAPI.Shipped.txt#2025-04-23_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Identity.Web.DownstreamApi.DeserializeOutputAsync<TOutput>(System.Net.Http.HttpResponseMessage! response, Microsoft.Identity.Abstractions.DownstreamApiOptions! effectiveOptions) -> System.Threading.Tasks.Task<TOutput?>!\n```\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Identity.Web.DownstreamApi.DeserializeOutputAsync<TOutput>(System.Net.Http.HttpResponseMessage! response, Microsoft.Identity.Abstractions.DownstreamApiOptions! effectiveOptions, System.Text.Json.Serialization.Metadata.JsonTypeInfo<TOutput!>! outputJsonTypeInfo) -> System.Threading.Tasks.Task<TOutput?>!\n```\n\n----------------------------------------\n\nTITLE: Calling API for User in C#\nDESCRIPTION: Methods for calling downstream APIs on behalf of a user, with support for different input and output types and user claims.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.DownstreamApi/PublicAPI/net472/InternalAPI.Shipped.txt#2025-04-23_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.DownstreamApi.CallApiForUserAsync(string? serviceName, System.Action<Microsoft.Identity.Abstractions.DownstreamApiOptions!>? downstreamApiOptionsOverride = null, System.Security.Claims.ClaimsPrincipal? user = null, System.Net.Http.HttpContent? content = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage!>!\n\nMicrosoft.Identity.Web.DownstreamApi.CallApiForUserAsync<TInput, TOutput>(string? serviceName, TInput input, System.Action<Microsoft.Identity.Abstractions.DownstreamApiOptions!>? downstreamApiOptionsOverride = null, System.Security.Claims.ClaimsPrincipal? user = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TOutput?>!\n\nMicrosoft.Identity.Web.DownstreamApi.CallApiForUserAsync<TOutput>(string? serviceName, System.Action<Microsoft.Identity.Abstractions.DownstreamApiOptions!>? downstreamApiOptionsOverride = null, System.Security.Claims.ClaimsPrincipal? user = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TOutput?>!\n```\n\n----------------------------------------\n\nTITLE: Service Registration and Configuration\nDESCRIPTION: Extension methods for registering downstream API services with dependency injection. Includes methods for configuring service lifetime and general registration.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.DownstreamApi/PublicAPI/net462/InternalAPI.Shipped.txt#2025-04-23_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.DownstreamApiExtensions.AddDownstreamApiWithLifetime(Microsoft.Extensions.DependencyInjection.IServiceCollection! services, Microsoft.Extensions.DependencyInjection.ServiceLifetime lifetime) -> void\n\nstatic Microsoft.Identity.Web.DownstreamApiExtensions.RegisterDownstreamApi(Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> void\n```\n\n----------------------------------------\n\nTITLE: Request Options Extension Methods\nDESCRIPTION: Extension methods for configuring request options including authentication, scopes, and user context.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.GraphServiceClient/PublicAPI/net472/PublicAPI.Shipped.txt#2025-04-23_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.RequestOptionsExtension.WithAppOnly(this System.Collections.Generic.IList<Microsoft.Kiota.Abstractions.IRequestOption!>! options, bool appOnly = true, string? tenant = null) -> System.Collections.Generic.IList<Microsoft.Kiota.Abstractions.IRequestOption!>!\nstatic Microsoft.Identity.Web.RequestOptionsExtension.WithAuthenticationOptions(this System.Collections.Generic.IList<Microsoft.Kiota.Abstractions.IRequestOption!>! options, Microsoft.Identity.Web.GraphAuthenticationOptions! optionsValue) -> System.Collections.Generic.IList<Microsoft.Kiota.Abstractions.IRequestOption!>!\nstatic Microsoft.Identity.Web.RequestOptionsExtension.WithAuthenticationOptions(this System.Collections.Generic.IList<Microsoft.Kiota.Abstractions.IRequestOption!>! options, System.Action<Microsoft.Identity.Web.GraphAuthenticationOptions!>! optionsValue) -> System.Collections.Generic.IList<Microsoft.Kiota.Abstractions.IRequestOption!>!\nstatic Microsoft.Identity.Web.RequestOptionsExtension.WithScopes(this System.Collections.Generic.IList<Microsoft.Kiota.Abstractions.IRequestOption!>! options, params string![]! scopes) -> System.Collections.Generic.IList<Microsoft.Kiota.Abstractions.IRequestOption!>!\nstatic Microsoft.Identity.Web.RequestOptionsExtension.WithUser(this System.Collections.Generic.IList<Microsoft.Kiota.Abstractions.IRequestOption!>! options, System.Security.Claims.ClaimsPrincipal! user) -> System.Collections.Generic.IList<Microsoft.Kiota.Abstractions.IRequestOption!>!\n```\n\n----------------------------------------\n\nTITLE: Request Options Extension Methods\nDESCRIPTION: Extension methods for configuring request options with authentication settings, scopes, and user context.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.GraphServiceClient/PublicAPI/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.RequestOptionsExtension.WithAppOnly(this System.Collections.Generic.IList<Microsoft.Kiota.Abstractions.IRequestOption!>! options, bool appOnly = true, string? tenant = null) -> System.Collections.Generic.IList<Microsoft.Kiota.Abstractions.IRequestOption!>!\nstatic Microsoft.Identity.Web.RequestOptionsExtension.WithAuthenticationOptions(this System.Collections.Generic.IList<Microsoft.Kiota.Abstractions.IRequestOption!>! options, Microsoft.Identity.Web.GraphAuthenticationOptions! optionsValue) -> System.Collections.Generic.IList<Microsoft.Kiota.Abstractions.IRequestOption!>!\nstatic Microsoft.Identity.Web.RequestOptionsExtension.WithScopes(this System.Collections.Generic.IList<Microsoft.Kiota.Abstractions.IRequestOption!>! options, params string![]! scopes) -> System.Collections.Generic.IList<Microsoft.Kiota.Abstractions.IRequestOption!>!\n```\n\n----------------------------------------\n\nTITLE: Base64 Certificate Loading Methods in C#\nDESCRIPTION: Static methods for loading X509 certificates from base64 encoded strings in Microsoft Identity Web. These methods support loading certificates with or without a password and configuring storage flags.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.Certificate/InternalAPI.Shipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.Base64EncodedCertificateLoader.LoadFromBase64Encoded(string! certificateBase64, string! password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags x509KeyStorageFlags) -> System.Security.Cryptography.X509Certificates.X509Certificate2!\nstatic Microsoft.Identity.Web.Base64EncodedCertificateLoader.LoadFromBase64Encoded(string! certificateBase64, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags x509KeyStorageFlags) -> System.Security.Cryptography.X509Certificates.X509Certificate2!\n```\n\n----------------------------------------\n\nTITLE: Defining MicrosoftIdentityOptions Properties and Constructor in C#\nDESCRIPTION: Defines the `MicrosoftIdentityOptions` class, which holds configuration settings for Microsoft Identity Web. Properties include settings for client certificates, client credentials, managed identity usage, Azure AD B2C user flows (Default, Edit Profile, Reset Password), instance/domain details, error paths, extra query parameters, and flags like `AllowWebApiToBeAuthorizedByACL` and `LegacyCacheCompatibilityEnabled`. Includes a default constructor.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.TokenAcquisition/PublicAPI/net462/PublicAPI.Shipped.txt#2025-04-23_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Identity.Web.MicrosoftIdentityOptions\nMicrosoft.Identity.Web.MicrosoftIdentityOptions.AllowWebApiToBeAuthorizedByACL.get -> bool\nMicrosoft.Identity.Web.MicrosoftIdentityOptions.AllowWebApiToBeAuthorizedByACL.set -> void\nMicrosoft.Identity.Web.MicrosoftIdentityOptions.ClientCertificates.get -> System.Collections.Generic.IEnumerable<Microsoft.Identity.Web.CertificateDescription!>?\nMicrosoft.Identity.Web.MicrosoftIdentityOptions.ClientCertificates.set -> void\nMicrosoft.Identity.Web.MicrosoftIdentityOptions.ClientCredentials.get -> System.Collections.Generic.IEnumerable<Microsoft.Identity.Abstractions.CredentialDescription!>?\nMicrosoft.Identity.Web.MicrosoftIdentityOptions.ClientCredentials.set -> void\nMicrosoft.Identity.Web.MicrosoftIdentityOptions.ClientCredentialsUsingManagedIdentity.get -> Microsoft.Identity.Web.CertificatelessOptions?\nMicrosoft.Identity.Web.MicrosoftIdentityOptions.ClientCredentialsUsingManagedIdentity.set -> void\nMicrosoft.Identity.Web.MicrosoftIdentityOptions.DefaultUserFlow.get -> string?\nMicrosoft.Identity.Web.MicrosoftIdentityOptions.Domain.get -> string?\nMicrosoft.Identity.Web.MicrosoftIdentityOptions.Domain.set -> void\nMicrosoft.Identity.Web.MicrosoftIdentityOptions.EditProfilePolicyId.get -> string?\nMicrosoft.Identity.Web.MicrosoftIdentityOptions.EditProfilePolicyId.set -> void\nMicrosoft.Identity.Web.MicrosoftIdentityOptions.ErrorPath.get -> string?\nMicrosoft.Identity.Web.MicrosoftIdentityOptions.ErrorPath.set -> void\nMicrosoft.Identity.Web.MicrosoftIdentityOptions.ExtraQueryParameters.get -> System.Collections.Generic.IDictionary<string!, string!>?\nMicrosoft.Identity.Web.MicrosoftIdentityOptions.ExtraQueryParameters.set -> void\nMicrosoft.Identity.Web.MicrosoftIdentityOptions.Instance.get -> string!\nMicrosoft.Identity.Web.MicrosoftIdentityOptions.Instance.set -> void\nMicrosoft.Identity.Web.MicrosoftIdentityOptions.LegacyCacheCompatibilityEnabled.get -> bool\nMicrosoft.Identity.Web.MicrosoftIdentityOptions.LegacyCacheCompatibilityEnabled.set -> void\nMicrosoft.Identity.Web.MicrosoftIdentityOptions.MicrosoftIdentityOptions() -> void\nMicrosoft.Identity.Web.MicrosoftIdentityOptions.ResetPasswordPath.get -> string?\nMicrosoft.Identity.Web.MicrosoftIdentityOptions.ResetPasswordPath.set -> void\nMicrosoft.Identity.Web.MicrosoftIdentityOptions.ResetPasswordPolicyId.get -> string?\nMicrosoft.Identity.Web.MicrosoftIdentityOptions.ResetPasswordPolicyId.set -> void\n```\n\n----------------------------------------\n\nTITLE: Adding Downstream API to MicrosoftIdentityAppCallsWebApiAuthenticationBuilder in C#\nDESCRIPTION: Extension methods for MicrosoftIdentityAppCallsWebApiAuthenticationBuilder to add a downstream API. These methods allow configuring the API using either an IConfiguration object or an Action delegate.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.DownstreamApi/PublicAPI/net6.0/PublicAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.DownstreamApiExtensions.AddDownstreamApi(this Microsoft.Identity.Web.MicrosoftIdentityAppCallsWebApiAuthenticationBuilder! builder, string! serviceName, Microsoft.Extensions.Configuration.IConfiguration! configuration) -> Microsoft.Identity.Web.MicrosoftIdentityAppCallsWebApiAuthenticationBuilder!\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.DownstreamApiExtensions.AddDownstreamApi(this Microsoft.Identity.Web.MicrosoftIdentityAppCallsWebApiAuthenticationBuilder! builder, string! serviceName, System.Action<Microsoft.Identity.Abstractions.DownstreamApiOptions!>! configureOptions) -> Microsoft.Identity.Web.MicrosoftIdentityAppCallsWebApiAuthenticationBuilder!\n```\n\n----------------------------------------\n\nTITLE: Implementing TokenAcquisitionAppTokenCredential Class in C#\nDESCRIPTION: This class handles token acquisition for app authentication. It includes a constructor and overrides for GetToken and GetTokenAsync methods.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net9.0/PublicAPI.Shipped.txt#2025-04-23_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.TokenAcquisitionAppTokenCredential\nMicrosoft.Identity.Web.TokenAcquisitionAppTokenCredential.TokenAcquisitionAppTokenCredential(Microsoft.Identity.Web.ITokenAcquisition! tokenAcquisition) -> void\noverride Microsoft.Identity.Web.TokenAcquisitionAppTokenCredential.GetToken(Azure.Core.TokenRequestContext requestContext, System.Threading.CancellationToken cancellationToken) -> Azure.Core.AccessToken\noverride Microsoft.Identity.Web.TokenAcquisitionAppTokenCredential.GetTokenAsync(Azure.Core.TokenRequestContext requestContext, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<Azure.Core.AccessToken>\n```\n\n----------------------------------------\n\nTITLE: Adding Microsoft Graph Support (Action Config) in C#\nDESCRIPTION: An extension method for `MicrosoftIdentityAppCallsWebApiAuthenticationBuilder` that adds Microsoft Graph support, allowing customization of `MicrosoftGraphOptions` via a configuration action.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.MicrosoftGraph/PublicAPI/net6.0/PublicAPI.Shipped.txt#2025-04-23_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Identity.Web.MicrosoftGraphExtensions.AddMicrosoftGraph(this Microsoft.Identity.Web.MicrosoftIdentityAppCallsWebApiAuthenticationBuilder! builder, System.Action<Microsoft.Identity.Web.MicrosoftGraphOptions!>! configureMicrosoftGraphOptions) -> Microsoft.Identity.Web.MicrosoftIdentityAppCallsWebApiAuthenticationBuilder!\n```\n\n----------------------------------------\n\nTITLE: Generic Downstream Web API Call Extensions\nDESCRIPTION: Extension methods for making typed HTTP requests to downstream web APIs. Includes methods for GET, POST, and PUT operations with support for input/output types and user authentication.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net9.0/PublicAPI.Shipped.txt#2025-04-23_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.DownstreamWebApiGenericExtensions.CallWebApiForUserAsync<TOutput>(this Microsoft.Identity.Web.IDownstreamWebApi! downstreamWebApi, string! serviceName, System.Action<Microsoft.Identity.Web.DownstreamWebApiOptions!>? downstreamWebApiOptionsOverride = null, System.Security.Claims.ClaimsPrincipal? user = null, string? authenticationScheme = null) -> System.Threading.Tasks.Task<TOutput?>!\n\nstatic Microsoft.Identity.Web.DownstreamWebApiGenericExtensions.GetForUserAsync<TOutput>(this Microsoft.Identity.Web.IDownstreamWebApi! downstreamWebApi, string! serviceName, string! relativePath, System.Action<Microsoft.Identity.Web.DownstreamWebApiOptions!>? downstreamWebApiOptionsOverride = null, System.Security.Claims.ClaimsPrincipal? user = null, string? authenticationScheme = null) -> System.Threading.Tasks.Task<TOutput?>!\n```\n\n----------------------------------------\n\nTITLE: Adding Required Scope or App Permission Authorization Services in C#\nDESCRIPTION: This extension method registers the necessary services with the dependency injection container (IServiceCollection) to enable authorization based on either required scopes or required app permissions/roles using Microsoft.Identity.Web.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net6.0/PublicAPI.Shipped.txt#2025-04-23_snippet_21\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Identity.Web.RequiredScopeOrAppPermissionExtensions.AddRequiredScopeOrAppPermissionAuthorization(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!\n```\n\n----------------------------------------\n\nTITLE: Implementing GraphAuthenticationProvider in C#\nDESCRIPTION: Defines the GraphAuthenticationProvider class with methods for authenticating requests and a constructor for initialization.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.GraphServiceClient/PublicAPI/net9.0/InternalAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.GraphAuthenticationProvider.AuthenticateRequestAsync(Microsoft.Kiota.Abstractions.RequestInformation! request, System.Collections.Generic.Dictionary<string!, object!>? additionalAuthenticationContext = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.GraphAuthenticationProvider.GraphAuthenticationProvider(Microsoft.Identity.Abstractions.IAuthorizationHeaderProvider! authorizationHeaderProvider, Microsoft.Identity.Web.GraphServiceClientOptions! defaultAuthenticationOptions) -> void\n```\n\n----------------------------------------\n\nTITLE: Retrieving Current User's Profile with Microsoft Graph\nDESCRIPTION: C# code demonstrating how to use the GraphServiceClient to retrieve the current user's profile from Microsoft Graph.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.GraphServiceClient/Readme.md#2025-04-23_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nvar user = await _graphServiceClient.Me.GetAsync();\n```\n\n----------------------------------------\n\nTITLE: Graph Service Collection Extension Methods\nDESCRIPTION: Extension methods for IServiceCollection to add Microsoft Graph integration with various configuration options.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.GraphServiceClient/PublicAPI/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.GraphServiceCollectionExtensions.AddMicrosoftGraph(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!\nstatic Microsoft.Identity.Web.GraphServiceCollectionExtensions.AddMicrosoftGraph(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, Microsoft.Extensions.Configuration.IConfiguration! configurationSection) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!\nstatic Microsoft.Identity.Web.GraphServiceCollectionExtensions.AddMicrosoftGraph(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, System.Action<Microsoft.Identity.Web.GraphServiceClientOptions!>! configureMicrosoftGraphOptions) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!\n```\n\n----------------------------------------\n\nTITLE: Token Acquisition Authentication Provider Class Definition\nDESCRIPTION: Defines the main authentication provider class with methods for request authentication and initialization\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.MicrosoftGraphBeta/PublicAPI/netstandard2.0/InternalAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nclass TokenAcquisitionAuthenticationProvider\n{\n    public Task AuthenticateRequestAsync(HttpRequestMessage request);\n    public TokenAcquisitionAuthenticationProvider(IAuthorizationHeaderProvider authorizationHeaderProvider, TokenAcquisitionAuthenticationProviderOption options);\n}\n```\n\n----------------------------------------\n\nTITLE: Graph Service Client Options Class Definition\nDESCRIPTION: Class definition for GraphServiceClientOptions with properties for scopes and user configuration.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.GraphServiceClient/PublicAPI/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.GraphServiceClientOptions\nMicrosoft.Identity.Web.GraphServiceClientOptions.GraphServiceClientOptions() -> void\nMicrosoft.Identity.Web.GraphServiceClientOptions.Scopes.get -> System.Collections.Generic.IEnumerable<string!>!\nMicrosoft.Identity.Web.GraphServiceClientOptions.Scopes.set -> void\nMicrosoft.Identity.Web.GraphServiceClientOptions.User.get -> System.Security.Claims.ClaimsPrincipal?\nMicrosoft.Identity.Web.GraphServiceClientOptions.User.set -> void\n```\n\n----------------------------------------\n\nTITLE: Adding Microsoft Graph Support (Config Section) in C#\nDESCRIPTION: An extension method for `MicrosoftIdentityAppCallsWebApiAuthenticationBuilder` that adds Microsoft Graph support, configuring it from a specified `IConfigurationSection`. This is typically used in web APIs calling downstream APIs.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.MicrosoftGraph/PublicAPI/net6.0/PublicAPI.Shipped.txt#2025-04-23_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Identity.Web.MicrosoftGraphExtensions.AddMicrosoftGraph(this Microsoft.Identity.Web.MicrosoftIdentityAppCallsWebApiAuthenticationBuilder! builder, Microsoft.Extensions.Configuration.IConfigurationSection! configurationSection) -> Microsoft.Identity.Web.MicrosoftIdentityAppCallsWebApiAuthenticationBuilder!\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication Builders - Microsoft Identity Web - C#\nDESCRIPTION: Specifies custom builder types to facilitate registration of authentication services within ASP.NET Core dependency injection, including methods for configuring token caches and associating configuration sections. Builders like MicrosoftIdentityAppCallsWebApiAuthenticationBuilder and MicrosoftIdentityBaseAuthenticationBuilder are used to chain setup methods such as AddDistributedTokenCaches and AddInMemoryTokenCaches, and expose configuration and services properties for further customization. Required dependencies include Microsoft.Extensions.DependencyInjection and Configuration namespaces; builders are constructed with IServiceCollection and optional IConfigurationSection.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.TokenAcquisition/PublicAPI/net472/PublicAPI.Shipped.txt#2025-04-23_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Identity.Web.MicrosoftIdentityAppCallsWebApiAuthenticationBuilder\nMicrosoft.Identity.Web.MicrosoftIdentityAppCallsWebApiAuthenticationBuilder.AddDistributedTokenCaches() -> Microsoft.Identity.Web.MicrosoftIdentityAppCallsWebApiAuthenticationBuilder!\nMicrosoft.Identity.Web.MicrosoftIdentityAppCallsWebApiAuthenticationBuilder.AddInMemoryTokenCaches(System.Action<Microsoft.Identity.Web.TokenCacheProviders.InMemory.MsalMemoryTokenCacheOptions!>? configureOptions = null, System.Action<Microsoft.Extensions.Caching.Memory.MemoryCacheOptions!>? memoryCacheOptions = null) -> Microsoft.Identity.Web.MicrosoftIdentityAppCallsWebApiAuthenticationBuilder!\nMicrosoft.Identity.Web.MicrosoftIdentityBaseAuthenticationBuilder\nMicrosoft.Identity.Web.MicrosoftIdentityBaseAuthenticationBuilder.ConfigurationSection.get -> Microsoft.Extensions.Configuration.IConfigurationSection?\nMicrosoft.Identity.Web.MicrosoftIdentityBaseAuthenticationBuilder.ConfigurationSection.set -> void\nMicrosoft.Identity.Web.MicrosoftIdentityBaseAuthenticationBuilder.MicrosoftIdentityBaseAuthenticationBuilder(Microsoft.Extensions.DependencyInjection.IServiceCollection! services, Microsoft.Extensions.Configuration.IConfigurationSection? configurationSection = null) -> void\nMicrosoft.Identity.Web.MicrosoftIdentityBaseAuthenticationBuilder.Services.get -> Microsoft.Extensions.DependencyInjection.IServiceCollection!\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Microsoft Identity Web Authentication in ASP.NET Core\nDESCRIPTION: This snippet demonstrates how to configure Microsoft Identity Web authentication in an ASP.NET Core application. It sets up authentication services, configures options for Azure AD, and adds token acquisition for Microsoft Graph API.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net462/PublicAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n#nullable enable\n\nusing System;\nusing Microsoft.AspNetCore.Authentication.OpenIdConnect;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Identity.Web;\n\nnamespace YourNamespace\n{\n    public static class MicrosoftIdentityWebExtensions\n    {\n        public static IServiceCollection AddMicrosoftIdentityWebAppAuthentication(\n            this IServiceCollection services,\n            IConfiguration configuration,\n            string configSectionName = \"AzureAd\",\n            string schemeForV1Endpoints = OpenIdConnectDefaults.AuthenticationScheme,\n            Action<MicrosoftIdentityOptions>? configureMicrosoftIdentityOptions = null,\n            Action<OpenIdConnectOptions>? configureOpenIdConnectOptions = null)\n        {\n            services.AddAuthentication(OpenIdConnectDefaults.AuthenticationScheme)\n                .AddMicrosoftIdentityWebApp(options =>\n                {\n                    configuration.Bind(configSectionName, options);\n\n                    options.SignInScheme = schemeForV1Endpoints;\n\n                    configureMicrosoftIdentityOptions?.Invoke(options);\n                }, configureOpenIdConnectOptions)\n                .EnableTokenAcquisitionToCallDownstreamApi()\n                .AddMicrosoftGraph(configuration.GetSection(\"MicrosoftGraph\"));\n\n            return services;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Downstream APIs from Configuration Section in C#\nDESCRIPTION: This method adds multiple downstream API services to the dependency injection container using a configuration section. It allows for bulk configuration of multiple downstream APIs from a single configuration source.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.DownstreamApi/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.DownstreamApiExtensions.AddDownstreamApis(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, Microsoft.Extensions.Configuration.IConfigurationSection! configurationSection) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!\n```\n\n----------------------------------------\n\nTITLE: Adding TodoList Service in ConfigureServices\nDESCRIPTION: This code registers the TodoList service implementation in the application's service collection, making it available for dependency injection throughout the application.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/tests/DevApps/B2CWebAppCallsWebApi/README.md#2025-04-23_snippet_4\n\nLANGUAGE: CSharp\nCODE:\n```\n// Add APIs\nservices.AddTodoListService(Configuration);\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure AD B2C Options in appsettings.json (JSON)\nDESCRIPTION: This snippet defines the required Azure AD B2C configuration in the appsettings.json file for an ASP.NET Core web application. Developers must fill in values for Instance, ClientId, Domain, CallbackPath, SignedOutCallbackPath, and SignUpSignInPolicyId relevant to their Azure AD B2C tenant setup. These settings are crucial for enabling authentication and proper redirect behavior during sign-in and sign-out flows. Inputs are provided as string values, and correct replacement of placeholders is required for successful authentication; the structure must adhere to JSON format.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/tests/DevApps/B2CWebAppCallsWebApi/README.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"AzureAdB2C\\\": {\\n    \\\"Instance\\\": \\\"https://<your-tenant-name>.b2clogin.com\\\",\\n    \\\"ClientId\\\": \\\"<web-app-application-id>\\\",\\n    \\\"Domain\\\": \\\"<your-b2c-domain>\\\",\\n    \\\"CallbackPath\\\": \\\"/signin/B2C_1_sign_up_in\\\",\\n    \\\"SignedOutCallbackPath\\\": \\\"/signout/B2C_1_sign_up_in\\\",\\n    \\\"SignUpSignInPolicyId\\\": \\\"<your-sign-up-in-policy>\\\"\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Authorization Handlers for Scopes and App Permissions\nDESCRIPTION: Implements authorization handlers and options for validating access based on OAuth scopes and application permissions, with configuration options for ASP.NET Core authorization policies.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net7.0/InternalAPI.Shipped.txt#2025-04-23_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Identity.Web.RequireScopeOptions\nMicrosoft.Identity.Web.RequireScopeOptions.PostConfigure(string? name, Microsoft.AspNetCore.Authorization.AuthorizationOptions! options) -> void\nMicrosoft.Identity.Web.RequireScopeOptions.RequireScopeOptions() -> void\nMicrosoft.Identity.Web.RequireScopeOrAppPermissionOptions\nMicrosoft.Identity.Web.RequireScopeOrAppPermissionOptions.PostConfigure(string? name, Microsoft.AspNetCore.Authorization.AuthorizationOptions! options) -> void\nMicrosoft.Identity.Web.RequireScopeOrAppPermissionOptions.RequireScopeOrAppPermissionOptions() -> void\nMicrosoft.Identity.Web.ScopeAuthorizationHandler\nMicrosoft.Identity.Web.ScopeAuthorizationHandler.ScopeAuthorizationHandler(Microsoft.Extensions.Configuration.IConfiguration! configuration) -> void\nMicrosoft.Identity.Web.ScopeOrAppPermissionAuthorizationHandler\nMicrosoft.Identity.Web.ScopeOrAppPermissionAuthorizationHandler.ScopeOrAppPermissionAuthorizationHandler(Microsoft.Extensions.Configuration.IConfiguration! configuration) -> void\n```\n\n----------------------------------------\n\nTITLE: Adding Microsoft Graph Support (URL/Scopes) in C#\nDESCRIPTION: An extension method for `MicrosoftIdentityAppCallsWebApiAuthenticationBuilder` that adds Microsoft Graph support with explicitly provided base URL and default scopes. Useful for simple configurations without a dedicated configuration section.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.MicrosoftGraph/PublicAPI/net6.0/PublicAPI.Shipped.txt#2025-04-23_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Identity.Web.MicrosoftGraphExtensions.AddMicrosoftGraph(this Microsoft.Identity.Web.MicrosoftIdentityAppCallsWebApiAuthenticationBuilder! builder, string! graphBaseUrl = \"https://graph.microsoft.com/v1.0\", string! defaultScopes = \"user.read\") -> Microsoft.Identity.Web.MicrosoftIdentityAppCallsWebApiAuthenticationBuilder!\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure AD Authentication with AzureAdOptions Class\nDESCRIPTION: Code showing how to configure Azure AD authentication using a custom AzureAdOptions class to centralize configuration values. This approach provides strongly-typed configuration binding and easier management of authentication properties.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.Azure/PublicAPI.Unshipped.txt#2025-04-23_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nservices.Configure<AzureAdOptions>(Configuration.GetSection(\"AzureAd\"));\nvar azureAdOptions = new AzureAdOptions();\nConfiguration.Bind(\"AzureAd\", azureAdOptions);\nazureAdOptions.TenantId = \"common\";\n\nservices.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)\n    .AddMicrosoftIdentityWebApi(\n        azureAdOptions,\n        options => { Configuration.Bind(\"AzureAd\", options);});\n```\n\n----------------------------------------\n\nTITLE: Requesting Application Token for Graph API Calls\nDESCRIPTION: C# code demonstrating how to request an application token for calling Graph API on behalf of the application itself.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.GraphServiceClient/Readme.md#2025-04-23_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nint? appsInTenant = await _graphServiceClient.Applications.Count.GetAsync(\n                                                                   r => r.Options.WithAppOnly() );\n```\n\nLANGUAGE: csharp\nCODE:\n```\nint? appsInTenant = await _graphServiceClient.Applications.Count.GetAsync(r =>\n{\n r.Options.WithAuthenticationOptions(o =>\n {\n     o.RequestAppToken = true;\n });\n});\n```\n\n----------------------------------------\n\nTITLE: Calling API for Application in C#\nDESCRIPTION: Methods for calling downstream APIs on behalf of the application, with support for different input and output types.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.DownstreamApi/PublicAPI/net472/InternalAPI.Shipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.DownstreamApi.CallApiForAppAsync(string? serviceName, System.Action<Microsoft.Identity.Abstractions.DownstreamApiOptions!>? downstreamApiOptionsOverride = null, System.Net.Http.HttpContent? content = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage!>!\n\nMicrosoft.Identity.Web.DownstreamApi.CallApiForAppAsync<TInput, TOutput>(string? serviceName, TInput input, System.Action<Microsoft.Identity.Abstractions.DownstreamApiOptions!>? downstreamApiOptionsOverride = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TOutput?>!\n\nMicrosoft.Identity.Web.DownstreamApi.CallApiForAppAsync<TOutput>(string! serviceName, System.Action<Microsoft.Identity.Abstractions.DownstreamApiOptions!>? downstreamApiOptionsOverride = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TOutput?>!\n```\n\n----------------------------------------\n\nTITLE: TokenAcquisitionAuthenticationProviderOption Class Definition\nDESCRIPTION: Configuration options class for token acquisition authentication provider. Contains properties for authentication scheme, scopes, tenant settings, and user claims.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.MicrosoftGraph/PublicAPI/net462/InternalAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic class TokenAcquisitionAuthenticationProviderOption\n{\n    public TokenAcquisitionAuthenticationProviderOption();\n    public bool? AppOnly { get; set; }\n    public string AuthenticationScheme { get; set; }\n    public Action<AuthorizationHeaderProviderOptions> AuthorizationHeaderProviderOptions { get; set; }\n    public string[] Scopes { get; set; }\n    public string Tenant { get; set; }\n    public ClaimsPrincipal User { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Downstream API to Authentication Builder with Configuration in C#\nDESCRIPTION: Extends MicrosoftIdentityAppCallsWebApiAuthenticationBuilder to add a downstream API service using a configuration object. This method is useful when chaining authentication configuration methods.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.DownstreamApi/PublicAPI/net9.0/PublicAPI.Shipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.DownstreamApiExtensions.AddDownstreamApi(this Microsoft.Identity.Web.MicrosoftIdentityAppCallsWebApiAuthenticationBuilder! builder, string! serviceName, Microsoft.Extensions.Configuration.IConfiguration! configuration) -> Microsoft.Identity.Web.MicrosoftIdentityAppCallsWebApiAuthenticationBuilder!\n```\n\n----------------------------------------\n\nTITLE: Implementing GraphAuthenticationProvider in C#\nDESCRIPTION: Defines a GraphAuthenticationProvider class that implements request authentication for Graph API calls. It includes a method for authenticating requests and a constructor for initializing the provider.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.GraphServiceClient/PublicAPI/net6.0/InternalAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.GraphAuthenticationProvider.AuthenticateRequestAsync(Microsoft.Kiota.Abstractions.RequestInformation! request, System.Collections.Generic.Dictionary<string!, object!>? additionalAuthenticationContext = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.GraphAuthenticationProvider.GraphAuthenticationProvider(Microsoft.Identity.Abstractions.IAuthorizationHeaderProvider! authorizationHeaderProvider, Microsoft.Identity.Web.GraphServiceClientOptions! defaultAuthenticationOptions) -> void\n```\n\n----------------------------------------\n\nTITLE: Adding Graph Beta Service Client Extensions in C#\nDESCRIPTION: Extension methods for configuring Graph Beta API client integration. Provides two methods - one with default lifetime and another with configurable service lifetime for dependency injection registration.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.GraphServiceClientBeta/PublicAPI/net6.0/InternalAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.GraphBetaServiceCollectionExtensions.AddGraphBetaServiceClient(Microsoft.Extensions.DependencyInjection.IServiceCollection services) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.GraphBetaServiceCollectionExtensions.AddGraphBetaServiceClientWithLifetime(Microsoft.Extensions.DependencyInjection.IServiceCollection services, Microsoft.Extensions.DependencyInjection.ServiceLifetime lifetime) -> void\n```\n\n----------------------------------------\n\nTITLE: ICertificateLoader Interface in C#\nDESCRIPTION: Defines the interface for certificate loading in Microsoft Identity Web. Specifies the contract that certificate loaders must implement to support loading certificates from various sources.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.Certificate/PublicAPI.Shipped.txt#2025-04-23_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.ICertificateLoader\nMicrosoft.Identity.Web.ICertificateLoader.LoadIfNeeded(Microsoft.Identity.Web.CertificateDescription! certificateDescription) -> void\n```\n\n----------------------------------------\n\nTITLE: Adding Downstream API with Configuration in C#\nDESCRIPTION: This method adds a downstream API service to the dependency injection container using a configuration object. It takes the service name and an IConfiguration instance as parameters.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.DownstreamApi/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.DownstreamApiExtensions.AddDownstreamApi(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, string! serviceName, Microsoft.Extensions.Configuration.IConfiguration! configuration) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!\n```\n\n----------------------------------------\n\nTITLE: Implementing GraphServiceCollectionExtensions in C#\nDESCRIPTION: Extension methods for adding Microsoft Graph services to the dependency injection container with optional configuration.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.MicrosoftGraph/PublicAPI/net472/PublicAPI.Shipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic static class GraphServiceCollectionExtensions\n{\n    public static IServiceCollection AddMicrosoftGraph(this IServiceCollection services);\n    public static IServiceCollection AddMicrosoftGraph(this IServiceCollection services, Action<MicrosoftGraphOptions> configureMicrosoftGraphOptions);\n}\n```\n\n----------------------------------------\n\nTITLE: OwinTokenAcquisitionHost Constructor and Utility Methods\nDESCRIPTION: Constructor and utility methods for the OwinTokenAcquisitionHost class, including session management and HTTP response handling.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.OWIN/InternalAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.Hosts.OwinTokenAcquisitionHost.OwinTokenAcquisitionHost(Microsoft.Extensions.Options.IOptionsMonitor<Microsoft.Identity.Web.MicrosoftIdentityOptions!>! microsoftIdentityOptionsMonitor, Microsoft.Identity.Web.IMergedOptionsStore! mergedOptionsMonitor, Microsoft.Extensions.Options.IOptionsMonitor<Microsoft.Identity.Client.ConfidentialClientApplicationOptions!>! ccaOptionsMonitor, Microsoft.Extensions.Options.IOptionsMonitor<Microsoft.Identity.Abstractions.MicrosoftIdentityApplicationOptions!>! MicrosoftIdentityApplicationOptionsMonitor) -> void\nMicrosoft.Identity.Web.Hosts.OwinTokenAcquisitionHost.SetHttpResponse(System.Net.HttpStatusCode statusCode, string! wwwAuthenticate) -> void\nMicrosoft.Identity.Web.Hosts.OwinTokenAcquisitionHost.SetSession(string! key, string! value) -> void\n```\n\n----------------------------------------\n\nTITLE: Performing PUT Requests for App and User Contexts in C#\nDESCRIPTION: These methods execute PUT requests to downstream APIs for both app and user contexts. They support generic input and output types, and allow for custom downstream API options and cancellation tokens.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.DownstreamApi/PublicAPI/net6.0/InternalAPI.Shipped.txt#2025-04-23_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.DownstreamApi.PutForAppAsync<TInput, TOutput>(string? serviceName, TInput input, System.Action<Microsoft.Identity.Abstractions.DownstreamApiOptionsReadOnlyHttpMethod!>? downstreamApiOptionsOverride = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TOutput?>!\n\nMicrosoft.Identity.Web.DownstreamApi.PutForAppAsync<TInput>(string? serviceName, TInput input, System.Action<Microsoft.Identity.Abstractions.DownstreamApiOptionsReadOnlyHttpMethod!>? downstreamApiOptionsOverride = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!\n\nMicrosoft.Identity.Web.DownstreamApi.PutForUserAsync<TInput, TOutput>(string? serviceName, TInput input, System.Action<Microsoft.Identity.Abstractions.DownstreamApiOptionsReadOnlyHttpMethod!>? downstreamApiOptionsOverride = null, System.Security.Claims.ClaimsPrincipal? user = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TOutput?>!\n\nMicrosoft.Identity.Web.DownstreamApi.PutForUserAsync<TInput>(string? serviceName, TInput input, System.Action<Microsoft.Identity.Abstractions.DownstreamApiOptionsReadOnlyHttpMethod!>? downstreamApiOptionsOverride = null, System.Security.Claims.ClaimsPrincipal? user = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!\n```\n\n----------------------------------------\n\nTITLE: Getting GraphServiceClient in ApiController (C# Extension)\nDESCRIPTION: This static extension method retrieves an instance of the Microsoft Graph SDK's GraphServiceClient for the current ApiController. This allows easy interaction with the Microsoft Graph API using the authenticated user's identity.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.OWIN/PublicAPI.Shipped.txt#2025-04-23_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Identity.Web.ApiControllerExtensions.GetGraphServiceClient(this System.Web.Http.ApiController! _) -> Microsoft.Graph.GraphServiceClient!\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Downstream APIs from Configuration Section in C#\nDESCRIPTION: Extends IServiceCollection to add multiple downstream API services using a configuration section. This method simplifies the process of setting up multiple downstream API calls in a Microsoft Identity Web application.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.DownstreamApi/PublicAPI/net9.0/PublicAPI.Shipped.txt#2025-04-23_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.DownstreamApiExtensions.AddDownstreamApis(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, Microsoft.Extensions.Configuration.IConfigurationSection! configurationSection) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!\n```\n\n----------------------------------------\n\nTITLE: Microsoft Identity Web App Authentication Configuration\nDESCRIPTION: Extension methods for configuring Microsoft Identity Web authentication in web applications using various authentication schemes and options.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net6.0/PublicAPI.Shipped.txt#2025-04-23_snippet_14\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.MicrosoftIdentityWebAppAuthenticationBuilderExtensions.AddMicrosoftIdentityWebApp(this Microsoft.AspNetCore.Authentication.AuthenticationBuilder! builder, Microsoft.Extensions.Configuration.IConfiguration! configuration, string! configSectionName = \"AzureAd\", string! openIdConnectScheme = \"OpenIdConnect\", string? cookieScheme = \"Cookies\", bool subscribeToOpenIdConnectMiddlewareDiagnosticsEvents = false, string? displayName = null) -> Microsoft.Identity.Web.MicrosoftIdentityWebAppAuthenticationBuilderWithConfiguration!\n```\n\n----------------------------------------\n\nTITLE: Making HTTP GET Requests\nDESCRIPTION: Methods for making authenticated GET requests to downstream APIs with support for typed inputs and outputs.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.DownstreamApi/PublicAPI/net7.0/InternalAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.DownstreamApi.GetForUserAsync<TInput, TOutput>(string? serviceName, TInput input, System.Action<Microsoft.Identity.Abstractions.DownstreamApiOptionsReadOnlyHttpMethod!>? downstreamApiOptionsOverride = null, System.Security.Claims.ClaimsPrincipal? user = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TOutput?>!\n```\n\n----------------------------------------\n\nTITLE: Graph Service Collection Extensions\nDESCRIPTION: Extension methods for registering Microsoft Graph services in the dependency injection container with optional configuration.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.MicrosoftGraph/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic static class GraphServiceCollectionExtensions\n{\n    public static IServiceCollection AddMicrosoftGraph(this IServiceCollection services);\n    public static IServiceCollection AddMicrosoftGraph(this IServiceCollection services, Action<MicrosoftGraphOptions> configureMicrosoftGraphOptions);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Graph Service Client Extensions in C#\nDESCRIPTION: Provides extension methods for IServiceCollection to add Graph service client with different lifetimes. These methods facilitate the integration of Graph API client into the dependency injection container.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.GraphServiceClient/PublicAPI/net6.0/InternalAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.GraphServiceCollectionExtensions.AddGraphServiceClient(Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.GraphServiceCollectionExtensions.AddGraphServiceClientWithLifetime(Microsoft.Extensions.DependencyInjection.IServiceCollection! services, Microsoft.Extensions.DependencyInjection.ServiceLifetime lifetime) -> void\n```\n\n----------------------------------------\n\nTITLE: Injecting GraphServiceClient in Controller Constructor\nDESCRIPTION: C# code showing how to inject the GraphServiceClient into a controller's constructor for use in the controller's methods.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.GraphServiceClient/Readme.md#2025-04-23_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Graph;   \n\npublic class HomeController : Controller\n{\n    private readonly GraphServiceClient _graphServiceClient;\n    public HomeController(GraphServiceClient graphServiceClient)\n    {\n        _graphServiceClient = graphServiceClient;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Downstream API Services in C#\nDESCRIPTION: These extension methods are used to register downstream API services with the dependency injection container, allowing for customization of service lifetime.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.DownstreamApi/PublicAPI/net6.0/InternalAPI.Shipped.txt#2025-04-23_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.DownstreamApiExtensions.AddDownstreamApiWithLifetime(Microsoft.Extensions.DependencyInjection.IServiceCollection! services, Microsoft.Extensions.DependencyInjection.ServiceLifetime lifetime) -> void\n\nstatic Microsoft.Identity.Web.DownstreamApiExtensions.RegisterDownstreamApi(Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> void\n```\n\n----------------------------------------\n\nTITLE: Graph Authentication Provider Methods\nDESCRIPTION: Defines the core authentication provider class with methods for request authentication and initialization\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.GraphServiceClient/PublicAPI/net462/InternalAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n#nullable enable\nMicrosoft.Identity.Web.GraphAuthenticationProvider.AuthenticateRequestAsync(Microsoft.Kiota.Abstractions.RequestInformation! request, System.Collections.Generic.Dictionary<string!, object!>? additionalAuthenticationContext = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!\nMicrosoft.Identity.Web.GraphAuthenticationProvider.GraphAuthenticationProvider(Microsoft.Identity.Abstractions.IAuthorizationHeaderProvider! authorizationHeaderProvider, Microsoft.Identity.Web.GraphServiceClientOptions! defaultAuthenticationOptions) -> void\n```\n\n----------------------------------------\n\nTITLE: Extending Authentication Builder with AppServicesAuthentication in C#\nDESCRIPTION: This static method extends the AuthenticationBuilder to add App Services authentication. It's used to configure authentication for Azure App Services.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net7.0/PublicAPI.Shipped.txt#2025-04-23_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.AppServicesAuthenticationBuilderExtensions.AddAppServicesAuthentication(this Microsoft.AspNetCore.Authentication.AuthenticationBuilder! builder) -> Microsoft.AspNetCore.Authentication.AuthenticationBuilder!\n```\n\n----------------------------------------\n\nTITLE: Initializing Microsoft Identity Web in ASP.NET Core Program.cs\nDESCRIPTION: Example code for program.cs file showing how to initialize Microsoft Identity Web in an ASP.NET Core application. It demonstrates setting up authentication services with Microsoft Identity Web integration.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net7.0/PublicAPI.Unshipped.txt#2025-04-23_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.AspNetCore.Authentication.OpenIdConnect;\nusing Microsoft.Identity.Web;\nusing Microsoft.Identity.Web.UI;\n\nvar builder = WebApplication.CreateBuilder(args);\n\n// Add services to the container.\nbuilder.Services.AddAuthentication(OpenIdConnectDefaults.AuthenticationScheme)\n    .AddMicrosoftIdentityWebApp(builder.Configuration.GetSection(\"AzureAd\"));\nbuilder.Services.AddControllersWithViews()\n    .AddMicrosoftIdentityUI();\n\nvar app = builder.Build();\n\n// Configure the HTTP request pipeline.\nif (!app.Environment.IsDevelopment())\n{\n    app.UseExceptionHandler(\"/Home/Error\");\n    // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.\n    app.UseHsts();\n}\n\napp.UseHttpsRedirection();\napp.UseStaticFiles();\n\napp.UseRouting();\n\napp.UseAuthentication();\napp.UseAuthorization();\n\napp.MapControllerRoute(\n    name: \"default\",\n    pattern: \"{controller=Home}/{action=Index}/{id?}\");\n\napp.Run();\n```\n\n----------------------------------------\n\nTITLE: Adding OIDC FIC Signed Assertion Provider Extensions in .NET (C#)\nDESCRIPTION: This C# code snippet defines a static extension method, AddOidcFic, on IServiceCollection to register the OIDC FIC Signed Assertion Provider for dependency injection. It requires Microsoft.Extensions.DependencyInjection and may depend on specific OIDC-related providers available in your project or additional NuGet packages. The 'services' parameter must be a valid IServiceCollection instance. The method is intended for configuration in the startup or configuration phase of a .NET application using dependency injection.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.OidcFIC/PublicAPI/net7.0/PublicAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n#nullable enable\nMicrosoft.Extensions.DependencyInjection.OidcFicSignedAssertionProviderExtensions\nstatic Microsoft.Extensions.DependencyInjection.OidcFicSignedAssertionProviderExtensions.AddOidcFic(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!\n```\n\n----------------------------------------\n\nTITLE: Generic API Call Methods\nDESCRIPTION: Methods for making HTTP requests to downstream APIs with support for both app and user contexts, including generic type parameters for request/response serialization.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.DownstreamApi/PublicAPI/net462/InternalAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.DownstreamApi.CallApiAsync(Microsoft.Identity.Abstractions.DownstreamApiOptions! downstreamApiOptions, System.Security.Claims.ClaimsPrincipal? user = null, System.Net.Http.HttpContent? content = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage!>!\n```\n\n----------------------------------------\n\nTITLE: Microsoft Graph Extension Methods\nDESCRIPTION: Extension methods for adding Microsoft Graph functionality to authentication builders with various configuration options.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.GraphServiceClient/PublicAPI/net9.0/PublicAPI.Shipped.txt#2025-04-23_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.MicrosoftGraphExtensions.AddMicrosoftGraph(this Microsoft.Identity.Web.MicrosoftIdentityAppCallsWebApiAuthenticationBuilder! builder, string! graphBaseUrl = \"https://graph.microsoft.com/v1.0\", System.Collections.Generic.IEnumerable<string!>? defaultScopes = null) -> Microsoft.Identity.Web.MicrosoftIdentityAppCallsWebApiAuthenticationBuilder!\nstatic Microsoft.Identity.Web.MicrosoftGraphExtensions.AddMicrosoftGraphAppOnly(this Microsoft.Identity.Web.MicrosoftIdentityAppCallsWebApiAuthenticationBuilder! builder, System.Func<Microsoft.Kiota.Abstractions.Authentication.IAuthenticationProvider!, Microsoft.Graph.GraphServiceClient!>! graphServiceClientFactory) -> Microsoft.Identity.Web.MicrosoftIdentityAppCallsWebApiAuthenticationBuilder!\n```\n\n----------------------------------------\n\nTITLE: Specifying Authentication Scheme for Graph Requests in C#\nDESCRIPTION: An extension method for Microsoft Graph base request types. It specifies the authentication scheme (e.g., Bearer, Pop) to be used when acquiring a token for this specific request.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.MicrosoftGraph/PublicAPI/net6.0/PublicAPI.Shipped.txt#2025-04-23_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Identity.Web.BaseRequestExtensions.WithAuthenticationScheme<T>(this T baseRequest, string! authenticationScheme) -> T\n```\n\n----------------------------------------\n\nTITLE: Adding Downstream API with Configuration in C#\nDESCRIPTION: Extends IServiceCollection to add a downstream API using configuration. It takes a service name and an IConfiguration object to configure the downstream API options.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.DownstreamApi/PublicAPI/net7.0/PublicAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.DownstreamApiExtensions.AddDownstreamApi(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, string! serviceName, Microsoft.Extensions.Configuration.IConfiguration! configuration) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!\n```\n\n----------------------------------------\n\nTITLE: Configuring Protected Web API Authentication\nDESCRIPTION: Replaces default Azure AD Bearer authentication with Microsoft.Identity.Web's protected web API configuration and adds an in-memory token cache.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/tests/DevApps/B2CWebAppCallsWebApi/README.md#2025-04-23_snippet_7\n\nLANGUAGE: CSharp\nCODE:\n```\nservices.AddProtectedWebApi(Configuration)\n     .AddInMemoryTokenCaches();\n```\n\n----------------------------------------\n\nTITLE: HTTP Method-Specific API Calls\nDESCRIPTION: Specialized methods for making GET, POST, PUT, and DELETE requests with type-safe input/output parameters and optional user authentication.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.DownstreamApi/PublicAPI/net462/InternalAPI.Shipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.DownstreamApi.GetForUserAsync<TOutput>(string? serviceName, System.Action<Microsoft.Identity.Abstractions.DownstreamApiOptionsReadOnlyHttpMethod!>? downstreamApiOptionsOverride = null, System.Security.Claims.ClaimsPrincipal? user = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TOutput?>!\n```\n\n----------------------------------------\n\nTITLE: Graph Service Collection Extensions\nDESCRIPTION: Extension methods for IServiceCollection to add Microsoft Graph services with optional configuration.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.MicrosoftGraphBeta/PublicAPI/net7.0/PublicAPI.Shipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic static class GraphServiceCollectionExtensions\n{\n    public static IServiceCollection AddMicrosoftGraph(this IServiceCollection services)\n    public static IServiceCollection AddMicrosoftGraph(this IServiceCollection services, Action<MicrosoftGraphOptions> configureMicrosoftGraphOptions)\n}\n```\n\n----------------------------------------\n\nTITLE: HTTP Verb-Specific Methods\nDESCRIPTION: Specialized methods for making HTTP GET, POST, PUT, and DELETE requests with type-safe input/output parameters.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.DownstreamApi/PublicAPI/netstandard2.0/InternalAPI.Shipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.DownstreamApi.GetForUserAsync<TOutput>(string? serviceName, System.Action<Microsoft.Identity.Abstractions.DownstreamApiOptionsReadOnlyHttpMethod!>? downstreamApiOptionsOverride = null, System.Security.Claims.ClaimsPrincipal? user = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TOutput?>!\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.DownstreamApi.PostForAppAsync<TInput, TOutput>(string? serviceName, TInput input, System.Action<Microsoft.Identity.Abstractions.DownstreamApiOptionsReadOnlyHttpMethod!>? downstreamApiOptionsOverride = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TOutput?>!\n```\n\n----------------------------------------\n\nTITLE: Posting for User with DownstreamApi - Microsoft Identity Web - C#\nDESCRIPTION: These method signatures enable sending HTTP POST requests on behalf of the authenticated user to a configured downstream API. Overloads allow specifying input/output serialization using JsonTypeInfo or relying on default settings. Key dependencies include Microsoft.Identity.Web, System.Text.Json, and claims for user context. Inputs include the service name, request body, optional serialization info, user principal, and cancellation token. The output is typically a Task that resolves to the desired response object or completes upon success.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.DownstreamApi/PublicAPI/net9.0/InternalAPI.Shipped.txt#2025-04-23_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Identity.Web.DownstreamApi.PostForUserAsync<TInput, TOutput>(string? serviceName, TInput input, System.Text.Json.Serialization.Metadata.JsonTypeInfo<TInput>! inputJsonTypeInfo, System.Text.Json.Serialization.Metadata.JsonTypeInfo<TOutput!>! outputJsonTypeInfo, System.Action<Microsoft.Identity.Abstractions.DownstreamApiOptionsReadOnlyHttpMethod!>? downstreamApiOptionsOverride = null, System.Security.Claims.ClaimsPrincipal? user = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TOutput?>!\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Identity.Web.DownstreamApi.PostForUserAsync<TInput>(string? serviceName, TInput input, System.Action<Microsoft.Identity.Abstractions.DownstreamApiOptionsReadOnlyHttpMethod!>? downstreamApiOptionsOverride = null, System.Security.Claims.ClaimsPrincipal? user = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Identity.Web.DownstreamApi.PostForUserAsync<TInput>(string? serviceName, TInput input, System.Text.Json.Serialization.Metadata.JsonTypeInfo<TInput>! inputJsonTypeInfo, System.Action<Microsoft.Identity.Abstractions.DownstreamApiOptionsReadOnlyHttpMethod!>? downstreamApiOptionsOverride = null, System.Security.Claims.ClaimsPrincipal? user = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!\n```\n\n----------------------------------------\n\nTITLE: Initializing DownstreamApi Client Constructor\nDESCRIPTION: Constructor for the DownstreamApi class that initializes dependencies for authorization, HTTP client factory, and logging.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.DownstreamApi/PublicAPI/net462/InternalAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.DownstreamApi.DownstreamApi(Microsoft.Identity.Abstractions.IAuthorizationHeaderProvider! authorizationHeaderProvider, Microsoft.Extensions.Options.IOptionsMonitor<Microsoft.Identity.Abstractions.DownstreamApiOptions!>! namedDownstreamApiOptions, System.Net.Http.IHttpClientFactory! httpClientFactory, Microsoft.Extensions.Logging.ILogger<Microsoft.Identity.Web.DownstreamApi!>! logger) -> void\n```\n\n----------------------------------------\n\nTITLE: Adding Graph Beta Service Client with Specified Lifetime in C#\nDESCRIPTION: This method adds the Microsoft Graph Beta service client to the dependency injection container with a specified lifetime. It allows customization of the service lifetime when registering the client.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.GraphServiceClientBeta/InternalAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.GraphBetaServiceCollectionExtensions.AddGraphBetaServiceClientWithLifetime(Microsoft.Extensions.DependencyInjection.IServiceCollection services, Microsoft.Extensions.DependencyInjection.ServiceLifetime lifetime) -> void\n```\n\n----------------------------------------\n\nTITLE: Graph Authentication Options Class Definition\nDESCRIPTION: Class definition for GraphAuthenticationOptions containing base URL configuration and constructor.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.GraphServiceClient/PublicAPI/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.GraphAuthenticationOptions\nMicrosoft.Identity.Web.GraphAuthenticationOptions.BaseUrl.get -> string!\nMicrosoft.Identity.Web.GraphAuthenticationOptions.GraphAuthenticationOptions() -> void\n```\n\n----------------------------------------\n\nTITLE: Registering Microsoft Identity Web with Multiple Downstream APIs\nDESCRIPTION: Extension method that adds support for calling multiple downstream APIs to Microsoft Identity Web in an ASP.NET Core application. It configures token acquisition services with user flows from the provided configuration.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net6.0/PublicAPI.Unshipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic static MicrosoftIdentityWebAppAuthenticationBuilder AddMicrosoftIdentityWebAppCallsWebApiWithConfiguration(\n    this IServiceCollection services,\n    IConfiguration configuration,\n    Action<MicrosoftIdentityApplicationOptions>? configureOptions = null,\n    string configSectionName = \"AzureAd\",\n    string? openIdConfigurationEndpoint = null)\n{\n    MicrosoftIdentityWebAppAuthenticationBuilder microsoftIdentityWebAppAuthenticationBuilder =\n        services.AddAuthentication(OpenIdConnectDefaults.AuthenticationScheme)\n        .AddMicrosoftIdentityWebApp(\n            options =>\n            {\n                if (configuration != null)\n                {\n                    configuration.GetSection(configSectionName).Bind(options);\n                }\n\n                configureOptions?.Invoke(options);\n\n                if (!string.IsNullOrEmpty(openIdConfigurationEndpoint))\n                {\n                    options.MetadataAddress = openIdConfigurationEndpoint;\n                }\n            })\n        .EnableTokenAcquisitionToCallDownstreamApi()\n        .AddMicrosoftGraph()\n        .AddInMemoryTokenCaches();\n\n    return microsoftIdentityWebAppAuthenticationBuilder;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding ASP.NET Core Identity Web Telemetry with Event Source\nDESCRIPTION: Demonstrates how to configure ASP.NET Core to use Microsoft Identity Web's built-in event source for telemetry. This code should be added to the ConfigureServices method in Startup.cs.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.Diagnostics/PublicAPI/net462/PublicAPI.Unshipped.txt#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n// This code should go in ConfigureServices method in your Startup.cs\nservices.AddMicrosoftIdentityWebAppAuthentication(Configuration)\n        .EnableTokenAcquisitionToCallDownstreamApi()\n        .AddMicrosoftGraph()\n        .AddInMemoryTokenCaches();\n\n// Add Identity Web telemetry\nservices.AddIdentityWebEventSourceTelemetry();\n```\n\n----------------------------------------\n\nTITLE: Using Both Microsoft Graph and Microsoft Graph Beta\nDESCRIPTION: C# code showing how to use both Microsoft Graph and Microsoft Graph Beta in the same application, including package references and service configuration.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.GraphServiceClient/Readme.md#2025-04-23_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Microsoft.Identity.Web.GraphServiceClient\ndotnet add package Microsoft.Identity.Web.GraphServiceClientBeta\n```\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddMicrosoftGraph();\nservices.AddMicrosoftGraphBeta();\n```\n\nLANGUAGE: csharp\nCODE:\n```\nusing GraphServiceClient = Microsoft.Graph.GraphServiceClient;\nusing GraphBetaServiceClient = Microsoft.Graph.GraphBetaServiceClient;\n\nMyController(GraphServiceClient graphServiceClient, GraphBetaServiceClient graphServiceClient)\n{\n // more here\n}\n```\n\n----------------------------------------\n\nTITLE: DeleteForApp and DeleteForUser Operations\nDESCRIPTION: Methods for making DELETE requests to downstream APIs with support for typed inputs and outputs, including variants for both app and user authentication contexts.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.DownstreamApi/PublicAPI/net8.0/InternalAPI.Shipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.DownstreamApi.DeleteForAppAsync<TInput, TOutput>(string? serviceName, TInput input, System.Action<Microsoft.Identity.Abstractions.DownstreamApiOptionsReadOnlyHttpMethod!>? downstreamApiOptionsOverride = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TOutput?>!\n```\n\n----------------------------------------\n\nTITLE: Overriding Authentication Options for Graph Requests in C#\nDESCRIPTION: An extension method for Microsoft Graph base request types. It allows overriding the default authentication options by providing an action that configures `AuthorizationHeaderProviderOptions` for the specific request.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.MicrosoftGraph/PublicAPI/net6.0/PublicAPI.Shipped.txt#2025-04-23_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Identity.Web.BaseRequestExtensions.WithAuthenticationOptions<T>(this T baseRequest, System.Action<Microsoft.Identity.Abstractions.AuthorizationHeaderProviderOptions!>! overrideAuthenticationOptions) -> T\n```\n\n----------------------------------------\n\nTITLE: Requiring Scope or App Permission on Endpoint Convention Builder in C#\nDESCRIPTION: This generic extension method applies an authorization policy to an endpoint convention builder (like those used in Minimal APIs). It ensures the endpoint requires the user to have either one of the specified scopes or one of the specified app permissions.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net6.0/PublicAPI.Shipped.txt#2025-04-23_snippet_22\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Identity.Web.RequiredScopeOrAppPermissionExtensions.RequireScopeOrAppPermission<TBuilder>(this TBuilder endpointConventionBuilder, string![]! scope, string![]! appPermission) -> TBuilder\n```\n\n----------------------------------------\n\nTITLE: Graph Service Collection Extensions in C#\nDESCRIPTION: Extension methods for IServiceCollection to add Microsoft Graph services with various configuration options.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.GraphServiceClient/PublicAPI/net462/PublicAPI.Shipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.GraphServiceCollectionExtensions.AddMicrosoftGraph(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!\nstatic Microsoft.Identity.Web.GraphServiceCollectionExtensions.AddMicrosoftGraph(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, Microsoft.Extensions.Configuration.IConfiguration! configurationSection) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!\nstatic Microsoft.Identity.Web.GraphServiceCollectionExtensions.AddMicrosoftGraph(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, System.Action<Microsoft.Identity.Web.GraphServiceClientOptions!>! configureMicrosoftGraphOptions) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!\n```\n\n----------------------------------------\n\nTITLE: Initializing OwinTokenAcquirerFactory in C#\nDESCRIPTION: This is the default constructor for the OwinTokenAcquirerFactory class, which is used to configure and provide token acquisition services within an OWIN pipeline using Microsoft.Identity.Web.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.OWIN/PublicAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Identity.Web.OWIN.OwinTokenAcquirerFactory.OwinTokenAcquirerFactory() -> void\n```\n\n----------------------------------------\n\nTITLE: Calling API Methods in C#\nDESCRIPTION: Core methods for making HTTP requests to downstream APIs with support for both synchronous and asynchronous operations, handling different HTTP methods and response types.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.DownstreamApi/PublicAPI/net6.0/InternalAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.DownstreamApi.CallApiAsync(Microsoft.Identity.Abstractions.DownstreamApiOptions! downstreamApiOptions, System.Security.Claims.ClaimsPrincipal? user = null, System.Net.Http.HttpContent? content = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage!>!\n```\n\n----------------------------------------\n\nTITLE: Making HTTP POST Requests\nDESCRIPTION: Methods for making authenticated POST requests to downstream APIs with support for typed inputs and outputs.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.DownstreamApi/PublicAPI/net7.0/InternalAPI.Shipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.DownstreamApi.PostForAppAsync<TInput, TOutput>(string? serviceName, TInput input, System.Action<Microsoft.Identity.Abstractions.DownstreamApiOptionsReadOnlyHttpMethod!>? downstreamApiOptionsOverride = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TOutput?>!\n```\n\n----------------------------------------\n\nTITLE: Initializing DownstreamApi Constructor\nDESCRIPTION: Constructor for initializing the DownstreamApi class with required dependencies for authorization, configuration, HTTP client factory and logging.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.DownstreamApi/PublicAPI/netstandard2.0/InternalAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.DownstreamApi.DownstreamApi(Microsoft.Identity.Abstractions.IAuthorizationHeaderProvider! authorizationHeaderProvider, Microsoft.Extensions.Options.IOptionsMonitor<Microsoft.Identity.Abstractions.DownstreamApiOptions!>! namedDownstreamApiOptions, System.Net.Http.IHttpClientFactory! httpClientFactory, Microsoft.Extensions.Logging.ILogger<Microsoft.Identity.Web.DownstreamApi!>! logger) -> void\n```\n\n----------------------------------------\n\nTITLE: Initiating Sign-In Flow in AccountController (C#)\nDESCRIPTION: Defines the `SignIn` action method in `AccountController`. This method handles the sign-in process, often by issuing an authentication challenge. It accepts optional `scheme` and `redirectUri` parameters to control the authentication scheme and post-login redirection.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.UI/PublicAPI.Shipped.txt#2025-04-23_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Identity.Web.UI.Areas.MicrosoftIdentity.Controllers.AccountController.SignIn(string! scheme, string! redirectUri) -> Microsoft.AspNetCore.Mvc.IActionResult!\n```\n\n----------------------------------------\n\nTITLE: Defining Microsoft Identity Web Interfaces and Contracts - .NET/C#\nDESCRIPTION: Specifies various interfaces, classes, and method signatures that form the core contracts for token acquisition, certificate observation, and configuration in Microsoft Identity Web. These interfaces define required methods such as token retrieval for apps and users, configuration accessors, and event handlers for certificate changes, enabling pluggable and testable authentication modules. Dependencies may include system namespaces, external configuration, and authentication providers. Methods expect specific parameter types (e.g., scopes, principal, options) and return Task-based async results or strongly-typed configuration objects.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.TokenAcquisition/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Identity.Web.BeforeTokenAcquisitionForApp\nMicrosoft.Identity.Web.BeforeTokenAcquisitionForTestUser\nMicrosoft.Identity.Web.ClaimConstants\nMicrosoft.Identity.Web.Constants\nMicrosoft.Identity.Web.Experimental.CerticateObserverAction\nMicrosoft.Identity.Web.Experimental.CerticateObserverAction.Deselected = 1 -> Microsoft.Identity.Web.Experimental.CerticateObserverAction\nMicrosoft.Identity.Web.Experimental.CerticateObserverAction.Selected = 0 -> Microsoft.Identity.Web.Experimental.CerticateObserverAction\nMicrosoft.Identity.Web.Experimental.CertificateChangeEventArg\nMicrosoft.Identity.Web.Experimental.CertificateChangeEventArg.Action.get -> Microsoft.Identity.Web.Experimental.CerticateObserverAction\nMicrosoft.Identity.Web.Experimental.CertificateChangeEventArg.Action.set -> void\nMicrosoft.Identity.Web.Experimental.CertificateChangeEventArg.Certificate.get -> System.Security.Cryptography.X509Certificates.X509Certificate2?\nMicrosoft.Identity.Web.Experimental.CertificateChangeEventArg.Certificate.set -> void\nMicrosoft.Identity.Web.Experimental.CertificateChangeEventArg.CertificateChangeEventArg() -> void\nMicrosoft.Identity.Web.Experimental.CertificateChangeEventArg.CredentialDescription.get -> Microsoft.Identity.Abstractions.CredentialDescription?\nMicrosoft.Identity.Web.Experimental.CertificateChangeEventArg.CredentialDescription.set -> void\nMicrosoft.Identity.Web.Experimental.ICertificatesObserver\nMicrosoft.Identity.Web.Experimental.ICertificatesObserver.OnClientCertificateChanged(Microsoft.Identity.Web.Experimental.CertificateChangeEventArg! e) -> void\nMicrosoft.Identity.Web.Extensibility.BaseAuthorizationHeaderProvider\nMicrosoft.Identity.Web.Extensibility.BaseAuthorizationHeaderProvider.BaseAuthorizationHeaderProvider(System.IServiceProvider! serviceProvider) -> void\nMicrosoft.Identity.Web.Internal.WebApiBuilders\nMicrosoft.Identity.Web.ITokenAcquisition\nMicrosoft.Identity.Web.ITokenAcquisition.GetAccessTokenForAppAsync(string! scope, string? authenticationScheme, string? tenant = null, Microsoft.Identity.Web.TokenAcquisitionOptions? tokenAcquisitionOptions = null) -> System.Threading.Tasks.Task<string!>!\nMicrosoft.Identity.Web.ITokenAcquisition.GetAccessTokenForUserAsync(System.Collections.Generic.IEnumerable<string!>! scopes, string? authenticationScheme, string? tenantId = null, string? userFlow = null, System.Security.Claims.ClaimsPrincipal? user = null, Microsoft.Identity.Web.TokenAcquisitionOptions? tokenAcquisitionOptions = null) -> System.Threading.Tasks.Task<string!>!\nMicrosoft.Identity.Web.ITokenAcquisition.GetAuthenticationResultForAppAsync(string! scope, string? authenticationScheme, string? tenant = null, Microsoft.Identity.Web.TokenAcquisitionOptions? tokenAcquisitionOptions = null) -> System.Threading.Tasks.Task<Microsoft.Identity.Client.AuthenticationResult!>!\nMicrosoft.Identity.Web.ITokenAcquisition.GetAuthenticationResultForUserAsync(System.Collections.Generic.IEnumerable<string!>! scopes, string? authenticationScheme, string? tenantId = null, string? userFlow = null, System.Security.Claims.ClaimsPrincipal? user = null, Microsoft.Identity.Web.TokenAcquisitionOptions? tokenAcquisitionOptions = null) -> System.Threading.Tasks.Task<Microsoft.Identity.Client.AuthenticationResult!>!\nMicrosoft.Identity.Web.ITokenAcquisition.GetEffectiveAuthenticationScheme(string? authenticationScheme) -> string!\nMicrosoft.Identity.Web.MicrosoftIdentityAppCallsWebApiAuthenticationBuilder\nMicrosoft.Identity.Web.MicrosoftIdentityAppCallsWebApiAuthenticationBuilder.AddDistributedTokenCaches() -> Microsoft.Identity.Web.MicrosoftIdentityAppCallsWebApiAuthenticationBuilder!\nMicrosoft.Identity.Web.MicrosoftIdentityAppCallsWebApiAuthenticationBuilder.AddInMemoryTokenCaches(System.Action<Microsoft.Identity.Web.TokenCacheProviders.InMemory.MsalMemoryTokenCacheOptions!>? configureOptions = null, System.Action<Microsoft.Extensions.Caching.Memory.MemoryCacheOptions!>? memoryCacheOptions = null) -> Microsoft.Identity.Web.MicrosoftIdentityAppCallsWebApiAuthenticationBuilder!\nMicrosoft.Identity.Web.MicrosoftIdentityBaseAuthenticationBuilder\nMicrosoft.Identity.Web.MicrosoftIdentityBaseAuthenticationBuilder.ConfigurationSection.get -> Microsoft.Extensions.Configuration.IConfigurationSection?\nMicrosoft.Identity.Web.MicrosoftIdentityBaseAuthenticationBuilder.ConfigurationSection.set -> void\nMicrosoft.Identity.Web.MicrosoftIdentityBaseAuthenticationBuilder.MicrosoftIdentityBaseAuthenticationBuilder(Microsoft.Extensions.DependencyInjection.IServiceCollection! services, Microsoft.Extensions.Configuration.IConfigurationSection? configurationSection = null) -> void\nMicrosoft.Identity.Web.MicrosoftIdentityBaseAuthenticationBuilder.Services.get -> Microsoft.Extensions.DependencyInjection.IServiceCollection!\nMicrosoft.Identity.Web.MicrosoftIdentityOptions\nMicrosoft.Identity.Web.MicrosoftIdentityOptions.AllowWebApiToBeAuthorizedByACL.get -> bool\nMicrosoft.Identity.Web.MicrosoftIdentityOptions.AllowWebApiToBeAuthorizedByACL.set -> void\nMicrosoft.Identity.Web.MicrosoftIdentityOptions.ClientCertificates.get -> System.Collections.Generic.IEnumerable<Microsoft.Identity.Web.CertificateDescription!>?\nMicrosoft.Identity.Web.MicrosoftIdentityOptions.ClientCertificates.set -> void\nMicrosoft.Identity.Web.MicrosoftIdentityOptions.ClientCredentials.get -> System.Collections.Generic.IEnumerable<Microsoft.Identity.Abstractions.CredentialDescription!>?\nMicrosoft.Identity.Web.MicrosoftIdentityOptions.ClientCredentials.set -> void\nMicrosoft.Identity.Web.MicrosoftIdentityOptions.ClientCredentialsUsingManagedIdentity.get -> Microsoft.Identity.Web.CertificatelessOptions?\nMicrosoft.Identity.Web.MicrosoftIdentityOptions.ClientCredentialsUsingManagedIdentity.set -> void\nMicrosoft.Identity.Web.MicrosoftIdentityOptions.DefaultUserFlow.get -> string?\nMicrosoft.Identity.Web.MicrosoftIdentityOptions.Domain.get -> string?\nMicrosoft.Identity.Web.MicrosoftIdentityOptions.Domain.set -> void\nMicrosoft.Identity.Web.MicrosoftIdentityOptions.EditProfilePolicyId.get -> string?\nMicrosoft.Identity.Web.MicrosoftIdentityOptions.EditProfilePolicyId.set -> void\nMicrosoft.Identity.Web.MicrosoftIdentityOptions.ErrorPath.get -> string?\nMicrosoft.Identity.Web.MicrosoftIdentityOptions.ErrorPath.set -> void\nMicrosoft.Identity.Web.MicrosoftIdentityOptions.ExtraQueryParameters.get -> System.Collections.Generic.IDictionary<string!, string!>?\nMicrosoft.Identity.Web.MicrosoftIdentityOptions.ExtraQueryParameters.set -> void\nMicrosoft.Identity.Web.MicrosoftIdentityOptions.Instance.get -> string!\nMicrosoft.Identity.Web.MicrosoftIdentityOptions.Instance.set -> void\nMicrosoft.Identity.Web.MicrosoftIdentityOptions.LegacyCacheCompatibilityEnabled.get -> bool\nMicrosoft.Identity.Web.MicrosoftIdentityOptions.LegacyCacheCompatibilityEnabled.set -> void\nMicrosoft.Identity.Web.MicrosoftIdentityOptions.MicrosoftIdentityOptions() -> void\nMicrosoft.Identity.Web.MicrosoftIdentityOptions.ResetPasswordPath.get -> string?\nMicrosoft.Identity.Web.MicrosoftIdentityOptions.ResetPasswordPath.set -> void\nMicrosoft.Identity.Web.MicrosoftIdentityOptions.ResetPasswordPolicyId.get -> string?\nMicrosoft.Identity.Web.MicrosoftIdentityOptions.ResetPasswordPolicyId.set -> void\n```\n\n----------------------------------------\n\nTITLE: Securing Controllers with Authorization in ASP.NET Core using Microsoft.Identity.Web\nDESCRIPTION: Example of protecting an API controller with authorization attributes that require authentication through Microsoft.Identity.Web. The controller requires an authenticated user with access to the specified scope.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.Certificate/InternalAPI.Unshipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[Authorize]\n[RequiredScope(\"access_as_user\")]\n[Route(\"api/[controller]\")]\n[ApiController]\npublic class WeatherForecastController : ControllerBase\n{\n    [HttpGet]\n    public IEnumerable<WeatherForecast> Get()\n    {\n        // Controller implementation\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Graph Service Collection Extensions\nDESCRIPTION: Extension methods for adding Microsoft Graph services to the dependency injection container.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.GraphServiceClient/PublicAPI/net472/PublicAPI.Shipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.GraphServiceCollectionExtensions.AddMicrosoftGraph(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!\nstatic Microsoft.Identity.Web.GraphServiceCollectionExtensions.AddMicrosoftGraph(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, Microsoft.Extensions.Configuration.IConfiguration! configurationSection) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!\nstatic Microsoft.Identity.Web.GraphServiceCollectionExtensions.AddMicrosoftGraph(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, System.Action<Microsoft.Identity.Web.GraphServiceClientOptions!>! configureMicrosoftGraphOptions) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!\n```\n\n----------------------------------------\n\nTITLE: Adding Downstream API to Authentication Builder with Action in C#\nDESCRIPTION: Extends MicrosoftIdentityAppCallsWebApiAuthenticationBuilder to add a downstream API using an Action delegate. This allows for programmatic configuration within the context of the authentication builder.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.DownstreamApi/PublicAPI/net7.0/PublicAPI.Shipped.txt#2025-04-23_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.DownstreamApiExtensions.AddDownstreamApi(this Microsoft.Identity.Web.MicrosoftIdentityAppCallsWebApiAuthenticationBuilder! builder, string! serviceName, System.Action<Microsoft.Identity.Abstractions.DownstreamApiOptions!>! configureOptions) -> Microsoft.Identity.Web.MicrosoftIdentityAppCallsWebApiAuthenticationBuilder!\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Downstream APIs from Configuration Section in C#\nDESCRIPTION: Adds multiple downstream APIs to the service collection using a configuration section. This method allows for configuring multiple downstream APIs at once from a structured configuration.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.DownstreamApi/PublicAPI/net462/PublicAPI.Shipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.DownstreamApiExtensions.AddDownstreamApis(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, Microsoft.Extensions.Configuration.IConfigurationSection! configurationSection) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!\n```\n\n----------------------------------------\n\nTITLE: GET Operations with App Authentication in C#\nDESCRIPTION: Methods for making authenticated GET requests using app context. Supports generic input/output types and JSON serialization options.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.DownstreamApi/PublicAPI/net9.0/InternalAPI.Shipped.txt#2025-04-23_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.DownstreamApi.GetForAppAsync<TInput, TOutput>(string? serviceName, TInput input, System.Action<Microsoft.Identity.Abstractions.DownstreamApiOptionsReadOnlyHttpMethod!>? downstreamApiOptionsOverride = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TOutput?>!\n```\n\n----------------------------------------\n\nTITLE: Adding Microsoft Graph Service Extensions in C#\nDESCRIPTION: Extension methods for IServiceCollection to configure Microsoft Graph services with various configuration options.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.MicrosoftGraphBeta/PublicAPI/net9.0/PublicAPI.Shipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic static class GraphServiceCollectionExtensions\n{\n    public static IServiceCollection AddMicrosoftGraph(this IServiceCollection services);\n    public static IServiceCollection AddMicrosoftGraph(this IServiceCollection services, Action<MicrosoftGraphOptions> configureMicrosoftGraphOptions);\n}\n```\n\n----------------------------------------\n\nTITLE: Requiring Scope on Endpoint Convention Builder in C#\nDESCRIPTION: This generic extension method applies a required scope authorization policy to an endpoint convention builder (like those used in Minimal APIs). It ensures the endpoint requires the user to have at least one of the specified scopes.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net6.0/PublicAPI.Shipped.txt#2025-04-23_snippet_20\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Identity.Web.RequiredScopeExtensions.RequireScope<TBuilder>(this TBuilder endpointConventionBuilder, params string![]! scope) -> TBuilder\n```\n\n----------------------------------------\n\nTITLE: DefaultCredentialsLoader Class API in C#\nDESCRIPTION: Implements credential loading functionality for Microsoft Identity Web. Provides methods to load credentials from various sources, manage credential lifecycle, and support custom signed assertion providers.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.Certificate/PublicAPI.Shipped.txt#2025-04-23_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.DefaultCredentialsLoader\nMicrosoft.Identity.Web.DefaultCredentialsLoader.CredentialSourceLoaders.get -> System.Collections.Generic.IDictionary<Microsoft.Identity.Abstractions.CredentialSource, Microsoft.Identity.Abstractions.ICredentialSourceLoader!>!\nMicrosoft.Identity.Web.DefaultCredentialsLoader.CustomSignedAssertionCredentialSourceLoaders.get -> System.Collections.Generic.IDictionary<string!, Microsoft.Identity.Abstractions.ICustomSignedAssertionProvider!>?\nMicrosoft.Identity.Web.DefaultCredentialsLoader.DefaultCredentialsLoader() -> void\nMicrosoft.Identity.Web.DefaultCredentialsLoader.DefaultCredentialsLoader(Microsoft.Extensions.Logging.ILogger<Microsoft.Identity.Web.DefaultCredentialsLoader!>? logger) -> void\nMicrosoft.Identity.Web.DefaultCredentialsLoader.DefaultCredentialsLoader(System.Collections.Generic.IEnumerable<Microsoft.Identity.Abstractions.ICustomSignedAssertionProvider!>! customSignedAssertionProviders, Microsoft.Extensions.Logging.ILogger<Microsoft.Identity.Web.DefaultCredentialsLoader!>? logger) -> void\nMicrosoft.Identity.Web.DefaultCredentialsLoader.LoadCredentialsIfNeededAsync(Microsoft.Identity.Abstractions.CredentialDescription! credentialDescription, Microsoft.Identity.Abstractions.CredentialSourceLoaderParameters? parameters = null) -> System.Threading.Tasks.Task!\nMicrosoft.Identity.Web.DefaultCredentialsLoader.LoadFirstValidCredentialsAsync(System.Collections.Generic.IEnumerable<Microsoft.Identity.Abstractions.CredentialDescription!>! credentialDescriptions, Microsoft.Identity.Abstractions.CredentialSourceLoaderParameters? parameters = null) -> System.Threading.Tasks.Task<Microsoft.Identity.Abstractions.CredentialDescription?>!\nMicrosoft.Identity.Web.DefaultCredentialsLoader.ResetCredentials(System.Collections.Generic.IEnumerable<Microsoft.Identity.Abstractions.CredentialDescription!>! credentialDescriptions) -> void\n```\n\n----------------------------------------\n\nTITLE: Getting IDownstreamApi in ControllerBase (C# Extension)\nDESCRIPTION: This static extension method provides access to the IDownstreamApi service for the current System.Web.Mvc.ControllerBase instance. It simplifies making authenticated calls to downstream web APIs from an MVC controller.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.OWIN/PublicAPI.Shipped.txt#2025-04-23_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Identity.Web.ControllerBaseExtensions.GetDownstreamApi(this System.Web.Mvc.ControllerBase! _) -> Microsoft.Identity.Abstractions.IDownstreamApi!\n```\n\n----------------------------------------\n\nTITLE: Graph Service Collection Extension Methods\nDESCRIPTION: Extension methods for IServiceCollection to add Microsoft Graph services with various configuration options.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.GraphServiceClient/PublicAPI/net9.0/PublicAPI.Shipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.GraphServiceCollectionExtensions.AddMicrosoftGraph(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!\nstatic Microsoft.Identity.Web.GraphServiceCollectionExtensions.AddMicrosoftGraph(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, Microsoft.Extensions.Configuration.IConfiguration! configurationSection) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!\nstatic Microsoft.Identity.Web.GraphServiceCollectionExtensions.AddMicrosoftGraph(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, System.Action<Microsoft.Identity.Web.GraphServiceClientOptions!>! configureMicrosoftGraphOptions) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!\n```\n\n----------------------------------------\n\nTITLE: TokenAcquisitionAuthenticationProviderOption Class Definition\nDESCRIPTION: Configuration options class for token acquisition authentication provider. Contains properties for authentication scheme, scopes, tenant, user claims, and authorization header provider options.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.MicrosoftGraph/PublicAPI/net9.0/InternalAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic class TokenAcquisitionAuthenticationProviderOption\n{\n    public TokenAcquisitionAuthenticationProviderOption();\n    public bool? AppOnly { get; set; }\n    public string AuthenticationScheme { get; set; }\n    public Action<AuthorizationHeaderProviderOptions> AuthorizationHeaderProviderOptions { get; set; }\n    public string[] Scopes { get; set; }\n    public string Tenant { get; set; }\n    public ClaimsPrincipal User { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Microsoft Graph Extension Methods\nDESCRIPTION: Extension methods for MicrosoftIdentityAppCallsWebApiAuthenticationBuilder to configure Microsoft Graph authentication.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.GraphServiceClient/PublicAPI/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.MicrosoftGraphExtensions.AddMicrosoftGraph(this Microsoft.Identity.Web.MicrosoftIdentityAppCallsWebApiAuthenticationBuilder! builder, Microsoft.Extensions.Configuration.IConfigurationSection! configurationSection) -> Microsoft.Identity.Web.MicrosoftIdentityAppCallsWebApiAuthenticationBuilder!\nstatic Microsoft.Identity.Web.MicrosoftGraphExtensions.AddMicrosoftGraph(this Microsoft.Identity.Web.MicrosoftIdentityAppCallsWebApiAuthenticationBuilder! builder, string! graphBaseUrl = \"https://graph.microsoft.com/v1.0\", System.Collections.Generic.IEnumerable<string!>? defaultScopes = null) -> Microsoft.Identity.Web.MicrosoftIdentityAppCallsWebApiAuthenticationBuilder!\n```\n\n----------------------------------------\n\nTITLE: MicrosoftIdentity Service Handler for Blazor Applications\nDESCRIPTION: Implements a service handler for Microsoft Identity authentication in Blazor applications, utilizing NavigationManager and AuthenticationStateProvider to manage authentication state and navigation.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net7.0/InternalAPI.Shipped.txt#2025-04-23_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Identity.Web.MicrosoftIdentityServiceHandler\nMicrosoft.Identity.Web.MicrosoftIdentityServiceHandler.Manager.get -> Microsoft.AspNetCore.Components.NavigationManager!\nMicrosoft.Identity.Web.MicrosoftIdentityServiceHandler.MicrosoftIdentityServiceHandler(Microsoft.Identity.Web.MicrosoftIdentityConsentAndConditionalAccessHandler! service, Microsoft.AspNetCore.Components.Authorization.AuthenticationStateProvider! provider, Microsoft.AspNetCore.Components.NavigationManager! manager) -> void\nMicrosoft.Identity.Web.MicrosoftIdentityServiceHandler.Provider.get -> Microsoft.AspNetCore.Components.Authorization.AuthenticationStateProvider!\nMicrosoft.Identity.Web.MicrosoftIdentityServiceHandler.Service.get -> Microsoft.Identity.Web.MicrosoftIdentityConsentAndConditionalAccessHandler!\noverride Microsoft.Identity.Web.MicrosoftIdentityServiceHandler.OnCircuitOpenedAsync(Microsoft.AspNetCore.Components.Server.Circuits.Circuit! circuit, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!\n```\n\n----------------------------------------\n\nTITLE: Token Acquisition Authentication Provider Options Class Definition\nDESCRIPTION: Configuration options class for TokenAcquisitionAuthenticationProvider including authentication scheme, scopes, and user settings\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.MicrosoftGraphBeta/PublicAPI/net472/InternalAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic class TokenAcquisitionAuthenticationProviderOption\n{\n    public TokenAcquisitionAuthenticationProviderOption();\n    public bool? AppOnly { get; set; }\n    public string AuthenticationScheme { get; set; }\n    public Action<AuthorizationHeaderProviderOptions> AuthorizationHeaderProviderOptions { get; set; }\n    public string[] Scopes { get; set; }\n    public string Tenant { get; set; }\n    public ClaimsPrincipal User { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Token Acquisition Interfaces - Microsoft Identity Web - C#\nDESCRIPTION: Declares the ITokenAcquisition interface, outlining methods for acquiring tokens and authentication results for both applications and users. The interface provides asynchronous methods for obtaining access tokens and authentication details for specified scopes, authentication schemes, tenants, and user principals. Key parameters include scope collections, authentication scheme strings, tenant identifiers, and optional token acquisition options. This contract is fundamental for apps using Microsoft.Identity.Web to authenticate and call downstream APIs; external dependencies include Tasks, ClaimsPrincipal, and related Microsoft Identity classes.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.TokenAcquisition/PublicAPI/net472/PublicAPI.Shipped.txt#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Identity.Web.ITokenAcquisition\nMicrosoft.Identity.Web.ITokenAcquisition.GetAccessTokenForAppAsync(string! scope, string? authenticationScheme, string? tenant = null, Microsoft.Identity.Web.TokenAcquisitionOptions? tokenAcquisitionOptions = null) -> System.Threading.Tasks.Task<string!>!\nMicrosoft.Identity.Web.ITokenAcquisition.GetAccessTokenForUserAsync(System.Collections.Generic.IEnumerable<string!>! scopes, string? authenticationScheme, string? tenantId = null, string? userFlow = null, System.Security.Claims.ClaimsPrincipal? user = null, Microsoft.Identity.Web.TokenAcquisitionOptions? tokenAcquisitionOptions = null) -> System.Threading.Tasks.Task<string!>!\nMicrosoft.Identity.Web.ITokenAcquisition.GetAuthenticationResultForAppAsync(string! scope, string? authenticationScheme, string? tenant = null, Microsoft.Identity.Web.TokenAcquisitionOptions? tokenAcquisitionOptions = null) -> System.Threading.Tasks.Task<Microsoft.Identity.Client.AuthenticationResult!>!\nMicrosoft.Identity.Web.ITokenAcquisition.GetAuthenticationResultForUserAsync(System.Collections.Generic.IEnumerable<string!>! scopes, string? authenticationScheme, string? tenantId = null, string? userFlow = null, System.Security.Claims.ClaimsPrincipal? user = null, Microsoft.Identity.Web.TokenAcquisitionOptions? tokenAcquisitionOptions = null) -> System.Threading.Tasks.Task<Microsoft.Identity.Client.AuthenticationResult!>!\nMicrosoft.Identity.Web.ITokenAcquisition.GetEffectiveAuthenticationScheme(string? authenticationScheme) -> string!\n\n```\n\n----------------------------------------\n\nTITLE: App Context and Authentication Information Properties\nDESCRIPTION: Static properties and methods for managing application context switches and retrieving authentication information from headers\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net9.0/InternalAPI.Shipped.txt#2025-04-23_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.AppContextSwitches.ResetState() -> void\nstatic Microsoft.Identity.Web.AppContextSwitches.UseClaimsIdentityType.get -> bool\nstatic Microsoft.Identity.Web.AppServicesAuthenticationInformation.ClientId.get -> string?\nstatic Microsoft.Identity.Web.AppServicesAuthenticationInformation.ClientSecret.get -> string?\n```\n\n----------------------------------------\n\nTITLE: Graph Service Collection Extension Methods\nDESCRIPTION: Provides extension methods for IServiceCollection to register Graph service client with optional lifetime specification.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.GraphServiceClient/PublicAPI/netstandard2.0/InternalAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.GraphServiceCollectionExtensions.AddGraphServiceClient(Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> void\nstatic Microsoft.Identity.Web.GraphServiceCollectionExtensions.AddGraphServiceClientWithLifetime(Microsoft.Extensions.DependencyInjection.IServiceCollection! services, Microsoft.Extensions.DependencyInjection.ServiceLifetime lifetime) -> void\n```\n\n----------------------------------------\n\nTITLE: Microsoft Graph Authentication Builder Extensions\nDESCRIPTION: Extension methods for MicrosoftIdentityAppCallsWebApiAuthenticationBuilder to configure Microsoft Graph authentication with various options.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.MicrosoftGraphBeta/PublicAPI/net6.0/PublicAPI.Shipped.txt#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Identity.Web.MicrosoftGraphExtensions.AddMicrosoftGraph(this Microsoft.Identity.Web.MicrosoftIdentityAppCallsWebApiAuthenticationBuilder! builder, Microsoft.Extensions.Configuration.IConfigurationSection! configurationSection) -> Microsoft.Identity.Web.MicrosoftIdentityAppCallsWebApiAuthenticationBuilder!\nstatic Microsoft.Identity.Web.MicrosoftGraphExtensions.AddMicrosoftGraph(this Microsoft.Identity.Web.MicrosoftIdentityAppCallsWebApiAuthenticationBuilder! builder, string! graphBaseUrl = \"https://graph.microsoft.com/v1.0\", string! defaultScopes = \"user.read\") -> Microsoft.Identity.Web.MicrosoftIdentityAppCallsWebApiAuthenticationBuilder!\nstatic Microsoft.Identity.Web.MicrosoftGraphExtensions.AddMicrosoftGraph(this Microsoft.Identity.Web.MicrosoftIdentityAppCallsWebApiAuthenticationBuilder! builder, System.Action<Microsoft.Identity.Web.MicrosoftGraphOptions!>! configureMicrosoftGraphOptions) -> Microsoft.Identity.Web.MicrosoftIdentityAppCallsWebApiAuthenticationBuilder!\nstatic Microsoft.Identity.Web.MicrosoftGraphExtensions.AddMicrosoftGraph(this Microsoft.Identity.Web.MicrosoftIdentityAppCallsWebApiAuthenticationBuilder! builder, System.Func<Microsoft.Graph.IAuthenticationProvider!, Microsoft.Graph.GraphServiceClient!>! graphServiceClientFactory, System.Collections.Generic.IEnumerable<string!>! initialScopes) -> Microsoft.Identity.Web.MicrosoftIdentityAppCallsWebApiAuthenticationBuilder!\nstatic Microsoft.Identity.Web.MicrosoftGraphExtensions.AddMicrosoftGraphAppOnly(this Microsoft.Identity.Web.MicrosoftIdentityAppCallsWebApiAuthenticationBuilder! builder, System.Func<Microsoft.Graph.IAuthenticationProvider!, Microsoft.Graph.GraphServiceClient!>! graphServiceClientFactory) -> Microsoft.Identity.Web.MicrosoftIdentityAppCallsWebApiAuthenticationBuilder!\n```\n\n----------------------------------------\n\nTITLE: Defining GraphServiceCollectionExtensions Class in C#\nDESCRIPTION: Defines static extension methods for IServiceCollection to add Microsoft Graph services with various configuration options.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.GraphServiceClient/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.GraphServiceCollectionExtensions\nstatic Microsoft.Identity.Web.GraphServiceCollectionExtensions.AddMicrosoftGraph(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!\nstatic Microsoft.Identity.Web.GraphServiceCollectionExtensions.AddMicrosoftGraph(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, Microsoft.Extensions.Configuration.IConfiguration! configurationSection) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!\nstatic Microsoft.Identity.Web.GraphServiceCollectionExtensions.AddMicrosoftGraph(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, System.Action<Microsoft.Identity.Web.GraphServiceClientOptions!>! configureMicrosoftGraphOptions) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!\n```\n\n----------------------------------------\n\nTITLE: Getting IAuthorizationHeaderProvider in ControllerBase (C# Extension)\nDESCRIPTION: This static extension method provides access to the IAuthorizationHeaderProvider service for the current System.Web.Mvc.ControllerBase instance. This service helps in acquiring authorization headers for downstream API calls within an MVC context.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.OWIN/PublicAPI.Shipped.txt#2025-04-23_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Identity.Web.ControllerBaseExtensions.GetAuthorizationHeaderProvider(this System.Web.Mvc.ControllerBase! _) -> Microsoft.Identity.Abstractions.IAuthorizationHeaderProvider!\n```\n\n----------------------------------------\n\nTITLE: Requiring Scope on AuthorizationPolicyBuilder (IEnumerable) in C#\nDESCRIPTION: This extension method adds a requirement to an ASP.NET Core AuthorizationPolicyBuilder that the authenticated user must possess at least one of the specified scopes (delegated permissions). It accepts scopes as an IEnumerable collection.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net6.0/PublicAPI.Shipped.txt#2025-04-23_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Identity.Web.PolicyBuilderExtensions.RequireScope(this Microsoft.AspNetCore.Authorization.AuthorizationPolicyBuilder! authorizationPolicyBuilder, System.Collections.Generic.IEnumerable<string!>! allowedValues) -> Microsoft.AspNetCore.Authorization.AuthorizationPolicyBuilder!\n```\n\n----------------------------------------\n\nTITLE: Configuring Microsoft Graph Beta Service Extensions\nDESCRIPTION: Defines static extension methods for IServiceCollection to add Microsoft Graph Beta client services. Provides three overloads: basic initialization, configuration-based setup, and delegate-based configuration.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.GraphServiceClientBeta/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n#nullable enable\nMicrosoft.Identity.Web.GraphBetaServiceCollectionExtensions\nstatic Microsoft.Identity.Web.GraphBetaServiceCollectionExtensions.AddMicrosoftGraphBeta(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!\nstatic Microsoft.Identity.Web.GraphBetaServiceCollectionExtensions.AddMicrosoftGraphBeta(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, Microsoft.Extensions.Configuration.IConfiguration! configurationSection) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!\nstatic Microsoft.Identity.Web.GraphBetaServiceCollectionExtensions.AddMicrosoftGraphBeta(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, System.Action<Microsoft.Identity.Web.GraphServiceClientOptions!>! configureMicrosoftGraphOptions) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!\n```\n\n----------------------------------------\n\nTITLE: Authentication Builder Classes for Web API and Web App Scenarios\nDESCRIPTION: Defines builder classes for configuring Microsoft Identity authentication in both Web API and Web App scenarios, with support for JWT Bearer and OpenID Connect authentication schemes.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net7.0/InternalAPI.Shipped.txt#2025-04-23_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Identity.Web.MicrosoftIdentityWebApiAuthenticationBuilder.MicrosoftIdentityWebApiAuthenticationBuilder(Microsoft.Extensions.DependencyInjection.IServiceCollection! services, string! jwtBearerAuthenticationScheme, System.Action<Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerOptions!>! configureJwtBearerOptions, System.Action<Microsoft.Identity.Web.MicrosoftIdentityOptions!>! configureMicrosoftIdentityOptions, Microsoft.Extensions.Configuration.IConfigurationSection? configurationSection) -> void\nMicrosoft.Identity.Web.MicrosoftIdentityWebApiAuthenticationBuilderWithConfiguration.MicrosoftIdentityWebApiAuthenticationBuilderWithConfiguration(Microsoft.Extensions.DependencyInjection.IServiceCollection! services, string! jwtBearerAuthenticationScheme, System.Action<Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerOptions!>! configureJwtBearerOptions, System.Action<Microsoft.Identity.Web.MicrosoftIdentityOptions!>! configureMicrosoftIdentityOptions, Microsoft.Extensions.Configuration.IConfigurationSection? configurationSection) -> void\nMicrosoft.Identity.Web.MicrosoftIdentityWebAppAuthenticationBuilder.MicrosoftIdentityWebAppAuthenticationBuilder(Microsoft.Extensions.DependencyInjection.IServiceCollection! services, string! openIdConnectScheme, System.Action<Microsoft.Identity.Web.MicrosoftIdentityOptions!>! configureMicrosoftIdentityOptions, Microsoft.Extensions.Configuration.IConfigurationSection? configurationSection) -> void\nMicrosoft.Identity.Web.MicrosoftIdentityWebAppAuthenticationBuilderWithConfiguration.MicrosoftIdentityWebAppAuthenticationBuilderWithConfiguration(Microsoft.Extensions.DependencyInjection.IServiceCollection! services, string! openIdConnectScheme, System.Action<Microsoft.Identity.Web.MicrosoftIdentityOptions!>! configureMicrosoftIdentityOptions, Microsoft.Extensions.Configuration.IConfigurationSection! configurationSection) -> void\n```\n\n----------------------------------------\n\nTITLE: Implementing Downstream API Methods in C#\nDESCRIPTION: Core method signatures for making authenticated downstream API calls, including PUT operations for both app and user contexts, with support for input/output serialization and cancellation tokens.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.DownstreamApi/PublicAPI/net472/InternalAPI.Shipped.txt#2025-04-23_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.DownstreamApi.PutForAppAsync<TInput>(string? serviceName, TInput input, System.Action<Microsoft.Identity.Abstractions.DownstreamApiOptionsReadOnlyHttpMethod!>? downstreamApiOptionsOverride = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!\n\nMicrosoft.Identity.Web.DownstreamApi.PutForUserAsync<TInput, TOutput>(string? serviceName, TInput input, System.Action<Microsoft.Identity.Abstractions.DownstreamApiOptionsReadOnlyHttpMethod!>? downstreamApiOptionsOverride = null, System.Security.Claims.ClaimsPrincipal? user = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TOutput?>!\n\nMicrosoft.Identity.Web.DownstreamApi.PutForUserAsync<TInput>(string? serviceName, TInput input, System.Action<Microsoft.Identity.Abstractions.DownstreamApiOptionsReadOnlyHttpMethod!>? downstreamApiOptionsOverride = null, System.Security.Claims.ClaimsPrincipal? user = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!\n```\n\n----------------------------------------\n\nTITLE: Base Request Extension Methods\nDESCRIPTION: Extension methods for configuring authentication options, scopes, and user context for Graph API requests\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.MicrosoftGraph/PublicAPI/net7.0/PublicAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic static class BaseRequestExtensions\n{\n    public static T WithAppOnly<T>(this T baseRequest, bool appOnly = true, string? tenant = null);\n    public static T WithAuthenticationOptions<T>(this T baseRequest, Action<AuthorizationHeaderProviderOptions> overrideAuthenticationOptions);\n    public static T WithAuthenticationScheme<T>(this T baseRequest, string authenticationScheme);\n    public static T WithScopes<T>(this T baseRequest, params string[] scopes);\n    public static T WithUser<T>(this T baseRequest, ClaimsPrincipal user);\n}\n```\n\n----------------------------------------\n\nTITLE: Token Acquisition Authentication Provider Options Class\nDESCRIPTION: Defines configuration options for token acquisition authentication including app-only auth, scopes, tenant settings, and user claims.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.MicrosoftGraphBeta/PublicAPI/net8.0/InternalAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.TokenAcquisitionAuthenticationProviderOption\nMicrosoft.Identity.Web.TokenAcquisitionAuthenticationProviderOption.AppOnly.get -> bool?\nMicrosoft.Identity.Web.TokenAcquisitionAuthenticationProviderOption.AppOnly.set -> void\nMicrosoft.Identity.Web.TokenAcquisitionAuthenticationProviderOption.AuthenticationScheme.get -> string\nMicrosoft.Identity.Web.TokenAcquisitionAuthenticationProviderOption.AuthenticationScheme.set -> void\nMicrosoft.Identity.Web.TokenAcquisitionAuthenticationProviderOption.AuthorizationHeaderProviderOptions.get -> System.Action<Microsoft.Identity.Abstractions.AuthorizationHeaderProviderOptions>\nMicrosoft.Identity.Web.TokenAcquisitionAuthenticationProviderOption.AuthorizationHeaderProviderOptions.set -> void\nMicrosoft.Identity.Web.TokenAcquisitionAuthenticationProviderOption.Scopes.get -> string[]\nMicrosoft.Identity.Web.TokenAcquisitionAuthenticationProviderOption.Scopes.set -> void\nMicrosoft.Identity.Web.TokenAcquisitionAuthenticationProviderOption.Tenant.get -> string\nMicrosoft.Identity.Web.TokenAcquisitionAuthenticationProviderOption.Tenant.set -> void\nMicrosoft.Identity.Web.TokenAcquisitionAuthenticationProviderOption.TokenAcquisitionAuthenticationProviderOption() -> void\nMicrosoft.Identity.Web.TokenAcquisitionAuthenticationProviderOption.User.get -> System.Security.Claims.ClaimsPrincipal\nMicrosoft.Identity.Web.TokenAcquisitionAuthenticationProviderOption.User.set -> void\n```\n\n----------------------------------------\n\nTITLE: Adding Graph Service Client Extensions in C#\nDESCRIPTION: Provides extension methods for IServiceCollection to add Graph service clients with different lifetimes.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.GraphServiceClient/PublicAPI/net9.0/InternalAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.GraphServiceCollectionExtensions.AddGraphServiceClient(Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.GraphServiceCollectionExtensions.AddGraphServiceClientWithLifetime(Microsoft.Extensions.DependencyInjection.IServiceCollection! services, Microsoft.Extensions.DependencyInjection.ServiceLifetime lifetime) -> void\n```\n\n----------------------------------------\n\nTITLE: PATCH Operations in C#\nDESCRIPTION: Methods for making authenticated PATCH requests with support for both app and user contexts. Includes JSON type information and cancellation support.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.DownstreamApi/PublicAPI/net9.0/InternalAPI.Shipped.txt#2025-04-23_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.DownstreamApi.PatchForAppAsync<TInput, TOutput>(string? serviceName, TInput input, System.Action<Microsoft.Identity.Abstractions.DownstreamApiOptionsReadOnlyHttpMethod!>? downstreamApiOptionsOverride = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TOutput?>!\n```\n\n----------------------------------------\n\nTITLE: Request Options Extensions\nDESCRIPTION: Extension methods for configuring request options in Microsoft Graph API calls. Provides methods for customizing authentication, scopes, and user context for individual requests.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.GraphServiceClient/PublicAPI/net6.0/PublicAPI.Shipped.txt#2025-04-23_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.RequestOptionsExtension.WithAppOnly(this System.Collections.Generic.IList<Microsoft.Kiota.Abstractions.IRequestOption!>! options, bool appOnly = true, string? tenant = null) -> System.Collections.Generic.IList<Microsoft.Kiota.Abstractions.IRequestOption!>!\nstatic Microsoft.Identity.Web.RequestOptionsExtension.WithAuthenticationOptions(this System.Collections.Generic.IList<Microsoft.Kiota.Abstractions.IRequestOption!>! options, Microsoft.Identity.Web.GraphAuthenticationOptions! optionsValue) -> System.Collections.Generic.IList<Microsoft.Kiota.Abstractions.IRequestOption!>!\nstatic Microsoft.Identity.Web.RequestOptionsExtension.WithScopes(this System.Collections.Generic.IList<Microsoft.Kiota.Abstractions.IRequestOption!>! options, params string![]! scopes) -> System.Collections.Generic.IList<Microsoft.Kiota.Abstractions.IRequestOption!>!\nstatic Microsoft.Identity.Web.RequestOptionsExtension.WithUser(this System.Collections.Generic.IList<Microsoft.Kiota.Abstractions.IRequestOption!>! options, System.Security.Claims.ClaimsPrincipal! user) -> System.Collections.Generic.IList<Microsoft.Kiota.Abstractions.IRequestOption!>!\n```\n\n----------------------------------------\n\nTITLE: Microsoft Graph Service Collection Extensions in C#\nDESCRIPTION: Extension methods for adding Microsoft Graph services to the dependency injection container. Provides overloads for basic configuration and custom options.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.MicrosoftGraph/PublicAPI/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.GraphServiceCollectionExtensions.AddMicrosoftGraph(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!\nstatic Microsoft.Identity.Web.GraphServiceCollectionExtensions.AddMicrosoftGraph(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, System.Action<Microsoft.Identity.Web.MicrosoftGraphOptions!>! configureMicrosoftGraphOptions) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!\n```\n\n----------------------------------------\n\nTITLE: Adding Graph Service Client to Dependency Injection in C#\nDESCRIPTION: Provides extension methods for IServiceCollection to add Graph service client with different lifetimes. These methods facilitate the integration of Microsoft Graph client into the dependency injection container of a .NET application.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.GraphServiceClient/PublicAPI/net472/InternalAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.GraphServiceCollectionExtensions.AddGraphServiceClient(Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> void\nstatic Microsoft.Identity.Web.GraphServiceCollectionExtensions.AddGraphServiceClientWithLifetime(Microsoft.Extensions.DependencyInjection.IServiceCollection! services, Microsoft.Extensions.DependencyInjection.ServiceLifetime lifetime) -> void\n```\n\n----------------------------------------\n\nTITLE: Implementing BaseRequestExtensions Methods\nDESCRIPTION: Extension methods for configuring authentication and authorization options for Graph API requests.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.MicrosoftGraph/PublicAPI/net462/PublicAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic static class BaseRequestExtensions\n{\n    public static T WithAppOnly<T>(this T baseRequest, bool appOnly = true, string? tenant = null);\n    public static T WithAuthenticationOptions<T>(this T baseRequest, Action<AuthorizationHeaderProviderOptions> overrideAuthenticationOptions);\n    public static T WithAuthenticationScheme<T>(this T baseRequest, string authenticationScheme);\n    public static T WithScopes<T>(this T baseRequest, params string[] scopes);\n    public static T WithUser<T>(this T baseRequest, ClaimsPrincipal user);\n}\n```\n\n----------------------------------------\n\nTITLE: Registering OIDC FIC Provider Extension with Microsoft Identity Web in C#\nDESCRIPTION: Defines a static extension method, AddOidcFic, for the IServiceCollection interface, enabling convenient registration of OidcFicSignedAssertionProvider within the dependency injection container using Microsoft Identity Web. Requires Microsoft.Extensions.DependencyInjection and a reference to OidcFicSignedAssertionProviderExtensions. The method accepts an IServiceCollection instance (typically named 'services') and returns the updated IServiceCollection, facilitating fluent configuration of authentication mechanisms relying on signed OIDC assertions.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.OidcFIC/PublicAPI/net462/PublicAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: c#\nCODE:\n```\n#nullable enable\nMicrosoft.Extensions.DependencyInjection.OidcFicSignedAssertionProviderExtensions\nstatic Microsoft.Extensions.DependencyInjection.OidcFicSignedAssertionProviderExtensions.AddOidcFic(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!\n```\n\n----------------------------------------\n\nTITLE: Defining IMicrosoftIdentityAuthenticationDelegatingHandlerFactory interface in C#\nDESCRIPTION: Defines the IMicrosoftIdentityAuthenticationDelegatingHandlerFactory interface with methods for creating app and user handlers for authentication.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.IMicrosoftIdentityAuthenticationDelegatingHandlerFactory\nMicrosoft.Identity.Web.IMicrosoftIdentityAuthenticationDelegatingHandlerFactory.CreateAppHandler(string? serviceName) -> System.Net.Http.DelegatingHandler!\nMicrosoft.Identity.Web.IMicrosoftIdentityAuthenticationDelegatingHandlerFactory.CreateUserHandler(string? serviceName) -> System.Net.Http.DelegatingHandler!\n```\n\n----------------------------------------\n\nTITLE: Implementing Extension Methods for Authentication and Authorization in C#\nDESCRIPTION: This section includes various extension methods for authentication and authorization, such as adding App Services authentication, handling Azure Functions authentication, and managing cookie policies.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net9.0/PublicAPI.Shipped.txt#2025-04-23_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.AppServicesAuthenticationBuilderExtensions.AddAppServicesAuthentication(this Microsoft.AspNetCore.Authentication.AuthenticationBuilder! builder) -> Microsoft.AspNetCore.Authentication.AuthenticationBuilder!\nstatic Microsoft.Identity.Web.AzureFunctionsAuthenticationHttpContextExtension.AuthenticateAzureFunctionAsync(this Microsoft.AspNetCore.Http.HttpContext! httpContext) -> System.Threading.Tasks.Task<(bool, Microsoft.AspNetCore.Mvc.IActionResult?)>!\nstatic Microsoft.Identity.Web.CookiePolicyOptionsExtensions.DisallowsSameSiteNone(string! userAgent) -> bool\nstatic Microsoft.Identity.Web.CookiePolicyOptionsExtensions.HandleSameSiteCookieCompatibility(this Microsoft.AspNetCore.Builder.CookiePolicyOptions! options) -> Microsoft.AspNetCore.Builder.CookiePolicyOptions!\nstatic Microsoft.Identity.Web.CookiePolicyOptionsExtensions.HandleSameSiteCookieCompatibility(this Microsoft.AspNetCore.Builder.CookiePolicyOptions! options, System.Func<string!, bool>! disallowsSameSiteNone) -> Microsoft.AspNetCore.Builder.CookiePolicyOptions!\n```\n\n----------------------------------------\n\nTITLE: Defining TokenAcquisitionAuthenticationProviderOption Class\nDESCRIPTION: Configuration options class for TokenAcquisitionAuthenticationProvider containing properties for authentication scheme, scopes, tenant, and user settings.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.MicrosoftGraphBeta/PublicAPI/net462/InternalAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic class TokenAcquisitionAuthenticationProviderOption\n{\n    public TokenAcquisitionAuthenticationProviderOption();\n    public bool? AppOnly { get; set; }\n    public string AuthenticationScheme { get; set; }\n    public Action<AuthorizationHeaderProviderOptions> AuthorizationHeaderProviderOptions { get; set; }\n    public string[] Scopes { get; set; }\n    public string Tenant { get; set; }\n    public ClaimsPrincipal User { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding OIDC FIC Signed Assertion Provider Extension - ASP.NET Core - C#\nDESCRIPTION: This C# snippet declares a static extension method named AddOidcFic for the IServiceCollection interface, facilitating the registration of the OidcFicSignedAssertionProvider within the dependency injection system of an ASP.NET Core application. It is typically used in applications leveraging Microsoft.Identity.Web to add support for OIDC Federated Identity Credential authentication flows. The method must be called during service configuration (e.g., in Startup.cs) and returns the updated IServiceCollection instance for chaining. No additional parameters are required beyond the service collection itself. Prerequisites include references to Microsoft.Extensions.DependencyInjection and Microsoft.Identity.Web. This approach is limited to environments supporting nullable reference types and assumes ASP.NET Core DI conventions.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.OidcFIC/PublicAPI/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n#nullable enable\nMicrosoft.Extensions.DependencyInjection.OidcFicSignedAssertionProviderExtensions\nstatic Microsoft.Extensions.DependencyInjection.OidcFicSignedAssertionProviderExtensions.AddOidcFic(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!\n```\n\n----------------------------------------\n\nTITLE: TokenAcquisitionAuthenticationProvider Class Definition\nDESCRIPTION: Authentication provider class that handles token acquisition and request authentication for Azure AD integration. Includes methods for authenticating HTTP requests and constructor for initialization.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.MicrosoftGraphBeta/PublicAPI/net6.0/InternalAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.TokenAcquisitionAuthenticationProvider\nMicrosoft.Identity.Web.TokenAcquisitionAuthenticationProvider.AuthenticateRequestAsync(System.Net.Http.HttpRequestMessage request) -> System.Threading.Tasks.Task\nMicrosoft.Identity.Web.TokenAcquisitionAuthenticationProvider.TokenAcquisitionAuthenticationProvider(Microsoft.Identity.Abstractions.IAuthorizationHeaderProvider authorizationHeaderProvider, Microsoft.Identity.Web.TokenAcquisitionAuthenticationProviderOption options) -> void\n```\n\n----------------------------------------\n\nTITLE: POST Operations in C#\nDESCRIPTION: Methods for making authenticated POST requests with both app and user contexts. Supports input/output type parameters and custom API options.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.DownstreamApi/PublicAPI/net9.0/InternalAPI.Shipped.txt#2025-04-23_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.DownstreamApi.PostForAppAsync<TInput, TOutput>(string? serviceName, TInput input, System.Action<Microsoft.Identity.Abstractions.DownstreamApiOptionsReadOnlyHttpMethod!>? downstreamApiOptionsOverride = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TOutput?>!\n```\n\n----------------------------------------\n\nTITLE: Defining General Constants in Microsoft.Identity.Web (C#)\nDESCRIPTION: Declares various constant string values used for configuration keys, authentication schemes, parameter names, and paths within the Microsoft Identity Web library. These include identifiers for Azure AD types ('AzureAd', 'AzureAdB2C'), the 'Bearer' scheme, common parameter names ('claims', 'domain_hint', 'login_hint', 'scope'), and default error/redirect paths.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.TokenAcquisition/PublicAPI/net462/PublicAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nconst Microsoft.Identity.Web.Constants.AzureAd = \"AzureAd\" -> string!\nconst Microsoft.Identity.Web.Constants.AzureAdB2C = \"AzureAdB2C\" -> string!\nconst Microsoft.Identity.Web.Constants.Bearer = \"Bearer\" -> string!\nconst Microsoft.Identity.Web.Constants.Claims = \"claims\" -> string!\nconst Microsoft.Identity.Web.Constants.DomainHint = \"domain_hint\" -> string!\nconst Microsoft.Identity.Web.Constants.ErrorPath = \"/MicrosoftIdentity/Account/Error\" -> string!\nconst Microsoft.Identity.Web.Constants.LoginHint = \"login_hint\" -> string!\nconst Microsoft.Identity.Web.Constants.Policy = \"policy\" -> string!\nconst Microsoft.Identity.Web.Constants.ResetPasswordPath = \"/MicrosoftIdentity/Account/ResetPassword\" -> string!\nconst Microsoft.Identity.Web.Constants.ReturnUrl = \"ReturnUrl\" -> string!\nconst Microsoft.Identity.Web.Constants.Scope = \"scope\" -> string!\nconst Microsoft.Identity.Web.Constants.SpaAuthCode = \"SpaAuthCode\" -> string!\n```\n\n----------------------------------------\n\nTITLE: Adding OIDC FIC Signed Assertion Provider Extension - Microsoft Identity Web - C#\nDESCRIPTION: Defines a static AddOidcFic extension method for IServiceCollection in .NET, allowing applications to register and configure OIDC Federated Identity Credential (FIC) signed assertion providers within the dependency injection pipeline. Depends on the Microsoft.Extensions.DependencyInjection namespace and assumes the project references the Microsoft Identity Web library. The method modifies the IServiceCollection to enable OIDC FIC provider injection for authentication scenarios. Expects IServiceCollection as a parameter and returns an updated IServiceCollection. Handles reference nullability with #nullable enable.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.OidcFIC/PublicAPI/net472/PublicAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n#nullable enable\nMicrosoft.Extensions.DependencyInjection.OidcFicSignedAssertionProviderExtensions\nstatic Microsoft.Extensions.DependencyInjection.OidcFicSignedAssertionProviderExtensions.AddOidcFic(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!\n```\n\n----------------------------------------\n\nTITLE: Installing Microsoft Identity Web Templates\nDESCRIPTION: Commands for installing Microsoft Identity Web templates for ASP.NET Core projects. These templates enable the creation of web applications and APIs with built-in authentication capabilities.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net7.0/PublicAPI.Unshipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet new --install Microsoft.Identity.Web.ProjectTemplates\n```\n\n----------------------------------------\n\nTITLE: Implementing BaseRequestExtensions in C#\nDESCRIPTION: Extension methods for configuring authentication and authorization options for Graph API requests.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.MicrosoftGraphBeta/PublicAPI/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic static class BaseRequestExtensions\n{\n    public static T WithAppOnly<T>(this T baseRequest, bool appOnly = true, string? tenant = null);\n    public static T WithAuthenticationOptions<T>(this T baseRequest, Action<AuthorizationHeaderProviderOptions> overrideAuthenticationOptions);\n    public static T WithAuthenticationScheme<T>(this T baseRequest, string authenticationScheme);\n    public static T WithScopes<T>(this T baseRequest, params string[] scopes);\n    public static T WithUser<T>(this T baseRequest, ClaimsPrincipal user);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining OidcIdpSignedAssertionLoader Members in C#\nDESCRIPTION: Specifies the members of the OidcIdpSignedAssertionLoader class in the Microsoft.Identity.Web.OidcFic namespace. It includes the definition of the CredentialSource property, the asynchronous LoadIfNeededAsync method for loading assertion credentials, the Name property, and the constructor signature detailing its dependencies (ILogger, IOptionsMonitor, IConfiguration, ITokenAcquirerFactory). This loader is responsible for acquiring OIDC IDP signed assertions when needed based on provided credential descriptions.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.OidcFIC/PublicAPI/net6.0/InternalAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n#nullable enable\nMicrosoft.Identity.Web.OidcFic.OidcIdpSignedAssertionLoader\nMicrosoft.Identity.Web.OidcFic.OidcIdpSignedAssertionLoader.CredentialSource.get -> Microsoft.Identity.Abstractions.CredentialSource\nMicrosoft.Identity.Web.OidcFic.OidcIdpSignedAssertionLoader.LoadIfNeededAsync(Microsoft.Identity.Abstractions.CredentialDescription! credentialDescription, Microsoft.Identity.Abstractions.CredentialSourceLoaderParameters? parameters = null) -> System.Threading.Tasks.Task!\nMicrosoft.Identity.Web.OidcFic.OidcIdpSignedAssertionLoader.Name.get -> string!\nMicrosoft.Identity.Web.OidcFic.OidcIdpSignedAssertionLoader.OidcIdpSignedAssertionLoader(Microsoft.Extensions.Logging.ILogger<Microsoft.Identity.Web.OidcFic.OidcIdpSignedAssertionLoader!>! logger, Microsoft.Extensions.Options.IOptionsMonitor<Microsoft.Identity.Abstractions.MicrosoftIdentityApplicationOptions!>! options, Microsoft.Extensions.Configuration.IConfiguration! configuration, Microsoft.Identity.Abstractions.ITokenAcquirerFactory! tokenAcquirerFactory) -> void\n```\n\n----------------------------------------\n\nTITLE: Implementing OIDC IdP Signed Assertion Provider - Microsoft Identity Web (C#)\nDESCRIPTION: Defines the OidcIdpSignedAssertionProvider class with a constructor for dependency injection and an overridden asynchronous method to generate client assertions. Key dependencies include ITokenAcquirerFactory and MicrosoftIdentityApplicationOptions, and an optional tokenExchangeUrl string. The provider's main role is to create signed assertions for client requests, leveraging assertion request options as inputs and providing a strongly typed ClientAssertion as output wrapped in a Task.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.OidcFIC/PublicAPI/net7.0/InternalAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Identity.Web.OidcFic.OidcIdpSignedAssertionProvider\nMicrosoft.Identity.Web.OidcFic.OidcIdpSignedAssertionProvider.OidcIdpSignedAssertionProvider(Microsoft.Identity.Abstractions.ITokenAcquirerFactory! tokenAcquirerFactory, Microsoft.Identity.Abstractions.MicrosoftIdentityApplicationOptions! options, string? tokenExchangeUrl) -> void\noverride Microsoft.Identity.Web.OidcFic.OidcIdpSignedAssertionProvider.GetClientAssertionAsync(Microsoft.Identity.Client.AssertionRequestOptions? assertionRequestOptions) -> System.Threading.Tasks.Task<Microsoft.Identity.Web.ClientAssertion!>!\n```\n\n----------------------------------------\n\nTITLE: CertificateSource Enum in C#\nDESCRIPTION: Defines the CertificateSource enumeration which specifies the various sources from which certificates can be loaded, such as direct certificate objects, Key Vault, base64 encoded values, file paths, and certificate stores.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.Certificate/PublicAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.CertificateSource\nMicrosoft.Identity.Web.CertificateSource.Base64Encoded = 2 -> Microsoft.Identity.Web.CertificateSource\nMicrosoft.Identity.Web.CertificateSource.Certificate = 0 -> Microsoft.Identity.Web.CertificateSource\nMicrosoft.Identity.Web.CertificateSource.KeyVault = 1 -> Microsoft.Identity.Web.CertificateSource\nMicrosoft.Identity.Web.CertificateSource.Path = 3 -> Microsoft.Identity.Web.CertificateSource\nMicrosoft.Identity.Web.CertificateSource.StoreWithDistinguishedName = 5 -> Microsoft.Identity.Web.CertificateSource\nMicrosoft.Identity.Web.CertificateSource.StoreWithThumbprint = 4 -> Microsoft.Identity.Web.CertificateSource\n```\n\n----------------------------------------\n\nTITLE: Defining TokenAcquisitionAuthenticationProvider Class\nDESCRIPTION: Authentication provider class that handles token acquisition and request authentication for Azure AD.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.MicrosoftGraphBeta/PublicAPI/net462/InternalAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class TokenAcquisitionAuthenticationProvider\n{\n    public TokenAcquisitionAuthenticationProvider(IAuthorizationHeaderProvider authorizationHeaderProvider, TokenAcquisitionAuthenticationProviderOption options);\n    public Task AuthenticateRequestAsync(HttpRequestMessage request);\n}\n```\n\n----------------------------------------\n\nTITLE: Utility Methods for Downstream API Operations in C#\nDESCRIPTION: These static methods provide utility functions for serialization, deserialization, and logging in downstream API operations.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.DownstreamApi/PublicAPI/net6.0/InternalAPI.Shipped.txt#2025-04-23_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.DownstreamApi.CallerSDKDetails.get -> System.Collections.Generic.Dictionary<string!, string!>!\n\nstatic Microsoft.Identity.Web.DownstreamApi.DeserializeOutputAsync<TOutput>(System.Net.Http.HttpResponseMessage! response, Microsoft.Identity.Abstractions.DownstreamApiOptions! effectiveOptions) -> System.Threading.Tasks.Task<TOutput?>!\n\nstatic Microsoft.Identity.Web.DownstreamApi.Logger.HttpRequestError(Microsoft.Extensions.Logging.ILogger! logger, string! ServiceName, string! BaseUrl, string! RelativePath, System.Exception? ex) -> void\n\nstatic Microsoft.Identity.Web.DownstreamApi.Logger.UnauthenticatedApiCall(Microsoft.Extensions.Logging.ILogger! logger, System.Exception? ex) -> void\n\nstatic Microsoft.Identity.Web.DownstreamApi.SerializeInput<TInput>(TInput input, Microsoft.Identity.Abstractions.DownstreamApiOptions! effectiveOptions) -> System.Net.Http.HttpContent?\n```\n\n----------------------------------------\n\nTITLE: Declaring OidcIdpSignedAssertionLoader Class (C#)\nDESCRIPTION: Declares the OidcIdpSignedAssertionLoader class within the Microsoft.Identity.Web.OidcFic namespace. This class is responsible for loading signed assertions from an OIDC Identity Provider based on provided credential descriptions.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.OidcFIC/PublicAPI/net472/InternalAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n#nullable enable\nMicrosoft.Identity.Web.OidcFic.OidcIdpSignedAssertionLoader\n```\n\n----------------------------------------\n\nTITLE: Authentication Builder Extensions\nDESCRIPTION: Static methods for configuring web API and web app authentication builders with Microsoft Identity\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net7.0/InternalAPI.Shipped.txt#2025-04-23_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.MicrosoftIdentityWebApiAuthenticationBuilder.CallsWebApiImplementation(Microsoft.Extensions.DependencyInjection.IServiceCollection! services, string! jwtBearerAuthenticationScheme, System.Action<Microsoft.Identity.Client.ConfidentialClientApplicationOptions!>! configureConfidentialClientApplicationOptions, Microsoft.Extensions.Configuration.IConfigurationSection? configurationSection = null) -> void\n\nstatic Microsoft.Identity.Web.MicrosoftIdentityWebAppAuthenticationBuilder.WebAppCallsWebApiImplementation(Microsoft.Extensions.DependencyInjection.IServiceCollection! services, System.Collections.Generic.IEnumerable<string!>? initialScopes, System.Action<Microsoft.Identity.Web.MicrosoftIdentityOptions!>? configureMicrosoftIdentityOptions, string! openIdConnectScheme, System.Action<Microsoft.Identity.Client.ConfidentialClientApplicationOptions!>? configureConfidentialClientApplicationOptions) -> void\n```\n\n----------------------------------------\n\nTITLE: Adding Microsoft Graph Beta Client Extensions\nDESCRIPTION: Extension methods for registering Microsoft Graph Beta client services in the dependency injection container. Provides three overloads: default configuration, configuration from IConfiguration section, and configuration via delegate.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.GraphServiceClientBeta/PublicAPI/net7.0/PublicAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n#nullable enable\nMicrosoft.Identity.Web.GraphBetaServiceCollectionExtensions\nstatic Microsoft.Identity.Web.GraphBetaServiceCollectionExtensions.AddMicrosoftGraphBeta(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!\nstatic Microsoft.Identity.Web.GraphBetaServiceCollectionExtensions.AddMicrosoftGraphBeta(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, Microsoft.Extensions.Configuration.IConfiguration! configurationSection) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!\nstatic Microsoft.Identity.Web.GraphBetaServiceCollectionExtensions.AddMicrosoftGraphBeta(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, System.Action<Microsoft.Identity.Web.GraphServiceClientOptions!>! configureMicrosoftGraphOptions) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!\n```\n\n----------------------------------------\n\nTITLE: Authentication and Authorization Handler Overrides\nDESCRIPTION: Override implementations for handling scope and permission-based authorization requirements in ASP.NET Core applications using Microsoft Identity Web\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net9.0/InternalAPI.Shipped.txt#2025-04-23_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Identity.Web.ScopeAuthorizationHandler.HandleRequirementAsync(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext! context, Microsoft.Identity.Web.ScopeAuthorizationRequirement! requirement) -> System.Threading.Tasks.Task!\noverride Microsoft.Identity.Web.ScopeOrAppPermissionAuthorizationHandler.HandleRequirementAsync(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext! context, Microsoft.Identity.Web.ScopeOrAppPermissionAuthorizationRequirement! requirement) -> System.Threading.Tasks.Task!\n```\n\n----------------------------------------\n\nTITLE: Declaring Microsoft Identity Web Constants - .NET/C#\nDESCRIPTION: Defines a set of string constants for user claims, configuration keys, and special values required by the Microsoft Identity Web library. These constants standardize claim names and settings such as 'objectidentifier', 'scope', 'roles', and endpoint paths (e.g., error and reset password paths) used in authentication and authorization flows. No external dependencies are required, and these are typically referenced throughout the codebase to ensure type safety and avoid magic strings. Inputs and outputs are string constants; all values must remain unique and semantically meaningful within authentication flows.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.TokenAcquisition/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nconst Microsoft.Identity.Web.ClaimConstants.Acr = \"acr\" -> string!\nconst Microsoft.Identity.Web.ClaimConstants.ClientInfo = \"client_info\" -> string!\nconst Microsoft.Identity.Web.ClaimConstants.Name = \"name\" -> string!\nconst Microsoft.Identity.Web.ClaimConstants.NameIdentifierId = \"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier\" -> string!\nconst Microsoft.Identity.Web.ClaimConstants.ObjectId = \"http://schemas.microsoft.com/identity/claims/objectidentifier\" -> string!\nconst Microsoft.Identity.Web.ClaimConstants.Oid = \"oid\" -> string!\nconst Microsoft.Identity.Web.ClaimConstants.Password = \"xms_password\" -> string!\nconst Microsoft.Identity.Web.ClaimConstants.PreferredUserName = \"preferred_username\" -> string!\nconst Microsoft.Identity.Web.ClaimConstants.Role = \"http://schemas.microsoft.com/ws/2008/06/identity/claims/role\" -> string!\nconst Microsoft.Identity.Web.ClaimConstants.Roles = \"roles\" -> string!\nconst Microsoft.Identity.Web.ClaimConstants.Scope = \"http://schemas.microsoft.com/identity/claims/scope\" -> string!\nconst Microsoft.Identity.Web.ClaimConstants.Scp = \"scp\" -> string!\nconst Microsoft.Identity.Web.ClaimConstants.Sub = \"sub\" -> string!\nconst Microsoft.Identity.Web.ClaimConstants.TenantId = \"http://schemas.microsoft.com/identity/claims/tenantid\" -> string!\nconst Microsoft.Identity.Web.ClaimConstants.Tfp = \"tfp\" -> string!\nconst Microsoft.Identity.Web.ClaimConstants.Tid = \"tid\" -> string!\nconst Microsoft.Identity.Web.ClaimConstants.UniqueObjectIdentifier = \"uid\" -> string!\nconst Microsoft.Identity.Web.ClaimConstants.UniqueTenantIdentifier = \"utid\" -> string!\nconst Microsoft.Identity.Web.ClaimConstants.UserFlow = \"http://schemas.microsoft.com/claims/authnclassreference\" -> string!\nconst Microsoft.Identity.Web.ClaimConstants.Username = \"xms_username\" -> string!\nconst Microsoft.Identity.Web.Constants.AzureAd = \"AzureAd\" -> string!\nconst Microsoft.Identity.Web.Constants.AzureAdB2C = \"AzureAdB2C\" -> string!\nconst Microsoft.Identity.Web.Constants.Bearer = \"Bearer\" -> string!\nconst Microsoft.Identity.Web.Constants.Claims = \"claims\" -> string!\nconst Microsoft.Identity.Web.Constants.DomainHint = \"domain_hint\" -> string!\nconst Microsoft.Identity.Web.Constants.ErrorPath = \"/MicrosoftIdentity/Account/Error\" -> string!\nconst Microsoft.Identity.Web.Constants.LoginHint = \"login_hint\" -> string!\nconst Microsoft.Identity.Web.Constants.Policy = \"policy\" -> string!\nconst Microsoft.Identity.Web.Constants.ResetPasswordPath = \"/MicrosoftIdentity/Account/ResetPassword\" -> string!\nconst Microsoft.Identity.Web.Constants.ReturnUrl = \"ReturnUrl\" -> string!\nconst Microsoft.Identity.Web.Constants.Scope = \"scope\" -> string!\nconst Microsoft.Identity.Web.Constants.SpaAuthCode = \"SpaAuthCode\" -> string!\n```\n\n----------------------------------------\n\nTITLE: Initializing AccountController with Options in C#\nDESCRIPTION: Defines the constructor for the `AccountController`. It requires an `IOptionsMonitor<MicrosoftIdentityOptions>` dependency, which provides access to the Microsoft Identity Web configuration options, injected via dependency injection.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.UI/PublicAPI.Shipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Identity.Web.UI.Areas.MicrosoftIdentity.Controllers.AccountController.AccountController(Microsoft.Extensions.Options.IOptionsMonitor<Microsoft.Identity.Web.MicrosoftIdentityOptions!>! microsoftIdentityOptionsMonitor) -> void\n```\n\n----------------------------------------\n\nTITLE: Adding Downstream API with Action in C#\nDESCRIPTION: Extends IServiceCollection to add a downstream API using an Action delegate. It allows for programmatic configuration of the DownstreamApiOptions.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.DownstreamApi/PublicAPI/net7.0/PublicAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.DownstreamApiExtensions.AddDownstreamApi(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, string! serviceName, System.Action<Microsoft.Identity.Abstractions.DownstreamApiOptions!>! configureOptions) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!\n```\n\n----------------------------------------\n\nTITLE: Defining OpenIdConnectMiddlewareDiagnostics Class in C#\nDESCRIPTION: This class provides diagnostic functionality for OpenIdConnect middleware. It includes a constructor and a method to subscribe to OpenIdConnect events.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net7.0/PublicAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.Resource.OpenIdConnectMiddlewareDiagnostics\nMicrosoft.Identity.Web.Resource.OpenIdConnectMiddlewareDiagnostics.OpenIdConnectMiddlewareDiagnostics(Microsoft.Extensions.Logging.ILogger<Microsoft.Identity.Web.Resource.OpenIdConnectMiddlewareDiagnostics!>! logger) -> void\nMicrosoft.Identity.Web.Resource.OpenIdConnectMiddlewareDiagnostics.Subscribe(Microsoft.AspNetCore.Authentication.OpenIdConnect.OpenIdConnectEvents! events) -> void\n```\n\n----------------------------------------\n\nTITLE: Microsoft Graph Options Class Definition in C#\nDESCRIPTION: Class for configuring Microsoft Graph options including base URL and scopes. Provides properties and methods for managing Graph client configuration.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.MicrosoftGraph/PublicAPI/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.MicrosoftGraphOptions.BaseUrl.get -> string!\nMicrosoft.Identity.Web.MicrosoftGraphOptions.BaseUrl.set -> void\nMicrosoft.Identity.Web.MicrosoftGraphOptions.MicrosoftGraphOptions() -> void\nMicrosoft.Identity.Web.MicrosoftGraphOptions.Scopes.get -> string?\nMicrosoft.Identity.Web.MicrosoftGraphOptions.Scopes.set -> void\n```\n\n----------------------------------------\n\nTITLE: Adding Graph Beta Service Client with Custom Lifetime\nDESCRIPTION: Extension method to register Microsoft Graph Beta client with a specified service lifetime in the dependency injection container.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.GraphServiceClientBeta/PublicAPI/net472/InternalAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.GraphBetaServiceCollectionExtensions.AddGraphBetaServiceClientWithLifetime(Microsoft.Extensions.DependencyInjection.IServiceCollection services, Microsoft.Extensions.DependencyInjection.ServiceLifetime lifetime) -> void\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication with Microsoft.Identity.Web in ASP.NET Core\nDESCRIPTION: This code snippet demonstrates how to configure Microsoft.Identity.Web for authentication in an ASP.NET Core application using the ConfigureServices method in Startup.cs. It shows how to add authentication with Microsoft Identity and configure token validation.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.Certificate/InternalAPI.Unshipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic void ConfigureServices(IServiceCollection services)\n{\n    services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)\n            .AddMicrosoftIdentityWebApi(Configuration.GetSection(\"AzureAd\"));\n    \n    // Other service configurations\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Downstream API with Configuration in C#\nDESCRIPTION: Adds a downstream API to the service collection using a configuration object. This method allows for configuring a single downstream API with a specific service name.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.DownstreamApi/PublicAPI/net462/PublicAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.DownstreamApiExtensions.AddDownstreamApi(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, string! serviceName, Microsoft.Extensions.Configuration.IConfiguration! configuration) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!\n```\n\n----------------------------------------\n\nTITLE: Implementing GraphServiceCollectionExtensions Methods\nDESCRIPTION: Extension methods for adding Microsoft Graph services to the dependency injection container.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.MicrosoftGraph/PublicAPI/net462/PublicAPI.Shipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic static class GraphServiceCollectionExtensions\n{\n    public static IServiceCollection AddMicrosoftGraph(this IServiceCollection services);\n    public static IServiceCollection AddMicrosoftGraph(this IServiceCollection services, Action<MicrosoftGraphOptions> configureMicrosoftGraphOptions);\n}\n```\n\n----------------------------------------\n\nTITLE: Microsoft Graph Service Collection Extensions\nDESCRIPTION: Extension methods for registering Microsoft Graph services with dependency injection container\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.MicrosoftGraph/PublicAPI/net7.0/PublicAPI.Shipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic static class GraphServiceCollectionExtensions\n{\n    public static IServiceCollection AddMicrosoftGraph(this IServiceCollection services);\n    public static IServiceCollection AddMicrosoftGraph(this IServiceCollection services, Action<MicrosoftGraphOptions> configureMicrosoftGraphOptions);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding OIDC FIC Signed Assertion Provider Service in C#\nDESCRIPTION: This C# extension method `AddOidcFic` is defined for `IServiceCollection`. It registers the necessary services for handling OIDC FIC signed assertions, likely within the context of the Microsoft Identity Web library. It takes the `IServiceCollection` as input (`this` parameter) and returns the modified `IServiceCollection` to allow for method chaining. The `#nullable enable` directive indicates the use of nullable reference types.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.OidcFIC/PublicAPI/net6.0/PublicAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n#nullable enable\nMicrosoft.Extensions.DependencyInjection.OidcFicSignedAssertionProviderExtensions\nstatic Microsoft.Extensions.DependencyInjection.OidcFicSignedAssertionProviderExtensions.AddOidcFic(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!\n```\n\n----------------------------------------\n\nTITLE: Asynchronously Loading OIDC Assertion in OidcIdpSignedAssertionLoader (C#)\nDESCRIPTION: Defines the asynchronous method `LoadIfNeededAsync` within `OidcIdpSignedAssertionLoader`. This method loads the OIDC signed assertion credential if it hasn't been loaded already, using the provided `credentialDescription` and optional `parameters`. It returns a `Task` representing the asynchronous operation.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.OidcFIC/PublicAPI/net8.0/InternalAPI.Shipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Identity.Web.OidcFic.OidcIdpSignedAssertionLoader.LoadIfNeededAsync(Microsoft.Identity.Abstractions.CredentialDescription! credentialDescription, Microsoft.Identity.Abstractions.CredentialSourceLoaderParameters? parameters = null) -> System.Threading.Tasks.Task!\n```\n\n----------------------------------------\n\nTITLE: Defining OIDC Signed Assertion Provider Members - Microsoft Identity Web - C#\nDESCRIPTION: This snippet specifies method and constructor signatures for the OidcIdpSignedAssertionProvider class, which is responsible for generating and providing client assertions for OIDC authentication flows. It features constructors that depend on token acquisition factories and various configuration options, and overrides an asynchronous method to fetch client assertions. Dependencies span Microsoft Identity Client, Microsoft Identity Abstractions, and .NET async patterns. The main input is an optional assertion request options object; output is a client assertion encapsulated in a Task, supporting extensible and asynchronous authentication operations.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.OidcFIC/PublicAPI/netstandard2.0/InternalAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.OidcFic.OidcIdpSignedAssertionProvider\nMicrosoft.Identity.Web.OidcFic.OidcIdpSignedAssertionProvider.OidcIdpSignedAssertionProvider(Microsoft.Identity.Abstractions.ITokenAcquirerFactory! tokenAcquirerFactory, Microsoft.Identity.Abstractions.MicrosoftIdentityApplicationOptions! options, string? tokenExchangeUrl) -> void\noverride Microsoft.Identity.Web.OidcFic.OidcIdpSignedAssertionProvider.GetClientAssertionAsync(Microsoft.Identity.Client.AssertionRequestOptions? assertionRequestOptions) -> System.Threading.Tasks.Task<Microsoft.Identity.Web.ClientAssertion!>!\n```\n\n----------------------------------------\n\nTITLE: Adding Microsoft Graph Beta Client Extensions\nDESCRIPTION: Extension methods for registering Microsoft Graph Beta client services in the dependency injection container. Provides multiple overloads for configuration through direct service addition, IConfiguration section, or delegate-based options configuration.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.GraphServiceClientBeta/PublicAPI/net472/PublicAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n#nullable enable\nMicrosoft.Identity.Web.GraphBetaServiceCollectionExtensions\nstatic Microsoft.Identity.Web.GraphBetaServiceCollectionExtensions.AddMicrosoftGraphBeta(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!\nstatic Microsoft.Identity.Web.GraphBetaServiceCollectionExtensions.AddMicrosoftGraphBeta(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, Microsoft.Extensions.Configuration.IConfiguration! configurationSection) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!\nstatic Microsoft.Identity.Web.GraphBetaServiceCollectionExtensions.AddMicrosoftGraphBeta(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, System.Action<Microsoft.Identity.Web.GraphServiceClientOptions!>! configureMicrosoftGraphOptions) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenID Connect Authentication with OWIN\nDESCRIPTION: This snippet shows how to configure OpenID Connect authentication using OWIN middleware. It sets up the authentication options including client ID, authority, post-logout redirect URI, and notification events for token validation.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net7.0/InternalAPI.Unshipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\napp.UseOpenIdConnectAuthentication(\n    new OpenIdConnectAuthenticationOptions\n    {\n        ClientId = clientId,\n        Authority = authority,\n        PostLogoutRedirectUri = postLogoutRedirectUri,\n        Notifications = new OpenIdConnectAuthenticationNotifications()\n        {\n            AuthenticationFailed = context => {\n                context.HandleResponse();\n                context.Response.Redirect(\"/Error?message=\" + context.Exception.Message);\n                return Task.FromResult(0);\n            }\n        }\n    });\n```\n\n----------------------------------------\n\nTITLE: Declaring Authentication and Claim Constants - Microsoft Identity Web - C#\nDESCRIPTION: Defines a set of readonly string constants representing standard claim types and configuration keywords for use with Microsoft Identity Web. These constants provide a strongly-typed, error-minimizing way to reference specific claims (such as \\'name\\', \\'oid\\', \\'roles\\') and configuration keys (such as \\'AzureAd\\', \\'Bearer\\', \\'scope\\'). No external dependencies are needed, but they must be referenced within Microsoft Identity Web-enabled .NET applications. There are no parameters; outputs are the string constant values, reducing typo-related errors and improving maintainability.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.TokenAcquisition/PublicAPI/net472/PublicAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nconst Microsoft.Identity.Web.ClaimConstants.Acr = \"acr\" -> string!\nconst Microsoft.Identity.Web.ClaimConstants.ClientInfo = \"client_info\" -> string!\nconst Microsoft.Identity.Web.ClaimConstants.Name = \"name\" -> string!\nconst Microsoft.Identity.Web.ClaimConstants.NameIdentifierId = \"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier\" -> string!\nconst Microsoft.Identity.Web.ClaimConstants.ObjectId = \"http://schemas.microsoft.com/identity/claims/objectidentifier\" -> string!\nconst Microsoft.Identity.Web.ClaimConstants.Oid = \"oid\" -> string!\nconst Microsoft.Identity.Web.ClaimConstants.Password = \"xms_password\" -> string!\nconst Microsoft.Identity.Web.ClaimConstants.PreferredUserName = \"preferred_username\" -> string!\nconst Microsoft.Identity.Web.ClaimConstants.Role = \"http://schemas.microsoft.com/ws/2008/06/identity/claims/role\" -> string!\nconst Microsoft.Identity.Web.ClaimConstants.Roles = \"roles\" -> string!\nconst Microsoft.Identity.Web.ClaimConstants.Scope = \"http://schemas.microsoft.com/identity/claims/scope\" -> string!\nconst Microsoft.Identity.Web.ClaimConstants.Scp = \"scp\" -> string!\nconst Microsoft.Identity.Web.ClaimConstants.Sub = \"sub\" -> string!\nconst Microsoft.Identity.Web.ClaimConstants.TenantId = \"http://schemas.microsoft.com/identity/claims/tenantid\" -> string!\nconst Microsoft.Identity.Web.ClaimConstants.Tfp = \"tfp\" -> string!\nconst Microsoft.Identity.Web.ClaimConstants.Tid = \"tid\" -> string!\nconst Microsoft.Identity.Web.ClaimConstants.UniqueObjectIdentifier = \"uid\" -> string!\nconst Microsoft.Identity.Web.ClaimConstants.UniqueTenantIdentifier = \"utid\" -> string!\nconst Microsoft.Identity.Web.ClaimConstants.UserFlow = \"http://schemas.microsoft.com/claims/authnclassreference\" -> string!\nconst Microsoft.Identity.Web.ClaimConstants.Username = \"xms_username\" -> string!\nconst Microsoft.Identity.Web.Constants.AzureAd = \"AzureAd\" -> string!\nconst Microsoft.Identity.Web.Constants.AzureAdB2C = \"AzureAdB2C\" -> string!\nconst Microsoft.Identity.Web.Constants.Bearer = \"Bearer\" -> string!\nconst Microsoft.Identity.Web.Constants.Claims = \"claims\" -> string!\nconst Microsoft.Identity.Web.Constants.DomainHint = \"domain_hint\" -> string!\nconst Microsoft.Identity.Web.Constants.ErrorPath = \"/MicrosoftIdentity/Account/Error\" -> string!\nconst Microsoft.Identity.Web.Constants.LoginHint = \"login_hint\" -> string!\nconst Microsoft.Identity.Web.Constants.Policy = \"policy\" -> string!\nconst Microsoft.Identity.Web.Constants.ResetPasswordPath = \"/MicrosoftIdentity/Account/ResetPassword\" -> string!\nconst Microsoft.Identity.Web.Constants.ReturnUrl = \"ReturnUrl\" -> string!\nconst Microsoft.Identity.Web.Constants.Scope = \"scope\" -> string!\nconst Microsoft.Identity.Web.Constants.SpaAuthCode = \"SpaAuthCode\" -> string!\n\n```\n\n----------------------------------------\n\nTITLE: Certificate Helper Methods in C#\nDESCRIPTION: Helper methods for certificate handling in Microsoft Identity Web, including determining storage flags, finding certificates by criteria, and parsing store location information.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.Certificate/InternalAPI.Shipped.txt#2025-04-23_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.CertificateLoaderHelper.DetermineX509KeyStorageFlag() -> System.Security.Cryptography.X509Certificates.X509KeyStorageFlags\nstatic Microsoft.Identity.Web.CertificateLoaderHelper.DetermineX509KeyStorageFlag(Microsoft.Identity.Abstractions.CredentialDescription! credentialDescription) -> System.Security.Cryptography.X509Certificates.X509KeyStorageFlags\nstatic Microsoft.Identity.Web.CertificateLoaderHelper.FindCertificateByCriterium(System.Security.Cryptography.X509Certificates.X509Store! x509Store, System.Security.Cryptography.X509Certificates.X509FindType identifierCriterium, string! certificateIdentifier) -> System.Security.Cryptography.X509Certificates.X509Certificate2?\nstatic Microsoft.Identity.Web.CertificateLoaderHelper.ParseStoreLocationAndName(string! storeDescription, ref System.Security.Cryptography.X509Certificates.StoreLocation certificateStoreLocation, ref System.Security.Cryptography.X509Certificates.StoreName certificateStoreName) -> void\n```\n\n----------------------------------------\n\nTITLE: Implementing GraphAuthenticationProvider in C#\nDESCRIPTION: Defines a GraphAuthenticationProvider class that implements authentication for Microsoft Graph API requests. It includes methods for authenticating requests and a constructor for dependency injection.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.GraphServiceClient/PublicAPI/net472/InternalAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n#nullable enable\nMicrosoft.Identity.Web.GraphAuthenticationProvider\nMicrosoft.Identity.Web.GraphAuthenticationProvider.AuthenticateRequestAsync(Microsoft.Kiota.Abstractions.RequestInformation! request, System.Collections.Generic.Dictionary<string!, object!>? additionalAuthenticationContext = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!\nMicrosoft.Identity.Web.GraphAuthenticationProvider.GraphAuthenticationProvider(Microsoft.Identity.Abstractions.IAuthorizationHeaderProvider! authorizationHeaderProvider, Microsoft.Identity.Web.GraphServiceClientOptions! defaultAuthenticationOptions) -> void\n```\n\n----------------------------------------\n\nTITLE: Microsoft Graph Authentication Builder Extensions\nDESCRIPTION: Extension methods for configuring Microsoft Graph authentication in the application builder pipeline\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.MicrosoftGraph/PublicAPI/net7.0/PublicAPI.Shipped.txt#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic static class MicrosoftGraphExtensions\n{\n    public static MicrosoftIdentityAppCallsWebApiAuthenticationBuilder AddMicrosoftGraph(this MicrosoftIdentityAppCallsWebApiAuthenticationBuilder builder, IConfigurationSection configurationSection);\n    public static MicrosoftIdentityAppCallsWebApiAuthenticationBuilder AddMicrosoftGraph(this MicrosoftIdentityAppCallsWebApiAuthenticationBuilder builder, string graphBaseUrl = \"https://graph.microsoft.com/v1.0\", string defaultScopes = \"user.read\");\n    public static MicrosoftIdentityAppCallsWebApiAuthenticationBuilder AddMicrosoftGraph(this MicrosoftIdentityAppCallsWebApiAuthenticationBuilder builder, Action<MicrosoftGraphOptions> configureMicrosoftGraphOptions);\n    public static MicrosoftIdentityAppCallsWebApiAuthenticationBuilder AddMicrosoftGraph(this MicrosoftIdentityAppCallsWebApiAuthenticationBuilder builder, Func<IAuthenticationProvider, GraphServiceClient> graphServiceClientFactory, IEnumerable<string> initialScopes);\n    public static MicrosoftIdentityAppCallsWebApiAuthenticationBuilder AddMicrosoftGraphAppOnly(this MicrosoftIdentityAppCallsWebApiAuthenticationBuilder builder, Func<IAuthenticationProvider, GraphServiceClient> graphServiceClientFactory);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Graph Beta Service Client in C#\nDESCRIPTION: Extension method to add a Microsoft Graph Beta service client to the dependency injection container with default lifetime.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.GraphServiceClientBeta/PublicAPI/net462/InternalAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.GraphBetaServiceCollectionExtensions.AddGraphBetaServiceClient(Microsoft.Extensions.DependencyInjection.IServiceCollection services) -> void\n```\n\n----------------------------------------\n\nTITLE: Calling Downstream API Asynchronously in C#\nDESCRIPTION: Method to call a downstream API asynchronously with various options for authentication and request customization.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.DownstreamApi/PublicAPI/net9.0/InternalAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.DownstreamApi.CallApiAsync(Microsoft.Identity.Abstractions.DownstreamApiOptions! downstreamApiOptions, System.Security.Claims.ClaimsPrincipal? user = null, System.Net.Http.HttpContent? content = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage!>!\n```\n\n----------------------------------------\n\nTITLE: Adding Downstream API to Authentication Builder with Configuration in C#\nDESCRIPTION: Extends MicrosoftIdentityAppCallsWebApiAuthenticationBuilder to add a downstream API using configuration. This method is specifically for use with the authentication builder.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.DownstreamApi/PublicAPI/net7.0/PublicAPI.Shipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.DownstreamApiExtensions.AddDownstreamApi(this Microsoft.Identity.Web.MicrosoftIdentityAppCallsWebApiAuthenticationBuilder! builder, string! serviceName, Microsoft.Extensions.Configuration.IConfiguration! configuration) -> Microsoft.Identity.Web.MicrosoftIdentityAppCallsWebApiAuthenticationBuilder!\n```\n\n----------------------------------------\n\nTITLE: Graph Service Collection Extensions\nDESCRIPTION: Extension methods for registering Microsoft Graph services with dependency injection.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.MicrosoftGraphBeta/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic static class GraphServiceCollectionExtensions {\n    public static IServiceCollection AddMicrosoftGraph(this IServiceCollection services);\n    public static IServiceCollection AddMicrosoftGraph(this IServiceCollection services, Action<MicrosoftGraphOptions> configureMicrosoftGraphOptions);\n}\n```\n\n----------------------------------------\n\nTITLE: Getting IDownstreamApi in ApiController (C# Extension)\nDESCRIPTION: This static extension method provides access to the IDownstreamApi service for the current ApiController instance. This service simplifies calling downstream web APIs protected by the Microsoft Identity Platform.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.OWIN/PublicAPI.Shipped.txt#2025-04-23_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Identity.Web.ApiControllerExtensions.GetDownstreamApi(this System.Web.Http.ApiController! _) -> Microsoft.Identity.Abstractions.IDownstreamApi!\n```\n\n----------------------------------------\n\nTITLE: Constructing OidcIdpSignedAssertionProvider (C#)\nDESCRIPTION: Defines the constructor signature for the `OidcIdpSignedAssertionProvider` class. It takes a token acquirer factory (`ITokenAcquirerFactory`), application options (`MicrosoftIdentityApplicationOptions`), and an optional token exchange URL string as parameters for its setup.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.OidcFIC/PublicAPI/net462/InternalAPI.Shipped.txt#2025-04-23_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Identity.Web.OidcFic.OidcIdpSignedAssertionProvider.OidcIdpSignedAssertionProvider(Microsoft.Identity.Abstractions.ITokenAcquirerFactory! tokenAcquirerFactory, Microsoft.Identity.Abstractions.MicrosoftIdentityApplicationOptions! options, string? tokenExchangeUrl) -> void\n```\n\n----------------------------------------\n\nTITLE: Implementing RequiredScopeAttribute in C#\nDESCRIPTION: This attribute class is used to specify required scopes for authentication. It includes properties for accepted scopes and configuration keys.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net7.0/PublicAPI.Shipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.Resource.RequiredScopeAttribute\nMicrosoft.Identity.Web.Resource.RequiredScopeAttribute.AcceptedScope.get -> string![]?\nMicrosoft.Identity.Web.Resource.RequiredScopeAttribute.AcceptedScope.set -> void\nMicrosoft.Identity.Web.Resource.RequiredScopeAttribute.IsReusable.get -> bool\nMicrosoft.Identity.Web.Resource.RequiredScopeAttribute.IsReusable.set -> void\nMicrosoft.Identity.Web.Resource.RequiredScopeAttribute.RequiredScopeAttribute() -> void\nMicrosoft.Identity.Web.Resource.RequiredScopeAttribute.RequiredScopeAttribute(params string![]! acceptedScopes) -> void\nMicrosoft.Identity.Web.Resource.RequiredScopeAttribute.RequiredScopesConfigurationKey.get -> string?\nMicrosoft.Identity.Web.Resource.RequiredScopeAttribute.RequiredScopesConfigurationKey.set -> void\n```\n\n----------------------------------------\n\nTITLE: Adding Microsoft Identity Web API Authentication to OWIN App (C# Extension)\nDESCRIPTION: This extension method configures the OWIN pipeline (IAppBuilder) to add Microsoft Identity Platform authentication for protecting a web API. It utilizes the provided OwinTokenAcquirerFactory and allows customization of options.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.OWIN/PublicAPI.Shipped.txt#2025-04-23_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Identity.Web.AppBuilderExtension.AddMicrosoftIdentityWebApi(this Owin.IAppBuilder! app, Microsoft.Identity.Web.OWIN.OwinTokenAcquirerFactory! tokenAcquirerFactory, System.Action<Microsoft.Identity.Abstractions.MicrosoftIdentityApplicationOptions!>? configureMicrosoftIdentityApplicationOptions = null, System.Action<Microsoft.Owin.Security.OAuth.OAuthBearerAuthenticationOptions!>? updateOptions = null, string! configurationSection = \"AzureAd\") -> Owin.IAppBuilder!\n```\n\n----------------------------------------\n\nTITLE: Defining Claim and Config Constants in Microsoft.Identity.Web (C#)\nDESCRIPTION: This snippet declares a set of public constant strings representing standard claim URIs, property names, and configuration verbs used by Microsoft.Identity.Web for Azure AD authentication and authorization. These constants are intended for use throughout the library and by consumer applications to ensure consistent usage of claim and config names. No external dependencies are required beyond .NET and the Microsoft.Identity.Web namespace; values are strings intended for use in claims mapping, HTTP header population, or token validation logic.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.TokenAcquisition/PublicAPI/net7.0/PublicAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nconst Microsoft.Identity.Web.ClaimConstants.Acr = \"acr\" -> string!\nconst Microsoft.Identity.Web.ClaimConstants.ClientInfo = \"client_info\" -> string!\nconst Microsoft.Identity.Web.ClaimConstants.Name = \"name\" -> string!\nconst Microsoft.Identity.Web.ClaimConstants.NameIdentifierId = \"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier\" -> string!\nconst Microsoft.Identity.Web.ClaimConstants.ObjectId = \"http://schemas.microsoft.com/identity/claims/objectidentifier\" -> string!\nconst Microsoft.Identity.Web.ClaimConstants.Oid = \"oid\" -> string!\nconst Microsoft.Identity.Web.ClaimConstants.Password = \"xms_password\" -> string!\nconst Microsoft.Identity.Web.ClaimConstants.PreferredUserName = \"preferred_username\" -> string!\nconst Microsoft.Identity.Web.ClaimConstants.Role = \"http://schemas.microsoft.com/ws/2008/06/identity/claims/role\" -> string!\nconst Microsoft.Identity.Web.ClaimConstants.Roles = \"roles\" -> string!\nconst Microsoft.Identity.Web.ClaimConstants.Scope = \"http://schemas.microsoft.com/identity/claims/scope\" -> string!\nconst Microsoft.Identity.Web.ClaimConstants.Scp = \"scp\" -> string!\nconst Microsoft.Identity.Web.ClaimConstants.Sub = \"sub\" -> string!\nconst Microsoft.Identity.Web.ClaimConstants.TenantId = \"http://schemas.microsoft.com/identity/claims/tenantid\" -> string!\nconst Microsoft.Identity.Web.ClaimConstants.Tfp = \"tfp\" -> string!\nconst Microsoft.Identity.Web.ClaimConstants.Tid = \"tid\" -> string!\nconst Microsoft.Identity.Web.ClaimConstants.UniqueObjectIdentifier = \"uid\" -> string!\nconst Microsoft.Identity.Web.ClaimConstants.UniqueTenantIdentifier = \"utid\" -> string!\nconst Microsoft.Identity.Web.ClaimConstants.UserFlow = \"http://schemas.microsoft.com/claims/authnclassreference\" -> string!\nconst Microsoft.Identity.Web.ClaimConstants.Username = \"xms_username\" -> string!\nconst Microsoft.Identity.Web.Constants.AzureAd = \"AzureAd\" -> string!\nconst Microsoft.Identity.Web.Constants.AzureAdB2C = \"AzureAdB2C\" -> string!\nconst Microsoft.Identity.Web.Constants.Bearer = \"Bearer\" -> string!\nconst Microsoft.Identity.Web.Constants.Claims = \"claims\" -> string!\nconst Microsoft.Identity.Web.Constants.DomainHint = \"domain_hint\" -> string!\nconst Microsoft.Identity.Web.Constants.ErrorPath = \"/MicrosoftIdentity/Account/Error\" -> string!\nconst Microsoft.Identity.Web.Constants.LoginHint = \"login_hint\" -> string!\nconst Microsoft.Identity.Web.Constants.Policy = \"policy\" -> string!\nconst Microsoft.Identity.Web.Constants.ResetPasswordPath = \"/MicrosoftIdentity/Account/ResetPassword\" -> string!\nconst Microsoft.Identity.Web.Constants.ReturnUrl = \"ReturnUrl\" -> string!\nconst Microsoft.Identity.Web.Constants.Scope = \"scope\" -> string!\nconst Microsoft.Identity.Web.Constants.SpaAuthCode = \"SpaAuthCode\" -> string!\n```\n\n----------------------------------------\n\nTITLE: Constructing OidcIdpSignedAssertionProvider Instance (C#)\nDESCRIPTION: Defines the constructor for the `OidcIdpSignedAssertionProvider` class. It requires a token acquirer factory (`ITokenAcquirerFactory`), application options (`MicrosoftIdentityApplicationOptions`), and an optional `tokenExchangeUrl` for its initialization, preparing it to provide assertions.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.OidcFIC/PublicAPI/net8.0/InternalAPI.Shipped.txt#2025-04-23_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Identity.Web.OidcFic.OidcIdpSignedAssertionProvider.OidcIdpSignedAssertionProvider(Microsoft.Identity.Abstractions.ITokenAcquirerFactory! tokenAcquirerFactory, Microsoft.Identity.Abstractions.MicrosoftIdentityApplicationOptions! options, string? tokenExchangeUrl) -> void\n```\n\n----------------------------------------\n\nTITLE: Loading Certificate from Azure Key Vault\nDESCRIPTION: Static async method to load an X509 certificate from Azure Key Vault using a managed identity. Takes key vault URL, certificate name, optional managed identity client ID, and storage flags as parameters.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.Certificate/InternalAPI.Shipped.txt#2025-04-23_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Identity.Web.KeyVaultCertificateLoader.LoadFromKeyVaultAsync(string! keyVaultUrl, string! certificateName, string? managedIdentityClientId, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags x509KeyStorageFlags) -> System.Threading.Tasks.Task<System.Security.Cryptography.X509Certificates.X509Certificate2?>!\n```\n\n----------------------------------------\n\nTITLE: Defining Constants for Microsoft Identity Web Authentication\nDESCRIPTION: This snippet defines various string constants used throughout the Microsoft Identity Web library for Azure AD and App Services authentication, including environment variables, authentication providers, and token headers.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net7.0/InternalAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n#nullable enable\nconst Microsoft.Identity.Web.AppContextSwitches.UseClaimsIdentityTypeSwitchName = \"Microsoft.IdentityModel.Tokens.UseClaimsIdentityType\" -> string!\nconst Microsoft.Identity.Web.AppServicesAuthenticationInformation.AppServicesAuthAAD = \"AAD\" -> string!\nconst Microsoft.Identity.Web.AppServicesAuthenticationInformation.AppServicesAuthAzureActiveDirectory = \"AzureActiveDirectory\" -> string!\nconst Microsoft.Identity.Web.AppServicesAuthenticationInformation.AppServicesAuthClientIdEnvironmentVariable = \"WEBSITE_AUTH_CLIENT_ID\" -> string!\nconst Microsoft.Identity.Web.AppServicesAuthenticationInformation.AppServicesAuthClientSecretEnvironmentVariable = \"WEBSITE_AUTH_CLIENT_SECRET\" -> string!\nconst Microsoft.Identity.Web.AppServicesAuthenticationInformation.AppServicesAuthClientSecretSettingName = \"WEBSITE_AUTH_CLIENT_SECRET_SETTING_NAME\" -> string!\nconst Microsoft.Identity.Web.AppServicesAuthenticationInformation.AppServicesAuthDebugHeadersEnvironmentVariable = \"APP_SERVICES_AUTH_LOCAL_DEBUG\" -> string!\nconst Microsoft.Identity.Web.AppServicesAuthenticationInformation.AppServicesAuthEnabledEnvironmentVariable = \"WEBSITE_AUTH_ENABLED\" -> string!\nconst Microsoft.Identity.Web.AppServicesAuthenticationInformation.AppServicesAuthIdentityProviderEnvironmentVariable = \"WEBSITE_AUTH_DEFAULT_PROVIDER\" -> string!\nconst Microsoft.Identity.Web.AppServicesAuthenticationInformation.AppServicesAuthIdTokenHeader = \"X-MS-TOKEN-AAD-ID-TOKEN\" -> string!\nconst Microsoft.Identity.Web.AppServicesAuthenticationInformation.AppServicesAuthLogoutPathEnvironmentVariable = \"WEBSITE_AUTH_LOGOUT_PATH\" -> string!\nconst Microsoft.Identity.Web.AppServicesAuthenticationInformation.AppServicesAuthOpenIdIssuerEnvironmentVariable = \"WEBSITE_AUTH_OPENID_ISSUER\" -> string!\nconst Microsoft.Identity.Web.AppServicesAuthenticationInformation.AppServicesWebSiteAuthApiPrefix = \"WEBSITE_AUTH_API_PREFIX\" -> string!\n```\n\n----------------------------------------\n\nTITLE: Defining RequestOptionsExtension Class in C#\nDESCRIPTION: Defines static extension methods for IList<IRequestOption> to configure various authentication and request options for Microsoft Graph API calls.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.GraphServiceClient/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.RequestOptionsExtension\nstatic Microsoft.Identity.Web.RequestOptionsExtension.WithAppOnly(this System.Collections.Generic.IList<Microsoft.Kiota.Abstractions.IRequestOption!>! options, bool appOnly = true, string? tenant = null) -> System.Collections.Generic.IList<Microsoft.Kiota.Abstractions.IRequestOption!>!\nstatic Microsoft.Identity.Web.RequestOptionsExtension.WithAuthenticationOptions(this System.Collections.Generic.IList<Microsoft.Kiota.Abstractions.IRequestOption!>! options, Microsoft.Identity.Web.GraphAuthenticationOptions! optionsValue) -> System.Collections.Generic.IList<Microsoft.Kiota.Abstractions.IRequestOption!>!\nstatic Microsoft.Identity.Web.RequestOptionsExtension.WithAuthenticationOptions(this System.Collections.Generic.IList<Microsoft.Kiota.Abstractions.IRequestOption!>! options, System.Action<Microsoft.Identity.Web.GraphAuthenticationOptions!>! optionsValue) -> System.Collections.Generic.IList<Microsoft.Kiota.Abstractions.IRequestOption!>!\nstatic Microsoft.Identity.Web.RequestOptionsExtension.WithScopes(this System.Collections.Generic.IList<Microsoft.Kiota.Abstractions.IRequestOption!>! options, params string![]! scopes) -> System.Collections.Generic.IList<Microsoft.Kiota.Abstractions.IRequestOption!>!\nstatic Microsoft.Identity.Web.RequestOptionsExtension.WithUser(this System.Collections.Generic.IList<Microsoft.Kiota.Abstractions.IRequestOption!>! options, System.Security.Claims.ClaimsPrincipal! user) -> System.Collections.Generic.IList<Microsoft.Kiota.Abstractions.IRequestOption!>!\n```\n\n----------------------------------------\n\nTITLE: Configuring JWT Bearer Options with Azure AD in ASP.NET Core\nDESCRIPTION: This snippet demonstrates how to configure JWT Bearer authentication options in an ASP.NET Core application using Microsoft Identity Web. It shows how to set up token validation parameters including issuer validation, audience validation, and signing key resolution.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net472/PublicAPI.Unshipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nservices.Configure<JwtBearerOptions>(JwtBearerDefaults.AuthenticationScheme, options =>\n{\n    options.TokenValidationParameters.IssuerValidator = AadIssuerValidator.GetIssuerValidator(options.Authority);\n    options.TokenValidationParameters.ValidAudiences = GetValidAudiences();\n    options.TokenValidationParameters.ValidIssuers = GetValidIssuers();\n    options.TokenValidationParameters.SigningKeys = GetSigningKeys(); // Uses <SigningKey>k__BackingField from the options\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Base Request Extensions in C#\nDESCRIPTION: Extension methods for configuring authentication and authorization options on base requests including app-only auth, scopes, and user claims.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.MicrosoftGraphBeta/PublicAPI/net9.0/PublicAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic static class BaseRequestExtensions\n{\n    public static T WithAppOnly<T>(this T baseRequest, bool appOnly = true, string? tenant = null);\n    public static T WithAuthenticationOptions<T>(this T baseRequest, Action<AuthorizationHeaderProviderOptions> overrideAuthenticationOptions);\n    public static T WithAuthenticationScheme<T>(this T baseRequest, string authenticationScheme);\n    public static T WithScopes<T>(this T baseRequest, params string[] scopes);\n    public static T WithUser<T>(this T baseRequest, ClaimsPrincipal user);\n}\n```\n\n----------------------------------------\n\nTITLE: Override Methods for Client Assertion Providers in C#\nDESCRIPTION: Overridden implementations of the GetClientAssertionAsync method for specific provider classes. These implementations generate client assertions according to their specific authentication mechanisms.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.Certificateless/PublicAPI.Shipped.txt#2025-04-23_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Identity.Web.AzureIdentityForKubernetesClientAssertion.GetClientAssertionAsync(Microsoft.Identity.Client.AssertionRequestOptions? assertionRequestOptions) -> System.Threading.Tasks.Task<Microsoft.Identity.Web.ClientAssertion!>!\n```\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Identity.Web.ManagedIdentityClientAssertion.GetClientAssertionAsync(Microsoft.Identity.Client.AssertionRequestOptions? assertionRequestOptions) -> System.Threading.Tasks.Task<Microsoft.Identity.Web.ClientAssertion!>!\n```\n\n----------------------------------------\n\nTITLE: Initializing DownstreamApi Class Constructor\nDESCRIPTION: Constructor for the DownstreamApi class that initializes required dependencies for making authenticated API calls.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.DownstreamApi/PublicAPI/net7.0/InternalAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.DownstreamApi.DownstreamApi(Microsoft.Identity.Abstractions.IAuthorizationHeaderProvider! authorizationHeaderProvider, Microsoft.Extensions.Options.IOptionsMonitor<Microsoft.Identity.Abstractions.DownstreamApiOptions!>! namedDownstreamApiOptions, System.Net.Http.IHttpClientFactory! httpClientFactory, Microsoft.Extensions.Logging.ILogger<Microsoft.Identity.Web.DownstreamApi!>! logger) -> void\n```\n\n----------------------------------------\n\nTITLE: Configuring Microsoft Identity Web API with Microsoft Graph Integration\nDESCRIPTION: This code shows how to configure Microsoft Identity Web API authentication with Microsoft Graph integration, demonstrating how to chain configuration methods to build a complete auth setup with downstream API access.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.Diagnostics/PublicAPI/net9.0/PublicAPI.Shipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddMicrosoftIdentityWebApiAuthentication(Configuration, \"AzureAd\")\n        .EnableTokenAcquisitionToCallDownstreamApi()\n        .AddMicrosoftGraph(Configuration.GetSection(\"Graph\"))\n        .AddInMemoryTokenCaches();\n```\n\n----------------------------------------\n\nTITLE: Declaring OidcIdpSignedAssertionProvider Class (C#)\nDESCRIPTION: Declares the OidcIdpSignedAssertionProvider class within the Microsoft.Identity.Web.OidcFic namespace. This class is responsible for providing client assertions based on OIDC ID tokens obtained through a federated identity flow.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.OidcFIC/PublicAPI/net472/InternalAPI.Shipped.txt#2025-04-23_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Identity.Web.OidcFic.OidcIdpSignedAssertionProvider\n```\n\n----------------------------------------\n\nTITLE: Getting GraphServiceClient in ControllerBase (C# Extension)\nDESCRIPTION: This static extension method retrieves an instance of the Microsoft Graph SDK's GraphServiceClient for the current System.Web.Mvc.ControllerBase. This facilitates interaction with the Microsoft Graph API within an MVC controller action.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.OWIN/PublicAPI.Shipped.txt#2025-04-23_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Identity.Web.ControllerBaseExtensions.GetGraphServiceClient(this System.Web.Mvc.ControllerBase! _) -> Microsoft.Graph.GraphServiceClient!\n```\n\n----------------------------------------\n\nTITLE: Getting CredentialSource Property in OidcIdpSignedAssertionLoader (C#)\nDESCRIPTION: Retrieves the `CredentialSource` property from an `OidcIdpSignedAssertionLoader` instance. This property indicates the source type (e.g., configuration, file) from which the OIDC assertion credential was loaded, returning a `Microsoft.Identity.Abstractions.CredentialSource` enum value.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.OidcFIC/PublicAPI/net8.0/InternalAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Identity.Web.OidcFic.OidcIdpSignedAssertionLoader.CredentialSource.get -> Microsoft.Identity.Abstractions.CredentialSource\n```\n\n----------------------------------------\n\nTITLE: Adding Authentication Middleware to Web API Pipeline\nDESCRIPTION: Adds the authentication middleware to the ASP.NET Core HTTP request pipeline to enable token validation for protected API endpoints.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/tests/DevApps/B2CWebAppCallsWebApi/README-incremental-instructions.md#2025-04-23_snippet_6\n\nLANGUAGE: CSharp\nCODE:\n```\napp.UseAuthentication();\napp.UseMvc();\n```\n\n----------------------------------------\n\nTITLE: Microsoft Graph Options Class\nDESCRIPTION: Configuration class for Microsoft Graph client options including base URL and authentication scopes.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.MicrosoftGraphBeta/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic class MicrosoftGraphOptions {\n    public MicrosoftGraphOptions();\n    public string BaseUrl { get; set; }\n    public string? Scopes { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: ClientAssertionProviderBase Class in C#\nDESCRIPTION: Abstract base class for client assertion providers with common functionality. Defines the contract for classes that provide client assertions for authentication.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.Certificateless/PublicAPI.Shipped.txt#2025-04-23_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.ClientAssertionProviderBase\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.ClientAssertionProviderBase.ClientAssertionProviderBase() -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.ClientAssertionProviderBase.Expiry.get -> System.DateTimeOffset?\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.ClientAssertionProviderBase.GetSignedAssertionAsync(Microsoft.Identity.Client.AssertionRequestOptions? assertionRequestOptions) -> System.Threading.Tasks.Task<string!>!\n```\n\n----------------------------------------\n\nTITLE: Performing DELETE Request for User Authentication in C#\nDESCRIPTION: Method to perform a DELETE request to a downstream API using user authentication, with options for input and output serialization and user claims.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.DownstreamApi/PublicAPI/net9.0/InternalAPI.Shipped.txt#2025-04-23_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.DownstreamApi.DeleteForUserAsync<TInput, TOutput>(string? serviceName, TInput input, System.Action<Microsoft.Identity.Abstractions.DownstreamApiOptionsReadOnlyHttpMethod!>? downstreamApiOptionsOverride = null, System.Security.Claims.ClaimsPrincipal? user = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TOutput?>!\n```\n\n----------------------------------------\n\nTITLE: App Context and Services Authentication Properties\nDESCRIPTION: Static properties and methods for accessing app context switches and App Services authentication information\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net7.0/InternalAPI.Shipped.txt#2025-04-23_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.AppContextSwitches.ResetState() -> void\nstatic Microsoft.Identity.Web.AppContextSwitches.UseClaimsIdentityType.get -> bool\nstatic Microsoft.Identity.Web.AppServicesAuthenticationInformation.ClientId.get -> string?\nstatic Microsoft.Identity.Web.AppServicesAuthenticationInformation.ClientSecret.get -> string?\nstatic Microsoft.Identity.Web.AppServicesAuthenticationInformation.Issuer.get -> string?\n```\n\n----------------------------------------\n\nTITLE: Argument Validation Methods\nDESCRIPTION: Collection of static methods for argument validation and throwing appropriate exceptions. Includes checks for null, empty collections, and out of range values.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.Diagnostics/PublicAPI/net9.0/InternalAPI.Shipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.Throws.IfNull<T>(T argument, string! paramName = \"\") -> T\nstatic Microsoft.Identity.Web.Throws.IfNullOrEmpty(string? argument, string! paramName = \"\") -> string!\nstatic Microsoft.Identity.Web.Throws.IfNullOrWhitespace(string? argument, string! paramName = \"\") -> string!\nstatic Microsoft.Identity.Web.Throws.IfOutOfRange<T>(T argument, string! paramName = \"\") -> T\nstatic Microsoft.Identity.Web.Throws.IfBufferTooSmall(int bufferSize, int requiredSize, string! paramName = \"\") -> void\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure AD Authentication in ASP.NET Core\nDESCRIPTION: This snippet shows how to configure Azure AD authentication in an ASP.NET Core application using Microsoft Identity Web. It sets up the authentication scheme and configures options such as instance, tenant, client ID, and callback path.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/netstandard2.0/PublicAPI.Unshipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddAuthentication(OpenIdConnectDefaults.AuthenticationScheme)\n    .AddMicrosoftIdentityWebApp(Configuration.GetSection(\"AzureAd\"));\n```\n\n----------------------------------------\n\nTITLE: Base Request Extension Methods\nDESCRIPTION: Extension methods for customizing graph requests with authentication options, scopes, and user context.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.MicrosoftGraph/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic static class BaseRequestExtensions\n{\n    public static T WithAppOnly<T>(this T baseRequest, bool appOnly = true, string? tenant = null);\n    public static T WithAuthenticationOptions<T>(this T baseRequest, Action<AuthorizationHeaderProviderOptions> overrideAuthenticationOptions);\n    public static T WithAuthenticationScheme<T>(this T baseRequest, string authenticationScheme);\n    public static T WithScopes<T>(this T baseRequest, params string[] scopes);\n    public static T WithUser<T>(this T baseRequest, ClaimsPrincipal user);\n}\n```\n\n----------------------------------------\n\nTITLE: ManagedIdentityClientAssertion Class in C#\nDESCRIPTION: Class that provides client assertions using Azure Managed Identity. It supports different initialization options including custom token exchange URLs and logging.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.Certificateless/PublicAPI.Shipped.txt#2025-04-23_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.ManagedIdentityClientAssertion\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.ManagedIdentityClientAssertion.ManagedIdentityClientAssertion(string? managedIdentityClientId) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.ManagedIdentityClientAssertion.ManagedIdentityClientAssertion(string? managedIdentityClientId, string? tokenExchangeUrl) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.ManagedIdentityClientAssertion.ManagedIdentityClientAssertion(string? managedIdentityClientId, string? tokenExchangeUrl, Microsoft.Extensions.Logging.ILogger? logger) -> void\n```\n\n----------------------------------------\n\nTITLE: Graph Service Collection Extensions - C#\nDESCRIPTION: Extension methods for adding Microsoft Graph services to the dependency injection container\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.MicrosoftGraph/PublicAPI/net9.0/PublicAPI.Shipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic static class GraphServiceCollectionExtensions\n{\n    public static IServiceCollection AddMicrosoftGraph(this IServiceCollection services);\n    public static IServiceCollection AddMicrosoftGraph(this IServiceCollection services, Action<MicrosoftGraphOptions> configureMicrosoftGraphOptions);\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Scopes for Graph Requests in C#\nDESCRIPTION: An extension method for Microsoft Graph base request types. It specifies the permission scopes required for this specific API call, overriding any default scopes.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.MicrosoftGraph/PublicAPI/net6.0/PublicAPI.Shipped.txt#2025-04-23_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Identity.Web.BaseRequestExtensions.WithScopes<T>(this T baseRequest, params string![]! scopes) -> T\n```\n\n----------------------------------------\n\nTITLE: Adding Microsoft Identity Web App Authentication to OWIN App (C# Extension)\nDESCRIPTION: This extension method configures the OWIN pipeline (IAppBuilder) to add Microsoft Identity Platform authentication (typically OpenID Connect) for a web application. It uses the OwinTokenAcquirerFactory and allows customization of application and OpenID Connect options.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.OWIN/PublicAPI.Shipped.txt#2025-04-23_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Identity.Web.AppBuilderExtension.AddMicrosoftIdentityWebApp(this Owin.IAppBuilder! app, Microsoft.Identity.Web.OWIN.OwinTokenAcquirerFactory! tokenAcquirerFactory, System.Action<Microsoft.Identity.Abstractions.MicrosoftIdentityApplicationOptions!>? configureMicrosoftIdentityApplicationOptions = null, System.Action<Microsoft.Owin.Security.OpenIdConnect.OpenIdConnectAuthenticationOptions!>? updateOptions = null, string! configurationSection = \"AzureAd\") -> Owin.IAppBuilder!\n```\n\n----------------------------------------\n\nTITLE: DefaultCertificateLoader Class API in C#\nDESCRIPTION: Implements the certificate loading functionality for Microsoft Identity Web. Provides methods to load certificates from various sources, manage certificate lifecycle, and support asynchronous operations.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.Certificate/PublicAPI.Shipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.DefaultCertificateLoader\nMicrosoft.Identity.Web.DefaultCertificateLoader.DefaultCertificateLoader() -> void\nMicrosoft.Identity.Web.DefaultCertificateLoader.DefaultCertificateLoader(Microsoft.Extensions.Logging.ILogger<Microsoft.Identity.Web.DefaultCertificateLoader!>? logger) -> void\nMicrosoft.Identity.Web.DefaultCertificateLoader.DefaultCertificateLoader(System.Collections.Generic.IEnumerable<Microsoft.Identity.Abstractions.ICustomSignedAssertionProvider!>! customSignedAssertionProviders, Microsoft.Extensions.Logging.ILogger<Microsoft.Identity.Web.DefaultCertificateLoader!>? logger) -> void\nMicrosoft.Identity.Web.DefaultCertificateLoader.LoadIfNeeded(Microsoft.Identity.Web.CertificateDescription! certificateDescription) -> void\nMicrosoft.Identity.Web.DefaultCertificateLoader.LoadIfNeededAsync(Microsoft.Identity.Web.CertificateDescription! certificateDescription) -> System.Threading.Tasks.Task!\n```\n\n----------------------------------------\n\nTITLE: Configuring Microsoft Graph Base Options Class\nDESCRIPTION: MicrosoftGraphOptions class definition containing base URL and scopes configuration for Microsoft Graph API connections\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.MicrosoftGraph/PublicAPI/net7.0/PublicAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MicrosoftGraphOptions\n{\n    public string BaseUrl { get; set; }\n    public string? Scopes { get; set; }\n    public MicrosoftGraphOptions() { }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Downstream API with Configuration in C#\nDESCRIPTION: Extends IServiceCollection to add a downstream API service using a configuration object. This method allows for easy setup of downstream API calls in a Microsoft Identity Web application.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.DownstreamApi/PublicAPI/net9.0/PublicAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.DownstreamApiExtensions.AddDownstreamApi(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, string! serviceName, Microsoft.Extensions.Configuration.IConfiguration! configuration) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!\n```\n\n----------------------------------------\n\nTITLE: Token Acquisition Authentication Provider Options Class\nDESCRIPTION: Defines configuration options for token acquisition including authentication scheme, scopes, tenant settings, and user claims\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.MicrosoftGraphBeta/PublicAPI/netstandard2.0/InternalAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nclass TokenAcquisitionAuthenticationProviderOption\n{\n    public bool? AppOnly { get; set; }\n    public string AuthenticationScheme { get; set; }\n    public Action<AuthorizationHeaderProviderOptions> AuthorizationHeaderProviderOptions { get; set; }\n    public string[] Scopes { get; set; }\n    public string Tenant { get; set; }\n    public ClaimsPrincipal User { get; set; }\n    public TokenAcquisitionAuthenticationProviderOption();\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Graph Beta Service Client with Default Lifetime in C#\nDESCRIPTION: This method adds the Microsoft Graph Beta service client to the dependency injection container with the default lifetime. It extends the IServiceCollection interface.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.GraphServiceClientBeta/InternalAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.GraphBetaServiceCollectionExtensions.AddGraphBetaServiceClient(Microsoft.Extensions.DependencyInjection.IServiceCollection services) -> void\n```\n\n----------------------------------------\n\nTITLE: Configuring Microsoft Graph Options Class\nDESCRIPTION: Class definition for MicrosoftGraphOptions containing base URL and scopes configuration for Microsoft Graph API integration.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.MicrosoftGraphBeta/PublicAPI/net7.0/PublicAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class MicrosoftGraphOptions\n{\n    public string BaseUrl { get; set; }\n    public string? Scopes { get; set; }\n    public MicrosoftGraphOptions() { }\n}\n```\n\n----------------------------------------\n\nTITLE: Graph Service Client Extension Methods\nDESCRIPTION: Static extension methods for IServiceCollection to register Graph service clients with optional lifetime configuration\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.GraphServiceClient/PublicAPI/net7.0/InternalAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.GraphServiceCollectionExtensions.AddGraphServiceClient(Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> void\nstatic Microsoft.Identity.Web.GraphServiceCollectionExtensions.AddGraphServiceClientWithLifetime(Microsoft.Extensions.DependencyInjection.IServiceCollection! services, Microsoft.Extensions.DependencyInjection.ServiceLifetime lifetime) -> void\n```\n\n----------------------------------------\n\nTITLE: Authentication Handler Overrides\nDESCRIPTION: Override methods for handling scope and permission authorization requirements in Microsoft Identity Web\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net7.0/InternalAPI.Shipped.txt#2025-04-23_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Identity.Web.ScopeAuthorizationHandler.HandleRequirementAsync(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext! context, Microsoft.Identity.Web.ScopeAuthorizationRequirement! requirement) -> System.Threading.Tasks.Task!\n\noverride Microsoft.Identity.Web.ScopeOrAppPermissionAuthorizationHandler.HandleRequirementAsync(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext! context, Microsoft.Identity.Web.ScopeOrAppPermissionAuthorizationRequirement! requirement) -> System.Threading.Tasks.Task!\n```\n\n----------------------------------------\n\nTITLE: Exception Handling Utilities in Microsoft Identity Web\nDESCRIPTION: Comprehensive set of exception throwing utility methods for argument validation and error handling, including null checks, empty collection validation, and range checking.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.Diagnostics/PublicAPI/net7.0/InternalAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.Throws.ArgumentNullException(string! paramName) -> void\nstatic Microsoft.Identity.Web.Throws.ArgumentException(string! paramName, string? message) -> void\nstatic Microsoft.Identity.Web.Throws.ArgumentOutOfRangeException(string! paramName) -> void\nstatic Microsoft.Identity.Web.Throws.IfNull<T>(T argument, string! paramName = \"\") -> T\nstatic Microsoft.Identity.Web.Throws.IfNullOrEmpty(string? argument, string! paramName = \"\") -> string!\nstatic Microsoft.Identity.Web.Throws.IfNullOrWhitespace(string? argument, string! paramName = \"\") -> string!\nstatic Microsoft.Identity.Web.Throws.IfBufferTooSmall(int bufferSize, int requiredSize, string! paramName = \"\") -> void\n```\n\n----------------------------------------\n\nTITLE: Defining GraphAuthenticationOptions Class in C#\nDESCRIPTION: Defines the GraphAuthenticationOptions class with a BaseUrl property and a constructor. This class is used to configure authentication options for Microsoft Graph API calls.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.GraphServiceClient/PublicAPI/net7.0/PublicAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.GraphAuthenticationOptions\nMicrosoft.Identity.Web.GraphAuthenticationOptions.BaseUrl.get -> string!\nMicrosoft.Identity.Web.GraphAuthenticationOptions.GraphAuthenticationOptions() -> void\n```\n\n----------------------------------------\n\nTITLE: GET Operations with User Authentication in C#\nDESCRIPTION: Methods for making authenticated GET requests using user context. Includes support for claims principal and cancellation tokens.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.DownstreamApi/PublicAPI/net9.0/InternalAPI.Shipped.txt#2025-04-23_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.DownstreamApi.GetForUserAsync<TInput, TOutput>(string? serviceName, TInput input, System.Action<Microsoft.Identity.Abstractions.DownstreamApiOptionsReadOnlyHttpMethod!>? downstreamApiOptionsOverride = null, System.Security.Claims.ClaimsPrincipal? user = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TOutput?>!\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Downstream APIs to IServiceCollection in C#\nDESCRIPTION: Extension method for IServiceCollection to add multiple downstream APIs using a configuration section. This allows for bulk configuration of multiple APIs.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.DownstreamApi/PublicAPI/net6.0/PublicAPI.Shipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.DownstreamApiExtensions.AddDownstreamApis(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, Microsoft.Extensions.Configuration.IConfigurationSection! configurationSection) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!\n```\n\n----------------------------------------\n\nTITLE: Graph Authentication Options Class Definition\nDESCRIPTION: Class containing Graph authentication configuration options including base URL property.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.GraphServiceClient/PublicAPI/net472/PublicAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.GraphAuthenticationOptions\nMicrosoft.Identity.Web.GraphAuthenticationOptions.BaseUrl.get -> string!\nMicrosoft.Identity.Web.GraphAuthenticationOptions.GraphAuthenticationOptions() -> void\n```\n\n----------------------------------------\n\nTITLE: Implementing MicrosoftIdentityServiceHandler Class in C#\nDESCRIPTION: Defines a class for handling Microsoft Identity services in a Blazor application. It includes properties for accessing navigation manager, authentication state provider, and consent handler service.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net9.0/InternalAPI.Shipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.MicrosoftIdentityServiceHandler\nMicrosoft.Identity.Web.MicrosoftIdentityServiceHandler.Manager.get -> Microsoft.AspNetCore.Components.NavigationManager!\nMicrosoft.Identity.Web.MicrosoftIdentityServiceHandler.MicrosoftIdentityServiceHandler(Microsoft.Identity.Web.MicrosoftIdentityConsentAndConditionalAccessHandler! service, Microsoft.AspNetCore.Components.Authorization.AuthenticationStateProvider! provider, Microsoft.AspNetCore.Components.NavigationManager! manager) -> void\nMicrosoft.Identity.Web.MicrosoftIdentityServiceHandler.Provider.get -> Microsoft.AspNetCore.Components.Authorization.AuthenticationStateProvider!\nMicrosoft.Identity.Web.MicrosoftIdentityServiceHandler.Service.get -> Microsoft.Identity.Web.MicrosoftIdentityConsentAndConditionalAccessHandler!\noverride Microsoft.Identity.Web.MicrosoftIdentityServiceHandler.OnCircuitOpenedAsync(Microsoft.AspNetCore.Components.Server.Circuits.Circuit! circuit, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!\n```\n\n----------------------------------------\n\nTITLE: User-Assigned Managed Identity Client ID Getter\nDESCRIPTION: Static property getter to retrieve the user-assigned managed identity client ID.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.Certificate/InternalAPI.Shipped.txt#2025-04-23_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Identity.Web.KeyVaultCertificateLoader.UserAssignedManagedIdentityClientId.get -> string?\n```\n\n----------------------------------------\n\nTITLE: Defining MicrosoftIdentityBaseAuthenticationBuilder Members in C#\nDESCRIPTION: Defines members for the `MicrosoftIdentityBaseAuthenticationBuilder` class, a base class for authentication builders in Microsoft Identity Web. It includes properties to access the `IServiceCollection` and an optional `IConfigurationSection`, and a constructor that takes these dependencies. This class provides foundational elements for configuring authentication services.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.TokenAcquisition/PublicAPI/net462/PublicAPI.Shipped.txt#2025-04-23_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Identity.Web.MicrosoftIdentityBaseAuthenticationBuilder\nMicrosoft.Identity.Web.MicrosoftIdentityBaseAuthenticationBuilder.ConfigurationSection.get -> Microsoft.Extensions.Configuration.IConfigurationSection?\nMicrosoft.Identity.Web.MicrosoftIdentityBaseAuthenticationBuilder.ConfigurationSection.set -> void\nMicrosoft.Identity.Web.MicrosoftIdentityBaseAuthenticationBuilder.MicrosoftIdentityBaseAuthenticationBuilder(Microsoft.Extensions.DependencyInjection.IServiceCollection! services, Microsoft.Extensions.Configuration.IConfigurationSection? configurationSection = null) -> void\nMicrosoft.Identity.Web.MicrosoftIdentityBaseAuthenticationBuilder.Services.get -> Microsoft.Extensions.DependencyInjection.IServiceCollection!\n```\n\n----------------------------------------\n\nTITLE: Pre-Build Hook in OwinTokenAcquirerFactory (C#)\nDESCRIPTION: This overridden method provides a hook to execute custom logic before the final service provider or application components are built within the OwinTokenAcquirerFactory setup process.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.OWIN/PublicAPI.Shipped.txt#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\noverride Microsoft.Identity.Web.OWIN.OwinTokenAcquirerFactory.PreBuild() -> void\n```\n\n----------------------------------------\n\nTITLE: Defining OpenIdConnectMiddlewareDiagnostics Class in C#\nDESCRIPTION: This class provides diagnostic functionality for OpenID Connect middleware. It includes a constructor and a method to subscribe to OpenIdConnectEvents.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net9.0/PublicAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.Resource.OpenIdConnectMiddlewareDiagnostics\nMicrosoft.Identity.Web.Resource.OpenIdConnectMiddlewareDiagnostics.OpenIdConnectMiddlewareDiagnostics(Microsoft.Extensions.Logging.ILogger<Microsoft.Identity.Web.Resource.OpenIdConnectMiddlewareDiagnostics!>! logger) -> void\nMicrosoft.Identity.Web.Resource.OpenIdConnectMiddlewareDiagnostics.Subscribe(Microsoft.AspNetCore.Authentication.OpenIdConnect.OpenIdConnectEvents! events) -> void\n```\n\n----------------------------------------\n\nTITLE: Configuring Microsoft Graph Beta Service Extensions\nDESCRIPTION: Extension methods for IServiceCollection to add Microsoft Graph Beta client services. Includes three overloads: basic registration, configuration-based setup, and delegate-based configuration.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.GraphServiceClientBeta/PublicAPI/net462/PublicAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n#nullable enable\nMicrosoft.Identity.Web.GraphBetaServiceCollectionExtensions\nstatic Microsoft.Identity.Web.GraphBetaServiceCollectionExtensions.AddMicrosoftGraphBeta(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!\nstatic Microsoft.Identity.Web.GraphBetaServiceCollectionExtensions.AddMicrosoftGraphBeta(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, Microsoft.Extensions.Configuration.IConfiguration! configurationSection) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!\nstatic Microsoft.Identity.Web.GraphBetaServiceCollectionExtensions.AddMicrosoftGraphBeta(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, System.Action<Microsoft.Identity.Web.GraphServiceClientOptions!>! configureMicrosoftGraphOptions) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!\n```\n\n----------------------------------------\n\nTITLE: Token Acquisition Authentication Provider Options Class\nDESCRIPTION: Defines configuration options for token acquisition authentication including scopes, tenant, authentication scheme, and user principal settings.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.MicrosoftGraph/PublicAPI/net472/InternalAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic class TokenAcquisitionAuthenticationProviderOption\n{\n    public bool? AppOnly { get; set; }\n    public string AuthenticationScheme { get; set; }\n    public Action<AuthorizationHeaderProviderOptions> AuthorizationHeaderProviderOptions { get; set; }\n    public string[] Scopes { get; set; }\n    public string Tenant { get; set; }\n    public ClaimsPrincipal User { get; set; }\n    public TokenAcquisitionAuthenticationProviderOption();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Experimental Certificate Observation Members in C#\nDESCRIPTION: Defines experimental features for observing client certificate changes. Includes the `CerticateObserverAction` enum (Selected, Deselected), `CertificateChangeEventArg` class with properties for the action and certificate details, and the `ICertificatesObserver` interface with the `OnClientCertificateChanged` method.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.TokenAcquisition/PublicAPI/net462/PublicAPI.Shipped.txt#2025-04-23_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Identity.Web.Experimental.CerticateObserverAction\nMicrosoft.Identity.Web.Experimental.CerticateObserverAction.Deselected = 1 -> Microsoft.Identity.Web.Experimental.CerticateObserverAction\nMicrosoft.Identity.Web.Experimental.CerticateObserverAction.Selected = 0 -> Microsoft.Identity.Web.Experimental.CerticateObserverAction\nMicrosoft.Identity.Web.Experimental.CertificateChangeEventArg\nMicrosoft.Identity.Web.Experimental.CertificateChangeEventArg.Action.get -> Microsoft.Identity.Web.Experimental.CerticateObserverAction\nMicrosoft.Identity.Web.Experimental.CertificateChangeEventArg.Action.set -> void\nMicrosoft.Identity.Web.Experimental.CertificateChangeEventArg.Certificate.get -> System.Security.Cryptography.X509Certificates.X509Certificate2?\nMicrosoft.Identity.Web.Experimental.CertificateChangeEventArg.Certificate.set -> void\nMicrosoft.Identity.Web.Experimental.CertificateChangeEventArg.CertificateChangeEventArg() -> void\nMicrosoft.Identity.Web.Experimental.CertificateChangeEventArg.CredentialDescription.get -> Microsoft.Identity.Abstractions.CredentialDescription?\nMicrosoft.Identity.Web.Experimental.CertificateChangeEventArg.CredentialDescription.set -> void\nMicrosoft.Identity.Web.Experimental.ICertificatesObserver\nMicrosoft.Identity.Web.Experimental.ICertificatesObserver.OnClientCertificateChanged(Microsoft.Identity.Web.Experimental.CertificateChangeEventArg! e) -> void\n```\n\n----------------------------------------\n\nTITLE: Downstream API Extensions for Service Registration\nDESCRIPTION: Extension methods for registering downstream API services with dependency injection container.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.DownstreamApi/PublicAPI/net8.0/InternalAPI.Shipped.txt#2025-04-23_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.DownstreamApiExtensions.AddDownstreamApiWithLifetime(Microsoft.Extensions.DependencyInjection.IServiceCollection! services, Microsoft.Extensions.DependencyInjection.ServiceLifetime lifetime) -> void\n```\n\n----------------------------------------\n\nTITLE: Diagnostic Utilities in Microsoft Identity Web\nDESCRIPTION: Collection of diagnostic helper methods including OS platform detection and telemetry information generation for Microsoft Identity Web framework.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.Diagnostics/PublicAPI/net7.0/InternalAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.Diagnostics.OsHelper.IsWindowsPlatform() -> bool\nstatic Microsoft.Identity.Web.Diagnostics.OsHelper.IsLinuxPlatform() -> bool\nstatic Microsoft.Identity.Web.Diagnostics.OsHelper.IsMacPlatform() -> bool\nstatic Microsoft.Identity.Web.Diagnostics.IdHelper.CreateTelemetryInfo() -> string!\nstatic Microsoft.Identity.Web.Diagnostics.IdHelper.GetIdWebVersion() -> string!\n```\n\n----------------------------------------\n\nTITLE: Microsoft Graph Options Class Definition\nDESCRIPTION: Defines configuration options class for Microsoft Graph integration with properties for base URL and scopes.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.MicrosoftGraphBeta/PublicAPI/net472/PublicAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class MicrosoftGraphOptions\n{\n    public string BaseUrl { get; set; }\n    public string? Scopes { get; set; }\n    public MicrosoftGraphOptions() { }\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Downstream API for App Authentication in C#\nDESCRIPTION: Method to call a downstream API using app authentication, with options for input and output serialization.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.DownstreamApi/PublicAPI/net9.0/InternalAPI.Shipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.DownstreamApi.CallApiForAppAsync<TInput, TOutput>(string? serviceName, TInput input, System.Action<Microsoft.Identity.Abstractions.DownstreamApiOptions!>? downstreamApiOptionsOverride = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TOutput?>!\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure AD Authentication with Instance Option\nDESCRIPTION: Code example demonstrating how to configure Azure AD authentication with a specific instance option, such as using a national cloud like US Government. This approach allows binding configuration from appsettings with specific instance override.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.Azure/PublicAPI.Unshipped.txt#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)\n        .AddMicrosoftIdentityWebApi(options =>\n            {\n                Configuration.Bind(\"AzureAd\", options);\n                options.Instance = \"https://login.microsoftonline.us/\";\n            },\n            options => { Configuration.Bind(\"AzureAd\", options); });\n```\n\n----------------------------------------\n\nTITLE: AppServicesAuthenticationTokenAcquisition Constructor\nDESCRIPTION: Constructor for token acquisition service that handles authentication token management for App Services\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net6.0/PublicAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.AppServicesAuthenticationTokenAcquisition.AppServicesAuthenticationTokenAcquisition(Microsoft.Identity.Web.TokenCacheProviders.IMsalTokenCacheProvider! tokenCacheProvider, Microsoft.AspNetCore.Http.IHttpContextAccessor! httpContextAccessor, System.Net.Http.IHttpClientFactory! httpClientFactory) -> void\n```\n\n----------------------------------------\n\nTITLE: App Context and Authentication Information Properties\nDESCRIPTION: Static properties and methods for managing app context switches and authentication information\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net6.0/InternalAPI.Shipped.txt#2025-04-23_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.AppContextSwitches.ResetState() -> void\nstatic Microsoft.Identity.Web.AppContextSwitches.UseClaimsIdentityType.get -> bool\nstatic Microsoft.Identity.Web.AppServicesAuthenticationInformation.ClientId.get -> string?\nstatic Microsoft.Identity.Web.AppServicesAuthenticationInformation.ClientSecret.get -> string?\nstatic Microsoft.Identity.Web.AppServicesAuthenticationInformation.Issuer.get -> string?\n```\n\n----------------------------------------\n\nTITLE: Defining Account Controller Feature Provider in ASP.NET Core (C#)\nDESCRIPTION: This C# class, MicrosoftIdentityAccountControllerFeatureProvider, implements logic for discovering and including Microsoft Identity account-related controllers in an ASP.NET Core application's MVC pipeline. It provides a parameterless constructor for instantiation and a PopulateFeature method, which receives a list of ApplicationPart objects and a ControllerFeature instance to augment the set of available controllers. Dependencies include Microsoft.AspNetCore.Mvc, Microsoft.Identity.Web, and any relevant Microsoft ASP.NET Core MVC packages. Inputs are collections of application parts and controller features; output is the updated controller discovery set. This pattern is used to inject custom or additional controller discovery logic into the MVC startup process.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.UI/InternalAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Identity.Web.UI.MicrosoftIdentityAccountControllerFeatureProvider\nMicrosoft.Identity.Web.UI.MicrosoftIdentityAccountControllerFeatureProvider.MicrosoftIdentityAccountControllerFeatureProvider() -> void\nMicrosoft.Identity.Web.UI.MicrosoftIdentityAccountControllerFeatureProvider.PopulateFeature(System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPart> parts, Microsoft.AspNetCore.Mvc.Controllers.ControllerFeature feature) -> void\n```\n\n----------------------------------------\n\nTITLE: Declaring AccountController Class in C#\nDESCRIPTION: Declares the `AccountController` class within the `Microsoft.Identity.Web.UI.Areas.MicrosoftIdentity.Controllers` namespace. This controller handles user account actions like sign-in, sign-out, and profile management within the Microsoft Identity Web UI.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.UI/PublicAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Identity.Web.UI.Areas.MicrosoftIdentity.Controllers.AccountController\n```\n\n----------------------------------------\n\nTITLE: Dependency Injection Setup in C#\nDESCRIPTION: Extension methods for configuring downstream API services in the dependency injection container with customizable service lifetimes.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.DownstreamApi/PublicAPI/net472/InternalAPI.Shipped.txt#2025-04-23_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.DownstreamApiExtensions.AddDownstreamApiWithLifetime(Microsoft.Extensions.DependencyInjection.IServiceCollection! services, Microsoft.Extensions.DependencyInjection.ServiceLifetime lifetime) -> void\n\nstatic Microsoft.Identity.Web.DownstreamApiExtensions.RegisterDownstreamApi(Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> void\n```\n\n----------------------------------------\n\nTITLE: Converting Scopes from string to string array in configuration\nDESCRIPTION: Demonstrates the required change in appsettings.json configuration file, where the Scopes property must be converted from a space-delimited string to an array of strings.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/docs/blog-posts/downstreamwebapi-to-downstreamapi.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"DownstreamApi1\": {\n    \"BaseUrl\": \"https://myapi.domain.com\",\n    \"Scopes\": \"https://myapi.domain.com/read  https://myapi.domain.com/write\"\n},  \n```\n\nLANGUAGE: json\nCODE:\n```\n\"DownstreamApi1\": {\n    \"BaseUrl\": \"https://myapi.domain.com\",\n    \"Scopes\": [\n        \"https://myapi.domain.com/read\",\n        \"https://myapi.domain.com/write\" \n    ]\n},  \n```\n\n----------------------------------------\n\nTITLE: Configuring Microsoft Identity Web in ASP.NET Core\nDESCRIPTION: This snippet demonstrates how to configure Microsoft Identity Web in the Startup.cs file of an ASP.NET Core application. It sets up authentication services and configures options for Azure AD integration.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.DownstreamApi/PublicAPI/net8.0/PublicAPI.Unshipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic void ConfigureServices(IServiceCollection services)\n{\n    services.AddAuthentication(OpenIdConnectDefaults.AuthenticationScheme)\n        .AddMicrosoftIdentityWebApp(Configuration.GetSection(\"AzureAd\"));\n\n    services.AddControllersWithViews(options =>\n    {\n        var policy = new AuthorizationPolicyBuilder()\n            .RequireAuthenticatedUser()\n            .Build();\n        options.Filters.Add(new AuthorizeFilter(policy));\n    });\n\n    services.AddRazorPages()\n        .AddMicrosoftIdentityUI();\n}\n```\n\n----------------------------------------\n\nTITLE: Generic API Call Methods\nDESCRIPTION: Core methods for making HTTP calls to downstream APIs with support for both app and user contexts, with flexible input/output type parameters.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.DownstreamApi/PublicAPI/netstandard2.0/InternalAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.DownstreamApi.CallApiAsync(Microsoft.Identity.Abstractions.DownstreamApiOptions! downstreamApiOptions, System.Security.Claims.ClaimsPrincipal? user = null, System.Net.Http.HttpContent? content = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage!>!\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.DownstreamApi.CallApiForAppAsync<TInput, TOutput>(string? serviceName, TInput input, System.Action<Microsoft.Identity.Abstractions.DownstreamApiOptions!>? downstreamApiOptionsOverride = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TOutput?>!\n```\n\n----------------------------------------\n\nTITLE: Downstream API PUT Methods for Application Authentication\nDESCRIPTION: Method overloads for making PUT requests to downstream APIs with application authentication. Supports generic input/output types with JSON serialization options and cancellation tokens.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.DownstreamApi/PublicAPI/net8.0/InternalAPI.Shipped.txt#2025-04-23_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.DownstreamApi.PutForAppAsync<TInput, TOutput>(string? serviceName, TInput input, System.Text.Json.Serialization.Metadata.JsonTypeInfo<TInput>! inputJsonTypeInfo, System.Text.Json.Serialization.Metadata.JsonTypeInfo<TOutput!>! outputJsonTypeInfo, System.Action<Microsoft.Identity.Abstractions.DownstreamApiOptionsReadOnlyHttpMethod!>? downstreamApiOptionsOverride = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TOutput?>!\n```\n\n----------------------------------------\n\nTITLE: Initiating Sign-Out Flow in AccountController (C#)\nDESCRIPTION: Defines the `SignOut` action method in `AccountController`. This method handles the sign-out process, clearing the user's session and potentially redirecting to the identity provider for global sign-out. It accepts an optional `scheme` parameter.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.UI/PublicAPI.Shipped.txt#2025-04-23_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Identity.Web.UI.Areas.MicrosoftIdentity.Controllers.AccountController.SignOut(string! scheme) -> Microsoft.AspNetCore.Mvc.IActionResult!\n```\n\n----------------------------------------\n\nTITLE: Performing PATCH Request for User in C#\nDESCRIPTION: This method performs a PATCH request to a downstream API on behalf of the user. It supports generic input and output types, and allows for customization of the API options and specifying the user.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.DownstreamApi/PublicAPI/net8.0/InternalAPI.Shipped.txt#2025-04-23_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.DownstreamApi.PatchForUserAsync<TInput, TOutput>(string? serviceName, TInput input, System.Action<Microsoft.Identity.Abstractions.DownstreamApiOptionsReadOnlyHttpMethod!>? downstreamApiOptionsOverride = null, System.Security.Claims.ClaimsPrincipal? user = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TOutput?>!\n```\n\n----------------------------------------\n\nTITLE: Exception Throwing Utility Methods\nDESCRIPTION: Collection of methods for throwing common exceptions with standardized parameter validation and error messages\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.Diagnostics/PublicAPI/net6.0/InternalAPI.Shipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.Throws.ArgumentException(string! paramName, string? message) -> void\nstatic Microsoft.Identity.Web.Throws.ArgumentNullException(string! paramName) -> void\nstatic Microsoft.Identity.Web.Throws.ArgumentOutOfRangeException(string! paramName) -> void\nstatic Microsoft.Identity.Web.Throws.InvalidOperationException(string! message) -> void\n```\n\n----------------------------------------\n\nTITLE: Implementing MicrosoftGraphExtensions in C#\nDESCRIPTION: Extension methods for configuring Microsoft Graph authentication and client setup in web applications.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.MicrosoftGraphBeta/PublicAPI/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic static class MicrosoftGraphExtensions\n{\n    public static MicrosoftIdentityAppCallsWebApiAuthenticationBuilder AddMicrosoftGraph(this MicrosoftIdentityAppCallsWebApiAuthenticationBuilder builder, IConfigurationSection configurationSection);\n    public static MicrosoftIdentityAppCallsWebApiAuthenticationBuilder AddMicrosoftGraph(this MicrosoftIdentityAppCallsWebApiAuthenticationBuilder builder, string graphBaseUrl = \"https://graph.microsoft.com/v1.0\", string defaultScopes = \"user.read\");\n    public static MicrosoftIdentityAppCallsWebApiAuthenticationBuilder AddMicrosoftGraph(this MicrosoftIdentityAppCallsWebApiAuthenticationBuilder builder, Action<MicrosoftGraphOptions> configureMicrosoftGraphOptions);\n    public static MicrosoftIdentityAppCallsWebApiAuthenticationBuilder AddMicrosoftGraph(this MicrosoftIdentityAppCallsWebApiAuthenticationBuilder builder, Func<IAuthenticationProvider, GraphServiceClient> graphServiceClientFactory, IEnumerable<string> initialScopes);\n    public static MicrosoftIdentityAppCallsWebApiAuthenticationBuilder AddMicrosoftGraphAppOnly(this MicrosoftIdentityAppCallsWebApiAuthenticationBuilder builder, Func<IAuthenticationProvider, GraphServiceClient> graphServiceClientFactory);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Session-Based App Token Cache Services in C#\nDESCRIPTION: This extension method registers services with the dependency injection container (IServiceCollection) to configure Microsoft.Identity.Web to use the ASP.NET Core session for caching application-level (app-only) tokens.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net6.0/PublicAPI.Shipped.txt#2025-04-23_snippet_25\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Identity.Web.TokenCacheProviders.Session.SessionTokenCacheProviderExtension.AddSessionAppTokenCache(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!\n```\n\n----------------------------------------\n\nTITLE: Updating HTTP Request Messages for Downstream API Calls in C#\nDESCRIPTION: This method updates an HTTP request message with necessary information for downstream API calls, including authentication tokens and user context.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.DownstreamApi/PublicAPI/net6.0/InternalAPI.Shipped.txt#2025-04-23_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.DownstreamApi.UpdateRequestAsync(System.Net.Http.HttpRequestMessage! httpRequestMessage, System.Net.Http.HttpContent? content, Microsoft.Identity.Abstractions.DownstreamApiOptions! effectiveOptions, bool appToken, System.Security.Claims.ClaimsPrincipal? user, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!\n```\n\n----------------------------------------\n\nTITLE: Token Acquisition Authentication Provider Options Class\nDESCRIPTION: Defines configuration options for token acquisition authentication, including app-only auth, authentication scheme, scopes, tenant, and user settings.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.MicrosoftGraph/PublicAPI/net6.0/InternalAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.TokenAcquisitionAuthenticationProviderOption\\nMicrosoft.Identity.Web.TokenAcquisitionAuthenticationProviderOption.AppOnly.get -> bool?\\nMicrosoft.Identity.Web.TokenAcquisitionAuthenticationProviderOption.AppOnly.set -> void\\nMicrosoft.Identity.Web.TokenAcquisitionAuthenticationProviderOption.AuthenticationScheme.get -> string\\nMicrosoft.Identity.Web.TokenAcquisitionAuthenticationProviderOption.AuthenticationScheme.set -> void\\nMicrosoft.Identity.Web.TokenAcquisitionAuthenticationProviderOption.AuthorizationHeaderProviderOptions.get -> System.Action<Microsoft.Identity.Abstractions.AuthorizationHeaderProviderOptions>\\nMicrosoft.Identity.Web.TokenAcquisitionAuthenticationProviderOption.AuthorizationHeaderProviderOptions.set -> void\\nMicrosoft.Identity.Web.TokenAcquisitionAuthenticationProviderOption.Scopes.get -> string[]\\nMicrosoft.Identity.Web.TokenAcquisitionAuthenticationProviderOption.Scopes.set -> void\\nMicrosoft.Identity.Web.TokenAcquisitionAuthenticationProviderOption.Tenant.get -> string\\nMicrosoft.Identity.Web.TokenAcquisitionAuthenticationProviderOption.Tenant.set -> void\\nMicrosoft.Identity.Web.TokenAcquisitionAuthenticationProviderOption.TokenAcquisitionAuthenticationProviderOption() -> void\\nMicrosoft.Identity.Web.TokenAcquisitionAuthenticationProviderOption.User.get -> System.Security.Claims.ClaimsPrincipal\\nMicrosoft.Identity.Web.TokenAcquisitionAuthenticationProviderOption.User.set -> void\n```\n\n----------------------------------------\n\nTITLE: Adding Graph Beta Service Client with Custom Lifetime in C#\nDESCRIPTION: Extension method to add a Microsoft Graph Beta service client to the dependency injection container with a specified lifetime.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.GraphServiceClientBeta/PublicAPI/net462/InternalAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.GraphBetaServiceCollectionExtensions.AddGraphBetaServiceClientWithLifetime(Microsoft.Extensions.DependencyInjection.IServiceCollection services, Microsoft.Extensions.DependencyInjection.ServiceLifetime lifetime) -> void\n```\n\n----------------------------------------\n\nTITLE: Declaring SignedOutModel Class in C#\nDESCRIPTION: Declares the `SignedOutModel` Razor Page model class within the `Microsoft.Identity.Web.UI.Areas.MicrosoftIdentity.Pages.Account` namespace. This page model is used for the view displayed after a user has successfully signed out.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.UI/PublicAPI.Shipped.txt#2025-04-23_snippet_18\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Identity.Web.UI.Areas.MicrosoftIdentity.Pages.Account.SignedOutModel\n```\n\n----------------------------------------\n\nTITLE: Defining AzureADOptions Class Model for Azure AD Authentication in C#\nDESCRIPTION: This class provides a model for Azure AD authentication configuration options. It contains properties for client credentials, endpoints, and other authentication settings needed for Azure AD integration.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net472/InternalAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n#nullable enable\n```\n\n----------------------------------------\n\nTITLE: Creating ASP.NET Core Project with Azure AD Authentication\nDESCRIPTION: Command to create a new ASP.NET Core web application configured for Azure AD Single Organization authentication using the dotnet CLI. This sets up the project structure with the necessary authentication components.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/tools/app-provisioning-tool/vs2019-16.9-how-to-use.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndotnet new webapp –auth SingleOrg\n```\n\n----------------------------------------\n\nTITLE: Defining OIDC Signed Assertion Loader Members - Microsoft Identity Web - C#\nDESCRIPTION: This code snippet lists the fully qualified type names, property getters, and methods for the OidcIdpSignedAssertionLoader class within Microsoft Identity Web. It includes overloaded constructors utilizing dependency injection for logging, options, configuration, and token acquisition, as well as method signatures for loading credentials asynchronously with optional parameters. Dependencies include Microsoft.Extensions.Logging, Microsoft.Extensions.Options, Microsoft.Extensions.Configuration, and both Microsoft.Identity.Abstractions and Web libraries. Expected inputs are credential and configuration objects, while the main functionality is to facilitate OIDC assertion loading for authentication workflows.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.OidcFIC/PublicAPI/netstandard2.0/InternalAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n#nullable enable\nMicrosoft.Identity.Web.OidcFic.OidcIdpSignedAssertionLoader\nMicrosoft.Identity.Web.OidcFic.OidcIdpSignedAssertionLoader.CredentialSource.get -> Microsoft.Identity.Abstractions.CredentialSource\nMicrosoft.Identity.Web.OidcFic.OidcIdpSignedAssertionLoader.LoadIfNeededAsync(Microsoft.Identity.Abstractions.CredentialDescription! credentialDescription, Microsoft.Identity.Abstractions.CredentialSourceLoaderParameters? parameters = null) -> System.Threading.Tasks.Task!\nMicrosoft.Identity.Web.OidcFic.OidcIdpSignedAssertionLoader.Name.get -> string!\nMicrosoft.Identity.Web.OidcFic.OidcIdpSignedAssertionLoader.OidcIdpSignedAssertionLoader(Microsoft.Extensions.Logging.ILogger<Microsoft.Identity.Web.OidcFic.OidcIdpSignedAssertionLoader!>! logger, Microsoft.Extensions.Options.IOptionsMonitor<Microsoft.Identity.Abstractions.MicrosoftIdentityApplicationOptions!>! options, Microsoft.Extensions.Configuration.IConfiguration! configuration, Microsoft.Identity.Abstractions.ITokenAcquirerFactory! tokenAcquirerFactory) -> void\n```\n\n----------------------------------------\n\nTITLE: Logging and Error Handling\nDESCRIPTION: Logging event IDs and methods for error handling in downstream API calls. Includes logging for HTTP request errors and unauthenticated API calls.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.DownstreamApi/PublicAPI/net462/InternalAPI.Shipped.txt#2025-04-23_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.DownstreamApi.Logger.HttpRequestError(Microsoft.Extensions.Logging.ILogger! logger, string! ServiceName, string! BaseUrl, string! RelativePath, System.Exception? ex) -> void\n\nstatic Microsoft.Identity.Web.DownstreamApi.Logger.UnauthenticatedApiCall(Microsoft.Extensions.Logging.ILogger! logger, System.Exception? ex) -> void\n\nstatic readonly Microsoft.Identity.Web.DownstreamApiLoggingEventId.HttpRequestError -> Microsoft.Extensions.Logging.EventId\n\nstatic readonly Microsoft.Identity.Web.DownstreamApiLoggingEventId.UnauthenticatedApiCall -> Microsoft.Extensions.Logging.EventId\n```\n\n----------------------------------------\n\nTITLE: Defining Enums and Event Argument Structures - Microsoft Identity Web Experimental - C#\nDESCRIPTION: Introduces enum values to represent certificate observer actions and data structures for handling certificate change events. These are used for describing when client certificates are selected/deselected and storing related event arguments, enabling extensibility for certificate-based authentication scenarios in .NET. Key properties include Action, Certificate, and CredentialDescription, each with get/set accessors. Dependencies include X509Certificate2 and CredentialDescription types, with no direct inputs required.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.TokenAcquisition/PublicAPI/net472/PublicAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Identity.Web.Experimental.CerticateObserverAction\nMicrosoft.Identity.Web.Experimental.CerticateObserverAction.Deselected = 1 -> Microsoft.Identity.Web.Experimental.CerticateObserverAction\nMicrosoft.Identity.Web.Experimental.CerticateObserverAction.Selected = 0 -> Microsoft.Identity.Web.Experimental.CerticateObserverAction\nMicrosoft.Identity.Web.Experimental.CertificateChangeEventArg\nMicrosoft.Identity.Web.Experimental.CertificateChangeEventArg.Action.get -> Microsoft.Identity.Web.Experimental.CerticateObserverAction\nMicrosoft.Identity.Web.Experimental.CertificateChangeEventArg.Action.set -> void\nMicrosoft.Identity.Web.Experimental.CertificateChangeEventArg.Certificate.get -> System.Security.Cryptography.X509Certificates.X509Certificate2?\nMicrosoft.Identity.Web.Experimental.CertificateChangeEventArg.Certificate.set -> void\nMicrosoft.Identity.Web.Experimental.CertificateChangeEventArg.CertificateChangeEventArg() -> void\nMicrosoft.Identity.Web.Experimental.CertificateChangeEventArg.CredentialDescription.get -> Microsoft.Identity.Abstractions.CredentialDescription?\nMicrosoft.Identity.Web.Experimental.CertificateChangeEventArg.CredentialDescription.set -> void\n\n```\n\n----------------------------------------\n\nTITLE: Defining ScopeAuthorizationRequirement Class in C#\nDESCRIPTION: This class represents a requirement for scope-based authorization. It includes properties for allowed values and configuration keys.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net7.0/PublicAPI.Shipped.txt#2025-04-23_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.ScopeAuthorizationRequirement\nMicrosoft.Identity.Web.ScopeAuthorizationRequirement.AllowedValues.get -> System.Collections.Generic.IEnumerable<string!>?\nMicrosoft.Identity.Web.ScopeAuthorizationRequirement.RequiredScopesConfigurationKey.get -> string?\nMicrosoft.Identity.Web.ScopeAuthorizationRequirement.RequiredScopesConfigurationKey.set -> void\nMicrosoft.Identity.Web.ScopeAuthorizationRequirement.ScopeAuthorizationRequirement(System.Collections.Generic.IEnumerable<string!>? allowedValues = null) -> void\n```\n\n----------------------------------------\n\nTITLE: Performing POST Request for Application in C#\nDESCRIPTION: This method performs a POST request to a downstream API on behalf of the application. It supports generic input and output types, and allows for customization of the API options.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.DownstreamApi/PublicAPI/net8.0/InternalAPI.Shipped.txt#2025-04-23_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.DownstreamApi.PostForAppAsync<TInput, TOutput>(string? serviceName, TInput input, System.Action<Microsoft.Identity.Abstractions.DownstreamApiOptionsReadOnlyHttpMethod!>? downstreamApiOptionsOverride = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TOutput?>!\n```\n\n----------------------------------------\n\nTITLE: Platform Detection Utility Methods\nDESCRIPTION: Helper methods to detect the operating system platform (Windows, Linux, Mac)\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.Diagnostics/PublicAPI/net6.0/InternalAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.Diagnostics.OsHelper.IsWindowsPlatform() -> bool\nstatic Microsoft.Identity.Web.Diagnostics.OsHelper.IsLinuxPlatform() -> bool\nstatic Microsoft.Identity.Web.Diagnostics.OsHelper.IsMacPlatform() -> bool\n```\n\n----------------------------------------\n\nTITLE: Logging and Utility Fields for DownstreamApi - Microsoft Identity Web - C#\nDESCRIPTION: These declarations expose logging event IDs, a logger instance, and static SDK metadata information. The logger (ILogger<DownstreamApi>) is used for capturing operational and error logs. Event IDs serve structured logging for HTTP request errors and unauthenticated API calls. CallerSDKDetails provides static metadata as a dictionary for SDK introspection.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.DownstreamApi/PublicAPI/net9.0/InternalAPI.Shipped.txt#2025-04-23_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Identity.Web.DownstreamApiLoggingEventId\n```\n\nLANGUAGE: csharp\nCODE:\n```\nreadonly Microsoft.Identity.Web.DownstreamApi._logger -> Microsoft.Extensions.Logging.ILogger<Microsoft.Identity.Web.DownstreamApi!>!\n```\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Identity.Web.DownstreamApi.CallerSDKDetails.get -> System.Collections.Generic.Dictionary<string!, string!>!\n```\n\n----------------------------------------\n\nTITLE: Putting for App with DownstreamApi - Microsoft Identity Web - C#\nDESCRIPTION: These PUT methods enable sending authenticated HTTP PUT requests as the app to downstream APIs. They support both generic output types and overloads enabling custom System.Text.Json serialization. Prerequisites include a properly configured DownstreamApi instance and access to the DI system. Inputs accommodate the target service name, request body, potential serialization details, and cancellation tokens. Outputs are returned as Task (optionally with the output type) indicating completion or the API response.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.DownstreamApi/PublicAPI/net9.0/InternalAPI.Shipped.txt#2025-04-23_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Identity.Web.DownstreamApi.PutForAppAsync<TInput, TOutput>(string? serviceName, TInput input, System.Action<Microsoft.Identity.Abstractions.DownstreamApiOptionsReadOnlyHttpMethod!>? downstreamApiOptionsOverride = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TOutput?>!\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Identity.Web.DownstreamApi.PutForAppAsync<TInput, TOutput>(string? serviceName, TInput input, System.Text.Json.Serialization.Metadata.JsonTypeInfo<TInput>! inputJsonTypeInfo, System.Text.Json.Serialization.Metadata.JsonTypeInfo<TOutput!>! outputJsonTypeInfo, System.Action<Microsoft.Identity.Abstractions.DownstreamApiOptionsReadOnlyHttpMethod!>? downstreamApiOptionsOverride = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TOutput?>!\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Identity.Web.DownstreamApi.PutForAppAsync<TInput>(string? serviceName, TInput input, System.Action<Microsoft.Identity.Abstractions.DownstreamApiOptionsReadOnlyHttpMethod!>? downstreamApiOptionsOverride = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Identity.Web.DownstreamApi.PutForAppAsync<TInput>(string? serviceName, TInput input, System.Text.Json.Serialization.Metadata.JsonTypeInfo<TInput>! inputJsonTypeInfo, System.Action<Microsoft.Identity.Abstractions.DownstreamApiOptionsReadOnlyHttpMethod!>? downstreamApiOptionsOverride = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!\n```\n\n----------------------------------------\n\nTITLE: Graph Service Client Options Class Definition\nDESCRIPTION: Class for configuring Graph service client including scopes and user principal settings.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.GraphServiceClient/PublicAPI/net472/PublicAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.GraphServiceClientOptions\nMicrosoft.Identity.Web.GraphServiceClientOptions.GraphServiceClientOptions() -> void\nMicrosoft.Identity.Web.GraphServiceClientOptions.Scopes.get -> System.Collections.Generic.IEnumerable<string!>!\nMicrosoft.Identity.Web.GraphServiceClientOptions.Scopes.set -> void\nMicrosoft.Identity.Web.GraphServiceClientOptions.User.get -> System.Security.Claims.ClaimsPrincipal?\nMicrosoft.Identity.Web.GraphServiceClientOptions.User.set -> void\n```\n\n----------------------------------------\n\nTITLE: Getting/Setting Default Scopes for Microsoft Graph Options in C#\nDESCRIPTION: Provides accessors for the Scopes property within MicrosoftGraphOptions. This property defines the default permission scopes requested when acquiring tokens for Microsoft Graph, often defaulting to 'user.read'.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.MicrosoftGraph/PublicAPI/net6.0/PublicAPI.Shipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Identity.Web.MicrosoftGraphOptions.Scopes.get -> string?\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Identity.Web.MicrosoftGraphOptions.Scopes.set -> void\n```\n\n----------------------------------------\n\nTITLE: Acquiring Access Token for Microsoft Graph API in ASP.NET Core\nDESCRIPTION: This code demonstrates how to acquire an access token for the Microsoft Graph API using the TokenAcquisition service in an ASP.NET Core controller action.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.GraphServiceClient/PublicAPI/net7.0/PublicAPI.Unshipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic async Task<IActionResult> Index()\n{\n    string[] scopes = new string[] { \"user.read\" };\n    string accessToken = await _tokenAcquisition.GetAccessTokenForUserAsync(scopes);\n    \n    // Use the access token to call Microsoft Graph API\n    var client = new HttpClient();\n    client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Bearer\", accessToken);\n    var response = await client.GetAsync(\"https://graph.microsoft.com/v1.0/me\");\n    \n    if (response.IsSuccessStatusCode)\n    {\n        var content = await response.Content.ReadAsStringAsync();\n        ViewBag.Profile = content;\n    }\n    \n    return View();\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing DownstreamApi Constructor in C#\nDESCRIPTION: Constructor for DownstreamApi class that initializes authorization header provider, downstream API options, HTTP client factory and logger.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.DownstreamApi/PublicAPI/net6.0/InternalAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.DownstreamApi.DownstreamApi(Microsoft.Identity.Abstractions.IAuthorizationHeaderProvider! authorizationHeaderProvider, Microsoft.Extensions.Options.IOptionsMonitor<Microsoft.Identity.Abstractions.DownstreamApiOptions!>! namedDownstreamApiOptions, System.Net.Http.IHttpClientFactory! httpClientFactory, Microsoft.Extensions.Logging.ILogger<Microsoft.Identity.Web.DownstreamApi!>! logger) -> void\n```\n\n----------------------------------------\n\nTITLE: Acquiring Access Tokens for Microsoft Graph API\nDESCRIPTION: This code snippet shows how to acquire an access token for Microsoft Graph API using Microsoft Identity Web. It demonstrates the use of the ITokenAcquisition interface to obtain a token for a specific scope.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.DownstreamApi/PublicAPI/net8.0/PublicAPI.Unshipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class GraphController : Controller\n{\n    private readonly ITokenAcquisition _tokenAcquisition;\n    private readonly GraphServiceClient _graphServiceClient;\n\n    public GraphController(ITokenAcquisition tokenAcquisition, GraphServiceClient graphServiceClient)\n    {\n        _tokenAcquisition = tokenAcquisition;\n        _graphServiceClient = graphServiceClient;\n    }\n\n    [AuthorizeForScopes(Scopes = new[] { \"user.read\" })]\n    public async Task<IActionResult> Profile()\n    {\n        var accessToken = await _tokenAcquisition.GetAccessTokenForUserAsync(new[] { \"user.read\" });\n        // Use the access token to call Microsoft Graph API\n        var user = await _graphServiceClient.Me.Request().GetAsync();\n        return View(user);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing TokenAcquisitionTokenCredential in C#\nDESCRIPTION: This class implements token acquisition functionality. It includes methods for getting tokens asynchronously and synchronously.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net7.0/PublicAPI.Shipped.txt#2025-04-23_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.TokenAcquisitionTokenCredential\nMicrosoft.Identity.Web.TokenAcquisitionTokenCredential.TokenAcquisitionTokenCredential(Microsoft.Identity.Web.ITokenAcquisition! tokenAcquisition) -> void\noverride Microsoft.Identity.Web.TokenAcquisitionTokenCredential.GetToken(Azure.Core.TokenRequestContext requestContext, System.Threading.CancellationToken cancellationToken) -> Azure.Core.AccessToken\noverride Microsoft.Identity.Web.TokenAcquisitionTokenCredential.GetTokenAsync(Azure.Core.TokenRequestContext requestContext, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<Azure.Core.AccessToken>\n```\n\n----------------------------------------\n\nTITLE: Updating controller code with IDownstreamApi\nDESCRIPTION: Shows how to update controller code that uses GetForUser method, changing from passing a string parameter for relative path to using a delegate that configures options.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/docs/blog-posts/downstreamwebapi-to-downstreamapi.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nTodo value = await _downstreamWebApi.GetForUserAsync<Todo>(ServiceName,\n                                                           $\"api/todolist/{id}\");\n```\n\nLANGUAGE: csharp\nCODE:\n```\nTodo value = await _downstreamWebApi.GetForUserAsync<Todo>(\n     ServiceName,\n     options => options.RelativePath = $\"api/todolist/{id}\";);\n```\n\n----------------------------------------\n\nTITLE: Getting IAuthorizationHeaderProvider in ApiController (C# Extension)\nDESCRIPTION: This static extension method provides access to the IAuthorizationHeaderProvider service for the current ApiController instance. This service is used to obtain authorization headers, typically for downstream API calls.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.OWIN/PublicAPI.Shipped.txt#2025-04-23_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Identity.Web.ApiControllerExtensions.GetAuthorizationHeaderProvider(this System.Web.Http.ApiController! _) -> Microsoft.Identity.Abstractions.IAuthorizationHeaderProvider!\n```\n\n----------------------------------------\n\nTITLE: Defining Size and Ratio Constants for Distributed Token Cache Options - Microsoft.Identity.Web - C#\nDESCRIPTION: Defines the constant for maximum cache size for distributed cache options as well as property accessors for cache expiration ratio settings. These members are used to configure memory and distributed caching in the token cache adapter. Dependencies include Microsoft.Identity.Web and relevant cache provider implementations. The constants assist with configuring cache expiration policies and limitations.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.TokenCache/InternalAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nconst Microsoft.Identity.Web.TokenCacheProviders.Distributed.MsalDistributedTokenCacheAdapterOptions.FiveHundredMb = 524288000 -> int\nMicrosoft.Identity.Web.TokenCacheProviders.Distributed.MsalDistributedTokenCacheAdapterOptions.L1ExpirationTimeRatio.get -> double\nMicrosoft.Identity.Web.TokenCacheProviders.Distributed.MsalDistributedTokenCacheAdapterOptions.L1ExpirationTimeRatio.set -> void\n```\n\n----------------------------------------\n\nTITLE: Required Scope Attribute Implementation\nDESCRIPTION: Class definition for RequiredScopeAttribute which handles scope-based authorization requirements\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net6.0/PublicAPI.Shipped.txt#2025-04-23_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.Resource.RequiredScopeAttribute.RequiredScopeAttribute(params string![]! acceptedScopes) -> void\n```\n\n----------------------------------------\n\nTITLE: TokenAcquisitionAuthenticationProvider Class Definition\nDESCRIPTION: Provider class that handles authentication request processing with token acquisition capabilities.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.MicrosoftGraph/PublicAPI/netstandard2.0/InternalAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class TokenAcquisitionAuthenticationProvider\n{\n    public TokenAcquisitionAuthenticationProvider(IAuthorizationHeaderProvider authorizationHeaderProvider, TokenAcquisitionAuthenticationProviderOption options);\n    public Task AuthenticateRequestAsync(HttpRequestMessage request);\n}\n```\n\n----------------------------------------\n\nTITLE: HTTP Request Handling and Serialization\nDESCRIPTION: Utility methods for handling HTTP requests, including request updates, input serialization, and output deserialization. Includes methods for processing HTTP content and managing API options.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.DownstreamApi/PublicAPI/net462/InternalAPI.Shipped.txt#2025-04-23_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.DownstreamApi.UpdateRequestAsync(System.Net.Http.HttpRequestMessage! httpRequestMessage, System.Net.Http.HttpContent? content, Microsoft.Identity.Abstractions.DownstreamApiOptions! effectiveOptions, bool appToken, System.Security.Claims.ClaimsPrincipal? user, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!\n\nstatic Microsoft.Identity.Web.DownstreamApi.SerializeInput<TInput>(TInput input, Microsoft.Identity.Abstractions.DownstreamApiOptions! effectiveOptions) -> System.Net.Http.HttpContent?\n\nstatic Microsoft.Identity.Web.DownstreamApi.DeserializeOutputAsync<TOutput>(System.Net.Http.HttpResponseMessage! response, Microsoft.Identity.Abstractions.DownstreamApiOptions! effectiveOptions) -> System.Threading.Tasks.Task<TOutput?>!\n```\n\n----------------------------------------\n\nTITLE: Initializing DownstreamApi Constructor\nDESCRIPTION: Constructor for the DownstreamApi class that accepts dependencies for authorization, configuration, HTTP client factory and logging.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.DownstreamApi/PublicAPI/net8.0/InternalAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.DownstreamApi(Microsoft.Identity.Abstractions.IAuthorizationHeaderProvider! authorizationHeaderProvider, Microsoft.Extensions.Options.IOptionsMonitor<Microsoft.Identity.Abstractions.DownstreamApiOptions!>! namedDownstreamApiOptions, System.Net.Http.IHttpClientFactory! httpClientFactory, Microsoft.Extensions.Logging.ILogger<Microsoft.Identity.Web.DownstreamApi!>! logger) -> void\n```\n\n----------------------------------------\n\nTITLE: Updating HTTP Requests with User and App Token Logic - DownstreamApi - C#\nDESCRIPTION: This internal utility updates an outgoing HttpRequestMessage, optionally including HTTP content, effective API options, and appropriate bearer tokens, either for a user or the app. Requires fully constructed HttpRequestMessage, token context, and cancellation logic. Returns a Task indicating completion and should be awaited as part of advanced customization of API invocation.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.DownstreamApi/PublicAPI/net9.0/InternalAPI.Shipped.txt#2025-04-23_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Identity.Web.DownstreamApi.UpdateRequestAsync(System.Net.Http.HttpRequestMessage! httpRequestMessage, System.Net.Http.HttpContent? content, Microsoft.Identity.Abstractions.DownstreamApiOptions! effectiveOptions, bool appToken, System.Security.Claims.ClaimsPrincipal? user, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!\n```\n\n----------------------------------------\n\nTITLE: Defining TokenAcquisitionAuthenticationProviderOption Class\nDESCRIPTION: Configuration options class for TokenAcquisitionAuthenticationProvider containing properties for authentication scheme, scopes, tenant details, and user claims.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.MicrosoftGraphBeta/PublicAPI/net7.0/InternalAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nclass TokenAcquisitionAuthenticationProviderOption\n{\n    public TokenAcquisitionAuthenticationProviderOption();\n    public bool? AppOnly { get; set; }\n    public string AuthenticationScheme { get; set; }\n    public Action<AuthorizationHeaderProviderOptions> AuthorizationHeaderProviderOptions { get; set; }\n    public string[] Scopes { get; set; }\n    public string Tenant { get; set; }\n    public ClaimsPrincipal User { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GraphServiceClientOptions Class in C#\nDESCRIPTION: Defines the GraphServiceClientOptions class with properties for Scopes and User, along with a constructor. This class is used to configure options for the Graph service client.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.GraphServiceClient/PublicAPI/net7.0/PublicAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.GraphServiceClientOptions\nMicrosoft.Identity.Web.GraphServiceClientOptions.GraphServiceClientOptions() -> void\nMicrosoft.Identity.Web.GraphServiceClientOptions.Scopes.get -> System.Collections.Generic.IEnumerable<string!>!\nMicrosoft.Identity.Web.GraphServiceClientOptions.Scopes.set -> void\nMicrosoft.Identity.Web.GraphServiceClientOptions.User.get -> System.Security.Claims.ClaimsPrincipal?\nMicrosoft.Identity.Web.GraphServiceClientOptions.User.set -> void\n```\n\n----------------------------------------\n\nTITLE: Acquiring Access Token for Microsoft Graph API in C#\nDESCRIPTION: This code snippet demonstrates how to acquire an access token for Microsoft Graph API using the TokenAcquisition service from Microsoft.Identity.Web. It shows the process of obtaining a token with specific scopes for authenticated requests.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.GraphServiceClient/PublicAPI/net6.0/PublicAPI.Unshipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class HomeController : Controller\n{\n    private readonly ITokenAcquisition _tokenAcquisition;\n    private readonly GraphServiceClient _graphServiceClient;\n\n    public HomeController(ITokenAcquisition tokenAcquisition, GraphServiceClient graphServiceClient)\n    {\n        _tokenAcquisition = tokenAcquisition;\n        _graphServiceClient = graphServiceClient;\n    }\n\n    [AuthorizeForScopes(Scopes = new[] { \"user.read\" })]\n    public async Task<IActionResult> Index()\n    {\n        var accessToken = await _tokenAcquisition.GetAccessTokenForUserAsync(new[] { \"user.read\" });\n        // Use the access token to call Microsoft Graph API\n        return View();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running the Interactive Azure AD App Configuration Script\nDESCRIPTION: Navigates into the 'AppCreationScripts' directory and executes the 'Configure.ps1' script interactively. This script automates the creation of necessary Azure AD application registrations and updates project configuration files. The user will be prompted for Azure credentials during execution.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/tests/DevApps/WebAppCallsWebApiCallsGraph/AppCreationScripts/AppCreationScripts.md#2025-04-23_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\ncd .\\AppCreationScripts\\ \n.\\Configure.ps1\n```\n\n----------------------------------------\n\nTITLE: Performing POST Requests for App and User Contexts in C#\nDESCRIPTION: These methods execute POST requests to downstream APIs for both app and user contexts. They support generic input and output types, and allow for custom downstream API options and cancellation tokens.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.DownstreamApi/PublicAPI/net6.0/InternalAPI.Shipped.txt#2025-04-23_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.DownstreamApi.PostForAppAsync<TInput>(string? serviceName, TInput input, System.Action<Microsoft.Identity.Abstractions.DownstreamApiOptionsReadOnlyHttpMethod!>? downstreamApiOptionsOverride = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!\n\nMicrosoft.Identity.Web.DownstreamApi.PostForUserAsync<TInput, TOutput>(string? serviceName, TInput input, System.Action<Microsoft.Identity.Abstractions.DownstreamApiOptionsReadOnlyHttpMethod!>? downstreamApiOptionsOverride = null, System.Security.Claims.ClaimsPrincipal? user = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TOutput?>!\n\nMicrosoft.Identity.Web.DownstreamApi.PostForUserAsync<TInput>(string? serviceName, TInput input, System.Action<Microsoft.Identity.Abstractions.DownstreamApiOptionsReadOnlyHttpMethod!>? downstreamApiOptionsOverride = null, System.Security.Claims.ClaimsPrincipal? user = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!\n```\n\n----------------------------------------\n\nTITLE: Non-interactive, Tenant-specific App Management - PowerShell\nDESCRIPTION: Combines non-interactive credential setup with explicit tenant targeting for app creation and cleanup. This pattern is used for automated deployments in scenarios where both credentials and tenant context must be specified. Dependencies include user credentials, the target tenant ID, and PowerShell’s script interfaces.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/tests/DevApps/blazorserver-calls-api/AppCreationScripts/AppCreationScripts.md#2025-04-23_snippet_8\n\nLANGUAGE: PowerShell\nCODE:\n```\n$secpasswd = ConvertTo-SecureString\\u00a0\"[Password here]\" -AsPlainText -Force\n$mycreds = New-Object System.Management.Automation.PSCredential (\"[login@tenantName here]\", $secpasswd)\n$tenantId = \"yourTenantIdGuid\"\n. .\\Cleanup.ps1 -Credential $mycreds -TenantId $tenantId\n. .\\Configure.ps1 -Credential $mycreds -TenantId $tenantId\n```\n\n----------------------------------------\n\nTITLE: Allowing Microsoft Personal Accounts in Azure AD Authentication\nDESCRIPTION: Code sample showing how to configure Azure AD authentication to accept tokens from Microsoft personal accounts in addition to work and school accounts. It sets the TenantId property to 'common' to enable this functionality.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.Azure/PublicAPI.Unshipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)\n        .AddMicrosoftIdentityWebApi(options =>\n            {\n                Configuration.Bind(\"AzureAd\", options);\n                options.TenantId = \"common\";\n            },\n            options => { Configuration.Bind(\"AzureAd\", options); });\n```\n\n----------------------------------------\n\nTITLE: Initializing GraphAuthenticationProvider in C#\nDESCRIPTION: The constructor for GraphAuthenticationProvider initializes the provider with an authorization header provider and default authentication options.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.GraphServiceClient/PublicAPI/net8.0/InternalAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.GraphAuthenticationProvider.GraphAuthenticationProvider(Microsoft.Identity.Abstractions.IAuthorizationHeaderProvider! authorizationHeaderProvider, Microsoft.Identity.Web.GraphServiceClientOptions! defaultAuthenticationOptions) -> void\n```\n\n----------------------------------------\n\nTITLE: DefaultCertificateLoader Static Methods in C#\nDESCRIPTION: Provides static utility methods for certificate loading operations, including batch certificate loading, finding the first valid certificate, and resetting certificate state. Also includes a property for managing user-assigned managed identity client IDs.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.Certificate/PublicAPI.Shipped.txt#2025-04-23_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.DefaultCertificateLoader.LoadAllCertificates(System.Collections.Generic.IEnumerable<Microsoft.Identity.Web.CertificateDescription!>! certificateDescriptions) -> System.Collections.Generic.IEnumerable<System.Security.Cryptography.X509Certificates.X509Certificate2?>!\nstatic Microsoft.Identity.Web.DefaultCertificateLoader.LoadFirstCertificate(System.Collections.Generic.IEnumerable<Microsoft.Identity.Web.CertificateDescription!>! certificateDescriptions) -> System.Security.Cryptography.X509Certificates.X509Certificate2?\nstatic Microsoft.Identity.Web.DefaultCertificateLoader.LoadFirstCertificateAsync(System.Collections.Generic.IEnumerable<Microsoft.Identity.Web.CertificateDescription!>! certificateDescriptions) -> System.Threading.Tasks.Task<System.Security.Cryptography.X509Certificates.X509Certificate2?>!\nstatic Microsoft.Identity.Web.DefaultCertificateLoader.ResetCertificates(System.Collections.Generic.IEnumerable<Microsoft.Identity.Abstractions.CredentialDescription!>? credentialDescription) -> void\nstatic Microsoft.Identity.Web.DefaultCertificateLoader.ResetCertificates(System.Collections.Generic.IEnumerable<Microsoft.Identity.Web.CertificateDescription!>? certificateDescriptions) -> void\nstatic Microsoft.Identity.Web.DefaultCertificateLoader.UserAssignedManagedIdentityClientId.get -> string?\nstatic Microsoft.Identity.Web.DefaultCertificateLoader.UserAssignedManagedIdentityClientId.set -> void\n```\n\n----------------------------------------\n\nTITLE: PUT Operations for App and User Authentication\nDESCRIPTION: Method signatures for making PUT requests to downstream APIs with app-only and user authentication. Supports generic input/output types and optional configuration overrides.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.DownstreamApi/PublicAPI/net462/InternalAPI.Shipped.txt#2025-04-23_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.DownstreamApi.PutForAppAsync<TInput>(string? serviceName, TInput input, System.Action<Microsoft.Identity.Abstractions.DownstreamApiOptionsReadOnlyHttpMethod!>? downstreamApiOptionsOverride = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!\n\nMicrosoft.Identity.Web.DownstreamApi.PutForUserAsync<TInput, TOutput>(string? serviceName, TInput input, System.Action<Microsoft.Identity.Abstractions.DownstreamApiOptionsReadOnlyHttpMethod!>? downstreamApiOptionsOverride = null, System.Security.Claims.ClaimsPrincipal? user = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TOutput?>!\n\nMicrosoft.Identity.Web.DownstreamApi.PutForUserAsync<TInput>(string? serviceName, TInput input, System.Action<Microsoft.Identity.Abstractions.DownstreamApiOptionsReadOnlyHttpMethod!>? downstreamApiOptionsOverride = null, System.Security.Claims.ClaimsPrincipal? user = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!\n```\n\n----------------------------------------\n\nTITLE: Base Request Extension Methods\nDESCRIPTION: Extension methods for base requests to configure authentication, scopes, and user context for Microsoft Graph API calls.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.MicrosoftGraphBeta/PublicAPI/net472/PublicAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic static class BaseRequestExtensions\n{\n    public static T WithAppOnly<T>(this T baseRequest, bool appOnly = true, string? tenant = null);\n    public static T WithAuthenticationOptions<T>(this T baseRequest, Action<AuthorizationHeaderProviderOptions> overrideAuthenticationOptions);\n    public static T WithAuthenticationScheme<T>(this T baseRequest, string authenticationScheme);\n    public static T WithScopes<T>(this T baseRequest, params string[] scopes);\n    public static T WithUser<T>(this T baseRequest, ClaimsPrincipal user);\n}\n```\n\n----------------------------------------\n\nTITLE: Structured Logging Methods for DownstreamApi - Microsoft Identity Web - C#\nDESCRIPTION: These static logging methods enable typed, strongly-structured error/event logging for downstream API invocation, suitable for consumption by ILogger. They accept logger instances, service and path details, and exceptions relevant to the HTTP call. Outputs are void, used only for logging side-effects.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.DownstreamApi/PublicAPI/net9.0/InternalAPI.Shipped.txt#2025-04-23_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Identity.Web.DownstreamApi.Logger.HttpRequestError(Microsoft.Extensions.Logging.ILogger! logger, string! ServiceName, string! BaseUrl, string! RelativePath, System.Exception? ex) -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Identity.Web.DownstreamApi.Logger.UnauthenticatedApiCall(Microsoft.Extensions.Logging.ILogger! logger, System.Exception? ex) -> void\n```\n\n----------------------------------------\n\nTITLE: Implementing MsalSessionTokenCacheProvider Class in C#\nDESCRIPTION: This class provides session-based token caching for MSAL. It includes methods for reading, writing, and removing cache entries, as well as disposal.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net9.0/PublicAPI.Shipped.txt#2025-04-23_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.TokenCacheProviders.Session.MsalSessionTokenCacheProvider\nMicrosoft.Identity.Web.TokenCacheProviders.Session.MsalSessionTokenCacheProvider.Dispose() -> void\nMicrosoft.Identity.Web.TokenCacheProviders.Session.MsalSessionTokenCacheProvider.MsalSessionTokenCacheProvider(Microsoft.AspNetCore.Http.ISession! session, Microsoft.Extensions.Logging.ILogger<Microsoft.Identity.Web.TokenCacheProviders.Session.MsalSessionTokenCacheProvider!>! logger) -> void\noverride Microsoft.Identity.Web.TokenCacheProviders.Session.MsalSessionTokenCacheProvider.ReadCacheBytesAsync(string! cacheKey) -> System.Threading.Tasks.Task<byte[]?>!\noverride Microsoft.Identity.Web.TokenCacheProviders.Session.MsalSessionTokenCacheProvider.ReadCacheBytesAsync(string! cacheKey, Microsoft.Identity.Web.TokenCacheProviders.CacheSerializerHints! cacheSerializerHints) -> System.Threading.Tasks.Task<byte[]?>!\noverride Microsoft.Identity.Web.TokenCacheProviders.Session.MsalSessionTokenCacheProvider.RemoveKeyAsync(string! cacheKey) -> System.Threading.Tasks.Task!\noverride Microsoft.Identity.Web.TokenCacheProviders.Session.MsalSessionTokenCacheProvider.WriteCacheBytesAsync(string! cacheKey, byte[]! bytes) -> System.Threading.Tasks.Task!\n```\n\n----------------------------------------\n\nTITLE: Declaring OidcIdpSignedAssertionLoader Class in C#\nDESCRIPTION: Defines the `OidcIdpSignedAssertionLoader` class within the `Microsoft.Identity.Web.OidcFic` namespace. This class is responsible for loading signed assertions from an OIDC Identity Provider based on specified credential descriptions.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.OidcFIC/PublicAPI/net8.0/InternalAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Identity.Web.OidcFic.OidcIdpSignedAssertionLoader\n```\n\n----------------------------------------\n\nTITLE: Adding Graph Beta Service Client with Custom Lifetime\nDESCRIPTION: Static extension method to add Microsoft Graph Beta service client to the dependency injection container with a specified service lifetime\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.GraphServiceClientBeta/PublicAPI/net9.0/InternalAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.GraphBetaServiceCollectionExtensions.AddGraphBetaServiceClientWithLifetime(Microsoft.Extensions.DependencyInjection.IServiceCollection services, Microsoft.Extensions.DependencyInjection.ServiceLifetime lifetime) -> void\n```\n\n----------------------------------------\n\nTITLE: Request Options Extensions in C#\nDESCRIPTION: Extension methods for IList<IRequestOption> to configure authentication options, scopes, and user claims.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.GraphServiceClient/PublicAPI/net462/PublicAPI.Shipped.txt#2025-04-23_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.RequestOptionsExtension.WithAppOnly(this System.Collections.Generic.IList<Microsoft.Kiota.Abstractions.IRequestOption!>! options, bool appOnly = true, string? tenant = null) -> System.Collections.Generic.IList<Microsoft.Kiota.Abstractions.IRequestOption!>!\nstatic Microsoft.Identity.Web.RequestOptionsExtension.WithAuthenticationOptions(this System.Collections.Generic.IList<Microsoft.Kiota.Abstractions.IRequestOption!>! options, Microsoft.Identity.Web.GraphAuthenticationOptions! optionsValue) -> System.Collections.Generic.IList<Microsoft.Kiota.Abstractions.IRequestOption!>!\nstatic Microsoft.Identity.Web.RequestOptionsExtension.WithAuthenticationOptions(this System.Collections.Generic.IList<Microsoft.Kiota.Abstractions.IRequestOption!>! options, System.Action<Microsoft.Identity.Web.GraphAuthenticationOptions!>! optionsValue) -> System.Collections.Generic.IList<Microsoft.Kiota.Abstractions.IRequestOption!>!\nstatic Microsoft.Identity.Web.RequestOptionsExtension.WithScopes(this System.Collections.Generic.IList<Microsoft.Kiota.Abstractions.IRequestOption!>! options, params string![]! scopes) -> System.Collections.Generic.IList<Microsoft.Kiota.Abstractions.IRequestOption!>!\nstatic Microsoft.Identity.Web.RequestOptionsExtension.WithUser(this System.Collections.Generic.IList<Microsoft.Kiota.Abstractions.IRequestOption!>! options, System.Security.Claims.ClaimsPrincipal! user) -> System.Collections.Generic.IList<Microsoft.Kiota.Abstractions.IRequestOption!>!\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication Middleware in ASP.NET Core\nDESCRIPTION: This snippet shows how to configure the authentication middleware in the Configure method of an ASP.NET Core application. It sets up cookie authentication and OpenID Connect.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.GraphServiceClient/PublicAPI/net7.0/PublicAPI.Unshipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\napp.UseAuthentication();\napp.UseAuthorization();\n```\n\n----------------------------------------\n\nTITLE: Extending IServiceCollection for Microsoft Graph in C#\nDESCRIPTION: Defines extension methods for IServiceCollection to add Microsoft Graph support. These methods allow for different ways of configuring Microsoft Graph in the dependency injection container.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.GraphServiceClient/PublicAPI/net7.0/PublicAPI.Shipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.GraphServiceCollectionExtensions.AddMicrosoftGraph(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!\nstatic Microsoft.Identity.Web.GraphServiceCollectionExtensions.AddMicrosoftGraph(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, Microsoft.Extensions.Configuration.IConfiguration! configurationSection) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!\nstatic Microsoft.Identity.Web.GraphServiceCollectionExtensions.AddMicrosoftGraph(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, System.Action<Microsoft.Identity.Web.GraphServiceClientOptions!>! configureMicrosoftGraphOptions) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!\n```\n\n----------------------------------------\n\nTITLE: Targeting Azure Sovereign Clouds for Script Execution - PowerShell\nDESCRIPTION: Executes the cleanup and configuration scripts specifically against a given Azure Sovereign cloud environment by passing the '-AzureEnvironmentName' parameter. Supported values include AzureCloud, AzureChinaCloud, AzureUSGovernment, and AzureGermanyCloud. This is required for deploying applications in non-public Azure regions and ensures correct endpoint targeting.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/tests/DevApps/blazorserver-calls-api/AppCreationScripts/AppCreationScripts.md#2025-04-23_snippet_9\n\nLANGUAGE: PowerShell\nCODE:\n```\n. .\\Cleanup.ps1 -AzureEnvironmentName \"AzureGermanyCloud\"\n. .\\Configure.ps1 -AzureEnvironmentName \"AzureGermanyCloud\"\n```\n\n----------------------------------------\n\nTITLE: Extending IList<IRequestOption> for Graph Request Customization in C#\nDESCRIPTION: Defines extension methods for IList<IRequestOption> to customize Microsoft Graph requests. These methods allow for adding various options to Graph requests, such as app-only auth, custom authentication options, scopes, and user information.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.GraphServiceClient/PublicAPI/net7.0/PublicAPI.Shipped.txt#2025-04-23_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.RequestOptionsExtension.WithAppOnly(this System.Collections.Generic.IList<Microsoft.Kiota.Abstractions.IRequestOption!>! options, bool appOnly = true, string? tenant = null) -> System.Collections.Generic.IList<Microsoft.Kiota.Abstractions.IRequestOption!>!\nstatic Microsoft.Identity.Web.RequestOptionsExtension.WithAuthenticationOptions(this System.Collections.Generic.IList<Microsoft.Kiota.Abstractions.IRequestOption!>! options, Microsoft.Identity.Web.GraphAuthenticationOptions! optionsValue) -> System.Collections.Generic.IList<Microsoft.Kiota.Abstractions.IRequestOption!>!\nstatic Microsoft.Identity.Web.RequestOptionsExtension.WithAuthenticationOptions(this System.Collections.Generic.IList<Microsoft.Kiota.Abstractions.IRequestOption!>! options, System.Action<Microsoft.Identity.Web.GraphAuthenticationOptions!>! optionsValue) -> System.Collections.Generic.IList<Microsoft.Kiota.Abstractions.IRequestOption!>!\nstatic Microsoft.Identity.Web.RequestOptionsExtension.WithAuthenticationScheme(this System.Collections.Generic.IList<Microsoft.Kiota.Abstractions.IRequestOption!>! options, string! authenticationScheme) -> System.Collections.Generic.IList<Microsoft.Kiota.Abstractions.IRequestOption!>!\nstatic Microsoft.Identity.Web.RequestOptionsExtension.WithScopes(this System.Collections.Generic.IList<Microsoft.Kiota.Abstractions.IRequestOption!>! options, params string![]! scopes) -> System.Collections.Generic.IList<Microsoft.Kiota.Abstractions.IRequestOption!>!\nstatic Microsoft.Identity.Web.RequestOptionsExtension.WithUser(this System.Collections.Generic.IList<Microsoft.Kiota.Abstractions.IRequestOption!>! options, System.Security.Claims.ClaimsPrincipal! user) -> System.Collections.Generic.IList<Microsoft.Kiota.Abstractions.IRequestOption!>!\n```\n\n----------------------------------------\n\nTITLE: Defining GraphServiceClientOptions Class in C#\nDESCRIPTION: Defines the GraphServiceClientOptions class with properties for Scopes and User, along with a constructor.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.GraphServiceClient/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.GraphServiceClientOptions\nMicrosoft.Identity.Web.GraphServiceClientOptions.GraphServiceClientOptions() -> void\nMicrosoft.Identity.Web.GraphServiceClientOptions.Scopes.get -> System.Collections.Generic.IEnumerable<string!>!\nMicrosoft.Identity.Web.GraphServiceClientOptions.Scopes.set -> void\nMicrosoft.Identity.Web.GraphServiceClientOptions.User.get -> System.Security.Claims.ClaimsPrincipal?\nMicrosoft.Identity.Web.GraphServiceClientOptions.User.set -> void\n```\n\n----------------------------------------\n\nTITLE: Adding Graph Beta Service Client with Custom Lifetime\nDESCRIPTION: Extension method to add Microsoft Graph Beta service client to the dependency injection container with a specified service lifetime.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.GraphServiceClientBeta/PublicAPI/net7.0/InternalAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.GraphBetaServiceCollectionExtensions.AddGraphBetaServiceClientWithLifetime(Microsoft.Extensions.DependencyInjection.IServiceCollection services, Microsoft.Extensions.DependencyInjection.ServiceLifetime lifetime) -> void\n```\n\n----------------------------------------\n\nTITLE: PreBuild Method Signature in TokenAcquirerFactory Class\nDESCRIPTION: Virtual method signature for a void PreBuild method in the TokenAcquirerFactory class. This method likely performs operations before the building process completes.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.TokenAcquisition/PublicAPI/net6.0/PublicAPI.Shipped.txt#2025-04-23_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nvirtual Microsoft.Identity.Web.TokenAcquirerFactory.PreBuild() -> void\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure AD Authentication Options in .NET\nDESCRIPTION: This snippet demonstrates how to configure Azure AD authentication options for a .NET application using Microsoft Identity Web. It shows the setup of client credentials, authority, and various other authentication parameters.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net462/PublicAPI.Unshipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddAuthentication(OpenIdConnectDefaults.AuthenticationScheme)\n    .AddMicrosoftIdentityWebApp(options =>\n    {\n        Configuration.Bind(\"AzureAd\", options);\n\n        options.ClientSecret = Configuration[\"AzureAd:ClientSecret\"];\n        options.ClientCertificates = new X509Certificate2Collection\n        {\n            new X509Certificate2(Configuration[\"AzureAd:CertificateName\"])\n        };\n\n        options.Authority = $\"{Configuration[\"AzureAd:Instance\"]}{Configuration[\"AzureAd:TenantId\"]}\";\n\n        options.TokenValidationParameters.ValidateIssuer = false;\n\n        options.Events.OnTokenValidated = async context =>\n        {\n            var tokenAcquisition = context.HttpContext.RequestServices\n                .GetRequiredService<ITokenAcquisition>();\n\n            var graphClient = new GraphServiceClient(\n                new DelegateAuthenticationProvider(async (request) =>\n                {\n                    var token = await tokenAcquisition\n                        .GetAccessTokenForUserAsync(new[] { \"User.Read\" });\n                    request.Headers.Authorization =\n                        new AuthenticationHeaderValue(\"Bearer\", token);\n                }));\n\n            var user = await graphClient.Me.Request().GetAsync();\n\n            context.Principal.AddUserGraphInfo(user);\n        };\n    })\n```\n\n----------------------------------------\n\nTITLE: Graph Service Collection Extensions\nDESCRIPTION: Extension methods for IServiceCollection to configure Microsoft Graph services. Provides multiple overloads for adding Microsoft Graph with different configuration options.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.GraphServiceClient/PublicAPI/net6.0/PublicAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.GraphServiceCollectionExtensions.AddMicrosoftGraph(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!\nstatic Microsoft.Identity.Web.GraphServiceCollectionExtensions.AddMicrosoftGraph(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, Microsoft.Extensions.Configuration.IConfiguration! configurationSection) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!\nstatic Microsoft.Identity.Web.GraphServiceCollectionExtensions.AddMicrosoftGraph(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, System.Action<Microsoft.Identity.Web.GraphServiceClientOptions!>! configureMicrosoftGraphOptions) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!\n```\n\n----------------------------------------\n\nTITLE: Service Registration Extensions\nDESCRIPTION: Extension methods for registering downstream API services with dependency injection container with configurable lifetimes.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.DownstreamApi/PublicAPI/netstandard2.0/InternalAPI.Shipped.txt#2025-04-23_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.DownstreamApiExtensions.AddDownstreamApiWithLifetime(Microsoft.Extensions.DependencyInjection.IServiceCollection! services, Microsoft.Extensions.DependencyInjection.ServiceLifetime lifetime) -> void\n\nstatic Microsoft.Identity.Web.DownstreamApiExtensions.RegisterDownstreamApi(Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> void\n```\n\n----------------------------------------\n\nTITLE: TokenAcquisitionAuthenticationProviderOption Class Definition\nDESCRIPTION: Configuration options class for token acquisition authentication provider. Contains properties for authentication scheme, scopes, tenant information, and user claims principal.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.MicrosoftGraphBeta/PublicAPI/net6.0/InternalAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.TokenAcquisitionAuthenticationProviderOption\nMicrosoft.Identity.Web.TokenAcquisitionAuthenticationProviderOption.AppOnly.get -> bool?\nMicrosoft.Identity.Web.TokenAcquisitionAuthenticationProviderOption.AppOnly.set -> void\nMicrosoft.Identity.Web.TokenAcquisitionAuthenticationProviderOption.AuthenticationScheme.get -> string\nMicrosoft.Identity.Web.TokenAcquisitionAuthenticationProviderOption.AuthenticationScheme.set -> void\nMicrosoft.Identity.Web.TokenAcquisitionAuthenticationProviderOption.AuthorizationHeaderProviderOptions.get -> System.Action<Microsoft.Identity.Abstractions.AuthorizationHeaderProviderOptions>\nMicrosoft.Identity.Web.TokenAcquisitionAuthenticationProviderOption.AuthorizationHeaderProviderOptions.set -> void\nMicrosoft.Identity.Web.TokenAcquisitionAuthenticationProviderOption.Scopes.get -> string[]\nMicrosoft.Identity.Web.TokenAcquisitionAuthenticationProviderOption.Scopes.set -> void\nMicrosoft.Identity.Web.TokenAcquisitionAuthenticationProviderOption.Tenant.get -> string\nMicrosoft.Identity.Web.TokenAcquisitionAuthenticationProviderOption.Tenant.set -> void\nMicrosoft.Identity.Web.TokenAcquisitionAuthenticationProviderOption.TokenAcquisitionAuthenticationProviderOption() -> void\nMicrosoft.Identity.Web.TokenAcquisitionAuthenticationProviderOption.User.get -> System.Security.Claims.ClaimsPrincipal\nMicrosoft.Identity.Web.TokenAcquisitionAuthenticationProviderOption.User.set -> void\n```\n\n----------------------------------------\n\nTITLE: Getting Credential Source for OidcIdpSignedAssertionLoader (C#)\nDESCRIPTION: Defines the signature for the getter of the `CredentialSource` property on the `OidcIdpSignedAssertionLoader` class. This property likely indicates the origin or type of the credential being loaded, returning a `Microsoft.Identity.Abstractions.CredentialSource` object.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.OidcFIC/PublicAPI/net462/InternalAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Identity.Web.OidcFic.OidcIdpSignedAssertionLoader.CredentialSource.get -> Microsoft.Identity.Abstractions.CredentialSource\n```\n\n----------------------------------------\n\nTITLE: Exception Throwing Methods\nDESCRIPTION: Static methods for throwing various types of exceptions with standardized parameter patterns. Supports ArgumentException, ArgumentNullException, ArgumentOutOfRangeException, and InvalidOperationException.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.Diagnostics/PublicAPI/net9.0/InternalAPI.Shipped.txt#2025-04-23_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.Throws.ArgumentException(string! paramName, string? message) -> void\nstatic Microsoft.Identity.Web.Throws.ArgumentNullException(string! paramName, string? message) -> void\nstatic Microsoft.Identity.Web.Throws.ArgumentOutOfRangeException(string! paramName, object? actualValue, string? message) -> void\nstatic Microsoft.Identity.Web.Throws.InvalidOperationException(string! message, System.Exception? innerException) -> void\n```\n\n----------------------------------------\n\nTITLE: Overriding GetClientAssertionAsync in OidcIdpSignedAssertionProvider (C#)\nDESCRIPTION: Defines an override for the asynchronous `GetClientAssertionAsync` method within `OidcIdpSignedAssertionProvider`. This method generates or retrieves a client assertion based on the OIDC IDP signed assertion, potentially using the provided `assertionRequestOptions`, and returns it wrapped in a `Task<ClientAssertion>`.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.OidcFIC/PublicAPI/net8.0/InternalAPI.Shipped.txt#2025-04-23_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\noverride Microsoft.Identity.Web.OidcFic.OidcIdpSignedAssertionProvider.GetClientAssertionAsync(Microsoft.Identity.Client.AssertionRequestOptions? assertionRequestOptions) -> System.Threading.Tasks.Task<Microsoft.Identity.Web.ClientAssertion!>!\n```\n\n----------------------------------------\n\nTITLE: Configuring Microsoft Identity Web Services in ASP.NET Core\nDESCRIPTION: This snippet demonstrates how to add and configure Microsoft Identity Web services in the ConfigureServices method of an ASP.NET Core application. It includes options for token caching and incremental consent.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.GraphServiceClient/PublicAPI/net7.0/PublicAPI.Unshipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddMicrosoftIdentityWebAppAuthentication(Configuration)\n    .EnableTokenAcquisitionToCallDownstreamApi()\n    .AddInMemoryTokenCaches();\n\nservices.AddMicrosoftGraph(Configuration.GetSection(\"GraphBeta\"));\n\nservices.AddControllersWithViews(options =>\n{\n    var policy = new AuthorizationPolicyBuilder()\n        .RequireAuthenticatedUser()\n        .Build();\n    options.Filters.Add(new AuthorizeFilter(policy));\n}).AddMicrosoftIdentityUI();\n\nservices.AddRazorPages()\n    .AddMicrosoftIdentityUI();\n```\n\n----------------------------------------\n\nTITLE: Running Configuration Script for Azure AD Apps and Code (PowerShell)\nDESCRIPTION: Provides PowerShell commands to first navigate into the `AppCreationScripts` directory and then execute the `Configure.ps1` script. This automation script handles the creation of the required Azure AD application registrations for both the client and service, sets up necessary permissions and dependencies, and automatically updates the configuration files (e.g., `appsettings.json`) within the Visual Studio projects with the appropriate identifiers and secrets from Azure AD.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/tests/DevApps/B2CWebAppCallsWebApi/README-incremental-instructions.md#2025-04-23_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\ncd .\\AppCreationScripts\\ \n.\\Configure.ps1\n```\n\n----------------------------------------\n\nTITLE: Graph Authentication Options Class Definition\nDESCRIPTION: Defines the core authentication configuration options for Microsoft Graph API access including base URL property.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.GraphServiceClient/PublicAPI/net9.0/PublicAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.GraphAuthenticationOptions\nMicrosoft.Identity.Web.GraphAuthenticationOptions.BaseUrl.get -> string!\nMicrosoft.Identity.Web.GraphAuthenticationOptions.GraphAuthenticationOptions() -> void\n```\n\n----------------------------------------\n\nTITLE: Initializing DownstreamApi Class in C#\nDESCRIPTION: Constructor for the DownstreamApi class, which takes dependencies for authorization, options, HTTP client factory, and logging.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.DownstreamApi/PublicAPI/net9.0/InternalAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.DownstreamApi.DownstreamApi(Microsoft.Identity.Abstractions.IAuthorizationHeaderProvider! authorizationHeaderProvider, Microsoft.Extensions.Options.IOptionsMonitor<Microsoft.Identity.Abstractions.DownstreamApiOptions!>! namedDownstreamApiOptions, System.Net.Http.IHttpClientFactory! httpClientFactory, Microsoft.Extensions.Logging.ILogger<Microsoft.Identity.Web.DownstreamApi!>! logger) -> void\n```\n\n----------------------------------------\n\nTITLE: Installing msidentity-app-sync Tool from Local Source\nDESCRIPTION: Command to install the msidentity-app-sync tool globally from a local NuGet package source. The tool must be run from the tools\\app-provisioning-tool\\app-provisioning-tool folder.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/tools/app-provisioning-tool/app-provisioning-tool/Readme.txt#2025-04-23_snippet_0\n\nLANGUAGE: dotnet cli\nCODE:\n```\ndotnet tool install --global --add-source ./nupkg msidentity-app-sync\n```\n\n----------------------------------------\n\nTITLE: Cloning Sample Repository and Navigating - Shell\nDESCRIPTION: This snippet provides shell commands to clone the sample repository from GitHub and change directory to the appropriate project folder. This operation requires git to be installed and available in the system PATH. Key parameters include the repository URL and the target folder path, which should be close to the root on Windows to avoid path limitations. The expected input is a shell environment, and the output is a new local copy of the repo and an updated shell working directory.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/tests/DevApps/WebAppCallsWebApiCallsGraph/README-incremental-instructions.md#2025-04-23_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngit clone https://github.com/Azure-Samples/active-directory-aspnetcore-webapp-openidconnect-v2.git\n\ncd \"4-WebApp-your-API\\4-1-Your-API\"\n```\n\n----------------------------------------\n\nTITLE: Defining MicrosoftIdentityAppCallsWebApiAuthenticationBuilder Methods in C#\nDESCRIPTION: Defines methods for the `MicrosoftIdentityAppCallsWebApiAuthenticationBuilder` class, used for configuring authentication for applications that call web APIs. Includes methods to add distributed or in-memory token caches, returning the builder instance for chaining configurations. These methods facilitate setting up token caching mechanisms required for efficient token acquisition.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.TokenAcquisition/PublicAPI/net462/PublicAPI.Shipped.txt#2025-04-23_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Identity.Web.MicrosoftIdentityAppCallsWebApiAuthenticationBuilder\nMicrosoft.Identity.Web.MicrosoftIdentityAppCallsWebApiAuthenticationBuilder.AddDistributedTokenCaches() -> Microsoft.Identity.Web.MicrosoftIdentityAppCallsWebApiAuthenticationBuilder!\nMicrosoft.Identity.Web.MicrosoftIdentityAppCallsWebApiAuthenticationBuilder.AddInMemoryTokenCaches(System.Action<Microsoft.Identity.Web.TokenCacheProviders.InMemory.MsalMemoryTokenCacheOptions!>? configureOptions = null, System.Action<Microsoft.Extensions.Caching.Memory.MemoryCacheOptions!>? memoryCacheOptions = null) -> Microsoft.Identity.Web.MicrosoftIdentityAppCallsWebApiAuthenticationBuilder!\n```\n\n----------------------------------------\n\nTITLE: DefineConfiguration Method Signature in TokenAcquirerFactory Class\nDESCRIPTION: Virtual method signature for defining configuration using IConfigurationBuilder. Returns a string and requires a non-null builder parameter.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.TokenAcquisition/PublicAPI/net6.0/PublicAPI.Shipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nvirtual Microsoft.Identity.Web.TokenAcquirerFactory.DefineConfiguration(Microsoft.Extensions.Configuration.IConfigurationBuilder! builder) -> string!\n```\n\n----------------------------------------\n\nTITLE: Getting/Setting Base URL for Microsoft Graph Options in C#\nDESCRIPTION: Provides accessors for the BaseUrl property within MicrosoftGraphOptions. This property determines the root endpoint for Microsoft Graph API calls, defaulting typically to 'https://graph.microsoft.com/v1.0'.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.MicrosoftGraph/PublicAPI/net6.0/PublicAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Identity.Web.MicrosoftGraphOptions.BaseUrl.get -> string!\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Identity.Web.MicrosoftGraphOptions.BaseUrl.set -> void\n```\n\n----------------------------------------\n\nTITLE: Setting up Identity Web Logging with ILoggingBuilder\nDESCRIPTION: Demonstrates how to configure Identity Web logging by adding it to the logging builder in a .NET application. This enables detailed logging for Microsoft Identity Web components.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.Diagnostics/PublicAPI/net462/PublicAPI.Unshipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddLogging(loggingBuilder =>\n{\n    loggingBuilder.AddIdentityWebEventSource();\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing DownstreamApi Class in C#\nDESCRIPTION: Constructor for the DownstreamApi class, which takes dependencies for authorization, options, HTTP client factory, and logging.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.DownstreamApi/PublicAPI/net472/InternalAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.DownstreamApi.DownstreamApi(Microsoft.Identity.Abstractions.IAuthorizationHeaderProvider! authorizationHeaderProvider, Microsoft.Extensions.Options.IOptionsMonitor<Microsoft.Identity.Abstractions.DownstreamApiOptions!>! namedDownstreamApiOptions, System.Net.Http.IHttpClientFactory! httpClientFactory, Microsoft.Extensions.Logging.ILogger<Microsoft.Identity.Web.DownstreamApi!>! logger) -> void\n```\n\n----------------------------------------\n\nTITLE: GraphServiceCollectionExtensions Static Methods\nDESCRIPTION: Extension methods for adding Microsoft Graph services to the dependency injection container\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.MicrosoftGraphBeta/PublicAPI/net462/PublicAPI.Shipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic static class GraphServiceCollectionExtensions\n{\n    public static IServiceCollection AddMicrosoftGraph(this IServiceCollection services);\n    public static IServiceCollection AddMicrosoftGraph(this IServiceCollection services, Action<MicrosoftGraphOptions> configureMicrosoftGraphOptions);\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Microsoft Identity Authentication in Blazor Server Program.cs\nDESCRIPTION: Code for configuring Microsoft Identity authentication in a Blazor Server application's Program.cs file. This snippet shows how to add authentication services and configure the application to use Microsoft Identity Web.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.Diagnostics/PublicAPI/net462/InternalAPI.Unshipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddAuthentication(OpenIdConnectDefaults.AuthenticationScheme)\n    .AddMicrosoftIdentityWebApp(builder.Configuration.GetSection(\"AzureAd\"));\n\nbuilder.Services.AddControllersWithViews()\n    .AddMicrosoftIdentityUI();\n\nbuilder.Services.AddRazorPages();\nbuilder.Services.AddServerSideBlazor();\n    .AddMicrosoftIdentityConsentHandler();\n```\n\n----------------------------------------\n\nTITLE: Implementing Exception Throwing Utility in C#\nDESCRIPTION: Defines a Throws class with various methods for throwing different types of exceptions, including ArgumentException, ArgumentNullException, and ArgumentOutOfRangeException. It also includes methods for null checks and range validations.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.Diagnostics/PublicAPI/netstandard2.0/InternalAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.Throws.ArgumentException(string! paramName, string? message) -> void\nstatic Microsoft.Identity.Web.Throws.ArgumentException(string! paramName, string? message, System.Exception? innerException) -> void\nstatic Microsoft.Identity.Web.Throws.ArgumentNullException(string! paramName) -> void\nstatic Microsoft.Identity.Web.Throws.ArgumentNullException(string! paramName, string? message) -> void\nstatic Microsoft.Identity.Web.Throws.ArgumentOutOfRangeException(string! paramName) -> void\nstatic Microsoft.Identity.Web.Throws.ArgumentOutOfRangeException(string! paramName, object? actualValue, string? message) -> void\nstatic Microsoft.Identity.Web.Throws.ArgumentOutOfRangeException(string! paramName, string? message) -> void\nstatic Microsoft.Identity.Web.Throws.IfBufferTooSmall(int bufferSize, int requiredSize, string! paramName = \"\") -> void\nstatic Microsoft.Identity.Web.Throws.IfMemberNull<TParameter, TMember>(TParameter argument, TMember member, string! paramName = \"\", string! memberName = \"\") -> TMember\nstatic Microsoft.Identity.Web.Throws.IfNull<T>(T argument, string! paramName = \"\") -> T\nstatic Microsoft.Identity.Web.Throws.IfNullOrEmpty(string? argument, string! paramName = \"\") -> string!\nstatic Microsoft.Identity.Web.Throws.IfNullOrEmpty<T>(System.Collections.Generic.ICollection<T>? argument, string! paramName = \"\") -> System.Collections.Generic.ICollection<T>!\nstatic Microsoft.Identity.Web.Throws.IfNullOrEmpty<T>(System.Collections.Generic.IReadOnlyCollection<T>? argument, string! paramName = \"\") -> System.Collections.Generic.IReadOnlyCollection<T>!\nstatic Microsoft.Identity.Web.Throws.IfNullOrMemberNull<TParameter, TMember>(TParameter argument, TMember member, string! paramName = \"\", string! memberName = \"\") -> TMember\nstatic Microsoft.Identity.Web.Throws.IfNullOrWhitespace(string? argument, string! paramName = \"\") -> string!\nstatic Microsoft.Identity.Web.Throws.IfOutOfRange<T>(T argument, string! paramName = \"\") -> T\nstatic Microsoft.Identity.Web.Throws.InvalidOperationException(string! message) -> void\nstatic Microsoft.Identity.Web.Throws.InvalidOperationException(string! message, System.Exception? innerException) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining OidcIdpSignedAssertionProvider Members in C#\nDESCRIPTION: Specifies the members of the OidcIdpSignedAssertionProvider class in the Microsoft.Identity.Web.OidcFic namespace. It includes the constructor signature, which takes dependencies like ITokenAcquirerFactory, MicrosoftIdentityApplicationOptions, and an optional tokenExchangeUrl. It also defines the overridden GetClientAssertionAsync method, which is responsible for asynchronously generating a client assertion (Microsoft.Identity.Web.ClientAssertion) potentially using an OIDC IDP signed assertion, based on the provided AssertionRequestOptions. This provider facilitates the use of signed assertions for client authentication.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.OidcFIC/PublicAPI/net6.0/InternalAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Identity.Web.OidcFic.OidcIdpSignedAssertionProvider\nMicrosoft.Identity.Web.OidcFic.OidcIdpSignedAssertionProvider.OidcIdpSignedAssertionProvider(Microsoft.Identity.Abstractions.ITokenAcquirerFactory! tokenAcquirerFactory, Microsoft.Identity.Abstractions.MicrosoftIdentityApplicationOptions! options, string? tokenExchangeUrl) -> void\noverride Microsoft.Identity.Web.OidcFic.OidcIdpSignedAssertionProvider.GetClientAssertionAsync(Microsoft.Identity.Client.AssertionRequestOptions? assertionRequestOptions) -> System.Threading.Tasks.Task<Microsoft.Identity.Web.ClientAssertion!>!\n```\n\n----------------------------------------\n\nTITLE: Configuring Cookie Authentication for Session Persistence\nDESCRIPTION: This code demonstrates how to set up cookie authentication with session persistence. It configures various cookie options including lifetime, path, secure attributes, and sliding expiration to manage authentication sessions.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net7.0/InternalAPI.Unshipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\napp.UseCookieAuthentication(new CookieAuthenticationOptions\n{\n    AuthenticationScheme = \"Cookies\",\n    CookieName = \"auth\",\n    ExpireTimeSpan = TimeSpan.FromDays(1),\n    CookiePath = \"/\",\n    CookieSecure = CookieSecureOption.Always,\n    CookieSameSite = SameSiteMode.None,\n    CookieHttpOnly = true,\n    CookieManager = new ChunkingCookieManager(),\n    SessionStore = new MemoryCacheTicketStore(),\n    SlidingExpiration = true\n});\n```\n\n----------------------------------------\n\nTITLE: Token Acquisition Authentication Provider Class Definition\nDESCRIPTION: Defines the TokenAcquisitionAuthenticationProvider class with methods for authenticating HTTP requests and constructor for initialization with authorization header provider.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.MicrosoftGraph/PublicAPI/net472/InternalAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class TokenAcquisitionAuthenticationProvider\n{\n    public Task AuthenticateRequestAsync(HttpRequestMessage request);\n    public TokenAcquisitionAuthenticationProvider(\n        IAuthorizationHeaderProvider authorizationHeaderProvider,\n        TokenAcquisitionAuthenticationProviderOption options);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Microsoft.Identity.Web.Diagnostics to your project via NuGet\nDESCRIPTION: Shows how to install the Microsoft.Identity.Web.Diagnostics NuGet package to your project using the dotnet CLI, which provides logging capabilities for Microsoft Identity Web applications.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.Diagnostics/PublicAPI/net462/PublicAPI.Unshipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Microsoft.Identity.Web.Diagnostics\n```\n\n----------------------------------------\n\nTITLE: Default MicrosoftIdentity Authentication DelegatingHandler Factory\nDESCRIPTION: Implementation of a factory class for creating HTTP delegating handlers for both app-based and user-based authentication scenarios with Microsoft Identity.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net7.0/InternalAPI.Shipped.txt#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Identity.Web.DefaultMicrosoftIdentityAuthenticationDelegatingHandlerFactory\nMicrosoft.Identity.Web.DefaultMicrosoftIdentityAuthenticationDelegatingHandlerFactory.CreateAppHandler(string? serviceName) -> System.Net.Http.DelegatingHandler!\nMicrosoft.Identity.Web.DefaultMicrosoftIdentityAuthenticationDelegatingHandlerFactory.CreateUserHandler(string? serviceName) -> System.Net.Http.DelegatingHandler!\nMicrosoft.Identity.Web.DefaultMicrosoftIdentityAuthenticationDelegatingHandlerFactory.DefaultMicrosoftIdentityAuthenticationDelegatingHandlerFactory(System.IServiceProvider! serviceProvider) -> void\n```\n\n----------------------------------------\n\nTITLE: Implementing OIDC Signed Assertion Provider - Microsoft.Identity.Web - C#\nDESCRIPTION: Defines the OidcIdpSignedAssertionProvider class for generating or retrieving OIDC identity provider signed assertions as client assertions during authentication. The constructor requires a token acquirer factory, application options, and an optional token exchange URL. The overridden GetClientAssertionAsync method is asynchronous and delivers a ClientAssertion instance, taking optional assertion request options. Assumes integration with the Microsoft.Identity.Web and Microsoft.Identity.Client packages as dependencies.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.OidcFIC/PublicAPI/net9.0/InternalAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Identity.Web.OidcFic.OidcIdpSignedAssertionProvider\nMicrosoft.Identity.Web.OidcFic.OidcIdpSignedAssertionProvider.OidcIdpSignedAssertionProvider(Microsoft.Identity.Abstractions.ITokenAcquirerFactory! tokenAcquirerFactory, Microsoft.Identity.Abstractions.MicrosoftIdentityApplicationOptions! options, string? tokenExchangeUrl) -> void\noverride Microsoft.Identity.Web.OidcFic.OidcIdpSignedAssertionProvider.GetClientAssertionAsync(Microsoft.Identity.Client.AssertionRequestOptions? assertionRequestOptions) -> System.Threading.Tasks.Task<Microsoft.Identity.Web.ClientAssertion!>!\n```\n\n----------------------------------------\n\nTITLE: Token Acquisition Provider Options Class Definition\nDESCRIPTION: Configuration options class for token acquisition authentication provider. Contains properties for authentication scheme, scopes, tenant settings, and user claims.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.MicrosoftGraph/PublicAPI/net7.0/InternalAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic class TokenAcquisitionAuthenticationProviderOption\n{\n    public bool? AppOnly { get; set; }\n    public string AuthenticationScheme { get; set; }\n    public Action<AuthorizationHeaderProviderOptions> AuthorizationHeaderProviderOptions { get; set; }\n    public string[] Scopes { get; set; }\n    public string Tenant { get; set; }\n    public ClaimsPrincipal User { get; set; }\n    public TokenAcquisitionAuthenticationProviderOption();\n}\n```\n\n----------------------------------------\n\nTITLE: Registering OIDC FIC Signed Assertion Provider Services in C#\nDESCRIPTION: This C# extension method `AddOidcFic` registers the required services for OIDC FIC signed assertion handling into the .NET `IServiceCollection`. It depends on `Microsoft.Extensions.DependencyInjection` and is part of the `Microsoft.Identity.Web` library, as indicated by the project path `/azuread/microsoft-identity-web`. The method takes the service collection as input (`services`) and returns it to allow for chaining further service registrations. The `#nullable enable` directive indicates the use of C# nullable reference types.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.OidcFIC/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n#nullable enable\nMicrosoft.Extensions.DependencyInjection.OidcFicSignedAssertionProviderExtensions\nstatic Microsoft.Extensions.DependencyInjection.OidcFicSignedAssertionProviderExtensions.AddOidcFic(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication Service Handler for Microsoft Identity\nDESCRIPTION: Handler class for Microsoft Identity authentication services in ASP.NET Core, managing navigation and authentication state\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net6.0/InternalAPI.Shipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.MicrosoftIdentityServiceHandler.MicrosoftIdentityServiceHandler(Microsoft.Identity.Web.MicrosoftIdentityConsentAndConditionalAccessHandler! service, Microsoft.AspNetCore.Components.Authorization.AuthenticationStateProvider! provider, Microsoft.AspNetCore.Components.NavigationManager! manager) -> void\nMicrosoft.Identity.Web.MicrosoftIdentityServiceHandler.Provider.get -> Microsoft.AspNetCore.Components.Authorization.AuthenticationStateProvider!\nMicrosoft.Identity.Web.MicrosoftIdentityServiceHandler.Service.get -> Microsoft.Identity.Web.MicrosoftIdentityConsentAndConditionalAccessHandler!\n```\n\n----------------------------------------\n\nTITLE: Implementing BaseRequestExtensions Methods in C#\nDESCRIPTION: Extension methods for customizing Graph API requests with authentication options, scopes, and user context.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.MicrosoftGraph/PublicAPI/net472/PublicAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic static class BaseRequestExtensions\n{\n    public static T WithAppOnly<T>(this T baseRequest, bool appOnly = true, string? tenant = null);\n    public static T WithAuthenticationOptions<T>(this T baseRequest, Action<AuthorizationHeaderProviderOptions> overrideAuthenticationOptions);\n    public static T WithAuthenticationScheme<T>(this T baseRequest, string authenticationScheme);\n    public static T WithScopes<T>(this T baseRequest, params string[] scopes);\n    public static T WithUser<T>(this T baseRequest, ClaimsPrincipal user);\n}\n```\n\n----------------------------------------\n\nTITLE: Graph Service Client Registration Extensions\nDESCRIPTION: Extension methods for registering Graph service client with dependency injection container with optional lifetime configuration\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.GraphServiceClient/PublicAPI/net462/InternalAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.GraphServiceCollectionExtensions.AddGraphServiceClient(Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> void\nstatic Microsoft.Identity.Web.GraphServiceCollectionExtensions.AddGraphServiceClientWithLifetime(Microsoft.Extensions.DependencyInjection.IServiceCollection! services, Microsoft.Extensions.DependencyInjection.ServiceLifetime lifetime) -> void\n```\n\n----------------------------------------\n\nTITLE: Options Merging Utility Methods in C#\nDESCRIPTION: Utility methods for merging downstream API options with overrides and HTTP method-specific configurations.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.DownstreamApi/PublicAPI/net6.0/InternalAPI.Shipped.txt#2025-04-23_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.DownstreamApi.MergeOptions(string? optionsInstanceName, System.Action<Microsoft.Identity.Abstractions.DownstreamApiOptions!>? calledApiOptionsOverride) -> Microsoft.Identity.Abstractions.DownstreamApiOptions!\n```\n\n----------------------------------------\n\nTITLE: Getting Name for OidcIdpSignedAssertionLoader (C#)\nDESCRIPTION: Defines the signature for the getter of the `Name` property on the `OidcIdpSignedAssertionLoader` class. This property likely returns a string identifier for the loader.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.OidcFIC/PublicAPI/net462/InternalAPI.Shipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Identity.Web.OidcFic.OidcIdpSignedAssertionLoader.Name.get -> string!\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure AD B2C Authentication in ASP.NET Core Startup\nDESCRIPTION: Shows how to configure Azure AD B2C authentication in the ConfigureServices method of an ASP.NET Core application's Startup class using Microsoft Identity Web.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.GraphServiceClient/PublicAPI/net472/InternalAPI.Unshipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic void ConfigureServices(IServiceCollection services)\n{\n    services.AddAuthentication(OpenIdConnectDefaults.AuthenticationScheme)\n        .AddMicrosoftIdentityWebApp(Configuration.GetSection(\"AzureAdB2C\"));\n\n    services.AddControllersWithViews(options =>\n    {\n        var policy = new AuthorizationPolicyBuilder()\n            .RequireAuthenticatedUser()\n            .Build();\n        options.Filters.Add(new AuthorizeFilter(policy));\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Token Acquisition in C# ASP.NET Core Controller\nDESCRIPTION: This code snippet demonstrates how to acquire an access token for a downstream API using Microsoft Identity Web in an ASP.NET Core controller. It uses the ITokenAcquisition interface to obtain the token silently or through a challenge if necessary.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.Diagnostics/PublicAPI/net472/PublicAPI.Shipped.txt#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic class HomeController : Controller\n{\n    private readonly ITokenAcquisition _tokenAcquisition;\n\n    public HomeController(ITokenAcquisition tokenAcquisition)\n    {\n        _tokenAcquisition = tokenAcquisition;\n    }\n\n    [Authorize]\n    public async Task<IActionResult> Index()\n    {\n        string[] scopes = { \"user.read\" };\n        string accessToken = await _tokenAcquisition.GetAccessTokenForUserAsync(scopes);\n\n        // Use the access token to call a protected API\n        // ...\n\n        return View();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining OwinTokenAcquisitionHost Class Members\nDESCRIPTION: Class members and methods for handling token acquisition and user authentication in OWIN middleware. Includes methods for managing authentication schemes, user claims, and token operations.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.OWIN/InternalAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n#nullable enable\nMicrosoft.Identity.Web.Hosts.OwinTokenAcquisitionHost.GetAuthenticatedUserAsync(System.Security.Claims.ClaimsPrincipal? user) -> System.Threading.Tasks.Task<System.Security.Claims.ClaimsPrincipal?>!\nMicrosoft.Identity.Web.Hosts.OwinTokenAcquisitionHost.GetCurrentRedirectUri(Microsoft.Identity.Web.MergedOptions! mergedOptions) -> string?\nMicrosoft.Identity.Web.Hosts.OwinTokenAcquisitionHost.GetEffectiveAuthenticationScheme(string? authenticationScheme) -> string!\nMicrosoft.Identity.Web.Hosts.OwinTokenAcquisitionHost.GetOptions(string? authenticationScheme, out string! effectiveAuthenticationScheme) -> Microsoft.Identity.Web.MergedOptions!\n```\n\n----------------------------------------\n\nTITLE: Sizing Open Iconic SVG Sprite Icons with CSS\nDESCRIPTION: This CSS snippet provides an example of how to control the size of Open Iconic icons embedded using the SVG sprite method. It targets the `<svg>` element (using the suggested `.icon` class) and sets equal `width` and `height` properties.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/tests/DevApps/blazorserver-calls-api/Client/wwwroot/css/open-iconic/README.md#2025-04-23_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.icon {\n  width: 16px;\n  height: 16px;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing AzureAD PowerShell Module (Current User)\nDESCRIPTION: Installs the AzureAD PowerShell module specifically for the current user, without requiring administrator rights. This is an alternative if admin privileges are not available. The module is essential for the configuration and cleanup scripts to manage Azure AD application objects.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/tests/DevApps/WebAppCallsWebApiCallsGraph/AppCreationScripts/AppCreationScripts.md#2025-04-23_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nInstall-Module AzureAD -Scope CurrentUser\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication Handler in C#\nDESCRIPTION: Overridden method to handle authentication asynchronously in AppServicesAuthenticationHandler class\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Identity.Web.AppServicesAuthenticationHandler.HandleAuthenticateAsync() -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Authentication.AuthenticateResult!>!\n```\n\n----------------------------------------\n\nTITLE: Validating App Permissions with RequireAppPermissions in ASP.NET Core\nDESCRIPTION: This snippet demonstrates how to validate app permissions using Microsoft.Identity.Web.Resource.RequireAppPermissions. It ensures the access token contains the specified app permissions before allowing access to protected resources.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.Diagnostics/PublicAPI/net472/InternalAPI.Unshipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\napp.UseAuthentication();\napp.UseAuthorization();\n\napp.MapGet(\"/requireScope\", (HttpContext httpContext) =>\n{\n    httpContext.VerifyUserHasAnyAcceptedScope(\"access_as_user\");\n    return \"Hello scope!\";\n});\n\napp.MapGet(\"/requireAppPermission\", (HttpContext httpContext) =>\n{\n    httpContext.ValidateAppRole(\"access_as_app\");\n    return \"Hello app permission!\";\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Graph Beta Service Client to Service Collection\nDESCRIPTION: Extension method to add Graph Beta Service Client to the service collection with default lifetime.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.GraphServiceClientBeta/PublicAPI/netstandard2.0/InternalAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.GraphBetaServiceCollectionExtensions.AddGraphBetaServiceClient(Microsoft.Extensions.DependencyInjection.IServiceCollection services) -> void\n```\n\n----------------------------------------\n\nTITLE: Enabling Nullable Reference Types in C#\nDESCRIPTION: This C# preprocessor directive enables the nullable reference types feature for the subsequent code, helping to prevent null reference exceptions by making reference types non-nullable by default.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.UI/PublicAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n#nullable enable\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication Event Handlers for Azure AD B2C\nDESCRIPTION: Class implementation for handling Azure AD B2C OpenID Connect authentication events including redirect and failure scenarios\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net6.0/InternalAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.AzureADB2COpenIDConnectEventHandlers.AzureADB2COpenIDConnectEventHandlers(string! schemeName, Microsoft.Identity.Web.MicrosoftIdentityOptions! options, Microsoft.Identity.Web.ILoginErrorAccessor! errorAccessor) -> void\nMicrosoft.Identity.Web.AzureADB2COpenIDConnectEventHandlers.OnRedirectToIdentityProvider(Microsoft.AspNetCore.Authentication.OpenIdConnect.RedirectContext! context) -> System.Threading.Tasks.Task!\nMicrosoft.Identity.Web.AzureADB2COpenIDConnectEventHandlers.OnRemoteFailure(Microsoft.AspNetCore.Authentication.RemoteFailureContext! context) -> System.Threading.Tasks.Task!\n```\n\n----------------------------------------\n\nTITLE: Base Request Extensions - C#\nDESCRIPTION: Extension methods for configuring authentication and authorization options for Graph requests\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.MicrosoftGraph/PublicAPI/net9.0/PublicAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic static class BaseRequestExtensions\n{\n    public static T WithAppOnly<T>(this T baseRequest, bool appOnly = true, string? tenant = null);\n    public static T WithAuthenticationOptions<T>(this T baseRequest, Action<AuthorizationHeaderProviderOptions> overrideAuthenticationOptions);\n    public static T WithAuthenticationScheme<T>(this T baseRequest, string authenticationScheme);\n    public static T WithScopes<T>(this T baseRequest, params string[] scopes);\n    public static T WithUser<T>(this T baseRequest, ClaimsPrincipal user);\n}\n```\n\n----------------------------------------\n\nTITLE: Downstream API Utility Methods in C#\nDESCRIPTION: Utility methods for handling HTTP requests, serialization/deserialization, and logging in downstream API calls. Includes methods for updating requests, handling responses, and logging errors.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.DownstreamApi/PublicAPI/net7.0/InternalAPI.Shipped.txt#2025-04-23_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.DownstreamApi.DeserializeOutputAsync<TOutput>(System.Net.Http.HttpResponseMessage! response, Microsoft.Identity.Abstractions.DownstreamApiOptions! effectiveOptions) -> System.Threading.Tasks.Task<TOutput?>!\n\nstatic Microsoft.Identity.Web.DownstreamApi.SerializeInput<TInput>(TInput input, Microsoft.Identity.Abstractions.DownstreamApiOptions! effectiveOptions) -> System.Net.Http.HttpContent?\n\nstatic Microsoft.Identity.Web.DownstreamApi.Logger.HttpRequestError(Microsoft.Extensions.Logging.ILogger! logger, string! ServiceName, string! BaseUrl, string! RelativePath, System.Exception? ex) -> void\n```\n\n----------------------------------------\n\nTITLE: Performing DELETE Request for App Authentication in C#\nDESCRIPTION: Method to perform a DELETE request to a downstream API using app authentication, with options for input and output serialization.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.DownstreamApi/PublicAPI/net9.0/InternalAPI.Shipped.txt#2025-04-23_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.DownstreamApi.DeleteForAppAsync<TInput, TOutput>(string? serviceName, TInput input, System.Action<Microsoft.Identity.Abstractions.DownstreamApiOptionsReadOnlyHttpMethod!>? downstreamApiOptionsOverride = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TOutput?>!\n```\n\n----------------------------------------\n\nTITLE: Constructing OidcIdpSignedAssertionLoader (C#)\nDESCRIPTION: Defines the constructor signature for the `OidcIdpSignedAssertionLoader` class. It requires dependencies for logging (`ILogger`), application options (`IOptionsMonitor<MicrosoftIdentityApplicationOptions>`), configuration (`IConfiguration`), and a token acquirer factory (`ITokenAcquirerFactory`) for its initialization.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.OidcFIC/PublicAPI/net462/InternalAPI.Shipped.txt#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Identity.Web.OidcFic.OidcIdpSignedAssertionLoader.OidcIdpSignedAssertionLoader(Microsoft.Extensions.Logging.ILogger<Microsoft.Identity.Web.OidcFic.OidcIdpSignedAssertionLoader!>! logger, Microsoft.Extensions.Options.IOptionsMonitor<Microsoft.Identity.Abstractions.MicrosoftIdentityApplicationOptions!>! options, Microsoft.Extensions.Configuration.IConfiguration! configuration, Microsoft.Identity.Abstractions.ITokenAcquirerFactory! tokenAcquirerFactory) -> void\n```\n\n----------------------------------------\n\nTITLE: Merging API Options in C#\nDESCRIPTION: Methods for merging downstream API options, allowing for overrides of default configurations.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.DownstreamApi/PublicAPI/net472/InternalAPI.Shipped.txt#2025-04-23_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.DownstreamApi.MergeOptions(string? optionsInstanceName, System.Action<Microsoft.Identity.Abstractions.DownstreamApiOptions!>? calledApiOptionsOverride) -> Microsoft.Identity.Abstractions.DownstreamApiOptions!\n\nMicrosoft.Identity.Web.DownstreamApi.MergeOptions(string? optionsInstanceName, System.Action<Microsoft.Identity.Abstractions.DownstreamApiOptionsReadOnlyHttpMethod!>? calledApiOptionsOverride, System.Net.Http.HttpMethod! httpMethod) -> Microsoft.Identity.Abstractions.DownstreamApiOptions!\n```\n\n----------------------------------------\n\nTITLE: Defining Claim Constants in Microsoft.Identity.Web (C#)\nDESCRIPTION: Declares constant string values representing standard and Microsoft-specific claim types used in identity tokens (like JWTs) processed by Microsoft Identity Web. These constants provide standardized keys for accessing specific claims such as 'acr', 'oid', 'tid', 'roles', 'scp', etc.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.TokenAcquisition/PublicAPI/net462/PublicAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n#nullable enable\nconst Microsoft.Identity.Web.ClaimConstants.Acr = \"acr\" -> string!\nconst Microsoft.Identity.Web.ClaimConstants.ClientInfo = \"client_info\" -> string!\nconst Microsoft.Identity.Web.ClaimConstants.Name = \"name\" -> string!\nconst Microsoft.Identity.Web.ClaimConstants.NameIdentifierId = \"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier\" -> string!\nconst Microsoft.Identity.Web.ClaimConstants.ObjectId = \"http://schemas.microsoft.com/identity/claims/objectidentifier\" -> string!\nconst Microsoft.Identity.Web.ClaimConstants.Oid = \"oid\" -> string!\nconst Microsoft.Identity.Web.ClaimConstants.Password = \"xms_password\" -> string!\nconst Microsoft.Identity.Web.ClaimConstants.PreferredUserName = \"preferred_username\" -> string!\nconst Microsoft.Identity.Web.ClaimConstants.Role = \"http://schemas.microsoft.com/ws/2008/06/identity/claims/role\" -> string!\nconst Microsoft.Identity.Web.ClaimConstants.Roles = \"roles\" -> string!\nconst Microsoft.Identity.Web.ClaimConstants.Scope = \"http://schemas.microsoft.com/identity/claims/scope\" -> string!\nconst Microsoft.Identity.Web.ClaimConstants.Scp = \"scp\" -> string!\nconst Microsoft.Identity.Web.ClaimConstants.Sub = \"sub\" -> string!\nconst Microsoft.Identity.Web.ClaimConstants.TenantId = \"http://schemas.microsoft.com/identity/claims/tenantid\" -> string!\nconst Microsoft.Identity.Web.ClaimConstants.Tfp = \"tfp\" -> string!\nconst Microsoft.Identity.Web.ClaimConstants.Tid = \"tid\" -> string!\nconst Microsoft.Identity.Web.ClaimConstants.UniqueObjectIdentifier = \"uid\" -> string!\nconst Microsoft.Identity.Web.ClaimConstants.UniqueTenantIdentifier = \"utid\" -> string!\nconst Microsoft.Identity.Web.ClaimConstants.UserFlow = \"http://schemas.microsoft.com/claims/authnclassreference\" -> string!\nconst Microsoft.Identity.Web.ClaimConstants.Username = \"xms_username\" -> string!\n```\n\n----------------------------------------\n\nTITLE: Linking Open Iconic Webfont CSS for Foundation (HTML)\nDESCRIPTION: This HTML snippet shows how to link the Foundation-specific CSS file (`open-iconic-foundation.css`) required to use the Open Iconic icon font within a Foundation framework project. The `href` attribute must point to the correct path of the CSS file.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/tests/DevApps/blazorserver-calls-api/Client/wwwroot/css/open-iconic/README.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<link href=\"/open-iconic/font/css/open-iconic-foundation.css\" rel=\"stylesheet\">\n```\n\n----------------------------------------\n\nTITLE: Declaring ServiceCollectionExtensions Static Class in C#\nDESCRIPTION: Declares the static `ServiceCollectionExtensions` class within the `Microsoft.Identity.Web.UI` namespace. This class contains extension methods for `IServiceCollection` or related builders to simplify the registration of Microsoft Identity Web UI components.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.UI/PublicAPI.Shipped.txt#2025-04-23_snippet_21\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Identity.Web.UI.ServiceCollectionExtensions\n```\n\n----------------------------------------\n\nTITLE: Running Cleanup Script for Azure AD Apps (PowerShell)\nDESCRIPTION: Executes the `Cleanup.ps1` PowerShell script located within the `AppCreationScripts` subdirectory. This script is intended to remove any Azure AD application registrations and related configurations that might have been created by previous runs of the sample's setup scripts, ensuring a clean state in the Azure AD tenant before running the configuration script.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/tests/DevApps/B2CWebAppCallsWebApi/README-incremental-instructions.md#2025-04-23_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n.\\AppCreationScripts\\Cleanup.ps1\n```\n\n----------------------------------------\n\nTITLE: Merging API Options in C#\nDESCRIPTION: This method merges the provided API options with the default options for a specific named instance. It allows for customization of the API call settings.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.DownstreamApi/PublicAPI/net8.0/InternalAPI.Shipped.txt#2025-04-23_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.DownstreamApi.MergeOptions(string? optionsInstanceName, System.Action<Microsoft.Identity.Abstractions.DownstreamApiOptions!>? calledApiOptionsOverride) -> Microsoft.Identity.Abstractions.DownstreamApiOptions!\n```\n\n----------------------------------------\n\nTITLE: Exception Throwing Utilities\nDESCRIPTION: Utility methods for throwing common exceptions with parameter validation. Includes methods for argument null checking, range validation, and buffer size verification.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.Diagnostics/PublicAPI/net462/InternalAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.Throws.ArgumentException(string! paramName, string? message) -> void\nstatic Microsoft.Identity.Web.Throws.ArgumentNullException(string! paramName) -> void\nstatic Microsoft.Identity.Web.Throws.ArgumentOutOfRangeException(string! paramName) -> void\nstatic Microsoft.Identity.Web.Throws.IfBufferTooSmall(int bufferSize, int requiredSize, string! paramName = \"\") -> void\nstatic Microsoft.Identity.Web.Throws.IfNull<T>(T argument, string! paramName = \"\") -> T\n```\n\n----------------------------------------\n\nTITLE: Claims Principal Factory Methods in C#\nDESCRIPTION: Static factory methods for creating ClaimsPrincipal objects from various authentication parameters\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.ClaimsPrincipalFactory.FromHomeTenantIdAndHomeObjectId(string! homeTenantId, string! homeObjectId) -> System.Security.Claims.ClaimsPrincipal!\nstatic Microsoft.Identity.Web.ClaimsPrincipalFactory.FromTenantIdAndObjectId(string! tenantId, string! objectId) -> System.Security.Claims.ClaimsPrincipal!\nstatic Microsoft.Identity.Web.ClaimsPrincipalFactory.FromUsernamePassword(string! username, string! password) -> System.Security.Claims.ClaimsPrincipal!\n```\n\n----------------------------------------\n\nTITLE: Defining MicrosoftGraphOptions Class in C#\nDESCRIPTION: Class definition for MicrosoftGraphOptions containing properties for base URL and scopes configuration for Microsoft Graph API integration.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.MicrosoftGraphBeta/PublicAPI/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class MicrosoftGraphOptions\n{\n    public string BaseUrl { get; set; }\n    public string? Scopes { get; set; }\n    public MicrosoftGraphOptions() {}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MicrosoftGraphOptions Class Properties\nDESCRIPTION: Class definition for MicrosoftGraphOptions with properties for configuring Graph API base URL and scopes.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.MicrosoftGraph/PublicAPI/net462/PublicAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class MicrosoftGraphOptions\n{\n    public string BaseUrl { get; set; }\n    public string? Scopes { get; set; }\n    public MicrosoftGraphOptions() { }\n}\n```\n\n----------------------------------------\n\nTITLE: Microsoft Graph Extensions - C#\nDESCRIPTION: Extension methods for configuring Microsoft Graph authentication and client setup\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.MicrosoftGraph/PublicAPI/net9.0/PublicAPI.Shipped.txt#2025-04-23_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic static class MicrosoftGraphExtensions\n{\n    public static MicrosoftIdentityAppCallsWebApiAuthenticationBuilder AddMicrosoftGraph(this MicrosoftIdentityAppCallsWebApiAuthenticationBuilder builder, IConfigurationSection configurationSection);\n    public static MicrosoftIdentityAppCallsWebApiAuthenticationBuilder AddMicrosoftGraph(this MicrosoftIdentityAppCallsWebApiAuthenticationBuilder builder, string graphBaseUrl = \"https://graph.microsoft.com/v1.0\", string defaultScopes = \"user.read\");\n    public static MicrosoftIdentityAppCallsWebApiAuthenticationBuilder AddMicrosoftGraph(this MicrosoftIdentityAppCallsWebApiAuthenticationBuilder builder, Action<MicrosoftGraphOptions> configureMicrosoftGraphOptions);\n    public static MicrosoftIdentityAppCallsWebApiAuthenticationBuilder AddMicrosoftGraph(this MicrosoftIdentityAppCallsWebApiAuthenticationBuilder builder, Func<IAuthenticationProvider, GraphServiceClient> graphServiceClientFactory, IEnumerable<string> initialScopes);\n    public static MicrosoftIdentityAppCallsWebApiAuthenticationBuilder AddMicrosoftGraphAppOnly(this MicrosoftIdentityAppCallsWebApiAuthenticationBuilder builder, Func<IAuthenticationProvider, GraphServiceClient> graphServiceClientFactory);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Microsoft Graph Options Class in C#\nDESCRIPTION: Class definition for MicrosoftGraphOptions containing base URL and scopes configuration for Microsoft Graph API integration.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.MicrosoftGraphBeta/PublicAPI/net6.0/PublicAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Identity.Web.MicrosoftGraphOptions.BaseUrl.get -> string!\nMicrosoft.Identity.Web.MicrosoftGraphOptions.BaseUrl.set -> void\nMicrosoft.Identity.Web.MicrosoftGraphOptions.MicrosoftGraphOptions() -> void\nMicrosoft.Identity.Web.MicrosoftGraphOptions.Scopes.get -> string?\nMicrosoft.Identity.Web.MicrosoftGraphOptions.Scopes.set -> void\n```\n\n----------------------------------------\n\nTITLE: Getting Client Assertion Asynchronously for OidcIdpSignedAssertionProvider (C#)\nDESCRIPTION: Defines the signature for overriding the `GetClientAssertionAsync` method in the `OidcIdpSignedAssertionProvider` class. This asynchronous method generates or retrieves a client assertion based on the provided `AssertionRequestOptions`, returning a `Task<ClientAssertion>`.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.OidcFIC/PublicAPI/net462/InternalAPI.Shipped.txt#2025-04-23_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\noverride Microsoft.Identity.Web.OidcFic.OidcIdpSignedAssertionProvider.GetClientAssertionAsync(Microsoft.Identity.Client.AssertionRequestOptions? assertionRequestOptions) -> System.Threading.Tasks.Task<Microsoft.Identity.Web.ClientAssertion!>!\n```\n\n----------------------------------------\n\nTITLE: Loading OIDC IDP Signed Assertion Asynchronously (C#)\nDESCRIPTION: Defines the signature for the `LoadIfNeededAsync` method of the `OidcIdpSignedAssertionLoader` class. This asynchronous method loads an OIDC Identity Provider signed assertion based on the provided `CredentialDescription`. Optional `CredentialSourceLoaderParameters` can customize the loading process. It returns a `Task` representing the asynchronous operation.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.OidcFIC/PublicAPI/net462/InternalAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Identity.Web.OidcFic.OidcIdpSignedAssertionLoader.LoadIfNeededAsync(Microsoft.Identity.Abstractions.CredentialDescription! credentialDescription, Microsoft.Identity.Abstractions.CredentialSourceLoaderParameters? parameters = null) -> System.Threading.Tasks.Task!\n```\n\n----------------------------------------\n\nTITLE: Setting Microsoft Identity Web Options for Token Validation\nDESCRIPTION: This code snippet shows how to configure Microsoft Identity Web options for token validation in ASP.NET Core. It includes settings for issuer validation, multiple tenant support, and audience validation to properly handle authentication with Azure AD.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net472/PublicAPI.Unshipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nservices.Configure<MicrosoftIdentityOptions>(options =>\n{\n    options.Authority = \"https://login.microsoftonline.com/organizations/v2.0\";\n    options.ClientId = \"clientid\";\n    options.ValidateAuthority = true;\n    options.ValidateIssuer = true; // Multi-tenant app\n});\n```\n\n----------------------------------------\n\nTITLE: Defining BaseAuthorizationHeaderProvider Constructor in C#\nDESCRIPTION: Defines the constructor for the `BaseAuthorizationHeaderProvider` class within the `Microsoft.Identity.Web.Extensibility` namespace. This base class likely provides common functionality for creating authorization headers, requiring an `IServiceProvider` for dependency injection.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.TokenAcquisition/PublicAPI/net462/PublicAPI.Shipped.txt#2025-04-23_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Identity.Web.Extensibility.BaseAuthorizationHeaderProvider\nMicrosoft.Identity.Web.Extensibility.BaseAuthorizationHeaderProvider.BaseAuthorizationHeaderProvider(System.IServiceProvider! serviceProvider) -> void\n```\n\n----------------------------------------\n\nTITLE: Setting PowerShell Execution Policy (PowerShell)\nDESCRIPTION: Shows the PowerShell command to set the execution policy to `RemoteSigned` specifically for the current process scope. This adjustment is often necessary on Windows systems to allow the execution of locally stored scripts, such as the automation scripts provided for Azure AD setup in this sample. The `-Force` parameter bypasses confirmation prompts.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/tests/DevApps/B2CWebAppCallsWebApi/README-incremental-instructions.md#2025-04-23_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope Process -Force\n```\n\n----------------------------------------\n\nTITLE: Exception Throwing Helper Methods in C#\nDESCRIPTION: Collection of static methods to standardize throwing common exceptions with various parameter combinations. Includes methods for ArgumentException, ArgumentNullException, ArgumentOutOfRangeException and InvalidOperationException.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.Diagnostics/PublicAPI/net8.0/InternalAPI.Shipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.Throws.ArgumentException(string! paramName, string? message) -> void\nstatic Microsoft.Identity.Web.Throws.ArgumentNullException(string! paramName) -> void\nstatic Microsoft.Identity.Web.Throws.ArgumentOutOfRangeException(string! paramName) -> void\nstatic Microsoft.Identity.Web.Throws.InvalidOperationException(string! message) -> void\n```\n\n----------------------------------------\n\nTITLE: Setting up Identity Web Telemetry with Callback Actions\nDESCRIPTION: Shows how to create a callback for Identity Web telemetry that processes log events. This approach allows custom handling of Microsoft Identity Web logging events.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.Diagnostics/PublicAPI/net462/PublicAPI.Unshipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddIdentityWebTelemetry(events =>\n{\n    events.OnTokenValidationFailed = (args) =>\n    {\n        // Do something with the token validation failure\n    };\n\n    events.OnTokenValidationSucceeded = (args) =>\n    {\n        // Do something with the successful token validation\n    };\n});\n```\n\n----------------------------------------\n\nTITLE: TokenAcquisitionAuthenticationProviderOption Class Definition\nDESCRIPTION: Configuration options class for token acquisition authentication provider. Contains properties for authentication scheme, scopes, tenant settings, and user claims principal.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.MicrosoftGraph/PublicAPI/net8.0/InternalAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic class TokenAcquisitionAuthenticationProviderOption\n{\n    public bool? AppOnly { get; set; }\n    public string AuthenticationScheme { get; set; }\n    public Action<AuthorizationHeaderProviderOptions> AuthorizationHeaderProviderOptions { get; set; }\n    public string[] Scopes { get; set; }\n    public string Tenant { get; set; }\n    public ClaimsPrincipal User { get; set; }\n    public TokenAcquisitionAuthenticationProviderOption();\n}\n```\n\n----------------------------------------\n\nTITLE: Determining and Setting Cache Expiry and Defaults - Microsoft.Identity.Web - C#\nDESCRIPTION: Provides methods for determining the expiration time of memory cache entries based on given serialization hints, and defines static defaults for absolute expiration times. Intended mainly for the in-memory token cache provider, these methods help enforce cache expiration policies. Required dependencies are types from Microsoft.Identity.Web, and key parameters include serializer hints reflecting cache state.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.TokenCache/InternalAPI.Shipped.txt#2025-04-23_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Identity.Web.TokenCacheProviders.InMemory.MsalMemoryTokenCacheProvider.DetermineCacheEntryExpiry(Microsoft.Identity.Web.TokenCacheProviders.CacheSerializerHints! cacheSerializerHints) -> System.TimeSpan\nstatic Microsoft.Identity.Web.TokenCacheProviders.InMemory.MsalMemoryTokenCacheOptions.DefaultAbsoluteExpirationRelativeToNow -> System.TimeSpan\n```\n\n----------------------------------------\n\nTITLE: TokenAcquisitionAuthenticationProvider Class Definition\nDESCRIPTION: Authentication provider class that handles token acquisition and request authentication for Azure AD integration. Implements authentication request handling through AuthenticateRequestAsync method.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.MicrosoftGraph/PublicAPI/net8.0/InternalAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class TokenAcquisitionAuthenticationProvider\n{\n    public Task AuthenticateRequestAsync(HttpRequestMessage request);\n    public TokenAcquisitionAuthenticationProvider(IAuthorizationHeaderProvider authorizationHeaderProvider, TokenAcquisitionAuthenticationProviderOption options);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TokenAcquisitionAuthenticationProvider Class\nDESCRIPTION: Authentication provider class that handles token acquisition and request authentication for Azure AD. Contains constructor and method for authenticating HTTP requests.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.MicrosoftGraphBeta/PublicAPI/net7.0/InternalAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nclass TokenAcquisitionAuthenticationProvider\n{\n    public TokenAcquisitionAuthenticationProvider(IAuthorizationHeaderProvider authorizationHeaderProvider, TokenAcquisitionAuthenticationProviderOption options);\n    public Task AuthenticateRequestAsync(HttpRequestMessage request);\n}\n```\n\n----------------------------------------\n\nTITLE: HTTP Request Update and Serialization Methods\nDESCRIPTION: Utility methods for updating HTTP requests with authentication tokens and serializing/deserializing request/response content.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.DownstreamApi/PublicAPI/net8.0/InternalAPI.Shipped.txt#2025-04-23_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.DownstreamApi.UpdateRequestAsync(System.Net.Http.HttpRequestMessage! httpRequestMessage, System.Net.Http.HttpContent? content, Microsoft.Identity.Abstractions.DownstreamApiOptions! effectiveOptions, bool appToken, System.Security.Claims.ClaimsPrincipal? user, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!\n```\n\n----------------------------------------\n\nTITLE: Defining Default Token Exchange URL Constant in C#\nDESCRIPTION: Defines the default token exchange URL constant that is used for Azure AD token exchange in certificateless authentication scenarios. The constant is nullable-enabled and defined as a non-null string.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.Certificateless/InternalAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n#nullable enable\nconst Microsoft.Identity.Web.Certificateless.CertificatelessConstants.DefaultTokenExchangeUrl = \"api://AzureADTokenExchange\" -> string!\n```\n\n----------------------------------------\n\nTITLE: Defining Authentication Scheme Constant in C#\nDESCRIPTION: Declaration of the default authentication scheme constant for App Services Authentication\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Web.AppServicesAuthenticationDefaults.AuthenticationScheme = \"AppServicesAuthentication\"\n```\n\n----------------------------------------\n\nTITLE: Defining MicrosoftIdentityAppAuthenticationMessageHandler class in C#\nDESCRIPTION: Defines the MicrosoftIdentityAppAuthenticationMessageHandler class constructor for handling app authentication messages.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.MicrosoftIdentityAppAuthenticationMessageHandler\nMicrosoft.Identity.Web.MicrosoftIdentityAppAuthenticationMessageHandler.MicrosoftIdentityAppAuthenticationMessageHandler(Microsoft.Identity.Web.ITokenAcquisition! tokenAcquisition, Microsoft.Extensions.Options.IOptionsMonitor<Microsoft.Identity.Web.MicrosoftIdentityAuthenticationMessageHandlerOptions!>! namedMessageHandlerOptions, string? serviceName = null) -> void\n```\n\n----------------------------------------\n\nTITLE: Initiating Authentication Challenge in AccountController (C#)\nDESCRIPTION: Defines the `Challenge` action method in `AccountController`. This method initiates an authentication challenge, typically redirecting the user to the identity provider for login. It accepts parameters like `redirectUri`, `scope`, `loginHint`, `domainHint`, `claims`, `policy`, and `scheme` to customize the authentication request.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.UI/PublicAPI.Shipped.txt#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Identity.Web.UI.Areas.MicrosoftIdentity.Controllers.AccountController.Challenge(string! redirectUri, string! scope, string! loginHint, string! domainHint, string! claims, string! policy, string! scheme) -> Microsoft.AspNetCore.Mvc.IActionResult!\n```\n\n----------------------------------------\n\nTITLE: Adding Downstream API with Action Delegate in C#\nDESCRIPTION: Adds a downstream API to the service collection using an action delegate to configure options. This method provides a more flexible approach to configuring a single downstream API.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.DownstreamApi/PublicAPI/net462/PublicAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.DownstreamApiExtensions.AddDownstreamApi(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, string! serviceName, System.Action<Microsoft.Identity.Abstractions.DownstreamApiOptions!>! configureOptions) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!\n```\n\n----------------------------------------\n\nTITLE: Adding Microsoft.Identity.Web Namespace in Startup.cs\nDESCRIPTION: This snippet shows how to add the using directive for Microsoft.Identity.Web at the top of the Startup.cs file in the web application client project.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/tests/DevApps/B2CWebAppCallsWebApi/README.md#2025-04-23_snippet_2\n\nLANGUAGE: CSharp\nCODE:\n```\nusing Microsoft.Identity.Web;\n```\n\n----------------------------------------\n\nTITLE: Identity Web Telemetry and Version Methods in C#\nDESCRIPTION: Static methods for retrieving telemetry information and Identity Web version details.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.Diagnostics/PublicAPI/net8.0/InternalAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.Diagnostics.IdHelper.CreateTelemetryInfo() -> string!\nstatic Microsoft.Identity.Web.Diagnostics.IdHelper.GetIdWebVersion() -> string!\n```\n\n----------------------------------------\n\nTITLE: HTTP Request Handling and Logging in C#\nDESCRIPTION: Methods and event IDs for handling HTTP requests, logging, and error management in downstream API calls. Includes utilities for request updates and logging configurations.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.DownstreamApi/PublicAPI/net472/InternalAPI.Shipped.txt#2025-04-23_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.DownstreamApi.UpdateRequestAsync(System.Net.Http.HttpRequestMessage! httpRequestMessage, System.Net.Http.HttpContent? content, Microsoft.Identity.Abstractions.DownstreamApiOptions! effectiveOptions, bool appToken, System.Security.Claims.ClaimsPrincipal? user, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!\n\nstatic Microsoft.Identity.Web.DownstreamApi.Logger.HttpRequestError(Microsoft.Extensions.Logging.ILogger! logger, string! ServiceName, string! BaseUrl, string! RelativePath, System.Exception? ex) -> void\n\nstatic Microsoft.Identity.Web.DownstreamApi.Logger.UnauthenticatedApiCall(Microsoft.Extensions.Logging.ILogger! logger, System.Exception? ex) -> void\n```\n\n----------------------------------------\n\nTITLE: PreBuild Method in TokenAcquirerFactory (C#)\nDESCRIPTION: Virtual method signature for PreBuild that takes no parameters and returns void. This method is likely called before building the token acquirer to perform initialization or preparation tasks.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.TokenAcquisition/PublicAPI/net7.0/PublicAPI.Shipped.txt#2025-04-23_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nvirtual Microsoft.Identity.Web.TokenAcquirerFactory.PreBuild() -> void\n```\n\n----------------------------------------\n\nTITLE: Defining LoadIfNeededAsync Method Signature in OidcIdpSignedAssertionLoader (C#)\nDESCRIPTION: Defines the signature for the asynchronous LoadIfNeededAsync method in the OidcIdpSignedAssertionLoader class. This method attempts to load the credential specified by 'credentialDescription' if it hasn't been loaded already, using optional 'parameters'. It returns a Task representing the asynchronous operation.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.OidcFIC/PublicAPI/net472/InternalAPI.Shipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Identity.Web.OidcFic.OidcIdpSignedAssertionLoader.LoadIfNeededAsync(Microsoft.Identity.Abstractions.CredentialDescription! credentialDescription, Microsoft.Identity.Abstractions.CredentialSourceLoaderParameters? parameters = null) -> System.Threading.Tasks.Task!\n```\n\n----------------------------------------\n\nTITLE: Token Acquisition Authentication Provider Class Definition\nDESCRIPTION: Authentication provider class that handles token acquisition and request authentication\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.MicrosoftGraphBeta/PublicAPI/net472/InternalAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class TokenAcquisitionAuthenticationProvider\n{\n    public TokenAcquisitionAuthenticationProvider(IAuthorizationHeaderProvider authorizationHeaderProvider, TokenAcquisitionAuthenticationProviderOption options);\n    public Task AuthenticateRequestAsync(HttpRequestMessage request);\n}\n```\n\n----------------------------------------\n\nTITLE: OpenIdConnectCachingSecurityTokenProvider Implementation\nDESCRIPTION: Implementation of security token provider for OpenID Connect with caching capabilities. Includes configuration management and security key handling.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.OWIN/InternalAPI.Shipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.OpenIdConnectCachingSecurityTokenProvider\nMicrosoft.Identity.Web.OpenIdConnectCachingSecurityTokenProvider._configManager -> Microsoft.IdentityModel.Protocols.ConfigurationManager<Microsoft.IdentityModel.Protocols.OpenIdConnect.OpenIdConnectConfiguration!>!\nMicrosoft.Identity.Web.OpenIdConnectCachingSecurityTokenProvider.Issuer.get -> string?\nMicrosoft.Identity.Web.OpenIdConnectCachingSecurityTokenProvider.OpenIdConnectCachingSecurityTokenProvider(string! metadataEndpoint) -> void\nMicrosoft.Identity.Web.OpenIdConnectCachingSecurityTokenProvider.SecurityKeys.get -> System.Collections.Generic.IEnumerable<Microsoft.IdentityModel.Tokens.SecurityKey!>?\n```\n\n----------------------------------------\n\nTITLE: Token Acquisition Authentication Provider Class Definition\nDESCRIPTION: Defines the main authentication provider class responsible for authenticating HTTP requests using token acquisition.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.MicrosoftGraph/PublicAPI/net6.0/InternalAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.TokenAcquisitionAuthenticationProvider\\nMicrosoft.Identity.Web.TokenAcquisitionAuthenticationProvider.AuthenticateRequestAsync(System.Net.Http.HttpRequestMessage request) -> System.Threading.Tasks.Task\\nMicrosoft.Identity.Web.TokenAcquisitionAuthenticationProvider.TokenAcquisitionAuthenticationProvider(Microsoft.Identity.Abstractions.IAuthorizationHeaderProvider authorizationHeaderProvider, Microsoft.Identity.Web.TokenAcquisitionAuthenticationProviderOption options) -> void\n```\n\n----------------------------------------\n\nTITLE: Adding Downstream API Configuration in C# using Microsoft.Identity.Web\nDESCRIPTION: These extension methods allow for the addition of downstream API configurations to the dependency injection container. They support various ways of configuring the APIs, including using IConfiguration, Action delegates, or configuration sections for multiple APIs.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.DownstreamApi/PublicAPI/net472/PublicAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n#nullable enable\nMicrosoft.Identity.Web.DownstreamApiExtensions\nstatic Microsoft.Identity.Web.DownstreamApiExtensions.AddDownstreamApi(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, string! serviceName, Microsoft.Extensions.Configuration.IConfiguration! configuration) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!\nstatic Microsoft.Identity.Web.DownstreamApiExtensions.AddDownstreamApi(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, string! serviceName, System.Action<Microsoft.Identity.Abstractions.DownstreamApiOptions!>! configureOptions) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!\nstatic Microsoft.Identity.Web.DownstreamApiExtensions.AddDownstreamApis(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, Microsoft.Extensions.Configuration.IConfigurationSection! configurationSection) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!\n```\n\n----------------------------------------\n\nTITLE: Serialization Helper Methods for DownstreamApi - Microsoft Identity Web - C#\nDESCRIPTION: Static serialization methods produce HttpContent payloads ready for HTTP requests, using default or explicitly supplied JsonTypeInfo. Easily integrated within API client logic, these enable reliable JSON serialization of arbitrary input types using System.Text.Json according to downstream API requirements. Returns HttpContent or null if serialization is not possible.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.DownstreamApi/PublicAPI/net9.0/InternalAPI.Shipped.txt#2025-04-23_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Identity.Web.DownstreamApi.SerializeInput<TInput>(TInput input, Microsoft.Identity.Abstractions.DownstreamApiOptions! effectiveOptions) -> System.Net.Http.HttpContent?\n```\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Identity.Web.DownstreamApi.SerializeInput<TInput>(TInput input, Microsoft.Identity.Abstractions.DownstreamApiOptions! effectiveOptions, System.Text.Json.Serialization.Metadata.JsonTypeInfo<TInput>! inputJsonTypeInfo) -> System.Net.Http.HttpContent?\n```\n\n----------------------------------------\n\nTITLE: Adding Graph Service Client to DI Container in C#\nDESCRIPTION: These extension methods add Graph service clients to the dependency injection container with different lifetimes.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.GraphServiceClient/PublicAPI/net8.0/InternalAPI.Shipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.GraphServiceCollectionExtensions.AddGraphServiceClient(Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.GraphServiceCollectionExtensions.AddGraphServiceClientWithLifetime(Microsoft.Extensions.DependencyInjection.IServiceCollection! services, Microsoft.Extensions.DependencyInjection.ServiceLifetime lifetime) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining ILoginErrorAccessor interface in C#\nDESCRIPTION: Defines the ILoginErrorAccessor interface with methods for getting and setting login error messages and checking if the feature is enabled.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.ILoginErrorAccessor\nMicrosoft.Identity.Web.ILoginErrorAccessor.GetMessage(Microsoft.AspNetCore.Http.HttpContext! context) -> string?\nMicrosoft.Identity.Web.ILoginErrorAccessor.IsEnabled.get -> bool\nMicrosoft.Identity.Web.ILoginErrorAccessor.SetMessage(Microsoft.AspNetCore.Http.HttpContext! context, string? message) -> void\n```\n\n----------------------------------------\n\nTITLE: Initiating Profile Editing Flow in AccountController (C#)\nDESCRIPTION: Defines the asynchronous `EditProfile` action method in `AccountController`. This method initiates the user flow for editing their profile, potentially redirecting to an Azure AD B2C profile editing policy. It accepts an optional `scheme` parameter to specify the authentication scheme.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.UI/PublicAPI.Shipped.txt#2025-04-23_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Identity.Web.UI.Areas.MicrosoftIdentity.Controllers.AccountController.EditProfile(string! scheme) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult!>!\n```\n\n----------------------------------------\n\nTITLE: Configuring Microsoft Identity Web API Authentication with Basic Options\nDESCRIPTION: This code snippet demonstrates how to add Microsoft Identity Web API authentication to ASP.NET Core applications using extension methods. It shows the basic configuration for token validation in a Web API project.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.Diagnostics/PublicAPI/net9.0/PublicAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddMicrosoftIdentityWebApiAuthentication(Configuration);\n```\n\n----------------------------------------\n\nTITLE: Querying Microsoft Graph with Authentication Scheme using Microsoft.Identity.Web.GraphServiceClient - C#\nDESCRIPTION: This code snippet shows how to use the Microsoft.Identity.Web.GraphServiceClient to specify an authentication scheme when fetching users from the Microsoft Graph API in an ASP.NET Core application. By calling WithAuthenticationScheme on the builder options within the GetAsync method, it configures the request's authentication policy. The approach depends on Microsoft.Identity.Web.GraphServiceClient and expects a properly initialized _graphServiceClient. The count of users is accessed from messages.Value.Count after the asynchronous call. The authentication scheme parameter ensures that the request uses the specified policy for acquiring tokens.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.GraphServiceClient/Readme.md#2025-04-23_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nvar messages = await _graphServiceClient.Users\n                .GetAsync(b => b.Options.WithAuthenticationScheme(JwtBearerDefaults.AuthenticationScheme) );\nint NumberOfUsers = messages.Value.Count;\n\n```\n\n----------------------------------------\n\nTITLE: Request Processing and Logging Methods\nDESCRIPTION: Utility methods for processing HTTP requests, handling serialization/deserialization, and logging events in downstream API calls.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.DownstreamApi/PublicAPI/netstandard2.0/InternalAPI.Shipped.txt#2025-04-23_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.DownstreamApi.UpdateRequestAsync(System.Net.Http.HttpRequestMessage! httpRequestMessage, System.Net.Http.HttpContent? content, Microsoft.Identity.Abstractions.DownstreamApiOptions! effectiveOptions, bool appToken, System.Security.Claims.ClaimsPrincipal? user, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!\n\nstatic Microsoft.Identity.Web.DownstreamApi.DeserializeOutputAsync<TOutput>(System.Net.Http.HttpResponseMessage! response, Microsoft.Identity.Abstractions.DownstreamApiOptions! effectiveOptions) -> System.Threading.Tasks.Task<TOutput?>!\n\nstatic Microsoft.Identity.Web.DownstreamApi.SerializeInput<TInput>(TInput input, Microsoft.Identity.Abstractions.DownstreamApiOptions! effectiveOptions) -> System.Net.Http.HttpContent?\n```\n\n----------------------------------------\n\nTITLE: Installing the msidentity-app-sync Tool with .NET CLI\nDESCRIPTION: Command to install the msidentity-app-sync global tool using the .NET CLI. This tool helps provision Azure AD app registrations and configure ASP.NET Core projects for Microsoft identity platform authentication.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/tools/app-provisioning-tool/vs2019-16.9-how-to-use.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install -g msidentity-app-sync\n```\n\n----------------------------------------\n\nTITLE: Authority Helper Methods\nDESCRIPTION: Static utility methods for building and validating authority URLs for Microsoft Identity authentication\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net9.0/InternalAPI.Shipped.txt#2025-04-23_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.AuthorityHelpers.BuildAuthority(Microsoft.Identity.Web.MicrosoftIdentityOptions! options) -> string!\nstatic Microsoft.Identity.Web.AuthorityHelpers.BuildCiamAuthorityIfNeeded(string! authority, out bool preserveAuthority) -> string?\nstatic Microsoft.Identity.Web.AuthorityHelpers.EnsureAuthorityIsV2(string! authority) -> string!\n```\n\n----------------------------------------\n\nTITLE: Token Acquisition Authentication Provider Class Definition\nDESCRIPTION: Defines the authentication provider class that handles token acquisition and request authentication for Azure AD.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.MicrosoftGraphBeta/PublicAPI/net8.0/InternalAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.TokenAcquisitionAuthenticationProvider.AuthenticateRequestAsync(System.Net.Http.HttpRequestMessage request) -> System.Threading.Tasks.Task\nMicrosoft.Identity.Web.TokenAcquisitionAuthenticationProvider.TokenAcquisitionAuthenticationProvider(Microsoft.Identity.Abstractions.IAuthorizationHeaderProvider authorizationHeaderProvider, Microsoft.Identity.Web.TokenAcquisitionAuthenticationProviderOption options) -> void\n```\n\n----------------------------------------\n\nTITLE: Microsoft Graph Options Class Definition - C#\nDESCRIPTION: Defines the MicrosoftGraphOptions class with properties for base URL and scopes configuration\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.MicrosoftGraph/PublicAPI/net9.0/PublicAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class MicrosoftGraphOptions\n{\n    public string BaseUrl { get; set; }\n    public string? Scopes { get; set; }\n    public MicrosoftGraphOptions() { }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Auth Scheme Constant in C#\nDESCRIPTION: Defines a constant string for the AppServicesAuthentication scheme. This constant is used to identify the authentication scheme when configuring services.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net7.0/PublicAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n#nullable enable\nconst Microsoft.Identity.Web.AppServicesAuthenticationDefaults.AuthenticationScheme = \"AppServicesAuthentication\" -> string!\n```\n\n----------------------------------------\n\nTITLE: Defining Constructor Signature for OidcIdpSignedAssertionProvider (C#)\nDESCRIPTION: Defines the constructor signature for the OidcIdpSignedAssertionProvider class. It takes an ITokenAcquirerFactory, MicrosoftIdentityApplicationOptions, and an optional tokenExchangeUrl to configure how it acquires tokens and constructs assertions.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.OidcFIC/PublicAPI/net472/InternalAPI.Shipped.txt#2025-04-23_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Identity.Web.OidcFic.OidcIdpSignedAssertionProvider.OidcIdpSignedAssertionProvider(Microsoft.Identity.Abstractions.ITokenAcquirerFactory! tokenAcquirerFactory, Microsoft.Identity.Abstractions.MicrosoftIdentityApplicationOptions! options, string? tokenExchangeUrl) -> void\n```\n\n----------------------------------------\n\nTITLE: Generic Downstream Web API Operations\nDESCRIPTION: Extension methods for performing generic HTTP operations (GET, POST, PUT) against downstream web APIs with user context and authentication.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net6.0/PublicAPI.Shipped.txt#2025-04-23_snippet_13\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.DownstreamWebApiGenericExtensions.CallWebApiForUserAsync<TOutput>(this Microsoft.Identity.Web.IDownstreamWebApi! downstreamWebApi, string! serviceName, System.Action<Microsoft.Identity.Web.DownstreamWebApiOptions!>? downstreamWebApiOptionsOverride = null, System.Security.Claims.ClaimsPrincipal? user = null, string? authenticationScheme = null) -> System.Threading.Tasks.Task<TOutput?>!\n\nstatic Microsoft.Identity.Web.DownstreamWebApiGenericExtensions.GetForUserAsync<TOutput>(this Microsoft.Identity.Web.IDownstreamWebApi! downstreamWebApi, string! serviceName, string! relativePath, System.Action<Microsoft.Identity.Web.DownstreamWebApiOptions!>? downstreamWebApiOptionsOverride = null, System.Security.Claims.ClaimsPrincipal? user = null, string? authenticationScheme = null) -> System.Threading.Tasks.Task<TOutput?>!\n```\n\n----------------------------------------\n\nTITLE: Getting Login Error Accessor in ErrorModel (C#)\nDESCRIPTION: Defines the getter for the `Error` property in the `ErrorModel` class. It returns an instance of `ILoginErrorAccessor`, which provides access to details about login-related errors.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.UI/PublicAPI.Shipped.txt#2025-04-23_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Identity.Web.UI.Areas.MicrosoftIdentity.Pages.Account.ErrorModel.Error.get -> Microsoft.Identity.Web.ILoginErrorAccessor!\n```\n\n----------------------------------------\n\nTITLE: Listing Static Classes in Microsoft.Identity.Web (C#)\nDESCRIPTION: Lists static classes containing constants within the Microsoft.Identity.Web namespace.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.TokenAcquisition/PublicAPI/net462/PublicAPI.Shipped.txt#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Identity.Web.ClaimConstants\nMicrosoft.Identity.Web.Constants\n```\n\n----------------------------------------\n\nTITLE: Configuring Microsoft Graph with Configuration Binding\nDESCRIPTION: C# code to add Microsoft Graph support and configure options based on the configuration file.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.GraphServiceClient/Readme.md#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddMicrosoftGraph();\nservices.Configure<MicrosoftGraphOptions>(options => \n                                            services.Configuration.GetSection(\"DownstreamApis:MicrosoftGraph\"));\n```\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddMicrosoftGraph(options => \n                             services.Configuration.GetSection(\"DownstreamApis:MicrosoftGraph\").Bind(options) );\n```\n\n----------------------------------------\n\nTITLE: Adding Graph Beta Service Client\nDESCRIPTION: Extension method to add Microsoft Graph Beta service client to the dependency injection container with default lifetime.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.GraphServiceClientBeta/PublicAPI/net7.0/InternalAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.GraphBetaServiceCollectionExtensions.AddGraphBetaServiceClient(Microsoft.Extensions.DependencyInjection.IServiceCollection services) -> void\n```\n\n----------------------------------------\n\nTITLE: Creating ASP.NET Core Blazor WebAssembly with Azure AD B2C Authentication\nDESCRIPTION: Command to create an ASP.NET Core Blazor WebAssembly application with Microsoft Identity Web integration for Azure AD B2C authentication. The command includes parameters for instance, tenant ID, client ID, and policy IDs.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net7.0/PublicAPI.Unshipped.txt#2025-04-23_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ndotnet new blazorwasm2 --auth B2C --aad-b2c-instance \"[Enter the instance of Azure AD B2C, e.g. https://fabrikam.b2clogin.com/]\" --domain [Enter your domain name, e.g. contoso.onmicrosoft.com] --tenant-id \"[Enter the tenant ID here to use from the Azure portal, e.g. 'contoso.onmicrosoft.com' or 'da41245a5-11b3-996c-00a8-4d99re19f292']\" --client-id \"[Enter the Client (application) ID of the app registration from the Azure portal, e.g. ba74781c2-53c2-442a-97c2-3d60re42f403]\" --default-scope [Enter the API scope for the web API, e.g. api://11111111-1111-1111-1111-111111111111/access_as_user] --app-id-uri [Enter the App ID URI of the web API, e.g. api://11111111-1111-1111-1111-111111111111] --api-client-id \"[Enter the client ID of the web API. e.g. 89ea5c94-7736-4e25-95ad-3fa95f62b66e]\" --susi-policy-id \"[Enter the sign up / sign in policy ID for B2C, e.g. b2c_1_susi]\" --reset-password-policy-id \"[Enter the password reset policy ID for B2C, e.g. b2c_1_reset]\" --edit-profile-policy-id \"[Enter the edit profile policy ID for B2C, e.g. b2c_1_edit_profile]\"\n```\n\n----------------------------------------\n\nTITLE: TokenAcquisitionAuthenticationProviderOption Class Definition\nDESCRIPTION: Configuration options class for TokenAcquisitionAuthenticationProvider containing authentication settings and parameters.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.MicrosoftGraph/PublicAPI/netstandard2.0/InternalAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic class TokenAcquisitionAuthenticationProviderOption\n{\n    public TokenAcquisitionAuthenticationProviderOption();\n    public bool? AppOnly { get; set; }\n    public string AuthenticationScheme { get; set; }\n    public Action<AuthorizationHeaderProviderOptions> AuthorizationHeaderProviderOptions { get; set; }\n    public string[] Scopes { get; set; }\n    public string Tenant { get; set; }\n    public ClaimsPrincipal User { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining App Services Authentication Constants in C#\nDESCRIPTION: Defines constant string values for various App Services authentication environment variables and settings. These constants are used to configure and manage authentication in Azure App Services.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net9.0/InternalAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Web.AppServicesAuthenticationInformation.AppServicesAuthAAD = \"AAD\" -> string!\nconst Microsoft.Identity.Web.AppServicesAuthenticationInformation.AppServicesAuthAzureActiveDirectory = \"AzureActiveDirectory\" -> string!\nconst Microsoft.Identity.Web.AppServicesAuthenticationInformation.AppServicesAuthClientIdEnvironmentVariable = \"WEBSITE_AUTH_CLIENT_ID\" -> string!\nconst Microsoft.Identity.Web.AppServicesAuthenticationInformation.AppServicesAuthClientSecretEnvironmentVariable = \"WEBSITE_AUTH_CLIENT_SECRET\" -> string!\nconst Microsoft.Identity.Web.AppServicesAuthenticationInformation.AppServicesAuthClientSecretSettingName = \"WEBSITE_AUTH_CLIENT_SECRET_SETTING_NAME\" -> string!\nconst Microsoft.Identity.Web.AppServicesAuthenticationInformation.AppServicesAuthDebugHeadersEnvironmentVariable = \"APP_SERVICES_AUTH_LOCAL_DEBUG\" -> string!\nconst Microsoft.Identity.Web.AppServicesAuthenticationInformation.AppServicesAuthEnabledEnvironmentVariable = \"WEBSITE_AUTH_ENABLED\" -> string!\nconst Microsoft.Identity.Web.AppServicesAuthenticationInformation.AppServicesAuthIdentityProviderEnvironmentVariable = \"WEBSITE_AUTH_DEFAULT_PROVIDER\" -> string!\nconst Microsoft.Identity.Web.AppServicesAuthenticationInformation.AppServicesAuthIdTokenHeader = \"X-MS-TOKEN-AAD-ID-TOKEN\" -> string!\nconst Microsoft.Identity.Web.AppServicesAuthenticationInformation.AppServicesAuthLogoutPathEnvironmentVariable = \"WEBSITE_AUTH_LOGOUT_PATH\" -> string!\nconst Microsoft.Identity.Web.AppServicesAuthenticationInformation.AppServicesAuthOpenIdIssuerEnvironmentVariable = \"WEBSITE_AUTH_OPENID_ISSUER\" -> string!\nconst Microsoft.Identity.Web.AppServicesAuthenticationInformation.AppServicesWebSiteAuthApiPrefix = \"WEBSITE_AUTH_API_PREFIX\" -> string!\n```\n\n----------------------------------------\n\nTITLE: Token Acquisition Authentication Provider Class Definition\nDESCRIPTION: Defines the authentication provider class that handles token acquisition and request authentication for Azure AD.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.MicrosoftGraphBeta/PublicAPI/net9.0/InternalAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.TokenAcquisitionAuthenticationProvider.AuthenticateRequestAsync(System.Net.Http.HttpRequestMessage request) -> System.Threading.Tasks.Task\nMicrosoft.Identity.Web.TokenAcquisitionAuthenticationProvider.TokenAcquisitionAuthenticationProvider(Microsoft.Identity.Abstractions.IAuthorizationHeaderProvider authorizationHeaderProvider, Microsoft.Identity.Web.TokenAcquisitionAuthenticationProviderOption options) -> void\n```\n\n----------------------------------------\n\nTITLE: Logging and Event Handling\nDESCRIPTION: Event IDs and logging methods for tracking HTTP request errors and unauthenticated API calls.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.DownstreamApi/PublicAPI/netstandard2.0/InternalAPI.Shipped.txt#2025-04-23_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.DownstreamApi.Logger.HttpRequestError(Microsoft.Extensions.Logging.ILogger! logger, string! ServiceName, string! BaseUrl, string! RelativePath, System.Exception? ex) -> void\n\nstatic Microsoft.Identity.Web.DownstreamApi.Logger.UnauthenticatedApiCall(Microsoft.Extensions.Logging.ILogger! logger, System.Exception? ex) -> void\n\nstatic readonly Microsoft.Identity.Web.DownstreamApiLoggingEventId.HttpRequestError -> Microsoft.Extensions.Logging.EventId\n\nstatic readonly Microsoft.Identity.Web.DownstreamApiLoggingEventId.UnauthenticatedApiCall -> Microsoft.Extensions.Logging.EventId\n```\n\n----------------------------------------\n\nTITLE: Defining Microsoft Graph Options Class in C#\nDESCRIPTION: Class definition for MicrosoftGraphOptions containing base URL and scopes configuration for Microsoft Graph API integration.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.MicrosoftGraphBeta/PublicAPI/net9.0/PublicAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class MicrosoftGraphOptions\n{\n    public string BaseUrl { get; set; }\n    public string? Scopes { get; set; }\n    public MicrosoftGraphOptions() { }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AppServicesAuthentication Scheme in C#\nDESCRIPTION: A constant string declaration defining the default authentication scheme for App Services Authentication integration. This constant is used throughout the library to reference this authentication method.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net9.0/PublicAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n#nullable enable\nconst Microsoft.Identity.Web.AppServicesAuthenticationDefaults.AuthenticationScheme = \"AppServicesAuthentication\" -> string!\n```\n\n----------------------------------------\n\nTITLE: Accessors and Mutators for Token Cache Provider Hints and Telemetry - Microsoft.Identity.Web - C#\nDESCRIPTION: Exposes get/set properties for providing hints regarding cache usage, telemetry data objects, and cache serializer details, impacting how the token cache providers function. These accessors allow for extensibility and monitoring of serialization and caching operations, with dependencies on internal types for telemetry and hints. Inputs and outputs consist of string messages or custom telemetry objects.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.TokenCache/InternalAPI.Shipped.txt#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Identity.Web.TokenCacheProviders.CacheSerializerHints.ShouldNotUseDistributedCacheMessage.get -> string?\nMicrosoft.Identity.Web.TokenCacheProviders.CacheSerializerHints.ShouldNotUseDistributedCacheMessage.set -> void\nMicrosoft.Identity.Web.TokenCacheProviders.CacheSerializerHints.TelemetryData.get -> Microsoft.Identity.Client.TelemetryCore.TelemetryClient.TelemetryData?\nMicrosoft.Identity.Web.TokenCacheProviders.CacheSerializerHints.TelemetryData.set -> void\n```\n\n----------------------------------------\n\nTITLE: Setting RequestId Property in ErrorModel (C#)\nDESCRIPTION: Defines the setter for the `RequestId` property in the `ErrorModel` class. This allows the request identifier to be set on the model, typically within the request processing pipeline.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.UI/PublicAPI.Shipped.txt#2025-04-23_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Identity.Web.UI.Areas.MicrosoftIdentity.Pages.Account.ErrorModel.RequestId.set -> void\n```\n\n----------------------------------------\n\nTITLE: Initiating Password Reset Flow in AccountController (C#)\nDESCRIPTION: Defines the `ResetPassword` action method in `AccountController`. This method initiates the user flow for resetting their password, typically used with Azure AD B2C password reset policies. It accepts an optional `scheme` parameter.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.UI/PublicAPI.Shipped.txt#2025-04-23_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Identity.Web.UI.Areas.MicrosoftIdentity.Controllers.AccountController.ResetPassword(string! scheme) -> Microsoft.AspNetCore.Mvc.IActionResult!\n```\n\n----------------------------------------\n\nTITLE: Defining Code Analysis Attributes in C#\nDESCRIPTION: Defines various code analysis attributes from System.Diagnostics.CodeAnalysis namespace, including AllowNull, DisallowNull, DoesNotReturn, MaybeNull, NotNull, and their variations. These attributes are used for static code analysis and null-state tracking.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.Diagnostics/PublicAPI/netstandard2.0/InternalAPI.Shipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nSystem.Diagnostics.CodeAnalysis.AllowNullAttribute\nSystem.Diagnostics.CodeAnalysis.AllowNullAttribute.AllowNullAttribute() -> void\nSystem.Diagnostics.CodeAnalysis.DisallowNullAttribute\nSystem.Diagnostics.CodeAnalysis.DisallowNullAttribute.DisallowNullAttribute() -> void\nSystem.Diagnostics.CodeAnalysis.DoesNotReturnAttribute\nSystem.Diagnostics.CodeAnalysis.DoesNotReturnAttribute.DoesNotReturnAttribute() -> void\nSystem.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute\nSystem.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.DoesNotReturnIfAttribute(bool parameterValue) -> void\nSystem.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.ParameterValue.get -> bool\nSystem.Diagnostics.CodeAnalysis.MaybeNullAttribute\nSystem.Diagnostics.CodeAnalysis.MaybeNullAttribute.MaybeNullAttribute() -> void\nSystem.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute\nSystem.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.MaybeNullWhenAttribute(bool returnValue) -> void\nSystem.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue.get -> bool\nSystem.Diagnostics.CodeAnalysis.MemberNotNullAttribute\nSystem.Diagnostics.CodeAnalysis.MemberNotNullAttribute.MemberNotNullAttribute(params string![]! members) -> void\nSystem.Diagnostics.CodeAnalysis.MemberNotNullAttribute.MemberNotNullAttribute(string! member) -> void\nSystem.Diagnostics.CodeAnalysis.MemberNotNullAttribute.Members.get -> string![]!\nSystem.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute\nSystem.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.MemberNotNullWhenAttribute(bool returnValue, params string![]! members) -> void\nSystem.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.MemberNotNullWhenAttribute(bool returnValue, string! member) -> void\nSystem.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.Members.get -> string![]!\nSystem.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.ReturnValue.get -> bool\nSystem.Diagnostics.CodeAnalysis.NotNullAttribute\nSystem.Diagnostics.CodeAnalysis.NotNullAttribute.NotNullAttribute() -> void\nSystem.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute\nSystem.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.NotNullIfNotNullAttribute(string! parameterName) -> void\nSystem.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.ParameterName.get -> string!\nSystem.Diagnostics.CodeAnalysis.NotNullWhenAttribute\nSystem.Diagnostics.CodeAnalysis.NotNullWhenAttribute.NotNullWhenAttribute(bool returnValue) -> void\nSystem.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue.get -> bool\n```\n\n----------------------------------------\n\nTITLE: Constructing OidcIdpSignedAssertionLoader Instance (C#)\nDESCRIPTION: Defines the constructor for the `OidcIdpSignedAssertionLoader` class. It requires dependencies like a logger (`ILogger`), application options (`IOptionsMonitor<MicrosoftIdentityApplicationOptions>`), configuration (`IConfiguration`), and a token acquirer factory (`ITokenAcquirerFactory`) for its initialization.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.OidcFIC/PublicAPI/net8.0/InternalAPI.Shipped.txt#2025-04-23_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Identity.Web.OidcFic.OidcIdpSignedAssertionLoader.OidcIdpSignedAssertionLoader(Microsoft.Extensions.Logging.ILogger<Microsoft.Identity.Web.OidcFic.OidcIdpSignedAssertionLoader!>! logger, Microsoft.Extensions.Options.IOptionsMonitor<Microsoft.Identity.Abstractions.MicrosoftIdentityApplicationOptions!>! options, Microsoft.Extensions.Configuration.IConfiguration! configuration, Microsoft.Identity.Abstractions.ITokenAcquirerFactory! tokenAcquirerFactory) -> void\n```\n\n----------------------------------------\n\nTITLE: Authentication Handler Method Signatures\nDESCRIPTION: Method signatures for scope and permission authorization handlers in Microsoft Identity Web\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net6.0/InternalAPI.Shipped.txt#2025-04-23_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Identity.Web.ScopeAuthorizationHandler.HandleRequirementAsync(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext! context, Microsoft.Identity.Web.ScopeAuthorizationRequirement! requirement) -> System.Threading.Tasks.Task!\noverride Microsoft.Identity.Web.ScopeOrAppPermissionAuthorizationHandler.HandleRequirementAsync(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext! context, Microsoft.Identity.Web.ScopeOrAppPermissionAuthorizationRequirement! requirement) -> System.Threading.Tasks.Task!\n```\n\n----------------------------------------\n\nTITLE: Adding Graph Beta Service Client with Default Lifetime\nDESCRIPTION: Extension method to add a Graph Beta service client to the dependency injection container with default service lifetime.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.GraphServiceClientBeta/PublicAPI/net8.0/InternalAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.GraphBetaServiceCollectionExtensions.AddGraphBetaServiceClient(Microsoft.Extensions.DependencyInjection.IServiceCollection services) -> void\n```\n\n----------------------------------------\n\nTITLE: Error Handling for Login Operations\nDESCRIPTION: Implementation of a TempData-based login error accessor for storing and retrieving error messages during authentication flows, providing methods to get, set, and check availability of error messages.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net7.0/InternalAPI.Shipped.txt#2025-04-23_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Identity.Web.TempDataLoginErrorAccessor\nMicrosoft.Identity.Web.TempDataLoginErrorAccessor.GetMessage(Microsoft.AspNetCore.Http.HttpContext! context) -> string?\nMicrosoft.Identity.Web.TempDataLoginErrorAccessor.IsEnabled.get -> bool\nMicrosoft.Identity.Web.TempDataLoginErrorAccessor.SetMessage(Microsoft.AspNetCore.Http.HttpContext! context, string? message) -> void\n```\n\n----------------------------------------\n\nTITLE: Authority Helper Methods\nDESCRIPTION: Static methods for building and validating authority URLs for Microsoft Identity authentication\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net7.0/InternalAPI.Shipped.txt#2025-04-23_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.AuthorityHelpers.BuildAuthority(Microsoft.Identity.Web.MicrosoftIdentityOptions! options) -> string!\nstatic Microsoft.Identity.Web.AuthorityHelpers.BuildCiamAuthorityIfNeeded(string! authority, out bool preserveAuthority) -> string?\nstatic Microsoft.Identity.Web.AuthorityHelpers.EnsureAuthorityIsV2(string! authority) -> string!\nstatic Microsoft.Identity.Web.AuthorityHelpers.GetAuthorityWithoutQueryIfNeeded(Microsoft.Identity.Web.MicrosoftIdentityOptions! options) -> string!\n```\n\n----------------------------------------\n\nTITLE: Initializing ErrorModel with ErrorAccessor in C#\nDESCRIPTION: Defines the constructor for the `ErrorModel` Razor Page model. It requires an `ILoginErrorAccessor` dependency, injected via dependency injection, to access and display error details on the page.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.UI/PublicAPI.Shipped.txt#2025-04-23_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Identity.Web.UI.Areas.MicrosoftIdentity.Pages.Account.ErrorModel.ErrorModel(Microsoft.Identity.Web.ILoginErrorAccessor! errorAccessor) -> void\n```\n\n----------------------------------------\n\nTITLE: Installing Microsoft Identity Web NuGet Package in C#\nDESCRIPTION: This snippet demonstrates how to install the Microsoft.Identity.Web NuGet package using the .NET CLI. This package is essential for integrating Azure AD authentication in ASP.NET Core applications.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.Diagnostics/PublicAPI/net472/PublicAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Microsoft.Identity.Web\n```\n\n----------------------------------------\n\nTITLE: DownstreamWebApiOptions Implementation\nDESCRIPTION: Class definition for configuring downstream web API calls including base URL, HTTP method and relative path properties\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net6.0/PublicAPI.Shipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.DownstreamWebApiOptions.BaseUrl.get -> string!\nMicrosoft.Identity.Web.DownstreamWebApiOptions.BaseUrl.set -> void\nMicrosoft.Identity.Web.DownstreamWebApiOptions.HttpMethod.get -> System.Net.Http.HttpMethod!\nMicrosoft.Identity.Web.DownstreamWebApiOptions.HttpMethod.set -> void\nMicrosoft.Identity.Web.DownstreamWebApiOptions.RelativePath.get -> string!\nMicrosoft.Identity.Web.DownstreamWebApiOptions.RelativePath.set -> void\n```\n\n----------------------------------------\n\nTITLE: Utility Methods and Measurement Result Classes - Microsoft.Identity.Web - C#\nDESCRIPTION: Introduces generic and non-generic measurement result classes to hold timing information for cache operations, including constructors and property getters for ticks and results. Also includes utility methods for asynchronously measuring task durations. These are essential for telemetry and performance diagnostics, and use System.Diagnostics.Stopwatch internally. Inputs are tasks or operation ticks, outputs are result structures containing timing (milliseconds, ticks) and optional results.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.TokenCache/InternalAPI.Shipped.txt#2025-04-23_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Identity.Web.TokenCacheProviders.MeasureDurationResult\nMicrosoft.Identity.Web.TokenCacheProviders.MeasureDurationResult.MeasureDurationResult() -> void\nMicrosoft.Identity.Web.TokenCacheProviders.MeasureDurationResult.MeasureDurationResult(long ticks) -> void\nMicrosoft.Identity.Web.TokenCacheProviders.MeasureDurationResult.MilliSeconds.get -> double\nMicrosoft.Identity.Web.TokenCacheProviders.MeasureDurationResult.Ticks.get -> long\nMicrosoft.Identity.Web.TokenCacheProviders.MeasureDurationResult<TResult>\nMicrosoft.Identity.Web.TokenCacheProviders.MeasureDurationResult<TResult>.MeasureDurationResult() -> void\nMicrosoft.Identity.Web.TokenCacheProviders.MeasureDurationResult<TResult>.MeasureDurationResult(TResult result, long ticks) -> void\nMicrosoft.Identity.Web.TokenCacheProviders.MeasureDurationResult<TResult>.Result.get -> TResult\nMicrosoft.Identity.Web.TokenCacheProviders.MeasureDurationResult<TResult>.Ticks.get -> long\nstatic Microsoft.Identity.Web.TokenCacheProviders.Utility.MeasureAsync(this System.Threading.Tasks.Task! task) -> System.Threading.Tasks.Task<Microsoft.Identity.Web.TokenCacheProviders.MeasureDurationResult>!\nstatic Microsoft.Identity.Web.TokenCacheProviders.Utility.MeasureAsync<TResult>(this System.Threading.Tasks.Task<TResult>! task) -> System.Threading.Tasks.Task<Microsoft.Identity.Web.TokenCacheProviders.MeasureDurationResult<TResult>>!\n```\n\n----------------------------------------\n\nTITLE: Azure AD B2C OpenID Connect Event Handlers Implementation\nDESCRIPTION: Implementation of event handlers for Azure AD B2C OpenID Connect authentication flows, including methods for handling redirect to identity provider and remote failure events.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net7.0/InternalAPI.Shipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Identity.Web.AzureADB2COpenIDConnectEventHandlers\nMicrosoft.Identity.Web.AzureADB2COpenIDConnectEventHandlers.AzureADB2COpenIDConnectEventHandlers(string! schemeName, Microsoft.Identity.Web.MicrosoftIdentityOptions! options, Microsoft.Identity.Web.ILoginErrorAccessor! errorAccessor) -> void\nMicrosoft.Identity.Web.AzureADB2COpenIDConnectEventHandlers.OnRedirectToIdentityProvider(Microsoft.AspNetCore.Authentication.OpenIdConnect.RedirectContext! context) -> System.Threading.Tasks.Task!\nMicrosoft.Identity.Web.AzureADB2COpenIDConnectEventHandlers.OnRemoteFailure(Microsoft.AspNetCore.Authentication.RemoteFailureContext! context) -> System.Threading.Tasks.Task!\nMicrosoft.Identity.Web.AzureADB2COpenIDConnectEventHandlers.Options.get -> Microsoft.Identity.Web.MicrosoftIdentityOptions!\nMicrosoft.Identity.Web.AzureADB2COpenIDConnectEventHandlers.SchemeName.get -> string!\n```\n\n----------------------------------------\n\nTITLE: Implementing RedirectToLogin Component in Blazor\nDESCRIPTION: Implementation of a RedirectToLogin component for Blazor Server applications. This component handles redirecting unauthorized users to the login page and manages navigation state.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.Diagnostics/PublicAPI/net462/InternalAPI.Unshipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n@inject NavigationManager Navigation\n@using Microsoft.AspNetCore.Components.Authorization\n\n@code {\n    protected override void OnInitialized()\n    {\n        Navigation.NavigateTo($\"authentication/login?returnUrl={Uri.EscapeDataString(Navigation.Uri)}\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring ErrorModel Class in C#\nDESCRIPTION: Declares the `ErrorModel` Razor Page model class within the `Microsoft.Identity.Web.UI.Areas.MicrosoftIdentity.Pages.Account` namespace. This page model is used for displaying error information, potentially related to authentication or authorization failures.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.UI/PublicAPI.Shipped.txt#2025-04-23_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Identity.Web.UI.Areas.MicrosoftIdentity.Pages.Account.ErrorModel\n```\n\n----------------------------------------\n\nTITLE: Defining GetClientAssertionAsync Override in OidcIdpSignedAssertionProvider (C#)\nDESCRIPTION: Defines the signature for the overridden GetClientAssertionAsync method in the OidcIdpSignedAssertionProvider class. This asynchronous method generates a ClientAssertion object, potentially using details from the provided AssertionRequestOptions, based on the OIDC token flow. It returns a Task containing the generated ClientAssertion.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.OidcFIC/PublicAPI/net472/InternalAPI.Shipped.txt#2025-04-23_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\noverride Microsoft.Identity.Web.OidcFic.OidcIdpSignedAssertionProvider.GetClientAssertionAsync(Microsoft.Identity.Client.AssertionRequestOptions? assertionRequestOptions) -> System.Threading.Tasks.Task<Microsoft.Identity.Web.ClientAssertion!>!\n```\n\n----------------------------------------\n\nTITLE: Adding Graph Beta Service Client with Custom Lifetime\nDESCRIPTION: Extension method to add a Graph Beta service client to the dependency injection container with a specified service lifetime parameter.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.GraphServiceClientBeta/PublicAPI/net8.0/InternalAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.GraphBetaServiceCollectionExtensions.AddGraphBetaServiceClientWithLifetime(Microsoft.Extensions.DependencyInjection.IServiceCollection services, Microsoft.Extensions.DependencyInjection.ServiceLifetime lifetime) -> void\n```\n\n----------------------------------------\n\nTITLE: Adding Graph Beta Service Client\nDESCRIPTION: Static extension method to add Microsoft Graph Beta service client to the dependency injection container with default lifetime\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.GraphServiceClientBeta/PublicAPI/net9.0/InternalAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.GraphBetaServiceCollectionExtensions.AddGraphBetaServiceClient(Microsoft.Extensions.DependencyInjection.IServiceCollection services) -> void\n```\n\n----------------------------------------\n\nTITLE: Token Acquisition Implementation\nDESCRIPTION: Override methods for token acquisition handling asynchronous token requests\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net6.0/PublicAPI.Shipped.txt#2025-04-23_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Identity.Web.TokenAcquisitionTokenCredential.GetTokenAsync(Azure.Core.TokenRequestContext requestContext, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<Azure.Core.AccessToken>\n```\n\n----------------------------------------\n\nTITLE: Defining Azure App Service Authentication Constants in C#\nDESCRIPTION: Constant string definitions for Azure App Service Authentication environment variables and configuration settings used in Microsoft Identity Web\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net6.0/InternalAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Web.AppServicesAuthenticationInformation.AppServicesAuthAAD = \"AAD\";\nconst Microsoft.Identity.Web.AppServicesAuthenticationInformation.AppServicesAuthAzureActiveDirectory = \"AzureActiveDirectory\";\nconst Microsoft.Identity.Web.AppServicesAuthenticationInformation.AppServicesAuthClientIdEnvironmentVariable = \"WEBSITE_AUTH_CLIENT_ID\";\n```\n\n----------------------------------------\n\nTITLE: Audience Validation for JWT Tokens\nDESCRIPTION: Implementation of token audience validation logic for JWT tokens in Microsoft Identity Web, providing methods to register and validate token audiences against allowed values in the configuration.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net7.0/InternalAPI.Shipped.txt#2025-04-23_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Identity.Web.Resource.RegisterValidAudience\nMicrosoft.Identity.Web.Resource.RegisterValidAudience.RegisterAudienceValidation(Microsoft.IdentityModel.Tokens.TokenValidationParameters! validationParameters, Microsoft.Identity.Web.MicrosoftIdentityOptions! microsoftIdentityOptions) -> void\nMicrosoft.Identity.Web.Resource.RegisterValidAudience.RegisterValidAudience() -> void\nMicrosoft.Identity.Web.Resource.RegisterValidAudience.ValidateAudience(System.Collections.Generic.IEnumerable<string!>! audiences, Microsoft.IdentityModel.Tokens.SecurityToken! securityToken, Microsoft.IdentityModel.Tokens.TokenValidationParameters! validationParameters) -> bool\n```\n\n----------------------------------------\n\nTITLE: Targeting Specific Tenant for App Creation (Interactive) - PowerShell\nDESCRIPTION: Defines a tenant ID to run 'Cleanup.ps1' and 'Configure.ps1' scripts within a specified Azure Active Directory tenant. This approach is necessary when applications should be managed in a tenant different from the default user context. Inputs include the tenant ID GUID; outputs are AD applications and configurations within the specified tenant.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/tests/DevApps/blazorserver-calls-api/AppCreationScripts/AppCreationScripts.md#2025-04-23_snippet_7\n\nLANGUAGE: PowerShell\nCODE:\n```\n$tenantId = \"yourTenantIdGuid\"\n. .\\Cleanup.ps1 -TenantId $tenantId\n. .\\Configure.ps1 -TenantId $tenantId\n```\n\n----------------------------------------\n\nTITLE: Graph Service Client Options Class Definition\nDESCRIPTION: Defines configuration options for Graph service client including scopes and user principal settings.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.GraphServiceClient/PublicAPI/net9.0/PublicAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.GraphServiceClientOptions\nMicrosoft.Identity.Web.GraphServiceClientOptions.GraphServiceClientOptions() -> void\nMicrosoft.Identity.Web.GraphServiceClientOptions.Scopes.get -> System.Collections.Generic.IEnumerable<string!>!\nMicrosoft.Identity.Web.GraphServiceClientOptions.Scopes.set -> void\nMicrosoft.Identity.Web.GraphServiceClientOptions.User.get -> System.Security.Claims.ClaimsPrincipal?\nMicrosoft.Identity.Web.GraphServiceClientOptions.User.set -> void\n```\n\n----------------------------------------\n\nTITLE: CertificateDescription Class API in C#\nDESCRIPTION: Defines the CertificateDescription class which provides properties and methods for describing and creating certificates from various sources, including key vaults, certificate stores, base64 encoded values, and file paths.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.Certificate/PublicAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n#nullable enable\nMicrosoft.Identity.Web.CertificateDescription\nMicrosoft.Identity.Web.CertificateDescription.Certificate.get -> System.Security.Cryptography.X509Certificates.X509Certificate2?\nMicrosoft.Identity.Web.CertificateDescription.Certificate.set -> void\nMicrosoft.Identity.Web.CertificateDescription.CertificateDescription() -> void\nMicrosoft.Identity.Web.CertificateDescription.CertificateDescription(Microsoft.Identity.Abstractions.CredentialDescription! credentialDescription) -> void\nMicrosoft.Identity.Web.CertificateDescription.SourceType.get -> Microsoft.Identity.Web.CertificateSource\nMicrosoft.Identity.Web.CertificateDescription.SourceType.set -> void\nMicrosoft.Identity.Web.CertificateDescription.X509KeyStorageFlags.get -> System.Security.Cryptography.X509Certificates.X509KeyStorageFlags\nMicrosoft.Identity.Web.CertificateDescription.X509KeyStorageFlags.set -> void\n```\n\n----------------------------------------\n\nTITLE: Defining OIDC IdP Signed Assertion Loader - Microsoft Identity Web (C#)\nDESCRIPTION: Declares the OidcIdpSignedAssertionLoader class and its members for loading signed assertions from an OIDC Identity Provider. The class exposes properties to access credential sources and loader parameters, and provides an asynchronous method for loading credentials as needed. Dependencies include ILogger, IOptionsMonitor, IConfiguration, and ITokenAcquirerFactory. Inputs mainly consist of credential descriptions and optional loader parameters, outputs are handled asynchronously via Task types.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.OidcFIC/PublicAPI/net7.0/InternalAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n#nullable enable\nMicrosoft.Identity.Web.OidcFic.OidcIdpSignedAssertionLoader\nMicrosoft.Identity.Web.OidcFic.OidcIdpSignedAssertionLoader.CredentialSource.get -> Microsoft.Identity.Abstractions.CredentialSource\nMicrosoft.Identity.Web.OidcFic.OidcIdpSignedAssertionLoader.LoadIfNeededAsync(Microsoft.Identity.Abstractions.CredentialDescription! credentialDescription, Microsoft.Identity.Abstractions.CredentialSourceLoaderParameters? parameters = null) -> System.Threading.Tasks.Task!\nMicrosoft.Identity.Web.OidcFic.OidcIdpSignedAssertionLoader.Name.get -> string!\nMicrosoft.Identity.Web.OidcFic.OidcIdpSignedAssertionLoader.OidcIdpSignedAssertionLoader(Microsoft.Extensions.Logging.ILogger<Microsoft.Identity.Web.OidcFic.OidcIdpSignedAssertionLoader!>! logger, Microsoft.Extensions.Options.IOptionsMonitor<Microsoft.Identity.Abstractions.MicrosoftIdentityApplicationOptions!>! options, Microsoft.Extensions.Configuration.IConfiguration! configuration, Microsoft.Identity.Abstractions.ITokenAcquirerFactory! tokenAcquirerFactory) -> void\n```\n\n----------------------------------------\n\nTITLE: Managing Logging Event Identifiers - Microsoft.Identity.Web - C#\nDESCRIPTION: Declares static readonly fields representing different event identifiers for logging cache-related operations. These event IDs enable structured logging (with Microsoft.Extensions.Logging.EventId) for various scenarios such as cache deserialization errors, distributed cache read times, memory cache removals, and cache state tracking. Intended for internal logging and diagnostics throughout Microsoft.Identity.Web.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.TokenCache/InternalAPI.Shipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nstatic readonly Microsoft.Identity.Web.LoggingEventId.BackPropagateL2toL1 -> Microsoft.Extensions.Logging.EventId\nstatic readonly Microsoft.Identity.Web.LoggingEventId.CacheDeserializationError -> Microsoft.Extensions.Logging.EventId\nstatic readonly Microsoft.Identity.Web.LoggingEventId.DistributedCacheConnectionError -> Microsoft.Extensions.Logging.EventId\nstatic readonly Microsoft.Identity.Web.LoggingEventId.DistributedCacheReadTime -> Microsoft.Extensions.Logging.EventId\nstatic readonly Microsoft.Identity.Web.LoggingEventId.DistributedCacheRetry -> Microsoft.Extensions.Logging.EventId\nstatic readonly Microsoft.Identity.Web.LoggingEventId.DistributedCacheState -> Microsoft.Extensions.Logging.EventId\nstatic readonly Microsoft.Identity.Web.LoggingEventId.DistributedCacheStateWithTime -> Microsoft.Extensions.Logging.EventId\nstatic readonly Microsoft.Identity.Web.LoggingEventId.MemoryCacheCount -> Microsoft.Extensions.Logging.EventId\nstatic readonly Microsoft.Identity.Web.LoggingEventId.MemoryCacheRead -> Microsoft.Extensions.Logging.EventId\nstatic readonly Microsoft.Identity.Web.LoggingEventId.MemoryCacheRemove -> Microsoft.Extensions.Logging.EventId\n```\n\n----------------------------------------\n\nTITLE: Handling GET Request for Error Page in C#\nDESCRIPTION: Defines the `OnGet` handler method for the `ErrorModel` Razor Page. This method is executed when the error page is requested via an HTTP GET request, typically populating error details like the Request ID.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.UI/PublicAPI.Shipped.txt#2025-04-23_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Identity.Web.UI.Areas.MicrosoftIdentity.Pages.Account.ErrorModel.OnGet() -> void\n```\n\n----------------------------------------\n\nTITLE: Adding Graph Beta Service Client with Custom Lifetime\nDESCRIPTION: Extension method to add Graph Beta Service Client to the service collection with a specified service lifetime parameter.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.GraphServiceClientBeta/PublicAPI/netstandard2.0/InternalAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.GraphBetaServiceCollectionExtensions.AddGraphBetaServiceClientWithLifetime(Microsoft.Extensions.DependencyInjection.IServiceCollection services, Microsoft.Extensions.DependencyInjection.ServiceLifetime lifetime) -> void\n```\n\n----------------------------------------\n\nTITLE: Initializing Microsoft Graph Options in C#\nDESCRIPTION: The default constructor for the MicrosoftGraphOptions class. This class holds configuration settings used when interacting with Microsoft Graph via Microsoft.Identity.Web.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.MicrosoftGraph/PublicAPI/net6.0/PublicAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Identity.Web.MicrosoftGraphOptions.MicrosoftGraphOptions() -> void\n```\n\n----------------------------------------\n\nTITLE: Configuring Microsoft Graph Options in JSON\nDESCRIPTION: JSON configuration for Microsoft Graph options, including BaseUrl, RequestAppToken, and Scopes settings.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.GraphServiceClient/Readme.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"AzureAd\": {\n    // more here\n  },\n\n  \"DownstreamApis\": {\n    \"MicrosoftGraph\": {\n      // \"BaseUrl\": \"https://graph.microsoft.com/v1.0\",\n      // \"RequestAppToken\": false,\n      \"Scopes\": [\"User.Read\", \"User.ReadBasic.All\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Session Token Cache Provider\nDESCRIPTION: Implementation of session-based token cache provider with async read/write operations\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net6.0/PublicAPI.Shipped.txt#2025-04-23_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.Identity.Web.TokenCacheProviders.Session.MsalSessionTokenCacheProvider.WriteCacheBytesAsync(string! cacheKey, byte[]! bytes) -> System.Threading.Tasks.Task!\n```\n\n----------------------------------------\n\nTITLE: BaseRequestExtensions Static Methods\nDESCRIPTION: Extension methods for configuring authentication and authorization options on base requests\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.MicrosoftGraphBeta/PublicAPI/net462/PublicAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic static class BaseRequestExtensions\n{\n    public static T WithAppOnly<T>(this T baseRequest, bool appOnly = true, string? tenant = null);\n    public static T WithAuthenticationOptions<T>(this T baseRequest, Action<AuthorizationHeaderProviderOptions> overrideAuthenticationOptions);\n    public static T WithAuthenticationScheme<T>(this T baseRequest, string authenticationScheme);\n    public static T WithScopes<T>(this T baseRequest, params string[] scopes);\n    public static T WithUser<T>(this T baseRequest, ClaimsPrincipal user);\n}\n```\n\n----------------------------------------\n\nTITLE: TokenAcquisitionAuthenticationProvider Class Definition\nDESCRIPTION: Authentication provider class that handles token acquisition and request authentication. Includes constructor and authenticate request method.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.MicrosoftGraph/PublicAPI/net462/InternalAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class TokenAcquisitionAuthenticationProvider\n{\n    public TokenAcquisitionAuthenticationProvider(IAuthorizationHeaderProvider authorizationHeaderProvider, TokenAcquisitionAuthenticationProviderOption options);\n    public Task AuthenticateRequestAsync(HttpRequestMessage request);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing AzureAD PowerShell Module System-Wide - PowerShell\nDESCRIPTION: Installs the AzureAD module for all users on the machine. Requires administrator privileges and internet access. This module is essential for automating Azure AD resource and application management within the scripts.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/tests/DevApps/blazorserver-calls-api/AppCreationScripts/AppCreationScripts.md#2025-04-23_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nInstall-Module AzureAD\n```\n\n----------------------------------------\n\nTITLE: Graph Service Client Options API Definition in C#\nDESCRIPTION: Defines properties for configuring Graph service client including scopes and user claims principal.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.GraphServiceClient/PublicAPI/net462/PublicAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.GraphServiceClientOptions.GraphServiceClientOptions() -> void\nMicrosoft.Identity.Web.GraphServiceClientOptions.Scopes.get -> System.Collections.Generic.IEnumerable<string!>!\nMicrosoft.Identity.Web.GraphServiceClientOptions.Scopes.set -> void\nMicrosoft.Identity.Web.GraphServiceClientOptions.User.get -> System.Security.Claims.ClaimsPrincipal?\nMicrosoft.Identity.Web.GraphServiceClientOptions.User.set -> void\n```\n\n----------------------------------------\n\nTITLE: ClientAssertion Class in C#\nDESCRIPTION: Data class representing a client assertion with a signed assertion string and expiry time. Used to encapsulate the assertion data returned by provider classes.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.Certificateless/PublicAPI.Shipped.txt#2025-04-23_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.ClientAssertion\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.ClientAssertion.ClientAssertion(string! signedAssertion, System.DateTimeOffset? expiry) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.ClientAssertion.Expiry.get -> System.DateTimeOffset?\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.ClientAssertion.SignedAssertion.get -> string!\n```\n\n----------------------------------------\n\nTITLE: Token Acquisition Authentication Provider Options Class\nDESCRIPTION: Defines configuration options for token acquisition authentication including app-only auth, authentication scheme, scopes, tenant, and user settings.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.MicrosoftGraphBeta/PublicAPI/net9.0/InternalAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.TokenAcquisitionAuthenticationProviderOption\nMicrosoft.Identity.Web.TokenAcquisitionAuthenticationProviderOption.AppOnly.get -> bool?\nMicrosoft.Identity.Web.TokenAcquisitionAuthenticationProviderOption.AppOnly.set -> void\nMicrosoft.Identity.Web.TokenAcquisitionAuthenticationProviderOption.AuthenticationScheme.get -> string\nMicrosoft.Identity.Web.TokenAcquisitionAuthenticationProviderOption.AuthenticationScheme.set -> void\nMicrosoft.Identity.Web.TokenAcquisitionAuthenticationProviderOption.AuthorizationHeaderProviderOptions.get -> System.Action<Microsoft.Identity.Abstractions.AuthorizationHeaderProviderOptions>\nMicrosoft.Identity.Web.TokenAcquisitionAuthenticationProviderOption.AuthorizationHeaderProviderOptions.set -> void\nMicrosoft.Identity.Web.TokenAcquisitionAuthenticationProviderOption.Scopes.get -> string[]\nMicrosoft.Identity.Web.TokenAcquisitionAuthenticationProviderOption.Scopes.set -> void\nMicrosoft.Identity.Web.TokenAcquisitionAuthenticationProviderOption.Tenant.get -> string\nMicrosoft.Identity.Web.TokenAcquisitionAuthenticationProviderOption.Tenant.set -> void\nMicrosoft.Identity.Web.TokenAcquisitionAuthenticationProviderOption.TokenAcquisitionAuthenticationProviderOption() -> void\nMicrosoft.Identity.Web.TokenAcquisitionAuthenticationProviderOption.User.get -> System.Security.Claims.ClaimsPrincipal\nMicrosoft.Identity.Web.TokenAcquisitionAuthenticationProviderOption.User.set -> void\n```\n\n----------------------------------------\n\nTITLE: Certificate Error Messages in C#\nDESCRIPTION: Error message constants for certificate handling errors in Microsoft Identity Web, providing descriptive error messages for various certificate-related exceptions and validation errors.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.Certificate/InternalAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Web.CertificateErrorMessage.BothClientSecretAndCertificateProvided = \"IDW10105: Both client secret and client certificate, cannot be included in the configuration of the web app when calling a web API. \" -> string!\nconst Microsoft.Identity.Web.CertificateErrorMessage.ClientCertificatesHaveExpiredOrCannotBeLoaded = \"IDW10109: All client certificates passed to the configuration have expired or can't be loaded. \" -> string!\nconst Microsoft.Identity.Web.CertificateErrorMessage.ClientSecretAndCertificateNull = \"IDW10104: Both client secret and client certificate cannot be null or whitespace, and only ONE must be included in the configuration of the web app when calling a web API. For instance, in the appsettings.json file. \" -> string!\nconst Microsoft.Identity.Web.CertificateErrorMessage.CustomProviderNameAlreadyExists = \"IDW10111 The custom signed assertion provider '{0}' already exists, only the the first instance of ICustomSignedAssertionProvider with this name will be used.\" -> string!\nconst Microsoft.Identity.Web.CertificateErrorMessage.CustomProviderNameNullOrEmpty = \"IDW10112 The name of the custom signed assertion provider is null or empty.\" -> string!\nconst Microsoft.Identity.Web.CertificateErrorMessage.CustomProviderNotFound = \"IDW10113: The custom signed assertion provider with name '{0}' was not found. Was it registered in the service collection?\" -> string!\nconst Microsoft.Identity.Web.CertificateErrorMessage.CustomProviderSourceLoaderNullOrEmpty = \"IDW10114 The dictionary of SourceLoaders for custom signed assertion providers is null or empty.\" -> string!\nconst Microsoft.Identity.Web.CertificateErrorMessage.FromStoreWithThumbprintIsObsolete = \"IDW10803: Use FromStoreWithThumbprint instead, due to spelling error. \" -> string!\nconst Microsoft.Identity.Web.CertificateErrorMessage.IncorrectNumberOfUriSegments = \"IDW10702: Number of URI segments is incorrect: {0}, URI: {1}. \" -> string!\nconst Microsoft.Identity.Web.CertificateErrorMessage.InvalidBase64UrlString = \"IDW10601: Invalid Base64URL string. \" -> string!\nconst Microsoft.Identity.Web.CertificateErrorMessage.InvalidCertificateStorePath = \"IDW10703: Certificate store path must be of the form 'StoreLocation/StoreName'. StoreLocation must be one of 'CurrentUser', 'LocalMachine'. StoreName must be empty or one of '{0}'. \" -> string!\nconst Microsoft.Identity.Web.CertificateErrorMessage.OnlyPkcs12IsSupported = \"IDW10701: Only PKCS #12 content type is supported. Found Content-Type: {0}. \" -> string!\n```\n\n----------------------------------------\n\nTITLE: Getting ShowRequestId Property in ErrorModel (C#)\nDESCRIPTION: Defines the getter for the `ShowRequestId` property in the `ErrorModel` class. This boolean property determines whether the `RequestId` should be displayed on the error page, often controlled by the application's environment (e.g., true in Development).\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.UI/PublicAPI.Shipped.txt#2025-04-23_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Identity.Web.UI.Areas.MicrosoftIdentity.Pages.Account.ErrorModel.ShowRequestId.get -> bool\n```\n\n----------------------------------------\n\nTITLE: Authentication Scheme Constant Definition\nDESCRIPTION: Defines the default authentication scheme constant for App Services Authentication\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net6.0/PublicAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Web.AppServicesAuthenticationDefaults.AuthenticationScheme = \"AppServicesAuthentication\"\n```\n\n----------------------------------------\n\nTITLE: Defining Configuration Method in TokenAcquirerFactory (C#)\nDESCRIPTION: Virtual method signature for DefineConfiguration that takes an IConfigurationBuilder parameter and returns a string. This method likely allows customization of configuration settings for token acquisition.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.TokenAcquisition/PublicAPI/net7.0/PublicAPI.Shipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nvirtual Microsoft.Identity.Web.TokenAcquirerFactory.DefineConfiguration(Microsoft.Extensions.Configuration.IConfigurationBuilder! builder) -> string!\n```\n\n----------------------------------------\n\nTITLE: Configuring Certificate Rotation Timing in C#\nDESCRIPTION: Defines the default timing configuration for certificate rotation in Microsoft Identity Web. Sets default proactive rotation days to 30, renewal threshold days to 90, and the default flag for certificate rollover.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/netstandard2.0/InternalAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n#nullable enable\n```\n\n----------------------------------------\n\nTITLE: Installing Microsoft Identity Web NuGet Package\nDESCRIPTION: Shows how to install the Microsoft.Identity.Web NuGet package using the Package Manager Console in Visual Studio.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.GraphServiceClient/PublicAPI/net472/InternalAPI.Unshipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nInstall-Package Microsoft.Identity.Web\n```\n\n----------------------------------------\n\nTITLE: User-Assigned Managed Identity Client ID Setter\nDESCRIPTION: Static property setter to set the user-assigned managed identity client ID.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.Certificate/InternalAPI.Shipped.txt#2025-04-23_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Identity.Web.KeyVaultCertificateLoader.UserAssignedManagedIdentityClientId.set -> void\n```\n\n----------------------------------------\n\nTITLE: AzureIdentityForKubernetesClientAssertion Class in C#\nDESCRIPTION: Class declaration and constructors for Azure Identity for Kubernetes client assertion provider. This class handles authentication in Kubernetes environments.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.Certificateless/PublicAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.AzureIdentityForKubernetesClientAssertion\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.AzureIdentityForKubernetesClientAssertion.AzureIdentityForKubernetesClientAssertion(Microsoft.Extensions.Logging.ILogger? logger = null) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.AzureIdentityForKubernetesClientAssertion.AzureIdentityForKubernetesClientAssertion(string? filePath, Microsoft.Extensions.Logging.ILogger? logger = null) -> void\n```\n\n----------------------------------------\n\nTITLE: Diagnostic Helper Methods for ID and Version Information\nDESCRIPTION: Methods for creating telemetry information and retrieving Microsoft Identity Web version details\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.Diagnostics/PublicAPI/net6.0/InternalAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.Diagnostics.IdHelper.CreateTelemetryInfo() -> string!\nstatic Microsoft.Identity.Web.Diagnostics.IdHelper.GetIdWebVersion() -> string!\n```\n\n----------------------------------------\n\nTITLE: CertificatelessOptions Class in C#\nDESCRIPTION: Class that defines options for certificateless authentication. It contains properties to enable certificateless authentication and specify managed identity client ID.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.Certificateless/PublicAPI.Shipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.CertificatelessOptions\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.CertificatelessOptions.CertificatelessOptions() -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.CertificatelessOptions.IsEnabled.get -> bool\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.CertificatelessOptions.IsEnabled.set -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.CertificatelessOptions.ManagedIdentityClientId.get -> string?\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.CertificatelessOptions.ManagedIdentityClientId.set -> void\n```\n\n----------------------------------------\n\nTITLE: Graph Authentication Options API Definition in C#\nDESCRIPTION: Defines the base URL property for Graph authentication configuration.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.GraphServiceClient/PublicAPI/net462/PublicAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.GraphAuthenticationOptions.BaseUrl.get -> string!\nMicrosoft.Identity.Web.GraphAuthenticationOptions.GraphAuthenticationOptions() -> void\n```\n\n----------------------------------------\n\nTITLE: Diagnostic Helper Classes in Microsoft.Identity.Web\nDESCRIPTION: Collection of helper methods for platform detection and telemetry information gathering. Includes methods to check OS platform and create telemetry data.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.Diagnostics/PublicAPI/net462/InternalAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.Diagnostics.IdHelper.CreateTelemetryInfo() -> string!\nMicrosoft.Identity.Web.Diagnostics.IdHelper.GetIdWebVersion() -> string!\nMicrosoft.Identity.Web.Diagnostics.OsHelper.IsLinuxPlatform() -> bool\nMicrosoft.Identity.Web.Diagnostics.OsHelper.IsMacPlatform() -> bool\nMicrosoft.Identity.Web.Diagnostics.OsHelper.IsWindowsPlatform() -> bool\n```\n\n----------------------------------------\n\nTITLE: Running Scripts Non-Interactively Against a Specific Tenant\nDESCRIPTION: Executes the 'Cleanup.ps1' and 'Configure.ps1' scripts non-interactively against a specific Azure AD tenant using pre-defined credentials. This combines non-interactive execution (Option 2) with specific tenant targeting (Option 3). Replace placeholders for password, username, and tenant ID. This is useful for automated processes requiring specific tenant and user context.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/tests/DevApps/WebAppCallsWebApiCallsGraph/AppCreationScripts/AppCreationScripts.md#2025-04-23_snippet_8\n\nLANGUAGE: PowerShell\nCODE:\n```\n$secpasswd = ConvertTo-SecureString \"[Password here]\" -AsPlainText -Force\n$mycreds = New-Object System.Management.Automation.PSCredential (\"[login@tenantName here]\", $secpasswd)\n$tenantId = \"yourTenantIdGuid\"\n. .\\Cleanup.ps1 -Credential $mycreds -TenantId $tenantId\n. .\\Configure.ps1 -Credential $mycreds -TenantId $tenantId\n```\n\n----------------------------------------\n\nTITLE: CertificatelessConstants Class Declaration in C#\nDESCRIPTION: Declares the CertificatelessConstants class within the Microsoft.Identity.Web.Certificateless namespace, which contains constants related to certificateless authentication.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.Certificateless/InternalAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.Certificateless.CertificatelessConstants\n```\n\n----------------------------------------\n\nTITLE: Defining Token Cache Error Messages - Microsoft.Identity.Web - C#\nDESCRIPTION: Declares string constants representing specific error messages related to token cache configuration and serialization for use within the Microsoft.Identity.Web library. These constants inform users about distributed cache support, serialization exceptions, and method usage guidance, providing links to further documentation where necessary. No external dependencies are required beyond standard C# string usage, and these constants are commonly used in exception handling or logging scenarios.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.TokenCache/InternalAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nconst Microsoft.Identity.Web.TokenCacheErrorMessage.CannotUseDistributedCache = \"IDW10803: Cannot use distributed cache for the current configuration. Use an in memory cache instead.\" -> string!\nconst Microsoft.Identity.Web.TokenCacheErrorMessage.ExceptionDeserializingCache = \"IDW10802: Exception occurred while deserializing token cache. See https://aka.ms/msal-net-token-cache-serialization general guidance and https://aka.ms/ms-id-web/token-cache-troubleshooting for token cache troubleshooting information.\" -> string!\nconst Microsoft.Identity.Web.TokenCacheErrorMessage.InitializeAsyncIsObsolete = \"IDW10801: Use Initialize instead. See https://aka.ms/ms-id-web/1.9.0. \" -> string!\n```\n\n----------------------------------------\n\nTITLE: Configuring MSAL.NET Options for Azure AD Authentication in .NET\nDESCRIPTION: This snippet shows how to configure MSAL.NET options for Azure AD authentication in a .NET application. It demonstrates setting up client credentials, authority, and token cache options.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net462/PublicAPI.Unshipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nservices.Configure<ConfidentialClientApplicationOptions>(options =>\n{\n    Configuration.Bind(\"AzureAd\", options);\n\n    options.ClientSecret = Configuration[\"AzureAd:ClientSecret\"];\n    options.ClientCertificates = new List<X509Certificate2>\n    {\n        new X509Certificate2(Configuration[\"AzureAd:CertificateName\"])\n    };\n\n    options.Authority = $\"{Configuration[\"AzureAd:Instance\"]}{Configuration[\"AzureAd:TenantId\"]}\";\n});\n\nservices.AddMicrosoftIdentityWebAppAuthentication(Configuration, \"AzureAd\")\n    .EnableTokenAcquisitionToCallDownstreamApi()\n    .AddMicrosoftGraph(Configuration.GetSection(\"GraphBeta\"))\n    .AddInMemoryTokenCaches();\n```\n\n----------------------------------------\n\nTITLE: Code Analysis Attributes\nDESCRIPTION: Collection of attributes for null-state analysis and caller information. Provides compile-time null checking and method parameter documentation.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.Diagnostics/PublicAPI/net462/InternalAPI.Shipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nSystem.Diagnostics.CodeAnalysis.AllowNullAttribute\nSystem.Diagnostics.CodeAnalysis.DisallowNullAttribute\nSystem.Diagnostics.CodeAnalysis.NotNullAttribute\nSystem.Diagnostics.CodeAnalysis.MaybeNullAttribute\nSystem.Diagnostics.CodeAnalysis.MemberNotNullAttribute\n```\n\n----------------------------------------\n\nTITLE: Enabling Nullable Reference Types in C# Azure AD Project\nDESCRIPTION: C# directive that enables nullable reference type checking, requiring explicit null handling and improving type safety across the project scope.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net472/PublicAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n#nullable enable\n```\n\n----------------------------------------\n\nTITLE: GitHub Workflow Configuration for Microsoft Identity Web Compliance Testing\nDESCRIPTION: YAML configuration for a GitHub Actions workflow that runs CodeQL analysis on pull requests to validate compliance requirements. The workflow activates on pull requests to specific branches and sets up job environments with various parameters.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.Diagnostics/PublicAPI/net6.0/PublicAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: \"CodeQL\"\n\non:\n  push:\n    branches: [ main, dev, microsoft-identity-web-5-0 ]\n  pull_request:\n    branches: [ main, dev, microsoft-identity-web-5-0 ]\n    paths-ignore:\n      - \"**/*.md\"\n      - \"**/*.txt\"\n  schedule:\n    - cron: '45 21 * * 5'\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n\n    strategy:\n      fail-fast: false\n      matrix:\n        language: [ 'csharp' ]\n        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python' ]\n        # Learn more:\n        # https://docs.github.com/en/free-pro-team@latest/github/finding-security-vulnerabilities-and-errors-in-your-code/configuring-code-scanning#changing-the-languages-that-are-analyzed\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v2\n\n    # Initializes the CodeQL tools for scanning.\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v1\n      with:\n        languages: ${{ matrix.language }}\n        # If you wish to specify custom queries, you can do so here or in a config file.\n        # By default, queries listed here will override any specified in a config file.\n        # Prefix the list here with \"+\" to use these queries and those in the config file.\n        # queries: ./path/to/local/query, your-org/your-repo/queries@main\n\n    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).\n    # If this step fails, then you should remove it and run the build manually (see below)\n    - name: Autobuild\n      uses: github/codeql-action/autobuild@v1\n\n    # ℹ️ Command-line programs to run using the OS shell.\n    # 📚 https://git.io/JvXDl\n\n    # ✏️ If the Autobuild fails above, remove it and uncomment the following three lines\n    #    and modify them (or add more) to build your code if your project\n    #    uses a compiled language\n\n    #- run: |\n    #   make bootstrap\n    #   make release\n\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v1\n```\n\n----------------------------------------\n\nTITLE: EventId Declarations for DownstreamApi Logging Events - Microsoft Identity Web - C#\nDESCRIPTION: Static readonly EventId fields for uniquely identifying HTTP request error events and unauthenticated API calls in logging output. These fields facilitate structured and filtered logging scenarios when leveraging Microsoft.Extensions.Logging. Values are used exclusively for streamlined telemetry.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.DownstreamApi/PublicAPI/net9.0/InternalAPI.Shipped.txt#2025-04-23_snippet_19\n\nLANGUAGE: csharp\nCODE:\n```\nstatic readonly Microsoft.Identity.Web.DownstreamApiLoggingEventId.HttpRequestError -> Microsoft.Extensions.Logging.EventId\n```\n\nLANGUAGE: csharp\nCODE:\n```\nstatic readonly Microsoft.Identity.Web.DownstreamApiLoggingEventId.UnauthenticatedApiCall -> Microsoft.Extensions.Logging.EventId\n```\n\n----------------------------------------\n\nTITLE: Creating ASP.NET Core Web API with Azure AD Authentication\nDESCRIPTION: Command to create an ASP.NET Core web API with Microsoft Identity Web integration for Azure AD authentication. The command includes parameters for tenant ID, domain, and client ID.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net7.0/PublicAPI.Unshipped.txt#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ndotnet new webapi2 --auth SingleOrg --tenant-id \"[Enter the tenant ID here to use from the Azure portal, e.g. 'contoso.onmicrosoft.com' or 'da41245a5-11b3-996c-00a8-4d99re19f292']\" --client-id \"[Enter the Client (application) ID of the app registration from the Azure portal, e.g. ba74781c2-53c2-442a-97c2-3d60re42f403]\" --domain [Enter your domain name, e.g. contoso.onmicrosoft.com] --calls-graph\n```\n\n----------------------------------------\n\nTITLE: Scaffolding ASP.NET Core MVC App with Azure AD Authentication from CLI (Shell)\nDESCRIPTION: This shell command sequence demonstrates creation of a new ASP.NET Core MVC application with Azure AD (SingleOrg) authentication using the dotnet CLI. The process includes making the project directory, navigating into it, and running dotnet new with authentication, client ID, and tenant ID parameters. Prerequisites are an installed .NET SDK and accurate App Registration values for client-id and tenant-id. The inputs are placeholders which must be replaced with the App ID and Directory/Tenant ID from Azure. The scaffolded project includes default integration with Azure AD authentication middleware.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/tests/DevApps/B2CWebAppCallsWebApi/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmd TodoListClient\\ncd TodoListClient\\ndotnet new mvc --auth SingleOrg --client-id <Enter_the_Application_Id_here> --tenant-id <yourTenantId>\n```\n\n----------------------------------------\n\nTITLE: Defining Diagnostic Helper Classes in C#\nDESCRIPTION: Defines IdHelper and OsHelper classes for diagnostics in Microsoft Identity Web. These classes provide methods for creating telemetry info, getting IdWeb version, and checking the operating system platform.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.Diagnostics/PublicAPI/netstandard2.0/InternalAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.Diagnostics.IdHelper\nMicrosoft.Identity.Web.Diagnostics.OsHelper\nMicrosoft.Identity.Web.Diagnostics.OsHelper.OsHelper() -> void\nstatic Microsoft.Identity.Web.Diagnostics.IdHelper.CreateTelemetryInfo() -> string!\nstatic Microsoft.Identity.Web.Diagnostics.IdHelper.GetIdWebVersion() -> string!\nstatic Microsoft.Identity.Web.Diagnostics.OsHelper.IsLinuxPlatform() -> bool\nstatic Microsoft.Identity.Web.Diagnostics.OsHelper.IsMacPlatform() -> bool\nstatic Microsoft.Identity.Web.Diagnostics.OsHelper.IsWindowsPlatform() -> bool\n```\n\n----------------------------------------\n\nTITLE: Configuring Microsoft.Identity.Web with Additional Options\nDESCRIPTION: Demonstrates a more comprehensive configuration of Microsoft.Identity.Web with additional options including token acquisition, claims challenges, and downstream web API integration.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net8.0/PublicAPI.Unshipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic void ConfigureServices(IServiceCollection services)\n{\n    services.AddMicrosoftIdentityWebApp(Configuration, \"AzureAd\", \"Bearer\")\n        .EnableTokenAcquisitionToCallDownstreamApi()\n        .AddDownstreamWebApi(\"DownstreamApi\", Configuration.GetSection(\"DownstreamApi\"))\n        .AddInMemoryTokenCaches();\n\n    services.AddRazorPages().AddMvcOptions(options =>\n    {\n        var policy = new AuthorizationPolicyBuilder()\n            .RequireAuthenticatedUser()\n            .Build();\n        options.Filters.Add(new AuthorizeFilter(policy));\n    }).AddMicrosoftIdentityUI();\n}\n```\n\n----------------------------------------\n\nTITLE: Putting for User with DownstreamApi - Microsoft Identity Web - C#\nDESCRIPTION: These put operations send HTTP PUT requests on behalf of an authenticated user, offering overloads to include custom serialization. Essential parameters include an optional user ClaimsPrincipal, downstream API configuration, and possible serialization type info objects. Outputs are async Task types (with or without result) depending on the method signature, complying with modern async patterns.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.DownstreamApi/PublicAPI/net9.0/InternalAPI.Shipped.txt#2025-04-23_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Identity.Web.DownstreamApi.PutForUserAsync<TInput, TOutput>(string? serviceName, TInput input, System.Action<Microsoft.Identity.Abstractions.DownstreamApiOptionsReadOnlyHttpMethod!>? downstreamApiOptionsOverride = null, System.Security.Claims.ClaimsPrincipal? user = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TOutput?>!\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Identity.Web.DownstreamApi.PutForUserAsync<TInput, TOutput>(string? serviceName, TInput input, System.Text.Json.Serialization.Metadata.JsonTypeInfo<TInput>! inputJsonTypeInfo, System.Text.Json.Serialization.Metadata.JsonTypeInfo<TOutput!>! outputJsonTypeInfo, System.Action<Microsoft.Identity.Abstractions.DownstreamApiOptionsReadOnlyHttpMethod!>? downstreamApiOptionsOverride = null, System.Security.Claims.ClaimsPrincipal? user = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TOutput?>!\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Identity.Web.DownstreamApi.PutForUserAsync<TInput>(string? serviceName, TInput input, System.Action<Microsoft.Identity.Abstractions.DownstreamApiOptionsReadOnlyHttpMethod!>? downstreamApiOptionsOverride = null, System.Security.Claims.ClaimsPrincipal? user = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Identity.Web.DownstreamApi.PutForUserAsync<TInput>(string? serviceName, TInput input, System.Text.Json.Serialization.Metadata.JsonTypeInfo<TInput>! inputJsonTypeInfo, System.Action<Microsoft.Identity.Abstractions.DownstreamApiOptionsReadOnlyHttpMethod!>? downstreamApiOptionsOverride = null, System.Security.Claims.ClaimsPrincipal? user = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!\n```\n\n----------------------------------------\n\nTITLE: Updating TodoListClient Configuration for Azure Web Sites Deployment\nDESCRIPTION: Instructions for updating the 'TodoListBaseAddress' in the client application's appsettings.json file to point to the published service URL.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/tests/DevApps/B2CWebAppCallsWebApi/README.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"todo:TodoListBaseAddress\": \"https://TodoListService-aspnetcore-webapi-contoso.azurewebsites.net\"\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Internal Cache Types and Adapters - Microsoft.Identity.Web - C#\nDESCRIPTION: References internal static and readonly types for cache providers, distributed and in-memory cache adapters, and utility collections, including concurrent dictionaries and logging mechanisms. These are the injector points and underlying state holders for the higher-level token cache logic and service provider actions. They act as dependencies and state containers within the cache provider architecture.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.TokenCache/InternalAPI.Shipped.txt#2025-04-23_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Identity.Web.LoggingEventId\nMicrosoft.Identity.Web.TokenCacheErrorMessage\nMicrosoft.Identity.Web.TokenCacheProviders.MeasureDurationResult\nMicrosoft.Identity.Web.TokenCacheProviders.MeasureDurationResult<TResult>\nMicrosoft.Identity.Web.TokenCacheProviders.Utility\nreadonly Microsoft.Identity.Web.TokenCacheProviders.Distributed.MsalDistributedTokenCacheAdapter._distributedCache -> Microsoft.Extensions.Caching.Distributed.IDistributedCache!\nreadonly Microsoft.Identity.Web.TokenCacheProviders.Distributed.MsalDistributedTokenCacheAdapter._memoryCache -> Microsoft.Extensions.Caching.Memory.MemoryCache?\nstatic readonly Microsoft.Identity.Web.TokenCacheExtensions.s_serviceProviderFromAction -> System.Collections.Concurrent.ConcurrentDictionary<System.Reflection.MethodInfo!, System.IServiceProvider!>!\nstatic readonly Microsoft.Identity.Web.TokenCacheProviders.Utility.s_watch -> System.Diagnostics.Stopwatch!\n```\n\n----------------------------------------\n\nTITLE: Parameter Validation Methods\nDESCRIPTION: Generic validation methods for checking null, empty collections, and buffer sizes with automatic exception throwing\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.Diagnostics/PublicAPI/net6.0/InternalAPI.Shipped.txt#2025-04-23_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.Throws.IfNull<T>(T argument, string! paramName = \"\") -> T\nstatic Microsoft.Identity.Web.Throws.IfNullOrEmpty(string? argument, string! paramName = \"\") -> string!\nstatic Microsoft.Identity.Web.Throws.IfBufferTooSmall(int bufferSize, int requiredSize, string! paramName = \"\") -> void\nstatic Microsoft.Identity.Web.Throws.IfNullOrEmpty<T>(System.Collections.Generic.ICollection<T>? argument, string! paramName = \"\") -> System.Collections.Generic.ICollection<T>!\n```\n\n----------------------------------------\n\nTITLE: Defining GraphAuthenticationOptions Class in C#\nDESCRIPTION: Defines the GraphAuthenticationOptions class with a BaseUrl property and a constructor.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.GraphServiceClient/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.GraphAuthenticationOptions\nMicrosoft.Identity.Web.GraphAuthenticationOptions.BaseUrl.get -> string!\nMicrosoft.Identity.Web.GraphAuthenticationOptions.GraphAuthenticationOptions() -> void\n```\n\n----------------------------------------\n\nTITLE: Defining CallerArgumentExpressionAttribute in C#\nDESCRIPTION: Defines the CallerArgumentExpressionAttribute from System.Runtime.CompilerServices namespace. This attribute is used to obtain the string representation of the argument passed to a parameter.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.Diagnostics/PublicAPI/netstandard2.0/InternalAPI.Shipped.txt#2025-04-23_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nSystem.Runtime.CompilerServices.CallerArgumentExpressionAttribute\nSystem.Runtime.CompilerServices.CallerArgumentExpressionAttribute.CallerArgumentExpressionAttribute(string! parameterName) -> void\nSystem.Runtime.CompilerServices.CallerArgumentExpressionAttribute.ParameterName.get -> string!\n```\n\n----------------------------------------\n\nTITLE: Creating Protected Blazor Page with Authorization\nDESCRIPTION: Example of a protected Blazor page that requires authorization. This page demonstrates how to use the Authorize attribute to protect content and display user information from claims.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.Diagnostics/PublicAPI/net462/InternalAPI.Unshipped.txt#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n@page \"/fetchdata\"\n@using Microsoft.AspNetCore.Authorization\n@using Microsoft.AspNetCore.Components.Authorization\n@inject AuthenticationStateProvider AuthenticationStateProvider\n@attribute [Authorize]\n\n<h1>Weather forecast</h1>\n\n<p>This component demonstrates fetching data from a service.</p>\n\n<AuthorizeView>\n    <Authorized>\n        <h4>Hello @context.User.Identity.Name!</h4>\n        <p>You can only see this content if you're authenticated.</p>\n    </Authorized>\n    <NotAuthorized>\n        <h2>Please log in.</h2>\n    </NotAuthorized>\n</AuthorizeView>\n```\n\n----------------------------------------\n\nTITLE: Displaying Microsoft.Identity.Web Library Description in Markdown\nDESCRIPTION: This markdown snippet provides a concise description of the Microsoft.Identity.Web library, including its purpose and primary use cases. It links to the NuGet package and the Microsoft identity platform documentation.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/docfx_project/articles/intro.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Microsoft.Identity.Web\n\n[Microsoft Identity Web](https://www.nuget.org/packages/Microsoft.Identity.Web) is a library which contains a set of reusable classes that you can use to integrate authentication and authorization with the [Microsoft identity platform](https://learn.microsoft.com/azure/active-directory/develop/) to services written in .NET: on top of ASP.NET Core, ASP.NET OWIN, or just plain .NET framework or .NET Core.\n```\n\n----------------------------------------\n\nTITLE: Declaring AccessDeniedModel Class in C#\nDESCRIPTION: Declares the `AccessDeniedModel` Razor Page model class within the `Microsoft.Identity.Web.UI.Areas.MicrosoftIdentity.Pages.Account` namespace. This page model is used for the view that is displayed when a user attempts to access a resource they are not authorized for.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.UI/PublicAPI.Shipped.txt#2025-04-23_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Identity.Web.UI.Areas.MicrosoftIdentity.Pages.Account.AccessDeniedModel\n```\n\n----------------------------------------\n\nTITLE: Declaring TokenAcquirerAppTokenCredential and TokenAcquirerTokenCredential classes in C#\nDESCRIPTION: Declarations of TokenAcquirerAppTokenCredential and TokenAcquirerTokenCredential classes, both of which implement token acquisition functionality. These classes take an ITokenAcquirer in their constructors and override GetToken and GetTokenAsync methods to retrieve Azure.Core.AccessToken objects.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.Azure/PublicAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n#nullable enable\nMicrosoft.Identity.Web.TokenAcquirerAppTokenCredential\nMicrosoft.Identity.Web.TokenAcquirerAppTokenCredential.TokenAcquirerAppTokenCredential(Microsoft.Identity.Abstractions.ITokenAcquirer! tokenAcquirer) -> void\nMicrosoft.Identity.Web.TokenAcquirerTokenCredential\nMicrosoft.Identity.Web.TokenAcquirerTokenCredential.TokenAcquirerTokenCredential(Microsoft.Identity.Abstractions.ITokenAcquirer! tokenAcquirer) -> void\noverride Microsoft.Identity.Web.TokenAcquirerAppTokenCredential.GetToken(Azure.Core.TokenRequestContext requestContext, System.Threading.CancellationToken cancellationToken) -> Azure.Core.AccessToken\noverride Microsoft.Identity.Web.TokenAcquirerAppTokenCredential.GetTokenAsync(Azure.Core.TokenRequestContext requestContext, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<Azure.Core.AccessToken>\noverride Microsoft.Identity.Web.TokenAcquirerTokenCredential.GetToken(Azure.Core.TokenRequestContext requestContext, System.Threading.CancellationToken cancellationToken) -> Azure.Core.AccessToken\noverride Microsoft.Identity.Web.TokenAcquirerTokenCredential.GetTokenAsync(Azure.Core.TokenRequestContext requestContext, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<Azure.Core.AccessToken>\n```\n\n----------------------------------------\n\nTITLE: Configuring Microsoft Identity Web Options in JSON\nDESCRIPTION: This JSON snippet defines configuration options for Microsoft Identity Web, including authentication settings, token validation parameters, and client credentials for an Azure AD application.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.DownstreamApi/PublicAPI/net7.0/PublicAPI.Unshipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"AzureAd\": {\n    \"Instance\": \"https://login.microsoftonline.com/\",\n    \"Domain\": \"qualified.domain.name\",\n    \"TenantId\": \"22222222-2222-2222-2222-222222222222\",\n    \"ClientId\": \"11111111-1111-1111-11111111111111111\",\n    \"CallbackPath\": \"/signin-oidc\",\n    \"SignedOutCallbackPath \": \"/signout-callback-oidc\",\n    \"ClientSecret\": \"secret-from-app-registration\",\n    \"ClientCertificates\": [\n    ],\n    \"SecretsId\": \"my-key-vault-secrets-identifier\"\n  },\n  \"MicrosoftIdentityOptions\": {\n    \"CallbackPath\": \"/signin-oidc\",\n    \"SignedOutCallbackPath\": \"/signout-callback-oidc\",\n    \"SignInScheme\": \"Cookies\",\n    \"Instance\": \"https://login.microsoftonline.com/\",\n    \"Domain\": \"qualified.domain.name\",\n    \"TenantId\": \"22222222-2222-2222-2222-222222222222\",\n    \"ClientId\": \"11111111-1111-1111-11111111111111111\",\n    \"ClientSecret\": \"secret-from-app-registration\",\n    \"ClientCertificates\": [\n    ],\n    \"SecretsId\": \"my-key-vault-secrets-identifier\",\n    \"ValidateAuthority\": true,\n    \"AllowWebApiToBeAuthorizedByACL\": false,\n    \"ErrorPath\": \"/Home/Error\",\n    \"EnablePiiLogging\": false,\n    \"TokenValidationParameters\": {\n      \"ValidateIssuer\": true,\n      \"ValidateAudience\": true,\n      \"ValidateLifetime\": true,\n      \"ValidateIssuerSigningKey\": true,\n      \"ValidAudiences\": [\n        \"api://11111111-1111-1111-11111111111111111\"\n      ],\n      \"ValidIssuers\": [\n        \"https://login.microsoftonline.com/22222222-2222-2222-2222-222222222222/v2.0\"\n      ],\n      \"ClockSkew\": \"00:05:00\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Delegates in Microsoft.Identity.Web (C#)\nDESCRIPTION: Defines delegate types used within the Microsoft Identity Web library, likely for event handling or callbacks related to token acquisition.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.TokenAcquisition/PublicAPI/net462/PublicAPI.Shipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Identity.Web.BeforeTokenAcquisitionForApp\nMicrosoft.Identity.Web.BeforeTokenAcquisitionForTestUser\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure AD B2C Authentication Policies in JSON\nDESCRIPTION: Configuration settings that define the Azure AD B2C policies and callback paths for authentication operations. Includes settings for sign-out callback path, sign-up/sign-in policy, password reset policy, and profile editing policy.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/tools/app-provisioning-tool/app-provisioning-lib/Resources/Policies.txt#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"SignedOutCallbackPath\": \"/signout/B2C_1_susi\",\n    \"SignUpSignInPolicyId\": \"b2c_1_susi\",\n    \"ResetPasswordPolicyId\": \"b2c_1_reset\",\n    \"EditProfilePolicyId\": \"b2c_1_edit_profile\",\n```\n\n----------------------------------------\n\nTITLE: Configuring B2C Web API Settings in appsettings.json\nDESCRIPTION: JSON configuration for downstream API settings in B2C authentication scenario, defining the base URL and B2C-specific scopes.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/TESTING.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"DownstreamApi\": {\n    \"BaseUrl\": \"https://localhost:44332/WeatherForecast\",\n    \"Scopes\": \"https://fabrikamb2c.onmicrosoft.com/tasks/access_as_user\"\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Microsoft Identity Web API Authentication with Options Configuration\nDESCRIPTION: This snippet demonstrates advanced configuration of Microsoft Identity Web API authentication using a configuration action. It allows for fine-grained control over authentication options through a lambda expression.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.Diagnostics/PublicAPI/net9.0/PublicAPI.Shipped.txt#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddMicrosoftIdentityWebApiAuthentication(Configuration, configSectionName: \"AzureAd\", configureMicrosoftIdentityOptions: options =>\n{\n    // Configuration customization goes here\n});\n```\n\n----------------------------------------\n\nTITLE: OS Platform Detection Methods in C#\nDESCRIPTION: Static methods for detecting the operating system platform. Includes checks for Windows, Linux and Mac platforms.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.Diagnostics/PublicAPI/net8.0/InternalAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.Diagnostics.OsHelper.IsWindowsPlatform() -> bool\nstatic Microsoft.Identity.Web.Diagnostics.OsHelper.IsLinuxPlatform() -> bool\nstatic Microsoft.Identity.Web.Diagnostics.OsHelper.IsMacPlatform() -> bool\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication in Blazor App.razor\nDESCRIPTION: Configuration for App.razor that implements authentication in a Blazor Server application. It shows how to set up the router with authentication and provide fallback content for unauthorized access.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.Diagnostics/PublicAPI/net462/InternalAPI.Unshipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n<CascadingAuthenticationState>\n    <Router AppAssembly=\"@typeof(Program).Assembly\">\n        <Found Context=\"routeData\">\n            <AuthorizeRouteView RouteData=\"@routeData\" DefaultLayout=\"@typeof(MainLayout)\">\n                <NotAuthorized>\n                    @if (!context.User.Identity.IsAuthenticated)\n                    {\n                        <RedirectToLogin />\n                    }\n                    else\n                    {\n                        <p>You are not authorized to access this resource.</p>\n                    }\n                </NotAuthorized>\n            </AuthorizeRouteView>\n        </Found>\n        <NotFound>\n            <LayoutView Layout=\"@typeof(MainLayout)\">\n                <p>Sorry, there's nothing at this address.</p>\n            </LayoutView>\n        </NotFound>\n    </Router>\n</CascadingAuthenticationState>\n```\n\n----------------------------------------\n\nTITLE: Setting PowerShell Execution Policy for Current Process (Force)\nDESCRIPTION: Sets the PowerShell execution policy to 'RemoteSigned' for the current process only, using the '-Force' parameter to bypass confirmation prompts. This allows local scripts like 'Configure.ps1' to run within the current session, which is a common prerequisite.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/tests/DevApps/WebAppCallsWebApiCallsGraph/AppCreationScripts/AppCreationScripts.md#2025-04-23_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope Process -Force\n```\n\n----------------------------------------\n\nTITLE: Initializing SignedOutModel in C#\nDESCRIPTION: Defines the default constructor for the `SignedOutModel` Razor Page model. This performs basic initialization for the page model associated with the post-sign-out confirmation page.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.UI/PublicAPI.Shipped.txt#2025-04-23_snippet_20\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Identity.Web.UI.Areas.MicrosoftIdentity.Pages.Account.SignedOutModel.SignedOutModel() -> void\n```\n\n----------------------------------------\n\nTITLE: Defining Configuration in OwinTokenAcquirerFactory (C#)\nDESCRIPTION: This overridden method within OwinTokenAcquirerFactory likely defines how application configuration is sourced or built, integrating with the Microsoft.Extensions.Configuration system. It returns the configuration section name used.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.OWIN/PublicAPI.Shipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\noverride Microsoft.Identity.Web.OWIN.OwinTokenAcquirerFactory.DefineConfiguration(Microsoft.Extensions.Configuration.IConfigurationBuilder! builder) -> string!\n```\n\n----------------------------------------\n\nTITLE: Enabling Nullable Context in C#\nDESCRIPTION: This preprocessor directive enables the nullable reference types feature for the subsequent C# code, helping to prevent null reference exceptions by requiring explicit handling of potential null values.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.OWIN/PublicAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n#nullable enable\n```\n\n----------------------------------------\n\nTITLE: OpenID Connect Middleware Class Definition\nDESCRIPTION: Class signature and constructor for OpenIdConnectMiddlewareDiagnostics which handles OpenID Connect authentication logging and events\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net6.0/PublicAPI.Shipped.txt#2025-04-23_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.Resource.OpenIdConnectMiddlewareDiagnostics.OpenIdConnectMiddlewareDiagnostics(Microsoft.Extensions.Logging.ILogger<Microsoft.Identity.Web.Resource.OpenIdConnectMiddlewareDiagnostics!>! logger) -> void\n```\n\n----------------------------------------\n\nTITLE: Setting PowerShell Execution Policy for Script Execution\nDESCRIPTION: Adjusts the PowerShell execution policy to 'RemoteSigned' for the current process scope, enabling the execution of locally stored PowerShell scripts without requiring them to be digitally signed. This step is necessary to run the app creation and cleanup scripts provided in the project.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/tests/DevApps/WebAppCallsWebApiCallsGraph/AppCreationScripts/AppCreationScripts.md#2025-04-23_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope Process\n```\n\n----------------------------------------\n\nTITLE: Creating ASP.NET Core Web App with Azure AD B2C Authentication\nDESCRIPTION: Command to create an ASP.NET Core web application with Microsoft Identity Web integration for Azure AD B2C authentication. The command includes parameters for instance, tenant ID, client ID, and callback path.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net7.0/PublicAPI.Unshipped.txt#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndotnet new webapp2 --auth SingleOrg --calls-graph --client-id \"[Enter the Client (application) ID of the app registration from the Azure portal, e.g. ba74781c2-53c2-442a-97c2-3d60re42f403]\" --domain [Enter your domain name, e.g. contoso.onmicrosoft.com] --tenant-id \"[Enter the tenant ID here to use from the Azure portal, e.g. 'contoso.onmicrosoft.com' or 'da41245a5-11b3-996c-00a8-4d99re19f292']\" --callback-path \"/signin-oidc\"\n```\n\n----------------------------------------\n\nTITLE: Getting Name Property in OidcIdpSignedAssertionLoader (C#)\nDESCRIPTION: Defines the getter signature for the Name property of the OidcIdpSignedAssertionLoader class. This property returns a string representing the name or identifier of the credential loader.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.OidcFIC/PublicAPI/net472/InternalAPI.Shipped.txt#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Identity.Web.OidcFic.OidcIdpSignedAssertionLoader.Name.get -> string!\n```\n\n----------------------------------------\n\nTITLE: Adding Authorization Policies in ASP.NET Core for Azure AD Roles\nDESCRIPTION: This snippet adds authorization policies to the application. It creates policies for different Azure AD roles, allowing for role-based access control in the application.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.Diagnostics/PublicAPI/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nbuilder.Services.AddAuthorization(options =>\n{\n    options.AddPolicy(\"RequireAdministratorRole\", policy => policy.RequireRole(\"Administrator\"));\n    options.AddPolicy(\"RequireContributorRole\", policy => policy.RequireRole(\"Contributor\"));\n    options.AddPolicy(\"RequireReaderRole\", policy => policy.RequireRole(\"Reader\"));\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Microsoft Identity Web in ASP.NET Core Startup\nDESCRIPTION: This code snippet shows how to configure Microsoft Identity Web services in the ConfigureServices method of an ASP.NET Core Startup class. It adds authentication and sets up the OpenIdConnect options for Azure AD integration.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.Diagnostics/PublicAPI/net472/PublicAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic void ConfigureServices(IServiceCollection services)\n{\n    services.AddAuthentication(OpenIdConnectDefaults.AuthenticationScheme)\n        .AddMicrosoftIdentityWebApp(Configuration.GetSection(\"AzureAd\"));\n\n    services.AddControllersWithViews(options =>\n    {\n        var policy = new AuthorizationPolicyBuilder()\n            .RequireAuthenticatedUser()\n            .Build();\n        options.Filters.Add(new AuthorizeFilter(policy));\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AccessDeniedModel in C#\nDESCRIPTION: Defines the default constructor for the `AccessDeniedModel` Razor Page model. This constructor likely performs basic initialization for the page model.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.UI/PublicAPI.Shipped.txt#2025-04-23_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Identity.Web.UI.Areas.MicrosoftIdentity.Pages.Account.AccessDeniedModel.AccessDeniedModel() -> void\n```\n\n----------------------------------------\n\nTITLE: Installing AzureAD PowerShell Module (Administrator)\nDESCRIPTION: Installs the AzureAD PowerShell module globally for all users on the machine. This requires running PowerShell with administrator privileges. The module provides cmdlets needed by the `Configure.ps1` and `Cleanup.ps1` scripts to interact with Azure Active Directory for app registration and management.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/tests/DevApps/WebAppCallsWebApiCallsGraph/AppCreationScripts/AppCreationScripts.md#2025-04-23_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nInstall-Module AzureAD\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure AD Authentication in ASP.NET Core Startup\nDESCRIPTION: Demonstrates how to configure Azure AD authentication in the ConfigureServices method of an ASP.NET Core application's Startup class using Microsoft Identity Web.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.GraphServiceClient/PublicAPI/net472/InternalAPI.Unshipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic void ConfigureServices(IServiceCollection services)\n{\n    services.AddAuthentication(OpenIdConnectDefaults.AuthenticationScheme)\n        .AddMicrosoftIdentityWebApp(Configuration.GetSection(\"AzureAd\"));\n\n    services.AddControllersWithViews(options =>\n    {\n        var policy = new AuthorizationPolicyBuilder()\n            .RequireAuthenticatedUser()\n            .Build();\n        options.Filters.Add(new AuthorizeFilter(policy));\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Microsoft.Identity.Web Library Use Cases in Markdown\nDESCRIPTION: This markdown snippet enumerates the specific usage scenarios for the Microsoft.Identity.Web library, including web applications, protected web APIs, and daemon applications. Each use case is linked to its respective documentation in the project's wiki.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/docfx_project/articles/intro.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nThis library is for specific usage with:\n\n- [Web applications](https://github.com/AzureAD/microsoft-identity-web/wiki/web-apps), which sign in users and, optionally, call web APIs\n- [Protected web APIs](https://github.com/AzureAD/microsoft-identity-web/wiki/web-apis), which optionally call protected downstream web APIs\n- [Daemon applications](https://github.com/AzureAD/microsoft-identity-web/wiki/daemon-apps) calling protected downstream web APIs\n```\n\n----------------------------------------\n\nTITLE: Acquiring Tokens Using ITokenAcquisition in Blazor\nDESCRIPTION: Example of using ITokenAcquisition service to acquire tokens for calling protected APIs. This demonstrates how to inject and use the token acquisition service to obtain access tokens with specific scopes.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.Diagnostics/PublicAPI/net462/InternalAPI.Unshipped.txt#2025-04-23_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n@using Microsoft.Identity.Web\n@inject ITokenAcquisition TokenAcquisition\n\n@code {\n    private string _accessToken;\n    private string[] scopes = new string[] { \"api://MyApi/access_as_user\" };\n\n    protected override async Task OnInitializedAsync()\n    {\n        try\n        {\n            _accessToken = await TokenAcquisition.GetAccessTokenForUserAsync(scopes);\n            // Use the token to call a protected API\n        }\n        catch (Exception ex)\n        {\n            // Handle the exception\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MIT License Terms - Markdown\nDESCRIPTION: This snippet provides the unaltered text for the MIT License in Markdown format. It is intended for inclusion at the top level of a project repository to inform users of their rights and obligations regarding the source code. The content is purely textual and requires no dependencies; it should be located in a LICENSE or README file. There are no configurable parameters or programmatic outputs.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/tests/DevApps/AjaxCallActionsWithDynamicConsent/wwwroot/lib/jquery-validation/LICENSE.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# The MIT License (MIT)\n=====================\n\nCopyright J\\u00f6rn Zaefferer\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \\\"Software\\\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n```\n\n----------------------------------------\n\nTITLE: Creating ASP.NET Core Web App with Azure AD Authentication\nDESCRIPTION: Command to create an ASP.NET Core web application with Microsoft Identity Web integration for Azure AD authentication. The command includes parameters for tenant ID, client ID, and callback path.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net7.0/PublicAPI.Unshipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet new webapp2 --auth SingleOrg --tenant-id \"[Enter the tenant ID here to use from the Azure portal, e.g. 'contoso.onmicrosoft.com' or 'da41245a5-11b3-996c-00a8-4d99re19f292']\" --client-id \"[Enter the Client (application) ID of the app registration from the Azure portal, e.g. ba74781c2-53c2-442a-97c2-3d60re42f403]\" --called-api-url \"[url of the called API]\" --called-api-scopes [Add the scopes for the called API, separated by spaces, e.g. api://11111111-1111-1111-1111-111111111111/access_as_user api://22222222-2222-2222-2222-222222222222/access_as_user]\" --domain [Enter your domain name, e.g. contoso.onmicrosoft.com] --callback-path \"/signin-oidc\"\n```\n\n----------------------------------------\n\nTITLE: Using Open Iconic Standalone\nDESCRIPTION: This example demonstrates how to use an Open Iconic icon without a framework. It shows the HTML structure for displaying an icon using the icon font and data attributes.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/ProjectTemplates/templates/BlazorServerWeb-CSharp/wwwroot/css/open-iconic/README.md#2025-04-23_snippet_7\n\nLANGUAGE: HTML\nCODE:\n```\n<span class=\"oi\" data-glyph=\"icon-name\" title=\"icon name\" aria-hidden=\"true\"></span>\n```\n\n----------------------------------------\n\nTITLE: Defining Certificate Constants in C#\nDESCRIPTION: Constants used for certificate handling in Microsoft Identity Web, including media type for PKCS12 certificates and storage path for personal user certificates.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.Certificate/InternalAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.Identity.Web.CertificateConstants.MediaTypePksc12 = \"application/x-pkcs12\" -> string!\nconst Microsoft.Identity.Web.CertificateConstants.PersonalUserCertificateStorePath = \"CurrentUser/My\" -> string!\n```\n\n----------------------------------------\n\nTITLE: Styling SVG Icon Size with CSS\nDESCRIPTION: CSS snippet for setting the dimensions of SVG icons to ensure proper display. All Open Iconic icons use a square format.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/ProjectTemplates/templates/ComponentsWebAssembly-CSharp/Client/wwwroot/css/open-iconic/README.md#2025-04-23_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.icon {\n  width: 16px;\n  height: 16px;\n}\n```\n\n----------------------------------------\n\nTITLE: Using TokenAcquisition Service to Get Access Tokens\nDESCRIPTION: Shows how to inject and use the ITokenAcquisition service to obtain access tokens for calling protected APIs. The example demonstrates acquiring tokens with specified scopes.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net8.0/PublicAPI.Unshipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyApiController : Controller\n{\n    private readonly ITokenAcquisition _tokenAcquisition;\n\n    public MyApiController(ITokenAcquisition tokenAcquisition)\n    {\n        _tokenAcquisition = tokenAcquisition;\n    }\n\n    [Authorize]\n    public async Task<IActionResult> CallApi()\n    {\n        string[] scopes = new string[] { \"api://myapi/access_as_user\" };\n        string accessToken = await _tokenAcquisition.GetAccessTokenForUserAsync(scopes);\n\n        // Use the access token to call an API\n        // ...\n\n        return View();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Main Script Execution for Version Token Expansion in PowerShell\nDESCRIPTION: The main execution block of the PowerShell script that defines file paths, retrieves the Microsoft Identity Web version, and expands version tokens in the settings file. It handles both project and package versioning.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.Diagnostics/PublicAPI/net472/PublicAPI.Unshipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n$ErrorActionPreference = \"Stop\"\n\n$scriptPath = Split-Path -Parent $MyInvocation.MyCommand.Path\n$repoRoot = (Get-Item $scriptPath).Parent.Parent.FullName\n$projectPath = Join-Path $repoRoot \"src\\Microsoft.Identity.Web\\Microsoft.Identity.Web.csproj\"\n$settingsPath = Join-Path $repoRoot \"NuGet.config\"\n$fallbackVersion = \"1.0.0\"\n\n$version = Get-MicrosoftIdentityWebVersion -projectPath $projectPath -fallbackVersion $fallbackVersion\nExpand-VersionTokens -settingsPath $settingsPath -version $version\n\nWrite-Host \"Version token expansion complete.\"\n```\n\n----------------------------------------\n\nTITLE: Registering TodoList Service in Web API\nDESCRIPTION: This snippet demonstrates how to register the TodoList service implementation in the Web API's Startup.cs ConfigureServices method, making the service available for dependency injection in controllers.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/tests/DevApps/WebAppCallsWebApiCallsGraph/README-incremental-instructions.md#2025-04-23_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\n// Add APIs\nservices.AddTodoListService(Configuration);\n```\n\n----------------------------------------\n\nTITLE: Expanding Version Tokens in Settings File with PowerShell\nDESCRIPTION: This PowerShell snippet replaces version tokens in a settings file with actual version numbers. It reads the file content, performs string replacements for Microsoft Identity Web version tokens, and writes the updated content back to the file.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.Diagnostics/PublicAPI/net472/PublicAPI.Unshipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nfunction Expand-VersionTokens([string]$settingsPath, [string]$version) {\n    if (!(Test-Path $settingsPath)) {\n        Write-Error \"Settings file '$settingsPath' not found.\"\n        exit 1\n    }\n\n    $content = Get-Content -Path $settingsPath -Raw\n    $updatedContent = $content -replace '\\$\\(MicrosoftIdentityWebVersion\\)', $version\n    $updatedContent = $updatedContent -replace '\\$\\(MicrosoftIdentityWebSdkVersion\\)', $version\n\n    Set-Content -Path $settingsPath -Value $updatedContent -NoNewline\n    Write-Host \"Updated version tokens in '$settingsPath' to '$version'\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Scope Authorization with RequireScope in ASP.NET Core API\nDESCRIPTION: This code shows how to require a specific scope in an API endpoint using Microsoft.Identity.Web.Resource.RequireScope. It verifies that the access token contains the 'access_as_user' scope before allowing access to the resource.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.Diagnostics/PublicAPI/net472/InternalAPI.Unshipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Identity.Web.Resource;\n\n[HttpGet]\npublic IActionResult Get()\n{\n    HttpContext.VerifyUserHasAnyAcceptedScope(scopeRequiredByApi);\n    // ^\n    // RequireScope - Ensures that the token presented has at least one of the scopes\n    // passed as parameters\n    return new JsonResult(new {value=\"Private Data\"});\n}\n```\n\n----------------------------------------\n\nTITLE: Using Open Iconic Icons with Bootstrap\nDESCRIPTION: HTML markup for implementing Open Iconic icons within a Bootstrap project using the appropriate class naming convention.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/ProjectTemplates/templates/ComponentsWebAssembly-CSharp/Client/wwwroot/css/open-iconic/README.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<span class=\"oi oi-icon-name\" title=\"icon name\" aria-hidden=\"true\"></span>\n```\n\n----------------------------------------\n\nTITLE: Configuring Nullable Reference Types in C#\nDESCRIPTION: Directive that enables nullable reference type checking in C#, requiring explicit null handling for reference types. This helps catch potential null reference exceptions at compile time.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n#nullable enable\n```\n\n----------------------------------------\n\nTITLE: CertificateDescription Static Methods in C#\nDESCRIPTION: Provides static factory methods for creating CertificateDescription instances from various sources including base64 encoded values, existing certificates, Key Vault, file paths, and certificate stores.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.Certificate/PublicAPI.Shipped.txt#2025-04-23_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.CertificateDescription.FromBase64Encoded(string! base64EncodedValue) -> Microsoft.Identity.Web.CertificateDescription!\nstatic Microsoft.Identity.Web.CertificateDescription.FromBase64Encoded(string! base64EncodedValue, string! password) -> Microsoft.Identity.Web.CertificateDescription!\nstatic Microsoft.Identity.Web.CertificateDescription.FromCertificate(System.Security.Cryptography.X509Certificates.X509Certificate2! x509certificate2) -> Microsoft.Identity.Web.CertificateDescription!\nstatic Microsoft.Identity.Web.CertificateDescription.FromKeyVault(string! keyVaultUrl, string! keyVaultCertificateName) -> Microsoft.Identity.Web.CertificateDescription!\nstatic Microsoft.Identity.Web.CertificateDescription.FromPath(string! path, string? password = null) -> Microsoft.Identity.Web.CertificateDescription!\nstatic Microsoft.Identity.Web.CertificateDescription.FromStoreWithDistinguishedName(string! certificateDistinguishedName, System.Security.Cryptography.X509Certificates.StoreLocation certificateStoreLocation = System.Security.Cryptography.X509Certificates.StoreLocation.CurrentUser, System.Security.Cryptography.X509Certificates.StoreName certificateStoreName = System.Security.Cryptography.X509Certificates.StoreName.My) -> Microsoft.Identity.Web.CertificateDescription!\nstatic Microsoft.Identity.Web.CertificateDescription.FromStoreWithThumbprint(string! certificateThumbprint, System.Security.Cryptography.X509Certificates.StoreLocation certificateStoreLocation = System.Security.Cryptography.X509Certificates.StoreLocation.CurrentUser, System.Security.Cryptography.X509Certificates.StoreName certificateStoreName = System.Security.Cryptography.X509Certificates.StoreName.My) -> Microsoft.Identity.Web.CertificateDescription!\n```\n\n----------------------------------------\n\nTITLE: Navigating and Running App Configuration Script - PowerShell\nDESCRIPTION: Changes directory to 'AppCreationScripts' and runs 'Configure.ps1', which automates Azure AD app creation and configuration of sample application settings. This depends on the presence of 'Configure.ps1' in the specified folder. Expected input is the script location; outputs include configured AD apps and updated config files.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/tests/DevApps/blazorserver-calls-api/AppCreationScripts/AppCreationScripts.md#2025-04-23_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\ncd .\\AppCreationScripts\\\n.\\Configure.ps1\n```\n\n----------------------------------------\n\nTITLE: Including Open Iconic Foundation CSS\nDESCRIPTION: This snippet shows how to include the Open Iconic Foundation CSS file in an HTML document. It's used when integrating Open Iconic with Foundation.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/ProjectTemplates/templates/BlazorServerWeb-CSharp/wwwroot/css/open-iconic/README.md#2025-04-23_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<link href=\"/open-iconic/font/css/open-iconic-foundation.css\" rel=\"stylesheet\">\n```\n\n----------------------------------------\n\nTITLE: AppServicesAuthenticationTokenAcquisition Account Class Definition\nDESCRIPTION: Defines the Account class for AppServicesAuthenticationTokenAcquisition, which represents a user account with methods to access properties like Environment, HomeAccountId, and Username from a ClaimsPrincipal.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net7.0/InternalAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Identity.Web.AppServicesAuthenticationTokenAcquisition.Account\nMicrosoft.Identity.Web.AppServicesAuthenticationTokenAcquisition.Account.Account(System.Security.Claims.ClaimsPrincipal! claimsPrincipal) -> void\nMicrosoft.Identity.Web.AppServicesAuthenticationTokenAcquisition.Account.Environment.get -> string?\nMicrosoft.Identity.Web.AppServicesAuthenticationTokenAcquisition.Account.HomeAccountId.get -> Microsoft.Identity.Client.AccountId!\nMicrosoft.Identity.Web.AppServicesAuthenticationTokenAcquisition.Account.Username.get -> string!\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-Tenant Azure AD Authentication in .NET\nDESCRIPTION: Code example demonstrating how to configure Azure AD authentication for multi-tenant scenarios, allowing users from any Azure AD tenant to access the application. It explicitly sets the TenantId property to 'organizations'.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.Azure/PublicAPI.Unshipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)\n        .AddMicrosoftIdentityWebApi(options =>\n            {\n                Configuration.Bind(\"AzureAd\", options);\n                options.TenantId = \"organizations\";\n            },\n            options => { Configuration.Bind(\"AzureAd\", options); });\n```\n\n----------------------------------------\n\nTITLE: Cloning Sample Repository using Git (Shell)\nDESCRIPTION: Provides shell commands to clone the `active-directory-aspnetcore-webapp-openidconnect-v2` repository from GitHub using Git and then change the current directory to the specific sample folder (`4-WebApp-your-API\\4-1-Your-API`). This is the initial step required to get the sample code onto your local machine.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/tests/DevApps/B2CWebAppCallsWebApi/README-incremental-instructions.md#2025-04-23_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngit clone https://github.com/Azure-Samples/active-directory-aspnetcore-webapp-openidconnect-v2.git\n\ncd \"4-WebApp-your-API\\4-1-Your-API\"\n```\n\n----------------------------------------\n\nTITLE: Cleanup Existing Azure AD App Registrations - PowerShell\nDESCRIPTION: This PowerShell snippet runs a cleanup script designed to remove any previous Azure Active Directory application registrations that may conflict with the current setup. It is to be executed if the automation setup was already run before, ensuring a clean slate for subsequent application registration and configuration. Prerequisites include prior cloning of the repository and access to the appropriate AppCreationScripts subfolder. The script must be run in a PowerShell environment.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/tests/DevApps/WebAppCallsWebApiCallsGraph/README-incremental-instructions.md#2025-04-23_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n.\\AppCreationScripts\\Cleanup.ps1\n```\n\n----------------------------------------\n\nTITLE: Linking Default Open Iconic Webfont CSS (HTML)\nDESCRIPTION: This HTML snippet shows how to link the default CSS file (`open-iconic.css`) required to use the Open Iconic icon font standalone, without a specific framework like Bootstrap or Foundation. The `href` attribute must point to the correct path of the CSS file.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/tests/DevApps/blazorserver-calls-api/Client/wwwroot/css/open-iconic/README.md#2025-04-23_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<link href=\"/open-iconic/font/css/open-iconic.css\" rel=\"stylesheet\">\n```\n\n----------------------------------------\n\nTITLE: Null/Empty Validation Methods in C#\nDESCRIPTION: Helper methods for validating null, empty or whitespace values in strings and collections. Includes generic methods for type-safe validation.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.Diagnostics/PublicAPI/net8.0/InternalAPI.Shipped.txt#2025-04-23_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.Throws.IfNull<T>(T argument, string! paramName = \"\") -> T\nstatic Microsoft.Identity.Web.Throws.IfNullOrEmpty(string? argument, string! paramName = \"\") -> string!\nstatic Microsoft.Identity.Web.Throws.IfNullOrWhitespace(string? argument, string! paramName = \"\") -> string!\n```\n\n----------------------------------------\n\nTITLE: Linking to Open Iconic Foundation Stylesheet\nDESCRIPTION: HTML code to include the Open Iconic stylesheet specifically formatted for use with Foundation framework.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/ProjectTemplates/templates/ComponentsWebAssembly-CSharp/Client/wwwroot/css/open-iconic/README.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<link href=\"/open-iconic/font/css/open-iconic-foundation.css\" rel=\"stylesheet\">\n```\n\n----------------------------------------\n\nTITLE: Migrating from Microsoft.Identity.Web.MicrosoftGraph 2.x\nDESCRIPTION: Code examples showing the differences between Microsoft.Identity.Web.MicrosoftGraph 2.x and Microsoft.Identity.Web.GraphServiceClient, including package replacement and code updates.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.GraphServiceClient/Readme.md#2025-04-23_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ndotnet remove package Microsoft.Identity.Web.MicrosoftGraph\ndotnet add package Microsoft.Identity.Web.GraphServiceClient\n```\n\nLANGUAGE: csharp\nCODE:\n```\n// Old code\nvar user = await _graphServiceClient.Me.Request().GetAsync();\n\n// New code\nvar user = await _graphServiceClient.Me.GetAsync();\n```\n\nLANGUAGE: csharp\nCODE:\n```\n// Old code\nvar messages = await _graphServiceClient.Users\n                .Request()\n                .WithScopes(\"User.Read.All\")\n                .GetAsync();\nint NumberOfUsers = messages.Count;\n\n// New code\nvar messages = await _graphServiceClient.Users\n                .GetAsync(b => b.Options.WithScopes(\"User.Read.All\"));\nint NumberOfUsers = messages.Value.Count;\n```\n\nLANGUAGE: csharp\nCODE:\n```\n// Old code\nvar messages = await _graphServiceClient.Users\n                .Request()\n                .WithAppOnly()\n                .GetAsync();\nint NumberOfUsers = messages.Count;\n\n// New code\nvar messages = await _graphServiceClient.Users\n                .GetAsync(b => b.Options.WithAppOnly() ));\nint NumberOfUsers = messages.Value.Count;\n```\n\n----------------------------------------\n\nTITLE: Using Open Iconic's SVG Images in HTML\nDESCRIPTION: Demonstrates how to use individual SVG icons from Open Iconic as standard image elements with proper accessibility attributes.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/ProjectTemplates/templates/ComponentsWebAssembly-CSharp/Client/wwwroot/css/open-iconic/README.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"/open-iconic/svg/icon-name.svg\" alt=\"icon name\">\n```\n\n----------------------------------------\n\nTITLE: Displaying SVG Icon in HTML\nDESCRIPTION: This snippet shows how to display an Open Iconic SVG icon as an image in HTML. It demonstrates the basic usage of individual SVG files.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/ProjectTemplates/templates/BlazorServerWeb-CSharp/wwwroot/css/open-iconic/README.md#2025-04-23_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<img src=\"/open-iconic/svg/icon-name.svg\" alt=\"icon name\">\n```\n\n----------------------------------------\n\nTITLE: Listing Internal WebApiBuilders Class in C#\nDESCRIPTION: Lists the internal `WebApiBuilders` class within the `Microsoft.Identity.Web.Internal` namespace, likely containing helper methods or configurations specific to Web API builders.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.TokenAcquisition/PublicAPI/net462/PublicAPI.Shipped.txt#2025-04-23_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Identity.Web.Internal.WebApiBuilders\n```\n\n----------------------------------------\n\nTITLE: Running Scripts Interactively Against a Specific Tenant\nDESCRIPTION: Executes the 'Cleanup.ps1' and 'Configure.ps1' scripts interactively against a specified Azure AD tenant. The user must first define the '$tenantId' variable with their target Azure AD tenant's Directory ID (GUID). The scripts are then invoked with the '-TenantId' parameter, and the user will be prompted for credentials valid within that specific tenant.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/tests/DevApps/WebAppCallsWebApiCallsGraph/AppCreationScripts/AppCreationScripts.md#2025-04-23_snippet_7\n\nLANGUAGE: PowerShell\nCODE:\n```\n$tenantId = \"yourTenantIdGuid\"\n. .\\Cleanup.ps1 -TenantId $tenantId\n. .\\Configure.ps1 -TenantId $tenantId\n```\n\n----------------------------------------\n\nTITLE: Adding Authentication Middleware in Configure Method\nDESCRIPTION: Adds the Authentication middleware to the HTTP request pipeline before the MVC middleware in the Configure method of Startup.cs.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/tests/DevApps/B2CWebAppCallsWebApi/README.md#2025-04-23_snippet_8\n\nLANGUAGE: CSharp\nCODE:\n```\napp.UseAuthentication();\napp.UseMvc();\n```\n\n----------------------------------------\n\nTITLE: Displaying Open Iconic Webfont Icon with Bootstrap (HTML)\nDESCRIPTION: This HTML snippet illustrates the markup needed to display an Open Iconic icon when using the webfont integrated with Bootstrap. It uses a `<span>` element with the base class `oi` and a specific icon class like `oi-icon-name`. Requires the `open-iconic-bootstrap.css` to be linked.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/tests/DevApps/blazorserver-calls-api/Client/wwwroot/css/open-iconic/README.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<span class=\"oi oi-icon-name\" title=\"icon name\" aria-hidden=\"true\"></span>\n```\n\n----------------------------------------\n\nTITLE: Including Default Open Iconic CSS\nDESCRIPTION: This snippet shows how to include the default Open Iconic CSS file in an HTML document. It's used when using Open Iconic without a specific framework.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/ProjectTemplates/templates/BlazorServerWeb-CSharp/wwwroot/css/open-iconic/README.md#2025-04-23_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n<link href=\"/open-iconic/font/css/open-iconic.css\" rel=\"stylesheet\">\n```\n\n----------------------------------------\n\nTITLE: Using Open Iconic Icons Standalone\nDESCRIPTION: HTML markup for implementing Open Iconic icons without a framework, using the data-glyph attribute to specify the icon.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/ProjectTemplates/templates/ComponentsWebAssembly-CSharp/Client/wwwroot/css/open-iconic/README.md#2025-04-23_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<span class=\"oi\" data-glyph=\"icon-name\" title=\"icon name\" aria-hidden=\"true\"></span>\n```\n\n----------------------------------------\n\nTITLE: Handling GET Request for SignedOut Page in C#\nDESCRIPTION: Defines the `OnGet` handler method for the `SignedOutModel` Razor Page. This method is executed when the signed out page is requested via an HTTP GET request. It typically checks if the user is authenticated and returns the page result.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.UI/PublicAPI.Shipped.txt#2025-04-23_snippet_19\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Identity.Web.UI.Areas.MicrosoftIdentity.Pages.Account.SignedOutModel.OnGet() -> Microsoft.AspNetCore.Mvc.IActionResult!\n```\n\n----------------------------------------\n\nTITLE: Implementing Open Iconic's SVG Sprite in HTML\nDESCRIPTION: Shows how to implement icons from the Open Iconic SVG sprite, which allows multiple icons to be loaded with a single request. This approach uses the SVG and use elements with appropriate classes for styling.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/ProjectTemplates/templates/ComponentsWebAssembly-CSharp/Client/wwwroot/css/open-iconic/README.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<svg class=\"icon\">\n  <use xlink:href=\"open-iconic.svg#account-login\" class=\"icon-account-login\"></use>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication with Microsoft Identity Web\nDESCRIPTION: This snippet replaces the default Azure AD authentication configuration with Microsoft Identity Web, enabling sign-in for both Work/School and Personal Microsoft accounts. It also adds token caches and configures the app to call protected web API.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/tests/DevApps/B2CWebAppCallsWebApi/README.md#2025-04-23_snippet_3\n\nLANGUAGE: CSharp\nCODE:\n```\nservices.AddSignIn(Configuration)\n    .AddWebAppCallsProtectedWebApi(new string[] { Configuration[\"TodoList:TodoListScope\"] })\n    .AddInMemoryTokenCaches();\n```\n\n----------------------------------------\n\nTITLE: CertificatelessConstants Constructor Definition in C#\nDESCRIPTION: Defines the default constructor for the CertificatelessConstants class that doesn't take any parameters and doesn't return a value.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.Certificateless/InternalAPI.Shipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.Certificateless.CertificatelessConstants.CertificatelessConstants() -> void\n```\n\n----------------------------------------\n\nTITLE: Setting Execution Policy for Current PowerShell Process - PowerShell\nDESCRIPTION: This command sets the execution policy to 'RemoteSigned' specifically for the current PowerShell process. This allows local scripts and remote signed scripts to be executed without affecting the system or user-wide execution policy. It requires only built-in PowerShell and is a prerequisite for running the sample scripts.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/tests/DevApps/blazorserver-calls-api/AppCreationScripts/AppCreationScripts.md#2025-04-23_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope Process\n```\n\n----------------------------------------\n\nTITLE: Declaring OidcIdpSignedAssertionProvider Class in C#\nDESCRIPTION: Defines the `OidcIdpSignedAssertionProvider` class within the `Microsoft.Identity.Web.OidcFic` namespace. This class is responsible for providing OIDC IDP signed assertions, likely used for acquiring tokens via client assertion flows.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.OidcFIC/PublicAPI/net8.0/InternalAPI.Shipped.txt#2025-04-23_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Identity.Web.OidcFic.OidcIdpSignedAssertionProvider\n```\n\n----------------------------------------\n\nTITLE: Non-interactive Credential Setup and Script Execution - PowerShell\nDESCRIPTION: Creates a secure password and credential object, then runs 'Cleanup.ps1' and 'Configure.ps1' with provided credentials for unattended automation. Dependencies include the scripts in the current directory and PowerShell's PSCredential class. Inputs are user credentials; outputs are cleaned and configured AD applications. Sensitive operations require secure credential handling.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/tests/DevApps/blazorserver-calls-api/AppCreationScripts/AppCreationScripts.md#2025-04-23_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\n$secpasswd = ConvertTo-SecureString\\u00a0\"[Password here]\" -AsPlainText -Force\n$mycreds = New-Object System.Management.Automation.PSCredential (\"[login@tenantName here]\", $secpasswd)\n. .\\Cleanup.ps1 -Credential $mycreds\n. .\\Configure.ps1 -Credential $mycreds\n```\n\n----------------------------------------\n\nTITLE: Setting Execution Policy for PowerShell Scripts - PowerShell\nDESCRIPTION: Sets the execution policy to 'RemoteSigned' for the current PowerShell process, allowing signed or local unsigned scripts to run. This is required to enable script execution for app setup. No external dependencies are needed. The primary parameter, -ExecutionPolicy, specifies the policy applied to the session.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/tests/DevApps/blazorserver-calls-api/AppCreationScripts/AppCreationScripts.md#2025-04-23_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope Process -Force\n```\n\n----------------------------------------\n\nTITLE: Coloring SVG Icons with CSS\nDESCRIPTION: CSS snippet demonstrating how to change the color of SVG icons by setting the fill property on the appropriate element.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/ProjectTemplates/templates/ComponentsWebAssembly-CSharp/Client/wwwroot/css/open-iconic/README.md#2025-04-23_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n.icon-account-login {\n  fill: #f00;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Open Iconic with Bootstrap\nDESCRIPTION: This example demonstrates how to use an Open Iconic icon with Bootstrap classes. It shows the HTML structure for displaying an icon using the icon font.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/ProjectTemplates/templates/BlazorServerWeb-CSharp/wwwroot/css/open-iconic/README.md#2025-04-23_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<span class=\"oi oi-icon-name\" title=\"icon name\" aria-hidden=\"true\"></span>\n```\n\n----------------------------------------\n\nTITLE: Reading Version from .csproj File in PowerShell\nDESCRIPTION: This PowerShell script reads the version from a .csproj file using XML parsing. It loads the XML content, retrieves the Version element, and returns its value.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.Diagnostics/PublicAPI/net472/PublicAPI.Unshipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nfunction Get-MicrosoftIdentityWebVersion([string]$projectPath, [string]$fallbackVersion) {\n    if (!(Test-Path $projectPath)) {\n        Write-Host \"Project path '$projectPath' not found. Using fallback version '$fallbackVersion'\"\n        return $fallbackVersion\n    }\n\n    [xml]$csproj = Get-Content $projectPath\n    $version = $csproj.Project.PropertyGroup.Version\n\n    if (!$version) {\n        Write-Host \"Version not found in project. Using fallback version '$fallbackVersion'\"\n        return $fallbackVersion\n    }\n\n    return $version\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Open Iconic Webfont Icon Standalone (HTML)\nDESCRIPTION: This HTML snippet illustrates the markup needed to display an Open Iconic icon when using the webfont as a standalone solution. It uses a `<span>` element with the base class `oi` and a `data-glyph` attribute specifying the icon name. Requires the default `open-iconic.css` to be linked.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/tests/DevApps/blazorserver-calls-api/Client/wwwroot/css/open-iconic/README.md#2025-04-23_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<span class=\"oi\" data-glyph=\"icon-name\" title=\"icon name\" aria-hidden=\"true\"></span>\n```\n\n----------------------------------------\n\nTITLE: Using Open Iconic SVG Sprite with <svg> and <use> (HTML)\nDESCRIPTION: This snippet shows how to embed an icon from the Open Iconic SVG sprite file (`open-iconic.svg`). It uses an inline `<svg>` element and a `<use>` element with an `xlink:href` attribute pointing to the specific icon's ID within the sprite. Classes are suggested for easier styling.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/tests/DevApps/blazorserver-calls-api/Client/wwwroot/css/open-iconic/README.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<svg class=\"icon\">\n  <use xlink:href=\"open-iconic.svg#account-login\" class=\"icon-account-login\"></use>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Configuring AAD Web API Settings in appsettings.json\nDESCRIPTION: JSON configuration for downstream API settings in single organization authentication scenario, specifying the base URL and required scopes.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/TESTING.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"DownstreamApi\": {\n    \"BaseUrl\": \"https://localhost:44351/WeatherForecast\",\n    \"Scopes\": \"api://a4c2469b-cf84-4145-8f5f-cb7bacf814bc/access_as_user\"\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Open Iconic Icons with Foundation\nDESCRIPTION: HTML markup for implementing Open Iconic icons within a Foundation project using the appropriate class naming convention.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/ProjectTemplates/templates/ComponentsWebAssembly-CSharp/Client/wwwroot/css/open-iconic/README.md#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<span class=\"fi-icon-name\" title=\"icon name\" aria-hidden=\"true\"></span>\n```\n\n----------------------------------------\n\nTITLE: Handling GET Request for AccessDenied Page in C#\nDESCRIPTION: Defines the `OnGet` handler method for the `AccessDeniedModel` Razor Page. This method is executed when the access denied page is requested via an HTTP GET request.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.UI/PublicAPI.Shipped.txt#2025-04-23_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Identity.Web.UI.Areas.MicrosoftIdentity.Pages.Account.AccessDeniedModel.OnGet() -> void\n```\n\n----------------------------------------\n\nTITLE: Defining Claim and Configuration String Constants - Microsoft.Identity.Web - C#\nDESCRIPTION: This snippet defines a set of string constants representing standard claim names and configuration property keys used in authentication and user assertions with Microsoft Identity Web. Dependencies include the Microsoft.Identity.Web core library. These constants ensure consistent usage throughout the authentication pipeline, reducing hardcoding errors and improving maintainability within .NET identity-enabled applications.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.TokenAcquisition/PublicAPI/net6.0/PublicAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n#nullable enable\nconst Microsoft.Identity.Web.ClaimConstants.Acr = \"acr\" -> string!\nconst Microsoft.Identity.Web.ClaimConstants.ClientInfo = \"client_info\" -> string!\nconst Microsoft.Identity.Web.ClaimConstants.Name = \"name\" -> string!\nconst Microsoft.Identity.Web.ClaimConstants.NameIdentifierId = \"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier\" -> string!\nconst Microsoft.Identity.Web.ClaimConstants.ObjectId = \"http://schemas.microsoft.com/identity/claims/objectidentifier\" -> string!\nconst Microsoft.Identity.Web.ClaimConstants.Oid = \"oid\" -> string!\nconst Microsoft.Identity.Web.ClaimConstants.Password = \"xms_password\" -> string!\nconst Microsoft.Identity.Web.ClaimConstants.PreferredUserName = \"preferred_username\" -> string!\nconst Microsoft.Identity.Web.ClaimConstants.Role = \"http://schemas.microsoft.com/ws/2008/06/identity/claims/role\" -> string!\nconst Microsoft.Identity.Web.ClaimConstants.Roles = \"roles\" -> string!\nconst Microsoft.Identity.Web.ClaimConstants.Scope = \"http://schemas.microsoft.com/identity/claims/scope\" -> string!\nconst Microsoft.Identity.Web.ClaimConstants.Scp = \"scp\" -> string!\nconst Microsoft.Identity.Web.ClaimConstants.Sub = \"sub\" -> string!\nconst Microsoft.Identity.Web.ClaimConstants.TenantId = \"http://schemas.microsoft.com/identity/claims/tenantid\" -> string!\nconst Microsoft.Identity.Web.ClaimConstants.Tfp = \"tfp\" -> string!\nconst Microsoft.Identity.Web.ClaimConstants.Tid = \"tid\" -> string!\nconst Microsoft.Identity.Web.ClaimConstants.UniqueObjectIdentifier = \"uid\" -> string!\nconst Microsoft.Identity.Web.ClaimConstants.UniqueTenantIdentifier = \"utid\" -> string!\nconst Microsoft.Identity.Web.ClaimConstants.UserFlow = \"http://schemas.microsoft.com/claims/authnclassreference\" -> string!\nconst Microsoft.Identity.Web.ClaimConstants.Username = \"xms_username\" -> string!\nconst Microsoft.Identity.Web.Constants.AzureAd = \"AzureAd\" -> string!\nconst Microsoft.Identity.Web.Constants.AzureAdB2C = \"AzureAdB2C\" -> string!\nconst Microsoft.Identity.Web.Constants.Bearer = \"Bearer\" -> string!\nconst Microsoft.Identity.Web.Constants.Claims = \"claims\" -> string!\nconst Microsoft.Identity.Web.Constants.DomainHint = \"domain_hint\" -> string!\nconst Microsoft.Identity.Web.Constants.ErrorPath = \"/MicrosoftIdentity/Account/Error\" -> string!\nconst Microsoft.Identity.Web.Constants.LoginHint = \"login_hint\" -> string!\nconst Microsoft.Identity.Web.Constants.Policy = \"policy\" -> string!\nconst Microsoft.Identity.Web.Constants.ResetPasswordPath = \"/MicrosoftIdentity/Account/ResetPassword\" -> string!\nconst Microsoft.Identity.Web.Constants.ReturnUrl = \"ReturnUrl\" -> string!\nconst Microsoft.Identity.Web.Constants.Scope = \"scope\" -> string!\nconst Microsoft.Identity.Web.Constants.SpaAuthCode = \"SpaAuthCode\" -> string!\n```\n\n----------------------------------------\n\nTITLE: MicrosoftGraphOptions Class Definition\nDESCRIPTION: Class defining configuration options for Microsoft Graph integration including base URL and scopes\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.MicrosoftGraphBeta/PublicAPI/net462/PublicAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class MicrosoftGraphOptions\n{\n    public string BaseUrl { get; set; }\n    public string? Scopes { get; set; }\n    public MicrosoftGraphOptions() { }\n}\n```\n\n----------------------------------------\n\nTITLE: Navigating to AppCreationScripts Directory - PowerShell\nDESCRIPTION: Changes the current working directory to 'AppCreationScripts'. This sets the context for executing the configuration and cleanup scripts for Azure AD application automation. No parameters are required, but the folder must exist.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/tests/DevApps/blazorserver-calls-api/AppCreationScripts/AppCreationScripts.md#2025-04-23_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\ncd AppCreationScripts\n```\n\n----------------------------------------\n\nTITLE: Using SVG Sprite in HTML and CSS\nDESCRIPTION: This example demonstrates how to use the Open Iconic SVG sprite to display icons. It includes HTML for referencing the sprite and CSS for sizing and coloring the icons.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/ProjectTemplates/templates/BlazorServerWeb-CSharp/wwwroot/css/open-iconic/README.md#2025-04-23_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<svg class=\"icon\">\n  <use xlink:href=\"open-iconic.svg#account-login\" class=\"icon-account-login\"></use>\n</svg>\n```\n\nLANGUAGE: CSS\nCODE:\n```\n.icon {\n  width: 16px;\n  height: 16px;\n}\n\n.icon-account-login {\n  fill: #f00;\n}\n```\n\n----------------------------------------\n\nTITLE: Graph Service Collection Extensions\nDESCRIPTION: Extension methods for IServiceCollection to add Microsoft Graph services with optional configuration.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.MicrosoftGraphBeta/PublicAPI/net472/PublicAPI.Shipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic static class GraphServiceCollectionExtensions\n{\n    public static IServiceCollection AddMicrosoftGraph(this IServiceCollection services);\n    public static IServiceCollection AddMicrosoftGraph(this IServiceCollection services, Action<MicrosoftGraphOptions> configureMicrosoftGraphOptions);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating ASP.NET Core Web API using Command Line\nDESCRIPTION: Commands for creating a new ASP.NET Core Web API project with Single Organization authentication using the .NET Core CLI.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/tests/DevApps/B2CWebAppCallsWebApi/README.md#2025-04-23_snippet_5\n\nLANGUAGE: Text\nCODE:\n```\nmd TodoListService\ncd TodoListService\ndotnet new webapi -au=SingleOrg\n```\n\n----------------------------------------\n\nTITLE: Getting CredentialSource Property in OidcIdpSignedAssertionLoader (C#)\nDESCRIPTION: Defines the getter signature for the CredentialSource property of the OidcIdpSignedAssertionLoader class. This property indicates the source type for the credential being loaded, returning a Microsoft.Identity.Abstractions.CredentialSource enum value.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.OidcFIC/PublicAPI/net472/InternalAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Identity.Web.OidcFic.OidcIdpSignedAssertionLoader.CredentialSource.get -> Microsoft.Identity.Abstractions.CredentialSource\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Function API Settings in appsettings.json\nDESCRIPTION: JSON configuration for downstream API settings when calling an Azure Function, specifying the function URL and required scopes.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/TESTING.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"DownstreamApi\": {\n    \"BaseUrl\": \"http://localhost:7071/api/SampleFunc\",\n    \"Scopes\": \"api://a4c2469b-cf84-4145-8f5f-cb7bacf814bc/access_as_user\"\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MicrosoftGraphOptions Class in C#\nDESCRIPTION: Defines the MicrosoftGraphOptions class with properties for configuring Graph API base URL and scopes.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.MicrosoftGraph/PublicAPI/net472/PublicAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class MicrosoftGraphOptions\n{\n    public string BaseUrl { get; set; }\n    public string? Scopes { get; set; }\n    public MicrosoftGraphOptions() { }\n}\n```\n\n----------------------------------------\n\nTITLE: OS Platform Detection Methods\nDESCRIPTION: Static methods for detecting the operating system platform. Includes checks for Windows, Linux and Mac platforms.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.Diagnostics/PublicAPI/net9.0/InternalAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.Diagnostics.OsHelper.IsWindowsPlatform() -> bool\nstatic Microsoft.Identity.Web.Diagnostics.OsHelper.IsLinuxPlatform() -> bool\nstatic Microsoft.Identity.Web.Diagnostics.OsHelper.IsMacPlatform() -> bool\n```\n\n----------------------------------------\n\nTITLE: Outlining Core Interfaces and Methods for Token Acquisition (C#)\nDESCRIPTION: This snippet lists interface names and method signatures relevant to Microsoft.Identity.Web, including token acquisition, certificate change observation, and authentication builder extensibility. These elements define contracts for acquiring tokens for applications and users, observing changes to client certificates, and customizing authentication builder behavior within the Microsoft.Identity.Web ecosystem. Implementations require Microsoft.Identity.Client, ASP.NET Core, and related Microsoft.Extensions dependencies; input parameters include configuration, claim scopes, and contextual objects, returning tasks or void for asynchronous and synchronous operations respectively.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.TokenAcquisition/PublicAPI/net7.0/PublicAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Identity.Web.ApplicationBuilderExtensions\nMicrosoft.Identity.Web.BeforeTokenAcquisitionForApp\nMicrosoft.Identity.Web.BeforeTokenAcquisitionForTestUser\nMicrosoft.Identity.Web.ClaimConstants\nMicrosoft.Identity.Web.Constants\nMicrosoft.Identity.Web.Experimental.CerticateObserverAction\nMicrosoft.Identity.Web.Experimental.CerticateObserverAction.Deselected = 1 -> Microsoft.Identity.Web.Experimental.CerticateObserverAction\nMicrosoft.Identity.Web.Experimental.CerticateObserverAction.Selected = 0 -> Microsoft.Identity.Web.Experimental.CerticateObserverAction\nMicrosoft.Identity.Web.Experimental.CertificateChangeEventArg\nMicrosoft.Identity.Web.Experimental.CertificateChangeEventArg.Action.get -> Microsoft.Identity.Web.Experimental.CerticateObserverAction\nMicrosoft.Identity.Web.Experimental.CertificateChangeEventArg.Action.set -> void\nMicrosoft.Identity.Web.Experimental.CertificateChangeEventArg.Certificate.get -> System.Security.Cryptography.X509Certificates.X509Certificate2?\nMicrosoft.Identity.Web.Experimental.CertificateChangeEventArg.Certificate.set -> void\nMicrosoft.Identity.Web.Experimental.CertificateChangeEventArg.CertificateChangeEventArg() -> void\nMicrosoft.Identity.Web.Experimental.CertificateChangeEventArg.CredentialDescription.get -> Microsoft.Identity.Abstractions.CredentialDescription?\nMicrosoft.Identity.Web.Experimental.CertificateChangeEventArg.CredentialDescription.set -> void\nMicrosoft.Identity.Web.Experimental.ICertificatesObserver\nMicrosoft.Identity.Web.Experimental.ICertificatesObserver.OnClientCertificateChanged(Microsoft.Identity.Web.Experimental.CertificateChangeEventArg! e) -> void\nMicrosoft.Identity.Web.Extensibility.BaseAuthorizationHeaderProvider\nMicrosoft.Identity.Web.Extensibility.BaseAuthorizationHeaderProvider.BaseAuthorizationHeaderProvider(System.IServiceProvider! serviceProvider) -> void\nMicrosoft.Identity.Web.Internal.WebApiBuilders\nMicrosoft.Identity.Web.ITokenAcquisition\nMicrosoft.Identity.Web.ITokenAcquisition.GetAccessTokenForAppAsync(string! scope, string? authenticationScheme, string? tenant = null, Microsoft.Identity.Web.TokenAcquisitionOptions? tokenAcquisitionOptions = null) -> System.Threading.Tasks.Task<string!>!\nMicrosoft.Identity.Web.ITokenAcquisition.GetAccessTokenForAppAsync(string! scope, string? tenant = null, Microsoft.Identity.Web.TokenAcquisitionOptions? tokenAcquisitionOptions = null) -> System.Threading.Tasks.Task<string!>!\nMicrosoft.Identity.Web.ITokenAcquisition.GetAccessTokenForUserAsync(System.Collections.Generic.IEnumerable<string!>! scopes, string? authenticationScheme, string? tenantId = null, string? userFlow = null, System.Security.Claims.ClaimsPrincipal? user = null, Microsoft.Identity.Web.TokenAcquisitionOptions? tokenAcquisitionOptions = null) -> System.Threading.Tasks.Task<string!>!\nMicrosoft.Identity.Web.ITokenAcquisition.GetAccessTokenForUserAsync(System.Collections.Generic.IEnumerable<string!>! scopes, string? tenantId = null, string? userFlow = null, System.Security.Claims.ClaimsPrincipal? user = null, Microsoft.Identity.Web.TokenAcquisitionOptions? tokenAcquisitionOptions = null) -> System.Threading.Tasks.Task<string!>!\nMicrosoft.Identity.Web.ITokenAcquisition.GetAuthenticationResultForAppAsync(string! scope, string? authenticationScheme, string? tenant = null, Microsoft.Identity.Web.TokenAcquisitionOptions? tokenAcquisitionOptions = null) -> System.Threading.Tasks.Task<Microsoft.Identity.Client.AuthenticationResult!>!\nMicrosoft.Identity.Web.ITokenAcquisition.GetAuthenticationResultForAppAsync(string! scope, string? tenant = null, Microsoft.Identity.Web.TokenAcquisitionOptions? tokenAcquisitionOptions = null) -> System.Threading.Tasks.Task<Microsoft.Identity.Client.AuthenticationResult!>!\nMicrosoft.Identity.Web.ITokenAcquisition.GetAuthenticationResultForUserAsync(System.Collections.Generic.IEnumerable<string!>! scopes, string? authenticationScheme, string? tenantId = null, string? userFlow = null, System.Security.Claims.ClaimsPrincipal? user = null, Microsoft.Identity.Web.TokenAcquisitionOptions? tokenAcquisitionOptions = null) -> System.Threading.Tasks.Task<Microsoft.Identity.Client.AuthenticationResult!>!\nMicrosoft.Identity.Web.ITokenAcquisition.GetAuthenticationResultForUserAsync(System.Collections.Generic.IEnumerable<string!>! scopes, string? tenantId = null, string? userFlow = null, System.Security.Claims.ClaimsPrincipal? user = null, Microsoft.Identity.Web.TokenAcquisitionOptions? tokenAcquisitionOptions = null) -> System.Threading.Tasks.Task<Microsoft.Identity.Client.AuthenticationResult!>!\nMicrosoft.Identity.Web.ITokenAcquisition.GetEffectiveAuthenticationScheme(string? authenticationScheme) -> string!\nMicrosoft.Identity.Web.ITokenAcquisition.ReplyForbiddenWithWwwAuthenticateHeader(System.Collections.Generic.IEnumerable<string!>! scopes, Microsoft.Identity.Client.MsalUiRequiredException! msalServiceException, Microsoft.AspNetCore.Http.HttpResponse? httpResponse = null) -> void\nMicrosoft.Identity.Web.ITokenAcquisition.ReplyForbiddenWithWwwAuthenticateHeader(System.Collections.Generic.IEnumerable<string!>! scopes, Microsoft.Identity.Client.MsalUiRequiredException! msalServiceException, string? authenticationScheme, Microsoft.AspNetCore.Http.HttpResponse? httpResponse = null) -> void\nMicrosoft.Identity.Web.ITokenAcquisition.ReplyForbiddenWithWwwAuthenticateHeaderAsync(System.Collections.Generic.IEnumerable<string!>! scopes, Microsoft.Identity.Client.MsalUiRequiredException! msalServiceException, Microsoft.AspNetCore.Http.HttpResponse? httpResponse = null) -> System.Threading.Tasks.Task!\nMicrosoft.Identity.Web.MicrosoftIdentityAppCallsWebApiAuthenticationBuilder\nMicrosoft.Identity.Web.MicrosoftIdentityAppCallsWebApiAuthenticationBuilder.AddDistributedTokenCaches() -> Microsoft.Identity.Web.MicrosoftIdentityAppCallsWebApiAuthenticationBuilder!\nMicrosoft.Identity.Web.MicrosoftIdentityAppCallsWebApiAuthenticationBuilder.AddInMemoryTokenCaches(System.Action<Microsoft.Identity.Web.TokenCacheProviders.InMemory.MsalMemoryTokenCacheOptions!>? configureOptions = null, System.Action<Microsoft.Extensions.Caching.Memory.MemoryCacheOptions!>? memoryCacheOptions = null) -> Microsoft.Identity.Web.MicrosoftIdentityAppCallsWebApiAuthenticationBuilder!\nMicrosoft.Identity.Web.MicrosoftIdentityBaseAuthenticationBuilder\nMicrosoft.Identity.Web.MicrosoftIdentityBaseAuthenticationBuilder.ConfigurationSection.get -> Microsoft.Extensions.Configuration.IConfigurationSection?\nMicrosoft.Identity.Web.MicrosoftIdentityBaseAuthenticationBuilder.ConfigurationSection.set -> void\nMicrosoft.Identity.Web.MicrosoftIdentityBaseAuthenticationBuilder.MicrosoftIdentityBaseAuthenticationBuilder(Microsoft.Extensions.DependencyInjection.IServiceCollection! services, Microsoft.Extensions.Configuration.IConfigurationSection? configurationSection = null) -> void\nMicrosoft.Identity.Web.MicrosoftIdentityBaseAuthenticationBuilder.Services.get -> Microsoft.Extensions.DependencyInjection.IServiceCollection!\nMicrosoft.Identity.Web.MicrosoftIdentityOptions\nMicrosoft.Identity.Web.MicrosoftIdentityOptions.AllowWebApiToBeAuthorizedByACL.get -> bool\nMicrosoft.Identity.Web.MicrosoftIdentityOptions.AllowWebApiToBeAuthorizedByACL.set -> void\n```\n\n----------------------------------------\n\nTITLE: Uninstalling msidentity-app-sync Tool\nDESCRIPTION: Command to uninstall the msidentity-app-sync tool from the global dotnet tools.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/tools/app-provisioning-tool/app-provisioning-tool/Readme.txt#2025-04-23_snippet_1\n\nLANGUAGE: dotnet cli\nCODE:\n```\ndotnet tool uninstall --global msidentity-app-sync\n```\n\n----------------------------------------\n\nTITLE: Extending MicrosoftIdentityAppCallsWebApiAuthenticationBuilder for Graph in C#\nDESCRIPTION: Defines extension methods for MicrosoftIdentityAppCallsWebApiAuthenticationBuilder to add Microsoft Graph support. These methods provide various ways to configure Microsoft Graph authentication in the authentication builder.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.GraphServiceClient/PublicAPI/net7.0/PublicAPI.Shipped.txt#2025-04-23_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.MicrosoftGraphExtensions.AddMicrosoftGraph(this Microsoft.Identity.Web.MicrosoftIdentityAppCallsWebApiAuthenticationBuilder! builder, Microsoft.Extensions.Configuration.IConfigurationSection! configurationSection) -> Microsoft.Identity.Web.MicrosoftIdentityAppCallsWebApiAuthenticationBuilder!\nstatic Microsoft.Identity.Web.MicrosoftGraphExtensions.AddMicrosoftGraph(this Microsoft.Identity.Web.MicrosoftIdentityAppCallsWebApiAuthenticationBuilder! builder, string! graphBaseUrl = \"https://graph.microsoft.com/v1.0\", System.Collections.Generic.IEnumerable<string!>? defaultScopes = null) -> Microsoft.Identity.Web.MicrosoftIdentityAppCallsWebApiAuthenticationBuilder!\nstatic Microsoft.Identity.Web.MicrosoftGraphExtensions.AddMicrosoftGraph(this Microsoft.Identity.Web.MicrosoftIdentityAppCallsWebApiAuthenticationBuilder! builder, System.Action<Microsoft.Identity.Web.GraphServiceClientOptions!>! configureMicrosoftGraphOptions) -> Microsoft.Identity.Web.MicrosoftIdentityAppCallsWebApiAuthenticationBuilder!\nstatic Microsoft.Identity.Web.MicrosoftGraphExtensions.AddMicrosoftGraph(this Microsoft.Identity.Web.MicrosoftIdentityAppCallsWebApiAuthenticationBuilder! builder, System.Func<Microsoft.Kiota.Abstractions.Authentication.IAuthenticationProvider!, Microsoft.Graph.GraphServiceClient!>! graphServiceClientFactory, System.Collections.Generic.IEnumerable<string!>! initialScopes) -> Microsoft.Identity.Web.MicrosoftIdentityAppCallsWebApiAuthenticationBuilder!\nstatic Microsoft.Identity.Web.MicrosoftGraphExtensions.AddMicrosoftGraphAppOnly(this Microsoft.Identity.Web.MicrosoftIdentityAppCallsWebApiAuthenticationBuilder! builder, System.Func<Microsoft.Kiota.Abstractions.Authentication.IAuthenticationProvider!, Microsoft.Graph.GraphServiceClient!>! graphServiceClientFactory) -> Microsoft.Identity.Web.MicrosoftIdentityAppCallsWebApiAuthenticationBuilder!\n```\n\n----------------------------------------\n\nTITLE: Telemetry Information Generation\nDESCRIPTION: Static methods for creating telemetry information and getting Identity Web version.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.Diagnostics/PublicAPI/net9.0/InternalAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.Diagnostics.IdHelper.CreateTelemetryInfo() -> string!\nstatic Microsoft.Identity.Web.Diagnostics.IdHelper.GetIdWebVersion() -> string!\n```\n\n----------------------------------------\n\nTITLE: Token Acquisition Authentication Provider Class Definition\nDESCRIPTION: Defines a class that handles authentication request processing using token acquisition. Uses IAuthorizationHeaderProvider for token management.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.MicrosoftGraph/PublicAPI/net7.0/InternalAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class TokenAcquisitionAuthenticationProvider\n{\n    public Task AuthenticateRequestAsync(HttpRequestMessage request);\n    public TokenAcquisitionAuthenticationProvider(IAuthorizationHeaderProvider authorizationHeaderProvider, TokenAcquisitionAuthenticationProviderOption options);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting PowerShell Execution Policy - PowerShell\nDESCRIPTION: This PowerShell command sets the execution policy for the current process to RemoteSigned, allowing the execution of local and remote scripts that are digitally signed. This is a prerequisite for running the provided automation scripts in the setup process and helps prevent security prompts. The expected input is an interactive PowerShell session on Windows, and the output is an updated execution policy in the current shell context. Use with caution as per organizational policy.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/tests/DevApps/WebAppCallsWebApiCallsGraph/README-incremental-instructions.md#2025-04-23_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope Process -Force\n```\n\n----------------------------------------\n\nTITLE: Configuring NuGet Dependency Version Range for MSALfordotNet\nDESCRIPTION: NuGet package dependency configuration that specifies version constraints for MSALfordotNet. This configuration ensures all updates from version 1.1.0 to 1.1.x are included, but excludes version 1.2 and above.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/RELEASES.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency\nid=\"MSALfordotNet\"\nversion=\"[1.1,1.2)\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Custom Signed Assertion Provider Exception Handling in C#\nDESCRIPTION: Static methods for creating exceptions related to custom signed assertion providers in Microsoft Identity Web. These handle cases where providers are not found, have empty names, or when source loaders are missing.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.Certificate/InternalAPI.Shipped.txt#2025-04-23_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.CustomSignedAssertionProviderNotFoundException.ProviderNameNotFound(string! name) -> Microsoft.Identity.Web.CustomSignedAssertionProviderNotFoundException!\nstatic Microsoft.Identity.Web.CustomSignedAssertionProviderNotFoundException.ProviderNameNullOrEmpty() -> Microsoft.Identity.Web.CustomSignedAssertionProviderNotFoundException!\nstatic Microsoft.Identity.Web.CustomSignedAssertionProviderNotFoundException.SourceLoadersNullOrEmpty() -> Microsoft.Identity.Web.CustomSignedAssertionProviderNotFoundException!\nstatic Microsoft.Identity.Web.DefaultCredentialsLoader.CustomSignedAssertionProviderLoadingFailureMessage(string! providerName, string! sourceType, string! skip) -> string!\n```\n\n----------------------------------------\n\nTITLE: Adding Token Caches via Extension Method - Microsoft.Identity.Web - C#\nDESCRIPTION: Implements a static extension method for adding and initializing token caches to a confidential client application, accepting a delegate for custom cache configuration through Microsoft.Extensions.DependencyInjection. Primarily used to enable flexible and composable cache management for client apps using MSAL. Dependencies are on Microsoft.Identity.Client and dependency injection libraries, with the main parameter being the confidential client app instance.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.TokenCache/InternalAPI.Shipped.txt#2025-04-23_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Identity.Web.TokenCacheExtensions.AddTokenCaches(this Microsoft.Identity.Client.IConfidentialClientApplication! confidentialClientApp, System.Action<Microsoft.Extensions.DependencyInjection.IServiceCollection!>! initializeCaches) -> Microsoft.Identity.Client.IConfidentialClientApplication!\n```\n\n----------------------------------------\n\nTITLE: Downstream API Extension Methods in C#\nDESCRIPTION: Extension methods for registering downstream API services in the dependency injection container. Includes methods for configuring service lifetime and registration.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.DownstreamApi/PublicAPI/net7.0/InternalAPI.Shipped.txt#2025-04-23_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.DownstreamApiExtensions.AddDownstreamApiWithLifetime(Microsoft.Extensions.DependencyInjection.IServiceCollection! services, Microsoft.Extensions.DependencyInjection.ServiceLifetime lifetime) -> void\n\nstatic Microsoft.Identity.Web.DownstreamApiExtensions.RegisterDownstreamApi(Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> void\n```\n\n----------------------------------------\n\nTITLE: Running Benchmark Commands in Shell\nDESCRIPTION: Shell commands to execute benchmarks for both .NET 7 and .NET 8 frameworks after building the Native AOT library.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/tools/CrossPlatformValidator/CrossPlatformValidation/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd Benchmark\ndotnet run -f net7.0 -c Release\ndotnet run -f net8.0 -c Release\n```\n\n----------------------------------------\n\nTITLE: BaseRequestExtensions Class Methods\nDESCRIPTION: Extension methods for configuring authentication options on base requests including app-only auth, scopes, user claims and authentication schemes.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.MicrosoftGraphBeta/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nstatic class BaseRequestExtensions {\n    public static T WithAppOnly<T>(this T baseRequest, bool appOnly = true, string? tenant = null);\n    public static T WithAuthenticationOptions<T>(this T baseRequest, Action<AuthorizationHeaderProviderOptions> overrideAuthenticationOptions);\n    public static T WithAuthenticationScheme<T>(this T baseRequest, string authenticationScheme);\n    public static T WithScopes<T>(this T baseRequest, params string[] scopes);\n    public static T WithUser<T>(this T baseRequest, ClaimsPrincipal user);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Session Token Cache Providers to ASP.NET Core Services (C#)\nDESCRIPTION: These extensions register session-based token cache providers for either the entire application or per-user contexts, allowing confidential client tokens to be stored in session state. Intended for use in ASP.NET Core service configuration to improve token management with Microsoft.Identity.Web. Both methods return the modified IServiceCollection and require session middleware to be enabled.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_22\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Identity.Web.TokenCacheProviders.Session.SessionTokenCacheProviderExtension.AddSessionAppTokenCache(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!\n```\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Identity.Web.TokenCacheProviders.Session.SessionTokenCacheProviderExtension.AddSessionPerUserTokenCache(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!\n```\n\n----------------------------------------\n\nTITLE: Navigating to the App Creation Scripts Directory\nDESCRIPTION: Changes the current working directory in the PowerShell session to the 'AppCreationScripts' sub-folder. This step is necessary before executing the 'Configure.ps1' or 'Cleanup.ps1' scripts, as they are typically located within this directory.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/tests/DevApps/WebAppCallsWebApiCallsGraph/AppCreationScripts/AppCreationScripts.md#2025-04-23_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\ncd AppCreationScripts\n```\n\n----------------------------------------\n\nTITLE: Displaying Open Iconic Webfont Icon with Foundation (HTML)\nDESCRIPTION: This HTML snippet illustrates the markup needed to display an Open Iconic icon when using the webfont integrated with the Foundation framework. It uses a `<span>` element with a specific icon class like `fi-icon-name`. Requires the `open-iconic-foundation.css` to be linked.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/tests/DevApps/blazorserver-calls-api/Client/wwwroot/css/open-iconic/README.md#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<span class=\"fi-icon-name\" title=\"icon name\" aria-hidden=\"true\"></span>\n```\n\n----------------------------------------\n\nTITLE: Defining MicrosoftIdentityConsentAndConditionalAccessHandler Class in C#\nDESCRIPTION: Handles consent and conditional access for Microsoft Identity. It includes methods for challenging users, handling exceptions, and properties for base URI and user claims.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net6.0/PublicAPI.Shipped.txt#2025-04-23_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.MicrosoftIdentityConsentAndConditionalAccessHandler\nMicrosoft.Identity.Web.MicrosoftIdentityConsentAndConditionalAccessHandler.BaseUri.get -> string?\nMicrosoft.Identity.Web.MicrosoftIdentityConsentAndConditionalAccessHandler.BaseUri.set -> void\nMicrosoft.Identity.Web.MicrosoftIdentityConsentAndConditionalAccessHandler.ChallengeUser(string![]? scopes, string? claims = null, string? userflow = null) -> void\nMicrosoft.Identity.Web.MicrosoftIdentityConsentAndConditionalAccessHandler.HandleException(System.Exception! exception) -> void\nMicrosoft.Identity.Web.MicrosoftIdentityConsentAndConditionalAccessHandler.IsBlazorServer.get -> bool\nMicrosoft.Identity.Web.MicrosoftIdentityConsentAndConditionalAccessHandler.IsBlazorServer.set -> void\nMicrosoft.Identity.Web.MicrosoftIdentityConsentAndConditionalAccessHandler.MicrosoftIdentityConsentAndConditionalAccessHandler(System.IServiceProvider! serviceProvider) -> void\nMicrosoft.Identity.Web.MicrosoftIdentityConsentAndConditionalAccessHandler.User.get -> System.Security.Claims.ClaimsPrincipal!\nMicrosoft.Identity.Web.MicrosoftIdentityConsentAndConditionalAccessHandler.User.set -> void\n```\n\n----------------------------------------\n\nTITLE: Requiring Scopes or App Permissions on Endpoint Convention Builder (C#)\nDESCRIPTION: This extension for endpoint convention builders enforces both required scopes and app permissions at the endpoint configuration level. Accepts arrays of non-null strings for scopes and app permissions, returning the original builder for chaining. Used in routes or endpoints supporting both delegated (user) and application (client) context authorization.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_19\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Identity.Web.RequiredScopeOrAppPermissionExtensions.RequireScopeOrAppPermission<TBuilder>(this TBuilder endpointConventionBuilder, string![]! scope, string![]! appPermission) -> TBuilder\n```\n\n----------------------------------------\n\nTITLE: Installing AzureAD Module for Current User - PowerShell\nDESCRIPTION: Installs the AzureAD PowerShell module only for the current user, which is useful when administrator permissions are unavailable. The AzureAD module is a core dependency for all app creation and cleanup operations in these scripts.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/tests/DevApps/blazorserver-calls-api/AppCreationScripts/AppCreationScripts.md#2025-04-23_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nInstall-Module AzureAD -Scope CurrentUser\n```\n\n----------------------------------------\n\nTITLE: Downstream API PUT Operations\nDESCRIPTION: Collection of methods for making PUT requests to downstream APIs in both app and user contexts with optional configuration overrides and cancellation support.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.DownstreamApi/PublicAPI/netstandard2.0/InternalAPI.Shipped.txt#2025-04-23_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.DownstreamApi.PutForAppAsync<TInput>(string? serviceName, TInput input, System.Action<Microsoft.Identity.Abstractions.DownstreamApiOptionsReadOnlyHttpMethod!>? downstreamApiOptionsOverride = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!\n\nMicrosoft.Identity.Web.DownstreamApi.PutForUserAsync<TInput, TOutput>(string? serviceName, TInput input, System.Action<Microsoft.Identity.Abstractions.DownstreamApiOptionsReadOnlyHttpMethod!>? downstreamApiOptionsOverride = null, System.Security.Claims.ClaimsPrincipal? user = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TOutput?>!\n\nMicrosoft.Identity.Web.DownstreamApi.PutForUserAsync<TInput>(string? serviceName, TInput input, System.Action<Microsoft.Identity.Abstractions.DownstreamApiOptionsReadOnlyHttpMethod!>? downstreamApiOptionsOverride = null, System.Security.Claims.ClaimsPrincipal? user = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!\n```\n\n----------------------------------------\n\nTITLE: Linking to Open Iconic Bootstrap Stylesheet\nDESCRIPTION: HTML code to include the Open Iconic stylesheet specifically formatted for use with Bootstrap framework.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/ProjectTemplates/templates/ComponentsWebAssembly-CSharp/Client/wwwroot/css/open-iconic/README.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<link href=\"/open-iconic/font/css/open-iconic-bootstrap.css\" rel=\"stylesheet\">\n```\n\n----------------------------------------\n\nTITLE: Configuring Graph Base Request Extensions in C#\nDESCRIPTION: Extension methods for configuring base requests with authentication options, scopes, and user context. Includes methods for app-only auth, authentication scheme selection, and scope configuration.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.MicrosoftGraph/PublicAPI/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.BaseRequestExtensions.WithAppOnly<T>(this T baseRequest, bool appOnly = true, string? tenant = null) -> T\nstatic Microsoft.Identity.Web.BaseRequestExtensions.WithAuthenticationOptions<T>(this T baseRequest, System.Action<Microsoft.Identity.Abstractions.AuthorizationHeaderProviderOptions!>! overrideAuthenticationOptions) -> T\nstatic Microsoft.Identity.Web.BaseRequestExtensions.WithAuthenticationScheme<T>(this T baseRequest, string! authenticationScheme) -> T\nstatic Microsoft.Identity.Web.BaseRequestExtensions.WithScopes<T>(this T baseRequest, params string![]! scopes) -> T\nstatic Microsoft.Identity.Web.BaseRequestExtensions.WithUser<T>(this T baseRequest, System.Security.Claims.ClaimsPrincipal! user) -> T\n```\n\n----------------------------------------\n\nTITLE: Running Cleanup and Configuration Scripts Non-Interactively\nDESCRIPTION: Demonstrates running the 'Cleanup.ps1' and 'Configure.ps1' scripts non-interactively by providing user credentials. It first converts a plain text password to a SecureString, creates a PSCredential object, and passes these credentials via the '-Credential' parameter. Replace '[Password here]' and '[login@tenantName here]' with actual user credentials. This method is suitable for automated or DevOps scenarios.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/tests/DevApps/WebAppCallsWebApiCallsGraph/AppCreationScripts/AppCreationScripts.md#2025-04-23_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\n$secpasswd = ConvertTo-SecureString \"[Password here]\" -AsPlainText -Force\n$mycreds = New-Object System.Management.Automation.PSCredential (\"[login@tenantName here]\", $secpasswd)\n. .\\Cleanup.ps1 -Credential $mycreds\n. .\\Configure.ps1 -Credential $mycreds\n```\n\n----------------------------------------\n\nTITLE: Defining Constructor Signature for OidcIdpSignedAssertionLoader (C#)\nDESCRIPTION: Defines the constructor signature for the OidcIdpSignedAssertionLoader class. It requires dependencies like ILogger, IOptionsMonitor for application options, IConfiguration, and ITokenAcquirerFactory for its operation in loading OIDC signed assertions.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.OidcFIC/PublicAPI/net472/InternalAPI.Shipped.txt#2025-04-23_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Identity.Web.OidcFic.OidcIdpSignedAssertionLoader.OidcIdpSignedAssertionLoader(Microsoft.Extensions.Logging.ILogger<Microsoft.Identity.Web.OidcFic.OidcIdpSignedAssertionLoader!>! logger, Microsoft.Extensions.Options.IOptionsMonitor<Microsoft.Identity.Abstractions.MicrosoftIdentityApplicationOptions!>! options, Microsoft.Extensions.Configuration.IConfiguration! configuration, Microsoft.Identity.Abstractions.ITokenAcquirerFactory! tokenAcquirerFactory) -> void\n```\n\n----------------------------------------\n\nTITLE: Embedding Open Iconic SVG Icon using <img> Tag (HTML)\nDESCRIPTION: This snippet demonstrates how to embed a single Open Iconic SVG icon file directly into an HTML document using the standard `<img>` tag. The `src` attribute should point to the specific SVG file's path, and the `alt` attribute provides descriptive text for accessibility.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/tests/DevApps/blazorserver-calls-api/Client/wwwroot/css/open-iconic/README.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"/open-iconic/svg/icon-name.svg\" alt=\"icon name\">\n```\n\n----------------------------------------\n\nTITLE: Configuring API Permissions for Microsoft Identity Web in ASP.NET Core\nDESCRIPTION: This JSON configuration sets up API permissions for Microsoft Identity Web. It specifies the scopes required for accessing downstream APIs and the client credentials for authenticating the application.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.GraphServiceClient/PublicAPI/net7.0/InternalAPI.Unshipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"AzureAd\": {\n    \"Instance\": \"https://login.microsoftonline.com/\",\n    \"Domain\": \"qualified.domain.name\",\n    \"TenantId\": \"22222222-2222-2222-2222-222222222222\",\n    \"ClientId\": \"11111111-1111-1111-11111111111111111\",\n    \"CallbackPath\": \"/signin-oidc\",\n    \"SignedOutCallbackPath \": \"/signout-oidc\",\n\n    // To call an API\n    \"ClientSecret\": \"secret-from-app-registration\",\n    \"ClientCertificates\" : [\n    ]\n  },\n\n  \"DownstreamApi\": {\n    \"BaseUrl\": \"https://graph.microsoft.com/v1.0\",\n    \"Scopes\": \"user.read\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Microsoft Graph Authentication Builder Extensions\nDESCRIPTION: Extension methods for configuring Microsoft Graph authentication with various overloads for different scenarios including app-only authentication.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.MicrosoftGraphBeta/PublicAPI/net7.0/PublicAPI.Shipped.txt#2025-04-23_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic static class MicrosoftGraphExtensions\n{\n    public static MicrosoftIdentityAppCallsWebApiAuthenticationBuilder AddMicrosoftGraph(this MicrosoftIdentityAppCallsWebApiAuthenticationBuilder builder, IConfigurationSection configurationSection)\n    public static MicrosoftIdentityAppCallsWebApiAuthenticationBuilder AddMicrosoftGraph(this MicrosoftIdentityAppCallsWebApiAuthenticationBuilder builder, string graphBaseUrl = \"https://graph.microsoft.com/v1.0\", string defaultScopes = \"user.read\")\n    public static MicrosoftIdentityAppCallsWebApiAuthenticationBuilder AddMicrosoftGraph(this MicrosoftIdentityAppCallsWebApiAuthenticationBuilder builder, Action<MicrosoftGraphOptions> configureMicrosoftGraphOptions)\n    public static MicrosoftIdentityAppCallsWebApiAuthenticationBuilder AddMicrosoftGraph(this MicrosoftIdentityAppCallsWebApiAuthenticationBuilder builder, Func<IAuthenticationProvider, GraphServiceClient> graphServiceClientFactory, IEnumerable<string> initialScopes)\n    public static MicrosoftIdentityAppCallsWebApiAuthenticationBuilder AddMicrosoftGraphAppOnly(this MicrosoftIdentityAppCallsWebApiAuthenticationBuilder builder, Func<IAuthenticationProvider, GraphServiceClient> graphServiceClientFactory)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure AD Applications and Sample Application - PowerShell\nDESCRIPTION: This PowerShell snippet consists of two commands: one to change the working directory to the AppCreationScripts folder and another to execute the Configure.ps1 script. The script automates Azure AD application registration and applies necessary configuration to Visual Studio project files. Ensure you have set execution policy appropriately and have required permissions in your tenant. Input: PowerShell session in the cloned repo root; Output: registered Azure AD apps and locally configured application.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/tests/DevApps/WebAppCallsWebApiCallsGraph/README-incremental-instructions.md#2025-04-23_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\ncd .\\AppCreationScripts\\ \n.\\Configure.ps1\n```\n\n----------------------------------------\n\nTITLE: Configuring JWT Bearer Options for Azure AD in ASP.NET Core\nDESCRIPTION: This code configures the JWT bearer options for Azure AD authentication. It sets the authority, audience, and issuer validation, and adds custom claim actions for name and roles.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.Diagnostics/PublicAPI/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nbuilder.Services.Configure<JwtBearerOptions>(\n    JwtBearerDefaults.AuthenticationScheme, options =>\n    {\n        options.Authority = $\"https://login.microsoftonline.com/{builder.Configuration[\"AzureAd:TenantId\"]}\";\n        options.Audience = builder.Configuration[\"AzureAd:ClientId\"];\n        options.TokenValidationParameters.ValidateIssuer = false;\n\n        options.TokenValidationParameters.IssuerValidator = (issuer, securityToken, validationParameters) => issuer;\n\n        options.ClaimActions.MapJsonKey(ClaimTypes.Name, \"name\");\n        options.ClaimActions.MapJsonKey(ClaimTypes.Role, \"roles\");\n    });\n```\n\n----------------------------------------\n\nTITLE: Including Open Iconic Bootstrap CSS\nDESCRIPTION: This snippet shows how to include the Open Iconic Bootstrap CSS file in an HTML document. It's used when integrating Open Iconic with Bootstrap.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/ProjectTemplates/templates/BlazorServerWeb-CSharp/wwwroot/css/open-iconic/README.md#2025-04-23_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<link href=\"/open-iconic/font/css/open-iconic-bootstrap.css\" rel=\"stylesheet\">\n```\n\n----------------------------------------\n\nTITLE: Registering TodoList Service in Dependency Injection\nDESCRIPTION: Adds the TodoList service implementation to the ASP.NET Core dependency injection container, making it available throughout the application.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/tests/DevApps/B2CWebAppCallsWebApi/README-incremental-instructions.md#2025-04-23_snippet_7\n\nLANGUAGE: CSharp\nCODE:\n```\n// Add APIs\nservices.AddTodoListService(Configuration);\n```\n\n----------------------------------------\n\nTITLE: Using Open Iconic with Foundation\nDESCRIPTION: This example demonstrates how to use an Open Iconic icon with Foundation classes. It shows the HTML structure for displaying an icon using the icon font.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/ProjectTemplates/templates/BlazorServerWeb-CSharp/wwwroot/css/open-iconic/README.md#2025-04-23_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<span class=\"fi-icon-name\" title=\"icon name\" aria-hidden=\"true\"></span>\n```\n\n----------------------------------------\n\nTITLE: Linking Open Iconic Webfont CSS for Bootstrap (HTML)\nDESCRIPTION: This HTML snippet shows how to link the Bootstrap-specific CSS file (`open-iconic-bootstrap.css`) required to use the Open Iconic icon font within a Bootstrap project. The `href` attribute must point to the correct path of the CSS file.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/tests/DevApps/blazorserver-calls-api/Client/wwwroot/css/open-iconic/README.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<link href=\"/open-iconic/font/css/open-iconic-bootstrap.css\" rel=\"stylesheet\">\n```\n\n----------------------------------------\n\nTITLE: Installing Microsoft.Identity.Web Packages via NuGet for Authentication Scenarios\nDESCRIPTION: NuGet package installation commands for Microsoft.Identity.Web packages. These commands show how to install the core package and related packages for different authentication scenarios including web apps, web APIs, and Blazor applications.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net9.0/InternalAPI.Unshipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package Microsoft.Identity.Web\ndotnet add package Microsoft.Identity.Web.UI\ndotnet add package Microsoft.Identity.Web.MicrosoftGraph\ndotnet add package Microsoft.Identity.Web.DownstreamApi\ndotnet add package Microsoft.Identity.Web.Certificate\ndotnet add package Microsoft.Identity.Web.TokenCache\ndotnet add package Microsoft.Identity.Web.TokenAcquisition\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure AD Settings in appsettings.json for C#\nDESCRIPTION: This snippet shows the structure of the Azure AD configuration section in the appsettings.json file. It includes essential settings such as Instance, TenantId, and ClientId for Azure AD authentication.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.Diagnostics/PublicAPI/net472/PublicAPI.Shipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"AzureAd\": {\n    \"Instance\": \"https://login.microsoftonline.com/\",\n    \"Domain\": \"qualified.domain.name\",\n    \"TenantId\": \"22222222-2222-2222-2222-222222222222\",\n    \"ClientId\": \"11111111-1111-1111-11111111111111111\",\n    \"CallbackPath\": \"/signin-oidc\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Request Options Extension Methods\nDESCRIPTION: Extension methods for configuring request options including authentication schemes, scopes, and user claims.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.GraphServiceClient/PublicAPI/net9.0/PublicAPI.Shipped.txt#2025-04-23_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.RequestOptionsExtension.WithAuthenticationScheme(this System.Collections.Generic.IList<Microsoft.Kiota.Abstractions.IRequestOption!>! options, string! authenticationScheme) -> System.Collections.Generic.IList<Microsoft.Kiota.Abstractions.IRequestOption!>!\nstatic Microsoft.Identity.Web.RequestOptionsExtension.WithScopes(this System.Collections.Generic.IList<Microsoft.Kiota.Abstractions.IRequestOption!>! options, params string![]! scopes) -> System.Collections.Generic.IList<Microsoft.Kiota.Abstractions.IRequestOption!>!\nstatic Microsoft.Identity.Web.RequestOptionsExtension.WithUser(this System.Collections.Generic.IList<Microsoft.Kiota.Abstractions.IRequestOption!>! options, System.Security.Claims.ClaimsPrincipal! user) -> System.Collections.Generic.IList<Microsoft.Kiota.Abstractions.IRequestOption!>!\n```\n\n----------------------------------------\n\nTITLE: Adding Microsoft.Identity.Web Namespaces in Web API\nDESCRIPTION: Adding necessary using statements for Microsoft.Identity.Web and token cache providers in the Web API project's Startup.cs file.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/tests/DevApps/B2CWebAppCallsWebApi/README.md#2025-04-23_snippet_6\n\nLANGUAGE: CSharp\nCODE:\n```\nusing Microsoft.Identity.Web;\nusing Microsoft.Identity.Web.Client.TokenCacheProviders;\n```\n\n----------------------------------------\n\nTITLE: Benchmark Results Output\nDESCRIPTION: Raw benchmark results showing performance comparison between Wilson 6 on .NET 7 and Wilson 7 on .NET 8, including environment details, latency measurements, and memory allocation metrics.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/tools/CrossPlatformValidator/CrossPlatformValidation/README.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nBenchmarkDotNet v0.13.8, Windows 11 (10.0.22621.2283/22H2/2022Update/SunValley2) (Hyper-V)\nIntel Xeon Platinum 8370C CPU 2.80GHz, 1 CPU, 16 logical and 8 physical cores\n.NET SDK 8.0.100-rc.1.23423.3\n  [Host] : .NET 8.0.0 (8.0.23.41904), X64 RyuJIT AVX2\n\nJob=MediumRun  Toolchain=InProcessNoEmitToolchain  IterationCount=15\nLaunchCount=2  WarmupCount=10\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure AD Authentication for Microsoft Identity Web in ASP.NET Core\nDESCRIPTION: This JSON configuration sets up Azure AD authentication for a web application using Microsoft Identity Web. It specifies the Azure AD instance, tenant ID, client ID, and callback path for authentication flow.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.GraphServiceClient/PublicAPI/net7.0/InternalAPI.Unshipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"AzureAd\": {\n    \"Instance\": \"https://login.microsoftonline.com/\",\n    \"Domain\": \"qualified.domain.name\",\n    \"TenantId\": \"22222222-2222-2222-2222-222222222222\",\n    \"ClientId\": \"11111111-1111-1111-11111111111111111\",\n    \"CallbackPath\": \"/signin-oidc\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Making Authenticated Requests to Microsoft Graph API in C#\nDESCRIPTION: This snippet shows how to make authenticated requests to Microsoft Graph API using the GraphServiceClient. It demonstrates querying user information after acquiring the necessary access token.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.GraphServiceClient/PublicAPI/net6.0/PublicAPI.Unshipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic async Task<IActionResult> Profile()\n{\n    var user = await _graphServiceClient.Me.Request().GetAsync();\n    ViewData[\"Name\"] = user.DisplayName;\n    ViewData[\"Email\"] = user.Mail ?? user.UserPrincipalName;\n    return View();\n}\n```\n\n----------------------------------------\n\nTITLE: Microsoft Graph Authentication Classes\nDESCRIPTION: Core classes defining options for Microsoft Graph authentication and service client configuration. Includes GraphAuthenticationOptions and GraphServiceClientOptions for customizing Graph API interactions.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.GraphServiceClient/PublicAPI/net6.0/PublicAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.GraphAuthenticationOptions\nMicrosoft.Identity.Web.GraphAuthenticationOptions.BaseUrl.get -> string!\nMicrosoft.Identity.Web.GraphAuthenticationOptions.GraphAuthenticationOptions() -> void\nMicrosoft.Identity.Web.GraphServiceClientOptions\nMicrosoft.Identity.Web.GraphServiceClientOptions.GraphServiceClientOptions() -> void\nMicrosoft.Identity.Web.GraphServiceClientOptions.Scopes.get -> System.Collections.Generic.IEnumerable<string!>!\nMicrosoft.Identity.Web.GraphServiceClientOptions.Scopes.set -> void\nMicrosoft.Identity.Web.GraphServiceClientOptions.User.get -> System.Security.Claims.ClaimsPrincipal?\nMicrosoft.Identity.Web.GraphServiceClientOptions.User.set -> void\n```\n\n----------------------------------------\n\nTITLE: Graph Authentication Provider Method Signatures\nDESCRIPTION: Defines the authentication provider class with methods for authenticating requests and constructor initialization. Includes nullable reference types support.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.GraphServiceClient/PublicAPI/netstandard2.0/InternalAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n#nullable enable\nMicrosoft.Identity.Web.GraphAuthenticationProvider.AuthenticateRequestAsync(Microsoft.Kiota.Abstractions.RequestInformation! request, System.Collections.Generic.Dictionary<string!, object!>? additionalAuthenticationContext = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!\nMicrosoft.Identity.Web.GraphAuthenticationProvider.GraphAuthenticationProvider(Microsoft.Identity.Abstractions.IAuthorizationHeaderProvider! authorizationHeaderProvider, Microsoft.Identity.Web.GraphServiceClientOptions! defaultAuthenticationOptions) -> void\n```\n\n----------------------------------------\n\nTITLE: Implementing Certificate Change Handler Interface - Microsoft Identity Web Experimental - C#\nDESCRIPTION: Defines the ICertificatesObserver interface for responding to changes in client certificates using the OnClientCertificateChanged method. The interface expects a CertificateChangeEventArg instance encapsulating event context; implementers can hook into certification change events for extensibility. There are no external dependencies except Microsoft Identity Web Experimental namespace types. The method does not return a value and is meant to be implemented by event observers.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.TokenAcquisition/PublicAPI/net472/PublicAPI.Shipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Identity.Web.Experimental.ICertificatesObserver\nMicrosoft.Identity.Web.Experimental.ICertificatesObserver.OnClientCertificateChanged(Microsoft.Identity.Web.Experimental.CertificateChangeEventArg! e) -> void\n\n```\n\n----------------------------------------\n\nTITLE: Base Request Extension Methods\nDESCRIPTION: Extension methods for customizing authentication behavior of base requests including app-only auth, scopes, and user claims.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.MicrosoftGraphBeta/PublicAPI/net7.0/PublicAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic static class BaseRequestExtensions\n{\n    public static T WithAppOnly<T>(this T baseRequest, bool appOnly = true, string? tenant = null)\n    public static T WithAuthenticationOptions<T>(this T baseRequest, Action<AuthorizationHeaderProviderOptions> overrideAuthenticationOptions)\n    public static T WithAuthenticationScheme<T>(this T baseRequest, string authenticationScheme)\n    public static T WithScopes<T>(this T baseRequest, params string[] scopes)\n    public static T WithUser<T>(this T baseRequest, ClaimsPrincipal user)\n}\n```\n\n----------------------------------------\n\nTITLE: Web API Authentication Builder Extensions\nDESCRIPTION: Extension methods for configuring web API authentication and OpenID Connect options in ASP.NET Core applications\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net9.0/InternalAPI.Shipped.txt#2025-04-23_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.MicrosoftIdentityWebApiAuthenticationBuilder.CallsWebApiImplementation(Microsoft.Extensions.DependencyInjection.IServiceCollection! services, string! jwtBearerAuthenticationScheme, System.Action<Microsoft.Identity.Client.ConfidentialClientApplicationOptions!>! configureConfidentialClientApplicationOptions, Microsoft.Extensions.Configuration.IConfigurationSection? configurationSection = null) -> void\nstatic Microsoft.Identity.Web.MicrosoftIdentityWebAppAuthenticationBuilderExtensions.PopulateOpenIdOptionsFromMergedOptions(Microsoft.AspNetCore.Authentication.OpenIdConnect.OpenIdConnectOptions! options, Microsoft.Identity.Web.MergedOptions! mergedOptions) -> void\n```\n\n----------------------------------------\n\nTITLE: Implementing Graph Authentication Provider Methods\nDESCRIPTION: C# class method signatures for Microsoft.Identity.Web.GraphAuthenticationProvider including authentication request handling and constructor initialization\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.GraphServiceClient/PublicAPI/net7.0/InternalAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n#nullable enable\nMicrosoft.Identity.Web.GraphAuthenticationProvider.AuthenticateRequestAsync(Microsoft.Kiota.Abstractions.RequestInformation! request, System.Collections.Generic.Dictionary<string!, object!>? additionalAuthenticationContext = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!\nMicrosoft.Identity.Web.GraphAuthenticationProvider.GraphAuthenticationProvider(Microsoft.Identity.Abstractions.IAuthorizationHeaderProvider! authorizationHeaderProvider, Microsoft.Identity.Web.GraphServiceClientOptions! defaultAuthenticationOptions) -> void\n```\n\n----------------------------------------\n\nTITLE: Coloring Open Iconic SVG Sprite Icons with CSS\nDESCRIPTION: This CSS snippet demonstrates how to change the color of an Open Iconic icon embedded using the SVG sprite method. It targets the `<use>` element via its specific class (e.g., `.icon-account-login`) and sets the `fill` property to the desired color.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/tests/DevApps/blazorserver-calls-api/Client/wwwroot/css/open-iconic/README.md#2025-04-23_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n.icon-account-login {\n  fill: #f00;\n}\n```\n\n----------------------------------------\n\nTITLE: Debugging Token Acquisition in C#\nDESCRIPTION: This code snippet shows how to enable debug logging for Microsoft.Identity.Web to troubleshoot token acquisition issues. It demonstrates setting the log level to Debug for Microsoft namespace.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.GraphServiceClient/PublicAPI/net6.0/InternalAPI.Unshipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n{\n  \"Logging\": {\n    \"LogLevel\": {\n      \"Default\": \"Information\",\n      \"Microsoft\": \"Debug\",\n      \"Microsoft.Hosting.Lifetime\": \"Information\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Name Property in OidcIdpSignedAssertionLoader (C#)\nDESCRIPTION: Retrieves the `Name` property from an `OidcIdpSignedAssertionLoader` instance. This property returns a string representing the name or identifier associated with this specific credential loader.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.OidcFIC/PublicAPI/net8.0/InternalAPI.Shipped.txt#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.Identity.Web.OidcFic.OidcIdpSignedAssertionLoader.Name.get -> string!\n```\n\n----------------------------------------\n\nTITLE: Microsoft Graph Service Collection Extensions\nDESCRIPTION: Extension methods for IServiceCollection to add Microsoft Graph services with optional configuration.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.MicrosoftGraphBeta/PublicAPI/net6.0/PublicAPI.Shipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.Identity.Web.GraphServiceCollectionExtensions.AddMicrosoftGraph(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!\nstatic Microsoft.Identity.Web.GraphServiceCollectionExtensions.AddMicrosoftGraph(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, System.Action<Microsoft.Identity.Web.MicrosoftGraphOptions!>! configureMicrosoftGraphOptions) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!\n```\n\n----------------------------------------\n\nTITLE: Viewing Available Microsoft Identity Web Templates\nDESCRIPTION: Command to view the list of available Microsoft Identity Web templates after installation. This shows the templates that can be used for creating ASP.NET Core apps with authentication.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net7.0/PublicAPI.Unshipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndotnet new --list\n```\n\n----------------------------------------\n\nTITLE: Authority Helper Methods\nDESCRIPTION: Static methods for building and validating authority URLs\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net6.0/InternalAPI.Shipped.txt#2025-04-23_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.AuthorityHelpers.BuildAuthority(Microsoft.Identity.Web.MicrosoftIdentityOptions! options) -> string!\nstatic Microsoft.Identity.Web.AuthorityHelpers.BuildCiamAuthorityIfNeeded(string! authority, out bool preserveAuthority) -> string?\nstatic Microsoft.Identity.Web.AuthorityHelpers.EnsureAuthorityIsV2(string! authority) -> string!\nstatic Microsoft.Identity.Web.AuthorityHelpers.GetAuthorityWithoutQueryIfNeeded(Microsoft.Identity.Web.MicrosoftIdentityOptions! options) -> string!\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Downstream APIs from Configuration Section in C#\nDESCRIPTION: Extends IServiceCollection to add multiple downstream APIs from a configuration section. This method allows for bulk configuration of multiple downstream APIs using a single configuration section.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.DownstreamApi/PublicAPI/net7.0/PublicAPI.Shipped.txt#2025-04-23_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.DownstreamApiExtensions.AddDownstreamApis(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, Microsoft.Extensions.Configuration.IConfigurationSection! configurationSection) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!\n```\n\n----------------------------------------\n\nTITLE: Declaring AzureADB2COpenIDConnectEventHandlers Class in C#\nDESCRIPTION: Defines a class for handling Azure AD B2C OpenID Connect events. It includes methods for handling redirect to identity provider and remote failure events, as well as properties for accessing options and scheme name.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net9.0/InternalAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.AzureADB2COpenIDConnectEventHandlers\nMicrosoft.Identity.Web.AzureADB2COpenIDConnectEventHandlers.AzureADB2COpenIDConnectEventHandlers(string! schemeName, Microsoft.Identity.Web.MicrosoftIdentityOptions! options, Microsoft.Identity.Web.ILoginErrorAccessor! errorAccessor) -> void\nMicrosoft.Identity.Web.AzureADB2COpenIDConnectEventHandlers.OnRedirectToIdentityProvider(Microsoft.AspNetCore.Authentication.OpenIdConnect.RedirectContext! context) -> System.Threading.Tasks.Task!\nMicrosoft.Identity.Web.AzureADB2COpenIDConnectEventHandlers.OnRemoteFailure(Microsoft.AspNetCore.Authentication.RemoteFailureContext! context) -> System.Threading.Tasks.Task!\nMicrosoft.Identity.Web.AzureADB2COpenIDConnectEventHandlers.Options.get -> Microsoft.Identity.Web.MicrosoftIdentityOptions!\nMicrosoft.Identity.Web.AzureADB2COpenIDConnectEventHandlers.SchemeName.get -> string!\n```\n\n----------------------------------------\n\nTITLE: Authenticating Graph API Requests in C#\nDESCRIPTION: The AuthenticateRequestAsync method authenticates Graph API requests using the provided authorization header provider and authentication options.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.GraphServiceClient/PublicAPI/net8.0/InternalAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.Identity.Web.GraphAuthenticationProvider.AuthenticateRequestAsync(Microsoft.Kiota.Abstractions.RequestInformation! request, System.Collections.Generic.Dictionary<string!, object!>? additionalAuthenticationContext = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!\n```\n\n----------------------------------------\n\nTITLE: TokenAcquisitionAuthenticationProvider Class Definition\nDESCRIPTION: Authentication provider class that implements request authentication using token acquisition. Contains constructor and authentication method.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.MicrosoftGraph/PublicAPI/net9.0/InternalAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class TokenAcquisitionAuthenticationProvider\n{\n    public TokenAcquisitionAuthenticationProvider(IAuthorizationHeaderProvider authorizationHeaderProvider, TokenAcquisitionAuthenticationProviderOption options);\n    public Task AuthenticateRequestAsync(HttpRequestMessage request);\n}\n```\n\n----------------------------------------\n\nTITLE: Linking to Default Open Iconic Stylesheet\nDESCRIPTION: HTML code to include the default Open Iconic stylesheet for standalone use without a framework.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/ProjectTemplates/templates/ComponentsWebAssembly-CSharp/Client/wwwroot/css/open-iconic/README.md#2025-04-23_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<link href=\"/open-iconic/font/css/open-iconic.css\" rel=\"stylesheet\">\n```\n\n----------------------------------------\n\nTITLE: Microsoft Graph Options Class Definition\nDESCRIPTION: Defines configuration options for Microsoft Graph integration including base URL and scopes settings.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.MicrosoftGraph/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class MicrosoftGraphOptions\n{\n    public string BaseUrl { get; set; }\n    public string? Scopes { get; set; }\n    public MicrosoftGraphOptions() { }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Token Validation for Microsoft Identity Web in ASP.NET Core\nDESCRIPTION: This JSON configuration sets up token validation parameters for Microsoft Identity Web. It specifies the issuer, audience, and allowed tenants for validating tokens in a multi-tenant scenario.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.GraphServiceClient/PublicAPI/net7.0/InternalAPI.Unshipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"AzureAd\": {\n    \"Instance\": \"https://login.microsoftonline.com/\",\n    \"TenantId\": \"common\",\n    \"ClientId\": \"11111111-1111-1111-11111111111111111\",\n    \"CallbackPath\": \"/signin-oidc\",\n    \"SignedOutCallbackPath \": \"/signout-oidc\",\n\n    // To call an API\n    \"ClientSecret\": \"secret-from-app-registration\",\n    \"ClientCertificates\" : [\n    ],\n\n    // If you want to restrict access to Azure AD tenants, update this\n    \"TokenValidationParameters\": {\n        \"ValidateIssuer\": true,\n        \"ValidIssuers\": [\n          \"https://login.microsoftonline.com/{tenantId}/v2.0\", \n          \"https://sts.windows.net/contoso.com\"\n        ],\n\n        \"ValidateAudience\": true,\n        \"ValidAudiences\": [\n          \"11111111-1111-1111-11111111111111111\",\n          \"api://1111\"\n        ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Graph Beta Service Client to DI Container\nDESCRIPTION: Extension method to register Microsoft Graph Beta client with default lifetime in the dependency injection container.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.GraphServiceClientBeta/PublicAPI/net472/InternalAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.Identity.Web.GraphBetaServiceCollectionExtensions.AddGraphBetaServiceClient(Microsoft.Extensions.DependencyInjection.IServiceCollection services) -> void\n```\n\n----------------------------------------\n\nTITLE: Implementing GraphServiceCollectionExtensions in C#\nDESCRIPTION: Extension methods for adding Microsoft Graph services to the dependency injection container.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.MicrosoftGraphBeta/PublicAPI/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic static class GraphServiceCollectionExtensions\n{\n    public static IServiceCollection AddMicrosoftGraph(this IServiceCollection services);\n    public static IServiceCollection AddMicrosoftGraph(this IServiceCollection services, Action<MicrosoftGraphOptions> configureMicrosoftGraphOptions);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-Tenant Application in C#\nDESCRIPTION: This snippet demonstrates how to configure a multi-tenant application using Microsoft.Identity.Web. It shows the setup for both the Azure portal and the application's configuration file.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.GraphServiceClient/PublicAPI/net6.0/InternalAPI.Unshipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n{\n  \"AzureAd\": {\n    \"Instance\": \"https://login.microsoftonline.com/\",\n    \"Domain\": \"contoso.onmicrosoft.com\",\n    \"TenantId\": \"organizations\",\n    \"ClientId\": \"[Client_id-of-web-app]\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OWIN Cookie Authentication in .NET Core\nDESCRIPTION: This snippet shows how to properly configure OWIN cookie authentication middleware in a .NET Core application. It includes options for setting up the authentication scheme, cookie properties, and token validation parameters.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net7.0/InternalAPI.Unshipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\napp.UseCookieAuthentication(new CookieAuthenticationOptions\n{\n    AuthenticationType = DefaultAuthenticationTypes.ApplicationCookie,\n    CookieName = \".AspNet.SharedCookie\",\n    LoginPath = new PathString(\"/Account/Login\"),\n    Provider = new CookieAuthenticationProvider\n    {\n        OnValidateIdentity =\n            SecurityStampValidator.OnValidateIdentity<ApplicationUserManager, ApplicationUser>(\n                validateInterval: TimeSpan.FromMinutes(30),\n                regenerateIdentity: (manager, user) => user.GenerateUserIdentityAsync(manager))\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating ASP.NET Core Web App with Azure AD B2C Authentication and Custom Policy\nDESCRIPTION: Command to create an ASP.NET Core web application with Microsoft Identity Web integration for Azure AD B2C with custom policies. The command includes parameters for instance, tenant ID, client ID, callback path, and policy names.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/net7.0/PublicAPI.Unshipped.txt#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndotnet new webapp2 --auth B2C --aad-b2c-instance \"[Enter the instance of Azure AD B2C, e.g. https://fabrikam.b2clogin.com/]\" --susi-policy-id \"[Enter the sign up / sign in policy ID for B2C, e.g. b2c_1_susi]\" --domain [Enter your domain name, e.g. contoso.onmicrosoft.com] --client-id \"[Enter the Client (application) ID of the app registration from the Azure portal, e.g. ba74781c2-53c2-442a-97c2-3d60re42f403]\" --tenant-id \"[Enter the tenant ID here to use from the Azure portal, e.g. 'contoso.onmicrosoft.com' or 'da41245a5-11b3-996c-00a8-4d99re19f292']\" --callback-path \"/signin-oidc\" --reset-password-policy-id \"[Enter the password reset policy ID for B2C, e.g. b2c_1_reset]\" --edit-profile-policy-id \"[Enter the edit profile policy ID for B2C, e.g. b2c_1_edit_profile]\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-Tenant Azure AD Authentication in ASP.NET Core\nDESCRIPTION: This snippet illustrates how to configure multi-tenant Azure AD authentication in an ASP.NET Core application. It sets up the authentication scheme and adds options for handling multiple tenants, including custom tenant validation.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web/PublicAPI/netstandard2.0/PublicAPI.Unshipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddAuthentication(OpenIdConnectDefaults.AuthenticationScheme)\n    .AddMicrosoftIdentityWebApp(options =>\n    {\n        Configuration.Bind(\"AzureAd\", options);\n        options.Events.OnTokenValidated = async context =>\n        {\n            string[] validTenantIds = Configuration.GetSection(\"ValidTenantIds\").Get<string[]>();\n            string tenantId = context.SecurityToken.Claims.FirstOrDefault(x => x.Type == \"tid\" || x.Type == \"http://schemas.microsoft.com/identity/claims/tenantid\")?.Value;\n\n            if (!validTenantIds.Contains(tenantId))\n            {\n                throw new UnauthorizedAccessException(\"This tenant is not authorized to access this application.\");\n            }\n        };\n    });\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure AD Authentication Services in ASP.NET Core\nDESCRIPTION: This snippet shows how to configure Azure AD authentication services in the Startup.cs file of an ASP.NET Core application. It demonstrates adding Microsoft Identity authentication and configuring options for Azure AD.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.GraphServiceClient/PublicAPI/net6.0/PublicAPI.Unshipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic void ConfigureServices(IServiceCollection services)\n{\n    services.AddAuthentication(OpenIdConnectDefaults.AuthenticationScheme)\n        .AddMicrosoftIdentityWebApp(Configuration.GetSection(\"AzureAd\"));\n\n    services.AddControllersWithViews(options =>\n    {\n        var policy = new AuthorizationPolicyBuilder()\n            .RequireAuthenticatedUser()\n            .Build();\n        options.Filters.Add(new AuthorizeFilter(policy));\n    });\n\n    services.AddRazorPages()\n        .AddMicrosoftIdentityUI();\n}\n```\n\n----------------------------------------\n\nTITLE: Abstract ClientAssertionProviderBase Method Definition in C#\nDESCRIPTION: Definition of the abstract method for getting client assertions in the base provider class. This method is implemented by derived classes to generate client assertions for authentication.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/src/Microsoft.Identity.Web.Certificateless/PublicAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nabstract Microsoft.Identity.Web.ClientAssertionProviderBase.GetClientAssertionAsync(Microsoft.Identity.Client.AssertionRequestOptions? assertionRequestOptions) -> System.Threading.Tasks.Task<Microsoft.Identity.Web.ClientAssertion!>!\n```\n\n----------------------------------------\n\nTITLE: Deprecating ClaimsIdentity Constructors in C#\nDESCRIPTION: This snippet lists multiple constructors of the ClaimsIdentity class that are now deprecated. For each constructor, it recommends using the CaseSensitiveClaimsIdentity from the Microsoft.IdentityModel.Tokens namespace instead.\nSOURCE: https://github.com/azuread/microsoft-identity-web/blob/master/BannedSymbols.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nM:System.Security.Claims.ClaimsIdentity.#ctor(); Use Microsoft.IdentityModel.Tokens.CaseSensitiveClaimsIdentity instead.\nM:System.Security.Claims.ClaimsIdentity.#ctor(System.Security.Principal.IIdentity); Use Microsoft.IdentityModel.Tokens.CaseSensitiveClaimsIdentity instead.\nM:System.Security.Claims.ClaimsIdentity.#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}); Use Microsoft.IdentityModel.Tokens.CaseSensitiveClaimsIdentity instead.\nM:System.Security.Claims.ClaimsIdentity.#ctor(System.String); Use Microsoft.IdentityModel.Tokens.CaseSensitiveClaimsIdentity instead.\nM:System.Security.Claims.ClaimsIdentity.#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String); Use Microsoft.IdentityModel.Tokens.CaseSensitiveClaimsIdentity instead.\nM:System.Security.Claims.ClaimsIdentity.#ctor(System.Security.Principal.IIdentity,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}); Use Microsoft.IdentityModel.Tokens.CaseSensitiveClaimsIdentity instead.\nM:System.Security.Claims.ClaimsIdentity.#ctor(System.String,System.String,System.String); Use Microsoft.IdentityModel.Tokens.CaseSensitiveClaimsIdentity instead.\nM:System.Security.Claims.ClaimsIdentity.#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String,System.String,System.String); Use Microsoft.IdentityModel.Tokens.CaseSensitiveClaimsIdentity instead.\nM:System.Security.Claims.ClaimsIdentity.#ctor(System.Security.Principal.IIdentity,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String,System.String,System.String); Use Microsoft.IdentityModel.Tokens.CaseSensitiveClaimsIdentity instead.\nM:System.Security.Claims.ClaimsIdentity.#ctor(System.IO.BinaryReader); Use Microsoft.IdentityModel.Tokens.CaseSensitiveClaimsIdentity instead.\n```"
  }
]