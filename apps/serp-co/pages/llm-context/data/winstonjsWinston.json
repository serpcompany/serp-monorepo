[
  {
    "owner": "winstonjs",
    "repo": "winston",
    "content": "TITLE: Initializing Winston Logger with Multiple Transports\nDESCRIPTION: Creates a Winston logger instance with file and console transports. Configures error logging to error.log and combined logging to combined.log. Adds console logging in non-production environments.\nSOURCE: https://github.com/winstonjs/winston/blob/master/README.md#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst winston = require('winston');\n\nconst logger = winston.createLogger({\n  level: 'info',\n  format: winston.format.json(),\n  defaultMeta: { service: 'user-service' },\n  transports: [\n    new winston.transports.File({ filename: 'error.log', level: 'error' }),\n    new winston.transports.File({ filename: 'combined.log' }),\n  ],\n});\n\nif (process.env.NODE_ENV !== 'production') {\n  logger.add(new winston.transports.Console({\n    format: winston.format.simple(),\n  }));\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Winston Logger\nDESCRIPTION: Demonstrates creation of a basic Winston logger with console and file transports.\nSOURCE: https://github.com/winstonjs/winston/blob/master/README.md#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst logger = winston.createLogger({\n  transports: [\n    new winston.transports.Console(),\n    new winston.transports.File({ filename: 'combined.log' })\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Winston Logging Levels\nDESCRIPTION: Defines the standard logging levels used by Winston, conforming to RFC5424 severity ordering. Levels range from error (0) to silly (6).\nSOURCE: https://github.com/winstonjs/winston/blob/master/README.md#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst levels = {\n  error: 0,\n  warn: 1,\n  info: 2,\n  http: 3,\n  verbose: 4,\n  debug: 5,\n  silly: 6\n};\n```\n\n----------------------------------------\n\nTITLE: Winston Transport Configuration\nDESCRIPTION: Demonstrates how to add and remove transports from winston loggers.\nSOURCE: https://github.com/winstonjs/winston/blob/master/README.md#2025-04-19_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nconst files = new winston.transports.File({ filename: 'combined.log' });\nconst console = new winston.transports.Console();\n\nwinston.add(console);\nwinston.add(files);\nwinston.remove(console);\n```\n\n----------------------------------------\n\nTITLE: Basic Winston Logging Level Usage\nDESCRIPTION: Demonstrates various ways to log messages at different levels using both logger instance and default winston logger.\nSOURCE: https://github.com/winstonjs/winston/blob/master/README.md#2025-04-19_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nlogger.log('silly', \"127.0.0.1 - there's no place like home\");\nlogger.log('debug', \"127.0.0.1 - there's no place like home\");\nlogger.log('verbose', \"127.0.0.1 - there's no place like home\");\nlogger.log('info', \"127.0.0.1 - there's no place like home\");\nlogger.log('warn', \"127.0.0.1 - there's no place like home\");\nlogger.log('error', \"127.0.0.1 - there's no place like home\");\nlogger.info(\"127.0.0.1 - there's no place like home\");\nlogger.warn(\"127.0.0.1 - there's no place like home\");\nlogger.error(\"127.0.0.1 - there's no place like home\");\n\nwinston.log('info', \"127.0.0.1 - there's no place like home\");\nwinston.info(\"127.0.0.1 - there's no place like home\");\n```\n\n----------------------------------------\n\nTITLE: Using Winston Default Logger\nDESCRIPTION: Shows basic usage of winston's default logger instance including log levels and transport configuration.\nSOURCE: https://github.com/winstonjs/winston/blob/master/README.md#2025-04-19_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nconst winston = require('winston');\n\nwinston.log('info', 'Hello distributed log files!');\nwinston.info('Hello again distributed logs');\n\nwinston.level = 'debug';\nwinston.log('debug', 'Now my debug messages are written to console!');\n```\n\n----------------------------------------\n\nTITLE: Adding File Transport in Winston (JavaScript)\nDESCRIPTION: Shows how to add a File transport to a Winston logger. The File transport supports various options for file writing, including log rotation, file size limits, and compression.\nSOURCE: https://github.com/winstonjs/winston/blob/master/docs/transports.md#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlogger.add(new winston.transports.File(options));\n```\n\n----------------------------------------\n\nTITLE: Managing Winston Logger Transports\nDESCRIPTION: Shows how to add, remove, and modify transports for an existing Winston logger instance.\nSOURCE: https://github.com/winstonjs/winston/blob/master/README.md#2025-04-19_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst files = new winston.transports.File({ filename: 'combined.log' });\nconst console = new winston.transports.Console();\n\nlogger\n  .clear()          // Remove all transports\n  .add(console)     // Add console transport\n  .add(files)       // Add file transport\n  .remove(console); // Remove console transport\n```\n\n----------------------------------------\n\nTITLE: Custom Logging Levels Configuration\nDESCRIPTION: Demonstrates how to define and use custom logging levels with color configuration.\nSOURCE: https://github.com/winstonjs/winston/blob/master/README.md#2025-04-19_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nconst myCustomLevels = {\n  levels: {\n    foo: 0,\n    bar: 1,\n    baz: 2,\n    foobar: 3\n  },\n  colors: {\n    foo: 'blue',\n    bar: 'green',\n    baz: 'yellow',\n    foobar: 'red'\n  }\n};\n\nconst customLevelLogger = winston.createLogger({\n  levels: myCustomLevels.levels\n});\n\ncustomLevelLogger.foobar('some foobar level-ed message');\n```\n\n----------------------------------------\n\nTITLE: Adding Console Transport in Winston (JavaScript)\nDESCRIPTION: Demonstrates how to add a Console transport to a Winston logger instance. The Console transport supports options like log level, silent mode, end-of-line characters, and stderr logging levels.\nSOURCE: https://github.com/winstonjs/winston/blob/master/docs/transports.md#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlogger.add(new winston.transports.Console(options));\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Formats in Winston\nDESCRIPTION: Shows how to combine multiple format functions into a single format using format.combine(). This allows for chaining multiple formatting operations in sequence.\nSOURCE: https://github.com/winstonjs/winston/blob/master/README.md#2025-04-19_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst { createLogger, format, transports } = require('winston');\nconst { combine, timestamp, label, prettyPrint } = format;\n\nconst logger = createLogger({\n  format: combine(\n    label({ label: 'right meow!' }),\n    timestamp(),\n    prettyPrint()\n  ),\n  transports: [new transports.Console()]\n})\n\nlogger.log({\n  level: 'info',\n  message: 'What time is the testing at?'\n});\n// Outputs:\n// { level: 'info',\n//   message: 'What time is the testing at?',\n//   label: 'right meow!',\n//   timestamp: '2017-09-30T03:57:26.875Z' }\n```\n\n----------------------------------------\n\nTITLE: Multiple File Transports Configuration\nDESCRIPTION: Shows how to configure Winston with multiple file transports for different log levels.\nSOURCE: https://github.com/winstonjs/winston/blob/master/README.md#2025-04-19_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nconst logger = winston.createLogger({\n  transports: [\n    new winston.transports.File({\n      filename: 'combined.log',\n      level: 'info'\n    }),\n    new winston.transports.File({\n      filename: 'errors.log',\n      level: 'error'\n    })\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Format in Winston\nDESCRIPTION: Shows how to use Winston's format system to create a custom log format. This example combines multiple formatters including label, timestamp, and a custom printf format to generate formatted log messages.\nSOURCE: https://github.com/winstonjs/winston/blob/master/CHANGELOG.md#2025-04-19_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst { createLogger, format, transports } = require('winston');\nconst { combine, timestamp, label, printf } = format;\n\nconst myFormat = printf(info => {\n  return `${info.timestamp} [${info.label}] ${info.level}: ${info.message}`;\n});\n\nconst logger = createLogger({\n  combine(\n    label({ label: 'right meow!' }),\n    timestamp(),\n    myFormat\n  ),\n  transports: [new transports.Console()]\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Child Loggers in Winston\nDESCRIPTION: Shows how to create child loggers that inherit from a parent logger with additional metadata overrides.\nSOURCE: https://github.com/winstonjs/winston/blob/master/README.md#2025-04-19_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst logger = winston.createLogger({\n  transports: [\n    new winston.transports.Console(),\n  ]\n});\n\nconst childLogger = logger.child({ requestId: '451' });\n```\n\n----------------------------------------\n\nTITLE: Enabling String Interpolation in Winston with format.splat\nDESCRIPTION: Demonstrates how to enable string interpolation in Winston logs using format.splat() and format.simple(). This allows for printf-style formatting with placeholders in log messages.\nSOURCE: https://github.com/winstonjs/winston/blob/master/README.md#2025-04-19_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst { createLogger, format, transports } = require('winston');\nconst logger = createLogger({\n  format: format.combine(\n    format.splat(),\n    format.simple()\n  ),\n  transports: [new transports.Console()]\n});\n\n// info: test message my string {}\nlogger.log('info', 'test message %s', 'my string');\n\n// info: test message 123 {}\nlogger.log('info', 'test message %d', 123);\n\n// info: test message first second {number: 123}\nlogger.log('info', 'test message %s, %s', 'first', 'second', { number: 123 });\n```\n\n----------------------------------------\n\nTITLE: Configuring Transport Log Levels\nDESCRIPTION: Shows how to set up Winston with different log levels for console and file transports using syslog levels.\nSOURCE: https://github.com/winstonjs/winston/blob/master/README.md#2025-04-19_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nconst logger = winston.createLogger({\n  levels: winston.config.syslog.levels,\n  transports: [\n    new winston.transports.Console({ level: 'error' }),\n    new winston.transports.File({\n      filename: 'combined.log',\n      level: 'info'\n    })\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Filtering Log Messages with Custom Format in Winston\nDESCRIPTION: Shows how to create a custom format that filters log messages based on their properties. This example filters out messages marked as private by returning false from the format function.\nSOURCE: https://github.com/winstonjs/winston/blob/master/README.md#2025-04-19_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst { createLogger, format, transports } = require('winston');\n\n// Ignore log messages if they have { private: true }\nconst ignorePrivate = format((info, opts) => {\n  if (info.private) { return false; }\n  return info;\n});\n\nconst logger = createLogger({\n  format: format.combine(\n    ignorePrivate(),\n    format.json()\n  ),\n  transports: [new transports.Console()]\n});\n\n// Outputs: {\"level\":\"error\",\"message\":\"Public error to share\"}\nlogger.log({\n  level: 'error',\n  message: 'Public error to share'\n});\n\n// Messages with { private: true } will not be written when logged.\nlogger.log({\n  private: true,\n  level: 'error',\n  message: 'This is super secret - hide it.'\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Printf Format in Winston\nDESCRIPTION: Demonstrates creating a custom printf format for Winston using template literals. This approach allows for highly customized log formatting using the built-in printf formatter.\nSOURCE: https://github.com/winstonjs/winston/blob/master/README.md#2025-04-19_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst { createLogger, format, transports } = require('winston');\nconst { combine, timestamp, label, printf } = format;\n\nconst myFormat = printf(({ level, message, label, timestamp }) => {\n  return `${timestamp} [${label}] ${level}: ${message}`;\n});\n\nconst logger = createLogger({\n  format: combine(\n    label({ label: 'right meow!' }),\n    timestamp(),\n    myFormat\n  ),\n  transports: [new transports.Console()]\n});\n```\n\n----------------------------------------\n\nTITLE: Dynamic Transport Level Changes\nDESCRIPTION: Example of dynamically changing log levels for different transports during runtime.\nSOURCE: https://github.com/winstonjs/winston/blob/master/README.md#2025-04-19_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nconst transports = {\n  console: new winston.transports.Console({ level: 'warn' }),\n  file: new winston.transports.File({ filename: 'combined.log', level: 'error' })\n};\n\nconst logger = winston.createLogger({\n  transports: [\n    transports.console,\n    transports.file\n  ]\n});\n\nlogger.info('Will not be logged in either transport!');\ntransports.console.level = 'info';\ntransports.file.level = 'info';\nlogger.info('Will be logged in both transports!');\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Volume Format in Winston\nDESCRIPTION: Demonstrates creating a custom format function that can modify log messages based on options. This example creates a 'volume' format that can either convert messages to uppercase or lowercase.\nSOURCE: https://github.com/winstonjs/winston/blob/master/README.md#2025-04-19_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst { format } = require('winston');\n\nconst volume = format((info, opts) => {\n  if (opts.yell) {\n    info.message = info.message.toUpperCase();\n  } else if (opts.whisper) {\n    info.message = info.message.toLowerCase();\n  }\n\n  return info;\n});\n\n// `volume` is now a function that returns instances of the format.\nconst scream = volume({ yell: true });\nconsole.dir(scream.transform({\n  level: 'info',\n  message: `sorry for making you YELL in your head!`\n}, scream.options));\n// {\n//   level: 'info'\n//   message: 'SORRY FOR MAKING YOU YELL IN YOUR HEAD!'\n// }\n\n// `volume` can be used multiple times to create different formats.\nconst whisper = volume({ whisper: true });\nconsole.dir(whisper.transform({\n  level: 'info',\n  message: `WHY ARE THEY MAKING US YELL SO MUCH!`\n}, whisper.options));\n// {\n//   level: 'info'\n//   message: 'why are they making us yell so much!'\n// }\n```\n\n----------------------------------------\n\nTITLE: Adding Http Transport in Winston (JavaScript)\nDESCRIPTION: Illustrates adding an Http transport to a Winston logger. This transport allows logging to a remote HTTP endpoint with options for authentication, SSL, and batch logging.\nSOURCE: https://github.com/winstonjs/winston/blob/master/docs/transports.md#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nlogger.add(new winston.transports.Http(options));\n```\n\n----------------------------------------\n\nTITLE: Custom Transport Implementation\nDESCRIPTION: Example of creating a custom transport by extending winston-transport base class.\nSOURCE: https://github.com/winstonjs/winston/blob/master/README.md#2025-04-19_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nconst Transport = require('winston-transport');\nconst util = require('util');\n\nmodule.exports = class YourCustomTransport extends Transport {\n  constructor(opts) {\n    super(opts);\n  }\n\n  log(info, callback) {\n    setImmediate(() => {\n      this.emit('logged', info);\n    });\n\n    callback();\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Winston Multiple Logger Configuration\nDESCRIPTION: Shows how to work with multiple logger instances using winston.loggers for different application categories.\nSOURCE: https://github.com/winstonjs/winston/blob/master/README.md#2025-04-19_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nconst winston = require('winston');\nconst { format } = winston;\nconst { combine, label, json } = format;\n\nwinston.loggers.add('category1', {\n  format: combine(\n    label({ label: 'category one' }),\n    json()\n  ),\n  transports: [\n    new winston.transports.Console({ level: 'silly' }),\n    new winston.transports.File({ filename: 'somefile.log' })\n  ]\n});\n\nwinston.loggers.add('category2', {\n  format: combine(\n    label({ label: 'category two' }),\n    json()\n  ),\n  transports: [\n    new winston.transports.Http({ host: 'localhost', port:8080 })\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: NPM Logging Levels Definition in Winston\nDESCRIPTION: Shows the NPM logging level definitions used as the default in Winston. These levels are prioritized from 0 to 6, with lower numbers representing higher priority levels.\nSOURCE: https://github.com/winstonjs/winston/blob/master/README.md#2025-04-19_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  error: 0,\n  warn: 1,\n  info: 2,\n  http: 3,\n  verbose: 4,\n  debug: 5,\n  silly: 6\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Format for Rewriting in Winston 3\nDESCRIPTION: Demonstrates how to implement a custom format to replace the rewriter functionality from Winston 2, using the new format system in Winston 3.\nSOURCE: https://github.com/winstonjs/winston/blob/master/UPGRADE-3.0.md#2025-04-19_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst maskFormat = winston.format(info => {\n  // You can CHANGE existing property values\n  if (info.creditCard) {\n    info.creditCard = maskCardNumbers(info.creditCard);\n  }\n\n  // You can also ADD NEW properties if you wish\n  info.hasCreditCard = !!info.creditCard;\n\n  return info;\n});\n\nconst logger = winston.createLogger({\n  format: winston.format.combine(\n    maskFormat(),\n    winston.format.json()\n  )\n});\n\nlogger.info('transaction ok', { creditCard: 123456789012345 });\n```\n\n----------------------------------------\n\nTITLE: Configuring Winston Logger with Custom Format and Console Transport\nDESCRIPTION: This snippet demonstrates how to create a Winston logger with a custom format using the logform module and a console transport. It showcases the modularity of Winston by explicitly importing and using different components.\nSOURCE: https://github.com/winstonjs/winston/blob/master/UPGRADE-3.0.md#2025-04-19_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst { createLogger, transports, format } = require('winston');\nconst Transport = require('winston-transport');\nconst logform = require('logform');\nconst { combine, timestamp, label, printf } = logform.format;\n\n// winston.format is require('logform')\nconsole.log(logform.format === format) // true\n\nconst logger = createLogger({\n  format: combine(\n    label({ label: 'right meow!' }),\n    timestamp(),\n    printf(nfo => {\n      return `${nfo.timestamp} [${nfo.label}] ${nfo.level}: ${nfo.message}`;\n    })\n  ),\n  transports: [new transports.Console()]\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Winston Promise Rejection Handling\nDESCRIPTION: Shows how to set up winston to handle and log unhandled promise rejections, either during logger creation or later in the application lifecycle.\nSOURCE: https://github.com/winstonjs/winston/blob/master/README.md#2025-04-19_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nconst { createLogger, transports } = require('winston');\n\n// Enable rejection handling when you create your logger.\nconst logger = createLogger({\n  transports: [\n    new transports.File({ filename: 'combined.log' })\n  ],\n  rejectionHandlers: [\n    new transports.File({ filename: 'rejections.log' })\n  ]\n});\n\n// Or enable it later on by adding a transport or using `.rejections.handle`\nconst logger = createLogger({\n  transports: [\n    new transports.File({ filename: 'combined.log' })\n  ]\n});\n\n// Call rejections.handle with a transport to handle rejections\nlogger.rejections.handle(\n  new transports.File({ filename: 'rejections.log' })\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Transports in Winston 3\nDESCRIPTION: Shows the correct way to add transports in Winston 3, emphasizing the use of transport instances instead of prototypes or classes.\nSOURCE: https://github.com/winstonjs/winston/blob/master/UPGRADE-3.0.md#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// DON'T DO THIS. It will no longer work\nlogger.add(winston.transports.Console);\n\n// Do this instead.\nlogger.add(new winston.transports.Console());\n```\n\n----------------------------------------\n\nTITLE: Streaming Winston Logs\nDESCRIPTION: Demonstrates how to stream logs from winston transports.\nSOURCE: https://github.com/winstonjs/winston/blob/master/README.md#2025-04-19_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nwinston.stream({ start: -1 }).on('log', function(log) {\n  console.log(log);\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Asynchronous Logging in Winston 3\nDESCRIPTION: Demonstrates how to handle asynchronous logging and wait for all logging to complete before exiting the process in Winston 3.\nSOURCE: https://github.com/winstonjs/winston/blob/master/UPGRADE-3.0.md#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlogger.log('info', 'some message');\nlogger.on('finish', () => process.exit());\nlogger.end();\n```\n\n----------------------------------------\n\nTITLE: Implementing Winston Logger with Worker Thread based Console Transport\nDESCRIPTION: This snippet illustrates how to create a Winston logger using the ConsoleTransportInWorker, which is a worker thread based async Console transport. It supports TypeScript and accepts the same options as the Console transport.\nSOURCE: https://github.com/winstonjs/winston/blob/master/docs/transports.md#2025-04-19_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as winston from 'winston';\nimport { ConsoleTransportInWorker } from '@rpi1337/winston-console-transport-in-worker';\n\n...\n\nexport const logger: winston.Logger = winston.createLogger({\n    format: combine(timestamp(), myFormat),\n    level: Level.INFO,\n    transports: [new ConsoleTransportInWorker()],\n});\n```\n\n----------------------------------------\n\nTITLE: Winston Profiling Implementation\nDESCRIPTION: Shows how to use winston's profiling mechanism to measure durations and log timing information.\nSOURCE: https://github.com/winstonjs/winston/blob/master/README.md#2025-04-19_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nlogger.profile('test');\n\nsetTimeout(function () {\n  logger.profile('test');\n}, 1000);\n```\n\n----------------------------------------\n\nTITLE: Creating Exception Handler in Winston 3\nDESCRIPTION: Demonstrates how to create an exception handler in Winston 3, replacing the removed winston.exception functionality.\nSOURCE: https://github.com/winstonjs/winston/blob/master/UPGRADE-3.0.md#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst exception = winston.ExceptionHandler();\n```\n\n----------------------------------------\n\nTITLE: Winston Timer Profiling\nDESCRIPTION: Demonstrates using winston's timer functionality for more granular profiling control.\nSOURCE: https://github.com/winstonjs/winston/blob/master/README.md#2025-04-19_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nconst profiler = logger.startTimer();\nsetTimeout(function () {\n  profiler.done({ message: 'Logging message' });\n}, 1000);\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Format for Filtering in Winston 3\nDESCRIPTION: Shows how to implement a custom format to replace the filtering functionality from Winston 2, using the new format system in Winston 3.\nSOURCE: https://github.com/winstonjs/winston/blob/master/UPGRADE-3.0.md#2025-04-19_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { createLogger, format, transports } = require('winston');\n\n// Ignore log messages if the have { private: true }\nconst isSecret = /super secret/;\nconst filterSecret = format((info, opts) => {\n  info.message = info.message.replace(isSecret, 'su*** se****');\n  return info;\n});\n\nconst logger = createLogger({\n  format: format.combine(\n    filterSecret(),\n    format.json()\n  ),\n  transports: [new transports.Console()]\n});\n\n// Outputs: {\"level\":\"error\",\"message\":\"Public error to share\"}\nlogger.log({\n  level: 'error',\n  message: 'Public error to share'\n});\n\n// Outputs: {\"level\":\"error\",\"message\":\"This is su*** se**** - hide it.\"}\nlogger.log({\n  level: 'error',\n  message: 'This is super secret - hide it.'\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Winston Logs\nDESCRIPTION: Shows how to query logs using Loggly-like options with winston's query interface.\nSOURCE: https://github.com/winstonjs/winston/blob/master/README.md#2025-04-19_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nconst options = {\n  from: new Date() - (24 * 60 * 60 * 1000),\n  until: new Date(),\n  limit: 10,\n  start: 0,\n  order: 'desc',\n  fields: ['message']\n};\n\nlogger.query(options, function (err, results) {\n  if (err) {\n    /* TODO: handle me */\n    throw err;\n  }\n\n  console.log(results);\n});\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Winston Splat Parameter Handling\nDESCRIPTION: Example showing how Winston's splat formatter handles message interpolation and additional metadata parameters. Illustrates the difference in behavior between winston < 3.2.0 and winston >= 3.2.0.\nSOURCE: https://github.com/winstonjs/winston/blob/master/CHANGELOG.md#2025-04-19_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { createLogger, format, transports } = require('winston');\nconst { splat } = format;\nconst { MESSAGE, LEVEL, SPLAT } = require('triple-beam');\n\nconst logger = createLogger({\n  format: format.combine(\n    format.splat(),\n    format.json()\n  ),\n  transports: [new transports.Console()]\n});\n\n// Expects two tokens, but four splat parameters provided.\nlogger.info(\n  'Let us %s for %j',   // message\n  'objects',           // used for %s\n  { label: 'sure' },   // used for %j\n  'lol', ['ok', 'why'] // Multiple additional meta values\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Info Object in Winston Logger\nDESCRIPTION: Demonstrates the basic structure of an info object in Winston with the required level and message properties. This is the fundamental data structure passed between components in the Winston logging system.\nSOURCE: https://github.com/winstonjs/winston/blob/master/README.md#2025-04-19_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst info = {\n  level: 'info',                 // Level of the logging message\n  message: 'Hey! Log something?' // Descriptive message being logged.\n};\n```\n\n----------------------------------------\n\nTITLE: Short-Circuit Evaluation with Combined Formats in Winston\nDESCRIPTION: Demonstrates how format.combine() will respect falsey values and stop evaluation of later formats in the chain. This can be used to conditionally apply formats or prevent errors.\nSOURCE: https://github.com/winstonjs/winston/blob/master/README.md#2025-04-19_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst { format } = require('winston');\nconst { combine, timestamp, label } = format;\n\nconst willNeverThrow = format.combine(\n  format(info => { return false })(), // Ignores everything\n  format(info => { throw new Error('Never reached') })()\n);\n```\n\n----------------------------------------\n\nTITLE: Automatic Message Concatenation Example in Winston\nDESCRIPTION: Shows how Winston automatically concatenates message properties when they appear in both the primary message and metadata object. This is useful for building composite log messages.\nSOURCE: https://github.com/winstonjs/winston/blob/master/README.md#2025-04-19_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nlogger.log('error', 'hello', { message: 'world' });\nlogger.info('hello', { message: 'world' });\n```\n\n----------------------------------------\n\nTITLE: RFC5424 Syslog Levels Definition in Winston\nDESCRIPTION: Shows the RFC5424 syslog logging level definitions used in Winston. These levels are prioritized from 0 to 7, with lower numbers representing higher priority levels.\nSOURCE: https://github.com/winstonjs/winston/blob/master/README.md#2025-04-19_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  emerg: 0,\n  alert: 1,\n  crit: 2,\n  error: 3,\n  warning: 4,\n  notice: 5,\n  info: 6,\n  debug: 7\n}\n```\n\n----------------------------------------\n\nTITLE: Default Logger Rejection Handling\nDESCRIPTION: Demonstrates how to configure rejection handling with winston's default logger instance.\nSOURCE: https://github.com/winstonjs/winston/blob/master/README.md#2025-04-19_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nwinston.rejections.handle(\n  new winston.transports.File({ filename: 'path/to/rejections.log' })\n);\n\nwinston.add(new winston.transports.File({\n  filename: 'path/to/combined.log',\n  handleRejections: true\n}));\n```\n\n----------------------------------------\n\nTITLE: Adding Redis Transport to Winston Logger\nDESCRIPTION: This snippet illustrates how to add the Redis transport to a Winston logger. It accepts options for connecting to a Redis server and configuring log storage and streaming.\nSOURCE: https://github.com/winstonjs/winston/blob/master/docs/transports.md#2025-04-19_snippet_44\n\nLANGUAGE: javascript\nCODE:\n```\nconst WinstonRedis = require('winston-redis');\nlogger.add(new WinstonRedis(options));\n```\n\n----------------------------------------\n\nTITLE: Installing and Configuring MongoDB Transport with Winston\nDESCRIPTION: Code example showing how to add MongoDB transport to Winston logger. Requires the winston-mongodb module to be installed separately.\nSOURCE: https://github.com/winstonjs/winston/blob/master/docs/transports.md#2025-04-19_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst winston = require('winston');\n\n/**\n * Requiring `winston-mongodb` will expose\n * `winston.transports.MongoDB`\n */\nrequire('winston-mongodb');\n\nlogger.add(new winston.transports.MongoDB(options));\n```\n\n----------------------------------------\n\nTITLE: Setting Up Amazon Kinesis Firehose Transport with Winston\nDESCRIPTION: Example showing how to add Amazon Kinesis Firehose transport to Winston for sending logs to Firehose. Uses the winston-firehose module.\nSOURCE: https://github.com/winstonjs/winston/blob/master/docs/transports.md#2025-04-19_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst winston = require('winston');\nconst WFirehose = require('winston-firehose');\n\nlogger.add(new WFirehose(options));\n```\n\n----------------------------------------\n\nTITLE: Setting up Papertrail Transport for Winston\nDESCRIPTION: Shows how to configure Winston logger with Papertrail transport for sending logs to PapertrailApp over TCP (TLS). Includes options for host, port, hostname and custom log formatting.\nSOURCE: https://github.com/winstonjs/winston/blob/master/docs/transports.md#2025-04-19_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Papertrail } = require('winston-papertrail');\nlogger.add(new Papertrail(options));\n```\n\n----------------------------------------\n\nTITLE: Setting up Google Stackdriver Transport for Winston\nDESCRIPTION: Configures Winston logger to relay log messages to Google Stackdriver Logging. Requires project ID and path to keyfile for authentication.\nSOURCE: https://github.com/winstonjs/winston/blob/master/docs/transports.md#2025-04-19_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nconst winston = require('winston');\nconst Stackdriver = require('@google-cloud/logging-winston');\nlogger.add(new Stackdriver({\n  projectId: 'your-project-id',\n  keyFilename: '/path/to/keyfile.json'\n}));\n```\n\n----------------------------------------\n\nTITLE: Adding Stream Transport in Winston (JavaScript)\nDESCRIPTION: Demonstrates adding a Stream transport to a Winston logger. This example shows how to use a write stream (in this case writing to /dev/null) as a logging transport.\nSOURCE: https://github.com/winstonjs/winston/blob/master/docs/transports.md#2025-04-19_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nlogger.add(new winston.transports.Stream({\n  stream: fs.createWriteStream('/dev/null')\n  /* other options */\n}));\n```\n\n----------------------------------------\n\nTITLE: Implementing Slack Transport for Winston\nDESCRIPTION: Integration of Winston logger with Slack webhook transport. Includes webhook URL configuration and message formatting options.\nSOURCE: https://github.com/winstonjs/winston/blob/master/docs/transports.md#2025-04-19_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nconst winston = require('winston');\nconst SlackHook = require('winston-slack-webhook-transport');\n\nconst logger = winston.createLogger({\n\tlevel: 'info',\n\ttransports: [\n\t\tnew SlackHook({\n\t\t\twebhookUrl: 'https://hooks.slack.com/services/xxx/xxx/xxx'\n\t\t})\n\t]\n});\n\nlogger.info('This should now appear on Slack');\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Transport for Winston\nDESCRIPTION: Sets up Winston logger with MySQL transport for storing logs in a MySQL database. Requires database connection details and table name, and demonstrates how to log messages with metadata.\nSOURCE: https://github.com/winstonjs/winston/blob/master/docs/transports.md#2025-04-19_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nimport MySQLTransport from 'winston-mysql';\n\nconst options = {\n    host: '${MYSQL_HOST}',\n    user: '${MYSQL_USER}',\n    password: '${MYSQL_PASSWORD}',\n    database: '${MYSQL_DATABASE}',\n    table: 'sys_logs_default'\n};\n\nconst logger = winston.createLogger({\n    level: 'debug',\n    format: winston.format.json(),\n    defaultMeta: { service: 'user-service' },\n    transports: [\n        new winston.transports.Console({\n            format: winston.format.simple(),\n        }),\n        new MySQLTransport(options),\n    ],\n});\n\n/// ...\nlet msg = 'My Log';\nlogger.info(msg, {message: msg, type: 'demo'});\n```\n\n----------------------------------------\n\nTITLE: Integrating LogDNA Transport with Winston\nDESCRIPTION: Sets up Winston logger with LogDNA transport for forwarding logs to LogDNA. Requires an API key and supports configuration options for hostname, IP address, application name, and exception handling.\nSOURCE: https://github.com/winstonjs/winston/blob/master/docs/transports.md#2025-04-19_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nconst logdnaWinston = require('logdna-winston');\nconst winston = require('winston');\nconst logger = winston.createLogger({});\nconst options = {\n    key: apikey, // the only field required\n    hostname: myHostname,\n    ip: ipAddress,\n    mac: macAddress,\n    app: appName,\n    env: envName,\n    index_meta: true // Defaults to false, when true ensures meta object will be searchable\n};\n\n// Only add this line in order to track exceptions\noptions.handleExceptions = true;\n\nlogger.add(new logdnaWinston(options));\n\nlet meta = {\n    data:'Some information'\n};\nlogger.log('info', 'Log from LogDNA Winston', meta);\n```\n\n----------------------------------------\n\nTITLE: Setting Up Azure Table Storage Transport with Winston\nDESCRIPTION: Example showing how to add Azure Table Storage transport to Winston for storing logs in Azure Table Storage. Uses the winston-azuretable module.\nSOURCE: https://github.com/winstonjs/winston/blob/master/docs/transports.md#2025-04-19_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst { AzureLogger } = require('winston-azuretable');\nlogger.add(new AzureLogger(options));\n```\n\n----------------------------------------\n\nTITLE: Setting up Winston Logger with Loggly Transport\nDESCRIPTION: This code demonstrates how to configure a Winston logger with the Loggly transport. It uses Nodejitsu's implementation of the Loggly API and requires either an input token or input name for authentication.\nSOURCE: https://github.com/winstonjs/winston/blob/master/docs/transports.md#2025-04-19_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\nconst WinstonLoggly = require('winston-loggly');\nlogger.add(new winston.transports.Loggly(options));\n```\n\n----------------------------------------\n\nTITLE: Configuring Amazon SNS Transport for Winston\nDESCRIPTION: Example showing how to add Amazon SNS transport to Winston for sending notifications through AWS Simple Notification System. Uses the winston-sns module.\nSOURCE: https://github.com/winstonjs/winston/blob/master/docs/transports.md#2025-04-19_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst winston = require('winston');\nconst SnsTransport = require('winston-sns');\n\nlogger.add(new SnsTransport(options));\n```\n\n----------------------------------------\n\nTITLE: Configuring Amazon DynamoDB Transport for Winston\nDESCRIPTION: Example showing how to add DynamoDB transport to Winston for storing logs in Amazon DynamoDB. Uses the winston-dynamodb module.\nSOURCE: https://github.com/winstonjs/winston/blob/master/docs/transports.md#2025-04-19_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst winston = require('winston');\nconst { DynamoDB } = require('winston-dynamodb');\n\nlogger.add(new DynamoDB(options));\n```\n\n----------------------------------------\n\nTITLE: Setting Up Amazon CloudWatch Transport with Winston\nDESCRIPTION: Example showing how to add Amazon CloudWatch transport to Winston for sending logs to AWS CloudWatch. Uses the winston-aws-cloudwatch module.\nSOURCE: https://github.com/winstonjs/winston/blob/master/docs/transports.md#2025-04-19_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst winston = require('winston');\nconst AwsCloudWatch = require('winston-aws-cloudwatch');\n\nlogger.add(new AwsCloudWatch(options));\n```\n\n----------------------------------------\n\nTITLE: Configuring Graylog2 Transport for Winston\nDESCRIPTION: Sets up Winston logger with Graylog2 transport. This transport connects to a Graylog2 server over UDP, with configurable options for server connection, hostname, and facility.\nSOURCE: https://github.com/winstonjs/winston/blob/master/docs/transports.md#2025-04-19_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nconst winston = require('winston');\nconst Graylog2 = require('winston-graylog2');\nlogger.add(new Graylog2(options));\n```\n\n----------------------------------------\n\nTITLE: Implementing Google BigQuery Transport for Winston\nDESCRIPTION: Sets up Winston logger with Google BigQuery transport. This requires specifying a tableId and datasetId, with optional path to service worker credentials for development environments.\nSOURCE: https://github.com/winstonjs/winston/blob/master/docs/transports.md#2025-04-19_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nimport {WinstonBigQuery} from 'winston-bigquery';\nimport winston, {format} from 'winston';\n\nconst logger = winston.createLogger({\n\ttransports: [\n\t\tnew WinstonBigQuery({\n\t\t\ttableId: 'winston_logs',\n\t\t\tdatasetId: 'logs'\n\t\t})\n\t]\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Winston Logger with CouchDB Transport\nDESCRIPTION: This snippet shows how to add the CouchDB transport to a Winston logger. It allows logging to a remote CouchDB database and creates a Design Document for querying and streaming logs.\nSOURCE: https://github.com/winstonjs/winston/blob/master/docs/transports.md#2025-04-19_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\nconst WinstonCouchDb = require('winston-couchdb');\nlogger.add(new WinstonCouchdb(options));\n```\n\n----------------------------------------\n\nTITLE: Integrating Datadog Transport with Winston\nDESCRIPTION: Sets up Winston logger with Datadog transport to ship logs to Datadog. Requires an API key and supports metadata options like hostname, service name, source, and tags.\nSOURCE: https://github.com/winstonjs/winston/blob/master/docs/transports.md#2025-04-19_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nvar winston = require('winston')\nvar DatadogWinston = require('datadog-winston')\n\nvar logger = winston.createLogger({\n  // Whatever options you need\n  // Refer https://github.com/winstonjs/winston#creating-your-own-logger\n})\n\nlogger.add(\n  new DatadogWinston({\n    apiKey: 'super_secret_datadog_api_key',\n    hostname: 'my_machine',\n    service: 'super_service',\n    ddsource: 'nodejs',\n    ddtags: 'foo:bar,boo:baz'\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing FastFileRotate Transport for Winston\nDESCRIPTION: Sets up Winston logger with FastFileRotate transport for daily log rotation. This transport provides performant file operations and automatic date-based rotation of log files.\nSOURCE: https://github.com/winstonjs/winston/blob/master/docs/transports.md#2025-04-19_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nconst FileRotateTransport = require('fast-file-rotate');\nconst winston = require('winston');\n\nconst logger = winston.createLogger({\n  transports: [\n    new FileRotateTransport({\n      fileName: __dirname + '/console%DATE%.log'\n    })\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Setting up Sentry Transport for Winston\nDESCRIPTION: Configuration for Winston logger with Sentry transport for error tracking. Shows setup with DSN, environment settings, and debug options.\nSOURCE: https://github.com/winstonjs/winston/blob/master/docs/transports.md#2025-04-19_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nconst Sentry = require('winston-transport-sentry-node').default;\nlogger.add(new Sentry({\n  sentry: {\n    dsn: 'https://******@sentry.io/12345',\n  },\n  level: 'info'\n}));\n```\n\n----------------------------------------\n\nTITLE: Configuring Winston Logger with VS Code LogOutputChannel Transport\nDESCRIPTION: This code snippet shows how to set up a Winston logger using the LogOutputChannel transport, which includes dedicated log levels and formatting for VS Code's LogOutputChannel.\nSOURCE: https://github.com/winstonjs/winston/blob/master/docs/transports.md#2025-04-19_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\nconst { LogOutputChannelTransport } = require('winston-transport-vscode');\n\nconst outputChannel = vscode.window.createOutputChannel('My extension', {\n  log: true,\n});\n\nconst logger = winston.createLogger({\n  levels: LogOutputChannelTransport.config.levels,\n  format: LogOutputChannelTransport.format(),\n  transports: [new LogOutputChannelTransport({ outputChannel })],\n});\n```\n\n----------------------------------------\n\nTITLE: Setting up Logzio Transport for Winston\nDESCRIPTION: Configures Winston logger with Logzio transport for sending logs to Logzio. Requires an API token for authentication with the Logzio service.\nSOURCE: https://github.com/winstonjs/winston/blob/master/docs/transports.md#2025-04-19_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nconst winston = require('winston');\nconst Logzio = require('winston-logzio');\n\nlogger.add(new Logzio({\n  token: '__YOUR_API_TOKEN__'\n}));\n```\n\n----------------------------------------\n\nTITLE: Initializing Winston Logger with VS Code Output Channel Transport\nDESCRIPTION: This snippet demonstrates how to create a Winston logger using the VS Code Output Channel transport. It requires the vscode module and winston-transport-vscode package.\nSOURCE: https://github.com/winstonjs/winston/blob/master/docs/transports.md#2025-04-19_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\nconst vscode = require('vscode');\nconst winston = require('winston');\nconst { OutputChannelTransport } = require('winston-transport-vscode');\n\nconst outputChannel = vscode.window.createOutputChannel('My extension');\n\nconst logger = winston.createLogger({\n  transports: [new OutputChannelTransport({ outputChannel })],\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Logsene Transport for Winston\nDESCRIPTION: Sets up Winston logger with Logsene transport for Elasticsearch bulk indexing via HTTPS. Requires a Logsene Application Token and supports source specification for the logs.\nSOURCE: https://github.com/winstonjs/winston/blob/master/docs/transports.md#2025-04-19_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nconst winston = require('winston');\nconst Logsene = require('winston-logsene');\n\nlogger.add(new Logsene({\n  token: process.env.LOGSENE_TOKEN\n  /* other options */\n}));\n```\n\n----------------------------------------\n\nTITLE: Configuring New Relic Transport for Winston\nDESCRIPTION: Demonstrates how to set up Winston logger with New Relic transport using ECMAScript modules. Supports custom logging levels and rejection criteria for filtering logs.\nSOURCE: https://github.com/winstonjs/winston/blob/master/docs/transports.md#2025-04-19_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nimport winston from 'winston'\nimport NewrelicTransport from 'winston-newrelic-agent-transport'\n\nconst logger = winston.createLogger()\n\nconst options = {}\nlogger.add(new NewrelicTransport(options))\n```\n\n----------------------------------------\n\nTITLE: Implementing Parseable Transport for Winston\nDESCRIPTION: Example of integrating Parseable log analytics system with Winston logger. Shows configuration with authentication, custom logstream and tagging support.\nSOURCE: https://github.com/winstonjs/winston/blob/master/docs/transports.md#2025-04-19_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nconst { ParseableTransport } = require('parseable-winston')\nconst winston = require('winston')\n\nconst parseable = new ParseableTransport({\n  url: process.env.PARSEABLE_LOGS_URL, // Ex: 'https://parsable.myserver.local/api/v1/logstream'\n  username: process.env.PARSEABLE_LOGS_USERNAME,\n  password: process.env.PARSEABLE_LOGS_PASSWORD,\n  logstream: process.env.PARSEABLE_LOGS_LOGSTREAM, // The logstream name\n  tags: { tag1: 'tagValue' } // optional tags to be added with each ingestion\n})\n\nconst logger = winston.createLogger({\n  levels: winston.config.syslog.levels,\n  transports: [parseable],\n  defaultMeta: { instance: 'app', hostname: 'app1' }\n})\n\nlogger.info('User took the goggles', { userid: 1, user: { name: 'Rainier Wolfcastle' } })\nlogger.warning('The goggles do nothing', { userid: 1 })\n```\n\n----------------------------------------\n\nTITLE: Implementing Seq Transport for Winston\nDESCRIPTION: Shows how to configure Winston logger with Seq transport for structured log events. Includes server URL and API key configuration.\nSOURCE: https://github.com/winstonjs/winston/blob/master/docs/transports.md#2025-04-19_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nconst { SeqTransport } = require('@datalust/winston-seq');\nlogger.add(new SeqTransport({\n  serverUrl: \"https://your-seq-server:5341\",\n  apiKey: \"your-api-key\",\n  onError: (e => { console.error(e) }),\n}));\n```\n\n----------------------------------------\n\nTITLE: Configuring Sumo Logic Transport for Winston\nDESCRIPTION: Implementation of Winston logger with Sumo Logic transport. Shows configuration with HTTP collector URL.\nSOURCE: https://github.com/winstonjs/winston/blob/master/docs/transports.md#2025-04-19_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nconst winston = require('winston');\nconst { SumoLogic } = require('winston-sumologic-transport');\n\nlogger.add(new SumoLogic(options));\n```\n\n----------------------------------------\n\nTITLE: Initializing Cassandra Transport for Winston\nDESCRIPTION: Sets up the Winston logger with Cassandra transport. This transport connects to a Cassandra cluster using the native protocol and allows storing log messages in a specified column family.\nSOURCE: https://github.com/winstonjs/winston/blob/master/docs/transports.md#2025-04-19_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst Cassandra = require('winston-cassandra').Cassandra;\nlogger.add(new Cassandra(options));\n```\n\n----------------------------------------\n\nTITLE: Accessing Winston Symbol Properties with Triple-Beam\nDESCRIPTION: Demonstrates how to access the Symbol properties used internally by Winston using the triple-beam package. These symbols provide cross-package references to Winston's internal properties.\nSOURCE: https://github.com/winstonjs/winston/blob/master/README.md#2025-04-19_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst { LEVEL, MESSAGE, SPLAT } = require('triple-beam');\n\nconsole.log(LEVEL === Symbol.for('level'));\n// true\n\nconsole.log(MESSAGE === Symbol.for('message'));\n// true\n\nconsole.log(SPLAT === Symbol.for('splat'));\n// true\n```\n\n----------------------------------------\n\nTITLE: Setting up Cloudant Transport for Winston\nDESCRIPTION: Configures Winston to use Cloudant NoSQL database as a transport. This allows storing log messages in a Cloudant database with options for authentication and database selection.\nSOURCE: https://github.com/winstonjs/winston/blob/master/docs/transports.md#2025-04-19_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst winston = require('winston');\nconst WinstonCloudant = require('winston-cloudant');\nlogger.add(new WinstonCloudant(options));\n```\n\n----------------------------------------\n\nTITLE: Using Object Destructuring for Winston Log Meta Properties\nDESCRIPTION: Shows how to extract meta properties from an info object using JavaScript object destructuring. Any properties beyond level and message are considered metadata in Winston.\nSOURCE: https://github.com/winstonjs/winston/blob/master/README.md#2025-04-19_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst { level, message, ...meta } = info;\n```\n\n----------------------------------------\n\nTITLE: Setting up Humio Transport for Winston\nDESCRIPTION: Configures Winston logger to send logs to Humio. Requires a Humio ingest token for authentication and communication with the Humio service.\nSOURCE: https://github.com/winstonjs/winston/blob/master/docs/transports.md#2025-04-19_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nconst winston = require('winston');\nconst HumioTransport = require('humio-winston');\n\nconst logger = winston.createLogger({\n  transports: [\n    new HumioTransport({\n      ingestToken: '<YOUR HUMIO INGEST TOKEN>',\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Airbrake Transport for Winston\nDESCRIPTION: Example showing how to add the Airbrake transport to Winston for error reporting to Airbrake.io. Uses the winston-airbrake2 module.\nSOURCE: https://github.com/winstonjs/winston/blob/master/docs/transports.md#2025-04-19_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst winston = require('winston');\nconst { Airbrake } = require('winston-airbrake2');\nlogger.add(new Airbrake(options));\n```\n\n----------------------------------------\n\nTITLE: Setting up SQLite3 Transport for Winston\nDESCRIPTION: Configuration for Winston logger with SQLite3 transport using better-sqlite3. Shows database file path and logging parameters setup.\nSOURCE: https://github.com/winstonjs/winston/blob/master/docs/transports.md#2025-04-19_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nconst wbs = require('winston-better-sqlite3');\nlogger.add(new wbs({\n\n    // path to the sqlite3 database file on the disk\n    db: '<name of sqlite3 database file>',\n\n    // A list of params to log\n    params: ['level', 'message']\n}));\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variables with DynamoDB Transport for Winston\nDESCRIPTION: Example showing how to configure Winston's DynamoDB transport using environment variables for AWS authentication.\nSOURCE: https://github.com/winstonjs/winston/blob/master/docs/transports.md#2025-04-19_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nlogger.add(new winston.transports.DynamoDB({\n  useEnvironment: true,\n  tableName: 'log'\n}));\n```\n\n----------------------------------------\n\nTITLE: Configuring Mail Transport for Winston\nDESCRIPTION: Sets up Winston logger with Mail transport for sending logs via email. Uses node-mail behind the scenes and requires recipient and SMTP host configuration, with options for authentication and security.\nSOURCE: https://github.com/winstonjs/winston/blob/master/docs/transports.md#2025-04-19_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Mail } = require('winston-mail');\nlogger.add(new Mail(options));\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Winston.js Component Architecture with Annotated Example\nDESCRIPTION: This code snippet demonstrates how the different packages that make up Winston 3.x interact together. It shows the relationship between the core Winston module, winston-transport, logform, and how formats are combined to create a customized logger instance.\nSOURCE: https://github.com/winstonjs/winston/blob/master/CONTRIBUTING.md#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { createLogger, transports, format } = require('winston');\nconst Transport = require('winston-transport');\nconst logform = require('logform');\nconst { combine, timestamp, label, printf } = logform.format;\n\n// winston.format is require('logform')\nconsole.log(logform.format === format) // true\n\nconst logger = createLogger({\n  format: combine(\n    label({ label: 'right meow!' }),\n    timestamp(),\n    printf(({ level, message, label, timestamp }) => {\n      return `${timestamp} [${label}] ${level}: ${message}`;\n    })\n  ),\n  transports: [new transports.Console()]\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Pusher Transport for Winston\nDESCRIPTION: Implementation of Winston logger with Pusher transport for real-time log processing. Includes Pusher app configuration with encryption and channel options.\nSOURCE: https://github.com/winstonjs/winston/blob/master/docs/transports.md#2025-04-19_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nconst { PusherLogger } = require('winston-pusher');\nlogger.add(new PusherLogger(options));\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL Table for Winston Logs\nDESCRIPTION: SQL statement to create a table structure suitable for storing Winston logs in a MySQL database. Creates a table with columns for ID, log level, message, metadata, and timestamp.\nSOURCE: https://github.com/winstonjs/winston/blob/master/docs/transports.md#2025-04-19_snippet_26\n\nLANGUAGE: sql\nCODE:\n```\n CREATE TABLE `sys_logs_default` (\n `id` INT NOT NULL AUTO_INCREMENT,\n `level` VARCHAR(16) NOT NULL,\n `message` VARCHAR(2048) NOT NULL,\n `meta` VARCHAR(2048) NOT NULL,\n `timestamp` DATETIME NOT NULL,\n PRIMARY KEY (`id`)); \n```\n\n----------------------------------------\n\nTITLE: Adding Winlog2 Transport to Winston Logger\nDESCRIPTION: This code demonstrates how to add the Winlog2 transport to a Winston logger. Winlog2 is a Windows Event log transport that accepts options for customizing the log type, source, and event log name.\nSOURCE: https://github.com/winstonjs/winston/blob/master/docs/transports.md#2025-04-19_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\nconst winston = require('winston');\nconst Winlog2 = require('winston-winlog2');\nlogger.add(new Winlog2(options));\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic Bucket Names with Riak Transport\nDESCRIPTION: This snippet demonstrates how to use a function to generate dynamic bucket names for the Riak transport based on log level, message, metadata, and timestamp.\nSOURCE: https://github.com/winstonjs/winston/blob/master/docs/transports.md#2025-04-19_snippet_46\n\nLANGUAGE: javascript\nCODE:\n```\n// Generate a dynamic bucket based on the date and level\nconst dynamicBucketTransport = new Riak({\n  bucket: function (level, msg, meta, now) {\n    var d = new Date(now);\n    return level + [d.getDate(), d.getMonth(), d.getFullYear()].join('-');\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Cisco Spark Transport for Winston\nDESCRIPTION: Sets up the Winston logger with Cisco Spark transport. This transport sends log messages to a Cisco Spark room, requiring an access token and room ID.\nSOURCE: https://github.com/winstonjs/winston/blob/master/docs/transports.md#2025-04-19_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst winston = require('winston');\nrequire('winston-spark');\n\nconst options = {\n  accessToken: '***Your Spark Access Token***',\n  roomId: '***Spark Room Id***'\n};\n\nlogger.add(new winston.transports.SparkLogger(options));\n```\n\n----------------------------------------\n\nTITLE: Reconfiguring Winston Logger\nDESCRIPTION: Demonstrates how to reconfigure an existing Winston logger instance with new settings and transports.\nSOURCE: https://github.com/winstonjs/winston/blob/master/README.md#2025-04-19_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst logger = winston.createLogger({\n  level: 'info',\n  transports: [\n    new winston.transports.Console(),\n    new winston.transports.File({ filename: 'combined.log' })\n  ]\n});\n\nconst DailyRotateFile = require('winston-daily-rotate-file');\nlogger.configure({\n  level: 'verbose',\n  transports: [\n    new DailyRotateFile(opts)\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Riak Transport in Winston Logger\nDESCRIPTION: This code shows how to add the Riak transport to a Winston logger. It allows logging to a Riak bucket and supports both static and dynamic bucket naming.\nSOURCE: https://github.com/winstonjs/winston/blob/master/docs/transports.md#2025-04-19_snippet_45\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Riak } = require('winston-riak');\nlogger.add(new Riak(options));\n```\n\n----------------------------------------\n\nTITLE: Configuring SimpleDB Transport for Winston\nDESCRIPTION: Setup for Winston logger with AWS SimpleDB transport. Includes AWS credentials and domain configuration options.\nSOURCE: https://github.com/winstonjs/winston/blob/master/docs/transports.md#2025-04-19_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nconst SimpleDB = require('winston-simpledb').SimpleDB;\nlogger.add(new SimpleDB(options));\n```\n\n----------------------------------------\n\nTITLE: Searching for Winston Transports on NPM\nDESCRIPTION: Command to search for Winston transport modules on NPM. There are over 23 Winston transports available in the community.\nSOURCE: https://github.com/winstonjs/winston/blob/master/docs/transports.md#2025-04-19_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ npm search winston\n```\n\n----------------------------------------\n\nTITLE: Defining Version 3.0.0 Roadmap in Markdown\nDESCRIPTION: This snippet outlines the roadmap for Winston 3.0.0 release using Markdown. It includes various categories of tasks such as show stoppers, high priority issues, core logging improvements, and more. Each task is marked with its completion status.\nSOURCE: https://github.com/winstonjs/winston/blob/master/docs/releases.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Version `3.0.0`\n\n### Show stoppers\n- [x] `silent` support.\n- [x] Finish `3.0.0` upgrade guide: https://github.com/winstonjs/winston/blob/master/UPGRADE-3.0.md\n- [x] Triage all open issues since October 2017\n\n### High priority issues (non-blocking)\n- [x] [#1144]: this is _the_ purpose of `winston`. If we cannot log at high-volume we cannot ship out of RC. There was [test coverage for this][stress-test] that should be failing, but isnt. _(Fixed by #1291)._\n- [x] Error handling within formats [#1261]\n- [x] Update `docs/transports.md`.\n- [Type definitions for TypeScript](https://github.com/winstonjs/winston/issues/1096)\n  - [x] Supporting libraries: `winston-transport`, `logform`\n  - [x] `winston` itself \n\n### Core logging\n- [x] Make `Logger.prototype.level` and `Transport.level` play nice(r) together.\n- [x] Remove `new winston.Logger` in favor of `winston.createLogger`.\n- [x] Finish implementation for `TransportStream` and `LegacyTransportStream`. \n- [x] Move `TransportStream` and `LegacyTransportStream` into `winston-transport`.\n- [x] Move `winston/config.js` to `winston/config/index.js`\n- [x] **DEPRECATE** `winston.clone`\n- [x] Add convenience methods from `winston-transport`\n- [-] Replace all `vows`-based tests.\n  - [x] `test/*-test.js`\n  - [x] `test/formats/*-test.js` \n  - [-] `test/transports/*-test.js` \n- [x] Move `winston.config` into `triple-beam` around a base `Levels` class.\n  _(Fixed in `triple-beam@1.2.0`)_\n- [x] Update to the latest `npm` levels (e.g. including `http`).\n- [ ] Code coverage tests above 80% for `winston` _(currently `~72%`)_.\n- [x] Code coverage tests above 90% for `winston-transport`.\n- [x] Code coverage tests above 90% for `logform`\n- [-] Core scenarios covered in `abstract-winston-transport`.\n- [x] Code coverage tests above 60% for `winston-compat`.\n```\n\n----------------------------------------\n\nTITLE: Publishing Winston.js NPM Package\nDESCRIPTION: Commands for publishing the Winston.js package to NPM and updating distribution tags\nSOURCE: https://github.com/winstonjs/winston/blob/master/docs/publishing.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm publish\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm dist-tag add winston@3.7.0 3.x-latest\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm dist-tag ls\n```\n\n----------------------------------------\n\nTITLE: Importing Winston Core Components in JavaScript\nDESCRIPTION: Demonstrates how to import the core Winston logger and transport stream classes. This is a basic import statement showing the entry points to the Winston logging library.\nSOURCE: https://github.com/winstonjs/winston/blob/master/CHANGELOG.md#2025-04-19_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nrequire('winston').Logger;\nrequire('winston-transport').TransportStream;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Winston Maintainer Email for Vulnerability Reporting\nDESCRIPTION: This command retrieves the email address of the Winston project maintainers for reporting security vulnerabilities. It uses the npm CLI to view the maintainer information of the 'yadeep' package.\nSOURCE: https://github.com/winstonjs/winston/blob/master/SECURITY.md#2025-04-19_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm view yadeep maintainers.email\n```\n\n----------------------------------------\n\nTITLE: Version Tag Header\nDESCRIPTION: Markdown section header showing version comparison link\nSOURCE: https://github.com/winstonjs/winston/blob/master/CHANGELOG.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [v3.9.0](https://github.com/winstonjs/winston/compare/v3.8.2...v3.9.0)\n```\n\n----------------------------------------\n\nTITLE: Change Category Header\nDESCRIPTION: Markdown header for categorizing types of changes\nSOURCE: https://github.com/winstonjs/winston/blob/master/CHANGELOG.md#2025-04-19_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### Functionality changes\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry Format\nDESCRIPTION: Standard changelog entry format showing version, comparison link and date\nSOURCE: https://github.com/winstonjs/winston/blob/master/CHANGELOG.md#2025-04-19_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## [v3.8.0](https://github.com/winstonjs/winston/compare/v3.7.2...v3.8.0) / 2022-06-23\n```"
  }
]