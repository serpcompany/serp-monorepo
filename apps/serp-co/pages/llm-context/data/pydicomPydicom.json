[
  {
    "owner": "pydicom",
    "repo": "pydicom",
    "content": "TITLE: Accessing pixel data as NumPy array using pixel_array\nDESCRIPTION: This snippet demonstrates how to access pixel data as a NumPy array using the `pixel_array` attribute of a pydicom Dataset. It shows how to import the NumPy library (implicitly required) and access the pixel data as an array with a specific shape and data type. The example uses the 'mr' sample dataset.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/guides/user/working_with_pixel_data.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> arr = ds.pixel_array # doctest: +NORMALIZE_WHITESPACE\n>>> arr\narray([[ 905, 1019, 1227, ...,  302,  304,  328],\n       [ 628,  770,  907, ...,  298,  331,  355],\n       [ 498,  566,  706, ...,  280,  285,  320],\n       ...,\n       [ 334,  400,  431, ..., 1094, 1068, 1083],\n       [ 339,  377,  413, ..., 1318, 1346, 1336],\n       [ 378,  374,  422, ..., 1369, 1129,  862]], dtype=int16)\n>>> arr.shape\n(64, 64)\n```\n\n----------------------------------------\n\nTITLE: Reading DICOM dataset from file using dcmread\nDESCRIPTION: This snippet demonstrates how to read a DICOM dataset from a file path using the `dcmread` function from `pydicom.filereader`. It imports the necessary modules, retrieves the path to the 'ct' example dataset, and then uses `dcmread` to read the DICOM file into a `FileDataset` object.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/dataset_basics.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> from pydicom import dcmread, examples\n>>> path = get_path(\"ct\")\n>>> ds = dcmread(path)\n```\n\n----------------------------------------\n\nTITLE: Adding File Meta and Transfer Syntax UID with pydicom\nDESCRIPTION: Demonstrates adding the missing File Meta dataset and Transfer Syntax UID element to a DICOM dataset. This ensures that the dataset can be saved in the DICOM file format without errors, especially after deleting the original file_meta.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/dataset_basics.rst#_snippet_35\n\nLANGUAGE: python\nCODE:\n```\n>>> ds.file_meta = FileMetaDataset()\n\n>>> ds.file_meta.TransferSyntaxUID = '1.2.840.10008.1.2.1'\n>>> ds.save_as('out.dcm', enforce_file_format=True)\n```\n\n----------------------------------------\n\nTITLE: Displaying DICOM File Metadata using pydicom show\nDESCRIPTION: This command displays the metadata of a DICOM file using the `pydicom show` subcommand.  The example uses a test DICOM file accessed via the `pydicom::` prefix. The output shows the file meta information and DICOM data elements with their values.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/guides/cli/cli_intro.rst#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ pydicom show pydicom::rtplan.dcm\nDataset.file_meta -------------------------------\n(0002, 0000) File Meta Information Group Length  UL: 156\n(0002, 0001) File Meta Information Version       OB: b'\\x00\\x01'\n(0002, 0002) Media Storage SOP Class UID         UI: RT Plan Storage\n(0002, 0003) Media Storage SOP Instance UID      UI: 1.2.999.999.99.9.9999.9999.20030903150023\n(0002, 0010) Transfer Syntax UID                 UI: Implicit VR Little Endian\n(0002, 0012) Implementation Class UID            UI: 1.2.888.888.88.8.8.8\n-------------------------------------------------\n(0008, 0012) Instance Creation Date              DA: '20030903'\n(0008, 0013) Instance Creation Time              TM: '150031'\n(0008, 0016) SOP Class UID                       UI: RT Plan Storage\n(0008, 0018) SOP Instance UID                    UI: 1.2.777.777.77.7.7777.7777.20030903150023\n(0008, 0020) Study Date                          DA: '20030716'\n...\n```\n\n----------------------------------------\n\nTITLE: Modifying pixel data using NumPy and saving\nDESCRIPTION: This snippet demonstrates how to modify pixel data using NumPy, convert the modified array back to bytes, and update the `PixelData` element in the DICOM dataset. It includes saving the modified dataset to a new file. NumPy is required.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/guides/user/working_with_pixel_data.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# example: zero anything < 300\narr = ds.pixel_array\narr[arr < 300] = 0\nds.PixelData = arr.tobytes()\nds.save_as(\"temp.dcm\")\n```\n\n----------------------------------------\n\nTITLE: Near-Lossless JPEG-LS Compression of Greyscale Data with pydicom\nDESCRIPTION: This snippet demonstrates lossy compression of signed pixel data with a maximum error of 3 pixel intensity units. It handles the signed nature of pixel data and clips the data to the allowed range before compression. It initializes a dataset with CT data, checks relevant parameters, and compresses the pixel data using `ds.compress(JPEGLSNearLossless, jls_error=jls_error)`. Requires the pydicom library and numpy.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/guides/encoding/jpeg_ls.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom pydicom import examples\nfrom pydicom.uid import JPEGLSNearLossless\n\nds = examples.ct\nassert ds.SamplesPerPixel == 1\nassert ds.PhotometricInterpretation == 'MONOCHROME2'\nassert ds.BitsAllocated == 16\nassert ds.BitsStored == 16\nassert ds.PixelRepresentation == 1\nassert len(ds.PixelData) == 32768\n\n# Our pixel data therefore uses signed 16-bit integers with a single channel\n# We need to make sure the maximum and minimum values are within the allowed\n#   range (see the section on Pixel Representation near the start of this page)\njls_error = 3\n\n# The minimum and maximum sample values for the given *Bits Stored*\nminimum = -2**(ds.BitsStored - 1)\nmaximum = 2**(ds.BitsStored - 1) - 1\n\narr = ds.pixel_array\n\n# Clip the array so all values are within the limits, you may want to\n# rescale instead of clipping. For this dataset this isn't actually\n```\n\n----------------------------------------\n\nTITLE: Saving DICOM Dataset Enforcing File Format with pydicom\nDESCRIPTION: Illustrates saving a DICOM dataset while enforcing the DICOM file format. The `enforce_file_format` parameter ensures the dataset conforms to the DICOM standard, automatically adding missing file meta information or raising an exception if it can't.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/dataset_basics.rst#_snippet_33\n\nLANGUAGE: python\nCODE:\n```\n>>> ds.save_as('out.dcm', enforce_file_format=True)\n```\n\n----------------------------------------\n\nTITLE: Converting Pixel Data to NumPy array in pydicom\nDESCRIPTION: This example shows how to convert the Pixel Data element in a DICOM file to a NumPy ndarray for numerical processing and analysis. It requires the NumPy library to be installed. The example demonstrates accessing the `pixel_array` property of the DICOM dataset.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/README.md#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n>>> arr = ds.pixel_array\n>>> arr.shape\n(128, 128)\n>>> arr\narray([[175, 180, 166, ..., 203, 207, 216],\n       [186, 183, 157, ..., 181, 190, 239],\n       [184, 180, 171, ..., 152, 164, 235],\n       ...,\n       [906, 910, 923, ..., 922, 929, 927],\n       [914, 954, 938, ..., 942, 925, 905],\n       [959, 955, 916, ..., 911, 904, 909]], dtype=int16)\n```\n\n----------------------------------------\n\nTITLE: Reading DICOM without Meta Information with force=True\nDESCRIPTION: This code snippet demonstrates reading a DICOM file that is missing DICOM File Meta Information by using the `force=True` parameter in the `dcmread` function.  It imports the `examples` module and uses `get_path` to get the path of the 'no_meta' example dataset. It then uses `dcmread` with `force=True` to read the file, despite the missing meta information.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/dataset_basics.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> ds = dcmread(no_meta_path, force=True)\n```\n\n----------------------------------------\n\nTITLE: Deflated Image Frame Compression with pydicom\nDESCRIPTION: This example demonstrates how to use Deflated Image Frame Compression, a lossless method, with pydicom. It uses the `DeflatedImageFrameCompression` UID to compress the pixel data.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/pixel_data/compressing.rst#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n>>> from pydicom import examples\n>>> from pydicom.uid import DeflatedImageFrameCompression\n>>> ds = examples.ct\n>>> ds.compress(DeflatedImageFrameCompression)\n```\n\n----------------------------------------\n\nTITLE: Codify Pixel Data Exclusion\nDESCRIPTION: This code demonstrates how `codify` represents large data items like pixel data by creating a placeholder that needs to be manually replaced with the actual data to avoid syntax errors. The comment indicates that an array of a specific size is expected.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/guides/user/writing_files.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nds.PixelData = # XXX Array of 524288 bytes excluded\n```\n\n----------------------------------------\n\nTITLE: Accessing Pixel Data as bytes in pydicom\nDESCRIPTION: This example shows how to access the raw pixel data as bytes through the `PixelData` keyword in a `Dataset`. It loads an example CT dataset and retrieves the raw byte data from the `PixelData` element. This is the lowest-level access to pixel data.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/guides/user/base_element.rst#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n>>> # example CT dataset with actual pixel data\n>>> ds = examples.ct\n>>> pixel_bytes = ds.PixelData\n```\n\n----------------------------------------\n\nTITLE: Reading pixel data as raw bytes in pydicom\nDESCRIPTION: This snippet demonstrates how to read pixel data as raw bytes directly from a DICOM file using pydicom. It shows how to access the PixelData element of a DICOM dataset after reading the file.  The example reads the 'mr' sample dataset.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/guides/user/working_with_pixel_data.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from pydicom import dcmread, examples\n>>> path = examples.get_path(\"mr\")  # The path to the examples.mr dataset\n>>> ds = dcmread(path)\n>>> ds.PixelData # doctest: +ELLIPSIS\nb'\\x89\\x03\\xfb\\x03\\xcb\\x04\\xeb\\x04\\xf9\\x02\\x94\\x01\\x7f...'\n```\n\n----------------------------------------\n\nTITLE: Display a data element using tag number\nDESCRIPTION: This command retrieves and displays a specific data element using its tag number (0043,1013) from the specified DICOM file.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/guides/cli/cli_show.rst#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ pydicom show pydicom::ct_small.dcm::(0043,1013)\n```\n\n----------------------------------------\n\nTITLE: Specifying Encoding Plugin with Dataset.compress()\nDESCRIPTION: Demonstrates how to specify a specific encoding plugin when using the `Dataset.compress()` method. This allows for choosing a specific implementation for the compression algorithm (e.g., 'pylibjpeg' for RLELossless).\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/guides/user/image_data_compression.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Will set `ds.is_little_endian` and `ds.is_implicit_VR` automatically\nds.compress(RLELossless, encoding_plugin='pylibjpeg')\nds.save_as(\"ct_rle_lossless.dcm\")\n```\n\n----------------------------------------\n\nTITLE: Saving DICOM Dataset to a File with pydicom\nDESCRIPTION: Shows how to save a pydicom Dataset object to a file using the `save_as` method. It opens a file in binary write mode ('wb') and uses the file object to save the dataset.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/dataset_basics.rst#_snippet_31\n\nLANGUAGE: python\nCODE:\n```\n>>> with open('out.dcm', 'wb') as outfile:\n...    ds.save_as(outfile)\n...\n```\n\n----------------------------------------\n\nTITLE: Modifying DICOM element by tag\nDESCRIPTION: This snippet shows how to modify the value of a DICOM element by first retrieving the element using its tag, and then setting its value directly.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/dataset_basics.rst#_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n>>> elem = ds[0x0010, 0x0010]\n>>> elem.value\n'CompressedSamples^CT1'\n>>> elem.value = 'Citizen^Jan'\n>>> elem\n(0010, 0010) Patient's Name                      PN: 'Citizen^Jan'\n```\n\n----------------------------------------\n\nTITLE: Accessing specific frames from Pixel Data\nDESCRIPTION: This example demonstrates how to access a specific frame or all frames of a DICOM dataset to NumPy ndarray using the `pixel_array` function with the `index` parameter. It also shows how to display the pixel data using matplotlib.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/pixel_data/introduction.rst#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom pydicom import examples\nfrom pydicom.pixels import pixel_array\n\n# Get an example multi-frame dataset\nds = examples.rt_dose\nassert ds.NumberOfFrames == '15'\n\n# Return all frames\narr = pixel_array(ds)\nassert arr.shape == (15, 10, 10)\n\n# Return only the first frame\narr = pixel_array(ds, index=0)\nassert arr.shape == (10, 10)\n```\n\n----------------------------------------\n\nTITLE: Accessing DataElement Value using dot notation\nDESCRIPTION: This snippet demonstrates how to access the value of a standard `DataElement` using Python dot notation with the element's keyword. This is the recommended method of accessing standard elements, as it's more concise and readable. The code accesses the `SOPClassUID` element's value using `ds.SOPClassUID`.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/dataset_basics.rst#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n>>> ds.SOPClassUID\n'1.2.840.10008.5.1.4.1.1.2'\n```\n\n----------------------------------------\n\nTITLE: Converting Pixel Data to NumPy Array\nDESCRIPTION: This example demonstrates how to convert the pixel data in a DICOM dataset to a NumPy ndarray using the `pixel_array` function. It also shows how to display the pixel data using matplotlib.  The example retrieves a sample dataset, converts the pixel data, asserts that the shape and dtype are as expected, and then displays it as a grayscale image.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/pixel_data/introduction.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport matplotlib.pyplot as plt\n\nfrom pydicom import examples\nfrom pydicom.pixels import pixel_array\n\n# Get an example dataset as a FileDataset instance\nds = examples.ct\n\n# Convert the pixel data to an ndarray\narr = pixel_array(ds)\nassert arr.shape == (128, 128)\nassert str(arr.dtype) == \"int16\"\n\n# Display the pixel data using matplotlib\nplt.imshow(arr, cmap=\"gray\")\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Getting File Path using pydicom examples\nDESCRIPTION: This snippet shows how to retrieve the file path of an example DICOM dataset included with pydicom using the `get_path` function. It imports the `examples` module from `pydicom` and uses `get_path` to get the path of the 'ct' example dataset. The result is a `pathlib.Path` object representing the file path.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/dataset_basics.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from pydicom import examples\n>>> path = examples.get_path(\"ct\")\n>>> path\nPosixPath('/path/to/pydicom/data/test_files/CT_small.dcm')\n```\n\n----------------------------------------\n\nTITLE: Adding standard elements with keyword\nDESCRIPTION: This snippet shows how to add a standard DICOM element using the element's keyword, which automatically looks up the tag and VR.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/dataset_basics.rst#_snippet_24\n\nLANGUAGE: python\nCODE:\n```\n>>> 'WindowWidth' in ds\nFalse\n>>> ds.WindowWidth = 500\n>>> ds['WindowWidth']\n(0028, 1051) Window Width                        DS: \"500.0\"\n```\n\n----------------------------------------\n\nTITLE: Accessing DataElement by tag\nDESCRIPTION: This snippet shows how to access a specific `DataElement` within a DICOM dataset using its tag. The tag is specified as a tuple of the group number and element number in hexadecimal format. The code retrieves the element using `ds[0x0008, 0x0016]` and then accesses its keyword.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/dataset_basics.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> elem = ds[0x0008, 0x0016]\n>>> elem\n(0008, 0016) SOP Class UID                       UI: CT Image Storage\n>>> elem.keyword\n'SOPClassUID'\n>>> private_elem = ds[0x0043, 0x104E]\n>>> private_elem\n(0043, 104e) [Duration of X-ray on]              FL: 10.60060977935791\n>>> private_elem.keyword\n''\n```\n\n----------------------------------------\n\nTITLE: Accessing DataElement by keyword\nDESCRIPTION: This snippet demonstrates how to access a standard `DataElement` within a DICOM dataset using its keyword.  The keyword represents the data element. The code retrieves the element using `ds['SOPClassUID']`.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/dataset_basics.rst#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n>>> elem = ds['SOPClassUID']\n>>> elem\n(0008, 0016) SOP Class UID                       UI: CT Image Storage\n```\n\n----------------------------------------\n\nTITLE: Applying Modality LUT transformation\nDESCRIPTION: This snippet demonstrates how to apply a Modality LUT transformation to raw pixel data values to convert them to a specific physical quantity, such as Hounsfield units for CT. Requires pydicom and numpy.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/guides/user/working_with_pixel_data.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom pydicom import examples\nfrom pydicom.pixels import apply_modality_lut\n\nds = examples.ct\narr = ds.pixel_array\nhu = apply_modality_lut(arr, ds)\n```\n\n----------------------------------------\n\nTITLE: Setting DICOM element value by keyword or tag in pydicom\nDESCRIPTION: This snippet shows how to set the value of a DICOM element within a Dataset object using either the DICOM keyword or the tag.  It assigns new values to the PatientID and SeriesNumber elements using keywords, and to PatientName by using the tag.  This demonstrates modifying DICOM data within a dataset.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/guides/user/base_element.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> ds.PatientID = \"12345\"\n>>> ds.SeriesNumber = 5\n>>> ds[0x10, 0x10].value = 'Test'\n```\n\n----------------------------------------\n\nTITLE: Accessing Sequence elements in pydicom\nDESCRIPTION: This snippet shows how to access sequence elements within a DICOM dataset using either the tag or the element name.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/dataset_basics.rst#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n>>> seq = ds[0x0010, 0x1002]\n>>> seq = ds['OtherPatientIDsSequence']\n```\n\n----------------------------------------\n\nTITLE: Lossless JPEG-LS Compression of Greyscale Data with pydicom\nDESCRIPTION: This snippet demonstrates how to losslessly compress signed greyscale pixel data in-place using the JPEGLSLossless transfer syntax.  It initializes a dataset with CT data, checks relevant parameters, compresses the pixel data using `ds.compress(JPEGLSLossless)`, and prints the length of the compressed pixel data. Requires the pydicom library.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/guides/encoding/jpeg_ls.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom pydicom import examples\nfrom pydicom.uid import JPEGLSLossless\n\nds = examples.ct\nassert ds.SamplesPerPixel == 1\nassert ds.PhotometricInterpretation == 'MONOCHROME2'\nassert ds.BitsAllocated == 16\nassert ds.BitsStored == 16\nassert ds.PixelRepresentation == 1\nassert len(ds.PixelData) == 32768\n\nds.compress(JPEGLSLossless)\n\nprint(len(ds.PixelData))  # ~14180\n```\n\n----------------------------------------\n\nTITLE: Decompressing Pixel Data with pydicom\nDESCRIPTION: This example demonstrates how to decompress a compressed DICOM dataset using the `decompress()` method. It updates the Pixel Data, Transfer Syntax UID, and Image Pixel module elements.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/pixel_data/compressing.rst#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n>>> from pydicom import examples\n>>> ds = examples.jpeg2k\n>>> ds.decompress()\n```\n\n----------------------------------------\n\nTITLE: Grayscale Pixel Data (12-bit signed)\nDESCRIPTION: This code demonstrates how to create a grayscale DICOM dataset with 12-bit signed integer pixel data. It initializes a pydicom Dataset and sets DICOM attributes such as BitsAllocated, BitsStored, PixelRepresentation.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/pixel_data/creation.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport matplotlib.pyplot as plt\n\nfrom pydicom import Dataset, FileMetaDataset\nfrom pydicom.uid import ExplicitVRLittleEndian\n\nds = Dataset()\nds.file_meta = FileMetaDataset()\nds.file_meta.TransferSyntaxUID = ExplicitVRLittleEndian\n\nds.BitsAllocated = 16  # 16-bits allocated\n```\n\n----------------------------------------\n\nTITLE: Getting Transfer Syntax from DICOM File in pydicom\nDESCRIPTION: This snippet demonstrates how to read a DICOM file using pydicom and retrieve its transfer syntax UID and Bits Allocated. It requires the pydicom library to be installed and a valid DICOM file path to be provided. The transfer syntax indicates the compression method used for the pixel data.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/guides/user/image_data_handlers.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n>>> from pydicom import dcmread\n>>> ds = dcmread('path/to/dicom/file')\n>>> ds.file_meta.TransferSyntaxUID\n'1.2.840.10008.1.2.1'\n>>> ds.BitsAllocated\n16\n```\n\n----------------------------------------\n\nTITLE: Modifying multi-valued DICOM element\nDESCRIPTION: This snippet demonstrates how to modify a multi-valued element (list) in a DICOM dataset by assigning a new list, modifying elements by index, and inserting elements.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/dataset_basics.rst#_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n>>> ds.ImageType = ['ORIGINAL', 'PRIMARY', 'LOCALIZER']\n>>> ds.ImageType\n['ORIGINAL', 'PRIMARY', 'LOCALIZER']\n>>> ds.ImageType[1] = 'DERIVED'\n>>> ds.ImageType\n['ORIGINAL', 'DERIVED', 'LOCALIZER']\n>>> ds.ImageType.insert(1, 'PRIMARY')\n>>> ds.ImageType\n['ORIGINAL', 'PRIMARY', 'DERIVED', 'LOCALIZER']\n```\n\n----------------------------------------\n\nTITLE: Displaying DICOM Image with Matplotlib\nDESCRIPTION: This snippet demonstrates how to use pydicom to load a DICOM file, extract the pixel array, and display it as an image using matplotlib. It requires pydicom and matplotlib to be installed. The pixel array is accessed using the 'pixel_array' attribute of the DICOM dataset.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/guides/user/viewing_images.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport matplotlib.pyplot as plt\nfrom pydicom import examples\nds = examples.ct\nplt.imshow(ds.pixel_array, cmap=plt.cm.gray) # doctest: +ELLIPSIS\n\n```\n\n----------------------------------------\n\nTITLE: Compressing with JPEG-LS Lossless\nDESCRIPTION: This code snippet shows how to compress a DICOM dataset using JPEG-LS Lossless compression. It retrieves an example dataset and then calls the `compress()` method with `JPEGLSLossless` UID.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/pixel_data/compressing.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> from pydicom import examples\n>>> from pydicom.uid import JPEGLSLossless\n>>> ds = examples.ct\n>>> ds.compress(JPEGLSLossless)\n```\n\n----------------------------------------\n\nTITLE: Decompressing and Recompressing with Dataset.compress()\nDESCRIPTION: Shows how to decompress an already compressed dataset and then recompress it using a different transfer syntax. It requires a matching image data handler for the original transfer syntax. This snippet uses JPEG 2000 as the initial format.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/guides/user/image_data_compression.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Requires a JPEG 2000 compatible image data handler\nds = examples.jpeg2k\nds.decompress()\nds.compress(RLELossless)\nds.save_as(\"US1_RLE.dcm\")\n```\n\n----------------------------------------\n\nTITLE: Adding new element with add_new method\nDESCRIPTION: This snippet demonstrates how to add a new element to a DICOM dataset using the `add_new` method, requiring the tag, VR, and value.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/dataset_basics.rst#_snippet_23\n\nLANGUAGE: python\nCODE:\n```\n>>> from pydicom.datadict import dictionary_VR\n>>> dictionary_VR([0x0028, 0x1050])\n'DS'\n>>> ds.add_new([0x0028, 0x1050], 'DS', \"100.0\")\n>>> elem = ds[0x0028, 0x1050]\n>>> elem\n(0028, 1050) Window Center                       DS: \"100.0\"\n```\n\n----------------------------------------\n\nTITLE: Accessing items within a Sequence in pydicom\nDESCRIPTION: This snippet illustrates how to determine the length of a sequence and the type of its elements (which are Dataset objects), as well as how to access individual items within the sequence using indexing.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/dataset_basics.rst#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n>>> len(ds.OtherPatientIDsSequence)\n2\n>>> type(ds.OtherPatientIDsSequence[0])\n<class 'pydicom.dataset.Dataset'>\n>>> ds.OtherPatientIDsSequence[0]\n(0010, 0020) Patient ID                          LO: 'ABCD1234'\n(0010, 0022) Type of Patient ID                  CS: 'TEXT'\n>>> ds.OtherPatientIDsSequence[1]\n(0010, 0020) Patient ID                          LO: '1234ABCD'\n(0010, 0022) Type of Patient ID                  CS: 'TEXT'\n```\n\n----------------------------------------\n\nTITLE: Displaying Pixel Data with pydicom, NumPy, and matplotlib\nDESCRIPTION: This code shows how to display pixel data from a DICOM file using pydicom, NumPy, and matplotlib.  It reads the DICOM file, converts the pixel data to a NumPy array, and displays it as a grayscale image using matplotlib. It assumes that NumPy and matplotlib are installed.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/README.md#_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nimport matplotlib.pyplot as plt\nfrom pydicom import dcmread, examples\n\n# The path to the example \"ct\" dataset included with pydicom\npath: \"pathlib.Path\" = examples.get_path(\"ct\")\nds = dcmread(path)\n# `arr` is a numpy.ndarray\narr = ds.pixel_array\n\nplt.imshow(arr, cmap=\"gray\")\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Checking for element existence with 'in' operator in pydicom\nDESCRIPTION: This snippet demonstrates using the `in` operator to check if a `Dataset` contains a specific element, using either its keyword or tag.  It checks for the existence of 'PatientName' using both methods, which both return True.  This offers a simple way to verify if an element is present before attempting to access it.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/guides/user/base_element.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> \"PatientName\" in ds  # or (0x0010, 0x0010) in ds\nTrue\n```\n\n----------------------------------------\n\nTITLE: Compressing using Dataset.compress() in pydicom\nDESCRIPTION: Demonstrates how to compress an uncompressed dataset in-place using the `Dataset.compress()` method. It shows how to set the transfer syntax using a UID (RLELossless).\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/guides/user/image_data_compression.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pydicom import examples\nfrom pydicom.uid import RLELossless\n\nds = examples.ct\nds.compress(RLELossless)\nds.save_as(\"ct_rle_lossless.dcm\")\n```\n\n----------------------------------------\n\nTITLE: Handle large binary data with BulkDataURI on writing - pydicom\nDESCRIPTION: Demonstrates how to handle large binary data when converting a DICOM dataset to JSON using a `bulk_data_element_handler`. The handler is responsible for storing the data and returning a URI, which is then stored in the JSON dataset as a `BulkDataURI`. The `bulk_data_threshold` determines whether the data is handled by the handler or encoded inline.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/dicom_json.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> import pydicom\n>>> def bulk_data_handler(data_element):\n>>>     uri = store_data_and_return_uri(data_element)\n>>>     return uri\n>>>\n>>> ds = pydicom.examples.ct\n>>> ds_json = ds.to_json(bulk_data_element_handler=bulk_data_handler)\n```\n\n----------------------------------------\n\nTITLE: Applying palette color LUT to pixel data\nDESCRIPTION: This snippet demonstrates how to apply a palette color lookup table (LUT) to pixel data in a DICOM dataset with `Photometric Interpretation` of `PALETTE COLOR`, effectively converting the indexed pixel data into an RGB image.  Requires pydicom and numpy.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/guides/user/working_with_pixel_data.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom pydicom import examples\nfrom pydicom.pixels import apply_color_lut\n\n# Fetch an example PALETTE COLOR dataset\nds = examples.palette_color\narr = ds.pixel_array\nrgb = apply_color_lut(arr, ds)\n```\n\n----------------------------------------\n\nTITLE: Using dcmread as context manager\nDESCRIPTION: This snippet shows how to use `dcmread` as a context manager, which ensures that the file is properly closed after reading.  It opens the DICOM file within a `with` statement, and the dataset is automatically available as `ds` within the block. It then checks the type of `ds`.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/dataset_basics.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> with dcmread(path) as ds:\n...    type(ds)\n...\n<class 'pydicom.dataset.FileDataset'>\n```\n\n----------------------------------------\n\nTITLE: Compressing grayscale pixel data in-place using RLELossless\nDESCRIPTION: This example demonstrates compressing grayscale pixel data in-place using the RLELossless transfer syntax in pydicom. It loads a CT image, checks its pixel attributes (SamplesPerPixel, PhotometricInterpretation, BitsAllocated, PixelRepresentation), compresses the pixel data using ds.compress(RLELossless), and then prints the length of the compressed PixelData.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/guides/encoding/rle_lossless.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from pydicom import examples\n>>> from pydicom.uid import RLELossless\n>>> ds = examples.ct\n>>> ds.SamplesPerPixel\n1\n>>> ds.PhotometricInterpretation\n'MONOCHROME2'\n>>> ds.BitsAllocated\n16\n>>> ds.PixelRepresentation\n1\n>>> ds.compress(RLELossless)\n>>> len(ds.PixelData)\n21020\n```\n\n----------------------------------------\n\nTITLE: Compressing an existing dataset with RLE Lossless\nDESCRIPTION: This code snippet demonstrates how to compress an existing DICOM dataset using RLE Lossless compression. It retrieves an example dataset, checks if it's compressed, and then compresses it using the `compress()` method with `RLELossless` UID.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/pixel_data/compressing.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> from pydicom import examples\n>>> from pydicom.uid import RLELossless\n>>> ds = examples.ct\n>>> ds.file_meta.TransferSyntaxUID.is_compressed\nFalse\n>>> ds.compress(RLELossless)\n```\n\n----------------------------------------\n\nTITLE: Grayscale Pixel Data (8-bit unsigned)\nDESCRIPTION: This Python code demonstrates how to create a grayscale DICOM dataset with 8-bit unsigned integer pixel data. It initializes a pydicom Dataset, sets relevant DICOM attributes like BitsAllocated, BitsStored, PixelRepresentation, SamplesPerPixel, and PhotometricInterpretation.  It then creates a NumPy array representing a circle, converts it to bytes, and assigns it to the PixelData element. The code handles both even and odd number of bytes, padding the odd ones.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/pixel_data/creation.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport matplotlib.pyplot as plt\n\nfrom pydicom import Dataset, FileMetaDataset\nfrom pydicom.uid import ExplicitVRLittleEndian\n\nds = Dataset()\nds.file_meta = FileMetaDataset()\nds.file_meta.TransferSyntaxUID = ExplicitVRLittleEndian\n\nds.BitsAllocated = 8  # 8-bit containers\nds.BitsStored = 8  # 8-bits used\nds.HighBit = ds.BitsStored - 1\nds.PixelRepresentation = 0  # unsigned\n\nds.SamplesPerPixel = 1\nds.PhotometricInterpretation = \"MONOCHROME2\"\n\n## Even number of bytes\n# Create a 480 x 320, 8-bit unsigned array\narr = draw_circle((320, 480), \"uint8\", 255)\nassert arr.size % 2 == 0\n\n# No padding needed\nds.PixelData = arr.tobytes()\nds[\"PixelData\"].VR = \"OB\"\nds.Rows = arr.shape[0]  # 320 pixels\nds.Columns = arr.shape[1]  # 480 pixels\n\nplt.imshow(ds.pixel_array)\nplt.show()\n\n## Odd number of bytes\n# Create a 31 x 63, 8-bit unsigned array\narr = draw_circle((63, 31), \"uint8\", 255)\nassert arr.size % 2 == 1\n\n# Trailing padding required to make the length an even number of bytes\nds.PixelData = b\"\".join((arr.tobytes(), b\"\\x00\"))\nds[\"PixelData\"].VR = \"OB\"\nds.Rows = arr.shape[0]\nds.Columns = arr.shape[1]\n\nplt.imshow(ds.pixel_array)\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Modifying sequence elements in pydicom\nDESCRIPTION: This snippet shows how to modify elements within a DICOM sequence, including initializing, appending to a sequence, and getting the length.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/dataset_basics.rst#_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n>>> from pydicom.dataset import Dataset\n>>> ds.OtherPatientIDsSequence = [Dataset(), Dataset()]\n>>> ds.OtherPatientIDsSequence.append(Dataset())\n>>> len(ds.OtherPatientIDsSequence)\n3\n```\n\n----------------------------------------\n\nTITLE: Accessing Pixel Data as NumPy array in pydicom\nDESCRIPTION: This code demonstrates accessing pixel data as a NumPy array using the `pixel_array` property of a DICOM `Dataset`. It loads an example CT dataset, retrieves the pixel array, and prints the array. This requires the NumPy library to be installed and is a more convenient way to work with pixel data for image processing.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/guides/user/base_element.rst#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n>>> arr = ds.pixel_array\n>>> arr # doctest: +NORMALIZE_WHITESPACE\narray([[175, 180, 166, ..., 203, 207, 216],\n       [186, 183, 157, ..., 181, 190, 239],\n       [184, 180, 171, ..., 152, 164, 235],\n       ...,\n       [906, 910, 923, ..., 922, 929, 927],\n       [914, 954, 938, ..., 942, 925, 905],\n       [959, 955, 916, ..., 911, 904, 909]], dtype=int16)\n```\n\n----------------------------------------\n\nTITLE: Compressing Pixel Data with JPEGLS Near-Lossless - Python\nDESCRIPTION: This code snippet demonstrates how to compress a NumPy array containing pixel data using the JPEGLS Near-Lossless compression algorithm within the pydicom library. It first clips the pixel data array to a specified range, then compresses the array using `ds.compress()` with the `JPEGLSNearLossless` encoder. The `jls_error` parameter defines the acceptable error margin during compression. The resulting compressed pixel data is then accessed via `ds.PixelData`. NumPy and pyjpegls are required for this operation.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/guides/encoding/jpeg_ls.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\narr = np.clip(minimum + jls_error, maximum - jls_error)\n\nds.compress(JPEGLSNearLossless, arr, jls_error=jls_error)\n\nprint(ds.PixelData)\n```\n\n----------------------------------------\n\nTITLE: Converting to ndarray with Metadata - Python\nDESCRIPTION: This example shows how to use `Decoder.as_array()` to convert pixel data to a NumPy array while also retrieving metadata about the array, such as color space and dimensions.  It emphasizes the importance of using `get_decoder` to get the appropriate Decoder instance.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/pixel_data/introduction.rst#_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nfrom pydicom import examples\nfrom pydicom.pixels import get_decoder\n\nds = examples.ybr_color\nassert ds.PhotometricInterpretation == \"YBR_FULL_422\"\n\n# Get the 'Decoder' instance required to decode the dataset's pixel data\ndecoder = get_decoder(ds.file_meta.TransferSyntaxUID)\n\n# Converts the pixel data to an ndarray in the original color space\narr, meta = decoder.as_array(ds, raw=True, index=0)\nassert (meta[\"rows\"], meta[\"columns\"], meta[\"samples_per_pixel\"]) == arr.shape\nassert meta[\"photometric_interpretation\"] == \"YBR_FULL_422\"\n\n# Converts the pixel data to an ndarray in RGB color space\narr, meta = decoder.as_array(ds, index=0)\nassert meta[\"photometric_interpretation\"] == \"RGB\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Pixel Data\nDESCRIPTION: This example demonstrates how to access the Pixel Data element in a DICOM dataset and retrieve a portion of the data as bytes. It assumes the dataset has been loaded and the Pixel Data element is present. Note the use of slicing `[:50]` to retrieve only the first 50 bytes.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/pixel_data/introduction.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom pydicom import examples\nds = examples.jpeg2k\nds.group_dataset(0x7FE0)\nprint(ds.PixelData[:50])\n```\n\n----------------------------------------\n\nTITLE: Minimizing Memory Usage with pixel_array - Python\nDESCRIPTION: This snippet demonstrates how to minimize memory usage when accessing pixel data by providing the path to the DICOM dataset instead of the dataset object itself to `pixel_array`. This loads only the necessary pixel data and Image Pixel module elements, avoiding loading the entire dataset into memory.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/pixel_data/introduction.rst#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom pydicom import examples\nfrom pydicom.pixels import pixel_array\n\n# Get the path to the 'examples.rt_dose' dataset\npath = examples.get_path(\"rt_dose\")\n\n# Return the first frame of the pixel data\narr = pixel_array(path, index=0)\n```\n\n----------------------------------------\n\nTITLE: Convert DICOM dataset to JSON string and dictionary - pydicom\nDESCRIPTION: Demonstrates how to convert a DICOM dataset to a JSON string using `to_json()` and to a JSON dictionary using `to_json_dict()`.  These methods are part of the pydicom library. The JSON string format is useful for low-level serialization, while the dictionary format is convenient for higher-level Python APIs.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/dicom_json.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> import pydicom\n>>> ds = pydicom.examples.ct\n>>> ds.to_json()\n'{\"00080005\": {\"Value\": [\"ISO_IR 100\"], \"vr\": \"CS\"}, \"00080008\": {\"Value\":...'\n>>> ds.to_json_dict()\n{\"00080005\": {\"Value\": [\"ISO_IR 100\"], \"vr\": \"CS\"}, \"00080008\": {\"Value\":...\n```\n\n----------------------------------------\n\nTITLE: Checking for element existence using 'in'\nDESCRIPTION: This snippet shows how to check if an element (standard, private, or repeating group) exists in a DICOM dataset using the `in` operator with either the keyword or tag.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/dataset_basics.rst#_snippet_25\n\nLANGUAGE: python\nCODE:\n```\n>>> [0x0043, 0x104E] in ds\nTrue\n```\n\n----------------------------------------\n\nTITLE: Encapsulating Compressed Data from Third-Party Packages in pydicom\nDESCRIPTION: This example shows how to encapsulate pixel data compressed by third-party packages into a DICOM dataset using `encapsulate` and `encapsulate_extended` functions, setting the Transfer Syntax UID and saving the dataset.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/pixel_data/compressing.rst#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom pydicom import examples\nfrom pydicom.encaps import encapsulate, encapsulate_extended\nfrom pydicom.uid import JPEGBaseline8Bit\n\n# Fetch an example dataset\nds = examples.ct\n\n# Use third-party package to compress\n# Let's assume it compresses to JPEG Baseline\nframes: list[bytes] = third_party_compression_func(...)\n\n# Set the *Transfer Syntax UID* appropriately\nds.file_meta.TransferSyntaxUID = JPEGBaseline8Bit\n# For *Samples per Pixel* 1 the *Photometric Interpretation* is unchanged\n\n# Basic encapsulation\nds.PixelData = encapsulate(frames)\nds[\"PixelData\"].VR = \"OB\"  # always for encapsulated pixel data\nds.save_as(\"ct_compressed_basic.dcm\")\n\n# Extended encapsulation\nresult: tuple[bytes, bytes, bytes] = encapsulate_extended(frames)\nds.PixelData = result[0]\nds.ExtendedOffsetTable = result[1]\nds.ExtendedOffsetTableLength = result[2]\nds.save_as(\"ct_compressed_ext.dcm\")\n```\n\n----------------------------------------\n\nTITLE: Compressing with JPEG-LS Near Lossless\nDESCRIPTION: This code snippet compresses a DICOM dataset using JPEG-LS Near Lossless compression. An example RGB color image is loaded and compressed, specifying a `jls_error` parameter to control the quality loss.  It first checks `PixelRepresentation` to be unsigned.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/pixel_data/compressing.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> from pydicom import examples\n>>> from pydicom.uid import JPEGLSNearLossless\n>>> ds = examples.rgb_color\n>>> ds.PixelRepresentation\n0\n>>> ds.compress(JPEGLSNearLossless, jls_error=3)\n```\n\n----------------------------------------\n\nTITLE: Decompressing Pixel Data with Specific Plugin in pydicom\nDESCRIPTION: This example illustrates how to decompress a compressed DICOM dataset using a specific decoding plugin, such as 'pylibjpeg'.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/pixel_data/compressing.rst#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n>>> from pydicom import examples\n>>> ds = examples.jpeg2k\n>>> ds.decompress(decoding_plugin=\"pylibjpeg\")\n```\n\n----------------------------------------\n\nTITLE: Checking FileSet staging status in pydicom\nDESCRIPTION: Demonstrates how to check if changes to a pydicom FileSet are staged using the `is_staged` property. This property indicates whether the FileSet needs to be written to disk to persist the changes.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/filesets.rst#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n>>> fs.is_staged\nTrue\n```\n\n----------------------------------------\n\nTITLE: Accessing DICOM elements by keyword or tag in pydicom\nDESCRIPTION: This snippet shows how to access DICOM elements within a `Dataset` object using either their DICOM keyword or their tag. Accessing by keyword returns the element's value directly, while accessing by tag returns a `DataElement` instance, requiring the `.value` attribute to be accessed to get the value. It also shows how to modify existing values.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/guides/user/base_element.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> ds.PatientName  # element keyword\n'Last^First^mid^pre'\n>>> ds[0x10, 0x10].value  # element tag\n'Last^First^mid^pre'\n```\n\n----------------------------------------\n\nTITLE: Converting RGB to YCbCr and compressing with RLELossless\nDESCRIPTION: This example demonstrates converting RGB pixel data to YCbCr color space using pydicom.pixels.convert_color_space, then compressing the converted data with RLELossless. It requires NumPy. A new SOP Instance UID is generated after the color space change and compression. It shows the process of converting RGB data to YBR_FULL, compressing it, and updating the SOPInstanceUID.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/guides/encoding/rle_lossless.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> from pydicom import examples\n>>> from pydicom.pixels import convert_color_space\n>>> from pydicom.uid import generate_uid\n>>> ds = examples.rgb_color\n>>> rgb = ds.pixel_array\n>>> ybr = convert_color_space(rgb, 'RGB', 'YBR_FULL')\n>>> ds.PhotometricInterpretation = 'YBR_FULL'\n>>> ds.compress(RLELossless, ybr)\n>>> ds.SOPInstanceUID = generate_uid()\n>>> len(ds.PixelData)\n187460\n```\n\n----------------------------------------\n\nTITLE: Pixel Data Decoding Function in Python\nDESCRIPTION: This function performs the actual decoding of the compressed pixel data. It takes the raw compressed data (`src`) and a `DecodeRunner` instance as input and returns the decoded pixel data as a bytearray or bytes object. It requires access to decoding options such as transfer_syntax_uid, rows, columns, and other pixel-related information.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/guides/decoding/decoder_plugins.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef decoder(src: bytes, runner: DecodeRunner) -> bytearray | bytes:\n  # Implementation details for decoding the pixel data\n  pass\n```\n\n----------------------------------------\n\nTITLE: Creating Float Pixel Data with pydicom\nDESCRIPTION: This snippet demonstrates how to create a DICOM dataset with float pixel data using a NumPy array. It sets the BitsAllocated attribute to 32, SamplesPerPixel, PhotometricInterpretation, Rows, and Columns. It also shows that BitsStored, HighBit and PixelRepresentation should not be present.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/pixel_data/creation.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom pydicom import Dataset, FileMetaDataset\nfrom pydicom.uid import ExplicitVRLittleEndian\n\nds = Dataset()\nds.file_meta = FileMetaDataset()\nds.file_meta.TransferSyntaxUID = ExplicitVRLittleEndian\n\nds.BitsAllocated = 32\nds.SamplesPerPixel = 1\nds.PhotometricInterpretation = \"MONOCHROME2\"\n\n# Create a 480 x 320, 32-bit float array\narr = draw_circle((320, 480), \"float32\", 1024.58)\n\nds.FloatPixelData = arr.tobytes()\nds.Rows = arr.shape[0]\nds.Columns = arr.shape[1]\n```\n\n----------------------------------------\n\nTITLE: Modifying and Saving Overlay Data with pydicom\nDESCRIPTION: This code demonstrates how to modify overlay data using NumPy, pack the modified data back into bytes, and update the overlay data element in the DICOM dataset. It requires NumPy and the pydicom.pixels.pack_bits function. The modified dataset is then saved to a new DICOM file.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/guides/user/working_with_overlays.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Add a line\narr[10, :] = 1\n\n# Pack the data\nfrom pydicom.pixels import pack_bits\npacked_bytes = pack_bits(arr)\n\n# Update the element value\nds[0x6000, 0x3000].value = packed_bytes\nds.save_as(\"temp.dcm\")\n```\n\n----------------------------------------\n\nTITLE: Creating Signed Integer Pixel Data with pydicom\nDESCRIPTION: This snippet demonstrates how to create a DICOM dataset with signed integer pixel data using a NumPy array. It sets various DICOM attributes like BitsStored, HighBit, PixelRepresentation, SamplesPerPixel, PhotometricInterpretation, Rows, and Columns.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/pixel_data/creation.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nds.BitsStored = 12  # 12-bits used; interval is [-2048, 2047]\nds.HighBit = ds.BitsStored - 1\nds.PixelRepresentation = 1  # signed\n\nds.SamplesPerPixel = 1\nds.PhotometricInterpretation = \"MONOCHROME2\"\n\n# Create a 480 x 320, 16-bit signed array\narr = draw_circle((320, 480), \"int16\", -2048)\n\nds.PixelData = arr.tobytes()\nds[\"PixelData\"].VR = \"OW\"\nds.Rows = arr.shape[0]\nds.Columns = arr.shape[1]\n\nplt.imshow(ds.pixel_array)\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Compressing Grayscale Pixel Data in-place using pydicom\nDESCRIPTION: This example demonstrates how to compress grayscale pixel data in-place using DeflatedImageFrameCompression in pydicom. It initializes a dataset, verifies pixel data parameters, compresses the pixel data, and checks the length of the compressed data.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/guides/encoding/defl_image.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from pydicom import examples\n>>> from pydicom.uid import DeflatedImageFrameCompression\n>>> ds = examples.ct\n>>> ds.SamplesPerPixel\n1\n>>> ds.PhotometricInterpretation\n'MONOCHROME2'\n>>> ds.BitsAllocated\n16\n>>> ds.PixelRepresentation\n1\n>>> ds.compress(DeflatedImageFrameCompression)\n>>> len(ds.PixelData)\n22288\n```\n\n----------------------------------------\n\nTITLE: Extracting Raw Waveform Data using multiplex_array()\nDESCRIPTION: This snippet demonstrates how to extract raw waveform data (without channel sensitivity corrections) from a pydicom dataset using the `multiplex_array()` function with the `as_raw` keyword parameter. It returns a NumPy ndarray of the raw waveform data, with the shape (samples, channels).\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/guides/user/working_with_waveforms.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom pydicom.waveforms import multiplex_array\n>>> arr = multiplex_array(ds, 0, as_raw=True)\n>>> arr\narray([[  80,   90,   10, ...,  -20,  -55,  -40],\n       [  65,   85,   20, ...,  -20,  -60,  -40],\n       [  50,   80,   30, ...,  -20,  -65,  -40],\n       ...,\n       [  20,  105,   85, ..., -110, -120,  -80],\n       [  17,  110,   93, ..., -110, -120,  -85],\n       [  20,  110,   90, ..., -110, -120,  -90]], dtype=int16)\n```\n\n----------------------------------------\n\nTITLE: Accessing Overlay Data Element in pydicom\nDESCRIPTION: This code snippet demonstrates how to access a specific overlay data element within a pydicom Dataset using its group and element numbers. It returns a DataElement object containing the raw overlay data. Requires the pydicom library to be installed.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/guides/user/working_with_overlays.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from pydicom import examples\n>>> ds = examples.overlay\n>>> elem = ds[0x6000, 0x3000]  # returns a DataElement\n>>> print(elem)\n```\n\n----------------------------------------\n\nTITLE: Modifying DICOM element by keyword\nDESCRIPTION: This snippet shows how to modify the value of a DICOM element using the element's keyword.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/dataset_basics.rst#_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n>>> ds.PatientName = 'Citizen^Snips'\n>>> elem\n(0010, 0010) Patient's Name                      PN: 'Citizen^Snips'\n```\n\n----------------------------------------\n\nTITLE: Compressing with JPEG-LS Near Lossless with signed integers\nDESCRIPTION: This code snippet illustrates compressing a DICOM dataset with JPEG-LS Near Lossless compression when the pixel data uses 16-bit signed integers. The code snippet checks the `PixelRepresentation`, `BitsStored`, and the range of the pixel array. It then compresses the data.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/pixel_data/compressing.rst#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n>>> from pydicom import examples\n>>> from pydicom.uid import JPEGLSNearLossless\n>>> ds = examples.ct\n>>> ds.PixelRepresentation\n1\n>>> ds.BitsStored\n16\n>>> arr = ds.pixel_array\n>>> arr.min(), arr.max()\n(128, 2191)\n>>> ds.compress(JPEGLSNearLossless, jls_error=3)\n```\n\n----------------------------------------\n\nTITLE: Applying DICOM well-known color palettes\nDESCRIPTION: This snippet shows how to apply a DICOM well-known color palette, such as 'PET', to 8-bit pixel data using the `apply_color_lut` function. Requires pydicom and numpy.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/guides/user/working_with_pixel_data.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom pydicom import examples\nfrom pydicom.pixels import apply_color_lut\n\nds = examples.palette_color\narr = ds.pixel_array\n# You could also use the corresponding well-known SOP Instance UID\nrgb = apply_color_lut(arr, palette='PET')\n```\n\n----------------------------------------\n\nTITLE: Multi-frame RGB Pixel Data (8-bit unsigned)\nDESCRIPTION: This Python code creates a multi-frame RGB DICOM dataset with 8-bit unsigned pixel data. It initializes a pydicom Dataset, sets DICOM attributes such as BitsAllocated, BitsStored, PixelRepresentation, SamplesPerPixel, PhotometricInterpretation, PlanarConfiguration, and NumberOfFrames. It then creates a NumPy array representing two frames of RGB data, converts it to bytes, and assigns it to the PixelData element. The code adds trailing padding if the number of bytes is odd.  It then iterates through the pixels and displays the frames.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/pixel_data/creation.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport matplotlib.pyplot as plt\n\nfrom pydicom import Dataset, FileMetaDataset\nfrom pydicom.pixels import iter_pixels\nfrom pydicom.uid import ExplicitVRLittleEndian\n\nds = Dataset()\nds.file_meta = FileMetaDataset()\nds.file_meta.TransferSyntaxUID = ExplicitVRLittleEndian\n\nds.BitsAllocated = 8  # 8-bit containers\nds.BitsStored = 8  # 8-bits used\nds.HighBit = ds.BitsStored - 1\nds.PixelRepresentation = 0  # unsigned\n\nds.SamplesPerPixel = 3\nds.PhotometricInterpretation = \"RGB\"\nds.PlanarConfiguration = 0\nds.NumberOfFrames = 2\n\n# Create 2 frames of 480 x 320 x 3, 8-bit unsigned array\narr = np.empty((2, 320, 480, 3), dtype=\"uint8\")\n# Frame 1\narr[0, ..., 0] = draw_circle((320, 480), \"uint8\", 255)\narr[0, ..., 1] = draw_circle((320, 480), \"uint8\", 127)\narr[0, ..., 2] = draw_circle((320, 480), \"uint8\", 0)\n\n# Frame 2\narr[1, ..., 0] = draw_circle((320, 480), \"uint8\", 0)\narr[1, ..., 1] = draw_circle((320, 480), \"uint8\", 127)\narr[1, ..., 2] = draw_circle((320, 480), \"uint8\", 255)\n\nds.PixelData = b\"\".join((arr.tobytes(), b\"\\x00\")) if arr.size % 2 else arr.tobytes()\nds[\"PixelData\"].VR = \"OB\"\nds.Rows = arr.shape[1]\nds.Columns = arr.shape[2]\n\n# Display the frames\nim = plt.imshow(np.zeros((ds.Rows, ds.Columns, 3), dtype=\"uint8\"))\nfor frame in iter_pixels(ds):\n    im.set_data(frame)\n    plt.pause(1)\n```\n\n----------------------------------------\n\nTITLE: Displaying Raw Overlay Data Bytes in pydicom\nDESCRIPTION: This example shows how to access the raw byte value of an overlay data element in pydicom. The overlay data is initially stored as raw bytes and requires further processing to be useful. Requires the pydicom library and a DICOM file containing overlay data.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/guides/user/working_with_overlays.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> elem.value # doctest: +ELLIPSIS\nb'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00...'\n```\n\n----------------------------------------\n\nTITLE: Setting Channel Definitions - Python\nDESCRIPTION: This snippet creates *ChannelDefinitionSequence* items to define each channel in the multiplex group. It sets elements such as *ChannelSampleSkew*, *WaveformBitsStored*, *ChannelSourceSequence*, *CodeValue*, *CodingSchemeDesignator*, *CodingSchemeVersion*, and *CodeMeaning*.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/waveforms.rst#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n>>> new.ChannelDefinitionSequence = [Dataset(), Dataset()]\n>>> chdef_seq = new.ChannelDefinitionSequence\n>>> for chdef, curve_type in zip(chdef_seq, [\"cosine\", \"sine\"]):\n...     chdef.ChannelSampleSkew = \"0\"\n...     chdef.WaveformBitsStored = 16\n...     chdef.ChannelSourceSequence = [Dataset()]\n...     source = chdef.ChannelSourceSequence[0]\n...     source.CodeValue = \"1.0\"\n...     source.CodingSchemeDesignator = \"PYDICOM\"\n...     source.CodingSchemeVersion = \"1.0\"\n...     source.CodeMeaning = curve_type\n```\n\n----------------------------------------\n\nTITLE: Handling missing elements when adding to FileSet in pydicom\nDESCRIPTION: Demonstrates how to handle errors that occur when adding a SOP instance to a FileSet using the `add()` method if required elements are missing. It shows how to update the DICOM instance and retry the addition. This also shows how the default record creation functions can fail and the different approaches to resolve those errors.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/filesets.rst#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n>>> rt_dose = examples.rt_dose\n>>> fs.add(rt_dose)\nTraceback (most recent call last):\n  File \".../pydicom/fileset.py\", line 1858, in _recordify\n    record = DIRECTORY_RECORDERS[record_type](ds)\n  File \".../pydicom/fileset.py\", line 2338, in _define_rt_dose\n    _check_dataset(ds, [\"InstanceNumber\", \"DoseSummationType\"])\n  File \".../pydicom/fileset.py\", line 2281, in _check_dataset\n    raise ValueError(\nValueError: The instance's (0020, 0013) 'Instance Number' element cannot be empty\n\n    The above exception was the direct cause of the following exception:\n\n    Traceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \".../pydicom/fileset.py\", line 1039, in add\n    record = next(record_gen)\n  File \".../pydicom/fileset.py\", line 1860, in _recordify\n    raise ValueError(\nValueError: Unable to use the default 'RT DOSE' record creator as the instance is missing a required element or value. Either update the instance, define your own record creation function or use 'FileSet.add_custom()' instead\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> rt_dose.InstanceNumber = \"1\"\n>>> fs.add(rt_dose)\n```\n\n----------------------------------------\n\nTITLE: Compressing RGB pixel data in-place using RLELossless\nDESCRIPTION: This example shows how to compress RGB pixel data in-place with RLELossless encoding in pydicom. It loads an RGB color image, verifies its pixel attributes (SamplesPerPixel, PhotometricInterpretation, BitsAllocated, PixelRepresentation), compresses the data, and outputs the length of the resulting compressed PixelData.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/guides/encoding/rle_lossless.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> from pydicom import examples\n>>> ds = examples.rgb_color\n>>> ds.SamplesPerPixel\n3\n>>> ds.PhotometricInterpretation\n'RGB'\n>>> ds.BitsAllocated\n8\n>>> ds.PixelRepresentation\n0\n>>> len(ds.PixelData)\n921600\n>>> ds.compress(RLELossless)\n>>> len(ds.PixelData)\n424152\n```\n\n----------------------------------------\n\nTITLE: Applying VOI LUT or Windowing operation\nDESCRIPTION: This snippet demonstrates how to apply a VOI LUT or windowing operation to pixel data. It uses the `apply_voi_lut` function with an input array and a dataset containing a VOI LUT module.  Requires pydicom and numpy.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/guides/user/working_with_pixel_data.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom pydicom import examples\nfrom pydicom.pixels import apply_voi_lut\n\nds = examples.overlay\narr = ds.pixel_array\nout = apply_voi_lut(arr, ds, index=0)\n```\n\n----------------------------------------\n\nTITLE: Checking Uncompressed Transfer Syntax\nDESCRIPTION: This example retrieves the Transfer Syntax UID from a DICOM dataset's file metadata and checks if the pixel data is compressed. This example uses an uncompressed image.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/pixel_data/introduction.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom pydicom import examples\nds = examples.ct\ntsyntax = ds.file_meta.TransferSyntaxUID\nprint(tsyntax.name)\nprint(tsyntax.is_compressed)\n```\n\n----------------------------------------\n\nTITLE: Modifying Patient ID in DICOM file with pydicom\nDESCRIPTION: This snippet demonstrates how to read a DICOM file, modify the 'Patient ID' element, and save the changes to a new file. It requires the pydicom library.  It shows a basic example of modifying metadata within a DICOM dataset.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/README.md#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nfrom pydicom import dcmread\n\nds = dcmread(\"/path/to/file.dcm\")\n# Edit the (0010,0020) 'Patient ID' element\nds.PatientID = \"12345678\"\nds.save_as(\"/path/to/file_updated.dcm\")\n```\n\n----------------------------------------\n\nTITLE: Lossless JPEG-LS Compression of RGB Data with pydicom\nDESCRIPTION: This snippet demonstrates how to losslessly compress unsigned RGB pixel data in-place using the JPEGLSLossless transfer syntax. It initializes a dataset with RGB color data, checks relevant parameters, compresses the pixel data using `ds.compress(JPEGLSLossless)`, and prints the length of the compressed pixel data. Requires the pydicom library.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/guides/encoding/jpeg_ls.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pydicom import examples\nfrom pydicom.uid import JPEGLSLossless\n\nds = examples.rgb_color\nassert ds.SamplesPerPixel == 1\nassert ds.PhotometricInterpretation == 'RGB'\nassert ds.BitsAllocated == 8\nassert ds.BitsStored == 8\nassert ds.PixelRepresentation == 0\nassert len(ds.PixelData) == 921600\n\nds.compress(JPEGLSLossless)\n\nprint(len(ds.PixelData))  # ~261792\n```\n\n----------------------------------------\n\nTITLE: Controlling decoding using raw parameter\nDESCRIPTION: This example demonstrates how to skip the default color space conversion by passing `raw=True` to `pixel_array`.  It loads a DICOM dataset with YBR_FULL_422 photometric interpretation, retrieves the pixel data with and without conversion (raw=True), and displays both using matplotlib.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/pixel_data/introduction.rst#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport matplotlib.pyplot as plt\n\nfrom pydicom import examples\nfrom pydicom.pixels import pixel_array\n\nds = examples.ybr_color\nassert ds.PhotometricInterpretation == \"YBR_FULL_422\"\n\nybr = pixel_array(ds, index=0, raw=True)\nrgb = pixel_array(ds, index=0)\n\nfig, (im1, im2) = plt.subplots(1, 2)\nim1.imshow(ybr)\nim1.set_title(\"Original (in YCbCr)\")\nim2.imshow(rgb)\nim2.set_title(\"Converted (in RGB)\")\nplt.show()\n```\n\n----------------------------------------\n\nTITLE: Accessing File Meta Information in pydicom\nDESCRIPTION: This snippet demonstrates how to access the File Meta Information stored in the `file_meta` attribute of a pydicom Dataset, which contains essential information about the DICOM file format.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/dataset_basics.rst#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n>>> ds.file_meta\n(0002, 0000) File Meta Information Group Length  UL: 192\n(0002, 0001) File Meta Information Version       OB: b'\\x00\\x01'\n(0002, 0002) Media Storage SOP Class UID         UI: CT Image Storage\n(0002, 0003) Media Storage SOP Instance UID      UI: 1.3.6.1.4.1.5962.1.1.1.1.1.20040119072730.12322\n(0002, 0010) Transfer Syntax UID                 UI: Explicit VR Little Endian\n(0002, 0012) Implementation Class UID            UI: 1.3.6.1.4.1.5962.2\n(0002, 0013) Implementation Version Name         SH: 'DCTOOL100'\n(0002, 0016) Source Application Entity Title     AE: 'CLUNIE1'\n```\n\n----------------------------------------\n\nTITLE: Setting WaveformData - Python\nDESCRIPTION: This snippet stacks the channel data, converts it to bytes using `tobytes()`, and sets the *WaveformData* element of the new multiplex group. It also sets the *WaveformBitsAllocated* and *WaveformSampleInterpretation* elements to match the data type.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/waveforms.rst#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n>>> arr = np.stack((ch1, ch2), axis=1)\n>>> arr.shape\n(126, 2)\n>>> new.WaveformData = arr.tobytes()\n>>> new.WaveformBitsAllocated = 16\n>>> new.WaveformSampleInterpretation = 'SS'\n```\n\n----------------------------------------\n\nTITLE: Lossy Compression of RGB Pixel Data with JPEG 2000 (Python)\nDESCRIPTION: Illustrates lossy compression of unsigned RGB pixel data using JPEG 2000 with a specified compression ratio. The example sets `j2k_cr` to [20], indicating a compression ratio of 20:1. The `JPEG2000` UID specifies the lossy JPEG 2000 transfer syntax.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/guides/encoding/jpeg_2k.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom pydicom import examples\nfrom pydicom.uid import JPEG2000\n\nds = examples.rgb_color\nassert ds.SamplesPerPixel == 1\nassert ds.PhotometricInterpretation == 'RGB'\nassert ds.BitsAllocated == 8\nassert ds.BitsStored == 8\nassert ds.PixelRepresentation == 0\nassert len(ds.PixelData) == 921600\n\nds.compress(JPEG2000, j2k_cr=[20])\n\nprint(len(ds.PixelData))  # ~46100\n```\n\n----------------------------------------\n\nTITLE: Lossy JPEG 2000 Compression with pydicom\nDESCRIPTION: This example shows how to perform lossy JPEG 2000 compression using pydicom, specifying the image quality using the `j2k_cr` parameter to define quality layers.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/pixel_data/compressing.rst#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n>>> from pydicom import examples\n>>> from pydicom.uid import JPEG2000\n>>> ds = examples.ct\n>>> ds.compress(JPEG2000, j2k_cr=[5, 2])  # 2 quality layers\n```\n\n----------------------------------------\n\nTITLE: Accessing Code Values in pydicom.sr\nDESCRIPTION: This code snippet demonstrates how to access individual `Code` values using their scheme (e.g., SCT) or the DICOM CID. It shows accessing the 'Transverse' concept from the SCT scheme and the 'Cornea' concept from CID4.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/reference/sr.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pydicom.sr import codes\n>>> codes.SCT.Transverse\nCode(value='62824007', scheme_designator='SCT', meaning='Transverse', scheme_version=None)\n>>> codes.CID4.Cornea\nCode(value='28726007', scheme_designator='SCT', meaning='Cornea', scheme_version=None)\n```\n\n----------------------------------------\n\nTITLE: Accessing Private Data Element Value by Tag\nDESCRIPTION: This snippet demonstrates how to access the value of a private data element using its tag number.  It shows that accessing by tag returns a DataElement instance, and the .value attribute must be used to retrieve the actual value. It requires an existing pydicom Dataset.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/guides/user/private_data_elements.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> ds[0x00091001].value\n'GE_GENESIS_FF'\n```\n\n----------------------------------------\n\nTITLE: Basic Codify Command Example (pydicom)\nDESCRIPTION: This example demonstrates the basic usage of the `pydicom codify` command to generate Python code from a DICOM file located within the pydicom test data files. It reads the rtplan.dcm file and prints the generated code to the console.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/guides/cli/cli_codify.rst#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ pydicom codify pydicom::rtplan.dcm\n\n# Coded version of DICOM file 'C:\\git\\pydicom\\pydicom\\data\\test_files\\rtplan.dcm'\n# Produced by pydicom codify utility script\nimport pydicom\nfrom pydicom.dataset import Dataset, FileMetaDataset\nfrom pydicom.sequence import Sequence\n\n# Main data elements\nds = Dataset()\nds.InstanceCreationDate = '20030903'\nds.InstanceCreationTime = '150031'\nds.SOPClassUID = '1.2.840.10008.5.1.4.1.1.481.5'\nds.SOPInstanceUID = '1.2.777.777.77.7.7777.7777.20030903150023'\nds.StudyDate = '20030716'\nds.StudyTime = '153557'\n.\n.\n.\n```\n\n----------------------------------------\n\nTITLE: Accessing Image Pixel Module Elements\nDESCRIPTION: This code shows how to access the Image Pixel module elements (group 0x0028) in a DICOM dataset. These elements provide information needed to properly interpret the encoded pixel data byte stream, such as Samples per Pixel, Photometric Interpretation, and Rows/Columns.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/pixel_data/introduction.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom pydicom import examples\nds = examples.ct\nds.group_dataset(0x0028)\n```\n\n----------------------------------------\n\nTITLE: Near-Lossless JPEG-LS Compression of RGB Data with pydicom\nDESCRIPTION: This snippet demonstrates lossy compression of unsigned pixel data with a maximum error of 2 pixel intensity units using the JPEGLSNearLossless transfer syntax.  It initializes a dataset with RGB color data, checks relevant parameters, compresses the pixel data using `ds.compress(JPEGLSNearLossless, jls_error=2)`, specifying the `jls_error` parameter. Requires the pydicom library.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/guides/encoding/jpeg_ls.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom pydicom import examples\nfrom pydicom.uid import JPEGLSNearLossless\n\nds = examples.rgb_color\nassert ds.SamplesPerPixel == 1\nassert ds.PhotometricInterpretation == 'RGB'\nassert ds.BitsAllocated == 8\nassert ds.BitsStored == 8\nassert ds.PixelRepresentation == 0\nassert len(ds.PixelData) == 921600\n\nds.compress(JPEGLSNearLossless, jls_error=2)\n\nprint(len(ds.PixelData))  # ~149188\n```\n\n----------------------------------------\n\nTITLE: Compressing with Third-Party Library and Encapsulating\nDESCRIPTION: Illustrates how to use a third-party library to compress pixel data and then encapsulate the compressed frames into a DICOM dataset.  It demonstrates both basic and extended encapsulation, and sets the transfer syntax appropriately. It assumes a third-party function `third_party_compression_func` exists.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/guides/user/image_data_compression.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import List, Tuple\n\nfrom pydicom import examples\nfrom pydicom.encaps import encapsulate, encapsulate_extended\nfrom pydicom.uid import JPEGBaseline8Bit\n\n# Fetch an example dataset\nds = examples.ct\n\n# Use third-party package to compress\n# Let's assume it compresses to JPEG Baseline (lossy)\nframes: List[bytes] = third_party_compression_func(...)\n\n# Set the *Transfer Syntax UID* appropriately\nds.file_meta.TransferSyntaxUID = JPEGBaseline8Bit\n\n# Basic encapsulation\nds.PixelData = encapsulate(frames)\n\n# Set the element's VR and use an undefined length\nds[\"PixelData\"].is_undefined_length = True\nds[\"PixelData\"].VR = \"OB\" if ds.BitsAllocated <= 8 else \"OW\"\n\n# Save!\nds.save_as(\"ct_compressed_basic.dcm\")\n\n# Extended encapsulation\nresult: Tuple[bytes, bytes, bytes] = encapsulate_extended(frames)\nds.PixelData = result[0]\nds.ExtendedOffsetTable = result[1]\nds.ExtendedOffsetTableLength = result[2]\nds.save_as(\"ct_compressed_ext.dcm\")\n```\n\n----------------------------------------\n\nTITLE: Accessing an example DICOM dataset\nDESCRIPTION: This snippet demonstrates how to access a pre-loaded example DICOM dataset within the `pydicom.examples` module. It imports the `examples` module and directly accesses the `ct` dataset. It then checks the type of `ds`.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/dataset_basics.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> from pydicom import examples\n>>> ds = examples.ct\n>>> type(ds)\n<class 'pydicom.dataset.FileDataset'>\n```\n\n----------------------------------------\n\nTITLE: Accessing Private Data Element Value via PrivateBlock\nDESCRIPTION: This snippet demonstrates accessing a private data element through a PrivateBlock instance. It shows how to create a PrivateBlock and then access the elements within it by their offset. It also reinforces the need to use the `.value` attribute to retrieve the actual data value.  Requires an existing pydicom Dataset.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/guides/user/private_data_elements.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> block = ds.private_block(0x0009, 'GEMS_IDEN_01')\n>>> block[0x01]\n(0009, 1001) [Full fidelity]                     LO: 'GE_GENESIS_FF'\n>>> block[0x01].value\n'GE_GENESIS_FF'\n```\n\n----------------------------------------\n\nTITLE: Lossless Compression of Greyscale Pixel Data with JPEG 2000 (Python)\nDESCRIPTION: Demonstrates lossless compression of signed greyscale pixel data in-place. This example loads a CT image, asserts its properties, and then applies the JPEG 2000 Lossless compression. This showcases how to handle single-sample greyscale DICOM images.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/guides/encoding/jpeg_2k.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom pydicom import examples\nfrom pydicom.uid import JPE2000Lossless\n\nds = examples.ct\nassert ds.SamplesPerPixel == 1\nassert ds.PhotometricInterpretation == 'MONOCHROME2'\nassert ds.BitsAllocated == 16\nassert ds.BitsStored == 16\nassert ds.PixelRepresentation == 1\nassert len(ds.PixelData) == 32768\n\nds.compress(JPE2000Lossless)\n\nprint(len(ds.PixelData))  # ~13656\n```\n\n----------------------------------------\n\nTITLE: Finding Instances by Query\nDESCRIPTION: This snippet shows how to find FileInstance objects that match a specified query (PatientID='77654033') using the find method, then loading and printing the PhotometricInterpretation of each matching instance.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/filesets.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> for instance in fs.find(PatientID='77654033'):\n...     ds = instance.load()\n...     print(ds.PhotometricInterpretation)\n...\nMONOCHROME1\nMONOCHROME1\nMONOCHROME1\nMONOCHROME2\nMONOCHROME2\nMONOCHROME2\nMONOCHROME2\n```\n\n----------------------------------------\n\nTITLE: Compressing with RLE Lossless using a specific encoding plugin\nDESCRIPTION: This code snippet shows how to explicitly specify the encoding plugin to be used when compressing a dataset with RLE Lossless. This is done by passing the `encoding_plugin` argument to the `compress()` method.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/pixel_data/compressing.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> ds.compress(RLELossless, encoding_plugin='pylibjpeg')\n```\n\n----------------------------------------\n\nTITLE: Compressing with JPEG 2000 Lossless\nDESCRIPTION: This code snippet demonstrates how to compress a DICOM dataset using JPEG 2000 Lossless compression.  It retrieves an example CT dataset and compresses it.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/pixel_data/compressing.rst#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n>>> from pydicom import examples\n>>> from pydicom.uid import JPEG2000Lossless\n>>> ds = examples.ct\n>>> ds.compress(JPEG2000Lossless)\n```\n\n----------------------------------------\n\nTITLE: Creating a New Multiplex Group - Python\nDESCRIPTION: This snippet creates a new DICOM dataset to represent a multiplex group and sets the *WaveformOriginality*, *NumberOfWaveformChannels*, *NumberOfWaveformSamples*, and *SamplingFrequency* elements.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/waveforms.rst#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n>>> from pydicom.dataset import Dataset\n>>> new = Dataset()\n>>> new.WaveformOriginality = \"ORIGINAL\"\n>>> new.NumberOfWaveformChannels = 2\n>>> new.NumberOfWaveformSamples = len(x)\n>>> new.SamplingFrequency = 1000.0\n```\n\n----------------------------------------\n\nTITLE: Accessing Image Pixel Elements - Python\nDESCRIPTION: This demonstrates how to access Image Pixel elements (like RescaleIntercept and RescaleSlope) when using `pixel_array` with a file path. It shows how to pass an empty Dataset instance via the `ds_out` argument to populate it with the relevant DICOM attributes, enabling further image processing operations like rescaling.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/pixel_data/introduction.rst#_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nfrom pydicom import Dataset, examples\nfrom pydicom.pixels import pixel_array, apply_rescale\n\n# Get the path to the 'examples.ct' dataset\npath = examples.get_path(\"ct\")\n\nds = Dataset()\narr = pixel_array(path, ds_out=ds)\n\nassert ds.RescaleIntercept == \"-1024.0\"\nassert ds.RescaleSlope == \"1.0\"\n\n# Convert raw CT values to Hounsfield units\nhu = apply_rescale(arr, ds)\n```\n\n----------------------------------------\n\nTITLE: Creating and compressing a new dataset with RLE Lossless\nDESCRIPTION: This code snippet creates a new DICOM dataset and compresses it using RLE Lossless.  It initializes the dataset with required attributes like Rows, Columns, and Pixel Representation, creates a NumPy array for pixel data, and then compresses the dataset. It asserts the Transfer Syntax UID and the type of PixelData.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/pixel_data/compressing.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nfrom pydicom import Dataset\nfrom pydicom.uid import RLELossless\n\nds = Dataset()\nds.Rows = 320\nds.Columns = 480\nds.BitsAllocated = 8\nds.BitsStored = 8\nds.HighBit = ds.BitsStored - 1\nds.PixelRepresentation = 0\nds.SamplesPerPixel = 1\nds.PhotometricInterpretation = \"MONOCHROME2\"\n\narr = np.ones((ds.Rows, ds.Columns), dtype=\"uint8\")\nds.compress(RLELossless, arr)\n\nassert ds.file_meta.TransferSyntaxUID == RLELossless\nassert isinstance(ds.PixelData, bytes)\n```\n\n----------------------------------------\n\nTITLE: Combining pydicom show with grep for filtering output\nDESCRIPTION: This example demonstrates how to combine the `pydicom show` command with `grep` to filter the output based on specified keywords. It shows lines containing either \"Dose\" or \"Sequence\" from the DICOM file's metadata.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/guides/cli/cli_intro.rst#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ pydicom show pydicom::rtplan.dcm | grep \"Dose\\|Sequence\"\n(300a, 0010)  Dose Reference Sequence  2 item(s) ----\n(300a, 0012) Dose Reference Number               IS: \"1\"\n(300a, 0014) Dose Reference Structure Type       CS: 'COORDINATES'\n(300a, 0016) Dose Reference Description          LO: 'iso'\n(300a, 0018) Dose Reference Point Coordinates    DS: [239.531250000000, 239.531250000000, -741.87000000000]\n(300a, 0020) Dose Reference Type                 CS: 'ORGAN_AT_RISK'\n(300a, 0023) Delivery Maximum Dose               DS: \"75.0\"\n(300a, 002c) Organ at Risk Maximum Dose          DS: \"75.0\"\n(300a, 0012) Dose Reference Number               IS: \"2\"\n(300a, 0014) Dose Reference Structure Type       CS: 'COORDINATES'\n(300a, 0016) Dose Reference Description          LO: 'PTV'\n(300a, 0018) Dose Reference Point Coordinates    DS: [239.531250000000, 239.531250000000, -751.87000000000]\n(300a, 0020) Dose Reference Type                 CS: 'TARGET'\n(300a, 0026) Target Prescription Dose            DS: \"30.826203\"\n(300a, 0070)  Fraction Group Sequence  1 item(s) ----\n(300c, 0004)  Referenced Beam Sequence  1 item(s) ----\n    (300a, 0082) Beam Dose Specification Point       DS: [239.531250000000, 239.531250000000, -751.87000000000]\n    (300a, 0084) Beam Dose                           DS: \"1.0275401\"\n(300a, 00b0)  Beam Sequence  1 item(s) ----\n(300a, 00b6)  Beam Limiting Device Sequence  2 item(s) ----\n(300a, 0111)  Control Point Sequence  2 item(s) ----\n    (300a, 0115) Dose Rate Set                       DS: \"650.0\"\n    (300a, 011a)  Beam Limiting Device Position Sequence  2 item(s) ----\n    (300c, 0050)  Referenced Dose Reference Sequence  2 item(s) ----\n        (300a, 010c) Cumulative Dose Reference Coefficie DS: \"0.0\"\n        (300c, 0051) Referenced Dose Reference Number    IS: \"1\"\n        (300a, 010c) Cumulative Dose Reference Coefficie DS: \"0.0\"\n        (300c, 0051) Referenced Dose Reference Number    IS: \"2\"\n    (300c, 0050)  Referenced Dose Reference Sequence  2 item(s) ----\n        (300a, 010c) Cumulative Dose Reference Coefficie DS: \"0.9990268\"\n        (300c, 0051) Referenced Dose Reference Number    IS: \"1\"\n        (300a, 010c) Cumulative Dose Reference Coefficie DS: \"1.0\"\n        (300c, 0051) Referenced Dose Reference Number    IS: \"2\"\n(300a, 0180)  Patient Setup Sequence  1 item(s) ----\n(300c, 0002)  Referenced RT Plan Sequence  1 item(s) ----\n(300c, 0060)  Referenced Structure Set Sequence  1 item(s) ----\n```\n\n----------------------------------------\n\nTITLE: Setting Private Data Elements with pydicom\nDESCRIPTION: This snippet demonstrates creating a private creator data element and adding a new private data element to it. It shows how to use the `private_block` method with `create=True` to create a new private block, and then how to use `add_new` to add a new data element to the block. Requires an existing pydicom Dataset.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/guides/user/private_data_elements.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> block = ds.private_block(0x000b, \"My company 001\", create=True)\n>>> block.add_new(0x01, \"SH\", \"my value\")\n>>> ds\n...\n(000b, 0010) Private Creator                     LO: 'My company 001'\n(000b, 1001) Private tag data                    SH: 'my value'\n...\n```\n\n----------------------------------------\n\nTITLE: Saving DICOM Dataset with Buffered PixelData using pydicom\nDESCRIPTION: This code demonstrates how to create a DICOM dataset and assign a file-like object (specifically, a BufferedReader instance opened in binary read mode) to the PixelData element. This avoids loading the entire pixel data into memory at once, making it suitable for large datasets. The dataset is then saved to a DICOM file.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/guides/element_value_types.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pydicom import Dataset, FileMetaDataset\nfrom pydicom.uid import ExplicitVRLittleEndian\n\nwith open(\"a_large_amount_of_data\", \"rb\") as f:\n    ds = Dataset()\n    ds.file_meta = FileMetaDataset()\n    ds.file_meta.TransferSyntaxUID = ExplicitVRLittleEndian\n    ds.PixelData = f\n    ds.save_as(\"large_dataset.dcm\")\n```\n\n----------------------------------------\n\nTITLE: Extracting Waveform Data as NumPy Array using waveform_array()\nDESCRIPTION: This snippet demonstrates how to extract waveform data from a pydicom dataset as a NumPy array using the `waveform_array()` method.  The method returns an ndarray with shape (samples, channels) for a given multiplex. NumPy is a prerequisite for this function.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/guides/user/working_with_waveforms.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nmultiplex_1 = ds.waveform_array(0)\n>>> multiplex_1\narray([[ 100.  ,  112.5 ,   12.5 , ...,  -25.  ,  -68.75,  -50.  ],\n       [  81.25,  106.25,   25.  , ...,  -25.  ,  -75.  ,  -50.  ],\n       [  62.5 ,  100.  ,   37.5 , ...,  -25.  ,  -81.25,  -50.  ],\n       ...,\n       [  25.  ,  131.25,  106.25, ..., -137.5 , -150.  , -100.  ],\n       [  21.25,  137.5 ,  116.25, ..., -137.5 , -150.  , -106.25],\n       [  25.  ,  137.5 ,  112.5 , ..., -137.5 , -150.  , -112.5 ]])\n>>> multiplex_1.shape\n(10000, 12)\n>>> multiplex_2 = ds.waveform_array(1)\n>>> multiplex_2.shape\n(1200, 12)\n```\n\n----------------------------------------\n\nTITLE: Finding CID number by name in pydicom\nDESCRIPTION: This snippet shows how to find the CID number using the cid_for_name dictionary. It filters the dictionary to find names containing 'Observ' and then retrieves the CID number for 'ObserverType'.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/sr_basics.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> from pydicom.sr.codedict import cid_for_name\n>>> [name for name in cid_for_name if 'Observ' in name]\n['ObservationSubjectClass', 'ObserverType', 'EchoFindingObservationTypes']\n>>> cid_for_name['ObserverType']\n270\n```\n\n----------------------------------------\n\nTITLE: Finding Values in File-set (DICOMDIR Records)\nDESCRIPTION: This snippet demonstrates how to find unique values for a specific element (PatientID) within the DICOMDIR records of the File-set using the find_values method.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/filesets.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> fs.find_values(\"PatientID\")\n['77654033', '98890234']\n```\n\n----------------------------------------\n\nTITLE: Iterating through File-set Instances\nDESCRIPTION: This snippet demonstrates iterating over a File-set to access FileInstance objects, and extracting the PatientName attribute from each instance.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/filesets.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> for instance in fs:\n...     print(instance.PatientName)\n...     break\n...\n```\n\n----------------------------------------\n\nTITLE: Writing Existing FileSet in pydicom\nDESCRIPTION: Demonstrates writing an existing FileSet to disk.  For existing FileSets, the root directory is already known so no path needs to be provided to the `write()` method.  The example removes instances and then writes the changes.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/filesets.rst#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n>>> instances = fs.find(PatientID=\"1CT1\")\n>>> fs.remove(instances)\n>>> fs.write()\n>>> for path in sorted([p for p in root.glob('**/*') if p.is_file()]):\n...     print(path)\n...\n/tmp/tmpsqz8rhgb/DICOMDIR\n/tmp/tmpsqz8rhgb/PT000000/ST000000/SE000000/RD000000\n/tmp/tmpsqz8rhgb/PT000001/ST000000/SE000000/IM000000\n```\n\n----------------------------------------\n\nTITLE: Create DICOM dataset from JSON string and dictionary - pydicom\nDESCRIPTION: Shows how to create a DICOM dataset from a JSON string or a JSON dictionary using `Dataset.from_json()`. The function handles both string and dictionary inputs. It demonstrates the symmetric nature of the conversion between dataset and JSON.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/dicom_json.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> from pydicom.dataset import Dataset\n>>> Dataset.from_json('{\"00080005\": {\"Value\": [\"ISO_IR 100\"], \"vr\": \"CS\"}}')\n(0008, 0005) Specific Character Set              CS: u'ISO_IR 100'\n>>> Dataset.from_json({\"00080005\": {\"Value\": [\"ISO_IR 100\"], \"vr\": \"CS\"}})\n(0008, 0005) Specific Character Set              CS: u'ISO_IR 100'\n```\n\n----------------------------------------\n\nTITLE: Setting element values to empty in pydicom\nDESCRIPTION: This snippet demonstrates how to set element values to empty (None) in a DICOM dataset, and how it affects sequence length.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/dataset_basics.rst#_snippet_22\n\nLANGUAGE: python\nCODE:\n```\n>>> ds.PatientName = None\n>>> elem\n(0010, 0010) Patient's Name                      PN: None\n>>> ds.OtherPatientIDsSequence = None\n>>> len(ds.OtherPatientIDsSequence)\n0\n```\n\n----------------------------------------\n\nTITLE: Symmetric JSON conversion example - pydicom\nDESCRIPTION: Demonstrates the symmetric conversion between a DICOM dataset and its JSON representation using `to_json()` and `from_json()`. It converts a dataset to JSON, then back to a dataset, and asserts that the original and converted datasets are equal.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/dicom_json.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> import pydicom\n>>> ds = pydicom.examples.ct\n>>> ds_json = ds.to_json()\n>>> ds1 = pydicom.dataset.Dataset.from_json(ds_json)\n>>> assert ds == ds1\n```\n\n----------------------------------------\n\nTITLE: Writing FileSet to Disk in pydicom\nDESCRIPTION: Demonstrates how to write changes made to a FileSet to disk using the `write()` method.  For new FileSets, you must supply a root directory path.  The example demonstrates creating a temporary directory to store the FileSet.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/filesets.rst#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n>>> from pathlib import Path\n>>> from tempfile import TemporaryDirectory\n>>> t = TemporaryDirectory()\n>>> t.name\n'/tmp/tmpsqz8rhgb'\n>>> fs.write(t.name)\n>>> fs.is_staged\nFalse\n>>> root = Path(t.name)\n>>> for path in sorted([p for p in root.glob('**/*') if p.is_file()]):\n...     print(path)\n...\n/tmp/tmpsqz8rhgb/DICOMDIR\n/tmp/tmpsqz8rhgb/PT000000/ST000000/SE000000/RD000000\n/tmp/tmpsqz8rhgb/PT000001/ST000000/SE000000/IM000000\n/tmp/tmpsqz8rhgb/PT000002/ST000000/SE000000/IM000000\n```\n\n----------------------------------------\n\nTITLE: Reading Waveform Data and Plotting - Python\nDESCRIPTION: This snippet reads the DICOM file containing the encoded waveform data, extracts the waveform data for the new multiplex group (index 2), and plots the data using matplotlib.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/waveforms.rst#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n>>> from pydicom import dcmread\n>>> ds = dcmread(\"my_waveform.dcm\")\n>>> arr = ds.waveform_array(2)\n>>> fig, (ax1, ax2) = plt.subplots(2)\n>>> ax1.plot(arr[:, 0])\n>>> ax2.plot(arr[:, 1])\n>>> plt.show()\n```\n\n----------------------------------------\n\nTITLE: Adding Decoder Plugins to Decoders in Python\nDESCRIPTION: This code snippet demonstrates how to add a custom decoder plugin to an existing decoder in pydicom using the `add_plugin` method.  It requires specifying a unique plugin label and the import path to the decoder function's module and the decoder function name.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/guides/decoding/decoder_plugins.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom pydicom.pixels.decoders import RLELosslessDecoder\n\nRLELosslessDecoder.add_plugin(\n  'my_decoder',  # the plugin's label\n  ('my_package.decoders', 'my_decoder_func')  # the import paths\n)\n```\n\n----------------------------------------\n\nTITLE: Deleting Standard Element by Keyword\nDESCRIPTION: This snippet demonstrates how to delete a standard DICOM element using its keyword with the `del` operator.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/dataset_basics.rst#_snippet_28\n\nLANGUAGE: python\nCODE:\n```\n>>> del ds.WindowCenter\n>>> 'WindowCenter' in ds\nFalse\n```\n\n----------------------------------------\n\nTITLE: Displaying help for a specific pydicom subcommand\nDESCRIPTION: This command displays help information for the `show` subcommand of the `pydicom` CLI.  It provides usage instructions, positional arguments, and optional arguments for the specified subcommand.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/guides/cli/cli_intro.rst#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ pydicom help show\nusage: pydicom show [-h] [-x] [-t] [-q] filespec\n\nDisplay all or part of a DICOM file\n\npositional arguments:\nfilespec           File specification, in format [pydicom::]filename[::element]. If `pydicom::` prefix is present,\n                        then use the pydicom test file with that name. If `element` is given, use only that data element\n                        within the file. Examples: path/to/your_file.dcm, your_file.dcm::StudyDate,\n                        your_file.dcm::(0001,0001), pydicom::rtplan.dcm::BeamSequence[0],\n                        yourplan.dcm::BeamSequence[0].BeamNumber, pydicom::rtplan.dcm::(300A,00B0)[0].(300A,00B6)\n\n\noptional arguments:\n-h, --help            show this help message and exit\n-x, --exclude-private\n                            Don't show private data elements\n-t, --top             Only show top level\n-q, --quiet           Only show basic information\n```\n\n----------------------------------------\n\nTITLE: Accessing Multi-valued DataElement\nDESCRIPTION: This snippet demonstrates how to access a multi-valued `DataElement` such as ImageType. The code accesses the `ImageType` which has VM>1, and demonstrates how you can see the value multiplicity using `ds['ImageType'].VM`.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/dataset_basics.rst#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n>>> ds.ImageType\n['ORIGINAL', 'PRIMARY', 'AXIAL']\n>>> ds['ImageType'].VM\n3\n```\n\n----------------------------------------\n\nTITLE: Saving DICOM Dataset to file\nDESCRIPTION: This snippet shows how to save a modified DICOM dataset to a file using the `save_as` method.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/dataset_basics.rst#_snippet_30\n\nLANGUAGE: python\nCODE:\n```\n>>> ds.save_as('out.dcm')\n```\n\n----------------------------------------\n\nTITLE: Reading DICOM dataset using dcmread in pydicom\nDESCRIPTION: This snippet demonstrates how to read a DICOM dataset from a file using the `dcmread` function in the `pydicom` library.  It retrieves the path to an example DICOM file, reads the file, and assigns the resulting Dataset object to the variable `ds`. The dataset can then be printed to display its contents.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/guides/user/base_element.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from pydicom import dcmread, examples\n>>> # Returns the path to pydicom's examples.rt_plan dataset\n>>> path = examples.get_path(\"rt_plan\")\n>>> print(path)\nPosixPath('/path/to/pydicom/data/test_files/rtplan.dcm')\n>>> # Read the DICOM dataset at `path`\n>>> ds = dcmread(path)\n```\n\n----------------------------------------\n\nTITLE: Creating Waveform Data using Numpy - Python\nDESCRIPTION: This snippet creates two NumPy arrays representing cosine and sine waveforms. These arrays will be used to populate the *WaveformData* of a new multiplex group. The data type is explicitly set to signed 16-bit integers.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/waveforms.rst#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n>>> import numpy as np\n>>> x = np.arange(0, 4 * np.pi, 0.1)\n>>> ch1 = (np.cos(x) * (2**15 - 1)).astype('int16')\n>>> ch2 = (np.sin(x) * (2**15 - 1)).astype('int16')\n```\n\n----------------------------------------\n\nTITLE: Accessing codes with numerical prefixes in pydicom\nDESCRIPTION: This snippet shows how to access DICOM codes that have keywords starting with a number.  These keywords are prefixed with an underscore to be valid Python identifiers.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/sr_basics.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> codes.SCT._1SigmaLowerValueOfPopulation\nCode(value='371919006', scheme_designator='SCT', meaning='1 Sigma Lower Value of population', scheme_version=None)\n```\n\n----------------------------------------\n\nTITLE: Enabling MCT for JPEG 2000 Lossless Compression in pydicom\nDESCRIPTION: This example demonstrates how to enable or disable MCT (Multi-Component Transformation) during JPEG 2000 lossless compression by setting the Photometric Interpretation.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/pixel_data/compressing.rst#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n>>> from pydicom import examples\n>>> from pydicom.uid import JPEG2000Lossless\n>>> ds = examples.rgb_color\n>>> ds.PhotometricInterpretation\n\"RGB\"\n>>> ds.compress(JPEG2000Lossless)  # No MCT applied\n>>> len(ds.PixelData)\n334412\n>>> ds = examples.rgb_color\n>>> ds.PhotometricInterpretation = \"YBR_RCT\"\n>>> ds.compress(JPEG2000Lossless)  # MCT applied\n>>> len(ds.PixelData)\n152342\n```\n\n----------------------------------------\n\nTITLE: Install pydicom and dependencies using conda\nDESCRIPTION: These commands use conda to install numpy, matplotlib, and pydicom from the conda-forge channel. It installs pydicom version 2.1 or later.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/waveforms.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nconda install numpy matplotlib\n```\n\nLANGUAGE: bash\nCODE:\n```\nconda install -c conda-forge pydicom>=2.1\n```\n\n----------------------------------------\n\nTITLE: Compressing with RLE Lossless - Shape Mismatch Error Handling\nDESCRIPTION: This code snippet demonstrates an error scenario where the provided NumPy array's shape does not match the dimensions specified in the DICOM dataset (Rows and Columns). It retrieves an example CT dataset, creates an array with mismatched dimensions, and attempts to compress the dataset. This results in a ValueError.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/pixel_data/compressing.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> from pydicom import examples\n>>> from pydicom.uid import RLELossless\n>>> ds = examples.ct\n>>> arr = np.zeros((ds.Rows, ds.Columns + 1), dtype='<i2')\n>>> ds.compress(RLELossless, arr)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \".../pydicom/src/pydicom/dataset.py\", line 1957, in compress\n    encoded = [f for f in frame_iterator]\n              ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \".../pydicom/pixels/encoders/base.py\", line 678, in iter_encode\n    runner.validate()\n  File \".../pydicom/pixels/encoders/base.py\", line 304, in validate\n    self._validate_array()\n  File \".../pydicom/pixels/encoders/base.py\", line 333, in _validate_array\n    raise ValueError(\nValueError: Mismatch between the expected ndarray shape (128, 128) and the actual shape (128, 129)\n```\n\n----------------------------------------\n\nTITLE: Handle large binary data with BulkDataURI on reading - pydicom\nDESCRIPTION: Shows how to handle large binary data when creating a DICOM dataset from JSON using a `bulk_data_uri_handler`. The handler is responsible for retrieving the data using the `BulkDataURI` stored in the JSON. Two variations of the handler are shown: one that receives only the URI and another that receives the tag and VR as well.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/dicom_json.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> def bulk_data_reader(bulk_data_uri):\n>>>     return data_retrieved_via_uri(bulk_data_uri)\n>>>\n>>> json_data = {\n>>>     \"00091002\": {\"vr\": \"OB\", \"BulkDataURI\": \"https://my.wado.org/123\"}\n>>> }\n>>> ds = Dataset.from_json(json_data, bulk_data_uri_handler=bulk_data_reader)\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> def bulk_data_reader(tag, vr, bulk_data_uri):\n>>>     return data_retrieved_for_tag_and_vr_via_uri(tag, vr, bulk_data_uri)\n>>>\n>>> json_data = {\n>>>     \"00091002\": {\"vr\": \"OB\", \"BulkDataURI\": \"https://my.wado.org/123\"}\n>>> }\n>>> ds = Dataset.from_json(json_data, bulk_data_uri_handler=bulk_data_reader)\n```\n\n----------------------------------------\n\nTITLE: Accessing Waveform Sequence in DICOM Dataset - Python\nDESCRIPTION: This snippet demonstrates how to access the *WaveformSequence* from a DICOM dataset using pydicom. It loads a sample waveform dataset, accesses the sequence, and prints the length of the sequence.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/waveforms.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> from pydicom import examples\n>>> ds = examples.waveform\n>>> ds.SOPClassUID.name\n'12-lead ECG Waveform Storage'\n>>> waveforms = ds.WaveformSequence\n>>> len(waveforms)\n2\n```\n\n----------------------------------------\n\nTITLE: Decompressing and Converting Color Space with pydicom\nDESCRIPTION: This example shows how to decompress a DICOM dataset and convert the color space from YCbCr to RGB. It demonstrates how to disable the color space conversion and compare the pixel data.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/pixel_data/compressing.rst#_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\n\nfrom pydicom import examples\nfrom pydicom.pixels import convert_color_space, pixel_array\nfrom pydicom.uid import JPEG2000Lossless\n\n# Original dataset in RGB\nds = examples.rgb_color\nassert ds.PhotometricInterpretation == \"RGB\"\n\n# Convert to YCbCr and compress\nybr = convert_color_space(ds.pixel_array, \"RGB\", \"YBR_FULL\")\nds.PhotometricInterpretation = \"YBR_FULL\"\nds.compress(JPEG2000Lossless, ybr)\nassert ds.PhotometricInterpretation == \"YBR_FULL\"\n\n# RGB reference - needed because converting RGB -> YBR -> RGB is lossy\nrgb = convert_color_space(ybr, \"YBR_FULL\", \"RGB\")\n\n# Decompress with conversion to RGB\nds.decompress()\nassert ds.PhotometricInterpretation == \"RGB\"\nassert np.array_equal(rgb, pixel_array(ds, raw=True))\n\n# Decompress without conversion to RGB\nds.PhotometricInterpretation = \"YBR_FULL\"\nds.compress(JPEG2000Lossless, ybr)\n\nds.decompress(as_rgb=False)\nassert ds.PhotometricInterpretation == \"YBR_FULL\"\nassert np.array_equal(ybr, pixel_array(ds, raw=True))\n```\n\n----------------------------------------\n\nTITLE: Removing SOP Instances from FileSet in pydicom\nDESCRIPTION: Demonstrates how to remove SOP instances from a FileSet using the `remove()` method. It takes a FileInstance or a list of FileInstances as input.  The example shows how to find instances using `find()` method and then remove them.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/filesets.rst#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n>>> len(fs)\n2\n>>> instances = fs.find(PatientID=\"1CT1\")\n>>> len(instances)\n1\n>>> fs.remove(instances)\n>>> len(fs)\n1\n```\n\n----------------------------------------\n\nTITLE: Removing All Private Data Elements\nDESCRIPTION: This snippet demonstrates how to use the `remove_private_tags` method to recursively remove all private data elements from a pydicom Dataset. This is useful for anonymizing DICOM files. Requires an existing pydicom Dataset.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/guides/user/private_data_elements.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> ds.remove_private_tags()\n```\n\n----------------------------------------\n\nTITLE: Lossless Compression with Multiple-Component Transformation (Python)\nDESCRIPTION: This example shows lossless compression of RGB pixel data in-place with multiple-component transformation using JPEG 2000 Lossless. It sets the `PhotometricInterpretation` to `YBR_RCT` before compression. Changing the `PhotometricInterpretation` triggers the encoder to apply multiple-component transformation (MCT) to the pixel data, potentially achieving a higher compression ratio.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/guides/encoding/jpeg_2k.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom pydicom import examples\nfrom pydicom.uid import JPE2000Lossless\n\nds = examples.rgb_color\nassert ds.SamplesPerPixel == 1\nassert ds.PhotometricInterpretation == \"RGB\"\nassert ds.BitsAllocated == 8\nassert ds.BitsStored == 8\nassert ds.PixelRepresentation == 0\nassert len(ds.PixelData) == 921600\n\n# YBR_ICT is not valid with *JPEG 2000 Lossless*\nds.PhotometricInterpretation = \"YBR_RCT\"\nds.compress(JPE2000Lossless)\n\nprint(len(ds.PixelData))  # ~152342\n```\n\n----------------------------------------\n\nTITLE: Accessing ImageType list element in pydicom\nDESCRIPTION: This snippet demonstrates how to access an element within a multi-valued element (list) in a DICOM dataset using its index.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/dataset_basics.rst#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n>>> ds.ImageType[1]\n'PRIMARY'\n```\n\n----------------------------------------\n\nTITLE: Decoding Pixel Data with Specific Plugin - Python\nDESCRIPTION: This snippet demonstrates how to use the `decoding_plugin` argument to specify which decompression plugin should be used when accessing pixel data. This allows you to ensure consistency, especially with lossy compression methods. It also shows the exception raised when the specified plugin isn't available.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/pixel_data/introduction.rst#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom pydicom import examples\nfrom pydicom.pixels import pixel_array\n\nds = examples.jpeg2k\n\n# Return the results from the 'pylibjpeg' decoding plugin\narr = pixel_array(ds, decoding_plugin=\"pylibjpeg\")\n```\n\n----------------------------------------\n\nTITLE: Decoder Dependencies Declaration in Python\nDESCRIPTION: This dictionary declares the dependencies required by the decoder plugin for each Transfer Syntax UID it supports. The keys are Transfer Syntax UIDs, and the values are tuples of dependency names.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/guides/decoding/decoder_plugins.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom pydicom.uid import RLELossless, JPEG2000\n\nDECODER_DEPENDENCIES = {\n  RLELossless: ('numpy', 'pillow', 'imagecodecs'),\n  JPEG2000: ('numpy', 'gdcm'),\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Multiplex Group Information - Python\nDESCRIPTION: This snippet demonstrates how to access information about a multiplex group within the *WaveformSequence*.  It retrieves the *MultiplexGroupLabel*, *SamplingFrequency*, and *NumberOfWaveformChannels* from the first multiplex group.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/waveforms.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> multiplex = waveforms[0]\n>>> multiplex.MultiplexGroupLabel\n'RHYTHM'\n>>> multiplex.SamplingFrequency  # in Hz\n\"1000.0\"\n>>> multiplex.NumberOfWaveformChannels\n12\n>>> multiplex.NumberOfWaveformSamples\n10000\n```\n\n----------------------------------------\n\nTITLE: Drawing a Circle with NumPy\nDESCRIPTION: This Python code defines a function `draw_circle` that creates a NumPy array containing a circle.  It takes the shape (rows, columns) of the array, the data type (dtype) for the array elements, and a value to fill the circle with. The function returns a NumPy array of the specified shape and dtype, with a circle drawn at the center.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/pixel_data/creation.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\n\ndef draw_circle(shape: tuple[int, int], dtype: str, value: int) -> np.ndarray:\n    \"\"\"Return an ndarray containing a circle.\"\"\"\n    (rows, columns), radius = shape, min(shape) // 2\n\n    x0, y0 = columns // 2, rows // 2\n    x = np.linspace(0, columns, columns)\n    y = np.linspace(0, rows, rows)[:, None]\n\n    # Create a boolean array where values inside the radius are True\n    arr = (x - x0)**2 + (y - y0)**2 <= radius**2\n\n    # Convert to the required `dtype` and set the maximum `value`\n    return arr.astype(dtype) * value\n```\n\n----------------------------------------\n\nTITLE: Unpacking Overlay Data to NumPy Array with pydicom\nDESCRIPTION: This code demonstrates unpacking raw overlay data into a NumPy array using the `overlay_array` method in pydicom. It returns a NumPy ndarray representing the overlay.  Requires NumPy to be installed and the pydicom library.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/guides/user/working_with_overlays.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> arr = ds.overlay_array(0x6000) # doctest: +NORMALIZE_WHITESPACE\n>>> arr\narray([[ 0, 0, 0, ...,  0,  0,  0],\n       [ 0, 0, 0, ...,  0,  0,  0],\n       [ 0, 0, 0, ...,  0,  0,  0],\n       ...,\n       [ 0, 0, 0, ...,  0,  0,  0],\n       [ 0, 0, 0, ...,  0,  0,  0],\n       [ 0, 0, 0, ...,  0,  0,  0],], dtype=uint8)\n>>> arr.shape\n(484, 484)\n```\n\n----------------------------------------\n\nTITLE: Accessing DataElement object by keyword or tag in pydicom\nDESCRIPTION: This example demonstrates how to access the `DataElement` object itself, rather than just its value, using the DICOM keyword or tag. It retrieves the `DataElement` associated with 'PatientName' and then accesses its Value Representation (VR) and value. This provides access to the metadata associated with the DICOM element.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/guides/user/base_element.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> # reload the data\n>>> ds = pydicom.dcmread(path)\n>>> elem = ds['PatientName']\n>>> elem.VR, elem.value\n('PN', 'Last^First^mid^pre')\n>>> # an alternative is to use:\n>>> elem = ds[0x0010,0x0010]\n>>> elem.VR, elem.value\n('PN', 'Last^First^mid^pre')\n```\n\n----------------------------------------\n\nTITLE: Saving Compressed DICOM Dataset with Buffered PixelData using pydicom\nDESCRIPTION: This code demonstrates how to create a DICOM dataset with compressed pixel data (JPEG 2000 Lossless) and assign a file-like object to the PixelData element. The encapsulate_buffer function is used to encapsulate the buffered data before assigning it to the PixelData element.  The Dataset is created with the JPEG2000Lossless transfer syntax.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/guides/element_value_types.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom pydicom import Dataset, FileMetaDataset\nfrom pydicom.encaps import encapsulate_buffer\nfrom pydicom.uid import JPEG2000Lossless\n\nwith open(\"a_large_jpeg2000_file.j2k\", \"rb\") as f:\n    ds = Dataset()\n    ds.file_meta = FileMetaDataset()\n    ds.file_meta.TransferSyntaxUID = JPEG2000Lossless\n    ds.PixelData = encapsulate_buffer([f])\n    ds.save_as(\"large_compressed_dataset.dcm\")\n```\n\n----------------------------------------\n\nTITLE: Registering a Subcommand with add_subparser (Python)\nDESCRIPTION: This code snippet illustrates how to define the add_subparser function, which is responsible for registering a subcommand with the argparse parser. It adds arguments to the subparser, including the filespec argument which handles DICOM files.  It also sets the default function (do_command) to be called when the subcommand is executed.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/guides/cli/cli_dev.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom pydicom.cli.main import filespec_help, filespec_parser\n\ndef add_subparser(subparsers):\n    # Register the sub-parser\n    subparser = subparsers.add_parser(\n        \"subcommandname\",\n        description=\"Summary of your subcommand\"\n    )\n\n    subparser.add_argument(\n        \"filespec\",\n        help=filespec_help,\n        type=filespec_parser\n    )\n    subparser.add_argument(\n    ...\n    )\n\n    subparser.set_defaults(func=do_command)\n```\n\n----------------------------------------\n\nTITLE: Codify with Output File and Save-As Filename\nDESCRIPTION: This demonstrates using the `-s` option to specify a save-as filename, and an output file.  The Python code generated will contain `ds.save_as(\"savename.dcm\", ...)` at the end.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/guides/cli/cli_codify.rst#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npydicom codify -s savename.dcm dicomfile.dcm pythoncode.py\n```\n\n----------------------------------------\n\nTITLE: Accessing DICOM codes by CID in pydicom\nDESCRIPTION: This snippet shows how to access DICOM codes using the CID (Context ID) within the pydicom.sr.codedict.codes instance. It also demonstrates how to list available codes for a given CID using the dir() method.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/sr_basics.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> codes.cid270.Person\nCode(value='121006', scheme_designator='DCM', meaning='Person', scheme_version=None)\n>>> codes.cid270.dir()\n['Device', 'Person']\n```\n\n----------------------------------------\n\nTITLE: Creating a DICOM Code instance in pydicom\nDESCRIPTION: This snippet demonstrates how to create a Code instance using the codes class and a known code name. The Code instance contains information about the code, such as its value, scheme designator, meaning, and scheme version.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/sr_basics.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> codes.DCM.ModalityToRead\nCode(value='128002', scheme_designator='DCM', meaning='Modality to Read', scheme_version=None)\n```\n\n----------------------------------------\n\nTITLE: Install pylibjpeg using pip\nDESCRIPTION: Install pylibjpeg and all available plugins using pip. pylibjpeg is a Python framework for decompressing JPEG, JPEG-LS, JPEG 2000 images.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/installation.rst#_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\npip install -U pylibjpeg[all]\n```\n\n----------------------------------------\n\nTITLE: Minimizing Memory Usage with iter_pixels - Python\nDESCRIPTION: This example shows how to iterate through pixel data frames using `iter_pixels` while minimizing memory usage by providing the path to the DICOM dataset.  It utilizes matplotlib to display each frame as it's iterated over, with a short pause for visualization.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/pixel_data/introduction.rst#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom pydicom import examples\nfrom pydicom.pixels import iter_pixels\n\n# Get the path to the 'examples.ybr_color' dataset\npath = examples.get_path(\"ybr_color\")\n\n# Create an empty ndarray and use it to initialize the display\nim = plt.imshow(np.zeros((ds.Rows, ds.Columns), dtype=\"u1\"))\n\n# Iterate through the frames and update the display\nfor frame in iter_pixels(path):\n    im.set_data(frame)\n    plt.pause(0.033)\n```\n\n----------------------------------------\n\nTITLE: Reading DICOM dataset from file-like object\nDESCRIPTION: This snippet illustrates how to read a DICOM dataset from a file-like object using `dcmread`. It opens the DICOM file in binary read mode ('rb') and passes the file object to `dcmread`. This is useful when the DICOM data is not directly available as a file path but as a stream of bytes.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/dataset_basics.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> with open(path, 'rb') as infile:\n...     ds = dcmread(infile)\n```\n\n----------------------------------------\n\nTITLE: Printing File-set Overview\nDESCRIPTION: This snippet shows how to print an overview of a loaded File-set, providing information about its contents and managed instances, including patient and study details.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/filesets.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> print(fs)\nDICOM File-set\n  Root directory: /home/user/env/lib/python3.7/site-packages/pydicom/data/test_files/dicomdirtests\n  File-set ID: PYDICOM_TEST\n  File-set UID: 1.2.276.0.7230010.3.1.4.0.31906.1359940846.78187\n  Descriptor file ID: (no value available)\n  Descriptor file character set: (no value available)\n  Changes staged for write(): DICOMDIR update, directory structure update\n\n  Managed instances:\n    PATIENT: PatientID='77654033', PatientName='Doe^Archibald'\n      STUDY: StudyDate=20010101, StudyTime=000000, StudyDescription='XR C Spine Comp Min 4 Views'\n        SERIES: Modality=CR, SeriesNumber=1\n          IMAGE: 1 SOP Instance\n        SERIES: Modality=CR, SeriesNumber=2\n          IMAGE: 1 SOP Instance\n        SERIES: Modality=CR, SeriesNumber=3\n          IMAGE: 1 SOP Instance\n      STUDY: StudyDate=19950903, StudyTime=173032, StudyDescription='CT, HEAD/BRAIN WO CONTRAST'\n        SERIES: Modality=CT, SeriesNumber=2\n          IMAGE: 4 SOP Instances\n    PATIENT: PatientID='98890234', PatientName='Doe^Peter'\n      STUDY: StudyDate=20010101, StudyTime=000000\n        SERIES: Modality=CT, SeriesNumber=4\n          IMAGE: 2 SOP Instances\n        SERIES: Modality=CT, SeriesNumber=5\n          IMAGE: 5 SOP Instances\n      STUDY: StudyDate=20030505, StudyTime=050743, StudyDescription='Carotids'\n        SERIES: Modality=MR, SeriesNumber=1\n          IMAGE: 1 SOP Instance\n        SERIES: Modality=MR, SeriesNumber=2\n          IMAGE: 1 SOP Instance\n      STUDY: StudyDate=20030505, StudyTime=025109, StudyDescription='Brain'\n        SERIES: Modality=MR, SeriesNumber=1\n          IMAGE: 1 SOP Instance\n        SERIES: Modality=MR, SeriesNumber=2\n          IMAGE: 3 SOP Instances\n      STUDY: StudyDate=20030505, StudyTime=045357, StudyDescription='Brain-MRA'\n        SERIES: Modality=MR, SeriesNumber=1\n          IMAGE: 1 SOP Instance\n        SERIES: Modality=MR, SeriesNumber=2\n          IMAGE: 3 SOP Instances\n        SERIES: Modality=MR, SeriesNumber=700\n          IMAGE: 7 SOP Instances\n```\n\n----------------------------------------\n\nTITLE: Lossless Compression of RGB Pixel Data with JPEG 2000 (Python)\nDESCRIPTION: This example demonstrates how to losslessly compress unsigned RGB pixel data in-place using the JPEG 2000 Lossless compression algorithm in pydicom, without multiple-component transformation. It uses the `pydicom.examples` module to load sample data, asserts the initial pixel data parameters, then compresses the data using `ds.compress(JPE2000Lossless)`. The resulting compressed data size is then printed.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/guides/encoding/jpeg_2k.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pydicom import examples\nfrom pydicom.uid import JPE2000Lossless\n\nds = examples.rgb_color\nassert ds.SamplesPerPixel == 1\nassert ds.PhotometricInterpretation == \"RGB\"\nassert ds.BitsAllocated == 8\nassert ds.BitsStored == 8\nassert ds.PixelRepresentation == 0\nassert len(ds.PixelData) == 921600\n\nds.compress(JPE2000Lossless)\n\nprint(len(ds.PixelData))  # ~334412\n```\n\n----------------------------------------\n\nTITLE: Generating Multiplex Arrays - Python\nDESCRIPTION: This snippet uses the `generate_multiplex` function to iterate through the *WaveformSequence* and yield a NumPy array for each multiplex group. It prints the shape of each array, providing information about the number of samples and channels.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/waveforms.rst#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n>>> from pydicom.waveforms import generate_multiplex\n>>> for arr in generate_multiplex(ds, as_raw=False):\n...     print(arr.shape)\n...\n(10000, 12)\n(1200, 12)\n```\n\n----------------------------------------\n\nTITLE: Install NumPy using conda\nDESCRIPTION: Install NumPy using conda. NumPy is required for manipulating pixel data.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/installation.rst#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nconda install numpy\n```\n\n----------------------------------------\n\nTITLE: Adding a Private Tag without Creating a Private Block\nDESCRIPTION: This snippet shows a convenience method, `add_new_private`, to add a private tag without explicitly creating a private block first.  It adds a private tag to the Dataset using the specified private creator, group ID, tag offset, value, and VR. Requires an existing pydicom Dataset.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/guides/user/private_data_elements.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> block = ds.add_new_private(\"My company 001\", 0x000B, 0x01, \"my value\", VR.SH)\n>>> ds\n...\n(000b, 0010) Private Creator                     LO: 'My company 001'\n(000b, 1001) Private tag data                    SH: 'my value'\n...\n```\n\n----------------------------------------\n\nTITLE: Adding SOP Instance to FileSet in pydicom\nDESCRIPTION: Demonstrates how to add a SOP instance to a FileSet using the `add()` method.  This method takes the path to a DICOM file or a pydicom Dataset object.  The added instance is initially staged and written to a temporary directory until the `write()` method is called.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/filesets.rst#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n>>> instance = fs.add(examples.ct)\n>>> instance.is_staged\nTrue\n>>> instance.for_addition\nTrue\n>>> instance.path\n'/tmp/tmp0aalrzir/86e6b75b-b764-46af-bec3-51698a8366f2'\n>>> type(instance.load())\n<class 'pydicom.dataset.FileDataset'>\n```\n\n----------------------------------------\n\nTITLE: Mypy example with types-pydicom\nDESCRIPTION: Example usage of mypy with and without types-pydicom installed to demonstrate type hinting.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/installation.rst#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ mypy foo.py\nSuccess: no issues found in 1 source file\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ mypy foo.py\nfoo.py:5: error: Incompatible types in assignment (expression has type \"int\", variable has type \"str | PersonName | None\")  [assignment]\nFound 1 error in 1 file (checked 1 source file)\n```\n\n----------------------------------------\n\nTITLE: Accessing Transfer Syntax UID in pydicom\nDESCRIPTION: This snippet shows how to access the Transfer Syntax UID, which defines the encoding of the DICOM dataset, and its name from the file metadata.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/dataset_basics.rst#_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n>>> ds.file_meta.TransferSyntaxUID\n'1.2.840.10008.1.2.1'\n>>> ds.file_meta.TransferSyntaxUID.name\n'Explicit VR Little Endian'\n```\n\n----------------------------------------\n\nTITLE: Accessing sequence elements in pydicom\nDESCRIPTION: This snippet demonstrates how to access elements within a DICOM sequence.  It retrieves the BeamName from the first dataset in the BeamSequence.  It also shows how to assign a dataset from the sequence to an intermediate variable for easier access. This clarifies how nested data structures are handled.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/guides/user/base_element.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> ds.BeamSequence[0].BeamName\n'Field 1'\n>>> # Or, set an intermediate variable to a dataset in the list\n>>> beam1 = ds.BeamSequence[0]  # First dataset in the sequence\n>>> beam1.BeamName\n'Field 1'\n```\n\n----------------------------------------\n\nTITLE: Iterating through pixel data\nDESCRIPTION: This example demonstrates how to iterate through a multi-frame DICOM dataset's pixel data using the `iter_pixels` function. It iterates through all frames and the first 3 even frames.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/pixel_data/introduction.rst#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom pydicom import examples\nfrom pydicom.pixels import iter_pixels\n\n# Iterate through all frames\nfor arr in iter_pixels(examples.rt_dose):\n    assert arr.shape == (10, 10)\n\n# Iterate through the first 3 even frames\nfor arr in iter_pixels(examples.rt_dose, indices=[1, 3, 5]):\n    assert arr.shape == (10, 10)\n```\n\n----------------------------------------\n\nTITLE: Lossy Compression with Multiple-Component Transformation (Python)\nDESCRIPTION: Shows how to perform lossy compression of RGB pixel data with multiple-component transformation using JPEG 2000. The `PhotometricInterpretation` is set to 'YBR_ICT' to enable the transformation. The `j2k_cr` parameter controls the compression ratio for the lossy encoding.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/guides/encoding/jpeg_2k.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom pydicom import examples\nfrom pydicom.uid import JPEG2000\n\nds = examples.rgb_color\nassert ds.SamplesPerPixel == 1\nassert ds.PhotometricInterpretation == 'RGB'\nassert ds.BitsAllocated == 8\nassert ds.BitsStored == 8\nassert ds.PixelRepresentation == 0\nassert len(ds.PixelData) == 921600\n\n# YBR_RCT is not valid with lossy *JPEG 2000*\nds.PhotometricInterpretation = \"YBR_ICT\"\n\nds.compress(JPEG2000, j2k_cr=[20])\n\nprint(len(ds.PixelData))  # ~46076\n```\n\n----------------------------------------\n\nTITLE: Install GDCM using conda\nDESCRIPTION: Install GDCM using conda. Note that the conda-forge version might be older.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/installation.rst#_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nconda install gdcm -c conda-forge\n```\n\n----------------------------------------\n\nTITLE: Handling Errors when using force=True\nDESCRIPTION: This snippet demonstrates the deferred-read system and potential errors when using `force=True` with a non-DICOM file. Errors are raised only when the dataset is accessed. This snippet creates a non-DICOM file, attempts to read it with `dcmread` using `force=True`, and shows the traceback that occurs when trying to print the resulting dataset.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/dataset_basics.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> with open('not_dicom.txt', 'w') as not_dicom:\n...    not_dicom.write('This is not a DICOM file!')\n>>> ds = dcmread('not_dicom.txt', force=True)\n\n>>> print(ds)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"../pydicom/dataset.py\", line 1703, in __str__\n      return self._pretty_str()\n  File \"../pydicom/dataset.py\", line 1436, in _pretty_str\n      for data_element in self:\n  File \"../pydicom/dataset.py\", line 1079, in __iter__\n      yield self[tag]\n  File \"../pydicom/dataset.py\", line 833, in __getitem__\n      self[tag] = DataElement_from_raw(data_elem, character_set)\n  File \"../pydicom/dataelem.py\", line 581, in DataElement_from_raw\n      raise KeyError(msg)\n  KeyError: \"Unknown DICOM tag (6854, 7369) can't look up VR\"\n```\n\n----------------------------------------\n\nTITLE: Accessing sequence elements by tag number in pydicom\nDESCRIPTION: This code illustrates accessing elements within a nested DICOM sequence structure using tag numbers. It navigates through the sequence to retrieve the value of 'Field 1'. It is noted that this method is harder to read and should primarily be used when the DICOM keyword is not available.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/guides/user/base_element.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> # Same thing with tag numbers - much harder to read:\n>>> # Really should only be used if DICOM keyword not in pydicom dictionary\n>>> ds[0x300a, 0xb0][0][0x300a, 0xc2].value\n'Field 1'\n```\n\n----------------------------------------\n\nTITLE: Cloning pydicom Repository (Bash)\nDESCRIPTION: Clones the pydicom repository from GitHub to your local machine. Replace 'YourUsername' with your actual GitHub username.  This command downloads the complete source code history to your computer, allowing you to make local changes.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/contributing_code.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/YourUsername/pydicom.git\n```\n\n----------------------------------------\n\nTITLE: Accessing Example Datasets\nDESCRIPTION: This example demonstrates how to access an example dataset from the pydicom.examples module and retrieve a specific attribute.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/reference/examples.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from pydicom import examples\n>>> type(examples.ct)\n<class 'pydicom.dataset.FileDataset'>\n>>> examples.ct.PatientName\n'CompressedSamples^CT1'\n```\n\n----------------------------------------\n\nTITLE: Decoding Waveform Data with Channel Sensitivity Correction - Python\nDESCRIPTION: This snippet decodes waveform data using the `waveform_array` method, which applies channel sensitivity corrections if available.  The first sample of the first channel, after correction, is printed.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/waveforms.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> arr = ds.waveform_array(0)\n>>> arr[0, 0]\n>>> 100.0\n```\n\n----------------------------------------\n\nTITLE: Finding Instances by Query (with Load Parameter)\nDESCRIPTION: This snippet demonstrates using the `load` parameter within the `find` method to filter FileInstance objects based on element values that are only available after loading the files.  It finds instances with PatientID='77654033' and PhotometricInterpretation='MONOCHROME1'.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/filesets.rst#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n>>> len(fs.find(PatientID='77654033', PhotometricInterpretation='MONOCHROME1'))\n0\n>>> len(fs.find(PatientID='77654033', PhotometricInterpretation='MONOCHROME1', load=True))\n3\n```\n\n----------------------------------------\n\nTITLE: Fetch DICOM data files\nDESCRIPTION: Fetch missing DICOM data files to the local cache after installing pydicom.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/installation.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\npython -c \"import pydicom; pydicom.data.fetch_data_files()\"\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Pytest\nDESCRIPTION: This code snippet shows how to install pytest and pytest-cov, change to the pydicom directory, and run tests with coverage reporting. It ensures that the test coverage is at least as good as the current coverage and any new lines of code are covered.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/CONTRIBUTING.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install pytest pytest-cov\n$ cd pydicom/\n$ pytest --cov=pydicom tests/\n```\n\n----------------------------------------\n\nTITLE: Saving DICOM Dataset to BytesIO with pydicom\nDESCRIPTION: Demonstrates how to save a pydicom Dataset object to a BytesIO object. It imports BytesIO from the io module, creates a BytesIO object, and saves the dataset to it using the `save_as` method.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/dataset_basics.rst#_snippet_32\n\nLANGUAGE: python\nCODE:\n```\n>>> from io import BytesIO\n>>> out = BytesIO()\n>>> ds.save_as(out)\n```\n\n----------------------------------------\n\nTITLE: Accessing DICOM codes by scheme designator in pydicom\nDESCRIPTION: This snippet shows how to access DICOM codes using the scheme designator (e.g., 'DCM') within the pydicom.sr.codedict.codes instance.  It utilizes the dir() method to list available codes for a given scheme designator and a specific code group ('Modality').\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/sr_basics.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from pydicom.sr.codedict import codes\n>>> codes.DCM.dir(\"Modality\")\n['IncorrectModalityWorklistEntry', 'MixedModality3DCAMModel', 'Modality', 'ModalityToRead', 'OtherModality']\n```\n\n----------------------------------------\n\nTITLE: Install pydicom and dependencies using pip\nDESCRIPTION: This command uses pip to install or update the pydicom library and its dependencies (numpy, matplotlib).  It ensures that pydicom version 2.1 or later is installed.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/waveforms.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install -U pydicom>=2.1 numpy matplotlib\n```\n\n----------------------------------------\n\nTITLE: Accessing Media Storage SOP Class Name in DICOMDIR\nDESCRIPTION: This snippet demonstrates how to load a DICOMDIR file using pydicom and access the name of the Media Storage SOP Class UID. This shows the type of storage directory used.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/filesets.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from pydicom import examples\n>>> ds = examples.dicomdir\n>>> ds.file_meta.MediaStorageSOPClassUID.name\n'Media Storage Directory Storage'\n```\n\n----------------------------------------\n\nTITLE: Displaying Private Data Elements in pydicom\nDESCRIPTION: This snippet shows how to access and display private data elements in a pydicom Dataset.  It demonstrates how to access the data element using its tag and retrieve the value attribute. It also shows how to use private_block to access the element. It relies on the pydicom library and the example CT dataset.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/guides/user/private_data_elements.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from pydicom import examples\n>>> ds = examples.ct\n>>> ds\nDataset.file_meta -------------------------------\n(0002, 0000) File Meta Information Group Length  UL: 192\n(0002, 0001) File Meta Information Version       OB: b'\\x00\\x01'\n(0002, 0002) Media Storage SOP Class UID         UI: CT Image Storage\n(0002, 0003) Media Storage SOP Instance UID      UI: 1.3.6.1.4.1.5962.1.1.1.1.1.20040119072730.12322\n(0002, 0010) Transfer Syntax UID                 UI: Explicit VR Little Endian\n(0002, 0012) Implementation Class UID            UI: 1.3.6.1.4.1.5962.2\n(0002, 0013) Implementation Version Name         SH: 'DCTOOL100'\n(0002, 0016) Source Application Entity Title     AE: 'CLUNIE1'\n-------------------------------------------------\n(0008, 0005) Specific Character Set              CS: 'ISO_IR 100'\n(0008, 0008) Image Type                          CS: ['ORIGINAL', 'PRIMARY', 'AXIAL']\n...\n(0009, 0010) Private Creator                     LO: 'GEMS_IDEN_01'\n(0009, 1001) [Full fidelity]                     LO: 'GE_GENESIS_FF'\n(0009, 1002) [Suite id]                          SH: 'CT01'\n...\n```\n\n----------------------------------------\n\nTITLE: Plugin Availability Check Function - Python\nDESCRIPTION: This code defines the required function signature for the is_available function. This function checks if the plugin supports the given transfer syntax UID and if all dependencies are met. It returns True if the plugin is available and False otherwise.  The uid parameter is the Transfer Syntax UID for the corresponding encoder.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/guides/encoding/encoder_plugins.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef is_available(uid: pydicom.uid.UID) -> bool:\n```\n\n----------------------------------------\n\nTITLE: Clone and Install pydicom in editable mode\nDESCRIPTION: Clone the pydicom repository and install it in editable mode using pip. This allows you to easily update the source code.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/installation.rst#_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\ngit clone --depth=1 https://github.com/pydicom/pydicom.git\n```\n\nLANGUAGE: shell\nCODE:\n```\npip install -e pydicom/\n```\n\n----------------------------------------\n\nTITLE: Serving Documentation Locally with Python\nDESCRIPTION: This command starts a simple HTTP server using Python to serve the generated HTML documentation locally, allowing users to preview the documentation in a web browser. The server listens on port 9999.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/contributing_docs.rst#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\ncd _build/html\npython -m http.server 9999\n```\n\n----------------------------------------\n\nTITLE: Accessing Pixel Data as bytes in pydicom\nDESCRIPTION: This example demonstrates how to read a DICOM file, access the Pixel Data element as raw bytes, and determine its type and length. This is useful for direct manipulation or inspection of the pixel data.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/README.md#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n>>> from pydicom import dcmread\n>>> from pydicom.data import get_testdata_file\n>>> path = get_testdata_file(\"CT_small.dcm\")\n>>> ds = dcmread(path)\n>>> type(ds.PixelData)\n<class 'bytes'>\n>>> len(ds.PixelData)\n32768\n>>> ds.PixelData[:2]\nb'\\xaf\\x00'\n```\n\n----------------------------------------\n\nTITLE: Install pydicom using pip\nDESCRIPTION: Install the latest stable release of pydicom from PyPI using pip. Depending on the operating system, the second command may be required.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/installation.rst#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install pydicom\n```\n\nLANGUAGE: shell\nCODE:\n```\npython -m pip install pydicom\n```\n\n----------------------------------------\n\nTITLE: Pixel Data Encoding Function Signature - Python\nDESCRIPTION: This code defines the required function signature for a pixel data encoding function in pydicom. The function must accept the raw uncompressed data (src) as bytes and an EncodeRunner instance. It should return the encoded data as bytes or bytearray. The function should support little-endian byte ordering and handle multi-byte values.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/guides/encoding/encoder_plugins.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef foo(src: bytes, runner: EncodeRunner) -> bytes | bytearray:\n```\n\n----------------------------------------\n\nTITLE: Installing pydicom dependencies using conda\nDESCRIPTION: This code snippet shows how to install pydicom and numpy using conda and pylibjpeg[all] and pyjpegls using pip for compressing and decompressing pixel data.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/pixel_data/compressing.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nconda install numpy\nconda install -c conda-forge pydicom\npip install pylibjpeg[all] pyjpegls\n```\n\n----------------------------------------\n\nTITLE: Assigning Dataset to Local Variable\nDESCRIPTION: This example illustrates the best practice of assigning the returned dataset from the examples module to a local variable for efficient access.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/reference/examples.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> ds = examples.ct\n```\n\n----------------------------------------\n\nTITLE: Checking Transfer Syntax\nDESCRIPTION: This snippet shows how to retrieve the Transfer Syntax UID from a DICOM dataset's file metadata and check if the pixel data is compressed. The `TransferSyntaxUID` element describes how the pixel data is encoded and whether it's undergone compression.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/pixel_data/introduction.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom pydicom import examples\nds = examples.jpeg2k\ntsyntax = ds.file_meta.TransferSyntaxUID\nprint(tsyntax.name)\nprint(tsyntax.is_compressed)\n```\n\n----------------------------------------\n\nTITLE: Install pydicom using conda\nDESCRIPTION: Install the latest version of pydicom from the conda-forge channel using conda.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/installation.rst#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nconda install -c conda-forge pydicom\n```\n\n----------------------------------------\n\nTITLE: Adding a Plugin to an Encoder - Python\nDESCRIPTION: This code demonstrates how to add a custom plugin to an existing encoder using the add_plugin method. It shows how to specify the plugin label and the import path to the encoder function's module and function name.  The module must contain the encoding function, ENCODER_DEPENDENCIES, and is_available.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/guides/encoding/encoder_plugins.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom pydicom.pixels.encoders import RLELosslessEncoder\n\nRLELosslessEncoder.add_plugin(\n    'my_encoder',  # the plugin's label\n    ('my_package.encoders', 'my_encoder_func')  # the import paths\n)\n```\n\n----------------------------------------\n\nTITLE: Installing pydicom and Documentation Dependencies with pip\nDESCRIPTION: This command installs pydicom in editable mode (`-e`) along with the necessary dependencies for building the documentation, specified by `[docs]`. This step ensures that the user has all the required tools and libraries for working on the documentation.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/contributing_docs.rst#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\npip install -e pydicom[docs]\n```\n\n----------------------------------------\n\nTITLE: Display the contents of a DICOM file\nDESCRIPTION: This command displays all data elements and nested sequences within the specified DICOM file. It uses a sample DICOM file from the pydicom test data.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/guides/cli/cli_show.rst#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ pydicom show pydicom::CT_small.dcm\n```\n\n----------------------------------------\n\nTITLE: Installing and Running pytest (Bash)\nDESCRIPTION: Installs the pytest testing framework and then runs the tests within the pydicom test suite. These commands are used to ensure that changes do not introduce bugs into the codebase.  It first changes directory to the 'tests' directory within the pydicom source code.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/contributing_code.rst#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install pytest\n$ cd pydicom/tests\n$ pytest\n```\n\n----------------------------------------\n\nTITLE: Decoder Plugin Availability Check Function in Python\nDESCRIPTION: This function checks if a decoder plugin is available based on the provided Transfer Syntax UID. It should return True if the plugin supports the UID and its dependencies are met; otherwise, it should return False.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/guides/decoding/decoder_plugins.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef is_available(uid: pydicom.uid.UID) -> bool:\n  # Implementation details to check availability\n  pass\n```\n\n----------------------------------------\n\nTITLE: Display help message for pydicom show command\nDESCRIPTION: This command displays the help message for the `pydicom show` command, showing available options and arguments.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/guides/cli/cli_show.rst#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ pydicom help show\n```\n\n----------------------------------------\n\nTITLE: Modifying Sequence Items\nDESCRIPTION: This snippet demonstrates how to modify elements within items of a DICOM sequence.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/dataset_basics.rst#_snippet_26\n\nLANGUAGE: python\nCODE:\n```\n>>> seq = ds.OtherPatientIDsSequence\n>>> seq += [Dataset(), Dataset(), Dataset()]\n>>> seq[0].PatientID = 'Citizen^Jan'\n>>> seq[0].TypeOfPatientID = 'TEXT'\n>>> seq[1].PatientID = 'CompressedSamples^CT1'\n>>> seq[1].TypeOfPatientID = 'TEXT'\n>>> seq[0]\n(0010, 0020) Patient ID                          LO: 'Citizen^Jan'\n(0010, 0022) Type of Patient ID                  CS: 'TEXT'\n>>> seq[1]\n(0010, 0020) Patient ID                          LO: 'CompressedSamples^CT1'\n(0010, 0022) Type of Patient ID                  CS: 'TEXT'\n```\n\n----------------------------------------\n\nTITLE: Install pydicom-data using pip\nDESCRIPTION: Install the pydicom-data repository to get the complete set of testing and example files.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/installation.rst#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npip install git+https://github.com/pydicom/pydicom-data\n```\n\n----------------------------------------\n\nTITLE: Encoder Dependencies Dictionary - Python\nDESCRIPTION: This code demonstrates the format for the ENCODER_DEPENDENCIES dictionary. It maps Transfer Syntax UIDs to a tuple of dependency names (strings). This dictionary is used to provide users with a list of missing dependencies required by the plugin.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/guides/encoding/encoder_plugins.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom pydicom.uid import RLELossless, JPEG2000\n\nENCODER_DEPENDENCIES = {\n    RLELossless: ('numpy', 'pillow', 'imagecodecs'),\n    JPEG2000: ('numpy', 'gdcm'),\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Waveform Data Properties - Python\nDESCRIPTION: This snippet accesses the *WaveformBitsAllocated*, *WaveformSampleInterpretation*, and the length of *WaveformData* from a multiplex group. It helps understand the format and size of the waveform data.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/waveforms.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> multiplex.WaveformBitsAllocated\n16\n>>> multiplex.WaveformSampleInterpretation\n'SS'\n>>> len(multiplex.WaveformData)\n240000\n```\n\n----------------------------------------\n\nTITLE: Building HTML Documentation with Make\nDESCRIPTION: Uses the `make` command to build the HTML documentation from the reStructuredText source files in the 'doc' directory. Requires Sphinx to be installed and configured.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake html\n```\n\n----------------------------------------\n\nTITLE: Install Pillow and dependencies using conda\nDESCRIPTION: Install Pillow and its dependencies (openjpeg and jpeg) using conda.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/installation.rst#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nconda install -c conda-forge openjpeg jpeg\nconda install pillow\n```\n\n----------------------------------------\n\nTITLE: Accessing the Preamble of DICOM file\nDESCRIPTION: This snippet showcases how to access the 128-byte preamble of a DICOM file, which is part of the file header.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/dataset_basics.rst#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n>>> ds.preamble\nb'II*\\x00T\\x18\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00...'\n```\n\n----------------------------------------\n\nTITLE: Creating a Python 3 Virtual Environment\nDESCRIPTION: Creates a new virtual environment using Python 3, installs pydicom in editable mode, and installs documentation dependencies (matplotlib, sphinx, sphinx_rtd_theme, sphinx_gallery, sphinx_copybutton, and sphinx_issues). It then changes the current directory to the 'doc' directory.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmkvirtualenv -p /path/to/python3.X pydicom-sphinx\ncd pydicom/\npip install -e .\npip install matplotlib\npip install sphinx sphinx_rtd_theme sphinx_gallery sphinx_copybutton sphinx_issues\ncd doc\n```\n\n----------------------------------------\n\nTITLE: Accessing Waveform Sequence and Multiplex Data in pydicom\nDESCRIPTION: This snippet demonstrates how to access the Waveform Sequence element in a pydicom dataset, retrieve a multiplex from the sequence, and access its properties such as the number of waveform channels and sampling frequency.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/guides/user/working_with_waveforms.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pydicom import examples\n>>> ds = examples.waveform\n>>> ds.WaveformSequence\n<Sequence, length 2>\n>>> multiplex = ds.WaveformSequence[0]\n>>> multiplex.NumberOfWaveformChannels\n12\n>>> multiplex.SamplingFrequency\n\"1000.0\"\n>>> multiplex['WaveformData']\n(5400, 1010) Waveform Data                       OW: Array of 240000 elements\n```\n\n----------------------------------------\n\nTITLE: BaseTag type check in Pydicom\nDESCRIPTION: Demonstrates checking the type of a Pydicom tag using the `type()` function. It shows that the tag is an instance of `pydicom.tag.BaseTag`.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/guides/user/base_element.rst#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n>>> type(t1)\n<class `pydicom.tag.BaseTag`>\n```\n\n----------------------------------------\n\nTITLE: Display help message for pydicom show command (alternative)\nDESCRIPTION: This command also displays the help message for the `pydicom show` command, showing available options and arguments using an alternative syntax.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/guides/cli/cli_show.rst#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ pydicom show -h\n```\n\n----------------------------------------\n\nTITLE: Disabling Future Behavior in pydicom\nDESCRIPTION: This snippet demonstrates how to disable future behavior in pydicom. It calls the future_behavior() function with the argument False.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/guides/user/best_practices.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nconfig.future_behavior(False)\n```\n\n----------------------------------------\n\nTITLE: Printing Directory Record Sequence Information\nDESCRIPTION: This snippet shows how to print the first item in the Directory Record Sequence of a DICOMDIR dataset. This demonstrates accessing the directory record structure and its elements.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/filesets.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> print(ds.DirectoryRecordSequence[0])\n(0004, 1400) Offset of the Next Directory Record UL: 3126\n(0004, 1410) Record In-use Flag                  US: 65535\n(0004, 1420) Offset of Referenced Lower-Level Di UL: 510\n(0004, 1430) Directory Record Type               CS: 'PATIENT'\n(0008, 0005) Specific Character Set              CS: 'ISO_IR 100'\n(0010, 0010) Patient's Name                      PN: 'Doe^Archibald'\n(0010, 0020) Patient ID                          LO: '77654033'\n```\n\n----------------------------------------\n\nTITLE: Installing Pre-commit hooks\nDESCRIPTION: This code snippet shows how to install pre-commit hooks, which automatically run checks before each commit to ensure code quality. It requires pip and pre-commit to be installed.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install pre-commit\n$ pre-commit install\n```\n\n----------------------------------------\n\nTITLE: Using Standard Python Operations with PrivateBlock\nDESCRIPTION: This snippet demonstrates how to use standard Python operations like `in` and `del` with a PrivateBlock object.  It shows how to check for the existence of a private tag within the block and how to delete a private tag. Requires an existing pydicom Dataset and a created PrivateBlock.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/guides/user/private_data_elements.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> 0x01 in block\nTrue\n>>> 0x02 in block\nFalse\n>>> del block[0x01]\n>>> 0x01 in block\nFalse\n```\n\n----------------------------------------\n\nTITLE: Setting Reading Validation Mode in pydicom\nDESCRIPTION: This snippet demonstrates how to change the reading validation mode in pydicom to raise an exception when invalid DICOM data is encountered. It imports the config module and sets the reading_validation_mode to config.RAISE.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/guides/user/best_practices.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pydicom import config\n\nconfig.settings.reading_validation_mode = config.RAISE\n```\n\n----------------------------------------\n\nTITLE: Creating a New File-set Instance\nDESCRIPTION: This snippet demonstrates how to create a new, empty File-set instance using the FileSet class.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/filesets.rst#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n>>> fs = FileSet()\n```\n\n----------------------------------------\n\nTITLE: Deleting element by tag\nDESCRIPTION: This snippet shows how to delete a DICOM element using its tag with the `del` operator.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/dataset_basics.rst#_snippet_27\n\nLANGUAGE: python\nCODE:\n```\n>>> del ds[0x0043, 0x104E]\n>>> [0x0043, 0x104E] in ds\nFalse\n```\n\n----------------------------------------\n\nTITLE: Getting Dataset File Path\nDESCRIPTION: This example demonstrates how to use the `get_path` function to retrieve the file path of an example dataset as a pathlib.Path instance. Requires the pathlib library.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/reference/examples.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> examples.get_path(\"ct\")\nPosixPath('/home/user/pydicom/src/pydicom/data/test_files/CT_small.dcm')\n```\n\n----------------------------------------\n\nTITLE: Setting PYDICOM_FUTURE environment variable (Linux/macOS)\nDESCRIPTION: This snippet demonstrates how to set the PYDICOM_FUTURE environment variable to True in Linux or macOS environments, which enables future behavior in pydicom. This can be done in the terminal before running a script.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/guides/user/best_practices.rst#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nexport PYDICOM_FUTURE=True\n```\n\n----------------------------------------\n\nTITLE: Display a nested data element within a sequence\nDESCRIPTION: This command displays a specific data element (300a,0111) located within the first item of a sequence (300A,00B0).\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/guides/cli/cli_show.rst#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ pydicom show pydicom::rtplan.dcm::(300A,00B0)[0].(300a,0111)\n```\n\n----------------------------------------\n\nTITLE: Loading a DICOM File-set\nDESCRIPTION: This snippet demonstrates how to load an existing DICOM File-set using the FileSet class in pydicom. It reads the DICOMDIR file and creates a FileSet object. It shows two ways, directly reading the DICOMDIR file or passing the path.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/filesets.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> from pydicom import dcmread\n>>> from pydicom.fileset import FileSet\n>>> path = examples.get_path(\"dicomdir\")  # The path to the examples.dicomdir dataset\n>>> ds = dcmread(path)\n>>> fs = FileSet(ds)  # or FileSet(path)\n```\n\n----------------------------------------\n\nTITLE: Creating a New Git Branch (Bash)\nDESCRIPTION: Creates a new branch named 'new-uid' using git. Creating a new branch allows you to isolate changes from the main codebase. The 'checkout -b' command both creates the branch and switches to it.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/contributing_code.rst#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ git checkout -b new-uid\n```\n\n----------------------------------------\n\nTITLE: Display a sequence from a DICOM file\nDESCRIPTION: This command shows the `FractionGroupSequence` from the specified DICOM file.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/guides/cli/cli_show.rst#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ pydicom show pydicom::rtplan.dcm::FractionGroupSequence\n```\n\n----------------------------------------\n\nTITLE: Lossy Compression of Greyscale Pixel Data with JPEG 2000 (Python)\nDESCRIPTION: Demonstrates lossy compression of signed greyscale pixel data. Similar to the lossless greyscale example, this loads a CT image and compresses it using JPEG 2000, but with lossy settings (compression ratio of 20).\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/guides/encoding/jpeg_2k.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom pydicom import examples\nfrom pydicom.uid import JPEG2000\n\nds = examples.ct\nassert ds.SamplesPerPixel == 1\nassert ds.PhotometricInterpretation == 'MONOCHROME2'\nassert ds.BitsAllocated == 16\nassert ds.BitsStored == 16\nassert ds.PixelRepresentation == 1\nassert len(ds.PixelData) == 32768\n\nds.compress(JPEG2000, j2k_cr=[20])\n\nprint(len(ds.PixelData))  # ~1582\n```\n\n----------------------------------------\n\nTITLE: Display DICOM file in quiet mode\nDESCRIPTION: This command displays a minimal version of the DICOM file information using the `-q` option, which shows the DICOM keyword and value without tag numbers and VR.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/guides/cli/cli_show.rst#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ pydicom show -q pydicom::ct_small.dcm\n```\n\n----------------------------------------\n\nTITLE: Finding Values in File-set (Managed Instances)\nDESCRIPTION: This snippet demonstrates how to find unique values for a specific element (PhotometricInterpretation) within the File-set's managed instances by loading each file. It showcases the usage of the `load` parameter to trigger file reading and decoding.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/filesets.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> fs.find_values(\"PhotometricInterpretation\")\n[]\n>>> fs.find_values(\"PhotometricInterpretation\", load=True)\n['MONOCHROME1', 'MONOCHROME2']\n```\n\n----------------------------------------\n\nTITLE: Citing Pydicom in Text\nDESCRIPTION: This snippet provides an example of how to cite the pydicom library in a text format. It includes the authors, library name, and a link to the GitHub repository, along with the access date.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/faq/index.rst#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nMason, D. L., et al, pydicom: An open source DICOM library, https://github.com/pydicom/pydicom [Online; accessed YYYY-MM-DD].\n```\n\n----------------------------------------\n\nTITLE: Display RT Plan in quiet mode\nDESCRIPTION: This command displays a minimal version of RT Plan file information using the `-q` option.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/guides/cli/cli_show.rst#_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ pydicom show -q pydicom::rtplan.dcm\n```\n\n----------------------------------------\n\nTITLE: Handling Unavailable Decoding Plugins - Python\nDESCRIPTION: This example illustrates how an exception is raised when a specified decoding plugin is not available or lacks the required dependencies. It helps understand error handling in situations where the desired plugin cannot be used for decompression.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/pixel_data/introduction.rst#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n>>> from pydicom import examples\n>>> from pydicom.pixels import pixel_array\n>>> pixel_array(examples.jpeg2k, decoding_plugin=\"pillow\")\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \".../pydicom/pixels/utils.py\", line 1386, in pixel_array\n    return decoder.as_array(\n           ^^^^^^^^^^^^^^^^^\n  File \".../pydicom/pixels/decoders/base.py\", line 971, in as_array\n    self._validate_plugins(decoding_plugin),\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \".../pydicom/pixels/common.py\", line 230, in _validate_plugins\n    raise RuntimeError(\nRuntimeError: Unable to decompress 'JPEG 2000 Image Compression (Lossless Only)' pixel data because the specified plugin is missing dependencies:\n    pillow - requires numpy and pillow>=10.0\n```\n\n----------------------------------------\n\nTITLE: Installing pydicom and dependencies\nDESCRIPTION: This snippet shows how to install pydicom, numpy, matplotlib and pylibjpeg using pip and conda. These packages are required to run the example code for creating and displaying pixel data.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/pixel_data/creation.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install -U pydicom numpy matplotlib pylibjpeg[all]\n```\n\n----------------------------------------\n\nTITLE: Listing and Printing DICOM Elements with pydicom\nDESCRIPTION: This code snippet shows how to list the elements in a DICOM dataset using the `dir()` method and how to print the value of a specific element, such as PatientName.  It also shows how to print the element object itself, which includes its tag, VR, and value.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/contributing_docs.rst#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n>>> ds.dir()\n['AccessionNumber', 'AcquisitionData', ..., 'PatientName', ..., 'XRayTubeCurrent']\n\n>>> print(ds.PatientName)\nCompressedSamples^CT1\n\n>>> print(ds['PatientName'])\n(0010, 0010) Patient's Name                      PN: 'CompressedSamples^CT1'\n```\n\n----------------------------------------\n\nTITLE: Adding a Private DICOM Dictionary Entry\nDESCRIPTION: This snippet demonstrates how to add a new entry to the DICOM dictionary for private tags.  It uses the `add_private_dict_entry` function and requires the private creator, tag, VR, and description.  This allows pydicom to correctly handle and display unknown private tags.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/guides/user/private_data_elements.rst#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n>>> add_private_dict_entry(private_creator=\"ACME 1.1\", tag=0x004100001, VR=\"DA\", description=\"Release Date\")\n```\n\n----------------------------------------\n\nTITLE: Cleaning and Rebuilding Documentation with Make\nDESCRIPTION: This command cleans the generated files and then rebuilds the HTML documentation. It is used to ensure that changes are properly applied by removing any old build artifacts.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/contributing_docs.rst#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n$ make clean && make html\n```\n\n----------------------------------------\n\nTITLE: Setting pydicom Version Constraint in requirements.txt\nDESCRIPTION: This snippet shows how to specify a version constraint for pydicom in a requirements.txt file.  This ensures that a specific major version of pydicom is used when installing the package. In this case, it specifies versions 2.0 and up, but less than 3.0.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/guides/user/best_practices.rst#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\npydicom >=2.0,<3.0\n```\n\n----------------------------------------\n\nTITLE: Displaying available pydicom subcommands\nDESCRIPTION: This command displays a list of available subcommands for the `pydicom` CLI using the `help` option. It helps users discover the functionality provided by the CLI.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/guides/cli/cli_intro.rst#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ pydicom help\nUse pydicom help [subcommand] to show help for a subcommand\nAvailable subcommands: codify, show\n```\n\n----------------------------------------\n\nTITLE: Dataset Instance Check\nDESCRIPTION: This example shows that each time an example dataset attribute is accessed, a new FileDataset instance is returned. Demonstrates that comparing the dataset with itself using 'is' will return False, but comparing with '==' will return True.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/reference/examples.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> examples.ct is examples.ct\nFalse\n>>> examples.ct == examples.ct\nTrue\n```\n\n----------------------------------------\n\nTITLE: Installing Pydicom Dependencies\nDESCRIPTION: These commands install the necessary packages (pydicom, numpy, matplotlib, and pylibjpeg[all]) using pip and conda for working with DICOM files and pixel data.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/pixel_data/introduction.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install -U pydicom numpy matplotlib pylibjpeg[all]\n```\n\n----------------------------------------\n\nTITLE: Adding a Standard DICOM Dictionary Entry\nDESCRIPTION: This snippet demonstrates how to add a new entry to the DICOM dictionary for standard tags. It uses the `add_dict_entry` function and requires the tag, VR, keyword, and description for the new entry. This allows pydicom to correctly handle and display unknown standard tags.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/guides/user/private_data_elements.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> add_dict_entry(tag=0x888800001, VR=\"SH\", keyword=\"SomeNewTag\", description=\"Some New Tag\")\n```\n\n----------------------------------------\n\nTITLE: Expanded reStructuredText Example\nDESCRIPTION: This shows an example of a more complex reStructuredText page demonstrating how to link to external resources, other pages in the documentation, and include Python code examples.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/contributing_docs.rst#_snippet_8\n\nLANGUAGE: text\nCODE:\n```\n===================\nReading DICOM files\n===================\n\nIn this tutorial we will be reading a DICOM file using\n`pydicom <https://github.com/pydicom/pydicom>`_. The tasks you'll be doing\nwill include:\n\n* Installing *pydicom*\n* Reading a :dcm:`DICOM dataset<part05/chapter_7.html>`\n* Printing an element\n\nInstalling pydicom\n==================\nSee the :doc:`Installation guide</tutorials/installation>` on how to install\n*pydicom*.\n\nReading a DICOM dataset\n=======================\nIn a command window start a new **Python** session::\n\n  $ python\n  Python 3.6.5 (default, Apr  1 2018, 05:46:30)\n  [GCC 7.3.0] on linux\n  Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n\n.. note::\n\n  Your Python version may be different\n\n*pydicom* includes a number of files which can be accessed through the\n:func:`~pydicom.data.get_testdata_file` function. To read the file\n``CT_small.dcm`` we use :func:`~pydicom.filereader.dcmread`::\n\n  >>> from pydicom import dcmread\n  >>> from pydicom.data import get_testdata_file\n  >>> path = get_testdata_file(\"CT_small.dcm\")\n  >>> path\n  '[path/to]/pydicom/data/test_files/CT_small.dcm'\n  >>> ds = dcmread(path)\n\nPrinting an element\n===================\nTo get a :class:`list` of keywords for all the elements in the top level of\nthe dataset you can do:\n\n  >>> ds.dir()\n  ['AccessionNumber', 'AcquisitionData', ..., 'PatientName', ..., 'XRayTubeCurrent']\n\nTo :func:`print` the value of the (0010,0010) *Patient Name* element:\n\n  >>> print(ds.PatientName)\n  CompressedSamples^CT1\n\nTo print the element itself:\n\n  >>> print(ds['PatientName'])\n  (0010, 0010) Patient's Name                      PN: 'CompressedSamples^CT1'\n```\n\n----------------------------------------\n\nTITLE: Creating Tag instances in pydicom\nDESCRIPTION: This snippet demonstrates how to create instances of the `Tag` class in pydicom, which are used to represent DICOM tags. It shows that equivalent Tag instances can be created using an integer, a tuple of (group, element), or a DICOM keyword. The Tag object is derived from int.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/guides/user/base_element.rst#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n>>> from pydicom.tag import Tag\n>>> t1 = Tag(0x00100010) # all of these are equivalent\n>>> t2 = Tag(0x10, 0x10)\n>>> t3 = Tag((0x10, 0x10))\n>>> t4 = Tag(\"PatientName\")\n>>> t1\n```\n\n----------------------------------------\n\nTITLE: Installing pydicom with conda\nDESCRIPTION: This code snippet shows how to install the pydicom library using conda, a package, dependency and environment management system. This is suitable for users who prefer conda for managing their Python environment.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nconda install -c conda-forge pydicom\n```\n\n----------------------------------------\n\nTITLE: Codifying a Specific Data Element\nDESCRIPTION: This shows how to use the `filespec` argument to extract a specific data element (in this case, the first item in `FractionGroupSequence`) from a DICOM file and generate code for it. The filespec also indicates that the rtplan.dcm is a sample dataset that ships with `pydicom`.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/guides/cli/cli_codify.rst#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npydicom codify pydicom::rtplan.dcm::FractionGroupSequence[0]\n\n# Coded version of non-file dataset\n...\n\n# Main data elements\nds = Dataset()\nds.FractionGroupNumber = \"1\"\nds.NumberOfFractionsPlanned = \"30\"\nds.NumberOfBeams = \"1\"\nds.NumberOfBrachyApplicationSetups = \"0\"\n\n# Referenced Beam Sequence\nrefd_beam_sequence = Sequence()\nds.ReferencedBeamSequence = refd_beam_sequence\n\n# Referenced Beam Sequence: Referenced Beam 1\nrefd_beam1 = Dataset()\nrefd_beam1.BeamDoseSpecificationPoint = [239.531250000000, 239.531250000000, -751.87000000000]\n...\n```\n\n----------------------------------------\n\nTITLE: Creating a New Git Branch\nDESCRIPTION: This command creates and switches to a new Git branch named `doc-tut`. This allows users to isolate their documentation changes from the main branch.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/contributing_docs.rst#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\ngit checkout -b doc-tut\n```\n\n----------------------------------------\n\nTITLE: Listing DICOM element keywords with Dataset.dir() in pydicom\nDESCRIPTION: This example shows how to use the `Dataset.dir()` method to find DICOM element keywords containing a specific string. It returns a list of all non-private element keywords in the dataset that contain the string 'pat' (case-insensitive). This provides a way to discover elements when the exact keyword or tag is unknown.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/guides/user/base_element.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> ds.dir(\"pat\")\n['PatientBirthDate', 'PatientID', 'PatientName', 'PatientSetupSequence', 'PatientSex']\n```\n\n----------------------------------------\n\nTITLE: Adding a File to Git\nDESCRIPTION: This command adds a specific file (`tutorials/reading.rst`) to the Git staging area, preparing it to be committed.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/contributing_docs.rst#_snippet_12\n\nLANGUAGE: text\nCODE:\n```\ngit add tutorials/reading.rst\n```\n\n----------------------------------------\n\nTITLE: Removing DICOM element with 'del' operator in pydicom\nDESCRIPTION: This code snippet shows how to remove an element from a `Dataset` object using the `del` operator, referencing the element either by its keyword or tag. Here, the 'SoftwareVersions' element is removed from the dataset. This is useful for anonymization or cleaning DICOM data.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/guides/user/base_element.rst#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n>>> del ds.SoftwareVersions  # or del ds[0x0018, 0x1020]\n```\n\n----------------------------------------\n\nTITLE: Adding a Page to the Table of Contents\nDESCRIPTION: This code shows how to include a new page in the Sphinx table of contents (`toctree`) by adding a link to it in the `tutorials/index.rst` file. This makes the page easier to find in the documentation.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/contributing_docs.rst#_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n\n   installation\n   virtualenvs\n   contributing_code\n   contributing_docs\n   reading\n```\n\n----------------------------------------\n\nTITLE: Accessing Encapsulated Frames\nDESCRIPTION: This snippet shows how to access individual encapsulated frames from the Pixel Data of a DICOM dataset, which is common for compressed images. It uses `get_frame` to extract a specific frame (in this case, the first frame, index 0) and prints its length.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/pixel_data/introduction.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom pydicom import examples\nfrom pydicom.encaps import get_frame\nds = examples.jpeg2k\nframe = get_frame(ds.PixelData, 0, number_of_frames=1)\nprint(len(frame))\n```\n\n----------------------------------------\n\nTITLE: Installing Pydicom Dependencies (Conda)\nDESCRIPTION: These commands install the necessary packages (pydicom, numpy, matplotlib, and pylibjpeg[all]) using pip and conda for working with DICOM files and pixel data.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/pixel_data/introduction.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nconda install numpy matplotlib\nconda install -c conda-forge pydicom\npip install pylibjpeg[all]\n```\n\n----------------------------------------\n\nTITLE: Install python-gdcm using pip\nDESCRIPTION: Install python-gdcm using pip. GDCM is a C++ library for working with DICOM datasets that can decompress JPEG, JPEG-LS and JPEG 2000 images.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/installation.rst#_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\npip install python-gdcm\n```\n\n----------------------------------------\n\nTITLE: Starting a Python Session\nDESCRIPTION: This shows how to start a Python session in the command line. This allows users to execute Python commands and scripts. The example output shows the Python version and other system information.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/contributing_docs.rst#_snippet_9\n\nLANGUAGE: text\nCODE:\n```\n$ python\nPython 3.6.5 (default, Apr  1 2018, 05:46:30)\n[GCC 7.3.0] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n```\n\n----------------------------------------\n\nTITLE: Installing pydicom with pip\nDESCRIPTION: This code snippet demonstrates how to install the pydicom library using pip, the Python package installer. This is the recommended method for installing pydicom for most users.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install pydicom\n```\n\n----------------------------------------\n\nTITLE: Cleaning Generated Documentation Files\nDESCRIPTION: Removes previously generated documentation files. This is useful when adding new reStructuredText files or making significant changes that are not immediately reflected in the generated documentation.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmake clean\n```\n\n----------------------------------------\n\nTITLE: Installing pydicom dependencies using pip\nDESCRIPTION: This code snippet shows how to install pydicom and the necessary dependencies (numpy, pylibjpeg[all], and pyjpegls) using pip for compressing and decompressing pixel data.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/pixel_data/compressing.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install -U pydicom numpy pylibjpeg[all] pyjpegls\n```\n\n----------------------------------------\n\nTITLE: Committing Changes to Git\nDESCRIPTION: This command commits all staged changes (`-a`) with a specified commit message (`-m`).  It combines staging and committing into a single command.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/contributing_docs.rst#_snippet_13\n\nLANGUAGE: text\nCODE:\n```\ngit commit -am \"Add documentation on reading a DICOM file\"\n```\n\n----------------------------------------\n\nTITLE: Pushing Changes to GitHub\nDESCRIPTION: This code snippet shows how to push the changes from a local feature branch to the remote GitHub repository. This makes the local changes available on GitHub and allows creating a pull request.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/CONTRIBUTING.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ git push -u origin my-feature\n```\n\n----------------------------------------\n\nTITLE: Setting PYDICOM_FUTURE environment variable (Windows)\nDESCRIPTION: This snippet demonstrates how to set the PYDICOM_FUTURE environment variable to True in Windows, which enables future behavior in pydicom. This can be done in the command line before running a script.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/guides/user/best_practices.rst#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nSET PYDICOM_FUTURE=True\n```\n\n----------------------------------------\n\nTITLE: Decoding Raw Waveform Data to Numpy Array - Python\nDESCRIPTION: This snippet uses the `multiplex_array` function to decode the raw waveform data from a multiplex group into a NumPy array.  It retrieves the raw data without applying any channel sensitivity corrections. The first sample of the first channel is printed.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/waveforms.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> from pydicom.waveforms import multiplex_array\n>>> raw = multiplex_array(ds, 0, as_raw=True)\n>>> raw[0, 0]\n80\n```\n\n----------------------------------------\n\nTITLE: Listing Attribute Keywords for a Scheme/CID in pydicom.sr\nDESCRIPTION: This code snippet demonstrates how to retrieve a list of available attribute keywords for a specific coding scheme or CID using the `dir` method of the `Collection` class. This allows you to explore the available concepts within a specific context group.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/reference/sr.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> dir(codes.CID6)\n['Coronal', 'FiveChamber', 'FourChamber', ... ]\n```\n\n----------------------------------------\n\nTITLE: Committing Changes with Short Message (Bash)\nDESCRIPTION: Commits the staged changes with a short message provided directly in the command line.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/contributing_code.rst#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ git commit -m \"Add NewDefinedUID\"\n```\n\n----------------------------------------\n\nTITLE: Running Pre-commit Checks\nDESCRIPTION: This command executes the pre-commit hooks, which check for type hints, code syntax, spelling, and formatting issues. Running this helps maintain code quality and consistency.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/CONTRIBUTING.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ pre-commit run\n```\n\n----------------------------------------\n\nTITLE: Install types-pydicom using pip\nDESCRIPTION: Install the types-pydicom package to provide extra type hints for standard element keywords accessed through pydicom.dataset.Dataset.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/installation.rst#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npip install types-pydicom\n```\n\n----------------------------------------\n\nTITLE: Installing pydicom and dependencies (conda)\nDESCRIPTION: This snippet shows how to install pydicom, numpy, matplotlib and pylibjpeg using pip and conda. These packages are required to run the example code for creating and displaying pixel data.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/pixel_data/creation.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nconda install numpy matplotlib\nconda install -c conda-forge pydicom\npip install pylibjpeg[all]\n```\n\n----------------------------------------\n\nTITLE: Handling exceptions when appending to sequences\nDESCRIPTION: This snippet demonstrates the exception that occurs when attempting to append a non-Dataset object to a DICOM sequence.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/dataset_basics.rst#_snippet_21\n\nLANGUAGE: python\nCODE:\n```\n>>> ds.OtherPatientIDsSequence.append('Hello world?')\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \".../pydicom/multival.py\", line 63, in append\n    self._list.append(self.type_constructor(val))\n  File \".../pydicom/sequence.py\", line 15, in validate_dataset\n    raise TypeError('Sequence contents must be Dataset instances.')\nTypeError: Sequence contents must be Dataset instances.\n```\n\n----------------------------------------\n\nTITLE: Display a specific data element from a DICOM file\nDESCRIPTION: This command displays only the specified data element (PatientName) from the DICOM file.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/guides/cli/cli_show.rst#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ pydicom show pydicom::CT_small.dcm::PatientName\n```\n\n----------------------------------------\n\nTITLE: Install pyjpegls using pip\nDESCRIPTION: Install pyjpegls using pip. pyjpegls is a Python interface to the CharLS C++ library and can decompress JPEG-LS images.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/installation.rst#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\npip install pyjpegls\n```\n\n----------------------------------------\n\nTITLE: Writing FileSet with Existing Directory Structure in pydicom\nDESCRIPTION: Demonstrates writing a FileSet while preserving the existing directory structure using the `use_existing=True` parameter. The example involves copying an existing example FileSet to a temporary directory, removing instances, and writing the changes while maintaining the original directory structure. It uses shutil to copy files and directories.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/filesets.rst#_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n>>> from shutil import copytree, copyfile\n>>> t = TemporaryDirectory()\n>>> dst = Path(t.name)\n>>> src = examples.get_path(\"dicomdir\").parent\n>>> copyfile(src / \"DICOMDIR\", dst / \"DICOMDIR\")\n>>> copytree(src / \"77654033\", dst / \"77654033\")\n>>> copytree(src / \"98892001\", dst / \"98892001\")\n>>> copytree(src / \"98892003\", dst / \"98892003\")\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> fs = FileSet(dst / \"DICOMDIR\")\n>>> instances = fs.find(PatientID=\"98890234\")\n>>> fs.remove(instances)\n>>> fs.write(use_existing=True)  # Keep the current directory structure\n>>> for path in sorted([p for p in dst.glob('**/*') if p.is_file()]):\n...     print(path)\n...\n/tmp/tmpu068kdwp/DICOMDIR\n/tmp/tmpu068kdwp/77654033/CR1/6154\n/tmp/tmpu068kdwp/77654033/CR2/6247\n/tmp/tmpu068kdwp/77654033/CR3/6278\n/tmp/tmpu068kdwp/77654033/CT2/17106\n/tmp/tmpu068kdwp/77654033/CT2/17136\n/tmp/tmpu068kdwp/77654033/CT2/17166\n/tmp/tmpu068kdwp/77654033/CT2/17196\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> fs.write()\n>>> for path in sorted([p for p in dst.glob('**/*') if p.is_file()]):\n...     print(path)\n...\n/tmp/tmpu068kdwp/DICOMDIR\n/tmp/tmpu068kdwp/PT000000/ST000000/SE000000/IM000000\n/tmp/tmpu068kdwp/PT000000/ST000000/SE000001/IM000000\n/tmp/tmpu068kdwp/PT000000/ST000000/SE000002/IM000000\n/tmp/tmpu068kdwp/PT000000/ST000001/SE000000/IM000000\n/tmp/tmpu068kdwp/PT000000/ST000001/SE000000/IM000001\n/tmp/tmpu068kdwp/PT000000/ST000001/SE000000/IM000002\n/tmp/tmpu068kdwp/PT000000/ST000001/SE000000/IM000003\n```\n\n----------------------------------------\n\nTITLE: Enabling Future Behavior in pydicom\nDESCRIPTION: This snippet shows how to enable future behavior in pydicom to test code against upcoming major changes. It imports the config module and calls the future_behavior() function.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/guides/user/best_practices.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom pydicom import config\nconfig.future_behavior()\n```\n\n----------------------------------------\n\nTITLE: Creating a reStructuredText File\nDESCRIPTION: This is an example of the contents of a new reStructuredText file.  It shows the basic structure including a title.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/contributing_docs.rst#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n===================\nReading DICOM files\n===================\n\nIn this tutorial we will be reading a DICOM file using *pydicom*.\n```\n\n----------------------------------------\n\nTITLE: Building HTML Documentation with Make\nDESCRIPTION: This command builds the HTML documentation from the reStructuredText files using Sphinx.  It requires being in the `doc` directory of the pydicom project and uses the Makefile to execute the build process.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/contributing_docs.rst#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\ncd pydicom/doc\nmake html\n```\n\n----------------------------------------\n\nTITLE: Removing items from sequences/lists\nDESCRIPTION: This snippet demonstrates how to remove items from sequences and multi-valued elements using the `del` operator and list indexing.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/dataset_basics.rst#_snippet_29\n\nLANGUAGE: python\nCODE:\n```\n>>> del ds.OtherPatientIDsSequence[2]\n>>> len(seq)\n2\n>>> del ds.ImageType[2]\n>>> ds.ImageType\n['ORIGINAL', 'PRIMARY', 'LOCALIZER']\n```\n\n----------------------------------------\n\nTITLE: Installing Documentation Dependencies\nDESCRIPTION: This snippet installs the dependencies required to build the documentation using pip. The `-e .[docs]` flag installs pydicom in editable mode along with the 'docs' extra requirements specified in the `setup.py` file.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/CONTRIBUTING.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ cd pydicom/\n$ pip install -e .[docs]\n```\n\n----------------------------------------\n\nTITLE: Exception Handling - Missing Plugins\nDESCRIPTION: This code snippet shows the traceback that occurs when attempting to decompress a DICOM image with a compressed transfer syntax but the required decoding plugins (and thus, their dependencies) are not available. Specifically, in this case, the gdcm plugin for JPEG 2000 decompression is missing.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/pixel_data/introduction.rst#_snippet_11\n\nLANGUAGE: pytb\nCODE:\n```\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \".../pydicom/pixels/utils.py\", line 1386, in pixel_array\n    return decoder.as_array(\n           ^^^^^^^^^^^^^^^^^\n  File \".../pydicom/pixels/decoders/base.py\", line 971, in as_array\n    self._validate_plugins(decoding_plugin),\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \".../pydicom/pixels/common.py\", line 249, in _validate_plugins\n    raise RuntimeError(\nRuntimeError: Unable to decompress 'JPEG 2000 Image Compression (Lossless Only)' pixel data because all plugins are missing dependencies:\n\tgdcm - requires gdcm>=3.0.10\n```\n\n----------------------------------------\n\nTITLE: Install development version of pydicom using pip\nDESCRIPTION: Install a snapshot of the latest code (the `main` branch) from GitHub using pip.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/installation.rst#_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\npip install git+https://github.com/pydicom/pydicom\n```\n\n----------------------------------------\n\nTITLE: Adding Multiplex Group to Dataset and Saving - Python\nDESCRIPTION: This snippet appends the newly created multiplex group to the *WaveformSequence* of the existing DICOM dataset and saves the modified dataset to a file named \"my_waveform.dcm\".\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/waveforms.rst#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n>>> ds.WaveformSequence.append(new)\n>>> ds.save_as(\"my_waveform.dcm\")\n```\n\n----------------------------------------\n\nTITLE: Reading a DICOM File with pydicom\nDESCRIPTION: This code snippet demonstrates how to read a DICOM file using the `dcmread` function from the `pydicom.filereader` module.  It uses `get_testdata_file` to retrieve a sample DICOM file.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/contributing_docs.rst#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n>>> from pydicom import dcmread\n>>> from pydicom.data import get_testdata_file\n>>> path = get_testdata_file(\"CT_small.dcm\")\n>>> path\n'[path/to]/pydicom/data/test_files/CT_small.dcm'\n>>> ds = dcmread(path)\n```\n\n----------------------------------------\n\nTITLE: Displaying a specific DICOM element using pydicom show\nDESCRIPTION: This command displays a specific data element within a DICOM file, using the `pydicom show` subcommand. The example uses the `FractionGroupSequence[0]` element from a test DICOM file. The output shows only the specified element's data.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/guides/cli/cli_intro.rst#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ pydicom show pydicom::rtplan.dcm::FractionGroupSequence[0]\n(300a, 0071) Fraction Group Number               IS: \"1\"\n(300a, 0078) Number of Fractions Planned         IS: \"30\"\n(300a, 0080) Number of Beams                     IS: \"1\"\n(300a, 00a0) Number of Brachy Application Setups IS: \"0\"\n(300c, 0004)  Referenced Beam Sequence  1 item(s) ----\n(300a, 0082) Beam Dose Specification Point       DS: [239.531250000000, 239.531250000000, -751.87000000000]\n(300a, 0084) Beam Dose                           DS: \"1.0275401\"\n(300a, 0086) Beam Meterset                       DS: \"116.0036697\"\n(300c, 0006) Referenced Beam Number              IS: \"1\"\n---------\n```\n\n----------------------------------------\n\nTITLE: Formatting Code with Black\nDESCRIPTION: This code snippet installs black, a code formatter, changes to the pydicom directory, and formats the source code and tests. Using black ensures consistent code formatting throughout the project.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/CONTRIBUTING.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install black\n$ cd pydicom/\n$ black src/pydicom/\n$ black tests/\n```\n\n----------------------------------------\n\nTITLE: Committing Changes\nDESCRIPTION: This snippet demonstrates how to add modified files to the Git staging area and commit them with a message.  The `git add` command stages the changes and `git commit` records the changes in the repository with a descriptive message.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/CONTRIBUTING.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ git add modified_files\n$ git commit\n```\n\n----------------------------------------\n\nTITLE: Checking Type Hints with Mypy\nDESCRIPTION: This code snippet shows how to install mypy, change to the pydicom directory, and run mypy to check type hints in the code. This is part of the process to statically analyze code and catch type-related errors.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/CONTRIBUTING.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install mypy\n$ cd pydicom/\n$ mypy\n```\n\n----------------------------------------\n\nTITLE: Setting up Entry Points for pydicom Subcommands in setup.py (Python)\nDESCRIPTION: This code snippet demonstrates how to add entry points to a package's setup.py file to register custom subcommands for the pydicom CLI. It specifies the module and function to be called when the subcommand is invoked. The \"pydicom_subcommands\" entry point is crucial for pydicom to discover the subcommand.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/guides/cli/cli_dev.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom setuptools import setup\n\nif __name__ == '__main__':\n    setup(\n        name=\"yourpackage\",\n        # various setup options...,\n        entry_points = {\n            \"pydicom_subcommands\": [\n                \"command1 = yourpackage.command1module.add_subparser\",\n                \"command2 = yourpackage.command2module.add_subparser\"\n            ]\n        }\n    )\n```\n\n----------------------------------------\n\nTITLE: Testing New Defined UID (Python)\nDESCRIPTION: This python snippet shows a test function for a NewDefinedUID. It imports the NewDefinedUID from pydicom.uid and asserts that it is equal to '1.2.3.4.500'.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/contributing_code.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef test_new_uid():\n    \"\"\"Test uid.NewDefinedUID.\"\"\"\n    from pydicom.uid import NewDefinedUID\n    assert '1.2.3.4.500' == NewDefinedUID\n```\n\n----------------------------------------\n\nTITLE: Creating a Feature Branch\nDESCRIPTION: This code snippet shows how to create a feature branch in Git.  It's important to work on a feature branch when contributing to avoid modifying the main branch directly.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ git checkout -b my-feature\n```\n\n----------------------------------------\n\nTITLE: Staging All Changes (Bash)\nDESCRIPTION: Stages all the changes for a commit. This command adds all modified and new files in the current directory to the staging area.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/contributing_code.rst#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ git add --all\n```\n\n----------------------------------------\n\nTITLE: Installing pydicom in Editable Mode (Bash)\nDESCRIPTION: Installs pydicom in editable mode using pip. The '-e' flag ensures that changes made to the local source code are immediately reflected in the installed package, which is very helpful for development.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/contributing_code.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install -e pydicom/\n```\n\n----------------------------------------\n\nTITLE: Handling Missing File Meta Information Exception with pydicom\nDESCRIPTION: Shows how an exception is raised when saving with `enforce_file_format=True` and required file meta information elements are missing. The traceback indicates the missing element, typically the Transfer Syntax UID.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/dataset_basics.rst#_snippet_34\n\nLANGUAGE: pycon\nCODE:\n```\n>>> del ds.file_meta\n>>> ds.save_as('out.dcm', enforce_file_format=True)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \".../pydicom/dataset.py\", line 2452, in save_as\n    pydicom.dcmwrite(\n  File \".../pydicom/filewriter.py\", line 1311, in dcmwrite\n    validate_file_meta(file_meta, enforce_standard=True)\n  File \".../pydicom/dataset.py\", line 3204, in validate_file_meta\n    raise AttributeError(\nAttributeError: Required File Meta Information elements are either missing\nor have an empty value: (0002,0010) Transfer Syntax UID\n```\n\n----------------------------------------\n\nTITLE: Gathering Environment Information\nDESCRIPTION: This code snippet shows how to run the `pydicom_env_info` module to gather information about the operating system, Python version, and pydicom version. This information is useful when filing issues to provide context about the environment in which the bug or feature request is occurring.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/CONTRIBUTING.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ python -m pydicom.env_info\n```\n\n----------------------------------------\n\nTITLE: Installing NumPy and Pillow (Bash)\nDESCRIPTION: Installs the NumPy and Pillow libraries using pip. These libraries are needed when making changes to pixel data handlers within pydicom. Pillow is an image processing library.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/contributing_code.rst#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install numpy pillow\n```\n\n----------------------------------------\n\nTITLE: Cloning Pydicom Repository\nDESCRIPTION: This code snippet shows how to clone a forked pydicom repository from GitHub to a local machine and navigate into the cloned directory. This is the first step in setting up a local development environment for contributing.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/YourUsername/pydicom\n$ cd pydicom/\n```\n\n----------------------------------------\n\nTITLE: Install pyjpegls using conda and pip\nDESCRIPTION: Install pyjpegls using conda and pip. cython is needed for compilation.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/installation.rst#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nconda install cython\npip install git+https://github.com/pydicom/pyjpegls\n```\n\n----------------------------------------\n\nTITLE: Building Documentation\nDESCRIPTION: This snippet shows how to build the documentation after the necessary dependencies have been installed. It changes the directory to `doc/`, cleans the build directory, and then generates the HTML documentation using `make html`.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/CONTRIBUTING.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n$ cd pydicom/doc/\n$ make clean && make html\n```\n\n----------------------------------------\n\nTITLE: Adding New Defined UID (Python)\nDESCRIPTION: Adds a new defined UID to the `uid.py` file. The new UID is assigned a value of '1.2.3.4.500'. This snippet demonstrates how to extend the list of known UIDs in pydicom.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/contributing_code.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nRLELossless = UID('1.2.840.10008.1.2.5')\n\"\"\"1.2.840.10008.1.2.5\"\"\"\n# **Add this**\nNewDefinedUID = UID('1.2.3.4.500')\n\"\"\"1.2.3.4.500\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Install NumPy using pip\nDESCRIPTION: Install NumPy using pip. NumPy is required for manipulating pixel data.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/installation.rst#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\npip install numpy\n```\n\n----------------------------------------\n\nTITLE: Checking Code Style and Syntax with Ruff\nDESCRIPTION: This code snippet installs and runs ruff, a tool used to check code style and syntax.  It ensures that the code adheres to the project's styling conventions and helps prevent syntax errors.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/CONTRIBUTING.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install ruff\n$ cd pydicom/\n$ ruff check .\n```\n\n----------------------------------------\n\nTITLE: Pushing Branch to Origin (Bash)\nDESCRIPTION: Pushes the 'new-uid' branch to the remote origin (GitHub).\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/contributing_code.rst#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ git push origin new-uid\n```\n\n----------------------------------------\n\nTITLE: Pushing Changes to Remote Repository\nDESCRIPTION: This command pushes the changes from the local branch (`doc-tut`) to the remote repository (`origin`). This uploads the changes to the user's forked repository on GitHub.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/contributing_docs.rst#_snippet_14\n\nLANGUAGE: text\nCODE:\n```\ngit push origin doc-tut\n```\n\n----------------------------------------\n\nTITLE: Checking out main Branch (Bash)\nDESCRIPTION: Switches back to the 'main' branch in git.  This command allows you to work on the main branch again.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/contributing_code.rst#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n$ git checkout main\n```\n\n----------------------------------------\n\nTITLE: Defining the do_command Function (Python)\nDESCRIPTION: This code snippet shows how to define the do_command function, which is executed when the subcommand is invoked. It receives the parsed arguments and can access the DICOM dataset and element values from the filespec argument. The function then performs the desired actions based on the arguments.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/guides/cli/cli_dev.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef do_command(args):\n    for ds, element_val in args.filespec:\n        if args.yourarg:\n            # Do something...\n\n        # work with the dataset ds or element as needed...\n```\n\n----------------------------------------\n\nTITLE: Cloning pydicom Repository with Git\nDESCRIPTION: This command clones the pydicom repository from GitHub to the user's local machine, allowing them to work on the documentation locally. It's a prerequisite for contributing.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/contributing_docs.rst#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ngit clone https://github.com/YourUsername/pydicom.git\n```\n\n----------------------------------------\n\nTITLE: Codify Command Help Message\nDESCRIPTION: This shows the help message for the `pydicom codify` command, detailing available command-line options such as excluding large binary data, including private data elements, and specifying the save-as filename.  It describes positional arguments filespec and outfile.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/guides/cli/cli_codify.rst#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npydicom help codify\n\nusage: pydicom codify [-h] [-e EXCLUDE_SIZE] [-p] [-s SAVE_AS] filespec [outfile]\n\nRead a DICOM file and produce the *pydicom* (Python) code which can create that file\n\npositional arguments:\nfilespec           File specification, in format [pydicom::]filename[::element]. If `pydicom::` prefix is present,\n                        then use the pydicom test file with that name. If `element` is given, use only that data element\n                        within the file. Examples: path/to/your_file.dcm, your_file.dcm::StudyDate,\n                        your_file.dcm::(0001,0001), pydicom::rtplan.dcm::BeamSequence[0],\n                        yourplan.dcm::BeamSequence[0].BeamNumber, pydicom::rtplan.dcm::(300A,00B0)[0].(300A,00B6)\noutfile               Filename to write python code to. If not specified, code is written to\n                            stdout\n\noptional arguments:\n-h, --help            show this help message and exit\n-e EXCLUDE_SIZE, --exclude-size EXCLUDE_SIZE\n                            Exclude binary data larger than specified (bytes). Default is 100 bytes\n-p, --include-private\n                            Include private data elements (default is to exclude them)\n-s SAVE_AS, --save-as SAVE_AS\n                            Specify the filename for ds.save_as(save_filename); otherwise the input name\n                            + '_from_codify' will be used\n\nBinary data (e.g. pixels) larger than --exclude-size (default 100 bytes) is not included. A dummy\nline with a syntax error is produced. Private data elements are not included by default.\n```\n\n----------------------------------------\n\nTITLE: Deleting Local Branch (Bash)\nDESCRIPTION: Deletes the local branch named 'new-uid'. This command is used to clean up local branches after they have been merged or are no longer needed.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/contributing_code.rst#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n$ git branch -d new-uid\n```\n\n----------------------------------------\n\nTITLE: Downloading Test Data Files in pydicom\nDESCRIPTION: These functions are used to download test data files within the pydicom library.  `pydicom.data.get_testdata_files` downloads all test data files and returns their paths. `pydicom.data.get_testdata_file` downloads a specific test data file and returns its path; the filename should be given as a parameter.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/release_notes/v2.1.0.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npydicom.data.get_testdata_files\n```\n\nLANGUAGE: python\nCODE:\n```\npydicom.data.get_testdata_file(\"RG1_UNCI.dcm\")\n```\n\n----------------------------------------\n\nTITLE: Switching to the Main Branch\nDESCRIPTION: This command switches back to the `main` branch in the local Git repository.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/contributing_docs.rst#_snippet_15\n\nLANGUAGE: text\nCODE:\n```\ngit checkout main\n```\n\n----------------------------------------\n\nTITLE: Iterating Through Channel Definitions - Python\nDESCRIPTION: This snippet iterates through the *ChannelDefinitionSequence* within a multiplex group. It prints the *CodeMeaning* from the *ChannelSourceSequence* and *CodeMeaning* from *ChannelSensitivityUnitsSequence* (if present) for each channel.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/waveforms.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> for ii, channel in enumerate(multiplex.ChannelDefinitionSequence):\n...     source = channel.ChannelSourceSequence[0].CodeMeaning\n...     units = 'unitless'\n...     if 'ChannelSensitivity' in channel:  # Type 1C, may be absent\n...         units = channel.ChannelSensitivityUnitsSequence[0].CodeMeaning\n...     print(f\"Channel {ii + 1}: {source} ({units})\")\n...\nChannel 1: Lead I (Einthoven) (microvolt)\nChannel 2: Lead II (microvolt)\nChannel 3: Lead III (microvolt)\nChannel 4: Lead aVR (microvolt)\nChannel 5: Lead aVL (microvolt)\nChannel 6: Lead aVF (microvolt)\nChannel 7: Lead V1 (microvolt)\nChannel 8: Lead V2 (microvolt)\nChannel 9: Lead V3 (microvolt)\nChannel 10: Lead V4 (microvolt)\nChannel 11: Lead V5 (microvolt)\nChannel 12: Lead V6 (microvolt)\n```\n\n----------------------------------------\n\nTITLE: Deleting a Local Git Branch\nDESCRIPTION: This command deletes the local copy of the specified Git branch (`doc-tut`).\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/contributing_docs.rst#_snippet_16\n\nLANGUAGE: text\nCODE:\n```\ngit branch -d doc-tut\n```\n\n----------------------------------------\n\nTITLE: BaseTag equality comparison in Pydicom\nDESCRIPTION: Shows how to compare BaseTag instances for equality.  All tags are equal, demonstrating the comparison of tag objects.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/guides/user/base_element.rst#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n>>> t1==t2, t1==t3, t1==t4\n(True, True, True)\n```\n\n----------------------------------------\n\nTITLE: Previewing Documentation with Python HTTP Server\nDESCRIPTION: Navigates to the '_build/html' directory and starts a simple HTTP server using Python's built-in `http.server` module on port 9999. This allows previewing the generated HTML documentation in a web browser.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncd doc/_build/html\npython -m http.server 9999\n```\n\n----------------------------------------\n\nTITLE: Install Pillow using pip\nDESCRIPTION: Install Pillow using pip. Pillow can handle the decompression of some JPEG and JPEG 2000 images. Make sure that libjpeg and openjpeg libraries are installed beforehand.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/installation.rst#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\npip install pillow\n```\n\n----------------------------------------\n\nTITLE: Install pydicom from wheel file\nDESCRIPTION: Install pydicom from a downloaded wheel file. Replace `pydicom-2.0.0-py3-none-any.whl` with the actual filename of the downloaded wheel file.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/installation.rst#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npip install pydicom-2.0.0-py3-none-any.whl\n```\n\n----------------------------------------\n\nTITLE: Displaying Changes (Bash)\nDESCRIPTION: Displays the difference between the staged changes and the initial version. This command allows you to review all the changes before committing.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/contributing_code.rst#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ git diff --cached\n```\n\n----------------------------------------\n\nTITLE: Committing Changes (Bash)\nDESCRIPTION: Commits the staged changes with a message, opening a text editor to add the message.\nSOURCE: https://github.com/pydicom/pydicom/blob/main/doc/tutorials/contributing_code.rst#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ git commit\n```"
  }
]