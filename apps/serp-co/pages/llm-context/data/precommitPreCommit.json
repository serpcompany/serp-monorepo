[
  {
    "owner": "pre-commit",
    "repo": "pre-commit",
    "content": "TITLE: Installing pre-commit Hooks Python\nDESCRIPTION: Installs pre-commit hooks after activating the virtual environment.  This command sets up the hooks in the git repository, allowing them to run on various git actions like commit or push.\nSOURCE: https://github.com/pre-commit/pre-commit/blob/main/CONTRIBUTING.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\npre-commit install\n```\n\n----------------------------------------\n\nTITLE: Activating Virtual Environment Python\nDESCRIPTION: Activates the virtual environment created by tox. Requires tox>=3.13.  The command changes the current working directory to the virtual environment, which allows `pre-commit` commands to utilize the correct dependencies.\nSOURCE: https://github.com/pre-commit/pre-commit/blob/main/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n. venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Running All Tests Python\nDESCRIPTION: Runs all tests using pytest or tox.  When using tox the tests are run with the specified python interpreter version.  The command will execute all available tests in the tests directory.\nSOURCE: https://github.com/pre-commit/pre-commit/blob/main/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ntox -e py37\n```\n\nLANGUAGE: python\nCODE:\n```\npytest tests\n```\n\n----------------------------------------\n\nTITLE: Running Specific Test Python\nDESCRIPTION: Runs a specific test using pytest within the activated environment. Requires pytest and the pre-commit package installed in the activated virtual environment. The `-k` option allows filtering tests by name.\nSOURCE: https://github.com/pre-commit/pre-commit/blob/main/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npytest tests -k test_the_name_of_your_test\n```\n\n----------------------------------------\n\nTITLE: Listing Python Development Dependencies\nDESCRIPTION: This configuration lists Python packages required for development and testing within the pre-commit project. It includes 'covdefaults' and 'coverage' for code coverage analysis, 'pytest' and 'pytest-env' for running tests, 'distlib' likely for packaging or distribution tasks, and 're-assert' possibly for enhanced test assertions. A minimum version constraint (>=2.2) is specified for 'covdefaults'.\nSOURCE: https://github.com/pre-commit/pre-commit/blob/main/requirements-dev.txt#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncovdefaults>=2.2\ncoverage\ndistlib\npytest\npytest-env\nre-assert\n```\n\n----------------------------------------\n\nTITLE: Migrating Configuration pre-commit\nDESCRIPTION: This describes how to migrate the configuration file format for pre-commit. The command `pre-commit migrate-config` is used to convert the `.pre-commit-config.yaml` file to a new format, and updates references from the old cache path to the new one.\nSOURCE: https://github.com/pre-commit/pre-commit/blob/main/CHANGELOG.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npre-commit migrate-config\n```"
  }
]