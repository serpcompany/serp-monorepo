[
  {
    "owner": "sidekiq",
    "repo": "sidekiq",
    "content": "TITLE: Scheduling Sidekiq Jobs for Future Execution in Ruby\nDESCRIPTION: Examples of using Sidekiq's scheduled job API with perform_in and perform_at methods. These methods allow scheduling jobs to run at specific times in the future.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/Changes.md#2025-04-14_snippet_45\n\nLANGUAGE: ruby\nCODE:\n```\nSomeWorker.perform_in(5.days, 'bob', 13)\nSomeWorker.perform_at(5.days.from_now, 'bob', 13)\n```\n\n----------------------------------------\n\nTITLE: Configuring Retries Exhausted Callback in Sidekiq Workers\nDESCRIPTION: Example of defining a callback that executes when a job has exhausted all retry attempts, which logs error information about the failed job.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/Changes.md#2025-04-14_snippet_39\n\nLANGUAGE: ruby\nCODE:\n```\nclass MyWorker\n  include Sidekiq::Worker\n  sidekiq_retries_exhausted do |msg|\n    Rails.logger.error \"Failed to process #{msg['class']} with args: #{msg['args']}\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Installing Sidekiq via Bundler\nDESCRIPTION: Command to add Sidekiq to a Ruby project using Bundler package manager. This is the recommended installation method for Ruby applications.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/README.md#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nbundle add sidekiq\n```\n\n----------------------------------------\n\nTITLE: Configuring ActiveJob with Sidekiq Options in Ruby\nDESCRIPTION: Demonstrates how to configure Sidekiq options directly in ActiveJob classes using sidekiq_options. Shows setting queue name, retry attempts, and backtrace size for jobs.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/docs/6.0-Upgrade.md#2025-04-14_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nclass MyJob < ActiveJob::Base\n  queue_as :myqueue\n  sidekiq_options retry: 10, backtrace: 20\n  def perform(...)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Performing Bulk Job Operations in Sidekiq\nDESCRIPTION: Example of using perform_bulk to enqueue multiple jobs simultaneously with different arguments.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/Changes.md#2025-04-14_snippet_15\n\nLANGUAGE: ruby\nCODE:\n```\nMyJob.perform_bulk([[1], [2], [3]])\n```\n\n----------------------------------------\n\nTITLE: Pausing Sidekiq Queues in Ruby\nDESCRIPTION: API for pausing and unpausing Sidekiq reliable queues. Allows controlling job processing by pausing specific queues with a polling interval of 10 seconds.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/Pro-Changes.md#2025-04-14_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nq = Sidekiq::Queue.new(\"critical\")\nq.pause!\nq.paused? # => true\nq.unpause!\n```\n\n----------------------------------------\n\nTITLE: Enumerating Dead Batches in Sidekiq Pro 4.0\nDESCRIPTION: This code snippet demonstrates how to iterate through dead batches and access their associated dead jobs using the new API in Sidekiq Pro 4.0. It allows developers to identify and potentially fix issues with failed batch jobs.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/docs/Pro-4.0-Upgrade.md#2025-04-14_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nSidekiq::Batch::DeadSet.new.each do |status|\n  status.dead? # => true\n  status.dead_jobs # => [...]\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing an Iterable Job in Sidekiq\nDESCRIPTION: Example of creating an iterable job using Sidekiq::IterableJob, which provides support for long-running interruptible jobs introduced in 7.3.0.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/Changes.md#2025-04-14_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nclass ProcessArrayJob\n  include Sidekiq::IterableJob\n  def build_enumerator(*args, **kwargs)\n    array_enumerator(args, **kwargs)\n  end\n  def each_iteration(arg)\n    puts arg\n  end\nend\nProcessArrayJob.perform_async(1, 2, 3)\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Connection in Sidekiq 7.0 (Ruby)\nDESCRIPTION: This snippet illustrates how to configure Redis connections in Sidekiq 7.0. Instead of passing raw ConnectionPools, Sidekiq now requires a configuration hash with connection details, allowing it to automatically tune the pool size based on concurrency settings.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/docs/7.0-API-Migration.md#2025-04-14_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# broken, can't pass connection pools directly anymore\nPOOL1 = ConnectionPool.new(size: 5) { Redis.new(ENV['MY_REDIS_URL']) }\nSidekiq.configure_server do |cfg|\n  cfg.redis = POOL1\nend\n\n# fixed\nSidekiq.configure_server do |cfg|\n  cfg.redis = { url: ENV['MY_REDIS_URL'] }\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Job Info Rows to Sidekiq Web UI in Ruby\nDESCRIPTION: Example of extending the Sidekiq Web UI job detail pages with custom rows and links. This code shows how to add an account link to job details, including proper HTML escaping to prevent XSS.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/Changes.md#2025-04-14_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\nSidekiq::Web.custom_job_info_rows << AddAccountLink.new\n\nclass AddAccountLink\n  include CGI::Util\n  def add_pair(job)\n    # yield a (name, value) pair\n    # You can include HTML tags and CSS, Sidekiq does not do any\n    # escaping so beware user data injection! Note how we use CGI's\n    # `h` escape helper.\n    aid = job[\"account_id\"]\n    yield \"Account\", \"<a href='/accounts/#{h aid}'>#{h aid}</a>\" if aid\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Shardable Client with Custom Redis Connection\nDESCRIPTION: This example demonstrates how to create a Sidekiq::Client instance with a custom Redis connection pool, allowing for sharding jobs across multiple Redis instances in large Sidekiq installations.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/Changes.md#2025-04-14_snippet_34\n\nLANGUAGE: ruby\nCODE:\n```\nclient = Sidekiq::Client.new(ConnectionPool.new { Redis.new })\nclient.push(...)\n```\n\n----------------------------------------\n\nTITLE: Configuring Sidekiq Capsules in Ruby\nDESCRIPTION: This snippet demonstrates how to configure Sidekiq capsules, which execute jobs from specific queues. It shows how to edit the default capsule settings and define a new capsule for thread-unsafe jobs that runs with a single thread.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/docs/7.0-Upgrade.md#2025-04-14_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nSidekiq.configure_server do |config|\n  # edits the default capsule\n  config.queues = %w[critical default low]\n  config.concurrency = 5\n\n  # define a new capsule which processes jobs from the `unsafe` queue one at a time\n  config.capsule(\"unsafe\") do |cap|\n    cap.concurrency = 1\n    cap.queues = %w[unsafe]\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Filtering Jobs with SCAN in Sidekiq Pro\nDESCRIPTION: Example of using Redis SCAN to efficiently filter and process jobs in Sidekiq's sorted sets. This code finds and deletes all retry jobs containing a specific substring, which is faster than standard iteration for large sets.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/Pro-Changes.md#2025-04-14_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nSidekiq::RetrySet.new.scan(\"Warehouse::OrderShip\") do |job|\n  job.delete\nend\n```\n\n----------------------------------------\n\nTITLE: Upgrading to Sidekiq 8.x in Ruby\nDESCRIPTION: This code snippet demonstrates how to update the Sidekiq gem version in a Ruby project's Gemfile to upgrade to Sidekiq 8.x. This is the final step in the upgrade process after fixing any deprecation warnings from the 7.x version.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/docs/8.0-Upgrade.md#2025-04-14_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\ngem 'sidekiq', '< 9'\n```\n\n----------------------------------------\n\nTITLE: Remote Control: Quieting Sidekiq Processes via Rake Task\nDESCRIPTION: This snippet shows how to create a rake task that uses Sidekiq's remote control feature to quiet all running Sidekiq processes. This is useful for deployments, especially on platforms like JRuby or Heroku that don't support the USR1 signal.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/Changes.md#2025-04-14_snippet_31\n\nLANGUAGE: ruby\nCODE:\n```\nnamespace :sidekiq do\n  task :quiet => :environment do\n    Sidekiq::ProcessSet.new.each(&:quiet!)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Sidekiq Capsule\nDESCRIPTION: Example of creating and configuring a new Capsule with custom concurrency and queue settings within a server configuration block.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/docs/capsule.md#2025-04-14_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nSidekiq.configure_server do |config|\n  config.capsule(\"single-threaded\") do |cap|\n    cap.concurrency = 1\n    cap.queues = %w[single] # to specify weights: %w[important,10 mailers,7]\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Log Formatter in Sidekiq 7.0 (Ruby)\nDESCRIPTION: This snippet shows how to set a custom log formatter in Sidekiq 7.0. The formatter is now part of the new logger API and should be set on the logger object within the server configuration block.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/docs/7.0-API-Migration.md#2025-04-14_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# broken\nSidekiq.configure_server do |cfg|\n  cfg.log_formatter = ...\nend\n\n# fixed\nSidekiq.configure_server do |cfg|\n  cfg.logger.formatter = ...\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Up Global Error Handlers\nDESCRIPTION: This snippet shows how to configure global error handlers in Sidekiq that will catch and process exceptions occurring anywhere within the Sidekiq process, not just within middleware.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/Changes.md#2025-04-14_snippet_33\n\nLANGUAGE: ruby\nCODE:\n```\nSidekiq.configure_server do |config|\n  config.error_handlers << proc {|ex,ctx| ... }\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Retries Exhausted Handler in Sidekiq\nDESCRIPTION: Ruby code to define a default global handler for when retries are exhausted in Sidekiq. This is used to perform actions when a job permanently fails.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/Changes.md#2025-04-14_snippet_26\n\nLANGUAGE: ruby\nCODE:\n```\nSidekiq.configure_server do |config|\n  config.default_retries_exhausted = -> (job, ex) do\n    Sidekiq.logger.info \"#{job['class']} job is now dead\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Cancelling Iterable Jobs with Sidekiq::Client\nDESCRIPTION: Example demonstrating how to cancel iterable jobs using Sidekiq::Client#cancel! method introduced in 7.3.3.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/Changes.md#2025-04-14_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nc = Sidekiq::Client.new\njid = c.push(\"class\" => SomeJob, \"args\" => [123])\nc.cancel!(jid) # => true\n```\n\n----------------------------------------\n\nTITLE: Configuring DogStatsD in Sidekiq Pro 7.0\nDESCRIPTION: Shows the comparison between the old and new ways to configure DogStatsD integration in Sidekiq Pro 7.0. The old method used a direct assignment to Sidekiq::Pro.dogstatsd, while the new method uses the configure_server block.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/docs/Pro-7.0-Upgrade.md#2025-04-14_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nSidekiq::Pro.dogstatsd = -> { Datadog::Statsd.new(\"localhost\", 8125) } # old way\n\nSidekiq.configure_server do |config|\n  config.dogstatsd = -> { Datadog::Statsd.new(\"localhost\", 8125) } # new way\nend\n```\n\n----------------------------------------\n\nTITLE: Modifying Batches During Processing in Ruby\nDESCRIPTION: Example of how to add additional jobs to an existing batch from within a worker. This demonstrates the mutable batch feature where a job can modify its own batch at runtime.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/Pro-Changes.md#2025-04-14_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\ndef perform(...)\n  batch = Sidekiq::Batch.new(bid) # instantiate batch associated with this job\n  batch.jobs do\n    SomeWorker.perform_async # add another job\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Retry Intervals Based on Exception Type\nDESCRIPTION: Code showing how to customize retry intervals based on the type of exception that caused the failure, allowing different retry strategies for different errors.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/Changes.md#2025-04-14_snippet_30\n\nLANGUAGE: ruby\nCODE:\n```\n  sidekiq_retry_in do |count, ex|\n    case ex\n    when RuntimeError\n      5 * count\n    else\n      10 * count\n    end\n  end\n```\n\n----------------------------------------\n\nTITLE: Implementing Per-Worker Retries Exhausted Handler in Sidekiq\nDESCRIPTION: Ruby code showing how to implement a retries_exhausted handler for a specific worker class, which receives the job and the exception that caused the final failure.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/Changes.md#2025-04-14_snippet_27\n\nLANGUAGE: ruby\nCODE:\n```\nclass MyWorker\n  include Sidekiq::Worker\n  sidekiq_retries_exhausted do |job, exception|\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Sidekiq Logger Formatter in Ruby\nDESCRIPTION: Shows how to configure custom log formatters in Sidekiq server configuration. Demonstrates setting both custom and built-in JSON formatters.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/docs/6.0-Upgrade.md#2025-04-14_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nSidekiq.configure_server do |config|\n  config.log_formatter = AcmeCorp::PlainLogFormatter.new\n  # config.log_formatter = Sidekiq::Logger::Formatters::JSON.new\nend\n```\n\n----------------------------------------\n\nTITLE: Enabling Transaction-Aware Sidekiq Job Queue in Ruby\nDESCRIPTION: Code to enable Sidekiq's transaction-aware client, which ensures jobs are only pushed to Redis after a database transaction commits. Requires the after_commit_everywhere gem.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/Changes.md#2025-04-14_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\nSidekiq.transactional_push!\n```\n\n----------------------------------------\n\nTITLE: Configuring Process Lifecycle Event Hooks\nDESCRIPTION: This code demonstrates how to register a block of code to run at specific points in the Sidekiq process lifecycle. The example shows registering a startup hook, but shutdown and quiet hooks can be registered similarly.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/Changes.md#2025-04-14_snippet_32\n\nLANGUAGE: ruby\nCODE:\n```\nSidekiq.configure_server do |config|\n  config.on(:startup) do\n    # do something\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using Sidekiq.via API for Targeting Shards in Ruby\nDESCRIPTION: Example of using the Sidekiq.via API to target specific Redis shards when executing code. This allows for operations to be performed on different Redis databases or connections.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/Pro-Changes.md#2025-04-14_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nSHARD1 = ConnectionPool.new { Redis.new(db: 0) }\nSHARD2 = ConnectionPool.new { Redis.new(db: 1) }\nSidekiq.via(SHARD2) do\n  Sidekiq::Queue.all.sum(&:size)\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Statsd for Sidekiq Pro in Ruby\nDESCRIPTION: This snippet demonstrates how to configure Statsd for Sidekiq Pro using a generic Statsd client. It sets up the connection to the local Statsd server.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/Pro-Changes.md#2025-04-14_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nSidekiq::Pro.statsd = ->{ ::Statsd.new(\"127.0.0.1\", 8125) }\n```\n\n----------------------------------------\n\nTITLE: Implementing Job Retry Window with Sidekiq Options in Ruby\nDESCRIPTION: Shows how to set a time-based retry window for Sidekiq jobs using the sidekiq_options retry_for parameter. This allows jobs to only retry within a specified time period.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/Changes.md#2025-04-14_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nsidekiq_options retry_for: 48.hours\n```\n\n----------------------------------------\n\nTITLE: Using Sidekiq::Job Alias for Worker in Ruby\nDESCRIPTION: Demonstrates how to use the new `Sidekiq::Job` alias instead of `Sidekiq::Worker` to define background jobs in Sidekiq. The alias provides more industry-standard terminology while maintaining the same functionality.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/Changes.md#2025-04-14_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\nclass MyJob\n  include Sidekiq::Job\n  sidekiq_options ...\n  def perform(args)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating a Leaky Bucket Rate Limiter\nDESCRIPTION: Example of creating a leaky bucket rate limiter that allows 60 calls per minute with bursting capability.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/Ent-Changes.md#2025-04-14_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nleaker = Sidekiq::Limiter.leaky(\"shopify\", 60, :minute)\nleaker.within_limit do\n  ...\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Datadog::Statsd for Sidekiq Pro in Ruby\nDESCRIPTION: This snippet shows how to set up Datadog::Statsd as the recommended Statsd client for Sidekiq Pro. It configures the connection to the metrics server.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/Pro-Changes.md#2025-04-14_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nSidekiq::Pro.dogstatsd = ->{ Datadog::Statsd.new(\"metrics.example.com\", 8125) }\n```\n\n----------------------------------------\n\nTITLE: Configuring Sidekiq Web UI Routes in Rails\nDESCRIPTION: Example of mounting Sidekiq Web UI within Rails routes for session management and CSRF protection.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/Changes.md#2025-04-14_snippet_16\n\nLANGUAGE: ruby\nCODE:\n```\nRails.application.routes.draw do\n  mount Sidekiq::Web => \"/sidekiq\"\n  ....\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Redis Value with Sidekiq Connection Pool in Ruby\nDESCRIPTION: Example of properly using the Sidekiq Redis connection pool to set a Redis key with expiration. This is considered a 'good' practice as it properly uses the Redis connection pool and returns it when done.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/Changes.md#2025-04-14_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nSidekiq.redis { |c| c.set(\"key\", \"value\", \"nx\", \"ex\", 15) }\n```\n\n----------------------------------------\n\nTITLE: Setting Dynamic Worker Options with ActiveJob-Compatible API\nDESCRIPTION: Example of using the set() method to dynamically override worker options like queue and retry settings, which provides compatibility with ActiveJob's API.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/Changes.md#2025-04-14_snippet_28\n\nLANGUAGE: ruby\nCODE:\n```\nclass MyWorker\n  include Sidekiq::Worker\n  sidekiq_options queue: 'default', retry: true\n\n  def perform(*args)\n    # do something\n  end\nend\n\nMyWorker.set(queue: 'high', retry: false).perform_async(1)\n```\n\n----------------------------------------\n\nTITLE: New Sidekiq Web Configuration (8.0+)\nDESCRIPTION: Demonstrates the new configuration block syntax for Sidekiq::Web, allowing registration of extensions, middleware, and UI customizations.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/docs/webui.md#2025-04-14_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"sidekiq/web\"\nSidekiq::Web.configure do |config|\n  config.register(MyExtension, name: \"myext\", tab: \"TabName\", index: \"tabpage/\")\n  config.use Some::Rack::Middleware\n  config.app_url \"https://acmecorp.com\" # Adds \"Back to App\" button in the UI\nend\n```\n\n----------------------------------------\n\nTITLE: Testing Sidekiq Queue Contents Using Queues API\nDESCRIPTION: Example showing the Sidekiq::Queues testing API for asserting queue contents. This makes it easier to verify that jobs are being enqueued properly.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/Changes.md#2025-04-14_snippet_29\n\nLANGUAGE: ruby\nCODE:\n```\nassert_equal 0, Sidekiq::Queues[\"default\"].size\nHardWorker.perform_async(\"log\")\nassert_equal 1, Sidekiq::Queues[\"default\"].size\nassert_equal \"log\", Sidekiq::Queues[\"default\"].first['args'][0]\nSidekiq::Queues.clear_all\n```\n\n----------------------------------------\n\nTITLE: Updating Logger Configuration in Sidekiq 7.0 (Ruby)\nDESCRIPTION: This snippet demonstrates how to properly set the logger in Sidekiq 7.0. The logger is no longer a top-level attribute and must be configured within the server configuration block.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/docs/7.0-API-Migration.md#2025-04-14_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# broken, logger is no longer a top-level attribute\nSidekiq.logger = ...\n\n# fixed\nSidekiq.configure_server do |cfg|\n  cfg.logger = ...\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring ActiveJob with Sidekiq Options\nDESCRIPTION: Example of setting Sidekiq-specific options in an ActiveJob class for retry and backtrace configuration.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/Changes.md#2025-04-14_snippet_19\n\nLANGUAGE: ruby\nCODE:\n```\nclass MyJob < ActiveJob::Base\n  queue_as :myqueue\n  sidekiq_options retry: 10, backtrace: 20\n  def perform(...)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Updated Client Middleware Implementation in Sidekiq 7.0 (Ruby)\nDESCRIPTION: Shows the new pattern for implementing client middleware in Sidekiq 7.0. The key change is including the Sidekiq::ClientMiddleware module in the middleware class. The call method signature remains the same.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/docs/middleware.md#2025-04-14_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nclass Client\n  include Sidekiq::ClientMiddleware\n\n  def initialize(optional_args)\n    @args = optional_args\n  end\n  # @see https://github.com/sidekiq/sidekiq/wiki/Middleware\n  def call(job_class_or_string, job, queue, redis_pool)\n    yield\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Existing Server Middleware Implementation in Sidekiq (Ruby)\nDESCRIPTION: Demonstrates the current pattern for implementing server middleware in Sidekiq before version 7.0. Server middleware runs around job execution and can access Redis and the logger through the global Sidekiq module.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/docs/middleware.md#2025-04-14_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nclass Server\n  def initialize(optional_args)\n    @args = optional_args\n  end\n  def call(worker, job, queue)\n    Sidekiq.redis {|c| c.do_something }\n    Sidekiq.logger.info { \"Some message\" }\n    yield\n  end\nend\n\nSidekiq.configure_server do |config|\n  config.server_middleware do |chain|\n    chain.add Server, optional_args\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Sentinels in Sidekiq 7.0 (Ruby)\nDESCRIPTION: This snippet shows how to configure Redis sentinels in Sidekiq 7.0. The configuration now requires a 'name' keyword argument in addition to the URL and sentinel details. This change is due to Sidekiq's use of the new redis-client gem for connections.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/docs/7.0-API-Migration.md#2025-04-14_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# broken - missing name keyword argument\nSidekiq.configure_server do |cfg|\n  cfg.redis = {\n    url: \"redis://myredis/0\",\n    sentinels: [\n      {host: \"host1\", port: 26379},\n      {host: \"host2\", port: 26379},\n      {host: \"host3\", port: 26379}\n    ]\n  }\nend\n\n# fixed - don't forget to fix connection settings for both client and server\nSidekiq.configure_server do |cfg|\n  cfg.redis = {\n    url: \"redis://myredis/0\",\n    name: \"primary\",\n    sentinels: [\n      {host: \"host1\", port: 26379},\n      {host: \"host2\", port: 26379},\n      {host: \"host3\", port: 26379}\n    ]\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Updated Server Middleware Implementation in Sidekiq 7.0 (Ruby)\nDESCRIPTION: Demonstrates the new pattern for implementing server middleware in Sidekiq 7.0. The middleware must include the Sidekiq::ServerMiddleware module, which provides direct access to redis and logger without needing to use the global Sidekiq module.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/docs/middleware.md#2025-04-14_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nclass Server\n  include Sidekiq::ServerMiddleware\n\n  def initialize(optional_args)\n    @args = optional_args\n  end\n  \n  # @see https://github.com/sidekiq/sidekiq/wiki/Middleware\n  def call(job_instance, job_payload, queue)\n    # note we no longer need to use the global Sidekiq module\n    # to access Redis and the logger\n    redis {|c| c.do_something }\n    logger.info { \"Some message\" }\n    yield\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Sidekiq Component Implementation\nDESCRIPTION: Example implementation of a Sidekiq::Component showing the transition from global method calls to component-based resource access.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/docs/capsule.md#2025-04-14_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Sidekiq::Component\n  def config\n    @config\n  end\n\n  def redis(&block)\n    config.redis(&block)\n  end\n\n  def logger\n    config.logger\n  end\n\n  def handle_exception(ex, ctx)\n    # avoids calling `Sidekiq.error_handlers...`\n    config.handle_exception(ex, ctx)\n  end\nend\n\nclass Sidekiq::Processor\n  include Sidekiq::Component\n\n  def initialize(capsule)\n    @config = capsule\n  end\n\n  def ...\n    # old\n    Sidekiq.redis {|c| ... }\n    Sidekiq.logger.info \"Hello world!\"\n\n    # new\n    redis {|c| ... }\n    logger.info \"Hello world!\"\n  rescue => ex\n    handle_exception(ex, ...)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Cleaning Redis Data for Sidekiq Processes\nDESCRIPTION: Script to find and expire Redis keys for Sidekiq processes and workers, preventing data leaks when a Sidekiq process crashes.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/Changes.md#2025-04-14_snippet_24\n\nLANGUAGE: ruby\nCODE:\n```\n# uncomment if you need a namespace\n#require 'redis-namespace'\n#r = Redis::Namespace.new(\"foo\", r)\nr.smembers(\"processes\").each do |pro|\n  r.expire(pro, 60)\n  r.expire(\"#{pro}:workers\", 60)\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Worker Options with Sidekiq in Ruby\nDESCRIPTION: Examples of configuring Sidekiq worker options including backtrace and timeout settings. These options control error reporting and execution time limits for workers.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/Changes.md#2025-04-14_snippet_42\n\nLANGUAGE: ruby\nCODE:\n```\nclass Worker\n  include Sidekiq::Worker\n  sidekiq_options :backtrace => [true || 10]\nend\n```\n\n----------------------------------------\n\nTITLE: Mounting Multiple Sidekiq Web UIs in Ruby\nDESCRIPTION: Example of how to mount multiple Sidekiq Pro Web UIs in the same process for different Redis shards. This allows monitoring multiple Redis instances from a single application.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/Pro-Changes.md#2025-04-14_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nPOOL1 = ConnectionPool.new { Redis.new(:url => \"redis://localhost:6379/0\") }\nPOOL2 = ConnectionPool.new { Redis.new(:url => \"redis://localhost:6378/0\") }\n\nmount Sidekiq::Pro::Web => '/sidekiq' # default\nmount Sidekiq::Pro::Web.with(redis_pool: POOL1), at: '/sidekiq1', as: 'sidekiq1' # shard1\nmount Sidekiq::Pro::Web.with(redis_pool: POOL2), at: '/sidekiq2', as: 'sidekiq2' # shard2\n```\n\n----------------------------------------\n\nTITLE: Configuring Embedded Sidekiq in Ruby\nDESCRIPTION: Code pattern for configuring Sidekiq's concurrency when running in embedded mode. This shows setting the concurrency value which controls how many Processor threads will be started.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/docs/internals.md#2025-04-14_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.concurrency = N\n```\n\n----------------------------------------\n\nTITLE: Scheduling Jobs with Sidekiq Delay Options in Ruby\nDESCRIPTION: Examples of using Sidekiq's delay API with various options for retries, timeouts, and delayed execution. These methods allow scheduling jobs with specific parameters for execution control.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/Changes.md#2025-04-14_snippet_40\n\nLANGUAGE: ruby\nCODE:\n```\nFoo.delay(:retry => 10).bar\nFoo.delay(:timeout => 10.seconds).bar\nFoo.delay_for(5.minutes, :timeout => 10.seconds).bar\n```\n\n----------------------------------------\n\nTITLE: Enabling Sidekiq Unique Jobs Middleware in Ruby\nDESCRIPTION: Configuration example showing how to re-enable the UniqueJobs middleware which was removed from the default middleware chain. The code configures both client and server middleware.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/Changes.md#2025-04-14_snippet_41\n\nLANGUAGE: ruby\nCODE:\n```\nSidekiq.configure_client do |config|\n  require 'sidekiq/middleware/client/unique_jobs'\n  config.client_middleware do |chain|\n    chain.add Sidekiq::Middleware::Client::UniqueJobs\n  end\nend\nSidekiq.configure_server do |config|\n  require 'sidekiq/middleware/server/unique_jobs'\n  config.server_middleware do |chain|\n    chain.add Sidekiq::Middleware::Server::UniqueJobs\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using on(:exit) Event Handler in Sidekiq\nDESCRIPTION: Example of using the on(:exit) event introduced in 8.0.2 to run code right before the Sidekiq process exits.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/Changes.md#2025-04-14_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\non(:exit)\n```\n\n----------------------------------------\n\nTITLE: Enabling Delayed Extensions in Sidekiq 5.0\nDESCRIPTION: Code to re-enable Sidekiq's Delayed Extensions (delay, delay_for, delay_until) which are no longer available by default in Sidekiq 5.0. Add this to your initializer to restore the previous behavior.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/docs/5.0-Upgrade.md#2025-04-14_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nSidekiq::Extensions.enable_delay!\n```\n\n----------------------------------------\n\nTITLE: Reading Configuration in Sidekiq 7.0 (Ruby)\nDESCRIPTION: This snippet demonstrates how to read configuration values in Sidekiq 7.0. Direct access to configuration values using square bracket notation is no longer supported. Instead, use the 'default_configuration' method to access configuration values.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/docs/7.0-API-Migration.md#2025-04-14_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nSidekiq.configure_server do |cfg|\n  cfg[:average_scheduled_poll_interval] = 5\nend\n\n# broken, can not read configuration directly anymore\nSidekiq[:average_scheduled_poll_interval] # NoMethodError: undefined method '[]' for Sidekiq:Module\n\n# fixed\nSidekiq.default_configuration[:average_scheduled_poll_interval] # 5\n```\n\n----------------------------------------\n\nTITLE: Adding Jobs to an Existing Batch in Ruby\nDESCRIPTION: Code example demonstrating how to modify a batch to add additional jobs at runtime. This allows for dynamic batch expansion based on runtime conditions.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/Pro-Changes.md#2025-04-14_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\nbatch = Sidekiq::Batch.new(bid)\nbatch.jobs do\n  # define more jobs here\nend\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Sidekiq Version in Ruby Gemfile\nDESCRIPTION: These snippets show how to specify Sidekiq version constraints in a Gemfile. The first example constrains to versions below 7, and the second constrains to versions below 8, useful for controlled upgrades between major versions.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/docs/7.0-Upgrade.md#2025-04-14_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\ngem 'sidekiq', '< 7'\n```\n\nLANGUAGE: ruby\nCODE:\n```\ngem 'sidekiq', '< 8'\n```\n\n----------------------------------------\n\nTITLE: Configuring Health Check Using Ruby API\nDESCRIPTION: Example of configuring a health check using Sidekiq's Ruby configuration API.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/Ent-Changes.md#2025-04-14_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.health_check(\"127.0.0.1:8111\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Batches in Sidekiq Pro 2.0\nDESCRIPTION: Example showing how to create nested batch jobs using the new nested batches feature. Parent batch callbacks are processed after all child batch callbacks complete successfully.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/docs/Pro-2.0-Upgrade.md#2025-04-14_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\na = Sidekiq::Batch.new\na.on(:success, SomeCallback)\na.jobs do\n  SomeWork.perform_async\n\n  b = Sidekiq::Batch.new\n  b.on(:success, MyCallback)\n  b.jobs do\n    OtherWork.perform_async\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Single-Threaded Queue Configuration\nDESCRIPTION: Example showing how to configure a Capsule for handling thread-unsafe queues with single thread concurrency.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/docs/capsule.md#2025-04-14_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# within your initializer\nSidekiq.configure_server do |config|\n  config.capsule(\"unsafe\") do |capsule|\n    capsule.queues = %w(thread_unsafe)\n    capsule.concurrency = 1\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Upgrading to Sidekiq Pro 4.x\nDESCRIPTION: This code snippet demonstrates how to update the gem dependency to upgrade to Sidekiq Pro 4.x. It should be used after upgrading to the latest 3.x version and addressing any deprecation warnings.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/docs/Pro-4.0-Upgrade.md#2025-04-14_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\ngem 'sidekiq-pro', '< 5'\n```\n\n----------------------------------------\n\nTITLE: Customizing Backoff for Rate Limiters in Sidekiq Enterprise\nDESCRIPTION: This snippet demonstrates how to customize the backoff behavior for a rate limiter by passing a Proc. The example creates a bucket limiter for 'stripe' with a custom backoff function that uses either the job's 'overrated' property or defaults to 5 seconds.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/docs/Ent-2.0-Upgrade.md#2025-04-14_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nlimiter = Sidekiq::Limiter.bucket(:stripe, 10, :second, backoff: ->(limiter, job) {\n  return job['overrated'] || 5 # wait for N seconds, where N is the number of\n                               # times we've failed the rate limit\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Retry Schedule in Sidekiq Workers\nDESCRIPTION: Example of customizing the retry interval for a Sidekiq worker using the sidekiq_retry_in method. This sets a progressive retry schedule based on the retry count.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/Changes.md#2025-04-14_snippet_38\n\nLANGUAGE: ruby\nCODE:\n```\nclass MyWorker\n  include Sidekiq::Worker\n  sidekiq_retry_in { |count| count * 2 }\nend\n```\n\n----------------------------------------\n\nTITLE: Specifying Sidekiq Pro 2.x Gem Version for Upgrade Path\nDESCRIPTION: This code shows how to specify the Sidekiq Pro gem version constraint to stay on the 2.x series during the first phase of the upgrade process. This allows fixing deprecation warnings before moving to 3.x.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/docs/Pro-3.0-Upgrade.md#2025-04-14_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\ngem 'sidekiq-pro', '< 3'\n```\n\n----------------------------------------\n\nTITLE: Configuring Reliable Features in Sidekiq Pro 2.0\nDESCRIPTION: Configuration examples for enabling reliable fetch and scheduler features in the server, and reliable push in the client.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/docs/Pro-2.0-Upgrade.md#2025-04-14_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nSidekiq.configure_server do |config|\n  config.reliable_fetch!\n  config.reliable_scheduler!\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nSidekiq::Client.reliable_push!\n```\n\n----------------------------------------\n\nTITLE: Using Sidekiq Testing API for Scheduled Jobs in Ruby\nDESCRIPTION: Example of using Sidekiq's testing API to verify scheduled jobs. The code shows how to assert that a job has been scheduled for future execution and verify its timing.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/Changes.md#2025-04-14_snippet_44\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'sidekiq/testing'\nDirectWorker.perform_in(10.seconds, 1, 2)\nassert_equal 1, DirectWorker.jobs.size\nassert_in_delta 10.seconds.from_now.to_f, DirectWorker.jobs.last['at'], 0.01\n```\n\n----------------------------------------\n\nTITLE: Enabling Super Fetch Algorithm for Sidekiq in Ruby\nDESCRIPTION: This code snippet shows how to enable the super_fetch algorithm in Sidekiq Pro. It's recommended to use this instead of the deprecated reliable_fetch algorithm.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/Pro-Changes.md#2025-04-14_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nSidekiq.configure_server do |config|\n  config.super_fetch!\nend\n```\n\n----------------------------------------\n\nTITLE: Specifying Sidekiq Pro 3.x Gem Version for Final Upgrade\nDESCRIPTION: This code shows how to specify the Sidekiq Pro gem version constraint to upgrade to the 3.x series after addressing deprecation warnings in the 2.x version. This is the final step in the upgrade process.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/docs/Pro-3.0-Upgrade.md#2025-04-14_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\ngem 'sidekiq-pro', '< 4'\n```\n\n----------------------------------------\n\nTITLE: Existing Client Middleware Implementation in Sidekiq (Ruby)\nDESCRIPTION: Shows the current pattern for implementing client middleware in Sidekiq before version the 7.0 update. Client middleware runs when pushing jobs to Redis and can modify job data before it's stored.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/docs/middleware.md#2025-04-14_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nclass Client\n  def initialize(optional_args)\n    @args = optional_args\n  end\n  def call(worker, job, queue, redis_pool)\n    yield\n  end\nend\n\nSidekiq.configure_client do |config|\n  config.client_middleware do |chain|\n    chain.add Client, optional_args\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Job Options to Bypass Dead Job Queue\nDESCRIPTION: This snippet demonstrates how to configure a Sidekiq job to either skip the Dead Job Queue entirely or go directly to the DJQ without retries.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/Changes.md#2025-04-14_snippet_36\n\nLANGUAGE: ruby\nCODE:\n```\nsidekiq_options :dead => false, :retry => 5\n```\n\n----------------------------------------\n\nTITLE: Setting Worker Timeout with Sidekiq in Ruby\nDESCRIPTION: Example of setting a timeout for a Sidekiq worker job. This configuration will kill a worker if it exceeds the specified execution time limit.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/Changes.md#2025-04-14_snippet_43\n\nLANGUAGE: ruby\nCODE:\n```\nclass HangingWorker\n  include Sidekiq::Worker\n  sidekiq_options :timeout => 600\n  def perform\n    # will be killed if it takes longer than 10 minutes\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Upgrading to Sidekiq 3.x in Ruby\nDESCRIPTION: Specifies the gem dependency to upgrade to the latest Sidekiq 3.x version before moving to 4.x. This step is part of the recommended upgrade process.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/docs/4.0-Upgrade.md#2025-04-14_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\ngem 'sidekiq', '< 4'\n```\n\n----------------------------------------\n\nTITLE: Configuring Rails Database Connection Pool in YAML\nDESCRIPTION: Sets the database connection pool size in Rails' database.yml configuration. It uses the RAILS_MAX_THREADS environment variable to dynamically set the pool size, allowing for easy scaling of database connections.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/Changes.md#2025-04-14_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\npool: <%= ENV['RAILS_MAX_THREADS'] || 5 %>\n```\n\n----------------------------------------\n\nTITLE: Using New Testing API with Sidekiq::Queues in Ruby\nDESCRIPTION: Demonstrates the new testing API in Sidekiq 4.0 based on the Sidekiq::Queues namespace. It shows how to make assertions about queue size, job arguments, and how to clear all queues.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/docs/4.0-Upgrade.md#2025-04-14_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nassert_equal 0, Sidekiq::Queues[\"default\"].size\nHardWorker.perform_async(\"log\")\nassert_equal 1, Sidekiq::Queues[\"default\"].size\nassert_equal \"log\", Sidekiq::Queues[\"default\"].first['args'][0]\nSidekiq::Queues.clear_all\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Connection Pool in YAML\nDESCRIPTION: This snippet shows how to configure the database connection pool size in a Rails application to match Sidekiq's concurrency. It uses an environment variable RAILS_MAX_THREADS to control the pool size, defaulting to 5.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/docs/7.0-Upgrade.md#2025-04-14_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config/database.yml\ndefault: &default\n  pool: <%= ENV.fetch(\"RAILS_MAX_THREADS\") { 5 } %>\n```\n\n----------------------------------------\n\nTITLE: Starting Sidekiq via Command Line in Ruby\nDESCRIPTION: When starting Sidekiq with 'bundle exec sidekiq', execution begins in bin/sidekiq which creates and runs a Sidekiq::CLI instance to handle configuration, application loading, and signal handling.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/docs/internals.md#2025-04-14_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nbundle exec sidekiq\n```\n\n----------------------------------------\n\nTITLE: Transitioning from Hash to Sidekiq::Work in WorkSet\nDESCRIPTION: Example showing the transition from direct hash access to using Sidekiq::Work type in WorkSet#each, introduced in 7.2.1.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/Changes.md#2025-04-14_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nwork[\"queue\"] # Old\nwork.queue # New\n```\n\n----------------------------------------\n\nTITLE: Configuring Error Handling in Sidekiq 3.0 (Ruby)\nDESCRIPTION: This snippet demonstrates how to configure error handling in Sidekiq 3.0 compared to previous versions. It shows the transition from using server middleware to using a global error handler.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/docs/3.0-Upgrade.md#2025-04-14_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nif Sidekiq::VERSION < '3'\n  # old behavior\n  Sidekiq.configure_server do |config|\n    config.server_middleware do |chain|\n      chain.add MyErrorService::Middleware\n    end\n  end\nelse\n  Sidekiq.configure_server do |config|\n    config.error_handlers << proc {|ex,context| MyErrorService.notify(ex, context) }\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Sidekiq::Middleware::Server::Statsd Options in Ruby\nDESCRIPTION: This snippet demonstrates how to configure options for Sidekiq::Middleware::Server::Statsd in an initializer. It sets up tags for worker class, queue, and tenant ID (if available).\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/Pro-Changes.md#2025-04-14_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# add to your initializer\nSidekiq::Middleware::Server::Statsd.options = ->(klass, job, q) do\n  {tags: [\"worker:#{klass}\", \"queue:#{q}\"]}.tap do |h|\n    h[:tags] << \"tenant:#{job['tenant_id']}\" if job[\"tenant_id\"]\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Legacy Global Sidekiq Methods Example\nDESCRIPTION: Example showing the old pattern of accessing Sidekiq's global methods for logging, Redis operations, and configuration.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/docs/capsule.md#2025-04-14_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nSidekiq.logger.info \"Hello world\"\nSidekiq.redis {|c| c.sadd(\"some_set\", \"new_member\") }\nSidekiq.configure_server {|config| config... }\n```\n\n----------------------------------------\n\nTITLE: Requiring Sidekiq Batch Web UI in Ruby\nDESCRIPTION: Code snippet showing how to manually include the Sidekiq Batch Web UI components in a web application. This is required since the Web UI became optional and must be explicitly included.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/Pro-Changes.md#2025-04-14_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'sidekiq/web'\nrequire 'sidekiq/batch/web'\nmount Sidekiq::Web => '/sidekiq'\n```\n\n----------------------------------------\n\nTITLE: Delayed Mailer Execution with Sidekiq in Ruby\nDESCRIPTION: Example of using Sidekiq's delay extensions with ActiveMailer to schedule an email to be sent in the future. This demonstrates integration with Rails mailers.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/Changes.md#2025-04-14_snippet_46\n\nLANGUAGE: ruby\nCODE:\n```\nUserMailer.delay_for(5.days).send_welcome_email(user.id)\n```\n\n----------------------------------------\n\nTITLE: Expiring Leaked Worker Data in Redis Using Bash\nDESCRIPTION: Bash script using redis-cli to find and expire leaked worker data in Redis, useful for cleaning up after Sidekiq process crashes.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/Changes.md#2025-04-14_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\n$ redis-cli keys  \"*:workers\" | while read LINE ; do TTL=`redis-cli expire \"$LINE\" 60`; echo \"$LINE\"; done;\n```\n\n----------------------------------------\n\nTITLE: Legacy Sidekiq Web Configuration (Pre-8.0)\nDESCRIPTION: Shows the old way of configuring Sidekiq::Web using global class methods, which was considered non-idiomatic.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/docs/webui.md#2025-04-14_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nSidekiq::Web.app_link \"https://acmecorp.com\"\nSidekiq::Web.register MyExtension\nSidekiq::Web.use Some::Rack::Middleware\n```\n\n----------------------------------------\n\nTITLE: Connecting to Redis for Sidekiq Busy Workers in Ruby\nDESCRIPTION: Creates a connection to a local Redis instance on the default port 6379 and database 0. This is likely used to test or demonstrate how Sidekiq manages lingering processes that should disappear from the Busy page after 60 seconds.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/Changes.md#2025-04-14_snippet_23\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'redis'\nr = Redis.new(url: \"redis://localhost:6379/0\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Sidekiq Current Attributes\nDESCRIPTION: Configuration for persisting CurrentAttributes in Sidekiq, setup in Rails initializer file.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/Changes.md#2025-04-14_snippet_14\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"sidekiq/middleware/current_attributes\"\nSidekiq::CurrentAttributes.persist(Myapp::Current)\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Lingering Processes in Redis using Ruby\nDESCRIPTION: A commented-out Ruby code snippet suggesting how to clean up lingering processes in Redis. This would need to be modified to connect to the specific Redis instance being used.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/Changes.md#2025-04-14_snippet_22\n\nLANGUAGE: ruby\nCODE:\n```\n# To clean up lingering processes, modify this as necessary to connect to your Redis.\n```\n\n----------------------------------------\n\nTITLE: Applying Dynamic Styles with JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to apply dynamic styles using data attributes, as a workaround for inline styles not being allowed in Sidekiq 8.0.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/examples/webui-ext/readme.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.querySelectorAll('.foobar').forEach(bar => { bar.style.width = bar.dataset.width + \"%\"})\n```\n\n----------------------------------------\n\nTITLE: Configuring Memory Limits for Multi-Process Mode in Sidekiq\nDESCRIPTION: Command to limit child processes to a specific memory size (1GB in this example) when using Sidekiq Enterprise's multi-process mode. This enables memory monitoring and automatic restarts of processes that grow too large.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/Ent-Changes.md#2025-04-14_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nMAXMEM_KB=1048576 COUNT=2 bundle exec sidekiqswarm ...\n```\n\n----------------------------------------\n\nTITLE: Using Connection Pool with Block Syntax for Sidekiq Client\nDESCRIPTION: This snippet shows how to use the block syntax with Sidekiq::Client.via to send multiple jobs to a specific Redis connection, useful for sharding in large installations.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/Changes.md#2025-04-14_snippet_35\n\nLANGUAGE: ruby\nCODE:\n```\nSidekiq::Client.via(ConnectionPool.new { Redis.new }) do\n  FooWorker.perform_async\n  BarWorker.perform_async\nend\n```\n\n----------------------------------------\n\nTITLE: Using Data Attributes for Dynamic Styling in HTML\nDESCRIPTION: This snippet shows how to use data attributes for dynamic styling instead of inline styles, which are not allowed in Sidekiq 8.0.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/examples/webui-ext/readme.md#2025-04-14_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"foobar\" data-width=\"12\">\n```\n\n----------------------------------------\n\nTITLE: Updating Sidekiq Pro Configuration for Metric Naming in Version 8.0\nDESCRIPTION: Example of how to update the Datadog Statsd configuration for Sidekiq Pro 8.0. The code shows how to remove the now-redundant 'sidekiq' namespace since all metrics are now prefixed with 'sidekiq.' by default.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/docs/Pro-8.0-Upgrade.md#2025-04-14_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nSidekiq.configure_server do |config|\n  #config.dogstatsd = -> { Datadog::Statsd.new(\"localhost\", 8125, namespace: \"sidekiq\") }\n  config.dogstatsd = -> { Datadog::Statsd.new(\"localhost\", 8125) }\nend\n```\n\n----------------------------------------\n\nTITLE: Support for Serializing ActiveSupport::CurrentAttributes in Sidekiq\nDESCRIPTION: Referenced as feature #4982, this code snippet indicates support for serializing ActiveSupport::CurrentAttributes into each job in Sidekiq, allowing context to be maintained across job executions.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/Changes.md#2025-04-14_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\n\n\n\n```\n\n----------------------------------------\n\nTITLE: Using Sidekiq's style_tag Helper for CSS Inclusion\nDESCRIPTION: This snippet shows how to use Sidekiq's built-in style_tag helper to include CSS files securely in the Web UI.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/examples/webui-ext/readme.md#2025-04-14_snippet_5\n\nLANGUAGE: erb\nCODE:\n```\n<%= style_tag \"my_gem/css/somefile.css\" %>\n```\n\n----------------------------------------\n\nTITLE: Handling Nested Testing Modes in Sidekiq\nDESCRIPTION: Example showing proper and improper ways to nest Sidekiq testing modes, with explicit error handling for invalid nesting introduced in 7.2.0.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/Changes.md#2025-04-14_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nSidekiq::Testing.inline! # global setting\nSidekiq::Testing.fake! do # override within block\n  # ok\n  Sidekiq::Testing.inline! do # can't override the override\n    # not ok, nested\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Dynamic Nested Batch Creation in Worker\nDESCRIPTION: Demonstrates how to dynamically create child batches within a running job using the batch method to access the current batch context.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/docs/Pro-2.0-Upgrade.md#2025-04-14_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\ndef perform(*args)\n  do_something(args)\n\n  if more_work?\n    # Sidekiq::Worker#batch returns the Batch this job is part of.\n    batch.jobs do\n      b = Sidekiq::Batch.new\n      b.on(:success, MyCallback)\n      b.jobs do\n        OtherWork.perform_async\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Linking JavaScript File with CSP Nonce in HTML\nDESCRIPTION: This snippet demonstrates how to include a JavaScript file in the Sidekiq Web UI with Content Security Policy (CSP) nonce for security.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/examples/webui-ext/readme.md#2025-04-14_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/javascript\" src=\"<%= root_path %>my_gem/js/somefile.js\" nonce=\"<%= csp_nonce %>\"></script>\n```\n\n----------------------------------------\n\nTITLE: Incorrect Redis Client API Usage Example\nDESCRIPTION: Example of incorrect Redis client API usage that would break in Sidekiq 7.2.0 due to changes in the redis-client adapter.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/Changes.md#2025-04-14_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\n# bad, not redis-client native\n# Unsupported command argument type: TrueClass (TypeError)\nSidekiq.redis { |c| c.set(\"key\", \"value\", nx: true, ex: 15) }\n```\n\n----------------------------------------\n\nTITLE: Configuring Sidekiq Web UI Session Handling in Ruby\nDESCRIPTION: Disables Sidekiq::Web's built-in cookie session handling to allow the app to provide its own session. This is useful when integrating Sidekiq's Web UI into an existing application that already manages sessions.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/Changes.md#2025-04-14_snippet_20\n\nLANGUAGE: ruby\nCODE:\n```\nSidekiq::Web.set :sessions, false\n```\n\n----------------------------------------\n\nTITLE: Email Address for Security Reporting\nDESCRIPTION: The email address where security vulnerabilities should be reported for the Sidekiq project.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/docs/SECURITY.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\ninfo@contribsys.com\n```\n\n----------------------------------------\n\nTITLE: Upgrading to Sidekiq 7.x in Ruby\nDESCRIPTION: This code snippet shows how to specify the Sidekiq gem version in a Ruby project's Gemfile to upgrade to the latest Sidekiq 7.x version. This is the first step in the upgrade process to Sidekiq 8.0.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/docs/8.0-Upgrade.md#2025-04-14_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ngem 'sidekiq', '< 8'\n```\n\n----------------------------------------\n\nTITLE: Configuring Timed Fetch for Platforms without Persistent Hostnames in Sidekiq Pro 3.0\nDESCRIPTION: This code configures the timed fetch reliability algorithm, which is an alternative to reliable_fetch for platforms like Heroku and Docker that don't have persistent hostnames. This is set within the Sidekiq server configuration block.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/docs/Pro-3.0-Upgrade.md#2025-04-14_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nSidekiq.configure_server do |config|\n  config.timed_fetch!\nend\n```\n\n----------------------------------------\n\nTITLE: Upgrading Sidekiq Pro with Bundler\nDESCRIPTION: Command for safely upgrading Sidekiq Pro and its dependencies using Bundler. This ensures that all compatible versions are installed together.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/docs/Pro-8.0-Upgrade.md#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbundle up sidekiq-pro\n```\n\n----------------------------------------\n\nTITLE: Configuring Batch Expiration in Sidekiq Pro\nDESCRIPTION: Example of setting a custom expiration time for Sidekiq batches. The code demonstrates how to extend the default 3-day expiration to 5 days for long-running batch processes.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/Pro-Changes.md#2025-04-14_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nb = Sidekiq::Batch.new\nb.expires_in 5.days\n...\n```\n\n----------------------------------------\n\nTITLE: Upgrading to Sidekiq Pro 3.x\nDESCRIPTION: This code snippet shows how to specify the gem dependency for upgrading to the latest version of Sidekiq Pro 3.x before moving to 4.0. It ensures compatibility and allows for addressing any deprecation warnings.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/docs/Pro-4.0-Upgrade.md#2025-04-14_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\ngem 'sidekiq-pro', '< 4'\n```\n\n----------------------------------------\n\nTITLE: Testing Periodic Job Registration\nDESCRIPTION: Example of using the test helper to verify periodic job registration block. Shows how to test crontab syntax validation.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/Ent-Changes.md#2025-04-14_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"sidekiq-ent/periodic/testing\"\nCRON_BLOCK = ->(mgr) { mgr.register(\"0 * * * * *\", \"SomeJob\") }\nct = Sidekiq::Periodic::ConfigTester.new\nct.verify(&CRON_BLOCK) # => raises ArgumentError, invalid crontab syntax\n```\n\n----------------------------------------\n\nTITLE: Upgrading to Sidekiq 4.x Before 5.0\nDESCRIPTION: Gem specification for upgrading to the latest Sidekiq 4.x version before moving to 5.0. This is part of the recommended step-by-step upgrade process.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/docs/5.0-Upgrade.md#2025-04-14_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\ngem 'sidekiq', '< 5'\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Health Check in YAML\nDESCRIPTION: Example of configuring a Kubernetes health check using Sidekiq's configuration YAML. Shows both static and dynamic binding configurations.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/Ent-Changes.md#2025-04-14_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nhealth_check: 127.0.0.1:8111 # static\nhealth_check: <%= ENV[\"SIDEKIQ_HEALTH_BINDING\"] %> # dynamic!\n```\n\n----------------------------------------\n\nTITLE: Linking CSS File with CSP Nonce in HTML\nDESCRIPTION: This snippet demonstrates how to include a CSS file in the Sidekiq Web UI with Content Security Policy (CSP) nonce for security.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/examples/webui-ext/readme.md#2025-04-14_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<link href=\"<%= root_path %>my_gem/css/somefile.css\" media=\"screen\" rel=\"stylesheet\" type=\"text/css\" nonce=\"<%= csp_nonce %>\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Sidekiq Server Middleware with Retry Options in Ruby\nDESCRIPTION: Example of adding the RetryJobs middleware to Sidekiq's server middleware chain with a custom maximum retry setting of 10.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/Changes.md#2025-04-14_snippet_37\n\nLANGUAGE: ruby\nCODE:\n```\nSidekiq.configure_server do |config|\n  config.server_middleware do |chain|\n    chain.add Sidekiq::Middleware::Server::RetryJobs, :max_retries => 10\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Upgrading to Sidekiq 4.x in Ruby\nDESCRIPTION: Specifies the gem dependency to upgrade to Sidekiq 4.x after fixing any deprecation warnings from the 3.x version. This is the final step in the upgrade process.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/docs/4.0-Upgrade.md#2025-04-14_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\ngem 'sidekiq', '< 5'\n```\n\n----------------------------------------\n\nTITLE: Configuring Job Tags in Sidekiq Workers\nDESCRIPTION: Example of adding tags to Sidekiq workers for better job categorization and filtering.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/Changes.md#2025-04-14_snippet_18\n\nLANGUAGE: ruby\nCODE:\n```\nclass MyWorker\n  include Sidekiq::Worker\n  sidekiq_options tags: ['bank-ops', 'alpha']\n  ...\nend\n```\n\n----------------------------------------\n\nTITLE: Adding redis-namespace Dependency in Ruby\nDESCRIPTION: If you want to use namespacing with Sidekiq 4.0, you need to explicitly add the redis-namespace gem to your Gemfile. However, the use of namespacing is not recommended.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/docs/4.0-Upgrade.md#2025-04-14_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ngem 'redis-namespace'\n```\n\n----------------------------------------\n\nTITLE: Setting Job-Specific Log Levels in Sidekiq\nDESCRIPTION: Example of setting debug log level for specific worker jobs using the set method.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/Changes.md#2025-04-14_snippet_17\n\nLANGUAGE: ruby\nCODE:\n```\nMyWorker.set(log_level: :debug).perform_async(...)\n```\n\n----------------------------------------\n\nTITLE: Using Redis Password as a Proc in Sidekiq Configuration\nDESCRIPTION: Example of configuring Redis password as a Proc to avoid log disclosure, introduced in 7.3.10.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/Changes.md#2025-04-14_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.redis = { password: ->(username) { \"password\" } }\n```\n\n----------------------------------------\n\nTITLE: Accessing Job Arguments in Iteration Callbacks\nDESCRIPTION: Example showing how to access job arguments via the arguments method in iteration callbacks, introduced in 7.3.3.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/Changes.md#2025-04-14_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\ndef on_stop\n  p arguments # => `[123, \"string\", {\"key\" => \"value\"}]`\n  id, str, hash = arguments\nend\n```\n\n----------------------------------------\n\nTITLE: Sidekiq Web Extension Route Parameters Example\nDESCRIPTION: Shows how to handle URL and route parameters securely in Sidekiq 8.0 web extensions, demonstrating the distinction between query and route parameters.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/docs/webui.md#2025-04-14_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# https://acmecorp.com/sidekiq/batches/b-123abc?size=10\nget \"/batches/:bid\" do\n  route_params(:bid) # => \"b-123abc\"\n  url_params(\"size\") # => \"10\"\nend\n```\n\n----------------------------------------\n\nTITLE: Checking Redis for Safe Batch Upgrade to Sidekiq Pro 8.0\nDESCRIPTION: Commands to verify if it's safe to upgrade to Sidekiq Pro 8.0 by checking if Redis has matching 'failinfo' and 'failed' keys for batches. This helps ensure batch data is in a compatible state before upgrading.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/docs/Pro-8.0-Upgrade.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n% redis-cli\n127.0.0.1:6379> keys b-*-fail*\n1) \"b-VWYf44jVYsZARw-failinfo\"\n2) \"b-VWYf44jVYsZARw-failed\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Rate Limiter Reschedule Count\nDESCRIPTION: Example of customizing the reschedule count for rate limiters, including how to disable rescheduling completely.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/Ent-Changes.md#2025-04-14_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nSidekiq::Limiter.concurrent(\"somename\", 5, reschedule: 0)\n```\n\n----------------------------------------\n\nTITLE: Upgrading to Sidekiq 5.x\nDESCRIPTION: Gem specification for upgrading to Sidekiq 5.x after successfully running on the latest 4.x version and resolving any deprecation warnings.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/docs/5.0-Upgrade.md#2025-04-14_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\ngem 'sidekiq', '< 6'\n```\n\n----------------------------------------\n\nTITLE: Installing Sidekiq Pro 4.x\nDESCRIPTION: Gem specification for installing the latest version of Sidekiq Pro 4.x before upgrading to 5.0.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/docs/Pro-5.0-Upgrade.md#2025-04-14_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ngem 'sidekiq-pro', '< 5'\n```\n\n----------------------------------------\n\nTITLE: Installing Sidekiq Pro 5.x\nDESCRIPTION: Gem specification for upgrading to Sidekiq Pro 5.x after resolving any deprecation warnings.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/docs/Pro-5.0-Upgrade.md#2025-04-14_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\ngem 'sidekiq-pro', '< 6'\n```\n\n----------------------------------------\n\nTITLE: Sidekiq Version Constraint in Gemfile\nDESCRIPTION: Example of specifying Sidekiq version constraints in Gemfile for gradual version upgrading from 5.x to 6.x.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/docs/6.0-Upgrade.md#2025-04-14_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\ngem 'sidekiq', '< 6'\n```\n\nLANGUAGE: ruby\nCODE:\n```\ngem 'sidekiq', '< 7'\n```\n\n----------------------------------------\n\nTITLE: Upgrading Sidekiq Enterprise Gems with Bundler\nDESCRIPTION: Command for upgrading Sidekiq Enterprise gems using bundler, with a warning about proper upgrade method to avoid incompatible gem versions.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/docs/Ent-7.0-Upgrade.md#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nbundle up sidekiq-ent\n```\n\n----------------------------------------\n\nTITLE: Specifying Sidekiq Enterprise 2.x Version Requirement\nDESCRIPTION: This code specifies a gem requirement for Sidekiq Enterprise version 2.x (less than 3.0) in a Gemfile or gemspec. This is used after fixing deprecation warnings during the upgrade process.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/docs/Ent-2.0-Upgrade.md#2025-04-14_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\ngem 'sidekiq-ent', '< 3'\n```\n\n----------------------------------------\n\nTITLE: Specifying Sidekiq Enterprise 1.x Version Requirement\nDESCRIPTION: This code specifies a gem requirement for Sidekiq Enterprise version 1.x (less than 2.0) in a Gemfile or gemspec. This is used during the upgrade process to ensure compatibility.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/docs/Ent-2.0-Upgrade.md#2025-04-14_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\ngem 'sidekiq-ent', '< 2'\n```\n\n----------------------------------------\n\nTITLE: Batch Iteration API Usage\nDESCRIPTION: Shows how to use the new official API for iterating through all known Batches using BatchSet.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/docs/Pro-2.0-Upgrade.md#2025-04-14_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nSidekiq::BatchSet.new.each {|status| p status.bid }\n```\n\n----------------------------------------\n\nTITLE: Benchmark Comparison of Sidekiq Pro vs Regular Sidekiq for Job Deletion\nDESCRIPTION: Performance benchmark comparing Sidekiq Pro's fast job deletion API using Lua with the standard Sidekiq API. Shows a dramatic performance improvement with the Pro version being over 13 times faster.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/Pro-Changes.md#2025-04-14_snippet_9\n\nLANGUAGE: text\nCODE:\n```\nSidekiq Pro API\n  0.030000   0.020000   0.050000 (  1.640659)\nSidekiq API\n 17.250000   2.220000  19.470000 ( 22.193300)\n```\n\n----------------------------------------\n\nTITLE: Using Unlimited Rate Limiter in Sidekiq\nDESCRIPTION: Creates an unlimited rate limiter object that can be used for testing purposes. This limiter doesn't impose any actual rate limits, making it useful for testing scenarios.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/Ent-Changes.md#2025-04-14_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nlimiter = Sidekiq::Limiter.unlimited(...any args...)\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Concurrent Rate Limiter Keys in Redis\nDESCRIPTION: A Ruby script to fix memory leaks in concurrent rate limiter by setting an expiration time on limiter keys in Redis. This should be run in the Rails console to clean up existing data after upgrading to version 1.5.2.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/Ent-Changes.md#2025-04-14_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nexpiry = 1.month.to_i; Sidekiq::Limiter.redis { |c| c.scan_each(match: \"lmtr-cfree-*\") { |key| c.expire(key, expiry) } }\n```\n\n----------------------------------------\n\nTITLE: Configuring Bundler Groups for Sidekiqswarm Preloading\nDESCRIPTION: Example showing how to customize which Bundler groups get preloaded when using sidekiqswarm. This allows for tuning application loading and compatibility by specifying groups or using an empty value.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/Ent-Changes.md#2025-04-14_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nSIDEKIQ_PRELOAD=default,production bin/sidekiqswarm ...\n# Use an empty value for maximum application compatibility\nSIDEKIQ_PRELOAD= bin/sidekiqswarm ...\n```\n\n----------------------------------------\n\nTITLE: Using Sidekiq's script_tag Helper for JavaScript Inclusion\nDESCRIPTION: This snippet shows how to use Sidekiq's built-in script_tag helper to include JavaScript files securely in the Web UI.\nSOURCE: https://github.com/sidekiq/sidekiq/blob/main/examples/webui-ext/readme.md#2025-04-14_snippet_1\n\nLANGUAGE: erb\nCODE:\n```\n<%= script_tag \"my_gem/js/somefile.js\" %>\n```"
  }
]