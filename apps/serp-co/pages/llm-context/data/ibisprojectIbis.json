[
  {
    "owner": "ibis-project",
    "repo": "ibis",
    "content": "TITLE: Basic Ibis Usage Example with Penguins Dataset\nDESCRIPTION: Example showing how to import Ibis, enable interactive mode, fetch the penguins dataset, display data, and perform a group by operation with counting and ordering. This demonstrates the core workflow of using Ibis.\nSOURCE: https://github.com/ibis-project/ibis/blob/main/README.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> import ibis\n>>> ibis.options.interactive = True\n>>> t = ibis.examples.penguins.fetch()\n>>> t\n┏━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━┳━━━━━━━━┳━━━━━━━┓\n┃ species ┃ island    ┃ bill_length_mm ┃ bill_depth_mm ┃ flipper_length_mm ┃ body_mass_g ┃ sex    ┃ year  ┃\n┡━━━━━━━━━╇━━━━━━━━━━━╇━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━╇━━━━━━━━╇━━━━━━━┩\n│ string  │ string    │ float64        │ float64       │ int64             │ int64       │ string │ int64 │\n├─────────┼───────────┼────────────────┼───────────────┼───────────────────┼─────────────┼────────┼───────┤\n│ Adelie  │ Torgersen │           39.1 │          18.7 │               181 │        3750 │ male   │  2007 │\n│ Adelie  │ Torgersen │           39.5 │          17.4 │               186 │        3800 │ female │  2007 │\n│ Adelie  │ Torgersen │           40.3 │          18.0 │               195 │        3250 │ female │  2007 │\n│ Adelie  │ Torgersen │           NULL │          NULL │              NULL │        NULL │ NULL   │  2007 │\n│ Adelie  │ Torgersen │           36.7 │          19.3 │               193 │        3450 │ female │  2007 │\n│ Adelie  │ Torgersen │           39.3 │          20.6 │               190 │        3650 │ male   │  2007 │\n│ Adelie  │ Torgersen │           38.9 │          17.8 │               181 │        3625 │ female │  2007 │\n│ Adelie  │ Torgersen │           39.2 │          19.6 │               195 │        4675 │ male   │  2007 │\n│ Adelie  │ Torgersen │           34.1 │          18.1 │               193 │        3475 │ NULL   │  2007 │\n│ Adelie  │ Torgersen │           42.0 │          20.2 │               190 │        4250 │ NULL   │  2007 │\n│ …       │ …         │              … │             … │                 … │           … │ …      │     … │\n└─────────┴───────────┴────────────────┴───────────────┴───────────────────┴─────────────┴────────┴───────┘\n>>> g = t.group_by(\"species\", \"island\").agg(count=t.count()).order_by(\"count\")\n>>> g\n┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━┓\n┃ species   ┃ island    ┃ count ┃\n┡━━━━━━━━━━━╇━━━━━━━━━━━╇━━━━━━━┩\n│ string    │ string    │ int64 │\n├───────────┼───────────┼───────┤\n│ Adelie    │ Biscoe    │    44 │\n│ Adelie    │ Torgersen │    52 │\n│ Adelie    │ Dream     │    56 │\n│ Chinstrap │ Dream     │    68 │\n│ Gentoo    │ Biscoe    │   124 │\n└───────────┴───────────┴───────┘\n```\n\n----------------------------------------\n\nTITLE: Setting Different Backends in Ibis\nDESCRIPTION: Examples of how to switch between different backends in Ibis, showing the portability feature that allows code to be moved between execution engines by changing a single line of code.\nSOURCE: https://github.com/ibis-project/ibis/blob/main/README.md#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> ibis.set_backend(\"duckdb\")\n>>> ibis.set_backend(\"polars\")\n>>> ibis.set_backend(\"datafusion\")\n```\n\n----------------------------------------\n\nTITLE: Creating Backend Connections in Ibis\nDESCRIPTION: Examples of creating connection objects for different backends in Ibis. This demonstrates the consistent API across different backends for establishing connections.\nSOURCE: https://github.com/ibis-project/ibis/blob/main/README.md#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> con = ibis.duckdb.connect()\n>>> con = ibis.polars.connect()\n>>> con = ibis.datafusion.connect()\n```\n\n----------------------------------------\n\nTITLE: Reading Data from Files with Ibis\nDESCRIPTION: Examples of reading data from CSV and Parquet files using an Ibis connection. This demonstrates the file I/O capabilities that work consistently across different backends.\nSOURCE: https://github.com/ibis-project/ibis/blob/main/README.md#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> t = con.read_csv(\"penguins.csv\")\n>>> t = con.read_parquet(\"penguins.parquet\")\n```\n\n----------------------------------------\n\nTITLE: Building Ibis Query Pipeline\nDESCRIPTION: Creates an Ibis query pipeline that starts with an unbound table, applies filters, projections, aggregations, and finally limits the results. The pipeline includes filtering values less than and greater than 42, adding a computed column, grouping and aggregating data.\nSOURCE: https://github.com/ibis-project/ibis/blob/main/ibis/expr/tests/snapshots/test_format/test_complex_repr/repr.txt#2025-04-16_snippet_0\n\nLANGUAGE: ibis\nCODE:\n```\nr0 := UnboundTable: t\n  a int64\n\nr1 := Filter[r0]\n  r0.a < 42\n  r0.a >= 42\n\nr2 := Project[r1]\n  a: r1.a\n  x: r1.a + 42\n\nr3 := Aggregate[r2]\n  groups:\n    x: r2.x\n  metrics:\n    y: Sum(r2.a)\n\nLimit[r3, n=10]\n```\n\n----------------------------------------\n\nTITLE: Performing Group By Aggregation in Ibis\nDESCRIPTION: Performs an aggregation operation on the 'alltypes' table. Groups by the string column 'g' and the rounded value of float column 'f', then calculates the sum of column 'c' and the mean of column 'd'.\nSOURCE: https://github.com/ibis-project/ibis/blob/main/ibis/expr/tests/snapshots/test_format/test_aggregate_arg_names/repr.txt#2025-04-16_snippet_1\n\nLANGUAGE: ibis\nCODE:\n```\nAggregate[r0]\n  groups:\n    key1: r0.g\n    key2: Round(r0.f, digits=0)\n  metrics:\n    c: Sum(r0.c)\n    d: Mean(r0.d)\n```\n\n----------------------------------------\n\nTITLE: Calculating Delay Deviations Using Window Functions in Ibis\nDESCRIPTION: Projects and enriches the data by calculating the average arrival delay for each destination using window functions, and computing the deviation of each flight's delay from its destination average.\nSOURCE: https://github.com/ibis-project/ibis/blob/main/ibis/tests/expr/snapshots/test_format_sql_operations/test_memoize_insert_sort_key/repr.txt#2025-04-16_snippet_2\n\nLANGUAGE: ibis\nCODE:\n```\nr2 := Project[r1]\n  arrdelay: r1.arrdelay\n  dest:     r1.dest\n  dest_avg: WindowFunction(func=Mean(r1.arrdelay), how='rows', group_by=[r1.dest])\n  dev:      r1.arrdelay - WindowFunction(func=Mean(r1.arrdelay), how='rows', group_by=[r1.dest])\n```\n\n----------------------------------------\n\nTITLE: Defining Unbound Table and Aggregation with Vectorized UDF in Ibis\nDESCRIPTION: This snippet creates an unbound table 't' with a single integer column, then performs an aggregation using a vectorized UDF. The UDF calculates both sum and mean in a single pass, demonstrating efficient data processing.\nSOURCE: https://github.com/ibis-project/ibis/blob/main/ibis/expr/tests/snapshots/test_format/test_destruct_selection/repr.txt#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nr0 := UnboundTable: t\n  col int64\n\nAggregate[r0]\n  metrics:\n    sum:  StructField(ReductionVectorizedUDF(func=multi_output_udf, func_args=[r0.col], input_type=[int64], return_type={'sum': int64, 'mean': float64}), field='sum')\n    mean: StructField(ReductionVectorizedUDF(func=multi_output_udf, func_args=[r0.col], input_type=[int64], return_type={'sum': int64, 'mean': float64}), field='mean')\n```\n\n----------------------------------------\n\nTITLE: Defining UnboundTable and Project in Ibis\nDESCRIPTION: This snippet defines an UnboundTable 't' with three columns (int64, string, float64) and creates a Project operation. The Project includes the original columns and adds a new column 'col4' that calculates the length of the 'col2' string.\nSOURCE: https://github.com/ibis-project/ibis/blob/main/ibis/expr/tests/snapshots/test_format/test_repr_exact/repr.txt#2025-04-16_snippet_0\n\nLANGUAGE: ibis\nCODE:\n```\nr0 := UnboundTable: t\n  col  int64\n  col2 string\n  col3 float64\n\nProject[r0]\n  col:  r0.col\n  col2: r0.col2\n  col3: r0.col3\n  col4: StringLength(r0.col2)\n```\n\n----------------------------------------\n\nTITLE: Defining and Joining UnboundTables with CountStar in Ibis\nDESCRIPTION: This snippet defines two unbounded tables with identical schemas, creates an inner join between them on the 'a' column, and calculates the count of all resulting rows. The join specifies which columns to include in the output, renaming the second table's 'b' column to 'b_right' to avoid naming conflicts.\nSOURCE: https://github.com/ibis-project/ibis/blob/main/ibis/expr/tests/snapshots/test_format/test_table_count_expr/join_repr.txt#2025-04-16_snippet_0\n\nLANGUAGE: ibis\nCODE:\n```\nr0 := UnboundTable: t1\n  a int64\n  b float64\n\nr1 := UnboundTable: t2\n  a int64\n  b float64\n\nr2 := JoinChain[r0]\n  JoinLink[inner, r1]\n    r0.a == r1.a\n  values:\n    a:       r0.a\n    b:       r0.b\n    b_right: r1.b\n\nCountStar(): CountStar(r2)\n```\n\n----------------------------------------\n\nTITLE: Projecting and Transforming Results in Ibis\nDESCRIPTION: Projects the results from the SQL query while applying transformations. It rounds the average arrival delay to one decimal place and adds a new column with the lowercase version of the carrier code.\nSOURCE: https://github.com/ibis-project/ibis/blob/main/ibis/tests/expr/snapshots/test_format_sql_operations/test_format_sql_query_result/repr.txt#2025-04-16_snippet_3\n\nLANGUAGE: ibis\nCODE:\n```\nProject[r2]\n  carrier:      r2.carrier\n  avg_arrdelay: Round(r2.avg_arrdelay, digits=1)\n  island:       Lowercase(r2.carrier)\n```\n\n----------------------------------------\n\nTITLE: Defining Unbound Tables and Join Chain in Ibis\nDESCRIPTION: Creates three unbound tables with different column structures and performs a filtered join chain operation. The query filters records where f > 0 and joins across tables using foo_id and bar_id as join keys.\nSOURCE: https://github.com/ibis-project/ibis/blob/main/ibis/expr/tests/snapshots/test_format/test_format_multiple_join_with_projection/repr.txt#2025-04-16_snippet_0\n\nLANGUAGE: ibis\nCODE:\n```\nr0 := UnboundTable: one\n  c      int32\n  f      float64\n  foo_id string\n  bar_id string\n\nr1 := UnboundTable: two\n  foo_id string\n  value1 float64\n\nr2 := UnboundTable: three\n  bar_id string\n  value2 float64\n\nr3 := Filter[r0]\n  r0.f > 0\n\nJoinChain[r3]\n  JoinLink[left, r1]\n    r3.foo_id == r1.foo_id\n  JoinLink[inner, r2]\n    r3.bar_id == r2.bar_id\n  values:\n    c:      r3.c\n    f:      r3.f\n    foo_id: r3.foo_id\n    bar_id: r3.bar_id\n    value1: r1.value1\n    value2: r2.value2\n```\n\n----------------------------------------\n\nTITLE: Installing Ibis with DuckDB backend and example data\nDESCRIPTION: Command to install Ibis framework with DuckDB backend and example datasets using pip. This is the recommended way to get started with Ibis.\nSOURCE: https://github.com/ibis-project/ibis/blob/main/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install 'ibis-framework[duckdb,examples]'\n```\n\n----------------------------------------\n\nTITLE: Creating and Transforming Flight Data with Ibis\nDESCRIPTION: Creates an unbound table for airline data and performs a series of transformations including filtering for specific destinations, calculating mean arrival delays, sorting by delay times, and limiting results. The pipeline starts with raw airline data and produces a top 10 list of airports by average arrival delay.\nSOURCE: https://github.com/ibis-project/ibis/blob/main/ibis/expr/tests/snapshots/test_format/test_memoize_filtered_table/repr.txt#2025-04-16_snippet_0\n\nLANGUAGE: ibis\nCODE:\n```\nr0 := UnboundTable: airlines\n  dest     string\n  origin   string\n  arrdelay int32\n\nr1 := Filter[r0]\n  InValues(value=r0.dest, options=['ORD', 'JFK', 'SFO'])\n\nr2 := Aggregate[r1]\n  groups:\n    dest: r1.dest\n  metrics:\n    Mean(arrdelay): Mean(r1.arrdelay)\n\nr3 := Sort[r2]\n  desc r2['Mean(arrdelay)']\n\nLimit[r3, n=10]\n```\n\n----------------------------------------\n\nTITLE: Joining Tables with JoinChain in Ibis\nDESCRIPTION: Performs an inner join between the 'test2' table and the filtered 'test1' table using the key column from 'test2' and g column from 'test1'. The join result includes specified columns from both tables.\nSOURCE: https://github.com/ibis-project/ibis/blob/main/ibis/tests/expr/snapshots/test_format_sql_operations/test_memoize_database_table/repr.txt#2025-04-16_snippet_2\n\nLANGUAGE: ibis\nCODE:\n```\nr3 := JoinChain[r0]\n  JoinLink[inner, r2]\n    r2.g == r0.key\n  values:\n    key:   r0.key\n    value: r0.value\n    c:     r2.c\n    f:     r2.f\n    g:     r2.g\n```\n\n----------------------------------------\n\nTITLE: Filtering and Sorting Operations in Ibis\nDESCRIPTION: Applies a filter condition on float column 'f' and sorts the filtered results in ascending order.\nSOURCE: https://github.com/ibis-project/ibis/blob/main/ibis/expr/tests/snapshots/test_format/test_format_show_variables/repr.txt#2025-04-16_snippet_1\n\nLANGUAGE: ibis\nCODE:\n```\nfiltered := Filter[alltypes]\n  alltypes.f > 0\n\nordered := Sort[filtered]\n  asc filtered.f\n```\n\n----------------------------------------\n\nTITLE: Creating UnboundTable and Applying Mean Window Function in Ibis\nDESCRIPTION: This code creates an unbound table 't' with integer and string columns, then applies a Mean window function on column 'a' grouped by column 'b'. The window function uses 'rows' as the windowing method, calculating the mean of 'a' values for each group in 'b'.\nSOURCE: https://github.com/ibis-project/ibis/blob/main/ibis/expr/tests/snapshots/test_format/test_window_group_by/repr.txt#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nr0 := UnboundTable: t\n  a int64\n  b string\n\nMean(a): WindowFunction(func=Mean(r0.a), how='rows', group_by=[r0.b])\n```\n\n----------------------------------------\n\nTITLE: Filtering Table Data in Ibis\nDESCRIPTION: Applies a filter operation on the 'test1' table to select only rows where column 'f' is greater than 0. The result is stored in variable 'r2'.\nSOURCE: https://github.com/ibis-project/ibis/blob/main/ibis/tests/expr/snapshots/test_format_sql_operations/test_memoize_database_table/repr.txt#2025-04-16_snippet_1\n\nLANGUAGE: ibis\nCODE:\n```\nr2 := Filter[r1]\n  r1.f > 0\n```\n\n----------------------------------------\n\nTITLE: Performing Aggregation by Group in Ibis\nDESCRIPTION: Aggregates the purchase data by grouping on region and kind columns, and calculates the sum of amount as 'total'. This operation transforms the raw data into summary statistics.\nSOURCE: https://github.com/ibis-project/ibis/blob/main/ibis/expr/tests/snapshots/test_format/test_memoize_filtered_tables_in_join/repr.txt#2025-04-16_snippet_1\n\nLANGUAGE: ibis\nCODE:\n```\nr1 := Aggregate[r0]\n  groups:\n    region: r0.region\n    kind:   r0.kind\n  metrics:\n    total: Sum(r0.amount)\n```\n\n----------------------------------------\n\nTITLE: Defining Unbounded Tables and Join Chain in Ibis\nDESCRIPTION: This snippet defines two unbounded tables 'left' and 'right', creates a self-reference, and constructs a join chain. It uses asof and inner joins with specific conditions and selects values from the joined tables.\nSOURCE: https://github.com/ibis-project/ibis/blob/main/ibis/expr/tests/snapshots/test_format/test_asof_join/repr.txt#2025-04-16_snippet_0\n\nLANGUAGE: ibis\nCODE:\n```\nr0 := UnboundTable: left\n  time1 int32\n  value float64\n\nr1 := UnboundTable: right\n  time2  int32\n  value2 float64\n\nr2 := SelfReference[r1]\n\nJoinChain[r0]\n  JoinLink[asof, r1]\n    r0.time1 >= r1.time2\n  JoinLink[inner, r2]\n    r0.value == r2.value2\n  values:\n    time1:        r0.time1\n    value:        r0.value\n    time2:        r1.time2\n    value2:       r1.value2\n    time2_right:  r2.time2\n    value2_right: r2.value2\n```\n\n----------------------------------------\n\nTITLE: Filling Null Values in Integer Column using Ibis FillNull Operation\nDESCRIPTION: Applies FillNull operation to replace null values in column 'a' with the default value 3. This operation maintains the table structure while ensuring no null values remain in the specified column.\nSOURCE: https://github.com/ibis-project/ibis/blob/main/ibis/expr/tests/snapshots/test_format/test_fill_null/fill_null_dict_repr.txt#2025-04-16_snippet_1\n\nLANGUAGE: ibis\nCODE:\n```\nFillNull[r0]\n  replacements:\n    a: 3\n```\n\n----------------------------------------\n\nTITLE: Performing Projection Operation in Ibis\nDESCRIPTION: Executes a projection operation on the custom relation 'r1' to select all original columns plus an additional column 'a2' that duplicates the value of column 'a'.\nSOURCE: https://github.com/ibis-project/ibis/blob/main/ibis/expr/tests/snapshots/test_format/test_format_new_relational_operation/repr.txt#2025-04-16_snippet_2\n\nLANGUAGE: ibis\nCODE:\n```\nProject[r1]\n  a:  r1.a\n  b:  r1.b\n  c:  r1.c\n  d:  r1.d\n  e:  r1.e\n  f:  r1.f\n  g:  r1.g\n  h:  r1.h\n  i:  r1.i\n  j:  r1.j\n  k:  r1.k\n  a2: r1.a\n```\n\n----------------------------------------\n\nTITLE: Creating UnboundTable and Applying Projection with FillNull in Ibis\nDESCRIPTION: This code defines an unbound table 't' with integer and string columns, performs a projection to select only the integer column, and then fills any null values with the constant 3. It illustrates the common Ibis operations of table definition, column selection, and null handling.\nSOURCE: https://github.com/ibis-project/ibis/blob/main/ibis/expr/tests/snapshots/test_format/test_fill_null/fill_null_int_repr.txt#2025-04-16_snippet_0\n\nLANGUAGE: ibis\nCODE:\n```\nr0 := UnboundTable: t\n  a int64\n  b string\n\nr1 := Project[r0]\n  a: r0.a\n\nFillNull[r1]\n  replacements:\n    3\n```\n\n----------------------------------------\n\nTITLE: Creating UnboundTable and Applying Window Function in Ibis\nDESCRIPTION: This snippet defines an unbound table 't' with columns 'a' (int64) and 'b' (string), then applies a window function to calculate the mean of column 'a' using a rows-based window starting from the current row.\nSOURCE: https://github.com/ibis-project/ibis/blob/main/ibis/expr/tests/snapshots/test_format/test_window_no_group_by/repr.txt#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nr0 := UnboundTable: t\n  a int64\n  b string\n\nMean(a): WindowFunction(func=Mean(r0.a), how='rows', start=WindowBoundary(value=0, preceding=True))\n```\n\n----------------------------------------\n\nTITLE: Applying NullIf Function to Column in Ibis\nDESCRIPTION: Creates a NullIf expression that evaluates column 'fakecolname1' from table 'r0' and returns NULL if the value equals 2, otherwise returns the original value. This demonstrates Ibis's implementation of the SQL NULLIF function.\nSOURCE: https://github.com/ibis-project/ibis/blob/main/ibis/expr/tests/snapshots/test_format/test_argument_repr_shows_name/repr.txt#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nNullIf(fakecolname1, 2): NullIf(r0.fakecolname1, null_if_expr=2)\n```\n\n----------------------------------------\n\nTITLE: Creating an InMemoryTable with pandas DataFrame in Ibis\nDESCRIPTION: Creates an in-memory table using a pandas DataFrame with two columns (x and y) and three rows of data. The data is structured in a tabular format.\nSOURCE: https://github.com/ibis-project/ibis/blob/main/ibis/expr/tests/snapshots/test_format/test_format_in_memory_table/repr.txt#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nr0 := InMemoryTable\n  data:\n    PandasDataFrameProxy:\n         x  y\n      0  1  2\n      1  3  4\n      2  5  6\n```\n\n----------------------------------------\n\nTITLE: Multiplying a Float Column by a Scalar in Ibis\nDESCRIPTION: Performs a multiplication operation on column 'f' of the 'r0' table, multiplying its values by 2.\nSOURCE: https://github.com/ibis-project/ibis/blob/main/ibis/expr/tests/snapshots/test_format/test_named_value_expr_show_name/repr.txt#2025-04-16_snippet_1\n\nLANGUAGE: ibis\nCODE:\n```\nMultiply(f, 2): r0.f * 2\n```\n\n----------------------------------------\n\nTITLE: Defining UnboundTables and Performing Complex Join in Ibis\nDESCRIPTION: This snippet defines two UnboundTables 'left' and 'right', creates a self-reference of 'right', and then performs a complex join operation using JoinChain and JoinLink. The join involves both tables and the self-reference, with specific conditions and output values defined.\nSOURCE: https://github.com/ibis-project/ibis/blob/main/ibis/expr/tests/snapshots/test_format/test_two_inner_joins/repr.txt#2025-04-16_snippet_0\n\nLANGUAGE: ibis\nCODE:\n```\nr0 := UnboundTable: left\n  time1 int32\n  value float64\n  a     string\n\nr1 := UnboundTable: right\n  time2  int32\n  value2 float64\n  b      string\n\nr2 := SelfReference[r1]\n\nJoinChain[r0]\n  JoinLink[inner, r1]\n    r0.a == r1.b\n  JoinLink[inner, r2]\n    r0.value == r2.value2\n  values:\n    time1:        r0.time1\n    value:        r0.value\n    a:            r0.a\n    time2:        r1.time2\n    value2:       r1.value2\n    b:            r1.b\n    time2_right:  r2.time2\n    value2_right: r2.value2\n    b_right:      r2.b\n```\n\n----------------------------------------\n\nTITLE: Defining UnboundTable with Multiple Data Types in Ibis\nDESCRIPTION: Creates an UnboundTable named 'alltypes' with 11 columns of different data types including integers, floats, string, boolean, timestamp, date, and time.\nSOURCE: https://github.com/ibis-project/ibis/blob/main/ibis/expr/tests/snapshots/test_format/test_named_value_expr_show_name/repr.txt#2025-04-16_snippet_0\n\nLANGUAGE: ibis\nCODE:\n```\nr0 := UnboundTable: alltypes\n  a int8\n  b int16\n  c int32\n  d int64\n  e float32\n  f float64\n  g string\n  h boolean\n  i timestamp\n  j date\n  k time\n```\n\n----------------------------------------\n\nTITLE: Sorting Results by Deviation in Descending Order in Ibis\nDESCRIPTION: Sorts the filtered results by the deviation value in descending order, positioning the flights with the largest positive deviations from their destination averages at the top of the result set.\nSOURCE: https://github.com/ibis-project/ibis/blob/main/ibis/tests/expr/snapshots/test_format_sql_operations/test_memoize_insert_sort_key/repr.txt#2025-04-16_snippet_4\n\nLANGUAGE: ibis\nCODE:\n```\nr4 := Sort[r3]\n  desc r3.dev\n```\n\n----------------------------------------\n\nTITLE: Filtering Rows with Non-Null Deviation Values in Ibis\nDESCRIPTION: Filters the dataset to include only rows where the calculated deviation value is not null, ensuring clean data for the final analysis and ranking.\nSOURCE: https://github.com/ibis-project/ibis/blob/main/ibis/tests/expr/snapshots/test_format_sql_operations/test_memoize_insert_sort_key/repr.txt#2025-04-16_snippet_3\n\nLANGUAGE: ibis\nCODE:\n```\nr3 := Filter[r2]\n  NotNull(r2.dev)\n```\n\n----------------------------------------\n\nTITLE: Arithmetic Operations in Ibis\nDESCRIPTION: Performs addition and subtraction operations on columns 'a' and 'b', followed by multiplication of the results.\nSOURCE: https://github.com/ibis-project/ibis/blob/main/ibis/expr/tests/snapshots/test_format/test_format_show_variables/repr.txt#2025-04-16_snippet_3\n\nLANGUAGE: ibis\nCODE:\n```\nadd := projected.a + projected.b\n\nsub := projected.a - projected.b\n\nMultiply(Add(a, b), Subtract(a, b)): add * sub\n```\n\n----------------------------------------\n\nTITLE: Filtering Aggregated Data for 'foo' Kind in Ibis\nDESCRIPTION: Filters the aggregated data to include only records where the kind column equals 'foo'. This creates a subset of the aggregated data for further processing.\nSOURCE: https://github.com/ibis-project/ibis/blob/main/ibis/expr/tests/snapshots/test_format/test_memoize_filtered_tables_in_join/repr.txt#2025-04-16_snippet_2\n\nLANGUAGE: ibis\nCODE:\n```\nr2 := Filter[r1]\n  r1.kind == 'foo'\n```\n\n----------------------------------------\n\nTITLE: Creating and Manipulating UnboundTable in Ibis\nDESCRIPTION: Creates an unbound table with integer and string columns, projects only the string column, and fills null values with 'foo'\nSOURCE: https://github.com/ibis-project/ibis/blob/main/ibis/expr/tests/snapshots/test_format/test_fill_null/fill_null_str_repr.txt#2025-04-16_snippet_0\n\nLANGUAGE: ibis\nCODE:\n```\nr0 := UnboundTable: t\n  a int64\n  b string\n\nr1 := Project[r0]\n  b: r0.b\n\nFillNull[r1]\n  replacements:\n    'foo'\n```\n\n----------------------------------------\n\nTITLE: Column Projection in Ibis\nDESCRIPTION: Projects specific columns (a, b, f) from the ordered dataset to create a new view.\nSOURCE: https://github.com/ibis-project/ibis/blob/main/ibis/expr/tests/snapshots/test_format/test_format_show_variables/repr.txt#2025-04-16_snippet_2\n\nLANGUAGE: ibis\nCODE:\n```\nprojected := Project[ordered]\n  a: ordered.a\n  b: ordered.b\n  f: ordered.f\n```\n\n----------------------------------------\n\nTITLE: Creating Unbound Table and Defining MyNode in Ibis\nDESCRIPTION: This snippet creates an unbound table 't' with an integer column 'a', and defines a MyNode object with operations on that column. It demonstrates basic table definition and column manipulation in Ibis.\nSOURCE: https://github.com/ibis-project/ibis/blob/main/ibis/expr/tests/snapshots/test_format/test_arbitrary_traversables_are_supported/repr.txt#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nr0 := UnboundTable: t\n  a int64\n\nMyNode\n  obj:\n    r0.a\n  children:\n    r0.a\n    r0.a + 1\n```\n\n----------------------------------------\n\nTITLE: Defining Table Schema in Ibis\nDESCRIPTION: Creates an unbound table schema definition with various data types including integers, floats, string, boolean, timestamp, date and time columns.\nSOURCE: https://github.com/ibis-project/ibis/blob/main/ibis/expr/tests/snapshots/test_format/test_format_show_variables/repr.txt#2025-04-16_snippet_0\n\nLANGUAGE: ibis\nCODE:\n```\nalltypes := UnboundTable: alltypes\n  a int8\n  b int16\n  c int32\n  d int64\n  e float32\n  f float64\n  g string\n  h boolean\n  i timestamp\n  j date\n  k time\n```\n\n----------------------------------------\n\nTITLE: Referencing a Column in Ibis\nDESCRIPTION: Creates a reference to column 'a' from the projected table r1, allowing it to be used in subsequent operations.\nSOURCE: https://github.com/ibis-project/ibis/blob/main/ibis/expr/tests/snapshots/test_format/test_format_projection/repr.txt#2025-04-16_snippet_2\n\nLANGUAGE: ibis\nCODE:\n```\na: r1.a\n```\n\n----------------------------------------\n\nTITLE: Defining an Unbound Table with Multiple Data Types in Ibis\nDESCRIPTION: Creates an unbound table schema named 'alltypes' with 11 columns of different data types including integers, floating point numbers, string, boolean, timestamp, date, and time.\nSOURCE: https://github.com/ibis-project/ibis/blob/main/ibis/expr/tests/snapshots/test_format/test_aggregate_arg_names/repr.txt#2025-04-16_snippet_0\n\nLANGUAGE: ibis\nCODE:\n```\nr0 := UnboundTable: alltypes\n  a int8\n  b int16\n  c int32\n  d int64\n  e float32\n  f float64\n  g string\n  h boolean\n  i timestamp\n  j date\n  k time\n```\n\n----------------------------------------\n\nTITLE: Performing Column Projection in Ibis\nDESCRIPTION: Projects selected columns (c, a, and f) from the original table into a new result table r1, preserving their original names but potentially changing their order.\nSOURCE: https://github.com/ibis-project/ibis/blob/main/ibis/expr/tests/snapshots/test_format/test_format_projection/repr.txt#2025-04-16_snippet_1\n\nLANGUAGE: ibis\nCODE:\n```\nr1 := Project[r0]\n  c: r0.c\n  a: r0.a\n  f: r0.f\n```\n\n----------------------------------------\n\nTITLE: Creating a View in Ibis\nDESCRIPTION: Creates a view named 'foo' with the same schema as the airlines table. This view serves as an intermediate representation of the data that can be used for further operations.\nSOURCE: https://github.com/ibis-project/ibis/blob/main/ibis/tests/expr/snapshots/test_format_sql_operations/test_format_sql_query_result/repr.txt#2025-04-16_snippet_1\n\nLANGUAGE: ibis\nCODE:\n```\nr1 := View: foo\n  year                int32\n  month               int32\n  day                 int32\n  dayofweek           int32\n  dep_time            int32\n  crs_dep_time        int32\n  arr_time            int32\n  crs_arr_time        int32\n  carrier             string\n  flight_num          int32\n  tail_num            int32\n  actual_elapsed_time int32\n  crs_elapsed_time    int32\n  airtime             int32\n  arrdelay            int32\n  depdelay            int32\n  origin              string\n  dest                string\n  distance            int32\n  taxi_in             int32\n  taxi_out            int32\n  cancelled           int32\n  cancellation_code   string\n  diverted            int32\n  carrier_delay       int32\n  weather_delay       int32\n  nas_delay           int32\n  security_delay      int32\n  late_aircraft_delay int32\n```\n\n----------------------------------------\n\nTITLE: Defining DatabaseTable Schema for Airlines Data in Ibis\nDESCRIPTION: Defines a DatabaseTable named 'airlines' with a schema containing flight information such as times, carrier details, and delay metrics. The schema includes various integer and string columns representing different aspects of flight data.\nSOURCE: https://github.com/ibis-project/ibis/blob/main/ibis/tests/expr/snapshots/test_format_sql_operations/test_format_sql_query_result/repr.txt#2025-04-16_snippet_0\n\nLANGUAGE: ibis\nCODE:\n```\nr0 := DatabaseTable: airlines\n  year                int32\n  month               int32\n  day                 int32\n  dayofweek           int32\n  dep_time            int32\n  crs_dep_time        int32\n  arr_time            int32\n  crs_arr_time        int32\n  carrier             string\n  flight_num          int32\n  tail_num            int32\n  actual_elapsed_time int32\n  crs_elapsed_time    int32\n  airtime             int32\n  arrdelay            int32\n  depdelay            int32\n  origin              string\n  dest                string\n  distance            int32\n  taxi_in             int32\n  taxi_out            int32\n  cancelled           int32\n  cancellation_code   string\n  diverted            int32\n  carrier_delay       int32\n  weather_delay       int32\n  nas_delay           int32\n  security_delay      int32\n  late_aircraft_delay int32\n```\n\n----------------------------------------\n\nTITLE: Defining UnboundTable with Multiple Data Types in Ibis\nDESCRIPTION: Creates an unbound table called 'alltypes' with 11 columns of various data types including integers, floats, string, boolean, timestamp, date, and time.\nSOURCE: https://github.com/ibis-project/ibis/blob/main/ibis/expr/tests/snapshots/test_format/test_format_projection/repr.txt#2025-04-16_snippet_0\n\nLANGUAGE: ibis\nCODE:\n```\nr0 := UnboundTable: alltypes\n  a int8\n  b int16\n  c int32\n  d int64\n  e float32\n  f float64\n  g string\n  h boolean\n  i timestamp\n  j date\n  k time\n```\n\n----------------------------------------\n\nTITLE: Defining Database Tables in Ibis\nDESCRIPTION: Creates two database table references named 'test1' and 'test2' with their respective column schemas. The tables will be used in subsequent operations.\nSOURCE: https://github.com/ibis-project/ibis/blob/main/ibis/tests/expr/snapshots/test_format_sql_operations/test_memoize_database_table/repr.txt#2025-04-16_snippet_0\n\nLANGUAGE: ibis\nCODE:\n```\nr0 := DatabaseTable: test2\n  key   string\n  value float64\n\nr1 := DatabaseTable: test1\n  c int32\n  f float64\n  g string\n```\n\n----------------------------------------\n\nTITLE: Defining Unbounded Table in Ibis\nDESCRIPTION: Creates an unbounded table named 'purchases' with columns for region, kind, user, and amount. This represents the source data structure that subsequent operations will work with.\nSOURCE: https://github.com/ibis-project/ibis/blob/main/ibis/expr/tests/snapshots/test_format/test_memoize_filtered_tables_in_join/repr.txt#2025-04-16_snippet_0\n\nLANGUAGE: ibis\nCODE:\n```\nr0 := UnboundTable: purchases\n  region string\n  kind   string\n  user   int64\n  amount float64\n```\n\n----------------------------------------\n\nTITLE: Creating an Expression with Table Column in Ibis\nDESCRIPTION: Defines a variable 'baz' that represents an expression multiplying column 'f' from the 'alltypes' table by the constant 2.\nSOURCE: https://github.com/ibis-project/ibis/blob/main/ibis/expr/tests/snapshots/test_format/test_named_value_expr_show_name/repr2.txt#2025-04-16_snippet_1\n\nLANGUAGE: ibis\nCODE:\n```\nbaz: r0.f * 2\n```\n\n----------------------------------------\n\nTITLE: Creating UnboundTable and ValueList in Ibis\nDESCRIPTION: This snippet defines an UnboundTable 't' with an integer column 'a', and creates a ValueList with mixed data types including an integer, float, string, and a reference to the table's column.\nSOURCE: https://github.com/ibis-project/ibis/blob/main/ibis/expr/tests/snapshots/test_format/test_default_format_implementation/repr.txt#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nr0 := UnboundTable: t\n  a int64\n\nValueList\n  values:\n    1\n    2.0\n    'three'\n    r0.a\n```\n\n----------------------------------------\n\nTITLE: Creating UnboundTable with Integer Column in Ibis\nDESCRIPTION: Defines an UnboundTable named 'fakename2' with a single integer column 'fakecolname1' of type int64. UnboundTables in Ibis are used to represent data sources without requiring connection to actual data.\nSOURCE: https://github.com/ibis-project/ibis/blob/main/ibis/expr/tests/snapshots/test_format/test_argument_repr_shows_name/repr.txt#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nr0 := UnboundTable: fakename2\n  fakecolname1 int64\n```\n\n----------------------------------------\n\nTITLE: Defining UnboundTable Schema in Ibis\nDESCRIPTION: Creates an UnboundTable named 'alltypes' with 11 columns of different data types ranging from integers of various sizes to floating point, string, boolean, timestamp, date, and time types.\nSOURCE: https://github.com/ibis-project/ibis/blob/main/ibis/expr/tests/snapshots/test_format/test_named_value_expr_show_name/repr2.txt#2025-04-16_snippet_0\n\nLANGUAGE: ibis\nCODE:\n```\nr0 := UnboundTable: alltypes\n  a int8\n  b int16\n  c int32\n  d int64\n  e float32\n  f float64\n  g string\n  h boolean\n  i timestamp\n  j date\n  k time\n```\n\n----------------------------------------\n\nTITLE: Defining UnboundTable Schema in Ibis\nDESCRIPTION: Creates an UnboundTable named 'alltypes' with various data types including integers, floats, string, boolean, timestamp, date, and time columns.\nSOURCE: https://github.com/ibis-project/ibis/blob/main/ibis/expr/tests/snapshots/test_format/test_format_new_relational_operation/repr.txt#2025-04-16_snippet_0\n\nLANGUAGE: ibis\nCODE:\n```\nr0 := UnboundTable: alltypes\n  a int8\n  b int16\n  c int32\n  d int64\n  e float32\n  f float64\n  g string\n  h boolean\n  i timestamp\n  j date\n  k time\n```\n\n----------------------------------------\n\nTITLE: Displaying UnboundTable structure in Ibis\nDESCRIPTION: This snippet shows the structure of an UnboundTable object named 't' with multiple string columns (a through t). UnboundTables in Ibis represent table schemas without being connected to any specific data source.\nSOURCE: https://github.com/ibis-project/ibis/blob/main/ibis/expr/tests/snapshots/test_format/test_schema_truncation/repr8.txt#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nUnboundTable: t\n  a string\n  b string\n  c string\n  d string\n     ⋮    \n  q string\n  r string\n  s string\n  t string\n```\n\n----------------------------------------\n\nTITLE: Defining an UnboundTable in Ibis\nDESCRIPTION: Creates an UnboundTable named 'bork' with two int64 columns 'a' and 'b'. UnboundTables in Ibis represent table schemas that aren't yet connected to a specific data source.\nSOURCE: https://github.com/ibis-project/ibis/blob/main/ibis/expr/tests/snapshots/test_format/test_format_unbound_table_namespace/repr.txt#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nUnboundTable: bork\n  a int64\n  b int64\n```\n\n----------------------------------------\n\nTITLE: Defining UnboundTable Schema in Ibis\nDESCRIPTION: Creates an UnboundTable schema called 'alltypes' with 11 columns of different data types including int8, int16, int32, int64, float32, float64, string, boolean, timestamp, date, and time. After defining the table, it references the float64 column 'f'.\nSOURCE: https://github.com/ibis-project/ibis/blob/main/ibis/expr/tests/snapshots/test_format/test_format_table_column/repr.txt#2025-04-16_snippet_0\n\nLANGUAGE: ibis\nCODE:\n```\nr0 := UnboundTable: alltypes\n  a int8\n  b int16\n  c int32\n  d int64\n  e float32\n  f float64\n  g string\n  h boolean\n  i timestamp\n  j date\n  k time\n\nf: r0.f\n```\n\n----------------------------------------\n\nTITLE: Defining Unbounded Tables and Performing Union in Ibis\nDESCRIPTION: This snippet creates two unbounded tables with identical schemas, performs a union operation on them, and then counts the rows in the resulting set. It demonstrates table definition, set operations, and aggregation in Ibis.\nSOURCE: https://github.com/ibis-project/ibis/blob/main/ibis/expr/tests/snapshots/test_format/test_table_count_expr/union_repr.txt#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nr0 := UnboundTable: t1\n  a int64\n  b float64\n\nr1 := UnboundTable: t2\n  a int64\n  b float64\n\nr2 := Union[r0, r1, distinct=False]\n\nCountStar(): CountStar(r2)\n```\n\n----------------------------------------\n\nTITLE: Defining UnboundTable with Multiple String Columns in Ibis\nDESCRIPTION: This code snippet defines an UnboundTable named 't' with 20 string columns. Each column is labeled with a single lowercase letter from 'a' to 't'. This structure can be used as a template or schema definition for data manipulation in Ibis.\nSOURCE: https://github.com/ibis-project/ibis/blob/main/ibis/expr/tests/snapshots/test_format/test_schema_truncation/repr_all.txt#2025-04-16_snippet_0\n\nLANGUAGE: ibis\nCODE:\n```\nUnboundTable: t\n  a string\n  b string\n  c string\n  d string\n  e string\n  f string\n  g string\n  h string\n  i string\n  j string\n  k string\n  l string\n  m string\n  n string\n  o string\n  p string\n  q string\n  r string\n  s string\n  t string\n```\n\n----------------------------------------\n\nTITLE: Performing Count Operation in Ibis\nDESCRIPTION: This snippet performs a count operation on the previously defined table 't1' (represented by 'r0'). The CountStar function is used to count all rows in the table, which is a common aggregation operation in data analysis.\nSOURCE: https://github.com/ibis-project/ibis/blob/main/ibis/expr/tests/snapshots/test_format/test_table_count_expr/cnt_repr.txt#2025-04-16_snippet_1\n\nLANGUAGE: Ibis\nCODE:\n```\nCountStar(t1): CountStar(r0)\n```\n\n----------------------------------------\n\nTITLE: Defining an UnboundTable with String Column in Ibis\nDESCRIPTION: This snippet represents an Ibis UnboundTable named 't' with a single column of string data type. UnboundTables in Ibis are schema definitions that can be used to define table structures before connecting to actual data sources.\nSOURCE: https://github.com/ibis-project/ibis/blob/main/ibis/expr/tests/snapshots/test_format/test_schema_truncation/repr1.txt#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nUnboundTable: t\n  t string\n```\n\n----------------------------------------\n\nTITLE: Creating Unbound Table in Ibis\nDESCRIPTION: This snippet defines an unbound table 't1' with two columns: 'a' of type int64 and 'b' of type float64. Unbound tables in Ibis are used to represent abstract table structures without connecting to a specific data source.\nSOURCE: https://github.com/ibis-project/ibis/blob/main/ibis/expr/tests/snapshots/test_format/test_table_count_expr/cnt_repr.txt#2025-04-16_snippet_0\n\nLANGUAGE: Ibis\nCODE:\n```\nr0 := UnboundTable: t1\n  a int64\n  b float64\n```\n\n----------------------------------------\n\nTITLE: Initializing UnboundTable in Ibis with Empty Schema\nDESCRIPTION: Defines an UnboundTable instance named 't' with an empty schema. UnboundTables in Ibis represent table structures before they are connected to a specific execution backend.\nSOURCE: https://github.com/ibis-project/ibis/blob/main/ibis/expr/tests/snapshots/test_format/test_format_table_with_empty_schema/repr.txt#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nUnboundTable: t\n  <empty schema>\n```\n\n----------------------------------------\n\nTITLE: Defining an UnboundTable Schema in Ibis\nDESCRIPTION: A basic UnboundTable definition named 'bork.bork' with two integer columns 'a' and 'b', both of type int64. This represents a table schema without binding it to a specific data source.\nSOURCE: https://github.com/ibis-project/ibis/blob/main/ibis/expr/tests/snapshots/test_format/test_format_unbound_table_namespace/reprdb.txt#2025-04-16_snippet_0\n\nLANGUAGE: ibis\nCODE:\n```\nUnboundTable: bork.bork\n  a int64\n  b int64\n```\n\n----------------------------------------\n\nTITLE: Incorrect Literal Constructor Call in Ibis\nDESCRIPTION: This code snippet demonstrates an invalid call to the Ibis Literal constructor with three arguments instead of the expected two. The Literal constructor expects only a value and an optional dtype parameter.\nSOURCE: https://github.com/ibis-project/ibis/blob/main/ibis/expr/operations/tests/snapshots/test_generic/test_error_message_when_constructing_literal/call1-too_many_positional_arguments/too_many_positional_arguments.txt#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nLiteral(1, Int8(nullable=True), 'foo')\n```\n\n----------------------------------------\n\nTITLE: Defining UnboundTable with Integer and String Columns in Ibis\nDESCRIPTION: Creates an unbound table 't' with two columns: 'a' of type int64 and 'b' of type string. This represents a table schema definition without actual data.\nSOURCE: https://github.com/ibis-project/ibis/blob/main/ibis/expr/tests/snapshots/test_format/test_fill_null/fill_null_dict_repr.txt#2025-04-16_snippet_0\n\nLANGUAGE: ibis\nCODE:\n```\nr0 := UnboundTable: t\n  a int64\n  b string\n```\n\n----------------------------------------\n\nTITLE: Displaying DummyTable Structure with Array Column in Ibis\nDESCRIPTION: Shows the output format of a DummyTable with a column named 'foo' containing an array with a single value. This represents how Ibis displays table structures in a human-readable format, likely during testing or debugging.\nSOURCE: https://github.com/ibis-project/ibis/blob/main/ibis/expr/tests/snapshots/test_format/test_format_dummy_table/repr.txt#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nDummyTable\n  foo: Array([1])\n```\n\n----------------------------------------\n\nTITLE: Limiting Results to Top 10 Flights in Ibis\nDESCRIPTION: Applies a limit operation to return only the top 10 flights with the largest deviations from their destination average delays, producing the final result set for analysis.\nSOURCE: https://github.com/ibis-project/ibis/blob/main/ibis/tests/expr/snapshots/test_format_sql_operations/test_memoize_insert_sort_key/repr.txt#2025-04-16_snippet_5\n\nLANGUAGE: ibis\nCODE:\n```\nLimit[r4, n=10]\n```\n\n----------------------------------------\n\nTITLE: Defining an Unbound Table and Self-Reference with Equality Condition in Ibis\nDESCRIPTION: This snippet shows how to create an unbound table named 'foo' with multiple columns, create a self-reference to that table, and define an equality condition between the 'dept_id' columns from both references. This pattern is commonly used in Ibis for self-joins and recursive queries.\nSOURCE: https://github.com/ibis-project/ibis/blob/main/ibis/expr/tests/snapshots/test_format/test_table_type_output/repr.txt#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nr0 := UnboundTable: foo\n  job     string\n  dept_id string\n  year    int32\n  y       float64\n\nr1 := SelfReference[r0]\n\nEquals(dept_id, dept_id): r0.dept_id == r1.dept_id\n```\n\n----------------------------------------\n\nTITLE: Initial Column Projection in Ibis\nDESCRIPTION: Performs an initial projection to select only the arrival delay and destination columns from the airlines table, reducing the dataset to only the necessary columns for the analysis.\nSOURCE: https://github.com/ibis-project/ibis/blob/main/ibis/tests/expr/snapshots/test_format_sql_operations/test_memoize_insert_sort_key/repr.txt#2025-04-16_snippet_1\n\nLANGUAGE: ibis\nCODE:\n```\nr1 := Project[r0]\n  arrdelay: r0.arrdelay\n  dest:     r0.dest\n```\n\n----------------------------------------\n\nTITLE: Database Table Schema Definition for Airlines Data in Ibis\nDESCRIPTION: Defines the structure of the airlines database table with columns for flight information such as dates, times, carrier details, delay information, and other flight metrics.\nSOURCE: https://github.com/ibis-project/ibis/blob/main/ibis/tests/expr/snapshots/test_format_sql_operations/test_memoize_insert_sort_key/repr.txt#2025-04-16_snippet_0\n\nLANGUAGE: ibis\nCODE:\n```\nr0 := DatabaseTable: airlines\n  year                int32\n  month               int32\n  day                 int32\n  dayofweek           int32\n  dep_time            int32\n  crs_dep_time        int32\n  arr_time            int32\n  crs_arr_time        int32\n  carrier             string\n  flight_num          int32\n  tail_num            int32\n  actual_elapsed_time int32\n  crs_elapsed_time    int32\n  airtime             int32\n  arrdelay            int32\n  depdelay            int32\n  origin              string\n  dest                string\n  distance            int32\n  taxi_in             int32\n  taxi_out            int32\n  cancelled           int32\n  cancellation_code   string\n  diverted            int32\n  carrier_delay       int32\n  weather_delay       int32\n  nas_delay           int32\n  security_delay      int32\n  late_aircraft_delay int32\n```\n\n----------------------------------------\n\nTITLE: Building UDF/UDA Libraries and IR Modules\nDESCRIPTION: Creates shared libraries from UDF and UDA source files and generates their corresponding IR modules using the custom COMPILE_TO_IR function.\nSOURCE: https://github.com/ibis-project/ibis/blob/main/ci/udf/CMakeLists.txt#2025-04-16_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n# Build the UDA/UDFs into a shared library.\nadd_library(udfsample SHARED udf-sample.cc)\nadd_library(udasample SHARED uda-sample.cc)\n\n# Custom targets to cross compile UDA/UDF to ir\nCOMPILE_TO_IR(udf-sample.cc)\nCOMPILE_TO_IR(uda-sample.cc)\n```\n\n----------------------------------------\n\nTITLE: Executing SQL Query via SQLStringView in Ibis\nDESCRIPTION: Creates an SQL string view (r2) that calculates the average arrival delay grouped by carrier. The resulting schema has two columns: the carrier identifier and the average delay as a float64.\nSOURCE: https://github.com/ibis-project/ibis/blob/main/ibis/tests/expr/snapshots/test_format_sql_operations/test_format_sql_query_result/repr.txt#2025-04-16_snippet_2\n\nLANGUAGE: ibis\nCODE:\n```\nr2 := SQLStringView[r1]\n  query:\n    SELECT carrier, mean(arrdelay) AS avg_arrdelay FROM airlines GROUP BY 1 ORDER …\n  schema:\n    carrier      string\n    avg_arrdelay float64\n```\n\n----------------------------------------\n\nTITLE: Aggregating Data with Group By in Ibis\nDESCRIPTION: Performs aggregation operations on the joined dataset, grouping by columns 'g' and 'key'. Calculates the mean of the difference between 'f' and 'value' as 'foo', and the sum of 'f' as 'bar'.\nSOURCE: https://github.com/ibis-project/ibis/blob/main/ibis/tests/expr/snapshots/test_format_sql_operations/test_memoize_database_table/repr.txt#2025-04-16_snippet_3\n\nLANGUAGE: ibis\nCODE:\n```\nAggregate[r3]\n  groups:\n    g:   r3.g\n    key: r3.key\n  metrics:\n    foo: Mean(r3.f - r3.value)\n    bar: Sum(r3.f)\n```\n\n----------------------------------------\n\nTITLE: Defining IR Compilation Function\nDESCRIPTION: Creates a CMake function that generates build rules for cross-compiling source files to LLVM IR modules. Takes a source file as input and creates a corresponding IR build target.\nSOURCE: https://github.com/ibis-project/ibis/blob/main/ci/udf/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(COMPILE_TO_IR SRC_FILE)\n  get_filename_component(BASE_NAME ${SRC_FILE} NAME_WE)\n  set(OUTPUT_FILE \"build/${BASE_NAME}.ll\")\n  add_custom_command(\n    OUTPUT ${OUTPUT_FILE}\n    COMMAND ${CMAKE_CXX_COMPILER} ${CLANG_INCLUDE_FLAGS} ${CLANG_IR_CXX_FLAGS} ${SRC_FILE} -o ${OUTPUT_FILE}\n    DEPENDS ${SRC_FILE})\n  add_custom_target(${BASE_NAME}-ir ALL DEPENDS ${OUTPUT_FILE})\nendfunction(COMPILE_TO_IR)\n```\n\n----------------------------------------\n\nTITLE: Joining Filtered Datasets on Region in Ibis\nDESCRIPTION: Performs an inner join between the 'foo' and 'bar' filtered datasets using the region column as the join key. The result contains the region and kind from the 'foo' dataset, along with totals from both datasets.\nSOURCE: https://github.com/ibis-project/ibis/blob/main/ibis/expr/tests/snapshots/test_format/test_memoize_filtered_tables_in_join/repr.txt#2025-04-16_snippet_4\n\nLANGUAGE: ibis\nCODE:\n```\nJoinChain[r2]\n  JoinLink[inner, r3]\n    r2.region == r3.region\n  values:\n    region:      r2.region\n    kind:        r2.kind\n    total:       r2.total\n    right_total: r3.total\n```\n\n----------------------------------------\n\nTITLE: Configuring Clang IR Compilation Flags\nDESCRIPTION: Defines the compilation flags used for generating LLVM IR code with Clang++.\nSOURCE: https://github.com/ibis-project/ibis/blob/main/ci/udf/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(CLANG_IR_CXX_FLAGS \"-emit-llvm\" \"-c\" \"-DIR_COMPILE\" \"-DNDEBUG\"\n  \"-DHAVE_INTTYPES_H\" \"-DHAVE_NETINET_IN_H\"\n  \"-Wno-deprecated\" \"-Wno-c++11-extensions\" \"-O1\")\n```\n\n----------------------------------------\n\nTITLE: Filtering Aggregated Data for 'bar' Kind in Ibis\nDESCRIPTION: Filters the aggregated data to include only records where the kind column equals 'bar'. This creates another subset of the aggregated data for comparison or joining.\nSOURCE: https://github.com/ibis-project/ibis/blob/main/ibis/expr/tests/snapshots/test_format/test_memoize_filtered_tables_in_join/repr.txt#2025-04-16_snippet_3\n\nLANGUAGE: ibis\nCODE:\n```\nr3 := Filter[r1]\n  r1.kind == 'bar'\n```\n\n----------------------------------------\n\nTITLE: Performing Sum Aggregation and Addition in Ibis\nDESCRIPTION: Demonstrates how to sum the values of columns x and y, and then add those sums together. This shows Ibis's ability to combine multiple aggregations in a single operation.\nSOURCE: https://github.com/ibis-project/ibis/blob/main/ibis/expr/tests/snapshots/test_format/test_format_in_memory_table/repr.txt#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nAdd(Sum(x), Sum(y)): Sum(r0.x) + Sum(r0.y)\n```\n\n----------------------------------------\n\nTITLE: Working with Tables in Ibis\nDESCRIPTION: Examples of listing and accessing tables from a connection, showing the common table access patterns across different backends in Ibis.\nSOURCE: https://github.com/ibis-project/ibis/blob/main/README.md#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> con.list_tables()\n['penguins']\n>>> t = con.table(\"penguins\")\n```\n\n----------------------------------------\n\nTITLE: Defining UnboundTable and Projection in Ibis\nDESCRIPTION: This snippet creates an unbound table with a single integer column and then performs a projection operation, selecting the column twice with different aliases.\nSOURCE: https://github.com/ibis-project/ibis/blob/main/ibis/expr/tests/snapshots/test_format/test_same_column_multiple_aliases/repr.txt#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nr0 := UnboundTable: t\n  col int64\n\nProject[r0]\n  fakealias1: r0.col\n  fakealias2: r0.col\n```\n\n----------------------------------------\n\nTITLE: Debugging Type Error in Ibis Literal Construction\nDESCRIPTION: An error message showing a failed Literal construction where the dtype parameter (4) is an integer but needs to be a DataType object. The message includes the expected function signature showing parameter types and constraints.\nSOURCE: https://github.com/ibis-project/ibis/blob/main/ibis/expr/operations/tests/snapshots/test_generic/test_error_message_when_constructing_literal/call4-invalid_dtype/invalid_dtype.txt#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nLiteral(1, 4) has failed due to the following errors:\n  `dtype`: 4 of type <class 'int'> is not coercible to a DataType\n\nExpected signature: Literal(value: Annotated[Any, Not(pattern=InstanceOf(type=<class 'Deferred'>))], dtype: DataType)\n```\n\n----------------------------------------\n\nTITLE: Rendering Export Badge with Jinja2\nDESCRIPTION: Creates an orange shields.io badge that displays all exports from a project. The badge only renders when the 'exports' variable exists and contains data.\nSOURCE: https://github.com/ibis-project/ibis/blob/main/docs/backends/badges.md#2025-04-16_snippet_1\n\nLANGUAGE: jinja2\nCODE:\n```\n{% if exports %} ![exportbadge](https://img.shields.io/badge/Exports-{{ \"%20|%20\".join(sorted(exports)) }}-orange?style=flat-square) {% endif %}\n```\n\n----------------------------------------\n\nTITLE: Using Debug Flag for Example Generation\nDESCRIPTION: Command showing how to use the debug flag (-d) with the generation script to test new functions without uploading results to the examples bucket.\nSOURCE: https://github.com/ibis-project/ibis/blob/main/ibis/examples/README.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npython ibis/examples/gen_registry.py -d\n```\n\n----------------------------------------\n\nTITLE: Running Ibis Examples Generation Scripts in Pixi Shell\nDESCRIPTION: Commands for setting up the environment with pixi shell and running the example generation script. The -d flag can be used to prevent uploading results to the examples bucket.\nSOURCE: https://github.com/ibis-project/ibis/blob/main/ibis/examples/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npixi shell\npython ibis/examples/gen_registry.py\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Dependencies for Ibis Project with ClickHouse\nDESCRIPTION: This requirements file lists the necessary Python packages for an Ibis project implementation. It includes the ibis-framework installed directly from GitHub with ClickHouse support, the requests library for HTTP requests, and Streamlit for creating web applications.\nSOURCE: https://github.com/ibis-project/ibis/blob/main/docs/how-to/visualization/example_streamlit_app/requirements.txt#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ngit+https://github.com/ibis-project/ibis.git#egg=ibis-framework[clickhouse]\nrequests\nstreamlit\n```\n\n----------------------------------------\n\nTITLE: Rendering Import Badge with Jinja2\nDESCRIPTION: Creates a blue shields.io badge that displays all imports from a project. The badge only renders when the 'imports' variable exists and contains data.\nSOURCE: https://github.com/ibis-project/ibis/blob/main/docs/backends/badges.md#2025-04-16_snippet_0\n\nLANGUAGE: jinja2\nCODE:\n```\n{% if imports %} ![filebadge](https://img.shields.io/badge/Reads-{{ \"%20|%20\".join(sorted(imports)) }}-blue?style=flat-square) {% endif %}\n```\n\n----------------------------------------\n\nTITLE: Rendering Colored Banner with ANSI Escape Sequences\nDESCRIPTION: This code snippet generates a colored banner using ANSI escape sequences. It creates a gradient from red to orange by using color codes 196, 202, and 208, followed by a reset code to return the terminal to its default state.\nSOURCE: https://github.com/ibis-project/ibis/blob/main/ibis/backends/trino/tests/snapshots/test_client/test_builtin_scalar_udf/result.txt#2025-04-16_snippet_0\n\nLANGUAGE: ansi\nCODE:\n```\n[38;5;196m█[38;5;196m█[38;5;196m█[38;5;196m█[38;5;202m█[38;5;202m█[38;5;202m█[38;5;208m█[38;5;208m█[38;5;208m█[0m\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project and Compiler Settings\nDESCRIPTION: Sets up the CMake project requirements, compiler selection, and output paths for built artifacts.\nSOURCE: https://github.com/ibis-project/ibis/blob/main/ci/udf/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.22)\n\nproject(impala_test_udfs LANGUAGES CXX)\nset(CMAKE_CXX_COMPILER clang++)\n\n# where to put generated libraries and binaries\nset(LIBRARY_OUTPUT_PATH \"build\")\nset(EXECUTABLE_OUTPUT_PATH \"build\")\n```\n\n----------------------------------------\n\nTITLE: Defining Python Function Signature with Type Hints\nDESCRIPTION: This snippet shows the expected function signature for 'Example' with type hints. It includes various parameter types such as int, str, Optional[float], tuple, and a custom type CoercedTo[int].\nSOURCE: https://github.com/ibis-project/ibis/blob/main/ibis/common/tests/snapshots/test_grounds/test_error_message/error_message.txt#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nExample(a: int, b: int = 0, c: str = 'foo', d: Optional[float] = None, e: tuple = (1, 2, 3), f: CoercedTo[int] = 1)\n```\n\n----------------------------------------\n\nTITLE: Analyzing Type Errors in Python Function Call\nDESCRIPTION: This snippet demonstrates a failed function call to 'Example' with incorrect parameter types. It highlights the importance of type checking and adherence to function signatures in Python.\nSOURCE: https://github.com/ibis-project/ibis/blob/main/ibis/common/tests/snapshots/test_grounds/test_error_message/error_message.txt#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nExample('1', '2', '3', '4', '5', [])\n```\n\n----------------------------------------\n\nTITLE: Expected Signature for Ibis Literal Constructor\nDESCRIPTION: The correct signature for the Ibis Literal constructor, showing it accepts a value parameter (which can't be a Deferred instance) and a dtype parameter specifying the data type.\nSOURCE: https://github.com/ibis-project/ibis/blob/main/ibis/expr/operations/tests/snapshots/test_generic/test_error_message_when_constructing_literal/call1-too_many_positional_arguments/too_many_positional_arguments.txt#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nLiteral(value: Annotated[Any, Not(pattern=InstanceOf(type=<class 'Deferred'>))], dtype: DataType)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Relation in Ibis\nDESCRIPTION: Defines a custom relation 'MyRelation' based on the previously defined UnboundTable 'r0', preserving the same schema but adding a 'kind' property with value 'foo'.\nSOURCE: https://github.com/ibis-project/ibis/blob/main/ibis/expr/tests/snapshots/test_format/test_format_new_relational_operation/repr.txt#2025-04-16_snippet_1\n\nLANGUAGE: ibis\nCODE:\n```\nr1 := MyRelation[r0]\n  kind:\n    foo\n  schema:\n    a int8\n    b int16\n    c int32\n    d int64\n    e float32\n    f float64\n    g string\n    h boolean\n    i timestamp\n    j date\n    k time\n```\n\n----------------------------------------\n\nTITLE: Converting Ibis Expression to SQL\nDESCRIPTION: Example demonstrating how to convert an Ibis expression to SQL using the to_sql() function. This showcases how Ibis expressions are compiled into SQL for execution on SQL-based backends.\nSOURCE: https://github.com/ibis-project/ibis/blob/main/README.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> ibis.to_sql(g)\nSELECT\n  \"t1\".\"species\",\n  \"t1\".\"island\",\n  \"t1\".\"count\"\nFROM (\n  SELECT\n    \"t0\".\"species\",\n    \"t0\".\"island\",\n    COUNT(*) AS \"count\"\n  FROM \"penguins\" AS \"t0\"\n  GROUP BY\n    1,\n    2\n) AS \"t1\"\nORDER BY\n  \"t1\".\"count\" ASC\n```\n\n----------------------------------------\n\nTITLE: Mixing SQL and Python with Ibis\nDESCRIPTION: Example showing how to combine SQL and Python code in Ibis. This demonstrates using SQL for initial data processing with the sql() method and then applying Python-based Ibis operations on the result.\nSOURCE: https://github.com/ibis-project/ibis/blob/main/README.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> a = t.sql(\"SELECT species, island, count(*) AS count FROM penguins GROUP BY 1, 2\")\n>>> a\n┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━┓\n┃ species   ┃ island    ┃ count ┃\n┡━━━━━━━━━━━╇━━━━━━━━━━━╇━━━━━━━┩\n│ string    │ string    │ int64 │\n├───────────┼───────────┼───────┤\n│ Adelie    │ Torgersen │    52 │\n│ Adelie    │ Biscoe    │    44 │\n│ Adelie    │ Dream     │    56 │\n│ Gentoo    │ Biscoe    │   124 │\n│ Chinstrap │ Dream     │    68 │\n└───────────┴───────────┴───────┘\n>>> b = a.order_by(\"count\")\n>>> b\n┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━┓\n┃ species   ┃ island    ┃ count ┃\n┡━━━━━━━━━━━╇━━━━━━━━━━━╇━━━━━━━┩\n│ string    │ string    │ int64 │\n├───────────┼───────────┼───────┤\n│ Adelie    │ Biscoe    │    44 │\n│ Adelie    │ Torgersen │    52 │\n│ Adelie    │ Dream     │    56 │\n│ Chinstrap │ Dream     │    68 │\n│ Gentoo    │ Biscoe    │   124 │\n└───────────┴───────────┴───────┘\n```"
  }
]