[
  {
    "owner": "darrenburns",
    "repo": "posting",
    "content": "TITLE: Creating HTTP Request with YAML in posting\nDESCRIPTION: An example YAML file demonstrating how to define an HTTP request in the posting tool. It includes request name, description, method, URL, body content, headers, and query parameters.\nSOURCE: https://github.com/darrenburns/posting/blob/main/docs/guide/requests.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: Create user\ndescription: Adds a new user to the system.\nmethod: POST\nurl: https://jsonplaceholder.typicode.com/users\nbody: \n  content: |-\n    {\n      \"firstName\": \"John\",\n      \"email\": \"john.doe@example.com\"\n    }\nheaders:\n- name: Content-Type\n  value: application/json\nparams:\n- name: sendWelcomeEmail\n  value: 'true'\n```\n\n----------------------------------------\n\nTITLE: Installing Posting with UV Package Manager\nDESCRIPTION: Commands to install the UV package manager and then use it to install Posting with Python 3.13\nSOURCE: https://github.com/darrenburns/posting/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# quickly install uv on MacOS/Linux\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n\n# install Posting (will also quickly install Python 3.13 if needed)\nuv tool install --python 3.13 posting\n```\n\n----------------------------------------\n\nTITLE: Installing Posting with uv on MacOS/Linux\nDESCRIPTION: Commands to install Posting using uv, a fast Rust binary package manager. This installs both uv and Posting, and automatically handles Python 3.12 installation if needed.\nSOURCE: https://github.com/darrenburns/posting/blob/main/docs/guide/index.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# quick install on MacOS/Linux\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n\n# install Posting (will also quickly install Python 3.12 if needed)\nuv tool install --python 3.12 posting\n\n# Run posting\nposting\n```\n\n----------------------------------------\n\nTITLE: Pre-request Script Modifications in Posting\nDESCRIPTION: Shows how to modify request properties like headers and authentication before the request is sent. Demonstrates header addition, auth setting, and notification features.\nSOURCE: https://github.com/darrenburns/posting/blob/main/docs/guide/scripting.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom posting import Auth, Header, RequestModel, Posting\n\n\ndef on_request(request: RequestModel, posting: Posting) -> None:\n    # Add a custom header to the request.\n    request.headers.append(Header(name=\"X-Custom-Header\", value=\"foo\"))\n\n    # Set auth on the request.\n    request.auth = Auth.basic_auth(\"username\", \"password\")\n    # request.auth = Auth.digest_auth(\"username\", \"password\")\n    # request.auth = Auth.bearer_token_auth(\"token\")\n\n    # This will be captured and written to the log.\n    print(\"Request is being sent!\")\n\n    # Make a notification pop-up in the UI.\n    posting.notify(\"Request is being sent!\")\n```\n\n----------------------------------------\n\nTITLE: Post-response Script Processing in Posting\nDESCRIPTION: Demonstrates how to process response data after receiving it, including extracting headers and setting variables for subsequent requests.\nSOURCE: https://github.com/darrenburns/posting/blob/main/docs/guide/scripting.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom posting import Posting\n\n\ndef on_response(response: httpx.Response, posting: Posting) -> None:\n    # Print the status code of the response to the log.\n    print(response.status_code)\n\n    # Set a variable to be used in later requests.\n    # You can write '$auth_token' in the UI and it will be substituted with\n    # the value of the $auth_token variable.\n    posting.set_variable(\"auth_token\", response.headers[\"Authorization\"])\n```\n\n----------------------------------------\n\nTITLE: Setup Script Variables in Posting\nDESCRIPTION: Example of a setup script that runs before request construction to set session variables. Shows how to set and conditionally check auth tokens.\nSOURCE: https://github.com/darrenburns/posting/blob/main/docs/guide/scripting.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef setup(posting: Posting) -> None:\n    # Set a variable which may be used in this request\n    # (or other requests to follow)\n    posting.set_variable(\"auth_token\", \"1234567890\")\n```\n\nLANGUAGE: python\nCODE:\n```\ndef setup(posting: Posting) -> None:\n    if not posting.get_variable(\"auth_token\"):\n        posting.set_variable(\"auth_token\", \"1234567890\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Posting with YAML configuration file\nDESCRIPTION: Example YAML configuration file for Posting showing theme, layout, and heading settings. This file can be located using the command 'posting locate config'.\nSOURCE: https://github.com/darrenburns/posting/blob/main/docs/guide/configuration.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntheme: galaxy\nlayout: horizontal\nresponse:\n  prettify_json: false\nheading:\n  visible: true\n  show_host: false\n```\n\n----------------------------------------\n\nTITLE: Installing Posting with pipx\nDESCRIPTION: Command to install Posting using pipx, which creates an isolated environment for Python applications.\nSOURCE: https://github.com/darrenburns/posting/blob/main/docs/guide/index.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npipx install posting\n```\n\n----------------------------------------\n\nTITLE: Defining Environment Variables in .env File for Posting\nDESCRIPTION: A sample .env file for the dev environment that defines API key, environment name, and a base URL that references another variable.\nSOURCE: https://github.com/darrenburns/posting/blob/main/docs/guide/environments.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# file: dev.env\nAPI_KEY=\"dev-api-key\"\nENV_NAME=\"dev\"\nBASE_URL=\"https://${ENV_NAME}.example.com\"\n```\n\n----------------------------------------\n\nTITLE: Importing OpenAPI Specification in Posting\nDESCRIPTION: Command to import an OpenAPI 3.x specification into Posting collections. This command converts the OpenAPI spec into a collection structure that aligns with the API's URL structure.\nSOURCE: https://github.com/darrenburns/posting/blob/main/docs/guide/importing.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nposting import path/to/openapi.yaml\n```\n\n----------------------------------------\n\nTITLE: Importing Postman Collection in Posting\nDESCRIPTION: Command to import a Postman collection into Posting. This command imports the collection structure and variables, placing the latter in a .env file within the collection directory.\nSOURCE: https://github.com/darrenburns/posting/blob/main/docs/guide/importing.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nposting import --type postman path/to/postman_collection.json\n```\n\n----------------------------------------\n\nTITLE: Loading a Collection in Posting CLI\nDESCRIPTION: Command to load a specific collection directory into Posting. If a collection is not specified, Posting will use the default collection.\nSOURCE: https://github.com/darrenburns/posting/blob/main/docs/guide/collections.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nposting --collection path/to/collection\n```\n\n----------------------------------------\n\nTITLE: Configuring client-side SSL certificates in YAML\nDESCRIPTION: YAML configuration for specifying client-side certificates, key files, and optional password. This allows for client authentication using SSL certificates in Posting requests.\nSOURCE: https://github.com/darrenburns/posting/blob/main/docs/guide/configuration.md#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nssl:\n  certificate_path: /path/to/certificate.pem\n  key_file: /path/to/key.key  # optional\n  password: '***********'  # optional password for key_file\n```\n\n----------------------------------------\n\nTITLE: Loading Multiple Environment Files in Posting\nDESCRIPTION: Command to launch Posting with variables from multiple environment files, allowing for shared and environment-specific configurations.\nSOURCE: https://github.com/darrenburns/posting/blob/main/docs/guide/environments.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nposting --env dev.env --env shared.env\n```\n\n----------------------------------------\n\nTITLE: Using dotenv (.env) files for Posting configuration\nDESCRIPTION: Example .env file showing how to set Posting configuration through environment variables. Dotenv files can be loaded using the --env option and can be used for environment-specific configurations.\nSOURCE: https://github.com/darrenburns/posting/blob/main/docs/guide/configuration.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nPOSTING_THEME=\"cobalt\"\nPOSTING_LAYOUT=\"vertical\"\nPOSTING_HEADING__VISIBLE=\"false\"\n```\n\n----------------------------------------\n\nTITLE: Configuring SSL CA bundle in YAML\nDESCRIPTION: YAML configuration for specifying a custom CA bundle file for SSL verification. Posting verifies SSL certificates by default using the certifi package, but can be configured to use a custom bundle.\nSOURCE: https://github.com/darrenburns/posting/blob/main/docs/guide/configuration.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nssl:\n  ca_bundle: 'absolute/path/to/certificate.pem'\n```\n\n----------------------------------------\n\nTITLE: Creating a New Collection in Posting\nDESCRIPTION: Bash commands to create a new collection directory and launch Posting with that collection. Collections help organize API requests into project-specific groups.\nSOURCE: https://github.com/darrenburns/posting/blob/main/docs/guide/index.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmkdir my-collection\nposting --collection my-collection\n```\n\n----------------------------------------\n\nTITLE: Running Posting CLI\nDESCRIPTION: Command to launch the Posting HTTP client from the terminal\nSOURCE: https://github.com/darrenburns/posting/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nposting\n```\n\n----------------------------------------\n\nTITLE: Creating Shared Environment Variables File for Posting\nDESCRIPTION: Example of a shared environment file containing variables common to all environments.\nSOURCE: https://github.com/darrenburns/posting/blob/main/docs/guide/environments.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# file: shared.env\nAPI_PATH=\"/api/v1\"\nENV_NAME=\"shared\"\n```\n\n----------------------------------------\n\nTITLE: Creating Environment-Specific .env Files for Posting\nDESCRIPTION: Examples of environment-specific .env files for dev and prod environments, each with their own API keys and URLs.\nSOURCE: https://github.com/darrenburns/posting/blob/main/docs/guide/environments.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# file: dev.env\nAPI_KEY=\"dev-api-key\"\nENV_NAME=\"dev\"\nBASE_URL=\"https://${ENV_NAME}.example.com\"\n\n# file: prod.env\nAPI_KEY=\"prod-api-key\"\nENV_NAME=\"prod\"\nBASE_URL=\"https://${ENV_NAME}.example.com\"\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Theme Configuration in YAML\nDESCRIPTION: Defines the basic structure of a Posting theme file with core color definitions and optional metadata. Includes primary colors, semantic colors for different states, and author information.\nSOURCE: https://github.com/darrenburns/posting/blob/main/docs/guide/themes.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: example  # use this name in your config file\nprimary: '#4e78c4'  # buttons, fixed table columns\nsecondary: '#f39c12'  # method selector, some minor labels\naccent: '#e74c3c'  # header text, scrollbars, cursors, focus highlights\nbackground: '#0e1726' # background colors\nsurface: '#17202a'  # panels, etc\nerror: '#e74c3c'  # error messages\nsuccess: '#2ecc71'  # success messages\nwarning: '#f1c40f'  # warning messages\n\n# Optional metadata\nauthor: Darren Burns\ndescription: A dark theme with a blue primary color.\nhomepage: https://github.com/darrenburns/posting\n```\n\n----------------------------------------\n\nTITLE: Basic Keymap Configuration in YAML\nDESCRIPTION: Shows the general structure for customizing keybindings in the config.yaml file. The format uses action IDs mapped to key combinations.\nSOURCE: https://github.com/darrenburns/posting/blob/main/docs/guide/keymap.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nkeymap:\n  <ID>: <key-combination>\n```\n\n----------------------------------------\n\nTITLE: Loading Single Environment File in Posting\nDESCRIPTION: Command to launch Posting with variables from a single environment file.\nSOURCE: https://github.com/darrenburns/posting/blob/main/docs/guide/environments.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nposting --env dev.env\n```\n\n----------------------------------------\n\nTITLE: Loading Combined Environment Variables in Posting\nDESCRIPTION: Command showing how to load both shared and environment-specific variables for a development environment.\nSOURCE: https://github.com/darrenburns/posting/blob/main/docs/guide/environments.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nposting --env shared.env --env dev.env\n```\n\n----------------------------------------\n\nTITLE: Configuring Extra cURL Arguments in YAML\nDESCRIPTION: Sets additional arguments for cURL export in the config.yaml file. These arguments will be included in the exported cURL command, allowing for customized output.\nSOURCE: https://github.com/darrenburns/posting/blob/main/docs/guide/external_tools.md#2025-04-23_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ncurl_export_extra_args: \"--verbose -w %{time_total} %{http_code}\"\n```\n\n----------------------------------------\n\nTITLE: Example of Exported cURL Command with Extra Arguments\nDESCRIPTION: Demonstrates the structure of an exported cURL command including the extra arguments specified in the configuration. This shows how the custom arguments are integrated into the final command.\nSOURCE: https://github.com/darrenburns/posting/blob/main/docs/guide/external_tools.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncurl --verbose -w %{time_total} %{http_code} -X POST ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Automatic Focus in Posting (Markdown)\nDESCRIPTION: This snippet demonstrates the configuration options for automatic focus switching in the Posting application. It includes settings for startup focus, response focus, and focus when opening a request.\nSOURCE: https://github.com/darrenburns/posting/blob/main/docs/guide/navigation.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Config | Default value | Description |\n|----------------------|---------------|-------------|\n| `focus.on_startup` | `\"url\"`, `\"method\", \"collection\"` (Default: `\"url\"`) | Automatically focus the URL bar, method, or collection browser when the app starts. |\n| `focus.on_response` | `\"body\"`, `\"tabs\"` (Default: `unset`)| Automatically focus the response tabs or response body text area when a response is received. |\n| `focus.on_request_open` | `\"headers\"`, `\"body\"`, `\"query\"`, `\"info\"`, `\"url\"`, `\"method\"` (Default: `unset`) | Automatically focus the specified target when a request is opened from the collection browser. |\n```\n\n----------------------------------------\n\nTITLE: JSON Body for User Creation POST Request\nDESCRIPTION: Sample JSON body for creating a new user through the JSONPlaceholder API. This demonstrates the structure of a basic user creation payload.\nSOURCE: https://github.com/darrenburns/posting/blob/main/docs/guide/index.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"John Doe\",\n  \"username\": \"johndoe\",\n  \"email\": \"john.doe@example.com\"\n}\n```\n\n----------------------------------------\n\nTITLE: Theme Selection Configuration in YAML\nDESCRIPTION: Shows how to specify a theme in the Posting configuration file.\nSOURCE: https://github.com/darrenburns/posting/blob/main/docs/guide/themes.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntheme: example\n```\n\n----------------------------------------\n\nTITLE: Configuring Posting's UI Theme and Spacing\nDESCRIPTION: YAML configuration for setting the Posting UI theme and spacing mode. This should be added to the Posting config file to make permanent changes to the appearance.\nSOURCE: https://github.com/darrenburns/posting/blob/main/docs/guide/index.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nspacing: compact\ntheme: <theme-name>\n```\n\n----------------------------------------\n\nTITLE: Syntax Highlighting Theme Configuration in YAML\nDESCRIPTION: Demonstrates customization options for syntax highlighting including cursor styles, text area appearance, URL formatting, and JSON syntax coloring.\nSOURCE: https://github.com/darrenburns/posting/blob/main/docs/guide/themes.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ntext_area:\n  cursor: 'reverse'  # style the block cursor\n  cursor_line: 'underline'  # style the line the cursor is on\n  selection: 'reverse'  # style the selected text\n  gutter: 'bold #50e3c2'  # style the gutter\n  matched_bracket: 'black on green'  # style the matched bracket\nurl:\n  base: 'italic #50e3c2'  # style the 'base' of the url\n  protocol: 'bold #b8e986'  # style the protocol\nsyntax:\n  json_key: 'italic #4a90e2'  # style json keys\n  json_number: '#50e3c2'  # style json numbers\n  json_string: '#b8e986'  # style json strings\n  json_boolean: '#b8e986'  # style json booleans\n  json_null: 'underline #b8e986'  # style json null values\n```\n\n----------------------------------------\n\nTITLE: HTTP Method Styling Configuration in YAML\nDESCRIPTION: Defines custom styles for different HTTP methods in the collection tree view.\nSOURCE: https://github.com/darrenburns/posting/blob/main/docs/guide/themes.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nmethod:\n  get: 'underline #50e3c2'\n  post: 'italic #b8e986'\n  put: 'bold #b8e986'\n  delete: 'strikethrough #b8e986'\n```\n\n----------------------------------------\n\nTITLE: Configuring External Editor in YAML\nDESCRIPTION: Sets the external editor to vim in the config.yaml file. This configuration allows users to edit request bodies in vim when pressing F4 in a multi-line text area.\nSOURCE: https://github.com/darrenburns/posting/blob/main/docs/guide/external_tools.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\neditor: vim\n```\n\n----------------------------------------\n\nTITLE: Changing Send Request Keybinding in YAML\nDESCRIPTION: Example of changing the keybinding for the \"Send Request\" action from the default Ctrl+J to Ctrl+R.\nSOURCE: https://github.com/darrenburns/posting/blob/main/docs/guide/keymap.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nkeymap:\n  send-request: ctrl+r\n```\n\n----------------------------------------\n\nTITLE: Multiple Keybindings for Same Action in YAML\nDESCRIPTION: Example showing how to assign multiple key combinations to the same action by separating them with commas.\nSOURCE: https://github.com/darrenburns/posting/blob/main/docs/guide/keymap.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nkeymap:\n  send-request: ctrl+r,ctrl+i\n```\n\n----------------------------------------\n\nTITLE: Preserving Default Keybindings in YAML\nDESCRIPTION: Example showing how to add new keybindings while preserving the original default binding by including all desired combinations.\nSOURCE: https://github.com/darrenburns/posting/blob/main/docs/guide/keymap.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nkeymap:\n  send-request: ctrl+r,ctrl+i,ctrl+j\n```\n\n----------------------------------------\n\nTITLE: Environment-specific SSL certificate configuration\nDESCRIPTION: Example of using an environment-specific .env file (dev.env) to configure SSL certificate paths. This approach allows different SSL configurations for different environments.\nSOURCE: https://github.com/darrenburns/posting/blob/main/docs/guide/configuration.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# dev.env\nPOSTING_SSL__CA_BUNDLE='/path/to/certificate.pem'\n```\n\n----------------------------------------\n\nTITLE: Setting POSTING_EDITOR Environment Variable\nDESCRIPTION: Sets the POSTING_EDITOR environment variable to vim. This is an alternative method to configure the external editor for Posting.\nSOURCE: https://github.com/darrenburns/posting/blob/main/docs/guide/external_tools.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport POSTING_EDITOR=vim\n```\n\n----------------------------------------\n\nTITLE: Configuring External Pager in YAML\nDESCRIPTION: Sets the external pager to less in the config.yaml file. This configuration allows users to view multi-line text in less when pressing F3 in a multi-line text area.\nSOURCE: https://github.com/darrenburns/posting/blob/main/docs/guide/external_tools.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\npager: less\n```\n\n----------------------------------------\n\nTITLE: Setting POSTING_PAGER Environment Variable\nDESCRIPTION: Sets the POSTING_PAGER environment variable to less. This is an alternative method to configure the external pager for Posting.\nSOURCE: https://github.com/darrenburns/posting/blob/main/docs/guide/external_tools.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nexport POSTING_PAGER=less\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON-specific Pager in YAML\nDESCRIPTION: Sets a custom pager (fx) specifically for viewing JSON content in the config.yaml file. This allows for a specialized JSON viewing experience.\nSOURCE: https://github.com/darrenburns/posting/blob/main/docs/guide/external_tools.md#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\npager_json: fx\n```\n\n----------------------------------------\n\nTITLE: Setting POSTING_PAGER_JSON Environment Variable\nDESCRIPTION: Sets the POSTING_PAGER_JSON environment variable to fx. This is an alternative method to configure a JSON-specific pager for Posting.\nSOURCE: https://github.com/darrenburns/posting/blob/main/docs/guide/external_tools.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nexport POSTING_PAGER_JSON=fx\n```\n\n----------------------------------------\n\nTITLE: Finding Default Collection Location in Posting\nDESCRIPTION: Command to locate the default collection directory used by Posting when no collection is specified.\nSOURCE: https://github.com/darrenburns/posting/blob/main/docs/guide/collections.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nposting locate collection\n```\n\n----------------------------------------\n\nTITLE: Locating Default Collection Directory in Posting\nDESCRIPTION: Command to check the location of the default collection directory in Posting. This is useful when importing collections without specifying an output directory.\nSOURCE: https://github.com/darrenburns/posting/blob/main/docs/guide/importing.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nposting locate collection\n```\n\n----------------------------------------\n\nTITLE: Setting Up Development Environment with uv\nDESCRIPTION: Commands to set up and activate a virtual environment for Posting development using uv package manager.\nSOURCE: https://github.com/darrenburns/posting/blob/main/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nuv sync\n\nsource .venv/bin/activate\n# or, with fish shell:\nsource .venv/bin/activate.fish\n```\n\n----------------------------------------\n\nTITLE: Running Posting with Textual Dev Tools\nDESCRIPTION: Commands to run the Posting application with Textual developer tools and debugging enabled.\nSOURCE: https://github.com/darrenburns/posting/blob/main/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nposting\n\nTEXTUAL=devtools,debug posting\n\nTEXTUAL=devtools,debug posting --collection tests/sample-collections/ --env tests/sample-envs/sample_base.env --env tests/sample-envs/sample_extra.env\n```\n\n----------------------------------------\n\nTITLE: Running and Updating Tests\nDESCRIPTION: Commands to run tests using the Makefile and to update snapshot tests when necessary.\nSOURCE: https://github.com/darrenburns/posting/blob/main/CONTRIBUTING.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake test\n\nmake test-snapshot-update\n```\n\n----------------------------------------\n\nTITLE: Defining Markdown Frontmatter\nDESCRIPTION: Basic frontmatter metadata block defining the title and template for the project documentation.\nSOURCE: https://github.com/darrenburns/posting/blob/main/docs/index.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: The API client that lives in your terminal\ntemplate: home.html\n---\n```\n\n----------------------------------------\n\nTITLE: Styling Tags and Legend for Posting Project Roadmap\nDESCRIPTION: This CSS snippet defines styles for tags used in the roadmap and the legend layout. It includes color-coding for different feature categories and responsive grid layout for the legend items.\nSOURCE: https://github.com/darrenburns/posting/blob/main/docs/roadmap.md#2025-04-23_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n.tag {\n  display: inline-block;\n  padding: 3px 8px;\n  border-radius: 4px;\n  font-weight: bold;\n  font-size: 0.8em;\n  margin-left: 8px;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);\n  background: linear-gradient(135deg, rgba(30, 15, 45, 0.8), rgba(50, 30, 70, 0.9));\n  border: 1px solid rgba(100, 70, 150, 0.4);\n}\n.ui { color: #88ccff; }\n.collection { color: #a0b8ff; }\n.environment { color: #80ffee; }\n.variables { color: #eeff80; }\n.auth { color: #ff80bf; }\n.import { color: #a0ff80; }\n.scripting { color: #d580ff; }\n.documentation { color: #ffcc80; }\n.ux { color: #ff9980; }\n.requests { color: #cccccc; }\n.realtime { color: #80c8ff; }\n.testing { color: #80ffb0; }\n.cookies { color: #ffaa80; }\n.security { color: #ff8080; }\n.logging { color: #8080ff; }\n.legend-item {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 4px 0;\n  white-space: nowrap;\n}\n.legend-item div {\n  margin-right: 20px;\n}\n.legend-item span.tag {\n  flex-shrink: 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Responsive Grid Layout for Legend in Posting Project Roadmap\nDESCRIPTION: This HTML snippet creates a responsive grid layout for the legend items in the roadmap. It uses CSS Grid to create a flexible, multi-column layout that adapts to different screen sizes.\nSOURCE: https://github.com/darrenburns/posting/blob/main/docs/roadmap.md#2025-04-23_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<div style=\"display: grid; grid-template-columns: repeat(auto-fill, minmax(300px, 1fr)); gap: 30px; margin-top: 15px;\">\n  <div class=\"legend-item\"><div>User Interface improvements</div> <span class=\"tag ui\">UI</span></div>\n  <div class=\"legend-item\"><div>Collection management</div> <span class=\"tag collection\">Collection</span></div>\n  <div class=\"legend-item\"><div>Environment handling</div> <span class=\"tag environment\">Environment</span></div>\n  <div class=\"legend-item\"><div>Authentication methods</div> <span class=\"tag auth\">Auth</span></div>\n  <div class=\"legend-item\"><div>Import capabilities</div> <span class=\"tag import\">Import</span></div>\n  <div class=\"legend-item\"><div>Scripting capabilities</div> <span class=\"tag scripting\">Scripting</span></div>\n  <div class=\"legend-item\"><div>Documentation</div> <span class=\"tag documentation\">Documentation</span></div>\n  <div class=\"legend-item\"><div>User Experience</div> <span class=\"tag ux\">UX</span></div>\n  <div class=\"legend-item\"><div>Requests</div> <span class=\"tag requests\">Requests</span></div>\n  <div class=\"legend-item\"><div>Testing capabilities</div> <span class=\"tag testing\">Testing</span></div>\n  <div class=\"legend-item\"><div>Security features</div> <span class=\"tag security\">Security</span></div>\n  <div class=\"legend-item\"><div>Logging capabilities</div> <span class=\"tag logging\">Logging</span></div>\n</div>\n```"
  }
]