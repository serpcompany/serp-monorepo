[
  {
    "owner": "vert-x3",
    "repo": "vertx-web-site",
    "content": "TITLE: Implementing TCP Echo Server Verticle in JavaScript\nDESCRIPTION: A basic TCP echo server implementation that listens on port 1234 and echoes back any received data. Includes server creation, connection handling, and cleanup.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_js.md#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nload('vertx.js')\n\nvar server = vertx.createNetServer();\n\nserver.connectHandler(function(sock) {\n  new vertx.Pump(sock, sock).start();\n}).listen(1234, 'localhost');\n\nfunction vertxStop() {\n  server.close();\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a TCP Echo Server Verticle in Groovy\nDESCRIPTION: A simple TCP echo server implementation that accepts connections and echoes back any received data. It uses Vert.x's createNetServer method and Pump utility to handle the data flow.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_groovy.md#2025-04-19_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nimport static org.vertx.groovy.core.streams.Pump.createPump\n\nvertx.createNetServer().connectHandler { socket ->\n  createPump(socket, socket).start()\n}.listen(1234)\n```\n\n----------------------------------------\n\nTITLE: Creating a WebSocket Echo Server in Vert.x JavaScript\nDESCRIPTION: This snippet demonstrates how to create a WebSocket echo server that returns all received data back to the client. It uses a Pump to connect the WebSocket's read stream to its write stream, automatically echoing all incoming data.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_js.md#2025-04-19_snippet_65\n\nLANGUAGE: javascript\nCODE:\n```\nvar server = vertx.createHttpServer();\n\nserver.websocketHandler(function(websocket) {\n  \n  new Pump(websocket, websocket).start();\n\n}).listen(8080, 'localhost');\n```\n\n----------------------------------------\n\nTITLE: Configuring Secure Session Handling in Vert.x\nDESCRIPTION: Shows how to properly configure session handling with secure cookies using HTTPOnly and Secure flags to prevent client-side access and ensure HTTPS-only transmission.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2015-09-14-writing-secure-vertx-web-apps.md#2025-04-19_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n    Router router = Router.router(vertx);\n\n    router.route().handler(CookieHandler.create());\n    router.route().handler(SessionHandler\n        .create(LocalSessionStore.create(vertx))\n        .setCookieHttpOnlyFlag(true)\n        .setCookieSecureFlag(true)\n    );\n\n    router.route().handler(routingContext -> {\n\n      Session session = routingContext.session();\n\n      Integer cnt = session.get(\"hitcount\");\n      cnt = (cnt == null ? 0 : cnt) + 1;\n\n      session.put(\"hitcount\", cnt);\n\n      routingContext.response().end(\"Hitcount: \" + cnt);\n    });\n\n    vertx.createHttpServer().requestHandler(router::accept).listen(8080);\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Vert.x HTTP Server Verticle\nDESCRIPTION: Implementation of a basic Vert.x Verticle that creates an HTTP server listening on port 8080 and responds with a simple HTML message.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/intro-series/2015-07-14-post-01-my-first-vertx-3-application.md#2025-04-19_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npackage io.vertx.blog.first;\n\nimport io.vertx.core.AbstractVerticle;\nimport io.vertx.core.Future;\n\npublic class MyFirstVerticle extends AbstractVerticle {\n\n  @Override\n  public void start(Future<Void> fut) {\n    vertx\n        .createHttpServer()\n        .requestHandler(r -> {\n          r.response().end(\"<h1>Hello from my first \" +\n              \"Vert.x 3 application</h1>\");\n        })\n        .listen(8080, result -> {\n          if (result.succeeded()) {\n            fut.complete();\n          } else {\n            fut.fail(result.cause());\n          }\n        });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building Vert.x Fat JAR with Maven\nDESCRIPTION: Maven command to clean the project directory and package the application into a fat JAR.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/intro-series/2015-07-14-post-01-my-first-vertx-3-application.md#2025-04-19_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean package\n```\n\n----------------------------------------\n\nTITLE: Backend Startup Implementation with SQL Connection\nDESCRIPTION: Method implementing asynchronous database connection setup with error handling and callback chaining.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/intro-series/2015-10-19-post-05-using-the-asynchronous-sql-client.md#2025-04-19_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n  private void startBackend(Handler<AsyncResult<SQLConnection>> next, Future<Void> fut) {\n    jdbc.getConnection(ar -> {\n      if (ar.failed()) {\n        fut.fail(ar.cause());\n      } else {\n        next.handle(Future.succeededFuture(ar.result()));\n      }\n    });\n  }\n```\n\n----------------------------------------\n\nTITLE: Starting an HTTP Server Listening on Port and Host in Vert.x\nDESCRIPTION: Code that initializes an HTTP server and makes it listen on a specific port and hostname to accept incoming HTTP requests.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_js.md#2025-04-19_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\nvar server = vertx.createHttpServer();\n\nserver.listen(8080, \"myhost\");\n```\n\n----------------------------------------\n\nTITLE: ECMAScript 6/7 Features in Vert.x TypeScript Verticle\nDESCRIPTION: This TypeScript code demonstrates various ECMAScript 6 and 7 features used in a Vert.x verticle. It includes arrow functions, block-scoped variables, default parameters, rest parameters, spread operator, for...of loops, template strings, classes, inheritance, and the exponentiation operator.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2016-01-03-ecmascript-6-7-on-the-jvm-with-typscript-and-vertx.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nvertx.createHttpServer().requestHandler((req) => { // [1]\n  let name = req.getParam(\"name\") || \"World\"; // [2]\n\n  function greet(greeting = \"Hello\", ...names) { // [3] [4]\n    console.log(greeting, ...names); // [5]\n    for (let n of names) { // [6]\n      console.log(`${greeting} ${n}`); // [7]\n    }\n  }\n\n  greet(\"Hi\", name, \"foo\", \"bar\");\n\n  class Animal {\n    constructor(public greeting: string) {}\n    sayHello() {\n      return this.greeting;\n    }\n  }\n\n  class Cat extends Animal { // [8]\n    constructor() {\n      super(\"Meow\");\n    }\n  }\n\n  let cat = new Cat();\n  console.log(cat.sayHello());\n\n  req.response().end(`2^6 = ${2 ** 6}`); // [9]\n}).listen(8080);\n```\n\n----------------------------------------\n\nTITLE: Creating Database Tables and Initial Data in Vert.x\nDESCRIPTION: Method that initializes database connection, creates a Whisky table if not exists, and populates it with initial data. Demonstrates proper connection handling and async SQL operations.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/intro-series/2015-10-19-post-05-using-the-asynchronous-sql-client.md#2025-04-19_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nprivate void createSomeData(AsyncResult<SQLConnection> result,\n    Handler<AsyncResult<Void>> next, Future<Void> fut) {\n    if (result.failed()) {\n      fut.fail(result.cause());\n    } else {\n      SQLConnection connection = result.result();\n      connection.execute(\n          \"CREATE TABLE IF NOT EXISTS Whisky (id INTEGER IDENTITY, name varchar(100), \" +\n          \"origin varchar(100))\",\n          ar -> {\n            if (ar.failed()) {\n              fut.fail(ar.cause());\n              connection.close();\n              return;\n            }\n            connection.query(\"SELECT * FROM Whisky\", select -> {\n              if (select.failed()) {\n                fut.fail(ar.cause());\n                connection.close();\n                return;\n              }\n              if (select.result().getNumRows() == 0) {\n                insert(\n                    new Whisky(\"Bowmore 15 Years Laimrig\", \"Scotland, Islay\"),\n                    connection,\n                    (v) -> insert(new Whisky(\"Talisker 57Â° North\", \"Scotland, Island\"),\n                        connection,\n                        (r) -> {\n                          next.handle(Future.<Void>succeededFuture());\n                          connection.close();\n                        }));\t\t\t\t\t\t\t\t\t\t\t\t\t\n              } else {\n                next.handle(Future.<Void>succeededFuture());\n                connection.close();\n              }\n            });\n          });\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Implementing HTTP Request Validation with Vert.x Web Validation\nDESCRIPTION: Demonstrates how to validate HTTP requests using Vert.x Web Validation with schema parsing and parameter validation. Supports path parameters, query parameters, and JSON body validation.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/releases/2020-05-25-vertx-4-milestone5-release.md#2025-04-19_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nValidationHandler handler = ValidationHandler\n  .builder(schemaParser)\n  .pathParameter(Parameters.param(\"myPathParam\", stringSchema()))\n  .queryParameter(Parameters.optionalParam(\"myQueryParam\", intSchema()))\n  .body(Bodies.json(Schemas.ref(JsonPointer.fromURI(URI.create(\n    \"some_schema.json\"\n  )))))\n  .build();\n\nrouter.post(\"/{myPathParam}\").handler(handler);\n```\n\n----------------------------------------\n\nTITLE: Creating and Asserting Single Web Request with TestRequest in Java\nDESCRIPTION: This snippet demonstrates how to use the TestRequest API to create a single GET request with query parameters and headers, and assert the response body and headers. It uses the VertxExtension and VertxWebClientExtension for JUnit 5.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2019-07-26-vertx-junit5-web-client.md#2025-04-19_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport static io.vertx.junit5.web.TestRequest.*;\n\n@ExtendWith({\n  VertxExtension.class, // VertxExtension MUST be configured before VertxWebClientExtension\n  VertxWebClientExtension.class\n})\npublic class TestRequestExample {\n\n  @Test\n  public void test1(WebClient client, VertxTestContext testContext) {\n    testRequest(client, HttpMethod.GET, \"/hello\") // Build the request\n      .with(\n        queryParam(\"name\", \"francesco\"), // Add query param\n        requestHeader(\"x-my\", \"foo\") // Add request header\n      )\n      .expect(\n        // Assert that response is a JSON with a specific body\n        jsonBodyResponse(new JsonObject().put(\"value\", \"Hello Francesco!\")),\n        // Assert that response contains a particular header\n        responseHeader(\"x-my\", \"bar\")\n      )\n      .send(testContext); // Complete (or fail) the VertxTestContext\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing POST Endpoint for Creating Whisky\nDESCRIPTION: Handler setup and implementation for creating new whisky products, including body parsing and JSON response handling.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/intro-series/2015-07-27-post-03-some-rest-with-vertx.md#2025-04-19_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nrouter.route(\"/api/whiskies*\").handler(BodyHandler.create());\nrouter.post(\"/api/whiskies\").handler(this::addOne);\n```\n\nLANGUAGE: java\nCODE:\n```\nprivate void addOne(RoutingContext routingContext) {\n  final Whisky whisky = Json.decodeValue(routingContext.getBodyAsString(),\n      Whisky.class);\n  products.put(whisky.getId(), whisky);\n  routingContext.response()\n      .setStatusCode(201)\n      .putHeader(\"content-type\", \"application/json; charset=utf-8\")\n      .end(Json.encodePrettily(whisky));\n}\n```\n\n----------------------------------------\n\nTITLE: Creating HTTP Router with Vert.x for REST API\nDESCRIPTION: This snippet demonstrates how to create an HTTP router in Vert.x, setting up endpoints for GET, POST, and PUT operations for a simple score tracking API.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2017-01-25-building-services-and-apis-with-amqp.md#2025-04-19_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nrouter = Router.router(vertx);  \nrouter.route(\"/api/v1.0/*\").handler(BodyHandler.create());  \nrouter.get(\"/api/v1.0/scores\").handler(this::getScores);  \nrouter.post(\"/api/v1.0/scores\").handler(this::addGame);  \nrouter.put(\"/api/v1.0/scores\").handler(this::setScore);  \n```\n\n----------------------------------------\n\nTITLE: Implementing Bidding Function in JavaScript\nDESCRIPTION: JavaScript function to send a bid to the server using an AJAX PATCH request, including error handling for non-200 responses.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2016-01-15-real-time-bidding-with-websockets-and-vertx.md#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction bid() {\n    var newPrice = document.getElementById('my_bid_value').value;\n\n    var xmlhttp = (window.XMLHttpRequest) ? new XMLHttpRequest() : new ActiveXObject(\"Microsoft.XMLHTTP\");\n    xmlhttp.onreadystatechange = function () {\n        if (xmlhttp.readyState == 4) {\n            if (xmlhttp.status != 200) {\n                document.getElementById('error_message').innerHTML = 'Sorry, something went wrong.';\n            }\n        }\n    };\n    xmlhttp.open(\"PATCH\", \"http://localhost:8080/api/auctions/\" + auction_id);\n    xmlhttp.setRequestHeader(\"Content-Type\", \"application/json\");\n    xmlhttp.send(JSON.stringify({price: newPrice}));\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic HTTP Server in Vert.x JavaScript\nDESCRIPTION: Creates a simple HTTP server instance using Vert.x's createHttpServer method. This is the first step in setting up an HTTP server in Vert.x.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_js.md#2025-04-19_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nvar server = vertx.createHttpServer();\n```\n\n----------------------------------------\n\nTITLE: Extracting User Information from OpenID Connect ID Token in Vert.x\nDESCRIPTION: Handler that extracts user information from the OpenID Connect ID Token and displays a greeting page with navigation links. Uses OAuth2TokenImpl to access token information and claims.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2020-03-09-easy-sso-for-vertx-with-keycloak.md#2025-04-19_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nprivate void handleGreet(RoutingContext ctx) {\n\n    OAuth2TokenImpl oAuth2Token = (OAuth2TokenImpl) ctx.user();\n\n    String username = oAuth2Token.idToken().getString(\"preferred_username\");\n\n    String greeting = String.format(\"<h1>Hi %s @%s</h1><ul>\" +\n            \"<li><a href=\\\"/protected/user\\\">User Area</a></li>\" +\n            \"<li><a href=\\\"/protected/admin\\\">Admin Area</a></li>\" +\n            \"<li><a href=\\\"/protected/userinfo\\\">User Info (Remote Call)</a></li>\" +\n            \"</ul>\", username, Instant.now());\n\n    String logoutForm = createLogoutForm(ctx);\n\n    respondWithOk(ctx, \"text/html\", greeting + logoutForm);\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Configuration When Deploying a Verticle\nDESCRIPTION: Creating a configuration object and passing it when deploying a child verticle. This allows configuration to be passed to verticles regardless of implementation language.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_groovy.md#2025-04-19_snippet_7\n\nLANGUAGE: groovy\nCODE:\n```\ndef config = [ foo: \"wibble\", bar: false]\n\ncontainer.deployVerticle(\"foo.ChildVerticle\", config)\n```\n\n----------------------------------------\n\nTITLE: Pumping HTTP Requests to Responses in Vert.x\nDESCRIPTION: Illustrates how to echo HTTP request headers and body back in the HTTP response using Vert.x. It uses a pump for the body, making it suitable for handling large request bodies efficiently.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_js.md#2025-04-19_snippet_52\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar server = vertx.createHttpServer();\n\nserver.requestHandler(function(req) {\n  \n  req.response.putAllHeaders(req.headers());\n  \n  new Pump(req, req.response).start();\n  \n  req.endHandler(function() { req.response.end(); });\n  \n}).listen(8080, 'localhost');\n```\n\n----------------------------------------\n\nTITLE: Implementing Future/Callback Hybrid Model in Vert.x 4 NetClient\nDESCRIPTION: Demonstrates the evolution of the NetClient interface from Vert.x 3.x callback model to Vert.x 4.x future/callback hybrid model. Shows both the original callback-based connect method and the new Future-based connect method.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/releases/2019-08-26-vertx-4-milestone2-release.md#2025-04-19_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic interface NetClient {\n\n  // Since 3.0\n  void connect(int port, String host, Handler<AsyncResult<NetSocket>> handler);\n\n  // New in 4.0\n  Future<NetSocket> connect(int port, String host);\n}\n```\n\n----------------------------------------\n\nTITLE: Using AsyncFile as Stream for HTTP Upload in Vert.x JavaScript\nDESCRIPTION: Demonstrates how to use AsyncFile as a ReadStream to pump data from a file to an HTTP request. The example creates an HTTP client, opens a file, and sends the file content to the server using a Pump.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_js.md#2025-04-19_snippet_84\n\nLANGUAGE: javascript\nCODE:\n```\nvar client = new vertx.HttpClient().setHost('foo.com');\n    \nvertx.fileSystem.open('some-file.dat', function(err, asyncFile) {\n    if (err) {\n        log.info('Failed to open file ' + err);\n    } else {                   \n        var request = client.put('/uploads', function(resp) {\n            log.info('resp status code ' + resp.statusCode);\n        });\n        var rs = asyncFile.getReadStream();\n        var pump = new vertx.Pump(rs, request);\n        pump.start();\n        rs.endHandler(function() {\n            // File sent, end HTTP requuest\n            request.end();\n        });\n        \n    }\n});   \n```\n\n----------------------------------------\n\nTITLE: Implementing GET Endpoint for Whisky Collection\nDESCRIPTION: Handler implementation for retrieving all whisky products, returning JSON response with proper content type and UTF-8 encoding.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/intro-series/2015-07-27-post-03-some-rest-with-vertx.md#2025-04-19_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nrouter.get(\"/api/whiskies\").handler(this::getAll);\n```\n\nLANGUAGE: java\nCODE:\n```\nprivate void getAll(RoutingContext routingContext) {\n  routingContext.response()\n      .putHeader(\"content-type\", \"application/json; charset=utf-8\")\n      .end(Json.encodePrettily(products.values()));\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing URL Service Verticle with Vert.x\nDESCRIPTION: Verticle class that handles URL shortening logic including database operations, hash generation, and request processing through event bus consumers.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2017-11-13-AWS-Lambda-and-Vertx-Framework-URL-Shortener-Backend.md#2025-04-19_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class UrlService extends AbstractVerticle {\n    private JDBCClient jdbc;\n\n    @Override\n    public void start() {\n        JsonObject config = new JsonObject()\n                .put(\"url\", \"jdbc:mysql://<HOST>/<DB>\")\n                .put(\"driver_class\", \"com.mysql.jdbc.Driver\")\n                .put(\"user\", System.getenv(\"JDBC_USER\"))\n                .put(\"password\", System.getenv(\"JDBC_PASSWORD\"))\n                .put(\"max_pool_size\", 30);\n\n        jdbc = JDBCClient.createShared(vertx, config);\n        // ... rest of implementation\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Routing HTTP Requests with Pattern Matching in Vert.x (Groovy)\nDESCRIPTION: Shows how to use RouteMatcher in Vert.x to route HTTP requests based on pattern matching. Demonstrates setting up routes for different HTTP methods and extracting parameters from the path.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_groovy.md#2025-04-19_snippet_60\n\nLANGUAGE: groovy\nCODE:\n```\ndef server = vertx.createHttpServer()\n\ndef routeMatcher = new RouteMatcher()\n\nrouteMatcher.get(\"/animals/dogs\") { req ->\n    req.response.end \"You requested dogs\"\n}\n\nrouteMatcher.get(\"/animals/cats\") { req ->\n    req.response.end \"You requested cats\"\n}\n\nserver.requestHandler(routeMatcher.asClosure()).listen(8080, \"localhost\")\n```\n\nLANGUAGE: groovy\nCODE:\n```\ndef server = vertx.createHttpServer()\n\ndef routeMatcher = new RouteMatcher()\n\nrouteMatcher.put(\"/:blogname/:post\") { req ->\n    String blogName = req.params[\"blogname\"]\n    String post = req.params[\"post\"]\n    req.response.end \"blogname is ${blogName}, post is $post\"\n}\n\nserver.requestHandler(routeMatcher).listen(8080, \"localhost\")\n```\n\n----------------------------------------\n\nTITLE: Using SQL Client Fluent Queries in Vert.x 3.9.0\nDESCRIPTION: Demonstrates the new fluent Query API for SQL clients, including basic query execution and collector usage. This is a breaking change introduced as part of Vert.x 4 feature backport.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/releases/2020-04-02-vertx-3.9.0-release.md#2025-04-19_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nclient.prepareQuery(sql).execute(tuple, ar -> ...);\n\n// With a collector\nclient.preparedQuery(sql).collecting(Collectors.toList()).execute(tuple, ar -> ...);\n```\n\n----------------------------------------\n\nTITLE: Basic HTTP Server Request Handler Setup in Groovy\nDESCRIPTION: Creates a basic HTTP server that listens on port 8080 and logs when requests arrive. Shows three equivalent ways to set up the request handler.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_groovy.md#2025-04-19_snippet_45\n\nLANGUAGE: groovy\nCODE:\n```\ndef server = vertx.createHttpServer()\n\nserver.requestHandler{ request -> println \"A request has arrived on the server!\" }\n\nserver.listen(8080, \"localhost\")\n```\n\nLANGUAGE: groovy\nCODE:\n```\ndef server = vertx.createHttpServer()\n\nserver.requestHandler{ request -> println \"A request has arrived on the server!\" }.listen(8080, \"localhost\")\n```\n\nLANGUAGE: groovy\nCODE:\n```\nvertx.createHttpServer().requestHandler{ request ->\n    println \"A request has arrived on the server!\"\n}.listen(8080, \"localhost\")\n```\n\n----------------------------------------\n\nTITLE: Implementing MongoDB Find Operation in Vert.x REST Handler\nDESCRIPTION: REST handler method that retrieves all whisky products from MongoDB collection using find() operation. Converts JSON results to Whisky objects and returns them in HTTP response.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/intro-series/2015-11-30-post-06-combine-vertx-and-mongo-to-build-a-giant.md#2025-04-19_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nprivate void getAll(RoutingContext routingContext) {\n\tmongo.find(COLLECTION, new JsonObject(), results -> {\n\t  List<JsonObject> objects = results.result();\n\t  List<Whisky> whiskies = objects.stream().map(Whisky::new).collect(Collectors.toList());\n\t  routingContext.response()\n\t      .putHeader(\"content-type\", \"application/json; charset=utf-8\")\n\t      .end(Json.encodePrettily(whiskies));\n\t});\n}\n```\n\n----------------------------------------\n\nTITLE: Testing HTTP Service with JUnit 5 and Vert.x\nDESCRIPTION: Demonstrates how to use the new vertx-junit5 module to test a HTTP service verticle. The test deploys a SampleVerticle, makes 10 concurrent HTTP requests, and verifies the responses using AssertJ assertions.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/releases/2018-02-13-vertx-3.5.1-release.md#2025-04-19_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n@Test\n@DisplayName(\"ð Deploy a HTTP service verticle and make 10 requests\")\nvoid useSampleVerticle(Vertx vertx, VertxTestContext testContext) {\n  WebClient webClient = WebClient.create(vertx);\n  Checkpoint deploymentCheckpoint = testContext.checkpoint();\n\n  Checkpoint requestCheckpoint = testContext.checkpoint(10);\n  vertx.deployVerticle(new SampleVerticle(), testContext.succeeding(id -> {\n    deploymentCheckpoint.flag();\n\n    for (int i = 0; i < 10; i++) {\n      webClient.get(11981, \"localhost\", \"/\")\n        .as(BodyCodec.string())\n        .send(testContext.succeeding(resp -> {\n          testContext.verify(() -> {\n            assertThat(resp.statusCode()).isEqualTo(200);\n            assertThat(resp.body()).contains(\"Yo!\");\n            requestCheckpoint.flag();\n          });\n        }));\n    }\n  }));\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SSL Server with Client Authentication\nDESCRIPTION: Example demonstrating how to configure a Vert.x NetServer with SSL requiring client authentication. Includes both keystore and truststore configuration.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_ruby.md#2025-04-19_snippet_33\n\nLANGUAGE: ruby\nCODE:\n```\nserver = Vertx::NetServer.new\nserver.ssl = true\nserver.key_store_path = '/path/to/your/keystore/server-keystore.jks'\nserver.key_store_password = 'password'\nserver.client_auth_required = true\nserver.trust_store_path = '/path/to/your/truststore/server-truststore.jks'\nserver.trust_store_password = 'password'\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Vert.x Web Router\nDESCRIPTION: Initial implementation of a Vert.x Web router that handles requests to the root path and returns an HTML response.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/intro-series/2015-07-27-post-03-some-rest-with-vertx.md#2025-04-19_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic void start(Future<Void> fut) {\n Router router = Router.router(vertx);\n\n router.route(\"/\").handler(routingContext -> {\n   HttpServerResponse response = routingContext.response();\n   response\n       .putHeader(\"content-type\", \"text/html\")\n       .end(\"<h1>Hello from my first Vert.x 3 application</h1>\");\n });\n\n vertx\n     .createHttpServer()\n     .requestHandler(router::accept)\n     .listen(\n         config().getInteger(\"http.port\", 8080),\n         result -> {\n           if (result.succeeded()) {\n             fut.complete();\n           } else {\n             fut.fail(result.cause());\n           }\n         }\n     );\n}\n```\n\n----------------------------------------\n\nTITLE: Route Matching for Different URL Paths in JavaScript\nDESCRIPTION: This example shows how to create specific route handlers for different URL paths using the get method of RouteMatcher. It sets up two different handlers for '/animals/dogs' and '/animals/cats' paths.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_js.md#2025-04-19_snippet_58\n\nLANGUAGE: javascript\nCODE:\n```\nvar server = vertx.createHttpServer();\n\nvar routeMatcher = new vertx.RouteMatcher();\n\nrouteMatcher.get('/animals/dogs', function(req) {\n    req.response.end('You requested dogs');\n});\n\nrouteMatcher.get('/animals/cats', function(req) {\n    req.response.end('You requested cats');    \n});\n    \nserver.requestHandler(routeMatcher).listen(8080, 'localhost');\n```\n\n----------------------------------------\n\nTITLE: Initializing Counter State in Angular Client\nDESCRIPTION: TypeScript method that initializes counter state by sending a request to the Vert.x event bus and handling the response by dispatching a local reset action.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2017-04-26-vertx-realtime-angular-ngrx.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninitializeCounter() {\n    this.eventBusService.send('counter::total', body, (error, message) => {\n    // Handle reply\n    if (message && message.body) {\n            let localAction = new CounterActions.ResetAction();\n            localAction.payload = message.body; // Total value\n            this.store.dispatch(localAction);\n        }\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Protected Routes in Vert.x\nDESCRIPTION: Implementation of route handlers for protected and unprotected endpoints in the Vert.x application.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2020-03-09-easy-sso-for-vertx-with-keycloak.md#2025-04-19_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nprivate void configureRoutes(Router router, WebClient webClient, OAuth2Auth oauth2Auth) {\n    router.get(\"/\").handler(this::handleIndex);\n    router.get(\"/protected\").handler(this::handleGreet);\n    router.get(\"/protected/user\").handler(this::handleUserPage);\n    router.get(\"/protected/admin\").handler(this::handleAdminPage);\n    String userInfoUrl =  ((OAuth2AuthProviderImpl)oauth2Auth).getConfig().getUserInfoPath();\n    router.get(\"/protected/userinfo\").handler(createUserInfoHandler(webClient, userInfoUrl));\n    router.post(\"/logout\").handler(this::handleLogout);\n}\n```\n\n----------------------------------------\n\nTITLE: Loading OpenAPI Specification\nDESCRIPTION: Asynchronously loads an OpenAPI specification file and creates a router factory instance.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2017-06-12-openapi3-vertx-web-support.md#2025-04-19_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nOpenAPI3RouterFactory.create(this.vertx, \"src/main/resources/petstore.yaml\", ar -> {\n    if (ar.succeeded()) {\n        // Spec loaded with success\n        OpenAPI3RouterFactory routerFactory = ar.result();\n    } else {\n        // Something went wrong during router factory initialization\n        Throwable exception = ar.cause();\n        logger.error(\"Ops!\", exception);\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing CSRF Protection in Vert.x\nDESCRIPTION: Demonstrates how to enable CSRF protection using Vert.x's built-in handler, including session and cookie configuration.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2015-09-14-writing-secure-vertx-web-apps.md#2025-04-19_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic class App extends AbstractVerticle {\n\n  @Override\n  public void start() {\n\n    Router router = Router.router(vertx);\n\n    router.route().handler(CookieHandler.create());\n    router.route().handler(SessionHandler\n        .create(LocalSessionStore.create(vertx))\n        .setCookieSecureFlag(true)\n    );\n    router.route().handler(CSRFHandler.create(\"not a good secret\"));\n\n    router.route().handler(ctx -> {\n      ...\n    });\n```\n\n----------------------------------------\n\nTITLE: Making HTTP Requests with Vert.x JavaScript Client\nDESCRIPTION: Shows how to make various types of HTTP requests (POST, GET, etc.) using the Vert.x HTTP client, including adding headers and writing to the request body.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_js.md#2025-04-19_snippet_49\n\nLANGUAGE: javascript\nCODE:\n```\nvar client = vertx.createHttpClient();\n\nvar request = client.post('http://localhost:8080/some-path/', function(resp) {\n    log.info('Got a response, status code: ' + resp.statusCode);\n});\n\nrequest.end();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar client = vertx.createHttpClient().setHost('foo.com');\n\nvar request = client.request('POST', '/some-path', function(resp) {\n    log.info('Got a response, status code: ' + resp.statusCode);\n});\n\nrequest.end();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar client = vertx.createHttpClient().setHost('foo.com');\n\nclient.getNow('/some-path', function(resp) {\n    log.info('Got a response, status code: ' + resp.statusCode);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing DELETE Endpoint for Whisky\nDESCRIPTION: Handler implementation for deleting whisky products by ID, including path parameter handling and appropriate status codes.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/intro-series/2015-07-27-post-03-some-rest-with-vertx.md#2025-04-19_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nrouter.delete(\"/api/whiskies/:id\").handler(this::deleteOne);\n```\n\nLANGUAGE: java\nCODE:\n```\nprivate void deleteOne(RoutingContext routingContext) {\n  String id = routingContext.request().getParam(\"id\");\n  if (id == null) {\n    routingContext.response().setStatusCode(400).end();\n  } else {\n    Integer idAsInteger = Integer.valueOf(id);\n    products.remove(idAsInteger);\n  }\n  routingContext.response().setStatusCode(204).end();\n}\n```\n\n----------------------------------------\n\nTITLE: Server-side HTTP Tunnel Handling\nDESCRIPTION: Demonstrates the server-side handling of HTTP tunnel requests with the new asynchronous toNetSocket() method.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/releases/2020-09-25-vertx-4-beta3-release.md#2025-04-19_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nserver.requestHandler(request -> {\n  if (request.method() == HttpMethod.CONNECT) {\n    // Will send an HTTP 201 status code and switch the connection to use raw buffers\n    request.toNetSocket(ar -> {\n      if (ar.succeeded()) {\n        NetSocket socket = ar.result();\n      }\n    });\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Client Connection and Query Example\nDESCRIPTION: Example showing how to configure and use the Vert.x PostgreSQL client to connect to a database and execute a query.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/releases/2019-07-18-vertx-3.8.0-release.md#2025-04-19_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n// Connect options\nPgConnectOptions connectOptions = new PgConnectOptions()\n  .setPort(5432)\n  .setHost(\"the-host\")\n  .setDatabase(\"the-db\")\n  .setUser(\"user\")\n  .setPassword(\"secret\");\n\nPgPool client = PgPool.pool(connectOptions, new PoolOptions().setMaxSize(5));\n\nclient.query(\"SELECT * FROM users WHERE id='julien'\", ar -> {\n  if (ar.succeeded()) {\n    RowSet result = ar.result();\n    System.out.println(\"Got \" + result.size() + \" rows \");\n  } else {\n    System.out.println(\"Failure: \" + ar.cause().getMessage());\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using JWT Access Token to Call Protected Routes\nDESCRIPTION: Demonstrates how to use a JWT access token in the Authorization header to call a protected endpoint. The request includes the token with the 'Bearer' prefix to authenticate the user.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2020-10-01-jwt-auth-with-keycloak.md#2025-04-19_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncurl --silent -H \"Authorization: Bearer $KC_ACCESS_TOKEN\" http://localhost:3000/api/greet\n```\n\n----------------------------------------\n\nTITLE: Vert.x Timer Implementation\nDESCRIPTION: Examples of implementing one-shot and periodic timers in Vert.x for delayed and recurring tasks.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_js.md#2025-04-19_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nvertx.setTimer(1000, function() {\n    log.info('And one second later this is printed'); \n});\n\nlog.info('First this is printed');\n```\n\n----------------------------------------\n\nTITLE: Instantiating OAuth2 Provider in Vert.x 3.4\nDESCRIPTION: A simplified method for creating an OAuth2 provider instance with minimal configuration. This uses the AUTH_CODE flow by default, which is commonly used for web applications with a backend.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2016-12-02-oauth2-got-easy.md#2025-04-19_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nProvider.create(vertx, clientId, clientSecret)\n```\n\n----------------------------------------\n\nTITLE: Adding Security Headers in Vert.x\nDESCRIPTION: Implements essential security headers including cache control, content type options, HSTS, download options, XSS protection, and frame options.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2015-09-14-writing-secure-vertx-web-apps.md#2025-04-19_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class App extends AbstractVerticle {\n\n  @Override\n  public void start() {\n\n    Router router = Router.router(vertx);\n    router.route().handler(ctx -> {\n      ctx.response()\n          // do not allow proxies to cache the data\n          .putHeader(\"Cache-Control\", \"no-store, no-cache\")\n          // prevents Internet Explorer from MIME - sniffing a\n          // response away from the declared content-type\n          .putHeader(\"X-Content-Type-Options\", \"nosniff\")\n          // Strict HTTPS (for about ~6Months)\n          .putHeader(\"Strict-Transport-Security\", \"max-age=\" + 15768000)\n          // IE8+ do not allow opening of attachments in the context of this resource\n          .putHeader(\"X-Download-Options\", \"noopen\")\n          // enable XSS for IE\n          .putHeader(\"X-XSS-Protection\", \"1; mode=block\")\n          // deny frames\n          .putHeader(\"X-FRAME-OPTIONS\", \"DENY\");\n    });\n\n    vertx.createHttpServer().requestHandler(router::accept).listen(8080);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up WebSocket Server in Vert.x with Ruby\nDESCRIPTION: Creates an HTTP server that handles WebSocket connections. This code initializes a WebSocket server that listens on port 8080 and localhost.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_ruby.md#2025-04-19_snippet_83\n\nLANGUAGE: ruby\nCODE:\n```\nserver = Vertx::HttpServer.new\n\nserver.websocket_handler do |ws|\n\n  # A WebSocket has connected!\n\nend.listen(8080, 'localhost')\n```\n\n----------------------------------------\n\nTITLE: Creating Vert.x Verticle for Auction Service\nDESCRIPTION: Java code defining a Vert.x Verticle that sets up the HTTP server, routes, and handlers for the auction service.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2016-01-15-real-time-bidding-with-websockets-and-vertx.md#2025-04-19_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic class AuctionServiceVerticle extends AbstractVerticle {\n\n    @Override\n    public void start() {\n        Router router = Router.router(vertx);\n\n        router.route(\"/eventbus/*\").handler(eventBusHandler());\n        router.mountSubRouter(\"/api\", auctionApiRouter());\n        router.route().failureHandler(errorHandler());\n        router.route().handler(staticHandler());\n\n        vertx.createHttpServer().requestHandler(router::accept).listen(8080);\n    }\n\n    //â¦\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vert.x Router with RAML Console and Static Content Handler\nDESCRIPTION: This Java code snippet demonstrates how to set up a Vert.x Router with a basic API endpoint and a StaticHandler to serve the RAML console files. It includes a '/hello' endpoint that returns a JSON response and enables static content serving for the web console.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2015-09-17-contract-driven-rest-services-with-vertx-3.md#2025-04-19_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic class App extends AbstractVerticle {\n  @Override\n  public void start() {\n    Router router = Router.router(vertx);\n\n    router.get(\"/hello\").handler(rc -> {\n      rc.response()\n          .putHeader(\"content-type\", \"application/json\")\n          .end(new JsonObject().put(\"greeting\", \"Hello World!\").encode());\n    });\n\n    // optionally enable the web console so users can play with your API\n    // online from their web browsers\n    router.route().handler(StaticHandler.create());\n\n    vertx.createHttpServer().requestHandler(router::accept).listen(8080);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple TCP Echo Server Verticle in Ruby\nDESCRIPTION: This snippet demonstrates how to create a basic TCP echo server as a Vert.x Verticle using Ruby. It sets up a NetServer that echoes back any received data on the connection.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_ruby.md#2025-04-19_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"vertx\"\ninclude Vertx\n\n@server = NetServer.new.connect_handler { |socket|\n  Pump.new(socket, socket).start\n}.listen(1234, 'localhost')\n\ndef vertx_stop\n  @server.close\nend\n```\n\n----------------------------------------\n\nTITLE: Reading Complete HTTP Response Body with Buffer in JavaScript\nDESCRIPTION: This example shows how to read and collect an entire HTTP response body by accumulating chunks into a buffer. It uses dataHandler to collect chunks and endHandler to process the complete response when it's fully received.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_js.md#2025-04-19_snippet_54\n\nLANGUAGE: javascript\nCODE:\n```\nvar client = vertx.createHttpClient().setHost('foo.com');\n\nclient.getNow('/some-path', function(resp) {\n  \n  // Create a buffer to hold the entire response body\n  var body = new vertx.Buffer();  \n\n  resp.dataHandler(function(buffer) {\n    // Add chunk to the buffer\n    body.appendBuffer(buffer);\n  });\n  \n  resp.endHandler(function() {\n    // The entire response body has been received\n    log.info('The total body received was ' + body.length() + ' bytes');\n  });\n  \n});\n```\n\n----------------------------------------\n\nTITLE: Writing Vert.x Unit Tests\nDESCRIPTION: Implementation of unit tests for the Vert.x Verticle using vertx-unit framework to handle asynchronous testing scenarios.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/intro-series/2015-07-14-post-01-my-first-vertx-3-application.md#2025-04-19_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npackage io.vertx.blog.first;\n\nimport io.vertx.core.Vertx;\nimport io.vertx.ext.unit.Async;\nimport io.vertx.ext.unit.TestContext;\nimport io.vertx.ext.unit.junit.VertxUnitRunner;\nimport org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\n\n@RunWith(VertxUnitRunner.class)\npublic class MyFirstVerticleTest {\n\n  private Vertx vertx;\n\n  @Before\n  public void setUp(TestContext context) {\n    vertx = Vertx.vertx();\n    vertx.deployVerticle(MyFirstVerticle.class.getName(),\n        context.asyncAssertSuccess());\n  }\n\n  @After\n  public void tearDown(TestContext context) {\n    vertx.close(context.asyncAssertSuccess());\n  }\n\n  @Test\n  public void testMyApplication(TestContext context) {\n    final Async async = context.async();\n\n    vertx.createHttpClient().getNow(8080, \"localhost\", \"/\",\n     response -> {\n      response.handler(body -> {\n        context.assertTrue(body.toString().contains(\"Hello\"));\n        async.complete();\n      });\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating SockJS Echo Application in Ruby\nDESCRIPTION: Implements a complete SockJS echo application with configuration and request handling that echoes back received data using a pump.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_ruby.md#2025-04-19_snippet_85\n\nLANGUAGE: Ruby\nCODE:\n```\nhttpServer = Vertx::HttpServer.new\n\nsockJSServer = Vertx::SockJSServer.new(httpServer)\n\nconfig = { 'prefix' => '/echo' }\n\nsockJSServer.install_app(config) do |sock|\n\n    p = Vertx::Pump.new(sock, sock)\n\n    p.start\nend\n\nhttpServer.listen(8080)\n```\n\n----------------------------------------\n\nTITLE: Accessing and Displaying HTTP Request Headers in Vert.x\nDESCRIPTION: Creates an HTTP server that reads all request headers and returns them as a string in the response. The code demonstrates how to access the request headers using the headers() method and iterate through the MultiMap of headers.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_js.md#2025-04-19_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\nvar server = vertx.createHttpServer();\n\nserver.requestHandler(function(request) {\n\n  var str = '';\n  request.headers().forEach(function(key, value) {\n    str = str.concat(key, ': ', value, '\\n');\n  });\n  \n  request.response.end(str);\n  \n}).listen(8080, 'localhost');\n```\n\n----------------------------------------\n\nTITLE: Router Factory Implementation in Java\nDESCRIPTION: Code showing how to create and configure an OpenAPI3RouterFactory to handle API operations with parameter parsing.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2018-12-13-vertx-web-api-service.md#2025-04-19_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nOpenAPI3RouterFactory.create(vertx, \"src/main/resources/petstore.yaml\", ar -> {\n  if (ar.succeeded()) {\n    // Spec loaded with success\n    OpenAPI3RouterFactory routerFactory = ar.result();\n    routerFactory.addHandlerByOperationId(\"getTransactionsList\", routingContext -> {\n      RequestParameters params = routingContext.get(\"parsedParameters\");\n      RequestParameter from = params.queryParameter(\"from\");\n      // getTransactionsList business logic\n    });\n    // add handlers for addTransaction, updateTransaction and removeTransaction\n    Router router = routerFactory.getRouter();\n  } else {\n    // Something went wrong during router factory initialization\n    Throwable exception = ar.cause();\n    // Log exception, fail verticle deployment ... etc\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Sending Point-to-Point Messages on the Vert.x Event Bus\nDESCRIPTION: Demonstrates how to send a point-to-point message on the Vert.x event bus. This message will be delivered to at most one handler registered at the specified address.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_js.md#2025-04-19_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\neb.send('test.address\", 'hello world');\n```\n\n----------------------------------------\n\nTITLE: Registering Event Bus Handler in Groovy\nDESCRIPTION: Demonstrates how to register a message handler on the Vert.x event bus for a specific address. The handler receives and processes incoming messages.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_groovy.md#2025-04-19_snippet_13\n\nLANGUAGE: Groovy\nCODE:\n```\ndef eb = vertx.eventBus\n\neb.registerHandler(\"test.address\") { message -> println \"I received a message ${message.body}\" }\n```\n\n----------------------------------------\n\nTITLE: Implementing Role-based Access Control with JWTUser in Vert.x\nDESCRIPTION: Demonstrates role-based access control using the JWTUser's isAuthorized method. The handlers check if the user has the required role before returning the requested data, otherwise returning a 403 Forbidden response.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2020-10-01-jwt-auth-with-keycloak.md#2025-04-19_snippet_10\n\nLANGUAGE: java\nCODE:\n```\nprivate void handleUserData(RoutingContext ctx) {\n\n    var jwtUser = (JWTUser) ctx.user();\n    var username = jwtUser.principal().getString(\"preferred_username\");\n    var userId = jwtUser.principal().getString(\"sub\");\n\n    jwtUser.isAuthorized(\"user\", res -> {\n\n        if (!res.succeeded() || !res.result()) {\n            toJsonResponse(ctx).setStatusCode(403).end(\"{\\\"error\\\": \\\"forbidden\\\"}\");\n            return;\n        }\n\n        JsonObject data = new JsonObject()\n                .put(\"type\", \"user\")\n                .put(\"username\", username)\n                .put(\"userId\", userId)\n                .put(\"timestamp\", Instant.now());\n\n        toJsonResponse(ctx).end(data.toString());\n    });\n}\n\nprivate void handleAdminData(RoutingContext ctx) {\n\n    var jwtUser = (JWTUser) ctx.user();\n    var username = jwtUser.principal().getString(\"preferred_username\");\n    var userId = jwtUser.principal().getString(\"sub\");\n\n    jwtUser.isAuthorized(\"admin\", res -> {\n\n        if (!res.succeeded() || !res.result()) {\n            toJsonResponse(ctx).setStatusCode(403).end(\"{\\\"error\\\": \\\"forbidden\\\"}\");\n            return;\n        }\n\n        JsonObject data = new JsonObject()\n                .put(\"type\", \"admin\")\n                .put(\"username\", username)\n                .put(\"userId\", userId)\n                .put(\"timestamp\", Instant.now());\n\n        toJsonResponse(ctx).end(data.toString());\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: JWT Authorization Setup in Vert.x\nDESCRIPTION: Implementation of JWT authorization setup in Vert.x, including JWKS fetching and JWT validation configuration.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2020-10-01-jwt-auth-with-keycloak.md#2025-04-19_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nprivate Future<Startup> setupJwtAuth(Startup startup) {\n\n    var jwtConfig = startup.config.getJsonObject(\"jwt\");\n    var issuer = jwtConfig.getString(\"issuer\");\n    var issuerUri = URI.create(issuer);\n\n    // derive JWKS uri from Keycloak issuer URI\n    var jwksUri = URI.create(jwtConfig.getString(\"jwksUri\", String.format(\"%s://%s:%d%s\",\n            issuerUri.getScheme(), issuerUri.getHost(), issuerUri.getPort(), issuerUri.getPath() + \"/protocol/openid-connect/certs\")));\n\n    var promise = Promise.<JWTAuth>promise();\n\n    // fetch JWKS from `/certs` endpoint\n    webClient.get(jwksUri.getPort(), jwksUri.getHost(), jwksUri.getPath())\n            .as(BodyCodec.jsonObject())\n            .send(ar -> {\n\n                if (!ar.succeeded()) {\n                    startup.bootstrap.fail(String.format(\"Could not fetch JWKS from URI: %s\", jwksUri));\n                    return;\n                }\n\n                var response = ar.result();\n\n                var jwksResponse = response.body();\n                var keys = jwksResponse.getJsonArray(\"keys\");\n\n                // Configure JWT validation options\n                var jwtOptions = new JWTOptions();\n                jwtOptions.setIssuer(issuer);\n\n                // extract JWKS from keys array\n                var jwks = ((List<Object>) keys.getList()).stream()\n                        .map(o -> new JsonObject((Map<String, Object>) o))\n                        .collect(Collectors.toList());\n\n                // configure JWTAuth\n                var jwtAuthOptions = new JWTAuthOptions();\n                jwtAuthOptions.setJwks(jwks);\n                jwtAuthOptions.setJWTOptions(jwtOptions);\n                jwtAuthOptions.setPermissionsClaimKey(jwtConfig.getString(\"permissionClaimsKey\", \"realm_access/roles\"));\n\n                JWTAuth jwtAuth = JWTAuth.create(vertx, jwtAuthOptions);\n                promise.complete(jwtAuth);\n            });\n\n    return promise.future().compose(auth -> {\n        jwtAuth = auth;\n        return Future.succeededFuture(startup);\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Request-Response Pattern in Vert.x Event Bus\nDESCRIPTION: Shows how to implement the request-response pattern using the Vert.x event bus. It includes both the receiver and sender code for handling replies to messages.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_js.md#2025-04-19_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nvar myHandler = function(message, replier) {\n  console.log('I received a message ' + message);\n  \n  // Do some stuff\n  \n  // Now reply to it\n  \n  replier('This is a reply');\n}\n\neb.registerHandler('test.address', myHandler);\n```\n\nLANGUAGE: javascript\nCODE:\n```\neb.send('test.address', 'This is a message', function(reply) {\n    console.log('I received a reply ' + reply);\n});\n```\n\n----------------------------------------\n\nTITLE: Maven Dependencies for Prometheus Backend\nDESCRIPTION: XML snippet showing the additional Maven dependencies required for using Prometheus as the metrics backend, including vertx-web for exposing metrics.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2018-04-09-vertx-micrometer-metrics.md#2025-04-19_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>io.micrometer</groupId>\n  <artifactId>micrometer-registry-prometheus</artifactId>\n  <version>1.0.0</version>\n</dependency>\n<dependency>\n  <groupId>io.vertx</groupId>\n  <artifactId>vertx-web</artifactId>\n  <version>3.5.1</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Extracting User Information from JWTUser in Vert.x\nDESCRIPTION: Demonstrates how to access user information from a JWT token in a route handler. The code extracts the username and user ID from JWT claims and also shows how to retrieve the original access token for downstream service calls.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2020-10-01-jwt-auth-with-keycloak.md#2025-04-19_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nprivate void handleGreet(RoutingContext ctx) {\n\n    var jwtUser = (JWTUser) ctx.user();\n    var username = jwtUser.principal().getString(\"preferred_username\");\n    var userId = jwtUser.principal().getString(\"sub\");\n\n    var accessToken = ctx.request().getHeader(HttpHeaders.AUTHORIZATION).substring(\"Bearer \".length());\n    // Use accessToken for down-stream calls if needed...\n\n    ctx.request().response().end(String.format(\"Hi %s (%s) %s%n\", username, userId, Instant.now()));\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up a WebSocket Server in Vert.x JavaScript\nDESCRIPTION: This snippet shows the basic setup for a WebSocket server in Vert.x. It creates an HTTP server and sets a websocketHandler that will be called whenever a WebSocket connects to the server.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_js.md#2025-04-19_snippet_64\n\nLANGUAGE: javascript\nCODE:\n```\nvar server = vertx.createHttpServer();\n\nserver.websocketHandler(function(websocket) {\n  \n  // A WebSocket has connected!\n  \n}).listen(8080, 'localhost');\n```\n\n----------------------------------------\n\nTITLE: Hello Web Application with Vert.x Web Framework\nDESCRIPTION: A web application using the Vert.x Web framework that routes requests, handles specific endpoints, and returns appropriate responses. It demonstrates more advanced HTTP handling with proper routing.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2015-07-13-vertx3-says-hello-to-npm-users.md#2025-04-19_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar Router = require(\"vertx-web-js/router\");\nvar server = vertx.createHttpServer();\n\nvar router = Router.router(vertx);\n\nrouter.get(\"/\").handler(function (ctx) {\n  // This handler will be called for \"/\" requests\n  var response = ctx.response();\n  response.putHeader(\"content-type\", \"text/plain\");\n\n  // Write to the response and end it\n  response.end(\"Hello World!\");\n});\n\nserver.requestHandler(router.accept).listen(8080);\n```\n\n----------------------------------------\n\nTITLE: Inserting Whisky Records with SQL Parameters\nDESCRIPTION: Method for safely inserting whisky records using parameterized SQL statements to prevent SQL injection. Returns a new Whisky object with the auto-generated ID.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/intro-series/2015-10-19-post-05-using-the-asynchronous-sql-client.md#2025-04-19_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nprivate void insert(Whisky whisky, SQLConnection connection, Handler<AsyncResult<Whisky>> next) {\n  String sql = \"INSERT INTO Whisky (name, origin) VALUES ?, ?\";\n  connection.updateWithParams(sql,\n      new JsonArray().add(whisky.getName()).add(whisky.getOrigin()),\n      (ar) -> {\n        if (ar.failed()) {\n          next.handle(Future.failedFuture(ar.cause()));\n          return;\n        }\n        UpdateResult result = ar.result();\n        // Build a new whisky instance with the generated id.\n        Whisky w = new Whisky(result.getKeys().getInteger(0), whisky.getName(), whisky.getOrigin());\n        next.handle(Future.succeededFuture(w));\n      });\n}\n```\n\n----------------------------------------\n\nTITLE: HTTP Server Response Stream Handling\nDESCRIPTION: Demonstrates the new simplified send method for HTTP server responses to handle body or stream data.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/releases/2020-09-25-vertx-4-beta3-release.md#2025-04-19_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nserver.requestHandler(req -> {\n  req.pause();\n  getSomeStream().onSuccess(stream -> {\n    req.response().send(stream);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Future/Callback Hybrid Model in Vert.x 4 NetClient\nDESCRIPTION: Demonstrates the evolution of the NetClient interface from Vert.x 3.x callback model to Vert.x 4.0 future/callback hybrid model. Shows both the original callback-based connect method and the new Future-based connect method.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/releases/2019-12-13-vertx-4-milestone4-release.md#2025-04-19_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic interface NetClient {\n\n  // Since 3.0\n  void connect(int port, String host, Handler<AsyncResult<NetSocket>> handler);\n\n  // New in 4.0\n  Future<NetSocket> connect(int port, String host);\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Path Parameters with RouteMatcher in JavaScript\nDESCRIPTION: This snippet demonstrates how to extract parameters from URL paths using the colon notation in route patterns. The extracted parameters are accessible through the req.params() method in the request handler.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_js.md#2025-04-19_snippet_59\n\nLANGUAGE: javascript\nCODE:\n```\nvar server = vertx.createHttpServer();\n\nvar routeMatcher = new vertx.RouteMatcher();\n\nrouteMatcher.put('/:blogname/:post', function(req) {        \n    var blogName = req.params().blogname;\n    var post = req.params().post;\n    req.response.end('blogname is ' + blogName + ', post is ' + post);\n});\n\nserver.requestHandler(routeMatcher).listen(8080, 'localhost');\n```\n\n----------------------------------------\n\nTITLE: Configuring SSL Server with Certificate\nDESCRIPTION: Setting up a TCP server with SSL/TLS support using a keystore for server certificates.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_js.md#2025-04-19_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nvar server = vertx.createNetServer().\n                   .ssl(true)\n                   .keyStorePath('/path/to/your/keystore/server-keystore.jks')\n                   .keyStorePassword('password');\n```\n\n----------------------------------------\n\nTITLE: Creating a SockJS Server in Vert.x (Groovy)\nDESCRIPTION: Shows how to create a SockJS server in Vert.x by wrapping an HTTP server. SockJS provides a WebSocket-like interface with fallback transport options for browsers or networks that don't support WebSockets.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_groovy.md#2025-04-19_snippet_67\n\nLANGUAGE: groovy\nCODE:\n```\ndef httpServer = vertx.createHttpServer()\n\ndef sockJSServer = vertx.createSockJSServer(httpServer)\n```\n\n----------------------------------------\n\nTITLE: Extracting Path Parameters in Vert.x Route Matcher\nDESCRIPTION: Demonstrates how to extract parameters from the request path using the RouteMatcher in Vert.x. Uses colon notation to define parameter names in the route pattern.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_ruby.md#2025-04-19_snippet_78\n\nLANGUAGE: ruby\nCODE:\n```\nserver = Vertx::HttpServer.new\n\nroute_matcher = Vertx::RouteMatcher.new\n\nroute_matcher.put('/:blogname/:post') do |req|\n    blogName = req.params['blogname']\n    post = req.params['post']\n    req.response.end(\"blogname is #{blogName} post is #{post}\")\nend\n\nserver.request_handler(route_matcher).listen(8080, 'localhost')\n```\n\n----------------------------------------\n\nTITLE: Publishing Messages on the Vert.x Event Bus\nDESCRIPTION: Shows how to publish a message to all handlers registered at a specific address on the Vert.x event bus.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_js.md#2025-04-19_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\neb.publish('test.address', 'hello world');\n```\n\n----------------------------------------\n\nTITLE: Contract Driven Development with Vert.x Web OpenAPI\nDESCRIPTION: Shows how to implement API endpoints using OpenAPI specification with router factory, including operation handlers, security handlers, and error handling.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/releases/2020-05-25-vertx-4-milestone5-release.md#2025-04-19_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nRouterFactory.create(vertx, \"src/main/resources/petstore.yaml\",\n  routerFactoryAsyncResult -> {\n  if (routerFactoryAsyncResult.succeeded()) {\n    RouterFactory routerFactory = routerFactoryAsyncResult.result();\n    RouterFactoryOptions options = new RouterFactoryOptions();\n    routerFactory.setOptions(options);\n    routerFactory.operation(\"listPets\").handler(routingContext -> {\n      routingContext.response().setStatusMessage(\"Called listPets\").end();\n    }).failureHandler(routingContext -> {\n      Throwable failure = routingContext.failure();\n      if (failure instanceof BadRequestException)\n        routingContext\n          .response()\n          .setStatusCode(400)\n          .putHeader(\"content-type\", \"application/json\")\n          .end(((BadRequestException)failure).toJson().toBuffer());\n    });\n\n    routerFactory.securityHandler(\n      \"api_key\",\n      JWTAuthHandler.create(jwtAuth)\n    );\n\n    Router router = routerFactory.createRouter();\n  } else {\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Up Vert.x Test Environment in Java\nDESCRIPTION: This snippet shows how to set up a Vert.x test environment, including creating a Vert.x instance, finding a free port, and deploying a verticle with configuration.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/intro-series/2015-08-03-post-04-unit-and-integration-tests.md#2025-04-19_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n@Before\npublic void setUp(TestContext context) throws IOException {\n  vertx = Vertx.vertx();\n  ServerSocket socket = new ServerSocket(0);\n  port = socket.getLocalPort();\n  socket.close();\n  DeploymentOptions options = new DeploymentOptions()\n      .setConfig(new JsonObject().put(\"http.port\", port)\n      );\n  vertx.deployVerticle(MyFirstVerticle.class.getName(), options, context.asyncAssertSuccess());\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MongoDB Update Operation in Vert.x REST Handler\nDESCRIPTION: REST handler method that updates whisky document fields using MongoDB $set operator. Handles document selection by ID and returns updated object in response.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/intro-series/2015-11-30-post-06-combine-vertx-and-mongo-to-build-a-giant.md#2025-04-19_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nprivate void updateOne(RoutingContext routingContext) {\n\tfinal String id = routingContext.request().getParam(\"id\");\n\tJsonObject json = routingContext.getBodyAsJson();\n\tif (id == null || json == null) {\n\t  routingContext.response().setStatusCode(400).end();\n\t} else {\n\t  mongo.update(COLLECTION,\n\t      new JsonObject().put(\"_id\", id),\n\t      new JsonObject()\n\t          .put(\"$set\", json),\n\t      v -> {\n\t        if (v.failed()) {\n\t          routingContext.response().setStatusCode(404).end();\n\t        } else {\n\t          routingContext.response()\n\t              .putHeader(\"content-type\", \"application/json; charset=utf-8\")\n\t              .end(Json.encodePrettily(\n                  new Whisky(id, json.getString(\"name\"),\n                    json.getString(\"origin\"))));\n\t        }\n\t      });\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication Requirements for SockJS Bridge in Groovy\nDESCRIPTION: Example of configuring a SockJS bridge to require authentication for specific message types. This ensures certain operations can only be performed by authenticated users.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_groovy.md#2025-04-19_snippet_74\n\nLANGUAGE: groovy\nCODE:\n```\npermitted << [\"address\": \"demo.persistor\",\n              \"match\": [ \"action\": \"save\",\n                         \"collection\": \"orders\"],\n              \"requires_auth\": true]\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAPI3RouterFactory with Event Bus Services in Vert.x\nDESCRIPTION: Creates and configures an OpenAPI3RouterFactory instance to handle HTTP requests by mounting services defined through x-vertx-event-bus extensions. The code initializes a router factory from a spec file, mounts services automatically based on extensions, creates an HTTP server, and sets up request handling.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2018-12-13-vertx-web-api-service.md#2025-04-19_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nOpenAPI3RouterFactory.create(this.vertx, \"my_spec.yaml\", openAPI3RouterFactoryAsyncResult -> {\n  if (openAPI3RouterFactoryAsyncResult.succeeded()) {\n    OpenAPI3RouterFactory routerFactory = openAPI3RouterFactoryAsyncResult.result();\n    // Mount services on event bus based on extensions\n    routerFactory.mountServicesFromExtensions(); // <- Pure magic happens!\n    // Generate the router\n    Router router = routerFactory.getRouter();\n    server = vertx.createHttpServer(new HttpServerOptions().setPort(8080));\n    server.requestHandler(router).listen();\n    // Initialization completed\n  } else {\n    // Something went wrong during router factory initialization\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: SockJS Bridge with Authorization Requirements (JavaScript)\nDESCRIPTION: Demonstrates how to configure a message filter that requires user authentication before allowing the message to pass through the bridge. The example shows a filter for find operations on an albums collection.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_js.md#2025-04-19_snippet_76\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  address : 'demo.persistor',\n  match : {\n    action : 'find',\n    collection : 'albums'\n  },\n  requires_auth: true\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a WebSocket Server in Vert.x using JavaScript\nDESCRIPTION: This code demonstrates how to create a basic WebSocket server in Vert.x by setting a websocketHandler on an HTTP server instance. The server listens on port 8080 and localhost.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_js.md#2025-04-19_snippet_62\n\nLANGUAGE: javascript\nCODE:\n```\nvar server = vertx.createHttpServer();\n\nserver.websocketHandler(function(websocket) {\n  \n  // A WebSocket has connected!\n  \n}).listen(8080, 'localhost');\n```\n\n----------------------------------------\n\nTITLE: Creating a TCP Client and Connecting to a Server in Vert.x with Ruby\nDESCRIPTION: Creates a NetClient and establishes a connection to a server at port 1234 on localhost. A connect handler is called when the connection is established, printing a message.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_ruby.md#2025-04-19_snippet_29\n\nLANGUAGE: ruby\nCODE:\n```\nclient = Vertx::NetClient.new\n\nclient.connect(1234, 'localhost') do |sock|\n    puts 'We have connected'\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Auction API Router in Vert.x\nDESCRIPTION: Setup of a Vert.x router for handling auction-related HTTP endpoints. Configures routes with JSON content type handling and defines GET and PATCH endpoints for auction operations.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2016-01-15-real-time-bidding-with-websockets-and-vertx.md#2025-04-19_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nprivate Router auctionApiRouter() {\n    AuctionRepository repository = new AuctionRepository(vertx.sharedData());\n    AuctionValidator validator = new AuctionValidator(repository);\n    AuctionHandler handler = new AuctionHandler(repository, validator);\n\n    Router router = Router.router(vertx);\n    router.route().handler(BodyHandler.create());\n\n    router.route().consumes(\"application/json\");\n    router.route().produces(\"application/json\");\n\n    router.get(\"/auctions/:id\").handler(handler::handleGetAuction);\n    router.patch(\"/auctions/:id\").handler(handler::handleChangeAuctionPrice);\n\n    return router;\n}\n```\n\n----------------------------------------\n\nTITLE: Traditional vs Asynchronous JDBC Query Example\nDESCRIPTION: Comparison between traditional synchronous JDBC query and asynchronous Vert.x JDBC query implementation.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/intro-series/2015-10-19-post-05-using-the-asynchronous-sql-client.md#2025-04-19_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nconnection.query(\"SELECT * FROM Products\", result -> {\n\t\t// do something with the result\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Product Creation and Deletion with Rest-Assured\nDESCRIPTION: Integration test that validates the full lifecycle of a product through the API. Creates a new product, verifies it was created correctly, confirms it can be retrieved, deletes it, and verifies it's no longer accessible.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/intro-series/2015-08-03-post-04-unit-and-integration-tests.md#2025-04-19_snippet_14\n\nLANGUAGE: java\nCODE:\n```\n@Test\npublic void checkWeCanAddAndDeleteAProduct() {\n  // Create a new bottle and retrieve the result (as a Whisky instance).\n  Whisky whisky = given()\n      .body(\"{\\\"name\\\":\\\"Jameson\\\", \\\"origin\\\":\\\"Ireland\\\"}\").request().post(\"/api/whiskies\").thenReturn().as(Whisky.class);\n  assertThat(whisky.getName()).isEqualToIgnoringCase(\"Jameson\");\n  assertThat(whisky.getOrigin()).isEqualToIgnoringCase(\"Ireland\");\n  assertThat(whisky.getId()).isNotZero();\n  // Check that it has created an individual resource, and check the content.\n  get(\"/api/whiskies/\" + whisky.getId()).then()\n      .assertThat()\n      .statusCode(200)\n      .body(\"name\", equalTo(\"Jameson\"))\n      .body(\"origin\", equalTo(\"Ireland\"))\n      .body(\"id\", equalTo(whisky.getId()));\n  // Delete the bottle\n  delete(\"/api/whiskies/\" + whisky.getId()).then().assertThat().statusCode(204);\n  // Check that the resource is not available anymore\n  get(\"/api/whiskies/\" + whisky.getId()).then()\n      .assertThat()\n      .statusCode(404);\n}\n```\n\n----------------------------------------\n\nTITLE: HTTP Client Request Creation in Vert.x 4\nDESCRIPTION: Demonstrates the new asynchronous HTTP request creation pattern that ensures connection slot availability before request creation. This change prevents potential data races when using the HTTP client outside the event-loop.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/releases/2020-09-25-vertx-4-beta3-release.md#2025-04-19_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n// Created a request\nHttpClientRequest request = client.get(\"/some-uri\");\n\n// Connect to the server or reuse a connection from the pool and then try to send the request\nrequest.end();\n\n// Since Beta3\nclient.get(\"/some-uri\", ar -> {\n  // The client connected to the server or reused a connection from the pool\n  if (ar.succeeded()) {\n    HttpClientRequest request = ar.result();\n\n    // Send the request\n    request.end();\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Keycloak OAuth2 Integration\nDESCRIPTION: Setup of OAuth2 client options and Keycloak authentication integration using OpenID Connect discovery endpoint.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2020-03-09-easy-sso-for-vertx-with-keycloak.md#2025-04-19_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nOAuth2ClientOptions clientOptions = new OAuth2ClientOptions()\n    .setFlow(OAuth2FlowType.AUTH_CODE)\n    .setSite(System.getProperty(\"oauth2.issuer\", \"http://localhost:8080/auth/realms/vertx\"))\n    .setClientID(System.getProperty(\"oauth2.client_id\", \"demo-client\"))\n    .setClientSecret(System.getProperty(\"oauth2.client_secret\", \"1f88bd14-7e7f-45e7-be27-d680da6e48d8\"));\n```\n\n----------------------------------------\n\nTITLE: Routing HTTP Requests with Path Matching in Ruby\nDESCRIPTION: Demonstrates how to route HTTP requests to different handlers based on the request path. This example routes GET requests for /animals/dogs and /animals/cats to separate handlers.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_ruby.md#2025-04-19_snippet_79\n\nLANGUAGE: ruby\nCODE:\n```\nserver = Vertx::HttpServer.new\n\nroute_matcher = Vertx::RouteMatcher.new\n\nroute_matcher.get('/animals/dogs') do |req|\n    req.response.end('You requested dogs')\nend\n\nroute_matcher.get('/animals/cats') do |req|\n    req.response.end('You requested cats')\nend\n\nserver.request_handler(route_matcher).listen(8080, 'localhost')\n```\n\n----------------------------------------\n\nTITLE: Protecting Routes with JWTAuthHandler in Vert.x\nDESCRIPTION: Configures the Vert.x router with JWT authorization for API endpoints. This code sets up the router and applies the JWTAuthHandler middleware to all routes matching the pattern '/api/*'.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2020-10-01-jwt-auth-with-keycloak.md#2025-04-19_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nprivate Future<Startup> setupRouter(Startup startup) {\n\n    router = Router.router(vertx);\n\n    router.route(\"/api/*\").handler(JWTAuthHandler.create(jwtAuth));\n\n    return Future.succeededFuture(startup);\n}\n\nprivate Future<Startup> setupRoutes(Startup startup) {\n\n    router.get(\"/api/greet\").handler(this::handleGreet);\n    router.get(\"/api/user\").handler(this::handleUserData);\n    router.get(\"/api/admin\").handler(this::handleAdminData);\n\n    return Future.succeededFuture(startup);\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to Redis Using New Client API in Vert.x 3.9.0\nDESCRIPTION: Shows how to use the new Redis client API backported from Vert.x 4.0, supporting connection to single node, sentinel or cluster of redis nodes.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/releases/2020-04-02-vertx-3.9.0-release.md#2025-04-19_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nRedis.createClient(\n      vertx,\n      new RedisOptions()\n        .setConnectionString(\"redis://localhost:7006\"))\n      .send(Request.cmd(Command.PING), send -> {\n        if (send.succeeded()) {\n          // Should have received a pong...\n        }\n      });\n```\n\n----------------------------------------\n\nTITLE: Extracting Named Parameters from URL Paths in Vert.x JavaScript\nDESCRIPTION: This snippet demonstrates how to create a route matcher that extracts named parameters from the URL path using colon notation. It sets up a PUT request handler that extracts 'blogname' and 'post' parameters from the URL pattern '/:blogname/:post'.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_js.md#2025-04-19_snippet_61\n\nLANGUAGE: javascript\nCODE:\n```\nvar server = vertx.createHttpServer();\n\nvar routeMatcher = new vertx.RouteMatcher();\n\nrouteMatcher.put('/:blogname/:post', function(req) {        \n    var blogName = req.params().get('blogname');\n    var post = req.params().get('post');\n    req.response().end('blogname is ' + blogName + ', post is ' + post);\n});\n\nserver.requestHandler(routeMatcher).listen(8080, 'localhost');\n```\n\n----------------------------------------\n\nTITLE: Inserting Initial Data into MongoDB\nDESCRIPTION: Java method to check if the MongoDB collection is empty and insert initial data if needed. It demonstrates counting documents and inserting JSON objects.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/intro-series/2015-11-30-post-06-combine-vertx-and-mongo-to-build-a-giant.md#2025-04-19_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nprivate void createSomeData(Handler<AsyncResult<Void>> next, Future<Void> fut) {\n\tWhisky bowmore = new Whisky(\"Bowmore 15 Years Laimrig\", \"Scotland, Islay\");\n\tWhisky talisker = new Whisky(\"Talisker 57Â° North\", \"Scotland, Island\");\n\tSystem.out.println(bowmore.toJson());\n\t// Do we have data in the collection ?\n\tmongo.count(COLLECTION, new JsonObject(), count -> {\n\t  if (count.succeeded()) {\n\t    if (count.result() == 0) {\n\t      // no whiskies, insert data\n\t      mongo.insert(COLLECTION, bowmore.toJson(), ar -> {\n\t        if (ar.failed()) {\n\t          fut.fail(ar.cause());\n\t        } else {\n\t          mongo.insert(COLLECTION, talisker.toJson(), ar2 -> {\n\t            if (ar2.failed()) {\n\t              fut.failed();\n\t            } else {\n\t              next.handle(Future.<Void>succeededFuture());\n\t            }\n\t          });\n\t        }\n\t      });\n\t    } else {\n\t      next.handle(Future.<Void>succeededFuture());\n\t    }\n\t  } else {\n\t    // report the error\n\t    fut.fail(count.cause());\n\t  }\n\t});\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing RSS Channels Endpoint Handler in Vert.x\nDESCRIPTION: Java method that handles the GET request for retrieving RSS channels. It executes Cassandra queries asynchronously and transforms the results into JSON response.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2018-09-05-the-second-step-rss-reader.md#2025-04-19_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nprivate void getRssChannels(RoutingContext ctx) {\n    String userId = ctx.request().getParam(\"user_id\");\n    if (userId == null) {\n        responseWithInvalidRequest(ctx);\n    } else {\n        Future<List<Row>> future = Future.future();\n        client.executeWithFullFetch(selectRssLinksByLogin.bind(userId), future);\n        future.compose(rows -> {\n            List<String> links = rows.stream()\n                    .map(row -> row.getString(0))\n                    .collect(Collectors.toList());\n\n            return CompositeFuture.all(\n                    links.stream().map(selectChannelInfo::bind).map(statement -> {\n                        Future<List<Row>> channelInfoRow = Future.future();\n                        client.executeWithFullFetch(statement, channelInfoRow);\n                        return channelInfoRow;\n                    }).collect(Collectors.toList())\n            );\n        }).setHandler(h -> {\n            if (h.succeeded()) {\n                CompositeFuture result = h.result();\n                List<List<Row>> results = result.list();\n                List<Row> list = results.stream()\n                        .flatMap(List::stream)\n                        .collect(Collectors.toList());\n                JsonObject responseJson = new JsonObject();\n                JsonArray channels = new JsonArray();\n\n                list.forEach(eachRow -> channels.add(\n                        new JsonObject()\n                                .put(\"description\", eachRow.getString(0))\n                                .put(\"title\", eachRow.getString(1))\n                                .put(\"link\", eachRow.getString(2))\n                                .put(\"rss_link\", eachRow.getString(3))\n                ));\n\n                responseJson.put(\"channels\", channels);\n                ctx.response().end(responseJson.toString());\n            } else {\n                log.error(\"failed to get rss channels\", h.cause());\n                ctx.response().setStatusCode(500).end(\"Unable to retrieve the info from C*\");\n            }\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a SockJS Server in Vert.x\nDESCRIPTION: This code demonstrates how to create a SockJS server in Vert.x by first creating an HTTP server and then using the createSockJSServer function. The server is then started on port 8080.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_js.md#2025-04-19_snippet_67\n\nLANGUAGE: javascript\nCODE:\n```\nvar httpServer = vertx.createHttpServer();\n\nvar sockJSServer = vertx.createSockJSServer(httpServer);\n\nvar config = { prefix: '/echo' };\n\nsockJSServer.installApp(config, function(sock) {\n\n    var p = new vertx.Pump(sock, sock);\n    \n    p.start();\n});\n\nhttpServer.listen(8080);\n```\n\n----------------------------------------\n\nTITLE: Adding Operation Handler\nDESCRIPTION: Demonstrates how to add a request handler for a specific OpenAPI operation using its operationId.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2017-06-12-openapi3-vertx-web-support.md#2025-04-19_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nrouterFactory.addHandlerByOperationId(\"listPets\", routingContext -> {\n    // Handle listPets operation (GET /pets)\n}, routingContext -> {\n    // Handle failure\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring SockJS Bridge with Message Filtering in Vert.x (JavaScript)\nDESCRIPTION: Creates and configures a SockJS bridge with inbound and outbound filters to control message flow between clients and server. The example demonstrates how to set up address filtering, pattern matching with regular expressions, and message structure validation.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_js.md#2025-04-19_snippet_74\n\nLANGUAGE: javascript\nCODE:\n```\nvar httpServer = vertx.createHttpServer();\n\nvar sockJSServer = vertx.createSockJSServer(httpServer);\n\nsockJSServer.bridge({prefix : '/eventbus'},\n  [\n    // Let through any messages sent to 'demo.orderMgr'\n    {\n      address : 'demo.orderMgr'\n    },\n    // Allow calls to the address 'demo.persistor' as long as the messages\n    // have an action field with value 'find' and a collection field with value\n    // 'albums'\n    {\n      address : 'demo.persistor',\n      match : {\n        action : 'find',\n        collection : 'albums'\n      }\n    },\n    // Allow through any message with a field `wibble` with value `foo`.\n    {\n      match : {\n        wibble: 'foo'\n      }\n    }\n  ],\n  [\n    // Let through any messages coming from address 'ticker.mystock'\n    {\n      address : 'ticker.mystock'\n    },\n    // Let through any messages from addresses starting with \"news.\" (e.g. news.europe, news.usa, etc)\n    {\n      address_re : 'news\\\\..+'\n    }\n  ]\n  );\n\n\nhttpServer.listen(8080);\n```\n\n----------------------------------------\n\nTITLE: Deploying Multiple Verticle Instances in Vert.x\nDESCRIPTION: Demonstrates how to deploy multiple instances of a verticle or module in Vert.x. This allows for better utilization of server cores and improved scalability.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_js.md#2025-04-19_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ncontainer.deployVerticle(\"foo.js\", 10);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncontainer.deployModule(\"io.vertx~some-mod~1.0\", 10);\n```\n\n----------------------------------------\n\nTITLE: Using Vert.x 3.6 Transaction Management Tools\nDESCRIPTION: Demonstrates the use of Vert.x 3.6 Observable transformers to simplify transaction management in database operations.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2018-07-02-simplified-transaction-management-vertx-rxjava.md#2025-04-19_snippet_2\n\nLANGUAGE: java\nCODE:\n```\ndbClient.rxGetConnection().flatMap(sqlConnection -> {\n  return sqlConnection.rxExecute(\"INSERT INTO albums (name) VALUES ('The Israelites')\")\n    .andThen(sqlConnection.rxExecute(\"INSERT INTO tracks (album, name) VALUES ('The Israelites', 'Israelites')\"))\n    .andThen(sqlConnection.rxExecute(\"INSERT INTO tracks (album, name) VALUES ('The Israelites', 'Too Much Too Soon')\"))\n    .andThen(sqlConnection.rxQuery(\"SELECT name FROM tracks WHERE album = 'The Israelites'\").map(ResultSet::getResults))\n    .compose(SQLClientHelper.txSingleTransformer(sqlConnection))\n    .doFinally(sqlConnection::close);\n}).map(rows -> {\n  // Transform DB rows into a client-friendly JSON object\n}).subscribe(json -> {\n  // Send JSON to the client\n}, t -> {\n  // Send error to the client\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Secure Bridge with Message Filtering\nDESCRIPTION: Sets up a secure SockJS bridge with specific message filtering rules for both inbound and outbound traffic, including pattern matching and structure-based filtering.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_js.md#2025-04-19_snippet_72\n\nLANGUAGE: javascript\nCODE:\n```\nvar httpServer = vertx.createHttpServer();\n\nvar sockJSServer = vertx.createSockJSServer(httpServer);\n\nsockJSServer.bridge({prefix : '/eventbus'},\n  [\n    // Let through any messages sent to 'demo.orderMgr'\n    {\n      address : 'demo.orderMgr'\n    },\n    // Allow calls to the address 'demo.persistor' as long as the messages\n    // have an action field with value 'find' and a collection field with value\n    // 'albums'\n    {\n      address : 'demo.persistor',\n      match : {\n        action : 'find',\n        collection : 'albums'\n      }\n    },\n    // Allow through any message with a field `wibble` with value `foo`.\n    {\n      match : {\n        wibble: 'foo'\n      }\n    }\n  ],\n  [\n    // Let through any messages coming from address 'ticker.mystock'\n    {\n      address : 'ticker.mystock'\n    },\n    // Let through any messages from addresses starting with \"news.\" (e.g. news.europe, news.usa, etc)\n    {\n      address_re : 'news\\\\..+'\n    }\n  ]\n  );\n\n\nserver.listen(8080);\n```\n\n----------------------------------------\n\nTITLE: Using Vert.x Pump for Simplified Flow Control\nDESCRIPTION: A simplified implementation using Vert.x's Pump utility class that automatically handles all flow control mechanics between a ReadStream and WriteStream.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_js.md#2025-04-19_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nvar server = vertx.createNetServer();\n\nserver.connectHandler(function(sock) {\n\n    var pump = new vertx.Pump(sock, sock);\n    pump.start();\n            \n}).listen(1234, 'localhost');\n```\n\n----------------------------------------\n\nTITLE: Implementing Client-Side EventBus Consumer with JavaScript\nDESCRIPTION: JavaScript code that connects to the Vert.x EventBus via SockJS, listens for CPU load updates, and manages the data queue for visualization. This handles the real-time data reception from the server.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2015-07-01-vertx3-web-easy-as-pi.md#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n...\nvar eb = new vertx.EventBus(window.location + \"eventbus\");\n\neb.onopen = function () {\n  eb.registerHandler(\"load\", function (msg) {\n    if (data.length === 25) {\n      // when length of data equal 25 then pop data[0]\n      data.shift();\n    }\n    data.push({\n      \"creatTime\": new Date(msg.creatTime),\n      \"cpuTime\": msg.cpuTime\n    });\n    render();\n  });\n};\n...\n```\n\n----------------------------------------\n\nTITLE: Socket Echo Server with Complete Flow Control\nDESCRIPTION: Full implementation of a Vert.x Net server with proper flow control, pausing when the write queue is full and resuming when it drains.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_js.md#2025-04-19_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nvar server = vertx.createNetServer();\n\nserver.connectHandler(function(sock) {\n\n    sock.dataHandler(function(buffer) {\n  \n        if (!sock.writeQueueFull()) {      \n            sock.write(buffer); \n        } else {\n            sock.pause();\n            \n            sock.drainHandler(function() {\n                sock.resume();\n            });\n        }\n    });\n            \n}).listen(1234, 'localhost');\n```\n\n----------------------------------------\n\nTITLE: Implementing HTTP Server Verticle in Scala\nDESCRIPTION: Example of a Scala verticle that creates an HTTP server with a basic route handler. Shows usage of Router, Future, and HTTP server setup in Vert.x.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2017-03-16-vertx-lang-scala.md#2025-04-19_snippet_1\n\nLANGUAGE: scala\nCODE:\n```\npackage io.vertx.scala.sbt\n\nimport io.vertx.lang.scala.ScalaVerticle\nimport io.vertx.scala.ext.web.Router\n\nimport scala.concurrent.Future\n\nclass HttpVerticle extends ScalaVerticle {\n\n  override def startFuture(): Future[Unit] = {\n    val router = Router.router(vertx)\n    val route = router\n      .get(\"/hello\")\n        .handler(_.response().end(\"world\"))\n\n    vertx\n      .createHttpServer()\n      .requestHandler(router.accept)\n      .listenFuture(8666, \"0.0.0.0\")\n        .map(_ => ())\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Hello TCP Server with Vert.x3\nDESCRIPTION: A TCP server implementation using Vert.x that responds to all connections with 'Hello World!' and then closes the connection. It demonstrates creating a TCP server, handling connections, and writing data to sockets.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2015-07-13-vertx3-says-hello-to-npm-users.md#2025-04-19_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar server = vertx.createNetServer();\nserver.connectHandler(function (socket) {\n  socket.write(\"Hello World!\\n\");\n  socket.close();\n});\n\nserver.listen(7000, \"localhost\");\n```\n\n----------------------------------------\n\nTITLE: Setting an Exception Handler on a Socket in Vert.x with Ruby\nDESCRIPTION: Shows how to set an exception handler on a socket to handle errors that might occur during the connection. The handler outputs a message when an exception occurs.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_ruby.md#2025-04-19_snippet_27\n\nLANGUAGE: ruby\nCODE:\n```\nserver = Vertx::NetServer.new\n\nserver.connect_handler do |sock|\n\n    sock.exception_handler { puts 'Oops. Something went wrong' }\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Future-based NetClient Interface in Java\nDESCRIPTION: Demonstrates the evolution from callback-based to future-based API in Vert.x 4, showing both the traditional 3.x callback approach and the new 4.0 Future-based method.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/releases/2019-09-19-vertx-4-milestone3-release.md#2025-04-19_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic interface NetClient {\n\n  // Since 3.0\n  void connect(int port, String host, Handler<AsyncResult<NetSocket>> handler);\n\n  // New in 4.0\n  Future<NetSocket> connect(int port, String host);\n}\n```\n\n----------------------------------------\n\nTITLE: NetServer with Complete Flow Control in Groovy\nDESCRIPTION: Creates a NetServer with complete flow control implementation that pauses the socket when the write queue is full and resumes it when the queue drains. This prevents both memory exhaustion and data loss.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_groovy.md#2025-04-19_snippet_41\n\nLANGUAGE: groovy\nCODE:\n```\ndef server = vertx.createNetServer()\n\nserver.connectHandler { sock ->\n    sock.dataHandler { buffer ->\n        if (!sock.writeQueueFull) {\n            sock.write(buffer)\n        } else {\n            sock.pause()\n            sock.drainHandler { sock.resume() }\n        }\n    }\n}.listen(1234, \"localhost\")\n```\n\n----------------------------------------\n\nTITLE: Configuring SSL Server with Client Authentication in Vert.x\nDESCRIPTION: Sets up a TCP server with SSL enabled and client certificate authentication using keystores and truststores.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_groovy.md#2025-04-19_snippet_34\n\nLANGUAGE: groovy\nCODE:\n```\ndef server = vertx.createNetServer(SSL: true,\n                                       keyStorePath: \"/path/to/your/keystore/server-keystore.jks\",\n                                       keyStorePassword: \"password\"),\n                                       trustStorePath: \"/path/to/your/truststore/server-truststore.jks\",\n                                       trustStorePassword: \"password\",\n                                       clientAuthRequired: true)\n```\n\n----------------------------------------\n\nTITLE: Configuring Upload Limits in Vert.x\nDESCRIPTION: Shows how to set upload size limits to prevent DDoS attacks through file uploads by implementing a maximum body size limit.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2015-09-14-writing-secure-vertx-web-apps.md#2025-04-19_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic class App extends AbstractVerticle {\n\n  private static final int KB = 1024;\n  private static final int MB = 1024 * KB;\n\n  @Override\n  public void start() {\n\n    Router router = Router.router(vertx);\n    router.route().handler(BodyHandler.create().setBodyLimit(50 * MB));\n```\n\n----------------------------------------\n\nTITLE: Implementing article retrieval endpoint in Java with Vert.x\nDESCRIPTION: Method to handle GET requests for retrieving articles by RSS link, executing the prepared Cassandra query and formatting the response as JSON.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2018-12-06-the-last-step-rss-reader.md#2025-04-19_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nprivate void getArticles(RoutingContext ctx) {\n    String link = ctx.request().getParam(\"link\");\n    if (link == null) {\n        responseWithInvalidRequest(ctx);\n    } else {\n        client.executeWithFullFetch(selectArticlesByRssLink.bind(link), handler -> {\n            if (handler.succeeded()) {\n                List<Row> rows = handler.result();\n\n                JsonObject responseJson = new JsonObject();\n                JsonArray articles = new JsonArray();\n\n                rows.forEach(eachRow -> articles.add(\n                        new JsonObject()\n                                .put(\"title\", eachRow.getString(0))\n                                .put(\"link\", eachRow.getString(1))\n                                .put(\"description\", eachRow.getString(2))\n                                .put(\"pub_date\", eachRow.getTimestamp(3).getTime())\n                ));\n\n                responseJson.put(\"articles\", articles);\n                ctx.response().end(responseJson.toString());\n            } else {\n                log.error(\"failed to get articles for \" + link, handler.cause());\n                ctx.response().setStatusCode(500).end(\"Unable to retrieve the info from C*\");\n            }\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring an SSL Server with Server Certificates\nDESCRIPTION: Code for setting up a Vert.x Net server with SSL enabled, specifying the keystore path and password for server certificates.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_js.md#2025-04-19_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nvar server = vertx.createNetServer().\n                   .setSSL(true)\n                   .setKeyStorePath('/path/to/your/keystore/server-keystore.jks')\n                   .setKeyStorePassword('password');\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Vert.x Web Server in Java\nDESCRIPTION: A simple Vert.x Web server implementation that sets up logging, creates an HTTP server, and handles a '/hello' route. It demonstrates the core setup for a Vert.x application.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2018-05-31-vertx-native.md#2025-04-19_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage de.jotschi.examples;\n\nimport java.io.File;\n\nimport io.vertx.core.Vertx;\nimport io.vertx.core.logging.Logger;\nimport io.vertx.core.logging.LoggerFactory;\nimport io.vertx.core.logging.SLF4JLogDelegateFactory;\nimport io.vertx.ext.web.Router;\n\npublic class Runner {\n\n\tpublic static void main(String[] args) {\n\t\t// Use logback for logging\n\t\tFile logbackFile = new File(\"config\", \"logback.xml\");\n\t\tSystem.setProperty(\"logback.configurationFile\", logbackFile.getAbsolutePath());\n\t\tSystem.setProperty(LoggerFactory.LOGGER_DELEGATE_FACTORY_CLASS_NAME, SLF4JLogDelegateFactory.class.getName());\n\t\tLogger log = LoggerFactory.getLogger(Runner.class);\n\n\t\t// Setup the http server\n\t\tlog.info(\"Starting server for: http://localhost:8080/hello\");\n\t\tVertx vertx = Vertx.vertx();\n\t\tRouter router = Router.router(vertx);\n\n\t\trouter.route(\"/hello\").handler(rc -> {\n\t\t\tlog.info(\"Got hello request\");\n\t\t\trc.response().end(\"World\");\n\t\t});\n\n\t\tvertx.createHttpServer()\n\t\t\t.requestHandler(router::accept)\n\t\t\t.listen(8080);\n\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Base Integration Test Class in Java\nDESCRIPTION: Java class that configures the base setup for REST API integration tests. Includes methods annotated with @BeforeClass and @AfterClass to configure Rest-Assured before and after all tests.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/intro-series/2015-08-03-post-04-unit-and-integration-tests.md#2025-04-19_snippet_12\n\nLANGUAGE: java\nCODE:\n```\npackage io.vertx.blog.first;\n\nimport com.jayway.restassured.RestAssured;\nimport org.junit.AfterClass;\nimport org.junit.BeforeClass;\n\npublic class MyRestIT {\n\n  @BeforeClass\n  public static void configureRestAssured() {\n    RestAssured.baseURI = \"http://localhost\";\n    RestAssured.port = Integer.getInteger(\"http.port\", 8080);\n  }\n\n  @AfterClass\n  public static void unconfigureRestAssured() {\n    RestAssured.reset();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating SockJS Bridge in Groovy\nDESCRIPTION: Example of setting up a SockJS bridge to connect the event bus to client-side JavaScript. This creates a bridge with a prefix of '/eventbus' and no message filtering.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_groovy.md#2025-04-19_snippet_70\n\nLANGUAGE: groovy\nCODE:\n```\ndef server = vertx.createHttpServer()\n\ndef config = [\"prefix\": \"/eventbus\"]\n\nvertx.createSockJSServer(server).bridge(config, [], [])\n\nserver.listen(8080)\n```\n\n----------------------------------------\n\nTITLE: Implementing WebSocket Echo Server in Vert.x\nDESCRIPTION: This snippet shows how to create a WebSocket echo server that uses a Pump to echo back all data received on the WebSocket connection to the sender.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_js.md#2025-04-19_snippet_63\n\nLANGUAGE: javascript\nCODE:\n```\nvar server = vertx.createHttpServer();\n\nserver.websocketHandler(function(websocket) {\n  \n  var p = new Pump(websocket, websocket);\n  p.start();\n  \n}).listen(8080, 'localhost');\n```\n\n----------------------------------------\n\nTITLE: Implementing Cassandra Query Stream in Java\nDESCRIPTION: Example showing how to use the new Vert.x Cassandra client to stream query results with flow control handling.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/releases/2018-12-03-vertx-3.6.0-release.md#2025-04-19_snippet_0\n\nLANGUAGE: java\nCODE:\n```\ncassandraClient.queryStream(\"SELECT my_string_col FROM my_keyspace.my_table where my_key = 'my_value'\", queryStream -> {\n    if (queryStream.succeeded()) {\n    CassandraRowStream stream = queryStream.result();\n\n    // resume stream when queue is ready to accept buffers again\n    response.drainHandler(v -> stream.resume());\n\n    stream.handler(row -> {\n        String value = row.getString(\"my_string_col\");\n        response.write(value);\n\n        // pause row stream when we buffer queue is full\n        if (response.writeQueueFull()) {\n        stream.pause();\n        }\n    });\n\n    // end request when we reached end of the stream\n    stream.endHandler(end -> response.end());\n\n    } else {\n    queryStream.cause().printStackTrace();\n    // response with internal server error if we are not able to execute given query\n    response\n        .setStatusCode(500)\n        .end(\"Unable to execute the query\");\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Vert.x HTTP Server with ES6 Features\nDESCRIPTION: A simple Vert.x HTTP server implementation using ES6 features like arrow functions and let variables. This code creates a router that handles GET requests to the root path and returns a plain text response.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2015-11-25-vertx-es6-back-to-the-future.md#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar Router = require(\"vertx-web-js/router\");\nvar server = vertx.createHttpServer();\n\nvar router = Router.router(vertx);\n\nrouter.get(\"/\").handler((ctx) => {\n\n    let response = ctx.response();\n    response.putHeader(\"content-type\", \"text/plain\");\n\n    response.end(\"Hello ES6 World!\");\n});\n\nserver.requestHandler(router.accept).listen(8080);\n```\n\n----------------------------------------\n\nTITLE: Using Stream Pipes\nDESCRIPTION: Examples of using the new Pipe API for stream handling with back-pressure support.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/releases/2019-04-02-vertx-3.7.0-release.md#2025-04-19_snippet_14\n\nLANGUAGE: java\nCODE:\n```\nreadStream.pipeTo(writeStream);\n\nreadStream.pipeTo(writeStream, ar -> {\n  if (ar.succeeded()) {\n    System.out.println(\"done\");\n  } else {\n    System.out.println(\"failed \" + ar.cause());\n  }\n});\n\n// The read stream will be paused until the pipe is used\nPipe<Buffer> pipe = readStream.pipe();\ngetAsyncPipe(ar -> {\n  if (ar.succeeded()) {\n    pipe.to(writeStream);\n  } else {\n    pipe.close();\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using Vert.x Web Client for HTTP Requests\nDESCRIPTION: Demonstrates the new Web Client API for making HTTP requests with JSON encoding/decoding and response handling.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2017-02-09-vertx-3.4.0.beta1.md#2025-04-19_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nWebClient client = WebClient.\nclient\n  .get(8080, \"myserver.mycompany.com\", \"/some-uri\")\n  .as(BodyCodec.json(User.class))\n  .send(ar -> {\n    if (ar.succeeded()) {\n\n      HttpResponse<User> response = ar.result();\n      User user = response.body();\n\n      System.out.println(\"Received response with status code\" + response.statusCode() + \" with body \" +\n        user.getFirstName() + \" \" + user.getLastName());\n    } else {\n      System.out.println(\"Something went wrong \" + ar.cause().getMessage());\n    }\n  });\n```\n\n----------------------------------------\n\nTITLE: Random Access Writes with AsyncFile in Vert.x JavaScript\nDESCRIPTION: Demonstrates how to perform random access writes to a file using AsyncFile. The example opens a file and writes the same buffer 'foo' five times at different positions in the file.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_js.md#2025-04-19_snippet_82\n\nLANGUAGE: javascript\nCODE:\n```\nvertx.fileSystem.open('some-file.dat', function(err, asyncFile) {\n            if (err) {\n                log.info('Failed to open file ' + err);\n            } else {\n                // File open, write a buffer 5 times into a file              \n                var buff = new vertx.Buffer('foo');\n                for (var i = 0; i < 5; i++) {\n                    asyncFile.write(buff, buff.length() * i, function(err) {\n                        if (err) {\n                            log.info('Failed to write ' + err);\n                        } else {\n                            log.info('Written ok');\n                        }\n                    });    \n                }\n            }\n        });   \n```\n\n----------------------------------------\n\nTITLE: Implementing SockJS Echo Application in Vert.x with Ruby\nDESCRIPTION: Creates a complete SockJS echo application that listens on a specific prefix. The application echoes back any data it receives using a Pump.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_ruby.md#2025-04-19_snippet_89\n\nLANGUAGE: ruby\nCODE:\n```\nhttpServer = Vertx::HttpServer.new\n\nsockJSServer = Vertx::SockJSServer.new(httpServer)\n\nconfig = { 'prefix' => '/echo' }\n\nsockJSServer.install_app(config) do |sock|\n\n    Vertx::Pump.new(sock, sock).start\n\nend\n\nhttpServer.listen(8080)\n```\n\n----------------------------------------\n\nTITLE: Manual HTTP Response Validation in Vert.x Web Client (Java)\nDESCRIPTION: This snippet shows the traditional way of manually checking HTTP response status and content type in Vert.x Web Client.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2018-12-10-http-response-validation-web-client.md#2025-04-19_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nclient\n  .get(8080, \"myserver.mycompany.com\", \"/some-uri\")\n  .send(ar -> {\n    if (ar.succeeded()) {\n      HttpResponse<Buffer> response = ar.result();\n      if (response.statusCode() == 200 && response.getHeader(\"content-type\").equals(\"application/json\")) {\n        // Decode the body as a json object\n        JsonObject body = response.bodyAsJsonObject();\n      } else {\n        System.out.println(\"Something went wrong \" + response.statusCode());\n      }\n    } else {\n      System.out.println(\"Something went wrong \" + ar.cause().getMessage());\n    }\n  });\n```\n\n----------------------------------------\n\nTITLE: Socket Echo Server Using Vert.x Pump Utility\nDESCRIPTION: Simplified Vert.x Net server implementation that uses the Pump utility to handle flow control automatically, providing the same functionality with less code.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_js.md#2025-04-19_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nvar server = vertx.createNetServer();\n\nserver.connectHandler(function(sock) {\n\n    var pump = new vertx.Pump(sock, sock);\n    pump.start();\n            \n}).listen(1234, 'localhost');\n```\n\n----------------------------------------\n\nTITLE: Hello HTTP Server with Vert.x3\nDESCRIPTION: A simple HTTP server implementation using Vert.x that responds to all requests with 'Hello World!'. It demonstrates creating an HTTP server, handling requests, and sending responses.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2015-07-13-vertx3-says-hello-to-npm-users.md#2025-04-19_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvertx.createHttpServer()\n  .requestHandler(function (req) {\n    req.response()\n      .putHeader(\"content-type\", \"text/plain\")\n      .end(\"Hello World!\");\n}).listen(8080);\n```\n\n----------------------------------------\n\nTITLE: Setting up EventBus Bridge in Ruby\nDESCRIPTION: Creates and configures a SockJS bridge to connect the server-side event bus with client-side JavaScript.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_ruby.md#2025-04-19_snippet_88\n\nLANGUAGE: Ruby\nCODE:\n```\nserver = Vertx::HttpServer.new;\n\nsockJSServer = Vertx::SockJSServer.new(server)\n\nsockJSServer.bridge({'prefix' => '/eventbus'}, [], [])\n\nserver.listen(8080)\n```\n\n----------------------------------------\n\nTITLE: Connecting to WebSockets from HTTP Client in Vert.x\nDESCRIPTION: This example demonstrates how to create a WebSocket connection from an HTTP client in Vert.x by calling the connectWebsocket method with a URI and handler function.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_js.md#2025-04-19_snippet_65\n\nLANGUAGE: javascript\nCODE:\n```\nvar client = vertx.createHttpClient();\n\nclient.connectWebsocket('http://localhost:8080/some-uri', function(websocket) {\n  \n  // WebSocket has connected!\n  \n});\n```\n\n----------------------------------------\n\nTITLE: TCP Echo Server Implementation\nDESCRIPTION: Complete example of a TCP echo server that writes back all received data to the client.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_js.md#2025-04-19_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nvar server = vertx.createNetServer();\n\nserver.connectHandler(function(sock) {\n\n    sock.dataHandler(function(buffer) {\n        sock.write(buffer);\n    });\n  \n}).listen(1234, 'localhost');\n```\n\n----------------------------------------\n\nTITLE: Extracting Path Parameters with Vertx RouteMatcher in Ruby\nDESCRIPTION: Shows how to extract named parameters from URL paths using pattern matching. Path segments prefixed with a colon become named parameters that can be accessed in the request handler.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_ruby.md#2025-04-19_snippet_80\n\nLANGUAGE: ruby\nCODE:\n```\nserver = Vertx::HttpServer.new\n\nroute_matcher = Vertx::RouteMatcher.new\n\nroute_matcher.put('/:blogname/:post') do |req|\n    blogName = req.params['blogname']\n    post = req.params['post']\n    req.response.end(\"blogname is #{blogName} post is #{post}\")\nend\n\nserver.request_handler(route_matcher).listen(8080, 'localhost')\n```\n\n----------------------------------------\n\nTITLE: Hello Console Example with Vert.x3\nDESCRIPTION: A simple Vert.x JavaScript application that prints 'Hello World' to the console. This demonstrates the most basic Vert.x application possible using JavaScript.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2015-07-13-vertx3-says-hello-to-npm-users.md#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Call the console.log function.\nconsole.log(\"Hello World\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Event Bus Bridge with Security Permissions\nDESCRIPTION: Extended web server configuration that enables the SockJS event bus bridge with security rules. The configuration defines inbound permissions allowing client-side requests to query album data from MongoDB, while restricting other operations for security.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/groovy_web_tutorial.md#2025-04-19_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\ndef webServerConf = [\n\n  // Normal web server stuff\n\n  port: 8080,\n  host: 'localhost',\n  bridge: true,\n\n  inbound_permitted: [\n    // Allow calls to get static album data from the persistor\n    [\n      address : 'vertx.mongopersistor',\n      match : [\n        action : 'find',\n        collection : 'albums'\n      ]\n    ]\n  ],\n  outbound_permitted: [ [:] ]\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing WebSocket Echo Server in Vert.x (Groovy)\nDESCRIPTION: Creates a WebSocket server that echoes back all received data to the client using Vert.x Pump. The WebSocket instance implements both ReadStream and WriteStream interfaces, enabling easy data handling.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_groovy.md#2025-04-19_snippet_64\n\nLANGUAGE: groovy\nCODE:\n```\ndef server = vertx.createHttpServer()\n\nserver.websocketHandler{ ws ->\n    Pump.createPump(ws, ws).start()\n}.listen(8080, \"localhost\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Verticle Cleanup with vertxStop Function\nDESCRIPTION: This snippet shows how to implement cleanup logic using the vertxStop function that gets called when a verticle is undeployed. It creates a TCP echo server and logs a message when the verticle is stopped.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_js.md#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar vertx = require('vertx');\nvar console = require('vertx/console');\n\nvertx.createNetServer().connectHandler(function(sock) {\n    new vertx.Pump(sock, sock).start();\n}).listen(1234);\n\nfunction vertxStop() {\n   console.log('Verticle has been undeployed');\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Point-to-Point Messages on Event Bus in Groovy\nDESCRIPTION: Shows how to send a point-to-point message to a single handler on a specific address using the Vert.x event bus.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_groovy.md#2025-04-19_snippet_16\n\nLANGUAGE: Groovy\nCODE:\n```\neb.send(\"test.address\", \"hello world\")\n```\n\n----------------------------------------\n\nTITLE: Requiring Authentication for Messages in SockJS Bridge\nDESCRIPTION: Demonstrates how to configure a message filter with authentication requirements. Messages that match this pattern will only be passed through the bridge if the user is authenticated.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_ruby.md#2025-04-19_snippet_97\n\nLANGUAGE: ruby\nCODE:\n```\n{\n  'address' => 'demo.persistor',\n  'match' => {\n    'action' => 'find',\n    'collection' => 'albums'\n  },\n  'requires_auth` => true\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing REST GET Endpoint with SQL Query\nDESCRIPTION: REST endpoint implementation that retrieves all whisky records from the database and returns them as JSON response.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/intro-series/2015-10-19-post-05-using-the-asynchronous-sql-client.md#2025-04-19_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nprivate void getAll(RoutingContext routingContext) {\n    jdbc.getConnection(ar -> {\n      SQLConnection connection = ar.result();\n      connection.query(\"SELECT * FROM Whisky\", result -> {\n        List<Whisky> whiskies = result.result().getRows().stream().map(Whisky::new).collect(Collectors.toList());\n        routingContext.response()\n            .putHeader(\"content-type\", \"application/json; charset=utf-8\")\n            .end(Json.encodePrettily(whiskies));\n        connection.close(); // Close the connection\t\t\n      });\n    });\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring SockJS Bridge Security in Ruby\nDESCRIPTION: Demonstrates how to secure a SockJS bridge by specifying inbound and outbound message filters. The example shows various match patterns including exact address matching, pattern matching with regular expressions, and message structure matching.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_ruby.md#2025-04-19_snippet_95\n\nLANGUAGE: ruby\nCODE:\n```\nserver = Vertx::HttpServer.new\n    \nsockJSServer = Vertx::SockJSServer.new(server)\n\nsockJSServer.bridge({'prefix' => '/eventbus'},\n  [\n    # Let through any messages sent to 'demo.orderMgr'\n    {\n      'address' => 'demo.orderMgr'\n    },\n    # Allow calls to the address 'demo.persistor' as long as the messages\n    # have an action field with value 'find' and a collection field with value\n    # 'albums'\n    {\n      'address' => 'demo.persistor',\n      'match' => {\n        'action' => 'find',\n        'collection' => 'albums'\n      }\n    },\n    # Allow through any message with a field `wibble` with value `foo`.\n    {\n      'match' => {\n        'wibble' => 'foo'\n      }\n    }\n  ],\n  [\n    # Let through any messages coming from address 'ticker.mystock'\n    {\n      'address' => 'ticker.mystock'\n    },\n    # Let through any messages from addresses starting with \"news.\" (e.g. news.europe, news.usa, etc)\n    {\n      'address_re' => 'news\\\\..+'\n    }\n  ])\n\n\nserver.listen(8080)\n```\n\n----------------------------------------\n\nTITLE: Sending Messages on Event Bus in Vert.x JavaScript\nDESCRIPTION: Examples of sending different types of messages (numbers, booleans, JSON objects) on the Vert.x event bus.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_js.md#2025-04-19_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\neb.send('test.address', 1234);\neb.send('test.address', 3.14159);\n\neb.send('test.address', true);\n\nvar myObj = {\n  name: 'Tim',\n  address: 'The Moon',\n  age: 457\n}\neb.send('test.address', myObj);\n\neb.send('test.address', null);\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple HTTP Server with Vert.x in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a basic HTTP server using Vert.x in JavaScript. It listens on localhost:8080 and responds with 'Hello World!' to all requests.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/install.md#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar vertx = require('vertx');\n\nvertx.createHttpServer().requestHandler(function(req) {\n  req.response.end(\"Hello World!\");\n}).listen(8080, 'localhost');\n```\n\n----------------------------------------\n\nTITLE: Obtaining an Access Token from Keycloak for User Authentication\nDESCRIPTION: Bash script to obtain a JWT access token from Keycloak for a specific user. This example authenticates the user 'tester' with the role 'user' and uses the password grant type to obtain the token.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2020-10-01-jwt-auth-with-keycloak.md#2025-04-19_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nKC_USERNAME=tester\nKC_PASSWORD=test\nKC_CLIENT=vertx-service\nKC_CLIENT_SECRET=ecb85cc5-f90d-4a03-8fac-24dcde57f40c\nKC_REALM=vertx\nKC_URL=http://localhost:8080/auth\nKC_RESPONSE=$(curl  -k \\\n        -d \"username=$KC_USERNAME\" \\\n        -d \"password=$KC_PASSWORD\" \\\n        -d 'grant_type=password' \\\n        -d \"client_id=$KC_CLIENT\" \\\n        -d \"client_secret=$KC_CLIENT_SECRET\" \\\n        \"$KC_URL/realms/$KC_REALM/protocol/openid-connect/token\" \\\n    | jq .)\n\nKC_ACCESS_TOKEN=$(echo $KC_RESPONSE| jq -r .access_token)\necho $KC_ACCESS_TOKEN\n```\n\n----------------------------------------\n\nTITLE: Implementing Secure Logout in Vert.x with CSRF Protection\nDESCRIPTION: Handlers for implementing secure logout functionality with CSRF protection, including session destruction and user redirection.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2020-03-09-easy-sso-for-vertx-with-keycloak.md#2025-04-19_snippet_10\n\nLANGUAGE: java\nCODE:\n```\nprivate void handleLogout(RoutingContext ctx) {\n\n    OAuth2TokenImpl oAuth2Token = (OAuth2TokenImpl) ctx.user();\n    oAuth2Token.logout(res -> {\n\n        if (!res.succeeded()) {\n            // the user might not have been logged out, to know why:\n            respondWith(ctx, 500, \"text/html\", String.format(\"<h1>Logout failed %s</h1>\", res.cause()));\n            return;\n        }\n\n        ctx.session().destroy();\n        ctx.response().putHeader(\"location\", \"/?logout=true\").setStatusCode(302).end();\n    });\n}\n\nprivate String createLogoutForm(RoutingContext ctx) {\n\n    String csrfToken = ctx.get(CSRFHandler.DEFAULT_HEADER_NAME);\n\n    return \"<form action=\\\"/logout\\\" method=\\\"post\\\">\"\n            + String.format(\"<input type=\\\"hidden\\\" name=\\\"%s\\\" value=\\\"%s\\\">\", CSRFHandler.DEFAULT_HEADER_NAME, csrfToken)\n            + \"<button>Logout</button></form>\";\n}\n```\n\n----------------------------------------\n\nTITLE: Compact HTTP Server Creation with Request Handler\nDESCRIPTION: Creates an HTTP server, sets up a request handler, and starts listening in a single chained statement. This is a more concise way to set up a basic HTTP server.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_js.md#2025-04-19_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\nvertx.createHttpServer().requestHandler(function(request) {\n  log.info('An HTTP request has been received');\n}).listen(8080, 'localhost');\n```\n\n----------------------------------------\n\nTITLE: Creating Directories with Vert.x FileSystem in Groovy\nDESCRIPTION: Shows how to create directories with parent directories using the Vert.x FileSystem API. This example creates nested directories 'a/b/c' by setting the createParents parameter to true.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_groovy.md#2025-04-19_snippet_78\n\nLANGUAGE: groovy\nCODE:\n```\nvertx.fileSystem.mkdir(\"a/b/c\", true) { ar->\n    if (ar.succeeded()) {\n        println \"Directory created ok\"\n    } else {\n        log.error(\"Failed to mkdir\", ar.exception)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Socket Echo Server with WriteQueue Check\nDESCRIPTION: Improved Vert.x Net server that checks if the write queue is full before writing data back, which prevents running out of memory but might lose data.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_js.md#2025-04-19_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nvar server = vertx.createNetServer();\n\nserver.connectHandler(function(sock) {\n\n    sock.dataHandler(function(buffer) {\n  \n        if (!sock.writeQueueFull()) {      \n            sock.write(buffer); \n        }\n    });\n            \n}).listen(1234, 'localhost');\n```\n\n----------------------------------------\n\nTITLE: Complete Socket Echo with Flow Control in Vert.x\nDESCRIPTION: A full implementation of proper flow control that pauses the socket when the write queue is full and resumes it when the queue drains, ensuring no data loss or memory issues.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_js.md#2025-04-19_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nvar server = vertx.createNetServer();\n\nserver.connectHandler(function(sock) {\n\n    sock.dataHandler(function(buffer) {\n  \n        sock.write(buffer); \n        if (sock.writeQueueFull()) {      \n            sock.pause();\n            \n            sock.drainHandler(function() {\n                sock.write(buffer);\n                sock.resume();\n            });\n        }\n    });\n            \n}).listen(1234, 'localhost');\n```\n\n----------------------------------------\n\nTITLE: Vert.x Web Redirect Implementation\nDESCRIPTION: Demonstrates how to perform HTTP redirects in Vert.x Web applications.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/releases/2019-09-19-vertx-4-milestone3-release.md#2025-04-19_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nroutingContext.redirect(\"https://securesite.com/\");\n```\n\n----------------------------------------\n\nTITLE: Creating Whisky Data Model Class in Java\nDESCRIPTION: Implementation of a Java bean class representing whisky products with atomic ID generation. The class is designed to work with Jackson for JSON serialization/deserialization.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/intro-series/2015-07-27-post-03-some-rest-with-vertx.md#2025-04-19_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npackage io.vertx.blog.first;\n\nimport java.util.concurrent.atomic.AtomicInteger;\n\npublic class Whisky {\n\n  private static final AtomicInteger COUNTER = new AtomicInteger();\n\n  private final int id;\n  private String name;\n  private String origin;\n\n  public Whisky(String name, String origin) {\n    this.id = COUNTER.getAndIncrement();\n    this.name = name;\n    this.origin = origin;\n  }\n\n  public Whisky() {\n    this.id = COUNTER.getAndIncrement();\n  }\n\n  public String getName() {\n    return name;\n  }\n\n  public String getOrigin() {\n    return origin;\n  }\n\n  public int getId() {\n    return id;\n  }\n\n  public void setName(String name) {\n    this.name = name;\n  }\n\n  public void setOrigin(String origin) {\n    this.origin = origin;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Shared Hash Data in Ruby with Vert.x\nDESCRIPTION: Demonstrates how to use shared hash data structures between verticles in Vert.x, including getting a reference to a shared hash and performing operations on it.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_ruby.md#2025-04-19_snippet_14\n\nLANGUAGE: Ruby\nCODE:\n```\nhash = Vertx::SharedData.getHash('demo.myhash')\n\nhash['some-key'] = 'some-value'\n```\n\nLANGUAGE: Ruby\nCODE:\n```\nhash = Vertx::SharedData.getHash('demo.myhash')\n\nputs(\"value of some-key is #{hash['some-key']}\")\n```\n\n----------------------------------------\n\nTITLE: Registering Event Bus Handler in Vert.x\nDESCRIPTION: Demonstrates how to register a message handler for the event bus on a specific address. Includes basic message logging functionality.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_js.md#2025-04-19_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar eb = vertx.eventBus;\n\nvar myHandler = function(message)) {\n  log.info('I received a message ' + message);\n}\n\neb.registerHandler('test.address', myHandler);\n```\n\n----------------------------------------\n\nTITLE: Serving Static Files with Vert.x HTTP Server\nDESCRIPTION: Demonstrates how to create a simple HTTP server in Vert.x that serves static files from a local directory. It uses the sendFile function to efficiently transfer files directly from disk to the socket.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_js.md#2025-04-19_snippet_51\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar server = vertx.createHttpServer();\n\nserver.requestHandler(function(req) {\n  var file = '';\n  if (req.path() == '/') {\n    file = 'index.html';\n  } else if (req.path().indexOf('..') == -1) {\n    file = req.path();\n  }\n  req.response.sendFile('web/' + file);   \n}).listen(8080, 'localhost');\n```\n\n----------------------------------------\n\nTITLE: Deploying a Verticle Programmatically\nDESCRIPTION: Deploying a verticle from within another verticle using the container.deployVerticle method. The method returns a unique deployment ID.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_groovy.md#2025-04-19_snippet_5\n\nLANGUAGE: groovy\nCODE:\n```\ndef id = container.deployVerticle(main)\n```\n\n----------------------------------------\n\nTITLE: Converting Vert.x streams to RxJava2 Flowable and Observable\nDESCRIPTION: Shows how to convert Vert.x ReadStream<Buffer> to RxJava2 Flowable (back-pressured) and Observable (non-back-pressured) types.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/releases/2017-10-20-vertx-3.5.0-release.md#2025-04-19_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n// Flowable<Buffer> maps to a ReadStream<Buffer>\n// back-pressured stream\nFlowable<Buffer> flowable = asyncFile.toFlowable();\n\n// but we still can get an Observable<Buffer>\n// non back-pressured stream\nObservable<Buffer> flowable = asyncFile.toObservable();\n```\n\n----------------------------------------\n\nTITLE: Bearer Token Authentication for Service Calls in Vert.x\nDESCRIPTION: Handler that demonstrates how to make authenticated calls to protected services using bearer token authentication with WebClient.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2020-03-09-easy-sso-for-vertx-with-keycloak.md#2025-04-19_snippet_9\n\nLANGUAGE: java\nCODE:\n```\nprivate Handler<RoutingContext> createUserInfoHandler(WebClient webClient, String userInfoUrl) {\n\n    return (RoutingContext ctx) -> {\n\n        OAuth2TokenImpl user = (OAuth2TokenImpl) ctx.user();\n\n        URI userInfoEndpointUri = URI.create(userInfoUrl);\n        webClient\n            .get(userInfoEndpointUri.getPort(), userInfoEndpointUri.getHost(), userInfoEndpointUri.getPath())\n            // use the access token for calls to other services protected via JWT Bearer authentication\n            .bearerTokenAuthentication(user.opaqueAccessToken())\n            .as(BodyCodec.jsonObject())\n            .send(ar -> {\n\n                if (!ar.succeeded()) {\n                    respondWith(ctx, 500, \"application/json\", \"{}\");\n                    return;\n                }\n\n                JsonObject body = ar.result().body();\n                respondWithOk(ctx, \"application/json\", body.encode());\n            });\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Vert.x Verticle for CPU Monitoring\nDESCRIPTION: Java implementation of a Vert.x Verticle that collects system CPU load data via MXBean and publishes it to an EventBus. It sets up a web server with SockJS and EventBus bridge to provide real-time updates to the client.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2015-07-01-vertx3-web-easy-as-pi.md#2025-04-19_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class RPiVerticle extends AbstractVerticle {\n\n  private static final OperatingSystemMXBean osMBean;\n\n  static {\n    try {\n      osMBean = ManagementFactory.newPlatformMXBeanProxy(ManagementFactory.getPlatformMBeanServer(),\n          ManagementFactory.OPERATING_SYSTEM_MXBEAN_NAME, OperatingSystemMXBean.class);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n  @Override\n  public void start() {\n\n    Router router = Router.router(vertx);\n\n    router.route(\"/eventbus/*\").handler(SockJSHandler.create(vertx)\n        .bridge(new BridgeOptions().addOutboundPermitted(new PermittedOptions().setAddress(\"load\"))));\n\n    router.route().handler(StaticHandler.create());\n\n    vertx.createHttpServer().requestHandler(router::accept).listen(8080);\n\n    vertx.setPeriodic(1000, t -> vertx.eventBus().publish(\"load\",\n        new JsonObject()\n            .put(\"creatTime\", System.currentTimeMillis())\n            .put(\"cpuTime\", osMBean.getSystemLoadAverage())));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Multiple Web Server Instances in Vert.x\nDESCRIPTION: This snippet demonstrates how to scale up a Vert.x web server by deploying multiple instances. It uses the vertx.deployModule method to start 32 instances of the web server module.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/js_web_tutorial.md#2025-04-19_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nvertx.deployModule('vertx.web-server-v1.0', webServerConf, 32);\n```\n\n----------------------------------------\n\nTITLE: Writing to HTTP Request Body in Vert.x with Groovy\nDESCRIPTION: This snippet demonstrates different ways to write data to the HTTP request body using the Vert.x HTTP client. It covers writing buffers, strings, and handling write completion.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_groovy.md#2025-04-19_snippet_53\n\nLANGUAGE: groovy\nCODE:\n```\ndef myBuffer = ...\nrequest.write(myBuffer)\n\n// Or\n\nrequest << myBuffer\n\nrequest.write(\"hello\")\n\n// Or\n\nrequest << \"hello\"\n\nrequest.write(\"hello\", \"UTF-16\")\n\nrequest.response.write(\"hello\") { println \"It's actually been written\" }\n```\n\n----------------------------------------\n\nTITLE: Implementing Hello World API with Vert.x3\nDESCRIPTION: This Java code snippet implements the Hello World API using Vert.x3. It creates a router that handles GET requests to '/hello' and returns a JSON response with a greeting.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2015-09-17-contract-driven-rest-services-with-vertx-3.md#2025-04-19_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class App extends AbstractVerticle {\n  @Override\n  public void start() {\n    Router router = Router.router(vertx);\n\n    router.get(\"/hello\").handler(rc -> {\n      rc.response()\n          .putHeader(\"content-type\", \"application/json\")\n          .end(new JsonObject().put(\"greeting\", \"Hello World!\").encode());\n    });\n\n    vertx.createHttpServer().requestHandler(router::accept).listen(8080);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and using MQTT Client in Vert.x\nDESCRIPTION: Shows how to create an MQTT client, connect to a broker, publish a message, and disconnect in Vert.x.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/releases/2017-10-20-vertx-3.5.0-release.md#2025-04-19_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nMqttClient mqttClient = MqttClient.create(vertx,\n   new MqttClientOptions()\n     .setPort(BROKER_PORT)\n     .setHost(BROKER_HOST)).connect(ar ->\n  if (ar.succeeded()) {\n    System.out.println(\"Connected to a server\");\n\n    mqttClient.publish(\n      MQTT_TOPIC,\n      Buffer.buffer(MQTT_MESSAGE),\n      MqttQoS.AT_MOST_ONCE,\n      false,\n      false,\n      s -> mqttClient.disconnect(d -> System.out.println(\"Disconnected from server\")));\n  } else {\n    System.out.println(\"Failed to connect to a server\");\n    ar.cause().printStackTrace();\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Embedding Vert.x Core for Echo Server in Java\nDESCRIPTION: Demonstrates how to embed Vert.x core directly to create a simple echo server. It shows creating a Vertx instance, setting up a NetServer, and preventing JVM exit.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/embedding_manual.md#2025-04-19_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class Embedded {\n  public static void main(String[] args) throws Exception {\n\n    Vertx vertx = VertxFactory.newVertx();\n\n    // Create an echo server\n    vertx.createNetServer().connectHandler(new Handler<NetSocket>() {\n      public void handle(final NetSocket socket) {\n        Pump.createPump(socket, socket).start();\n      }\n    }).listen(1234);\n\n    // Prevent the JVM from exiting\n    System.in.read();\n\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating HTTP Echo Server Using Pumping in Vert.x Ruby\nDESCRIPTION: Shows how to create an HTTP server that echoes request headers and body back in the response using a pump. This approach works well for large request bodies that may not fit in memory.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_ruby.md#2025-04-19_snippet_61\n\nLANGUAGE: ruby\nCODE:\n```\nserver = Vertx::HttpServer.new\n\nserver.request_handler do |req|\n\n  req.response.put_headers(req.headers)\n\n  p = Pump.new(req, req.response)\n  p.start\n  \n  req.end_handler { req.response.end }\n\nend.listen(8080, 'localhost')\n```\n\n----------------------------------------\n\nTITLE: Routing with Regular Expressions in Vertx RouteMatcher in Ruby\nDESCRIPTION: Demonstrates using regular expressions for more complex path matching and parameter extraction. Capture groups in the regular expression are converted to numbered parameters (param0, param1, etc.) that can be accessed in the request handler.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_ruby.md#2025-04-19_snippet_81\n\nLANGUAGE: ruby\nCODE:\n```\nserver = Vertx::HttpServer.new\n\nroute_matcher = Vertx::RouteMatcher.new\n\nroute_matcher.all_re(\"\\/([^\\/]+)\\/([^\\/]+)\") do |req|\n    first = req.params['param0']\n    second = req.params['param1']\n    req.response.end(\"first is #{first} second is #{second}\")\nend\n\nserver.request_handler(route_matcher).listen(8080, 'localhost')\n```\n\n----------------------------------------\n\nTITLE: Listing filtered directory contents in Vert.x FileSystem\nDESCRIPTION: Shows how to list directory contents with a regex filter to match only specific files, such as files with a .txt extension.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_ruby.md#2025-04-19_snippet_102\n\nLANGUAGE: ruby\nCODE:\n```\nVertx::FileSystem.read_dir('mydirectory', '.*\\.txt') do |err, res|\n  if !err\n    puts 'Directory contains these .txt files'\n    res.each do |filename|\n        puts filename\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Browser-side WebSocket Implementation with JavaScript\nDESCRIPTION: Client-side JavaScript code for implementing WebSockets in a browser. Handles connection opening, message reception, and connection closing events.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_ruby.md#2025-04-19_snippet_87\n\nLANGUAGE: javascript\nCODE:\n```\n<script>\n\n    var socket = new WebSocket(\"ws://localhost:8080/services/echo\");\n\n    socket.onmessage = function(event) {\n        alert(\"Received data from websocket: \" + event.data);\n    }\n\n    socket.onopen = function(event) {\n        alert(\"Web Socket opened\");\n        socket.write(\"Hello World\");\n    };\n\n    socket.onclose = function(event) {\n        alert(\"Web Socket closed\");\n    };\n\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Vert.x Web Server with Authentication in Python\nDESCRIPTION: Sets up the Vert.x web server configuration in Python, including inbound permissions for login, data retrieval, and order placement. Implements authentication requirements for certain operations.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/python_web_tutorial.md#2025-04-19_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nweb_server_conf = {\n\n      'port' : 8080,\n      'host' : 'localhost',\n      'bridge' : true,\n\n      # This defines which messages from the client we will let through\n      # to the server side\n      'inbound_permitted':  [\n        # Allow calls to login\n        {\n            'address': 'vertx.basicauthmanager.login'\n        },\n        # Allow calls to get static album data from the persistor\n        {\n            'address': 'vertx.mongopersistor',\n            'match': {\n                'action': 'find',\n                'collection': 'albums'\n            }\n        },\n        # And to place orders\n        {\n            'address': 'vertx.mongopersistor',\n            'requires_auth': True,  # User must be logged in to send let these through\n            'match': {\n                'action': 'save',\n                'collection': 'orders'\n            }\n        }\n      ],\n\n      # This defines which messages from the server we will let through to the client\n      'outbound_permitted': [\n        {}\n      ]\n      \n    }\n```\n\n----------------------------------------\n\nTITLE: Querying Database with Vert.x RxJava API\nDESCRIPTION: Demonstrates a simple query using the Vert.x RxJava API to select data from a database table and process the results.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2018-07-02-simplified-transaction-management-vertx-rxjava.md#2025-04-19_snippet_0\n\nLANGUAGE: java\nCODE:\n```\ndbClient.rxQuery(\"SELECT name, duration FROM tracks WHERE album = 'The Israelites'\")\n  .map(ResultSet::getResults)\n  .map(rows -> {\n    // Transform DB rows into a client-friendly JSON object\n  })\n  .subscribe(json -> {\n    // Send JSON to the client\n  }, t -> {\n    // Send error to the client\n  });\n```\n\n----------------------------------------\n\nTITLE: Configuring SockJS Bridge Security in Groovy\nDESCRIPTION: Advanced example of securing a SockJS bridge by configuring message filters for both inbound and outbound traffic. This ensures only authorized messages can pass through the bridge.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_groovy.md#2025-04-19_snippet_72\n\nLANGUAGE: groovy\nCODE:\n```\ndef server = vertx.createHttpServer()\n\ndef config = [\"prefix\": \"/eventbus\"]\n\n// This defines the matches for client --> server traffic\ndef inboundPermitted = []\n\n// Let through any messages sent to 'demo.orderMgr'\ninboundPermitted << [\"address\": \"demo.orderMgr\"]\n\n// Allow messages to the address 'demo.persistor' as long as the messages\n// have an action field with value 'find' and a collection field with value\n// 'albums'\ninboundPermitted << [\"address\": \"demo.persistor\",\n              \"match\": [ \"action\": \"find\",\n                         \"collection\": \"albums\"]]\n\n// Allow through any message with a field `wibble` with value `foo`.\ninboundPermitted << [\"match\", [\"wibble\": \"foo\"]]\n\n// This defines the matches for server --> client traffic\ndef outboundPermitted = []\n\n// Let through any messages from address \"ticker.mystock\"\noutboundPermitted << [\"address\": \"ticker.mystock\"]\n\n// Let through any messages from addresses starting with \"news.\" (e.g. news.europe, news.usa, etc)\noutboundPermitted << [\"address_re\": \"news\\\\..+\"]\n\nvertx.createSockJSBridge(server).bridge(config, inboundPermitted, outboundPermitted)\n\nserver.listen(8080)\n```\n\n----------------------------------------\n\nTITLE: Implementing Counter Service in Vert.x with Groovy\nDESCRIPTION: A Groovy class that manages counter state on the server-side. Handles increment, decrement and reset actions through event handling.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2017-04-26-vertx-realtime-angular-ngrx.md#2025-04-19_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nclass CounterService {\n    static INCREMENT = '[Counter] Increment'\n    static DECREMENT = '[Counter] Decrement'\n    static RESET = '[Counter] Reset'\n    int total = 0\n    void handleEvent(event) {\n        switch(event.type) {\n            case INCREMENT:\n                total++\n                break\n            case DECREMENT:\n                total--\n                break\n            case RESET:\n                total = 0\n                break\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Cassandra Query for Channel Details\nDESCRIPTION: CQL query to fetch RSS channel details for a given RSS link\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2018-09-05-the-second-step-rss-reader.md#2025-04-19_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nSELECT description, title, site_link, rss_link FROM channel_info_by_rss_link WHERE rss_link = GIVEN_LINK ;\n```\n\n----------------------------------------\n\nTITLE: Making Simple GET Request with Vert.x Ruby HTTP Client\nDESCRIPTION: Shows how to make a simple GET request using the get_now method, which automatically ends the request. This is useful for GETs without a request body.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_ruby.md#2025-04-19_snippet_69\n\nLANGUAGE: ruby\nCODE:\n```\nclient = Vertx::HttpClient.new\nclient.host = 'foo.com'    \n\nclient.get_now('/some-path/') do |resp|\n    puts \"got response #{resp.status_code}\" \nend\n```\n\n----------------------------------------\n\nTITLE: Client-Side JavaScript for Real-Time Drawing with Vert.x Event Bus\nDESCRIPTION: The client-side JavaScript code that handles canvas drawing and communicates with other clients in real-time through the Vert.x event bus. It publishes mouse movements to the 'draw' address and renders drawing events received from other clients.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2015-08-31-vertx-3-real-time-web-apps.md#2025-04-19_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n$(function () {\n\n  // This demo depends on the canvas element\n  if (!('getContext' in document.createElement('canvas'))) {\n    alert('Sorry, it looks like your browser does not support canvas!');\n    return false;\n  }\n\n  var doc = $(document),\n    canvas = $('#paper'),\n    ctx = canvas[0].getContext('2d');\n\n  // Generate an unique ID\n  var id = Math.round($.now() * Math.random());\n\n  // A flag for drawing activity\n  var drawing = false;\n\n  var clients = {};\n  // create a event bus bridge to the server that served this file\n  var eb = new vertx.EventBus(\n      window.location.protocol + '//' + window.location.hostname + ':' + window.location.port + '/eventbus');\n\n  eb.onopen = function () {\n    // listen to draw events\n    eb.registerHandler('draw', function (data) {\n      // Is the user drawing?\n      if (data.drawing && clients[data.id]) {\n\n        // Draw a line on the canvas. clients[data.id] holds\n        // the previous position of this user's mouse pointer\n\n        drawLine(clients[data.id].x, clients[data.id].y, data.x, data.y);\n      }\n\n      // Saving the current client state\n      clients[data.id] = data;\n      clients[data.id].updated = $.now();\n    });\n  };\n\n  var prev = {};\n\n  canvas.on('mousedown', function (e) {\n    e.preventDefault();\n    drawing = true;\n    prev.x = e.pageX;\n    prev.y = e.pageY;\n  });\n\n  doc.bind('mouseup mouseleave', function () {\n    drawing = false;\n  });\n\n  var lastEmit = $.now();\n\n  doc.on('mousemove', function (e) {\n    if ($.now() - lastEmit > 30) {\n      eb.publish('draw', {\n        'x': e.pageX,\n        'y': e.pageY,\n        'drawing': drawing,\n        'id': id\n      });\n      lastEmit = $.now();\n    }\n\n    // Draw a line for the current user's movement, as it is\n    // not received in the eventbus\n\n    if (drawing) {\n\n      drawLine(prev.x, prev.y, e.pageX, e.pageY);\n\n      prev.x = e.pageX;\n      prev.y = e.pageY;\n    }\n  });\n\n  // Remove inactive clients after 10 seconds of inactivity\n  setInterval(function () {\n\n    for (var ident in clients) {\n      if (clients.hasOwnProperty(ident)) {\n        if ($.now() - clients[ident].updated > 10000) {\n          // Last update was more than 10 seconds ago.\n          // This user has probably closed the page\n          delete clients[ident];\n        }\n      }\n    }\n\n  }, 10000);\n\n  function drawLine(fromx, fromy, tox, toy) {\n    ctx.moveTo(fromx, fromy);\n    ctx.lineTo(tox, toy);\n    ctx.stroke();\n  }\n\n});\n```\n\n----------------------------------------\n\nTITLE: Selectively Accepting WebSockets Based on Path in Vert.x JavaScript\nDESCRIPTION: This snippet shows how to accept or reject WebSocket connections based on their connection path. It checks the path of the incoming WebSocket connection and either sets up an echo service or rejects the connection.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_js.md#2025-04-19_snippet_66\n\nLANGUAGE: javascript\nCODE:\n```\nvar server = vertx.createHttpServer();\n\nserver.websocketHandler(function(websocket) {\n  \n  if (websocket.path() === '/services/echo') {\n    new vertx.Pump(websocket, websocket).start();\n  } else {\n    websocket.reject();\n  }        \n}).listen(8080, 'localhost');\n```\n\n----------------------------------------\n\nTITLE: Creating Simple HTTP Web Server for Static Files in Vert.x Ruby\nDESCRIPTION: Demonstrates creating an HTTP server that serves static files from a local directory using the send_file method, which can be more efficient for large files through direct OS file transfer.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_ruby.md#2025-04-19_snippet_60\n\nLANGUAGE: ruby\nCODE:\n```\nserver = Vertx::HttpServer.new\n\nserver.request_handler do |req|\n  file = ''\n  if req.path == '/'\n    file = 'index.html'\n  elsif !req.path.include?(..)\n    file = req.path\n  end\n  req.response.send_file('web/' + file)\nend.listen(8080, 'localhost')\n```\n\n----------------------------------------\n\nTITLE: Configuring SSL NetClient with Client Authentication in Groovy\nDESCRIPTION: Creates a NetClient configured with both server certificate validation via trust store and client certificate authentication. This setup is used when the server requires client authentication for secure two-way SSL.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_groovy.md#2025-04-19_snippet_37\n\nLANGUAGE: groovy\nCODE:\n```\ndef client = vertx.createNetClient(SSL: true,\n                                       trustStorePath: \"/path/to/your/client/truststore/client-truststore.jks\"\n                                       trustStorePassword: \"password\",\n                                       clientAuthRequired: true,\n                                       keyStorePath: \"/path/to/keystore/holding/client/cert/client-keystore.jks\",\n                                       keyStorePassword: \"password\")\n```\n\n----------------------------------------\n\nTITLE: Basic HTTP Request Routing with RouteMatcher in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a basic HTTP router using Vert.x RouteMatcher. It sets up an HTTP server that handles different URL paths by directing them to specific handler functions based on pattern matching.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_js.md#2025-04-19_snippet_57\n\nLANGUAGE: javascript\nCODE:\n```\nvar server = vertx.createHttpServer();\n\nvar routeMatcher = new vertx.RouteMatcher();\n    \nserver.requestHandler(routeMatcher).listen(8080, 'localhost');\n```\n\n----------------------------------------\n\nTITLE: Socket Echo Server with Pause Mechanism\nDESCRIPTION: Vert.x Net server that pauses reading when the write queue is full, preventing data loss. However, it doesn't resume reading when the queue drains.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_js.md#2025-04-19_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nvar server = vertx.createNetServer();\n\nserver.connectHandler(function(sock) {\n\n    sock.dataHandler(function(buffer) {\n  \n        if (!sock.writeQueueFull()) {      \n            sock.write(buffer); \n        } else {\n            sock.pause();\n        }\n    });\n            \n}).listen(1234, 'localhost');\n```\n\n----------------------------------------\n\nTITLE: Writing to HTTP Request Body in Vert.x JavaScript\nDESCRIPTION: Demonstrates different ways to write data to the HTTP request body, including using buffers, strings, and specifying encoding.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_js.md#2025-04-19_snippet_50\n\nLANGUAGE: javascript\nCODE:\n```\nvar myBuffer = ...\nrequest.write(myBuffer);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nrequest.write('hello');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nrequest.write('hello', 'UTF-16');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nrequest.response.write('hello', function() {\n    log.info('It has actually been written');\n});\n```\n\n----------------------------------------\n\nTITLE: HTTP Route Matching in Vert.x\nDESCRIPTION: Example of setting up HTTP request routing using RouteMatcher to handle different URL patterns.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_js.md#2025-04-19_snippet_60\n\nLANGUAGE: javascript\nCODE:\n```\nvar server = vertx.createHttpServer();\n\nvar routeMatcher = new vertx.RouteMatcher();\n\nrouteMatcher.get('/animals/dogs', function(req) {\n    req.response().end('You requested dogs');\n});\n\nrouteMatcher.get('/animals/cats', function(req) {\n    req.response().end('You requested cats');\n});\n\nserver.requestHandler(routeMatcher).listen(8080, 'localhost');\n```\n\n----------------------------------------\n\nTITLE: Configuring TCP Client Reconnection\nDESCRIPTION: Setting up automatic reconnection attempts for a TCP client with custom retry intervals.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_js.md#2025-04-19_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nvar client = vertx.createNetClient();\n\nclient.reconnectAttempts(1000);\n\nclient.reconnectInterval(500);\n```\n\n----------------------------------------\n\nTITLE: Chaining HTTP Server Creation and Configuration in Vert.x\nDESCRIPTION: A more concise approach to HTTP server setup using method chaining to create the server, set the request handler, and start listening in a single expression.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_js.md#2025-04-19_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\nvar server = vertx.createHttpServer();\n\nserver.requestHandler(function(request) {\n  console.log('An HTTP request has been received');\n}).listen(8080, 'localhost');\n```\n\n----------------------------------------\n\nTITLE: Implementing HTTP Client Logic in Vert.x Shell Command\nDESCRIPTION: Implements the core HTTP client functionality using Vert.x HttpClient. This code fetches content from the provided URL, streams the response to the shell console, and handles errors and process termination.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2016-01-25-intro-to-vertx-shell.md#2025-04-19_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Create the client request\nvar request = client.getAbs(url, function(response) {\n\n  // Print the response in the shell console\n  response.handler(function(buffer) {\n    process.write(buffer.toString(\"UTF-8\"));\n  });\n\n  // End the command when the response ends\n  response.endHandler(function() {\n    process.end();\n  });\n});\n\n// Set a request handler to end the command with error\nrequest.exceptionHandler(function(err) {\n  process.write(\"Error: \" + err.getMessage());\n  process.end();\n});\n\n// End the http request\nrequest.end();\n```\n\n----------------------------------------\n\nTITLE: Implementing WebSocket Echo Server in Vert.x with Ruby\nDESCRIPTION: Creates a WebSocket server that echoes back all received data. The code uses a Pump to connect the input stream to the output stream.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_ruby.md#2025-04-19_snippet_84\n\nLANGUAGE: ruby\nCODE:\n```\nserver = Vertx::HttpServer.new\n\nserver.websocket_handler do |websocket|\n\n  Vert::Pump(websocket, websocket).new.start\n\nend.listen(8080, 'localhost')\n```\n\n----------------------------------------\n\nTITLE: Implementing Security Handlers\nDESCRIPTION: Examples of adding security handlers for different security schemes and scopes.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2017-06-12-openapi3-vertx-web-support.md#2025-04-19_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nrouterFactory.addSecurityHandler(\"security_scheme_name\", routingContext -> {\n    // Handle security here and then call next()\n    routingContext.next();\n});\n```\n\nLANGUAGE: java\nCODE:\n```\nrouterFactory.addSecuritySchemaScopeValidator(\"security_scheme_name\", \"scope_name\", routingContext -> {\n    // Handle security here and then call next()\n    routingContext.next();\n});\n```\n\n----------------------------------------\n\nTITLE: Deploying and Undeploying Verticles with Callbacks in Vert.x\nDESCRIPTION: This snippet shows how to deploy verticles with a specified number of instances, get notified when deployment is complete, and how to undeploy a verticle using its deployment ID.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_ruby.md#2025-04-19_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nVertx.deploy_verticle('my_verticle.rb', nil, 10) { puts \"It's been deployed!\" }\n\ndeploymentID = Vertx.deploy_verticle('my_verticle.rb') {\n    # Immediately undeploy it\n    vertx.undeployVerticle(deploymentID);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring an SSL Client with Trust Store and Client Certificate\nDESCRIPTION: Code for creating a Vert.x Net client with SSL that uses both a trust store for server validation and provides its own client certificate.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_js.md#2025-04-19_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nvar client = vertx.createNetClient()\n                   .setSSL(true)\n                   .setTrustStorePath('/path/to/your/client/truststore/client-truststore.jks')\n                   .setTrustStorePassword('password')\n                   .setClientAuthRequired(true)\n                   .setKeyStorePath('/path/to/keystore/holding/client/cert/client-keystore.jks')\n                   .setKeyStorePassword('password');\n```\n\n----------------------------------------\n\nTITLE: Filtering Directory Contents with Regular Expressions in Vert.x (JavaScript)\nDESCRIPTION: This example shows how to read a directory's contents using readDir with a regular expression filter to list only files with a specific extension (.txt). The callback function processes the filtered results.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_js.md#2025-04-19_snippet_81\n\nLANGUAGE: javascript\nCODE:\n```\nvertx.fileSystem.readDir('mydirectory', '.*\\.txt', function(err, res) {\n  if (!err) {\n    console.log('Directory contains these .txt files');\n    for (var i = 0; i < res.length; i++) {\n      console.log(res[i]);  \n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating an Application Starter Verticle\nDESCRIPTION: A complete example of an application starter verticle that maintains configuration and deploys multiple verticles with their respective configurations to compose an application.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_groovy.md#2025-04-19_snippet_8\n\nLANGUAGE: groovy\nCODE:\n```\n// Application config\n\ndef appConfig = [\n    verticle1Config: [\n        // Config for verticle1\n    ],\n    verticle2Config: [\n        // Config for verticle2\n    ],\n    verticle3Config: [\n        // Config for verticle3\n    ],\n    verticle4Config: [\n        // Config for verticle4\n    ],\n    verticle5Config: [\n        // Config for verticle5\n    ]\n]\n\n// Start the verticles that make up the app\n\ncontainer.deployVerticle(\"verticle1.js\", appConfig[\"verticle1Config\"])\ncontainer.deployVerticle(\"verticle2.rb\", appConfig[\"verticle2Config\"])\ncontainer.deployVerticle(\"foo.Verticle3\", appConfig[\"verticle3Config\"])\ncontainer.deployWorkerVerticle(\"foo.Verticle4\", appConfig[\"verticle4Config\"])\ncontainer.deployWorkerVerticle(\"verticle5.js\", appConfig[\"verticle5Config\"], 10)\n```\n\n----------------------------------------\n\nTITLE: Simplified Transaction Management with Vert.x 3.6\nDESCRIPTION: Shows the most concise way to manage transactions in Vert.x 3.6 using the SQLClientHelper.inTransactionSingle method.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2018-07-02-simplified-transaction-management-vertx-rxjava.md#2025-04-19_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nSQLClientHelper.inTransactionSingle(client, sqlConnection -> {\n  return sqlConnection.rxExecute(\"INSERT INTO albums (name) VALUES ('The Israelites')\")\n    .andThen(sqlConnection.rxExecute(\"INSERT INTO tracks (album, name) VALUES ('The Israelites', 'Israelites')\"))\n    .andThen(sqlConnection.rxExecute(\"INSERT INTO tracks (album, name) VALUES ('The Israelites', 'Too Much Too Soon')\"))\n    .andThen(sqlConnection.rxQuery(\"SELECT name FROM tracks WHERE album = 'The Israelites'\").map(ResultSet::getResults))\n}).map(rows -> {\n  // Transform DB rows into a client-friendly JSON object\n}).subscribe(json -> {\n  // Send JSON to the client\n}, t -> {\n  // Send error to the client\n});\n```\n\n----------------------------------------\n\nTITLE: Handling File Uploads in Vert.x HTTP Server\nDESCRIPTION: Demonstrates how to handle file uploads in a Vert.x HTTP server. The code sets up an upload handler that processes each uploaded file from a multipart form and streams it directly to the file system.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_js.md#2025-04-19_snippet_47\n\nLANGUAGE: javascript\nCODE:\n```\nrequest.expectMultiPart(true);\n\nrequest.uploadHandler(function(upload) {\n    upload.streamToFileSystem(\"uploads/\" + upload.filename());\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Deployment Options for Vert.x Verticle (Java)\nDESCRIPTION: This code demonstrates how to set deployment options for a Vert.x verticle, including configuration for the HTTP port.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/intro-series/2015-07-20-post-02-vertx-application-configuration.md#2025-04-19_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nport = 8081;\nDeploymentOptions options = new DeploymentOptions()\n    .setConfig(new JsonObject().put(\"http.port\", port)\n);\nvertx.deployVerticle(MyFirstVerticle.class.getName(), options, context.asyncAssertSuccess());\n```\n\n----------------------------------------\n\nTITLE: Verticle Deployment with Callback\nDESCRIPTION: Example demonstrating how to deploy a Verticle programmatically with a completion callback.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_js.md#2025-04-19_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvertx.deployVerticle('my_verticle.js', null, 10, function() {\n    log.info(\"It's been deployed!\");\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Request-Response Pattern in Vert.x Event Bus with Groovy\nDESCRIPTION: Demonstrates the request-response messaging pattern using the Vert.x event bus. It shows both the receiver and sender sides of the communication.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_groovy.md#2025-04-19_snippet_17\n\nLANGUAGE: Groovy\nCODE:\n```\n// The receiver:\ndef myHandler = { message ->\n    println \"I received a message ${message.body}\"\n\n    message.reply \"This is a reply\"  // Reply to it\n}\n\neb.registerHandler(\"test.address\", myHandler)\n\n// The sender:\neb.send(\"test.address\", \"This is a message\") { message ->\n    println \"I received a reply ${message.body}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Future-based methods using value classes in Scala for Vert.x 4\nDESCRIPTION: This code snippet demonstrates how to use value classes to extend Vert.x classes with Future-based methods in Scala. It creates a package object with an implicit class to add a 'listenFuture' method to the HttpServer class.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2019-08-30-eclipse-vertx-for-scala-next-steps.md#2025-04-19_snippet_0\n\nLANGUAGE: scala\nCODE:\n```\npackage io.vertx.scala\npackage object core{\n   implicit class HttpServerScala(val asJava: io.vertx.core.http.HttpServer) extends AnyVal {\n      def listenFuture(port: java.lang.Integer): scala.concurrent.Future[io.vertx.core.http.HttpServer] = {..}\n      ..\n}\n```\n\n----------------------------------------\n\nTITLE: Reading a Symbolic Link in Vert.x (JavaScript)\nDESCRIPTION: Shows how to read the destination of a symbolic link using the Vert.x file system API. The example demonstrates the callback pattern with error handling that is common across Vert.x file operations.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_js.md#2025-04-19_snippet_79\n\nLANGUAGE: javascript\nCODE:\n```\nvertx.fileSystem.readSymLink('somelink', function(err, res) {\n    if (!err) {\n        console.log('Link points at ' + res);\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Order Submission Handler - JavaScript\nDESCRIPTION: Client-side function to submit an order to the server. Converts order data to JSON and sends it through the event bus to be persisted in MongoDB. Requires valid session authentication.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/js_web_tutorial.md#2025-04-19_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nthat.submitOrder = function() {\n\n      if (!orderReady()) {\n        return;\n      }\n\n      var orderItems = ko.toJS(that.items);\n      var orderMsg = {\n        sessionID: that.sessionID(),\n        action: \"save\",\n        collection: \"orders\",\n        document: {\n          username: that.username(),\n          items: orderItems\n        }\n      }\n\n      eb.send('vertx.mongopersistor', orderMsg, function(reply) {\n        if (reply.status === 'ok') {\n          that.orderSubmitted(true);\n          // Timeout the order confirmation box after 2 seconds\n          // window.setTimeout(function() { that.orderSubmitted(false); }, 2000);\n        } else {\n          console.error('Failed to accept order');\n        }\n      });\n    };\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple TCP Echo Server in JavaScript for Vert.x\nDESCRIPTION: This code snippet demonstrates how to create a basic TCP echo server verticle in JavaScript. It creates a Net server that listens on port 1234 and echoes back any data received on connections.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_js.md#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar vertx = require('vertx');\n\nvertx.createNetServer().connectHandler(function(sock) {\n    new vertx.Pump(sock, sock).start();\n}).listen(1234);\n```\n\n----------------------------------------\n\nTITLE: HTTP Server with Asynchronous Listen Callback in Vert.x\nDESCRIPTION: Example of starting an HTTP server with a callback handler to be notified when the server is successfully listening or if an error occurred during startup.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_js.md#2025-04-19_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\nserver.listen(8080, \"myhost\", function(err) {\n    if (!err) {\n        console.log(\"Listen succeeded!\");\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring an SSL Client with Trust Store\nDESCRIPTION: Code for setting up a Vert.x Net client with SSL that only trusts servers with certificates in its trust store.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_js.md#2025-04-19_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nvar client = vertx.createNetClient()\n                   .setSSL(true)\n                   .setTrustStorePath('/path/to/your/client/truststore/client-truststore.jks')\n                   .setTrustStorePassword('password');\n```\n\n----------------------------------------\n\nTITLE: Implementing TCP Echo Server in Vert.x\nDESCRIPTION: Creates a TCP server that echoes back any received data to the client. Shows basic read and write operations on sockets.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_js.md#2025-04-19_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nvar server = vertx.createNetServer();\n\nserver.connectHandler(function(sock) {\n    \n    sock.dataHandler(function(buffer) {\n        sock.write(buffer);\n    });\n  \n}).listen(1234, 'localhost');\n```\n\n----------------------------------------\n\nTITLE: Initializing HTTP Route Matcher Server in Ruby\nDESCRIPTION: Shows how to set up a basic HTTP server with a RouteMatcher to handle routing HTTP requests. The route matcher is set as the request handler for the HTTP server.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_ruby.md#2025-04-19_snippet_78\n\nLANGUAGE: ruby\nCODE:\n```\nserver = Vertx::HttpServer.new\n\nroute_matcher = Vertx::RouteMatcher.new\n\nserver.request_Handler(route_matcher).listen(8080, 'localhost')\n```\n\n----------------------------------------\n\nTITLE: Using the Event Bus from Client-Side JavaScript\nDESCRIPTION: Demonstrates how to connect to and use the Vert.x event bus from a web browser. The example shows loading the required scripts, connecting to the event bus, registering message handlers and sending messages.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_ruby.md#2025-04-19_snippet_93\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"http://cdn.sockjs.org/sockjs-0.3.4.min.js\"></script>\n<script src='vertxbus.js'></script>\n\n<script>\n\n    var eb = new vertx.EventBus('http://localhost:8080/eventbus');\n    \n    eb.onopen = function() {\n    \n      eb.register_handler('some-address', function(message) {\n\n        console.log('received a message: ' + JSON.stringify(message);\n\n      });\n\n      eb.send('some-address', {name: 'tim', age: 587});\n    \n    }\n   \n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing a TCP Echo Server Verticle in Ruby\nDESCRIPTION: This snippet demonstrates how to create a simple TCP echo server verticle in Ruby using Vert.x. It sets up a NetServer that echoes back any received data on the connection.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_ruby.md#2025-04-19_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"vertx\"\ninclude Vertx\n\n@server = NetServer.new.connect_handler { |socket|\n  Pump.new(socket, socket).start\n}.listen(1234, 'localhost')\n\ndef vertx_stop\n  @server.close\nend\n```\n\n----------------------------------------\n\nTITLE: Connecting HTTP Client to Unix Domain Socket in Java\nDESCRIPTION: Demonstrates how to use the HttpClient to connect to a Unix Domain Socket, which is useful for communicating with local daemons like Docker.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/releases/2019-05-27-vertx-3.7.1-release.md#2025-04-19_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nHttpClient httpClient = vertx.createHttpClient();\n\n// Only available on BSD and Linux with native transport\nSocketAddress addr = SocketAddress.domainSocketAddress(\"/var/tmp/myservice.sock\");\n\n// Send request to the server\nhttpClient.request(HttpMethod.GET, addr, 8080, \"localhost\", \"/\", resp -> {\n  // Process response\n}).end();\n```\n\n----------------------------------------\n\nTITLE: Registering an Event Bus Handler in Vert.x\nDESCRIPTION: Shows how to register a message handler on the Vert.x event bus. The handler will receive messages sent to the specified address.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_js.md#2025-04-19_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar eb = vertx.eventBus;\n\nvar myHandler = function(message) {\n  console.log('I received a message ' + message);\n}\n\neb.registerHandler('test.address', myHandler);\n```\n\n----------------------------------------\n\nTITLE: Setting Up an SSL Server with Vert.x in Ruby\nDESCRIPTION: Demonstrates configuring a NetServer to use SSL by enabling SSL and setting up the key store with server certificates.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_ruby.md#2025-04-19_snippet_36\n\nLANGUAGE: ruby\nCODE:\n```\nserver = Vertx::NetServer.new\nserver.ssl = true\nserver.key_store_path = '/path/to/your/keystore/server-keystore.jks'\nserver.key_store_password = 'password'\n```\n\n----------------------------------------\n\nTITLE: Implementing a TCP Echo Server with Vert.x in Ruby\nDESCRIPTION: Creates a simple TCP echo server that listens on port 1234 and echoes back any data received. It sets up a connect handler for incoming connections and a data handler to receive and echo back data.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_ruby.md#2025-04-19_snippet_25\n\nLANGUAGE: ruby\nCODE:\n```\nserver = Vertx::NetServer.new\n\nserver.connect_handler do |sock|\n\n    sock.data_handler do |buffer|\n        sock.write(buffer)\n    end\n\nend.listen(1234, 'localhost');\n```\n\n----------------------------------------\n\nTITLE: RabbitMQ Consumer with Backpressure Control in Java\nDESCRIPTION: Shows how to implement backpressure control by limiting the internal queue size to 300 messages. Includes configuration of queue options and message handling with the ability to drop messages when capacity is exceeded.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2018-04-23-rabbitmq-new-consumer-api.md#2025-04-19_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n// Limit to max 300 messages\nQueueOptions options = new QueueOptions()\n  .setMaxInternalQueueSize(300);\n\nRabbitMQClient client = RabbitMQClient.create(vertx, new RabbitMQOptions());\n\nclient.basicConsumer(\"my.queue\", options, res -> {\n  if (res.succeeded()) {\n    System.out.println(\"RabbitMQ consumer created !\");\n    RabbitMQConsumer mqConsumer = res.result();\n    mqConsumer.handler((RabbitMQMessage message) -> {\n      System.out.println(\"Got message: \" + message.body().toString());\n    });\n  } else {\n    res.cause().printStackTrace();\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Collecting Complete HTTP Request Body in Vert.x\nDESCRIPTION: This example demonstrates how to collect the entire HTTP request body by appending each chunk to a buffer and processing it when the request is complete.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_ruby.md#2025-04-19_snippet_50\n\nLANGUAGE: ruby\nCODE:\n```\nserver = Vertx::HttpServer.new\n\nserver.request_handler do |request|\n\n  # Create a buffer to hold the body\n  body = Vertx::Buffer.create(0)\n\n  request.data_handler do |buffer|\n    # Append the chunk to the buffer\n    body.append_buffer(buffer)\n  end\n\n  request.end_handler do\n    # The entire body has now been received\n    puts \"The total body received was #{body.length} bytes\"\n  end\n\nend.listen(8080, 'localhost')\n```\n\n----------------------------------------\n\nTITLE: Handling Unmatched Routes with noMatch in JavaScript\nDESCRIPTION: This snippet demonstrates how to set up a handler for requests that don't match any defined routes. The noMatch function provides a fallback that prevents the default 404 response when no routes match.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_js.md#2025-04-19_snippet_61\n\nLANGUAGE: javascript\nCODE:\n```\nrouteMatcher.noMatch(function(req) { req.response.end(\"Nothing matched\"); });\n```\n\n----------------------------------------\n\nTITLE: Configuring an SSL Server with Client Authentication in Ruby\nDESCRIPTION: Shows how to set up a Vert.x NetServer that requires client certificates for authentication by configuring both key store and trust store paths.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_ruby.md#2025-04-19_snippet_37\n\nLANGUAGE: ruby\nCODE:\n```\nserver = Vertx::NetServer.new\nserver.ssl = true\nserver.key_store_path = '/path/to/your/keystore/server-keystore.jks'\nserver.key_store_password = 'password'\nserver.client_auth_required = true\nserver.trust_store_path = '/path/to/your/truststore/server-truststore.jks'\nserver.trust_store_password = 'password'\n```\n\n----------------------------------------\n\nTITLE: Broadcasting Updates via AMQP in Vert.x\nDESCRIPTION: This code demonstrates how to broadcast game updates to multiple clients using the AMQP multicast feature in Vert.x.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2017-01-25-building-services-and-apis-with-amqp.md#2025-04-19_snippet_6\n\nLANGUAGE: java\nCODE:\n```\npublic void broadcastUpdates(Game game)  \n{  \n   LOG.info(\"Broadcasting game update \" + game);  \n   JsonObject message = new JsonObject();  \n   message.put(\"body\", new JsonObject(Json.encode(game)).encode());  \n   producer.send(message);  \n} \n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Dependencies for Vert.x Web Application\nDESCRIPTION: Maven POM configuration for a Vert.x3 web application, including core and web dependencies. This snippet shows the essential Maven dependencies needed to build a Vert.x web application targeting Raspberry Pi.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2015-07-01-vertx3-web-easy-as-pi.md#2025-04-19_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n...\n<groupId>io.vertx.blog</groupId>\n<artifactId>rpi</artifactId>\n<version>1.0</version>\n\n<dependencies>\n  <dependency>\n    <groupId>io.vertx</groupId>\n    <artifactId>vertx-core</artifactId>\n    <version>3.0.0</version>\n  </dependency>\n\n  <dependency>\n    <groupId>io.vertx</groupId>\n    <artifactId>vertx-web</artifactId>\n    <version>3.0.0</version>\n  </dependency>\n</dependencies>\n...\n```\n\n----------------------------------------\n\nTITLE: Running a Verticle Using Vert.x CLI\nDESCRIPTION: Command to run a Groovy verticle file using the Vert.x command-line interface.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_groovy.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nvertx run Server.groovy\n```\n\n----------------------------------------\n\nTITLE: Testing Static File Serving in Vert.x Application\nDESCRIPTION: This test case verifies if the Vert.x application correctly serves a static HTML file, checking the status code, content type, and content.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/intro-series/2015-08-03-post-04-unit-and-integration-tests.md#2025-04-19_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@Test\npublic void checkThatTheIndexPageIsServed(TestContext context) {\n  Async async = context.async();\n  vertx.createHttpClient().getNow(port, \"localhost\", \"/assets/index.html\", response -> {\n    context.assertEquals(response.statusCode(), 200);\n    context.assertEquals(response.headers().get(\"content-type\"), \"text/html\");\n    response.bodyHandler(body -> {\n      context.assertTrue(body.toString().contains(\"<title>My Whisky Collection</title>\"));\n      async.complete();\n    });\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Reconnection for a NetClient in Vert.x with Ruby\nDESCRIPTION: Shows how to configure a NetClient to automatically retry connecting to a server when connection fails. Sets reconnection attempts to 1000 and interval between attempts to 500ms.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_ruby.md#2025-04-19_snippet_31\n\nLANGUAGE: ruby\nCODE:\n```\nclient = Vertx::NetClient.new\n\nclient.reconnect_attempts = 1000\n\nclient.reconnect_interval = 500\n```\n\n----------------------------------------\n\nTITLE: Asynchronous File Copy in Vert.x (JavaScript)\nDESCRIPTION: Demonstrates asynchronous file copying from a source to a destination with a callback handler to check for successful completion.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_js.md#2025-04-19_snippet_77\n\nLANGUAGE: javascript\nCODE:\n```\nvertx.fileSystem.copy('foo.dat', 'bar.dat', function(err) {\n    if (!err) {\n        console.log('Copy was successful');\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Using bodyHandler to Process Complete HTTP Response in JavaScript\nDESCRIPTION: This snippet demonstrates the bodyHandler function which provides a simpler way to handle an entire HTTP response body at once. This approach is convenient but should be used cautiously with large responses to avoid memory issues.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_js.md#2025-04-19_snippet_55\n\nLANGUAGE: javascript\nCODE:\n```\nvar client = vertx.createHttpClient().setHost('foo.com');\n\nclient.getNow('/some-uri', function(resp) {\n  \n  resp.bodyHandler(function(body) {\n    log.info('The total body received was ' + body.length() + ' bytes');\n  });\n  \n}); \n```\n\n----------------------------------------\n\nTITLE: Custom CORS Header Validation Predicate in Vert.x Web Client (Java)\nDESCRIPTION: This snippet shows how to create a custom response predicate to validate CORS headers for a pre-flight OPTIONS request in Vert.x Web Client.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2018-12-10-http-response-validation-web-client.md#2025-04-19_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n// Check CORS header allowing to do POST\nFunction<HttpResponse<Void>, ResponsePredicateResult> methodsPredicate = resp -> {\n  String methods = resp.getHeader(\"Access-Control-Allow-Methods\");\n  if (methods != null) {\n    if (methods.contains(\"POST\")) {\n      return ResponsePredicateResult.success();\n    }\n  }\n  return ResponsePredicateResult.failure(\"Does not work\");\n};\n\n// Send pre-flight CORS request\nclient\n  .request(HttpMethod.OPTIONS, 8080, \"myserver.mycompany.com\", \"/some-uri\")\n  .putHeader(\"Origin\", \"Server-b.com\")\n  .putHeader(\"Access-Control-Request-Method\", \"POST\")\n  .expect(methodsPredicate)\n  .send(ar -> {\n    if (ar.succeeded()) {\n      // Process the POST request now\n    } else {\n      System.out.println(\"Something went wrong \" + ar.cause().getMessage());\n    }\n  });\n```\n\n----------------------------------------\n\nTITLE: Reading Request Body Data in Chunks with Vert.x HTTP Server in Ruby\nDESCRIPTION: This example demonstrates how to read the request body data in chunks using a data handler. It's useful for handling large request bodies.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_ruby.md#2025-04-19_snippet_45\n\nLANGUAGE: ruby\nCODE:\n```\nserver.request_handler do |request|\n\n  request.data_handler do |buffer|\n    puts \"I received  #{buffer.length} bytes\"\n  end\n  \nend.listen(8080, 'localhost')\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphQL Handler in Vert.x Web\nDESCRIPTION: Example of setting up a GraphQL handler for a Vert.x Web route to handle GraphQL requests.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/releases/2019-04-02-vertx-3.7.0-release.md#2025-04-19_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n// Setup the GraphQL-Java object\nGraphQL graphQL = setupGraphQLJava();\n// Use it to handle requests on a Vert.x Web route \nrouter.route(\"/graphql\").handler(GraphQLHandler.create(graphQL));\n```\n\n----------------------------------------\n\nTITLE: Configuring SockJS Handler with EventBus Bridge in Vert.x\nDESCRIPTION: Java code to set up a SockJS handler with EventBus bridge, including outbound permissions and event handling for socket creation.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2016-01-15-real-time-bidding-with-websockets-and-vertx.md#2025-04-19_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nprivate SockJSHandler eventBusHandler() {\n    BridgeOptions options = new BridgeOptions()\n            .addOutboundPermitted(new PermittedOptions().setAddressRegex(\"auction\\\\.[0-9]+\"));\n    return SockJSHandler.create(vertx).bridge(options, event -> {\n         if (event.type() == BridgeEventType.SOCKET_CREATED) {\n            logger.info(\"A socket was created\");\n        }\n        event.complete(true);\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SSL Client with Trust Settings\nDESCRIPTION: Examples of configuring SSL clients with different trust configurations, from trusting all certificates to specific certificate validation.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_js.md#2025-04-19_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nvar client = vertx.createNetClient()\n                   .ssl(true)\n                   .trustAll(true);\n\nvar client = vertx.createNetClient()\n                   .ssl(true)\n                   .trustStorePath('/path/to/your/client/truststore/client-truststore.jks')\n                   .trustStorePassword('password');\n\nvar client = vertx.createNetClient()\n                   .ssl(true)\n                   .trustStorePath('/path/to/your/client/truststore/client-truststore.jks')\n                   .trustStorePassword('password')\n                   .clientAuthRequired(true)\n                   .keyStorePath('/path/to/keystore/holding/client/cert/client-keystore.jks')\n                   .keyStorePassword('password');\n```\n\n----------------------------------------\n\nTITLE: Using Deployment Completion Handlers\nDESCRIPTION: Adding a completion handler to be notified when a verticle deployment has completed, using a closure as the final argument to deployVerticle.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_groovy.md#2025-04-19_snippet_11\n\nLANGUAGE: groovy\nCODE:\n```\ncontainer.deployVerticle(\"foo.ChildVerticle\", 10) {\n    println \"The verticle has been deployed\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Server Metrics in Vert.x\nDESCRIPTION: Sets up a basic HTTP server with metrics collection using Vert.x Router. Creates an endpoint that responds with a hello message.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2018-04-09-vertx-micrometer-metrics.md#2025-04-19_snippet_10\n\nLANGUAGE: java\nCODE:\n```\nRouter router = Router.router(vertx);\nrouter.get(\"/\").handler(ctx -> {\n  ctx.response().end(\"Hello Micrometer from HTTP!\");\n});\nvertx.createHttpServer().requestHandler(router::accept).listen(8080);\n```\n\n----------------------------------------\n\nTITLE: Opening an asynchronous file with Vert.x FileSystem\nDESCRIPTION: Shows how to open a file for asynchronous reading and writing operations, returning an AsyncFile instance.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_ruby.md#2025-04-19_snippet_106\n\nLANGUAGE: ruby\nCODE:\n```\nVertx::FileSystem.open('some-file.dat') do |err, async_file|\n    if err\n        puts \"Failed to open file #{err}\"\n    else\n        puts 'File opened ok'\n        async_file.close\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring SockJS Bridge Security with Match Patterns in Ruby\nDESCRIPTION: Example of configuring a SockJS bridge with security rules that filter messages based on address patterns and message content. The configuration allows specific messages through while blocking others by default.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_ruby.md#2025-04-19_snippet_90\n\nLANGUAGE: ruby\nCODE:\n```\nserver = Vertx::HttpServer.new\n\nsockJSServer = Vertx::SockJSServer.new(server)\n\nsockJSServer.bridge({'prefix' => '/eventbus'},\n  [\n    # Let through any messages sent to 'demo.orderMgr'\n    {\n      'address' => 'demo.orderMgr'\n    },\n    # Allow calls to the address 'demo.persistor' as long as the messages\n    # have an action field with value 'find' and a collection field with value\n    # 'albums'\n    {\n      'address' => 'demo.persistor',\n      'match' => {\n        'action' => 'find',\n        'collection' => 'albums'\n      }\n    },\n    # Allow through any message with a field `wibble` with value `foo`.\n    {\n      'match' => {\n        'wibble' => 'foo'\n      }\n    }\n  ],\n  [\n    # Let through any messages coming from address 'ticker.mystock'\n    {\n      'address' => 'ticker.mystock'\n    },\n    # Let through any messages from addresses starting with \"news.\" (e.g. news.europe, news.usa, etc)\n    {\n      'address_re' => 'news\\\\..+'\n    }\n  ])\n\n\nserver.listen(8080)\n```\n\n----------------------------------------\n\nTITLE: Connecting to a WebSocket Server from Vert.x HTTP Client (Groovy)\nDESCRIPTION: Demonstrates how to establish a WebSocket connection from a Vert.x HTTP client to a WebSocket server. The handler is called when the connection is successfully established.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_groovy.md#2025-04-19_snippet_66\n\nLANGUAGE: groovy\nCODE:\n```\ndef client = vertx.createHttpClient()\n\nclient.connectWebsocket(\"http://localhost:8080/some-uri\") { ws ->\n    // Connected!\n}\n```\n\n----------------------------------------\n\nTITLE: Serving Static Files from Disk with Vert.x HTTP Server in Ruby\nDESCRIPTION: Implementation of a simple HTTP server that serves static files from a local 'web' directory. The code handles path resolution, prevents directory traversal attacks, and demonstrates the use of send_file for efficient file serving.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_ruby.md#2025-04-19_snippet_56\n\nLANGUAGE: ruby\nCODE:\n```\nserver = Vertx::HttpServer.new\n\nserver.request_handler do |req|\n  file = ''\n  if req.path == '/'\n    file = 'index.html'\n  elsif !req.path.include?(..)\n    file = req.path\n  end\n  req.response.send_file('web/' + file)\nend.listen(8080, 'localhost')\n```\n\n----------------------------------------\n\nTITLE: Using OpenAPI Router Factory in Vert.x\nDESCRIPTION: Demonstrates how to use the OpenAPI Router Factory to create a router based on an OpenAPI specification file in Vert.x.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/releases/2017-10-20-vertx-3.5.0-release.md#2025-04-19_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nOpenAPI3RouterFactory.createRouterFactoryFromFile(vertx, \"petstore.yaml\", ar -> {\n  if (ar.succeeded()) {\n    // Spec loaded with success\n    OpenAPI3RouterFactory routerFactory = ar.result();\n\n    // add your API and security handlers to the factory\n\n    // add it to a server\n    vertx.createHttpServer()\n      .requestHandler(routerFactory.getRouter()::accept)\n      .listen();\n  } else {\n    // Something went wrong during router factory initialization\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Handling and Echoing HTTP Request Headers in Vert.x\nDESCRIPTION: Creates an HTTP server that reads all request headers and echoes them back as the response. This demonstrates how to access and process request headers in Vert.x.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_js.md#2025-04-19_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\nvar server = vertx.createHttpServer();\n\nserver.requestHandler(function(request) {\n\n  var str = '';\n  for (var k in request.headers()) {\n    str = str.concat(k, ': ', headers[k], '\\n');\n  }\n  \n  request.response.end(str);\n  \n}).listen(8080, 'localhost');\n```\n\n----------------------------------------\n\nTITLE: Making POST Request with Vert.x HTTP Client in Ruby\nDESCRIPTION: Example demonstrating how to make a POST request using a Vert.x HTTP client. The code shows the pattern of creating a request, adding a response handler, and ending the request.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_ruby.md#2025-04-19_snippet_64\n\nLANGUAGE: ruby\nCODE:\n```\nclient = Vertx::HttpClient.new\nclient.host = 'foo.com'  \n\nrequest = client.post('/some-path/') do |resp|\n    puts \"got response #{resp.status_code}\" \nend\n\nrequest.end\n```\n\n----------------------------------------\n\nTITLE: Retrieving File Properties with Vert.x FileSystem in JavaScript\nDESCRIPTION: Shows how to get file properties using Vert.x file system API. The example retrieves properties like last access time and demonstrates error handling.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_js.md#2025-04-19_snippet_74\n\nLANGUAGE: javascript\nCODE:\n```\nvertx.fileSystem.props('some-file.txt', function(err, props) {\n    if (err) {\n        log.info('Failed to retrieve file props: ' + err);\n    } else {\n        log.info('File props are:');\n        log.info('Last accessed: ' + props.lastAccessTime);\n        // etc \n    }\n});\n```\n\n----------------------------------------\n\nTITLE: SQL Client Templates with Jackson Object Mapping\nDESCRIPTION: Demonstrates SQL Client Templates with automatic object mapping using Jackson Databind to convert database rows to Java objects.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/releases/2020-05-25-vertx-4-milestone5-release.md#2025-04-19_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nSqlTemplate\n  .forQuery(client, \"SELECT * FROM users WHERE id=#{id}\")\n  .mapTo(User.class)\n  .execute(Collections.singletonMap(\"id\", 1))\n  .onSuccess(users -> {\n    users.forEach(user -> {\n      System.out.println(user.firstName + \" \" + user.lastName);\n    });\n  });\n```\n\n----------------------------------------\n\nTITLE: Initializing SockJS Bridge in Vert.x\nDESCRIPTION: Creates and configures a basic SockJS bridge on an HTTP server to connect the event bus between client and server. Bridge is set up on the '/eventbus' path without security restrictions.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_js.md#2025-04-19_snippet_70\n\nLANGUAGE: javascript\nCODE:\n```\nvar httpServer = vertx.createHttpServer();\n\nvar sockJSServer = vertx.createSockJSServer(httpServer);\n\nsockJSServer.bridge({prefix : '/eventbus'}, [], [] );\n\nserver.listen(8080);\n```\n\n----------------------------------------\n\nTITLE: Creating a Verticle Application Coordinator\nDESCRIPTION: This code shows how to create a coordinator verticle that deploys and configures multiple verticles in an application. It reads configuration for each verticle and deploys them with their respective settings.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_js.md#2025-04-19_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Start the verticles that make up the app \n\nvar appConfig = vertx.config(); \n\nvertx.deployVerticle(\"verticle1.js\", appConfig.verticle1Config);\nvertx.deployVerticle(\"verticle2.js\", appConfig.verticle2Config, 5);\nvertx.deployVerticle(\"verticle3.js\", appConfig.verticle3Config);\nvertx.deployWorkerVerticle(\"verticle4.js\", appConfig.verticle4Config);\nvertx.deployWorkerVerticle(\"verticle5.js\", appConfig.verticle5Config, 10);\n```\n\n----------------------------------------\n\nTITLE: Using Vert.x EventBus from Client JavaScript\nDESCRIPTION: Example of connecting to the Vert.x EventBus from browser JavaScript. It demonstrates creating a connection, registering a message handler, and sending a message once the connection is open.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_groovy.md#2025-04-19_snippet_71\n\nLANGUAGE: javascript\nCODE:\n```\n<script src=\"http://cdn.sockjs.org/sockjs-0.2.1.min.js\"></script>\n<script src='vertxbus.js'></script>\n\n<script>\n\n    var eb = new vertx.EventBus('http://localhost:8080/eventbus');\n    \n    eb.onopen = function() {\n    \n      eb.registerHandler('some-address', function(message) {\n\n        console.log('received a message: ' + JSON.stringify(message);\n\n      });\n\n      eb.send('some-address', {name: 'tim', age: 587});\n    \n    }\n   \n</script>\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Execution in Vert.x\nDESCRIPTION: Java code demonstrating how to execute a GraphQL query within a transaction in Vert.x using OrientDB\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2017-11-14-vertx-graphql.md#2025-04-19_snippet_3\n\nLANGUAGE: java\nCODE:\n```\ndemoData.getGraph().asyncTx((tx) -> {\n\tGraphQL graphQL = newGraphQL(schema).build();\n\tExecutionInput input = new ExecutionInput(query, null, queryJson, demoData.getRoot(), extractVariables(queryJson));\n\ttx.complete(graphQL.execute(input));\n}, (AsyncResult<ExecutionResult> rh) -> {\n\t...\n});\n```\n\n----------------------------------------\n\nTITLE: Selectively Accepting WebSockets based on Path\nDESCRIPTION: This code shows how to check the path of an incoming WebSocket connection and either accept or reject it. Only connections to '/services/echo' are accepted and set up as an echo server.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_js.md#2025-04-19_snippet_64\n\nLANGUAGE: javascript\nCODE:\n```\nvar server = vertx.createHttpServer();\n\nserver.websocketHandler(function(websocket) {\n  \n  if (websocket.path === '/services/echo') {\n    var p = new vertx.Pump(websocket, websocket);\n    p.start();  \n  } else {\n    websocket.reject();\n  }        \n}).listen(8080, 'localhost');\n```\n\n----------------------------------------\n\nTITLE: Custom HTTP Status Response\nDESCRIPTION: Shows how to set custom HTTP status code and message in the response.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_groovy.md#2025-04-19_snippet_50\n\nLANGUAGE: groovy\nCODE:\n```\ndef server = vertx.createHttpServer()\n\nserver.requestHandler{ request ->\n    request.response.with {\n        statusCode = 739\n        statusMessage = \"Too many gerbils\"\n        end()\n    }\n}.listen(8080, \"localhost\")\n```\n\n----------------------------------------\n\nTITLE: MySQL Client Connection and Query Example\nDESCRIPTION: Example showing how to configure and use the Vert.x MySQL client to connect to a database and execute a query.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/releases/2019-07-18-vertx-3.8.0-release.md#2025-04-19_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nMySQLConnectOptions connectOptions = new MySQLConnectOptions()\n  .setPort(3306)\n  .setHost(\"the-host\")\n  .setDatabase(\"the-db\")\n  .setUser(\"user\")\n  .setPassword(\"secret\");\n\nMySQLPool client = MySQLPool.pool(connectOptions, new PoolOptions().setMaxSize(5));\n\nclient.query(\"SELECT * FROM users WHERE id='julien'\", ar -> {\n  if (ar.succeeded()) {\n    RowSet result = ar.result();\n    System.out.println(\"Got \" + result.size() + \" rows \");\n  } else {\n    System.out.println(\"Failure: \" + ar.cause().getMessage());\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a SockJS Echo Application in Vert.x\nDESCRIPTION: This snippet shows how to create a SockJS echo application that simply reflects back any messages it receives. It demonstrates configuring the application and setting up a handler for incoming connections.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_js.md#2025-04-19_snippet_70\n\nLANGUAGE: javascript\nCODE:\n```\nvar httpServer = vertx.createHttpServer();\n\nvar sockJSServer = vertx.createSockJSServer(httpServer);\n\nvar config = { prefix: '/echo' };\n\nsockJSServer.installApp(config, function(sock) {\n\n    new vertx.Pump(sock, sock).start();\n    \n});\n\nhttpServer.listen(8080);\n```\n\n----------------------------------------\n\nTITLE: Using Kotlin Coroutines with Vert.x\nDESCRIPTION: Demonstrates the updated Kotlin coroutines support with the new await extension methods for simplified asynchronous programming.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/releases/2018-12-03-vertx-3.6.0-release.md#2025-04-19_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval result = awaitResult<ResultSet> { client.queryWithParams(\"SELECT TITLE FROM MOVIE WHERE ID=?\", json { array(id) }, it) };\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nval result = client.queryWithParamsAwait(\"SELECT TITLE FROM MOVIE WHERE ID=?\", json { array(id) })\n```\n\n----------------------------------------\n\nTITLE: Handling HTTP Client Responses in Vert.x Ruby\nDESCRIPTION: Demonstrates handling HTTP client responses including status code and message retrieval.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_ruby.md#2025-04-19_snippet_73\n\nLANGUAGE: ruby\nCODE:\n```\nclient = Vertx::HttpClient.new\nclient.host = 'foo.com'  \n\nclient.get_now('/some-path') do |resp|\n  puts \"server returned status code: #{resp.status_code}\"\n  puts \"server returned status message: #{resp.status_message}\"      \nend\n```\n\n----------------------------------------\n\nTITLE: Socket Data Handler with Pause on Full Queue\nDESCRIPTION: Enhanced implementation that pauses the socket when the write queue becomes full.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_ruby.md#2025-04-19_snippet_43\n\nLANGUAGE: ruby\nCODE:\n```\nserver = Vertx::NetServer.new\n\nserver.connect_handler do |sock|\n    sock.data_handler do |buffer|\n        sock.write(buffer)\n        if sock.write_queue_full?\n            sock.pause\n        end\n    end\n   \nend.listen(1234, 'localhost')\n```\n\n----------------------------------------\n\nTITLE: Chaining HTTP Server Creation with Request Handler\nDESCRIPTION: Creates an HTTP server and sets up a request handler using method chaining. This demonstrates how the requestHandler method returns the server instance to enable chaining.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_js.md#2025-04-19_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nvar server = vertx.createHttpServer();\n\nserver.requestHandler(function(request) {\n  log.info('An HTTP request has been received');\n}).listen(8080, 'localhost');\n```\n\n----------------------------------------\n\nTITLE: Writing Buffers to an HTTP Client Request in Vert.x with Ruby\nDESCRIPTION: Example of writing a buffer to an HTTP client request body. This is useful when sending binary data as part of the request.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_ruby.md#2025-04-19_snippet_67\n\nLANGUAGE: ruby\nCODE:\n```\nmyBuffer = ...\nrequest.write(myBuffer)\n```\n\n----------------------------------------\n\nTITLE: Configuring SSL NetClient with Trust Store in Groovy\nDESCRIPTION: Creates a NetClient configured to use SSL with a specific trust store, only trusting certificates that are in the provided trust store file. This is more secure than trusting all certificates.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_groovy.md#2025-04-19_snippet_36\n\nLANGUAGE: groovy\nCODE:\n```\ndef client = vertx.createNetClient(SSL: true,\n                                       trustStorePath: \"/path/to/your/client/truststore/client-truststore.jks\"\n                                       trustStorePassword: \"password\")\n```\n\n----------------------------------------\n\nTITLE: TCP Server Creation and Connection Handling in Vert.x\nDESCRIPTION: Demonstrates creating a TCP server, setting up connection handlers, and implementing data handling\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_groovy.md#2025-04-19_snippet_27\n\nLANGUAGE: groovy\nCODE:\n```\ndef server = vertx.createNetServer()\n\nserver.connectHandler { sock ->\n    sock.dataHandler { buffer ->\n        println \"I received ${buffer.length} bytes of data\"\n    }\n}.listen(1234, \"localhost\")\n```\n\n----------------------------------------\n\nTITLE: Periodic Timer Implementation in Vert.x\nDESCRIPTION: Demonstrates creating and using periodic timers with cancellation functionality\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_groovy.md#2025-04-19_snippet_25\n\nLANGUAGE: groovy\nCODE:\n```\nlong timerID = vertx.setPeriodic(1000, new Handler<Long>() {\n    public void handle(Long timerID) {\n        log.info('And every second this is printed')\n    }\n})\n\nlog.info('First this is printed')\n```\n\n----------------------------------------\n\nTITLE: Using RxJava2 Flowable and Observable with Vert.x streams\nDESCRIPTION: Shows how to convert Vert.x ReadStream to RxJava2 Flowable (back-pressured) and Observable (non-back-pressured) types. Illustrates the difference between the two in terms of flow control.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/releases/2018-08-10-vertx-3.5.0.Beta1-release.md#2025-04-19_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n// Flowable<Buffer> maps to a ReadStream<Buffer>\n// back-pressured stream\nFlowable<Buffer> flowable = asyncFile.toFlowable();\n\n// but we still can get an Observable<Buffer>\n// non back-pressured stream\nObservable<Buffer> flowable = asyncFile.toObservable();\n```\n\n----------------------------------------\n\nTITLE: Vert.x Web JSON Response Helper\nDESCRIPTION: Shows the simplified way to send JSON responses in Vert.x Web without manual content type setting.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/releases/2019-09-19-vertx-4-milestone3-release.md#2025-04-19_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nrc.json(new JsonObject().put(\"hello\", \"vert.x\"));\n```\n\n----------------------------------------\n\nTITLE: Implementing Lambda Handler with Vert.x Event Bus in Groovy\nDESCRIPTION: Main Lambda handler implementation that uses Vert.x Event Bus to route HTTP requests to appropriate handlers based on method and path. Includes initialization of Vert.x instance and registration of event handlers for CRUD operations.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2017-04-14-vertx-serverless.md#2025-04-19_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\n<Referenced as external gist: d5a544f8cdcd327a12010100b2ba2d66>\n```\n\n----------------------------------------\n\nTITLE: Reading Data Chunks from HTTP Response Body in Ruby\nDESCRIPTION: Shows how to read response body data as it arrives in chunks using a data handler. The client registers a handler that gets called for each chunk of data received from the server.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_ruby.md#2025-04-19_snippet_74\n\nLANGUAGE: ruby\nCODE:\n```\nclient = Vertx::HttpClient.new\nclient.host = 'foo.com'\n\nclient.get_now('/some-path') do |resp|\n  resp.data_handler { |buffer| puts \"I received #{buffer.length} bytes\" }     \nend\n```\n\n----------------------------------------\n\nTITLE: Opening a File Asynchronously with Vert.x FileSystem in Groovy\nDESCRIPTION: Demonstrates how to open a file asynchronously for reading and writing using the Vert.x FileSystem API. The method returns an AsyncFile object that can be used for file operations.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_groovy.md#2025-04-19_snippet_83\n\nLANGUAGE: groovy\nCODE:\n```\nvertx.fileSystem.open(\"some-file.dat\") { ar ->\n    if (ar.succeeded()) {\n        println \"File opened ok!\"\n        // etc\n    } else {\n        log.error(\"Failed to open file\", ar.exception)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Headers to HTTP Requests in Vert.x JavaScript\nDESCRIPTION: Shows different methods for adding headers to HTTP requests, including using the headers hash and the putHeader method.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_js.md#2025-04-19_snippet_51\n\nLANGUAGE: javascript\nCODE:\n```\nvar client = vertx.createHttpClient().setHost('foo.com');\n\nvar request = client.post('/some-path', function(resp) {\n    log.info('Got a response, status code: ' + resp.statusCode);\n});\n\nrequest.headers()['Some-Header'] = 'Some-Value';\nrequest.end();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nclient.post('/some-uri', function(resp) {\n    log.info('Got a response, status code: ' + resp.statusCode);\n}).putHeader('Some-Header', 'Some-Value')\n  .putHeader('Some-Other-Header', 'Some-Other-Value')\n  .end();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nclient.post('/some-uri', function(resp) {\n    log.info('Got a response, status code: ' + resp.statusCode);\n}).putAllHeaders({'Some-Header': 'Some-Value',\n               'Some-Other-Header': 'Some-Other-Value',\n               'Yet-Another-Header': 'Yet-Another-Value'})\n  .end();\n```\n\n----------------------------------------\n\nTITLE: Configuring Vert.x Options for Prometheus Metrics with Existing HTTP Server\nDESCRIPTION: Java code snippet demonstrating how to configure Vert.x options to enable Prometheus metrics reporting using an existing HTTP server.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2018-04-09-vertx-micrometer-metrics.md#2025-04-19_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n// Deploy without embedded server: we need to \"manually\" expose the prometheus metrics\nMicrometerMetricsOptions options = new MicrometerMetricsOptions()\n  .setPrometheusOptions(new VertxPrometheusOptions().setEnabled(true))\n  .setEnabled(true);\nVertx vertx = Vertx.vertx(new VertxOptions().setMetricsOptions(options));\n\nRouter router = Router.router(vertx);\nPrometheusMeterRegistry registry = (PrometheusMeterRegistry) BackendRegistries.getDefaultNow();\n// Setup a route for metrics\nrouter.route(\"/metrics\").handler(ctx -> {\n  String response = registry.scrape();\n  ctx.response().end(response);\n});\nvertx.createHttpServer().requestHandler(router::accept).listen(8080);\n```\n\n----------------------------------------\n\nTITLE: Reading Request Body Data in Chunks with Vert.x\nDESCRIPTION: This snippet demonstrates how to read the request body data in chunks using the dataHandler. It creates an HTTP server and logs the size of each received chunk.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_js.md#2025-04-19_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\nvar server = vertx.createHttpServer();\n\nserver.requestHandler(function(request) {\n\n  request.dataHandler(function(buffer) {\n    log.info('I received ' + buffer.length() + ' bytes');\n  });\n  \n}).listen(8080, 'localhost');\n```\n\n----------------------------------------\n\nTITLE: SockJS Client Implementation in JavaScript\nDESCRIPTION: A client-side JavaScript example for creating a SockJS connection to a Vert.x SockJS server. It demonstrates setting up event handlers for connection, message reception, and disconnection.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_js.md#2025-04-19_snippet_71\n\nLANGUAGE: javascript\nCODE:\n```\n<script>\n   var sock = new SockJS('http://mydomain.com/my_prefix');\n   \n   sock.onopen = function() {\n       console.log('open');\n   };\n   \n   sock.onmessage = function(e) {\n       console.log('message', e.data);\n   };\n   \n   sock.onclose = function() {\n       console.log('close');\n   };\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using Event-driven JSON Parser in Vert.x\nDESCRIPTION: Shows how to use the event-driven JSON Parser in Vert.x to efficiently parse large JSON structures, focusing on parsing an array of objects.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/releases/2017-10-20-vertx-3.5.0-release.md#2025-04-19_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nJsonParser parser = JsonParser.newParser();\n\n// The parser will handle JSON objects as values\nparser.objectValueMode();\n\nparser.handler(event -> {\n  switch (event.type()) {\n    case START_ARRAY:\n      // Start the array\n      break;\n    case END_ARRAY:\n      // End the array\n      break;\n    case VALUE:\n      // Handle each object\n      break;\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using the Vert.x Event Bus from Client-side JavaScript\nDESCRIPTION: This example shows how to use the Vert.x event bus from a browser. It demonstrates loading the required libraries, creating an event bus connection, registering event handlers, and sending messages.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_js.md#2025-04-19_snippet_73\n\nLANGUAGE: javascript\nCODE:\n```\n<script src=\"http://cdn.sockjs.org/sockjs-0.3.4.min.js\"></script>\n<script src='vertxbus.js'></script>\n\n<script>\n\n    var eb = new vertx.EventBus('http://localhost:8080/eventbus');\n    \n    eb.onopen = function() {\n    \n      eb.registerHandler('some-address', function(message) {\n\n        console.log('received a message: ' + JSON.stringify(message));\n\n      });\n\n      eb.send('some-address', {name: 'tim', age: 587});\n    \n    }\n   \n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Server to Listen on Specific Host and Port\nDESCRIPTION: Sets up the HTTP server to listen on a specific host and port. The server will accept incoming connections on the specified address.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_js.md#2025-04-19_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nvar server = vertx.createHttpServer();\n\nserver.listen(8080, 'myhost');\n```\n\n----------------------------------------\n\nTITLE: Client-side Event Bus Integration\nDESCRIPTION: Demonstrates how to connect to and use the Vert.x event bus from client-side JavaScript, including event handler registration and message sending.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_js.md#2025-04-19_snippet_71\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"http://cdn.sockjs.org/sockjs-0.2.1.min.js\"></script>\n<script src='vertxbus.js'></script>\n\n<script>\n\n    var eb = new vertx.EventBus('http://localhost:8080/eventbus');\n    \n    eb.onopen = function() {\n    \n      eb.registerHandler('some-address', function(message) {\n\n        console.log('received a message: ' + JSON.stringify(message));\n\n      });\n\n      eb.send('some-address', {name: 'tim', age: 587});\n    \n    }\n   \n</script>\n```\n\n----------------------------------------\n\nTITLE: Handling AMQP Requests in Vert.x\nDESCRIPTION: This snippet shows how to handle incoming AMQP requests in Vert.x, specifically for the getScores operation, including response formatting and error handling.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2017-01-25-building-services-and-apis-with-amqp.md#2025-04-19_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic void getScores(Message<Object> msg)  \n{  \n   if(msg.replyAddress() != null)  \n   {  \n     JsonObject response = new JsonObject();  \n     response.put(\"application_properties\", new JsonObject().put(\"status\", 200));  \n     response.put(\"body\", new JsonArray(Json.encode(scoreService.getScores())).encode());  \n     msg.reply(response);  \n   }  \n   else  \n   {  \n     LOG.warn(\"Received LiveScore/getScores request without reply to address\");  \n   }  \n}  \n```\n\n----------------------------------------\n\nTITLE: Streaming File Uploads to Disk in Vert.x\nDESCRIPTION: This example shows how to stream uploaded files directly to the file system using the stream_to_file_system method on the upload object.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_ruby.md#2025-04-19_snippet_53\n\nLANGUAGE: ruby\nCODE:\n```\nrequest.expect_multi_part = true\n\nrequest.upload_handler do |upload|\n   upload.stream_to_file_system \"upload/#{upload.filename}\"\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Error Handler in Vert.x\nDESCRIPTION: Java code snippet showing how to create an error handler for the Vert.x router to handle routing failures.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2016-01-15-real-time-bidding-with-websockets-and-vertx.md#2025-04-19_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nprivate ErrorHandler errorHandler() {\n    return ErrorHandler.create();\n}\n```\n\n----------------------------------------\n\nTITLE: Handling HTTP Chunked Requests in Vert.x (Groovy)\nDESCRIPTION: Shows how to enable HTTP Chunked Transfer Encoding for requests in Vert.x. This allows the HTTP request body to be written in chunks, useful for streaming large request bodies.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_groovy.md#2025-04-19_snippet_56\n\nLANGUAGE: groovy\nCODE:\n```\nrequest.chunked = true\n```\n\n----------------------------------------\n\nTITLE: Reading Data from HTTP Client Response Body in Vert.x (Groovy)\nDESCRIPTION: Shows different methods to read data from an HTTP client response body in Vert.x, including using a dataHandler for streaming and a bodyHandler for reading the entire body at once.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_groovy.md#2025-04-19_snippet_58\n\nLANGUAGE: groovy\nCODE:\n```\ndef client = vertx.createHttpClient(host: \"foo.com\")\n\nclient.getNow(\"/some-path/\") { resp ->\n    resp.dataHandler { buffer ->\n        println \"I received ${buffer.length} bytes\"\n    }\n}\n```\n\nLANGUAGE: groovy\nCODE:\n```\ndef client = vertx.createHttpClient(host: \"foo.com\")\n\nclient.getNow(\"/some-path/\") { resp ->\n    def body = new Buffer()\n    resp.dataHandler { buffer ->\n        body << buffer\n    }\n    resp.endHandler { println \"The total body received was ${body.length} bytes\" }\n}\n```\n\nLANGUAGE: groovy\nCODE:\n```\ndef client = vertx.createHttpClient(host: \"foo.com\")\n\nclient.getNow(\"/some-path/\") { resp ->\n    resp.bodyHandler { body ->\n        println \"The total body received was ${body.length} bytes\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Vert.x Config Implementation\nDESCRIPTION: Shows how to configure Vert.x applications using multiple config stores and formats.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2017-02-09-vertx-3.4.0.beta1.md#2025-04-19_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nConfigStoreOptions httpStore = new ConfigStoreOptions()\n  .setType(\"http\")\n  .setConfig(new JsonObject()\n    .put(\"host\", \"localhost\").put(\"port\", 8080).put(\"path\", \"/conf\"));\n\nConfigStoreOptions fileStore = new ConfigStoreOptions()\n  .setType(\"file\")\n  .setConfig(new JsonObject().put(\"path\", \"my-config.json\"));\n\nConfigStoreOptions sysPropsStore = new ConfigStoreOptions().setType(\"sys\");\n\nConfigRetrieverOptions options = new ConfigRetrieverOptions()\n  .addStore(httpStore).addStore(fileStore).addStore(sysPropsStore);\n\nConfigRetriever retriever = ConfigRetriever.create(vertx, options);\n```\n\n----------------------------------------\n\nTITLE: Connecting to a WebSocket Server from a Vert.x Client\nDESCRIPTION: This snippet demonstrates how to connect to a WebSocket server from a Vert.x HTTP client. It creates an HTTP client, sets the host, and then connects to a specific WebSocket URI, providing a handler that's called when the connection is established.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_js.md#2025-04-19_snippet_67\n\nLANGUAGE: javascript\nCODE:\n```\nvar client = vertx.createHttpClient().host(\"foo.com\");\n\nclient.connectWebsocket('/some-uri', function(websocket) {\n  \n  // WebSocket has connected!\n  \n});\n```\n\n----------------------------------------\n\nTITLE: Logging from a Vert.x Verticle in Ruby\nDESCRIPTION: This snippet illustrates how to obtain and use a logger within a Vert.x Verticle. It shows how to log an informational message using the logger.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_ruby.md#2025-04-19_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nlogger = Vertx.logger\n\nlogger.info 'I am logging something'\n```\n\n----------------------------------------\n\nTITLE: Setting Up HTTP Request Handler in Vert.x\nDESCRIPTION: Code that configures a request handler on an HTTP server to process incoming HTTP requests, logging a message whenever a request is received.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_js.md#2025-04-19_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\nvar server = vertx.createHttpServer();\n\nserver.requestHandler(function(request) {\n  console.log('An HTTP request has been received');\n})  \n\nserver.listen(8080, 'localhost');\n```\n\n----------------------------------------\n\nTITLE: Performing Single SQL Operations in Vert.x\nDESCRIPTION: Demonstrates how to perform single SQL operations directly on the SQLClient in Vert.x, simplifying the process of executing queries.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/releases/2017-10-20-vertx-3.5.0-release.md#2025-04-19_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nclient.queryWithParams(\"SELECT AVG(VALUE) AS VALUE FROM RATING WHERE MOVIE_ID=?\", new JsonArray().add(id), ar2 -> {\n  if (ar.succeeded()) {\n    int value = ar.result().get(0).getInteger(\"VALUE\");\n    // Continue\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Unmatched Routes in Vert.x JavaScript\nDESCRIPTION: This snippet demonstrates how to handle requests that don't match any defined routes in Vert.x. The noMatch method is used to specify a handler that returns a custom response when no routes match the incoming request.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_js.md#2025-04-19_snippet_63\n\nLANGUAGE: javascript\nCODE:\n```\nrouteMatcher.noMatch(function(req) {\n    req.response().end('Nothing matched');\n});\n```\n\n----------------------------------------\n\nTITLE: Running Vert.x Module with High Availability\nDESCRIPTION: Demonstrates how to run a Vert.x module with high availability (HA) support for automatic failover.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/manual.md#2025-04-19_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nvertx runmod com.acme~my-mod~2.1 -ha\n```\n\nLANGUAGE: bash\nCODE:\n```\nvertx runmod com.acme~my-other-mod~1.1 -ha\n```\n\nLANGUAGE: bash\nCODE:\n```\nvertx -ha\n```\n\n----------------------------------------\n\nTITLE: Setting Custom HTTP Status Code and Message in Vert.x\nDESCRIPTION: Creates an HTTP server that responds with a custom HTTP status code (777) and status message. This demonstrates how to customize the HTTP response beyond the standard status codes.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_js.md#2025-04-19_snippet_48\n\nLANGUAGE: javascript\nCODE:\n```\nvar server = vertx.createHttpServer();\n\nserver.requestHandler(function(req) {\n    request.response.statusCode(777).statusMessage(\"Too many gerbils\").end();       \n}).listen(8080, \"localhost\");\n```\n\n----------------------------------------\n\nTITLE: Configuring SockJS Bridge with Security Rules\nDESCRIPTION: Web server configuration with SockJS bridge enabled and security rules for controlling event bus message flow.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/js_web_tutorial.md#2025-04-19_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar webServerConf = {  \n  port: 8080,\n  host: 'localhost',\n  bridge: true,\n\n  inbound_permitted: [\n    {\n      address : 'vertx.mongopersistor',\n      match : {\n        action : 'find',\n        collection : 'albums'\n      }\n    }\n  ],\n  outbound_permitted: [ {} ]\n};\n```\n\n----------------------------------------\n\nTITLE: Deploying Multiple Vert.x Server Instances\nDESCRIPTION: Commands to deploy multiple instances of a Vert.x module or verticle for better CPU core utilization and scaling.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_js.md#2025-04-19_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\nvertx runmod com.mycompany~my-mod~1.0 -instances 20\n\nvertx run foo.MyApp -instances 20\n```\n\n----------------------------------------\n\nTITLE: Adding HTTP Response Trailers in Vert.x\nDESCRIPTION: Shows how to add HTTP response trailers to a chunked response in Vert.x. Trailers are written in the final chunk of the response and can be added using the trailers() method or putTrailer() for a fluent API.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_js.md#2025-04-19_snippet_50\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequest.response.trailers().set(\"Philosophy\", \"Solipsism\");\nrequest.response.trailers().set(\"Favourite-Shakin-Stevens-Song\", \"Behind the Green Door\");\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequest.response.putTrailer(\"Cat-Food\", \"Whiskas\").putTrailer(\"Eye-Wear\", \"Monocle\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven POM for Vert.x Project\nDESCRIPTION: Maven POM file configuration that sets up the project dependencies for Vert.x core and configures Java 8 compilation.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/intro-series/2015-07-14-post-01-my-first-vertx-3-application.md#2025-04-19_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0\n                      http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n  <modelVersion>4.0.0</modelVersion>\n  <groupId>io.vertx.blog</groupId>\n  <artifactId>my-first-app</artifactId>\n  <version>1.0-SNAPSHOT</version>\n\n  <dependencies>\n    <dependency>\n      <groupId>io.vertx</groupId>\n      <artifactId>vertx-core</artifactId>\n      <version>3.0.0</version>\n    </dependency>\n  </dependencies>\n\n  <build>\n    <plugins>\n      <plugin>\n        <artifactId>maven-compiler-plugin</artifactId>\n        <version>3.3</version>\n        <configuration>\n          <source>1.8</source>\n          <target>1.8</target>\n        </configuration>\n      </plugin>\n    </plugins>\n  </build>\n\n</project>\n```\n\n----------------------------------------\n\nTITLE: HTTP Request Headers Echo Server\nDESCRIPTION: Creates an HTTP server that echoes back the request headers in the response. Demonstrates header handling and response writing.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_groovy.md#2025-04-19_snippet_46\n\nLANGUAGE: groovy\nCODE:\n```\ndef server = vertx.createHttpServer()\n\nserver.requestHandler { request ->\n\n    def sb = new StringBuffer()\n    for (e in request.headers) {\n        sb << e.key << \": \" << e.value << '\\n'\n    }\n    request.response.putHeader(\"Content-Type\", \"text/plain\")\n    request.response.end(sb.toString())\n    }\n}.listen(8080, \"localhost\")\n```\n\n----------------------------------------\n\nTITLE: Role-Based Authorization Check in Vert.x\nDESCRIPTION: Handler that implements role-based access control by checking if the user has the required admin role before allowing access to the admin page.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2020-03-09-easy-sso-for-vertx-with-keycloak.md#2025-04-19_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nprivate void handleAdminPage(RoutingContext ctx) {\n\n    OAuth2TokenImpl user = (OAuth2TokenImpl) ctx.user();\n\n    // check for realm-role \"admin\"\n    user.isAuthorized(\"realm:admin\", res -> {\n\n        if (!res.succeeded() || !res.result()) {\n            respondWith(ctx, 403, \"text/html\", \"<h1>Forbidden</h1>\");\n            return;\n        }\n\n        String username = user.idToken().getString(\"preferred_username\");\n\n        String content = String.format(\"<h1>Admin Page: %s @%s</h1><a href=\\\"/protected\\\">Protected Area</a>\",\n                                        username, Instant.now());\n        respondWithOk(ctx, \"text/html\", content);\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Using Shared Sets in Vert.x JavaScript\nDESCRIPTION: Shows how to use shared sets between verticles for sharing data within the same Vert.x instance.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_js.md#2025-04-19_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nvar set = vertx.getSet('demo.myset');\n\nset.add('some-value');\n\nvar set = vertx.getSet('demo.myset');\n\n// Do something with the set\n```\n\n----------------------------------------\n\nTITLE: Reading a file into a Buffer with Vert.x FileSystem\nDESCRIPTION: Demonstrates how to read an entire file into a Buffer in one operation. Note that this loads the entire file into memory at once.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_ruby.md#2025-04-19_snippet_103\n\nLANGUAGE: ruby\nCODE:\n```\nVertx::FileSystem.read_file_as_buffer('myfile.dat') do |err, res|\n    puts \"File contains: #{res.length} bytes\" if !err        \nend\n```\n\n----------------------------------------\n\nTITLE: NetServer with Socket Pausing on Full WriteQueue in Groovy\nDESCRIPTION: Creates a NetServer that pauses the socket when the write queue is full to prevent data loss. However, it's missing the mechanism to resume reading when the queue drains.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_groovy.md#2025-04-19_snippet_40\n\nLANGUAGE: groovy\nCODE:\n```\ndef server = vertx.createNetServer()\n\nserver.connectHandler { sock ->\n    sock.dataHandler { buffer ->\n        if (!sock.writeQueueFull) {\n            sock.write(buffer)\n        } else {\n            sock.pause()\n        }\n    }\n}.listen(1234, \"localhost\")\n```\n\n----------------------------------------\n\nTITLE: Initializing AMQP Bridge in Vert.x\nDESCRIPTION: This code initializes the AMQP Bridge in Vert.x, connecting to the Dispatch router and creating consumers for the API endpoints.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2017-01-25-building-services-and-apis-with-amqp.md#2025-04-19_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nAmqpBridgeOptions options = new AmqpBridgeOptions().addEnabledSaslMechanism(\"ANONYMOUS\");  \nbridge = AmqpBridge.create(vertx, options);  \nbridge.start(amqpHostname, amqpPort, res -> {  \n   if (res.succeeded())  \n   {  \n     bridge.createConsumer(\"/setScore\").setMaxBufferedMessages(100).handler(this::setScore);  \n     bridge.createConsumer(\"/getScores\").setMaxBufferedMessages(100).handler(this::getScores);  \n     bridge.createConsumer(\"/addGame\").setMaxBufferedMessages(100).handler(this::addGame);  \n     fut.complete();  \n   }  \n   else  \n   {  \n     fut.fail(res.cause());  \n   }  \n});  \n```\n\n----------------------------------------\n\nTITLE: Serving Files with Fallback in Vert.x HTTP Server in Ruby\nDESCRIPTION: Example showing how to serve a file from disk with a fallback option when the requested file is not found. This approach provides a way to handle 404 errors gracefully.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_ruby.md#2025-04-19_snippet_57\n\nLANGUAGE: ruby\nCODE:\n```\nreq.response.send_file(\"web/\" + file, 'handler_404.html')\n```\n\n----------------------------------------\n\nTITLE: Listing Directory Contents with Filtering in Vert.x FileSystem in Groovy\nDESCRIPTION: Demonstrates how to list directory contents with a filter using the Vert.x FileSystem API. This example filters files to only include those with a .txt extension using a regular expression.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_groovy.md#2025-04-19_snippet_79\n\nLANGUAGE: groovy\nCODE:\n```\nvertx.fileSystem.readDir(\"mydirectory\", \".*\\\\.txt\") { ar ->\n    if (ar.succeeded()) {\n        println \"Directory contains these .txt files\"\n        for (file in ar.result) {\n            println file\n        }\n    } else {\n        log.error(\"Failed to read\", ar.exception)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up JUnit Test for API Contract Verification\nDESCRIPTION: This Java code snippet sets up a JUnit test class for verifying the API implementation against the RAML contract. It includes methods to boot the application and create a REST client.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2015-09-17-contract-driven-rest-services-with-vertx-3.md#2025-04-19_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class APITest {\n\n  private static final RamlDefinition api = RamlLoaders.fromClasspath()\n      .load(\"/api/hello.raml\")\n      .assumingBaseUri(\"http://localhost:8080/\");\n\n  private ResteasyClient client = new ResteasyClientBuilder().build();\n  private CheckingWebTarget checking;\n\n  @BeforeClass\n  public static void bootApp() {\n    Runner.run(App.class);\n  }\n\n  @Before\n  public void createTarget() {\n    checking = api.createWebTarget(client.target(\"http://localhost:8080\"));\n  }\n\n  @Test\n  public void testHelloEndpoint() {\n    checking.path(\"/hello\").request().get();\n    Assert.assertThat(checking.getLastReport(), RamlMatchers.hasNoViolations());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Undeploying a Verticle in Vert.x\nDESCRIPTION: Demonstrates how to manually undeploy a verticle using its deployment ID. This is useful when you need to remove a verticle that was programmatically deployed.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_js.md#2025-04-19_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ncontainer.undeployVerticle(deploymentID);\n```\n\n----------------------------------------\n\nTITLE: Reading HTTP Client Response Status in Vert.x (Groovy)\nDESCRIPTION: Demonstrates how to read the status code and status message from an HTTP client response in Vert.x using Groovy.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_groovy.md#2025-04-19_snippet_57\n\nLANGUAGE: groovy\nCODE:\n```\ndef client = vertx.createHttpClient(host: \"foo.com\")\n\nclient.getNow(\"/some-path/\") { resp ->\n    println \"server returned status code: ${resp.statusCode}\"\n    println \"server returned status message: ${resp.statusMessage}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating TCP Client Connection in Vert.x\nDESCRIPTION: Demonstrates how to create a TCP client and establish a connection to a server with error handling.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_js.md#2025-04-19_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nvar client = vertx.createNetClient();\n\nclient.exceptionHandler(function(ex) {\n  log.info('Cannot connect since the host does not exist!');\n});\n\nclient.connect(4242, 'host-that-doesnt-exist', function(sock) {\n  log.info('this won\\'t get called');\n});\n```\n\n----------------------------------------\n\nTITLE: Reading HTTP Client Response Data with Data Handler in JavaScript\nDESCRIPTION: This snippet demonstrates how to read an HTTP response body from a client request using a data handler, which is called as chunks of the response arrive. The client performs a GET request to a server and logs the size of each data chunk received.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_js.md#2025-04-19_snippet_53\n\nLANGUAGE: javascript\nCODE:\n```\nvar client = vertx.createHttpClient().setHost('foo.com');\n\nclient.getNow('/some-path', function(resp) {\n  resp.dataHandler(function(buffer) {\n    log.info('I received ' + buffer.length() + ' bytes');\n  });    \n});\n```\n\n----------------------------------------\n\nTITLE: Creating a WebSocket Server in Vert.x (Groovy)\nDESCRIPTION: Demonstrates how to create a basic WebSocket server in Vert.x by setting a websocketHandler on an HTTP server. The handler is called whenever a new WebSocket connection is established.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_groovy.md#2025-04-19_snippet_63\n\nLANGUAGE: groovy\nCODE:\n```\ndef server = vertx.createHttpServer()\n\nserver.websocketHandler{ ws ->\n    println \"A websocket has connected!\"\n}.listen(8080, \"localhost\")\n```\n\n----------------------------------------\n\nTITLE: Reading Entire Request Body at Once in Vert.x\nDESCRIPTION: This snippet shows how to read the entire request body at once by accumulating chunks in a buffer. It uses both dataHandler and endHandler to ensure all data is received before processing.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_js.md#2025-04-19_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\nvar server = vertx.createHttpServer();\n\nserver.requestHandler(function(request) {\n\n  // Create a buffer to hold the body\n  var body = new vertx.Buffer();  \n\n  request.dataHandler(function(buffer) {\n    // Append the chunk to the buffer\n    body.appendBuffer(buffer);\n  });\n  \n  request.endHandler(function() {\n    // The entire body has now been received\n    log.info('The total body received was ' + body.length() + ' bytes');\n  });\n  \n}).listen(8080, 'localhost');\n```\n\n----------------------------------------\n\nTITLE: Implementing HTTP 100-Continue Handling in JavaScript\nDESCRIPTION: This example shows how to handle the HTTP 100-Continue mechanism, which allows clients to check if the server will accept a request before sending large payloads. The client sets the 'Expect: 100-Continue' header and only sends the request body after receiving confirmation.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_js.md#2025-04-19_snippet_56\n\nLANGUAGE: javascript\nCODE:\n```\nvar client = vertx.createHttpClient().setHost('foo.com');\n\nvar request = client.put('/some-path', function(resp) {\n  \n  log.info('Got a response ' + resp.statusCode);\n  \n});     \n\nrequest.putHeader('Expect', '100-Continue');\n\nrequest.continueHandler(function() {\n    // OK to send rest of body\n    \n    request.write('Some data').end();\n});\n\nrequest.sendHead();\n```\n\n----------------------------------------\n\nTITLE: Using AsyncFile as ReadStream to Upload File via HTTP in Groovy\nDESCRIPTION: This example demonstrates how to use an AsyncFile as a ReadStream to pump data from a file to an HTTP request. It opens a file, creates an HTTP PUT request, and uses a Pump to transfer the file content to the request.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_groovy.md#2025-04-19_snippet_86\n\nLANGUAGE: groovy\nCODE:\n```\ndef client = vertx.createHttpClient(host: \"foo.com\")\n\nvertx.fileSystem.open(\"some-file.dat\") { ar ->\n    if (ar.succeeded) {\n        def request = client.put(\"/uploads\") { resp ->\n            println \"Received response: ${resp.statusCode}\"\n        }\n        def asyncFile = ar.result\n        def rs = asyncFile.getReadStream()\n        request.chunked = true\n        Pump.createPump(rs, request).start()\n        rs.endHandler{\n            // File sent, end HTTP requuest\n            request.end()\n        }\n    } else {\n        log.error(\"Failed to open file\", ar.exception)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Server-Side Vert.x Application with SockJS Event Bus Bridge\nDESCRIPTION: The server-side JavaScript code that sets up a Vert.x HTTP server with a SockJS event bus bridge. It configures inbound and outbound permissions for the 'draw' address and serves static resources for the client application.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2015-08-31-vertx-3-real-time-web-apps.md#2025-04-19_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar Router = require(\"vertx-web-js/router\");\nvar SockJSHandler = require(\"vertx-web-js/sock_js_handler\");\nvar StaticHandler = require(\"vertx-web-js/static_handler\");\n\nvar router = Router.router(vertx);\n\n// Allow outbound traffic to the draw address\n\nvar options = {\n  \"outboundPermitteds\" : [{\"address\" : \"draw\"}],\n  \"inboundPermitteds\" :  [{\"address\" : \"draw\"}]\n};\n\nrouter.route(\"/eventbus/*\").handler(SockJSHandler.create(vertx).bridge(options).handle);\n\n// Serve the static resources\nrouter.route().handler(StaticHandler.create().handle);\n\nvertx.createHttpServer().requestHandler(router.accept).listen(8080);\n```\n\n----------------------------------------\n\nTITLE: Handling HTTP Client Responses in Vert.x JavaScript\nDESCRIPTION: Demonstrates how to handle HTTP client responses, including accessing status codes and messages.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_js.md#2025-04-19_snippet_52\n\nLANGUAGE: javascript\nCODE:\n```\nvar client = vertx.createHttpClient().setHost('foo.com');\n\nclient.getNow('/some-path', function(resp) {\n  log.info('server returned status code: ' + resp.statusCode);   \n  log.info('server returned status message: ' + resp.statusMessage);   \n});\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Client with Domain Socket Support in Java\nDESCRIPTION: Shows how to configure the MySQL Reactive Client to use domain sockets for connection, including setting up connection options and creating a connection pool with size limitations.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/releases/2020-07-21-vertx-3.9.2-release.md#2025-04-19_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n// Connect Options\n// Socket file name /var/run/mysqld/mysqld.sock\nMySQLConnectOptions connectOptions = new MySQLConnectOptions()\n    .setHost(\"/var/run/mysqld/mysqld.sock\")\n    .setDatabase(\"the-db\");\n\n// Create the pooled client\nMySQLPool client = MySQLPool.pool(connectOptions, new PoolOptions().setMaxSize(5));\n```\n\n----------------------------------------\n\nTITLE: Selecting Random Port for Vert.x HTTP Server (Java)\nDESCRIPTION: This snippet shows how to select a random available port for a Vert.x HTTP server, useful for testing scenarios.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/intro-series/2015-07-20-post-02-vertx-application-configuration.md#2025-04-19_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nServerSocket socket = new ServerSocket(0);\nport = socket.getLocalPort();\nsocket.close();\n\nDeploymentOptions options = new DeploymentOptions()\n    .setConfig(new JsonObject().put(\"http.port\", port)\n    );\n\nvertx.deployVerticle(MyFirstVerticle.class.getName(), options, context.asyncAssertSuccess());\n```\n\n----------------------------------------\n\nTITLE: Clustered Handler Registration with Callback\nDESCRIPTION: Shows how to register an event bus handler with a callback that executes when the handler information has been propagated across the cluster.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_js.md#2025-04-19_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\neb.registerHandler('test.address', myHandler, function() {\n    log.info('Yippee! The handler info has been propagated across the cluster');\n});\n```\n\n----------------------------------------\n\nTITLE: Using get_now for Simple GET Requests in Vert.x HTTP Client with Ruby\nDESCRIPTION: Demonstration of using the get_now method for simple GET requests without a body. This method automatically ends the request, providing a more concise API for common GET operations.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_ruby.md#2025-04-19_snippet_66\n\nLANGUAGE: ruby\nCODE:\n```\nclient = Vertx::HttpClient.new\nclient.host = 'foo.com'    \n\nclient.get_now('/some-path/') do |resp|\n    puts \"got response #{resp.status_code}\" \nend\n```\n\n----------------------------------------\n\nTITLE: Socket Echo with Write Queue Check in Vert.x\nDESCRIPTION: An improved implementation that checks if the write queue is full before writing data back to the socket, preventing memory overflow but potentially losing data.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_js.md#2025-04-19_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nvar server = vertx.createNetServer();\n\nserver.connectHandler(function(sock) {\n\n    sock.dataHandler(function(buffer) {\n  \n        if (!sock.writeQueueFull()) {      \n            sock.write(buffer); \n        }\n    });\n            \n}).listen(1234, 'localhost');\n```\n\n----------------------------------------\n\nTITLE: Opening a File Asynchronously with Vert.x FileSystem in JavaScript\nDESCRIPTION: Demonstrates how to open a file for asynchronous access using Vert.x file system API. The example shows opening a file for both reading and writing with proper error handling.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_js.md#2025-04-19_snippet_81\n\nLANGUAGE: javascript\nCODE:\n```\nvertx.fileSystem.open('some-file.dat', vertx.FileSystem.OPEN_READ | vertx.FileSystem.OPEN_WRITE,\n    function(err, asyncFile) {\n        if (err) {\n            log.info('Failed to open file ' + err);\n        } else {\n            log.info('File opened ok');\n            asyncFile.close(); // Close it    \n        }\n    });\n```\n\n----------------------------------------\n\nTITLE: Reading Data from a Socket in Vert.x with Ruby\nDESCRIPTION: Creates a NetServer that listens on port 1234 and sets up a data handler on the socket to process incoming data. The handler outputs the length of data received each time data arrives on the socket.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_ruby.md#2025-04-19_snippet_23\n\nLANGUAGE: ruby\nCODE:\n```\nserver = Vertx::NetServer.new\n\nserver.connect_handler do |sock|\n\n    sock.data_handler do |buffer|\n        puts \"I received #{buffer.length} bytes of data\"\n    end\n\nend.listen(1234, 'localhost')\n```\n\n----------------------------------------\n\nTITLE: Random access writes with AsyncFile in Vert.x\nDESCRIPTION: Demonstrates how to perform random access writes to a file using the AsyncFile write method, writing a buffer at specific positions in the file.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_ruby.md#2025-04-19_snippet_107\n\nLANGUAGE: ruby\nCODE:\n```\nVertx::FileSystem.open('some-file.dat') do |err, async_file|\n    if err\n        puts \"Failed to open file #{err}\"\n    else\n        # File open, write a buffer 5 times into a file\n        buff = Vertx::Buffer.create('foo')\n        (1..5).each do |i|            \n            async_file.write(buff, buff.length() * i) do |err, res|\n                if err\n                    puts \"Failed to write #{err}\"\n                else\n                    puts 'Written ok'\n                end\n            end\n        end\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating WebSocket Client in Vert.x with Ruby\nDESCRIPTION: Shows how to implement a WebSocket client that connects to a server, handles incoming data, and sends text messages.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_ruby.md#2025-04-19_snippet_86\n\nLANGUAGE: ruby\nCODE:\n```\nclient = Vertx::HttpClient.new\nclient.host = 'foo.com'\nclient.port = 8080\n\nclient.connect_web_socket('/services/echo') do |websocket|\n\n  websocket.data_handler { |buff| puts \"got #{buff}\"}\n  \n  websocket.write_text_frame('foo')\n  \nend\n```\n\n----------------------------------------\n\nTITLE: Deploying a Vert.x Module Programmatically in JavaScript\nDESCRIPTION: Shows how to programmatically deploy a Vert.x module using JavaScript, specifying the module name and version.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/mods_manual.md#2025-04-19_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nvertx.deployModule('org.myorg~mymod~3.2');\n```\n\n----------------------------------------\n\nTITLE: Custom Content Type Predicate in Vert.x Web Client (Java)\nDESCRIPTION: This snippet demonstrates how to create a custom response predicate to check for a specific content type in Vert.x Web Client.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2018-12-10-http-response-validation-web-client.md#2025-04-19_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nclient\n  .get(8080, \"myserver.mycompany.com\", \"/some-uri\")\n  .expect(ResponsePredicate.contentType(\"some/content-type\"))\n  .send(ar -> {\n    // ....\n  });\n```\n\n----------------------------------------\n\nTITLE: Creating and Starting a SockJS Bridge in Ruby\nDESCRIPTION: Sets up a SockJS bridge that connects client events to the server-side event bus. This example creates a bridge at the '/eventbus' path without any security restrictions.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_ruby.md#2025-04-19_snippet_92\n\nLANGUAGE: ruby\nCODE:\n```\nserver = Vertx::HttpServer.new\n    \nsockJSServer = Vertx::SockJSServer.new(server)\n\nsockJSServer.bridge({'prefix' => '/eventbus'}, [], [])\n\nserver.listen(8080)\n```\n\n----------------------------------------\n\nTITLE: Random access reads with AsyncFile in Vert.x\nDESCRIPTION: Shows how to perform random access reads from a file using the AsyncFile read method, reading data from specific positions in the file into a buffer.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_ruby.md#2025-04-19_snippet_108\n\nLANGUAGE: ruby\nCODE:\n```\nVertx::FileSystem.open('some-file.dat') do |err, async_file|\n    if err\n        puts \"Failed to open file #{err}\"\n    else \n        buff = Vertx::Buffer.create(1000)\n        (1..10).each do |i|\n            async_file.read(buff, i * 100, i * 100, 100) do |err, res|\n                if err\n                    puts \"Failed to read #{err}\"\n                else\n                    puts 'Read ok'\n                end\n            end\n        end\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Registering an Event Bus Handler in Ruby\nDESCRIPTION: Demonstrates how to register a handler for messages on the 'test.address' address using the Vert.x event bus. The handler receives messages and can access the message body.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_ruby.md#2025-04-19_snippet_6\n\nLANGUAGE: Ruby\nCODE:\n```\nid = Vertx::EventBus.register_handler('test.address') do |message|\n    puts \"Got message body #{message.body}\" \nend\n```\n\n----------------------------------------\n\nTITLE: Using the Body Handler for HTTP Requests in Vert.x\nDESCRIPTION: This snippet shows how to use the body_handler method to simplify processing of HTTP request bodies, which gets called once when the entire body has been received.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_ruby.md#2025-04-19_snippet_51\n\nLANGUAGE: ruby\nCODE:\n```\nserver = Vertx::HttpServer.new\n\nserver.request_handler do |request|\n\n  request.body_handler do |body|\n    puts \"The total body received was #{body.length} bytes\"\n  end\n\nend.listen(8080, 'localhost')\n```\n\n----------------------------------------\n\nTITLE: Retrieving File Properties in Vert.x (JavaScript)\nDESCRIPTION: Demonstrates how to asynchronously retrieve file properties like creation time, last access time, last modified time, and file type information in Vert.x.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_js.md#2025-04-19_snippet_78\n\nLANGUAGE: javascript\nCODE:\n```\nvertx.fileSystem.props('some-file.txt', function(err, props) {\n    if (err) {\n        console.log('Failed to retrieve file props: ' + err);\n    } else {\n        console.log('File props are:');\n        console.log('Last accessed: ' + props.lastAccessTime);\n        // etc \n    }\n}); \n```\n\n----------------------------------------\n\nTITLE: Using AMQP Client\nDESCRIPTION: Example of connecting to an AMQP broker and creating receivers and senders.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/releases/2019-04-02-vertx-3.7.0-release.md#2025-04-19_snippet_13\n\nLANGUAGE: java\nCODE:\n```\nAmqpClientOptions options = new AmqpClientOptions()\n      .setHost(\"localhost\")\n      .setPort(5672)\n      .setUsername(\"user\")\n      .setPassword(\"secret\");\n    \nAmqpClient client = AmqpClient.create(vertx, options);\n\nclient.connect(ar -> {\n  if (ar.failed()) {\n    System.out.println(\"Unable to connect to the broker\");\n  } else {\n    System.out.println(\"Connection succeeded\");\n    AmqpConnection connection = ar.result();\n\n    // You can create receivers and senders\n    connection.createReceiver(\"my-queue\",\n      msg -> {\n        // called on every received messages\n        System.out.println(\"Received \" + msg.bodyAsString());\n      },\n      done -> {\n        if (done.failed()) {\n          System.out.println(\"Unable to create receiver\");\n        } else {\n          AmqpReceiver receiver = done.result();\n        }\n      }\n    );\n\n    connection.createSender(\"my-queue\", done -> {\n      if (done.failed()) {\n        System.out.println(\"Unable to create a sender\");\n      } else {\n        AmqpSender sender = done.result();\n        sender.send(AmqpMessage.create().withBody(\"hello\").build());\n      }\n    });\n\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling HTTP Chunked Transfer Encoding in Vert.x Client Request with Ruby\nDESCRIPTION: Example of enabling HTTP chunked transfer encoding for a client request. This allows the request body to be written in chunks and is useful for streaming large amounts of data without knowing the total size in advance.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_ruby.md#2025-04-19_snippet_72\n\nLANGUAGE: ruby\nCODE:\n```\nrequest.chunked = true\n```\n\n----------------------------------------\n\nTITLE: JSON Module Descriptor Example\nDESCRIPTION: Example of a mod.json configuration file showing various module configuration options including main class, worker settings, and includes.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/mods_manual.md#2025-04-19_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"main\": \"org.mycompany.mymod.MyMain\",\n    \"worker\": true,\n    \"multi-threaded\": false,\n    \"includes\": \"io.vertx~some-module~1.1,org.aardvarks~foo-mod~3.21-beta1\",\n    \"preserve-cwd\": true,\n    \"auto-redeploy\": true,\n    \"resident\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Module Instances with Configuration in Java\nDESCRIPTION: Shows how to deploy multiple instances of a module with configuration using PlatformManager. It includes error handling and deployment ID retrieval.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/embedding_manual.md#2025-04-19_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nJsonObject conf = new JsonObject().putString(\"foo\", \"wibble\");\n\npm.deployModule(\"com.mycompany~my-module~1.0\", conf, 10, new AsyncResultHandler<String>() {\n    public void handle(AsyncResult<String> asyncResult) {\n        if (asyncResult.succeeded()) {\n            System.out.println(\"Deployment ID is \" + asyncResult.result());\n        } else {\n            asyncResult.cause().printStackTrace();\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Deployment Completion in Vert.x\nDESCRIPTION: This snippet demonstrates how to handle the completion of a Verticle deployment in Vert.x. It shows using a block to receive notification when the deployment is complete, including error handling and deployment ID retrieval.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_ruby.md#2025-04-19_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nVertx.deploy_verticle('my_verticle.rb', nil, 10) do |err, deployment_id|\n    puts \"It's been deployed OK!\" if !err\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Log4j2 for Vert.x Application Logging\nDESCRIPTION: XML configuration for Log4j2 that sets up asynchronous logging to a file. It uses RollingFile appender to write logs to /var/log/vertx.log with ISO8601 timestamp format and configures an Async wrapper to ensure non-blocking logging operations.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2016-09-08-centralized-logging-for-vertx-applications-using-the-elk-stack.md#2025-04-19_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<Configuration>\n  <Appenders>\n    <RollingFile name=\"vertx_logs\" append=\"true\" fileName=\"/var/log/vertx.log\" filePattern=\"/var/log/vertx/$${date:yyyy-MM}/vertx-%d{MM-dd-yyyy}-%i.log.gz\">\n      <PatternLayout pattern=\"%d{ISO8601} %-5p %c:%L - %m%n\" />\n    </RollingFile>\n    <Async name=\"vertx_async\">\n      <AppenderRef ref=\"vertx_logs\"/>\n    </Async>\n  </Appenders>\n  <Loggers>\n    <Root level=\"DEBUG\">\n      <AppenderRef ref=\"vertx_async\" />\n    </Root>\n  </Loggers>\n</Configuration>\n```\n\n----------------------------------------\n\nTITLE: Setting Up a Request Handler for Vert.x HTTP Server in Ruby\nDESCRIPTION: This code shows how to set up a request handler for an HTTP server to process incoming requests. It also demonstrates chaining the listen method.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_ruby.md#2025-04-19_snippet_43\n\nLANGUAGE: ruby\nCODE:\n```\nserver = Vertx::HttpServer.new\n\nserver.request_handler do |request|\n  puts 'An HTTP request has been received'\nend.listen(8080, 'localhost')\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Time Service Module in Vert.x (Python)\nDESCRIPTION: This code creates a simple server-side service that listens on the event bus for messages and responds with the current time. It uses the EventBus.register_handler method to set up the service.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/python_web_tutorial.md#2025-04-19_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nimport time\nimport vertx\nfrom core.event_bus import EventBus\n\ndef handler(message):\n\tmessage.reply({'current_time' : time.time()*1000})        \nEventBus.register_handler(\"acme.timeService\", handler)\n```\n\n----------------------------------------\n\nTITLE: Sending a Point-to-Point Message on the Event Bus in Ruby\nDESCRIPTION: Shows how to send a point-to-point message to the 'test.address' address on the Vert.x event bus.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_ruby.md#2025-04-19_snippet_11\n\nLANGUAGE: Ruby\nCODE:\n```\nVertx::EventBus.send('test.address\", 'hello world')\n```\n\n----------------------------------------\n\nTITLE: Socket Echo with Pause on Full Queue in Vert.x\nDESCRIPTION: Further improved implementation that pauses the NetSocket when the write queue is full, preventing data loss but still lacking the ability to resume when space becomes available.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_js.md#2025-04-19_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nvar server = vertx.createNetServer();\n\nserver.connectHandler(function(sock) {\n\n    sock.dataHandler(function(buffer) {\n  \n        sock.write(buffer); \n        if (sock.writeQueueFull()) {      \n            sock.pause();\n        }\n    });\n            \n}).listen(1234, 'localhost');\n```\n\n----------------------------------------\n\nTITLE: Initializing Vert.x Shell Service with Telnet Connector\nDESCRIPTION: Sets up the Vert.x Shell service with Telnet connectivity on localhost port 4000. This code initializes the shell service that will host the custom commands.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2016-01-25-intro-to-vertx-shell.md#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar ShellService = require(\"vertx-shell-js/shell_service\");\nvar service = ShellService.create(vertx, {\n  \"telnetOptions\" : {\n    \"host\" : \"localhost\",\n    \"port\" : 4000\n  }\n});\nservice.start();\n```\n\n----------------------------------------\n\nTITLE: Configuring SSL Server in Vert.x with Server Certificates\nDESCRIPTION: Example showing how to configure a Vert.x NetServer with SSL using server certificates only. Sets up basic SSL configuration with keystore path and password.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_ruby.md#2025-04-19_snippet_32\n\nLANGUAGE: ruby\nCODE:\n```\nserver = Vertx::NetServer.new\nserver.ssl = true\nserver.key_store_path = '/path/to/your/keystore/server-keystore.jks'\nserver.key_store_password = 'password'\n```\n\n----------------------------------------\n\nTITLE: Implementing Vert.x TCP Client Verticle in Kotlin\nDESCRIPTION: Kotlin implementation of a Vert.x verticle that creates and maintains a TCP connection to a server, sending a shared secret and handling incoming messages.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2017-12-15-tcp-client-using-vertx-kotlin-and-gradle-build.md#2025-04-19_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\npackage info.usmans.blog.vertx\n\nimport io.vertx.core.AbstractVerticle\nimport io.vertx.core.Vertx\nimport io.vertx.core.net.NetClientOptions\nimport io.vertx.core.net.NetSocket\nimport org.slf4j.LoggerFactory\n\nclass NetClientVerticle : AbstractVerticle() {\n    private val logger = LoggerFactory.getLogger(NetClientVerticle::class.java)\n\n    private val serverHost = System.getProperty(\"serverHost\", \"127.0.0.1\")\n    private val serverPort = System.getProperty(\"serverPort\", \"8888\").toInt()\n    private val connectMessage = System.getProperty(\"connectMessage\", \"hello\")\n\n    override fun start() {\n        fireReconnectTimer()\n    }\n\n    private fun fireReconnectTimer() {\n        logger.info(\"Firing reconnect timer\")\n        vertx.setTimer(1000, { reconnect() })\n    }\n\n    private fun reconnect() {\n        val client = vertx.createNetClient(NetClientOptions())\n        client.connect(serverPort, serverHost, { res ->\n            if (res.succeeded()) {\n                logger.info(\"Connected to server $serverHost:$serverPort\")\n                val socket = res.result()\n                socket.write(connectMessage)\n                socket.handler({ data ->\n                    logger.info(\"Data received: ${data}\")\n                    //TODO: Do the work here ...\n                })\n                socket.closeHandler({\n                    logger.info(\"Connection closed\")\n                    fireReconnectTimer()\n                })\n            } else {\n                logger.error(\"Failed to connect: ${res.cause().message}\")\n                fireReconnectTimer()\n            }\n        })\n    }\n}\n\nfun main(args: Array<String>) {\n    System.setProperty(\"vertx.disableDnsResolver\", \"true\")\n    val vertx = Vertx.vertx()\n    vertx.deployVerticle(NetClientVerticle())\n}\n```\n\n----------------------------------------\n\nTITLE: Making POST Request with Vert.x Ruby HTTP Client\nDESCRIPTION: Shows how to make a POST request using the Vert.x HTTP client. The example demonstrates setting up the client, creating the request, and ending it to send it to the server.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_ruby.md#2025-04-19_snippet_67\n\nLANGUAGE: ruby\nCODE:\n```\nclient = Vertx::HttpClient.new\nclient.host = 'foo.com'  \n\nrequest = client.post('/some-path/') do |resp|\n    puts \"got response #{resp.status_code}\" \nend\n\nrequest.end\n```\n\n----------------------------------------\n\nTITLE: Random Access File Reads with AsyncFile in Vert.x (JavaScript)\nDESCRIPTION: This snippet shows how to perform random access reads from a file using AsyncFile's read method. It reads from different positions in the file into specific positions in a buffer, handling any errors in the callbacks.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_js.md#2025-04-19_snippet_87\n\nLANGUAGE: javascript\nCODE:\n```\nvertx.fileSystem.open('some-file.dat', function(err, asyncFile) {\n    if (err) {\n        console.log('Failed to open file ' + err);\n    } else {                   \n        var buff = new vertx.Buffer(1000);\n        for (var i = 0; i < 10; i++) {\n            asyncFile.read(buff, i * 100, i * 100, 100, function(err) {\n                if (err) {\n                    console.log('Failed to read ' + err);\n                } else {\n                    console.log('Read ok');\n                }\n            });    \n        }\n    }\n});  \n```\n\n----------------------------------------\n\nTITLE: TCP Server Setup in Vert.x\nDESCRIPTION: Demonstrates creating and configuring a TCP server with connection handling.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_ruby.md#2025-04-19_snippet_22\n\nLANGUAGE: ruby\nCODE:\n```\nserver = Vertx::NetServer.new\n\nserver.connect_handler do\n    puts 'A client has connected!'\nend.listen(1234, 'localhost')\n```\n\n----------------------------------------\n\nTITLE: Extracting Parameters Using Regular Expressions in Vert.x RouteMatcher (Groovy)\nDESCRIPTION: Demonstrates how to use regular expressions with RouteMatcher to extract parameters from URL paths. The example captures path segments as parameters named param0, param1, etc., and returns them in the response.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_groovy.md#2025-04-19_snippet_61\n\nLANGUAGE: groovy\nCODE:\n```\ndef server = vertx.createHttpServer()\n\ndef routeMatcher = new RouteMatcher()\n\nrouteMatcher.allWithRegEx(\"\\\\/([^\\\\/]+)\\\\/([^\\\\/]+)\") { req ->\n    def first = req.params[\"param0\"]\n    def second = req.params[\"param1\"]\n    req.response.end \"first is $first and second is $second\"\n}\n\nserver.requestHandler(routeMatcher).listen(8080, \"localhost\")\n```\n\n----------------------------------------\n\nTITLE: RxJava Single Integration with HTTP Server\nDESCRIPTION: Shows how to use RxJava Singles with Vert.x HTTP server for reactive programming.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2017-02-09-vertx-3.4.0.beta1.md#2025-04-19_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nHttpServer server = vertx.createHttpServer();\nSingle<HttpServer> single = server.rxListen(8080, \"localhost\");\nsingle.subscribe(\n  ok -> System.out.println(\"Server started\"),\n  err -> System.out.println(\"Something went wrong \" + err.getMessage()));\n```\n\n----------------------------------------\n\nTITLE: Using Redis Client\nDESCRIPTION: Example of using the new Redis client API to connect and send commands.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/releases/2019-04-02-vertx-3.7.0-release.md#2025-04-19_snippet_9\n\nLANGUAGE: java\nCODE:\n```\nRedis\n  .createClient(vertx, inetSocketAddress(7006, \"127.0.0.1\"))\n  .connect(create -> {\n    final Redis redis = create.result();\n\n    redis.send(Request.cmd(Command.PING), send -> {\n      // ... should reply with PONG\n    });\n  });\n```\n\n----------------------------------------\n\nTITLE: Extracting Parameters Using Regular Expressions in Vert.x JavaScript\nDESCRIPTION: This snippet shows how to extract parameters from a URL path using regular expressions in Vert.x. It creates a route matcher that uses a regex pattern to capture two parameters, which are then accessed as 'param0' and 'param1' in the request handler.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_js.md#2025-04-19_snippet_62\n\nLANGUAGE: javascript\nCODE:\n```\nvar server = vertx.createHttpServer();\n\nvar routeMatcher = new vertx.RouteMatcher();\n\nrouteMatcher.allWithRegEx('\\/([^\\/]+)\\/([^\\/]+)', function(req) {        \n    var first = req.params().get('param0');\n    var second = req.params().get('param1');\n    req.response.end(\"first is \" + first + \" and second is \" + second);\n});\n\nserver.requestHandler(routeMatcher).listen(8080, 'localhost');\n```\n\n----------------------------------------\n\nTITLE: Using Kafka Admin API in Vert.x 3.9.0\nDESCRIPTION: Shows how to use the updated Kafka Admin API to list consumer groups, following the upgrade to Kafka 2.4.0.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/releases/2020-04-02-vertx-3.9.0-release.md#2025-04-19_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nadminClient.listConsumerGroups(ar -> {\n    System.out.println(\"ConsumerGroups= \" + ar.result());\n});\n```\n\n----------------------------------------\n\nTITLE: Creating TCP Client Connection in Vert.x\nDESCRIPTION: Demonstrates how to create a TCP client and establish a connection to a server with a connection handler.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_groovy.md#2025-04-19_snippet_31\n\nLANGUAGE: groovy\nCODE:\n```\ndef client = vertx.createNetClient()\n\nclient.connect(1234, \"localhost\") { socket -> println \"We have connected!\" }\n```\n\n----------------------------------------\n\nTITLE: Echoing Request Headers in Vert.x HTTP Server Response with Ruby\nDESCRIPTION: This snippet shows how to access and echo back the request headers in the HTTP response. It demonstrates header handling and response writing.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_ruby.md#2025-04-19_snippet_44\n\nLANGUAGE: ruby\nCODE:\n```\nserver.request_handler do |request|\n\n  request.response.put_header('Content-Type', 'text/plain')\n     \n  str = \"Headers are\\n\"\n  request.headers.each do |key, value|\n    str << \"#{key}: #{value}\\n\"\n  end\n  \n  request.response.end(str)\n  \nend.listen(8080, 'localhost')\n```\n\n----------------------------------------\n\nTITLE: Initializing EventBus in JavaScript for Vert.x Client-Side Communication\nDESCRIPTION: Creates an EventBus object using the vertxbus.js library to enable communication between the client and server via the Vert.x event bus.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/python_web_tutorial.md#2025-04-19_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar eb = new vertx.EventBus(window.location.protocol + '//' + window.location.hostname + ':' + window.location.port + '/eventbus');\n```\n\n----------------------------------------\n\nTITLE: Implementing TCP Data Reading Handler in Vert.x\nDESCRIPTION: Sets up a NetServer instance that handles incoming data by logging the buffer length. Demonstrates basic data reading from TCP sockets.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_js.md#2025-04-19_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nvar server = vertx.createNetServer();\n\nserver.connectHandler(function(sock) {\n    \n    sock.dataHandler(function(buffer) {\n        log.info('I received ' + buffer.length() + ' bytes of data');\n    });\n  \n}).listen(1234, 'localhost');\n```\n\n----------------------------------------\n\nTITLE: Reading HTTP Response Body with DataHandler in Vert.x\nDESCRIPTION: Shows how to read HTTP response body in chunks using dataHandler and handle streaming data.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_js.md#2025-04-19_snippet_58\n\nLANGUAGE: javascript\nCODE:\n```\nvar client = vertx.createHttpClient().host('foo.com');\n\nclient.getNow('/some-path', function(resp) {\n  resp.dataHandler(function(buffer) {\n    console.log('I received ' + buffer.length() + ' bytes');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Calling a Time Service from Client-Side JavaScript in Vert.x\nDESCRIPTION: This snippet demonstrates how to call the previously defined time service from client-side JavaScript or other server-side components using the Vert.x event bus.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/js_web_tutorial.md#2025-04-19_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\neventBus.send(\"acme.timeService\", null, function(reply) {\n    console.log(\"Time is \" + reply.current_time);\n});\n```\n\n----------------------------------------\n\nTITLE: Using Cassandra Object Mapper\nDESCRIPTION: Example of using the Cassandra object mapper for CRUD operations.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/releases/2019-04-02-vertx-3.7.0-release.md#2025-04-19_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nVertxMappingManager manager = VertxMappingManager.create(cassandraClient);\nVertxMapper<User> mapper = manager.mapper(User.class, vertx);\nmapper.save(new User(\"john\", hander -> {}));\n```\n\n----------------------------------------\n\nTITLE: WebSocket Upgrade Handler\nDESCRIPTION: Shows the new asynchronous WebSocket upgrade process using the toWebSocket() method on the server side.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/releases/2020-09-25-vertx-4-beta3-release.md#2025-04-19_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nserver.requestHandler(request -> {\n  if (request.method() == HttpMethod.GET && \"Upgrade\".equals(request.getHeader(\"connection\"))) {\n    // Will do the WebSocket handshake\n    request.toWebSocket(ar -> {\n      if (ar.succeeded()) {\n        ServerWebSocket socket = ar.result();\n      }\n    });\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Setting HTTP Response Status Code in Vert.x\nDESCRIPTION: This snippet shows how to set the HTTP status code for a response. It creates an HTTP server that always responds with a 404 status code.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_js.md#2025-04-19_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\nvar server = vertx.createHttpServer();\n\nserver.requestHandler(function(request) {\n\n    request.response.statusCode = 404;\n    \n    request.response.end();\n  \n}).listen(8080, 'localhost');\n```\n\n----------------------------------------\n\nTITLE: MongoDB GridFS File Upload\nDESCRIPTION: Demonstrates how to upload files to MongoDB GridFS using the new Mongo client features.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/releases/2019-09-19-vertx-4-milestone3-release.md#2025-04-19_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nFuture<String> fut = gridFsClient.uploadFile(\"file.name\");\n\nfut.setHandler(res -> {\n   if (res.succeeded()) {\n     String id = res.result();\n     //The ID of the stored object in Grid FS\n   } else {\n     res.cause().printStackTrace();\n   }\n });\n```\n\n----------------------------------------\n\nTITLE: JavaScript EventBus Client Initialization\nDESCRIPTION: Shows how to create an instance of the Vert.x event bus on the client side. This snippet demonstrates instantiating the event bus with the URI where the bridge is exposed.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_ruby.md#2025-04-19_snippet_94\n\nLANGUAGE: javascript\nCODE:\n```\nvar eb = new vertx.EventBus('http://localhost:8080/eventbus')\n```\n\n----------------------------------------\n\nTITLE: Initializing EventBus Connection - JavaScript\nDESCRIPTION: Creates an EventBus object using vertxbus.js library to enable client-server communication through the Vert.x event bus.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/js_web_tutorial.md#2025-04-19_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar eb = new vertx.EventBus(window.location.protocol + '//' + window.location.hostname + ':' + window.location.port + '/eventbus');\n```\n\n----------------------------------------\n\nTITLE: Enabling Chunked HTTP Responses in Vert.x\nDESCRIPTION: Demonstrates how to enable chunked transfer encoding for HTTP responses in Vert.x. This allows the response body to be written in chunks, useful for streaming large responses.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_js.md#2025-04-19_snippet_49\n\nLANGUAGE: JavaScript\nCODE:\n```\nreq.response.chunked(true);\n```\n\n----------------------------------------\n\nTITLE: Creating and Manipulating Buffers in Vert.x JavaScript\nDESCRIPTION: Examples of creating buffers from strings with different encodings and initializing empty buffers with size hints.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_js.md#2025-04-19_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nvar buff = new vertx.Buffer('some-string');\n\nvar buff = new vertx.Buffer('some-string', 'UTF-16');\n\nvar buff = new vertx.Buffer(100000);\n```\n\n----------------------------------------\n\nTITLE: Implementing Closed Handler in Vert.x TCP Server\nDESCRIPTION: Sets up a handler to be notified when a TCP socket is closed, working for both client and server-initiated closes.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_groovy.md#2025-04-19_snippet_29\n\nLANGUAGE: groovy\nCODE:\n```\ndef server = vertx.createNetServer()\n\nserver.connectHandler { sock -> \n    sock.closedHandler { println \"The socket is now closed\" }\n}.listen(1234, \"localhost\")\n```\n\n----------------------------------------\n\nTITLE: Coordinating Application Loading with a Verticle in Vert.x\nDESCRIPTION: This code example demonstrates using a Verticle to coordinate the loading of an application composed of multiple Verticles. It shows how to deploy various Verticles with different configurations and instance counts.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_ruby.md#2025-04-19_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nappConfig = Vert.x.config\n    \n# Start the verticles that make up the app\n\nVertx.deploy_verticle(\"verticle1.rb\", appConfig[:verticle1_config])\nVertx.deploy_verticle(\"verticle2.rb\", appConfig[:verticle2_config], 5)\nVertx.deploy_verticle(\"verticle3.rb\", appConfig[:verticle3_config])\nVertx.deploy_worker_verticle(\"verticle4.rb\", appConfig[:verticle4_config])\nVertx.deploy_worker_verticle(\"verticle5.rb\", appConfig[:verticle5_config], 10)\n```\n\n----------------------------------------\n\nTITLE: Copying Files with Vert.x FileSystem in Groovy\nDESCRIPTION: Demonstrates how to copy a file using the Vert.x FileSystem API. This example copies 'foo.dat' to 'bar.dat' and handles the result through a callback function.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_groovy.md#2025-04-19_snippet_75\n\nLANGUAGE: groovy\nCODE:\n```\nvertx.fileSystem.copy(\"foo.dat\", \"bar.dat\") { ar ->\n    if (ar.succeeded() {\n        log.info(\"Copy was successful\")\n    } else {\n        log.error(\"Failed to copy\", ar.exception)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Making HTTP Requests with Vert.x HTTP Client in Groovy\nDESCRIPTION: This snippet shows how to make various types of HTTP requests (POST, GET, etc.) using the Vert.x HTTP client. It demonstrates handling responses and using the fluent API for chaining operations.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_groovy.md#2025-04-19_snippet_52\n\nLANGUAGE: groovy\nCODE:\n```\ndef client = vertx.createHttpClient(host: \"foo.com\")\n\ndef request = client.post(\"/some-path/\") { resp ->\n  println \"Got a response: ${resp.statusCode}\"        \n}\n\nrequest.end()\n\ndef request = client.request(\"POST\", \"/some-path/\") { resp ->\n    println \"Got a response: ${resp.statusCode}\"\n}\n\nrequest.end()\n\nclient.getNow(\"/some-path/\") { resp ->\n    println \"Got a response: ${resp.statusCode}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Starting an HTTP Server in Vert.x with Ruby\nDESCRIPTION: This snippet demonstrates how to create an HTTP server instance and start it listening on a specific port and host.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_ruby.md#2025-04-19_snippet_42\n\nLANGUAGE: ruby\nCODE:\n```\nserver = Vertx::HttpServer.new\n\nserver.listen(8080, 'myhost')\n```\n\n----------------------------------------\n\nTITLE: Reading from Buffers in Vert.x JavaScript\nDESCRIPTION: Examples of reading different data types from buffers using get methods.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_js.md#2025-04-19_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nvar buff = ...;\nfor (var i = 0; i < buff.length(); i += 4) {\n    console.log(\"int value at \" + i + \" is \" + buff.getInt(i));\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Sample Data in Vert.x Verticle\nDESCRIPTION: Code for creating initial whisky data and setting up the data store using a LinkedHashMap in the Vert.x Verticle.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/intro-series/2015-07-27-post-03-some-rest-with-vertx.md#2025-04-19_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nprivate Map<Integer, Whisky> products = new LinkedHashMap<>();\n\nprivate void createSomeData() {\n  Whisky bowmore = new Whisky(\"Bowmore 15 Years Laimrig\", \"Scotland, Islay\");\n  products.put(bowmore.getId(), bowmore);\n  Whisky talisker = new Whisky(\"Talisker 57Â° North\", \"Scotland, Island\");\n  products.put(talisker.getId(), talisker);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting HTTP Response Headers Using Hash in Vert.x Ruby\nDESCRIPTION: Shows how to add an HTTP response header by setting a value in the headers hash. Headers must be added before any parts of the response body are written.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_ruby.md#2025-04-19_snippet_55\n\nLANGUAGE: ruby\nCODE:\n```\nrequest.response.headers['Some-header'] = 'foo'\n```\n\n----------------------------------------\n\nTITLE: Configuring Vert.x Logging Framework\nDESCRIPTION: Shows how to configure a different logging framework for Vert.x using system properties.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/manual.md#2025-04-19_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n-Dorg.vertx.logger-delegate-factory-class-name=org.vertx.java.core.logging.impl.Log4jLogDelegateFactory\n```\n\nLANGUAGE: bash\nCODE:\n```\n-Dorg.vertx.logger-delegate-factory-class-name=org.vertx.java.core.logging.impl.SLF4JLogDelegateFactory\n```\n\n----------------------------------------\n\nTITLE: Reading and Writing Data with SockJS Server in Vert.x\nDESCRIPTION: This example shows how to read data from a SockJS connection using the dataHandler method and write it back using the writeBuffer method, implementing echo functionality.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_js.md#2025-04-19_snippet_68\n\nLANGUAGE: javascript\nCODE:\n```\nvar httpServer = vertx.createHttpServer();\n\nvar sockJSServer = vertx.createSockJSServer(httpServer);\n\nvar config = { prefix: '/echo' };\n\nsockJSServer.installApp(config, function(sock) {\n\n    sock.dataHandler(function(buff) {\n        sock.writeBuffer(buff);\n    });\n});\n\nhttpServer.listen(8080);\n```\n\n----------------------------------------\n\nTITLE: Weekly Timer Example in Java\nDESCRIPTION: Implementation of a timer that fires every Monday at 8:30 and Friday at 17:30 using Java\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2017-05-09-Time-scheduling-with-Chime.md#2025-04-19_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\n// listen the timer events\nMessageConsumer<JsonObject> consumer = eventBus.consumer(\"my scheduler:my timer\");\nconsumer.handler (\n\tmessage -> {\n\t\tSystem.out.println(message.body());\n  \t}\n);\n// description of timers\nJsonObject mondayTimer = (new JsonObject()).put(\"type\", \"cron\")\n\t.put(\"seconds\", \"0\").put(\"minutes\", \"30\").put(\"hours\", \"8\")\n\t.put(\"days of month\", \"*\").put(\"months\", \"*\")\n\t.put(\"days of week\", \"Monday\");\nJsonObject fridayTimer = (new JsonObject()).put(\"type\", \"cron\")\n\t.put(\"seconds\", \"0\").put(\"minutes\", \"30\").put(\"hours\", \"17\")\n\t.put(\"days of month\", \"*\").put(\"months\", \"*\")\n\t.put(\"days of week\", \"Friday\");\n// union timer - combines mondayTimer and fridayTimer\nJsonArray combination = (new JsonArray()).add(mondayTimer)\n\t.add(fridayTimer);\nJsonObject timer = (new JsonObject()).put(\"type\", \"union\")\n\t.put(\"timers\", combination);\n// create scheduler and timer\neventBus.send (\n\t\"chime\",\n\t(new JsonObject()).put(\"operation\", \"create\")\n\t\t.put(\"name\", \"my scheduler:my timer\")\n\t\t.put(\"description\", timer)\n);\n```\n\n----------------------------------------\n\nTITLE: Using bodyHandler for Request Body in Vert.x\nDESCRIPTION: This snippet demonstrates the use of bodyHandler to read the entire request body at once. It's a simpler approach for handling small request bodies, but should be used cautiously with large requests to avoid memory issues.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_js.md#2025-04-19_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\nvar server = vertx.createHttpServer();\n\nserver.requestHandler(function(request) {\n\n  request.bodyHandler(function(body) {\n    log.info('The total body received was ' + body.length() + ' bytes');\n  });\n  \n}).listen(8080, 'localhost');\n```\n\n----------------------------------------\n\nTITLE: Pumping HTTP Request to Response in Vert.x JavaScript\nDESCRIPTION: Creates an HTTP server that echoes the request headers and body back in the response. It uses a pump for the body to handle large requests efficiently.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_js.md#2025-04-19_snippet_47\n\nLANGUAGE: javascript\nCODE:\n```\nvar server = vertx.createHttpServer();\n\nserver.requestHandler(function(req) {\n  \n  req.response.putAllHeaders(req.headers());\n  \n  var p = new Pump(req, req.response);\n  p.start();\n  \n  req.endHandler(function() { req.response.end(); });\n  \n}).listen(8080, 'localhost');\n```\n\n----------------------------------------\n\nTITLE: Implementing MQTT Client Verticle\nDESCRIPTION: Java implementation of a Vert.x verticle that creates an MQTT client, connects to a broker, and handles incoming messages. Sets up message subscription and UTF-8 message decoding.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2017-08-21-introducing-vertx-mqtt-client.md#2025-04-19_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nimport io.vertx.core.AbstractVerticle;\nimport io.vertx.mqtt.MqttClient;\nimport io.vertx.mqtt.MqttClientOptions;\n\nimport java.io.UnsupportedEncodingException;\n\npublic class MainVerticle extends AbstractVerticle {\n\n  @Override\n  public void start() {\n     MqttClientOptions options = new MqttClientOptions();\n      // specify broker host\n      options.setHost(\"iot.eclipse.org\");\n      // specify max size of message in bytes\n      options.setMaxMessageSize(100_000_000);\n\n    MqttClient client = MqttClient.create(vertx, options);\n\n    client.publishHandler(s -> {\n      try {\n        String message = new String(s.payload().getBytes(), \"UTF-8\");\n        System.out.println(String.format(\"Receive message with content: \\\"%s\\\" from topic \\\"%s\\\"\", message, s.topicName()));\n      } catch (UnsupportedEncodingException e) {\n        e.printStackTrace();\n      }\n    });\n\n    client.connect(s -> {\n      // subscribe to all subtopics\n      client.subscribe(\"#\", 0);\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Pumping File Data to HTTP Request in Vert.x (JavaScript)\nDESCRIPTION: This example demonstrates using AsyncFile as a ReadStream with a pump to transfer file data to an HTTP request. It opens a file, creates an HTTP PUT request, then uses Pump to stream the file contents to the request.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_js.md#2025-04-19_snippet_88\n\nLANGUAGE: javascript\nCODE:\n```\nvar client = new vertx.HttpClient().host('foo.com');\n\nvertx.fileSystem.open('some-file.dat', function(err, asyncFile) {\n    if (err) {\n        console.log('Failed to open file ' + err);\n    } else {                   \n        var request = client.put('/uploads', function(resp) {\n            console.log('resp status code ' + resp.statusCode());\n        });            \n        new vertx.Pump(asyncFile, request).start();            \n        asyncFile.endHandler(function() {\n            // File sent, end HTTP requuest\n            request.end();\n        });\n        \n    }\n});   \n```\n\n----------------------------------------\n\nTITLE: OpenID Connect Discovery Implementation in Java\nDESCRIPTION: Demonstrates the new OpenID Connect Discovery support for simplified OAuth2 configuration.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/releases/2018-12-03-vertx-3.6.0-release.md#2025-04-19_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nOpenIDConnectAuth.discover(vertx,\n  new OAuth2ClientOptions()\n    .setSite(\"https://accounts.google.com\")\n    .setClientID(\"clientId\"),\n  res -> {\n    if (res.succeeded()) {\n      // the setup call succeeded.\n      // at this moment your auth is ready to use and\n      // google signature keys are loaded so tokens can be decoded and verified.\n    } else {\n      // the setup failed.\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Reading from Buffers in Vert.x Ruby\nDESCRIPTION: Demonstrates how to read various data types from specific positions in Vert.x buffers using get methods.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_ruby.md#2025-04-19_snippet_19\n\nLANGUAGE: Ruby\nCODE:\n```\nnum = buff.get_byte(100)                 # Get a byte from pos 100 in buffer\n\nnum = buff.get_fixnum(100, 1)            # Same as get_byte\n\nnum = buff.get_fixnum(100, 2)            # Get two bytes as signed integer from pos 100\n\nnum = buff.get_fixnum(100, 4)            # Get four bytes as signed integer from pos 100 \n\nnum = buff.get_fixnum(100, 8)            # Get eight bytes as signed integer from pos 100\n```\n\nLANGUAGE: Ruby\nCODE:\n```\nnum = buff.get_float(100, 4)             # Get four bytes as a 32-bit IEEE 754 floating point number from pos 100\n\nnum = buff.get_float(100, 8)             # Get eight bytes as a 32-bit IEEE 754 floating point number from pos 100\n```\n\nLANGUAGE: Ruby\nCODE:\n```\nstr = buff.get_string(100, 110)           # Get 10 bytes from pos 100 interpreted as UTF-8 string\n\nstr = buff.get_string(100, 110, 'UTF-16') # Get 10 bytes from pos 100 interpreted in specified encoding\n```\n\nLANGUAGE: Ruby\nCODE:\n```\nother_buff = buff.get_buffer(100, 110)    # Get 10 bytes as a new buffer starting at position 100\n```\n\n----------------------------------------\n\nTITLE: Creating a SockJS Server in Vert.x JavaScript\nDESCRIPTION: This snippet demonstrates how to create a basic SockJS server in Vert.x by first creating an HTTP server and then using it to initialize a SockJS server.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_js.md#2025-04-19_snippet_69\n\nLANGUAGE: javascript\nCODE:\n```\nvar httpServer = vertx.createHttpServer();\n\nvar sockJSServer = vertx.createSockJSServer(httpServer);\n```\n\n----------------------------------------\n\nTITLE: File Upload via HTTP using Vertx Pump\nDESCRIPTION: Shows how to pump file data to an HTTP request using AsyncFile as a ReadStream.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_ruby.md#2025-04-19_snippet_104\n\nLANGUAGE: ruby\nCODE:\n```\nclient = Vertx::HttpClient.new\nclient.host = 'foo.com'\n\nVertx::FileSystem.open('some-file.dat') do |err, async_file|\n    if err\n        puts \"Failed to open file #{err}\"\n    else\n        request = client.put('/uploads') do |resp|\n            puts \"resp status code #{resp.status_code}\"\n        end\n        rs = asyncFile.read_stream\n        pump = Vertx::Pump.new(rs, request)\n        pump.start\n        rs.end_handler do \n            # File sent, end HTTP requuest\n            request.end\n        end\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Enabling Chunked HTTP Response in Vert.x Ruby\nDESCRIPTION: Shows how to enable chunked transfer encoding for an HTTP response. This allows the response body to be written in chunks, useful for streaming large responses.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_ruby.md#2025-04-19_snippet_57\n\nLANGUAGE: ruby\nCODE:\n```\nreq.response.chunked = true\n```\n\n----------------------------------------\n\nTITLE: Basic Asynchronous Handler Example in Java\nDESCRIPTION: Simple example demonstrating asynchronous operation pattern using a handler for addition operation.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/intro-series/2015-10-19-post-05-using-the-asynchronous-sql-client.md#2025-04-19_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic void add(int a, int b, Handler<Integer> resultHandler) {\n\tint r = a + b;\n\tresultHandler.handle(r);\n}\n```\n\n----------------------------------------\n\nTITLE: Getting FileSystem Properties in Vertx\nDESCRIPTION: Shows how to retrieve file system properties including total, unallocated, and usable space.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_ruby.md#2025-04-19_snippet_100\n\nLANGUAGE: ruby\nCODE:\n```\nVertx::FileSystem.fs_props('mydir') do |err, res|\n  puts \"total space: #{res.total_space}\" if !err\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring NetClient Reconnection in Ruby\nDESCRIPTION: Shows how to configure a NetClient to automatically retry connecting to a server by setting reconnect_attempts and reconnect_interval properties.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_ruby.md#2025-04-19_snippet_35\n\nLANGUAGE: ruby\nCODE:\n```\nclient = Vertx::NetClient.new\n\nclient.reconnect_attempts = 1000\n\nclient.reconnect_interval = 500\n```\n\n----------------------------------------\n\nTITLE: Random Access File Writes with AsyncFile in Vert.x (JavaScript)\nDESCRIPTION: This example demonstrates random access file writing using AsyncFile's write method. It opens a file and writes a buffer at different positions in the file, handling any errors in the callback functions.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_js.md#2025-04-19_snippet_86\n\nLANGUAGE: javascript\nCODE:\n```\nvertx.fileSystem.open('some-file.dat', function(err, asyncFile) {\n        if (err) {\n            console.log('Failed to open file ' + err);\n        } else {\n            // File open, write a buffer 5 times into a file              \n            var buff = new vertx.Buffer('foo');\n            for (var i = 0; i < 5; i++) {\n                asyncFile.write(buff, buff.length() * i, function(err) {\n                    if (err) {\n                        console.log('Failed to write ' + err);\n                    } else {\n                        console.log('Written ok');\n                    }\n                });    \n            }\n        }\n    });   \n```\n\n----------------------------------------\n\nTITLE: File Copy Operation in Vert.x File System API\nDESCRIPTION: Example of using the asynchronous file copy operation in Vert.x File System API. The operation takes source and destination file paths and a callback that handles the result.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_ruby.md#2025-04-19_snippet_93\n\nLANGUAGE: ruby\nCODE:\n```\nVertx::FileSystem.copy('foo.dat', 'bar.dat') do |err, res|\n    puts 'Copy was successful' if !err        \nend\n```\n\n----------------------------------------\n\nTITLE: Creating Periodic Timer in Vert.x JavaScript\nDESCRIPTION: Shows how to create a periodic timer that executes a callback function every second. The timer ID is returned for potential cancellation.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_js.md#2025-04-19_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nvar timerID = vertx.setPeriodic(1000, function(timerID) {\n    console.log(\"And every second this is printed\"); \n});\n\nconsole.log(\"First this is printed\");\n```\n\n----------------------------------------\n\nTITLE: Connecting WebSocket with New API in Java\nDESCRIPTION: Shows the new webSocket method for connecting a WebSocket, which provides improved error handling and developer experience.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/releases/2019-05-27-vertx-3.7.1-release.md#2025-04-19_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nHttpClient client = vertx.createHttpClient();\nclient.webSocket(80, \"example.com\", \"/\", ar -> {\n  if (ar.succeeded()) {\n    // connected\n  } else {\n    // handler error\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Client-side WebSocket Implementation in Browser JavaScript\nDESCRIPTION: This HTML/JavaScript snippet shows how to use the standard WebSocket API in a browser to connect to a WebSocket server, handle various events, and send/receive data.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_js.md#2025-04-19_snippet_66\n\nLANGUAGE: html\nCODE:\n```\n<script>\n\n    var socket = new WebSocket(\"ws://localhost:8080/services/echo\");\n\n    socket.onmessage = function(event) {\n        alert(\"Received data from websocket: \" + event.data);\n    }\n    \n    socket.onopen = function(event) {\n        alert(\"Web Socket opened\");\n        socket.send(\"Hello World\");\n    };\n    \n    socket.onclose = function(event) {\n        alert(\"Web Socket closed\");\n    };\n\n</script>\n```\n\n----------------------------------------\n\nTITLE: Sequentially Deploying MongoDB Persistor and Static Data Loader\nDESCRIPTION: Code snippet that demonstrates sequential deployment in Vert.x. It first deploys the MongoDB persistor module and then, only after the persistor is fully started, deploys the StaticData verticle to load initial data into the database.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/groovy_web_tutorial.md#2025-04-19_snippet_3\n\nLANGUAGE: groovy\nCODE:\n```\ndeployModule('vertx.mongo-persistor-v1.2') {\n    deployVerticle('StaticData.groovy')\n}\n```\n\n----------------------------------------\n\nTITLE: Running Clustered JavaScript Verticles\nDESCRIPTION: Example of running two JavaScript verticles in cluster mode on the same machine.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/manual.md#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nvertx run handler.js -cluster\nvertx run sender.js -cluster\n```\n\n----------------------------------------\n\nTITLE: Browser-Side WebSocket Client Implementation in JavaScript\nDESCRIPTION: This snippet shows how to implement a WebSocket client in browser-side JavaScript. It creates a WebSocket connection to a server, and sets up handlers for the connection opening, receiving messages, and closing.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_js.md#2025-04-19_snippet_68\n\nLANGUAGE: javascript\nCODE:\n```\n<script>\n\n    var socket = new WebSocket(\"ws://foo.com/services/echo\");\n\n    socket.onmessage = function(event) {\n        alert(\"Received data from websocket: \" + event.data);\n    }\n    \n    socket.onopen = function(event) {\n        alert(\"Web Socket opened\");\n        socket.send(\"Hello World\");\n    };\n    \n    socket.onclose = function(event) {\n        alert(\"Web Socket closed\");\n    };\n\n</script>\n```\n\n----------------------------------------\n\nTITLE: Setting HTTP Response Trailers Using Fluent API in Vert.x Ruby\nDESCRIPTION: Shows how to add HTTP response trailers using the put_trailer method for a more fluent API with method chaining when using chunked encoding.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_ruby.md#2025-04-19_snippet_59\n\nLANGUAGE: ruby\nCODE:\n```\nrequest.response.put_trailer('Some-Other-Header', 'wibble').\n                 put_trailer('Blah', 'Eek')\n```\n\n----------------------------------------\n\nTITLE: Writing HTTP Response with Callback in Vert.x\nDESCRIPTION: This snippet demonstrates how to write data to an HTTP response with a callback function. The callback is invoked when the write operation is completed.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_js.md#2025-04-19_snippet_44\n\nLANGUAGE: javascript\nCODE:\n```\nrequest.response.write('hello', function() {\n    log.info('It has actually been written');\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring an SSL Client with Trust Store and Client Certificate in Ruby\nDESCRIPTION: Demonstrates setting up a Vert.x NetClient with both trust store for server validation and key store for client certificate authentication.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_ruby.md#2025-04-19_snippet_40\n\nLANGUAGE: ruby\nCODE:\n```\nclient = Vertx::NetClient.new\nclient.ssl = true\nclient.trust_store_path = '/path/to/your/client/truststore/client-truststore.jks'\nclient.trust_store_password = 'password'\nclient.key_store_path = '/path/to/keystore/holding/client/cert/client-keystore.jks'\nclient.key_store_password = 'password'\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Event Loop Affinity in Vert.x 4\nDESCRIPTION: Code example showing how Vert.x 4 handles event loop affinity differently from Vert.x 3. In version 4, operations from non-Vert.x threads are pinned to the first event loop, ensuring consistent ordering and preventing data races.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/releases/2020-07-28-vertx-4-beta1-release.md#2025-04-19_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nVertx vertx = Vertx.vertx();\n\nfor (int i = 0;i < 4;i++) {\n  String msg = \"Message \" + i;\n  vertx.runOnContext(v -> {\n    System.out.println(i);\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Registering an Event Bus Handler with Cluster Propagation in Ruby\nDESCRIPTION: Shows how to register an event bus handler with a callback for when the handler information has been propagated across the cluster.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_ruby.md#2025-04-19_snippet_7\n\nLANGUAGE: Ruby\nCODE:\n```\nVertx::EventBus.register_handler('test.address', myHandler) do\n    puts 'Yippee! The handler info has been propagated across the cluster'\nend\n```\n\n----------------------------------------\n\nTITLE: Client-side SockJS Implementation in Browser JavaScript\nDESCRIPTION: This HTML/JavaScript snippet demonstrates how to use the SockJS client library in a browser to connect to a SockJS server and handle various events including open, message, and close.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_js.md#2025-04-19_snippet_69\n\nLANGUAGE: html\nCODE:\n```\n<script>\n   var sock = new SockJS('http://mydomain.com/my_prefix');\n   \n   sock.onopen = function() {\n       console.log('open');\n   };\n   \n   sock.onmessage = function(e) {\n       console.log('message', e.data);\n   };\n   \n   sock.onclose = function() {\n       console.log('close');\n   };\n</script>\n```\n\n----------------------------------------\n\nTITLE: Copying a File with Vert.x FileSystem in JavaScript\nDESCRIPTION: Demonstrates how to copy a file using the Vert.x file system API. This example shows a non-recursive file copy with error handling.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_js.md#2025-04-19_snippet_73\n\nLANGUAGE: javascript\nCODE:\n```\nvertx.fileSystem.copy('foo.dat', 'bar.dat', function(err) {\n    if (!err) {\n        log.info('Copy was successful');\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Vert.x Unit Test Example\nDESCRIPTION: A complete test case using Vert.x Unit to test an HTTP server verticle. It demonstrates the setup, deployment, and asynchronous testing patterns using the TestContext and Async objects.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2016-01-18-using-hamcrest-matchers-with-vertx-unit.md#2025-04-19_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@RunWith(VertxUnitRunner.class)\npublic class MyFirstVerticleTest {\n\n  private Vertx vertx;\n\n  @Before\n  public void setUp(TestContext context) {\n    vertx = Vertx.vertx();\n    vertx.deployVerticle(MyFirstVerticle.class.getName(),\n      context.asyncAssertSuccess());\n  }\n\n  @Test\n  public void test(TestContext context) {\n    Async async = context.async();\n    vertx.createHttpClient().get(8080, \"localhost\", \"/\")\n      .handler(response -> {\n        context.assertEquals(200, response.statusCode());\n        response.bodyHandler(buffer -> {\n          context.assertEquals(\"hello vert.x\", buffer.toString(\"utf-8\"));\n          async.complete();\n        });\n      })\n      .end();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generated Bottles API Verticle in Java\nDESCRIPTION: An example of a generated Verticle class that sets up EventBus consumers for each API operation.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2017-05-12-vertx-swagger-presentation.md#2025-04-19_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n<script src=\"https://gist.github.com/phiz71/c0aadbb4f26ebed8e2e145d0b4a8d210.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Service Implementation Class\nDESCRIPTION: Implementation of the TransactionsManagerService interface with business logic handling.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2018-12-13-vertx-web-api-service.md#2025-04-19_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic class TransactionsManagerServiceImpl implements TransactionsManagerService {\n\n  private Vertx vertx;\n\n  public TransactionsManagerServiceImpl(Vertx vertx) {  this.vertx = vertx;  }\n\n  @Override\n  public void getTransactionsList(List<String> from, OperationRequest context, Handler<AsyncResult<OperationResponse>> resultHandler){\n    // Write your business logic here\n    resultHandler.handle(Future.succeededFuture(OperationResult.completedWithJson(resultJson)));\n  }\n\n  // Implement other operations\n\n}\n```\n\n----------------------------------------\n\nTITLE: Creating SwaggerRouter in Java\nDESCRIPTION: Java code snippet demonstrating how to create a SwaggerRouter instance using a Swagger file and Vert.x EventBus.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2017-05-12-vertx-swagger-presentation.md#2025-04-19_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nFileSystem vertxFileSystem = vertx.fileSystem();\nvertxFileSystem.readFile(\"***YOUR_SWAGGER_FILE***\", readFile -> {\n    if (readFile.succeeded()) {\n        Swagger swagger = new SwaggerParser().parse(readFile.result().toString(Charset.forName(\"utf-8\"))); \n        Router swaggerRouter = SwaggerRouter.swaggerRouter(Router.router(vertx), swagger, vertx.eventBus(), new OperationIdServiceIdResolver());\n        [...]\n   } else {\n        [...]\n   }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Directory with Parent Directories in Vertx\nDESCRIPTION: Shows how to create a directory including parent directories if they don't exist using Vertx FileSystem API.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_ruby.md#2025-04-19_snippet_96\n\nLANGUAGE: ruby\nCODE:\n```\nVertx::FileSystem.mkdir('a/b/c', true) do |err, res|\n   puts \"Directory created ok\" if !err       \nend\n```\n\n----------------------------------------\n\nTITLE: Chained HTTP Request Headers in Vert.x\nDESCRIPTION: Shows how to use the fluent API pattern to chain multiple header additions in a single request.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_js.md#2025-04-19_snippet_56\n\nLANGUAGE: javascript\nCODE:\n```\nvertx.createHttpClient().host(\"foo.com\").request(\"POST\", \"/some-path/\", function(resp) {\n    console.log(\"Got a response: \" + resp.statusCode());\n}).putHeader(\"Some-Header\", \"Some-Value\").putHeader(\"Some-Other\", \"Blah\").end();\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Pool Size for Vert.x HTTP Client in Ruby\nDESCRIPTION: Configuring the maximum number of connections the HTTP client will pool. This allows control over the client's resource usage when making multiple concurrent requests.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_ruby.md#2025-04-19_snippet_62\n\nLANGUAGE: ruby\nCODE:\n```\nclient = Vertx::HttpClient.new    \nclient.max_pool_size = 10\n```\n\n----------------------------------------\n\nTITLE: Using Timers in Vert.x JavaScript\nDESCRIPTION: Demonstrates how to use one-shot timers for delayed execution of tasks.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_js.md#2025-04-19_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nvar timerID = vertx.setTimer(1000, function(timerID) {\n    console.log(\"And one second later this is printed\"); \n});\n    \nconsole.log(\"First this is printed\");\n```\n\n----------------------------------------\n\nTITLE: Initializing MongoDB Client in Vert.x\nDESCRIPTION: Java code snippet showing how to create a shared MongoDB client instance in a Vert.x verticle.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/intro-series/2015-11-30-post-06-combine-vertx-and-mongo-to-build-a-giant.md#2025-04-19_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nmongo = MongoClient.createShared(vertx, config());\n```\n\n----------------------------------------\n\nTITLE: Using Pump for Flow Control\nDESCRIPTION: Simplified flow control implementation using Vert.x's built-in Pump utility.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_ruby.md#2025-04-19_snippet_41\n\nLANGUAGE: ruby\nCODE:\n```\nserver = Vertx::NetServer.new\n\nserver.connect_handler do |sock|\n    pump = Vertx::Pump.new(sock, sock)\n    pump.start\nend.listen(1234, 'localhost')\n```\n\n----------------------------------------\n\nTITLE: Self-cancelling Timer Example\nDESCRIPTION: Shows how to create a timer that cancels itself after executing 10 times using a counter variable.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_js.md#2025-04-19_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nvar count = 0;\n\nvertx.setPeriodic(1000, function(id) {\n    console.log('In event handler ' + count); \n    count++;\n    if (count === 10) {\n        vertx.cancelTimer(id);\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Using Predefined Response Predicates in Vert.x Web Client (Java)\nDESCRIPTION: This snippet demonstrates the use of predefined response predicates (SC_SUCCESS and JSON) to validate HTTP responses in Vert.x Web Client.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2018-12-10-http-response-validation-web-client.md#2025-04-19_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nclient\n  .get(8080, \"myserver.mycompany.com\", \"/some-uri\")\n  .expect(ResponsePredicate.SC_SUCCESS)\n  .expect(ResponsePredicate.JSON)\n  .send(ar -> {\n    if (ar.succeeded()) {\n      HttpResponse<Buffer> response = ar.result();\n      // Safely decode the body as a json object\n      JsonObject body = response.bodyAsJsonObject();\n    } else {\n      System.out.println(\"Something went wrong \" + ar.cause().getMessage());\n    }\n  });\n```\n\n----------------------------------------\n\nTITLE: Vert.x Main Verticle Setup\nDESCRIPTION: Main verticle code showing the initial setup and deployment of the Vert.x web server\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2017-03-08-building-apps-with-vertx-and-mesh.md#2025-04-19_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n<script src=\"https://gist.github.com/Jotschi/39fc0d3fcd45122eafe68d61bea4c120.js?file=main.java\"></script>\n```\n\n----------------------------------------\n\nTITLE: TCP Server with Connection Handler\nDESCRIPTION: Demonstrates setting up a TCP server with a connection handler that logs incoming connections.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_js.md#2025-04-19_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nvar server = vertx.createNetServer();\n\nserver.connectHandler(function(sock) {\n    console.log(\"A client has connected!\");\n});\n\nserver.listen(1234, \"localhost\");\n```\n\n----------------------------------------\n\nTITLE: Node.js HTTP Server in Vert.x\nDESCRIPTION: Example of a simple HTTP server implementation in Vert.x using JavaScript/Node.js style syntax that serves an index.html file.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/mods_manual.md#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar vertx = require('vertx')\nvertx.createHttpServer().requestHandler(function(req) {\n   req.response.sendFile('./web/index.html'); // Always serve the index page\n}).listen(8080, 'foo.com')\n```\n\n----------------------------------------\n\nTITLE: JSON Configuration for Verticle\nDESCRIPTION: Example of a JSON configuration file that can be passed to a verticle.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/manual.md#2025-04-19_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"foo\",\n    \"num_widgets\": 46\n}\n```\n\n----------------------------------------\n\nTITLE: Browser-side SockJS Implementation with JavaScript\nDESCRIPTION: Client-side JavaScript code for implementing SockJS in a browser. Handles connection opening, message reception, and connection closing events.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_ruby.md#2025-04-19_snippet_91\n\nLANGUAGE: javascript\nCODE:\n```\n<script>\n   var sock = new SockJS('http://mydomain.com/my_prefix');\n\n   sock.onopen = function() {\n       console.log('open');\n   };\n\n   sock.onmessage = function(e) {\n       console.log('message', e.data);\n   };\n\n   sock.onclose = function() {\n       console.log('close');\n   };\n</script>\n```\n\n----------------------------------------\n\nTITLE: Explicitly Closing a Vert.x HTTP Client in Ruby\nDESCRIPTION: Example showing how to explicitly close an HTTP client when it's no longer needed. While Vert.x automatically closes clients when verticles stop, manual closure can be useful in some scenarios.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_ruby.md#2025-04-19_snippet_63\n\nLANGUAGE: ruby\nCODE:\n```\nclient.close\n```\n\n----------------------------------------\n\nTITLE: Writing Data to a Socket in Vert.x with Ruby\nDESCRIPTION: Demonstrates different methods to write data to a socket in Vert.x, including writing a buffer, a UTF-8 encoded string, a string with specific encoding, and handling write completion with a callback.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_ruby.md#2025-04-19_snippet_24\n\nLANGUAGE: ruby\nCODE:\n```\nmyBuffer = Vertx::Buffer.create(...)\nsock.write_buffer(myBuffer)\n```\n\nLANGUAGE: ruby\nCODE:\n```\nsock.write_str('hello')\n```\n\nLANGUAGE: ruby\nCODE:\n```\nsock.write_str('hello', 'UTF-16')\n```\n\nLANGUAGE: ruby\nCODE:\n```\nsock.write_str('hello') { puts 'It has actually been written' }\n```\n\n----------------------------------------\n\nTITLE: Deploying Multiple Instances of a Verticle\nDESCRIPTION: Deploying multiple instances of a verticle to scale across CPU cores by specifying the number of instances as a parameter.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_groovy.md#2025-04-19_snippet_10\n\nLANGUAGE: groovy\nCODE:\n```\ncontainer.deployVerticle(\"foo.ChildVerticle\", 10)\n```\n\n----------------------------------------\n\nTITLE: Using RxJava2 Completable and Maybe types in Vert.x\nDESCRIPTION: Demonstrates how to use RxJava2 Completable and Maybe types with Vert.x APIs, showing examples of server closing and DNS lookup operations.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/releases/2017-10-20-vertx-3.5.0-release.md#2025-04-19_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n// expose Handler<AsyncResult<Void>>\nCompletable completable = server.rxClose();\n\ncompletable.subscribe(() -> System.out.println(\"closed\"));\n\n// expose Handler<AsyncResult<String>> where the result can be null\nMaybe<String> ipAddress = dnsClient.rxLookup(\"www.google.com\");\nipAddress.subscribe(\n  value -> System.out.println(\"resolved to \" + value),\n  err -> err.printStackTrace(),\n  () -> System.out.println(\"does not resolve\"));\n```\n\n----------------------------------------\n\nTITLE: Testing HTTP Verticle with ScalaTest\nDESCRIPTION: Unit test implementation for the HTTP verticle using ScalaTest and Vert.x test utilities. Demonstrates async testing patterns with Futures and Promises.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2017-03-16-vertx-lang-scala.md#2025-04-19_snippet_2\n\nLANGUAGE: scala\nCODE:\n```\npackage io.vertx.scala.sbt\n\nimport org.scalatest.Matchers\n\nimport scala.concurrent.Promise\n\nclass HttpVerticleSpec extends VerticleTesting[HttpVerticle] with Matchers {\n\n  \"HttpVerticle\" should \"bind to 8666 and answer with 'world'\" in {\n    val promise = Promise[String]\n\n    vertx.createHttpClient()\n      .getNow(8666, \"127.0.0.1\", \"/hello\",\n        r => {\n          r.exceptionHandler(promise.failure)\n          r.bodyHandler(b => promise.success(b.toString))\n        })\n\n    promise.future.map(res => res should equal(\"world\"))\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Random Access Reads with AsyncFile in Vert.x JavaScript\nDESCRIPTION: Shows how to perform random access reads from a file using AsyncFile. The example opens a file and reads 100 bytes of data at 10 different positions into a buffer.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_js.md#2025-04-19_snippet_83\n\nLANGUAGE: javascript\nCODE:\n```\nvertx.fileSystem.open('some-file.dat', function(err, asyncFile) {\n        if (err) {\n            log.info('Failed to open file ' + err);\n        } else {                   \n            var buff = new vertx.Buffer(1000);\n            for (var i = 0; i < 10; i++) {\n                asyncFile.read(buff, i * 100, i * 100, 100, function(err) {\n                    if (err) {\n                        log.info('Failed to read ' + err);\n                    } else {\n                        log.info('Read ok');\n                    }\n                });    \n            }\n        }\n    });   \n```\n\n----------------------------------------\n\nTITLE: Configuring TCP Client Reconnection in Vert.x\nDESCRIPTION: Sets up automatic reconnection attempts for a TCP client with customizable retry attempts and intervals.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_groovy.md#2025-04-19_snippet_33\n\nLANGUAGE: groovy\nCODE:\n```\ndef client = vertx.createNetClient()\n\nclient.reconnectAttempts = 1000\n\nclient.reconnectInterval = 500\n```\n\n----------------------------------------\n\nTITLE: Implementing Date Service with Callback Pattern\nDESCRIPTION: Shows a basic service proxy interface implementation using the callback pattern for date handling.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/releases/2019-09-19-vertx-4-milestone3-release.md#2025-04-19_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@VertxGen\ninterface DateService {\n\n  // callback the handler with the current date\n  void date(Handler<AsyncResult<String>> handler)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Auction Repository with Vert.x Shared Data\nDESCRIPTION: Implementation of an auction repository class that uses Vert.x's LocalMap for storing auction data. The class provides methods to save and retrieve auction information using shared local maps.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2016-01-15-real-time-bidding-with-websockets-and-vertx.md#2025-04-19_snippet_7\n\nLANGUAGE: java\nCODE:\n```\npublic class AuctionRepository {\n\n    //â¦\n\n    public Optional<Auction> getById(String auctionId) {\n        LocalMap<String, String> auctionSharedData = this.sharedData.getLocalMap(auctionId);\n\n        return Optional.of(auctionSharedData)\n            .filter(m -> !m.isEmpty())\n            .map(this::convertToAuction);\n    }\n\n    public void save(Auction auction) {\n        LocalMap<String, String> auctionSharedData = this.sharedData.getLocalMap(auction.getId());\n\n        auctionSharedData.put(\"id\", auction.getId());\n        auctionSharedData.put(\"price\", auction.getPrice());\n    }\n\n    //â¦\n}\n```\n\n----------------------------------------\n\nTITLE: Writing HTTP Request Headers in Vert.x\nDESCRIPTION: Demonstrates how to add headers to HTTP requests using both headers() method and chainable putHeader() approach.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_js.md#2025-04-19_snippet_55\n\nLANGUAGE: javascript\nCODE:\n```\nvar client = vertx.createHttpClient().host(\"foo.com\");\n\nvar request = client.request(\"POST\", \"/some-path/\", function(resp) {\n    console.log(\"Got a response: \" + resp.statusCode());\n});\n\nrequest.headers().set(\"Some-Header\", \"Some-Value\");\nrequest.end();\n```\n\n----------------------------------------\n\nTITLE: Configuring SSL Client with Trust Store and Client Certificate\nDESCRIPTION: Example showing complete SSL client configuration with both trust store and key store for client certificate authentication.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_ruby.md#2025-04-19_snippet_36\n\nLANGUAGE: ruby\nCODE:\n```\nclient = Vertx::NetClient.new\nclient.ssl = true\nclient.trust_store_path = '/path/to/your/client/truststore/client-truststore.jks'\nclient.trust_store_password = 'password'\nclient.key_store_path = '/path/to/keystore/holding/client/cert/client-keystore.jks'\nclient.key_store_password = 'password'\n```\n\n----------------------------------------\n\nTITLE: Initializing Cassandra Client\nDESCRIPTION: Example of creating and configuring a Cassandra client instance.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/releases/2019-04-02-vertx-3.7.0-release.md#2025-04-19_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nCassandraClientOptions options = new CassandraClientOptions()\n  .addContactPoint(\"node1.address\")\n  .addContactPoint(\"node2.address\")\n  .addContactPoint(\"node3.address\")\n  .setKeyspace(\"my_keyspace\");\nCassandraClient sharedClient = CassandraClient.createShared(vertx, \"sharedClientName\", options);\n```\n\n----------------------------------------\n\nTITLE: Deploying a Module Programmatically\nDESCRIPTION: Deploying a Vert.x module with configuration from within a verticle using the container.deployModule method.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_groovy.md#2025-04-19_snippet_6\n\nLANGUAGE: groovy\nCODE:\n```\ncontainer.deployModule(\"vertx.mailer-v1.0\", config)\n```\n\n----------------------------------------\n\nTITLE: Accessing Configuration in a Verticle\nDESCRIPTION: Accessing the JSON configuration that was passed when deploying a verticle. The configuration is available through the container variable.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_groovy.md#2025-04-19_snippet_3\n\nLANGUAGE: groovy\nCODE:\n```\ndef config = container.config\n```\n\n----------------------------------------\n\nTITLE: Performing Random Access Reads with AsyncFile in Groovy\nDESCRIPTION: This example shows how to open a file and perform random access reads from different positions. It reads 100 bytes at 10 different positions in the file, placing each read at the corresponding offset in the buffer.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_groovy.md#2025-04-19_snippet_85\n\nLANGUAGE: groovy\nCODE:\n```\nvertx.fileSystem.open(\"some-file.dat\") { ar ->\n    if (ar.succeeded()) {\n        def asyncFile = ar.result\n        def buff = new Buffer(1000)\n        10.times {\n            asyncFile.read(buff, it * 100, it * 100, 100) { ar2 ->\n                if (ar2.succeeded()) {\n                    println \"Read ok!\"\n                    // etc\n                } else {\n                    log.error(\"Failed to write\", ar2.exception)\n                }\n            }\n        }\n    } else {\n        log.error(\"Failed to open file\", ar.exception)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an HTTP Server in Vert.x\nDESCRIPTION: Basic code to create an HTTP server instance in Vert.x, which is the first step before configuring listeners and handlers.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_js.md#2025-04-19_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nvar server = vertx.createHttpServer();\n```\n\n----------------------------------------\n\nTITLE: Vert.x Router Configuration\nDESCRIPTION: Code showing the setup of HTTP routes and handlers in Vert.x\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2017-03-08-building-apps-with-vertx-and-mesh.md#2025-04-19_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n<script src=\"https://gist.github.com/Jotschi/39fc0d3fcd45122eafe68d61bea4c120.js?file=start.java\"></script>\n```\n\n----------------------------------------\n\nTITLE: Configuring an SSL Server with Client Certificate Authentication\nDESCRIPTION: Code for setting up a Vert.x Net server with SSL that requires client authentication, configuring both keystore and truststore.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_js.md#2025-04-19_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nvar server = vertx.createNetServer()\n                   .setSSL(true)\n                   .setKeyStorePath('/path/to/your/keystore/server-keystore.jks')\n                   .setKeyStorePassword('password')\n                   .setTrustStorePath('/path/to/your/truststore/server-truststore.jks')\n                   .setTrustStorePassword('password')\n                   .setClientAuthRequired(true);\n```\n\n----------------------------------------\n\nTITLE: Echoing Request Headers in Vert.x HTTP Server\nDESCRIPTION: This snippet demonstrates how to access and iterate through request headers in a Vert.x HTTP server, then return them as a text response to the client.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_ruby.md#2025-04-19_snippet_48\n\nLANGUAGE: ruby\nCODE:\n```\nserver.request_handler do |request|\n\n  request.response.put_header('Content-Type', 'text/plain')\n     \n  str = \"Headers are\\n\"\n  request.headers.each do |key, value|\n    str << \"#{key}: #{value}\\n\"\n  end\n  \n  request.response.end(str)\n  \nend.listen(8080, 'localhost')\n```\n\n----------------------------------------\n\nTITLE: Simplified Startup Sequence with MongoDB\nDESCRIPTION: Java code demonstrating the simplified startup sequence when using MongoDB, which doesn't require explicit connection acquisition.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/intro-series/2015-11-30-post-06-combine-vertx-and-mongo-to-build-a-giant.md#2025-04-19_snippet_4\n\nLANGUAGE: java\nCODE:\n```\ncreateSomeData(\n    (nothing) -> startWebApp(\n        (http) -> completeStartup(http, fut)\n    ), fut);\n```\n\n----------------------------------------\n\nTITLE: Reading a File with Vert.x FileSystem in Groovy\nDESCRIPTION: Shows how to read an entire file in one operation using the Vert.x FileSystem API. The file content is returned as a Buffer object in the result handler.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_groovy.md#2025-04-19_snippet_80\n\nLANGUAGE: groovy\nCODE:\n```\nvertx.fileSystem.readFile(\"myfile.dat\") { ar ->\n    if (ar.succeeded()) {\n        println \"File contains: ${ar.result.length} bytes\"\n    } else {\n        log.error(\"Failed to read\", ar.exception)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: SockJS Client Implementation\nDESCRIPTION: Shows basic client-side SockJS implementation with connection handling and message processing.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_ruby.md#2025-04-19_snippet_87\n\nLANGUAGE: JavaScript\nCODE:\n```\n<script>\n   var sock = new SockJS('http://mydomain.com/my_prefix');\n\n   sock.onopen = function() {\n       console.log('open');\n   };\n\n   sock.onmessage = function(e) {\n       console.log('message', e.data);\n   };\n\n   sock.onclose = function() {\n       console.log('close');\n   };\n</script>\n```\n\n----------------------------------------\n\nTITLE: Accessing Shared Sets in Vert.x Ruby\nDESCRIPTION: Demonstrates how to get a reference to a shared set and add data to it. This allows sharing data between different verticles.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_ruby.md#2025-04-19_snippet_15\n\nLANGUAGE: Ruby\nCODE:\n```\nset = Vertx::SharedData.get_set('demo.myset')\n\nset.add 'some-value'\n```\n\nLANGUAGE: Ruby\nCODE:\n```\nset = Vertx::SharedData.get_set 'demo.myset'\n\n# Do something with the set\n```\n\n----------------------------------------\n\nTITLE: Selectively Accepting WebSockets by Path in Vert.x (Groovy)\nDESCRIPTION: Shows how to accept WebSocket connections selectively based on their requested path. This example accepts and echoes connections to '/services/echo' while rejecting all other WebSocket connection attempts.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_groovy.md#2025-04-19_snippet_65\n\nLANGUAGE: groovy\nCODE:\n```\ndef server = vertx.createHttpServer()\n\nserver.websocketHandler{ ws ->\n    if (ws.path == \"/services/echo\") {\n        Pump.createPump(ws, ws).start()\n    } else {\n        ws.reject()\n    }        \n}.listen(8080, \"localhost\")\n```\n\n----------------------------------------\n\nTITLE: Complete Flow Control with Drain Handler\nDESCRIPTION: Complete flow control implementation with pause and resume mechanisms using drain handler.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_ruby.md#2025-04-19_snippet_40\n\nLANGUAGE: ruby\nCODE:\n```\nserver = Vertx::NetServer.new\n\nserver.connect_handler do |sock|\n    sock.data_handler do |buffer|\n        if sock.write_queue_full?\n            sock.pause\n            sock.drain_handler { sock.resume }\n        else\n            sock.write(buffer)\n        end\n    end\nend.listen(1234, 'localhost')\n```\n\n----------------------------------------\n\nTITLE: Creating KafkaAdminClient with Vert.x in Java\nDESCRIPTION: Demonstrates how to create a KafkaAdminClient instance using Vert.x. The client connects to Kafka brokers directly without requiring Zookeeper connection, unlike the deprecated AdminUtils implementation.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/releases/2019-04-02-vertx-3.7.0-release.md#2025-04-19_snippet_15\n\nLANGUAGE: java\nCODE:\n```\nProperties config = new Properties();\nconfig.put(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, \"my-kafka-broker:9092\");\n\nKafkaAdminClient adminClient = KafkaAdminClient.create(vertx, config);\n```\n\n----------------------------------------\n\nTITLE: Handling 100-Continue in Vert.x HTTP Client\nDESCRIPTION: Implementation of HTTP 100-Continue handling for large request bodies with proper authorization checks.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_ruby.md#2025-04-19_snippet_75\n\nLANGUAGE: ruby\nCODE:\n```\nclient = Vertx::HttpClient.new\nclient.host = 'foo.com'  \n\nrequest = client.put('/some-path') do |resp|\n\n  puts \"Got a response: #{resp.status_code}\"     \n\nend\n\nrequest.put_header('Expect', '100-Continue')\nrequest.chunked = true\n\nrequest.continue_handler do\n    # OK to send rest of body\n    \n    request.write_str('Some data').end\nend\n\nrequest.send_head\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Route Matcher in Vert.x\nDESCRIPTION: Sets up a basic HTTP route matcher for pattern-based request routing.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_ruby.md#2025-04-19_snippet_76\n\nLANGUAGE: ruby\nCODE:\n```\nserver = Vertx::HttpServer.new\n\nroute_matcher = Vertx::RouteMatcher.new\n\nserver.request_Handler(route_matcher).listen(8080, 'localhost')\n```\n\n----------------------------------------\n\nTITLE: Creating and Starting the Router\nDESCRIPTION: Final steps to generate the router and start the HTTP server with the configured routes.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2017-06-12-openapi3-vertx-web-support.md#2025-04-19_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nRouter router = routerFactory.getRouter();\n\n// Now you can use your Router instance\nHttpServer server = vertx.createHttpServer(new HttpServerOptions().setPort(8080).setHost(\"localhost\"));\nserver.requestHandler(router::accept).listen();\n```\n\n----------------------------------------\n\nTITLE: Enhanced Date Service with Custom Mappers\nDESCRIPTION: Demonstrates the new Vert.x 4 capability to map any Java class to JSON using custom mapper methods for encoding and decoding dates.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/releases/2019-09-19-vertx-4-milestone3-release.md#2025-04-19_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@VertxGen\ninterface DateService {\n\n  // encode the date with iso date format\n  @Mapper static String toJson(ZonedDateTime value) {\n    return ZonedDateTime.format(value);\n  }\n\n  // decode the date with iso date format\n  @Mapper static ZonedDateTime fromJson(String value) {\n    return ZonedDateTime.parse(value);\n  }\n\n  // callback the handler with the current date\n  void date(Handler<AsyncResult<ZonedDateTime>> handler)\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Multiple Web Server Instances in Vert.x\nDESCRIPTION: This snippet demonstrates how to scale up a Vert.x web server by deploying multiple instances. It uses the deployModule function to start 32 instances of the web server, leveraging Vert.x's ability to round-robin connections between instances.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/groovy_web_tutorial.md#2025-04-19_snippet_10\n\nLANGUAGE: Groovy\nCODE:\n```\n// Start 32 instances of the web server!\n\ndeployModule('vertx.web-server-v1.0', webServerConf, 32)\n```\n\n----------------------------------------\n\nTITLE: Basic HTTP GET Test for Vert.x Application in Java\nDESCRIPTION: This test case checks if the Vert.x application responds with 'Hello' when a GET request is made to the root path.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/intro-series/2015-08-03-post-04-unit-and-integration-tests.md#2025-04-19_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@Test\npublic void testMyApplication(TestContext context) {\n  final Async async = context.async();\n  vertx.createHttpClient().getNow(port, \"localhost\", \"/\", response -> {\n    response.handler(body -> {\n      context.assertTrue(body.toString().contains(\"Hello\"));\n      async.complete();\n    });\n  });\n }\n```\n\n----------------------------------------\n\nTITLE: Writing Buffer to HTTP Response in Ruby with Vert.x\nDESCRIPTION: Demonstrates how to write a buffer to an HTTP response. The method is asynchronous and returns immediately after the write has been queued.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_ruby.md#2025-04-19_snippet_48\n\nLANGUAGE: ruby\nCODE:\n```\nmyBuffer = ...\nrequest.response.write_buffer(myBuffer)\n```\n\n----------------------------------------\n\nTITLE: Using Redis API Wrapper\nDESCRIPTION: Example of using the generated RedisAPI wrapper for a more familiar Redis interface.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/releases/2019-04-02-vertx-3.7.0-release.md#2025-04-19_snippet_10\n\nLANGUAGE: java\nCODE:\n```\nRedisAPI redis = RedisAPI.api(client);\n\nredis.set(Arrays.asList(\"key1\", \"value1\"), set -> {\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing MongoDB Delete Operation in Vert.x REST Handler\nDESCRIPTION: REST handler method that deletes a specific whisky document by ID from MongoDB collection using removeOne() operation. Handles invalid ID scenarios.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/intro-series/2015-11-30-post-06-combine-vertx-and-mongo-to-build-a-giant.md#2025-04-19_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nprivate void deleteOne(RoutingContext routingContext) {\n\tString id = routingContext.request().getParam(\"id\");\n\tif (id == null) {\n\t  routingContext.response().setStatusCode(400).end();\n\t} else {\n\t  mongo.removeOne(COLLECTION, new JsonObject().put(\"_id\", id),\n\t      ar -> routingContext.response().setStatusCode(204).end());\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Timer Cancellation in Vert.x\nDESCRIPTION: Shows different approaches to cancel timers, including immediate cancellation and conditional cancellation\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_groovy.md#2025-04-19_snippet_26\n\nLANGUAGE: groovy\nCODE:\n```\ndef count = 0\nlong timerID = vertx.setPeriodic(1000) { timerID ->\n    println \"In event handler $count\"\n    count++\n    if (count == 10) {\n        vertx.cancelTimer(timerID)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Flow Control with Write Queue Check\nDESCRIPTION: Example showing basic flow control by checking if write queue is full before writing data.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_ruby.md#2025-04-19_snippet_38\n\nLANGUAGE: ruby\nCODE:\n```\nserver = Vertx::NetServer.new\n\nserver.connect_handler do |sock|\n    sock.data_handler do |buffer|\n        sock.write(buffer) if !sock.write_queue_full?\n    end\nend.listen(1234, 'localhost')\n```\n\n----------------------------------------\n\nTITLE: Configuring an SSL Client to Trust All Certificates in Ruby\nDESCRIPTION: Demonstrates setting up a Vert.x NetClient with SSL enabled and configured to trust all server certificates, which is convenient but less secure.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_ruby.md#2025-04-19_snippet_38\n\nLANGUAGE: ruby\nCODE:\n```\nclient = Vertx::NetClient.new\nclient.ssl = true\nclient.trust_all = true\n```\n\n----------------------------------------\n\nTITLE: Configuring SSL Server with Client Authentication\nDESCRIPTION: Configuring a TCP server with SSL and client certificate authentication requirements.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_js.md#2025-04-19_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nvar server = vertx.createNetServer()\n                   .ssl(true)\n                   .keyStorePath('/path/to/your/keystore/server-keystore.jks')\n                   .keyStorePassword('password')\n                   .trustStorePath('/path/to/your/truststore/server-truststore.jks')\n                   .trustStorePassword('password')\n                   .clientAuthRequired(true);\n```\n\n----------------------------------------\n\nTITLE: Reading HTTP Request Body Data in Chunks with Vert.x\nDESCRIPTION: Creates an HTTP server that reads the request body in chunks using the dataHandler. Each time a chunk arrives, the code logs the size of the received chunk. This demonstrates handling large request bodies without loading everything into memory at once.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_js.md#2025-04-19_snippet_44\n\nLANGUAGE: javascript\nCODE:\n```\nvar server = vertx.createHttpServer();\n\nserver.requestHandler(function(request) {\n\n  request.dataHandler(function(buffer) {\n    console.log('I received ' + buffer.length() + ' bytes');\n  });\n  \n}).listen(8080, 'localhost');\n```\n\n----------------------------------------\n\nTITLE: Undeploying a Verticle in Vert.x\nDESCRIPTION: This code example shows how to undeploy a Verticle programmatically in Vert.x. It demonstrates deploying a Verticle and then immediately undeploying it using the deployment ID.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_ruby.md#2025-04-19_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nVertx.deploy_verticle('my_verticle.rb') do |err, deployment_id|\n    # Immediately undeploy it\n    Vertx.undeploy_verticle(deployment_id) if !err\nend\n```\n\n----------------------------------------\n\nTITLE: Basic Connection Handler Setup\nDESCRIPTION: Sets up a connection handler to be notified when clients connect to the server.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_ruby.md#2025-04-19_snippet_26\n\nLANGUAGE: ruby\nCODE:\n```\nserver = Vertx::NetServer.new\n\nserver.connect_handler { puts 'A client has connected!' }\n\nserver.listen(1234, 'localhost')\n```\n\n----------------------------------------\n\nTITLE: Reading Entire Request Body at Once in Vert.x HTTP Server with Ruby\nDESCRIPTION: This code shows how to read the entire request body at once using a body handler. It's suitable for smaller request bodies that can fit in memory.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_ruby.md#2025-04-19_snippet_46\n\nLANGUAGE: ruby\nCODE:\n```\nserver = Vertx::HttpServer.new\n\nserver.request_handler do |request|\n\n  request.body_handler do |body|\n    puts \"The total body received was #{body.length} bytes\"\n  end\n\nend.listen(8080, 'localhost')\n```\n\n----------------------------------------\n\nTITLE: Configuring SockJS Bridge with Authentication Requirements in Ruby\nDESCRIPTION: Example showing how to configure a SockJS bridge to require authentication for specific messages. This configuration will only allow messages to pass if the user has been authenticated through the auth-mgr module.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_ruby.md#2025-04-19_snippet_92\n\nLANGUAGE: ruby\nCODE:\n```\n{\n  'address' => 'demo.persistor',\n  'match' => {\n    'action' => 'find',\n    'collection' => 'albums'\n  },\n  'requires_auth` => true\n}\n```\n\n----------------------------------------\n\nTITLE: Getting File System Properties with Vert.x FileSystem in Groovy\nDESCRIPTION: Shows how to retrieve file system properties using the Vert.x FileSystem API. This example accesses properties like totalSpace from the FileSystemProps result object.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_groovy.md#2025-04-19_snippet_82\n\nLANGUAGE: groovy\nCODE:\n```\nvertx.fileSystem.fsProps(\"mydir\") { ar ->\n    if (ar.succeded() {\n        println \"total space: ${ar.result.totalSpace}\"\n        // etc\n    } else {\n        log.error(\"Failed to check existence\", ar.exception)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling 100-Continue in Vert.x HTTP Client (Groovy)\nDESCRIPTION: Demonstrates how to handle the HTTP 100-Continue scenario in Vert.x HTTP client. It shows setting up a continueHandler and using sendHead to implement the 100-Continue protocol.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_groovy.md#2025-04-19_snippet_59\n\nLANGUAGE: groovy\nCODE:\n```\ndef client = vertx.createHttpClient(host: \"foo.com\")\n\ndef request = client.put(\"/some-path/\") { resp ->\n    println \"Got a response ${resp.statusCode}\"\n}\n\nrequest.headers[\"Expect\"] = \"100-Continue\"\n\nrequest.continueHandler {\n    // OK to send rest of body\n    request << \"Some data\"\n    request.end()\n}\n\nrequest.sendHead()\n```\n\n----------------------------------------\n\nTITLE: Checking File Existence in Vert.x FileSystem API (JavaScript)\nDESCRIPTION: This example shows how to check if a file exists using the exists method. The callback function receives a boolean result indicating existence along with any potential errors.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_js.md#2025-04-19_snippet_83\n\nLANGUAGE: javascript\nCODE:\n```\nvertx.fileSystem.exists('some-file.txt', function(err, res) {\n    if (!err) {\n        console.log('File ' + (res ? 'exists' : 'does not exist'));\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Kotlin Server Implementation\nDESCRIPTION: Example of implementing a Vert.x HTTP server using Kotlin with idiomatic syntax.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2017-02-09-vertx-3.4.0.beta1.md#2025-04-19_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nimport io.vertx.core.*\nimport io.vertx.kotlin.core.http.HttpServerOptions\n\nclass Server : AbstractVerticle() {\n\n  override fun start() {\n    vertx.createHttpServer(\n\n        // We provide Kotlin extension methods, allowing to use an idiomatic Kotlin API for building these options\n        HttpServerOptions(\n            port = 8080,\n            host = \"localhost\"\n        ))\n        .requestHandler() { req ->\n          req.response().end(\"Hello from Kotlin\")\n        }\n        .listen()\n    println(\"Server started on 8080\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Replying to Messages on the Event Bus in Ruby\nDESCRIPTION: Demonstrates how to set up a request-response pattern using the Vert.x event bus, with both the receiver and sender code.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_ruby.md#2025-04-19_snippet_12\n\nLANGUAGE: Ruby\nCODE:\n```\nVertx::EventBus.registerHandler('test.address') do |message|\n  puts(\"I received a message #{message.body}\")\n\n  # Do some stuff...\n  # Now reply to it\n\n  message.reply('This is a reply')\nend\n```\n\nLANGUAGE: Ruby\nCODE:\n```\nVertx::EventBus.send('test.address', 'This is a message') do |message|\n  puts(\"I received a reply #{message.body}\")    \nend\n```\n\n----------------------------------------\n\nTITLE: Displaying User Profile Page in Vert.x\nDESCRIPTION: Handler for displaying detailed user information from the ID token including username and display name.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2020-03-09-easy-sso-for-vertx-with-keycloak.md#2025-04-19_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nprivate void handleUserPage(RoutingContext ctx) {\n\n    OAuth2TokenImpl user = (OAuth2TokenImpl) ctx.user();\n\n    String username = user.idToken().getString(\"preferred_username\");\n    String displayName = oAuth2Token.idToken().getString(\"name\");\n\n    String content = String.format(\"<h1>User Page: %s (%s) @%s</h1><a href=\\\"/protected\\\">Protected Area</a>\",\n                                   username, displayName, Instant.now());\n    respondWithOk(ctx, \"text/html\", content);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing AWS Lambda Handler with Vert.x Integration\nDESCRIPTION: Main handler class that serves as the entry point for AWS Lambda requests. Initializes Vert.x instance, deploys verticles, and manages request/response flow using event bus communication.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2017-11-13-AWS-Lambda-and-Vertx-Framework-URL-Shortener-Backend.md#2025-04-19_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nprivate static final Vertx vertx = Vertx.vertx();\nprivate static JDBCClient jdbc;\n\nstatic {\n    JsonObject mysqlConfig = new JsonObject()\n            .put(\"url\", \"jdbc:mysql://<HOST>/<DB>\")\n            .put(\"driver_class\", \"com.mysql.jdbc.Driver\")\n            .put(\"user\", System.getenv(\"JDBC_USER\"))\n            .put(\"password\", System.getenv(\"JDBC_PASSWORD\"))\n            .put(\"max_pool_size\", 30);\n\n    jdbc = JDBCClient.createShared(vertx, mysqlConfig);\n\n    vertx.deployVerticle(new UrlService());\n    vertx.deployVerticle(new UrlService());\n    vertx.deployVerticle(new UrlService());\n}\n```\n\n----------------------------------------\n\nTITLE: Vert.x TCP Server Creation\nDESCRIPTION: Demonstrates creating and configuring a TCP server with connection handling in Vert.x.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_js.md#2025-04-19_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nvar server = vertx.createNetServer();\n\nserver.connectHandler(function(sock) {\n    log.info('A client has connected!');\n}).listen(1234, 'localhost');\n```\n\n----------------------------------------\n\nTITLE: Retrieving File Properties in Vert.x File System API\nDESCRIPTION: Example demonstrating how to retrieve file properties using the Vert.x File System API. The operation returns metadata such as creation time, access time, modification time, and file type information.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_ruby.md#2025-04-19_snippet_94\n\nLANGUAGE: ruby\nCODE:\n```\nVertx::FileSystem.props('some-file.txt') do |err, props|\n    if err\n        puts \"Failed to retrieve file props: #{err}\"\n    else\n        puts 'File props are:'\n        puts \"Last accessed: #{props.lastAccessTime}\"\n        // etc\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Disabling Connection Pooling in Vert.x HTTP Client with Ruby\nDESCRIPTION: Configuration code to disable connection pooling in a Vert.x HTTP client. When keep_alive is set to false, a new connection will be created for each request and closed after the response ends.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_ruby.md#2025-04-19_snippet_61\n\nLANGUAGE: ruby\nCODE:\n```\nclient = Vertx::HttpClient.new    \nclient.keep_alive = false\n```\n\n----------------------------------------\n\nTITLE: Restoring Vert.x Context in Async Operations\nDESCRIPTION: Shows how to properly restore Vert.x context when working with CompletableFuture by using Context.runOnContext to ensure operations execute in the correct context.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2017-01-31-an-introduction-to-the-vertx-context-objects.md#2025-04-19_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nfinal Context currentContext = vertx.getOrCreateContext();\ntoComplete.thenRun(() -> {\n        currentContext.runOnContext(v -> {\n        assertThat(Thread.currentThread().getName(), is(threadName));\n        async.complete();\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: HTTP Server with Request Handler\nDESCRIPTION: Implementation of an HTTP server with basic request handling functionality.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_ruby.md#2025-04-19_snippet_47\n\nLANGUAGE: ruby\nCODE:\n```\nserver = Vertx::HttpServer.new\n\nserver.request_handler do |request|\n  puts 'An HTTP request has been received'\nend\n\nserver.listen(8080, 'localhost')\n```\n\n----------------------------------------\n\nTITLE: Vert.x JDBC Client Initialization\nDESCRIPTION: Code for initializing JDBC client with configuration in Vert.x application.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/intro-series/2015-10-19-post-05-using-the-asynchronous-sql-client.md#2025-04-19_snippet_3\n\nLANGUAGE: java\nCODE:\n```\njdbc = JDBCClient.createShared(vertx, config(), \"My-Whisky-Collection\");\n```\n\n----------------------------------------\n\nTITLE: Configuring SSL Client with Trust Store\nDESCRIPTION: Example demonstrating how to configure a Vert.x NetClient with SSL using a trust store for server certificate validation.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_ruby.md#2025-04-19_snippet_35\n\nLANGUAGE: ruby\nCODE:\n```\nclient = Vertx::NetClient.new\nclient.ssl = true\nclient.trust_store_path = '/path/to/your/client/truststore/client-truststore.jks'\nclient.trust_store_password = 'password'\n```\n\n----------------------------------------\n\nTITLE: SQL Client Templates Basic Query Execution\nDESCRIPTION: Shows basic usage of SQL Client Templates for executing prepared queries using named parameters with map-based input.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/releases/2020-05-25-vertx-4-milestone5-release.md#2025-04-19_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nMap<String, Object> parameters = Collections.singletonMap(\"id\", 1);\n\nSqlTemplate\n  .forQuery(client, \"SELECT * FROM users WHERE id=#{id}\")\n  .execute(parameters)\n  .onSuccess(users -> {\n    users.forEach(row -> {\n      System.out.println(row.getString(\"first_name\") + \" \" + row.getString(\"last_name\"));\n    });\n  });\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Bus Consumer in Vert.x\nDESCRIPTION: Sets up an event bus consumer that receives messages, prints them, and sends a reply.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2018-04-09-vertx-micrometer-metrics.md#2025-04-19_snippet_12\n\nLANGUAGE: java\nCODE:\n```\n// Consumer side\nvertx.eventBus().<String>consumer(\"greeting\", message -> {\n  String greeting = message.body();\n  System.out.println(\"Received: \" + greeting);\n  message.reply(\"Hello back!\");\n});\n```\n\n----------------------------------------\n\nTITLE: Reading File Contents as Buffer in Vertx\nDESCRIPTION: Shows how to read entire file contents into a buffer in one operation. Caution advised for large files.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_ruby.md#2025-04-19_snippet_98\n\nLANGUAGE: ruby\nCODE:\n```\nVertx::FileSystem.read_file_as_buffer('myfile.dat') do |err, res|\n    puts \"File contains: #{res.length} bytes\" if !err        \nend\n```\n\n----------------------------------------\n\nTITLE: Handling Asynchronous Verticle Deployment in Vert.x\nDESCRIPTION: Shows how to use a callback function to handle the asynchronous nature of verticle deployment. The callback provides deployment status and ID for successful deployments.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_js.md#2025-04-19_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ncontainer.deployVerticle(\"foo.js\", function(err, deployID) {\n  if (!err) {\n    console.log(\"The verticle has been deployed, deployment ID is \" + deployID);\n  } else {\n    console.log(\"Deployment failed! \" + err.getMessage());\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Setting a Closed Handler on a Socket in Vert.x with Ruby\nDESCRIPTION: Demonstrates how to set a closed handler on a socket to be notified when the socket is closed, whether initiated by the client or server. The handler simply outputs a message when the socket closes.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_ruby.md#2025-04-19_snippet_26\n\nLANGUAGE: ruby\nCODE:\n```\nserver = Vertx::NetServer.new\n\nserver.connect_handler do |sock|\n\n    sock.closed_handler { puts 'The socket is now closed' }\n    \nend\n```\n\n----------------------------------------\n\nTITLE: Maven Dependencies for Vert.x JDBC\nDESCRIPTION: Required Maven dependencies for using Vert.x JDBC client with HSQLDB database.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/intro-series/2015-10-19-post-05-using-the-asynchronous-sql-client.md#2025-04-19_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>io.vertx</groupId>\n  <artifactId>vertx-jdbc-client</artifactId>\n  <version>3.1.0</version>\n</dependency>\n<dependency>\n  <groupId>org.hsqldb</groupId>\n  <artifactId>hsqldb</artifactId>\n  <version>2.3.3</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Creating an HTTP Client in Vert.x with Groovy\nDESCRIPTION: This snippet demonstrates how to create a basic HTTP client and set its host and port. It also shows how to configure connection pooling and keep-alive settings.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_groovy.md#2025-04-19_snippet_51\n\nLANGUAGE: groovy\nCODE:\n```\ndef client = vertx.createHttpClient()\n\nHttpClient client = vertx.createHttpClient(port: 8181, host: \"foo.com\")\n\ndef client = vertx.createHttpClient(port: 8181, host: \"foo.com\", keepAlive: false)\n\ndef client = vertx.createHttpClient(port: 8181, host: \"foo.com\", maxPoolSize: 10)\n```\n\n----------------------------------------\n\nTITLE: Implementing VertxMatcherAssert for Hamcrest Integration\nDESCRIPTION: A utility class that integrates Hamcrest matchers with Vert.x Unit TestContext. It provides assertThat methods that properly report failures to the TestContext object, enabling the use of Hamcrest's powerful matching capabilities.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2016-01-18-using-hamcrest-matchers-with-vertx-unit.md#2025-04-19_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic class VertxMatcherAssert {\n\n  public static <T> void assertThat(TestContext context, T actual,\n    Matcher<? super T> matcher) {\n    assertThat(context, \"\", actual, matcher);\n  }\n\n  public static <T> void assertThat(TestContext context, String reason,\n    T actual, Matcher<? super T> matcher) {\n    if (!matcher.matches(actual)) {\n      Description description = new StringDescription();\n      description.appendText(reason)\n          .appendText(\"\\nExpected: \")\n          .appendDescriptionOf(matcher)\n          .appendText(\"\\n     but: \");\n      matcher.describeMismatch(actual, description);\n      context.fail(description.toString());\n    }\n  }\n\n  public static void assertThat(TestContext context, String reason,\n    boolean assertion) {\n    if (!assertion) {\n      context.fail(reason);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating GraphQL Movie Type Definition\nDESCRIPTION: Java code showing how to create a GraphQL object type for movies using graphql-java builder pattern\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2017-11-14-vertx-graphql.md#2025-04-19_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nprivate GraphQLObjectType createMovieType() {\n  return newObject().name(\"Movie\")\n    .description(\"One of the films in the Star Wars universe.\")\n\n    // .title\n    .field(newFieldDefinition().name(\"title\")\n        .description(\"Title of the episode.\")\n        .type(GraphQLString)\n        .dataFetcher((env) -> {\n          Movie movie = env.getSource();\n          return movie.getName();\n        }))\n\n    // .description\n    .field(newFieldDefinition().name(\"description\")\n        .description(\"Description of the episode.\")\n        .type(GraphQLString))\n\n    .build();\n}\n```\n\n----------------------------------------\n\nTITLE: Vert.x Web Content Type Check\nDESCRIPTION: Demonstrates how to check request content types in Vert.x Web routing contexts.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/releases/2019-09-19-vertx-4-milestone3-release.md#2025-04-19_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nif (routingContext.is(\"application/json\")) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Transactions in Vert.x 3.5\nDESCRIPTION: Shows the verbose approach to managing database transactions in Vert.x 3.5, including getting a connection, starting a transaction, executing queries, and handling commit or rollback.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2018-07-02-simplified-transaction-management-vertx-rxjava.md#2025-04-19_snippet_1\n\nLANGUAGE: java\nCODE:\n```\ndbClient.rxGetConnection().flatMap(sqlConnection -> {\n  return sqlConnection.rxSetAutoCommit(false)\n    .andThen(\n      sqlConnection.rxExecute(\"INSERT INTO albums (name) VALUES ('The Israelites')\")\n        .andThen(sqlConnection.rxExecute(\"INSERT INTO tracks (album, name) VALUES ('The Israelites', 'Israelites')\"))\n        .andThen(sqlConnection.rxExecute(\"INSERT INTO tracks (album, name) VALUES ('The Israelites', 'Too Much Too Soon')\"))\n        .andThen(sqlConnection.rxQuery(\"SELECT name FROM tracks WHERE album = 'The Israelites'\").map(ResultSet::getResults))\n    )\n    .flatMap(rows -> sqlConnection.rxCommit().andThen(Single.just(rows)))\n    .onErrorResumeNext(throwable -> {\n      return sqlConnection.rxRollback().onErrorComplete()\n        .andThen(sqlConnection.rxSetAutoCommit(true).onErrorComplete())\n        .andThen(Single.error(throwable));\n    }).flatMap(rows -> sqlConnection.rxSetAutoCommit(true).andThen(Single.just(rows)))\n    .doFinally(sqlConnection::close);\n}).map(rows -> {\n  // Transform DB rows into a client-friendly JSON object\n}).subscribe(json -> {\n  // Send JSON to the client\n}, t -> {\n  // Send error to the client\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Order Submission in JavaScript for Vert.x Web Application\nDESCRIPTION: Defines a function to submit an order to the server using the Vert.x event bus. It includes session authentication and handles the server's response.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/python_web_tutorial.md#2025-04-19_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nthat.submitOrder = function() {\n\n      if (!orderReady()) {\n        return;\n      }\n\n      var orderItems = ko.toJS(that.items);\n      var orderMsg = {\n        sessionID: that.sessionID(),\n        action: \"save\",\n        collection: \"orders\",\n        document: {\n          username: that.username(),\n          items: orderItems\n        }\n      }\n\n      eb.send('vertx.mongopersistor', orderMsg, function(reply) {\n        if (reply.status === 'ok') {\n          that.orderSubmitted(true);\n          // Timeout the order confirmation box after 2 seconds\n          // window.setTimeout(function() { that.orderSubmitted(false); }, 2000);\n        } else {\n          console.error('Failed to accept order');\n        }\n      });\n    };\n```\n\n----------------------------------------\n\nTITLE: Creating a Time Service Handler in Vert.x\nDESCRIPTION: This snippet shows how to create a simple server-side service in Vert.x. It registers a handler on the event bus that responds to 'acme.timeService' messages by sending back the current system time in milliseconds.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/groovy_web_tutorial.md#2025-04-19_snippet_11\n\nLANGUAGE: Groovy\nCODE:\n```\nvertx.eventBus.registerHandler(\"acme.timeService\") { message ->\n    message.reply([current_time: System.currentTimeMillis()])        \n}\n```\n\n----------------------------------------\n\nTITLE: Getting FileSystem Properties in Vert.x (JavaScript)\nDESCRIPTION: This snippet demonstrates how to get file system properties using the fsProps method. The callback receives an object containing information about total, unallocated, and usable space on the filesystem.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_js.md#2025-04-19_snippet_84\n\nLANGUAGE: javascript\nCODE:\n```\nvertx.fileSystem.fsProps('mydir', function(err, res) {\n    if (!err) {\n        console.log('total space: ' + res.totalSpace);\n        // etc\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Performing Random Access Writes with AsyncFile in Groovy\nDESCRIPTION: This example demonstrates how to open a file and perform random access writes at different positions. It writes the same buffer ('foo') 5 times at different positions in the file based on the buffer length multiplied by the iteration index.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_groovy.md#2025-04-19_snippet_84\n\nLANGUAGE: groovy\nCODE:\n```\nvertx.fileSystem.open(\"some-file.dat\") { ar ->\n    if (ar.succeeded()) {\n        def asyncFile = ar.result\n        // File open, write a buffer 5 times into a file\n        def buff = new Buffer(\"foo\")\n        5.times {\n            asyncFile.write(buff, buff.length * it) { ar2 ->\n                if (ar2.succeded()) {\n                    println \"Written ok!\"\n                    // etc\n                } else {\n                    log.error(\"Failed to write\", ar2.exception)\n                }\n            }\n        }\n    } else {\n        log.error(\"Failed to open file\", ar.exception)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting HTTP Response Headers Using Fluent API in Vert.x Ruby\nDESCRIPTION: Demonstrates using the put_header method for a more fluent API to set multiple HTTP response headers. This approach allows method chaining.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_ruby.md#2025-04-19_snippet_56\n\nLANGUAGE: ruby\nCODE:\n```\nrequest.response.put_header('Some-Other-Header', 'wibble').\n                 put_header('Blah', 'Eek')\n```\n\n----------------------------------------\n\nTITLE: Custom Status Code Range Predicate in Vert.x Web Client (Java)\nDESCRIPTION: This snippet shows how to create a custom response predicate to check if the status code is within a specific range in Vert.x Web Client.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2018-12-10-http-response-validation-web-client.md#2025-04-19_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nclient\n  .get(8080, \"myserver.mycompany.com\", \"/some-uri\")\n  .expect(ResponsePredicate.status(200, 202))\n  .send(ar -> {\n    // ....\n  });\n```\n\n----------------------------------------\n\nTITLE: Configuring TCP Client Reconnection in Vert.x\nDESCRIPTION: Shows how to configure automatic reconnection attempts for a TCP client using retry attempts and intervals.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_js.md#2025-04-19_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nvar client = vertx.createNetClient();\n\nclient.setReconnectAttempts(1000);\n\nclient.setReconnectInterval(500);\n```\n\n----------------------------------------\n\nTITLE: Creating Vert.x Buffers\nDESCRIPTION: Shows different ways to create Vert.x buffers, including from strings with specific encodings and with initial size hints.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_js.md#2025-04-19_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nvar buff = new vertx.Buffer('some-string');\nvar buff = new vertx.Buffer('some-string', 'UTF-16');\nvar buff = new vertx.Buffer(100000);\n```\n\n----------------------------------------\n\nTITLE: Resolving SRV Records in Vert.x\nDESCRIPTION: Shows how to resolve SRV records which provide extra information about services like port and hostname. Returns an array of SRVRecord objects sorted by priority.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_js.md#2025-04-19_snippet_100\n\nLANGUAGE: javascript\nCODE:\n```\nclient.resolveNS('vertx.io', function(err, records) {\n    if (err != null) {\n        console.log( \"Failed to resolve entry \" + err );\n    } else {\n        console.log( records.toString() );\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Example JWT Token Structure\nDESCRIPTION: Shows a complete JWT token with header, payload, and signature sections encoded in Base64URL format.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2020-10-01-jwt-auth-with-keycloak.md#2025-04-19_snippet_2\n\nLANGUAGE: text\nCODE:\n```\neyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJjN00xX2hkWjAtWDNyZTl1dmZLSFRDUWRxYXJQYnBMblVJMHltdkF0U1RzIn0.eyJleHAiOjE2MDEzMTg0MjIsImlhdCI6MTYwMTMxODEyMiwianRpIjoiNzYzNWY1YTEtZjFkNy00NTdkLWI4NjktYWQ0OTIzNTJmNGQyIiwiaXNzIjoiaHR0cDovL2xvY2FsaG9zdDo4MDgwL2F1dGgvcmVhbG1zL3ZlcnR4IiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjI3YjNmYWMwLTlhZWMtNDQyMS04MWNmLWQ0YjAyNDI4ZjkwMSIsInR5cCI6IkJlYXJlciIsImF6cCI6InZlcnR4LXNlcnZpY2UiLCJzZXNzaW9uX3N0YXRlIjoiNjg3MDgyMTMtNDBiNy00NThhLWFlZTEtMzlkNmY5ZGEwN2FkIiwiYWNyIjoiMSIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIiwidXNlciJdfSwicmVzb3VyY2VfYWNjZXNzIjp7ImFjY291bnQiOnsicm9sZXMiOlsibWFuYWdlLWFjY291bnQiLCJtYW5hZ2UtYWNjb3VudC1saW5rcyIsInZpZXctcHJvZmlsZSJdfX0sInNjb3BlIjoiZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiVGhlbyBUZXN0ZXIiLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiJ0ZXN0ZXIiLCJnaXZlbl9uYW1lIjoiVGhlbyIsImZhbWlseV9uYW1lIjoiVGVzdGVyIiwiZW1haWwiOiJ0b20rdGVzdGVyQGxvY2FsaG9zdCJ9.NN1ZGE3f3LHE0u7T6Vfq5yPMKoZ6SmrUxoFopAXZm5wVgMOsJHB8BgHQTDm7u0oTVU0ZHlKH2-o11RKK7Mz0mLqMy2EPdkGY9Bqtj5LZ8oTp8FaVqY1g5Fr5veXYpOMbc2fke-e2hG8sAfSjWz1Mq9BUhJ7HdK7TTIte12pub2nbUs4APYystJWx49cYmUwZ-5c9X295V-NX9UksuMSzFItZ4cACVKi68m9lkR4RuNQKFTuLvWsorz9yRx884e4cnoT_JmfSfYBIl31FfnQzUtCjluUzuD9jVXc_vgC7num_0AreOZiUzpglb8UjKXjswTHF-v_nEIaq7YmM5WKpeg\n```\n\n----------------------------------------\n\nTITLE: Using Shared Maps in Vert.x JavaScript\nDESCRIPTION: Demonstrates how to use shared maps between verticles to share data safely within the same Vert.x instance.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_js.md#2025-04-19_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nvar map = vertx.getMap('demo.mymap');\n\nmap.put('some-key', 'some-value');\n\nvar map = vertx.getMap('demo.mymap');\n\nconsole.log('value of some-key is ' + map.get('some-key');\n```\n\n----------------------------------------\n\nTITLE: Handling Unmatched Routes in Vert.x Web with Ruby\nDESCRIPTION: Demonstrates how to set up a handler for requests that don't match any defined routes. If no handler is specified, a 404 response is returned by default.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_ruby.md#2025-04-19_snippet_82\n\nLANGUAGE: ruby\nCODE:\n```\nroute_matcher.no_match { |req| req.response.end('Nothing matched') }\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic HTTP Client in Vert.x with Ruby\nDESCRIPTION: Simple example of creating an HTTP client instance in Vert.x. The code shows the basic client initialization with default settings.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_ruby.md#2025-04-19_snippet_59\n\nLANGUAGE: ruby\nCODE:\n```\nclient = Vertx::HttpClient.new\n```\n\n----------------------------------------\n\nTITLE: Implementing Exception Handler for TCP Socket\nDESCRIPTION: Sets up an exception handler for a TCP socket to handle error conditions.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_js.md#2025-04-19_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nvar server = vertx.createNetServer();\n\nserver.connectHandler(function(sock) {\n    \n    sock.exceptionHandler(function() {        \n        log.error('Oops. Something went wrong');            \n    });\n});\n```\n\n----------------------------------------\n\nTITLE: DNS Reverse Lookup Implementation\nDESCRIPTION: Demonstrates how to perform reverse DNS lookups for IP addresses using the Vert.x DNS client.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_ruby.md#2025-04-19_snippet_112\n\nLANGUAGE: ruby\nCODE:\n```\nclient = Vertx::DnsClient.new(Addrinfo.tcp('10.0.0.1', 53))\nclient.reverse_lookup('10.0.0.1') do |err, result|\n    if err\n        puts \"Failed to resolve entry #{err}\"\n    else\n        puts result\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Request Body Data Handler Example\nDESCRIPTION: Demonstrates handling request body data using dataHandler. Shows how to process incoming data chunks.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_groovy.md#2025-04-19_snippet_47\n\nLANGUAGE: groovy\nCODE:\n```\ndef server = vertx.createHttpServer()\n\nserver.requestHandler{ request ->\n    request.dataHandler { buffer -> println \"I received ${buffer.length()} bytes\" }\n}.listen(8080, \"localhost\")\n```\n\n----------------------------------------\n\nTITLE: Socket Exception Handler Setup\nDESCRIPTION: Sets up an exception handler to handle errors on a socket connection.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_ruby.md#2025-04-19_snippet_32\n\nLANGUAGE: ruby\nCODE:\n```\nserver = Vertx::NetServer.new\n\nserver.connect_handler do |sock|\n    sock.exception_handler { |ex| puts 'Oops. Something went wrong #{ex}' }\nend\n```\n\n----------------------------------------\n\nTITLE: MongoDB Test Configuration Setup in Vert.x\nDESCRIPTION: JUnit setup code to programmatically start MongoDB instance for testing. Configures test database port and manages lifecycle.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/intro-series/2015-11-30-post-06-combine-vertx-and-mongo-to-build-a-giant.md#2025-04-19_snippet_9\n\nLANGUAGE: java\nCODE:\n```\n\tprivate static MongodProcess MONGO;\n\tprivate static int MONGO_PORT = 12345;\n\t@BeforeClass\n\tpublic static void initialize() throws IOException {\n\t  MongodStarter starter = MongodStarter.getDefaultInstance();\n\t  IMongodConfig mongodConfig = new MongodConfigBuilder()\n\t      .version(Version.Main.PRODUCTION)\n\t      .net(new Net(MONGO_PORT, Network.localhostIsIPv6()))\n\t      .build();\n\t  MongodExecutable mongodExecutable =\n\t\t\tstarter.prepare(mongodConfig);\n\t MONGO = mongodExecutable.start();\n\t}\n\n\t@AfterClass\n\tpublic static void shutdown() {  MONGO.stop(); }\n```\n\n----------------------------------------\n\nTITLE: Random Access Buffer Operations in Vert.x JavaScript\nDESCRIPTION: Shows how to perform random access writes to buffers using set methods for different data types.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_js.md#2025-04-19_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nvar buff = new vertx.Buffer();\n\nbuff.setInt(1000, 123);\nbuff.setBytes(0, \"hello\");\n```\n\n----------------------------------------\n\nTITLE: Copying Files in Vert.x\nDESCRIPTION: Shows how to asynchronously copy a file using Vert.x's file system API. The example demonstrates a non-recursive file copy with a completion handler.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_ruby.md#2025-04-19_snippet_98\n\nLANGUAGE: ruby\nCODE:\n```\nVertx::FileSystem.copy('foo.dat', 'bar.dat') do |err|\n    puts 'Copy was successful' if !err        \nend\n```\n\n----------------------------------------\n\nTITLE: Basic NetServer Echo Implementation in Groovy\nDESCRIPTION: Creates a NetServer that listens on port 1234 and echoes back any data received from clients. This implementation doesn't handle backpressure, which could lead to memory exhaustion if data is read faster than it can be written.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_groovy.md#2025-04-19_snippet_38\n\nLANGUAGE: groovy\nCODE:\n```\ndef server = vertx.createNetServer()\n\nserver.connectHandler { sock ->\n    sock.dataHandler { buffer ->\n        // Write the data straight back\n        sock.write(buffer)\n    }\n}.listen(1234, \"localhost\")\n```\n\n----------------------------------------\n\nTITLE: Creating a SockJS Server in Vert.x with Ruby\nDESCRIPTION: Sets up a SockJS server on top of an HTTP server. This creates the basic server structure without defining any applications.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_ruby.md#2025-04-19_snippet_88\n\nLANGUAGE: ruby\nCODE:\n```\nhttpServer = Vertx::HttpServer.new\n\nsockJSServer = Vertx::SockJSServer.new(httpServer)\n```\n\n----------------------------------------\n\nTITLE: Unregistering an Event Bus Handler with Cluster Propagation in Ruby\nDESCRIPTION: Shows how to unregister an event bus handler with a callback for when the unregistration has been propagated across the cluster.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_ruby.md#2025-04-19_snippet_9\n\nLANGUAGE: Ruby\nCODE:\n```\nVertx::EventBus.unregister_handler(id) do\n    puts 'Yippee! The handler unregister has been propagated across the cluster'\nend\n```\n\n----------------------------------------\n\nTITLE: Flow Control with Pause Mechanism\nDESCRIPTION: Enhanced flow control example that pauses the socket when write queue is full.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_ruby.md#2025-04-19_snippet_39\n\nLANGUAGE: ruby\nCODE:\n```\nserver = Vertx::NetServer.new\n\nserver.connect_handler do |sock|\n    sock.data_handler do |buffer|\n        if sock.write_queue_full?\n            sock.pause\n        else\n            sock.write(buffer)\n        end\n    end\nend.listen(1234, 'localhost')\n```\n\n----------------------------------------\n\nTITLE: Connecting WebSocket with RxJava2 in Java\nDESCRIPTION: Demonstrates how to use the new webSocket method with RxJava2, providing reactive programming capabilities for WebSocket connections.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/releases/2019-05-27-vertx-3.7.1-release.md#2025-04-19_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nHttpClient client = vertx.createHttpClient();\nSingle<WebSocket> single = client.rxWebSocket(80, \"example.com\", \"/\");\nsingle.subscribe(\n  ws -> {\n    // connected\n  },\n  err -> {\n    // handle error\n  });\n```\n\n----------------------------------------\n\nTITLE: Calling a Custom Time Service from Client-Side JavaScript (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates how to call the custom time service from client-side code using the event bus. It sends a message to the 'acme.timeService' and logs the response.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/python_web_tutorial.md#2025-04-19_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\neventBus.send(\"acme.timeService\", null, function(reply) {\n    console.log(\"Time is \" + reply.current_time);\n});\n```\n\n----------------------------------------\n\nTITLE: Simple HTTP Server Verticle Implementation\nDESCRIPTION: A basic Vert.x verticle that creates an HTTP server listening on port 8080. It demonstrates proper handling of the Future completion pattern used in Vert.x applications.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2016-01-18-using-hamcrest-matchers-with-vertx-unit.md#2025-04-19_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class MyFirstVerticle extends AbstractVerticle {\n\n  @Override\n  public void start(final Future future) throws Exception {\n    vertx.createHttpServer()\n        .requestHandler(req -> req.response().end(\"hello vert.x\"))\n        .listen(8080, done -> {\n          if (done.failed()) {\n            future.fail(done.cause());\n          } else {\n            future.complete();\n          }\n        });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting a Request Handler for HTTP Server in Vert.x\nDESCRIPTION: Configures a request handler function that will be called whenever an HTTP request is received by the server. The handler function receives a request object parameter.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_js.md#2025-04-19_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nvar server = vertx.createHttpServer();\n\nserver.requestHandler(function(request) {\n  log.info('An HTTP request has been received');\n})  \n\nserver.listen(8080, 'localhost');\n```\n\n----------------------------------------\n\nTITLE: Enabling SSL in Vert.x Web Server Configuration\nDESCRIPTION: Adds SSL configuration to the Vert.x web server for secure client-server communication.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/ruby_web_tutorial.md#2025-04-19_snippet_11\n\nLANGUAGE: Ruby\nCODE:\n```\nweb_server_conf = {\n  'port' => 8080,\n  'host' => 'localhost',\n  'ssl' => true,\n  'bridge' => true,\n  ...\n```\n\n----------------------------------------\n\nTITLE: Accessing Request Parameters\nDESCRIPTION: Shows how to access and validate different types of request parameters including query parameters and arrays.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2017-06-12-openapi3-vertx-web-support.md#2025-04-19_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nRequestParameters params = routingContext.get(\"parsedParameters\");\n```\n\nLANGUAGE: java\nCODE:\n```\nRequestParameter awesomeParameter = params.queryParameter(\"awesomeParameter\");\nif (awesomeParameter != null) {\n    // awesomeParameter parameter exists, but we are not sure that is empty or not (query parameters can be empty with allowEmptyValue: true)\n    if (!awesomeParameter.isEmpty()) {\n      // Now we are sure that it exists and it's not empty, so we can extract it\n      Integer awesome = awesomeParameter.getInteger();\n    } else {\n      // Parameter exists, but it's empty value\n    }\n} else {\n    // Parameter doesn't exist (it's not required)\n}\n```\n\nLANGUAGE: java\nCODE:\n```\nRequestParameter awesomeParameters = params.queryParameter(\"awesomeParameters\");\nif (awesomeParameters != null && !awesomeParameters.isEmpty()) {\n    List<RequestParameter> awesomeList = awesomeParameters.getArray();\n    for (RequestParameter awesome : awesomeList) {\n      Integer a = awesome.getInteger();\n    }\n} else {\n  // awesomeParameters not found or empty string\n}\n```\n\nLANGUAGE: java\nCODE:\n```\nRequestParameter body = params.body();\nif (body != null)\n  JsonObject jsonBody = body.getJsonObject();\n```\n\n----------------------------------------\n\nTITLE: Reading Symbolic Links in Vertx FileSystem\nDESCRIPTION: Demonstrates how to read a symbolic link using Vertx FileSystem API. Returns the path that the symbolic link points to.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_ruby.md#2025-04-19_snippet_95\n\nLANGUAGE: ruby\nCODE:\n```\nVertx::FileSystem.read_sym_link('somelink') do |err, res|\n    puts \"Link points at #{res}\" if !err\nend\n```\n\n----------------------------------------\n\nTITLE: Buffer Number Encoding Operations\nDESCRIPTION: Shows different methods for encoding numbers into a buffer with various bit lengths and precision levels.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_js.md#2025-04-19_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nbuff.appendByte(number);  // To append the number as 8 bits (signed)\n\nbuff.appendShort(number); // To append the number as 16 bits (signed)\n\nbuff.appendInt(number);   // To append the number as 32 bits (signed)\n\nbuff.appendLong(number);  // To append the number as 64 bits (signed)\n```\n\n----------------------------------------\n\nTITLE: Creating a DNS Client in Vert.x with JavaScript\nDESCRIPTION: Demonstrates how to create a DnsClient instance by either using the factory method or the constructor. The client requires DNS server addresses as parameters.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_js.md#2025-04-19_snippet_89\n\nLANGUAGE: javascript\nCODE:\n```\nvar dns    = require('vertx/dns');\nvar client = dns.createDnsClient('8.8.8.8', '8.8.4.4');\n\n// The constructor can be used as well\nclient = new dns.DnsClient('8.8.8.8', '8.8.4.4');\n```\n\n----------------------------------------\n\nTITLE: Opening Files with Specific Flags in Vert.x FileSystem (JavaScript)\nDESCRIPTION: This snippet shows how to open a file with specific flags for reading and writing. The example demonstrates using bit flags to set file access permissions and handling the returned AsyncFile object.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_js.md#2025-04-19_snippet_85\n\nLANGUAGE: javascript\nCODE:\n```\nvertx.fileSystem.open('some-file.dat', vertx.FileSystem.OPEN_READ | vertx.FileSystem.OPEN_WRITE,\n    function(err, asyncFile) {\n        if (err) {\n            console.log('Failed to open file ' + err);\n        } else {\n            console.log('File opened ok');\n            asyncFile.close(); // Close it    \n        }\n    });    \n```\n\n----------------------------------------\n\nTITLE: Maven Dependencies Configuration for Vert.x SQL Clients\nDESCRIPTION: Maven POM dependencies configuration for including the Vert.x PostgreSQL and MySQL clients in a project.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/releases/2019-07-18-vertx-3.8.0-release.md#2025-04-19_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>io.vertx</groupId>\n  <artifactId>vertx-pg-client</artifactId>\n  <version>3.8.0</version>\n</dependency>\n<dependency>\n  <groupId>io.vertx</groupId>\n  <artifactId>vertx-mysql-client</artifactId>\n  <version>3.8.0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Event Bus Handler with Cluster Notification in Ruby\nDESCRIPTION: Shows how to register an event bus handler with a completion block that executes when the handler information has been propagated across the cluster.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_ruby.md#2025-04-19_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nVertx::EventBus.register_handler('test.address', myHandler) do\n    puts 'Yippee! The handler info has been propagated across the cluster'\nend\n```\n\n----------------------------------------\n\nTITLE: Setting HTTP Response Status Code and Message in Vert.x\nDESCRIPTION: This example shows how to set custom HTTP status codes and messages on the response object before ending the response.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_ruby.md#2025-04-19_snippet_55\n\nLANGUAGE: ruby\nCODE:\n```\nserver = Vertx::HttpServer.new\n\nserver.request_handler do |request|\n\n  request.response.status_code = 404\n  request.response.status_message = \"Too many gerbils\"\n  request.response.end\n\nend.listen(8080, 'localhost')\n```\n\n----------------------------------------\n\nTITLE: Data Handler Implementation\nDESCRIPTION: Sets up a data handler to process incoming data on a TCP socket.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_ruby.md#2025-04-19_snippet_29\n\nLANGUAGE: ruby\nCODE:\n```\nserver = Vertx::NetServer.new\n\nserver.connect_handler do |sock|\n    sock.data_handler do |buffer|\n        puts \"I received #{buffer.length} bytes of data\"\n    end\nend.listen(1234, 'localhost')\n```\n\n----------------------------------------\n\nTITLE: Testing Individual Product Retrieval with Rest-Assured\nDESCRIPTION: Integration test method that verifies the API can retrieve an individual product. The test retrieves the list of products, extracts an ID, and then verifies that the individual product can be accessed with correct data.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/intro-series/2015-08-03-post-04-unit-and-integration-tests.md#2025-04-19_snippet_13\n\nLANGUAGE: java\nCODE:\n```\n@Test\npublic void checkThatWeCanRetrieveIndividualProduct() {\n  // Get the list of bottles, ensure it's a success and extract the first id.\n  final int id = get(\"/api/whiskies\").then()\n      .assertThat()\n      .statusCode(200)\n      .extract()\n      .jsonPath().getInt(\"find { it.name=='Bowmore 15 Years Laimrig' }.id\");\n  // Now get the individual resource and check the content\n  get(\"/api/whiskies/\" + id).then()\n      .assertThat()\n      .statusCode(200)\n      .body(\"name\", equalTo(\"Bowmore 15 Years Laimrig\"))\n      .body(\"origin\", equalTo(\"Scotland, Islay\"))\n      .body(\"id\", equalTo(id));\n}\n```\n\n----------------------------------------\n\nTITLE: Resolving CNAME Records in Vert.x\nDESCRIPTION: Demonstrates how to resolve all CNAME records for a domain name. Returns an array of host name strings representing the canonical names.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_js.md#2025-04-19_snippet_95\n\nLANGUAGE: javascript\nCODE:\n```\nclient.resolveCNAME('vertx.io', function(err, records) {\n    if (err != null) {\n        console.log( \"Failed to resolve entry \" + err );\n    } else {\n        console.log( records.toString() );\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Fluent API for Adding Headers to HTTP Client Request in Vert.x with Ruby\nDESCRIPTION: Demonstration of using the put_header method to add HTTP headers with a fluent API style. This approach allows chaining multiple header additions and ending the request in a single expression.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_ruby.md#2025-04-19_snippet_71\n\nLANGUAGE: ruby\nCODE:\n```\nclient = Vertx::HttpClient.new\nclient.host = 'foo.com'  \n\nrequest = client.post('/some-path') do |resp|\n    puts \"got response #{resp.status_code}\" \nend.put_header('Some-Header', 'Some-Value').\n    put_header('Some-Other-Header', 'Some-Other-Value').\n    end\n```\n\n----------------------------------------\n\nTITLE: Serving Static Files with Vert.x\nDESCRIPTION: This snippet demonstrates how to create a simple HTTP server that serves static files from a local directory. It uses the sendFile method to efficiently transfer file contents to the response.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_js.md#2025-04-19_snippet_46\n\nLANGUAGE: javascript\nCODE:\n```\nvar server = vertx.createHttpServer();\n\nserver.requestHandler(function(req) {\n  var file = '';\n  if (req.path == '/') {\n    file = 'index.html';\n  } else if (req.path.indexOf('..') == -1) {\n    file = req.path;\n  }\n  req.response.sendFile('web/' + file);   \n}).listen(8080, 'localhost');\n```\n\n----------------------------------------\n\nTITLE: Accessing Configuration in a Vert.x Verticle\nDESCRIPTION: This code snippet shows how to access configuration passed to a Verticle using the Vertx.config method. It demonstrates retrieving a specific configuration value.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_ruby.md#2025-04-19_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nconfig = Vertx.config\n\n# Do something with config\n\nputs \"number of wibbles is #{config[\"wibble_number\"]}\"\n```\n\n----------------------------------------\n\nTITLE: Creating an HTTP Client in Vert.x Ruby\nDESCRIPTION: Demonstrates how to create a basic HTTP client instance in Vert.x. By default, the client connects to localhost on port 80.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_ruby.md#2025-04-19_snippet_62\n\nLANGUAGE: ruby\nCODE:\n```\nclient = Vertx::HttpClient.new\n```\n\n----------------------------------------\n\nTITLE: Initializing SockJS Server in Ruby\nDESCRIPTION: Creates a basic SockJS server instance by initializing an HTTP server and passing it to the SockJS server constructor.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_ruby.md#2025-04-19_snippet_84\n\nLANGUAGE: Ruby\nCODE:\n```\nhttpServer = Vertx::HttpServer.new\n\nsockJSServer = Vertx::SockJSServer.new(httpServer)\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Service Definition in YAML\nDESCRIPTION: OpenAPI 3.0 specification defining transaction management endpoints with event bus integration using x-vertx-event-bus extension.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2018-12-13-vertx-web-api-service.md#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nopenapi: 3.0.0\npaths:\n  /api/transactions:\n    get:\n      operationId: getTransactionsList\n      description: Get transactions list filtered by sender\n      x-vertx-event-bus: transactions_manager.myapp\n      parameters:\n        - name: from\n          in: query\n          description: Matches exactly the email from\n          style: form\n          explode: false\n          schema:\n            type: array\n            items:\n              type: string\n      responses: ...\n    post:\n      operationId: addTransaction\n      x-vertx-event-bus: transactions_manager.myapp\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Transaction\"\n      responses: ...\n```\n\n----------------------------------------\n\nTITLE: Implementing Client-Side Login in JavaScript\nDESCRIPTION: Handles user login by sending credentials to the auth manager and storing the returned session ID\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/groovy_web_tutorial.md#2025-04-19_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\neb.send('vertx.bridge.login', {username: that.username(), password: that.password()}, function (reply) {\n        if (reply.status === 'ok') {\n          that.sessionID(reply.sessionID);\n        } else {\n          alert('invalid login');\n        }\n      });\n```\n\n----------------------------------------\n\nTITLE: Checking HTTP Response Status with Vertx HTTP Client in Ruby\nDESCRIPTION: Demonstrates how to create an HTTP client and check the status code and message of a response. The client makes a GET request to a specified path and prints the status information from the response.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_ruby.md#2025-04-19_snippet_73\n\nLANGUAGE: ruby\nCODE:\n```\nclient = Vertx::HttpClient.new\nclient.host = 'foo.com'  \n\nclient.get_now('/some-path') do |resp|\n  puts \"server returned status code: #{resp.status_code}\"\n  puts \"server returned status message: #{resp.status_message}\"      \nend\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Buffers in Ruby with Vert.x\nDESCRIPTION: Demonstrates various ways to create buffers in Vert.x, including empty buffers, buffers from strings with different encodings, and buffers with initial size hints.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_ruby.md#2025-04-19_snippet_16\n\nLANGUAGE: Ruby\nCODE:\n```\nbuff = Vertx::Buffer.create\n```\n\nLANGUAGE: Ruby\nCODE:\n```\nbuff = Vertx::Buffer.create_from_str(\"some-string\")\n```\n\nLANGUAGE: Ruby\nCODE:\n```\nbuff = Vertx::Buffer.create_from_str(\"some-string\", \"UTF-16\")\n```\n\nLANGUAGE: Ruby\nCODE:\n```\nbuff = Vertx::Buffer.create(100000)\n```\n\n----------------------------------------\n\nTITLE: Configuring Static File Handler in Vert.x\nDESCRIPTION: Configuration of a static file handler for serving web resources with caching disabled. Used to serve HTML, JavaScript, and other static assets for the auction interface.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2016-01-15-real-time-bidding-with-websockets-and-vertx.md#2025-04-19_snippet_10\n\nLANGUAGE: java\nCODE:\n```\nprivate StaticHandler staticHandler() {\n    return StaticHandler.create()\n        .setCachingEnabled(false);\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Micrometer Registry in Vert.x\nDESCRIPTION: Shows how to get the default Micrometer registry for custom metrics.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2018-04-09-vertx-micrometer-metrics.md#2025-04-19_snippet_14\n\nLANGUAGE: java\nCODE:\n```\nMeterRegistry registry = BackendRegistries.getDefaultNow();\n```\n\n----------------------------------------\n\nTITLE: Unregistering Event Bus Handler in Groovy\nDESCRIPTION: Shows how to unregister a previously registered message handler from the Vert.x event bus using the address and handler reference.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_groovy.md#2025-04-19_snippet_14\n\nLANGUAGE: Groovy\nCODE:\n```\neb.unregisterHandler(\"test.address\", myHandler)\n```\n\n----------------------------------------\n\nTITLE: Service Registration with EventBus\nDESCRIPTION: Code showing how to register the service implementation with the Vert.x EventBus using ServiceBinder.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2018-12-13-vertx-web-api-service.md#2025-04-19_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nServiceBinder serviceBinder = new ServiceBinder(vertx);\n\nTransactionsManagerService transactionsManagerService = TransactionsManagerService.create(vertx);\nregisteredConsumers.add(\n  serviceBinder\n    .setAddress(\"transactions_manager.myapp\")\n    .register(TransactionsManagerService.class, transactionsManagerService)\n);\n```\n\n----------------------------------------\n\nTITLE: Running Basic JavaScript Verticle\nDESCRIPTION: Example of running a JavaScript verticle using the vertx run command with default settings\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/manual.md#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nvertx run server.js\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring HTTP Client in Vert.x JavaScript\nDESCRIPTION: Demonstrates how to create an HTTP client, set the host and port, and configure connection pooling and keep-alive settings.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_js.md#2025-04-19_snippet_48\n\nLANGUAGE: javascript\nCODE:\n```\nvar client = vertx.createHttpClient()\n               .setPort(8181)\n               .setHost('foo.com').\n               .setKeepAlive(false);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar client = vertx.createHttpClient()\n               .setPort(8181)\n               .setHost('foo.com').\n               .setMaxPoolSize(10);\n```\n\n----------------------------------------\n\nTITLE: Maven Dependency for Vertx-Swagger-Router\nDESCRIPTION: Maven dependency configuration for including the vertx-swagger-router library in a project.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2017-05-12-vertx-swagger-presentation.md#2025-04-19_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<script src=\"https://gist.github.com/phiz71/56e723362a1d1370c7262bff246fb087.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Using Regular Expressions for Route Matching in JavaScript\nDESCRIPTION: This example shows how to use regular expressions for more complex route matching patterns. The captured groups from the regex are available as numbered parameters (param0, param1, etc.) in the request handler.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_js.md#2025-04-19_snippet_60\n\nLANGUAGE: javascript\nCODE:\n```\nvar server = vertx.createHttpServer();\n\nvar routeMatcher = new vertx.RouteMatcher();\n\nrouteMatcher.allWithRegEx('\\/([^\\/]+)\\/([^\\/]+)', function(req) {        \n    var first = req.params().param0\n    var second = req.params().param1;\n    req.response.end(\"first is \" + first + \" and second is \" + second);\n});\n\nserver.requestHandler(routeMatcher).listen(8080, 'localhost');\n```\n\n----------------------------------------\n\nTITLE: Running Java Verticle from Source File\nDESCRIPTION: Example of running 10 instances of a Java verticle directly from its source file.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/manual.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nvertx run MyVerticle.java -instances 10\n```\n\n----------------------------------------\n\nTITLE: Closing the Underlying TCP Connection in Vert.x Ruby HTTP\nDESCRIPTION: Demonstrates how to close the underlying TCP connection of an HTTP request using the close method.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_ruby.md#2025-04-19_snippet_54\n\nLANGUAGE: ruby\nCODE:\n```\nrequest.response.close\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphiQL IDE in Vert.x Web GraphQL Handler\nDESCRIPTION: Shows how to enable and configure the GraphiQL IDE in the Vert.x Web GraphQL handler for interactive GraphQL query testing.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/releases/2019-05-27-vertx-3.7.1-release.md#2025-04-19_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nGraphQLHandlerOptions options = new GraphQLHandlerOptions()\n  .setGraphiQLOptions(new GraphiQLOptions()\n    .setEnabled(true)\n  );\n\nrouter.route(\"/graphql\").handler(GraphQLHandler.create(graphQL, options));\n```\n\n----------------------------------------\n\nTITLE: Setting HTTP Request Headers in Vert.x Ruby\nDESCRIPTION: Examples of setting HTTP headers using both direct hash assignment and fluent API approaches.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_ruby.md#2025-04-19_snippet_72\n\nLANGUAGE: ruby\nCODE:\n```\nclient = Vertx::HttpClient.new\nclient.host = 'foo.com'  \n\nrequest = client.post('/some-path') do |resp|\n    puts \"got response #{resp.status_code}\" \nend\n\nrequest.headers['Some-Header'] = 'Some-Value'\nrequest.end\n```\n\n----------------------------------------\n\nTITLE: Integration Test Configuration for Vert.x JDBC\nDESCRIPTION: JSON configuration file for integration tests specifying database connection parameters.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/intro-series/2015-10-19-post-05-using-the-asynchronous-sql-client.md#2025-04-19_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"http.port\": ${http.port},\n  \"url\": \"jdbc:hsqldb:mem:it-test?shutdown=true\",\n  \"driver_class\": \"org.hsqldb.jdbcDriver\"\n}\n```\n\n----------------------------------------\n\nTITLE: Handling DNS Errors in Vert.x\nDESCRIPTION: Shows how to handle DNS errors by checking if an error is an instance of DnsException and accessing its response code to determine the specific error type.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_js.md#2025-04-19_snippet_104\n\nLANGUAGE: javascript\nCODE:\n```\nclient.lookup('not.exist.vertx.io', function(err, result) {\n    if (err != null && err instanceof org.vertx.java.core.dns.DnsException) {\n      var exceptionCode = err.code();\n      // ... etc.\n    } else {\n      console.log( result );\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Socket Data Handler with Write Queue Check\nDESCRIPTION: Implementation that checks if the write queue is full before writing data to prevent memory issues.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_ruby.md#2025-04-19_snippet_42\n\nLANGUAGE: ruby\nCODE:\n```\nserver = Vertx::NetServer.new\n\nserver.connect_handler do |sock|\n    sock.data_handler do |buffer|\n        sock.write(buffer) if !sock.write_queue_full?\n    end\n   \nend.listen(1234, 'localhost')\n```\n\n----------------------------------------\n\nTITLE: Ending HTTP Requests in Vert.x with Groovy\nDESCRIPTION: This snippet shows how to properly end HTTP requests using the Vert.x HTTP client. It covers ending requests with and without additional data.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_groovy.md#2025-04-19_snippet_54\n\nLANGUAGE: groovy\nCODE:\n```\nrequest.end()\n\n// Or with data\n\nrequest.end(\"final data\")\n```\n\n----------------------------------------\n\nTITLE: Echo Server Using Pump with Vert.x HTTP in Ruby\nDESCRIPTION: Implementation of an HTTP echo server that copies request headers to the response and pumps the request body to the response. This demonstrates how to handle streaming data efficiently, even with large request bodies.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_ruby.md#2025-04-19_snippet_58\n\nLANGUAGE: ruby\nCODE:\n```\nserver = Vertx::HttpServer.new\n\nserver.request_handler do |req|\n\n  req.response.headers.set(req.headers)\n\n  Pump.new(req, req.response).start\n  \n  req.end_handler { req.response.end }\n\nend.listen(8080, 'localhost')\n```\n\n----------------------------------------\n\nTITLE: Creating a SockJS Echo Application in Vert.x (Groovy)\nDESCRIPTION: Demonstrates how to install a SockJS application on a SockJS server that echoes back all received messages. The configuration specifies the URL prefix for the application, and the handler sets up a pump to echo data back to the client.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_groovy.md#2025-04-19_snippet_68\n\nLANGUAGE: groovy\nCODE:\n```\ndef httpServer = vertx.createHttpServer()\n\ndef sockJSServer = vertx.createSockJSServer(httpServer)\n\ndef config = [\"prefix: \"/echo\"]\n\nsockJSServer.installApp(config) { sock ->\n    Pump.createPump(sock, sock).start()\n}\n\nhttpServer.listen(8080)\n```\n\n----------------------------------------\n\nTITLE: Basic HTTP Server Creation and Listening\nDESCRIPTION: Creating and starting an HTTP server with a specified host and port.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_ruby.md#2025-04-19_snippet_46\n\nLANGUAGE: ruby\nCODE:\n```\nserver = Vertx::HttpServer.new\n\nserver.listen(8080, 'myhost')\n```\n\n----------------------------------------\n\nTITLE: Custom Timer Metrics Implementation\nDESCRIPTION: Demonstrates how to create and use a custom timer metric to track execution time of periodic operations.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2018-04-09-vertx-micrometer-metrics.md#2025-04-19_snippet_15\n\nLANGUAGE: java\nCODE:\n```\nMeterRegistry registry = BackendRegistries.getDefaultNow();\nTimer timer = Timer\n  .builder(\"my.timer\")\n  .description(\"Time tracker for my extremely sophisticated algorithm\")\n  .register(registry);\n\nvertx.setPeriodic(1000, l -> {\n  timer.record(() -> myExtremelySophisticatedAlgorithm());\n});\n```\n\n----------------------------------------\n\nTITLE: Complete Flow Control Implementation with Drain Handler\nDESCRIPTION: Full implementation of flow control with pause and resume functionality using a drain handler.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_ruby.md#2025-04-19_snippet_44\n\nLANGUAGE: ruby\nCODE:\n```\nserver = Vertx::NetServer.new\n\nserver.connect_handler do |sock|\n    sock.data_handler do |buffer|\n        sock.write(buffer)\n        if sock.write_queue_full?\n            sock.pause\n            sock.drain_handler { sock.resume }\n        end\n    end\n   \nend.listen(1234, 'localhost')\n```\n\n----------------------------------------\n\nTITLE: Deploying Multiple Web Server Instances in Vert.x (Python)\nDESCRIPTION: This snippet demonstrates how to scale up a Vert.x web server by deploying multiple instances. It uses the vertx.deploy_module function to start 32 instances of the web server module.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/python_web_tutorial.md#2025-04-19_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\nimport vertx\n\nvertx.deploy_module('vertx.web-server-v1.0', web_server_conf, 32)\n```\n\n----------------------------------------\n\nTITLE: Preparing Cassandra query statement in Java with Vert.x\nDESCRIPTION: Method to prepare a Cassandra query statement for selecting articles by RSS link using the Vert.x Cassandra client.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2018-12-06-the-last-step-rss-reader.md#2025-04-19_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nprivate Future<Void> prepareSelectArticlesByRssLink() {\n    return Util.prepareQueryAndSetReference(client,\n            \"SELECT title, article_link, description, pubDate FROM articles_by_rss_link WHERE rss_link = ? ;\",\n            selectArticlesByRssLink\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Running Ruby Verticle with Configuration\nDESCRIPTION: Example of running a Ruby verticle and passing it a configuration file.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/manual.md#2025-04-19_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nvertx run my_vert.rb -conf my_vert.conf\n```\n\n----------------------------------------\n\nTITLE: Unregistering Event Bus Handler\nDESCRIPTION: Example of unregistering a handler from the event bus, including optional cluster propagation callback.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_js.md#2025-04-19_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\neb.unregisterHandler('test.address', myHandler);\n```\n\n----------------------------------------\n\nTITLE: Writing String with Specific Encoding to HTTP Response in Ruby with Vert.x\nDESCRIPTION: Demonstrates writing a string with a specific encoding (UTF-16) to an HTTP response. The string will be encoded using the specified encoding before being written to the wire.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_ruby.md#2025-04-19_snippet_50\n\nLANGUAGE: ruby\nCODE:\n```\nrequest.response.write_str('hello', 'UTF-16')\n```\n\n----------------------------------------\n\nTITLE: Setting Custom HTTP Status Code and Message in Vert.x Server Response with Ruby\nDESCRIPTION: This snippet demonstrates how to set a custom HTTP status code and message for the response. It's useful for sending specific error responses.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_ruby.md#2025-04-19_snippet_47\n\nLANGUAGE: ruby\nCODE:\n```\nserver = Vertx::HttpServer.new\n\nserver.request_handler do |request|\n\n  request.response.status_code = 404\n  request.response.status_message = \"Too many gerbils\"\n  request.response.end\n\nend.listen(8080, 'localhost')\n```\n\n----------------------------------------\n\nTITLE: Deploying a Module Programmatically in JavaScript\nDESCRIPTION: JavaScript code example showing how to deploy a Vert.x module programmatically rather than from the command line. This allows one module to deploy another module at runtime.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/mods_manual.md#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvertx.deployModule('org.myorg.mymod-v3.2');\n```\n\n----------------------------------------\n\nTITLE: Reading File Contents in Vert.x FileSystem API (JavaScript)\nDESCRIPTION: This snippet demonstrates reading an entire file's contents into memory as a Buffer using the readFile method. The callback function handles errors and processes the file data.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_js.md#2025-04-19_snippet_82\n\nLANGUAGE: javascript\nCODE:\n```\nvertx.fileSystem.readFile('myfile.dat', function(err, res) {\n    if (!err) {\n        console.log('File contains: ' + res.length() + ' bytes');\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Setting an Exception Handler on a NetClient in Vert.x with Ruby\nDESCRIPTION: Demonstrates how to set an exception handler on a NetClient to catch connection errors. The example tries to connect to a non-existent host and handles the resulting exception.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_ruby.md#2025-04-19_snippet_30\n\nLANGUAGE: ruby\nCODE:\n```\nclient = Vertx::NetClient.new\n\nclient.exception_handler do |ex|\n  puts 'Cannot connect since the host does not exist!'\nend\n\nclient.connect(4242, 'host-that-doesnt-exist') do |sock|\n  puts 'this won't get called'\nend\n```\n\n----------------------------------------\n\nTITLE: Gradle Dependencies Configuration for Vert.x SQL Clients\nDESCRIPTION: Gradle dependencies configuration for including the Vert.x PostgreSQL and MySQL clients in a project.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/releases/2019-07-18-vertx-3.8.0-release.md#2025-04-19_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\ncompile 'io.vertx:vertx-pg-client:3.8.0'\ncompile 'io.vertx:vertx-mysql-client:3.8.0'\n```\n\n----------------------------------------\n\nTITLE: Making Generic HTTP Request in Vert.x Ruby\nDESCRIPTION: Demonstrates making an HTTP request when the method name isn't known in advance using the request method that takes the HTTP method as a parameter.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_ruby.md#2025-04-19_snippet_68\n\nLANGUAGE: ruby\nCODE:\n```\nclient = Vertx::HttpClient.new\nclient.host = 'foo.com'    \n\nrequest = client.request('POST', '/some-path/') do |resp|\n    puts \"got response #{resp.status_code}\" \nend\n\nrequest.end\n```\n\n----------------------------------------\n\nTITLE: Configuring build-helper-maven-plugin for Port Allocation\nDESCRIPTION: Maven plugin configuration to automatically reserve a network port for integration testing. The plugin runs during the process-sources phase and assigns the port number to http.port variable.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/intro-series/2015-08-03-post-04-unit-and-integration-tests.md#2025-04-19_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<plugin>\n  <groupId>org.codehaus.mojo</groupId>\n  <artifactId>build-helper-maven-plugin</artifactId>\n  <version>1.9.1</version>\n  <executions>\n    <execution>\n      <id>reserve-network-port</id>\n      <goals>\n        <goal>reserve-network-port</goal>\n      </goals>\n      <phase>process-sources</phase>\n      <configuration>\n        <portNames>\n          <portName>http.port</portName>\n        </portNames>\n      </configuration>\n    </execution>\n  </executions>\n</plugin>\n```\n\n----------------------------------------\n\nTITLE: Configuring an SSL Client with TrustAll Mode\nDESCRIPTION: Code for creating a Vert.x Net client with SSL enabled in TrustAll mode, which accepts all server certificates but is vulnerable to man-in-the-middle attacks.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_js.md#2025-04-19_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nvar client = vertx.createNetClient()\n                   .setSSL(true)\n                   .setTrustAll(true);\n```\n\n----------------------------------------\n\nTITLE: Defining API Structure with Swagger YAML\nDESCRIPTION: A simplified Swagger YAML file defining the structure of a wine cellar API with bottle and cellar information endpoints.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2017-05-12-vertx-swagger-presentation.md#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n<script src=\"https://gist.github.com/phiz71/6c654f3da2d4124d3fe65e5aaaaedf55.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Socket Closed Handler in Vert.x\nDESCRIPTION: Demonstrates how to handle socket closure events in a TCP server by setting up a closed handler.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_js.md#2025-04-19_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nvar server = vertx.createNetServer();\n\nserver.connectHandler(function(sock) {\n    \n    sock.closedHandler(function() {        \n        log.info('The socket is now closed');            \n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Vert.x Gradle Plugin with WebPack in build.gradle\nDESCRIPTION: Advanced configuration for the Vert.x Gradle plugin, integrating WebPack and Node.js. It includes custom task definitions and watch configurations.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2017-09-28-vertx-gradle-plugin.md#2025-04-19_snippet_4\n\nLANGUAGE: groovy\nCODE:\n```\nplugins {\n  id 'io.vertx.vertx-plugin' version '0.0.4'\n  id 'com.moowork.node' version '1.2.0'\n}\n\nrepositories {\n  jcenter()\n}\n\ndependencies {\n  compile \"io.vertx:vertx-web\"\n}\n\nvertx {\n  mainVerticle = \"sample.MainVerticle\"\n  watch = [\"src/**/*\", \"build.gradle\", \"yarn.lock\"]\n  onRedeploy = [\"classes\", \"webpack\"]\n}\n\ntask webpack(type: Exec) {\n  inputs.file(\"$projectDir/yarn.lock\")\n  inputs.file(\"$projectDir/webpack.config.js\")\n  inputs.dir(\"$projectDir/src/main/webapp\")\n  outputs.dir(\"$buildDir/resources/main/webroot\")\n  commandLine \"$projectDir/node_modules/.bin/webpack\"\n}\n```\n\n----------------------------------------\n\nTITLE: Request-Response Pattern Implementation in Ruby\nDESCRIPTION: Shows implementation of request-response messaging pattern using the event bus, with both sender and receiver code examples.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_ruby.md#2025-04-19_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\nVertx::EventBus.register_handler('test.address') do |message|\n  puts \"I received a message #{message.body}\"\n\n  # Do some stuff...\n  # Now reply to it\n\n  message.reply('This is a reply')\nend\n\nVertx::EventBus.send('test.address', 'This is a message') do |message|\n  puts \"I received a reply #{message.body}\"\nend\n```\n\n----------------------------------------\n\nTITLE: Deploying a Vert.x Module Programmatically\nDESCRIPTION: This snippet shows how to deploy a Vert.x module programmatically using the deploy_module method. It includes passing a configuration to the module.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_ruby.md#2025-04-19_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nVertx.deploy_module(\"io.vertx~mod-mailer~2.0.0-beta1\", config)\n```\n\n----------------------------------------\n\nTITLE: Testing POST Request in Vert.x REST API\nDESCRIPTION: This test case checks if the Vert.x application can handle a POST request to add a new item to the collection, verifying the response status, headers, and content.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/intro-series/2015-08-03-post-04-unit-and-integration-tests.md#2025-04-19_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n@Test\npublic void checkThatWeCanAdd(TestContext context) {\n  Async async = context.async();\n  final String json = Json.encodePrettily(new Whisky(\"Jameson\", \"Ireland\"));\n  final String length = Integer.toString(json.length());\n  vertx.createHttpClient().post(port, \"localhost\", \"/api/whiskies\")\n      .putHeader(\"content-type\", \"application/json\")\n      .putHeader(\"content-length\", length)\n      .handler(response -> {\n        context.assertEquals(response.statusCode(), 201);\n        context.assertTrue(response.headers().get(\"content-type\").contains(\"application/json\"));\n        response.bodyHandler(body -> {\n          final Whisky whisky = Json.decodeValue(body.toString(), Whisky.class);\n          context.assertEquals(whisky.getName(), \"Jameson\");\n          context.assertEquals(whisky.getOrigin(), \"Ireland\");\n          context.assertNotNull(whisky.getId());\n          async.complete();\n        });\n      })\n      .write(json)\n      .end();\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Buffers in Vert.x Ruby\nDESCRIPTION: Shows different ways to create Vert.x buffers, including empty buffers, buffers from strings with encoding, and buffers with initial size hints.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_ruby.md#2025-04-19_snippet_16\n\nLANGUAGE: Ruby\nCODE:\n```\nbuff = Vertx::Buffer.create\n```\n\nLANGUAGE: Ruby\nCODE:\n```\nbuff = Vertx::Buffer.create_from_str(\"some-string\")\n```\n\nLANGUAGE: Ruby\nCODE:\n```\nbuff = Vertx::Buffer.create_from_str(\"some-string\", \"UTF-16\")\n```\n\nLANGUAGE: Ruby\nCODE:\n```\nbuff = Vertx::Buffer.create(100000)\n```\n\n----------------------------------------\n\nTITLE: Single-Line HTTP Server Creation and Configuration in Vert.x\nDESCRIPTION: The most concise way to create and configure an HTTP server in Vert.x, combining server creation, request handler setup, and listening in one expression.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_js.md#2025-04-19_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\nvertx.createHttpServer().requestHandler(function(request) {\n  console.log('An HTTP request has been received');\n}).listen(8080, 'localhost');\n```\n\n----------------------------------------\n\nTITLE: Using Callback with Asynchronous Write in Vert.x Ruby HTTP Response\nDESCRIPTION: Shows how to use a callback block that gets executed when the asynchronous write to an HTTP response has been completed.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_ruby.md#2025-04-19_snippet_51\n\nLANGUAGE: ruby\nCODE:\n```\nrequest.response.write_str('hello') { puts 'It has actually been written' }\n```\n\n----------------------------------------\n\nTITLE: Running Java Verticle with Classpath\nDESCRIPTION: Example of running multiple instances of a pre-compiled Java verticle with custom classpath\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/manual.md#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nvertx run com.acme.MyVerticle -cp \"classes:lib/myjar.jar\" -instances 10\n```\n\n----------------------------------------\n\nTITLE: Initializing Web Server Configuration in JavaScript\nDESCRIPTION: Basic configuration script to start a Vert.x web server module with specified port and host settings.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/js_web_tutorial.md#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nload('vertx.js');\n\nvar webServerConf = {  \n  port: 8080,\n  host: 'localhost'\n};\n\n// Start the web server, with the config we defined above\n\nvertx.deployModule('vertx.web-server-v1.0', webServerConf);\n```\n\n----------------------------------------\n\nTITLE: NetServer with Pump for Automatic Flow Control in Groovy\nDESCRIPTION: Creates a NetServer that uses Vert.x's Pump utility to automatically handle flow control between reading from and writing to the socket. This is a more concise way to achieve the same functionality as the manual implementation.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_groovy.md#2025-04-19_snippet_42\n\nLANGUAGE: groovy\nCODE:\n```\ndef server = vertx.createNetServer()\n\nserver.connectHandler { sock -> Pump.create(sock, sock).start() }.listen(1234, \"localhost\")\n```\n\n----------------------------------------\n\nTITLE: Deploying Verticles Programmatically in Vert.x\nDESCRIPTION: This snippet shows how to deploy verticles programmatically from within another verticle. It includes examples of deploying standard verticles, modules, and passing configuration.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_ruby.md#2025-04-19_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nVertx.deploy_verticle('my_verticle.rb')\n\ncontainer.deploy_module('vertx.mailer-v1.0', config)\n\nvar config = { name: 'foo', age: 234 }\nVertx.deploy_verticle('my_verticle.rb', config)\n```\n\n----------------------------------------\n\nTITLE: Creating and Registering a Basic Shell Command\nDESCRIPTION: Creates a basic command structure for an HTTP client and registers it with the Vert.x Shell command registry. This initial implementation simply outputs a placeholder message.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2016-01-25-intro-to-vertx-shell.md#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar CommandBuilder = require(\"vertx-shell-js/command_builder\");\nvar CommandRegistry = require(\"vertx-shell-js/command_registry\");\n\nvar builder = CommandBuilder.command(\"http-client\");\nbuilder.processHandler(function (process) {\n\n  // Write a message to the console\n  process.write(\"Implement the client\\n\");\n\n  // End the process\n  process.end();\n});\n\n// Register the command\nvar registry = CommandRegistry.getShared(vertx);\nregistry.registerCommand(builder.build(vertx));\n```\n\n----------------------------------------\n\nTITLE: Creating PlatformManager Instance in Java\nDESCRIPTION: Demonstrates how to create an instance of PlatformManager using PlatformLocator to control the Vert.x platform.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/embedding_manual.md#2025-04-19_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nPlatformManager pm = PlatformLocator.factory.createPlatformManager();\n```\n\n----------------------------------------\n\nTITLE: Using body_handler for Complete HTTP Response Processing in Ruby\nDESCRIPTION: Shows how to use the body_handler method to process an entire response body in one go. This simplified approach waits for the complete body before executing the handler.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_ruby.md#2025-04-19_snippet_76\n\nLANGUAGE: ruby\nCODE:\n```\nclient = Vertx::HttpClient.new\nclient.host = 'foo.com'  \n\nclient.get_now('/some-path') do |resp|\n\n  resp.body_handler do |body|\n    puts \"The total body received was #{body.length} bytes\"\n  end\n\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Testing Dependencies in Maven POM\nDESCRIPTION: XML snippet for adding Rest-Assured and AssertJ dependencies to the Maven pom.xml file for integration testing. These libraries provide fluent assertions and REST API testing capabilities.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/intro-series/2015-08-03-post-04-unit-and-integration-tests.md#2025-04-19_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>com.jayway.restassured</groupId>\n  <artifactId>rest-assured</artifactId>\n  <version>2.4.0</version>\n  <scope>test</scope>\n</dependency>\n<dependency>\n  <groupId>org.assertj</groupId>\n  <artifactId>assertj-core</artifactId>\n  <version>2.0.0</version>\n  <scope>test</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Random Access File Writing in Vertx\nDESCRIPTION: Shows how to perform random access writes to a file using AsyncFile.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_ruby.md#2025-04-19_snippet_102\n\nLANGUAGE: ruby\nCODE:\n```\nVertx::FileSystem.open('some-file.dat') do |err, async_file|\n    if err\n        puts \"Failed to open file #{err}\"\n    else\n        # File open, write a buffer 5 times into a file\n        buff = Vertx::Buffer.create('foo')\n        (1..5).each do |i|            \n            async_file.write(buff, buff.length() * i) do |err, res|\n                if err\n                    puts \"Failed to write #{err}\"\n                else\n                    puts 'Written ok'\n                end\n            end\n        end\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Browser-side WebSocket Implementation in JavaScript\nDESCRIPTION: Provides an example of how to implement WebSocket communication in a web browser using JavaScript. Shows connection setup, message handling, and connection status events.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_ruby.md#2025-04-19_snippet_83\n\nLANGUAGE: javascript\nCODE:\n```\n<script>\n\n    var socket = new WebSocket(\"ws://localhost:8080/services/echo\");\n\n    socket.onmessage = function(event) {\n        alert(\"Received data from websocket: \" + event.data);\n    }\n\n    socket.onopen = function(event) {\n        alert(\"Web Socket opened\");\n        socket.send(\"Hello World\");\n    };\n\n    socket.onclose = function(event) {\n        alert(\"Web Socket closed\");\n    };\n\n</script>\n```\n\n----------------------------------------\n\nTITLE: Web Server Security Configuration - JavaScript\nDESCRIPTION: Configuration for the web server including bridge settings, inbound message permissions, and authentication requirements for specific operations.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/js_web_tutorial.md#2025-04-19_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar webServerConf = {  \n      port: 8080,\n      host: 'localhost',\n      bridge: true,\n\n      // This defines which messages from the client we will let through\n      // from the client\n      inbound_permitted: [\n        // Allow calls to login and authorise\n        {\n          address: 'vertx.basicauthmanager.login'\n        },\n        // Allow calls to get static album data from the persistor\n        {\n          address : 'vertx.mongopersistor',\n          match : {\n            action : 'find',\n            collection : 'albums'\n          }\n        },\n        {\n          address : 'vertx.mongopersistor',\n          requires_auth : true,  // User must be logged in to send let these through\n          match : {\n            action : 'save',\n            collection : 'orders'\n          }\n        }\n      ],\n      outbound_permitted: [ {} ]\n    };\n```\n\n----------------------------------------\n\nTITLE: Complete Response Body Handling in Vert.x\nDESCRIPTION: Demonstrates accumulating the entire response body in a buffer before processing it.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_js.md#2025-04-19_snippet_59\n\nLANGUAGE: javascript\nCODE:\n```\nvar client = vertx.createHttpClient().host('foo.com');\n\nclient.getNow('/some-path', function(resp) {\n  var body = new vertx.Buffer();\n\n  resp.dataHandler(function(buffer) {\n    body.appendBuffer(buffer);\n  });\n\n  resp.endHandler(function() {\n    console.log('The total body received was ' + body.length() + ' bytes');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring package.json for WebPack integration\nDESCRIPTION: Sample package.json file for integrating WebPack with the Vert.x Gradle plugin. It defines project metadata and dependencies.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2017-09-28-vertx-gradle-plugin.md#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"name\": \"webpack-sample\",\n  \"version\": \"0.0.1\",\n  \"description\": \"A sample with Vert.x, Gradle and Webpack\",\n  \"main\": \"src/main/webapp/index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"webpack\": \"^2.7.0\"\n  },\n  \"dependencies\": {\n    \"axios\": \"^0.16.2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Shared Map Usage in Vert.x\nDESCRIPTION: Demonstrates using shared maps to share data between different verticles in the same Vert.x instance.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_js.md#2025-04-19_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nvar map = vertx.getMap('demo.mymap');\n\nmap.put('some-key', 'some-value');\n```\n\n----------------------------------------\n\nTITLE: Creating Directories with Parent Directories in Vert.x FileSystem (JavaScript)\nDESCRIPTION: This snippet demonstrates how to create a directory with parent directories using the mkdir method with the createParents parameter set to true. The callback function handles any errors and confirms successful creation.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_js.md#2025-04-19_snippet_80\n\nLANGUAGE: javascript\nCODE:\n```\nvertx.fileSystem.mkdir('a/b/c', true, function(err, res) {\n   if (!err) {\n     console.log('Directory created ok');\n   }\n});\n```\n\n----------------------------------------\n\nTITLE: Writing Strings to an HTTP Client Request in Vert.x with Ruby\nDESCRIPTION: Example showing how to write a string to an HTTP client request using UTF-8 encoding. This is a common approach for sending text data in the request body.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_ruby.md#2025-04-19_snippet_68\n\nLANGUAGE: ruby\nCODE:\n```\nrequest.write_str('hello')\n```\n\n----------------------------------------\n\nTITLE: Creating an Embedded HTTP Server in Java with Vert.x\nDESCRIPTION: This snippet demonstrates how to create a simple embedded web server using Vert.x in Java. It sets up an HTTP server that listens on port 8080 and serves static files from a 'webroot' directory.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/manual.md#2025-04-19_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nVertx vertx = Vertx.newVertx();\nvertx.createHttpServer().requestHandler(new Handler<HttpServerRequest>() {\n    public void handle(HttpServerRequest req) {\n        String file = req.path.equals(\"/\") ? \"index.html\" : req.path;\n        req.response.sendFile(\"webroot/\" + file);\n    }\n}).listen(8080);\n```\n\n----------------------------------------\n\nTITLE: Configuring Vert.x Options for JMX Metrics\nDESCRIPTION: Java code snippet showing how to configure Vert.x options to enable JMX metrics reporting.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2018-04-09-vertx-micrometer-metrics.md#2025-04-19_snippet_7\n\nLANGUAGE: java\nCODE:\n```\n// Default JMX options will publish MBeans under domain \"metrics\"\nMicrometerMetricsOptions options = new MicrometerMetricsOptions()\n  .setJmxMetricsOptions(new VertxJmxMetricsOptions().setEnabled(true))\n  .setEnabled(true);\nVertx vertx = Vertx.vertx(new VertxOptions().setMetricsOptions(options));\n// Then deploy verticles with this vertx instance\n```\n\n----------------------------------------\n\nTITLE: HTTP Server Accept Backlog Configuration\nDESCRIPTION: Java code example showing how to configure the HTTP server accept backlog for improved connection handling\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/manual.md#2025-04-19_snippet_9\n\nLANGUAGE: java\nCODE:\n```\nHttpServer server = vertx.createHttpServer();\nserver.setAcceptBacklog(10000);\n```\n\n----------------------------------------\n\nTITLE: Configuring Router in Vert.x start Method\nDESCRIPTION: Implementation of the start method in Vert.x Verticle to initialize data and set up the router.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/intro-series/2015-07-27-post-03-some-rest-with-vertx.md#2025-04-19_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic void start(Future<Void> fut) {\n\n  createSomeData();\n\n  // Create a router object.\n  Router router = Router.router(vertx);\n\n  // Rest of the method\n}\n```\n\n----------------------------------------\n\nTITLE: Resolving All AAAA Records (IPv6) in Vert.x\nDESCRIPTION: Shows how to resolve all AAAA records (IPv6) for a domain name, similar to using 'dig' on Unix systems. Returns an array of IPv6 address strings.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_js.md#2025-04-19_snippet_94\n\nLANGUAGE: javascript\nCODE:\n```\nclient.resolveAAAA('vertx.io', function(err, records) {\n    if (err != null) {\n        console.log( \"Failed to resolve entry \" + err );\n    } else {\n        console.log( records.toString() );\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Deploying Auth Manager - JavaScript\nDESCRIPTION: Deploys the Vert.x authentication manager module to handle user authentication and authorization.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/js_web_tutorial.md#2025-04-19_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvertx.deployModule('vertx.auth-mgr-v1.1');\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Client Host and Port in Vert.x Ruby\nDESCRIPTION: Shows how to set the port and hostname for an HTTP client. A single client always connects to the same host and port.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_ruby.md#2025-04-19_snippet_63\n\nLANGUAGE: ruby\nCODE:\n```\nclient = Vertx::HttpClient.new\nclient.port = 8181\nclient.host = 'foo.com'\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle for Vert.x and Kotlin\nDESCRIPTION: Gradle build file configuration for a Vert.x and Kotlin project, including dependencies and plugin setup.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2017-12-15-tcp-client-using-vertx-kotlin-and-gradle-build.md#2025-04-19_snippet_3\n\nLANGUAGE: gradle\nCODE:\n```\nbuildscript {\n    ext {\n        kotlinVersion = '1.2.10'\n        vertxVersion = '3.5.0'\n    }\n    repositories {\n        jcenter()\n    }\n    dependencies {\n        classpath \"org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion\"\n        classpath \"io.vertx:vertx-gradle-plugin:$vertxVersion\"\n    }\n}\n\nplugins {\n    id 'org.jetbrains.kotlin.jvm' version \"$kotlinVersion\"\n    id 'io.vertx.vertx-plugin' version \"$vertxVersion\"\n}\n\nrepositories {\n    jcenter()\n}\n\ndependencies {\n    compile \"org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion\"\n    compile \"io.vertx:vertx-core:$vertxVersion\"\n    compile \"io.vertx:vertx-lang-kotlin:$vertxVersion\"\n\n    compile 'org.slf4j:slf4j-api:1.7.25'\n    compile 'ch.qos.logback:logback-classic:1.2.3'\n\n    testCompile \"junit:junit:4.12\"\n    testCompile \"io.vertx:vertx-unit:$vertxVersion\"\n}\n\nvertx {\n    mainVerticle = \"info.usmans.blog.vertx.NetClientVerticle\"\n}\n\ncompileKotlin {\n    kotlinOptions.jvmTarget = \"1.8\"\n}\n\ncompileTestKotlin {\n    kotlinOptions.jvmTarget = \"1.8\"\n}\n```\n\n----------------------------------------\n\nTITLE: Building Vert.x Native Image with GraalVM CLI Command\nDESCRIPTION: A bash command to generate a native image using GraalVM's native-image tool. It includes various flags and configurations necessary for building a Vert.x application as a native executable.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2018-05-31-vertx-native.md#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$GRAALVMDIR/bin/native-image \\\n --verbose \\\n --no-server \\\n -Dio.netty.noUnsafe=true  \\\n -H:ReflectionConfigurationFiles=./reflectconfigs/netty.json \\\n -H:+ReportUnsupportedElementsAtRuntime \\\n -Dfile.encoding=UTF-8 \\\n -jar target/vertx-graalvm-native-image-test-0.0.1-SNAPSHOT.jar\n```\n\n----------------------------------------\n\nTITLE: Configuring System Module in mod.json\nDESCRIPTION: Sets the 'system' property to true in mod.json, indicating that the module should be installed in the sys-mods directory for sharing across applications.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/mods_manual.md#2025-04-19_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n\"system\": true\n```\n\n----------------------------------------\n\nTITLE: Reading Symbolic Links with Vert.x FileSystem in Groovy\nDESCRIPTION: Demonstrates how to read a symbolic link using the Vert.x FileSystem API. This example retrieves the path that the symbolic link points to and logs the result.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_groovy.md#2025-04-19_snippet_77\n\nLANGUAGE: groovy\nCODE:\n```\nvertx.fileSystem.readSymLink(\"somelink\") { ar ->\n    if (ar.succeeded()) {\n        println \"Link points at ${ar.result}\"\n    } else {\n        log.error(\"Failed to read\", ar.exception)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Event Bus Handler in Ruby\nDESCRIPTION: Demonstrates how to register a message handler on the Vert.x event bus at a specific address. The handler receives and processes messages sent to that address.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_ruby.md#2025-04-19_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nid = Vertx::EventBus.register_handler('test.address') do |message|\n    puts \"Got message body #{message.body}\" \nend\n```\n\n----------------------------------------\n\nTITLE: Creating HTTP Server with Vert.x\nDESCRIPTION: This code creates an HTTP server using Vert.x, configures it with the previously created router, and sets it to listen on a specified port.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2017-01-25-building-services-and-apis-with-amqp.md#2025-04-19_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nHttpServerOptions httpOptions = new HttpServerOptions();  \nserver = vertx.createHttpServer(httpOptions)  \n   .requestHandler(router::accept)  \n   .listen(httpPort);  \n```\n\n----------------------------------------\n\nTITLE: Creating TCP Server in Vert.x\nDESCRIPTION: Basic example of creating a TCP server instance using Vert.x createNetServer method.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_js.md#2025-04-19_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nvar server = vertx.createNetServer();\n\nserver.listen(1234, \"myhost\");\n```\n\n----------------------------------------\n\nTITLE: Starting an HTTP Server with Specific Host and Port in Groovy\nDESCRIPTION: Creates an HTTP server and configures it to listen on port 8080 and hostname 'myhost'. The server will only accept connections to that specific hostname and port combination.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_groovy.md#2025-04-19_snippet_44\n\nLANGUAGE: groovy\nCODE:\n```\ndef server = vertx.createHttpServer()\n\nserver.listen(8080, \"myhost\")\n```\n\n----------------------------------------\n\nTITLE: Running Clustered JavaScript Verticles\nDESCRIPTION: Example of running two JavaScript verticles in cluster mode with different ports\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/manual.md#2025-04-19_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nvertx run handler1.js -cluster\nvertx run handler1.js -cluster -cluster-port 25501\n```\n\n----------------------------------------\n\nTITLE: Performing DNS Lookup for A or AAAA Records in Vert.x\nDESCRIPTION: Shows how to lookup either A (IPv4) or AAAA (IPv6) records for a domain name. The first result returned will be used, similar to the behavior of 'nslookup'.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_js.md#2025-04-19_snippet_90\n\nLANGUAGE: javascript\nCODE:\n```\nclient.lookup('vertx.io', function(err, result) {\n    if (err != null) {\n        console.log( \"Failed to resolve entry \" + err );\n    } else {\n        console.log( result );\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Buffers in Vert.x with Groovy\nDESCRIPTION: Shows various ways to create Buffer objects in Vert.x, including empty buffers, buffers from strings, and buffers with initial size hints.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_groovy.md#2025-04-19_snippet_20\n\nLANGUAGE: Groovy\nCODE:\n```\ndef buff = new Buffer()\n\ndef buff = new Buffer(\"some-string\")\n\ndef buff = new Buffer(\"some-string\", \"UTF-16\")\n\ndef bytes = ...\ndef buff = new Buffer(bytes)\n\ndef buff = new Buffer(100000)\n```\n\n----------------------------------------\n\nTITLE: Basic JavaScript Function Declaration\nDESCRIPTION: A JavaScript function named 'test' that logs a message to the console. This snippet shows basic function syntax in JavaScript and console output.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2015-06-26-a-catchy-title.md#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction test() {\n  console.log(\"notice the blank line before this function?\");\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple HTTP Server in Vert.x with JavaScript\nDESCRIPTION: A basic JavaScript file that loads the Vert.x JavaScript module and creates an HTTP server that responds with 'Hello World!'. This server listens on localhost at port 8080.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/install.md#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nload('vertx.js');\n\nvertx.createHttpServer().requestHandler(function(req) {\n  req.response.end(\"Hello World!\");\n}).listen(8080, 'localhost');\n```\n\n----------------------------------------\n\nTITLE: Sending Different Message Types on the Event Bus in Ruby\nDESCRIPTION: Shows examples of sending various types of messages (numbers, booleans, JSON objects, nil) on the Vert.x event bus.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_ruby.md#2025-04-19_snippet_13\n\nLANGUAGE: Ruby\nCODE:\n```\nVertx::EventBus.send('test.address', 1234)\nVertx::EventBus.send('test.address', 3.14159)\n```\n\nLANGUAGE: Ruby\nCODE:\n```\nVertx::EventBus.send('test.address', true)\n```\n\nLANGUAGE: Ruby\nCODE:\n```\nmyObj = {\n  'name' => 'Tim',\n  'address' => 'The Moon',\n  'age' => 457\n}\nVertx::EventBus.send('test.address', myObj)\n```\n\nLANGUAGE: Ruby\nCODE:\n```\nVertx::EventBus.send('test.address', nil)\n```\n\n----------------------------------------\n\nTITLE: Setting Exception Handler in Vert.x TCP Server\nDESCRIPTION: Configures an exception handler on a TCP socket to handle any errors that occur during connection.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_groovy.md#2025-04-19_snippet_30\n\nLANGUAGE: groovy\nCODE:\n```\ndef server = vertx.createNetServer()\n\nserver.connectHandler { sock -> \n    sock.exceptionHandler { e -> println \"Oops! $e\" }\n}.listen(1234, \"localhost\")\n```\n\n----------------------------------------\n\nTITLE: Creating and Asserting Multiple Web Requests with TestRequest in Java\nDESCRIPTION: This snippet shows how to use the TestRequest API to create and assert multiple GET requests in a single test method. It demonstrates the use of Checkpoint to manage multiple asynchronous operations in the VertxTestContext.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2019-07-26-vertx-junit5-web-client.md#2025-04-19_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport static io.vertx.junit5.web.TestRequest.*;\n\n@ExtendWith({\n  VertxExtension.class, // VertxExtension MUST be configured before VertxWebClientExtension\n  VertxWebClientExtension.class\n})\npublic class MultiTestRequestExample {\n\n  @Test\n  public void test2(WebClient client, VertxTestContext testContext) {\n    Checkpoint checkpoint = testContext.checkpoint(2); // Create the Checkpoint to flag when request succeds\n\n    testRequest(\n        client    // Create the test request using WebClient APIs\n          .get(\"/hello\")\n          .addQueryParam(\"name\", \"francesco\")\n          .putHeader(\"x-my\", \"foo\")\n      )\n      .expect(\n        jsonBodyResponse(new JsonObject().put(\"value\", \"Hello Francesco!\")),\n        responseHeader(\"x-my\", \"bar\")\n      )\n      .send(testContext, checkpoint); // Pass the checkpoint to flag\n\n    testRequest(\n        client\n          .get(\"/hello\")\n          .addQueryParam(\"name\", \"julien\")\n          .putHeader(\"x-my\", \"foo\")\n      )\n      .expect(\n        jsonBodyResponse(new JsonObject().put(\"value\", \"Hello Julien!\")),\n        responseHeader(\"x-my\", \"bar\")\n      )\n      .send(testContext, checkpoint);\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Writing Buffer to HTTP Client Request in Ruby\nDESCRIPTION: Demonstrates writing a buffer to an HTTP client request using write_buffer method.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_ruby.md#2025-04-19_snippet_70\n\nLANGUAGE: ruby\nCODE:\n```\nmyBuffer = ...\nrequest.write_buffer(myBuffer)\n```\n\n----------------------------------------\n\nTITLE: Body Handler Usage Example\nDESCRIPTION: Demonstrates using bodyHandler to process the entire request body in one go.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_groovy.md#2025-04-19_snippet_49\n\nLANGUAGE: groovy\nCODE:\n```\ndef server = vertx.createHttpServer()\n\nserver.requestHandler{ request ->\n\n    request.bodyHandler { body -> println \"The total body received was ${body.length()} bytes\" }\n\n}.listen(8080, \"localhost\")\n```\n\n----------------------------------------\n\nTITLE: Configuring and Deploying Vert.x Web Server and MongoDB Persistor Modules\nDESCRIPTION: Initializes a Vert.x application by setting up web server configuration and deploying the web server and MongoDB persistor modules. The web server is configured to listen on port 8080 and localhost.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/groovy_web_tutorial.md#2025-04-19_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\ndef webServerConf = [\n  port: 8080,\n  host: 'localhost'\n]\n\n// Start the web server, with the config we defined above\n\ncontainer.deployModule('vertx.web-server-v1.0', webServerConf);\n```\n\n----------------------------------------\n\nTITLE: Path Handler Implementation\nDESCRIPTION: Implementation of the path handler for processing web requests and routing them to appropriate templates\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2017-03-08-building-apps-with-vertx-and-mesh.md#2025-04-19_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n<script src=\"https://gist.github.com/Jotschi/39fc0d3fcd45122eafe68d61bea4c120.js?file=pathHandler.java\"></script>\n```\n\n----------------------------------------\n\nTITLE: Creating a TCP Server in Vert.x Ruby\nDESCRIPTION: Demonstrates how to create a basic TCP server using Vert.x NetServer.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_ruby.md#2025-04-19_snippet_23\n\nLANGUAGE: Ruby\nCODE:\n```\nserver = Vertx::NetServer.new\n```\n\n----------------------------------------\n\nTITLE: Implementing Asynchronous File Response with Vert.x Router\nDESCRIPTION: Demonstrates how to use the new RoutingContext method to send file contents asynchronously using Vert.x futures. The example shows reading a JSON file and responding to an HTTP request in a single operation.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/releases/2020-11-04-vertx-4-cr1-release.md#2025-04-19_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nrouter.route()\n  .respond(ctx ->\n    vertx.fileSystem()\n      .readFile(\"somefile.json\"));\n```\n\n----------------------------------------\n\nTITLE: Starting Keycloak Docker Container\nDESCRIPTION: Docker command to start a Keycloak instance with predefined realm configuration for the Vert.x demo application.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2020-03-09-easy-sso-for-vertx-with-keycloak.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run \\\n  -it \\\n  --name vertx-keycloak \\\n  --rm \\\n  -e KEYCLOAK_USER=admin \\\n  -e KEYCLOAK_PASSWORD=admin \\\n  -e KEYCLOAK_IMPORT=/tmp/vertx-realm.json \\\n  -v $PWD/vertx-realm.json:/tmp/vertx-realm.json \\\n  -p 8080:8080 \\\n  quay.io/keycloak/keycloak:9.0.0\n```\n\n----------------------------------------\n\nTITLE: Random Access Buffer Writes in Vert.x Ruby\nDESCRIPTION: Shows how to write data at specific indices in Vert.x buffers using set methods for various data types.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_ruby.md#2025-04-19_snippet_18\n\nLANGUAGE: Ruby\nCODE:\n```\nbuff = Vertx::Buffer.create\n\nbuff.set_fixnum(0, 4, 123123) # Set number as 4 bytes written at index 0 \nbuff.set_float(1000, 8, 414.123123123) # Set float as 8 bytes at index 1000\n```\n\nLANGUAGE: Ruby\nCODE:\n```\nbuff.set_fixnum(100, 123, 1)    # Set number as a single signed byte at position 100     \n\nbuff.set_fixnum(100, 123, 2)    # Set number as a signed two byte integer at position 100         \n\nbuff.set_fixnum(100, 123, 4)    # Set number as a signed four byte integer at position 100             \n\nbuff.set_fixnum(100, 123, 8)    # Set number as a signed eight byte integer at position 100\n```\n\nLANGUAGE: Ruby\nCODE:\n```\nbuff.set_float(100, 1.234, 4)   # Set the number as a 32-bit IEEE 754 floating point number (4 bytes) at pos 100   \n\nbuff.set_float(100, 1.234, 8)   # Set the number as a 64-bit IEEE 754 floating point number (4 bytes) at pos 100\n```\n\nLANGUAGE: Ruby\nCODE:\n```\nbuff.set_buffer(100, other_buffer)\n```\n\nLANGUAGE: Ruby\nCODE:\n```\nbuff.set_string(100, str) # Set the string using UTF-8 encoding        \n\nbuff.set_string(100, str, 'UTF-16') # Set the string using the specified encoding\n```\n\n----------------------------------------\n\nTITLE: Accessing Form Attributes in Vert.x HTTP Server\nDESCRIPTION: This snippet demonstrates how to access HTML form attributes after the entire request body has been received using the form_attributes method.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_ruby.md#2025-04-19_snippet_54\n\nLANGUAGE: ruby\nCODE:\n```\nrequest.end_handler do\n   # The request has been all ready so now we can look at the form attributes\n   attrs = request.form_attributes\n   # Do something with them        \nend\n```\n\n----------------------------------------\n\nTITLE: Creating Directories with Vert.x FileSystem in JavaScript\nDESCRIPTION: Shows how to create directories including parent directories using Vert.x file system API. This example demonstrates creating a nested directory structure.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_js.md#2025-04-19_snippet_76\n\nLANGUAGE: javascript\nCODE:\n```\nvertx.fileSystem.mkdir('a/b/c', true, function(err, res) {\n   if (!err) {\n     log.info('Directory created ok');\n   }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring SSL Client with Trust All Certificates\nDESCRIPTION: Example showing how to configure a Vert.x NetClient with SSL to trust all server certificates (unsafe for production).\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_ruby.md#2025-04-19_snippet_34\n\nLANGUAGE: ruby\nCODE:\n```\nclient = Vertx::NetClient.new\nclient.ssl = true\nclient.trust_all = true\n```\n\n----------------------------------------\n\nTITLE: Disabling Connection Pooling in Vert.x Ruby HTTP Client\nDESCRIPTION: Demonstrates how to disable connection pooling (keep-alive) in an HTTP client. When disabled, a new connection will be created for each request and closed after the response ends.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_ruby.md#2025-04-19_snippet_64\n\nLANGUAGE: ruby\nCODE:\n```\nclient = Vertx::HttpClient.new    \nclient.keep_alive = false\n```\n\n----------------------------------------\n\nTITLE: Running a Vert.x JavaScript Application via Command Line\nDESCRIPTION: A terminal command to launch a Vert.x application written in JavaScript. This command executes the server.js file using the Vert.x runtime.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/install.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nvertx run server.js\n```\n\n----------------------------------------\n\nTITLE: Handling Futures in Vert.x Scala\nDESCRIPTION: Example showing two approaches to handle async operations in Vert.x Scala: traditional handler-based and Future-based patterns.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2017-03-16-vertx-lang-scala.md#2025-04-19_snippet_3\n\nLANGUAGE: scala\nCODE:\n```\nvertx.deployVerticleFuture(\"com.foo.OtherVerticle\")\n  .onComplete{\n    case Success(s) => println(s\"Verticle id is: $s\")\n    case Failure(t) => t.printStackTrace()\n  }\n```\n\n----------------------------------------\n\nTITLE: MQTT Server Implementation\nDESCRIPTION: Demonstrates setting up an MQTT server with connection and message handling.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2017-02-09-vertx-3.4.0.beta1.md#2025-04-19_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nMqttServerOptions options = new MqttServerOptions()\n  .setPort(1883)\n  .setHost(\"0.0.0.0\");\n\nMqttServer server = MqttServer.create(vertx, options);\n\nserver.endpointHandler(endpoint -> {\n\n  System.out.println(\"connected client \" + endpoint.clientIdentifier());\n\n  endpoint.publishHandler(message -> {\n\n    System.out.println(\"Just received message on [\" + message.topicName() + \"] payload [\" +\n      message.payload() + \"] with QoS [\" +\n      message.qosLevel() + \"]\");\n  });\n\n  endpoint.accept(false);\n});\n\nserver.listen(ar -> {\n  if (ar.succeeded()) {\n    System.out.println(\"MQTT server started and listening on port \" + server.actualPort());\n  } else {\n    System.err.println(\"MQTT server error on start\" + ar.cause().getMessage());\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Resolving TXT Records in Vert.x\nDESCRIPTION: Shows how to resolve TXT records which often contain extra information for a domain. Returns an array of strings containing the TXT record values.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_js.md#2025-04-19_snippet_98\n\nLANGUAGE: javascript\nCODE:\n```\nclient.resolveTXT('vertx.io', function(err, records) {\n    if (err != null) {\n        console.log( \"Failed to resolve entry \" + err );\n    } else {\n        console.log( records.toString() );\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Using Shared Set in Vert.x with Groovy\nDESCRIPTION: Demonstrates how to use a shared set to share data between different verticles in the same Vert.x instance.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_groovy.md#2025-04-19_snippet_19\n\nLANGUAGE: Groovy\nCODE:\n```\ndef set = vertx.sharedData.getMap('demo.myset')\n\nset << \"some-value\"\n```\n\n----------------------------------------\n\nTITLE: Maven Antrun Plugin for Application Lifecycle\nDESCRIPTION: Configuration for maven-antrun-plugin to start and stop the Vert.x application during integration testing phases.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/intro-series/2015-08-03-post-04-unit-and-integration-tests.md#2025-04-19_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<!-- We use the maven-antrun-plugin to start the application before the integration tests\nand stop them afterward -->\n<plugin>\n  <artifactId>maven-antrun-plugin</artifactId>\n  <version>1.8</version>\n  <executions>\n    <execution>\n      <id>start-vertx-app</id>\n      <phase>pre-integration-test</phase>\n      <goals>\n        <goal>run</goal>\n      </goals>\n      <configuration>\n        <target>\n          <!--\n          Launch the application as in 'production' using the fatjar.\n          We pass the generated configuration, configuring the http port to the picked one\n          -->\n          <exec executable=\"${java.home}/bin/java\"\n                dir=\"${project.build.directory}\"\n                spawn=\"true\">\n            <arg value=\"-jar\"/>\n            <arg value=\"${project.artifactId}-${project.version}-fat.jar\"/>\n            <arg value=\"-conf\"/>\n            <arg value=\"${project.build.directory}/test-classes/my-it-config.json\"/>\n          </exec>\n        </target>\n      </configuration>\n    </execution>\n    <execution>\n      <id>stop-vertx-app</id>\n      <phase>post-integration-test</phase>\n      <goals>\n        <goal>run</goal>\n      </goals>\n      <configuration>\n        <!--\n          Kill the started process.\n          Finding the right process is a bit tricky. Windows command in in the windows profile (below)\n          -->\n        <target>\n          <exec executable=\"bash\"\n                dir=\"${project.build.directory}\"\n                spawn=\"false\">\n            <arg value=\"-c\"/>\n            <arg value=\"ps ax | grep -Ei '[\\-]DtestPort=${http.port}\\s+\\-jar\\s+${project.artifactId}' | awk 'NR==1{print $1}' | xargs kill -SIGTERM\"/>\n          </exec>\n        </target>\n      </configuration>\n    </execution>\n  </executions>\n</plugin>\n```\n\n----------------------------------------\n\nTITLE: RxJava Single with Web Client\nDESCRIPTION: Demonstrates using RxJava Singles with the Web Client for HTTP requests.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2017-02-09-vertx-3.4.0.beta1.md#2025-04-19_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nSingle<HttpResponse<Buffer>> single = client\n   .get(8080, \"myserver.mycompany.com\", \"/some-uri\")\n   .rxSend();\n\n// Send the request\nsingle.subscribe(response -> System.out.println(\"got response \" + response.statusCode());\n\n// Send the request again\nsingle.subscribe(response -> System.out.println(\"got response \" + response.statusCode());\n```\n\n----------------------------------------\n\nTITLE: Publishing Messages on Event Bus in Groovy\nDESCRIPTION: Demonstrates how to publish a message to all handlers registered on a specific address using the Vert.x event bus.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_groovy.md#2025-04-19_snippet_15\n\nLANGUAGE: Groovy\nCODE:\n```\neb.publish(\"test.address\", \"hello world\")\n```\n\n----------------------------------------\n\nTITLE: Basic Socket Data Echo in Vert.x (Naive Implementation)\nDESCRIPTION: A simple but problematic implementation that reads data from a NetSocket and writes it back directly without flow control, which could lead to memory issues if data is read faster than it can be written.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_js.md#2025-04-19_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nvar server = vertx.createNetServer();\n\nserver.connectHandler(function(sock) {\n\n    sock.dataHandler(function(buffer) {\n  \n        // Write data straight back on the socket\n              \n        sock.write(buffer); \n    });\n            \n}).listen(1234, 'localhost');\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring HTTP Client in Vert.x\nDESCRIPTION: Shows how to create and configure an HTTP client in Vert.x, including setting the port and host, enabling connection pooling, and setting the maximum pool size.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_js.md#2025-04-19_snippet_53\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar client = vertx.createHttpClient()\n    .port(8181)\n    .host(\"foo.com\")\n    .keepAlive(false)\n    .maxPoolSize(10);\n```\n\n----------------------------------------\n\nTITLE: Creating an Embedded HTTP Server in Groovy with Vert.x\nDESCRIPTION: This snippet shows how to create the same simple embedded web server using Vert.x in Groovy. It sets up an HTTP server that listens on port 8080 and serves static files from a 'webroot' directory, demonstrating Vert.x's polyglot capabilities.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/manual.md#2025-04-19_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\ndef vertx = Vertx.newVertx()\nvertx.createHttpServer().requestHandler { req ->\n    def file = req.uri == \"/\" ? \"index.html\" : req.uri\n    req.response.sendFile \"webroot/$file\"\n}.listen(8080)\n```\n\n----------------------------------------\n\nTITLE: Configuring an SSL Client with Trust Store in Ruby\nDESCRIPTION: Shows how to configure a Vert.x NetClient to only trust server certificates that are in its trust store by setting the trust store path.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_ruby.md#2025-04-19_snippet_39\n\nLANGUAGE: ruby\nCODE:\n```\nclient = Vertx::NetClient.new\nclient.ssl = true\nclient.trust_store_path = '/path/to/your/client/truststore/client-truststore.jks'\nclient.trust_store_password = 'password'\n```\n\n----------------------------------------\n\nTITLE: Configuring Logstash Filter for Log4j Format\nDESCRIPTION: Logstash filter configuration that uses grok to parse Log4j formatted logs. It extracts timestamp, log level, logger name, and message from each log entry, then uses the date filter to standardize timestamp formats.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2016-09-08-centralized-logging-for-vertx-applications-using-the-elk-stack.md#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nfilter {\n  grok {\n    break_on_match => false\n    match =>  [ \"message\", \"%{LOG4J}\"]\n  }\n  date{\n    match => [ \"timestamp_string\", \"ISO8601\"]\n    remove_field => [ \"timestamp_string\" ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Allow All Messages Through SockJS Bridge in Ruby\nDESCRIPTION: Example of configuring a SockJS bridge to allow all messages through by specifying empty match patterns for both inbound and outbound messages.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_ruby.md#2025-04-19_snippet_91\n\nLANGUAGE: ruby\nCODE:\n```\nsockJSServer.bridge({'prefix' => '/eventbus'}, [{}], [{}])\n```\n\n----------------------------------------\n\nTITLE: Configuring Route Matcher for HTTP GET Requests in Ruby\nDESCRIPTION: Sets up a Vert.x HTTP server with a RouteMatcher to handle GET requests for different animal types. Demonstrates how to define specific routes and their corresponding handlers.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_ruby.md#2025-04-19_snippet_77\n\nLANGUAGE: ruby\nCODE:\n```\nserver = Vertx::HttpServer.new\n\nroute_matcher = Vertx::RouteMatcher.new\n\nroute_matcher.get('/animals/dogs') do |req|\n    req.response.end('You requested dogs')\nend\n\nroute_matcher.get('/animals/cats') do |req|\n    req.response.end('You requested cats')\nend\n\nserver.request_handler(route_matcher).listen(8080, 'localhost')\n```\n\n----------------------------------------\n\nTITLE: Generating Vert.x Server Stub with Swagger-Codegen\nDESCRIPTION: A bash command to generate a Vert.x server stub using the Swagger-Codegen CLI with the vertx-swagger-codegen plugin.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2017-05-12-vertx-swagger-presentation.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\njava -cp /path/to/swagger-codegen-cli-2.2.2.jar:/path/to/vertx-swagger-codegen-1.0.0.jar io.swagger.codegen.SwaggerCodegen generate \\\n  -l java-vertx \\\n  -o path/to/destination/folder \\\n  -i path/to/swagger/definition \\\n  --group-id your.group.id \\\n  --artifact-id your.artifact.id\n```\n\n----------------------------------------\n\nTITLE: Serving Static Files in a JavaScript Vert.x Module\nDESCRIPTION: Example of serving a static HTML file from within a Vert.x module using the JavaScript API. This demonstrates the file access API that respects the module's directory structure.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/mods_manual.md#2025-04-19_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nreq.response.sendFile('web-root/index.html');\n```\n\n----------------------------------------\n\nTITLE: Implementing WebSocket Connection with EventBus in JavaScript\nDESCRIPTION: JavaScript function to establish a WebSocket connection using the Vert.x EventBus, register a handler for price updates, and update the UI accordingly.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2016-01-15-real-time-bidding-with-websockets-and-vertx.md#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction registerHandlerForUpdateCurrentPriceAndFeed() {\n    var eventBus = new EventBus('http://localhost:8080/eventbus');\n    eventBus.onopen = function () {\n        eventBus.registerHandler('auction.' + auction_id, function (error, message) {\n            document.getElementById('current_price').innerHTML = JSON.parse(message.body).price;\n            document.getElementById('feed').value += 'New offer: ' + JSON.parse(message.body).price + '\\n';\n        });\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Performing IPv4 (A Record) Lookup in Vert.x\nDESCRIPTION: Demonstrates how to specifically lookup A records (IPv4) for a domain name. The first result returned will be used, returning an IPv4 string address.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_js.md#2025-04-19_snippet_91\n\nLANGUAGE: javascript\nCODE:\n```\nclient.lookup4('vertx.io', function(err, result) {\n    if (err != null) {\n        console.log( \"Failed to resolve entry \" + err );\n    } else {\n        console.log( result );\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Checking File Existence with Vert.x FileSystem in JavaScript\nDESCRIPTION: Demonstrates how to check if a file exists using Vert.x file system API. The example shows a boolean result indicating whether the file exists.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_js.md#2025-04-19_snippet_79\n\nLANGUAGE: javascript\nCODE:\n```\nvertx.fileSystem.exists('some-file.txt', function(err, res) {\n    if (!err) {\n        log.info('File ' + (res ? 'exists' : 'does not exist'));\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Naive Socket Echo Server Without Flow Control\nDESCRIPTION: Basic implementation of a Vert.x Net server that echoes data back to the client without any flow control, which could lead to memory issues.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_js.md#2025-04-19_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nvar server = vertx.createNetServer();\n\nserver.connectHandler(function(sock) {\n\n    sock.dataHandler(function(buffer) {\n  \n        // Write data straight back on the socket\n              \n        sock.write(buffer); \n    });\n            \n}).listen(1234, 'localhost');\n```\n\n----------------------------------------\n\nTITLE: Writing Request Headers in Vert.x HTTP Client (Groovy)\nDESCRIPTION: Demonstrates how to write headers to an HTTP request using Vert.x HTTP client in Groovy. Shows different methods including direct assignment to headers property and using the putHeader method for a more fluent API.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_groovy.md#2025-04-19_snippet_55\n\nLANGUAGE: groovy\nCODE:\n```\ndef client = vertx.createHttpClient(host: \"foo.com\")\n\ndef request = client.post(\"/some-path/\") { resp ->\n    println \"Got a response: ${resp.statusCode}\"\n}\n\nrequest.headers[\"Some-Header\"] = \"Some-Value\"\nrequest.end()\n```\n\nLANGUAGE: groovy\nCODE:\n```\nrequest.putHeader(\"Some-Header\", \"Some-Value\").putHeader(\"Some-Other\", \"Blah\")\n```\n\nLANGUAGE: groovy\nCODE:\n```\nvertx.createHttpClient(host: \"foo.com\").post(\"/some-path/\") { resp ->\n    println \"Got a response: ${resp.statusCode}\"\n}.putHeader(\"Some-Header\", \"Some-Value\").end()\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Server Accept Backlog in Java\nDESCRIPTION: Sets the accept backlog for an HTTP server to handle a large number of incoming connections. This helps prevent connection refusals when many clients are connecting simultaneously.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/manual.md#2025-04-19_snippet_18\n\nLANGUAGE: java\nCODE:\n```\nHttpServer server = vertx.createHttpServer();\nserver.setAcceptBacklog(10000);\n```\n\n----------------------------------------\n\nTITLE: Appending Data to Buffers in Vert.x JavaScript\nDESCRIPTION: Demonstrates various methods for appending data to buffers including numbers, strings and other buffers.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_js.md#2025-04-19_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nvar buff = new vertx.Buffer();\n\nbuff.appendInt(123).appendString(\"hello\\n\");\n\nsocket.write(buff);\n```\n\n----------------------------------------\n\nTITLE: Configuring SameSite Cookies in Vert.x Web\nDESCRIPTION: Demonstrates how to configure SameSite cookie policy for HTTP Server Cookies to protect against CSRF attacks.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/releases/2020-04-02-vertx-3.9.0-release.md#2025-04-19_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nSessionHandler.create(store)\n  .setCookieSameSite(CookieSameSite.STRICT);\n```\n\n----------------------------------------\n\nTITLE: Maven Failsafe Plugin Configuration\nDESCRIPTION: Configuration for maven-failsafe-plugin to execute integration tests with the correct HTTP port system property.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/intro-series/2015-08-03-post-04-unit-and-integration-tests.md#2025-04-19_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<plugin>\n  <groupId>org.apache.maven.plugins</groupId>\n  <artifactId>maven-failsafe-plugin</artifactId>\n  <version>2.18.1</version>\n  <executions>\n    <execution>\n      <goals>\n        <goal>integration-test</goal>\n        <goal>verify</goal>\n      </goals>\n      <configuration>\n        <systemProperties>\n          <http.port>${http.port}</http.port>\n        </systemProperties>\n      </configuration>\n    </execution>\n  </executions>\n</plugin>\n```\n\n----------------------------------------\n\nTITLE: Writing String to HTTP Response in Ruby with Vert.x\nDESCRIPTION: Shows how to write a UTF-8 encoded string to an HTTP response. The string will be automatically encoded using UTF-8.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_ruby.md#2025-04-19_snippet_49\n\nLANGUAGE: ruby\nCODE:\n```\nrequest.response.write_str('hello')\n```\n\n----------------------------------------\n\nTITLE: Writing String Data to HTTP Client Request in Ruby\nDESCRIPTION: Shows different ways to write string data to an HTTP client request, including UTF-8 and custom encoding options.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_ruby.md#2025-04-19_snippet_71\n\nLANGUAGE: ruby\nCODE:\n```\nrequest.write_str('hello')\n\nrequest.write_str('hello', 'UTF-16')\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Client Host and Port in Vert.x with Ruby\nDESCRIPTION: Example showing how to configure the target host and port for a Vert.x HTTP client. This is required for connecting to specific servers.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_ruby.md#2025-04-19_snippet_60\n\nLANGUAGE: ruby\nCODE:\n```\nclient = Vertx::HttpClient.new\nclient.port = 8181\nclient.host = 'foo.com'\n```\n\n----------------------------------------\n\nTITLE: Implementing WebSocket Server in Vert.x\nDESCRIPTION: Sets up a Vert.x HTTP server to handle WebSocket connections. Demonstrates how to create a WebSocket handler and echo incoming messages back to the client.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_ruby.md#2025-04-19_snippet_80\n\nLANGUAGE: ruby\nCODE:\n```\nserver = Vertx::HttpServer.new\n\nserver.websocket_handler do |websocket|\n\n  p = new Pump(websocket, websocket)\n  p.start\n\nend.listen(8080, 'localhost')\n```\n\n----------------------------------------\n\nTITLE: Custom Error Converter for Response Predicates in Vert.x Web Client (Java)\nDESCRIPTION: This snippet demonstrates how to create a custom error converter for response predicates in Vert.x Web Client, allowing for custom exception handling.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2018-12-10-http-response-validation-web-client.md#2025-04-19_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nResponsePredicate predicate = ResponsePredicate.create(ResponsePredicate.SC_SUCCESS, result -> {\n  return new MyCustomException(result.message());\n});\n```\n\n----------------------------------------\n\nTITLE: Deploying a Verticle Programmatically in Vert.x\nDESCRIPTION: This code demonstrates how to deploy a Verticle programmatically within Vert.x. It shows the basic method call for deploying a single instance of a Verticle.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_ruby.md#2025-04-19_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nVertx.deploy_verticle(main)\n```\n\n----------------------------------------\n\nTITLE: Implementing CSRF Protection in Vert.x\nDESCRIPTION: Configuration of CSRF protection handler for securing form submissions, particularly for logout functionality.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2020-03-09-easy-sso-for-vertx-with-keycloak.md#2025-04-19_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nString csrfSecret = \"zwiebelfische\";\nCSRFHandler csrfHandler = CSRFHandler.create(csrfSecret);\nrouter.route().handler(ctx -> {\n            ctx.request().setExpectMultipart(true);\n            ctx.request().endHandler(v -> csrfHandler.handle(ctx));\n        }\n);\n```\n\n----------------------------------------\n\nTITLE: Handling HTTP 100-Continue with Vertx Client in Ruby\nDESCRIPTION: Demonstrates how to implement the HTTP 100-Continue mechanism. The client sets the Expect header and uses a continue_handler to send the request body only after receiving the interim 100 response from the server.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_ruby.md#2025-04-19_snippet_77\n\nLANGUAGE: ruby\nCODE:\n```\nclient = Vertx::HttpClient.new\nclient.host = 'foo.com'  \n\nrequest = client.put('/some-path') do |resp|\n\n  puts \"Got a response: #{resp.status_code}\"     \n\nend\n\nrequest.put_header('Expect', '100-Continue')\nrequest.chunked = true\n\nrequest.continue_handler do\n    # OK to send rest of body\n    \n    request.write_str('Some data').end\nend\n\nrequest.send_head\n```\n\n----------------------------------------\n\nTITLE: Building and Running Vert.x JWT Authorization Example\nDESCRIPTION: Commands to build the Vert.x application with Maven and run the resulting JAR file. This sets up the JWT-protected Vert.x application that interacts with Keycloak.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2020-10-01-jwt-auth-with-keycloak.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd jwt-service-vertx\nmvn clean package\njava -jar target/*.jar\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Connection Pool Size in Vert.x Ruby HTTP Client\nDESCRIPTION: Shows how to set the maximum number of connections that an HTTP client will pool. The default value is 1.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_ruby.md#2025-04-19_snippet_65\n\nLANGUAGE: ruby\nCODE:\n```\nclient = Vertx::HttpClient.new    \nclient.max_pool_size = 10\n```\n\n----------------------------------------\n\nTITLE: Configuring Filebeat to Ship Vert.x Logs to Logstash\nDESCRIPTION: YAML configuration for Filebeat that defines how to collect and forward Vert.x application logs to Logstash. It specifies log file location, multiline pattern for stack traces, and secure TLS connection settings for the Logstash endpoint.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2016-09-08-centralized-logging-for-vertx-applications-using-the-elk-stack.md#2025-04-19_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nfilebeat:\n  prospectors:\n    -\n      document_type: trader_dashboard\n      paths:\n        - /var/log/vertx.log\n      multiline:\n        pattern: \"^[0-9]+\"\n        negate: true\n        match: after\noutput:\n  logstash:\n    enabled: true\n    hosts:\n      - elk:5044\n    timeout: 15\n    tls:\n      insecure: false\n      certificate_authoritites:\n        - /etc/pki/tls/certs/logstash-beats.crt\n```\n\n----------------------------------------\n\nTITLE: Adding Vert.x Web Maven Dependency\nDESCRIPTION: Maven dependency configuration to add Vert.x Web framework to the project.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/intro-series/2015-07-27-post-03-some-rest-with-vertx.md#2025-04-19_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>io.vertx</groupId>\n  <artifactId>vertx-web</artifactId>\n  <version>3.0.0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Reading a Symbolic Link with Vert.x FileSystem in JavaScript\nDESCRIPTION: Demonstrates how to read the target of a symbolic link using Vert.x file system API. The example shows the returned path of the file that the link points to.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_js.md#2025-04-19_snippet_75\n\nLANGUAGE: javascript\nCODE:\n```\nvertx.fileSystem.readSymLink('somelink', function(err, res) {\n    if (!err) {\n        log.info('Link points at ' + res);\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Resolving All A Records (IPv4) in Vert.x\nDESCRIPTION: Demonstrates how to resolve all A records (IPv4) for a domain name, similar to using 'dig' on Unix systems. Returns an array of IPv4 address strings.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_js.md#2025-04-19_snippet_93\n\nLANGUAGE: javascript\nCODE:\n```\nclient.resolveA('vertx.io', function(err, records) {\n    if (err != null) {\n        console.log( \"Failed to resolve entry \" + err );\n    } else {\n        console.log( records.toString() );\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: NgRx Effects for Event Bus Integration\nDESCRIPTION: NgRx Effects implementation that handles remote action publishing and connection management. Filters actions to publish only RemoteAction instances and manages event bus connection on user login.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2017-04-26-vertx-realtime-angular-ngrx.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n@Injectable()\nexport class AppEventBusEffects {\n\n    constructor(private actions$: Actions, private appEventBusService: AppEventBusService) {}\n    // Listen to all actions and publish remote actions to account event bus\n    @Effect({dispatch: false}) remoteAction$ = this.actions$\n        .filter(action => action instanceof RemoteAction && action.publishedByUser == undefined)\n        .do((action: RemoteAction) => {\n            this.appEventBusService.publishAction(action);\n        });\n\n    @Effect({dispatch: false}) login$ = this.actions$\n        .ofType(UserActionTypes.LOGIN)\n        .do(() => {\n            this.appEventBusService.connect();\n        });\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Cassandra Entity Class\nDESCRIPTION: Example of defining a Cassandra entity class with mapping annotations.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/releases/2019-04-02-vertx-3.7.0-release.md#2025-04-19_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n@Table(keyspace = \"test\", name = \"users\")\nclass User {\n  @PartitionKey String name;\n  // ... other fields and methods \n}\n```\n\n----------------------------------------\n\nTITLE: Using RxJava2 Completable and Maybe types with Vert.x\nDESCRIPTION: Demonstrates how to use RxJava2 Completable and Maybe types with Vert.x APIs. It shows examples of handling asynchronous operations that may or may not return a result.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/releases/2018-08-10-vertx-3.5.0.Beta1-release.md#2025-04-19_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n// expose Handler<AsyncResult<Void>>\nCompletable completable = server.rxClose();\n\ncompletable.subscribe(() -> System.out.println(\"closed\"));\n\n// expose Handler<AsyncResult<String>> where the result can be null\nMaybe<String> ipAddress = dnsClient.rxLookup(\"www.google.com\");\nipAddress.subscribe(\n  value -> System.out.println(\"resolved to \" + value),\n  err -> err.printStackTrace(),\n  () -> System.out.println(\"does not resolve\"));\n```\n\n----------------------------------------\n\nTITLE: Running Integration Tests with Maven\nDESCRIPTION: Command to execute both unit and integration tests with Maven. The 'verify' phase will run through the entire build lifecycle including integration tests.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/intro-series/2015-08-03-post-04-unit-and-integration-tests.md#2025-04-19_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean verify\n```\n\n----------------------------------------\n\nTITLE: Running Ruby Worker Verticle\nDESCRIPTION: Example of running 20 instances of a Ruby worker verticle.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/manual.md#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nvertx run order_worker.rb -instances 20 -worker\n```\n\n----------------------------------------\n\nTITLE: Iterating MultiMap with Rxified API in Java\nDESCRIPTION: Shows how to iterate through a MultiMap using the new Rxified API, which now supports Iterable for improved usability.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/releases/2019-05-27-vertx-3.7.1-release.md#2025-04-19_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nio.vertx.reactivex.core.MultiMap headers = request.headers();\nfor (Entry<String, String> header : headers) {\n  // inspect header  \n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Server Port in Vert.x (Java)\nDESCRIPTION: This snippet shows how to modify a Vert.x verticle to read the HTTP server port from configuration, with a default fallback to 8080.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/intro-series/2015-07-20-post-02-vertx-application-configuration.md#2025-04-19_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic void start(Future<Void> fut) {\n  vertx\n      .createHttpServer()\n      .requestHandler(r -> {\n        r.response().end(\"<h1>Hello from my first \" +\n            \"Vert.x 3 application</h1>\");\n      })\n      .listen(\n          // Retrieve the port from the configuration,\n          // default to 8080.\n          config().getInteger(\"http.port\", 8080),\n          result -> {\n            if (result.succeeded()) {\n              fut.complete();\n            } else {\n              fut.fail(result.cause());\n            }\n          }\n      );\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Row to JSON Conversion\nDESCRIPTION: Demonstrates the new functionality to easily convert SQL query results to JSON objects, useful for applications that transfer data directly to clients.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/releases/2020-09-25-vertx-4-beta3-release.md#2025-04-19_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nclient\n  .preparedQuery(\"SELECT * FROM USERS WHERE ID=$1\")\n  .execute(Tuple.of(id))\n  .onSuccess(row -> {\n    if (row.size() == 1) {\n      JsonObject json = row.iterator().next().toJson();\n    }\n  });\n```\n\n----------------------------------------\n\nTITLE: Connecting to a TCP Server Using Telnet\nDESCRIPTION: Command to connect to the running TCP echo server using telnet to test its functionality.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_groovy.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntelnet localhost 1234\n```\n\n----------------------------------------\n\nTITLE: Handling Unmatched Routes in Vert.x RouteMatcher (Groovy)\nDESCRIPTION: Shows how to set up a handler for requests that don't match any defined routes using the noMatch method. Without this handler, unmatched requests would receive a 404 response by default.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_groovy.md#2025-04-19_snippet_62\n\nLANGUAGE: groovy\nCODE:\n```\nrouteMatcher.noMatch{ req ->\n    req.response.end \"Nothing matched\"\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing SockJS Client in JavaScript\nDESCRIPTION: Basic example of setting up a SockJS client connection with event handlers for open, message, and close events. The API is similar to the WebSockets API.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_groovy.md#2025-04-19_snippet_69\n\nLANGUAGE: javascript\nCODE:\n```\n<script>\n   var sock = new SockJS('http://mydomain.com/my_prefix');\n\n   sock.onopen = function() {\n       console.log('open');\n   };\n\n   sock.onmessage = function(e) {\n       console.log('message', e.data);\n   };\n\n   sock.onclose = function() {\n       console.log('close');\n   };\n</script>\n```\n\n----------------------------------------\n\nTITLE: Random Access File Reading in Vertx\nDESCRIPTION: Demonstrates random access reading from a file using AsyncFile.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_ruby.md#2025-04-19_snippet_103\n\nLANGUAGE: ruby\nCODE:\n```\nVertx::FileSystem.open('some-file.dat') do |err, async_file|\n    if err\n        puts \"Failed to open file #{err}\"\n    else \n        buff = Vertx::Buffer.create(1000)\n        (1..10).each do |i|\n            async_file.read(buff, i * 100, i * 100, 100) do |err, res|\n                if err\n                    puts \"Failed to read #{err}\"\n                else\n                    puts 'Read ok'\n                end\n            end\n        end\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Getting File System Properties with Vert.x FileSystem in JavaScript\nDESCRIPTION: Shows how to retrieve file system properties using Vert.x file system API. The example demonstrates accessing information about total, unallocated, and usable space.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_js.md#2025-04-19_snippet_80\n\nLANGUAGE: javascript\nCODE:\n```\nvertx.fileSystem.fsProps('mydir', function(err, res) {\n    if (!err) {\n        log.info('total space: ' + res.totalSpace);\n        // etc\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling SSL in Vert.x Web Server Configuration (Python)\nDESCRIPTION: Modifies the Vert.x web server configuration in Python to enable SSL for secure client-server communication.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/python_web_tutorial.md#2025-04-19_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nweb_server_conf = {\n      'port' : 8080,\n      'host' : 'localhost',\n      'ssl' : True,\n      'bridge' : True,\n      ...\n```\n\n----------------------------------------\n\nTITLE: Preparing Feed Fetching Queries\nDESCRIPTION: Method to prepare database queries for storing channel and article information\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2018-08-20-the-first-step-rss-reader.md#2025-04-19_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nprivate Future<Void> prepareNecessaryQueries() {\n        Future<PreparedStatement> insertChannelInfoPrepFuture = Future.future();\n        cassandraClient.prepare(\"INSERT INTO channel_info_by_rss_link ( rss_link , last_fetch_time, description , site_link , title ) VALUES (?, ?, ?, ?, ?);\", insertChannelInfoPrepFuture);\n\n        Future<PreparedStatement> insertArticleInfoPrepFuture = Future.future();\n        cassandraClient.prepare(\"INSERT INTO articles_by_rss_link ( rss_link , pubdate , article_link , description , title ) VALUES ( ?, ?, ?, ?, ?);\", insertArticleInfoPrepFuture);\n\n        return CompositeFuture.all(\n                insertChannelInfoPrepFuture.compose(preparedStatement -> {\n                    insertChannelInfo = preparedStatement;\n                    return Future.succeededFuture();\n                }), insertArticleInfoPrepFuture.compose(preparedStatement -> {\n                    insertArticleInfo = preparedStatement;\n                    return Future.succeededFuture();\n                })\n        ).mapEmpty();\n    }\n```\n\n----------------------------------------\n\nTITLE: Vert.x Web Attachment Response\nDESCRIPTION: Shows how to serve file attachments in Vert.x Web that trigger browser's native handling.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/releases/2019-09-19-vertx-4-milestone3-release.md#2025-04-19_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nroutingContext\n  .attachment(\"weekly-report.pdf\")\n  .end(pdfBuffer);\n```\n\n----------------------------------------\n\nTITLE: Conditionally Accepting WebSocket Connections in Vert.x with Ruby\nDESCRIPTION: Demonstrates how to check WebSocket connection paths and selectively accept or reject connections based on the path.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_ruby.md#2025-04-19_snippet_85\n\nLANGUAGE: ruby\nCODE:\n```\nserver = Vertx::HttpServer.new\n\nserver.websocket_handler do |websocket|\n\n  if websocket.path == '/services/echo'\n    Vertx::Pump.new(websocket, websocket).start\n  else\n    websocket.reject\n  end\nend.listen(8080, 'localhost')\n```\n\n----------------------------------------\n\nTITLE: Reading Directory Contents with Filter in Vert.x FileSystem\nDESCRIPTION: Demonstrates how to list directory contents with a regex filter using Vert.x file system API. The example shows filtering for only text files with the .txt extension.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_js.md#2025-04-19_snippet_77\n\nLANGUAGE: javascript\nCODE:\n```\nvertx.fileSystem.readDir('mydirectory', '.*\\.txt', function(err, res) {\n  if (!err) {\n    log.info('Directory contains these .txt files');\n    for (var i = 0; i < res.length; i++) {\n      log.info(res[i]);  \n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Ending HTTP Response in Vert.x Ruby\nDESCRIPTION: Demonstrates how to end an HTTP response with no arguments. This method should be called once you have finished with the HTTP response.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_ruby.md#2025-04-19_snippet_52\n\nLANGUAGE: ruby\nCODE:\n```\nrequest.response.end\n```\n\n----------------------------------------\n\nTITLE: Adding Cassandra Driver Mapping Dependency\nDESCRIPTION: Maven dependency configuration for enabling Cassandra object mapping support.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/releases/2019-04-02-vertx-3.7.0-release.md#2025-04-19_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>com.datastax.cassandra</groupId>\n  <artifactId>cassandra-driver-mapping</artifactId>\n  <version>3.7.1</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Running Integration Tests\nDESCRIPTION: Maven command to execute integration tests for the Vert.x module.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/maven_dev.md#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmvn integration-test\n```\n\n----------------------------------------\n\nTITLE: Appending Data to Vert.x Buffer\nDESCRIPTION: Demonstrates how to append various data types including integers, floats, strings and other buffers to a Vert.x buffer using chained append operations.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_js.md#2025-04-19_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nvar buff = new vertx.Buffer();\n\nbuff.appendInt(123).appendString(\"hello\").appendChar('\\n');\n\nsocket.writeBuffer(buff);\n```\n\n----------------------------------------\n\nTITLE: Sending Messages with Reply Handler\nDESCRIPTION: Shows how to send a message on the event bus with a reply handler to receive responses.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_js.md#2025-04-19_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\neb.send('test.address', 'This is a message', function(reply) {\n    log.info('I received a reply ' + reply);\n});\n```\n\n----------------------------------------\n\nTITLE: Opening Asynchronous File in Vertx\nDESCRIPTION: Demonstrates opening a file asynchronously for reading/writing operations.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_ruby.md#2025-04-19_snippet_101\n\nLANGUAGE: ruby\nCODE:\n```\nVertx::FileSystem.open('some-file.dat') do |err, async_file|\n    if err\n        puts \"Failed to open file #{err}\"\n    else\n        puts 'File opened ok'\n        async_file.close\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Using Regular Expressions for Route Matching in Vert.x\nDESCRIPTION: Shows how to use regular expressions with RouteMatcher to extract complex parameters from the request path. Captures unnamed groups and assigns them to param0, param1, etc.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_ruby.md#2025-04-19_snippet_79\n\nLANGUAGE: ruby\nCODE:\n```\nserver = Vertx::HttpServer.new\n\nroute_matcher = Vertx::RouteMatcher.new\n\nroute_matcher.all_re(\"\\/([^\\/]+)\\/([^\\/]+)\") do |req|\n    first = req.params['param0']\n    second = req.params['param1']\n    req.response.end(\"first is #{first} second is #{second}\")\nend\n\nserver.request_handler(route_matcher).listen(8080, 'localhost')\n```\n\n----------------------------------------\n\nTITLE: Implementing Auction Price Change Handler\nDESCRIPTION: Handler implementation for processing auction price changes via PATCH requests. Extracts auction ID and price from the request, updates the repository, and publishes updates via the event bus.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2016-01-15-real-time-bidding-with-websockets-and-vertx.md#2025-04-19_snippet_9\n\nLANGUAGE: java\nCODE:\n```\npublic void handleChangeAuctionPrice(RoutingContext context) {\n    String auctionId = context.request().getParam(\"id\");\n    Auction auction = new Auction(\n        auctionId,\n        new BigDecimal(context.getBodyAsJson().getString(\"price\"))\n    );\n\n    this.repository.save(auction);\n    context.vertx().eventBus().publish(\"auction.\" + auctionId, context.getBodyAsString());\n\n    context.response()\n        .setStatusCode(200)\n        .end();\n}\n```\n\n----------------------------------------\n\nTITLE: Handling TCP Client Exceptions in Vert.x\nDESCRIPTION: Shows how to set up exception handling for a TCP client to catch connection failures.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_groovy.md#2025-04-19_snippet_32\n\nLANGUAGE: groovy\nCODE:\n```\ndef client = vertx.createNetClient()\n\nclient.exceptionHandler { ex -> println \"Failed to connect $ex\" }\n\nclient.connect(4242, \"host-that-doesnt-exist\") { socket -> puts \"This won't get called\" }\n```\n\n----------------------------------------\n\nTITLE: Undeploying a Verticle Programmatically\nDESCRIPTION: Manually undeploying a verticle by using the deployment ID that was returned when the verticle was deployed.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_groovy.md#2025-04-19_snippet_12\n\nLANGUAGE: groovy\nCODE:\n```\ndef deploymentID = container.deployVerticle(main)\n\ncontainer.undeployVerticle(deploymentID)\n```\n\n----------------------------------------\n\nTITLE: Template Engine Usage in Java\nDESCRIPTION: Example of using template engines outside of Vert.x Web context, such as for email content generation.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/releases/2018-12-03-vertx-3.6.0-release.md#2025-04-19_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nTemplateEngine template = ...\n\ntemplate.render(new JsonObject(), \"my-template.txt, res -> {\n   // Send result with the Vert.x Mail client\n});\n```\n\n----------------------------------------\n\nTITLE: Cassandra Query for RSS Links\nDESCRIPTION: CQL query to fetch RSS links associated with a specific user ID\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2018-09-05-the-second-step-rss-reader.md#2025-04-19_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nSELECT rss_link FROM rss_by_user WHERE login = GIVEN_USER_ID ;\n```\n\n----------------------------------------\n\nTITLE: Loading Static Data with Module Deployment\nDESCRIPTION: Script showing how to load static data after MongoDB persistor module deployment is complete.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/js_web_tutorial.md#2025-04-19_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvertx.deployModule('vertx.mongo-persistor-v1.2', null, 1, function() {\n  load('static_data.js');\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Jenkins Job DSL for Vert.x Build Pipeline\nDESCRIPTION: Jenkins Job DSL script that defines an automated build pipeline for a Vert.x application. The job polls a Git repository, builds the project using Maven to create a fat jar, and triggers an Ansible playbook for deployment. Includes configuration for JDK8, Maven 3.3.9, and Ansible 2.0 with colored output support.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2016-09-28-vertx-featuring-continuous-delivery-with-jenkins-and-ansible.md#2025-04-19_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\njob('vertx-microservices-workshop-job') {\n    jdk('JDK8')\n    scm {\n        git('git://github.com/ricardohmon/vertx-microservices-workshop.git')\n    }\n    triggers {\n        scm('*/15 * * * *')\n    }\n    steps {\n\n      def mvnInst = 'M3.3.9'  \n      maven {  \n        goals('package')  \n        mavenInstallation(mvnInst)  \n      }  \n      ansiblePlaybook('/ansible/playbook.yml') {  \n        inventoryPath('/ansible/hosts')  \n        ansibleName('Ansible2.0')  \n        credentialsId('vagrant-key')  \n        colorizedOutput(true)  \n      }  \n\n    }  \n}\n```\n\n----------------------------------------\n\nTITLE: Basic Socket Data Handler Implementation in Ruby\nDESCRIPTION: Simple implementation of a socket data handler that writes data back to the socket without flow control.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_ruby.md#2025-04-19_snippet_41\n\nLANGUAGE: ruby\nCODE:\n```\nserver = Vertx::NetServer.new\n\nserver.connect_handler do |sock|\n    sock.data_handler do |buffer|\n        # Write the data straight back\n        sock.write(buffer)\n    end\n   \nend.listen(1234, 'localhost')\n```\n\n----------------------------------------\n\nTITLE: One-shot Timer Implementation in Vert.x\nDESCRIPTION: Shows how to create a one-shot timer that executes after a specified delay\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_groovy.md#2025-04-19_snippet_24\n\nLANGUAGE: groovy\nCODE:\n```\nvertx.setTimer(1000) { timerID -> println \"And one second later this is displayed\" }\n\nprintln \"First this is printed\"\n```\n\n----------------------------------------\n\nTITLE: Reading HTTP Response Body Data in Vert.x Ruby\nDESCRIPTION: Shows how to read response body data using data handlers and accumulate complete response body.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_ruby.md#2025-04-19_snippet_74\n\nLANGUAGE: ruby\nCODE:\n```\nclient = Vertx::HttpClient.new\nclient.host = 'foo.com'\n\nclient.get_now('/some-path') do |resp|\n  resp.data_handler { |buffer| puts \"I received #{buffer.length} bytes\" }     \nend\n```\n\n----------------------------------------\n\nTITLE: Accumulating Complete HTTP Request Body in Vert.x\nDESCRIPTION: Creates an HTTP server that accumulates the entire request body in a buffer. It uses the dataHandler to append each chunk to a buffer and the endHandler to process the complete body when the request is finished.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_js.md#2025-04-19_snippet_45\n\nLANGUAGE: javascript\nCODE:\n```\nvar server = vertx.createHttpServer();\n\nserver.requestHandler(function(request) {\n\n  // Create a buffer to hold the body\n  var body = new vertx.Buffer();  \n\n  request.dataHandler(function(buffer) {\n    // Append the chunk to the buffer\n    body.appendBuffer(buffer);\n  });\n  \n  request.endHandler(function() {\n    // The entire body has now been received\n    console.log('The total body received was ' + body.length() + ' bytes');\n  });\n  \n}).listen(8080, 'localhost');\n```\n\n----------------------------------------\n\nTITLE: Setting HTTP Response Trailers Using Hash in Vert.x Ruby\nDESCRIPTION: Demonstrates how to add HTTP response trailers (headers in the final chunk) when using chunked encoding by setting values in the trailers hash.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_ruby.md#2025-04-19_snippet_58\n\nLANGUAGE: ruby\nCODE:\n```\nrequest.response.trailers['Some-header'] = 'foo'\n```\n\n----------------------------------------\n\nTITLE: SSL Support Implementation\nDESCRIPTION: SSL configuration and support classes implementing trust store and key store management for secure connections.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/api/epydoc/api-objects.txt#2025-04-19_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Configuring Static Resource Handler\nDESCRIPTION: Extended Vert.x Web configuration that adds static resource handling for serving files from the assets directory.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/intro-series/2015-07-27-post-03-some-rest-with-vertx.md#2025-04-19_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic void start(Future<Void> fut) {\n Router router = Router.router(vertx);\n router.route(\"/\").handler(routingContext -> {\n   HttpServerResponse response = routingContext.response();\n   response\n       .putHeader(\"content-type\", \"text/html\")\n       .end(\"<h1>Hello from my first Vert.x 3 application</h1>\");\n });\n\n // Serve static resources from the /assets directory\n router.route(\"/assets/*\").handler(StaticHandler.create(\"assets\"));\n\n vertx\n     .createHttpServer()\n     .requestHandler(router::accept)\n     .listen(\n         config().getInteger(\"http.port\", 8080),\n         result -> {\n           if (result.succeeded()) {\n             fut.complete();\n           } else {\n             fut.fail(result.cause());\n           }\n         }\n     );\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Multiple Instances of a TCP Server in Vert.x\nDESCRIPTION: Shows how to deploy multiple instances of a TCP server verticle to utilize all CPU cores. The command runs 20 instances of the echo_server.rb script on a local Vert.x instance.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_ruby.md#2025-04-19_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\nvertx run echo_server.rb -instances 20\n```\n\n----------------------------------------\n\nTITLE: Using Cassandra Cursor API\nDESCRIPTION: Example of using the Cassandra cursor API to fetch multiple rows at once.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/releases/2019-04-02-vertx-3.7.0-release.md#2025-04-19_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nresultSet.several(30, ar -> {\n  if (ar.succeeded()) {\n    List<Row> result = ar.result();\n  } else {\n    System.out.println(\"Failure: \" + ar.cause().getMessage());\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring JDBC Test Settings in Vert.x\nDESCRIPTION: Test configuration setup for JDBC connection using HSQLDB in-memory database for testing purposes.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/intro-series/2015-10-19-post-05-using-the-asynchronous-sql-client.md#2025-04-19_snippet_8\n\nLANGUAGE: java\nCODE:\n```\n    DeploymentOptions options = new DeploymentOptions()\n        .setConfig(new JsonObject()\n            .put(\"http.port\", port)\n            .put(\"url\", \"jdbc:hsqldb:mem:test?shutdown=true\")\n            .put(\"driver_class\", \"org.hsqldb.jdbcDriver\")\n        );\n```\n\n----------------------------------------\n\nTITLE: Configuring SSL NetClient with Trust All Certificates in Groovy\nDESCRIPTION: Creates a NetClient configured to use SSL with trustAll set to true, which means it will trust all server certificates. This configuration is potentially vulnerable to man-in-the-middle attacks and should be used with caution.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_groovy.md#2025-04-19_snippet_35\n\nLANGUAGE: groovy\nCODE:\n```\ndef client = vertx.createNetClient(SSL: true, trustAll: true)\n```\n\n----------------------------------------\n\nTITLE: Tuning TCP Buffer Size for HTTP Server in Java\nDESCRIPTION: Adjusts the send and receive buffer sizes for TCP connections on an HTTP server. This optimization helps support a large number of connections with limited RAM by reducing the memory allocated per connection.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/manual.md#2025-04-19_snippet_19\n\nLANGUAGE: java\nCODE:\n```\nHttpServer server = vertx.createHttpServer();\nserver.setSendBufferSize(4 * 1024);\nserver.setReceiveBufferSize(4 * 1024);\n```\n\n----------------------------------------\n\nTITLE: Maven Dependency for JMX Backend\nDESCRIPTION: XML snippet showing the additional Maven dependency required for using JMX as the metrics backend.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2018-04-09-vertx-micrometer-metrics.md#2025-04-19_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>io.micrometer</groupId>\n  <artifactId>micrometer-registry-jmx</artifactId>\n  <version>1.0.0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Resolving MX Records for Mail Servers in Vert.x\nDESCRIPTION: Shows how to resolve MX records which define mail servers for a domain. Returns an array of MxRecord objects sorted by priority, with each object containing name and priority properties.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_js.md#2025-04-19_snippet_96\n\nLANGUAGE: javascript\nCODE:\n```\nclient.resolveMX('vertx.io', function(err, records) {\n    if (err != null) {\n        console.log( \"Failed to resolve entry \" + err );\n    } else {\n        for (i=0; i<records.length; i++) {\n          var record = records[i];\n          console.log( record.name + \" \" + record.priority );\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Complete Request Body Processing\nDESCRIPTION: Shows how to accumulate and process the complete request body using a Buffer and endHandler.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_groovy.md#2025-04-19_snippet_48\n\nLANGUAGE: groovy\nCODE:\n```\ndef server = vertx.createHttpServer()\n\nserver.requestHandler{ request ->\n\n    def body = new Buffer(0)\n\n    request.dataHandler { buffer -> body << buffer }\n\n    request.endHandler { println \"I received ${body.length()} bytes\" }\n\n}.listen(8080, \"localhost\")\n```\n\n----------------------------------------\n\nTITLE: Running Packaged Vert.x Application\nDESCRIPTION: Java command to run the packaged Vert.x application from the generated fat jar.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/f8-vertx-maven-plugin-series/2016-12-07-post-01-getting-started-with-new-fabric8-vertx-maven-plugin.md#2025-04-19_snippet_5\n\nLANGUAGE: Bash\nCODE:\n```\njava -jar ${project.build.directory}/${project.finalName}.jar\n```\n\n----------------------------------------\n\nTITLE: Logging from a Vert.x Verticle\nDESCRIPTION: This snippet demonstrates how to obtain a logger instance and use it for logging within a verticle. The logger provides various logging levels such as info, debug, warn, etc.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_ruby.md#2025-04-19_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nlogger = Vertx.logger\n\nlogger.info 'I am logging something'\n```\n\n----------------------------------------\n\nTITLE: NetServer with WriteQueue Fullness Check in Groovy\nDESCRIPTION: Creates a NetServer that checks if the write queue is full before writing data back to the socket. This prevents memory exhaustion but would still lose data if the write queue gets full.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_groovy.md#2025-04-19_snippet_39\n\nLANGUAGE: groovy\nCODE:\n```\ndef server = vertx.createNetServer()\n\nserver.connectHandler { sock ->\n    sock.dataHandler { buffer ->\n        if (!sock.writeQueueFull) {\n            sock.write(buffer)\n        }\n    }\n}.listen(1234, \"localhost\")\n```\n\n----------------------------------------\n\nTITLE: Creating Periodic Timers in Vert.x Ruby\nDESCRIPTION: Demonstrates how to create a periodic timer that executes a block of code at regular intervals.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_ruby.md#2025-04-19_snippet_21\n\nLANGUAGE: Ruby\nCODE:\n```\ntimer_id = Vertx.set_timer(1000) do |timer_id|\n    puts 'And every second this is printed'\nend\n\nputs 'First this is printed'\n```\n\n----------------------------------------\n\nTITLE: Future-based HTTP Client Usage in Vert.x 4\nDESCRIPTION: Shows the evolution of future-based HTTP client usage, comparing the old and new approaches for handling HTTP requests and responses asynchronously.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/releases/2020-09-25-vertx-4-beta3-release.md#2025-04-19_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nFuture<HttpClientResponse> get = client.get(\"some-uri\");\n\n// Assuming we have a client that returns a future response\n// assuging this is *not* on the event-loop\nFuture<Buffer> fut = get.send().compose(response -> {\n\n  // Response events might have happen already\n  return response.body();\n});\n```\n\nLANGUAGE: java\nCODE:\n```\nFuture<Buffer> fut = client.get(\"some-uri\").compose(request -> {\n  request.send().compose(response -> response.body())\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Album Data from MongoDB in JavaScript\nDESCRIPTION: Sends a request to the MongoDB persistor module to fetch all albums and renders them using Knockout.js.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/ruby_web_tutorial.md#2025-04-19_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\neb.onopen = function() {\n\n        // Get the static data\n\n        eb.send('vertx.mongopersistor', {action: 'find', collection: 'albums', matcher: {} },\n          function(reply) {\n            if (reply.status === 'ok') {\n              var albumArray = [];\n              for (var i = 0; i < reply.results.length; i++) {\n                albumArray[i] = new Album(reply.results[i]);\n              }\n              that.albums = ko.observableArray(albumArray);\n              ko.applyBindings(that);\n            } else {\n              console.error('Failed to retrieve albums: ' + reply.message);\n            }\n          });\n      };\n```\n\n----------------------------------------\n\nTITLE: Performing Reverse DNS Lookup in Vert.x\nDESCRIPTION: Demonstrates how to perform a reverse lookup for an IP address, which is similar to resolving a PTR record but allows passing the IP address directly. Returns a name string.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_js.md#2025-04-19_snippet_103\n\nLANGUAGE: javascript\nCODE:\n```\nclient.reverseLookup('10.0.0.1', function( err, result ) {\n    if (err != null) {\n        console.log( \"Failed to resolve entry \" + err );\n    } else {\n        console.log( result );\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring and Deploying Vert.x Web Server and MongoDB Persistor in Python\nDESCRIPTION: This Python script configures and deploys a Vert.x web server with specified port and host, along with a MongoDB persistor module. The configuration includes the SockJS bridge settings for event bus communication between client and server.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/python_web_tutorial.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nweb_server_conf = {\n  'port' : 8080,\n  'host' : 'localhost',\n  'bridge' : True,\n\n  'inbound_permitted' : [\n    # Allow calls to get static album data from the persistor\n    {\n      'address' : 'vertx.mongopersistor',\n      'match' : {\n        'action' : 'find',\n        'collection' : 'albums'\n      }\n    }\n  ],\n  'outbound_permitted' : [ {} ]\n}\n\n# Deploy a MongoDB persistor module\nimport vertx\n\nvertx.deploy_module('vertx.mongo-persistor-v1.2')\n\n# Start the web server, with the config we defined above\n\nvertx.deploy_module('vertx.web-server-v1.0', web_server_conf)\n```\n\n----------------------------------------\n\nTITLE: Configuring Bridge Permissions in Ruby\nDESCRIPTION: Sets up inbound permissions for the event bus bridge, allowing login requests and specific MongoDB operations.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/ruby_web_tutorial.md#2025-04-19_snippet_8\n\nLANGUAGE: Ruby\nCODE:\n```\n'inbound_permitted' => [\n  # Allow calls to login\n  {\n    'address' => 'vertx.basicauthmanager.login'\n  },\n  # Allow calls to get static album data from the persistor\n  {\n    'address' => 'vertx.mongopersistor',\n    'match' => {\n      'action' => 'find',\n      'collection' => 'albums'\n    }\n  },\n  # And to place orders\n  {\n    'address' => 'vertx.mongopersistor',\n    'requires_auth' => true,  # User must be logged in to send let these through\n    'match' => {\n      'action' => 'save',\n      'collection' => 'orders'\n    }\n  }\n],\n```\n\n----------------------------------------\n\nTITLE: Configuring Router and Session Store in Vert.x\nDESCRIPTION: Implementation of Router setup with SessionStore for managing authentication state and session information in Vert.x.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2020-03-09-easy-sso-for-vertx-with-keycloak.md#2025-04-19_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nRouter router = Router.router(vertx);\n\n// Store session information on the server side\nSessionStore sessionStore = LocalSessionStore.create(vertx);\nSessionHandler sessionHandler = SessionHandler.create(sessionStore);\nrouter.route().handler(sessionHandler);\n```\n\n----------------------------------------\n\nTITLE: Retrieving JSON Document with cURL GET Request\nDESCRIPTION: Example of using cURL to send a GET request to retrieve a specific sale record by ID. The response returns the JSON document stored in PostgreSQL.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2015-07-03-vertx-3-and-postgresql-json-type.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -i -H \"Accept: application/json\" -X GET http://localhost:8080/sales/1\n```\n\n----------------------------------------\n\nTITLE: Shared Data Implementation\nDESCRIPTION: Implementation of shared data structures including SharedHash and SharedSet for concurrent access across the Vert.x application.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/api/epydoc/api-objects.txt#2025-04-19_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Creating One-shot Timers in Vert.x Ruby\nDESCRIPTION: Shows how to create a one-shot timer that executes a block of code after a specified delay in milliseconds.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_ruby.md#2025-04-19_snippet_20\n\nLANGUAGE: Ruby\nCODE:\n```\ntimer_id = Vertx.set_timer(1000) do |timer_id|\n    puts 'And one second later this is printed'\nend\n\nputs 'First this is printed'\n```\n\n----------------------------------------\n\nTITLE: Configuring Netty Reflection for GraalVM in JSON\nDESCRIPTION: JSON configuration for GraalVM's Substrate VM to enable reflection for Netty's NioSocketChannel and NioServerSocketChannel classes, which is required for native image generation.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2018-05-31-vertx-native.md#2025-04-19_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"name\" : \"io.netty.channel.socket.nio.NioSocketChannel\",\n    \"methods\" : [\n      { \"name\" : \"<init>\", \"parameterTypes\" : [] }\n    ]\n  },\n  {\n    \"name\" : \"io.netty.channel.socket.nio.NioServerSocketChannel\",\n    \"methods\" : [\n      { \"name\" : \"<init>\", \"parameterTypes\" : [] }\n    ]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Running Vert.x with HA Groups\nDESCRIPTION: Shows how to run Vert.x instances with specific HA groups for logical grouping of nodes in a cluster.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/manual.md#2025-04-19_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nvertx runmod com.acme~my-mod~2.1 -ha -hagroup somegroup\n```\n\nLANGUAGE: bash\nCODE:\n```\nvertx runmod com.mycompany~my-mod1~1.0 -ha -hagroup g1\n```\n\nLANGUAGE: bash\nCODE:\n```\nvertx runmod com.mycompany~my-mod2~1.0 -ha -hagroup g1\n```\n\nLANGUAGE: bash\nCODE:\n```\nvertx runmod com.mycompany~my-mod3~1.0 -ha -hagroup g2\n```\n\n----------------------------------------\n\nTITLE: Specifying Module Licenses in mod.json\nDESCRIPTION: Defines an array of license names in mod.json, which is required for registering the module in the Vert.x module registry.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/mods_manual.md#2025-04-19_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n\"licenses\": [\"The Apache Software License Version 2.0\", \"Some other license\"]\n```\n\n----------------------------------------\n\nTITLE: Initial Maven POM Configuration for Vert.x Project\nDESCRIPTION: Basic Maven POM file structure for a Vert.x project before setting up the fabric8 Vert.x Maven Plugin.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/f8-vertx-maven-plugin-series/2016-12-07-post-01-getting-started-with-new-fabric8-vertx-maven-plugin.md#2025-04-19_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<script src=\"https://gist.github.com/kameshsampath/0e0cfc90ea3cb9d69553ee9901dfd796.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic HTTP Server in Groovy\nDESCRIPTION: Creates an HTTP server instance without starting it. This is the first step in setting up an HTTP server in Vert.x.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_groovy.md#2025-04-19_snippet_43\n\nLANGUAGE: groovy\nCODE:\n```\ndef server = vertx.createHttpServer()\n```\n\n----------------------------------------\n\nTITLE: Tearing Down Vert.x Test Environment in Java\nDESCRIPTION: This snippet demonstrates how to tear down a Vert.x test environment by closing the Vert.x instance after tests.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/intro-series/2015-08-03-post-04-unit-and-integration-tests.md#2025-04-19_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@After\npublic void tearDown(TestContext context) {\n  vertx.close(context.asyncAssertSuccess());\n}\n```\n\n----------------------------------------\n\nTITLE: Full Body Error Converter for JSON Error Responses in Vert.x Web Client (Java)\nDESCRIPTION: This snippet shows how to create a full body error converter that processes JSON error responses, extracting detailed error information before creating a custom exception.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2018-12-10-http-response-validation-web-client.md#2025-04-19_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nErrorConverter converter = ErrorConverter.createFullBody(result -> {\n\n  // Invoked after the response body is fully received\n  HttpResponse<Buffer> response = result.response();\n\n  if (response.getHeader(\"content-type\").equals(\"application/json\")) {\n    // Error body is JSON data\n    JsonObject body = response.bodyAsJsonObject();\n    return new MyCustomException(body.getString(\"code\"), body.getString(\"message\"));\n  }\n\n  // Fallback to defaut message\n  return new MyCustomException(result.message());\n});\n\nResponsePredicate predicate = ResponsePredicate.create(ResponsePredicate.SC_SUCCESS, converter);\n```\n\n----------------------------------------\n\nTITLE: Implementing RSS Link Post Endpoint\nDESCRIPTION: Java method to handle POST requests for adding new RSS feeds, including validation and database insertion\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2018-08-20-the-first-step-rss-reader.md#2025-04-19_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nprivate void postRssLink(RoutingContext ctx) {\n    ctx.request().bodyHandler(body -> {\n        JsonObject bodyAsJson = body.toJsonObject();\n        String link = bodyAsJson.getString(\"link\");\n        String userId = ctx.request().getParam(\"user_id\");\n        if (link == null || userId == null) {\n            responseWithInvalidRequest(ctx);\n        } else {\n            vertx.eventBus().send(\"fetch.rss.link\", link);\n            Future<ResultSet> future = Future.future();\n            BoundStatement query = insertNewLinkForUser.bind(userId, link);\n            client.execute(query, future);\n            future.setHandler(result -> {\n                if (result.succeeded()) {\n                    ctx.response().end(new JsonObject().put(\"message\", \"The feed just added\").toString());\n                } else {\n                    ctx.response().setStatusCode(400).end(result.cause().getMessage());\n                }\n            });\n        }\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Multiple Vert.x Web Server Instances in Ruby\nDESCRIPTION: This snippet demonstrates how to scale up a Vert.x web server by deploying multiple instances. It uses the Vertx.deploy_module method to start 32 instances of the web server module.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/ruby_web_tutorial.md#2025-04-19_snippet_12\n\nLANGUAGE: Ruby\nCODE:\n```\n# Start 32 instances of the web server!\n\nVertx.deploy_module('vertx.web-server-v1.0', web_server_conf, 32)\n```\n\n----------------------------------------\n\nTITLE: RxJava SQL Streaming Example\nDESCRIPTION: Demonstrates SQL streaming using RxJava with table creation and data insertion.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2017-02-09-vertx-3.4.0.beta1.md#2025-04-19_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nclient\n  .rxGetConnection() // Connect to the database\n  .flatMapObservable(conn -> { // With the connection...\n    return conn.rxUpdate(\"CREATE TABLE test(col VARCHAR(20))\") // ...create test table\n      .flatMap(result -> conn.rxUpdate(\"INSERT INTO test (col) VALUES ('val1')\")) // ...insert a row\n      .flatMap(result -> conn.rxUpdate(\"INSERT INTO test (col) VALUES ('val2')\")) // ...another one\n      .flatMap(result -> conn.rxQueryStream(\"SELECT * FROM test\")) // ...get values stream\n      .flatMapObservable(sqlRowStream -> {\n        return sqlRowStream.toObservable() // Transform the stream into an Observable...\n          .doOnTerminate(conn::close); // ...and close the connection when the stream is fully read or an error occurs\n      });\n  }).subscribe(row -> System.out.println(\"Row : \" + row.encode()));\n```\n\n----------------------------------------\n\nTITLE: Using Kotlin Coroutines with Vert.x for asynchronous operations\nDESCRIPTION: Demonstrates the use of Kotlin Coroutines with Vert.x to handle asynchronous database operations in a sequential manner, including error handling.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/releases/2017-10-20-vertx-3.5.0-release.md#2025-04-19_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval movie = ctx.pathParam(\"id\")\nval rating = Integer.parseInt(ctx.queryParam(\"getRating\")[0])\nval connection = awaitResult<SQLConnection> { client.getConnection(it) }\ntry {\n  val result = awaitResult<ResultSet> { connection.queryWithParams(\"SELECT TITLE FROM MOVIE WHERE ID=?\", json { array(movie) }, it) }\n  if (result.rows.size == 1) {\n    awaitResult<UpdateResult> { connection.updateWithParams(\"INSERT INTO RATING (VALUE, MOVIE_ID) VALUES ?, ?\", json { array(rating, movie) }, it) }\n    ctx.response().setStatusCode(200).end()\n  } else {\n    ctx.response().setStatusCode(404).end()\n  }\n} finally {\n  connection.close()\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Album Data from MongoDB via EventBus\nDESCRIPTION: Sends a request to the MongoDB persistor to retrieve album data and renders it using Knockout.js when the event bus connection is established\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/groovy_web_tutorial.md#2025-04-19_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\neb.onopen = function() {\n        // Get the static data\n        eb.send('vertx.mongopersistor', {action: 'find', collection: 'albums', matcher: {} },\n          function(reply) {\n            if (reply.status === 'ok') {\n              var albumArray = [];\n              for (var i = 0; i < reply.results.length; i++) {\n                albumArray[i] = new Album(reply.results[i]);\n              }\n              that.albums = ko.observableArray(albumArray);\n              ko.applyBindings(that);\n            } else {\n              console.error('Failed to retrieve albums: ' + reply.message);\n            }\n          });\n      };\n```\n\n----------------------------------------\n\nTITLE: Getting filesystem properties with Vert.x FileSystem\nDESCRIPTION: Demonstrates how to retrieve filesystem properties such as total space, unallocated space, and usable space.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_ruby.md#2025-04-19_snippet_105\n\nLANGUAGE: ruby\nCODE:\n```\nVertx::FileSystem.fs_props('mydir') do |err, res|\n  puts \"total space: #{res.total_space}\" if !err\nend\n```\n\n----------------------------------------\n\nTITLE: Submitting Order to MongoDB in JavaScript\nDESCRIPTION: Sends an order to the MongoDB persistor for storage, including session ID for authentication.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/ruby_web_tutorial.md#2025-04-19_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nthat.submitOrder = function() {\n\n      if (!orderReady()) {\n        return;\n      }\n\n      var orderItems = ko.toJS(that.items);\n      var orderMsg = {\n        sessionID: that.sessionID(),\n        action: \"save\",\n        collection: \"orders\",\n        document: {\n          username: that.username(),\n          items: orderItems\n        }\n      }\n\n      eb.send('vertx.mongopersistor', orderMsg, function(reply) {\n        if (reply.status === 'ok') {\n          that.orderSubmitted(true);\n          // Timeout the order confirmation box after 2 seconds\n          // window.setTimeout(function() { that.orderSubmitted(false); }, 2000);\n        } else {\n          console.error('Failed to accept order');\n        }\n      });\n    };\n```\n\n----------------------------------------\n\nTITLE: Allowing All Messages Through SockJS Bridge\nDESCRIPTION: Shows how to configure a SockJS bridge to allow all messages through without restrictions, which should be used with caution in production environments.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_ruby.md#2025-04-19_snippet_96\n\nLANGUAGE: ruby\nCODE:\n```\nsockJSServer.bridge({'prefix' => '/eventbus'}, [{}], [{}])\n```\n\n----------------------------------------\n\nTITLE: Manually Handling Data in SockJS Server with Ruby\nDESCRIPTION: Demonstrates how to manually handle data in a SockJS application by setting a data handler that writes received data back to the client.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_ruby.md#2025-04-19_snippet_90\n\nLANGUAGE: ruby\nCODE:\n```\nhttpServer = Vertx::HttpServer.new\n\nsockJSServer = Vertx::SockJSServer.new(httpServer)\n\nconfig = { 'prefix' => '/echo' }\n\nsockJSServer.install_app(config) do |sock|\n\n    sock.data_handler do |buffer|\n        sock.write(buffer)\n    end\nend\n\nhttpServer.listen(8080)\n```\n\n----------------------------------------\n\nTITLE: Configuring Ansible Playbook for Vert.x Application Deployment\nDESCRIPTION: This YAML snippet defines an Ansible playbook for deploying Vert.x applications. It includes tasks for database setup, stopping existing applications, and preparing the environment for deployment. The playbook uses serial execution and sets up Java environment variables.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2016-09-28-vertx-featuring-continuous-delivery-with-jenkins-and-ansible.md#2025-04-19_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n  # 1) Special task for the service with a db\n- hosts: audit-service\n  remote_user: vagrant\n  become: yes\n  roles:\n    - db-setup\n\n  # 2) Common tasks for all hosts\n- hosts: quote-generator:portfolio-service:compulsive-traders:audit-service:trader-dashboard\n  remote_user: vagrant\n  become: yes\n  serial: 1\n  environment:\n    JAVA_HOME: /usr/lib/jvm/jre-1.8.0-openjdk/\n\n  pre_tasks:\n  - name: Check if the app jar exists in the target already\n    stat: path=/usr/share/vertx_app/app-fatjar.jar\n    register: st\n  - name: List running Vert.x applications\n    command: java -jar /usr/share/vertx_app/app-fatjar.jar list\n    register: running_app_list\n    when: st.stat.exists == True\n  - name: Stop app if it is already running (avoid multiple running instances)\n    command: java -jar /usr/share/vertx_app/app-fatjar.jar stop {% raw %}{{ item | regex_replace('^(?P<V_id>.[8]-.[4]-.[4].[4].[12])\\t.*', '\\\\g<V_id>') }}{% endraw %}\n    with_items: \"{% raw %}{{ running_app_list.stdout_lines|default([]) }}{% endraw %}\"\n    when: st.stat.exists == True and (item | regex_replace('.*\\t(.*)$', '\\\\1') | match('.*/app-fatjar.jar$'))\n\n  # Main role\n  roles:\n    - { role: vertx-app-deployment, jenkins_job_workspace: \"{{ lookup('env', 'WORKSPACE') }}\" }\n\n  post_tasks:\n  - name: List again running Vert.x applications\n    command: java -jar /usr/share/vertx_app/app-fatjar.jar list\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Vert.x3 Application with NPM\nDESCRIPTION: Commands to install dependencies and run a Vert.x application using npm. The first command retrieves the Vert.x stack while the second starts the program.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2015-07-13-vertx3-says-hello-to-npm-users.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm start\n```\n\n----------------------------------------\n\nTITLE: TCP Configuration Methods\nDESCRIPTION: Collection of getter and setter methods for TCP socket configuration including buffer sizes, keep-alive settings, traffic class, and other TCP options.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/api/epydoc/api-objects.txt#2025-04-19_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\napi_shim.core.tcp_support.TCPSupport.get_so_linger\napi_shim.core.tcp_support.TCPSupport.get_receive_buffer_size\napi_shim.core.tcp_support.TCPSupport.traffic_class\napi_shim.core.tcp_support.TCPSupport.get_traffic_class\napi_shim.core.tcp_support.TCPSupport.get_tcp_keep_alive\napi_shim.core.tcp_support.TCPSupport.reuse_address\napi_shim.core.tcp_support.TCPSupport.set_tcp_no_delay\napi_shim.core.tcp_support.TCPSupport.set_receive_buffer_size\napi_shim.core.tcp_support.TCPSupport.set_tcp_keep_alive\napi_shim.core.tcp_support.TCPSupport.set_so_linger\napi_shim.core.tcp_support.TCPSupport.get_send_buffer_size\napi_shim.core.tcp_support.TCPSupport.get_tcp_no_delay\napi_shim.core.tcp_support.TCPSupport.set_use_pooled_buffers\napi_shim.core.tcp_support.TCPSupport.receive_buffer_size\napi_shim.core.tcp_support.TCPSupport.set_traffic_class\napi_shim.core.tcp_support.TCPSupport.get_reuse_address\napi_shim.core.tcp_support.TCPSupport.so_linger\napi_shim.core.tcp_support.TCPSupport.tcp_no_delay\napi_shim.core.tcp_support.TCPSupport.use_pooled_buffers\napi_shim.core.tcp_support.TCPSupport.get_use_pooled_buffers\napi_shim.core.tcp_support.TCPSupport.set_reuse_address\napi_shim.core.tcp_support.TCPSupport.tcp_keep_alive\napi_shim.core.tcp_support.TCPSupport.send_buffer_size\napi_shim.core.tcp_support.TCPSupport.set_send_buffer_size\n```\n\n----------------------------------------\n\nTITLE: Chained Connection Handler and Listen\nDESCRIPTION: Shows method chaining pattern for setting up connection handler and listening.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_ruby.md#2025-04-19_snippet_27\n\nLANGUAGE: ruby\nCODE:\n```\nVertx::NetServer.new.connect_handler do\n    puts 'A client has connected!'\nend.listen(1234, 'localhost')\n```\n\n----------------------------------------\n\nTITLE: Preparing Database Queries\nDESCRIPTION: Method to prepare necessary database queries for RSS feed insertion\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2018-08-20-the-first-step-rss-reader.md#2025-04-19_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nprivate Future<Void> prepareNecessaryQueries() {\n    Future<PreparedStatement> insertNewLinkForUserPrepFuture = Future.future();\n    client.prepare(\"INSERT INTO rss_by_user (login , rss_link ) VALUES ( ?, ?);\", insertNewLinkForUserPrepFuture);\n\n    return insertNewLinkForUserPrepFuture.compose(preparedStatement -> {\n        insertNewLinkForUser = preparedStatement;\n        return Future.succeededFuture();\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Module Keywords in mod.json\nDESCRIPTION: Sets an array of keywords describing the module in mod.json, which is highly recommended for searchability in the Vert.x module registry.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/mods_manual.md#2025-04-19_snippet_6\n\nLANGUAGE: JSON\nCODE:\n```\n\"keywords\": [\"bread\", \"toasting\", \"toasters\", \"nuclear\"]\n```\n\n----------------------------------------\n\nTITLE: Preparing Target Machine for Vert.x Application Deployment\nDESCRIPTION: This YAML snippet defines Ansible tasks for preparing the target machine to run a Vert.x application. It includes installing Java, creating necessary directories, copying the application JAR and config files.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2016-09-28-vertx-featuring-continuous-delivery-with-jenkins-and-ansible.md#2025-04-19_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Install Java 1.8 and some basic dependencies\n  yum: name={% raw %}{{ item }}{% endraw %} state=present\n  with_items:\n   - java-1.8.0-openjdk\n- name: Ensure app dir exists\n  file: path=/usr/share/vertx_app/ recurse=yes state=directory mode=0744\n- name: Copy the Vert.x application jar package\n  copy: src={% raw %}{{ app_jar }}{% endraw %} dest=/usr/share/vertx_app/app-fatjar.jar mode=0755\n- name: Ensure config dir exists\n  file: path=/etc/vertx_app/ recurse=yes state=directory mode=0744\n- name: Copy the application config file if needed\n  copy: src={% raw %}{{ app_config }}{% endraw %} dest=/etc/vertx_app/config.json mode=0755\n  when: app_config is defined\n```\n\n----------------------------------------\n\nTITLE: Shared Data Usage in Ruby\nDESCRIPTION: Demonstrates how to use shared hash data structures between verticles in the same Vert.x instance.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_ruby.md#2025-04-19_snippet_14\n\nLANGUAGE: ruby\nCODE:\n```\nhash = Vertx::SharedData.get_hash('demo.myhash')\n\nhash['some-key'] = 'some-value'\n\nhash = Vertx::SharedData.get_hash('demo.myhash')\n\nputs \"value of some-key is #{hash['some-key']}\"\n```\n\n----------------------------------------\n\nTITLE: Starting the Vert.x3 Real-Time Drawing Application\nDESCRIPTION: This command starts the Vert.x application using the NPM start script defined in package.json, which runs 'vertx run server.js'.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2015-08-31-vertx-3-real-time-web-apps.md#2025-04-19_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Accessing SRV Record Properties in Vert.x\nDESCRIPTION: Demonstrates how to access the various properties of an SRV record object, including priority, weight, port, protocol, service, and target.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_js.md#2025-04-19_snippet_101\n\nLANGUAGE: javascript\nCODE:\n```\nrecord = ...\nrecord.priority\nrecord.name\nrecord.priority\nrecord.weight\nrecord.port\nrecord.protocol\nrecord.service\nrecord.target\n```\n\n----------------------------------------\n\nTITLE: Generating IDE Project Files\nDESCRIPTION: Commands to generate project files for IDE integration using Gradle plugins\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/gradle_dev.md#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew idea\n\nOr\n\n./gradlew eclipse\n```\n\n----------------------------------------\n\nTITLE: Allowing All Messages Through SockJS Bridge in Groovy\nDESCRIPTION: Simplified configuration for a SockJS bridge that allows all messages to pass through in both directions. This should be used with caution as it disables security filtering.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_groovy.md#2025-04-19_snippet_73\n\nLANGUAGE: groovy\nCODE:\n```\nvertx.createSockJSBridge(server).bridge(config, [[:]], [[:]]) \n```\n\n----------------------------------------\n\nTITLE: SQL Streaming Query Example\nDESCRIPTION: Shows how to perform streaming SQL queries with row handling.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2017-02-09-vertx-3.4.0.beta1.md#2025-04-19_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nconnection.queryStream(\"select * from test\", stream -> {\n  if (stream.succeeded()) {\n    SQLRowStream sqlRowStream = stream.result();\n\n    sqlRowStream\n      .handler(row -> {\n        // do something with the row...\n        System.out.println(row.encode());\n      })\n      .endHandler(v -> {\n        // no more data available, close the connection\n        connection.close(done -> {\n          if (done.failed()) {\n            throw new RuntimeException(done.cause());\n          }\n        });\n      });\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Cassandra for RSS Feed Data\nDESCRIPTION: CQL queries to verify RSS feed data storage in Cassandra database. Shows how to check stored RSS links by user and article descriptions from the rss_reader keyspace.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2018-08-20-the-first-step-rss-reader.md#2025-04-19_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ncqlsh> SELECT * FROM rss_reader.rss_by_user limit 1  ;\n\n login | rss_link\n-------+-----------------------------------------\n Pavel | http://feeds.bbci.co.uk/news/uk/rss.xml\n\n(1 rows)\ncqlsh> SELECT description FROM rss_reader.articles_by_rss_link  limit 1;\n\n description\n-------------------------------------\n BBC coverage of latest developments\n\n(1 rows)\n```\n\n----------------------------------------\n\nTITLE: Requesting Album Data from Server using Vert.x EventBus in JavaScript\nDESCRIPTION: Sends a request to the server to retrieve album data from MongoDB using the Vert.x event bus. The received data is then processed and bound to the view using Knockout.js.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/python_web_tutorial.md#2025-04-19_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\neb.onopen = function() {\n\n        // Get the static data\n\n        eb.send('vertx.mongopersistor', {action: 'find', collection: 'albums', matcher: {} },\n          function(reply) {\n            if (reply.status === 'ok') {\n              var albumArray = [];\n              for (var i = 0; i < reply.results.length; i++) {\n                albumArray[i] = new Album(reply.results[i]);\n              }\n              that.albums = ko.observableArray(albumArray);\n              ko.applyBindings(that);\n            } else {\n              console.error('Failed to retrieve albums: ' + reply.message);\n            }\n          });\n      };  \n  }; \n```\n\n----------------------------------------\n\nTITLE: Configuring Simple JavaScript Module in mod.json\nDESCRIPTION: Sets up a basic mod.json file for a module containing a single JavaScript file, specifying the main entry point.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/mods_manual.md#2025-04-19_snippet_9\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"main\": \"app.js\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Time Service in Vert.x\nDESCRIPTION: This code snippet shows how to create a basic server-side service in Vert.x. It registers an event bus handler that responds with the current time when called.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/js_web_tutorial.md#2025-04-19_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nload('vertx.js');\n\nvertx.eventBus.registerHandler(\"acme.timeService\", function(message, replier) {\n    replier({current_time: new Date().getTime()});        \n});\n```\n\n----------------------------------------\n\nTITLE: Random Access Buffer Writing\nDESCRIPTION: Demonstrates writing data at specific buffer positions using set methods for different data types.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_js.md#2025-04-19_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nvar buff = new vertx.Buffer();\n\nbuff.setInt(1000, 123);\nbuff.setBytes(0, \"hello\");\n```\n\n----------------------------------------\n\nTITLE: Data Handling in SockJS Server\nDESCRIPTION: Demonstrates reading and writing data from a SockJS socket using data handlers and write buffers.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_ruby.md#2025-04-19_snippet_86\n\nLANGUAGE: Ruby\nCODE:\n```\nhttpServer = Vertx::HttpServer.new\n\nsockJSServer = Vertx::SockJSServer.new(httpServer)\n\nconfig = { 'prefix' => '/echo' }\n\nsockJSServer.install_app(config) do |sock|\n\n    sock.data_handler do |buffer|\n        sock.write_buffer(buffer)\n    end\nend\n\nhttpServer.listen(8080)\n```\n\n----------------------------------------\n\nTITLE: Adding Vert.x Unit Dependency with Maven\nDESCRIPTION: XML configuration to add Vert.x Unit as a test dependency in a Maven project. This dependency is required to use Vert.x Unit for testing asynchronous applications.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2016-01-18-using-hamcrest-matchers-with-vertx-unit.md#2025-04-19_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>io.vertx</groupId>\n  <artifactId>vertx-unit</artifactId>\n  <version>3.2.0</version>\n  <scope>test</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Maven Dependency for Vert.x JWT Auth\nDESCRIPTION: Required Maven dependency for adding JWT authentication support to a Vert.x project.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2020-10-01-jwt-auth-with-keycloak.md#2025-04-19_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>io.vertx</groupId>\n    <artifactId>vertx-auth-jwt</artifactId>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Server Close Operation\nDESCRIPTION: Demonstrates how to properly close a TCP server with completion callback.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_ruby.md#2025-04-19_snippet_28\n\nLANGUAGE: ruby\nCODE:\n```\nserver.close do |err|\n   puts 'The server is now fully closed.' if !err\nend\n```\n\n----------------------------------------\n\nTITLE: Checking File Existence with Vert.x FileSystem in Groovy\nDESCRIPTION: Demonstrates how to check if a file exists using the Vert.x FileSystem API. The result is a boolean value indicating whether the file exists.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_groovy.md#2025-04-19_snippet_81\n\nLANGUAGE: groovy\nCODE:\n```\nvertx.fileSystem.exists(\"some-file.txt\") { ar ->\n    if (ar.succeeded()) {\n        println \"File exists? ${ar.result}\"\n    } else {\n        log.error(\"Failed to check existence\", ar.exception)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Data Stream Write Example\nDESCRIPTION: Simple example showing how to write data directly from a socket read to a write operation without flow control.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_ruby.md#2025-04-19_snippet_37\n\nLANGUAGE: ruby\nCODE:\n```\nserver = Vertx::NetServer.new\n\nserver.connect_handler do |sock|\n    sock.data_handler do |buffer|\n        # Write the data straight back\n        sock.write(buffer)\n    end\nend.listen(1234, 'localhost')\n```\n\n----------------------------------------\n\nTITLE: Running Vert.x with Quorum for HA\nDESCRIPTION: Demonstrates running Vert.x instances with a quorum to prevent against network partitions in high availability setups.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/manual.md#2025-04-19_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nvertx runmod com.mycompany~my-mod1~1.0 -ha -quorum 3\n```\n\nLANGUAGE: bash\nCODE:\n```\nvertx runmod com.mycompany~my-mod2~1.0 -ha -quorum 3\n```\n\nLANGUAGE: bash\nCODE:\n```\nvertx runmod com.mycompany~my-mod3~1.0 -ha -quorum 3\n```\n\n----------------------------------------\n\nTITLE: Socket Close Handler Setup\nDESCRIPTION: Implements a handler to be notified when a socket connection is closed.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_ruby.md#2025-04-19_snippet_31\n\nLANGUAGE: ruby\nCODE:\n```\nserver = Vertx::NetServer.new\n\nserver.connect_handler do |sock|\n    sock.closed_handler { puts 'The socket is now closed' }\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring SockJS Bridge with Security Rules in Ruby\nDESCRIPTION: Web server configuration with SockJS bridge enabled and security rules for event bus communication.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/ruby_web_tutorial.md#2025-04-19_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nweb_server_conf = {\n  'port' => 8080,\n  'host' => 'localhost',\n  'bridge' => true,\n\n  'inbound_permitted' => [\n    # Allow calls to get static album data from the persistor\n    {\n      'address' => 'vertx.mongopersistor',\n      'match' => {\n        'action' => 'find',\n        'collection' => 'albums'\n      }\n    }\n  ],\n  'outbound_permitted' => [ {} ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Vert.x Web Server\nDESCRIPTION: Demonstrates a basic Vert.x web server setup that could potentially expose security vulnerabilities when run as root.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2015-09-14-writing-secure-vertx-web-apps.md#2025-04-19_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class App extends AbstractVerticle {\n  @Override\n  public void start() {\n\n    Router router = Router.router(vertx);\n\n    router.route().handler(StaticHandler.create(\"\"));\n\n    vertx.createHttpServer().requestHandler(router::accept).listen(80);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Different Message Types on Event Bus in Ruby\nDESCRIPTION: Examples of sending various data types (numbers, boolean, JSON object, null) as messages on the Vert.x event bus.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_ruby.md#2025-04-19_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\nVertx::EventBus.send('test.address', 1234)\nVertx::EventBus.send('test.address', 3.14159)\nVertx::EventBus.send('test.address', true)\n\nmyObj = {\n  'name' => 'Tim',\n  'address' => 'The Moon',\n  'age' => 457\n}\nVertx::EventBus.send('test.address', myObj)\n\nVertx::EventBus.send('test.address', nil)\n```\n\n----------------------------------------\n\nTITLE: Performing IPv6 (AAAA Record) Lookup in Vert.x\nDESCRIPTION: Shows how to specifically lookup AAAA records (IPv6) for a domain name. The first result returned will be used, returning an IPv6 string address.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_js.md#2025-04-19_snippet_92\n\nLANGUAGE: javascript\nCODE:\n```\nclient.lookup6('vertx.io', function(err, result) {\n    if (err != null) {\n        console.log( \"Failed to resolve entry \" + err );\n    } else {\n        console.log( result );\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Logstash Input Plugin for Beats\nDESCRIPTION: Logstash configuration for the Beats input plugin to receive logs from Filebeat. It sets up a secure connection using SSL with certificate and key for authentication on port 5044.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2016-09-08-centralized-logging-for-vertx-applications-using-the-elk-stack.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ninput {\n  beats {\n    port => 5044\n    ssl => true\n    ssl_certificate => \"/etc/pki/tls/certs/logstash-beats.crt\"\n    ssl_key => \"/etc/pki/tls/private/logstash-beats.key\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vert.x Options for Prometheus Metrics with Embedded Server\nDESCRIPTION: Java code snippet showing how to configure Vert.x options to enable Prometheus metrics reporting with an embedded server.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2018-04-09-vertx-micrometer-metrics.md#2025-04-19_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n// Deploy with embedded server: prometheus metrics will be automatically exposed,\n// independently from any other HTTP server defined\nMicrometerMetricsOptions options = new MicrometerMetricsOptions()\n  .setPrometheusOptions(new VertxPrometheusOptions()\n    .setStartEmbeddedServer(true)\n    .setEmbeddedServerOptions(new HttpServerOptions().setPort(8081))\n    .setEnabled(true))\n  .setEnabled(true);\nVertx vertx = Vertx.vertx(new VertxOptions().setMetricsOptions(options));\n// Then deploy verticles with this vertx instance\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Server Security in Groovy\nDESCRIPTION: Defines web server configuration including inbound message permissions and authentication requirements\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/groovy_web_tutorial.md#2025-04-19_snippet_8\n\nLANGUAGE: groovy\nCODE:\n```\ndef webServerConf = [\n      port: 8080,\n      host: 'localhost',\n      bridge: true,\n      inbound_permitted: [\n        // Allow calls to login\n        [\n          address: 'vertx.basicauthmanager.login'\n        ],\n        // Allow calls to get static album data from the persistor\n        [\n          address : 'vertx.mongopersistor',\n          match : [\n            action : 'find',\n            collection : 'albums'\n          ]\n        ],\n        // And to place orders\n        [\n          address : 'vertx.mongopersistor',\n          requires_auth : true,  // User must be logged in to send let these through\n          match : [\n            action : 'save',\n            collection : 'orders'\n          ]\n        ]\n      ],\n      outbound_permitted: [ [:] ]\n    ]\n```\n\n----------------------------------------\n\nTITLE: Checking File Existence in Vertx\nDESCRIPTION: Demonstrates how to check if a file exists using Vertx FileSystem API.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_ruby.md#2025-04-19_snippet_99\n\nLANGUAGE: ruby\nCODE:\n```\nVertx::FileSystem.exists?('some-file.txt') do |err, res|\n    puts \"File #{res ? 'exists' : 'does not exist'}\" if !err        \nend\n```\n\n----------------------------------------\n\nTITLE: Initializing EventBus Connection in JavaScript\nDESCRIPTION: Creates an EventBus object to enable client-server communication through Vert.x's event bus system\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/groovy_web_tutorial.md#2025-04-19_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar eb = new vertx.EventBus(window.location.protocol + '//' + window.location.hostname + ':' + window.location.port + '/eventbus');\n```\n\n----------------------------------------\n\nTITLE: Executing Vert.x Application from Fat JAR\nDESCRIPTION: Command to run the packaged Vert.x application using the generated fat JAR file.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/intro-series/2015-07-14-post-01-my-first-vertx-3-application.md#2025-04-19_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\njava -jar target/my-first-app-1.0-SNAPSHOT-fat.jar\n```\n\n----------------------------------------\n\nTITLE: Configuration Access in Verticle\nDESCRIPTION: Example showing how to access JSON configuration passed to a Verticle during deployment.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_js.md#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar config = vertx.config;\n\nstdout.println(\"Config is \" + JSON.stringify(config));\n```\n\n----------------------------------------\n\nTITLE: Displaying Vert.x Version\nDESCRIPTION: Command to display the installed version of Vert.x.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/manual.md#2025-04-19_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nvertx version\n```\n\n----------------------------------------\n\nTITLE: Maven Dependencies Configuration\nDESCRIPTION: XML configuration showing required Maven dependencies for vertx-web-api-service and vertx-codegen.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2018-12-13-vertx-web-api-service.md#2025-04-19_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>io.vertx</groupId>\n  <artifactId>vertx-codegen</artifactId>\n  <version>3.6.0</version>\n  <classifier>processor</classifier>\n</dependency>\n<dependency>\n  <groupId>io.vertx</groupId>\n  <artifactId>vertx-web-api-service</artifactId>\n  <version>3.6.0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Handling Validation Errors\nDESCRIPTION: Shows how to handle validation exceptions in the request processing pipeline.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2017-06-12-openapi3-vertx-web-support.md#2025-04-19_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nThrowable failure = routingContext.failure();\nif (failure instanceof ValidationException)\n    // Handle Validation Exception\n    routingContext.response().setStatusCode(400).setStatusMessage(\"ValidationError\").end(failure.getMessage());\n```\n\n----------------------------------------\n\nTITLE: Running JavaScript Verticle from Command Line\nDESCRIPTION: Example of running a JavaScript verticle named server.js using the vertx run command.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/manual.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nvertx run server.js\n```\n\n----------------------------------------\n\nTITLE: Generated Bottle POJO in Java\nDESCRIPTION: An example of a generated POJO class for the Bottle definition from the Swagger file.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2017-05-12-vertx-swagger-presentation.md#2025-04-19_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n<script src=\"https://gist.github.com/phiz71/eabafda440b24881126089128d677121.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Server with MongoDB Persistor\nDESCRIPTION: Extended configuration that includes both web server and MongoDB persistor module deployment.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/js_web_tutorial.md#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nload('vertx.js');\n\nvar webServerConf = {  \n  port: 8080,\n  host: 'localhost'\n};\n\n// Start a MongoDB persistor module\n\nvertx.deployModule('vertx.mongo-persistor-v1.2');\n\n// Start the web server, with the config we defined above\n\nvertx.deployModule('vertx.web-server-v1.0', webServerConf);\n```\n\n----------------------------------------\n\nTITLE: Streams API Interface Definitions\nDESCRIPTION: Interface definitions for ReadStream and WriteStream classes including methods for handling data flow, queuing, and stream lifecycle events.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/api/epydoc/api-objects.txt#2025-04-19_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Implementing RSS Feed Fetching\nDESCRIPTION: Event bus consumer implementation for fetching and storing RSS feed content\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2018-08-20-the-first-step-rss-reader.md#2025-04-19_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nvertx.eventBus().localConsumer(\"fetch.rss.link\", message -> {\n    String rssLink = (String) message.body();\n    log.info(\"fetching \" + rssLink);\n    webClient.getAbs(rssLink).send(response -> {\n        if (response.succeeded()) {\n            String bodyAsString = response.result().bodyAsString(\"UTF-8\");\n            try {\n                RssChannel rssChannel = new RssChannel(bodyAsString);\n\n                BatchStatement batchStatement = new BatchStatement();\n                BoundStatement channelInfoInsertQuery = insertChannelInfo.bind(\n                        rssLink, new Date(System.currentTimeMillis()), rssChannel.description, rssChannel.link, rssChannel.title\n                );\n                batchStatement.add(channelInfoInsertQuery);\n\n                for (Article article : rssChannel.articles) {\n                    batchStatement.add(insertArticleInfo.bind(rssLink, article.pubDate, article.link, article.description, article.title));\n                }\n                Future<ResultSet> insertArticlesFuture = Future.future();\n                cassandraClient.execute(batchStatement, insertArticlesFuture);\n\n                insertArticlesFuture.compose(insertDone -> Future.succeededFuture());\n            } catch (Exception e) {\n                log.error(\"Unable to fetch: \" + rssLink, e);\n            }\n        } else {\n            log.error(\"Unable to fetch: \" + rssLink);\n        }\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Out Completed Step in Git\nDESCRIPTION: Command to checkout the step_3 branch containing the completed implementation\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2018-09-05-the-second-step-rss-reader.md#2025-04-19_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout step_3\n```\n\n----------------------------------------\n\nTITLE: MongoDB Test Deployment Configuration in Vert.x\nDESCRIPTION: Configuration setup for test deployment including MongoDB connection string and database name settings.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/intro-series/2015-11-30-post-06-combine-vertx-and-mongo-to-build-a-giant.md#2025-04-19_snippet_10\n\nLANGUAGE: java\nCODE:\n```\n\tDeploymentOptions options = new DeploymentOptions()\n\t    .setConfig(new JsonObject()\n\t        .put(\"http.port\", port)\n\t        .put(\"db_name\", \"whiskies-test\")\n\t        .put(\"connection_string\",\n\t\t\t\t\"mongodb://localhost:\" + MONGO_PORT)\n\t);\n```\n\n----------------------------------------\n\nTITLE: Creating package.json for Vert.x3 Web Application\nDESCRIPTION: Package.json configuration for a Vert.x3 Web application using the full Vert.x stack. It includes the vertx3-full dependency which provides access to the Vert.x Web framework.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2015-07-13-vertx3-says-hello-to-npm-users.md#2025-04-19_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"name\": \"vertx3-hello-web\",\n  \"private\": true,\n  \"dependencies\": {\n    \"vertx3-full\": \"3.0.0-1\"\n  },\n  \"scripts\": {\n    \"start\": \"./node_modules/.bin/vertx run server.js\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Time Service in Vert.x using Ruby\nDESCRIPTION: This code snippet shows how to create a basic server-side service in Vert.x using Ruby. It registers an event bus handler that responds with the current time when called.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/ruby_web_tutorial.md#2025-04-19_snippet_13\n\nLANGUAGE: Ruby\nCODE:\n```\nrequire \"vertx\"\ninclude Vertx\n\nEventBus.register_handler(\"acme.timeService\") do |message|\n    message.reply({'current_time' => Time.now.to_i})        \nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Vert.x Options for InfluxDB Metrics\nDESCRIPTION: Java code snippet demonstrating how to configure Vert.x options to enable InfluxDB metrics reporting.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2018-04-09-vertx-micrometer-metrics.md#2025-04-19_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n// Default InfluxDB options will push metrics to localhost:8086, db \"default\"\nMicrometerMetricsOptions options = new MicrometerMetricsOptions()\n  .setInfluxDbOptions(new VertxInfluxDbOptions().setEnabled(true))\n  .setEnabled(true);\nVertx vertx = Vertx.vertx(new VertxOptions().setMetricsOptions(options));\n// Then deploy verticles with this vertx instance\n```\n\n----------------------------------------\n\nTITLE: Deploying Auth Manager Module in Vert.x Python Application\nDESCRIPTION: Adds a line to deploy the Vert.x auth manager module for handling user authentication in the Python application.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/python_web_tutorial.md#2025-04-19_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nvertx.deploy_module('vertx.auth-mgr-v1.1')\n```\n\n----------------------------------------\n\nTITLE: Running Java Verticle from Source\nDESCRIPTION: Example of running multiple instances of a Java verticle directly from source file\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/manual.md#2025-04-19_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nvertx run MyVerticle.java -instances 10\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Server with MongoDB Persistor in Ruby\nDESCRIPTION: Enhanced configuration adding MongoDB persistor module deployment to the web server setup.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/ruby_web_tutorial.md#2025-04-19_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nweb_server_conf = {\n  'port' => 8080,\n  'host' => 'localhost'\n}\n\n# Deploy a MongoDB persistor module\n\nVertx.deploy_module('vertx.mongo-persistor-v1.2')\n\n# Start the web server, with the config we defined above\n\nVertx.deploy_module('vertx.web-server-v1.0', web_server_conf)\n```\n\n----------------------------------------\n\nTITLE: Simplified Flow Control Using Pump\nDESCRIPTION: Using Vert.x's built-in Pump class to handle flow control automatically.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_ruby.md#2025-04-19_snippet_45\n\nLANGUAGE: ruby\nCODE:\n```\nserver = Vertx::NetServer.new\n\nserver.connect_handler do |sock|\n    pump = Vertx::Pump.new(sock, sock)\n    pump.start\n    \nend.listen(1234, 'localhost')\n```\n\n----------------------------------------\n\nTITLE: Client-side EventBus Implementation\nDESCRIPTION: Demonstrates client-side EventBus setup and usage with message handling and sending capabilities.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_ruby.md#2025-04-19_snippet_89\n\nLANGUAGE: JavaScript\nCODE:\n```\n<script src=\"http://cdn.sockjs.org/sockjs-0.2.1.min.js\"></script>\n<script src='vertxbus.js'></script>\n\n<script>\n\n    var eb = new vertx.EventBus('http://localhost:8080/eventbus');\n    \n    eb.onopen = function() {\n    \n      eb.registerHandler('some-address', function(message) {\n\n        console.log('received a message: ' + JSON.stringify(message);\n\n      });\n\n      eb.send('some-address', {name: 'tim', age: 587});\n    \n    }\n   \n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating Basic HTML Page for Testing Vert.x Web Server\nDESCRIPTION: A simple shell command to create a basic HTML page with 'Hello World' text. This is used for testing that the Vert.x web server is properly serving static content.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/python_web_tutorial.md#2025-04-19_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<html><body>Hello World</body></html>\n```\n\n----------------------------------------\n\nTITLE: Adding AMQP Client Maven Dependency\nDESCRIPTION: Maven dependency configuration for including the Vert.x AMQP client module.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/releases/2019-04-02-vertx-3.7.0-release.md#2025-04-19_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>io.vertx</groupId>\n  <artifactId>vertx-amqp-client</artifactId>\n  <version>3.7.0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Configuring Vert.x Gradle Plugin with Kotlin in build.gradle\nDESCRIPTION: Configuration for using the Vert.x Gradle plugin with Kotlin. It includes plugin setup, dependencies, and Kotlin compiler options.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2017-09-28-vertx-gradle-plugin.md#2025-04-19_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\nplugins {\n  id 'io.vertx.vertx-plugin' version 'x.y.z'\n  id 'org.jetbrains.kotlin.jvm' version 'a.b.c'\n}\n\nrepositories {\n  jcenter()\n}\n\ndependencies {\n  compile 'io.vertx:vertx-lang-kotlin'\n  compile 'org.jetbrains.kotlin:kotlin-stdlib-jre8'\n}\n\nvertx {\n  mainVerticle = \"sample.MainVerticle\"\n}\n\ntasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {\n  kotlinOptions {\n    jvmTarget = \"1.8\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Vert.x Module from Command Line\nDESCRIPTION: Demonstrates how to run a Vert.x module using the 'vertx runmod' command with various options like instances, config file, and cluster settings.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/manual.md#2025-04-19_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nvertx runmod com.acme~my-mod~2.1\n```\n\nLANGUAGE: bash\nCODE:\n```\nvertx runmod com.acme~other-mod~1.0.beta1 -instances 10 -conf other-mod.conf\n```\n\n----------------------------------------\n\nTITLE: Executing the Vert.x TCP Client\nDESCRIPTION: Command to run the compiled Vert.x TCP client JAR with configuration options for server host, port, and connect message.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2017-12-15-tcp-client-using-vertx-kotlin-and-gradle-build.md#2025-04-19_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\njava -DserverHost=127.0.0.1 -DserverPort=8888 -DconnectMessage=\"hello\" -Dvertx.logger-delegate-factory-class-name=\"io.vertx.core.logging.SLF4JLogDelegateFactory\" -jar vertx-net-client-full.jar\n```\n\n----------------------------------------\n\nTITLE: Configuring webpack.config.js for Vert.x integration\nDESCRIPTION: WebPack configuration file for integrating with Vert.x and Gradle. It specifies input and output paths for bundling.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2017-09-28-vertx-gradle-plugin.md#2025-04-19_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  entry: './src/main/webapp/index.js',\n  output: {\n    filename: './build/resources/main/webroot/bundle.js'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Record Parser Implementation\nDESCRIPTION: Record parser implementation for handling delimited and fixed-size record parsing with handler support.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/api/epydoc/api-objects.txt#2025-04-19_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Using Callbacks with Vert.x Module Deployment in Python\nDESCRIPTION: This Python code demonstrates how to deploy a MongoDB persistor module and execute a callback function after deployment. The callback loads a static data script to initialize the database.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/python_web_tutorial.md#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport vertx\n\ndef after_deploy(): execfile('static_data.py')\n\t\t\nvertx.deploy_module('vertx.mongo-persistor-v1.2', after_deploy)\n```\n\n----------------------------------------\n\nTITLE: Configuration JSON Example\nDESCRIPTION: Example JSON configuration file structure for verticles\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/manual.md#2025-04-19_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"foo\",\n    \"num_widgets\": 46\n}\n```\n\n----------------------------------------\n\nTITLE: Message Reply Handler Implementation\nDESCRIPTION: Demonstrates implementing a message handler that can reply to received messages, showing the request-response pattern.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_js.md#2025-04-19_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar myHandler = function(message, replier) {\n  log.info('I received a message ' + message);\n  \n  // Do some stuff\n  \n  // Now reply to it\n  \n  replier('This is a reply');\n}\n\neb.registerHandler('test.address', myHandler);\n```\n\n----------------------------------------\n\nTITLE: Implementing Login Function in JavaScript\nDESCRIPTION: Sends a login request to the server and stores the session ID upon successful authentication.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/ruby_web_tutorial.md#2025-04-19_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\neb.send('vertx.bridge.login', {username: that.username(), password: that.password()}, function (reply) {\n        if (reply.status === 'ok') {\n          that.sessionID(reply.sessionID);\n        } else {\n          alert('invalid login');\n        }\n      });\n```\n\n----------------------------------------\n\nTITLE: Publishing and Subscribing to Actions with Vert.x Event Bus\nDESCRIPTION: Core service methods for publishing actions to the event bus and subscribing to remote actions. Includes logic to prevent action loops by tracking the publishing user and filtering out self-published actions.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2017-04-26-vertx-realtime-angular-ngrx.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\npublishAction(action: RemoteAction) {\n    if (action.publishedByUser) {\n        console.error(\"This action has already been published\");\n        return;\n    }\n    action.publishedByUser = this.currentUser;\n    this.eventBusService.publish(action.eventBusAddress, action);\n}\nsubscribeToActions(eventBusAddress: string) {\n    this.eventBusService.registerHandler(eventBusAddress, (error, message) => {\n        // Handle message from subscription\n        if (message.body.publishedByUser === this.currentUser) {\n            // Ignore action sent by current manager\n            return;\n        }\n        let localAction = message.body;\n        this.store.dispatch(localAction);\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Cancelling Timer in Vert.x\nDESCRIPTION: Demonstrates how to cancel a periodic timer using the cancelTimer method with the timer ID.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_js.md#2025-04-19_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nvar timerID = vertx.setPeriodic(1000, function(timerID) {\n});\n\n// And immediately cancel it\n\nvertx.cancelTimer(timerID);\n```\n\n----------------------------------------\n\nTITLE: MongoDB Production Configuration JSON\nDESCRIPTION: Production configuration file with MongoDB connection settings and HTTP port for deployment.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/intro-series/2015-11-30-post-06-combine-vertx-and-mongo-to-build-a-giant.md#2025-04-19_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n\t{\n\t  \"http.port\": 8082,\n\t  \"db_name\": \"whiskies\",\n\t  \"connection_string\": \"mongodb://localhost:27017\"\n\t}\n```\n\n----------------------------------------\n\nTITLE: Appending Data to Buffers in Vert.x Ruby\nDESCRIPTION: Demonstrates how to append various data types to Vert.x buffers, including numbers, floats, strings, and other buffers.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_ruby.md#2025-04-19_snippet_17\n\nLANGUAGE: Ruby\nCODE:\n```\nbuff = Vertx::Buffer.create\n\nbuff.append_fixnum(100, 1) # Append a single byte in the buffer\nbuff.append_fixnum(231243, 8) # Append number as 8 bytes in the buffer\nbuff.append_str('foo').append_float(23.4232, 4) # Appends can be chained\n\nsocket.write(buff)\n```\n\nLANGUAGE: Ruby\nCODE:\n```\nbuff.append_fixnum(100, 1)   # Append number as single signed byte\n\nbuff.append_fixnum(100, 2)   # Append number as signed integer in two bytes\n\nbuff.append_fixnum(100, 4)   # Append number as signed integer in four bytes    \n\nbuff.append_fixnum(100, 8)   # Append number as signed integer in eight bytes\n```\n\nLANGUAGE: Ruby\nCODE:\n```\nbuff.append_float(12.234, 4)    # Append number as a 32-bit IEEE 754 floating point number (4 bytes)\n\nbuff.append_float(12.234, 8)    # Append number as a 64-bit IEEE 754 floating point number (8 bytes)\n```\n\nLANGUAGE: Ruby\nCODE:\n```\nbuff.append_buffer(other_buffer)    # Append other_buffer to buff\n```\n\nLANGUAGE: Ruby\nCODE:\n```\nbuff.append_str(str)                      # Append string as UTF-8 encoded bytes    \n\nbuff.append_str(str, 'UTF-16')            # Append string as sequence of bytes in specified encoding\n```\n\n----------------------------------------\n\nTITLE: Installing Vert.x Modules Manually\nDESCRIPTION: Shows how to manually install a Vert.x module from a repository using the vertx install command.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/mods_manual.md#2025-04-19_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nvertx install io.vertx~mod-mongo-persistor~2.0.0-beta1\n```\n\n----------------------------------------\n\nTITLE: Adding Test Dependencies to Maven POM\nDESCRIPTION: Maven dependency configuration for JUnit and vertx-unit testing frameworks.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/intro-series/2015-07-14-post-01-my-first-vertx-3-application.md#2025-04-19_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>junit</groupId>\n  <artifactId>junit</artifactId>\n  <version>4.12</version>\n  <scope>test</scope>\n</dependency>\n<dependency>\n  <groupId>io.vertx</groupId>\n  <artifactId>vertx-unit</artifactId>\n  <version>3.0.0</version>\n  <scope>test</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Configuring package.json for ES6 Transpilation in Vert.x\nDESCRIPTION: This package.json configuration sets up the project structure for transpiling ES6 code to ES5 for Vert.x compatibility. It defines build and start scripts, and includes dependencies for Vert.x and Babel.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2015-11-25-vertx-es6-back-to-the-future.md#2025-04-19_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"vertx-es6\",\n  \"version\": \"0.0.1\",\n  \"private\": true,\n\n  \"main\": \"lib/main.js\",\n\n  \"scripts\": {\n    \"build\": \"rm -Rf lib && ./node_modules/.bin/babel --out-dir lib src\",\n    \"start\": \"./node_modules/.bin/vertx run lib/main.js\"\n  },\n\n  \"dependencies\": {\n    \"vertx3-full\": \"3.1.0\",\n    \"babel-cli\": \"6.2.0\",\n    \"babel-preset-es2015\": \"6.1.18\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running a Module from Command Line\nDESCRIPTION: Command to run a Vert.x module directly from the command line using the vertx runmod command. This example deploys a module named org.myorg.mymod-v3.2.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/mods_manual.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nvertx runmod org.myorg.mymod-v3.2\n```\n\n----------------------------------------\n\nTITLE: Adding Vert.x Unit Runner Annotation for JUnit Tests in Vert.x 3\nDESCRIPTION: Add the VertxUnitRunner class annotation to test classes when migrating from TestTools to Vert.x Unit. This enables the Vert.x-specific test runner to handle asynchronous tests correctly.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2015-07-06-checklist-for-migrating-from-vertx-2-1-x-to-vertx-3-part-one.md#2025-04-19_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n@RunWith(VertxUnitRunner.class)\n```\n\n----------------------------------------\n\nTITLE: Test Example Using Hamcrest with Vert.x Unit\nDESCRIPTION: An example test method demonstrating how to use the VertxMatcherAssert utility with Hamcrest matchers in a Vert.x Unit test. It uses the 'is' matcher to verify HTTP status code and response body.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2016-01-18-using-hamcrest-matchers-with-vertx-unit.md#2025-04-19_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n@Test\npublic void testWithHamcrest(TestContext context) {\n  Async async = context.async();\n  vertx.createHttpClient().get(8080, \"localhost\", \"/\").handler(response -> {\n    assertThat(context, response.statusCode(), is(200));\n    response.bodyHandler(buffer -> {\n      assertThat(context, buffer.toString(\"utf-8\"), is(\"hello vert.x\"));\n      async.complete();\n    });\n  }).end();\n}\n```\n\n----------------------------------------\n\nTITLE: Preparing Cassandra Queries in Vert.x\nDESCRIPTION: Method to prepare the necessary Cassandra prepared statements for the application\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2018-09-05-the-second-step-rss-reader.md#2025-04-19_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nprivate Future<Void> prepareNecessaryQueries() {\n        Future<PreparedStatement> selectChannelInfoPrepFuture = Future.future();\n        client.prepare(\"SELECT description, title, site_link, rss_link FROM channel_info_by_rss_link WHERE rss_link = ? ;\", selectChannelInfoPrepFuture);\n\n        Future<PreparedStatement> selectRssLinkByLoginPrepFuture = Future.future();\n        client.prepare(\"SELECT rss_link FROM rss_by_user WHERE login = ? ;\", selectRssLinkByLoginPrepFuture);\n\n        Future<PreparedStatement> insertNewLinkForUserPrepFuture = Future.future();\n        client.prepare(\"INSERT INTO rss_by_user (login , rss_link ) VALUES ( ?, ?);\", insertNewLinkForUserPrepFuture);\n\n        return CompositeFuture.all(\n                selectChannelInfoPrepFuture.compose(preparedStatement -> {\n                    selectChannelInfo = preparedStatement;\n                    return Future.succeededFuture();\n                }),\n                selectRssLinkByLoginPrepFuture.compose(preparedStatement -> {\n                    selectRssLinksByLogin = preparedStatement;\n                    return Future.succeededFuture();\n                }),\n                insertNewLinkForUserPrepFuture.compose(preparedStatement -> {\n                    insertNewLinkForUser = preparedStatement;\n                    return Future.succeededFuture();\n                })\n        ).mapEmpty();\n    }\n```\n\n----------------------------------------\n\nTITLE: Simple Python Script for Deploying Vert.x Web Server\nDESCRIPTION: A minimal Python script that configures and deploys a Vert.x web server module with basic port and host settings. This serves as the initial setup for the web application.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/python_web_tutorial.md#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nweb_server_conf = {\n  'port' : 8080,\n  'host' : 'localhost'\n}\n\n# Start the web server, with the config we defined above\nimport vertx\n\nvertx.deploy_module('vertx.web-server-v1.0', web_server_conf)\n```\n\n----------------------------------------\n\nTITLE: Appending Data to Vert.x Buffer\nDESCRIPTION: Examples of appending different data types to a Vert.x buffer including numbers, strings and other buffers. Shows chaining of append operations.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_ruby.md#2025-04-19_snippet_17\n\nLANGUAGE: ruby\nCODE:\n```\nbuff = Vertx::Buffer.create\n\nbuff.append_fixnum(100, 1) # Append a single byte in the buffer\nbuff.append_fixnum(231243, 8) # Append number as 8 bytes in the buffer\nbuff.append_str('foo').append_float(23.4232, 4) # Appends can be chained\n\nsocket.write_buffer(buff)\n```\n\n----------------------------------------\n\nTITLE: Creating Fat Jar using Vert.x CLI\nDESCRIPTION: Shows the Vert.x command line instructions for creating a fat jar. It includes an optional output directory parameter.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/mods_manual.md#2025-04-19_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nvertx fatjar <module_name>\n```\n\nLANGUAGE: bash\nCODE:\n```\nvertx fatjar <module_name> <output_directory>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Real-Time Drawing App\nDESCRIPTION: The HTML template for the drawing application that includes a canvas element and necessary JavaScript libraries including jQuery, SockJS, and the Vert.x event bus bridge.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2015-08-31-vertx-3-real-time-web-apps.md#2025-04-19_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"utf-8\"/>\n  <title>Real time drawing App</title>\n  <!--[if lt IE 9]>\n  <script src=\"http://html5shiv.googlecode.com/svn/trunk/html5.js\"></script>\n  <![endif]-->\n</head>\n\n<body>\n<canvas id=\"paper\" width=\"1900\" height=\"1000\">\n  Your browser needs to support canvas for this to work!\n</canvas>\n\n<!-- JavaScript includes. -->\n<script src=\"http://code.jquery.com/jquery-1.8.0.min.js\"></script>\n<script src=\"//cdn.jsdelivr.net/sockjs/0.3.4/sockjs.min.js\"></script>\n<script src='assets/js/vertxbus.js'></script>\n<script src=\"assets/js/script.js\"></script>\n\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Testing User Role Access with Keycloak Token\nDESCRIPTION: Example of testing the user role authorization by calling the protected route with a user token. Shows the JSON response when the user has the appropriate role.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2020-10-01-jwt-auth-with-keycloak.md#2025-04-19_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncurl --silent -H \"Authorization: Bearer $KC_ACCESS_TOKEN\" http://localhost:3000/api/user\n```\n\n----------------------------------------\n\nTITLE: Production Configuration for Vert.x JDBC\nDESCRIPTION: Production configuration file with JDBC settings for file-based HSQLDB database.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/intro-series/2015-10-19-post-05-using-the-asynchronous-sql-client.md#2025-04-19_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"http.port\" : 8082,\n  \"url\": \"jdbc:hsqldb:file:db/whiskies\",\n  \"driver_class\": \"org.hsqldb.jdbcDriver\"\n}\n```\n\n----------------------------------------\n\nTITLE: SPI Combination Example\nDESCRIPTION: Example of SPI (Service Provider Interface) combination during packaging, showing the content of a service file before and after combination.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/f8-vertx-maven-plugin-series/2016-12-07-post-01-getting-started-with-new-fabric8-vertx-maven-plugin.md#2025-04-19_snippet_7\n\nLANGUAGE: Java\nCODE:\n```\nfoo.bar.baz.MyImpl\n${combine}\n```\n\nLANGUAGE: Java\nCODE:\n```\nfoo.bar.baz.MyImpl\nfoo.bar.baz2.MyImpl2\n```\n\n----------------------------------------\n\nTITLE: Deploying MongoDB Persistor and Web Server Modules with Container\nDESCRIPTION: Enhanced version of the application setup that deploys both the MongoDB persistor module and the web server module using the container context. This allows both modules to run simultaneously in the Vert.x environment.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/groovy_web_tutorial.md#2025-04-19_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\ndef webServerConf = [\n  port: 8080,\n  host: 'localhost'\n]\n\ncontainer.with {\n  // Deploy a MongoDB persistor module\n  deployModule('vertx.mongo-persistor-v1.2')\n\n  // Start the web server, with the config we defined above\n  deployModule('vertx.web-server-v1.0', webServerConf)\n}\n```\n\n----------------------------------------\n\nTITLE: Unregistering an Event Bus Handler in Ruby\nDESCRIPTION: Demonstrates how to unregister a previously registered event bus handler using its ID.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_ruby.md#2025-04-19_snippet_8\n\nLANGUAGE: Ruby\nCODE:\n```\nVertx::EventBus.unregister_handler('test.address', id);\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Main Class for Vert.x Application in Java\nDESCRIPTION: This code snippet demonstrates a custom Main class for a Vert.x application. It creates a Vertx instance and deploys a MainVerticle.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2015-12-20-automatic-redeployment-in-eclipse-ide.md#2025-04-19_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage org.acme.vertx;\n\nimport io.vertx.core.Vertx;\n\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\t\tVertx vertx = Vertx.vertx();\n\t\tvertx.deployVerticle(MyMainVerticle.class.getName());\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Memory Usage of Native and JVM Vert.x Applications\nDESCRIPTION: Bash commands to measure and compare the memory usage (maxRSS) of the native image and Java JAR versions of the Vert.x application using the 'time' command.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2018-05-31-vertx-native.md#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n/usr/bin/time -f \"\\nmaxRSS\\t%MkB\" java -jar target/vertx-graalvm-native-image-test-0.0.1-SNAPSHOT.jar \n/usr/bin/time -f \"\\nmaxRSS\\t%MkB\" ./vertx-graalvm-native-image-test-0.0.1-SNAPSHOT \n```\n\n----------------------------------------\n\nTITLE: Configuring EmbedMongo Maven Plugin\nDESCRIPTION: XML configuration for the EmbedMongo Maven plugin, used to start and stop a MongoDB server for integration tests.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/intro-series/2015-11-30-post-06-combine-vertx-and-mongo-to-build-a-giant.md#2025-04-19_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<plugin>\n    <groupId>com.github.joelittlejohn.embedmongo</groupId>\n    <artifactId>embedmongo-maven-plugin</artifactId>\n    <version>0.2.0</version>\n    <executions>\n      <execution>\n        <id>start</id>\n        <goals>\n          <goal>start</goal>\n        </goals>\n        <configuration>\n          <port>37017</port>\n        </configuration>\n      </execution>\n      <execution>\n        <id>stop</id>\n        <goals>\n          <goal>stop</goal>\n        </goals>\n      </execution>\n    </executions>\n</plugin>\n```\n\n----------------------------------------\n\nTITLE: Pulling Module Dependencies in Vert.x\nDESCRIPTION: Demonstrates the Vert.x command to pull in module dependencies specified in the mod.json file and add them to a nested mods directory inside the module.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/mods_manual.md#2025-04-19_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nvertx pulldeps <module_name>\n```\n\n----------------------------------------\n\nTITLE: Using Shared Set Data in Ruby with Vert.x\nDESCRIPTION: Shows how to use shared set data structures between verticles in Vert.x, including getting a reference to a shared set and adding values to it.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_ruby.md#2025-04-19_snippet_15\n\nLANGUAGE: Ruby\nCODE:\n```\nset = Vertx::SharedData.getSet('demo.myset')\n\nset.add('some-value');\n```\n\nLANGUAGE: Ruby\nCODE:\n```\nset = Vertx::SharedData.getSet('demo.myset')\n\n# Do something with the set\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Web Server in Ruby\nDESCRIPTION: Basic Ruby script to configure and start a Vert.x web server module on localhost port 8080.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/ruby_web_tutorial.md#2025-04-19_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"vertx\"\n\nweb_server_conf = {\n  'port' => 8080,\n  'host' => 'localhost'\n}\n\n# Start the web server, with the config we defined above\n\nVertx.deploy_module('vertx.web-server-v1.0', web_server_conf)\n```\n\n----------------------------------------\n\nTITLE: Retrieving file properties with Vert.x FileSystem in Ruby\nDESCRIPTION: Demonstrates how to retrieve properties of a file using the props method. This snippet shows how to access file metadata such as access times and file type.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_ruby.md#2025-04-19_snippet_99\n\nLANGUAGE: ruby\nCODE:\n```\nVertx::FileSystem.props('some-file.txt') do |err, props|\n    if err\n        puts \"Failed to retrieve file props: #{err}\"\n    else\n        puts 'File props are:'\n        puts \"Last accessed: #{props.last_access_time}\"\n        // etc\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Maven Dependency for Vert.x MQTT\nDESCRIPTION: Maven dependency configuration to add Vert.x MQTT client to a project\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2017-08-21-introducing-vertx-mqtt-client.md#2025-04-19_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>io.vertx</groupId>\n    <artifactId>vertx-mqtt</artifactId>\n    <version>3.5.0.Beta1</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: MongoDB Integration Test Configuration JSON\nDESCRIPTION: JSON configuration file for integration tests specifying MongoDB connection parameters and HTTP port.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/intro-series/2015-11-30-post-06-combine-vertx-and-mongo-to-build-a-giant.md#2025-04-19_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n\t{\n\t  \"http.port\": ${http.port},\n\t  \"db_name\": \"whiskies-it\",\n\t  \"connection_string\": \"mongodb://localhost:37017\"\n\t}\n```\n\n----------------------------------------\n\nTITLE: Random Access Buffer Writing\nDESCRIPTION: Demonstrates writing data at specific buffer positions using set_XXX methods for various data types.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_ruby.md#2025-04-19_snippet_18\n\nLANGUAGE: ruby\nCODE:\n```\nbuff = Vertx::Buffer.create\n\nbuff.set_fixnum(0, 4, 123123) # Set number as 4 bytes written at index 0 \nbuff.set_float(1000, 8, 414.123123123) # Set float as 8 bytes at index 1000\n```\n\n----------------------------------------\n\nTITLE: Buffer Append Operations in Groovy\nDESCRIPTION: Demonstrates different methods to append data to a Vert.x buffer using appendXXX methods and leftShift operator\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_groovy.md#2025-04-19_snippet_21\n\nLANGUAGE: groovy\nCODE:\n```\ndef buff = new Buffer()\n\n// You can use the appendXXX methods\n\nbuff.appendInt(123).appendString(\"hello\").appendChar('\\n')\n\n// Or use the leftShift operator\n\nbuff << 123 << \"hello\" << '\\n'\n\nsocket << buff\n```\n\n----------------------------------------\n\nTITLE: Web API Service Interface Definition\nDESCRIPTION: Java interface annotated with @WebApiServiceGen defining transaction management operations with OperationRequest and OperationResponse handling.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2018-12-13-vertx-web-api-service.md#2025-04-19_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nimport io.vertx.ext.web.api.*;\nimport io.vertx.ext.web.api.generator.WebApiServiceGen;\n\n@WebApiServiceGen\npublic interface TransactionsManagerService {\n  void getTransactionsList(List<String> from, OperationRequest context, Handler<AsyncResult<OperationResponse>> resultHandler);\n  void addTransaction(Transaction body, OperationRequest context, Handler<AsyncResult<OperationResponse>> resultHandler);\n  void updateTransaction(String transactionId, Transaction body, OperationRequest context, Handler<AsyncResult<OperationResponse>> resultHandler);\n  void removeTransaction(String transactionId, OperationRequest context, Handler<AsyncResult<OperationResponse>> resultHandler);\n\n  // Factory method to instantiate the implementation\n  static TransactionsManagerService create(Vertx vertx) {\n    return new TransactionsManagerServiceImpl(vertx);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying MQTT Verticle\nDESCRIPTION: Java code showing how to deploy the MQTT client verticle in a Vert.x application\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2017-08-21-introducing-vertx-mqtt-client.md#2025-04-19_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nVertx vertx = Vertx.vertx();\nvertx.deployVerticle(MainVerticle.class.getCanonicalName());\n```\n\n----------------------------------------\n\nTITLE: Setting Module Author in mod.json\nDESCRIPTION: Specifies the primary author of the module in mod.json, which is mandatory for registering in the Vert.x module registry.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/mods_manual.md#2025-04-19_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n\"author\": \"Joe Bloggs\"\n```\n\n----------------------------------------\n\nTITLE: Adding Gradle Dependency for Vert.x MQTT\nDESCRIPTION: Gradle dependency configuration to add Vert.x MQTT client to a project\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2017-08-21-introducing-vertx-mqtt-client.md#2025-04-19_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n  compile 'io.vertx:vertx-mqtt:3.5.0.Beta1'\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving File Properties with Vert.x FileSystem in Groovy\nDESCRIPTION: Shows how to retrieve file properties using the Vert.x FileSystem API. This example accesses properties like lastAccessTime from the result object.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_groovy.md#2025-04-19_snippet_76\n\nLANGUAGE: groovy\nCODE:\n```\nvertx.fileSystem(\"foo.dat\", \"bar.dat\") { ar ->\n    if (ar.succeeeded()) {        \n        println \"Props are: Last accessed: ${ar.result.lastAccessTime}\"\n        // etc\n    } else {\n        log.error(\"Failed to get props\", ar.exception)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping File Extensions to Language Implementations\nDESCRIPTION: Example of how to map specific file extensions to your language implementation in the Vert.x configuration. This allows Vert.x to automatically use the right language module based on file extensions.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/language_support.md#2025-04-19_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\n.cbl=cobol\n```\n\n----------------------------------------\n\nTITLE: Reading from Vert.x Buffer\nDESCRIPTION: Examples of reading different data types from specific positions in a buffer using get_XXX methods.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_ruby.md#2025-04-19_snippet_19\n\nLANGUAGE: ruby\nCODE:\n```\nnum = buff.get_byte(100)                 # Get a byte from pos 100 in buffer\n\nnum = buff.get_fixnum(100, 1)            # Same as get_byte\n\nnum = buff.get_fixnum(100, 2)            # Get two bytes as signed integer from pos 100\n```\n\n----------------------------------------\n\nTITLE: Configuring Multicast Address in AMQP Dispatch Router\nDESCRIPTION: This configuration snippet sets up a multicast address in the Apache Qpid Dispatch router for broadcasting live score updates to multiple clients.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2017-01-25-building-services-and-apis-with-amqp.md#2025-04-19_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\naddress {  \n    prefix: /liveScores  \n    distribution: multicast  \n}  \n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Vert.x Gradle Plugin in build.gradle\nDESCRIPTION: Minimal configuration for the Vert.x Gradle plugin in a build.gradle file. It sets up the plugin, repository, and specifies the main verticle.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2017-09-28-vertx-gradle-plugin.md#2025-04-19_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nplugins {\n  id 'io.vertx.vertx-plugin' version '0.0.4'\n}\n\nrepositories {\n  jcenter()\n}\n\nvertx {\n  mainVerticle = 'sample.App'\n}\n```\n\n----------------------------------------\n\nTITLE: Route Handler Implementation\nDESCRIPTION: Code for handling different routes and processing JSON responses from Gentics Mesh\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2017-03-08-building-apps-with-vertx-and-mesh.md#2025-04-19_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n<script src=\"https://gist.github.com/Jotschi/39fc0d3fcd45122eafe68d61bea4c120.js?file=routeHandler.java\"></script>\n```\n\n----------------------------------------\n\nTITLE: Setting Module Description in mod.json\nDESCRIPTION: Adds a description field to mod.json, which is mandatory for registering the module in the Vert.x module registry.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/mods_manual.md#2025-04-19_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n\"description\": \"This module implements a highly scalable toaster. The toaster.....\"\n```\n\n----------------------------------------\n\nTITLE: Reading symbolic links with Vert.x FileSystem in Ruby\nDESCRIPTION: Shows how to read the path that a symbolic link points to using the read_sym_link method.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_ruby.md#2025-04-19_snippet_100\n\nLANGUAGE: ruby\nCODE:\n```\nVertx::FileSystem.read_sym_link('somelink') do |err, res|\n    puts \"Link points at #{res}\" if !err\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Vert.x Web GraphQL Maven Dependency\nDESCRIPTION: Maven dependency configuration for including the Vert.x Web GraphQL module in a project.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/releases/2019-04-02-vertx-3.7.0-release.md#2025-04-19_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>io.vertx</groupId>\n  <artifactId>vertx-web-graphql</artifactId>\n  <version>3.7.0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Adding Vert.x Unit Dependency with Gradle\nDESCRIPTION: Gradle configuration to add Vert.x Unit as a test dependency. This single line adds the necessary library for testing Vert.x applications.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2016-01-18-using-hamcrest-matchers-with-vertx-unit.md#2025-04-19_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\ntestCompile 'io.vertx:vertx-unit:3.2.0'\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Shade Plugin for Vert.x Fat JAR\nDESCRIPTION: Maven plugin configuration to create a fat JAR containing the Vert.x application and all its dependencies. Specifies the Main-Class as Vert.x Starter and configures the Main-Verticle entry point.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/intro-series/2015-07-14-post-01-my-first-vertx-3-application.md#2025-04-19_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<plugin>\n  <groupId>org.apache.maven.plugins</groupId>\n  <artifactId>maven-shade-plugin</artifactId>\n  <version>2.3</version>\n  <executions>\n    <execution>\n      <phase>package</phase>\n      <goals>\n        <goal>shade</goal>\n      </goals>\n      <configuration>\n        <transformers>\n          <transformer\n            implementation=\"org.apache.maven.plugins.shade.resource.ManifestResourceTransformer\">\n            <manifestEntries>\n              <Main-Class>io.vertx.core.Starter</Main-Class>\n              <Main-Verticle>io.vertx.blog.first.MyFirstVerticle</Main-Verticle>\n            </manifestEntries>\n          </transformer>\n        </transformers>\n        <artifactSet/>\n        <outputFile>${project.build.directory}/${project.artifactId}-${project.version}-fat.jar</outputFile>\n      </configuration>\n    </execution>\n  </executions>\n</plugin>\n```\n\n----------------------------------------\n\nTITLE: Running Vert.x Module from Zip File\nDESCRIPTION: Shows how to run a Vert.x module directly from a zip file without pre-installation using the 'vertx runzip' command.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/manual.md#2025-04-19_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nvertx runzip my-mod~2.0.1.zip\n```\n\n----------------------------------------\n\nTITLE: Defining RAML Contract for Hello World REST API\nDESCRIPTION: This YAML snippet defines the RAML contract for a simple Hello World REST API. It specifies the API title, base URI, version, and a single GET endpoint '/hello' that returns a JSON response.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2015-09-17-contract-driven-rest-services-with-vertx-3.md#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n#%RAML 0.8\ntitle: Hello world REST API\nbaseUri: http://localhost:8080/\nversion: v1\n/hello:\n  get:\n    responses:\n      200:\n        body:\n          application/json:\n            schema: |\n              { \"$schema\": \"http://json-schema.org/schema\",\n                \"type\": \"object\",\n                \"description\": \"Hello World Greeting\",\n                \"properties\": {\n                  \"greeting\":  { \"type\": \"string\" }\n                },\n                \"required\": [ \"greeting\" ]\n              }\n```\n\n----------------------------------------\n\nTITLE: Application Coordinator Verticle\nDESCRIPTION: Example of a main application Verticle that coordinates the deployment of multiple component Verticles with their respective configurations.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_js.md#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Application config\n\nvar appConfig = {\n    verticle1Config: {\n        // Config for verticle1\n    },\n    verticle2Config: {\n        // Config for verticle2\n    }, \n    verticle3Config: {\n        // Config for verticle3\n    },\n    verticle4Config: {\n        // Config for verticle4\n    },\n    verticle5Config: {\n        // Config for verticle5\n    }  \n}  \n\n// Start the verticles that make up the app  \n\nvertx.deployVerticle(\"verticle1.js\", appConfig.verticle1Config);\nvertx.deployVerticle(\"verticle2.js\", appConfig.verticle2Config, 5);\nvertx.deployVerticle(\"verticle3.js\", appConfig.verticle3Config);\nvertx.deployWorkerVerticle(\"verticle4.js\", appConfig.verticle4Config);\nvertx.deployWorkerVerticle(\"verticle5.js\", appConfig.verticle5Config, 10);\n```\n\n----------------------------------------\n\nTITLE: Configuring Java Module in mod.json\nDESCRIPTION: Configures mod.json for a Java-based module, specifying the main class to be executed.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/mods_manual.md#2025-04-19_snippet_10\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"main\": \"com.mycompany.mymod.App\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating TCP Client\nDESCRIPTION: Demonstrates the creation of a basic TCP client instance.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_ruby.md#2025-04-19_snippet_33\n\nLANGUAGE: ruby\nCODE:\n```\nclient = Vertx::NetClient.new\n```\n\n----------------------------------------\n\nTITLE: Generating IntelliJ IDEA Project\nDESCRIPTION: Maven command to generate IntelliJ IDEA project files from the Maven project.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/maven_dev.md#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmvn idea:idea\n```\n\n----------------------------------------\n\nTITLE: Implementing SockJS Server in Vert.x 3 with Groovy\nDESCRIPTION: This code demonstrates how to create a WebServer with a SockJS handler in Vert.x 3. It shows the setup of an SSL-enabled HTTP server, creation of a Router, and configuration of a SockJS endpoint. The example extends GroovyVerticle instead of the previous Verticle class.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2015-07-06-checklist-for-migrating-from-vertx-2-1-x-to-vertx-3-part-one.md#2025-04-19_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\npublic class MyVerticle extends GroovyVerticle {\n  Router router\n\n  @Override\n  void start() throws Exception {\n     router = Router.router(vertx)\n     (Map<String, Object>) sslConfig =\n        (Map<String, Object>)vertx.getOrCreateContext()\n          .config().get('ssl')\n\n     HttpServer sslHttpServer = vertx.createHttpServer(\n         SSL: true,\n         keyStorePath: sslConfig.get(\"keystore\"),\n         keyStorePassword: sslConfig.get(\"password\"))\n\n     startWebApiServer(sslHttpServer)\n  }\n\n  private void startWebApiServer(final HttpServer httpServer) {\n    def sockHandler = SockJSHandler.create(vertx, [:])\n    sockHandler.socketHandler {\n      SockJSSocket ws -> sockJSConnectHandler(ws)\n    }\n    router.route(\"/hdpoker\").handler(sockHandler)\n    httpServer.requestHandler(router.&accept)\n    httpServer.listen()\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Data from Buffer\nDESCRIPTION: Shows how to read various data types from specific positions in a buffer using get methods.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_js.md#2025-04-19_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nvar buff = ...;\nfor (var i = 0; i < buff.length(); i += 4) {\n    console.log(\"int value at \" + i + \" is \" + buff.getInt(i));\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Language Module in langs.properties\nDESCRIPTION: Example of how to register a new language implementation in the Vert.x langs.properties configuration file. This specifies the module identifier and the VerticleFactory implementation class.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/language_support.md#2025-04-19_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\ncobol=com.company~lang-cobol~1.0.0:com.mycompany.langmod.CobolVerticleFactory\n```\n\n----------------------------------------\n\nTITLE: Obtaining an Admin Access Token from Keycloak\nDESCRIPTION: Bash script to obtain a JWT access token for a user with admin privileges. This example authenticates the user 'vadmin' who has both 'admin' and 'user' roles.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2020-10-01-jwt-auth-with-keycloak.md#2025-04-19_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nKC_USERNAME=vadmin\nKC_PASSWORD=test\nKC_CLIENT=vertx-service\nKC_CLIENT_SECRET=ecb85cc5-f90d-4a03-8fac-24dcde57f40c\nKC_REALM=vertx\nKC_URL=http://localhost:8080/auth\nKC_RESPONSE=$(curl  -k \\\n        -d \"username=$KC_USERNAME\" \\\n        -d \"password=$KC_PASSWORD\" \\\n        -d 'grant_type=password' \\\n        -d \"client_id=$KC_CLIENT\" \\\n        -d \"client_secret=$KC_CLIENT_SECRET\" \\\n        \"$KC_URL/realms/$KC_REALM/protocol/openid-connect/token\" \\\n    | jq .)\n\nKC_ACCESS_TOKEN=$(echo $KC_RESPONSE| jq -r .access_token)\necho $KC_ACCESS_TOKEN\n```\n\n----------------------------------------\n\nTITLE: Creating directories with parent paths in Vert.x FileSystem\nDESCRIPTION: Demonstrates how to create a directory along with its parent directories using the mkdir method with the create_parents parameter set to true.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_ruby.md#2025-04-19_snippet_101\n\nLANGUAGE: ruby\nCODE:\n```\nVertx::FileSystem.mkdir('a/b/c', true) do |err, res|\n   puts \"Directory created ok\" if !err       \nend\n```\n\n----------------------------------------\n\nTITLE: Deploying Authentication Manager in Ruby\nDESCRIPTION: Adds the authentication manager module to handle user authentication in the Vert.x application.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/ruby_web_tutorial.md#2025-04-19_snippet_7\n\nLANGUAGE: Ruby\nCODE:\n```\nVertx.deploy_module('vertx.auth-mgr-v1.1')\n```\n\n----------------------------------------\n\nTITLE: Deploying Chime Verticle in Java\nDESCRIPTION: Demonstrates deploying the Chime verticle in a Java application\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2017-05-09-Time-scheduling-with-Chime.md#2025-04-19_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nvertx.deployVerticle(\"ceylon:herd.schedule.chime/0.2.1\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Vert.x Event Loop Pool Size\nDESCRIPTION: Demonstrates how to configure the size of the Vert.x event loop thread pool using a system property.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/manual.md#2025-04-19_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n-Dvertx.pool.eventloop.size=<size>\n```\n\n----------------------------------------\n\nTITLE: Vert.x Web Cache Freshness Check\nDESCRIPTION: Shows how to verify if a request is fresh with respect to cache headers in Vert.x Web.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/releases/2019-09-19-vertx-4-milestone3-release.md#2025-04-19_snippet_9\n\nLANGUAGE: java\nCODE:\n```\nif (rc.isFresh()) {\n  // client cache value is fresh perhaps we\n  // can stop and return 304?\n}\n```\n\n----------------------------------------\n\nTITLE: Starting TCP Server with Basic Listening\nDESCRIPTION: Creates and configures a Vert.x TCP server to listen on a specific port and host.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_ruby.md#2025-04-19_snippet_24\n\nLANGUAGE: ruby\nCODE:\n```\nserver = Vertx::NetServer.new\n\nserver.listen(1234, 'myhost')\n```\n\n----------------------------------------\n\nTITLE: Accessing MX Record Properties in Vert.x\nDESCRIPTION: Demonstrates how to access the properties of an MX record object, which includes priority and name properties.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_js.md#2025-04-19_snippet_97\n\nLANGUAGE: javascript\nCODE:\n```\nrecord = records[0]\nrecord.priority\nrecord.name\n```\n\n----------------------------------------\n\nTITLE: Adding AMQP Client Gradle Dependency\nDESCRIPTION: Gradle dependency configuration for including the Vert.x AMQP client module.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/releases/2019-04-02-vertx-3.7.0-release.md#2025-04-19_snippet_12\n\nLANGUAGE: gradle\nCODE:\n```\ncompile 'io.vertx:vertx-amqp-client:3.7.0'\n```\n\n----------------------------------------\n\nTITLE: Using Async Completion in Vert.x 3 Unit Tests\nDESCRIPTION: The new approach for completing asynchronous tests in Vert.x 3, replacing the VertxAssert.testComplete() method from Vert.x 2. This creates an async handler that must be completed to signal test completion.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2015-07-06-checklist-for-migrating-from-vertx-2-1-x-to-vertx-3-part-one.md#2025-04-19_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nTestContext.async().complete()\n```\n\n----------------------------------------\n\nTITLE: Running an Application Starter Verticle\nDESCRIPTION: Commands to run or deploy an application starter verticle using the Vert.x command-line interface.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_groovy.md#2025-04-19_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nvertx run app.groovy\n```\n\nLANGUAGE: bash\nCODE:\n```\nvertx deploy app.groovy\n```\n\n----------------------------------------\n\nTITLE: Selectively Accepting WebSocket Connections in Vert.x\nDESCRIPTION: Shows how to selectively accept or reject WebSocket connections based on the requested path. Implements an echo service for a specific path and rejects other connections.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_ruby.md#2025-04-19_snippet_81\n\nLANGUAGE: ruby\nCODE:\n```\nserver = Vertx::HttpServer.new\n\nserver.websocket_handler do |websocket|\n\n  if websocket.path == '/services/echo'\n    p = Vertx::Pump.new(websocket, websocket)\n    p.start\n  else\n    websocket.reject\n  end\nend.listen(8080, 'localhost')\n```\n\n----------------------------------------\n\nTITLE: Running Java Verticle with Custom Classpath\nDESCRIPTION: Example of running 10 instances of a pre-compiled Java verticle, specifying a custom classpath.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/manual.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nvertx run com.acme.MyVerticle -cp \"classes:lib/myjar.jar\" -instances 10\n```\n\n----------------------------------------\n\nTITLE: Executing Vert.x Fat Jar\nDESCRIPTION: Demonstrates running a Vert.x module packaged as a fat jar, including passing command line arguments and specifying extra classpath.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/manual.md#2025-04-19_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\njava -jar mymodule-1.0-fat.jar\n```\n\nLANGUAGE: bash\nCODE:\n```\njava -jar mymodule-1.0-fat.jar -cluster -conf myconf.json\n```\n\nLANGUAGE: bash\nCODE:\n```\njava -jar mymodule-1.0-fat.jar -cluster -conf myconf.json -cp path/to/dir/containiner/cluster_xml\n```\n\n----------------------------------------\n\nTITLE: Loading Static Data After Persistor Deployment in Ruby\nDESCRIPTION: Script showing how to load static data after MongoDB persistor module is fully deployed.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/ruby_web_tutorial.md#2025-04-19_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nVertx.deploy_module('vertx.mongo-persistor-v1.2') do\n  load('static_data.rb')\nend\n```\n\n----------------------------------------\n\nTITLE: Running Ruby Worker Verticle\nDESCRIPTION: Example of running multiple instances of a Ruby worker verticle\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/manual.md#2025-04-19_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nvertx run order_worker.rb -instances 20 -worker\n```\n\n----------------------------------------\n\nTITLE: Cassandra Schema Definition\nDESCRIPTION: SQL schema for storing RSS feeds, articles and channel information in Cassandra\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2018-08-20-the-first-step-rss-reader.md#2025-04-19_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE rss_by_user (login text , rss_link text, PRIMARY KEY (login, rss_link));\nCREATE TABLE articles_by_rss_link(rss_link text, pubDate timestamp, title text, article_link text, description text, PRIMARY KEY ( rss_link , pubDate , article_link));\nCREATE TABLE channel_info_by_rss_link(rss_link text, last_fetch_time timestamp,title text, site_link text, description text, PRIMARY KEY(rss_link));\n```\n\n----------------------------------------\n\nTITLE: Verticle Undeployment Example\nDESCRIPTION: Example showing how to programmatically undeploy a Verticle using its deployment ID.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_js.md#2025-04-19_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar deploymentID = vertx.deployVerticle('my_verticle.js');    \n\nvertx.undeployVerticle(deploymentID);\n```\n\n----------------------------------------\n\nTITLE: Checking if a file exists with Vert.x FileSystem\nDESCRIPTION: Shows how to check if a file exists on the filesystem using the exists? method.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_ruby.md#2025-04-19_snippet_104\n\nLANGUAGE: ruby\nCODE:\n```\nVertx::FileSystem.exists?('some-file.txt') do |err, res|\n    puts \"File #{res ? 'exists' : 'does not exist'}\" if !err        \nend\n```\n\n----------------------------------------\n\nTITLE: Prometheus Configuration for Scraping Vert.x Metrics from Existing HTTP Server\nDESCRIPTION: YAML configuration snippet for Prometheus to scrape metrics from Vert.x applications using an existing HTTP server.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2018-04-09-vertx-micrometer-metrics.md#2025-04-19_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n- job_name: 'vertx-8080'\n  static_configs:\n    - targets: ['localhost:8080']\n```\n\n----------------------------------------\n\nTITLE: Configuring Module Descriptor in JSON\nDESCRIPTION: Example of a basic mod.json file that specifies the main entry point for a Vert.x module. The main field indicates which file should be executed when the module is deployed.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/mods_manual.md#2025-04-19_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"main\": \"mailer.js\"\n}\n```\n\n----------------------------------------\n\nTITLE: Basic HTML Hello World Page\nDESCRIPTION: Simple HTML file used to test the web server functionality.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/ruby_web_tutorial.md#2025-04-19_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<html><body>Hello World</body></html>\n```\n\n----------------------------------------\n\nTITLE: Creating package.json for Vert.x3 Hello World Project\nDESCRIPTION: Basic package.json configuration for a Vert.x3 project using the minimal dependency. It defines the project name, dependencies, and npm scripts to run the Vert.x application.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2015-07-13-vertx3-says-hello-to-npm-users.md#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"name\": \"vertx3-hello-console\",\n  \"private\": true,\n  \"dependencies\": {\n    \"vertx3-min\": \"3.0.0-1\"\n  },\n  \"scripts\": {\n    \"start\": \"./node_modules/.bin/vertx run server.js\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Resolving NS (Name Server) Records in Vert.x\nDESCRIPTION: Demonstrates how to resolve NS records which specify which DNS servers host the DNS information for a domain. Returns an array of string addresses.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_js.md#2025-04-19_snippet_99\n\nLANGUAGE: javascript\nCODE:\n```\nclient.resolveNS('vertx.io', function(err, records) {\n    if (err != null) {\n        console.log( \"Failed to resolve entry \" + err );\n    } else {\n        console.log( records.toString() );\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: SockJS Server and Socket Implementation\nDESCRIPTION: SockJS server and socket implementations for real-time bidirectional communication including bridge support and event handling.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/api/epydoc/api-objects.txt#2025-04-19_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Random Access Buffer Writing in Groovy\nDESCRIPTION: Shows how to write data at specific buffer positions using setXXX methods and subscript operator\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_groovy.md#2025-04-19_snippet_22\n\nLANGUAGE: groovy\nCODE:\n```\ndef buff = new Buffer()\n\nbuff.setInt(1000, 123)\nbuff.setBytes(0, \"hello\")\n\n// Using subscript operator\ndef buff = new Buffer()\n\nbuff[1000] = 123\nbuff[0] = \"hello\"\n```\n\n----------------------------------------\n\nTITLE: Handling DNS Exceptions in Vertx DNS Client - Ruby\nDESCRIPTION: Example showing how to create a DNS client, perform a lookup, and handle potential DNS exceptions by checking the response code. The code demonstrates error handling for DNS queries and accessing the specific DNS response code from DnsException objects.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_ruby.md#2025-04-19_snippet_113\n\nLANGUAGE: ruby\nCODE:\n```\nclient = Vertx::DnsClient.new(Addrinfo.tcp('10.0.0.1', 53))\nclient.lookup('nonexisting.vertx.io') do |err, result|\n    if err\n        if err instanceof org.vertx.java.core.dns.DnsException\n            exception = (org.vertx.java.core.dns.DnsException) err\n            code = exception.code()\n            ...\n        else\n            puts \"Failed to resolve entry #{err}\"\n        end\n    else\n        puts result\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Starting Keycloak Docker Container for Vert.x JWT Authorization\nDESCRIPTION: Command to start a Keycloak Docker container with a preconfigured realm for Vert.x JWT authorization. It sets up the admin credentials, imports a realm configuration, and maps volumes for persistence.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2020-10-01-jwt-auth-with-keycloak.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run \\\n  -it \\\n  --name vertx-keycloak \\\n  --rm \\\n  -e KEYCLOAK_USER=admin \\\n  -e KEYCLOAK_PASSWORD=admin \\\n  -e KEYCLOAK_IMPORT=/tmp/vertx-realm.json \\\n  -v $PWD/vertx-realm.json:/tmp/vertx-realm.json \\\n  -v $PWD/data:/opt/jboss/keycloak/standalone/data \\\n  -p 8080:8080 \\\n  quay.io/keycloak/keycloak:11.0.2\n```\n\n----------------------------------------\n\nTITLE: Publishing a Message on the Event Bus in Ruby\nDESCRIPTION: Demonstrates how to publish a message to the 'test.address' address on the Vert.x event bus.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_ruby.md#2025-04-19_snippet_10\n\nLANGUAGE: Ruby\nCODE:\n```\nVertx::EventBus.send('test.address\", 'hello world')\n```\n\n----------------------------------------\n\nTITLE: Creating Vert.x Fat Jar\nDESCRIPTION: Shows the command to create a fat jar from a Vert.x module.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/manual.md#2025-04-19_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nvertx fatjar <module_name>\n```\n\n----------------------------------------\n\nTITLE: Cancelling Timers in Vert.x Ruby\nDESCRIPTION: Shows how to cancel both one-shot and periodic timers using their timer IDs.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_ruby.md#2025-04-19_snippet_22\n\nLANGUAGE: Ruby\nCODE:\n```\ntimer_id = Vertx.set_periodic(1000) do\n    # This will never be called\nend\n\n# And immediately cancel it\n\nVertx.cancel_timer(timer_id)\n```\n\nLANGUAGE: Ruby\nCODE:\n```\ncount = 0\n\nVertx.set_periodic(1000) do |timer_id|\n    puts \"In event handler #{count}\"\n    count += 1\n    vertx.cancelTimer(timer_id) if count == 10        \nend\n```\n\n----------------------------------------\n\nTITLE: Buffer Reading Operations in Groovy\nDESCRIPTION: Demonstrates reading data from a buffer using getXXX methods and subscript operator\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_groovy.md#2025-04-19_snippet_23\n\nLANGUAGE: groovy\nCODE:\n```\ndef buff = ...\nfor (i in 0 ..< buff.length) {\n    println \"byte value at $i is ${buff.getByte(i)}\"\n}\n\n// Using subscript operator\ndef buff = ...\nfor (i in 0 ..< buff.length) {\n    println \"byte value at $i is ${buff[i]}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Future-based methods in Scala with Vert.x 4\nDESCRIPTION: This example shows how to use the new Future-based methods in a Scala application with Vert.x 4. It creates an HTTP server and uses the 'listenFuture' method to handle the server startup asynchronously with a Scala Future.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2019-08-30-eclipse-vertx-for-scala-next-steps.md#2025-04-19_snippet_1\n\nLANGUAGE: scala\nCODE:\n```\npackage io.vertx.scala.demo\n\nimport io.vertx.lang.scala.VertxExecutionContext\nimport io.vertx.scala.core._\n\nimport scala.util.{Failure, Success}\n\nobject Main {\n  def main(args: Array[String]): Unit = {\n    val vertx = Vertx.vertx()\n    implicit val ec = VertxExecutionContext(vertx.getOrCreateContext())\n    vertx\n      .createHttpServer()\n      .requestHandler(r => {\n        r.response().end(\"bye\")\n      })\n      .listenFuture(6667)\n      .onComplete {\n        case Success(_) => println(\"Started\")\n        case Failure(exception) => println(\"Failure\")\n      }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Periodic Timer Implementation\nDESCRIPTION: Example of creating and managing periodic tasks in Vert.x with cancellation logic.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_ruby.md#2025-04-19_snippet_21\n\nLANGUAGE: ruby\nCODE:\n```\ncount = 0\n\nVertx.set_periodic(1000) do\n    puts \"In event handler #{count}\"\n    count += 1\n    vertx.cancelTimer(id) if count == 10        \nend\n```\n\n----------------------------------------\n\nTITLE: Closing an HTTP Client in Vert.x Ruby\nDESCRIPTION: Demonstrates how to explicitly close an HTTP client. Vert.x will automatically close clients when the verticle is stopped, but you can close them manually if needed.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_ruby.md#2025-04-19_snippet_66\n\nLANGUAGE: ruby\nCODE:\n```\nclient.close\n```\n\n----------------------------------------\n\nTITLE: Unregistering Event Bus Handler with Cluster Notification in Ruby\nDESCRIPTION: Demonstrates unregistering an event bus handler with a completion block that executes when the unregistration has been propagated across the cluster.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_ruby.md#2025-04-19_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\nVertx::EventBus.unregister_handler(id) do\n    puts 'Yippee! The handler unregister has been propagated across the cluster'\nend\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Structure for Auction Bidding Page\nDESCRIPTION: HTML markup for the auction bidding page, including elements for displaying current price, bid input, and a feed of recent bids.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2016-01-15-real-time-bidding-with-websockets-and-vertx.md#2025-04-19_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<h3>Auction 1</h3>\n<div id=\"error_message\"></div>\n<form>\n    Current price:\n    <span id=\"current_price\"></span>\n    <div>\n        <label for=\"my_bid_value\">Your offer:</label>\n        <input id=\"my_bid_value\" type=\"text\">\n        <input type=\"button\" onclick=\"bid();\" value=\"Bid\">\n    </div>\n    <div>\n        Feed:\n        <textarea id=\"feed\" rows=\"4\" cols=\"50\" readonly></textarea>\n    </div>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Deploying HttpVerticle using SBT Console in Scala\nDESCRIPTION: This snippet shows how to start the SBT console, deploy an HttpVerticle, and check deployment IDs. It demonstrates the use of Vert.x within the Scala REPL environment provided by SBT.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2017-03-16-vertx-lang-scala.md#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsbt\n> console\n```\n\nLANGUAGE: scala\nCODE:\n```\nscala> vertx.deployVerticle(nameForVerticle[HttpVerticle])\nscala> vertx.deploymentIDs\n```\n\n----------------------------------------\n\nTITLE: Running Groovy Class as Verticle\nDESCRIPTION: Example of running a compiled Groovy class as a verticle by explicitly specifying the language implementation.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/manual.md#2025-04-19_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nvertx run groovy:com.mycompany.MyGroovyMainVerticle\n```\n\n----------------------------------------\n\nTITLE: Querying articles by RSS link in Cassandra CQL\nDESCRIPTION: CQL query to select article details from the 'articles_by_rss_link' table based on the provided RSS link.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2018-12-06-the-last-step-rss-reader.md#2025-04-19_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nSELECT title, article_link, description, pubDate FROM articles_by_rss_link WHERE rss_link = RSS_LINK_FROM_REQUEST ;\n```\n\n----------------------------------------\n\nTITLE: Deploying Auth Manager in Groovy\nDESCRIPTION: Deploys the Vert.x authentication manager module for handling user authentication\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/groovy_web_tutorial.md#2025-04-19_snippet_6\n\nLANGUAGE: groovy\nCODE:\n```\ndeployModule('vertx.auth-mgr-v1.1')\n```\n\n----------------------------------------\n\nTITLE: Prometheus Configuration for Scraping Vert.x Metrics\nDESCRIPTION: YAML configuration snippet for Prometheus to scrape metrics from Vert.x applications.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2018-04-09-vertx-micrometer-metrics.md#2025-04-19_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n- job_name: 'vertx-8081'\n  static_configs:\n    - targets: ['localhost:8081']\n```\n\n----------------------------------------\n\nTITLE: Application Deployment Commands\nDESCRIPTION: Maven and Java commands for packaging and running the Vert.x application with MongoDB configuration.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/intro-series/2015-11-30-post-06-combine-vertx-and-mongo-to-build-a-giant.md#2025-04-19_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean verify\n```\n\nLANGUAGE: bash\nCODE:\n```\njava -jar target/my-first-app-1.0-SNAPSHOT-fat.jar \\\n  -conf src/main/conf/my-application-conf.json\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d -p 27017:27017 mongo\njava -jar target/my-first-app-1.0-SNAPSHOT-fat.jar \\\n  -conf src/main/conf/my-application-conf.json\n# or\njava -jar target/my-first-app-1.0-SNAPSHOT-fat.jar \\\n  -conf src/main/conf/my-application-conf-docker-machine.json\n```\n\n----------------------------------------\n\nTITLE: Implementing URL Argument Validation for Shell Command\nDESCRIPTION: Adds argument validation to check if the required URL parameter is provided when executing the HTTP client command. Ends the process with an error message if the URL is missing.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2016-01-25-intro-to-vertx-shell.md#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Check the url argument\nif (process.args().length < 1) {\n  process.write(\"Missing URL\\n\").end();\n  return;\n}\nvar url = process.args()[0];\n```\n\n----------------------------------------\n\nTITLE: Implementing Future-based API in Vert.x 4 NetClient\nDESCRIPTION: Demonstrates the evolution of the NetClient interface from callback-based (3.x) to a hybrid model supporting both callbacks and futures (4.0). Shows how Vert.x 4 extends the asynchronous programming model.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/releases/2019-07-26-vertx-4-milestone1-release.md#2025-04-19_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic interface NetClient {\n\n  // Since 3.0\n  void connect(int port, String host, Handler<AsyncResult<NetSocket>> handler);\n\n  // New in 4.0\n  Future<NetSocket> connect(int port, String host);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Shared Map in Vert.x with Groovy\nDESCRIPTION: Shows how to use a shared map to share data between different verticles in the same Vert.x instance.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_groovy.md#2025-04-19_snippet_18\n\nLANGUAGE: Groovy\nCODE:\n```\ndef map = vertx.sharedData.getMap('demo.mymap')\n\nmap[\"some-key\"] = 123\n```\n\n----------------------------------------\n\nTITLE: Publishing Vert.x Modules with Maven and Gradle\nDESCRIPTION: Shows commands for publishing Vert.x modules to Maven repositories using Maven and Gradle build tools.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/mods_manual.md#2025-04-19_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nmvn deploy\n```\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew uploadArchives\n```\n\n----------------------------------------\n\nTITLE: Generated Bottles API Interface in Java\nDESCRIPTION: An example of a generated API interface containing methods for each operation defined in the Swagger file.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2017-05-12-vertx-swagger-presentation.md#2025-04-19_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n<script src=\"https://gist.github.com/phiz71/be1ca2f550f44aea7fb2710b383e26ed.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Testing Admin Role Access with Keycloak Token\nDESCRIPTION: Example of testing the admin role authorization by calling the protected route with a user token that lacks admin privileges. Shows the forbidden response.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2020-10-01-jwt-auth-with-keycloak.md#2025-04-19_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncurl --silent -H \"Authorization: Bearer $KC_ACCESS_TOKEN\" http://localhost:3000/api/admin\n```\n\n----------------------------------------\n\nTITLE: Creating Basic HTML Page\nDESCRIPTION: Simple HTML page for testing the web server setup.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/js_web_tutorial.md#2025-04-19_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<html><body>Hello World</body></html>\n```\n\n----------------------------------------\n\nTITLE: Function-based Date Service Mappers\nDESCRIPTION: Shows how to implement date service mappers using java.util.function.Function for better reusability.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/releases/2019-09-19-vertx-4-milestone3-release.md#2025-04-19_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@Mapper Function<String, ZonedDateTime) fromJson = ZonedDateTime::parse;\n@Mapper Function<ZonedDateTime, String> toJson = ZonedDateTime::toString;\n```\n\n----------------------------------------\n\nTITLE: Defining Serverless Framework Configuration in YAML\nDESCRIPTION: Serverless framework configuration that defines the service, provider, and function specifications for AWS Lambda deployment.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2017-04-14-vertx-serverless.md#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n<Referenced as external gist: 48daa2ca479156c98d2735cca181ef30>\n```\n\n----------------------------------------\n\nTITLE: Implementing Unprotected Index Route\nDESCRIPTION: Handler implementation for the unprotected index route that displays a welcome message and link to protected resources.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2020-03-09-easy-sso-for-vertx-with-keycloak.md#2025-04-19_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nprivate void handleIndex(RoutingContext ctx) {\n    respondWithOk(ctx, \"text/html\", \"<h1>Welcome to Vert.x Keycloak Example</h1><br><a href=\\\"/protected\\\">Protected</a>\");\n}\n```\n\n----------------------------------------\n\nTITLE: Handlebars Template Example\nDESCRIPTION: Example of a Handlebars template showing how to access nested fields from JSON objects\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2017-03-08-building-apps-with-vertx-and-mesh.md#2025-04-19_snippet_6\n\nLANGUAGE: handlebars\nCODE:\n```\n<script src=\"https://gist.github.com/Jotschi/39fc0d3fcd45122eafe68d61bea4c120.js?file=template.example\"></script>\n```\n\n----------------------------------------\n\nTITLE: Uninstalling a Module from Local System\nDESCRIPTION: Command to remove a previously installed module from the local mods directory. This example uninstalls the MongoDB persistor module.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/mods_manual.md#2025-04-19_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nvertx uninstall vertx.mongo-persistor-v1.0\n```\n\n----------------------------------------\n\nTITLE: Configuring Logstash Output to Elasticsearch\nDESCRIPTION: Logstash output configuration that forwards processed logs to Elasticsearch. It configures index naming patterns based on metadata from Beats, enables cluster node discovery, and uses a custom index template for Vert.x application logs.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2016-09-08-centralized-logging-for-vertx-applications-using-the-elk-stack.md#2025-04-19_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\noutput {\n  elasticsearch {\n    hosts => [\"localhost\"]\n    sniffing => true\n    manage_template => true\n    index => \"%{[@metadata][beat]}-%{+YYYY.MM.dd}\"\n    document_type => \"%{[@metadata][type]}\"\n    template => \"/etc/filebeat/vertx_app_filebeat.json\"\n    template_overwrite => true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Serverless Framework for AWS Lambda Deployment\nDESCRIPTION: YAML configuration file for the Serverless Framework that defines AWS Lambda functions, API Gateway endpoints, and deployment settings.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2017-11-13-AWS-Lambda-and-Vertx-Framework-URL-Shortener-Backend.md#2025-04-19_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nservice: vertx-url-shortener\n\nprovider:\n  name: aws\n  runtime: java8\n  memorySize: 512\n  timeout: 30\n  stage: ${opt:stage, 'dev'}\n  region: ${opt:region, 'us-east-1'}\n\nfunctions:\n  urlService:\n    handler: com.company.Handler\n    events:\n      - http:\n          path: /api\n          method: post\n          cors: true\n```\n\n----------------------------------------\n\nTITLE: Adding vertx-web-api-contract Maven Dependency\nDESCRIPTION: Maven dependency configuration to include the OpenAPI 3 support package in a Vert.x project.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2017-06-12-openapi3-vertx-web-support.md#2025-04-19_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>io.vertx</groupId>\n    <artifactId>vertx-web-api-contract</artifactId>\n    <version>3.6.0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Disabling Data Attribute API in Bootstrap JS\nDESCRIPTION: Examples showing how to disable the data attribute API globally or for specific plugins by unbinding events.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/bootstrap/js/README.md#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n$('body').off('.data-api')\n```\n\nLANGUAGE: javascript\nCODE:\n```\n$('body').off('.alert.data-api')\n```\n\n----------------------------------------\n\nTITLE: Checking out the correct git branch in Bash\nDESCRIPTION: Command to switch to the 'step_3' branch in the git repository for following along with the tutorial.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2018-12-06-the-last-step-rss-reader.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout step_3\n```\n\n----------------------------------------\n\nTITLE: Defining Blog Post Metadata in Markdown\nDESCRIPTION: This snippet demonstrates the required metadata format for a Vert.x blog post. It includes the title, template, publication date, and author information.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/BLOG.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: My first blog post\ntemplate: post.html\ndate: 2078-06-28\nauthor: cescoffier\n---\n\nAn introduction paragraph that will be use as _except_ in the RSS feed.\n\n## Hello\n...\n```\n\n----------------------------------------\n\nTITLE: Maven Dependency Configuration for Vert.x Micrometer Metrics\nDESCRIPTION: XML snippet showing the Maven dependency configuration for including vertx-micrometer-metrics in a project.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2018-04-09-vertx-micrometer-metrics.md#2025-04-19_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>io.vertx</groupId>\n  <artifactId>vertx-micrometer-metrics</artifactId>\n  <version>3.5.1</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Using vertx Command Line Interface\nDESCRIPTION: Basic usage instruction for the vertx command line tool used to run Vert.x verticles. Simply typing 'vertx' displays available options.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/manual.md#2025-04-19_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nvertx\n```\n\n----------------------------------------\n\nTITLE: Initializing NPM Project for Vert.x3 Application\nDESCRIPTION: This command initializes a new NPM project by creating a package.json file through an interactive prompt.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2015-08-31-vertx-3-real-time-web-apps.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm init\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Bus Producer in Vert.x\nDESCRIPTION: Creates a periodic event producer that sends messages on the event bus every second.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2018-04-09-vertx-micrometer-metrics.md#2025-04-19_snippet_11\n\nLANGUAGE: java\nCODE:\n```\n// Producer side\nvertx.setPeriodic(1000, x -> {\n  vertx.eventBus().send(\"greeting\", \"Hello Micrometer from event bus!\");\n});\n```\n\n----------------------------------------\n\nTITLE: Updated Maven POM with fabric8 Vert.x Maven Plugin\nDESCRIPTION: Maven POM file after setting up the fabric8 Vert.x Maven Plugin, including added properties, dependencies, and plugin configuration.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/f8-vertx-maven-plugin-series/2016-12-07-post-01-getting-started-with-new-fabric8-vertx-maven-plugin.md#2025-04-19_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<script src=\"https://gist.github.com/kameshsampath/3c2e96d98f1e16d0f7a0501c05ce0d12.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Packaging Vert.x Application\nDESCRIPTION: Maven command to clean and package the Vert.x application into a fat jar.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/f8-vertx-maven-plugin-series/2016-12-07-post-01-getting-started-with-new-fabric8-vertx-maven-plugin.md#2025-04-19_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\nmvn clean package\n```\n\n----------------------------------------\n\nTITLE: External Configuration JSON for Vert.x Application\nDESCRIPTION: This JSON configuration file specifies the HTTP port for a Vert.x application, allowing for external configuration.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/intro-series/2015-07-20-post-02-vertx-application-configuration.md#2025-04-19_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"http.port\" : 8082\n}\n```\n\n----------------------------------------\n\nTITLE: Bootstrap Plugin Method Initialization\nDESCRIPTION: Examples of different ways to initialize a Bootstrap plugin with various options and methods.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/bootstrap/js/README.md#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n$(\"#myModal\").modal() // initialized with defaults\n$(\"#myModal\").modal({ keyboard: false }) // initialized with now keyboard\n$(\"#myModal\").modal('show') // initializes and invokes show immediately afterqwe2\n```\n\n----------------------------------------\n\nTITLE: Installing a Module from the Repository\nDESCRIPTION: Command to manually install a module from the Vert.x module repository. This example downloads and installs the MongoDB persistor module version 1.0.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/mods_manual.md#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nvertx install vertx.mongo-persistor-v1.0\n```\n\n----------------------------------------\n\nTITLE: Creating JSON Document with cURL POST Request\nDESCRIPTION: Example of using cURL to send a POST request to create a new sale record with JSON data. The request includes customer information and item details in JSON format.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2015-07-03-vertx-3-and-postgresql-json-type.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n    -i \\\n    -H \"Content-Type: application/json\" \\\n    -X POST \\\n    -d '{\"id\": 1, \"customer_name\": \"John\", \"items\": {\"description\": \"milk\", \"quantity\": 4}}' \\\n    http://localhost:8080/sales\n```\n\n----------------------------------------\n\nTITLE: JWT Header Configuration\nDESCRIPTION: Example of a JWT header showing algorithm type, token type and key identifier claims.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2020-10-01-jwt-auth-with-keycloak.md#2025-04-19_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"alg\": \"RS256\",\n  \"typ\": \"JWT\",\n  \"kid\": \"c7M1_hdZ0-X3re9uvfKHTCQdqarPbpLnUI0ymvAtSTs\"\n}\n```\n\n----------------------------------------\n\nTITLE: Patching Vert.x Transport Class for GraalVM Compatibility\nDESCRIPTION: A modification to the Transport class in Vert.x core to prevent loading of EPoll and KQueue native support, which is necessary for GraalVM native image generation.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2018-05-31-vertx-native.md#2025-04-19_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class Transport {\nâ¦\n  /**\n   * The native transport, it may be {@code null} or failed.\n   */\n  public static Transport nativeTransport() {\n    // Patched: I remove the native transport discovery. \n    // The imports would be picked up by substrate \n    // and cause further issues. \n    return null;\n  }\nâ¦\n}\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Server Listen with Callback\nDESCRIPTION: Demonstrates setting up a TCP server with an asynchronous callback to confirm when listening starts.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_ruby.md#2025-04-19_snippet_25\n\nLANGUAGE: ruby\nCODE:\n```\nserver.listen(1234, \"myhost\") do |err|\n  puts \"Now listening!\" if !err\nend\n```\n\n----------------------------------------\n\nTITLE: Graph Database Hero Retrieval Method\nDESCRIPTION: Java method using TinkerPop Gremlin to traverse the graph and retrieve the hero character\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2017-11-14-vertx-graphql.md#2025-04-19_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic Droid getHero() {\n\treturn traverse((g) -> g.out(HAS_HERO)).nextOrDefaultExplicit(Droid.class, null);\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Event Bus Connection in JavaScript\nDESCRIPTION: Creates an EventBus object to enable client-server communication using the vertxbus.js library.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/ruby_web_tutorial.md#2025-04-19_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar eb = new vertx.EventBus(window.location.protocol + '//' + window.location.hostname + ':' + window.location.port + '/eventbus');\n```\n\n----------------------------------------\n\nTITLE: Setting Up fabric8 Vert.x Maven Plugin\nDESCRIPTION: Command to set up the fabric8 Vert.x Maven Plugin in an existing Maven project.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/f8-vertx-maven-plugin-series/2016-12-07-post-01-getting-started-with-new-fabric8-vertx-maven-plugin.md#2025-04-19_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nmvn io.fabric8:vertx-maven-plugin:1.0.0:setup\n```\n\n----------------------------------------\n\nTITLE: Cloning Vert.x Scala Starter Project\nDESCRIPTION: Command to clone the Vert.x Scala starter project repository from GitHub.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2017-03-16-vertx-lang-scala.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:vert-x3/vertx-sbt-starter.git\n```\n\n----------------------------------------\n\nTITLE: Building Vert.x Microservices Docker Images with Maven\nDESCRIPTION: This bash script demonstrates the process of building Docker images for Vert.x microservices using Maven. It includes commands to build the root project, trader dashboard, and various microservices modules.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2016-09-08-centralized-logging-for-vertx-applications-using-the-elk-stack.md#2025-04-19_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean install\ncd trader-dashboard\nmvn package docker:build\ncd ../solution/audit-service\nmvn package docker:build\ncd ../compulsive-traders\nmvn package docker:build\ncd ../portfolio-service\nmvn package docker:build\ncd ../quote-generator/\nmvn package docker:build\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Response JSON\nDESCRIPTION: JSON response structure showing the result of querying Darth Vader's name\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2017-11-14-vertx-graphql.md#2025-04-19_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"vader\": {\n      \"name\": \"Darth Vader\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Cassandra Collector API\nDESCRIPTION: Example of using Java collectors with Cassandra query results.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/releases/2019-04-02-vertx-3.7.0-release.md#2025-04-19_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n// Create a collector projecting a row set to a string in the form (last_name_1,last_name_2,...)\nCollector<Row, ?, String> collector = Collectors.mapping(\n    row -> row.getString(\"last_name\"),\n    Collectors.joining(\",\", \"(\", \")\")\n);\n\n// Run the query with the collector\nclient.execute(\"SELECT * FROM users\", collector, ar -> {\n  if (ar.succeeded()) {\n    // Result in the form (last_name_1,last_name_2,...)\n    String result = ar.result();\n  } else {\n    System.out.println(\"Failure: \" + ar.cause().getMessage());\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring AMQP Dispatch Router Addresses\nDESCRIPTION: This snippet shows the configuration for the Apache Qpid Dispatch router, defining addresses for the AMQP API endpoints with balanced distribution.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2017-01-25-building-services-and-apis-with-amqp.md#2025-04-19_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\naddress {  \n    prefix: /setScore  \n    distribution: balanced  \n}  \naddress {  \n    prefix: /getScore  \n    distribution: balanced  \n}  \naddress {  \n    prefix: /addGame  \n    distribution: balanced  \n}  \n```\n\n----------------------------------------\n\nTITLE: Running Vert.x Application with Cluster Configuration on Azure VM\nDESCRIPTION: Command to run a Vert.x application on an Azure VM with cluster configuration. It specifies the cluster XML file location and sets the cluster host to the VM's private IP address.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2016-03-17-vertx-3-and-azure-cloud-platform-tutorial.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncp folder_of_your_cluster_xml_file -cluster -cluster-host VM_PRIVATE_IP\n```\n\n----------------------------------------\n\nTITLE: Running TypeScript Verticle with Vert.x\nDESCRIPTION: This command runs a TypeScript verticle named 'es7verticle.ts' using Vert.x. It demonstrates how to execute a TypeScript file that contains ECMAScript 6/7 features with Vert.x.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2016-01-03-ecmascript-6-7-on-the-jvm-with-typscript-and-vertx.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nvertx run es7verticle.ts\n```\n\n----------------------------------------\n\nTITLE: Setting Bootstrap Plugin Defaults\nDESCRIPTION: Example of modifying default options for all instances of a Bootstrap plugin.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/bootstrap/js/README.md#2025-04-19_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n$.fn.modal.defaults = { â¦ }\n```\n\n----------------------------------------\n\nTITLE: Monthly Timer Example in Ceylon\nDESCRIPTION: Implementation of a timer that fires every month at 16:30 on the last Sunday using Ceylon\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2017-05-09-Time-scheduling-with-Chime.md#2025-04-19_snippet_3\n\nLANGUAGE: Ceylon\nCODE:\n```\n// listen the timer events\neventBus.consumer (\n\t\"my scheduler:my timer\",\n\t(Throwable|Message<JsonObject?> msg) {\n\t\tif (is Message<JsonObject?> msg) { print(msg.body()); }\n\t\telse { print(msg); }\t\n\t}\n);\n// create scheduler and timer\neventBus.send<JsonObject> (\n\t\"chime\",\n\tJsonObject {\n\t\t\"operation\" -> \"create\",\n\t\t\"name\" -> \"my scheduler:my timer\",\n\t\t\"description\" -> JsonObject {\n\t\t\t\"type\" -> \"cron\",\n\t\t\t\"seconds\" -> \"0\",\n\t\t\t\"minutes\" -> \"30\",\n\t\t\t\"hours\" -> \"16\",\n\t\t\t\"days of month\" -> \"*\",\n\t\t\t\"months\" -> \"*\",\n\t\t\t\"days of week\" -> \"SundayL\"\n\t\t}\n\t}\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Vert.x Web GraphQL Gradle Dependency\nDESCRIPTION: Gradle dependency configuration for including the Vert.x Web GraphQL module.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/releases/2019-04-02-vertx-3.7.0-release.md#2025-04-19_snippet_1\n\nLANGUAGE: gradle\nCODE:\n```\ncompile 'io.vertx:vertx-web-graphql:3.7.0'\n```\n\n----------------------------------------\n\nTITLE: Checking Out Project Step\nDESCRIPTION: Git command to checkout the completed implementation of the first endpoint in the step_2 branch.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2018-08-20-the-first-step-rss-reader.md#2025-04-19_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout step_2\n```\n\n----------------------------------------\n\nTITLE: Executing Fat Jar in Java\nDESCRIPTION: Demonstrates how to run a Vert.x fat jar with optional command line arguments. Fat jars contain Vert.x binaries and the module, allowing execution without pre-installed Vert.x.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/mods_manual.md#2025-04-19_snippet_13\n\nLANGUAGE: java\nCODE:\n```\njava -jar mymodule-1.0-fat.jar\n```\n\nLANGUAGE: java\nCODE:\n```\njava -jar mymodule-1.0-fat.jar -cluster -conf myconf.json\n```\n\n----------------------------------------\n\nTITLE: Cloning Template Repository\nDESCRIPTION: Commands to clone the Vert.x Gradle template project and set up a new repository\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/gradle_dev.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/vert-x/vertx-gradle-template.git my-vertx-module\n```\n\n----------------------------------------\n\nTITLE: Accessing Logger in a Verticle\nDESCRIPTION: Getting a reference to the verticle's logger and using it to log information. Each verticle has its own logger instance.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_groovy.md#2025-04-19_snippet_4\n\nLANGUAGE: groovy\nCODE:\n```\ndef logger = container.logger\n\nlogger.info \"I am logging something\"\n```\n\n----------------------------------------\n\nTITLE: Calling a Time Service from Client-Side JavaScript in Vert.x\nDESCRIPTION: This JavaScript snippet demonstrates how to call the 'acme.timeService' from client-side code. It sends a message to the service via the event bus and logs the received time to the console.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/groovy_web_tutorial.md#2025-04-19_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\neventBus.send(\"acme.timeService\", null, function(reply) {\n    console.log(\"Time is \" + reply.current_time);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Body Handler in Vert.x\nDESCRIPTION: Java code snippet demonstrating how to create a BodyHandler in Vert.x for processing request bodies, particularly useful for handling JSON data in PATCH requests.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2016-01-15-real-time-bidding-with-websockets-and-vertx.md#2025-04-19_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nBodyHandler.create();\n```\n\n----------------------------------------\n\nTITLE: HTTP Load Testing Script\nDESCRIPTION: Bash script that continuously sends HTTP requests to test the server metrics collection.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2018-04-09-vertx-micrometer-metrics.md#2025-04-19_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nwhile true\ndo curl http://localhost:8080/\n    sleep .8\ndone\n```\n\n----------------------------------------\n\nTITLE: Repository Remote Configuration\nDESCRIPTION: Commands to remove the original remote and add a new origin for the project repository\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/gradle_dev.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit remote rm origin\ngit remote add origin <path to your repo>\n```\n\n----------------------------------------\n\nTITLE: Configuring Elasticsearch Index Template for Filebeat Logs\nDESCRIPTION: This JSON snippet defines an Elasticsearch index template for Filebeat logs. It specifies mappings for various log fields, setting most as 'not_analyzed' except for 'logger_name' and 'log_message' which are 'analyzed' to allow for regex-based queries.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2016-09-08-centralized-logging-for-vertx-applications-using-the-elk-stack.md#2025-04-19_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mappings\": {\n    \"_default_\": {\n      \"_all\": {\n        \"enabled\": true,\n        \"norms\": {\n          \"enabled\": false\n        }\n      },\n      \"dynamic_templates\": [\n        {\n          \"template1\": {\n            \"mapping\": {\n              \"doc_values\": true,\n              \"ignore_above\": 1024,\n              \"index\": \"not_analyzed\",\n              \"type\": \"{dynamic_type}\"\n            },\n            \"match\": \"*\"\n          }\n        }\n      ],\n      \"properties\": {\n        \"@timestamp\": {\n          \"type\": \"date\"\n        },\n        \"offset\": {\n          \"type\": \"long\",\n          \"doc_values\": \"true\"\n        },\n        \"type\": { \"type\": \"string\", \"index\": \"not_analyzed\" },\n        \"host\": { \"type\": \"string\", \"index\": \"not_analyzed\" },\n        \"log_level\": { \"type\": \"string\", \"index\": \"not_analyzed\" },\n        \"logger_name\": { \"type\": \"string\", \"index\": \"analyzed\" },\n        \"log_message\": { \"type\": \"string\", \"index\": \"analyzed\" }\n      }\n    }\n  },\n  \"settings\": {\n    \"index.refresh_interval\": \"5s\"\n  },\n  \"template\": \"filebeat-*\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running Vert.x Application with External Configuration (Bash)\nDESCRIPTION: This command demonstrates how to run a Vert.x application JAR file with an external configuration file specified.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/intro-series/2015-07-20-post-02-vertx-application-configuration.md#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\njava -jar target/my-first-app-1.0-SNAPSHOT-fat.jar -conf src/main/conf/my-application-conf.json\n```\n\n----------------------------------------\n\nTITLE: Maven Test Resources Configuration\nDESCRIPTION: Configuration to enable resource filtering for test resources, allowing placeholder replacement in configuration files.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/intro-series/2015-08-03-post-04-unit-and-integration-tests.md#2025-04-19_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<testResources>\n  <testResource>\n    <directory>src/test/resources</directory>\n    <filtering>true</filtering>\n  </testResource>\n</testResources>\n```\n\n----------------------------------------\n\nTITLE: Windows-Specific Maven Profile for Integration Tests\nDESCRIPTION: XML configuration that adds a Windows-specific profile to the Maven POM. This profile provides an alternative mechanism to stop the Vert.x application after integration tests on Windows systems.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/intro-series/2015-08-03-post-04-unit-and-integration-tests.md#2025-04-19_snippet_16\n\nLANGUAGE: xml\nCODE:\n```\n<profiles>\n  <!-- A profile for windows as the stop command is different -->\n  <profile>\n    <id>windows</id>\n    <activation>\n      <os>\n        <family>windows</family>\n      </os>\n    </activation>\n    <build>\n      <plugins>\n        <plugin>\n          <artifactId>maven-antrun-plugin</artifactId>\n          <version>1.8</version>\n          <executions>\n            <execution>\n              <id>stop-vertx-app</id>\n              <phase>post-integration-test</phase>\n              <goals>\n                <goal>run</goal>\n              </goals>\n              <configuration>\n                <target>\n                  <exec executable=\"wmic\"\n                      dir=\"${project.build.directory}\"\n                      spawn=\"false\">\n                    <arg value=\"process\"/>\n                    <arg value=\"where\"/>\n                    <arg value=\"CommandLine like '%${project.artifactId}%' and not name='wmic.exe'\"/>\n                    <arg value=\"delete\"/>\n                  </exec>\n                </target>\n              </configuration>\n            </execution>\n          </executions>\n        </plugin>\n      </plugins>\n    </build>\n  </profile>\n</profiles>\n```\n\n----------------------------------------\n\nTITLE: Required Module Metadata Fields in mod.json\nDESCRIPTION: Required and recommended fields that must be included in the mod.json file when registering a module with the Vert.x Module Registry. Required fields include description, licenses, and author. Recommended fields include keywords and homepage.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/mods_manual.md#2025-04-19_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"\",\n  \"licenses\": [],\n  \"author\": \"\",\n  \"keywords\": [],\n  \"homepage\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running Vert.x Application as a Service\nDESCRIPTION: This YAML snippet defines Ansible tasks for running a Vert.x application as a service on the target machine. It uses the 'nohup' command to ignore the hang-up signal and prints the output of the run command.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2016-09-28-vertx-featuring-continuous-delivery-with-jenkins-and-ansible.md#2025-04-19_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Run Vert.x application as a service, ignore the SIGHUP signal\n  shell: nohup java {% raw %}{{ vertx_opts }}{% endraw %} -jar /usr/share/vertx_app/app-fatjar.jar start {% raw %}{{ launch_params }}{% endraw %}\n  register: svc_run_out\n- name: Print run output\n  debug: var=svc_run_out.stdout_lines\n```\n\n----------------------------------------\n\nTITLE: Creating package.json with Vert.x3 Dependencies\nDESCRIPTION: A package.json configuration for the Vert.x3 drawing application that includes the vertx3-full dependency and a start script to run the server.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2015-08-31-vertx-3-real-time-web-apps.md#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"name\": \"draw\",\n  \"private\": true,\n  \"dependencies\": {\n    \"vertx3-full\": \"3.0.0-1\"\n  },\n  \"scripts\": {\n    \"start\": \"vertx run server.js\"\n  },\n  \"version\": \"1.0.0\",\n  \"main\": \"server.js\",\n  \"devDependencies\": {},\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"description\": \"A Real Time Drawing App\"\n}\n```\n\n----------------------------------------\n\nTITLE: Start Gentics Mesh CMS\nDESCRIPTION: Command to start the Gentics Mesh CMS server using Java\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2017-03-08-building-apps-with-vertx-and-mesh.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\njava -jar mesh-demo-0.6.xx.jar\n```\n\n----------------------------------------\n\nTITLE: Integration Test Configuration JSON\nDESCRIPTION: JSON configuration file with a placeholder for the HTTP port that will be replaced during Maven filtering.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/intro-series/2015-08-03-post-04-unit-and-integration-tests.md#2025-04-19_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"http.port\": ${http.port}\n}\n```\n\n----------------------------------------\n\nTITLE: Running Gradle Tests\nDESCRIPTION: Commands to navigate to the project directory and run tests using Gradle wrapper\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/gradle_dev.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd my-vertx-module\n./gradlew test\n```\n\n----------------------------------------\n\nTITLE: Reading a File with Vert.x FileSystem in JavaScript\nDESCRIPTION: Shows how to read the entire contents of a file using Vert.x file system API. The example demonstrates reading a file into a Buffer and checking its size.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_js.md#2025-04-19_snippet_78\n\nLANGUAGE: javascript\nCODE:\n```\nvertx.fileSystem.readFile('myfile.dat', function(err, res) {\n    if (!err) {\n        log.info('File contains: ' + res.length() + ' bytes');\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Including Resources from Other Modules in mod.json\nDESCRIPTION: Demonstrates how to include resources from another module using the 'includes' field in mod.json, allowing resource sharing between modules.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/mods_manual.md#2025-04-19_snippet_11\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    ...\n    \"includes\":\"com.acme.common-stuff-v1.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Embedded MongoDB for Testing\nDESCRIPTION: XML snippet for adding the embedded MongoDB dependency to the Maven POM file, used for running MongoDB in unit tests.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/intro-series/2015-11-30-post-06-combine-vertx-and-mongo-to-build-a-giant.md#2025-04-19_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>de.flapdoodle.embed</groupId>\n  <artifactId>de.flapdoodle.embed.mongo</artifactId>\n  <version>1.50.0</version>\n  <scope>test</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Installing NPM Dependencies for Vert.x3 Application\nDESCRIPTION: This command installs all the dependencies listed in package.json, including the vertx3-full package needed to run the Vert.x application.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2015-08-31-vertx-3-real-time-web-apps.md#2025-04-19_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Checking Out Tutorial Branch in Git\nDESCRIPTION: Command to checkout the step_2 branch of the tutorial repository\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2018-09-05-the-second-step-rss-reader.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout step_2\n```\n\n----------------------------------------\n\nTITLE: Setting MacroMates Caret Position and Text Encoding\nDESCRIPTION: JSON configuration for Mac OS X file attributes specifying UTF-8 text encoding and cursor position at line 5, column 64 in TextMate editor.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/fonts/__MACOSX/._README.txt#2025-04-19_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    column = 64;\n    line = 5;\n}\n```\n\n----------------------------------------\n\nTITLE: Maven Dependency for InfluxDB Backend\nDESCRIPTION: XML snippet showing the additional Maven dependency required for using InfluxDB as the metrics backend.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2018-04-09-vertx-micrometer-metrics.md#2025-04-19_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>io.micrometer</groupId>\n  <artifactId>micrometer-registry-influx</artifactId>\n  <version>1.0.0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up Project\nDESCRIPTION: Git commands to clone the RSS reader repository and checkout the initial branch\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2018-08-20-the-first-step-rss-reader.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/Sammers21/rss-reader\ncd rss-reader\ngit checkout step_1\n```\n\n----------------------------------------\n\nTITLE: Generating Gradle Wrapper\nDESCRIPTION: Command to generate Gradle wrapper scripts for the project, ensuring consistent Gradle version usage.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2017-12-15-tcp-client-using-vertx-kotlin-and-gradle-build.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$GRADLE_HOME/bin/gradle wrapper\n```\n\n----------------------------------------\n\nTITLE: Generating Vert.x Maven Project\nDESCRIPTION: Command to generate a new Vert.x Maven project using the Vert.x archetype. This searches for artifacts with group id 'io.vertx' and prompts for project details.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/maven_dev.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmvn archetype:generate -Dfilter=io.vertx:\n```\n\n----------------------------------------\n\nTITLE: Setting up Cassandra with CCM\nDESCRIPTION: Commands to create and start a single-node Cassandra cluster using CCM for development\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2018-08-20-the-first-step-rss-reader.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nccm create rss_reader -v 3.11.2 -n 1 -s\nccm start\n```\n\n----------------------------------------\n\nTITLE: Implementing Order Submission in JavaScript\nDESCRIPTION: Handles order submission by sending order data to MongoDB persistor with session authentication\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/groovy_web_tutorial.md#2025-04-19_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nthat.submitOrder = function() {\n      if (!orderReady()) {\n        return;\n      }\n      var orderItems = ko.toJS(that.items);\n      var orderMsg = {\n        sessionID: that.sessionID(),\n        action: \"save\",\n        collection: \"orders\",\n        document: {\n          username: that.username(),\n          items: orderItems\n        }\n      }\n      eb.send('vertx.mongopersistor', orderMsg, function(reply) {\n        if (reply.status === 'ok') {\n          that.orderSubmitted(true);\n        } else {\n          console.error('Failed to accept order');\n        }\n      });\n    };\n```\n\n----------------------------------------\n\nTITLE: Installing a Module from a Custom Repository\nDESCRIPTION: Command to install a module from a non-default repository using the -repo flag. This is useful for organizations that maintain their own private module repositories.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/mods_manual.md#2025-04-19_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nvertx install com.acme.my-module-v2.1.beta -repo http://internalrepo.acme.com\n```\n\n----------------------------------------\n\nTITLE: Writing Strings with Specific Encoding to HTTP Client Request in Vert.x with Ruby\nDESCRIPTION: Demonstration of writing a string to an HTTP client request with a specific character encoding. This allows control over how string data is encoded in the request body.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_ruby.md#2025-04-19_snippet_69\n\nLANGUAGE: ruby\nCODE:\n```\nrequest.write_str('hello', 'UTF-16')\n```\n\n----------------------------------------\n\nTITLE: Deploying Chime Verticle in Ceylon\nDESCRIPTION: Shows how to deploy the Chime verticle in a Ceylon application using Vert.x\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2017-05-09-Time-scheduling-with-Chime.md#2025-04-19_snippet_0\n\nLANGUAGE: Ceylon\nCODE:\n```\nimport io.vertx.ceylon.core {vertx}\nimport herd.schedule.chime {Chime}\nChime().deploy(vertx.vertx());\n```\n\n----------------------------------------\n\nTITLE: Generated MANIFEST.MF Content\nDESCRIPTION: Content of the generated MANIFEST.MF file in the packaged Vert.x application jar.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/f8-vertx-maven-plugin-series/2016-12-07-post-01-getting-started-with-new-fabric8-vertx-maven-plugin.md#2025-04-19_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\nMain-Class                               io.vertx.core.Launcher\nMain-Verticle                            io.fabric8.blog.MainVerticle\nManifest-Version                         1.0\n```\n\n----------------------------------------\n\nTITLE: Downloading Local Gradle Distribution\nDESCRIPTION: Command to download the local Gradle distribution for the project.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2017-12-15-tcp-client-using-vertx-kotlin-and-gradle-build.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew\n```\n\n----------------------------------------\n\nTITLE: Running the ELK Stack Demo with Docker Compose\nDESCRIPTION: This command uses Docker Compose to build and run the ELK stack demo for Vert.x microservices logging. It assumes that the necessary Docker images have been built previously.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2016-09-08-centralized-logging-for-vertx-applications-using-the-elk-stack.md#2025-04-19_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up\n```\n\n----------------------------------------\n\nTITLE: Generating Vert.x Project with Parameters\nDESCRIPTION: Command to generate a Vert.x Maven project with specified groupId, artifactId, and version parameters directly on the command line.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/maven_dev.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmvn archetype:generate -Dfilter=io.vertx: -DgroupId=com.mycompany -DartifactId=my-module -Dversion=0.1\n```\n\n----------------------------------------\n\nTITLE: Creating Project Directory Structure\nDESCRIPTION: Commands to create the necessary directory structure for the Vert.x TCP client project.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2017-12-15-tcp-client-using-vertx-kotlin-and-gradle-build.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd vertx-net-client\nmkdir -p src/main/kotlin\nmkdir -p src/main/resources\n```\n\n----------------------------------------\n\nTITLE: Adding MongoDB Client Dependency in Maven POM\nDESCRIPTION: XML snippet showing how to add the vertx-mongo-client dependency to the Maven POM file, replacing the previous JDBC client dependency.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/intro-series/2015-11-30-post-06-combine-vertx-and-mongo-to-build-a-giant.md#2025-04-19_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>io.vertx</groupId>\n  <artifactId>vertx-mongo-client</artifactId>\n  <version>3.1.0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Basic Service Command Usage\nDESCRIPTION: Examples of common service commands used to control the Vert.x application through the init.d script.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2015-07-02-vertx-3-initd-script.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nservice my-service-script start\nservice my-service-script stop\nservice my-service-script status\nservice my-service-script restart\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Vert.x Modules\nDESCRIPTION: Demonstrates how to uninstall a Vert.x module from the local mods directory using the vertx uninstall command.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/mods_manual.md#2025-04-19_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nvertx uninstall io.vertx~mod-mongo-persistor~2.0.0-beta1\n```\n\n----------------------------------------\n\nTITLE: Rendering Markdown with Ruby's Redcarpet\nDESCRIPTION: A Ruby code snippet that uses the Redcarpet library to render Markdown to HTML. It demonstrates how to require a library, create a Markdown object, and convert it to HTML.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2015-06-26-a-catchy-title.md#2025-04-19_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n  require 'redcarpet'\n  markdown = Redcarpet.new(\"Hello World!\")\n  puts markdown.to_html\n```\n\n----------------------------------------\n\nTITLE: Basic GraphQL Query for Star Wars Character\nDESCRIPTION: Example GraphQL query to fetch the name of human character with ID 1001 (Darth Vader)\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2017-11-14-vertx-graphql.md#2025-04-19_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  vader: human(id: 1001) {\n\t  name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Init.d Script Configuration Variables\nDESCRIPTION: Essential configuration variables that need to be set in the init.d script, including application directory, JAR file, arguments, and Java path settings.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2015-07-02-vertx-3-initd-script.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# The directory in which your application is installed\nAPPLICATION_DIR=\"/opt/my-vertx-app\"\n# The fat jar containing your application\nAPPLICATION_JAR=\"maven-verticle-3.0.0-fat.jar\"\n# The application argument such as -cluster -cluster-host ...\nAPPLICATION_ARGS=\"\"\n# vert.x options and system properties (-Dfoo=bar).\nVERTX_OPTS=\"\"\n# The path to the Java command to use to launch the application (must be java 8+)\nJAVA=/opt/java/java/bin/java\n```\n\n----------------------------------------\n\nTITLE: Chaining Bootstrap Plugin Methods\nDESCRIPTION: Demonstration of chainable plugin methods that return the collection acted upon.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/bootstrap/js/README.md#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n$(\".btn.danger\").button(\"toggle\").addClass(\"fat\")\n```\n\n----------------------------------------\n\nTITLE: Listing Additional Developers in mod.json\nDESCRIPTION: Adds an optional array of additional developers' names to mod.json.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/mods_manual.md#2025-04-19_snippet_7\n\nLANGUAGE: JSON\nCODE:\n```\n\"developers\": [\"A.N. Other\", \"Genghis Khan\"]\n```\n\n----------------------------------------\n\nTITLE: Setting Module Homepage in mod.json\nDESCRIPTION: Specifies the homepage URL for the module project in mod.json, which is optional but highly recommended.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/mods_manual.md#2025-04-19_snippet_8\n\nLANGUAGE: JSON\nCODE:\n```\n\"homepage\": \"https://github.com/jbloggs/toaster-mod\"\n```\n\n----------------------------------------\n\nTITLE: HTTP Response Utility Methods in Vert.x\nDESCRIPTION: Utility methods for sending HTTP responses with specified status codes, content types, and content.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2020-03-09-easy-sso-for-vertx-with-keycloak.md#2025-04-19_snippet_11\n\nLANGUAGE: java\nCODE:\n```\nprivate void respondWithOk(RoutingContext ctx, String contentType, String content) {\n    respondWith(ctx, 200, contentType, content);\n}\n\nprivate void respondWith(RoutingContext ctx, int statusCode, String contentType, String content) {\n    ctx.request().response() //\n            .putHeader(\"content-type\", contentType) //\n            .setStatusCode(statusCode)\n            .end(content);\n}\n```\n\n----------------------------------------\n\nTITLE: Static Imports for Hamcrest and VertxMatcherAssert\nDESCRIPTION: Static import statements that make the Hamcrest matchers and the custom assertThat method more accessible in test code, improving readability by removing the need for class qualifiers.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2016-01-18-using-hamcrest-matchers-with-vertx-unit.md#2025-04-19_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nimport static io.vertx.unit.example.VertxMatcherAssert.assertThat;\nimport static org.hamcrest.core.Is.is;\n```\n\n----------------------------------------\n\nTITLE: Maven Verify Command\nDESCRIPTION: Command to run the complete integration test suite including application startup and shutdown.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/intro-series/2015-08-03-post-04-unit-and-integration-tests.md#2025-04-19_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean verify\n```\n\n----------------------------------------\n\nTITLE: Creating Untitled Admonitions in Markdown for Vert.x Blog Posts\nDESCRIPTION: This snippet demonstrates how to create an admonition without a title in Vert.x blog posts using a simplified custom markdown syntax.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/BLOG.md#2025-04-19_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n[IMPORTANT Wow, this is an untitled important message.]\n```\n\n----------------------------------------\n\nTITLE: Generating Eclipse Project\nDESCRIPTION: Maven command to generate Eclipse project files from the Maven project.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/maven_dev.md#2025-04-19_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmvn eclipse:eclipse\n```\n\n----------------------------------------\n\nTITLE: Creating Admonitions in Markdown for Vert.x Blog Posts\nDESCRIPTION: This snippet shows how to create various types of admonitions (NOTE, INFO, WARNING, IMPORTANT) in Vert.x blog posts using a custom markdown syntax.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/BLOG.md#2025-04-19_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[NOTE this is my title | this is the content of the note, it can be pretty long, and contain **important** messages. In can be very very long.... Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.]\n\n[WARNING Warning Warning | You need to\nbe careful about **this** (yes it can be multi-line)]\n\n[INFO Info | Did you check the [news](http://lemonde.fr)?]\n\n[IMPORTANT Something very important | don't forget to subscription to the google group.]\n```\n\n----------------------------------------\n\nTITLE: Accessing Bootstrap Plugin Instance\nDESCRIPTION: Demonstrates how to access a plugin's class instance through jQuery's data API.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/bootstrap/js/README.md#2025-04-19_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n$('[rel=popover]').data('popover') instanceof $.fn.popover.Constructor\n```\n\n----------------------------------------\n\nTITLE: Accessing Configuration in a Vert.x Verticle\nDESCRIPTION: This code demonstrates how to access configuration passed to a verticle. The configuration is available through the config property of the container object and can be accessed as a JSON object.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_js.md#2025-04-19_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar container = require('vertx/container');\nvar console = require('vertx/console');\n\nvar config = container.config;\n\nconsole.log('config is ' + JSON.stringify(config));\n```\n\n----------------------------------------\n\nTITLE: Clone Repository Command\nDESCRIPTION: Git command to clone the example Vert.x with Gentics Mesh project repository\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2017-03-08-building-apps-with-vertx-and-mesh.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:gentics/mesh-vertx-example.git\n```\n\n----------------------------------------\n\nTITLE: Printing 'Hello' in Java\nDESCRIPTION: A simple Java main method that prints 'Hello' to the console. This snippet demonstrates basic Java syntax and the standard output operation.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2015-06-26-a-catchy-title.md#2025-04-19_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic void main(String[] args) {\n  System.out.println(\"Hello\");\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Bootstrap Plugin Constructor\nDESCRIPTION: Shows how to access a plugin's raw constructor through the Constructor property.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/bootstrap/js/README.md#2025-04-19_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n$.fn.popover.Constructor\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Log4j Pattern for Logstash\nDESCRIPTION: Custom pattern definition for Logstash to parse Log4j formatted logs. It defines regex patterns for spacing, logger names, line numbers, and combines them into a LOG4J pattern that extracts timestamp, log level, logger name, line number, and message.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2016-09-08-centralized-logging-for-vertx-applications-using-the-elk-stack.md#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Pattern to match our Log4j format\nSPACING (?:[\\s]+)\nLOGGER (?:[a-zA-Z$_][a-zA-Z$_0-9]*\\.)*[a-zA-Z$_][a-zA-Z$_0-9]*\nLINE %{INT}?\nLOG4J %{TIMESTAMP_ISO8601:timestamp_string} %{LOGLEVEL:log_level}%{SPACING}%{LOGGER:logger_name}:%{LINE:loc_line} - %{JAVALOGMESSAGE:log_message}\n```\n\n----------------------------------------\n\nTITLE: Creating Scheduler JSON Request\nDESCRIPTION: JSON request format for creating a new scheduler in Chime\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2017-05-09-Time-scheduling-with-Chime.md#2025-04-19_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n\t\"operation\": \"create\",\n\t\"name\": \"scheduler name\"\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Vert.x Version via Command Line\nDESCRIPTION: A terminal command to verify the Vert.x installation by checking its version. This should output the installed version of Vert.x if it's properly installed.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/install.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntim@Ethel:~/example$ vertx version\nvert.x 1.3.1.final\n```\n\n----------------------------------------\n\nTITLE: Initializing and Querying with DB2 Reactive Client in Java\nDESCRIPTION: Demonstrates how to set up and use the new DB2 Reactive Client, including connection configuration, pool creation, and executing a simple query. Shows connection options setup and basic query execution with error handling.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/releases/2020-07-21-vertx-3.9.2-release.md#2025-04-19_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nDB2ConnectOptions connectOptions = new DB2ConnectOptions()\n  .setPort(50000)\n  .setHost(\"the-host\")\n  .setDatabase(\"the-db\")\n  .setUser(\"user\")\n  .setPassword(\"secret\");\n\n// Create the client pool\nDB2Pool client = DB2Pool.pool(connectOptions, poolOptions);\n\n// A simple query\nclient\n  .query(\"SELECT * FROM users WHERE id='julien'\")\n  .execute(ar -> {\n  if (ar.succeeded()) {\n    RowSet<Row> result = ar.result();\n    System.out.println(\"Got \" + result.size() + \" rows \");\n  } else {\n    System.out.println(\"Failure: \" + ar.cause().getMessage());\n  }\n\n  // Now close the pool\n  client.close();\n});\n```\n\n----------------------------------------\n\nTITLE: Coordinating Application Startup with a Vert.x Verticle\nDESCRIPTION: This snippet demonstrates how to use a verticle to coordinate the loading of an application composed of multiple verticles. It includes configuration for each verticle and deploys them with specific settings.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_ruby.md#2025-04-19_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\n# Application config\n\nappConfig = {\n    :verticle1_config => {\n        # Config for verticle1\n    },\n    :verticle2_config => {\n        # Config for verticle2\n    },\n    :verticle3_config => {\n        # Config for verticle3\n    },\n    :verticle4_config => {\n        # Config for verticle4\n    },\n    :verticle5_config => {\n        # Config for verticle5\n    }\n}\n\n# Start the verticles that make up the app\n\nVertx.deploy_verticle(\"verticle1.rb\", appConfig[:verticle1_config])\nVertx.deploy_verticle(\"verticle2.rb\", appConfig[:verticle2_config], 5)\nVertx.deploy_verticle(\"verticle3.rb\", appConfig[:verticle3_config])\nVertx.deploy_worker_verticle(\"verticle4.rb\", appConfig[:verticle4_config])\nVertx.deploy_worker_verticle(\"verticle5.rb\", appConfig[:verticle5_config], 10)\n```\n\n----------------------------------------\n\nTITLE: Basic Queue Consumption with New RabbitMQ Consumer API in Java\nDESCRIPTION: Demonstrates how to create a basic RabbitMQ consumer using the new API. Shows initialization of the client, creating a consumer for a specific queue, and handling incoming messages with typed message representation.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2018-04-23-rabbitmq-new-consumer-api.md#2025-04-19_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nRabbitMQClient client = RabbitMQClient.create(vertx, new RabbitMQOptions());\n\nclient.basicConsumer(\"my.queue\", res -> {\n  if (res.succeeded()) {\n    System.out.println(\"RabbitMQ consumer created !\");\n    RabbitMQConsumer mqConsumer = res.result();\n    mqConsumer.handler((RabbitMQMessage message) -> {\n        System.out.println(\"Got message: \" + message.body().toString());\n    });\n  } else {\n    // Oups something went wrong\n    res.cause().printStackTrace();\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Immediate Completion with CompletableFuture in Vert.x\nDESCRIPTION: Demonstrates a test case using VertxUnitRunner to verify CompletableFuture completion behavior on the Vert.x event loop. Shows how thread context is maintained but Vert.x context may be lost.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2017-01-31-an-introduction-to-the-vertx-context-objects.md#2025-04-19_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n@RunWith(VertxUnitRunner.class)\npublic class ImmediateCompletionTest {\n    @Rule\n    public final RunTestOnContext rule = new RunTestOnContext();\n\n    @Test\n    public void testImmediateCompletion(TestContext context) {\n\n        final Async async = context.async();\n        final Vertx vertx = rule.vertx();\n        final CompletableFuture<Integer> toComplete = new CompletableFuture<>();\n        // delay future completion by 500 ms\n        final String threadName = Thread.currentThread().getName();\n        toComplete.complete(100);\n        toComplete.thenRun(() -> {\n            assertThat(Thread.currentThread().getName(), is(threadName));\n            async.complete();\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and using MQTT Client in Vert.x\nDESCRIPTION: Demonstrates how to create an MQTT client, connect to a broker, publish a message, and disconnect. This example showcases the new MQTT client feature in Vert.x 3.5.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/releases/2018-08-10-vertx-3.5.0.Beta1-release.md#2025-04-19_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nMqttClient mqttClient = MqttClient.create(vertx,\n   new MqttClientOptions()\n     .setPort(BROKER_PORT)\n     .setHost(BROKER_HOST)).connect(ar ->\n  if (ar.succeeded()) {\n    System.out.println(\"Connected to a server\");\n\n    mqttClient.publish(\n      MQTT_TOPIC,\n      Buffer.buffer(MQTT_MESSAGE),\n      MqttQoS.AT_MOST_ONCE,\n      false,\n      false,\n      s -> mqttClient.disconnect(d -> System.out.println(\"Disconnected from server\")));\n  } else {\n    System.out.println(\"Failed to connect to a server\");\n    ar.cause().printStackTrace();\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Loading Catalogue Data - JavaScript\nDESCRIPTION: Retrieves album data from MongoDB when the event bus connection opens and renders it using Knockout.js. Sends a find request to the mongo-persistor module.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/js_web_tutorial.md#2025-04-19_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\neb.onopen = function() {\n        // Get the static data\n\n        eb.send('vertx.mongopersistor', {action: 'find', collection: 'albums', matcher: {} },\n          function(reply) {\n            if (reply.status === 'ok') {\n              var albumArray = [];\n              for (var i = 0; i < reply.results.length; i++) {\n                albumArray[i] = new Album(reply.results[i]);\n              }\n              that.albums = ko.observableArray(albumArray);\n              ko.applyBindings(that);\n            } else {\n              console.error('Failed to retrieve albums: ' + reply.message);\n            }\n          });\n      };\n```\n\n----------------------------------------\n\nTITLE: Reading Complete HTTP Response Body with Buffer in Ruby\nDESCRIPTION: Demonstrates reading an entire HTTP response body by accumulating chunks into a buffer. This approach collects all data and processes it only after the complete response has been received.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_ruby.md#2025-04-19_snippet_75\n\nLANGUAGE: ruby\nCODE:\n```\nclient = Vertx::HttpClient.new\nclient.host = 'foo.com'  \n\nclient.get_now('/some-path') do |resp|\n\n  # Create a buffer to hold the entire response body\n  body = Vertx::Buffer.create(0)\n\n  resp.data_handler do |buffer|\n    # Add chunk to the buffer\n    body.append_buffer(buffer)\n  end\n\n  resp.end_handler do\n    # The entire response body has been received\n    puts \"The total body received was #{body.length} bytes\"\n  end\n\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Auth Handler Chaining in Vert.x Web\nDESCRIPTION: Shows how to create a chain of authentication handlers in Vert.x Web. This example demonstrates combining HTTP Basic Auth and Form Redirect Auth handlers to secure a route with multiple authentication mechanisms.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/releases/2018-08-10-vertx-3.5.0.Beta1-release.md#2025-04-19_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nChainAuthHandler chain = ChainAuthHandler.create();\n\n// add http basic auth handler to the chain\nchain.append(BasicAuthHandler.create(provider));\n\n// add form redirect auth handler to the chain\nchain.append(RedirectAuthHandler.create(provider));\n\n// secure your route\nrouter.route(\"/secure/resource\").handler(chain);\n\n// your app\nrouter.route(\"/secure/resource\").handler(ctx -> {\n  // do something...\n});\n```\n\n----------------------------------------\n\nTITLE: Streaming File to HTTP Request using Vert.x Pump\nDESCRIPTION: Demonstrates how to pump data from an AsyncFile to an HTTP request using Vert.x's Pump functionality. Shows error handling and request completion handling.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_ruby.md#2025-04-19_snippet_109\n\nLANGUAGE: ruby\nCODE:\n```\nclient = Vertx::HttpClient.new\nclient.host = 'foo.com'\n\nVertx::FileSystem.open('some-file.dat') do |err, async_file|\n    if err\n        puts \"Failed to open file #{err}\"\n    else\n        request = client.put('/uploads') do |resp|\n            puts \"resp status code #{resp.status_code}\"\n        end\n        pump = Vertx::Pump.new(async_file, request)\n        pump.start\n        async_file.end_handler do \n            # File sent, end HTTP requuest\n            request.end\n        end\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: DNS Record Type Resolution Examples\nDESCRIPTION: Collection of examples showing how to resolve different types of DNS records (A, AAAA, CNAME, MX, TXT, NS, SRV, PTR) using the Vert.x DNS client.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_ruby.md#2025-04-19_snippet_111\n\nLANGUAGE: ruby\nCODE:\n```\nclient = Vertx::DnsClient.new(Addrinfo.tcp('10.0.0.1', 53))\nclient.resolve_a('vertx.io') do |err, records|\n    if err\n        puts \"Failed to resolve entry #{err}\"\n    else\n        for r in records\n            puts r\n        end\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Using bodyHandler to Read Complete HTTP Request Body in Vert.x\nDESCRIPTION: Creates an HTTP server that uses bodyHandler to receive the entire request body in a single callback. This simplifies handling request bodies compared to using dataHandler and endHandler separately.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_js.md#2025-04-19_snippet_46\n\nLANGUAGE: javascript\nCODE:\n```\nvar server = vertx.createHttpServer();\n\nserver.requestHandler(function(request) {\n\n  request.bodyHandler(function(body) {\n    console.log('The total body received was ' + body.length() + ' bytes');\n  });\n  \n}).listen(8080, 'localhost');\n```\n\n----------------------------------------\n\nTITLE: Making HTTP Requests with Vert.x Client\nDESCRIPTION: Demonstrates how to make various types of HTTP requests (GET, POST, etc.) using the Vert.x HTTP client. It shows how to set headers, write to the request body, and handle responses.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_js.md#2025-04-19_snippet_54\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar client = vertx.createHttpClient().host(\"foo.com\");\n\nvar request = client.post(\"/some-path/\", function(resp) {\n    console.log(\"Got a response: \" + resp.statusCode());\n});\n\nrequest.end();\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar client = vertx.createHttpClient().host(\"foo.com\");\n\nclient.getNow(\"/some-path/\", function(resp) {\n    console.log(\"Got a response: \" + resp.statusCode());\n});\n```\n\n----------------------------------------\n\nTITLE: SQL Client Templates with Generated Row Mapper\nDESCRIPTION: Shows how to use generated row mappers with SQL Client Templates using @RowMapped annotation for data objects.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/releases/2020-05-25-vertx-4-milestone5-release.md#2025-04-19_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n@DataObject\n@RowMapped\nclass User {\n  ...\n}\n\n// Generated by SQL template code generator\nclass UserRowMapper implements java.util.function.Function<io.vertx.sqlclient.Row, User> {\n  ...\n}\n\nSqlTemplate\n  .forQuery(client, \"SELECT * FROM users WHERE id=#{id}\")\n  .mapTo(UserRowMapper.INSTANCE)\n  .execute(Collections.singletonMap(\"id\", 1))\n  .onSuccess(users -> {\n    users.forEach(user -> {\n      System.out.println(user.firstName + \" \" + user.lastName);\n    });\n  });\n```\n\n----------------------------------------\n\nTITLE: Setting up a SockJS-EventBus Bridge in Vert.x\nDESCRIPTION: This snippet demonstrates how to create a SockJS bridge to connect the server-side event bus with client-side JavaScript. It shows the minimal configuration needed to establish the bridge.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_js.md#2025-04-19_snippet_72\n\nLANGUAGE: javascript\nCODE:\n```\nvar httpServer = vertx.createHttpServer();\n\nvar sockJSServer = vertx.createSockJSServer(httpServer);\n\nsockJSServer.bridge({prefix : '/eventbus'}, [], [] );\n\nhttpServer.listen(8080);\n```\n\n----------------------------------------\n\nTITLE: Including Shared Resources in Vert.x Module Descriptor\nDESCRIPTION: This JSON snippet demonstrates how to use the 'includes' field in a module's mod.json file to include resources from another module. It allows modules to share common resources like JAR files or scripts.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/mods_manual.md#2025-04-19_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    ...\n    \"includes\":\"com.acme.common-stuff-v1.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Making Generic HTTP Requests with Vert.x Client in Ruby\nDESCRIPTION: Example showing how to make an HTTP request with a dynamically specified method using the general request method. This approach is useful when the HTTP method is determined at runtime.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_ruby.md#2025-04-19_snippet_65\n\nLANGUAGE: ruby\nCODE:\n```\nclient = Vertx::HttpClient.new\nclient.host = 'foo.com'    \n\nrequest = client.request('POST', '/some-path/') do |resp|\n    puts \"got response #{resp.status_code}\" \nend\n\nrequest.end\n```\n\n----------------------------------------\n\nTITLE: Setting Response Headers in Vert.x\nDESCRIPTION: This snippet shows two ways to set response headers in Vert.x: using the headers hash directly and using the putHeader method for a more fluent API.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_js.md#2025-04-19_snippet_45\n\nLANGUAGE: javascript\nCODE:\n```\nrequest.response.headers()['Some-Header'] = 'foo';\n\nrequest.response.putHeader('Some-Header', 'foo').putHeader('Other-Header', 'bar');\n\nrequest.response.putAllHeaders({'Some-Header': 'foo', 'Other-Header': 'bar'});\n```\n\n----------------------------------------\n\nTITLE: Adding Headers to HTTP Client Request in Vert.x with Ruby\nDESCRIPTION: Example showing how to add HTTP headers to a client request using the headers MultiMap. This allows setting custom headers for authentication, content negotiation, etc.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_ruby.md#2025-04-19_snippet_70\n\nLANGUAGE: ruby\nCODE:\n```\nclient = Vertx::HttpClient.new\nclient.host = 'foo.com'  \n\nrequest = client.post('/some-path') do |resp|\n    puts \"got response #{resp.status_code}\" \nend\n\nrequest.headers['Some-Header'] = 'Some-Value'\nrequest.end\n```\n\n----------------------------------------\n\nTITLE: Connecting to a TCP Server with Vert.x NetClient in Ruby\nDESCRIPTION: Demonstrates how to create a NetClient instance and connect to a server by specifying port and hostname. The connection handler receives an error object and a socket when the connection is established.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_ruby.md#2025-04-19_snippet_34\n\nLANGUAGE: ruby\nCODE:\n```\nclient = Vertx::NetClient.new\n\nclient.connect(1234, 'localhost') do |err, sock|\n    puts 'We have connected' if !err\nend\n```\n\n----------------------------------------\n\nTITLE: HTTP Tunnel Creation in Vert.x 4\nDESCRIPTION: Shows the improved HTTP tunnel creation process with better handling of connection switching and status codes.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/releases/2020-09-25-vertx-4-beta3-release.md#2025-04-19_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nclient.request(HttpMethod.CONNECT, \"some-uri\")\n  .onSuccess(request -> {\n\n    // Connect to the server\n    request.connect(ar -> {\n      if (ar.succeeded()) {\n        HttpClientResponse response = ar.result();\n\n        if (response.statusCode() != 200) {\n          // Connect failed for some reason\n        } else {\n          // Tunnel created, raw buffers are transmitted on the wire\n          NetSocket socket = response.netSocket();\n        }\n      }\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Git and NPM Ignore Files for ES6 Vert.x Projects\nDESCRIPTION: Configuration for .gitignore and .npmignore files to properly handle transpiled code in the project. The .gitignore excludes generated code while .npmignore ensures the lib directory is included in npm packages.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/2015-11-25-vertx-es6-back-to-the-future.md#2025-04-19_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n/lib\n/node_modules\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n/.gitignore\n```\n\n----------------------------------------\n\nTITLE: DNS Client Initialization and Basic Lookup\nDESCRIPTION: Shows how to initialize a DNS client with multiple DNS servers and perform basic DNS lookups for A/AAAA records.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_ruby.md#2025-04-19_snippet_110\n\nLANGUAGE: ruby\nCODE:\n```\nclient = Vertx::DnsClient.new(Addrinfo.tcp('10.0.0.1', 53), Addrinfo.tcp('10.0.0.2', 53))\n\nclient.lookup('vertx.io') do |err, result|\n    if err\n        puts \"Failed to resolve entry #{err}\"\n    else\n        puts result\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing WebSocket Client in Vert.x\nDESCRIPTION: Demonstrates how to create a WebSocket client using Vert.x HTTP client. Connects to a WebSocket server, sets up a data handler, and sends a text frame.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_ruby.md#2025-04-19_snippet_82\n\nLANGUAGE: ruby\nCODE:\n```\nclient = Vertx::HttpClient.new\nclient.port = 8080\n\nclient.connect_web_socket('http://localhost:8080/services/echo') do |websocket|\n\n  websocket.data_handler { |buff| puts \"got #{buff}\"}\n  \n  websocket.write_text_frame('foo')\n  \nend\n```\n\n----------------------------------------\n\nTITLE: Resolving PTR Records in Vert.x\nDESCRIPTION: Shows how to resolve PTR records which map IP addresses to names. Requires using the PTR notation format for the IP address.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_js.md#2025-04-19_snippet_102\n\nLANGUAGE: javascript\nCODE:\n```\nclient = dns.createDnsClient('1.0.0.10.in-addr.arpa')\nclient.resolvePTR('10.0.0.1', function( err, result ) {\n    if (err != null) {\n        console.log( \"Failed to resolve entry \" + err );\n    } else {\n        console.log( result );\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Reading HTTP Request Body Chunks in Vert.x\nDESCRIPTION: This snippet shows how to handle streaming data from an HTTP request body by setting a data handler that processes each chunk as it arrives.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_ruby.md#2025-04-19_snippet_49\n\nLANGUAGE: ruby\nCODE:\n```\nserver.request_handler do |request|\n\n  request.data_handler do |buffer|\n    puts \"I received  #{buffer.length} bytes\"\n  end\n  \nend.listen(8080, 'localhost')\n```\n\n----------------------------------------\n\nTITLE: Calling a Vert.x Time Service from JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to call the previously defined time service from client-side code or other server-side components using the Vert.x event bus.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/ruby_web_tutorial.md#2025-04-19_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\neventBus.send(\"acme.timeService\", null, function(reply) {\n    console.log(\"Time is \" + reply.current_time);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Main Verticle in Maven POM\nDESCRIPTION: Updated section of the Maven POM file showing the addition of the vertx.verticle property for specifying the main verticle class.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/f8-vertx-maven-plugin-series/2016-12-07-post-01-getting-started-with-new-fabric8-vertx-maven-plugin.md#2025-04-19_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n<script src=\"https://gist.github.com/kameshsampath/24a1ed6a377b118f06af2c4b4ddf0ca0.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Defining Web API Service Interface in Java\nDESCRIPTION: Example of using @WebApiServiceGen annotation to create an OpenAPI 3 service interface for handling API requests.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/releases/2018-12-03-vertx-3.6.0-release.md#2025-04-19_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@WebApiServiceGen\ninterface TransactionService {\n\n  void getTransactionsList(String from, String to, OperationRequest context, Handler<AsyncResult<OperationResponse>> resultHandler);\n\n  void putTransaction(JsonObject body, OperationRequest context, Handler<AsyncResult<OperationResponse>> resultHandler);\n}\n```\n\n----------------------------------------\n\nTITLE: Handling File Uploads in Vert.x HTTP Server\nDESCRIPTION: This snippet demonstrates how to handle multipart form file uploads by setting an upload handler that processes each uploaded file.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_ruby.md#2025-04-19_snippet_52\n\nLANGUAGE: ruby\nCODE:\n```\nrequest.expect_multi_part = true\n\nrequest.upload_handler do |upload|\n   puts \"Got an upload #{upload.filename}\nend\n```\n\n----------------------------------------\n\nTITLE: Allow All Messages in SockJS Bridge (JavaScript)\nDESCRIPTION: Configures a SockJS bridge to allow all messages through by using empty JSON objects as match patterns for both inbound and outbound messages.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_js.md#2025-04-19_snippet_75\n\nLANGUAGE: javascript\nCODE:\n```\nsockJSServer.bridge({prefix : '/eventbus'}, [{}], [{}]);\n```\n\n----------------------------------------\n\nTITLE: Reading Directory Contents with Filter in Vertx\nDESCRIPTION: Demonstrates reading directory contents with a regex filter to list only specific files (e.g., .txt files).\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_ruby.md#2025-04-19_snippet_97\n\nLANGUAGE: ruby\nCODE:\n```\nVertx::FileSystem.read_dir('mydirectory', '.*\\.txt') do |err, res|\n  if !err\n    puts 'Directory contains these .txt files'\n    res.each do |filename|\n        puts filename\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using Web Client Session and Response Predicates in Java\nDESCRIPTION: Examples of using the new WebClientSession for cookie management and response predicates for server-side response validation.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/releases/2018-12-03-vertx-3.6.0-release.md#2025-04-19_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n// The session is created per user\n// from now on cookies are handled by the session\nWebClientSession session = WebClientSession.create(client);\n```\n\nLANGUAGE: java\nCODE:\n```\nclient\n  .get(8080, \"myserver.mycompany.com\", \"/some-uri\")\n  .expect(ResponsePredicate.SC_SUCCESS)\n  .expect(ResponsePredicate.JSON)\n  .send(result -> { ... });\n```\n\n----------------------------------------\n\nTITLE: Installing Vert.x 4 using HomeBrew\nDESCRIPTION: Commands to install Vert.x 4 using HomeBrew package manager by adding the custom vertx-distrib TAP repository and installing the vertx4 formula\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/releases/2020-11-24-vertx-4-cr2-release.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n> brew tap vertx-distrib/tap\n> brew install vertx4\n```\n\n----------------------------------------\n\nTITLE: Accessing Configuration in a Vert.x Verticle\nDESCRIPTION: This snippet shows how to access JSON configuration passed to a verticle during deployment. The configuration is available through the Vertx.config method.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_ruby.md#2025-04-19_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nconfig = Vertx.config;\n\n# Do something with config\n\nputs \"number of wibbles is #{config.wibble_number}\"\n```\n\n----------------------------------------\n\nTITLE: Unregistering an Event Bus Handler in Vert.x\nDESCRIPTION: Demonstrates how to unregister a previously registered event bus handler. This is useful for cleaning up handlers that are no longer needed.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_js.md#2025-04-19_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\neb.unregisterHandler('test.address', myHandler);\n```\n\n----------------------------------------\n\nTITLE: Initializing Vert.x Context Class\nDESCRIPTION: Defines the Context class initialization and context execution method. Provides functionality for running tasks within a Vert.x context.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/api/epydoc/api-objects.txt#2025-04-19_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\napi_shim.vertx.Context.__init__\napi_shim.vertx.Context.run_on_context\n```\n\n----------------------------------------\n\nTITLE: Ending HTTP Response with String Content in Vert.x Ruby\nDESCRIPTION: Shows how to end an HTTP response while also writing a final string. This is equivalent to calling write_str followed by end with no arguments.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_ruby.md#2025-04-19_snippet_53\n\nLANGUAGE: ruby\nCODE:\n```\nrequest.response.end('That's all folks')\n```\n\n----------------------------------------\n\nTITLE: Creating and Connecting TCP Client\nDESCRIPTION: Example of creating a NetClient instance and establishing a TCP connection to a server with error handling.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_js.md#2025-04-19_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nvar client = vertx.createNetClient();\n\nclient.connect(1234, 'localhost', function(err, sock) {\n    if (!err) {\n        console.log('We have connected');\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Flowable from MultiMap with Rxified API in Java\nDESCRIPTION: Demonstrates how to create a Flowable from a MultiMap using the Rxified API for advanced transformations.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/site/blog/posts/releases/2019-05-27-vertx-3.7.1-release.md#2025-04-19_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nFlowable<Entry<String, String>> headers = Flowable.fromIterable(request.headers());\n```\n\n----------------------------------------\n\nTITLE: Reading HTTP Response Status in Vert.x\nDESCRIPTION: Example of handling HTTP response and reading status code and message from the response object.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_js.md#2025-04-19_snippet_57\n\nLANGUAGE: javascript\nCODE:\n```\nvar client = vertx.createHttpClient().host(\"foo.com\");\n\nclient.getNow(\"/some-path/\", function(resp) {\n    console.log('server returned status code: ' + resp.statusCode());\n    console.log('server returned status message: ' + resp.statusMessage());\n});\n```\n\n----------------------------------------\n\nTITLE: Publishing and Sending Messages on Event Bus in Ruby\nDESCRIPTION: Examples of publishing messages to all handlers and sending point-to-point messages on the Vert.x event bus.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_ruby.md#2025-04-19_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\nVertx::EventBus.publish(\"test.address\", 'hello world')\nVertx::EventBus.send(\"test.address\", 'hello world')\n```\n\n----------------------------------------\n\nTITLE: TCP Echo Server Implementation in Vert.x\nDESCRIPTION: Complete example of a TCP echo server that writes back all received data\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_groovy.md#2025-04-19_snippet_28\n\nLANGUAGE: groovy\nCODE:\n```\ndef server = vertx.createNetServer()\n\nserver.connectHandler { sock ->\n    sock.dataHandler { buffer -> sock << buffer }\n}.listen(1234, \"localhost\")\n```\n\n----------------------------------------\n\nTITLE: TCP Echo Server Implementation\nDESCRIPTION: Complete implementation of a TCP echo server that writes back received data.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/core_manual_ruby.md#2025-04-19_snippet_30\n\nLANGUAGE: ruby\nCODE:\n```\nserver = Vertx::NetServer.new\n\nserver.connect_handler do |sock|\n    sock.data_handler do |buffer|\n        sock.write(buffer)\n    end\nend.listen(1234, 'localhost')\n```\n\n----------------------------------------\n\nTITLE: One-shot Timer Implementation\nDESCRIPTION: Shows how to create a delayed task using Vert.x one-shot timer.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/vertx1x_docs/docs_md/core_manual_ruby.md#2025-04-19_snippet_20\n\nLANGUAGE: ruby\nCODE:\n```\nVertx.set_timer(1000) do\n    puts 'And one second later this is printed'\nend\n\nputs 'First this is printed'\n```\n\n----------------------------------------\n\nTITLE: Building and Installing Vert.x Module\nDESCRIPTION: Maven command to build, test and install the Vert.x module in the local Maven repository.\nSOURCE: https://github.com/vert-x3/vertx-web-site/blob/master/src/main/vertx2/docs_md/maven_dev.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmvn install\n```"
  }
]