[
  {
    "owner": "skeletonlabs",
    "repo": "skeleton",
    "content": "TITLE: Component Props TypeScript Interface\nDESCRIPTION: Type definitions for component props with JSDoc comments for documentation generation\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/resources/contribute/components.mdx#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface <component>Props {\n\t/** Sets the open state of the item. */\n\topen?: boolean;\n\n\t// Parent ---\n\t/** Set the parent base styles. */\n\tbase?: string;\n\t/** Set the parent background styles. */\n\tbackground?: string;\n\t/** Provide the parent a set of arbitrary classes. */\n\tclasses?: string;\n\n\t// Lead ---\n\t/** Sets the lead snippet element's base styles. */\n\tleadBase?: string;\n\t/** Sets the lead snippet element's padding styles. */\n\tleadPadding?: string;\n\t/** Provide arbitrary CSS classes to the lead snippet. */\n\tleadClasses?: string;\n\n\t// Children ---\n\t/** The default slot contents within the component. */\n\tchildren?: Snippet;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Skeleton Core Packages\nDESCRIPTION: Command to install Skeleton core and Svelte component packages as development dependencies.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/get-started/installation/vite-svelte.mdx#2025-04-07_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nnpm i -D @skeletonlabs/skeleton @skeletonlabs/skeleton-svelte\n```\n\n----------------------------------------\n\nTITLE: Implementing Color Pairings with CSS light-dark Function\nDESCRIPTION: Shows how Skeleton implements color pairings using the CSS light-dark function. This allows for automatic color switching between light and dark modes without additional classes.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/design/colors.mdx#2025-04-07_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.text-primary-300-700 {\n\tcolor: light-dark(var(--color-primary-300), var(--color-primary-700));\n}\n```\n\n----------------------------------------\n\nTITLE: Using Color Pairings for Visual Hierarchy in HTML\nDESCRIPTION: Demonstrates how to use color pairings to create a visual hierarchy in both light and dark modes. This example shows a range of background colors from foreground to background elements.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/design/colors.mdx#2025-04-07_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"bg-primary-950-50\">Foreground</div>\n<div class=\"bg-primary-900-100\">...</div>\n<div class=\"bg-primary-800-200\">...</div>\n<div class=\"bg-primary-700-300\">...</div>\n<div class=\"bg-primary-600-400\">...</div>\n<div class=\"bg-primary-500\">Branding</div>\n<div class=\"bg-primary-400-600\">...</div>\n<div class=\"bg-primary-300-700\">...</div>\n<div class=\"bg-primary-200-800\">...</div>\n<div class=\"bg-primary-100-900\">...</div>\n<div class=\"bg-primary-50-950\">Background</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Composed Pattern in React with Accordion Component\nDESCRIPTION: Example of the composed pattern implementation in React using dot notation syntax. The example shows how to structure an Accordion component with nested Item, Lead, Control, and Panel components.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/resources/contribute/components.mdx#2025-04-07_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<Accordion>\n\t<Accordion.Item>\n\t\t<Accordion.Lead>(lead)</Accordion.Lead>\n\t\t<Accordion.Control>(control)</Accordion.Control>\n\t\t<Accordion.Panel>(panel)</Accordion.Panel>\n\t</Accordion.Item>\n</Accordion>\n```\n\n----------------------------------------\n\nTITLE: Importing Skeleton Components\nDESCRIPTION: Demonstrates how to import components from framework-specific Skeleton packages.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/get-started/fundamentals.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Avatar } from '@skeletonlabs/skeleton-{react|svelte}';\n```\n\n----------------------------------------\n\nTITLE: Dark Mode Variant Usage in HTML\nDESCRIPTION: Example of using Tailwind's dark variant to apply different background colors in light and dark modes\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/guides/mode.mdx#2025-04-07_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<!-- Light Mode: White | Dark Mode: Black -->\n<div class=\"bg-white dark:bg-black\">...</div>\n```\n\n----------------------------------------\n\nTITLE: Using Tailwind Color Utility Classes in HTML\nDESCRIPTION: Demonstrates how to use Tailwind color utility classes with Skeleton's color system. The example shows applying background, border, and SVG fill colors using the primary, secondary, and surface color palettes.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/design/colors.mdx#2025-04-07_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"bg-primary-500\">...</div>\n<div class=\"border border-secondary-600\">...</div>\n<svg class=\"fill-surface-950\">...</svg>\n```\n\n----------------------------------------\n\nTITLE: Setting Active Theme in HTML\nDESCRIPTION: Shows how to activate a specific theme using the data-theme attribute on the HTML element.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/design/themes.mdx#2025-04-07_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<html data-theme=\"cerberus\">\n\t...\n</html>\n```\n\n----------------------------------------\n\nTITLE: Modifying Theme Properties\nDESCRIPTION: Example of overriding default theme properties for a specific theme.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/design/themes.mdx#2025-04-07_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n[data-theme='cerberus'] {\n\t--spacing: 0.22rem;\n\t--radius-container: 0.375rem;\n\t--heading-font-weight: bolder;\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Color Transparency in HTML\nDESCRIPTION: Shows how to use Tailwind's color transparency syntax with Skeleton colors and color pairings. The example demonstrates applying transparency to both standard colors and color pairings.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/design/colors.mdx#2025-04-07_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"bg-primary-500/25\">Primary Color @ 25% transparency</div>\n<div class=\"bg-surface-50-950/60\">Surface Pairing 50/950 @ 60% transparency</div>\n```\n\n----------------------------------------\n\nTITLE: Defining Philosophy Cards Layout in JSX\nDESCRIPTION: A responsive grid layout using JSX that showcases Skeleton's core philosophy through cards highlighting different aspects like being framework agnostic, native-first, providing simple standards, utility-first approach, opt-in by default, and adaptive design.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/get-started/introduction.mdx#2025-04-07_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n\t<div className=\"card preset-outlined-surface-200-800 bg-surface-50-950 p-10 space-y-4\">\n\t\t<h3 className=\"h3\">Framework Agnostic</h3>\n\t\t<p className=\"text-surface-700-300\">\n\t\t\tSkeleton's core features are framework agnostic, only requiring the use of{' '}\n\t\t\t<a className=\"anchor\" href=\"https://tailwindcss.com/\" target=\"_blank\" rel=\"external\">\n\t\t\t\tTailwind CSS\n\t\t\t</a>\n\t\t\t. This provides full access to all design system features, while enabling you to standardize the design process for your framework of\n\t\t\tchoice.\n\t\t</p>\n\t</div>\n\t<div className=\"card preset-outlined-surface-200-800 bg-surface-50-950 p-10 space-y-4\">\n\t\t<h3 className=\"h3\">Native-First</h3>\n\t\t<p className=\"text-surface-700-300\">\n\t\t\tWe aim to embrace the interface of the web, not replace it. This is why Skeleton defaults to semantic HTML elements and native browser\n\t\t\tAPIs. Beyond ease of use, we feel this offers a huge advantages to accessibility.\n\t\t</p>\n\t</div>\n\t<div className=\"card preset-outlined-surface-200-800 bg-surface-50-950 p-10 space-y-4\">\n\t\t<h3 className=\"h3\">Simple Standards</h3>\n\t\t<p className=\"text-surface-700-300\">\n\t\t\tWe aim to standardize the design process, providing common conventions that are easy to learn and retain, whether you work alone or in\n\t\t\ta team environment. Covering common fixtures such as themes, colors, typography, spacing, and more.\n\t\t</p>\n\t</div>\n\t<div className=\"card preset-outlined-surface-200-800 bg-surface-50-950 p-10 space-y-4\">\n\t\t<h3 className=\"h3\">Utility-First</h3>\n\t\t<p className=\"text-surface-700-300\">\n\t\t\tSkeleton embraces the{' '}\n\t\t\t<a className=\"anchor\" href=\"https://tailwindcss.com/docs/utility-first\" target=\"_blank\" rel=\"external\">\n\t\t\t\tutility-first\n\t\t\t</a>{' '}\n\t\t\tmethodology for styling, supporting all features provided by{' '}\n\t\t\t<a className=\"anchor\" href=\"https://tailwindcss.com/\" target=\"_blank\" rel=\"external\">\n\t\t\t\tTailwind\n\t\t\t</a>\n\t\t\t, while extending it's capabilities in meaningful ways. Providing full support for the encapsulated components of the modern web.\n\t\t</p>\n\t</div>\n\t<div className=\"card preset-outlined-surface-200-800 bg-surface-50-950 p-10 space-y-4\">\n\t\t<h3 className=\"h3\">Opt-In by Default</h3>\n\t\t<p className=\"text-surface-700-300\">\n\t\t\tMost features in Skeleton are modular and opt-in by default. Enabling interface features like buttons and typography via dedicated\n\t\t\tutility classes. This allows for a simple escape hatch when you need to draw outside the lines and generate custom interfaces.\n\t\t</p>\n\t</div>\n\t<div className=\"card preset-outlined-surface-200-800 bg-surface-50-950 p-10 space-y-4\">\n\t\t<h3 className=\"h3\">Adaptive</h3>\n\t\t<p className=\"text-surface-700-300\">\n\t\t\tSkeleton is intended to adapt to the design and aesthetic of your project, while still providing reasonable defaults. Providing a\n\t\t\tpowerful{' '}\n\t\t\t<a className=\"anchor\" href=\"https://themes.skeleton.dev/\" target=\"_blank\" rel=\"external\">\n\t\t\t\ttheme generator\n\t\t\t</a>{' '}\n\t\t\tfor custom themes, while also supplying a curated set of themes for those less design savvy.\n\t\t</p>\n\t</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Data Attribute Dark Mode HTML Implementation\nDESCRIPTION: Shows how to implement dark mode using the data attribute strategy in HTML markup\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/guides/mode.mdx#2025-04-07_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<html data-mode=\"dark\">\n\t...\n</html>\n```\n\n----------------------------------------\n\nTITLE: Enabling Multiple Open Items in Accordion Component\nDESCRIPTION: Shows how to enable multiple accordion items to be open simultaneously using the 'multiple' prop.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/components/accordion/react.mdx#2025-04-07_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Accordion multiple>...</Accordion>\n```\n\n----------------------------------------\n\nTITLE: Data Attribute Dark Mode Strategy in CSS\nDESCRIPTION: Demonstrates implementing dark mode using a data attribute strategy with a custom CSS variant\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/guides/mode.mdx#2025-04-07_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n@custom-variant dark (&:where([data-mode=dark], [data-mode=dark] *));\n```\n\n----------------------------------------\n\nTITLE: Importing Skeleton Themes via CSS\nDESCRIPTION: Demonstrates the standard method of importing Skeleton themes through CSS imports in the root stylesheet. Shows imports for both React and Svelte applications.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/guides/cookbook/dynamic-theming.mdx#2025-04-07_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n@import 'tailwindcss';\n\n@import '@skeletonlabs/skeleton';\n@import '@skeletonlabs/skeleton/themes/cerberus';\n@import '@skeletonlabs/skeleton/themes/catppuccin';\n```\n\n----------------------------------------\n\nTITLE: Applying Theme-Specific Styles with Skeleton Variants\nDESCRIPTION: Shows how to use Skeleton's theme variants to apply different styles based on the active theme. This example demonstrates changing background colors for different themes.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/get-started/core-api.mdx#2025-04-07_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"bg-green-500 theme-cerberus:bg-red-500\">...</div>\n<div class=\"bg-green-500 theme-mona:bg-red-500\">...</div>\n<div class=\"bg-green-500 theme-vox:bg-red-500\">...</div>\n```\n\n----------------------------------------\n\nTITLE: Theme-Specific Styling\nDESCRIPTION: Shows how to apply different styles for specific themes with light and dark mode variants.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/design/themes.mdx#2025-04-07_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n/** Target only Cerberus .h1 elements. */\n[data-theme='cerberus'] .h1 {\n\tcolor: red;\n\t@variant dark {\n\t\tcolor: green;\n\t}\n}\n/** Target only Mona .h1 elements. */\n[data-theme='mona'] .h1 {\n\tcolor: blue;\n\t@variant dark {\n\t\tcolor: yellow;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Background Gradients\nDESCRIPTION: Demonstrates how to create complex background gradients using theme colors.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/design/themes.mdx#2025-04-07_snippet_6\n\nLANGUAGE: css\nCODE:\n```\n[data-theme='cerberus'] body {\n\tbackground-image:\n\t\tradial-gradient(at 24% 25%, color-mix(in oklab, var(--color-primary-500) 30%, transparent) 0px, transparent 30%),\n\t\tradial-gradient(at 35% 13%, color-mix(in oklab, var(--color-success-500) 18%, transparent) 0px, transparent 30%),\n\t\tradial-gradient(at 100% 64%, color-mix(in oklab, var(--color-error-500) 3%, transparent) 0px, transparent 40%);\n\tbackground-attachment: fixed;\n\tbackground-position: center;\n\tbackground-repeat: no-repeat;\n\tbackground-size: cover;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Composed Pattern in Svelte with Accordion Component\nDESCRIPTION: Example of the composed pattern implementation in Svelte using snippets. Demonstrates how to structure an Accordion component with nested Item component and snippets for controlLead, control, and panel sections.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/resources/contribute/components.mdx#2025-04-07_snippet_7\n\nLANGUAGE: svelte\nCODE:\n```\n<Accordion>\n\t<Accordion.Item>\n\t\t{#snippet controlLead()}(lead){/snippet}\n\t\t{#snippet control()}(control){/snippet}\n\t\t{#snippet panel()}(panel){/snippet}\n\t</Accordion.Item>\n</Accordion>\n```\n\n----------------------------------------\n\nTITLE: Implementing Programmatic Clipboard Operations in Astro\nDESCRIPTION: This code snippet demonstrates how to programmatically interact with the clipboard API using an Astro component. It likely includes methods for copying to and pasting from the clipboard.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/guides/cookbook/clipboard.mdx#2025-04-07_snippet_0\n\nLANGUAGE: astro\nCODE:\n```\n<Example />\n```\n\n----------------------------------------\n\nTITLE: Additional FileUpload Features\nDESCRIPTION: Miscellaneous features including drag-and-drop, directory support, and media capture\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/components/file-upload/react.mdx#2025-04-07_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<FileUpload allowDrop> {/* Enable drag-and-drop */}\n<FileUpload directory> {/* Enable directories */}\n<FileUpload capture> {/* Enable media capture on mobile devices */}\n```\n\n----------------------------------------\n\nTITLE: Registering Multiple Themes\nDESCRIPTION: Demonstrates how to register multiple preset and custom themes in your application's stylesheet.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/design/themes.mdx#2025-04-07_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n/* @import '@skeletonlabs/skeleton'; */\n/* @import '@skeletonlabs/skeleton/optional/presets'; */\n\n/* Register Preset Themes */\n@import '@skeletonlabs/skeleton/themes/cerberus';\n@import '@skeletonlabs/skeleton/themes/mona';\n@import '@skeletonlabs/skeleton/themes/vox';\n\n/* Register a Custom Themes */\n/* Make sure to resolve the relative path. */\n/* Note the .css extension is optional. */\n@import '../{my-theme-name}';\n```\n\n----------------------------------------\n\nTITLE: Customizing Type Scale in CSS for Skeleton Theme\nDESCRIPTION: This CSS snippet demonstrates how to adjust the typographic scale by modifying the type scale theme property. The scale factor affects all text size classes in the framework.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/design/typography.mdx#2025-04-07_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n[data-theme='cerberus'] {\n\t--text-scaling: 1.067;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Tailwind Forms Plugin\nDESCRIPTION: CSS configuration showing how to implement the Tailwind Forms plugin using the @plugin directive\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/tailwind/forms.mdx#2025-04-07_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@import 'tailwindcss';\n@plugin '@tailwindcss/forms';\n\n/* ...Skeleton config here... */\n```\n\n----------------------------------------\n\nTITLE: Creating New Vite Project with Svelte\nDESCRIPTION: Commands to create a new Vite project with Svelte and TypeScript template, including project initialization and dependency installation.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/get-started/installation/vite-svelte.mdx#2025-04-07_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nnpm create vite@latest my-skeleton-app -- --template svelte-ts\ncd my-skeleton-app\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Tags Input with Icons Implementation in Svelte\nDESCRIPTION: Shows how to use the Tags Input component with custom icons in Svelte.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/components/tags-input/react.mdx#2025-04-07_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\nimport { Page as ExampleIcons } from '@examples/components/tags-input/Example.tsx';\n```\n\n----------------------------------------\n\nTITLE: Dark Mode HTML Class Implementation\nDESCRIPTION: Shows how to apply dark mode using the selector strategy by adding the dark class to the HTML element\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/guides/mode.mdx#2025-04-07_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<html class=\"dark\">\n\t...\n</html>\n```\n\n----------------------------------------\n\nTITLE: Exporting Components in React Package\nDESCRIPTION: Example of how to export components in the React package. Shows the pattern of exporting components from their respective index.js files in the lib/index.ts file.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/resources/contribute/components.mdx#2025-04-07_snippet_11\n\nLANGUAGE: ts\nCODE:\n```\nexport * from '../components/Foo/index.js';\nexport * from '../components/Bar/index.js';\n```\n\n----------------------------------------\n\nTITLE: Configuring Theme Spacing Variable in CSS\nDESCRIPTION: Sets the base spacing scale for a custom theme named 'cerberus'. This CSS variable affects various utility classes including padding, margin, width, height, and spacing properties throughout the application.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/design/spacing.mdx#2025-04-07_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n[data-theme='cerberus'] {\n\t--spacing: 0.25rem;\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Accordion Icons in React TSX\nDESCRIPTION: Shows how to use custom icons for the open and closed states of an Accordion component using the 'iconOpen' and 'iconClosed' props.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/components/accordion/react.mdx#2025-04-07_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<Accordion iconOpen={<Plus size={24} />} iconClosed={<Minus size={24} />}>\n\t...\n</Accordion>\n```\n\n----------------------------------------\n\nTITLE: Implementing Text Size Classes in HTML\nDESCRIPTION: This HTML snippet shows how to use Skeleton's text size utility classes, from text-xs to text-9xl. These classes are affected by the typographic scale setting.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/design/typography.mdx#2025-04-07_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<h1 class=\"text-xs\">text-xs</h1>\n<h2 class=\"text-sm\">text-sm</h2>\n<h3 class=\"textba-base\">text-base</h3>\n<h4 class=\"text-lg\">text-lg</h4>\n<h5 class=\"text-xl\">text-xl</h5>\n<h6 class=\"text2-2xl\">text-2xl</h6>\n<h6 class=\"text3-3xl\">text-3xl</h6>\n<h6 class=\"text4-4xl\">text-4xl</h6>\n<h6 class=\"text5-5xl\">text-5xl</h6>\n<h6 class=\"text6-6xl\">text-6xl</h6>\n<h6 class=\"text7-7xl\">text-7xl</h6>\n<h6 class=\"text8-8xl\">text-8xl</h6>\n<h6 class=\"text9-9xl\">text-9xl</h6>\n```\n\n----------------------------------------\n\nTITLE: Svelte Context API Implementation\nDESCRIPTION: Example of implementing context API in Svelte using createContext utility for type safety\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/resources/contribute/components.mdx#2025-04-07_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createContext } from '$lib/internal/create-context.js';\n\ninterface Session {\n\tuser: 'foo' | 'bar';\n}\n\nexport const [setSession, getSession] = createContext<Session>({ user: 'foo' });\n```\n\n----------------------------------------\n\nTITLE: Basic Badge Implementation in Astro\nDESCRIPTION: Demonstrates basic badge implementation in the Skeleton library. The example shows different ways to use badges with various styles and content types.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/tailwind/badges.mdx#2025-04-07_snippet_0\n\nLANGUAGE: astro\nCODE:\n```\nimport Example from '@examples/tailwind/badges/Example.astro';\nimport ExampleRaw from '@examples/tailwind/badges/Example.astro?raw';\nimport ExamplePresets from '@examples/tailwind/badges/ExamplePresets.astro';\nimport ExamplePresetsRaw from '@examples/tailwind/badges/ExamplePresets.astro?raw';\nimport ExampleOverlap from '@examples/tailwind/badges/ExampleOverlap.astro';\nimport ExampleOverlapRaw from '@examples/tailwind/badges/ExampleOverlap.astro?raw';\n```\n\n----------------------------------------\n\nTITLE: Avatar Fallback Examples in Svelte\nDESCRIPTION: Shows different fallback options for the Avatar component when the image fails to load, including initials and custom content.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/components/avatar/svelte.mdx#2025-04-07_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<Avatar initials=\"JD\" />\\n<Avatar initials=\"AB\" background=\"bg-primary-500\" />\\n<Avatar><Icon icon={mdiAccount} class=\"text-surface-600-300-token\" /></Avatar>\n```\n\n----------------------------------------\n\nTITLE: Installing Tailwind Forms Plugin\nDESCRIPTION: Command to install the required @tailwindcss/forms plugin via npm\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/tailwind/forms.mdx#2025-04-07_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install -D @tailwindcss/forms\n```\n\n----------------------------------------\n\nTITLE: Comparing RangeSlider Implementation Between Skeleton v2 and v3\nDESCRIPTION: This example demonstrates the differences between implementing a slider component in Skeleton v2 versus v3. The v3 implementation uses the new Svelte 5 runes API with $state, renamed the component from RangeSlider to Slider, and changed the event handling approach.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/get-started/migrate-from-v2.mdx#2025-04-07_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<!-- Skeleton v2 -->\n\n<script lang=\"ts\">\n\timport { RangeSlider } from '@skeletonlabs/skeleton';\n\tlet value = 15;\n</script>\n\n<RangeSlider name=\"amount\" bind:value ticked />\n```\n\nLANGUAGE: svelte\nCODE:\n```\n<!-- Skeleton v3 -->\n\n<script lang=\"ts\">\n\timport { Slider } from '@skeletonlabs/skeleton-svelte';\n\tlet value = $state([15]);\n</script>\n\n<Slider name=\"amount\" {value} onValueChange={(e) => (value = e.value)} markers={[25, 50, 75]} />\n```\n\n----------------------------------------\n\nTITLE: Creating a React Wrapper Component for Skeleton\nDESCRIPTION: TypeScript React component that serves as a wrapper for Skeleton Avatar component, making it usable within Astro files.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/get-started/installation/astro.mdx#2025-04-07_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { Avatar } from '@skeletonlabs/skeleton-react';\n\nexport const ReactAvatarWrapper: React.FC = () => {\n\tconst imgSrc = '...';\n\treturn <Avatar src={imgSrc} name=\"skeleton\" />;\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Font Properties\nDESCRIPTION: Example of configuring custom fonts for different text elements in a theme.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/design/themes.mdx#2025-04-07_snippet_9\n\nLANGUAGE: css\nCODE:\n```\n[data-theme='cerberus'] {\n\t--heading-font-family: 'Open Sans', sans-serif;\n\t--base-font-family: 'Open Sans', sans-serif;\n\t--anchor-font-family: 'inherit';\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Anchor Tile Selection in Svelte\nDESCRIPTION: This snippet demonstrates how to implement anchor tile selection in SvelteKit using the page state to compare the page pathname and tile URLs.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/components/navigation/svelte.mdx#2025-04-07_snippet_6\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { page } from '$app/stores';\n\timport { Tile, type RailNavigation } from '@skeletonlabs/skeleton';\n\n\tconst navItems: RailNavigation[] = [\n\t\t{ icon: 'home', href: '/', label: 'Home' },\n\t\t{ icon: 'emoticon', href: '/emoticon', label: 'Emoticon' },\n\t\t{ icon: 'cog', href: '/settings', label: 'Settings' }\n\t];\n</script>\n\n{#each navItems as n}\n\t<Tile {...n} selected={$page.url.pathname === n.href} />\n{/each}\n```\n\n----------------------------------------\n\nTITLE: Implementing State Management in Svelte Accordion\nDESCRIPTION: Shows how to manage accordion open state using Svelte's state management. Uses the $state rune to track which accordion items are open.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/components/accordion/svelte.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = $state(['club']);\n```\n\n----------------------------------------\n\nTITLE: Using Light Switch Component in Svelte\nDESCRIPTION: Demonstrates how to use the imported Light Switch component in a Svelte application.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/guides/cookbook/light-switch.mdx#2025-04-07_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<Lightswitch />\n```\n\n----------------------------------------\n\nTITLE: Calculating Typography Scale in Skeleton\nDESCRIPTION: Demonstrates the formula used to create a typographic scale for all Tailwind font sizes in Skeleton. This scale is applied using CSS custom properties.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/get-started/core-api.mdx#2025-04-07_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n--text-{size}: calc({remSize} * var(--text-scaling));\n--text-{size}--line-height: calc(calc(1 / {remSize}) * var(--text-scaling));\n```\n\n----------------------------------------\n\nTITLE: Applying SVG Filters to Elements in Astro\nDESCRIPTION: Demonstrates different methods for applying SVG filters to elements. Shows how to reference a filter using the CSS filter property with url() syntax, including direct styling, Tailwind arbitrary value syntax, and the requirement for matching filter IDs.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/guides/cookbook/svg-filters.mdx#2025-04-07_snippet_0\n\nLANGUAGE: astro\nCODE:\n```\n<!-- The Target Element -->\n<img ... style=\"filter: url(#Apollo)\" />\n\n<!-- Via aribtrary Tailwind syntax -->\n<Avatar classes=\"[filter:url(#Apollo)]\" />\n\n<!-- The SVG Filter with a matching unique ID -->\n<svg><filter id=\"Apollo\">...</filter></svg>\n```\n\n----------------------------------------\n\nTITLE: Creating Preview Component with Framework-Specific Code in Astro\nDESCRIPTION: Shows how to create a Preview component that can toggle between an example component and its source code, with support for framework-specific code.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/resources/contribute/documentation.mdx#2025-04-07_snippet_2\n\nLANGUAGE: astro\nCODE:\n```\n<Preview client:load>\n\t<Fragment slot=\"preview\"><Example /></Fragment>\n\t<Preview>\n\t\t<Fragment slot=\"preview\">\n\t\t\t<Example />\n\t\t</Fragment>\n\t\t<Fragment slot=\"code\">\n\t\t\t<Code code={ExampleGenericRaw} lang=\"astro\" />\n\t\t</Fragment>\n\t\t<Fragment slot=\"codeReact\">\n\t\t\t<Code code={ExampleSvelteRaw} lang=\"tsx\" />\n\t\t</Fragment>\n\t\t<Fragment slot=\"codeSvelte\">\n\t\t\t<Code code={ExampleReactRaw} lang=\"svelte\" />\n\t\t</Fragment>\n\t</Preview>\n</Preview>\n```\n\n----------------------------------------\n\nTITLE: Indeterminate Progress Ring in Svelte\nDESCRIPTION: Demonstrates how to create an indeterminate state for the Progress Ring by explicitly setting the 'value' prop to null. The implementation details are not visible, but it shows the usage in a Svelte context.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/components/progress-ring/svelte.mdx#2025-04-07_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<ExampleIndeterminate client:visible />\n```\n\n----------------------------------------\n\nTITLE: Managing Slider State in React TSX\nDESCRIPTION: Shows how to manage the state of a Slider component. The implementation is imported from an external file and displayed using a Preview component.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/components/slider/react.mdx#2025-04-07_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<Preview client:load>\n\t<Fragment slot=\"preview\">\n\t\t<ExampleState client:visible />\n\t</Fragment>\n\t<Fragment slot=\"code\">\n\t\t<Code code={ExampleStateRaw} lang=\"tsx\" />\n\t</Fragment>\n</Preview>\n```\n\n----------------------------------------\n\nTITLE: YouTube Embed in HTML with Tailwind Classes\nDESCRIPTION: A responsive embedded YouTube video that maintains an aspect ratio using Tailwind CSS classes. This code demonstrates how Skeleton integrates with standard HTML elements to provide enhanced styling capabilities.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/get-started/introduction.mdx#2025-04-07_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<iframe\n\tclass=\"rounded-container aspect-video w-full overflow-hidden\"\n\tsrc=\"https://www.youtube.com/embed/tHzVyChDuyo\"\n\ttitle=\"YouTube video player\"\n\tframeborder=\"0\"\n\tallow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n\tallowfullscreen\n/>\n```\n\n----------------------------------------\n\nTITLE: Outlined Preset Syntax Pattern\nDESCRIPTION: Shows the naming convention for outlined presets in Skeleton UI. The pattern includes color name and two shade values.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/design/presets.mdx#2025-04-07_snippet_3\n\nLANGUAGE: text\nCODE:\n```\npreset-outlined-{color}-{shade}-{shade}\n```\n\n----------------------------------------\n\nTITLE: Customizing Background Colors\nDESCRIPTION: Example of setting custom background colors for light and dark modes.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/design/themes.mdx#2025-04-07_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n[data-theme='cerberus'] body {\n\t--body-background-color: pink;\n\t--body-background-color-dark: green;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Hardcoded Open State for Accordion in React TSX\nDESCRIPTION: Demonstrates how to set a hardcoded open state for an Accordion component, where the 'club' item is open by default.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/components/accordion/react.mdx#2025-04-07_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Accordion value={['club']}>...</Accordion>\n```\n\n----------------------------------------\n\nTITLE: Implementing Bar Navigation with Selection in Svelte\nDESCRIPTION: This example shows how to create a Bar navigation component with selection functionality. It defines a value state that updates when a tile is pressed.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/components/navigation/svelte.mdx#2025-04-07_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Bar, type RailNavigation } from '@skeletonlabs/skeleton';\n\n\tlet value = 'home';\n\tconst navItems: RailNavigation[] = [\n\t\t{ icon: 'home', id: 'home', label: 'Home' },\n\t\t{ icon: 'emoticon', id: 'emoticon', label: 'Emoticon' },\n\t\t{ icon: 'cog', id: 'cog', label: 'Settings' }\n\t];\n</script>\n\n<Bar {value} {navItems} />\n```\n\n----------------------------------------\n\nTITLE: Tonal Preset Syntax Pattern\nDESCRIPTION: Shows the naming convention for tonal presets in Skeleton UI. The pattern requires only the color name.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/design/presets.mdx#2025-04-07_snippet_2\n\nLANGUAGE: text\nCODE:\n```\npreset-tonal-{color}\n```\n\n----------------------------------------\n\nTITLE: Filled Preset Syntax Pattern\nDESCRIPTION: Shows the naming convention for filled presets in Skeleton UI. The pattern includes color name and shade values for light and dark modes.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/design/presets.mdx#2025-04-07_snippet_1\n\nLANGUAGE: text\nCODE:\n```\npreset-filled-{color}-{lightModeShade}-{darkModeShade}\n```\n\n----------------------------------------\n\nTITLE: Basic Breadcrumbs Component Structure in Astro\nDESCRIPTION: Demonstrates the core structure of a breadcrumbs navigation component in Astro, including layout settings and component imports.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/guides/cookbook/breadcrumbs.mdx#2025-04-07_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nlayout: '@layouts/LayoutDoc.astro'\ntitle: Breadcrumbs\ndescription: Displays the current navigation hierarchy.\nshowDocsUrl: true\npubDate: 2024-11-18\ntags: ['blocks', 'navigation']\n---\n```\n\n----------------------------------------\n\nTITLE: Implementing Rail Navigation Component with Selection\nDESCRIPTION: Example showing how to implement a Rail navigation component with selection state handling for medium to large screens. The Rail is fixed to viewport sides and supports 3-7 tiles.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/components/navigation/react.mdx#2025-04-07_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Rail, Tile } from '@skeletonlabs/skeleton';\n\nfunction RailNavigation() {\n  return (\n    <Rail value=\"value\" onValueChange={(value) => console.log(value)}>\n      <Tile icon=\"settings\" value=\"settings\" />\n      <Tile icon=\"person\" value=\"account\" />\n      <Tile icon=\"help\" value=\"help\" />\n    </Rail>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Skeleton Core Package\nDESCRIPTION: Console command to install the Skeleton core package as a development dependency.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/get-started/installation/astro.mdx#2025-04-07_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nnpm i -D @skeletonlabs/skeleton\n```\n\n----------------------------------------\n\nTITLE: Basic Avatar Implementation in TSX\nDESCRIPTION: Demonstrates the basic usage of the Avatar component. The code is imported from an external file and rendered in a Preview component.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/components/avatar/react.mdx#2025-04-07_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Page as Example } from '@examples/components/avatars/Example.tsx';\nimport ExampleRaw from '@examples/components/avatars/Example.tsx?raw';\n\n<Preview client:load>\n\t<Fragment slot=\"preview\">\n\t\t<Example client:visible />\n\t</Fragment>\n\t<Fragment slot=\"code\">\n\t\t<Code code={ExampleRaw} lang=\"tsx\" />\n\t</Fragment>\n</Preview>\n```\n\n----------------------------------------\n\nTITLE: Custom Styling Avatar with Style Attribute in Svelte\nDESCRIPTION: Shows how to apply custom styles to the Avatar component using the style attribute.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/components/avatar/svelte.mdx#2025-04-07_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<Avatar\\n\\tsrc=\"/images/user.png\"\\n\\twidth=\"w-20\"\\n\\trounded=\"rounded-full\"\\n\\tstyle=\"box-shadow: 0 0 0 4px rgb(var(--color-surface-500))\"\\n/>\n```\n\n----------------------------------------\n\nTITLE: Custom Background Styling\nDESCRIPTION: Example of customizing component background color using style props.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/get-started/fundamentals.mdx#2025-04-07_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<Avatar background=\"bg-blue-500\">Sk</Avatar>\n```\n\n----------------------------------------\n\nTITLE: Event Handling in FileUpload Component\nDESCRIPTION: Examples of various event handlers available in the FileUpload component for tracking file changes, acceptances, and rejections.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/components/file-upload/svelte.mdx#2025-04-07_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<FileUpload onFileChange={console.log}> <!-- Triggers when files changed. -->\n<FileUpload onFileAccept={console.log}> <!-- Triggers when files are accepted. -->\n<FileUpload onFileReject={console.error}> <!-- Triggers when files are rejected. -->\n```\n\n----------------------------------------\n\nTITLE: Astro Project Directory Structure\nDESCRIPTION: Shows the basic folder structure of an Astro project, including the public directory for static assets, src directory containing pages, and package.json file.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/README.md#2025-04-07_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n/\n├── public/\n├── src/\n│   └── pages/\n│       └── index.astro\n└── package.json\n```\n\n----------------------------------------\n\nTITLE: Basic Avatar Usage in Svelte\nDESCRIPTION: Demonstrates the basic usage of the Avatar component with various properties like src, srcset, width, rounded, and border.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/components/avatar/svelte.mdx#2025-04-07_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<Avatar src=\"/images/user.png\" srcset=\"/images/user.png 1x, /images/user@2x.png 2x\" width=\"w-32\" rounded=\"rounded-full\" border=\"border-4 border-surface-300-600-token\" />\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Images in Astro\nDESCRIPTION: This snippet demonstrates how to import various components, images, and icons for use in an Astro-based documentation page. It includes imports from local components, astro:assets, and lucide-react for icons.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/guides/figma.mdx#2025-04-07_snippet_0\n\nLANGUAGE: astro\nCODE:\n```\nexport const components = componentSet;\n\nimport FigmaBuyNow from '@components/docs/FigmaBuyNow.astro';\nimport NavGrid from '@components/docs/NavGrid.astro';\n\nimport { Image } from 'astro:assets';\nimport ImgHero from '@images/get-started/figma/hero.webp';\nimport ImgComponents from '@images/get-started/figma/components.webp';\nimport ImgPlugin from '@images/get-started/figma/plugin.webp';\nimport ImgTutorial from '@images/get-started/figma/tutorials.webp';\nimport ImgKit from '@images/get-started/figma/ui-kit.webp';\nimport { Clock3 } from 'lucide-react';\nimport { Shapes } from 'lucide-react';\nimport { SwatchBook } from 'lucide-react';\n```\n\n----------------------------------------\n\nTITLE: Implementing File Validation Constraints\nDESCRIPTION: Setting up file validation constraints for maximum number of files and file size limits\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/components/file-upload/react.mdx#2025-04-07_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<FileUpload maxFiles={5}>\n<FileUpload minFileSize={1024 * 1024 * 5}> {/* 5 mb */}\n<FileUpload maxFileSize={1024 * 1024 * 10}> {/* 10 mb */}\n```\n\n----------------------------------------\n\nTITLE: Creating a CodeBlock Component in Svelte\nDESCRIPTION: Implementation of a reusable CodeBlock component in Svelte that uses Shiki for syntax highlighting. The component accepts code, language, and theme properties among others for customization.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/integrations/code-block/svelte.mdx#2025-04-07_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\t// Import types\n\timport type { CodeBlockProps } from './types';\n\n\t// Import highlight JS\n\timport { getHighlighter } from 'shiki';\n\timport { onMount } from 'svelte';\n\n\t// Import Shiki themes\n\timport githubDark from 'shiki/themes/github-dark.mjs';\n\timport githubLight from 'shiki/themes/github-light.mjs';\n\n\t// Import Shiki languages\n\timport { getWasm } from 'shiki/wasm';\n\n\t// Props\n\texport let code = '';\n\texport let lang = 'ts';\n\texport let theme: 'dark' | 'light' = 'dark';\n\t// Style Props\n\texport let regionHeader = 'px-4 py-2 rounded-tl-container-token rounded-tr-container-token';\n\texport let regionBody = 'p-4 overflow-y-auto font-mono text-base rounded-bl-container-token rounded-br-container-token';\n\texport let regionHeaderDark = 'bg-primary-900/75';\n\texport let regionBodyDark = 'bg-primary-900/60';\n\texport let regionHeaderLight = 'bg-surface-200';\n\texport let regionBodyLight = 'bg-surface-100';\n\t// Optional\n\texport let title = '';\n\texport let classes = '';\n\texport let background = true;\n\n\t// Local\n\tlet codeBlock: HTMLDivElement;\n\tlet codeHtml = '';\n\n\t// Reactive\n\t$: classesRegionHeader = background ? `${regionHeader} ${theme === 'dark' ? regionHeaderDark : regionHeaderLight}` : regionHeader;\n\t$: classesRegionBody = background ? `${regionBody} ${theme === 'dark' ? regionBodyDark : regionBodyLight}` : regionBody;\n\n\t// Set the current Shiki theme based on light/dark\n\tfunction setShikiTheme(): any {\n\t\treturn theme === 'dark' ? githubDark : githubLight;\n\t}\n\n\t// Lifecycle\n\tonMount(async () => {\n\t\tif (!code) return;\n\t\ttry {\n\t\t\tconst highlighter = await getHighlighter({\n\t\t\t\tlang,\n\t\t\t\tthemes: [setShikiTheme()],\n\t\t\t\tgetWasm\n\t\t\t});\n\t\t\tcodeHtml = highlighter.codeToHtml(code, { lang, theme: setShikiTheme().name });\n\t\t} catch (error) {\n\t\t\tconsole.error(error);\n\t\t\tcodeHtml = `<pre class=\"whitespace-pre-wrap\">${code}</pre>`;\n\t\t}\n\t});\n</script>\n\n<!-- prettier-ignore -->\n<div class=\"code-block {classes}\" bind:this={codeBlock}>\n\t{#if title}\n\t\t<header class=\"{classesRegionHeader}\">{title}</header>\n\t{/if}\n\t<div class=\"{classesRegionBody} [&>pre]:!m-0 [&>pre]:!bg-transparent\" class:rounded-t-container-token={!title}>\n\t\t{@html codeHtml}\n\t</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Displaying Detailed Card Preview in Astro\nDESCRIPTION: Code that creates a preview component to display a detailed card example with more complex elements. It includes both the visual preview and the corresponding code snippet.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/tailwind/cards.mdx#2025-04-07_snippet_2\n\nLANGUAGE: astro\nCODE:\n```\n<Preview client:load>\n\t<Fragment slot=\"preview\">\n\t\t<ExampleDetailed />\n\t</Fragment>\n\t<Fragment slot=\"code\">\n\t\t<Code code={ExampleDetailedRaw} lang=\"astro\" />\n\t</Fragment>\n</Preview>\n```\n\n----------------------------------------\n\nTITLE: Defining PositioningOptions Type for Floating UI in Skeleton\nDESCRIPTION: Defines a TypeScript interface for positioning options used with the floating-ui library. This type specifies various configuration parameters that control how popover elements are positioned, including placement, offset, overflow behavior, and various callbacks.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/examples/components/popover/PostioningOptions.txt#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type PositioningOptions = {\n\t/** Whether the popover should be hidden when the reference element is detached */\n    hideWhenDetached?: boolean;\n    /** The strategy to use for positioning */\n    strategy?: \"absolute\" | \"fixed\";\n    /** The initial placement of the floating element */\n    placement?: \"top\" | \"right\" | \"bottom\" | \"left\" | \"top-start\" | \"top-end\" | \"right-start\" | \"right-end\" | \"bottom-start\" | \"bottom-end\" | \"left-start\" | \"left-end\";\n    /** The offset of the floating element */\n    offset?: {  mainAxis?: number; crossAxis?: number; };\n    /** The main axis offset or gap between the reference and floating elements */\n    gutter?: number;\n    /** The secondary axis offset or gap between the reference and floating elements */\n    shift?: number;\n    /** The virtual padding around the viewport edges to check for overflow */\n    overflowPadding?: number;\n    /** The minimum padding between the arrow and the floating element's corner. */\n    arrowPadding?: number;\n    /** Whether to flip the placement */\n    flip?: boolean | Placement[];\n    /** Whether the popover should slide when it overflows. */\n    slide?: boolean;\n    /** Whether the floating element can overlap the reference element */\n    overlap?: boolean;\n    /** Whether to make the floating element same width as the reference element */\n    sameWidth?: boolean;\n    /** Whether the popover should fit the viewport. */\n    fitViewport?: boolean;\n    /** The overflow boundary of the reference element */\n    boundary?: () => Boundary;\n    /** Options to activate auto-update listeners */\n    listeners?: boolean | AutoUpdateOptions;\n    /** Function called when the placement is computed */\n    onComplete?(data: ComputePositionReturn): void;\n    /** Function called when the floating element is positioned or not */\n    onPositioned?(data: {  placed: boolean; }): void;\n    /** Function that returns the anchor rect */\n    getAnchorRect?: (element: HTMLElement | VirtualElement | null) => AnchorRect | null;\n    /** A callback that will be called when the popover needs to calculate its position. */\n    updatePosition?: (data: { updatePosition: () => Promise<void>; }) => void | Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering JSX Content in Astro\nDESCRIPTION: This snippet shows how to render JSX content within an Astro file. It includes a paragraph with styling classes, demonstrating the integration of JSX syntax in Astro templates.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/guides/figma.mdx#2025-04-07_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n{\n\n<p class=\"text-2xl\">\n\tExplore step-by-step guides to unlock the full potential of Skeleton in your design workflow. Whether you're setting up for the first time\n\tor mastering advanced features, these tutorials will guide you every step of the way.\n</p>\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring File Format Acceptance in FileUpload Component\nDESCRIPTION: Examples showing how to specify accepted file formats using the FileUpload component\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/components/file-upload/react.mdx#2025-04-07_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<FileUpload accept=\"image/*\">\n<FileUpload accept={\"text/html\": [\".html\", \".htm\"]}>\n```\n\n----------------------------------------\n\nTITLE: Displaying Card Presets Preview in Astro\nDESCRIPTION: Code that creates a preview component to display card examples using various preset styles. It includes both the visual preview and the corresponding code snippet, demonstrating how presets can be applied to cards.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/tailwind/cards.mdx#2025-04-07_snippet_3\n\nLANGUAGE: astro\nCODE:\n```\n<Preview client:load>\n\t<Fragment slot=\"preview\">\n\t\t<ExamplePresets />\n\t</Fragment>\n\t<Fragment slot=\"code\">\n\t\t<Code code={ExamplePresetsRaw} lang=\"astro\" />\n\t</Fragment>\n</Preview>\n```\n\n----------------------------------------\n\nTITLE: Basic Chip Implementation in Astro\nDESCRIPTION: Demonstrates the basic implementation of chips in Astro using the Skeleton UI library. This shows the foundational usage pattern for chips.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/tailwind/chips.mdx#2025-04-07_snippet_0\n\nLANGUAGE: astro\nCODE:\n```\nexport const components = componentSet;\n\nimport Example from '@examples/tailwind/chips/Example.astro';\nimport ExampleRaw from '@examples/tailwind/chips/Example.astro?raw';\nimport ExamplePresets from '@examples/tailwind/chips/ExamplePresets.astro';\nimport ExamplePresetsRaw from '@examples/tailwind/chips/ExamplePresets.astro?raw';\nimport ExampleDisabled from '@examples/tailwind/chips/ExampleDisabled.astro';\nimport ExampleDisabledRaw from '@examples/tailwind/chips/ExampleDisabled.astro?raw';\nimport { Page as ExampleSelectReact } from '@examples/tailwind/chips/ExampleSelect.tsx';\nimport ExampleSelectReactRaw from '@examples/tailwind/chips/ExampleSelect.tsx?raw';\nimport ExampleSelectSvelteRaw from '@examples/tailwind/chips/ExampleSelect.svelte?raw';\n```\n\n----------------------------------------\n\nTITLE: Implementing Dot Notation for Accordion Component in React\nDESCRIPTION: Specific implementation of dot notation syntax for the Accordion component in React. Shows how to export the component with its child components using Object.assign.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/resources/contribute/components.mdx#2025-04-07_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\nexport const Accordion = Object.assign(\n\tAccordionRoot, // -> <Accordion>\n\t{\n\t\tItem: AccordionItem, // -> <Accordion.Item>\n\t\tControl: AccordionControl, // -> <Accordion.Control>\n\t\tPanel: AccordionPanel // -> <Accordion.Panel>\n\t}\n);\n```\n\n----------------------------------------\n\nTITLE: Calculating Element Height with CSS calc() Function\nDESCRIPTION: Example of using the calc() function to dynamically calculate the height of a sticky sidebar by subtracting the header height from the viewport height.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/guides/layouts.mdx#2025-04-07_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<aside class=\"... sticky top-0 h-[calc(100vh-100px)]\">(sidebar)</aside>\n```\n\n----------------------------------------\n\nTITLE: Handling Server-Side Pagination Response in JSON\nDESCRIPTION: Example of a mock server response structure for pagination, showing the pagination metadata format including page number, limit, total pages, total count, and next/previous page links.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/components/pagination/react.mdx#2025-04-07_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n// Mock Server Response\npagination: {\n\t\"page\": 1,\n\t\"limit\": 2,\n\t\"pages\": 1,\n\t\"total\": 1, // <----\n\t\"next\": null,\n\t\"prev\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Astro Project with Console Commands\nDESCRIPTION: Commands to initialize a new Astro project with default settings and navigate to the project directory.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/get-started/installation/astro.mdx#2025-04-07_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nnpm create astro@latest my-skeleton-app\ncd my-skeleton-app\n```\n\n----------------------------------------\n\nTITLE: Adding Hover Effect to Table Rows with Tailwind CSS\nDESCRIPTION: This snippet demonstrates how to add a visual hover effect to table rows using Tailwind CSS classes. It applies a preset tonal primary color to the row when hovered.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/tailwind/tables.mdx#2025-04-07_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<tbody class=\"[&>tr]:hover:preset-tonal-primary\">\n\t...\n</tbody>\n```\n\n----------------------------------------\n\nTITLE: Read-Only Segment Control Group in TSX\nDESCRIPTION: Illustrates the implementation of a read-only Segment Control group. The example is imported from an external file and shown in a preview component.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/components/segment/react.mdx#2025-04-07_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Page as ExampleReadOnly } from '@examples/components/segment-control/ExampleReadOnly.tsx';\n\n<Preview client:load>\n\t<Fragment slot=\"preview\">\n\t\t<ExampleReadOnly client:visible />\n\t</Fragment>\n\t<Fragment slot=\"code\">\n\t\t<Code code={ExampleReadOnlyRaw} lang=\"tsx\" />\n\t</Fragment>\n</Preview>\n```\n\n----------------------------------------\n\nTITLE: Rendering Shiki-Generated HTML in Svelte Component\nDESCRIPTION: Creates a customizable container div that renders the HTML output from Shiki's syntax highlighting, applying various style classes from the component props.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/examples/integrations/code-block/SvelteComponent.txt#2025-04-07_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"{base} {rounded} {shadow} {classes} {preBase} {prePadding} {preClasses}\">\n\t<!-- Output Shiki's Generated HTML -->\n\t{@html generatedHtml}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Server Response Pagination Structure\nDESCRIPTION: Example of a mock server response structure for pagination data, showing the expected format including page number, limit, total pages and navigation links.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/components/pagination/svelte.mdx#2025-04-07_snippet_0\n\nLANGUAGE: json\nCODE:\n```\npagination: {\n\t\"page\": 1,\n\t\"limit\": 2,\n\t\"pages\": 1,\n\t\"total\": 1,\n\t\"next\": null,\n\t\"prev\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Skeleton Framework Packages\nDESCRIPTION: Console commands to install Skeleton packages for React or Svelte integration.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/get-started/installation/astro.mdx#2025-04-07_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n@skeletonlabs/skeleton-react\n```\n\nLANGUAGE: console\nCODE:\n```\n@skeletonlabs/skeleton-svelte\n```\n\n----------------------------------------\n\nTITLE: Implementing Rail Navigation with Selection in Svelte\nDESCRIPTION: This snippet demonstrates how to create a Rail navigation component with selection functionality. It defines a value state that updates when a tile is pressed.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/components/navigation/svelte.mdx#2025-04-07_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Rail, type RailNavigation } from '@skeletonlabs/skeleton';\n\n\tlet value = 'home';\n\tconst navItems: RailNavigation[] = [\n\t\t{ icon: 'home', id: 'home', label: 'Home' },\n\t\t{ icon: 'emoticon', id: 'emoticon', label: 'Emoticon' },\n\t\t{ icon: 'cog', id: 'cog', label: 'Settings' }\n\t];\n</script>\n\n<Rail {value} {navItems} />\n```\n\n----------------------------------------\n\nTITLE: Displaying Basic Card Preview in Astro\nDESCRIPTION: Code that creates a preview component to display a basic card example. It includes both the visual preview and the corresponding code snippet using the Preview and Code components.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/tailwind/cards.mdx#2025-04-07_snippet_1\n\nLANGUAGE: astro\nCODE:\n```\n<Preview client:load>\n\t<Fragment slot=\"preview\">\n\t\t<Example />\n\t</Fragment>\n\t<Fragment slot=\"code\">\n\t\t<Code code={ExampleRaw} lang=\"astro\" />\n\t</Fragment>\n</Preview>\n```\n\n----------------------------------------\n\nTITLE: Installing Next.js Project with Skeleton\nDESCRIPTION: Command to create a new Next.js project with TypeScript and ESLint support. Note that Tailwind v4 installation should be done separately.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/get-started/installation/nextjs.mdx#2025-04-07_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nnpx create-next-app@latest my-skeleton-app --typescript --tailwind --eslint\ncd my-skeleton-app\n```\n\n----------------------------------------\n\nTITLE: Basic Slider Example in React TSX\nDESCRIPTION: Demonstrates the basic usage of the Slider component. The code is imported from an external file and rendered using a Preview component.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/components/slider/react.mdx#2025-04-07_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<Preview client:load>\n\t<Fragment slot=\"preview\">\n\t\t<Example client:visible />\n\t</Fragment>\n\t<Fragment slot=\"code\">\n\t\t<Code code={ExampleRaw} lang=\"tsx\" />\n\t</Fragment>\n</Preview>\n```\n\n----------------------------------------\n\nTITLE: Creating New SvelteKit Project\nDESCRIPTION: Commands to create a new SvelteKit project using the Svelte CLI with TypeScript support and minimal template\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/get-started/installation/sveltekit.mdx#2025-04-07_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nnpx sv create --template minimal --types ts my-skeleton-app\ncd my-skeleton-app\n```\n\n----------------------------------------\n\nTITLE: Creating Smart Grid Layouts with CSS minmax Function\nDESCRIPTION: Implementation of a three-column grid layout using Tailwind's arbitrary syntax with CSS minmax() function to create responsive columns that adhere to a maximum container width.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/guides/layouts.mdx#2025-04-07_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"container mx-auto grid grid-cols-[200px_minmax(0px,_1fr)_300px]\">\n\t<aside>(sidebar)</aside>\n\t<main>(main)</main>\n\t<aside>(sidebar)</aside>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Image Preview Generation Function\nDESCRIPTION: Function to generate image previews from uploaded files using FileReader\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/components/file-upload/react.mdx#2025-04-07_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nfunction generatePreview(event) {\n\tconst reader = new FileReader();\n\treader.onload = (event) => {\n\t\tconst image = event.target.result;\n\t\t// set the image as the src of an image element\n\t};\n\treader.readAsDataURL(event.details.acceptedFiles[0]);\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Switch Component Import Declarations\nDESCRIPTION: Import statements for various Switch component examples and their raw code versions.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/components/switch/react.mdx#2025-04-07_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Page as Example } from '@examples/components/switch/Example.tsx';\nimport ExampleRaw from '@examples/components/switch/Example.tsx?raw';\nimport { Page as ExampleList } from '@examples/components/switch/ExampleList.tsx';\nimport ExampleListRaw from '@examples/components/switch/ExampleList.tsx?raw';\nimport { Page as ExampleIcons } from '@examples/components/switch/ExampleIcons.tsx';\nimport ExampleIconsRaw from '@examples/components/switch/ExampleIcons.tsx?raw';\nimport { Page as ExampleCompact } from '@examples/components/switch/ExampleCompact.tsx';\nimport ExampleCompactRaw from '@examples/components/switch/ExampleCompact.tsx?raw';\nimport { Page as ExampleLightswitch } from '@examples/components/switch/ExampleLightswitch.tsx';\nimport ExampleLightswitchRaw from '@examples/components/switch/ExampleLightswitch.tsx?raw';\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server\nDESCRIPTION: Command to start the Next.js development server after configuration is complete.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/get-started/installation/nextjs.mdx#2025-04-07_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Implementing Navigation Bar with Dynamic Tiles in Svelte and TypeScript\nDESCRIPTION: This snippet creates a navigation bar component with dynamically generated tiles based on a predefined list of links. It uses Svelte's template syntax for iteration and conditional rendering, along with TypeScript for type definitions.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/examples/components/navigation/ExampleTilesSelectionSvelte.txt#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<script lang=\"ts\">\n\timport { page } from '$app/state';\n\n\tconst links = [\n\t\t{ label: 'Files', href: '#/files' },\n\t\t{ label: 'Images', href: '#/images' },\n\t\t{ label: 'Music', href: '#/music' },\n\t\t{ label: 'Videos', href: '#/videos' },\n\t];\n</script>\n\n<Navigation.Bar>\n\t{#each links as {label, href}}\n\t\t<Navigation.Tile\n\t\t\t{label}\n\t\t\t{href}\n\t\t\tselected={page.url.pathname  === link.href}\n\t\t>\n\t\t\t{icon}\n\t\t</Navigation.Tile>\n\t{/each}\n</Navigation.Bar>\n```\n\n----------------------------------------\n\nTITLE: Adding Framework Source Paths to CSS Config\nDESCRIPTION: CSS configuration showing how to add @source paths to node_modules for Skeleton React and Svelte packages.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/get-started/installation/astro.mdx#2025-04-07_snippet_10\n\nLANGUAGE: css\nCODE:\n```\n@source '../../node_modules/@skeletonlabs/skeleton-react/dist';\n```\n\nLANGUAGE: css\nCODE:\n```\n@source '../../node_modules/@skeletonlabs/skeleton-svelte/dist';\n```\n\n----------------------------------------\n\nTITLE: Component File Structure Convention\nDESCRIPTION: Standardized file structure for component organization including main component file, tests, and types\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/resources/contribute/components.mdx#2025-04-07_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n/components\n    /<component>\n        <component>.{svelte|tsx|...}\n        <component>.test.ts\n\t\tindex.ts\n        types.ts\n```\n\n----------------------------------------\n\nTITLE: Additional Features for Tags Input in Svelte\nDESCRIPTION: Showcases various additional features and customizations for the Tags Input component in Svelte.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/components/tags-input/react.mdx#2025-04-07_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\nimport { Page as ExampleMisc } from '@examples/components/tags-input/ExampleMisc.tsx';\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Lead Icon to Accordion Control in React TSX\nDESCRIPTION: Demonstrates how to add a custom lead icon to an Accordion.Control component using the 'lead' prop.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/components/accordion/react.mdx#2025-04-07_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<Accordion.Control lead={<Heart size={24} />}>Heart</Accordion.Control>\n```\n\n----------------------------------------\n\nTITLE: Creating a Navigation Bar with React and Skeleton UI\nDESCRIPTION: This code defines a React functional component that renders a navigation bar with clickable tiles. It uses the Navigation component from the Skeleton UI library and keeps track of the current URL to highlight the active navigation item.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/examples/components/navigation/ExampleTilesSelectionReact.txt#2025-04-07_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport React, { useEffect } from 'react';\nimport { Navigation } from '@skeletonlabs/skeleton-react';\n\nexport const Page: React.FC = () => {\n\tlet urlPathname = '';\n\n\tconst links = [\n\t\t{ label: 'Files', href: '#/files' },\n\t\t{ label: 'Images', href: '#/images' },\n\t\t{ label: 'Music', href: '#/music' },\n\t\t{ label: 'Videos', href: '#/videos' },\n\t];\n\n\tuseEffect(() => {\n\t\turlPathname = window.location.href;\n\t});\n\n\treturn (\n\t\t<Navigation.Bar>\n\t\t\t{links.map((link) => (\n\t\t\t\t<Navigation.Tile\n\t\t\t\t\tlabel={link.label}\n\t\t\t\t\thref={link.href}\n\t\t\t\t\tselected={urlPathname === link.href}\n\t\t\t\t>\n\t\t\t\t\t{link.label}\n\t\t\t\t</Navigation.Tile>\n\t\t\t))}\n\t\t</Navigation.Bar>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: App Bar Toolbar Preview Component\nDESCRIPTION: Preview component structure for toolbar example implementation.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/components/app-bar/react.mdx#2025-04-07_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Preview client:load>\n\t<Fragment slot=\"preview\">\n\t\t<ExampleToolbar />\n\t</Fragment>\n\t<Fragment slot=\"code\">\n\t\t<Code code={ExampleToolbarRaw} lang=\"tsx\" />\n\t</Fragment>\n</Preview>\n```\n\n----------------------------------------\n\nTITLE: Creating Git Migration Branch\nDESCRIPTION: Creates a new git branch for safely handling migration changes\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/get-started/migrate-from-v2.mdx#2025-04-07_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout -b migration\n```\n\n----------------------------------------\n\nTITLE: Setting Open State with useState Hook in TypeScript\nDESCRIPTION: Demonstrates how to use the useState hook to control the open state of an Accordion component. The 'value' state array determines which accordion items are open.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/components/accordion/react.mdx#2025-04-07_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nconst [value, setValue] = useState(['club']);\n```\n\n----------------------------------------\n\nTITLE: Component Props Definition\nDESCRIPTION: Example showing how component props are defined internally.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/get-started/fundamentals.mdx#2025-04-07_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{\n\tsrc = './some-placeholder.jpg',\n\talt = '',\n\t// ...\n\tbase = 'flex justify-center items-center overflow-hidden',\n\tbackground = 'bg-slate-500',\n\trounded = 'rounded-full',\n\t// ...\n\tclasses = '',\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Rail Navigation with Routing\nDESCRIPTION: Demonstrates how to implement Rail navigation with routing functionality by using href attributes instead of ids. Converts tiles to anchor links for navigation.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/components/navigation/react.mdx#2025-04-07_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Rail, Tile } from '@skeletonlabs/skeleton';\n\nfunction RoutingRail() {\n  return (\n    <Rail>\n      <Tile icon=\"settings\" href=\"/settings\" />\n      <Tile icon=\"person\" href=\"/account\" />\n      <Tile icon=\"help\" href=\"/help\" />\n    </Rail>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Image Preview Implementation\nDESCRIPTION: Implementation of image preview functionality in FileUpload component\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/components/file-upload/react.mdx#2025-04-07_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<FileUpload onFileChange={generatePreview}>\n```\n\n----------------------------------------\n\nTITLE: Hardcoded Accordion Open State\nDESCRIPTION: Shows how to directly specify which accordion items should be open by default using an array of IDs.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/components/accordion/svelte.mdx#2025-04-07_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Accordion value={['club']}>...</Accordion>\n```\n\n----------------------------------------\n\nTITLE: HTML Link Component\nDESCRIPTION: HTML figure element containing a styled link button that directs users to the LLM Standard documentation website.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/resources/llms.mdx#2025-04-07_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<figure class=\"linker bg-noise\">\n\t<a class=\"btn preset-filled\" href=\"https://llmstxt.org/\" target=\"_blank\">\n\t\tView LLM Standard &rarr;\n\t</a>\n</figure>\n```\n\n----------------------------------------\n\nTITLE: Customizing Slider Colors in React TSX\nDESCRIPTION: Demonstrates how to customize the colors of the Slider component. The code is imported from an external file and rendered using a Preview component.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/components/slider/react.mdx#2025-04-07_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<Preview client:load>\n\t<Fragment slot=\"preview\">\n\t\t<ExampleColors client:visible />\n\t</Fragment>\n\t<Fragment slot=\"code\">\n\t\t<Code code={ExampleColorsRaw} lang=\"tsx\" />\n\t</Fragment>\n</Preview>\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry Version 1.0.0\nDESCRIPTION: Major release documenting multiple new components and features including Navigation components, Toast, FileUpload, Slider, and integration with Zag.js.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/packages/skeleton-svelte/CHANGELOG.md#2025-04-07_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.0.0\n### Minor Changes\n\n- feat: Navigation - manually handle `selected` state of NavTile (#3367)\n\n- feature: Implemented the Svelte components for Popover, Tooltip, Combobox, and Modal. (#3367)\n\n- Feature: Added the Switch component. (#3367)\n\n- chore: Svelte Accordion and Nav components now use dot notation syntax (#3367)\n- Tab components overhauled to bring consistency between Svelte and React implementations\n- Tabs.Item component removed\n- Tabs.Panels (plural) component added\n\n- feature: Added the Navigation Rail, Bar, and Tile components (#3367)\n\n- feature: Added the Svelte Toast component (#3367)\n\n- chore: Migrated Nav, Segment Control, and Switch component APIs to match new conventions (#3367)\n\n- feature: Improvements to the File Upload component (#3367)\n\n- feature: Added Segment Control component (#3367)\n\n- feature: Added the ProgressRing component (#3367)\n\n- feature: Added the FileUpload component (#3367)\n\n- feature: Added Tags Input component (#3367)\n\n- feature: Added the Slider component (#3367)\n\n- chore: Updated to the latest dependencies (#3367)\n\n- feature: Added the Ratings component (#3367)\n\n- All Skeleton components have been updated to integrate Zag.js. This contains a number of breaking component API changes. Updates all documentation. And includes new CSS animations in the Tailwind plugin. (#3367)\n\n- feat: Zag 1.0 (#3367)\n\n- feature: Added the Pagination component (#3367)\n```\n\n----------------------------------------\n\nTITLE: File Validation Settings in Svelte\nDESCRIPTION: Examples of how to set file validation parameters like maximum number of files and file size constraints.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/components/file-upload/svelte.mdx#2025-04-07_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<FileUpload maxFiles={5}>\n<FileUpload minFileSize={1024 * 1024 * 5}> <!-- 5 mb -->\n<FileUpload maxFileSize={1024 * 1024 * 10}> <!-- 10 mb -->\n```\n\n----------------------------------------\n\nTITLE: Responsive App Bar Preview Component\nDESCRIPTION: Preview component structure for responsive design implementation with client-side visibility.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/components/app-bar/react.mdx#2025-04-07_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Preview client:load>\n\t<Fragment slot=\"preview\">\n\t\t<ExampleResponsive client:visible />\n\t</Fragment>\n\t<Fragment slot=\"code\">\n\t\t<Code code={ExampleResponsiveRaw} lang=\"tsx\" />\n\t</Fragment>\n</Preview>\n```\n\n----------------------------------------\n\nTITLE: Multiple Handles Slider Example in React TSX\nDESCRIPTION: Shows how to create a Slider with multiple handles. The implementation is imported from an external file and displayed using a Preview component.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/components/slider/react.mdx#2025-04-07_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Preview client:load>\n\t<Fragment slot=\"preview\">\n\t\t<ExampleMulti client:visible />\n\t</Fragment>\n\t<Fragment slot=\"code\">\n\t\t<Code code={ExampleMultiRaw} lang=\"tsx\" />\n\t</Fragment>\n</Preview>\n```\n\n----------------------------------------\n\nTITLE: Implementing Expanded Rail Navigation\nDESCRIPTION: Shows implementation of Rail navigation with expanded mode enabled, where tiles resize to show expanded labels.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/components/navigation/react.mdx#2025-04-07_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Rail, Tile } from '@skeletonlabs/skeleton';\n\nfunction ExpandedRail() {\n  return (\n    <Rail expanded>\n      <Tile icon=\"settings\" label=\"Settings\" labelExpanded=\"Settings\" />\n      <Tile icon=\"person\" label=\"Account\" labelExpanded=\"Account\" />\n      <Tile icon=\"help\" label=\"Help\" labelExpanded=\"Help\" />\n    </Rail>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Dialog Example Component in Astro\nDESCRIPTION: This snippet imports the Example component and its raw code for display in the documentation. It uses Astro's import syntax to load the component and its source code.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/guides/cookbook/dialog.mdx#2025-04-07_snippet_0\n\nLANGUAGE: astro\nCODE:\n```\nimport Example from '@examples/guides/cookbook/dialog/Example.astro';\nimport ExampleRaw from '@examples/guides/cookbook/dialog/Example.astro?raw';\n```\n\n----------------------------------------\n\nTITLE: Using Custom Validation with FileUpload in Svelte\nDESCRIPTION: Example of how to use a custom validation function with the FileUpload component and handle rejection events.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/components/file-upload/svelte.mdx#2025-04-07_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<FileUpload validate={validateFileSize} onFileReject={console.error}>\n```\n\n----------------------------------------\n\nTITLE: React Component with CodeBlock Examples\nDESCRIPTION: A React component that demonstrates the usage of CodeBlock to display code examples in various languages. It imports the CodeBlock component and renders multiple instances with different code snippets and language specifications.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/examples/integrations/code-block/ReactPage.txt#2025-04-07_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { CodeBlock } from \"@/components/CodeBlock/CodeBlock\";\n\nexport default function Home() {\n  // Source Code\n  const exampleConsole = `npx sv create my-skeleton-app`;\n  const exampleHtml = `<div class=\"bg-green-500\">Hello World</div>`;\n  const exampleCss = `.foobar { background: green; }`;\n  const exampleJavascript = `const foo = 'bar'`;\n\n  return (\n    <div className=\"p-10 space-y-4\">\n      <CodeBlock code={exampleConsole} />\n      <CodeBlock code={exampleHtml} lang=\"html\" />\n      <CodeBlock code={exampleCss} lang=\"css\" />\n      <CodeBlock code={exampleJavascript} lang=\"js\" />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Slider Height and Size in React TSX\nDESCRIPTION: Shows how to adjust the height and size of the Slider component. The implementation is imported from an external file and displayed using a Preview component.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/components/slider/react.mdx#2025-04-07_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Preview client:load>\n\t<Fragment slot=\"preview\">\n\t\t<ExampleHeight client:visible />\n\t</Fragment>\n\t<Fragment slot=\"code\">\n\t\t<Code code={ExampleHeightRaw} lang=\"tsx\" />\n\t</Fragment>\n</Preview>\n```\n\n----------------------------------------\n\nTITLE: Implementing Dot Notation Syntax with Object.assign in TypeScript\nDESCRIPTION: Generic example of implementing dot notation syntax using Object.assign in TypeScript. Shows the basic pattern of assigning child components to a root component.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/resources/contribute/components.mdx#2025-04-07_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nObject.assign(Root, { Child1, Child2, Child3 });\n```\n\n----------------------------------------\n\nTITLE: Miscellaneous FileUpload Options\nDESCRIPTION: Additional configuration options for the FileUpload component including drag-and-drop, directory support, and mobile media capture.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/components/file-upload/svelte.mdx#2025-04-07_snippet_7\n\nLANGUAGE: svelte\nCODE:\n```\n<FileUpload allowDrop> <!-- Enable drag-and-drop -->\n<FileUpload directory> <!-- Enable directories -->\n<FileUpload capture> <!-- Enable media capture on mobile devices -->\n```\n\n----------------------------------------\n\nTITLE: Applying SVG Filters to Avatars in Svelte\nDESCRIPTION: Demonstrates how to apply SVG filters to Avatar components using Tailwind classes.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/components/avatar/svelte.mdx#2025-04-07_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<Avatar src=\"/images/user.png\" width=\"w-20\" rounded=\"rounded-full\" filter=\"[filter:invert(50%)]\" />\\n<Avatar src=\"/images/user.png\" width=\"w-20\" rounded=\"rounded-full\" filter=\"[filter:sepia(50%)]\" />\\n<Avatar src=\"/images/user.png\" width=\"w-20\" rounded=\"rounded-full\" filter=\"[filter:saturate(200%)]\" />\n```\n\n----------------------------------------\n\nTITLE: RTL Support for Slider in React TSX\nDESCRIPTION: Demonstrates how to implement Right-to-Left (RTL) support for the Slider component. The code is imported from an external file and rendered using a Preview component.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/components/slider/react.mdx#2025-04-07_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<Preview client:load>\n\t<Fragment slot=\"preview\">\n\t\t<ExampleRtl client:visible />\n\t</Fragment>\n\t<Fragment slot=\"code\">\n\t\t<Code code={ExampleRtlRaw} lang=\"tsx\" />\n\t</Fragment>\n</Preview>\n```\n\n----------------------------------------\n\nTITLE: Multiple Items Configuration\nDESCRIPTION: Demonstrates how to enable multiple accordion items to be open simultaneously using the multiple prop.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/components/accordion/svelte.mdx#2025-04-07_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<Accordion multiple>...</Accordion>\n```\n\n----------------------------------------\n\nTITLE: Implementing Rail Navigation with Routing in Svelte\nDESCRIPTION: This example shows how to create a Rail navigation component with routing functionality. It uses href attributes instead of id to convert tiles into anchor links.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/components/navigation/svelte.mdx#2025-04-07_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Rail, type RailNavigation } from '@skeletonlabs/skeleton';\n\n\tconst navItems: RailNavigation[] = [\n\t\t{ icon: 'home', href: '/', label: 'Home' },\n\t\t{ icon: 'emoticon', href: '/emoticon', label: 'Emoticon' },\n\t\t{ icon: 'cog', href: '/settings', label: 'Settings' }\n\t];\n</script>\n\n<Rail {navItems} />\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server\nDESCRIPTION: Command to start the Vite development server.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/get-started/installation/vite-svelte.mdx#2025-04-07_snippet_6\n\nLANGUAGE: console\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Basic Tags Input Implementation in React TSX\nDESCRIPTION: Demonstrates the basic usage of the Tags Input component in a React TypeScript environment.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/components/tags-input/react.mdx#2025-04-07_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Page as Example } from '@examples/components/tags-input/Example.tsx';\n```\n\n----------------------------------------\n\nTITLE: Importing React Wrapper in Astro Page\nDESCRIPTION: Astro code showing how to import and use a React wrapper component in an Astro file.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/get-started/installation/astro.mdx#2025-04-07_snippet_12\n\nLANGUAGE: astro\nCODE:\n```\n---\nimport { ReactAvatarWrapper } from '@components/ReactAvatarWrapper';\n---\n\n<ReactAvatarWrapper />\n```\n\n----------------------------------------\n\nTITLE: Implementing Expanded Rail Navigation in Svelte\nDESCRIPTION: This snippet demonstrates how to create an expanded Rail navigation component. It uses the expanded property to enable expanded mode, resizing tiles and using expanded labels.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/components/navigation/svelte.mdx#2025-04-07_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Rail, type RailNavigation } from '@skeletonlabs/skeleton';\n\n\tlet value = 'home';\n\tconst navItems: RailNavigation[] = [\n\t\t{ icon: 'home', id: 'home', label: 'Home', labelExpanded: 'Go Home' },\n\t\t{ icon: 'emoticon', id: 'emoticon', label: 'Emoticon', labelExpanded: 'Show Emoticons' },\n\t\t{ icon: 'cog', id: 'cog', label: 'Settings', labelExpanded: 'Open Settings' }\n\t];\n</script>\n\n<Rail {value} {navItems} expanded />\n```\n\n----------------------------------------\n\nTITLE: Setting Dark Mode Custom Variant in CSS\nDESCRIPTION: Defines a custom CSS variant for dark mode using a data attribute selector. This allows for manual control of dark mode appearance.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/guides/cookbook/light-switch.mdx#2025-04-07_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n@custom-variant dark (&:where([data-mode=\"dark\"], [data-mode=\"dark\"] *));\n```\n\n----------------------------------------\n\nTITLE: Rendering Tags Input Component Preview in Svelte\nDESCRIPTION: This code snippet demonstrates how to render a preview of the Tags Input component using the imported example. It uses the Preview component to display both the visual preview and the corresponding code.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/components/tags-input/svelte.mdx#2025-04-07_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<Preview client:load>\n\t<Fragment slot=\"preview\">\n\t\t<Example client:visible />\n\t</Fragment>\n\t<Fragment slot=\"code\">\n\t\t<Code code={ExampleRaw} lang=\"svelte\" />\n\t</Fragment>\n</Preview>\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind CSS Imports\nDESCRIPTION: CSS configuration to import Tailwind, Skeleton core, themes, and necessary component styles.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/get-started/installation/vite-svelte.mdx#2025-04-07_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n@import 'tailwindcss';\n\n@import '@skeletonlabs/skeleton';\n@import '@skeletonlabs/skeleton/optional/presets';\n@import '@skeletonlabs/skeleton/themes/cerberus';\n\n@source '../node_modules/@skeletonlabs/skeleton-svelte/dist';\n```\n\n----------------------------------------\n\nTITLE: Implementing Tiles Navigation in Svelte\nDESCRIPTION: This example shows how to create Tiles navigation components. Tiles are universal between Rails and Bars, defaulting to buttons but converting to anchors when an href is provided.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/components/navigation/svelte.mdx#2025-04-07_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Tile, type RailNavigation } from '@skeletonlabs/skeleton';\n\n\tlet value = 'home';\n\tconst navItems: RailNavigation[] = [\n\t\t{ icon: 'home', id: 'home', label: 'Home' },\n\t\t{ icon: 'emoticon', id: 'emoticon', label: 'Emoticon' },\n\t\t{ icon: 'cog', id: 'cog', label: 'Settings' }\n\t];\n</script>\n\n{#each navItems as n}\n\t<Tile bind:value {...n} />\n{/each}\n```\n\n----------------------------------------\n\nTITLE: Configuring CSS Imports for Skeleton\nDESCRIPTION: CSS import statements to add to your global stylesheet. These imports bring in the Skeleton core styles, optional presets, and the Cerberus theme.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/get-started/installation/other.mdx#2025-04-07_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@import 'tailwindcss';\n\n@import '@skeletonlabs/skeleton';\n@import '@skeletonlabs/skeleton/optional/presets';\n@import '@skeletonlabs/skeleton/themes/cerberus';\n```\n\n----------------------------------------\n\nTITLE: Disabled Tags Input Implementation in Svelte\nDESCRIPTION: Demonstrates how to implement a disabled state for the Tags Input component in Svelte.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/components/tags-input/react.mdx#2025-04-07_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\nimport { Page as ExampleDisabled } from '@examples/components/tags-input/ExampleDisabled.tsx';\n```\n\n----------------------------------------\n\nTITLE: Custom Icons Implementation in Svelte Accordion\nDESCRIPTION: Shows how to customize accordion icons using Lucide icons, including open/close indicators and item-specific icons.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/components/accordion/svelte.mdx#2025-04-07_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport Plus from '@lucide/svelte/icons/plus';\n\timport Minus from '@lucide/svelte/icons/minus';\n\timport Club from '@lucide/svelte/icons/club';\n</script>\n\n<Accordion>\n    {#snippet iconOpen()}<Plus size={16} />{/snippet}\n    {#snippet iconClosed()}<Minus size={16} />{/snippet}\n    <!-- ... -->\n\t<AccordionItem id=\"club\">\n    \t{#snippet controlLead()}<Club size={24} />{/snippet}\n    \t<!-- ... -->\n\t<AccordionItem>\n</Accordion>\n```\n\n----------------------------------------\n\nTITLE: Basic Progress Component Import Structure\nDESCRIPTION: Import statements and basic setup for the Progress component examples\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/components/progress/react.mdx#2025-04-07_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport const components = componentSet;\n\nimport { Page as Example } from '@examples/components/progress/Example.tsx';\nimport ExampleRaw from '@examples/components/progress/Example.tsx?raw';\nimport { Page as ExampleColors } from '@examples/components/progress/ExampleColors.tsx';\nimport ExampleColorsRaw from '@examples/components/progress/ExampleColors.tsx?raw';\nimport { Page as ExampleHeight } from '@examples/components/progress/ExampleHeight.tsx';\nimport ExampleHeightRaw from '@examples/components/progress/ExampleHeight.tsx?raw';\n```\n\n----------------------------------------\n\nTITLE: Implementing Dot Notation for Accordion Component in Svelte\nDESCRIPTION: Specific implementation of dot notation syntax for the Accordion component in Svelte. Shows how to create an index.ts file to export the component with its child components.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/resources/contribute/components.mdx#2025-04-07_snippet_10\n\nLANGUAGE: ts\nCODE:\n```\nimport Accordion from './Accordion.svelte';\nimport AccordionItem from './AccordionItem.svelte';\n\nexport const Accordion = Object.assign(\n\tAccordion, // -> <Accordion>\n\t{\n\t\tItem: AccordionItem // -> <Accordion.Item>\n\t}\n);\n```\n\n----------------------------------------\n\nTITLE: Basic Progress Ring Implementation in Svelte\nDESCRIPTION: Demonstrates the basic usage of the Progress Ring component. The exact implementation details are not visible in the provided content, but it shows how to include and use the component in a Svelte file.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/components/progress-ring/svelte.mdx#2025-04-07_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<Example client:visible />\n```\n\n----------------------------------------\n\nTITLE: Svelte Component Code Block Implementation\nDESCRIPTION: A Svelte component that imports and implements CodeBlock components to display various code examples with proper syntax highlighting. Uses TypeScript for the script section.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/examples/integrations/code-block/SveltePage.txt#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<script lang=\"ts\">\n\timport CodeBlock from '$lib/components/CodeBlock/CodeBlock.svelte';\n\n\t// Source Code\n\tconst exampleConsole = `npx sv create my-skeleton-app`;\n\tconst exampleHtml = `<div class=\"bg-green-500\">Hello World</div>`;\n\tconst exampleCss = `.foobar { background: green; }`;\n\tconst exampleJavascript = `const foo = 'bar';`;\n</script>\n\n<div class=\"p-10 space-y-4\">\n\t<CodeBlock code={exampleConsole} />\n\t<CodeBlock code={exampleHtml} lang=\"html\" />\n\t<CodeBlock code={exampleCss} lang=\"css\" />\n\t<CodeBlock code={exampleJavascript} lang=\"js\" />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Preview Component Layout Structure\nDESCRIPTION: Layout structure for previewing Progress component examples with code display\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/components/progress/react.mdx#2025-04-07_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Preview client:load>\n\t<Fragment slot=\"preview\">\n\t\t<div className=\"size-full\">\n\t\t\t<Example client:visible />\n\t\t</div>\n\t</Fragment>\n\t<Fragment slot=\"code\">\n\t\t<Code code={ExampleRaw} lang=\"tsx\" />\n\t</Fragment>\n</Preview>\n```\n\n----------------------------------------\n\nTITLE: Importing Button Components in Astro\nDESCRIPTION: Import statements for various button component examples and their raw code versions using Astro's import syntax. Includes examples for basic buttons, presets, sizes, disabled states, and button groups.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/tailwind/buttons.mdx#2025-04-07_snippet_0\n\nLANGUAGE: astro\nCODE:\n```\nimport Example from '@examples/tailwind/buttons/Example.astro';\nimport ExampleRaw from '@examples/tailwind/buttons/Example.astro?raw';\nimport ExamplePresets from '@examples/tailwind/buttons/ExamplePresets.astro';\nimport ExamplePresetsRaw from '@examples/tailwind/buttons/ExamplePresets.astro?raw';\nimport ExampleSizes from '@examples/tailwind/buttons/ExampleSizes.astro';\nimport ExampleSizesRaw from '@examples/tailwind/buttons/ExampleSizes.astro?raw';\nimport ExampleDisabled from '@examples/tailwind/buttons/ExampleDisabled.astro';\nimport ExampleDisabledRaw from '@examples/tailwind/buttons/ExampleDisabled.astro?raw';\nimport ExampleGroup from '@examples/tailwind/buttons/ExampleGroup.astro';\nimport ExampleGroupRaw from '@examples/tailwind/buttons/ExampleGroup.astro?raw';\n```\n\n----------------------------------------\n\nTITLE: Progress Ring with Label in Svelte\nDESCRIPTION: Shows how to display an auto-scaled percentage label in the Progress Ring component using the 'showLabel' prop. The implementation details are not visible, but it demonstrates the usage in a Svelte context.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/components/progress-ring/svelte.mdx#2025-04-07_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<ExampleLabel client:visible />\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Components in Astro\nDESCRIPTION: This snippet shows how to import custom MDX components for enabling Skeleton typography styles in page contents.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/resources/contribute/documentation.mdx#2025-04-07_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\n---\n{ /* (frontmatter) */ }\n---\n\nexport const components = componentSet {/* <-- ADD THIS! */}\n\n{/* (content) */}\n```\n\n----------------------------------------\n\nTITLE: Preview Component Implementation\nDESCRIPTION: Component structure for previewing rating examples with code snippets, using Astro's layout system.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/components/rating/react.mdx#2025-04-07_snippet_1\n\nLANGUAGE: astro\nCODE:\n```\n<Preview client:load>\n\t<Fragment slot=\"preview\">\n\t\t<Example client:only=\"react\" />\n\t</Fragment>\n\t<Fragment slot=\"code\">\n\t\t<Code code={ExampleRaw} lang=\"tsx\" />\n\t</Fragment>\n</Preview>\n```\n\n----------------------------------------\n\nTITLE: Installing Skeleton Packages\nDESCRIPTION: Command to install Skeleton core and React component packages as development dependencies.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/get-started/installation/nextjs.mdx#2025-04-07_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nnpm i -D @skeletonlabs/skeleton @skeletonlabs/skeleton-react\n```\n\n----------------------------------------\n\nTITLE: Progress Ring with Icons in Svelte\nDESCRIPTION: Illustrates how to include icons or other content in the Progress Ring using the 'children' snippet. The exact implementation is not shown, but it demonstrates the concept in a Svelte component.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/components/progress-ring/svelte.mdx#2025-04-07_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<ExampleIcons client:visible />\n```\n\n----------------------------------------\n\nTITLE: Installing Tailwind Dependencies\nDESCRIPTION: Command to install Tailwind CSS and its Vite plugin.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/get-started/installation/vite-svelte.mdx#2025-04-07_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nnpm install tailwindcss @tailwindcss/vite\n```\n\n----------------------------------------\n\nTITLE: Rating Component Import Declarations\nDESCRIPTION: Import statements for various Rating component examples and their raw code versions\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/components/rating/svelte.mdx#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const components = componentSet;\n\nimport Example from '@examples/components/rating/Example.svelte';\nimport ExampleRaw from '@examples/components/rating/Example.svelte?raw';\nimport ExampleCount from '@examples/components/rating/ExampleCount.svelte';\nimport ExampleCountRaw from '@examples/components/rating/ExampleCount.svelte?raw';\nimport ExampleCustomIcon from '@examples/components/rating/ExampleCustomIcon.svelte';\nimport ExampleCustomIconRaw from '@examples/components/rating/ExampleCustomIcon.svelte?raw';\nimport ExampleAllowHalf from '@examples/components/rating/ExampleAllowHalf.svelte';\nimport ExampleAllowHalfRaw from '@examples/components/rating/ExampleAllowHalf.svelte?raw';\nimport ExampleDisabled from '@examples/components/rating/ExampleDisabled.svelte';\nimport ExampleDisabledRaw from '@examples/components/rating/ExampleDisabled.svelte?raw';\nimport ExampleReadOnly from '@examples/components/rating/ExampleReadOnly.svelte';\nimport ExampleReadonlyRaw from '@examples/components/rating/ExampleReadOnly.svelte?raw';\nimport ExampleRTL from '@examples/components/rating/ExampleRTL.svelte';\nimport ExampleRTLRaw from '@examples/components/rating/ExampleRTL.svelte?raw';\n```\n\n----------------------------------------\n\nTITLE: Importing Custom Font\nDESCRIPTION: Shows how to import a custom font in the stylesheet.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/design/themes.mdx#2025-04-07_snippet_8\n\nLANGUAGE: css\nCODE:\n```\n@import '@fontsource/open-sans';\n```\n\n----------------------------------------\n\nTITLE: Progress Ring Component Configuration\nDESCRIPTION: YAML frontmatter configuration for the Progress Ring component documentation, including source paths and accessibility references.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/components/progress-ring/meta.mdx#2025-04-07_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Progress Ring\ndescription: A radial indicator showing progress or completion of a task.\nsrcSvelte: '/src/components/ProgressRing'\nsrcReact: '/src/components/ProgressRing'\nsrcAlly: 'https://www.w3.org/WAI/ARIA/apg/patterns/meter/'\nsrcZag: 'https://zagjs.com/components/react/circular-progress'\nshowDocsUrl: true\n---\n```\n\n----------------------------------------\n\nTITLE: Implementing Responsive Grid Layout with Tailwind CSS\nDESCRIPTION: Example of a responsive grid layout that switches from single column on small screens to multiple columns on medium screens and above. The sidebar is hidden on small screens and visible on medium screens and larger.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/guides/layouts.mdx#2025-04-07_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!-- Use a single column on small screens; show multiple columns at the medium breakpoint or wider -->\n<div class=\"grid grid-cols-1 md:grid-cols-[auto_1fr]\">\n\t<!-- Hide the sidebar on small screens; show at the medium breakpoint or wider -->\n\t<aside class=\"hidden md:block\">(sidebar)</aside>\n\t<!-- Remains visible at all breakpoints -->\n\t<main>(main)</main>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Preview Component Example\nDESCRIPTION: Basic structure of the Preview component used to display rating examples with code snippets\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/components/rating/svelte.mdx#2025-04-07_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<Preview client:load>\n\t<Fragment slot=\"preview\">\n\t\t<Example client:visible />\n\t</Fragment>\n\t<Fragment slot=\"code\">\n\t\t<Code code={ExampleRaw} lang=\"svelte\" />\n\t</Fragment>\n</Preview>\n```\n\n----------------------------------------\n\nTITLE: Element Reference Declaration\nDESCRIPTION: Framework-specific element reference declarations for the prompt textarea.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/guides/cookbook/chat.mdx#2025-04-07_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nlet elemPrompt: HTMLElement = useRef();\n```\n\nLANGUAGE: typescript\nCODE:\n```\nlet elemPrompt: HTMLElement;\n```\n\n----------------------------------------\n\nTITLE: Using Custom Validation in FileUpload\nDESCRIPTION: Applying custom validation function to FileUpload component with error handling\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/components/file-upload/react.mdx#2025-04-07_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<FileUpload validate={validateFileSize} onFileReject={console.error}>\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind CSS Imports\nDESCRIPTION: CSS configuration for importing Skeleton themes and components in the global stylesheet. Includes core Skeleton styles, optional presets, and theme imports.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/get-started/installation/nextjs.mdx#2025-04-07_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n@import 'tailwindcss';\n\n@import '@skeletonlabs/skeleton';\n@import '@skeletonlabs/skeleton/optional/presets';\n@import '@skeletonlabs/skeleton/themes/cerberus';\n\n@source '../../node_modules/@skeletonlabs/skeleton-react/dist';\n```\n\n----------------------------------------\n\nTITLE: Basic Segment Control Usage in TSX\nDESCRIPTION: Demonstrates the basic usage of the Segment Control component. The code is imported from an external file and rendered in a preview component.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/components/segment/react.mdx#2025-04-07_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Page as Example } from '@examples/components/segment-control/Example.tsx';\n\n<Preview client:load>\n\t<Fragment slot=\"preview\">\n\t\t<Example client:visible />\n\t</Fragment>\n\t<Fragment slot=\"code\">\n\t\t<Code code={ExampleRaw} lang=\"tsx\" />\n\t</Fragment>\n</Preview>\n```\n\n----------------------------------------\n\nTITLE: Installing Skeleton Package with pnpm\nDESCRIPTION: Command to install the Skeleton package using pnpm package manager.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/packages/skeleton/README.md#2025-04-07_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @skeletonlabs/skeleton\n```\n\n----------------------------------------\n\nTITLE: Custom File Size Validation Function\nDESCRIPTION: Implementation of a custom validation function to check file size limits\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/components/file-upload/react.mdx#2025-04-07_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nfunction validateFileSize(file) {\n\tif (file.size > 1024 * 1024 * 10) return ['FILE_TOO_LARGE'];\n\treturn null;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Shiki with NPM\nDESCRIPTION: Command to install Shiki syntax highlighter as a development dependency using npm.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/integrations/code-block/svelte.mdx#2025-04-07_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nnpm install -D shiki\n```\n\n----------------------------------------\n\nTITLE: Vertical Segment Control in TSX\nDESCRIPTION: Shows how to create a vertical Segment Control by setting the orientation prop to \"vertical\". The example is imported from an external file and displayed in a preview component.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/components/segment/react.mdx#2025-04-07_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Page as ExampleVertical } from '@examples/components/segment-control/ExampleVertical.tsx';\n\n<Preview client:load>\n\t<Fragment slot=\"preview\">\n\t\t<ExampleVertical client:visible />\n\t</Fragment>\n\t<Fragment slot=\"code\">\n\t\t<Code code={ExampleVerticalRaw} lang=\"tsx\" />\n\t</Fragment>\n</Preview>\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Skeleton CLI\nDESCRIPTION: Shows how to execute the Skeleton CLI tool using npx. The CLI accepts various commands and arguments for different operations.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/packages/skeleton-cli/README.md#2025-04-07_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @skeletonlabs/skeleton-cli [command] [args]\n```\n\n----------------------------------------\n\nTITLE: Custom File Validation Function in TypeScript\nDESCRIPTION: A TypeScript function that validates file size and returns error codes when validation fails.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/components/file-upload/svelte.mdx#2025-04-07_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nfunction validateFileSize(file) {\n\tif (file.size > 1024 * 1024 * 10) return ['FILE_TOO_LARGE'];\n\treturn null;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Skeleton Presets in CSS\nDESCRIPTION: This snippet shows how to enable the default set of Skeleton presets by importing them in your global stylesheet. This import provides access to filled, tonal, and outlined preset styles.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/design/presets.mdx#2025-04-07_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n@import '@skeletonlabs/skeleton/optional/presets';\n```\n\n----------------------------------------\n\nTITLE: Alternative Button Group in Astro\nDESCRIPTION: Demonstrates an alternative to Segment Control using a Skeleton Button Group for finer control over markup and styling. The example is imported from an external Astro file and rendered in a preview component.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/components/segment/react.mdx#2025-04-07_snippet_5\n\nLANGUAGE: astro\nCODE:\n```\nimport ExampleGroup from '@examples/tailwind/buttons/ExampleGroup.astro';\n\n<Preview client:load>\n\t<Fragment slot=\"preview\">\n\t\t<ExampleGroup />\n\t</Fragment>\n\t<Fragment slot=\"code\">\n\t\t<Code code={ExampleGroupRaw} lang=\"tsx\" />\n\t</Fragment>\n</Preview>\n```\n\n----------------------------------------\n\nTITLE: Implementing Bar Navigation with Routing in Svelte\nDESCRIPTION: This snippet demonstrates how to create a Bar navigation component with routing functionality. It uses href attributes instead of id to convert tiles into anchor links.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/components/navigation/svelte.mdx#2025-04-07_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Bar, type RailNavigation } from '@skeletonlabs/skeleton';\n\n\tconst navItems: RailNavigation[] = [\n\t\t{ icon: 'home', href: '/', label: 'Home' },\n\t\t{ icon: 'emoticon', href: '/emoticon', label: 'Emoticon' },\n\t\t{ icon: 'cog', href: '/settings', label: 'Settings' }\n\t];\n</script>\n\n<Bar {navItems} />\n```\n\n----------------------------------------\n\nTITLE: Native Progress Element Example\nDESCRIPTION: Example showing the native HTML progress element implementation as an alternative\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/components/progress/react.mdx#2025-04-07_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<Preview client:load>\n\t<Fragment slot=\"preview\">\n\t\t<ExampleNative />\n\t</Fragment>\n\t<Fragment slot=\"code\">\n\t\t<Code code={ExampleNativeRaw} lang=\"html\" />\n\t</Fragment>\n</Preview>\n```\n\n----------------------------------------\n\nTITLE: Implementing Accordion with Dynamic Open State in React TSX\nDESCRIPTION: Shows how to use the 'value' state and 'onValueChange' prop to dynamically control which accordion items are open.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/components/accordion/react.mdx#2025-04-07_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Accordion value={value} onValueChange={setValue}>\n\t...\n</Accordion>\n```\n\n----------------------------------------\n\nTITLE: Slider with Markers Example in React TSX\nDESCRIPTION: Demonstrates how to add markers to a Slider component. The code is imported from an external file and rendered using a Preview component.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/components/slider/react.mdx#2025-04-07_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Preview client:load>\n\t<Fragment slot=\"preview\">\n\t\t<ExampleMarkers client:visible />\n\t</Fragment>\n\t<Fragment slot=\"code\">\n\t\t<Code code={ExampleMarkersRaw} lang=\"tsx\" />\n\t</Fragment>\n</Preview>\n```\n\n----------------------------------------\n\nTITLE: Implementing Scroll to Bottom Function in TypeScript\nDESCRIPTION: Function to scroll a chat panel to the bottom with configurable scroll behavior. Uses Element.scrollTo() method with optional smooth scrolling.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/guides/cookbook/chat.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction scrollChatBottom(behavior?: 'auto' | 'instant' | 'smooth' = 'smooth') {\n\t// `elemChat` represents our scrollable panel element\n\telemChat.scrollTo({ top: elemChat.scrollHeight, behavior });\n}\n```\n\n----------------------------------------\n\nTITLE: Disabled Segment Control Group in TSX\nDESCRIPTION: Shows how to implement a disabled Segment Control group. The example is imported from an external file and displayed in a preview component.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/components/segment/react.mdx#2025-04-07_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Page as ExampleDisabled } from '@examples/components/segment-control/ExampleDisabled.tsx';\n\n<Preview client:load>\n\t<Fragment slot=\"preview\">\n\t\t<ExampleDisabled client:visible />\n\t</Fragment>\n\t<Fragment slot=\"code\">\n\t\t<Code code={ExampleDisabledRaw} lang=\"tsx\" />\n\t</Fragment>\n</Preview>\n```\n\n----------------------------------------\n\nTITLE: Rating Component Import Declarations\nDESCRIPTION: Import statements for various rating component examples and their raw code versions, using TypeScript/React components.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/components/rating/react.mdx#2025-04-07_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport const components = componentSet;\n\nimport { Page as Example } from '@examples/components/rating/Example.tsx';\nimport ExampleRaw from '@examples/components/rating/Example.tsx?raw';\nimport { Page as ExampleCount } from '@examples/components/rating/ExampleCount.tsx';\nimport ExampleCountRaw from '@examples/components/rating/ExampleCount.tsx?raw';\nimport { Page as ExampleCustomIcon } from '@examples/components/rating/ExampleCustomIcon.tsx';\nimport ExampleCustomIconRaw from '@examples/components/rating/ExampleCustomIcon.tsx?raw';\nimport { Page as ExampleAllowHalf } from '@examples/components/rating/ExampleAllowHalf.tsx';\nimport ExampleAllowHalfRaw from '@examples/components/rating/ExampleAllowHalf.tsx?raw';\nimport { Page as ExampleDisabled } from '@examples/components/rating/ExampleDisabled.tsx';\nimport ExampleDisabledRaw from '@examples/components/rating/ExampleDisabled.tsx?raw';\nimport { Page as ExampleReadOnly } from '@examples/components/rating/ExampleReadOnly.tsx';\nimport ExampleReadonlyRaw from '@examples/components/rating/ExampleReadOnly.tsx?raw';\nimport { Page as ExampleRTL } from '@examples/components/rating/ExampleRTL.tsx';\nimport ExampleRTLRaw from '@examples/components/rating/ExampleRTL.tsx?raw';\n```\n\n----------------------------------------\n\nTITLE: Switch Component Preview Structure\nDESCRIPTION: Template structure for rendering Switch component previews with code examples.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/components/switch/react.mdx#2025-04-07_snippet_1\n\nLANGUAGE: astro\nCODE:\n```\n<Preview client:load>\n\t<Fragment slot=\"preview\">\n\t\t<Example client:visible />\n\t</Fragment>\n\t<Fragment slot=\"code\">\n\t\t<Code code={ExampleRaw} lang=\"tsx\" />\n\t</Fragment>\n</Preview>\n```\n\n----------------------------------------\n\nTITLE: Preview Component Implementation in Astro\nDESCRIPTION: Preview component implementation showing how to display button examples with their corresponding code snippets. Uses client-side loading and code highlighting.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/tailwind/buttons.mdx#2025-04-07_snippet_1\n\nLANGUAGE: astro\nCODE:\n```\n<Preview client:load>\n\t<Fragment slot=\"preview\">\n\t\t<Example />\n\t</Fragment>\n\t<Fragment slot=\"code\">\n\t\t<Code code={ExampleRaw} lang=\"astro\" />\n\t</Fragment>\n</Preview>\n```\n\n----------------------------------------\n\nTITLE: Segment Control with Disabled Item in TSX\nDESCRIPTION: Demonstrates how to disable a specific item within a Segment Control. The example is imported from an external file and rendered in a preview component.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/components/segment/react.mdx#2025-04-07_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Page as ExampleDisableItem } from '@examples/components/segment-control/ExampleDisableItem.tsx';\n\n<Preview client:load>\n\t<Fragment slot=\"preview\">\n\t\t<ExampleDisableItem client:visible />\n\t</Fragment>\n\t<Fragment slot=\"code\">\n\t\t<Code code={ExampleDisableItemRaw} lang=\"tsx\" />\n\t</Fragment>\n</Preview>\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Lucide Icons in Svelte Components\nDESCRIPTION: This snippet demonstrates how to import a specific icon from Lucide and use it in a Svelte component. It shows the recommended approach for optimal performance by importing icons using their full path.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/integrations/iconography/svelte.mdx#2025-04-07_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\timport IconSkull from '@lucide/svelte/icons/skull';\n</script>\n\n<IconSkull color=\"#ff3e98\" />\n```\n\n----------------------------------------\n\nTITLE: Colored Tags Input Implementation in Svelte\nDESCRIPTION: Illustrates the use of custom colors with the Tags Input component in Svelte.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/components/tags-input/react.mdx#2025-04-07_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\nimport { Page as ExampleColors } from '@examples/components/tags-input/ExampleColors.tsx';\n```\n\n----------------------------------------\n\nTITLE: Using the CodeBlock Component in a Svelte Page\nDESCRIPTION: Example implementation of the CodeBlock component in a SvelteKit page, showing how to use the component with different programming languages and customization options.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/integrations/code-block/svelte.mdx#2025-04-07_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport CodeBlock from '$lib/components/CodeBlock/CodeBlock.svelte';\n\n\tconst typscriptExample = `function greet(name: string) {\n\tconsole.log(\\`Hello, \\${name}!\\`);\n}\n\ngreet('world');`;\n\n\tconst htmlExample = `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n\t<title>Document</title>\n</head>\n<body>\n\t<h1>Hello, world!</h1>\n</body>\n</html>`;\n\n\tconst cssExample = `body {\n\tfont-family: system-ui, sans-serif;\n\tbackground-color: #f9fafb;\n\tcolor: #111827;\n\tpadding: 1rem;\n}`;\n</script>\n\n<div class=\"space-y-20\">\n\t<!-- TypeScript -->\n\t<div class=\"space-y-4 px-4 py-10 rounded-lg shadow-inner bg-slate-900/10 dark:bg-slate-900/20\">\n\t\t<h2 class=\"h2\">TypeScript</h2>\n\t\t<CodeBlock code={typscriptExample} lang=\"ts\" title=\"example.ts\" />\n\t</div>\n\n\t<!-- HTML -->\n\t<div class=\"space-y-4 px-4 py-10 rounded-lg shadow-inner bg-slate-900/10 dark:bg-slate-900/20\">\n\t\t<h2 class=\"h2\">HTML</h2>\n\t\t<CodeBlock code={htmlExample} lang=\"html\" title=\"example.html\" theme=\"light\" />\n\t</div>\n\n\t<!-- CSS -->\n\t<div class=\"space-y-4 px-4 py-10 rounded-lg shadow-inner bg-slate-900/10 dark:bg-slate-900/20\">\n\t\t<h2 class=\"h2\">CSS</h2>\n\t\t<CodeBlock\n\t\t\tcode={cssExample}\n\t\t\tlang=\"css\"\n\t\t\ttitle=\"styles.css\"\n\t\t\tregionHeaderDark=\"bg-surface-600/75\"\n\t\t\tregionBodyDark=\"bg-surface-700/50\"\n\t\t/>\n\t</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Avatar Fallback Example in TSX\nDESCRIPTION: Shows how to handle fallback behavior when the avatar image fails to load. It demonstrates using initials or custom content as fallback.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/components/avatar/react.mdx#2025-04-07_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Page as ExampleFallback } from '@examples/components/avatars/ExampleFallback.tsx';\nimport ExampleFallbackRaw from '@examples/components/avatars/ExampleFallback.tsx?raw';\n\n<Preview client:load>\n\t<Fragment slot=\"preview\">\n\t\t<ExampleFallback />\n\t</Fragment>\n\t<Fragment slot=\"code\">\n\t\t<Code code={ExampleFallbackRaw} lang=\"tsx\" />\n\t</Fragment>\n</Preview>\n```\n\n----------------------------------------\n\nTITLE: File Path Structure in Markdown\nDESCRIPTION: Markdown table showing the available LLM documentation paths and their descriptions, including the main llms.txt and framework-specific guidelines for React and Svelte.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/resources/llms.mdx#2025-04-07_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Path                                 | Description                 |\n| ------------------------------------ | --------------------------- |\n| [/llms.txt](/llms.txt)               | List of LLMs txt directory. |\n| [/llms-react.txt](/llms-react.txt)   | React guidelines.           |\n| [/llms-svelte.txt](/llms-svelte.txt) | Svelte guidelines.          |\n```\n\n----------------------------------------\n\nTITLE: Importing Tags Input Component Examples in Svelte\nDESCRIPTION: This code snippet imports various examples of the Tags Input component for demonstration purposes. It includes basic usage, icons, colors, disabled state, and miscellaneous features.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/components/tags-input/svelte.mdx#2025-04-07_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\nimport Example from '@examples/components/tags-input/Example.svelte';\nimport ExampleRaw from '@examples/components/tags-input/Example.svelte?raw';\nimport ExampleIcons from '@examples/components/tags-input/ExampleIcons.svelte';\nimport ExampleIconsRaw from '@examples/components/tags-input/ExampleIcons.svelte?raw';\nimport ExampleColors from '@examples/components/tags-input/ExampleColors.svelte';\nimport ExampleColorsRaw from '@examples/components/tags-input/ExampleColors.svelte?raw';\nimport ExampleDisabled from '@examples/components/tags-input/ExampleDisabled.svelte';\nimport ExampleDisabledRaw from '@examples/components/tags-input/ExampleDisabled.svelte?raw';\nimport ExampleMisc from '@examples/components/tags-input/ExampleMisc.svelte';\nimport ExampleMiscRaw from '@examples/components/tags-input/ExampleMisc.svelte?raw';\n```\n\n----------------------------------------\n\nTITLE: Component Import Configuration in Astro\nDESCRIPTION: Shows the import statements for breadcrumb components and their raw versions for documentation purposes.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/guides/cookbook/breadcrumbs.mdx#2025-04-07_snippet_1\n\nLANGUAGE: astro\nCODE:\n```\nexport const components = componentSet;\n\nimport Example from '@examples/guides/cookbook/breadcrumbs/Example.astro';\nimport ExampleRaw from '@examples/guides/cookbook/breadcrumbs/Example.astro?raw';\nimport ExampleIcons from '@examples/guides/cookbook/breadcrumbs/ExampleIcons.astro';\nimport ExampleIconsRaw from '@examples/guides/cookbook/breadcrumbs/ExampleIcons.astro?raw';\n```\n\n----------------------------------------\n\nTITLE: Customizing Avatar Styles in TSX\nDESCRIPTION: Demonstrates how to use the 'style' prop to apply custom styles to the Avatar component's parent figure element.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/components/avatar/react.mdx#2025-04-07_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Page as ExampleStyle } from '@examples/components/avatars/ExampleStyle.tsx';\nimport ExampleStyleRaw from '@examples/components/avatars/ExampleStyle.tsx?raw';\n\n<Preview client:load>\n\t<Fragment slot=\"preview\">\n\t\t<ExampleStyle />\n\t</Fragment>\n\t<Fragment slot=\"code\">\n\t\t<Code code={ExampleStyleRaw} lang=\"tsx\" />\n\t</Fragment>\n</Preview>\n```\n\n----------------------------------------\n\nTITLE: File Upload Component Frontmatter Configuration\nDESCRIPTION: YAML frontmatter configuration for the file upload component documentation, specifying component paths and metadata.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/components/file-upload/meta.mdx#2025-04-07_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: File Upload\ndescription: Allow upload of files with buttons or drag and drop.\nsrcSvelte: '/src/components/FileUpload'\nsrcReact: '/src/components/FileUpload'\nsrcZag: 'https://zagjs.com/components/react/file-upload'\nshowDocsUrl: true\n---\n```\n\n----------------------------------------\n\nTITLE: Creating a Svelte Wrapper Component for Skeleton\nDESCRIPTION: Svelte component that serves as a wrapper for Skeleton Avatar component, making it usable within Astro files.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/get-started/installation/astro.mdx#2025-04-07_snippet_13\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\nimport { Avatar } from '@skeletonlabs/skeleton-svelte';\nconst imgSrc = '...';\n</script>\n\n<Avatar src={imgSrc} name=\"skeleton\" />\n```\n\n----------------------------------------\n\nTITLE: React Page Implementation with Code Blocks\nDESCRIPTION: Example React page showing usage of the Code Block component with various configurations.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/integrations/code-block/react.mdx#2025-04-07_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n${ReactPageRaw}\n```\n\n----------------------------------------\n\nTITLE: Importing Custom Icons for Accordion in TypeScript\nDESCRIPTION: Demonstrates how to import custom icons from the 'lucide-react' library for use in an Accordion component.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/components/accordion/react.mdx#2025-04-07_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport { Plus, Minus, Heart } from 'lucide-react';\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite with Tailwind\nDESCRIPTION: TypeScript configuration for Vite to implement Tailwind CSS plugin. Important that Tailwind comes before Svelte in the plugins array.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/get-started/installation/vite-svelte.mdx#2025-04-07_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from \"vite\";\nimport svelte from \"@vitejs/plugin-svelte\";\nimport tailwindcss from \"@tailwindcss/vite\";\n\nexport default defineConfig({\n\tplugins: [\n\t\ttailwindcss(),\n\t\tsvelte() // <-- Must come after Tailwind\n\t],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind in Astro Config\nDESCRIPTION: TypeScript configuration for implementing the Tailwind plugin in the Astro configuration file.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/get-started/installation/astro.mdx#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// @ts-check\nimport { defineConfig } from \"astro/config\";\nimport tailwindcss from \"@tailwindcss/vite\";\n\nexport default defineConfig({\n\tvite: {\n\t\tplugins: [\n\t\t\ttailwindcss()\n\t\t],\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Setting HTML Theme Attribute\nDESCRIPTION: HTML configuration to set the active theme using the data-theme attribute.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/get-started/installation/vite-react.mdx#2025-04-07_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<html data-theme=\"cerberus\">...</html>\n```\n\n----------------------------------------\n\nTITLE: Setting Default Open State in Svelte Accordion\nDESCRIPTION: Demonstrates how to set the default open state of accordion items using the value prop.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/components/accordion/svelte.mdx#2025-04-07_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Accordion value={value}>...</Accordion>\n```\n\n----------------------------------------\n\nTITLE: Basic Component Usage\nDESCRIPTION: Shows basic component implementation in a template.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/get-started/fundamentals.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<Avatar />\n```\n\n----------------------------------------\n\nTITLE: Setting Up Global CSS with Skeleton Imports\nDESCRIPTION: CSS configuration in global.css that imports Tailwind CSS and Skeleton components, including theme presets.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/get-started/installation/astro.mdx#2025-04-07_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n@import 'tailwindcss';\n\n@import '@skeletonlabs/skeleton';\n@import '@skeletonlabs/skeleton/optional/presets';\n@import '@skeletonlabs/skeleton/themes/cerberus';\n```\n\n----------------------------------------\n\nTITLE: Basic File Upload Implementation in Svelte\nDESCRIPTION: Example showing the most basic implementation of the FileUpload component.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/components/file-upload/svelte.mdx#2025-04-07_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<FileUpload accept=\"image/*\">\n<FileUpload accept={\"text/html\": [\".html\", \".htm\"]}>\n```\n\n----------------------------------------\n\nTITLE: Markdown Component Documentation Header\nDESCRIPTION: YAML frontmatter defining the documentation structure for an accordion component, including source paths and external references.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/components/accordion/meta.mdx#2025-04-07_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Accordion\ndescription: Divide content into collapsible sections.\nsrcSvelte: '/src/components/Accordion'\nsrcReact: '/src/components/Accordion'\nsrcAlly: 'https://www.w3.org/WAI/ARIA/apg/patterns/accordion/'\nsrcZag: 'https://zagjs.com/components/react/accordion'\nshowDocsUrl: true\n---\n```\n\n----------------------------------------\n\nTITLE: Displaying Additional Benefits in JSX Grid Layout\nDESCRIPTION: A responsive grid layout that highlights additional benefits of Skeleton including functional components, open source nature, community support, frequent updates, and availability of a Figma UI Kit. Uses JSX with Tailwind CSS classes for styling.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/get-started/introduction.mdx#2025-04-07_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n\n    <div className=\"col-span-2 card preset-outlined-surface-200-800 bg-surface-50-950 p-10 space-y-4\">\n    \t<h3 className=\"h3\">Functional Components</h3>\n    \t{/* prettier-ignore */}\n    \t<p className=\"text-surface-700-300\">\n    \t\tSkeleton provides an optional suite of functional components built atop the foundation of <a href=\"https://zagjs.com/\" target=\"_blank\" class=\"anchor\">Zag.js</a>. These components automatically adapt to the Skeleton design system out of the box. We currently support React and Svelte, with plans for other frameworks in the future.\n    \t</p>\n    </div>\n    <div className=\"card preset-outlined-surface-200-800 bg-surface-50-950 p-10 space-y-4\">\n    \t<h3 className=\"h3\">Open Source</h3>\n    \t{/* prettier-ignore */}\n    \t<p className=\"text-surface-700-300\">\n    \t\tSkeleton is provided as <a href=\"https://github.com/skeletonlabs/skeleton\" target=\"_blank\" class=\"anchor\">free and open-source software (FOSS)</a> under the <a href=\"https://github.com/skeletonlabs/skeleton?tab=MIT-1-ov-file#readme\" target=\"_blank\" class=\"anchor\">MIT License</a>.\n    \t</p>\n    </div>\n    <div className=\"card preset-outlined-surface-200-800 bg-surface-50-950 p-10 space-y-4\">\n    \t<h3 className=\"h3\">The Community</h3>\n    \t{/* prettier-ignore */}\n    \t<p className=\"text-surface-700-300\">\n    \t\tA huge community of users and contributors across <a href=\"https://github.com/skeletonlabs/skeleton\" target=\"_blank\" class=\"anchor\">GitHub</a>, <a href=\"https://discord.gg/EXqV7W8MtY\" target=\"_blank\" class=\"anchor\">Discord</a>, and <a href=\"https://bsky.app/profile/skeletonlabs.bsky.social\" target=\"_blank\" class=\"anchor\">Bluesky</a>.\n    \t</p>\n    </div>\n    <div className=\"card preset-outlined-surface-200-800 bg-surface-50-950 p-10 space-y-4\">\n    \t<h3 className=\"h3\">Frequent Updates</h3>\n    \t{/* prettier-ignore */}\n    \t<p className=\"text-surface-700-300\">\n    \t\tSkeleton has maintained a frequent release cadence over for years. Just take a look at our <a href=\"https://github.com/skeletonlabs/skeleton/blob/dev/packages/skeleton/CHANGELOG.md\" target=\"_blank\" class=\"anchor\">changelog</a>.\n    \t</p>\n    </div>\n    <div className=\"card preset-outlined-surface-200-800 bg-surface-50-950 p-10 space-y-4\">\n    \t<h3 className=\"h3\">Figma UI Kit</h3>\n    \t{/* prettier-ignore */}\n    \t<p className=\"text-surface-700-300\">\n    \t\tSkeleton provides access to a fully featured <a href=\"/figma\" class=\"anchor\">Figma UI Kit</a> to assist designers in drafting a visual concept of upcoming projects.\n    \t</p>\n    </div>\n\n</div>\n```\n\n----------------------------------------\n\nTITLE: Setting the Active Theme in Astro Layout\nDESCRIPTION: HTML markup showing how to set the data-theme attribute on the HTML tag to define the active Skeleton theme.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/get-started/installation/astro.mdx#2025-04-07_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<html data-theme=\"cerberus\">...</html>\n```\n\n----------------------------------------\n\nTITLE: Carousel Implementation with Scroll Containers in Astro\nDESCRIPTION: Shows how to create a functional carousel with thumbnail selection using scroll containers and Tailwind CSS utilities.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/guides/cookbook/scroll-containers.mdx#2025-04-07_snippet_1\n\nLANGUAGE: astro\nCODE:\n```\n<Fragment slot=\"preview\">\n\t<ExampleCarousel />\n</Fragment>\n```\n\n----------------------------------------\n\nTITLE: Implementing Pagination with Total Count in React\nDESCRIPTION: Example of how to use the Pagination component with the total count property from server-side pagination data to properly display pagination controls.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/components/pagination/react.mdx#2025-04-07_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Pagination count={pagination.total} ... />\n```\n\n----------------------------------------\n\nTITLE: Multi-Column Scroll Container Implementation in Astro\nDESCRIPTION: Demonstrates how to implement scrolling for sets of items in a multi-column layout using Tailwind CSS scroll utilities.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/guides/cookbook/scroll-containers.mdx#2025-04-07_snippet_2\n\nLANGUAGE: astro\nCODE:\n```\n<Fragment slot=\"preview\">\n\t<ExampleMultiColumn />\n</Fragment>\n```\n\n----------------------------------------\n\nTITLE: Setting Active Skeleton Theme\nDESCRIPTION: HTML configuration to set the active Skeleton theme using the data-theme attribute in the root layout file.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/get-started/installation/nextjs.mdx#2025-04-07_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<html data-theme=\"cerberus\">...</html>\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind CSS Imports\nDESCRIPTION: CSS configuration for importing Tailwind, Skeleton core, optional presets, themes, and component styles\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/get-started/installation/sveltekit.mdx#2025-04-07_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n@import 'tailwindcss';\n\n@import '@skeletonlabs/skeleton';\n@import '@skeletonlabs/skeleton/optional/presets';\n@import '@skeletonlabs/skeleton/themes/cerberus';\n\n@source '../node_modules/@skeletonlabs/skeleton-svelte/dist';\n```\n\n----------------------------------------\n\nTITLE: Importing Tab Components and Examples in Astro\nDESCRIPTION: Module imports for tab component examples and their raw source code representations.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/components/tabs/svelte.mdx#2025-04-07_snippet_0\n\nLANGUAGE: astro\nCODE:\n```\nexport const components = componentSet;\n\nimport Example from '@examples/components/tabs/Example.svelte';\nimport ExampleRaw from '@examples/components/tabs/Example.svelte?raw';\nimport ExampleIcons from '@examples/components/tabs/ExampleIcons.svelte';\nimport ExampleIconsRaw from '@examples/components/tabs/ExampleIcons.svelte?raw';\nimport ExampleIconsLabel from '@examples/components/tabs/ExampleIconsLabel.svelte';\nimport ExampleIconsLabelRaw from '@examples/components/tabs/ExampleIconsLabel.svelte?raw';\nimport ExampleFluid from '@examples/components/tabs/ExampleFluid.svelte';\nimport ExampleFluidRaw from '@examples/components/tabs/ExampleFluid.svelte?raw';\nimport ExampleJustify from '@examples/components/tabs/ExampleJustify.svelte';\nimport ExampleJustifyRaw from '@examples/components/tabs/ExampleJustify.svelte?raw';\nimport ExampleRTL from '@examples/components/tabs/ExampleRTL.svelte';\nimport ExampleRTLRaw from '@examples/components/tabs/ExampleRTL.svelte?raw';\n```\n\n----------------------------------------\n\nTITLE: Stepper Step Component - Svelte\nDESCRIPTION: Individual step component implementation for the Stepper showing the structure of a single step.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/guides/cookbook/stepper.mdx#2025-04-07_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\nExampleStepOne\n```\n\n----------------------------------------\n\nTITLE: Installing Skeleton Core Package via NPM\nDESCRIPTION: Command to install the Skeleton core package which provides access to most Skeleton features except Components. This is the foundation for using Skeleton in any framework.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/get-started/installation/other.mdx#2025-04-07_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nnpm i -D @skeletonlabs/skeleton\n```\n\n----------------------------------------\n\nTITLE: Using Pagination Component with Total Count\nDESCRIPTION: Example of implementing the Pagination component in Svelte with a total count parameter derived from server response.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/components/pagination/svelte.mdx#2025-04-07_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<Pagination count={pagination.total} ... />\n```\n\n----------------------------------------\n\nTITLE: Preview Component Implementation\nDESCRIPTION: Example of how to use the Preview component to display tab examples with their corresponding code.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/components/tabs/svelte.mdx#2025-04-07_snippet_1\n\nLANGUAGE: astro\nCODE:\n```\n<Preview client:load>\n\t<Fragment slot=\"preview\">\n\t\t<Example client:visible />\n\t</Fragment>\n\t<Fragment slot=\"code\">\n\t\t<Code code={ExampleRaw} lang=\"svelte\" />\n\t</Fragment>\n</Preview>\n```\n\n----------------------------------------\n\nTITLE: Setting Z-Index for Popover Component in Svelte\nDESCRIPTION: Demonstrates how to set the z-index for a Popover component to control its stacking order relative to other elements.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/integrations/popover/svelte.mdx#2025-04-07_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<Popover ... zIndex={10}>\n\t<!-- ... -->\n</Popover>\n```\n\n----------------------------------------\n\nTITLE: Setting the Active Skeleton Theme\nDESCRIPTION: HTML markup showing how to set the active theme by adding the data-theme attribute to the HTML tag. This example applies the Cerberus theme to the entire document.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/get-started/installation/other.mdx#2025-04-07_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<html data-theme=\"cerberus\">\n    ...\n</html>\n```\n\n----------------------------------------\n\nTITLE: Badge Overlap Feature in Astro\nDESCRIPTION: Demonstrates how to create overlapping numeric or icon badges using the 'badge-icon' class. This technique is useful for notification counters or indicators that need to be positioned over other elements.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/tailwind/badges.mdx#2025-04-07_snippet_2\n\nLANGUAGE: astro\nCODE:\n```\n<ExampleOverlap />\n```\n\n----------------------------------------\n\nTITLE: Basic App Bar Component Import Setup\nDESCRIPTION: Setup code showing imports and component examples for App Bar demonstration.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/components/app-bar/react.mdx#2025-04-07_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport const components = componentSet;\n\nimport { Page as Example } from '@examples/components/app-bars/Example.tsx';\nimport ExampleRaw from '@examples/components/app-bars/Example.tsx?raw';\nimport { Page as ExampleToolbar } from '@examples/components/app-bars/ExampleToolbar';\nimport ExampleToolbarRaw from '@examples/components/app-bars/ExampleToolbar.tsx?raw';\nimport { Page as ExampleResponsive } from '@examples/components/app-bars/ExampleResponsive';\nimport ExampleResponsiveRaw from '@examples/components/app-bars/ExampleResponsive.tsx?raw';\n```\n\n----------------------------------------\n\nTITLE: Badge Presets Example in HTML\nDESCRIPTION: Shows badge implementations with various preset styles. This demonstrates how the Skeleton library's preset system can be used to style badges consistently across an application.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/tailwind/badges.mdx#2025-04-07_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<ExamplePresets />\n```\n\n----------------------------------------\n\nTITLE: Installing Skeleton Packages\nDESCRIPTION: npm command to install Skeleton core and Svelte component packages as development dependencies\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/get-started/installation/sveltekit.mdx#2025-04-07_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nnpm i -D @skeletonlabs/skeleton @skeletonlabs/skeleton-svelte\n```\n\n----------------------------------------\n\nTITLE: Importing Skeleton Theme CSS\nDESCRIPTION: Shows how to import a specific theme from Skeleton's preset collection into your application's stylesheet.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/design/themes.mdx#2025-04-07_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* @import '@skeletonlabs/skeleton'; */\n/* @import '@skeletonlabs/skeleton/optional/presets'; */\n@import '@skeletonlabs/skeleton/themes/{theme-name}';\n```\n\n----------------------------------------\n\nTITLE: Importing Skeleton Theme CSS\nDESCRIPTION: Shows how to import a specific theme from Skeleton's preset collection into your application's stylesheet.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/design/themes.mdx#2025-04-07_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* @import '@skeletonlabs/skeleton'; */\n/* @import '@skeletonlabs/skeleton/optional/presets'; */\n@import '@skeletonlabs/skeleton/themes/{theme-name}';\n```\n\n----------------------------------------\n\nTITLE: App Bar Preview Component Structure\nDESCRIPTION: Component structure for previewing App Bar examples with code display.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/components/app-bar/react.mdx#2025-04-07_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Preview client:load>\n\t<Fragment slot=\"preview\">\n\t\t<Example />\n\t</Fragment>\n\t<Fragment slot=\"code\">\n\t\t<Code code={ExampleRaw} lang=\"tsx\" />\n\t</Fragment>\n</Preview>\n```\n\n----------------------------------------\n\nTITLE: Implementing Input-based Clipboard Operations in Astro\nDESCRIPTION: This code snippet shows how to use the clipboard API with input elements in an Astro component. It likely includes functionality for copying from or pasting to input fields.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/guides/cookbook/clipboard.mdx#2025-04-07_snippet_1\n\nLANGUAGE: astro\nCODE:\n```\n<ExampleInput />\n```\n\n----------------------------------------\n\nTITLE: Setting HTML Theme Attribute\nDESCRIPTION: HTML configuration to set the active theme using the data-theme attribute\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/get-started/installation/sveltekit.mdx#2025-04-07_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<html data-theme=\"cerberus\">...</html>\n```\n\n----------------------------------------\n\nTITLE: Importing Card Examples in Astro\nDESCRIPTION: Code that imports various card examples from the Skeleton UI framework, including basic examples, detailed cards, and preset configurations. These imports are used to display the examples in the documentation page.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/tailwind/cards.mdx#2025-04-07_snippet_0\n\nLANGUAGE: astro\nCODE:\n```\nexport const components = componentSet;\n\nimport Example from '@examples/tailwind/cards/Example.astro';\nimport ExampleRaw from '@examples/tailwind/cards/Example.astro?raw';\nimport ExampleDetailed from '@examples/tailwind/cards/ExampleDetailed.astro';\nimport ExampleDetailedRaw from '@examples/tailwind/cards/ExampleDetailed.astro?raw';\nimport ExamplePresets from '@examples/tailwind/cards/ExamplePresets.astro';\nimport ExamplePresetsRaw from '@examples/tailwind/cards/ExamplePresets.astro?raw';\n```\n\n----------------------------------------\n\nTITLE: Applying Required Toast Styles for React 18\nDESCRIPTION: CSS styles required for proper toast component animation and display in React 18. These styles handle transitions, transformations, and opacity changes for different toast states.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/components/toast/react.mdx#2025-04-07_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n[data-scope='toast'][data-part='root'] {\n\ttranslate: var(--x) var(--y);\n\tscale: var(--scale);\n\tz-index: var(--z-index);\n\theight: var(--height);\n\topacity: var(--opacity);\n\twill-change: translate, opacity, scale;\n}\n\n[data-scope='toast'][data-part='root'] {\n\ttransition:\n\t\ttranslate 400ms,\n\t\tscale 400ms,\n\t\topacity 400ms;\n\ttransition-timing-function: cubic-bezier(0.21, 1.02, 0.73, 1);\n}\n\n[data-scope='toast'][data-part='root'][data-state='closed'] {\n\ttransition:\n\t\ttranslate 400ms,\n\t\tscale 400ms,\n\t\topacity 200ms;\n\ttransition-timing-function: cubic-bezier(0.06, 0.71, 0.55, 1);\n}\n```\n\n----------------------------------------\n\nTITLE: Astro Layout Configuration for Documentation\nDESCRIPTION: Frontmatter configuration for an Astro documentation page, setting the layout, title, description and order of the installation guide.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/get-started/installation.mdx#2025-04-07_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: '@layouts/LayoutDoc.astro'\ntitle: Installation\ndescription: Learn how to install and setup Skeleton for your project.\norder: 10\n---\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server\nDESCRIPTION: Command to start the SvelteKit development server\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/get-started/installation/sveltekit.mdx#2025-04-07_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Version Updates\nDESCRIPTION: Markdown formatted changelog entries documenting version changes, feature additions, bug fixes and improvements to the Skeleton framework components.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/packages/skeleton-react/CHANGELOG.md#2025-04-07_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- chore: Remove extra height class from NavBar ([#3074](https://github.com/skeletonlabs/skeleton/pull/3074))\n\n## 1.0.0-next.12\n\n### Patch Changes\n\n- bugfix: Reinstate Pagination `count` prop. ([#3026](https://github.com/skeletonlabs/skeleton/pull/3026))\n\n- chore: Updated peer dependencies to support React 19 ([#3038](https://github.com/skeletonlabs/skeleton/pull/3038))\n\n- feature: Add option to set `aria-labelledby` for Segment component ([#3034](https://github.com/skeletonlabs/skeleton/pull/3034))\n```\n\n----------------------------------------\n\nTITLE: Basic Scroll Snap Implementation in Astro\nDESCRIPTION: Demonstrates basic scroll snap functionality using Tailwind CSS utility classes. Shows implementation of scroll snap alignment in a container.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/guides/cookbook/scroll-containers.mdx#2025-04-07_snippet_0\n\nLANGUAGE: astro\nCODE:\n```\n<Fragment slot=\"preview\">\n\t<Example />\n</Fragment>\n```\n\n----------------------------------------\n\nTITLE: Implementing Smooth Scroll Behavior\nDESCRIPTION: Shows how to implement smooth scrolling behavior using HTML and CSS.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/guides/cookbook/table-of-contents.mdx#2025-04-07_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<body class=\"smooth-scroll\"></body>\n```\n\nLANGUAGE: css\nCODE:\n```\nbody {\n\tscroll-behavior: smooth;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Vite React Project\nDESCRIPTION: Commands to create a new Vite project with React and TypeScript template, including project initialization.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/get-started/installation/vite-react.mdx#2025-04-07_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nnpm create vite@latest my-skeleton-app -- --template react-ts\ncd my-skeleton-app\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Basic Logo Cloud Implementation in Astro\nDESCRIPTION: Demonstrates the basic implementation of a logo cloud component, allowing for grid-based logo presentations.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/guides/cookbook/logo-clouds.mdx#2025-04-07_snippet_0\n\nLANGUAGE: astro\nCODE:\n```\n<Preview client:visible>\n\t<Fragment slot=\"preview\">\n\t\t<Example />\n\t</Fragment>\n\t<Fragment slot=\"code\">\n\t\t<Code code={ExampleRaw} lang=\"astro\" />\n\t</Fragment>\n</Preview>\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server\nDESCRIPTION: Command to start the Vite development server.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/get-started/installation/vite-react.mdx#2025-04-07_snippet_6\n\nLANGUAGE: console\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Row-Based Logo Cloud Layout in Astro\nDESCRIPTION: Shows how to implement a row-based layout for logo clouds, providing an alternative to the grid layout for logo presentation.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/guides/cookbook/logo-clouds.mdx#2025-04-07_snippet_1\n\nLANGUAGE: astro\nCODE:\n```\n<Preview client:visible>\n\t<Fragment slot=\"preview\">\n\t\t<ExampleRows />\n\t</Fragment>\n\t<Fragment slot=\"code\">\n\t\t<Code code={ExampleRowsRaw} lang=\"astro\" />\n\t</Fragment>\n</Preview>\n```\n\n----------------------------------------\n\nTITLE: Setting Active Theme in HTML\nDESCRIPTION: HTML configuration to set the active theme using the data-theme attribute.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/get-started/installation/vite-svelte.mdx#2025-04-07_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<html data-theme=\"cerberus\">...</html>\n```\n\n----------------------------------------\n\nTITLE: Component-Based Stepper Implementation - Svelte\nDESCRIPTION: Example showing how to use the Stepper component with component substitution and props in Svelte.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/guides/cookbook/stepper.mdx#2025-04-07_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\nExampleComponentRaw\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind Vite Plugin\nDESCRIPTION: Configuration for the Tailwind Vite plugin showing the correct plugin order with framework-specific plugins\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/get-started/migrate-from-v2.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nplugins: [\n\ttailwindcss(),\n\tsveltekit() // or svelte()\n];\n```\n\n----------------------------------------\n\nTITLE: Basic Stepper Implementation - React\nDESCRIPTION: Placeholder for upcoming React implementation of the Stepper component.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/guides/cookbook/stepper.mdx#2025-04-07_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nComing soon...\n```\n\n----------------------------------------\n\nTITLE: Running Skeleton Migration CLI\nDESCRIPTION: Command to run the automated migration script using the Skeleton CLI tool\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/get-started/migrate-from-v2.mdx#2025-04-07_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpx @skeletonlabs/skeleton-cli migrate skeleton-3\n```\n\n----------------------------------------\n\nTITLE: Generating URL-friendly Slugs with TypeScript\nDESCRIPTION: A TypeScript function that generates URL-friendly slugs from heading text, with optional prefix and suffix parameters. Handles string formatting and special character removal.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/guides/cookbook/table-of-contents.mdx#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction generateSlug(text: string, prefix?: string = '', suffix?: string = '') {\n\t// Format the slug from the text value.\n\tconst slug = text\n\t\t.toLowerCase()\n\t\t.replaceAll(/[^a-zA-Z0-9 ]/g, '')\n\t\t.replaceAll(' ', '-')\n\t\t.toLowerCase();\n\t// Note that you can optionally apply a prefix/suffix.\n\treturn `${prefix}${slug}${suffix}`;\n}\n\n// Usage\ngenerateSlug('An Example Header'); // result: an-example-header\ngenerateSlug('An Example Header', 'skeleton-'); // result: skeleton-an-example-header\ngenerateSlug('An Example Header', '', '-skeleton'); // result: an-example-header-skeleton\n```\n\n----------------------------------------\n\nTITLE: Running Local Development Server in Shell\nDESCRIPTION: This command starts the local development server to confirm that the application is functioning correctly after migration.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/get-started/migrate-from-v2.mdx#2025-04-07_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video in HTML\nDESCRIPTION: This HTML snippet embeds a YouTube video explaining animation techniques for dialog elements. It uses an iframe with specific attributes for responsive design and security.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/guides/cookbook/dialog.mdx#2025-04-07_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<iframe\n\tclass=\"w-full aspect-video\"\n\tsrc=\"https://www.youtube.com/embed/vmDEHAzj2XE?si=GTYFY9dk013lL0Y3\"\n\ttitle=\"YouTube video player\"\n\tframeborder=\"0\"\n\tallow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"\n\treferrerpolicy=\"strict-origin-when-cross-origin\"\n\tallowfullscreen\n></iframe>\n```\n\n----------------------------------------\n\nTITLE: Message Feed Data Structure Declaration\nDESCRIPTION: TypeScript declaration for the message feed array structure used to store chat messages.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/guides/cookbook/chat.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nlet messageFeed = [\n\t/* ...*/\n];\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring Astro Layout Components for Skeleton Cookbook\nDESCRIPTION: This snippet configures the Astro layout for the Skeleton cookbook documentation page. It sets up the page metadata and imports a component set and a TableCookbook component for displaying recipe examples.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/guides/cookbook.mdx#2025-04-07_snippet_0\n\nLANGUAGE: astro\nCODE:\n```\n---\nlayout: '@layouts/LayoutDoc.astro'\ntitle: Cookbook\ndescription: A collection of recipes for crafting interface features that utilize Skeleton primitives.\norder: 99999\n---\n\nexport const components = componentSet;\n\nimport TableCookbook from '@components/docs/TableCookbook.astro';\n```\n\n----------------------------------------\n\nTITLE: Adding New Message Implementation\nDESCRIPTION: Function to add a new message to the chat feed, including timestamp generation, message formatting, and auto-scrolling.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/guides/cookbook/chat.mdx#2025-04-07_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfunction addMessage(): void {\n\tconst newMessage = {\n\t\tid: messageFeed.length,\n\t\thost: true,\n\t\tavatar: 48,\n\t\tname: 'Jane',\n\t\ttimestamp: new date(),\n\t\tmessage: elemPrompt.value,\n\t\tcolor: 'preset-tonal-primary'\n\t};\n\t// Append the new message to the message feed\n\tmessageFeed = [...messageFeed, newMessage];\n\t// Clear the textarea message\n\telemPrompt.value = '';\n\t// Smoothly scroll to the bottom of the feed\n\tsetTimeout(() => {\n\t\tscrollChatBottom('smooth');\n\t}, 0);\n}\n```\n\n----------------------------------------\n\nTITLE: Next.js Dynamic Theme Loading Implementation\nDESCRIPTION: Server-side implementation for dynamically loading themes in Next.js using getServerSideProps and Head component.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/guides/cookbook/dynamic-theming.mdx#2025-04-07_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport Head from 'next/head';\nimport type { InferGetServerSidePropsType, GetServerSideProps } from 'next';\n\nconst getThemes = async () => {\n\treturn [\n\t\t{\n\t\t\tname: 'theme-1',\n\t\t\tcss: `[data-theme='theme-1'] { /* ... */ }`\n\t\t},\n\t\t{\n\t\t\tname: 'theme-2',\n\t\t\tcss: `[data-theme='theme-2'] { /* ... */ }`\n\t\t}\n\t];\n};\n\nexport const getServerSideProps = (async () => {\n\tconst themes = getThemes();\n\treturn {\n\t\tprops: {\n\t\t\tthemes: ['default', ...themes.map((t) => t.name)],\n\t\t\tcss: themes.map((theme) => theme.css).join('\\n\\n')\n\t\t}\n\t};\n}) satisfies GetServerSideProps<{ repo: Repo }>;\n\nexport default function Page({ repo }: InferGetServerSidePropsType<typeof getServerSideProps>) {\n\treturn (\n\t\t<>\n\t\t\t<Head>\n\t\t\t\t<style dangerouslySetInnerHTML={{ __html: css }} />\n\t\t\t</Head>\n\t\t\t<main>\n\t\t\t\t<p>{repo.stargazers_count}</p>\n\t\t\t</main>\n\t\t</>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Message Send Button Implementation\nDESCRIPTION: Svelte button implementation for triggering message sending.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/guides/cookbook/chat.mdx#2025-04-07_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<button ... onclick={addMessage}>Send</button>\n```\n\n----------------------------------------\n\nTITLE: Implementing Dark Mode Selector Strategy in CSS\nDESCRIPTION: Demonstrates how to implement the selector strategy for dark mode using a custom CSS variant that targets elements with the .dark class\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/guides/mode.mdx#2025-04-07_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n@custom-variant dark (&:where(.dark, .dark *));\n```\n\n----------------------------------------\n\nTITLE: Rendering Dialog Example in Astro Preview Component\nDESCRIPTION: This code renders the Example component in a Preview wrapper, which likely provides a live demo and code display functionality. It uses Astro's component syntax to structure the preview.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/guides/cookbook/dialog.mdx#2025-04-07_snippet_1\n\nLANGUAGE: astro\nCODE:\n```\n<Preview client:visible>\n\t<Fragment slot=\"preview\">\n\t\t<Example />\n\t</Fragment>\n\t<Fragment slot=\"code\">\n\t\t<Code code={ExampleRaw} lang=\"astro\" />\n\t</Fragment>\n</Preview>\n```\n\n----------------------------------------\n\nTITLE: Color Scheme Implementation Examples\nDESCRIPTION: Demonstrates different ways to implement color schemes using Tailwind CSS classes for light and dark modes\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/guides/mode.mdx#2025-04-07_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"bg-primary-50-950\">Light or Dark</div>\n\n<div class=\"scheme-light\">\n\t<div class=\"bg-primary-50-950\">Always Light Scheme</div>\n</div>\n\n<div class=\"scheme-dark\">\n\t<div class=\"bg-primary-50-950\">Always Dark Scheme</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Default Theme CSS Structure\nDESCRIPTION: Shows the basic CSS structure for defining a default theme using data-theme attribute selector.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/guides/cookbook/dynamic-theming.mdx#2025-04-07_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n[data-theme='default'] {\n\t/* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Components in Astro Document\nDESCRIPTION: This code imports necessary components and images for the Figma library documentation page in an Astro project. It includes imports for layout components, documentation components, and various images used throughout the guide.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/guides/figma/chapter-1.mdx#2025-04-07_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nexport const components = componentSet;\n\nimport Process from '@components/docs/Process.astro';\nimport ProcessStep from '@components/docs/ProcessStep.astro';\nimport NavGrid from '@components/docs/NavGrid.astro';\n\nimport { Image } from 'astro:assets';\nimport { BookOpen } from '@lucide/svelte';\nimport SvgSkeleton from '@images/tutorials/figma/skeletonFileIcon.svg';\nimport ImgCreateNewProject from '@images/tutorials/figma/chapter-1/01_createNewProject.webp';\nimport ImgImportProject from '@images/tutorials/figma/chapter-1/02_importProject.webp';\nimport ImgPublish from '@images/tutorials/figma/chapter-1/03_publish.webp';\nimport ImgCreateNewFile from '@images/tutorials/figma/chapter-1/04_createNewFile.webp';\nimport ImgSelectLibrary from '@images/tutorials/figma/chapter-1/05_selectLibrary.webp';\nimport ImgUseLibrary from '@images/tutorials/figma/chapter-1/06_useLibrary.webp';\n```\n\n----------------------------------------\n\nTITLE: SvelteKit Dynamic Theme Loading Implementation\nDESCRIPTION: Server-side implementation for dynamically loading themes in SvelteKit using load function and svelte:head component.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/guides/cookbook/dynamic-theming.mdx#2025-04-07_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport type { PageLoad } from './$types';\n\nconst getThemes = async () => {\n\treturn [\n\t\t{\n\t\t\tname: 'theme-1',\n\t\t\tcss: `[data-theme='theme-1'] { /* ... */ }`\n\t\t},\n\t\t{\n\t\t\tname: 'theme-2',\n\t\t\tcss: `[data-theme='theme-2'] { /* ... */ }`\n\t\t}\n\t];\n};\n\nexport const load: PageLoad = async (event) => {\n\tconst themes = getThemes();\n\treturn {\n\t\tthemes: ['default', ...themes.map((t) => t.name)],\n\t\tcss: themes.map((theme) => theme.css).join('\\n\\n')\n\t};\n};\n```\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n\tconst { data } = $props();\n</script>\n\n<svelte:head>\n\t{@html `<style>${data.css}</style>`}\n</svelte:head>\n```\n\n----------------------------------------\n\nTITLE: Astro Component Import Declarations\nDESCRIPTION: Import statements for various Astro components and assets used in the documentation page, including layouts, process components, navigation elements, and images.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/guides/figma/chapter-2.mdx#2025-04-07_snippet_0\n\nLANGUAGE: astro\nCODE:\n```\n---\nlayout: '@layouts/LayoutDoc.astro'\ntitle: 2 - Import Themes\ndescription: Customize Your Design with Skeleton Themes\norder: 10\n---\n\nexport const components = componentSet;\n\nimport Process from '@components/docs/Process.astro';\nimport ProcessStep from '@components/docs/ProcessStep.astro';\nimport NavGrid from '@components/docs/NavGrid.astro';\n\nimport { Image } from 'astro:assets';\nimport SvgSkeleton from '@images/tutorials/figma/skeletonFileIcon.svg';\nimport ImgOpenProject from '@images/tutorials/figma/chapter-2/01_openProject.webp';\n```\n\n----------------------------------------\n\nTITLE: Setting Light Mode Data Attribute in HTML\nDESCRIPTION: Sets the data-mode attribute on the HTML element to 'light' for light mode appearance.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/guides/cookbook/light-switch.mdx#2025-04-07_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<html data-mode=\"light\"></html>\n```\n\n----------------------------------------\n\nTITLE: Importing Astro Components and Assets\nDESCRIPTION: Front matter and import declarations for the Astro page, including layout configuration, component imports, and image assets.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/guides/figma/chapter-3.mdx#2025-04-07_snippet_0\n\nLANGUAGE: astro\nCODE:\n```\n---\nlayout: '@layouts/LayoutDoc.astro'\ntitle: 3 - Update Figma library\ndescription: Keep Your Skeleton Library Up to Date\norder: 20\n---\n\nexport const components = componentSet;\n\nimport Process from '@components/docs/Process.astro';\nimport ProcessStep from '@components/docs/ProcessStep.astro';\nimport NavGrid from '@components/docs/NavGrid.astro';\n\nimport { Image } from 'astro:assets';\nimport SvgSkeleton from '@images/tutorials/figma/skeletonFileIcon.svg';\nimport ImgImport from '@images/tutorials/figma/chapter-3/02_import.webp';\nimport ImgPublishLib from '@images/tutorials/figma/chapter-3/03_publishLibrary.webp';\nimport ImgOpenFile from '@images/tutorials/figma/chapter-3/04_openFile.webp';\nimport ImgSelectSkeleton from '@images/tutorials/figma/chapter-3/04_selectSkeleton.webp';\nimport ImgSelectNewSkeleton from '@images/tutorials/figma/chapter-3/04_selectNewSkeleton.webp';\nimport ImgRemoveOld from '@images/tutorials/figma/chapter-3/removeOld.webp';\nimport { ChevronDown, BookOpen } from '@lucide/svelte';\n```\n\n----------------------------------------\n\nTITLE: Setting Dark Mode Data Attribute in HTML\nDESCRIPTION: Sets the data-mode attribute on the HTML element to 'dark' for dark mode appearance.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/guides/cookbook/light-switch.mdx#2025-04-07_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<html data-mode=\"dark\"></html>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Definitions for Code Block\nDESCRIPTION: Type definitions for the Code Block component's props and configurations.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/integrations/code-block/react.mdx#2025-04-07_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\n${TypesRaw}\n```\n\n----------------------------------------\n\nTITLE: Importing Light Switch Component in TypeScript\nDESCRIPTION: Imports the Light Switch component into the application. The file extension should be adjusted based on whether React or Svelte is being used.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/guides/cookbook/light-switch.mdx#2025-04-07_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport Lightswitch from './path/to/Lightswitch.{tsx|svelte}';\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Types for CodeBlock Component\nDESCRIPTION: TypeScript type definitions for the CodeBlock component, defining the expected props and their types including code content, language selection, theme preference, and styling options.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/integrations/code-block/svelte.mdx#2025-04-07_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nexport type CodeBlockProps = {\n\tcode: string;\n\tlang: string;\n\ttheme?: 'dark' | 'light';\n\t// Style Props\n\tregionHeader?: string;\n\tregionBody?: string;\n\tregionHeaderDark?: string;\n\tregionBodyDark?: string;\n\tregionHeaderLight?: string;\n\tregionBodyLight?: string;\n\t// Optional\n\ttitle?: string;\n\tclasses?: string;\n\tbackground?: boolean;\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Deep Link HTML Structure\nDESCRIPTION: Demonstrates the HTML structure for creating deep-linkable headings using ID attributes and anchor tags.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/guides/cookbook/table-of-contents.mdx#2025-04-07_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<h2 class=\"#some-example-slug\">\n\tSome Example Heading\n\t<h2></h2>\n</h2>\n```\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"#real-world-example\" class=\"anchor\">Some Example Heading</a>\n```\n\n----------------------------------------\n\nTITLE: Importing Floating UI React Components\nDESCRIPTION: Demonstrates how to import the core useFloating hook from Floating UI React library.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/integrations/popover/react.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useFloating } from '@floating-ui/react';\n```\n\n----------------------------------------\n\nTITLE: NavGrid Component Implementation for Figma Guides\nDESCRIPTION: This code renders a navigation grid for Figma-related documentation. It uses the NavGrid component to display links to Figma guides, with specific styling for a single column layout on medium screens.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/guides/figma/chapter-1.mdx#2025-04-07_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<NavGrid collection=\"docs\" path=\"figma/\" classes=\"md:grid-cols-1\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Lucide Icons in React Components\nDESCRIPTION: Demonstrates how to import and use Lucide icons in a React component. Shows customization of icon properties like color and size.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/integrations/iconography/react.mdx#2025-04-07_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Skull as IconSkull } from 'lucide-react';\n\nconst App = () => {\n\treturn <IconSkull color=\"red\" size={48} />;\n};\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Importing Layout Examples in Astro\nDESCRIPTION: Imports various layout examples as components and their raw source code for documentation purposes in an Astro file.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/guides/layouts.mdx#2025-04-07_snippet_0\n\nLANGUAGE: astro\nCODE:\n```\nexport const components = componentSet;\n\nimport ExampleColOne from '@examples/guides/cookbook/layouts/ExampleColOne.astro';\nimport ExampleColOneRaw from '@examples/guides/cookbook/layouts/ExampleColOne.astro?raw';\nimport ExampleColThree from '@examples/guides/cookbook/layouts/ExampleColThree.astro';\nimport ExampleColThreeRaw from '@examples/guides/cookbook/layouts/ExampleColThree.astro?raw';\nimport ExampleColTwo from '@examples/guides/cookbook/layouts/ExampleColTwo.astro';\nimport ExampleColTwoRaw from '@examples/guides/cookbook/layouts/ExampleColTwo.astro?raw';\nimport ExampleStickyHeader from '@examples/guides/cookbook/layouts/ExampleStickyHeader.astro';\nimport ExampleStickyHeaderRaw from '@examples/guides/cookbook/layouts/ExampleStickyHeader.astro?raw';\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation Header\nDESCRIPTION: YAML frontmatter block defining the documentation page metadata including title, description, and display settings.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/integrations/iconography/meta.mdx#2025-04-07_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Iconography\ndescription: Learn how to integrate Lucide for iconography in Skeleton.\nshowDocsUrl: true\n---\n```\n\n----------------------------------------\n\nTITLE: Creating a Real World Example Link in HTML\nDESCRIPTION: Displays a button link to a real-world Tailwind CSS example in a figure element with a noise background.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/guides/layouts.mdx#2025-04-07_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<figure class=\"linker bg-noise\">\n\t<a class=\"btn preset-filled\" href=\"https://play.tailwindcss.com/zP9RcoacIS\" target=\"_blank\">\n\t\tView Real World Example\n\t</a>\n</figure>\n```\n\n----------------------------------------\n\nTITLE: Defining CodeBlockProps Interface in TypeScript\nDESCRIPTION: TypeScript interface that defines the properties for a code block component. Includes options for code content, language selection, theme configuration, and various styling properties for both the container and pre elements.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/examples/integrations/code-block/Types.txt#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface CodeBlockProps {\n\tcode?: string;\n\tlang?: 'console' | 'html' | 'css' | 'js';\n\ttheme?: 'dark-plus';\n\t// Base Style Props\n\tbase?: string;\n\trounded?: string;\n\tshadow?: string;\n\tclasses?: string;\n\t// Pre Style Props\n\tpreBase?: string;\n\tprePadding?: string;\n\tpreClasses?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Full Height HTML and Body with Tailwind CSS\nDESCRIPTION: CSS reset to ensure HTML and body elements extend to the full height of the viewport using Tailwind's @apply directive.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/guides/layouts.mdx#2025-04-07_snippet_3\n\nLANGUAGE: css\nCODE:\n```\nhtml,\nbody {\n\t@apply h-full;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Code Block Component Props in TypeScript\nDESCRIPTION: Defines the properties for the code block component including code content, language, theme, and various styling options for the container and pre elements.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/examples/integrations/code-block/SvelteComponent.txt#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { CodeBlockProps } from './types';\n\nlet {\n\tcode = '',\n\tlang = 'console',\n\ttheme = 'dark-plus',\n\t// Base Style Props\n\tbase = ' overflow-hidden',\n\trounded = 'rounded-container',\n\tshadow = '',\n\tclasses = '',\n\t// Pre Style Props\n\tpreBase = '',\n\tprePadding = '[&>pre]:p-4',\n\tpreClasses = ''\n}: CodeBlockProps = $props();\n\n// Shiki convert to HTML\nconst generatedHtml = shiki.codeToHtml(code, { lang, theme });\n```\n\n----------------------------------------\n\nTITLE: Installing Shiki Package\nDESCRIPTION: Command to install Shiki syntax highlighter using npm package manager.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/integrations/code-block/react.mdx#2025-04-07_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nnpm install -D shiki\n```\n\n----------------------------------------\n\nTITLE: Styling Input Components in Skeleton CSS\nDESCRIPTION: This CSS snippet defines styles for input components in the Skeleton framework. It includes styles for different input types and states.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/examples/integrations/code-block/ReactType.txt#2025-04-07_snippet_1\n\nLANGUAGE: CSS\nCODE:\n```\n.input {\n\t--tw-bg-opacity: 0.1;\n\t--tw-border-opacity: 1;\n\t--tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);\n\t--tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(1px + var(--tw-ring-offset-width)) var(--tw-ring-color);\n\tbackground-color: rgb(var(--color-surface-500) / var(--tw-bg-opacity));\n\tborder-color: rgb(var(--color-surface-500) / var(--tw-border-opacity));\n\tbox-shadow: var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow, 0 0 #0000);\n\tpadding: 0.5rem 1rem;\n\tborder-radius: var(--theme-rounded-base);\n\ttransition-property: all;\n\ttransition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n\ttransition-duration: 200ms;\n}\n\n.input:focus {\n\t--tw-bg-opacity: 0.2;\n\t--tw-border-opacity: 1;\n\t--tw-ring-opacity: 1;\n\tbackground-color: rgb(var(--color-surface-500) / var(--tw-bg-opacity));\n\tborder-color: rgb(var(--color-primary-500) / var(--tw-border-opacity));\n\t--tw-ring-color: rgb(var(--color-primary-500) / var(--tw-ring-opacity));\n\toutline: 2px solid transparent;\n\toutline-offset: 2px;\n}\n\n.input:disabled {\n\t--tw-bg-opacity: 0.05;\n\t--tw-border-opacity: 0.2;\n\tbackground-color: rgb(var(--color-surface-500) / var(--tw-bg-opacity));\n\tborder-color: rgb(var(--color-surface-500) / var(--tw-border-opacity));\n\tpointer-events: none;\n}\n```\n\n----------------------------------------\n\nTITLE: React Code Block Component Implementation\nDESCRIPTION: React component implementation for rendering syntax-highlighted code blocks using Shiki.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/integrations/code-block/react.mdx#2025-04-07_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n${ReactComponentRaw}\n```\n\n----------------------------------------\n\nTITLE: Installing Tailwind CSS and Vite Plugin\nDESCRIPTION: Console command to install Tailwind CSS and its Vite plugin as dependencies.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/get-started/installation/astro.mdx#2025-04-07_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nnpm install tailwindcss @tailwindcss/vite\n```\n\n----------------------------------------\n\nTITLE: Floating Element CSS Base Styles\nDESCRIPTION: Required CSS class definition for floating elements, setting width to max-content and absolute positioning.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/integrations/popover/react.mdx#2025-04-07_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.floating {\n\twidth: max-content;\n\tposition: absolute;\n\ttop: 0;\n\tleft: 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Astro Component with Skeleton\nDESCRIPTION: Basic Astro component that imports the global CSS and demonstrates using Skeleton UI elements like headings and buttons.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/get-started/installation/astro.mdx#2025-04-07_snippet_5\n\nLANGUAGE: astro\nCODE:\n```\n---\nconst framework = 'Astro';\nimport '../styles/global.css'\n---\n<main class=\"p-10 space-y-4\">\n\t<h1 class=\"h1\">Hello {framework}</h1>\n\t<p>This page is working.</p>\n\t<button type=\"button\" class=\"btn preset-filled-primary-500\">Example Button</button>\n</main>\n```\n\n----------------------------------------\n\nTITLE: Positioning Options Import for Floating UI Components\nDESCRIPTION: Imports positioning options for Floating UI components from a text file, likely containing TypeScript definitions.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/integrations/popover/svelte.mdx#2025-04-07_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport PostioningOptions from '@examples/components/popover/PostioningOptions.txt?raw';\n```\n\n----------------------------------------\n\nTITLE: Starting the Astro Dev Server\nDESCRIPTION: Console command to start the Astro development server.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/get-started/installation/astro.mdx#2025-04-07_snippet_7\n\nLANGUAGE: console\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Using Essential Code Component in Astro\nDESCRIPTION: Demonstrates how to use the Essential Code component for syntax highlighting in Astro pages.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/resources/contribute/documentation.mdx#2025-04-07_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Code code={`<div>Skeleton<div>`} lang=\"html\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Astro Framework Integrations\nDESCRIPTION: Console commands to add React or Svelte framework integrations to an Astro project.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/get-started/installation/astro.mdx#2025-04-07_snippet_8\n\nLANGUAGE: console\nCODE:\n```\nnpx astro add react\n```\n\nLANGUAGE: console\nCODE:\n```\nnpx astro add svelte\n```\n\n----------------------------------------\n\nTITLE: Creating Anatomy Component in Astro\nDESCRIPTION: Demonstrates how to use the Anatomy component to generate a visual aid showcasing a component's structure and labeling.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/resources/contribute/documentation.mdx#2025-04-07_snippet_3\n\nLANGUAGE: astro\nCODE:\n```\n## Anatomy\n\n<Anatomy label=\"Accordion\" isComponent>\n\t<Anatomy label=\"Accordion.Item\" isComponent>\n\t\t<Anatomy label=\"Accordion.Control\" element=\"button\" isComponent>\n\t\t\t<Anatomy label=\"lead\" />\n\t\t\t<Anatomy label=\"content\" />\n\t\t\t<Anatomy label=\"indicator\" />\n\t\t</Anatomy>\n\t\t<Anatomy label=\"Accordion.Panel\" isComponent />\n\t</Anatomy>\n\t<Anatomy label=\"Accordion.Item\" isComponent />\n</Anatomy>\n```\n\n----------------------------------------\n\nTITLE: Importing Svelte Wrapper in Astro Page\nDESCRIPTION: Astro code showing how to import and use a Svelte wrapper component in an Astro file.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/get-started/installation/astro.mdx#2025-04-07_snippet_14\n\nLANGUAGE: astro\nCODE:\n```\n---\nimport { SvelteAvatarWrapper } from '@components/SvelteAvatarWrapper';\n---\n\n<SvelteAvatarWrapper />\n```\n\n----------------------------------------\n\nTITLE: Using API Table Component in Astro\nDESCRIPTION: Shows how to implement the API Table component to automatically fetch and display the type schema for a component.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/resources/contribute/documentation.mdx#2025-04-07_snippet_4\n\nLANGUAGE: astro\nCODE:\n```\n## API Reference\n\n<ApiTable />\n```\n\n----------------------------------------\n\nTITLE: Component Props Implementation\nDESCRIPTION: Example of using functional and style props with the Avatar component.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/get-started/fundamentals.mdx#2025-04-07_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n<Avatar src={someUrl} alt=\"Jane\" background=\"bg-red-500\" />\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Astro Icons\nDESCRIPTION: Demonstrates how to import and use Astro-Icon for local custom SVGs and brand icons in the documentation.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/resources/contribute/documentation.mdx#2025-04-07_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport { Icon } from 'astro-icon/components';\n```\n\nLANGUAGE: tsx\nCODE:\n```\n<Icon name=\"skeleton\" size={24} />\n<Icon name=\"react\" size={24} />\n<Icon name=\"svelte\" size={24} />\n```\n\n----------------------------------------\n\nTITLE: Component Template Structure\nDESCRIPTION: Shows how component templates are structured with style props.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/get-started/fundamentals.mdx#2025-04-07_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<figure class=\"{base} {background} {size} {font} {border} {rounded} {shadow} {classes}\">\n\t<img {src} alt={name} class=\"{imageBase} {imageClasses}\" />\n</figure>\n```\n\n----------------------------------------\n\nTITLE: Configuring PNPM Workspace Catalog in YAML\nDESCRIPTION: The YAML configuration for defining package versions in the PNPM catalog. This allows maintaining uniform version dependencies across multiple projects in the monorepo.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/resources/contribute/get-started.mdx#2025-04-07_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncatalog:\n\t# ...\n\t<package>: <version>\n```\n\n----------------------------------------\n\nTITLE: Extended Class Styling\nDESCRIPTION: Shows how to add additional classes using the classes prop.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/get-started/fundamentals.mdx#2025-04-07_snippet_6\n\nLANGUAGE: svelte\nCODE:\n```\n<Avatar classes=\"border-4 border-green-500\">Sk</Avatar>\n```\n\n----------------------------------------\n\nTITLE: Adding PNPM Catalog Dependencies via Shell Command\nDESCRIPTION: Shell command for adding dependencies that reference the shared catalog version, ensuring consistent dependency versions across the monorepo.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/resources/contribute/get-started.mdx#2025-04-07_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm add <package>@catalog:\n```\n\n----------------------------------------\n\nTITLE: Base Style Override\nDESCRIPTION: Demonstrates how to override default base styles.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/get-started/fundamentals.mdx#2025-04-07_snippet_7\n\nLANGUAGE: svelte\nCODE:\n```\n<Avatar base=\"flex justify-center items-center overflow-visible\">Sk</Avatar>\n```\n\n----------------------------------------\n\nTITLE: Importing Divider Components in Astro\nDESCRIPTION: Component imports for various divider examples including basic, size, style, colors, and vertical orientations.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/tailwind/dividers.mdx#2025-04-07_snippet_0\n\nLANGUAGE: astro\nCODE:\n```\nexport const components = componentSet;\n\nimport Example from '@examples/tailwind/dividers/Example.astro';\nimport ExampleRaw from '@examples/tailwind/dividers/Example.astro?raw';\nimport ExampleSize from '@examples/tailwind/dividers/ExampleSize.astro';\nimport ExampleSizeRaw from '@examples/tailwind/dividers/ExampleSize.astro?raw';\nimport ExampleStyle from '@examples/tailwind/dividers/ExampleStyle.astro';\nimport ExampleStyleRaw from '@examples/tailwind/dividers/ExampleStyle.astro?raw';\nimport ExampleColors from '@examples/tailwind/dividers/ExampleColors.astro';\nimport ExampleColorsRaw from '@examples/tailwind/dividers/ExampleColors.astro?raw';\nimport ExampleVert from '@examples/tailwind/dividers/ExampleVert.astro';\nimport ExampleVertRaw from '@examples/tailwind/dividers/ExampleVert.astro?raw';\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server Command\nDESCRIPTION: Command to run all packages, playgrounds and sites in watch mode from the monorepo root\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/resources/contribute/components.mdx#2025-04-07_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Astro Page Layout Configuration\nDESCRIPTION: Front matter configuration for the divider documentation page, specifying layout, title, description and source file references.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/tailwind/dividers.mdx#2025-04-07_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: '@layouts/LayoutDoc.astro'\ntitle: Dividers\ndescription: Horizontal and vertical rule styling.\nsrcCore: '/utilities/dividers.css'\nshowDocsUrl: true\n---\n```\n\n----------------------------------------\n\nTITLE: Svelte Form Component Implementation\nDESCRIPTION: Example of implementing form components in Svelte with two-way binding\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/resources/contribute/components.mdx#2025-04-07_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\tlet value = $state('chocolate');\n</script>\n\n<Segment {value} onValueChange={(e) => (value = e.value)} name=\"flavors\">\n\t<Segment.Item id=\"chocolate\" value=\"chocolate\">Chocolate</Segment.Item>\n\t<Segment.Item id=\"strawberry\" value=\"strawberry\">Strawberry</Segment.Item>\n</Segment>\n```\n\n----------------------------------------\n\nTITLE: Implementing Animated Placeholder Element in HTML\nDESCRIPTION: Demonstrates how to create an animated placeholder element using CSS classes. The element uses the placeholder class for styling and animate-pulse for a pulsing animation effect during content loading.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/tailwind/placeholders.mdx#2025-04-07_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"placeholder animate-pulse\">...</div>\n```\n\n----------------------------------------\n\nTITLE: React Form Component Implementation\nDESCRIPTION: Example of implementing form components in React using useState hook\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/resources/contribute/components.mdx#2025-04-07_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nconst [value, setValue] = useState('chocolate');\n\nreturn (\n\t<Segment value={value} onValueChange={(e) => setValue(e.value)} name=\"flavors\">\n\t\t<Segment.Item id=\"chocolate\" value=\"chocolate\">\n\t\t\tChocolate\n\t\t</Segment.Item>\n\t\t<Segment.Item id=\"strawberry\" value=\"strawberry\">\n\t\t\tStrawberry\n\t\t</Segment.Item>\n\t</Segment>\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Shiki Highlighter in TypeScript\nDESCRIPTION: Creates a synchronized Shiki highlighter instance with specified themes and language support. It configures the JavaScript regex engine and loads various language definitions and the dark-plus theme.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/examples/integrations/code-block/ReactComponent.txt#2025-04-07_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst shiki = createHighlighterCoreSync({\n  engine: createJavaScriptRegexEngine(),\n  // Implement your import theme.\n  themes: [themeDarkPlus],\n  // Implement your imported and supported languages.\n  langs: [console, html, css, js, svelte],\n});\n```\n\n----------------------------------------\n\nTITLE: Exporting Components in Svelte Package\nDESCRIPTION: Example of how to export components in the Svelte package. Shows the pattern of default exports from component files in the lib/index.ts file.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/resources/contribute/components.mdx#2025-04-07_snippet_12\n\nLANGUAGE: ts\nCODE:\n```\nexport { default as Foo } from './components/Foo.svelte';\nexport { default as Bar } from './components/Bar.svelte';\n```\n\n----------------------------------------\n\nTITLE: React CodeBlock Component Implementation with TypeScript and JSX\nDESCRIPTION: Defines a React functional component that renders code with syntax highlighting. It accepts various props for customizing the appearance and transforms the code string into highlighted HTML using Shiki, then renders it with dangerouslySetInnerHTML.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/examples/integrations/code-block/ReactComponent.txt#2025-04-07_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const CodeBlock: React.FC<CodeBlockProps> = ({\n  code = \"\",\n  lang = \"console\",\n  theme = \"dark-plus\",\n  // Base Style Props\n  base = \"overflow-hidden\",\n  background = \"bg-neutral-950\",\n  rounded = \"rounded-container\",\n  shadow = \"\",\n  classes = \"\",\n  // Pre Style Props\n  preBase = \"\",\n  prePadding = \"[&>pre]:p-4\",\n  preClasses = \"\",\n}) => {\n  // Shiki convert to HTML\n  const generatedHtml = shiki.codeToHtml(code, { lang, theme });\n\n  return (\n    <div\n      dangerouslySetInnerHTML={{ __html: generatedHtml }}\n      className={`${base} ${background} ${rounded} ${shadow} ${classes} ${preBase} ${prePadding} ${preClasses}`}\n    ></div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Dark Mode Toggle in JavaScript\nDESCRIPTION: A JavaScript snippet that toggles between dark and light themes. It selects a button element with the class 'preset-filled' and adds a click event listener that changes the theme and updates the button text accordingly.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/resources/_markdown.mdx#2025-04-07_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst toggleDarkMode = document.querySelector('.preset-filled');\n\njtd.addEvent(toggleDarkMode, 'click', function () {\n\tif (jtd.getTheme() === 'dark') {\n\t\tjtd.setTheme('light');\n\t\ttoggleDarkMode.textContent = 'Preview dark color scheme';\n\t} else {\n\t\tjtd.setTheme('dark');\n\t\ttoggleDarkMode.textContent = 'Return to the light side';\n\t}\n});\n```\n\n----------------------------------------\n\nTITLE: Styling Button Components in Skeleton CSS\nDESCRIPTION: This CSS snippet defines styles for button components in the Skeleton framework. It includes styles for different button variants, sizes, and states.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/examples/integrations/code-block/ReactType.txt#2025-04-07_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n.btn {\n\t--tw-border-opacity: 0;\n\t--tw-bg-opacity: 1;\n\t--tw-text-opacity: 1;\n\tborder-width: var(--theme-border-base);\n\tborder-color: rgb(var(--color-surface-500) / var(--tw-border-opacity));\n\tbackground-color: rgb(var(--color-surface-500) / var(--tw-bg-opacity));\n\tcolor: rgb(var(--on-surface) / var(--tw-text-opacity));\n\tdisplay: inline-flex;\n\tflex-wrap: nowrap;\n\talign-items: center;\n\tjustify-content: center;\n\twhite-space: nowrap;\n\ttext-align: center;\n\tvertical-align: middle;\n\ttext-decoration-line: none;\n\tfont-weight: 600;\n\tmargin: 0px;\n\tline-height: 1;\n\tpadding: 0.65rem 1.5rem;\n\tborder-radius: var(--theme-rounded-base);\n\ttransition-property: all;\n\ttransition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n\ttransition-duration: 200ms;\n\tuser-select: none;\n}\n\n.btn:hover {\n\t--tw-bg-opacity: 1;\n\t--tw-text-opacity: 1;\n\tbackground-color: rgb(var(--color-surface-400) / var(--tw-bg-opacity));\n\tcolor: rgb(var(--on-surface) / var(--tw-text-opacity));\n}\n\n.btn:focus {\n\t--tw-bg-opacity: 1;\n\t--tw-text-opacity: 1;\n\tbackground-color: rgb(var(--color-primary-500) / var(--tw-bg-opacity));\n\tcolor: rgb(var(--on-primary) / var(--tw-text-opacity));\n}\n\n.btn:active {\n\t--tw-bg-opacity: 1;\n\t--tw-text-opacity: 1;\n\tbackground-color: rgb(var(--color-primary-600) / var(--tw-bg-opacity));\n\tcolor: rgb(var(--on-primary) / var(--tw-text-opacity));\n}\n\n.btn:disabled {\n\t--tw-bg-opacity: 0.5;\n\t--tw-text-opacity: 0.5;\n\tpointer-events: none;\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Function Example with Language Module Loading\nDESCRIPTION: A JavaScript function that loads language modules dynamically. It requires a language file based on the provided language code parameter and returns true upon completion.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/resources/_markdown.mdx#2025-04-07_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Javascript code with syntax highlighting.\nvar fun = function lang(l) {\n\tdateformat.i18n = require('./lang/' + l);\n\treturn true;\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Shiki Highlighter in Svelte Component\nDESCRIPTION: Sets up Shiki highlighter with a JavaScript regex engine and imports the dark-plus theme along with language support for console, HTML, CSS, and JavaScript.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/examples/integrations/code-block/SvelteComponent.txt#2025-04-07_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createHighlighterCoreSync } from 'shiki/core';\nimport { createJavaScriptRegexEngine } from 'shiki/engine/javascript';\n// Themes\n// https://shiki.style/themes\nimport themeDarkPlus from 'shiki/themes/dark-plus.mjs';\n// Languages\n// https://shiki.style/languages\nimport console from 'shiki/langs/console.mjs';\nimport html from 'shiki/langs/html.mjs';\nimport css from 'shiki/langs/css.mjs';\nimport js from 'shiki/langs/javascript.mjs';\n\n// https://shiki.style/guide/sync-usage\nconst shiki = createHighlighterCoreSync({\n\tengine: createJavaScriptRegexEngine(),\n\t// Implement your import theme.\n\tthemes: [themeDarkPlus],\n\t// Implement your imported and supported languages.\n\tlangs: [console, html, css, js]\n});\n```\n\n----------------------------------------\n\nTITLE: Ruby Dependency Management for GitHub Pages\nDESCRIPTION: A Ruby code snippet that iterates through GitHub Pages dependencies and adds them to a specification. It ensures each gem is added with an exact version requirement.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/resources/_markdown.mdx#2025-04-07_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# Ruby code with syntax highlighting\nGitHubPages::Dependencies.gems.each do |gem, version|\n  s.add_dependency(gem, \"= #{version}\")\nend\n```\n\n----------------------------------------\n\nTITLE: Setting up and running Skeleton-React locally\nDESCRIPTION: Commands for installing dependencies and starting the development server for the Skeleton-React project. After running these commands, the application will be accessible at http://localhost:5173/.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/packages/skeleton-react/README.md#2025-04-07_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm i\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Installing Astro Project with Minimal Template\nDESCRIPTION: Command to create a new Astro project using the minimal template starter.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/README.md#2025-04-07_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm create astro@latest -- --template minimal\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry Version 1.2.0\nDESCRIPTION: Documents the addition of a hidden input feature for TagsInput component.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/packages/skeleton-svelte/CHANGELOG.md#2025-04-07_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.2.0\n### Minor Changes\n\n- feat: add hidden input for TagsInput (#3487)\n```\n\n----------------------------------------\n\nTITLE: Importing Skeleton Base Stylesheet in CSS\nDESCRIPTION: CSS import statements to include Tailwind and Skeleton base stylesheets. The Skeleton stylesheet should be imported after Tailwind.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/packages/skeleton/README.md#2025-04-07_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@import 'tailwindcss';\n@import '@skeletonlabs/skeleton'; /* Add Skeleton Stylesheet */\n```\n\n----------------------------------------\n\nTITLE: Importing Skeleton Theme Stylesheet in CSS\nDESCRIPTION: CSS import statements to include Tailwind, Skeleton base, and a specific Skeleton theme stylesheet. The theme should be imported after the base Skeleton import.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/packages/skeleton/README.md#2025-04-07_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n@import 'tailwindcss';\n@import '@skeletonlabs/skeleton';\n@import '@skeletonlabs/skeleton/themes/cerberus'; /* Add Skeleton Theme */\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Skeleton-Svelte Development Server\nDESCRIPTION: Commands to install dependencies and start the development server for the Skeleton-Svelte project. Uses pnpm as the package manager and runs on port 5173.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/packages/skeleton-svelte/README.md#2025-04-07_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm i\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Setting Skeleton Theme in HTML\nDESCRIPTION: HTML code snippet showing how to set the imported Skeleton theme by adding a data-theme attribute to the html tag.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/packages/skeleton/README.md#2025-04-07_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<html data-theme=\"cerberus\">\n\t<!-- Add Skeleton Theme -->\n\t<!-- ... -->\n</html>\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry Version 1.1.0\nDESCRIPTION: Documents removal of Toast integration and bug fixes for FileUpload component and Zag update.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/packages/skeleton-svelte/CHANGELOG.md#2025-04-07_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.1.0\n### Minor Changes\n\n- feat: Removed Toast integration in favor of first-party Toast component. (#3440)\n\n### Patch Changes\n\n- fix(FileUpload): Change `#each` key from `file.name` to `file` (Prevents name conflicts). (#3475)\n\n- fix: Update Zag to 1.7.0 (#3476)\n```\n\n----------------------------------------\n\nTITLE: Installing Skeleton Packages\nDESCRIPTION: Command to install Skeleton core and React component packages as development dependencies.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/get-started/installation/vite-react.mdx#2025-04-07_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nnpm i -D @skeletonlabs/skeleton @skeletonlabs/skeleton-react\n```\n\n----------------------------------------\n\nTITLE: Installing Tailwind Dependencies\nDESCRIPTION: Command to install Tailwind CSS and its Vite plugin.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/get-started/installation/vite-react.mdx#2025-04-07_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nnpm install tailwindcss @tailwindcss/vite\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite with Tailwind\nDESCRIPTION: Configuration for Vite to use Tailwind CSS and React plugins, with proper plugin ordering.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/get-started/installation/vite-react.mdx#2025-04-07_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport tailwindcss from \"@tailwindcss/vite\";\n\nexport default defineConfig({\n\tplugins: [\n\t\ttailwindcss(),\n\t\treact() // <-- Must come after Tailwind\n\t],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind CSS Imports\nDESCRIPTION: CSS import configurations for Tailwind and Skeleton, including theme and preset imports.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/get-started/installation/vite-react.mdx#2025-04-07_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n@import 'tailwindcss';\n\n@import '@skeletonlabs/skeleton';\n@import '@skeletonlabs/skeleton/optional/presets';\n@import '@skeletonlabs/skeleton/themes/cerberus';\n\n@source '../node_modules/@skeletonlabs/skeleton-react/dist';\n```\n\n----------------------------------------\n\nTITLE: Installing Custom Font Package\nDESCRIPTION: Command to install a custom font package using npm.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/design/themes.mdx#2025-04-07_snippet_7\n\nLANGUAGE: console\nCODE:\n```\nnpm install @fontsource/open-sans\n```\n\n----------------------------------------\n\nTITLE: Starting Next.js Development Server\nDESCRIPTION: Commands to start the Next.js development server using different package managers including npm, yarn, pnpm, and bun. The server will run on localhost:3000 by default.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/playgrounds/skeleton-react/README.md#2025-04-07_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Chip Selection Implementation in React\nDESCRIPTION: Shows how to implement a chip selection component in React using the Skeleton UI library. This allows for interactive selection of chip elements.\nSOURCE: https://github.com/skeletonlabs/skeleton/blob/main/sites/skeleton.dev/src/content/docs/tailwind/chips.mdx#2025-04-07_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Page as ExampleSelectReact } from '@examples/tailwind/chips/ExampleSelect.tsx';\nimport ExampleSelectReactRaw from '@examples/tailwind/chips/ExampleSelect.tsx?raw';\n```"
  }
]