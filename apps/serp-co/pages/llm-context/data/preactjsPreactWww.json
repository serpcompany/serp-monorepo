[
  {
    "owner": "preactjs",
    "repo": "preact-www",
    "content": "TITLE: Basic Signal Usage in JavaScript\nDESCRIPTION: Demonstrates creating and using a basic signal with value reading and updating.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/signals.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { signal } from \"@preact/signals\";\n\nconst count = signal(0);\n\n// Read a signal's value by accessing .value:\nconsole.log(count.value);   // 0\n\n// Update a signal's value:\ncount.value += 1;\n\n// The signal's value has changed:\nconsole.log(count.value);  // 1\n```\n\n----------------------------------------\n\nTITLE: Implementing a Counter with Preact Signals\nDESCRIPTION: A simple counter component that demonstrates the use of signals and computed values in Preact. It creates a count signal with an initial value of 0 and a computed double value that is always twice the count. The component renders a button that increments the count when clicked.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/blog/introducing-signals.md#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// --repl\nimport { render } from \"preact\";\n// --repl-before\nimport { signal, computed } from \"@preact/signals\";\n \nconst count = signal(0);\nconst double = computed(() => count.value * 2);\n \nfunction Counter() {\n  return (\n    <button onClick={() => count.value++}>\n      {count} x 2 = {double}\n    </button>\n  );\n}\n// --repl-after\nrender(<Counter />, document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Implementing a Counter with Preact Signals\nDESCRIPTION: A simple counter component that demonstrates the use of signals and computed values in Preact. It creates a count signal with an initial value of 0 and a computed double value that is always twice the count. The component renders a button that increments the count when clicked.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/blog/introducing-signals.md#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// --repl\nimport { render } from \"preact\";\n// --repl-before\nimport { signal, computed } from \"@preact/signals\";\n \nconst count = signal(0);\nconst double = computed(() => count.value * 2);\n \nfunction Counter() {\n  return (\n    <button onClick={() => count.value++}>\n      {count} x 2 = {double}\n    </button>\n  );\n}\n// --repl-after\nrender(<Counter />, document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Implementing a Counter with Class Components in Preact\nDESCRIPTION: This example demonstrates a counter component implemented as a Preact class component. It shows state initialization, event handling with an increment method, and rendering the counter value with a button to increase it.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/hooks.md#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nclass Counter extends Component {\n  state = {\n    value: 0\n  };\n\n  increment = () => {\n    this.setState(prev => ({ value: prev.value +1 }));\n  };\n\n  render(props, state) {\n    return (\n      <div>\n        <p>Counter: {state.value}</p>\n        <button onClick={this.increment}>Increment</button>\n      </div>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Signals for State Management in Preact\nDESCRIPTION: This snippet demonstrates the implementation of signals in Preact. It shows how to create a signal for state management and use it within a component, allowing for direct state access and automatic updates.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/blog/introducing-signals.md#2025-04-09_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n// --repl\nimport { render } from \"preact\";\nimport { signal } from \"@preact/signals\";\n// --repl-before\n// Imagine this is some global state that the whole app needs access to:\nconst count = signal(0);\n \nfunction Counter() {\n return (\n   <button onClick={() => count.value++}>\n     Value: {count.value}\n   </button>\n );\n}\n// --repl-after\nrender(<Counter />, document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Creating Signals in Preact\nDESCRIPTION: Shows how to create a new signal with an initial value. The returned signal has a .value property for reading and writing, and a peek() method for reading without subscribing.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/signals.md#2025-04-09_snippet_21\n\nLANGUAGE: js\nCODE:\n```\nconst count = signal(0);\n```\n\n----------------------------------------\n\nTITLE: Rendering a Hello World Preact Application\nDESCRIPTION: Shows how to use the render() function to inject a Preact application into the DOM.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/tutorial.md#2025-04-09_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// --repl\nimport { render } from 'preact';\n\nconst App = <h1>Hello World!</h1>;\n\n// Inject our app into the DOM\nrender(App, document.getElementById('app'));\n```\n\n----------------------------------------\n\nTITLE: Basic Signal Usage in JavaScript\nDESCRIPTION: Demonstrates creation and usage of basic signals for reactive values. Shows how to create a signal with an initial value and update it.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/blog/signal-boosting.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { signal } from \"@preact/signals-core\";\n\nconst s = signal(0);\nconsole.log(s.value); // Console: 0\n\ns.value = 1;\nconsole.log(s.value); // Console: 1\n```\n\n----------------------------------------\n\nTITLE: Counter Component with Signals in Preact\nDESCRIPTION: Example of using signals within a Preact component with explicit value access and event handling.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/signals.md#2025-04-09_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { signal } from \"@preact/signals\";\n\nconst count = signal(0);\n\nfunction Counter() {\n  const value = count.value;\n\n  const increment = () => {\n    count.value++;\n  }\n\n  return (\n    <div>\n      <p>Count: {value}</p>\n      <button onClick={increment}>click me</button>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Global App State with Signals in Preact\nDESCRIPTION: Demonstrates how to extract application state into a reusable function that returns signal objects. This pattern makes testing easier by allowing state to be injected into components.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/signals.md#2025-04-09_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nfunction createAppState() {\n  const todos = signal([]);\n\n  const completed = computed(() => {\n    return todos.value.filter(todo => todo.completed).length\n  });\n\n  return { todos, completed }\n}\n```\n\n----------------------------------------\n\nTITLE: Building a Todo Application with Preact Hooks and localStorage Persistence\nDESCRIPTION: A complete Todo application built with Preact that demonstrates useState and useEffect hooks, event handling, and localStorage persistence. The component fetches initial todos from localStorage, allows adding new todos via a form, toggling todo completion status, and automatically saves changes to localStorage.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/tutorial/10-links.md#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { render } from 'preact';\nimport { useState, useEffect } from 'preact/hooks'\n\nconst getTodos = async () => {\n  try {\n    return JSON.parse(localStorage.todos)\n  } catch (e) {\n    return [\n      { id: 1, text: 'learn Preact', done: true },\n      { id: 2, text: 'make an awesome app', done: false },\n    ]\n  }\n}\n\nfunction ToDos() {\n  const [todos, setTodos] = useState([])\n\n  useEffect(() => {\n    getTodos().then(todos => {\n      setTodos(todos)\n    })\n  }, [])\n\n  // every time todos changes...\n  useEffect(() => {\n    // ...save the list to localStorage:\n    localStorage.todos = JSON.stringify(todos)\n    // (try reloading the page to see saved todos!)\n  }, [todos])\n\n  function toggle(id) {\n    setTodos(todos => {\n      return todos.map(todo => {\n        // replace the matching todo item with a version where done is toggled\n        if (todo.id === id) {\n          todo = { ...todo, done: !todo.done }\n        }\n        return todo\n      })\n    })\n  }\n\n  function addTodo(e) {\n    e.preventDefault()\n    const form = e.target\n    const text = form.todo.value\n    // pass a callback to the `todos` state setter to update its value in-place:\n    setTodos(todos => {\n      const id = todos.length + 1\n      const newTodo = { id, text, done: false }\n      return todos.concat(newTodo)\n    })\n    form.reset()\n  }\n\n  return (\n    <div>\n      <ul style={{ listStyle: 'none', padding: 0 }}>\n        {todos.map(todo => (\n          <li key={todo.id}>\n            <label style={{ display: 'block' }}>\n              <input type=\"checkbox\" checked={todo.done} onClick={() => toggle(todo.id)} />\n              {' ' + todo.text}\n            </label>\n          </li>\n        ))}\n      </ul>\n      <form onSubmit={addTodo}>\n        <input name=\"todo\" placeholder=\"Add ToDo [enter]\" />\n      </form>\n    </div>\n  )\n}\n\nrender(<ToDos />, document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Running Effects in Response to Signal Changes in Preact\nDESCRIPTION: Shows how to use the effect() function to run code when signals change. Effects track accessed signals and re-run when those signals change. If the callback returns a function, it will be run before the next update.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/signals.md#2025-04-09_snippet_23\n\nLANGUAGE: js\nCODE:\n```\nconst name = signal(\"Jane\");\n\n// Log to console when `name` changes:\neffect(() => console.log('Hello', name.value));\n// Logs: \"Hello Jane\"\n\nname.value = \"John\";\n// Logs: \"Hello John\"\n```\n\n----------------------------------------\n\nTITLE: Implementing a Classical Component in Preact\nDESCRIPTION: This snippet demonstrates how to create a basic Link component using a classical component structure with a render method. It accepts props and returns JSX to create an anchor element.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v8/types-of-components.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass Link extends Component {\n\trender(props, state) {\n\t\treturn <a href={props.href}>{ props.children }</a>;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Understanding Lazy Evaluation in Preact Signals\nDESCRIPTION: Demonstration of how signals are lazily evaluated in Preact. Computed signals only recalculate their values when their value is accessed, which is an important performance optimization.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/pt-br/guide/v10/signals.md#2025-04-09_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nconst count = signal(0);\nconst double = computed(() => count.value * 2);\n\n// Apesar de atualizar o sinal `count` do qual o sinal `double` depende,\n// `double` ainda não é atualizado porque ninguém utilizou seu valor.\ncount.value = 1;\n\n// Ler o valor de `double` aciona sua re-computação:\nconsole.log(double.value); // Exibe: 2\n```\n\n----------------------------------------\n\nTITLE: Using useRef with TypeScript in Preact\nDESCRIPTION: Shows how to use the useRef hook with TypeScript in Preact, including type annotation for HTML elements and null checks. The example demonstrates focusing an input element.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/typescript.md#2025-04-09_snippet_21\n\nLANGUAGE: tsx\nCODE:\n```\nimport { h } from \"preact\";\nimport { useRef } from \"preact/hooks\";\n\nfunction TextInputWithFocusButton() {\n  // initialise with null, but tell TypeScript we are looking for an HTMLInputElement\n  const inputRef = useRef<HTMLInputElement>(null);\n  const focusElement = () => {\n    // strict null checks need us to check if inputEl and current exist.\n    // but once current exists, it is of type HTMLInputElement, thus it\n    // has the method focus! ✅\n    if(inputRef && inputRef.current) {\n      inputRef.current.focus();\n    } \n  };\n  return (\n    <>\n      { /* in addition, inputEl only can be used with input elements */ }\n      <input ref={inputRef} type=\"text\" />\n      <button onClick={focusElement}>Focus the input</button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Nesting Components Example\nDESCRIPTION: Demonstrates how to nest components within other components to create component hierarchies.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/tutorial/03-components.md#2025-04-09_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nfunction MediaPlayer() {\n  return (\n    <div>\n      <MyButton text=\"Play\" />\n      <MyButton text=\"Stop\" />\n    </div>\n  )\n}\n\nrender(<MediaPlayer />, document.body)\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Context with Provider and Consumer in Preact\nDESCRIPTION: Demonstrates creating a context using createContext() and using it with Provider to set a value and Consumer to access that value within a component tree. This basic example shows both providing and consuming context within the same component.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/tutorial/06-context.md#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createContext } from 'preact'\n\nconst Username = createContext()\n\nexport default function App() {\n  return (\n    // provide the username value to our subtree:\n    <Username.Provider value=\"Bob\">\n      <div>\n        <p>\n          <Username.Consumer>\n            {username => (\n              // access the current username from context:\n              <span>{username}</span>\n            )}\n          </Username.Consumer>\n        </p>\n      </div>\n    </Username.Provider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Batching Signal Updates in Preact\nDESCRIPTION: Demonstrates how to use batch() to combine multiple signal updates into a single update. Batches can be nested and changes are only flushed once the outermost batch completes.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/signals.md#2025-04-09_snippet_24\n\nLANGUAGE: js\nCODE:\n```\nconst name = signal(\"Jane\");\nconst surname = signal(\"Doe\");\n\n// Combine both writes into one update\nbatch(() => {\n  name.value = \"John\";\n  surname.value = \"Smith\";\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Counter Hook in Preact\nDESCRIPTION: This example demonstrates how to extract counter logic into a custom hook for reuse across components. It showcases the core benefit of hooks - composable and reusable stateful logic that can be shared between independent components.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/hooks.md#2025-04-09_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nfunction useCounter() {\n  const [value, setValue] = useState(0);\n  const increment = useCallback(() => {\n    setValue(value + 1);\n  }, [value]);\n  return { value, increment };\n}\n\n// First counter\nfunction CounterA() {\n  const { value, increment } = useCounter();\n  return (\n    <div>\n      <p>Counter A: {value}</p>\n      <button onClick={increment}>Increment</button>\n    </div>\n  );\n}\n\n// Second counter which renders a different output.\nfunction CounterB() {\n  const { value, increment } = useCounter();\n  return (\n    <div>\n      <h1>Counter B: {value}</h1>\n      <p>I'm a nice counter</p>\n      <button onClick={increment}>Increment</button>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Component Rendering\nDESCRIPTION: Shows how to conditionally render different components based on props using ternary operators.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/tutorial/03-components.md#2025-04-09_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nfunction MediaPlayer(props) {\n  return (\n    <div>\n      {props.playing ? (\n        <MyButton text=\"Stop\" />\n      ) : (\n        <MyButton text=\"Play\" />\n      )}\n    </div>\n  )\n}\n\nrender(<MediaPlayer playing={false} />, document.body)\n// renders <button>Play</button>\n\nrender(<MediaPlayer playing={true} />, document.body)\n// renders <button>Stop</button>\n```\n\n----------------------------------------\n\nTITLE: Todo Item Addition Function in Preact Signals\nDESCRIPTION: Demonstrates a function that updates two signals separately when adding a todo item. This shows a scenario where batching updates might be beneficial.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/signals.md#2025-04-09_snippet_17\n\nLANGUAGE: js\nCODE:\n```\nconst todos = signal([]);\nconst text = signal(\"\");\n\nfunction addTodo() {\n  todos.value = [...todos.value, { text: text.value }];\n  text.value = \"\";\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Functional Components in Preact\nDESCRIPTION: Demonstrates how to create a basic functional component that receives props and renders content. Shows proper naming convention with uppercase first letter.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/components.md#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nfunction MyComponent(props) {\n  return <div>My name is {props.name}.</div>;\n}\n\n// Usage\nconst App = <MyComponent name=\"John Doe\" />;\n\n// Renders: <div>My name is John Doe.</div>\nrender(App, document.body);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Counter Component in Preact JSX\nDESCRIPTION: A simple counter component built with Preact using hooks. It maintains a count state with useState and provides increment/decrement buttons to modify the value.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/index.md#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Counter() {\n  const [value, setValue] = useState(0);\n\n  return (\n    <>\n      <div>Counter: {value}</div>\n      <button onClick={() => setValue(value + 1)}>Increment</button>\n      <button onClick={() => setValue(value - 1)}>Decrement</button>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Batching Multiple Signal Updates in Preact\nDESCRIPTION: Shows how to use the batch function to combine multiple signal updates into a single update. This can improve performance by reducing the number of recomputations and re-renders.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/signals.md#2025-04-09_snippet_18\n\nLANGUAGE: js\nCODE:\n```\nfunction addTodo() {\n  batch(() => {\n    todos.value = [...todos.value, { text: text.value }];\n    text.value = \"\";\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Todo List Component in Preact\nDESCRIPTION: This code snippet defines a TodoList component using Preact. It manages a list of todos, allows adding new items, marking items as complete, and removing items. The component uses state to track todos and a new item input, and includes methods for updating the todo list.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/src/components/controllers/repl/examples/todo-lists/todo-list.txt#2025-04-09_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { render, Component } from 'preact';\n\nclass TodoList extends Component {\n\tstate = {\n\t\ttodos: [\n\t\t\t{ text: \"Write my first post\", completed: true },\n\t\t\t{ text: \"Buy new groceries\", completed: false },\n\t\t\t{ text: \"Walk the dog\", completed: false },\n\t\t],\n\t\tnewItem: ''\n\t};\n\n\tsetNewItem = e => {\n\t\tthis.setState({ newItem: e.target.value });\n\t};\n\n\taddTodo = e => {\n\t\te.preventDefault();\n\n\t\tlet { todos, newItem } = this.state;\n\t\ttodos = todos.concat({ text: newItem, completed: false });\n\t\tthis.setState({ todos, newItem: '' });  // Reset input value on add\n\t};\n\n\tcompleteTodo = (index) => {\n\t\tlet { todos } = this.state;\n\t\ttodos[index].completed = !todos[index].completed;\n\t\tthis.setState({ todos });\n\t};\n\n\tremoveTodo = (index) => {\n\t\tlet { todos } = this.state;\n\t\ttodos.splice(index, 1);\n\t\tthis.setState({ todos });\n\t};\n\n\tcompletedCount = () => {\n\t\treturn this.state.todos.filter(todo => todo.completed).length;\n\t};\n\n\trender({}, { todos, newItem }) {\n\t\treturn (\n\t\t\t<form onSubmit={this.addTodo}>\n\t\t\t\t<input type=\"text\" value={newItem} onInput={this.setNewItem} />\n\t\t\t\t<button onClick={this.addTodo}>Add</button>\n\t\t\t\t<ul>\n\t\t\t\t\t{todos.map((todo, index) => (\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<label>\n\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\t\t\t\tchecked={todo.completed}\n\t\t\t\t\t\t\t\t\tonInput={() => this.completeTodo(index)}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t{todo.completed ? <s>{todo.text}</s> : todo.text}\n\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t{' '}\n\t\t\t\t\t\t\t<button type=\"button\" onClick={() => this.removeTodo(index)}>❌</button>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t))}\n\t\t\t\t</ul>\n\t\t\t\t<p>Completed count: {this.completedCount()}</p>\n\t\t\t</form>\n\t\t);\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Signal Values Without Subscribing Using untracked in Preact\nDESCRIPTION: Shows how to use the untracked function to read multiple signal values without creating subscriptions. This is useful for accessing multiple signals without subscribing to them.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/signals.md#2025-04-09_snippet_16\n\nLANGUAGE: js\nCODE:\n```\nconst delta = signal(0);\nconst count = signal(0);\n\neffect(() => {\n  // Update `count` without subscribing to `count` or `delta`:\n  count.value = untracked(() => {\n    return count.value + delta.value\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Preact Component Lifecycle Methods\nDESCRIPTION: Shows implementation of all available lifecycle methods in a Preact component including mounting, updating, and unmounting hooks. Demonstrates the method signatures and timing of each lifecycle hook.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v8/api-reference.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Component } from 'preact';\n\nclass MyComponent extends Component {\n\tshouldComponentUpdate(nextProps, nextState) {}\n\tcomponentWillReceiveProps(nextProps, nextState) {\n\t\tthis.props // Previous props\n\t\tthis.state // Previous state\n\t}\n\tcomponentWillMount() {}\n\tcomponentWillUpdate(nextProps, nextState) {\n\t\tthis.props // Previous props\n\t\tthis.state // Previous state\n\t}\n\tcomponentDidMount() {}\n\tcomponentDidUpdate(prevProps, prevState) {}\n\tcomponentWillUnmount() {\n\t\tthis.props // Current props\n\t\tthis.state // Current state\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Managing State in Preact Function Components with Hooks\nDESCRIPTION: This example shows how to use the 'useState' hook to manage state in a Preact function component. It demonstrates creating a state variable, updating it with a setter function, and using it to conditionally render content.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/tutorial/04-state.md#2025-04-09_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'preact/hooks'\n\nconst MyButton = () => {\n  const [clicked, setClicked] = useState(false)\n\n  const handleClick = () => {\n    setClicked(true)\n  }\n\n  return (\n    <button onClick={handleClick}>\n      {clicked ? 'Clicked' : 'No clicks yet'}\n    </button>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Dependencies in Computed Signals\nDESCRIPTION: Shows how computed signals can have dynamic dependencies that change based on conditions, with the signal only reacting to its current dependencies.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/blog/signal-boosting.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { signal, computed } from \"@preact/signals-core\";\n\nconst choice = signal(true);\nconst funk = signal(\"Uptown\");\nconst purple = signal(\"Haze\");\n\nconst c = computed(() => {\n  if (choice.value) {\n    console.log(funk.value, \"Funk\");\n  } else {\n    console.log(\"Purple\", purple.value);\n  }\n});\nc.value;               // Console: Uptown Funk\n\npurple.value = \"Rain\"; // purple is not a dependency, so\nc.value;               // effect doesn't run\n\nchoice.value = false;\nc.value;               // Console: Purple Rain\n\nfunk.value = \"Da\";     // funk not a dependency anymore, so\nc.value;               // effect doesn't run\n```\n\n----------------------------------------\n\nTITLE: Using Context with useContext Hook in Preact\nDESCRIPTION: Shows how to access context values using the useContext hook instead of the Consumer API. This example splits the functionality into two components with the User component consuming the context provided by the App component.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/tutorial/06-context.md#2025-04-09_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createContext } from 'preact'\nimport { useContext } from 'preact/hooks'\n\nconst Username = createContext()\n\nexport default function App() {\n  return (\n    <Username.Provider value=\"Bob\">\n      <div>\n        <p>\n          <User />\n        </p>\n      </div>\n    </Username.Provider>\n  )\n}\n\nfunction User() {\n  // access the current username from context:\n  const username = useContext(Username) // \"Bob\"\n  return <span>{username}</span>\n}\n```\n\n----------------------------------------\n\nTITLE: Dependency Order Example in Preact Signals\nDESCRIPTION: Demonstrates how signal dependencies can be accessed in different orders based on conditional logic, highlighting the importance of maintaining dependency order in the implementation.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/blog/signal-boosting.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst s1 = signal(0);\nconst s2 = signal(0);\nconst s3 = signal(0);\n\nconst c = computed(() => {\n  if (s1.value) {\n    s2.value;\n    s3.value;\n  } else {\n    s3.value;\n    s2.value;\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Counter Component in Preact JSX\nDESCRIPTION: This snippet demonstrates a simple counter component using Preact hooks. It shows how to manage state with useState and create increment/decrement functionality.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/kr/index.md#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Counter() {\n  const [value, setValue] = useState(0);\n\n  return (\n    <>\n      <div>Counter: {value}</div>\n      <button onClick={() => setValue(value + 1)}>Increment</button>\n      <button onClick={() => setValue(value - 1)}>Decrement</button>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Todo List Management Functions\nDESCRIPTION: Implements functions for adding and removing todos from the list. Includes form handling and state updates using signals.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/src/components/controllers/repl/examples/todo-lists/todo-list-signals.txt#2025-04-09_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction addTodo(e) {\n\te.preventDefault();\n\n\ttodos.value = [...todos.value, { text: newItem.value, completed: false }];\n\tnewItem.value = ''; // Reset input value on add\n}\n\nfunction removeTodo(index) {\n\ttodos.value.splice(index, 1);\n\ttodos.value = [...todos.value];\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Error Boundaries in Preact\nDESCRIPTION: Demonstrates creation of an error boundary component that catches rendering errors and provides fallback content.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/components.md#2025-04-09_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nclass ErrorBoundary extends Component {\n  constructor() {\n    super();\n    this.state = { errored: false };\n  }\n\n  static getDerivedStateFromError(error) {\n    return { errored: true };\n  }\n\n  componentDidCatch(error, errorInfo) {\n    errorReportingService(error, errorInfo);\n  }\n\n  render(props, state) {\n    if (state.errored) {\n      return <p>Something went badly wrong</p>;\n    }\n    return props.children;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disposing Effects in Preact Signals\nDESCRIPTION: Demonstration of how to dispose of an effect and unsubscribe from all signals it was tracking. This is important for preventing memory leaks in applications that use many effects.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/pt-br/guide/v10/signals.md#2025-04-09_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nimport { signal, effect } from \"@preact/signals\";\n\nconst name = signal(\"Jane\");\nconst surname = signal(\"Doe\");\nconst fullName = computed(() => name.value + \" \" + surname.value);\n\nconst dispose = effect(() => console.log(fullName.value));\n// Registra: \"Jane Doe\"\n\n// Destroi o efeito e as inscrições:\ndispose();\n\n// Atualizar `name` não executa o efeito pois ele foi destruído.\n// Também não re-computa `fullName` agora que nada o está observando.\nname.value = \"John\";\n```\n\n----------------------------------------\n\nTITLE: Implementing useContext with TypeScript in Preact\nDESCRIPTION: Demonstrates how to use the useContext hook with TypeScript in Preact. The example shows type inference based on the default value passed to createContext.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/typescript.md#2025-04-09_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\nconst LanguageContext = createContext({ lang: 'en' });\n\nconst Display = () => {\n  // lang will be of type string\n  const { lang } = useContext(LanguageContext);\n  return <>\n    <p>Your selected language: {lang}</p>\n  </>\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Application State as Props in Preact\nDESCRIPTION: Shows how to create and pass application state as props to components. This approach is suitable for smaller applications with a simple component hierarchy.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/signals.md#2025-04-09_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nconst state = createAppState();\n\n// ...later:\n<TodoList state={state} />\n```\n\n----------------------------------------\n\nTITLE: Creating Contexts with createContext in Preact\nDESCRIPTION: This snippet demonstrates how to create new contexts using the createContext function. Each context is initialized with a default value that will be used when no Provider is present above the consumer in the component tree.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/context.md#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createContext } from \"preact\";\n\nexport const Theme = createContext(\"light\");\nexport const User = createContext({ name: \"Guest\" });\nexport const Locale = createContext(null);\n```\n\n----------------------------------------\n\nTITLE: Implementing useEffect Hook in Preact\nDESCRIPTION: Demonstrates the usage of useEffect hook for side-effects in Preact components. It includes examples of updating document title and handling window resize events with cleanup.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/hooks.md#2025-04-09_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nuseEffect(() => {\n  // Trigger your effect\n  return () => {\n    // Optional: Any cleanup code\n  };\n}, []);\n```\n\nLANGUAGE: jsx\nCODE:\n```\nfunction PageTitle(props) {\n  useEffect(() => {\n    document.title = props.title;\n  }, [props.title]);\n\n  return <h1>{props.title}</h1>;\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useEffect } from 'preact/hooks';\nimport { render } from 'preact';\n\n// Component that will always display the current window width\nfunction WindowWidth(props) {\n  const [width, setWidth] = useState(0);\n\n  function onResize() {\n    setWidth(window.innerWidth);\n  }\n\n  useEffect(() => {\n    window.addEventListener('resize', onResize);\n    return () => window.removeEventListener('resize', onResize);\n  }, []);\n\n  return <p>Window width: {width}</p>;\n}\n\nrender(<WindowWidth />, document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Using Hooks in Preact X\nDESCRIPTION: Example of using useState and useCallback hooks for state management and memoized callbacks in a functional component.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/whats-new.md#2025-04-09_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Counter() {\n  const [value, setValue] = useState(0);\n  const increment = useCallback(() => setValue(value + 1), [value]);\n\n  return (\n    <div>\n      Counter: {value}\n      <button onClick={increment}>Increment</button>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using useEffect with Refs in Preact\nDESCRIPTION: Demonstrates how to use useEffect() hook to focus an input element after the component is rendered. The empty dependency array ensures the effect runs only once after the initial render.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/tutorial/07-side-effects.md#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useRef, useEffect } from 'preact/hooks';\n\nexport default function App() {\n  const input = useRef()\n\n  // the callback here will run after <App> is rendered:\n  useEffect(() => {\n    // access the associated DOM element:\n    input.current.focus()\n  }, [])\n\n  return <input ref={input} />\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up a Context Provider in Preact\nDESCRIPTION: This snippet shows how to make a context available to descendant components using the Provider component. The Provider must be given a value prop which will be passed to consuming components.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/context.md#2025-04-09_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createContext } from \"preact\";\n\nexport const Theme = createContext(\"light\");\n\nfunction App() {\n  return (\n    <Theme.Provider value=\"dark\">\n      <SomeComponent />\n    </Theme.Provider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Ideal Direct State Access (Non-functional Example)\nDESCRIPTION: An example showing the intuitive but non-functional approach to state management, which Preact Signals aims to make possible.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/es/blog/introducing-signals.md#2025-04-09_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// Imagina que este es un estado global y toda la aplicación necesita acceso a:\nlet count = 0;\n \nfunction Counter() {\n return (\n   <button onClick={() => count++}>\n     value: {count}\n   </button>\n );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing useReducer in Preact for Complex State Logic\nDESCRIPTION: This example shows how to use the useReducer hook to manage more complex state logic. It implements a counter with increment, decrement, and reset actions, demonstrating a Redux-like pattern for state management in components.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/hooks.md#2025-04-09_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useReducer } from 'preact/hooks';\n\nconst initialState = 0;\nconst reducer = (state, action) => {\n  switch (action) {\n    case 'increment': return state + 1;\n    case 'decrement': return state - 1;\n    case 'reset': return 0;\n    default: throw new Error('Unexpected action');\n  }\n};\n\nfunction Counter() {\n  // Returns the current state and a dispatch function to\n  // trigger an action\n  const [count, dispatch] = useReducer(reducer, initialState);\n  return (\n    <div>\n      {count}\n      <button onClick={() => dispatch('increment')}>+1</button>\n      <button onClick={() => dispatch('decrement')}>-1</button>\n      <button onClick={() => dispatch('reset')}>reset</button>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Form with Multiple Inputs in Preact\nDESCRIPTION: This snippet shows how to create a form with multiple inputs in Preact. It demonstrates handling form submission, using FormData to collect input values, and updating state with the submitted data.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/forms.md#2025-04-09_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nclass FullNameForm extends Component {\n  state = { fullName: '' };\n\n  onSubmit = e => {\n    e.preventDefault();\n    const formData = new FormData(e.currentTarget);\n    this.setState({\n      fullName: formData.get(\"firstName\") + \" \" + formData.get(\"lastName\")\n    });\n    e.currentTarget.reset(); // Clear the inputs to prepare for the next submission\n  }\n\n  render(_, { fullName }) {\n    return (\n      <div class=\"form-example\">\n        <form onSubmit={this.onSubmit}>\n          <label>\n            First Name:{' '}\n            <input name=\"firstName\" />\n          </label>\n          <label>\n            Last Name:{' '}\n            <input name=\"lastName\" />\n          </label>\n          <button>Submit</button>\n        </form>\n        {fullName && <p>Hello {fullName}</p>}\n      </div>\n    );\n  }\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nfunction FullNameForm() {\n  const [fullName, setFullName] = useState(\"\");\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n    const formData = new FormData(e.currentTarget);\n    setFullName(formData.get(\"firstName\") + \" \" + formData.get(\"lastName\"));\n    e.currentTarget.reset(); // Clear the inputs to prepare for the next submission\n  };\n\n  return (\n    <div class=\"form-example\">\n      <form onSubmit={onSubmit}>\n        <label>\n          First Name:{' '}\n          <input name=\"firstName\" />\n        </label>\n        <label>\n          Last Name:{' '}\n          <input name=\"lastName\" />\n        </label>\n        <button>Submit</button>\n      </form>\n      {fullName && <p>Hello {fullName}</p>}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Counter with Hooks in Preact\nDESCRIPTION: This example shows how to create the same counter functionality using hooks in a function component. It uses useState for state management and useCallback to handle button clicks, demonstrating the hooks-based approach.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/hooks.md#2025-04-09_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Counter() {\n  const [value, setValue] = useState(0);\n  const increment = useCallback(() => {\n    setValue(value + 1);\n  }, [value]);\n\n  return (\n    <div>\n      <p>Counter: {value}</p>\n      <button onClick={increment}>Increment</button>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Todo List Component Implementation\nDESCRIPTION: Complete todo list UI implementation using signals for state management.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/signals.md#2025-04-09_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nfunction TodoList() {\n  const onInput = event => (text.value = event.currentTarget.value);\n\n  return (\n    <>\n      <input value={text.value} onInput={onInput} />\n      <button onClick={addTodo}>Add</button>\n      <ul>\n        {todos.value.map(todo => (\n          <li>\n            {todo.text}{' '}\n            <button onClick={() => removeTodo(todo)}>❌</button>\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Counter Context and Components with Preact\nDESCRIPTION: Creates a counter application where multiple Counter components share state through Context API. Uses hooks for state management and memoization to optimize performance. The implementation includes a context provider, a Counter component that consumes the context, and an App component that manages the shared state.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/src/components/controllers/repl/examples/context.txt#2025-04-09_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { render, createContext } from 'preact';\nimport { useState, useMemo, useContext } from 'preact/hooks';\n\nconst CounterContext = createContext(null);\n\nfunction Counter() {\n\tconst { count, increment } = useContext(CounterContext);\n\n\treturn (\n\t\t<div style={{ background: '#eee', padding: '10px' }}>\n\t\t\t<p>Count: {count}</p>\n\t\t\t<button onClick={increment}>Add</button>\n\t\t</div>\n\t);\n}\n\nfunction App() {\n\tconst [count, setCount] = useState(0);\n\n\tfunction increment() {\n\t\tsetCount(count + 1);\n\t}\n\n\tconst counter = useMemo(() => ({ count, increment }), [count]);\n\n\treturn (\n\t\t<CounterContext.Provider value={counter}>\n\t\t\t<div style={{ display: 'flex', gap: '20px' }}>\n\t\t\t\t<Counter />\n\t\t\t\t<Counter />\n\t\t\t\t<Counter />\n\t\t\t</div>\n\t\t</CounterContext.Provider>\n\t);\n}\n\nrender(<App />, document.getElementById('app'));\n```\n\n----------------------------------------\n\nTITLE: Storing and Managing Local Values with Refs in Preact\nDESCRIPTION: Demonstrates using refs to store and manage local values like interval IDs in both class and function components. This example shows a simple clock that can be started and stopped by managing an interval ID with refs.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/refs.md#2025-04-09_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n// --repl\nimport { render, Component, createRef } from \"preact\";\n// --repl-before\nclass SimpleClock extends Component {\n  state = {\n    time: Date.now(),\n  };\n  intervalId = createRef(null);\n\n  startClock = () => {\n    this.setState({ time: Date.now() });\n    this.intervalId.current = setInterval(() => {\n      this.setState({ time: Date.now() });\n    }, 1000);\n  };\n\n  stopClock = () => {\n    clearInterval(this.intervalId.current);\n  };\n\n\n  render(_, { time }) {\n    const formattedTime = new Date(time).toLocaleTimeString();\n\n    return (\n      <div>\n        <button onClick={this.startClock}>Start Clock</button>\n        <time dateTime={formattedTime}>{formattedTime}</time>\n        <button onClick={this.stopClock}>Stop Clock</button>\n      </div>\n    );\n  }\n}\n// --repl-after\nrender(<SimpleClock />, document.getElementById(\"app\"));\n```\n\nLANGUAGE: jsx\nCODE:\n```\n// --repl\nimport { render } from \"preact\";\nimport { useState, useRef } from \"preact/hooks\";\n// --repl-before\nfunction SimpleClock() {\n  const [time, setTime] = useState(Date.now());\n  const intervalId = useRef(null);\n\n  const startClock = () => {\n    setTime(Date.now());\n    intervalId.current = setInterval(() => {\n      setTime(Date.now());\n    }, 1000);\n  };\n\n  const stopClock = () => {\n    clearInterval(intervalId.current);\n  };\n\n  const formattedTime = new Date(time).toLocaleTimeString();\n\n  return (\n    <div>\n      <button onClick={startClock}>Start Clock</button>\n      <time dateTime={formattedTime}>{formattedTime}</time>\n      <button onClick={stopClock}>Stop Clock</button>\n    </div>\n  );\n}\n// --repl-after\nrender(<SimpleClock />, document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Importing and Extending Preact Component Class\nDESCRIPTION: Shows how to import and extend the base Component class to create stateful Preact components.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/api-reference.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Component } from 'preact';\n\nclass MyComponent extends Component {\n  // (see below)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Counter Component with Preact Signals\nDESCRIPTION: Creates a counter component using Preact Signals for state management. The component includes increment and decrement buttons along with a readonly input display. Uses the signal() function to create reactive state that automatically updates the UI when changed.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/src/components/controllers/repl/examples/counters/counter-signals.txt#2025-04-09_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { render } from 'preact';\nimport { signal } from '@preact/signals';\n\nconst count = signal(0);\n\nfunction Counter() {\n\treturn (\n\t\t<div class=\"counter-container\">\n\t\t\t<button onClick={() => count.value++}>Increment</button>\n\t\t\t<input readonly value={count} />\n\t\t\t<button onClick={() => count.value--}>Decrement</button>\n\t\t</div>\n\t);\n}\n\nrender(<Counter />, document.getElementById('app'));\n```\n\n----------------------------------------\n\nTITLE: Creating References in Preact Class and Function Components\nDESCRIPTION: Examples of creating refs in Preact using both createRef for class components and useRef for function components. Both methods create stable objects with a current property that can be optionally initialized with a value.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/refs.md#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createRef } from \"preact\";\n\nclass MyComponent extends Component {\n  countRef = createRef();\n  inputRef = createRef(null);\n\n  // ...\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useRef } from \"preact/hooks\";\n\nfunction MyComponent() {\n  const countRef = useRef();\n  const inputRef = useRef(null);\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using useContext Hook in Preact\nDESCRIPTION: Shows how to use the useContext hook to access context in a functional component without higher-order or wrapper components. It creates a Theme context and uses it in a child component.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/hooks.md#2025-04-09_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { render, createContext } from 'preact';\nimport { useContext } from 'preact/hooks';\n\nconst OtherComponent = props => props.children;\n\nconst Theme = createContext('light');\n\nfunction DisplayTheme() {\n  const theme = useContext(Theme);\n  return <p>Active theme: {theme}</p>;\n}\n\n// ...later\nfunction App() {\n  return (\n    <Theme.Provider value=\"light\">\n      <OtherComponent>\n        <DisplayTheme />\n      </OtherComponent>\n    </Theme.Provider>\n  )\n}\n\nrender(<App />, document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Using useReducer in a Counter Component with TypeScript\nDESCRIPTION: Shows how to use the useReducer hook in a Preact component with TypeScript. The example demonstrates type inference for state and dispatch function.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/typescript.md#2025-04-09_snippet_23\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Counter({ initialCount = 0 }) {\n  // TypeScript makes sure reducer has maximum two arguments, and that\n  // the initial state is of type Statetype.\n  // Furthermore:\n  // - state is of type StateType\n  // - dispatch is a function to dispatch ActionType\n  const [state, dispatch] = useReducer(reducer, { count: initialCount });\n\n  return (\n    <>\n      Count: {state.count}\n      {/* TypeScript ensures that the dispatched actions are of ActionType */}\n      <button onClick={() => dispatch({ type: \"reset\" })}>Reset</button>\n      <button onClick={() => dispatch({ type: \"increment\" })}>+</button>\n      <button onClick={() => dispatch({ type: \"decrement\" })}>-</button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Context Values Dynamically in Preact\nDESCRIPTION: This example shows how to update context values dynamically using component state. It creates a context with both a value and an updater function, allowing consumers to both read and modify the context value.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/context.md#2025-04-09_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n// --repl\nimport { render, createContext } from \"preact\";\nimport { useContext, useState } from \"preact/hooks\";\n\nconst SomeComponent = props => props.children;\n// --repl-before\nconst ThemePrimary = createContext(null);\n\nfunction ThemedButton() {\n  const { theme } = useContext(ThemePrimary);\n  return <button style={{ background: theme }}>Themed Button</button>;\n}\n\nfunction ThemePicker() {\n  const { theme, setTheme } = useContext(ThemePrimary);\n  return (\n    <input\n      type=\"color\"\n      value={theme}\n      onChange={e => setTheme(e.currentTarget.value)}\n    />\n  );\n}\n\nfunction App() {\n  const [theme, setTheme] = useState(\"#673ab8\");\n  return (\n    <ThemePrimary.Provider value={{ theme, setTheme }}>\n      <SomeComponent>\n        <ThemedButton />\n        {\" - \"}\n        <ThemePicker />\n      </SomeComponent>\n    </ThemePrimary.Provider>\n  );\n}\n// --repl-after\nrender(<App />, document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Implementing a Counter Component with Preact\nDESCRIPTION: This snippet defines a Counter component using Preact and the useState hook. It includes buttons to increment and decrement the count, and an input field to display the current count. The component is then rendered to the DOM.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/src/components/controllers/repl/examples/counters/counter-hooks.txt#2025-04-09_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { render } from 'preact';\nimport { useState } from 'preact/hooks';\n\nfunction Counter() {\n\tconst [count, setCount] = useState(0);\n\n\treturn (\n\t\t<div class=\"counter-container\">\n\t\t\t<button onClick={() => setCount(count + 1)}>Increment</button>\n\t\t\t<input readonly value={count} />\n\t\t\t<button onClick={() => setCount(count - 1)}>Decrement</button>\n\t\t</div>\n\t);\n}\n\nrender(<Counter />, document.getElementById('app'));\n```\n\n----------------------------------------\n\nTITLE: Optimizing Rendering with Signals in Preact JSX\nDESCRIPTION: Demonstrates how to optimize rendering by passing signals directly into JSX text positions. The optimized version avoids re-rendering the component when signal values change by passing the signal directly instead of accessing its .value property.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/signals.md#2025-04-09_snippet_20\n\nLANGUAGE: jsx\nCODE:\n```\nconst count = signal(0);\n\nfunction Unoptimized() {\n  // Re-renders the component when `count` changes:\n  return <p>{count.value}</p>;\n}\n\nfunction Optimized() {\n  // Text automatically updates without re-rendering the component:\n  return <p>{count}</p>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing State in Preact Class Components\nDESCRIPTION: This snippet demonstrates how to implement and manage state in a Preact class component. It uses the 'state' property to store data and the 'setState()' method to update it, triggering a re-render of the component.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/tutorial/04-state.md#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nclass MyButton extends Component {\n  state = { clicked: false }\n\n  handleClick = () => {\n    this.setState({ clicked: true })\n  }\n\n  render() {\n    return (\n      <button onClick={this.handleClick}>\n        {this.state.clicked ? 'Clicked' : 'No clicks yet'}\n      </button>\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Counter in Preact with Hooks\nDESCRIPTION: This code snippet demonstrates how to create a counter component in Preact using the 'useState' hook. It shows how to initialize state, update it on button click, and render the current count.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/tutorial/04-state.md#2025-04-09_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { render } from 'preact';\nimport { useState } from 'preact/hooks';\n\nfunction MyButton(props) {\n  return <button style={props.style} onClick={props.onClick}>{props.children}</button>\n}\n\nfunction App() {\n  const [count, setCount] = useState(0)\n\n  const clicked = () => {\n    setCount(count + 1)\n  }\n\n  return (\n    <div>\n      <p class=\"count\">Count: {count}</p>\n      <MyButton style={{ color: 'purple' }} onClick={clicked}>Click me</MyButton>\n    </div>\n  )\n}\n\nrender(<App />, document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Implementing Counter Component with useState in TypeScript\nDESCRIPTION: Demonstrates how to use useState hook with TypeScript in a Preact component. The example shows type inference for state and setter function based on initial value.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/typescript.md#2025-04-09_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\nconst Counter = ({ initial = 0 }) => {\n  // since initial is a number (default value!), clicks is a number\n  // setClicks is a function that accepts \n  // - a number \n  // - a function returning a number\n  const [clicks, setClicks] = useState(initial);\n  return (\n    <>\n      <p>Clicks: {clicks}</p>\n      <button onClick={() => setClicks(clicks + 1)}>+</button>\n      <button onClick={() => setClicks(clicks - 1)}>-</button>\n    </>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Text Input in Preact\nDESCRIPTION: This snippet demonstrates how to create a simple text input field that updates a state value as the user types. It uses the onInput event to listen for changes and update the state per-keystroke. The state value is then rendered in a paragraph element.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/forms.md#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nclass BasicInput extends Component {\n  state = { name: '' };\n\n  onInput = e => this.setState({ name: e.currentTarget.value });\n\n  render(_, { name }) {\n    return (\n      <div class=\"form-example\">\n        <label>\n          Name:{' '}\n          <input onInput={this.onInput} />\n        </label>\n        <p>Hello {name}</p>\n      </div>\n    );\n  }\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nfunction BasicInput() {\n  const [name, setName] = useState('');\n\n  return (\n    <div class=\"form-example\">\n      <label>\n        Name:{' '}\n        <input onInput={(e) => setName(e.currentTarget.value)} />\n      </label>\n      <p>Hello {name}</p>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Preact Component\nDESCRIPTION: Introduces the concept of components in Preact by creating a simple functional component and rendering it.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/tutorial/01-vdom.md#2025-04-09_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createElement } from 'preact';\n\nexport default function App() {\n\treturn (\n\t\t<p class=\"big\">Hello World!</p>\n\t)\n}\n\nrender(<App />, document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Class Component Implementation\nDESCRIPTION: Shows how to create a class component by extending Preact's Component class with lifecycle methods.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/tutorial/03-components.md#2025-04-09_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Component } from 'preact';\n\nclass MyButton extends Component {\n  componentDidMount() {\n    console.log('Hello from a new <MyButton> component!')\n  }\n  componentDidUpdate() {\n    console.log('A <MyButton> component was updated!')\n  }\n  render(props) {\n    return <button class=\"my-button\">{props.children}</button>\n  }\n}\n\nrender(<MyButton>Click Me!</MyButton>, document.body)\n// logs: \"Hello from a new <MyButton> component!\"\n\nrender(<MyButton>Click Me!</MyButton>, document.body)\n// logs: \"A <MyButton> component was updated!\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Web Component from Preact Component\nDESCRIPTION: Shows how to create a web component from a Preact component using the preact-custom-element library. The example demonstrates registering a simple Greeting component as a custom element.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/web-components.md#2025-04-09_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport register from 'preact-custom-element';\n\nconst Greeting = ({ name = 'World' }) => (\n  <p>Hello, {name}!</p>\n);\n\nregister(Greeting, 'x-greeting', ['name'], { shadow: false });\n```\n\n----------------------------------------\n\nTITLE: Implementing Class Components with Lifecycle Methods in Preact\nDESCRIPTION: Shows implementation of a clock component using class-based syntax with state management and lifecycle methods componentDidMount and componentWillUnmount.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/components.md#2025-04-09_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nclass Clock extends Component {\n\n  constructor() {\n    super();\n    this.state = { time: Date.now() };\n  }\n\n  // Lifecycle: Called whenever our component is created\n  componentDidMount() {\n    // update time every second\n    this.timer = setInterval(() => {\n      this.setState({ time: Date.now() });\n    }, 1000);\n  }\n\n  // Lifecycle: Called just before our component will be destroyed\n  componentWillUnmount() {\n    // stop when not renderable\n    clearInterval(this.timer);\n  }\n\n  render() {\n    let time = new Date(this.state.time).toLocaleTimeString();\n    return <span>{time}</span>;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Error Handling with componentDidCatch\nDESCRIPTION: Shows implementation of error boundary component using componentDidCatch lifecycle method to handle errors in component tree.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/whats-new.md#2025-04-09_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nclass Catcher extends Component {\n  state = { errored: false }\n\n  componentDidCatch(error) {\n    this.setState({ errored: true });\n  }\n\n  render(props, state) {\n    if (state.errored) {\n      return <p>Something went badly wrong</p>;\n    }\n    return props.children;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Controlled and Uncontrolled Components in Preact\nDESCRIPTION: This snippet shows the difference between controlled and uncontrolled components in Preact. It illustrates how Preact manages the input value in controlled components, contrasting it with uncontrolled components where Preact doesn't set the value.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/zh/guide/v10/forms.md#2025-04-09_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n// 非受控组件，因为 Preact 没有为其设置数值\n<input onInput={myEventHandler} />;\n\n// 受控组件，因为 Preact 管理其输入数值\n<input value={someValue} onInput={myEventHandler} />;\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Function Component in JSX\nDESCRIPTION: Demonstrates how to create a simple MyButton function component that renders a button element with custom text passed through props.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/tutorial/03-components.md#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nfunction MyButton(props) {\n  return <button class=\"my-button\">{props.text}</button>\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Checkbox and Radio Buttons in Preact\nDESCRIPTION: This snippet shows how to implement checkbox and radio button inputs in Preact. It demonstrates state management for allowing contact and selecting a contact method, with radio buttons being disabled when contact is not allowed.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/forms.md#2025-04-09_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nclass BasicRadioButton extends Component {\n  state = {\n    allowContact: false,\n    contactMethod: ''\n  };\n\n  toggleContact = () => this.setState({ allowContact: !this.state.allowContact });\n  setRadioValue = e => this.setState({ contactMethod: e.currentTarget.value });\n\n  render(_, { allowContact }) {\n    return (\n      <div class=\"form-example\">\n        <label>\n          Allow contact:{' '}\n          <input type=\"checkbox\" onClick={this.toggleContact} />\n        </label>\n        <label>\n          Phone:{' '}\n          <input type=\"radio\" name=\"contact\" value=\"phone\" onClick={this.setRadioValue} disabled={!allowContact} />\n        </label>\n        <label>\n          Email:{' '}\n          <input type=\"radio\" name=\"contact\" value=\"email\" onClick={this.setRadioValue} disabled={!allowContact} />\n        </label>\n        <label>\n          Mail:{' '}\n          <input type=\"radio\" name=\"contact\" value=\"mail\" onClick={this.setRadioValue} disabled={!allowContact} />\n        </label>\n        <p>\n          You {allowContact ? 'have allowed' : 'have not allowed'} contact {allowContact && ` via ${this.state.contactMethod}`}\n        </p>\n      </div>\n    );\n  }\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nfunction BasicRadioButton() {\n  const [allowContact, setAllowContact] = useState(false);\n  const [contactMethod, setContactMethod] = useState('');\n\n  const toggleContact = () => setAllowContact(!allowContact);\n  const setRadioValue = (e) => setContactMethod(e.currentTarget.value);\n\n  return (\n    <div class=\"form-example\">\n      <label>\n        Allow contact:{' '}\n        <input type=\"checkbox\" onClick={toggleContact} />\n      </label>\n      <label>\n        Phone:{' '}\n        <input type=\"radio\" name=\"contact\" value=\"phone\" onClick={setRadioValue} disabled={!allowContact} />\n      </label>\n      <label>\n        Email:{' '}\n        <input type=\"radio\" name=\"contact\" value=\"email\" onClick={setRadioValue} disabled={!allowContact} />\n      </label>\n      <label>\n        Mail:{' '}\n        <input type=\"radio\" name=\"contact\" value=\"mail\" onClick={setRadioValue} disabled={!allowContact} />\n      </label>\n      <p>\n        You {allowContact ? 'have allowed' : 'have not allowed'} contact {allowContact && ` via ${contactMethod}`}\n      </p>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Local Component State with Signal Hooks in Preact\nDESCRIPTION: Shows how to use the useSignal and useComputed hooks to create component-specific state. This approach is ideal for state that is only relevant to a specific component.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/signals.md#2025-04-09_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useSignal, useComputed } from \"@preact/signals\";\n\nfunction Counter() {\n  const count = useSignal(0);\n  const double = useComputed(() => count.value * 2);\n\n  return (\n    <div>\n      <p>{count} x 2 = {double}</p>\n      <button onClick={() => count.value++}>click me</button>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Todo List Component in Preact JSX\nDESCRIPTION: A Todo List implementation using Preact class components. It maintains state for todos and current text input, with methods to update text and add new todo items to the list.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/index.md#2025-04-09_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport default class TodoList extends Component {\n    state = { todos: [], text: '' };\n    setText = e => {\n        this.setState({ text: e.currentTarget.value });\n    };\n    addTodo = () => {\n        let { todos, text } = this.state;\n        todos = todos.concat({ text });\n        this.setState({ todos, text: '' });\n    };\n    render({ }, { todos, text }) {\n        return (\n            <form onSubmit={this.addTodo} action=\"javascript:\">\n                <label>\n                  <span>Add Todo</span>\n                  <input value={text} onInput={this.setText} />\n                </label>\n                <button type=\"submit\">Add</button>\n                <ul>\n                    { todos.map( todo => (\n                        <li>{todo.text}</li>\n                    )) }\n                </ul>\n            </form>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Select Menu in Preact\nDESCRIPTION: This snippet shows how to implement a select menu in Preact. It demonstrates handling the onChange event for the select element and submitting the selected value.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/zh/guide/v10/forms.md#2025-04-09_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\nclass MySelect extends Component {\n  state = { value: '' };\n\n  onChange = e => {\n    this.setState({ value: e.currentTarget.value });\n  }\n\n  onSubmit = e => {\n    alert(\"Submitted \" + this.state.value);\n    e.preventDefault();\n  }\n\n  render(_, { value }) {\n    return (\n      <form onSubmit={this.onSubmit}>\n        <select value={value} onChange={this.onChange}>\n          <option value=\"A\">A</option>\n          <option value=\"B\">B</option>\n          <option value=\"C\">C</option>\n        </select>\n        <button type=\"submit\">提交</button>\n      </form>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Refs in Function Components with Hooks\nDESCRIPTION: Demonstrates using refs in function components with the useRef and useEffect hooks to manage DOM element references and focus control.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/tutorial/05-refs.md#2025-04-09_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useRef, useEffect } from 'preact/hooks';\n\nexport default function App() {\n  // create or retrieve our ref:  (hook slot 0)\n  const input = useRef()\n\n  // the callback here will run after <App> is rendered:\n  useEffect(() => {\n    // access the associated DOM element:\n    input.current.focus()\n  }, [])\n\n  return <input ref={input} />\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Todo List Component in Preact JSX\nDESCRIPTION: This code snippet shows how to create a Todo List component in Preact. It demonstrates state management, event handling, and rendering a list of items.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/kr/index.md#2025-04-09_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport default class TodoList extends Component {\n    state = { todos: [], text: '' };\n    setText = e => {\n        this.setState({ text: e.currentTarget.value });\n    };\n    addTodo = () => {\n        let { todos, text } = this.state;\n        todos = todos.concat({ text });\n        this.setState({ todos, text: '' });\n    };\n    render({ }, { todos, text }) {\n        return (\n            <form onSubmit={this.addTodo} action=\"javascript:\">\n                <label>\n                  <span>Add Todo</span>\n                  <input value={text} onInput={this.setText} />\n                </label>\n                <button type=\"submit\">Add</button>\n                <ul>\n                    { todos.map( todo => (\n                        <li>{todo.text}</li>\n                    )) }\n                </ul>\n            </form>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Typing Function Components in Preact with TypeScript\nDESCRIPTION: Example of creating typed function components in Preact using TypeScript interfaces to define props structure.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/typescript.md#2025-04-09_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\ninterface MyComponentProps {\n  name: string;\n  age: number;\n};\n\nfunction MyComponent({ name, age }: MyComponentProps) {\n  return (\n    <div>\n      My name is {name}, I am {age.toString()} years old.\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Event Bubbling Issue in Preact X\nDESCRIPTION: Illustrates a scenario where event bubbling could cause unintended behavior in Preact X prior to version 10.20.2. This example shows how clicking a button to toggle state could immediately trigger the opposite state due to event propagation and the timing of state updates.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/blog/preact-x.md#2025-04-09_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst App = () => {\n  const [toggled, setToggled] = useState(false);\n\n  return toggled ? (\n    <div onClick={() => setToggled(false)>\n      <span>clear</span>\n    </div> \n  ) : (\n    <div>\n      <button\n        onClick={() => setToggled(true)}\n      >toggle on</button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Counter Component with Preact and HTM\nDESCRIPTION: This snippet defines a Counter component using Preact hooks for state management and HTM for templating. It renders buttons to increment and decrement a counter value, displaying the current count in a read-only input field.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/src/components/controllers/repl/examples/counters/counter-htm.txt#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { render } from 'preact';\nimport { useState } from 'preact/hooks';\nimport { html } from 'htm/preact';\n\nexport function Counter() {\n\tconst [count, setCount] = useState(0);\n\n\treturn html`\n\t\t<div class=\"counter-container\">\n\t\t\t<button onClick=${() => setCount(count + 1)}>Increment</button>\n\t\t\t<input readonly value=${count} />\n\t\t\t<button onClick=${() => setCount(count - 1)}>Decrement</button>\n\t\t</div>\n\t`;\n}\n\nrender(<Counter />, document.getElementById('app'));\n```\n\n----------------------------------------\n\nTITLE: Handling Internationalization in Preact Tests\nDESCRIPTION: Approaching text content as data that can be snapshotted, making it easier to update when text changes or when using internationalization frameworks.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/preact-testing-library.md#2025-04-09_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\ntest('should be able to sign in', async () => {\n  render(<MyLoginForm />);\n\n  // We can use our translation function directly in the test\n  const label = translate('signinpage.label', 'en-US');\n  // Snapshot the result so we know what's going on\n  expect(label).toMatchInlineSnapshot(`Sign In`);\n\n  const field = await screen.findByRole('textbox', { name: label });\n  fireEvent.change(field, { value: 'user123' });\n})\n```\n\n----------------------------------------\n\nTITLE: Using useEffect with TypeScript in Preact\nDESCRIPTION: Shows how to use the useEffect hook with TypeScript, including proper typing for cleanup functions. The example demonstrates adding and removing an event listener.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/typescript.md#2025-04-09_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nuseEffect(() => {\n  const handler = () => {\n    document.title = window.innerWidth.toString();\n  };\n  window.addEventListener(\"resize\", handler);\n\n  // ✅  if you return something from the effect callback\n  // it HAS to be a function without arguments\n  return () => {\n    window.removeEventListener(\"resize\", handler);\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Select Dropdown in Preact\nDESCRIPTION: This snippet demonstrates how to create a select dropdown in Preact. It shows how to handle the onChange event to update the state with the selected value and display it.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/forms.md#2025-04-09_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nclass MySelect extends Component {\n  state = { value: '' };\n\n  onChange = e => {\n    this.setState({ value: e.currentTarget.value });\n  }\n\n  render(_, { value }) {\n    return (\n      <div class=\"form-example\">\n        <select onChange={this.onChange}>\n          <option value=\"A\">A</option>\n          <option value=\"B\">B</option>\n          <option value=\"C\">C</option>\n        </select>\n        <p>You selected: {value}</p>\n      </div>\n    );\n  }\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\nfunction MySelect() {\n  const [value, setValue] = useState('');\n\n  return (\n    <div class=\"form-example\">\n      <select onChange={(e) => setValue(e.currentTarget.value)}>\n        <option value=\"A\">A</option>\n        <option value=\"B\">B</option>\n        <option value=\"C\">C</option>\n      </select>\n      <p>You selected: {value}</p>\n    </form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Optimizing Signal Usage in JSX for Preact\nDESCRIPTION: This snippet shows advanced usage of signals in Preact, demonstrating how signals can be passed directly into JSX for more efficient rendering, bypassing the Virtual DOM for text updates and working with DOM properties.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/blog/introducing-signals.md#2025-04-09_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nconst count = signal(0);\n \n// Instead of this:\n<p>Value: {count.value}</p>\n \n// … we can pass the signal directly into JSX:\n<p>Value: {count}</p>\n \n// … or even passing them as DOM properties:\n<input value={count} onInput={...} />\n```\n\n----------------------------------------\n\nTITLE: Type Checking Context Values in Preact\nDESCRIPTION: Demonstrating TypeScript's type checking for context provider values, enforcing that all required properties are provided.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/typescript.md#2025-04-09_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nfunction App() {\n  // This one errors 💥 as we haven't defined theme\n  return (\n    <AppContext.Provider\n      value={{\n//    ~~~~~ \n// 💥 Error: theme not defined\n        lang: \"de\",\n        authenticated: true\n      }}\n    >\n    {}\n      <ComponentThatUsesAppContext />\n    </AppContext.Provider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Final Synchronized Counter Implementation\nDESCRIPTION: Complete implementation of synchronized counter using Preact Context and hooks, demonstrating proper state sharing between components.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/tutorial/06-context.md#2025-04-09_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport { render, createContext } from 'preact';\nimport { useState, useContext, useMemo } from 'preact/hooks';\n\nconst CounterContext = createContext(null);\n\nfunction Counter() {\n  const { count, increment } = useContext(CounterContext);\n\n  return (\n    <div style={{ background: '#eee', padding: '10px' }}>\n      <p>Count: {count}</p>\n      <button onClick={increment}>Add</button>\n    </div>\n  );\n}\n\nfunction App() {\n  const [count, setCount] = useState(0);\n\n  function increment() {\n    setCount(count + 1);\n  }\n\n  const counter = useMemo(() => {\n    return { count, increment };\n  }, [count]);\n\n  return (\n    <CounterContext.Provider value={counter}>\n      <div style={{ display: 'flex', gap: '20px' }}>\n        <Counter />\n        <Counter />\n        <Counter />\n      </div>\n    </CounterContext.Provider>\n  )\n}\n\nrender(<App />, document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Typing Context with Type Inference in Preact\nDESCRIPTION: Using TypeScript's type inference with createContext to automatically detect and enforce the context value structure.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/typescript.md#2025-04-09_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nimport { h, createContext } from \"preact\";\n\nconst AppContext = createContext({\n  authenticated: true,\n  lang: \"en\",\n  theme: \"dark\"\n});\n// AppContext is of type preact.Context<{\n//   authenticated: boolean;\n//   lang: string;\n//   theme: string;\n// }>\n```\n\n----------------------------------------\n\nTITLE: Extending IntrinsicElements for Custom JSX Elements\nDESCRIPTION: Demonstrates how to extend the IntrinsicElements interface to add support for custom JSX elements in TypeScript. The example shows how to add a 'loading-bar' element.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/typescript.md#2025-04-09_snippet_24\n\nLANGUAGE: tsx\nCODE:\n```\n// global.d.ts\n\ndeclare global {\n  namespace preact.JSX {\n    interface IntrinsicElements {\n      'loading-bar': { showing: boolean };\n    }\n  }\n}\n\n// This empty export is important! It tells TS to treat this as a module\nexport {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel for Preact with TypeScript\nDESCRIPTION: Babel configuration that works with TypeScript and Preact, including the necessary presets and plugins for JSX transformation.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/typescript.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  presets: [\n    \"@babel/env\",\n    [\"@babel/typescript\", { jsxPragma: \"h\" }],\n  ],\n  plugins: [\n    [\"@babel/transform-react-jsx\", { pragma: \"h\" }]\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Custom Web Component in Preact JSX\nDESCRIPTION: Demonstrates how to define and render a custom web component in Preact. The example shows defining a custom element 'x-foo' and then using it in a Preact functional component.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/web-components.md#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\ncustomElements.define('x-foo', class extends HTMLElement {\n  // ...\n});\n\nfunction Foo() {\n  return <x-foo />;\n}\n```\n\n----------------------------------------\n\nTITLE: Todo List Component Implementation\nDESCRIPTION: Renders the todo list UI component with input field, todo items, checkboxes, and remove buttons. Handles user interactions and displays completion status.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/src/components/controllers/repl/examples/todo-lists/todo-list-signals.txt#2025-04-09_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\nfunction TodoList() {\n\tconst onInput = event => (newItem.value = event.target.value);\n\n\treturn (\n\t\t<form onSubmit={addTodo}>\n\t\t\t<input type=\"text\" value={newItem.value} onInput={onInput} />\n\t\t\t<button onClick={addTodo}>Add</button>\n\t\t\t<ul>\n\t\t\t\t{todos.value.map((todo, index) => (\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<label>\n\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\t\t\tchecked={todo.completed}\n\t\t\t\t\t\t\t\tonInput={() => {\n\t\t\t\t\t\t\t\t\ttodo.completed = !todo.completed;\n\t\t\t\t\t\t\t\t\ttodos.value = [...todos.value];\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t{todo.completed ? <s>{todo.text}</s> : todo.text}\n\t\t\t\t\t\t</label>{' '}\n\t\t\t\t\t\t<button type=\"button\" onClick={() => removeTodo(index)}>❌</button>\n\t\t\t\t\t</li>\n\t\t\t\t))}\n\t\t\t</ul>\n\t\t\t<p>Completed count: {completedCount.value}</p>\n\t\t</form>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Compiler Options for Preact\nDESCRIPTION: This JSON snippet shows the recommended TypeScript compiler options for use with Preact. It includes settings for JSX handling and module resolution.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/ru/tutorial.md#2025-04-09_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"target\": \"ES2020\",\n    \"module\": \"ESNext\",\n    \"moduleResolution\": \"node\",\n    \"jsx\": \"react\",\n    \"jsxFactory\": \"h\",\n    \"jsxFragmentFactory\": \"Fragment\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Computed Signals in Preact\nDESCRIPTION: Demonstrates how to create a computed signal that depends on other signals. The computed signal automatically updates when any of its dependencies change, and is read-only.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/signals.md#2025-04-09_snippet_22\n\nLANGUAGE: js\nCODE:\n```\nconst name = signal(\"Jane\");\nconst surname = signal(\"Doe\");\n\nconst fullName = computed(() => `${name.value} ${surname.value}`);\n```\n\n----------------------------------------\n\nTITLE: Using Default Context Values in Preact\nDESCRIPTION: Demonstrates how to set and use default context values without a Provider. This example shows how the value passed to createContext() becomes the default value that is returned by useContext() when no Provider is found.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/tutorial/06-context.md#2025-04-09_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createContext } from 'preact'\nimport { useContext } from 'preact/hooks'\n\nconst Username = createContext('Bob')\n\nexport default function App() {\n  const username = useContext(Username) // returns \"Bob\"\n\n  return <span>{username}</span>\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Routes with Context in Preact\nDESCRIPTION: Implements a nested routing system using context. This example creates a Route component that consumes and provides a Path context, allowing for nested route definitions that don't need to know their full path.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/tutorial/06-context.md#2025-04-09_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createContext } from 'preact'\nimport { useContext } from 'preact/hooks'\n\nconst Path = createContext(location.pathname)\n\nfunction Route(props) {\n  const path = useContext(Path) // the current path\n  const isMatch = path.startsWith(props.path)\n  const innerPath = path.substring(props.path.length)\n  return isMatch && (\n    <Path.Provider value={innerPath}>\n      {props.children}\n    </Path.Provider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Context API Implementation\nDESCRIPTION: Demonstrates the usage of createContext API for passing data through component tree without prop drilling.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/whats-new.md#2025-04-09_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst Theme = createContext('light');\n\nfunction ThemedButton(props) {\n  return (\n    <Theme.Consumer>\n      {theme => <div>Active theme: {theme}</div>}\n    </Theme.Consumer>\n  );\n}\n\nfunction App() {\n  return (\n    <Theme.Provider value=\"dark\">\n      <SomeComponent>\n        <ThemedButton />\n      </SomeComponent>\n    </Theme.Provider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Elements by Role in Preact Testing Library\nDESCRIPTION: Using the recommended getByRole query to find elements by their accessibility role and name. This approach makes tests more resilient to DOM structure changes.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/preact-testing-library.md#2025-04-09_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { render, fireEvent, screen } from '@testing-library/preact';\n\ntest('should be able to sign in', async () => {\n  render(<MyLoginForm />);\n  \n  // Locate the input using textbox role and the accessible name,\n  // which is stable no matter if you use a label element, aria-label, or\n  // aria-labelledby relationship\n  const field = await screen.findByRole('textbox', { name: 'Sign In' });\n  \n  // type in the field\n  fireEvent.change(field, { value: 'user123' });\n})\n```\n\n----------------------------------------\n\nTITLE: Reading Signal Values Without Subscribing Using peek() in Preact\nDESCRIPTION: Example of using the peek() method to read a signal's value without subscribing to changes. This is useful in rare cases when you need to write to a signal inside an effect without causing recursive updates.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/pt-br/guide/v10/signals.md#2025-04-09_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nconst delta = signal(0);\nconst count = signal(0);\n\neffect(() => {\n  // Atualiza `count` sem se inscrever em `count`:\n  count.value = count.peek() + delta.value;\n});\n\n// Definir `delta` reexecuta o efeito:\ndelta.value = 1;\n\n// Isso não reexecutará o efeito porque não acessou `.value`:\ncount.value = 10;\n```\n\n----------------------------------------\n\nTITLE: Using PureComponent with Preact for Performance Optimization\nDESCRIPTION: Demonstrates how to use PureComponent from preact/compat to prevent unnecessary re-renders. The component implements a shallow comparison of props to determine if a render is needed.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/switching-to-preact.md#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { render } from 'preact';\nimport { PureComponent } from 'preact/compat';\n\nclass Foo extends PureComponent {\n  render(props) {\n    console.log(\"render\")\n    return <div />\n  }\n}\n\nconst dom = document.getElementById('root');\nrender(<Foo value=\"3\" />, dom);\n// Logs: \"render\"\n\n// Render a second time, doesn't log anything\nrender(<Foo value=\"3\" />, dom);\n```\n\n----------------------------------------\n\nTITLE: Using Preact Fragment Component\nDESCRIPTION: Shows how to use Fragment to render multiple elements without a wrapper DOM element.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/api-reference.md#2025-04-09_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Fragment, render } from 'preact';\n\nrender(\n  <Fragment>\n    <div>A</div>\n    <div>B</div>\n    <div>C</div>\n  </Fragment>,\n  document.getElementById('container')\n);\n```\n\n----------------------------------------\n\nTITLE: Accessing DOM Elements with useRef in Preact\nDESCRIPTION: This example demonstrates how to use the useRef hook to access and manipulate DOM elements directly. It shows how to create a reference to an input element and implement a button that focuses the input when clicked.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/hooks.md#2025-04-09_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Foo() {\n  // Initialize useRef with an initial value of `null`\n  const input = useRef(null);\n  const onClick = () => input.current && input.current.focus();\n\n  return (\n    <>\n      <input ref={input} />\n      <button onClick={onClick}>Focus input</button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Sharing Application State via Context in Preact\nDESCRIPTION: Demonstrates how to use Context to share application state throughout the component tree without prop drilling. This pattern is useful for larger applications where many components need access to the same state.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/signals.md#2025-04-09_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createContext } from \"preact\";\nimport { useContext } from \"preact/hooks\";\nimport { createAppState } from \"./my-app-state\";\n\nconst AppState = createContext();\n\nrender(\n  <AppState.Provider value={createAppState()}>\n    <App />\n  </AppState.Provider>\n);\n\n// ...later when you need access to your app state\nfunction App() {\n  const state = useContext(AppState);\n  return <p>{state.completed}</p>;\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Batched Updates with Computed Signals in Preact\nDESCRIPTION: Shows how batched updates work with computed signals. Accessing a computed signal within a batch will re-compute if its dependencies have changed, but other invalidated signals are only updated at the end of the batch.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/signals.md#2025-04-09_snippet_19\n\nLANGUAGE: js\nCODE:\n```\nimport { signal, computed, effect, batch } from \"@preact/signals\";\n\nconst count = signal(0);\nconst double = computed(() => count.value * 2);\nconst triple = computed(() => count.value * 3);\n\neffect(() => console.log(double.value, triple.value));\n\nbatch(() => {\n  // set `count`, invalidating `double` and `triple`:\n  count.value = 1;\n\n  // Despite being batched, `double` reflects the new computed value.\n  // However, `triple` will only update once the callback completes.\n  console.log(double.value); // Logs: 2\n});\n```\n\n----------------------------------------\n\nTITLE: Using Preact's render Function in JavaScript\nDESCRIPTION: Demonstrates how to use Preact's render function to append or replace components in the DOM. The example shows different scenarios of rendering a component into a container element.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/tr/guide/v8/api-reference.md#2025-04-09_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { render } from 'preact';\n\n// These examples show how render() behaves in a page with the following markup:\n// <div id=\"container\">\n//   <h1>My App</h1>\n// </div>\n\nconst container = document.getElementById('container');\n\nrender(MyComponent, container);\n// Append MyComponent to container\n//\n// <div id=\"container\">\n//   <h1>My App</h1>\n//   <MyComponent />\n// </div>\n\nconst existingNode = container.querySelector('h1');\n\nrender(MyComponent, container, existingNode);\n// Diff MyComponent against <h1>My App</h1>\n//\n// <div id=\"container\">\n//   <MyComponent />\n// </div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication State with Context in Preact\nDESCRIPTION: A realistic example showing how to create and manage authentication state using Context. This implementation uses useState to manage the user state and provides both the state and a setter function through context to child components.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/tutorial/06-context.md#2025-04-09_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createContext } from 'preact'\nimport { useState, useMemo, useContext } from 'preact/hooks'\n\nconst AuthContext = createContext()\n\nexport default function App() {\n  const [user, setUser] = useState(null)\n\n  const auth = useMemo(() => {\n    return { user, setUser }\n  }, [user])\n\n  return (\n    <AuthContext.Provider value={auth}>\n      <div class=\"app\">\n        {auth.user && <p>Welcome {auth.user.name}!</p>}\n        <Login />\n      </div>\n    </AuthContext.Provider>\n  )\n}\n\nfunction Login() {\n  const { user, setUser } = useContext(AuthContext)\n\n  if (user) return (\n    <div class=\"logged-in\">\n      Logged in as {user.name}.\n      <button onClick={() => setUser(null)}>\n        Log Out\n      </button>\n    </div>\n  )\n\n  return (\n    <div class=\"logged-out\">\n      <button onClick={() => setUser({ name: 'Bob' })}>\n        Log In\n      </button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: JSX Transformation Comparison between Preact and React\nDESCRIPTION: Demonstrates how JSX is transformed into function calls in both Preact (using h function) and React (using React.createElement), showing Preact's more concise output.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/kr/guide/v10/differences-to-react.md#2025-04-09_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<a href=\"/\">\n  <span>Home</span>\n</a>\n```\n\n----------------------------------------\n\nTITLE: Fetching and Rendering Todos with Keys and Side Effects in Preact\nDESCRIPTION: This snippet combines the use of keys with side effects in Preact. It fetches todos asynchronously and renders them with proper keys, demonstrating a complete todo list implementation.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/tutorial/08-keys.md#2025-04-09_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { render } from 'preact';\nimport { useState, useEffect } from 'preact/hooks';\n\nconst wait = ms => new Promise(r => setTimeout(r, ms))\n\nconst getTodos = async () => {\n  await wait(500);\n  return [\n    { id: 1, text: 'learn Preact', done: false },\n    { id: 2, text: 'make an awesome app', done: false },\n  ]\n}\n\nfunction TodoList() {\n  const [todos, setTodos] = useState([])\n\n  useEffect(() => {\n    getTodos().then(todos => {\n      setTodos(todos)\n    })\n  }, [])\n\n  return (\n    <ul>\n      {todos.map(todo => (\n        <li key={todo.id}>\n          {todo.text}\n        </li>\n      ))}\n    </ul>\n  )\n}\n\nrender(<TodoList />, document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Enabling Preact Debug Messages\nDESCRIPTION: Demonstrates how to enable helpful warnings, errors, and developer tools for Preact by adding an import statement at the top of the main entry file.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/differences-to-react.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"preact/debug\";\n```\n\n----------------------------------------\n\nTITLE: Comparing React's Children.only() with Preact's direct props.children usage in JSX\nDESCRIPTION: This snippet demonstrates how Preact simplifies the usage of children props compared to React's Children API. In Preact, props.children can be used directly without needing the Children.only() method.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/differences-to-react.md#2025-04-09_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n// React:\nfunction App(props) {\n  return <Modal content={Children.only(props.children)} />\n}\n\n// Preact: use props.children directly:\nfunction App(props) {\n  return <Modal content={props.children} />\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Virtual DOM with HTM in Preact\nDESCRIPTION: Demonstrates the use of HTM (Hyperscript Tagged Markup) as an alternative to JSX for creating Virtual DOM trees without a compiler.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/tutorial/01-vdom.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { html } from 'htm/preact';\n\nlet maybeBig = Math.random() > .5 ? 'big' : 'small';\n\nlet vdom = html`<p class=${maybeBig}>Hello ${40 + 2}!</p>`;\n                        // ^--JS--^          ^-JS-^\n```\n\n----------------------------------------\n\nTITLE: Todo List Signal Management\nDESCRIPTION: Demonstrates managing todo list state with signals including adding and removing items.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/signals.md#2025-04-09_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { signal } from \"@preact/signals\";\n\nconst todos = signal([\n  { text: \"Buy groceries\" },\n  { text: \"Walk the dog\" },\n]);\n\nconst text = signal(\"\");\n\nfunction addTodo() {\n  todos.value = [...todos.value, { text: text.value }];\n  text.value = \"\"; // Reset input value on add\n}\n\n// Check if our logic works\nconsole.log(todos.value);\n// Logs: [{text: \"Buy groceries\"}, {text: \"Walk the dog\"}]\n\n// Simulate adding a new todo\ntext.value = \"Tidy up\";\naddTodo();\n\n// Check that it added the new item and cleared the `text` signal:\nconsole.log(todos.value);\n// Logs: [{text: \"Buy groceries\"}, {text: \"Walk the dog\"}, {text: \"Tidy up\"}]\n\nconsole.log(text.value);  // Logs: \"\"\n```\n\n----------------------------------------\n\nTITLE: Modifying Root Component for Prerendering\nDESCRIPTION: A diff showing how to modify the root component to switch from render to hydrate and add the prerender export function.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/blog/prerendering-preset-vite.md#2025-04-09_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n// src/index.jsx\n-import { render } from 'preact';\n+import { hydrate, prerender as ssr } from 'preact-iso';\n\nfunction App() {\n    return <h1>Hello World!</h1>\n}\n\n-render(<App />, document.getElementById('app'));\n+if (typeof window !== 'undefined') {\n+\thydrate(<App />, document.getElementById('app'));\n+}\n\n+export async function prerender(data) {\n+    return await ssr(<App {...data} />)\n+}\n```\n\n----------------------------------------\n\nTITLE: Comparing onChange vs onInput in React and Preact\nDESCRIPTION: Shows the different event handling approaches for form input changes in React (onChange) versus Preact (onInput), though preact/compat will handle this difference automatically.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/kr/guide/v10/differences-to-react.md#2025-04-09_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n// React\n<input onChange={e => console.log(e.currentTarget.value)} />\n\n// Preact\n<input onInput={e => console.log(e.currentTarget.value)} />\n```\n\n----------------------------------------\n\nTITLE: Implementing Controlled Input in Preact\nDESCRIPTION: Example of a controlled input component where Preact explicitly manages the input value through component state.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/forms.md#2025-04-09_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<input value={myValue} onInput={myEventHandler} />;\n```\n\n----------------------------------------\n\nTITLE: Creating and Rendering Virtual DOM with createElement in Preact\nDESCRIPTION: Shows how to use Preact's createElement function to create a Virtual DOM tree and render it to the document body.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/tutorial/01-vdom.md#2025-04-09_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createElement, render } from 'preact';\n\nlet vdom = createElement(\n  'p',              // a <p> element\n  { class: 'big' }, // with class=\"big\"\n  'Hello World!'    // and the text \"Hello World!\"\n);\n\nrender(vdom, document.body);\n```\n\n----------------------------------------\n\nTITLE: SVG Attribute Handling in Preact vs React\nDESCRIPTION: Preact applies SVG attributes as-is, allowing direct use of SVG snippets. React requires camelCased attribute names.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/zh/guide/v10/differences-to-react.md#2025-04-09_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n// React\n<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 48 48\">\n  <circle fill=\"none\" strokeWidth=\"2\" strokeLinejoin=\"round\" cx=\"24\" cy=\"24\" r=\"20\" />\n</svg>\n// Preact (note stroke-width and stroke-linejoin)\n<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 48 48\">\n  <circle fill=\"none\" stroke-width=\"2\" stroke-linejoin=\"round\" cx=\"24\" cy=\"24\" r=\"20\" />\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Implementing Uncontrolled Input in Preact\nDESCRIPTION: Example of an uncontrolled input component where Preact doesn't manage the input value directly, letting the DOM handle the input state.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/forms.md#2025-04-09_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<input onInput={myEventHandler} />;\n```\n\n----------------------------------------\n\nTITLE: Using Effects with Signals in Preact\nDESCRIPTION: Demonstrates how to use the effect function to react to signal changes outside of the component tree. Effects run whenever their dependent signals change.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/signals.md#2025-04-09_snippet_12\n\nLANGUAGE: js\nCODE:\n```\nimport { signal, computed, effect } from \"@preact/signals\";\n\nconst name = signal(\"Jane\");\nconst surname = signal(\"Doe\");\nconst fullName = computed(() => `${name.value} ${surname.value}`);\n\n// Logs name every time it changes:\neffect(() => console.log(fullName.value));\n// Logs: \"Jane Doe\"\n\n// Updating `name` updates `fullName`, which triggers the effect again:\nname.value = \"John\";\n// Logs: \"John Doe\"\n```\n\n----------------------------------------\n\nTITLE: Using Effects with Signals in Preact\nDESCRIPTION: Example of using the effect function to execute code in response to signal changes. This is useful for performing side effects like logging or API calls when signal values change.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/pt-br/guide/v10/signals.md#2025-04-09_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimport { signal, computed, effect } from \"@preact/signals\";\n\nconst name = signal(\"Jane\");\nconst surname = signal(\"Doe\");\nconst fullName = computed(() => `${name.value} ${surname.value}`);\n\n// Registra o nome sempre que ele muda:\neffect(() => console.log(fullName.value));\n// Registra: \"Jane Doe\"\n\n// Atualizar `name` atualiza `fullName`, o que aciona novamente o effect:\nname.value = \"John\";\n// Registra: \"John Doe\"\n```\n\n----------------------------------------\n\nTITLE: Using Components with JSX and createElement\nDESCRIPTION: Shows how to use a component in JSX and its equivalent createElement implementation.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/tutorial/03-components.md#2025-04-09_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nlet vdom = <MyButton text=\"Click Me!\" />\n\n// remember createElement? here's what the line above compiles to:\nlet vdom = createElement(MyButton, { text: \"Click Me!\" })\n```\n\n----------------------------------------\n\nTITLE: Full Prerender API Example\nDESCRIPTION: Example showing the complete prerender function API with options for HTML, links, and head elements configuration.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/blog/prerendering-preset-vite.md#2025-04-09_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n// src/index.jsx\n\n// ...\n\nexport async function prerender(data) {\n\tconst { html, links: discoveredLinks } = ssr(<App />);\n\n\treturn {\n\t\thtml,\n\t\t// Optionally add additional links that should be\n\t\t// prerendered (if they haven't already been -- these will be deduped)\n\t\tlinks: new Set([...discoveredLinks, '/foo', '/bar']),\n\t\t// Optionally configure and add elements to the `<head>` of\n\t\t// the prerendered HTML document\n\t\thead: {\n\t\t\t// Sets the \"lang\" attribute: `<html lang=\"en\">`\n\t\t\tlang: 'en',\n\t\t\t// Sets the title for the current page: `<title>My cool page</title>`\n\t\t\ttitle: 'My cool page',\n\t\t\t// Sets any additional elements you want injected into the `<head>`:\n\t\t\t//   <link rel=\"stylesheet\" href=\"foo.css\">\n\t\t\t//   <meta property=\"og:title\" content=\"Social media title\">\n\t\t\telements: new Set([\n\t\t\t\t{ type: 'link', props: { rel: 'stylesheet', href: 'foo.css' } },\n\t\t\t\t{ type: 'meta', props: { property: 'og:title', content: 'Social media title' } }\n\t\t\t])\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Using Preact's h() Function\nDESCRIPTION: Demonstrates creating Virtual DOM Elements using Preact's h() function with various parameter combinations.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/api-reference.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { h } from 'preact';\n\nh('div', { id: 'foo' }, 'Hello!');\n// <div id=\"foo\">Hello!</div>\n\nh('div', { id: 'foo' }, 'Hello', null, ['Preact!']);\n// <div id=\"foo\">Hello Preact!</div>\n\nh(\n\t'div',\n\t{ id: 'foo' },\n\th('span', null, 'Hello!')\n);\n// <div id=\"foo\"><span>Hello!</span></div>\n```\n\n----------------------------------------\n\nTITLE: Using HTML Attributes in JSX\nDESCRIPTION: Demonstrates Preact's support for using standard HTML attribute names like 'class' in JSX, which is equivalent to using 'className' in React.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/differences-to-react.md#2025-04-09_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n// This:\n<div class=\"foo\" />\n\n// ...is the same as:\n<div className=\"foo\" />\n```\n\n----------------------------------------\n\nTITLE: Cleanup Function in Preact Signal Effects\nDESCRIPTION: Example of using a cleanup function with effects to handle resource management. This allows for disconnecting or cleaning up resources when the effect reruns or is disposed.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/pt-br/guide/v10/signals.md#2025-04-09_snippet_6\n\nLANGUAGE: js\nCODE:\n```\neffect(() => {\n  Chat.connect(username.value)\n\n  return () => Chat.disconnect(username.value)\n})\n```\n\n----------------------------------------\n\nTITLE: Using toChildArray Helper\nDESCRIPTION: Shows how to use toChildArray to consistently handle children props regardless of their structure.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/api-reference.md#2025-04-09_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { toChildArray } from 'preact';\n\nfunction Foo(props) {\n  const count = toChildArray(props.children).length;\n  return <div>I have {count} children</div>;\n}\n\n// props.children is \"bar\"\nrender(\n  <Foo>bar</Foo>,\n  container\n);\n\n// props.children is [<p>A</p>, <p>B</p>]\nrender(\n  <Foo>\n    <p>A</p>\n    <p>B</p>\n  </Foo>,\n  container\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a GitHub Stars Component in Preact JSX\nDESCRIPTION: A component that fetches and displays star count for a GitHub repository. It uses async/await in componentDidMount to fetch data and updates state when the data is received.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/index.md#2025-04-09_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nexport default class Stars extends Component {\n    async componentDidMount() {\n        let stars = await githubStars(this.props.repo);\n        this.setState({ stars });\n    }\n    render({ repo }, { stars=0 }) {\n        let url = `https://github.com/${repo}`;\n        return (\n            <a href={url} class=\"stars\">\n                ⭐️ {stars} Stars\n            </a>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Interactive Input Focus Example\nDESCRIPTION: Complete example showing how to implement a button that focuses an input field using refs in a Preact function component.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/tutorial/05-refs.md#2025-04-09_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { render } from 'preact';\nimport { useRef } from 'preact/hooks';\n\nfunction App() {\n  const input = useRef();\n\n  function onClick() {\n    input.current.focus();\n  }\n\n  return (\n    <div>\n      <input ref={input} defaultValue=\"Hello World!\" />\n      <button onClick={onClick}>Focus input</button>\n    </div>\n  );\n}\n\nrender(<App />, document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Setting Document Title with globalThis in Preact\nDESCRIPTION: This snippet defines a useTitle hook that sets the document title or globalThis.title depending on the environment. It uses the useEffect hook from Preact to update the title when it changes.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/blog/prerendering-preset-vite.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// src/title-util.js\nimport { useEffect } from 'preact/hooks';\n\n/**\n * Set `document.title` or `globalThis.title`\n * @param {string} title\n */\nexport function useTitle(title) {\n\tif (typeof window === 'undefined') {\n\t\tglobalThis.title = createTitle(title);\n\t}\n\tuseEffect(() => {\n\t\tif (title) {\n\t\t\tdocument.title = createTitle(title);\n\t\t}\n\t}, [title]);\n}\n```\n\n----------------------------------------\n\nTITLE: Utilizando Preact.render() para Renderizar Componentes\nDESCRIPTION: Demonstra o uso da função render() do Preact para renderizar componentes no DOM. Inclui exemplos de como adicionar um novo componente e como substituir um nó existente.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/pt-br/guide/v8/api-reference.md#2025-04-09_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { render } from 'preact';\n\n// Esses exemplos mostram como o render() se comporta numa página com a seguinte estrutura:\n// <div id=\"container\">\n//   <h1>My App</h1>\n// </div>\n\nconst container = document.getElementById('container');\n\nrender(MyComponent, container);\n// Acrescenta MyComponent ao container\n//\n// <div id=\"container\">\n//   <h1>My App</h1>\n//   <MyComponent />\n// </div>\n\nconst existingNode = container.querySelector('h1');\n\nrender(MyComponent, container, existingNode);\n// Diferencia MyComponent de <h1>My App</h1>\n//\n// <div id=\"container\">\n//   <MyComponent />\n// </div>\n```\n\n----------------------------------------\n\nTITLE: Implementing forwardRef in Preact for Reference Forwarding\nDESCRIPTION: Demonstrates how to use forwardRef from preact/compat to pass ref props to child components. This pattern allows library authors to give consumers access to inner DOM elements.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/switching-to-preact.md#2025-04-09_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createRef, render } from 'preact';\nimport { forwardRef } from 'preact/compat';\n\nconst MyComponent = forwardRef((props, ref) => {\n  return <div ref={ref}>Hello world</div>;\n})\n\n// Usage: `ref` will hold the reference to the inner `div` instead of\n// `MyComponent`\nconst ref = createRef();\nrender(<MyComponent ref={ref} />, dom)\n```\n\n----------------------------------------\n\nTITLE: Inheriting HTML Properties in Preact Component Types\nDESCRIPTION: Extending HTML element props using TypeScript interfaces to create components that inherit native HTML attributes along with custom props.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/typescript.md#2025-04-09_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport { JSX } from 'preact';\n\ninterface InputProperties extends JSX.InputHTMLAttributes<HTMLInputElement> {\n  mySpecialProp: any\n}\n\nconst Input = (props: InputProperties) => <input {...props} />\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Preact Component in JSX\nDESCRIPTION: Demonstrates how to create a simple Preact component by extending the Component class and implementing the required render method. The example shows how to access props and state within the render function.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/tr/guide/v8/api-reference.md#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Component } from 'preact';\n\nclass MyComponent extends Component {\n\trender(props, state) {\n\t\t// props === this.props\n\t\t// state === this.state\n\n\t\treturn <h1>Hello, {props.name}!</h1>;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Checkboxes in Preact\nDESCRIPTION: This example demonstrates how to handle checkboxes in Preact. It uses the onClick event instead of onChange, and toggles the checked state when the checkbox or its label is clicked.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/zh/guide/v10/forms.md#2025-04-09_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\nclass MyForm extends Component {\n  toggle = e => {\n      let checked = !this.state.checked;\n      this.setState({ checked });\n  };\n\n  render(_, { checked }) {\n    return (\n      <label>\n        <input\n          type=\"checkbox\"\n          checked={checked}\n          onClick={this.toggle}\n        />\n        选中这个复选框\n      </label>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing DOM Nodes with Refs in Preact\nDESCRIPTION: Demonstrates how to use refs to access the underlying DOM nodes in both class and function components. The DOM node is assigned to the current property of the ref object after the component mounts.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/refs.md#2025-04-09_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// --repl\nimport { render, Component, createRef } from \"preact\";\n// --repl-before\nclass MyInput extends Component {\n  ref = createRef(null);\n\n  componentDidMount() {\n    console.log(this.ref.current);\n    // Logs: [HTMLInputElement]\n  }\n\n  render() {\n    return <input ref={this.ref} />;\n  }\n}\n// --repl-after\nrender(<MyInput />, document.getElementById(\"app\"));\n```\n\nLANGUAGE: jsx\nCODE:\n```\n// --repl\nimport { render } from \"preact\";\nimport { useRef, useEffect } from \"preact/hooks\";\n// --repl-before\nfunction MyInput() {\n  const ref = useRef(null);\n\n  useEffect(() => {\n    console.log(ref.current);\n    // Logs: [HTMLInputElement]\n  }, []);\n\n  return <input ref={ref} />;\n}\n// --repl-after\nrender(<MyInput />, document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Setting Option Hooks in Preact\nDESCRIPTION: Demonstrates how to properly set an option hook in Preact by modifying the exported options object. The example shows how to preserve the call chain by storing and invoking the previous hook, which is essential for compatibility with addons like preact/hooks and DevTools.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/options.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { options } from 'preact';\n\n// Store previous hook\nconst oldHook = options.vnode;\n\n// Set our own options hook\noptions.vnode = vnode => {\n  console.log(\"Hey I'm a vnode\", vnode);\n\n  // Call previously defined hook if there was any\n  if (oldHook) {\n    oldHook(vnode);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Effects Implementation with Signals\nDESCRIPTION: Demonstrates how to create and use effects that automatically react to signal changes, including cleanup via disposer function.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/blog/signal-boosting.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { signal, computed, effect } from \"@preact/signals-core\";\n\nconst count = signal(1);\nconst double = computed(() => count.value * 2);\nconst quadruple = computed(() => double.value * 2);\n\nconst dispose = effect(() => {\n  console.log(\"quadruple is now\", quadruple.value);\n});                 // Console: quadruple value is now 4\n\ndispose();\ncount.value = 20;  // nothing gets printed to the console\n```\n\n----------------------------------------\n\nTITLE: Rendering Components in Preact and React\nDESCRIPTION: Compares the syntax for rendering components with props and state in both Preact and React, showcasing Preact's unique feature of passing props and state as arguments to the render method.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/differences-to-react.md#2025-04-09_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// Works in both Preact and React\nclass Foo extends Component {\n  state = { age: 1 };\n\n  render() {\n    return <div>Name: {this.props.name}, Age: {this.state.age}</div>;\n  }\n}\n\n// Only works in Preact\nclass Foo extends Component {\n  state = { age: 1 };\n\n  render({ name }, { age }) {\n    return <div>Name: {name}, Age: {age}</div>;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Unique IDs as Keys in Preact\nDESCRIPTION: This snippet demonstrates a more robust approach to using keys in Preact, utilizing unique IDs for list items instead of array indices or potentially non-unique values.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/tutorial/08-keys.md#2025-04-09_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst todos = [\n  { id: 1, text: 'wake up' },\n  { id: 2, text: 'make bed' }\n]\n\nexport default function ToDos() {\n  return (\n    <ul>\n      {todos.map(todo => (\n        <li key={todo.id}>\n          {todo.text}\n        </li>\n      ))}\n    </ul>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing DOM Nodes with Refs in Preact\nDESCRIPTION: Demonstrates how to use refs to access the underlying DOM nodes in both class and function components. The DOM node is assigned to the current property of the ref object after the component mounts.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/refs.md#2025-04-09_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// --repl\nimport { render, Component, createRef } from \"preact\";\n// --repl-before\nclass MyInput extends Component {\n  ref = createRef(null);\n\n  componentDidMount() {\n    console.log(this.ref.current);\n    // Logs: [HTMLInputElement]\n  }\n\n  render() {\n    return <input ref={this.ref} />;\n  }\n}\n// --repl-after\nrender(<MyInput />, document.getElementById(\"app\"));\n```\n\nLANGUAGE: jsx\nCODE:\n```\n// --repl\nimport { render } from \"preact\";\nimport { useRef, useEffect } from \"preact/hooks\";\n// --repl-before\nfunction MyInput() {\n  const ref = useRef(null);\n\n  useEffect(() => {\n    console.log(ref.current);\n    // Logs: [HTMLInputElement]\n  }, []);\n\n  return <input ref={ref} />;\n}\n// --repl-after\nrender(<MyInput />, document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Todo Form in Preact\nDESCRIPTION: This example demonstrates how to create a simple todo form in Preact using a controlled text input. It shows how to handle form submission, input changes, and display the current input value.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/zh/guide/v10/forms.md#2025-04-09_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\nclass TodoForm extends Component {\n  state = { value: '' };\n\n  onSubmit = e => {\n    alert(\"Submitted a todo\");\n    e.preventDefault();\n  }\n\n  onInput = e => {\n    this.setState({ e.currentTarget.value })\n  }\n\n  render(_, { value }) {\n    return (\n      <form onSubmit={this.onSubmit}>\n        <input type=\"text\" value={value} onInput={this.onInput} />\n        <p>您输入了：{value}</p>\n        <button type=\"submit\">提交</button>\n      </form>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Counter Component with HTM in Preact\nDESCRIPTION: Illustrates how to create a Counter component using HTM syntax in Preact. It demonstrates the use of hooks, custom components, and event handling without JSX or a build step.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/no-build-workflows.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { render } from 'preact';\nimport { useState } from 'preact/hooks';\nimport { html } from 'htm/preact';\n\nfunction Button({ action, children }) {\n\treturn html`<button onClick=${action}>${children}</button>`;\n}\n\nfunction Counter() {\n\tconst [count, setCount] = useState(0);\n\n\treturn html`\n\t\t<div class=\"counter-container\">\n\t\t\t<${Button} action=${() => setCount(count + 1)}>Increment<//>\n\t\t\t<input readonly value=${count} />\n\t\t\t<${Button} action=${() => setCount(count - 1)}>Decrement<//>\n\t\t</div>\n\t`;\n}\n\nrender(html`<${Counter} />`, document.getElementById('app'));\n```\n\n----------------------------------------\n\nTITLE: Complete useErrorBoundary Implementation in Preact\nDESCRIPTION: A complete example of using useErrorBoundary with error reporting and custom error UI. Demonstrates how to handle errors, display messages, and provide a reset mechanism.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/es/guide/v10/hooks.md#2025-04-09_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nconst App = props => {\n  const [error, resetError] = useErrorBoundary(\n    error => callMyApi(error.message)\n  );\n  \n  // Display a nice error message\n  if (error) {\n    return (\n      <div>\n        <p>{error.message}</p>\n        <button onClick={resetError}>Try again</button>\n      </div>\n    );\n  } else {\n    return <div>{props.children}</div>\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Using Fragments in Preact\nDESCRIPTION: Shows how to use Fragments to return multiple elements without adding extra nodes to the DOM.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/components.md#2025-04-09_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nfunction TodoItems() {\n  return (\n    <Fragment>\n      <li>A</li>\n      <li>B</li>\n      <li>C</li>\n    </Fragment>\n  )\n}\n\nconst App = (\n  <ul>\n    <TodoItems />\n    <li>D</li>\n  </ul>\n);\n\nrender(App, container);\n```\n\n----------------------------------------\n\nTITLE: Accessing Signals Without Subscribing in Preact\nDESCRIPTION: Shows how to use untracked() to access signal values without subscribing to them. This is useful when you want to read signal values within an effect without re-running the effect when those signals change.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/signals.md#2025-04-09_snippet_25\n\nLANGUAGE: js\nCODE:\n```\nconst name = signal(\"Jane\");\nconst surname = signal(\"Doe\");\n\neffect(() => {\n  untracked(() => {\n    console.log(`${name.value} ${surname.value}`)\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Implementation of useSignal Hook in Preact\nDESCRIPTION: Shows the underlying implementation of the useSignal hook, which uses useMemo to ensure the signal is only created once and reused on subsequent renders.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/signals.md#2025-04-09_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nfunction useSignal(value) {\n return useMemo(() => signal(value), []);\n}\n```\n\n----------------------------------------\n\nTITLE: SVG Attribute Differences Between React and Preact\nDESCRIPTION: Comparison of SVG element attributes in React (camelCase) versus Preact (kebab-case), showing how Preact keeps original SVG attribute formats while React normalizes them.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/kr/guide/v10/differences-to-react.md#2025-04-09_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n// React\n<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 48 48\">\n  <circle fill=\"none\" strokeWidth=\"2\" strokeLinejoin=\"round\" cx=\"24\" cy=\"24\" r=\"20\" />\n</svg>\n// Preact (note stroke-width and stroke-linejoin)\n<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 48 48\">\n  <circle fill=\"none\" stroke-width=\"2\" stroke-linejoin=\"round\" cx=\"24\" cy=\"24\" r=\"20\" />\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Using useId Hook for Unique Identifiers in Preact\nDESCRIPTION: Demonstrates the useId hook which generates consistent unique identifiers for elements in both server and client rendering. Shows how to use it for form elements and focus management.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/es/guide/v10/hooks.md#2025-04-09_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nconst App = props => {\n  const mainId = useId();\n  const inputId = useId();\n\n  useLayoutEffect(() => {\n    document.getElementById(inputId).focus()\n  }, [])\n  \n  // Display a nice error message\n  return (\n    <main id={mainId}>\n      <input id={inputId}>\n    </main>\n  )\n};\n```\n\n----------------------------------------\n\nTITLE: Async Server-Side Rendering Implementation\nDESCRIPTION: Shows how to use renderToStringAsync for handling async components.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/server-side-rendering.md#2025-04-09_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { renderToStringAsync } from 'preact-render-to-string';\nimport { Main } from './main';\n\nconst main = async () => {\n    // Rendering of lazy components\n    const html = await renderToStringAsync(<Main />);\n\n    console.log(html);\n    // <h1>Home page</h1>\n};\n\n// Execution & error handling\nmain().catch((error) => {\n    console.error(error);\n});\n```\n\n----------------------------------------\n\nTITLE: Using Preact Render Function\nDESCRIPTION: Example of rendering a virtual DOM element into a container DOM node using Preact's render function.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/api-reference.md#2025-04-09_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { render } from 'preact';\n\nconst Foo = () => <div>foo</div>;\n\nrender(<Foo />, document.getElementById('container'));\n```\n\n----------------------------------------\n\nTITLE: Document Title Update with useEffect in Preact\nDESCRIPTION: Demonstrates using useEffect to update the document title when a prop changes. The effect only runs when the title prop actually changes due to the dependency array.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/es/guide/v10/hooks.md#2025-04-09_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nfunction PageTitle(props) {\n  useEffect(() => {\n    document.title = props.title;\n  }, [props.title]);\n\n  return <h1>{props.title}</h1>;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for Preact/compat (React compatibility)\nDESCRIPTION: TypeScript configuration that enables React compatibility by configuring path aliases for react modules to point to preact/compat equivalents.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/typescript.md#2025-04-09_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    ...\n    \"skipLibCheck\": true,\n    \"baseUrl\": \"./\",\n    \"paths\": {\n      \"react\": [\"./node_modules/preact/compat/\"],\n      \"react/jsx-runtime\": [\"./node_modules/preact/jsx-runtime\"],\n      \"react-dom\": [\"./node_modules/preact/compat/\"],\n      \"react-dom/*\": [\"./node_modules/preact/compat/*\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing useId Hook in Preact\nDESCRIPTION: Demonstrates the usage of useId hook to generate unique identifiers for both server-side and client-side rendering. It's particularly useful for form elements and accessibility.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/hooks.md#2025-04-09_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nconst App = props => {\n  const mainId = useId();\n  const inputId = useId();\n\n  useLayoutEffect(() => {\n    document.getElementById(inputId).focus()\n  }, [])\n  \n  // Display an input with a unique ID.\n  return (\n    <main id={mainId}>\n      <input id={inputId}>\n    </main>\n  )\n};\n```\n\n----------------------------------------\n\nTITLE: Disposing Effects in Preact Signals\nDESCRIPTION: Demonstrates how to dispose an effect by calling the function returned from effect(). This removes all subscriptions and prevents the effect from running on future signal updates.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/signals.md#2025-04-09_snippet_14\n\nLANGUAGE: js\nCODE:\n```\nimport { signal, effect } from \"@preact/signals\";\n\nconst name = signal(\"Jane\");\nconst surname = signal(\"Doe\");\nconst fullName = computed(() => name.value + \" \" + surname.value);\n\nconst dispose = effect(() => console.log(fullName.value));\n// Logs: \"Jane Doe\"\n\n// Destroy effect and subscriptions:\ndispose();\n\n// Updating `name` does not run the effect because it has been disposed.\n// It also doesn't re-compute `fullName` now that nothing is observing it.\nname.value = \"John\";\n```\n\n----------------------------------------\n\nTITLE: Refs in Class Components\nDESCRIPTION: Example of using refs within a class component, storing the ref as a class property and accessing it in lifecycle methods.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/tutorial/05-refs.md#2025-04-09_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createRef, Component } from 'preact';\n\nexport default class App extends Component {\n  input = createRef()\n\n  // this function runs after <App> is rendered\n  componentDidMount() {\n    // access the associated DOM element:\n    this.input.current.focus();\n  }\n\n  render() {\n    return <input ref={this.input} />\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Children Counting with toChildArray in Preact\nDESCRIPTION: Shows how to count children in Preact using toChildArray() versus React's Children.count method, demonstrating Preact's approach to array manipulation of children.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/kr/guide/v10/differences-to-react.md#2025-04-09_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n// React\nfunction App(props) {\n  const cols = Children.count(props.children);\n  return <div data-columns={cols}>{props.children}</div>\n}\n\n// Preact\nfunction App(props) {\n  const cols = toChildArray(props.children).length;\n  return <div data-columns={cols}>{props.children}</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Event Listener Management with useEffect in Preact\nDESCRIPTION: Shows how to add and remove event listeners using useEffect. The component listens for window resize events and updates state accordingly, with proper cleanup when the component unmounts.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/es/guide/v10/hooks.md#2025-04-09_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n// --repl\nimport { useState, useEffect } from 'preact/hooks';\nimport { render } from 'preact';\n// --repl-before\n// Componente que siempre mostrará el ancho actual de la ventana\nfunction WindowWidth(props) {\n  const [width, setWidth] = useState(0);\n\n  function onResize() {\n    setWidth(window.innerWidth);\n  }\n\n  useEffect(() => {\n    window.addEventListener('resize', onResize);\n    return () => window.removeEventListener('resize', onResize);\n  }, []);\n\n  return <p>Window width: {width}</p>;\n}\n// --repl-after\nrender(<WindowWidth />, document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for Preact with Classic JSX Transform\nDESCRIPTION: TypeScript configuration with classic transform in tsconfig.json that sets JSX to react mode, using h as the factory and Fragment for fragments.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/typescript.md#2025-04-09_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n// Classic Transform\n{\n  \"compilerOptions\": {\n    \"jsx\": \"react\",\n    \"jsxFactory\": \"h\",\n    \"jsxFragmentFactory\": \"Fragment\",\n    //...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Simplified Counter with Direct Signal Reference\nDESCRIPTION: Shows simplified signal usage in JSX without explicit value access.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/signals.md#2025-04-09_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { signal } from \"@preact/signals\";\n\nconst count = signal(0);\n\nfunction Counter() {\n  return (\n    <div>\n      <p>Count: {count}</p>\n      <button onClick={() => count.value++}>click me</button>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Testing useCounter Hook with @testing-library/preact\nDESCRIPTION: This snippet demonstrates how to test the useCounter hook using renderHook and act functions from @testing-library/preact. It verifies the initial count and tests the increment functionality.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/preact-testing-library.md#2025-04-09_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nimport { renderHook, act } from '@testing-library/preact';\nimport useCounter from './useCounter';\n\ntest('should increment counter', () => {\n  const { result } = renderHook(() => useCounter());\n\n  // Initially the counter should be 0\n  expect(result.current.count).toBe(0);\n\n  // Let's update the counter by calling a hook callback\n  act(() => {\n    result.current.increment();\n  });\n\n  // Check that the hook return value reflects the new state.\n  expect(result.current.count).toBe(1);\n});\n```\n\n----------------------------------------\n\nTITLE: Using Portals in Preact for Outside-Tree Rendering\nDESCRIPTION: Demonstrates how to use createPortal from preact/compat to render components into DOM nodes outside the main application tree, useful for modals and overlays.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/switching-to-preact.md#2025-04-09_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createPortal } from 'preact/compat';\nimport MyModal from './MyModal';\n\nfunction App() {\n  const container = document.getElementById('modals');\n  return (\n    <div>\n      I'm app\n      {createPortal(<MyModal />, container)}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing an Error Boundary Component in Preact\nDESCRIPTION: A class component that acts as an error boundary by implementing both error handling methods: `getDerivedStateFromError` and `componentDidCatch`. It captures errors from child components and displays a fallback UI instead of crashing.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/tutorial/09-error-handling.md#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Component } from 'preact'\n\nclass ErrorBoundary extends Component {\n  state = { error: null }\n\n  static getDerivedStateFromError(error) {\n    return { error: error.message }\n  }\n\n  componentDidCatch(error) {\n    console.error(error)\n    this.setState({ error: error.message })\n  }\n\n  render() {\n    if (this.state.error) {\n      return <p>Oh no! We ran into an error: {this.state.error}</p>\n    }\n    return this.props.children\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Refs with DOM Elements in Preact\nDESCRIPTION: Shows how to use refs to access DOM elements in Preact components. Demonstrates creating a ref and using it to focus an input element after rendering.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/tutorial/05-refs.md#2025-04-09_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createRef } from 'preact';\n\n// create a ref:\nconst input = createRef()\n\n// pass the ref as a prop on a Virtual DOM element:\nrender(<input ref={input} />, document.body)\n\n// access the associated DOM element:\ninput.current // an HTML <input> element\ninput.current.focus() // focus the input!\n```\n\n----------------------------------------\n\nTITLE: Implementing useCounter Hook in Preact\nDESCRIPTION: This snippet defines a custom hook called useCounter that manages a count state and provides an increment function. It uses useState and useCallback hooks from preact/hooks.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/preact-testing-library.md#2025-04-09_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useCallback } from 'preact/hooks';\n\nconst useCounter = () => {\n  const [count, setCount] = useState(0);\n  const increment = useCallback(() => setCount(c => c + 1), []);\n  return { count, increment };\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing useReducer with TypeScript in Preact\nDESCRIPTION: Demonstrates how to use the useReducer hook with TypeScript in Preact. The example shows type definitions for state and actions, and how TypeScript infers types from the reducer function.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/typescript.md#2025-04-09_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\n// The state type for the reducer function\ninterface StateType {\n  count: number;\n}\n\n// An action type, where the `type` can be either\n// \"reset\", \"decrement\", \"increment\"\ninterface ActionType {\n  type: \"reset\" | \"decrement\" | \"increment\";\n}\n\n// The initial state. No need to annotate\nconst initialState = { count: 0 };\n\nfunction reducer(state: StateType, action: ActionType) {\n  switch (action.type) {\n    // TypeScript makes sure we handle all possible\n    // action types, and gives auto complete for type\n    // strings\n    case \"reset\":\n      return initialState;\n    case \"increment\":\n      return { count: state.count + 1 };\n    case \"decrement\":\n      return { count: state.count - 1 };\n    default:\n      return state;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching GitHub Stars Component in Preact JSX\nDESCRIPTION: This snippet demonstrates a component that fetches and displays the number of GitHub stars for a repository. It uses async/await for data fetching and shows how to use componentDidMount in Preact.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/kr/index.md#2025-04-09_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nexport default class Stars extends Component {\n    async componentDidMount() {\n        let stars = await githubStars(this.props.repo);\n        this.setState({ stars });\n    }\n    render({ repo }, { stars=0 }) {\n        let url = `https://github.com/${repo}`;\n        return (\n            <a href={url} class=\"stars\">\n                ⭐️ {stars} Stars\n            </a>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Counter Component in Preact\nDESCRIPTION: A simple Counter component that displays an initial value and provides a button to increment it. The component uses useState hook from preact/hooks to manage state.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/preact-testing-library.md#2025-04-09_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { h } from 'preact';\nimport { useState } from 'preact/hooks';\n\nexport function Counter({ initialCount }) {\n  const [count, setCount] = useState(initialCount);\n  const increment = () => setCount(count + 1);\n\n  return (\n    <div>\n      Current value: {count}\n      <button onClick={increment}>Increment</button>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Webpack React Aliasing Configuration\nDESCRIPTION: Webpack configuration for aliasing React imports to Preact compatibility layer.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/getting-started.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n   //...snip\n  \"resolve\": {\n    \"alias\": {\n      \"react\": \"preact/compat\",\n      \"react-dom/test-utils\": \"preact/test-utils\",\n      \"react-dom\": \"preact/compat\",     // Must be below test-utils\n      \"react/jsx-runtime\": \"preact/jsx-runtime\"\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Props in TypeScript Function Components\nDESCRIPTION: Showing how to define optional props with default values in TypeScript function components for Preact.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/typescript.md#2025-04-09_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\ninterface GreetingProps {\n  name?: string; // name is optional!\n}\n\nfunction Greeting({ name = \"User\" }: GreetingProps) {\n  // name is at least \"User\"\n  return <div>Hello {name}!</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Using memo in Preact for Memoized Functional Components\nDESCRIPTION: Shows how to implement memo from preact/compat to memoize functional components. Both default and custom comparison functions are demonstrated to control when re-rendering occurs.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/switching-to-preact.md#2025-04-09_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { memo } from 'preact/compat';\n\nfunction MyComponent(props) {\n  return <div>Hello {props.name}</div>\n}\n\n// Usage with default comparison function\nconst Memoed = memo(MyComponent);\n\n// Usage with custom comparison function\nconst Memoed2 = memo(MyComponent, (prevProps, nextProps) => {\n  // Only re-render when `name' changes\n  return prevProps.name === nextProps.name;\n})\n```\n\n----------------------------------------\n\nTITLE: Using memo in Preact for Memoized Functional Components\nDESCRIPTION: Shows how to implement memo from preact/compat to memoize functional components. Both default and custom comparison functions are demonstrated to control when re-rendering occurs.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/switching-to-preact.md#2025-04-09_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { memo } from 'preact/compat';\n\nfunction MyComponent(props) {\n  return <div>Hello {props.name}</div>\n}\n\n// Usage with default comparison function\nconst Memoed = memo(MyComponent);\n\n// Usage with custom comparison function\nconst Memoed2 = memo(MyComponent, (prevProps, nextProps) => {\n  // Only re-render when `name' changes\n  return prevProps.name === nextProps.name;\n})\n```\n\n----------------------------------------\n\nTITLE: Triggering Custom Events on Web Components in Preact\nDESCRIPTION: Illustrates how to handle custom events from web components in Preact. The example shows the difference between built-in DOM events and custom element events, emphasizing the importance of correct event naming.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/web-components.md#2025-04-09_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n// Built-in DOM event: listens for a \"click\" event\n<input onClick={() => console.log('click')} />\n\n// Custom Element: listens for \"TabChange\" event (case-sensitive!)\n<tab-bar onTabChange={() => console.log('tab change')} />\n\n// Corrected: listens for \"tabchange\" event (lower-case)\n<tab-bar ontabchange={() => console.log('tab change')} />\n```\n\n----------------------------------------\n\nTITLE: Example Unit Test for Preact Component Using Enzyme\nDESCRIPTION: Demonstrates how to write a unit test for a Preact Table component using Enzyme's mount method. It includes setup, teardown, and an asynchronous test case checking rendered checkboxes.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/zh/guide/v8/unit-testing-with-enzyme.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nlet dataSource = [{ id: '1', name: 'test-content' }, { id: '2', name: 'test-content' }],\n    table,\n    wrapper;\n\n    beforeEach(() => {\n        table = <Table dataSource={dataSource}>\n            <Table.Column dataIndex='id' />\n            <Table.Column dataIndex='name' />\n        </Table>\n        wrapper = mount(table);\n    })\n\n    afterEach(() => {\n        table = null;\n    })\n\n    it('should render checkboxMode', (done) => {\n        wrapper.setProps({\n             rowSelection: {\n                getProps: (record) => {\n                    if (record.id === '1') {\n                        return {\n                            disabled: true\n                        }\n                    }\n                }\n            }\n        });\n\n        setTimeout(() => {\n            expect(wrapper.find('.checkbox').length).to.be.equal(3);\n            expect(wrapper.find('.checkbox.disabled').length).to.be.equal(1);\n            done();\n        }, 10);\n    });\n```\n\n----------------------------------------\n\nTITLE: Babel JSX Configuration\nDESCRIPTION: Configuration for transpiling JSX in Preact applications using Babel.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/getting-started.md#2025-04-09_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    [\"@babel/plugin-transform-react-jsx\", {\n      \"pragma\": \"h\",\n      \"pragmaFrag\": \"Fragment\"\n    }]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using Linked State in Preact Component\nDESCRIPTION: Shows how to use the linkState module to simplify state updates in a Preact component. This method is more concise and efficient than manual state updates.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/tr/guide/v8/linked-state.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport linkState from 'linkstate';\n\nclass Foo extends Component {\n\trender({ }, { text }) {\n\t\treturn <input value={text} onInput={linkState(this, 'text')} />;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Модульное тестирование Preact-компонента с использованием Enzyme\nDESCRIPTION: Пример тестов для компонента Counter с использованием Enzyme и средства запуска тестов.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/ru/guide/v8/unit-testing-with-enzyme.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { expect } from 'chai';\nimport { h } from 'preact';\nimport { mount } from 'enzyme';\n\nimport Counter from '../src/Counter';\n\ndescribe('Counter', () => {\n  it('должен отображать начальный счётчик', () => {\n    const wrapper = mount(<Counter initialCount={5} />);\n    expect(wrapper.text()).to.include('Текущее значение: 5');\n  });\n\n  it('значение должно увеличиваться после нажатия кнопки «Увеличить»', () => {\n    const wrapper = mount(<Counter initialCount={5} />);\n\n    wrapper.find('button').simulate('click');\n\n    expect(wrapper.text()).to.include('Текущее значение: 6');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Shadow DOM Web Component with Slots in Preact\nDESCRIPTION: Demonstrates creating a web component with shadow DOM and named slots using Preact. The example shows how to define the component and use it in HTML with slot content.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/web-components.md#2025-04-09_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nfunction TextSection({ heading, content }) {\n\treturn (\n\t\t<div>\n\t\t\t<h1>{heading}</h1>\n\t\t\t<p>{content}</p>\n\t\t</div>\n\t);\n}\n\nregister(TextSection, 'text-section', [], { shadow: true });\n```\n\nLANGUAGE: html\nCODE:\n```\n<text-section>\n  <span slot=\"heading\">Nice heading</span>\n  <span slot=\"content\">Great content</span>\n</text-section>\n```\n\n----------------------------------------\n\nTITLE: Reading Signal Values Without Subscribing Using peek() in Preact\nDESCRIPTION: Shows how to read a signal's value without creating a subscription using the peek() method. This is useful for avoiding unwanted effect reruns.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/signals.md#2025-04-09_snippet_15\n\nLANGUAGE: js\nCODE:\n```\nconst delta = signal(0);\nconst count = signal(0);\n\neffect(() => {\n  // Update `count` without subscribing to `count`:\n  count.value = count.peek() + delta.value;\n});\n\n// Setting `delta` reruns the effect:\ndelta.value = 1;\n\n// This won't rerun the effect because it didn't access `.value`:\ncount.value = 10;\n```\n\n----------------------------------------\n\nTITLE: Testing a Counter Component with Preact Testing Library\nDESCRIPTION: Test cases for the Counter component using Preact Testing Library. It verifies the initial count display and tests increment functionality with the onClick event using fireEvent and waitFor utilities.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/preact-testing-library.md#2025-04-09_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { expect } from 'expect';\nimport { h } from 'preact';\nimport { render, fireEvent, screen, waitFor } from '@testing-library/preact';\n\nimport Counter from '../src/Counter';\n\ndescribe('Counter', () => {\n  test('should display initial count', () => {\n    const { container } = render(<Counter initialCount={5}/>);\n    expect(container.textContent).toMatch('Current value: 5');\n  });\n\n  test('should increment after \"Increment\" button is clicked', async () => {\n    render(<Counter initialCount={5}/>);\n\n    fireEvent.click(screen.getByText('Increment'));\n    await waitFor(() => {\n      // .toBeInTheDocument() is an assertion that comes from jest-dom.\n      // Otherwise you could use .toBeDefined().\n      expect(screen.getByText(\"Current value: 6\")).toBeInTheDocument();\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Örnek: Preact Bileşeni için Enzyme Test (JavaScript)\nDESCRIPTION: Bir Preact Table bileşenini Enzyme'in mount fonksiyonu ile test eden örnek kod. setProps ve setTimeout kullanımını gösterir.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/tr/guide/v8/unit-testing-with-enzyme.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nlet dataSource = [{ id: '1', name: 'test-content' }, { id: '2', name: 'test-content' }],\n    table,\n    wrapper;\n\n    beforeEach(() => {\n        table = <Table dataSource={dataSource}>\n            <Table.Column dataIndex='id' />\n            <Table.Column dataIndex='name' />\n        </Table>\n        wrapper = mount(table);\n    })\n\n    afterEach(() => {\n        table = null;\n    })\n\n    it('should render checkboxMode', (done) => {\n        wrapper.setProps({\n             rowSelection: {\n                getProps: (record) => {\n                    if (record.id === '1') {\n                        return {\n                            disabled: true\n                        }\n                    }\n                }\n            }\n        });\n\n        setTimeout(() => {\n            expect(wrapper.find('.checkbox').length).to.be.equal(3);\n            expect(wrapper.find('.checkbox.disabled').length).to.be.equal(1);\n            done();\n        }, 10);\n    });\n```\n\n----------------------------------------\n\nTITLE: Basic JSX Rendering with Preact\nDESCRIPTION: Example of rendering a simple JSX structure with event handling using Preact's render function.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/tr/guide/v8/getting-started.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { h, render } from 'preact';\n\nrender((\n\t<div id=\"foo\">\n\t\t<span>Hello, world!</span>\n\t\t<button onClick={ e => alert(\"hi!\") }>Click Me</button>\n\t</div>\n), document.body);\n```\n\n----------------------------------------\n\nTITLE: Accessing Web Component Instance Methods in Preact\nDESCRIPTION: Demonstrates how to access instance methods of a custom web component using refs in Preact. The example shows using useRef and useEffect hooks to call a method on the component instance.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/web-components.md#2025-04-09_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Foo() {\n  const myRef = useRef(null);\n\n  useEffect(() => {\n    if (myRef.current) {\n      myRef.current.doSomething();\n    }\n  }, []);\n\n  return <x-foo ref={myRef} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Simple Counter Component Implementation in Preact\nDESCRIPTION: Example of a basic Counter component implemented with Preact and hooks, which displays a count value and provides a button to increment it.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/pt-br/guide/v10/unit-testing-with-enzyme.md#2025-04-09_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { h } from 'preact';\nimport { useState } from 'preact/hooks';\n\nexport default function Counter({ initialCount }) {\n  const [count, setCount] = useState(initialCount);\n  const increment = () => setCount(count + 1);\n\n  return (\n    <div>\n      Current value: {count}\n      <button onClick={increment}>Incrementar</button>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Preact Components with Named Imports\nDESCRIPTION: Shows how to import specific components from Preact using named imports and configure JSX transformation.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/tr/guide/v8/getting-started.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { h, render, Component } from 'preact';\n\n// Tell Babel to transform JSX into h() calls:\n/** @jsx h */\n```\n\n----------------------------------------\n\nTITLE: Using FunctionComponent Type with Anonymous Functions\nDESCRIPTION: Using Preact's FunctionComponent type to annotate anonymous function components, which adds children typing automatically.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/typescript.md#2025-04-09_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { h, FunctionComponent } from \"preact\";\n\nconst Card: FunctionComponent<{ title: string }> = ({ title, children }) => {\n  return (\n    <div class=\"card\">\n      <h1>{title}</h1>\n      {children}\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Suspense with Lazy Loading in Preact\nDESCRIPTION: Shows how to use Suspense and lazy from preact/compat to handle asynchronous component loading. This allows for displaying fallback content while components are loading.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/switching-to-preact.md#2025-04-09_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Suspense, lazy } from 'preact/compat';\n\nconst SomeComponent = lazy(() => import('./SomeComponent'));\n\n// Usage\n<Suspense fallback={<div>loading...</div>}>\n  <Foo>\n    <SomeComponent />\n  </Foo>\n</Suspense>\n```\n\n----------------------------------------\n\nTITLE: Using cloneElement Function\nDESCRIPTION: Demonstrates how to clone and modify Virtual DOM Elements using cloneElement.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/api-reference.md#2025-04-09_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Linkout(props) {\n  // add target=\"_blank\" to the link:\n  return cloneElement(props.children, { target: '_blank' });\n}\nrender(<Linkout><a href=\"/\">home</a></Linkout>);\n// <a href=\"/\" target=\"_blank\">home</a>\n```\n\n----------------------------------------\n\nTITLE: Client-Side Hydration with Preact\nDESCRIPTION: Shows how to hydrate a Preact component on the client-side, enabling interactivity for server-rendered content.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/blog/simplifying-islands-arch.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// client.js\nimport { hydrate } from 'preact'\nimport Counter from './Counter'\n\nconst main = () => {\n  // assuming the server rendered the component with the following ID as well.\n  const container = document.getElementById('counter')\n  hydrate(h(Counter, {}), container)\n}\n\nmain()\n```\n\n----------------------------------------\n\nTITLE: Implementing a Counter Component in Preact\nDESCRIPTION: A simple Counter component implementation in Preact that displays a value and provides a button to increment it. This component will be used in the testing examples.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v8/unit-testing-with-enzyme.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Component, h } from 'preact';\n\nexport default class Counter extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      count: props.initialCount,\n    };\n  };\n\n  render() {\n    const increment = () => this.setState(({ count }) => ({\n      count: count + 1,\n    }));\n\n    return (\n      <div>\n        Current value: {this.state.count}\n        <button onClick={increment}>Increment</button>\n      </div>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Including Preact via CDN\nDESCRIPTION: Shows how to include Preact directly in HTML using a CDN link.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/tr/guide/v8/getting-started.md#2025-04-09_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://cdn.jsdelivr.net/npm/preact/dist/preact.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Typing References with createRef in Preact\nDESCRIPTION: Using TypeScript generics with createRef to ensure type safety when referencing DOM elements in Preact components.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/typescript.md#2025-04-09_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport { h, Component, createRef } from \"preact\";\n\nclass Foo extends Component {\n  ref = createRef<HTMLAnchorElement>();\n\n  componentDidMount() {\n    // current is of type HTMLAnchorElement\n    console.log(this.ref.current);\n  }\n\n  render() {\n    return <div ref={this.ref}>Foo</div>;\n    //          ~~~\n    //       💥 Error! Ref only can be used for HTMLAnchorElement\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Enzyme and Preact Adapter\nDESCRIPTION: Command to install Enzyme and the Preact adapter for unit testing Preact applications.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/unit-testing-with-enzyme.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev enzyme enzyme-adapter-preact-pure\n```\n\n----------------------------------------\n\nTITLE: Consuming Context with Consumer Component in Preact\nDESCRIPTION: This example shows how to access context values using the Consumer component approach, which is typically used in class components. The Consumer uses a render prop pattern with a function child that receives the context value.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/context.md#2025-04-09_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n// --repl\nimport { render, createContext } from \"preact\";\n\nconst SomeComponent = props => props.children;\n// --repl-before\nconst ThemePrimary = createContext(\"#673ab8\");\n\nfunction ThemedButton() {\n  return (\n    <ThemePrimary.Consumer>\n      {theme => <button style={{ background: theme }}>Themed Button</button>}\n    </ThemePrimary.Consumer>\n  );\n}\n\nfunction App() {\n  return (\n    <ThemePrimary.Provider value=\"#8f61e1\">\n      <SomeComponent>\n        <ThemedButton />\n      </SomeComponent>\n    </ThemePrimary.Provider>\n  );\n}\n// --repl-after\nrender(<App />, document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Shallow Rendering Example\nDESCRIPTION: Demonstrates shallow rendering to output component names instead of their full render output.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/server-side-rendering.md#2025-04-09_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { shallow } from 'preact-render-to-string';\nimport { h } from 'preact';\n\nconst Foo = () => <div>foo</div>;\nconst App = <div class=\"foo\"><Foo /></div>;\n\nconsole.log(shallow(App));\n// <div class=\"foo\"><Foo /></div>\n```\n\n----------------------------------------\n\nTITLE: useEffect Initial Exercise Implementation\nDESCRIPTION: Starting point for the tutorial exercise where the effect only runs once after the initial render. The goal is to modify it to run whenever the count changes.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/tutorial/07-side-effects.md#2025-04-09_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { render } from 'preact';\nimport { useEffect, useState } from 'preact/hooks';\n\nfunction App() {\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    console.log('Count is now: ', count)\n  }, []);\n  // ^^ start here!\n\n  return <button onClick={() => setCount(count+1)}>{count}</button>\n}\n\nrender(<App />, document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Basic Ref Usage in JavaScript with Preact\nDESCRIPTION: Demonstrates how to create and manipulate refs using createRef() without rendering components. Shows basic operations like creating, reading, and updating ref values.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/tutorial/05-refs.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createRef } from 'preact'\n\n// create a ref:\nconst ref = createRef('initial value')\n// { current: 'initial value' }\n\n// read a ref's current value:\nref.current === 'initial value'\n\n// update a ref's current value:\nref.current = 'new value'\n\n// pass refs around:\nconsole.log(ref) // { current: 'new value' }\n```\n\n----------------------------------------\n\nTITLE: Installing Enzyme with Preact Adapter\nDESCRIPTION: Command to install Enzyme and the Preact adapter as development dependencies for testing Preact applications.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/pt-br/guide/v10/unit-testing-with-enzyme.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev enzyme enzyme-adapter-preact-pure\n```\n\n----------------------------------------\n\nTITLE: Rendering JSX with Preact (JavaScript)\nDESCRIPTION: Demonstrates how to use Preact's render function to create a DOM tree from JSX, including event handling.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v8/getting-started.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { h, render } from 'preact';\n\nrender((\n\t<div id=\"foo\">\n\t\t<span>Hello, world!</span>\n\t\t<button onClick={ e => alert(\"hi!\") }>Click Me</button>\n\t</div>\n), document.body);\n```\n\n----------------------------------------\n\nTITLE: Creating Virtual DOM with JSX in Preact\nDESCRIPTION: Demonstrates how to use JSX syntax to create a Virtual DOM tree, which is equivalent to the previous createElement example.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/tutorial/01-vdom.md#2025-04-09_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createElement, render } from 'preact';\n\nlet vdom = <p class=\"big\">Hello World!</p>;\n\nrender(vdom, document.body);\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages for Enzyme Testing with Preact\nDESCRIPTION: Install preact-compat-enzyme for React internal properties and preact-test-utils for partial react-addons-test-utils functionality required by Enzyme.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/zh/guide/v8/unit-testing-with-enzyme.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev preact-compat-enzyme preact-test-utils\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Clock Component (JavaScript)\nDESCRIPTION: Illustrates how to create a basic Preact component that displays the current time.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v8/getting-started.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { h, render, Component } from 'preact';\n\nclass Clock extends Component {\n\trender() {\n\t\tlet time = new Date().toLocaleTimeString();\n\t\treturn <span>{ time }</span>;\n\t}\n}\n\n// render an instance of Clock into <body>:\nrender(<Clock />, document.body);\n```\n\n----------------------------------------\n\nTITLE: Using useErrorBoundary Hook in Preact\nDESCRIPTION: Explains how to use the useErrorBoundary hook to catch errors in child components and display custom error UI. It also shows how to use the optional callback for error reporting.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/hooks.md#2025-04-09_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nconst [error, resetError] = useErrorBoundary();\n```\n\nLANGUAGE: jsx\nCODE:\n```\nconst [error] = useErrorBoundary(error => callMyApi(error.message));\n```\n\nLANGUAGE: jsx\nCODE:\n```\nconst App = props => {\n  const [error, resetError] = useErrorBoundary(\n    error => callMyApi(error.message)\n  );\n  \n  // Display a nice error message\n  if (error) {\n    return (\n      <div>\n        <p>{error.message}</p>\n        <button onClick={resetError}>Try again</button>\n      </div>\n    );\n  } else {\n    return <div>{props.children}</div>\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Using useContext Hook in Preact\nDESCRIPTION: Demonstrates how to access context in a functional component using the useContext hook. The example creates a Theme context and uses it in a DisplayTheme component.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/es/guide/v10/hooks.md#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// --repl\nimport { render, createContext } from 'preact';\nimport { useContext } from 'preact/hooks';\n\nconst OtherComponent = props => props.children;\n// --repl-before\nconst Theme = createContext('light');\n\nfunction DisplayTheme() {\n  const theme = useContext(Theme);\n  return <p>Active theme: {theme}</p>;\n}\n\n// ...later\nfunction App() {\n  return (\n    <Theme.Provider value=\"light\">\n      <OtherComponent>\n        <DisplayTheme />\n      </OtherComponent>\n    </Theme.Provider>\n  )\n}\n// --repl-after\nrender(<App />, document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Using Test IDs for Element Selection in Preact Testing\nDESCRIPTION: Using data-testid attributes to find elements when content-based selectors are unreliable. This approach decouples tests from implementation details like text content.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/preact-testing-library.md#2025-04-09_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Foo({ onClick }) {\n  return (\n    <button onClick={onClick} data-testid=\"foo\">\n      click here\n    </button>\n  );\n}\n\n// Only works if the text stays the same\nfireEvent.click(screen.getByText('click here'));\n\n// Works if we change the text\nfireEvent.click(screen.getByTestId('foo'));\n```\n\n----------------------------------------\n\nTITLE: Rendering a Preact Component\nDESCRIPTION: This example shows how to instantiate and render the Link component created in the previous snippet. It passes a href prop and child content to the component.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v8/types-of-components.md#2025-04-09_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<Link href=\"http://example.com\">Some Text</Link>\n```\n\n----------------------------------------\n\nTITLE: Kurulum: Preact Test Modüllerini Yükleme (Bash)\nDESCRIPTION: Preact bileşenlerini Enzyme ile test etmek için gerekli modüllerin npm kullanılarak yüklenmesi.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/tr/guide/v8/unit-testing-with-enzyme.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev preact-compat-enzyme preact-test-utils\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Hyperscript Usage in Preact\nDESCRIPTION: This snippet shows how to use the h() function in Preact, which is a more generalized version of React.createElement. It creates a simple anchor element with a nested span.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v8/differences-to-react.md#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nh('a', { href:'/' }, h('span', null, 'Home'))\n```\n\n----------------------------------------\n\nTITLE: Using toChildArray() in Preact vs Children.count() in React for JSX child manipulation\nDESCRIPTION: This example shows how to count children in Preact using toChildArray() compared to React's Children.count(). Preact's approach flattens and normalizes the children array before counting.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/differences-to-react.md#2025-04-09_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n// React\nfunction App(props) {\n  const cols = Children.count(props.children);\n  return <div data-columns={cols}>{props.children}</div>\n}\n\n// Preact\nfunction App(props) {\n  const cols = toChildArray(props.children).length;\n  return <div data-columns={cols}>{props.children}</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack Aliases for Preact Enzyme Testing\nDESCRIPTION: Webpack configuration with aliases needed to map React modules to their Preact equivalents for Karma test runner. These aliases ensure Enzyme works correctly with Preact.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/pt-br/guide/v8/unit-testing-with-enzyme.md#2025-04-09_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"resolve\": {\n    \"alias\": {\n        \"react-dom/server\": \"preact-render-to-string\",\n        \"react-addons-test-utils\": \"preact-test-utils\",\n        \"react\": \"preact-compat-enzyme\",\n        \"react-dom\": \"preact-compat-enzyme\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initial Preact App Component with Button\nDESCRIPTION: Defines a basic Preact App component with a button. This snippet serves as the starting point for the interactive exercise, where learners are expected to add a click handler.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/tutorial/02-events.md#2025-04-09_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { render } from \"preact\";\n\nfunction App() {\n  return (\n    <div>\n      <p class=\"count\">Count:</p>\n      <button>Click Me!</button>\n    </div>\n  )\n}\n\nrender(<App />, document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Rendering GitHub Stars Component in Preact JSX\nDESCRIPTION: Example showing how to import and render the Stars component with a specific repository as a prop. This demonstrates passing props to a Preact component.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/index.md#2025-04-09_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport Stars from './stars';\nrender(\n    <Stars repo=\"preactjs/preact\" />,\n    document.body\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering a Todo List in Preact JSX\nDESCRIPTION: Example of rendering the TodoList component to the DOM using Preact's render function. This demonstrates how to mount a component to a specific DOM element.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/index.md#2025-04-09_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport TodoList from './todo-list';\nrender(<TodoList />, document.body);\n```\n\n----------------------------------------\n\nTITLE: Destructuring Props in a Preact Component\nDESCRIPTION: This snippet demonstrates how to use ES6 destructuring to simplify the Link component. It maps keys from props to local variables in the render method's arguments.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v8/types-of-components.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nclass Link extends Component {\n\trender({ href, children }) {\n\t\treturn <a {...{ href, children }} />;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Настройка Enzyme для использования с Preact\nDESCRIPTION: Конфигурация Enzyme для использования адаптера Preact в тестовом окружении.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/ru/guide/v8/unit-testing-with-enzyme.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { configure } from 'enzyme';\nimport Adapter from 'enzyme-adapter-preact-pure';\n\nconfigure({ adapter: new Adapter });\n```\n\n----------------------------------------\n\nTITLE: Using Children API in React vs Direct Array Methods in Preact\nDESCRIPTION: Demonstrates how to handle children in React using the Children API, and the simpler approach in Preact using direct array methods or toChildArray().\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/zh/guide/v10/differences-to-react.md#2025-04-09_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n// React:\nfunction App(props) {\n  return <Modal content={Children.only(props.children)} />\n}\n\n// Preact: use props.children directly:\nfunction App(props) {\n  return <Modal content={props.children} />\n}\n\n// React\nfunction App(props) {\n  const cols = Children.count(props.children);\n  return <div data-columns={cols}>{props.children}</div>\n}\n\n// Preact\nfunction App(props) {\n  const cols = toChildArray(props.children).length;\n  return <div data-columns={cols}>{props.children}</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Using act() for State Updates in Enzyme Tests\nDESCRIPTION: Example of using act() from preact/test-utils to handle state updates when directly calling event handlers in tests.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/unit-testing-with-enzyme.md#2025-04-09_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport { act } from 'preact/test-utils';\n```\n\nLANGUAGE: jsx\nCODE:\n```\nit('should increment after \"Increment\" button is clicked', () => {\n    const wrapper = mount(<Counter initialCount={5}/>);\n    const onClick = wrapper.find('button').props().onClick;\n\n    act(() => {\n      // Invoke the button's click handler, but this time directly, instead of\n      // via an Enzyme API\n      onClick();\n    });\n    // Refresh Enzyme's view of the output\n    wrapper.update();\n\n    expect(wrapper.text()).to.include('Current value: 6');\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Enzyme for Preact Testing\nDESCRIPTION: Command to install Enzyme and the Preact adapter in your project as development dependencies.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v8/unit-testing-with-enzyme.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev enzyme enzyme-adapter-preact-pure\n```\n\n----------------------------------------\n\nTITLE: Component Rendering with Props and State in Preact and React\nDESCRIPTION: Demonstrates how to access props and state in a component's render method in both Preact and React. Preact allows destructuring props and state as parameters to render().\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/zh/guide/v10/differences-to-react.md#2025-04-09_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// In Preact and React\nclass Foo extends Component {\n  state = { age: 1 };\n\n  render() {\n    return <div>Name: {this.props.name}, Age: {this.state.age}</div>;\n  }\n}\n\n// Only works in Preact\nclass Foo extends Component {\n  state = { age: 1 };\n\n  render({ name }, { age }) {\n    return <div>Name: {name}, Age: {age}</div>;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using JavaScript Expressions in JSX with Preact\nDESCRIPTION: Shows how to embed JavaScript expressions within JSX using curly braces for dynamic class names and content.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/tutorial/01-vdom.md#2025-04-09_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nlet maybeBig = Math.random() > .5 ? 'big' : 'small';\n\nlet vdom = <p class={maybeBig}>Hello {40 + 2}!</p>;\n                 // ^---JS---^       ^--JS--^\n```\n\n----------------------------------------\n\nTITLE: Basic Preact Usage Without Build Tools\nDESCRIPTION: Demonstrates how to use Preact directly in the browser without any build tools using ES modules.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/getting-started.md#2025-04-09_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\n  import { h, render } from 'https://esm.sh/preact';\n\n  // Create your app\n  const app = h('h1', null, 'Hello World!');\n\n  render(app, document.body);\n</script>\n```\n\n----------------------------------------\n\nTITLE: Shortened Component Re-rendering Prevention in Preact\nDESCRIPTION: Shows a more concise way to prevent component re-rendering using an arrow function property.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/es/guide/v8/external-dom-mutations.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclass Block extends Component {\n  shouldComponentUpdate = () => false;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MixedComponent for Rudimentary Mixins in JavaScript\nDESCRIPTION: This snippet shows how to create a MixedComponent class that extends Preact's Component. It provides basic support for mixins by assigning properties from each mixin to the component instance in the constructor.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/es/guide/v8/extending-component.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nclass MixedComponent extends Component {\n    constructor() {\n        super();\n        (this.mixins || []).forEach( m => Object.assign(this, m) );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Node Module Alias Setup\nDESCRIPTION: Server-side configuration for aliasing React to Preact using module-alias\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v8/switching-to-preact.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar path = require('path')\nvar moduleAlias = require('module-alias')\n\nmoduleAlias.addAliases({\n  'react': 'preact-compat/dist/preact-compat.min',\n  'react-dom': 'preact-compat/dist/preact-compat.min',\n  'create-react-class': path.resolve(__dirname, './create-preact-class')\n})\n```\n\n----------------------------------------\n\nTITLE: JSX Mode Rendering\nDESCRIPTION: Example of using JSX mode for rendering components in JSX format, useful for testing.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/server-side-rendering.md#2025-04-09_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport render from 'preact-render-to-string/jsx';\nimport { h } from 'preact';\n\nconst App = <div data-foo={true} />;\n\nconsole.log(render(App));\n// Logs: <div data-foo={true} />\n```\n\n----------------------------------------\n\nTITLE: Creating a BoundComponent Class in Preact\nDESCRIPTION: Example of extending Preact's Component class to create a BoundComponent that automatically binds methods listed in a 'bind' property. This allows methods to maintain the correct 'this' context when used as event handlers.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/tr/guide/v8/extending-component.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass BoundComponent extends Component {\n    // example: get bound methods\n    binds() {\n        let list = this.bind || [],\n            binds = this._binds;\n        if (!binds) {\n            binds = this._binds = {};\n            for (let i=list.length; i--; ) {\n                binds[list[i]] = this[list[i]].bind(this);\n            }\n        }\n        return binds;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Unit Testing a Preact Counter Component with Enzyme\nDESCRIPTION: Example of how to write unit tests for the Counter component using Enzyme's mount method, verifying initial rendering and interaction behavior.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/pt-br/guide/v10/unit-testing-with-enzyme.md#2025-04-09_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { expect } from 'chai';\nimport { h } from 'preact';\nimport { mount } from 'enzyme';\n\nimport Counter from '../src/Counter';\n\ndescribe('Counter', () => {\n  it('deve exibir a contagem inicial', () => {\n    const wrapper = mount(<Counter initialCount={5}/>);\n    expect(wrapper.text()).to.include('Valor Atual: 5');\n  });\n\n  it('deve incrementar após clicar no botão \"Incrementar\"', () => {\n    const wrapper = mount(<Counter initialCount={5}/>);\n\n    wrapper.find('button').simulate('click');\n\n    expect(wrapper.text()).to.include('Valor Atual: 6');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Limited Input Component Class Implementation\nDESCRIPTION: Class-based implementation of a controlled input component that limits input to 3 characters, using refs to handle edge cases and maintain selection state.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/forms.md#2025-04-09_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nclass LimitedInput extends Component {\n  state = { value: '' }\n  inputRef = createRef(null)\n\n  onInput = (e) => {\n    if (e.currentTarget.value.length <= 3) {\n      this.setState({ value: e.currentTarget.value });\n    } else {\n      const start = this.inputRef.current.selectionStart;\n      const end = this.inputRef.current.selectionEnd;\n      const diffLength = Math.abs(e.currentTarget.value.length - this.state.value.length);\n      this.inputRef.current.value = this.state.value;\n      // Restore selection\n      this.inputRef.current.setSelectionRange(start - diffLength, end - diffLength);\n    }\n  }\n\n  render(_, { value }) {\n    return (\n      <div class=\"form-example\">\n        <label>\n          This input is limited to 3 characters:{' '}\n          <input ref={this.inputRef} value={value} onInput={this.onInput} />\n        </label>\n      </div>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Controlled Checkbox Component in Preact\nDESCRIPTION: Example showing how to implement a controlled checkbox component in Preact using click events instead of change events. The component maintains its checked state and toggles it on click.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v8/forms.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyForm extends Component {\n    toggle = e => {\n        let checked = !this.state.checked;\n        this.setState({ checked });\n    };\n    render({ }, { checked }) {\n        return (\n            <label>\n                <input\n                    type=\"checkbox\"\n                    checked={checked}\n                    onClick={this.toggle} />\n            </label>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Ticking Clock Component\nDESCRIPTION: Full implementation of a Clock component with lifecycle methods for timer management and state updates.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/tr/guide/v8/getting-started.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { h, render, Component } from 'preact';\n\nclass Clock extends Component {\n\tconstructor() {\n\t\tsuper();\n\t\t// set initial time:\n\t\tthis.state.time = Date.now();\n\t}\n\n\tcomponentDidMount() {\n\t\t// update time every second\n\t\tthis.timer = setInterval(() => {\n\t\t\tthis.setState({ time: Date.now() });\n\t\t}, 1000);\n\t}\n\n\tcomponentWillUnmount() {\n\t\t// stop when not renderable\n\t\tclearInterval(this.timer);\n\t}\n\n\trender(props, state) {\n\t\tlet time = new Date(state.time).toLocaleTimeString();\n\t\treturn <span>{ time }</span>;\n\t}\n}\n\n// render an instance of Clock into <body>:\nrender(<Clock />, document.body);\n```\n\n----------------------------------------\n\nTITLE: Radio Buttons with Incorrect linkState Implementation\nDESCRIPTION: Shows an incorrect implementation of radio buttons using linkState that doesn't work as expected because both radio buttons maintain their own independent state values.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/es/guide/v8/linked-state.md#2025-04-09_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nclass Foo extends Component {\n  render({ }, { yes, no }) {\n    return (\n      <div>\n        <input type=\"radio\" name=\"demo\"\n          value=\"yes\" checked={yes}\n          onChange={linkState(this, 'yes')}\n        />\n        <input type=\"radio\" name=\"demo\"\n          value=\"no\" checked={no}\n          onChange={linkState(this, 'no')}\n        />\n      </div>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a BoundComponent Class in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a BoundComponent class that extends Preact's Component. It adds a binds() method to automatically bind specified methods to the component instance.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/zh/guide/v8/extending-component.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass BoundComponent extends Component {\n    // example: get bound methods 绑定方法\n    binds() {\n        let list = this.bind || [],\n            binds = this._binds;\n        if (!binds) {\n            binds = this._binds = {};\n            for (let i=list.length; i--; ) {\n                binds[list[i]] = this[list[i]].bind(this);\n            }\n        }\n        return binds;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Browserify Alias Configuration\nDESCRIPTION: Package.json configuration for aliasing React using aliasify transform in Browserify\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v8/switching-to-preact.md#2025-04-09_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"aliasify\": {\n    \"aliases\": {\n      \"react\": \"preact-compat\",\n      \"react-dom\": \"preact-compat\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Server-Side Rendering in Preact\nDESCRIPTION: Demonstrates how to use preact-render-to-string to render a simple Preact component to an HTML string.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/pt-br/guide/v10/server-side-rendering.md#2025-04-09_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport render from 'preact-render-to-string';\nimport { h } from 'preact';\n\nconst App = <div class=\"foo\">content</div>;\n\nconsole.log(render(App));\n// <div class=\"foo\">content</div>\n```\n\n----------------------------------------\n\nTITLE: Creating a MixedComponent with Rudimentary Mixins in JavaScript\nDESCRIPTION: This snippet shows how to create a MixedComponent class that extends Preact's Component. It adds support for rudimentary mixins by assigning properties from each mixin to the component instance in the constructor.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v8/extending-component.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nclass MixedComponent extends Component {\n    constructor() {\n        super();\n        (this.mixins || []).forEach( m => Object.assign(this, m) );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Parcel Alias Configuration\nDESCRIPTION: Package.json configuration for aliasing React to preact-compat in Parcel\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v8/switching-to-preact.md#2025-04-09_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"alias\": {\n    \"react\": \"preact-compat\",\n    \"react-dom\": \"preact-compat\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Portal Usage in Preact\nDESCRIPTION: Shows the HTML document structure needed for portal implementation, with separate mount points for the main app and portal content like modals.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/switching-to-preact.md#2025-04-09_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <body>\n    <!-- App is rendered here -->\n    <div id=\"app\"></div>\n    <!-- Modals should be rendered here -->\n    <div id=\"modals\"></div>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Ideal Direct State Access in JSX (Non-functional)\nDESCRIPTION: This snippet demonstrates the ideal, but non-functional, direct state access within a component. While clear and easy to understand, this approach doesn't work as the component doesn't update when the state changes.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/blog/introducing-signals.md#2025-04-09_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n// Imagine this is some global state and the whole app needs access to:\nlet count = 0;\n \nfunction Counter() {\n return (\n   <button onClick={() => count++}>\n     value: {count}\n   </button>\n );\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Observed Attributes for Web Component in Preact\nDESCRIPTION: Shows different ways to specify observed attributes for a web component created from a Preact component. Examples include using static properties and PropTypes.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/web-components.md#2025-04-09_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport register from 'preact-custom-element';\n\n// <x-greeting name=\"Bo\"></x-greeting>\nclass Greeting extends Component {\n  // Register as <x-greeting>:\n  static tagName = 'x-greeting';\n\n  // Track these attributes:\n  static observedAttributes = ['name'];\n\n  render({ name }) {\n    return <p>Hello, {name}!</p>;\n  }\n}\nregister(Greeting);\n```\n\nLANGUAGE: jsx\nCODE:\n```\n// Other option: use PropTypes:\nfunction FullName({ first, last }) {\n  return <span>{first} {last}</span>\n}\n\nFullName.propTypes = {\n  first: Object,   // you can use PropTypes, or this\n  last: Object     // trick to define un-typed props.\n};\n\nregister(FullName, 'full-name');\n```\n\n----------------------------------------\n\nTITLE: Rendering a Todo List in Preact with Keys\nDESCRIPTION: This snippet shows the correct way to render a Todo list in Preact using keys. It demonstrates how to add a key prop to list items for efficient updates.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/tutorial/08-keys.md#2025-04-09_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function TodoList() {\n  const [todos, setTodos] = useState(['wake up', 'make bed'])\n\n  function wakeUp() {\n    setTodos(['make bed'])\n  }\n\n  return (\n    <div>\n      <ul>\n        {todos.map(todo => (\n          <li key={todo}>{todo}</li>\n          //  ^^^^^^^^^^ adding a key prop\n        ))}\n      </ul>\n      <button onClick={wakeUp}>I'm Awake!</button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Example of External DOM Mutation Handling in Preact\nDESCRIPTION: Provides a detailed example of a Preact component that allows external DOM mutations. It demonstrates how to disable re-rendering, handle props changes, perform DOM modifications after mounting, and clean up before unmounting.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/tr/guide/v8/external-dom-mutations.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nclass Example extends Component {\n  shouldComponentUpdate() {\n    // do not re-render via diff:\n    return false;\n  }\n\n  componentWillReceiveProps(nextProps) {\n    // you can do something with incoming props here if you need\n  }\n\n  componentDidMount() {\n    // now mounted, can freely modify the DOM:\n    let thing = document.createElement('maybe-a-custom-element');\n    this.base.appendChild(thing);\n  }\n\n  componentWillUnmount() {\n    // component is about to be removed from the DOM, perform any cleanup.\n  }\n\n  render() {\n    return <div class=\"example\" />;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Signals for Local Component State in Preact\nDESCRIPTION: Example of using useSignal and useComputed hooks to create component-specific state. This approach is ideal for state that doesn't need to be part of the global application logic.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/pt-br/guide/v10/signals.md#2025-04-09_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useSignal, useComputed } from \"@preact/signals\";\n\nfunction Counter() {\n  const count = useSignal(0);\n  const double = useComputed(() => count.value * 2);\n\n  return (\n    <div>\n      <p>{count} x 2 = {double}</p>\n      <button onClick={() => count.value++}>click me</button>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Component Class Using this.props and this.state in Preact/React\nDESCRIPTION: A class component that uses this.props and this.state within the render method, demonstrating the standard approach that works in both Preact and React.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/kr/guide/v10/differences-to-react.md#2025-04-09_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// Preact와 React 모두에서 작동함\nclass Foo extends Component {\n  state = { age: 1 };\n\n  render() {\n    return <div>Name: {this.props.name}, Age: {this.state.age}</div>;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Valid and Invalid Event Handler Usage in JSX\nDESCRIPTION: This code illustrates the correct and incorrect ways to assign event handlers in Preact components, emphasizing that handlers must be functions.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/debugging.md#2025-04-09_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n// valid\n<div onClick={() => console.log(\"click\")} />\n\n// invalid\n<div onClick={console.log(\"click\")} />\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Selector and Wrapper-based State Management Approaches\nDESCRIPTION: Code examples showing common patterns for state management that rely on selectors or component wrappers, which Preact Signals aims to improve upon.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/es/blog/introducing-signals.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Suscripción basada en selector :(\nfunction Counter() {\n  const value = useSelector(state => state.count);\n  // ...\n}\n \n// Suscripción basada en una función envolvente :(\nconst counterState = new Counter();\n \nconst Counter = observe(props => {\n  const value = counterState.count;\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Alternative State Management Approaches Comparison\nDESCRIPTION: This code snippet compares different state management approaches, illustrating the verbose selector-based and wrapper function-based subscription patterns that signals aim to improve upon.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/zh/blog/introducing-signals.md#2025-04-09_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n// 基于 Selector 的订阅 :(\nfunction Counter() {\n  const value = useSelector(state => state.count);\n  // ...\n}\n \n// 基于包装函数的订阅 :(\nconst counterState = new Counter();\n \nconst Counter = observe(props => {\n  const value = counterState.count;\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Event Handling: onChange vs onInput\nDESCRIPTION: Shows the difference in event handling between React and Preact, where Preact uses the standard 'onInput' event instead of React's 'onChange' for form inputs.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/differences-to-react.md#2025-04-09_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n// React\n<input onChange={e => console.log(e.currentTarget.value)} />\n\n// Preact\n<input onInput={e => console.log(e.currentTarget.value)} />\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Correct Key Usage in JSX List Rendering\nDESCRIPTION: This snippet illustrates the proper way to assign unique keys when rendering a list in JSX, using object properties to ensure uniqueness and improve Preact's rendering performance.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/debugging.md#2025-04-09_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nconst persons = [\n  { name: 'John', age: 22 },\n  { name: 'Sarah', age: 24}\n];\n\n// Somewhere later in your component\n<div>\n  {persons.map(({ name, age }) => {\n    return <p key={name}>{name}, Age: {age}</p>;\n  })}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Valid and Invalid Ref Usage in JSX\nDESCRIPTION: This snippet shows examples of valid and invalid ways to use the 'ref' property in Preact components, including function refs, createRef, and deprecated string refs.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/debugging.md#2025-04-09_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n// valid\n<div ref={e => {/* ... */)}} />\n\n// valid\nconst ref = createRef();\n<div ref={ref} />\n\n// Invalid\n<div ref=\"ref\" />\n```\n\n----------------------------------------\n\nTITLE: Using Context for Global State Management in Preact\nDESCRIPTION: Implementation of global state management using Preact's Context API. This pattern allows any component in the tree to access the application state without prop drilling, using createContext and useContext hooks.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/pt-br/guide/v10/signals.md#2025-04-09_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createContext } from \"preact\";\nimport { useContext } from \"preact/hooks\";\nimport { createAppState } from \"./my-app-state\";\n\nconst AppState = createContext();\n\nrender(\n  <AppState.Provider value={createAppState()}>\n    <App />\n  </AppState.Provider>\n);\n\n // ...mais tarde, quando você precisar acessar o estado da sua aplicação\nfunction App() {\n  const state = useContext(AppState);\n  return <p>{state.completed}</p>;\n}\n```\n\n----------------------------------------\n\nTITLE: Equivalent Custom Handler Implementation to linkState\nDESCRIPTION: Shows the manual implementation that would be equivalent to using linkState with a custom path, demonstrating how linkState works internally when specifying a custom property path.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/es/guide/v8/linked-state.md#2025-04-09_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n// handler retornado por linkState:\nhandler = linkState(this, 'thing', 'foo.bar');\n\n// ...es funcionalmente equivalente a:\nhandler = event => {\n  this.setState({\n    thing: event.foo.bar\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel for JSX Transformation (JSON)\nDESCRIPTION: Shows how to configure Babel to transform JSX for Preact using different versions of Babel.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v8/getting-started.md#2025-04-09_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    [\"@babel/plugin-transform-react-jsx\", { \"pragma\":\"h\" }]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Application State as Props in Preact\nDESCRIPTION: Example of how to create application state and pass it as props to a component in a Preact application. This pattern is useful for small applications but can become cumbersome in larger ones.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/pt-br/guide/v10/signals.md#2025-04-09_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst state = createAppState();\n\n// ...depois:\n<TodoList state={state} />\n```\n\n----------------------------------------\n\nTITLE: Typing Class Components with Generics in Preact\nDESCRIPTION: Using TypeScript generics with Preact's Component class to type props and state in class components.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/typescript.md#2025-04-09_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n// Types for props\ninterface ExpandableProps {\n  title: string;\n};\n\n// Types for state\ninterface ExpandableState {\n  toggled: boolean;\n};\n\n\n// Bind generics to ExpandableProps and ExpandableState\nclass Expandable extends Component<ExpandableProps, ExpandableState> {\n  constructor(props: ExpandableProps) {\n    super(props);\n    // this.state is an object with a boolean field `toggle`\n    // due to ExpandableState\n    this.state = {\n      toggled: false\n    };\n  }\n  // `this.props.title` is string due to ExpandableProps\n  render() {\n    return (\n      <div class=\"expandable\">\n        <h2>\n          {this.props.title}{\" \"}\n          <button\n            onClick={() => this.setState({ toggled: !this.state.toggled })}\n          >\n            Toggle\n          </button>\n        </h2>\n        <div hidden={this.state.toggled}>{this.props.children}</div>\n      </div>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Preact Debug Tools in JavaScript\nDESCRIPTION: This snippet shows how to import and initialize Preact debug tools in the main entry file of a Preact application. It demonstrates the correct order of imports and rendering.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/debugging.md#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// Must be the first import\nimport \"preact/debug\";\nimport { render } from 'preact';\nimport App from './components/App';\n\nrender(<App />, document.getElementById('root'));\n```\n\n----------------------------------------\n\nTITLE: Implementing render() Method in Preact Component\nDESCRIPTION: Demonstrates how to create a Preact component by extending the Component class and implementing the required render() method. The render method receives props and state as arguments and returns a Preact element.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/fr/guide/v8/api-reference.md#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Component } from 'preact';\n\nclass MyComponent extends Component {\n\trender(props, state) {\n\t\t// props === this.props\n\t\t// state === this.state\n\n\t\treturn <h1>Hello, {props.name}!</h1>;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Correct Hook Usage in Preact Function Components\nDESCRIPTION: This snippet shows the proper way to use hooks inside a Preact function component, contrasting it with an invalid usage outside of a component.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/debugging.md#2025-04-09_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n// Invalid, must be used inside a component\nconst [value, setValue] = useState(0);\n\n// valid\nfunction Foo() {\n  const [value, setValue] = useState(0);\n  return <button onClick={() => setValue(value + 1)}>{value}</button>;\n}\n```\n\n----------------------------------------\n\nTITLE: Vite Project Setup Commands\nDESCRIPTION: Commands for creating and managing a Preact project using Vite build tool.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/getting-started.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm init preact\n\n# Go into the generated project folder\ncd my-preact-app\n\n# Start a development server\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Creating Global Application State with Signals in Preact\nDESCRIPTION: A function that creates a global application state using signals and computed values for a todo list application. It creates a todos signal and a computed signal that calculates the number of completed todos.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/pt-br/guide/v10/signals.md#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nfunction createAppState() {\n  const todos = signal([]);\n\n  const completed = computed(() => {\n    return todos.value.filter(todo => todo.completed).length\n  });\n\n  return { todos, completed }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Virtual DOM Object in JavaScript\nDESCRIPTION: Demonstrates how to create a simple Virtual DOM object representation of a paragraph element with text content.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/tutorial/01-vdom.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet vdom = {\n  type: 'p',         // a <p> element\n  props: {\n    class: 'big',    // with class=\"big\"\n    children: [\n      'Hello World!' // and the text \"Hello World!\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rollup Aliasing Configuration\nDESCRIPTION: Rollup configuration for aliasing React imports to Preact using @rollup/plugin-alias.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/getting-started.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport alias from '@rollup/plugin-alias';\n\nmodule.exports = {\n  plugins: [\n    alias({\n      entries: [\n        { find: 'react', replacement: 'preact/compat' },\n        { find: 'react-dom/test-utils', replacement: 'preact/test-utils' },\n        { find: 'react-dom', replacement: 'preact/compat' },\n        { find: 'react/jsx-runtime', replacement: 'preact/jsx-runtime' }\n      ]\n    })\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Handling Custom Events from Web Components in Preact\nDESCRIPTION: Example showing how Preact handles event case preservation for custom elements. While Preact normalizes standard DOM events, it preserves the case of unrecognized event handlers for custom elements.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/pt-br/guide/v10/web-components.md#2025-04-09_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n// evento DOM nativo -> ouve um evento \"clique\"\n<div onClick={() => console.log('click')} />\n\n// Elemento personalizado\n// Adicionar manipulador para o evento \"IonChange\"\n<my-foo onIonChange={() => console.log('IonChange')} />\n// Adicionar manipulador para o evento \"ionChange\" (observe a caixa)\n<my-foo onionChange={() => console.log('ionChange')} />\n```\n\n----------------------------------------\n\nTITLE: Deep Component with Prerender Data in Preact\nDESCRIPTION: This snippet shows a component that can use data passed through prerendering, demonstrating how to avoid the need for a global store or context for certain data.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/blog/prerendering-preset-vite.md#2025-04-09_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n// src/some/deep/Component.jsx\nfunction MyComponent({ myFetchData }) {\n\tconst [myData, setMyData] = useState(myFetchData || 'some-fallback');\n\t...\n}\n```\n\n----------------------------------------\n\nTITLE: Using waitFor with Preact Testing Library\nDESCRIPTION: An example showing incorrect test implementation without waitFor. The assertion might fail because Preact hasn't finished rendering to the DOM when the assertion is made.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/preact-testing-library.md#2025-04-09_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\ntest('should increment counter\", async () => {\n  render(<Counter initialCount={5}/>);\n\n  fireEvent.click(screen.getByText('Increment'));\n  // WRONG: Preact likely won't have finished rendering here\n  expect(screen.getByText(\"Current value: 6\")).toBeInTheDocument();\n});\n```\n\n----------------------------------------\n\nTITLE: Using Legacy Context API in Preact\nDESCRIPTION: This snippet demonstrates the legacy Context API which uses getChildContext method to provide context and accesses it via the second argument in function components or this.context in class components. This API is considered deprecated due to known update issues.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/context.md#2025-04-09_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n// --repl\nimport { render } from \"preact\";\n\nconst SomeOtherComponent = props => props.children;\n// --repl-before\nfunction ThemedButton(_props, context) {\n  return (\n    <button style={{ background: context.theme }}>\n      Themed Button\n    </button>\n  );\n}\n\nclass App extends Component {\n  getChildContext() {\n    return {\n      theme: \"#673ab8\"\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <SomeOtherComponent>\n          <ThemedButton />\n        </SomeOtherComponent>\n      </div>\n    );\n  }\n}\n// --repl-after\nrender(<App />, document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Simple Clock Component Implementation\nDESCRIPTION: Basic implementation of a Clock component that displays the current time.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/tr/guide/v8/getting-started.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { h, render, Component } from 'preact';\n\nclass Clock extends Component {\n\trender() {\n\t\tlet time = new Date().toLocaleTimeString();\n\t\treturn <span>{ time }</span>;\n\t}\n}\n\n// render an instance of Clock into <body>:\nrender(<Clock />, document.body);\n```\n\n----------------------------------------\n\nTITLE: Installing Signals Package\nDESCRIPTION: NPM installation command for adding Signals to a Preact project.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/signals.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @preact/signals\n```\n\n----------------------------------------\n\nTITLE: Using 'class' Attribute in JSX with Preact\nDESCRIPTION: Preact allows using the 'class' attribute directly in JSX, while also supporting 'className' for React compatibility.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/zh/guide/v10/differences-to-react.md#2025-04-09_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n// This:\n<div class=\"foo\" />\n\n// ...和下面的一样:\n<div className=\"foo\" />\n```\n\n----------------------------------------\n\nTITLE: Adding a Form to a Preact Component\nDESCRIPTION: Expands the Hello World component by adding a form with a text input and submit button.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/tutorial.md#2025-04-09_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n// --repl\nimport { h, render, Component } from 'preact';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <h1>Hello, world!</h1>\n        <form>\n          <input type=\"text\" />\n          <button type=\"submit\">Update</button>\n        </form>\n      </div>\n    );\n  }\n}\n\nrender(<App />, document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Accessing Web Component Instance Methods using Refs in Preact\nDESCRIPTION: Example demonstrating how to access methods on a web component instance by using Preact refs. The ref provides direct access to the DOM element instance allowing method calls.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/pt-br/guide/v10/web-components.md#2025-04-09_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Foo() {\n  const myRef = useRef(null);\n\n  useEffect(() => {\n    if (myRef.current) {\n      myRef.current.doSomething();\n    }\n  }, []);\n\n  return <x-foo ref={myRef} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Children API Usage Comparison\nDESCRIPTION: Compares React's Children.only API usage with Preact's simpler direct props.children approach, showing how Preact eliminates the need for special Children utilities.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/kr/guide/v10/differences-to-react.md#2025-04-09_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n// React:\nfunction App(props) {\n  return <Modal content={Children.only(props.children)} />\n}\n\n// Preact : props.children 바로 사용:\nfunction App(props) {\n  return <Modal content={props.children} />\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Virtual DOM Elements with Preact's h Function in JavaScript\nDESCRIPTION: Shows how to use Preact's h (createElement) function to create Virtual DOM elements. The example demonstrates creating elements with various attributes and child elements.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/tr/guide/v8/api-reference.md#2025-04-09_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport { h } from 'preact';\n\nh('div', { id: 'foo' }, 'Hello!');\n// <div id=\"foo\">Hello!</div>\n\nh('div', { id: 'foo' }, 'Hello', null, ['Preact!']);\n// <div id=\"foo\">Hello Preact!</div>\n\nh(\n\t'div',\n\t{ id: 'foo' },\n\th('span', null, 'Hello!')\n);\n// <div id=\"foo\"><span>Hello!</span></div>\n```\n\n----------------------------------------\n\nTITLE: Initial Exercise Setup for useEffect\nDESCRIPTION: Setup code for a useEffect exercise where the goal is to modify the effect to log when count changes. Contains a utility function to check if the solution is correct.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/tutorial/07-side-effects.md#2025-04-09_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nuseRealm(function (realm) {\n  var win = realm.globalThis;\n  var prevConsoleLog = win.console.log;\n  win.console.log = function(m, s) {\n    if (/Count is now/.test(m) && s === 1) {\n      solutionCtx.setSolved(true);\n    }\n    return prevConsoleLog.apply(win.console, arguments);\n  };\n\n  return function () {\n    win.console.log = prevConsoleLog;\n  };\n}, []);\n```\n\n----------------------------------------\n\nTITLE: Implementing State and Event Handling in Preact\nDESCRIPTION: Adds state management to the component and connects the input field to state via the onInput event handler.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/tutorial.md#2025-04-09_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n// --repl\nimport { h, render, Component } from 'preact';\n\nclass App extends Component {\n  // Initialise our state. For now we only store the input value\n  state = { value: '' }\n\n  onInput = ev => {\n    // This will schedule a state update. Once updated the component\n    // will automatically re-render itself.\n    this.setState({ value: ev.currentTarget.value });\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Hello, world!</h1>\n        <form>\n          <input type=\"text\" value={this.state.value} onInput={this.onInput} />\n          <button type=\"submit\">Update</button>\n        </form>\n      </div>\n    );\n  }\n}\n\nrender(<App />, document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Setting Complex Properties on Custom Web Component in Preact\nDESCRIPTION: Shows how to set complex property values on a custom web component using Preact. The example defines a 'context-menu' element with a 'position' setter and demonstrates setting it in JSX.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/web-components.md#2025-04-09_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\ncustomElements.define('context-menu', class extends HTMLElement {\n  set position({ x, y }) {\n    this.style.cssText = `left:${x}px; top:${y}px;`;\n  }\n});\n\nfunction Foo() {\n  return <context-menu position={{ x: 10, y: 20 }}> ... </context-menu>;\n}\n```\n\n----------------------------------------\n\nTITLE: Handling dangerouslySetInnerHTML in Preact X\nDESCRIPTION: Example showing how dangerouslySetInnerHTML affects child diffing in Preact X\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/upgrade-guide.md#2025-04-09_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<div dangerouslySetInnerHTML=\"foo\">\n  <span>I will be skipped</span>\n  <p>So will I</p>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Clock Component in Preact\nDESCRIPTION: Implements a simple clock component that displays the current time, but doesn't update.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/tutorial.md#2025-04-09_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n// --repl\nimport { h, render, Component } from 'preact';\n\nclass Clock extends Component {\n  render() {\n    let time = new Date().toLocaleTimeString();\n    return <span>{time}</span>;\n  }\n}\n\nrender(<Clock />, document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: JSX to JavaScript Compilation\nDESCRIPTION: Compares how JSX is compiled to JavaScript function calls in Preact and React, demonstrating Preact's more concise output.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/differences-to-react.md#2025-04-09_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<a href=\"/\">\n  <span>Home</span>\n</a>\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Preact:\nh(\n  'a',\n  { href:'/' },\n  h('span', null, 'Home')\n);\n\n// React:\nReact.createElement(\n  'a',\n  { href:'/' },\n  React.createElement('span', null, 'Home')\n);\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Index as Key in Preact\nDESCRIPTION: This snippet demonstrates an incorrect way of using keys in Preact, where the array index is used as the key. This approach can lead to inefficient updates and should be avoided.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/ru/tutorial/08-keys.md#2025-04-09_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nitems.map((item, index) => <li key={index}>{item}</li>\n```\n\n----------------------------------------\n\nTITLE: Using Callback Refs in Preact Components\nDESCRIPTION: Shows how to use callback refs by passing a function to the ref prop in both class and function components. As of Preact 10.23.0, the callback can return a cleanup function that will be called when the component unmounts.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/refs.md#2025-04-09_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n// --repl\nimport { render, Component } from \"preact\";\n// --repl-before\nclass MyInput extends Component {\n  render() {\n    return (\n      <input ref={(dom) => {\n        console.log('Mounted:', dom);\n\n        // As of Preact 10.23.0, you can optionally return a cleanup function\n        return () => {\n          console.log('Unmounted:', dom);\n        };\n      }} />\n    );\n  }\n}\n// --repl-after\nrender(<MyInput />, document.getElementById(\"app\"));\n```\n\nLANGUAGE: jsx\nCODE:\n```\n// --repl\nimport { render } from \"preact\";\n// --repl-before\nfunction MyInput() {\n  return (\n    <input ref={(dom) => {\n      console.log('Mounted:', dom);\n\n      // As of Preact 10.23.0, you can optionally return a cleanup function\n      return () => {\n        console.log('Unmounted:', dom);\n      };\n    }} />\n  );\n}\n// --repl-after\nrender(<MyInput />, document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Correct Ways to Render Preact Components\nDESCRIPTION: Demonstrates the correct ways to render Preact components using createElement or JSX syntax, and highlights incorrect methods to avoid.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/tutorial/01-vdom.md#2025-04-09_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nconst App = () => <div>foo</div>;\n\n// DON'T: Invoking components directly means they won't be counted as a\n// VNode and hence not be able to use functionality relating to vnodes.\nrender(App(), rootElement); // ERROR\nrender(App, rootElement); // ERROR\n\n// DO: Passing components using createElement() or JSX allows Preact to render correctly:\nrender(createElement(App), rootElement); // success\nrender(<App />, rootElement); // success\n```\n\n----------------------------------------\n\nTITLE: Using createContext API in Preact\nDESCRIPTION: Example demonstrating how to create and use the modern Context API in Preact. It shows creating a Theme context, providing a value at the top level, and consuming it in a child component.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/pt-br/guide/v10/context.md#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst Theme = createContext('light');\n\nfunction ThemedButton(props) {\n  return (\n    <Theme.Consumer>\n      {theme => {\n        return <button {...props} class={'btn ' + theme}>Botão temático</button>;\n      }}\n    </Theme.Consumer>\n  );\n}\n\nfunction App() {\n  return (\n    <Theme.Provider value=\"dark\">\n      <SomeComponent>\n        <ThemedButton />\n      </SomeComponent>\n    </Theme.Provider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using BoundComponent to Create a Link Component in JavaScript\nDESCRIPTION: This example shows how to use the BoundComponent class to create a Link component. It demonstrates the usage of the binds() method to automatically bind the click handler.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/zh/guide/v8/extending-component.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclass Link extends BoundComponent {\n    bind = ['click'];\n    click() {\n        open(this.props.href);\n    }\n    render({ children }) {\n        let { click } = this.binds();\n        return <span onClick={ click }>{ children }</span>;\n    }\n}\n\nrender(\n    <Link href=\"http://example.com\">Click Me</Link>,\n    document.body\n);\n```\n\n----------------------------------------\n\nTITLE: Completed Preact Component with Styling for Tutorial Exercise\nDESCRIPTION: Shows the completed version of the tutorial exercise, adding emphasis to 'World' and applying a purple color style to the text.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/tutorial/01-vdom.md#2025-04-09_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createElement, render } from 'preact';\n\nfunction App() {\n  return (\n    <p class=\"big\" style={{ color: 'purple' }}>\n      Hello <em>World</em>!\n    </p>\n  );\n}\n\nrender(<App />, document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Measuring DOM Element Dimensions with Refs in Preact\nDESCRIPTION: This comprehensive example demonstrates how to use createRef to obtain a reference to a DOM element and measure its dimensions. The component updates its state with the measured width and height when mounted.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/pt-br/guide/v10/refs.md#2025-04-09_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nclass Foo extends Component {\n  state = {\n    width: 0,\n    height: 0,\n  };\n\n  ref = createRef();\n\n  componentDidMount() {\n    // Por segurança: verifique se uma referência foi fornecida\n    if (this.ref.current) {\n      const dimensions = this.ref.current.getBoundingClientRect();\n      this.setState({\n        width: dimensions.width,\n        height: dimensions.height,\n      });\n    }\n  }\n\n  render(_, { width, height }) {\n    return (\n      <div ref={this.ref}>\n        Width: {width}, Height: {height}\n      </div>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Typing DOM Events in Preact Class Components\nDESCRIPTION: Handling and typing DOM events in Preact class components using JSX.TargetedMouseEvent to ensure type safety for event handlers.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/typescript.md#2025-04-09_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { JSX } from \"preact\";\n\nexport class Button extends Component {\n  handleClick(event: JSX.TargetedMouseEvent<HTMLButtonElement>) {\n    alert(event.currentTarget.tagName); // Alerts BUTTON\n  }\n\n  render() {\n    return (\n      <button onClick={this.handleClick}>\n        {this.props.children}\n      </button>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using BoundComponent to Create a Link Component in JavaScript\nDESCRIPTION: This example shows how to use the BoundComponent class to create a Link component. It demonstrates the usage of the binds() method to automatically bind the click handler.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v8/extending-component.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclass Link extends BoundComponent {\n    bind = ['click'];\n    click() {\n        open(this.props.href);\n    }\n    render({ children }) {\n        let { click } = this.binds();\n        return <span onClick={ click }>{ children }</span>;\n    }\n}\n\nrender(\n    <Link href=\"http://example.com\">Click Me</Link>,\n    document.body\n);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Selector and Wrapper Function State Management in JavaScript\nDESCRIPTION: This snippet shows two common approaches to state management: using selectors and wrapper functions. These methods are presented as less ideal solutions compared to the direct state access that signals provide.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/blog/introducing-signals.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Selector based subscription :(\nfunction Counter() {\n  const value = useSelector(state => state.count);\n  // ...\n}\n \n// Wrapper function based subscription :(\nconst counterState = new Counter();\n \nconst Counter = observe(props => {\n  const value = counterState.count;\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Counter with Preact Signals\nDESCRIPTION: A working example of a counter component using Preact Signals, demonstrating direct access to signal values within components without selectors or wrappers.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/es/blog/introducing-signals.md#2025-04-09_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n// Imagina que este es un estado global al que toda la aplicación necesita acceso:\nconst count = signal(0);\n \nfunction Counter() {\n return (\n   <button onClick={() => count.value++}>\n     Value: {count.value}\n   </button>\n );\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Event Listener with DOM API in JavaScript\nDESCRIPTION: Demonstrates how to add a click event listener to a button using the imperative DOM API. This snippet shows the traditional way of handling events in vanilla JavaScript.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/tutorial/02-events.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction clicked() {\n  console.log('clicked')\n}\nconst myButton = document.getElementById('my-button')\nmyButton.addEventListener('click', clicked)\n```\n\n----------------------------------------\n\nTITLE: Render Function with Replace Node\nDESCRIPTION: Shows how to use render() with the replaceNode parameter to update specific DOM elements.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/api-reference.md#2025-04-09_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { render } from 'preact';\n\nconst Foo = () => <div id=\"target\">BAR</div>;\n\nrender(\n  <Foo />,\n  document.getElementById('container'),\n  document.getElementById('target')\n);\n```\n\n----------------------------------------\n\nTITLE: Implementando Métodos de Ciclo de Vida em um Componente Preact\nDESCRIPTION: Mostra como implementar vários métodos de ciclo de vida em um componente Preact, incluindo shouldComponentUpdate, componentWillReceiveProps, componentWillMount, componentWillUpdate, componentDidMount, componentDidUpdate e componentWillUnmount.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/pt-br/guide/v8/api-reference.md#2025-04-09_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { Component } from 'preact';\n\nclass MyComponent extends Component {\n\tshouldComponentUpdate(nextProps, nextState) {}\n\tcomponentWillReceiveProps(nextProps, nextState) {\n\t\tthis.props // Previous props\n\t\tthis.state // Previous state\n\t}\n\tcomponentWillMount() {}\n\tcomponentWillUpdate(nextProps, nextState) {\n\t\tthis.props // Previous props\n\t\tthis.state // Previous state\n\t}\n\tcomponentDidMount() {}\n\tcomponentDidUpdate(prevProps, prevState) {}\n\tcomponentWillUnmount() {\n\t\tthis.props // Current props\n\t\tthis.state // Current state\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Completed Preact App Component with Click Handler\nDESCRIPTION: Shows the completed Preact App component with an added click handler. This snippet demonstrates the solution to the exercise, with a click handler that logs a message to the console.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/tutorial/02-events.md#2025-04-09_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { render } from \"preact\";\n\nfunction App() {\n  const clicked = () => {\n    console.log('hi')\n  }\n\n  return (\n    <div>\n      <p class=\"count\">Count:</p>\n      <button onClick={clicked}>Click Me!</button>\n    </div>\n  )\n}\n\nrender(<App />, document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Initial Preact Component Setup for Tutorial Exercise\nDESCRIPTION: Provides the starting point for a tutorial exercise, creating a simple Preact component and rendering it to the DOM.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/tutorial/01-vdom.md#2025-04-09_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createElement, render } from 'preact';\n\nfunction App() {\n  return (\n    <p class=\"big\">Hello World!</p>\n  );\n}\n\nrender(<App />, document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Using HTM with Preact\nDESCRIPTION: Shows how to use HTM (Hyperscript Tagged Markup) as a JSX alternative with Preact, enabling JSX-like syntax without build steps.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/getting-started.md#2025-04-09_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\n  import { h, render } from 'https://esm.sh/preact';\n  import htm from 'https://esm.sh/htm';\n\n  // Initialize htm with Preact\n  const html = htm.bind(h);\n\n  function App (props) {\n    return html`<h1>Hello ${props.name}!</h1>`;\n  }\n\n  render(html`<${App} name=\"World\" />`, document.body);\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing Preact as Default (JavaScript)\nDESCRIPTION: Shows how to import Preact as a default import and configure JSX transformation.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v8/getting-started.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport preact from 'preact';\n\n// Tell Babel to transform JSX into preact.h() calls:\n/** @jsx preact.h */\n```\n\n----------------------------------------\n\nTITLE: Computed Signals Dependency Tracking\nDESCRIPTION: Demonstrates dependency tracking and caching behavior of computed signals. Shows how computed values are recalculated only when dependencies change.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/blog/signal-boosting.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { signal, computed } from \"@preact/signals-core\";\n\nconst count = signal(1);\nconst double = computed(() => count.value * 2);\nconst quadruple = computed(() => double.value * 2);\n\nconsole.log(quadruple.value); // Console: 4\ncount.value = 20;\nconsole.log(quadruple.value); // Console: 80\n```\n\n----------------------------------------\n\nTITLE: Component Children Props Usage\nDESCRIPTION: Demonstrates how to use the children prop to nest content within components.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/tutorial/03-components.md#2025-04-09_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nfunction MyButton(props) {\n  return <button class=\"my-button\">{props.children}</button>\n}\n\nfunction App() {\n  return (\n    <MyButton>\n      <img src=\"icon.png\" />\n      Click Me!\n    </MyButton>\n  )\n}\n\nrender(<App />, document.body)\n```\n\n----------------------------------------\n\nTITLE: Implementing Component Render Method\nDESCRIPTION: Demonstrates how to implement the required render() method in a Preact component, showing props and state usage.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/api-reference.md#2025-04-09_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Component } from 'preact';\n\nclass MyComponent extends Component {\n\trender(props, state) {\n\t\t// props is the same as this.props\n\t\t// state is the same as this.state\n\n\t\treturn <h1>Hello, {props.name}!</h1>;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Explicitly Typing Children in Preact Components\nDESCRIPTION: Using ComponentChildren type to explicitly define the children prop in a Preact function component.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/typescript.md#2025-04-09_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { h, ComponentChildren } from \"preact\";\n\ninterface ChildrenProps {\n  title: string;\n  children: ComponentChildren;\n}\n\nfunction Card({ title, children }: ChildrenProps) {\n  return (\n    <div class=\"card\">\n      <h1>{title}</h1>\n      {children}\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using Nested Routes with Context in a Preact Application\nDESCRIPTION: Shows how to use the nested routing system with context in a real application structure. This example demonstrates defining routes for an email application with inbox and settings sections that contain their own nested routes.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/tutorial/06-context.md#2025-04-09_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function App() {\n  return (\n    <div class=\"app\">\n      <Route path=\"/inbox\">\n        <Inbox />\n      </Route>\n      <Route path=\"/settings\">\n        <Settings />\n      </Route>\n    </div>\n  )\n}\n\nfunction Inbox() {\n  return (\n    <div class=\"inbox\">\n      <div class=\"messages\"> ... </div>\n      <Route path=\"/compose\">\n        <Compose />\n      </Route>\n    </div>\n  )\n}\n\nfunction Settings() {\n  return (\n    <div class=\"settings\">\n      <h1>Settings</h1>\n      <Route path=\"/forwarding\">\n        <Forwarding />\n      </Route>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Virtual DOM Elements with Preact.h()\nDESCRIPTION: Shows how to create Preact Virtual DOM elements using the h() function (createElement). Demonstrates various ways to specify attributes and nested children.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v8/api-reference.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { h } from 'preact';\n\nh('div', { id: 'foo' }, 'Hello!');\n// <div id=\"foo\">Hello!</div>\n\nh('div', { id: 'foo' }, 'Hello', null, ['Preact!']);\n// <div id=\"foo\">Hello Preact!</div>\n\nh(\n\t'div',\n\t{ id: 'foo' },\n\th('span', null, 'Hello!')\n);\n// <div id=\"foo\"><span>Hello!</span></div>\n```\n\n----------------------------------------\n\nTITLE: Basic useEffect Hook Structure in Preact\nDESCRIPTION: Shows the basic structure of the useEffect hook in Preact, including the optional cleanup function that can be returned from the effect callback.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/es/guide/v10/hooks.md#2025-04-09_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nuseEffect(() => {\n  // Trigger your effect\n  return () => {\n    // Optional: Cualquier código cleanup\n  };\n}, []);\n```\n\n----------------------------------------\n\nTITLE: JSX Mode Rendering in Preact\nDESCRIPTION: Shows how to use the JSX rendering mode to output components as if they were written in JSX, which is useful for snapshot testing.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/pt-br/guide/v10/server-side-rendering.md#2025-04-09_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport render from 'preact-render-to-string';\nimport { h } from 'preact';\n\nconst App = <div data-foo={true} />;\n\nconsole.log(render(App, { jsx: true }));\n// Logs: <div data-foo={true} />\n```\n\n----------------------------------------\n\nTITLE: Updating Named Exports in Preact X\nDESCRIPTION: Examples showing how to update import statements for Preact X's named exports system\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/upgrade-guide.md#2025-04-09_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n// Preact 8.x\nimport Preact from \"preact\";\n\n// Preact X\nimport * as preact from \"preact\";\n\n// Preferred: Named exports (works in 8.x and Preact X)\nimport { h, Component } from \"preact\";\n```\n\n----------------------------------------\n\nTITLE: SVG Attribute Handling in React vs Preact\nDESCRIPTION: Illustrates the difference in handling SVG attributes between React and Preact, where Preact allows using attributes as-written in SVG snippets.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/differences-to-react.md#2025-04-09_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n// React\n<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 48 48\">\n  <circle fill=\"none\" strokeWidth=\"2\" strokeLinejoin=\"round\" cx=\"24\" cy=\"24\" r=\"20\" />\n</svg>\n// Preact (note stroke-width and stroke-linejoin)\n<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 48 48\">\n  <circle fill=\"none\" stroke-width=\"2\" stroke-linejoin=\"round\" cx=\"24\" cy=\"24\" r=\"20\" />\n</svg>\n```\n\n----------------------------------------\n\nTITLE: SVG Attribute Handling in React vs Preact\nDESCRIPTION: Illustrates the difference in handling SVG attributes between React and Preact, where Preact allows using attributes as-written in SVG snippets.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/differences-to-react.md#2025-04-09_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n// React\n<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 48 48\">\n  <circle fill=\"none\" strokeWidth=\"2\" strokeLinejoin=\"round\" cx=\"24\" cy=\"24\" r=\"20\" />\n</svg>\n// Preact (note stroke-width and stroke-linejoin)\n<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 48 48\">\n  <circle fill=\"none\" stroke-width=\"2\" stroke-linejoin=\"round\" cx=\"24\" cy=\"24\" r=\"20\" />\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Initial Counter Implementation\nDESCRIPTION: Starting template for the counter implementation showing basic component structure without context integration.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/tutorial/06-context.md#2025-04-09_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { render, createContext } from 'preact';\nimport { useState, useContext, useMemo } from 'preact/hooks';\n\nconst CounterContext = createContext(null);\n\nfunction Counter() {\n  return (\n    <div style={{ background: '#eee', padding: '10px' }}>\n      <p>Count: {'MISSING'}</p>\n      <button>Add</button>\n    </div>\n  );\n}\n\nfunction App() {\n  const [count, setCount] = useState(0);\n\n  return (\n    <div style={{ display: 'flex', gap: '20px' }}>\n      <Counter />\n      <Counter />\n      <Counter />\n    </div>\n  )\n}\n\nrender(<App />, document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Using Preact Render Function\nDESCRIPTION: Demonstrates usage of Preact's render function to mount components to DOM and replace existing nodes. Shows different rendering scenarios with container and replacement nodes.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v8/api-reference.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { render } from 'preact';\n\n// These examples show how render() behaves in a page with the following markup:\n// <div id=\"container\">\n//   <h1>My App</h1>\n// </div>\n\nconst container = document.getElementById('container');\n\nrender(MyComponent, container);\n// Append MyComponent to container\n//\n// <div id=\"container\">\n//   <h1>My App</h1>\n//   <MyComponent />\n// </div>\n\nconst existingNode = container.querySelector('h1');\n\nrender(MyComponent, container, existingNode);\n// Diff MyComponent against <h1>My App</h1>\n//\n// <div id=\"container\">\n//   <MyComponent />\n// </div>\n```\n\n----------------------------------------\n\nTITLE: Using onInput in Preact vs onChange in React\nDESCRIPTION: Preact uses the standard DOM 'onInput' event for form inputs, while React uses 'onChange' with different semantics.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/zh/guide/v10/differences-to-react.md#2025-04-09_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n// React\n<input onChange={e => console.log(e.currentTarget.value)} />\n\n// Preact\n<input onInput={e => console.log(e.currentTarget.value)} />\n```\n\n----------------------------------------\n\nTITLE: useEffect Exercise Solution\nDESCRIPTION: Solution to the exercise showing how to make the effect run whenever the count value changes by adding count to the dependencies array.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/tutorial/07-side-effects.md#2025-04-09_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { render } from 'preact';\nimport { useEffect, useState } from 'preact/hooks';\n\nfunction App() {\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    console.log('Count is now: ', count)\n  }, [count]);\n  // ^^ start here!\n\n  return <button onClick={() => setCount(count+1)}>{count}</button>\n}\n\nrender(<App />, document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Pretty Printing Server-Side Rendered Output in Preact\nDESCRIPTION: Demonstrates how to use the pretty printing option to generate human-readable HTML output with proper indentation.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/pt-br/guide/v10/server-side-rendering.md#2025-04-09_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport render from 'preact-render-to-string/jsx';\nimport { h } from 'preact';\n\nconst Foo = () => <div>foo</div>;\nconst App = <div class=\"foo\"><Foo /></div>;\n\nconsole.log(render(App, {}, { pretty: true }));\n// Logs:\n// <div class=\"foo\">\n//   <div>foo</div>\n// </div>\n```\n\n----------------------------------------\n\nTITLE: Using Inferred Type for Event Handlers in Preact\nDESCRIPTION: Using TypeScript's type inference for event handlers with inline functions in Preact components.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/typescript.md#2025-04-09_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nexport class Button extends Component {\n  render() {\n    return (\n      <button onClick={(event) => alert(event.currentTarget.tagName)}>\n        {this.props.children}\n      </button>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Preact's render Function in JavaScript\nDESCRIPTION: Demonstrates how to use Preact's render function to add or update components in the DOM. It shows examples of rendering a component into a container and replacing an existing node.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/de/guide/v8/api-reference.md#2025-04-09_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { render } from 'preact';\n\n// Diese Beispiele zeigen, wie sich render() in einer Seite mit folgendem Inhalt verhält:\n// <div id=\"container\">\n//   <h1>My App</h1>\n// </div>\n\nconst container = document.getElementById('container');\n\nrender(MeineKomponente, container);\n// MeineKomponente zu Container hinzufügen\n//\n// <div id=\"container\">\n//   <h1>My App</h1>\n//   <MeineKomponente />\n// </div>\n\nconst existingNode = container.querySelector('h1');\n\nrender(MeineKomponente, container, existingNode);\n// MeineKomponente gegen <h1>Meine App</h1> differenzieren\n//\n// <div id=\"container\">\n//   <MeineKomponente />\n// </div>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Incorrect Key Usage in JSX List Rendering\nDESCRIPTION: This code shows an incorrect way of assigning keys when rendering a list in JSX, which can lead to performance issues and bugs in Preact applications.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/debugging.md#2025-04-09_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n// Both children will have the same key \"A\"\n<div>\n  {['A', 'A'].map(char => <p key={char}>{char}</p>)}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Rendering a Todo List in Preact without Keys\nDESCRIPTION: This snippet demonstrates a simple Todo list component in Preact without using keys. It shows how Preact might incorrectly update the list when items are removed.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/tutorial/08-keys.md#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function TodoList() {\n  const [todos, setTodos] = useState(['wake up', 'make bed'])\n\n  function wakeUp() {\n    setTodos(['make bed'])\n  }\n\n  return (\n    <div>\n      <ul>\n        {todos.map(todo => (\n          <li>{todo}</li>\n        ))}\n      </ul>\n      <button onClick={wakeUp}>I'm Awake!</button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Preact Component with Render Method\nDESCRIPTION: Demonstrates creating a basic Preact component by extending the Component class and implementing the required render method. Shows how props and state can be accessed within render.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v8/api-reference.md#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Component } from 'preact';\n\nclass MyComponent extends Component {\n\trender(props, state) {\n\t\t// props === this.props\n\t\t// state === this.state\n\n\t\treturn <h1>Hello, {props.name}!</h1>;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Error Handling in Preact App Component\nDESCRIPTION: The final solution with error handling implemented in the App component using componentDidCatch. When the Clicker component throws an error, the App component catches it and displays a friendly error message.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/tutorial/09-error-handling.md#2025-04-09_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { render, Component } from 'preact';\nimport { useState } from 'preact/hooks';\n\nfunction Clicker() {\n  const [clicked, setClicked] = useState(false);\n\n  if (clicked) {\n    throw new Error('I am erroring');\n  }\n\n  return <button onClick={() => setClicked(true)}>Click Me</button>;\n}\n\nclass App extends Component {\n  state = { error: null };\n\n  componentDidCatch(error) {\n    this.setState({ error: error.message });\n  }\n\n  render() {\n    const { error } = this.state;\n    if (error) {\n      return <p>Oh no! There was an error: {error}</p>\n    }\n    return <Clicker />;\n  }\n}\n\nrender(<App />, document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Criando Elementos Virtual DOM com Preact.h()\nDESCRIPTION: Ilustra o uso da função h() (também conhecida como createElement()) do Preact para criar elementos do Virtual DOM. Mostra exemplos de criação de elementos simples e aninhados.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/pt-br/guide/v8/api-reference.md#2025-04-09_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport { h } from 'preact';\n\nh('div', { id: 'foo' }, 'Hello!');\n// <div id=\"foo\">Hello!</div>\n\nh('div', { id: 'foo' }, 'Hello', null, ['Preact!']);\n// <div id=\"foo\">Hello Preact!</div>\n\nh(\n\t'div',\n\t{ id: 'foo' },\n\th('span', null, 'Hello!')\n);\n// <div id=\"foo\"><span>Hello!</span></div>\n```\n\n----------------------------------------\n\nTITLE: Enabling Preact Debug Mode\nDESCRIPTION: Adds helpful warnings, error messages, and attaches the Preact Developer Tools browser extension for debugging Preact applications.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/zh/guide/v10/differences-to-react.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"preact/debug\";\n```\n\n----------------------------------------\n\nTITLE: Error Reporting with useErrorBoundary in Preact\nDESCRIPTION: Shows how to use the optional callback parameter of useErrorBoundary to report errors to an API for monitoring purposes.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/es/guide/v10/hooks.md#2025-04-09_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nconst [error] = useErrorBoundary(error => callMyApi(error.message));\n```\n\n----------------------------------------\n\nTITLE: Compiled JSX Output Comparison\nDESCRIPTION: Shows the compiled JavaScript output for the same JSX code in both Preact and React, highlighting Preact's more concise h() function versus React's React.createElement().\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/kr/guide/v10/differences-to-react.md#2025-04-09_snippet_6\n\nLANGUAGE: js\nCODE:\n```\n// Preact:\nh(\n  'a',\n  { href:'/' },\n  h('span', null, 'Home')\n);\n\n// React:\nReact.createElement(\n  'a',\n  { href:'/' },\n  React.createElement('span', null, 'Home')\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Stateless Functional Component in Preact\nDESCRIPTION: This snippet demonstrates how to create a Link component as a Stateless Functional Component. It uses an arrow function that accepts props as an argument and returns JSX. It also uses destructuring and the rest operator for props handling.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v8/types-of-components.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst Link = ({ children, ...props }) => (\n\t<a {...props}>{ children }</a>\n);\n```\n\n----------------------------------------\n\nTITLE: Using State in a Preact Component\nDESCRIPTION: This example shows how to use state in a Preact component using the useState hook. It demonstrates state management and event handling in a counter component.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/tutorial.md#2025-04-09_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'preact/hooks';\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n  const increment = () => setCount(count + 1);\n  return (\n    <div>\n      <p>Count: {count}</p>\n      <button onClick={increment}>Increment</button>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Extending HTMLAttributes for Custom JSX Attributes\nDESCRIPTION: Shows how to extend the HTMLAttributes interface to add support for custom attributes on HTML elements in TypeScript. The example demonstrates adding a 'custom' attribute.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/typescript.md#2025-04-09_snippet_25\n\nLANGUAGE: tsx\nCODE:\n```\n// global.d.ts\n\ndeclare global {\n  namespace preact.JSX {\n    interface HTMLAttributes {\n      custom?: string | undefined;\n    }\n  }\n}\n\n// This empty export is important! It tells TS to treat this as a module\nexport {}\n```\n\n----------------------------------------\n\nTITLE: Preact In-Place Rendering Example\nDESCRIPTION: Demonstrates how to perform initial rendering and subsequent updates using Preact's render() method. Shows the usage of the third parameter for in-place updates.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v8/switching-to-preact.md#2025-04-09_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// initial render:\nrender(<App />, document.body);\n\n// update in-place:\nrender(<App />, document.body, document.body.lastElementChild);\n```\n\n----------------------------------------\n\nTITLE: Implementing Side Effects with useEffect in Preact\nDESCRIPTION: This snippet illustrates the use of the useEffect hook in Preact for handling side effects. It shows how to perform actions after render and clean up resources.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/tutorial.md#2025-04-09_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useEffect, useState } from 'preact/hooks';\n\nfunction Timer() {\n  const [seconds, setSeconds] = useState(0);\n\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setSeconds(s => s + 1);\n    }, 1000);\n    return () => clearInterval(timer);\n  }, []);\n\n  return <div>Seconds: {seconds}</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Preventing Component Updates in Preact\nDESCRIPTION: Demonstrates how to use shouldComponentUpdate to prevent a Preact component from re-rendering, allowing external DOM mutations.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/zh/guide/v8/external-dom-mutations.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass Block extends Component {\n  shouldComponentUpdate() {\n    return false;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing BoundComponent Class in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a BoundComponent class that extends Preact's Component. It provides a binds() method to automatically bind methods listed in the bind property.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/es/guide/v8/extending-component.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass BoundComponent extends Component {\n    // example: get bound methods\n    binds() {\n        let list = this.bind || [],\n            binds = this._binds;\n        if (!binds) {\n            binds = this._binds = {};\n            for (let i=list.length; i--; ) {\n                binds[list[i]] = this[list[i]].bind(this);\n            }\n        }\n        return binds;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Computed Signals Creation\nDESCRIPTION: Shows how to create computed signals that derive values from other signals using compute functions. Demonstrates lazy evaluation concept.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/blog/signal-boosting.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { signal, computed } from \"@preact/signals-core\";\n\nconst s1 = signal(\"Hello\");\nconst s2 = signal(\"World\");\n\nconst c = computed(() => {\n  return s1.value + \" \" + s2.value;\n});\n```\n\n----------------------------------------\n\nTITLE: Manual module redirection in Node.js\nDESCRIPTION: JavaScript code to manually redirect React imports to Preact in Node.js without using module-alias.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/fr/guide/v8/switching-to-preact.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar React = require('react')\nvar ReactDOM = require('react-dom')\nvar ReactDOMServer = require('react-dom/server')\nvar CreateReactClass = require('create-react-class')\nvar Preact = require('preact-compat/dist/preact-compat.min')\nvar Module = module.constructor\nModule._cache[require.resolve('react')].exports = Preact\nModule._cache[require.resolve('react-dom')].exports = Preact\nModule._cache[require.resolve('create-react-class')].exports.default = Preact.createClass\n```\n\n----------------------------------------\n\nTITLE: Implementing GitHub Repository Search with Preact Hooks\nDESCRIPTION: This snippet defines the main Example component using Preact hooks. It fetches repository data from the GitHub API on component mount and renders a list of results. The component uses useState for state management and useEffect for data fetching.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/src/components/controllers/repl/examples/github-repo-list.txt#2025-04-09_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { render } from 'preact';\nimport { useState, useEffect } from 'preact/hooks';\n\nconst SEARCH = 'https://api.github.com/search/repositories';\n\nfunction Example() {\n\tconst [items, setItems] = useState([]);\n\n\tuseEffect(() => {\n\t\tfetch(`${SEARCH}?q=preact`)\n\t\t\t.then(res => res.json())\n\t\t\t.then(data => setItems((data && data.items) || []));\n\t}, []);\n\n\treturn (\n\t\t<div>\n\t\t\t<h1 style=\"text-align:center; font-weight: 200\">Example</h1>\n\t\t\t<div class=\"list\">\n\t\t\t\t{items.map(result => (\n\t\t\t\t\t<Result {...result} />\n\t\t\t\t))}\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Unique IDs as Keys in Preact Todo List\nDESCRIPTION: This snippet shows a better approach to using keys in a Preact Todo list, where each todo item has a unique ID that is used as the key. This ensures stable and efficient list updates.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/ru/tutorial/08-keys.md#2025-04-09_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst todos = [\n  { id: 1, text: 'встать' },\n  { id: 2, text: 'make bed' },\n];\n\nexport default function ToDos() {\n  return (\n    <ul>\n      {todos.map((todo) => (\n        <li key={todo.id}>{todo.text}</li>\n      ))}\n    </ul>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Direct Signal Usage in JSX Without Value Property\nDESCRIPTION: This example demonstrates the optimal usage of signals in JSX, where signals can be directly passed as JSX expressions or DOM properties without accessing the .value property, enabling fine-grained updates without re-rendering the entire component.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/zh/blog/introducing-signals.md#2025-04-09_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nconst count = signal(0);\n \n// 而不是这样：\n<p>Value: {count.value}</p>\n \n// … 我们可以直接将 signal 传入 JSX：\n<p>Value: {count}</p>\n \n// … 或者甚至将它们作为 DOM 属性传递：\n<input value={count} onInput={...} />\n```\n\n----------------------------------------\n\nTITLE: Rendering Individual Repository Result with Preact\nDESCRIPTION: This snippet defines the Result component, which renders individual repository search results. It displays the repository name as a link, the number of stars, and the repository description.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/src/components/controllers/repl/examples/github-repo-list.txt#2025-04-09_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst Result = result => (\n\t<div class=\"list-item\">\n\t\t<div>\n\t\t\t<a href={result.html_url} target=\"_blank\" rel=\"noopener noreferrer\">\n\t\t\t\t{result.full_name}\n\t\t\t</a>\n\t\t\t{' - '}\n\t\t\t<strong>{result.stargazers_count}</strong>\n\t\t</div>\n\t\t<p>{result.description}</p>\n\t</div>\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Keys to Todo List Items in Preact\nDESCRIPTION: This snippet improves the Todo list component by adding keys to list items. It shows how to use the todo text as a key, enabling Preact to correctly identify and update list items.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/ru/tutorial/08-keys.md#2025-04-09_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function TodoList() {\n  const [todos, setTodos] = useState(['встать', 'застелить кровать']);\n\n  function wakeUp() {\n    setTodos(['застелить кровать']);\n  }\n\n  return (\n    <div>\n      <ul>\n        {todos.map((todo) => (\n          <li key={todo}>{todo}</li>\n          //  ^^^^^^^^^^ добавление атрибута key\n        ))}\n      </ul>\n      <button onClick={wakeUp}>Я проснулся!</button>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Server-Side Rendering Middleware for Preact\nDESCRIPTION: This JavaScript snippet shows how to create an Express middleware for server-side rendering of Preact components. It adds a render method to the response object for easy component rendering.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/blog/simplifying-islands-arch.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\napp.use((req, res, next) => {\n  res.render = (comp, data) => {\n    return res.write(preactRenderToString(h(comp, { ...data })))\n  }\n})\n\n// and somewhere else in the app\n\nconst handler = (req, res) => {\n  return res.status(200).render(Homepage, { username: 'reaper' })\n}\n```\n\n----------------------------------------\n\nTITLE: Shorthand Component Update Prevention in Preact\nDESCRIPTION: Alternative arrow function syntax for preventing component updates using shouldComponentUpdate.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v8/external-dom-mutations.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclass Block extends Component {\n  shouldComponentUpdate = () => false;\n}\n```\n\n----------------------------------------\n\nTITLE: Using ES7 Class Properties for Event Handlers in Preact\nDESCRIPTION: Example of manually handling state updates using ES7 class properties to define event handler methods that update component state, which is more efficient than using arrow functions in render.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/es/guide/v8/linked-state.md#2025-04-09_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nclass Foo extends Component {\n\tupdateText = e => {\n\t\tthis.setState({ text: e.target.value });\n\t};\n\trender({ }, { text }) {\n\t\treturn <input value={text} onInput={this.updateText} />;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Using linkState for Concise State Updates in Preact\nDESCRIPTION: This snippet demonstrates using the linkState module from Preact to create a concise event handler that automatically updates component state. It's more efficient than manual binding and reduces boilerplate code.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v8/linked-state.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport linkState from 'linkstate';\n\nclass Foo extends Component {\n\trender({ }, { text }) {\n\t\treturn <input value={text} onInput={linkState(this, 'text')} />;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a Todo List Without Keys in Preact\nDESCRIPTION: This snippet shows a basic Todo list component in Preact without using keys. It demonstrates how Preact might incorrectly update the DOM when list items change.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/ru/tutorial/08-keys.md#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function TodoList() {\n  const [todos, setTodos] = useState(['встать', 'застелить кровать']);\n\n  function wakeUp() {\n    setTodos(['застелить кровать']);\n  }\n\n  return (\n    <div>\n      <ul>\n        {todos.map((todo) => (\n          <li>{todo}</li>\n        ))}\n      </ul>\n      <button onClick={wakeUp}>Я проснулся!</button>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: CSS Custom Properties Usage\nDESCRIPTION: Shows how to use CSS custom properties (variables) in component styling.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/whats-new.md#2025-04-09_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Foo(props) {\n  return <div style={{ '--theme-color': 'blue' }}>{props.children}</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Manual State Update in Preact Component\nDESCRIPTION: Demonstrates a manual method for updating state in a Preact component using ES7 class properties. This approach provides better runtime performance but requires more boilerplate code.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/tr/guide/v8/linked-state.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass Foo extends Component {\n\tupdateText = e => {\n\t\tthis.setState({ text: e.target.value });\n\t};\n\trender({ }, { text }) {\n\t\treturn <input value={text} onInput={this.updateText} />;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Initial Implementation of Error-Prone Preact Application\nDESCRIPTION: A Preact application with a Clicker component that intentionally throws an error when clicked. The App component doesn't handle the error yet, causing the application to crash.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/tutorial/09-error-handling.md#2025-04-09_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { render, Component } from 'preact';\nimport { useState } from 'preact/hooks';\n\nfunction Clicker() {\n  const [clicked, setClicked] = useState(false);\n\n  if (clicked) {\n    throw new Error('I am erroring');\n  }\n\n  return <button onClick={() => setClicked(true)}>Click Me</button>;\n}\n\nclass App extends Component {\n  state = { error: null };\n\n  render() {\n    return <Clicker />;\n  }\n}\n\nrender(<App />, document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Using BoundComponent for Link Class in JavaScript\nDESCRIPTION: This example shows how to use the BoundComponent class to create a Link component. It demonstrates the usage of the bind property and the binds() method for event handling.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/es/guide/v8/extending-component.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclass Link extends BoundComponent {\n    bind = ['click'];\n    click() {\n        open(this.props.href);\n    }\n    render({ children }) {\n        let { click } = this.binds();\n        return <span onClick={ click }>{ children }</span>;\n    }\n}\n\nrender(\n    <Link href=\"http://example.com\">Click Me</Link>,\n    document.body\n);\n```\n\n----------------------------------------\n\nTITLE: Using Partial Types for Flexible Context Values\nDESCRIPTION: Creating a context with partial values using TypeScript's Partial utility type to make all properties optional.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/typescript.md#2025-04-09_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\ninterface AppContextValues {\n  authenticated: boolean;\n  lang: string;\n  theme: string;\n}\n\nconst AppContext = createContext<Partial<AppContextValues>>({});\n\nfunction App() {\n  return (\n    <AppContext.Provider\n      value={{\n        lang: \"de\"\n      }}\n    >\n      <ComponentThatUsesAppContext />\n    </AppContext.Provider>\n  );\n```\n\n----------------------------------------\n\nTITLE: Manual Implementation of linkState Functionality\nDESCRIPTION: Illustrates the core functionality of linkState by showing an equivalent manual implementation. This helps understand how linkState works under the hood.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/tr/guide/v8/linked-state.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// this handler returned from linkState:\nhandler = linkState(this, 'thing', 'foo.bar');\n\n// ...is functionally equivalent to:\nhandler = event => {\n  this.setState({\n    thing: event.foo.bar\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Testing a Preact Table Component with Enzyme\nDESCRIPTION: Example of unit testing a Preact Table component using Enzyme's mount method. This demonstrates how to render a component, set properties, and make assertions about its rendered state.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/pt-br/guide/v8/unit-testing-with-enzyme.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nlet dataSource = [{ id: '1', name: 'test-content' }, { id: '2', name: 'test-content' }],\n    table,\n    wrapper;\n\n    beforeEach(() => {\n        table = <Table dataSource={dataSource}>\n            <Table.Column dataIndex='id' />\n            <Table.Column dataIndex='name' />\n        </Table>\n        wrapper = mount(table);å\n    })\n\n    afterEach(() => {\n        table = null;\n    })\n\n    it('should render checkboxMode', (done) => {\n        wrapper.setProps({\n             rowSelection: {\n                getProps: (record) => {\n                    if (record.id === '1') {\n                        return {\n                            disabled: true\n                        }\n                    }\n                }\n            }\n        });\n\n        setTimeout(() => {\n            expect(wrapper.find('.checkbox').length).to.be.equal(3);\n            expect(wrapper.find('.checkbox.disabled').length).to.be.equal(1);\n            done();\n        }, 10);\n    });\n```\n\n----------------------------------------\n\nTITLE: Building a Live-Updating Clock with Preact Lifecycle Methods\nDESCRIPTION: Enhances the clock component by adding lifecycle methods to create and clean up a timer that updates the display every second.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/tutorial.md#2025-04-09_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n// --repl\nimport { h, render, Component } from 'preact';\n\nclass Clock extends Component {\n  state = { time: Date.now() };\n\n  // Called whenever our component is created\n  componentDidMount() {\n    // update time every second\n    this.timer = setInterval(() => {\n      this.setState({ time: Date.now() });\n    }, 1000);\n  }\n\n  // Called just before our component will be destroyed\n  componentWillUnmount() {\n    // stop when not renderable\n    clearInterval(this.timer);\n  }\n\n  render() {\n    let time = new Date(this.state.time).toLocaleTimeString();\n    return <span>{time}</span>;\n  }\n}\n\nrender(<Clock />, document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Correct Implementation of Grouped Radio Buttons\nDESCRIPTION: Shows the correct way to implement grouped radio buttons using linkState with a custom event path. This ensures proper state updates when selecting different options.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/tr/guide/v8/linked-state.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport linkState from 'linkstate';\n\nclass Foo extends Component {\n  render({ }, { answer }) {\n    return (\n      <div>\n        <input type=\"radio\" name=\"demo\"\n          value=\"yes\" checked={answer == 'yes'}\n          onChange={linkState(this, 'answer', 'target.value')}\n        />\n        <input type=\"radio\" name=\"demo\"\n          value=\"no\" checked={answer == 'no'}\n          onChange={linkState(this, 'answer', 'target.value')}\n        />\n      </div>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Preact Enzyme Testing Dependencies\nDESCRIPTION: Command to install the required dependencies for testing Preact components with Enzyme, including preact-compat-enzyme and preact-test-utils.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/pt-br/guide/v8/unit-testing-with-enzyme.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev preact-compat-enzyme preact-test-utils\n```\n\n----------------------------------------\n\nTITLE: Implementando render() em um Componente Preact\nDESCRIPTION: Demonstra como criar um componente Preact estendendo a classe Component e implementando o método render() obrigatório. O método render() recebe props e state como argumentos e retorna um elemento JSX.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/pt-br/guide/v8/api-reference.md#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Component } from 'preact';\n\nclass MyComponent extends Component {\n\trender(props, state) {\n\t\t// props === this.props\n\t\t// state === this.state\n\n\t\treturn <h1>Oi, {props.name}!</h1>;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Enzyme with Preact Adapter\nDESCRIPTION: Setup code to configure Enzyme to use the Preact adapter, which should be placed in your test setup file.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v8/unit-testing-with-enzyme.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { configure } from 'enzyme';\nimport Adapter from 'enzyme-adapter-preact-pure';\n\nconfigure({ adapter: new Adapter });\n```\n\n----------------------------------------\n\nTITLE: Configuring Enzyme with Preact Adapter\nDESCRIPTION: Configuration code to set up Enzyme to use the Preact adapter before running tests.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/pt-br/guide/v10/unit-testing-with-enzyme.md#2025-04-09_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { configure } from 'enzyme';\nimport Adapter from 'enzyme-adapter-preact-pure';\n\nconfigure({ adapter: new Adapter });\n```\n\n----------------------------------------\n\nTITLE: Using Spread Operator in a Preact Component\nDESCRIPTION: This example shows how to use the spread operator to copy all props passed to the Link component onto the anchor element. This is useful for passing through all attributes without explicitly listing them.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v8/types-of-components.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nclass Link extends Component {\n\trender(props) {\n\t\treturn <a {...props} />;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Updating State Management in Preact X\nDESCRIPTION: Example demonstrating the correct way to update state based on previous values in Preact X\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/upgrade-guide.md#2025-04-09_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nthis.state = { counter: 0 };\n\n// Preact 8.x\nthis.setState({ counter: this.state.counter + 1 });\n\n// Preact X\nthis.setState(prevState => {\n  // Alternatively return `null` here to abort the state update\n  return { counter: prevState.counter + 1 };\n});\n```\n\n----------------------------------------\n\nTITLE: Пример компонента Preact для тестирования\nDESCRIPTION: Простой компонент Counter, отображающий начальное значение с кнопкой для его увеличения.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/ru/guide/v8/unit-testing-with-enzyme.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Component, h } from 'preact';\n\nexport default class Counter extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      count: props.initialCount,\n    };\n  };\n\n  render() {\n    const increment = () => this.setState(({ count }) => ({\n      count: count + 1,\n    }));\n\n    return (\n      <div>\n        Текущее значение: {this.state.count}\n        <button onClick={increment}>Увеличить</button>\n      </div>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting a Static Hello World to a Preact Component\nDESCRIPTION: Turns a simple Hello World element into a class-based Preact component by extending the Component class.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/tutorial.md#2025-04-09_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n// --repl\nimport { h, render, Component } from 'preact';\n\nclass App extends Component {\n  render() {\n    return <h1>Hello, world!</h1>;\n  }\n}\n\nrender(<App />, document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Installing Preact Direct Migration\nDESCRIPTION: Command to install Preact for direct migration approach\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v8/switching-to-preact.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save preact  # or: npm i -S preact\n```\n\n----------------------------------------\n\nTITLE: Basic Server-Side Rendering Implementation in Preact\nDESCRIPTION: Demonstrates the basic usage of preact-render-to-string to render a simple component to HTML.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/server-side-rendering.md#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport render from 'preact-render-to-string';\nimport { h } from 'preact';\n\nconst name = 'Preact User!'\nconst App = <div class=\"foo\">Hello {name}</div>;\n\nconsole.log(render(App));\n// <div class=\"foo\">Hello Preact User!</div>\n```\n\n----------------------------------------\n\nTITLE: Using Preact.render() Function\nDESCRIPTION: Demonstrates how to use the Preact.render() function to render components into the DOM. Shows examples of adding new components and replacing existing nodes.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/fr/guide/v8/api-reference.md#2025-04-09_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { render } from 'preact';\n\n// Ces exemples montrent comment render() se comporte sur une page avec le code HTML suivant :\n// <div id=\"container\">\n//   <h1>My App</h1>\n// </div>\n\nconst container = document.getElementById('container');\n\nrender(MyComponent, container);\n// Ajoute MyComponent à container\n//\n// <div id=\"container\">\n//   <h1>My App</h1>\n//   <MyComponent />\n// </div>\n\nconst existingNode = container.querySelector('h1');\n\nrender(MyComponent, container, existingNode);\n// Compare MyComponent avec <h1>My App</h1>\n//\n// <div id=\"container\">\n//   <MyComponent />\n// </div>\n```\n\n----------------------------------------\n\nTITLE: Basic Component Re-rendering Prevention in Preact\nDESCRIPTION: Demonstrates the simplest way to prevent a component from re-rendering by implementing shouldComponentUpdate to always return false.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/es/guide/v8/external-dom-mutations.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass Block extends Component {\n  shouldComponentUpdate() {\n    return false;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Todo List Application\nDESCRIPTION: Mounts the TodoList component to the DOM using Preact's render function.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/src/components/controllers/repl/examples/todo-lists/todo-list-signals.txt#2025-04-09_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nrender(<TodoList />, document.getElementById('app'));\n```\n\n----------------------------------------\n\nTITLE: Using useErrorBoundary Hook in Preact\nDESCRIPTION: Demonstrates the basic usage of the useErrorBoundary hook to catch errors in child components and display a customized error UI. Returns an error object and a reset function.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/es/guide/v10/hooks.md#2025-04-09_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n// error = El error que fue capturado o `undefined` si nada dio error.\n// resetError = Llama a esta función para marcar un error como resuelto. Depende\n// depende de tu aplicación decidir qué significa eso y si es posible\n// recuperarse de los errores.\nconst [error, resetError] = useErrorBoundary();\n```\n\n----------------------------------------\n\nTITLE: Basic Server-Side Rendering Implementation in Preact\nDESCRIPTION: Demonstrates the basic usage of preact-render-to-string to render a simple component to HTML.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/server-side-rendering.md#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport render from 'preact-render-to-string';\nimport { h } from 'preact';\n\nconst name = 'Preact User!'\nconst App = <div class=\"foo\">Hello {name}</div>;\n\nconsole.log(render(App));\n// <div class=\"foo\">Hello Preact User!</div>\n```\n\n----------------------------------------\n\nTITLE: Установка Enzyme и адаптера для Preact\nDESCRIPTION: Команда npm для установки Enzyme и адаптера Preact, необходимых для модульного тестирования Preact-компонентов.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/ru/guide/v8/unit-testing-with-enzyme.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev enzyme enzyme-adapter-preact-pure\n```\n\n----------------------------------------\n\nTITLE: Adding Preact Debug Support in JavaScript\nDESCRIPTION: Shows how to add the preact/debug module to improve development experience with useful warnings, errors, and DevTools integration. This should be added at the top of the main entry file.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/kr/guide/v10/differences-to-react.md#2025-04-09_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport \"preact/debug\"; // <-- 이 문장을 메인 엔트리 파일의 최상단에 추가하세요\n```\n\n----------------------------------------\n\nTITLE: Server-Side Rendering with Preact and Express\nDESCRIPTION: Demonstrates how to render a Preact component on the server using Express.js and preact-render-to-string.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/blog/simplifying-islands-arch.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// server.js\nimport { h } from 'preact'\nimport preactRenderToString from 'preact-render-to-string'\n\n// ...remaining express.js setup\n\nconst HomePage = () => {\n  return h('h1', {}, 'hello')\n}\n\napp.get('/', async (req, res) => {\n  res.send(preactRenderToString(h(HomePage, {})))\n})\n```\n\n----------------------------------------\n\nTITLE: Testing Direct Event Handlers with act in Preact\nDESCRIPTION: Example of testing a component by directly calling an event handler instead of using simulate, requiring the use of act to batch updates and wrapper.update() to refresh Enzyme's view.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/pt-br/guide/v10/unit-testing-with-enzyme.md#2025-04-09_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nit(\"deve incrementar após clicar no botão 'Incrementar'\", () => {\n    const wrapper = mount(<Counter initialCount={5}/>);\n    const onClick = wrapper.find('button').props().onClick;\n\n    act(() => {\n      // Invoque o manipulador de cliques do botão, mas desta vez diretamente, em vez de\n       // por meio de uma API do Enzyme\n      onClick();\n    });\n    // Atualiza o output de saida do Enzyme\n    wrapper.update();\n\n    expect(wrapper.text()).to.include('Valor atual: 6');\n});\n```\n\n----------------------------------------\n\nTITLE: Input Length Validation Handler\nDESCRIPTION: Event handler function demonstrating input length validation, showing a problematic implementation that can lead to sync issues.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/forms.md#2025-04-09_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nconst onInput = (e) => {\n  if (e.currentTarget.value.length <= 3) {\n    setValue(e.currentTarget.value);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for Preact with Automatic JSX Transform\nDESCRIPTION: TypeScript configuration using the automatic transform (available in TypeScript 4.1.1+) that uses react-jsx mode with preact as the JSX import source.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/typescript.md#2025-04-09_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n// Automatic Transform, available in TypeScript >= 4.1.1\n{\n  \"compilerOptions\": {\n    \"jsx\": \"react-jsx\",\n    \"jsxImportSource\": \"preact\",\n    //...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Preact Dependencies\nDESCRIPTION: Command to install preact and preact-compat packages via npm\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v8/switching-to-preact.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -S preact preact-compat\n```\n\n----------------------------------------\n\nTITLE: Algorithm for Lazy Computed Signal Caching in JavaScript\nDESCRIPTION: This algorithm outlines the steps for determining when a computed signal can reuse its cached value, optimizing performance by avoiding unnecessary recomputations. It includes checks for global version numbers, notifications, and dependency changes.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/blog/signal-boosting.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n1. If the no signal anywhere has changed values since the last run, then bail out & return the cached value.\n\n2. If the computed signal is listening to notifications, and hasn't been notified since the last run, then bail out & return the cached value.\n\n3. Re-evaluate the dependencies in order. Check their version numbers. If no dependency has changed its version number, even after re-evaluation, then bail out & return the cached value.\n\n4. Run the compute function. If the returned value is different from the cached one, then increment the computed signal's version number. Cache and return the new value.\n```\n\n----------------------------------------\n\nTITLE: Server-Side Rendering with Preact and Express\nDESCRIPTION: Demonstrates basic server-side rendering of a Preact component using Express.js and preact-render-to-string. The server renders a static HTML page from a Preact component.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/ru/blog/simplifying-islands-arch.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// server.js\nimport { h } from 'preact'\nimport preactRenderToString from 'preact-render-to-string'\n\n// ...оставшаяся настройка express.js\n\nconst HomePage = () => {\n  return h('h1', {}, 'hello')\n}\n\napp.get('/', async (req, res) => {\n  res.send(preactRenderToString(h(HomePage, {})))\n})\n```\n\n----------------------------------------\n\nTITLE: Importing act from Preact Test Utils\nDESCRIPTION: Import statement for the act function from Preact's test utilities, which is used to handle state updates in testing.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/pt-br/guide/v10/unit-testing-with-enzyme.md#2025-04-09_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimport { act } from 'preact/test-utils';\n```\n\n----------------------------------------\n\nTITLE: Server-Side Rendering with Manifest Bundles\nDESCRIPTION: Demonstrates how to render a Preact component on the server and include client-side bundles using a manifest file.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/blog/simplifying-islands-arch.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport preactRenderToString from 'preact-render-to-string'\nimport HomePage from '../pages/HomePage.js'\nimport { h } from 'preact'\nimport { withManifestBundles } from '../lib/html.js'\n\nconst app = express()\n\napp.get('/', async (req, res) => {\n  res.send(\n    withManifestBundles({\n      body: preactRenderToString(h(HomePage, {})),\n    })\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Browserify alias for Preact\nDESCRIPTION: Package.json configuration for aliasing React to preact-compat using aliasify.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/fr/guide/v8/switching-to-preact.md#2025-04-09_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"aliasify\": {\n    \"aliases\": {\n      \"react\": \"preact-compat\",\n      \"react-dom\": \"preact-compat\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Server-Side Rendering with Manifest Bundles\nDESCRIPTION: Demonstrates how to render a Preact component on the server and include client-side bundles using a manifest file.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/blog/simplifying-islands-arch.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport preactRenderToString from 'preact-render-to-string'\nimport HomePage from '../pages/HomePage.js'\nimport { h } from 'preact'\nimport { withManifestBundles } from '../lib/html.js'\n\nconst app = express()\n\napp.get('/', async (req, res) => {\n  res.send(\n    withManifestBundles({\n      body: preactRenderToString(h(HomePage, {})),\n    })\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Virtual DOM Elements with Preact.h()\nDESCRIPTION: Illustrates how to use Preact.h() or Preact.createElement() to create virtual DOM elements. Shows various examples of creating elements with different attributes and child structures.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/fr/guide/v8/api-reference.md#2025-04-09_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport { h } from 'preact';\n\nh('div', { id: 'foo' }, 'Hello!');\n// <div id=\"foo\">Hello!</div>\n\nh('div', { id: 'foo' }, 'Hello', null, ['Preact!']);\n// <div id=\"foo\">Hello Preact!</div>\n\nh(\n\t'div',\n\t{ id: 'foo' },\n\th('span', null, 'Hello!')\n);\n// <div id=\"foo\"><span>Hello!</span></div>\n```\n\n----------------------------------------\n\nTITLE: Installing Preact and preact-compat dependencies\nDESCRIPTION: Command to install Preact and preact-compat packages using npm.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/fr/guide/v8/switching-to-preact.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -S preact preact-compat\n```\n\n----------------------------------------\n\nTITLE: Direct Signal Usage in JSX\nDESCRIPTION: Examples showing how signals can be passed directly to JSX without accessing their value property, enabling optimized DOM updates that bypass Virtual DOM diffing.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/es/blog/introducing-signals.md#2025-04-09_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst count = signal(0);\n \n// En lugar de esto:\n<p>Value: {count.value}</p>\n \n// … podemos pasar el signal directamente al JSX:\n<p>Value: {count}</p>\n \n// … o incluso pasándolo como propiedades del DOM:\n<input value={count} onInput={...} />\n```\n\n----------------------------------------\n\nTITLE: Webpack Server Configuration for Preact SSR\nDESCRIPTION: Webpack configuration for server-side rendering with Preact, including Babel loader for JSX transpilation.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/blog/simplifying-islands-arch.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// webpack.config.server.js\nconst path = require('path')\nconst nodeExternals = require('webpack-node-externals')\n\nmodule.exports = {\n  mode: process.env.NODE_ENV != 'production' ? 'development' : 'production',\n  target: 'node',\n  entry: path.resolve(__dirname, './src/server/app.js'),\n  output: {\n    filename: 'server.js',\n    path: path.resolve(__dirname, './dist'),\n  },\n  stats: 'errors-warnings',\n  resolve: {\n    extensions: ['.js', '.jsx'],\n  },\n  module: {\n    rules: [{ test: /\\.jsx?$/, loader: 'babel-loader' }],\n  },\n  externals: [nodeExternals()],\n}\n```\n\n----------------------------------------\n\nTITLE: Different Rendering Modes in Enzyme with Preact\nDESCRIPTION: Example showing the three different rendering modes available in Enzyme: mount for full rendering, shallow for rendering only the component itself, and render for static HTML rendering.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/pt-br/guide/v10/unit-testing-with-enzyme.md#2025-04-09_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { mount, shallow, render } from 'enzyme';\n\n// Renderiza a árvore de componentes completa:\nconst wrapper = mount(<MyComponent prop=\"value\"/>);\n\n// Renderiza apenas a saída direta do `MyComponent` (ou seja, componentes filho\" mock \"\n// para renderizar apenas como espaços reservados):\nconst wrapper = shallow(<MyComponent prop=\"value\"/>);\n\n// Renderize a árvore de componentes completa em uma string HTML e analise o resultado:\nconst wrapper = render(<MyComponent prop=\"value\"/>);\n```\n\n----------------------------------------\n\nTITLE: Basic Component Update Prevention in Preact\nDESCRIPTION: Simple implementation of shouldComponentUpdate to prevent component re-rendering. This is the most basic way to allow external DOM mutations.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v8/external-dom-mutations.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass Block extends Component {\n  shouldComponentUpdate() {\n    return false;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Prerender Attribute to Script Tag\nDESCRIPTION: A diff showing how to modify the HTML file to add the prerender attribute to the script tag that contains the prerender function.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/blog/prerendering-preset-vite.md#2025-04-09_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n// index.html\n-<script type=\"module\" src=\"/src/index.jsx\"></script>\n+<script prerender type=\"module\" src=\"/src/index.jsx\"></script>\n```\n\n----------------------------------------\n\nTITLE: Writing Enzyme Tests for Preact Counter Component\nDESCRIPTION: Example of unit tests using Enzyme to test the Counter component, including initial render and button click functionality.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/unit-testing-with-enzyme.md#2025-04-09_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { expect } from 'chai';\nimport { h } from 'preact';\nimport { mount } from 'enzyme';\n\nimport Counter from '../src/Counter';\n\ndescribe('Counter', () => {\n  it('should display initial count', () => {\n    const wrapper = mount(<Counter initialCount={5}/>);\n    expect(wrapper.text()).to.include('Current value: 5');\n  });\n\n  it('should increment after \"Increment\" button is clicked', () => {\n    const wrapper = mount(<Counter initialCount={5}/>);\n\n    wrapper.find('button').simulate('click');\n\n    expect(wrapper.text()).to.include('Current value: 6');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Using the BoundComponent Class in Preact\nDESCRIPTION: Demonstrates how to use the custom BoundComponent class to create a Link component with auto-bound click handler. The example shows defining which methods to bind and accessing them through the binds() method.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/tr/guide/v8/extending-component.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclass Link extends BoundComponent {\n    bind = ['click'];\n    click() {\n        open(this.props.href);\n    }\n    render({ children }) {\n        let { click } = this.binds();\n        return <span onClick={ click }>{ children }</span>;\n    }\n}\n\nrender(\n    <Link href=\"http://example.com\">Bana Tıkla</Link>,\n    document.body\n);\n```\n\n----------------------------------------\n\nTITLE: Обновление состояния компонента в тестах Enzyme\nDESCRIPTION: Пример теста с прямым вызовом обработчика события и обновлением представления Enzyme.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/ru/guide/v8/unit-testing-with-enzyme.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nit('should increment after \"Increment\" button is clicked', () => {\n    const wrapper = mount(<Counter initialCount={5}/>);\n    const onClick = wrapper.find('button').props().onClick;\n\n    // Вызываем обработчик нажатия кнопки, но на этот раз напрямую, а не через Enzyme API\n    onClick();\n\n    // Обновляем представление результатов Enzyme\n    wrapper.update();\n\n    expect(wrapper.text()).to.include('Текущее значение: 6');\n});\n```\n\n----------------------------------------\n\nTITLE: Shorthand Syntax for Preventing Updates in Preact\nDESCRIPTION: Shows a concise way to define shouldComponentUpdate using an arrow function to prevent component updates.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/zh/guide/v8/external-dom-mutations.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclass Block extends Component {\n  shouldComponentUpdate = () => false;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Click Handler in Preact JSX\nDESCRIPTION: Shows how to add a click event handler to a button in Preact using JSX. This snippet demonstrates Preact's declarative approach to event handling using the onClick prop.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/tutorial/02-events.md#2025-04-09_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nfunction clicked() {\n  console.log('clicked')\n}\n<button onClick={clicked}>\n```\n\n----------------------------------------\n\nTITLE: Configuring Import Map for Preact with Hooks, Signals, and HTM\nDESCRIPTION: Shows how to set up an Import Map for Preact that includes hooks, signals, and HTM. It demonstrates proper module resolution and external dependency handling.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/no-build-workflows.md#2025-04-09_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"importmap\">\n  {\n    \"imports\": {\n      \"preact\": \"https://esm.sh/preact@10.23.1\",\n      \"preact/\": \"https://esm.sh/preact@10.23.1/\",\n      \"@preact/signals\": \"https://esm.sh/@preact/signals@1.3.0?external=preact\",\n      \"htm/preact\": \"https://esm.sh/htm@3.1.1/preact?external=preact\"\n    }\n  }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Simple Counter Component in Preact\nDESCRIPTION: Example of a Preact component that displays a counter with an increment button, using useState hook.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/unit-testing-with-enzyme.md#2025-04-09_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { h } from 'preact';\nimport { useState } from 'preact/hooks';\n\nexport default function Counter({ initialCount }) {\n  const [count, setCount] = useState(initialCount);\n  const increment = () => setCount(count + 1);\n\n  return (\n    <div>\n      Current value: {count}\n      <button onClick={increment}>Increment</button>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setup Code for Counter Validation\nDESCRIPTION: Helper code to validate the counter implementation by monitoring count values and synchronization across components.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/tutorial/06-context.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar output = useRef();\n\nfunction getCounts() {\n  var counts = [];\n  var text = output.current.innerText;\n  var r = /Count:\\s*([\\w.-]*)/gi;\n  while (t = r.exec(text)) {\n    var num = Number(t[1]);\n    counts.push(isNaN(num) ? t[1] : num);\n  }\n  return counts;\n}\n\nuseResult(function (result) {\n  output.current = result.output;\n\n  if (getCounts().length !== 3) {\n    console.warn('It looks like you\\'ve not initialized the `count` value to 0.');\n  }\n  \n  var timer;\n  var count = 0;\n  var options = require('preact').options;\n\n  var oe = options.event;\n  options.event = function(e) {\n    if (e.currentTarget.localName !== 'button') return;\n    clearTimeout(timer);\n    timer = setTimeout(function() {\n      var counts = getCounts();\n      if (counts.length !== 3) {\n        return console.warn('We seem to be missing one of the counters.');\n      }\n      if (counts[0] !== counts[2] || counts[0] !== counts[1]) {\n        return console.warn('It looks like the counters aren\\'t in sync.');\n      }\n      var solved = counts[0] === ++count;\n      store.setState({ solved: solved });\n    }, 10);\n    if (oe) return oe.apply(this, arguments);\n  }\n\n  return function () {\n    options.event = oe;\n  };\n}, []);\n```\n\n----------------------------------------\n\nTITLE: Aliasing React to Preact using Import Map\nDESCRIPTION: Demonstrates how to use an Import Map to alias React to Preact, allowing the use of React-based libraries with Preact. It includes mappings for React, ReactDOM, and an example with Material-UI.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/no-build-workflows.md#2025-04-09_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"importmap\">\n  {\n    \"imports\": {\n      \"preact\": \"https://esm.sh/preact@10.23.1\",\n      \"preact/\": \"https://esm.sh/preact@10.23.1/\",\n      \"react\": \"https://esm.sh/preact@10.23.1/compat\",\n      \"react/\": \"https://esm.sh/preact@10.23.1/compat/\",\n      \"react-dom\": \"https://esm.sh/preact@10.23.1/compat\",\n      \"@mui/material\": \"https://esm.sh/@mui/material@5.16.7?external=react,react-dom\"\n    }\n  }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Enzyme Rendering Modes with Preact\nDESCRIPTION: Demonstrates the three rendering modes available in Enzyme - mount (full rendering), shallow (renders only the component's direct output), and render (HTML string rendering).\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v8/unit-testing-with-enzyme.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { mount, shallow, render } from 'enzyme';\n\n// Render the full component tree:\nconst wrapper = mount(<MyComponent prop=\"value\"/>);\n\n// Render only `MyComponent`'s direct output (ie. \"mock\" child components\n// to render only as placeholders):\nconst wrapper = shallow(<MyComponent prop=\"value\"/>);\n\n// Render the full component tree to an HTML string, and parse the result:\nconst wrapper = render(<MyComponent prop=\"value\"/>);\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack Aliases for Karma with Preact and Enzyme\nDESCRIPTION: Set up Webpack aliases in Karma configuration to map React and related modules to their Preact equivalents for testing with Enzyme.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/zh/guide/v8/unit-testing-with-enzyme.md#2025-04-09_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"resolve\": {\n    \"alias\": {\n        \"react-dom/server\": \"preact-render-to-string\",\n        \"react-addons-test-utils\": \"preact-test-utils\",\n        \"react\": \"preact-compat-enzyme\",\n        \"react-dom\": \"preact-compat-enzyme\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Implementation of Grouped Radio Buttons\nDESCRIPTION: Demonstrates an incorrect way of implementing grouped radio buttons using linkState, where the state doesn't update properly when selecting different options.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/tr/guide/v8/linked-state.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport linkState from 'linkstate';\n\nclass Foo extends Component {\n  render({ }, { yes, no }) {\n    return (\n      <div>\n        <input type=\"radio\" name=\"demo\"\n          value=\"yes\" checked={yes}\n          onChange={linkState(this, 'yes')}\n        />\n        <input type=\"radio\" name=\"demo\"\n          value=\"no\" checked={no}\n          onChange={linkState(this, 'no')}\n        />\n      </div>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Controlled Checkbox Component in Preact\nDESCRIPTION: This code demonstrates how to create a controlled checkbox component in Preact. It uses the onClick event rather than onChange to toggle the checkbox state, which avoids the redundant update cycle that would occur with onChange. The component maintains the checked state internally and updates it when the user clicks on the checkbox or its label.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/fr/guide/v8/forms.md#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nclass MyForm extends Component {\n    toggle = e => {\n        let checked = !this.state.checked;\n        this.setState({ checked });\n    };\n    render({ }, { checked }) {\n        return (\n            <label>\n                <input\n                    type=\"checkbox\"\n                    checked={checked}\n                    onClick={this.toggle} />\n            </label>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Shorthand for Preventing Component Updates in Preact\nDESCRIPTION: Shows a concise way to prevent a Preact component from re-rendering using an arrow function for the shouldComponentUpdate method. This technique is useful when working with external DOM-mutating libraries.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/tr/guide/v8/external-dom-mutations.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclass Block extends Component {\n  shouldComponentUpdate = () => false;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering 'We Are Using' Component in Markdown with JSX\nDESCRIPTION: A JSX component embedded in a Markdown file that displays a list of companies and organizations using Preact. The component is self-closing and renders inside a div with the 'breaker' class.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/about/we-are-using.md#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<div class=\"breaker\">\n  <we-are-using></we-are-using>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Preventing Component Updates in Preact\nDESCRIPTION: Demonstrates how to prevent a Preact component from re-rendering by implementing the shouldComponentUpdate lifecycle method. This allows external libraries to freely mutate the DOM without interference from Preact's virtual DOM.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/tr/guide/v8/external-dom-mutations.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass Block extends Component {\n  shouldComponentUpdate() {\n    return false;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Conditionally Including Preact Debug Tools in JavaScript\nDESCRIPTION: This code demonstrates how to conditionally include Preact debug tools only during development, using environment variables and require statements to optimize production builds.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/debugging.md#2025-04-09_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// Must be the first import\nif (process.env.NODE_ENV==='development') {\n  // Must use require here as import statements are only allowed\n  // to exist at top-level.\n  require(\"preact/debug\");\n}\n\nimport { render } from 'preact';\nimport App from './components/App';\n\nrender(<App />, document.getElementById('root'));\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel for Preact JSX Runtime\nDESCRIPTION: This snippet shows the Babel configuration to use Preact's JSX runtime instead of React's. It uses the @babel/plugin-transform-react-jsx plugin with automatic runtime and Preact as the import source.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/blog/simplifying-islands-arch.md#2025-04-09_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    [\n      \"@babel/plugin-transform-react-jsx\",\n      { \"runtime\": \"automatic\", \"importSource\": \"preact\" }\n    ]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Preact directly\nDESCRIPTION: Command to install Preact package using npm for direct migration.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/fr/guide/v8/switching-to-preact.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save preact  # ou : npm i -S preact\n```\n\n----------------------------------------\n\nTITLE: Complete External DOM Mutation Example in Preact\nDESCRIPTION: A comprehensive example showing how to handle external DOM mutations with lifecycle methods including component mounting, prop updates, and cleanup.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/es/guide/v8/external-dom-mutations.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nclass Example extends Component {\n  shouldComponentUpdate() {\n    // no re-dibujar vía diff:\n    return false;\n  }\n\n  componentWillReceiveProps(nextProps) {\n    // acá puedes hacer algo con las props entrantes si lo necesitas\n  }\n\n  componentDidMount() {\n    // ahora montado puedes modificar libremente el DOM:\n    let thing = document.createElement('maybe-a-custom-element');\n    this.base.appendChild(thing);\n  }\n\n  componentWillUnmount() {\n    // el componente será removido del DOM, realiza cualquier limpieza\n  }\n\n  render() {\n    return <div class=\"example\" />;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Simplified Syntax for Preventing Re-rendering in Preact\nDESCRIPTION: An alternative, more concise syntax using an arrow function to prevent component re-rendering in Preact.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/pt-br/guide/v8/external-dom-mutations.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclass Block extends Component {\n  shouldComponentUpdate = () => false;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel for Preact JSX\nDESCRIPTION: Babel configuration to set JSX pragma to Preact's h function.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/fr/guide/v8/switching-to-preact.md#2025-04-09_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    [\"transform-react-jsx\", { \"pragma\": \"h\" }]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Preact X Dependencies\nDESCRIPTION: Commands for installing Preact X and removing preact-compat\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/upgrade-guide.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install preact\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm remove preact-compat\n```\n\n----------------------------------------\n\nTITLE: Effect Cleanup in Preact Signals\nDESCRIPTION: Shows how to perform cleanup when an effect runs, allowing you to clean up resources before the next effect execution. This is useful for resource management like connections.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/signals.md#2025-04-09_snippet_13\n\nLANGUAGE: js\nCODE:\n```\neffect(() => {\n  Chat.connect(username.value)\n\n  return () => Chat.disconnect(username.value)\n})\n```\n\n----------------------------------------\n\nTITLE: Preventing Component Re-rendering in Preact\nDESCRIPTION: A basic example showing how to prevent a Preact component from re-rendering by implementing shouldComponentUpdate to return false.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/pt-br/guide/v8/external-dom-mutations.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass Block extends Component {\n  shouldComponentUpdate() {\n    return false;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Garbage Collection Example with Computed Signals\nDESCRIPTION: Illustrates a scenario where proper garbage collection handling is necessary for computed signals to prevent memory leaks when signals go out of scope.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/blog/signal-boosting.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst s = signal(0);\n\n{\n  const c = computed(() => s.value)\n}\n// c has gone out of scope\n```\n\n----------------------------------------\n\nTITLE: Complete Example of External DOM Mutation Handling in Preact\nDESCRIPTION: Illustrates a full component lifecycle with shouldComponentUpdate, componentWillReceiveProps, componentDidMount, and componentWillUnmount to manage external DOM changes.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/zh/guide/v8/external-dom-mutations.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nclass Example extends Component {\n  shouldComponentUpdate() {\n    // do not re-render via diff:\n    return false;\n  }\n\n  componentWillReceiveProps(nextProps) {\n    // you can do something with incoming props here if you need\n  }\n\n  componentDidMount() {\n    // now mounted, can freely modify the DOM:\n    let thing = document.createElement('maybe-a-custom-element');\n    this.base.appendChild(thing);\n  }\n\n  componentWillUnmount() {\n    // component is about to be removed from the DOM, perform any cleanup.\n  }\n\n  render() {\n    return <div class=\"example\" />;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Webpack Alias Configuration\nDESCRIPTION: Webpack configuration to alias React imports to preact-compat\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v8/switching-to-preact.md#2025-04-09_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"resolve\": {\n    \"alias\": {\n      \"react\": \"preact-compat\",\n      \"react-dom\": \"preact-compat\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Различные режимы рендеринга в Enzyme\nDESCRIPTION: Демонстрация трех режимов рендеринга в Enzyme: полный (mount), поверхностный (shallow) и строковый (render).\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/ru/guide/v8/unit-testing-with-enzyme.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { mount, shallow, render } from 'enzyme';\n\n// Отображаем полное дерево компонентов:\nconst wrapper = mount(<MyComponent prop=\"value\"/>);\n\n// Отображаем только прямой вывод `MyComponent` (т. е. «имитация» дочерних компонентов\n// для рендеринга только в качестве заполнителей):\nconst wrapper = shallow(<MyComponent prop=\"value\"/>);\n\n// Отображаем полное дерево компонентов в строку HTML и анализируем результат:\nconst wrapper = render(<MyComponent prop=\"value\"/>);\n```\n\n----------------------------------------\n\nTITLE: Using Default Values with Context in Preact\nDESCRIPTION: Merging default context values with overrides to maintain type safety while allowing partial property updates.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/typescript.md#2025-04-09_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nconst AppContext = createContext(appContextDefault);\n\nfunction App() {\n  return (\n    <AppContext.Provider\n      value={{\n        lang: \"de\",\n        ...appContextDefault\n      }}\n    >\n      <ComponentThatUsesAppContext />\n    </AppContext.Provider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Correctly Implementing Radio Button Groups with linkState Custom Paths in Preact\nDESCRIPTION: This snippet demonstrates the correct implementation of grouped radio buttons using linkState's third argument to specify a custom path for the event value. It uses a single state property to track the selected value.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v8/linked-state.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport linkState from 'linkstate';\n\nclass Foo extends Component {\n  render({ }, { answer }) {\n    return (\n      <div>\n        <input type=\"radio\" name=\"demo\"\n          value=\"yes\" checked={answer == 'yes'}\n          onChange={linkState(this, 'answer', 'target.value')}\n        />\n        <input type=\"radio\" name=\"demo\"\n          value=\"no\" checked={answer == 'no'}\n          onChange={linkState(this, 'answer', 'target.value')}\n        />\n      </div>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Example of External DOM Manipulation in Preact\nDESCRIPTION: A comprehensive example showing how to disable re-rendering and safely manipulate the DOM directly within a Preact component's lifecycle methods.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/pt-br/guide/v8/external-dom-mutations.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nclass Example extends Component {\n  shouldComponentUpdate() {\n    // não renderize via diff:\n    return false;\n  }\n\n  componentWillReceiveProps(nextProps) {\n    // você pode fazer algo com as props aqui, se precisar.\n  }\n\n  componentDidMount() {\n    // agora montado, você pode livremente modificar o DOM.\n    let thing = document.createElement('talvez-um-elemento-customizado');\n    this.base.appendChild(thing);\n  }\n\n  componentWillUnmount() {\n    // componente está perto de ser removido do DOM, faça qualquer limpeza.\n  }\n\n  render() {\n    return <div class=\"exemplo\" />;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Babel JSX Pragma Configuration\nDESCRIPTION: Babel configuration for setting JSX pragma to Preact's h function\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v8/switching-to-preact.md#2025-04-09_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    [\"transform-react-jsx\", { \"pragma\": \"h\" }]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter for Preact Branding Page\nDESCRIPTION: YAML frontmatter that defines the title metadata for the branding documentation page.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/branding.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Branding\n---\n```\n\n----------------------------------------\n\nTITLE: Conditional useEffect Execution in Preact\nDESCRIPTION: Shows how to control when useEffect callbacks run by specifying dependencies in the dependency array. Contains examples of effects that run only on first render and effects that run when specific values change.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/tutorial/07-side-effects.md#2025-04-09_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { useEffect, useState } from 'preact/hooks';\n\nexport default function App() {\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    console.log('<App> was just rendered for the first time')\n  }, [])\n\n  useEffect(() => {\n    console.log('count value was changed to: ', count)\n  }, [count])\n  //  ^ run this any time `count` changes, and on the first render\n\n  return <button onClick={() => setCount(count+1)}>{count}</button>\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a MixedComponent Class with Mixin Support in Preact\nDESCRIPTION: Example of extending Preact's Component class to create a MixedComponent that supports mixins. The constructor automatically applies all mixins defined in the mixins array to the component instance.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/tr/guide/v8/extending-component.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nclass MixedComponent extends Component {\n    constructor() {\n        super();\n        (this.mixins || []).forEach( m => Object.assign(this, m) );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Styling for Spiral Animation\nDESCRIPTION: CSS styles for the spiral animation including page layout, cursor styling, and animation picker UI. Defines the visual appearance of dots, labels, and container elements.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/src/components/controllers/repl/examples/spiral.txt#2025-04-09_snippet_2\n\nLANGUAGE: css\nCODE:\n```\nhtml, body {\n\theight: 100%;\n\tbackground: #222;\n\tfont: 100%/1.21 'Helvetica Neue',helvetica,sans-serif;\n\ttext-rendering: optimizeSpeed;\n\tcolor: #888;\n\toverflow: hidden;\n}\n\n#main {\n\tposition: absolute;\n\tleft: 0;\n\ttop: 0;\n\twidth: 100%;\n\theight: 100%;\n\toverflow: hidden;\n}\n\n.cursor {\n\tposition: absolute;\n\tleft: 0;\n\ttop: 0;\n\twidth: 8px;\n\theight: 8px;\n\tmargin: -5px 0 0 -5px;\n\tborder: 2px solid #F00;\n\tborder-radius: 50%;\n\ttransform-origin: 50% 50%;\n\ttransition: all 250ms ease;\n\ttransition-property: width, height, margin;\n\tpointer-events: none;\n\toverflow: hidden;\n\tfont-size: 9px;\n\tline-height: 25px;\n\ttext-indent: 15px;\n\twhite-space: nowrap;\n\n\t&.label {\n\t\toverflow: visible;\n\t}\n\n\t&.big {\n\t\twidth: 24px;\n\t\theight: 24px;\n\t\tmargin: -13px 0 0 -13px;\n\t}\n\n\t.label {\n\t\tposition: absolute;\n\t\tleft: 0;\n\t\ttop: 0;\n\t\tz-index: 10;\n\t}\n}\n\n.animation-picker {\n\tposition: fixed;\n\tdisplay: inline-block;\n\tright: 0;\n\ttop: 0;\n\tpadding: 10px;\n\tbackground: #000;\n\tcolor: #BBB;\n\tz-index: 1000;\n\n\tselect {\n\t\tfont-size: 100%;\n\t\tmargin-left: 5px;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Suspended Hydration with Preact X\nDESCRIPTION: Demonstrates the use of resumed hydration in Preact X, allowing for partial interactivity during lazy loading of components. This feature enables better performance by making critical parts of the UI interactive while deferring the loading of less important content.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/blog/preact-x.md#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst App = () => {\n  return (\n    <>\n      <Header>\n      <main>\n        <Suspense>\n          <LazyArticleHeader />\n          <Suspense>\n            <article>\n              <LazyContents />\n            </article>\n          </Suspense>\n        </Suspense>\n      </main>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using linkState in Preact for Concise State Binding\nDESCRIPTION: Demonstrates how to use Preact's linkState module to create a concise binding between input events and component state, eliminating the need for custom handler methods.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/es/guide/v8/linked-state.md#2025-04-09_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nclass Foo extends Component {\n\trender({ }, { text }) {\n\t\treturn <input value={text} onInput={linkState(this, 'text')} />;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Implementation of Radio Button Groups with linkState in Preact\nDESCRIPTION: This snippet shows an incorrect implementation of grouped radio buttons using linkState, where selecting one button doesn't unselect the other because separate state properties are used for each button.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v8/linked-state.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport linkState from 'linkstate';\n\nclass Foo extends Component {\n  render({ }, { yes, no }) {\n    return (\n      <div>\n        <input type=\"radio\" name=\"demo\"\n          value=\"yes\" checked={yes}\n          onChange={linkState(this, 'yes')}\n        />\n        <input type=\"radio\" name=\"demo\"\n          value=\"no\" checked={no}\n          onChange={linkState(this, 'no')}\n        />\n      </div>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Computed Signals Example\nDESCRIPTION: Shows how to create computed signals that derive state from other signals.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/signals.md#2025-04-09_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { signal, computed } from \"@preact/signals\";\n\nconst todos = signal([\n  { text: \"Buy groceries\", completed: true },\n  { text: \"Walk the dog\", completed: false },\n]);\n\nconst completed = computed(() => {\n  return todos.value.filter(todo => todo.completed).length;\n});\n\nconsole.log(completed.value);\n```\n\n----------------------------------------\n\nTITLE: Preact Compat Import Update\nDESCRIPTION: Demonstrates the change in importing React compatibility layer between Preact 8.x and Preact X.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/whats-new.md#2025-04-09_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n// Preact 8.x\nimport React from \"preact-compat\";\n\n// Preact X\nimport React from \"preact/compat\";\n```\n\n----------------------------------------\n\nTITLE: HTML Template Generation with Manifest Bundles\nDESCRIPTION: Helper function to generate an HTML template with client-side bundle scripts based on a manifest file.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/blog/simplifying-islands-arch.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// fetch the manifest from the client output\nimport manifest from '../../dist/js/manifest.json'\n\nexport const withManifestBundles = ({ styles, body }) => {\n  // go through each key in the manifest and construct\n  // a script tag for each.\n  const bundledScripts = Object.keys(manifest).map(key => {\n    const scriptPath = `/public/js/${manifest[key]}`\n    return `<script src=${scriptPath}></script>`\n  })\n\n  return `<html lang=\"en\">\n    <head>\n      <meta charset=\"UTF-8\" />\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n      <style id=\"_goober\">\n        ${styles}\n      </style>\n    </head>\n\n    <body>\n      ${body}\n    </body>\n    ${bundledScripts.join('')}\n  </html>`\n}\n```\n\n----------------------------------------\n\nTITLE: Correcting Invalid JSX Usage in JavaScript\nDESCRIPTION: This code shows the correct way to render a JSX literal directly, fixing the error from the previous example.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/debugging.md#2025-04-09_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst Foo = <div>foo</div>;\nrender(Foo, dom);\n```\n\n----------------------------------------\n\nTITLE: HTML Template Generation with Manifest Bundles\nDESCRIPTION: Helper function to generate HTML with bundled scripts based on a webpack manifest. It reads the manifest JSON and creates script tags for each bundle.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/ru/blog/simplifying-islands-arch.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// получаем манифест из клиентского вывода\nimport manifest from '../../dist/js/manifest.json'\n\nexport const withManifestBundles = ({ styles, body }) => {\n  // проходимся по каждому ключу в манифесте и создаем\n  // тег скрипта для каждого.\n  const bundledScripts = Object.keys(manifest).map(key => {\n    const scriptPath = `/public/js/${manifest[key]}`\n    return `<script src=${scriptPath}></script>`\n  })\n\n  return `<html lang=\"en\">\n    <head>\n      <meta charset=\"UTF-8\" />\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n      <style id=\"_goober\">\n        ${styles}\n      </style>\n    </head>\n\n    <body>\n      ${body}\n    </body>\n    ${bundledScripts.join('')}\n  </html>`\n}\n```\n\n----------------------------------------\n\nTITLE: Direct Signal Access in Components Example\nDESCRIPTION: This example shows how signals can be directly accessed in components without selectors or wrapper functions. The component automatically updates when the signal value changes by accessing count.value.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/zh/blog/introducing-signals.md#2025-04-09_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { render } from \"preact\";\nimport { signal } from \"@preact/signals\";\n\n// 假设这是一些全局状态，整个应用都需要访问：\nconst count = signal(0);\n \nfunction Counter() {\n return (\n   <button onClick={() => count.value++}>\n     Value: {count.value}\n   </button>\n );\n}\n\nrender(<Counter />, document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Implementing Fragments in Preact X\nDESCRIPTION: Demonstrates the usage of Fragments feature that allows rendering multiple elements without a wrapper DOM element.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/whats-new.md#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Foo() {\n  return (\n    <>\n      <div>A</div>\n      <div>B</div>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript with Babel for Preact\nDESCRIPTION: TypeScript configuration for use with Babel transpilation, preserving JSX but setting factory and fragment options for correct types.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/typescript.md#2025-04-09_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"jsx\": \"preserve\",\n    \"jsxFactory\": \"h\",\n    \"jsxFragmentFactory\": \"Fragment\",\n    //...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript with Babel for Preact\nDESCRIPTION: TypeScript configuration for use with Babel transpilation, preserving JSX but setting factory and fragment options for correct types.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/typescript.md#2025-04-09_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"jsx\": \"preserve\",\n    \"jsxFactory\": \"h\",\n    \"jsxFragmentFactory\": \"Fragment\",\n    //...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Vite Plugin Patch for Prerendering\nDESCRIPTION: This snippet shows a patch applied to Vite's importAnalysisBuild plugin to prevent errors when running browser bundles in Node during prerendering. It adds a check for the existence of the window object.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/blog/prerendering-preset-vite.md#2025-04-09_snippet_10\n\nLANGUAGE: diff\nCODE:\n```\n// src/node/plugins/importAnalysisBuild.ts\n-if (__VITE_IS_MODERN__ && deps && deps.length > 0) {,\n+if (__VITE_IS_MODERN__ && deps && deps.length > 0 && typeof window !== 'undefined') {,\n\t const links = document.getElementsByTagName('link')\n\t ...\n```\n\n----------------------------------------\n\nTITLE: Setting up module-alias for Node.js\nDESCRIPTION: JavaScript code to set up module aliases for React in Node.js using module-alias package.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/fr/guide/v8/switching-to-preact.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar path = require('path')\nvar moduleAlias = require('module-alias')\n\nmoduleAlias.addAliases({\n  'react': 'preact-compat/dist/preact-compat.min',\n  'react-dom': 'preact-compat/dist/preact-compat.min',\n  'create-react-class': path.resolve(__dirname, './create-preact-class')\n})\n```\n\n----------------------------------------\n\nTITLE: Setting up Preact documentation project (Bash)\nDESCRIPTION: Commands to install dependencies and start the development server for the Preact documentation website. This sets up the local environment for contributors.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/CONTRIBUTING.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install\n\n$ npm run dev\n```\n\n----------------------------------------\n\nTITLE: Manually Triggering State Updates in Enzyme Tests\nDESCRIPTION: Example of manually triggering a component's event handler and using the update() method to refresh Enzyme's view of the rendered output after state changes.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v8/unit-testing-with-enzyme.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nit('should increment after \"Increment\" button is clicked', () => {\n    const wrapper = mount(<Counter initialCount={5}/>);\n    const onClick = wrapper.find('button').props().onClick;\n\n    // Invoke the button's click handler, but this time directly, instead of\n    // via an Enzyme API\n    onClick();\n\n    // Refresh Enzyme's view of the output\n    wrapper.update();\n\n    expect(wrapper.text()).to.include('Current value: 6');\n});\n```\n\n----------------------------------------\n\nTITLE: Prerender Function with Data Initialization in Preact\nDESCRIPTION: This snippet demonstrates a prerender function that initializes data and makes it available globally. It uses a fetch operation to get data and stores it in globalThis for use in components.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/blog/prerendering-preset-vite.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nlet initialized = false;\nexport async function prerender(data) {\n    const init = async () => {\n        const res = await fetch(...);\n        if (res.ok) globalThis.myFetchData = await res.json();\n\n        initialized = true;\n    }\n    if (!initialized) await init();\n\n    const { html, links } = await ssr(<App {...data} />);\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Node Module Patching\nDESCRIPTION: Direct node module cache manipulation for React to Preact aliasing\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v8/switching-to-preact.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar React = require('react')\nvar ReactDOM = require('react-dom')\nvar ReactDOMServer = require('react-dom/server')\nvar CreateReactClass = require('create-react-class')\nvar Preact = require('preact-compat/dist/preact-compat.min')\nvar Module = module.constructor\nModule._cache[require.resolve('react')].exports = Preact\nModule._cache[require.resolve('react-dom')].exports = Preact\nModule._cache[require.resolve('create-react-class')].exports.default = Preact.createClass\n```\n\n----------------------------------------\n\nTITLE: Converting ReactDOM.render to Preact render\nDESCRIPTION: Shows the basic conversion from ReactDOM.render() to Preact's render() method. The change demonstrates the simpler API of Preact where rendering can be done directly to document.body.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v8/switching-to-preact.md#2025-04-09_snippet_9\n\nLANGUAGE: diff\nCODE:\n```\n- ReactDOM.render(<App />, document.getElementById('app'));\n+ render(<App />, document.body);\n```\n\n----------------------------------------\n\nTITLE: Suspense-based Fetch Utility for Isomorphic Data Fetching\nDESCRIPTION: Implementation of a suspense-based fetch utility that enables isomorphic data fetching for both client and server environments.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/blog/prerendering-preset-vite.md#2025-04-09_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n// src/use-fetch.js\nimport { useState } from \"preact/hooks\";\n\nconst cache = new Map();\n\nasync function load(url) {\n\tconst res = await fetch(url);\n\tif (res.ok) return await res.text();\n\tthrow new Error(`Failed to fetch ${url}!`);\n}\n\n// Simple suspense-based fetch mechanism with caching\nexport function useFetch(url) {\n\tconst [_, update] = useState({});\n\n\tlet data = cache.get(url);\n\tif (!data) {\n\t\tdata = load(url);\n\t\tcache.set(url, data);\n\t\tdata.then(\n\t\t\t(res) => update((data.res = res)),\n\t\t\t(err) => update((data.err = err)),\n\t\t);\n\t}\n\n\tif (data.res) return data.res;\n\tif (data.err) throw data.err;\n\tthrow data;\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Prerendering in Vite Configuration\nDESCRIPTION: A diff showing how to enable prerendering in the Vite configuration file by adding the prerender option to the @preact/preset-vite plugin.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/blog/prerendering-preset-vite.md#2025-04-09_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n// vite.config.js\nimport { defineConfig } from 'vite';\nimport preact from '@preact/preset-vite';\n\n// https://vitejs.dev/config/\nexport default defineConfig({\n\tplugins: [\n\t\tpreact({\n+\t\t\tprerender: { enabled: true }\n\t\t}),\n\t],\n});\n```\n\n----------------------------------------\n\nTITLE: Babel Configuration for Named Imports\nDESCRIPTION: JSON configuration for Babel to handle JSX transformation with named imports.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/tr/guide/v8/getting-started.md#2025-04-09_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{ \"jsxPragma\": \"h\" }\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\n    [\"transform-react-jsx\", { \"pragma\":\"h\" }]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Error Handler Setup Code in Preact\nDESCRIPTION: A setup function that intercepts errors in Preact and provides custom error handling logic. This is used to detect specific error types and provide better error messages during the tutorial.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/tutorial/09-error-handling.md#2025-04-09_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nuseResult(function(result) {\n  var options = require('preact').options;\n\n  var oe = options.__e;\n  options.__e = function(error, s) {\n    if (/objects are not valid/gi.test(error)) {\n      throw Error('It looks like you might be trying to render an Error object directly: try storing `error.message` instead of `error` itself.');\n    }\n    oe.apply(this, arguments);\n    setTimeout(function() {\n      if (result.output.textContent.match(/error/i)) {\n        solutionCtx.setSolved(true);\n      }\n    }, 10);\n  };\n\n  return function () {\n    options.__e = oe;\n  };\n}, []);\n```\n\n----------------------------------------\n\nTITLE: Implementing Client-Side Mounting for Preact Components\nDESCRIPTION: This JavaScript code demonstrates how to set up client-side mounting for Preact components. It includes hydration, lazy loading, and handling of serialized props passed from the server.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/blog/simplifying-islands-arch.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { h, hydrate } from 'preact'\n\n// setup goober\nimport { setup } from 'goober'\nsetup(h)\n\n// can be moved to a util file and used from there,\n// in this file as an example for now.\nconst mount = async (Component, elm) => {\n  if (elm?.dataset?.props) {\n    const props = JSON.parse(elm.dataset.props)\n    delete elm.dataset.props\n    hydrate(<Component {...props} />, elm)\n  }\n}\n\nconst main = async () => {\n  // lazy load and re-mount counter as a client side component if needed\n  // A better way would be to check if the `counter` element exists on\n  // the DOM before even importing the component to avoid un-needed\n  // JS downloads.\n\n  const Counter = (await import('../components/Counter.js')).default\n  mount(Counter, document.getElementById('counter'))\n}\n\nmain()\n```\n\n----------------------------------------\n\nTITLE: Radio Buttons with Correct Custom Path in linkState\nDESCRIPTION: Demonstrates the correct implementation of radio buttons using linkState with a custom path ('target.value') to properly handle the radio button group state.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/es/guide/v8/linked-state.md#2025-04-09_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nclass Foo extends Component {\n  render({ }, { answer }) {\n    return (\n      <div>\n        <input type=\"radio\" name=\"demo\"\n          value=\"yes\" checked={answer == 'yes'}\n          onChange={linkState(this, 'answer', 'target.value')}\n        />\n        <input type=\"radio\" name=\"demo\"\n          value=\"no\" checked={answer == 'no'}\n          onChange={linkState(this, 'answer', 'target.value')}\n        />\n      </div>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Complete External DOM Mutation Example in Preact\nDESCRIPTION: Comprehensive example showing a component that disables re-rendering and manages external DOM mutations through lifecycle methods. Demonstrates proper setup and cleanup of external DOM elements.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v8/external-dom-mutations.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nclass Example extends Component {\n  shouldComponentUpdate() {\n    // do not re-render via diff:\n    return false;\n  }\n\n  componentWillReceiveProps(nextProps) {\n    // you can do something with incoming props here if you need\n  }\n\n  componentDidMount() {\n    // now mounted, can freely modify the DOM:\n    let thing = document.createElement('maybe-a-custom-element');\n    this.base.appendChild(thing);\n  }\n\n  componentWillUnmount() {\n    // component is about to be removed from the DOM, perform any cleanup.\n  }\n\n  render() {\n    return <div class=\"example\" />;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Webpack Client Configuration for Preact Islands\nDESCRIPTION: Webpack configuration for client-side bundling, including entry point generation and manifest plugin for Islands Architecture.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/blog/simplifying-islands-arch.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// webpack.config.client.js\n\nconst entryPoints = glob\n  .sync(path.resolve(__dirname, './src/client') + '/**/*.js', {\n    absolute: true,\n  })\n  .reduce((acc, path) => {\n    const entry = path.match(/[^\\/]+\\.jsx?$/gm)[0].replace(/.jsx?$/, '')\n    acc[entry] = path\n    return acc\n  }, {})\n\n// ... other webpack configuration\n\n{\n  plugins: [\n    new WebpackManifestPlugin({\n      publicPath: '',\n      basePath: '',\n      filter: file => {\n        return /\\.mount\\.js$/.test(file.name)\n      },\n    }),\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Preact Class Creation Export\nDESCRIPTION: Export configuration for create-react-class compatibility\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v8/switching-to-preact.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createClass } from 'preact-compat/dist/preact-compat.min'\nexport default createClass\n```\n\n----------------------------------------\n\nTITLE: Server Routing and Rendering with Express and Preact\nDESCRIPTION: Implements server-side routing and rendering using Express and Preact. It uses a helper function to include bundled scripts in the rendered HTML.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/ru/blog/simplifying-islands-arch.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport preactRenderToString from 'preact-render-to-string'\nimport HomePage from '../pages/HomePage.js'\nimport { h } from 'preact'\nimport { withManifestBundles } from '../lib/html.js'\n\nconst app = express()\n\napp.get('/', async (req, res) => {\n  res.send(\n    withManifestBundles({\n      body: preactRenderToString(h(HomePage, {})),\n    })\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Inserting Blog Overview Component in HTML\nDESCRIPTION: This snippet inserts a custom 'blog-overview' component into the HTML, likely used to dynamically render a list or grid of blog posts.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/blog.md#2025-04-09_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div><blog-overview></blog-overview></div>\n```\n\n----------------------------------------\n\nTITLE: Client-Side Hydration with Preact\nDESCRIPTION: Shows how to perform client-side hydration of a server-rendered Preact component. The hydrate function is used to add interactivity to the existing DOM element.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/ru/blog/simplifying-islands-arch.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// client.js\nimport { hydrate } from 'preact'\nimport Counter from './Counter'\n\nconst main = () => {\n  // предполагаем, что сервер отрендерил компонент со следующим идентификатором:\n  const container = document.getElementById('counter')\n  hydrate(h(Counter, {}), container)\n}\n\nmain()\n```\n\n----------------------------------------\n\nTITLE: Showing Ideal but Non-Working Direct State Access\nDESCRIPTION: This example illustrates the ideal but non-functional direct state access pattern that signals aim to enable. Without signals, this code wouldn't update the UI when the count changes.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/zh/blog/introducing-signals.md#2025-04-09_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n// 假设这是一些全局状态，整个应用都需要访问：\nlet count = 0;\n \nfunction Counter() {\n return (\n   <button onClick={() => count++}>\n     value: {count}\n   </button>\n );\n}\n```\n\n----------------------------------------\n\nTITLE: Using ES7 Class Properties for Manual State Updates in Preact\nDESCRIPTION: This snippet demonstrates using ES7 class properties to create bound component methods for updating state in response to events, which is more efficient than using arrow functions within render methods.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v8/linked-state.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass Foo extends Component {\n\tupdateText = e => {\n\t\tthis.setState({ text: e.target.value });\n\t};\n\trender({ }, { text }) {\n\t\treturn <input value={text} onInput={this.updateText} />;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Preact Application to DOM\nDESCRIPTION: This snippet renders the Example component to the DOM, targeting an element with the ID 'app'. It uses Preact's render function to mount the application.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/src/components/controllers/repl/examples/github-repo-list.txt#2025-04-09_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nrender(<Example />, document.getElementById('app'));\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Event Handlers Equivalent to linkState in Preact\nDESCRIPTION: This snippet illustrates the underlying mechanism of linkState by showing a manually created event handler that updates state from an event object. It demonstrates how linkState works with custom event paths.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v8/linked-state.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// this handler returned from linkState:\nhandler = linkState(this, 'thing', 'foo.bar');\n\n// ...is functionally equivalent to:\nhandler = event => {\n  this.setState({\n    thing: event.foo.bar\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dot Component in Preact\nDESCRIPTION: A performance-optimized Preact component that renders individual dots for the spiral animation. Includes shouldComponentUpdate optimization and handles positioning, scaling, and color styling.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/src/components/controllers/repl/examples/spiral.txt#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclass Dot extends Component {\n\tshouldComponentUpdate({ x, y, big, label, color }) {\n\t\t// only re-render when props change\n\t\treturn (\n\t\t\tx !== this.props.x ||\n\t\t\ty !== this.props.y ||\n\t\t\tbig !== this.props.big ||\n\t\t\tlabel !== this.props.label ||\n\t\t\tcolor !== this.props.color\n\t\t);\n\t}\n\n\trender({ x = 0, y = 0, label, color, big }) {\n\t\tlet style = {\n\t\t\ttransform: `translate(${x}px, ${y}px) scale(${big ? 2 : 1})`,\n\t\t\tborderColor: color\n\t\t};\n\t\tlet className = `dot ${big ? ' big' : ''} ${label ? ' label' : ''}`;\n\t\treturn (\n\t\t\t<div class={className} style={style}>\n\t\t\t\t{label && (\n\t\t\t\t\t<span class=\"label\">\n\t\t\t\t\t\t{x},{y}\n\t\t\t\t\t</span>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t);\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Spiral Component in Preact\nDESCRIPTION: A Preact component that creates an animated spiral of dots that follow the pointer movement. The spiral size pulses using sine wave animation and each dot has a dynamic color based on its position and time.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/src/components/controllers/repl/examples/spiral.txt#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass Spiral extends Component {\n\tstate = { x: 0, y: 0, big: false, count: 0 };\n\n\thandlePointerMove = e => {\n\t\tthis.setState({ x: e.pageX, y: e.pageY });\n\t};\n\n\thandlePointerDownUp = e => {\n\t\tthis.setState({ big: e.type === 'pointerdown' });\n\t};\n\n\tincrement = () => {\n\t\tthis.setState({ count: this.state.count + 1 });\n\t\tthis.raf = requestAnimationFrame(this.increment);\n\t};\n\n\tcomponentDidMount() {\n\t\t// start animating\n\t\tthis.increment();\n\t}\n\n\tcomponentWillUnmount() {\n\t\tcancelAnimationFrame(this.raf);\n\t}\n\n\trender({}, { x, y, big, count }) {\n\t\tlet max = (COUNT + Math.sin((count / 90) * 2 * Math.PI) * COUNT * 0.5) | 0,\n\t\t\tdots = [];\n\n\t\tfor (let i = max; i--; ) {\n\t\t\tlet f = (i / max) * LOOPS,\n\t\t\t\tangle = f * 2 * Math.PI,\n\t\t\t\tdx = x + Math.sin(angle) * (20 + i * 2),\n\t\t\t\tdy = y + Math.cos(angle) * (20 + i * 2),\n\t\t\t\tcolor = `hsl(${(f * 255 + count * 10) % 255}, 100%, 50%)`;\n\t\t\tdots[i] = <Dot x={dx | 0} y={dy | 0} big={big} color={color} />;\n\t\t}\n\n\t\treturn (\n\t\t\t<div\n\t\t\t\tid=\"spiral\"\n\t\t\t\tonPointerMove={this.handlePointerMove}\n\t\t\t\tonPointerDown={this.handlePointerDownUp}\n\t\t\t\tonPointerUp={this.handlePointerDownUp}\n\t\t\t>\n\t\t\t\t<Dot x={x} y={y} big={big} label />\n\t\t\t\t{dots}\n\t\t\t</div>\n\t\t);\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Preact with Default Import\nDESCRIPTION: Demonstrates importing the entire Preact library as a default import and configuring JSX transformation.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/tr/guide/v8/getting-started.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport preact from 'preact';\n\n// Tell Babel to transform JSX into preact.h() calls:\n/** @jsx preact.h */\n```\n\n----------------------------------------\n\nTITLE: Rendering Todo List Component with Preact\nDESCRIPTION: This code snippet demonstrates how to render the TodoList component using Preact's render function. It mounts the component to a DOM element with the id 'app'.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/src/components/controllers/repl/examples/todo-lists/todo-list.txt#2025-04-09_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nrender(<TodoList />, document.getElementById('app'));\n```\n\n----------------------------------------\n\nTITLE: Rendering Components to DOM\nDESCRIPTION: Example of rendering a component to the document body using Preact's render function.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/tutorial/03-components.md#2025-04-09_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { render } from 'preact';\n\nrender(<MyButton text=\"Click me!\" />, document.body)\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Import Map for Preact in HTML\nDESCRIPTION: Demonstrates how to set up a basic Import Map for Preact and HTM in an HTML file. It includes module definitions and a simple Preact component rendered using HTM syntax.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/no-build-workflows.md#2025-04-09_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n  <head>\n    <script type=\"importmap\">\n      {\n        \"imports\": {\n          \"preact\": \"https://esm.sh/preact@10.23.1\",\n          \"htm/preact\": \"https://esm.sh/htm@3.1.1/preact?external=preact\"\n        }\n      }\n    </script>\n  </head>\n  <body>\n    <div id=\"app\"></div>\n\n    <script type=\"module\">\n      import { render } from 'preact';\n      import { html } from 'htm/preact';\n\n      export function App() {\n        return html`<h1>Hello, World!</h1>`;\n      }\n\n      render(html`<${App} />`, document.getElementById('app'));\n    </script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Shallow Rendering in Preact\nDESCRIPTION: Shows how to use the shallow rendering feature to render only the top level of a component tree.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/pt-br/guide/v10/server-side-rendering.md#2025-04-09_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { shallow } from 'preact-render-to-string';\nimport { h } from 'preact';\n\nconst Foo = () => <div>foo</div>;\nconst App = <div class=\"foo\"><Foo /></div>;\n\nconsole.log(shallow(App));\n// <div class=\"foo\"><Foo /></div>\n```\n\n----------------------------------------\n\nTITLE: Using Created Web Component in HTML\nDESCRIPTION: Demonstrates how to use the created web component in HTML. The example shows passing an attribute to the custom element.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/web-components.md#2025-04-09_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<x-greeting name=\"Billy Jo\"></x-greeting>\n```\n\n----------------------------------------\n\nTITLE: Preact Libraries Documentation Structure\nDESCRIPTION: Markdown frontmatter defining the page metadata including name, permalink and description for the Preact libraries documentation.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/about/libraries-addons.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nname: Libraries & Add-ons\npermalink: '/about/addons-libraries'\ndescription: 'Collection of libraries and addons that work well with Preact'\n---\n```\n\n----------------------------------------\n\nTITLE: Preact-specific Component with Destructured Arguments\nDESCRIPTION: A class component that takes advantage of Preact's feature to receive props and state as arguments to the render method, allowing for cleaner destructuring.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/kr/guide/v10/differences-to-react.md#2025-04-09_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n// Preact에서만 작동함\nclass Foo extends Component {\n  state = { age: 1 };\n\n  render({ name }, { age }) {\n    return <div>Name: {name}, Age: {age}</div>;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Donation Appeal Section in HTML\nDESCRIPTION: This HTML snippet creates a section encouraging visitors to support Preact development through donations. It includes a heading, paragraph of text, and a link to the donation page.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/blog.md#2025-04-09_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<div>\n  <hr />\n  <h2>Like what you see?</h2>\n  <p>\n    Preact is free to use so that everyone can take part in building on\n    the web. Thanks to all the awesome sponsors who make working on Preact\n    possible! If you want to become one of them, consider\n    <a href=\"https://opencollective.com/preact\">a donation</a>.\n  </p>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Custom Branding Component Implementation\nDESCRIPTION: Custom component tag that likely renders the branding assets and guidelines on the page.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/branding.md#2025-04-09_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<branding></branding>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Invalid JSX Usage in JavaScript\nDESCRIPTION: This snippet illustrates an incorrect way of using JSX, where a JSX literal is passed as a component, which will trigger a Preact error.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/debugging.md#2025-04-09_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst Foo = <div>foo</div>;\n// Invalid: Foo already contains a JSX-Element\nrender(<Foo />, dom);\n```\n\n----------------------------------------\n\nTITLE: Displaying Preact Slack Community Badge in Markdown\nDESCRIPTION: This snippet shows how to create a badge in Markdown that links to the Preact Slack Community. It uses the img.shields.io service to generate the badge image.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/README.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![Preact Slack Community](https://img.shields.io/badge/slack-Preact%20Slack%20Community-blue?logo=slack)](https://chat.preactjs.com/)\n```\n\n----------------------------------------\n\nTITLE: Creating a MixedComponent Class with Mixin Support in JavaScript\nDESCRIPTION: This snippet shows how to create a MixedComponent class that extends Preact's Component and supports mixins. It demonstrates how to apply mixins in the constructor.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/zh/guide/v8/extending-component.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nclass MixedComponent extends Component {\n    constructor() {\n        super();\n        (this.mixins || []).forEach( m => Object.assign(this, m) );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Component with Bound Methods in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a BoundComponent class that extends Preact's Component. It adds a binds() method to automatically bind methods listed in a 'bind' property.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v8/extending-component.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass BoundComponent extends Component {\n    // example: get bound methods\n    binds() {\n        let list = this.bind || [],\n            binds = this._binds;\n        if (!binds) {\n            binds = this._binds = {};\n            for (let i=list.length; i--; ) {\n                binds[list[i]] = this[list[i]].bind(this);\n            }\n        }\n        return binds;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack alias for Preact\nDESCRIPTION: Webpack configuration to alias React imports to preact-compat.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/fr/guide/v8/switching-to-preact.md#2025-04-09_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"resolve\": {\n    \"alias\": {\n      \"react\": \"preact-compat\",\n      \"react-dom\": \"preact-compat\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Lifecycle Methods in Preact Component\nDESCRIPTION: Shows how to implement various lifecycle methods in a Preact component. Includes all available lifecycle methods with their parameters and when they are triggered.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/fr/guide/v8/api-reference.md#2025-04-09_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { Component } from 'preact';\n\nclass MyComponent extends Component {\n\tshouldComponentUpdate(nextProps, nextState) {}\n\tcomponentWillReceiveProps(nextProps, nextState) {\n\t\tthis.props // props précédentes\n\t\tthis.state // state précédent\n\t}\n\tcomponentWillMount() {}\n\tcomponentWillUpdate(nextProps, nextState) {\n\t\tthis.props // Previous props\n\t\tthis.state // Previous state\n\t}\n\tcomponentDidMount() {}\n\tcomponentDidUpdate() {}\n\tcomponentWillUnmount() {\n\t\tthis.props // props courantes\n\t\tthis.state // state courant\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Using Legacy Context API in Preact\nDESCRIPTION: Example showing the legacy Context API implementation in Preact. It demonstrates using getChildContext in a class component to provide context and accessing it in function components through the context parameter.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/pt-br/guide/v10/context.md#2025-04-09_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nfunction ThemedButton(props, context) {\n  return (\n    <button {...props} class={'btn ' + context.theme}>\n     Botão temático\n    </button>;\n  );\n}\n\nclass App extends Component {\n  getChildContext() {\n    return {\n      theme: 'light'\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <SomeOtherComponent>\n          <ThemedButton />\n        </SomeOtherComponent>\n      </div>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JSX to JavaScript Compilation in Preact and React\nDESCRIPTION: Shows how JSX is compiled to JavaScript function calls in both Preact and React. Preact uses a shorter 'h' function name by default.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/zh/guide/v10/differences-to-react.md#2025-04-09_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<a href=\"/\">\n  <span>Home</span>\n</a>\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Preact:\nh(\n  'a',\n  { href:'/' },\n  h('span', null, 'Home')\n);\n\n// React:\nReact.createElement(\n  'a',\n  { href:'/' },\n  React.createElement('span', null, 'Home')\n);\n```\n\n----------------------------------------\n\nTITLE: Loading Preact via CDN (HTML)\nDESCRIPTION: Demonstrates how to include Preact in a project using a CDN link, both as a regular script and as a JavaScript module.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v8/getting-started.md#2025-04-09_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://cdn.jsdelivr.net/npm/preact/dist/preact.min.js\"></script>\n\n<!-- To load Preact as a JS Module: -->\n<script src=\"https://cdn.jsdelivr.net/npm/preact/dist/preact.mjs\" type=\"module\"></script>\n```\n\n----------------------------------------\n\nTITLE: Limited Input Component Hooks Implementation\nDESCRIPTION: Hooks-based implementation of a controlled input component that limits input to 3 characters, using refs to handle edge cases and maintain selection state.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/forms.md#2025-04-09_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nconst LimitedInput = () => {\n  const [value, setValue] = useState('');\n  const inputRef = useRef();\n\n  const onInput = (e) => {\n    if (e.currentTarget.value.length <= 3) {\n      setValue(e.currentTarget.value);\n    } else {\n      const start = inputRef.current.selectionStart;\n      const end = inputRef.current.selectionEnd;\n      const diffLength = Math.abs(e.currentTarget.value.length - value.length);\n      inputRef.current.value = value;\n      // Restore selection\n      inputRef.current.setSelectionRange(start - diffLength, end - diffLength);\n    }\n  }\n\n  return (\n    <div class=\"form-example\">\n      <label>\n        This input is limited to 3 characters:{' '}\n        <input ref={inputRef} value={value} onInput={onInput} />\n      </label>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Hello World in Preact with and without JSX\nDESCRIPTION: Demonstrates the difference between writing Preact code with JSX syntax and using the h() function directly without JSX.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/tutorial.md#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// With JSX\nconst App = <h1>Hello World!</h1>;\n\n// ...the same without JSX\nconst App = h('h1', null, 'Hello World');\n```\n\n----------------------------------------\n\nTITLE: Implementing Preact Component Lifecycle Methods in JavaScript\nDESCRIPTION: Shows the implementation of all available lifecycle methods in a Preact component. Each method is defined with its expected parameters, demonstrating when they are called during the component's lifecycle.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/de/guide/v8/api-reference.md#2025-04-09_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { Component } from 'preact';\n\nclass MeineKomponente extends Component {\n\tshouldComponentUpdate(nextProps, nextState) {}\n\tcomponentWillReceiveProps(nextProps, nextState) {\n\t\tthis.props // Previous props\n\t\tthis.state // Previous state\n\t}\n\tcomponentWillMount() {}\n\tcomponentWillUpdate(nextProps, nextState) {\n\t\tthis.props // Previous props\n\t\tthis.state // Previous state\n\t}\n\tcomponentDidMount() {}\n\tcomponentDidUpdate() {}\n\tcomponentWillUnmount() {\n\t\tthis.props // Current props\n\t\tthis.state // Current state\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Pretty Printing Mode for SSR\nDESCRIPTION: Shows how to enable pretty printing mode for human-readable output with proper indentation.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/server-side-rendering.md#2025-04-09_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport render from 'preact-render-to-string/jsx';\nimport { h } from 'preact';\n\nconst Foo = () => <div>foo</div>;\nconst App = <div class=\"foo\"><Foo /></div>;\n\nconsole.log(render(App, {}, { pretty: true }));\n// Logs:\n// <div class=\"foo\">\n//   <div>foo</div>\n// </div>\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Preact Component\nDESCRIPTION: This snippet demonstrates how to create a basic Preact component using a function that returns JSX. It shows the structure of a component and how to render it.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/tutorial.md#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nfunction MyComponent() {\n  return <div>Hello, World!</div>;\n}\n\nrender(<MyComponent />, document.body);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Preact Component in JSX\nDESCRIPTION: Demonstrates how to create a simple Preact component by extending the Component class and implementing the render method. The component accepts props and returns JSX.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/de/guide/v8/api-reference.md#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Component } from 'preact';\n\nclass MeineKomponente extends Component {\n\trender(props, state) {\n\t\t// props === this.props\n\t\t// state === this.state\n\n\t\treturn <h1>Hello, {props.name}!</h1>;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Async Component Definition for Lazy Loading\nDESCRIPTION: Example of a lazily loaded home page component.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/server-side-rendering.md#2025-04-09_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// page/home.js\nexport default () => {\n    return <h1>Home page</h1>;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Preact Component Lifecycle Methods in JavaScript\nDESCRIPTION: Illustrates the implementation of all available lifecycle methods in a Preact component. Each method is shown with its parameters and when it is called in the component's lifecycle.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/tr/guide/v8/api-reference.md#2025-04-09_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { Component } from 'preact';\n\nclass MyComponent extends Component {\n\tshouldComponentUpdate(nextProps, nextState) {}\n\tcomponentWillReceiveProps(nextProps, nextState) {\n\t\tthis.props // Previous props\n\t\tthis.state // Previous state\n\t}\n\tcomponentWillMount() {}\n\tcomponentWillUpdate(nextProps, nextState) {\n\t\tthis.props // Previous props\n\t\tthis.state // Previous state\n\t}\n\tcomponentDidMount() {}\n\tcomponentDidUpdate() {}\n\tcomponentWillUnmount() {\n\t\tthis.props // Current props\n\t\tthis.state // Current state\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Component Lifecycle in a Clock (JavaScript)\nDESCRIPTION: Shows how to use component lifecycle methods to create a ticking clock that updates every second and cleans up when unmounted.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v8/getting-started.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { h, render, Component } from 'preact';\n\nclass Clock extends Component {\n\tconstructor() {\n\t\tsuper();\n\t\t// set initial time:\n\t\tthis.state = { time: Date.now() };\n\t}\n\n\tcomponentDidMount() {\n\t\t// update time every second\n\t\tthis.timer = setInterval(() => {\n\t\t\tthis.setState({ time: Date.now() });\n\t\t}, 1000);\n\t}\n\n\tcomponentWillUnmount() {\n\t\t// stop when not renderable\n\t\tclearInterval(this.timer);\n\t}\n\n\trender(props, state) {\n\t\tlet time = new Date(state.time).toLocaleTimeString();\n\t\treturn <span>{ time }</span>;\n\t}\n}\n\n// render an instance of Clock into <body>:\nrender(<Clock />, document.body);\n```\n\n----------------------------------------\n\nTITLE: Preact Hot Module Replacement Integration\nDESCRIPTION: Shows how to implement hot module replacement with Preact's render() function. Maintains a reference to the root DOM element for efficient updates during development.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v8/switching-to-preact.md#2025-04-09_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// root holds our app's root DOM Element:\nlet root;\n\nfunction init() {\n  root = render(<App />, document.body, root);\n}\ninit();\n\n// example: Re-render on Webpack HMR update:\nif (module.hot) module.hot.accept('./app', init);\n```\n\n----------------------------------------\n\nTITLE: Creating and Using References with createRef in Preact\nDESCRIPTION: This snippet demonstrates how to create and use a reference to a DOM element using the createRef function in a Preact component. It logs the referenced DOM element to the console when the component mounts.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/pt-br/guide/v10/refs.md#2025-04-09_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nclass Foo extends Component {\n  ref = createRef();\n\n  componentDidMount() {\n    console.log(this.ref.current);\n    // Logs: [HTMLDivElement]\n  }\n\n  render() {\n    return <div ref={this.ref}>foo</div>\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing useImperativeHandle Hook in Preact\nDESCRIPTION: Demonstrates how to use useImperativeHandle to mutate a ref passed to a child component, exposing a custom focus method while hiding direct DOM access.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/hooks.md#2025-04-09_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { render } from \"preact\";\nimport { useRef, useImperativeHandle, useState } from \"preact/hooks\";\n\nfunction MyInput({ inputRef }) {\n  const ref = useRef(null);\n  useImperativeHandle(inputRef, () => {\n    return {\n      // Only expose `.focus()`, don't give direct access to the DOM node\n      focus() {\n        ref.current.focus();\n      },\n    };\n  }, []);\n\n  return (\n    <label>\n      Name: <input ref={ref} />\n    </label>\n  );\n}\n\nfunction App() {\n  const inputRef = useRef(null);\n\n  const handleClick = () => {\n    inputRef.current.focus();\n  };\n\n  return (\n    <div>\n      <MyInput inputRef={inputRef} />\n      <button onClick={handleClick}>Click To Edit</button>\n    </div>\n  );\n}\n\nrender(<App />, document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Data Fetching with Class Component Lifecycle Methods\nDESCRIPTION: Example of implementing side effects in a class component using the componentDidMount lifecycle method to fetch user data from an API. The component shows a loading state until data is retrieved.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/tutorial/07-side-effects.md#2025-04-09_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Component } from 'preact';\n\nexport default class App extends Component {\n  // this gets called after the component is first rendered:\n  componentDidMount() {\n    // get JSON user info, store in `state.user`:\n    fetch('/api/user')\n      .then(response => response.json())\n      .then(user => {\n        this.setState({ user })\n      })\n  }\n\n  render(props, state) {\n    const { user } = state;\n\n    // if we haven't received data yet, show a loading indicator:\n    if (!user) return <div>Loading...</div>\n\n    // we have data! show the username we got back from the API:\n    return (\n      <div>\n        <h2>Hello, {user.username}!</h2>\n      </div>\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Preact Components (JavaScript)\nDESCRIPTION: Demonstrates how to import named exports from the Preact library and set up JSX transformation.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v8/getting-started.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { h, render, Component } from 'preact';\n\n// Tell Babel to transform JSX into h() calls:\n/** @jsx h */\n```\n\n----------------------------------------\n\nTITLE: Prerendering Example with Suspense and Data Fetching\nDESCRIPTION: Complete example demonstrating prerendering with Suspense-based data fetching to handle dynamic content during server-side rendering.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/blog/prerendering-preset-vite.md#2025-04-09_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n// src/index.jsx\nimport { hydrate, prerender as ssr } from 'preact-iso';\nimport { useFetch } from './use-fetch.js';\n\nfunction App() {\n    return (\n        <div>\n            <Suspense fallback={<p>Loading...</p>}>\n                <Article />\n            </Suspense>\n        </div>\n    );\n}\n\nfunction Article() {\n\tconst data = useFetch(\"/my-local-article.txt\");\n\treturn <p>{data}</p>;\n}\n\nif (typeof window !== 'undefined') {\n\thydrate(<App />, document.getElementById('app'));\n}\n\nexport async function prerender(data) {\n    return await ssr(<App {...data} />)\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Todo List State with Preact Signals\nDESCRIPTION: Sets up the initial state for the todo list using signals, including the todos array and a computed value for completed items count.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/src/components/controllers/repl/examples/todo-lists/todo-list-signals.txt#2025-04-09_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst todos = signal([\n\t{ text: 'Write my first post', completed: true },\n\t{ text: 'Buy new groceries', completed: false },\n\t{ text: 'Walk the dog', completed: false }\n]);\n\nconst completedCount = computed(\n\t() => todos.value.filter(todo => todo.completed).length\n);\n\nconst newItem = signal('');\n```\n\n----------------------------------------\n\nTITLE: Using untracked Function to Prevent Signal Subscription in Preact\nDESCRIPTION: Example of using the untracked function to prevent signal subscriptions when accessing multiple signals. This provides an alternative approach to peek() when you need to work with multiple signals without creating subscriptions.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/pt-br/guide/v10/signals.md#2025-04-09_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nconst delta = signal(0);\nconst count = signal(0);\n\neffect(() => {\n  // Atualize `count` sem se inscrever em `count` ou `delta`:\n  count.value = untracked(() => {\n    return count.value + delta.value;\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Preact class alias\nDESCRIPTION: JavaScript code to create an alias for React's createClass using Preact.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/fr/guide/v8/switching-to-preact.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createClass } from 'preact-compat/dist/preact-compat.min'\nexport default createClass\n```\n\n----------------------------------------\n\nTITLE: Using useState in Preact with Callback Functions\nDESCRIPTION: This example demonstrates the useState hook with both direct value setting and callback-based updates. It shows how to implement a counter with increment and decrement functionality, highlighting the different ways to update state.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/hooks.md#2025-04-09_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'preact/hooks';\n\nconst Counter = () => {\n  const [count, setCount] = useState(0);\n  const increment = () => setCount(count + 1);\n  // You can also pass a callback to the setter\n  const decrement = () => setCount((currentCount) => currentCount - 1);\n\n  return (\n    <div>\n      <p>Count: {count}</p>\n      <button onClick={increment}>Increment</button>\n      <button onClick={decrement}>Decrement</button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Lazy Loading Setup with Suspense\nDESCRIPTION: Configuration of lazy loading and Suspense for code splitting.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/server-side-rendering.md#2025-04-09_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n// main.js\nimport { Suspense, lazy } from 'preact/compat';\n\n// Creation of the lazy component\nconst HomePage = lazy(() => import('./pages/home'));\n\nconst Main = () => {\n    return (\n        <Suspense fallback={<p>Loading</p>}>\n            <HomePage />\n        </Suspense>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Counter Component in Preact\nDESCRIPTION: This snippet defines a Counter component using Preact. It maintains a count state and provides buttons to increment and decrement the count. The component is then rendered to the DOM.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/src/components/controllers/repl/examples/counters/counter.txt#2025-04-09_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Component, render } from 'preact';\n\nclass Counter extends Component {\n\tstate = { count: 0 };\n\n\trender({}, { count }) {\n\t\treturn (\n\t\t\t<div class=\"counter-container\">\n\t\t\t\t<button onClick={() => this.setState({ count: count + 1 })}>\n\t\t\t\t\tIncrement\n\t\t\t\t</button>\n\t\t\t\t<input readonly value={count} />\n\t\t\t\t<button onClick={() => this.setState({ count: count - 1 })}>\n\t\t\t\t\tDecrement\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nrender(<Counter />, document.getElementById('app'));\n```\n\n----------------------------------------\n\nTITLE: Consuming Context with useContext Hook in Preact\nDESCRIPTION: This snippet demonstrates how to access context values using the useContext hook in function components. The hook provides a cleaner syntax compared to the Consumer component approach.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/en/guide/v10/context.md#2025-04-09_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n// --repl\nimport { render, createContext } from \"preact\";\nimport { useContext } from \"preact/hooks\";\n\nconst SomeComponent = props => props.children;\n// --repl-before\nconst ThemePrimary = createContext(\"#673ab8\");\n\nfunction ThemedButton() {\n  const theme = useContext(ThemePrimary);\n  return <button style={{ background: theme }}>Themed Button</button>;\n}\n\nfunction App() {\n  return (\n    <ThemePrimary.Provider value=\"#8f61e1\">\n      <SomeComponent>\n        <ThemedButton />\n      </SomeComponent>\n    </ThemePrimary.Provider>\n  );\n}\n// --repl-after\nrender(<App />, document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Creating Virtual DOM Elements with Preact's h Function in JavaScript\nDESCRIPTION: Illustrates the usage of Preact's h (createElement) function to create virtual DOM elements. It shows examples of creating elements with various attributes and child elements.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/content/de/guide/v8/api-reference.md#2025-04-09_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport { h } from 'preact';\n\nh('div', { id: 'foo' }, 'Hallo!');\n// <div id=\"foo\">Hallo!</div>\n\nh('div', { id: 'foo' }, 'Hallo', null, ['Preact!']);\n// <div id=\"foo\">Hallo Preact!</div>\n\nh(\n\t'div',\n\t{ id: 'foo' },\n\th('span', null, 'Hallo!')\n);\n// <div id=\"foo\"><span>Hallo!</span></div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Robot Access in robots.txt\nDESCRIPTION: A basic robots.txt configuration that allows all search engine crawlers and bots to access the entire website. The configuration has no disallowed paths, effectively granting permission for complete site indexing.\nSOURCE: https://github.com/preactjs/preact-www/blob/master/src/assets/robots.txt#2025-04-09_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\nUser-agent: *\nDisallow:\n```"
  }
]