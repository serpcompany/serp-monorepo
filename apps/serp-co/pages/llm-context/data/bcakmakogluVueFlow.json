[
  {
    "owner": "bcakmakoglu",
    "repo": "vue-flow",
    "content": "TITLE: Implementing Custom Nodes in Vue Flow with TypeScript\nDESCRIPTION: Shows how to create and use custom node types in Vue Flow using TypeScript. It includes type definitions for custom data, events, and node types.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/node.md#2025-04-21_snippet_16\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { ref } from 'vue'\nimport type { Node } from '@vue-flow/core'\nimport { VueFlow } from '@vue-flow/core'\n\nimport CustomNode from './CustomNode.vue'\nimport SpecialNode from './SpecialNode.vue'\n\n// You can pass 3 optional generic arguments to the Node interface, allowing you to define:\n// 1. The data object type\n// 2. The events object type\n// 3. The possible node types\n\nexport interface CustomData {\n  hello: string\n}\n\nexport interface CustomEvents {\n  onCustomEvent: (event: MouseEvent) => void\n}\n\ntype CustomNodeTypes = 'custom' | 'special'\n\ntype CustomNode = Node<CustomData, CustomEvents, CustomNodeTypes>\n\nexport const nodes = ref<CustomNode[]>([\n  {\n    id: '1',\n    data: { label: 'Node 1' },\n    // this will create the node-type `custom`\n    type: 'custom',\n    position: { x: 50, y: 50 },\n  },\n  {\n    id: '2',\n    data: { label: 'Node 2' },\n    // this will create the node-type `special`\n    type: 'special',\n    position: { x: 150, y: 50 },\n  },\n    \n  {\n    id: '3', \n    data: { label: 'Node 3' },\n    // this will throw a type error, as the type is not defined in the CustomEdgeTypes\n    // regardless it would be rendered as a default edge type\n    type: 'invalid',\n    position: { x: 150, y: 50 },\n  }\n])\n</script>\n\n<template>\n  <VueFlow :nodes=\"nodes\">\n    <template #node-custom=\"customNodeProps\">\n      <CustomNode v-bind=\"customNodeProps\" />\n    </template>\n    \n    <template #node-special=\"specialNodeProps\">\n      <SpecialNode v-bind=\"specialNodeProps\" />\n    </template>\n  </VueFlow>\n</template>\n```\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport type { NodeProps } from '@vue-flow/core'  \nimport { Position } from '@vue-flow/core'\n\nimport { CustomData, CustomEvents } from './nodes'\n\n// props were passed from the slot using `v-bind=\"customNodeProps\"`\nconst props = defineProps<NodeProps<CustomData, CustomEvents>>()\n  \nconsole.log(props.data.hello) // 'world'\n</script>\n\n<template>\n  <div>\n    <Handle type=\"target\" :position=\"Position.Top\" />\n    <div>{{ label }}</div>\n    <Handle type=\"source\" :position=\"Position.Bottom\" />\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Nodes in Vue Flow (JavaScript)\nDESCRIPTION: Demonstrates how to create and use custom node types in Vue Flow using JavaScript. It shows the main component setup and a custom node component implementation.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/node.md#2025-04-21_snippet_15\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { ref } from 'vue'\nimport { VueFlow } from '@vue-flow/core'\n\nimport CustomNode from './CustomNode.vue'\nimport SpecialNode from './SpecialNode.vue'\n\nexport const nodes = ref([\n  {\n    id: '1',\n    data: { label: 'Node 1' },\n    // this will create the node-type `custom`\n    type: 'custom',\n    position: { x: 50, y: 50 },\n  },\n  {\n    id: '1',\n    data: { label: 'Node 1' },\n    // this will create the node-type `special`\n    type: 'special',\n    position: { x: 150, y: 50 },\n  }\n])\n</script>\n\n<template>\n  <VueFlow :nodes=\"nodes\">\n    <template #node-custom=\"customNodeProps\">\n      <CustomNode v-bind=\"customNodeProps\" />\n    </template>\n    \n    <template #node-special=\"specialNodeProps\">\n      <SpecialNode v-bind=\"specialNodeProps\" />\n    </template>\n  </VueFlow>\n</template>\n```\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { Position, Handle } from '@vue-flow/core'\n\n// props were passed from the slot using `v-bind=\"customNodeProps\"`\nconst props = defineProps(['label'])\n</script>\n\n<template>\n  <div>\n    <Handle type=\"target\" :position=\"Position.Top\" />\n    <div>{{ label }}</div>\n    <Handle type=\"source\" :position=\"Position.Bottom\" />\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using useVueFlow Composable with Vue Flow\nDESCRIPTION: Example demonstrating the useVueFlow composable to interact with the graph including methods like finding nodes, fitting view, and snapping to grid. The composable provides access to the internal state and allows event handling via onInit.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/composables.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { ref } from 'vue'\nimport { useVueFlow, VueFlow } from '@vue-flow/core'\n\nconst { onInit, findNode, fitView, snapToGrid } = useVueFlow()\n\nconst nodes = ref([/* ... */])\n\nconst edges = ref([/* ... */])\n\n// to enable snapping to grid\nsnapToGrid.value = true\n\n// any event that is emitted from the `<VueFlow />` component can be listened to using the `onEventName` method\nonInit((instance) => {\n  // `instance` is the same type as the return of `useVueFlow` (VueFlowStore)\n  \n  fitView()\n  \n  const node = findNode('1')\n  \n  if (node) {\n    node.position = { x: 100, y: 100 }\n  }\n})\n</script>\n\n<template>\n  <VueFlow :nodes=\"nodes\" :edges=\"edges\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Basic Vue Flow Implementation with JavaScript\nDESCRIPTION: A complete example showing how to set up Vue Flow with nodes and edges in JavaScript. Demonstrates default and custom node types, animated edges, and how to bind custom components using slots.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/getting-started.md#2025-04-21_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { ref } from 'vue'\nimport { VueFlow } from '@vue-flow/core'\n\n// these components are only shown as examples of how to use a custom node or edge\n// you can find many examples of how to create these custom components in the examples page of the docs\nimport SpecialNode from './components/SpecialNode.vue'\nimport SpecialEdge from './components/SpecialEdge.vue'\n\n// these are our nodes\nconst nodes = ref([\n  // an input node, specified by using `type: 'input'`\n  { \n    id: '1',\n    type: 'input', \n    position: { x: 250, y: 5 },\n    // all nodes can have a data object containing any data you want to pass to the node\n    // a label can property can be used for default nodes\n    data: { label: 'Node 1' },\n  },\n\n  // default node, you can omit `type: 'default'` as it's the fallback type\n  { \n    id: '2', \n    position: { x: 100, y: 100 },\n    data: { label: 'Node 2' },\n  },\n\n  // An output node, specified by using `type: 'output'`\n  { \n    id: '3', \n    type: 'output', \n    position: { x: 400, y: 200 },\n    data: { label: 'Node 3' },\n  },\n\n  // this is a custom node\n  // we set it by using a custom type name we choose, in this example `special`\n  // the name can be freely chosen, there are no restrictions as long as it's a string\n  {\n    id: '4',\n    type: 'special', // <-- this is the custom node type name\n    position: { x: 400, y: 200 },\n    data: {\n      label: 'Node 4',\n      hello: 'world',\n    },\n  },\n])\n\n// these are our edges\nconst edges = ref([\n  // default bezier edge\n  // consists of an edge id, source node id and target node id\n  { \n    id: 'e1->2',\n    source: '1', \n    target: '2',\n  },\n\n  // set `animated: true` to create an animated edge path\n  { \n    id: 'e2->3',\n    source: '2', \n    target: '3', \n    animated: true,\n  },\n\n  // a custom edge, specified by using a custom type name\n  // we choose `type: 'special'` for this example\n  {\n    id: 'e3->4',\n    type: 'special',\n    source: '3',\n    target: '4',\n\n    // all edges can have a data object containing any data you want to pass to the edge\n    data: {\n      hello: 'world',\n    }\n  },\n])\n</script>\n\n<template>\n  <VueFlow :nodes=\"nodes\" :edges=\"edges\">\n    <!-- bind your custom node type to a component by using slots, slot names are always `node-<type>` -->\n    <template #node-special=\"specialNodeProps\">\n      <SpecialNode v-bind=\"specialNodeProps\" />\n    </template>\n\n    <!-- bind your custom edge type to a component by using slots, slot names are always `edge-<type>` -->\n    <template #edge-special=\"specialEdgeProps\">\n      <SpecialEdge v-bind=\"specialEdgeProps\" />\n    </template>\n  </VueFlow>\n</template>\n\n<style>\n/* import the necessary styles for Vue Flow to work */\n@import '@vue-flow/core/dist/style.css';\n\n/* import the default theme, this is optional but generally recommended */\n@import '@vue-flow/core/dist/theme-default.css';\n</style>\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Node Components with Vue Render Functions\nDESCRIPTION: Examples of creating custom node components using Vue's render function (h). These components demonstrate scrollable node content and input field node implementations.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/node.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst ScrollableNode = () => h('div', { class: 'custom-node-container' }, [\n  h('ul', { class: 'nowheel' }, Array.from({ length: 100 }, (_, i) => h('li', { key: i }, `Item ${i}`)))\n]);\n\nconst InputFieldNode = () => h('div', { class: 'custom-node-container' }, [\n  h('input', { class: 'nodrag placeholder-white', placeholder: 'Type something...' })\n]);\n```\n\n----------------------------------------\n\nTITLE: Accessing Vue Flow State with useVueFlow\nDESCRIPTION: This snippet demonstrates how to use the useVueFlow composable to access Vue Flow's internal state, watch for changes, and respond to events.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/vue-flow/state.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { useVueFlow } from '@vue-flow/core'\n\nconst { getNodes, onPaneReady } = useVueFlow()\n\n// event handler\nonPaneReady((i) => i.fitView())\n\n// watch the stored nodes\nwatch(getNodes, (nodes) => console.log('nodes changed', nodes))\n</script>\n```\n\n----------------------------------------\n\nTITLE: Handling Events with VueFlow Component\nDESCRIPTION: Demonstrates how to listen to node and edge click events using the VueFlow component's @ directive. Shows setup of event handlers and component template with event bindings.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/vue-flow/events.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { ref } from 'vue';  \nimport { VueFlow } from '@vue-flow/core';\n\nconst nodes = ref([/* ... */]);\nconst edges = ref([/* ... */]);\n\n// Node click event handler\nfunction onNodeClick({ event, node }) {\n  console.log('Node clicked:', node, event);\n}\n\n// Edge click event handler\nfunction onEdgeClick({ event, edge }) {\n  console.log('Edge clicked:', edge, event);\n}\n</script>\n\n<template>\n  <VueFlow :nodes=\"nodges\" :edges=\"edges\" @node-click=\"onNodeClick\" @edge-click=\"onEdgeClick\"></VueFlow>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Edge Types in Vue Flow (JavaScript)\nDESCRIPTION: Demonstrates how to create custom edge types using Vue Flow with JavaScript. Shows implementation of multiple edge types and their corresponding components using template slots.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/edge.md#2025-04-21_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { ref } from 'vue'\nimport { VueFlow } from '@vue-flow/core'\n\nimport CustomEdge from './CustomEdge.vue'\nimport SpecialEdge from './SpecialEdge.vue'\n\nexport const edges = ref([\n  {\n    id: 'e1->2',\n    source: '1',\n    target: '2',\n    type: 'custom',\n  },\n  {\n    id: 'e1->3',\n    source: '1',\n    target: '3',\n    type: 'special',\n  }\n])\n  \nconst nodes = ref([\n  {\n    id: '1',\n    position: { x: 50, y: 50 },\n    data: { label: 'Node 1', },\n  },\n  {\n    id: '2',\n    position: { x: 50, y: 250 },\n    data: { label: 'Node 2', },\n  },\n  {\n    id: '3',\n    position: { x: 250, y: 50 },\n    data: { label: 'Node 3', },\n  },\n  {\n    id: '4',\n    position: { x: 250, y: 250 },\n    data: { label: 'Node 4', },\n  },\n])\n</script>\n\n<template>\n  <VueFlow :nodes=\"nodes\" :edges=\"edges\">\n    <template #edge-custom=\"customEdgeProps\">\n      <CustomEdge v-bind=\"customEdgeProps\" />\n    </template>\n    \n    <template #edge-special=\"specialEdgeProps\">\n      <SpecialEdge v-bind=\"specialEdgeProps\" />\n    </template>\n  </VueFlow>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Validating and Applying Node Changes in Vue Flow\nDESCRIPTION: This comprehensive example shows how to disable automatic change handling, listen to node changes, validate delete changes with a confirmation, and apply changes manually using Vue Flow's API. It demonstrates a complete flow of controlling changes in Vue Flow.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/controlled-flow.md#2025-04-21_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { ref } from 'vue'\nimport { useVueFlow, VueFlow } from '@vue-flow/core'\n\nconst { applyNodeChanges } = useVueFlow();\n\nconst { confirm } = useConfirm();\n\nconst nodes = ref([\n  {\n    id: '1',\n    position: { x: 0, y: 0 },\n    data: { label: 'Node 1' },\n  },\n  {\n    id: '2',\n    position: { x: 100, y: 100 },\n    data: { label: 'Node 2' },\n  },\n])\n\nconst edges = ref([\n  {\n    id: 'e1->2',\n    source: '1',\n    target: '2',\n  },\n])\n\nconst onNodesChange = async (changes) => {\n  const nextChanges = []\n\n  for (const change of changes) {\n    if (change.type === 'remove') {\n      const isConfirmed = await confirm('Are you sure you want to delete this node?')\n\n      if (isConfirmed) {\n        nextChanges.push(change)\n      }\n    } else {\n      nextChanges.push(change)\n    }\n  }\n\n  applyNodeChanges(nextChanges)\n}\n</script>\n\n<template>\n  <VueFlow :nodes=\"nodes\" :edges=\"edges\" :apply-default=\"false\" @nodes-change=\"onNodesChange\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using useVueFlow Composable to Add Nodes in TypeScript\nDESCRIPTION: TypeScript implementation of adding nodes with useVueFlow composable, providing type safety with Node interface and structured node generation.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/node.md#2025-04-21_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { ref } from 'vue'  \nimport type { Node } from '@vue-flow/core'  \nimport { Panel, VueFlow, useVueFlow } from '@vue-flow/core'\n\nconst initialNodes = ref<Node[]>([\n  {\n    id: '1',\n    position: { x: 50, y: 50 },\n    data: { label: 'Node 1' },\n  }\n])\nconst { addNodes } = useVueFlow()\n\nfunction generateRandomNode() {\n  return {\n    id: Math.random().toString(),\n    position: { x: Math.random() * 500, y: Math.random() * 500 },\n    label: 'Random Node',\n    data: { \n      hello: 'world',\n    }\n  }\n}\n\nfunction onAddNode() {\n  // add a single node to the graph\n  addNodes(generateRandomNode())\n}\n\nfunction onAddNodes() {\n  // add multiple nodes to the graph\n  addNodes(Array.from({ length: 10 }, generateRandomNode))\n}\n</script>\n\n<template>\n  <VueFlow :nodes=\"initialNodes\">\n    <Panel>\n      <button type=\"button\" @click=\"onAddNode\">Add a node</button>\n      <button type=\"button\" @click=\"onAddNodes\">Add multiple nodes</button>\n    </Panel>\n  </VueFlow>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Basic Vue Flow Implementation with TypeScript\nDESCRIPTION: A complete TypeScript implementation of Vue Flow, showing proper type definitions for nodes and edges. Provides the same functionality as the JavaScript version but with type safety.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/getting-started.md#2025-04-21_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { ref } from 'vue'\nimport type { Node, Edge } from '@vue-flow/core'  \nimport { VueFlow } from '@vue-flow/core'\n\n// these components are only shown as examples of how to use a custom node or edge\n// you can find many examples of how to create these custom components in the examples page of the docs\nimport SpecialNode from './components/SpecialNode.vue'\nimport SpecialEdge from './components/SpecialEdge.vue'\n\n// these are our nodes\nconst nodes = ref<Node[]>([\n  // an input node, specified by using `type: 'input'`\n  {\n    id: '1',\n    type: 'input',\n    position: { x: 250, y: 5 },\n    // all nodes can have a data object containing any data you want to pass to the node\n    // a label can property can be used for default nodes\n    data: { label: 'Node 1' },\n  },\n\n  // default node, you can omit `type: 'default'` as it's the fallback type\n  {\n    id: '2',\n    position: { x: 100, y: 100 },\n    data: { label: 'Node 2' },\n  },\n\n  // An output node, specified by using `type: 'output'`\n  {\n    id: '3',\n    type: 'output',\n    position: { x: 400, y: 200 },\n    data: { label: 'Node 3' },\n  },\n\n  // this is a custom node\n  // we set it by using a custom type name we choose, in this example `special`\n  // the name can be freely chosen, there are no restrictions as long as it's a string\n  {\n    id: '4',\n    type: 'special', // <-- this is the custom node type name\n    position: { x: 400, y: 200 },\n    data: {\n      label: 'Node 4',\n      hello: 'world',\n    },\n  },\n])\n\n// these are our edges\nconst edges = ref<Edge[]>([\n  // default bezier edge\n  // consists of an edge id, source node id and target node id\n  {\n    id: 'e1->2',\n    source: '1',\n    target: '2',\n  },\n\n  // set `animated: true` to create an animated edge path\n  {\n    id: 'e2->3',\n    source: '2',\n    target: '3',\n    animated: true,\n  },\n\n  // a custom edge, specified by using a custom type name\n  // we choose `type: 'special'` for this example\n  {\n    id: 'e3->4',\n    type: 'special',\n    source: '3',\n    target: '4',\n\n    // all edges can have a data object containing any data you want to pass to the edge\n    data: {\n      hello: 'world',\n    }\n  },\n])\n</script>\n\n<template>\n  <VueFlow :nodes=\"nodes\" :edges=\"edges\">\n    <!-- bind your custom node type to a component by using slots, slot names are always `node-<type>` -->\n    <template #node-special=\"specialNodeProps\">\n      <SpecialNode v-bind=\"specialNodeProps\" />\n    </template>\n\n    <!-- bind your custom edge type to a component by using slots, slot names are always `edge-<type>` -->\n    <template #edge-special=\"specialEdgeProps\">\n      <SpecialEdge v-bind=\"specialEdgeProps\" />\n    </template>\n  </VueFlow>\n</template>\n\n<style>\n/* import the necessary styles for Vue Flow to work */\n@import '@vue-flow/core/dist/style.css';\n\n/* import the default theme, this is optional but generally recommended */\n@import '@vue-flow/core/dist/theme-default.css';\n</style>\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Vue Flow Implementation\nDESCRIPTION: A complete Vue component demonstrating how to create a flowchart with nodes and edges using Vue Flow. Includes setup of nodes with positions and edges with source and target connections.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/README.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<!-- Flowchart.vue -->\n<script setup>\nimport { ref } from 'vue'  \nimport { VueFlow } from '@vue-flow/core'\n\nconst nodes = ref([\n  { id: '1', type: 'input', label: 'Node 1', position: { x: 250, y: 5 } },\n  { id: '2', label: 'Node 2', position: { x: 100, y: 100 } },\n  { id: '3', label: 'Node 3', position: { x: 400, y: 100 } },\n  { id: '4', label: 'Node 4', position: { x: 400, y: 200 } },\n])\n  \nconst edges = ref([\n  { id: 'e1-2', source: '1', target: '2', animated: true },\n  { id: 'e1-3', source: '1', target: '3' },\n])\n</script>\n\n<template>\n  <VueFlow v-model:nodes=\"nodes\" v-model:edges=\"edges\"></VueFlow>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using useVueFlow Composable to Add Nodes in JavaScript\nDESCRIPTION: Shows how to add nodes using the useVueFlow composable in JavaScript, which provides direct access to the addNodes action for adding single or multiple nodes.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/node.md#2025-04-21_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { ref } from 'vue'\nimport { Panel, VueFlow, useVueFlow } from '@vue-flow/core'\n\nconst initialNodes = ref([\n  {\n    id: '1',\n    position: { x: 50, y: 50 },\n    data: { label: 'Node 1' },\n  }\n])\nconst { addNodes } = useVueFlow()\n\nfunction generateRandomNode() {\n  return {\n    id: Math.random().toString(),\n    position: { x: Math.random() * 500, y: Math.random() * 500 },\n    label: 'Random Node',\n  }\n}\n\nfunction onAddNode() {\n  // add a single node to the graph\n  addNodes(generateRandomNode())\n}\n\nfunction onAddNodes() {\n  // add multiple nodes to the graph\n  addNodes(Array.from({ length: 10 }, generateRandomNode))\n}\n</script>\n\n<template>\n  <VueFlow :nodes=\"initialNodes\">\n    <Panel>\n      <button type=\"button\" @click=\"onAddNode\">Add a node</button>\n      <button type=\"button\" @click=\"onAddNodes\">Add multiple nodes</button>\n    </Panel>\n  </VueFlow>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using useNodeConnections Composable for Node-level Connections\nDESCRIPTION: Shows how to use useNodeConnections to get all connections of a specific node, with options to filter by handle type (source/target) and handle ID, as well as providing callbacks for connection events.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/composables.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type HandleConnection, useNodeConnections } from '@vue-flow/core'\n\n// get all connections where this node is the target (incoming connections)\nconst targetConnections = useNodeConnections({\n  // type is required\n  handleType: 'target',\n})\n\n// get all connections where this node is the source (outgoing connections)\nconst sourceConnections = useNodeConnections({\n  handleType: 'source',\n})\n\nconst handleConnections = useNodeConnections({\n  handleId: 'handle-1', // you can explicitly pass a handle id if you want to get connections of a specific handle\n})\n\nconst connections = useNodeConnections({\n  nodeId: '1', // you can explicitly pass a node id, otherwise it's used from the `NodeId  injection\n  handleType: 'target',\n  onConnect: (connections: HandleConnection[]) => {\n    // do something with the connections\n  },\n  onDisconnect: (connections: HandleConnection[]) => {\n    // do something with the connections\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Node Definitions in Vue Flow\nDESCRIPTION: Reference examples showing how to define different types of nodes (default, input, and output) with their basic properties like id, label, and position.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/node.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst defaultNode = ref([\n  {\n    id: '1',\n    label: 'Default Node',\n    position: { x: 50, y: 75 },\n  }\n]);\n\nconst inputNode = ref([\n  {\n    id: '1',\n    type: 'input',\n    label: 'Input Node',\n    position: { x: 50, y: 75 },\n  }\n]);\n\nconst outputNode = ref([\n  {\n    id: '1',\n    type: 'output',\n    label: 'Output Node',\n    position: { x: 50, y: 75 },\n  }\n]);\n```\n\n----------------------------------------\n\nTITLE: Building Custom Node Handles with useHandle Composable\nDESCRIPTION: Shows how to build a custom handle component using the useHandle composable, which provides pointerDown and click handler functions that can be applied to elements as node handles.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/composables.md#2025-04-21_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<script lang=\"ts\" setup>\nimport { NodeId, useHandle, useVueFlow } from '@vue-flow/core'\nimport type { HandleProps, Position } from '@vue-flow/core'\n\nconst props = withDefaults(defineProps<HandleProps>(), {\n  type: 'source',\n  position: 'top' as Position,\n  connectable: true,\n})\n\nconst nodeId = inject(NodeId, '')\n\nconst { id, hooks, connectionStartHandle } = useVueFlow()\n\nconst { handlePointerDown, handleClick } = useHandle({\n  nodeId,\n  handleId: props.id,\n  isValidConnection: props.isValidConnection,\n  type: props.type,\n})\n\nconst onMouseDownHandler = (event: MouseEvent) => handlePointerDown(event)\n\nconst onClickHandler = (event: MouseEvent) => handleClick(event)\n</script>\n\n<script lang=\"ts\">\nexport default {\n  name: 'CustomHandle',\n}\n</script>\n\n<template>\n  <div\n    :data-handleid=\"id\"\n    :data-nodeid=\"nodeId\"\n    :data-handlepos=\"position\"\n    class=\"vue-flow__handle nodrag\"\n    :class=\"[\n      `vue-flow__handle-${position}`,\n      `vue-flow__handle-${id}`,\n      {\n        source: type !== 'target',\n        target: type === 'target',\n        connectable: connectable,\n        connecting:\n          connectionStartHandle?.nodeId === nodeId &&\n          connectionStartHandle?.handleId === id &&\n          connectionStartHandle?.type === type,\n      },\n    ]\"\n    @mousedown=\"onMouseDownHandler\"\n    @click=\"onClickHandler\"\n  >\n    <slot :node-id=\"nodeId\" v-bind=\"props\"></slot>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using removeNodes Action to Remove Nodes from Vue Flow\nDESCRIPTION: Shows how to use the removeNodes action from the useVueFlow composable to remove single or multiple nodes from the graph by their IDs.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/node.md#2025-04-21_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { ref } from 'vue'\nimport { VueFlow, Panel, useVueFlow } from '@vue-flow/core'\n\nconst initialNodes = ref([\n  {\n    id: '1',\n    position: { x: 50, y: 50 },\n    data: { label: 'Node 1' },\n  },\n  {\n    id: '2',\n    position: { x: 150, y: 50 },\n    data: { label: 'Node 2' },\n  }\n])\n\nconst { removeNodes } = useVueFlow()\n\nfunction removeOneNode() {\n  removeNodes('1')\n}\n\nfunction removeMultipleNodes() {\n  removeNodes(['1', '2'])\n}\n</script>\n\n<template>\n  <VueFlow :nodes=\"initialNodes\">\n    <Panel>\n      <button type=\"button\" @click=\"removeOneNode\">Remove Node 1</button>\n      <button type=\"button\" @click=\"removeMultipleNodes\">Remove Node 1 and 2</button>\n    </Panel>\n  </VueFlow>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Handling Events with Flow Instance\nDESCRIPTION: Shows how to use the useVueFlow hook to listen to events through the Flow instance. Demonstrates using onNodeClick and onEdgeClick event hooks with handler functions.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/vue-flow/events.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { ref } from 'vue';\nimport { VueFlow, useVueFlow } from '@vue-flow/core';\n\nconst nodes = ref([/* ... */]);\nconst edges = ref([/* ... */]);\n\n// All events are available from `useVueFlow` as `on<EventName>`\nconst { onNodeClick, onEdgeClick } = useVueFlow();\n\n// Node click event handler\nonNodeClick(({ event, node }) => {\n  console.log('Node clicked:', node, event);\n});\n\n// Edge click event handler\nonEdgeClick(({ event, edge }) => {\n  console.log('Edge clicked:', edge, event);\n});\n</script>\n\n<template>\n  <VueFlow :nodes=\"nodges\" :edges=\"edges\" @node-click=\"onNodeClick\" @edge-click=\"onEdgeClick\"></VueFlow>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Custom Node Component Implementation with TypeScript\nDESCRIPTION: TypeScript implementation of a custom node component for Vue Flow. Uses proper type definitions from the Vue Flow library for strong typing of props.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/getting-started.md#2025-04-21_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { computed } from 'vue'\nimport { Position, Handle } from '@vue-flow/core'\nimport type { NodeProps } from '@vue-flow/core'\n  \nconst props = defineProps<NodeProps>()\n\nconst x = computed(() => `${Math.round(props.position.x)}px`)\nconst y = computed(() => `${Math.round(props.position.y)}px`)\n</script>\n\n<template>\n  <div class=\"vue-flow__node-default\">\n    <div>{{ data.label }}</div>\n\n    <div>\n      {{ x }} {{ y }}\n    </div>\n\n    <Handle type=\"source\" :position=\"Position.Bottom\" />\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Custom Edge Component Implementation with JavaScript\nDESCRIPTION: JavaScript implementation of a custom edge component for Vue Flow. Demonstrates creating a custom edge with a Bezier path and a floating label using EdgeLabelRenderer.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/getting-started.md#2025-04-21_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { BaseEdge, EdgeLabelRenderer, getBezierPath } from '@vue-flow/core'\nimport { computed } from 'vue'\n\nconst props = defineProps({\n  sourceX: {\n    type: Number,\n    required: true,\n  },\n  sourceY: {\n    type: Number,\n    required: true,\n  },\n  targetX: {\n    type: Number,\n    required: true,\n  },\n  targetY: {\n    type: Number,\n    required: true,\n  },\n  sourcePosition: {\n    type: String,\n    required: true,\n  },\n  targetPosition: {\n    type: String,\n    required: true,\n  },\n  data: {\n    type: Object,\n    required: true,\n  }\n})\n\nconst path = computed(() => getBezierPath(props))\n</script>\n\n<script>\nexport default {\n  inheritAttrs: false,\n}\n</script>\n\n<template>\n  <!-- You can use the `BaseEdge` component to create your own custom edge more easily -->\n  <BaseEdge :path=\"path[0]\" />\n\n  <!-- Use the `EdgeLabelRenderer` to escape the SVG world of edges and render your own custom label in a `<div>` ctx -->\n  <EdgeLabelRenderer>\n    <div\n      :style=\"{\n        pointerEvents: 'all',\n        position: 'absolute',\n        transform: `translate(-50%, -50%) translate(${path[1]}px,${path[2]}px)`,\n      }\"\n      class=\"nodrag nopan\"\n    >\n      {{ data.hello }}\n    </div>\n  </EdgeLabelRenderer>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Updating Edge Data Using useEdge Hook in Custom Edge Component\nDESCRIPTION: This snippet shows how to update an edge's data within a custom edge component using the useEdge hook. It demonstrates modifying data and other properties like selectable and animated.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/edge.md#2025-04-21_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<!-- CustomEdge.vue -->\n<script setup>\nimport { useEdge } from '@vue-flow/core'\n\n// `useEdge` returns us the edge object straight from the state\n// since the edge obj is reactive, we can mutate it to update our edges' data\nconst { edge } = useEdge()\n\nfunction onSomeEvent() {\n  edge.data = {\n    ...edge.data,  \n    hello: 'world',\n  }\n  \n  // you can also mutate properties like `selectable` or `animated`\n  edge.selectable = !edge.selectable\n  edge.animated = !edge.animated\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using Template Slots for Custom Nodes in Vue Flow\nDESCRIPTION: Demonstrates how to use template slots to define custom nodes in Vue Flow. This method allows for easy dynamic resolution of slot names based on node types.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/node.md#2025-04-21_snippet_17\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { VueFlow } from '@vue-flow/core'\nimport CustomNode from './CustomNode.vue'\n\nconst nodes = ref([\n  {\n    id: '1',\n    data: { label: 'Node 1' },\n    type: 'custom',\n    position: { x: 50, y: 50 },\n  }\n])\n</script>\n\n<template>\n  <VueFlow :nodes=\"nodes\">\n    <!-- the expected slot name is `node-custom` -->\n    <template #node-custom=\"props\">\n      <CustomNode v-bind=\"props\" />\n    </template>\n  </VueFlow>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Configuring Vue Flow with Component Props\nDESCRIPTION: Example of configuring Vue Flow by passing options as props to the VueFlow component, specifically setting default viewport and zoom constraints.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/vue-flow/config.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<!-- Pass configuration as props -->\n<template>\n  <VueFlow :default-viewport=\"{ zoom: 0.5 }\" :max-zoom=\"4\" :min-zoom=\"0.1\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Updating Node Data with useVueFlow\nDESCRIPTION: Shows how to update node data using the useVueFlow composable, including methods like updateNodeData and updateNode, as well as direct node property mutation.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/node.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport  { useVueFlow } from '@vue-flow/core'\n\nconst instance = useVueFlow()\n\n// use the `updateNodeData` method to update the data of an edge\ninstance.updateNodeData(edgeId, { hello: 'mona' })\n\n// find the node in the state by its id\nconst node = instance.findNode(nodeId)\n\nnode.data = {\n  ...node.data,\n  hello: 'world',\n}\n\n// you can also mutate properties like `selectable` or `draggable`\nnode.selectable = false\nnode.draggable = false\n\n// or use `updateNode` to update the node directly\ninstance.updateNode(nodeId, { selectable: false, draggable: false })\n```\n\n----------------------------------------\n\nTITLE: Listening to Node and Edge Changes in Vue Flow\nDESCRIPTION: This snippet shows how to listen to node and edge changes in Vue Flow using both the composition API and template events. It demonstrates the use of onNodesChange and onEdgesChange events.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/controlled-flow.md#2025-04-21_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { VueFlow, useVueFlow } from '@vue-flow/core'  \n\nconst { onNodesChange, onEdgesChange } = useVueFlow()\n\nonNodesChange((changes) => {\n  // changes are arrays of type `NodeChange`\n  console.log(changes)\n})\n\nonEdgesChange((changes) => {\n  // changes are arrays of type `EdgeChange`\n  console.log(changes)\n})\n  \nconst onChange = (changes) => {\n  // changes are arrays of type `NodeChange` or `EdgeChange`\n  console.log(changes)\n}\n</script>\n\n<template>\n  <VueFlow :nodes=\"nodes\" :edges=\"edges\" @nodes-change=\"onChange\" @edges-change=\"onChange\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Configuring Vue Flow with Nodes and Edges\nDESCRIPTION: Example demonstrating how to initialize Vue Flow with both nodes and edges to create a connected graph structure.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/vue-flow/config.md#2025-04-21_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { VueFlow } from '@vue-flow/core'\n\nconst nodes = ref([\n  {\n    id: '1',\n    type: 'input',\n    position: { x: 250, y: 5 },\n    data: { label: 'Node 1' },\n  },\n  {\n    id: '2',\n    position: { x: 100, y: 100 },\n    data: { label: 'Node 2' },\n  },\n  {\n    id: '3',\n    position: { x: 400, y: 100 },\n    data: { label: 'Node 3' },\n  },\n  {\n    id: '4',\n    type: 'output',\n    position: { x: 400, y: 200 },\n    data: { label: 'Node 4' },\n  },\n])\n\nconst edges = ref([\n  { \n    id: 'e1->3', \n    source: '1',\n    target: '3' \n  },\n  { \n    id: 'e1->2', \n    source: '1', \n    target: '2',  \n  },\n])\n</script>\n<template>\n  <VueFlow :nodes=\"nodes\" :edges=\"edges\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Adding Nodes to Vue Flow Graph in TypeScript\nDESCRIPTION: TypeScript version of adding nodes to a Vue Flow graph, with proper type definitions for the nodes using the Node interface from @vue-flow/core.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/node.md#2025-04-21_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { ref, onMounted } from 'vue'\nimport type { Node } from '@vue-flow/core'\nimport { VueFlow, Panel } from '@vue-flow/core'\n\nconst nodes = ref<Node[]>([\n  {\n    id: '1',\n    position: { x: 50, y: 50 },\n    data: { label: 'Node 1', },\n  }\n]);\n\nfunction addNode() {\n  const id = Date.now().toString()\n\n  nodes.value.push({\n    id,\n    position: { x: 150, y: 50 },\n    data: { label: `Node ${id}`, },\n  })\n}\n</script>\n\n<template>\n  <VueFlow :nodes=\"nodes\">\n    <Panel>\n      <button type=\"button\" @click=\"addNode\">Add a node</button>\n    </Panel>\n  </VueFlow>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using useHandleConnections Composable for Handle Connections\nDESCRIPTION: Demonstrates the useHandleConnections composable which provides an array of connections for a specific handle. Shows examples for both incoming (target) and outgoing (source) connections with various configuration options.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/composables.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type HandleConnection, useHandleConnections } from '@vue-flow/core'\n\n// get all connections where this node is the target (incoming connections)\nconst targetConnections = useHandleConnections({\n  // type is required\n  type: 'target',\n})\n\n// get all connections where this node is the source (outgoing connections)\nconst sourceConnections = useHandleConnections({\n  type: 'source',\n})\n\nconst connections = useHandleConnections({\n  id: 'handle-1', // you can explicitly pass a handle id if there are multiple handles of the same type\n  nodeId: '1', // you can explicitly pass a node id, otherwise it's used from the `NodeId  injection\n  type: 'target',\n  onConnect: (connections: HandleConnection[]) => {\n    // do something with the connections\n  },\n  onDisconnect: (connections: HandleConnection[]) => {\n    // do something with the connections\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Updating Node Data with v-model Binding\nDESCRIPTION: Shows how to update node data using v-model binding by finding and mutating the node in the nodes array directly, with a button to trigger the update.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/node.md#2025-04-21_snippet_11\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { ref } from 'vue'\n\nconst nodes = ref([\n  {\n    id: '1',\n    position: { x: 50, y: 50 },\n    data: {\n      label: 'Node 1',\n      hello: 'world',\n    }\n  },\n])\n\nfunction onSomeEvent(nodeId) {\n  const node = nodes.value.find((node) => node.id === nodeId)\n\n  node.data = {\n    ...nodes.value[0].data,\n    hello: 'world',\n  }\n    \n  // you can also mutate properties like `selectable` or `draggable`\n  node.selectable = false\n  node.draggable = false\n}\n</script>\n\n<template>\n  <VueFlow :nodes=\"nodes\">\n    <Panel>\n      <button type=\"button\" @click=\"onSomeEvent('1')\">Update Node 1</button>\n    </Panel>\n  </VueFlow>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Edge Component in Vue Flow\nDESCRIPTION: Demonstrates how to create a custom edge component by extending existing edge components like BezierEdge, SmoothStepEdge, StepEdge, or StraightEdge.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/utils/edge.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script lang=\"ts\" setup>\n// CustomEdge.vue\nimport { EdgeProps, BezierEdge, SmoothStepEdge, StepEdge, StraightEdge } from '@vue-flow/core'\n\nconst props = defineProps<EdgeProps>()\n\n// do some custom logic\n</script>\n<template>\n  <!-- wrap the bezier edge or do something else in the template -->\n  <BezierEdge v-bind=\"props\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Custom Edge Component Implementation with TypeScript\nDESCRIPTION: TypeScript implementation of a custom edge component for Vue Flow. Uses the EdgeProps type for proper type checking and implements a Bezier path with a floating label.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/getting-started.md#2025-04-21_snippet_9\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { BaseEdge, EdgeLabelRenderer, getBezierPath, type EdgeProps } from '@vue-flow/core'\nimport { computed } from 'vue'\n\nconst props = defineProps<EdgeProps>()\n\nconst path = computed(() => getBezierPath(props))\n</script>\n\n<script>\nexport default {\n  inheritAttrs: false,\n}\n</script>\n\n<template>\n  <!-- You can use the `BaseEdge` component to create your own custom edge more easily -->\n  <BaseEdge :path=\"path[0]\" />\n\n  <!-- Use the `EdgeLabelRenderer` to escape the SVG world of edges and render your own custom label in a `<div>` ctx -->\n  <EdgeLabelRenderer>\n    <div\n      :style=\"{\n        pointerEvents: 'all',\n        position: 'absolute',\n        transform: `translate(-50%, -50%) translate(${path[1]}px,${path[2]}px)`,\n      }\"\n      class=\"nodrag nopan\"\n    >\n      {{ data.hello }}\n    </div>\n  </EdgeLabelRenderer>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Accessing Vue Flow State in a Sidebar Component\nDESCRIPTION: This snippet shows how to access Vue Flow state from a child component (Sidebar) without prop drilling, using the useVueFlow composable to inject the state.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/vue-flow/state.md#2025-04-21_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { useVueFlow } from '@vue-flow/core'\n\nconst { nodesSelectionActive, addSelectedNodes, getNodes } = useVueFlow()\n\nconst selectAll = () => {\n  addSelectedNodes(getNodes.value)\n  nodesSelectionActive.value = true\n}\n</script>\n<template>\n  <aside>\n    <div class=\"description\">\n      This is an example of how you can access the internal state outside of the Vue VueFlow component.\n    </div>\n    <div class=\"selectall\">\n      <button @click=\"selectAll\">select all nodes</button>\n    </div>\n  </aside>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Updating Node Data with useNode Composable\nDESCRIPTION: Demonstrates how to update node data using the useNode composable within a custom node component, allowing direct mutation of the node object from the state.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/node.md#2025-04-21_snippet_10\n\nLANGUAGE: vue\nCODE:\n```\n<!-- CustomNode.vue -->\n<script setup>\nimport { useNode } from '@vue-flow/core'\n\n// `useNode` returns us the node object straight from the state\n// since the node obj is reactive, we can mutate it to update our nodes' data\nconst { node } = useNode()\n\nfunction onSomeEvent() {\n  node.data = {\n    ...node.data,  \n    hello: 'world',\n  }\n  \n  // you can also mutate properties like `selectable` or `draggable`\n  node.selectable = false\n  node.draggable = false\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Bezier Path Edge in Vue Flow\nDESCRIPTION: Shows how to implement a custom edge using getBezierPath utility function with customizable curvature.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/utils/edge.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script lang=\"ts\" setup>\nimport { computed } from \"vue\"\nimport { BaseEdge, getBezierPath, EdgeProps } from '@vue-flow/core'\n\nconst props = defineProps<EdgeProps>()\n\nconst edgePathParams = computed(() => getBezierPath({ ...props, curvature: 0.5 }))\n</script>\n\n<template>\n  <BaseEdge :path=\"edgePathParams[0]\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Updating Node Type Using Vue Flow API\nDESCRIPTION: This snippet shows how to update a node's type using Vue Flow's updateNode function. It demonstrates that using this API method will only update the internal state unless v-model is used to sync with the component's state.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/controlled-flow.md#2025-04-21_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { ref } from 'vue'\nimport { useVueFlow } from '@vue-flow/core'\n\nconst nodes = ref([\n  {\n    id: '1',\n    position: { x: 0, y: 0 },\n    data: { label: 'Node 1' },\n  },\n])\n\nconst { updateNode } = useVueFlow()\n\n// using updateNode will only update the internal state, not the nodes state unless you use v-model\nupdateNode('1', { type: 'new-type' })\n</script>\n```\n\n----------------------------------------\n\nTITLE: Setting Proper Viewport Dimensions in Vue Flow\nDESCRIPTION: Example showing how to properly set width and height on the parent container for Vue Flow to render correctly. This fixes the MISSING_VIEWPORT_DIMENSIONS error.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/troubleshooting.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <!-- Ensure the parent container has a width and height -->\n  <div style=\"width: 500px; height: 500px\">\n    <VueFlow :nodes=\"nodes\" :edges=\"edges\" />\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Nodes with Parent References in Vue Flow\nDESCRIPTION: Example demonstrating how to properly configure nested nodes by correctly setting the parentNode property to create parent-child relationships.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/troubleshooting.md#2025-04-21_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\n// Here's an example of a valid nested node configuration\nconst nodes = ref([\n  { id: '1', type: 'input', label: 'Node 1', position: { x: 250, y: 5 } },\n  { id: '2', label: 'Node 2', position: { x: 100, y: 100 }, parentNode: '1' },\n  { id: '3', type: 'output', label: 'Node 3', position: { x: 400, y: 200 }, parentNode: '1' },\n])\n```\n\n----------------------------------------\n\nTITLE: Implementing Handle Components with Vue Flow\nDESCRIPTION: Example of implementing source and target handles in a custom Vue Flow node component. Uses the Handle component and Position enum from @vue-flow/core to define connection points.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/examples/edges/validation.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { Handle, Position } from '@vue-flow/core'\n</script>\n\n<template>\n  <Handle type=\"source\" :position=\"Position.Right\" />\n  <Handle type=\"target\" :position=\"Position.Left\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Enforcing Specific State Instance in useVueFlow\nDESCRIPTION: Shows how to enforce a specific state instance by passing an ID to the useVueFlow composable, allowing for management of multiple flow instances.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/composables.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useVueFlow } from '@vue-flow/core'\n\nconst { onInit } = useVueFlow({ id: 'my-flow-instance' })\n\nonInit((instance) => {\n  // `instance` is the same type as the return of `useVueFlow` (VueFlowStore)\n})\n```\n\n----------------------------------------\n\nTITLE: Updating Node Internals for Dynamic Handles with Store Action\nDESCRIPTION: Demonstrates how to update a node's internals when dynamically adding or changing handles using the store action approach from useVueFlow.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/handle.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useVueFlow } from '@vue-flow/core'\n\nconst { updateNodeInternals } = useVueFlow()\n\nconst onSomeEvent = () => {\n  updateNodeInternals(['1'])\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Edge Event Handlers with useVueFlow in Vue\nDESCRIPTION: This snippet demonstrates how to use the useVueFlow composable to bind listeners to edge events in a Vue Flow component. It includes setting up nodes and edges, and implementing various edge event handlers.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/edge.md#2025-04-21_snippet_12\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { ref } from 'vue'  \nimport { VueFlow, useVueFlow } from '@vue-flow/core'\n\n// useVueFlow provides access to the event handlers\nconst { \n  onEdgeClick,\n  onEdgeDoubleClick,\n  onEdgeContextMenu,\n  onEdgeMouseEnter,\n  onEdgeMouseLeave,\n  onEdgeMouseMove,\n  onEdgeUpdateStart,\n  onEdgeUpdate,\n  onEdgeUpdateEnd,\n} = useVueFlow()\n  \nconst nodes = ref([\n  {\n    id: '1',\n    position: { x: 50, y: 50 },\n    data: { label: 'Node 1', },\n  },\n  {\n    id: '2',\n    position: { x: 50, y: 250 },\n    data: { label: 'Node 2', },\n  },\n])\n\nconst edges = ref([\n  {\n    id: 'e1->2',\n    source: '1',\n    target: '2',\n  },\n])\n  \n// bind listeners to the event handlers\nonEdgeClick((event, edge) => {\n  console.log('edge clicked', edge)\n})\n\nonEdgeDoubleClick((event, edge) => {\n  console.log('edge double clicked', edge)\n})\n\nonEdgeContextMenu((event, edge) => {\n  console.log('edge context menu', edge)\n})\n  \n// ... and so on  \n</script>\n\n<template>\n  <VueFlow :nodes=\"nodes\" :edges=\"edges\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Configuring Vue Flow with Nodes Array\nDESCRIPTION: Example showing how to configure Vue Flow by providing an array of node objects with various types and positions.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/vue-flow/config.md#2025-04-21_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { ref } from 'vue'  \nimport { VueFlow } from '@vue-flow/core'\n\nconst nodes = ref([\n  { \n    id: '1', \n    type: 'input',\n    position: { x: 250, y: 5 },\n    data: { label: 'Node 1' },\n  },\n  { \n    id: '2', \n    position: { x: 100, y: 100 },\n    data: { label: 'Node 2' },\n  },\n  { \n    id: '3', \n    position: { x: 400, y: 100 },\n    data: { label: 'Node 3' },\n  },\n  { \n    id: '4', \n    type: 'output',\n    position: { x: 400, y: 200 },\n    data: { label: 'Node 4' },\n  },\n])\n</script>\n<template>\n  <VueFlow :nodes=\"nodes\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Node with Node Resizer\nDESCRIPTION: Example of a custom node component that implements the NodeResizer component to make nodes resizable, including import statements for required dependencies and styles.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/components/node-resizer.md#2025-04-21_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script lang=\"ts\" setup>\nimport { Handle, Position } from '@vue-flow/core'\nimport { NodeResizer } from '@vue-flow/node-resizer'\n\n// make sure to include the necessary styles!\nimport '@vue-flow/node-resizer/dist/style.css'\n\ndefineProps(['data'])\n</script>\n\n<template>\n  <NodeResizer min-width=\"100\" min-height=\"30\" />\n\n  <Handle type=\"target\" :position=\"Position.Left\" />\n  <Handle type=\"source\" :position=\"Position.Right\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using useNodeId Composable for Current Node Identification\nDESCRIPTION: Demonstrates how to use useNodeId composable to get the current node ID, which should be called inside a custom node component as the ID is provided by the internal NodeWrapper component.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/composables.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useNodeId } from '@vue-flow/core'\n\nconst nodeId = useNodeId()\n\nconsole.log(nodeId.value) // '1'\n```\n\n----------------------------------------\n\nTITLE: Removing Edges Using useVueFlow Composable\nDESCRIPTION: This snippet demonstrates how to remove one or multiple edges from the Vue Flow graph using the removeEdges action from useVueFlow. It shows removing both a single edge and multiple edges at once.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/edge.md#2025-04-21_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { ref, onMounted } from 'vue'  \nimport { VueFlow, useVueFlow } from '@vue-flow/core'\n\nconst nodes = ref([\n  {\n    id: '1',\n    position: { x: 50, y: 50 },\n    data: { label: 'Node 1', },\n  },\n  {\n    id: '2',\n    position: { x: 50, y: 250 },\n    data: { label: 'Node 2', },\n  },\n  {\n    id: '3',\n    position: { x: 250, y: 50 },\n    data: { label: 'Node 3', },\n  },\n  {\n    id: '4',\n    position: { x: 250, y: 250 },\n    data: { label: 'Node 4', },\n  },\n])\n\nconst edges = ref([\n  {\n    id: 'e1->2',\n    source: '1',\n    target: '2',\n  },\n  {\n    id: 'e1->3',\n    source: '1',\n    target: '3',\n  },\n  {\n    id: 'e2->3',\n    source: '2',\n    target: '3',\n  },\n  {\n    id: 'e2->4',\n    source: '2',\n    target: '4',\n  },\n])\n\nconst { removeEdges } = useVueFlow()\n\nfunction removeOneEdge() {\n  removeEdges('e1->2')\n}\n\nfunction removeMultipleEdges() {\n  removeEdges(['e1->3', 'e2->3'])\n}\n</script>\n\n<template>\n  <VueFlow :nodes=\"nodes\" :edges=\"edges\">\n    <Panel>\n      <button @click=\"removeOneEdge\">Remove Edge 1</button>\n      <button @click=\"removeMultipleEdges\">Remove Edges 2 and 3</button>\n    </Panel>\n  </VueFlow>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Connection Line in Vue Flow\nDESCRIPTION: This example demonstrates how to use the connection-line slot to implement a custom connection line component. The connection line is displayed when a user is creating a new connection between nodes.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/vue-flow/slots.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <VueFlow>\n    <template #connection-line=\"connectionLineProps\">\n      <CustomConnectionLine v-bind=\"connectionLineProps\" />\n    </template>\n  </VueFlow>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Updating Vue Flow Configuration with Composable State\nDESCRIPTION: Example showing how to update Vue Flow configuration by directly modifying the state returned by the useVueFlow composable.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/vue-flow/config.md#2025-04-21_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst { nodesDraggable } = useVueFlow()\n\nconst toggleNodesDraggable = () => {\n  nodesDraggable.value = !nodesDraggable.value\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Adding Edges Using useVueFlow Composable\nDESCRIPTION: This snippet demonstrates using the useVueFlow composable to add edges programmatically. It shows how to add edges directly to the internal state using the addEdges action.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/edge.md#2025-04-21_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { VueFlow, useVueFlow } from '@vue-flow/core'\n\nconst initialNodes = ref([\n  {\n    id: '1',\n    position: { x: 50, y: 50 },\n    data: { label: 'Node 1', },\n  },\n  {\n    id: '2',\n    position: { x: 50, y: 250 },\n    data: { label: 'Node 2', },\n  }\n])\n\nconst { addEdges } = useVueFlow()\n\naddEdges([\n  {\n    source: '1',\n    target: '2',\n\n    // if a node has multiple handles of the same type,\n    // you should specify which handle to use by id\n    sourceHandle: null,\n    targetHandle: null,\n  }\n])\n</script>\n\n<template>\n  <VueFlow :nodes=\"initialNodes\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using noDragClassName to Prevent Dragging on Input Fields in Vue Flow Nodes\nDESCRIPTION: This example demonstrates how to use the 'nodrag' class (default value of noDragClassName) on an input element within a custom node to prevent the node from being dragged when users interact with the input field. The code includes a simple Vue component with a reactive input value.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/node.md#2025-04-21_snippet_23\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { ref } from 'vue'\n\nconst inputValue = ref('')\n</script>\n\n<template>\n  <div class=\"custom-node-container\">\n    <input class=\"nodrag\" v-model=\"inputValue\" />\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Removing Nodes from Vue Flow Graph\nDESCRIPTION: Demonstrates how to remove nodes from a Vue Flow graph by filtering the nodes array based on node IDs, with buttons to trigger specific node removal.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/node.md#2025-04-21_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { ref } from 'vue'\nimport { VueFlow, Panel } from '@vue-flow/core'\n\nconst nodes = ref([\n  {\n    id: '1',\n    position: { x: 50, y: 50 },\n    data: { label: 'Node 1' },\n  },\n  {\n    id: '2',\n    position: { x: 150, y: 50 },\n    data: { label: 'Node 2' },\n  }\n])\n\nfunction removeNode(id) {\n  nodes.value = nodes.value.filter((node) => node.id !== id)\n}\n</script>\n\n<template>\n  <VueFlow :nodes=\"nodes\">\n    <Panel>\n      <button type=\"button\" @click=\"removeNode('1')\">Remove Node 1</button>\n      <button type=\"button\" @click=\"removeNode('2')\">Remove Node 2</button>\n    </Panel>\n  </VueFlow>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using v-model for Nodes and Edges in Vue Flow\nDESCRIPTION: This snippet demonstrates how to use v-model to sync the internal state of nodes and edges with your own state in Vue Flow. This is useful for reflecting internal changes in your component's state.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/controlled-flow.md#2025-04-21_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <VueFlow v-model:edges=\"edges\" v-model:nodes=\"nodes\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Custom Node Component Implementation with JavaScript\nDESCRIPTION: JavaScript implementation of a custom node component for Vue Flow. Shows how to create a node with position information and add a source handle for connections.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/getting-started.md#2025-04-21_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { computed } from 'vue'\nimport { Position, Handle } from '@vue-flow/core'\n\nconst props = defineProps({\n  position: {\n    type: Object,\n    required: true,\n  }\n})\n\nconst x = computed(() => `${Math.round(props.position.x)}px`)\nconst y = computed(() => `${Math.round(props.position.y)}px`)\n</script>\n\n<template>\n  <div class=\"vue-flow__node-default\">\n    <div>{{ data.label }}</div>\n\n    <div>\n      {{ x }} {{ y }}\n    </div>\n\n    <Handle type=\"source\" :position=\"Position.Bottom\" />\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Binding Node Event Handlers to VueFlow Component in Vue\nDESCRIPTION: This snippet shows how to bind node event handlers directly to the VueFlow component using Vue's event binding syntax. It covers various node events such as drag, click, and mouse events.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/node.md#2025-04-21_snippet_20\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { ref } from 'vue'\nimport { VueFlow } from '@vue-flow/core'\n\nconst nodes = ref([\n  {\n    id: '1',\n    data: { label: 'Node 1' },\n    position: { x: 50, y: 50 },\n  },\n])\n  \nfunction logEvent(name, data) {\n  console.log(name, data)\n}\n</script>\n\n<template>\n  <!-- bind listeners to the event handlers -->\n  <VueFlow\n    :nodes=\"nodes\"\n    @node-drag-start=\"logEvent('drag start', $event)\"\n    @node-drag=\"logEvent('drag', $event)\"\n    @node-drag-stop=\"logEvent('drag stop', $event)\"\n    @node-click=\"logEvent('click', $event)\"\n    @node-double-click=\"logEvent('dblclick', $event)\"\n    @node-contextmenu=\"logEvent('contextmenu', $event)\"\n    @node-mouse-enter=\"logEvent('mouseenter', $event)\"\n    @node-mouse-leave=\"logEvent('mouseleave', $event)\"\n    @node-mouse-move=\"logEvent('mousemove', $event)\"\n  />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Updating Edge Data Using useVueFlow\nDESCRIPTION: This snippet demonstrates how to update edge data using the useVueFlow composable. It shows multiple methods including the updateEdgeData method, finding an edge by ID, and directly mutating edge properties.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/edge.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport  { useVueFlow } from '@vue-flow/core'\n\nconst instance = useVueFlow()\n\n// use the `updateEdgeData` method to update the data of an edge\ninstance.updateEdgeData(edgeId, { hello: 'mona' })\n\n// find the edge in the state by its id\nconst edge = instance.findEdge(edgeId)\n\nedge.data = {\n  ...edge.data,\n  hello: 'world',\n}\n\n// you can also mutate properties like `selectable` or `animated`\nedge.selectable = !edge.selectable\nedge.animated = !edge.animated\n```\n\n----------------------------------------\n\nTITLE: Configuring Vue Flow with Custom Edge Types\nDESCRIPTION: Example showing how to register and use custom edge components in Vue Flow by mapping type names to component definitions.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/vue-flow/config.md#2025-04-21_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { ref } from 'vue'  \nimport { VueFlow } from '@vue-flow/core'\nimport CustomEdge from './CustomEdge.vue'\n\nconst edgeTypes = {\n  custom: CustomEdge,\n}\n\nconst nodes = ref([\n  {\n    id: '1',\n    type: 'custom',\n    position: { x: 250, y: 5 },\n    data: { label: 'Node 1' },\n  },\n  {\n    id: '2',\n    position: { x: 100, y: 100 },\n    data: { label: 'Node 2' },\n  },\n])\n\nconst edges = ref([\n  { \n    id: 'e1->2', \n    type: 'custom',\n    source: '1', \n    target: '2' \n  },\n])\n</script>\n<template>\n  <VueFlow :nodes=\"nodes\" :edges=\"edges\" :edge-types=\"edgeTypes\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Limiting Handle Connections with Custom Logic\nDESCRIPTION: Demonstrates how to limit the number of connections a handle can have by implementing a custom connectable function that evaluates connection eligibility.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/handle.md#2025-04-21_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<script lang=\"ts\" setup>\nimport { Position, Handle, type HandleConnectableFunc } from '@vue-flow/core'  \n  \nconst handleConnectable: HandleConnectableFunc = (node, connectedEdges) => {\n  // only allow connections if the node has less than 3 connections\n  return connectedEdges.length < 3\n}\n</script>\n\n<template>\n  <Handle type=\"source\" :position=\"Position.Right\" :connectable=\"handleConnectable\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using useNodesData Composable for Node Data Access\nDESCRIPTION: Demonstrates the useNodesData composable for accessing data from nodes based on their IDs, with an example showing integration with useHandleConnections to get data from connected nodes.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/composables.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useNodesData, useHandleConnections } from '@vue-flow/core'\n\n// get all connections where this node is the target (incoming connections)\nconst connections = useHandleConnections({\n  type: 'target',\n})\n\nconst data = useNodesData(() => connections.value.map((connection) => connection.source))\n\nconsole.log(data.value) // [{ /* ... */]\n```\n\n----------------------------------------\n\nTITLE: Creating Input Node in Vue Flow\nDESCRIPTION: Shows how to define an input node with a single handle positioned at the bottom. This type of node represents a starting point in the flow.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/node.md#2025-04-21_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ref } from 'vue'\nimport { Position } from '@vue-flow/core'\n\nconst nodes = ref([\n  {\n    id: '1',\n    type: 'input',\n    sourcePosition: Position.Bottom, // or Top, Left, Right,\n    data: { label: 'Input Node' },\n  }\n])\n```\n\n----------------------------------------\n\nTITLE: Implementing Output Node in Vue Flow\nDESCRIPTION: Illustrates the creation of an output node with a single handle typically positioned at the top. This node type represents an endpoint in the flow.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/node.md#2025-04-21_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ref } from 'vue'\nimport { Position } from '@vue-flow/core'\n\nconst nodes = ref([\n  {\n    id: '1',\n    type: 'output',\n    targetPosition: Position.Top, // or Bottom, Left, Right,\n    data: { label: 'Output Node' },\n  }\n])\n```\n\n----------------------------------------\n\nTITLE: Using useNodesData with Type Guards\nDESCRIPTION: Shows an advanced usage of useNodesData with type guards to narrow down the type of returned data, useful for type-safe access to node data with specific structures.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/composables.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useNodesData, useHandleConnections, type Node } from '@vue-flow/core'\n\ntype MyNode = Node<{ foo: string }>\n\nconst connections = useHandleConnections({\n  type: 'target',\n})\n\nconst data = useNodesData(() => connections.value.map((connection) => connection.source), (node): node is MyNode => node.type === 'foo')\n\nconsole.log(data.value) // [{ /* foo: string */]\n```\n\n----------------------------------------\n\nTITLE: Updating Edge Data Using v-model\nDESCRIPTION: This snippet demonstrates how to update edge data using the v-model approach. It shows how to find and modify an edge by ID, updating its data and properties like selectable and animated.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/edge.md#2025-04-21_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { ref } from 'vue'\n\nconst nodes = ref([\n  {\n    id: '1',\n    position: { x: 50, y: 50 },\n    data: {\n      label: 'Node 1',\n      hello: 'world',\n    },\n  },\n  {\n      id: '2',\n      position: { x: 50, y: 250 },\n      data: { label: 'Node 2', },\n  },\n])\n\nconst edges = ref([\n  {\n    id: 'e1->2',\n    source: '1',\n    target: '2',\n  },\n])\n\nfunction onSomeEvent(edgeId) {\n  const edge = edges.value.find((edge) => edge.id === edgeId)\n  edge.data = {\n    ...elements.value[0].data,\n    hello: 'world',\n  }\n\n  // you can also mutate properties like `selectable` or `animated`\n  edge.selectable = !edge.selectable\n  edge.animated = !edge.animated\n}\n</script>\n\n<template>\n  <VueFlow v-model=\"elements\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Configuring Node Draggability in Vue Flow\nDESCRIPTION: Demonstrates how to globally disable node dragging and override it for a specific node. The example uses the 'nodes-draggable' prop on VueFlow component and the 'draggable' property on individual nodes.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/vue-flow/config.md#2025-04-21_snippet_9\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { ref } from 'vue'\nimport { VueFlow } from '@vue-flow/core'\n\nconst nodesDraggable = ref(false)\n\nconst nodes = ref([\n  { id: '1', position: { x: 250, y: 5 } },\n  { \n    id: '2', \n    // This will overwrite the globally set option of nodes-draggable\n    draggable: true, \n    position: { x: 100, y: 100 } \n  },\n])\n</script>\n\n<template>\n  <VueFlow :nodes=\"nodes\" :nodes-draggable=\"nodesDraggable\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Defining Default Node in Vue Flow\nDESCRIPTION: Demonstrates how to create a default node with two handles in Vue Flow. The snippet shows how to set the node type, position handles, and provide data.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/node.md#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ref } from 'vue'\nimport { Position } from '@vue-flow/core'\n\nconst nodes = ref([\n  {\n    id: '1',\n    type: 'default', // You can omit this as it's the fallback type\n    targetPosition: Position.Top, // or Bottom, Left, Right,\n    sourcePosition: Position.Bottom, // or Top, Left, Right,\n    data: { label: 'Default Node' },\n  }\n])\n```\n\n----------------------------------------\n\nTITLE: Removing Edges Using Props and Filtering\nDESCRIPTION: This snippet shows how to remove edges from a Vue Flow graph by filtering the edges array. It includes a button in a Panel that removes a specific edge when clicked.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/edge.md#2025-04-21_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { ref, onMounted } from 'vue'\nimport { VueFlow, Panel } from '@vue-flow/core'\n\nconst nodes = ref([\n  {\n    id: '1',\n    position: { x: 50, y: 50 },\n    data: { label: 'Node 1', },\n  },\n  {\n    id: '2',\n    position: { x: 50, y: 250 },\n    data: { label: 'Node 2', },\n  },\n]);\n\nconst edges = ref([\n  {\n    id: 'e1->2',\n    source: '1',\n    target: '2',\n  }\n]);\n\nfunction removeEdge(id) {\n  edges.value = edges.value.filter((edge) => edge.id !== id)\n}\n</script>\n\n<template>\n  <VueFlow :nodes=\"nodes\" :edges=\"edges\">\n    <Panel>\n      <button @click=\"removeEdge('e1->2')\">Remove Edge</button>\n    </Panel>\n  </VueFlow>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Custom Edge Component Implementation (JavaScript)\nDESCRIPTION: Shows how to implement a custom edge component using BezierEdge from Vue Flow core. Defines necessary props for edge positioning and rendering.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/edge.md#2025-04-21_snippet_9\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { BezierEdge } from '@vue-flow/core';\n\nconst props = defineProps(['sourceX', 'sourceY', 'targetX', 'targetY', 'sourcePosition', 'targetPosition']);\n</script>\n\n<script lang=\"ts\">\nexport default {\n  name: 'CustomEdge',\n};\n</script>\n\n<template>\n  <BezierEdge\n      :source-x=\"sourceX\"\n      :source-y=\"sourceY\"\n      :target-x=\"targetX\"\n      :target-y=\"targetY\"\n      :source-position=\"sourcePosition\"\n      :target-position=\"targetPosition\"\n  />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Configuring Node Connectivity in Vue Flow\nDESCRIPTION: Example demonstrating different ways to configure node connectivity in Vue Flow, including single connections, callback functions, or boolean values.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/packages/core/CHANGELOG.md#2025-04-21_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\nconst nodes = ref([\n  {\n    id: \"1\",\n    position: { x: 0, y: 0 },\n    connectable: \"single\", // each handle is only connectable once (default node for example)\n  },\n  {\n    id: \"2\",\n    position: { x: 200, y: 0 },\n    connectable: (node, connectedEdges) => {\n      return true; // will allow any number of connections\n    },\n  },\n  {\n    id: \"3\",\n    position: { x: 400, y: 0 },\n    connectable: true, // will allow any number of connections\n  },\n  {\n    id: \"4\",\n    position: { x: 200, y: 0 },\n    connectable: false, // will disable handles\n  },\n]);\n```\n\n----------------------------------------\n\nTITLE: Accessing Viewport Functions Using Event Hooks (Composable) in Vue Flow\nDESCRIPTION: Demonstrates how to access viewport functions using the useVueFlow composable and onPaneReady event hook. This example shows how to call fitView when the pane is ready.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/utils/instance.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { VueFlow, useVueFlow } from '@vue-flow/core'\n\nconst { onPaneReady } = useVueFlow()\n\n// event handler\nonPaneReady((instance) => instance.fitView())\n</script>\n```\n\n----------------------------------------\n\nTITLE: Accessing Viewport Functions Using Event Listener in Vue Flow\nDESCRIPTION: Shows how to access viewport functions using an event listener with the Options API approach. This example stores the VueFlow instance and calls fitView when the pane is ready.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/utils/instance.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script>\nimport { VueFlow } from '@vue-flow/core'\n\nexport default defineComponent({\n  components: { VueFlow },\n  data() {\n    return {\n      instance: null,\n    }\n  },\n  methods: {\n    onPaneReady(vueFlowInstance) {\n      vueFlowInstance.fitView()\n      this.instance = vueFlowInstance\n    }\n  }\n})\n</script>\n<template>\n  <VueFlow @pane-ready=\"onPaneReady\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Adding Edges to Vue Flow with JavaScript\nDESCRIPTION: This snippet demonstrates how to add edges to a Vue Flow graph using JavaScript. It defines nodes and edges then passes them to the VueFlow component via props.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/edge.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { ref, onMounted } from 'vue'\nimport { VueFlow } from '@vue-flow/core'\n\nconst nodes = ref([\n  {\n    id: '1',\n    position: { x: 50, y: 50 },\n    data: { label: 'Node 1', },\n  },\n  {\n    id: '2',\n    position: { x: 50, y: 250 },\n    data: { label: 'Node 2', },\n  }\n]);\n\nconst edges = ref([\n  {\n    id: 'e1->2',\n    source: '1',\n    target: '2',\n  }\n]);\n</script>\n\n<template>\n  <VueFlow :nodes=\"nodes\" :edges=\"edges\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using Vue Flow with Options API\nDESCRIPTION: This example demonstrates how to use Vue Flow with the Options API instead of Composition API, which requires providing a unique ID for the state instance.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/vue-flow/state.md#2025-04-21_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script>\nimport { VueFlow, useVueFlow } from '@vue-flow/core'\n\nconst { addEdges, onConnect } = useVueFlow({ id: 'options-api' })\nexport default defineComponent({\n  components: { VueFlow },\n  data() {\n    return {\n      nodes: [\n        {\n          id: '1',\n          position: { x: 0, y: 0},\n          data: { label: 'Node 1' }\n        }\n      ],\n      edges: [],\n    }\n  },\n  methods: {\n    // regular event handler\n    handleConnect: (params) => {\n      addEdges([params])\n    }\n  },\n  beforeMount() {\n    // Register your event handler, can technically be called in any lifecycle phase\n    // Skip this if you're using regular event handlers\n    onConnect((params) => addEdges([params]))\n  }\n})\n</script>\n\n<template>\n  <VueFlow id=\"options-api\" :nodes=\"nodes\" :edges=\"edges\" @connect=\"handleConnect\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Binding Edge Event Listeners Directly to VueFlow Component\nDESCRIPTION: This code snippet shows how to bind edge event listeners directly to the VueFlow component using Vue's event binding syntax. It includes setting up nodes and edges, and a function to log events.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/edge.md#2025-04-21_snippet_13\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { ref } from 'vue'\nimport { VueFlow } from '@vue-flow/core'\n\nconst nodes = ref([\n  {\n    id: '1',\n    position: { x: 50, y: 50 },\n    data: { label: 'Node 1', },\n  },\n  {\n    id: '2',\n    position: { x: 50, y: 250 },\n    data: { label: 'Node 2', },\n  },\n])\n\nconst edges = ref([\n  {\n    id: 'e1->2',\n    source: '1',\n    target: '2',\n  },\n])\n  \nfunction logEvent(eventName, data) {\n  console.log(eventName, data)\n}\n</script>\n\n<template>\n  <VueFlow\n    :nodes=\"nodes\"\n    :edges=\"edges\"\n    @edge-click=\"logEvent('edge clicked', $event)\"\n    @edge-double-click=\"logEvent('edge double clicked', $event)\"\n    @edge-context-menu=\"logEvent('edge context menu', $event)\"\n    @edge-mouse-enter=\"logEvent('edge mouse enter', $event)\"\n    @edge-mouse-leave=\"logEvent('edge mouse leave', $event)\"\n    @edge-mouse-move=\"logEvent('edge mouse move', $event)\"\n    @edge-update-start=\"logEvent('edge update start', $event)\"\n    @edge-update=\"logEvent('edge update', $event)\"\n    @edge-update-end=\"logEvent('edge update end', $event)\"\n  />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Adding Nodes to Vue Flow Graph in JavaScript\nDESCRIPTION: Example of how to add nodes to a Vue Flow graph using JavaScript. It demonstrates initializing nodes and adding new nodes with a button click.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/node.md#2025-04-21_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { ref, onMounted } from 'vue'\nimport { VueFlow, Panel } from '@vue-flow/core'\n\nconst nodes = ref([\n  {\n    id: '1',\n    position: { x: 50, y: 50 },\n    data: { label: 'Node 1', },\n  }\n]);\n\nfunction addNode() {\n  const id = Date.now().toString()\n  \n  nodes.value.push({\n    id,\n    position: { x: 150, y: 50 },\n    data: { label: `Node ${id}`, },\n  })\n}\n</script>\n\n<template>\n  <VueFlow :nodes=\"nodes\">\n    <Panel>\n      <button type=\"button\" @click=\"addNode\">Add a node</button>\n    </Panel>\n  </VueFlow>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using fitBounds Function in Vue Flow\nDESCRIPTION: Demonstrates the fitBounds function which adjusts the viewport according to specified bounds rectangle. This example fits the view to the rectangle containing all nodes.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/utils/instance.md#2025-04-21_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nvueFlowInstance.fitBounds(getRectOfNodes(nodes.value))\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Control Button to Vue Flow Controls\nDESCRIPTION: Example of how to add a custom ControlButton component as a child to the Controls component in Vue Flow. This snippet demonstrates adding a control button with a Font Awesome plus icon.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/components/control-button.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <VueFlow>\n    <Controls>\n      <ControlButton>\n        <i class=\"fa fa-plus\"></i>\n      </ControlButton>\n    </Controls>\n  </VueFlow>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Node with NodeToolbar Component\nDESCRIPTION: Implementation of a custom node component that includes the NodeToolbar from the @vue-flow/node-toolbar package. The toolbar has configurable visibility and position properties, and includes multiple action buttons.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/packages/node-toolbar/README.md#2025-04-21_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script lang=\"ts\" setup>\nimport { Handle, Position } from '@vue-flow/core'\nimport { NodeToolbar } from '@vue-flow/node-toolbar'\n\ninterface NodeData {\n  toolbarVisible: boolean\n  toolbarPosition: Position\n}\n\ninterface Props {\n  data: NodeData\n  label: string\n}\n\ndefineProps<Props>()\n</script>\n\n<template>\n  <NodeToolbar :is-visible=\"data.toolbarVisible\" :position=\"data.toolbarPosition\">\n    <button>delete</button>\n    <button>copy</button>\n    <button>expand</button>\n  </NodeToolbar>\n\n  <div :style=\"{ padding: '10px 20px' }\">\n    {{ label }}\n  </div>\n\n  <Handle type=\"target\" :position=\"Position.Left\" />\n  <Handle type=\"source\" :position=\"Position.Right\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Updating Nodes Without Emitting Changes in Vue\nDESCRIPTION: This snippet demonstrates how updating nodes directly in the component's state does not emit changes in Vue Flow. It shows a function that removes a node from the nodes array without triggering Vue Flow's change detection.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/controlled-flow.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { ref } from 'vue'\n\nconst nodes = ref([\n  {\n    id: '1',\n    position: { x: 0, y: 0 },\n    data: { label: 'Node 1' },\n  },\n])\n\n// this function *will not* emit a change\nfunction removeNode() {\n  nodes.value = nodes.value.filter((node) => node.id !== '1')\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Handles in a Vue Flow Node Component\nDESCRIPTION: A basic implementation of a node component with source and target handles positioned at the sourcePosition and targetPosition props passed to the component.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/handle.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { Handle } from '@vue-flow/core'\n  \ndefineProps(['id', 'sourcePosition', 'targetPosition', 'data'])\n</script>\n\n<template>\n  <Handle type=\"source\" :position=\"sourcePosition\" />\n  \n  <span>{{ data.label }}</span>\n  \n  <Handle type=\"target\" :position=\"targetPosition\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Defining Node Types Using Object in Vue Flow\nDESCRIPTION: Shows how to define custom node types by passing an object as a prop to the VueFlow component. This method requires marking components as raw to prevent reactivity warnings.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/node.md#2025-04-21_snippet_18\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { markRaw } from 'vue'\nimport CustomNode from './CustomNode.vue'\nimport SpecialNode from './SpecialNode.vue'\n\nconst nodeTypes = {\n  custom: markRaw(CustomNode),\n  special: markRaw(SpecialNode),\n}\n\nconst nodes = ref([\n  {\n    id: '1',\n    data: { label: 'Node 1' },\n    type: 'custom',\n  },\n  {\n    id: '1',\n    data: { label: 'Node 1' },\n    type: 'special',\n  }\n])\n</script>\n\n<template>\n  <VueFlow :nodes=\"nodes\" :nodeTypes=\"nodeTypes\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using toObject Function in Vue Flow\nDESCRIPTION: Demonstrates the toObject function which returns the current flow state including elements, position, and zoom level. This is useful for saving or serializing the current state.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/utils/instance.md#2025-04-21_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\ntoObject = (): {\n  elements: FlowElements,\n  position: [x, y],\n  zoom: scale,\n}\n```\n\n----------------------------------------\n\nTITLE: Using project Function in Vue Flow\nDESCRIPTION: Demonstrates the project function which transforms pixel coordinates to the internal VueFlow coordinate system. This is useful when dragging nodes from external sources like sidebars.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/utils/instance.md#2025-04-21_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nvueFlowInstance.project({ x: 100, y: 100 })\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Node with Node Resizer\nDESCRIPTION: Implementation of a custom node component using the NodeResizer. This shows how to add handles for connections and incorporate the resizer functionality with minimum dimensions set.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/packages/node-resizer/README.md#2025-04-21_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script lang=\"ts\" setup>\nimport { Handle, Position } from '@vue-flow/core'\nimport { NodeResizer } from '@vue-flow/node-resizer'\n\n// make sure to include the necessary styles!\nimport '@vue-flow/node-resizer/dist/style.css'\n\ndefineProps(['label'])\n</script>\n\n<template>\n  <NodeResizer min-width=\"100\" min-height=\"30\" />\n\n  <Handle type=\"target\" :position=\"Position.Left\" />\n  <div style=\"padding: 10px\">{{ label }}</div>\n  <Handle type=\"source\" :position=\"Position.Right\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using Auto-Connect in Vue Flow\nDESCRIPTION: Shows how to use the 'auto-connect' prop to automatically create edges when connections are emitted. The example demonstrates both boolean and custom connector function usage.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/vue-flow/config.md#2025-04-21_snippet_13\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <VueFlow :auto-connect=\"true\" />\n</template>\n```\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { ref } from 'vue'\n\nconst nodes = ref([/** ... */])\n\nconst edges = ref([/** ... */])\n\nconst connector = (params) => {\n  if (params.source === params.target) {\n    return false\n  }\n  \n  return {\n    id: `edge-${params.source}-${params.target}`,\n    source: params.source,\n    target: params.target,\n    label: `Edge ${params.source}-${params.target}`,\n    animated: true,\n  }\n}\n</script>\n\n<template>\n  <VueFlow :nodes=\"nodes\" :edges=\"edges\" :auto-connect=\"connector\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Handles with Unique IDs\nDESCRIPTION: Shows how to implement multiple handles of the same type (source or target) by assigning unique IDs to each handle for proper identification.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/handle.md#2025-04-21_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<!-- each of these handles needs a unique id since we're using two `source` type handles -->\n<Handle id=\"source-a\" type=\"source\" :position=\"Position.Right\" />\n<Handle id=\"source-b\" type=\"source\" :position=\"Position.Right\" />\n\n<!-- each of these handles needs a unique id since we're using two `target` type handles -->\n<Handle id=\"target-a\" type=\"target\" :position=\"Position.Left\" />\n<Handle id=\"target-b\" type=\"target\" :position=\"Position.Left\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Node Intersection Detection in Vue Flow\nDESCRIPTION: Example showing how to use getIntersectingNodes action to detect intersecting nodes during drag operations\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/packages/core/CHANGELOG.md#2025-04-21_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nconst { onNodeDrag, getIntersectingNodes, getNodes } = useVueFlow();\n\nonNodeDrag(({ node }) => {\n  const intersections = getIntersectingNodes(node).map((n) => n.id);\n\n  getNodes.value.forEach((n) => {\n    // highlight nodes that are intersecting with the dragged node\n    n.class = intersections.includes(n.id) ? \"highlight\" : \"\";\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Applying Node Changes Manually in Vue Flow\nDESCRIPTION: This snippet demonstrates how to apply node changes manually in Vue Flow using the applyNodeChanges function from the useVueFlow composable. It shows a basic example of handling changes in a custom onChange function.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/controlled-flow.md#2025-04-21_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { useVueFlow } from '@vue-flow/core'\n\nconst { applyNodeChanges, applyEdgeChanges } = useVueFlow();\n\nconst onChange = (changes) => {\n  // apply changes manually\n  applyNodeChanges(changes)\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Edge Updatability in Vue Flow\nDESCRIPTION: Demonstrates how to globally disable edge updating and override it for a specific edge. The example uses the 'edges-updatable' prop on VueFlow component and the 'updatable' property on individual edges.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/vue-flow/config.md#2025-04-21_snippet_12\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { ref } from 'vue'\nimport { VueFlow } from '@vue-flow/core'\n\nconst edgesUpdatable = ref(false)\n  \nconst nodes = ref([\n  { id: '1', position: { x: 250, y: 5 } },\n  { id: '2', position: { x: 100, y: 100 } },\n])\n  \nconst edges = ref([\n  { id: 'e1->2', source: '1', target: '2' },\n  { \n    id: 'e1->3',\n    // Overwrites global edges-updatable config\n    updatable: true, \n    source: '1', target: '3', \n  },\n])\n</script>\n<template>\n  <VueFlow :nodes=\"nodes\" :edges=\"edges\" :edges-updatable=\"edgesUpdatable\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Updating Node Internals for Dynamic Handles with Event Emission\nDESCRIPTION: Shows how to trigger a node internals update from within a custom node component by emitting the updateNodeInternals event when handle changes occur.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/handle.md#2025-04-21_snippet_9\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst emits = defineEmits(['updateNodeInternals'])\n\nconst onSomeEvent = () => {\n  emits('updateNodeInternals')\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Accessing Handle IDs in Connect Event Handler\nDESCRIPTION: Demonstrates how to access handle IDs when a connection is created between nodes using the onConnect event handler from useVueFlow.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/handle.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst { onConnect } = useVueFlow()\n\nonConnect(({ source, target, sourceHandle, targetHandle }) => {\n  console.log('source', source)\n  console.log('target', target)\n  // these are the handle ids of the source and target node\n  // if no id is specified these will be `null`, meaning the first handle of the necessary type will be used\n  console.log('sourceHandle', sourceHandle)\n  console.log('targetHandle', targetHandle)\n})\n```\n\n----------------------------------------\n\nTITLE: Using updateNodeData Action in Vue Flow\nDESCRIPTION: Example demonstrating how to use the updateNodeData action to modify node data with merge or replace options.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/packages/core/CHANGELOG.md#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst { updateNodeData } = useVueFlow();\n\nupdateNodeData(\"1\", { foo: \"bar\" });\n\n// or using a function to update the data\nupdateNodeData(\"1\", (data) => ({ ...data, foo: \"bar\" }));\n\n// passing options - `replace` will replace the data instead of merging it\nupdateNodeData(\"1\", { foo: \"bar\" }, { replace: true });\n```\n\n----------------------------------------\n\nTITLE: Adding New Features and Type Improvements to Vue Flow\nDESCRIPTION: Introduces generic types for nodes and edges, adds connectionRadius option, exports edge center utils and type guards, and implements autopan options.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/packages/core/CHANGELOG.md#2025-04-21_snippet_28\n\nLANGUAGE: markdown\nCODE:\n```\n- [#639](https://github.com/bcakmakoglu/vue-flow/pull/639) [`ad2b09f1`](https://github.com/bcakmakoglu/vue-flow/commit/ad2b09f18ea1183a7d2a8725d8a637fec3c93871) Thanks [@bcakmakoglu](https://github.com/bcakmakoglu)! - Allow setting `GraphNode` or `GraphEdge` type with a generic type\n\n- [#629](https://github.com/bcakmakoglu/vue-flow/pull/629) [`c7cfcec7`](https://github.com/bcakmakoglu/vue-flow/commit/c7cfcec70a91a9c1a3ed6233be35adba103e9226) Thanks [@bcakmakoglu](https://github.com/bcakmakoglu)! - Add `connectionRadius` option to global options and handle props.\n  You can use this option to set the radius at which a connection line will snap to the closest available handle.\n\n- [#613](https://github.com/bcakmakoglu/vue-flow/pull/613) [`7abd0bfd`](https://github.com/bcakmakoglu/vue-flow/commit/7abd0bfdf38a65b27f5fed7dc5a44f65dea732d6) Thanks [@bcakmakoglu](https://github.com/bcakmakoglu)! - Export edge center utils `getSimpleEdgeCenter` & `getBezierEdgeCenter` from core\n\n- [#634](https://github.com/bcakmakoglu/vue-flow/pull/634) [`b59dd6a7`](https://github.com/bcakmakoglu/vue-flow/commit/b59dd6a7256a1f0eb51beb7ea581383089b5e0d4) Thanks [@bcakmakoglu](https://github.com/bcakmakoglu)! - Add autopan options. Pans viewport on node drag and/or when drawing a connection line.\n\n  ### Usage\n\n  ```ts\n  useVueFlow({\n    autoPanOnNodeDrag: true,\n    autoPanOnConnect: true,\n  });\n  ```\n\n  ```vue\n  <VueFlow\n    v-model=\"elements\"\n    :autoPanOnNodeDrag=\"true\"\n    :autoPanOnConnect=\"true\"\n  />\n  ```\n\n- [#636](https://github.com/bcakmakoglu/vue-flow/pull/636) [`e1628ec6`](https://github.com/bcakmakoglu/vue-flow/commit/e1628ec6601e50a7bc212a2ece83877dee0e9e70) Thanks [@bcakmakoglu](https://github.com/bcakmakoglu)! - Export `isGraphNode` and `isGraphEdge` typeguards\n```\n\n----------------------------------------\n\nTITLE: Implementing Vue Flow Background Component\nDESCRIPTION: Example of how to implement the Background component within a Vue Flow application. Shows the basic setup with component imports, element management using ref, and template structure.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/packages/background/README.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { VueFlow } from '@vue-flow/core'\nimport { Background } from '@vue-flow/background'\nimport initialElements from './initial-elements'\n\n// some nodes and edges\nconst elements = ref(initialElements)\n</script>\n\n<template>\n  <VueFlow v-model=\"elements\" fit-view-on-init class=\"vue-flow-basic-example\">\n    <Background />\n  </VueFlow>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Removing Nodes Using Vue Flow API in Vue\nDESCRIPTION: This snippet shows how to use Vue Flow's API to remove nodes, which will emit changes. It uses the removeNodes function from the useVueFlow composable to remove a node, triggering Vue Flow's change detection.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/controlled-flow.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { ref } from 'vue'\nimport { useVueFlow } from '@vue-flow/core'\n\nconst nodes = ref([\n  {\n    id: '1',\n    position: { x: 0, y: 0 },\n    data: { label: 'Node 1' },\n  },\n])\n\n// this function *will* emit a change\nconst { removeNodes } = useVueFlow()\n\nremoveNodes('1')\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using isEdge Function with Vue Flow\nDESCRIPTION: Demonstrates how to use the isEdge function to check if an element is an edge and toggle CSS classes on edges specifically. This example creates a simple graph with two nodes connected by an edge, then provides a button to toggle between 'light' and 'dark' classes on the edges.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/utils/graph.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { VueFlow, isEdge } from '@vue-flow/core'\n\nconst elements = ref([\n  { id: '1', position: { x: 250, y: 5 }, },\n  { id: '2', position: { x: 100, y: 100 }, },\n\n  { id: 'e1-2', source: '1', target: '2', class: 'light' },\n])\n\nconst toggleClass = () => {\n  elements.value.forEach((el) => {\n    if (isEdge(el)) {\n      el.class = el.class === 'light' ? 'dark' : 'light'\n    }\n  })\n}\n</script>\n\n<template>\n  <VueFlow v-model=\"elements\">\n    <button @click=\"toggleClass\">Toggle classes</button>\n  </VueFlow>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using updateEdge Function with Vue Flow (Deprecated)\nDESCRIPTION: Shows the deprecated updateEdge function for updating an edge to a new source or target node. The example demonstrates handling the edge-update event and using updateEdge to modify connections. Note that using the updateEdge function from useVueFlow is now recommended.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/utils/graph.md#2025-04-21_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { VueFlow, updateEdge } from '@vue-flow/core'\n\nconst elements = ref([\n  { id: '1', label: 'Node 1', position: { x: 250, y: 5 } },\n  { id: '2', label: 'Node 2', position: { x: 100, y: 100 } },\n\n  { id: 'e1-2', source: '1', target: '2' },\n])\n\nconst onEdgeUpdate = ({ edge, connection }) => {\n  elements.value = updateEdge(edge, connection, elements.value)\n}\n</script>\n<template>\n  <VueFlow v-model=\"elements\" @edge-update=\"onEdgeUpdate\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Configuring Vue Flow with Custom Node Types\nDESCRIPTION: Example showing how to register and use custom node components in Vue Flow by mapping type names to component definitions.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/vue-flow/config.md#2025-04-21_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { ref } from 'vue'  \nimport { VueFlow } from '@vue-flow/core'\nimport CustomNode from './CustomNode.vue'\n\nconst nodeTypes = {\n  custom: CustomNode,\n}\n\nconst nodes = ref([\n  { \n    id: '1', \n    type: 'custom',\n    position: { x: 250, y: 5 },\n    data: { label: 'Node 1' },\n  },\n  { \n    id: '2', \n    position: { x: 100, y: 100 },\n    data: { label: 'Node 2' },\n  },\n])\n\nconst edges = ref([\n  { id: 'e1->2', source: '1', target: '2' },\n])\n</script>\n<template>\n  <VueFlow :nodes=\"nodes\" :edges=\"edges\" :node-types=\"nodeTypes\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Configuring Node Connectability in Vue Flow\nDESCRIPTION: Shows how to globally disable node connections and override it for a specific node. The example uses the 'nodes-connectable' prop on VueFlow component and the 'connectable' property on individual nodes.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/vue-flow/config.md#2025-04-21_snippet_10\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { ref } from 'vue'\nimport { VueFlow } from '@vue-flow/core'\n\nconst nodesConnectable = ref(false)\n  \nconst nodes = ref([\n  { id: '1', position: { x: 250, y: 5 } },\n  {\n    id: '2',\n    // This will overwrite the globally set option of nodes-connectable\n    connectable: true,\n    position: { x: 100, y: 100 }\n  },\n])\n</script>\n\n<template>\n  <VueFlow :nodes=\"nodes\" :nodes-connectable=\"nodesConnectable\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using fitView Function in Vue Flow\nDESCRIPTION: Shows how to use the fitView function to adjust the viewport so all nodes are visible. It accepts optional parameters for padding and whether to include hidden nodes.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/utils/instance.md#2025-04-21_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nvueFlowInstance.fitView({ padding: 0.25, includeHiddenNodes: true })\n```\n\n----------------------------------------\n\nTITLE: Using isNode Function with Vue Flow\nDESCRIPTION: Shows how to use the isNode function to check if an element is a node and toggle CSS classes specifically on nodes. This example creates a graph with two labeled nodes and provides a button to toggle between 'light' and 'dark' classes on the nodes.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/utils/graph.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { VueFlow, isNode } from '@vue-flow/core'\n\nconst elements = ref([\n  { id: '1', label: 'Node 1', position: { x: 250, y: 5 }, class: 'light' },\n  { id: '2', label: 'Node 2', position: { x: 100, y: 100 }, class: 'light' },\n\n  { id: 'e1-2', source: '1', target: '2' },\n])\n\nconst toggleClass = () => {\n  elements.value.forEach((el) => {\n    if (isNode(el)) {\n      el.class = el.class === 'light' ? 'dark' : 'light'\n    }\n  })\n}\n</script>\n\n<template>\n  <VueFlow v-model=\"elements\">\n    <button @click=\"toggleClass\">Toggle classes</button>\n  </VueFlow>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Scrollable Nodes in Vue Flow\nDESCRIPTION: This Vue component implements a scrollable node in Vue Flow. It uses the 'nowheel' class to enable scrolling within the node without triggering zoom or pan behaviors on the graph.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/node.md#2025-04-21_snippet_22\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { ref } from 'vue'\n\nconst listItems = ref(Array.from({ length: 100 }, (_, i) => i))  \n</script>\n\n<template>\n  <div class=\"custom-node-container\">\n    <ul class=\"nowheel\">\n      <li v-for=\"item in listItems\" :key=\"item\">Item {{ item }}</li>\n    </ul>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Smooth Step Path Edge in Vue Flow\nDESCRIPTION: Shows how to create a smooth step path edge with configurable border radius using getSmoothStepPath utility.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/utils/edge.md#2025-04-21_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<script lang=\"ts\" setup>\nimport { computed } from \"vue\"\nimport { BaseEdge, getSmoothStepPath, EdgeProps } from '@vue-flow/core'\n\nconst props = defineProps<EdgeProps>()\n\nconst edgePathParams = computed(() => getSmoothStepPath({ ...props, borderRadius: 8 }))\n</script>\n\n<template>\n  <BaseEdge :path=\"edgePathParams[0]\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Connection Line Slot in Vue Flow\nDESCRIPTION: Example showing how to place a custom connection line component using Vue Flow's template slot system. The code demonstrates the basic structure for implementing a custom connection line using the designated slot.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/examples/edges/connection-line.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"mt-6\">\n  <Repl example=\"connectionline\"></Repl>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using setViewport Function in Vue Flow\nDESCRIPTION: Shows how to use the setViewport function to manually set position and zoom level of the pane. This allows direct control over the viewport's state.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/utils/instance.md#2025-04-21_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nvueFlowInstance.setViewport({ x: 100, y: 100, zoom: 1.5 })\n```\n\n----------------------------------------\n\nTITLE: Implementing Vue Flow Controls Component\nDESCRIPTION: A complete example showing how to integrate the Controls component with Vue Flow. It imports the necessary components, styles, and sets up a basic flow with initial elements.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/packages/controls/README.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { VueFlow } from '@vue-flow/core'\nimport { Controls } from '@vue-flow/controls'\n\n// import default controls styles\nimport '@vue-flow/controls/dist/style.css'\n\nimport initialElements from './initial-elements'\n\n\n// some nodes and edges\nconst elements = ref(initialElements)\n</script>\n\n<template>\n  <VueFlow v-model=\"elements\" fit-view-on-init class=\"vue-flow-basic-example\">\n    <Controls />\n  </VueFlow>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Initializing Vue Flow Graph\nDESCRIPTION: Code snippet demonstrating how to initialize the Vue Flow graph, waiting for nodes to be ready before displaying.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nif (nodes.length) {\n  // Initialize graph\n  hideGraph.value = false;\n}\n```\n\n----------------------------------------\n\nTITLE: Using addEdge Function with Vue Flow (Deprecated)\nDESCRIPTION: Demonstrates the deprecated addEdge function for adding an edge to the elements array when a connection is made. The example shows how to handle the connect event and use addEdge to update the elements. Note that using the addEdges function from useVueFlow is now recommended.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/utils/graph.md#2025-04-21_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { ref } from 'vue'\nimport { VueFlow, addEdge } from '@vue-flow/core'\n\nconst elements = ref([\n  { id: '1', position: { x: 250, y: 5 } },\n  { id: '2', position: { x: 100, y: 100 } },\n\n  { id: 'e1-2', source: '1', target: '2' },\n])\n\nconst onConnect = (params) => {\n  addEdge(params, elements.value)\n}\n</script>\n<template>\n  <VueFlow v-model=\"elements\" @connect=\"onConnect\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Configuring Valid Nodes in Vue Flow\nDESCRIPTION: Example of correctly configured nodes in Vue Flow, showing how to set required properties like id, type, label, and position to avoid NODE_INVALID errors.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/troubleshooting.md#2025-04-21_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n// Here's an example of some valid node configurations\nconst nodes = ref([\n  { id: '1', type: 'input', label: 'Node 1', position: { x: 250, y: 5 } },\n  { id: '2', label: 'Node 2', position: { x: 100, y: 100 } },\n  { id: '3', type: 'output', label: 'Node 3', position: { x: 400, y: 200 } },\n  { id: '4', type: 'special', label: 'Node 4', position: { x: 400, y: 200 } },\n])\n```\n\n----------------------------------------\n\nTITLE: Implementing Vue Flow Background Component\nDESCRIPTION: Basic implementation example showing how to use the Background component within a VueFlow wrapper component\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/components/background.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { VueFlow } from '@vue-flow/core'\nimport { Background } from '@vue-flow/background'\n</script>\n\n<template>\n  <VueFlow>\n    <Background />\n  </VueFlow>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Adjusting Handle Positions with Relative Positioning\nDESCRIPTION: Demonstrates how to adjust handle positions using a container with relative positioning to control where handles appear on a node.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/handle.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div>\n    <span>{{ data.label }}</span>\n\n    <div style=\"position: relative; padding: 10px\">\n      <Handle type=\"source\" :position=\"Position.Right\" />\n\n\n      <Handle type=\"target\" :position=\"Position.Left\" />\n    </div>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Simple Bezier Path Edge in Vue Flow\nDESCRIPTION: Demonstrates the implementation of a simple bezier path edge without handle curvature using getSimpleBezierPath utility.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/utils/edge.md#2025-04-21_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script lang=\"ts\" setup>\nimport { computed } from \"vue\"\nimport { BaseEdge, getSimpleBezierPath, EdgeProps } from '@vue-flow/core'\n\nconst props = defineProps<EdgeProps>()\n\nconst edgePathParams = computed(() => getSimpleBezierPath(props))\n</script>\n\n<template>\n  <BaseEdge :path=\"edgePathParams[0]\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Setting up Vue Flow with Initial Nodes\nDESCRIPTION: Basic setup of a Vue Flow component with reference to initial nodes, providing the foundation for using resizable nodes.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/components/node-resizer.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { ref } from 'vue'  \nimport { VueFlow } from '@vue-flow/core'\nimport initialNodes from './initialNodes'\n\n// some nodes and edges\nconst nodes = ref(initialNodes)\n</script>\n\n<template>\n  <VueFlow :nodes=\"nodes\">\n    <template #node-custom=\"nodeProps\">\n      <CustomNode :data=\"nodeProps.data\"  />\n    </template>\n  </VueFlow>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Setting Connection Mode to Strict in Vue Flow\nDESCRIPTION: Shows how to configure Vue Flow to use strict connection mode, which only allows connections between source and target handles, preventing source-to-source or target-to-target connections.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/handle.md#2025-04-21_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { ConnectionMode, VueFlow } from '@vue-flow/core'\n</script>\n\n<template>\n  <VueFlow :connection-mode=\"ConnectionMode.Strict\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Setting Up Valid Edge Connections in Vue Flow\nDESCRIPTION: Example showing how to correctly configure edges by properly setting source and target properties to connect nodes and avoid edge-related errors.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/troubleshooting.md#2025-04-21_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\n// Here's an example of some valid edge configurations\nconst edges = ref([\n  { id: 'e1-3', source: '1', target: '3' },\n  { id: 'e1-2', source: '1', target: '2' },\n  { id: 'e1-4', source: '1', target: '4' },\n])\n```\n\n----------------------------------------\n\nTITLE: Implementing MiniMap Node in Vue Flow\nDESCRIPTION: Example showing how to implement the MiniMap Node component within a Vue Flow MiniMap component. The component is passed as a child to the MiniMap component using a scoped slot.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/components/minimap-node.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <VueFlow>\n    <MiniMap>\n      <template #node-input=\"props\">\n        <MiniMapNode v-bind=\"props\" />\n      </template>\n    </MiniMap>\n  </VueFlow>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Disabling Default State Updates in Vue Flow\nDESCRIPTION: Example showing how to disable default state update handlers in Vue Flow to implement custom controlled flow behavior.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/vue-flow/config.md#2025-04-21_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <VueFlow :apply-default=\"false\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Straight Path Edge in Vue Flow\nDESCRIPTION: Demonstrates the implementation of a straight path edge using getStraightPath utility function.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/utils/edge.md#2025-04-21_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script lang=\"ts\" setup>\nimport { computed } from \"vue\"\nimport { BaseEdge, getStraightPath, EdgeProps } from '@vue-flow/core'\n\nconst props = defineProps<EdgeProps>()\n\nconst edgePathParams = computed(() => getStraightPath(props))\n</script>\n\n<template>\n  <BaseEdge :path=\"edgePathParams[0]\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Setting Up VueFlow with Custom Nodes\nDESCRIPTION: Basic setup of a Vue Flow component with custom node templates. This example imports the core VueFlow component and sets up a flow with initial elements.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/packages/node-toolbar/README.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { VueFlow } from '@vue-flow/core'\nimport initialElements from './initial-elements'\n\n// some nodes and edges\nconst elements = ref(initialElements)\n</script>\n\n<template>\n  <VueFlow v-model=\"elements\" fit-view-on-init>\n    <template #node-custom=\"nodeProps\">\n      <CustomNode :data=\"nodeProps.data\" :label=\"nodeProps.label\" />\n    </template>\n  </VueFlow>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Node Customization with Class and Style Properties\nDESCRIPTION: JavaScript example showing how to customize nodes by adding class names and style properties.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/theming.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst nodes = ref([\n  { \n    id: '1', \n    position: { x: 250, y: 5 },\n    data: { label: 'Node 1' },\n    \n    // Add a class name to the node\n    class: 'my-custom-node-class',\n    \n    // You can pass an object containing CSSProperties or CSS variables\n    style: { backgroundColor: 'green', width: '200px', height: '100px' },\n  },\n])\n```\n\n----------------------------------------\n\nTITLE: Using Vue Flow Controls Component\nDESCRIPTION: Example showing how to use the Controls component with Vue Flow, including importing the component and its styles.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/components/controls.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { VueFlow } from '@vue-flow/core'\nimport { Controls } from '@vue-flow/controls'\n\n// import default controls styles\nimport '@vue-flow/controls/dist/style.css'\n</script>\n\n<template>\n  <VueFlow>\n    <Controls />\n  </VueFlow>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing HandleConnectable Type Example in Vue Component\nDESCRIPTION: Example of using the HandleConnectable type to control connection behavior in a Vue component. Shows how to configure handles to accept single connections or use a callback function to determine connectability.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/packages/core/CHANGELOG.md#2025-04-21_snippet_37\n\nLANGUAGE: vue\nCODE:\n```\n<script lang=\"ts\" setup>\nimport { Handle, HandleConnectable } from \"@vue-flow/core\";\n\nconst handleConnectable: HandleConnectable = (node, connectedEdges) => {\n  console.log(node, connectedEdges);\n  return true;\n};\n</script>\n<template>\n  <!-- single connection -->\n  <Handle type=\"target\" position=\"left\" connectable=\"single\" />\n  <div>Custom Node</div>\n  <!-- cb -->\n  <Handle id=\"a\" position=\"right\" :connectable=\"handleConnectable\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Change Handling in Vue Flow\nDESCRIPTION: This snippet demonstrates how to disable automatic change handling in Vue Flow by setting the applyDefault prop to false. This allows for manual control over changes in the flow.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/controlled-flow.md#2025-04-21_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <VueFlow :nodes=\"nodes\" :edges=\"edges\" :apply-default=\"false\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Rendering Vue Flow Example Component with Edge Updates\nDESCRIPTION: Example component implementation showing how to render a Vue Flow instance with updatable edges using ClientOnly and Suspense components.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/examples/edges/updatable-edge.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"mt-6\">\n  <ClientOnly>\n    <Suspense>\n      <Repl example=\"updateEdge\"></Repl>\n    </Suspense>\n  </ClientOnly>\n</div>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Implementation of Custom Edge Types\nDESCRIPTION: TypeScript version of custom edge types implementation with type definitions for edge data, events, and possible edge types. Includes type checking for edge definitions.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/edge.md#2025-04-21_snippet_10\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { ref } from 'vue'\nimport type { Edge } from '@vue-flow/core'\nimport { VueFlow } from '@vue-flow/core'\n\nimport CustomEdge from './CustomEdge.vue'\nimport SpecialEdge from './SpecialEdge.vue'\n\ninterface CustomData {\n    hello: string\n}\n\ntype CustomEdgeTypes = 'custom' | 'special'\n\ntype CustomEdge = Edge<CustomData, any, CustomEdgeTypes>\n\nexport const edges = ref<CustomEdge[]>([\n    {\n      id: 'e1-2',\n      source: '1',\n      target: '2',\n      type: 'custom',\n    },\n    {\n      id: 'e1-3',\n      source: '1',\n      target: '3',\n      type: 'special',\n    },\n    \n    {\n      id: 'e1-4',\n      source: '1',\n      target: '4',\n      type: 'not-defined',\n    }\n])\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using useHandleConnections Composable in Vue Flow\nDESCRIPTION: Example showing how to use the useHandleConnections composable to track and manage handle connections with callbacks.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/packages/core/CHANGELOG.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst connections = useHandleConnections({\n  // type of the handle you are looking for - accepts a `MaybeRefOrGetter<string>`\n  type: \"source\",\n\n  // the id of the handle you are looking for - accepts a `MaybeRefOrGetter<string | undefined> | undefined` [OPTIONAL]\n  id: \"a\",\n\n  // if not provided, the node id from the NodeIdContext is used - accepts a `MaybeRefOrGetter<string | undefined> | undefined`\n  nodeId: \"1\",\n\n  // a cb that is called when a new connection is added\n  onConnect: (params) => {\n    console.log(\"onConnect\", params);\n  },\n\n  // a cb that is called when a connection is removed\n  onDisconnect: (params) => {\n    console.log(\"onDisconnect\", params);\n  },\n});\n\nwatch(\n  connections,\n  (next) => {\n    console.log(\"connections\", next);\n  },\n  { immediate: true }\n);\n```\n\n----------------------------------------\n\nTITLE: Custom Node Styling with CSS Classes\nDESCRIPTION: Example of styling a custom node using CSS classes to create a purple theme with specific border and shadow effects.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/theming.md#2025-04-21_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n/* Use a purple theme for our custom node */\n.vue-flow__node-custom {\n    background: purple;\n    color: white;\n    border: 1px solid purple;\n    border-radius: 4px;\n    box-shadow: 0 0 0 1px purple;\n    padding: 8px;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Options API for Vue Flow Instance Access\nDESCRIPTION: Example of accessing Vue Flow instance methods in Options API by using template refs or listening to the onPaneReady event. This approach is recommended over deprecated utils like addEdge and updateEdge.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/packages/core/CHANGELOG.md#2025-04-21_snippet_32\n\nLANGUAGE: vue\nCODE:\n```\n<script>\nimport { VueFlow } from \"@vue-flow/core\";\n\nexport default defineComponent({\n  name: \"OptionsAPIExample\",\n  components: { VueFlow },\n  data() {\n    return {\n      vueFlow: null,\n      instance: null,\n      elements: [\n        {\n          id: \"1\",\n          type: \"input\",\n          label: \"Node 1\",\n          position: { x: 250, y: 5 },\n          class: \"light\",\n        },\n        {\n          id: \"2\",\n          label: \"Node 2\",\n          position: { x: 100, y: 100 },\n          class: \"light\",\n        },\n        {\n          id: \"3\",\n          label: \"Node 3\",\n          position: { x: 400, y: 100 },\n          class: \"light\",\n        },\n        {\n          id: \"4\",\n          label: \"Node 4\",\n          position: { x: 400, y: 200 },\n          class: \"light\",\n        },\n        { id: \"e1-2\", source: \"1\", target: \"2\", animated: true },\n        { id: \"e1-3\", source: \"1\", target: \"3\" },\n      ],\n    };\n  },\n  methods: {\n    // You can listen to `onPaneReady` to get the instance\n    onPaneReady(instance) {\n      instance.fitView();\n      this.instance = instance;\n    },\n    onConnect(params) {\n      // either use the instance you have saved in `onPaneReady`\n      this.instance?.addEdges([params]);\n\n      // or use the template-ref\n      this.$refs.vueFlow?.addEdges([params]);\n    },\n  },\n});\n</script>\n\n<template>\n  <VueFlow\n    v-model=\"elements\"\n    ref=\"vueFlow\"\n    class=\"vue-flow-basic-example\"\n    :default-zoom=\"1.5\"\n    :min-zoom=\"0.2\"\n    :max-zoom=\"4\"\n    :zoom-on-scroll=\"false\"\n    @connect=\"onConnect\"\n    @pane-ready=\"onPaneReady\"\n  />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Disabling Default State Updates in Vue Flow\nDESCRIPTION: Example showing how to disable default state updates in Vue Flow by setting the apply-default prop to false, which gives more control over state changes.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/vue-flow/state.md#2025-04-21_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n    <VueFlow :nodes=\"nodes\" :edges=\"edges\" :apply-default=\"false\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Basic MiniMap Implementation in Vue Flow\nDESCRIPTION: Example of importing and using the MiniMap component within a Vue Flow application. Includes imports for the component and its required styles.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/components/minimap.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { VueFlow } from '@vue-flow/core'\nimport { MiniMap } from '@vue-flow/minimap'\n\n// import default minimap styles\nimport '@vue-flow/minimap/dist/style.css'\n</script>\n\n<template>\n  <VueFlow>\n    <MiniMap />\n  </VueFlow>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Handling Node Dimensions in Vue Flow\nDESCRIPTION: Code snippet showing how to observe and update node dimensions in Vue Flow using watchEffect.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nwatchEffect(() => {\n  // Observe and update node dimensions\n})\n```\n\n----------------------------------------\n\nTITLE: Using updateNode Action in Vue Flow\nDESCRIPTION: Example demonstrating how to use the updateNode action to modify node properties including position and other attributes.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/packages/core/CHANGELOG.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst { updateNode } = useVueFlow();\n\nupdateNode(\"1\", { position: { x: 100, y: 100 } });\n\n// or using a function to update the node\nupdateNode(\"1\", (node) => ({ ...node, position: { x: 100, y: 100 } }));\n\n// passing options - `replace` will replace the node instead of merging it\nupdateNode(\n  \"1\",\n  { id: \"1\", label: \"Node 1\", position: { x: 100, y: 100 } },\n  { replace: true }\n);\n```\n\n----------------------------------------\n\nTITLE: Container Component with Vue Flow Initialization\nDESCRIPTION: Example of a container component that initializes a Vue Flow instance and makes it available to child components via Provide/Inject.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/vue-flow/state.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<!-- Container.vue -->\n<template>\n  <div>\n    <Sidebar />\n    <div class=\"wrapper\">\n      <VueFlow :nodes=\"nodes\" :edges=\"edges\" />\n    </div>\n  </div>\n</template>\n```\n\nLANGUAGE: vue\nCODE:\n```\n<script>\n// Container.vue\nimport { useVueFlow  } from '@vue-flow/core'\n\n// initialize a store instance in this context, so it is available when calling inject(VueFlow)\nuseVueFlow()\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Interactive MiniMap in Vue Flow\nDESCRIPTION: Example showing how to enable interactive features of the MiniMap by setting the pannable and zoomable props to allow panning on drag and zooming on scroll.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/components/minimap.md#2025-04-21_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <VueFlow>\n    <MiniMap pannable zoomable />\n  </VueFlow>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Importing Vue Flow CSS Styles\nDESCRIPTION: Required CSS imports for Vue Flow to function properly. Includes both the necessary base styles and the optional default theme styles.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/getting-started.md#2025-04-21_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n/* these are necessary styles for vue flow */\n@import '@vue-flow/core/dist/style.css';\n\n/* this contains the default theme, these are optional styles */\n@import '@vue-flow/core/dist/theme-default.css';\n```\n\n----------------------------------------\n\nTITLE: Setting Up Vue Flow with Custom Node\nDESCRIPTION: Example showing how to set up a Vue Flow component with custom nodes. This snippet initializes Vue Flow and prepares it to use custom node components.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/packages/node-resizer/README.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { VueFlow } from '@vue-flow/core'\nimport initialElements from './initial-elements'\n\n// some nodes and edges\nconst elements = ref(initialElements)\n</script>\n\n<template>\n  <VueFlow v-model=\"elements\" fit-view-on-init>\n    <template #node-custom=\"nodeProps\">\n      <CustomNode :data=\"nodeProps.data\" :label=\"nodeProps.label\" />\n    </template>\n  </VueFlow>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Embedding Interactive Resizable Node Example in Vue Flow Documentation\nDESCRIPTION: This code embeds a demonstration component called 'Repl' that shows an example of the resizable node functionality in Vue Flow. The example is referenced by the name 'resizable'.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/examples/nodes/node-resizer.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"mt-6\">\n  <Repl example=\"resizable\"></Repl> \n</div>\n```\n\n----------------------------------------\n\nTITLE: Handling Vue Flow Errors with Custom Error Handler\nDESCRIPTION: Example demonstrating how to implement custom error handling in Vue Flow using the onError event and isErrorOfType utility to handle specific error types.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/troubleshooting.md#2025-04-21_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<script lang=\"ts\" setup>\nimport { isErrorOfType, ErrorCode, useVueFlow, VueFlowError, VueFlow } from '@vue-flow/core'\n\nconst { onError } = useVueFlow()\n\nonError(handleError)\n\nfunction handleError(error: VueFlowError) {\n  if (isErrorOfType(error, ErrorCode.NODE_INVALID)) {\n    const [nodeId] = error.args\n    // handle the error\n  }\n}\n</script>\n\n<template>\n  <VueFlow @error=\"handleError\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using the Zoom Pane Slot in Vue Flow\nDESCRIPTION: This example shows how to use the zoom-pane slot to add elements that will scale and move with the viewport. Elements placed in this slot will be affected by zoom and pan operations.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/vue-flow/slots.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <VueFlow>\n    <template #zoom-pane>\n      <div>Some element inside the zoom pane</div>\n    </template>\n  </VueFlow>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Node Event Handlers using useVueFlow in Vue\nDESCRIPTION: This snippet demonstrates how to use the useVueFlow composable to bind listeners to node event handlers in Vue Flow. It includes handlers for drag, click, and mouse events.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/node.md#2025-04-21_snippet_19\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { ref } from 'vue'  \nimport { VueFlow, useVueFlow } from '@vue-flow/core'\n\n// useVueFlow provides access to the event handlers\nconst { \n  onNodeDragStart, \n  onNodeDrag,\n  onNodeDragStop, \n  onNodeClick, \n  onNodeDoubleClick, \n  onNodeContextMenu, \n  onNodeMouseEnter, \n  onNodeMouseLeave, \n  onNodeMouseMove \n} = useVueFlow()\n  \nconst nodes = ref([\n  {\n    id: '1',\n    data: { label: 'Node 1' },\n    position: { x: 50, y: 50 },\n  },\n])\n  \n// bind listeners to the event handlers\nonNodeDragStart((event) => {\n  console.log('Node drag started', event)\n})\n\nonNodeDrag((event) => {\n  console.log('Node dragged', event)\n})\n\nonNodeDragStop((event) => {\n  console.log('Node drag stopped', event)\n})\n  \n// ... and so on  \n</script>\n\n<template>\n  <VueFlow :nodes=\"nodes\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Fixing Edge Updates and Viewport Handling in Vue Flow\nDESCRIPTION: Prevents unwanted edge updates and improves viewport handling for hidden nodes and default values.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/packages/core/CHANGELOG.md#2025-04-21_snippet_22\n\nLANGUAGE: markdown\nCODE:\n```\n- [#663](https://github.com/bcakmakoglu/vue-flow/pull/663) [`05a3e26e`](https://github.com/bcakmakoglu/vue-flow/commit/05a3e26e58ba19864ceb3858412f67d6af3099b7) Thanks [@bcakmakoglu](https://github.com/bcakmakoglu)! - Avoid triggering edge update when mouse button is not left\n\n- [#658](https://github.com/bcakmakoglu/vue-flow/pull/658) [`b8ad4458`](https://github.com/bcakmakoglu/vue-flow/commit/b8ad4458c3efddabf8bdc8bb229bed16f5aaf63c) Thanks [@bcakmakoglu](https://github.com/bcakmakoglu)! - When `includeHiddenNodes` is false, exclude hidden nodes when using fitView\n\n- [#660](https://github.com/bcakmakoglu/vue-flow/pull/660) [`0dbabfc5`](https://github.com/bcakmakoglu/vue-flow/commit/0dbabfc58b63c2776f56e916f40abcb7d3dc2ecb) Thanks [@bcakmakoglu](https://github.com/bcakmakoglu)! - Use default values when defaultViewport vals are missing\n```\n\n----------------------------------------\n\nTITLE: Checking Node Intersection with Area in Vue Flow\nDESCRIPTION: Example demonstrating how to check if a node intersects with a specified area\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/packages/core/CHANGELOG.md#2025-04-21_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nconst { onNodeDrag, isNodeIntersecting } = useVueFlow();\n\nonNodeDrag(({ node }) => {\n  // highlight the node if it is intersecting with the given area\n  node.class = isNodeIntersecting(node, {\n    x: 0,\n    y: 0,\n    width: 100,\n    height: 100,\n  })\n    ? \"highlight\"\n    : \"\";\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Edge Label with EdgeLabelRenderer\nDESCRIPTION: Example showing how to create a custom edge label with HTML elements using EdgeLabelRenderer component\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/packages/core/CHANGELOG.md#2025-04-21_snippet_36\n\nLANGUAGE: vue\nCODE:\n```\n<script lang=\"ts\" setup>\nimport type { EdgeProps, Position } from \"@vue-flow/core\";\nimport { EdgeLabelRenderer, getBezierPath, useVueFlow } from \"@vue-flow/core\";\nimport type { CSSProperties } from \"vue\";\n\ninterface CustomEdgeProps<T = any> extends EdgeProps<T> {\n  id: string;\n  sourceX: number;\n  sourceY: number;\n  targetX: number;\n  targetY: number;\n  sourcePosition: Position;\n  targetPosition: Position;\n  data: T;\n  markerEnd: string;\n  style: CSSProperties;\n}\n\nconst props = defineProps<CustomEdgeProps>();\n\nconst { removeEdges } = useVueFlow();\n\nconst path = $computed(() => getBezierPath(props));\n</script>\n\n<script lang=\"ts\">\nexport default {\n  inheritAttrs: false,\n};\n</script>\n\n<template>\n  <path\n    :id=\"id\"\n    :style=\"style\"\n    class=\"vue-flow__edge-path\"\n    :d=\"path[0]\"\n    :marker-end=\"markerEnd\"\n  />\n\n  <EdgeLabelRenderer>\n    <div\n      :style=\"{\n        pointerEvents: 'all',\n        position: 'absolute',\n        transform: `translate(-50%, -50%) translate(${path[1]}px,${path[2]}px)`,\n      }\"\n      class=\"nodrag nopan\"\n    >\n      <button class=\"edgebutton\" @click=\"removeEdges([id])\">×</button>\n    </div>\n  </EdgeLabelRenderer>\n</template>\n\n<style>\n.edgebutton {\n  border-radius: 999px;\n  cursor: pointer;\n}\n.edgebutton:hover {\n  box-shadow: 0 0 0 2px pink, 0 0 0 4px #f05f75;\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Updating Vue Flow Configuration with Reactive Props\nDESCRIPTION: Example showing how to dynamically update Vue Flow configuration by toggling the nodesDraggable property through reactive state management.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/vue-flow/config.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nconst nodesDraggable = ref(false)\n\nconst toggleNodesDraggable = () => {\n  // toggle the state\n  nodesDraggable.value = !nodesDraggable.value\n}\n</script>\n<template>\n  <VueFlow :nodes-draggable=\"nodesDraggable\">...</VueFlow>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Setting Node Extent in Vue Flow\nDESCRIPTION: Illustrates how to set the area in which nodes can be moved, both globally and for a specific node. The example uses the 'extent' property on individual nodes.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/vue-flow/config.md#2025-04-21_snippet_11\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { ref } from 'vue'\nimport { VueFlow } from '@vue-flow/core'\n\nconst nodes = ref([\n  { id: '1', position: { x: 250, y: 5 } },\n  {\n    id: '2',\n    extent: [[-100, -100], [100, 100]],\n    position: { x: 100, y: 100 }\n  },\n])\n</script>\n\n<template>\n  <VueFlow :nodes=\"nodes\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Updating Node Positioning in Vue Flow\nDESCRIPTION: Uses snapGrid values to clamp initial node positions for more precise placement.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/packages/core/CHANGELOG.md#2025-04-21_snippet_19\n\nLANGUAGE: markdown\nCODE:\n```\n- [#695](https://github.com/bcakmakoglu/vue-flow/pull/695) [`616e795`](https://github.com/bcakmakoglu/vue-flow/commit/616e7951e51c112f29107621588a29b60a7d6e85) Thanks [@bcakmakoglu](https://github.com/bcakmakoglu)! - Use snapGrid values to clamp initial node positions\n```\n\n----------------------------------------\n\nTITLE: Using Node Intersection Events in Vue Flow\nDESCRIPTION: Example showing how to handle intersection events directly from node drag callbacks\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/packages/core/CHANGELOG.md#2025-04-21_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nonNodeDrag(({ intersections }) => {\n  getNodes.value.forEach((n) => {\n    n.class = intersections?.some((i) => i.id === n.id) ? \"highlight\" : \"\";\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Importing All Vue Flow Features in a Vue Component\nDESCRIPTION: Example showing how to import the complete Vue Flow package which exports all features including core functionality and additional components.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/packages/core/CHANGELOG.md#2025-04-21_snippet_39\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n// `vueflow` pkg exports all features, i.e. core + additional components\nimport { VueFlow, Background, MiniMap, Controls } from \"vueflow\";\n</script>\n\n<template>\n  <VueFlow>\n    <Background />\n    <MiniMap />\n    <Controls />\n  </VueFlow>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing EdgeLabelRenderer in Vue Template\nDESCRIPTION: This snippet shows how to use the EdgeLabelRenderer component in a Vue template. It demonstrates the proper syntax for closing the component tag.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/getting-started.md#2025-04-21_snippet_10\n\nLANGUAGE: vue\nCODE:\n```\n  </EdgeLabelRenderer>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Edge Types Object Implementation\nDESCRIPTION: Shows how to define edge types using an object prop with markRaw to prevent reactivity warnings. Demonstrates an alternative approach to template slots.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/edge.md#2025-04-21_snippet_11\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { markRaw } from 'vue'\nimport CustomEdge from './CustomEdge.vue'\n\nconst edgeTypes = {\n  custom: markRaw(CustomEdge),\n}\n\nconst nodes = ref([\n  {\n    id: '1',\n    position: { x: 50, y: 50 },\n    data: { label: 'Node 1', },\n  },\n  {\n    id: '2',\n    position: { x: 50, y: 250 },\n    data: { label: 'Node 2', },\n  },\n])\n\nconst edges = ref([\n  {\n    id: 'e1->2',\n    type: 'custom',\n    source: '1',\n    target: '2',\n  },\n])\n</script>\n<template>\n  <VueFlow :nodes=\"nodes\" :edges=\"edges\" :edgeTypes=\"edgeTypes\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Node-Specific CSS Variable Override\nDESCRIPTION: JavaScript example demonstrating how to override CSS variables for specific nodes.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/theming.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst nodes = ref([\n  { \n    id: '1', \n    position: { x: 100, y: 100 }, \n    data: { label: 'Node 1' },\n    /* Overriding the `--vf-node-color` variable to change node border, box-shadow and handle color */\n    style: { '--vf-node-color': 'blue' } \n  },\n])\n```\n\n----------------------------------------\n\nTITLE: Simplified useHandle Hook Usage in Vue Flow\nDESCRIPTION: Comparison of the old and new useHandle hook usage in Vue Flow, demonstrating the simplified approach for handling node connections.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/packages/core/CHANGELOG.md#2025-04-21_snippet_40\n\nLANGUAGE: vue\nCODE:\n```\n<!-- Before -->\n<script lang=\"ts\" setup>\nimport { useHandle, NodeId } from \"@vue-flow/core\";\n\nconst nodeId = inject(NodeId);\n\nconst handleId = \"my-handle\";\n\nconst type = \"source\";\n\nconst isValidConnection = () => true;\n\nconst { onMouseDown } = useHandle();\n\nconst onMouseDownHandler = (event: MouseEvent) => {\n  onMouseDown(\n    event,\n    handleId,\n    nodeId,\n    type === \"target\",\n    isValidConnection,\n    undefined\n  );\n};\n</script>\n\n<template>\n  <div @mousedown=\"onMouseDownHandler\" />\n</template>\n```\n\nLANGUAGE: vue\nCODE:\n```\n<!-- After -->\n<script lang=\"ts\" setup>\nimport { useHandle, useNode } from \"@vue-flow/core\";\n\nconst { nodeId } = useNode();\n\nconst handleId = \"my-handle\";\n\nconst type = \"source\";\n\nconst isValidConnection = () => true;\n\nconst { onMouseDown } = useHandle({\n  nodeId,\n  handleId,\n  isValidConnection,\n  type,\n});\n</script>\n\n<template>\n  <div @mousedown=\"onMouseDown\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using useNodeId Composable in Vue Flow\nDESCRIPTION: Example showing how to use the new useNodeId composable to get the current node ID.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/packages/core/CHANGELOG.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst nodeId = useNodeId();\n\nconsole.log(\"nodeId\", nodeId); // '1'\n```\n\n----------------------------------------\n\nTITLE: Creating useNode Composable in Vue Flow\nDESCRIPTION: This feature introduces a new 'useNode' composable, likely for managing node-related functionality in the Vue Flow project.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/CHANGELOG.md#2025-04-21_snippet_8\n\nLANGUAGE: Vue\nCODE:\n```\n- Add useNode composable ([70871df](70871df469221daaef393ddefc17b7907d39f43c))\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Node with Node Toolbar\nDESCRIPTION: A TypeScript Vue component that implements a custom node with an attached NodeToolbar. It demonstrates how to use the NodeToolbar component with visibility controls, positioning, and custom actions.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/components/node-toolbar.md#2025-04-21_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script lang=\"ts\" setup>\nimport { Handle, Position } from '@vue-flow/core'\nimport { NodeToolbar } from '@vue-flow/node-toolbar'\n\ninterface NodeData {\n  toolbarVisible: boolean\n  toolbarPosition: Position\n}\n\ninterface Props {\n  data: NodeData\n  label: string\n}\n\ndefineProps<Props>()\n</script>\n\n<template>\n  <NodeToolbar :is-visible=\"data.toolbarVisible\" :position=\"data.toolbarPosition\">\n    <button>delete</button>\n    <button>copy</button>\n    <button>expand</button>\n  </NodeToolbar>\n\n  <Handle type=\"target\" :position=\"Position.Left\" />\n  <Handle type=\"source\" :position=\"Position.Right\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Vue Flow Component Styling\nDESCRIPTION: Direct styling of Vue Flow component using class and style attributes.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/theming.md#2025-04-21_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<VueFlow\n  :nodes=\"nodes\"\n  :edges=\"edges\"\n  class=\"my-diagram-class\"  \n  :style=\"{ background: 'red' }\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Fixing Valid Connection Function Parameters in Vue Flow\nDESCRIPTION: Ensures all necessary parameters are passed to the valid connection function.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/packages/core/CHANGELOG.md#2025-04-21_snippet_27\n\nLANGUAGE: markdown\nCODE:\n```\n- [#641](https://github.com/bcakmakoglu/vue-flow/pull/641) [`f5eaa4cc`](https://github.com/bcakmakoglu/vue-flow/commit/f5eaa4cc534008731f2ffa90fe8f4cdbeabc238b) Thanks [@bcakmakoglu](https://github.com/bcakmakoglu)! - Pass missing valid connection function params\n```\n\n----------------------------------------\n\nTITLE: Using useNodesData Composable in Vue Flow\nDESCRIPTION: Examples showing different ways to use the useNodesData composable including single node, multiple nodes, and type assertions.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/packages/core/CHANGELOG.md#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Node } from \"@vue-flow/core\";\n\ninterface Data {\n  foo: string;\n  bar: string;\n}\n\ntype MyNode = Node<CustomNodeData>;\n\nconst nodeId = \"1\";\n\nconst data = useNodesData([nodeId], (node): node is MyNode => {\n  return \"foo\" in node.data && \"bar\" in node.data;\n});\n\nconsole.log(data.value); // '[{ /* foo: string; bar: string */ }]'\n```\n\n----------------------------------------\n\nTITLE: Updating Edge Renderer in Vue Flow\nDESCRIPTION: This code snippet updates the edge-renderer component to react to edge updates, addressing a bug in the Vue Flow project.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/CHANGELOG.md#2025-04-21_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n- Edge-renderer to update on edge updates ([8c0982a](8c0982a7f3ad715236c074d53f8d5a1a3e3d0e81))\n```\n\n----------------------------------------\n\nTITLE: Creating Hidden Handles in Vue Flow\nDESCRIPTION: Shows how to create invisible handles by setting opacity to 0, maintaining the connection functionality while hiding the visual element.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/handle.md#2025-04-21_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<Handle type=\"source\" :position=\"Position.Right\" style=\"opacity: 0\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing useEdge Composable in Vue Flow\nDESCRIPTION: This feature adds a new 'useEdge' composable, probably for managing edge-related functionality in the Vue Flow project.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/CHANGELOG.md#2025-04-21_snippet_9\n\nLANGUAGE: Vue\nCODE:\n```\n- Add useEdge composable ([44a65b3](44a65b3bbb57cc33b7aec7a6c597b59fcbc00d7d))\n```\n\n----------------------------------------\n\nTITLE: Adding Error Handling and Connection Status Features to Vue Flow\nDESCRIPTION: Introduces VueFlowError class for error handling and adds connectionStatus to connection lines for validating handles.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/packages/core/CHANGELOG.md#2025-04-21_snippet_24\n\nLANGUAGE: markdown\nCODE:\n```\n- [#654](https://github.com/bcakmakoglu/vue-flow/pull/654) [`99909f16`](https://github.com/bcakmakoglu/vue-flow/commit/99909f1660c337469abf7d6558be9de1b134074d) Thanks [@bcakmakoglu](https://github.com/bcakmakoglu)! - Add `VueFlowError` class which is used when throwing\n\n- [#649](https://github.com/bcakmakoglu/vue-flow/pull/649) [`47bc8280`](https://github.com/bcakmakoglu/vue-flow/commit/47bc8280075935e3047ebd26714b5516e0bb522f) Thanks [@bcakmakoglu](https://github.com/bcakmakoglu)! - Add `connectionStatus` to connection lines, which can be used to check if the connection line is used on a valid handle.\n```\n\n----------------------------------------\n\nTITLE: Improving Handle and Connection Management in Vue Flow\nDESCRIPTION: Enhances pointer event handling for handles and stores connection status for actions.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/packages/core/CHANGELOG.md#2025-04-21_snippet_23\n\nLANGUAGE: markdown\nCODE:\n```\n- [#655](https://github.com/bcakmakoglu/vue-flow/pull/655) [`3d958dfe`](https://github.com/bcakmakoglu/vue-flow/commit/3d958dfe4f36702dd89ee456369c6090e22163e3) Thanks [@bcakmakoglu](https://github.com/bcakmakoglu)! - Check if prev closest handle exists in pointer up handler\n\n- [#656](https://github.com/bcakmakoglu/vue-flow/pull/656) [`b3796a66`](https://github.com/bcakmakoglu/vue-flow/commit/b3796a66ea66386484e7b56726c9f40f69a4556f) Thanks [@bcakmakoglu](https://github.com/bcakmakoglu)! - Store connectionStatus when using connection actions\n```\n\n----------------------------------------\n\nTITLE: Updating Edge in Vue Flow\nDESCRIPTION: Code snippet showing how to update an edge in Vue Flow, with an option to avoid replacing the edge ID when updating.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nupdateEdge({ shouldReplaceId = true }) {\n  // Edge update logic\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Initial Elements for Vue Flow with Pathfinding Edge\nDESCRIPTION: A JavaScript configuration file defining initial elements for a Vue Flow diagram. It includes a pathfinding edge and two nodes, demonstrating how to set up the graph structure.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/packages/pathfinding-edge/README.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// initial-elements.js\nexport default [\n  {\n    id: 'e12',\n    source: '1',\n    target: '2',\n    label: 'Smart Edge',\n    style: { stroke: 'red' },\n    // assign pathfinding edge type\n    type: 'pathfinding'\n  },\n  {\n    id: '1',\n    label: 'Node 1',\n    position: {\n      x: 430,\n      y: 0,\n    },\n  },\n  {\n    id: '2',\n    label: 'Node 2',\n    position: {\n      x: 230,\n      y: 90,\n    },\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Adding Connection Actions to Store in Vue Flow\nDESCRIPTION: This feature introduces new connection actions to the store, likely for managing connections between nodes in the Vue Flow project.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/CHANGELOG.md#2025-04-21_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\n- Add connection actions to store ([b0c168f](b0c168fff71b1b1d6eaa89310b835c165352da9b))\n```\n\n----------------------------------------\n\nTITLE: Improving Fit View and Component Compatibility in Vue Flow\nDESCRIPTION: Enhances fit view functionality and adds compatibility mode for components. Fixes issues with connection line types and rendering.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/packages/core/CHANGELOG.md#2025-04-21_snippet_20\n\nLANGUAGE: markdown\nCODE:\n```\n- [#671](https://github.com/bcakmakoglu/vue-flow/pull/671) [`c47bc5ce`](https://github.com/bcakmakoglu/vue-flow/commit/c47bc5ceb2ea9c739be5eef3291c1312fdbce824) Thanks [@bcakmakoglu](https://github.com/bcakmakoglu)! - Fit view on init is now triggered as soon as node dimensions are updated for the first time\n\n- [#682](https://github.com/bcakmakoglu/vue-flow/pull/682) [`b08cb4d4`](https://github.com/bcakmakoglu/vue-flow/commit/b08cb4d45904c229d9ecda5e3cb477cbb7a6acaf) Thanks [@bcakmakoglu](https://github.com/bcakmakoglu)! - Add compat mode to components to avoid breaking when used with @vue/compat\n\n- [`03edd46c`](https://github.com/bcakmakoglu/vue-flow/commit/03edd46cef18b246cca061e554b469a1cfbefa16) Thanks [@bcakmakoglu](https://github.com/bcakmakoglu)! - Allow depr. connectionLineType to be null\n\n- [`03edd46c`](https://github.com/bcakmakoglu/vue-flow/commit/03edd46cef18b246cca061e554b469a1cfbefa16) Thanks [@bcakmakoglu](https://github.com/bcakmakoglu)! - Add missing straight type to connection line options\n\n- [`03edd46c`](https://github.com/bcakmakoglu/vue-flow/commit/03edd46cef18b246cca061e554b469a1cfbefa16) Thanks [@bcakmakoglu](https://github.com/bcakmakoglu)! - Fix connection line not rendering properly when destructuring slot props\n```\n\n----------------------------------------\n\nTITLE: Setting Node Extent with Parent Padding in Vue Flow\nDESCRIPTION: Example demonstrating how to configure nodes with parent extent and custom padding. The padding can be specified as a number array with up to four values (top, right, bottom, left) that determine spacing from parent boundaries.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/packages/core/CHANGELOG.md#2025-04-21_snippet_31\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst nodes = ref([\n  {\n    id: \"4\",\n    label: \"Node 4\",\n    position: { x: 320, y: 200 },\n    style: {\n      backgroundColor: \"rgba(255, 0, 0, 0.7)\",\n      width: \"300px\",\n      height: \"300px\",\n    },\n  },\n  {\n    id: \"4a\",\n    label: \"Node 4a\",\n    position: { x: 15, y: 65 },\n    class: \"light\",\n    extent: {\n      range: \"parent\",\n      // apply 10 px padding to all four sides\n      padding: [10],\n    },\n    parentNode: \"4\",\n  },\n]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Connection Line in Vue Flow\nDESCRIPTION: Code snippet demonstrating how to pass connection line props using v-bind in Vue Flow.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n<connection-line v-bind=\"connectionLineProps\" />\n```\n\n----------------------------------------\n\nTITLE: Updating Edge Handling in Vue Flow\nDESCRIPTION: Fixes issues with edge connections, updates, and styling. Improves handling of deleted edges.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/packages/core/CHANGELOG.md#2025-04-21_snippet_21\n\nLANGUAGE: markdown\nCODE:\n```\n- [#680](https://github.com/bcakmakoglu/vue-flow/pull/680) [`70ae3410`](https://github.com/bcakmakoglu/vue-flow/commit/70ae341062072acab234ce9ee88b33d2866ef7b3) Thanks [@bcakmakoglu](https://github.com/bcakmakoglu)! - Fix connections for handles that are bigger than the specified connection radius\n\n- [#680](https://github.com/bcakmakoglu/vue-flow/pull/680) [`70ae3410`](https://github.com/bcakmakoglu/vue-flow/commit/70ae341062072acab234ce9ee88b33d2866ef7b3) Thanks [@bcakmakoglu](https://github.com/bcakmakoglu)! - Always emit edge update event\n\n- [#681](https://github.com/bcakmakoglu/vue-flow/pull/681) [`d73995aa`](https://github.com/bcakmakoglu/vue-flow/commit/d73995aae1b14ea5cad4ee3764cff558344bcb34) Thanks [@bcakmakoglu](https://github.com/bcakmakoglu)! - Set `user-select: none` for edge labels\n\n- [#668](https://github.com/bcakmakoglu/vue-flow/pull/668) [`d39c63e5`](https://github.com/bcakmakoglu/vue-flow/commit/d39c63e5f3ec54fb1de10d84a7271546d1b7e3e8) Thanks [@bcakmakoglu](https://github.com/bcakmakoglu)! - Avoid re-rendering edges that have been deleted\n```\n\n----------------------------------------\n\nTITLE: Edge Path Calculation: Before and After Comparison in Vue Flow\nDESCRIPTION: Shows how edge path calculations have changed in Vue Flow. Previously, separate functions were needed for path strings and center positions. Now, a single function returns both the path string and center coordinates.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/packages/core/CHANGELOG.md#2025-04-21_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\n// Before:\nimport { getBezierPath, getEdgeCenter } from \"@braks/vue-flow\";\n\n// used to return the path string only\nconst edgePath = computed(() => getBezierPath(pathParams));\n\n// was necessary to get the centerX, centerY of an edge\nconst centered = computed(() => getEdgeCenter(centerParams));\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// After:\nimport { getBezierPath } from \"@vue-flow/core\";\n\n// returns the path string and the center positions\nconst [path, centerX, centerY] = computed(() => getBezierPath(pathParams));\n```\n\n----------------------------------------\n\nTITLE: Previously vs Now Pattern for useNodesData in Vue Flow\nDESCRIPTION: Demonstrates the breaking change in useNodesData function return format. Previously it returned only the data object, now it returns an object with id, type, and data properties.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/packages/core/CHANGELOG.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst nodesData = useNodesData(nodeIds);\n\n// Previously\nnodesData.forEach((data) => {\n  // ...\n});\n\n// Now\nnodesData.forEach(({ id, type, data }) => {\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Handle Classes and Connection Line Behavior in Vue Flow\nDESCRIPTION: Adds new class names for handles, improves connection line drawing, and fixes dragging behavior for non-draggable nodes.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/packages/core/CHANGELOG.md#2025-04-21_snippet_25\n\nLANGUAGE: markdown\nCODE:\n```\n- [#650](https://github.com/bcakmakoglu/vue-flow/pull/650) [`aaf46dc2`](https://github.com/bcakmakoglu/vue-flow/commit/aaf46dc22ca8daa507e8e7eb7c3646bde158d8bc) Thanks [@bcakmakoglu](https://github.com/bcakmakoglu)! - Add `valid` and `connecting` class names instead of `vue-flow__handle-valid` and `vue-flow__handle-connecting` (old class names kept for backwards compatibility but will be removed in the future)\n\n- [#653](https://github.com/bcakmakoglu/vue-flow/pull/653) [`64e9dc3c`](https://github.com/bcakmakoglu/vue-flow/commit/64e9dc3c1eb00da2775f8d6e2d05d5fdbd6b4cdc) Thanks [@bcakmakoglu](https://github.com/bcakmakoglu)! - Draw connection lines to opposite position\n\n- [#651](https://github.com/bcakmakoglu/vue-flow/pull/651) [`c0d172be`](https://github.com/bcakmakoglu/vue-flow/commit/c0d172bee56b95f3e5f2fc72f16836d0e3e16a91) Thanks [@bcakmakoglu](https://github.com/bcakmakoglu)! - When a node is not draggable, avoid dragging it when using a selection box\n\n- [#650](https://github.com/bcakmakoglu/vue-flow/pull/650) [`aaf46dc2`](https://github.com/bcakmakoglu/vue-flow/commit/aaf46dc22ca8daa507e8e7eb7c3646bde158d8bc) Thanks [@bcakmakoglu](https://github.com/bcakmakoglu)! - Fix ios connection error\n```\n\n----------------------------------------\n\nTITLE: Updating Edge Type Support in getConnectedEdges Function\nDESCRIPTION: Allows passing regular edge type to the getConnectedEdges function for improved flexibility.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/packages/core/CHANGELOG.md#2025-04-21_snippet_12\n\nLANGUAGE: Markdown\nCODE:\n```\n- [#863](https://github.com/bcakmakoglu/vue-flow/pull/863) [`c3991c75`](https://github.com/bcakmakoglu/vue-flow/commit/c3991c759eec40cf42c8b93d46b2b60dca9e5918) Thanks [@bcakmakoglu](https://github.com/bcakmakoglu)! - Allow passing regular edge type to `getConnectedEdges`\n```\n\n----------------------------------------\n\nTITLE: Implementing Node Position Change Event in Vue Flow\nDESCRIPTION: This feature adds a 'from' position to the position change event, enhancing position tracking functionality in the Vue Flow project.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/CHANGELOG.md#2025-04-21_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n- Add from position to position change event ([a29d7c8](a29d7c86f050bcdf976577699b37df76fcef2d71))\n```\n\n----------------------------------------\n\nTITLE: Implementing Vue Flow with Pathfinding Edge in Vue 3\nDESCRIPTION: A Vue 3 component example demonstrating how to use Vue Flow with the Pathfinding Edge. It imports necessary components, sets up initial elements, and renders a VueFlow component with a custom edge template.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/packages/pathfinding-edge/README.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { VueFlow, useVueFlow } from '@vue-flow/core'\nimport { PathFindingEdge } from '@vue-flow/pathfinding-edge'\nimport initialElements from './initial-elements'\n\nconst elements = ref(initialElements)\n\n// create a new context so we can fetch nodes\nconst { getNodes } = useVueFlow()\n</script>\n<template>\n  <div style=\"height: 300px\">\n    <VueFlow v-model=\"elements\">\n      <template #edge-pathfinding=\"props\">\n        <PathFindingEdge v-bind=\"props\" :nodes=\"getNodes\" />\n      </template>\n    </VueFlow>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Limiting Auto-Pan When Dragging Nodes\nDESCRIPTION: Restricts auto-pan when dragging a node by translate extent to prevent nodes from being dragged infinitely into the background.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/packages/core/CHANGELOG.md#2025-04-21_snippet_14\n\nLANGUAGE: Markdown\nCODE:\n```\n- [#860](https://github.com/bcakmakoglu/vue-flow/pull/860) [`cc158716`](https://github.com/bcakmakoglu/vue-flow/commit/cc158716b38634861f6a8a9cb30b5e2ed3c9a3d6) Thanks [@bcakmakoglu](https://github.com/bcakmakoglu)! - Limit auto-pan when dragging a node by translate extent, so nodes cannot be dragged infinitely into the background.\n```\n\n----------------------------------------\n\nTITLE: Vue Flow Connection Radius Demo Template\nDESCRIPTION: Template code showing the embedded example of connection radius functionality using a Repl component.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/examples/edges/connection-radius.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"mt-6\">\n  <Repl example=\"snappable\"></Repl>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Vue Flow MiniMap Component in a Vue Application\nDESCRIPTION: Demonstrates a complete example of how to integrate the MiniMap component into a Vue Flow application, including imports, style references, and component usage within a template.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/packages/minimap/README.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { VueFlow } from '@vue-flow/core'\nimport { MiniMap } from '@vue-flow/minimap'\n\n// import default minimap styles\nimport '@vue-flow/minimap/dist/style.css'\n\nimport initialElements from './initial-elements'\n\n// some nodes and edges\nconst elements = ref(initialElements)\n</script>\n\n<template>\n  <VueFlow v-model=\"elements\" fit-view-on-init class=\"vue-flow-basic-example\">\n    <MiniMap />\n  </VueFlow>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Fixing Edge Options Access in Vue Flow\nDESCRIPTION: Corrects the access of default edge options when passing options to the connect event.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/packages/core/CHANGELOG.md#2025-04-21_snippet_26\n\nLANGUAGE: markdown\nCODE:\n```\n- [#643](https://github.com/bcakmakoglu/vue-flow/pull/643) [`210b702b`](https://github.com/bcakmakoglu/vue-flow/commit/210b702b5062a8c54883a866bd950d7e0ca6f314) Thanks [@bcakmakoglu](https://github.com/bcakmakoglu)! - Properly access default edge options ref when passing options to the `connect` event\n```\n\n----------------------------------------\n\nTITLE: Embedding Vue Flow Basic Example Repl Component in HTML\nDESCRIPTION: This code snippet embeds a Vue Flow example using the Repl component with the 'basic' example parameter. The component is placed within a div container with a top margin class.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/examples/index.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"mt-6\">\n  <Repl example=\"basic\"></Repl>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Embedding Vue Flow Transition Example Demo\nDESCRIPTION: HTML code for embedding an interactive example that demonstrates Vue Flow's transition capabilities for zooming and panning around the viewport.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/examples/transition.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"mt-6\">\n  <Repl example=\"transition\"></Repl>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Adding Edges to Vue Flow with TypeScript\nDESCRIPTION: This snippet shows how to add edges to a Vue Flow graph using TypeScript. It properly types the nodes and edges arrays using the Node and Edge types from Vue Flow.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/edge.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { ref, onMounted } from 'vue'\nimport type { Node, Edge } from '@vue-flow/core'\nimport { VueFlow } from '@vue-flow/core'\n\nconst nodes = ref<Node[]>([\n  {\n    id: '1',\n    position: { x: 50, y: 50 },\n    data: { label: 'Node 1', },\n  },\n  {\n    id: '2',\n    position: { x: 50, y: 250 },\n    data: { label: 'Node 2', },\n  }\n]);\n\nconst edges = ref<Edge[]>([\n  {\n    id: 'e1->2',\n    source: '1',\n    target: '2',\n  }\n]);\n</script>\n\n<template>\n  <VueFlow :nodes=\"nodes\" :edges=\"edges\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Simplifying Event Emit Definitions in Vue Flow\nDESCRIPTION: Simplifies the definitions of event emits to avoid hitting the complexity limit of TypeScript. This change aims to improve the overall performance and maintainability of the codebase.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/packages/core/CHANGELOG.md#2025-04-21_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n- [#1585](https://github.com/bcakmakoglu/vue-flow/pull/1585) [`d7a51f8`](https://github.com/bcakmakoglu/vue-flow/commit/d7a51f8014c02043ca1c6c1e96210a0f6545175a) Thanks [@bcakmakoglu](https://github.com/bcakmakoglu)! - Simplify event emits definitions to avoid hitting complexity limit of TS.\n```\n\n----------------------------------------\n\nTITLE: Positioning Multiple Handles on the Same Side\nDESCRIPTION: Shows how to position multiple handles on the same side of a node using CSS styles to avoid overlap and create a clean layout.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/handle.md#2025-04-21_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<Handle id=\"source-a\" type=\"source\" :position=\"Position.Right\" style=\"top: 10px\" />\n<Handle id=\"source-b\" type=\"source\" :position=\"Position.Right\" style=\"bottom: 10px; top: auto;\" />\n```\n\n----------------------------------------\n\nTITLE: Styling Custom Node Types in CSS\nDESCRIPTION: This CSS snippet demonstrates how to style a custom node type in Vue Flow. It applies background color, text color, and padding to nodes with the class 'vue-flow__node-custom'.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/node.md#2025-04-21_snippet_21\n\nLANGUAGE: css\nCODE:\n```\n.vue-flow__node-custom {\n    background: #9CA8B3;\n    color: #fff;\n    padding: 10px;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Event Names in Vue Flow\nDESCRIPTION: Inlines event names in the Vue Flow library. This change aims to simplify the event handling mechanism.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/packages/core/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n- [#1591](https://github.com/bcakmakoglu/vue-flow/pull/1591) [`5eb677b`](https://github.com/bcakmakoglu/vue-flow/commit/5eb677bbbe113f2aa698db3156af38abe7892db3) Thanks [@bcakmakoglu](https://github.com/bcakmakoglu)! - Inline event names\n```\n\n----------------------------------------\n\nTITLE: Embedding Custom Node Example in Vue\nDESCRIPTION: This snippet demonstrates how to embed a custom node example using the Repl component in a Vue template. It references an example named 'customNode'.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/examples/nodes/index.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<div class=\"mt-6\">\n  <Repl example=\"customNode\"></Repl>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Embedding Vue Flow Example for Hidden Nodes\nDESCRIPTION: This snippet demonstrates how to embed a Vue Flow example component that showcases the hidden nodes functionality. The example is referenced by the name 'hidden' and is rendered within a div element with specific CSS classes.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/examples/hidden.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"mt-6\">\n  <Repl example=\"hidden\"></Repl>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Event Logging Function for Vue Flow\nDESCRIPTION: A utility function for logging events with their associated data, useful for debugging and understanding the flow of data through the application.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/node.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction logEvent(name, data) {\n  console.log(name, data)\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Nuxt 3\nDESCRIPTION: Commands for installing project dependencies using different package managers including yarn, npm, and pnpm.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/examples/nuxt3/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# yarn\nyarn install\n\n# npm\nnpm install\n\n# pnpm\npnpm install --shamefully-hoist\n```\n\n----------------------------------------\n\nTITLE: Embedding Vue Flow Loopback Edge Example\nDESCRIPTION: This snippet embeds a Vue component called Repl that demonstrates an example of loopback edges in Vue Flow. The example is identified by the 'loopback' prop.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/examples/edges/loopback.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<div class=\"mt-6\">\n  <Repl example=\"loopback\"></Repl>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Vue Flow Screenshot Example Component\nDESCRIPTION: This code snippet demonstrates how to set up a Vue component that showcases screenshot functionality in Vue Flow. It imports a ScreenshotExample component from the examples directory and renders it in the page.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/examples/screenshot.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport ScreenshotExample from '../../examples/screenshot/ScreenshotExample.vue';\n</script>\n```\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"mt-6\">\n  <ScreenshotExample />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Rendering Vue Flow Stress Test Component\nDESCRIPTION: This snippet demonstrates the usage of a reusable component named 'Repl' to conduct a stress test for Vue Flow. The component is configured with the 'stress' example to render a large number of nodes and test the rendering limits.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/examples/stress.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<div class=\"mt-6\">\n  <Repl example=\"stress\"></Repl>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Embedding Vue Flow Confirm Delete Example\nDESCRIPTION: This code embeds a reusable component that demonstrates the confirm delete functionality in Vue Flow. The example shows how to intercept delete operations to display a confirmation dialog.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/examples/confirm.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"mt-6\">\n  <Repl example=\"confirmDelete\"></Repl>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Displaying Node Toolbar Example in Vue\nDESCRIPTION: This snippet demonstrates how to include a Repl component to showcase an interactive example of the Node Toolbar. The Repl is configured to load an example named 'toolbar'.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/examples/nodes/node-toolbar.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<div class=\"mt-6\">\n  <Repl example=\"toolbar\"></Repl> \n</div>\n```\n\n----------------------------------------\n\nTITLE: Installing Vue Flow Package\nDESCRIPTION: Commands to install the Vue Flow core package using npm, pnpm, or yarn package managers.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @vue-flow/core\n\n# or\n$ pnpm i @vue-flow/core\n\n# or\n$ yarn add @vue-flow/core\n```\n\n----------------------------------------\n\nTITLE: Basic Teleport Component Demo\nDESCRIPTION: Example showing the usage of Teleport component in Vue Flow interface\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/examples/teleport.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"mt-6\">\n  <Repl example=\"teleport\"></Repl>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Embedding Edge Markers Example in HTML\nDESCRIPTION: A simple HTML snippet that embeds a Repl component to demonstrate edge markers in Vue Flow. The component references an example named 'markers'.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/examples/edges/markers.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"mt-6\">\n  <Repl example=\"markers\"></Repl>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Updating Viewport Rendering in Vue Flow\nDESCRIPTION: Prevents layout shift on initial render by hiding viewport until initial nodes have width/height. Removes Promises from viewport helper functions to avoid awaiting viewport.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/packages/core/CHANGELOG.md#2025-04-21_snippet_18\n\nLANGUAGE: markdown\nCODE:\n```\n- [#667](https://github.com/bcakmakoglu/vue-flow/pull/667) [`231271a`](https://github.com/bcakmakoglu/vue-flow/commit/231271a7dadaaee056e79e16f30d2f0755e51d53) Thanks [@bcakmakoglu](https://github.com/bcakmakoglu)! - Prevent layout shift on initial render by hiding viewport until initial nodes have width/height\n\n- [#667](https://github.com/bcakmakoglu/vue-flow/pull/667) [`89198bd`](https://github.com/bcakmakoglu/vue-flow/commit/89198bdc29ed9dde6961190ac99eb30aebfbf474) Thanks [@bcakmakoglu](https://github.com/bcakmakoglu)! - Remove Promises from viewport helper functions, will not await viewport anymore but instead return no-op functions if called too early\n```\n\n----------------------------------------\n\nTITLE: Importing Pinia Example Component\nDESCRIPTION: Script setup block importing a Pinia example component for Vue Flow demonstration.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/examples/pinia.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport PiniaExample from '../../examples/pinia/PiniaExample.vue';\n</script>\n```\n\n----------------------------------------\n\nTITLE: Embedding Vue Flow Interaction Example in HTML\nDESCRIPTION: This snippet shows how to embed a Vue Flow interaction example using the Repl component. The example is referenced by the name 'interaction'.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/examples/interaction.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"mt-6\">\n  <Repl example=\"interaction\"></Repl>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Improving Node Selection Visibility in Vue Flow\nDESCRIPTION: Hides the node selection box when no nodes are selected for a cleaner UI.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/packages/core/CHANGELOG.md#2025-04-21_snippet_30\n\nLANGUAGE: markdown\nCODE:\n```\n- [#627](https://github.com/bcakmakoglu/vue-flow/pull/627) [`19360c52`](https://github.com/bcakmakoglu/vue-flow/commit/19360c52296273c561fa0656e3ccbe7b47ea4d72) Thanks [@bcakmakoglu](https://github.com/bcakmakoglu)! - Hide node selection box when no selected nodes exist\n```\n\n----------------------------------------\n\nTITLE: Installing Vue Flow Background Package\nDESCRIPTION: Commands to install the Vue Flow Background component using either yarn or npm package managers\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/components/background.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @vue-flow/background\n\n# or\nnpm install @vue-flow/background\n```\n\n----------------------------------------\n\nTITLE: Importing Vue Flow CSS Styles\nDESCRIPTION: CSS import statements required for Vue Flow to display correctly. Includes both the core styles and optional default theme.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/README.md#2025-04-21_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n/* import the required styles */\n@import \"@vue-flow/core/dist/style.css\";\n\n/* import the default theme (optional) */\n@import \"@vue-flow/core/dist/theme-default.css\";\n```\n\n----------------------------------------\n\nTITLE: Embedding Interactive Node Intersection Example in Vue Flow\nDESCRIPTION: This code snippet demonstrates how to embed an interactive example of node intersections using the Repl component with the 'intersection' example.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/examples/nodes/intersection.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"mt-6\">\n  <Repl example=\"intersection\"></Repl>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Installing Node Resizer Package for Vue Flow\nDESCRIPTION: Installation commands for adding the Node Resizer component to a Vue Flow project using either yarn or npm package managers.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/components/node-resizer.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @vue-flow/node-resizer\n  \n# or\nnpm install @vue-flow/node-resizer\n```\n\n----------------------------------------\n\nTITLE: Importing Vue Flow Core Styles\nDESCRIPTION: Required and optional style imports for Vue Flow library functionality and default theme.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/theming.md#2025-04-21_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* these are necessary styles for vue flow */\n@import '@vue-flow/core/dist/style.css';\n\n/* this contains the default theme, these are optional styles */\n@import '@vue-flow/core/dist/theme-default.css';\n```\n\n----------------------------------------\n\nTITLE: Configuring Vue Flow with ModelValue (Elements)\nDESCRIPTION: Example showing the deprecated method of configuring Vue Flow using the modelValue prop with an array of elements combining both nodes and edges.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/vue-flow/config.md#2025-04-21_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { ref } from 'vue'  \nimport { VueFlow } from '@vue-flow/core'\n\nconst elements = ref([\n  { id: '1', type: 'input', label: 'Node 1', position: { x: 250, y: 5 } },\n  { id: '2', label: 'Node 2', position: { x: 100, y: 100 }, },\n  { id: '3', label: 'Node 3', position: { x: 400, y: 100 } },\n  { id: '4', type: 'output', label: 'Node 4', position: { x: 400, y: 200 } },\n  { id: 'e1-3', source: '1', target: '3' },\n  { id: 'e1-2', source: '1', target: '2', animated: true },\n])\n</script>\n\n<template>\n  <VueFlow v-model=\"elements\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Adding Missing Type Generic to Edge Types\nDESCRIPTION: Adds a missing Type generic to edge types for improved type checking and consistency.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/packages/core/CHANGELOG.md#2025-04-21_snippet_16\n\nLANGUAGE: Markdown\nCODE:\n```\n- [#862](https://github.com/bcakmakoglu/vue-flow/pull/862) [`dbcbe782`](https://github.com/bcakmakoglu/vue-flow/commit/dbcbe782165afc4484d3dae1891965315acd26ff) Thanks [@bcakmakoglu](https://github.com/bcakmakoglu)! - Add missing `Type` generic to edge types\n```\n\n----------------------------------------\n\nTITLE: Global CSS Variables Definition\nDESCRIPTION: Definition of global CSS variables for Vue Flow theme customization.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/theming.md#2025-04-21_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n:root {\n    --vf-node-bg: #fff;\n    --vf-node-text: #222;\n    --vf-connection-path: #b1b1b7;\n    --vf-handle: #555;\n}\n```\n\n----------------------------------------\n\nTITLE: Changelog Content in Markdown Format\nDESCRIPTION: Structured changelog entries organized into Bug Fixes, Documentation, and Features sections. Each entry includes a commit link and description of changes.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/CHANGELOG.md#2025-04-21_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n### Bug Fixes\n\n- Pass all required props to node components ([c818a58](c818a5863c21c95a3c3b3b767194e24c33381f90))\n- Pass parentNode id instead of parentNode to components ([266678d](266678d6a8fe9bc453e141d77707fa559cd83d97))\n[...additional entries...]\n\n### Documentation\n\n- Remove usage link from sidebar ([5af3d16](5af3d16dc1ee680b83be97baa0c356e66e361309))\n- Move node docs into single page ([efa7583](efa75839f93a53e0260ddc6891a2b0cf8490a2a5))\n[...additional entries...]\n\n### Features\n\n- Enable passing components as node/edge-types ([6a2c1b0](6a2c1b00d738a2fde0bf11d09cb3a2c3c2d4210d))\n- Enable using a parentNode / parentNodeId to add child nodes ([9a8caf4](9a8caf444ca6396288caee3138d05582f79f3698))\n[...additional entries...]\n```\n\n----------------------------------------\n\nTITLE: Embedding Vue Flow Update Node Example\nDESCRIPTION: This snippet demonstrates how to embed a Vue Flow example for updating node data using the Repl component.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/examples/nodes/update-node.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"mt-6\">\n  <Repl example=\"updateNode\"></Repl> \n</div>\n```\n\n----------------------------------------\n\nTITLE: Development Setup Commands\nDESCRIPTION: Commands for setting up the Vue Flow development environment, including starting example applications and building all packages.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# install pnpm if you haven't already\n$ npm i -g pnpm\n\n# start examples\n$ pnpm dev\n\n# build all packages\n$ pnpm build\n```\n\n----------------------------------------\n\nTITLE: Icon Imports in Vue Component Setup\nDESCRIPTION: Script setup block demonstrating the import of various Material Design Icons and logos for use in the documentation interface.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/index.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport PowerPlug from '~icons/mdi/power-plug';\nimport Flash from '~icons/mdi/flash';\nimport Lifebuoy from '~icons/mdi/lifebuoy';\nimport Puzzle from '~icons/mdi/puzzle';\nimport Speedometer from '~icons/mdi/speedometer';\nimport Cogs from '~icons/mdi/cogs';\nimport CubeOutline from '~icons/mdi/cube-outline';\nimport Image from '~icons/mdi/image';\nimport MapMarkerPath from '~icons/mdi/map-marker-path';\nimport Gamepad from '~icons/mdi/gamepad';\nimport Wrench from '~icons/mdi/wrench';\nimport ArrowExpand from '~icons/mdi/arrow-expand';\nimport LockCheck from '~icons/mdi/lock-check';\nimport VueJs from '~icons/mdi/vuejs';\nimport LogosJavascript from '~icons/logos/javascript';\nimport LogosTypescript from '~icons/logos/typescript-icon';\n</script>\n```\n\n----------------------------------------\n\nTITLE: Defining Package Version in JSON\nDESCRIPTION: JSON snippet defining the version number for a package release.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/CHANGELOG.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"version\": \"1.1.3\"\n```\n\n----------------------------------------\n\nTITLE: Defining Vue Flow Landing Page Layout\nDESCRIPTION: This code snippet defines the structure of a Vue Flow landing page using custom components. It includes sections for Home, Banner, Features, Showcase, and Acknowledgement.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/index.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n---\nlayout: home\n\n---\n\n<Home />\n\n<Banner />\n\n<Features />\n\n<Showcase />\n\n<Acknowledgement />\n```\n\n----------------------------------------\n\nTITLE: Installing Vue Flow MiniMap Component with Package Managers\nDESCRIPTION: Shows how to install the Vue Flow MiniMap component using either Yarn or npm package managers.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/packages/minimap/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# install\n$ yarn add @vue-flow/minimap\n\n# or\n$ npm i --save @vue-flow/minimap\n```\n\n----------------------------------------\n\nTITLE: Adding Exports Field to Package.json\nDESCRIPTION: Adds an exports field to the package.json file for improved module resolution and compatibility.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/packages/core/CHANGELOG.md#2025-04-21_snippet_17\n\nLANGUAGE: Markdown\nCODE:\n```\n- [#865](https://github.com/bcakmakoglu/vue-flow/pull/865) [`9ce7bdc4`](https://github.com/bcakmakoglu/vue-flow/commit/9ce7bdc4908dda4dea299e5f469b252ac20a12ab) Thanks [@bcakmakoglu](https://github.com/bcakmakoglu)! - Add `exports` field to package.json\n```\n\n----------------------------------------\n\nTITLE: Removing Null Return Type in useNodesData\nDESCRIPTION: Removes 'null' as a possible return type for data in the 'useNodesData' function. This change improves type safety in the Vue Flow API.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/packages/core/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n- [#1575](https://github.com/bcakmakoglu/vue-flow/pull/1575) [`7aa49f4`](https://github.com/bcakmakoglu/vue-flow/commit/7aa49f4f6da9643797743cddb4074dbad85d0aa8) Thanks [@bcakmakoglu](https://github.com/bcakmakoglu)! - Remove `null` as possible return type of data in `useNodesData`\n```\n\n----------------------------------------\n\nTITLE: Fixing Viewport Dimension Warning in Vue Flow\nDESCRIPTION: Adds a warning when viewport dimensions are zero to help diagnose rendering issues.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/packages/core/CHANGELOG.md#2025-04-21_snippet_29\n\nLANGUAGE: markdown\nCODE:\n```\n- [#634](https://github.com/bcakmakoglu/vue-flow/pull/634) [`b59dd6a7`](https://github.com/bcakmakoglu/vue-flow/commit/b59dd6a7256a1f0eb51beb7ea581383089b5e0d4) Thanks [@bcakmakoglu](https://github.com/bcakmakoglu)! - Throw warning if viewport dimensions are 0\n```\n\n----------------------------------------\n\nTITLE: Installing Vue Flow Controls Package\nDESCRIPTION: Commands to install the Vue Flow Controls package using either yarn or npm package managers.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/packages/controls/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# install\n$ yarn add @vue-flow/controls\n\n# or\n$ npm i --save @vue-flow/controls\n```\n\n----------------------------------------\n\nTITLE: Vue Component Layout Template\nDESCRIPTION: A Vue template section embedding a Repl component for demonstrating layout functionality.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/examples/layout/animated.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"mt-6\">\n  <Repl example=\"layout\"></Repl>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Git Commit Hash References in Markdown\nDESCRIPTION: Markdown snippet showing Git commit hash references for tracking changes between versions.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/CHANGELOG.md#2025-04-21_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n[e9a784a](e9a784a1aaf9916494b129466a38f5f2353620e6)...[9fbd653](9fbd653d92b0e99fb15e1ead86812f4701656474)\n```\n\n----------------------------------------\n\nTITLE: Installing Vue Flow with pnpm\nDESCRIPTION: Command to install the Vue Flow core package using pnpm package manager.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/getting-started.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ pnpm add @vue-flow/core\n```\n\n----------------------------------------\n\nTITLE: Installing Vue Flow Pathfinding Edge via Package Manager\nDESCRIPTION: Commands to install the Vue Flow Pathfinding Edge package using either Yarn or npm package managers.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/packages/pathfinding-edge/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# install\n$ yarn add @vue-flow/pathfinding-edge\n\n# or\n$ npm i --save @vue-flow/pathfinding-edge\n```\n\n----------------------------------------\n\nTITLE: Installing Vue Flow Background Component\nDESCRIPTION: Commands for installing the Vue Flow background component using either yarn or npm package managers.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/packages/background/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# install\n$ yarn add @vue-flow/background\n\n# or\n$ npm i --save @vue-flow/background\n```\n\n----------------------------------------\n\nTITLE: Installing Vue Flow with yarn\nDESCRIPTION: Command to install the Vue Flow core package using yarn package manager.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/getting-started.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ yarn add @vue-flow/core\n```\n\n----------------------------------------\n\nTITLE: Installing Vue Flow with npm\nDESCRIPTION: Command to install the Vue Flow core package using npm package manager.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/getting-started.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ npm add @vue-flow/core\n```\n\n----------------------------------------\n\nTITLE: Installing Vue Flow MiniMap Package\nDESCRIPTION: Commands to install the MiniMap component for Vue Flow using either yarn or npm package managers.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/components/minimap.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @vue-flow/minimap\n  \n# or\nnpm install @vue-flow/minimap\n```\n\n----------------------------------------\n\nTITLE: Installing Vue Flow Controls\nDESCRIPTION: Instructions for installing the Controls component using yarn or npm package managers.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/components/controls.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @vue-flow/controls\n\n# or\nnpm install @vue-flow/controls\n```\n\n----------------------------------------\n\nTITLE: Installing Vue Flow Node Resizer Package\nDESCRIPTION: Commands to install the Node Resizer package using either yarn or npm package managers.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/packages/node-resizer/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# install\n$ yarn add @vue-flow/node-resizer\n\n# or\n$ npm i --save @vue-flow/node-resizer\n```\n\n----------------------------------------\n\nTITLE: Vue Flow Changelog Entries\nDESCRIPTION: Structured changelog entries detailing version updates, bug fixes, refactoring and feature additions for Vue Flow library\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/CHANGELOG.md#2025-04-21_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n### Update\n\n- Add updatable as prop to edges ([b88f210](b88f2105fb0e11c2cf299b318fa45bbfb3b6f0f1))\n- Add elementsProcessed event hook ([4740a2c](4740a2c8fe68bb9efcdfced0da6d8569a0c81576))\n- Exclude cypress dir from build ([a664252](a66425294ccebb2d120b190a536b779e9e84d6b3))\n[...additional entries...]\n```\n\n----------------------------------------\n\nTITLE: Installing Vue Flow Node Toolbar Package\nDESCRIPTION: Command line instructions for installing the Vue Flow node toolbar package using either yarn or npm package managers.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/packages/node-toolbar/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# install\n$ yarn add @vue-flow/node-toolbar\n\n# or\n$ npm i --save @vue-flow/node-toolbar\n```\n\n----------------------------------------\n\nTITLE: Package Import Structure Change in Vue Flow\nDESCRIPTION: Demonstrates the changes in import structure after the package scope changed from @braks to @vue-flow. Core functionality and additional components are now in separate packages.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/packages/core/CHANGELOG.md#2025-04-21_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\n// Before:\nimport { VueFlow, Background, MiniMap, Controls } from \"@braks/vue-flow\";\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// After\nimport { VueFlow } from \"@vue-flow/core\";\nimport {\n  Background,\n  MiniMap,\n  Controls,\n} from \"@vue-flow/additional-components\";\n```\n\n----------------------------------------\n\nTITLE: Starting Quasar Development Server\nDESCRIPTION: Command to start the application in development mode with features like hot-code reloading and error reporting.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/examples/quasar/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nquasar dev\n```\n\n----------------------------------------\n\nTITLE: Adding Missing Type Generic to Node Types\nDESCRIPTION: Adds a missing Type generic to node types for improved type checking and consistency.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/packages/core/CHANGELOG.md#2025-04-21_snippet_13\n\nLANGUAGE: Markdown\nCODE:\n```\n- [#862](https://github.com/bcakmakoglu/vue-flow/pull/862) [`dbcbe782`](https://github.com/bcakmakoglu/vue-flow/commit/dbcbe782165afc4484d3dae1891965315acd26ff) Thanks [@bcakmakoglu](https://github.com/bcakmakoglu)! - Add missing `Type` generic to node types\n```\n\n----------------------------------------\n\nTITLE: Building Nuxt 3 for Production\nDESCRIPTION: Command to create a production build of the Nuxt 3 application.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/examples/nuxt3/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Basic Vue Flow Implementation with Custom Nodes\nDESCRIPTION: A Vue example showing how to set up Vue Flow with custom nodes. This snippet demonstrates importing VueFlow component, setting up reactive nodes, and rendering a custom node component.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/components/node-toolbar.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { VueFlow } from '@vue-flow/core'\nimport initialNodes from './initialNodes'\n\n// some nodes and edges\nconst nodes = ref(initialNodes)\n</script>\n\n<template>\n  <VueFlow :nodes=\"nodes\">\n    <template #node-custom=\"nodeProps\">\n      <CustomNode :data=\"nodeProps.data\" />\n    </template>\n  </VueFlow>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Displaying Markdown Changelog for Vue Flow Node Toolbar\nDESCRIPTION: This code snippet shows the changelog for the @vue-flow/node-toolbar package, written in Markdown format. It includes version numbers, change types (patch, minor, major), and descriptions of changes with associated pull request numbers and commit hashes.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/packages/node-toolbar/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @vue-flow/node-toolbar\n\n## 1.1.1\n\n### Patch Changes\n\n- [#1785](https://github.com/bcakmakoglu/vue-flow/pull/1785) [`0179b98`](https://github.com/bcakmakoglu/vue-flow/commit/0179b982cc7a74d4aa99b4a5c1ba815e0cd4db28) Thanks [@bcakmakoglu](https://github.com/bcakmakoglu)! - Set default value for `isVisible` to `undefined`\n\n## 1.1.0\n\n### Minor Changes\n\n- [#953](https://github.com/bcakmakoglu/vue-flow/pull/953) [`bda15cfa`](https://github.com/bcakmakoglu/vue-flow/commit/bda15cfa790ae479e95827b940c0043448f7f89c) Thanks [@bcakmakoglu](https://github.com/bcakmakoglu)! - Add `align` prop to node toolbar\n\n## 1.0.7\n\n### Patch Changes\n\n- [#865](https://github.com/bcakmakoglu/vue-flow/pull/865) [`9ce7bdc4`](https://github.com/bcakmakoglu/vue-flow/commit/9ce7bdc4908dda4dea299e5f469b252ac20a12ab) Thanks [@bcakmakoglu](https://github.com/bcakmakoglu)! - Add `exports` field to package.json\n\n## 1.0.6\n\n### Patch Changes\n\n- [#716](https://github.com/bcakmakoglu/vue-flow/pull/716) [`1685827d`](https://github.com/bcakmakoglu/vue-flow/commit/1685827d0ea1dc9864f95a1b3a54fbc43a296e5d) Thanks [@bcakmakoglu](https://github.com/bcakmakoglu)! - Fix umd pkg names and use the correct vue flow core umd pkg name in plugins\n\n## 1.0.5\n\n### Patch Changes\n\n- [#682](https://github.com/bcakmakoglu/vue-flow/pull/682) [`b08cb4d4`](https://github.com/bcakmakoglu/vue-flow/commit/b08cb4d45904c229d9ecda5e3cb477cbb7a6acaf) Thanks [@bcakmakoglu](https://github.com/bcakmakoglu)! - Add compat mode to components to avoid breaking when used with @vue/compat\n\n## 1.0.4\n\n### Patch Changes\n\n- [#616](https://github.com/bcakmakoglu/vue-flow/pull/616) [`b16e3564`](https://github.com/bcakmakoglu/vue-flow/commit/b16e3564708c5429ad594156341fa3e95f84d3b2) Thanks [@bcakmakoglu](https://github.com/bcakmakoglu)! - Upgrade to vite 4 & update deps\n\n## 1.0.3\n\n### Patch Changes\n\n- [`c9d37fc`](https://github.com/bcakmakoglu/vue-flow/commit/c9d37fcad85e6f7643d3905d34a2d2c6566b3977) Thanks [@bcakmakoglu](https://github.com/bcakmakoglu)! - Correct pkg main field\n\n## 1.0.2\n\n### Patch Changes\n\n- [#569](https://github.com/bcakmakoglu/vue-flow/pull/569) [`c0ee1cd`](https://github.com/bcakmakoglu/vue-flow/commit/c0ee1cdfdc70ea61766b02de8f8acb4f0cad8bac) Thanks [@bcakmakoglu](https://github.com/bcakmakoglu)! - Wait for viewport ref to be available before teleporting to it\n\n## 1.0.1\n\n### Patch Changes\n\n- [#553](https://github.com/bcakmakoglu/vue-flow/pull/553) [`d4e0b7e`](https://github.com/bcakmakoglu/vue-flow/commit/d4e0b7eb1ed1cadab1ec778f2e71cf57ba8cd23e) Thanks [@bcakmakoglu](https://github.com/bcakmakoglu)! - Use renamed `ViewportTransform` type\n\n## 1.0.0\n\n### Major Changes\n\n- [#476](https://github.com/bcakmakoglu/vue-flow/pull/476) [`136cc19f`](https://github.com/bcakmakoglu/vue-flow/commit/136cc19fe29a16bc139655f8ce491fe94b1182e8) Thanks [@bcakmakoglu](https://github.com/bcakmakoglu)! - Add node toolbar package\n```\n\n----------------------------------------\n\nTITLE: Preventing Keypress Event Swallowing\nDESCRIPTION: Patch to prevent keypress events from being swallowed when a button element is focused.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/packages/core/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- [#1807](https://github.com/bcakmakoglu/vue-flow/pull/1807) [`60482cf`](https://github.com/bcakmakoglu/vue-flow/commit/60482cf983d9f674070a48bdfd0624fe6e28a110) Thanks [@bcakmakoglu](https://github.com/bcakmakoglu)! - Prevent keypress events from being swallowed when a button element is focused.\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Vue Flow Quasar App\nDESCRIPTION: Commands to install project dependencies using either yarn or npm package managers.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/examples/quasar/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn\n# or\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Updating Cursor Display for panOnDrag\nDESCRIPTION: Modifies the cursor display behavior to only show the grab cursor when panOnDrag is set to the left mouse button. This change improves user experience by providing more accurate visual feedback.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/packages/core/CHANGELOG.md#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n- [#1586](https://github.com/bcakmakoglu/vue-flow/pull/1586) [`f2ed6a3`](https://github.com/bcakmakoglu/vue-flow/commit/f2ed6a3b3daeb526156173a8913dcc3785b4b999) Thanks [@bcakmakoglu](https://github.com/bcakmakoglu)! - Only display grab cursor when panOnDrag is on left mouse button\n```\n\n----------------------------------------\n\nTITLE: Installing Vue Flow Node Toolbar Package\nDESCRIPTION: Instructions for installing the Node Toolbar package using either yarn or npm package managers.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/docs/src/guide/components/node-toolbar.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @vue-flow/node-toolbar\n\n# or\nnpm install @vue-flow/node-toolbar\n```\n\n----------------------------------------\n\nTITLE: Deprecating Class and Style Functions for Node/Edge Types\nDESCRIPTION: Deprecates class and style functions for node and edge types, indicating future removal or replacement.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/packages/core/CHANGELOG.md#2025-04-21_snippet_15\n\nLANGUAGE: Markdown\nCODE:\n```\n- [#862](https://github.com/bcakmakoglu/vue-flow/pull/862) [`dbcbe782`](https://github.com/bcakmakoglu/vue-flow/commit/dbcbe782165afc4484d3dae1891965315acd26ff) Thanks [@bcakmakoglu](https://github.com/bcakmakoglu)! - Deprecate class and style funcs for node/edge types\n```\n\n----------------------------------------\n\nTITLE: Starting Nuxt 3 Development Server\nDESCRIPTION: Command to start the development server on localhost:3000 for local development.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/examples/nuxt3/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Previewing Nuxt 3 Production Build\nDESCRIPTION: Command to preview the production build locally before deployment.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/examples/nuxt3/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run preview\n```\n\n----------------------------------------\n\nTITLE: Building Quasar App for Production\nDESCRIPTION: Command to build the application for production deployment.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/examples/quasar/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nquasar build\n```\n\n----------------------------------------\n\nTITLE: Updating Vue Flow Core Package Version\nDESCRIPTION: Version number update for the @vue-flow/core package to 1.42.5.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/packages/core/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @vue-flow/core\n\n## 1.42.5\n```\n\n----------------------------------------\n\nTITLE: Linting Vue Flow Quasar Files\nDESCRIPTION: Commands to run linting on project files using either yarn or npm.\nSOURCE: https://github.com/bcakmakoglu/vue-flow/blob/master/examples/quasar/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn lint\n# or\nnpm run lint\n```"
  }
]