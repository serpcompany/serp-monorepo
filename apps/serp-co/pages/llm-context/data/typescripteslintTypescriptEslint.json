[
  {
    "owner": "typescript-eslint",
    "repo": "typescript-eslint",
    "content": "TITLE: Configuring ESLint with Type Information (Flat Config)\nDESCRIPTION: This JavaScript code configures ESLint to use type information by adding `recommendedTypeChecked` preset and specifying `languageOptions.parserOptions` to point to the TSConfig file. `projectService` is enabled to utilize TypeScript's type checking service, and `tsconfigRootDir` is set to the project's root directory. The configuration utilizes ES modules.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/getting-started/Typed_Linting.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport eslint from '@eslint/js';\nimport tseslint from 'typescript-eslint';\n\nexport default tseslint.config(\n  eslint.configs.recommended,\n  // Remove this line\n  tseslint.configs.recommended,\n  // Added lines start\n  tseslint.configs.recommendedTypeChecked,\n  {\n    languageOptions: {\n      parserOptions: {\n        projectService: true,\n        tsconfigRootDir: import.meta.dirname,\n      },\n    },\n  },\n  // Added lines end\n);\n```\n\n----------------------------------------\n\nTITLE: Incorrect `any` Type Usage - TypeScript\nDESCRIPTION: These code snippets demonstrate incorrect usage of the `any` type in TypeScript, as flagged by the `no-explicit-any` rule. The rule aims to prevent the use of `any` as a type annotation, encouraging more specific type definitions or the `unknown` type.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-explicit-any.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst age: any = 'seventeen';\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst ages: any[] = ['seventeen'];\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst ages: Array<any> = ['seventeen'];\n```\n\nLANGUAGE: typescript\nCODE:\n```\nfunction greet(): any {}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nfunction greet(): any[] {}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nfunction greet(): Array<any> {}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nfunction greet(): Array<Array<any>> {}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nfunction greet(param: Array<any>): string {}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nfunction greet(param: Array<any>): Array<any> {}\n```\n\n----------------------------------------\n\nTITLE: Initializing ESLint Config (Flat)\nDESCRIPTION: This code snippet demonstrates how to initialize a basic ESLint configuration using the Flat Config style. It imports ESLint's recommended rules and TypeScript ESLint's recommended rules and combines them into a single configuration using the `tseslint.config` helper function.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/users/Shared_Configurations.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// @ts-check\n\nimport eslint from '@eslint/js';\nimport tseslint from 'typescript-eslint';\n\nexport default tseslint.config(\n  eslint.configs.recommended,\n  tseslint.configs.recommended,\n);\n```\n\n----------------------------------------\n\nTITLE: Type Imports with Prefer Type Imports\nDESCRIPTION: This example demonstrates the correct code when the 'prefer' option is set to 'type-imports'. It uses import type to import Foo and Bar. This enforces that all type-only imports are explicitly marked as type imports.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/consistent-type-imports.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport type { Foo } from 'Foo';\nimport type Bar from 'Bar';\ntype T = Foo;\nconst x: Bar = 1;\n```\n\n----------------------------------------\n\nTITLE: Defining Rule Options with TypeScript\nDESCRIPTION: Illustrates how to define and handle rule options using TypeScript's type system. It demonstrates creating a rule that accepts a `preferredCase` option, specifying the message IDs and options types, defining the schema for validation, and setting default option values.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/developers/Custom_Rules.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { ESLintUtils } from '@typescript-eslint/utils';\n\ntype MessageIds = 'lowercase' | 'uppercase';\n\ntype Options = [\n  {\n    preferredCase?: 'lower' | 'upper';\n  },\n];\n\n// Type: RuleModule<MessageIds, Options, ...>\nexport const rule = createRule<Options, MessageIds>({\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Incorrect Promise Handling Example\nDESCRIPTION: This code snippet demonstrates incorrect usage of Promises, where the Promise is not awaited, caught, returned, or voided, leading to potential unhandled rejections.  It showcases examples of floating promises and unhandled arrays containing promises.  The goal is to highlight scenarios that the `no-floating-promises` rule flags as errors.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-floating-promises.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst promise = new Promise((resolve, reject) => resolve('value'));\npromise;\n\nasync function returnsPromise() {\n  return 'value';\n}\nreturnsPromise().then(() => {});\n\nPromise.reject('value').catch();\n\nPromise.reject('value').finally();\n\n[1, 2, 3].map(async x => x + 1);\n```\n\n----------------------------------------\n\nTITLE: Testing Non-Type-Aware ESLint Rules with RuleTester (TS)\nDESCRIPTION: This code demonstrates how to use RuleTester to test a non-type-aware ESLint rule. It includes examples of valid and invalid test cases, as well as how to test fixers and suggestions. The code uses the RuleTester class from '@typescript-eslint/rule-tester' and assumes that the rule is defined in '../src/rules/my-rule.ts'. It shows how to define test cases with code, options, expected errors, output (for fixers), and suggestions.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/packages/Rule_Tester.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RuleTester } from '@typescript-eslint/rule-tester';\nimport rule from '../src/rules/my-rule.ts';\n\nconst ruleTester = new RuleTester();\n\nruleTester.run('my-rule', rule, {\n  valid: [\n    // valid tests can be a raw string,\n    'const x = 1;',\n    // or they can be an object\n    {\n      code: 'const y = 2;',\n      options: [{ ruleOption: true }],\n    },\n\n    // you can enable JSX parsing by passing parserOptions.ecmaFeatures.jsx = true\n    {\n      code: 'const z = <div />;',\n      languageOptions: {\n        parserOptions: {\n          ecmaFeatures: {\n            jsx: true,\n          },\n        },\n      },\n    },\n  ],\n  invalid: [\n    // invalid tests must always be an object\n    {\n      code: 'const a = 1;',\n      // invalid tests must always specify the expected errors\n      errors: [\n        {\n          messageId: 'ruleMessage',\n          // If applicable - it's recommended that you also assert the data in\n          // addition to the messageId so that you can ensure the correct message\n          // is generated\n          data: {\n            placeholder1: 'a',\n          },\n        },\n      ],\n    },\n\n    // fixers can be tested using the output parameter\n    {\n      code: 'const b = 1;',\n      output: 'const c = 1;',\n      errors: [\n        /* ... */\n      ],\n    },\n    // passing `output = null` will enforce the code is NOT changed\n    {\n      code: 'const c = 1;',\n      output: null,\n      errors: [\n        /* ... */\n      ],\n    },\n    // Multi-pass fixes can be tested using the array form of output.\n    // Note: this is unique to typescript-eslint, and doesn't exist in ESLint core.\n    {\n      code: 'const d = 1;',\n      output: ['const e = 1;', 'const f = 1;'],\n      errors: [\n        /* ... */\n      ],\n    },\n\n    // suggestions can be tested via errors\n    {\n      code: 'const d = 1;',\n      output: null,\n      errors: [\n        {\n          messageId: 'suggestionError',\n          suggestions: [\n            {\n              messageId: 'suggestionOne',\n              output: 'const e = 1;',\n            },\n          ],\n        },\n      ],\n    },\n    // passing `suggestions = null` will enforce there are NO suggestions\n    {\n      code: 'const d = 1;',\n      output: null,\n      errors: [\n        {\n          messageId: 'noSuggestionError',\n          suggestions: null,\n        },\n      ],\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Incorrect Explicit Module Boundary Types - TypeScript\nDESCRIPTION: Examples of incorrect code that violates the `explicit-module-boundary-types` rule.  These snippets lack explicit return type annotations and argument types on exported functions and public class methods. The lack of explicit types can hinder code readability and type checking.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/explicit-module-boundary-types.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Should indicate that no value is returned (void)\nexport function test() {\n  return;\n}\n\n// Should indicate that a string is returned\nexport var arrowFn = () => 'test';\n\n// All arguments should be typed\nexport var arrowFn = (arg): string => `test ${arg}`;\nexport var arrowFn = (arg: any): string => `test ${arg}`;\n\nexport class Test {\n  // Should indicate that no value is returned (void)\n  method() {\n    return;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Typed Linting in ESLint with TypeScript-ESLint (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to configure typed linting in ESLint using the `typescript-eslint` plugin. It imports the plugin and sets up the ESLint configuration to include recommended settings, type-checked rules, and parser options with `projectService` enabled. This allows ESLint to leverage TypeScript APIs for type information during linting.  `tsconfigRootDir` is set to the current directory to help find the `tsconfig.json` file.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/website/blog/2024-09-30-typed-linting.md#_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nimport tseslint from 'typescript-eslint';\n\nexport default tseslint.config(\n  eslint.configs.recommended,\n  ...tseslint.configs.recommendedTypeChecked,\n  {\n    languageOptions: {\n      parserOptions: {\n        projectService: true,\n        tsconfigRootDir: import.meta.dirname,\n      },\n    },\n  },\n);\n\n```\n\n----------------------------------------\n\nTITLE: Initializing eslintRecommended with Flat Config (ESM)\nDESCRIPTION: This code snippet shows how to initialize the `eslintRecommended` configuration using the Flat Config in an ESLint configuration file.  It imports the `tseslint` object and calls `tseslint.config` with `eslint.configs.recommended` and `tseslint.configs.eslintRecommended` as arguments, combining the recommended ESLint rules with the TypeScript-specific rules.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/users/Shared_Configurations.mdx#_snippet_19\n\nLANGUAGE: js\nCODE:\n```\nexport default tseslint.config(\n  eslint.configs.recommended,\n  tseslint.configs.eslintRecommended,\n);\n```\n\n----------------------------------------\n\nTITLE: Disallow deprecated code usage - Correct using new URL\nDESCRIPTION: This example uses the modern `new URL()` constructor instead of the deprecated `node:url`'s `parse` function, demonstrating the correct approach.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-deprecated.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Modern Node.js API, uses `new URL()`\nconst url2 = new URL('/foo', 'http://www.example.com');\n```\n\n----------------------------------------\n\nTITLE: Incorrect usage: Calling functions with `any` arguments - TypeScript\nDESCRIPTION: Examples of incorrect code that violates the `no-unsafe-argument` rule.  These examples demonstrate scenarios where functions are called with arguments that have the `any` type, including spreading `any` typed arrays or tuples, and passing `any` in generic positions.  This rule aims to prevent potential type-related errors and improve code safety by ensuring that functions are not called with arguments of an unsafe `any` type.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-unsafe-argument.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function foo(arg1: string, arg2: number, arg3: string): void;\n\nconst anyTyped = 1 as any;\n\nfoo(...anyTyped);\nfoo(anyTyped, 1, 'a');\n\nconst anyArray: any[] = [];\nfoo(...anyArray);\n\nconst tuple1 = ['a', anyTyped, 'b'] as const;\nfoo(...tuple1);\n\nconst tuple2 = [1] as const;\nfoo('a', ...tuple2, anyTyped);\n\ndeclare function bar(arg1: string, arg2: number, ...rest: string[]): void;\nconst x = [1, 2] as [number, ...number[]];\nbar('a', ...x, anyTyped);\n\ndeclare function baz(arg1: Set<string>, arg2: Map<string, string>): void;\nbaz(new Set<any>(), new Map<any, string>());\n```\n\n----------------------------------------\n\nTITLE: ESLint Rule Example\nDESCRIPTION: Demonstrates how the `@typescript-eslint/consistent-type-imports` rule identifies an import where all specifiers are only used as types and suggests using `import type`.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/website/blog/2023-02-24-consistent-type-exports-and-imports-why-and-how.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GetString } from './types.js';\n// All imports in the declaration are only used as types. Use `import type`.\n\nexport function getAndLogValue(getter: GetString) {\n  console.log('Value:', getter());\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Type-Aware ESLint Rules with RuleTester (TS)\nDESCRIPTION: This code shows how to configure RuleTester for type-aware testing of ESLint rules. It sets the languageOptions.parserOptions.projectService.allowDefaultProject to enable type checking on test files and specifies the tsconfigRootDir. The RuleTester class from '@typescript-eslint/rule-tester' is used with these settings.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/packages/Rule_Tester.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst ruleTester = new RuleTester({\n  // Added lines start\n  languageOptions: {\n    parserOptions: {\n      projectService: {\n        allowDefaultProject: ['*.ts*'],\n      },\n      tsconfigRootDir: './path/to/your/folder/fixture',\n    },\n  },\n  // Added lines end\n});\n```\n\n----------------------------------------\n\nTITLE: Project Configuration with tsconfig.json Path - JavaScript\nDESCRIPTION: Example of configuring the `project` option with a direct path to a `tsconfig.json` file. This tells the parser to use the specified TSConfig for type information.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/packages/Parser.mdx#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nproject: './tsconfig.json';\n```\n\n----------------------------------------\n\nTITLE: Awaiting Promise Values (Correct)\nDESCRIPTION: This example shows the correct usage of the `await` keyword on Promise values.  `Promise.resolve('value')` creates a Promise, and `createValue` is an async function which implicitly returns a Promise. Awaiting these values is the correct way to handle asynchronous operations.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/await-thenable.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait Promise.resolve('value');\n\nconst createValue = async () => 'value';\nawait createValue();\n```\n\n----------------------------------------\n\nTITLE: Defining Rule Options and Schema (TypeScript)\nDESCRIPTION: Example demonstrating how to define rule options, their corresponding JSON schema, and default values using TypeScript. It includes the `Options` type definition, the `meta.schema` property for validation, the `defaultOptions` property, and the usage of the options within the `create` function.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/developers/Custom_Rules.mdx#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype MessageIds = 'lowercase' | 'uppercase';\n\ntype Options = [\n  {\n    preferredCase: 'lower' | 'upper';\n  },\n];\n\nexport const rule = createRule<Options, MessageIds>({\n  meta: {\n    // ...\n    schema: [\n      {\n        type: 'object',\n        properties: {\n          preferredCase: {\n            type: 'string',\n            enum: ['lower', 'upper'],\n          },\n        },\n        additionalProperties: false,\n      },\n    ],\n  },\n  defaultOptions: [\n    {\n      preferredCase: 'lower',\n    },\n  ],\n  create(context, options) {\n    if (options[0].preferredCase === 'lower') {\n      // ...\n    }\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using filter()[0] (Incorrect) TypeScript\nDESCRIPTION: This code snippet demonstrates the incorrect usage of `Array.prototype.filter()` followed by `[0]` or `.at(0)` to find the first element in an array that satisfies a given condition. This pattern is less efficient and less readable than using `Array.prototype.find()`. It iterates over the array applying a filter and accesses the first element which can be simplified using `find`.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-find.mdx#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\n[1, 2, 3].filter(x => x > 1)[0];\n\n[1, 2, 3].filter(x => x > 1).at(0);\n```\n\n----------------------------------------\n\nTITLE: Correct code with explicit accessibility (TypeScript)\nDESCRIPTION: Presents examples of correct TypeScript code where all class members have explicit accessibility modifiers (public, private) when the 'accessibility' option is set to 'explicit'. This adheres to the 'explicit-member-accessibility' rule.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/explicit-member-accessibility.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nclass Animal {\n  public constructor(\n    public breed,\n    name,\n  ) {\n    // Parameter property and constructor\n    this.animalName = name;\n  }\n  private animalName: string; // Property\n  get name(): string {\n    // get accessor\n    return this.animalName;\n  }\n  set name(value: string) {\n    // set accessor\n    this.animalName = value;\n  }\n  public walk() {\n    // method\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating ESLint Configuration (CJS)\nDESCRIPTION: This JavaScript snippet demonstrates how to update an ESLint configuration file (.eslintrc.cjs) when upgrading to typescript-eslint v6. It involves modifying the `extends` array to use the new recommended-type-checked and stylistic-type-checked configurations, and updating the `project` setting in `parserOptions`.  The tsconfigRootDir is set to the directory where the tsconfig.json file is located.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/website/blog/2023-07-09-announcing-typescript-eslint-v6.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  extends: [\n    'eslint:recommended',\n    // Removed lines start\n    'plugin:@typescript-eslint/recommended',\n    'plugin:@typescript-eslint/recommended-requiring-type-checking',\n    // Removed lines end\n    // Added lines start\n    'plugin:@typescript-eslint/recommended-type-checked',\n    'plugin:@typescript-eslint/stylistic-type-checked',\n    // Added lines end\n  ],\n  plugins: ['@typescript-eslint'],\n  parser: '@typescript-eslint/parser',\n  parserOptions: {\n    // Remove this line\n    project: './tsconfig.json',\n    // Add this line\n    project: true,\n    tsconfigRootDir: __dirname,\n  },\n  root: true,\n};\n```\n\n----------------------------------------\n\nTITLE: Custom Lint Rule Example in TypeScript\nDESCRIPTION: This snippet demonstrates a custom lint rule that detects when a `fetch()` call is sending data to an intake API using an old format (tuple) and suggests a code fix to migrate to a key-value object format.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/website/blog/2024-09-30-typed-linting.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { endpoints } from \"~/api\";\n\nconst rawData = [\"key\", \"value\"] as const;\n\nawait fetch(endpoints.intake, {\n  data: JSON.stringify(rawData)\n  //                   ~~~~~~~\n  // Don't pass a tuple to endpoints.intake. Pass a key-value object instead.\n  // eslint(@my-team/custom-rule)\n  // ...\n  method: \"POST\",\n});\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of `no-inferrable-types` in TypeScript\nDESCRIPTION: This code snippet demonstrates incorrect usage of the `no-inferrable-types` rule in TypeScript.  It shows examples where explicit type annotations are used when TypeScript can infer the type from the initialized value, leading to unnecessary verbosity. It covers primitive types (number, string, boolean), `null`, `undefined`, `RegExp`, and `Symbol` as well as class properties and function parameters. The presence of the explicit type annotation is flagged by the rule.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-inferrable-types.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst a: bigint = 10n;\nconst a: bigint = BigInt(10);\nconst a: boolean = !0;\nconst a: boolean = Boolean(null);\nconst a: boolean = true;\nconst a: null = null;\nconst a: number = 10;\nconst a: number = Infinity;\nconst a: number = NaN;\nconst a: number = Number('1');\nconst a: RegExp = /a/;\nconst a: RegExp = new RegExp('a');\nconst a: string = `str`;\nconst a: string = String(1);\nconst a: symbol = Symbol('a');\nconst a: undefined = undefined;\nconst a: undefined = void someValue;\n\nclass Foo {\n  prop: number = 5;\n}\n\nfunction fn(a: number = 5, b: boolean = true) {}\n```\n\n----------------------------------------\n\nTITLE: Complex ESLint configuration with multiple plugins and rules\nDESCRIPTION: This comprehensive example demonstrates a more complex ESLint configuration using flat configs. It configures ignores for specific directories, enables the TypeScript-ESLint plugin and parser, uses type-aware linting with specific rules, disables type-aware linting on JavaScript files, and enables Jest-specific rules on test files. This showcases how to integrate multiple plugins and tailor configurations for different file types.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/packages/TypeScript_ESLint.mdx#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// @ts-check\n\nimport eslint from '@eslint/js';\nimport jestPlugin from 'eslint-plugin-jest';\nimport tseslint from 'typescript-eslint';\n\nexport default tseslint.config(\n  {\n    // config with just ignores is the replacement for `.eslintignore`\n    ignores: ['**/build/**', '**/dist/**', 'src/some/file/to/ignore.ts'],\n  },\n  eslint.configs.recommended,\n  {\n    plugins: {\n      '@typescript-eslint': tseslint.plugin,\n      jest: jestPlugin,\n    },\n    languageOptions: {\n      parser: tseslint.parser,\n      parserOptions: {\n        projectService: true,\n      },\n    },\n    rules: {\n      '@typescript-eslint/no-floating-promises': 'error',\n      // ...\n    },\n  },\n  {\n    // disable type-aware linting on JS files\n    files: ['**/*.js'],\n    extends: [tseslint.configs.disableTypeChecked],\n  },\n  {\n    // enable jest rules on test files\n    files: ['test/**'],\n    extends: [jestPlugin.configs['flat/recommended']],\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Boolean Expressions with Explicit Checks - TypeScript\nDESCRIPTION: These examples demonstrate correct usage by explicitly checking nullable values against null or undefined before using them in boolean expressions. Using explicit checks ensures that the boolean condition accurately reflects the intended logic, avoiding implicit conversions that could lead to errors. Additionally, `any` types are converted to boolean explicitly using `Boolean()`.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/strict-boolean-expressions.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// nullable values should be checked explicitly against null or undefined\nlet num: number | undefined = 0;\nif (num != null) {\n  console.log('num is defined');\n}\n\nlet str: string | null = null;\nif (str != null && !str) {\n  console.log('str is empty');\n}\n\nfunction foo(bool?: boolean) {\n  if (bool ?? false) {\n    bar();\n  }\n}\n\n// `any` types should be converted to boolean explicitly\nconst foo = (arg: any) => (Boolean(arg) ? 1 : 0);\n```\n\n----------------------------------------\n\nTITLE: Incorrect Promise usage in conditionals (checksConditionals: true)\nDESCRIPTION: These code snippets demonstrate incorrect Promise usage within conditional statements when the checksConditionals option is enabled.  The rule flags these examples because Promises are used directly in if statements, ternary operators, array filters, and while loops without awaiting their resolution, leading to potentially unexpected behavior. The option `checksConditionals` is set to `true`.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-misused-promises.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst promise = Promise.resolve('value');\n\nif (promise) {\n  // Do something\n}\n\nconst val = promise ? 123 : 456;\n\n[1, 2, 3].filter(() => promise);\n\nwhile (promise) {\n  // Do something\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring checksConditionals option in no-misused-promises\nDESCRIPTION: This code snippet shows how to disable the checksConditionals option in the @typescript-eslint/no-misused-promises rule.  Disabling this prevents the rule from checking conditional statements that use Promises directly without awaiting them.  The configuration sets the rule to \"error\" and disables the \"checksConditionals\" sub-option.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-misused-promises.mdx#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"@typescript-eslint/no-misused-promises\": [\n    \"error\",\n    {\n      \"checksConditionals\": false\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Correct function overload signatures\nDESCRIPTION: This code snippet demonstrates correct usage of function overload signatures according to the `adjacent-overload-signatures` rule. The `foo` function's overloads are placed consecutively in the namespace, type, and interface.  The final example demonstrates that function overloads must be grouped together, but their placement in the file as a whole is flexible.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/adjacent-overload-signatures.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare namespace Foo {\n  export function foo(s: string): void;\n  export function foo(n: number): void;\n  export function foo(sn: string | number): void;\n  export function bar(): void;\n}\n\ntype Foo = {\n  foo(s: string): void;\n  foo(n: number): void;\n  foo(sn: string | number): void;\n  bar(): void;\n};\n\ninterface Foo {\n  foo(s: string): void;\n  foo(n: number): void;\n  foo(sn: string | number): void;\n  bar(): void;\n}\n\nclass Foo {\n  foo(s: string): void;\n  foo(n: number): void;\n  foo(sn: string | number): void {}\n  bar(): void {}\n}\n\nexport function bar(): void;\nexport function foo(s: string): void;\nexport function foo(n: number): void;\nexport function foo(sn: string | number): void;\n```\n\n----------------------------------------\n\nTITLE: Correct Export Example (typescript)\nDESCRIPTION: This example demonstrates the correct usage of an export.  There is no need for an `export {}` as the file already contains a named export.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-useless-empty-export.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport const value = 'Hello, world!';\n```\n\n----------------------------------------\n\nTITLE: Correct code with ignoreDeclarationMerge: true\nDESCRIPTION: Shows examples of correct code that will not trigger the no-redeclare rule when ignoreDeclarationMerge is set to true. This includes cases where interfaces, namespaces, classes, functions, and enums are merged.  The option is configured inline using the 'option' property.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-redeclare.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface A {\n  prop1: 1;\n}\ninterface A {\n  prop2: 2;\n}\n\nnamespace Foo {\n  export const a = 1;\n}\nnamespace Foo {\n  export const b = 2;\n}\n\nclass Bar {}\nnamespace Bar {}\n\nfunction Baz() {}\nnamespace Baz {}\n```\n\n----------------------------------------\n\nTITLE: Banning Usage of Unsafe Types with `@typescript-eslint/no-unsafe-*` rules\nDESCRIPTION: This snippet illustrates how the `@typescript-eslint/no-unsafe-*` rules detect unsafe uses of `any` typed values. The `parseShapeFromData` function demonstrates violations of `no-unsafe-assignment`, `no-unsafe-member-access`, and `no-unsafe-return` due to the untyped result of `JSON.parse` being treated as `any`. This lack of type validation leads to potential runtime errors, which the lint rules flag.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/website/blog/2025-01-21-avoiding-anys.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Shape {\n  label: string;\n  value: number;\n}\n\nexport function parseShapeFromData(raw: string): Shape {\n  const shape = JSON.parse(raw);\n  //    ~~~~~~~~~~~~~~~~~~~~~~~\n  // eslint(@typescript-eslint/no-unsafe-assignment):\n  // Unsafe assignment of an `any` value.\n\n  console.log('Making a shape with value:', shape.value);\n  //                                              ~~~~\n  // eslint(@typescript-eslint/no-unsafe-member-access):\n  // Unsafe member access .value of an `any` value.\n\n  return shape;\n  // eslint(@typescript-eslint/no-unsafe-return):\n  // Unsafe return of an `any` value.\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Example: ReadonlyArray with Type Parameter Removed TypeScript\nDESCRIPTION: This example demonstrates the correct way to declare the `length` function with `ReadonlyArray` without using an unnecessary type parameter. The type parameter `T` is removed and replaced with `unknown`.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-unnecessary-type-parameters.mdx#_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\ndeclare function length(array: ReadonlyArray<unknown>): number;\n```\n\n----------------------------------------\n\nTITLE: Setting project to true in parserOptions - JavaScript\nDESCRIPTION: This JavaScript code snippet shows how to configure ESLint to use the `@typescript-eslint/parser` and enable automatic TSConfig detection for type-aware linting. By setting `parserOptions.project` to `true`, the parser will search for the nearest `tsconfig.json` file relative to each linted file. `tsconfigRootDir` is set to the project's root directory.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/website/blog/2023-09-18-parser-options-project-true.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  // ...\n  parserOptions: {\n    project: true,\n    tsconfigRootDir: __dirname,\n  },\n  // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Separate Type Imports Fix Style\nDESCRIPTION: This example shows the correct code when `fixStyle` is set to `separate-type-imports`. It uses `import type` to specifically import the type only.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/consistent-type-imports.mdx#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport type { Foo } from 'Foo';\nimport type Bar from 'Bar';\ntype T = Foo;\nconst x: Bar = 1;\n```\n\n----------------------------------------\n\nTITLE: Extending with Stylistic Config (Flat)\nDESCRIPTION: This snippet demonstrates how to extend the ESLint configuration using the `stylistic` configuration, using the Flat Config style.  It enforces code style conventions.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/users/Shared_Configurations.mdx#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nexport default tseslint.config(\n  tseslint.configs.stylistic,\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring parserOptions.project in Flat Config\nDESCRIPTION: This JavaScript code snippet demonstrates how to configure the `parserOptions.project` setting within a Flat Config ESLint setup for a monorepo with multiple tsconfig.json files. It specifies an array of paths to tsconfig.json files, including one for the root and one for each package within the monorepo. The `tsconfigRootDir` is also set to the current directory.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/troubleshooting/typed-linting/Monorepos.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default tseslint.config(\n  eslint.configs.recommended,\n  tseslint.configs.recommendedTypeChecked,\n  {\n    languageOptions: {\n      parserOptions: {\n        // Remove this line\n        project: true,\n        // Add this line\n        project: ['./tsconfig.eslint.json', './packages/*/tsconfig.json'],\n        tsconfigRootDir: import.meta.dirname,\n      },\n    },\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Correct default parameter placement (TypeScript)\nDESCRIPTION: Demonstrates correct placement of default parameters in TypeScript functions and class constructors.  Default and optional parameters are placed at the end of the parameter list, adhering to the `default-param-last` rule.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/default-param-last.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction f(a = 0) {}\nfunction f(a: number, b = 0) {}\nfunction f(a: number, b?: number) {}\nfunction f(a: number, b?: number, c = 0) {}\nfunction f(a: number, b = 0, c?: number) {}\nclass Foo {\n  constructor(\n    public a,\n    private b = 0,\n  ) {}\n}\nclass Foo {\n  constructor(\n    public a,\n    private b?: number,\n  ) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Enum with Duplicate Number Values - TypeScript\nDESCRIPTION: This code snippet demonstrates an incorrect usage of enums where multiple members are initialized with the same numeric value. The `no-duplicate-enum-values` rule flags this as an error because duplicate values can lead to unexpected behavior. No dependencies are required.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-duplicate-enum-values.mdx#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nenum E {\n  A = 0,\n  B = 0,\n}\n```\n\n----------------------------------------\n\nTITLE: Correct generic type constraints in TypeScript\nDESCRIPTION: This snippet demonstrates the correct usage of generic type parameters in TypeScript, where the unnecessary `extends any` or `extends unknown` constraints are removed. This allows the type parameter to default to `unknown`, which is the desired behavior in most cases where a constraint is not explicitly needed. It shows examples for interfaces, types, classes, and functions.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-unnecessary-type-constraint.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface Foo<T> {}\n\ntype Bar<T> = {};\n\nclass Baz<T> {\n  qux<U>() {}\n}\n\nconst Quux = <T>() => {};\n\nfunction Quuz<T>() {}\n```\n\n----------------------------------------\n\nTITLE: Correct code with non-public modifiers when accessibility is no-public (TypeScript)\nDESCRIPTION: Illustrates correct TypeScript code where class members are either 'protected' or 'private' when the 'accessibility' option is set to 'no-public'. This satisfies the rule's requirement of avoiding explicit 'public' modifiers.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/explicit-member-accessibility.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nclass Animal {\n  constructor(\n    protected breed,\n    name,\n  ) {\n    // Parameter property and constructor\n    this.name = name;\n  }\n  private animalName: string; // Property\n  get name(): string {\n    // get accessor\n    return this.animalName;\n  }\n  private set name(value: string) {\n    // set accessor\n    this.animalName = value;\n  }\n  protected walk() {\n    // method\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing recommended-type-checked with Legacy Config and override\nDESCRIPTION: This code snippet shows how to extend the `recommended-type-checked` configuration in a legacy `.eslintrc.js` file, with an override to disable type checking on `.js` files.  It sets the `extends` property to include `eslint:recommended` and `plugin:@typescript-eslint/recommended-type-checked`. It also configures the parser and parserOptions and adds an `overrides` array that disables type checking on JavaScript files using `plugin:@typescript-eslint/disable-type-checked`.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/users/Shared_Configurations.mdx#_snippet_18\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  extends: [\n    'eslint:recommended',\n    'plugin:@typescript-eslint/recommended-type-checked',\n  ],\n  parser: '@typescript-eslint',\n  parserOptions: {\n    projectService: true,\n    __tsconfigRootDir: __dirname,\n  },\n  root: true,\n  // Added lines start\n  overrides: [\n    {\n      files: ['**/*.js'],\n      extends: ['plugin:@typescript-eslint/disable-type-checked'],\n    },\n  ],\n  // Added lines end\n};\n```\n\n----------------------------------------\n\nTITLE: Correct: Necessary Condition - String Truthiness Check\nDESCRIPTION: This example shows the correct usage of a conditional statement where the string argument `arg` is checked for truthiness.  The check is necessary since `arg` might be an empty string ('').\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-unnecessary-condition.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nfunction foo(arg: string) {\n  // Necessary, since arg might be ''.\n  if (arg) {\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint with tseslint.config for TypeScript projects\nDESCRIPTION: This code snippet demonstrates how to use the `tseslint.config` helper function to create a flat ESLint configuration file. It extends both the core ESLint recommended configuration and the typescript-eslint recommended configuration, merging them into a single configuration object. This setup is a common starting point for TypeScript projects using ESLint.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/packages/TypeScript_ESLint.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// @ts-check\n\nimport eslint from '@eslint/js';\nimport tseslint from 'typescript-eslint';\n\nexport default tseslint.config(\n  eslint.configs.recommended,\n  tseslint.configs.recommended,\n);\n```\n\n----------------------------------------\n\nTITLE: Correct Promise Handling Example\nDESCRIPTION: This code snippet demonstrates correct handling of Promises, including awaiting the Promise, voiding it, using `.then()` with two arguments, using `.catch()`, awaiting the result of `.finally()`, and awaiting the result of a Promise concurrency method. These examples show how to avoid the 'no-floating-promises' rule violations.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-floating-promises.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst promise = new Promise((resolve, reject) => resolve('value'));\nawait promise;\n\nasync function returnsPromise() {\n  return 'value';\n}\n\nvoid returnsPromise();\n\nreturnsPromise().then(\n  () => {},\n  () => {},\n);\n\nPromise.reject('value').catch(() => {});\n\nawait Promise.reject('value').finally(() => {});\n\nawait Promise.all([1, 2, 3].map(async x => x + 1));\n```\n\n----------------------------------------\n\nTITLE: Incorrect usage examples of eval()-like functions in TypeScript\nDESCRIPTION: This code snippet contains multiple examples of incorrect usage of `setTimeout`, `setInterval`, `setImmediate`, `execScript`, and `new Function`. These functions are being passed strings which are then evaluated as code, leading to potential security vulnerabilities and performance issues. The `typescript-eslint/no-implied-eval` rule aims to eliminate these patterns.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-implied-eval.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nsetTimeout('alert(`Hi!`);', 100);\n\nsetInterval('alert(`Hi!`);', 100);\n\nsetImmediate('alert(`Hi!`)');\n\nexecScript('alert(`Hi!`)');\n\nwindow.setTimeout('count = 5', 10);\n\nwindow.setInterval('foo = bar', 10);\n\nconst fn = '() = {}';\nsetTimeout(fn, 100);\n\nconst fn = () => {\n  return 'x = 10';\n};\nsetTimeout(fn(), 100);\n\nconst fn = new Function('a', 'b', 'return a + b');\n```\n\n----------------------------------------\n\nTITLE: Naming Convention - Camel Case or Upper Case Variables\nDESCRIPTION: This configuration enforces that all variables are either in camelCase or UPPER_CASE. It uses the \"variable\" selector and provides an array of allowed formats.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/naming-convention.mdx#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"@typescript-eslint/naming-convention\": [\n    \"error\",\n    {\n      \"selector\": \"variable\",\n      \"format\": [\"camelCase\", \"UPPER_CASE\"]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Correct `checkBigInt` example - TypeScript\nDESCRIPTION: Example demonstrating the correct code when using the `checkBigInt` option. It demonstrates the use of optional chaining.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-optional-chain.mdx#_snippet_14\n\nLANGUAGE: ts\nCODE:\n```\ndeclare const thing: bigint;\n\nthing?.toString();\n```\n\n----------------------------------------\n\nTITLE: Correct Explicit Module Boundary Types - TypeScript\nDESCRIPTION: Examples of correct code that adheres to the `explicit-module-boundary-types` rule. These snippets demonstrate proper use of explicit return type annotations and argument types on exported functions and public class methods.  This ensures clarity and enhances type safety.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/explicit-module-boundary-types.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// A function with no return value (void)\nexport function test(): void {\n  return;\n}\n\n// A return value of type string\nexport var arrowFn = (): string => 'test';\n\n// All arguments should be typed\nexport var arrowFn = (arg: string): string => `test ${arg}`;\nexport var arrowFn = (arg: unknown): string => `test ${arg}`;\n\nexport class Test {\n  // A class method with no return value (void)\n  method(): void {\n    return;\n  }\n}\n\n// The function does not apply because it is not an exported function.\nfunction test() {\n  return;\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Constructor Parameter Usage in TypeScript\nDESCRIPTION: This code snippet demonstrates the correct usage of parameter properties in a TypeScript class constructor. It shows how to define a public member `bar` directly in the constructor signature, eliminating the need for an explicit assignment within the constructor body, thus resulting in more concise and readable code.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-unnecessary-parameter-property-assignment.mdx#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nclass Foo {\n  constructor(public bar: string) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Safe Unary Minus Example - Correct TypeScript\nDESCRIPTION: This code showcases correct usages of the unary minus operator in TypeScript, adhering to the `no-unsafe-unary-minus` rule. It demonstrates applying the operator to number, bigint, and variables declared as number, bigint, number | bigint, any and a union of numbers. This is safe because the operator is applied to numeric or any types.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-unsafe-unary-minus.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n-42;\n-42n;\n\ndeclare const a: number;\n-a;\n\ndeclare const b: number;\n-b;\n\ndeclare const c: number | bigint;\n-c;\n\ndeclare const d: any;\n-d;\n\ndeclare const e: 1 | 2;\n-e;\n```\n\n----------------------------------------\n\nTITLE: Fixing Type with Assertion\nDESCRIPTION: This code snippet illustrates a scenario where the TypeScript compiler infers the type of a variable as a literal type (`false`) and how to fix it using type assertion. By asserting `let condition = false as boolean`, you explicitly tell the compiler that the variable can hold any boolean value, preventing the `no-unnecessary-condition` rule from incorrectly reporting an unnecessary conditional.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/troubleshooting/typed-linting/index.mdx#_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nlet condition = false;\n\nconst f = () => (condition = true);\nf();\n\nif (condition) {\n  //^^^^^^^^^ Unnecessary conditional, value is always falsy.\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of `no-inferrable-types` in TypeScript\nDESCRIPTION: This code snippet demonstrates correct usage of the `no-inferrable-types` rule in TypeScript.  It shows examples where explicit type annotations are omitted, allowing TypeScript to infer the type from the initialized value, leading to cleaner and more concise code. It covers primitive types (number, string, boolean), `null`, `undefined`, `RegExp`, and `Symbol` as well as class properties and function parameters. The absence of explicit type annotations where inference is possible is considered valid by the rule.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-inferrable-types.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst a = 10n;\nconst a = BigInt(10);\nconst a = !0;\nconst a = Boolean(null);\nconst a = true;\nconst a = null;\nconst a = 10;\nconst a = Infinity;\nconst a = NaN;\nconst a = Number('1');\nconst a = /a/;\nconst a = new RegExp('a');\nconst a = `str`;\nconst a = String(1);\nconst a = Symbol('a');\nconst a = undefined;\nconst a = void someValue;\n\nclass Foo {\n  prop = 5;\n}\n\nfunction fn(a = 5, b = true) {}\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint Legacy Config with Project Paths in JS\nDESCRIPTION: This JavaScript code snippet illustrates how to configure ESLint using the legacy config format to prevent slow linting caused by wide includes in the `project` parser option. It shows how to modify the `project` property within `parserOptions` to avoid performance bottlenecks. It includes removing an overly broad glob pattern for tsconfig files and replacing it with a more specific path.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/troubleshooting/typed-linting/Performance.mdx#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  extends: [\n    'eslint:recommended',\n    'plugin:@typescript-eslint/recommended-requiring-type-checking',\n  ],\n  parser: '@typescript-eslint/parser',\n  parserOptions: {\n    tsconfigRootDir: __dirname,\n    // Remove this line\n    project: ['./**/tsconfig.json'],\n    // Add this line\n    project: ['./packages/*/tsconfig.json'],\n  },\n  plugins: ['@typescript-eslint'],\n  root: true,\n};\n```\n\n----------------------------------------\n\nTITLE: Naming Convention Configuration - Camel Case for Variables\nDESCRIPTION: This configuration enforces that all variables, functions, and properties follow the camelCase naming convention. It uses the \"variableLike\" selector to apply the rule to all variable-like entities.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/naming-convention.mdx#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"@typescript-eslint/naming-convention\": [\n    \"error\",\n    { \"selector\": \"variableLike\", \"format\": [\"camelCase\"] }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Readonly Parameter Types Example (TypeScript)\nDESCRIPTION: Demonstrates examples of correct usage where function parameters are typed as readonly, preventing accidental mutation of inputs. Shows usage with arrays, tuples, objects, custom types, primitive types, function signatures, enums, and symbols. Illustrates the rule's proper application.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-readonly-parameter-types.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction array1(arg: readonly string[]) {}\nfunction array2(arg: readonly (readonly string[])[]) {}\nfunction array3(arg: readonly [string, number]) {}\nfunction array4(arg: readonly [readonly string[], number]) {}\n// the above examples work the same if you use ReadonlyArray<T> instead\n\nfunction object1(arg: { readonly prop: string }) {}\nfunction object2(arg: { readonly prop: string; readonly prop2: string }) {}\nfunction object3(arg: { readonly prop: { readonly prop2: string } }) {}\n// the above examples work the same if you use Readonly<T> instead\n\ninterface CustomArrayType extends ReadonlyArray<string> {\n  readonly prop: string;\n}\nfunction custom1(arg: Readonly<CustomArrayType>) {}\n// interfaces that extend the array types are not considered arrays, and thus must be made readonly.\n\ninterface CustomFunction {\n  (): void;\n  readonly prop: string;\n}\nfunction custom2(arg: CustomFunction) {}\n\nfunction union(arg: readonly string[] | ReadonlyArray<number>) {}\n\nfunction primitive1(arg: string) {}\nfunction primitive2(arg: number) {}\nfunction primitive3(arg: boolean) {}\nfunction primitive4(arg: unknown) {}\nfunction primitive5(arg: null) {}\nfunction primitive6(arg: undefined) {}\nfunction primitive7(arg: any) {}\nfunction primitive8(arg: never) {}\nfunction primitive9(arg: string | number | undefined) {}\n\nfunction fnSig(arg: () => void) {}\n\nenum Foo {\n  a,\n  b,\n}\nfunction enumArg(arg: Foo) {}\n\nfunction symb1(arg: symbol) {}\nconst customSymbol = Symbol('a');\nfunction symb2(arg: typeof customSymbol) {}\n\n// function types\ninterface Foo {\n  (arg: readonly string[]): void;\n}\ninterface Foo {\n  new (arg: readonly string[]): void;\n}\nconst x = { foo(arg: readonly string[]): void {} };\nfunction foo(arg: readonly string[]);\ntype Foo = (arg: readonly string[]) => void;\ninterface Foo {\n  foo(arg: readonly string[]): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage: Returning specific types (TypeScript)\nDESCRIPTION: This snippet shows how to correctly return values with specific types. By explicitly typing the return values, it avoids using `any` and ensures type safety. It prevents the `no-unsafe-return` rule from flagging errors.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-unsafe-return.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction foo1() {\n  return 1;\n}\nfunction foo2() {\n  return Object.create(null) as Record<string, unknown>;\n}\n\nconst foo3 = () => [];\nconst foo4 = () => ['a'];\n\nasync function foo5() {\n  return Promise.resolve(1);\n}\n\nfunction assignability1(): Set<string> {\n  return new Set<string>(['foo']);\n}\ntype TAssign = () => Set<string>;\nconst assignability2: TAssign = () => new Set(['foo']);\n```\n\n----------------------------------------\n\nTITLE: Configuring parserOptions.project in Legacy Config\nDESCRIPTION: This JavaScript code snippet illustrates configuring `parserOptions.project` in a legacy ESLint configuration file (`.eslintrc.js`) for a monorepo with multiple `tsconfig.json` files. It defines an array of paths pointing to both the root `tsconfig.eslint.json` and individual package `tsconfig.json` files using a glob pattern. The `tsconfigRootDir` is set to the directory of the ESLint configuration file.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/troubleshooting/typed-linting/Monorepos.mdx#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n/* eslint-env node */\nmodule.exports = {\n  extends: [\n    'eslint:recommended',\n    'plugin:@typescript-eslint/recommended-type-checked',\n  ],\n  parser: '@typescript-eslint/parser',\n  parserOptions: {\n    // Remove this line\n    project: true,\n    // Add this line\n    project: ['./tsconfig.eslint.json', './packages/*/tsconfig.json'],\n    tsconfigRootDir: import.meta.dirname,\n  },\n  plugins: ['@typescript-eslint'],\n  root: true,\n};\n```\n\n----------------------------------------\n\nTITLE: Unsafe Unary Minus Example - Incorrect TypeScript\nDESCRIPTION: This code demonstrates incorrect usage of the unary minus operator in TypeScript, according to the `no-unsafe-unary-minus` rule.  It applies the operator to a string and an empty object, which will result in NaN. The rule aims to prevent this type of unsafe operation.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-unsafe-unary-minus.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ndeclare const a: string;\n-a;\n\ndeclare const b: {};\n-b;\n```\n\n----------------------------------------\n\nTITLE: Correct safe assignment examples in TypeScript\nDESCRIPTION: These examples demonstrate correct usages that the `no-unsafe-assignment` rule will not flag. They involve safe assignments where the types are compatible and no `any` type is implicitly or explicitly assigned to a more specific type.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-unsafe-assignment.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst x = 1,\n  y = 1;\nconst [x] = [1];\n[x] = [1] as [number];\n\nfunction foo(a = 1) {}\nclass Foo {\n  constructor(private a = 1) {}\n}\nclass Foo {\n  private a = 1;\n}\n\n// generic position examples\nconst x: Set<string> = new Set<string>();\nconst x: Map<string, string> = new Map<string, string>();\nconst x: Set<string[]> = new Set<string[]>();\nconst x: Set<Set<Set<string>>> = new Set<Set<Set<string>>>();\n```\n\n----------------------------------------\n\nTITLE: Correct Namespace Imports - TypeScript\nDESCRIPTION: This snippet demonstrates the usage of namespace imports, where all exports from a module are imported into a single object.  This allows accessing the exported function through the object. The sayHello function is defined in utilities.ts and imported in consumers.ts\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-extraneous-class.mdx#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// utilities.ts\nexport function sayHello() {\n  console.log('Hello, world!');\n}\n\n// consumers.ts\nimport * as utilities from './utilities';\n\nutilities.sayHello();\n```\n\n----------------------------------------\n\nTITLE: Correct Optional Chain Examples - TypeScript\nDESCRIPTION: Examples of correct code using optional chaining (`?.`).  This demonstrates the concise syntax for accessing nested properties and calling methods when dealing with potentially null or undefined values.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-optional-chain.mdx#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nfoo?.a?.b?.c;\nfoo?.['a']?.b?.c;\nfoo?.a?.b?.method?.();\n\nfoo?.a?.b?.c?.d?.e;\n\n!foo?.bar;\n!foo?.[bar];\n!foo?.bar?.baz?.();\n```\n\n----------------------------------------\n\nTITLE: Incorrect Duplicate Type Constituents in TypeScript\nDESCRIPTION: This code snippet demonstrates examples of incorrect usage of union and intersection types where duplicate constituents are present.  The `no-duplicate-type-constituents` rule is designed to flag these types.  It also shows an example of explicitly listing `undefined` in a type union for an optional parameter which is considered unnecessary.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-duplicate-type-constituents.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype T1 = 'A' | 'A';\n\ntype T2 = string | string | number;\n\ntype T3 = { a: string } & { a: string };\n\ntype T4 = [1, 2, 3] | [1, 2, 3];\n\ntype StringA = string;\ntype StringB = string;\ntype T5 = StringA | StringB;\n\nconst fn = (a?: string | undefined) => {};\n```\n\n----------------------------------------\n\nTITLE: Install ESLint, TypeScript, and Plugins\nDESCRIPTION: Installs ESLint, TypeScript, and the necessary @typescript-eslint packages as development dependencies using npm. This command prepares the project for static analysis of TypeScript code using ESLint.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/getting-started/Legacy_ESLint_Setup.mdx#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nnpm install --save-dev @typescript-eslint/parser @typescript-eslint/eslint-plugin eslint typescript\n```\n\n----------------------------------------\n\nTITLE: Disallow Type Annotations\nDESCRIPTION: This example showcases incorrect code when the `disallowTypeAnnotations` option is set to `true`. It attempts to use `import()` directly in type annotations, which is disallowed by the rule when enabled. The rule enforces the use of standard type imports and prevents the usage of `import()` in type annotations.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/consistent-type-imports.mdx#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype T = import('Foo').Foo;\nconst x: import('Bar') = 1;\n```\n\n----------------------------------------\n\nTITLE: Deprecated Code Detection in TypeScript\nDESCRIPTION: This snippet demonstrates how a lint rule using type information can detect calls to deprecated code. It shows an `index.ts` file importing a function `work` from `worker.ts` and calling it. Without type information, it's impossible to know if `work` is deprecated.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/website/blog/2024-09-30-typed-linting.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { work } from './worker';\n\n// Is this safe? Does calling work violate any rules? We don't know!\nwork();\n```\n\n----------------------------------------\n\nTITLE: Correct @ts-expect-error Usage in TypeScript\nDESCRIPTION: This code snippet demonstrates the correct usage of the `@ts-expect-error` directive in TypeScript code. It replaces the `@ts-ignore` directives from the previous example with `@ts-expect-error`, which is the recommended practice. This ensures that the compiler will error if the ignored line does not actually produce an error.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-ts-expect-error.mdx#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n// @ts-expect-error\nconst str: string = 1;\n\n/**\n * Explaining comment\n *\n * @ts-expect-error */\nconst multiLine: number = 'value';\n\n/** @ts-expect-error */\nconst block: string = 1;\n\nconst isOptionEnabled = (key: string): boolean => {\n  // @ts-expect-error: if key isn't in globalOptions it'll be undefined which is false\n  return !!globalOptions[key];\n};\n```\n\n----------------------------------------\n\nTITLE: Disallowing require() imports - Correct\nDESCRIPTION: Demonstrates the correct usage of ES module imports. It shows how to replace `require()` with `import` statements for importing modules.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-require-imports.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as lib1 from 'lib1';\nimport { lib2 } from 'lib2';\nimport * as lib3 from 'lib3';\n```\n\n----------------------------------------\n\nTITLE: Disallow Namespaces - Correct Examples - TypeScript\nDESCRIPTION: These examples demonstrate code that adheres to the `no-namespace` rule with default options. Specifically, declaring a module using `declare module 'foo' {}` is considered correct because it describes an external API.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-namespace.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare module 'foo' {}\n\n// anything inside a d.ts file\n```\n\n----------------------------------------\n\nTITLE: Mapping Types: Immutable Type - TypeScript\nDESCRIPTION: Shows the use of type aliases for creating mapped types, allowing quick modifications to existing types. This code defines an `Immutable<T>` type alias that transforms all properties of type `T` to readonly. It demonstrates its usage with a `Person` type to create an `ImmutablePerson` type where all properties are readonly, preventing modification after initialization.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-type-alias.mdx#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype Immutable<T> = { readonly [P in keyof T]: T[P] };\n\ntype Person = {\n  name: string;\n  age: number;\n};\n\ntype ImmutablePerson = Immutable<Person>;\n\nvar person: ImmutablePerson = { name: 'John', age: 30 };\nperson.name = 'Brad'; // error, readonly property\n```\n\n----------------------------------------\n\nTITLE: Extend ESLint Config with Strict and Stylistic Rules\nDESCRIPTION: Extends the ESLint configuration by adding the `strict` and `stylistic` rule sets from typescript-eslint. This configuration enables more opinionated rules and enforces consistent styling.  The `tseslint.config` helper is used to merge the configurations. Removes the line for recommended and replaces with strict and stylistic.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/getting-started/Quickstart.mdx#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport default tseslint.config(\n  eslint.configs.recommended,\n  // Remove this line\n  tseslint.configs.recommended,\n  // Add this line\n  tseslint.configs.strict,\n  // Add this line\n  tseslint.configs.stylistic,\n);\n```\n\n----------------------------------------\n\nTITLE: Incorrect code without accessibility modifiers (TypeScript)\nDESCRIPTION: Illustrates examples of incorrect TypeScript code where class members lack explicit accessibility modifiers when the default configuration is used.  This violates the 'explicit-member-accessibility' rule.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/explicit-member-accessibility.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nclass Animal {\n  constructor(name) {\n    // No accessibility modifier\n    this.animalName = name;\n  }\n  animalName: string; // No accessibility modifier\n  get name(): string {\n    // No accessibility modifier\n    return this.animalName;\n  }\n  set name(value: string) {\n    // No accessibility modifier\n    this.animalName = value;\n  }\n  walk() {\n    // method\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Allow option configuration\nDESCRIPTION: This JSON configures the `allow` option, specifying that `apiV1` from \"file\" and `escape` from \"lib\" are allowed to be used even though they are deprecated.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-deprecated.mdx#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"allow\": [\n    { \"from\": \"file\", \"name\": \"apiV1\" },\n    { \"from\": \"lib\", \"name\": \"escape\" }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Global Linking Script (Shell)\nDESCRIPTION: This script iterates through the packages directory within the typescript-eslint repository and navigates into each package's directory. It is intended to be used with a package manager's global link command to make the packages available globally for linking into other projects. The user is expected to replace the comment with the appropriate link command for their package manager.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/contributing/local-development/Local_Linking.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nfor package in ./packages/*; do\n    cd $package\n    # Insert your package manager's global link command here\n    cd ../..\ndone\n```\n\n----------------------------------------\n\nTITLE: Incorrect Type Assertion with Angle Brackets\nDESCRIPTION: This code showcases an incorrect type assertion using angle brackets. The type assertion `<number>` on the expression `(3 + 5)` is unnecessary because the expression already evaluates to a number. It flags redundant type assertions.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-unnecessary-type-assertion.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst foo = <number>(3 + 5);\n```\n\n----------------------------------------\n\nTITLE: Correct Enum Initialization TypeScript\nDESCRIPTION: This code snippet demonstrates correct enum initialization, where each enum member is explicitly assigned a value. This ensures predictable enum values, preventing potential bugs.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-enum-initializers.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nenum Status {\n  Open = 'Open',\n  Close = 'Close',\n}\n\nenum Direction {\n  Up = 1,\n  Down = 2,\n}\n\nenum Color {\n  Red = 'Red',\n  Green = 'Green',\n  Blue = 'Blue',\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect spread usage with classes (TypeScript)\nDESCRIPTION: This snippet shows the incorrect usage of the spread operator with classes and class instances.  Spreading a class copies only the static properties, and spreading an instance copies only the own properties, losing the inheritance chain and methods.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-misused-spread.mdx#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\ndeclare class Box {\n  value: number;\n}\nconst boxSpread = { ...Box };\n\ndeclare const instance: Box;\nconst instanceSpread = { ...instance };\n```\n\n----------------------------------------\n\nTITLE: Correct 'as const' Assertion\nDESCRIPTION: This code shows a correct usage of the `as const` assertion.  It is generally used to define string literals as string literal types which means its type becomes `'foo'` instead of `string`.  This is considered a valid type assertion.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-unnecessary-type-assertion.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nlet foo = 'foo' as const;\n```\n\n----------------------------------------\n\nTITLE: Updating Shared Configurations (Flat Config)\nDESCRIPTION: This JavaScript code snippet updates the ESLint configuration (Flat Config) to use type-checked versions of the `strict` and `stylistic` shared configurations.  It removes the original configurations and adds `strictTypeChecked` and `stylisticTypeChecked`. It uses ES modules.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/getting-started/Typed_Linting.mdx#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default tseslint.config(\n  eslint.configs.recommended,\n  // Removed lines start\n  tseslint.configs.strict,\n  tseslint.configs.stylistic,\n  // Removed lines end\n  // Added lines start\n  tseslint.configs.strictTypeChecked,\n  tseslint.configs.stylisticTypeChecked,\n  // Added lines end\n  // ...\n);\n```\n\n----------------------------------------\n\nTITLE: Allowing `import ... = require(...)` with 'allowAsImport' option - Correct\nDESCRIPTION: Demonstrates the correct usage of `import ... = require(...)` syntax when the `allowAsImport` option is enabled. This configuration allows the use of `require()` within import statements, which can be useful for maintaining CommonJS interop semantics.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-require-imports.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport foo = require('foo');\nimport foo from 'foo';\n```\n\n----------------------------------------\n\nTITLE: Safe function call with type assertion and try/catch in TypeScript\nDESCRIPTION: Presents a safer approach to calling a value with an `unknown` type by using a type assertion and a `try`/`catch` block. This allows the code to handle potential errors during the function call, mitigating the risk of unsafe calls.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-unsafe-call.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nfunction callSafe(maybeFunction: unknown): void {\n  try {\n    // intentionally unsound type assertion\n    (maybeFunction as () => unknown)();\n  } catch (e) {\n    console.error(\n      'Function either could not be called or threw an error when called: ',\n      e,\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: ESLint Configuration File (.eslintrc.cjs)\nDESCRIPTION: Configures ESLint for TypeScript projects by extending recommended configurations, specifying the parser, and loading the TypeScript plugin. This setup enables ESLint to lint TypeScript code effectively.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/getting-started/Legacy_ESLint_Setup.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n/* eslint-env node */\nmodule.exports = {\n  extends: ['eslint:recommended', 'plugin:@typescript-eslint/recommended'],\n  parser: '@typescript-eslint/parser',\n  plugins: ['@typescript-eslint'],\n  root: true,\n};\n```\n\n----------------------------------------\n\nTITLE: Correct - allowTypedFunctionExpressions: true\nDESCRIPTION: Examples of correct TypeScript code when `allowTypedFunctionExpressions` is true.  This demonstrates that if a function expression is explicitly typed (e.g., via a type alias or interface), the rule allows omitting the explicit return type on the implementation.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/explicit-function-return-type.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ntype FuncType = () => string;\n\nlet arrowFn: FuncType = () => 'test';\n\nlet funcExpr: FuncType = function () {\n  return 'test';\n};\n\nlet asTyped = (() => '') as () => string;\n\ninterface ObjectType {\n  foo(): number;\n}\nlet objectProp: ObjectType = {\n  foo: () => 1,\n};\nlet objectPropAs = {\n  foo: () => 1,\n} as ObjectType;\n\ndeclare function functionWithArg(arg: () => number);\nfunctionWithArg(() => 1);\n\ndeclare function functionWithObjectArg(arg: { method: () => number });\nfunctionWithObjectArg({\n  method() {\n    return 1;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint Flat Config with extraFileExtensions in JS\nDESCRIPTION: This code snippet demonstrates how to configure ESLint using the flat config format to handle extra file extensions (e.g., .vue files) when using the TypeScript ESLint parser with projectService enabled.  It highlights the correct way to define and reuse the `extraFileExtensions` variable to avoid performance issues related to project reloads.  It shows the addition of `extraFileExtensions` to both the .ts and .vue file configurations, correcting issues caused by changes to `extraFileExtensions`.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/troubleshooting/typed-linting/Performance.mdx#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n// @ts-check\n\nimport tseslint from 'typescript-eslint';\nimport vueParser from 'vue-eslint-parser';\n\n// Add this line\nconst extraFileExtensions = ['.vue'];\nexport default [\n  {\n    files: ['*.ts'],\n    languageOptions: {\n      parser: tseslint.parser,\n      parserOptions: {\n        projectService: true,\n        // Add this line\n        extraFileExtensions,\n      },\n    },\n  },\n  {\n    files: ['*.vue'],\n    languageOptions: {\n      parser: vueParser,\n      parserOptions: {\n        projectService: true,\n        parser: tseslint.parser,\n        // Remove this line\n        extraFileExtensions: ['.vue'],\n        // Add this line\n        extraFileExtensions,\n      },\n    },\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Correct non-null assertion example - TypeScript\nDESCRIPTION: This code snippet demonstrates the correct usage of the non-null assertion operator. It uses the `!` operator only once to assert that a value is not `null` or `undefined`. The first example accesses property `bar` of `foo` after applying the `!` operator. The second example assigns the value of `bar` to a variable with the same name after applying the `!` operator. The third example uses optional chaining with `?.`\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-extra-non-null-assertion.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst foo: { bar: number } | null = null;\nconst bar = foo!.bar;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nfunction foo(bar: number | undefined) {\n  const bar: number = bar!;\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nfunction foo(bar?: { n: number }) {\n  return bar?.n;\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect: Unnecessary Condition - Array Predicate\nDESCRIPTION: This example demonstrates a case where the rule flags a number array as always truthy in the filter predicate. The rule determines that `number[]` is always truthy, making the predicate unnecessary.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-unnecessary-condition.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n[\n  [1, 2],\n  [3, 4],\n].filter(t => t); // number[] is always truthy\n```\n\n----------------------------------------\n\nTITLE: Safe call examples in TypeScript\nDESCRIPTION: Illustrates correct code snippets where values are called with explicitly defined types, avoiding the `any` type. These examples showcase how to call functions safely by using explicit type annotations.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-unsafe-call.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare const typedVar: () => void;\ndeclare const typedNested: { prop: { a: () => void } };\n\ntypedVar();\ntypedNested.prop.a();\n\n(() => {})();\n\nnew Map();\n\nString.raw`foo`;\n```\n\n----------------------------------------\n\nTITLE: Replacing deprecated no-var-requires rule in TypeScript ESLint\nDESCRIPTION: This snippet demonstrates replacing the `@typescript-eslint/no-var-requires` rule with either a recommended configuration or enabling the `@typescript-eslint/no-require-imports` rule. It ensures that the same checks for `var` requires are still performed.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/website/blog/2024-07-31-announcing-typescript-eslint-v8.md#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n-  '@typescript-eslint/no-var-requires': '...', // Remove this line\n+  '@typescript-eslint/no-require-imports': '...' // Add this line (or use recommended config)\n```\n\n----------------------------------------\n\nTITLE: Correct Direct Const Assertion in Arrow Functions - TypeScript\nDESCRIPTION: Examples of correct code that adheres to the rule when `allowDirectConstAssertionInArrowFunctions` is `true`. Arrow functions returning objects with explicit `as const` assertions are allowed.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/explicit-module-boundary-types.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport const func = (value: number) => ({ type: 'X', value }) as const;\nexport const foo = () =>\n  ({\n    bar: true,\n  }) as const;\nexport const bar = () => 1 as const;\n```\n\n----------------------------------------\n\nTITLE: Incorrect Optional Chain Replacement Examples - TypeScript\nDESCRIPTION: Examples of incorrect code that can be replaced with optional chaining. This includes chained logical ANDs, negated logical ORs, empty objects and chained strict nullish checks.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-optional-chain.mdx#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nfoo && foo.a && foo.a.b && foo.a.b.c;\nfoo && foo['a'] && foo['a'].b && foo['a'].b.c;\nfoo && foo.a && foo.a.b && foo.a.b.method && foo.a.b.method();\n\n// With empty objects\n(((foo || {}).a || {}).b || {}).c;\n(((foo || {})['a'] || {}).b || {}).c;\n\n// With negated `or`s\n!foo || !foo.bar;\n!foo || !foo[bar];\n!foo || !foo.bar || !foo.bar.baz || !foo.bar.baz();\n\n// this rule also supports converting chained strict nullish checks:\nfoo &&\n  foo.a != null &&\n  foo.a.b !== null &&\n  foo.a.b.c != undefined &&\n  foo.a.b.c.d !== undefined &&\n  foo.a.b.c.d.e;\n```\n\n----------------------------------------\n\nTITLE: `ignoreRestArgs` Option Examples - TypeScript\nDESCRIPTION: These TypeScript code snippets demonstrate the behavior of the `ignoreRestArgs` option in the `no-explicit-any` rule. When `ignoreRestArgs` is `false`, using `any` in rest arguments is considered an error. When `ignoreRestArgs` is `true`, using `any` in rest arguments is allowed.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-explicit-any.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction foo1(...args: any[]): void {}\nfunction foo2(...args: readonly any[]): void {}\nfunction foo3(...args: Array<any>): void {}\nfunction foo4(...args: ReadonlyArray<any>): void {}\n\ndeclare function bar(...args: any[]): void;\n\nconst baz = (...args: any[]) => {};\nconst qux = function (...args: any[]) {};\n\ntype Quux = (...args: any[]) => void;\ntype Quuz = new (...args: any[]) => void;\n\ninterface Grault {\n  (...args: any[]): void;\n}\ninterface Corge {\n  new (...args: any[]): void;\n}\ninterface Garply {\n  f(...args: any[]): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Correct If Statements with ignoreIfStatements: false in TypeScript\nDESCRIPTION: This code demonstrates the correct usage of the nullish coalescing assignment operator (`??=`) for lazy initialization.  This replaces the 'incorrect' examples when `ignoreIfStatements` is set to `false`.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-nullish-coalescing.mdx#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\ndeclare let foo: { a: string } | null;\ndeclare function makeFoo(): { a: string };\n\nfunction lazyInitializeFoo1() {\n  foo ??= makeFoo();\n}\n\nfunction lazyInitializeFoo2() {\n  foo ??= makeFoo();\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Promise usage with void return (checksVoidReturn: true)\nDESCRIPTION: These code snippets demonstrate correct Promise usage in contexts where a void return is expected, either by awaiting the Promises in an outer context, handling errors explicitly, or using async IIFE wrappers. The `checksVoidReturn` option is enabled. These techniques ensure that Promises are properly handled and prevent unhandled rejections.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-misused-promises.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// for-of puts `await` in outer context\nfor (const value of [1, 2, 3]) {\n  await doSomething(value);\n}\n\n// If outer context is not `async`, handle error explicitly\nPromise.all(\n  [1, 2, 3].map(async value => {\n    await doSomething(value);\n  }),\n).catch(handleError);\n\n// Use an async IIFE wrapper\nnew Promise((resolve, reject) => {\n  // combine with `void` keyword to tell `no-floating-promises` rule to ignore unhandled rejection\n  void (async () => {\n    await doSomething();\n    resolve();\n  })();\n});\n\n// Name the async wrapper to call it later\ndocument.addEventListener('click', () => {\n  const handler = async () => {\n    await doSomething();\n    otherSynchronousCall();\n  };\n\n  try {\n    synchronousCall();\n  } catch (err) {\n    handleSpecificError(err);\n  }\n\n  handler().catch(handleError);\n});\n\ninterface MyAsyncInterface {\n  setThing(): Promise<void>;\n}\nclass MyClass implements MyAsyncInterface {\n  async setThing(): Promise<void> {\n    this.thing = await fetchThing();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Example: Unnecessary Type Parameters TypeScript\nDESCRIPTION: This example demonstrates incorrect usage of type parameters where the type parameter is only used once. The rule flags these as unnecessary. The first example shows a function `second` where type parameters `A` and `B` are declared but only `B` is effectively used multiple times. The second example uses a type parameter `T` in `parseJSON` only for the return type, which can be replaced with `unknown`. The third example has `T` and `K` used only once each.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-unnecessary-type-parameters.mdx#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nfunction second<A, B>(a: A, b: B): B {\n  return b;\n}\n\nfunction parseJSON<T>(input: string): T {\n  return JSON.parse(input);\n}\n\nfunction printProperty<T, K extends keyof T>(obj: T, key: K) {\n  console.log(obj[key]);\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Namespace Usage: Unnecessary Qualifier - TypeScript\nDESCRIPTION: This code snippet demonstrates incorrect usage of namespace qualifiers. Inside namespace `A`, `A.B` is unnecessary and should be just `B`.  The rule flags this as an unnecessary qualifier. Requires TypeScript.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-unnecessary-qualifier.mdx#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nnamespace A {\n  export type B = number;\n  const x: A.B = 3;\n}\n```\n\n----------------------------------------\n\nTITLE: RuleCreator Usage Example in TypeScript\nDESCRIPTION: This code snippet demonstrates how to use the RuleCreator from `@typescript-eslint/utils` to create custom ESLint rules with extra rule docs types. It defines an interface for documentation and then utilizes `ESLintUtils.RuleCreator` to generate a rule creator function. The URL provided in `RuleCreator` will link to the rule's documentation.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/developers/ESLint_Plugins.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ESLintUtils } from '@typescript-eslint/utils';\n\nexport interface ExamplePluginDocs {\n  description: string;\n  recommended?: boolean;\n  requiresTypeChecking?: boolean;\n}\n\nexport const createRule = ESLintUtils.RuleCreator<ExamplePluginDocs>(\n  name =>\n    `https://github.com/your/eslint-plugin-example/tree/main/docs/${name}.md`,\n);\n\n```\n\n----------------------------------------\n\nTITLE: Incorrect TypeScript Directive Usage\nDESCRIPTION: This snippet demonstrates incorrect usage of the `@ts-ignore` directive, which will be flagged by the rule if the `ts-ignore` option is set to `true`. The rule flags any usage of the directive without a description.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/ban-ts-comment.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nif (false) {\n  // @ts-ignore: Unreachable code error\n  console.log('hello');\n}\nif (false) {\n  /* @ts-ignore: Unreachable code error */\n  console.log('hello');\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring no-restricted-types with custom messages and fixes (JSON)\nDESCRIPTION: This configuration example demonstrates how to use the `no-restricted-types` rule to ban specific types and provide custom messages, automatic fixes, and suggestions.  The `types` option defines a mapping of restricted type names to either a string message or an object containing a message, `fixWith` (for automatic fixes), and `suggest` (for quick fixes).  The configuration shows how to guide developers towards using preferred alternatives when they use a restricted type.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-restricted-types.mdx#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"@typescript-eslint/no-restricted-types\": [\n    \"error\",\n    {\n      \"types\": {\n        // add a custom message to help explain why not to use it\n        \"OldType\": \"Don't use OldType because it is unsafe\",\n\n        // add a custom message, and tell the plugin how to fix it\n        \"OldAPI\": {\n          \"message\": \"Use NewAPI instead\",\n          \"fixWith\": \"NewAPI\",\n        },\n\n        // add a custom message, and tell the plugin how to suggest a fix\n        \"SoonToBeOldAPI\": {\n          \"message\": \"Use NewAPI instead\",\n          \"suggest\": [\"NewAPIOne\", \"NewAPITwo\"],\n        },\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Non-Null Assertion with Optional Parameter\nDESCRIPTION: This example shows the correct usage of the non-null assertion operator `!` when dealing with optional parameters. The assertion `x!` is needed to assert that `x` is not `null` or `undefined` before returning it.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-unnecessary-type-assertion.mdx#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nfunction foo(x: number | undefined): number {\n  return x!;\n}\n```\n\n----------------------------------------\n\nTITLE: Aliasing Types: Person Type Alias - TypeScript\nDESCRIPTION: Demonstrates the use of type aliases to simplify complex type definitions and their use in function signatures. This code shows a type alias `Person` created for an object with `firstName`, `lastName`, and `age` properties. It highlights how using a type alias makes the function signature more readable compared to inlining the type definition.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-type-alias.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n// this...\ntype Person = {\n  firstName: string;\n  lastName: string;\n  age: number;\n};\n\nfunction addPerson(person: Person) {\n  // ...\n}\n\n// is easier to read than this...\nfunction addPerson(person: {\n  firstName: string;\n  lastName: string;\n  age: number;\n}) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Unsafe Declaration Merging Example TypeScript\nDESCRIPTION: This code demonstrates unsafe declaration merging between an interface and a class in TypeScript. The interface `Foo` declares a property `nums`, but the class `Foo` doesn't initialize it. This leads to a runtime error when `foo.nums.push(1)` is called, as `foo.nums` is undefined. This example illustrates the problem that the rule aims to prevent.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-unsafe-declaration-merging.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface Foo {\n  nums: number[];\n}\n\nclass Foo {}\n\nconst foo = new Foo();\n\nfoo.nums.push(1); // Runtime Error: Cannot read properties of undefined.\n```\n\n----------------------------------------\n\nTITLE: Correct includes usage - TypeScript\nDESCRIPTION: These examples demonstrate the correct usages of `includes`. The code checks for the existence of a value using `includes`, which is more readable. The variables `str`, `array`, `readonlyArray`, `typedArray`, `maybe` and `userDefined` are defined with different types, each with a `indexOf` and `includes` method. Includes is preferred over `indexOf` in these scenarios.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-includes.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst str: string;\nconst array: any[];\nconst readonlyArray: ReadonlyArray<any>;\nconst typedArray: UInt8Array;\nconst maybe: string;\nconst userDefined: {\n  indexOf(x: any): number;\n  includes(x: any): boolean;\n};\n\nstr.includes(value);\narray.includes(value);\n!readonlyArray.includes(value);\ntypedArray.includes(value);\nmaybe?.includes('');\nuserDefined.includes(value);\n\nstr.includes('example');\n\n// The two methods have different parameters.\ndeclare const mismatchExample: {\n  indexOf(x: unknown, fromIndex?: number): number;\n  includes(x: unknown): boolean;\n};\nmismatchExample.indexOf(value) >= 0;\n```\n\n----------------------------------------\n\nTITLE: Discouraged Constructor Annotations\nDESCRIPTION: This code snippet demonstrates examples of incorrect usage when the 'constructor' option is enabled.  It shows cases where generic type arguments are specified only on the left-hand side type annotation and not on the constructor itself, which is disallowed by the rule with this option.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/consistent-generic-constructors.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst map: Map<string, number> = new Map();\nconst set: Set<string> = new Set();\n```\n\n----------------------------------------\n\nTITLE: Correct TypeScript Directive Usage With Long Description\nDESCRIPTION: This snippet illustrates the correct usage of the `@ts-expect-error` directive with a description that meets the minimum length requirement when `minimumDescriptionLength` is set. The description's length satisfies the condition, preventing the rule from flagging the usage.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/ban-ts-comment.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nif (false) {\n  // @ts-expect-error The rationale for this override is described in issue #1337 on GitLab\n  console.log('hello');\n}\n```\n\n----------------------------------------\n\nTITLE: Naming Convention - Private Member Underscore Prefix\nDESCRIPTION: This configuration enforces that private members are prefixed with an underscore. It combines the \"memberLike\" selector with the \"private\" modifier and sets the \"leadingUnderscore\" option to \"require\".\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/naming-convention.mdx#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"@typescript-eslint/naming-convention\": [\n    \"error\",\n    {\n      \"selector\": \"memberLike\",\n      \"modifiers\": [\"private\"],\n      \"format\": [\"camelCase\"],\n      \"leadingUnderscore\": \"require\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect spread usage examples (TypeScript)\nDESCRIPTION: These examples demonstrate incorrect usage of the spread operator in TypeScript, where spreading a Promise, function, Map, or string into an object or array can lead to unexpected behavior.  These examples highlight cases where the spread operator is used on types like Promises, functions without properties, Maps, and strings.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-misused-spread.mdx#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\ndeclare const promise: Promise<number>;\nconst spreadPromise = { ...promise };\n\ndeclare function getObject(): Record<string, strings>;\nconst getObjectSpread = { ...getObject };\n\ndeclare const map: Map<string, number>;\nconst mapSpread = { ...map };\n\ndeclare const userName: string;\nconst characters = [...userName];\n```\n\n----------------------------------------\n\nTITLE: Initializing stylistic-type-checked with Flat Config (ESM)\nDESCRIPTION: This code snippet demonstrates how to initialize the `stylistic-type-checked` configuration using the Flat Config format in an ESLint configuration file.  It imports the `tseslint` object and then calls `tseslint.config` with `tseslint.configs.stylisticTypeChecked` as an argument. This enables the stylistic rules that require type information provided by typescript-eslint.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/users/Shared_Configurations.mdx#_snippet_15\n\nLANGUAGE: js\nCODE:\n```\nexport default tseslint.config(\n  tseslint.configs.stylisticTypeChecked,\n);\n```\n\n----------------------------------------\n\nTITLE: Correct method signature examples\nDESCRIPTION: These TypeScript examples demonstrate correct usages when the `method` option is enabled. They show the preferred style of using method signatures (e.g., `func(arg: string): number;`) for function properties in interfaces and types.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/method-signature-style.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ninterface T1 {\n  func(arg: string): number;\n}\ntype T2 = {\n  func(arg: boolean): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring accessibility overrides (JSON)\nDESCRIPTION: Shows an example configuration for the 'accessibility' option with overrides for accessors, constructors, methods, properties, and parameter properties.  It demonstrates how to customize the rule's behavior for different types of class members.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/explicit-member-accessibility.mdx#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"accessibility\": \"explicit\",\n  \"overrides\": {\n    \"accessors\": \"explicit\",\n    \"constructors\": \"no-public\",\n    \"methods\": \"explicit\",\n    \"properties\": \"off\",\n    \"parameterProperties\": \"explicit\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Naming Convention - Boolean Variable Verb Prefix\nDESCRIPTION: This configuration enforces that boolean variables are prefixed with an allowed verb (is, should, has, can, did, will). It uses the \"variable\" selector, specifies the \"boolean\" type, and sets the \"prefix\" option.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/naming-convention.mdx#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"@typescript-eslint/naming-convention\": [\n    \"error\",\n    {\n      \"selector\": \"variable\",\n      \"types\": [\"boolean\"],\n      \"format\": [\"PascalCase\"],\n      \"prefix\": [\"is\", \"should\", \"has\", \"can\", \"did\", \"will\"]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint Flat Config with Project Paths in MJS\nDESCRIPTION: This code snippet demonstrates how to configure ESLint with the flat config format using mjs extension, addressing the issue of wide includes when specifying project paths. It shows the correct way to define the `project` option within `parserOptions` to avoid performance bottlenecks. It includes removing an overly broad glob pattern for tsconfig files and replacing it with a more specific path.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/troubleshooting/typed-linting/Performance.mdx#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n// @ts-check\n\nimport eslint from '@eslint/js';\nimport tseslint from 'typescript-eslint';\n\nexport default tseslint.config(\n  eslint.configs.recommended,\n  tseslint.configs.recommendedRequiringTypeChecking,\n  {\n    languageOptions: {\n      parserOptions: {\n        tsconfigRootDir: import.meta.dirname,\n        // Remove this line\n        project: ['./**/tsconfig.json'],\n        // Add this line\n        project: ['./packages/*/tsconfig.json'],\n      },\n    },\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Correct Class Member Ordering (Public Instance Method vs Static Field)\nDESCRIPTION: This TypeScript code snippet shows a correct member order in a class, adhering to the enforced rule that public instance methods should come before public static fields.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/member-ordering.mdx#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nclass Foo {\n  public B(): void {} // -> public instance method\n\n  private C: string; // (irrelevant)\n\n  public D: string; // (irrelevant)\n\n  public static E: string; // -> public static field\n\n  constructor() {} // (irrelevant)\n\n  public static A(): void {} // (irrelevant)\n\n  [Z: string]: any; // (irrelevant)\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Typed Function Expressions - TypeScript\nDESCRIPTION: Examples of correct code where typed function expressions include explicit return types, adhering to the rule when `allowTypedFunctionExpressions` is `true`.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/explicit-module-boundary-types.mdx#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ntype FuncType = () => string;\n\nexport let arrowFn: FuncType = () => 'test';\n\nexport let funcExpr: FuncType = function () {\n  return 'test';\n};\n\nexport let asTyped = (() => '') as () => string;\n\ninterface ObjectType {\n  foo(): number;\n}\nexport let objectProp: ObjectType = {\n  foo: () => 1,\n};\nexport let objectPropAs = {\n  foo: () => 1,\n} as ObjectType;\n\ntype FooType = (bar: string) => void;\nexport const foo: FooType = bar => {};\n```\n\n----------------------------------------\n\nTITLE: Allowed Usage: Returning `any` to `unknown` (TypeScript)\nDESCRIPTION: This snippet demonstrates cases where returning `any` is allowed, specifically when the return type is explicitly declared as `unknown`.  This allows for handling potentially unsafe data while still providing a level of type safety through the `unknown` type.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-unsafe-return.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction foo1(): unknown {\n  return JSON.parse(singleObjString); // Return type for JSON.parse is any.\n}\n\nfunction foo2(): unknown[] {\n  return [] as any[];\n}\n```\n\n----------------------------------------\n\nTITLE: Correct array type notation with 'array' option in TypeScript\nDESCRIPTION: This snippet demonstrates correct array type notation when the `default` option is set to 'array'. It uses the enforced `string[]` and `readonly string[]` syntax for array type declarations.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/array-type.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst x: string[] = ['a', 'b'];\nconst y: readonly string[] = ['a', 'b'];\n```\n\n----------------------------------------\n\nTITLE: Incorrect `requireNullish` example - TypeScript\nDESCRIPTION: Example demonstrating incorrect code when using the `requireNullish` option. It shows how chained logical AND can be replaced by an optional chain.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-optional-chain.mdx#_snippet_15\n\nLANGUAGE: ts\nCODE:\n```\ndeclare const thing1: string | null;\nthing1 && thing1.toString();\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint with Legacy Config for TSConfig\nDESCRIPTION: This code snippet shows how to configure ESLint using the Legacy Config approach (`.eslintrc.js`) to specify a custom TSConfig file for type-aware linting. The `parserOptions.project` property is set to the path of the desired TSConfig file (e.g., `'./tsconfig.eslint.json'`), and `tsconfigRootDir` is set to the directory containing the TSConfig file using `__dirname`. This ensures that ESLint uses the specified TSConfig for generating type information during linting.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/troubleshooting/typed-linting/index.mdx#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  // ...\n  parserOptions: {\n    project: './tsconfig.eslint.json',\n    tsconfigRootDir: __dirname,\n  },\n  // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Correct usage of restricted imports with type-only imports - TypeScript\nDESCRIPTION: Demonstrates the correct way to use restricted imports when the `allowTypeImports` option is enabled. It uses type-only imports for the restricted modules `import-foo` and `import-baz` using `import type` and `export type`.  Other non-restricted modules are imported normally. The option provided in the code block configures the restricted modules.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-restricted-imports.mdx#_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport { foo } from 'other-module';\n\nimport type foo from 'import-foo';\nexport type { Foo } from 'import-foo';\n\nimport type baz from 'import-baz';\nexport type { Baz } from 'import-baz';\n```\n\n----------------------------------------\n\nTITLE: Incorrect TypeScript Directive Usage With Short Description\nDESCRIPTION: This snippet demonstrates incorrect usage of the `@ts-expect-error` directive with a description that is too short when `minimumDescriptionLength` is set. The rule will flag it because the description length is less than the minimum required.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/ban-ts-comment.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nif (false) {\n  // @ts-expect-error: TODO\n  console.log('hello');\n}\n```\n\n----------------------------------------\n\nTITLE: Using find() (Correct) TypeScript\nDESCRIPTION: This code snippet demonstrates the correct usage of `Array.prototype.find()` to find the first element in an array that satisfies a given condition. The `.find()` method iterates through the array and returns the first element that matches the provided condition, making it more efficient and readable than using `.filter()[0]`.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-find.mdx#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n[1, 2, 3].find(x => x > 1);\n```\n\n----------------------------------------\n\nTITLE: Incorrect Destructuring Example (eslint/prefer-destructuring) - TypeScript\nDESCRIPTION: This example demonstrates an incorrect way to access an object property in TypeScript when using the `eslint/prefer-destructuring` rule.  It shows direct property access instead of destructuring. The incorrect code is `const x: string = obj.x;`.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-destructuring.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst x: string = obj.x; // This is incorrect and the auto fixer provides following untyped fix.\n// const { x } = obj;\n```\n\n----------------------------------------\n\nTITLE: Incorrect Addition with allowAny: true\nDESCRIPTION: This snippet shows examples of incorrect addition operations when the `allowAny` option is enabled. Even with `allowAny`, adding to a `[]` still throws an error.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/restrict-plus-operands.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nlet fn = (a: number, b: []) => a + b;\nlet fn = (a: string, b: []) => a + b;\n```\n\n----------------------------------------\n\nTITLE: Disallowing require statements\nDESCRIPTION: This snippet demonstrates incorrect usages of the `require` statement, where `require` is used to assign a value to a variable using `var`, `const`, or `let`. This is disallowed by the `no-var-requires` rule.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-var-requires.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nvar foo = require('foo');\nconst foo = require('foo');\nlet foo = require('foo');\n```\n\n----------------------------------------\n\nTITLE: Correct code with non-public constructor when constructors override is no-public (TypeScript)\nDESCRIPTION: Shows correct TypeScript code where a constructor lacks an explicit 'public' modifier (implicitly package-private), satisfying the rule when the 'constructors' override is set to 'no-public'.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/explicit-member-accessibility.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nclass Animal {\n  constructor(protected animalName) {}\n  public get name() {\n    return this.animalName;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect If Statements with ignoreIfStatements: false in TypeScript\nDESCRIPTION: This code demonstrates incorrect `if` statements used for lazy initialization that should be replaced with the nullish coalescing assignment operator (`??=`). This code is flagged when the `ignoreIfStatements` option is set to `false`.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-nullish-coalescing.mdx#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\ndeclare let foo: { a: string } | null;\ndeclare function makeFoo(): { a: string };\n\nfunction lazyInitializeFoo1() {\n  if (!foo) {\n    foo = makeFoo();\n  }\n}\n\nfunction lazyInitializeFoo2() {\n  if (!foo) foo = makeFoo();\n}\n```\n\n----------------------------------------\n\nTITLE: Preferred String Substring Checks - TypeScript\nDESCRIPTION: This code snippet showcases the preferred way to check if a string starts or ends with a substring using `String#startsWith` and `String#endsWith` methods.  This is the recommended approach to improve code readability and consistency.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-string-starts-ends-with.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\ndeclare const foo: string;\n\n// starts with\nfoo.startsWith('bar');\n\n// ends with\nfoo.endsWith('bar');\n```\n\n----------------------------------------\n\nTITLE: Disallow deprecated code usage - Correct\nDESCRIPTION: This example demonstrates the correct way to avoid deprecated code. It uses `apiV2` instead of the deprecated `apiV1`, adhering to the rule.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-deprecated.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n/** @deprecated Use apiV2 instead. */\ndeclare function apiV1(): Promise<string>;\n\ndeclare function apiV2(): Promise<string>;\n\nawait apiV2();\n```\n\n----------------------------------------\n\nTITLE: Incorrect Ternary Tests with ignoreTernaryTests: false in TypeScript\nDESCRIPTION: This code shows incorrect ternary expressions that should be replaced with the nullish coalescing operator. This code is flagged when `ignoreTernaryTests` is set to `false`. The example demonstrates various ternary expressions that can be simplified using `??`.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-nullish-coalescing.mdx#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\ndeclare const a: any;\na !== undefined && a !== null ? a : 'a string';\na === undefined || a === null ? 'a string' : a;\na == undefined ? 'a string' : a;\na == null ? 'a string' : a;\n\ndeclare const b: string | undefined;\nb !== undefined ? b : 'a string';\nb === undefined ? 'a string' : b;\nb ? b : 'a string';\n!b ? 'a string' : b;\n\ndeclare const c: string | null;\nc !== null ? c : 'a string';\nc === null ? 'a string' : c;\nc ? c : 'a string';\n!c ? 'a string' : c;\n```\n\n----------------------------------------\n\nTITLE: Incorrect template literal usage\nDESCRIPTION: Examples of incorrect code where non-string values (array and object) are directly used within template literals, leading to potentially unintended string coercions.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/restrict-template-expressions.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst arg1 = [1, 2];\nconst msg1 = `arg1 = ${arg1}`;\n\nconst arg2 = { name: 'Foo' };\nconst msg2 = `arg2 = ${arg2 || null}`;\n```\n\n----------------------------------------\n\nTITLE: Rejecting Promises Correctly with Errors in TypeScript\nDESCRIPTION: This code demonstrates the correct usage of Promise rejections by using Error objects. It utilizes both built-in Error objects and custom Error classes, adhering to the `prefer-promise-reject-errors` rule.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-promise-reject-errors.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nPromise.reject(new Error());\n\nclass CustomError extends Error {\n  // ...\n}\nPromise.reject(new CustomError());\n\nnew Promise((resolve, reject) => reject(new Error()));\n\nnew Promise((resolve, reject) => {\n  class CustomError extends Error {\n    // ...\n  }\n  return reject(new CustomError());\n});\n```\n\n----------------------------------------\n\nTITLE: Correct Boolean Usage\nDESCRIPTION: This code snippet showcases correct usage of boolean variables and comparisons. It demonstrates using the boolean variable directly and performing comparisons when the variable type is a union (e.g., `boolean | string`).\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-unnecessary-boolean-literal-compare.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare const someCondition: boolean;\nif (someCondition) {\n}\n\ndeclare const someObjectBoolean: boolean | Record<string, unknown>;\nif (someObjectBoolean === true) {\n}\n\ndeclare const someStringBoolean: boolean | string;\nif (someStringBoolean === true) {\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling ESLint rule with a comment\nDESCRIPTION: This code snippet shows how to disable an ESLint rule for a specific line using an ESLint configuration comment.  It's a best practice to always provide a comment explaining why the rule is being disabled. It disables the `no-var` rule.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/troubleshooting/faqs/ESLint.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare global {\n  // eslint-disable-next-line no-var -- Provided by an old third-party integration.\n  var myValue: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Enum with Unique Number Values - TypeScript\nDESCRIPTION: This code demonstrates the correct way to define an enum with unique numeric values. Each member is assigned a different number, which is the expected pattern and doesn't violate the `no-duplicate-enum-values` rule. No dependencies are required.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-duplicate-enum-values.mdx#_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nenum E {\n  A = 0,\n  B = 1,\n}\n```\n\n----------------------------------------\n\nTITLE: Options type definition\nDESCRIPTION: Defines the type Options as a union of string literals representing the possible configurations for the return-await rule. The options include 'in-try-catch', 'always', 'error-handling-correctness-only', and 'never'.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/return-await.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype Options =\n  | 'in-try-catch'\n  | 'always'\n  | 'error-handling-correctness-only'\n  | 'never';\n\nconst defaultOptions: Options = 'in-try-catch';\n```\n\n----------------------------------------\n\nTITLE: Correct usage examples of functions in TypeScript\nDESCRIPTION: This code snippet contains multiple examples of correct usage of `setTimeout`, `setInterval`, `setImmediate`, and `execScript`. These functions are being passed function references instead of strings, avoiding the implied `eval()` vulnerability. This ensures better security and performance.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-implied-eval.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nsetTimeout(function () {\n  alert('Hi!');\n}, 100);\n\nsetInterval(function () {\n  alert('Hi!');\n}, 100);\n\nsetImmediate(function () {\n  alert('Hi!');\n});\n\nexecScript(function () {\n  alert('Hi!');\n});\n\nconst fn = () => {};\nsetTimeout(fn, 100);\n\nconst foo = {\n  fn: function () {},\n};\nsetTimeout(foo.fn, 100);\nsetTimeout(foo.fn.bind(this), 100);\n\nclass Foo {\n  static fn = () => {};\n}\n\nsetTimeout(Foo.fn, 100);\n```\n\n----------------------------------------\n\nTITLE: ESLint Flat Config with recommended configurations\nDESCRIPTION: This JavaScript snippet demonstrates a simple ESLint Flat Config using the `typescript-eslint` package. It imports the `eslint` and `tseslint` modules and exports a configuration that includes both the ESLint recommended rules and the typescript-eslint recommended rules, leveraging the `config` utility for type-checked configuration.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/website/blog/2024-02-12-announcing-typescript-eslint-v7.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// @ts-check\n\nimport eslint from '@eslint/js';\nimport tseslint from 'typescript-eslint';\n\nexport default tseslint.config(\n  eslint.configs.recommended,\n  ...tseslint.configs.recommended,\n);\n```\n\n----------------------------------------\n\nTITLE: Configure Type Literal Member Ordering (JSONC)\nDESCRIPTION: This configuration sets up the @typescript-eslint/member-ordering rule to enforce a specific order for type literal members: signatures, then methods, then constructors, then fields.  It applies an \"error\" severity, meaning violations will cause ESLint to report an error.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/member-ordering.mdx#_snippet_30\n\nLANGUAGE: jsonc\nCODE:\n```\n// .eslintrc.json\n{\n  \"rules\": {\n    \"@typescript-eslint/member-ordering\": [\n      \"error\",\n      { \"typeLiterals\": [\"signature\", \"method\", \"constructor\", \"field\"] },\n    ],\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Correct - allowConciseArrowFunctionExpressionsStartingWithVoid: true\nDESCRIPTION: Correct usage when `allowConciseArrowFunctionExpressionsStartingWithVoid` is enabled. The arrow function starts with `void` and performs a side effect.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/explicit-function-return-type.mdx#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nvar log = (message: string) => void console.log(message);\n```\n\n----------------------------------------\n\nTITLE: Configuring General Member Ordering\nDESCRIPTION: This configuration enforces a default member ordering of signatures, methods, constructors, and fields for all constructs. The rule flags any code that violates this order, ensuring consistency in member declaration across TypeScript projects.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/member-ordering.mdx#_snippet_2\n\nLANGUAGE: jsonc\nCODE:\n```\n// .eslintrc.json\n{\n  \"rules\": {\n    \"@typescript-eslint/member-ordering\": [\n      \"error\",\n      { \"default\": [\"signature\", \"method\", \"constructor\", \"field\"] },\n    ],\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Disallowing require() imports - Incorrect\nDESCRIPTION: Demonstrates incorrect usage of `require()` when the rule is enabled. It highlights the use of `require()` for importing modules, which should be replaced with ES module syntax.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-require-imports.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst lib1 = require('lib1');\nconst { lib2 } = require('lib2');\nimport lib3 = require('lib3');\n```\n\n----------------------------------------\n\nTITLE: Correct `checkString` example - TypeScript\nDESCRIPTION: Example demonstrating the correct code when using the `checkString` option. It demonstrates the use of optional chaining.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-optional-chain.mdx#_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\ndeclare const thing: string;\n\nthing?.toString();\n```\n\n----------------------------------------\n\nTITLE: Incorrect Boolean Comparison\nDESCRIPTION: This code snippet demonstrates an incorrect usage where a boolean variable is unnecessarily compared to the boolean literal `true`. This comparison is redundant and can be simplified by using the variable directly.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-unnecessary-boolean-literal-compare.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare const someCondition: boolean;\nif (someCondition === true) {\n}\n```\n\n----------------------------------------\n\nTITLE: Disallowing delete operator on array element in TypeScript\nDESCRIPTION: This code snippet demonstrates the incorrect usage of the `delete` operator on an array element.  It declares an array `arr` of numbers and then attempts to delete the element at index 0 using `delete arr[0]`. This is discouraged because it leaves an empty slot in the array without updating the length.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-array-delete.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ndeclare const arr: number[];\n\ndelete arr[0];\n```\n\n----------------------------------------\n\nTITLE: Iteration over enum with string members in TypeScript\nDESCRIPTION: This TypeScript code snippet demonstrates iterating over an enum where all members are strings using `Object.values()`. The resulting array contains only the string values of the enum members.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-mixed-enums.mdx#_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nenum Status {\n  Closed = 'closed',\n  Open = 'open',\n}\n\n// ['closed', 'open']\nObject.values(Status);\n```\n\n----------------------------------------\n\nTITLE: Correct Promise usage in object spreads (checksSpreads: true)\nDESCRIPTION: These code snippets demonstrate correct Promise usage within object spreads by awaiting the Promises before spreading their resolved values into the objects. The `checksSpreads` option is enabled. The `await` keyword ensures that the Promises are resolved before being used in the spread, preventing the inclusion of Promise objects in the result.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-misused-promises.mdx#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst getData = () => fetch('/');\n\nconsole.log({ foo: 42, ...(await getData()) });\n\nconst awaitData = async () => {\n  await fetch('/');\n};\n\nconsole.log({ foo: 42, ...(await awaitData()) });\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom ESLint Rule with RuleCreator (TypeScript)\nDESCRIPTION: Demonstrates creating a custom ESLint rule using `ESLintUtils.RuleCreator` to enforce uppercase naming for function declarations. It shows how to define the rule, specify its metadata (docs, messages, type, schema), and implement the core logic within the `create` function.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/developers/Custom_Rules.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { ESLintUtils } from '@typescript-eslint/utils';\n\nconst createRule = ESLintUtils.RuleCreator(\n  name => `https://example.com/rule/${name}`,\n);\n\n// Type: RuleModule<\"uppercase\", ...>\nexport const rule = createRule({\n  create(context) {\n    return {\n      FunctionDeclaration(node) {\n        if (node.id != null) {\n          if (/^[a-z]/.test(node.id.name)) {\n            context.report({\n              messageId: 'uppercase',\n              node: node.id,\n            });\n          }\n        }\n      },\n    };\n  },\n  name: 'uppercase-first-declarations',\n  meta: {\n    docs: {\n      description:\n        'Function declaration names should start with an upper-case letter.',\n    },\n    messages: {\n      uppercase: 'Start this name with an upper-case letter.',\n    },\n    type: 'suggestion',\n    schema: [],\n  },\n  defaultOptions: [],\n});\n```\n\n----------------------------------------\n\nTITLE: Correct Getter/Setter Types - TypeScript\nDESCRIPTION: This example demonstrates a correct implementation where both the getter and setter use the same type (`string`).  This satisfies the rule because the type of the getter is assignable to the type of the setter.  This is a recommended pattern, ensuring that assigning the property back to itself will not cause type errors.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/related-getter-setter-pairs.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface Box {\n  get value(): string;\n  set value(newValue: string);\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Return Type Examples\nDESCRIPTION: Shows examples of TypeScript code that adhere to the `explicit-function-return-type` rule. The code includes functions, arrow functions, and class methods, all with explicit return type annotations.  These examples are considered \"correct\" by the linter.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/explicit-function-return-type.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// No return value should be expected (void)\nfunction test(): void {\n  return;\n}\n\n// A return value of type number\nvar fn = function (): number {\n  return 1;\n};\n\n// A return value of type string\nvar arrowFn = (): string => 'test';\n\nclass Test {\n  // No return value should be expected (void)\n  method(): void {\n    return;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending ESLint Config (Flat, No Type Checking)\nDESCRIPTION: This snippet shows how to extend the ESLint configuration in a project that does not use type checking. It combines ESLint's recommended rules, TypeScript ESLint's recommended rules, and TypeScript ESLint's stylistic rules using the Flat Config style.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/users/Shared_Configurations.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default tseslint.config(\n  eslint.configs.recommended,\n  tseslint.configs.recommended,\n  tseslint.configs.stylistic,\n);\n```\n\n----------------------------------------\n\nTITLE: Correct usage: Calling functions with safe arguments - TypeScript\nDESCRIPTION: Examples of correct code that adheres to the `no-unsafe-argument` rule. These examples show how to call functions with arguments that are explicitly typed and do not involve the `any` type.  Using specific type annotations and avoiding `any` ensures type safety and prevents unexpected runtime errors.  The rule enforces strict type checking by preventing `any` types to be used as arguments.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-unsafe-argument.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function foo(arg1: string, arg2: number, arg3: string): void;\n\nfoo('a', 1, 'b');\n\nconst tuple1 = ['a', 1, 'b'] as const;\nfoo(...tuple1);\n\ndeclare function bar(arg1: string, arg2: number, ...rest: string[]): void;\nconst array: string[] = ['a'];\nbar('a', 1, ...array);\n\ndeclare function baz(arg1: Set<string>, arg2: Map<string, string>): void;\nbaz(new Set<string>(), new Map<string, string>());\n```\n\n----------------------------------------\n\nTITLE: Incorrect non-null assertion example - TypeScript\nDESCRIPTION: This code snippet demonstrates incorrect usage of the non-null assertion operator. The `!!!` and `!!` are redundant and unnecessary. The first example accesses property `bar` of `foo` after applying the `!!!` operator. The second example assigns the value of `bar` to a variable with the same name after applying the `!!!` operator. The third example uses `!?.`, which is also incorrect.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-extra-non-null-assertion.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst foo: { bar: number } | null = null;\nconst bar = foo!!!.bar;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nfunction foo(bar: number | undefined) {\n  const bar: number = bar!!!;\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nfunction foo(bar?: { n: number }) {\n  return bar!?.n;\n}\n```\n\n----------------------------------------\n\nTITLE: Enable Type-Checked Rules in Flat Config (JavaScript)\nDESCRIPTION: Configures ESLint to enable only the recommended type-checked rules using `recommendedTypeCheckedOnly` from `@typescript-eslint/eslint-plugin`. It sets up the `languageOptions` for parsing TypeScript files, including `projectService` and `tsconfigRootDir`.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/troubleshooting/faqs/General.mdx#_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nimport eslint from '@eslint/js';\nimport tseslint from 'typescript-eslint';\n\nexport default tseslint.config(\n  tseslint.configs.recommendedTypeCheckedOnly,\n  {\n    languageOptions: {\n      parserOptions: {\n        projectService: true,\n        tsconfigRootDir: import.meta.dirname,\n      },\n    },\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Empty Types with Specific Names - TypeScript\nDESCRIPTION: This code snippet demonstrates the incorrect usage of empty types when the `allowWithName` option is set. Even if the option allows types with a specific name (e.g., 'Props$'), other empty types will still be flagged as incorrect. This shows the exception for named types.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-empty-object-type.mdx#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface InterfaceValue {}\n\ntype TypeValue = {};\n```\n\n----------------------------------------\n\nTITLE: Correct Safe Promise Usage (allowForKnownSafePromises)\nDESCRIPTION: This example demonstrates correct code for the `allowForKnownSafePromises` option. It shows how branded types can be used to mark Promises as safe, thus avoiding errors reported by the `no-floating-promises` rule.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-floating-promises.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// promises can be marked as safe by using branded types\ntype SafePromise = Promise<number> & { __linterBrands?: string };\n\nlet promise: SafePromise = Promise.resolve(2);\npromise;\n\nfunction returnsSafePromise(): SafePromise {\n  return Promise.resolve(42);\n}\n\nreturnsSafePromise();\n```\n\n----------------------------------------\n\nTITLE: JSON.parse with ts-reset for safer type\nDESCRIPTION: This snippet illustrates the effect of `ts-reset` on the type of `JSON.parse`'s return value.  Without `ts-reset`, it is `any`. With `ts-reset`, it becomes `unknown`, forcing more explicit type handling.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/website/blog/2025-01-21-avoiding-anys.mdx#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = JSON.parse(`\"clearly-a-string\"`);\n//    ^? any (without ts-reset)\n//    ^? unknown (with ts-reset)\n\nconsole.log(data.some.property.that.does.not.exist);\n```\n\n----------------------------------------\n\nTITLE: Incorrect Nullable Boolean Comparison (allowComparingNullableBooleansToTrue: false)\nDESCRIPTION: This code snippet demonstrates incorrect usage when `allowComparingNullableBooleansToTrue` is set to `false`.  It shows unnecessary comparisons of nullable boolean variables (e.g., `boolean | undefined`) to the boolean literal `true`.  The rule flags these comparisons as redundant.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-unnecessary-boolean-literal-compare.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare const someUndefinedCondition: boolean | undefined;\nif (someUndefinedCondition === true) {\n}\n\ndeclare const someNullCondition: boolean | null;\nif (someNullCondition !== true) {\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Overload Signatures\nDESCRIPTION: These TypeScript code snippets demonstrate incorrect usage of function overloads that can be unified into a single signature. The first example uses separate function declarations for different parameter types. The second example uses a function declaration and then a rest parameter but could use a single rest parameter declaration.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/unified-signatures.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction x(x: number): void;\nfunction x(x: string): void;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nfunction y(): void;\nfunction y(...x: number[]): void;\n```\n\n----------------------------------------\n\nTITLE: Correct `for-of` and `for` Loop Examples (TypeScript)\nDESCRIPTION: This example showcases the correct usage of a `for-of` loop when the loop index is only used to access array elements. It also demonstrates a scenario where a standard `for` loop is necessary because the loop index `i` is used for purposes other than accessing array elements.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-for-of.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\ndeclare const array: string[];\n\nfor (const x of array) {\n  console.log(x);\n}\n\nfor (let i = 0; i < array.length; i++) {\n  // i is used, so for-of could not be used.\n  console.log(i, array[i]);\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Conditional Tests with ignoreConditionalTests: false in TypeScript\nDESCRIPTION: This code shows incorrect conditional tests using the logical OR operator that should be replaced with the nullish coalescing operator.  This code is flagged when `ignoreConditionalTests` is set to `false`. The example shows various conditional statements that can be simplified using `??`.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-nullish-coalescing.mdx#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\ndeclare let a: string | null;\ndeclare const b: string | null;\n\nif (a || b) {\n}\nif ((a ||= b)) {\n}\nwhile (a || b) {}\nwhile ((a ||= b)) {}\ndo {} while (a || b);\nfor (let i = 0; a || b; i += 1) {}\na || b ? true : false;\n```\n\n----------------------------------------\n\nTITLE: Correct Nullish Coalescing Example in TypeScript\nDESCRIPTION: This code demonstrates the correct usage of the nullish coalescing operator.  The `??` operator only coalesces when the left-hand side is `null` or `undefined`. This example shows replacement with `??` operators and initializing with `??=`.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-nullish-coalescing.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\ndeclare const a: string | null;\ndeclare const b: string | null;\n\nconst c = a ?? b;\n\ndeclare let foo: { a: string } | null;\ndeclare function makeFoo(): { a: string };\n\nfunction lazyInitializeFoo() {\n  foo ??= makeFoo();\n}\n```\n\n----------------------------------------\n\nTITLE: Correct enum Usage with ignoreEnums: true (TypeScript)\nDESCRIPTION: This TypeScript code demonstrates correct usage of enums when the `ignoreEnums` option is set to `true` in the `no-magic-numbers` rule.  Despite the enum `foo` containing a member `SECOND` assigned to the numeric literal `1000`, the linter will not flag this as an error because the configuration `'{ \"ignoreEnums\": true }'` instructs it to ignore numeric literals within enums.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-magic-numbers.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nenum foo {\n  SECOND = 1000,\n}\n\n```\n\n----------------------------------------\n\nTITLE: Correct Enum with Unique String Values - TypeScript\nDESCRIPTION: This code snippet demonstrates the correct way to define an enum where each member has a distinct string literal value. This satisfies the rule's requirement for unique enum member values. No dependencies are required.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-duplicate-enum-values.mdx#_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nenum E {\n  A = 'A',\n  B = 'B',\n  C = `C`,\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Type Assertion Example (arrayLiteralTypeAssertions - allow-as-parameter)\nDESCRIPTION: This code snippet demonstrates the correct use of type assertions when `arrayLiteralTypeAssertions` is set to `'allow-as-parameter'`.  It shows how to define the type of an array literal directly, use `as any` or `as unknown` assertions, and use assertions as parameters.  The option allows assertions as a parameter for functions and constructors.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/consistent-type-assertions.mdx#_snippet_7\n\nLANGUAGE: TypeScript/JSX\nCODE:\n```\nconst x: T = ['foo'];\nconst y = ['foo'] as any;\nconst z = ['foo'] as unknown;\nbar(['foo'] as T);\nnew Clazz(['foo'] as T);\nfunction bar() {\n  throw ['foo'] as Foo;\n}\nconst foo = <Foo props={['foo'] as Bar} />;\n```\n\n----------------------------------------\n\nTITLE: Run ESLint on the Project (pnpm)\nDESCRIPTION: Executes ESLint on the project using pnpm. This command will lint all TypeScript and JavaScript files in the current directory and output any linting errors to the console.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/getting-started/Quickstart.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npnpm eslint .\n```\n\n----------------------------------------\n\nTITLE: Incorrect Reduce Usage with Type Assertion (TypeScript)\nDESCRIPTION: This code snippet demonstrates the incorrect usage of `Array#reduce` with a type assertion on the initial value.  The `as` keyword is used to assert the type of the empty array and empty object. This is discouraged due to potential type safety issues.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-reduce-type-parameter.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n[1, 2, 3].reduce((arr, num) => arr.concat(num * 2), [] as number[]);\n\n['a', 'b'].reduce(\n  (accum, name) => ({\n    ...accum,\n    [name]: true,\n  }),\n  {} as Record<string, boolean>,\n);\n```\n\n----------------------------------------\n\nTITLE: Correct Safe Calls usage (allowForKnownSafeCalls)\nDESCRIPTION: This snippet demonstrates the correct usage of the `allowForKnownSafeCalls` option. By declaring a function `safe` as being safe the `no-floating-promises` rule allows it to be called without handling its promise result.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-floating-promises.mdx#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function safe(...args: unknown[]): Promise<void>;\n\nsafe('...', () => {});\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint with projectService (JS)\nDESCRIPTION: This JavaScript code snippet demonstrates how to configure ESLint using the new `projectService` option in typescript-eslint v8. It replaces the previous `project` option and enables typed linting. `tsconfigRootDir` specifies the root directory where tsconfig.json is located.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/website/blog/2024-07-31-announcing-typescript-eslint-v8.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport eslint from '@eslint/js';\nimport tseslint from 'typescript-eslint';\n\nexport default tseslint.config(\n  eslint.configs.recommended,\n  ...tseslint.configs.recommendedTypeChecked,\n  {\n    languageOptions: {\n      parserOptions: {\n        // Remove this line\n        project: true,\n        // Add this line\n        projectService: true,\n        tsconfigRootDir: import.meta.dirname,\n      },\n    },\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: ESLint Overrides Configuration - JSONC\nDESCRIPTION: Configuration for ESLint overrides to apply the `explicit-module-boundary-types` rule only to TypeScript files. This configuration disables the rule globally and then enables it specifically for `.ts`, `.mts`, `.cts`, and `.tsx` files.  This prevents linting errors in JavaScript files within a mixed codebase.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/explicit-module-boundary-types.mdx#_snippet_2\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"rules\": {\n    // disable the rule for all files\n    \"@typescript-eslint/explicit-module-boundary-types\": \"off\"\n  },\n  \"overrides\": [\n    {\n      // enable the rule specifically for TypeScript files\n      \"files\": [\"*.ts\", \"*.mts\", \"*.cts\", \"*.tsx\"],\n      \"rules\": {\n        \"@typescript-eslint/explicit-module-boundary-types\": \"error\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Promise Voiding (ignoreVoid)\nDESCRIPTION: This code demonstrates the correct usage of the `void` operator to explicitly mark Promises as intentionally not awaited when the `ignoreVoid` option is enabled. It shows how to avoid the `no-floating-promises` error when intentionally ignoring the result of a Promise.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-floating-promises.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nasync function returnsPromise() {\n  return 'value';\n}\nvoid returnsPromise();\n\nvoid Promise.reject('value');\n```\n\n----------------------------------------\n\nTITLE: Allowing specific require() imports with 'allow' option - Correct\nDESCRIPTION: Demonstrates the correct usage of `require()` when the `allow` option is configured to permit specific imports, such as `package.json`. The option allows require to be used in cases where import syntax may not be suitable.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-require-imports.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconsole.log(require('../package.json').version);\n```\n\n----------------------------------------\n\nTITLE: Class with/without Type Annotations\nDESCRIPTION: Illustrates how type annotations are required or not required within a class based on the `typedef` rule.  The `delayedText` field demonstrates where a type annotation is needed for type inference. The `immediateTextExplicit` shows explicit typing, while `immediateTextImplicit` relies on type inference from the initial value.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/typedef.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ContainsText {\n  // There must be a type annotation here to infer the type\n  delayedText: string;\n\n  // `typedef` requires a type annotation here to maintain consistency\n  immediateTextExplicit: string = 'text';\n\n  // This is still a string type because of its initial value\n  immediateTextImplicit = 'text';\n}\n```\n\n----------------------------------------\n\nTITLE: Correct IIFE usage (ignoreIIFE)\nDESCRIPTION: This example demonstrates the correct usage of immediately invoked function expressions (IIFE) with async functions when the `ignoreIIFE` option is enabled. When using `ignoreIIFE`, ensures that floating promises within IIFEs are ignored by the `no-floating-promises` rule.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-floating-promises.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nawait (async function () {\n  await res(1);\n})();\n\n(async function () {\n  await res(1);\n})();\n```\n\n----------------------------------------\n\nTITLE: Migrating to Standalone RuleTester in typescript-eslint v6\nDESCRIPTION: This code snippet demonstrates how to migrate from the old RuleTester implementation within `@typescript-eslint/utils` to the new standalone `@typescript-eslint/rule-tester` package in typescript-eslint v6. It includes removing the old import and instantiation and replacing them with the new ones.  It shows the updated import path and constructor for the RuleTester.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/website/blog/2023-03-13-announcing-typescript-eslint-v6-beta.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Remove this line\nimport { TSESLint } from '@typescript-eslint/utils';\n// Add this line\nimport { RuleTester } from '@typescript-eslint/rule-tester';\n\nimport rule from '../src/rules/my-rule';\n\n// Remove this line\nconst ruleTester = new TSESLint.RuleTester({\n// Add this line\nconst ruleTester = new RuleTester({\n  parser: '@typescript-eslint/parser',\n});\n\nruleTester.run('my-rule', rule, { /* ... */ });\n```\n\n----------------------------------------\n\nTITLE: Incorrect Code Example\nDESCRIPTION: This example demonstrates code that violates the consistent-type-imports rule. It mixes regular imports with type usages, which is flagged as incorrect based on the configured rule settings.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/consistent-type-imports.mdx#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Foo } from 'Foo';\nimport Bar from 'Bar';\ntype T = Foo;\nconst x: Bar = 1;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Type Information (typescript-eslint v6)\nDESCRIPTION: This code snippet demonstrates the simplified approach to retrieving type information in typescript-eslint v6 using the wrapper API `services.getTypeAtLocation`. It streamlines the process by directly accessing the type at a given location through the parser services object.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/website/blog/2023-07-09-announcing-typescript-eslint-v6.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  // ...\n  create() {\n    const services = util.getParserServices(context);\n    const type = services.getTypeAtLocation(node);\n\n    // ...\n  }\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Type Assertion with 'as' Keyword and Custom Type\nDESCRIPTION: This code demonstrates an incorrect type assertion using the `as` keyword and a custom type alias. Similar to the previous example, the `as Foo` assertion is redundant because `Foo` is an alias for `number`. This is another redundant type assertion.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-unnecessary-type-assertion.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntype Foo = number;\nconst foo = (3 + 5) as Foo;\n```\n\n----------------------------------------\n\nTITLE: Incorrect array type notation with 'array' option in TypeScript\nDESCRIPTION: This snippet demonstrates incorrect array type notation when the `default` option is set to 'array'. It uses `Array<string>` and `ReadonlyArray<string>` instead of the enforced `string[]` and `readonly string[]` syntax.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/array-type.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst x: Array<string> = ['a', 'b'];\nconst y: ReadonlyArray<string> = ['a', 'b'];\n```\n\n----------------------------------------\n\nTITLE: Incorrect Utilities Class - TypeScript\nDESCRIPTION: This snippet illustrates an incorrect usage of a class containing only static utility functions.  The rule suggests exporting the utility functions directly from the module instead. The functions call each other within the class.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-extraneous-class.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport class Utilities {\n  static util1() {\n    return Utilities.util3();\n  }\n\n  static util2() {\n    /* ... */\n  }\n\n  static util3() {\n    /* ... */\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: ESLint Rule Configuration Object - v6 Recommended\nDESCRIPTION: Defines an ESLint rule configuration object containing several TypeScript ESLint rules and their severity levels ('error'). This configuration is considered a 'recommended' setup, suggesting these rules are generally beneficial for code quality.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/website/blog/2023-07-09-announcing-typescript-eslint-v6.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst v6Recommended = {\n  '@typescript-eslint/no-extra-non-null-assertion': 'error',\n  'no-loss-of-precision': 'off',\n  '@typescript-eslint/no-loss-of-precision': 'error',\n  '@typescript-eslint/no-misused-new': 'error',\n  '@typescript-eslint/no-namespace': 'error',\n  '@typescript-eslint/no-non-null-asserted-optional-chain': 'error',\n  '@typescript-eslint/no-this-alias': 'error',\n  '@typescript-eslint/no-unnecessary-type-constraint': 'error',\n  '@typescript-eslint/no-unsafe-declaration-merging': 'error',\n  'no-unused-vars': 'off',\n  '@typescript-eslint/no-unused-vars': 'error',\n  '@typescript-eslint/no-var-requires': 'error',\n  '@typescript-eslint/prefer-as-const': 'error',\n  '@typescript-eslint/triple-slash-reference': 'error',\n};\n```\n\n----------------------------------------\n\nTITLE: Discouraged String Substring Checks - TypeScript\nDESCRIPTION: This code snippet demonstrates incorrect ways to check if a string starts or ends with a specific substring.  It uses methods like `indexOf`, `slice`, `substring`, `charAt`, regular expressions, and array access to achieve the same result as `startsWith` and `endsWith`. These alternatives are flagged by the rule.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-string-starts-ends-with.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ndeclare const foo: string;\n\n// starts with\nfoo[0] === 'b';\nfoo.charAt(0) === 'b';\nfoo.indexOf('bar') === 0;\nfoo.slice(0, 3) === 'bar';\nfoo.substring(0, 3) === 'bar';\nfoo.match(/^bar/) != null;\n/^bar/.test(foo);\n\n// ends with\nfoo[foo.length - 1] === 'b';\nfoo.charAt(foo.length - 1) === 'b';\nfoo.lastIndexOf('bar') === foo.length - 3;\nfoo.slice(-3) === 'bar';\nfoo.substring(foo.length - 3) === 'bar';\nfoo.match(/bar$/) != null;\n/bar$/.test(foo);\n```\n\n----------------------------------------\n\nTITLE: Correct Object Destructuring\nDESCRIPTION: Illustrates correct object destructuring with type annotations when the `objectDestructuring` option is enabled. The types for `length`, `b` and `c` are explicitly defined, resolving type checking errors.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/typedef.mdx#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst { length }: { length: number } = 'text';\nconst [b, c]: [number, number] = Math.random() ? [1, 2] : [3, 4];\n\nfor (const { key, val } of [{ key: 'key', val: 1 }]) {\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect return examples in TypeScript\nDESCRIPTION: Demonstrates incorrect usage of return statements in TypeScript functions where return values are inconsistent. It highlights functions declared to return `undefined` or `Promise<undefined>` but have inconsistent return paths.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/consistent-return.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction foo(): undefined {}\nfunction bar(flag: boolean): undefined {\n  if (flag) return foo();\n  return;\n}\n\nasync function baz(flag: boolean): Promise<undefined> {\n  if (flag) return;\n  return foo();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring RuleTester with Flat Config - TypeScript\nDESCRIPTION: This snippet shows how to configure the `RuleTester` from `@typescript-eslint/rule-tester` using the new flat configuration format, mirroring ESLint v9. It requires moving parser configurations inside a `languageOptions` property. Parser options like `tsconfigRootDir` should be nested under `languageOptions`.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/website/blog/2024-05-27-announcing-typescript-eslint-v8-beta.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RuleTester } from '@typescript-eslint/rule-tester'\n\nconst ruleTester = new RuleTester({\n  // Add this line\n  languageOptions: {\n    parserOptions: {\n      tsconfigRootDir: import.meta.dirname,\n    },\n  // Add this line\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Correct Type Constituents in TypeScript\nDESCRIPTION: This code snippet shows examples of correctly defined union and intersection types where constituents are unique.  It demonstrates how to avoid duplicate type definitions, which can improve code clarity and maintainability. It also shows a correct usage of an optional parameter without explicitly including `undefined` in the type union.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-duplicate-type-constituents.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype T1 = 'A' | 'B';\n\ntype T2 = string | number | boolean;\n\ntype T3 = { a: string } & { b: string };\n\ntype T4 = [1, 2, 3] | [1, 2, 3, 4];\n\ntype StringA = string;\ntype NumberB = number;\ntype T5 = StringA | NumberB;\n\nconst fn = (a?: string) => {};\n```\n\n----------------------------------------\n\nTITLE: Incorrect: Constant Loop Condition - Never\nDESCRIPTION: This example shows incorrect code when `allowConstantLoopConditions` is set to `'never'`. Constant conditions in `while`, `for`, and `do-while` loops are disallowed.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-unnecessary-condition.mdx#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nwhile (true) {\n  // ...\n}\n\nfor (; true; ) {\n  // ...\n}\n\ndo {\n  // ...\n} while (true);\n```\n\n----------------------------------------\n\nTITLE: Correct Function Type Usage - TypeScript\nDESCRIPTION: This code snippet demonstrates the correct way to define function types in TypeScript, avoiding the generic `Function` type. Specific parameter and return types are defined, ensuring type safety.  It showcases the use of arrow function syntax with type annotations for parameters and return values.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-unsafe-function-type.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nlet noParametersOrReturn: () => void;\nnoParametersOrReturn = () => {};\n\nlet stringToNumber: (text: string) => number;\nstringToNumber = text => text.length;\n\nlet identity: <T>(value: T) => T;\nidentity = value => value;\n```\n\n----------------------------------------\n\nTITLE: Configuring Rule to Allow Public Parameter Properties in JSON\nDESCRIPTION: This JSON configuration allows the use of public parameter properties.  It sets the ESLint rule `@typescript-eslint/parameter-properties` to `true` and configures the `allow` option to include `public`.  This will prevent the rule from flagging public parameter properties as errors.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/parameter-properties.mdx#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"@typescript-eslint/parameter-properties\": [\n    true,\n    {\n      \"allow\": [\"public\"]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Extending with Recommended Type Checked Config (Legacy)\nDESCRIPTION: This snippet shows how to extend the ESLint configuration using the `recommended-type-checked` configuration using the Legacy Config style.  Type information is needed for these rules to function.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/users/Shared_Configurations.mdx#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  extends: ['plugin:@typescript-eslint/recommended-type-checked'],\n};\n```\n\n----------------------------------------\n\nTITLE: Disallow 'path' triple-slash reference\nDESCRIPTION: This snippet demonstrates how to disallow the use of `/// <reference path=\"...\" />` and enforce using an `import` statement instead. The `path` option is set to `'never'` to trigger the rule.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/triple-slash-reference.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference path=\"code\" />\n\nglobalThis.value;\n```\n\n----------------------------------------\n\nTITLE: Incorrect Enum Usage: Unnecessary Qualifier - TypeScript\nDESCRIPTION: This code snippet demonstrates incorrect usage of enum qualifiers. Inside enum `A`, `A.B` is unnecessary and should be just `B`.  The rule flags this as an unnecessary qualifier. Requires TypeScript.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-unnecessary-qualifier.mdx#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nenum A {\n  B,\n  C = A.B,\n}\n```\n\n----------------------------------------\n\nTITLE: Disallow dynamic delete - Incorrect\nDESCRIPTION: This code demonstrates incorrect usage of the `delete` operator on dynamically computed key expressions. It shows how deleting keys based on variables or expressions can be problematic.  It can lead to difficult to reason about lookups.  The code is provided as an example of what the `no-dynamic-delete` rule flags as an error.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-dynamic-delete.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Dynamic, difficult-to-reason-about lookups\nconst name = 'name';\ndelete container[name];\ndelete container[name.toUpperCase()];\n```\n\n----------------------------------------\n\nTITLE: Incorrect enum with mixed number and string members in TypeScript\nDESCRIPTION: This TypeScript code snippet shows an example of an incorrect enum declaration that mixes number and string values for its members. The 'Status' enum has 'Unknown' implicitly assigned to 0, 'Closed' explicitly assigned to 1, and 'Open' assigned to the string 'open'. This mixing of types is generally considered a bad practice and is flagged by the 'no-mixed-enums' rule.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-mixed-enums.mdx#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nenum Status {\n  Unknown,\n  Closed = 1,\n  Open = 'open',\n}\n```\n\n----------------------------------------\n\nTITLE: Safe Enum Comparison Example (Correct)\nDESCRIPTION: This example demonstrates the correct way to compare enum values by comparing them to other enum members instead of their underlying values. This ensures type safety and maintainability by preventing direct comparisons with primitive values or non-enum values. The correct way to access enum members promotes consistency and code readability.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-unsafe-enum-comparison.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nenum Fruit {\n  Apple,\n}\n\ndeclare let fruit: Fruit;\n\nfruit === Fruit.Apple;\n\nenum Vegetable {\n  Asparagus = 'asparagus',\n}\n\ndeclare let vegetable: Vegetable;\n\nvegetable === Vegetable.Asparagus;\n```\n\n----------------------------------------\n\nTITLE: Incorrect Higher Order Functions - TypeScript\nDESCRIPTION: Examples of incorrect code that violates the rule when `allowHigherOrderFunctions` is `false`.  These higher-order functions lack explicit return type annotations on the inner functions.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/explicit-module-boundary-types.mdx#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport const arrowFn = () => () => {};\n\nexport function fn() {\n  return function () {};\n}\n\nexport function foo(outer: string) {\n  return function (inner: string) {};\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Error Throw Examples in TypeScript\nDESCRIPTION: This code demonstrates correct examples of throwing `Error` objects, which are allowed by the `only-throw-error` rule. The examples include throwing instances of `Error`, custom error classes extending `Error`, and returning `Error` objects from functions.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/only-throw-error.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nthrow new Error();\n\nthrow new Error('error');\n\nconst e = new Error('error');\nthrow e;\n\ntry {\n  throw new Error('error');\n} catch (e) {\n  throw e;\n}\n\nconst err = new Error();\nthrow err;\n\nfunction getError() {\n  return new Error();\n}\nthrow getError();\n\nconst foo = {\n  bar: new Error(),\n};\nthrow foo.bar;\n\nclass CustomError extends Error {\n  // ...\n}\nthrow new CustomError();\n```\n\n----------------------------------------\n\nTITLE: Incorrect Interface Usage with 'type' Option\nDESCRIPTION: This snippet demonstrates incorrect usage when the `consistent-type-definitions` rule is set to `'type'`. It shows an `interface` being used to define an object shape, which violates the rule's requirement to use `type` for object type definitions.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/consistent-type-definitions.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninterface T {\n  x: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing TypeScript in .vue Files using Flat Config\nDESCRIPTION: This snippet demonstrates how to configure ESLint with Flat Config to parse TypeScript code within `.vue` files. It uses `vue-eslint-parser` as the top-level parser and specifies `@typescript-eslint/parser` within `parserOptions.parser`. The snippet assumes that the `vue-eslint-parser` and `typescript-eslint` packages are installed.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/troubleshooting/faqs/Frameworks.mdx#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport tseslint from 'typescript-eslint';\n// Add this line\nimport vueParser from 'vue-eslint-parser';\n\nexport default tseslint.config(\n  // ... the rest of your config ...\n  {\n    languageOptions: {\n      // Remove this line\n      parser: tseslint.parser,\n      // Add this line\n      parser: vueParser,\n      parserOptions: {\n        // Add this line\n        parser: tseslint.parser,\n        sourceType: 'module',\n      },\n    },\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Correct array type notation with 'generic' option in TypeScript\nDESCRIPTION: This snippet demonstrates correct array type notation when the `default` option is set to 'generic'. It uses the enforced `Array<string>`, `ReadonlyArray<string>`, and `Readonly<Array<string>>` syntax for array type declarations.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/array-type.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst x: Array<string> = ['a', 'b'];\nconst y: ReadonlyArray<string> = ['a', 'b'];\nconst z: Readonly<Array<string>> = ['a', 'b'];\n```\n\n----------------------------------------\n\nTITLE: Using splice to remove array element in TypeScript\nDESCRIPTION: This code snippet demonstrates the correct way to remove an element from an array in TypeScript, using the `splice` method. It declares an array `arr` of numbers and then uses `arr.splice(0, 1)` to remove one element starting at index 0. This method updates the array's length and avoids creating empty slots.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-array-delete.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\ndeclare const arr: number[];\n\narr.splice(0, 1);\n```\n\n----------------------------------------\n\nTITLE: Await Using with Sync Disposable (Incorrect)\nDESCRIPTION: This example illustrates the incorrect use of `await using` with a synchronous disposable resource. Using `await` with a synchronous disposable is unnecessary because the disposal happens synchronously.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/await-thenable.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nfunction makeSyncDisposable(): Disposable {\n  return {\n    [Symbol.dispose](): void {\n      // Dispose of the resource\n    },\n  };\n}\n\nasync function shouldNotAwait() {\n  await using resource = makeSyncDisposable();\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Explicit Module Boundary Types with any - TypeScript\nDESCRIPTION: Example of incorrect code that violates the `explicit-module-boundary-types` rule when `allowArgumentsExplicitlyTypedAsAny` is set to `false`.  This demonstrates the importance of avoiding `any` and using more specific types where possible.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/explicit-module-boundary-types.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport const func = (value: any): number => value + 1;\n```\n\n----------------------------------------\n\nTITLE: Incorrect Readonly Private Members TypeScript\nDESCRIPTION: This code shows examples of private member variables and parameter properties that could be marked as `readonly` because they are not modified outside the constructor. The rule flags these as violations.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-readonly.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Container {\n  // These member variables could be marked as readonly\n  private neverModifiedMember = true;\n  private onlyModifiedInConstructor: number;\n  #neverModifiedPrivateField = 3;\n\n  public constructor(\n    onlyModifiedInConstructor: number,\n    // Private parameter properties can also be marked as readonly\n    private neverModifiedParameter: string,\n  ) {\n    this.onlyModifiedInConstructor = onlyModifiedInConstructor;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Non-Null Assertion Example in TypeScript\nDESCRIPTION: This code snippet demonstrates an incorrect usage of the non-null assertion operator (!). It attempts to access the `includes` method of a potentially nullable `property` without properly checking for null or undefined, which can lead to runtime errors. The `Example` interface declares `property` as optional.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-non-null-assertion.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface Example {\n  property?: string;\n}\n\ndeclare const example: Example;\nconst includesBaz = example.property!.includes('baz');\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint with Flat Config for TSConfig\nDESCRIPTION: This code snippet shows how to configure ESLint using the Flat Config approach (`eslint.config.mjs`) to specify a custom TSConfig file for type-aware linting.  The `parserOptions.project` property is set to the path of the desired TSConfig file (e.g., `'./tsconfig.eslint.json'`), and `tsconfigRootDir` is set to the directory containing the TSConfig file. This ensures that ESLint uses the specified TSConfig for generating type information during linting.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/troubleshooting/typed-linting/index.mdx#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexport default tseslint.config({\n  // ...\n  languageOptions: {\n    parserOptions: {\n      project: './tsconfig.eslint.json',\n      tsconfigRootDir: import.meta.dirname,\n    },\n  },\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Importing with package.json exports (After)\nDESCRIPTION: This code snippet showcases the recommended way to import modules from `@typescript-eslint/*` packages after the introduction of `package.json` exports.  It involves importing directly from the package name, improving clarity and preventing issues caused by internal refactors.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/website/blog/2023-07-09-announcing-typescript-eslint-v6.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n// import * as TSESLint from '@typescript-eslint/utils/dist/ts-eslint';\n// -->\nimport { TSESLint } from '@typescript-eslint/utils';\n// The following would also work and be equivalent:\n// import * as TSESLint from '@typescript-eslint/utils/ts-eslint';\n// But explicit importing should be generally favored over star imports.\n\n// import { RuleModule } from '@typescript-eslint/utils/dist/ts-eslint';\n// -->\nimport { RuleModule } from '@typescript-eslint/utils/ts-eslint';\n\n// import { AST_NODE_TYPES } from \"@typescript-eslint/types/dist/generated/ast-spec\";\n// -->\nimport { AST_NODE_TYPES } from '@typescript-eslint/types';\n```\n\n----------------------------------------\n\nTITLE: ESLint Configuration with allow option (JSON)\nDESCRIPTION: This JSON snippet demonstrates how to configure the `@typescript-eslint/no-misused-spread` rule in an ESLint configuration file with the `allow` option. It specifies that spreading is allowed for a type named `BrandedString` defined in `file.ts`.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-misused-spread.mdx#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"@typescript-eslint/no-misused-spread\": [\n    \"error\",\n    {\n      \"allow\": [\n        { \"from\": \"file\", \"name\": \"BrandedString\", \"path\": \"file.ts\" },\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Floating Promise Fix in TypeScript\nDESCRIPTION: This snippet shows the code fix suggested by eslint to handle a floating promise by adding an await keyword.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/website/blog/2024-09-30-typed-linting.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n- readFromCache(filePath);\n+ await readFromCache(filePath);\n```\n\n----------------------------------------\n\nTITLE: Allow Index Signature Access - TypeScript\nDESCRIPTION: This code demonstrates how to allow access to properties using an index signature with bracket notation when `allowIndexSignaturePropertyAccess` is set to `true`. This is relevant for classes with a `string` index signature.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/dot-notation.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nclass X {\n  [key: string]: number;\n}\n\nconst x = new X();\nx['hello'] = 123;\n```\n\n----------------------------------------\n\nTITLE: Correct: Necessary Condition - Array Length Check\nDESCRIPTION: This example demonstrates the correct usage of a conditional statement where `items.length` is checked to ensure that the array has elements before accessing the first element. The length check is necessary because `items.length` might be 0.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-unnecessary-condition.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nfunction head<T>(items: T[]) {\n  // Necessary, since items.length might be 0\n  if (items.length) {\n    return items[0].toUpperCase();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing stylistic-type-checked with Legacy Config\nDESCRIPTION: This code snippet shows how to extend the `stylistic-type-checked` configuration using the legacy `.eslintrc.js` format. It sets the `extends` property to an array containing the string `'plugin:@typescript-eslint/stylistic-type-checked'`, which enables the stylistic rules requiring type information.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/users/Shared_Configurations.mdx#_snippet_16\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  extends: ['plugin:@typescript-eslint/stylistic-type-checked'],\n};\n```\n\n----------------------------------------\n\nTITLE: Avoiding Wide Globs in Legacy Config\nDESCRIPTION: This JavaScript code demonstrates how to avoid using wide globs (like `./**/tsconfig.json`) in the `parserOptions.project` array of a legacy ESLint configuration. It replaces the wide glob with a more specific path (`./packages/*/tsconfig.json`) to improve linting performance in monorepo setups.  The `tsconfigRootDir` is explicitly set to `__dirname`.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/troubleshooting/typed-linting/Monorepos.mdx#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n/* eslint-env node */\nmodule.exports = {\n  extends: [\n    'eslint:recommended',\n    'plugin:@typescript-eslint/recommended',\n    'plugin:@typescript-eslint/recommended-type-checked',\n  ],\n  parser: '@typescript-eslint/parser',\n  parserOptions: {\n    // Remove this line\n    project: ['./tsconfig.eslint.json', './**/tsconfig.json'],\n    // Add this line\n    project: ['./tsconfig.eslint.json', './packages/*/tsconfig.json'],\n    tsconfigRootDir: __dirname,\n  },\n  plugins: ['@typescript-eslint'],\n  root: true,\n};\n```\n\n----------------------------------------\n\nTITLE: Awaiting Non-Thenable Values (Incorrect)\nDESCRIPTION: This example shows incorrect usage of the `await` keyword on values that are not Thenable (i.e., don't have a `then` method). Awaiting a non-Thenable value is valid JavaScript but often indicates a programmer error, such as forgetting to call a function that returns a Promise.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/await-thenable.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nawait 'value';\n\nconst createValue = () => 'value';\nawait createValue();\n```\n\n----------------------------------------\n\nTITLE: Incorrect String Conversions in TypeScript\nDESCRIPTION: Examples of incorrect usage where objects are implicitly converted to strings using concatenation, interpolation, or explicit `toString()`/`toLocaleString()` calls, resulting in the default '[object Object]' representation.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-base-to-string.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Passing an object or class instance to string concatenation:\n'' + {};\n\nclass MyClass {}\nconst value = new MyClass();\nvalue + '';\n\n// Interpolation and manual .toString() and `toLocaleString()` calls too:\n`Value: ${value}`;\nString({});\n({}).toString();\n({}).toLocaleString();\n\n// Stringifying objects or instances in an array with the `Array.prototype.join`.\n[{}, new MyClass()].join('');\n```\n\n----------------------------------------\n\nTITLE: Incorrect Optional Members First (Typescript)\nDESCRIPTION: This TypeScript code shows incorrect placement of optional members.  'b?' should appear before 'a' and 'c'.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/member-ordering.mdx#_snippet_46\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Foo {\n  a: boolean;\n  b?: number;\n  c: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Unsafe Enum Comparison Example (Incorrect)\nDESCRIPTION: This example demonstrates incorrect usage by comparing an enum value with a non-enum value, which is disallowed by the rule. It uses both numeric and string enums and compares them directly to their underlying values or a non enum string. The comparisons will result in a compilation error when the rule is enabled.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-unsafe-enum-comparison.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nenum Fruit {\n  Apple,\n}\n\ndeclare let fruit: Fruit;\n\n// bad - comparison between enum and explicit value instead of named enum member\nfruit === 0;\n\nenum Vegetable {\n  Asparagus = 'asparagus',\n}\n\ndeclare let vegetable: Vegetable;\n\n// bad - comparison between enum and explicit value instead of named enum member\nvegetable === 'asparagus';\n\ndeclare let anyString: string;\n\n// bad - comparison between enum and non-enum value\nanyString === Vegetable.Asparagus;\n```\n\n----------------------------------------\n\nTITLE: Correct `checkBoolean` example - TypeScript\nDESCRIPTION: Example demonstrating the correct code when using the `checkBoolean` option. It demonstrates the use of optional chaining.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-optional-chain.mdx#_snippet_12\n\nLANGUAGE: ts\nCODE:\n```\ndeclare const thing: true;\n\nthing?.toString();\n```\n\n----------------------------------------\n\nTITLE: Correct Alphabetical Order in Member Groups (Typescript)\nDESCRIPTION: This TypeScript code shows correct alphabetical ordering within the 'method' and 'field' member groups.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/member-ordering.mdx#_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Foo {\n  B(): void;\n  a(): void;\n  c(): void;\n\n  B: x;\n  a: x;\n  c: x;\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Function Type Usage - TypeScript\nDESCRIPTION: This code snippet demonstrates incorrect usage of the `Function` type in TypeScript.  The `Function` type is too generic and doesn't provide type safety. It's preferable to define specific parameter and return types. This example showcases assignments to a variable declared with the `Function` type.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-unsafe-function-type.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nlet noParametersOrReturn: Function;\nnoParametersOrReturn = () => {};\n\nlet stringToNumber: Function;\nstringToNumber = (text: string) => text.length;\n\nlet identity: Function;\nidentity = value => value;\n```\n\n----------------------------------------\n\nTITLE: Using withoutProjectParserOptions in a JavaScript ESLint Plugin\nDESCRIPTION: This JavaScript example demonstrates how to use `withoutProjectParserOptions` within an ESLint plugin to parse files in isolation. It retrieves parser options from the context, cleans them using `withoutProjectParserOptions`, and then uses the cleaned options to parse the file content via `parser.parseForESLint`. It depends on `@typescript-eslint/parser`.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/packages/Parser.mdx#_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst parser = require('@typescript-eslint/parser');\n\nfunction parse(path, content, context) {\n  const contextParserOptions = context.languageOptions?.parserOptions ?? {};\n  const parserOptions =\n    parser.withoutProjectParserOptions(contextParserOptions);\n\n  // Do something with the cleaned-up options eventually, such as invoking the parser\n  parser.parseForESLint(content, parserOptions);\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Null Safe Access Example in TypeScript\nDESCRIPTION: This code snippet demonstrates the correct way to handle a potentially nullable value using the optional chaining operator (?.) and the nullish coalescing operator (??). The optional chaining operator safely accesses the `includes` method only if `example.property` is not null or undefined. The nullish coalescing operator provides a default value of `false` if `example.property?.includes('baz')` evaluates to null or undefined.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-non-null-assertion.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface Example {\n  property?: string;\n}\n\ndeclare const example: Example;\nconst includesBaz = example.property?.includes('baz') ?? false;\n```\n\n----------------------------------------\n\nTITLE: Correct Unbound Method Usage in TypeScript\nDESCRIPTION: This code demonstrates correct usage of unbound methods in TypeScript.  It showcases various techniques to ensure that class methods are called with their intended `this` context. The use of arrow functions, `.bind()`, and explicitly declaring `this: void` in the method signature are shown to avoid issues with unbound methods. The example also shows usage of logBound which is an arrow function, and therefore is already bound.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/unbound-method.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass MyClass {\n  public logUnbound(): void {\n    console.log(this);\n  }\n\n  public logBound = () => console.log(this);\n}\n\nconst instance = new MyClass();\n\n// logBound will always be bound with the correct scope\nconst { logBound } = instance;\nlogBound();\n\n// .bind and lambdas will also add a correct scope\nconst dotBindLog = instance.logUnbound.bind(instance);\nconst innerLog = () => instance.logUnbound();\n\n// arith.double explicitly declares that it does not refer to `this` internally\nconst arith = {\n  double(this: void, x: number): number {\n    return x * 2;\n  },\n};\nconst { double } = arith;\n```\n\n----------------------------------------\n\nTITLE: Corrected Type Declarations in TypeScript\nDESCRIPTION: Demonstrates correct type declarations by removing the redundant constituents from the union and intersection types. This simplifies the type definitions by removing overridden or unnecessary types, such as `any`, `unknown`, and literal types combined with their primitives.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-redundant-type-constituents.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype UnionAny = any;\ntype UnionUnknown = unknown;\ntype UnionNever = never;\n\ntype UnionBooleanLiteral = boolean;\ntype UnionNumberLiteral = number;\ntype UnionStringLiteral = string;\n\ntype IntersectionAny = any;\ntype IntersectionUnknown = string;\ntype IntersectionNever = string;\n\ntype IntersectionBooleanLiteral = false;\ntype IntersectionNumberLiteral = 1;\ntype IntersectionStringLiteral = 'foo';\n```\n\n----------------------------------------\n\nTITLE: Configuring no-unused-vars Rule\nDESCRIPTION: This JSON configuration shows how to configure the @typescript-eslint/no-unused-vars rule in ESLint to emulate TypeScript's style of exempting names starting with '_'. It sets the arguments, caughtErrors, destructuredArray, vars, and ignoreRestSiblings options to customize the rule's behavior.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-unused-vars.mdx#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"rules\": {\n    \"@typescript-eslint/no-unused-vars\": [\n      \"error\",\n      {\n        \"args\": \"all\",\n        \"argsIgnorePattern\": \"^_\",\n        \"caughtErrors\": \"all\",\n        \"caughtErrorsIgnorePattern\": \"^_\",\n        \"destructuredArrayIgnorePattern\": \"^_\",\n        \"varsIgnorePattern\": \"^_\",\n        \"ignoreRestSiblings\": true\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Example: Necessary Type Parameters TypeScript\nDESCRIPTION: This example demonstrates the correct usage of type parameters.  Type parameters should be relating at least two types. The function `second` uses type parameter `B` to relate the input parameter `b` with the return type. The function `parseJSON` omits the unnecessary type parameter. The function `printProperty` uses `T` relating the input obj with the key, and K relating the input key to the properties of the obj. The function `identity` uses T twice: as type of argument and return type. The function `getProperty` uses T twice and K twice\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-unnecessary-type-parameters.mdx#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nfunction second<B>(a: unknown, b: B): B {\n  return b;\n}\n\nfunction parseJSON(input: string): unknown {\n  return JSON.parse(input);\n}\n\nfunction printProperty<T>(obj: T, key: keyof T) {\n  console.log(obj[key]);\n}\n\n// T appears twice: in the type of arg and as the return type\nfunction identity<T>(arg: T): T {\n  return arg;\n}\n\n// T appears twice: \"keyof T\" and in the inferred return type (T[K]).\n// K appears twice: \"key: K\" and in the inferred return type (T[K]).\nfunction getProperty<T, K extends keyof T>(obj: T, key: K) {\n  return obj[key];\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Arrow Parameter Typing\nDESCRIPTION: Illustrates incorrect arrow function parameter typing without type annotations when the `arrowParameter` option is enabled. The `size` and `text` parameters lack explicit type definitions, causing a linting error.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/typedef.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst logsSize = size => console.log(size);\n\n['hello', 'world'].map(text => text.length);\n\nconst mapper = {\n  map: text => text + '...',\n};\n```\n\n----------------------------------------\n\nTITLE: Correct Type Assertion Example (objectLiteralTypeAssertions)\nDESCRIPTION: This code snippet demonstrates correct usage of type assertions when `objectLiteralTypeAssertions` is set to `'never'`. It shows how to define the type of an object literal directly or use `as any` or `as unknown` assertions. The `objectLiteralTypeAssertions` option configured to `'never'` disallows type asserting an object literal.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/consistent-type-assertions.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst x: T = { foo: 1 };\nconst y = { foo: 1 } as any;\nconst z = { foo: 1 } as unknown;\n\nfunction bar(): T {\n  return { foo: 1 };\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Shared Configurations (Legacy Config)\nDESCRIPTION: This JavaScript code snippet updates the ESLint configuration (Legacy Config) to use type-checked versions of the `strict` and `stylistic` shared configurations. It removes the original configurations and adds `strictTypeChecked` and `stylisticTypeChecked`. This is a CommonJS module.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/getting-started/Typed_Linting.mdx#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n/* eslint-env node */\nmodule.exports = {\n  extends: [\n    'eslint:recommended',\n    // Removed lines start\n    'plugin:@typescript-eslint/strict',\n    'plugin:@typescript-eslint/stylistic',\n    // Removed lines end\n    // Added lines start\n    'plugin:@typescript-eslint/strict-type-checked',\n    'plugin:@typescript-eslint/stylistic-type-checked',\n    // Added lines end\n  ],\n  // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Naming Convention - No Interface Prefix with 'I'\nDESCRIPTION: This configuration enforces that interface names do not begin with an \"I\". It uses the \"interface\" selector and uses a custom regex to disallow interface prefixes.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/naming-convention.mdx#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"@typescript-eslint/naming-convention\": [\n    \"error\",\n    {\n      \"selector\": \"interface\",\n      \"format\": [\"PascalCase\"],\n      \"custom\": {\n        \"regex\": \"^I[A-Z]\",\n        \"match\": false\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect `checkBoolean` example - TypeScript\nDESCRIPTION: Example demonstrating incorrect code when using the `checkBoolean` option. It shows how chained logical AND can be replaced by an optional chain.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-optional-chain.mdx#_snippet_11\n\nLANGUAGE: ts\nCODE:\n```\ndeclare const thing: true;\n\nthing && thing.toString();\n```\n\n----------------------------------------\n\nTITLE: Correct code with getter accessors when accessors override is off (TypeScript)\nDESCRIPTION: Demonstrates correct TypeScript code where various forms of access modifiers are set on getters, when `overrides: { accessors: 'off' }`\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/explicit-member-accessibility.mdx#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nclass Animal {\n  public constructor(protected animalName) {}\n  public get name() {\n    return this.animalName;\n  }\n  get legs() {\n    return this.legCount;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Member Access on `any` Type - TypeScript\nDESCRIPTION: This snippet showcases incorrect usages of member access on variables declared with the `any` type. It demonstrates various ways `any` typed variables can be accessed, leading to potential type safety issues. The code declares `anyVar` and `nestedAny` as `any` and accesses their properties.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-unsafe-member-access.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare const anyVar: any;\ndeclare const nestedAny: { prop: any };\n\nanyVar.a;\nanyVar.a.b;\nanyVar['a'];\nanyVar['a']['b'];\n\nnestedAny.prop.a;\nnestedAny.prop['a'];\n\nconst key = 'a';\nnestedAny.prop[key];\n\n// Using an any to access a member is unsafe\nconst arr = [1, 2, 3];\narr[anyVar];\nnestedAny[anyVar];\n```\n\n----------------------------------------\n\nTITLE: Prefer Parameter Properties - Correct Examples\nDESCRIPTION: Examples of code which adhere to the rule when the option `{ \"prefer\": \"parameter-property\" }` is set. The rule is satisfied when the class property has a different name or type than the constructor parameter, or if there is logic performed in the constructor before the assignment.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/parameter-properties.mdx#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nclass Foo {\n  private differentName: string;\n  constructor(name: string) {\n    this.differentName = name;\n  }\n}\n\nclass Foo {\n  private differentType: number | undefined;\n  constructor(differentType: number) {\n    this.differentType = differentType;\n  }\n}\n\nclass Foo {\n  protected logicInConstructor: string;\n  constructor(logicInConstructor: string) {\n    console.log('Hello, world!');\n    this.logicInConstructor = logicInConstructor;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using JSON.stringify for Object Conversion in TypeScript\nDESCRIPTION: Demonstrates the recommended alternative of using `JSON.stringify` for converting objects to strings, particularly for logging or debugging purposes, providing a more informative representation than the default `toString()` output.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-base-to-string.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare const o: object;\nconst errorMessage = 'Found unexpected value: ' + JSON.stringify(o);\n```\n\n----------------------------------------\n\nTITLE: Correct - allowHigherOrderFunctions: true\nDESCRIPTION: Correct examples showcasing how to write higher-order functions that satisfy the rule when `allowHigherOrderFunctions` is enabled.  The inner functions have explicit return types.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/explicit-function-return-type.mdx#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nvar arrowFn = () => (): void => {};\n\nfunction fn() {\n  return function (): void {};\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Class with Static Member (allowStaticOnly) - TypeScript\nDESCRIPTION: This snippet demonstrates a correct case when the `allowStaticOnly` option is set to `true`.  The class `NotEmptyClass` contains a static member `version`, making it valid under this configuration.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-extraneous-class.mdx#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nclass NotEmptyClass {\n  static version = 42;\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Alphabetical Ordering Ignoring Member Groups (JSONC)\nDESCRIPTION: This configuration enables alphabetical sorting across all members, ignoring member groups by setting 'memberTypes' to 'never'.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/member-ordering.mdx#_snippet_42\n\nLANGUAGE: jsonc\nCODE:\n```\n// .eslintrc.json\n{\n  \"rules\": {\n    \"@typescript-eslint/member-ordering\": [\n      \"error\",\n      { \"default\": { \"memberTypes\": \"never\", \"order\": \"alphabetically\" } },\n    ],\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Promise return with custom Promise name\nDESCRIPTION: Example of incorrect code where a function returns a custom Promise-like object (Bluebird) without being marked as async. This requires setting `allowedPromiseNames` to include 'Bluebird'.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/promise-function-async.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nclass Bluebird {}\n\nconst returnsBluebird = () => new Bluebird(() => {});\n```\n\n----------------------------------------\n\nTITLE: Conditional Property Access for typescript-eslint Compatibility (Diff)\nDESCRIPTION: This diff shows how to conditionally access either the new `typeArguments` or the old `typeParameters` property on a node, allowing ESLint rules to support both typescript-eslint v5 and v6. It uses the `||` operator to fall back to the old property key if the new one doesn't exist.  The code ensures that the property access works regardless of the version of typescript-eslint being used.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/troubleshooting/faqs/General.mdx#_snippet_10\n\nLANGUAGE: diff\nCODE:\n```\n- node.typeParameters\n+ node.typeArguments || node.typeParameters\n```\n\n----------------------------------------\n\nTITLE: Disallow Array constructor (incorrect)\nDESCRIPTION: This snippet shows examples of incorrect usages of the Array constructor in TypeScript, where the arguments are treated as array elements rather than specifying the array length.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-array-constructor.mdx#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nArray(0, 1, 2);\nnew Array(0, 1, 2);\n```\n\n----------------------------------------\n\nTITLE: Incorrect Interface Member Ordering\nDESCRIPTION: This TypeScript code snippet demonstrates an incorrect member order in an interface, violating the enforced rule of signature, method, constructor, field.  The rule expects the signature to appear before the method, constructor and the field.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/member-ordering.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Foo {\n  B: string; // -> field\n\n  new (); // -> constructor\n\n  A(): void; // -> method\n\n  [Z: string]: any; // -> signature\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Nullish Coalescing Replacement Example in TypeScript\nDESCRIPTION: This code demonstrates incorrect usage of the logical OR operator where the nullish coalescing operator should be used. The logical OR will coalesce on any falsy value, potentially leading to unexpected behavior. This example highlights replacements for `||` operators and initializing with `if` statements.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-nullish-coalescing.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ndeclare const a: string | null;\ndeclare const b: string | null;\n\nconst c = a || b;\n\ndeclare let foo: { a: string } | null;\ndeclare function makeFoo(): { a: string };\n\nfunction lazyInitializeFooByTruthiness() {\n  if (!foo) {\n    foo = makeFoo();\n  }\n}\n\nfunction lazyInitializeFooByNullCheck() {\n  if (foo == null) {\n    foo = makeFoo();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Code with ignoredMethodNames config (TypeScript)\nDESCRIPTION: Demonstrates correct TypeScript code because it matches the `ignoredMethodNames` config.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/explicit-member-accessibility.mdx#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nclass Animal {\n  get specificMethod() {\n    console.log('No error because you specified this method on option');\n  }\n  get whateverMethod() {\n    console.log('No error because you specified this method on option');\n  }\n  public get otherMethod() {\n    console.log('This method comply with this rule');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect for-in loop usage with arrays in TypeScript\nDESCRIPTION: This snippet demonstrates the incorrect usage of a for-in loop to iterate over an array in TypeScript.  It iterates over the array's properties (including non-index properties) instead of its values.  This is discouraged due to potential bugs.  The expected input is an array of strings, and the output is the logging of values accessed using the loop variable as index.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-for-in-array.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ndeclare const array: string[];\n\nfor (const i in array) {\n  console.log(array[i]);\n}\n\nfor (const i in array) {\n  console.log(i, array[i]);\n}\n```\n\n----------------------------------------\n\nTITLE: Updating ESLint configuration file for typescript-eslint v6\nDESCRIPTION: This code snippet demonstrates how to update an existing ESLint configuration file (`.eslintrc.cjs`) to use the new configuration names in typescript-eslint v6. It replaces the old `recommended` and `recommended-requiring-type-checking` configurations with `recommended-type-checked` and `stylistic-type-checked`. It also updates the `project` setting in `parserOptions` to `true` and adds `tsconfigRootDir: __dirname`.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/website/blog/2023-03-13-announcing-typescript-eslint-v6-beta.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  extends: [\n    'eslint:recommended',\n    // Removed lines start\n    'plugin:@typescript-eslint/recommended',\n    'plugin:@typescript-eslint/recommended-requiring-type-checking',\n    // Removed lines end\n    // Added lines start\n    'plugin:@typescript-eslint/recommended-type-checked',\n    'plugin:@typescript-eslint/stylistic-type-checked',\n    // Added lines end\n  ],\n  plugins: ['@typescript-eslint'],\n  parser: '@typescript-eslint/parser',\n  parserOptions: {\n    // Remove this line\n    project: './tsconfig.json',\n    // Add this line\n    project: true,\n    tsconfigRootDir: __dirname,\n  },\n  root: true,\n};\n\n```\n\n----------------------------------------\n\nTITLE: Correct: onlyInlineLambdas Option TypeScript\nDESCRIPTION: This TypeScript code snippet demonstrates a correct usage of the `prefer-readonly` rule with the `onlyInlineLambdas` option enabled. It shows a private member that is not an inline lambda and is therefore not required to be marked as readonly.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-readonly.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nclass Container {\n  private neverModifiedPrivate = 'unchanged';\n}\n```\n\n----------------------------------------\n\nTITLE: Allowed Constructor Annotations\nDESCRIPTION: This code snippet provides examples of correct usage when the 'constructor' option is enabled. It shows cases where generic type arguments are specified on the constructor, or both sides, or neither, aligning with the rule's requirements.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/consistent-generic-constructors.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst map = new Map<string, number>();\nconst map: Map<string, number> = new MyMap();\nconst set = new Set<string>();\nconst set = new Set();\nconst set: Set<string> = new Set<string>();\n```\n\n----------------------------------------\n\nTITLE: Fixing Mixed Exports with Inline Type Specifier - Example 1\nDESCRIPTION: This example demonstrates how the `fixMixedExportsWithInlineTypeSpecifier` option works when set to `true`. It shows how mixed exports of constants and types are modified to include the `type` keyword inline for the type export.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/consistent-type-exports.mdx#_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nconst x = 1;\ntype T = number;\n\nexport { x, T };\n```\n\nLANGUAGE: ts\nCODE:\n```\nconst x = 1;\ntype T = number;\n\nexport { x, type T };\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Readonly Private Members TypeScript\nDESCRIPTION: This code shows examples of when the rule should not flag a violation. Public and protected members are excluded as they can be modified externally or by child classes. Private members modified later in the class are also excluded.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-readonly.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass Container {\n  // Public members might be modified externally\n  public publicMember: boolean;\n\n  // Protected members might be modified by child classes\n  protected protectedMember: number;\n\n  // This is modified later on by the class\n  private modifiedLater = 'unchanged';\n\n  public mutate() {\n    this.modifiedLater = 'mutated';\n  }\n\n  // This is modified later on by the class\n  #modifiedLaterPrivateField = 'unchanged';\n\n  public mutatePrivateField() {\n    this.#modifiedLaterPrivateField = 'mutated';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring no-restricted-imports with allowTypeImports - JSON\nDESCRIPTION: Demonstrates how to configure the `no-restricted-imports` rule with the `allowTypeImports` option to allow type-only imports for specified paths. The configuration specifies restricted module names, a custom message, and enables `allowTypeImports` for those modules. This configuration is used within an ESLint configuration file.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-restricted-imports.mdx#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"rules\": {\n    \"@typescript-eslint/no-restricted-imports\": [\n      \"error\",\n      {\n        \"paths\": [\n          {\n            \"name\": \"import-foo\",\n            \"message\": \"Please use import-bar instead.\",\n            \"allowTypeImports\": true,\n          },\n          {\n            \"name\": \"import-baz\",\n            \"message\": \"Please use import-quux instead.\",\n            \"allowTypeImports\": true,\n          },\n        ],\n      },\n    ],\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Using new Function in TypeScript\nDESCRIPTION: This snippet demonstrates an incorrect usage of the `new Function()` constructor, which takes strings as arguments to define function parameters and the function body. This is considered an implied eval() because a string of code is passed in to be interpreted, which can lead to security vulnerabilities and performance issues.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-implied-eval.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst fn = new Function('a', 'b', 'return a + b');\n```\n\n----------------------------------------\n\nTITLE: Incorrect Class Expression Member Ordering (Public Instance Method vs Static Field)\nDESCRIPTION: This TypeScript code snippet highlights an incorrect member order in a class expression, violating the enforced rule that public instance methods should come before public static fields.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/member-ordering.mdx#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst Foo = class {\n  private C: string; // (irrelevant)\n\n  [Z: string]: any; // (irrelevant)\n\n  public static E: string; // -> public static field\n\n  public D: string; // (irrelevant)\n\n  constructor() {} // (irrelevant)\n\n  public static A(): void {} // (irrelevant)\n\n  public B(): void {} // -> public instance method\n};\n```\n\n----------------------------------------\n\nTITLE: Confusing Non-Null Assertion Examples in TypeScript\nDESCRIPTION: These examples illustrate how non-null assertions used near equality checks can be confusing. The code showcases instances where `!` is placed before `==` or `===`, potentially being misinterpreted as `!=` or `!==`. The rule aims to avoid such ambiguities.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-confusing-non-null-assertion.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\na! == b; // a non-null assertion(`!`) and an equals test(`==`)\na !== b; // not equals test(`!==`)\na! === b; // a non-null assertion(`!`) and a triple equals test(`===`)\n```\n\n----------------------------------------\n\nTITLE: Incorrect `this` type usage in methods - TypeScript\nDESCRIPTION: This example shows incorrect usage of the rule, where the methods `f1`, `f2`, and `f3` in class `Foo` return the class name `Foo` instead of `this`. This prevents proper method chaining with inherited classes.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-return-this-type.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Foo {\n  f1(): Foo {\n    return this;\n  }\n  f2 = (): Foo => {\n    return this;\n  };\n  f3(): Foo | undefined {\n    return Math.random() > 0.5 ? this : undefined;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending with Recommended Config (Flat)\nDESCRIPTION: This snippet shows how to extend the ESLint configuration using the recommended configuration from `@typescript-eslint/eslint-plugin` using the Flat Config style.  It's a minimal configuration focused on code correctness.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/users/Shared_Configurations.mdx#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport default tseslint.config(\n  tseslint.configs.recommended,\n);\n```\n\n----------------------------------------\n\nTITLE: Updating tsconfig.json to Include JS files\nDESCRIPTION: This code demonstrates how to add .js files to your tsconfig.json file. You can modify the \"include\" array to include \"*.js\" to allow type-aware linting on Javascript files. \nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/troubleshooting/typed-linting/index.mdx#_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n\"include\": [\n  \"src\",\n+ \"*.js\"\n]\n```\n\n----------------------------------------\n\nTITLE: Correct Synchronous Function Usage\nDESCRIPTION: This code snippet demonstrates correct usage of synchronous functions. These functions are not marked as `async` and therefore do not need to contain `await` expressions or return promises, satisfying the require-await rule. The functions `returnNumber` and `syncGenerator` are shown as examples.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/require-await.mdx#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nfunction returnNumber() {\n  return 1;\n}\n\nfunction* syncGenerator() {\n  yield 1;\n}\n\nconst num = returnNumber();\nconst callSyncGenerator = () => syncGenerator();\n```\n\n----------------------------------------\n\nTITLE: Correct Promise rejection callback typing in TypeScript\nDESCRIPTION: This snippet demonstrates the correct usage of typing arguments in Promise rejection callbacks using the `unknown` type. It shows how explicitly typing the error parameter as `unknown` satisfies the rule.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/use-unknown-in-catch-callback-variable.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nPromise.reject(new Error('I will reject!')).catch((err: unknown) => {\n  console.log(err);\n});\n```\n\n----------------------------------------\n\nTITLE: Correct Allow Option Usage (TypeScript)\nDESCRIPTION: Shows correct usage of the `allow` option where the type is either a local type, from the default library, or from the specified package. Highlights scenarios where the rule correctly allows non-readonly types based on the configuration.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-readonly-parameter-types.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Foo {\n  prop: string;\n}\n\ninterface Wrapper {\n  readonly sub: Foo;\n  readonly otherProp: string;\n}\n\n// Works because Foo is allowed\nfunction fn1(arg: Foo) {}\n\n// Works even when Foo is nested somewhere in the type, with other properties still being checked\nfunction fn2(arg: Wrapper) {}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Bar } from 'bar-lib';\n\ninterface Foo {\n  prop: string;\n}\n\n// Works because Foo is a local type\nfunction fn1(arg: Foo) {}\n\n// Works because HTMLElement is from the default library\nfunction fn2(arg: HTMLElement) {}\n\n// Works because Bar is from \"bar-lib\"\nfunction fn3(arg: Bar) {}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Foo } from './foo';\n\n// Works because Foo is still a local type - it has to be in the same package\nfunction fn(arg: Foo) {}\n```\n\n----------------------------------------\n\nTITLE: Configuring explicit-member-accessibility in a mixed JS/TS codebase (JSON)\nDESCRIPTION: Demonstrates how to configure the '@typescript-eslint/explicit-member-accessibility' rule in a mixed JavaScript/TypeScript codebase using ESLint overrides. This ensures the rule is only applied to TypeScript files to avoid errors in JavaScript files.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/explicit-member-accessibility.mdx#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"rules\": {\n    // disable the rule for all files\n    \"@typescript-eslint/explicit-member-accessibility\": \"off\"\n  },\n  \"overrides\": [\n    {\n      // enable the rule specifically for TypeScript files\n      \"files\": [\"*.ts\", \"*.mts\", \"*.cts\", \"*.tsx\"],\n      \"rules\": {\n        \"@typescript-eslint/explicit-member-accessibility\": \"error\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Typed ESLint Rules - TypeScript\nDESCRIPTION: This code snippet demonstrates how to test an ESLint rule that requires type information. It imports `RuleTester` and the rule, then instantiates `RuleTester` with `parserOptions` configured for type-aware testing using `projectService`. Finally, it uses `ruleTester.run` to test the rule.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/developers/Custom_Rules.mdx#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RuleTester } from '@typescript-eslint/rule-tester';\nimport rule from './my-typed-rule';\n\nconst ruleTester = new RuleTester({\n  languageOptions: {\n    parserOptions: {\n      projectService: {\n        allowDefaultProject: ['*.ts*'],\n      },\n      tsconfigRootDir: __dirname,\n    },\n  },\n});\n\nruleTester.run('my-typed-rule', rule, {\n  valid: [\n    /* ... */\n  ],\n  invalid: [\n    /* ... */\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Incorrect Unbound Method Usage in TypeScript\nDESCRIPTION: This code demonstrates incorrect usage of unbound methods in TypeScript. It shows how extracting and calling a class method without explicitly binding it can lead to the wrong `this` context being used, potentially causing runtime errors and type safety issues. The first example directly assigns the method and loses the `this` context. The second example extracts the log method using destructuring, similarly leading to incorrect scope. The third example extracts the double method from the arith object.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/unbound-method.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass MyClass {\n  public log(): void {\n    console.log(this);\n  }\n}\n\nconst instance = new MyClass();\n\n// This logs the global scope (`window`/`global`), not the class instance\nconst myLog = instance.log;\nmyLog();\n\n// This log might later be called with an incorrect scope\nconst { log } = instance;\n\n// arith.double may refer to `this` internally\nconst arith = {\n  double(x: number): number {\n    return x * 2;\n  },\n};\nconst { double } = arith;\n```\n\n----------------------------------------\n\nTITLE: Correct Type Assertion with 'as' Keyword\nDESCRIPTION: This code demonstrates a correct type assertion using the `as` keyword.  The type assertion `3 as number` is considered correct because it explicitly defines the type of the number literal 3. This is a type assertion to an ancestor type.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-unnecessary-type-assertion.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst foo = 3 as number;\n```\n\n----------------------------------------\n\nTITLE: String Equality Checks with allowSingleElementEquality - TypeScript\nDESCRIPTION: This code snippet demonstrates how the `allowSingleElementEquality` option can be used to allow equality checks against single characters in a string. This can be useful in projects where character encodings are not a concern and a more succinct style is preferred. The option is set to 'always'.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-string-starts-ends-with.mdx#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\ndeclare const text: string;\n\ntext[0] === 'a';\ntext[0] === text[0].toUpperCase();\ntext[0] === text[1];\ntext[text.length - 1] === 'b';\n```\n\n----------------------------------------\n\nTITLE: Incorrect Array.sort() Usage - TypeScript\nDESCRIPTION: This code snippet demonstrates incorrect usage of `Array.sort()` without a compare function. It shows an array of any type and a string array being sorted without a compare function, which can lead to unexpected results due to the default string-based comparison.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/require-array-sort-compare.mdx#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nconst array: any[];\nconst stringArray: string[];\n\narray.sort();\n\n// String arrays should be sorted using `String#localeCompare`.\nstringArray.sort();\n```\n\n----------------------------------------\n\nTITLE: Filter specific property names in naming-convention\nDESCRIPTION: This configuration snippet shows how to use the `filter` option to ignore specific property names that do not conform to the naming convention. The `regex` property defines a regular expression that matches the names to be ignored, and `match: false` indicates that names matching the regex should be excluded from the naming convention check.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/naming-convention.mdx#_snippet_12\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"@typescript-eslint/naming-convention\": [\n    \"error\",\n    {\n      \"selector\": \"property\",\n      \"format\": [\"strictCamelCase\"],\n      \"filter\": {\n        // you can expand this regex to add more allowed names\n        \"regex\": \"^(Property-Name-One|Property-Name-Two)$\",\n        \"match\": false,\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect usage of void operator in TypeScript\nDESCRIPTION: Examples of incorrect usage of the `void` operator, where it's applied to expressions that already evaluate to `void` or `undefined`. This rule aims to prevent redundant use of the `void` operator.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-meaningless-void-operator.mdx#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nvoid (() => {})();\n\nfunction foo() {}\nvoid foo();\n```\n\n----------------------------------------\n\nTITLE: Add class static blocks support: Typescript\nDESCRIPTION: This feature introduces support for parsing class static blocks in TypeScript code. Static blocks are a new ECMAScript feature that allows initializing static properties within a class. The commit associated with this change is f81831bd279a32da6dbab0f1c061053ea43965f6.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/parser/CHANGELOG.md#_snippet_10\n\n\n\n----------------------------------------\n\nTITLE: Type Alias as Interface: Person Type - TypeScript\nDESCRIPTION: Illustrates how type aliases can act as interfaces by defining a set of properties and methods that implementing objects must adhere to. This snippet defines a `Person` type alias with properties like `firstName`, `lastName`, and `age`, along with methods `walk` and `talk`. It demonstrates the expectation of a specific structure for objects of this type, ensuring the presence of defined properties and methods.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-type-alias.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype Person = {\n  firstName: string;\n  lastName: string;\n  age: number;\n  walk: () => void;\n  talk: () => void;\n};\n\n// you know person will have 3 properties and 2 methods,\n// because the structure has already been defined.\nvar person: Person = {\n  // ...\n};\n\n// so we can be sure that this will work\nperson.walk();\n```\n\n----------------------------------------\n\nTITLE: Ignoring Parameters with `no-inferrable-types` in TypeScript\nDESCRIPTION: This code snippet demonstrates how to ignore parameters with the `no-inferrable-types` rule in TypeScript when the `ignoreParameters` option is set to `true`. Explicit type annotations are used for function parameters with default values, which are considered valid when the option is enabled. This allows for explicit typing of parameters while still benefiting from type inference elsewhere.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-inferrable-types.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction foo(a: number = 5, b: boolean = true) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Interface Usage with 'interface' Option\nDESCRIPTION: This snippet demonstrates correct usage when the `consistent-type-definitions` rule is set to `'interface'`. It shows an `interface` being used to define an object shape, which adheres to the rule. Type aliases are still allowed for non-object types.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/consistent-type-definitions.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype T = string;\ntype Foo = string | {};\n\ninterface T {\n  x: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Promise rejection callback typing in TypeScript\nDESCRIPTION: This snippet demonstrates incorrect usages of typing arguments in Promise rejection callbacks. It shows how `any`, `Error` or lack of explicit typing are considered incorrect.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/use-unknown-in-catch-callback-variable.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nPromise.reject(new Error('I will reject!')).catch(err => {\n  console.log(err);\n});\n\nPromise.reject(new Error('I will reject!')).catch((err: any) => {\n  console.log(err);\n});\n\nPromise.reject(new Error('I will reject!')).catch((err: Error) => {\n  console.log(err);\n});\n\nPromise.reject(new Error('I will reject!')).then(\n  result => {\n    console.log(result);\n  },\n  err => {\n    console.log(err);\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Typedef Rule Configuration\nDESCRIPTION: Shows an example configuration for the `@typescript-eslint/typedef` rule within an ESLint configuration file. This configuration enables the rule with an error level and specifies that type annotations are required for arrow function parameters and variable declarations.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/typedef.mdx#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"rules\": {\n    \"@typescript-eslint/typedef\": [\n      \"error\",\n      {\n        \"arrowParameter\": true,\n        \"variableDeclaration\": true\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Correct property signature examples\nDESCRIPTION: These TypeScript examples demonstrate correct usages when the `property` option is enabled. They show the preferred style of using property signatures (e.g., `func: (arg: string) => number;`) for function properties in interfaces and types.  It also showcases how overloads are implemented using intersections of function types.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/method-signature-style.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface T1 {\n  func: (arg: string) => number;\n}\ntype T2 = {\n  func: (arg: boolean) => void;\n};\n// this is equivalent to the overload\ninterface T3 {\n  func: ((arg: number) => void) &\n    ((arg: string) => void) &\n    ((arg: boolean) => void);\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Error Throw Examples in TypeScript\nDESCRIPTION: This code demonstrates incorrect examples of throwing values that are not `Error` objects, which are disallowed by the `only-throw-error` rule. The examples include throwing primitives like strings, numbers, undefined, and null, as well as non-Error objects.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/only-throw-error.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nthrow 'error';\n\nthrow 0;\n\nthrow undefined;\n\nthrow null;\n\nconst err = new Error();\nthrow 'an ' + err;\n\nconst err = new Error();\nthrow `${err}`;\n\nconst err = '';\nthrow err;\n\nfunction getError() {\n  return '';\n}\nthrow getError();\n\nconst foo = {\n  bar: '',\n};\nthrow foo.bar;\n```\n\n----------------------------------------\n\nTITLE: Incorrect Type Assertion with Custom Type\nDESCRIPTION: This snippet illustrates an incorrect type assertion using a custom type alias. The assertion `<Foo>` on the expression `(3 + 5)` is redundant because `Foo` is simply an alias for `number`. It's an unnecessary assertion that doesn't change the type.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-unnecessary-type-assertion.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype Foo = number;\nconst foo = <Foo>(3 + 5);\n```\n\n----------------------------------------\n\nTITLE: ESLint Flat Config with type-aware linting\nDESCRIPTION: This JavaScript snippet demonstrates an ESLint Flat Config with type-aware linting enabled. It imports the `typescript-eslint` package, defines a configuration object that includes the typescript-eslint plugin and parser, enables type checking with `project: true`, and sets several type-aware rules to `error` level.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/website/blog/2024-02-12-announcing-typescript-eslint-v7.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// @ts-check\n\nimport tseslint from 'typescript-eslint';\n\nexport default tseslint.config({\n  plugins: {\n    '@typescript-eslint': tseslint.plugin,\n  },\n  languageOptions: {\n    parser: tseslint.parser,\n    parserOptions: {\n      project: true,\n    },\n  },\n  rules: {\n    '@typescript-eslint/no-unsafe-argument': 'error',\n    '@typescript-eslint/no-unsafe-assignment': 'error',\n    '@typescript-eslint/no-unsafe-call': 'error',\n    '@typescript-eslint/no-unsafe-member-access': 'error',\n    '@typescript-eslint/no-unsafe-return': 'error',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Disallowing Non-Readonly Parameter Properties in TypeScript\nDESCRIPTION: These TypeScript class examples demonstrate code that violates the rule when `{ \"allow\": [\"readonly\"] }` is specified.  The rule only allows readonly parameter properties, flagging other modifiers as incorrect.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/parameter-properties.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nclass Foo {\n  constructor(private name: string) {}\n}\n\nclass Foo {\n  constructor(protected name: string) {}\n}\n\nclass Foo {\n  constructor(public name: string) {}\n}\n\nclass Foo {\n  constructor(private readonly name: string) {}\n}\n\nclass Foo {\n  constructor(protected readonly name: string) {}\n}\n\nclass Foo {\n  constructor(public readonly name: string) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Type Assertion Example (objectLiteralTypeAssertions - allow-as-parameter)\nDESCRIPTION: This code snippet demonstrates incorrect usage of type assertions for object literals when `objectLiteralTypeAssertions` is set to `'allow-as-parameter'`. It showcases disallowed object literal type assertions, aiming to encourage defining the type directly instead of using assertions.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/consistent-type-assertions.mdx#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst x = { foo: 1 } as T;\n\nfunction bar() {\n  return { foo: 1 } as T;\n}\n```\n\n----------------------------------------\n\nTITLE: Rejecting Promises Incorrectly with Strings in TypeScript\nDESCRIPTION: This code demonstrates incorrect usage of Promise rejections by using strings instead of Error objects. This violates the `prefer-promise-reject-errors` rule, as it reduces type safety and code clarity.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-promise-reject-errors.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nPromise.reject('error');\n\nconst err = new Error();\nPromise.reject('an ' + err);\n\nnew Promise((resolve, reject) => reject('error'));\n\nnew Promise((resolve, reject) => {\n  const err = new Error();\n  reject('an ' + err);\n});\n```\n\n----------------------------------------\n\nTITLE: Correct Addition: Same Types\nDESCRIPTION: This snippet shows examples of correct addition operations where the operands have the same types. The rule allows these cases as they are type-safe.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/restrict-plus-operands.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nlet foo = 1n + 1n;\nlet fn = (a: string, b: string) => a + b;\n```\n\n----------------------------------------\n\nTITLE: Incorrect Record Type with 'index-signature' Option - TypeScript\nDESCRIPTION: This code snippet demonstrates the incorrect usage of the `Record` type when the 'index-signature' option is enabled. The rule enforces the use of index signatures (interface, type, or mapped type) instead of the `Record` type.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/consistent-indexed-object-style.mdx#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype RecordType = Record<string, unknown>;\n```\n\n----------------------------------------\n\nTITLE: Correct Namespace Usage: No Unnecessary Qualifier - TypeScript\nDESCRIPTION: This code snippet demonstrates correct usage of namespaces, where the qualifier is omitted when accessing members within the namespace itself. No unnecessary qualifiers are present. Requires TypeScript.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-unnecessary-qualifier.mdx#_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nnamespace A {\n  export type B = number;\n  const x: B = 3;\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect: Unnecessary Condition - Non-Nullable Argument\nDESCRIPTION: This example demonstrates an incorrect use of a conditional statement where a non-nullable argument `arg` (of type 'bar' | 'baz') is checked for truthiness. Because the argument can never be nullish or an empty string, the check is unnecessary.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-unnecessary-condition.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction foo(arg: 'bar' | 'baz') {\n  // arg is never nullable or empty string, so this is unnecessary\n  if (arg) {\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling ESLint Rules in Legacy Config (JavaScript)\nDESCRIPTION: Demonstrates how to enable and configure ESLint rules within a legacy configuration file (`.eslintrc.cjs`). The example shows how to turn on a rule with the default configuration and how to configure a rule with specific options.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/troubleshooting/faqs/General.mdx#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  // ... the rest of your config ...\n  rules: {\n    // turns a rule on with no configuration (i.e. uses the default configuration)\n    '@typescript-eslint/array-type': 'error',\n    // turns on a rule with configuration\n    '@typescript-eslint/no-explicit-any': ['warn', { ignoreRestArgs: true }],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Correct Property Declaration\nDESCRIPTION: Illustrates correct property declaration with type annotations when the `propertyDeclaration` option is enabled. The `member` and `otherMember` properties are explicitly typed as `boolean` and `string`, respectively.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/typedef.mdx#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\ntype Members = {\n  member: boolean;\n  otherMember: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Incorrect Interface Member Order (Typescript)\nDESCRIPTION: This TypeScript code shows an example of incorrect member ordering in an interface according to the rule { \"interfaces\": [\"signature\", \"method\", \"constructor\", \"field\"] }. The field 'B' appears before the signature '[Z: string]: any'.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/member-ordering.mdx#_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Foo {\n  B: string; // -> field\n\n  new (); // -> constructor\n\n  A(): void; // -> method\n\n  [Z: string]: any; // -> signature\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Typed Function Expressions - TypeScript\nDESCRIPTION: Examples of incorrect code where typed function expressions lack explicit return types, violating the rule when `allowTypedFunctionExpressions` is `false`.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/explicit-module-boundary-types.mdx#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nexport let arrowFn = () => 'test';\n\nexport let funcExpr = function () {\n  return 'test';\n};\n\nexport let objectProp = {\n  foo: () => 1,\n};\n\nexport const foo = bar => {};\n```\n\n----------------------------------------\n\nTITLE: Correct RegExp#exec usage in TypeScript\nDESCRIPTION: This snippet demonstrates the correct usage of RegExp#exec and the case where String#match is acceptable (with the 'g' flag). It includes examples with string literals and variables.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-regexp-exec.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n/thing/.exec('something');\n\n'some things are just things'.match(/thing/g);\n\nconst text = 'something';\nconst search = /thing/;\nsearch.exec(text);\n```\n\n----------------------------------------\n\nTITLE: Correct Array.sort() Usage - TypeScript\nDESCRIPTION: This code snippet demonstrates correct usage of `Array.sort()` with compare functions. It includes examples for sorting arrays of numbers using a numerical compare function and arrays of strings using `localeCompare`. It also demonstrates how the rule ignores calls to user-defined sort methods.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/require-array-sort-compare.mdx#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nconst array: any[];\nconst userDefinedType: { sort(): void };\n\narray.sort((a, b) => a - b);\narray.sort((a, b) => a.localeCompare(b));\n\nuserDefinedType.sort();\n```\n\n----------------------------------------\n\nTITLE: Correct Exhaustive Switch Example - Enums - TypeScript\nDESCRIPTION: This code demonstrates a correct usage of a switch statement over an enum ('Fruit'). It includes a case for each possible value in the 'Fruit' enum. This satisfies the 'switch-exhaustiveness-check' rule, as all cases are explicitly handled.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/switch-exhaustiveness-check.mdx#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nenum Fruit {\n  Apple,\n  Banana,\n  Cherry,\n}\n\ndeclare const fruit: Fruit;\n\nswitch (fruit) {\n  case Fruit.Apple:\n    console.log('an apple');\n    break;\n\n  case Fruit.Banana:\n    console.log('a banana');\n    break;\n\n  case Fruit.Cherry:\n    console.log('a cherry');\n    break;\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Async Function Usage\nDESCRIPTION: This code snippet demonstrates incorrect usage of async functions according to the require-await rule.  The async functions `returnNumber` and `asyncGenerator` do not use `await` or return promises. These functions would be flagged by the rule.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/require-await.mdx#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nasync function returnNumber() {\n  return 1;\n}\n\nasync function* asyncGenerator() {\n  yield 1;\n}\n\nconst num = returnNumber();\nconst callAsyncGenerator = () => asyncGenerator();\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage: Unnecessary Template Expressions in TypeScript\nDESCRIPTION: This code snippet demonstrates examples of incorrect usage of template literals where substitution expressions are unnecessary and can be simplified to improve code readability and performance. It shows cases where static values or simple string variables are unnecessarily wrapped in template literals.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-unnecessary-template-expression.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Static values can be incorporated into the surrounding template.\n\nconst ab1 = `${'a'}${'b'}`;\nconst ab2 = `a${'b'}`;\ntype AB1 = `${'A'}${'B'}`;\ntype AB2 = `A${'B'}`;\n\nconst stringWithNumber = `${'1 + 1 = '}${2}`;\n\nconst stringWithBoolean = `${'true is '}${true}`;\n\n// Some simple expressions that are already strings\n// can be rewritten without a template at all.\n\nconst text = 'a';\nconst wrappedText = `${text}`;\ntype Text = 'A';\ntype WrappedText = `${Text}`;\n\ndeclare const intersectionWithString: string & { _brand: 'test-brand' };\nconst wrappedIntersection = `${intersectionWithString}`;\ntype IntersectionWithString = string & { _brand: 'test-brand' };\ntype WrappedIntersection = `${IntersectionWithString}`;\n```\n\n----------------------------------------\n\nTITLE: Correct TypeScript Directive Usage\nDESCRIPTION: This snippet demonstrates the correct way to handle code that might cause TypeScript compiler warnings when the `ts-ignore` option is set to `true`. Instead of using the directive, the compiler is allowed to warn about unreachable code.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/ban-ts-comment.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nif (false) {\n  // Compiler warns about unreachable code error\n  console.log('hello');\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Type Assertion Example (arrayLiteralTypeAssertions - allow-as-parameter)\nDESCRIPTION: This code snippet demonstrates incorrect usage of type assertions for array literals when `arrayLiteralTypeAssertions` is set to `'allow-as-parameter'`. The code showcases a scenario where type assertions are disallowed for array literals directly assigned or returned.  The rule enforces specifying the type for variables instead.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/consistent-type-assertions.mdx#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst x = ['foo'] as T;\n\nfunction bar() {\n  return ['foo'] as T;\n}\n```\n\n----------------------------------------\n\nTITLE: Parse and Generate Services Result Interface - TypeScript\nDESCRIPTION: Defines the `ParseAndGenerateServicesResult` interface, which is the return type of the `parseAndGenerateServices` function. It contains the ESTree-compatible AST and the parser services, providing access to type information and node mappings.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/packages/TypeScript_ESTree.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ParseAndGenerateServicesResult<T extends TSESTreeOptions> {\n  ast: TSESTree.Program;\n  services: ParserServices;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Correct Member Access on Typed Variables - TypeScript\nDESCRIPTION: This snippet demonstrates correct usages of member access on properly typed variables. It illustrates how to safely access properties and array elements when types are explicitly defined.  The code declares `properlyTyped` with a specific type and accesses its properties.  It also shows safe array access.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-unsafe-member-access.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare const properlyTyped: { prop: { a: string } };\n\nproperlyTyped.prop.a;\nproperlyTyped.prop['a'];\n\nconst key = 'a';\nproperlyTyped.prop[key];\n\nconst arr = [1, 2, 3];\narr[1];\nlet idx = 1;\narr[idx];\narr[idx++];\n```\n\n----------------------------------------\n\nTITLE: Disallow Namespaces allowDeclarations false - Incorrect - TypeScript\nDESCRIPTION: These examples demonstrate code that violates the `no-namespace` rule when `allowDeclarations` option is false.  It flags `module`, `namespace` and declared variants as incorrect.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-namespace.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nmodule foo {}\nnamespace foo {}\ndeclare module foo {}\ndeclare namespace foo {}\n```\n\n----------------------------------------\n\nTITLE: Installing typescript-eslint Packages\nDESCRIPTION: This command installs the latest versions of `@typescript-eslint/eslint-plugin` and `@typescript-eslint/parser` as development dependencies using npm.  It is a prerequisite for upgrading to typescript-eslint v6.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/website/blog/2023-07-09-announcing-typescript-eslint-v6.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm i @typescript-eslint/eslint-plugin@latest @typescript-eslint/parser@latest --save-dev\n```\n\n----------------------------------------\n\nTITLE: Incorrect generic type constraints in TypeScript\nDESCRIPTION: This snippet demonstrates incorrect usage of generic type constraints in TypeScript, where type parameters are unnecessarily constrained with `extends any` or `extends unknown`. This is redundant because type parameters default to `unknown` when no `extends` is provided. This applies to interfaces, types, classes, and function signatures.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-unnecessary-type-constraint.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface FooAny<T extends any> {}\n\ninterface FooUnknown<T extends unknown> {}\n\ntype BarAny<T extends any> = {};\n\ntype BarUnknown<T extends unknown> = {};\n\nclass BazAny<T extends any> {\n  quxAny<U extends any>() {}\n}\n\nconst QuuxAny = <T extends any>() => {};\n\nfunction QuuzAny<T extends any>() {}\n```\n\n----------------------------------------\n\nTITLE: Correct `checkAny` example - TypeScript\nDESCRIPTION: Example demonstrating the correct code when using the `checkAny` option. It demonstrates the use of optional chaining.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-optional-chain.mdx#_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\ndeclare const thing: any;\n\nthing?.toString();\n```\n\n----------------------------------------\n\nTITLE: Disallowing Awaited Promises - Incorrect - TypeScript\nDESCRIPTION: These examples demonstrate incorrect code when the 'never' option is enabled for the rule disallowing awaited promises.  The functions use `await` on promises, which violates the rule's configuration. These examples highlight scenarios within try-catch blocks and general async functions where awaiting is prohibited.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/return-await.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nasync function invalidNever1() {\n  try {\n    return await Promise.resolve('try');\n  } catch (e) {}\n}\n\nasync function invalidNever2() {\n  return await Promise.resolve('try');\n}\n\nasync function invalidNever3() {\n  return await 'value';\n}\n```\n\n----------------------------------------\n\nTITLE: Disallowing Awaited Promises - Correct - TypeScript\nDESCRIPTION: These examples demonstrate correct code when the 'never' option is enabled for the rule disallowing awaited promises. The functions avoid using `await` on promises, which adheres to the rule's configuration.  These examples cover scenarios within try-catch blocks and general async functions where awaiting is omitted.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/return-await.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nasync function validNever1() {\n  try {\n    return Promise.resolve('try');\n  } catch (e) {}\n}\n\nasync function validNever2() {\n  return Promise.resolve('try');\n}\n\nasync function validNever3() {\n  return 'value';\n}\n```\n\n----------------------------------------\n\nTITLE: Correct array iteration techniques in TypeScript\nDESCRIPTION: This snippet demonstrates correct ways to iterate over an array in TypeScript using a for-of loop, a traditional for loop, the forEach method, and the array.entries() method. It avoids the issues associated with for-in loops when iterating over arrays. The expected input is an array of strings, and the output is the logging of both index and values in different forms.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-for-in-array.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\ndeclare const array: string[];\n\nfor (const value of array) {\n  console.log(value);\n}\n\nfor (let i = 0; i < array.length; i += 1) {\n  console.log(i, array[i]);\n}\n\narray.forEach((value, i) => {\n  console.log(i, value);\n});\n\nfor (const [i, value] of array.entries()) {\n  console.log(i, value);\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrates Incorrect Return Type\nDESCRIPTION: This code snippet illustrates the problem that `prefer-return-this-type` is trying to solve.  When a class method returns the class name instead of `this`, derived classes cannot properly chain methods because the return type is the base class, not the derived class.  Dependencies: None\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-return-this-type.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nclass Animal {\n  eat(): Animal {\n    //   ~~~~~~\n    // Either removing this type annotation or replacing\n    // it with `this` would remove the type error below.\n    console.log(\"I'm moving!\");\n    return this;\n  }\n}\n\nclass Cat extends Animal {\n  meow(): Cat {\n    console.log('Meow~');\n    return this;\n  }\n}\n\nconst cat = new Cat();\ncat.eat().meow();\n//        ~~~~\n// Error: Property 'meow' does not exist on type 'Animal'.\n// because `eat` returns `Animal` and not all animals meow.\n```\n\n----------------------------------------\n\nTITLE: Enforce fields style for class literals - Incorrect\nDESCRIPTION: This code snippet demonstrates an incorrect usage of the `fields` style, where getter methods are used to return literal values, which is discouraged when the `fields` style is enforced. The rule suggests using readonly fields instead of getters for literals.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/class-literal-property-style.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Mx {\n  public static get myField1() {\n    return 1;\n  }\n\n  private get ['myField2']() {\n    return 'hello world';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Exhaustive Switch Example - Enums with Default - TypeScript\nDESCRIPTION: This code demonstrates a correct usage of a switch statement over an enum ('Fruit') using a `default` case.  The `considerDefaultExhaustiveForUnions` option must be set to `true` for this to be considered exhaustive. The switch handles 'Fruit.Apple' explicitly and uses a `default` case to cover all other possible values, satisfying the 'switch-exhaustiveness-check' rule under the specified configuration.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/switch-exhaustiveness-check.mdx#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\n// requires `considerDefaultExhaustiveForUnions` to be set to true\n\nenum Fruit {\n  Apple,\n  Banana,\n  Cherry,\n}\n\ndeclare const fruit: Fruit;\n\nswitch (fruit) {\n  case Fruit.Apple:\n    console.log('an apple');\n    break;\n\n  default:\n    console.log('a fruit');\n    break;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring checksVoidReturn option in no-misused-promises\nDESCRIPTION: This code snippet shows how to disable the checksVoidReturn option in the @typescript-eslint/no-misused-promises rule. Disabling this prevents the rule from checking functions that return promises where a void return is expected. The configuration sets the rule to \"error\" and disables the \"checksVoidReturn\" sub-option.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-misused-promises.mdx#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"@typescript-eslint/no-misused-promises\": [\n    \"error\",\n    {\n      \"checksVoidReturn\": false\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Destructuring Example (@typescript-eslint/prefer-destructuring) - TypeScript\nDESCRIPTION: This example demonstrates the correct way to access an object property in TypeScript when using the `@typescript-eslint/prefer-destructuring` rule. It uses direct property access. The correct code is `const x: string = obj.x;`.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-destructuring.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst x: string = obj.x; // This is correct by default. You can also forbid this by an option.\n```\n\n----------------------------------------\n\nTITLE: Initializing RuleTester with Flat Config\nDESCRIPTION: This code snippet demonstrates how to initialize the `RuleTester` with flat config options, including setting `parserOptions` within the `languageOptions` property. It showcases the necessary changes to configure the parser for typescript-eslint v8 and later.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/website/blog/2024-07-31-announcing-typescript-eslint-v8.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RuleTester } from '@typescript-eslint/rule-tester'\n\nconst ruleTester = new RuleTester({\n  // Add this line\n  languageOptions: {\n    parserOptions: {\n      tsconfigRootDir: import.meta.dirname,\n    },\n  // Add this line\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Correct Function as Export - TypeScript\nDESCRIPTION: This snippet shows the correct way to define a simple function and export it.  This approach avoids the need for a class when a standalone function is sufficient. The function logs a message to the console.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-extraneous-class.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nfunction logHelloWorld() {\n  console.log('Hello, world!');\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Ternary Tests with ignoreTernaryTests: false in TypeScript\nDESCRIPTION: This code shows the correct usage of the nullish coalescing operator to replace ternary expressions. This is the correct replacement for the 'incorrect' examples when the `ignoreTernaryTests` option is set to `false`.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-nullish-coalescing.mdx#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\ndeclare const a: any;\na ?? 'a string';\n\ndeclare const b: string | undefined;\nb ?? 'a string';\n\ndeclare const c: string | null;\nc ?? 'a string';\n```\n\n----------------------------------------\n\nTITLE: Customizing Rule Documentation Types (TypeScript)\nDESCRIPTION: Shows how to add custom properties to the rule's `meta.docs` object by extending the `ESLintUtils.RuleCreator` type definition. This allows for including plugin-specific documentation details, such as a `recommended` flag.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/developers/Custom_Rules.mdx#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface MyPluginDocs {\n  recommended: boolean;\n}\n\nconst createRule = ESLintUtils.RuleCreator<MyPluginDocs>(\n  name => `https://example.com/rule/${name}`,\n);\n\ncreateRule({\n  // ...\n  meta: {\n    docs: {\n      description: '...',\n      recommended: true,\n    },\n    // ...\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Type Alias and Interface Example in TypeScript\nDESCRIPTION: This code snippet demonstrates the two ways to define object types in TypeScript: using a `type` alias and using an `interface`. Both examples define a type with properties `a` (string) and `b` (number).\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/consistent-type-definitions.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// type alias\ntype T1 = {\n  a: string;\n  b: number;\n};\n\n// interface keyword\ninterface T2 {\n  a: string;\n  b: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Correct spread usage examples (TypeScript)\nDESCRIPTION: These examples demonstrate correct usage of the spread operator in TypeScript, avoiding the problematic scenarios shown in the incorrect examples. It shows how to await Promises, call functions, convert Maps to objects using Object.fromEntries, and split strings into arrays using `.split('')`.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-misused-spread.mdx#_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\ndeclare const promise: Promise<number>;\nconst spreadPromise = { ...(await promise) };\n\ndeclare function getObject(): Record<string, strings>;\nconst getObjectSpread = { ...getObject() };\n\ndeclare const map: Map<string, number>;\nconst mapObject = Object.fromEntries(map);\n\ndeclare const userName: string;\nconst characters = userName.split('');\n```\n\n----------------------------------------\n\nTITLE: Incorrect checkParameterProperties Option (TypeScript)\nDESCRIPTION: Illustrates incorrect code when `checkParameterProperties` is set to `true`.  It shows that class constructor parameters are not marked as `readonly` and thus the rule flags it as incorrect.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-readonly-parameter-types.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nclass Foo {\n  constructor(private paramProp: string[]) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Unsafe Fix Example - TypeScript\nDESCRIPTION: Example showcasing potentially unsafe fixes when `allowPotentiallyUnsafeFixesThatModifyTheReturnTypeIKnowWhatImDoing` is true.  This demonstrates how converting logical expressions to optional chains can alter the return type and potentially break the build.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-optional-chain.mdx#_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\ndeclare const foo: { bar: boolean } | null | undefined;\ndeclare function acceptsBoolean(arg: boolean): void;\n\n// ✅ typechecks succesfully as the expression only returns `boolean`\nacceptsBoolean(foo != null && foo.bar);\n\n// ❌ typechecks UNSUCCESSFULLY as the expression returns `boolean | undefined`\nacceptsBoolean(foo?.bar);\n```\n\n----------------------------------------\n\nTITLE: Incorrect void usage in type definitions - TypeScript\nDESCRIPTION: This snippet demonstrates incorrect usage of the `void` type in TypeScript. It shows examples where `void` is used in type unions, function parameters, generic type defaults, interface properties, and class properties.  The rule flags these uses as invalid.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-invalid-void-type.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype PossibleValues = string | number | void;\ntype MorePossibleValues = string | ((number & any) | (string | void));\n\nfunction logSomething(thing: void) {}\nfunction printArg<T = void>(arg: T) {}\n\nlogAndReturn<void>(undefined);\n\ninterface Interface {\n  lambda: () => void;\n  prop: void;\n}\n\nclass MyClass {\n  private readonly propName: void;\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Exhaustive Switch Example - Union Types - TypeScript\nDESCRIPTION: This code demonstrates an incorrect usage of a switch statement over a union type ('Day') without covering all possible cases. The switch only handles 'Monday', which violates the 'switch-exhaustiveness-check' rule. It requires all cases to be explicitly handled or have a default case.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/switch-exhaustiveness-check.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype Day =\n  | 'Monday'\n  | 'Tuesday'\n  | 'Wednesday'\n  | 'Thursday'\n  | 'Friday'\n  | 'Saturday'\n  | 'Sunday';\n\ndeclare const day: Day;\nlet result = 0;\n\nswitch (day) {\n  case 'Monday':\n    result = 1;\n    break;\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Type Export Example\nDESCRIPTION: This example shows the correct way of exporting a type and a class in TypeScript. It exports `Button` as a regular export and `ButtonProps` as a type export using the `export type` syntax.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/consistent-type-exports.mdx#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\ninterface ButtonProps {\n  onClick: () => void;\n}\n\nclass Button implements ButtonProps {\n  onClick = () => console.log('button!');\n}\n\nexport { Button };\nexport type { ButtonProps };\n```\n\n----------------------------------------\n\nTITLE: Incorrect code with public modifiers when accessibility is no-public (TypeScript)\nDESCRIPTION: Shows examples of incorrect TypeScript code where class members are explicitly marked as 'public' when the 'accessibility' option is set to 'no-public'. This is considered an error based on the rule's configuration.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/explicit-member-accessibility.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nclass Animal {\n  public constructor(\n    public breed,\n    name,\n  ) {\n    // Parameter property and constructor\n    this.animalName = name;\n  }\n  public animalName: string; // Property\n  public get name(): string {\n    // get accessor\n    return this.animalName;\n  }\n  public set name(value: string) {\n    // set accessor\n    this.animalName = value;\n  }\n  public walk() {\n    // method\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Allow Protected Property Access - TypeScript\nDESCRIPTION: This code demonstrates how to allow protected class property access using bracket notation when `allowProtectedClassPropertyAccess` is set to `true`. TypeScript reports a type error when using dot notation for protected properties, but not array notation.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/dot-notation.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nclass X {\n  protected protected_prop = 123;\n}\n\nconst x = new X();\nx['protected_prop'] = 123;\n```\n\n----------------------------------------\n\nTITLE: Extending ESLint Config (Flat, Type Checking)\nDESCRIPTION: This snippet demonstrates extending the ESLint configuration for a project with type checking, using the Flat Config style. It combines ESLint's recommended rules, TypeScript ESLint's recommended-type-checked rules, and TypeScript ESLint's stylistic-type-checked rules.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/users/Shared_Configurations.mdx#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport default tseslint.config(\n  eslint.configs.recommended,\n  tseslint.configs.recommendedTypeChecked,\n  tseslint.configs.stylisticTypeChecked,\n);\n```\n\n----------------------------------------\n\nTITLE: Incorrect indexOf usage - TypeScript\nDESCRIPTION: These examples demonstrate incorrect usages of `indexOf` that should be replaced with `includes`. The code checks for the existence of a value using `indexOf` and comparing the result against -1 (or 0). The variables `str`, `array`, `readonlyArray`, `typedArray`, `maybe` and `userDefined` are defined with different types, each with a `indexOf` and `includes` method.  The regular expression check using `.test()` is also flagged as an alternative to `String#includes`.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-includes.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst str: string;\nconst array: any[];\nconst readonlyArray: ReadonlyArray<any>;\nconst typedArray: UInt8Array;\nconst maybe: string;\nconst userDefined: {\n  indexOf(x: any): number;\n  includes(x: any): boolean;\n};\n\nstr.indexOf(value) !== -1;\narray.indexOf(value) !== -1;\nreadonlyArray.indexOf(value) === -1;\ntypedArray.indexOf(value) > -1;\nmaybe?.indexOf('') !== -1;\nuserDefined.indexOf(value) >= 0;\n\n/example/.test(str);\n```\n\n----------------------------------------\n\nTITLE: Banning `Function` type with `@typescript-eslint/no-unsafe-function-type`\nDESCRIPTION: This snippet demonstrates how the `@typescript-eslint/no-unsafe-function-type` rule reports on instances of the `Function` type. It uses an example of a `greet` function with a `Function` typed parameter and how the rule identifies it as unsafe, suggesting a more precise function type with defined parameters and return types.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/website/blog/2025-01-21-avoiding-anys.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction greet(getFriend: Function) {\n  //                      ~~~~\n  // eslint(@typescript-eslint/no-unsafe-function-type):\n  // The `Function` type accepts any function-like value.\n  // Prefer explicitly defining any function parameters and return type.\n  console.log(`Hello, ${getFriend().toUpperCase()}!`);\n}\n\ngreet(() => 'Lazlo'); // Ok\n\ngreet(() => ({ name: 'Nadya' })); // Should be a type error, but isn't\n```\n\n----------------------------------------\n\nTITLE: Correct - allowFunctionsWithoutTypeParameters: true\nDESCRIPTION: Correct usage when `allowFunctionsWithoutTypeParameters` is enabled.  It allows omitting return types for functions *without* type parameters. Functions *with* type parameters must still have explicit return types.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/explicit-function-return-type.mdx#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nfunction foo<T>(t: T): T {\n  return t;\n}\n\nconst bar = <T>(t: T): T => t;\n\nfunction allowedFunction(x: string) {\n  return x;\n}\n\nconst allowedArrow = (x: string) => x;\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Fields Before Instance Fields\nDESCRIPTION: This configuration enforces that static fields should come before instance fields, with public static fields first. This rule doesn't apply to interfaces or type literals.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/member-ordering.mdx#_snippet_16\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"rules\": {\n    \"@typescript-eslint/member-ordering\": [\n      \"error\",\n      { \"default\": [\"public-static-field\", \"static-field\", \"instance-field\"] },\n    ],\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Enum Usage Example with enums: true in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates an incorrect usage of an enum when the 'enums' option is set to 'true'. The code attempts to access the enum member 'Foo.FOO' before the enum 'Foo' is declared, which will result in a linting error.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-use-before-define.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst x = Foo.FOO;\n\nenum Foo {\n  FOO,\n}\n```\n\n----------------------------------------\n\nTITLE: Allow option in use - Correct\nDESCRIPTION: This code demonstrates the correct usage with the `allow` option. The `apiV1` and `escape` functions are allowed because they are specified in the `allow` list in the configuration.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-deprecated.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Bar } from 'bar-lib';\n/** @deprecated */\ndeclare function apiV1(): Promise<string>;\n\nawait apiV1();\n\n// `escape` has been deprecated since ES5.\nescape('...');\n```\n\n----------------------------------------\n\nTITLE: Correct Non-Nullable Type Assertion - TypeScript\nDESCRIPTION: This snippet demonstrates the correct usage of non-null assertions. It uses `!` to assert that a potentially nullable string is definitely a string. This is the preferred style according to the rule. The code relies on standard TypeScript features.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/non-nullable-type-assertion-style.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst maybe: string | undefined = Math.random() > 0.5 ? '' : undefined;\n\nconst definitely = maybe!;\nconst alsoDefinitely = maybe!;\n```\n\n----------------------------------------\n\nTITLE: Naming Convention - Camel or Pascal Case Functions\nDESCRIPTION: This configuration enforces that function names are either in camelCase or PascalCase. Useful for allowing both camelCase and PascalCase for function components in UI libraries like React.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/naming-convention.mdx#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"@typescript-eslint/naming-convention\": [\n    \"error\",\n    {\n      \"selector\": \"function\",\n      \"format\": [\"camelCase\", \"PascalCase\"]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Allowing `import ... = require(...)` with 'allowAsImport' option - Incorrect\nDESCRIPTION: Demonstrates the incorrect usage of `require()` when the `allowAsImport` option is set to true. It shows direct assignments of `require()` calls to variables, which are disallowed when `allowAsImport` is enabled.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-require-imports.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nvar foo = require('foo');\nconst foo = require('foo');\nlet foo = require('foo');\n```\n\n----------------------------------------\n\nTITLE: Extending with Recommended Config (Legacy)\nDESCRIPTION: This snippet shows how to extend the ESLint configuration using the recommended configuration from `@typescript-eslint/eslint-plugin` using the Legacy Config style. It focuses on core TypeScript linting.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/users/Shared_Configurations.mdx#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  extends: ['plugin:@typescript-eslint/recommended'],\n};\n```\n\n----------------------------------------\n\nTITLE: Incorrect function overload signatures\nDESCRIPTION: This code snippet demonstrates incorrect usage of function overload signatures according to the `adjacent-overload-signatures` rule. The `foo` function's overloads are not placed consecutively in the namespace, type, interface, class, and exported function declaration. This can lead to confusion and make the code harder to understand.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/adjacent-overload-signatures.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare namespace Foo {\n  export function foo(s: string): void;\n  export function foo(n: number): void;\n  export function bar(): void;\n  export function foo(sn: string | number): void;\n}\n\ntype Foo = {\n  foo(s: string): void;\n  foo(n: number): void;\n  bar(): void;\n  foo(sn: string | number): void;\n};\n\ninterface Foo {\n  foo(s: string): void;\n  foo(n: number): void;\n  bar(): void;\n  foo(sn: string | number): void;\n}\n\nclass Foo {\n  foo(s: string): void;\n  foo(n: number): void;\n  bar(): void {}\n  foo(sn: string | number): void {}\n}\n\nexport function foo(s: string): void;\nexport function foo(n: number): void;\nexport function bar(): void;\nexport function foo(sn: string | number): void;\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint with projectService\nDESCRIPTION: This JavaScript code snippet shows how to configure ESLint to use the new `projectService` in typescript-eslint v8 instead of the older `project` option.  It demonstrates removing the `project` line and adding the `projectService` line within the `parserOptions` of the ESLint configuration.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/website/blog/2024-05-27-announcing-typescript-eslint-v8-beta.mdx#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport eslint from '@eslint/js';\nimport tseslint from 'typescript-eslint';\n\nexport default tseslint.config(\n  eslint.configs.recommended,\n  ...tseslint.configs.recommendedTypeChecked,\n  {\n    languageOptions: {\n      parserOptions: {\n        // Remove this line\n        project: true,\n        // Add this line\n        projectService: true,\n        tsconfigRootDir: import.meta.dirname,\n      },\n    },\n  },\n);\n\n```\n\n----------------------------------------\n\nTITLE: Correct Type Reference Usage Example with ignoreTypeReferences: true in TypeScript\nDESCRIPTION: This TypeScript snippet illustrates how type references can be used before definition when 'ignoreTypeReferences' is set to 'true'. Both the type alias 'StringOrNumber' and the enum 'Enum' are referenced before their definitions, but these references are ignored by the linter due to the option being enabled.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-use-before-define.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nlet var1: StringOrNumber;\ntype StringOrNumber = string | number;\n\nlet var2: Enum;\nenum Enum {}\n```\n\n----------------------------------------\n\nTITLE: Incorrect - allowExpressions: true\nDESCRIPTION: Examples of incorrect TypeScript code when the `allowExpressions` option is set to `true`. Demonstrates cases where the rule still expects an explicit return type even for expressions.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/explicit-function-return-type.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfunction test() {}\n\nconst fn = () => {};\n\nexport default () => {};\n```\n\n----------------------------------------\n\nTITLE: Supporting Import Assertions in typescript-estree\nDESCRIPTION: This commit introduces support for Import Assertions within the typescript-estree package. Import assertions are a new feature in JavaScript that allow developers to specify the expected type of a module during import. This enhancement enables the parser to correctly handle these new syntax elements.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/typescript-estree/CHANGELOG.md#_snippet_42\n\nLANGUAGE: plaintext\nCODE:\n```\nae0fb5a\n```\n\n----------------------------------------\n\nTITLE: ESLint Configuration for trying rules (JSON)\nDESCRIPTION: This JSON snippet demonstrates how to add a custom rule to the `.eslintrc.json` file in the downstream repository.  The rule `@typescript-eslint/your-awesome-rule` is set to `error`, meaning that any violations of this rule will be reported as errors during linting. The configuration requires the rule to be properly defined and exported within the linked `@typescript-eslint/eslint-plugin` package.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/contributing/local-development/Local_Linking.mdx#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"rules\": {\n    \"@typescript-eslint/your-awesome-rule\": \"error\"\n  }\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Intersection Type Definition - TypeScript\nDESCRIPTION: This code snippet demonstrates an incorrectly sorted intersection type definition with the `checkIntersections` option set to `true`. The intersection `B & A` is not alphabetically ordered.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/sort-type-constituents.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntype ExampleIntersection = B & A;\n```\n\n----------------------------------------\n\nTITLE: Incorrect Code: allowAliases - In Unions - TypeScript\nDESCRIPTION: Illustrates examples of incorrect code when `allowAliases` is set to \"in-unions\". These examples demonstrates primitive type aliases, reference type aliases with interfaces and classes, and also aliases involving intersections that are not allowed under this configuration.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-type-alias.mdx#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\n// primitives\ntype Foo = 'a';\n\ntype Foo = string;\n\ntype Foo = string & string[];\n\ntype Foo = `foo-${number}`;\n\n// reference types\ninterface Bar {}\nclass Baz implements Bar {}\n\ntype Foo = Bar;\n\ntype Foo = Bar & Baz;\n```\n\n----------------------------------------\n\nTITLE: Disallow Namespaces - Incorrect Examples - TypeScript\nDESCRIPTION: These examples demonstrate code that violates the `no-namespace` rule with default options. It shows the use of `module` and `namespace` keywords, including declarations, which are flagged as incorrect.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-namespace.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nmodule foo {}\nnamespace foo {}\n\ndeclare module foo {}\ndeclare namespace foo {}\n```\n\n----------------------------------------\n\nTITLE: Correct Reduce Usage with Type Parameter (TypeScript)\nDESCRIPTION: This code snippet demonstrates the correct usage of `Array#reduce` with a type parameter.  The type parameter `<number[]>` and `<Record<string, boolean>>` is used to explicitly specify the type of the accumulator, avoiding the need for type assertions. This enhances type safety and readability.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-reduce-type-parameter.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n[1, 2, 3].reduce<number[]>((arr, num) => arr.concat(num * 2), []);\n\n['a', 'b'].reduce<Record<string, boolean>>(\n  (accum, name) => ({\n    ...accum,\n    [name]: true,\n  }),\n  {},\n);\n```\n\n----------------------------------------\n\nTITLE: Bitwise Expressions in Enums (Correct)\nDESCRIPTION: This code demonstrates correct usage of bitwise expressions within enums when the 'allowBitwiseExpressions' option is enabled.  It uses literal values in the bitwise operations. It uses TypeScript.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-literal-enum-member.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nenum Foo {\n  A = 1 << 0,\n  B = 1 >> 0,\n  C = 1 >>> 0,\n  D = 1 | 0,\n  E = 1 & 0,\n  F = 1 ^ 0,\n  G = ~1,\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect: Unnecessary Condition - Optional Chaining\nDESCRIPTION: This example shows an incorrect use of optional chaining where the argument `arg` is a string and cannot be nullish.  The optional chaining operator `?.` is therefore unnecessary and will be flagged.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-unnecessary-condition.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction bar<T>(arg: string) {\n  // arg can never be nullish, so ?. is unnecessary\n  return arg?.length;\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect - allowHigherOrderFunctions: true\nDESCRIPTION: Incorrect examples demonstrating violations when `allowHigherOrderFunctions` is set to `true`. These show cases where the inner function still needs an explicit return type.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/explicit-function-return-type.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nvar arrowFn = () => () => {};\n\nfunction fn() {\n  return function () {};\n}\n```\n\n----------------------------------------\n\nTITLE: Correct usage with ignoreClassesThatImplementAnInterface = public-fields (TypeScript)\nDESCRIPTION: This TypeScript example demonstrates the correct code when `ignoreClassesThatImplementAnInterface` is set to `'public-fields'`. The `Derived` class implements the `Base` interface and only contains public members that don't use `this`. Since the option is set to `'public-fields'`, only public members are ignored and no error is flagged.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/class-methods-use-this.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Base {\n  method(): void;\n}\n\nclass Derived implements Base {\n  method() {}\n  property = () => {};\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Destructuring with Type Annotation - TypeScript\nDESCRIPTION: This example demonstrates correct code when `enforceForDeclarationWithTypeAnnotation` is enabled. It uses destructuring with a type annotation. The correct code is `const { x }: { x: string } = obj;`.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-destructuring.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst { x }: { x: string } = obj;\n```\n\n----------------------------------------\n\nTITLE: Enable Project Service - Flat Config - JavaScript\nDESCRIPTION: Example showing how to enable the `projectService` in a flat ESLint configuration file (`eslint.config.js`). This automatically uses the nearest `tsconfig.json` for each file.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/packages/Parser.mdx#_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nexport default [\n  {\n    languageOptions: {\n      parserOptions: {\n        projectService: true,\n      },\n    },\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Incorrect - allowDirectConstAssertionInArrowFunctions: true\nDESCRIPTION: Examples of incorrect usage when `allowDirectConstAssertionInArrowFunctions` is set to `true`. The rule expects a direct `as const` assertion, not other type assertions like `as any` or `as Action`.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/explicit-function-return-type.mdx#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst func = (value: number) => ({ type: 'X', value }) as any;\nconst func = (value: number) => ({ type: 'X', value }) as Action;\n```\n\n----------------------------------------\n\nTITLE: Correct `requireNullish` example - TypeScript\nDESCRIPTION: Example demonstrating the correct code when using the `requireNullish` option. It demonstrates the use of optional chaining and not using it when not required.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-optional-chain.mdx#_snippet_16\n\nLANGUAGE: ts\nCODE:\n```\ndeclare const thing1: string | null;\nthing1?.toString();\n\ndeclare const thing2: string;\nthing2 && thing2.toString();\n```\n\n----------------------------------------\n\nTITLE: Enforce camelcase conventions with typescript-eslint\nDESCRIPTION: This configuration enforces ESLint's camelcase conventions using @typescript-eslint/naming-convention. It defines format rules for various selectors like default, variable, parameter, memberLike, and typeLike.  `leadingUnderscore` is used to configure the handling of leading underscores for private members and parameters.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/naming-convention.mdx#_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"camelcase\": \"off\",\n  \"@typescript-eslint/naming-convention\": [\n    \"error\",\n    {\n      \"selector\": \"default\",\n      \"format\": [\"camelCase\"]\n    },\n\n    {\n      \"selector\": \"variable\",\n      \"format\": [\"camelCase\", \"UPPER_CASE\"]\n    },\n    {\n      \"selector\": \"parameter\",\n      \"format\": [\"camelCase\"],\n      \"leadingUnderscore\": \"allow\"\n    },\n\n    {\n      \"selector\": \"memberLike\",\n      \"modifiers\": [\"private\"],\n      \"format\": [\"camelCase\"],\n      \"leadingUnderscore\": \"require\"\n    },\n\n    {\n      \"selector\": \"typeLike\",\n      \"format\": [\"PascalCase\"]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Check Installed @typescript-eslint Versions (npm)\nDESCRIPTION: This command lists the installed versions of the `@typescript-eslint/eslint-plugin` and `@typescript-eslint/parser` packages using npm.  It helps identify if multiple versions are installed, which can cause linting inconsistencies.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/troubleshooting/faqs/General.mdx#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm list @typescript-eslint/eslint-plugin @typescript-eslint/parser\n```\n\n----------------------------------------\n\nTITLE: Correct return examples in TypeScript\nDESCRIPTION: Shows correct usage of return statements in TypeScript functions, ensuring consistent return values. Examples use `void` and `Promise<void | number>` return types with consistent return paths.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/consistent-return.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction foo(): void {}\nfunction bar(flag: boolean): void {\n  if (flag) return foo();\n  return;\n}\n\nasync function baz(flag: boolean): Promise<void | number> {\n  if (flag) return 42;\n  return;\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Typed Linting for Out-of-Project Files\nDESCRIPTION: This JavaScript code snippet shows how to configure the `projectService` to enable typed linting for files not explicitly included in a `tsconfig.json`. It uses `allowDefaultProject` to specify a glob of out-of-project files and `defaultProject` to specify the path to a TypeScript configuration file for the slower default project.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/website/blog/2024-05-27-announcing-typescript-eslint-v8-beta.mdx#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport eslint from '@eslint/js';\nimport tseslint from 'typescript-eslint';\n\nexport default tseslint.config(\n  eslint.configs.recommended,\n  ...tseslint.configs.recommendedTypeChecked,\n  {\n    languageOptions: {\n      parserOptions: {\n        // Remove this line\n        project: ['packages/*/tsconfig.json', 'tsconfig.eslint.json'],\n        // Added lines start\n        projectService: {\n          allowDefaultProject: ['*.js'],\n          defaultProject: 'tsconfig.json',\n        },\n        // Added lines end\n        tsconfigRootDir: import.meta.dirname,\n      },\n    },\n  },\n);\n\n```\n\n----------------------------------------\n\nTITLE: Setting RuleTester Static Properties (TS)\nDESCRIPTION: This code demonstrates how to set up RuleTester's static properties to integrate with test frameworks like Mocha, Node.js (node:test), and Vitest. It shows how to assign test framework hooks (e.g., afterAll, describe, it) to the corresponding RuleTester properties. This is necessary when the hooks are not available globally.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/packages/Rule_Tester.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as test from '...';\nimport { RuleTester } from '@typescript-eslint/rule-tester';\n\nRuleTester.afterAll = test.after;\nRuleTester.describe = test.describe;\nRuleTester.it = test.it;\nRuleTester.itOnly = test.it.only;\n```\n\n----------------------------------------\n\nTITLE: For Await...Of (Correct Examples)\nDESCRIPTION: This example showcases correct usages of `for...of` with synchronous arrays and demonstrates the proper way to handle arrays of Promises using `Promise.all`. It also shows a valid usage of `for await...of` with an async generator. It utilizes a standard `for...of` loop for synchronous data and `Promise.all` to resolve Promises concurrently, demonstrating efficient alternatives. The `yieldThingsAsynchronously` function shows the use of `for await...of` on an asynchronous iterable.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/await-thenable.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nasync function syncIterable() {\n  const arrayOfValues = [1, 2, 3];\n  for (const value of arrayOfValues) {\n    console.log(value);\n  }\n}\n\nasync function syncIterableOfPromises() {\n  const arrayOfPromises = [\n    Promise.resolve(1),\n    Promise.resolve(2),\n    Promise.resolve(3),\n  ];\n  for (const promisedValue of await Promise.all(arrayOfPromises)) {\n    console.log(promisedValue);\n  }\n}\n\nasync function validUseOfForAwaitOnAsyncIterable() {\n  async function* yieldThingsAsynchronously() {\n    yield 1;\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    yield 2;\n  }\n\n  for await (const promisedValue of yieldThingsAsynchronously()) {\n    console.log(promisedValue);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Options Interface - TypeScript\nDESCRIPTION: Defines the TypeScript interface `Options` for configuring the member ordering rule.  It specifies the structure for overriding ordering configurations for classes, class expressions, interfaces, and type literals, falling back to a default configuration if no specific overrides are provided.  The `OrderConfig` type allows for specifying member types, optionality order, and member order.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/member-ordering.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface Options {\n  default?: OrderConfig;\n  classes?: OrderConfig;\n  classExpressions?: OrderConfig;\n  interfaces?: OrderConfig;\n  typeLiterals?: OrderConfig;\n}\n\ntype OrderConfig = MemberType[] | SortedOrderConfig | 'never';\n\ninterface SortedOrderConfig {\n  memberTypes?: MemberType[] | 'never';\n  optionalityOrder?: 'optional-first' | 'required-first';\n  order?:\n    | 'alphabetically'\n    | 'alphabetically-case-insensitive'\n    | 'as-written'\n    | 'natural'\n    | 'natural-case-insensitive';\n}\n\n// See below for the more specific MemberType strings\ntype MemberType = string | string[];\n```\n\n----------------------------------------\n\nTITLE: Incorrect usage with ignoreClassesThatImplementAnInterface = public-fields (TypeScript)\nDESCRIPTION: This TypeScript example demonstrates the incorrect use case when `ignoreClassesThatImplementAnInterface` is set to `'public-fields'`. The `Derived` class implements the `Base` interface. However, it includes private and protected members that do not use `this`.  Because the `public-fields` option only ignores public fields, the private and protected methods and properties are flagged by the ESLint rule since they don't use `this`.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/class-methods-use-this.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Base {\n  method(): void;\n}\n\nclass Derived implements Base {\n  method() {}\n  property = () => {};\n\n  private privateMethod() {}\n  private privateProperty = () => {};\n\n  protected protectedMethod() {}\n  protected protectedProperty = () => {};\n}\n```\n\n----------------------------------------\n\nTITLE: Disallowing 'this' alias assignment\nDESCRIPTION: This example demonstrates the incorrect and correct ways of handling scope when using 'this' inside a setTimeout function. The incorrect example assigns 'this' to a variable, while the correct example uses an arrow function to maintain the correct 'this' context.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-this-alias.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst self = this;\n\nsetTimeout(function () {\n  self.doWork();\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nsetTimeout(() => {\n  this.doWork();\n});\n```\n\n----------------------------------------\n\nTITLE: Disallowing Non-Protected Parameter Properties in TypeScript\nDESCRIPTION: These TypeScript class examples demonstrate code that violates the rule when `{ \"allow\": [\"protected\"] }` is specified.  The rule only allows protected parameter properties, flagging other modifiers as incorrect.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/parameter-properties.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nclass Foo {\n  constructor(readonly name: string) {}\n}\n\nclass Foo {\n  constructor(private name: string) {}\n}\n\nclass Foo {\n  constructor(public name: string) {}\n}\n\nclass Foo {\n  constructor(private readonly name: string) {}\n}\n\nclass Foo {\n  constructor(protected readonly name: string) {}\n}\n\nclass Foo {\n  constructor(public readonly name: string) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Code with hoist: functions-and-types\nDESCRIPTION: Illustrates incorrect code when the `hoist` option is set to `functions-and-types`.  It showcases both type shadowing (similar to the `types` option) and function shadowing where a function `b` shadows a variable `b` declared in a block scope. This highlights the rule's ability to detect shadowing across types and functions.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-shadow.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// types\ntype Bar<Foo> = 1;\ntype Foo = 1;\n\n// functions\nif (true) {\n  let b = 6;\n}\n\nfunction b() {}\n```\n\n----------------------------------------\n\nTITLE: Incorrect unsafe assignment examples in TypeScript\nDESCRIPTION: These examples demonstrate incorrect usages that the `no-unsafe-assignment` rule will flag. They involve assigning values of type `any` to variables, array destructuring, and using `any` in generic type arguments where a specific type is expected.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-unsafe-assignment.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst x = 1 as any,\n  y = 1 as any;\nconst [x] = 1 as any;\nconst [x] = [] as any[];\nconst [x] = [1 as any];\n[x] = [1] as [any];\n\nfunction foo(a = 1 as any) {}\nclass Foo {\n  constructor(private a = 1 as any) {}\n}\nclass Foo {\n  private a = 1 as any;\n}\n\n// generic position examples\nconst x: Set<string> = new Set<any>();\nconst x: Map<string, string> = new Map<string, any>();\nconst x: Set<string[]> = new Set<any[]>();\nconst x: Set<Set<Set<string>>> = new Set<Set<Set<any>>>();\n```\n\n----------------------------------------\n\nTITLE: Incorrect Constructor Parameter Assignment in TypeScript\nDESCRIPTION: This code snippet demonstrates an incorrect usage of parameter properties in a TypeScript class constructor. It shows an unnecessary assignment of the `bar` parameter property to the `this.bar` member within the constructor, which is redundant when using parameter properties.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-unnecessary-parameter-property-assignment.mdx#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nclass Foo {\n  constructor(public bar: string) {\n    this.bar = bar;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining function property in TypeScript\nDESCRIPTION: This example demonstrates two ways to define a function property within a TypeScript interface: using method shorthand syntax and using a regular property with a function type.  The choice affects type checking behavior under strictFunctionTypes.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/method-signature-style.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Example {\n  // method shorthand syntax\n  func(arg: string): number;\n\n  // regular property with function type\n  func: (arg: string) => number;\n}\n```\n\n----------------------------------------\n\nTITLE: Options Type Definition - TypeScript\nDESCRIPTION: This code defines the `Options` type for the `prefer-destructuring` rule, including the `enforceForDeclarationWithTypeAnnotation` option. It also defines the default options for the rule.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-destructuring.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntype Options = [\n  BasePreferDestructuringOptions[0],\n  BasePreferDestructuringOptions[1] & {\n    enforceForDeclarationWithTypeAnnotation?: boolean;\n  },\n];\n\nconst defaultOptions: Options = [\n  basePreferDestructuringDefaultOptions[0],\n  {\n    ...basePreferDestructuringDefaultOptions[1],\n    enforceForDeclarationWithTypeAnnotation: false,\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: TypeScript Class with Decorator\nDESCRIPTION: Illustrates a TypeScript class with a decorator and an imported type `Foo` used as a parameter type in a method. This example highlights the scenario where the `consistent-type-imports` rule could incorrectly suggest marking `Foo` as a type-only import, leading to runtime errors due to decorator metadata.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/website/blog/2024-03-25-changes-to-consistent-type-imports-with-decorators.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport Foo from 'foo';\nimport decorator from 'decorator';\n\nclass Clazz {\n  @decorator\n  method(arg: Foo) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Naming Convention - Upper Case Constant Variables\nDESCRIPTION: This configuration enforces that all const variables are in UPPER_CASE. It combines the \"variable\" selector with the \"const\" modifier.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/naming-convention.mdx#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"@typescript-eslint/naming-convention\": [\n    \"error\",\n    {\n      \"selector\": \"variable\",\n      \"modifiers\": [\"const\"],\n      \"format\": [\"UPPER_CASE\"]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Options Interface - TypeScript\nDESCRIPTION: Defines the interface `Options` extending `BaseDotNotationOptions`. It includes boolean flags to allow private and protected class property access, as well as index signature property access. These flags control whether bracket notation is allowed for specific cases.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/dot-notation.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Options extends BaseDotNotationOptions {\n  allowPrivateClassPropertyAccess?: boolean;\n  allowProtectedClassPropertyAccess?: boolean;\n  allowIndexSignaturePropertyAccess?: boolean;\n}\n\nconst defaultOptions: Options = {\n  ...baseDotNotationDefaultOptions,\n  allowPrivateClassPropertyAccess: false,\n  allowProtectedClassPropertyAccess: false,\n  allowIndexSignaturePropertyAccess: false,\n};\n```\n\n----------------------------------------\n\nTITLE: Incorrect TypeScript Directive Usage Without Description\nDESCRIPTION: This snippet showcases the incorrect usage of the `@ts-expect-error` directive when the `allow-with-description` option is enabled.  The rule will flag the usage of the directive due to the missing description.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/ban-ts-comment.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nif (false) {\n  // @ts-expect-error\n  console.log('hello');\n}\nif (false) {\n  /* @ts-expect-error */\n  console.log('hello');\n}\n```\n\n----------------------------------------\n\nTITLE: Avoiding Wide Globs in Flat Config\nDESCRIPTION: This snippet shows how to replace a wide glob pattern (`./**/tsconfig.json`) in the `parserOptions.project` array within a Flat Config ESLint setup with a more specific pattern (`./packages/*/tsconfig.json`) to improve linting performance. It emphasizes the importance of using specific paths instead of recursive globs to avoid performance degradation.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/troubleshooting/typed-linting/Monorepos.mdx#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default tseslint.config(\n  eslint.configs.recommended,\n  tseslint.configs.recommendedTypeChecked,\n  {\n    languageOptions: {\n      parserOptions: {\n        // Remove this line\n        project: ['./tsconfig.eslint.json', './**/tsconfig.json'],\n        // Add this line\n        project: ['./tsconfig.eslint.json', './packages/*/tsconfig.json'],\n        tsconfigRootDir: import.meta.dirname,\n      },\n    },\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Correct Code: allowAliases - In Unions - TypeScript\nDESCRIPTION: Examples of correct code when `allowAliases` is set to \"in-unions\".  These examples demonstrates union aliases of primitive types and reference types with interfaces and classes showcasing the scenarios permitted when the option is set to `in-unions`.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-type-alias.mdx#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\n// primitives\ntype Foo = 'a' | 'b';\n\ntype Foo = string | string[];\n\ntype Foo = `a-${number}` | `b-${number}`;\n\n// reference types\ninterface Bar {}\nclass Baz implements Bar {}\n\ntype Foo = Bar | Baz;\n```\n\n----------------------------------------\n\nTITLE: Correct Code: allowAliases - In Intersections - TypeScript\nDESCRIPTION: Illustrates examples of correct code when `allowAliases` is set to `in-intersections`. These examples demonstrates intersection aliases of primitive types and reference types with interfaces and classes showcasing the scenarios permitted when the option is set to `in-intersections`.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-type-alias.mdx#_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\n// primitives\ntype Foo = string & string[];\n\ntype Foo = `a-${number}` & `b-${number}`;\n\n// reference types\ninterface Bar {}\nclass Baz implements Bar {}\n\ntype Foo = Bar & Baz;\n```\n\n----------------------------------------\n\nTITLE: Configure prefer-readonly rule in ESLint JSON\nDESCRIPTION: This JSON code snippet shows how to configure the `@typescript-eslint/prefer-readonly` rule in an ESLint configuration file. It sets the rule to `error` and enables the `onlyInlineLambdas` option.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-readonly.mdx#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"@typescript-eslint/prefer-readonly\": [\n    \"error\",\n    { \"onlyInlineLambdas\": true }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect code with implicit property when properties override is explicit (TypeScript)\nDESCRIPTION: Presents incorrect TypeScript code where a property 'legs' lacks an explicit access modifier when the 'properties' override is set to 'explicit' and `accessibility` is set to `no-public`\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/explicit-member-accessibility.mdx#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nclass Animal {\n  constructor(protected animalName) {}\n  get name() {\n    return this.animalName;\n  }\n  protected set name(value: string) {\n    this.animalName = value;\n  }\n  legs: number;\n  private hasFleas: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Non-Null Assertion in Function\nDESCRIPTION: This code showcases an incorrect usage of the non-null assertion operator `!` within a function. The assertion `x!` on a parameter of type `number` is unnecessary. This rule flags redundant non-null assertions.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-unnecessary-type-assertion.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nfunction foo(x: number): number {\n  return x!; // unnecessary non-null\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect examples with 'in-try-catch' option\nDESCRIPTION: Demonstrates incorrect usages of the 'in-try-catch' option. These examples violate the rule by either not awaiting a promise within a try/catch block, or awaiting where it is not required (in a finally block). Includes examples where promises returned after `using` declarations are not awaited.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/return-await.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nasync function invalidInTryCatch1() {\n  try {\n    return Promise.reject('try');\n  } catch (e) {\n    // Doesn't execute due to missing await.\n  }\n}\n\nasync function invalidInTryCatch2() {\n  try {\n    throw new Error('error');\n  } catch (e) {\n    // Unnecessary await; rejections here don't impact control flow.\n    return await Promise.reject('catch');\n  }\n}\n\n// Prints 'starting async work', 'cleanup', 'async work done'.\nasync function invalidInTryCatch3() {\n  async function doAsyncWork(): Promise<void> {\n    console.log('starting async work');\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    console.log('async work done');\n  }\n\n  try {\n    throw new Error('error');\n  } catch (e) {\n    // Missing await.\n    return doAsyncWork();\n  } finally {\n    console.log('cleanup');\n  }\n}\n\nasync function invalidInTryCatch4() {\n  try {\n    throw new Error('error');\n  } catch (e) {\n    throw new Error('error2');\n  } finally {\n    // Unnecessary await; rejections here don't impact control flow.\n    return await Promise.reject('finally');\n  }\n}\n\nasync function invalidInTryCatch5() {\n  return await Promise.resolve('try');\n}\n\nasync function invalidInTryCatch6() {\n  return await 'value';\n}\n\nasync function invalidInTryCatch7() {\n  using x = createDisposable();\n  return Promise.reject('using in scope');\n}\n```\n\n----------------------------------------\n\nTITLE: Disallowing `using` as the variable keyword for `for..in` loops\nDESCRIPTION: This change prevents the use of the `using` keyword as the variable declaration within `for...in` loops, enforcing standard syntax and preventing potential conflicts. This aims to improve code correctness and readability.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/typescript-estree/CHANGELOG.md#_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\n- **typescript-estree:** disallow `using` as the variable keyword for `for..in` loops\n```\n\n----------------------------------------\n\nTITLE: Specifying Parser in RuleTester with Flat Config - TypeScript\nDESCRIPTION: This snippet shows how to specify a parser in the `RuleTester` using the flat configuration format. It requires importing the parser directly (e.g., `jsonc-eslint-parser`) and assigning the parser object to the `parser` property within `languageOptions`, instead of a string. Requires importing the desired parser.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/website/blog/2024-05-27-announcing-typescript-eslint-v8-beta.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RuleTester } from '@typescript-eslint/rule-tester\n// Add this line\nimport jsoncParser from \"jsonc-eslint-parser\";\n\nconst ruleTester = new RuleTester({\n  // Add this line\n  languageOptions: {\n    // Add this line\n    parser: jsoncParser,\n    // Remove this line\n    parser: \"jsonc-eslint-parser\",\n  // Add this line\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Await Using (Correct Examples)\nDESCRIPTION: This example shows the correct usage of `using` for synchronous disposables and `await using` for asynchronous disposables. It demonstrates the proper way to handle resources that need to be disposed of, whether synchronously or asynchronously, ensuring resources are released correctly.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/await-thenable.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nfunction makeSyncDisposable(): Disposable {\n  return {\n    [Symbol.dispose](): void {\n      // Dispose of the resource\n    },\n  };\n}\n\nasync function shouldNotAwait() {\n  using resource = makeSyncDisposable();\n}\n\nfunction makeAsyncDisposable(): AsyncDisposable {\n  return {\n    async [Symbol.asyncDispose](): Promise<void> {\n      // Dispose of the resource asynchronously\n    },\n  };\n}\n\nasync function shouldAwait() {\n  await using resource = makeAsyncDisposable();\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Empty Class (allowEmpty) - TypeScript\nDESCRIPTION: This snippet demonstrates a correct case when the `allowEmpty` option is set to `true`. An empty class `NoFields` is defined, which is allowed because it is empty.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-extraneous-class.mdx#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nclass NoFields {}\n```\n\n----------------------------------------\n\nTITLE: Suppressing ESLint rule with description\nDESCRIPTION: This snippet shows how to use `eslint-disable-next-line` along with a descriptive comment explaining why a rule is being suppressed. The example imports a function, adds a comment indicating the reason for disabling the rule (pending task), and then suppresses the `@typescript-eslint/no-unsafe-call` rule.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/website/blog/2025-01-21-avoiding-anys.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { processString } from '@example/package';\n\n// Pending GH-1234: will soon not be any.\n// eslint-disable-next-line @typescript-eslint/no-unsafe-call\nprocessString('New York City');\n```\n\n----------------------------------------\n\nTITLE: Extending with Recommended Type Checked Config (Flat)\nDESCRIPTION: This snippet shows how to extend the ESLint configuration using the `recommended-type-checked` configuration, using the Flat Config style. It requires type information for additional rule enforcement.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/users/Shared_Configurations.mdx#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexport default tseslint.config(\n  tseslint.configs.recommendedTypeChecked,\n);\n```\n\n----------------------------------------\n\nTITLE: Unbound Method Detection in TypeScript\nDESCRIPTION: This snippet shows how the `@typescript-eslint/unbound-method` rule detects unsafe references to class method functions that don't preserve their class scope when passed as standalone variables. Specifically, it shows how `getItem` from `localStorage` can cause an exception at runtime if not bound to `localStorage`.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/website/blog/2024-09-30-typed-linting.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst { getItem } = localStorage;\n//      ~~~~~~~\n// Avoid referencing unbound methods which may cause unintentional scoping of `this`.\n// eslint(@typescript-eslint/unbound-method)\n```\n\n----------------------------------------\n\nTITLE: Correct Function Type Alias - TypeScript\nDESCRIPTION: This snippet demonstrates the correct way to declare a function type using a type alias.  This aligns with the `prefer-function-type` rule, promoting more succinct code.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-function-type.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntype Example = () => string;\n```\n\n----------------------------------------\n\nTITLE: Incorrect Member Variable Declaration\nDESCRIPTION: Illustrates incorrect member variable declaration without type annotations when the `memberVariableDeclaration` option is enabled. The `delayedText` and `immediateTextImplicit` members lack explicit type definitions.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/typedef.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nclass ContainsText {\n  delayedText;\n  immediateTextImplicit = 'text';\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Safe Calls usage (allowForKnownSafeCalls)\nDESCRIPTION: This snippet shows an example of code incorrectly using the `allowForKnownSafeCalls` option. The `unsafe` function is not handled, which causes the `no-floating-promises` to report an error.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-floating-promises.mdx#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function unsafe(...args: unknown[]): Promise<void>;\n\nunsafe('...', () => {});\n```\n\n----------------------------------------\n\nTITLE: Incorrect default parameter placement (TypeScript)\nDESCRIPTION: Illustrates incorrect placement of default parameters in TypeScript functions and class constructors. Default parameters should be placed at the end of the parameter list to avoid ambiguity and unexpected behavior.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/default-param-last.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction f(a = 0, b: number) {}\nfunction f(a: number, b = 0, c: number) {}\nfunction f(a: number, b?: number, c: number) {}\nclass Foo {\n  constructor(\n    public a = 10,\n    private b: number,\n  ) {}\n}\nclass Foo {\n  constructor(\n    public a?: number,\n    private b: number,\n  ) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Querying TypeScript AST Nodes (TypeScript)\nDESCRIPTION: Demonstrates how to use the `TSInterfaceDeclaration` node type to target TypeScript-specific syntax in ESLint rules. It shows an example of banning interface declaration names that start with a lower-case letter, using the `context.report` method to report violations.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/developers/Custom_Rules.mdx#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { ESLintUtils } from '@typescript-eslint/utils';\n\nexport const rule = createRule({\n  create(context) {\n    return {\n      TSInterfaceDeclaration(node) {\n        if (/^[a-z]/.test(node.id.name)) {\n          // ...\n        }\n      },\n    };\n  },\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Correct examples with 'in-try-catch' option\nDESCRIPTION: Demonstrates correct usages of the 'in-try-catch' option. These examples either await promises within a try/catch block, or avoid awaiting when it is not needed. Includes examples where promises returned after `using` declarations are awaited.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/return-await.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nasync function validInTryCatch1() {\n  try {\n    return await Promise.reject('try');\n  } catch (e) {\n    // Executes as expected.\n  }\n}\n\nasync function validInTryCatch2() {\n  try {\n    throw new Error('error');\n  } catch (e) {\n    return Promise.reject('catch');\n  }\n}\n\n// Prints 'starting async work', 'async work done', 'cleanup'.\nasync function validInTryCatch3() {\n  async function doAsyncWork(): Promise<void> {\n    console.log('starting async work');\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    console.log('async work done');\n  }\n\n  try {\n    throw new Error('error');\n  } catch (e) {\n    return await doAsyncWork();\n  } finally {\n    console.log('cleanup');\n  }\n}\n\nasync function validInTryCatch4() {\n  try {\n    throw new Error('error');\n  } catch (e) {\n    throw new Error('error2');\n  } finally {\n    return Promise.reject('finally');\n  }\n}\n\nasync function validInTryCatch5() {\n  return Promise.resolve('try');\n}\n\nasync function validInTryCatch6() {\n  return 'value';\n}\n\nasync function validInTryCatch7() {\n  using x = createDisposable();\n  return await Promise.reject('using in scope');\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Class Declaration Member Ordering\nDESCRIPTION: This TypeScript code snippet shows a correct member order in a class declaration, adhering to the enforced rule of methods, then constructor, then fields.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/member-ordering.mdx#_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nclass Foo {\n  public static A(): void {} // -> method\n  public B(): void {} // -> method\n\n  constructor() {} // -> constructor\n\n  private C: string; // -> field\n  public D: string; // -> field\n  protected static E: string; // -> field\n}\n```\n\n----------------------------------------\n\nTITLE: Allowed: `any` to `unknown` assignment - TypeScript\nDESCRIPTION: An example of a case where the rule allows assigning a value of type `any` to a parameter declared as `unknown`. This is permitted as `unknown` is a type-safe alternative to `any`, forcing explicit type assertions or narrowing before the value can be used. This allows for a gradual migration from `any` to more specific types without immediately breaking code.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-unsafe-argument.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function foo(arg1: unknown, arg2: Set<unknown>, arg3: unknown[]): void;\nfoo(1 as any, new Set<any>(), [] as any[]);\n```\n\n----------------------------------------\n\nTITLE: Correct Code: allowCallbacks - Always - TypeScript\nDESCRIPTION: Examples of correct code when `allowCallbacks` is set to `always`. These examples demonstrates how callbacks can be declared as type aliases with different signatures and return types. Including class definitions and intersection types.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-type-alias.mdx#_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype Foo = () => void;\n\ntype Foo = (name: string) => string;\n\nclass Person {}\n\ntype Foo = (name: string, age: number) => string | Person;\n\ntype Foo = (name: string, age: number) => string & Person;\n```\n\n----------------------------------------\n\nTITLE: Incorrect property signature examples\nDESCRIPTION: These TypeScript examples demonstrate incorrect usages when the `property` option is enabled. The rule enforces using property signatures (e.g., `func: (arg: string) => number;`) instead of method signatures (e.g., `func(arg: string): number;`).\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/method-signature-style.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface T1 {\n  func(arg: string): number;\n}\ntype T2 = {\n  func(arg: boolean): void;\n};\ninterface T3 {\n  func(arg: number): void;\n  func(arg: string): void;\n  func(arg: boolean): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Correct spread of branded string (TypeScript)\nDESCRIPTION: This TypeScript snippet shows a correct usage example with the `allow` option.  It declares a `BrandedString` type and then spreads it, which is allowed by the configuration.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-misused-spread.mdx#_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\ntype BrandedString = string & { __brand: 'safe' };\n\ndeclare const brandedString: BrandedString;\n\nconst spreadBrandedString = [...brandedString];\n```\n\n----------------------------------------\n\nTITLE: Correct `treatMethodsAsReadonly: false` Examples (TS)\nDESCRIPTION: Shows correct code when `treatMethodsAsReadonly` is `false`.  Two types are defined: one explicitly uses `Readonly<>` and the other defines the method as a `readonly` property, ensuring immutability. When the option is false, the original method definition is considered correct.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-readonly-parameter-types.mdx#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\ntype MyType = Readonly<{\n  prop: string;\n  method(): string;\n}>;\nfunction foo(arg: MyType) {}\n\ntype MyOtherType = {\n  readonly prop: string;\n  readonly method: () => string;\n};\nfunction bar(arg: MyOtherType) {}\n```\n\n----------------------------------------\n\nTITLE: Correct Type Assertion Example (objectLiteralTypeAssertions - allow-as-parameter)\nDESCRIPTION: This code snippet demonstrates the correct use of type assertions when `objectLiteralTypeAssertions` is set to `'allow-as-parameter'`.  It shows how to define the type of an object literal directly, use `as any` or `as unknown` assertions, and use assertions as parameters. The option allows the use of type assertions when passing object literals as arguments to functions or constructors.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/consistent-type-assertions.mdx#_snippet_3\n\nLANGUAGE: TypeScript/JSX\nCODE:\n```\nconst x: T = { foo: 1 };\nconst y = { foo: 1 } as any;\nconst z = { foo: 1 } as unknown;\nbar({ foo: 1 } as T);\nnew Clazz({ foo: 1 } as T);\nfunction bar() {\n  throw { foo: 1 } as Foo;\n}\nconst foo = <Foo props={{ bar: 1 } as Bar} />;\n```\n\n----------------------------------------\n\nTITLE: Enum Comparison with String Literal\nDESCRIPTION: This example showcases comparing an enum value to a raw string literal, illustrating a potential logical pitfall TypeScript permits. It highlights the need for safer enum handling.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-unsafe-enum-comparison.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nenum Vegetable {\n  Asparagus = 'asparagus',\n}\n\ndeclare const vegetable: Vegetable;\n\nvegetable === 'asparagus'; // No error\n```\n\n----------------------------------------\n\nTITLE: Installing Canary Versions via NPM (Bash)\nDESCRIPTION: This bash command demonstrates how to install the canary versions of `@typescript-eslint/eslint-plugin` and `@typescript-eslint/parser` using npm. The `--save-dev` flag indicates that these are development dependencies, and the `--force` flag is used to override any version conflicts or requirements.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/users/Releases.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @typescript-eslint/eslint-plugin@canary @typescript-eslint/parser@canary --save-dev --force\n```\n\n----------------------------------------\n\nTITLE: Incorrect array type notation with 'array-simple' option in TypeScript\nDESCRIPTION: This snippet demonstrates incorrect array type notation when the `default` option is set to 'array-simple'. It violates the rule by using array syntax `(string | number)[]` for non-simple types and generic syntax `Array<string>` for simple types.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/array-type.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst a: (string | number)[] = ['a', 'b'];\nconst b: { prop: string }[] = [{ prop: 'a' }];\nconst c: (() => void)[] = [() => {}];\nconst d: Array<MyType> = ['a', 'b'];\nconst e: Array<string> = ['a', 'b'];\nconst f: ReadonlyArray<string> = ['a', 'b'];\n```\n\n----------------------------------------\n\nTITLE: Unsafe Type Assertion Example in TypeScript\nDESCRIPTION: This code demonstrates an incorrect usage of type assertions to narrow a type. The function 'f' can return either a number or a string, but the result is asserted to be a number, which is unsafe. Similarly, an element from an array containing numbers and strings is asserted to be only a number, leading to potential runtime errors.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-unsafe-type-assertion.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction f() {\n  return Math.random() < 0.5 ? 42 : 'oops';\n}\n\nconst z = f() as number;\n\nconst items = [1, '2', 3, '4'];\n\nconst number = items[0] as number;\n```\n\n----------------------------------------\n\nTITLE: Incorrect code with public getter when accessors override is off (TypeScript)\nDESCRIPTION: Shows incorrect TypeScript code when getters have the `public` access modifier and the accessors override is set to `off`\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/explicit-member-accessibility.mdx#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nclass Animal {\n  constructor(protected animalName) {}\n  public get name() {\n    return this.animalName;\n  }\n  get legs() {\n    return this.legCount;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enforce fields style for class literals - Correct\nDESCRIPTION: This code snippet demonstrates the correct usage of the `fields` style.  Literal values are exposed as `readonly` fields.  Non-literal values (like arrays) and values derived from expressions (like accessing `window.location.href`) are permitted in fields and getters, respectively.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/class-literal-property-style.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass Mx {\n  public readonly myField1 = 1;\n\n  // not a literal\n  public readonly myField2 = [1, 2, 3];\n\n  private readonly ['myField3'] = 'hello world';\n\n  public get myField4() {\n    return `hello from ${window.location.href}`;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Options Interface for the only-throw-error rule\nDESCRIPTION: This code defines the `Options` interface for the `only-throw-error` rule, allowing customization of which types can be thrown. It includes options to allow specific type specifiers from files, libraries, or packages, as well as options to allow throwing values typed as `any` or `unknown`.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/only-throw-error.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Options {\n  /**\n   * Type specifiers that can be thrown.\n   */\n  allow?: (\n    | {\n        from: 'file';\n        name: [string, ...string[]] | string;\n        path?: string;\n      }\n    | {\n        from: 'lib';\n        name: [string, ...string[]] | string;\n      }\n    | {\n        from: 'package';\n        name: [string, ...string[]] | string;\n        package: string;\n      }\n    | string\n  )[];\n\n  /**\n   * Whether to always allow throwing values typed as `any`.\n   */\n  allowThrowingAny?: boolean;\n\n  /**\n   * Whether to always allow throwing values typed as `unknown`.\n   */\n  allowThrowingUnknown?: boolean;\n}\n\nconst defaultOptions: Options = {\n  allow: [],\n  allowThrowingAny: true,\n  allowThrowingUnknown: true,\n};\n```\n\n----------------------------------------\n\nTITLE: Disallowing Non-Private Parameter Properties in TypeScript\nDESCRIPTION: These TypeScript class examples demonstrate code that violates the rule when `{ \"allow\": [\"private\"] }` is specified.  The rule only allows private parameter properties, flagging other modifiers as incorrect.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/parameter-properties.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nclass Foo {\n  constructor(readonly name: string) {}\n}\n\nclass Foo {\n  constructor(protected name: string) {}\n}\n\nclass Foo {\n  constructor(public name: string) {}\n}\n\nclass Foo {\n  constructor(private readonly name: string) {}\n}\n\nclass Foo {\n  constructor(protected readonly name: string) {}\n}\n\nclass Foo {\n  constructor(public readonly name: string) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Rewritten code for Type Parameter Inside Function Body TypeScript\nDESCRIPTION: This is the correct example for the Type Parameter Inside Function Body. It removes the unnecessary type parameter and avoids the unnecessary-type-parameters warning.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-unnecessary-type-parameters.mdx#_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nfunction log(string1: string): void {\n  const string2: string = string1;\n  console.log(string2);\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect example with countVoidThis false and max 1\nDESCRIPTION: Illustrates an incorrect code snippet where `countVoidThis` is set to `false` and the maximum allowed parameters (`max`) is set to 1.  The function `hasNoThis` has two parameters besides `this: void`, violating the rule.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/max-params.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction hasNoThis(this: void, first: string, second: string) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Mixed Logical Expressions with ignoreMixedLogicalExpressions: false in TypeScript\nDESCRIPTION: This code demonstrates incorrect mixed logical expressions using the logical OR operator that should be replaced with the nullish coalescing operator. This code is flagged when `ignoreMixedLogicalExpressions` is set to `false`. The example shows various mixed logical expressions that can be simplified using `??`.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-nullish-coalescing.mdx#_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\ndeclare let a: string | null;\ndeclare const b: string | null;\ndeclare const c: string | null;\ndeclare const d: string | null;\n\na || (b && c);\na ||= b && c;\n(a && b) || c || d;\na || (b && c) || d;\na || (b && c && d);\n```\n\n----------------------------------------\n\nTITLE: Auto-Fixing Type Imports with ESLint\nDESCRIPTION: Illustrates how ESLint can automatically fix an import statement to use `import type` when all imported specifiers are only used as types.  This is achieved using the `--fix` flag or an editor extension.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/website/blog/2023-02-24-consistent-type-exports-and-imports-why-and-how.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { GetString } from './types.js';\n\nexport function getAndLogValue(getter: GetString) {\n  console.log('Value:', getter());\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect: Unnecessary Condition - Truthy Check\nDESCRIPTION: This example demonstrates an incorrect use of a conditional statement where the `items` array is checked for truthiness. Since arrays are never nullable, the check is unnecessary and will be flagged by the rule.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-unnecessary-condition.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction head<T>(items: T[]) {\n  // items can never be nullable, so this is unnecessary\n  if (items) {\n    return items[0].toUpperCase();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Code: allowAliases - In Intersections - TypeScript\nDESCRIPTION: Illustrates examples of incorrect code when `allowAliases` is set to `in-intersections`.  These examples demonstrates primitive type aliases, reference type aliases with interfaces and classes, and also aliases involving unions that are not allowed under this configuration.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-type-alias.mdx#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\n// primitives\ntype Foo = 'a';\n\ntype Foo = 'a' | 'b';\n\ntype Foo = string;\n\ntype Foo = string | string[];\n\ntype Foo = `a-${number}` | `b-${number}`;\n\n// reference types\ninterface Bar {}\nclass Baz implements Bar {}\n\ntype Foo = Bar;\n\ntype Foo = Bar | Baz;\n```\n\n----------------------------------------\n\nTITLE: Correct Interface Member Order (Typescript)\nDESCRIPTION: This TypeScript code demonstrates the correct member ordering in an interface, adhering to the rule { \"interfaces\": [\"signature\", \"method\", \"constructor\", \"field\"] }. The members are ordered as signature, method, constructor, and field.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/member-ordering.mdx#_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Foo {\n  [Z: string]: any; // -> signature\n\n  A(): void; // -> method\n\n  new (); // -> constructor\n\n  B: string; // -> field\n}\n```\n\n----------------------------------------\n\nTITLE: Unnecessary Usage of Type Parameter Inside Function Body TypeScript\nDESCRIPTION: This example shows that the rule only considers usages of the type parameter in the signature of the function, but not in the implementation. Thus the type parameter in the const string2 is not counted and triggers the rule. The suggested solution is to remove the type parameter and to use string instead.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-unnecessary-type-parameters.mdx#_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nfunction log<T extends string>(string1: T): void {\n  const string2: T = string1;\n  console.log(string2);\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Code: allowAliases - Always - TypeScript\nDESCRIPTION: Examples of correct code when `allowAliases` is set to \"always\".  These examples demonstrates primitive type aliases, reference type aliases with interfaces and classes, and also aliases involving unions and intersections, showcasing the scenarios permitted when the option is set to always.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-type-alias.mdx#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\n// primitives\ntype Foo = 'a';\n\ntype Foo = 'a' | 'b';\n\ntype Foo = string;\n\ntype Foo = string | string[];\n\ntype Foo = string & string[];\n\ntype Foo = `foo-${number}`;\n\n// reference types\ninterface Bar {}\nclass Baz implements Bar {}\n\ntype Foo = Bar;\n\ntype Foo = Bar | Baz;\n\ntype Foo = Bar & Baz;\n```\n\n----------------------------------------\n\nTITLE: Type Imports with No Type Imports\nDESCRIPTION: This example shows incorrect code when the 'prefer' option is set to 'type-imports'. It uses regular import statements without the type keyword.  This snippet will generate an error because it doesn't use `import type` when `prefer: 'type-imports'` is set.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/consistent-type-imports.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Foo } from 'Foo';\nimport Bar from 'Bar';\ntype T = Foo;\nconst x: Bar = 1;\n```\n\n----------------------------------------\n\nTITLE: Fix clearProgramCache export in typescript-estree\nDESCRIPTION: This bug fix ensures the `clearProgramCache` function is exported correctly. It resolves an issue where the function was not accessible, impacting performance and memory management when parsing TypeScript code. This fix allows users to manually clear the cache when necessary.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/typescript-estree/CHANGELOG.md#_snippet_27\n\nLANGUAGE: text\nCODE:\n```\n**typescript-estree:** do not call export of clearProgramCache ([#6540](https://github.com/typescript-eslint/typescript-eslint/issues/6540)) ([181e705](https://github.com/typescript-eslint/typescript-eslint/commit/181e705887e9e07f0fa28195644cc94e5b4f039d))\n```\n\n----------------------------------------\n\nTITLE: Incorrect usage of restricted imports - TypeScript\nDESCRIPTION: Shows examples of incorrect usage of restricted imports as defined by the `no-restricted-imports` rule.  The code imports `foo` and `baz` from restricted modules `import-foo` and `import-baz` respectively, triggering an error because type-only imports are not being used for the restricted modules. The option provided in the code block configures the restricted modules.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-restricted-imports.mdx#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport foo from 'import-foo';\nexport { Foo } from 'import-foo';\n\nimport baz from 'import-baz';\nexport { Baz } from 'import-baz';\n```\n\n----------------------------------------\n\nTITLE: Allowing Protected Readonly Parameter Properties in TypeScript - Correct Example\nDESCRIPTION: These TypeScript class examples demonstrate code that adheres to the rule when `{ \"allow\": [\"protected readonly\"] }` is specified.  The rule allows constructors with a simple parameter or a `protected readonly` parameter property.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/parameter-properties.mdx#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nclass Foo {\n  constructor(name: string) {}\n}\n\nclass Foo {\n  constructor(protected readonly name: string) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Mapped Types with `allowMappedTypes: in-unions-and-intersections`\nDESCRIPTION: This code demonstrates the correct usage of mapped types when the `allowMappedTypes` option is set to `in-unions-and-intersections`. Mapped types are used within union and intersection types, which is allowed under this configuration. The code defines type aliases using mapped types inside union and intersection types.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-type-alias.mdx#_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\ntype Foo<T, U> =\n  | { readonly [P in keyof T]: T[P] }\n  | { readonly [P in keyof U]: U[P] };\n\ntype Foo<T, U> = { [P in keyof T]?: T[P] } | { [P in keyof U]?: U[P] };\n\ntype Foo<T, U> = { readonly [P in keyof T]: T[P] } & {\n  readonly [P in keyof U]: U[P];\n};\n\ntype Foo<T, U> = { [P in keyof T]?: T[P] } & { [P in keyof U]?: U[P] };\n```\n\n----------------------------------------\n\nTITLE: Correct Higher Order Functions - TypeScript\nDESCRIPTION: Examples of correct code that adheres to the rule when `allowHigherOrderFunctions` is `true`. These higher-order functions have explicit return type annotations on the inner functions.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/explicit-module-boundary-types.mdx#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport const arrowFn = () => (): void => {};\n\nexport function fn() {\n  return function (): void {};\n}\n\nexport function foo(outer: string) {\n  return function (inner: string): void {};\n}\n```\n\n----------------------------------------\n\nTITLE: Installing typescript-eslint via npm or yarn\nDESCRIPTION: This command installs the `typescript-eslint` package as a project dependency using either npm or yarn. It allows you to use TypeScript with ESLint.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/packages/TypeScript_ESLint.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i typescript-eslint\n```\n\n----------------------------------------\n\nTITLE: Incorrect Addition with allowNumberAndString: true\nDESCRIPTION: This snippet demonstrates incorrect addition operations with `allowNumberAndString` enabled, showing cases that are still flagged by the rule (adding to `unknown` or `never`).\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/restrict-plus-operands.mdx#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nlet fn = (a: number, b: unknown) => a + b;\nlet fn = (a: number, b: never) => a + b;\n```\n\n----------------------------------------\n\nTITLE: Arcane Type Equality Test TypeScript\nDESCRIPTION: This example presents an arcane code snippet used for testing type equality. Because the function types created within the `Equal` type are never expected to be assigned to (they're just created for the purpose of type system manipulations), this usage is not what the rule is intended to analyze, and it should be suppressed using eslint-disable comments.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-unnecessary-type-parameters.mdx#_snippet_10\n\nLANGUAGE: ts\nCODE:\n```\ntype Compute<A> = A extends Function ? A : { [K in keyof A]: Compute<A[K]> };\ntype Equal<X, Y> =\n  (<T1>() => T1 extends Compute<X> ? 1 : 2) extends\n    (<T2>() => T2 extends Compute<Y> ? 1 : 2)\n  ? true\n  : false;\n```\n\n----------------------------------------\n\nTITLE: Incorrect Type Alias Usage with 'interface' Option\nDESCRIPTION: This snippet demonstrates incorrect usage when the `consistent-type-definitions` rule is set to `'interface'`. It shows a `type` alias being used to define an object shape, which violates the rule's requirement to use `interface` for object type definitions.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/consistent-type-definitions.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype T = { x: number };\n```\n\n----------------------------------------\n\nTITLE: Incorrect Tuple Types with `allowTupleTypes: in-intersections`\nDESCRIPTION: This code demonstrates the incorrect usage of tuple types when the `allowTupleTypes` option is set to `in-intersections`. Tuple types are used in unions and standalone declarations, which is not allowed under this configuration. The code defines type aliases using tuple types, but these usages are considered invalid by the ESLint rule with this option.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-type-alias.mdx#_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\ntype Foo = [number];\n\ntype Foo = [number] | [number, number];\n\ntype Foo = [string] | [number];\n```\n\n----------------------------------------\n\nTITLE: Correct Mutable Variable with Getters/Setters - TypeScript\nDESCRIPTION: This snippet shows the correct way to handle mutable state using getter and setter functions.  This allows controlling access and modification of the state. mutableCount is declared as a let variable and getMutableCount and incrementCount functions provide access and modification.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-extraneous-class.mdx#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nlet mutableCount = 1;\n\nexport function getMutableCount() {\n  return mutableField;\n}\n\nexport function incrementCount() {\n  mutableField += 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Function Type in Function Parameter - TypeScript\nDESCRIPTION: This snippet showcases the correct way to define a function type as a parameter to another function using type alias.  This aligns with the `prefer-function-type` rule and uses more readable syntax.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-function-type.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nfunction foo(example: () => number): number {\n  return bar();\n}\n```\n\n----------------------------------------\n\nTITLE: Extending stylistic-type-checked-only with Legacy Config\nDESCRIPTION: This code snippet demonstrates how to extend the `stylistic-type-checked-only` configuration using the legacy `.eslintrc.js` format.  It configures ESLint to only use type-checked rules from typescript-eslint's stylistic set, disabling any corresponding core ESLint rules.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/users/Shared_Configurations.mdx#_snippet_23\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  extends: ['plugin:@typescript-eslint/stylistic-type-checked-only'],\n};\n```\n\n----------------------------------------\n\nTITLE: Correct Promise return with custom Promise name\nDESCRIPTION: Example of correct code where a function returns a custom Promise-like object (Bluebird) and is marked as async. This requires setting `allowedPromiseNames` to include 'Bluebird'.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/promise-function-async.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nclass Bluebird {}\n\nconst returnsBluebird = async () => new Bluebird(() => {});\n```\n\n----------------------------------------\n\nTITLE: Targeting Multiple Node Types with Explicit Types (TypeScript)\nDESCRIPTION: Illustrates how to target multiple AST node types in a single rule query and provides explicit type declarations. The code targets both function and interface declarations, ensuring the `node` parameter has the correct type for TypeScript features.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/developers/Custom_Rules.mdx#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { TSESTree } from '@typescript-eslint/utils';\n\nexport const rule = createRule({\n  create(context) {\n    return {\n      'FunctionDeclaration, TSInterfaceDeclaration'(\n        node: TSESTree.FunctionDeclaration | TSESTree.TSInterfaceDeclaration,\n      ) {\n        if (/^[a-z]/.test(node.id.name)) {\n          // ...\n        }\n      },\n    };\n  },\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Allowing require statements via import\nDESCRIPTION: This snippet demonstrates correct usages of the `require` statement, which are allowed by the `no-var-requires` rule. These include using `require` in an import statement (e.g., `import foo = require('foo');`) or simply calling `require` as a standalone statement.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-var-requires.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport foo = require('foo');\nrequire('foo');\nimport foo from 'foo';\n```\n\n----------------------------------------\n\nTITLE: Supporting Auto Accessor syntax\nDESCRIPTION: This code snippet adds support for the Auto Accessor syntax in TypeScript to the @typescript-eslint scope-manager. This allows proper recognition and analysis of auto accessors within TypeScript code. It requires the TypeScript parser to correctly identify auto accessor nodes.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/scope-manager/CHANGELOG.md#_snippet_7\n\nLANGUAGE: none\nCODE:\n```\nsupport Auto Accessor syntax ([#5926](https://github.com/typescript-eslint/typescript-eslint/issues/5926)) ([becd1f8](https://github.com/typescript-eslint/typescript-eslint/commit/becd1f8581c0013399dfe71be6c265e96cedb57a))\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint with Type Information (Legacy Config)\nDESCRIPTION: This JavaScript code configures ESLint to use type information using the legacy configuration style by extending `plugin:@typescript-eslint/recommended-type-checked` and specifying `parserOptions` to point to the TSConfig file. `projectService` is enabled, and `tsconfigRootDir` is set to the project's root directory using `__dirname`. This is a CommonJS module.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/getting-started/Typed_Linting.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n/* eslint-env node */\nmodule.exports = {\n  extends: [\n    'eslint:recommended',\n    // Remove this line\n    'plugin:@typescript-eslint/recommended',\n    // Add this line\n    'plugin:@typescript-eslint/recommended-type-checked',\n  ],\n  plugins: ['@typescript-eslint'],\n  parser: '@typescript-eslint/parser',\n  // Added lines start\n  parserOptions: {\n    projectService: true,\n    tsconfigRootDir: __dirname,\n  },\n  // Added lines end\n  root: true,\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Rule for Import Type Side Effects in ESLint\nDESCRIPTION: This commit introduces a new ESLint rule, `no-import-type-side-effects`, that warns against runtime side effects when using `verbatimModuleSyntax`. This rule is designed to catch cases where importing types might inadvertently cause runtime execution.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/utils/CHANGELOG.md#_snippet_8\n\nLANGUAGE: Typescript\nCODE:\n```\n[no-import-type-side-effects] add rule to warn against runtime side effects with `verbatimModuleSyntax` ([#6394](https://github.com/typescript-eslint/typescript-eslint/issues/6394)) ([b14d3be](https://github.com/typescript-eslint/typescript-eslint/commit/b14d3be0f305d71e0adfc9381e9de993898b2b43))\n```\n\n----------------------------------------\n\nTITLE: Incorrect method signature examples\nDESCRIPTION: These TypeScript examples demonstrate incorrect usages when the `method` option is enabled. The rule enforces using method signatures (e.g., `func(arg: string): number;`) instead of property signatures (e.g., `func: (arg: string) => number;`).\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/method-signature-style.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninterface T1 {\n  func: (arg: string) => number;\n}\ntype T2 = {\n  func: (arg: boolean) => void;\n}\n```\n\n----------------------------------------\n\nTITLE: Disallowing Non-Public Parameter Properties in TypeScript\nDESCRIPTION: These TypeScript class examples demonstrate code that violates the rule when `{ \"allow\": [\"public\"] }` is specified.  The rule only allows public parameter properties, flagging other modifiers as incorrect.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/parameter-properties.mdx#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nclass Foo {\n  constructor(readonly name: string) {}\n}\n\nclass Foo {\n  constructor(private name: string) {}\n}\n\nclass Foo {\n  constructor(protected name: string) {}\n}\n\nclass Foo {\n  constructor(private readonly name: string) {}\n}\n\nclass Foo {\n  constructor(protected readonly name: string) {}\n}\n\nclass Foo {\n  constructor(public readonly name: string) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Allowed Type Annotations\nDESCRIPTION: This code snippet provides examples of correct usage when the 'type-annotation' option is enabled. It shows cases where generic type arguments are specified on the type annotation, or both sides, or neither, aligning with the rule's requirements.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/consistent-generic-constructors.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst map: Map<string, number> = new Map();\nconst set: Set<string> = new Set();\nconst set = new Set();\nconst set: Set<string> = new Set<string>();\n```\n\n----------------------------------------\n\nTITLE: Incorrect Boolean Coercion with ignoreBooleanCoercion: false in TypeScript\nDESCRIPTION: This code demonstrates incorrect usage of the logical OR operator within a Boolean coercion that should be replaced with the nullish coalescing operator. This is flagged when `ignoreBooleanCoercion` is set to `false`.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-nullish-coalescing.mdx#_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\ndeclare const a: string | true | undefined;\ndeclare const b: string | boolean | undefined;\n\nconst x = Boolean(a || b);\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Non-Boolean Types in Boolean Expressions - TypeScript\nDESCRIPTION: These examples illustrate incorrect uses of non-boolean types in boolean expressions. The rule flags these cases because nullable numbers, strings, and booleans are implicitly treated as boolean values without explicit checks, which can lead to unexpected behavior. It also disallows `any`, unconstrained generics, and always-truthy/falsy types.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/strict-boolean-expressions.mdx#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\n// nullable numbers are considered unsafe by default\ndeclare const num: number | undefined;\nif (num) {\n  console.log('num is defined');\n}\n\n// nullable strings are considered unsafe by default\ndeclare const str: string | null;\nif (!str) {\n  console.log('str is empty');\n}\n\n// nullable booleans are considered unsafe by default\nfunction foo(bool?: boolean) {\n  if (bool) {\n    bar();\n  }\n}\n\n// `any`, unconstrained generics and unions of more than one primitive type are disallowed\nconst foo = <T>(arg: T) => (arg ? 1 : 0);\n\n// always-truthy and always-falsy types are disallowed\nlet obj = {};\nwhile (obj) {\n  obj = getObj();\n}\n\n// assertion functions without an `is` are boolean contexts.\ndeclare function assert(value: unknown): asserts value;\nlet maybeString = Math.random() > 0.5 ? '' : undefined;\nassert(maybeString);\n\n// array predicates' return types are boolean contexts.\n['one', null].filter(x => x);\n```\n\n----------------------------------------\n\nTITLE: Testing Untyped ESLint Rules - TypeScript\nDESCRIPTION: This code snippet demonstrates how to test an ESLint rule that does not require type information. It imports `RuleTester` and the rule, then uses `ruleTester.run` to test the rule with valid and invalid code examples.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/developers/Custom_Rules.mdx#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RuleTester } from '@typescript-eslint/rule-tester';\nimport rule from './my-rule';\n\nconst ruleTester = new RuleTester();\n\nruleTester.run('my-rule', rule, {\n  valid: [\n    /* ... */\n  ],\n  invalid: [\n    /* ... */\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Public Instance Methods Before Public Static Fields\nDESCRIPTION: This configuration enforces that public instance methods should come before public static fields in classes. Other members can be placed anywhere. This rule doesn't apply to interfaces or type literals.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/member-ordering.mdx#_snippet_11\n\nLANGUAGE: jsonc\nCODE:\n```\n// .eslintrc.json\n{\n  \"rules\": {\n    \"@typescript-eslint/member-ordering\": [\n      \"error\",\n      { \"default\": [\"public-instance-method\", \"public-static-field\"] },\n    ],\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Promise return without async\nDESCRIPTION: Examples of incorrect code where functions return a Promise without being marked as async. This demonstrates the scenarios flagged by the rule when a function implicitly returns a Promise or a union type including a Promise without using the `async` keyword.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/promise-function-async.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst arrowFunctionReturnsPromise = () => Promise.resolve('value');\n\nfunction functionReturnsPromise() {\n  return Promise.resolve('value');\n}\n\nfunction functionReturnsUnionWithPromiseImplicitly(p: boolean) {\n  return p ? 'value' : Promise.resolve('value');\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Type Indexes with ignoreTypeIndexes: false (TypeScript)\nDESCRIPTION: This TypeScript code shows incorrect usage of type indexes when the `ignoreTypeIndexes` option of the `no-magic-numbers` rule is set to `false`. The code uses numeric literals (0, 2) to index types `Bar` and the parameters of `Foo`, violating the rule.  The configuration `'{ \"ignoreTypeIndexes\": false }'` enables the enforcement.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-magic-numbers.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ntype Foo = Bar[0];\ntype Baz = Parameters<Foo>[2];\n\n```\n\n----------------------------------------\n\nTITLE: Allow Private Property Access - TypeScript\nDESCRIPTION: This code demonstrates how to allow private class property access using bracket notation when `allowPrivateClassPropertyAccess` is set to `true`. TypeScript reports a type error when using dot notation for private properties, but not array notation.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/dot-notation.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass X {\n  private priv_prop = 123;\n}\n\nconst x = new X();\nx['priv_prop'] = 123;\n```\n\n----------------------------------------\n\nTITLE: Allowing Public Readonly Parameter Properties in TypeScript - Correct Example\nDESCRIPTION: These TypeScript class examples demonstrate code that adheres to the rule when `{ \"allow\": [\"public readonly\"] }` is specified. The rule allows constructors with a simple parameter or a `public readonly` parameter property.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/parameter-properties.mdx#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nclass Foo {\n  constructor(name: string) {}\n}\n\nclass Foo {\n  constructor(public readonly name: string) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Case-Insensitive Alphabetical Ordering (JSONC)\nDESCRIPTION: This configuration enables case-insensitive alphabetical sorting for interface members within their default member groups.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/member-ordering.mdx#_snippet_39\n\nLANGUAGE: jsonc\nCODE:\n```\n// .eslintrc.json\n{\n  \"rules\": {\n    \"@typescript-eslint/member-ordering\": [\n      \"error\",\n      {\n        \"default\": {\n          \"order\": \"alphabetically-case-insensitive\",\n        },\n      },\n    ],\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Manually configuring typescript-eslint plugin and parser\nDESCRIPTION: This code demonstrates how to manually configure the `@typescript-eslint` plugin and parser in an ESLint configuration. It defines the plugin, parser, and parser options, including setting `projectService` and `tsconfigRootDir`.  The example also configures a specific rule, `@typescript-eslint/no-floating-promises`, to be an error.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/packages/TypeScript_ESLint.mdx#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// @ts-check\n\nimport eslint from '@eslint/js';\nimport jestPlugin from 'eslint-plugin-jest';\nimport tseslint from 'typescript-eslint';\n\nexport default tseslint.config({\n  plugins: {\n    // highlight-next-line\n    '@typescript-eslint': tseslint.plugin,\n  },\n  languageOptions: {\n    // highlight-next-line\n    parser: tseslint.parser,\n    parserOptions: {\n      projectService: true,\n      tsconfigRootDir: import.meta.dirname,\n    },\n  },\n  rules: {\n    '@typescript-eslint/no-floating-promises': 'error',\n    // ...\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Incorrect array type notation with 'generic' option in TypeScript\nDESCRIPTION: This snippet demonstrates incorrect array type notation when the `default` option is set to 'generic'. It uses `string[]`, `readonly string[]` and `Readonly<string[]>` instead of the enforced `Array<string>`, `ReadonlyArray<string>`, and `Readonly<Array<string>>` syntax.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/array-type.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst x: string[] = ['a', 'b'];\nconst y: readonly string[] = ['a', 'b'];\nconst z: Readonly<string[]> = ['a', 'b'];\n```\n\n----------------------------------------\n\nTITLE: Allowing Private Readonly Parameter Properties in TypeScript - Correct Example\nDESCRIPTION: These TypeScript class examples demonstrate code that adheres to the rule when `{ \"allow\": [\"private readonly\"] }` is specified. The rule allows constructors with a simple parameter or a `private readonly` parameter property.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/parameter-properties.mdx#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nclass Foo {\n  constructor(name: string) {}\n}\n\nclass Foo {\n  constructor(private readonly name: string) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect require usage with allow option\nDESCRIPTION: This snippet demonstrates incorrect usage of `require` when the `allow` option is set to `['/package\\.json$']`. It shows that requiring a file other than `package.json`, like `../data.json`, is still disallowed.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-var-requires.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst foo = require('../data.json');\n```\n\n----------------------------------------\n\nTITLE: Disable Type-Aware Linting using Flat Config\nDESCRIPTION: This code snippet illustrates how to disable type-aware linting for a set of files within a Flat Config setup using `typescript-eslint`. It extends existing recommended configurations and adds a new configuration object with a `files` array specifying the target files (e.g., `**/*.js`) and extends `tseslint.configs.disableTypeChecked` to disable type checking for those files. The `languageOptions` section configures the parser to use project service and set tsconfig root directory.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/troubleshooting/typed-linting/index.mdx#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nexport default tseslint.config(\n  eslint.configs.recommended,\n  tseslint.configs.recommendedTypeChecked,\n  tseslint.configs.stylisticTypeChecked,\n  {\n    languageOptions: {\n      parserOptions: {\n        projectService: true,\n        tsconfigRootDir: import.meta.dirname,\n      },\n    },\n  },\n  // Added lines start\n  {\n    files: ['**/*.js'],\n    extends: [tseslint.configs.disableTypeChecked],\n  },\n  // Added lines end\n);\n```\n\n----------------------------------------\n\nTITLE: Use combined 'import' with 'prefer-import'\nDESCRIPTION: This snippet demonstrates the correct usage of import statement using the `prefer-import` option. Instead of using a triple slash reference, all the imported elements should be in the same import statement.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/triple-slash-reference.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { valueA, valueB } from 'code';\n```\n\n----------------------------------------\n\nTITLE: Updating package.json for TypeScript dependency\nDESCRIPTION: This snippet demonstrates how to modify the root `package.json` file to update the TypeScript dependency for a new release candidate (RC). It involves adding the RC version to the allowed versions and updating the resolutions.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/maintenance/pull-requests/Dependency_Version_Upgrades.mdx#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\nIn the root `package.json`, add `|| X.Y.1-rc2` to the `devDependency` on `typescript`\n```\n\n----------------------------------------\n\nTITLE: Allow static delete - Correct\nDESCRIPTION: This code demonstrates correct usage of the `delete` operator on object keys that are statically known at compile time. This is allowed because it doesn't introduce the risks associated with dynamic key access. The example also includes deleting numeric and string literals, which are also considered safe under this rule. The type annotation `: { [i: string]: number }` shows that the container is designed to take string based index.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-dynamic-delete.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst container: { [i: string]: number } = {\n  /* ... */\n};\n\n// Constant runtime lookups by string index\ndelete container.aaa;\n\n// Constants that must be accessed by []\ndelete container[7];\ndelete container[-1];\n\n// All strings are allowed, to be compatible with the noPropertyAccessFromIndexSignature\n// TS compiler option\ndelete container['aaa'];\ndelete container['Infinity'];\n```\n\n----------------------------------------\n\nTITLE: Project Configuration with Glob Pattern - JavaScript\nDESCRIPTION: Example of configuring the `project` option with a glob pattern. This allows the parser to use multiple TSConfig files matching the pattern.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/packages/Parser.mdx#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nproject: './packages/**/tsconfig.json';\n```\n\n----------------------------------------\n\nTITLE: Correct Switch - Union Type with Default - TypeScript\nDESCRIPTION: This example shows correct usage when the `considerDefaultExhaustiveForUnions` is enabled. The switch statement has a default clause which means that all values will be handled. \nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/switch-exhaustiveness-check.mdx#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\ndeclare const literal: 'a' | 'b';\n\nswitch (literal) {\n  case 'a':\n    break;\n  default:\n    break;\n}\n```\n\n----------------------------------------\n\nTITLE: Extending ESLint Config (Legacy, Type Checking)\nDESCRIPTION: This snippet shows how to extend the ESLint configuration in a project with type checking, using the Legacy Config style (`.eslintrc.js`). It extends from ESLint's recommended rules and TypeScript ESLint's recommended-type-checked and stylistic-type-checked rules.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/users/Shared_Configurations.mdx#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  extends: [\n    'eslint:recommended',\n    'plugin:@typescript-eslint/recommended-type-checked',\n    'plugin:@typescript-eslint/stylistic-type-checked',\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Correct Addition with allowAny: true\nDESCRIPTION: This snippet shows examples of correct addition operations when the `allowAny` option is enabled. Adding to an `any` type is allowed.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/restrict-plus-operands.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nlet fn = (a: number, b: any) => a + b;\nlet fn = (a: string, b: any) => a + b;\n```\n\n----------------------------------------\n\nTITLE: Feature: Disallowing switch statements with multiple default cases\nDESCRIPTION: This code snippet describes a new feature implemented in `typescript-estree` which prevents the use of switch statements containing multiple default cases. This enhancement improves code quality and reduces potential errors by enforcing a single default case per switch statement.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/ast-spec/CHANGELOG.md#_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n- **typescript-estree:** disallow switch statements with multiple default cases\n```\n\n----------------------------------------\n\nTITLE: Creating an Undocumented Rule (TypeScript)\nDESCRIPTION: Illustrates how to create a custom ESLint rule without providing documentation using `ESLintUtils.RuleCreator.withoutDocs`. This is generally discouraged but can be useful in specific scenarios. The example demonstrates the basic structure of a rule without documentation requirements.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/developers/Custom_Rules.mdx#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { ESLintUtils } from '@typescript-eslint/utils';\n\nexport const rule = ESLintUtils.RuleCreator.withoutDocs({\n  create(context) {\n    // ...\n  },\n  meta: {\n    // ...\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Default Options for Parse and Generate Services - TypeScript\nDESCRIPTION: Defines the default options for the `parseAndGenerateServices` function. These options include settings for syntactic and semantic error handling, extra file extensions, node map preservation, project configuration, project folder ignore list, and the root directory for tsconfig files.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/packages/TypeScript_ESTree.mdx#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst PARSE_AND_GENERATE_SERVICES_DEFAULT_OPTIONS: ParseOptions = {\n  ...PARSE_DEFAULT_OPTIONS,\n  errorOnTypeScriptSyntacticAndSemanticIssues: false,\n  extraFileExtensions: [],\n  preserveNodeMaps: false, // or true, if you do not set this, but pass `project`\n  project: undefined,\n  projectFolderIgnoreList: ['/node_modules/'],\n  tsconfigRootDir: process.cwd(),\n};\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Member Ordering for Class Declarations\nDESCRIPTION: This configuration specifies an order for class declarations only: methods, then the constructor, then fields. It does not apply to class expressions (use `classExpressions` for them). Default settings will be used for class expressions and all other syntax constructs other than class declarations.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/member-ordering.mdx#_snippet_21\n\nLANGUAGE: jsonc\nCODE:\n```\n// .eslintrc.json\n{\n  \"rules\": {\n    \"@typescript-eslint/member-ordering\": [\n      \"error\",\n      { \"classes\": [\"method\", \"constructor\", \"field\"] },\n    ],\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Suppressing ESLint rule with eslint-disable-next-line\nDESCRIPTION: This snippet demonstrates how to use `eslint-disable-next-line` to suppress a specific ESLint rule on a given line. It imports a function and suppresses the `@typescript-eslint/no-unsafe-call` rule when calling that function.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/website/blog/2025-01-21-avoiding-anys.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { processString } from '@example/package';\n\n// eslint-disable-next-line @typescript-eslint/no-unsafe-call\nprocessString('New York City');\n```\n\n----------------------------------------\n\nTITLE: Allowing Private Parameter Properties in TypeScript - Correct Example\nDESCRIPTION: These TypeScript class examples demonstrate code that adheres to the rule when `{ \"allow\": [\"private\"] }` is specified. The rule allows constructors with a simple parameter or a `private` parameter property.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/parameter-properties.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nclass Foo {\n  constructor(name: string) {}\n}\n\nclass Foo {\n  constructor(private name: string) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Unsafe Member Access Detection in TypeScript\nDESCRIPTION: This snippet demonstrates how the `@typescript-eslint/no-unsafe-member-access` rule detects unsafe member access on `any` typed values. `JSON.parse` returns `any`, and accessing a property on `any` is allowed by the type checker, but can lead to runtime errors.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/website/blog/2024-09-30-typed-linting.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getDataKey(rawData: string, key: string): string {\n  return JSON.parse(rawData)[key];\n  //                        ~~~~~\n  // Unsafe member access [key] on an `any` value.\n  // eslint(@typescript-eslint/no-unsafe-member-access)\n}\n```\n\n----------------------------------------\n\nTITLE: Disallow 'types' triple-slash reference\nDESCRIPTION: This snippet demonstrates how to disallow the use of `/// <reference types=\"...\" />` and enforce using an `import` statement instead. The `types` option is set to `'never'` to trigger the rule.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/triple-slash-reference.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types=\"code\" />\n\nglobalThis.value;\n```\n\n----------------------------------------\n\nTITLE: Handling `catch` variable type with compiler option\nDESCRIPTION: This snippet illustrates how the `useUnknownInCatchVariables` compiler option affects the type of the `catch` variable in a `try-catch` block. When set to false, `err` is `any`; when true, it's `unknown`.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/use-unknown-in-catch-callback-variable.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntry {\n  throw x;\n} catch (err) {\n  // err has type 'any' with useUnknownInCatchVariables: false\n  // err has type 'unknown' with useUnknownInCatchVariables: true\n}\n```\n\n----------------------------------------\n\nTITLE: Function with Multiple Default Type Parameters\nDESCRIPTION: Illustrates a TypeScript function `g` with two default type parameters `T = number` and `U = string`. Passing the type arguments `<string, string>` is flagged because the second argument is redundant.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-unnecessary-type-arguments.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction g<T = number, U = string>() {}\ng<string, string>();\n```\n\n----------------------------------------\n\nTITLE: Defining ParseOptions Interface TypeScript\nDESCRIPTION: This code defines the `ParseOptions` interface, which specifies the configuration options available for the `parse` function. These options control various aspects of the parsing process, such as handling of JSDoc comments, JSX syntax, and inclusion of location and range information in the AST.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/packages/TypeScript_ESTree.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ParseOptions {\n  /**\n   * Specify the `sourceType`.\n   * For more details, see https://github.com/typescript-eslint/typescript-eslint/pull/9121\n   */\n  sourceType?: SourceType;\n\n  /**\n   * Prevents the parser from throwing an error if it receives an invalid AST from TypeScript.\n   * This case only usually occurs when attempting to lint invalid code.\n   */\n  allowInvalidAST?: boolean;\n\n  /**\n   * create a top-level comments array containing all comments\n   */\n  comment?: boolean;\n\n  /**\n   * Whether deprecated AST properties should skip calling console.warn on accesses.\n   */\n  suppressDeprecatedPropertyWarnings?: boolean;\n\n  /**\n   * An array of modules to turn explicit debugging on for.\n   * - 'typescript-eslint' is the same as setting the env var `DEBUG=typescript-eslint:*`\n   * - 'eslint' is the same as setting the env var `DEBUG=eslint:*`\n   * - 'typescript' is the same as setting `extendedDiagnostics: true` in your tsconfig compilerOptions\n   *\n   * For convenience, also supports a boolean:\n   * - true === ['typescript-eslint']\n   * - false === []\n   */\n  debugLevel?: boolean | ('typescript-eslint' | 'eslint' | 'typescript')[];\n\n  /**\n   * Cause the parser to error if it encounters an unknown AST node type (useful for testing).\n   * This case only usually occurs when TypeScript releases new features.\n   */\n  errorOnUnknownASTType?: boolean;\n\n  /**\n   * Absolute (or relative to `cwd`) path to the file being parsed.\n   */\n  filePath?: string;\n\n  /**\n   * If you are using TypeScript version >=5.3 then this option can be used as a performance optimization.\n   *\n   * The valid values for this rule are:\n   * - `'all'` - parse all JSDoc comments, always.\n   * - `'none'` - parse no JSDoc comments, ever.\n   * - `'type-info'` - parse just JSDoc comments that are required to provide correct type-info. TS will always parse JSDoc in non-TS files, but never in TS files.\n   *\n   * If you do not rely on JSDoc tags from the TypeScript AST, then you can safely set this to `'none'` to improve performance.\n   */\n  jsDocParsingMode?: JSDocParsingMode;\n\n  /**\n   * Enable parsing of JSX.\n   * For more details, see https://www.typescriptlang.org/docs/handbook/jsx.html\n   *\n   * NOTE: this setting does not effect known file types (.js, .cjs, .mjs, .jsx, .ts, .mts, .cts, .tsx, .json) because the\n   * TypeScript compiler has its own internal handling for known file extensions.\n   *\n   * For the exact behavior, see https://github.com/typescript-eslint/typescript-eslint/tree/main/packages/parser#parseroptionsecmafeaturesjsx\n   */\n  jsx?: boolean;\n\n  /**\n   * Controls whether the `loc` information to each node.\n   * The `loc` property is an object which contains the exact line/column the node starts/ends on.\n   * This is similar to the `range` property, except it is line/column relative.\n   */\n  loc?: boolean;\n\n  /*\n   * Allows overriding of function used for logging.\n   * When value is `false`, no logging will occur.\n   * When value is not provided, `console.log()` will be used.\n   */\n  loggerFn?: Function | false;\n\n  /**\n   * Controls whether the `range` property is included on AST nodes.\n   * The `range` property is a [number, number] which indicates the start/end index of the node in the file contents.\n   * This is similar to the `loc` property, except this is the absolute index.\n   */\n  range?: boolean;\n\n  /**\n   * Set to true to create a top-level array containing all tokens from the file.\n   */\n  tokens?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Allow Boolean in template literals\nDESCRIPTION: Demonstrates how to allow boolean types in template literals using the `allowBoolean` option.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/restrict-template-expressions.mdx#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst arg = true;\nconst msg1 = `arg = ${arg}`;\nconst msg2 = `arg = ${arg || 'not truthy'}`;\n```\n\n----------------------------------------\n\nTITLE: Fixing incorrect backwards-compat augmentation in TS 5.3\nDESCRIPTION: This resolves an issue related to backwards compatibility when using the typescript-estree parser with TypeScript 5.3. The fix ensures that augmentations are handled correctly, preventing unexpected errors during parsing.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/typescript-estree/CHANGELOG.md#_snippet_4\n\nLANGUAGE: Markdown\nCODE:\n```\n- **typescript-estree:** fix incorrect backwards-compat augmentation in TS 5.3\n```\n\n----------------------------------------\n\nTITLE: Incorrect Type Assertion Example (arrayLiteralTypeAssertions)\nDESCRIPTION: This code snippet demonstrates incorrect usage of type assertions for array literals when `arrayLiteralTypeAssertions` is set to `'never'`.  It uses the `as` keyword to assert the type of an array literal, which is disallowed by the rule.  The rule aims to encourage defining the type directly instead of using assertions.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/consistent-type-assertions.mdx#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst x = ['foo'] as T;\n\nfunction bar() {\n  return ['foo'] as T;\n}\n```\n\n----------------------------------------\n\nTITLE: Allow RegExp in template literals\nDESCRIPTION: Demonstrates how to allow `RegExp` objects in template literals using the `allowRegExp` option.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/restrict-template-expressions.mdx#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst arg = new RegExp('foo');\nconst msg1 = `arg = ${arg}`;\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst arg = /foo/;\nconst msg1 = `arg = ${arg}`;\n```\n\n----------------------------------------\n\nTITLE: Enable Project Service - Legacy Config - JavaScript\nDESCRIPTION: Example showing how to enable `projectService` in a legacy ESLint configuration file (`.eslintrc.js`).  This uses the same type information services as editors.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/packages/Parser.mdx#_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  parser: '@typescript-eslint/parser',\n  parserOptions: {\n    projectService: true,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Correct Void Expression Usage - TypeScript\nDESCRIPTION: This code snippet showcases correct usage of `void` expressions, such as calling `alert` as a statement, returning early after calling `console.error`, and using logical expressions for their side effects.  These patterns are considered acceptable because they don't lead to confusion about the return type or the intended behavior.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-confusing-void-expression.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// just a regular void function in a statement position\nalert('Hello, world!');\n\n// this function returns a boolean value so it's ok\nconst response = confirm('Are you sure?');\nconsole.log(confirm('Are you sure?'));\n\n// now it's obvious that `postMessage` doesn't return any response\npromise.then(value => {\n  window.postMessage(value);\n});\n\n// now it's explicit that we want to log the error and return early\nfunction doSomething() {\n  if (!somethingToDo) {\n    console.error('Nothing to do!');\n    return;\n  }\n\n  console.log('Doing a thing...');\n}\n\n// using logical expressions for their side effects is fine\ncond && console.log('true');\ncond || console.error('false');\ncond ? console.log('true') : console.error('false');\n```\n\n----------------------------------------\n\nTITLE: Extending with Strict Type Checked Config (Legacy)\nDESCRIPTION: This snippet shows how to extend the ESLint configuration using the `strict-type-checked` configuration using the Legacy Config style. It requires type information.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/users/Shared_Configurations.mdx#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  extends: ['plugin:@typescript-eslint/strict-type-checked'],\n};\n```\n\n----------------------------------------\n\nTITLE: Disallow Namespaces allowDefinitionFiles true - Incorrect - TypeScript\nDESCRIPTION: These examples demonstrate code that violates the `no-namespace` rule when `allowDefinitionFiles` is true, but outside of a `.d.ts` file. Using `module` and `namespace` are incorrect.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-namespace.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// if outside a d.ts file\nmodule foo {}\nnamespace foo {}\n\n// if outside a d.ts file and allowDeclarations = false\nmodule foo {}\nnamespace foo {}\ndeclare module foo {}\ndeclare namespace foo {}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Array Destructuring\nDESCRIPTION: Illustrates incorrect array destructuring without type annotations when the `arrayDestructuring` option is enabled. This snippet will cause an error because the type of `a`, `b`, and `c` are not explicitly defined.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/typedef.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst [a] = [1];\nconst [b, c] = [1, 2];\n```\n\n----------------------------------------\n\nTITLE: Defining Options Interface\nDESCRIPTION: Defines the interface for the options that can be passed to the no-redeclare rule. It extends BaseNoRedeclareOptions and adds an ignoreDeclarationMerge option. The default value for ignoreDeclarationMerge is set to true.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-redeclare.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Options extends BaseNoRedeclareOptions {\n  ignoreDeclarationMerge?: boolean;\n}\n\nconst defaultOptions: Options = {\n  ...baseNoRedeclareDefaultOptions,\n  ignoreDeclarationMerge: true,\n};\n```\n\n----------------------------------------\n\nTITLE: Ignoring override methods with class-methods-use-this (TypeScript)\nDESCRIPTION: This TypeScript example demonstrates the correct code when `ignoreOverrideMethods` is set to `true` in the ESLint rule's configuration. It shows an abstract base class with abstract methods and properties, and a derived class that overrides them. This configuration allows the derived class to not use `this` in its overridden methods and properties.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/class-methods-use-this.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nabstract class Base {\n  abstract method(): void;\n  abstract property: () => void;\n}\n\nclass Derived extends Base {\n  override method() {}\n  override property = () => {};\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Class with Decorator and Static Member - TypeScript\nDESCRIPTION: This code snippet demonstrates a correct case when the `allowWithDecorator` option is set to `true`.  The class `Constants` has a decorator `@logOnRead()`, thus exempting it from the rule even though it only contains static members.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-extraneous-class.mdx#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\n@logOnRead()\nclass Constants {\n  static readonly version = 42;\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling ESLint Rules in Flat Config (JavaScript)\nDESCRIPTION: Demonstrates how to enable and configure ESLint rules within a flat configuration file (`eslint.config.mjs`). The example shows how to turn on a rule with the default configuration and how to configure a rule with specific options.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/troubleshooting/faqs/General.mdx#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nexport default tseslint.config(\n  // ... the rest of your config ...\n  {\n    rules: {\n      // turns a rule on with no configuration (i.e. uses the default configuration)\n      '@typescript-eslint/array-type': 'error',\n      // turns on a rule with configuration\n      '@typescript-eslint/no-explicit-any': ['warn', { ignoreRestArgs: true }],\n    },\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Correct Mixed Logical Expressions with ignoreMixedLogicalExpressions: false in TypeScript\nDESCRIPTION: This code shows the correct replacement of logical OR operators with nullish coalescing operators in mixed logical expressions. This is the correct replacement for the 'incorrect' examples when the `ignoreMixedLogicalExpressions` option is set to `false`.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-nullish-coalescing.mdx#_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\ndeclare let a: string | null;\ndeclare const b: string | null;\ndeclare const c: string | null;\ndeclare const d: string | null;\n\na ?? (b && c);\na ??= b && c;\n(a && b) ?? c ?? d;\na ?? (b && c) ?? d;\na ?? (b && c && d);\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Optional Chain (TypeScript)\nDESCRIPTION: This code snippet showcases the correct usage of the optional chain operator (?.). The operator gracefully handles potential null or undefined values without requiring a non-null assertion.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-non-null-asserted-optional-chain.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nfoo?.bar;\nfoo?.bar();\n```\n\n----------------------------------------\n\nTITLE: Default Options in TypeScript\nDESCRIPTION: Defines the default values for the rule's options. It sets `countVoidThis` to `false`, meaning that by default, `this: void` parameters will not be counted towards the maximum number of parameters allowed.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/max-params.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst defaultOptions: Options = {\n  ...baseMaxParamsOptions,\n  countVoidThis: false,\n};\n```\n\n----------------------------------------\n\nTITLE: Ignoring Arrow Shorthand - TypeScript\nDESCRIPTION: This code snippet demonstrates how the `ignoreArrowShorthand` option allows void expressions in arrow function shorthand. When enabled, the rule doesn't flag void expressions used directly within arrow function bodies.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-confusing-void-expression.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\npromise.then(value => window.postMessage(value));\n```\n\n----------------------------------------\n\nTITLE: Correct Utility Functions - TypeScript\nDESCRIPTION: This snippet demonstrates the correct way to export utility functions directly from a module.  Each function is exported individually. The functions call each other directly.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-extraneous-class.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport function util1() {\n  return util3();\n}\n\nexport function util2() {\n  /* ... */\n}\n\nexport function util3() {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Correct enum with string members in TypeScript\nDESCRIPTION: This TypeScript code snippet shows an example of a correct enum declaration where all members are assigned string values. The 'Status' enum has 'Unknown' assigned to 'unknown', 'Closed' assigned to 'closed', and 'Open' assigned to 'open'. All members having string types is allowed by the rule.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-mixed-enums.mdx#_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nenum Status {\n  Unknown = 'unknown',\n  Closed = 'closed',\n  Open = 'open',\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect String#match usage in TypeScript\nDESCRIPTION: This snippet showcases incorrect usage of String#match where RegExp#exec should be preferred. It includes examples with string literals and variables.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-regexp-exec.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n'something'.match(/thing/);\n\n'some things are just things'.match(/thing/);\n\nconst text = 'something';\nconst search = /thing/;\ntext.match(search);\n```\n\n----------------------------------------\n\nTITLE: Unsafe function call with unknown type in TypeScript\nDESCRIPTION: Demonstrates an unsafe function call where a function is called on a value with an `unknown` type, which is conditionally checked to be a function using `typeof`. This is considered unsafe as TypeScript allows it, but the actual type of arguments is not guaranteed.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-unsafe-call.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfunction callUnsafe(maybeFunction: unknown): string {\n  if (typeof maybeFunction === 'function') {\n    // TypeScript allows this, but it's completely unsound.\n    return maybeFunction('call', 'with', 'any', 'args');\n  }\n  // etc\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Case-Insensitive Alphabetical Order (Typescript)\nDESCRIPTION: This TypeScript code demonstrates the correct case-insensitive alphabetical ordering of interface members.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/member-ordering.mdx#_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Foo {\n  a: x;\n  B: x;\n  c: x;\n\n  a(): void;\n  B(): void;\n  c(): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Addition with allowBoolean: true\nDESCRIPTION: This snippet shows examples of incorrect addition operations when the `allowBoolean` option is enabled. Adding to an `unknown` type is not allowed.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/restrict-plus-operands.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nlet fn = (a: number, b: unknown) => a + b;\nlet fn = (a: string, b: unknown) => a + b;\n```\n\n----------------------------------------\n\nTITLE: Correct Thenable Handling (checkThenables)\nDESCRIPTION: This code demonstrates the correct way to handle Thenable objects using `await` when the `checkThenables` option is enabled. This ensures that PromiseLike and custom Thenable types are properly handled and avoids the `no-floating-promises` error.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-floating-promises.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function createPromiseLike(): PromiseLike<string>;\n\nawait createPromiseLike();\n\ninterface MyThenable {\n  then(onFulfilled: () => void, onRejected: () => void): MyThenable;\n}\n\ndeclare function createMyThenable(): MyThenable;\n\nawait createMyThenable();\n```\n\n----------------------------------------\n\nTITLE: parseAndGenerateServices Usage Example - JavaScript\nDESCRIPTION: Illustrates how to use the `parseAndGenerateServices` function in JavaScript. It imports the function, defines a TypeScript code string, and calls `parseAndGenerateServices` with specified options, including file path, location information, project path, and range information.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/packages/TypeScript_ESTree.mdx#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { parseAndGenerateServices } from '@typescript-eslint/typescript-estree';\n\nconst code = `const hello: string = 'world';`;\nconst { ast, services } = parseAndGenerateServices(code, {\n  filePath: '/some/path/to/file/foo.ts',\n  loc: true,\n  project: './tsconfig.json',\n  range: true,\n});\n\n```\n\n----------------------------------------\n\nTITLE: Sorting numbers incorrectly - TypeScript\nDESCRIPTION: Demonstrates the incorrect sorting of numbers when Array.sort() is called without a compare function in TypeScript. This results in alphabetical sorting, leading to unexpected order.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/require-array-sort-compare.mdx#_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\n[1, 2, 3, 10, 20, 30].sort(); //→ [1, 10, 2, 20, 3, 30]\n```\n\n----------------------------------------\n\nTITLE: Correct TypeScript Directive Usage With Description\nDESCRIPTION: This snippet illustrates the correct usage of the `@ts-expect-error` directive with the `allow-with-description` option enabled. A description following the directive prevents the rule from flagging the usage.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/ban-ts-comment.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nif (false) {\n  // @ts-expect-error: Unreachable code error\n  console.log('hello');\n}\nif (false) {\n  /* @ts-expect-error: Unreachable code error */\n  console.log('hello');\n}\n```\n\n----------------------------------------\n\nTITLE: Extending recommended-type-checked-only with Legacy Config\nDESCRIPTION: This code snippet demonstrates how to extend the `recommended-type-checked-only` configuration using the legacy `.eslintrc.js` format.  It configures ESLint to only use type-checked rules from typescript-eslint's recommended set, disabling any corresponding core ESLint rules.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/users/Shared_Configurations.mdx#_snippet_21\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  extends: ['plugin:@typescript-eslint/recommended-type-checked-only'],\n};\n```\n\n----------------------------------------\n\nTITLE: Correct Interface Extension - TypeScript\nDESCRIPTION: This demonstrates a scenario where an interface extends another interface and adds a call signature. Because inheritance and combining with other properties is involved the rule shouldn't flag this case.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-function-type.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Foo {\n  bar: string;\n}\ninterface Bar extends Foo {\n  (): void;\n}\n```\n\n----------------------------------------\n\nTITLE: ESLint Configuration for Consistent Type Usage\nDESCRIPTION: Presents an example ESLint configuration to enable the `@typescript-eslint/consistent-type-exports` and `@typescript-eslint/consistent-type-imports` rules. These rules enforce consistent usage of type exports and imports, respectively.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/website/blog/2023-02-24-consistent-type-exports-and-imports-why-and-how.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\"@typescript-eslint\"],\n  \"rules\": {\n    \"@typescript-eslint/consistent-type-exports\": \"error\",\n    \"@typescript-eslint/consistent-type-imports\": \"error\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Object Type with Call Signature - TypeScript\nDESCRIPTION: This snippet demonstrates an incorrect usage of an object type with a call signature within a function parameter. The rule suggests using a function type alias instead of an inline object type. This is flagged by the `prefer-function-type` rule.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-function-type.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction foo(example: { (): number }): number {\n  return example();\n}\n```\n\n----------------------------------------\n\nTITLE: Updating parser's getLib for TypeScript versions\nDESCRIPTION: This snippet describes the process of updating the `getLib` function in the parser to handle new TypeScript versions. It involves modifying the `switch (target)` statement and its preceding comment to accommodate the new version.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/maintenance/pull-requests/Dependency_Version_Upgrades.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nIn the parser's `getLib`, update the `switch (target)` and its preceding comment as needed (see [#6782](https://github.com/typescript-eslint/typescript-eslint/pull/6782))\n```\n\n----------------------------------------\n\nTITLE: Allow Array constructor (correct)\nDESCRIPTION: This snippet demonstrates the correct way to use the Array constructor in TypeScript, either with explicit type annotations or when specifying the array length.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-array-constructor.mdx#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nArray<number>(0, 1, 2);\nnew Array<Foo>(x, y, z);\n\nArray(500);\nnew Array(someOtherArray.length);\n```\n\n----------------------------------------\n\nTITLE: Incorrect Code with hoist: types\nDESCRIPTION: Demonstrates incorrect code when the `hoist` option is set to `types`.  It shows a scenario where a type alias `Foo` is shadowed by another type alias with the same name. This configuration flags shadowing within type declarations.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-shadow.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype Bar<Foo> = 1;\ntype Foo = 1;\n```\n\n----------------------------------------\n\nTITLE: Analyzing AST with TypeScript scope-manager\nDESCRIPTION: This code demonstrates how to use the `analyze` function from `@typescript-eslint/scope-manager` to analyze an AST generated from TypeScript code.  It parses a TypeScript code string into an AST using `@typescript-eslint/typescript-estree`, then analyzes the AST to build a scope manager. The `range` option is required when parsing the AST. The `sourceType` is specified for the analysis.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/packages/Scope_Manager.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { analyze } from '@typescript-eslint/scope-manager';\nimport { parse } from '@typescript-eslint/typescript-estree';\n\nconst code = `const hello: string = 'world';`;\nconst ast = parse(code, {\n  // note that scope-manager requires ranges on the AST\n  range: true,\n});\nconst scope = analyze(ast, {\n  sourceType: 'module',\n});\n```\n\n----------------------------------------\n\nTITLE: Correct TypeScript Directive Usage With Valid Description Format\nDESCRIPTION: This snippet shows correct usage of the `@ts-expect-error` directive with a description that matches the specified regular expression format. The rule permits this usage because the description adheres to the pattern.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/ban-ts-comment.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// @ts-expect-error: TS1234 because the library definition is wrong\nconst a = doSomething('hello');\n```\n\n----------------------------------------\n\nTITLE: Incorrect Allow Option Usage (TypeScript)\nDESCRIPTION: Demonstrates incorrect usage of the `allow` option. Shows examples where the allowed type is not a local type, not from the default library, or not from the specified package.  Illustrates cases where the rule still flags non-readonly parameters due to misconfiguration.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-readonly-parameter-types.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ThisIsMutable {\n  prop: string;\n}\n\ninterface Wrapper {\n  sub: ThisIsMutable;\n}\n\ninterface WrapperWithOther {\n  readonly sub: Foo;\n  otherProp: string;\n}\n\n// Incorrect because ThisIsMutable is not readonly\nfunction fn1(arg: ThisIsMutable) {}\n\n// Incorrect because Wrapper.sub is not readonly\nfunction fn2(arg: Wrapper) {}\n\n// Incorrect because WrapperWithOther.otherProp is not readonly and not in the allowlist\nfunction fn3(arg: WrapperWithOther) {}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Foo } from 'some-lib';\nimport { Bar } from 'incorrect-lib';\n\ninterface HTMLElement {\n  prop: string;\n}\n\n// Incorrect because Foo is not a local type\nfunction fn1(arg: Foo) {}\n\n// Incorrect because HTMLElement is not from the default library\nfunction fn2(arg: HTMLElement) {}\n\n// Incorrect because Bar is not from \"bar-lib\"\nfunction fn3(arg: Bar) {}\n```\n\n----------------------------------------\n\nTITLE: Updating parserOptions for automaticSingleRunInference - JavaScript\nDESCRIPTION: This snippet shows how to update the `parserOptions` in your ESLint configuration file when migrating to typescript-eslint v8. The `automaticSingleRunInference` option is now an opt-out feature, so you should remove the line that enables it. This example is related to changes in tooling behavior.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/website/blog/2024-07-31-announcing-typescript-eslint-v8.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nparserOptions: {\n  // Remove this line\n  automaticSingleRunInference: true,\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Record Type with 'record' Option - TypeScript\nDESCRIPTION: This code snippet demonstrates the correct usage of the `Record` type when the 'record' option is enabled.  It defines a type using `Record<string, unknown>` which is compliant with the rule.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/consistent-indexed-object-style.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype RecordType = Record<string, unknown>;\n```\n\n----------------------------------------\n\nTITLE: Support 'latest' ecmaVersion: Typescript\nDESCRIPTION: This feature adds support for using `'latest'` as the `ecmaVersion` in the parser options. This simplifies configuration by allowing users to always use the latest ECMAScript version supported by the parser. The commit associated with this change is 25a42c0bbe92d1ecbc2e8ff9ef3a3ef413f728b0.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/parser/CHANGELOG.md#_snippet_9\n\n\n\n----------------------------------------\n\nTITLE: Correct void usage in type definitions - TypeScript\nDESCRIPTION: This snippet demonstrates correct usage of the `void` type in TypeScript. It shows examples where `void` is used as a function return type, in a type alias for a function that returns `void`, when assigning `void 0` and as the return type of an async Promise. The rule considers these uses to be valid.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-invalid-void-type.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype NoOp = () => void;\n\nfunction noop(): void {}\n\nlet trulyUndefined = void 0;\n\nasync function promiseMeSomething(): Promise<void> {}\n\ntype stillVoid = void | never;\n```\n\n----------------------------------------\n\nTITLE: Correct Variable Declaration (Ignore Function)\nDESCRIPTION: Illustrates correct variable declaration when the `variableDeclaration` option is enabled and `variableDeclarationIgnoreFunction` is true. It shows that functions don't require explicit type annotations.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/typedef.mdx#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nconst a = (): void => {};\nconst b = function (): void {};\nconst c: () => void = (): void => {};\n\nclass Foo {\n  a = (): void => {};\n  b = function (): void {};\n  c: () => void = (): void => {};\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Return Type Examples\nDESCRIPTION: Demonstrates examples of TypeScript code that violate the `explicit-function-return-type` rule.  These examples show functions and methods without explicit return type annotations, which the rule flags as incorrect. The code includes examples for functions, arrow functions and class methods.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/explicit-function-return-type.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Should indicate that no value is returned (void)\nfunction test() {\n  return;\n}\n\n// Should indicate that a number is returned\nvar fn = function () {\n  return 1;\n};\n\n// Should indicate that a string is returned\nvar arrowFn = () => 'test';\n\nclass Test {\n  // Should indicate that no value is returned (void)\n  method() {\n    return;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Empty Export Example (typescript)\nDESCRIPTION: This example demonstrates an incorrect usage of an empty export. The `export {}` statement is redundant because the file already contains another export (`export const value`).  It is unnecessary as the file is already considered a module.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-useless-empty-export.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const value = 'Hello, world!';\nexport {};\n```\n\n----------------------------------------\n\nTITLE: Configuring Parser in RuleTester\nDESCRIPTION: This code snippet illustrates how to configure the parser in the `RuleTester` by providing the parser itself, rather than a string name. It shows the correct way to import and assign a parser like `jsonc-eslint-parser` within the `languageOptions` property for typescript-eslint v8 and later.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/website/blog/2024-07-31-announcing-typescript-eslint-v8.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RuleTester } from '@typescript-eslint/rule-tester'\n// Add this line\nimport jsoncParser from \"jsonc-eslint-parser\";\n\nconst ruleTester = new RuleTester({\n  // Add this line\n  languageOptions: {\n    // Add this line\n    parser: jsoncParser,\n    // Remove this line\n    parser: \"jsonc-eslint-parser\",\n  // Add this line\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Project Configuration with Array of Paths - JavaScript\nDESCRIPTION: Example of configuring the `project` option with an array of paths and/or glob patterns.  This allows you to specify several tsconfig files to the parser.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/packages/Parser.mdx#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nproject: ['./packages/**/tsconfig.json', './separate-package/tsconfig.json'];\n```\n\n----------------------------------------\n\nTITLE: Disallow deprecated code usage - Incorrect\nDESCRIPTION: This example demonstrates incorrect usage of a deprecated function `apiV1`. The code calls `apiV1` which is marked with the `@deprecated` JSDoc tag, violating the rule.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-deprecated.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/** @deprecated Use apiV2 instead. */\ndeclare function apiV1(): Promise<string>;\n\ndeclare function apiV2(): Promise<string>;\n\nawait apiV1();\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Empty Types with Specific Names - TypeScript\nDESCRIPTION: This code snippet demonstrates the correct usage of empty types when the `allowWithName` option is set. If a type's name matches the configured name (e.g., 'Props$'), the rule will not flag it as an error. This highlights the exception mechanism for allowed names.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-empty-object-type.mdx#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface InterfaceProps {}\n\ntype TypeProps = {};\n```\n\n----------------------------------------\n\nTITLE: Incorrect Object Destructuring\nDESCRIPTION: Illustrates incorrect object destructuring without type annotations when the `objectDestructuring` option is enabled. The `length`, `b`, and `c` variables lack explicit type definitions.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/typedef.mdx#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst { length } = 'text';\nconst [b, c] = Math.random() ? [1, 2] : [3, 4];\n```\n\n----------------------------------------\n\nTITLE: Incorrect Unused Expressions\nDESCRIPTION: Examples of incorrect code that violates the 'no-unused-expressions' rule. These include unused instantiation expressions and assertion expressions. The rule flags these because they have no side effects and serve no purpose at runtime.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-unused-expressions.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nSet<number>;\n1 as number;\nwindow!;\n```\n\n----------------------------------------\n\nTITLE: Incorrect Code: allowLiterals - In Unions - TypeScript\nDESCRIPTION: Examples of incorrect code when `allowLiterals` is set to `in-unions`.  Demonstrates how object literals are not allowed as type aliases unless they are part of unions.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-type-alias.mdx#_snippet_15\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype Foo = {};\n\ntype Foo = {\n  name: string;\n  age: number;\n};\n\ntype Foo = {\n  name: string;\n  age: number;\n  walk: (miles: number) => void;\n};\n\ntype Foo = { name: string } & { age: number };\n```\n\n----------------------------------------\n\nTITLE: Correct enum with explicit number members in TypeScript\nDESCRIPTION: This TypeScript code snippet shows an example of a correct enum declaration where all members are explicitly assigned number values. The 'Status' enum has 'Unknown' assigned to 0, 'Closed' assigned to 1, and 'Open' assigned to 2. This explicit assignment ensures that all members have the same type, avoiding potential issues.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-mixed-enums.mdx#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nenum Status {\n  Unknown = 0,\n  Closed = 1,\n  Open = 2,\n}\n```\n\n----------------------------------------\n\nTITLE: Allowing specific require() imports with 'allow' option - Incorrect\nDESCRIPTION: Illustrates the incorrect usage of `require()` when the `allow` option is used to permit specific imports. Here, `require()` is used for a file that is not allowed based on the provided option.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-require-imports.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconsole.log(require('../data.json').version);\n```\n\n----------------------------------------\n\nTITLE: Iteration over enum with mixed members in TypeScript\nDESCRIPTION: This TypeScript code snippet illustrates iterating over an enum that contains both number and string members using `Object.values()`. The resulting array includes both the string values and the numeric values (including implicitly assigned numbers) of the enum members, which is a potential pitfall.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-mixed-enums.mdx#_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nenum Status {\n  Unknown,\n  Closed = 1,\n  Open = 'open',\n}\n\n// [\"Unknown\", \"Closed\", 0, 1, \"open\"]\nObject.values(Status);\n```\n\n----------------------------------------\n\nTITLE: Banning Specific Class Property Uses (JSON)\nDESCRIPTION: Configures the `no-restricted-syntax` rule to ban private members, #private members, and static `this` in classes.  It uses AST selectors to target specific code constructs and provides a custom error message for each restriction.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/troubleshooting/faqs/General.mdx#_snippet_4\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"rules\": {\n    \"no-restricted-syntax\": [\n      \"error\",\n\n      // Ban `private` members:\n      {\n        \"selector\": \":matches(PropertyDefinition, MethodDefinition)[accessibility=\\\"private\\\"]\",\n        \"message\": \"Use `#private` members instead.\",\n      },\n\n      // Ban `#private` members:\n      {\n        \"selector\": \":matches(PropertyDefinition, MethodDefinition) > PrivateIdentifier.key\",\n        \"message\": \"Use the `private` modifier instead.\",\n      },\n\n      // Ban static `this`:\n      {\n        \"selector\": \"MethodDefinition[static = true] ThisExpression\",\n        \"message\": \"Prefer using the class's name directly.\",\n      },\n    ],\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Assertion Type TypeScript\nDESCRIPTION: This example shows how type parameters are used to assert types.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-unnecessary-type-parameters.mdx#_snippet_11\n\nLANGUAGE: ts\nCODE:\n```\nfunction assertType<T>(arg: T) {}\n\nassertType<number>(123);\nassertType<number>('abc');\n//                 ~~~~~\n// Argument of type 'string' is not assignable to parameter of type 'number'.\n```\n\n----------------------------------------\n\nTITLE: Correct Type Alias Usage with 'type' Option\nDESCRIPTION: This snippet demonstrates correct usage when the `consistent-type-definitions` rule is set to `'type'`. It shows a `type` alias being used to define an object shape, which adheres to the rule.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/consistent-type-definitions.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntype T = { x: number };\n```\n\n----------------------------------------\n\nTITLE: TypeScript Naming Convention Options Type Definition\nDESCRIPTION: Defines the TypeScript type `Options` for configuring the naming convention rule. It includes properties for format, custom regex, leading/trailing underscores, prefix/suffix, selector, filter, modifiers, and types, allowing detailed configuration of naming rules.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/naming-convention.mdx#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\ntype Options = {\n  // format options\n  format:\n    | (\n        | 'camelCase'\n        | 'strictCamelCase'\n        | 'PascalCase'\n        | 'StrictPascalCase'\n        | 'snake_case'\n        | 'UPPER_CASE'\n      )[]\n    | null;\n  custom?: {\n    regex: string;\n    match: boolean;\n  };\n  leadingUnderscore?: \n    | 'forbid'\n    | 'require'\n    | 'requireDouble'\n    | 'allow'\n    | 'allowDouble'\n    | 'allowSingleOrDouble';\n  trailingUnderscore?:\n    | 'forbid'\n    | 'require'\n    | 'requireDouble'\n    | 'allow'\n    | 'allowDouble'\n    | 'allowSingleOrDouble';\n  prefix?: string[];\n  suffix?: string[];\n\n  // selector options\n  selector: Selector | Selector[];\n  filter?:\n    | string\n    | {\n        regex: string;\n        match: boolean;\n      };\n  // the allowed values for these are dependent on the selector - see below\n  modifiers?: Modifiers<Selector>[];\n  types?: Types<Selector>[];\n}[];\n```\n\n----------------------------------------\n\nTITLE: Correct Standalone Imports - TypeScript\nDESCRIPTION: This snippet showcases the recommended approach of importing and using individual functions directly from a module.  This avoids the need for a namespace object.  The sayHello function is defined in utilities.ts and imported in consumers.ts\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-extraneous-class.mdx#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// utilities.ts\nexport function sayHello() {\n  console.log('Hello, world!');\n}\n\n// consumers.ts\nimport { sayHello } from './utilities';\n\nsayHello();\n```\n\n----------------------------------------\n\nTITLE: Incorrect Class with Static Member (allowWithDecorator) - TypeScript\nDESCRIPTION: This code snippet shows an incorrect case when the `allowWithDecorator` option is set to `true`.  The class `Constants` has a static member but no decorator, therefore the rule triggers.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-extraneous-class.mdx#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nclass Constants {\n  static readonly version = 42;\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Addition: Different Types\nDESCRIPTION: This snippet shows examples of incorrect addition operations where the operands have different types. The rule flags these cases to prevent potential type coercion issues.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/restrict-plus-operands.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nlet foo = 1n + 1;\nlet fn = (a: string, b: never) => a + b;\n```\n\n----------------------------------------\n\nTITLE: Incorrect Interface with Call Signature - TypeScript\nDESCRIPTION: This snippet demonstrates an incorrect usage of an interface with a call signature. The rule suggests using a function type alias instead. This is flagged by the `prefer-function-type` rule.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-function-type.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Example {\n  (): string;\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Nullable Boolean Usage (allowComparingNullableBooleansToFalse: false)\nDESCRIPTION: This code snippet showcases correct usage of nullable boolean variables when `allowComparingNullableBooleansToFalse` is set to `false`. It demonstrates using the nullish coalescing operator to handle the cases where the variable is null or undefined.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-unnecessary-boolean-literal-compare.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare const someUndefinedCondition: boolean | undefined;\nif (!(someUndefinedCondition ?? true)) {\n}\n\ndeclare const someNullCondition: boolean | null;\nif (someNullCondition ?? true) {\n}\n```\n\n----------------------------------------\n\nTITLE: Parse and Generate Services Options Interface - TypeScript\nDESCRIPTION: Defines the interface `ParseAndGenerateServicesOptions` for configuring the `parseAndGenerateServices` function. It includes options for cache lifetime, single-run inference, error handling, file extensions, file path, node map preservation, project configuration, and project service settings.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/packages/TypeScript_ESTree.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ParseAndGenerateServicesOptions extends ParseOptions {\n  /**\n   * Granular control of the expiry lifetime of our internal caches.\n   * You can specify the number of seconds as an integer number, or the string\n   * 'Infinity' if you never want the cache to expire.\n   *\n   * By default cache entries will be evicted after 30 seconds, or will persist\n   * indefinitely if `disallowAutomaticSingleRunInference = false` AND the parser\n   * infers that it is a single run.\n   */\n  cacheLifetime?: {\n    /**\n     * Glob resolution for `parserOptions.project` values.\n     */\n    glob?: number | 'Infinity';\n  };\n\n  /**\n   * ESLint (and therefore typescript-eslint) is used in both \"single run\"/one-time contexts,\n   * such as an ESLint CLI invocation, and long-running sessions (such as continuous feedback\n   * on a file in an IDE).\n   *\n   * When typescript-eslint handles TypeScript Program management behind the scenes, this distinction\n   * is important because there is significant overhead to managing the so called Watch Programs\n   * needed for the long-running use-case.\n   *\n   * By default, we will use common heuristics to infer whether ESLint is being\n   * used as part of a single run. This option disables those heuristics, and\n   * therefore the performance optimizations gained by them.\n   *\n   * In other words, typescript-eslint is faster by default, and this option\n   * disables an automatic performance optimization.\n   *\n   * This setting's default value can be specified by setting a `TSESTREE_SINGLE_RUN`\n   * environment variable to `\"false\"` or `\"true\"`.\n   * Otherwise, the default value is `false`.\n   */\n  disallowAutomaticSingleRunInference?: boolean;\n\n  /**\n   * Causes the parser to error if the TypeScript compiler returns any unexpected syntax/semantic errors.\n   */\n  errorOnTypeScriptSyntacticAndSemanticIssues?: boolean;\n\n  /**\n   * When `project` is provided, this controls the non-standard file extensions which will be parsed.\n   * It accepts an array of file extensions, each preceded by a `.`.n   *\n   * NOTE: When used with {@link projectService}, full project reloads may occur.\n   */\n  extraFileExtensions?: string[];\n\n  /**\n   * Absolute (or relative to `tsconfigRootDir`) path to the file being parsed.\n   * When `project` is provided, this is required, as it is used to fetch the file from the TypeScript compiler's cache.\n   */\n  filePath?: string;\n\n  /**\n   * Allows the user to control whether or not two-way AST node maps are preserved\n   * during the AST conversion process.\n   *\n   * By default: the AST node maps are NOT preserved, unless `project` has been specified,\n   * in which case the maps are made available on the returned `parserServices`.\n   *\n   * NOTE: If `preserveNodeMaps` is explicitly set by the user, it will be respected,\n   * regardless of whether or not `project` is in use.\n   */\n  preserveNodeMaps?: boolean;\n\n  /**\n   * Absolute (or relative to `tsconfigRootDir`) paths to the tsconfig(s),\n   * or `true` to find the nearest tsconfig.json to the file.\n   * If this is provided, type information will be returned.\n   *\n   * If set to `false`, `null`, or `undefined`, type information will not be returned.\n   *\n   * Note that {@link projectService} is now preferred.\n   */\n  project?: string[] | string | boolean | null;\n\n  /**\n   * If you provide a glob (or globs) to the project option, you can use this option to ignore certain folders from\n   * being matched by the globs.\n   * This accepts an array of globs to ignore.\n   *\n   * By default, this is set to [\"/node_modules/\"]\n   */\n  projectFolderIgnoreList?: string[];\n\n  /**\n   * Whether to create a shared TypeScript project service to power program creation.\n   */\n  projectService?: boolean | ProjectServiceOptions;\n\n  /**\n   * The absolute path to the root directory for all provided `project`s.\n   */\n  tsconfigRootDir?: string;\n\n  /**\n   * An array of one or more instances of TypeScript Program objects to be used for type information.\n   * This overrides any program or programs that would have been computed from the `project` option.\n   * All linted files must be part of the provided program(s).\n   */\n  programs?: Program[];\n}\n\n```\n\n----------------------------------------\n\nTITLE: Correct code with explicit property when properties override is explicit (TypeScript)\nDESCRIPTION: Shows correct TypeScript code where a property 'legs' has an explicit access modifier when the 'properties' override is set to 'explicit' and `accessibility` is set to `no-public`\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/explicit-member-accessibility.mdx#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nclass Animal {\n  constructor(protected animalName) {}\n  get name() {\n    return this.animalName;\n  }\n  protected set name(value: string) {\n    this.animalName = value;\n  }\n  public legs: number;\n  private hasFleas: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Primitive Types with ignorePrimitives: { string: false } in TypeScript\nDESCRIPTION: This code shows incorrect usage of the logical OR operator with string | undefined types that should be replaced with the nullish coalescing operator. This is flagged when `ignorePrimitives` is set to `{ string: false }`.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-nullish-coalescing.mdx#_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\ndeclare const foo: string | undefined;\n\nfoo || 'a string';\n```\n\n----------------------------------------\n\nTITLE: Incorrect Direct Const Assertion in Arrow Functions - TypeScript\nDESCRIPTION: Examples of incorrect code that violates the rule when `allowDirectConstAssertionInArrowFunctions` is `false`. Arrow functions returning objects without explicit `as const` assertions will trigger an error.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/explicit-module-boundary-types.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport const func = (value: number) => ({ type: 'X', value });\nexport const foo = () => ({\n  bar: true,\n});\nexport const bar = () => 1;\n```\n\n----------------------------------------\n\nTITLE: tsconfig.eslint.json Example - JSON with comments\nDESCRIPTION: Example of creating a `tsconfig.eslint.json` file to include files you want to lint. This is useful when your main `tsconfig.json` doesn't include all the files you want to lint.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/packages/Parser.mdx#_snippet_6\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  // extend your base config so you don't have to redefine your compilerOptions\n  \"extends\": \"./tsconfig.json\",\n  \"include\": [\n    \"src/**/*.ts\",\n    \"test/**/*.ts\",\n    \"typings/**/*.ts\",\n    // etc\n\n    // if you have a mixed JS/TS codebase, don't forget to include your JS files\n    \"src/**/*.js\",\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Valid Interface Declarations - TypeScript\nDESCRIPTION: This code snippet showcases examples of correct interface declarations in TypeScript according to the rule. It demonstrates interfaces with members and an interface that extends multiple interfaces.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-empty-interface.mdx#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n// an interface with any number of members\ninterface Foo {\n  name: string;\n}\n\n// same as above\ninterface Bar {\n  age: number;\n}\n\n// an interface with more than one supertype\n// in this case the interface can be used as a replacement of an intersection type.\ninterface Baz extends Foo, Bar {}\n```\n\n----------------------------------------\n\nTITLE: Configure Required Members First (JSONC)\nDESCRIPTION: This configuration places required members at the beginning of their respective groups and sorts alphabetically.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/member-ordering.mdx#_snippet_48\n\nLANGUAGE: jsonc\nCODE:\n```\n// .eslintrc.json\n{\n  \"rules\": {\n    \"@typescript-eslint/member-ordering\": [\n      \"error\",\n      {\n        \"default\": {\n          \"optionalityOrder\": \"required-first\",\n          \"order\": \"alphabetically\",\n        },\n      },\n    ],\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Class Usage with Default Type Parameter\nDESCRIPTION: Illustrates the correct ways to instantiate a class with a default type parameter. Either omit the type parameter to use the default, or provide a different type.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-unnecessary-type-arguments.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nclass C<T = number> {}\nnew C();\nnew C<string>();\n```\n\n----------------------------------------\n\nTITLE: Incorrect Class Declaration Member Ordering\nDESCRIPTION: This TypeScript code snippet demonstrates an incorrect member order in a class declaration, violating the enforced rule of methods, then constructor, then fields.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/member-ordering.mdx#_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nclass Foo {\n  private C: string; // -> field\n  public D: string; // -> field\n  protected static E: string; // -> field\n\n  constructor() {} // -> constructor\n\n  public static A(): void {} // -> method\n  public B(): void {} // -> method\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Interface Implementation with Default Type Parameter\nDESCRIPTION: Demonstrates correct implementation of an interface with a default type parameter by providing a different type.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-unnecessary-type-arguments.mdx#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ninterface I<T = number> {}\nclass Impl implements I<string> {}\n```\n\n----------------------------------------\n\nTITLE: Ignoring TypeScript errors with @ts-expect-error and description\nDESCRIPTION: This snippet demonstrates how to use the `@ts-expect-error` directive with a descriptive comment to suppress TypeScript errors on a specific line. It imports a `processString` function and includes a comment explaining why the error is being suppressed.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/website/blog/2025-01-21-avoiding-anys.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { processString } from '@example/package';\n\n// @ts-expect-error -- Pending updating the processString types. See GH-1234.\nprocessString('New York City');\n```\n\n----------------------------------------\n\nTITLE: Valid void as generic type argument - TypeScript\nDESCRIPTION: This snippet shows examples where `void` is used as a generic type argument in allowed types. The type `Ex.Mx.Tx<void>` and the union type `void | Ex.Mx.Tx<void>` are allowed when `allowInGenericTypeArguments` is set to `['Ex.Mx.Tx']`.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-invalid-void-type.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntype AllowedVoid = Ex.Mx.Tx<void>;\ntype AllowedVoidUnion = void | Ex.Mx.Tx<void>;\n```\n\n----------------------------------------\n\nTITLE: createProgram Utility - TypeScript\nDESCRIPTION: TypeScript declaration for the `createProgram` utility function provided by `@typescript-eslint/parser` for programmatically creating TypeScript program instances from a config file.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/packages/Parser.mdx#_snippet_11\n\nLANGUAGE: ts\nCODE:\n```\ndeclare function createProgram(\n  configFile: string,\n  projectDirectory?: string,\n): import('typescript').Program;\n```\n\n----------------------------------------\n\nTITLE: Declaring Parse Function TypeScript\nDESCRIPTION: This code declares the `parse` function, which is the main entry point for parsing TypeScript code. It takes a string of code and an optional `ParseOptions` object as input and returns a TypeScript ESTree (TSESTree) Program AST. It relies on the TSESTree types, making it a core component for TypeScript AST parsing.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/packages/TypeScript_ESTree.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function parse(\n  code: string,\n  options: ParseOptions = PARSE_DEFAULT_OPTIONS,\n): TSESTree.Program;\n```\n\n----------------------------------------\n\nTITLE: Incorrect 'as const' Assertion with checkLiteralConstAssertions\nDESCRIPTION: With the `checkLiteralConstAssertions` option enabled, this code demonstrates an incorrect usage of the `as const` assertion. Because `foo` is already a string, TypeScript does not need to assert that it is a constant.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-unnecessary-type-assertion.mdx#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst foo = 'foo' as const;\n```\n\n----------------------------------------\n\nTITLE: Options Interface Definition\nDESCRIPTION: Defines the interface for the options of the `no-shadow` rule. It extends `BaseNoShadowOptions` and includes properties for `hoist`, `ignoreTypeValueShadow`, and `ignoreFunctionTypeParameterNameValueShadow`.  This allows configuration of the rule's behavior regarding hoisting and shadowing of types and function parameters.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-shadow.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype AdditionalHoistOptionEntries = 'types' | 'functions-and-types';\n\ntype HoistOptionEntries =\n  | BaseNoShadowHoistOptionEntries\n  | AdditionalHoistOptionEntries;\n\ninterface Options extends BaseNoShadowOptions {\n  hoist?: HoistOptionEntries;\n  ignoreTypeValueShadow?: boolean;\n  ignoreFunctionTypeParameterNameValueShadow?: boolean;\n}\n\nconst defaultOptions: Options = {\n  ...baseNoShadowDefaultOptions,\n  hoist: 'functions-and-types',\n  ignoreTypeValueShadow: true,\n  ignoreFunctionTypeParameterNameValueShadow: true,\n};\n```\n\n----------------------------------------\n\nTITLE: parseAndGenerateServices Function Declaration - TypeScript\nDESCRIPTION: Declares the `parseAndGenerateServices` function, which parses a string of code and generates an ESTree-compatible AST. It accepts code and optional parsing options and returns a `ParseAndGenerateServicesResult` containing the AST and parser services.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/packages/TypeScript_ESTree.mdx#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function parseAndGenerateServices(\n  code: string,\n  options: ParseOptions = PARSE_DEFAULT_OPTIONS,\n): ParseAndGenerateServicesResult;\n\n```\n\n----------------------------------------\n\nTITLE: Incorrect Non-Nullable Type Assertion - TypeScript\nDESCRIPTION: This snippet demonstrates incorrect usage of type assertions. It uses `as string` and `<string>` to assert that a potentially nullable string is definitely a string.  The rule suggests using non-null assertions (`!`) instead. The code relies on standard TypeScript features.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/non-nullable-type-assertion-style.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst maybe: string | undefined = Math.random() > 0.5 ? '' : undefined;\n\nconst definitely = maybe as string;\nconst alsoDefinitely = <string>maybe;\n```\n\n----------------------------------------\n\nTITLE: Correct Parameter Typing\nDESCRIPTION: Illustrates correct parameter typing with type annotations when the `parameter` option is enabled. The `size` and `text` parameters in function definitions are explicitly typed as `number` and `boolean`.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/typedef.mdx#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nfunction logsSize(size: number): void {\n  console.log(size);\n}\n\nconst doublesSize = function (size: number): number {\n  return size * 2;\n};\n\nconst divider = {\n  curriesSize(size: number): number {\n    return size;\n  },\n  dividesSize: function (size: number): number {\n    return size / 2;\n  },\n};\n\nclass Logger {\n  log(text: boolean): boolean {\n    console.log('>', text);\n    return true;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Rule Meta.docs with RuleCreator - TypeScript\nDESCRIPTION: This code snippet demonstrates how to use the `RuleCreator` utility from `@typescript-eslint/utils` to define custom ESLint rules with well-typed `meta.docs`. It showcases how to specify additional allowed properties in `meta.docs` using a type parameter. The `MyPluginDocs` interface defines an additional `recommended` property of type `boolean` that is included in the rule's metadata.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/website/blog/2024-07-31-announcing-typescript-eslint-v8.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\ninterface MyPluginDocs {\n  recommended: boolean;\n}\n\nconst createRule = ESLintUtils.RuleCreator<MyPluginDocs>(\n  name => `https://example.com/rule/${name}`,\n);\n\ncreateRule({\n  // ...\n  meta: {\n    docs: {\n      description: '...',\n      recommended: true,\n    },\n    // ...\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Disallowing Non-Private Readonly Parameter Properties in TypeScript\nDESCRIPTION: These TypeScript class examples demonstrate code that violates the rule when `{ \"allow\": [\"private readonly\"] }` is specified. The rule only allows private readonly parameter properties, flagging other modifiers as incorrect.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/parameter-properties.mdx#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nclass Foo {\n  constructor(readonly name: string) {}\n}\n\nclass Foo {\n  constructor(private name: string) {}\n}\n\nclass Foo {\n  constructor(protected name: string) {}\n}\n\nclass Foo {\n  constructor(public name: string) {}\n}\n\nclass Foo {\n  constructor(protected readonly name: string) {}\n}\n\nclass Foo {\n  constructor(public readonly name: string) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Interface Member Ordering\nDESCRIPTION: This TypeScript code snippet shows a correct member order in an interface, adhering to the enforced rule of signature, method, constructor, and field.  The signature comes first, followed by the method, then the constructor and finally the field.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/member-ordering.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Foo {\n  [Z: string]: any; // -> signature\n\n  A(): void; // -> method\n\n  new (); // -> constructor\n\n  B: string; // -> field\n}\n```\n\n----------------------------------------\n\nTITLE: Adding missing visitor keys\nDESCRIPTION: This commit adds missing visitor keys to the @typescript-eslint/visitor-keys package. This ensures that all relevant AST nodes are properly traversed during analysis.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/visitor-keys/CHANGELOG.md#_snippet_10\n\nLANGUAGE: Other\nCODE:\n```\n**visitor-keys:** add missing visitor keys ([#4731](https://github.com/typescript-eslint/typescript-eslint/issues/4731)) ([bb575a0](https://github.com/typescript-eslint/typescript-eslint/commit/bb575a0763f39b9b988a7c20afee7b5eeb64cba7))\n```\n\n----------------------------------------\n\nTITLE: Incorrect Void Expression Usage - TypeScript\nDESCRIPTION: This code snippet demonstrates incorrect usage of `void` expressions, such as assigning the result of `alert` to a variable or using `console.error` in a return statement. The rule aims to prevent such confusing patterns that can lead to errors or misunderstandings.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-confusing-void-expression.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// somebody forgot that `alert` doesn't return anything\nconst response = alert('Are you sure?');\nconsole.log(alert('Are you sure?'));\n\n// it's not obvious whether the chained promise will contain the response (fixable)\npromise.then(value => window.postMessage(value));\n\n// it looks like we are returning the result of `console.error` (fixable)\nfunction doSomething() {\n  if (!somethingToDo) {\n    return console.error('Nothing to do!');\n  }\n\n  console.log('Doing a thing...');\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Class Expression Member Ordering\nDESCRIPTION: This TypeScript code snippet highlights a correct member order in a class expression, adhering to the enforced rule of signature, method, constructor, and field. The signature comes first, followed by the method, then the constructor and finally the field.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/member-ordering.mdx#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst Foo = class {\n  [Z: string]: any; // -> signature\n\n  public static A(): void {} // -> method\n  public B(): void {} // -> method\n\n  constructor() {} // -> constructor\n\n  private C: string; // -> field\n  public D: string; // -> field\n  protected static E: string; // -> field\n};\n```\n\n----------------------------------------\n\nTITLE: Incorrect Empty Class (allowConstructorOnly) - TypeScript\nDESCRIPTION: This code snippet demonstrates an incorrect case when the `allowConstructorOnly` option is set to `true`. An empty class `NoFields` is defined, which is disallowed because it has no constructor.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-extraneous-class.mdx#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nclass NoFields {}\n```\n\n----------------------------------------\n\nTITLE: Logging Diff Patches for ESLint Rule Configuration Changes\nDESCRIPTION: This code logs the generated diff patches for two sets of ESLint rule configurations.  It compares the v5 recommended rules to the combined v6 recommended and stylistic rules, and then compares the v5 recommended and type-checked rules to the combined v6 type-checked and stylistic type-checked rules.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/website/blog/2023-07-09-announcing-typescript-eslint-v6.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log('From v5 recommended to v6 recommended & stylistic:');\n\nconsole.log(\n  createDiffPatch(v5Recommended, { ...v6Recommended, ...v6Stylistic }),\n);\n\nconsole.log(\n  '\\nFrom v5 recommended & recommended-requiring-type-checking to v6 recommended-type-checked & stylistic-type-checked:',\n);\n\nconsole.log(\n  createDiffPatch(\n    {\n      ...v5Recommended,\n      ...v5RecommendedRequiringTypeChecking,\n    },\n    { ...v6RecommendedTypeChecked, ...v6StylisticTypeChecked },\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Incorrect Readonly Parameter Types Example (TypeScript)\nDESCRIPTION: Illustrates examples of incorrect usage where function parameters are not typed as readonly, allowing potential mutation of inputs.  Includes examples for arrays, tuples, objects, custom array types, custom function types and union types.  Highlights how the rule identifies mutable parameters.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-readonly-parameter-types.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction array1(arg: string[]) {} // array is not readonly\nfunction array2(arg: readonly string[][]) {} // array element is not readonly\nfunction array3(arg: [string, number]) {} // tuple is not readonly\nfunction array4(arg: readonly [string[], number]) {} // tuple element is not readonly\n// the above examples work the same if you use ReadonlyArray<T> instead\n\nfunction object1(arg: { prop: string }) {} // property is not readonly\nfunction object2(arg: { readonly prop: string; prop2: string }) {} // not all properties are readonly\nfunction object3(arg: { readonly prop: { prop2: string } }) {} // nested property is not readonly\n// the above examples work the same if you use Readonly<T> instead\n\ninterface CustomArrayType extends ReadonlyArray<string> {\n  prop: string; // note: this property is mutable\n}\nfunction custom1(arg: CustomArrayType) {}\n\ninterface CustomFunction {\n  (): void;\n  prop: string; // note: this property is mutable\n}\nfunction custom2(arg: CustomFunction) {}\n\nfunction union(arg: string[] | ReadonlyArray<number[]>) {} // not all types are readonly\n\n// rule also checks function types\ninterface Foo {\n  (arg: string[]): void;\n}\ninterface Foo {\n  new (arg: string[]): void;\n}\nconst x = { foo(arg: string[]): void {} };\nfunction foo(arg: string[]);\ntype Foo = (arg: string[]) => void;\ninterface Foo {\n  foo(arg: string[]): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Correct enum with implicit number members in TypeScript\nDESCRIPTION: This TypeScript code snippet shows an example of a correct enum declaration where all members are implicitly assigned number values. The 'Status' enum has 'Unknown' assigned to 0, 'Closed' assigned to 1, and 'Open' assigned to 2, by default. The implicit assignment is allowed by the 'no-mixed-enums' rule as all of them are of the same number type.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-mixed-enums.mdx#_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nenum Status {\n  Unknown,\n  Closed,\n  Open,\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Typedef Usage Example with typedefs: false in TypeScript\nDESCRIPTION: This TypeScript snippet showcases correct usage of a typedef when the 'typedefs' option is set to 'false'. The type alias 'StringOrNumber' is referenced before its declaration, but because 'typedefs' is set to 'false', the linter does not flag this as an error.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-use-before-define.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nlet myVar: StringOrNumber;\ntype StringOrNumber = string | number;\n```\n\n----------------------------------------\n\nTITLE: Redundant Type Alias: myString Type - TypeScript\nDESCRIPTION: Illustrates a case where a type alias can be redundant, specifically when aliasing primitive types like strings.  It showcases the scenario where creating a type alias for a simple type doesn't offer any significant benefit and can be considered unnecessary.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-type-alias.mdx#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\n// this doesn't make much sense\ntype myString = string;\n```\n\n----------------------------------------\n\nTITLE: Initializing eslintRecommended with Legacy Config\nDESCRIPTION: This code snippet shows how to extend the `eslintRecommended` configuration in a legacy `.eslintrc.js` file.  It extends both ESLint's recommended rules and typescript-eslint's `eslint-recommended` ruleset, which disables core ESLint rules already checked by the TypeScript compiler and enables rules for modern TypeScript constructs.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/users/Shared_Configurations.mdx#_snippet_20\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  extends: [\n    'eslint:recommended',\n    'plugin:@typescript-eslint/eslint-recommended',\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Incorrect Utilities Class and Usage - TypeScript\nDESCRIPTION: This snippet shows an incorrect example of using a class as a namespace and then importing and using it in another file. The Utilities class contains a static method sayHello, which is then used in consumers.ts\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-extraneous-class.mdx#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// utilities.ts\nexport class Utilities {\n  static sayHello() {\n    console.log('Hello, world!');\n  }\n}\n\n// consumers.ts\nimport { Utilities } from './utilities';\n\nUtilities.sayHello();\n```\n\n----------------------------------------\n\nTITLE: Implicit Return Type causing no-unnecessary-type-parameters warning TypeScript\nDESCRIPTION: This example shows that the return type of a function can implicitly use the type parameter `T`. Therefore the type parameter `T` is used twice and will NOT trigger the rule.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-unnecessary-type-parameters.mdx#_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nfunction identity<T>(arg: T) {\n  return arg;\n}\n```\n\n----------------------------------------\n\nTITLE: RuleTester with Dependency Constraints (TS)\nDESCRIPTION: This code illustrates how to use dependency constraints with RuleTester to test against specific versions of dependencies. It demonstrates how to define constraints at both the constructor and individual test case levels using semver ranges. This helps ensure backwards and forwards compatibility of the rule being tested.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/packages/Rule_Tester.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst ruleTester = new RuleTester({\n  // Added lines start\n  dependencyConstraints: {\n    // none of the tests will run unless `my-dependency` matches the semver range `>=1.2.3`\n    'my-dependency': '1.2.3',\n    // you can also provide granular semver ranges\n    'my-granular-dep': {\n      // none of the tests will run unless `my-granular-dep` matches the semver range `~3.2.1`\n      range: '~3.2.1',\n    },\n  },\n  // Added lines end\n});\n\nruleTester.run('my-rule', rule, {\n  valid: [\n    {\n      code: 'const y = 2;',\n      // Added lines start\n      dependencyConstraints: {\n        // this test won't run unless BOTH dependencies match the given ranges\n        first: '1.2.3',\n        second: '3.2.1',\n      },\n      // Added lines end\n    },\n  ],\n  invalid: [\n    /* ... */\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Feature: Throwing error when CatchClause param contains initializer\nDESCRIPTION: This code snippet describes a feature where `typescript-estree` will now throw an error if a CatchClause parameter contains an initializer. This restriction enforces the correct syntax for catch clauses, which do not allow parameter initializers, and improves code correctness.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/ast-spec/CHANGELOG.md#_snippet_9\n\nLANGUAGE: Markdown\nCODE:\n```\n- **typescript-estree:** throw error when CatchClause param contains initializer\n```\n\n----------------------------------------\n\nTITLE: Correct examples with 'always' option\nDESCRIPTION: Shows correct usages of the 'always' option. Demonstrates correct awaiting of promises.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/return-await.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nasync function validAlways1() {\n  try {\n    return await Promise.resolve('try');\n  } catch (e) {}\n}\n\nasync function validAlways2() {\n  return await Promise.resolve('try');\n}\n\nasync function validAlways3() {\n  return 'value';\n}\n```\n\n----------------------------------------\n\nTITLE: Disable Type-Checked Linting using Legacy Config\nDESCRIPTION: This code snippet shows how to disable type-checked linting for specific files (e.g., all `.js` files) using the Legacy Config format in ESLint (`.eslintrc.cjs`). It uses the `overrides` property to apply a configuration that extends `plugin:@typescript-eslint/disable-type-checked` to files matching the specified glob pattern. This method is used to selectively turn off type checking for certain files, which can be helpful when migrating JavaScript code to TypeScript or when dealing with files that do not require type information.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/troubleshooting/typed-linting/index.mdx#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  // ... the rest of your config ...\n  overrides: [\n    {\n      extends: ['plugin:@typescript-eslint/disable-type-checked'],\n      files: ['./**/*.js'],\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Naming Convention - Camel Case Variables and Functions\nDESCRIPTION: This configuration enforces that both variable and function names are in camelCase, and allows leading underscores. It uses an array selector to target multiple types.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/naming-convention.mdx#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"@typescript-eslint/naming-convention\": [\n    \"error\",\n    {\n      \"selector\": [\"variable\", \"function\"],\n      \"format\": [\"camelCase\"],\n      \"leadingUnderscore\": \"allow\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Run ESLint with Yarn\nDESCRIPTION: Runs ESLint on the current project directory using Yarn package manager.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/getting-started/Legacy_ESLint_Setup.mdx#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\nyarn eslint .\n```\n\n----------------------------------------\n\nTITLE: Removing TypeScript Version: Updating version constants\nDESCRIPTION: Several constants related to supported TypeScript versions need to be updated to remove the old version. This includes `SUPPORTED_TYPESCRIPT_VERSIONS` and `versions` constants.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/maintenance/pull-requests/Dependency_Version_Upgrades.mdx#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nUpdate the `SUPPORTED_TYPESCRIPT_VERSIONS` constant in `warnAboutTSVersion.ts`\nUpdate the `versions` constant in `version-check.ts`\n```\n\n----------------------------------------\n\nTITLE: Correct array type notation with 'array-simple' option in TypeScript\nDESCRIPTION: This snippet demonstrates correct array type notation when the `default` option is set to 'array-simple'. It uses array syntax for simple types (e.g., `string[]`) and generic syntax for non-simple types (e.g., `Array<string | number>`).\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/array-type.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst a: Array<string | number> = ['a', 'b'];\nconst b: Array<{ prop: string }> = [{ prop: 'a' }];\nconst c: Array<() => void> = [() => {}];\nconst d: MyType[] = ['a', 'b'];\nconst e: string[] = ['a', 'b'];\nconst f: readonly string[] = ['a', 'b'];\n```\n\n----------------------------------------\n\nTITLE: Supporting New Extensions in TypeScript\nDESCRIPTION: This feature adds support for new extensions introduced in TypeScript 4.7. By supporting these new extensions, the tool ensures compatibility and proper handling of newer TypeScript syntax and features.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/scope-manager/CHANGELOG.md#_snippet_17\n\nLANGUAGE: text\nCODE:\n```\nefc147b04dce52ab17415b6a4ae4076b944b9036\n```\n\n----------------------------------------\n\nTITLE: Configure ESLint with Recommended Settings (ESM)\nDESCRIPTION: Configures ESLint to use the recommended rules from both ESLint and typescript-eslint.  This snippet shows how to create an `eslint.config.mjs` file, import the necessary modules, and export the combined configuration using the `tseslint.config` helper function. The file uses the .mjs extension for ES modules.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/getting-started/Quickstart.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// @ts-check\n\nimport eslint from '@eslint/js';\nimport tseslint from 'typescript-eslint';\n\nexport default tseslint.config(\n  eslint.configs.recommended,\n  tseslint.configs.recommended,\n);\n```\n\n----------------------------------------\n\nTITLE: Manual Dependency Update Run Checks\nDESCRIPTION: This snippet outlines the commands to run various checks locally after updating dependencies. These checks include building, type checking, linting, testing, and integration testing.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/maintenance/pull-requests/Dependency_Version_Upgrades.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn build\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn typecheck\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn lint\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn test\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn integration-test\n```\n\n----------------------------------------\n\nTITLE: Defining Options Interface for no-magic-numbers Rule (TypeScript)\nDESCRIPTION: This TypeScript code defines the `Options` interface that extends `BaseNoMagicNumbersOptions` and includes optional boolean properties to control whether the rule should ignore enums, numeric literal types, readonly class properties, and type indexes. It also defines `defaultOptions` with default boolean values set to `false` for the properties `ignoreEnums`, `ignoreNumericLiteralTypes`, `ignoreReadonlyClassProperties`, and `ignoreTypeIndexes`.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-magic-numbers.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Options extends BaseNoMagicNumbersOptions {\n  ignoreEnums?: boolean;\n  ignoreNumericLiteralTypes?: boolean;\n  ignoreReadonlyClassProperties?: boolean;\n  ignoreTypeIndexes?: boolean;\n}\n\nconst defaultOptions: Options = {\n  ...baseNoMagicNumbersDefaultOptions,\n  ignoreEnums: false,\n  ignoreNumericLiteralTypes: false,\n  ignoreReadonlyClassProperties: false,\n  ignoreTypeIndexes: false,\n};\n\n```\n\n----------------------------------------\n\nTITLE: Ignore destructured names in naming-convention\nDESCRIPTION: This configuration snippet demonstrates how to ignore destructured names using the `destructured` modifier and setting `format` to null. This allows destructured properties to retain their original names, even if they break the specified naming convention.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/naming-convention.mdx#_snippet_14\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"@typescript-eslint/naming-convention\": [\n    \"error\",\n    {\n      \"selector\": \"variable\",\n      \"modifiers\": [\"destructured\"],\n      \"format\": null,\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Correct usage of void operator in TypeScript\nDESCRIPTION: Examples of correct usage of the `void` operator, where it's applied to expressions that return a value. This indicates the programmer's intention to discard the return value.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-meaningless-void-operator.mdx#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n(() => {})();\n\nfunction foo() {}\nfoo(); // nothing to discard\n\nfunction bar(x: number) {\n  void x; // discarding a number\n  return 2;\n}\nvoid bar(1); // discarding a number\n```\n\n----------------------------------------\n\nTITLE: Tuple Types with `allowTupleTypes: always`\nDESCRIPTION: This code demonstrates the correct usage of tuple types when the `allowTupleTypes` option is set to `always`.  It showcases various forms of tuple types, including their use within unions and intersections. No dependencies are required. The code defines type aliases using tuple types.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-type-alias.mdx#_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\ntype Foo = [number];\n\ntype Foo = [number] | [number, number];\n\ntype Foo = [number] & [number, number];\n\ntype Foo = [number] | ([number, number] & [string, string]);\n```\n\n----------------------------------------\n\nTITLE: Incorrect Class Expression Member Ordering\nDESCRIPTION: This TypeScript code snippet highlights an incorrect member order in a class expression, violating the enforced rule of signature, method, constructor, and field. The rule expects the signature to appear before the method, constructor and the field.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/member-ordering.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst Foo = class {\n  private C: string; // -> field\n  public D: string; // -> field\n\n  constructor() {} // -> constructor\n\n  public static A(): void {} // -> method\n  public B(): void {} // -> method\n\n  [Z: string]: any; // -> signature\n\n  protected static E: string; // -> field\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint extension rules for TypeScript\nDESCRIPTION: This code snippet shows how to configure ESLint to use extension rules for TypeScript. It disables the base ESLint rule and enables the corresponding `@typescript-eslint` rule. This is useful for ensuring that ESLint correctly handles TypeScript-specific syntax.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/troubleshooting/faqs/ESLint.mdx#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"rules\": {\n    \"semi\": \"off\",\n    \"@typescript-eslint/semi\": \"error\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Default Naming Convention Options\nDESCRIPTION: Defines the default configuration options for the TypeScript ESLint naming convention rule. It specifies naming conventions for default identifiers, imports, variables, and type-like entities, providing a base configuration that can be extended or customized.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/naming-convention.mdx#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n// the default config is similar to ESLint's camelcase rule but more strict\nconst defaultOptions: Options = [\n  {\n    selector: 'default',\n    format: ['camelCase'],\n    leadingUnderscore: 'allow',\n    trailingUnderscore: 'allow',\n  },\n\n  {\n    selector: 'import',\n    format: ['camelCase', 'PascalCase'],\n  },\n\n  {\n    selector: 'variable',\n    format: ['camelCase', 'UPPER_CASE'],\n    leadingUnderscore: 'allow',\n    trailingUnderscore: 'allow',\n  },\n\n  {\n    selector: 'typeLike',\n    format: ['PascalCase'],\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Incorrect Property Declaration\nDESCRIPTION: Illustrates incorrect property declaration without type annotations when the `propertyDeclaration` option is enabled. The `member` and `otherMember` properties within the `Members` type lack explicit type definitions.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/typedef.mdx#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\ntype Members = {\n  member;\n  otherMember;\n};\n```\n\n----------------------------------------\n\nTITLE: Configure Interface Member Ordering in ESLint (JSONC)\nDESCRIPTION: This configuration sets up the @typescript-eslint/member-ordering rule to enforce a specific order for interface members: signatures, then methods, then constructors, then fields.  It applies an \"error\" severity, meaning violations will cause ESLint to report an error.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/member-ordering.mdx#_snippet_27\n\nLANGUAGE: jsonc\nCODE:\n```\n// .eslintrc.json\n{\n  \"rules\": {\n    \"@typescript-eslint/member-ordering\": [\n      \"error\",\n      { \"interfaces\": [\"signature\", \"method\", \"constructor\", \"field\"] },\n    ],\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Installing typescript-eslint v6 Beta packages with npm\nDESCRIPTION: This command installs the v6 beta versions of `@typescript-eslint/eslint-plugin` and `@typescript-eslint/parser` as development dependencies.  It allows existing typescript-eslint users to upgrade to the beta for testing.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/website/blog/2023-03-13-announcing-typescript-eslint-v6-beta.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i @typescript-eslint/eslint-plugin@rc-v6 @typescript-eslint/parser@rc-v6 --save-dev\n```\n\n----------------------------------------\n\nTITLE: Incorrect `treatMethodsAsReadonly: false` Example (TS)\nDESCRIPTION: Demonstrates incorrect code when `treatMethodsAsReadonly` is set to `false`.  A type with a `readonly` property and a mutable method is defined. The rule, when enabled, would flag this as incorrect usage because the method is not explicitly `readonly` but is treated as such.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-readonly-parameter-types.mdx#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ntype MyType = {\n  readonly prop: string;\n  method(): string; // note: this method is mutable\n};\nfunction foo(arg: MyType) {}\n```\n\n----------------------------------------\n\nTITLE: Correct Case-Sensitive Type Definition - TypeScript\nDESCRIPTION: This code snippet demonstrates a correctly sorted type definition with the `caseSensitive` option set to `true`. The types are alphabetically sorted based on case.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/sort-type-constituents.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntype T = 'DeleteForever' | 'DeletedAt';\n```\n\n----------------------------------------\n\nTITLE: Incorrect Alphabetical Order Ignoring Groups (Typescript)\nDESCRIPTION: This TypeScript code showcases incorrect alphabetical sorting when ignoring member groups, as 'a' should come before 'b'.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/member-ordering.mdx#_snippet_43\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Foo {\n  b(): void;\n  a: boolean;\n\n  [a: string]: number;\n  new (): Bar;\n  (): Baz;\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Primitive Types with ignorePrimitives: { string: false } in TypeScript\nDESCRIPTION: This code shows the correct replacement of logical OR operators with nullish coalescing operators when `ignorePrimitives` is set to `{ string: false }`.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-nullish-coalescing.mdx#_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\ndeclare const foo: string | undefined;\n\nfoo ?? 'a string';\n```\n\n----------------------------------------\n\nTITLE: Supporting type-only module specifiers in typescript-estree\nDESCRIPTION: This commit adds support for type-only module specifiers to typescript-estree. Type-only module specifiers are used to import types without importing any runtime values, which is useful for improving performance and reducing bundle sizes. The parser can now properly handle these new specifiers.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/typescript-estree/CHANGELOG.md#_snippet_44\n\nLANGUAGE: plaintext\nCODE:\n```\n77baa92\n```\n\n----------------------------------------\n\nTITLE: Incorrect Enum with Duplicate String Values - TypeScript\nDESCRIPTION: This code snippet shows an incorrect usage where multiple enum members are initialized with the same string value. The rule will catch this, as enums are typically expected to have unique values. No dependencies are required.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-duplicate-enum-values.mdx#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nenum E {\n  A = 'A',\n  B = 'A',\n  C = `A`,\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect `for` Loop Example (TypeScript)\nDESCRIPTION: This example demonstrates the incorrect usage of a standard `for` loop when a `for-of` loop would be more appropriate. The loop index `i` is only used to access elements within the `array`.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-for-of.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ndeclare const array: string[];\n\nfor (let i = 0; i < array.length; i++) {\n  console.log(array[i]);\n}\n```\n\n----------------------------------------\n\nTITLE: Correct code with parameter properties when parameterProperties override is explicit (TypeScript)\nDESCRIPTION: Shows correct TypeScript code where different versions of constructors are correct. When `accessibility` is `off`, and `overrides: { parameterProperties: 'explicit' }`\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/explicit-member-accessibility.mdx#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nclass Animal {\n  constructor(public readonly animalName: string) {}\n}\n\nclass Animal {\n  constructor(public animalName: string) {}\n}\n\nclass Animal {\n  constructor(animalName: string) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Splitting visitor keys into their own package\nDESCRIPTION: This feature modularizes the visitor keys into a separate package. The action improves maintainability, reusability, and reduces bundle size for projects consuming only specific parts of the typescript-eslint toolchain. The new package is `@typescript-eslint/visitor-keys`.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/visitor-keys/CHANGELOG.md#_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nsplit visitor keys into their own package ([#2230](https://github.com/typescript-eslint/typescript-eslint/issues/2230)) ([689dae3](https://github.com/typescript-eslint/typescript-eslint/commit/689dae37392d527c64ae83db2a4c3e6b7fecece7))\n```\n\n----------------------------------------\n\nTITLE: Disallow deprecated code usage - Incorrect with node url\nDESCRIPTION: This example demonstrates incorrect usage of `node:url`'s `parse` function which is deprecated. The code directly calls the deprecated `parse` function, triggering the rule.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-deprecated.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parse } from 'node:url';\n\n// 'parse' is deprecated. Use the WHATWG URL API instead.\nconst url = parse('/foo');\n```\n\n----------------------------------------\n\nTITLE: Incorrect Compound Assignment with skipCompoundAssignments: false\nDESCRIPTION: This snippet demonstrates incorrect compound assignment operations with `skipCompoundAssignments: false`, showing cases that are flagged by the rule (adding `1` to `bigint`, or adding `1` to `number[]`).\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/restrict-plus-operands.mdx#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nlet foo: bigint = 0n;\nfoo += 1;\n\nlet bar: number[] = [1];\nbar += 1;\n```\n\n----------------------------------------\n\nTITLE: Incorrect `checkAny` example - TypeScript\nDESCRIPTION: Example demonstrating incorrect code when using the `checkAny` option. It shows how chained logical AND can be replaced by an optional chain.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-optional-chain.mdx#_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\ndeclare const thing: any;\n\nthing && thing.toString();\n```\n\n----------------------------------------\n\nTITLE: Correct 'new' and 'constructor' Definitions - TypeScript\nDESCRIPTION: This code snippet demonstrates the correct usage of `new` and `constructor` in TypeScript. Classes use `constructor()` for instantiation logic, while interfaces use `new()` to define a construct signature.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-misused-new.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare class C {\n  constructor();\n}\n\ninterface I {\n  new (): C;\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect HelloWorldLogger Class - TypeScript\nDESCRIPTION: This snippet shows an incorrect usage of a class that only has a constructor and no fields.  The rule recommends replacing such classes with standalone functions. The constructor logs a message to the console.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-extraneous-class.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass HelloWorldLogger {\n  constructor() {\n    console.log('Hello, world!');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Tuple Types with `allowTupleTypes: in-intersections`\nDESCRIPTION: This code demonstrates the correct usage of tuple types when the `allowTupleTypes` option is set to `in-intersections`. Tuple types are used within intersection types, which is allowed under this configuration. The code defines type aliases using tuple types inside intersection types.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-type-alias.mdx#_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\ntype Foo = [number] & [number, number];\n\ntype Foo = [string] & [number];\n```\n\n----------------------------------------\n\nTITLE: Object Literal with Excess Properties and Unnecessary Type Parameter TypeScript\nDESCRIPTION: This example shows a function `serialize` with a type parameter `T` extending `SomeProperties`. The type parameter is used only once, and the rule will flag it. However, removing the type parameter can lead to a TypeScript error if the object literal passed to the function has excess properties.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-unnecessary-type-parameters.mdx#_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\ninterface SomeProperties {\n  foo: string;\n}\n\n// T is only used once, so the rule will report.\nfunction serialize<T extends SomeProperties>(x: T): string {\n  return JSON.stringify(x);\n}\n\nserialize({ foo: 'bar', anotherProperty: 'baz' });\n```\n\n----------------------------------------\n\nTITLE: Assignment of `any` to `unknown` examples in TypeScript\nDESCRIPTION: These examples demonstrate allowed assignment of `any` to `unknown`. This is a specific exception to the `no-unsafe-assignment` rule.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-unsafe-assignment.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst x: unknown = y as any;\nconst x: unknown[] = y as any[];\nconst x: Set<unknown> = y as Set<any>;\n```\n\n----------------------------------------\n\nTITLE: Correct Explicit Module Boundary Types with any - TypeScript\nDESCRIPTION: Example of correct code that adheres to the `explicit-module-boundary-types` rule when `allowArgumentsExplicitlyTypedAsAny` is set to `true`.  Even when using `any`, the rule is satisfied because it's explicitly typed.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/explicit-module-boundary-types.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport const func = (value: any): number => value + 1;\n```\n\n----------------------------------------\n\nTITLE: Finalizing package.json for stable TypeScript release\nDESCRIPTION: This snippet describes the final steps for updating the `package.json` when the stable TypeScript version is released. It involves removing the RC version and bumping the `<` version to the next version of TypeScript\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/maintenance/pull-requests/Dependency_Version_Upgrades.mdx#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\nIn the root `package.json`, remove `|| X.Y.1-rc2` from the `dependency` on `typescript`, and bump its `<` version to the next version of TypeScript\nIn the root `package.json`, change the `resolutions` on `typescript` to `X.Y.3`\n```\n\n----------------------------------------\n\nTITLE: Defining Options for Promise Rejection Rule in TypeScript\nDESCRIPTION: This code defines the available options for configuring the `prefer-promise-reject-errors` rule.  It allows users to specify whether to allow throwing values typed as `any` or `unknown`, providing flexibility in enforcing the rule.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-promise-reject-errors.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Options {\n  /**\n   * Whether to always allow throwing values typed as `any`.\n   */\n  allowThrowingAny?: boolean;\n\n  /**\n   * Whether to always allow throwing values typed as `unknown`.\n   */\n  allowThrowingUnknown?: boolean;\n}\n\nconst defaultOptions: Options = {\n  allowThrowingAny: false,\n  allowThrowingUnknown: false,\n};\n```\n\n----------------------------------------\n\nTITLE: Setting project and tsconfigRootDir in parserOptions - JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to configure ESLint to use the `@typescript-eslint/parser` with type-aware linting. It sets the `project` option to a specific tsconfig.json file and specifies the `tsconfigRootDir` to ensure correct path resolution. The `__dirname` variable represents the directory containing the ESLint configuration file.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/website/blog/2023-09-18-parser-options-project-true.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  // ...\n  parserOptions: {\n    project: './tsconfig.json',\n    tsconfigRootDir: __dirname,\n  },\n  // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Supporting new extensions in TypeScript 4.7\nDESCRIPTION: This commit adds support for new file extensions introduced in TypeScript 4.7. This update ensures that the toolchain can correctly process files with these new extensions.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/typescript-estree/CHANGELOG.md#_snippet_48\n\nLANGUAGE: plaintext\nCODE:\n```\nefc147b\n```\n\n----------------------------------------\n\nTITLE: Correct Group Ordered Type Definition - TypeScript\nDESCRIPTION: This code snippet demonstrates a correctly sorted type definition with a custom `groupOrder`. `123` and `null` are correctly ordered based on the group order `[\"literal\", \"nullish\"]`.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/sort-type-constituents.mdx#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ntype ExampleGroup = 123 | null;\n```\n\n----------------------------------------\n\nTITLE: Allowing Excess Properties with Index Signature TypeScript\nDESCRIPTION: This example demonstrates how to modify the `SomeProperties` interface to allow excess properties using an index signature. This resolves the TypeScript error from the previous example.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-unnecessary-type-parameters.mdx#_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\ninterface SomeProperties {\n  foo: string;\n\n  // This allows any other properties.\n  // You may wish to make these types more specific according to your use case.\n  [key: string]: unknown;\n}\n\nfunction serialize(x: SomeProperties): string {\n  return JSON.stringify(x);\n}\n\n// No error!\nserialize({ foo: 'bar', anotherProperty: 'baz' });\n```\n\n----------------------------------------\n\nTITLE: Enforcing `unknown` for Caught Exceptions with `@typescript-eslint/use-unknown-in-catch-callback-variable`\nDESCRIPTION: This snippet showcases how the `@typescript-eslint/use-unknown-in-catch-callback-variable` rule enforces the use of the `unknown` type for the parameter of a Promise rejection callback.  It demonstrates a scenario where a Promise is rejected and the `catch` callback's `error` parameter is implicitly typed as `any`, triggering the lint rule and suggesting the use of `: unknown` for type safety.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/website/blog/2025-01-21-avoiding-anys.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction rejectWith(value: string) {\n  return Promise.reject(value);\n}\n\nrejectWith('Nandor').catch(error => {\n  //                       ~~~~\n  // eslint(@typescript-eslint/use-unknown-in-catch-callback-variable):\n  // Prefer the safe `: unknown` for a `catch` callback variable.\n\n  console.log(error.message); // Should be a type error, but isn't\n});\n```\n\n----------------------------------------\n\nTITLE: Correct Type Literal Member Order (Typescript)\nDESCRIPTION: This TypeScript code demonstrates the correct member ordering in a type literal, adhering to the rule { \"typeLiterals\": [\"signature\", \"method\", \"constructor\", \"field\"] }. The members are ordered as signature, method, constructor, and field.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/member-ordering.mdx#_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\ntype Foo = {\n  [Z: string]: any; // -> signature\n\n  A(): void; // -> method\n\n  new (); // -> constructor\n\n  B: string; // -> field\n};\n```\n\n----------------------------------------\n\nTITLE: Supporting private optional property definition in typescript-estree\nDESCRIPTION: This commit introduces support for private optional property definitions in typescript-estree. This enhancement allows the parser to correctly handle and represent private properties that are also marked as optional using the `?` syntax within TypeScript classes.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/typescript-estree/CHANGELOG.md#_snippet_45\n\nLANGUAGE: plaintext\nCODE:\n```\n8605e08\n```\n\n----------------------------------------\n\nTITLE: Add `.kind` to `TSModuleDeclaration`\nDESCRIPTION: This feature adds the `.kind` property to the `TSModuleDeclaration` node in the AST. It provides a more specific indicator of the module declaration's type (e.g., namespace or module). This enhancement allows for more precise analysis and manipulation of module declarations.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/typescript-estree/CHANGELOG.md#_snippet_30\n\nLANGUAGE: text\nCODE:\n```\n**typescript-estree:** add `.kind` to `TSModuleDeclaration` ([#6443](https://github.com/typescript-eslint/typescript-eslint/issues/6443)) ([2f948df](https://github.com/typescript-eslint/typescript-eslint/commit/2f948df35b73d916e7fe42b21343568b1617e3f1))\n```\n\n----------------------------------------\n\nTITLE: Ignoring Types with ignoredTypeNames Option in TypeScript\nDESCRIPTION: Shows how to configure the `ignoredTypeNames` option to exclude specific types from the rule's checks, useful for types like `RegExp` in older TypeScript versions that might lack a `toString()` method but have a useful string representation.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-base-to-string.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n`${/regex/}`;\n'' + /regex/;\n/regex/.toString();\nlet value = /regex/;\nvalue.toString();\nlet text = `${value}`;\nString(/regex/);\n```\n\n----------------------------------------\n\nTITLE: Use 'import' instead of 'types' triple-slash reference\nDESCRIPTION: This snippet shows the correct way to import a module when the `types` option is set to `'never'`. It uses an `import` statement to bring in the desired value.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/triple-slash-reference.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { value } from 'code';\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Rule `meta.docs` with RuleCreator - TypeScript\nDESCRIPTION: This snippet demonstrates how to define a custom ESLint rule's `meta.docs` object using the `RuleCreator` utility from `@typescript-eslint/utils`. It shows how to specify additional allowed properties beyond the default `description` and `url` using a type parameter.  It requires `@typescript-eslint/utils` and uses the `ESLintUtils.RuleCreator` function.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/website/blog/2024-05-27-announcing-typescript-eslint-v8-beta.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ninterface MyPluginDocs {\n  recommended: boolean;\n}\n\nconst createRule = ESLintUtils.RuleCreator<MyPluginDocs>(\n  name => `https://example.com/rule/${name}`,\n);\n\ncreateRule({\n  // ...\n  meta: {\n    docs: {\n      description: '...',\n      recommended: true,\n    },\n    // ...\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Incorrect Abstract Class - TypeScript\nDESCRIPTION: This snippet demonstrates an incorrect usage of an empty abstract class, which can be flagged as an extraneous class depending on the rule's configuration. Abstract classes without members are often redundant.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-extraneous-class.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nabstract class Foo {}\n```\n\n----------------------------------------\n\nTITLE: Correct Function Type Alias Returning Itself - TypeScript\nDESCRIPTION: This snippet demonstrates the correct declaration of a function type that returns itself using a type alias. This example aligns with the `prefer-function-type` rule.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-function-type.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// returns the function itself, not the `this` argument.\ntype ReturnsSelf = (arg: string) => ReturnsSelf;\n```\n\n----------------------------------------\n\nTITLE: Correct Type Member Ordering\nDESCRIPTION: This TypeScript code snippet demonstrates a correct member order in a type literal, adhering to the rule of signature, method, constructor, and field (though signatures and constructors are optional).\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/member-ordering.mdx#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ntype Foo = {\n  // no signature\n\n  A(): void; // -> method\n\n  // no constructor\n\n  B: string; // -> field\n};\n```\n\n----------------------------------------\n\nTITLE: Incorrect Promise usage in object spreads (checksSpreads: true)\nDESCRIPTION: These code snippets demonstrate incorrect Promise usage within object spreads when the checksSpreads option is enabled.  The rule flags these examples because Promises (returned by `getData` and `awaitData`) are spread directly into objects without awaiting their resolution. This leads to the Promise objects being included in the resulting object instead of their resolved values. Option `checksSpreads` is `true`.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-misused-promises.mdx#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst getData = () => fetch('/');\n\nconsole.log({ foo: 42, ...getData() });\n\nconst awaitData = async () => {\n  await fetch('/');\n};\n\nconsole.log({ foo: 42, ...awaitData() });\n```\n\n----------------------------------------\n\nTITLE: Naming Convention - Type Parameter Prefix with 'T'\nDESCRIPTION: This configuration enforces that type parameters (generics) are prefixed with \"T\". It uses the \"typeParameter\" selector, sets the \"format\" to \"PascalCase\", and specifies the \"prefix\".\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/naming-convention.mdx#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"@typescript-eslint/naming-convention\": [\n    \"error\",\n    {\n      \"selector\": \"typeParameter\",\n      \"format\": [\"PascalCase\"],\n      \"prefix\": [\"T\"]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Pull Request Title Format\nDESCRIPTION: This example shows the required format for pull request titles, including the type (fix, docs, etc.), the package affected, and a short description of the changes.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/contributing/Pull_Requests.mdx#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n<type>(<package>): <short description>\n```\n\n----------------------------------------\n\nTITLE: Correct example with countVoidThis false and max 1\nDESCRIPTION: Illustrates a correct code snippet where `countVoidThis` is set to `false` and the maximum allowed parameters (`max`) is set to 1.  The function `hasNoThis` has one parameter besides `this: void`, satisfying the rule.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/max-params.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfunction hasNoThis(this: void, first: string) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Updating TypeScript version to 5.0 RC\nDESCRIPTION: This code snippet updates the TypeScript version to 5.0 Release Candidate within the @typescript-eslint scope-manager package. This ensures compatibility and leverages new features introduced in TypeScript 5.0 RC. No external dependencies are explicitly listed, but the update integrates with the broader TypeScript ecosystem.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/scope-manager/CHANGELOG.md#_snippet_5\n\nLANGUAGE: none\nCODE:\n```\nupdate TypeScript to 5.0 RC ([#6570](https://github.com/typescript-eslint/typescript-eslint/issues/6570)) ([36ef0e1](https://github.com/typescript-eslint/typescript-eslint/commit/36ef0e16f31810c27dda299e739d1610b689d3ad))\n```\n\n----------------------------------------\n\nTITLE: Disable Type-Aware Linting using Legacy Config\nDESCRIPTION: This snippet demonstrates disabling type-aware linting for a set of files in a legacy ESLint configuration (`.eslintrc.js`). It configures `overrides` to extend the `plugin:@typescript-eslint/disable-type-checked` plugin for all `.js` files. Additionally, it sets up the TypeScript ESLint parser with `projectService` enabled and specifies the `tsconfigRootDir`. This approach allows for selectively disabling type-aware rules for certain file types while maintaining them for others.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/troubleshooting/typed-linting/index.mdx#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  extends: [\n    'eslint:recommended',\n    'plugin:@typescript-eslint/recommended-type-checked',\n    'plugin:@typescript-eslint/stylistic-type-checked',\n  ],\n  plugins: ['@typescript-eslint'],\n  parser: '@typescript-eslint/parser',\n  parserOptions: {\n    projectService: true,\n    tsconfigRootDir: __dirname,\n  },\n  root: true,\n  // Added lines start\n  overrides: [\n    {\n      files: ['*.js'],\n      extends: ['plugin:@typescript-eslint/disable-type-checked'],\n    },\n  ],\n  // Added lines end\n};\n```\n\n----------------------------------------\n\nTITLE: Confusing Non-Null Assertion with 'in' and 'instanceof' in TypeScript\nDESCRIPTION: These examples demonstrate how non-null assertions adjacent to the `in` and `instanceof` operators can lead to confusion. The rule suggests either removing the assertion or wrapping the asserted expression in parentheses to improve code clarity.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-confusing-non-null-assertion.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\na! in b; // a non-null assertion(`!`) and an in test(`in`)\na !in b; // also a non-null assertion(`!`) and an in test(`in`)\n!(a in b); // a negated in test\n\na! instanceof b; // a non-null assertion(`!`) and an instanceof test(`instanceof`)\na !instanceof b; // also a non-null assertion(`!`) and an instanceof test(`instanceof`)\n!(a instanceof b); // a negated instanceof test\n```\n\n----------------------------------------\n\nTITLE: Correct Compound Assignment with skipCompoundAssignments: false\nDESCRIPTION: This snippet demonstrates correct compound assignment operations with `skipCompoundAssignments: false`, showing cases that are allowed (adding `1n` to `bigint`, or adding `1` to `number`).\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/restrict-plus-operands.mdx#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nlet foo: bigint = 0n;\nfoo += 1n;\n\nlet bar: number = 1;\nbar += 1;\n```\n\n----------------------------------------\n\nTITLE: Setting RuleTester Static Properties for Vitest (TS)\nDESCRIPTION: This code snippet demonstrates how to set up the RuleTester's static properties for usage with Vitest. It imports the vitest module and then assigns Vitest's testing hooks (afterAll, it, it.only, and describe) to the corresponding RuleTester static properties, enabling the RuleTester to integrate with and use Vitest's test execution environment.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/packages/Rule_Tester.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as vitest from 'vitest';\nimport { RuleTester } from '@typescript-eslint/rule-tester';\n\nRuleTester.afterAll = vitest.afterAll;\n\n// If you are not using vitest with globals: true (https://vitest.dev/config/#globals):\nRuleTester.it = vitest.it;\nRuleTester.itOnly = vitest.it.only;\nRuleTester.describe = vitest.describe;\n```\n\n----------------------------------------\n\nTITLE: Example of Unused Variable with typeof\nDESCRIPTION: This TypeScript code snippet demonstrates a scenario where a variable `box` is assigned a value but only used for its type using `typeof`. The @typescript-eslint/no-unused-vars rule will report an error because the variable is not used at runtime.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-unused-vars.mdx#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nconst box = {\n  //  ~~~\n  //  'box' is assigned a value but only used as a type.\n  value: 123,\n};\n\nexport type Box = typeof box;\n```\n\n----------------------------------------\n\nTITLE: Consuming new scope analysis package - TypeScript\nDESCRIPTION: This feature integrates a new scope analysis package, which improves the parser's ability to determine variable scope and resolve references. The new scope analysis package aims to provide more accurate scope information, allowing for better static analysis and refactoring tools.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/parser/CHANGELOG.md#_snippet_18\n\n\n\n----------------------------------------\n\nTITLE: Incorrect Getter/Setter Types - TypeScript\nDESCRIPTION: This example shows an incorrect implementation where the getter returns a `string`, but the setter expects a `number`. This violates the rule because a `string` is not assignable to a `number` without explicit type annotations or casting, potentially leading to runtime errors if the set attempts to assign a string to a number. This example is considered bad practice because assigning the property back to itself might cause an issue.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/related-getter-setter-pairs.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface Box {\n  get value(): string;\n  set value(newValue: number);\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Unbound Method Usage with ignoreStatic: true in TypeScript\nDESCRIPTION: This code shows correct usage of unbound methods with the `ignoreStatic: true` option enabled. When `ignoreStatic` is true, the rule assumes that static methods do not rely on a particular scope.  The example demonstrates that extracting a static method and calling it without binding is considered correct when the `ignoreStatic` option is set.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/unbound-method.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nclass OtherClass {\n  static log() {\n    console.log(OtherClass);\n  }\n}\n\n// With `ignoreStatic`, statics are assumed to not rely on a particular scope\nconst { log } = OtherClass;\n\nlog();\n```\n\n----------------------------------------\n\nTITLE: Correct Numeric Literal Types with ignoreNumericLiteralTypes: true (TypeScript)\nDESCRIPTION: This TypeScript code demonstrates correct usage of numeric literal types when the `ignoreNumericLiteralTypes` option of the `no-magic-numbers` rule is set to `true`. The type alias `SmallPrimes` uses the numeric literals 2, 3, 5, 7, and 11. Because the configuration `'{ \"ignoreNumericLiteralTypes\": true }'` tells the linter to ignore numeric literals within types, no error is reported.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-magic-numbers.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntype SmallPrimes = 2 | 3 | 5 | 7 | 11;\n\n```\n\n----------------------------------------\n\nTITLE: Adding ESLint CodePath selector types\nDESCRIPTION: This commit introduces ESLint `CodePath` selector types to the @typescript-eslint/utils package. It is associated with issue #7551. This enhancement provides developers with the necessary types for selecting `CodePath` elements within ESLint rules, improving rule development and analysis. The corresponding commit hash is 99a026fe41b4b169914352fe66e7d5d687b300bf.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/utils/CHANGELOG.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n99a026f(https://github.com/typescript-eslint/typescript-eslint/commit/99a026fe41b4b169914352fe66e7d5d687b300bf)\n```\n\n----------------------------------------\n\nTITLE: Incorrect Class Member Ordering\nDESCRIPTION: This TypeScript code snippet illustrates an incorrect member order in a class, violating the enforced rule of signature, method, constructor, and field.  The rule expects the signature to appear before the method, constructor and the field.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/member-ordering.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nclass Foo {\n  private C: string; // -> field\n  public D: string; // -> field\n  protected static E: string; // -> field\n\n  constructor() {} // -> constructor\n\n  public static A(): void {} // -> method\n  public B(): void {} // -> method\n\n  [Z: string]: any; // -> signature\n}\n```\n\n----------------------------------------\n\nTITLE: Class with Default Type Parameter\nDESCRIPTION: Shows a TypeScript class `C` with a default type parameter `T = number`. Providing `number` explicitly when creating a new instance of the class is redundant.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-unnecessary-type-arguments.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nclass C<T = number> {}\nnew C<number>();\n```\n\n----------------------------------------\n\nTITLE: Correct Function Usage with Default Type Parameter\nDESCRIPTION: Shows the correct usage of a function with a default type parameter. Omiting the type parameter uses the default, and specifying a different type is acceptable.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-unnecessary-type-arguments.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nfunction f<T = number>() {}\nf();\nf<string>();\n```\n\n----------------------------------------\n\nTITLE: Correct Nullable Boolean Usage (allowComparingNullableBooleansToTrue: false)\nDESCRIPTION: This code snippet showcases correct usage of nullable boolean variables when `allowComparingNullableBooleansToTrue` is set to `false`. It demonstrates using the nullable boolean variables directly or using the negation operator.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-unnecessary-boolean-literal-compare.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare const someUndefinedCondition: boolean | undefined;\nif (someUndefinedCondition) {\n}\n\ndeclare const someNullCondition: boolean | null;\nif (!someNullCondition) {\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Array Destructuring\nDESCRIPTION: Illustrates correct array destructuring with type annotations when the `arrayDestructuring` option is enabled. The type annotations `number[]`, `[number]`, and `[boolean, string]` explicitly define the types of variables `a`, `b`, `c`, and `d` respectively.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/typedef.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst [a]: number[] = [1];\nconst [b]: [number] = [2];\nconst [c, d]: [boolean, string] = [true, 'text'];\n\nfor (const [key, val] of new Map([['key', 1]])) {\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Readonly Class Properties with ignoreReadonlyClassProperties: true (TypeScript)\nDESCRIPTION: This TypeScript code demonstrates correct usage of `readonly` class properties when the `ignoreReadonlyClassProperties` option of the `no-magic-numbers` rule is set to `true`. The `Foo` class contains readonly properties (A, B, C, D) assigned to numeric literals. With `'{ \"ignoreReadonlyClassProperties\": true }'` set, the linter will ignore numeric literals used in readonly class properties.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-magic-numbers.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nclass Foo {\n  readonly A = 1;\n  readonly B = 2;\n  public static readonly C = 1;\n  static readonly D = 1;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Correct Addition with allowRegExp: true\nDESCRIPTION: This snippet shows a correct addition operation where `allowRegExp` is enabled, allowing a string to be added to a RegExp.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/restrict-plus-operands.mdx#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nlet fn = (a: string, b: RegExp) => a + b;\n```\n\n----------------------------------------\n\nTITLE: Fixing Missing Import Assertion Keys in visitor-keys (TypeScript)\nDESCRIPTION: This code snippet addresses a bug in the @typescript-eslint/visitor-keys package by adding the missing import assertion keys. This ensures that the TypeScript AST visitor correctly traverses and processes import assertions.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/visitor-keys/CHANGELOG.md#_snippet_12\n\nLANGUAGE: none\nCODE:\n```\n- **visitor-keys:** add missing import assertion keys ([#4178](https://github.com/typescript-eslint/typescript-eslint/issues/4178)) ([9c38b7f](https://github.com/typescript-eslint/typescript-eslint/commit/9c38b7f7fc3ce471a8f720c4a2fbce01f3ee12a4))\n```\n\n----------------------------------------\n\nTITLE: Declaring Types Directly\nDESCRIPTION: Alternative TypeScript code showing the direct declaration of a `Box` interface, instead of using `typeof` and a variable only used for type inference. It avoids assigning a value to a variable only for its type.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-unused-vars.mdx#_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nexport interface Box {\n  value: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Member Ordering for Class Expressions\nDESCRIPTION: This configuration specifies an order for class expressions only: methods, then the constructor, then fields. It does not apply to class declarations (use `classes` for them). Default settings will be used for class declarations and all other syntax constructs other than class expressions.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/member-ordering.mdx#_snippet_24\n\nLANGUAGE: jsonc\nCODE:\n```\n// .eslintrc.json\n{\n  \"rules\": {\n    \"@typescript-eslint/member-ordering\": [\n      \"error\",\n      { \"classExpressions\": [\"method\", \"constructor\", \"field\"] },\n    ],\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Extending with Strict Config (Legacy)\nDESCRIPTION: This snippet demonstrates extending the ESLint configuration using the `strict` configuration, using the Legacy Config style. It's more opinionated than `recommended`.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/users/Shared_Configurations.mdx#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  extends: ['plugin:@typescript-eslint/strict'],\n};\n```\n\n----------------------------------------\n\nTITLE: Incorrect Tuple Types with `allowTupleTypes: in-unions-and-intersections`\nDESCRIPTION: This code demonstrates the incorrect usage of tuple types when the `allowTupleTypes` option is set to `in-unions-and-intersections`. Tuple types are used in standalone declarations, which is not allowed under this configuration. The code defines type aliases using tuple types, but these usages are considered invalid by the ESLint rule with this option.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-type-alias.mdx#_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\ntype Foo = [number];\n\ntype Foo = [string];\n```\n\n----------------------------------------\n\nTITLE: Incorrect: Values modified within function calls\nDESCRIPTION: This example shows code incorrectly flagged due to limitations in TypeScript's type narrowing. The rule cannot track that the `condition` variable is modified within the function call `f()`, so it flags the condition as unnecessary.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-unnecessary-condition.mdx#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nlet condition = false;\n\nconst f = () => {\n  condition = Math.random() > 0.5;\n};\nf();\n\nif (condition) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Namespace Declaration in TypeScript\nDESCRIPTION: This snippet demonstrates the correct way to declare a custom TypeScript module using the `namespace` keyword. It also shows an example of a TypeScript module declaration to describe external APIs using `declare module`. This rule does not report on `declare module` statements.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-namespace-keyword.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nnamespace Example {}\n\ndeclare module 'foo' {}\n```\n\n----------------------------------------\n\nTITLE: Cache project glob resolution\nDESCRIPTION: This feature caches the resolution of project globs. This significantly improves performance when parsing multiple files within the same project, as it avoids redundant file system lookups. This enhancement reduces parsing time and improves the overall developer experience.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/typescript-estree/CHANGELOG.md#_snippet_32\n\nLANGUAGE: text\nCODE:\n```\n**typescript-estree:** cache project glob resolution ([#6367](https://github.com/typescript-eslint/typescript-eslint/issues/6367)) ([afae837](https://github.com/typescript-eslint/typescript-eslint/commit/afae8374df64101627808ccfeb5b715c865e910f))\n```\n\n----------------------------------------\n\nTITLE: Correct Code: allowLiterals - In Unions - TypeScript\nDESCRIPTION: Example of correct code when `allowLiterals` is set to `in-unions`.  Demonstrates how object literals are allowed as type aliases when part of unions.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-type-alias.mdx#_snippet_16\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype Foo = { name: string } | { age: number };\n```\n\n----------------------------------------\n\nTITLE: Initializing recommended-type-checked with Flat Config (ESM) and override\nDESCRIPTION: This code demonstrates a Flat Config using `tseslint.config` to combine several configs: `eslint.configs.recommended`, `tseslint.configs.recommendedTypeChecked`, and overrides to disable type checking on `.js` files. It configures parser options for project service and sets `tsconfigRootDir`.  It uses `tseslint.configs.disableTypeChecked` to disable type-aware linting on JavaScript files.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/users/Shared_Configurations.mdx#_snippet_17\n\nLANGUAGE: js\nCODE:\n```\nexport default tseslint.config(\n  eslint.configs.recommended,\n  tseslint.configs.recommendedTypeChecked,\n  {\n    languageOptions: {\n      parserOptions: {\n        projectService: true,\n        tsconfigRootDir: import.meta.dirname,\n      },\n    },\n  },\n  // Added lines start\n  {\n    files: ['**/*.js'],\n    extends: [tseslint.configs.disableTypeChecked],\n  },\n  // Added lines end\n);\n```\n\n----------------------------------------\n\nTITLE: Feature: Forbidding duplicated accessibility modifiers\nDESCRIPTION: This code snippet describes a feature addition to `typescript-estree` which prohibits the use of duplicate accessibility modifiers in TypeScript code. This restriction aims to improve code readability and prevent unintentional errors arising from redundant modifiers.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/ast-spec/CHANGELOG.md#_snippet_4\n\nLANGUAGE: Markdown\nCODE:\n```\n- **typescript-estree:** forbid duplicated accessibility modifiers\n```\n\n----------------------------------------\n\nTITLE: Adding fixture test framework\nDESCRIPTION: This commit adds a fixture test framework, along with some initial fixtures, to the ast-spec package. This allows for more comprehensive and reliable testing of AST parsing and handling.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/visitor-keys/CHANGELOG.md#_snippet_11\n\nLANGUAGE: Other\nCODE:\n```\n**ast-spec:** add fixture test framework and some initial fixtures ([#3258](https://github.com/typescript-eslint/typescript-eslint/issues/3258)) ([f3cf87b](https://github.com/typescript-eslint/typescript-eslint/commit/f3cf87bf20fd0542f92a96a318aa9ee5bf23c1f6))\n```\n\n----------------------------------------\n\nTITLE: Incorrect: Constant Loop Condition - Only Allowed Literals (Const)\nDESCRIPTION: This example shows incorrect code when `allowConstantLoopConditions` is set to `'only-allowed-literals'`. Using a `const` variable initialized with `true` is not allowed; only the literal value `true` is permitted.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-unnecessary-condition.mdx#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n// not even a variable that references the value of `true` is allowed, only\n// the literal value of `true` used directly.\n\nconst thisIsTrue = true;\n\nwhile (thisIsTrue) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Parser Services Interface - TypeScript\nDESCRIPTION: Defines the `ParserServices` interface, providing access to the TypeScript program, a map between ESTree nodes and TypeScript nodes, and a map between TypeScript nodes and ESTree nodes. These services are returned by `parseAndGenerateServices` when type information is enabled.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/packages/TypeScript_ESTree.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ParserServices {\n  program: ts.Program;\n  esTreeNodeToTSNodeMap: WeakMap<TSESTree.Node, ts.Node | ts.Token>;\n  tsNodeToESTreeNodeMap: WeakMap<ts.Node | ts.Token, TSESTree.Node>;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Integration Test Template\nDESCRIPTION: This TypeScript snippet provides a basic template for creating integration tests. It imports the integrationTest function and calls it with the filename and file extension pattern to lint.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/integration-tests/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { integrationTest } from '../tools/integration-test-base';\n\nintegrationTest(\n  __filename,\n  '*.ts' /* UPDATE THIS TO THE EXTENSION(s) TO LINT */,\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Type Information (typescript-eslint v5)\nDESCRIPTION: This code snippet demonstrates how to retrieve type information for an ESLint AST node using typescript-eslint v5. It involves accessing parser services, the TypeScript type checker, and mapping ESLint nodes to TypeScript nodes to call `getTypeAtLocation`.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/website/blog/2023-07-09-announcing-typescript-eslint-v6.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  // ...\n  create() {\n    const services = util.getParserServices(context);\n    const checker = services.program.getTypeChecker();\n    const tsNode = services.esTreeNodeToTSNodeMap.get(esNode);\n    const type = checker.getTypeAtLocation(node);\n\n    // ...\n  }\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Supporting private fields in-in syntax in typescript-estree\nDESCRIPTION: This commit implements support for the \"private fields in-in syntax\" feature within the typescript-estree. The \"in\" operator can now be used to check for the existence of private fields in JavaScript classes. This modification enables the parser to accurately parse and represent this new syntax.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/typescript-estree/CHANGELOG.md#_snippet_43\n\nLANGUAGE: plaintext\nCODE:\n```\n939d8ea\n```\n\n----------------------------------------\n\nTITLE: Supporting TypeScript 4.2 Syntax (TypeScript)\nDESCRIPTION: This code snippet introduces support for TypeScript 4.2 syntax in the @typescript-eslint packages, ensuring that the parser and related tools can correctly process new language features introduced in TypeScript 4.2.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/visitor-keys/CHANGELOG.md#_snippet_20\n\nLANGUAGE: none\nCODE:\n```\n- TypeScript 4.2 syntax support ([#3112](https://github.com/typescript-eslint/typescript-eslint/issues/3112)) ([2ebfb21](https://github.com/typescript-eslint/typescript-eslint/commit/2ebfb21ba6c88c793cfbd0e231e5803b2381694c))\n```\n\n----------------------------------------\n\nTITLE: Simplified RuleTester Configuration - TypeScript\nDESCRIPTION: This snippet demonstrates simplifying the `RuleTester` configuration by removing `ecmaVersion` and `sourceType` if they were previously explicitly specified. The default values for these options have changed, so explicit specification may no longer be necessary. Requires removing explicit `parserOptions` for `ecmaVersion` and `sourceType`.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/website/blog/2024-05-27-announcing-typescript-eslint-v8-beta.mdx#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RuleTester } from '@typescript-eslint/rule-tester'\n\n// Add this line\nconst ruleTester = new RuleTester();\n// Removed lines start\nconst ruleTester = new RuleTester({\n  parserOptions: {\n    ecmaVersion: 2018,\n    sourceType: 'module',\n  },\n});\n// Removed lines end\n```\n\n----------------------------------------\n\nTITLE: Configure Alphabetical Ordering Within Member Groups (JSONC)\nDESCRIPTION: This configuration specifies that members are ordered alphabetically within custom 'method' and 'field' member groups.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/member-ordering.mdx#_snippet_36\n\nLANGUAGE: jsonc\nCODE:\n```\n// .eslintrc.json\n{\n  \"rules\": {\n    \"@typescript-eslint/member-ordering\": [\n      \"error\",\n      {\n        \"default\": {\n          \"memberTypes\": [\"method\", \"field\"],\n          \"order\": \"alphabetically\",\n        },\n      },\n    ],\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing crashes with getTypeArguments in eslint-plugin\nDESCRIPTION: This commit addresses crashes in eslint-plugin caused by getTypeArguments when used with TypeScript versions older than 3.7. It resolves issue #6767.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/type-utils/CHANGELOG.md#_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Correct Enum Usage Example with enums: false in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates correct enum usage when the 'enums' option is set to 'false'. The code accesses the enum member 'Foo.FOO' within a function scope that's defined before the enum 'Foo' is declared. With 'enums' set to false, this usage is allowed.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-use-before-define.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction foo() {\n  return Foo.FOO;\n}\n\nenum Foo {\n  FOO,\n}\n```\n\n----------------------------------------\n\nTITLE: Supporting TSv4 Labelled Tuple Members\nDESCRIPTION: This feature adds support for TypeScript version 4 labelled tuple members within typescript-estree.  This update enables the correct parsing, handling, and analysis of labelled tuples, ensuring compatibility with codebases utilizing this TypeScript feature.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/visitor-keys/CHANGELOG.md#_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\n**typescript-estree:** support TSv4 labelled tuple members ([#2378](https://github.com/typescript-eslint/typescript-eslint/issues/2378)) ([00d84ff](https://github.com/typescript-eslint/typescript-eslint/commit/00d84ffbcbe9d0ec98bdb2f2ce59959a27ce4dbe))\n```\n\n----------------------------------------\n\nTITLE: Incorrect code with public constructor when constructors override is no-public (TypeScript)\nDESCRIPTION: Demonstrates incorrect TypeScript code where a constructor is explicitly declared as 'public', violating the rule when the 'constructors' override is set to 'no-public'.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/explicit-member-accessibility.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nclass Animal {\n  public constructor(protected animalName) {}\n  public get name() {\n    return this.animalName;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Update TypeScript to 5.0 RC in typescript-estree\nDESCRIPTION: This feature updates the TypeScript version to 5.0 Release Candidate (RC). It ensures compatibility with the upcoming TypeScript 5.0 features and syntax. This allows developers to begin testing and adopting TypeScript 5.0 with the typescript-eslint tooling.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/typescript-estree/CHANGELOG.md#_snippet_26\n\nLANGUAGE: text\nCODE:\n```\nupdate TypeScript to 5.0 RC ([#6570](https://github.com/typescript-eslint/typescript-eslint/issues/6570)) ([36ef0e1](https://github.com/typescript-eslint/typescript-eslint/commit/36ef0e16f31810c27dda299e739d1610b689d3ad))\n```\n\n----------------------------------------\n\nTITLE: Correct Mapped Types with `allowMappedTypes: in-unions`\nDESCRIPTION: This code demonstrates the correct usage of mapped types when the `allowMappedTypes` option is set to `in-unions`. Mapped types are used within union types, which is allowed under this configuration. The code defines type aliases using mapped types inside union types.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-type-alias.mdx#_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\ntype Foo<T, U> =\n  | { readonly [P in keyof T]: T[P] }\n  | { readonly [P in keyof U]: U[P] };\n\ntype Foo<T, U> = { [P in keyof T]?: T[P] } | { [P in keyof U]?: U[P] };\n```\n\n----------------------------------------\n\nTITLE: Mapped Types with `allowMappedTypes: always`\nDESCRIPTION: This code demonstrates the correct usage of mapped types when the `allowMappedTypes` option is set to `always`.  It showcases various forms of mapped types, including readonly and optional modifiers applied to properties within the mapped type. No dependencies are required. The code defines type aliases using mapped types.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-type-alias.mdx#_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\ntype Foo<T> = { readonly [P in keyof T]: T[P] };\n\ntype Foo<T> = { [P in keyof T]?: T[P] };\n\ntype Foo<T, U> =\n  | { readonly [P in keyof T]: T[P] }\n  | { readonly [P in keyof U]: U[P] };\n\ntype Foo<T, U> = { [P in keyof T]?: T[P] } | { [P in keyof U]?: U[P] };\n\ntype Foo<T, U> = { readonly [P in keyof T]: T[P] } & {\n  readonly [P in keyof U]: U[P];\n};\n\ntype Foo<T, U> = { [P in keyof T]?: T[P] } & { [P in keyof U]?: U[P] };\n```\n\n----------------------------------------\n\nTITLE: Use 'import' instead of 'path' triple-slash reference\nDESCRIPTION: This snippet shows the correct way to import a module when the `path` option is set to `'never'`. It uses an `import` statement to bring in the desired value.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/triple-slash-reference.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { value } from 'code';\n```\n\n----------------------------------------\n\nTITLE: Fixing type-only regression in typescript-estree\nDESCRIPTION: This commit addresses a type-only regression in typescript-estree specifically for consumers who have not yet upgraded to TypeScript 4.5. It resolves issues related to type definitions and ensures compatibility with older TypeScript versions.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/typescript-estree/CHANGELOG.md#_snippet_41\n\nLANGUAGE: plaintext\nCODE:\n```\n550b61e\n```\n\n----------------------------------------\n\nTITLE: Incorrect Static Constants Class - TypeScript\nDESCRIPTION: This snippet demonstrates an incorrect usage of a class as a static namespace.  The class `StaticConstants` contains only static members. The rule suggests using module-level exports instead. process.env.NODE_ENV is accessed to determine the environment.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-extraneous-class.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass StaticConstants {\n  static readonly version = 42;\n\n  static isProduction() {\n    return process.env.NODE_ENV === 'production';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Member Variable Declaration\nDESCRIPTION: Illustrates correct member variable declaration with type annotations when the `memberVariableDeclaration` option is enabled. The `delayedText` and `immediateTextImplicit` members are explicitly typed as `string`.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/typedef.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nclass ContainsText {\n  delayedText: string;\n  immediateTextImplicit: string = 'text';\n}\n```\n\n----------------------------------------\n\nTITLE: Correct `checkNumber` example - TypeScript\nDESCRIPTION: Example demonstrating the correct code when using the `checkNumber` option. It demonstrates the use of optional chaining.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-optional-chain.mdx#_snippet_10\n\nLANGUAGE: ts\nCODE:\n```\ndeclare const thing: number;\n\nthing?.toString();\n```\n\n----------------------------------------\n\nTITLE: Remove ts.sys watch program override\nDESCRIPTION: Removes an override of the `ts.sys` watch program within the typescript-estree parser.  This simplifies the parser's internal mechanisms and potentially improves performance or reduces conflicts with external tools.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/typescript-estree/CHANGELOG.md#_snippet_22\n\n\n\n----------------------------------------\n\nTITLE: Starting Local Development Server\nDESCRIPTION: Starts a local development server using yarn, which opens a browser window and allows for live updates. Changes are reflected without restarting the server.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/website/README.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Invalid void as generic type argument - TypeScript\nDESCRIPTION: This snippet shows examples where `void` is used as a generic type argument, which are flagged as warnings when `allowInGenericTypeArguments` is set to `['Ex.Mx.Tx']`. Types `Mx.Tx<void>`, `Tx<void>`, and `Promise<void>` will be flagged.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-invalid-void-type.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nlogAndReturn<void>(undefined);\n\ntype NotAllowedVoid1 = Mx.Tx<void>;\ntype NotAllowedVoid2 = Tx<void>;\ntype NotAllowedVoid3 = Promise<void>;\n```\n\n----------------------------------------\n\nTITLE: Enhancing Prefer Optional Chain Rule in ESLint\nDESCRIPTION: This commit enhances the `prefer-optional-chain` rule in ESLint. The rule now suggests `!foo || !foo.bar` as a valid match, improving the accuracy and usefulness of the rule in suggesting optional chaining replacements.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/utils/CHANGELOG.md#_snippet_13\n\nLANGUAGE: Typescript\nCODE:\n```\n**eslint-plugin:** [prefer-optional-chain] support suggesting `!foo || !foo.bar` as a valid match for the rule ([#5266](https://github.com/typescript-eslint/typescript-eslint/issues/5266)) ([aca935c](https://github.com/typescript-eslint/typescript-eslint/commit/aca935c9696712d4aff18144c4690db4d6ba9bf9))\n```\n\n----------------------------------------\n\nTITLE: Banning Import Extensions with no-restricted-syntax in ESLint\nDESCRIPTION: This code snippet demonstrates how to use the `no-restricted-syntax` rule in ESLint to ban file extensions in import statements.  It defines a function `banImportExtension` that generates configuration objects for different import syntax variations. This approach is faster than `import/extensions` as it avoids disk lookups, but may produce false positives.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/troubleshooting/typed-linting/Performance.mdx#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfunction banImportExtension(extension) {\n  const message = `Unexpected use of file extension (.${extension}) in import`;\n  const literalAttributeMatcher = `Literal[value=/\\\\.${extension}$/]`;\n  return [\n    {\n      // import foo from 'bar.js';\n      selector: `ImportDeclaration > ${literalAttributeMatcher}.source`,\n      message,\n    },\n    {\n      // const foo = import('bar.js');\n      selector: `ImportExpression > ${literalAttributeMatcher}.source`,\n      message,\n    },\n    {\n      // type Foo = typeof import('bar.js');\n      selector: `TSImportType > TSLiteralType > ${literalAttributeMatcher}`,\n      message,\n    },\n    {\n      // const foo = require('foo.js');\n      selector: `CallExpression[callee.name = \"require\"] > ${literalAttributeMatcher}.arguments`,\n      message,\n    },\n  ];\n}\n\nmodule.exports = {\n  // ... other config ...\n  rules: {\n    'no-restricted-syntax': [\n      'error',\n      ...banImportExtension('js'),\n      ...banImportExtension('jsx'),\n      ...banImportExtension('ts'),\n      ...banImportExtension('tsx'),\n    ],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Use 'import' instead of 'lib' triple-slash reference\nDESCRIPTION: This snippet shows the correct way to import a module when the `lib` option is set to `'never'`. It uses an `import` statement to bring in the desired value.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/triple-slash-reference.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { value } from 'code';\n```\n\n----------------------------------------\n\nTITLE: Disable Type-Checked Linting using Flat Config\nDESCRIPTION: This code snippet demonstrates how to disable type-checked linting for specific files (e.g., all `.js` files) using the Flat Config format in ESLint. It imports the `typescript-eslint` package and extends the configuration to include a `files` match that disables type checking for the specified files by extending `tseslint.configs.disableTypeChecked`. This approach is useful for legacy JavaScript code that may not be compatible with stricter TypeScript type checking.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/troubleshooting/typed-linting/index.mdx#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport tseslint from 'typescript-eslint';\n\nexport default tseslint.config(\n  // ... the rest of your config ...\n  {\n    files: ['**/*.js'],\n    extends: [tseslint.configs.disableTypeChecked],\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Key to StaticBlock in visitor-keys (TypeScript)\nDESCRIPTION: This code snippet adds the missing key for `StaticBlock` nodes to the visitor keys in the @typescript-eslint/visitor-keys package, ensuring correct traversal of static blocks in TypeScript classes.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/visitor-keys/CHANGELOG.md#_snippet_18\n\nLANGUAGE: none\nCODE:\n```\n- **visitor-keys:** add key to StaticBlock (v5) ([#3812](https://github.com/typescript-eslint/typescript-eslint/issues/3812)) ([fa35e22](https://github.com/typescript-eslint/typescript-eslint/commit/fa35e22702207baf07acb3eec11d3383721bf6b6))\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Correct Usage of Object and Unknown Types - TypeScript\nDESCRIPTION: This code snippet demonstrates the correct usage of the `object` and `unknown` types in TypeScript, as alternatives to the empty object type `{}`.  It showcases how to properly define types that represent either any object or any value, and demonstrates interfaces/types with properties.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-empty-object-type.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nlet anyObject: object;\nlet anyValue: unknown;\n\ntype AnyObjectA = object;\ntype AnyValueA = unknown;\n\ntype AnyObjectB = object;\ntype AnyValueB = unknown;\n\nlet objectWith: { property: boolean };\n\ninterface InterfaceWith {\n  property: boolean;\n}\n\ntype TypeWith = { property: boolean };\n```\n\n----------------------------------------\n\nTITLE: Enum with Literal Assignments (Correct)\nDESCRIPTION: This code demonstrates correct usage of the 'prefer-literal-enum-member' rule, where enum members are assigned literal values or no initializers.  This includes strings, template literals without interpolation, and numbers. It uses TypeScript.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-literal-enum-member.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nenum Valid {\n  A, // No initializer; initialized with ascending integers starting from 0\n  B = 'TestStr', // A regular string\n  C = `A template literal string`, // A template literal without interpolation\n  D = 4, // A number\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Jest Snapshots in eslint-plugin package\nDESCRIPTION: This code snippet shows how to update Jest snapshots for the eslint-plugin package using yarn.  The `-u` flag tells Jest to update snapshots.  The commands are run from within the `packages/eslint-plugin` directory.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/contributing/Pull_Requests.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd packages/eslint-plugin\nyarn test docs -u\nyarn test schemas -u\n```\n\n----------------------------------------\n\nTITLE: Defining Options Interface and Defaults in TypeScript\nDESCRIPTION: This TypeScript snippet defines an interface 'Options' extending 'BaseNoUseBeforeDefineOptions' with boolean properties 'enums', 'typedefs', and 'ignoreTypeReferences'. It also defines a 'defaultOptions' object with these properties set to true, inheriting from 'baseNoUseBeforeDefineDefaultOptions'.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-use-before-define.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Options extends BaseNoUseBeforeDefineOptions {\n  enums?: boolean;\n  typedefs?: boolean;\n  ignoreTypeReferences?: boolean;\n}\n\nconst defaultOptions: Options = {\n  ...baseNoUseBeforeDefineDefaultOptions,\n  enums: true,\n  typedefs: true,\n  ignoreTypeReferences: true,\n};\n```\n\n----------------------------------------\n\nTITLE: Supporting new extensions (TS 4.7)\nDESCRIPTION: This commit adds support for new language extensions introduced in TypeScript version 4.7. This ensures that the parser can correctly handle these new syntax features.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/visitor-keys/CHANGELOG.md#_snippet_8\n\nLANGUAGE: Other\nCODE:\n```\n[4.7] support new extensions ([#5027](https://github.com/typescript-eslint/typescript-eslint/issues/5027)) ([efc147b](https://github.com/typescript-eslint/typescript-eslint/commit/efc147b04dce52ab17415b6a4ae4076b944b9036))\n```\n\n----------------------------------------\n\nTITLE: Allow Number in template literals\nDESCRIPTION: Demonstrates how to allow number types in template literals using the `allowNumber` option. Note that floating point numbers may not produce expected results.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/restrict-template-expressions.mdx#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst arg = 123;\nconst msg1 = `arg = ${arg}`;\nconst msg2 = `arg = ${arg || 'zero'}`;\n```\n\n----------------------------------------\n\nTITLE: Supporting TypeScript 4.8\nDESCRIPTION: This code snippet adds support for TypeScript 4.8 to the @typescript-eslint scope-manager.  This ensures compatibility with new language features and syntax changes introduced in TypeScript 4.8.  It depends on the TypeScript compiler's AST.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/scope-manager/CHANGELOG.md#_snippet_11\n\nLANGUAGE: none\nCODE:\n```\nsupport TypeScript 4.8 ([#5551](https://github.com/typescript-eslint/typescript-eslint/issues/5551)) ([81450ed](https://github.com/typescript-eslint/typescript-eslint/commit/81450ed7eaede74b384e9a91a84e9b4d34513866))\n```\n\n----------------------------------------\n\nTITLE: Allowing Public Parameter Properties in TypeScript - Correct Example\nDESCRIPTION: These TypeScript class examples demonstrate code that adheres to the rule when `{ \"allow\": [\"public\"] }` is specified. The rule allows constructors with a simple parameter or a `public` parameter property.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/parameter-properties.mdx#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nclass Foo {\n  constructor(name: string) {}\n}\n\nclass Foo {\n  constructor(public name: string) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Adding JavaScript support to tsconfig.json\nDESCRIPTION: This code snippet demonstrates how to modify a `tsconfig.json` file to include JavaScript files for linting. It adds a `*.js` glob pattern to the `include` array, enabling the TypeScript compiler to process and provide type information for JavaScript files. This is necessary when using type-aware linting on JavaScript files within a TypeScript project.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/troubleshooting/typed-linting/index.mdx#_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n       \"include\": [\n         \"src\",\n       + \"*.js\"\n       ]\n\n```\n\n----------------------------------------\n\nTITLE: Dropping support for Node.js v12\nDESCRIPTION: This breaking change removes support for Node.js version 12. Users relying on this version will need to upgrade to a supported version (e.g., v14, v16, v18 or v20) to continue using the library.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/typescript-estree/CHANGELOG.md#_snippet_40\n\nLANGUAGE: text\nCODE:\n```\n* drops support for node v12\n```\n\n----------------------------------------\n\nTITLE: Fixing AwaitExpression Argument Type - Typescript\nDESCRIPTION: This commit corrects the type of AwaitExpression.argument within the AST specification. The corrected type ensures the argument of an await expression is accurately represented in the AST. This fix directly modifies the AST definition in @typescript-eslint/ast-spec.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/ast-spec/CHANGELOG.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\ncorrect `AwaitExpression.argument` type\n```\n\n----------------------------------------\n\nTITLE: Add EXPERIMENTAL_useProjectService Option\nDESCRIPTION: Introduces a new experimental option, `EXPERIMENTAL_useProjectService`, which enables the use of the TypeScript project service within typescript-estree. This allows the parser to leverage TypeScript's language service features for more accurate and context-aware parsing.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/typescript-estree/CHANGELOG.md#_snippet_23\n\n\n\n----------------------------------------\n\nTITLE: Running Prettier Check via NPM Script\nDESCRIPTION: This bash script demonstrates how to run Prettier's `--check` flag as an npm script to detect unformatted files.  It's intended for use in CI pipelines or as a pre-commit hook, and provides an alternative to using `eslint-plugin-prettier` for performance reasons.  It shows the command that will verify if all files in the project are formatted according to Prettier's rules.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/troubleshooting/typed-linting/Performance.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run prettier --check .\n```\n\n----------------------------------------\n\nTITLE: Add custom module resolution support: Typescript\nDESCRIPTION: This feature enables support for custom module resolution within the TypeScript parser. This allows users to configure how modules are resolved, enabling them to use custom module loaders or resolution strategies. The commit associated with this change is d48429d97326545bb727f88ce9056270b1599a31.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/parser/CHANGELOG.md#_snippet_11\n\n\n\n----------------------------------------\n\nTITLE: Banning Confusing Property Uses with no-restricted-syntax (JSON)\nDESCRIPTION: Configures the `no-restricted-syntax` ESLint rule to ban accessing `constructor.name` and using get/set accessors.  The `selector` property specifies the AST nodes to restrict, and `message` provides a custom error message.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/troubleshooting/faqs/General.mdx#_snippet_3\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"rules\": {\n    \"no-restricted-syntax\": [\n      \"error\",\n\n      // Ban accessing `constructor.name`:\n      {\n        \"selector\": \"MemberExpression[object.property.name='constructor'][property.name='name']\",\n        \"message\": \"'constructor.name' is not reliable after code minifier usage.\",\n      },\n\n      // Ban get and set accessors:\n      {\n        \"selector\": \"Property:matches([kind = \\\"get\\\"], [kind = \\\"set\\\"]), MethodDefinition:matches([kind = \\\"get\\\"], [kind = \\\"set\\\"])\",\n        \"message\": \"Don't use get and set accessors.\",\n      },\n    ],\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Class with Constructor (allowEmpty) - TypeScript\nDESCRIPTION: This snippet showcases an incorrect example where the `allowEmpty` option is set to `true`, but the class contains a constructor, making it invalid under this option (as the option implies allowing ONLY empty classes). The constructor logs a message to the console.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-extraneous-class.mdx#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nclass NoFields {\n  constructor() {\n    console.log('Hello, world!');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fix: Adding JSXElement type to JSXAttribute['value']\nDESCRIPTION: This code snippet details a fix addressing the missing `JSXElement` type for `JSXAttribute['value']`. The addition ensures that JSX elements can be correctly assigned as values for JSX attributes, resolving parsing and type-checking issues related to JSX.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/ast-spec/CHANGELOG.md#_snippet_5\n\nLANGUAGE: Markdown\nCODE:\n```\n- **ast-spec:** add `JSXElement` type to the `JSXAttribute['value']`\n```\n\n----------------------------------------\n\nTITLE: Disallow 'types' reference with 'prefer-import'\nDESCRIPTION: This snippet demonstrates the `prefer-import` option, which only reports if an `import` from the same location already exists.  It shows an incorrect usage of a triple-slash reference when an import statement for the same module is present.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/triple-slash-reference.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types=\"code\" />\n\nimport { valueA } from 'code';\n\nglobalThis.valueB;\n```\n\n----------------------------------------\n\nTITLE: Correct Type Definition (Sorted) - TypeScript\nDESCRIPTION: This code snippet demonstrates a correctly sorted type definition in TypeScript, where the union type `A | B` is alphabetically ordered. This will satisfy the rule and not be flagged as an error.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/sort-type-constituents.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype T1 = A | B;\n\ntype T2 = { a: string } & { b: string };\n\ntype T3 = [1, 2, 3] & [1, 2, 4];\n\ntype T4 =\n  | A\n  | B\n  | number[]\n  | string[]\n  | any\n  | string\n  | readonly number[]\n  | readonly string[]\n  | 'a'\n  | 'a'\n  | 'b'\n  | 'b'\n  | (() => string)\n  | (() => void)\n  | { a: string }\n  | { b: string }\n  | [1, 2, 3]\n  | [1, 2, 4];\n```\n\n----------------------------------------\n\nTITLE: Allowing RC version as devDependency - TypeScript\nDESCRIPTION: This feature allows the use of typescript@5.3.0-RC as a devDependency within the project. The commit associated with this change is b6c40b42b68d5567c7468030ee45b9b84bec4c4d.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/ast-spec/CHANGELOG.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nallow typescript@5.3.0-RC as devDependency ([#7821](https://github.com/typescript-eslint/typescript-eslint/issues/7821)) ([b6c40b4](https://github.com/typescript-eslint/typescript-eslint/commit/b6c40b42b68d5567c7468030ee45b9b84bec4c4d))\n```\n\n----------------------------------------\n\nTITLE: Correct `checkUnknown` example - TypeScript\nDESCRIPTION: Example demonstrating the correct code when using the `checkUnknown` option. It demonstrates the use of optional chaining.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-optional-chain.mdx#_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\ndeclare const thing: unknown;\n\nthing?.toString();\n```\n\n----------------------------------------\n\nTITLE: Adding an AST Node\nDESCRIPTION: This snippet demonstrates how to add a new blockquote AST node containing the rule's description extracted from `meta.docs.description`. The description is split by backticks to create inline code nodes. This blockquote is then prepended to the beginning of the AST's children array.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/website/blog/2022-09-18-automated-rule-docs-with-docusaurus-and-remark.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nroot.children.unshift({\n  children: [\n    {\n      children: meta.docs.description\n        .split(/`(.+?)`/)\n        .map((value, index, array) => ({\n          type: index % 2 === 0 ? 'text' : 'inlineCode',\n          value: index === array.length - 1 ? `${value}.` : value,\n        })),\n      type: 'paragraph',\n    },\n  ],\n  type: 'blockquote',\n});\n\n```\n\n----------------------------------------\n\nTITLE: Correct Exhaustive Switch Example - Union Types with Default - TypeScript\nDESCRIPTION: This code demonstrates a correct usage of a switch statement over a union type ('Day') using a `default` case.  The `considerDefaultExhaustiveForUnions` option must be set to `true` for this to be considered exhaustive. The switch handles 'Monday' explicitly and uses a `default` case to cover all other possible values, satisfying the 'switch-exhaustiveness-check' rule under the specified configuration.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/switch-exhaustiveness-check.mdx#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n// requires `considerDefaultExhaustiveForUnions` to be set to true\n\ntype Day =\n  | 'Monday'\n  | 'Tuesday'\n  | 'Wednesday'\n  | 'Thursday'\n  | 'Friday'\n  | 'Saturday'\n  | 'Sunday';\n\ndeclare const day: Day;\nlet result = 0;\n\nswitch (day) {\n  case 'Monday':\n    result = 1;\n    break;\n  default:\n    result = 42;\n}\n```\n\n----------------------------------------\n\nTITLE: Fix: Fixing invalid parsing error with update expression on non-null assertion\nDESCRIPTION: This code snippet corrects an issue where an invalid parsing error occurred when using an update expression on a non-null assertion in `typescript-estree`. The fix resolves this parsing issue, allowing update expressions to be correctly processed in conjunction with non-null assertions without generating erroneous errors.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/ast-spec/CHANGELOG.md#_snippet_7\n\nLANGUAGE: Markdown\nCODE:\n```\n- **typescript-estree:** fix invalid parsing error when use update expression on non-null assertion\n```\n\n----------------------------------------\n\nTITLE: Correct example with 'error-handling-correctness-only' option\nDESCRIPTION: Shows an example of code that is considered correct with the 'error-handling-correctness-only' option, which allows for inconsistent awaiting of promises outside of error-handling contexts.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/return-await.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nasync function asyncFunction(): Promise<void> {\n  if (Math.random() < 0.5) {\n    return await Promise.resolve();\n  } else {\n    return Promise.resolve();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: createProgram Utility - Flat Config - JavaScript\nDESCRIPTION: Example of using the `createProgram` utility to provide a TypeScript program instance to the `programs` option in a flat ESLint configuration (`eslint.config.mjs`).\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/packages/Parser.mdx#_snippet_12\n\nLANGUAGE: js\nCODE:\n```\nimport * as parser from '@typescript-eslint/parser';\n\nexport default [\n  {\n    parserOptions: {\n      programs: [parser.createProgram('tsconfig.json')],\n    },\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Correct Variable Declaration\nDESCRIPTION: Illustrates correct variable declaration with type annotations when the `variableDeclaration` option is enabled. The `text`, `initialText`, and `delayedText` variables are explicitly typed as `string`.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/typedef.mdx#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nconst text: string = 'text';\nlet initialText: string = 'text';\nlet delayedText: string;\n```\n\n----------------------------------------\n\nTITLE: Incorrect Required Members First (Typescript)\nDESCRIPTION: This TypeScript code displays incorrect placement of required members first; 'a' and 'c' should appear before 'b?'.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/member-ordering.mdx#_snippet_49\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Foo {\n  a: boolean;\n  b?: number;\n  c: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Building the typescript-eslint repository (Shell)\nDESCRIPTION: This command builds the typescript-eslint repository using Yarn. This step is crucial to ensure that the local changes are compiled and ready to be linked and tested in a downstream repository. It ensures the `dist` folders exist with the updated code.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/contributing/local-development/Local_Linking.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn build\n```\n\n----------------------------------------\n\nTITLE: Correct template literal usage\nDESCRIPTION: Examples of correct code where only string values or string-like types are used within template literals, ensuring predictable string outputs.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/restrict-template-expressions.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst arg = 'foo';\nconst msg1 = `arg = ${arg}`;\nconst msg2 = `arg = ${arg || 'default'}`;\n\nconst stringWithKindProp: string & { _kind?: 'MyString' } = 'foo';\nconst msg3 = `stringWithKindProp = ${stringWithKindProp}`;\n```\n\n----------------------------------------\n\nTITLE: Disallow Namespaces allowDeclarations false - Correct - TypeScript\nDESCRIPTION: This example demonstrates code that adheres to the `no-namespace` rule when `allowDeclarations` option is false.  `declare module 'foo' {}` is considered correct as it describes an external API.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-namespace.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare module 'foo' {}\n```\n\n----------------------------------------\n\nTITLE: Treating `this` as ThisExpression\nDESCRIPTION: This feature treats the `this` keyword within `typeof this` expressions as a `ThisExpression`. This enhancement likely improves the accuracy of type checking and analysis for code that uses this pattern.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/scope-manager/CHANGELOG.md#_snippet_15\n\nLANGUAGE: text\nCODE:\n```\nb04b2ce1ba90d94718891f2562dd210a6d7b8609\n```\n\n----------------------------------------\n\nTITLE: Ignoring Properties with `no-inferrable-types` in TypeScript\nDESCRIPTION: This code snippet demonstrates how to ignore properties with the `no-inferrable-types` rule in TypeScript when the `ignoreProperties` option is set to `true`. Explicit type annotations are used for class properties with initial values, which are considered valid when the option is enabled. This allows for explicit typing of class properties while still benefiting from type inference elsewhere.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-inferrable-types.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nclass Foo {\n  prop: number = 5;\n}\n```\n\n----------------------------------------\n\nTITLE: Invalid void as 'this' parameter - TypeScript\nDESCRIPTION: This snippet shows examples where `void` is used as a `this` parameter, which are flagged as warnings when `allowAsThisParameter` is set to `false`. Functions `doThing` and `helper`, and method `callback` will raise errors.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-invalid-void-type.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nfunction doThing(this: void) {}\nclass Example {\n  static helper(this: void) {}\n  callback(this: void) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Extending with Strict Type Checked Config (Flat)\nDESCRIPTION: This snippet shows how to extend the ESLint configuration using the `strict-type-checked` configuration, using the Flat Config style. It requires type information and is more opinionated.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/users/Shared_Configurations.mdx#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nexport default tseslint.config(\n  tseslint.configs.strictTypeChecked,\n);\n```\n\n----------------------------------------\n\nTITLE: Defining options for class-methods-use-this rule (TypeScript)\nDESCRIPTION: This TypeScript code defines the interface for the options used to configure the `class-methods-use-this` ESLint rule. It extends `BaseClassMethodsUseThisOptions` and adds specific options such as `ignoreOverrideMethods` and `ignoreClassesThatImplementAnInterface`. The `defaultOptions` constant provides the default values for these options.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/class-methods-use-this.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Options extends BaseClassMethodsUseThisOptions {\n  ignoreOverrideMethods?: boolean;\n  ignoreClassesThatImplementAnInterface?: boolean | 'public-fields';\n}\n\nconst defaultOptions: Options = {\n  ...baseClassMethodsUseThisOptions,\n  ignoreOverrideMethods: false,\n  ignoreClassesThatImplementAnInterface: false,\n};\n```\n\n----------------------------------------\n\nTITLE: TypeScript Declaration: withoutProjectParserOptions\nDESCRIPTION: This TypeScript code declares the `withoutProjectParserOptions` function. It takes `TSESTreeOptions` as input and returns `TSESTreeOptions`. This function is designed to remove project-related parser options, enabling isolated parsing of individual files.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/packages/Parser.mdx#_snippet_14\n\nLANGUAGE: TypeScript\nCODE:\n```\ndeclare function withoutProjectParserOptions(\n  options: TSESTreeOptions,\n): TSESTreeOptions;\n```\n\n----------------------------------------\n\nTITLE: Function with Default Type Parameter\nDESCRIPTION: Demonstrates a TypeScript function `f` with a default type parameter `T = number`. Providing the explicit type argument `number` when calling the function is considered unnecessary and will be flagged by the rule.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-unnecessary-type-arguments.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction f<T = number>() {}\nf<number>();\n```\n\n----------------------------------------\n\nTITLE: Redeclaration with disable comment\nDESCRIPTION: Demonstrates how to intentionally redeclare a variable with the same name as a type by using an eslint-disable-next-line comment.  This allows bypassing the no-redeclare rule in specific cases where it is desired. The option is configured inline using the 'option' property.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-redeclare.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype something = string;\n// eslint-disable-next-line @typescript-eslint/no-redeclare -- intentionally naming the variable the same as the type\nconst something = 2;\n```\n\n----------------------------------------\n\nTITLE: Correct code with parameter property when parameterProperties override is no-public (TypeScript)\nDESCRIPTION: Shows correct TypeScript code where a constructor parameter has a `public` access modifier, when `accessibility` is `off`, and `overrides: { parameterProperties: 'no-public' }`\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/explicit-member-accessibility.mdx#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nclass Animal {\n  constructor(public animalName: string) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Import Team Components\nDESCRIPTION: Imports the `TeamBioDivider` and `TeamBioList` components from the `@site/src/components/team/` directory. These components are likely used for rendering team member information and dividers on the page.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/maintenance/Team.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { TeamBioDivider } from '@site/src/components/team/TeamBioDivider';\nimport { TeamBioList } from '@site/src/components/team/TeamBioList';\n```\n\n----------------------------------------\n\nTITLE: Correct Class Expression Member Ordering\nDESCRIPTION: This TypeScript code snippet shows a correct member order in a class expression, adhering to the enforced rule of methods, then constructor, then fields.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/member-ordering.mdx#_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nconst foo = class {\n  public static A(): void {} // -> method\n  public B(): void {} // -> method\n\n  constructor() {} // -> constructor\n\n  private C: string; // -> field\n  public D: string; // -> field\n  protected static E: string; // -> field\n};\n```\n\n----------------------------------------\n\nTITLE: Correct: Constant Loop Condition - Always\nDESCRIPTION: This example shows correct code when `allowConstantLoopConditions` is set to `'always'`. Constant conditions in `while`, `for`, and `do-while` loops are allowed.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-unnecessary-condition.mdx#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nwhile (true) {\n  // ...\n}\n\nfor (; true; ) {\n  // ...\n}\n\ndo {\n  // ...\n} while (true);\n```\n\n----------------------------------------\n\nTITLE: Adding `no-redundant-type-constituents` rule\nDESCRIPTION: The `no-redundant-type-constituents` rule is added to the eslint plugin. This rule likely identifies and flags cases where type definitions are unnecessarily complex or redundant.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/type-utils/CHANGELOG.md#_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Supporting Typescript 4.8 in Typescript ESLint\nDESCRIPTION: This commit updates the project to support TypeScript 4.8. This likely involves updating the parser and other related components to handle the new syntax and features introduced in TypeScript 4.8.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/utils/CHANGELOG.md#_snippet_12\n\nLANGUAGE: Typescript\nCODE:\n```\nsupport TypeScript 4.8 ([#5551](https://github.com/typescript-eslint/typescript-eslint/issues/5551)) ([81450ed](https://github.com/typescript-eslint/typescript-eslint/commit/81450ed7eaede74b384e9a91a84e9b4d34513866))\n```\n\n----------------------------------------\n\nTITLE: Check relative/root paths for printing file path errors\nDESCRIPTION: This bug fix addresses an issue where file paths were incorrectly printed in error messages. It ensures that relative and root paths are handled correctly, providing more accurate and user-friendly error reporting. This fix improves the developer experience by making it easier to identify the source of errors.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/typescript-estree/CHANGELOG.md#_snippet_28\n\nLANGUAGE: text\nCODE:\n```\n**typescript-estree:** check for relative/root paths in printing file path errors ([#6491](https://github.com/typescript-eslint/typescript-eslint/issues/6491)) ([dc14242](https://github.com/typescript-eslint/typescript-eslint/commit/dc1424298493f1ee2e5a357e103c504655546d61))\n```\n\n----------------------------------------\n\nTITLE: Adding Dependency Constraint Filtering to RuleTester in Typescript\nDESCRIPTION: This commit adds dependency constraint filtering to the `RuleTester`. This feature allows users to specify version ranges for dependencies, enabling rules to be tested against specific dependency versions.  This is crucial for ensuring compatibility and preventing unexpected behavior due to dependency updates.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/utils/CHANGELOG.md#_snippet_11\n\nLANGUAGE: Typescript\nCODE:\n```\n**utils:** add dependency constraint filtering for `RuleTester` ([#5750](https://github.com/typescript-eslint/typescript-eslint/issues/5750)) ([121f4c0](https://github.com/typescript-eslint/typescript-eslint/commit/121f4c0e7252def95d917e4734e933e53e29d501))\n```\n\n----------------------------------------\n\nTITLE: Adding EXPERIMENTAL_useProjectService to typescript-estree TypeScript\nDESCRIPTION: This code snippet introduces the EXPERIMENTAL_useProjectService option to the typescript-estree package. This new feature enables the use of the TypeScript project service. It aims to provide more accurate and comprehensive analysis of TypeScript code within the eslint environment. It is part of version 6.1.0 of the package.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/type-utils/CHANGELOG.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n* **typescript-estree:** add EXPERIMENTAL_useProjectService option to use TypeScript project service ([#6754](https://github.com/typescript-eslint/typescript-eslint/issues/6754)) ([6d3d162](https://github.com/typescript-eslint/typescript-eslint/commit/6d3d162ce032ebcf5f892a4edfb897797fc96191))\n```\n\n----------------------------------------\n\nTITLE: Type-Only Import Usage Error\nDESCRIPTION: Shows how attempting to use a value imported as only a type will result in a TypeScript error. This example demonstrates the compile-time checking of type-only imports.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/website/blog/2023-02-24-consistent-type-exports-and-imports-why-and-how.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { SomeThing } from './some-module.js';\n\nnew SomeThing();\n//  ~~~~~~~~~\n// 'SomeThing' cannot be used as a value\n// because it was imported using 'import type'.\n```\n\n----------------------------------------\n\nTITLE: Removing TypeScript Version: Updating MIN_TS_VERSION_SEMVER\nDESCRIPTION: The `MIN_TS_VERSION_SEMVER` constant in `packages/website/src/components/OptionsSelector.tsx` should be updated.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/maintenance/pull-requests/Dependency_Version_Upgrades.mdx#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nUpdate `MIN_TS_VERSION_SEMVER` in `packages/website/src/components/OptionsSelector.tsx`\n```\n\n----------------------------------------\n\nTITLE: Defaulting to parse all JSDoc and provide options to configure it\nDESCRIPTION: This change makes the parser default to parsing all JSDoc comments and provides options for configuring this behavior. This allows for more comprehensive JSDoc analysis and customization.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/typescript-estree/CHANGELOG.md#_snippet_10\n\nLANGUAGE: Markdown\nCODE:\n```\n* default to parse all JSDoc and provide options to configure it ([#7999](https://github.com/typescript-eslint/typescript-eslint/issues/7999)) ([779e13e](https://github.com/typescript-eslint/typescript-eslint/commit/779e13ec86f92b94a96ecdf81cbc36120a132ff6))\n```\n\n----------------------------------------\n\nTITLE: Type-Only Import for Isolated Transpilers\nDESCRIPTION: Shows how using `import type` clarifies that the imported value is only used as a type, allowing isolated module transpilers to safely remove the import during transpilation to JavaScript.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/website/blog/2023-02-24-consistent-type-exports-and-imports-why-and-how.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Now we know this file's SomeThing is only used as a type.\n// We can remove this import in transpiled JavaScript syntax.\nimport type { SomeThing } from './may-include-side-effects.js';\n```\n\n----------------------------------------\n\nTITLE: Feature: Allowing parserOptions.project: false\nDESCRIPTION: This code snippet outlines a feature enhancement that permits setting `parserOptions.project` to `false`. This enables users to bypass project-based type-checking, offering more flexibility when processing code without relying on full project context. This allows faster linting times in certain scenarios.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/ast-spec/CHANGELOG.md#_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\n- allow `parserOptions.project: false`\n```\n\n----------------------------------------\n\nTITLE: Fixing invalid parsing error when use update expression on non-null assertion\nDESCRIPTION: This addresses a parsing error that occurred when using update expressions (e.g., `x++`, `x--`) on non-null assertions (e.g., `x!`) within the typescript-estree parser. The fix ensures correct parsing of these expressions.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/typescript-estree/CHANGELOG.md#_snippet_5\n\nLANGUAGE: Markdown\nCODE:\n```\n- **typescript-estree:** fix invalid parsing error when use update expression on non-null assertion\n```\n\n----------------------------------------\n\nTITLE: Rewriting Imports with Type Modifiers\nDESCRIPTION: Shows how TypeScript's `--verbatimModuleSyntax` compiler option rewrites imports with type modifiers and how `typescript-eslint/no-import-type-side-effects` flags cases when an inline `type` can be rewritten to use a top-level `type` qualifier.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/website/blog/2023-02-24-consistent-type-exports-and-imports-why-and-how.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n- import { type A } from 'xyz';\n+ import type { A } from 'xyz';\n```\n\n----------------------------------------\n\nTITLE: Updating @eslint-community/regexpp dependency\nDESCRIPTION: This snippet shows the update of the `@eslint-community/regexpp` dependency to version 4.11.0.  This dependency update likely brings performance improvements or bug fixes to the regex processing used within the project.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/visitor-keys/CHANGELOG.md#_snippet_4\n\nLANGUAGE: None\nCODE:\n```\n- **deps:** update dependency @eslint-community/regexpp to v4.11.0\n```\n\n----------------------------------------\n\nTITLE: Incorrect `checkBigInt` example - TypeScript\nDESCRIPTION: Example demonstrating incorrect code when using the `checkBigInt` option. It shows how chained logical AND can be replaced by an optional chain.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-optional-chain.mdx#_snippet_13\n\nLANGUAGE: ts\nCODE:\n```\ndeclare const thing: bigint;\n\nthing && thing.toString();\n```\n\n----------------------------------------\n\nTITLE: Allow Never in template literals\nDESCRIPTION: Demonstrates how to allow the `never` type (or types potentially narrowed to `never`) in template literals using the `allowNever` option.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/restrict-template-expressions.mdx#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst arg = 'something';\nconst msg1 = typeof arg === 'string' ? arg : `arg = ${arg}`;\n```\n\n----------------------------------------\n\nTITLE: Stabilizing EXPERIMENTAL_useProjectService\nDESCRIPTION: This snippet describes the stabilization of `EXPERIMENTAL_useProjectService` as `projectService` within `typescript-estree`. This change signifies that the project service functionality is now considered stable and ready for general use.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/visitor-keys/CHANGELOG.md#_snippet_2\n\nLANGUAGE: None\nCODE:\n```\n- **typescript-estree:** stabilize EXPERIMENTAL_useProjectService as projectService\n```\n\n----------------------------------------\n\nTITLE: Replacing deprecated prefer-ts-expect-error rule in TypeScript ESLint\nDESCRIPTION: This snippet illustrates the removal of the `@typescript-eslint/prefer-ts-expect-error` rule and suggests replacing it with either a recommended configuration or enabling the `@typescript-eslint/ban-ts-comment` rule. It highlights the necessary changes to maintain equivalent functionality.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/website/blog/2024-07-31-announcing-typescript-eslint-v8.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n-  '@typescript-eslint/prefer-ts-expect-error': '...',  // Remove this line\n+  '@typescript-eslint/ban-ts-comment': '...' // Add this line (or use recommended config)\n```\n\n----------------------------------------\n\nTITLE: Visiting typeParameters in TSTypeQuery (TS4.7)\nDESCRIPTION: This commit allows the visiting of type parameters in TSTypeQuery nodes, specifically for TypeScript version 4.7. It addresses an issue where these parameters were not being properly traversed.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/visitor-keys/CHANGELOG.md#_snippet_7\n\nLANGUAGE: Other\nCODE:\n```\n[TS4.7] allow visiting of typeParameters in TSTypeQuery ([#5166](https://github.com/typescript-eslint/typescript-eslint/issues/5166)) ([dc1f930](https://github.com/typescript-eslint/typescript-eslint/commit/dc1f9309cf04aa7314e758980ac687558482f47f))\n```\n\n----------------------------------------\n\nTITLE: Correct Interface Overloading - TypeScript\nDESCRIPTION: This snippet showcases the use of an interface with overloaded call signatures. Since the interface defines multiple call signatures, the rule does not flag this as an error. The snippet also shows the equivalent intersection type.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-function-type.mdx#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// multiple call signatures (overloads) is allowed:\ninterface Overloaded {\n  (data: string): number;\n  (id: number): string;\n}\n// this is equivelent to Overloaded interface.\ntype Intersection = ((data: string) => number) & ((id: number) => string);\n```\n\n----------------------------------------\n\nTITLE: Update lib types for TS 5.2 RC\nDESCRIPTION: Updates the library types used by typescript-estree to align with the Release Candidate (RC) of TypeScript 5.2. This ensures compatibility and access to the latest type definitions available in the TypeScript RC.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/typescript-estree/CHANGELOG.md#_snippet_20\n\n\n\n----------------------------------------\n\nTITLE: Supporting Static Class Blocks\nDESCRIPTION: This bug fix addresses an issue where static class blocks were not correctly handled by the scope manager. This enhancement ensures the correct identification and management of variables and scopes within static class blocks.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/scope-manager/CHANGELOG.md#_snippet_25\n\nLANGUAGE: text\nCODE:\n```\nf8e91256e0a721aaa906a5c40a92784da9433b53\n```\n\n----------------------------------------\n\nTITLE: Adding support for TS4.9 satisfies expression\nDESCRIPTION: This code snippet introduces support for the 'satisfies' expression introduced in TypeScript 4.9 within the @typescript-eslint scope-manager package.  This enables proper scope analysis for code utilizing the 'satisfies' operator. It relies on the underlying TypeScript parser and AST.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/scope-manager/CHANGELOG.md#_snippet_6\n\nLANGUAGE: none\nCODE:\n```\n**scope-manager:** add support for TS4.9 satisfies expression ([#6059](https://github.com/typescript-eslint/typescript-eslint/issues/6059)) ([44027db](https://github.com/typescript-eslint/typescript-eslint/commit/44027db379e6e074a16cda2755ef554c2b0a4c5a))\n```\n\n----------------------------------------\n\nTITLE: Invalid void as generic type argument - TypeScript\nDESCRIPTION: This snippet shows examples where `void` is used as a generic type argument, which are flagged as warnings when `allowInGenericTypeArguments` is set to `false`. The use of `void` within `Promise<void>` and `Map<string, void>` will cause linting errors.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-invalid-void-type.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nlogAndReturn<void>(undefined);\n\nlet voidPromise: Promise<void> = new Promise<void>(() => {});\nlet voidMap: Map<string, void> = new Map<string, void>();\n```\n\n----------------------------------------\n\nTITLE: Adding types for flat config files\nDESCRIPTION: This commit introduces types for flat config files within the @typescript-eslint/utils package.  It addresses issue #7273 by adding necessary type definitions, improving type safety and developer experience when working with flat configuration files. The commit hash for this change is 66cd0c0535e5de1b46ba337919a9a92748d2b0a6.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/utils/CHANGELOG.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n66cd0c0(https://github.com/typescript-eslint/typescript-eslint/commit/66cd0c0535e5de1b46ba337919a9a92748d2b0a6)\n```\n\n----------------------------------------\n\nTITLE: Initializing RuleTester with Defaults\nDESCRIPTION: This code snippet demonstrates initializing the `RuleTester` with default `parserOptions`. In typescript-eslint v8, the default `ecmaVersion` is `'latest'` and `sourceType` is `'module'`, so specifying them explicitly might be unnecessary.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/website/blog/2024-07-31-announcing-typescript-eslint-v8.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RuleTester } from '@typescript-eslint/rule-tester'\n\n// Add this line\nconst ruleTester = new RuleTester();\n// Removed lines start\nconst ruleTester = new RuleTester({\n  parserOptions: {\n    ecmaVersion: 2018,\n    sourceType: 'module',\n  },\n});\n// Removed lines end\n```\n\n----------------------------------------\n\nTITLE: Correct String Conversions in TypeScript\nDESCRIPTION: Examples of correct usage where string conversions are performed on primitive types, arrays, functions, or custom classes that override the `toString()` method to provide a meaningful string representation.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-base-to-string.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// These types all have useful .toString() and `toLocaleString()` methods\n'Text' + true;\n`Value: ${123}`;\n`Arrays too: ${[1, 2, 3]}`;\n(() => {}).toString();\nString(42);\n(() => {}).toLocaleString();\n\n// Defining a custom .toString class is considered acceptable\nclass CustomToString {\n  toString() {\n    return 'Hello, world!';\n  }\n}\n`Value: ${new CustomToString()}`;\n\nconst literalWithToString = {\n  toString: () => 'Hello, world!',\n};\n\n`Value: ${literalWithToString}`;\n```\n\n----------------------------------------\n\nTITLE: Correct Code: allowLiterals - Always - TypeScript\nDESCRIPTION: Examples of correct code when `allowLiterals` is set to `always`.  Demonstrates how object literals can be declared as type aliases including unions and intersections.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-type-alias.mdx#_snippet_14\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype Foo = {};\n\ntype Foo = {\n  name: string;\n  age: number;\n};\n\ntype Foo = {\n  name: string;\n  age: number;\n  walk: (miles: number) => void;\n};\n\ntype Foo = { name: string } | { age: number };\n\ntype Foo = { name: string } & { age: number };\n```\n\n----------------------------------------\n\nTITLE: Formatting Time for Release Schedule (Typescript)\nDESCRIPTION: This TypeScript code defines a function `LocalTimeOfRelease` that calculates and formats the local time of a scheduled release. It utilizes the `useIsBrowser` hook to determine if the code is running in a browser environment and adjusts the timezone accordingly. It formats the time using `toLocaleTimeString` and includes the day of the week if it's not a Monday.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/users/Releases.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport useIsBrowser from '@docusaurus/useIsBrowser';\n\nexport function LocalTimeOfRelease() {\n  const isBrowser = useIsBrowser();\n  // An arbitrary Monday at 17:00 UTC.\n  const date = new Date('1970-01-05T17:00Z');\n  const formatted = date.toLocaleTimeString('en-US', {\n    hour: 'numeric',\n    minute: '2-digit',\n    timeZoneName: 'short',\n    timeZone: isBrowser ? undefined : 'UTC',\n  });\n  // Specify the day of week if it's not a Monday.\n  const dayNames = [\n    'Sunday',\n    'Monday',\n    'Tuesday',\n    'Wednesday',\n    'Thursday',\n    'Friday',\n    'Saturday',\n  ];\n  if (date.getDay() !== date.getUTCDay()) {\n    return `${dayNames[date.getDay()]}s at ${formatted}`;\n  }\n  return formatted;\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Class Expression Member Ordering\nDESCRIPTION: This TypeScript code snippet demonstrates an incorrect member order in a class expression, violating the enforced rule of methods, then constructor, then fields.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/member-ordering.mdx#_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nconst foo = class {\n  private C: string; // -> field\n  public D: string; // -> field\n  protected static E: string; // -> field\n\n  constructor() {} // -> constructor\n\n  public static A(): void {} // -> method\n  public B(): void {} // -> method\n};\n```\n\n----------------------------------------\n\nTITLE: Allow Option Configuration (JSON)\nDESCRIPTION: Shows example JSON configuration for the `allow` option, which lets you globally disable reporting of specific types by specifying their origin (file, library, or package) and name.  Helps avoid errors with complex or external types that cannot easily be made readonly.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-readonly-parameter-types.mdx#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"allow\": [\n    { \"from\": \"file\", \"name\": \"Foo\" },\n    { \"from\": \"lib\", \"name\": \"HTMLElement\" },\n    { \"from\": \"package\", \"name\": \"Bar\", \"package\": \"bar-lib\" }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Transpiled TypeScript with Decorator Metadata\nDESCRIPTION: Shows the JavaScript output generated by TypeScript when using legacy decorators and `emitDecoratorMetadata`. It demonstrates how the imported type `Foo` is referenced in the decorator metadata, potentially causing runtime issues if `Foo` is incorrectly marked as a type-only import.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/website/blog/2024-03-25-changes-to-consistent-type-imports-with-decorators.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { __decorate, __metadata } from \"tslib\";\nimport Foo from 'foo';\nimport decorator from 'decorator';\nclass Clazz {\n    method(arg) { }\n}\n__decorate([\n    decorator,\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", /* See below for what this value will be */),\n    __metadata(\"design:returntype\", void 0)\n], Clazz.prototype, \"method\", null);\n```\n\n----------------------------------------\n\nTITLE: Supporting TypeScript 5.1 in typescript-estree\nDESCRIPTION: This feature adds support for TypeScript 5.1 within the typescript-estree package. It ensures that the estree representation is compatible with the latest TypeScript syntax and features. This allows for proper analysis and linting of TypeScript 5.1 codebases.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/typescript-estree/CHANGELOG.md#_snippet_24\n\nLANGUAGE: text\nCODE:\n```\nsupport TypeScript 5.1 ([#7088](https://github.com/typescript-eslint/typescript-eslint/issues/7088)) ([4bf2d73](https://github.com/typescript-eslint/typescript-eslint/commit/4bf2d7360eaf74c9ef87b196ff4c459b8f50800b))\n```\n\n----------------------------------------\n\nTITLE: Supporting TypeScript 4.6\nDESCRIPTION: This feature updates the tool to fully support TypeScript 4.6. It includes necessary changes to handle new language features and improvements introduced in TypeScript 4.6, ensuring compatibility and accurate analysis of code using the latest version of TypeScript.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/scope-manager/CHANGELOG.md#_snippet_22\n\nLANGUAGE: text\nCODE:\n```\na02c63a264e5a6c3557468a8eff48d34ca2b718a\n```\n\n----------------------------------------\n\nTITLE: LibSpecifier Multiple Names Example (JSON)\nDESCRIPTION: Illustrates how to match multiple types using LibSpecifier. In this example, it matches both Promise and PromiseLike types.  The specifier targets elements named 'Promise' or 'PromiseLike' within the TypeScript's built-in lib definitions.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/packages/type-utils/TypeOrValueSpecifier.mdx#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{ \"from\": \"lib\", \"name\": [\"Promise\", \"PromiseLike\"] }\n```\n\n----------------------------------------\n\nTITLE: Fixing JSX pragma resolution in @typescript-eslint/parser\nDESCRIPTION: This commit removes the requirement for the `jsx` option when automatically resolving JSX pragma. This bug fix addresses issue #6134.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/parser/CHANGELOG.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Incorrect Group Ordered Type Definition - TypeScript\nDESCRIPTION: This code snippet demonstrates an incorrectly sorted type definition with a custom `groupOrder`. `null` and `123` are in the wrong order based on the group order `[\"literal\", \"nullish\"]`.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/sort-type-constituents.mdx#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ntype ExampleGroup = null | 123;\n```\n\n----------------------------------------\n\nTITLE: Correct Overload Signatures with ignoreDifferentlyNamedParameters\nDESCRIPTION: This TypeScript code snippet demonstrates correct usage of function overloads when the 'ignoreDifferentlyNamedParameters' option is enabled. The differently named parameters will cause the unified-signatures rule to ignore this scenario.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/unified-signatures.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfunction f(a: number): void;\nfunction f(b: string): void;\n```\n\n----------------------------------------\n\nTITLE: Generics with `allowGenerics: always`\nDESCRIPTION: This code demonstrates the correct usage of generics when the `allowGenerics` option is set to `always`. It shows examples of using generics with various built-in and custom types. The code defines type aliases using generics.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-type-alias.mdx#_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\ntype Foo = Bar<string>;\n\ntype Foo = Record<string, number>;\n\ntype Foo = Readonly<Bar>;\n\ntype Foo = Partial<Bar>;\n\ntype Foo = Omit<Bar, 'a' | 'b'>;\n```\n\n----------------------------------------\n\nTITLE: Correct Type Assertion Example (arrayLiteralTypeAssertions)\nDESCRIPTION: This code snippet demonstrates correct usage of type assertions when `arrayLiteralTypeAssertions` is set to `'never'`. It shows how to define the type of an array literal directly or use `as any` or `as unknown` assertions.  The option ensures that type asserting an array literal is disabled.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/consistent-type-assertions.mdx#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst x: T = ['foo'];\nconst y = ['foo'] as any;\nconst z = ['foo'] as unknown;\n\nfunction bar(): T {\n  return ['foo'];\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Emit Decorator Metadata in Parser Options - Typescript\nDESCRIPTION: This snippet demonstrates the addition of the `parserOptions.emitDecoratorMetadata` option. This allows the TypeScript parser to emit decorator metadata during compilation, which is used by some frameworks for dependency injection and other purposes. It requires updating the parser configuration.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/types/CHANGELOG.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nparserOptions.emitDecoratorMetadata\n```\n\n----------------------------------------\n\nTITLE: Yarn Resolutions Configuration (JSON)\nDESCRIPTION: This JSON snippet shows how to add resolution overrides to the `package.json` file in the local downstream repository to address dependency conflicts during yarn install. It is specifically for resolving `Cannot link` errors related to conflicting versions of `@typescript-eslint/*` packages and other dependencies. Replace `/path/to/your/typescript-eslint` with the correct local path.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/contributing/local-development/Local_Linking.mdx#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"resolutions\": {\n    \"@typescript-eslint/eslint-plugin\": \"portal:/path/to/your/typescript-eslint/packages/eslint-plugin\",\n    \"@typescript-eslint/parser\": \"portal:/path/to/your/typescript-eslint/packages/parser\",\n    \"debug\": \"4\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Supporting instantiation expressions in TypeScript 4.7\nDESCRIPTION: This commit introduces support for instantiation expressions in TypeScript 4.7. This enables the use of generic functions and classes with explicit type arguments.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/typescript-estree/CHANGELOG.md#_snippet_51\n\nLANGUAGE: plaintext\nCODE:\n```\n79fbc77\n```\n\n----------------------------------------\n\nTITLE: Fix: Adding EmptyStatement to Statement in ast-spec\nDESCRIPTION: This code snippet describes a fix that adds `EmptyStatement` to the `Statement` type within the `ast-spec` package. This adjustment ensures that empty statements are correctly recognized and handled during AST processing. The fix contributes to a more complete and accurate representation of TypeScript code in the AST.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/ast-spec/CHANGELOG.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n- **ast-spec:** add `EmptyStatement` to `Statement`\n```\n\n----------------------------------------\n\nTITLE: Function with Console Log (JavaScript)\nDESCRIPTION: This JavaScript function, `foo`, contains a `console.log` statement. This is a minimal example to demonstrate scenarios that trigger a no-console linting error.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/integration-tests/fixtures/markdown/Doc.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nfunction foo() {\n  console.log('test');\n}\n```\n\n----------------------------------------\n\nTITLE: Allowing TypeScript 5.3.0-RC as devDependency\nDESCRIPTION: This commit allows typescript@5.3.0-RC to be used as a devDependency in the typescript-eslint project. By allowing the release candidate version of TypeScript as a dev dependency, the project can stay up to date with the latest TypeScript features and improvements, while still maintaining compatibility with stable versions. This change ensures that the project can leverage the most recent advancements in TypeScript.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/scope-manager/CHANGELOG.md#_snippet_1\n\nLANGUAGE: None\nCODE:\n```\nb6c40b4\n```\n\n----------------------------------------\n\nTITLE: Accessing Type Checker and Reporting Enum Loop - TypeScript\nDESCRIPTION: This code snippet demonstrates how to access the TypeScript type checker within an ESLint rule to identify and report for-of loops over enums. It utilizes `ESLintUtils.getParserServices` to obtain the type checker and then checks the type of the looped-over element.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/developers/Custom_Rules.mdx#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ESLintUtils } from '@typescript-eslint/utils';\nimport * as ts from 'typescript';\n\nexport const rule = createRule({\n  create(context) {\n    return {\n      ForOfStatement(node) {\n        // 1. Grab the parser services for the rule\n        const services = ESLintUtils.getParserServices(context);\n\n        // 2. Find the TS type for the ES node\n        const type = services.getTypeAtLocation(node.right);\n\n        // 3. Check the TS type's backing symbol for being an enum\n        if (type.symbol.flags & ts.SymbolFlags.Enum) {\n          context.report({\n            messageId: 'loopOverEnum',\n            node: node.right,\n          });\n        }\n      },\n    };\n  },\n  meta: {\n    docs: {\n      description: 'Avoid looping over enums.',\n    },\n    messages: {\n      loopOverEnum: 'Do not loop over enums.',\n    },\n    type: 'suggestion',\n    schema: [],\n  },\n  name: 'no-loop-over-enum',\n  defaultOptions: [],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint Legacy Config with Prettier\nDESCRIPTION: This snippet shows how to configure ESLint's legacy config (.eslintrc.js) to work with Prettier by extending the 'prettier' configuration. This disables ESLint formatting rules, enabling Prettier to manage code formatting. It also configures the parser and plugins for TypeScript support.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/users/What_About_Formatting.mdx#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n/* eslint-env node */\nmodule.exports = {\n  extends: [\n    'eslint:recommended',\n    'plugin:@typescript-eslint/recommended',\n    'other-configuration-that-enables-formatting-rules',\n    // Add this line\n    'prettier',\n  ],\n  parser: '@typescript-eslint/parser',\n  plugins: ['@typescript-eslint'],\n  root: true,\n};\n\n```\n\n----------------------------------------\n\nTITLE: Switching to globby for file matching - TypeScript\nDESCRIPTION: This change replaces the previous file matching mechanism with globby, a library for matching files using glob patterns. This affects how the parser handles file paths specified in configuration. Globby provides a more consistent and flexible way to specify file paths, replacing a previous regular expression approach.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/parser/CHANGELOG.md#_snippet_20\n\n\n\n----------------------------------------\n\nTITLE: Incorrect Mapped Types with `allowMappedTypes: in-unions-and-intersections`\nDESCRIPTION: This code demonstrates the incorrect usage of mapped types when the `allowMappedTypes` option is set to `in-unions-and-intersections`. Mapped types are used in standalone declarations, which is not allowed under this configuration. The code defines type aliases using mapped types, but these usages are considered invalid by the ESLint rule with this option.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-type-alias.mdx#_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\ntype Foo<T> = { readonly [P in keyof T]: T[P] };\n\ntype Foo<T> = { [P in keyof T]?: T[P] };\n```\n\n----------------------------------------\n\nTITLE: Configuring ignoreConditionalTests option for prefer-nullish-coalescing in TypeScript ESLint\nDESCRIPTION: This snippet illustrates how to configure the `ignoreConditionalTests` option for the `@typescript-eslint/prefer-nullish-coalescing` rule. It allows specifying whether conditional tests should be checked by the rule or not, defaulting to `true`.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/website/blog/2024-07-31-announcing-typescript-eslint-v8.md#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{ \"@typescript-eslint/prefer-nullish-coalescing\": [\"error\", { \"ignoreConditionalTests\": false }] }\n```\n\n----------------------------------------\n\nTITLE: Disabling Type-Aware Linting - JavaScript\nDESCRIPTION: Examples of disabling type-aware linting using `project: false` or `project: null`. Useful for overrides configurations where type information is not required.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/packages/Parser.mdx#_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nproject: false;\nproject: null;\n```\n\n----------------------------------------\n\nTITLE: Throwing error when CatchClause param contains initializer\nDESCRIPTION: This feature makes the typescript-estree parser throw an error when a CatchClause parameter contains an initializer. This aligns with the TypeScript specification and helps prevent unexpected behavior.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/typescript-estree/CHANGELOG.md#_snippet_8\n\nLANGUAGE: Markdown\nCODE:\n```\n- **typescript-estree:** throw error when CatchClause param contains initializer\n```\n\n----------------------------------------\n\nTITLE: Banning Explicit `any`s with `@typescript-eslint/no-explicit-any`\nDESCRIPTION: This snippet demonstrates how the `@typescript-eslint/no-explicit-any` rule reports on instances of the `any` type. It shows an example of a `greet` function with an `any` typed parameter and how the rule flags it as unsafe, suggesting a more specific type instead.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/website/blog/2025-01-21-avoiding-anys.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction greet(friend: any) {\n  //                   ~~~\n  // eslint(@typescript-eslint/no-explicit-any):\n  // Unexpected any. Specify a different type.\n  console.log(`Hello, ${friend.toUpperCase()}!`);\n}\n\ngreet('Lazlo'); // Ok\n\ngreet({ name: 'Nadya' }); // Should be a type error, but isn't\n```\n\n----------------------------------------\n\nTITLE: Load TypeScript Plugins - JavaScript\nDESCRIPTION: Example configuring `projectService` to load TypeScript plugins when using ESLint.  It is configured to load only if `VSCODE_PID` env variable exists.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/packages/Parser.mdx#_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nparserOptions: {\n  projectService: {\n    loadTypeScriptPlugins: !!process.env.VSCODE_PID,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: LibSpecifier Example (JSON)\nDESCRIPTION: Illustrates how to match all array-typed values using LibSpecifier. It specifies that all types and values named 'Array' declared in the TypeScript's built-in lib definitions should be matched.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/packages/type-utils/TypeOrValueSpecifier.mdx#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{ \"from\": \"lib\", \"name\": \"Array\" }\n```\n\n----------------------------------------\n\nTITLE: Extending ESLint Config (Legacy, No Type Checking)\nDESCRIPTION: This snippet illustrates how to extend the ESLint configuration in a project without type checking, using the Legacy Config style (`.eslintrc.js`).  It extends from ESLint's recommended rules and TypeScript ESLint's recommended and stylistic rules.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/users/Shared_Configurations.mdx#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  extends: [\n    'eslint:recommended',\n    'plugin:@typescript-eslint/recommended',\n    'plugin:@typescript-eslint/stylistic',\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Fix nested namespace declaration\nDESCRIPTION: Fixes a bug where `declare` and `export` modifiers were not correctly handled for nested namespace declarations within the typescript-estree parser. This ensures correct syntax tree generation for such declarations.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/typescript-estree/CHANGELOG.md#_snippet_19\n\n\n\n----------------------------------------\n\nTITLE: Dropping support for Node.js v17\nDESCRIPTION: This breaking change removes support for Node.js version 17. Users relying on this version will need to upgrade to a supported version (e.g., v18 or v20) to continue using the library.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/typescript-estree/CHANGELOG.md#_snippet_38\n\nLANGUAGE: text\nCODE:\n```\n* drops support for node v17\n```\n\n----------------------------------------\n\nTITLE: Disabling ESLint rule for TypeScript files in Legacy Config\nDESCRIPTION: This code snippet shows how to disable the `no-undef` rule in ESLint for TypeScript files using the legacy `.eslintrc.js` config format. The `overrides` section is used to apply specific rules to TypeScript files, disabling `no-undef` for these files.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/troubleshooting/faqs/ESLint.mdx#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  // ... the rest of your config ...\n  overrides: [\n    {\n      files: ['*.ts', '*.mts', '*.cts', '*.tsx'],\n      rules: {\n        'no-undef': 'off',\n      },\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Remark Plugins in Docusaurus\nDESCRIPTION: This code shows how to configure custom Remark plugins, including `remark-docusaurus-tabs` and `./plugins/generated-rule-docs`, within a Docusaurus configuration file. The plugins are specified in the `beforeDefaultRemarkPlugins` option to run before the default Remark plugins.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/website/blog/2022-09-18-automated-rule-docs-with-docusaurus-and-remark.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport tabsPlugin from 'remark-docusaurus-tabs';\n\nimport { generatedRuleDocs } from './plugins/generated-rule-docs';\n\nexport = {\n  presets: [\n    [\n      'classic',\n      {\n        beforeDefaultRemarkPlugins: [tabsPlugin, generatedRuleDocs],\n      },\n    ],\n  ],\n};\n\n```\n\n----------------------------------------\n\nTITLE: Correct Non-Null Assertion Example in TypeScript\nDESCRIPTION: This code snippet demonstrates the correct way to handle non-null assertions according to the rule. Wrapping the expression `(1 + foo.num!)` in parentheses clarifies the intent and avoids confusion. The first equality check removes the non-null assertion entirely.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-confusing-non-null-assertion.mdx#_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\ninterface Foo {\n  bar?: string;\n  num?: number;\n}\n\nconst foo: Foo = getFoo();\nconst isEqualsBar = foo.bar == 'hello';\nconst isEqualsNum = (1 + foo.num!) == 2;\n```\n\n----------------------------------------\n\nTITLE: Empty Interface Extending Another Interface - TypeScript\nDESCRIPTION: This code demonstrates allowing empty interfaces that extend from a single base interface when the `allowInterfaces` option is set to `'with-single-extends'`. This allows creating derived interfaces without adding new properties, inheriting all properties from the base interface.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-empty-object-type.mdx#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface Base {\n  value: boolean;\n}\n\ninterface Derived extends Base {}\n```\n\n----------------------------------------\n\nTITLE: Incorrect TypeScript Import Examples\nDESCRIPTION: These examples demonstrate incorrect usage of import statements when only importing type specifiers without using the top-level `type` qualifier.  This leads to side-effect imports when using `verbatimModuleSyntax`.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-import-type-side-effects.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { type A } from 'mod';\nimport { type A as AA } from 'mod';\nimport { type A, type B } from 'mod';\nimport { type A as AA, type B as BB } from 'mod';\n```\n\n----------------------------------------\n\nTITLE: Banning TypeScript Enum Uses (JSON)\nDESCRIPTION: Demonstrates using `no-restricted-syntax` to ban different types of TypeScript enums: all enums, only `const` enums, or only non-`const` enums. AST selectors target the `TSEnumDeclaration` node with specific `const` property values.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/troubleshooting/faqs/General.mdx#_snippet_5\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"rules\": {\n    \"no-restricted-syntax\": [\n      \"error\",\n\n      // Ban all enums:\n      {\n        \"selector\": \"TSEnumDeclaration\",\n        \"message\": \"My reason for not using any enums at all.\",\n      },\n\n      // Ban just `const` enums:\n      {\n        \"selector\": \"TSEnumDeclaration[const=true]\",\n        \"message\": \"My reason for not using const enums.\",\n      },\n\n      // Ban just non-`const` enums:\n      {\n        \"selector\": \"TSEnumDeclaration:not([const=true])\",\n        \"message\": \"My reason for not using non-const enums.\",\n      },\n    ],\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Addition with allowNullish: true\nDESCRIPTION: This snippet shows examples of incorrect addition operations when the `allowNullish` option is enabled. Adding to an `unknown` or `never` type is not allowed.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/restrict-plus-operands.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nlet fn = (a: number, b: unknown) => a + b;\nlet fn = (a: number, b: never) => a + b;\nlet fn = (a: string, b: unknown) => a + b;\nlet fn = (a: string, b: never) => a + b;\n```\n\n----------------------------------------\n\nTITLE: Enforce getters style for class literals - Correct\nDESCRIPTION: This snippet shows the correct usage of the `getters` style. Literal values are exposed using getter methods instead of `readonly` fields. Non-literal values assigned to fields without the `readonly` modifier are also valid.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/class-literal-property-style.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nclass Mx {\n  // no readonly modifier\n  public myField1 = 'hello';\n\n  // not a literal\n  public readonly myField2 = [1, 2, 3];\n\n  public static get myField3() {\n    return 1;\n  }\n\n  private get ['myField4']() {\n    return 'hello world';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Uninstalling legacy @typescript-eslint packages\nDESCRIPTION: This command uninstalls the `@typescript-eslint/parser` and `@typescript-eslint/eslint-plugin` packages.  These packages are included as dependencies within the main typescript-eslint package.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/packages/TypeScript_ESLint.mdx#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpm un @typescript-eslint/parser @typescript-eslint/eslint-plugin\n```\n\n----------------------------------------\n\nTITLE: Running Integration Tests\nDESCRIPTION: This is an example of how to run a specific integration test using yarn. This command will generate the snapshot output which is a JSON representation of the ESLint run.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/integration-tests/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn test-integration ./tests/integration/tests/your-file.test.ts\n```\n\n----------------------------------------\n\nTITLE: Correct: Type Assertion to prevent false positives\nDESCRIPTION: This example shows how to use a type assertion to prevent false positives when a condition's value is modified inside a function. Asserting the `condition` to `false as boolean` allows the code to execute as intended.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-unnecessary-condition.mdx#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nlet condition = false as boolean;\n\nconst f = () => {\n  condition = Math.random() > 0.5;\n};\nf();\n\nif (condition) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Run ESLint on the Project\nDESCRIPTION: Executes ESLint on the project using npx, yarn, or pnpm.  This command will lint all TypeScript and JavaScript files in the current directory and output any linting errors to the console.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/getting-started/Quickstart.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx eslint .\n```\n\n----------------------------------------\n\nTITLE: Incorrect Array.sort() with ignoreStringArrays - TypeScript\nDESCRIPTION: This snippet shows incorrect usage when `ignoreStringArrays` is enabled. It sorts an array of numbers without a compare function. Even with `ignoreStringArrays` set to true, numerical arrays still require a comparison function.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/require-array-sort-compare.mdx#_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nconst one = 1;\nconst two = 2;\nconst three = 3;\n[one, two, three].sort();\n```\n\n----------------------------------------\n\nTITLE: Fixing type definitions in utils package\nDESCRIPTION: This commit addresses small type fixes within the @typescript-eslint/utils package. It specifically targets issue #7474 on GitHub and includes minor adjustments to improve the accuracy and reliability of type definitions. The commit hash for this fix is 4402db1091976845538e4b79e6152abfd14849ff.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/utils/CHANGELOG.md#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n4402db1(https://github.com/typescript-eslint/typescript-eslint/commit/4402db1091976845538e4b79e6152abfd14849ff)\n```\n\n----------------------------------------\n\nTITLE: Incorrect: Unnecessary Type Predicate Check\nDESCRIPTION: This example shows code flagged when `checkTypePredicates` is `true`.  The `assert(false)` call is flagged since false is always falsy.  The call to `assert(neverNull)` is flagged because `neverNull` is always truthy.  The call to `isString(s)` is flagged since `s` is declared as a `string`, and the function is redundant. The call to `assertIsString(s)` is flagged because `s` is always a string.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-unnecessary-condition.mdx#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nfunction assert(condition: unknown): asserts condition {\n  if (!condition) {\n    throw new Error('Condition is falsy');\n  }\n}\n\nassert(false); // Unnecessary; condition is always falsy.\n\nconst neverNull = {};\nassert(neverNull); // Unnecessary; condition is always truthy.\n\nfunction isString(value: unknown): value is string {\n  return typeof value === 'string';\n}\n\ndeclare const s: string;\n\n// Unnecessary; s is always a string.\nif (isString(s)) {\n}\n\nfunction assertIsString(value: unknown): asserts value is string {\n  if (!isString(value)) {\n    throw new Error('Value is not a string');\n  }\n}\n\nassertIsString(s); // Unnecessary; s is always a string.\n```\n\n----------------------------------------\n\nTITLE: Setting RuleTester Static Properties for Mocha (TS)\nDESCRIPTION: This code snippet shows how to set up RuleTester's static properties in a mochaGlobalSetup fixture for Mocha. It imports the mocha module and assigns mocha.after to RuleTester.afterAll, ensuring that the RuleTester can properly utilize Mocha's testing hooks.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/packages/Rule_Tester.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as mocha from 'mocha';\nimport { RuleTester } from '@typescript-eslint/rule-tester';\n\nRuleTester.afterAll = mocha.after;\n```\n\n----------------------------------------\n\nTITLE: Correct Overload Signatures with ignoreOverloadsWithDifferentJSDoc\nDESCRIPTION: This TypeScript code snippet demonstrates correct usage of function overloads when the 'ignoreOverloadsWithDifferentJSDoc' option is enabled. Different JSDoc tags on different signatures will prevent unification.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/unified-signatures.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function f(x: string): void;\n/**\n * This signature does something else.\n */\ndeclare function f(x: boolean): void;\n/**\n * @async\n */\ndeclare function f(x: number): void;\n/**\n * @deprecate\n */\ndeclare function f(x: null): void;\n```\n\n----------------------------------------\n\nTITLE: Incorrect Parameter Typing\nDESCRIPTION: Illustrates incorrect parameter typing without type annotations when the `parameter` option is enabled. The `size` and `text` parameters in the function definitions lack explicit type annotations.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/typedef.mdx#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nfunction logsSize(size): void {\n  console.log(size);\n}\n\nconst doublesSize = function (size): number {\n  return size * 2;\n};\n\nconst divider = {\n  curriesSize(size): number {\n    return size;\n  },\n  dividesSize: function (size): number {\n    return size / 2;\n  },\n};\n\nclass Logger {\n  log(text): boolean {\n    console.log('>', text);\n    return true;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding ESLint Community Dependencies in Typescript\nDESCRIPTION: This commit updates the project to use dependencies from the @eslint-community organization. This change likely involves updating package.json to point to the new dependencies, which may include ESLint plugins, parsers, or other tools.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/utils/CHANGELOG.md#_snippet_7\n\nLANGUAGE: Typescript\nCODE:\n```\nuse [@eslint-community](https://github.com/eslint-community) dependencies ([#6603](https://github.com/typescript-eslint/typescript-eslint/issues/6603)) ([5f6ed73](https://github.com/typescript-eslint/typescript-eslint/commit/5f6ed738a2b8c08878999e24477e3c206a0ade1b))\n```\n\n----------------------------------------\n\nTITLE: Supporting TS4.5 Import/Export Specifier\nDESCRIPTION: This enhancement adds support for the new import/export specifier kind introduced in TypeScript 4.5. By incorporating this support, the tool ensures correct handling and analysis of modules utilizing the latest TypeScript syntax.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/scope-manager/CHANGELOG.md#_snippet_23\n\nLANGUAGE: text\nCODE:\n```\n833f8221ce00aecb7d08c519bab9568353850f48\n```\n\n----------------------------------------\n\nTITLE: Type-Only Imports and Exports in TypeScript\nDESCRIPTION: Illustrates the syntax for type-only imports and exports in TypeScript using the `import type` and `export type` keywords. These declarations do not represent runtime code.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/website/blog/2023-02-24-consistent-type-exports-and-imports-why-and-how.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { SomeThing } from './some-module.js';\nexport type { SomeThing };\n```\n\n----------------------------------------\n\nTITLE: Supporting Import Assertions\nDESCRIPTION: This feature adds support for Import Assertions, a new ECMAScript proposal.  Import assertions allow specifying expected types or formats for imported modules, providing additional safety and validation during module loading.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/scope-manager/CHANGELOG.md#_snippet_27\n\nLANGUAGE: text\nCODE:\n```\nae0fb5a591958216b7df656e66b1dfe464898167\n```\n\n----------------------------------------\n\nTITLE: Supporting PrivateIdentifier (TypeScript)\nDESCRIPTION: This code snippet adds support for `PrivateIdentifier` nodes in the TypeScript AST. This enables the parser to correctly identify and process private class fields, a feature introduced in newer versions of TypeScript.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/visitor-keys/CHANGELOG.md#_snippet_16\n\nLANGUAGE: none\nCODE:\n```\n- support `PrivateIdentifier` ([#3808](https://github.com/typescript-eslint/typescript-eslint/issues/3808)) ([0eefe5e](https://github.com/typescript-eslint/typescript-eslint/commit/0eefe5e49d21af3f1e3e2d9a90c2e49929863ac2)), closes [#3430](https://github.com/typescript-eslint/typescript-eslint/issues/3430) [#2933](https://github.com/typescript-eslint/typescript-eslint/issues/2933)\n```\n\n----------------------------------------\n\nTITLE: Fixing Infer Type Scope in TypeScript\nDESCRIPTION: This commit addresses a bug in the scope manager that prevented the visiting of constraints within infer types. The fix ensures that the scope manager correctly handles constraints, improving type analysis and rule accuracy.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/scope-manager/CHANGELOG.md#_snippet_14\n\nLANGUAGE: text\nCODE:\n```\nb2846a16777a3aea7b1e6ac9d81b9b6dce0bb874\n```\n\n----------------------------------------\n\nTITLE: Removing an AST Node\nDESCRIPTION: This code snippet demonstrates how to remove a specific AST node (in this case, a blockquote) from the children array of the AST root. It uses `findIndex` to locate the node based on its type and then `splice` to remove it from the array. This is used to remove the boilerplate notice at the top of rule documentation markdown files.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/website/blog/2022-09-18-automated-rule-docs-with-docusaurus-and-remark.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nroot.children.splice(\n  root.children.findIndex(v => v.type === 'blockquote'),\n  1,\n);\n\n```\n\n----------------------------------------\n\nTITLE: Correcting Issues with Circular Imports\nDESCRIPTION: This fix addresses problems arising from circular imports within TypeScript modules. The implemented solution resolves issues related to module resolution and scope analysis when circular dependencies exist.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/scope-manager/CHANGELOG.md#_snippet_26\n\nLANGUAGE: text\nCODE:\n```\n4c87b2486a9c90794d972a4d093c1dc22ffb418b\n```\n\n----------------------------------------\n\nTITLE: Fixing Custom Type Roots in type-utils TypeScript\nDESCRIPTION: This code snippet addresses a bug in the @typescript-eslint/type-utils package where custom type roots were not properly treated as external.  The fix ensures that custom type roots are correctly identified and handled. This bug fix is part of version 6.9.0 of the package.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/type-utils/CHANGELOG.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n* **type-utils:** treat custom type roots as external ([#6870](https://github.com/typescript-eslint/typescript-eslint/issues/6870)) ([b85f744](https://github.com/typescript-eslint/typescript-eslint/commit/b85f7446c3552108d78d31591f80f96cd7233228))\n```\n\n----------------------------------------\n\nTITLE: Incorrect Variable Declaration\nDESCRIPTION: Illustrates incorrect variable declaration without type annotations when the `variableDeclaration` option is enabled. The `text`, `initialText`, and `delayedText` variables lack explicit type definitions.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/typedef.mdx#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nconst text = 'text';\nlet initialText = 'text';\nlet delayedText;\n```\n\n----------------------------------------\n\nTITLE: Setting RuleTester Static Properties for Node.js (TS)\nDESCRIPTION: This code demonstrates setting up RuleTester's static properties for use with Node.js's built-in test runner (node:test). It imports the 'node:test' module and assigns its 'after', 'describe', 'it', and 'it.only' functions to the corresponding RuleTester static properties, enabling RuleTester to use the Node.js test framework's hooks.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/packages/Rule_Tester.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// setup.js\nimport * as test from 'node:test';\nimport { RuleTester } from '@typescript-eslint/rule-tester';\n\nRuleTester.afterAll = test.after;\nRuleTester.describe = test.describe;\nRuleTester.it = test.it;\nRuleTester.itOnly = test.it.only;\n```\n\n----------------------------------------\n\nTITLE: Incorrect Exhaustive Switch Example - Enums - TypeScript\nDESCRIPTION: This code demonstrates an incorrect usage of a switch statement over an enum ('Fruit') without covering all possible cases. The switch only handles 'Fruit.Apple', which violates the 'switch-exhaustiveness-check' rule. It requires all cases to be explicitly handled or have a default case.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/switch-exhaustiveness-check.mdx#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nenum Fruit {\n  Apple,\n  Banana,\n  Cherry,\n}\n\ndeclare const fruit: Fruit;\n\nswitch (fruit) {\n  case Fruit.Apple:\n    console.log('an apple');\n    break;\n}\n```\n\n----------------------------------------\n\nTITLE: Allowing string processor in flat config\nDESCRIPTION: This commit allows the use of a string processor in the flat config for the @typescript-eslint/utils package. This change enhances the flexibility of the flat config by supporting string-based processing. The commit hash for this change is 024ed9ed1222280d8010393d2abf810faea283b9.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/utils/CHANGELOG.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n024ed9e(https://github.com/typescript-eslint/typescript-eslint/commit/024ed9ed1222280d8010393d2abf810faea283b9)\n```\n\n----------------------------------------\n\nTITLE: Expose cache clearing function for advanced usecases\nDESCRIPTION: This feature exposes a wrapper cache clearing function for advanced use cases. It gives developers greater control over cache management, allowing them to clear the cache manually when needed. This is especially useful in complex environments where the cache may become outdated or inconsistent.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/typescript-estree/CHANGELOG.md#_snippet_29\n\nLANGUAGE: text\nCODE:\n```\n**typescript-estree:** expose a wrapper cache clearing function for advanced usecases ([#6476](https://github.com/typescript-eslint/typescript-eslint/issues/6476)) ([d816496](https://github.com/typescript-eslint/typescript-eslint/commit/d8164960d21336d4a726d8179b314f05fe3aeb22))\n```\n\n----------------------------------------\n\nTITLE: Allowing Protected Parameter Properties in TypeScript - Correct Example\nDESCRIPTION: These TypeScript class examples demonstrate code that adheres to the rule when `{ \"allow\": [\"protected\"] }` is specified. The rule allows constructors with a simple parameter or a `protected` parameter property.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/parameter-properties.mdx#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nclass Foo {\n  constructor(name: string) {}\n}\n\nclass Foo {\n  constructor(protected name: string) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Removing leftovers from useJSXTextNode removal\nDESCRIPTION: This commit removes leftover code related to the removal of `useJSXTextNode`. This cleanup ensures that the codebase does not contain any dead code.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/typescript-estree/CHANGELOG.md#_snippet_47\n\nLANGUAGE: plaintext\nCODE:\n```\nf9c3647\n```\n\n----------------------------------------\n\nTITLE: Supporting Multi-Pass Fixes in RuleTester\nDESCRIPTION: This code snippet illustrates how to provide an array of strings for the `output` property to specify the expected output after each fix pass in the `RuleTester`. It demonstrates the updated approach to test rules with multi-pass fixes in typescript-eslint v8.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/website/blog/2024-07-31-announcing-typescript-eslint-v8.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RuleTester } from '@typescript-eslint/rule-tester';\nimport rule from '../src/rules/my-rule.ts';\n\nconst ruleTester = new RuleTester();\n\nruleTester.run('my-rule', rule, {\n  valid: [\n    /* ... */\n  ],\n  invalid: [\n    {\n      code: 'const a = 1;',\n      // Remove the line with string form of `output`\n      output: 'const b = 1;',\n      // Add the line with array form of `output`\n      output: ['const b = 1;', 'const c = 1;'],\n      errors: [\n        /* ... */\n      ],\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Incorrect Code: allowAliases - In Unions and Intersections - TypeScript\nDESCRIPTION: Illustrates examples of incorrect code when `allowAliases` is set to `in-unions-and-intersections`. These examples demonstrates primitive type aliases and reference type aliases with interfaces and classes that are not allowed under this configuration.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-type-alias.mdx#_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\n// primitives\ntype Foo = 'a';\n\ntype Foo = string;\n\ntype Foo = `foo-${number}`;\n\n// reference types\ninterface Bar {}\nclass Baz implements Bar {}\n\ntype Foo = Bar;\n```\n\n----------------------------------------\n\nTITLE: Invalid Type Declarations in TypeScript\nDESCRIPTION: Demonstrates incorrect type declarations where union and intersection types contain redundant constituents that override other types. Examples include unions with `any`, `unknown`, or `never`, as well as unions/intersections with literal types and their corresponding primitive types.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-redundant-type-constituents.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype UnionAny = any | 'foo';\ntype UnionUnknown = unknown | 'foo';\ntype UnionNever = never | 'foo';\n\ntype UnionBooleanLiteral = boolean | false;\ntype UnionNumberLiteral = number | 1;\ntype UnionStringLiteral = string | 'foo';\n\ntype IntersectionAny = any & 'foo';\ntype IntersectionUnknown = string & unknown;\ntype IntersectionNever = string | never;\n\ntype IntersectionBooleanLiteral = boolean & false;\ntype IntersectionNumberLiteral = number & 1;\ntype IntersectionStringLiteral = string & 'foo';\n```\n\n----------------------------------------\n\nTITLE: Limiting allowed names for 'this' alias\nDESCRIPTION: This example demonstrates the effect of setting the 'allowedNames' option to ['self'].  Only 'self' is allowed as an alias for 'this'. The incorrect example uses 'that' as an alias, while the correct example uses 'self'.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-this-alias.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nclass Example {\n  method() {\n    const that = this;\n  }\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nclass Example {\n  method() {\n    const self = this;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Switch - Union Type with Comment - TypeScript\nDESCRIPTION: This example shows correct usage when a comment matching the configured pattern is used in place of a default case. The `defaultCaseCommentPattern` is set to `^skip\\sdefault` so the `// skip default` comment satisfies the exhaustive check. \nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/switch-exhaustiveness-check.mdx#_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\ndeclare const value: 'a' | 'b';\n\nswitch (value) {\n  case 'a':\n    break;\n  // skip default\n}\n```\n\n----------------------------------------\n\nTITLE: Adding decorator metadata support for scope analysis - TypeScript\nDESCRIPTION: This feature adds support for decorator metadata in scope analysis and in consistent-type-imports. It includes functionality related to handling decorator information within the TypeScript AST and using this information to improve type checking and scope management. This impacts how type imports are handled and how decorators are considered when analyzing code scope.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/parser/CHANGELOG.md#_snippet_14\n\n\n\n----------------------------------------\n\nTITLE: Installing missing dependencies (Shell)\nDESCRIPTION: This command installs a missing dependency (`ts-api-utils`) as a dev dependency in the local downstream repository using Yarn. This is necessary when a local `@typescript-eslint/*` package has a dependency not present in the published npm version, resolving `Cannot find module` errors.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/contributing/local-development/Local_Linking.mdx#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nyarn add ts-api-utils -D\n```\n\n----------------------------------------\n\nTITLE: Inline Type Qualifiers in TypeScript Imports\nDESCRIPTION: Demonstrates the use of inline type qualifiers in TypeScript imports. This allows specifying that only some specifiers in an import statement should be treated as type-system-only.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/website/blog/2023-02-24-consistent-type-exports-and-imports-why-and-how.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type SomeType, SomeValue } from './some-module.js';\n```\n\n----------------------------------------\n\nTITLE: Supporting Import Assertions in typescript-estree (TypeScript)\nDESCRIPTION: This code snippet introduces support for Import Assertions in the @typescript-eslint/typescript-estree package. This enables the TypeScript AST parser to recognize and process import assertions, a feature introduced in newer versions of TypeScript.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/visitor-keys/CHANGELOG.md#_snippet_13\n\nLANGUAGE: none\nCODE:\n```\n- **typescript-estree:** support Import Assertions ([#4074](https://github.com/typescript-eslint/typescript-eslint/issues/4074)) ([ae0fb5a](https://github.com/typescript-eslint/typescript-eslint/commit/ae0fb5a591958216b7df656e66b1dfe464898167))\n```\n\n----------------------------------------\n\nTITLE: Correcting class static blocks handling\nDESCRIPTION: This code snippet fixes the handling of class static blocks within the @typescript-eslint scope-manager.  This ensures correct scope analysis within static blocks in classes. It relies on the AST representation of class static blocks.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/scope-manager/CHANGELOG.md#_snippet_10\n\nLANGUAGE: none\nCODE:\n```\n**scope-manager:** correct handling for class static blocks ([#5580](https://github.com/typescript-eslint/typescript-eslint/issues/5580)) ([35bb8dd](https://github.com/typescript-eslint/typescript-eslint/commit/35bb8ddac1b46397f6447c1a6e1e4e1774dd7957))\n```\n\n----------------------------------------\n\nTITLE: Allowing Visiting of Type Parameters\nDESCRIPTION: This commit fixes an issue related to TypeScript 4.7 where the scope manager was unable to visit type parameters within TSTypeQuery nodes. This allows for more complete and accurate analysis of TypeScript code using type queries.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/scope-manager/CHANGELOG.md#_snippet_16\n\nLANGUAGE: text\nCODE:\n```\ndc1f9309cf04aa7314e758980ac687558482f47f\n```\n\n----------------------------------------\n\nTITLE: Handling typeParameters of TSInstantiationExpression\nDESCRIPTION: This code snippet addresses an issue where type parameters of TSInstantiationExpression nodes were not being correctly handled within the @typescript-eslint scope-manager. This ensures proper scope analysis for instantiated types. It depends on correct AST node traversal and type information.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/scope-manager/CHANGELOG.md#_snippet_13\n\nLANGUAGE: none\nCODE:\n```\n**scope-manager:** handle typeParameters of TSInstantiationExpression ([#5355](https://github.com/typescript-eslint/typescript-eslint/issues/5355)) ([2595ccf](https://github.com/typescript-eslint/typescript-eslint/commit/2595ccf67cd5158edbd6bebd9ac2dbd8bbd8b99c))\n```\n\n----------------------------------------\n\nTITLE: Incorrect Type Assertion Example\nDESCRIPTION: This code demonstrates an incorrect usage of type assertion where the assertion doesn't change the type of the expression. The `foo!` assertion on a variable of type `number` is redundant.  The Typescript compiler will report this type assertion as unnecessary.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-unnecessary-type-assertion.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst foo = 3;\nconst bar = foo!;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Correct Comment Usage in TypeScript\nDESCRIPTION: This code snippet demonstrates examples of correct comment usage that does not trigger the rule. The comments happen to mention 'tslint' but are not TSLint directives. These are standard comments that should be retained.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/ban-tslint-comment.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// This is a comment that just happens to mention tslint\n/* This is a multiline comment that just happens to mention tslint */\nsomeCode(); // This is a comment that just happens to mention tslint\n```\n\n----------------------------------------\n\nTITLE: Incorrect Example: ReadonlyArray with Unnecessary Type Parameter TypeScript\nDESCRIPTION: This example shows the incorrect usage of a type parameter with `ReadonlyArray`. The type parameter `T` is only used once as the type argument for `ReadonlyArray`, which is flagged by the rule.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-unnecessary-type-parameters.mdx#_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\ndeclare function length<T>(array: ReadonlyArray<T>): number;\n```\n\n----------------------------------------\n\nTITLE: Parsing TypeScript in .vue Files using Legacy Config\nDESCRIPTION: This snippet demonstrates how to configure ESLint with Legacy Config to parse TypeScript code within `.vue` files. It uses `vue-eslint-parser` as the top-level parser and specifies `@typescript-eslint/parser` within `parserOptions.parser`. The snippet assumes that the `vue-eslint-parser` and `typescript-eslint` packages are installed.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/troubleshooting/faqs/Frameworks.mdx#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  // ... the rest of your config ...\n  // Remove this line\n  parser: '@typescript-eslint/parser',\n  // Add this line\n  parser: 'vue-eslint-parser',\n  parserOptions: {\n    parser: '@typescript-eslint/parser',\n    // Add this line\n    extraFileExtensions: ['.vue'],\n  },\n};\n\n```\n\n----------------------------------------\n\nTITLE: Incorrect Overload Signatures with ignoreOverloadsWithDifferentJSDoc\nDESCRIPTION: This TypeScript code snippet demonstrates incorrect usage of function overloads when the 'ignoreOverloadsWithDifferentJSDoc' option is enabled. The presence of JSDoc tags does not prevent these signatures from being unified.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/unified-signatures.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function f(x: string): void;\ndeclare function f(x: boolean): void;\n/**\n * @deprecate\n */\ndeclare function f(x: number): void;\n/**\n * @deprecate\n */\ndeclare function f(x: null): void;\n```\n\n----------------------------------------\n\nTITLE: Enum Shadowing Example\nDESCRIPTION: Illustrates how enum members can shadow variables in parent scopes due to their variable-like behavior within the enum's scope. It shows how unqualified references within the enum can resolve to the enum member rather than the outer variable, which can lead to unexpected behavior.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-shadow.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst A = 2;\nenum Test {\n  A = 1,\n  B = A,\n}\n\nconsole.log(Test.B);\n// what should be logged?\n```\n\n----------------------------------------\n\nTITLE: Fixing AST Spec for SpreadElement in ArrayExpression - Typescript\nDESCRIPTION: This commit fixes a bug in the AST specification by allowing SpreadElement as a valid element within ArrayExpression.elements. This modification accommodates spread syntax within array literals. The fix pertains to the AST definition within @typescript-eslint/ast-spec.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/ast-spec/CHANGELOG.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nadd `SpreadElement` to `ArrayExpression.elements`\n```\n\n----------------------------------------\n\nTITLE: Correct `treatMethodsAsReadonly: true` Example (TS)\nDESCRIPTION: Illustrates correct code when `treatMethodsAsReadonly` is `true`. The example defines a type with a `readonly` property and a method.  Since `treatMethodsAsReadonly` is enabled, methods are treated as immutable by default, therefore it's considered a correct definition in this context.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-readonly-parameter-types.mdx#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\ntype MyType = {\n  readonly prop: string;\n  method(): string; // note: this method is mutable\n};\nfunction foo(arg: MyType) {}\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint Flat Config with Prettier\nDESCRIPTION: This code snippet demonstrates how to configure ESLint's flat config to integrate with Prettier by extending `eslint-config-prettier`.  It disables formatting rules within ESLint, allowing Prettier to handle formatting concerns. It imports necessary modules and exports a configuration object using `tseslint.config`.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/users/What_About_Formatting.mdx#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n// @ts-check\n\nimport eslint from '@eslint/js';\nimport someOtherConfig from 'eslint-config-other-configuration-that-enables-formatting-rules';\nimport prettierConfig from 'eslint-config-prettier';\nimport tseslint from 'typescript-eslint';\n\nexport default tseslint.config(\n  eslint.configs.recommended,\n  tseslint.configs.recommended,\n  someOtherConfig,\n  // Add this line\n  prettierConfig,\n);\n\n```\n\n----------------------------------------\n\nTITLE: Enable Type-Checked Rules in Legacy Config (JavaScript)\nDESCRIPTION: Configures a legacy ESLint configuration file (`.eslintrc.cjs`) to extend the `plugin:@typescript-eslint/recommended-type-checked-only` configuration, enabling only type-checked rules.  It also sets `parserOptions` to enable project service and specify the tsconfig root directory.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/troubleshooting/faqs/General.mdx#_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  extends: ['plugin:@typescript-eslint/recommended-type-checked-only'],\n  parserOptions: {\n    projectService: true,\n    tsconfigRootDir: __dirname,\n  },\n  root: true,\n};\n```\n\n----------------------------------------\n\nTITLE: Correct Mapped Types with `allowMappedTypes: in-intersections`\nDESCRIPTION: This code demonstrates the correct usage of mapped types when the `allowMappedTypes` option is set to `in-intersections`. Mapped types are used within intersection types, which is allowed under this configuration. The code defines type aliases using mapped types inside intersection types.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-type-alias.mdx#_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\ntype Foo<T, U> = { readonly [P in keyof T]: T[P] } & {\n  readonly [P in keyof U]: U[P];\n};\n\ntype Foo<T, U> = { [P in keyof T]?: T[P] } & { [P in keyof U]?: U[P] };\n```\n\n----------------------------------------\n\nTITLE: Configure Optional Members First (JSONC)\nDESCRIPTION: This configuration places optional members at the beginning of their respective groups and sorts alphabetically.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/member-ordering.mdx#_snippet_45\n\nLANGUAGE: jsonc\nCODE:\n```\n// .eslintrc.json\n{\n  \"rules\": {\n    \"@typescript-eslint/member-ordering\": [\n      \"error\",\n      {\n        \"default\": {\n          \"optionalityOrder\": \"optional-first\",\n          \"order\": \"alphabetically\",\n        },\n      },\n    ],\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Support const modifiers for type parameters in typescript-estree\nDESCRIPTION: This feature adds support for `const` modifiers for type parameters. It provides enhanced type safety and precision when working with generic types in TypeScript. This improvement allows the parser to correctly handle and represent `const` type parameters in the AST.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/typescript-estree/CHANGELOG.md#_snippet_25\n\nLANGUAGE: text\nCODE:\n```\n**typescript-estree:** support `const` modifiers for type parameters ([#6600](https://github.com/typescript-eslint/typescript-eslint/issues/6600)) ([f3c6373](https://github.com/typescript-eslint/typescript-eslint/commit/f3c637328b1a3923b9ecdfaeea86ccf73cbdda06))\n```\n\n----------------------------------------\n\nTITLE: Incorrect `checkString` example - TypeScript\nDESCRIPTION: Example demonstrating incorrect code when using the `checkString` option. It shows how chained logical AND can be replaced by an optional chain.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-optional-chain.mdx#_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\ndeclare const thing: string;\n\nthing && thing.toString();\n```\n\n----------------------------------------\n\nTITLE: Correct Class Expression Member Ordering (Public Instance Method vs Static Field)\nDESCRIPTION: This TypeScript code snippet illustrates a correct member order in a class expression, adhering to the enforced rule that public instance methods should come before public static fields.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/member-ordering.mdx#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nconst Foo = class {\n  public B(): void {} // -> public instance method\n\n  private C: string; // (irrelevant)\n\n  [Z: string]: any; // (irrelevant)\n\n  public D: string; // (irrelevant)\n\n  constructor() {} // (irrelevant)\n\n  public static A(): void {} // (irrelevant)\n\n  public static E: string; // -> public static field\n};\n```\n\n----------------------------------------\n\nTITLE: Removing TypeScript Version: Updating package.json devDependency\nDESCRIPTION: When removing support for an old TypeScript version, the `devDependency` in the root `package.json` must be updated to reflect the new minimum supported version.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/maintenance/pull-requests/Dependency_Version_Upgrades.mdx#_snippet_11\n\nLANGUAGE: json\nCODE:\n```\nUpdate the root `package.json` `devDependency`\n```\n\n----------------------------------------\n\nTITLE: Installing typescript-eslint v8 (Flat Config)\nDESCRIPTION: This command installs typescript-eslint v8 as a development dependency using npm. It's specifically intended for projects using the flat ESLint configuration.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/website/blog/2024-07-31-announcing-typescript-eslint-v8.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i typescript-eslint@8 --save-dev\n```\n\n----------------------------------------\n\nTITLE: Adding `allowDefaultProjectForFiles` project service allowlist option\nDESCRIPTION: This feature introduces the `allowDefaultProjectForFiles` option to the project service. This allows specifying an allowlist of files for which the default project service should be used. This provides more fine-grained control over project service behavior.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/typescript-estree/CHANGELOG.md#_snippet_9\n\nLANGUAGE: Markdown\nCODE:\n```\n* **typescript-estree:** add allowDefaultProjectForFiles project service allowlist option ([#7752](https://github.com/typescript-eslint/typescript-eslint/issues/7752)) ([7ddadda](https://github.com/typescript-eslint/typescript-eslint/commit/7ddadda10845bc53967eeec83ba6b7cdc71a079f))\n```\n\n----------------------------------------\n\nTITLE: Correct Enum Usage: No Unnecessary Qualifier - TypeScript\nDESCRIPTION: This code snippet demonstrates correct usage of enums, where the qualifier is omitted when accessing members within the enum itself. No unnecessary qualifiers are present. Requires TypeScript.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-unnecessary-qualifier.mdx#_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nenum A {\n  B,\n  C = B,\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Union Type Definition - TypeScript\nDESCRIPTION: This code snippet demonstrates a correctly sorted union type definition with the `checkUnions` option set to `true`. The union `A | B` is alphabetically ordered.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/sort-type-constituents.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ntype ExampleUnion = A | B;\n```\n\n----------------------------------------\n\nTITLE: Incorrect @ts-ignore Usage in TypeScript\nDESCRIPTION: This code snippet demonstrates incorrect usage of the `@ts-ignore` directive in TypeScript code. It shows examples of single-line and multi-line comments with `@ts-ignore` suppressing type errors. The goal is to replace these instances with `@ts-expect-error`.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-ts-expect-error.mdx#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\n// @ts-ignore\nconst str: string = 1;\n\n/**\n * Explaining comment\n *\n * @ts-ignore */\nconst multiLine: number = 'value';\n\n/** @ts-ignore */\nconst block: string = 1;\n\nconst isOptionEnabled = (key: string): boolean => {\n  // @ts-ignore: if key isn't in globalOptions it'll be undefined which is false\n  return !!globalOptions[key];\n};\n```\n\n----------------------------------------\n\nTITLE: Correct Array.sort() with ignoreStringArrays - TypeScript\nDESCRIPTION: This snippet shows correct usage of `Array.sort()` when `ignoreStringArrays` is enabled. It sorts a string array without a comparison function, and is considered correct because the option ignores string arrays.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/require-array-sort-compare.mdx#_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nconst one = '1';\nconst two = '2';\nconst three = '3';\n[one, two, three].sort();\n```\n\n----------------------------------------\n\nTITLE: Incorrect Type Export Example\nDESCRIPTION: This example shows an incorrect way of exporting a type and a class in TypeScript. It exports both `Button` and `ButtonProps` without specifying that `ButtonProps` is a type export.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/consistent-type-exports.mdx#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\ninterface ButtonProps {\n  onClick: () => void;\n}\n\nclass Button implements ButtonProps {\n  onClick = () => console.log('button!');\n}\n\nexport { Button, ButtonProps };\n```\n\n----------------------------------------\n\nTITLE: Adding RuleTester API for Dependency Constraints in Typescript\nDESCRIPTION: This commit adds a `RuleTester` API for specifying dependency constraints. This allows rule authors to define the minimum or maximum versions of dependencies required for their rules to function correctly. This can improve the reliability of rules and reduce the risk of unexpected behavior caused by incompatible dependencies.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/utils/CHANGELOG.md#_snippet_9\n\nLANGUAGE: Typescript\nCODE:\n```\n**utils:** add `RuleTester` API for top-level dependency constraints ([#5896](https://github.com/typescript-eslint/typescript-eslint/issues/5896)) ([0520d53](https://github.com/typescript-eslint/typescript-eslint/commit/0520d53536af411d66ce2ce0dd478365e67adbac))\n```\n\n----------------------------------------\n\nTITLE: Adding JSX scope analysis support - TypeScript\nDESCRIPTION: This feature enhances the scope manager to support JSX scope analysis, allowing the parser to correctly identify and manage scopes within JSX code. This enhancement allows for proper scope tracking in JSX code, which will improve accuracy and correctness of type checking and static analysis.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/parser/CHANGELOG.md#_snippet_17\n\n\n\n----------------------------------------\n\nTITLE: Supporting Multi-Pass Fixes in RuleTester - TypeScript\nDESCRIPTION: This snippet illustrates how to support multi-pass fixes in the `RuleTester`. It requires providing an array of strings for the `output` property, where each string represents the output after each fix pass. Requires adapting existing tests to use an array of strings as the expected output.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/website/blog/2024-05-27-announcing-typescript-eslint-v8-beta.mdx#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RuleTester } from '@typescript-eslint/rule-tester';\nimport rule from '../src/rules/my-rule.ts';\n\nconst ruleTester = new RuleTester();\n\nruleTester.run('my-rule', rule, {\n  valid: [\n    /* ... */\n  ],\n  invalid: [\n    {\n      code: 'const a = 1;',\n      // Remove the line with string form of `output`\n      output: 'const b = 1;',\n      // Add the line with array form of `output`\n      output: ['const b = 1;', 'const c = 1;'],\n      errors: [\n        /* ... */\n      ],\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Correct - allowIIFEs: true\nDESCRIPTION: Correct usage when `allowIIFEs` is enabled.  The return type is not required for Immediately Invoked Function Expressions (IIFEs).\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/explicit-function-return-type.mdx#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nvar foo = (() => 'foo')();\n\nvar bar = (function () {\n  return 'bar';\n})();\n```\n\n----------------------------------------\n\nTITLE: Incorrect Case-Sensitive Type Definition - TypeScript\nDESCRIPTION: This code snippet demonstrates an incorrectly sorted type definition with the `caseSensitive` option set to `true`.  `'DeletedAt'` should be after `'DeleteForever'` in a case-sensitive sort.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/sort-type-constituents.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype T = 'DeletedAt' | 'DeleteForever';\n```\n\n----------------------------------------\n\nTITLE: Adding JSDocParsingMode enum merge for typescript/lib/tsserverlibrary\nDESCRIPTION: This fix merges the JSDocParsingMode enum from the typescript/lib/tsserverlibrary, addressing potential issues with JSDoc parsing within the typescript-estree package. It ensures consistency in JSDoc handling across different TypeScript versions.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/typescript-estree/CHANGELOG.md#_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n- **typescript-estree:** add JSDocParsingMode enum merge for typescript/lib/tsserverlibrary\n```\n\n----------------------------------------\n\nTITLE: Disabling Type-Aware Linting on JavaScript Files\nDESCRIPTION: This configuration disables type-aware linting rules on JavaScript files in a TypeScript project. It extends `tseslint.configs.disableTypeChecked` for JS files, turns off a type-aware rule from another plugin, and disables the `explicit-function-return-type` rule from TypeScript-ESLint. This is useful when you want to apply different linting rules to JavaScript and TypeScript files in the same project.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/packages/TypeScript_ESLint.mdx#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport default tseslint.config({\n  files: ['**/*.js'],\n  extends: [tseslint.configs.disableTypeChecked],\n  rules: {\n    // turn off other type-aware rules\n    'other-plugin/typed-rule': 'off',\n\n    // turn off rules that don't apply to JS code\n    '@typescript-eslint/explicit-function-return-type': 'off',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Parser Options in ESLint\nDESCRIPTION: This code snippet shows the structure of `parserOptions` within an ESLint configuration file. It highlights the different configuration options available for the `@typescript-eslint/parser`, like `cacheLifetime`, `ecmaFeatures`, `project`, `tsconfigRootDir` and more. These options control how the parser handles TypeScript code.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/packages/Parser.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface ParserOptions {\n  cacheLifetime?: {\n    glob?: number | 'Infinity';\n  };\n  disallowAutomaticSingleRunInference?: boolean;\n  ecmaFeatures?: {\n    jsx?: boolean;\n    globalReturn?: boolean;\n  };\n  ecmaVersion?: number | 'latest';\n  emitDecoratorMetadata?: boolean;\n  experimentalDecorators?: boolean;\n  isolatedDeclarations?: boolean;\n  extraFileExtensions?: string[];\n  jsDocParsingMode?: 'all' | 'none' | 'type-info';\n  jsxFragmentName?: string | null;\n  jsxPragma?: string | null;\n  lib?: string[];\n  programs?: import('typescript').Program[];\n  project?: string | string[] | boolean | null;\n  projectFolderIgnoreList?: string[];\n  projectService?: boolean | ProjectServiceOptions;\n  tsconfigRootDir?: string;\n  warnOnUnsupportedTypeScriptVersion?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect examples with 'always' option\nDESCRIPTION: Shows incorrect usages of the 'always' option. These examples violate the rule by not awaiting promises, or awaiting non promise values.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/return-await.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nasync function invalidAlways1() {\n  try {\n    return Promise.resolve('try');\n  } catch (e) {}\n}\n\nasync function invalidAlways2() {\n  return Promise.resolve('try');\n}\n\nasync function invalidAlways3() {\n  return await 'value';\n}\n```\n\n----------------------------------------\n\nTITLE: Extending with Strict Config (Flat)\nDESCRIPTION: This snippet shows how to extend the ESLint configuration using the `strict` configuration, using the Flat Config style.  It builds upon `recommended` with more opinionated rules.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/users/Shared_Configurations.mdx#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nexport default tseslint.config(\n  tseslint.configs.strict,\n);\n```\n\n----------------------------------------\n\nTITLE: Fixing Decorator Traversal for AssignmentPattern\nDESCRIPTION: This commit fixes an issue related to the correct traversal of decorators in the context of AssignmentPattern nodes within the TypeScript AST. It ensures that decorators attached to assignment patterns are correctly identified and processed during AST traversal, resolving issues in linting or analysis related to decorated assignment patterns.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/visitor-keys/CHANGELOG.md#_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\ncorrect decorator traversal for AssignmentPattern ([#2375](https://github.com/typescript-eslint/typescript-eslint/issues/2375)) ([d738fa4](https://github.com/typescript-eslint/typescript-eslint/commit/d738fa4eff0a5c4cfc9b30b1c0502f8d1e78d7b6))\n```\n\n----------------------------------------\n\nTITLE: Enum with Variable and Expression Assignments (Incorrect)\nDESCRIPTION: This code demonstrates incorrect usage of the 'prefer-literal-enum-member' rule, where enum members are assigned values that are not literals, such as variables, template literals with interpolation, expressions, and other enum members. It uses TypeScript.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-literal-enum-member.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst str = 'Test';\nconst string1 = 'string1';\nconst string2 = 'string2';\n\nenum Invalid {\n  A = str, // Variable assignment\n  B = `Interpolates ${string1} and ${string2}`, // Template literal with interpolation\n  C = 2 + 2, // Expression assignment\n  D = C, // Assignment to another enum member\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Types for Flat Config Files in typescript-eslint\nDESCRIPTION: This commit adds types for flat config files within the typescript-eslint project.  It allows developers to configure their ESLint setups using a flat configuration file, providing improved type safety and autocompletion for configuration options. This enhancement improves the developer experience when working with ESLint and TypeScript.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/scope-manager/CHANGELOG.md#_snippet_0\n\nLANGUAGE: None\nCODE:\n```\n66cd0c0\n```\n\n----------------------------------------\n\nTITLE: Skipping `isTTY` version check if user passes `loggerFn`\nDESCRIPTION: This feature skips the `isTTY` version check if the user provides a `loggerFn` when using an unsupported TypeScript version, providing a workaround for cases where the TTY check is not necessary or causing issues.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/typescript-estree/CHANGELOG.md#_snippet_16\n\nLANGUAGE: Markdown\nCODE:\n```\n* **typescript-estree:** skip `isTTY` version check if user passes `loggerFn` on unsupported TypeScript version warning ([#7739](https://github.com/typescript-eslint/typescript-eslint/issues/7739)) ([9656e13](https://github.com/typescript-eslint/typescript-eslint/commit/9656e135e78d9346d326d0c78ba772a5596c1812))\n```\n\n----------------------------------------\n\nTITLE: Project Service Options Interface - TypeScript\nDESCRIPTION: Defines the interface `ProjectServiceOptions` for configuring the project service used by the parser. It includes options for allowing default project files, specifying a default TSConfig path, loading TypeScript plugins, and setting a maximum file match count for default projects.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/packages/TypeScript_ESTree.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ProjectServiceOptions {\n  /**\n   * Globs of files to allow running with the default project compiler options.\n   */\n  allowDefaultProject?: string[];\n\n  /**\n   * Path to a TSConfig to use instead of TypeScript's default project configuration.\n   * @default 'tsconfig.json'\n   */\n  defaultProject?: string;\n\n  /**\n   * Whether to load TypeScript plugins as configured in the TSConfig.\n   */\n  loadTypeScriptPlugins?: boolean;\n\n  /**\n   * The maximum number of files {@link allowDefaultProject} may match.\n   * Each file match slows down linting, so if you do need to use this, please\n   * file an informative issue on typescript-eslint explaining why - so we can\n   * help you avoid using it!\n   * @default 8\n   */\n  maximumDefaultProjectFileMatchCount_THIS_WILL_SLOW_DOWN_LINTING?: number;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Non-Null Assertion with Nullish Coalescing (TypeScript)\nDESCRIPTION: This code snippet demonstrates incorrect usage of the non-null assertion operator (!) in conjunction with the nullish coalescing operator (??). The non-null assertion is redundant on the left-hand side of the ?? operator when strict null checks are enabled.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-non-null-asserted-nullish-coalescing.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfoo! ?? bar;\nfoo.bazz! ?? bar;\nfoo!.bazz! ?? bar;\nfoo()! ?? bar;\n\nlet x!: string;\nx! ?? '';\n\nlet x: string;\nx = foo();\nx! ?? '';\n```\n\n----------------------------------------\n\nTITLE: CallbackOptions Definition (TypeScript)\nDESCRIPTION: Defines the `CallbackOptions` interface used in the `ignoreInferredTypes` example. Demonstrates the mutable nature of the interface with a non-readonly `prop`.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-readonly-parameter-types.mdx#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface CallbackOptions {\n  prop: string;\n}\ntype Callback = (options: CallbackOptions) => void;\ntype AcceptsCallback = (callback: Callback) => void;\n\nexport const acceptsCallback: AcceptsCallback;\n```\n\n----------------------------------------\n\nTITLE: Updating dependency ranges to TypeScript 4.7\nDESCRIPTION: This commit updates the dependency ranges to officially support TypeScript 4.7. This change ensures compatibility with the latest TypeScript version and allows the toolchain to leverage new features and improvements.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/typescript-estree/CHANGELOG.md#_snippet_50\n\nLANGUAGE: plaintext\nCODE:\n```\nc4310b1\n```\n\n----------------------------------------\n\nTITLE: createProgram Function Declaration - TypeScript\nDESCRIPTION: Declares the `createProgram` function, which creates a TypeScript program instance from a configuration file. It accepts the path to a tsconfig file and an optional project directory and returns a TypeScript `Program` object.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/packages/TypeScript_ESTree.mdx#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function createProgram(\n  configFile: string,\n  projectDirectory: string = process.cwd(),\n): import('typescript').Program;\n\n```\n\n----------------------------------------\n\nTITLE: Extending ESLint configurations with `extends` property\nDESCRIPTION: This code demonstrates how to extend shared configurations for specific file patterns using the `extends` property within `tseslint.config`.  It applies ESLint and TypeScript-ESLint recommended rules to TypeScript files and sets a specific rule. This example demonstrates the flexibility and convenience of the `extends` property for managing configurations.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/packages/TypeScript_ESLint.mdx#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default tseslint.config({\n  files: ['**/*.ts'],\n  extends: [\n    eslint.configs.recommended,\n    tseslint.configs.recommended,\n  ],\n  rules: {\n    '@typescript-eslint/array-type': 'error',\n    // ...\n  },\n});\n\n// is the same as writing\n\nexport default [\n  ...[\n    eslint.configs.recommended,\n    ...tseslint.configs.recommended,\n  ].map(conf => ({\n    ...conf,\n    files: ['**/*.ts'],\n  })),\n  {\n    files: ['**/*.ts'],\n    rules: {\n      '@typescript-eslint/array-type': 'error',\n      // ...\n    },\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Default Member Ordering Configuration - JSON\nDESCRIPTION: The default configuration for the `member-ordering` rule in typescript-eslint.  It specifies the order in which different member types (fields, constructors, accessors, getters, setters, methods, etc.) should appear within a class, interface, or type literal.  The configuration is a JSON object that defines a `default` property, which contains an array of member type strings, providing a structured hierarchy for organizing members.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/member-ordering.mdx#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"default\": {\n    \"memberTypes\": [\n      // Index signature\n      \"signature\",\n      \"call-signature\",\n\n      // Fields\n      \"public-static-field\",\n      \"protected-static-field\",\n      \"private-static-field\",\n      \"#private-static-field\",\n\n      \"public-decorated-field\",\n      \"protected-decorated-field\",\n      \"private-decorated-field\",\n\n      \"public-instance-field\",\n      \"protected-instance-field\",\n      \"private-instance-field\",\n      \"#private-instance-field\",\n\n      \"public-abstract-field\",\n      \"protected-abstract-field\",\n\n      \"public-field\",\n      \"protected-field\",\n      \"private-field\",\n      \"#private-field\",\n\n      \"static-field\",\n      \"instance-field\",\n      \"abstract-field\",\n\n      \"decorated-field\",\n\n      \"field\",\n\n      // Static initialization\n      \"static-initialization\",\n\n      // Constructors\n      \"public-constructor\",\n      \"protected-constructor\",\n      \"private-constructor\",\n\n      \"constructor\",\n\n      // Accessors\n      \"public-static-accessor\",\n      \"protected-static-accessor\",\n      \"private-static-accessor\",\n      \"#private-static-accessor\",\n\n      \"public-decorated-accessor\",\n      \"protected-decorated-accessor\",\n      \"private-decorated-accessor\",\n\n      \"public-instance-accessor\",\n      \"protected-instance-accessor\",\n      \"private-instance-accessor\",\n      \"#private-instance-accessor\",\n\n      \"public-abstract-accessor\",\n      \"protected-abstract-accessor\",\n\n      \"public-accessor\",\n      \"protected-accessor\",\n      \"private-accessor\",\n      \"#private-accessor\",\n\n      \"static-accessor\",\n      \"instance-accessor\",\n      \"abstract-accessor\",\n\n      \"decorated-accessor\",\n\n      \"accessor\",\n\n      // Getters\n      \"public-static-get\",\n      \"protected-static-get\",\n      \"private-static-get\",\n      \"#private-static-get\",\n\n      \"public-decorated-get\",\n      \"protected-decorated-get\",\n      \"private-decorated-get\",\n\n      \"public-instance-get\",\n      \"protected-instance-get\",\n      \"private-instance-get\",\n      \"#private-instance-get\",\n\n      \"public-abstract-get\",\n      \"protected-abstract-get\",\n\n      \"public-get\",\n      \"protected-get\",\n      \"private-get\",\n      \"#private-get\",\n\n      \"static-get\",\n      \"instance-get\",\n      \"abstract-get\",\n\n      \"decorated-get\",\n\n      \"get\",\n\n      // Setters\n      \"public-static-set\",\n      \"protected-static-set\",\n      \"private-static-set\",\n      \"#private-static-set\",\n\n      \"public-decorated-set\",\n      \"protected-decorated-set\",\n      \"private-decorated-set\",\n\n      \"public-instance-set\",\n      \"protected-instance-set\",\n      \"private-instance-set\",\n      \"#private-instance-set\",\n\n      \"public-abstract-set\",\n      \"protected-abstract-set\",\n\n      \"public-set\",\n      \"protected-set\",\n      \"private-set\",\n      \"#private-set\",\n\n      \"static-set\",\n      \"instance-set\",\n      \"abstract-set\",\n\n      \"decorated-set\",\n\n      \"set\",\n\n      // Methods\n      \"public-static-method\",\n      \"protected-static-method\",\n      \"private-static-method\",\n      \"#private-static-method\",\n\n      \"public-decorated-method\",\n      \"protected-decorated-method\",\n      \"private-decorated-method\",\n\n      \"public-instance-method\",\n      \"protected-instance-method\",\n      \"private-instance-method\",\n      \"#private-instance-method\",\n\n      \"public-abstract-method\",\n      \"protected-abstract-method\",\n\n      \"public-method\",\n      \"protected-method\",\n      \"private-method\",\n      \"#private-method\",\n\n      \"static-method\",\n      \"instance-method\",\n      \"abstract-method\",\n\n      \"decorated-method\",\n\n      \"method\",\n    ],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Run ESLint on the Project (Yarn)\nDESCRIPTION: Executes ESLint on the project using Yarn. This command will lint all TypeScript and JavaScript files in the current directory and output any linting errors to the console.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/getting-started/Quickstart.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn eslint .\n```\n\n----------------------------------------\n\nTITLE: Correct Object Access Example - TypeScript\nDESCRIPTION: This example demonstrates the correct way to access an object's element using index access in TypeScript when `enforceForRenamedProperties` is not true. The valid code is `const x = { 0: 'a' }; const y = x[0];`.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-destructuring.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst x = { 0: 'a' };\nconst y = x[0];\n```\n\n----------------------------------------\n\nTITLE: Reordering AST Node Types in visitor-keys\nDESCRIPTION: This snippet shows the fix for reordering `TSSatisfiesExpression` and `TSTypeAssertion` in visitor-keys. This reordering likely affects the order in which these AST node types are visited by the visitor.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/visitor-keys/CHANGELOG.md#_snippet_0\n\nLANGUAGE: None\nCODE:\n```\n- **visitor-keys:** reorder `TSSatisfiesExpression` and `TSTypeAssertion`\n```\n\n----------------------------------------\n\nTITLE: Disallowing Parameter Properties in TypeScript\nDESCRIPTION: These TypeScript class examples demonstrate code that violates the rule when no options are specified, meaning parameter properties are disallowed.  The constructor parameters are declared with modifiers (readonly, private, protected, public), which are considered parameter properties.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/parameter-properties.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass Foo {\n  constructor(readonly name: string) {}\n}\n\nclass Foo {\n  constructor(private name: string) {}\n}\n\nclass Foo {\n  constructor(protected name: string) {}\n}\n\nclass Foo {\n  constructor(public name: string) {}\n}\n\nclass Foo {\n  constructor(private readonly name: string) {}\n}\n\nclass Foo {\n  constructor(protected readonly name: string) {}\n}\n\nclass Foo {\n  constructor(public readonly name: string) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Addition with allowNullish: true\nDESCRIPTION: This snippet shows examples of correct addition operations when the `allowNullish` option is enabled. Adding a number or string to `null` or `undefined` is allowed.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/restrict-plus-operands.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nlet fn = (a: number, b: undefined) => a + b;\nlet fn = (a: number, b: null) => a + b;\nlet fn = (a: string, b: undefined) => a + b;\nlet fn = (a: string, b: null) => a + b;\n```\n\n----------------------------------------\n\nTITLE: Incorrect Class Member Ordering (Public Instance Method vs Static Field)\nDESCRIPTION: This TypeScript code snippet demonstrates an incorrect member order in a class, violating the enforced rule that public instance methods should come before public static fields.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/member-ordering.mdx#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nclass Foo {\n  private C: string; // (irrelevant)\n\n  public D: string; // (irrelevant)\n\n  public static E: string; // -> public static field\n\n  constructor() {} // (irrelevant)\n\n  public static A(): void {} // (irrelevant)\n\n  [Z: string]: any; // (irrelevant)\n\n  public B(): void {} // -> public instance method\n}\n```\n\n----------------------------------------\n\nTITLE: ESLint Rule Configuration Object - v6 Recommended Type Checked\nDESCRIPTION: Defines an ESLint rule configuration object containing TypeScript ESLint rules that require type checking, along with their severity levels ('error').  This configuration is designed for stricter analysis and enforcement of type-related best practices.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/website/blog/2023-07-09-announcing-typescript-eslint-v6.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst v6RecommendedTypeChecked = {\n  '@typescript-eslint/await-thenable': 'error',\n  '@typescript-eslint/ban-ts-comment': 'error',\n  '@typescript-eslint/ban-types': 'error',\n  'no-array-constructor': 'off',\n  '@typescript-eslint/no-array-constructor': 'error',\n  '@typescript-eslint/no-base-to-string': 'error',\n  '@typescript-eslint/no-duplicate-enum-values': 'error',\n  '@typescript-eslint/no-duplicate-type-constituents': 'error',\n  '@typescript-eslint/no-explicit-any': 'error',\n  '@typescript-eslint/no-extra-non-null-assertion': 'error',\n  '@typescript-eslint/no-floating-promises': 'error',\n  '@typescript-eslint/no-for-in-array': 'error',\n  'no-implied-eval': 'off',\n  '@typescript-eslint/no-implied-eval': 'error',\n  'no-loss-of-precision': 'off',\n  '@typescript-eslint/no-loss-of-precision': 'error',\n  '@typescript-eslint/no-misused-new': 'error',\n  '@typescript-eslint/no-misused-promises': 'error',\n  '@typescript-eslint/no-namespace': 'error',\n  '@typescript-eslint/no-non-null-asserted-optional-chain': 'error',\n  '@typescript-eslint/no-redundant-type-constituents': 'error',\n  '@typescript-eslint/no-this-alias': 'error',\n  '@typescript-eslint/no-unnecessary-type-assertion': 'error',\n  '@typescript-eslint/no-unnecessary-type-constraint': 'error',\n  '@typescript-eslint/no-unsafe-argument': 'error',\n  '@typescript-eslint/no-unsafe-assignment': 'error',\n  '@typescript-eslint/no-unsafe-call': 'error',\n  '@typescript-eslint/no-unsafe-declaration-merging': 'error',\n  '@typescript-eslint/no-unsafe-enum-comparison': 'error',\n  '@typescript-eslint/no-unsafe-member-access': 'error',\n  '@typescript-eslint/no-unsafe-return': 'error',\n  'no-unused-vars': 'off',\n  '@typescript-eslint/no-unused-vars': 'error',\n  '@typescript-eslint/no-var-requires': 'error',\n  '@typescript-eslint/prefer-as-const': 'error',\n  'require-await': 'off',\n  '@typescript-eslint/require-await': 'error',\n  '@typescript-eslint/restrict-plus-operands': 'error',\n  '@typescript-eslint/restrict-template-expressions': 'error',\n  '@typescript-eslint/triple-slash-reference': 'error',\n  '@typescript-eslint/unbound-method': 'error',\n};\n```\n\n----------------------------------------\n\nTITLE: Disallowing 'this' alias destructuring\nDESCRIPTION: This example demonstrates the effect of setting the 'allowDestructuring' option to false.  When set to false, destructuring properties from 'this' is disallowed. The incorrect example destructures 'props' and 'state' from 'this', while the correct example accesses them directly.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-this-alias.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass ComponentLike {\n  props: unknown;\n  state: unknown;\n\n  render() {\n    const { props, state } = this;\n\n    console.log(props);\n    console.log(state);\n  }\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nclass ComponentLike {\n  props: unknown;\n  state: unknown;\n\n  render() {\n    console.log(this.props);\n    console.log(this.state);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Union Type Definition - TypeScript\nDESCRIPTION: This code snippet demonstrates an incorrectly sorted union type definition with the `checkUnions` option set to `true`. The union `B | A` is not alphabetically ordered.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/sort-type-constituents.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ntype ExampleUnion = B | A;\n```\n\n----------------------------------------\n\nTITLE: Correct ignoreInferredTypes Option (TypeScript)\nDESCRIPTION: Shows correct usage of the `ignoreInferredTypes` option where the callback's parameters are inferred. This allows mutable types in cases where external dependencies specify mutable parameters.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-readonly-parameter-types.mdx#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { acceptsCallback } from 'external-dependency';\n\nacceptsCallback(options => {});\n```\n\n----------------------------------------\n\nTITLE: Updating Lib Types in Scope Manager\nDESCRIPTION: This update refreshes the library types used within the scope manager. The update provides more accurate type information, which improves the overall precision and reliability of scope analysis.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/scope-manager/CHANGELOG.md#_snippet_24\n\nLANGUAGE: text\nCODE:\n```\n8377e6ea422ee2d52455da8955ff055e09c238d3\n```\n\n----------------------------------------\n\nTITLE: FileSpecifier Example (JSON)\nDESCRIPTION: Shows how to configure FileSpecifier to match all types and values named `Props`.  The specifier targets elements named 'Props' within the specified files. The 'from' field identifies this as a file specifier and the 'name' field indicates the type or value to match.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/packages/type-utils/TypeOrValueSpecifier.mdx#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{ \"from\": \"file\", \"name\": \"Props\" }\n```\n\n----------------------------------------\n\nTITLE: Options interface definition in TypeScript\nDESCRIPTION: Defines the `Options` interface which extends `BaseMaxParamsOptions` and adds the `countVoidThis` option. The `countVoidThis` option determines whether `this: void` parameters are included in the parameter count.  It's a boolean value; default is false.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/max-params.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Options extends BaseMaxParamsOptions {\n  countVoidThis?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding EXPERIMENTAL_useProjectService option in TypeScript-eslint\nDESCRIPTION: This snippet describes the addition of an experimental option EXPERIMENTAL_useProjectService to use the TypeScript project service within typescript-eslint, addressing issue #6754.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/types/CHANGELOG.md#_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n* **typescript-estree:** add EXPERIMENTAL_useProjectService option to use TypeScript project service ([#6754](https://github.com/typescript-eslint/typescript-eslint/issues/6754)) ([6d3d162](https://github.com/typescript-eslint/typescript-eslint/commit/6d3d162ce032ebcf5f892a4edfb897797fc96191))\n```\n\n----------------------------------------\n\nTITLE: Correct Promise return with async\nDESCRIPTION: Examples of correct code where functions returning a Promise are marked as async. It also demonstrates how to explicitly define a return type that includes a Promise to bypass the rule when needed.  The last example shows that when a function returns a union that implicitly includes a Promise, marking it as async satisfies the rule.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/promise-function-async.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst arrowFunctionReturnsPromise = async () => Promise.resolve('value');\n\nasync function functionReturnsPromise() {\n  return Promise.resolve('value');\n}\n\n// An explicit return type that is not Promise means this function cannot be made async, so it is ignored by the rule\nfunction functionReturnsUnionWithPromiseExplicitly(\n  p: boolean,\n): string | Promise<string> {\n  return p ? 'value' : Promise.resolve('value');\n}\n\nasync function functionReturnsUnionWithPromiseImplicitly(p: boolean) {\n  return p ? 'value' : Promise.resolve('value');\n}\n```\n\n----------------------------------------\n\nTITLE: Updating lib types\nDESCRIPTION: This commit updates the library types within the scope manager. This update ensures that the type definitions are accurate and up-to-date.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/typescript-estree/CHANGELOG.md#_snippet_55\n\nLANGUAGE: plaintext\nCODE:\n```\n8377e6e\n```\n\n----------------------------------------\n\nTITLE: Manual Dependency Update Interactive\nDESCRIPTION: This snippet demonstrates how to use Yarn's interactive update feature to selectively update dependencies. It allows you to choose which dependencies to update.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/maintenance/pull-requests/Dependency_Version_Upgrades.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn update-interactive\n```\n\n----------------------------------------\n\nTITLE: Disabling ESLint rule for TypeScript files in Flat Config\nDESCRIPTION: This code snippet demonstrates how to disable the `no-undef` rule in ESLint for TypeScript files using the flat config format. This is recommended because TypeScript itself handles undefined variable checks, making the ESLint rule redundant and potentially error-prone.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/troubleshooting/faqs/ESLint.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport tseslint from 'typescript-eslint';\n\nexport default tseslint.config(\n  // ... the rest of your config ...\n  {\n    files: ['**/*.{ts,tsx,mts,cts}'],\n    rules: {\n      'no-undef': 'off',\n    },\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Banning Unlabeled TypeScript Tuples (JSON)\nDESCRIPTION: Configures `no-restricted-syntax` to enforce that all members of TypeScript tuples have labels. The AST selector targets tuple members that are not `TSNamedTupleMember` nodes.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/troubleshooting/faqs/General.mdx#_snippet_6\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"rules\": {\n    \"no-restricted-syntax\": [\n      \"error\",\n      // enforce tuple members have labels\n      {\n        \"selector\": \"TSTupleType > :not(TSNamedTupleMember)\",\n        \"message\": \"All tuples should have labels.\",\n      },\n    ],\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Example AST Representation of JavaScript Code\nDESCRIPTION: This code snippet demonstrates how a simple JavaScript expression (1 + 2;) is represented as an AST using the ESTree format. It shows the hierarchical structure of the AST, with nodes for the ExpressionStatement, BinaryExpression, and Literals.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/website/blog/2022-12-05-asts-and-typescript-eslint.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"ExpressionStatement\",\n  \"expression\": {\n    \"type\": \"BinaryExpression\",\n    \"left\": {\n      \"type\": \"Literal\",\n      \"value\": 1,\n      \"raw\": \"1\"\n    },\n    \"operator\": \"+\",\n    \"right\": {\n      \"type\": \"Literal\",\n      \"value\": 2,\n      \"raw\": \"2\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: AST Spec Test\nDESCRIPTION: This snippet shows the command to run the AST spec tests after updating Babel dependencies. The `-u` flag updates the snapshots.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/maintenance/pull-requests/Dependency_Version_Upgrades.mdx#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx nx run ast-spec:test -u\n```\n\n----------------------------------------\n\nTITLE: Fixing type portability with RuleCreator\nDESCRIPTION: This commit resolves a type portability issue related to `RuleCreator` in the @typescript-eslint/utils package, specifically addressing issue #7605. The fix, identified by commit hash 4e235919811614006d6ebbb7906200ec1b04fbf6, ensures that the `RuleCreator` type is portable across different environments, enhancing usability and compatibility.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/utils/CHANGELOG.md#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n4e23591(https://github.com/typescript-eslint/typescript-eslint/commit/4e235919811614006d6ebbb7906200ec1b04fbf6)\n```\n\n----------------------------------------\n\nTITLE: Using PackageSpecifier in no-floating-promises rule (JSON)\nDESCRIPTION: Demonstrates how to use a PackageSpecifier to mark a function as safe within the @typescript-eslint/no-floating-promises rule. It specifies that the 'it' function from the 'node:test' package is considered safe, preventing the rule from flagging it as an issue.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/packages/type-utils/TypeOrValueSpecifier.mdx#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"@typescript-eslint/no-floating-promises\": [\n    \"error\",\n    {\n      \"allowForKnownSafeCalls\": [\n        { \"from\": \"package\", \"name\": \"it\", \"package\": \"node:test\" }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Enforce getters style for class literals - Incorrect\nDESCRIPTION: This snippet shows incorrect usage of the `getters` style, where `readonly` fields are assigned literal values. The rule suggests using getter methods instead of readonly fields for literals when using the `getters` style.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/class-literal-property-style.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nclass Mx {\n  readonly myField1 = 1;\n  readonly myField2 = `hello world`;\n  private readonly myField3 = 'hello world';\n}\n```\n\n----------------------------------------\n\nTITLE: Creating project service from env setting only if project is enabled\nDESCRIPTION: This change ensures that the project service is only created from the environment settings if the `project` option is enabled in the parser configuration. This prevents unnecessary project service initialization when it is not required, optimizing performance.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/typescript-estree/CHANGELOG.md#_snippet_6\n\nLANGUAGE: Markdown\nCODE:\n```\n- **typescript-estree:** only create project service from env setting if project is enabled\n```\n\n----------------------------------------\n\nTITLE: Generating scope-manager types\nDESCRIPTION: This snippet instructs to run `yarn generate-lib` to update the types within `scope-manager`. This ensures the type definitions are up to date with the new TypeScript version.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/maintenance/pull-requests/Dependency_Version_Upgrades.mdx#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nRun `yarn generate-lib` to update `scope-manager`\n```\n\n----------------------------------------\n\nTITLE: Configuring selective parts of checksVoidReturn in no-misused-promises\nDESCRIPTION: This code snippet demonstrates disabling specific checks within the checksVoidReturn option of the @typescript-eslint/no-misused-promises rule. It disables checks for arguments and attributes, which prevents the rule from flagging asynchronous functions passed as arguments or JSX attributes where a void return is expected. The configuration sets the rule to \"error\" and disables the \"arguments\" and \"attributes\" sub-options within \"checksVoidReturn\".\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-misused-promises.mdx#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"@typescript-eslint/no-misused-promises\": [\n    \"error\",\n    {\n      \"checksVoidReturn\": {\n        \"arguments\": false,\n        \"attributes\": false\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Interface Implementation with Default Type Parameter\nDESCRIPTION: Demonstrates a class `Impl` implementing an interface `I` which has a default type parameter `T = number`.  Specifying the default type `number` during implementation is redundant.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-unnecessary-type-arguments.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ninterface I<T = number> {}\nclass Impl implements I<number> {}\n```\n\n----------------------------------------\n\nTITLE: Correct: Necessary Condition - Number Predicate\nDESCRIPTION: This example shows a correct array filter usage, because a number can be either truthy or falsy in JavaScript. The filter predicate `t => t` is therefore necessary.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-unnecessary-condition.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n[0, 1, 2, 3].filter(t => t); // number can be truthy or falsy\n```\n\n----------------------------------------\n\nTITLE: Inserting JSX Node into MDX AST with TypeScript\nDESCRIPTION: This code snippet demonstrates how to insert a JSX node into the Abstract Syntax Tree (AST) of an MDX (Markdown + JSX) document. It finds the index of the heading with depth 2, then inserts a JSX node containing a React component as a string at that index.  The component name is dynamically generated from the file name. Dependencies include `unist` and `mdast` types for AST node manipulation.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/website/blog/2022-09-18-automated-rule-docs-with-docusaurus-and-remark.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst attributesH2Index = root.children.findIndex(\n  child => nodeIsHeading(child) && child.depth === 2,\n);\n\nroot.children.splice(attributesH2Index, 0, {\n  type: 'jsx',\n  value: `<rule-attributes name=\"${file.stem}\" />`,\n});\n\nfunction nodeIsHeading(node: unist.Node): node is mdast.Heading {\n  return node.type === 'heading';\n}\n```\n\n----------------------------------------\n\nTITLE: Correct: Constant Loop Condition - Only Allowed Literals\nDESCRIPTION: This example shows correct code when `allowConstantLoopConditions` is set to `'only-allowed-literals'`.  Specifically, `true`, `false`, `0`, and `1` are allowed as the conditions to `while` loops.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-unnecessary-condition.mdx#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nwhile (true) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Class with Constructor (allowConstructorOnly) - TypeScript\nDESCRIPTION: This code snippet demonstrates a correct case when the `allowConstructorOnly` option is set to `true`.  The class `NoFields` contains a constructor, making it valid under this configuration. The constructor logs a message to the console.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-extraneous-class.mdx#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nclass NoFields {\n  constructor() {\n    console.log('Hello, world!');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Type Member Ordering\nDESCRIPTION: This TypeScript code snippet shows an incorrect member order in a type literal, where the method appears before the field, violating the rule that expects signatures, then methods and finally the fields.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/member-ordering.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntype Foo = {\n  B: string; // -> field\n\n  // no constructor\n\n  A(): void; // -> method\n\n  // no signature\n};\n```\n\n----------------------------------------\n\nTITLE: Correct Required Members First (Typescript)\nDESCRIPTION: This TypeScript code demonstrates correct placement of required members before optional members, with alphabetical sorting.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/member-ordering.mdx#_snippet_50\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Foo {\n  a: boolean;\n  c: string;\n  b?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Class Extension with Default Type Parameter\nDESCRIPTION: Illustrates a class `D` extending a generic class `C` with a default type parameter. Specifying the default type `number` during extension is redundant.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-unnecessary-type-arguments.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nclass C<T = number> {}\nclass D extends C<number> {}\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up typescript-eslint Repository\nDESCRIPTION: This code snippet shows how to clone the typescript-eslint repository, navigate to the directory, and install dependencies using yarn. It's the initial setup for local development.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/contributing/Local_Development.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/<your-name-here>/typescript-eslint\ncd typescript-eslint\nyarn\n```\n\n----------------------------------------\n\nTITLE: Incorrect Interface Returning 'this' - TypeScript\nDESCRIPTION: This snippet showcases an incorrect interface declaration where the call signature returns `this`. The rule encourages using a function type alias for improved clarity and conciseness. It is flagged by the `prefer-function-type` rule.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-function-type.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ReturnsSelf {\n  // returns the function itself, not the `this` argument.\n  (arg: string): this;\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing regexp with map-filter in parser - TypeScript\nDESCRIPTION: This bug fix addresses a minor issue related to regular expression handling within the parser, specifically involving the use of map-filter operations which were reduced to improve efficiency and prevent potential errors during parsing. This improves the accuracy and performance of parsing regular expressions.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/parser/CHANGELOG.md#_snippet_15\n\n\n\n----------------------------------------\n\nTITLE: Allow Nullish in template literals\nDESCRIPTION: Demonstrates how to allow `null` and `undefined` types in template literals using the `allowNullish` option.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/restrict-template-expressions.mdx#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst arg = condition ? 'ok' : null;\nconst msg1 = `arg = ${arg}`;\n```\n\n----------------------------------------\n\nTITLE: Creating a tsconfig.eslint.json\nDESCRIPTION: This JSONC configuration file extends an existing tsconfig.json file and adds configurations specifically for ESLint, such as disabling emitting to prevent accidental builds and including the necessary paths to be linted. This ensures that ESLint only uses this config for linting purposes.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/troubleshooting/typed-linting/Monorepos.mdx#_snippet_0\n\nLANGUAGE: JSONC\nCODE:\n```\n{\n  // extend your base config to share compilerOptions, etc\n  \"extends\": \"./tsconfig.json\",\n  \"compilerOptions\": {\n    // ensure that nobody can accidentally use this config for a build\n    \"noEmit\": true,\n  },\n  \"include\": [\n    // whatever paths you intend to lint\n    \"src\",\n    \"test\",\n    \"tools\",\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Disallow Namespaces with allowDeclarations - Correct - TypeScript\nDESCRIPTION: These examples demonstrate code that adheres to the `no-namespace` rule when the `allowDeclarations` option is set to `true`.  Declarations of modules and namespaces using `declare` are considered correct.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-namespace.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare module 'foo' {}\ndeclare module foo {}\ndeclare namespace foo {}\n\ndeclare global {\n  namespace foo {}\n}\n\ndeclare module foo {\n  namespace foo {}\n}\n```\n\n----------------------------------------\n\nTITLE: Visiting static blocks\nDESCRIPTION: This code snippet ensures that static blocks are visited during scope analysis in the @typescript-eslint scope-manager. This addresses a bug where static blocks were not being processed correctly. It requires proper traversal of the AST.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/scope-manager/CHANGELOG.md#_snippet_12\n\nLANGUAGE: none\nCODE:\n```\n**scope-manager:** visit static blocks ([#5489](https://github.com/typescript-eslint/typescript-eslint/issues/5489)) ([78745c2](https://github.com/typescript-eslint/typescript-eslint/commit/78745c2092064446837b5683892001030a8bb4e2))\n```\n\n----------------------------------------\n\nTITLE: Function with 'any' Return Type and Console Log (JavaScript)\nDESCRIPTION: This JavaScript function, `foo`, is annotated with an 'any' return type and contains a `console.log` statement.  It may trigger no-explicit-any and no-console linting errors.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/integration-tests/fixtures/markdown/Doc.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nfunction foo(): any {\n  console.log('test');\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Additional Allow Option Types in TypeScript\nDESCRIPTION: This code snippet defines TypeScript types for configuring the `no-empty-function` rule. `AdditionalAllowOptionEntries` specifies the allowed types, which extend `BaseNoEmptyFunctionAllowOptionEntries`. The `Options` interface integrates these types, including a default `allow` array. This determines which empty functions are permitted.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-empty-function.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype AdditionalAllowOptionEntries =\n  | 'private-constructors'\n  | 'protected-constructors'\n  | 'decoratedFunctions'\n  | 'overrideMethods';\n\ntype AllowOptionEntries =\n  | BaseNoEmptyFunctionAllowOptionEntries\n  | AdditionalAllowOptionEntries;\n\ninterface Options extends BaseNoEmptyFunctionOptions {\n  allow?: Array<AllowOptionEntries>;\n}\nconst defaultOptions: Options = {\n  ...baseNoEmptyFunctionDefaultOptions,\n  allow: [],\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint with tseslint.config with additional options\nDESCRIPTION: This example shows how to extend ESLint configurations using `tseslint.config` with additional options. It imports eslint and tseslint, then exports a config that includes recommended eslint and typescript-eslint rules, plus custom configurations. The `tseslint.config` function provides autocomplete and type-checking for configuration properties, improving the development experience.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/packages/TypeScript_ESLint.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// @ts-check\n\nimport eslint from '@eslint/js';\nimport tseslint from 'typescript-eslint';\n\nexport default tseslint.config(\n  eslint.configs.recommended,\n  tseslint.configs.recommended,\n  {\n    /*... */\n  },\n  // ...\n);\n```\n\n----------------------------------------\n\nTITLE: Correct Declaration Merging TypeScript\nDESCRIPTION: This code demonstrates correct declaration merging or alternatives in TypeScript, that do not lead to runtime errors. It includes class implementing interface, namespace merging, enum merging with namespace and function merging with namespace. The goal is to showcase approved scenarios or patterns to follow when working with declaration merging.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-unsafe-declaration-merging.mdx#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface Foo {}\nclass Bar implements Foo {}\n\nnamespace Baz {}\nnamespace Baz {}\nenum Baz {}\n\nnamespace Qux {}\nfunction Qux() {}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Code Example - TypeScript\nDESCRIPTION: This snippet represents an example of incorrect TypeScript code that would violate the ESLint rule. It requires a concrete example to demonstrate the rule's purpose and how it identifies problematic code.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/TEMPLATE.md#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\n// To fill out: incorrect code\n```\n\n----------------------------------------\n\nTITLE: Correct Type Assertion with typesToIgnore\nDESCRIPTION: When `typesToIgnore` is configured to ignore the `Foo` type, this code would be considered correct, even though the `as` assertion is redundant. This allows ignoring assertions that are generally unneeded.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-unnecessary-type-assertion.mdx#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ntype Foo = 3;\nconst foo: Foo = 3;\n```\n\n----------------------------------------\n\nTITLE: ESLint Rule Configuration Object - v6 Stylistic\nDESCRIPTION: Defines an ESLint rule configuration object focusing on stylistic rules for TypeScript code.  These rules are intended to enforce consistent code formatting and style conventions.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/website/blog/2023-07-09-announcing-typescript-eslint-v6.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst v6Stylistic = {\n  '@typescript-eslint/adjacent-overload-signatures': 'error',\n  '@typescript-eslint/array-type': 'error',\n  '@typescript-eslint/ban-tslint-comment': 'error',\n  '@typescript-eslint/class-literal-property-style': 'error',\n  '@typescript-eslint/consistent-generic-constructors': 'error',\n  '@typescript-eslint/consistent-indexed-object-style': 'error',\n  '@typescript-eslint/consistent-type-assertions': 'error',\n  '@typescript-eslint/consistent-type-definitions': 'error',\n  '@typescript-eslint/no-confusing-non-null-assertion': 'error',\n  'no-empty-function': 'off',\n  '@typescript-eslint/no-empty-function': 'error',\n  '@typescript-eslint/no-empty-interface': 'error',\n  '@typescript-eslint/no-inferrable-types': 'error',\n  '@typescript-eslint/prefer-for-of': 'error',\n  '@typescript-eslint/prefer-function-type': 'error',\n  '@typescript-eslint/prefer-namespace-keyword': 'error',\n};\n```\n\n----------------------------------------\n\nTITLE: Fixing types for older TypeScript versions\nDESCRIPTION: This commit fixes an issue where types were not exposed for older versions of TypeScript. This ensures compatibility with a wider range of TypeScript versions.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/visitor-keys/CHANGELOG.md#_snippet_6\n\nLANGUAGE: Other\nCODE:\n```\nexpose types supporting old versions of typescript ([#5339](https://github.com/typescript-eslint/typescript-eslint/issues/5339)) ([4ba9bdb](https://github.com/typescript-eslint/typescript-eslint/commit/4ba9bdb93f87e6bc370f13aa1de48f435abe3f88))\n```\n\n----------------------------------------\n\nTITLE: Supporting new Typescript extensions\nDESCRIPTION: This commit adds support for new Typescript extensions introduced in Typescript 4.7. This resolves issue #5027.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/parser/CHANGELOG.md#_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: Removing Value from Abstract Property Nodes (TypeScript)\nDESCRIPTION: This code snippet removes the `value` property from abstract property nodes in the TypeScript AST. This reflects changes in the TypeScript language and simplifies the AST representation of abstract properties.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/visitor-keys/CHANGELOG.md#_snippet_17\n\nLANGUAGE: none\nCODE:\n```\n- **eslint-plugin:** removed value from abstract property nodes ([#3765](https://github.com/typescript-eslint/typescript-eslint/issues/3765)) ([5823524](https://github.com/typescript-eslint/typescript-eslint/commit/58235241714596b641a1e8b39c569e561e0039b4)), closes [#3748](https://github.com/typescript-eslint/typescript-eslint/issues/3748)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Incorrect Usage of Empty Object Type - TypeScript\nDESCRIPTION: This code snippet demonstrates the incorrect usage of the empty object type `{}` in TypeScript. It shows how to declare variables, interfaces, and type aliases using the `{}` type, which represents any non-nullish value. The rule flags these as incorrect because they can lead to confusion.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-empty-object-type.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nlet anyObject: {};\nlet anyValue: {};\n\ninterface AnyObjectA {}\ninterface AnyValueA {}\n\ntype AnyObjectB = {};\ntype AnyValueB = {};\n```\n\n----------------------------------------\n\nTITLE: Incorrect - allowIIFEs: true\nDESCRIPTION: Incorrect example demonstrating violations when `allowIIFEs` is set to `true`. This code is incorrect because the function is not an IIFE.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/explicit-function-return-type.mdx#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nvar func = () => 'foo';\n```\n\n----------------------------------------\n\nTITLE: Adding types for flat config files in TypeScript-eslint\nDESCRIPTION: This snippet announces the addition of types for flat config files within the typescript-eslint project. This feature enhancement is captured in issue #7273.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/types/CHANGELOG.md#_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n* add types for flat config files ([#7273](https://github.com/typescript-eslint/typescript-eslint/issues/7273)) ([66cd0c0](https://github.com/typescript-eslint/typescript-eslint/commit/66cd0c0535e5de1b46ba337919a9a92748d2b0a6))\n```\n\n----------------------------------------\n\nTITLE: Create Diff Patch for ESLint Rule Configurations\nDESCRIPTION: This function `createDiffPatch` compares two ESLint rule configuration objects and generates a diff patch in a string format. It identifies added (+), removed (-), and unchanged rules, visually representing the differences between the configurations.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/website/blog/2023-07-09-announcing-typescript-eslint-v6.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nfunction createDiffPatch(v5, v6) {\n  const v5Keys = new Set(Object.keys(v5));\n  const v6Keys = new Set(Object.keys(v6));\n  const output = ['{'];\n\n  for (const key of Array.from(new Set([...v5Keys, ...v6Keys])).sort((a, b) =>\n    trimSlash(a).localeCompare(trimSlash(b)),\n  )) {\n    const prefix = v5Keys.has(key) ? (v6Keys.has(key) ? ' ' : '-') : '+';\n\n    output.push(`${prefix}  '${key}': '...',`);\n  }\n\n  output.push('}');\n\n  return output.join('\\n');\n}\n```\n\n----------------------------------------\n\nTITLE: Updating to Lib Types for TypeScript 5.2 RC\nDESCRIPTION: This commit updates the project to use the lib types for TypeScript 5.2 Release Candidate (RC). This update ensures that the project is compatible with the latest features and changes introduced in TypeScript 5.2 RC, providing a more reliable and up-to-date development experience. It also guarantees that the project can take advantage of any performance improvements or bug fixes included in the RC.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/scope-manager/CHANGELOG.md#_snippet_3\n\nLANGUAGE: None\nCODE:\n```\n479f9f6\n```\n\n----------------------------------------\n\nTITLE: Correct Type Indexes with ignoreTypeIndexes: true (TypeScript)\nDESCRIPTION: This TypeScript code illustrates correct usage of type indexes when the `ignoreTypeIndexes` option of the `no-magic-numbers` rule is set to `true`. The code indexes the `Bar` type at index `0` and the parameters of `Foo` at index `2`.  Because the linter is configured with `'{ \"ignoreTypeIndexes\": true }'`, the numeric literals are ignored, and no error is reported.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-magic-numbers.mdx#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ntype Foo = Bar[0];\ntype Baz = Parameters<Foo>[2];\n\n```\n\n----------------------------------------\n\nTITLE: Correct Code: allowLiterals - In Intersections - TypeScript\nDESCRIPTION: Example of correct code when `allowLiterals` is set to `in-intersections`.  Demonstrates how object literals are allowed as type aliases when part of intersections.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-type-alias.mdx#_snippet_18\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype Foo = { name: string } & { age: number };\n```\n\n----------------------------------------\n\nTITLE: Deprecated Function Definition in TypeScript\nDESCRIPTION: This snippet shows a `worker.ts` file defining a function `work` that is marked as deprecated using JSDoc. This allows a type-aware linter to flag calls to this function as violations.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/website/blog/2024-09-30-typed-linting.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/** @deprecated - Don't do this! */\nexport function work() {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Passing `jsDocParsingMode` everywhere\nDESCRIPTION: This change ensures that the `jsDocParsingMode` option is passed consistently throughout the parser. This enables more consistent and predictable JSDoc parsing behavior.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/typescript-estree/CHANGELOG.md#_snippet_13\n\nLANGUAGE: Markdown\nCODE:\n```\n* **typescript-estree:** pass jsDocParsingMode everywhere ([#7997](https://github.com/typescript-eslint/typescript-eslint/issues/7997)) ([3d2a344](https://github.com/typescript-eslint/typescript-eslint/commit/3d2a3446518c4da303a569830bb83bf166742535))\n```\n\n----------------------------------------\n\nTITLE: Displaying Contributor Avatars and Links\nDESCRIPTION: This HTML snippet creates a table to display contributor avatars and links to their GitHub profiles. The `img` tag displays the avatar, and the `a` tag links to the profile. The `width` attribute controls the avatar size.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/CONTRIBUTORS.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<td align=\"center\"><a href=\"https://github.com/platinumazure\"><img src=\"https://avatars.githubusercontent.com/u/284282?v=4&size=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Kevin Partington</b></sub></a></td>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<td align=\"center\"><a href=\"https://github.com/MageJohn\"><img src=\"https://avatars.githubusercontent.com/u/3520558?v=4&size=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Yuri Pieters</b></sub></a></td>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<td align=\"center\"><a href=\"https://github.com/timkraut\"><img src=\"https://avatars.githubusercontent.com/u/509669?v=4&size=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Tim Kraut</b></sub></a></td>\n```\n\n----------------------------------------\n\nTITLE: Incorrect Overload Signatures with ignoreDifferentlyNamedParameters\nDESCRIPTION: This TypeScript code snippet demonstrates incorrect usage of function overloads when the 'ignoreDifferentlyNamedParameters' option is enabled.  Even though the parameters share the same name, these signatures can still be unified.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/unified-signatures.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction f(a: number): void;\nfunction f(a: string): void;\n```\n\n----------------------------------------\n\nTITLE: Describing Node Types with AST_NODE_TYPES (TypeScript)\nDESCRIPTION: Shows how to utilize `AST_NODE_TYPES` enum and `TSESTree.Node` to describe and narrow down node types within a function.  The code demonstrates a function that returns a description of an AST node based on its type.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/developers/Custom_Rules.mdx#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { AST_NODE_TYPES, TSESTree } from '@typescript-eslint/utils';\n\nexport function describeNode(node: TSESTree.Node): string {\n  switch (node.type) {\n    case AST_NODE_TYPES.ArrayExpression:\n      return `Array containing ${node.elements.map(describeNode).join(', ')}`;\n\n    case AST_NODE_TYPES.Literal:\n      return `Literal value ${node.raw}`;\n\n    default:\n      return '🤷';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Promise return with any and allowAny: false\nDESCRIPTION: Example of correct code when returning `any` with `async` and the `allowAny` option is set to false.  This demonstrates that adding `async` resolves the error when `allowAny` is false.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/promise-function-async.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst returnsAny = async () => ({}) as any;\n```\n\n----------------------------------------\n\nTITLE: Correct Index Signatures with 'index-signature' Option - TypeScript\nDESCRIPTION: This code snippet demonstrates the correct usage of index signatures (interface, type, and mapped type) when the 'index-signature' option is enabled.  It uses an interface, a type alias, and a mapped type, all with index signatures.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/consistent-indexed-object-style.mdx#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface IndexSignatureInterface {\n  [key: string]: unknown;\n}\n\ntype IndexSignatureType = {\n  [key: string]: unknown;\n};\n\ntype MappedType = {\n  [key in string]: unknown;\n};\n```\n\n----------------------------------------\n\nTITLE: Correct Static Constants as Exports - TypeScript\nDESCRIPTION: This snippet shows the correct way to define static constants and functions using module-level exports instead of a static class. Each constant and function is exported individually. process.env.NODE_ENV is accessed to determine the environment.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-extraneous-class.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport const version = 42;\n\nexport function isProduction() {\n  return process.env.NODE_ENV === 'production';\n}\n```\n\n----------------------------------------\n\nTITLE: Throw errors for object methods without function bodies\nDESCRIPTION: This change enforces that object methods must have function bodies. It catches a specific type of syntax error that might not be caught by the TypeScript compiler directly. This prevents unexpected behavior or runtime errors caused by incomplete method definitions.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/typescript-estree/CHANGELOG.md#_snippet_34\n\nLANGUAGE: text\nCODE:\n```\n* **typescript-estree:** throw errors for object methods without function bodies ([#6589](https://github.com/typescript-eslint/typescript-eslint/issues/6589)) ([1d78576](https://github.com/typescript-eslint/typescript-eslint/commit/1d78576d41323e35c2d2a2ecc92f6ee76ed61d57))\n```\n\n----------------------------------------\n\nTITLE: Configure Alphabetical Ordering (JSONC)\nDESCRIPTION: This configuration enables alphabetical sorting for members within their default member groups. The default member order will be applied.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/member-ordering.mdx#_snippet_33\n\nLANGUAGE: jsonc\nCODE:\n```\n// .eslintrc.json\n{\n  \"rules\": {\n    \"@typescript-eslint/member-ordering\": [\n      \"error\",\n      {\n        \"default\": {\n          \"order\": \"alphabetically\",\n        },\n      },\n    ],\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Tuple Types with `allowTupleTypes: in-unions`\nDESCRIPTION: This code demonstrates the correct usage of tuple types when the `allowTupleTypes` option is set to `in-unions`. Tuple types are used within union types, which is allowed under this configuration. The code defines type aliases using tuple types inside union types.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-type-alias.mdx#_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\ntype Foo = [number] | [number, number];\n\ntype Foo = [string] | [number];\n```\n\n----------------------------------------\n\nTITLE: Incorrect Enum Initialization TypeScript\nDESCRIPTION: This code snippet demonstrates incorrect enum initialization where not all members are explicitly assigned values. This can lead to unexpected behavior when enum values are critical.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-enum-initializers.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nenum Status {\n  Open = 1,\n  Close,\n}\n\nenum Direction {\n  Up,\n  Down,\n}\n\nenum Color {\n  Red,\n  Green = 'Green',\n  Blue = 'Blue',\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Safe Promise Usage (allowForKnownSafePromises)\nDESCRIPTION: This snippet demonstrates incorrect handling when the `allowForKnownSafePromises` option is configured. Even with the option defined, standard Promises not explicitly branded are flagged as unsafe.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-floating-promises.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nlet promise: Promise<number> = Promise.resolve(2);\npromise;\n\nfunction returnsPromise(): Promise<number> {\n  return Promise.resolve(42);\n}\n\nreturnsPromise();\n```\n\n----------------------------------------\n\nTITLE: Correct Type Assertion with Angle Brackets\nDESCRIPTION: This code demonstrates a correct type assertion where the assertion changes the type of the expression. The type assertion `<number>3` is considered correct because the literal value 3 could be inferred as other types, and the assertion clarifies it to be a `number`.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-unnecessary-type-assertion.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst foo = <number>3;\n```\n\n----------------------------------------\n\nTITLE: Correct Promise usage in conditionals (checksConditionals: true)\nDESCRIPTION: These code snippets demonstrate correct Promise usage within conditional statements by awaiting the Promises before using them in conditional logic. The `checksConditionals` option is enabled. The `await` keyword ensures that the Promises are resolved before their values are used, preventing potential misuse.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-misused-promises.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst promise = Promise.resolve('value');\n\n// Always `await` the Promise in a conditional\nif (await promise) {\n  // Do something\n}\n\nconst val = (await promise) ? 123 : 456;\n\nconst returnVal = await promise;\n[1, 2, 3].filter(() => returnVal);\n\nwhile (await promise) {\n  // Do something\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint without the tseslint.config helper function\nDESCRIPTION: This snippet shows how to configure ESLint without using the `tseslint.config` helper function. This method involves directly creating an array of configuration objects, which can be more verbose and lacks the type-checking benefits of the helper function. It imports eslint and tseslint and specifies the config as an array.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/packages/TypeScript_ESLint.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// @ts-check\n\nimport eslint from '@eslint/js';\nimport tseslint from 'typescript-eslint';\n\n/** @type {import('@typescript-eslint/utils').TSESLint.FlatConfig.ConfigFile} */\nexport default [\n  eslint.configs.recommended,\n  ...tseslint.configs.recommended,\n  {\n    /*... */\n  },\n  // ...\n];\n```\n\n----------------------------------------\n\nTITLE: Correct Code: allowConditionalTypes - Always - TypeScript\nDESCRIPTION: Examples of correct code when `allowConditionalTypes` is set to `always`. Demonstrates how conditional types can be declared as type aliases.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-type-alias.mdx#_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype Foo<T> = T extends number ? number : null;\n```\n\n----------------------------------------\n\nTITLE: Installing typescript-eslint v8 Beta with Legacy Config\nDESCRIPTION: This command installs the typescript-eslint v8 beta versions of `@typescript-eslint/eslint-plugin` and `@typescript-eslint/parser` using npm. It is used when ESLint is configured with the older legacy configuration format. The `--save-dev` flag installs the packages as development dependencies.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/website/blog/2024-05-27-announcing-typescript-eslint-v8-beta.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm i @typescript-eslint/eslint-plugin@rc-v8 @typescript-eslint/parser@rc-v8 --save-dev\n```\n\n----------------------------------------\n\nTITLE: Incorrect Mapped Types with `allowMappedTypes: in-intersections`\nDESCRIPTION: This code demonstrates the incorrect usage of mapped types when the `allowMappedTypes` option is set to `in-intersections`. Mapped types are used in unions and standalone declarations, which is not allowed under this configuration. The code defines type aliases using mapped types, but these usages are considered invalid by the ESLint rule with this option.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-type-alias.mdx#_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\ntype Foo<T> = { readonly [P in keyof T]: T[P] };\n\ntype Foo<T> = { [P in keyof T]?: T[P] };\n\ntype Foo<T, U> =\n  | { readonly [P in keyof T]: T[P] }\n  | { readonly [P in keyof U]: U[P] };\n\ntype Foo<T, U> = { [P in keyof T]?: T[P] } | { [P in keyof U]?: U[P] };\n```\n\n----------------------------------------\n\nTITLE: JavaScript code example\nDESCRIPTION: A simple JavaScript code example that gets converted to an AST.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/website/blog/2022-12-05-asts-and-typescript-eslint.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n1 + 2;\n```\n\n----------------------------------------\n\nTITLE: Building Static Website Content\nDESCRIPTION: Builds the static content for the website using yarn and places it into the `build` directory. This directory can then be served using a static content hosting service.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/website/README.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nyarn build\n```\n\n----------------------------------------\n\nTITLE: Function with 'any' Return Type and Console Log (JavaScript - alternative syntax)\nDESCRIPTION: This JavaScript function, `foo`, is annotated with an 'any' return type and contains a `console.log` statement, using the 'javascript' language identifier.  It may trigger no-explicit-any and no-console linting errors.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/integration-tests/fixtures/markdown/Doc.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction foo(): any {\n  console.log('test');\n}\n```\n\n----------------------------------------\n\nTITLE: Support Explicit Resource Management syntax for TS 5.2\nDESCRIPTION: Adds support for the Explicit Resource Management syntax introduced in TypeScript 5.2. This allows the parser to correctly interpret and handle the 'using' keyword for resource management.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/typescript-estree/CHANGELOG.md#_snippet_18\n\n\n\n----------------------------------------\n\nTITLE: Correct Import Example (typescript)\nDESCRIPTION: This example demonstrates the correct usage of an import statement. There is no need for an `export {}` as the file already contains an import, thus making it a module.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-useless-empty-export.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport 'some-other-module';\n```\n\n----------------------------------------\n\nTITLE: React Component with Ant Design Buttons and Console Log (JSX)\nDESCRIPTION: This React component, `MyComp`, imports and renders several Ant Design Button components. It also includes a `console.log` statement for demonstration and debugging purposes, which may trigger a no-console error in linting.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/integration-tests/fixtures/markdown/Doc.md#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Button } from 'antd';\n\nfunction MyComp() {\n  console.log('test');\n  return (\n    <div>\n      <Button type=\"primary\">Primary</Button>\n      <Button>Default</Button>\n      <Button type=\"dashed\">Dashed</Button>\n      <Button type=\"danger\">Danger</Button>\n      <Button type=\"link\">Link</Button>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using primitive types in TypeScript\nDESCRIPTION: This code snippet demonstrates the correct usage of primitive types like `bigint`, `boolean`, `number`, `string`, and `symbol` in TypeScript. It also shows an example of type checking that prevents assigning a string to an object type.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-wrapper-object-types.mdx#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nlet myBigint: bigint;\nlet myBoolean: boolean;\nlet myNumber: number;\nlet myString: string;\nlet mySymbol: symbol;\n\nlet myObject: object = \"Type 'string' is not assignable to type 'object'.\";\n```\n\n----------------------------------------\n\nTITLE: Filter property names with specific characters in naming-convention\nDESCRIPTION: This configuration snippet illustrates how to use the `filter` option to ignore property names that contain specific characters (e.g., hyphens or spaces). The `regex` property defines a regular expression that matches the characters to be ignored, and `match: false` indicates that names containing these characters should be excluded from the naming convention check.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/naming-convention.mdx#_snippet_13\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"@typescript-eslint/naming-convention\": [\n    \"error\",\n    {\n      \"selector\": \"property\",\n      \"format\": [\"strictCamelCase\"],\n      \"filter\": {\n        // you can expand this regex as you find more cases that require quoting that you want to allow\n        \"regex\": \"[- ]\",\n        \"match\": false,\n      },\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Code: allowAliases - In Unions and Intersections - TypeScript\nDESCRIPTION: Illustrates examples of correct code when `allowAliases` is set to `in-unions-and-intersections`. These examples demonstrates union and intersection aliases of primitive types and reference types with interfaces and classes showcasing the scenarios permitted when the option is set to `in-unions-and-intersections`.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-type-alias.mdx#_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\n// primitives\ntype Foo = 'a' | 'b';\n\ntype Foo = string | string[];\n\ntype Foo = string & string[];\n\ntype Foo = `a-${number}` & `b-${number}`;\n\ntype Foo = `a-${number}` | `b-${number}`;\n\n// reference types\ninterface Bar {}\nclass Baz implements Bar {}\n\ntype Foo = Bar | Baz;\n\ntype Foo = Bar & Baz;\n```\n\n----------------------------------------\n\nTITLE: Disallow Namespaces allowDefinitionFiles true - Correct - TypeScript\nDESCRIPTION: These examples demonstrate code that adheres to the `no-namespace` rule when `allowDefinitionFiles` is true. Declaration of external modules are correct, as is any code within a `.d.ts` file.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-namespace.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare module 'foo' {}\n\n// anything inside a d.ts file\n```\n\n----------------------------------------\n\nTITLE: For Await...Of with Sync Iterable (Incorrect)\nDESCRIPTION: This example shows incorrect usages of `for await...of` loop with synchronous iterables.  Using `for await...of` on a standard array or an array of Promises is often unnecessary and can obscure potential opportunities for concurrent processing. Consider `for...of` or `Promise.all` for improved performance and error handling.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/await-thenable.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nasync function syncIterable() {\n  const arrayOfValues = [1, 2, 3];\n  for await (const value of arrayOfValues) {\n    console.log(value);\n  }\n}\n\nasync function syncIterableOfPromises() {\n  const arrayOfPromises = [\n    Promise.resolve(1),\n    Promise.resolve(2),\n    Promise.resolve(3),\n  ];\n  for await (const promisedValue of arrayOfPromises) {\n    console.log(promisedValue);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Non-Null Assertion Example in TypeScript\nDESCRIPTION: This code snippet demonstrates incorrect usage of the non-null assertion operator. The assertions after `foo.bar` and `foo.num` in equality checks are flagged by the rule as potentially confusing. The example showcases the violation of the 'no-confusing-non-null-assertion' rule.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-confusing-non-null-assertion.mdx#_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\ninterface Foo {\n  bar?: string;\n  num?: number;\n}\n\nconst foo: Foo = getFoo();\nconst isEqualsBar = foo.bar! == 'hello';\nconst isEqualsNum = 1 + foo.num! == 2;\n```\n\n----------------------------------------\n\nTITLE: Incorrect enum Usage with ignoreEnums: false (TypeScript)\nDESCRIPTION: This TypeScript code demonstrates an incorrect usage of enums according to the `no-magic-numbers` rule when `ignoreEnums` is set to `false`. The enum `foo` contains a member `SECOND` assigned the magic number `1000`, triggering a rule violation. The option string `'{ \"ignoreEnums\": false }'` configures the linter to flag such cases.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-magic-numbers.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nenum foo {\n  SECOND = 1000,\n}\n\n```\n\n----------------------------------------\n\nTITLE: Safe Type Assertion Example in TypeScript\nDESCRIPTION: This code demonstrates the correct usage of type assertions, broadening the type. In the first example, the assertion includes all possible return types of function 'f'. In the second, the asserted type reflects potential value types within the array. This helps avoid bypassing TypeScript's type-checking.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-unsafe-type-assertion.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction f() {\n  return Math.random() < 0.5 ? 42 : 'oops';\n}\n\nconst z = f() as number | string | boolean;\n\nconst items = [1, '2', 3, '4'];\n\nconst number = items[0] as number | string | undefined;\n```\n\n----------------------------------------\n\nTITLE: Throwing on invalid update expressions in TypeScript ESTree\nDESCRIPTION: This feature causes the typescript-estree parser to throw an error when it encounters invalid update expressions, providing more informative error messages to developers and helping to identify potential issues in their code.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/typescript-estree/CHANGELOG.md#_snippet_7\n\nLANGUAGE: Markdown\nCODE:\n```\n- **typescript-estree:** throw on invalid update expressions\n```\n\n----------------------------------------\n\nTITLE: Allowing Parameter Properties in TypeScript - Correct Example\nDESCRIPTION: This TypeScript class example demonstrates code that adheres to the rule when no options are specified (and thus parameter properties are disallowed) by not using parameter properties. The constructor parameter `name` is a simple parameter without any modifiers.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/parameter-properties.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nclass Foo {\n  constructor(name: string) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Readonly Class Properties with ignoreReadonlyClassProperties: false (TypeScript)\nDESCRIPTION: This TypeScript code demonstrates incorrect usage of `readonly` class properties with the `no-magic-numbers` rule when `ignoreReadonlyClassProperties` is set to `false`. The `Foo` class has `readonly` properties (A, B, C, D) assigned numeric literals (1, 2), violating the rule. The linter configuration `'{ \"ignoreReadonlyClassProperties\": false }'` enforces this.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-magic-numbers.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nclass Foo {\n  readonly A = 1;\n  readonly B = 2;\n  public static readonly C = 1;\n  static readonly D = 1;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Importing with package.json exports (Before)\nDESCRIPTION: This code snippet illustrates how `@typescript-eslint/*` packages were imported before the introduction of `package.json` exports.  It shows the direct referencing of files within the `dist/` directory, which is now discouraged.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/website/blog/2023-07-09-announcing-typescript-eslint-v6.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as TSESLint from '@typescript-eslint/utils/dist/ts-eslint';\n```\n\n----------------------------------------\n\nTITLE: Fix: Disallowing using as variable keyword for for..in loops\nDESCRIPTION: This code snippet describes a fix that prevents `using` from being used as a variable keyword in `for..in` loops within `typescript-estree`. This restriction aligns with language specifications and prevents incorrect parsing or unexpected behavior when using `for..in` loops with resource management keywords.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/ast-spec/CHANGELOG.md#_snippet_6\n\nLANGUAGE: Markdown\nCODE:\n```\n- **typescript-estree:** disallow `using` as the variable keyword for `for..in` loops\n```\n\n----------------------------------------\n\nTITLE: Correct `as const` Usage - TypeScript\nDESCRIPTION: These examples demonstrate correct usage of `as const` and scenarios where `as const` is not applicable or preferred.  It includes cases where `as const` is correctly used, cases where no assertion is needed, and cases where other type assertions are necessary.  It showcases when the rule allows other forms of type assertions.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-as-const.mdx#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nlet foo = 'bar';\nlet foo = 'bar' as const;\nlet foo: 'bar' = 'bar' as const;\nlet bar = 'bar' as string;\nlet foo = <string>'bar';\nlet foo = { bar: 'baz' };\n```\n\n----------------------------------------\n\nTITLE: Configuring projectService with allowDefaultProject & defaultProject (JS)\nDESCRIPTION: This JavaScript code snippet demonstrates how to configure ESLint's `projectService` to enable typed linting for out-of-project files. It utilizes `allowDefaultProject` to specify a glob of files to enable slower default projects on and `defaultProject` to specify the path to the TypeScript configuration file to use for the slower default project.  `tsconfigRootDir` specifies the root directory where tsconfig.json is located.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/website/blog/2024-07-31-announcing-typescript-eslint-v8.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport eslint from '@eslint/js';\nimport tseslint from 'typescript-eslint';\n\nexport default tseslint.config(\n  eslint.configs.recommended,\n  ...tseslint.configs.recommendedTypeChecked,\n  {\n    languageOptions: {\n      parserOptions: {\n        // Remove this line\n        project: ['packages/*/tsconfig.json', 'tsconfig.eslint.json'],\n        // Added lines start\n        projectService: {\n          allowDefaultProject: ['*.js'],\n          defaultProject: 'tsconfig.json',\n        },\n        // Added lines end\n        tsconfigRootDir: import.meta.dirname,\n      },\n    },\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Incorrect Numeric Literal Types with ignoreNumericLiteralTypes: false (TypeScript)\nDESCRIPTION: This TypeScript code shows incorrect usage of numeric literal types according to the `no-magic-numbers` rule when `ignoreNumericLiteralTypes` is set to `false`. The `SmallPrimes` type uses numeric literals (2, 3, 5, 7, 11) directly, causing a violation.  The configuration `'{ \"ignoreNumericLiteralTypes\": false }'` enforces this restriction.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-magic-numbers.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntype SmallPrimes = 2 | 3 | 5 | 7 | 11;\n\n```\n\n----------------------------------------\n\nTITLE: Incorrect: onlyInlineLambdas Option TypeScript\nDESCRIPTION: This TypeScript code snippet demonstrates an incorrect usage of the `prefer-readonly` rule with the `onlyInlineLambdas` option enabled. It shows a private member that is an inline lambda, which should be marked as readonly according to the rule configuration.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-readonly.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nclass Container {\n  private onClick = () => {\n    /* ... */\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Variable Declaration (Ignore Function)\nDESCRIPTION: Illustrates incorrect variable declaration when the `variableDeclaration` option is enabled and `variableDeclarationIgnoreFunction` is true, showing that non-function variables still require type annotations.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/typedef.mdx#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nconst text = 'text';\n```\n\n----------------------------------------\n\nTITLE: Replacing deprecated no-throw-literal rule in TypeScript ESLint\nDESCRIPTION: This snippet shows the removal of the `@typescript-eslint/no-throw-literal` rule and advises replacing it with either a recommended configuration or enabling the `@typescript-eslint/only-throw-error` rule. This ensures continued validation of thrown values.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/website/blog/2024-07-31-announcing-typescript-eslint-v8.md#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n-  '@typescript-eslint/no-throw-literal': '...', // Remove this line\n+  '@typescript-eslint/only-throw-error': '...' // Add this line (or use recommended config)\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Expressions\nDESCRIPTION: Examples of correct code that adheres to the 'no-unused-expressions' rule. These include function calls that return types, type assertions on function calls, and directives within namespaces. Function calls and namespace directives have intended side effects or behavior.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-unused-expressions.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction getSet() {\n  return Set;\n}\n\n// Funtion calls are allowed, so type expressions that wrap function calls are allowed\ngetSet()<number>;\ngetSet() as Set<unknown>;\ngetSet()!;\n\n// Namespaces can have directives\nnamespace A {\n  'use strict';\n}\n```\n\n----------------------------------------\n\nTITLE: Import without Type Information\nDESCRIPTION: Illustrates the challenge faced by isolated module transpilers like Babel and SWC, which don't have access to type information, when dealing with imports that may or may not have side effects. The transpiler cannot determine whether to remove the import or not.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/website/blog/2023-02-24-consistent-type-exports-and-imports-why-and-how.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Is SomeThing a class? A type? A variable?\n// Just from this file, we don't know! 😫\nimport { SomeThing } from './may-include-side-effects.js';\n```\n\n----------------------------------------\n\nTITLE: Manual Dependency Update Yarn Install\nDESCRIPTION: This snippet shows the command to install project dependencies using Yarn. This is a crucial step before updating dependencies.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/maintenance/pull-requests/Dependency_Version_Upgrades.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Function with 'any' Return Type and Console Log (Node.js)\nDESCRIPTION: This Node.js JavaScript function, `foo`, is annotated with an 'any' return type and contains a `console.log` statement. The code snippet is tagged with the node language identifier. It may trigger no-explicit-any and no-console linting errors.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/integration-tests/fixtures/markdown/Doc.md#_snippet_5\n\nLANGUAGE: node\nCODE:\n```\nfunction foo(): any {\n  console.log('test');\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Default ParseOptions TypeScript\nDESCRIPTION: This code defines the `PARSE_DEFAULT_OPTIONS` constant, which provides default values for the `ParseOptions` interface. These default values are used when the `parse` function is called without specifying any options, ensuring a consistent and predictable parsing behavior.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/packages/TypeScript_ESTree.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst PARSE_DEFAULT_OPTIONS: ParseOptions = {\n  comment: false,\n  filePath: 'estree.ts', // or 'estree.tsx', if you pass jsx: true\n  jsDocParsingMode: 'all',\n  jsx: false,\n  loc: false,\n  loggerFn: undefined,\n  range: false,\n  tokens: false,\n};\n```\n\n----------------------------------------\n\nTITLE: Incorrect Type Assertion Example (objectLiteralTypeAssertions)\nDESCRIPTION: This code snippet demonstrates incorrect usage of type assertions for object literals when `objectLiteralTypeAssertions` is set to `'never'`.  It uses the `as` keyword to assert the type of an object literal, which is disallowed by the rule. The rule aims to encourage defining the type directly instead of using assertions.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/consistent-type-assertions.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst x = { foo: 1 } as T;\n\nfunction bar() {\n  return { foo: 1 } as T;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Extension Rules in ESLint - JavaScript\nDESCRIPTION: This code snippet demonstrates how to configure an extension rule in ESLint to replace a core ESLint rule for better TypeScript support. It disables the base ESLint rule and enables the corresponding `@typescript-eslint` rule.  This is necessary because the base rule might not correctly handle TypeScript syntax.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  extends: ['eslint:recommended'],\n  rules: {\n    // Note: you must disable the base rule as it can report incorrect errors\n    'no-unused-vars': 'off',\n    '@typescript-eslint/no-unused-vars': 'error',\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Unsafe call examples with `any` type in TypeScript\nDESCRIPTION: Demonstrates incorrect usages of calling values with the `any` type, which the `no-unsafe-call` rule disallows. This includes direct calls, chained calls, `new` operator calls, and tagged template literal calls on `any` typed variables.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-unsafe-call.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare const anyVar: any;\ndeclare const nestedAny: { prop: any };\n\nanyVar();\nanyVar.a.b();\n\nnestedAny.prop();\nnestedAny.prop['a']();\n\nnew anyVar();\nnew nestedAny.prop();\n\nanyVar`foo`;\nnestedAny.prop`foo`;\n```\n\n----------------------------------------\n\nTITLE: createProgram Usage Example - JavaScript\nDESCRIPTION: Demonstrates how to use the `createProgram` function in JavaScript. It imports the typescript-estree library, calls `createProgram` to create a TypeScript program from a tsconfig file, and then uses the program with `parseAndGenerateServices` to parse code with type information.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/packages/TypeScript_ESTree.mdx#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst tsESTree = require('@typescript-eslint/typescript-estree');\n\nconst program = tsESTree.createProgram('tsconfig.json');\nconst code = `const hello: string = 'world';`;\nconst { ast, services } = parseAndGenerateServices(code, {\n  filePath: '/some/path/to/file/foo.ts',\n  loc: true,\n  program,\n  range: true,\n});\n\n```\n\n----------------------------------------\n\nTITLE: Ignoring Void Operator - TypeScript\nDESCRIPTION: This code snippet shows how the `ignoreVoidOperator` option allows explicitly marking void expressions with the `void` operator. This clarifies that the return value is intentionally ignored, making the code less ambiguous.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-confusing-void-expression.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// now it's obvious that we don't expect any response\npromise.then(value => void window.postMessage(value));\n\n// now it's explicit that we don't want to return anything\nfunction doSomething() {\n  if (!somethingToDo) {\n    return void console.error('Nothing to do!');\n  }\n\n  console.log('Doing a thing...');\n}\n\n// we are sure that we want to always log `undefined`\nconsole.log(void alert('Hello, world!'));\n```\n\n----------------------------------------\n\nTITLE: Allowing Readonly Parameter Properties in TypeScript - Correct Example\nDESCRIPTION: These TypeScript class examples demonstrate code that adheres to the rule when `{ \"allow\": [\"readonly\"] }` is specified. The rule allows constructors with a simple parameter or a `readonly` parameter property.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/parameter-properties.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nclass Foo {\n  constructor(name: string) {}\n}\n\nclass Foo {\n  constructor(readonly name: string) {}\n}\n```\n\n----------------------------------------\n\nTITLE: FileSpecifier Interface (TypeScript)\nDESCRIPTION: Defines the structure of the FileSpecifier interface, used to describe types or values declared in local files. The `path` property is optional and can be used to specify the file where the type or value is declared.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/packages/type-utils/TypeOrValueSpecifier.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface FileSpecifier {\n  from: 'file';\n  name: string[] | string;\n  path?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring checksSpreads option in no-misused-promises\nDESCRIPTION: This code snippet shows how to disable the checksSpreads option in the @typescript-eslint/no-misused-promises rule. Disabling this prevents the rule from checking object spreads that use Promises directly without awaiting them. The configuration sets the rule to \"error\" and disables the \"checksSpreads\" sub-option.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-misused-promises.mdx#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"@typescript-eslint/no-misused-promises\": [\n    \"error\",\n    {\n      \"checksSpreads\": false\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Switch - Non-Union Type - TypeScript\nDESCRIPTION: This code demonstrates an incorrect usage of a switch statement over a non-union type ('number') without a default clause, violating the rule when `requireDefaultForNonUnion` is enabled. The switch handles cases 0 and 1 but lacks a default case to handle other possible number values.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/switch-exhaustiveness-check.mdx#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst value: number = Math.floor(Math.random() * 3);\n\nswitch (value) {\n  case 0:\n    return 0;\n  case 1:\n    return 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Correct usage with ignoreClassesThatImplementAnInterface = true (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates correct usage when `ignoreClassesThatImplementAnInterface` is set to `true`. The `Derived` class implements the `Base` interface, so its methods and properties that don't use `this` are not flagged by the ESLint rule.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/class-methods-use-this.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Base {\n  method(): void;\n}\n\nclass Derived implements Base {\n  method() {}\n  property = () => {};\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing flat config types in utils package\nDESCRIPTION: This commit fixes the missing fields in the flat config types within the @typescript-eslint/utils package. It addresses issue #7933 on GitHub and ensures that the flat config types are complete and accurate. The fix is identified by commit hash 533861aeadd5b4bfcbe7167de7af71e4223cc9de.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/utils/CHANGELOG.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n533861a(https://github.com/typescript-eslint/typescript-eslint/commit/533861aeadd5b4bfcbe7167de7af71e4223cc9de)\n```\n\n----------------------------------------\n\nTITLE: Correct Tuple Types with `allowTupleTypes: in-unions-and-intersections`\nDESCRIPTION: This code demonstrates the correct usage of tuple types when the `allowTupleTypes` option is set to `in-unions-and-intersections`. Tuple types are used within union and intersection types, which is allowed under this configuration. The code defines type aliases using tuple types inside union and intersection types.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-type-alias.mdx#_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\ntype Foo = [number] & [number, number];\n\ntype Foo = [string] | [number];\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage: Returning `any` from functions (TypeScript)\nDESCRIPTION: This code snippet demonstrates incorrect usage by returning values typed as `any` from functions.  This bypasses type safety and can lead to runtime errors. The rule flags these returns as unsafe.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-unsafe-return.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction foo1() {\n  return 1 as any;\n}\nfunction foo2() {\n  return Object.create(null);\n}\nconst foo3 = () => {\n  return 1 as any;\n};\nconst foo4 = () => Object.create(null);\n\nfunction foo5() {\n  return [] as any[];\n}\nfunction foo6() {\n  return [] as Array<any>;\n}\nfunction foo7() {\n  return [] as readonly any[];\n}\nfunction foo8() {\n  return [] as Readonly<any[]>;\n}\nconst foo9 = () => {\n  return [] as any[];\n};\nconst foo10 = () => [] as any[];\n\nconst foo11 = (): string[] => [1, 2, 3] as any[];\n\nasync function foo13() {\n  return Promise.resolve({} as any);\n}\n\n// generic position examples\nfunction assignability1(): Set<string> {\n  return new Set<any>([1]);\n}\ntype TAssign = () => Set<string>;\nconst assignability2: TAssign = () => new Set<any>([true]);\n```\n\n----------------------------------------\n\nTITLE: Correct Boolean Coercion with ignoreBooleanCoercion: false in TypeScript\nDESCRIPTION: This code shows the correct replacement of logical OR operators with nullish coalescing operators within a Boolean coercion when `ignoreBooleanCoercion` is set to `false`.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-nullish-coalescing.mdx#_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\ndeclare const a: string | true | undefined;\ndeclare const b: string | boolean | undefined;\n\nconst x = Boolean(a ?? b);\n```\n\n----------------------------------------\n\nTITLE: Warn on deprecated AST property accesses\nDESCRIPTION: This change introduces warnings for accessing deprecated properties within the AST (Abstract Syntax Tree). Using deprecated features can lead to future incompatibility, so this helps developers migrate away from them and adopt recommended alternatives. This ensures code is more maintainable and compatible with future versions of the TypeScript language and tooling.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/typescript-estree/CHANGELOG.md#_snippet_37\n\nLANGUAGE: text\nCODE:\n```\n* **typescript-estree:** warn on deprecated AST property accesses ([#6525](https://github.com/typescript-eslint/typescript-eslint/issues/6525)) ([79c058d](https://github.com/typescript-eslint/typescript-eslint/commit/79c058d69f723ed18a3a7631370009359510d128))\n```\n\n----------------------------------------\n\nTITLE: Allowing Empty Protected Constructors in TypeScript\nDESCRIPTION: This example demonstrates how to allow empty protected constructors using the `protected-constructors` option for the `no-empty-function` rule. The `Foo` class is defined with a protected constructor that has an empty body, which will not trigger the rule due to the option being set.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-empty-function.mdx#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass Foo {\n  protected constructor() {}\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Mapped Types with `allowMappedTypes: in-unions`\nDESCRIPTION: This code demonstrates the incorrect usage of mapped types when the `allowMappedTypes` option is set to `in-unions`. Mapped types are used in intersections and standalone declarations, which is not allowed under this configuration. The code defines type aliases using mapped types, but these usages are considered invalid by the ESLint rule with this option.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-type-alias.mdx#_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\ntype Foo<T> = { readonly [P in keyof T]: T[P] };\n\ntype Foo<T> = { [P in keyof T]?: T[P] };\n\ntype Foo<T, U> = { readonly [P in keyof T]: T[P] } & {\n  readonly [P in keyof U]: U[P];\n};\n\ntype Foo<T, U> = { [P in keyof T]?: T[P] } & { [P in keyof U]?: U[P] };\n```\n\n----------------------------------------\n\nTITLE: Allow specifying project: true\nDESCRIPTION: This feature allows specifying `project: true` in the parser options. It automatically detects and uses the tsconfig.json file in the current directory. This simplifies configuration and ensures that the parser uses the correct TypeScript project settings.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/typescript-estree/CHANGELOG.md#_snippet_31\n\nLANGUAGE: text\nCODE:\n```\n**typescript-estree:** allow specifying project: true ([#6084](https://github.com/typescript-eslint/typescript-eslint/issues/6084)) ([dcd05f0](https://github.com/typescript-eslint/typescript-eslint/commit/dcd05f0b3ab62779571294d08a4542d66ebb2294))\n```\n\n----------------------------------------\n\nTITLE: Correct checkParameterProperties Option (TypeScript)\nDESCRIPTION: Illustrates correct code when `checkParameterProperties` is set to `true`. It demonstrates marking class constructor parameters as `readonly`.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-readonly-parameter-types.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nclass Foo {\n  constructor(private paramProp: readonly string[]) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Missing Dependency on @types/semver in Typescript\nDESCRIPTION: This commit fixes a bug where the @typescript-eslint/utils package was missing a dependency on `@types/semver`. This dependency is required for features that involve comparing semantic versions, such as dependency constraint filtering in `RuleTester`.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/utils/CHANGELOG.md#_snippet_10\n\nLANGUAGE: Typescript\nCODE:\n```\n**utils:** add missing dependency on `@types/semver` ([#5825](https://github.com/typescript-eslint/typescript-eslint/issues/5825)) ([17b8879](https://github.com/typescript-eslint/typescript-eslint/commit/17b887933a0640d6fe843622e0520c0315144bb7))\n```\n\n----------------------------------------\n\nTITLE: Forbidding duplicated accessibility modifiers in TypeScript ESTree\nDESCRIPTION: This enhancement prevents the use of duplicate accessibility modifiers (e.g., `public public`) in TypeScript code processed by the typescript-estree parser. This helps enforce cleaner and more standard TypeScript code.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/typescript-estree/CHANGELOG.md#_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n- **typescript-estree:** forbid duplicated accessibility modifiers\n```\n\n----------------------------------------\n\nTITLE: Adding Parser Options: emitDecoratorMetadata - Typescript\nDESCRIPTION: This adds a new `parserOptions.emitDecoratorMetadata` option to the TypeScript parser. This option enables the emission of decorator metadata during parsing, which can be used by other tools and libraries that rely on decorator metadata. The commit associated with this feature addition is e3dd343e51e3b7772e825a609735a04c921c1ec5.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/parser/CHANGELOG.md#_snippet_6\n\n\n\n----------------------------------------\n\nTITLE: Correct Intersection Type Definition - TypeScript\nDESCRIPTION: This code snippet demonstrates a correctly sorted intersection type definition with the `checkIntersections` option set to `true`.  The intersection `A & B` is alphabetically ordered.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/sort-type-constituents.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ntype ExampleIntersection = A & B;\n```\n\n----------------------------------------\n\nTITLE: Incorrect: Constant Loop Condition - Only Allowed Literals (Variable)\nDESCRIPTION: This example shows incorrect code when `allowConstantLoopConditions` is set to `'only-allowed-literals'`. Using a variable with the type `true` is not allowed; only the literal value `true` is permitted.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-unnecessary-condition.mdx#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// `alwaysTrue` has the type of `true` (which isn't allowed)\n// as only the literal value of `true` is allowed.\n\ndeclare const alwaysTrue: true;\n\nwhile (alwaysTrue) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: ESLint Configuration File with Strict and Stylistic\nDESCRIPTION: Enhances ESLint configuration by extending `strict` and `stylistic` configurations for more opinionated rules and consistent styling. This extended setup aims to improve code quality and maintainability.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/getting-started/Legacy_ESLint_Setup.mdx#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n/* eslint-env node */\nmodule.exports = {\n  extends: [\n    'eslint:recommended',\n    // Remove this line\n    'plugin:@typescript-eslint/recommended',\n    // Added lines start\n    'plugin:@typescript-eslint/strict',\n    'plugin:@typescript-eslint/stylistic',\n    // Added lines end\n  ],\n  parser: '@typescript-eslint/parser',\n  plugins: ['@typescript-eslint'],\n  root: true,\n};\n```\n\n----------------------------------------\n\nTITLE: Correct Class Member Ordering\nDESCRIPTION: This TypeScript code snippet illustrates a correct member order in a class, adhering to the enforced rule of signature, method, constructor, and field. The signature comes first, followed by the method, then the constructor and finally the fields.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/member-ordering.mdx#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nclass Foo {\n  [Z: string]: any; // -> signature\n\n  public static A(): void {} // -> method\n  public B(): void {} // -> method\n\n  constructor() {} // -> constructor\n\n  private C: string; // -> field\n  public D: string; // -> field\n  protected static E: string; // -> field\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect `as` Literal Type Assertions - TypeScript\nDESCRIPTION: These examples demonstrate incorrect usage of explicit type assertions (`as`) for literal types.  The rule flags these because they can be replaced with `as const` for more concise and automatic type inference. Using `as const` is generally preferred.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-as-const.mdx#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nlet bar: 2 = 2;\nlet foo = <'bar'>'bar';\nlet foo = { bar: 'baz' as 'baz' };\n```\n\n----------------------------------------\n\nTITLE: Supporting instantiation expressions (TS 4.7)\nDESCRIPTION: This commit adds support for instantiation expressions, a feature introduced in TypeScript version 4.7. This enhancement allows the tool to correctly parse and process these new expressions.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/visitor-keys/CHANGELOG.md#_snippet_9\n\nLANGUAGE: Other\nCODE:\n```\n[4.7] support instantiation expressions ([#4938](https://github.com/typescript-eslint/typescript-eslint/issues/4938)) ([79fbc77](https://github.com/typescript-eslint/typescript-eslint/commit/79fbc7743ae5dce3190f8168776e0204755390ad))\n```\n\n----------------------------------------\n\nTITLE: Incorrect 'new' and 'constructor' Definitions - TypeScript\nDESCRIPTION: This code snippet demonstrates incorrect usage of `new` and `constructor` in TypeScript. A class should not define a `new()` method, and an interface should not define a `constructor()` method, as these are intended for different purposes.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-misused-new.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare class C {\n  new(): C;\n}\n\ninterface I {\n  new (): I;\n  constructor(): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Prefer Parameter Properties - Incorrect Examples\nDESCRIPTION: Examples of code which violate the rule when the option `{ \"prefer\": \"parameter-property\" }` is set. The rule prefers parameter properties when a class property is assigned a constructor parameter with the same name and type.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/parameter-properties.mdx#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nclass Foo {\n  private name: string;\n  constructor(name: string) {\n    this.name = name;\n  }\n}\n\nclass Foo {\n  public readonly name: string;\n  constructor(name: string) {\n    this.name = name;\n  }\n}\n\nclass Foo {\n  constructor(name: string) {\n    this.name = name;\n  }\n  name: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing deprecated no-loss-of-precision rule in TypeScript ESLint\nDESCRIPTION: This snippet demonstrates replacing the `@typescript-eslint/no-loss-of-precision` rule with the base ESLint rule `no-loss-of-precision`. It simplifies the configuration by using the standard ESLint rule directly.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/website/blog/2024-07-31-announcing-typescript-eslint-v8.md#_snippet_8\n\nLANGUAGE: text\nCODE:\n```\n-  '@typescript-eslint/no-loss-of-precision': '...', // Remove this line\n+  'no-loss-of-precision': '...' // Add this line\n```\n\n----------------------------------------\n\nTITLE: Incorrect TypeScript Directive Usage With Invalid Description Format\nDESCRIPTION: This snippet demonstrates incorrect usage of the `@ts-expect-error` directive when the description format is specified using a regular expression.  The description does not match the required pattern, causing the rule to flag the usage.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/ban-ts-comment.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// @ts-expect-error: the library definition is wrong\nconst a = doSomething('hello');\n```\n\n----------------------------------------\n\nTITLE: Incorrect Tuple Types with `allowTupleTypes: in-unions`\nDESCRIPTION: This code demonstrates the incorrect usage of tuple types when the `allowTupleTypes` option is set to `in-unions`. Tuple types are used in intersections and standalone declarations, which is not allowed under this configuration. The code defines type aliases using tuple types, but these usages are considered invalid by the ESLint rule with this option.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-type-alias.mdx#_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\ntype Foo = [number];\n\ntype Foo = [number] & [number, number];\n\ntype Foo = [string] & [number];\n```\n\n----------------------------------------\n\nTITLE: Correct require usage with allow option\nDESCRIPTION: This snippet demonstrates correct usage of `require` when the `allow` option is set to `['/package\\.json$']`. It shows that requiring `../package.json` is allowed.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-var-requires.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst foo = require('../package.json');\n```\n\n----------------------------------------\n\nTITLE: Updating to TypeScript 4.7-rc\nDESCRIPTION: This commit updates the project to use TypeScript 4.7 Release Candidate (rc). This allows developers to start using the new features of TypeScript 4.7 before the final release.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/typescript-estree/CHANGELOG.md#_snippet_54\n\nLANGUAGE: plaintext\nCODE:\n```\n6fe783c\n```\n\n----------------------------------------\n\nTITLE: Using setTimeout with string argument in TypeScript\nDESCRIPTION: This snippet shows an incorrect usage of setTimeout, where the first argument is a string that is interpreted as JavaScript code. It is considered an implied eval() because a string of code is passed in to be interpreted. This is discouraged due to security and performance implications.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-implied-eval.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nsetTimeout('alert(`Hi!`);', 100);\n```\n\n----------------------------------------\n\nTITLE: Incorrect Promise return with any and allowAny: false\nDESCRIPTION: Example of incorrect code when returning `any` without `async` and the `allowAny` option is set to false. This showcases how the rule can be made stricter to catch incorrect Promise behaviors when using `any` types.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/promise-function-async.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst returnsAny = () => ({}) as any;\n```\n\n----------------------------------------\n\nTITLE: ESLint Configuration Example\nDESCRIPTION: This JSON configuration demonstrates how to use ESLint `overrides` to enable the `explicit-function-return-type` rule specifically for TypeScript files in a mixed JavaScript/TypeScript codebase. This prevents linting errors in JavaScript files.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/explicit-function-return-type.mdx#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"rules\": {\n    // disable the rule for all files\n    \"@typescript-eslint/explicit-function-return-type\": \"off\"\n  },\n  \"overrides\": [\n    {\n      // enable the rule specifically for TypeScript files\n      \"files\": [\"*.ts\", \"*.mts\", \"*.cts\", \"*.tsx\"],\n      \"rules\": {\n        \"@typescript-eslint/explicit-function-return-type\": \"error\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Allowed Names Configuration - JSON\nDESCRIPTION: Configuration for the `allowedNames` option, specifying function/method names that the rule should ignore.  This example demonstrates how to exclude specific functions or methods from requiring explicit return type annotations.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/explicit-module-boundary-types.mdx#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"@typescript-eslint/explicit-module-boundary-types\": [\n    \"error\",\n    {\n      \"allowedNames\": [\"ignoredFunctionName\", \"ignoredMethodName\"]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Unsafe call example with `Function` type in TypeScript\nDESCRIPTION: Shows an example of calling a value typed as `Function`, which is also disallowed by the `no-unsafe-call` rule due to its similarity to `any`. This snippet highlights how the `Function` type can lead to unsafe code.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-unsafe-call.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst f: Function = () => {};\nf();\n```\n\n----------------------------------------\n\nTITLE: Declaring global variable with 'var' in TypeScript\nDESCRIPTION: This code snippet shows how to declare a global variable using `declare global` with `var` in TypeScript, which can trigger the ESLint `no-var` rule. The example highlights a common scenario and its associated ESLint warning.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/troubleshooting/faqs/ESLint.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare global {\n  var myValue: string;\n  // Unexpected var, use let or const instead. eslint (no-var)\n}\n\nmyValue;\n```\n\n----------------------------------------\n\nTITLE: Supporting Class Static Blocks in typescript-estree (TypeScript)\nDESCRIPTION: This code snippet introduces support for class static blocks in the @typescript-eslint/typescript-estree package, allowing the parser to correctly recognize and process static initialization blocks in TypeScript classes.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/visitor-keys/CHANGELOG.md#_snippet_19\n\nLANGUAGE: none\nCODE:\n```\n- **typescript-estree:** add support for class static blocks ([#3730](https://github.com/typescript-eslint/typescript-eslint/issues/3730)) ([f81831b](https://github.com/typescript-eslint/typescript-eslint/commit/f81831bd279a32da6dbab0f1c061053ea43965f6))\n```\n\n----------------------------------------\n\nTITLE: Incorrect Class Member Ordering (Static vs Instance Fields)\nDESCRIPTION: This TypeScript code snippet demonstrates an incorrect member order in a class, violating the enforced rule that public static fields, followed by static fields, should come before instance fields.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/member-ordering.mdx#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nclass Foo {\n  private E: string; // -> instance field\n\n  private static B: string; // -> static field\n  protected static C: string; // -> static field\n  private static D: string; // -> static field\n\n  public static A: string; // -> public static field\n\n  [Z: string]: any; // (irrelevant)\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Transpilation Example\nDESCRIPTION: Illustrates how TypeScript transpiles an import with inline type qualifiers when using `verbatimModuleSyntax`, potentially leaving behind a side-effect import.  This is the core problem this rule addresses.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-import-type-side-effects.mdx#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { type A, type B } from 'mod';\n\n// is transpiled to\n\nimport {} from 'mod';\n// which is the same as\nimport 'mod';\n```\n\n----------------------------------------\n\nTITLE: ESLint v8 Support: Typescript\nDESCRIPTION: This feature adds support for ESLint v8 to the typescript-eslint parser. This update ensures compatibility with the latest version of ESLint and allows users to leverage new features and improvements in ESLint v8. The commit associated with this change is 4ca62aee6681d706e762a8db727541ca204364f2.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/parser/CHANGELOG.md#_snippet_8\n\n\n\n----------------------------------------\n\nTITLE: Allowing typescript@5.3.0-RC as devDependency\nDESCRIPTION: This change allows TypeScript version 5.3.0-RC to be used as a development dependency, providing developers with the flexibility to test against the release candidate version during development.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/typescript-estree/CHANGELOG.md#_snippet_15\n\nLANGUAGE: Markdown\nCODE:\n```\n* allow typescript@5.3.0-RC as devDependency ([#7821](https://github.com/typescript-eslint/typescript-eslint/issues/7821)) ([b6c40b4](https://github.com/typescript-eslint/typescript-eslint/commit/b6c40b42b68d5567c7468030ee45b9b84bec4c4d))\n```\n\n----------------------------------------\n\nTITLE: PackageSpecifier Interface (TypeScript)\nDESCRIPTION: Defines the structure of the PackageSpecifier interface, used to describe types or values imported from packages. The `from` property must be set to 'package', the `name` property is a string or array of strings, and the `package` property specifies the package name.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/packages/type-utils/TypeOrValueSpecifier.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ninterface PackageSpecifier {\n  from: 'package';\n  name: string[] | string;\n  package: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Arrow Parameter Typing\nDESCRIPTION: Illustrates correct arrow function parameter typing with type annotations when the `arrowParameter` option is enabled. The `size` and `text` parameters are explicitly typed as `number` and `string`, respectively.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/typedef.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst logsSize = (size: number) => console.log(size);\n\n['hello', 'world'].map((text: string) => text.length);\n\nconst mapper = {\n  map: (text: string) => text + '...',\n};\n```\n\n----------------------------------------\n\nTITLE: Discouraged Type Annotations\nDESCRIPTION: This code snippet demonstrates examples of incorrect usage when the 'type-annotation' option is enabled. It shows cases where generic type arguments are specified only on the constructor, which is disallowed by the rule with this option.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/consistent-generic-constructors.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst map = new Map<string, number>();\nconst set = new Set<string>();\n```\n\n----------------------------------------\n\nTITLE: Ignoring TypeScript errors with @ts-ignore\nDESCRIPTION: This snippet demonstrates how to use the `@ts-ignore` directive to suppress TypeScript errors on a specific line. It imports a `processString` function from a package and ignores a potential type error when calling it with a string argument.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/website/blog/2025-01-21-avoiding-anys.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { processString } from '@example/package';\n\n// @ts-ignore\nprocessString('New York City');\n```\n\n----------------------------------------\n\nTITLE: Splitting TSMappedType typeParameter\nDESCRIPTION: This snippet shows the new feature for splitting the `TSMappedType`'s `typeParameter` into `constraint` and `key`. This change allows for more fine-grained control and information within the AST representation of mapped types.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/visitor-keys/CHANGELOG.md#_snippet_1\n\nLANGUAGE: None\nCODE:\n```\n- **typescript-estree:** split TSMappedType typeParameter into constraint and key\n```\n\n----------------------------------------\n\nTITLE: Incorrect Class Expression Member Ordering (Static vs Instance Fields)\nDESCRIPTION: This TypeScript code snippet highlights an incorrect member order in a class expression, violating the enforced rule that public static fields, followed by static fields, should come before instance fields.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/member-ordering.mdx#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nconst foo = class {\n  public T(): void {} // method (irrelevant)\n\n  private static B: string; // -> static field\n\n  constructor() {} // constructor (irrelevant)\n\n  private E: string; // -> instance field\n\n  protected static C: string; // -> static field\n  private static D: string; // -> static field\n\n  [Z: string]: any; // signature (irrelevant)\n\n  public static A: string; // -> public static field\n};\n```\n\n----------------------------------------\n\nTITLE: Disallow Namespaces with allowDeclarations - Incorrect - TypeScript\nDESCRIPTION: These examples demonstrate code that violates the `no-namespace` rule when the `allowDeclarations` option is set to `true`.  The use of `module` and `namespace` keywords are flagged as incorrect.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-namespace.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nmodule foo {}\nnamespace foo {}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Promise usage with void return (checksVoidReturn: true)\nDESCRIPTION: These code snippets demonstrate incorrect Promise usage in contexts where a void return is expected when the `checksVoidReturn` option is enabled. The rule flags these examples because asynchronous functions are used where synchronous functions with void returns are required, leading to unhandled Promises and potential errors. The option `checksVoidReturn` is set to `true`.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-misused-promises.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n[1, 2, 3].forEach(async value => {\n  await fetch(`/${value}`);\n});\n\nnew Promise<void>(async (resolve, reject) => {\n  await fetch('/');\n  resolve();\n});\n\ndocument.addEventListener('click', async () => {\n  console.log('synchronous call');\n  await fetch('/');\n  console.log('synchronous call');\n});\n\ninterface MySyncInterface {\n  setThing(): void;\n}\nclass MyClass implements MySyncInterface {\n  async setThing(): Promise<void> {\n    this.thing = await fetchThing();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Throw errors when abstract property has initializer\nDESCRIPTION: This update enforces that abstract properties cannot have initializers.  Abstract properties are meant to be defined in subclasses and should not have a default value in the abstract class itself. This rule prevents common mistakes and ensures the correct behavior of abstract classes.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/typescript-estree/CHANGELOG.md#_snippet_36\n\nLANGUAGE: text\nCODE:\n```\n* **typescript-estree:** throw errors when abstract property has initializer ([#6613](https://github.com/typescript-eslint/typescript-eslint/issues/6613)) ([dcdbc76](https://github.com/typescript-eslint/typescript-eslint/commit/dcdbc76d5418a383968d15e32d2eba7a9d2d7e79))\n```\n\n----------------------------------------\n\nTITLE: Allow Array in template literals\nDESCRIPTION: Demonstrates how to allow array types in template literals using the `allowArray` option.  Note that array stringification often results in comma separated values without spaces.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/restrict-template-expressions.mdx#_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst arg = ['foo', 'bar'];\nconst msg1 = `arg = ${arg}`;\n```\n\n----------------------------------------\n\nTITLE: Updating version constants for TypeScript\nDESCRIPTION: This snippet focuses on updating the `SUPPORTED_TYPESCRIPT_VERSIONS` and `SUPPORTED_PRERELEASE_RANGES` constants to reflect the new TypeScript version. This ensures that the project correctly identifies and supports the new version.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/maintenance/pull-requests/Dependency_Version_Upgrades.mdx#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nChange the `SUPPORTED_TYPESCRIPT_VERSIONS` constant's `<` version to the next version of TypeScript\nChange the `SUPPORTED_PRERELEASE_RANGES` constant to equal `['X.Y.1-rc']`\n```\n\n----------------------------------------\n\nTITLE: Explicit type annotation for Promise.catch() in TypeScript\nDESCRIPTION: This snippet demonstrates how providing an explicit type annotation for the `catch` variable in `Promise.prototype.catch()` allows you to achieve the same effect as the `useUnknownInCatchVariables` option, specifically using the `unknown` type.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/use-unknown-in-catch-callback-variable.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nPromise.reject(x).catch((err: unknown) => {\n  // err has type 'unknown'\n});\n```\n\n----------------------------------------\n\nTITLE: Correct Code with ignoreFunctionTypeParameterNameValueShadow: true\nDESCRIPTION: Demonstrates correct code when `ignoreFunctionTypeParameterNameValueShadow` is enabled. A variable `test` is declared, and a function type `Func` is defined with a parameter also named `test`. The rule ignores this shadowing because the option is enabled.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-shadow.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst test = 1;\ntype Func = (test: string) => typeof test;\n```\n\n----------------------------------------\n\nTITLE: Adding Missing Intrinsic Keyword Node to AST (TypeScript)\nDESCRIPTION: This code snippet adds the missing intrinsic keyword node to the TypeScript AST, ensuring that the parser correctly identifies and represents intrinsic keywords in TypeScript code.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/visitor-keys/CHANGELOG.md#_snippet_21\n\nLANGUAGE: none\nCODE:\n```\n- add missing intrinsic keyword node to AST ([#3081](https://github.com/typescript-eslint/typescript-eslint/issues/3081)) ([409bf0b](https://github.com/typescript-eslint/typescript-eslint/commit/409bf0bb3e2ac4d8782408d436ebdefb42dba38b))\n```\n\n----------------------------------------\n\nTITLE: FileSpecifier Example with Path (JSON)\nDESCRIPTION: Shows how to configure FileSpecifier to match all types and values named `Props` specifically within `file.tsx`. This ensures that only elements named 'Props' declared in this specific file will be matched.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/packages/type-utils/TypeOrValueSpecifier.mdx#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{ \"from\": \"file\", \"name\": \"Props\", \"path\": \"file.tsx\" }\n```\n\n----------------------------------------\n\nTITLE: Updating to TypeScript 4.7-rc\nDESCRIPTION: This feature updates the tool to support the release candidate of TypeScript 4.7. This update ensures that the tool remains compatible with the latest TypeScript features and improvements, allowing developers to use the newest language capabilities.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/scope-manager/CHANGELOG.md#_snippet_18\n\nLANGUAGE: text\nCODE:\n```\n6fe783c20aebe26ef42b526e4a59a9be84dd5643\n```\n\n----------------------------------------\n\nTITLE: Floating Promise Detection in TypeScript\nDESCRIPTION: This snippet demonstrates how the `@typescript-eslint/no-floating-promises` rule detects unhandled Promises.  Calling an async function without awaiting its returned promise can lead to race conditions.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/website/blog/2024-09-30-typed-linting.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { fs } from 'node:fs/promises';\nimport { readFromCache } from './caching';\n\nconst filePath = './data.json';\n\nreadFromCache(filePath);\n\nawait fs.rm(filePath);\n```\n\nLANGUAGE: typescript\nCODE:\n```\nreadFromCache(filePath);\n// Promises must be awaited, end with a call to .catch, end with a call to .then\n// with a rejection handler or be explicitly marked as ignored with the `void` operator.\n// eslint(@typescript-eslint/no-floating-promises\n```\n\n----------------------------------------\n\nTITLE: Configuring extraFileExtensions in Legacy Config (.eslintrc.js)\nDESCRIPTION: This snippet shows how to configure `extraFileExtensions` in a Legacy Config file (`.eslintrc.js`) to allow non-TypeScript extensions like `.vue`. It also sets `projectService` to `true` and defines the `tsconfigRootDir`. This avoids errors related to custom file extensions.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/troubleshooting/faqs/Frameworks.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  // ... the rest of your config ...\n  parserOptions: {\n    // Add this line\n    extraFileExtensions: ['.vue'],\n    projectService: true,\n    tsconfigRootDir: __dirname,\n  },\n};\n\n```\n\n----------------------------------------\n\nTITLE: Fixing Mixed Exports with Inline Type Specifier - Example 2\nDESCRIPTION: This example demonstrates how the `fixMixedExportsWithInlineTypeSpecifier` option works when set to `false`.  It shows how mixed exports are split into separate `export type` and `export` statements.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/consistent-type-exports.mdx#_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nconst x = 1;\ntype T = number;\n\nexport { x, T };\n```\n\nLANGUAGE: ts\nCODE:\n```\nconst x = 1;\ntype T = number;\n\nexport type { T };\nexport { x };\n```\n\n----------------------------------------\n\nTITLE: LibSpecifier Interface (TypeScript)\nDESCRIPTION: Defines the structure of the LibSpecifier interface, used to describe types or values declared in TypeScript's built-in `lib.*.d.ts` files. The `from` property must be set to 'lib' and the `name` property is a string or array of strings.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/packages/type-utils/TypeOrValueSpecifier.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ninterface LibSpecifier {\n  from: 'lib';\n  name: string[] | string;\n}\n```\n\n----------------------------------------\n\nTITLE: Empty Interface Declaration - TypeScript\nDESCRIPTION: This code snippet demonstrates the declaration of empty interfaces in TypeScript, which are flagged as incorrect by the rule. It includes examples of an empty interface, an interface extending a single empty interface, and an interface with an empty list of supertypes.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-empty-interface.mdx#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\n// an empty interface\ninterface Foo {}\n\n// an interface with only one supertype (Bar === Foo)\ninterface Bar extends Foo {}\n\n// an interface with an empty list of supertypes\ninterface Baz {}\n```\n\n----------------------------------------\n\nTITLE: Inline Type Imports Fix Style\nDESCRIPTION: This example demonstrates the correct code when the `fixStyle` option is set to `inline-type-imports`.  This uses the TypeScript 4.5+ syntax `import { type Foo } from 'Foo'` to inline the type modifier.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/consistent-type-imports.mdx#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { type Foo } from 'Foo';\nimport type Bar from 'Bar';\ntype T = Foo;\nconst x: Bar = 1;\n```\n\n----------------------------------------\n\nTITLE: Bumping minimum supported range and removing old versions\nDESCRIPTION: This breaking change updates the minimum supported version range for dependencies and removes handling for older versions. This might require users to update their dependencies to meet the new requirements.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/typescript-estree/CHANGELOG.md#_snippet_39\n\nLANGUAGE: text\nCODE:\n```\n* Bumps the minimum supported range and removes handling for old versions\n```\n\n----------------------------------------\n\nTITLE: Correct Addition with allowBoolean: true\nDESCRIPTION: This snippet shows examples of correct addition operations when the `allowBoolean` option is enabled. Adding a number or string to a boolean is allowed.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/restrict-plus-operands.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nlet fn = (a: number, b: boolean) => a + b;\nlet fn = (a: string, b: boolean) => a + b;\n```\n\n----------------------------------------\n\nTITLE: Fixing Parser Fallback Logic in Rule Tester - TypeScript\nDESCRIPTION: Addresses an issue with the parser fallback logic within the @typescript-eslint/rule-tester. The fix ensures correct parser resolution during rule testing, preventing unexpected errors or incorrect analysis.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/rule-tester/CHANGELOG.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n**rule-tester:** fix `parser` fallback logic ([#7754](https://github.com/typescript-eslint/typescript-eslint/issues/7754)) ([34c23e0](https://github.com/typescript-eslint/typescript-eslint/commit/34c23e0ece36100c2e44b3ded681ebe1236fbe37))\n```\n\n----------------------------------------\n\nTITLE: Correct `this` type usage in methods - TypeScript\nDESCRIPTION: This example demonstrates the correct usage of the rule, where the methods `f1`, `f2`, `f3`, and `f4` in class `Foo` either return `this` or omit the return type to infer `this`. Additionally, it demonstrates a valid case where a base class is returned from a derived class' method.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-return-this-type.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass Foo {\n  f1(): this {\n    return this;\n  }\n  f2() {\n    return this;\n  }\n  f3 = (): this => {\n    return this;\n  };\n  f4 = () => {\n    return this;\n  };\n}\n\nclass Base {}\nclass Derived extends Base {\n  f(): Base {\n    return this;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect code with readonly parameter property when parameterProperties override is explicit (TypeScript)\nDESCRIPTION: Demonstrates incorrect code when a `readonly` parameter property does not have a specified access modifier, when `accessibility` is `off`, and `overrides: { parameterProperties: 'explicit' }`\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/explicit-member-accessibility.mdx#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nclass Animal {\n  constructor(readonly animalName: string) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Correct checkParameterProperties Option (TypeScript)\nDESCRIPTION: Shows correct code when `checkParameterProperties` is set to `false`.  It demonstrates that class constructor parameters do not need to be `readonly` in this scenario, even when other constructor parameters are.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-readonly-parameter-types.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nclass Foo {\n  constructor(\n    private paramProp1: string[],\n    private paramProp2: readonly string[],\n  ) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Case-Insensitive Alphabetical Order (Typescript)\nDESCRIPTION: This TypeScript code shows incorrect case-insensitive alphabetical ordering where 'B' should come after 'a'.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/member-ordering.mdx#_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Foo {\n  B: x;\n  a: x;\n  c: x;\n\n  B(): void;\n  c(): void;\n  a(): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Supporting type parameters for `typeof` in TypeScript 4.7\nDESCRIPTION: This commit adds support for type parameters used with the `typeof` operator in TypeScript 4.7. This allows for more precise type inference and checking when working with complex types.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/typescript-estree/CHANGELOG.md#_snippet_49\n\nLANGUAGE: plaintext\nCODE:\n```\n836de79\n```\n\n----------------------------------------\n\nTITLE: Correct: Necessary Condition - Nullish Argument\nDESCRIPTION: This example demonstrates a necessary use of optional chaining, as `arg` can be nullish (string | null | undefined). The `?.` operator handles cases where `arg` is null or undefined.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-unnecessary-condition.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nfunction bar(arg?: string | null) {\n  // Necessary, since arg might be nullish\n  return arg?.length;\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Overload Functions - TypeScript\nDESCRIPTION: Example of correct code that uses function overloads, which are allowed by default when `allowOverloadFunctions` is `true`. Each overload defines a specific type signature.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/explicit-module-boundary-types.mdx#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nexport function test(a: string): string;\nexport function test(a: number): number;\nexport function test(a: unknown) {\n  return a;\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Function Usage with Multiple Default Type Parameters\nDESCRIPTION: Demonstrates correct usage of a function with multiple default type parameters. You can specify some type parameters, omitting the rest to use their defaults, or specify all of them with different types.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-unnecessary-type-arguments.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nfunction g<T = number, U = string>() {}\ng<string>();\ng<number, number>();\n```\n\n----------------------------------------\n\nTITLE: Correct Type Usage - TypeScript\nDESCRIPTION: These code snippets demonstrate correct type usage in TypeScript, providing alternatives to using the `any` type. The examples showcase the use of specific types like `number` and `string` to improve type safety and code maintainability.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-explicit-any.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst age: number = 17;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst ages: number[] = [17];\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst ages: Array<number> = [17];\n```\n\nLANGUAGE: typescript\nCODE:\n```\nfunction greet(): string {}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nfunction greet(): string[] {}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nfunction greet(): Array<string> {}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nfunction greet(): Array<Array<string>> {}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nfunction greet(param: Array<string>): string {}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nfunction greet(param: Array<string>): Array<string> {}\n```\n\n----------------------------------------\n\nTITLE: Incorrect - allowTypedFunctionExpressions: true\nDESCRIPTION: Examples of incorrect TypeScript code with `allowTypedFunctionExpressions` set to `true`. These examples are flagged because even with the option enabled, the return types are still missing in untyped function expressions.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/explicit-function-return-type.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nlet arrowFn = () => 'test';\n\nlet funcExpr = function () {\n  return 'test';\n};\n\nlet objectProp = {\n  foo: () => 1,\n};\n```\n\n----------------------------------------\n\nTITLE: Disallowing primitive wrapper object types in TypeScript\nDESCRIPTION: This code snippet demonstrates incorrect usage of primitive wrapper object types like `BigInt`, `Boolean`, `Number`, `String`, and `Symbol`. It shows how TypeScript allows assignment of primitive values to `Object` type, which can be misleading.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-wrapper-object-types.mdx#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nlet myBigInt: BigInt;\nlet myBoolean: Boolean;\nlet myNumber: Number;\nlet myString: String;\nlet mySymbol: Symbol;\n\nlet myObject: Object = 'allowed by TypeScript';\n```\n\n----------------------------------------\n\nTITLE: Correct - allowExpressions: true\nDESCRIPTION: Examples of correct TypeScript code when the `allowExpressions` option is enabled.  Shows how the rule allows omission of explicit return types for function expressions assigned to variables or used as arguments.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/explicit-function-return-type.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nnode.addEventListener('click', () => {});\n\nnode.addEventListener('click', function () {});\n\nconst foo = arr.map(i => i * i);\n```\n\n----------------------------------------\n\nTITLE: Correct Code: allowLiterals - In Unions and Intersections - TypeScript\nDESCRIPTION: Examples of correct code when `allowLiterals` is set to `in-unions-and-intersections`.  Demonstrates how object literals are allowed as type aliases when part of unions and intersections.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-type-alias.mdx#_snippet_20\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype Foo = { name: string } | { age: number };\n\ntype Foo = { name: string } & { age: number };\n```\n\n----------------------------------------\n\nTITLE: PackageSpecifier Example (JSON)\nDESCRIPTION: Shows how to match the SafePromise type from the @reduxjs/toolkit package. The configuration specifies that types or values named `SafePromise` from the `@reduxjs/toolkit` package should be matched.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/packages/type-utils/TypeOrValueSpecifier.mdx#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{ \"from\": \"package\", \"name\": \"SafePromise\", \"package\": \"@reduxjs/toolkit\" }\n```\n\n----------------------------------------\n\nTITLE: Bumping supported TS version to 5.2\nDESCRIPTION: Updates the supported TypeScript version to 5.2. This ensures that the parser and associated tools can correctly handle new syntax and features introduced in TypeScript 5.2.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/typescript-estree/CHANGELOG.md#_snippet_17\n\n\n\n----------------------------------------\n\nTITLE: Parsing TypeScript Code JavaScript\nDESCRIPTION: This JavaScript code demonstrates how to use the `parse` function from the `@typescript-eslint/typescript-estree` package to parse TypeScript code. It imports the function, defines a TypeScript code snippet, and calls the `parse` function with specific options to enable location and range information in the resulting AST.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/packages/TypeScript_ESTree.mdx#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { parse } from '@typescript-eslint/typescript-estree';\n\nconst code = `const hello: string = 'world';`;\nconst ast = parse(code, {\n  loc: true,\n  range: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Correct Conditional Tests with ignoreConditionalTests: false in TypeScript\nDESCRIPTION: This code demonstrates the correct replacement of logical OR operators with nullish coalescing operators in conditional tests.  This is the correct replacement for the 'incorrect' examples when the `ignoreConditionalTests` option is set to `false`.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-nullish-coalescing.mdx#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\ndeclare let a: string | null;\ndeclare const b: string | null;\n\nif (a ?? b) {\n}\nif ((a ??= b)) {\n}\nwhile (a ?? b) {}\nwhile ((a ??= b)) {}\ndo {} while (a ?? b);\nfor (let i = 0; a ?? b; i += 1) {}\n(a ?? b) ? true : false;\n```\n\n----------------------------------------\n\nTITLE: Incorrect Empty Class (allowStaticOnly) - TypeScript\nDESCRIPTION: This snippet demonstrates an incorrect case when the `allowStaticOnly` option is set to `true`. An empty class `EmptyClass` is defined, which is disallowed because it has no static members.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-extraneous-class.mdx#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nclass EmptyClass {}\n```\n\n----------------------------------------\n\nTITLE: Allow option in use - Incorrect\nDESCRIPTION: This code demonstrates incorrect usage of deprecated code when the `allow` option is set. Even with the `allow` option set, using the deprecated `apiV2` and `unescape` triggers the rule because they are not in the allow list.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-deprecated.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n/** @deprecated */\ndeclare function apiV2(): Promise<string>;\n\nawait apiV2();\n\n// `unescape` has been deprecated since ES5.\nunescape('...');\n```\n\n----------------------------------------\n\nTITLE: Extending strict-type-checked-only with Legacy Config\nDESCRIPTION: This code snippet demonstrates how to extend the `strict-type-checked-only` configuration using the legacy `.eslintrc.js` format.  It configures ESLint to only use type-checked rules from typescript-eslint's strict set, disabling any corresponding core ESLint rules.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/users/Shared_Configurations.mdx#_snippet_22\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  extends: ['plugin:@typescript-eslint/strict-type-checked-only'],\n};\n```\n\n----------------------------------------\n\nTITLE: PackageSpecifier Multiple Names Example (JSON)\nDESCRIPTION: Illustrates how to match multiple values from a specific package.  In this case, the specifier matches 'describe', 'it', and 'test' from the 'vitest' package.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/packages/type-utils/TypeOrValueSpecifier.mdx#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{ \"from\": \"package\", \"name\": [\"describe\", \"it\", \"test\"], \"package\": \"vitest\" }\n```\n\n----------------------------------------\n\nTITLE: Adding TSEnumBody Node\nDESCRIPTION: This snippet describes the fix for adding a `TSEnumBody` node for `TSEnumDeclaration` body. This addition likely improves the AST representation of enum declarations in TypeScript.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/visitor-keys/CHANGELOG.md#_snippet_3\n\nLANGUAGE: None\nCODE:\n```\n- **typescript-estree:** add TSEnumBody node for TSEnumDeclaration body\n```\n\n----------------------------------------\n\nTITLE: Correct Class Expression Member Ordering (Static vs Instance Fields)\nDESCRIPTION: This TypeScript code snippet illustrates a correct member order in a class expression, adhering to the enforced rule that public static fields, followed by static fields, should come before instance fields.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/member-ordering.mdx#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nconst foo = class {\n  [Z: string]: any; // -> signature (irrelevant)\n\n  public static A: string; // -> public static field\n\n  constructor() {} // -> constructor (irrelevant)\n\n  private static B: string; // -> static field\n  protected static C: string; // -> static field\n  private static D: string; // -> static field\n\n  private E: string; // -> instance field\n\n  public T(): void {} // -> method (irrelevant)\n};\n```\n\n----------------------------------------\n\nTITLE: Incorrect Array Access Example - TypeScript\nDESCRIPTION: This example demonstrates an incorrect way to access an array element in TypeScript. It shows direct array access instead of destructuring. The incorrect code is `const x = ['a']; const y = x[0];`.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-destructuring.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst x = ['a'];\nconst y = x[0];\n```\n\n----------------------------------------\n\nTITLE: Supporting TypeScript 5.5\nDESCRIPTION: This snippet indicates support for TypeScript 5.5. This means the project has been updated to correctly parse and understand TypeScript 5.5 syntax and features.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/visitor-keys/CHANGELOG.md#_snippet_5\n\nLANGUAGE: None\nCODE:\n```\n- support TypeScript 5.5\n```\n\n----------------------------------------\n\nTITLE: Incorrect Addition with allowRegExp: true\nDESCRIPTION: This snippet demonstrates an incorrect addition operation with `allowRegExp` enabled, showing a case that is still flagged by the rule (adding a number to a RegExp).\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/restrict-plus-operands.mdx#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nlet fn = (a: number, b: RegExp) => a + b;\n```\n\n----------------------------------------\n\nTITLE: Fixing JSDoc parsing in TypeScript-eslint\nDESCRIPTION: This snippet describes a bug fix that defaults to parsing all JSDoc comments and provides configuration options for this behavior. It addresses issue #7999 in the typescript-eslint repository.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/types/CHANGELOG.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n* default to parse all JSDoc and provide options to configure it ([#7999](https://github.com/typescript-eslint/typescript-eslint/issues/7999)) ([779e13e](https://github.com/typescript-eslint/typescript-eslint/commit/779e13ec86f92b94a96ecdf81cbc36120a132ff6))\n```\n\n----------------------------------------\n\nTITLE: Correct Usage: Optimized Template Expressions in TypeScript\nDESCRIPTION: This code snippet demonstrates examples of correct usage of template literals or alternative string representations where unnecessary template expressions are avoided, leading to cleaner and more efficient code.  It shows how to directly assign string literals or use simple string variables without wrapping them in unnecessary template literals.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-unnecessary-template-expression.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Static values can be incorporated into the surrounding template.\n\nconst ab1 = `ab`;\nconst ab2 = `ab`;\ntype AB = `AB`;\n\n// Transforming enum members into string unions using template literals is allowed.\nenum ABC {\n  A = 'A',\n  B = 'B',\n  C = 'C',\n}\ntype ABCUnion = `${ABC}`;\ntype A = `${ABC.A}`;\n\n// Interpolating type parameters is allowed.\ntype TextUtil<T extends string> = `${T}`;\n\nconst stringWithNumber = `1 + 1 = 2`;\n\nconst stringWithBoolean = `true is true`;\n\n// Some simple expressions that are already strings\n// can be rewritten without a template at all.\n\nconst text = 'a';\nconst wrappedText = text;\ntype Text = 'A';\ntype WrappedText = Text;\n\ndeclare const intersectionWithString: string & { _brand: 'test-brand' };\nconst wrappedIntersection = intersectionWithString;\ntype IntersectionWithString = string & { _brand: 'test-brand' };\ntype WrappedIntersection = IntersectionWithString;\n```\n\n----------------------------------------\n\nTITLE: Installing typescript-eslint v8 (Legacy Config)\nDESCRIPTION: This command installs specific packages for typescript-eslint v8 as development dependencies using npm, targeting projects using the legacy ESLint configuration.  It installs the eslint-plugin and parser at version 8.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/website/blog/2024-07-31-announcing-typescript-eslint-v8.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm i @typescript-eslint/eslint-plugin@8 @typescript-eslint/parser@8 --save-dev\n```\n\n----------------------------------------\n\nTITLE: Disallow 'lib' triple-slash reference\nDESCRIPTION: This snippet demonstrates how to disallow the use of `/// <reference lib=\"...\" />` and enforce using an `import` statement instead. The `lib` option is set to `'never'` to trigger the rule.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/triple-slash-reference.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference lib=\"code\" />\n\nglobalThis.value;\n```\n\n----------------------------------------\n\nTITLE: Supporting TS 5.3\nDESCRIPTION: This update adds support for TypeScript version 5.3, allowing the parser to correctly parse and analyze code written using the latest TypeScript features. This ensures compatibility with the most recent TypeScript releases.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/typescript-estree/CHANGELOG.md#_snippet_12\n\nLANGUAGE: Markdown\nCODE:\n```\n* support TS 5.3 ([#7968](https://github.com/typescript-eslint/typescript-eslint/issues/7968)) ([fb50638](https://github.com/typescript-eslint/typescript-eslint/commit/fb50638650d35fbd39f2b19446fa54c864bfc2ef))\n```\n\n----------------------------------------\n\nTITLE: Disallowing Non-Public Readonly Parameter Properties in TypeScript\nDESCRIPTION: These TypeScript class examples demonstrate code that violates the rule when `{ \"allow\": [\"public readonly\"] }` is specified.  The rule only allows public readonly parameter properties, flagging other modifiers as incorrect.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/parameter-properties.mdx#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nclass Foo {\n  constructor(readonly name: string) {}\n}\n\nclass Foo {\n  constructor(private name: string) {}\n}\n\nclass Foo {\n  constructor(protected name: string) {}\n}\n\nclass Foo {\n  constructor(public name: string) {}\n}\n\nclass Foo {\n  constructor(private readonly name: string) {}\n}\n\nclass Foo {\n  constructor(protected readonly name: string) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Ignoring ECMA version in scope-manager\nDESCRIPTION: This feature allows the scope manager to ignore the ECMA version. This functionality was later reverted. It relates to issue #5881.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/parser/CHANGELOG.md#_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Correct Alphabetical Order (Typescript)\nDESCRIPTION: This TypeScript code demonstrates the correct alphabetical ordering of interface members.  Members are sorted alphabetically within their respective groups.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/member-ordering.mdx#_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Foo {\n  B: x;\n  a: x;\n  c: x;\n\n  B(): void;\n  a(): void;\n  c(): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Code Example - TypeScript\nDESCRIPTION: This snippet shows an example of correct TypeScript code that adheres to the ESLint rule. It requires a concrete example to demonstrate the correct usage and how it avoids the issues identified by the rule.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/TEMPLATE.md#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n// To fill out: correct code\n```\n\n----------------------------------------\n\nTITLE: Correct Abstract Class with Properties - TypeScript\nDESCRIPTION: This snippet demonstrates a correct usage of an abstract class which has an abstract property.  Abstract classes with abstract members are not flagged by the rule.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-extraneous-class.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nabstract class Foo {\n  abstract prop: string;\n}\n```\n\n----------------------------------------\n\nTITLE: ProjectServiceOptions - allowDefaultProject - JavaScript\nDESCRIPTION: Example configuring `projectService` with `allowDefaultProject` to allow type information to be computed for JavaScript files without the `allowJs` compiler option.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/packages/Parser.mdx#_snippet_9\n\nLANGUAGE: js\nCODE:\n```\n{\n  parser: '@typescript-eslint/parser',\n  parserOptions: {\n    projectService: {\n      allowDefaultProject: ['*.js'],\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Allowing Empty Decorated Functions in TypeScript\nDESCRIPTION: This example demonstrates how to allow empty decorated functions using the `decoratedFunctions` option for the `no-empty-function` rule. The `foo` method in the `Foo` class is decorated and has an empty body, which will not trigger the rule due to the option being set.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-empty-function.mdx#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass Foo {\n  @decorator()\n  foo() {}\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Alphabetical Order (Typescript)\nDESCRIPTION: This TypeScript code shows an example of incorrect alphabetical ordering of interface members. 'a', 'B', 'c' should be 'B', 'a', 'c'.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/member-ordering.mdx#_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Foo {\n  a: x;\n  B: x;\n  c: x;\n\n  B(): void;\n  c(): void;\n  a(): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Class Extension with Default Type Parameter\nDESCRIPTION: Shows correct ways to extend a class with a default type parameter. Either omit the type parameter to inherit the default, or specify a different type.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-unnecessary-type-arguments.mdx#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nclass D extends C {}\nclass D extends C<string> {}\n```\n\n----------------------------------------\n\nTITLE: Correct - allowDirectConstAssertionInArrowFunctions: true\nDESCRIPTION: Correct usage examples demonstrating direct `as const` assertions in arrow functions, satisfying the rule when `allowDirectConstAssertionInArrowFunctions` is enabled.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/explicit-function-return-type.mdx#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst func = (value: number) => ({ foo: 'bar', value }) as const;\nconst func = () => x as const;\n```\n\n----------------------------------------\n\nTITLE: createProgram Utility - Legacy Config - JavaScript\nDESCRIPTION: Example of using the `createProgram` utility to provide a TypeScript program instance to the `programs` option in a legacy ESLint configuration (`.eslintrc.js`).\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/packages/Parser.mdx#_snippet_13\n\nLANGUAGE: js\nCODE:\n```\nconst parser = require('@typescript-eslint/parser');\n\nmodule.exports = {\n  parserOptions: {\n    programs: [parser.createProgram('tsconfig.json')],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: ESLint Configuration for Decorator Metadata\nDESCRIPTION: Demonstrates how to configure ESLint and typescript-eslint to correctly handle projects using legacy decorators and decorator metadata.  `parserOptions.emitDecoratorMetadata` and `parserOptions.experimentalDecorators` are both set to `true`.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/website/blog/2024-03-25-changes-to-consistent-type-imports-with-decorators.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport tseslint from 'typescript-eslint';\n\nexport default tseslint.config(\n  ...tseslint.configs.recommended,\n  // Added lines start\n  {\n    languageOptions: {\n      parserOptions: {\n        emitDecoratorMetadata: true,\n        experimentalDecorators: true,\n      },\n    },\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Incorrect - allowConciseArrowFunctionExpressionsStartingWithVoid: true\nDESCRIPTION: Incorrect examples demonstrating violations when `allowConciseArrowFunctionExpressionsStartingWithVoid` is enabled. These show that standard arrow functions still require explicit return types.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/explicit-function-return-type.mdx#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nvar join = (a: string, b: string) => `${a}${b}`;\n\nconst log = (message: string) => {\n  console.log(message);\n};\n```\n\n----------------------------------------\n\nTITLE: Updating TypeScript lib types in TypeScript-eslint\nDESCRIPTION: This snippet highlights the update to library types to align with TypeScript 5.2 RC. This enhancement is related to issue #7451 in the typescript-eslint project.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/types/CHANGELOG.md#_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n* update to lib types for TS 5.2 RC ([#7451](https://github.com/typescript-eslint/typescript-eslint/issues/7451)) ([479f9f6](https://github.com/typescript-eslint/typescript-eslint/commit/479f9f6c053874bd584220edf594ec56d6b0b71a))\n```\n\n----------------------------------------\n\nTITLE: Disallowing Non-Protected Readonly Parameter Properties in TypeScript\nDESCRIPTION: These TypeScript class examples demonstrate code that violates the rule when `{ \"allow\": [\"protected readonly\"] }` is specified. The rule only allows protected readonly parameter properties, flagging other modifiers as incorrect.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/parameter-properties.mdx#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nclass Foo {\n  constructor(readonly name: string) {}\n}\n\nclass Foo {\n  constructor(private name: string) {}\n}\n\nclass Foo {\n  constructor(protected name: string) {}\n}\n\nclass Foo {\n  constructor(public name: string) {}\n}\n\nclass Foo {\n  constructor(private readonly name: string) {}\n}\n\nclass Foo {\n  constructor(public readonly name: string) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Supporting optional variance annotation in TypeScript 4.7\nDESCRIPTION: This commit enables support for optional variance annotations, a TypeScript 4.7 feature.  Variance annotations provide more control over generic type compatibility.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/typescript-estree/CHANGELOG.md#_snippet_52\n\nLANGUAGE: plaintext\nCODE:\n```\n7e7b24c\n```\n\n----------------------------------------\n\nTITLE: Incorrect Thenable Handling (checkThenables)\nDESCRIPTION: This code shows incorrect handling of Thenable objects when the `checkThenables` option is enabled. It illustrates how the rule flags unhandled PromiseLike and custom Thenable types.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-floating-promises.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function createPromiseLike(): PromiseLike<string>;\n\ncreatePromiseLike();\n\ninterface MyThenable {\n  then(onFulfilled: () => void, onRejected: () => void): MyThenable;\n}\n\ndeclare function createMyThenable(): MyThenable;\n\ncreateMyThenable();\n```\n\n----------------------------------------\n\nTITLE: Incorrect Destructuring with Type Annotation - TypeScript\nDESCRIPTION: This example demonstrates incorrect code when `enforceForDeclarationWithTypeAnnotation` is enabled.  It uses direct property access with a type annotation. The incorrect code is `const x: string = obj.x;`.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-destructuring.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst x: string = obj.x;\n```\n\n----------------------------------------\n\nTITLE: Allow specific types in template literals\nDESCRIPTION: Demonstrates how to allow specific types in template literals using the `allow` option, which accepts a `TypeOrValueSpecifier`.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/restrict-template-expressions.mdx#_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst error = new Error();\nconst msg1 = `arg = ${error}`;\n```\n\n----------------------------------------\n\nTITLE: Incorrect `checkUnknown` example - TypeScript\nDESCRIPTION: Example demonstrating incorrect code when using the `checkUnknown` option. It shows how chained logical AND can be replaced by an optional chain.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-optional-chain.mdx#_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\ndeclare const thing: unknown;\n\nthing && thing.toString();\n```\n\n----------------------------------------\n\nTITLE: Incorrect Code: allowLiterals - In Intersections - TypeScript\nDESCRIPTION: Examples of incorrect code when `allowLiterals` is set to `in-intersections`.  Demonstrates how object literals are not allowed as type aliases unless they are part of intersections.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-type-alias.mdx#_snippet_17\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype Foo = {};\n\ntype Foo = {\n  name: string;\n  age: number;\n};\n\ntype Foo = {\n  name: string;\n  age: number;\n  walk: (miles: number) => void;\n};\n\ntype Foo = { name: string } | { age: number };\n```\n\n----------------------------------------\n\nTITLE: Correct Optional Members First (Typescript)\nDESCRIPTION: This TypeScript code showcases the correct placement of optional members before required members, with alphabetical sorting.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/member-ordering.mdx#_snippet_47\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Foo {\n  b?: number;\n  a: boolean;\n  c: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Reverting ECMA version ignore in scope-manager\nDESCRIPTION: This commit reverts the feature to ignore ECMA version in the scope manager. This relates to issues #5888 and #5881.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/parser/CHANGELOG.md#_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Incorrect Alphabetical Order in Member Groups (Typescript)\nDESCRIPTION: This TypeScript code demonstrates incorrect alphabetical ordering within specified member groups ('method' and 'field').\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/member-ordering.mdx#_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Foo {\n  B(): void;\n  c(): void;\n  a(): void;\n\n  a: x;\n  B: x;\n  c: x;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating dependencies using npm/yarn\nDESCRIPTION: This command shows how to update eslint, typescript, @typescript-eslint/parser and @typescript-eslint/eslint-plugin using npm or yarn.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/website/blog/2024-02-12-announcing-typescript-eslint-v7.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i eslint typescript @typescript-eslint/parser @typescript-eslint/eslint-plugin\n```\n\n----------------------------------------\n\nTITLE: Supporting ESTree optional chaining - TypeScript\nDESCRIPTION: This feature adds support for the ESTree representation of optional chaining (e.g., `a?.b`). This means the parser can now correctly parse and represent optional chaining expressions in the AST.  This enables correct parsing and analysis of modern JavaScript/TypeScript code using optional chaining.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/parser/CHANGELOG.md#_snippet_19\n\n\n\n----------------------------------------\n\nTITLE: Configuring extraFileExtensions in Flat Config (eslint.config.mjs)\nDESCRIPTION: This snippet shows how to configure `extraFileExtensions` in a Flat Config file (`eslint.config.mjs`) to allow non-TypeScript extensions like `.vue`. It also sets `projectService` to `true` and defines the `tsconfigRootDir`. This avoids errors related to custom file extensions.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/troubleshooting/faqs/Frameworks.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport default tseslint.config(\n  // ... the rest of your config ...\n  {\n    languageOptions: {\n      parserOptions: {\n        // Add this line\n        extraFileExtensions: ['.vue'],\n        projectService: true,\n        tsconfigRootDir: import.meta.dirname,\n      },\n    },\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Extending with Stylistic Config (Legacy)\nDESCRIPTION: This snippet demonstrates extending the ESLint configuration using the `stylistic` configuration, using the Legacy Config style. It is focused on code style.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/users/Shared_Configurations.mdx#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  extends: ['plugin:@typescript-eslint/stylistic'],\n};\n```\n\n----------------------------------------\n\nTITLE: Incorrect Declaration Merging TypeScript\nDESCRIPTION: This snippet showcases an example of incorrect declaration merging that the rule flags. It involves an interface and a class with the same name `Foo` which is considered unsafe due to potential runtime errors if properties declared in the interface are not initialized in the class.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-unsafe-declaration-merging.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface Foo {}\n\nclass Foo {}\n```\n\n----------------------------------------\n\nTITLE: Adding EXPERIMENTAL_useProjectService option - TypeScript\nDESCRIPTION: Introduces an experimental option named EXPERIMENTAL_useProjectService to @typescript-eslint/typescript-estree. When enabled, this option utilizes the TypeScript project service, which could enhance the accuracy and performance of static analysis by leveraging TypeScript's internal compiler services.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/rule-tester/CHANGELOG.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\n**typescript-estree:** add EXPERIMENTAL_useProjectService option to use TypeScript project service ([#6754](https://github.com/typescript-eslint/typescript-eslint/issues/6754)) ([6d3d162](https://github.com/typescript-eslint/typescript-eslint/commit/6d3d162ce032ebcf5f892a4edfb897797fc96191))\n```\n\n----------------------------------------\n\nTITLE: Disabling automaticSingleRunInference - Javascript\nDESCRIPTION: This code snippet demonstrates how to remove the `automaticSingleRunInference` property from your `parserOptions` in your ESLint configuration file. This is relevant due to the renaming of the property to `disallowAutomaticSingleRunInference` and its default behavior changing to opt-out. Removing this line effectively disables the feature.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/website/blog/2024-05-27-announcing-typescript-eslint-v8-beta.mdx#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nparserOptions: {\n  // Remove this line\n  automaticSingleRunInference: true,\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies\nDESCRIPTION: Installs the necessary dependencies for the website using yarn.  This is a prerequisite for both local development and building the site.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/website/README.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Incorrect Code: allowLiterals - In Unions and Intersections - TypeScript\nDESCRIPTION: Examples of incorrect code when `allowLiterals` is set to `in-unions-and-intersections`.  Demonstrates how object literals are not allowed as type aliases.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-type-alias.mdx#_snippet_19\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype Foo = {};\n\ntype Foo = {\n  name: string;\n  age: number;\n};\n\ntype Foo = {\n  name: string;\n  age: number;\n  walk: (miles: number) => void;\n};\n```\n\n----------------------------------------\n\nTITLE: Exposing types for old Typescript versions\nDESCRIPTION: This commit exposes types supporting older versions of Typescript. It resolves issue #5339.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/parser/CHANGELOG.md#_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Allow Any in template literals\nDESCRIPTION: Demonstrates how to allow `any` type in template literals using the `allowAny` option. This is generally discouraged as it bypasses type safety.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/restrict-template-expressions.mdx#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst user = JSON.parse('{ \"name\": \"foo\" }');\nconst msg1 = `arg = ${user.name}`;\nconst msg2 = `arg = ${user.name || 'the user with no name'}`;\n```\n\n----------------------------------------\n\nTITLE: Supporting ESTree Optional Chaining Representation\nDESCRIPTION: This feature introduces support for the ESTree representation of optional chaining in TypeScript-eslint.  It allows the toolchain to correctly parse, analyze, and transform code utilizing the optional chaining operator (?.), aligning with the ESTree specification for this feature.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/visitor-keys/CHANGELOG.md#_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nsupport ESTree optional chaining representation ([#2308](https://github.com/typescript-eslint/typescript-eslint/issues/2308)) ([e9d2ab6](https://github.com/typescript-eslint/typescript-eslint/commit/e9d2ab638b6767700b52797e74b814ea059beaae))\n```\n\n----------------------------------------\n\nTITLE: Run ESLint\nDESCRIPTION: Runs ESLint on the current project directory to check for code quality issues and enforce coding standards. This command initiates the linting process and outputs the results to the terminal.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/getting-started/Legacy_ESLint_Setup.mdx#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\nnpx eslint .\n```\n\n----------------------------------------\n\nTITLE: Correct TypeScript Import Examples\nDESCRIPTION: These examples demonstrate correct usage of import statements, utilizing the top-level `type` qualifier when importing type specifiers.  Also demonstrates the correct usage when mixing type and value imports.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-import-type-side-effects.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport type { A } from 'mod';\nimport type { A as AA } from 'mod';\nimport type { A, B } from 'mod';\nimport type { A as AA, B as BB } from 'mod';\n\nimport T from 'mod';\nimport type T from 'mod';\n\nimport * as T from 'mod';\nimport type * as T from 'mod';\n\nimport { T } from 'mod';\nimport type { T } from 'mod';\nimport { T, U } from 'mod';\nimport type { T, U } from 'mod';\nimport { type T, U } from 'mod';\nimport { T, type U } from 'mod';\n\nimport type T, { U } from 'mod';\nimport T, { type U } from 'mod';\n```\n\n----------------------------------------\n\nTITLE: Ignore properties that require quotes in naming-convention\nDESCRIPTION: This configuration snippet demonstrates how to ignore property names that require quotes using the `requiresQuotes` modifier and setting `format` to null. This allows property names that break the naming convention but are necessary due to technical reasons (e.g., HTTP headers) to be used without triggering the naming-convention rule.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/naming-convention.mdx#_snippet_11\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"@typescript-eslint/naming-convention\": [\n    \"error\",\n    {\n      \"selector\": [\n        \"classProperty\",\n        \"objectLiteralProperty\",\n        \"typeProperty\",\n        \"classMethod\",\n        \"objectLiteralMethod\",\n        \"typeMethod\",\n        \"accessor\",\n        \"enumMember\",\n      ],\n      \"format\": null,\n      \"modifiers\": [\"requiresQuotes\"],\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Ignoring Void Returning Functions - TypeScript\nDESCRIPTION: This code snippet demonstrates how the `ignoreVoidReturningFunctions` option allows functions that explicitly return `void` to return `void` expressions. This can lead to more succinct functions but may also hide potential type system issues.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-confusing-void-expression.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nfunction foo(): void {\n  return console.log();\n}\n\nfunction onError(callback: () => void): void {\n  callback();\n}\n\nonError(() => console.log('oops'));\n```\n\n----------------------------------------\n\nTITLE: Unsafe Unary Minus Assignment - TypeScript\nDESCRIPTION: This example showcases using the unary minus on a string, assigning it to a variable.  This is an example of what the rule aims to prevent, where a non-number type is negated resulting in unexpected behavior (NaN).\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-unsafe-unary-minus.mdx#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst s = 'hello';\nconst x = -s; // x is NaN\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint Legacy Config with extraFileExtensions in JS\nDESCRIPTION: This code snippet illustrates how to configure ESLint using the legacy config format to correctly handle extra file extensions (like .vue) when using the TypeScript ESLint parser and projectService. It shows how to define and reuse the `extraFileExtensions` to prevent performance degradation from frequent project reloads in TypeScript's language service.  It shows the addition of `extraFileExtensions` to both the .ts and .vue file configurations, correcting issues caused by changes to `extraFileExtensions`.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/troubleshooting/typed-linting/Performance.mdx#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n// Add this line\nconst extraFileExtensions = ['.vue'];\nmodule.exports = {\n  files: ['*.ts'],\n  parser: '@typescript-eslint/parser',\n  parserOptions: {\n    projectService: true,\n    // Add this line\n    extraFileExtensions,\n  },\n  overrides: [\n    {\n      files: ['*.vue'],\n      parser: 'vue-eslint-parser',\n      parserOptions: {\n        parser: '@typescript-eslint/parser',\n        projectService: true,\n        // Remove this line\n        extraFileExtensions: ['.vue'],\n        // Add this line\n        extraFileExtensions,\n      },\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Adding flag for SourceOfProjectReferenceRedirect - TypeScript\nDESCRIPTION: This feature adds a new flag, EXPERIMENTAL_useSourceOfProjectReferenceRedirect, to the typescript-estree package.  It likely enables experimental behavior related to handling project references and source code redirection. This feature allows the parser to resolve project references by redirecting to the source files of the referenced project.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/parser/CHANGELOG.md#_snippet_16\n\n\n\n----------------------------------------\n\nTITLE: Aligning Class Property Representation with ESTree (TypeScript)\nDESCRIPTION: This code snippet aligns the representation of class properties in the TypeScript AST with the ESTree standard. This improves compatibility and consistency between TypeScript and JavaScript AST representations, facilitating interoperability between tools and libraries.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/visitor-keys/CHANGELOG.md#_snippet_14\n\nLANGUAGE: none\nCODE:\n```\n- align class property representation with ESTree ([#3806](https://github.com/typescript-eslint/typescript-eslint/issues/3806)) ([22fa5c0](https://github.com/typescript-eslint/typescript-eslint/commit/22fa5c0c4705ed2898f00b7cacc5dd642d859275)), closes [#3430](https://github.com/typescript-eslint/typescript-eslint/issues/3430) [#3077](https://github.com/typescript-eslint/typescript-eslint/issues/3077)\n```\n\n----------------------------------------\n\nTITLE: Incorrect Nullable Boolean Comparison (allowComparingNullableBooleansToFalse: false)\nDESCRIPTION: This code snippet demonstrates incorrect usage when `allowComparingNullableBooleansToFalse` is set to `false`.  It shows unnecessary comparisons of nullable boolean variables (e.g., `boolean | undefined`) to the boolean literal `false`.  The rule flags these comparisons as redundant.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-unnecessary-boolean-literal-compare.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare const someUndefinedCondition: boolean | undefined;\nif (someUndefinedCondition === false) {\n}\n\ndeclare const someNullCondition: boolean | null;\nif (someNullCondition !== false) {\n}\n```\n\n----------------------------------------\n\nTITLE: Supporting labelled tuple members (TSv4) - TypeScript\nDESCRIPTION: This feature provides support for TypeScript version 4's labelled tuple members, allowing the parser to understand and process code that uses this syntax. It enhances the parser to correctly handle and represent labelled tuple types.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/parser/CHANGELOG.md#_snippet_21\n\n\n\n----------------------------------------\n\nTITLE: Adding Strict Configuration in ESLint Plugin\nDESCRIPTION: This feature introduces a new 'strict' configuration option within the eslint-plugin.  This configuration likely enables a stricter set of rules and checks for TypeScript code, enforcing best practices and improving code quality.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/scope-manager/CHANGELOG.md#_snippet_19\n\nLANGUAGE: text\nCODE:\n```\n4a500b2d92a91873dbb729793d1ee1c36ef06ed8\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Nullish Coalescing (TypeScript)\nDESCRIPTION: This code snippet showcases the correct application of the nullish coalescing operator (??) and the non-null assertion operator (!).  The non-null assertion is used appropriately when it is applied to the right-hand side of the ?? operator or when no other options can satisfy the type.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-non-null-asserted-nullish-coalescing.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfoo ?? bar;\nfoo ?? bar!;\nfoo!.bazz ?? bar;\nfoo!.bazz ?? bar!;\nfoo() ?? bar;\n\n// This is considered correct code because there's no way for the user to satisfy it.\nlet x: string;\nx! ?? '';\n```\n\n----------------------------------------\n\nTITLE: Run ESLint with pnpm\nDESCRIPTION: Runs ESLint on the current project directory using pnpm package manager.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/getting-started/Legacy_ESLint_Setup.mdx#_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\npnpm eslint .\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Non-Null Assertion After Optional Chain (TypeScript)\nDESCRIPTION: This code snippet demonstrates incorrect usage of the non-null assertion operator (!) after an optional chain operator (?.). This pattern is discouraged because the optional chain already handles potential null or undefined values, and the non-null assertion can mask potential type errors.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-non-null-asserted-optional-chain.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nfoo?.bar!;\nfoo?.bar()!;\n```\n\n----------------------------------------\n\nTITLE: Custom Lint Rule Fix in TypeScript\nDESCRIPTION: This snippet shows the code fix suggested by the custom eslint rule to migrate to sending key-value pairs instead of tuples.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/website/blog/2024-09-30-typed-linting.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { endpoints } from \"~/api\";\n\nconst rawData = [\"key\", \"value\"] as const;\n\nawait fetch(endpoints.intake, {\n- data: JSON.stringify(rawData)\n+ data: JSON.stringify(Object.fromEntries(rawData))\n  // ...\n  method: \"POST\",\n});\n```\n\n----------------------------------------\n\nTITLE: Incorrect usage with ignoreClassesThatImplementAnInterface = true (TypeScript)\nDESCRIPTION: This TypeScript snippet shows code considered incorrect when `ignoreClassesThatImplementAnInterface` is set to `true`. A simple class `Standalone` with a method and a property that do not use `this` is flagged, because without implementing an interface, the rule should enforce the use of `this` or be made static.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/class-methods-use-this.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nclass Standalone {\n  method() {}\n  property = () => {};\n}\n```\n\n----------------------------------------\n\nTITLE: Feature: Throwing on invalid update expressions\nDESCRIPTION: This code snippet outlines a new feature in `typescript-estree` that throws an error when encountering invalid update expressions. This enhancement improves error reporting and prevents silent failures by explicitly indicating when an update expression is syntactically or semantically incorrect.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/ast-spec/CHANGELOG.md#_snippet_8\n\nLANGUAGE: Markdown\nCODE:\n```\n- **typescript-estree:** throw on invalid update expressions\n```\n\n----------------------------------------\n\nTITLE: Render Maintainers TeamBioList\nDESCRIPTION: Renders the `TeamBioList` component with the list of maintainers. The component receives an array of `bios` objects, each representing a maintainer, along with a description and explanation.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/maintenance/Team.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n<TeamBioList\n  bios={[\n    {\n      description:\n        'Computer scientist. Cider drinker. Linting enthusiast. Australian.',\n      links: [\n        ['bluesky', 'https://bsky.app/profile/brad.zacher.com.au'],\n        ['mastodon', 'https://mastodon.online/@bradzacher'],\n        ['www', 'https://zacher.com.au'],\n      ],\n      name: 'Brad Zacher',\n      username: 'bradzacher',\n    },\n    {\n      description:\n        'Director of Engineering Nrwl. 5x Microsoft MVP for TypeScript.',\n      links: [\n        ['bluesky', 'https://bsky.app/profile/jameshenry.bsky.social'],\n        ['www', 'https://jameshenry.blog'],\n      ],\n      name: 'James Henry',\n      username: 'jameshenry',\n    },\n    {\n      description: 'Full time open source maintainer. Likes cats. 🐈‍⬛',\n      links: [\n        ['bluesky', 'https://bsky.app/profile/joshuakgoldberg.com'],\n        ['mastodon', 'https://fosstodon.org/@JoshuaKGoldberg'],\n        ['www', 'https://joshuakgoldberg.com'],\n      ],\n      name: 'Josh Goldberg',\n      username: 'joshuakgoldberg',\n    },\n  ]}\n  description=\"Leaders stewarding the direction of the project.\"\n  explanation=\"In addition to committer tasks, maintainers work on the processes behind the project, relationships with neighboring ecosystem projects, and manage regular releases.\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Uninstalling and installing dependencies using npm\nDESCRIPTION: This command shows how to uninstall @typescript-eslint/parser and @typescript-eslint/eslint-plugin and install typescript-eslint using npm. This simplifies dependency management when using Flat Configs.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/website/blog/2024-02-12-announcing-typescript-eslint-v7.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm un @typescript-eslint/parser @typescript-eslint/eslint-plugin\nnpm i typescript-eslint\n```\n\n----------------------------------------\n\nTITLE: Object Literal with Excess Properties after Removing Type Parameter TypeScript\nDESCRIPTION: This example shows the TypeScript error that occurs after removing the unnecessary type parameter from the `serialize` function. TypeScript raises an error because the object literal has an excess property that is not defined in the `SomeProperties` interface.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-unnecessary-type-parameters.mdx#_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nfunction serialize(x: SomeProperties): string {\n  return JSON.stringify(x);\n}\n\n// TS Error: Object literal may only specify known properties, and 'anotherProperty' does not exist in type 'SomeProperties'.\nserialize({ foo: 'bar', anotherProperty: 'baz' });\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Incorrect TSLint Comment Usage in TypeScript\nDESCRIPTION: This code snippet illustrates examples of incorrect usage of TSLint comments. These comments should be removed when migrating from TSLint to ESLint, and this rule helps identify them. The snippet includes examples of disable, enable, and disable-next-line directives.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/ban-tslint-comment.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/* tslint:disable */\n/* tslint:enable */\n/* tslint:disable:rule1 rule2 rule3... */\n/* tslint:enable:rule1 rule2 rule3... */\n// tslint:disable-next-line\nsomeCode(); // tslint:disable-line\n// tslint:disable-next-line:rule1 rule2 rule3...\n```\n\n----------------------------------------\n\nTITLE: TypeScript Rule Configuration Type Definition\nDESCRIPTION: Defines the TypeScript types for configuring ESLint rules with severity levels and optional rule-specific options. This type definition is used within ESLint configuration files to specify how rules should be applied during linting.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/troubleshooting/faqs/General.mdx#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\ntype Severity = 'off' | 'warn' | 'error';\ntype RuleConfig =\n  | Severity\n  | [Severity]\n  | [\n      Severity,\n      // Options is the tuple type from the rule docs\n      ...Options,\n    ];\n```\n\n----------------------------------------\n\nTITLE: Incorrect Module Declaration in TypeScript\nDESCRIPTION: This snippet shows an incorrect usage of the `module` keyword to declare a custom TypeScript module. The `namespace` keyword is preferred over `module` for declaring custom modules.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-namespace-keyword.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nmodule Example {}\n```\n\n----------------------------------------\n\nTITLE: Correct Addition with allowNumberAndString: true\nDESCRIPTION: This snippet shows correct addition operations where `allowNumberAndString` is enabled, allowing a number to be added to a string.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/restrict-plus-operands.mdx#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nlet fn = (a: number, b: string) => a + b;\nlet fn = (a: number, b: number | string) => a + b;\nlet fn = (a: bigint, b: string) => a + b;\n```\n\n----------------------------------------\n\nTITLE: Dropping Node.js Support in TypeScript-eslint\nDESCRIPTION: This snippet describes the removal of support for Node.js versions v14.17 and v17 in the typescript-eslint project, as part of chore #5971.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/types/CHANGELOG.md#_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n* drop support for node v14.17, v17 ([#5971](https://github.com/typescript-eslint/typescript-eslint/issues/5971)) ([cc62015](https://github.com/typescript-eslint/typescript-eslint/commit/cc62015b8ae5f207912ff8988e2a0b3fe9a79243))\n```\n\n----------------------------------------\n\nTITLE: Render Committers TeamBioList\nDESCRIPTION: Renders the `TeamBioList` component with the list of committers. Similar to the maintainers list, it receives an array of `bios` objects, a description, and an explanation. This component is responsible for displaying information about the project's committers.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/maintenance/Team.mdx#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n<TeamBioList\n  bios={[\n    {\n      description: 'Hello 🐱.',\n      name: 'Armano2',\n      username: 'armano2',\n    },\n    {\n      description: 'I care about languages!',\n      links: [\n        ['bluesky', 'https://bsky.app/profile/joshcena.com'],\n        ['www', 'https://joshcena.com'],\n      ],\n      name: 'Joshua Chen',\n      username: 'josh-cena',\n    },\n    {\n      description: '...',\n      name: 'auvred',\n      username: 'auvred',\n    },\n    {\n      description: 'Dotting my \"j\"s and crossing my \"z\"s.',\n      name: 'Kirk Waiblinger',\n      username: 'kirkwaiblinger',\n    },\n    {\n      description: 'Hello World!',\n      links: [['bluesky', 'https://bsky.app/profile/ronenamiel.bsky.social']],\n      name: 'Ronen Amiel',\n      username: 'ronami',\n    },\n  ]}\n  description=\"Code committers who regularly work on the code in the repository.\"\n  explanation=\"Committers triage issues, review pull requests, and write code to push the project's functionality and stability forward.\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Feature: Explicit Resource Management syntax for TS 5.2 - TypeScript\nDESCRIPTION: This feature adds support for Explicit Resource Management syntax for TypeScript version 5.2. The implementation details can be found in commit c11e05c97ef80d36fd194ac15952c339c1612b9e.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/ast-spec/CHANGELOG.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nsupport Explicit Resource Management syntax for TS 5.2 ([#7479](https://github.com/typescript-eslint/typescript-eslint/issues/7479)) ([c11e05c](https://github.com/typescript-eslint/typescript-eslint/commit/c11e05c97ef80d36fd194ac15952c339c1612b9e))\n```\n\n----------------------------------------\n\nTITLE: Configuring caughtErrors option for no-unused-vars in TypeScript ESLint\nDESCRIPTION: This snippet demonstrates how to configure the `caughtErrors` option for the `@typescript-eslint/no-unused-vars` rule to align with ESLint 9 behavior. It enables specifying whether caught errors should be ignored by the rule, setting it to `'none'` for ignoring.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/website/blog/2024-07-31-announcing-typescript-eslint-v8.md#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{ \"@typescript-eslint/no-unused-vars\": [\"error\", { \"caughtErrors\": \"none\" }] }\n```\n\n----------------------------------------\n\nTITLE: Correct Exhaustive Switch Example - Union Types - TypeScript\nDESCRIPTION: This code demonstrates a correct usage of a switch statement over a union type ('Day'). It includes a case for each possible value in the 'Day' union. This satisfies the 'switch-exhaustiveness-check' rule, as all cases are explicitly handled.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/switch-exhaustiveness-check.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype Day =\n  | 'Monday'\n  | 'Tuesday'\n  | 'Wednesday'\n  | 'Thursday'\n  | 'Friday'\n  | 'Saturday'\n  | 'Sunday';\n\ndeclare const day: Day;\nlet result = 0;\n\nswitch (day) {\n  case 'Monday':\n    result = 1;\n    break;\n  case 'Tuesday':\n    result = 2;\n    break;\n  case 'Wednesday':\n    result = 3;\n    break;\n  case 'Thursday':\n    result = 4;\n    break;\n  case 'Friday':\n    result = 5;\n    break;\n  case 'Saturday':\n    result = 6;\n    break;\n  case 'Sunday':\n    result = 7;\n    break;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating to TypeScript 4.9\nDESCRIPTION: This code snippet indicates an update to TypeScript 4.9 within the @typescript-eslint scope-manager. This ensures compatibility with the latest language features and changes. It depends on the TypeScript compiler and language services.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/scope-manager/CHANGELOG.md#_snippet_8\n\nLANGUAGE: none\nCODE:\n```\nupdate to TypeScript 4.9 ([#5716](https://github.com/typescript-eslint/typescript-eslint/issues/5716)) ([4d744ea](https://github.com/typescript-eslint/typescript-eslint/commit/4d744ea10ba03c66eebcb63e8722e9f0165fbeed))\n```\n\n----------------------------------------\n\nTITLE: Incorrect Type Definition (Unsorted) - TypeScript\nDESCRIPTION: This code snippet demonstrates an incorrectly sorted type definition in TypeScript, where the union type `B | A` is not alphabetically ordered. The rule flags this as an error.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/sort-type-constituents.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype T1 = B | A;\n\ntype T2 = { b: string } & { a: string };\n\ntype T3 = [1, 2, 4] & [1, 2, 3];\n\ntype T4 =\n  | [1, 2, 4]\n  | [1, 2, 3]\n  | { b: string }\n  | { a: string }\n  | (() => void)\n  | (() => string)\n  | 'b'\n  | 'a'\n  | 'b'\n  | 'a'\n  | readonly string[]\n  | readonly number[]\n  | string[]\n  | number[]\n  | B\n  | A\n  | string\n  | any;\n```\n\n----------------------------------------\n\nTITLE: Correct Alphabetical Order Ignoring Groups (Typescript)\nDESCRIPTION: This TypeScript code demonstrates correct alphabetical sorting across all members when member groups are ignored.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/member-ordering.mdx#_snippet_44\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Foo {\n  [a: string]: number;\n  a: boolean;\n  b(): void;\n\n  (): Baz;\n  new (): Bar;\n}\n```\n\n----------------------------------------\n\nTITLE: Allow user to provide TS program instance: Typescript\nDESCRIPTION: This feature allows users to provide a TypeScript program instance directly in the parser options.  This enables greater control over the parsing process and allows for more advanced use cases. The commit associated with this change is e855b18b8feee0edb5c617c11006861426a6f530.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/parser/CHANGELOG.md#_snippet_12\n\n\n\n----------------------------------------\n\nTITLE: Example Pull Request Titles\nDESCRIPTION: These are examples of good pull request titles that conform to the project's conventions, illustrating the expected format and content.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/contributing/Pull_Requests.mdx#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n- `fix(scope-manager): correct handling for class static blocks`\n- `docs: fix links to getting started in README.md`\n```\n\n----------------------------------------\n\nTITLE: Updating TypeScript to 5.3-rc\nDESCRIPTION: This update upgrades the parser to support the release candidate of TypeScript 5.3, allowing developers to test and adopt the latest TypeScript features before the final release.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/typescript-estree/CHANGELOG.md#_snippet_14\n\nLANGUAGE: Markdown\nCODE:\n```\n* update TypeScript to 5.3-rc ([#7923](https://github.com/typescript-eslint/typescript-eslint/issues/7923)) ([9034d17](https://github.com/typescript-eslint/typescript-eslint/commit/9034d17027f798c38ffc19141e3c08ca8ea31290))\n```\n\n----------------------------------------\n\nTITLE: Allowing Empty Private Constructors in TypeScript\nDESCRIPTION: This example demonstrates how to allow empty private constructors using the `private-constructors` option for the `no-empty-function` rule.  The `Foo` class is defined with a private constructor that has an empty body, which will not trigger the rule due to the option being set.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-empty-function.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass Foo {\n  private constructor() {}\n}\n```\n\n----------------------------------------\n\nTITLE: Fix typo in FAQ link\nDESCRIPTION: This bug fix corrects a typo in a link to the FAQ. It ensures that users are directed to the correct documentation page. This improves the user experience and makes it easier to find answers to common questions.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/typescript-estree/CHANGELOG.md#_snippet_33\n\nLANGUAGE: text\nCODE:\n```\n**typescript-estree:** fix typo in FAQ link ([#6346](https://github.com/typescript-eslint/typescript-eslint/issues/6346)) ([eefc578](https://github.com/typescript-eslint/typescript-eslint/commit/eefc5781b0f455264e4e58e33c27f8a91b3ab5e3))\n```\n\n----------------------------------------\n\nTITLE: Incorrect Mutable Variable in Class - TypeScript\nDESCRIPTION: This snippet shows an incorrect example of a mutable variable within a class.  Exported variables are constant and cannot be written to by importers. The Utilities class contains a mutableCount property and an incrementCount method.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-extraneous-class.mdx#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nexport class Utilities {\n  static mutableCount = 1;\n\n  static incrementCount() {\n    Utilities.mutableCount += 1;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: React Component with Ant Design Buttons, 'any' type and Console Log (JSX)\nDESCRIPTION: This React component, `MyComp`, imports and renders several Ant Design Button components.  It uses 'any' as a return type. It also includes a `console.log` statement for demonstration and debugging purposes, which may trigger a no-console error and no-explicit-any error in linting.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/integration-tests/fixtures/markdown/Doc.md#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Button } from 'antd';\n\nfunction MyComp(): any {\n  console.log('test');\n  return (\n    <div>\n      <Button type=\"primary\">Primary</Button>\n      <Button>Default</Button>\n      <Button type=\"dashed\">Dashed</Button>\n      <Button type=\"danger\">Danger</Button>\n      <Button type=\"link\">Link</Button>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Updating RuleContext and SourceCode types\nDESCRIPTION: This commit updates the types within the @typescript-eslint/utils package to reflect changes and deprecations in `RuleContext` and `SourceCode`. Associated with issue #7812, this update ensures that the types used in the package are consistent with the latest ESLint APIs, addressing any deprecations and improving type safety. The relevant commit hash is b73d8b21dea9c6697a68039ffba848d21b04402c.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/utils/CHANGELOG.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nb73d8b2(https://github.com/typescript-eslint/typescript-eslint/commit/b73d8b21dea9c6697a68039ffba848d21b04402c)\n```\n\n----------------------------------------\n\nTITLE: Incorrect code with public readonly parameter property when parameterProperties override is no-public (TypeScript)\nDESCRIPTION: Demonstrates incorrect code when a `readonly` parameter property has a `public` access modifier, when `accessibility` is `off`, and `overrides: { parameterProperties: 'no-public' }`\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/explicit-member-accessibility.mdx#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nclass Animal {\n  constructor(public readonly animalName: string) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Installing typescript-eslint v8 Beta with Flat Config\nDESCRIPTION: This command installs the typescript-eslint v8 beta version using npm with the `typescript-eslint@rc-v8` package. It is used when ESLint is configured with the 'flat' configuration format. The `--save-dev` flag installs the package as a development dependency.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/website/blog/2024-05-27-announcing-typescript-eslint-v8-beta.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i typescript-eslint@rc-v8 --save-dev\n```\n\n----------------------------------------\n\nTITLE: Correct Code: allowConstructors - Always - TypeScript\nDESCRIPTION: Examples of correct code when `allowConstructors` is set to `always`. These examples demonstrates how constructors can be declared as type aliases.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-type-alias.mdx#_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype Foo = new () => void;\n```\n\n----------------------------------------\n\nTITLE: Fixing ExportNamedDeclaration source in typescript-estree\nDESCRIPTION: This commit corrects the `source` property type of `ExportNamedDeclaration` nodes in the AST generated by typescript-estree.  The `source` is changed from `Expression` to `Literal`. This fix aligns the AST representation with the expected structure and resolves potential issues for tools consuming the AST.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/typescript-estree/CHANGELOG.md#_snippet_46\n\nLANGUAGE: plaintext\nCODE:\n```\ndc5a0f5\n```\n\n----------------------------------------\n\nTITLE: Correct Object Type with Other Properties - TypeScript\nDESCRIPTION: This snippet showcases a scenario where an object type has both a call signature and other properties. The rule does not apply in this case since it's more than just a single call signature.  No errors are expected here.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-function-type.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nfunction foo(bar: { (): string; baz: number }): string {\n  return bar();\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Unified Signatures\nDESCRIPTION: These TypeScript code snippets demonstrate the correct way to unify function signatures using union types and rest parameters. The first example uses a union type for the parameter.  The second example uses a rest parameter.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/unified-signatures.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction x(x: number | string): void;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nfunction y(...x: number[]): void;\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// This rule won't check overload signatures with different rest parameter types.\n// See https://github.com/microsoft/TypeScript/issues/5077\nfunction f(...a: number[]): void;\nfunction f(...a: string[]): void;\n```\n\n----------------------------------------\n\nTITLE: Supporting TS4.1 Features in TypeScript-eslint\nDESCRIPTION: This feature adds support for TypeScript 4.1 features within the typescript-eslint ecosystem. This enhancement likely includes updates to the AST and related tooling to correctly handle new syntax and language constructs introduced in TS4.1, enhancing the parser's accuracy and capabilities.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/visitor-keys/CHANGELOG.md#_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nsupport TS4.1 features ([#2748](https://github.com/typescript-eslint/typescript-eslint/issues/2748)) ([2be354b](https://github.com/typescript-eslint/typescript-eslint/commit/2be354bb15f9013a2da1b13a0c0836e9ef057e16)), closes [#2583](https://github.com/typescript-eslint/typescript-eslint/issues/2583)\n```\n\n----------------------------------------\n\nTITLE: Removing TSParenthesizedType (TypeScript)\nDESCRIPTION: This code snippet removes the `TSParenthesizedType` node from the TypeScript AST. This simplifies the AST structure and removes redundancy, as parenthesized types can be represented using other AST nodes.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/visitor-keys/CHANGELOG.md#_snippet_15\n\nLANGUAGE: none\nCODE:\n```\n- remove `TSParenthesizedType` ([#3340](https://github.com/typescript-eslint/typescript-eslint/issues/3340)) ([c8ee432](https://github.com/typescript-eslint/typescript-eslint/commit/c8ee43269faea4c04ec02eaa2b81a0aa6eec5d3e)), closes [#3136](https://github.com/typescript-eslint/typescript-eslint/issues/3136)\n```\n\n----------------------------------------\n\nTITLE: Ignoring ECMA version\nDESCRIPTION: This code snippet intends to ignore the ECMA version in the scope-manager. This might affect how the code is parsed and analyzed. It relates to parsing and scope determination within the linter.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/scope-manager/CHANGELOG.md#_snippet_9\n\nLANGUAGE: none\nCODE:\n```\n**scope-manager:** ignore ECMA version ([#5881](https://github.com/typescript-eslint/typescript-eslint/issues/5881)) ([3b8d449](https://github.com/typescript-eslint/typescript-eslint/commit/3b8d449696c319690536a18a48ef32749dc2f559))\n```\n\nLANGUAGE: none\nCODE:\n```\nRevert \"feat(scope-manager): ignore ECMA version\" (#5888) ([2ee81df](https://github.com/typescript-eslint/typescript-eslint/commit/2ee81df5a365d82ef4b3dfc124d4ec39c7bcb725)), closes [#5888](https://github.com/typescript-eslint/typescript-eslint/issues/5888) [#5881](https://github.com/typescript-eslint/typescript-eslint/issues/5881)\n```\n\n----------------------------------------\n\nTITLE: Fixing Decorators Check in ClassVisitor for Methods\nDESCRIPTION: This commit fixes a bug in the ClassVisitor within the scope-manager package, specifically related to checking decorators on methods. The fix ensures that decorators are correctly handled when analyzing class methods, preventing potential errors or incorrect behavior during scope analysis. This patch improves the accuracy and reliability of the scope-manager package.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/scope-manager/CHANGELOG.md#_snippet_4\n\nLANGUAGE: None\nCODE:\n```\nabbb6c2\n```\n\n----------------------------------------\n\nTITLE: Incorrect spread of unbranded string (TypeScript)\nDESCRIPTION: This TypeScript snippet shows an incorrect usage example with the `allow` option enabled, where spreading an unbranded string is still flagged by the `no-misused-spread` rule because it's not the allowed type.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-misused-spread.mdx#_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\ndeclare const unbrandedString: string;\n\nconst spreadUnbrandedString = [...unbrandedString];\n```\n\n----------------------------------------\n\nTITLE: Incorrect: Possibly-undefined Indexed Access\nDESCRIPTION: This example shows code incorrectly flagged as unnecessary because TypeScript optimistically assumes indexed access always returns a value.  To get the correct types, use TypeScript's `noUncheckedIndexedAccess` option.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-unnecessary-condition.mdx#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nconst array: string[] = [];\nconst firstElement = array[0];\n// false positive\nif (firstElement != null) {\n  // ...\n}\n\nconst record: Record<string, string> = {};\nconst someValue = record.someKey;\n// false positive\nif (someValue != null) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Index Signatures with 'record' Option - TypeScript\nDESCRIPTION: This code snippet demonstrates incorrect usage of index signatures (interface, type, and mapped type) when the 'record' option is enabled. The rule enforces using the `Record` type instead of index signatures.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/consistent-indexed-object-style.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface IndexSignatureInterface {\n  [key: string]: unknown;\n}\n\ntype IndexSignatureType = {\n  [key: string]: unknown;\n};\n\ntype MappedType = {\n  [key in string]: unknown;\n};\n```\n\n----------------------------------------\n\nTITLE: Updating exports field in package.json - TypeScript-eslint\nDESCRIPTION: This code snippet details a bug fix related to updating the `exports` field within the `package.json` files for the `@typescript-eslint` project. It addresses issue #6550.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/types/CHANGELOG.md#_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n* update `exports` field in package.json files ([#6550](https://github.com/typescript-eslint/typescript-eslint/issues/6550)) ([53776c2](https://github.com/typescript-eslint/typescript-eslint/commit/53776c244f8bbdc852d57c7b313b0935e755ddc4))\n```\n\n----------------------------------------\n\nTITLE: Manual Dependency Update Checkout\nDESCRIPTION: This snippet describes the initial steps for performing a manual dependency update, ensuring you're on the main branch and have the latest changes.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/maintenance/pull-requests/Dependency_Version_Upgrades.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout main && git pull\n```\n\n----------------------------------------\n\nTITLE: Promise.catch() variable type in TypeScript\nDESCRIPTION: This snippet shows that the `useUnknownInCatchVariables` compiler option does not affect the type of the `catch` variable in `Promise.prototype.catch()`, which will always be `any` without explicit type annotation.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/use-unknown-in-catch-callback-variable.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nPromise.reject(x).catch(err => {\n  // err has type 'any' regardless of `useUnknownInCatchVariables`\n});\n```\n\n----------------------------------------\n\nTITLE: `extends` constraints for `infer` in typescript-estree\nDESCRIPTION: This commit implements support for `extends` constraints within `infer` type variables in typescript-estree.  This feature allows for more precise type inference using conditional types.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/typescript-estree/CHANGELOG.md#_snippet_53\n\nLANGUAGE: plaintext\nCODE:\n```\n8cbbcc3\n```\n\n----------------------------------------\n\nTITLE: Bumping Supported TypeScript Version to 5.2\nDESCRIPTION: This commit bumps the supported TypeScript version to 5.2 in the typescript-eslint project. Updating the supported TypeScript version ensures that the project takes advantage of the latest features and improvements in TypeScript, while also maintaining compatibility with existing codebases that use TypeScript 5.2.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/scope-manager/CHANGELOG.md#_snippet_2\n\nLANGUAGE: None\nCODE:\n```\nf18c88d\n```\n\n----------------------------------------\n\nTITLE: Example of Zod Schema Variable Usage\nDESCRIPTION: This TypeScript code shows a Zod schema variable `schema` being assigned a value but only used for its type using `typeof` with `z.infer`. The @typescript-eslint/no-unused-vars rule will report this usage because the schema is never directly used in runtime logic.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-unused-vars.mdx#_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport { z } from 'zod';\n\nconst schema = z.object({\n  //  ~~~~~~\n  //  'schema' is assigned a value but only used as a type.\n  value: z.number(),\n});\n\nexport type Box = z.infer<typeof schema>;\n```\n\n----------------------------------------\n\nTITLE: Babel Dependency Update\nDESCRIPTION: This snippet shows the command to add the core Babel dependencies as devDependencies using Yarn. It is specifically used for the typescript-eslint project.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/maintenance/pull-requests/Dependency_Version_Upgrades.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn add -D @babel/code-frame @babel/core @babel/eslint-parser @babel/parser @babel/types\n```\n\n----------------------------------------\n\nTITLE: Correct Code with ignoreTypeValueShadow: true\nDESCRIPTION: Shows correct code when the `ignoreTypeValueShadow` option is enabled.  It presents a situation where a type `Foo` and interface `Bar` are shadowed by variables with the same names within a function scope. Because `ignoreTypeValueShadow` is enabled, these instances of shadowing are ignored, showcasing a safe use case.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-shadow.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntype Foo = number;\ninterface Bar {\n  prop: number;\n}\n\nfunction f() {\n  const Foo = 1;\n  const Bar = 'test';\n}\n```\n\n----------------------------------------\n\nTITLE: Split AST specification out as its own module: Typescript\nDESCRIPTION: This feature refactors the AST specification into its own module. This improves code organization and makes it easier to maintain and extend the AST. The commit associated with this change is 25ea953cc60b118bd385c71e0a9b61c286c26fcf.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/parser/CHANGELOG.md#_snippet_13\n\n\n\n----------------------------------------\n\nTITLE: Adding Fixture Test Framework\nDESCRIPTION: This feature adds a fixture test framework along with some initial fixtures for ast-spec. It enables more comprehensive and reliable testing of the Abstract Syntax Tree (AST) handling capabilities, ensuring the accuracy and stability of the tool.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/scope-manager/CHANGELOG.md#_snippet_20\n\nLANGUAGE: text\nCODE:\n```\nf3cf87bf20fd0542f92a96a318aa9ee5bf23c1f6\n```\n\n----------------------------------------\n\nTITLE: Defining Array Option Types in TypeScript\nDESCRIPTION: This code defines TypeScript types for configuring array options. It includes a discriminated union for the `ArrayOption` type, allowing values 'array', 'generic', or 'array-simple'. The `Options` type is an array containing a single object with a 'default' property of type `ArrayOption` and an optional 'readonly' property, also of type `ArrayOption`.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/CHANGELOG.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype ArrayOption = 'array' | 'generic' | 'array-simple';\ntype Options = [\n  {\n    // default case for all arrays\n    default: ArrayOption;\n    // optional override for readonly arrays\n    readonly?: ArrayOption;\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Defining ArrayOption and Options Types in TypeScript\nDESCRIPTION: This TypeScript snippet defines two types: `ArrayOption` and `Options`. `ArrayOption` is a union type that represents possible values for array handling ('array', 'generic', or 'array-simple'). `Options` is a tuple type containing an object with a `default` property of type `ArrayOption`, and an optional `readonly` property of type `ArrayOption`. This is likely used for configuring how array types are handled within an ESLint rule.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/CHANGELOG.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype ArrayOption = 'array' | 'generic' | 'array-simple';\ntype Options = [\n  {\n    // default case for all arrays\n    default: ArrayOption;\n    // optional override for readonly arrays\n    readonly?: ArrayOption;\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Incorrect Type Literal Member Order (Typescript)\nDESCRIPTION: This TypeScript code shows an example of incorrect member ordering in a type literal according to the rule { \"typeLiterals\": [\"signature\", \"method\", \"constructor\", \"field\"] }. The field 'B' appears before the signature '[Z: string]: any'.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/member-ordering.mdx#_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\ntype Foo = {\n  B: string; // -> field\n\n  A(): void; // -> method\n\n  new (); // -> constructor\n\n  [Z: string]: any; // -> signature\n};\n```\n\n----------------------------------------\n\nTITLE: Enum Example with potential confusion.\nDESCRIPTION: This code illustrates a potential source of confusion in TypeScript enums, where an enum member's value depends on other variables and enum members within the same scope. The example demonstrates how the value of `Foo.c` is determined at runtime based on the enum's internal scope, potentially leading to unexpected results. It uses TypeScript.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-literal-enum-member.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst imOutside = 2;\nconst b = 2;\nenum Foo {\n  outer = imOutside,\n  a = 1,\n  b = a,\n  c = b,\n  // does c == Foo.b == Foo.c == 1?\n  // or does c == b == 2?\n}\n```\n\n----------------------------------------\n\nTITLE: Allowed Names Configuration\nDESCRIPTION: This JSON configuration demonstrates how to use the `allowedNames` option to exclude specific function or method names from the `explicit-function-return-type` rule.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/explicit-function-return-type.mdx#_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"@typescript-eslint/explicit-function-return-type\": [\n    \"error\",\n    {\n      \"allowedNames\": [\"ignoredFunctionName\", \"ignoredMethodName\"]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing TypeScript with Type Annotation\nDESCRIPTION: This code snippet demonstrates a simple TypeScript code snippet with a type annotation. ESLint's default parser (Espree) would raise an error attempting to parse this code. @typescript-eslint/parser is designed to parse TypeScript code correctly, handling type annotations and other TypeScript-specific syntax.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/packages/Parser.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nlet x: number = 1;\n```\n\n----------------------------------------\n\nTITLE: Matching Docs to Rules in Remark Plugin\nDESCRIPTION: This code snippet demonstrates how the Remark plugin accesses the file name and matches it with the corresponding ESLint rule from `@typescript-eslint/eslint-plugin`.  It checks if a rule exists for the given filename and retrieves its metadata for further processing. If the rule or its metadata is not found, the plugin exits early without modifying the AST.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/website/blog/2022-09-18-automated-rule-docs-with-docusaurus-and-remark.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as eslintPlugin from '@typescript-eslint/eslint-plugin';\nimport type { Plugin } from 'unified';\n\nexport const generatedRuleDocs: Plugin = () => {\n  return async (root, file) => {\n    if (file.stem == null) {\n      return;\n    }\n\n    const rule = eslintPlugin.rules[file.stem];\n    const meta = rule?.meta;\n    if (!meta?.docs) {\n      return;\n    }\n\n    // ... (rest of the plugin here!) ...\n  };\n};\n\n```\n\n----------------------------------------\n\nTITLE: Fixing Reference for 'this' in JSX Identifier\nDESCRIPTION: This bug fix addresses an incorrect reference for the `this` keyword within a JSX identifier. This resolution ensures that the scope manager correctly identifies and manages references to `this` in JSX contexts, improving the accuracy of code analysis and error detection.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/scope-manager/CHANGELOG.md#_snippet_21\n\nLANGUAGE: text\nCODE:\n```\ndd49280e50cb2f5bd26dc07210551bc1fda120af\n```\n\n----------------------------------------\n\nTITLE: Allowing Empty Tests in Rule Tester - TypeScript\nDESCRIPTION: Enables the creation of empty tests using the @typescript-eslint/rule-tester. This feature allows for more flexible test setup and can be useful for scenarios where specific edge cases or configurations need to be tested without initial code examples.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/rule-tester/CHANGELOG.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n**rule-tester:** allow to create empty tests ([#7467](https://github.com/typescript-eslint/typescript-eslint/issues/7467)) ([654b35d](https://github.com/typescript-eslint/typescript-eslint/commit/654b35dcf3ed6dc302d993110b72a7709aafbebf))\n```\n\n----------------------------------------\n\nTITLE: Fix TSNode type error on old ts versions\nDESCRIPTION: Addresses and resolves a type error that occurred when using the typescript-estree parser with older versions of TypeScript.  Ensures compatibility across a wider range of TypeScript versions.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/typescript-estree/CHANGELOG.md#_snippet_21\n\n\n\n----------------------------------------\n\nTITLE: Bitwise Expressions in Enums (Incorrect)\nDESCRIPTION: This code showcases incorrect usage of bitwise expressions in enums when the 'allowBitwiseExpressions' option is enabled.  It attempts to use variables in the bitwise operations within the enum, which is flagged by the rule. It uses TypeScript.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-literal-enum-member.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst x = 1;\nenum Foo {\n  A = x << 0,\n  B = x >> 0,\n  C = x >>> 0,\n  D = x | 0,\n  E = x & 0,\n  F = x ^ 0,\n  G = ~x,\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Class Member Ordering (Static vs Instance Fields)\nDESCRIPTION: This TypeScript code snippet shows a correct member order in a class, adhering to the enforced rule that public static fields, followed by static fields, should come before instance fields.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/member-ordering.mdx#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nclass Foo {\n  public static A: string; // -> public static field\n\n  private static B: string; // -> static field\n  protected static C: string; // -> static field\n  private static D: string; // -> static field\n\n  private E: string; // -> instance field\n\n  [Z: string]: any; // (irrelevant)\n}\n```\n\n----------------------------------------\n\nTITLE: Install ESLint and TypeScript Dependencies\nDESCRIPTION: Installs ESLint, the ESLint JavaScript parser, TypeScript, and typescript-eslint as development dependencies using npm or yarn. This is the first step in setting up ESLint for a TypeScript project.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/getting-started/Quickstart.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev eslint @eslint/js typescript typescript-eslint\n```\n\n----------------------------------------\n\nTITLE: ESLint Rule Configuration Object - v6 Stylistic Type Checked\nDESCRIPTION: Defines an ESLint rule configuration object focusing on stylistic rules for TypeScript code that require type checking. These rules enforce code formatting and style conventions while leveraging type information for more accurate analysis.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/website/blog/2023-07-09-announcing-typescript-eslint-v6.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst v6StylisticTypeChecked = {\n  '@typescript-eslint/adjacent-overload-signatures': 'error',\n  '@typescript-eslint/array-type': 'error',\n  '@typescript-eslint/ban-tslint-comment': 'error',\n  '@typescript-eslint/class-literal-property-style': 'error',\n  '@typescript-eslint/consistent-generic-constructors': 'error',\n  '@typescript-eslint/consistent-indexed-object-style': 'error',\n  '@typescript-eslint/consistent-type-assertions': 'error',\n  '@typescript-eslint/consistent-type-definitions': 'error',\n  'dot-notation': 'off',\n  '@typescript-eslint/dot-notation': 'error',\n  '@typescript-eslint/no-confusing-non-null-assertion': 'error',\n  'no-empty-function': 'off',\n  '@typescript-eslint/no-empty-function': 'error',\n  '@typescript-eslint/no-empty-interface': 'error',\n  '@typescript-eslint/no-inferrable-types': 'error',\n  '@typescript-eslint/non-nullable-type-assertion-style': 'error',\n  '@typescript-eslint/prefer-for-of': 'error',\n  '@typescript-eslint/prefer-function-type': 'error',\n  '@typescript-eslint/prefer-namespace-keyword': 'error',\n  '@typescript-eslint/prefer-nullish-coalescing': 'error',\n  '@typescript-eslint/prefer-optional-chain': 'error',\n  '@typescript-eslint/prefer-string-starts-ends-with': 'error',\n};\n```\n\n----------------------------------------\n\nTITLE: Utility Function to Trim Prefix from Rule Name\nDESCRIPTION: The `trimSlash` function removes the `@typescript-eslint/` prefix from a given string, simplifying rule names for display or comparison. This is useful for cleaning up rule names in the diff output.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/website/blog/2023-07-09-announcing-typescript-eslint-v6.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nfunction trimSlash(text) {\n  return text.startsWith('@typescript-eslint/')\n    ? text.slice('@typescript-eslint/'.length)\n    : text;\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect `checkNumber` example - TypeScript\nDESCRIPTION: Example demonstrating incorrect code when using the `checkNumber` option. It shows how chained logical AND can be replaced by an optional chain.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-optional-chain.mdx#_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\ndeclare const thing: number;\n\nthing && thing.toString();\n```\n\n----------------------------------------\n\nTITLE: Incorrect Empty Export with Import (typescript)\nDESCRIPTION: This example shows an incorrect usage of an empty export when an import statement is already present. The `export {}` statement is redundant because the `import 'some-other-module';` statement already makes the file a module.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-useless-empty-export.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport 'some-other-module';\nexport {};\n```\n\n----------------------------------------\n\nTITLE: Allowing Empty Override Methods in TypeScript\nDESCRIPTION: This example demonstrates how to allow empty override methods using the `overrideMethods` option for the `no-empty-function` rule. The `greet` method in the `Foo` class overrides the `greet` method from the `Base` class and has an empty body, which will not trigger the rule due to the option being set.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-empty-function.mdx#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nabstract class Base {\n  protected greet(): void {\n    console.log('Hello!');\n  }\n}\n\nclass Foo extends Base {\n  protected override greet(): void {}\n}\n```\n\n----------------------------------------\n\nTITLE: Throw errors on interface with implements\nDESCRIPTION: This change introduces an error when an interface attempts to use the `implements` keyword. Interfaces in TypeScript are meant to define a contract, not to implement it. Classes are the construct designed to implement interfaces. This rule catches this common error and guides users towards the correct implementation using classes.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/typescript-estree/CHANGELOG.md#_snippet_35\n\nLANGUAGE: text\nCODE:\n```\n* **typescript-estree:** throw errors on interface with implements ([#6551](https://github.com/typescript-eslint/typescript-eslint/issues/6551)) ([67e05c8](https://github.com/typescript-eslint/typescript-eslint/commit/67e05c8f0381ba7065a0257d6038f0a50a3b9888))\n```\n\n----------------------------------------\n\nTITLE: Invalid AST Example\nDESCRIPTION: This TypeScript snippet demonstrates an invalid AST scenario where a `ClassDeclaration` has a `null` `id`.  This type of invalid AST can cause issues with tools expecting ESTree-compliant AST nodes.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/website/blog/2023-07-09-announcing-typescript-eslint-v6.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nexport class {}\n```\n\n----------------------------------------\n\nTITLE: Fixing AST Spec for TSQualifiedName - Typescript\nDESCRIPTION: This commit addresses a bug in the AST specification by adding TSQualifiedName to the TypeNode union. This ensures correct type handling for qualified names in TypeScript ASTs. The change directly impacts the AST structure used by @typescript-eslint/ast-spec.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/ast-spec/CHANGELOG.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nadd TSQualifiedName to TypeNode union\n```\n\n----------------------------------------\n\nTITLE: Renaming utils Package: Typescript\nDESCRIPTION: This change renames the `experimental-utils` package to `utils` and creates an alias so that both paths continue to work. This allows users to transition to the new package name without breaking existing code.  The commit associated with this change is 1d55a7511b38d8e2b2eabe59f639e0a865e6c93f.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/parser/CHANGELOG.md#_snippet_7\n\n\n\n----------------------------------------\n\nTITLE: Renaming no-useless-template-literals rule in TypeScript ESLint\nDESCRIPTION: This snippet provides instructions for renaming the `no-useless-template-literals` rule to `no-unnecessary-template-expression`. This highlights a change in the rule name while maintaining the same underlying functionality.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/website/blog/2024-07-31-announcing-typescript-eslint-v8.md#_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nFind-and-replace text from `no-useless-template-literals` to `no-unnecessary-template-expression`\n```\n\n----------------------------------------\n\nTITLE: Ensuring backwards compat with pre-5.3 import attributes\nDESCRIPTION: This fix ensures backward compatibility with import attributes used in versions of TypeScript prior to 5.3. This ensures that the parser continues to function correctly with older codebases that use these older syntax.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/typescript-estree/CHANGELOG.md#_snippet_11\n\nLANGUAGE: Markdown\nCODE:\n```\n* **typescript-estree:** ensure backwards compat with pre-5.3 import attributes ([#7967](https://github.com/typescript-eslint/typescript-eslint/issues/7967)) ([810fc8c](https://github.com/typescript-eslint/typescript-eslint/commit/810fc8c9a18cb55af144d8945fdf38d841c9d486))\n```\n\n----------------------------------------\n\nTITLE: Incorrect ignoreInferredTypes Option (TypeScript)\nDESCRIPTION: Demonstrates incorrect code with `ignoreInferredTypes: true` where a callback with mutable `CallbackOptions` is used. It shows that the rule flags this as incorrect, even though the option is enabled.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/prefer-readonly-parameter-types.mdx#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { acceptsCallback, CallbackOptions } from 'external-dependency';\n\nacceptsCallback((options: CallbackOptions) => {});\n```\n\n----------------------------------------\n\nTITLE: Fix: Correcting engines.node constraints in package.json\nDESCRIPTION: This code snippet details a fix addressing the `engines.node` constraints within the `package.json` file. The correction ensures the declared Node.js engine compatibility range is accurate, preventing potential installation or runtime issues due to incorrect version requirements.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/ast-spec/CHANGELOG.md#_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n- correct `engines.node` constraints in `package.json`\n```\n\n----------------------------------------\n\nTITLE: Removing leftovers from useJSXTextNode removal\nDESCRIPTION: This commit removes leftovers from the removal of useJSXTextNode. This resolves issue #5091.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/parser/CHANGELOG.md#_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Declaring global variable with 'namespace globalThis' in TypeScript\nDESCRIPTION: This code snippet shows how to declare a global variable using `declare namespace globalThis` in TypeScript, which violates the ESLint `@typescript-eslint/no-namespace` rule. It's generally recommended to avoid namespaces in favor of ES modules.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/docs/troubleshooting/faqs/ESLint.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare namespace globalThis {\n  // ES2015 module syntax is preferred over namespaces. eslint (@typescript-eslint/no-namespace)\n  let myValue: string;\n}\n\nglobalThis.myValue;\n```\n\n----------------------------------------\n\nTITLE: Adding types for flat config files in TypeScript\nDESCRIPTION: Adds types to support flat config files within the typescript-eslint project. This feature enhances the configuration capabilities of the linter by providing type safety for flat configuration structures.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/rule-tester/CHANGELOG.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nadd types for flat config files ([#7273](https://github.com/typescript-eslint/typescript-eslint/issues/7273)) ([66cd0c0](https://github.com/typescript-eslint/typescript-eslint/commit/66cd0c0535e5de1b46ba337919a9a92748d2b0a6))\n```\n\n----------------------------------------\n\nTITLE: Acceptable Redundant Type for Documentation in TypeScript\nDESCRIPTION: Illustrates a case where including a redundant type constituent is acceptable for documentation purposes. This example showcases a union type that includes both `string` and `unknown` where `string` is technically redundant but serves to explain the intended usage of the type.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/no-redundant-type-constituents.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Normally a string name, but sometimes arbitrary unknown data.\n */\ntype NameOrOther = string | unknown;\n```\n\n----------------------------------------\n\nTITLE: Incorrect - allowFunctionsWithoutTypeParameters: true\nDESCRIPTION: Incorrect examples illustrating violations when `allowFunctionsWithoutTypeParameters` is enabled. Functions with type parameters still require explicit return types.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/eslint-plugin/docs/rules/explicit-function-return-type.mdx#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nfunction foo<T>(t: T) {\n  return t;\n}\n\nconst bar = <T>(t: T) => t;\n```\n\n----------------------------------------\n\nTITLE: Bug Fix: Nested Namespace Declaration - TypeScript\nDESCRIPTION: This bug fix addresses an issue where `declare` and `export` modifiers were not properly supported for nested namespace declarations within the typescript-estree package. The resolution is linked to commit 49a53f0ba985941a431269d3761030dc414916b1.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/ast-spec/CHANGELOG.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n**typescript-estree:** support `declare` and `export` modifiers for nested namespace declaration ([#7410](https://github.com/typescript-eslint/typescript-eslint/issues/7410)) ([49a53f0](https://github.com/typescript-eslint/typescript-eslint/commit/49a53f0ba985941a431269d3761030dc414916b1))\n```\n\n----------------------------------------\n\nTITLE: Enabling `parserOptions.project: false` in TypeScript ESLint\nDESCRIPTION: This feature allows users to disable project-based type checking in TypeScript ESLint by setting `parserOptions.project` to `false`. This can be useful for faster linting in projects where type checking is not required or already performed by the TypeScript compiler.\nSOURCE: https://github.com/typescript-eslint/typescript-eslint/blob/main/packages/typescript-estree/CHANGELOG.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n- allow `parserOptions.project: false`\n```"
  }
]