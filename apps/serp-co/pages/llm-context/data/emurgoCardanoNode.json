[
  {
    "owner": "emurgo",
    "repo": "cardano-node",
    "content": "TITLE: Running Cardano Node with Custom Config and Environment Variables\nDESCRIPTION: This command runs the cardano-node Docker image in \"custom\" mode, utilizing standard preprod network configuration files and environment variables to customize the node's settings. It demonstrates how to modify the cardano-node listening port via the `CARDANO_PORT` environment variable.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/nix/docker/README.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\n  docker run \\\n    -v preprod-data:/data \\\n    -e CARDANO_CONFIG=\"/opt/cardano/config/preprod/config.json\" \\\n    -e CARDANO_TOPOLOGY=\"/opt/cardano/config/preprod/topology.json\" \\\n    -e CARDANO_PORT=\"6001\" \\\n    ghcr.io/intersectmbo/cardano-node:dev \\\n    run\n```\n\n----------------------------------------\n\nTITLE: Cardano Node Tracing Configuration in YAML\nDESCRIPTION: This YAML code provides an example of a Cardano node tracing configuration. It defines trace options for all tracers, ChainDB traces, and specific ChainDB events. It configures backends for outputting trace data, sets frequency limits for specific messages, and defines a prefix for metrics. It sets up Prometheus with IPv6 on port 1234.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/trace-dispatcher/doc/trace-dispatcher.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# Use new tracing\nUseTraceDispatcher: True\n\nTraceOptions:\n  \"\": # Options for all tracers, if not overwritten:\n    severity: Notice\n    detail: DNormal\n    backends:\n      - Stdout MachineFormat\n      - EKGBackend\n      - Forwarder\n      - 'PrometheusSimple :: 1234' # Prometheus metrics available over IPv6 (and localhost) on port 1234\n\n  ChainDB: # Show as well messages with severity Info for all ChainDB traces.\n    severity: Info\n    detail: DDetailed\n\n  ChainDB.AddBlockEvent.AddedBlockToQueue: # Limit the AddedBlockToQueue events to a maximum of two per second.\n    maxFrequency: 2.0\n\nTraceOptionForwarder: # Configure the forwarder\n    maxReconnectDelay: 20\n\n# Frequency of Peer messages set to two seconds\nTraceOptionPeerFrequency: 2000\n\n# Any metrics emittted will get this prefix\nTraceOptionMetricsPrefix: \"cardano.node.metrics.\"\n```\n\n----------------------------------------\n\nTITLE: Logging Configuration Example\nDESCRIPTION: This example demonstrates configuring the logging parameters for cardano-tracer, including the log root directory, log mode (FileMode), and log format (ForMachine). It shows how to specify multiple logging sections for different formats.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/cardano-tracer/docs/cardano-tracer.md#_snippet_7\n\nLANGUAGE: JSON\nCODE:\n```\n\"logging\": [\n  {\n    \"logRoot\": \"/tmp/cardano-tracer-logs\",\n    \"logMode\": \"FileMode\",\n    \"logFormat\": \"ForMachine\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Get Local Node Tip\nDESCRIPTION: This command queries the tip of a local Cardano node. It requires the node to be running and the `CARDANO_NODE_SOCKET_PATH` environment variable to be set. The output shows the block hash, slot, and block number.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/README.rst#_snippet_8\n\nLANGUAGE: console\nCODE:\n```\ncabal exec cardano-cli -- get-tip --testnet-magic 42\n```\n\n----------------------------------------\n\nTITLE: Run Cardano Node Detached with Docker and Check Logs\nDESCRIPTION: This set of commands first removes a container named 'relay' if it exists. Then, it runs the Cardano node in detached mode, maps port 3001, and mounts volumes for data and IPC.  Finally, it streams the logs from the 'relay' container.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/nix/docker/README.md#_snippet_17\n\nLANGUAGE: Shell\nCODE:\n```\ndocker rm -f relay\ndocker run --detach \\\n  --name=relay \\\n  -p 3001:3001 \\\n  -v node-data:/data \\\n  -v node-ipc:/ipc \\\n  ghcr.io/intersectmbo/cardano-node:dev run\n\ndocker logs -f relay\n```\n\n----------------------------------------\n\nTITLE: Create Cardano CLI Alias and Query Mainnet Tip\nDESCRIPTION: This snippet defines an alias 'cardano-cli' using Docker to execute Cardano CLI commands. It mounts the 'node-ipc' volume to enable communication with the node. The subsequent command uses the alias to query the tip of the mainnet chain.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/nix/docker/README.md#_snippet_18\n\nLANGUAGE: Shell\nCODE:\n```\nalias cardano-cli=\"docker run \\\n  --rm -it \\\n  -v node-ipc:/ipc \\\n  ghcr.io/intersectmbo/cardano-node:dev cli\"\n\ncardano-cli query tip --mainnet\n```\n\n----------------------------------------\n\nTITLE: Building a raw transaction using cardano-cli\nDESCRIPTION: This command builds a raw Cardano transaction using `cardano-cli`. It specifies the transaction inputs, outputs, fees, and validity range. It requires the `txhash`, `remaining`, `testnet-user-1-payment.addr`, and `testnet-user-2-payment.addr` files to be available.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/cardano-submit-api/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nplayground $ cardano-cli transaction build-raw \\\n  --alonzo-era \\\n  --tx-in \"$txhash#0\" \\\n  --tx-out \"$(cat testnet-user-1-payment.addr)+$remaining\" \\\n  --tx-out \"$(cat testnet-user-2-payment.addr)+1000000\" \\\n  --invalid-hereafter \"21168607\" \\\n  --fee 180000 \\\n  --out-file tx.raw\n```\n\n----------------------------------------\n\nTITLE: Submitting transaction using curl\nDESCRIPTION: This command submits the signed transaction to the `cardano-submit-api` using `curl`. It sets the `Content-Type` header to `application/cbor` and sends the binary data from the `tx.signed.cbor` file.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/cardano-submit-api/README.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nplayground $ curl --header \"Content-Type: application/cbor\" -X POST http://localhost:8090/api/submit/tx --data-binary @tx.signed.cbor\n```\n\n----------------------------------------\n\nTITLE: Signing a transaction using cardano-cli\nDESCRIPTION: This command signs a raw transaction using `cardano-cli` and a signing key. It requires the `tx.raw` file (the raw transaction), `testnet-user-1-payment.skey` file (the signing key), and the `magic.flag` file.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/cardano-submit-api/README.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nplayground $ cardano-cli transaction sign \\\n  --tx-body-file tx.raw \\\n  --signing-key-file testnet-user-1-payment.skey \\\n  $(cat magic.flag) \\\n  --out-file tx.signed\n```\n\n----------------------------------------\n\nTITLE: Mounting Pre-existing Cardano Node State\nDESCRIPTION: This command mounts pre-existing Cardano node database state from the host into the container using a local volume driver bind mount. It sets the `NETWORK` environment variable to `preprod` and maps the `$PWD/preprod-data` directory on the host to `/data` inside the container. The host directory should contain a `db` subdirectory with the database state.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/nix/docker/README.md#_snippet_10\n\nLANGUAGE: Shell\nCODE:\n```\ndocker run \\\n  -v \"$PWD/preprod-data:/data\" \\\n  -e NETWORK=preprod \\\n  ghcr.io/intersectmbo/cardano-node:dev\n```\n\n----------------------------------------\n\nTITLE: Defining Collateral Percentage and Committee Settings\nDESCRIPTION: This JSON snippet sets the collateral percentage, and committee parameters for the Cardano node. The collateralPercentage determines the percentage of the transaction value that must be provided as collateral when using Plutus scripts. The committee settings determine max term length and minimum committee size.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/cardano-testnet/test/cardano-testnet-test/files/golden/queries/protocolParametersOut.txt#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"collateralPercentage\": 150,\n    \"committeeMaxTermLength\": 200,\n    \"committeeMinSize\": 0\n```\n\n----------------------------------------\n\nTITLE: Cardano Node Run Command Synopsis\nDESCRIPTION: This snippet displays the general usage synopsis for the `cardano-node run` command. It outlines the various command-line options available for configuring and running the Cardano node, including options for specifying topology, database path, socket path, signing keys, and network settings.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/README.rst#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nUsage: cardano-node run [--topology FILEPATH] [--database-path FILEPATH]\n                           [--socket-path FILEPATH]\n                           [--byron-delegation-certificate FILEPATH]\n                           [--byron-signing-key FILEPATH]\n                           [--shelley-kes-key FILEPATH]\n                           [--shelley-vrf-key FILEPATH]\n                           [--shelley-operational-certificate FILEPATH]\n                           [--start-as-non-producing-node]\n                           [--host-addr IPV4-ADDRESS]\n                           [--host-ipv6-addr IPV6-ADDRESS]\n                           [--port PORT]\n                           [--config NODE-CONFIGURATION] [--validate-db]\n     Run the node.\n```\n\n----------------------------------------\n\nTITLE: Running Cardano Node in Merge Mode\nDESCRIPTION: This command runs the cardano-node Docker image in \"merge\" mode, merging JSON configurations. It sets the `NETWORK` environment variable and uses `CARDANO_CONFIG_JSON_MERGE` and `CARDANO_TOPOLOGY_JSON_MERGE` to provide JSON fragments to be merged into the base network configuration. It utilizes named volumes for ipc and data.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/nix/docker/README.md#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\ndocker run \\\n  -v node-ipc:/ipc \\\n  -v mainnet-data:/data \\\n  -e NETWORK=mainnet \\\n  -e CARDANO_CONFIG_JSON_MERGE='{\"MaxConcurrencyBulkSync\": 2}' \\\n  -e CARDANO_TOPOLOGY_JSON_MERGE='{\"useLedgerAfterSlot\": 147000000}' \\\n  ghcr.io/intersectmbo/cardano-node:dev\n```\n\n----------------------------------------\n\nTITLE: Log Rotation Configuration\nDESCRIPTION: This configuration shows how to configure log rotation parameters for cardano-tracer, including rotation frequency, maximum log file size, the number of log files to keep, and the maximum age of log files. These settings help manage log file storage and prevent disk space exhaustion.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/cardano-tracer/docs/cardano-tracer.md#_snippet_9\n\nLANGUAGE: JSON\nCODE:\n```\n\"rotation\": {\n  \"rpFrequencySecs\": 30,\n  \"rpKeepFilesNum\": 3,\n  \"rpLogLimitBytes\": 50000,\n  \"rpMaxAgeHours\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Running Cardano Node in Scripts Mode\nDESCRIPTION: This command runs the cardano-node Docker image in \"scripts\" mode using a named volume for data persistence. The `NETWORK` environment variable is set to `mainnet`, indicating the desired Cardano network. It persists the node's state to the host using a named volume.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/nix/docker/README.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\ndocker run \\\n  -v data:/data \\\n  -e NETWORK=mainnet \\\n  ghcr.io/intersectmbo/cardano-node:dev\n```\n\n----------------------------------------\n\nTITLE: Cardano Node Tracing Configuration in JSON\nDESCRIPTION: This JSON code provides an example of a Cardano node tracing configuration, mirroring the YAML example. It defines trace options for all tracers, ChainDB traces, and specific ChainDB events. It configures backends, sets frequency limits, and defines a metrics prefix. It sets up Prometheus with IPv6 on port 1234.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/trace-dispatcher/doc/trace-dispatcher.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"UseTraceDispatcher\": true,\n  \"TraceOptions\": {\n    \"\": {\n      \"severity\": \"Notice\",\n      \"detail\": \"DNormal\",\n      \"backends\": [\n        \"Stdout MachineFormat\",\n        \"EKGBackend\",\n        \"Forwarder\",\n        \"PrometheusSimple :: 1234\"\n      ]\n    },\n    \"ChainDB\": {\n      \"severity\": \"Info\",\n      \"detail\": \"DDetailed\"\n    },\n    \"ChainDB.AddBlockEvent.AddedBlockToQueue\": {\n      \"maxFrequency\": 2.0\n    }\n  },\n  \"TraceOptionForwarder\": {\n    \"maxReconnectDelay\": 20\n  },\n  \"TraceOptionPeerFrequency\": 2000,\n  \"TraceOptionMetricsPrefix\": \"cardano.node.metrics.\"\n}\n```\n\n----------------------------------------\n\nTITLE: EKG Configuration\nDESCRIPTION: This snippet shows how to configure the EKG monitoring endpoint for a Cardano node.  The `hasEKG` key specifies the host and port where the EKG metrics are exposed.  This allows external tools to monitor the node's performance and health.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/cardano-tracer/docs/cardano-tracer.md#_snippet_15\n\nLANGUAGE: JSON\nCODE:\n```\n\"hasEKG\": {\n  \"epHost\": \"127.0.0.1\",\n  \"epPort\": 3100\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Plutus V2 Cost Model Parameters\nDESCRIPTION: This JSON snippet provides the cost model parameters specifically tailored for Plutus V2 within the Cardano node configuration. Similar to Plutus V1, it's a list of numerical values. These values define the computational costs associated with executing Plutus V2 scripts, influencing transaction fees and resource allocation within the Cardano network during smart contract execution. Accurate and optimized cost models are essential for maintaining network stability and preventing resource exhaustion.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/cardano-testnet/test/cardano-testnet-test/files/golden/queries/protocolParametersOut.txt#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n[\n            205665,\n            812,\n            1,\n            1,\n            1000,\n            571,\n            0,\n            1,\n            1000,\n            24177,\n            4,\n            1,\n            1000,\n            32,\n            117366,\n            10475,\n            4,\n            23000,\n            100,\n            23000,\n            100,\n            23000,\n            100,\n            23000,\n            100,\n            23000,\n            100,\n            23000,\n            100,\n            100,\n            100,\n            23000,\n            100,\n            19537,\n            32,\n            175354,\n            32,\n            46417,\n            4,\n            221973,\n            511,\n            0,\n            1,\n            89141,\n            32,\n            497525,\n            14068,\n            4,\n            2,\n            196500,\n            453240,\n            220,\n            0,\n            1,\n            1,\n            1000,\n            28662,\n            4,\n            2,\n            245000,\n            216773,\n            62,\n            1,\n            1060367,\n            12586,\n            1,\n            208512,\n            421,\n            1,\n            187000,\n            1000,\n            52998,\n            1,\n            80436,\n            32,\n            43249,\n            32,\n            1000,\n            32,\n            80556,\n            1,\n            57667,\n            4,\n            1000,\n            10,\n            197145,\n            156,\n            1,\n            197145,\n            156,\n            1,\n            204924,\n            473,\n            1,\n            208896,\n            511,\n            1,\n            52467,\n            32,\n            64832,\n            32,\n            65493,\n            32,\n            22558,\n            32,\n            16563,\n            32,\n            76511,\n            32,\n            196500,\n            453240,\n            220,\n            0,\n            1,\n            1,\n            69522,\n            11687,\n            0,\n            1,\n            60091,\n            32,\n            196500,\n            453240,\n            220,\n            0,\n            1,\n            1,\n            196500,\n            453240,\n            220,\n            0,\n            1,\n            1,\n            1159724,\n            392670,\n            0,\n            2,\n            806990,\n            30482,\n            4,\n            1927926,\n            82523,\n            4,\n            265318,\n            0,\n            4,\n            0,\n            85931,\n            32,\n            205665,\n            812,\n            1,\n            1,\n            41182,\n            32,\n            212342,\n            32,\n            31220,\n            32,\n            32696,\n            32,\n            43357,\n            32,\n            32247,\n            32,\n            38314,\n            32,\n            35892428,\n            10,\n            9462713,\n            1021,\n            10,\n            38887044,\n            32947,\n            10,\n            1292075,\n            24469,\n            74,\n            0,\n            1,\n            936157,\n            49601,\n            237,\n            0,\n            1\n        ]\n```\n\n----------------------------------------\n\nTITLE: Building Cardano Node Docker Image\nDESCRIPTION: This snippet demonstrates how to build and load the cardano-node OCI image using Nix and Docker.  It first builds the image using `nix build` and then loads it into the Docker engine using `docker load`. The `result` file is the output of the `nix build` command.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/nix/docker/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n# Build and load the cardano-node oci image\nnix build .#dockerImage/node\ndocker load -i result\n```\n\n----------------------------------------\n\nTITLE: Running Cardano Node on Mainnet (Windows)\nDESCRIPTION: This snippet shows the command to run the cardano-node executable on the mainnet network on Windows. It requires specific file paths for topology, database, configuration, and the socket path to be provided as arguments.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/README.rst#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncardano-node.exe run --topology ./configuration/cardano/mainnet-topology.json --database-path ./state --port 3001 --config ./configuration/cardano/mainnet-config.yaml  --socket-path \\\\.\\pipe\\cardano-node\n```\n\n----------------------------------------\n\nTITLE: Cardano Node Manual Test: Shutdown SIGTERM with NETWORK\nDESCRIPTION: Runs a Cardano node in mainnet as a detached process, checking for graceful shutdown using SIGTERM.  Removes any pre-existing container named 'relay', then starts a new one and tails the logs.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/nix/docker/README.md#_snippet_15\n\nLANGUAGE: Shell\nCODE:\n```\ndocker rm -f relay\ndocker run --detach \\\n  --name=relay \\\n  -p 3001:3001 \\\n  -e NETWORK=mainnet \\\n  -v node-data:/data \\\n  ghcr.io/intersectmbo/cardano-node:dev\n\ndocker logs -f relay\n```\n\n----------------------------------------\n\nTITLE: Get Public Key and Address from Signing Key\nDESCRIPTION: These commands extract the public key and address from a signing key. The `signing-key-public` command shows the public key and hash, while `signing-key-address` calculates the address using the network magic.  They require the cardano-cli and the signing key file.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/README.rst#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\ncabal v2-run -- cardano-cli byron key signing-key-public --byron-formats --secret key0.sk\n```\n\nLANGUAGE: console\nCODE:\n```\ncabal v2-run -- cardano-cli signing-key-address --byron-formats --secret key0.pbft --testnet-magic 42\n```\n\n----------------------------------------\n\nTITLE: Defining Plutus V1 Cost Model Parameters\nDESCRIPTION: This code snippet defines the cost model parameters for Plutus V1 within the Cardano node's configuration. It specifies a list of numerical values that represent the execution costs for various Plutus operations. These values directly influence the fees required to execute Plutus scripts on the Cardano blockchain, ensuring resource usage is appropriately priced and limits are enforced.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/cardano-testnet/test/cardano-testnet-test/files/golden/queries/protocolParametersOut.txt#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n[\n            205665,\n            812,\n            1,\n            1,\n            1000,\n            571,\n            0,\n            1,\n            1000,\n            24177,\n            4,\n            1,\n            1000,\n            32,\n            117366,\n            10475,\n            4,\n            23000,\n            100,\n            23000,\n            100,\n            23000,\n            100,\n            23000,\n            100,\n            23000,\n            100,\n            23000,\n            100,\n            100,\n            100,\n            23000,\n            100,\n            19537,\n            32,\n            175354,\n            32,\n            46417,\n            4,\n            221973,\n            511,\n            0,\n            1,\n            89141,\n            32,\n            497525,\n            14068,\n            4,\n            2,\n            196500,\n            453240,\n            220,\n            0,\n            1,\n            1,\n            1000,\n            28662,\n            4,\n            2,\n            245000,\n            216773,\n            62,\n            1,\n            1060367,\n            12586,\n            1,\n            208512,\n            421,\n            1,\n            187000,\n            1000,\n            52998,\n            1,\n            80436,\n            32,\n            43249,\n            32,\n            1000,\n            32,\n            80556,\n            1,\n            57667,\n            4,\n            1000,\n            10,\n            197145,\n            156,\n            1,\n            197145,\n            156,\n            1,\n            204924,\n            473,\n            1,\n            208896,\n            511,\n            1,\n            52467,\n            32,\n            64832,\n            32,\n            65493,\n            32,\n            22558,\n            32,\n            16563,\n            32,\n            76511,\n            32,\n            196500,\n            453240,\n            220,\n            0,\n            1,\n            1,\n            69522,\n            11687,\n            0,\n            1,\n            60091,\n            32,\n            196500,\n            453240,\n            220,\n            0,\n            1,\n            1,\n            196500,\n            453240,\n            220,\n            0,\n            1,\n            1,\n            806990,\n            30482,\n            4,\n            1927926,\n            82523,\n            4,\n            265318,\n            0,\n            4,\n            0,\n            85931,\n            32,\n            205665,\n            812,\n            1,\n            1,\n            41182,\n            32,\n            212342,\n            32,\n            31220,\n            32,\n            32696,\n            32,\n            43357,\n            32,\n            32247,\n            32,\n            38314,\n            32,\n            57996947,\n            18975,\n            10\n        ]\n```\n\n----------------------------------------\n\nTITLE: Running GHCID for cardano-node development\nDESCRIPTION: This command starts GHCID, a tool for interactive Haskell development, within the context of the cardano-node project. It uses cabal to load the cardano-node executable and reorders goals for improved performance. This setup facilitates faster feedback loops during development.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/CONTRIBUTING.rst#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nghcid -c \"cabal repl exe:cardano-node --reorder-goals\"\n```\n\n----------------------------------------\n\nTITLE: Starting Alonzo cluster directly using mkfiles.sh (Bash)\nDESCRIPTION: This bash command starts a Cardano cluster directly in the Alonzo era from epoch 0, using the `mkfiles.sh` script located in the `byron-to-alonzo` directory. This skips the Byron era and initiates the cluster in the Alonzo era. It requires a functional bash environment and the `mkfiles.sh` script.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/scripts/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/byron-to-alonzo/mkfiles.sh alonzo\n```\n\n----------------------------------------\n\nTITLE: Extracting CBOR binary from signed transaction\nDESCRIPTION: This command extracts the CBOR (Concise Binary Object Representation) binary data from the signed transaction file (`tx.signed`) using `jq` and `xxd`.  The `jq` command extracts the `cborHex` field, and `xxd` converts the hexadecimal representation to binary, writing it to `tx.signed.cbor`.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/cardano-submit-api/README.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nplayground $ xxd -r -p <<< $(jq .cborHex tx.signed) > tx.signed.cbor\n```\n\n----------------------------------------\n\nTITLE: Validating CBOR files with cardano-cli\nDESCRIPTION: This command uses the cardano-cli tool to validate CBOR (Concise Binary Object Representation) files, specifically Byron-era blocks. It verifies the structure and content of the CBOR file against the expected format for Byron blocks, ensuring data integrity. The ``--filepath`` option specifies the path to the CBOR file, and ``--byron-block 21600`` specifies the type of CBOR content and an example block height.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/CONTRIBUTING.rst#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ncabal exec cardano-cli -- validate-cbor --byron-block 21600 --filepath CBOREncodedByronBlockFile\n```\n\n----------------------------------------\n\nTITLE: Updating Hackage Package Index State with Nix\nDESCRIPTION: This command updates the Hackage package index state within the Nix environment.  This is necessary when a required package version was released after the currently pinned `index-state` in `cabal.project`. It ensures that the Nix environment uses the updated package index, allowing access to newer package versions.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/CONTRIBUTING.rst#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nnix flake lock --update-input hackageNix\n```\n\n----------------------------------------\n\nTITLE: Verifying transaction success\nDESCRIPTION: This command is used to check the status of submitted transaction.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/cardano-submit-api/README.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n[cardano-tx-submit:Info:26] [2021-03-11 03:32:35.13 UTC] txSubmitPost: successfully submitted transaction 8a3d63d4d95f669e\n```\n\n----------------------------------------\n\nTITLE: Defining Plutus V3 Cost Model Parameters\nDESCRIPTION: This code defines the cost model for Plutus V3. It contains numerical values that dictate the computational cost for Plutus V3 script execution within the Cardano node. These parameters directly affect transaction fees for Plutus V3 smart contracts, and are critical for optimizing network performance.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/cardano-testnet/test/cardano-testnet-test/files/golden/queries/protocolParametersOut.txt#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n[\n            100788,\n            420,\n            1,\n            1,\n            1000,\n            173,\n            0,\n            1,\n            1000,\n            59957,\n            4,\n            1,\n            11183,\n            32,\n            201305,\n            8356,\n            4,\n            16000,\n            100,\n            16000,\n            100,\n            16000,\n            100,\n            16000,\n            100,\n            16000,\n            100,\n            16000,\n            100,\n            100,\n            100,\n            16000,\n            100,\n            94375,\n            32,\n            132994,\n            32,\n            61462,\n            4,\n            72010,\n            178,\n            0,\n            1,\n            22151,\n            32,\n            91189,\n            769,\n            4,\n            2,\n            85848,\n            123203,\n            7305,\n            -900,\n            1716,\n            549,\n            57,\n            85848,\n            0,\n            1,\n            1,\n            1000,\n            42921,\n            4,\n            2,\n            24548,\n            29498,\n            38,\n            1,\n            898148,\n            27279,\n            1,\n            51775,\n            558,\n            1,\n            39184,\n            1000,\n            60594,\n            1,\n            141895,\n            32,\n            83150,\n            32,\n            15299,\n            32,\n            76049,\n            1,\n            13169,\n            4,\n            22100,\n            10,\n            28999,\n            74,\n            1,\n            28999,\n            74,\n            1,\n            43285,\n            552,\n            1,\n            44749,\n            541,\n            1,\n            33852,\n            32,\n            68246,\n            32,\n            72362,\n            32,\n            7243,\n            32,\n            7391,\n            32,\n            11546,\n            32,\n            85848,\n            123203,\n            7305,\n            -900,\n            1716,\n            549,\n            57,\n            85848,\n            0,\n            1,\n            90434,\n            519,\n            0,\n            1,\n            74433,\n            32,\n            85848,\n            123203,\n            7305,\n            -900,\n            1716,\n            549,\n            57,\n            85848,\n            0,\n            1,\n            1,\n            85848,\n            123203,\n            7305,\n            -900,\n            1716,\n            549,\n            57,\n            85848,\n            0,\n            1,\n            955506,\n            213312,\n            0,\n            2,\n            270652,\n            22588,\n            4,\n            1457325,\n            64566,\n            4,\n            20467,\n            1,\n            4,\n            0,\n            141992,\n            32,\n            100788,\n            420,\n            1,\n            1,\n            81663,\n            32,\n            59498,\n            32,\n            20142,\n            32,\n            24588,\n            32,\n            20744,\n            32,\n            25933,\n            32,\n            24623,\n            32,\n            43053543,\n            10,\n            53384111,\n            14333,\n            10,\n            43574283,\n            26308,\n            10,\n            16000,\n            100,\n            16000,\n            100,\n            962335,\n            18,\n            2780678,\n            6,\n            442008,\n            1,\n            52538055,\n            3756,\n            18,\n            267929,\n            18,\n            76433006,\n            8868,\n            18,\n            52948122\n        ]\n```\n\n----------------------------------------\n\nTITLE: Metrics Help Configuration (JSON)\nDESCRIPTION: This snippet shows how to configure metric help annotations using a JSON file. The `metricsHelp` key in the Cardano node configuration can point to a JSON file containing a key-value map of metric names to help text. This allows for providing descriptive information about the metrics exposed by the node.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/cardano-tracer/docs/cardano-tracer.md#_snippet_13\n\nLANGUAGE: JSON\nCODE:\n```\n\"metricsHelp\": \"path/to/key-value-map.json\"\n```\n\n----------------------------------------\n\nTITLE: Fold-Based Aggregation in Haskell Tracing\nDESCRIPTION: This code snippet demonstrates how to use fold-based aggregation in Haskell tracing. It includes functions `foldTraceM` and `foldCondTraceM` for folding over trace messages, as well as a `Folding` type and an `unfold` function for typechecking. An example shows how to aggregate measurement values and their sum using a `Stats` data type.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/trace-dispatcher/doc/trace-dispatcher.md#_snippet_10\n\nLANGUAGE: Haskell\nCODE:\n```\n-- Folds the monadic cata function with acc over a.\n-- Uses an MVar to store the state\nfoldTraceM :: forall a acc m . (MonadUnliftIO m)\n  => (acc -> LoggingContext -> a -> m acc)\n  -> acc\n  -> Trace m (Folding a acc)\n  -> m (Trace m a)\n\n-- Like foldTraceM, but filters the trace by a predicate.\nfoldCondTraceM :: forall a acc m . (MonadUnliftIO m)\n  => (acc -> LoggingContext -> a -> m acc)\n  -> acc\n  -> (a -> Bool)\n  -> Trace m (Folding a acc)\n  -> m (Trace m a)\n\nnewtype Folding a acc = Folding acc\n\nunfold :: Folding a b -> b\nunfold (Folding b) = b\n\ndata Stats = Stats {\n    sMeasure :: Double,\n    sSum     :: Double\n    }\n\ncalculateS :: MonadIO m => Stats -> LoggingContext -> Double -> m Stats\ncalculateS Stats{..} _ val = pure $ Stats val (sSum + val)\n```\n\nLANGUAGE: Haskell\nCODE:\n```\naggregationTracer <- foldTraceM calculateS (Stats 0.0 0.0) exampleTracer\ntraceWith 1.1 aggregationTracer -- measure: 1.1 sum: 1.1\ntraceWith 2.0 aggregationTracer -- measure: 2.0 sum: 3.1\n```\n\n----------------------------------------\n\nTITLE: Tagging Cardano Node Docker Image\nDESCRIPTION: This script builds, loads, and tags the cardano-node Docker image. It tags the image with `dev` and, if available, a Git tag corresponding to the build commit hash. It requires `nix`, `docker`, and `git` to be installed.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/nix/docker/README.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nnix build .#dockerImage/node \\\n  && RES=$(docker load -i result) \\\n  && LOADED=\"${RES##Loaded image: }\" \\\n  && GITHASH=$(git log -n1 --pretty='%H') \\\n  && docker tag \"$LOADED\" ghcr.io/intersectmbo/cardano-node:dev \\\n  && docker rmi \"$LOADED\"\n\nGITTAG=$(git describe --exact-match --tags $GITHASH)\nif [ $? -eq 0 ]; then\n  echo \"Current tag: $GITTAG\"\n  docker tag ghcr.io/intersectmbo/cardano-node:dev \"ghcr.io/intersectmbo/cardano-node:$GITTAG\"\nfi\n```\n\n----------------------------------------\n\nTITLE: Listing Workbench Profiles\nDESCRIPTION: This command lists available workbench profiles. Workbench profiles define configurations for local Cardano cluster setups, allowing developers to quickly spin up and test various network configurations. `make ps` internally calls `cardano-profile` with the necessary arguments to list profile names.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/CONTRIBUTING.rst#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\nmake ps\n```\n\n----------------------------------------\n\nTITLE: Installing cardano-submit-api using cabal\nDESCRIPTION: This command installs the `cardano-submit-api` using `cabal`. The `--overwrite-policy=always` flag ensures that any existing versions are overwritten.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/cardano-submit-api/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncardano-node $ cabal install cardano-submit-api --overwrite-policy=always\n```\n\n----------------------------------------\n\nTITLE: Searching with Hoogle\nDESCRIPTION: This command uses Hoogle to search for Haskell functions and types within the local database of package dependencies in the workbench shell.  It provides a way to find definitions and usages of types like `TxId`.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/CONTRIBUTING.rst#_snippet_11\n\nLANGUAGE: console\nCODE:\n```\n[nix-shell:~/cardano-node]$ hoogle search TxId\n```\n\n----------------------------------------\n\nTITLE: Installing cardano-cli using cabal\nDESCRIPTION: This command installs the `cardano-cli` using `cabal`. The `--overwrite-policy=always` flag ensures that any existing versions are overwritten.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/cardano-submit-api/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncardano-node $ cabal install cardano-cli --overwrite-policy=always\n```\n\n----------------------------------------\n\nTITLE: Prometheus Configuration\nDESCRIPTION: This example demonstrates how to configure Prometheus integration with cardano-tracer by specifying the host and port where Prometheus metrics are exposed. This allows monitoring of cardano-node performance metrics through Prometheus.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/cardano-tracer/docs/cardano-tracer.md#_snippet_10\n\nLANGUAGE: JSON\nCODE:\n```\n\"hasPrometheus\": {\n  \"epHost\": \"127.0.0.1\",\n  \"epPort\": 3200\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting a Tracer - Haskell\nDESCRIPTION: This function documents tracers and returns a DocTracer result. It leverages the MetaTrace typeclass to generate documentation from the trace. It takes a Trace IO a (where a is a MetaTrace) as input and produces a DocTracer within the IO monad.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/trace-dispatcher/doc/trace-dispatcher.md#_snippet_14\n\nLANGUAGE: haskell\nCODE:\n```\ndocumentTracer :: forall a.\n     MetaTrace a\n  => Trace IO a\n  -> IO DocTracer\n```\n\n----------------------------------------\n\nTITLE: Metrics Help Configuration (Inline)\nDESCRIPTION: This snippet demonstrates how to configure metric help annotations directly within the configuration file. The `metricsHelp` key can contain a JSON object representing a key-value map of metric names to their corresponding help text. This eliminates the need for a separate JSON file.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/cardano-tracer/docs/cardano-tracer.md#_snippet_14\n\nLANGUAGE: JSON\nCODE:\n```\n\"metricsHelp\": {\n  \"Mem.resident\": \"Kernel-reported RSS (resident set size)\",\n  \"RTS.gcMajorNum\": \"Major GCs\",\n  \"nodeCannotForge\": \"How many times was this node unable to forge [a block]?\"\n}\n```\n\n----------------------------------------\n\nTITLE: Privacy Annotations in Haskell Tracing\nDESCRIPTION: This code snippet illustrates how to use privacy annotations in the Haskell tracing system. It defines the `Privacy` data type and functions `withPrivacy`, `privately`, and `filterTraceByPrivacy` for setting and filtering based on privacy.  Traces marked as `Confidential` are intended solely for stdout.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/trace-dispatcher/doc/trace-dispatcher.md#_snippet_8\n\nLANGUAGE: Haskell\nCODE:\n```\ndata Privacy\n    = Confidential | Public\n\n-- Sets privacy for the messages in this trace based on the MetaTrace class\nwithPrivacy :: forall m a. (Monad m, MetaTrace a) => Trace m a -> Trace m a\n\n-- Sets privacy Confidential for the messages in this trace\nprivately :: Monad m => Trace m a -> Trace m a\n\n-- Only processes messages further with a privacy greater than the given one\nfilterTraceByPrivacy :: (Monad m) =>\n     Maybe Privacy\n  -> Trace m a\n  -> Trace m a\n```\n\n----------------------------------------\n\nTITLE: Building Cardano Submit API Docker Image\nDESCRIPTION: This snippet demonstrates building and loading the cardano-submit-api OCI image. It utilizes `nix build` to create the image and `docker load` to import it into the Docker engine.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/nix/docker/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n# Build and load the cardano-submit-api oci image\nnix build .#dockerImage/submit-api\ndocker load -i result\n```\n\n----------------------------------------\n\nTITLE: Standard Tracer Definition - Haskell\nDESCRIPTION: Defines the `standardTracer` which is the basic standard output tracer. It can handle both regular and confidential traces. It's crucial to create only one standard tracer in an application to avoid exceptions. The MonadIO constraint allows it to be used in monads capable of performing IO actions.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/trace-dispatcher/doc/trace-dispatcher.md#_snippet_18\n\nLANGUAGE: haskell\nCODE:\n```\nstandardTracer :: forall m. (MonadIO m)\n  => m (Trace m FormattedMessage)\n```\n\n----------------------------------------\n\nTITLE: Configuring submit-api-config.yaml\nDESCRIPTION: This set of commands configures the `submit-api-config.yaml` file by first converting a given configuration file using `yj`, and then appending additional settings to the file, specifically disabling log metrics and enabling logging.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/cardano-submit-api/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nplayground $ cat <configuration-yaml-file> | yj -jy > submit-api-config.yaml\nplayground $ cat >> submit-api-config.yaml <<EOF\nEnableLogMetrics: False\nEnableLogging: True\nEOF\n```\n\n----------------------------------------\n\nTITLE: Running Trace Documentation Command - Haskell\nDESCRIPTION: Defines the function to execute the tracer documentation generation. The function `runTraceDocumentationCmd` takes a `TraceDocumentationCmd` as input and performs the I/O operation to generate the documentation based on the provided configuration.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/trace-dispatcher/doc/trace-dispatcher.md#_snippet_13\n\nLANGUAGE: haskell\nCODE:\n```\nrunTraceDocumentationCmd\n  :: TraceDocumentationCmd\n  -> IO ()\n```\n\n----------------------------------------\n\nTITLE: Define MetaTrace typeclass in Haskell\nDESCRIPTION: This Haskell code defines the `MetaTrace` typeclass, which provides meta-information for trace messages, including namespace, severity, privacy, detail level, documentation, and metrics documentation. It also includes a function to return all namespaces of this trace type. Default implementations are provided for `privacyFor` and `detailsFor`.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/trace-dispatcher/doc/trace-dispatcher.md#_snippet_2\n\nLANGUAGE: haskell\nCODE:\n```\nclass MetaTrace a where\n  namespaceFor  :: a -> Namespace a\n\n  severityFor   :: Namespace a -> Maybe a -> Maybe SeverityS\n\n  privacyFor    :: Namespace a -> Maybe a -> Maybe Privacy\n  privacyFor _ _ =  Just Public\n\n  detailsFor    :: Namespace a -> Maybe a -> Maybe DetailLevel\n  detailsFor _ _ =  Just DNormal\n\n  documentFor   :: Namespace a -> Maybe Text\n\n  metricsDocFor :: Namespace a -> [(Text, Text)]\n  metricsDocFor _ = []\n\n  allNamespaces :: [Namespace a]\n```\n\n----------------------------------------\n\nTITLE: Sharing Cardano Node Socket with Docker Volumes\nDESCRIPTION: These commands demonstrate how to share a Cardano node socket between two containers using Docker volumes. Both containers mount the same `node-ipc` volume, enabling cross-container communication. Each container sets the `NETWORK` environment variable to `mainnet`.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/nix/docker/README.md#_snippet_9\n\nLANGUAGE: Shell\nCODE:\n```\ndocker run -v node-ipc:/ipc -e NETWORK=mainnet ghcr.io/intersectmbo/cardano-node:dev\ndocker run -v node-ipc:/ipc -e NETWORK=mainnet ghcr.io/intersectmbo/some-node-client\n```\n\n----------------------------------------\n\nTITLE: Trace-Forward Tracer Definition - Haskell\nDESCRIPTION: Defines the `forwardTracer` which is a network sink designed for forwarding messages using typed protocols via TCP or local sockets. It exclusively handles public traces and should only be instantiated once per application. Requires a `ForwardSink TraceObject` to specify where to forward the traces.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/trace-dispatcher/doc/trace-dispatcher.md#_snippet_19\n\nLANGUAGE: haskell\nCODE:\n```\nforwardTracer :: forall m. (MonadIO m)\n  => ForwardSink TraceObject\n  -> Trace m FormattedMessage\n```\n\n----------------------------------------\n\nTITLE: EKG Tracer Definition - Haskell\nDESCRIPTION: Defines the `ekgTracer` which submits metrics to a local EKG store for further message forwarding. The MonadIO constraint ensures it can perform IO actions within the specified monad. Requires a `Metrics.Store` instance to interact with the EKG system.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/trace-dispatcher/doc/trace-dispatcher.md#_snippet_20\n\nLANGUAGE: haskell\nCODE:\n```\nekgTracer :: MonadIO m\n  => Metrics.Store\n  -> m (Trace m FormattedMessage)\n```\n\n----------------------------------------\n\nTITLE: Updating Haskell.nix dependency\nDESCRIPTION: This command updates the haskellNix flake, ensuring that the Cardano node build uses the latest version of the haskell.nix library. This update is crucial for incorporating the newest haskell package definitions and build configurations.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/nix/README.md#_snippet_0\n\nLANGUAGE: Nix\nCODE:\n```\nnix flake update haskellNix\n```\n\n----------------------------------------\n\nTITLE: Running Cardano Node in Custom Mode\nDESCRIPTION: This command runs the cardano-node Docker image in \"custom\" mode, mounting a local configuration directory. It specifies the configuration and topology files via command-line arguments passed to the `run` entrypoint. The `NETWORK` environment variable is unset to activate the custom mode.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/nix/docker/README.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\ndocker run \\\n  -v \"$PWD/config/cardano:/config\" \\\n  ghcr.io/intersectmbo/cardano-node:dev \\\n  run \\\n  --config /config/mainnet/config.json \\\n  --topology /config/mainnet/topology.json \\\n  --database-path /data/db\n```\n\n----------------------------------------\n\nTITLE: Dispatcher Routing Mechanism in Haskell Tracing\nDESCRIPTION: This code snippet presents the `routingTrace` function for dispatching trace messages to different tracers based on specific criteria.  It also shows how to route a single trace to multiple tracers simultaneously using the `<>` operator or `mconcat` for lists of tracers. The second argument to `routingTrace` must mappend all possible tracers of the first argument to one tracer.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/trace-dispatcher/doc/trace-dispatcher.md#_snippet_11\n\nLANGUAGE: Haskell\nCODE:\n```\n-- Allows routing to different tracers, based on the message being processed.\n-- The second argument must mappend all possible tracers of the first\n-- argument to one tracer. This is required for the configuration!\nroutingTrace :: forall m a. Monad m\n  => (a -> m (Trace m a))\n  -> Trace m a\n  -> Trace m a\n\nlet resTrace = routingTrace routingFunction (tracer1 <> tracer2)\n  where\n    routingFunction LO1 {} = tracer1\n    routingFunction LO2 {} = tracer2\n```\n\nLANGUAGE: Haskell\nCODE:\n```\n(<>) :: Monoid m => m -> m -> m\nmconcat :: Monoid m => [m] -> m\n\nlet resTrace = tracer1 <> tracer2\n```\n\n----------------------------------------\n\nTITLE: Updating iohk-nix dependency\nDESCRIPTION: This command updates the iohkNix flake, ensuring that the Cardano node build uses the latest version of the iohk-nix library. This update is necessary to incorporate updated utility dependencies and configurations provided by iohk-nix.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/nix/README.md#_snippet_1\n\nLANGUAGE: Nix\nCODE:\n```\nnix flake update iohkNix\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Trace Filtering Function in Haskell\nDESCRIPTION: This code snippet presents a Haskell function, `filterTrace`, that filters trace messages based on a selector function applied to the logging context and the message content.  The `LoggingContext` includes namespace, severity, privacy, and detail level. The provided example demonstrates filtering for `Public` messages based on the `lcPrivacy` field.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/trace-dispatcher/doc/trace-dispatcher.md#_snippet_7\n\nLANGUAGE: Haskell\nCODE:\n```\n-- Don't process further if the result of the selector function\n-- is False.\nfilterTrace :: (Monad m)\n  => ((LoggingContext, a) -> Bool)\n  -> Trace m a\n  -> Trace m a\n\n-- Context carried by any log message\ndata LoggingContext = LoggingContext {\n    lcNSInner   :: [Text]\n  , lcNSPrefix  :: [Text]\n  , lcSeverity  :: Maybe SeverityS\n  , lcPrivacy   :: Maybe Privacy\n  , lcDetails   :: Maybe DetailLevel\n  }\n\nfilterTrace (\\(c, _) -> case lcPrivacy c of\n                Just s  -> s == Public\n                Nothing -> False) -- privacy unknown, don't send out\n```\n\n----------------------------------------\n\nTITLE: Finding Leaf Dependencies with cabal-plan\nDESCRIPTION: This command uses cabal-plan to generate a dependency graph and highlight the leaf dependency set in red. This helps identify all packages that depend on the target package, which need to be included when modifying the dependency.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/CONTRIBUTING.rst#_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n[nix-shell:~/cardano-node]$ cabal-plan dot-png --revdep ouroboros-consensus-shelley\n```\n\n----------------------------------------\n\nTITLE: Defining Checkpoints JSON Format\nDESCRIPTION: This snippet illustrates the JSON format required for the `checkpoints.json` file. The file contains a 'checkpoints' array, where each element is a JSON object containing the block number (`blockNo`) and corresponding block hash (`hash`). This file is used to validate headers/blocks against known checkpoints during disaster recovery.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/cardano-node/ChangeLog.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"checkpoints\": [\n    {\"blockNo\": 3, \"hash\": \"52b7912de176ab76c233d6e08ccdece53ac1863c08cc59d3c5dec8d924d9b536\"}\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Running Cardano Node in Bash Shell\nDESCRIPTION: This command runs the cardano-node Docker image with an interactive bash shell. It uses the `--rm` flag to remove the container after it exits and `--entrypoint=bash` to override the default entrypoint.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/nix/docker/README.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ndocker run \\\n  --rm -it --entrypoint=bash \\\n  ghcr.io/intersectmbo/cardano-node:dev\n```\n\n----------------------------------------\n\nTITLE: Cardano CLI Help Example\nDESCRIPTION: This snippet demonstrates how to access help information for a specific subcommand within `cardano-cli`. It shows the command to get help for the `byron key migrate-delegate-key-from` subcommand, providing usage instructions and available options.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/README.rst#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\ncabal run -- cardano-cli -- byron key migrate-delegate-key-from --help\n```\n\nLANGUAGE: console\nCODE:\n```\ncardano-cli -- byron key migrate-delegate-key-from\n   Usage: cardano-cli byron key migrate-delegate-key-from --from FILEPATH\n                                                          --to FILEPATH\n     Migrate a delegate key from an older version.\n\n\n   Available options:\n     --byron-legacy-formats   Byron/cardano-sl formats and compatibility\n     --byron-formats          Byron era formats and compatibility\n     --from FILEPATH          Signing key file to migrate.\n     --to FILEPATH            Non-existent file to write the signing key to.\n     -h,--help                Show this help text\n```\n\n----------------------------------------\n\nTITLE: Migrate Delegate Key from Byron Legacy\nDESCRIPTION: This command migrates a delegate key from the Byron Legacy era to the new implementation.  It takes the old key file as input and creates a new converted key file as output.  It depends on the cardano-cli and cabal build environment.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/README.rst#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\ncabal v2-run -- cardano-cli byron key migrate-delegate-key-from\n        --from key0.sk --to key0Converted.sk\n```\n\n----------------------------------------\n\nTITLE: Building Cardano Tracer with Cabal\nDESCRIPTION: This snippet shows how to build and install `cardano-tracer` using `cabal`.  It requires Nix to be installed and the user to be in the Nix shell. The command builds the tracer and installs it to a specified directory.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/cardano-tracer/docs/cardano-tracer.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncabal build cardano-tracer && cabal install cardano-tracer --installdir=PATH_TO_DIR --overwrite-policy=always\n```\n\n----------------------------------------\n\nTITLE: Severity Filtering Combinators in Haskell\nDESCRIPTION: This code snippet shows Haskell functions for setting and filtering trace messages based on severity levels. `withSeverity` sets severity based on the `MetaTrace` class, `setSeverity` sets a specific severity, and `filterTraceBySeverity` filters messages below a given severity level. The outermost application of these combinators takes precedence.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/trace-dispatcher/doc/trace-dispatcher.md#_snippet_6\n\nLANGUAGE: Haskell\nCODE:\n```\n-- Sets severities for the messages in this trace based on the MetaTrace class\nwithSeverity :: forall m a. (Monad m, MetaTrace a) => Trace m a -> Trace m a\n\n-- Sets severity for the messages in this trace\nsetSeverity :: Monad m => SeverityS -> Trace m a -> Trace m a\n\n-- Filters out messages with a severity less than the given one\nfilterTraceBySeverity :: Monad m\n  => Maybe SeverityF\n  -> Trace m a\n  -> Trace m a\n```\n\n----------------------------------------\n\nTITLE: Querying Prometheus Metrics (JSON)\nDESCRIPTION: This example shows how to use `curl` to fetch Prometheus metrics from cardano-tracer in JSON format. The `jq` command is then used to pretty-print the JSON output for readability. This is useful for programmatically accessing and processing metrics data.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/cardano-tracer/docs/cardano-tracer.md#_snippet_11\n\nLANGUAGE: Shell\nCODE:\n```\n$ curl --silent -H \"Accept: application/json\" '127.0.0.1:3200' | jq '.'\n{\n  \"127.0.0.1:30000\": \"/12700130000\",\n  \"127.0.0.1:30001\": \"/12700130001\",\n  \"127.0.0.1:30002\": \"/12700130002\",\n  \"127.0.0.1:30003\": \"/12700130003\",\n  \"127.0.0.1:30004\": \"/12700130004\",\n  \"127.0.0.1:30005\": \"/12700130005\",\n  \"TxGenerator\": \"/txgenerator\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Prometheus Metrics (Text)\nDESCRIPTION: This example demonstrates fetching Prometheus metrics in the text-based exposition format using `curl`. The output is compliant with the OpenMetrics standard and includes `# TYPE` and `# HELP` annotations. This is the standard format used by Prometheus for scraping metrics.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/cardano-tracer/docs/cardano-tracer.md#_snippet_12\n\nLANGUAGE: Shell\nCODE:\n```\n$ curl '127.0.0.1:3200/12700130004'\n# TYPE Mem_resident_int gauge\n# HELP Mem_resident_int Kernel-reported RSS (resident set size)\nMem_resident_int 103792640\n# TYPE rts_gc_max_bytes_used gauge\nrts_gc_max_bytes_used 5811512\n# TYPE rts_gc_gc_cpu_ms counter\nrts_gc_gc_cpu_ms 50\n# TYPE RTS_gcMajorNum_int gauge\n# HELP RTS_gcMajorNum_int Major GCs\nRTS_gcMajorNum_int 4\n```\n\n----------------------------------------\n\nTITLE: Adding Checkpoints Configuration YAML\nDESCRIPTION: This snippet demonstrates the addition of two optional configuration entries, `CheckpointsFile` and `CheckpointsFileHash`, to the Cardano node configuration file. These entries specify the path to a JSON file containing checkpoint data and the hash of that file, respectively, for disaster recovery scenarios. Incorrect entries can lead to the node being stuck on adversarial chains.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/cardano-node/ChangeLog.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nCheckpointsFile: \"/path/to/checkpoints.json\"\nCheckpointsFileHash: \"a71c47262163947daaefb6aa1112acf34cb5ded6841d51e27dd642eb2de355a3\"\n```\n\n----------------------------------------\n\nTITLE: Entering Nix Development Shell\nDESCRIPTION: Enters the Nix development shell for the `cardano-node` project. This provides the correct environment and dependencies for building and working with the project.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/cardano-tracer/docs/cardano-tracer.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnix develop\n```\n\n----------------------------------------\n\nTITLE: Logging Node Startup Time - JSON Format\nDESCRIPTION: This code snippet shows the JSON format used for logging the node startup time. The log includes information like thread ID, severity, data with startup timestamp, location, environment, message, application, host, timestamp, namespace, and process ID.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/cardano-node/ChangeLog.md#_snippet_6\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"thread\": \"5\",\n    \"sev\": \"Notice\",\n    \"data\": {\n      \"startupTime\": \"1638866965\"\n    },\n    \"loc\": null,\n    \"env\": \"1.31.0:be123\",\n    \"msg\": \"\",\n    \"app\": [],\n    \"host\": \"waldorf\",\n    \"at\": \"2021-12-07T08:49:24.22Z\",\n    \"ns\": [\n      \"cardano.node.nodeconfig\"\n    ],\n    \"pid\": \"33952\"\n  }\n```\n\n----------------------------------------\n\nTITLE: SSH Forwarding Command\nDESCRIPTION: This command sets up SSH forwarding to connect a Cardano node on machine A to a `cardano-tracer` instance on machine D through a local socket. It creates a secure tunnel between the local socket on machine A and the local socket on machine D, requiring SSH credentials for machine D.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/cardano-tracer/docs/cardano-tracer.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nssh -nNT -L /tmp/forwarder.sock:/tmp/forwarder.sock -o \"ExitOnForwardFailure yes\" john@109.75.33.121\n```\n\n----------------------------------------\n\nTITLE: Create Byron Update Proposal\nDESCRIPTION: This command creates a Byron update proposal.  It requires various parameters such as protocol versions, application name, software version, system tag, installer hash, and file path. It uses the cardano-cli with the `governance create-update-proposal` subcommand.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/README.rst#_snippet_9\n\nLANGUAGE: console\nCODE:\n```\ncardano-cli -- byron governance\n              create-update-proposal\n                (--mainnet | --testnet-magic NATURAL)\n                --signing-key FILEPATH\n                --protocol-version-major WORD16\n                --protocol-version-minor WORD16\n                --protocol-version-alt WORD8\n                --application-name STRING\n                --software-version-num WORD32\n                --system-tag STRING\n                --installer-hash HASH\n                --filepath FILEPATH\n```\n\n----------------------------------------\n\nTITLE: EpochInfo that can fail to ledger - Haskell\nDESCRIPTION: This snippet adds functionality to provide an `EpochInfo` that is capable of failing when interacting with the ledger.  This likely adds error handling and robustness to epoch boundary calculations or transitions.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/cardano-node/ChangeLog.md#_snippet_3\n\nLANGUAGE: Haskell\nCODE:\n```\nProvide an `EpochInfo` that can fail to ledger. (#3770)\n```\n\n----------------------------------------\n\nTITLE: Local Cardano Tracer Configuration (ConnectTo)\nDESCRIPTION: This configuration allows cardano-tracer to initiate network connections with local cardano-nodes using their respective local sockets. The `networkMagic` field remains essential for network handshake. The logging section defines where and how logs are stored.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/cardano-tracer/docs/cardano-tracer.md#_snippet_6\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"networkMagic\": 764824073,\n  \"network\": {\n    \"tag\": \"ConnectTo\",\n    \"contents\": [\n      \"/tmp/cardano-node-1.sock\"\n      \"/tmp/cardano-node-2.sock\"\n      \"/tmp/cardano-node-3.sock\"\n    ]\n  },\n  \"logging\": [\n    {\n      \"logRoot\": \"/tmp/cardano-tracer-logs\",\n      \"logMode\": \"FileMode\",\n      \"logFormat\": \"ForMachine\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Cardano Node for Tracer\nDESCRIPTION: This JSON snippet shows the configuration settings to be added to the Cardano node's `config.json` file to enable tracing and forwarding of node information to `cardano-tracer`. It defines the trace options, including severity levels, detail levels, and backends for outputting trace data.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/cardano-tracer/docs/cardano-rtview.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\"UseTraceDispatcher\": true,\n\"TraceOptions\": {\n  \"\": {\n    \"severity\": \"Notice\",\n    \"detail\": \"DNormal\",\n    \"backends\": [\n      \"Stdout MachineFormat\",\n      \"EKGBackend\",\n      \"Forwarder\"\n    ]\n  }\n},\n\"TraceOptionPeerFrequency\": 2000,\n\"TraceOptionResourceFrequency\": 5000,\n\"TurnOnLogMetrics\": false,\n\"TraceOptionNodeName\": \"relay-1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Local Cardano Tracer Configuration (AcceptAt)\nDESCRIPTION: This configuration file demonstrates how to set up cardano-tracer in a local scenario where it accepts network connections from cardano-nodes via a local socket. The `networkMagic` field is crucial for network handshake. The logging section specifies the location and format of the log files.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/cardano-tracer/docs/cardano-tracer.md#_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"networkMagic\": 764824073,\n  \"network\": {\n    \"tag\": \"AcceptAt\",\n    \"contents\": \"/tmp/forwarder.sock\"\n  },\n  \"logging\": [\n    {\n      \"logRoot\": \"/tmp/cardano-tracer-logs\",\n      \"logMode\": \"FileMode\",\n      \"logFormat\": \"ForMachine\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: FallingEdge pragma - Haskell\nDESCRIPTION: This snippet adds a `COMPLETE` pragma for the `FallingEdge` pattern synonym.  The `COMPLETE` pragma is used in Haskell to indicate that all possible cases for a pattern match have been covered, allowing the compiler to generate more efficient code and avoid warnings about incomplete pattern matches.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/cardano-node/ChangeLog.md#_snippet_4\n\nLANGUAGE: Haskell\nCODE:\n```\nAdd `COMPLETE` pragma for `FallingEdge` pattern synonym (#3766)\n```\n\n----------------------------------------\n\nTITLE: Create and Submit Byron Update Proposal Vote\nDESCRIPTION: These commands create and submit a vote for a Byron update proposal.  They require the signing key, proposal file path, vote decision (yes/no), output file path, and network magic. They use the cardano-cli with the `governance create-proposal-vote` and `governance submit-proposal-vote` subcommands.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/README.rst#_snippet_11\n\nLANGUAGE: console\nCODE:\n```\ncabal exec cardano-cli -- byron governance create-proposal-vote\n                        (--mainnet | --testnet-magic NATURAL)\n                        --signing-key configuration/defaults/liveview/genesis/delegate-keys.000.key\n                        --proposal-filepath ProtocolUpdateProposalFile\n                        --vote-yes\n                        --output-filepath UpdateProposalVoteFile\n```\n\nLANGUAGE: console\nCODE:\n```\ncabal exec cardano-cli -- byron governance submit-proposal-vote\n                        (--mainnet | --testnet-magic NATURAL)\n                        --filepath UpdateProposalVoteFile\n```\n\n----------------------------------------\n\nTITLE: Running Cardano Submit API in Scripts Mode\nDESCRIPTION: This command runs the cardano-submit-api Docker image in \"scripts\" mode, using a named volume for IPC socket sharing. The `NETWORK` environment variable is set to `mainnet`, indicating the desired Cardano network. It expects `node.socket` to be present at `/ipc`.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/nix/docker/README.md#_snippet_12\n\nLANGUAGE: Shell\nCODE:\n```\ndocker run \\\n  -v node-ipc:/ipc \\\n  -e NETWORK=mainnet \\\n  ghcr.io/intersectmbo/cardano-submit-api:dev\n```\n\n----------------------------------------\n\nTITLE: YAML configuration for RTView in cardano-tracer\nDESCRIPTION: This YAML snippet configures the RTView settings within the `cardano-tracer` configuration file. It specifies the host and port on which the RTView web page will be accessible.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/cardano-tracer/docs/cardano-rtview.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nhasRTView:\n\tepHost: 127.0.0.1\n\tepPort: 3300\n```\n\n----------------------------------------\n\nTITLE: Define LogFormatting typeclass in Haskell\nDESCRIPTION: This Haskell code defines the `LogFormatting` typeclass, which governs the presentation of trace messages, including mapping traces to metrics and messages.  It defines methods for machine-readable representation (`forMachine`), human-readable representation (`forHuman`), and metrics representation (`asMetrics`).\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/trace-dispatcher/doc/trace-dispatcher.md#_snippet_0\n\nLANGUAGE: haskell\nCODE:\n```\nclass LogFormatting a where\n  -- Machine readable representation with varying details based on the detail level.\n  forMachine :: DetailLevel -> a -> Aeson.Object\n\n  -- Human readable representation.\n  forHuman :: a -> Text\n  forHuman _v = \"\"\n\n  -- Metrics representation.\n  asMetrics :: a -> [Metric]\n  asMetrics _v = []\n```\n\n----------------------------------------\n\nTITLE: Example Cardano Tracer Configuration\nDESCRIPTION: This is a minimal configuration file example for `cardano-tracer` in a distributed scenario. It defines the network magic, network connection parameters (using a local socket), and logging settings (log file path, mode, and format). It expects the cardano nodes to be connecting to /tmp/forwarder.sock.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/cardano-tracer/docs/cardano-tracer.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"networkMagic\": 764824073,\n  \"network\": {\n    \"tag\": \"AcceptAt\",\n    \"contents\": \"/tmp/forwarder.sock\"\n  },\n  \"logging\": [\n    {\n      \"logRoot\": \"/tmp/cardano-tracer-logs\",\n      \"logMode\": \"FileMode\",\n      \"logFormat\": \"ForMachine\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Pretty printing CBOR encoded files with cardano-cli\nDESCRIPTION: This command uses the cardano-cli tool to pretty-print CBOR (Concise Binary Object Representation) encoded files, which are commonly used to represent on-chain data like blocks, transactions, and update proposals. The ``--filepath`` option specifies the path to the CBOR encoded file to be processed.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/CONTRIBUTING.rst#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ncabal exec cardano-cli -- pretty-print-cbor --filepath CBOREncodedFile\n```\n\n----------------------------------------\n\nTITLE: Generating Release Changelog Links\nDESCRIPTION: This shell command demonstrates how to use the `generate-release-changelog-links.hs` script to generate a table of changelogs for a Cardano node release. It uses `nix` to build the `plan.json` file and then invokes the script with the path to the JSON file and a GitHub API token.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/RELEASE.md#_snippet_0\n\nLANGUAGE: shellsession\nCODE:\n```\n$ nix build .#project.x86_64-linux.plan-nix.json\n...\n$ scripts/generate-release-changelog-links.hs -- -o links.md result-json $GITHUB_API_TOKEN\n...\n```\n\n----------------------------------------\n\nTITLE: EKG Metrics Request\nDESCRIPTION: This snippet demonstrates how to retrieve EKG metrics for a specific node using `curl` and `jq`.  The `curl` command sends an HTTP GET request with the `Accept: application/json` header to the EKG endpoint, and `jq` pretty-prints the JSON response, providing human-readable output of the node's metrics.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/cardano-tracer/docs/cardano-tracer.md#_snippet_16\n\nLANGUAGE: Shell\nCODE:\n```\n$ curl --silent -H 'Accept: application/json' '127.0.0.1:3100/12700130004' | jq '.'\n```\n\n----------------------------------------\n\nTITLE: Executing Plutus script example (Bash)\nDESCRIPTION: This bash command executes a script to test the submission of transactions containing Plutus scripts. It specifically uses the `example-txin-locking-plutus-script.sh` script with the `guessinggame` argument, demonstrating transaction validation against a simple guessing game Plutus contract. This assumes a test cluster running in the Alonzo era.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/scripts/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ scripts/plutus/example-txin-locking-plutus-script.sh guessinggame\n```\n\n----------------------------------------\n\nTITLE: Running Cardano Submit API in Custom Mode\nDESCRIPTION: This command runs the cardano-submit-api Docker image in \"custom\" mode, providing a complete set of command-line arguments to the entrypoint. It mounts a configuration file and the node socket, specifying the network and socket path explicitly.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/nix/docker/README.md#_snippet_13\n\nLANGUAGE: Shell\nCODE:\n```\ndocker run \\\n  -v node-ipc:/ipc \\\n  -v $PWD/config.json:/config.json \\\n  ghcr.io/intersectmbo/cardano-submit-api:dev \\\n  --config /config.json \\\n  --mainnet \\\n  --socket-path /ipc/node.socket\n```\n\n----------------------------------------\n\nTITLE: Running Cardano CLI in Docker\nDESCRIPTION: This command runs the cardano-cli within the Docker container to query the tip of the mainnet chain.  It requires a shared volume (`node-ipc:/ipc`) to access the cardano-node's IPC socket. The `NETWORK` env variable is unset, enabling CLI mode.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/nix/docker/README.md#_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\ndocker run \\\n  -v node-ipc:/ipc \\\n  ghcr.io/intersectmbo/cardano-node:dev \\\n  cli \\\n  query tip \\\n  --mainnet\n```\n\n----------------------------------------\n\nTITLE: Define Metric data type in Haskell\nDESCRIPTION: This Haskell code defines the `Metric` data type, which represents metrics as either integers or doubles with named identifiers. It also supports counter metrics with optional limits, used for monitoring the running system.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/trace-dispatcher/doc/trace-dispatcher.md#_snippet_1\n\nLANGUAGE: haskell\nCODE:\n```\ndata Metric\n  -- Integer metric with a named identifier.\n    = IntM Text Integer\n  -- Double metric with a named identifier.\n    | DoubleM Text Double\n  -- Counter metric with a named identifier and an optional limit.\n    | CounterM Text (Maybe Int)\n  deriving (Show, Eq)\n```\n\n----------------------------------------\n\nTITLE: Multiple Logging Configuration Example\nDESCRIPTION: This example demonstrates configuring multiple logging outputs with different formats (JSON and text) for cardano-tracer. It defines two logging sections with distinct root directories and log formats to output logs in both machine-readable and human-readable formats.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/cardano-tracer/docs/cardano-tracer.md#_snippet_8\n\nLANGUAGE: JSON\nCODE:\n```\n\"logging\": [\n  {\n    \"logRoot\": \"/tmp/cardano-tracer-logs-json\",\n    \"logMode\": \"FileMode\",\n    \"logFormat\": \"ForMachine\"\n  },\n  {\n    \"logRoot\": \"/tmp/cardano-tracer-logs-text\",\n    \"logMode\": \"FileMode\",\n    \"logFormat\": \"ForHuman\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Generating Text from DocTracer - Haskell\nDESCRIPTION: This function takes a DocTracer and a TraceConfig as input, then transforms all DocTracer builders into a Text representation within the IO monad.  The TraceConfig allows customization of the generated text output, adjusting privacy and severity filtering.  Requires `DocTracer` and `TraceConfig` types to be defined.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/trace-dispatcher/doc/trace-dispatcher.md#_snippet_15\n\nLANGUAGE: haskell\nCODE:\n```\ndocuResultsToText :: DocTracer -> TraceConfig -> IO Text\n```\n\n----------------------------------------\n\nTITLE: Checking Node Trace Configuration - Haskell\nDESCRIPTION: The `checkNodeTraceConfiguration` function checks the trace configuration within the specified file for consistency. It performs checks on namespaces to ensure uniqueness, hierarchy, and consistency with defined functions. Returns a list of Text, where an empty list signifies a valid configuration.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/trace-dispatcher/doc/trace-dispatcher.md#_snippet_17\n\nLANGUAGE: haskell\nCODE:\n```\n-- | Check the configuration in the given file.\n-- Check the general structure of namespaces.\n-- An empty return list means everything is well.\ncheckNodeTraceConfiguration ::\n     FilePath -- path to a node configuration file\n  -> IO [Text]\n```\n\n----------------------------------------\n\nTITLE: Building cardano-node with Cabal\nDESCRIPTION: This command builds the cardano-node executable using Cabal, the Haskell build tool. This is typically done within a workbench or Nix shell where dependencies are managed, and it's a crucial step in verifying that the codebase compiles correctly and is ready for execution or testing.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/CONTRIBUTING.rst#_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\ncabal build exe:cardano-node\n```\n\n----------------------------------------\n\nTITLE: Limit Frequency function in Haskell\nDESCRIPTION: This Haskell function `limitFrequency` limits the observable frequency of individual trace messages.  It takes a messages-per-second threshold, a name for the limiter, a trace for the limiter's messages, and the trace subject to limitation, and returns the original trace.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/trace-dispatcher/doc/trace-dispatcher.md#_snippet_3\n\nLANGUAGE: haskell\nCODE:\n```\nlimitFrequency\n  :: forall a m . MonadUnliftIO m\n  => Double   -- messages per second\n  -> Text     -- name of this limiter\n  -> Trace m TraceDispatcherMessage -- the limiter's messages\n  -> Trace m a -- the trace subject to limitation\n  -> m (Trace m a) -- the original trace\n```\n\n----------------------------------------\n\nTITLE: Run Cardano Node Interactively with Docker\nDESCRIPTION: This command runs the Cardano node in an interactive terminal session. It maps port 3001 and mounts the 'node-data' volume to persist node data. The --rm flag ensures that the container is removed after it exits.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/nix/docker/README.md#_snippet_16\n\nLANGUAGE: Shell\nCODE:\n```\ndocker run --rm -it \\\n  -p 3001:3001 \\\n  -v node-data:/data \\\n  ghcr.io/intersectmbo/cardano-node:dev run\n```\n\n----------------------------------------\n\nTITLE: Cardano Node Manual Test: Shutdown SIGINT with NETWORK\nDESCRIPTION: Runs a Cardano node in mainnet, checking for graceful shutdown using SIGINT. Uses an interactive terminal and removes the container when it exits.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/nix/docker/README.md#_snippet_14\n\nLANGUAGE: Shell\nCODE:\n```\ndocker run --rm -it \\\n  -p 3001:3001 \\\n  -e NETWORK=mainnet \\\n  -v node-data:/data \\\n  ghcr.io/intersectmbo/cardano-node:dev\n```\n\n----------------------------------------\n\nTITLE: Example of Documenting Tracers - Haskell\nDESCRIPTION: This snippet shows an example of how to document tracers using `documentTracer` and `docuResultsToText`. It shows how to accumulate several DocTracers, combine them (using `++`) and then write the documentation to a file.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/trace-dispatcher/doc/trace-dispatcher.md#_snippet_16\n\nLANGUAGE: haskell\nCODE:\n```\n-- For example\n  b1 <- documentTracer traceForgeEventDocu [t1, t2]\n  b2 <- documentTracer .. ..\n  ..\n  bn <- documentTracer .. ..\n  writeFile \"Docu.md\" (docuResultsToText (b1 ++ b2 ++ ... ++ bn))\n```\n\n----------------------------------------\n\nTITLE: Creating a Docker Volume with Cardano Node Configuration\nDESCRIPTION: This command creates a new named Docker volume (`opt-cardano`) and initializes it with the contents of the `/opt/cardano` directory from the `ghcr.io/intersectmbo/cardano-node:dev` image. This allows you to explore the image's configuration files on the host.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/nix/docker/README.md#_snippet_11\n\nLANGUAGE: Shell\nCODE:\n```\ndocker run \\\n  -v opt-cardano:/opt/cardano \\\n  ghcr.io/intersectmbo/cardano-node:dev\n```\n\n----------------------------------------\n\nTITLE: Inspecting a Workbench Profile\nDESCRIPTION: This command allows inspecting a workbench profile configuration in a pretty-printed format. It uses `cabal run cardano-profile` to access the `cardano-profile` executable, which is responsible for managing and describing workbench profiles. The `by-name-pretty` argument specifies the profile to inspect and that it should be pretty-printed.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/CONTRIBUTING.rst#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\ncabal run cardano-profile -- by-name-pretty default-coay\n```\n\n----------------------------------------\n\nTITLE: Creating a DataPoint Tracer - Haskell\nDESCRIPTION: Defines the function `mkDataPointTracer` for creating a DataPoint tracer. It packages objects into `DataPoint` constructors and requires a `ToJSON` instance for the objects being traced. It takes a `Trace IO DataPoint` as input and returns a `Trace IO dp`.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/trace-dispatcher/doc/trace-dispatcher.md#_snippet_21\n\nLANGUAGE: haskell\nCODE:\n```\nmkDataPointTracer :: forall dp. (ToJSON dp, MetaTrace dp, NFData dp)\n  => Trace IO DataPoint\n  -> IO (Trace IO dp)\n```\n\n----------------------------------------\n\nTITLE: Updating Cardano Haskell Packages (CHaP) Index State with Nix\nDESCRIPTION: This command updates the Cardano Haskell Packages (CHaP) index state within the Nix environment.  This is necessary when adding or updating dependencies from the Cardano package repository. It ensures that the Nix environment uses the updated package index, allowing access to new packages from the Cardano package repository.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/CONTRIBUTING.rst#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nnix flake lock --update-input CHaP\n```\n\n----------------------------------------\n\nTITLE: Import getMonotonicNSec - Haskell\nDESCRIPTION: This snippet imports `getMonotonicNSec` from the base library instead of using Foreign Function Interface (FFI). This improves code maintainability and potentially performance by using a standard library function directly rather than relying on external C code.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/cardano-node/ChangeLog.md#_snippet_5\n\nLANGUAGE: Haskell\nCODE:\n```\nImport `getMonotonicNSec` from base rather than via FFI (#3735)\n```\n\n----------------------------------------\n\nTITLE: Localizing Packages in cabal.project\nDESCRIPTION: This snippet shows how to add relative paths of packages within the leaf dependency set to the `packages:` section of the `cabal.project` file.  This makes the packages local and allows Cabal to build these dependencies.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/CONTRIBUTING.rst#_snippet_10\n\nLANGUAGE: console\nCODE:\n```\npackages:\n    ...\n    trace-resources\n    trace-forward\n    ../ouroboros-network/ouroboros-consensus-shelley\n    ../ouroboros-network/ouroboros-consensus-cardano\n```\n\n----------------------------------------\n\nTITLE: VRF Signing Key File Permissions - Haskell\nDESCRIPTION: This snippet addresses an issue where the VRF signing key file was not created with the correct permissions. This is crucial for the security of the node's operation, ensuring that only authorized processes can access the key.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/cardano-node/ChangeLog.md#_snippet_2\n\nLANGUAGE: Haskell\nCODE:\n```\nCreate VRF signing key file with correct permissions (#1948)\n```\n\n----------------------------------------\n\nTITLE: Running Cardano Tracer\nDESCRIPTION: This snippet demonstrates how to run the `cardano-tracer` executable with a configuration file.  `PATH_TO_CONFIG` must point to a valid configuration file.  The executable must already be built and installed in a directory available in the shell's `PATH` or invoked with its full relative path.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/cardano-tracer/docs/cardano-tracer.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./cardano-tracer --config PATH_TO_CONFIG\n```\n\n----------------------------------------\n\nTITLE: Running cardano-submit-api\nDESCRIPTION: This command runs the `cardano-submit-api` with the specified configuration file, socket path, port, and network magic flag.  It requires a `submit-api-config.yaml` file, `node.socket` file (or symlink), and `magic.flag` file to be present in the `playground` directory.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/cardano-submit-api/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nplayground $ cardano-submit-api --config submit-api-config.yaml --socket-path node.socket --port 8090 $(cat magic.flag)\n```\n\n----------------------------------------\n\nTITLE: Create Genesis UTxO Expenditure Transaction\nDESCRIPTION: This bash script creates a transaction that spends a Genesis UTxO.  It relies on the `issue-genesis-utxo-expenditure.sh` script and requires a genesis file (which can be created using `genesis.sh`).  It generates a transaction file based on the specified configuration.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/README.rst#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/benchmarking/issue-genesis-utxo-expenditure.sh transaction_file\n```\n\n----------------------------------------\n\nTITLE: Entering the Workbench Shell\nDESCRIPTION: This command enters the workbench shell for a specified profile, optionally with a suffix to define its operating mode (e.g., using Nix binaries). The workbench shell provides a pre-configured environment for running a local Cardano cluster and executing tests.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/CONTRIBUTING.rst#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\nmake <PROFILE-NAME>\n```\n\nLANGUAGE: Shell\nCODE:\n```\nmake <PROFILE-NAME>-<SUFFIX>\n```\n\n----------------------------------------\n\nTITLE: Querying UTxO using cardano-cli\nDESCRIPTION: This command queries the UTxO (Unspent Transaction Output) for a given address using `cardano-cli`. It requires the `CARDANO_NODE_SOCKET_PATH` environment variable to be set and the `user-1-payment.addr` and `magic.flag` files to be present.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/cardano-submit-api/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nplayground $ CARDANO_NODE_SOCKET_PATH=node.socket cardano-cli query utxo --address $(cat user-1-payment.addr)  --testnet-magic $(cat magic.flag)\n```\n\n----------------------------------------\n\nTITLE: Submit Byron Update Proposal\nDESCRIPTION: This command submits a Byron update proposal. It requires the configuration file, network magic, and the file path to the update proposal.  It uses the cardano-cli with the `governance submit-update-proposal` subcommand.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/README.rst#_snippet_10\n\nLANGUAGE: console\nCODE:\n```\ncardano-cli -- byron governance\n           submit-update-proposal\n           --config configuration/defaults/mainnet/configuration.yaml\n           (--mainnet | --testnet-magic NATURAL)\n           --filepath my-update-proposal\n```\n\n----------------------------------------\n\nTITLE: Run GHCID for Cardano Node Development\nDESCRIPTION: This command starts GHCID for developing the cardano-node. It configures GHCID to use cabal repl with the `exe:cardano-node` target and reorder goals. Setting the development flag and -Wwarn in cabal.project is suggested.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/README.rst#_snippet_12\n\nLANGUAGE: console\nCODE:\n```\nghcid -c \"cabal repl exe:cardano-node --reorder-goals\"\n```\n\n----------------------------------------\n\nTITLE: Running SSH Forwarding Script\nDESCRIPTION: This command executes the `run.sh` script with a password and forwarding mode (Responder or Initiator) as arguments. The password is used for SSH authentication, and the forwarding mode determines which component acts as the server and which acts as the client.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/cardano-tracer/demo/ssh/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./run.sh PASS FMODE\n```\n\n----------------------------------------\n\nTITLE: Cardano CLI General Usage\nDESCRIPTION: This snippet provides the general usage synopsis for the `cardano-cli` command. It indicates that the CLI is divided into era-based, Byron-specific, and miscellaneous commands. The actual command invocation depends on the environment.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/README.rst#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nUsage: cardano-cli (Era based commands | Byron specific commands | Miscellaneous commands)\n```\n\n----------------------------------------\n\nTITLE: Calculating remaining balance using bc\nDESCRIPTION: This command calculates the remaining balance after deducting specified amounts (1000000 and 180000) from the initial balance using the `bc` (basic calculator) command. It assumes the `balance` variable is already set.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/cardano-submit-api/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nplayground $ remaining=$(echo \"$balance - 1000000 - 180000\" | bc)\n```\n\n----------------------------------------\n\nTITLE: Pulling Cardano Node Docker Image\nDESCRIPTION: This snippet demonstrates how to pull the latest version of the cardano-node Docker image from the specified container registry.  It uses the `docker pull` command and specifies the image name and tag.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/README.rst#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\ndocker pull ghcr.io/intersectmbo/cardano-node:8.9.1\n```\n\n----------------------------------------\n\nTITLE: Running Cardano Node with Tracer Socket\nDESCRIPTION: This command demonstrates how to run a Cardano node and connect it to the `cardano-tracer` using the `--tracer-socket-path-connect` option.  This allows the node to forward tracing information to the tracer for monitoring.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/cardano-tracer/docs/cardano-rtview.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ ./cardano-node run --tracer-socket-path-connect /tmp/forwarder.sock\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for Changelog Script\nDESCRIPTION: This shell command shows how to display help information for the `generate-release-changelog-links.hs` script. It uses the `--help` flag to output usage instructions and available options.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/RELEASE.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nscripts/generate-release-changelog-links.hs -- --help\n```\n\n----------------------------------------\n\nTITLE: Transaction Generator Command Usage\nDESCRIPTION: This snippet shows the usage and available commands for the tx-generator tool. The available commands include running the tx-generator with CLI arguments, demonstrating era transition, and running a JSON script.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/bench/tx-generator/README.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nUsage: tx-generator COMMAND\n\nAvailable commands:\n  cliArguments             tx-generator with CLI arguments\n  eraTransition            tx-generator demo era transition\n  json                     tx-generator run JsonScript\n```\n\n----------------------------------------\n\nTITLE: JSON configuration for RTView in cardano-tracer\nDESCRIPTION: This JSON snippet configures the RTView settings within the `cardano-tracer` configuration file. It specifies the host and port on which the RTView web page will be accessible.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/cardano-tracer/docs/cardano-rtview.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n\"hasRTView\": {\n\t\"epHost\": \"127.0.0.1\",\n\t\"epPort\": 3300\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Running cardano-tracer with configuration file\nDESCRIPTION: This code snippet shows how to run the `cardano-tracer` application with a specified configuration file. The `-c` flag is used to indicate the path to the configuration file.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/cardano-tracer/docs/cardano-rtview.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ ./cardano-tracer -c minimal-example-rtview.json\n```\n\n----------------------------------------\n\nTITLE: Defining Trace Documentation Command - Haskell\nDESCRIPTION: Defines the data structure for the TraceDocumentationCmd used to specify the configuration and output files for generating tracer documentation. It includes file paths for both the node config file and the output documentation file. This is used by the `runTraceDocumentationCmd`.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/trace-dispatcher/doc/trace-dispatcher.md#_snippet_12\n\nLANGUAGE: haskell\nCODE:\n```\ndata TraceDocumentationCmd\n  = TraceDocumentationCmd\n    { tdcConfigFile :: FilePath -- file path to a node config file\n    , tdcOutput     :: FilePath -- file path to output the documentation\n    }\n```\n\n----------------------------------------\n\nTITLE: Detail Level Enumeration in Haskell\nDESCRIPTION: This code defines the `DetailLevel` enumeration in Haskell, providing a means to control the amount of detail presented in trace outputs. The levels range from `DMinimal` to `DMaximum`.\nSOURCE: https://github.com/emurgo/cardano-node/blob/master/trace-dispatcher/doc/trace-dispatcher.md#_snippet_9\n\nLANGUAGE: Haskell\nCODE:\n```\ndata DetailLevel = DMinimal | DNormal | DDetailed | DMaximum\n```"
  }
]