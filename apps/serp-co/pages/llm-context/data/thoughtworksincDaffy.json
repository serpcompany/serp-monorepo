[
  {
    "owner": "thoughtworksinc",
    "repo": "daffy",
    "content": "TITLE: Validating DataFrame Columns with Daffy Decorators in Python\nDESCRIPTION: This snippet demonstrates how to use Daffy decorators to validate input and output DataFrame columns. It defines a function that analyzes housing data, specifying expected input and output columns.\nSOURCE: https://github.com/thoughtworksinc/daffy/blob/master/README.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@df_in(columns=[\"price\", \"bedrooms\", \"location\"])\n@df_out(columns=[\"price_per_room\", \"price_category\"])\ndef analyze_housing(houses_df):\n    # Transform raw housing data into price analysis\n    return analyzed_df\n```\n\n----------------------------------------\n\nTITLE: Quick Start Example: Applying Discount with Daffy Decorators in Python\nDESCRIPTION: This example shows how to use Daffy decorators to validate input and output DataFrame columns in a function that applies a discount to car prices. It demonstrates the @df_in and @df_out decorators.\nSOURCE: https://github.com/thoughtworksinc/daffy/blob/master/README.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom daffy import df_in, df_out\n\n@df_in(columns=[\"Brand\", \"Price\"])  # Validate input DataFrame columns\n@df_out(columns=[\"Brand\", \"Price\", \"Discount\"])  # Validate output DataFrame columns\ndef apply_discount(cars_df):\n    cars_df = cars_df.copy()\n    cars_df[\"Discount\"] = cars_df[\"Price\"] * 0.1\n    return cars_df\n```\n\n----------------------------------------\n\nTITLE: Validating DataFrame Input Columns in Python\nDESCRIPTION: Using the @df_in decorator to validate that an input DataFrame contains specific columns.\nSOURCE: https://github.com/thoughtworksinc/daffy/blob/master/docs/usage.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@df_in(columns=[\"Brand\", \"Price\"])\ndef process_cars(car_df):\n    # do stuff with cars\n```\n\n----------------------------------------\n\nTITLE: Combining Input and Output DataFrame Validation in Python\nDESCRIPTION: Using both @df_in and @df_out decorators on the same function to validate both input and output DataFrames.\nSOURCE: https://github.com/thoughtworksinc/daffy/blob/master/docs/usage.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@df_in(columns=[\"Brand\", \"Price\"])\n@df_out(columns=[\"Brand\", \"Price\"])\ndef filter_cars(car_df):\n    # filter some cars\n    return filtered_cars_df\n```\n\n----------------------------------------\n\nTITLE: Validating DataFrame Column Data Types in Python\nDESCRIPTION: Using a dictionary instead of a list to specify both column names and their expected data types for validation.\nSOURCE: https://github.com/thoughtworksinc/daffy/blob/master/docs/usage.md#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ncolumns={\"Brand\": \"object\", \"Price\": \"int64\"}\n```\n\n----------------------------------------\n\nTITLE: Validating DataFrame Output Columns in Python\nDESCRIPTION: Using the @df_out decorator to validate that the function returns a DataFrame with specific columns.\nSOURCE: https://github.com/thoughtworksinc/daffy/blob/master/docs/usage.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@df_out(columns=[\"Brand\", \"Price\"])\ndef get_all_cars():\n    # get those cars\n    return all_cars_df\n```\n\n----------------------------------------\n\nTITLE: Validating Multiple DataFrame Arguments in Python\nDESCRIPTION: Using multiple @df_in decorators to validate different DataFrame arguments in the same function.\nSOURCE: https://github.com/thoughtworksinc/daffy/blob/master/docs/usage.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@df_in(name=\"car_df\", columns=[\"Brand\", \"Price\"])\n@df_in(name=\"brand_df\", columns=[\"Brand\", \"BrandName\"])\ndef process_cars(car_df, brand_df):\n    # do stuff with cars\n```\n\n----------------------------------------\n\nTITLE: Enabling Strict Mode for DataFrame Validation in Python\nDESCRIPTION: Using the strict parameter to ensure the DataFrame contains only the specified columns and no others.\nSOURCE: https://github.com/thoughtworksinc/daffy/blob/master/docs/usage.md#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n@df_in(columns=[\"Brand\"], strict=True)\ndef process_cars(car_df):\n    # do stuff with cars\n```\n\n----------------------------------------\n\nTITLE: Using Regex for Column Pattern Matching in Python\nDESCRIPTION: Using regex patterns with DAFFY to match column names that follow a specific pattern, useful for dynamic column names.\nSOURCE: https://github.com/thoughtworksinc/daffy/blob/master/docs/usage.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n@df_in(columns=[\"Brand\", \"r/Price_\\d+/\"])\ndef process_data(df):\n    # This will accept DataFrames with columns like \"Brand\", \"Price_1\", \"Price_2\", etc.\n    ...\n```\n\n----------------------------------------\n\nTITLE: Combining Regex Patterns with Data Type Validation in Python\nDESCRIPTION: Using regex patterns in dictionaries to validate both column names and data types for columns matching a pattern.\nSOURCE: https://github.com/thoughtworksinc/daffy/blob/master/docs/usage.md#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n@df_in(columns={\"Brand\": \"object\", \"r/Price_\\d+/\": \"int64\"})\ndef process_data(df):\n    # This will check that all columns matching \"Price_\\d+\" have int64 dtype\n    ...\n```\n\n----------------------------------------\n\nTITLE: Project-wide Configuration with pyproject.toml\nDESCRIPTION: Setting default configuration for DAFFY in pyproject.toml to apply project-wide settings like strict mode.\nSOURCE: https://github.com/thoughtworksinc/daffy/blob/master/docs/usage.md#2025-04-22_snippet_11\n\nLANGUAGE: toml\nCODE:\n```\n[tool.daffy]\nstrict = true\n```\n\n----------------------------------------\n\nTITLE: Overriding Project-wide Configuration in Python\nDESCRIPTION: Using decorator parameters to override project-wide configuration settings for specific functions.\nSOURCE: https://github.com/thoughtworksinc/daffy/blob/master/docs/usage.md#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n# Uses strict=true from project config\n@df_in(columns=[\"Brand\"])\n# Explicitly disable strict mode for this decorator\n@df_out(columns=[\"Brand\", \"FilteredPrice\"], strict=False)\ndef filter_cars(car_df):\n    # filter some cars\n    return filtered_cars_df\n```\n\n----------------------------------------\n\nTITLE: Importing DAFFY Decorators in Python\nDESCRIPTION: Basic import statement for DAFFY decorators that enable DataFrame validation functionality.\nSOURCE: https://github.com/thoughtworksinc/daffy/blob/master/docs/usage.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom daffy import df_in, df_out\n```\n\n----------------------------------------\n\nTITLE: Validating Named DataFrame Argument in Python\nDESCRIPTION: Using @df_in decorator with the name parameter to specify which function argument should be validated when a function has multiple parameters.\nSOURCE: https://github.com/thoughtworksinc/daffy/blob/master/docs/usage.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@df_in(name=\"car_df\", columns=[\"Brand\", \"Price\"])\ndef process_cars(year, style, car_df):\n    # do stuff with cars\n```\n\n----------------------------------------\n\nTITLE: Setting up Daffy development environment with Poetry and PyTest\nDESCRIPTION: Instructions for cloning the repository, installing dependencies with Poetry, and running tests with PyTest. This setup is essential for developers to start working on the Daffy project.\nSOURCE: https://github.com/thoughtworksinc/daffy/blob/master/docs/development.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npoetry install\npoetry shell\npytest\n```\n\n----------------------------------------\n\nTITLE: Installing Daffy using pip in Shell\nDESCRIPTION: This command installs the Daffy package using pip, the Python package installer.\nSOURCE: https://github.com/thoughtworksinc/daffy/blob/master/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npip install daffy\n```\n\n----------------------------------------\n\nTITLE: DataFrame Assertion Error Example in Python\nDESCRIPTION: Example of the assertion error message that DAFFY produces when a required column is missing from a DataFrame.\nSOURCE: https://github.com/thoughtworksinc/daffy/blob/master/docs/usage.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nAssertionError(\"Column Price missing from DataFrame. Got columns: ['Brand']\")\n```\n\n----------------------------------------\n\nTITLE: Running PyTest for Daffy project\nDESCRIPTION: Command to run tests using PyTest within the Poetry environment. This is used to execute all tests in the project to ensure functionality.\nSOURCE: https://github.com/thoughtworksinc/daffy/blob/master/docs/development.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npoetry run pytest\n```\n\n----------------------------------------\n\nTITLE: Generating test coverage report for Daffy\nDESCRIPTION: Command to run PyTest with coverage reporting for the Daffy package. This provides insights into the test coverage of the project.\nSOURCE: https://github.com/thoughtworksinc/daffy/blob/master/docs/development.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npoetry run pytest --cov=daffy\n```"
  }
]