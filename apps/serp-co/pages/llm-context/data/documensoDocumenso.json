[
  {
    "owner": "documenso",
    "repo": "documenso",
    "content": "TITLE: Create Document API Request Payload\nDESCRIPTION: Defines the JSON structure required to create a new document via the POST /api/v1/documents endpoint. Includes fields for metadata, recipients, authentication options, and form values to configure document signing and tracking.\nSOURCE: https://github.com/documenso/documenso/blob/main/apps/documentation/pages/developers/public-api/reference.mdx#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"title\": \"string\",\n  \"externalId\": \"string\",\n  \"recipients\": [\n    {\n      \"name\": \"string\",\n      \"email\": \"user@example.com\",\n      \"role\": \"SIGNER\",\n      \"signingOrder\": 0\n    }\n  ],\n  \"meta\": {\n    \"subject\": \"string\",\n    \"message\": \"string\",\n    \"timezone\": \"Etc/UTC\",\n    \"dateFormat\": \"yyyy-MM-dd hh:mm a\",\n    \"redirectUrl\": \"string\",\n    \"signingOrder\": \"PARALLEL\"\n  },\n  \"authOptions\": {\n    \"globalAccessAuth\": \"ACCOUNT\",\n    \"globalActionAuth\": \"ACCOUNT\"\n  },\n  \"formValues\": {\n    \"additionalProp1\": \"string\",\n    \"additionalProp2\": \"string\",\n    \"additionalProp3\": \"string\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Request Payload: Generate Documenso Document\nDESCRIPTION: This JSON object represents the minimum payload required to generate a document from a template. It must contain the `recipients` array with details for each person who will interact with the document, ideally mapping to template placeholders.\nSOURCE: https://github.com/documenso/documenso/blob/main/apps/documentation/pages/developers/public-api/reference.mdx#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"recipients\": [\n    {\n      \"id\": 0,\n      \"name\": \"Ash Drew\",\n      \"email\": \"ashdrew@email.com\",\n      \"signingOrder\": 0\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Constructing a Home Page Layout with Next.js Image and Link Components using JSX\nDESCRIPTION: This snippet demonstrates JSX markup that composes the home page within the Wrapper component. It includes a fixed, full-screen background image with styling to manage dark mode appearance and scaling. Following are text elements establishing the main site title and description using utility classes for responsive typography. The layout includes a grid container with two interactive cards, each wrapped in Next.js Link components for client-side navigation. The cards contain a title, descriptive text, and an image illustrating the card theme. Images use the Next.js Image component for optimized delivery, and styling is heavily reliant on Tailwind CSS classes along with custom utility functions from the Documenso UI library. No explicit data fetching or state management is present; this is purely a presentational component for the landing page.\nSOURCE: https://github.com/documenso/documenso/blob/main/apps/documentation/pages/index.mdx#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<Wrapper>\n  <div\n    className=\"fixed inset-0 -z-10 bg-center -mt-[15vh] h-full scale-125 object-cover dark:contrast-[70%] dark:invert dark:sepia md:scale-150 lg:scale-[175%] opacity-40 dark:opacity-20\"\n    style={{\n      backgroundImage: `url('${backgroundPattern.src}')`,\n    }}\n  />\n  <div className=\"flex flex-col items-center mb-16\">\n    <span className=\"text-center text-4xl font-bold leading-tight tracking-tight md:text-[48px] lg:text-[64px]\">Document signing, finally open source</span>\n    <span className=\"text-muted-foreground mx-auto mt-4 max-w-2xl text-center leading-normal tracking-tight\">Documenso aims to be the world's most trusted document-signing tool. Join us in creating the next generation of open trust infrastructure.</span>\n\n  </div>\n\n  <div className=\"mt-6 grid grid-cols-1 md:grid-cols-2 gap-8 md:mt-8\">\n    <Link href=\"/users\">\n      <Card className=\"col-span-2 lg:col-span-1 h-full dark:bg-black\\/10 dark:border dark:border-stone-800\">\n        <CardContent className=\"grid grid-cols-1 gap-8 p-6 max-h-[460px]\">\n          <span className=\"text-foreground\\/80 leading-relaxed\">\n            <strong className=\"block text-2xl font-normal mb-2 tracking-tight\">Learn</strong>\n            Learn how to get started with your account and leverage our advanced features to level up your productivity.\n          </span>\n          <div className=\"flex items-center justify-center p-8 flex-grow\">\n            <Image\n              src={cardBeautifulFigure}\n              alt=\"its fast\"\n              className=\"w-full max-w-xs dark:contrast-[70%] dark:hue-rotate-180 dark:invert\"\n            />\n          </div>\n        </CardContent>\n      </Card>\n    </Link>\n\n    <Link href='/developers'>\n      <Card className=\"col-span-2 lg:col-span-1 h-full dark:bg-black\\/10 dark:border dark:border-stone-800\">\n        <CardContent className=\"grid grid-cols-1 gap-8 p-6 max-h-[460px]\">\n          <span className=\"text-foreground\\/80 leading-relaxed\">\n            <strong className=\"block text-2xl font-normal mb-2 tracking-tight\">Build</strong>\n            Everything you need to set up your local development environment.\n            Use our API and utilize webhooks for seamless integration.\n          </span>\n          <div className=\"flex items-center justify-center p-8 flex-grow\">\n            <Image\n              src={cardConnectionsFigure}\n              alt=\"its fast\"\n              className=\"w-full max-w-sm dark:contrast-[70%] dark:hue-rotate-180 dark:invert\"\n            />\n          </div>\n        </CardContent>\n      </Card>\n    </Link>\n\n  </div>\n</Wrapper>\n```\n\n----------------------------------------\n\nTITLE: JSON Request Payload: Add Recipient to Documenso Document\nDESCRIPTION: This JSON payload is used to add a recipient to an existing document via a POST request. It requires the recipient's name, email, role, and signing order. The `authOptions` property is available for Enterprise accounts.\nSOURCE: https://github.com/documenso/documenso/blob/main/apps/documentation/pages/developers/public-api/reference.mdx#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Ash Drew\",\n  \"email\": \"ashdrew@email.com\",\n  \"role\": \"SIGNER\",\n  \"signingOrder\": 0\n}\n```\n\n----------------------------------------\n\nTITLE: Making authenticated API requests with Documenso API using cURL in Bash\nDESCRIPTION: This snippet demonstrates how to perform an authenticated GET request to the Documenso API using cURL. It requires an API key to be included in the Authorization header formatted as 'Authorization: api_xxxxxxxxxxxxxxxx'. The example queries documents with pagination parameters and expects a JSON response containing document details. Dependencies include having bash shell and cURL installed with network access.\nSOURCE: https://github.com/documenso/documenso/blob/main/apps/documentation/pages/developers/public-api/authentication.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location 'https://app.documenso.com/api/v1/documents?page=1&perPage=1' \\\n--header 'Authorization: api_xxxxxxxxxxxxxxxx'\n```\n\n----------------------------------------\n\nTITLE: JSON Example Request Payload: Add Fields to Documenso Document\nDESCRIPTION: This is an example JSON payload demonstrating how to add multiple specific fields (Signature and Text) to a document for a given recipient ID. It includes positional information and configuration for the text field via `fieldMeta`.\nSOURCE: https://github.com/documenso/documenso/blob/main/apps/documentation/pages/developers/public-api/reference.mdx#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"recipientId\": 55,\n    \"type\": \"SIGNATURE\",\n    \"pageNumber\": 1,\n    \"pageX\": 50,\n    \"pageY\": 20,\n    \"pageWidth\": 25,\n    \"pageHeight\": 5\n  },\n  {\n    \"recipientId\": 55,\n    \"type\": \"TEXT\",\n    \"pageNumber\": 1,\n    \"pageX\": 20,\n    \"pageY\": 50,\n    \"pageWidth\": 30,\n    \"pageHeight\": 7.5,\n    \"fieldMeta\": {\n      \"label\": \"Address\",\n      \"placeholder\": \"32 New York Street, 41241\",\n      \"required\": true,\n      \"readOnly\": false,\n      \"type\": \"text\",\n      \"text\": \"32 New York Street, 41241\",\n      \"characterLimit\": 40\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Styling EmbedDirectTemplate with CSS in JSX\nDESCRIPTION: Demonstrates how to apply custom CSS styles to the embedded Documenso component using the `css` prop. This allows developers to adjust the appearance of the embedded signing experience to match their application's design. It uses styled-components in JSX to modify border-radius and box-shadow.\nSOURCE: https://github.com/documenso/documenso/blob/main/apps/documentation/pages/developers/embedding/index.mdx#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<EmbedDirectTemplate\n  token={token}\n  css={`\n    .documenso-embed {\n      border-radius: 8px;\n      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n    }\n  `}\n/>\n```\n\n----------------------------------------\n\nTITLE: JSON Request Payload: Prefill Fields During Documenso Generation (V1)\nDESCRIPTION: This JSON payload is used with the V1 API to generate a document from a template and simultaneously pre-fill specific fields. It includes the document title, recipient details, and an array of `prefillFields` with their corresponding IDs, types, and values.\nSOURCE: https://github.com/documenso/documenso/blob/main/apps/documentation/pages/developers/public-api/reference.mdx#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"title\": \"my-document.pdf\",\n  \"recipients\": [\n    {\n      \"id\": 3,\n      \"name\": \"Example User\",\n      \"email\": \"example@documenso.com\",\n      \"signingOrder\": 1,\n      \"role\": \"SIGNER\"\n    }\n  ],\n  \"prefillFields\": [\n    {\n      \"id\": 21,\n      \"type\": \"text\",\n      \"label\": \"my-label\",\n      \"placeholder\": \"my-placeholder\",\n      \"value\": \"my-value\"\n    },\n    {\n      \"id\": 22,\n      \"type\": \"number\",\n      \"label\": \"my-label\",\n      \"placeholder\": \"my-placeholder\",\n      \"value\": \"123\"\n    },\n    {\n      \"id\": 23,\n      \"type\": \"checkbox\",\n      \"label\": \"my-label\",\n      \"placeholder\": \"my-placeholder\",\n      \"value\": [\"option-1\", \"option-2\"]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Request Payload: Prefill Fields During Documenso Generation (V2 Beta)\nDESCRIPTION: This JSON payload is used with the V2 Beta API to generate a document from a template and simultaneously pre-fill specific fields. It requires the `templateId`, recipient details, and an array of `prefillFields` with their corresponding IDs, types, and values.\nSOURCE: https://github.com/documenso/documenso/blob/main/apps/documentation/pages/developers/public-api/reference.mdx#_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"templateId\": 111,\n  \"recipients\": [\n    {\n      \"id\": 3,\n      \"name\": \"Example User\",\n      \"email\": \"example@documenso.com\",\n      \"signingOrder\": 1,\n      \"role\": \"SIGNER\"\n    }\n  ],\n  \"prefillFields\": [\n    {\n      \"id\": 21,\n      \"type\": \"text\",\n      \"label\": \"my-label\",\n      \"placeholder\": \"my-placeholder\",\n      \"value\": \"my-value\"\n    },\n    {\n      \"id\": 22,\n      \"type\": \"number\",\n      \"label\": \"my-label\",\n      \"placeholder\": \"my-placeholder\",\n      \"value\": \"123\"\n    },\n    {\n      \"id\": 23,\n      \"type\": \"checkbox\",\n      \"label\": \"my-label\",\n      \"placeholder\": \"my-placeholder\",\n      \"value\": [\"option-1\", \"option-2\"]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Response: Generate Documenso Document\nDESCRIPTION: This JSON object is returned upon successful generation of a document from a template. It includes the newly created `documentId` and details about the recipient(s), such as `recipientId`, `token`, and `signingUrl`.\nSOURCE: https://github.com/documenso/documenso/blob/main/apps/documentation/pages/developers/public-api/reference.mdx#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"documentId\": 999,\n  \"recipients\": [\n    {\n      \"recipientId\": 0,\n      \"name\": \"Ash Drew\",\n      \"email\": \"ashdrew@email.com\",\n      \"token\": \"<signing-token>\",\n      \"role\": \"SIGNER\",\n      \"signingOrder\": null,\n      \"signingUrl\": \"https://app.documenso.com/sign/<signing-token>\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Sample JSON response from Documenso Documents API\nDESCRIPTION: This JSON snippet shows the typical structure of the response returned from the Documenso API when querying documents. It contains an array of document objects with properties like id, userId, title, status, and timestamps, along with a totalPages count. This illustrates the expected output format after making an authenticated API request. There are no dependencies, it serves purely as a response example.\nSOURCE: https://github.com/documenso/documenso/blob/main/apps/documentation/pages/developers/public-api/authentication.mdx#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"documents\": [\n    {\n      \"id\": 11,\n      \"userId\": 2,\n      \"teamId\": null,\n      \"title\": \"documenso\",\n      \"status\": \"PENDING\",\n      \"documentDataId\": \"ab2ecm1npk11rt5sp398waf7h\",\n      \"createdAt\": \"2024-04-25T11:05:18.420Z\",\n      \"updatedAt\": \"2024-04-25T11:05:36.328Z\",\n      \"completedAt\": null\n    }\n  ],\n  \"totalPages\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Styling EmbedDirectTemplate with CSS Variables in JSX\nDESCRIPTION: Illustrates how to customize the embedded Documenso component using CSS variables via the `cssVars` prop. This approach enables fine-grained control over colors, spacing, and other visual aspects. It defines `primary`, `background`, and `radius` variables.\nSOURCE: https://github.com/documenso/documenso/blob/main/apps/documentation/pages/developers/embedding/index.mdx#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<EmbedDirectTemplate\n  token={token}\n  cssVars={{\n    primary: '#0000FF',\n    background: '#F5F5F5',\n    radius: '8px',\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Building Documenso Project\nDESCRIPTION: This code snippet demonstrates how to build the Documenso project using npm. This command is crucial for ensuring that all changes compile correctly and are ready for production deployment. It should be executed before pushing code or creating pull requests.\nSOURCE: https://github.com/documenso/documenso/blob/main/apps/documentation/pages/developers/contributing/index.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Embedding Document using EmbedDirectTemplate in React\nDESCRIPTION: This code snippet demonstrates embedding a document using the `EmbedDirectTemplate` component from the Documenso React SDK. It requires the `@documenso/embed-react` package to be installed. The `token` prop is essential and represents the document's unique identifier.  The component renders a signing experience within your React application, allowing users to sign documents.  Replace 'YOUR_TOKEN_HERE' with the actual document token.\nSOURCE: https://github.com/documenso/documenso/blob/main/apps/documentation/pages/developers/embedding/react.mdx#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\nimport { EmbedDirectTemplate } from '@documenso/embed-react';\n\nconst MyEmbeddingComponent = () => {\n  const token = 'YOUR_TOKEN_HERE'; // Replace with the actual token\n\n  return <EmbedDirectTemplate token={token} />;\n};\n\n```\n\n----------------------------------------\n\nTITLE: JSON Example: Configure Advanced Field Meta\nDESCRIPTION: This JSON snippet shows the required `fieldMeta` structure for advanced field types (text, checkbox, radio, number, select) when adding them to a document. The `type` property within `fieldMeta` must always be included, even if other properties are not set.\nSOURCE: https://github.com/documenso/documenso/blob/main/apps/documentation/pages/developers/public-api/reference.mdx#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n...\n\"fieldMeta\": {\n  \"type\": \"text\",\n}\n...\n```\n\n----------------------------------------\n\nTITLE: Starting Documenso Application\nDESCRIPTION: Command to start the Documenso application after setup is complete. This will launch the server on localhost:3000 by default.\nSOURCE: https://github.com/documenso/documenso/blob/main/apps/documentation/pages/developers/self-hosting/how-to.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Pulling Documenso Docker Image from GitHub Container Registry\nDESCRIPTION: Alternative command to pull the Documenso Docker image from GitHub Container Registry instead of DockerHub.\nSOURCE: https://github.com/documenso/documenso/blob/main/apps/documentation/pages/developers/self-hosting/how-to.mdx#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull ghcr.io/documenso/documenso\n```\n\n----------------------------------------\n\nTITLE: Pulling Documenso Docker Image from DockerHub\nDESCRIPTION: Command to pull the Documenso Docker image from DockerHub repository. This is used for the standalone Docker container deployment option.\nSOURCE: https://github.com/documenso/documenso/blob/main/apps/documentation/pages/developers/self-hosting/how-to.mdx#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull documenso/documenso\n```\n\n----------------------------------------\n\nTITLE: Applying Custom CSS Variables to Embedded Template\nDESCRIPTION: Demonstrates defining custom CSS variables as a JavaScript object and passing them to the EmbedDirectTemplate component. Examples show usage in React/Preact (JSX), Vue, Svelte, and Solid, allowing dynamic styling of the embedded signing experience.\nSOURCE: https://github.com/documenso/documenso/blob/main/apps/documentation/pages/developers/embedding/css-variables.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst cssVars = {\n  // Colors\n  background: '#ffffff',\n  foreground: '#000000',\n  primary: '#0000ff',\n  primaryForeground: '#ffffff',\n  accent: '#4f46e5',\n  destructive: '#ef4444',\n\n  // Spacing\n  radius: '0.5rem'\n};\n\n// React/Preact\n<EmbedDirectTemplate\n  token={token}\n  cssVars={cssVars}\n/>\n\n// Vue\n<EmbedDirectTemplate\n  :token=\"token\"\n  :cssVars=\"cssVars\"\n/>\n\n// Svelte\n<EmbedDirectTemplate\n  {token}\n  cssVars={cssVars}\n/>\n\n// Solid\n<EmbedDirectTemplate\n  token={token}\n  cssVars={cssVars}\n/>\n```\n\n----------------------------------------\n\nTITLE: Pulling Documenso Docker Image from Remote Repositories in Shell\nDESCRIPTION: These shell commands allow users to retrieve the official Documenso Docker image either from Docker Hub or GitHub Package Registry. Pulling the image is a prerequisite for running the standalone container deployment method where users manage their own database and SMTP services.\nSOURCE: https://github.com/documenso/documenso/blob/main/docker/README.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ndocker pull documenso/documenso\n```\n\nLANGUAGE: Shell\nCODE:\n```\ndocker pull ghcr.io/documenso/documenso\n```\n\n----------------------------------------\n\nTITLE: Running Documenso Standalone Docker Container with Environment Variables and Volume Mount in Shell\nDESCRIPTION: This shell command executes the Documenso Docker container in detached mode exposing port 3000 and providing all necessary environment variables for authentication, encryption, database connection, SMTP configuration, and key file access via volume mount. The placeholders must be replaced with actual secrets and service URLs. This setup requires an external database and SMTP server managed by the user.\nSOURCE: https://github.com/documenso/documenso/blob/main/docker/README.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\ndocker run -d \\n  -p 3000:3000 \\n  -e NEXTAUTH_SECRET=\"<your-nextauth-secret>\"\\n  -e NEXT_PRIVATE_ENCRYPTION_KEY=\"<your-next-private-encryption-key>\"\\n  -e NEXT_PRIVATE_ENCRYPTION_SECONDARY_KEY=\"<your-next-private-encryption-secondary-key>\"\\n  -e NEXT_PUBLIC_WEBAPP_URL=\"<your-next-public-webapp-url>\"\\n  -e NEXT_PRIVATE_INTERNAL_WEBAPP_URL=\"http://localhost:3000\"\\n  -e NEXT_PRIVATE_DATABASE_URL=\"<your-next-private-database-url>\"\\n  -e NEXT_PRIVATE_DIRECT_DATABASE_URL=\"<your-next-private-database-url>\"\\n  -e NEXT_PRIVATE_SMTP_TRANSPORT=\"<your-next-private-smtp-transport>\"\\n  -e NEXT_PRIVATE_SMTP_FROM_NAME=\"<your-next-private-smtp-from-name>\"\\n  -e NEXT_PRIVATE_SMTP_FROM_ADDRESS=\"<your-next-private-smtp-from-address>\"\\n  -v /path/to/your/keyfile.p12:/opt/documenso/cert.p12\\n  documenso/documenso\n```\n\n----------------------------------------\n\nTITLE: Setting up Documenso as a systemd Service\nDESCRIPTION: A systemd service configuration file for running Documenso as a background service. The example sets up Documenso to run on port 3500, with automatic restarts and proper service dependencies.\nSOURCE: https://github.com/documenso/documenso/blob/main/apps/documentation/pages/developers/self-hosting/how-to.mdx#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n[Unit]\nDescription=documenso\nAfter=network.target\n\n[Service]\nEnvironment=PATH=/path/to/your/node/binaries\nType=simple\nUser=www-data\nWorkingDirectory=/var/www/documenso/apps/web\nExecStart=/usr/bin/next start -p 3500\nTimeoutSec=15\nRestart=always\n\n[Install]\nWantedBy=multi-user.target\n```\n\n----------------------------------------\n\nTITLE: Creating Database Schema - npm/Prisma - bash\nDESCRIPTION: Executes the database migration command using npm, which typically leverages Prisma to create or update the database schema based on defined migrations. This command applies any pending migrations to the development database configured via environment variables. Requires Node.js, npm, and Prisma setup.\nSOURCE: https://github.com/documenso/documenso/blob/main/apps/documentation/pages/developers/local-development/manual.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run prisma:migrate-dev\n```\n\n----------------------------------------\n\nTITLE: Defining Environment Variables - .env Config - bash\nDESCRIPTION: Lists the essential environment variables that must be defined in a `.env` file located in the project's root directory. These variables configure application secrets, URLs, database connections, and SMTP settings. Each variable needs to be assigned an appropriate value for the local setup.\nSOURCE: https://github.com/documenso/documenso/blob/main/apps/documentation/pages/developers/local-development/manual.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nNEXTAUTH_SECRET\nNEXT_PUBLIC_WEBAPP_URL\nNEXT_PRIVATE_DATABASE_URL\nNEXT_PRIVATE_DIRECT_DATABASE_URL\nNEXT_PRIVATE_SMTP_FROM_NAME\nNEXT_PRIVATE_SMTP_FROM_ADDRESS\n```\n\n----------------------------------------\n\nTITLE: Styling Embedded Fields using CSS Classes and Data Attributes\nDESCRIPTION: Provides CSS examples targeting the base field container (.field--FieldRootContainer) and specific field types or states using [data-field-type], [data-inserted], and [data-validate] attributes. This enables granular styling based on field characteristics and interaction state.\nSOURCE: https://github.com/documenso/documenso/blob/main/apps/documentation/pages/developers/embedding/css-variables.mdx#_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n/* Style all field containers */\n.field--FieldRootContainer {\n  transition: all 200ms ease;\n}\n\n/* Style specific field types */\n.field--FieldRootContainer[data-field-type='SIGNATURE'] {\n  background-color: rgba(0, 0, 0, 0.02);\n}\n\n/* Style inserted fields */\n.field--FieldRootContainer[data-inserted='true'] {\n  background-color: var(--primary);\n  opacity: 0.2;\n}\n\n/* Style fields being validated */\n.field--FieldRootContainer[data-validate='true'] {\n  border-color: orange;\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Application - npm - bash\nDESCRIPTION: Executes the npm script defined as 'dev' in the project's 'package.json' file. This command typically starts the application server in development mode, often including features like hot-reloading for a smoother development workflow. It must be run from the project's root directory.\nSOURCE: https://github.com/documenso/documenso/blob/main/apps/documentation/pages/developers/local-development/manual.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Embedding Document with EmbedSignDocument in React\nDESCRIPTION: This snippet showcases the use of the `EmbedSignDocument` component to embed a signing experience in a React application. It takes a `token` prop which is the document's signing token. The `@documenso/embed-react` package must be installed. The component provides a way for users to sign documents using a signing token.\nSOURCE: https://github.com/documenso/documenso/blob/main/apps/documentation/pages/developers/embedding/react.mdx#_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\nimport { EmbedSignDocument } from '@documenso/embed-react';\n\nconst MyEmbeddingComponent = () => {\n  const token = 'YOUR_TOKEN_HERE'; // Replace with the actual token\n\n  return <EmbedSignDocument token={token} />;\n};\n\n```\n\n----------------------------------------\n\nTITLE: Embedding Direct Link Template - Vue\nDESCRIPTION: This code snippet demonstrates how to use the `EmbedDirectTemplate` component from the `@documenso/embed-vue` package to embed a signing experience using a direct link template. It requires importing the component and passing a valid token as a prop.\nSOURCE: https://github.com/documenso/documenso/blob/main/apps/documentation/pages/developers/embedding/vue.mdx#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script setup lang=\"ts\">\n  import { EmbedDirectTemplate } from '@documenso/embed-vue';\n\n  const token = ref('YOUR_TOKEN_HERE'); // Replace with the actual token\n</script>\n\n<template>\n  <EmbedDirectTemplate :token=\"token\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Styling and Theming with EmbedDirectTemplate in React\nDESCRIPTION: This snippet provides styling examples using the `EmbedDirectTemplate` component.  It requires the `@documenso/embed-react` package and a platform plan that includes advanced styling capabilities. It shows the usage of `css`, `cssVars`, and `darkModeDisabled` props to customize the appearance of the embedded signing experience.  The `token` prop is required.\nSOURCE: https://github.com/documenso/documenso/blob/main/apps/documentation/pages/developers/embedding/react.mdx#_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\nimport { EmbedDirectTemplate } from '@documenso/embed-react';\n\nconst MyEmbeddingComponent = () => {\n  return (\n    <EmbedDirectTemplate\n      token=\"your-token\"\n      // Custom CSS\n      css={`\n        .documenso-embed {\n          border-radius: 8px;\n          box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n        }\n      `}\n      // CSS Variables\n      cssVars={{\n        primary: '#0000FF',\n        background: '#F5F5F5',\n        radius: '8px',\n      }}\n      // Dark Mode Control\n      darkModeDisabled={true}\n    />\n  );\n};\n\n```\n\n----------------------------------------\n\nTITLE: Optional Fast Start - sh\nDESCRIPTION: This command provides a potentially faster way to start the development environment. It appears to use a custom script or command within the project, likely defined in package.json. Dependencies include npm and, like other steps, the project's requirements. The output should be the same as when using the commands `npm run dx` and `npm run dev`, but potentially faster.\nSOURCE: https://github.com/documenso/documenso/blob/main/apps/documentation/pages/developers/local-development/quickstart.mdx#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpm run d\n```\n\n----------------------------------------\n\nTITLE: Generating a Self-Signed Certificate with OpenSSL - Bash\nDESCRIPTION: This snippet creates a self-signed X.509 certificate using a previously generated private RSA key with OpenSSL. The command will prompt for certificate information such as Common Name (CN) and produces certificate.crt, valid for 365 days (configurable via the -days parameter). It requires the private.key generated in the previous step as a prerequisite.\nSOURCE: https://github.com/documenso/documenso/blob/main/SIGNING.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nopenssl req -new -x509 -key private.key -out certificate.crt -days 365\n```\n\n----------------------------------------\n\nTITLE: Embedding Signing Token - React\nDESCRIPTION: This code snippet demonstrates how to use the `EmbedSignDocument` component from the `@documenso/embed-vue` package to embed a signing experience using a signing token. It requires importing the component and passing a valid token as a prop.\nSOURCE: https://github.com/documenso/documenso/blob/main/apps/documentation/pages/developers/embedding/vue.mdx#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { EmbedSignDocument } from '@documenso/embed-vue';\n\nconst MyEmbeddingComponent = () => {\n  const token = 'YOUR_TOKEN_HERE'; // Replace with the actual token\n\n  return <EmbedSignDocument token={token} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Styling and Theming in Documenso SDK Embed for Preact (JSX)\nDESCRIPTION: Demonstrates advanced styling and theming customization of the embedded Documenso signing experience for Platform Plan customers by supplying custom CSS styles and CSS variables to the EmbedDirectTemplate component. This snippet disables dark mode and customizes component appearance using border radius, box shadow, primary color, background color, and radius variables, allowing developers to align the embedded signing UI with their brand and design guidelines.\nSOURCE: https://github.com/documenso/documenso/blob/main/apps/documentation/pages/developers/embedding/preact.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { EmbedDirectTemplate } from '@documenso/embed-preact';\n\nconst MyEmbeddingComponent = () => {\n  const token = 'your-token';\n  const customCss = `\n    .documenso-embed {\n      border-radius: 8px;\n      box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n    }\n  `;\n  const cssVars = {\n    primary: '#0000FF',\n    background: '#F5F5F5',\n    radius: '8px',\n  };\n\n  return (\n    <EmbedDirectTemplate token={token} css={customCss} cssVars={cssVars} darkModeDisabled={true} />\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Combining Key and Certificate into .p12 Format with OpenSSL - Bash\nDESCRIPTION: This snippet merges the private.key and certificate.crt into a PKCS#12 archive (certificate.p12) using OpenSSL. This format is commonly required for signing operations that expect both a certificate and a private key. The user is prompted to set an export password for the .p12 file. Requires both private.key and certificate.crt from previous steps.\nSOURCE: https://github.com/documenso/documenso/blob/main/SIGNING.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nopenssl pkcs12 -export -out certificate.p12 -inkey private.key -in certificate.crt\n```\n\n----------------------------------------\n\nTITLE: Customizing Styling for Documenso Embed Component (Platform Plan)\nDESCRIPTION: Example showing how to apply custom CSS and CSS variables to style the embedded signing experience for Platform Plan users in a Svelte application.\nSOURCE: https://github.com/documenso/documenso/blob/main/apps/documentation/pages/developers/embedding/svelte.mdx#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script lang=\"ts\">\n  import { EmbedDirectTemplate } from '@documenso/embed-svelte';\n\n  const token = 'your-token';\n  const customCss = `\n    .documenso-embed {\n      border-radius: 8px;\n      box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n    }\n  `;\n  const cssVars = {\n    primary: '#0000FF',\n    background: '#F5F5F5',\n    radius: '8px',\n  };\n</script>\n\n<EmbedDirectTemplate {token} css=\"{customCss}\" cssVars=\"{cssVars}\" darkModeDisabled=\"{true}\" />\n```\n\n----------------------------------------\n\nTITLE: Embedding Direct Link Template Using Documenso SDK in Preact (JSX)\nDESCRIPTION: Implements a Preact functional component embedding a signing experience via a direct link template token using the EmbedDirectTemplate component from the Documenso SDK. The token identifies the document template to embed. This approach supports additional optional props for host configuration, signer name/email customization, locking fields, external ID assignment, custom styling, dark mode control, and lifecycle callbacks such as onDocumentReady and onDocumentCompleted. All props enable flexible embedding tailored to the application's needs.\nSOURCE: https://github.com/documenso/documenso/blob/main/apps/documentation/pages/developers/embedding/preact.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { EmbedDirectTemplate } from '@documenso/embed-preact';\n\nconst MyEmbeddingComponent = () => {\n  const token = 'YOUR_TOKEN_HERE'; // Replace with the actual token\n\n  return <EmbedDirectTemplate token={token} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Embedding Direct Link Template in Angular (TypeScript)\nDESCRIPTION: This TypeScript code demonstrates how to embed a document using the `EmbedDirectTemplate` component from the `@documenso/embed-angular` package. The component takes a `token` prop, which is the document's signing token. The `token` prop is mandatory and should be replaced with the actual token. It also imports necessary modules from `@angular/core` and `@documenso/embed-angular`.  The component is then declared in the template and initialized with a sample token.  Outputs a rendered signing document.\nSOURCE: https://github.com/documenso/documenso/blob/main/apps/documentation/pages/developers/embedding/angular.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Component } from '@angular/core';\nimport { EmbedDirectTemplate } from '@documenso/embed-angular';\n\n@Component({\n  selector: 'app-embedding',\n  template: `\n    <embed-direct-template [token]=\"token\" />\n  `,\n  standalone: true,\n  imports: [EmbedDirectTemplate],\n})\nexport class EmbeddingComponent {\n  token = 'YOUR_TOKEN_HERE'; // Replace with the actual token\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Certificate Permissions for Docker in Bash\nDESCRIPTION: This command changes the ownership of the certificate.p12 file to user ID 1001, which is the non-root user running the NextJS application inside the Docker container. This resolves permission issues when signing documents from within Docker.\nSOURCE: https://github.com/documenso/documenso/blob/main/apps/documentation/pages/developers/local-development/signing-certificate.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo chown 1001 certificate.p12\n```\n\n----------------------------------------\n\nTITLE: Installing Documenso Angular SDK (bash)\nDESCRIPTION: This command installs the @documenso/embed-angular package using npm.  This package provides the necessary components for embedding signing experiences within an Angular application. No specific dependencies are needed before running this command; it handles all necessary setup.\nSOURCE: https://github.com/documenso/documenso/blob/main/apps/documentation/pages/developers/embedding/angular.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @documenso/embed-angular\n```\n\n----------------------------------------\n\nTITLE: Embedding Direct Template with React\nDESCRIPTION: Illustrates how to embed a Documenso direct template into a React application using the `@documenso/embed-react` package. The `EmbedDirectTemplate` component is imported and rendered, passing the template token as a prop. Requires installation of the `@documenso/embed-react` package.\nSOURCE: https://github.com/documenso/documenso/blob/main/apps/documentation/pages/developers/embedding/index.mdx#_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\nimport { EmbedDirectTemplate } from '@documenso/embed-react';\n\nconst MyEmbeddingComponent = () => {\n  const token = 'YOUR_TOKEN_HERE'; // Replace with the actual token\n\n  return <EmbedDirectTemplate token={token} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Presign Token for Documenso Embedding\nDESCRIPTION: This snippet shows the API endpoint for obtaining a presign token required for embedding Documenso's authoring functionality. The token is created via a POST request that requires authentication with a Documenso API key.\nSOURCE: https://github.com/documenso/documenso/blob/main/apps/documentation/pages/developers/embedding/authoring.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nPOST /api/v2-beta/embedding/create-presign-token\n```\n\n----------------------------------------\n\nTITLE: Embedding Documenso Signing Token - Solid.js - JSX\nDESCRIPTION: Shows how to embed a signing experience for a specific signing token using the EmbedSignDocument component from the @documenso/embed-solid SDK. Requires the token for the document as input. Additional event and configuration props are supported. Outputs a signing interface embedded in the Solid.js app.\nSOURCE: https://github.com/documenso/documenso/blob/main/apps/documentation/pages/developers/embedding/solid.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { EmbedSignDocument } from '@documenso/embed-solid';\n\nconst MyEmbeddingComponent = () => {\n  const token = 'YOUR_TOKEN_HERE'; // Replace with the actual token\n\n  return <EmbedSignDocument token={token} />;\n};\n\n```\n\n----------------------------------------\n\nTITLE: Creating Environment File from Template\nDESCRIPTION: Command to create a .env file from the provided example file. This file will store your configuration settings for Documenso.\nSOURCE: https://github.com/documenso/documenso/blob/main/apps/documentation/pages/developers/self-hosting/how-to.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.example .env\n```\n\n----------------------------------------\n\nTITLE: Handling Document Creation Events with EmbedCreateDocument\nDESCRIPTION: This snippet shows how to use the onDocumentCreated callback to handle successful document creation events, allowing for navigation to a success page or updating database records with the new document ID.\nSOURCE: https://github.com/documenso/documenso/blob/main/apps/documentation/pages/developers/embedding/authoring.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<EmbedCreateDocument\n  presignToken=\"YOUR_PRESIGN_TOKEN\"\n  externalId=\"order-12345\"\n  onDocumentCreated={(data) => {\n    // Navigate to a success page\n    navigate(`/documents/success?id=${data.documentId}`);\n\n    // Or update your database with the document ID\n    updateOrderDocument(data.externalId, data.documentId);\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Environment Variables Configuration\nDESCRIPTION: Sample environment variables required for the Docker Compose production setup. These include authentication secrets, encryption keys, application URL, and SMTP configuration for email functionality.\nSOURCE: https://github.com/documenso/documenso/blob/main/apps/documentation/pages/developers/self-hosting/how-to.mdx#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nNEXTAUTH_SECRET=\"<your-secret>\"\nNEXT_PRIVATE_ENCRYPTION_KEY=\"<your-key>\"\nNEXT_PRIVATE_ENCRYPTION_SECONDARY_KEY=\"<your-secondary-key>\"\nNEXT_PUBLIC_WEBAPP_URL=\"<your-url>\"\nNEXT_PRIVATE_SMTP_TRANSPORT=\"smtp-auth\"\nNEXT_PRIVATE_SMTP_HOST=\"<your-host>\"\nNEXT_PRIVATE_SMTP_PORT=<your-port>\nNEXT_PRIVATE_SMTP_USERNAME=\"<your-username>\"\nNEXT_PRIVATE_SMTP_PASSWORD=\"<your-password>\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Feature Toggles for EmbedCreateDocument Component\nDESCRIPTION: This snippet demonstrates how to customize the authoring experience by enabling or disabling specific features using the features prop of the EmbedCreateDocument component.\nSOURCE: https://github.com/documenso/documenso/blob/main/apps/documentation/pages/developers/embedding/authoring.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<EmbedCreateDocument\n  presignToken=\"YOUR_PRESIGN_TOKEN\"\n  features={{\n    allowConfigureSignatureTypes: true,\n    allowConfigureLanguage: true,\n    allowConfigureDateFormat: true,\n    allowConfigureTimezone: true,\n    allowConfigureRedirectUrl: true,\n    allowConfigureCommunication: true,\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Direct Link Template in Svelte\nDESCRIPTION: Example showing how to use the EmbedDirectTemplate component to embed a signing experience using a direct link template token in a Svelte application.\nSOURCE: https://github.com/documenso/documenso/blob/main/apps/documentation/pages/developers/embedding/svelte.mdx#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script lang=\"ts\">\n  import { EmbedDirectTemplate } from '@documenso/embed-svelte';\n\n  const token = 'YOUR_TOKEN_HERE'; // Replace with the actual token\n</script>\n\n<template>\n  <EmbedDirectTemplate {token} />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Docker Deployment Instructions for Documenso\nDESCRIPTION: Provides information on how to pull, run, and configure the Documenso Docker container from DockerHub or GitHub Container Registry, including dependency setup via environment variables and usage notes.\nSOURCE: https://github.com/documenso/documenso/blob/main/README.md#_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nWe provide a Docker container for Documenso, which is published on both DockerHub and GitHub Container Registry.\n\n- DockerHub: [https://hub.docker.com/r/documenso/documenso](https://hub.docker.com/r/documenso/documenso)\n- GitHub Container Registry: [https://ghcr.io/documenso/documenso](https://ghcr.io/documenso/documenso)\n\nYou can pull the Docker image from either of these registries and run it with your preferred container hosting provider.\n\nPlease note that you will need to provide environment variables for connecting to the database, mailserver, and so forth.\n\nFor detailed instructions on how to configure and run the Docker container, please refer to the [Docker README](./docker/README.md) in the `docker` directory.\n```\n\n----------------------------------------\n\nTITLE: Embedding Documenso Direct Link Template - Solid.js - JSX\nDESCRIPTION: Demonstrates embedding a Documenso signing template in a Solid.js component using the EmbedDirectTemplate component from the @documenso/embed-solid package. Requires a valid document token. Optional properties can be passed for host configuration, signer identity fields, callbacks, and styling. Expected input is a string token; the output is the rendered signing widget within the application.\nSOURCE: https://github.com/documenso/documenso/blob/main/apps/documentation/pages/developers/embedding/solid.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { EmbedDirectTemplate } from '@documenso/embed-solid';\n\nconst MyEmbeddingComponent = () => {\n  const token = 'YOUR_TOKEN_HERE'; // Replace with the actual token\n\n  return <EmbedDirectTemplate token={token} />;\n};\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Document Creation with EmbedCreateDocument Component in React\nDESCRIPTION: This snippet demonstrates how to use the EmbedCreateDocument component from Documenso's SDK to create documents within your application. It requires a presign token for authentication and includes an event handler for document creation.\nSOURCE: https://github.com/documenso/documenso/blob/main/apps/documentation/pages/developers/embedding/authoring.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { unstable_EmbedCreateDocument as EmbedCreateDocument } from '@documenso/embed-react';\n\nconst DocumentCreator = () => {\n  // You'll need to obtain a presign token using your API key\n  const presignToken = 'YOUR_PRESIGN_TOKEN';\n\n  return (\n    <div style={{ height: '800px', width: '100%' }}>\n      <EmbedCreateDocument\n        presignToken={presignToken}\n        externalId=\"order-12345\"\n        onDocumentCreated={(data) => {\n          console.log('Document created with ID:', data.documentId);\n          console.log('External reference ID:', data.externalId);\n        }}\n      />\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Deploying Documenso on Elestio\nDESCRIPTION: Provides a button for deploying the application via Elestio, an enterprise hosting platform, linking to the deployment page.\nSOURCE: https://github.com/documenso/documenso/blob/main/README.md#_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n[![Deploy on Elestio](https://elest.io/images/logos/deploy-to-elestio-btn.png)](https://elest.io/open-source/documenso)\n```\n\n----------------------------------------\n\nTITLE: Customizing Documenso Embed Styling - Solid.js - JSX\nDESCRIPTION: Provides an example for customizing the styling of a Documenso embed using the css, cssVars, and darkModeDisabled props, available to Platform Plan users. Requires a valid token, plus optional custom CSS and CSS variable parameters for advanced theming. Custom properties alter layout, color, and border radius, while dark mode can be disabled.\nSOURCE: https://github.com/documenso/documenso/blob/main/apps/documentation/pages/developers/embedding/solid.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { EmbedDirectTemplate } from '@documenso/embed-solid';\n\nconst MyEmbeddingComponent = () => {\n  const token = 'your-token';\n  const customCss = `\n    .documenso-embed {\n      border-radius: 8px;\n      box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n    }\n  `;\n  const cssVars = {\n    primary: '#0000FF',\n    background: '#F5F5F5',\n    radius: '8px',\n  };\n\n  return (\n    <EmbedDirectTemplate token={token} css={customCss} cssVars={cssVars} darkModeDisabled={true} />\n  );\n};\n\n```\n\n----------------------------------------\n\nTITLE: Styling Embedded Components using CSS Classes\nDESCRIPTION: Shows how to target main embedded experience containers like .embed--DocumentWidget, .embed--WaitingForTurn, and .embed--DocumentContainer using standard CSS classes. Includes an example of applying responsive styles with a media query.\nSOURCE: https://github.com/documenso/documenso/blob/main/apps/documentation/pages/developers/embedding/css-variables.mdx#_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n/* Custom styles for the document widget */\n.embed--DocumentWidget {\n  background-color: #ffffff;\n  box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1);\n}\n\n/* Custom styles for the waiting screen */\n.embed--WaitingForTurn {\n  background-color: #f9fafb;\n  padding: 2rem;\n}\n\n/* Responsive adjustments for the document container */\n@media (min-width: 768px) {\n  .embed--DocumentContainer {\n    gap: 2rem;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Upload Document to S3 Pre-signed URL\nDESCRIPTION: Details the process for uploading a document file to S3 using a pre-signed URL obtained from the API response. Includes example JSON response with upload URL, document ID, recipient information, and sample cURL command for uploading the file.\nSOURCE: https://github.com/documenso/documenso/blob/main/apps/documentation/pages/developers/public-api/reference.mdx#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"uploadUrl\": \"https://<url>/<bucket-name>/<id>/my-document.pdf?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=<credentials>&X-Amz-Date=<date>&X-Amz-Expires=3600&X-Amz-Signature=<signature>&X-Amz-SignedHeaders=host&x-id=PutObject\",\n  \"documentId\": 51,\n  \"recipients\": [\n    {\n      \"recipientId\": 11,\n      \"name\": \"Alex Blake\",\n      \"email\": \"alexblake@email.com\",\n      \"token\": \"<unique-signer-token>\",\n      \"role\": \"SIGNER\",\n      \"signingOrder\": 1,\n      \"signingUrl\": \"https://app.documenso.com/sign/<unique-signer-token>\"\n    },\n    {\n      \"recipientId\": 12,\n      \"name\": \"Ash Drew\",\n      \"email\": \"ashdrew@email.com\",\n      \"token\": \"<unique-signer-token>\",\n      \"role\": \"SIGNER\",\n      \"signingOrder\": 0,\n      \"signingUrl\": \"https://app.documenso.com/sign/<unique-signer-token>\"\n    }\n  ]\n}\n\nAnd a sample cURL command:\n\n```bash\ncurl --location --request PUT 'https://<url>/<bucket-name>/<id>/my-document.pdf?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=<credentials>&X-Amz-Date=<date>&X-Amz-Expires=3600&X-Amz-Signature=<signature>&X-Amz-SignedHeaders=host&x-id=PutObject' \\\n--form '=@\"/path/to/your/document.pdf\"'\n```\n```\n\n----------------------------------------\n\nTITLE: Installing React SDK via npm\nDESCRIPTION: This command installs the Documenso React SDK using npm.  This is a prerequisite for using the SDK's components in your React application.  The installation will add the necessary package and its dependencies to your project's `node_modules` directory and update your `package.json` file.\nSOURCE: https://github.com/documenso/documenso/blob/main/apps/documentation/pages/developers/embedding/react.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @documenso/embed-react\n```\n\n----------------------------------------\n\nTITLE: Complete Integration Example of EmbedCreateDocument in React\nDESCRIPTION: This comprehensive example shows a complete integration of document creation in a React application, including state management to handle the document creation workflow and conditional rendering based on creation status.\nSOURCE: https://github.com/documenso/documenso/blob/main/apps/documentation/pages/developers/embedding/authoring.mdx#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useState } from 'react';\n\nimport { unstable_EmbedCreateDocument as EmbedCreateDocument } from '@documenso/embed-react';\n\nfunction DocumentCreator() {\n  // In a real application, you would fetch this token from your backend\n  // using your API key at /api/v2-beta/embedding/create-presign-token\n  const presignToken = 'YOUR_PRESIGN_TOKEN';\n  const [documentId, setDocumentId] = useState<number | null>(null);\n\n  if (documentId) {\n    return (\n      <div>\n        <h2>Document Created Successfully!</h2>\n        <p>Document ID: {documentId}</p>\n        <button onClick={() => setDocumentId(null)}>Create Another Document</button>\n      </div>\n    );\n  }\n\n  return (\n    <div style={{ height: '800px', width: '100%' }}>\n      <EmbedCreateDocument\n        presignToken={presignToken}\n        externalId=\"order-12345\"\n        onDocumentCreated={(data) => {\n          setDocumentId(data.documentId);\n        }}\n      />\n    </div>\n  );\n}\n\nexport default DocumentCreator;\n```\n\n----------------------------------------\n\nTITLE: JSON Request Payload: Add Fields to Documenso Document\nDESCRIPTION: This JSON payload is used to add fields to an existing document via a POST request. It can contain a single field object or an array of field objects. Each field requires recipient information and positional/size data, while advanced fields include a `fieldMeta` object.\nSOURCE: https://github.com/documenso/documenso/blob/main/apps/documentation/pages/developers/public-api/reference.mdx#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"recipientId\": 0,\n  \"type\": \"SIGNATURE\",\n  \"pageNumber\": 0,\n  \"pageX\": 0,\n  \"pageY\": 0,\n  \"pageWidth\": 0,\n  \"pageHeight\": 0,\n  \"fieldMeta\": {\n    \"label\": \"string\",\n    \"placeholder\": \"string\",\n    \"required\": true,\n    \"readOnly\": true,\n    \"type\": \"text\",\n    \"text\": \"string\",\n    \"characterLimit\": 0\n  }\n}\n\n// or\n\n[\n  {\n    \"recipientId\": 0,\n    \"type\": \"SIGNATURE\",\n    \"pageNumber\": 0,\n    \"pageX\": 0,\n    \"pageY\": 0,\n    \"pageWidth\": 0,\n    \"pageHeight\": 0\n  },\n  {\n    \"recipientId\": 0,\n    \"type\": \"TEXT\",\n    \"pageNumber\": 0,\n    \"pageX\": 0,\n    \"pageY\": 0,\n    \"pageWidth\": 0,\n    \"pageHeight\": 0,\n    \"fieldMeta\": {\n      \"label\": \"string\",\n      \"placeholder\": \"string\",\n      \"required\": true,\n      \"readOnly\": true,\n      \"type\": \"text\",\n      \"text\": \"string\",\n      \"characterLimit\": 0\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Embedding Signing Token Using Documenso SDK in Preact (JSX)\nDESCRIPTION: Implements a Preact functional component embedding a signing experience using a signing token with the EmbedSignDocument component from the Documenso SDK. The signing token represents the document to be signed. Supports optional props such as host, signer name and locking the name field, and event callbacks including onDocumentReady, onDocumentCompleted, and onDocumentError, providing hooks to track document lifecycle events.\nSOURCE: https://github.com/documenso/documenso/blob/main/apps/documentation/pages/developers/embedding/preact.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { EmbedSignDocument } from '@documenso/embed-preact';\n\nconst MyEmbeddingComponent = () => {\n  const token = 'YOUR_TOKEN_HERE'; // Replace with the actual token\n\n  return <EmbedSignDocument token={token} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Documenso Embed SDK via npm in Bash\nDESCRIPTION: Installs the @documenso/embed-preact package using npm, which is a prerequisite for embedding signing experiences within a Preact application via the Documenso SDK.\nSOURCE: https://github.com/documenso/documenso/blob/main/apps/documentation/pages/developers/embedding/preact.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @documenso/embed-preact\n```\n\n----------------------------------------\n\nTITLE: Importing Callout Component in React (TypeScript)\nDESCRIPTION: This snippet imports the Callout component from the 'nextra/components' package to be used within the React/Next.js based documentation page. It enables rendering informational and warning callout boxes for emphasizing license-related details. This import requires the 'nextra/components' package to be installed in the project dependencies and assumes a React/Next.js environment configured to process TypeScript and JSX. The snippet itself is minimal and solely responsible for making the Callout component available for usage later in the file.\nSOURCE: https://github.com/documenso/documenso/blob/main/apps/documentation/pages/users/licenses/community-edition.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Callout } from 'nextra/components';\n```\n\n----------------------------------------\n\nTITLE: Webhook Payload for Document Completed Event - Documenso JSON\nDESCRIPTION: This JSON payload indicates that all required recipients have signed the document. The document's overall `status` is updated to 'COMPLETED', and the payload reflects the final state including the `signedAt` timestamps for all recipients.\nSOURCE: https://github.com/documenso/documenso/blob/main/apps/documentation/pages/developers/webhooks.mdx#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"event\": \"DOCUMENT_COMPLETED\",\n  \"payload\": {\n    \"id\": 10,\n    \"externalId\": null,\n    \"userId\": 1,\n    \"authOptions\": null,\n    \"formValues\": null,\n    \"visibility\": \"EVERYONE\",\n    \"title\": \"documenso.pdf\",\n    \"status\": \"COMPLETED\",\n    \"documentDataId\": \"hs8qz1ktr9204jn7mg6c5dxy0\",\n    \"createdAt\": \"2024-04-22T11:44:43.341Z\",\n    \"updatedAt\": \"2024-04-22T11:52:05.708Z\",\n    \"completedAt\": \"2024-04-22T11:52:05.707Z\",\n    \"deletedAt\": null,\n    \"teamId\": null,\n    \"templateId\": null,\n    \"source\": \"DOCUMENT\",\n    \"documentMeta\": {\n      \"id\": \"doc_meta_123\",\n      \"subject\": \"Please sign this document\",\n      \"message\": \"Hello, please review and sign this document.\",\n      \"timezone\": \"UTC\",\n      \"password\": null,\n      \"dateFormat\": \"MM/DD/YYYY\",\n      \"redirectUrl\": null,\n      \"signingOrder\": \"PARALLEL\",\n      \"typedSignatureEnabled\": true,\n      \"language\": \"en\",\n      \"distributionMethod\": \"EMAIL\",\n      \"emailSettings\": null\n    },\n    \"Recipient\": [\n      {\n        \"id\": 50,\n        \"documentId\": 10,\n        \"templateId\": null,\n        \"email\": \"signer2@documenso.com\",\n        \"name\": \"Signer 2\",\n        \"token\": \"vbT8hi3jKQmrFP_LN1WcS\",\n        \"documentDeletedAt\": null,\n        \"expired\": null,\n        \"signedAt\": \"2024-04-22T11:51:10.055Z\",\n        \"authOptions\": {\n          \"accessAuth\": null,\n          \"actionAuth\": null\n        },\n        \"signingOrder\": 1,\n        \"rejectionReason\": null,\n        \"role\": \"VIEWER\",\n        \"readStatus\": \"OPENED\",\n        \"signingStatus\": \"SIGNED\",\n        \"sendStatus\": \"SENT\"\n      },\n      {\n        \"id\": 51,\n        \"documentId\": 10,\n        \"templateId\": null,\n        \"email\": \"signer1@documenso.com\",\n        \"name\": \"Signer 1\",\n        \"token\": \"HkrptwS42ZBXdRKj1TyUo\",\n        \"documentDeletedAt\": null,\n        \"expired\": null,\n        \"signedAt\": \"2024-04-22T11:52:05.688Z\",\n        \"authOptions\": {\n          \"accessAuth\": null,\n          \"actionAuth\": null\n        },\n        \"signingOrder\": 2,\n        \"rejectionReason\": null,\n        \"role\": \"SIGNER\",\n        \"readStatus\": \"OPENED\",\n        \"signingStatus\": \"SIGNED\",\n        \"sendStatus\": \"SENT\"\n      }\n    ]\n  },\n  \"createdAt\": \"2024-04-22T11:52:18.277Z\",\n  \"webhookEndpoint\": \"https://mywebhooksite.com/mywebhook\"\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding Signing Token with React\nDESCRIPTION: Demonstrates embedding a signing process for a document using a signing token with the `@documenso/embed-react` package. The `EmbedSignDocument` component is imported and rendered, using the signing token as a prop. Assumes you have a document signing token obtained via the API.\nSOURCE: https://github.com/documenso/documenso/blob/main/apps/documentation/pages/developers/embedding/index.mdx#_snippet_4\n\nLANGUAGE: JSX\nCODE:\n```\nimport { EmbedSignDocument } from '@documenso/embed-react';\n\nconst MyEmbeddingComponent = () => {\n  const token = 'YOUR_TOKEN_HERE'; // Replace with the actual token\n\n  return <EmbedSignDocument token={token} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Webhook Payload for Document Rejected Event - Documenso JSON\nDESCRIPTION: This JSON payload is sent when a recipient rejects the document. The payload includes the document's state at the time of rejection and would typically include a `rejectionReason` field within the relevant recipient's details (though not shown in this partial example).\nSOURCE: https://github.com/documenso/documenso/blob/main/apps/documentation/pages/developers/webhooks.mdx#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"event\": \"DOCUMENT_REJECTED\",\n  \"payload\": {\n    \"id\": 10,\n    \"externalId\": null,\n    \"userId\": 1,\n    \"authOptions\": null,\n    \"formValues\": null,\n    \"visibility\": \"EVERYONE\",\n    \"title\": \"documenso.pdf\",\n    \"status\": \"PENDING\",\n    \"documentDataId\": \"hs8qz1ktr9204jn7mg6c5dxy0\",\n\n```\n\n----------------------------------------\n\nTITLE: Accessing Team URL in Documenso via Bash\nDESCRIPTION: Shows the URL format used in Documenso to access a specific team's page. The placeholder <your-team-name> should be replaced with the actual team's name or identifier. This URL directs to the team's main page and settings within the Documenso platform.\nSOURCE: https://github.com/documenso/documenso/blob/main/apps/documentation/pages/users/get-started/teams.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://app.documenso.com/t/<your-team-name>\n```\n\n----------------------------------------\n\nTITLE: Translating Constants with Lingui msg Macro (TSX)\nDESCRIPTION: Illustrates how to use the `msg` macro from `@lingui/core/macro` to mark string constants for translation outside of React components. The translated message can then be rendered within a component using the `_` function obtained from `useLingui`.\nSOURCE: https://github.com/documenso/documenso/blob/main/apps/documentation/pages/developers/local-development/translations.mdx#_snippet_2\n\nLANGUAGE: TSX\nCODE:\n```\nimport { msg } from '@lingui/core/macro';\nimport { useLingui } from '@lingui/react';\nimport { Trans } from '@lingui/react/macro';\n\n// Wrap text in msg`text to translate` when it's in a constant here, or another file/package.\nexport const CONSTANT_WITH_MSG = {\n  foo: msg`Hello`,\n  bar: msg`World`,\n};\n\nexport const SomeComponent = () => {\n  const { _ } = useLingui();\n\n  return (\n    <div>\n      {/* This will render the correct translated text. */}\n      <p>{_(CONSTANT_WITH_MSG.foo)}</p>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Webhook Payload for Document Opened Event - Documenso JSON\nDESCRIPTION: This JSON payload is triggered when a recipient opens the document. The payload reflects the document's state and specifically updates the `readStatus` for the recipient(s) who opened it to 'OPENED'.\nSOURCE: https://github.com/documenso/documenso/blob/main/apps/documentation/pages/developers/webhooks.mdx#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"event\": \"DOCUMENT_OPENED\",\n  \"payload\": {\n    \"id\": 10,\n    \"externalId\": null,\n    \"userId\": 1,\n    \"authOptions\": null,\n    \"formValues\": null,\n    \"visibility\": \"EVERYONE\",\n    \"title\": \"documenso.pdf\",\n    \"status\": \"PENDING\",\n    \"documentDataId\": \"hs8qz1ktr9204jn7mg6c5dxy0\",\n    \"createdAt\": \"2024-04-22T11:44:43.341Z\",\n    \"updatedAt\": \"2024-04-22T11:48:07.569Z\",\n    \"completedAt\": null,\n    \"deletedAt\": null,\n    \"teamId\": null,\n    \"templateId\": null,\n    \"source\": \"DOCUMENT\",\n    \"documentMeta\": {\n      \"id\": \"doc_meta_123\",\n      \"subject\": \"Please sign this document\",\n      \"message\": \"Hello, please review and sign this document.\",\n      \"timezone\": \"UTC\",\n      \"password\": null,\n      \"dateFormat\": \"MM/DD/YYYY\",\n      \"redirectUrl\": null,\n      \"signingOrder\": \"PARALLEL\",\n      \"typedSignatureEnabled\": true,\n      \"language\": \"en\",\n      \"distributionMethod\": \"EMAIL\",\n      \"emailSettings\": null\n    },\n    \"Recipient\": [\n      {\n        \"id\": 52,\n        \"documentId\": 10,\n        \"templateId\": null,\n        \"email\": \"signer2@documenso.com\",\n        \"name\": \"Signer 2\",\n        \"token\": \"vbT8hi3jKQmrFP_LN1WcS\",\n        \"documentDeletedAt\": null,\n        \"expired\": null,\n        \"signedAt\": null,\n        \"authOptions\": null,\n        \"signingOrder\": 1,\n        \"rejectionReason\": null,\n        \"role\": \"VIEWER\",\n        \"readStatus\": \"OPENED\",\n        \"signingStatus\": \"NOT_SIGNED\",\n        \"sendStatus\": \"SENT\"\n      }\n    ]\n  },\n  \"createdAt\": \"2024-04-22T11:50:26.174Z\",\n  \"webhookEndpoint\": \"https://mywebhooksite.com/mywebhook\"\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Dark Mode in EmbedDirectTemplate using JSX\nDESCRIPTION: Shows how to disable dark mode for the embedded Documenso component using the `darkModeDisabled` prop. This ensures the embedded experience aligns with the application's theme, regardless of user preferences. Requires the `token` prop to be passed.\nSOURCE: https://github.com/documenso/documenso/blob/main/apps/documentation/pages/developers/embedding/index.mdx#_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<EmbedDirectTemplate token={token} darkModeDisabled={true} />\n```\n\n----------------------------------------\n\nTITLE: Accessing Team General Settings URL in Documenso via Bash\nDESCRIPTION: Illustrates the URL structure to access the general settings of a team in Documenso. Replace <your-team-name> with the relevant team's name. This page allows users to transfer team ownership and manage overarching team settings.\nSOURCE: https://github.com/documenso/documenso/blob/main/apps/documentation/pages/users/get-started/teams.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhttps://app.documenso.com/t/<your-team-name>/settings\n```\n\n----------------------------------------\n\nTITLE: Accessing Team Members Settings URL in Documenso via Bash\nDESCRIPTION: Displays the URL pattern to directly access the 'Members' tab in a specific team's settings on Documenso. The placeholder <your-team-name> should be replaced with the actual team name. This link is used for inviting and managing team members.\nSOURCE: https://github.com/documenso/documenso/blob/main/apps/documentation/pages/users/get-started/teams.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhttps://app.documenso.com/t/<your-team-name>/settings/members\n```\n\n----------------------------------------\n\nTITLE: Importing Callout Component in Nextra (JavaScript/TypeScript)\nDESCRIPTION: Imports the `Callout` component from the `nextra/components` library. This component is typically used within Nextra documentation websites (often built with React/MDX) to display highlighted message boxes or alerts.\nSOURCE: https://github.com/documenso/documenso/blob/main/apps/documentation/pages/users/licenses/enterprise-edition.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Callout } from 'nextra/components';\n```\n\n----------------------------------------\n\nTITLE: Styling and Theming with CSS - Vue\nDESCRIPTION: This snippet showcases how to customize the styling of the embedded component using custom CSS and CSS variables, available for Platform Plan users.  It sets properties such as border radius, box-shadow, and CSS variables for color customization.\nSOURCE: https://github.com/documenso/documenso/blob/main/apps/documentation/pages/developers/embedding/vue.mdx#_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script setup lang=\"ts\">\n  import { EmbedDirectTemplate } from '@documenso/embed-vue';\n\n  const token = ref('your-token');\n  const customCss = `\n  .documenso-embed {\n    border-radius: 8px;\n    box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n  }\n`;\n  const cssVars = {\n    primary: '#0000FF',\n    background: '#F5F5F5',\n    radius: '8px',\n  };\n</script>\n\n<template>\n  <EmbedDirectTemplate\n    :token=\"token\"\n    :css=\"customCss\"\n    :cssVars=\"cssVars\"\n    :darkModeDisabled=\"true\"\n  />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using Callout Component in Nextra/MDX (JSX)\nDESCRIPTION: Demonstrates the usage of the imported `Callout` component within a Nextra or MDX page. It renders an informational callout box (`type=\"info\"`) containing text advising that the Enterprise Edition requires a paid subscription and provides a link for contact.\nSOURCE: https://github.com/documenso/documenso/blob/main/apps/documentation/pages/users/licenses/enterprise-edition.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Callout type=\"info\">\n  The Enterprise Edition requires a paid subscription. [Contact us for a\n  quote](https://documen.so/enterprise).\n</Callout>\n```\n\n----------------------------------------\n\nTITLE: Webhook Payload for Document Signed Event - Documenso JSON\nDESCRIPTION: This JSON payload is sent when a recipient successfully signs the document. The payload includes updated status information for the document (potentially COMPLETED if it's the last signer) and marks the specific recipient's `signingStatus` as 'SIGNED'.\nSOURCE: https://github.com/documenso/documenso/blob/main/apps/documentation/pages/developers/webhooks.mdx#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"event\": \"DOCUMENT_SIGNED\",\n  \"payload\": {\n    \"id\": 10,\n    \"externalId\": null,\n    \"userId\": 1,\n    \"authOptions\": null,\n    \"formValues\": null,\n    \"visibility\": \"EVERYONE\",\n    \"title\": \"documenso.pdf\",\n    \"status\": \"COMPLETED\",\n    \"documentDataId\": \"hs8qz1ktr9204jn7mg6c5dxy0\",\n    \"createdAt\": \"2024-04-22T11:44:43.341Z\",\n    \"updatedAt\": \"2024-04-22T11:52:05.708Z\",\n    \"completedAt\": \"2024-04-22T11:52:05.707Z\",\n    \"deletedAt\": null,\n    \"teamId\": null,\n    \"templateId\": null,\n    \"source\": \"DOCUMENT\",\n    \"documentMeta\": {\n      \"id\": \"doc_meta_123\",\n      \"subject\": \"Please sign this document\",\n      \"message\": \"Hello, please review and sign this document.\",\n      \"timezone\": \"UTC\",\n      \"password\": null,\n      \"dateFormat\": \"MM/DD/YYYY\",\n      \"redirectUrl\": null,\n      \"signingOrder\": \"PARALLEL\",\n      \"typedSignatureEnabled\": true,\n      \"language\": \"en\",\n      \"distributionMethod\": \"EMAIL\",\n      \"emailSettings\": null\n    },\n    \"Recipient\": [\n      {\n        \"id\": 51,\n        \"documentId\": 10,\n        \"templateId\": null,\n        \"email\": \"signer1@documenso.com\",\n        \"name\": \"Signer 1\",\n        \"token\": \"HkrptwS42ZBXdRKj1TyUo\",\n        \"documentDeletedAt\": null,\n        \"expired\": null,\n        \"signedAt\": \"2024-04-22T11:52:05.688Z\",\n        \"authOptions\": {\n          \"accessAuth\": null,\n          \"actionAuth\": null\n        },\n        \"signingOrder\": 1,\n        \"rejectionReason\": null,\n        \"role\": \"SIGNER\",\n        \"readStatus\": \"OPENED\",\n        \"signingStatus\": \"SIGNED\",\n        \"sendStatus\": \"SENT\"\n      }\n    ]\n  },\n  \"createdAt\": \"2024-04-22T11:52:18.577Z\",\n  \"webhookEndpoint\": \"https://mywebhooksite.com/mywebhook\"\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Compliance Status Using React Callout Component in JSX\nDESCRIPTION: This snippet imports the Callout component from 'nextra/components' and uses it to visually indicate the status of compliance standards like 21 CFR Part 11, SOC II, ISO 27001, and HIPAA. Each Callout component is configured with type and emoji props to differentiate info and warning statuses. It requires React and the 'nextra/components' library as dependencies. The snippet demonstrates how to embed UI elements within markdown-styled content for enhanced readability and status indication.\nSOURCE: https://github.com/documenso/documenso/blob/main/apps/documentation/pages/users/compliance/standards-and-regulations.mdx#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport { Callout } from 'nextra/components';\n\n## 21 CFR Part 11\n\n<Callout type=\"info\" emoji=\"✅\">\n  Status: Compliant (Enterprise License)\n</Callout>\n```\n\nLANGUAGE: JSX\nCODE:\n```\n<Callout type=\"warning\" emoji=\"⏳\">\n  Status: [Planned](https://github.com/documenso/backlog/issues/24)\n</Callout>\n```\n\nLANGUAGE: JSX\nCODE:\n```\n<Callout type=\"warning\" emoji=\"⏳\">\n  Status: [Planned](https://github.com/documenso/backlog/issues/26)\n</Callout>\n```\n\nLANGUAGE: JSX\nCODE:\n```\n<Callout type=\"warning\" emoji=\"⏳\">\n  Status: [Planned](https://github.com/documenso/backlog/issues/25)\n</Callout>\n```\n\n----------------------------------------\n\nTITLE: Implementing Signing Token in Svelte\nDESCRIPTION: Example showing how to use the EmbedSignDocument component to embed a signing experience using a signing token in a Svelte application.\nSOURCE: https://github.com/documenso/documenso/blob/main/apps/documentation/pages/developers/embedding/svelte.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { EmbedSignDocument } from '@documenso/embed-svelte';\n\nconst MyEmbeddingComponent = () => {\n  const token = 'YOUR_TOKEN_HERE'; // Replace with the actual token\n\n  return <EmbedSignDocument token={token} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Example Payload: Document Update\nDESCRIPTION: This JSON payload illustrates the structure of a Documenso webhook event when a document is updated.  It includes metadata about the document, such as IDs, timestamps, status, user and recipient details. This payload is sent when a document status changes.\nSOURCE: https://github.com/documenso/documenso/blob/main/apps/documentation/pages/developers/webhooks.mdx#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"createdAt\": \"2024-04-22T11:44:43.341Z\",\n  \"updatedAt\": \"2024-04-22T11:48:07.569Z\",\n  \"completedAt\": null,\n  \"deletedAt\": null,\n  \"teamId\": null,\n  \"templateId\": null,\n  \"source\": \"DOCUMENT\",\n  \"documentMeta\": {\n    \"id\": \"doc_meta_123\",\n    \"subject\": \"Please sign this document\",\n    \"message\": \"Hello, please review and sign this document.\",\n    \"timezone\": \"UTC\",\n    \"password\": null,\n    \"dateFormat\": \"MM/DD/YYYY\",\n    \"redirectUrl\": null,\n    \"signingOrder\": \"PARALLEL\",\n    \"typedSignatureEnabled\": true,\n    \"language\": \"en\",\n    \"distributionMethod\": \"EMAIL\",\n    \"emailSettings\": null\n  },\n  \"Recipient\": [\n    {\n      \"id\": 52,\n      \"documentId\": 10,\n      \"templateId\": null,\n      \"email\": \"signer@documenso.com\",\n      \"name\": \"Signer\",\n      \"token\": \"vbT8hi3jKQmrFP_LN1WcS\",\n      \"documentDeletedAt\": null,\n      \"expired\": null,\n      \"signedAt\": \"2024-04-22T11:48:07.569Z\",\n      \"authOptions\": {\n        \"accessAuth\": null,\n        \"actionAuth\": null\n      },\n      \"signingOrder\": 1,\n      \"rejectionReason\": \"I do not agree with the terms\",\n      \"role\": \"SIGNER\",\n      \"readStatus\": \"OPENED\",\n      \"signingStatus\": \"REJECTED\",\n      \"sendStatus\": \"SENT\"\n    }\n  ]\n},\n\"createdAt\": \"2024-04-22T11:48:07.945Z\",\n\"webhookEndpoint\": \"https://mywebhooksite.com/mywebhook\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Documenso Embed SDK for Svelte\nDESCRIPTION: Command to install the Documenso embed SDK package for Svelte applications using npm.\nSOURCE: https://github.com/documenso/documenso/blob/main/apps/documentation/pages/developers/embedding/svelte.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @documenso/embed-svelte\n```\n\n----------------------------------------\n\nTITLE: Installing Documenso Embedding SDK Using npm - Bash\nDESCRIPTION: Installs the @documenso/embed-solid SDK package via npm, which is required to use Documenso component embedding in Solid.js applications. This command must be run in the target project directory. Ensure that npm is installed and initialized before running this command.\nSOURCE: https://github.com/documenso/documenso/blob/main/apps/documentation/pages/developers/embedding/solid.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @documenso/embed-solid\n\n```\n\n----------------------------------------\n\nTITLE: Defining a Wrapper React Functional Component using JSX\nDESCRIPTION: This snippet defines and exports a simple React functional component named Wrapper which accepts a children prop and renders it wrapped in a div with top margin styling. It serves as a reusable container component to wrap page content and apply consistent layout spacing. This component depends on React but does not import it explicitly, assuming the environment supports new JSX transform. It is designed for use within React/Next.js applications and applies styling through Tailwind CSS classes.\nSOURCE: https://github.com/documenso/documenso/blob/main/apps/documentation/pages/index.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const Wrapper = ({ children }) => {\n  return <div className=\"mt-20\">{children}</div>;\n};\n```\n\n----------------------------------------\n\nTITLE: Example Payload: Document Cancelled\nDESCRIPTION: This JSON payload demonstrates the structure of the `document.rejected` (now `DOCUMENT_CANCELLED`) event webhook.  It provides details about the cancelled document, including identifiers, associated user, recipients and metadata. The payload also contains information about the event type and timestamp.\nSOURCE: https://github.com/documenso/documenso/blob/main/apps/documentation/pages/developers/webhooks.mdx#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"event\": \"DOCUMENT_CANCELLED\",\n  \"payload\": {\n    \"id\": 7,\n    \"externalId\": null,\n    \"userId\": 3,\n    \"authOptions\": null,\n    \"formValues\": null,\n    \"visibility\": \"EVERYONE\",\n    \"title\": \"documenso.pdf\",\n    \"status\": \"PENDING\",\n    \"documentDataId\": \"cm6exvn93006hi02ru90a265a\",\n    \"createdAt\": \"2025-01-27T11:02:14.393Z\",\n    \"updatedAt\": \"2025-01-27T11:03:16.387Z\",\n    \"completedAt\": null,\n    \"deletedAt\": null,\n    \"teamId\": null,\n    \"templateId\": null,\n    \"source\": \"DOCUMENT\",\n    \"documentMeta\": {\n      \"id\": \"cm6exvn96006ji02rqvzjvwoy\",\n      \"subject\": \"\",\n      \"message\": \"\",\n      \"timezone\": \"Etc/UTC\",\n      \"password\": null,\n      \"dateFormat\": \"yyyy-MM-dd hh:mm a\",\n      \"redirectUrl\": \"\",\n      \"signingOrder\": \"PARALLEL\",\n      \"typedSignatureEnabled\": true,\n      \"language\": \"en\",\n      \"distributionMethod\": \"EMAIL\",\n      \"emailSettings\": {\n        \"documentDeleted\": true,\n        \"documentPending\": true,\n        \"recipientSigned\": true,\n        \"recipientRemoved\": true,\n        \"documentCompleted\": true,\n        \"ownerDocumentCompleted\": true,\n        \"recipientSigningRequest\": true\n      }\n    },\n    \"recipients\": [\n      {\n        \"id\": 7,\n        \"documentId\": 7,\n        \"templateId\": null,\n        \"email\": \"mybirihix@mailinator.com\",\n        \"name\": \"Zorita Baird\",\n        \"token\": \"XkKx1HCs6Znm2UBJA2j6o\",\n        \"documentDeletedAt\": null,\n        \"expired\": null,\n        \"signedAt\": null,\n        \"authOptions\": { \"accessAuth\": null, \"actionAuth\": null },\n        \"signingOrder\": 1,\n        \"rejectionReason\": null,\n        \"role\": \"SIGNER\",\n        \"readStatus\": \"NOT_OPENED\",\n        \"signingStatus\": \"NOT_SIGNED\",\n        \"sendStatus\": \"SENT\"\n      }\n    ],\n    \"Recipient\": [\n      {\n        \"id\": 7,\n        \"documentId\": 7,\n        \"templateId\": null,\n        \"email\": \"signer@documenso.com\",\n        \"name\": \"Signer\",\n        \"token\": \"XkKx1HCs6Znm2UBJA2j6o\",\n        \"documentDeletedAt\": null,\n        \"expired\": null,\n        \"signedAt\": null,\n        \"authOptions\": { \"accessAuth\": null, \"actionAuth\": null },\n        \"signingOrder\": 1,\n        \"rejectionReason\": null,\n        \"role\": \"SIGNER\",\n        \"readStatus\": \"NOT_OPENED\",\n        \"signingStatus\": \"NOT_SIGNED\",\n        \"sendStatus\": \"SENT\"\n      }\n    ]\n  },\n  \"createdAt\": \"2025-01-27T11:03:27.730Z\",\n  \"webhookEndpoint\": \"https://mywebhooksite.com/mywebhook\"\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Plurals with Lingui Plural Component (TSX)\nDESCRIPTION: Demonstrates the basic usage of the `<Plural>` component to handle pluralization correctly based on a given value. It takes different strings for singular (`one`) and plural (`other`) cases, with `#` representing the value.\nSOURCE: https://github.com/documenso/documenso/blob/main/apps/documentation/pages/developers/local-development/translations.mdx#_snippet_3\n\nLANGUAGE: TSX\nCODE:\n```\n// Basic usage.\n<Plural one=\"1 Recipient\" other=\"# Recipients\" value={recipients.length} />\n```\n\n----------------------------------------\n\nTITLE: Embedding Signing Token in Angular (TypeScript)\nDESCRIPTION: This TypeScript code shows how to embed a document using the `EmbedSignDocument` component from the `@documenso/embed-angular` package. It requires a signing token passed as the `token` input.  The `token` prop is mandatory and should be replaced with an actual token. It also imports the necessary modules from `@angular/core` and `@documenso/embed-angular`. The component is then declared in the template, and a sample token is assigned.  Outputs a rendered signing document.\nSOURCE: https://github.com/documenso/documenso/blob/main/apps/documentation/pages/developers/embedding/angular.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Component } from '@angular/core';\nimport { EmbedSignDocument } from '@documenso/embed-angular';\n\n@Component({\n  selector: 'app-embedding',\n  template: `\n    <embed-sign-document [token]=\"token\" />\n  `,\n  standalone: true,\n  imports: [EmbedSignDocument],\n})\nexport class EmbeddingComponent {\n  token = 'YOUR_TOKEN_HERE'; // Replace with the actual token\n}\n```\n\n----------------------------------------\n\nTITLE: Translating Structured Text with Lingui Trans Component (HTML)\nDESCRIPTION: Shows how to use the `<Trans>` component to wrap a complete sentence that includes nested HTML elements, ensuring the entire message is correctly identified and extracted for translation.\nSOURCE: https://github.com/documenso/documenso/blob/main/apps/documentation/pages/developers/local-development/translations.mdx#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<h1>\n  <Trans>\n    This is one\n    <span className=\"text-foreground/60\">full</span>\n    <a href=\"https://documenso.com\">sentence</a>\n  </Trans>\n</h1>\n```\n\n----------------------------------------\n\nTITLE: Using Direct Link Signing via Shareable URL in Documenso - Bash\nDESCRIPTION: This bash code snippet demonstrates the URL format used for sharing documents through Documenso's direct link signing feature. The placeholder <random-generated-string> should be replaced by the actual unique identifier generated for each document link. Users receive and visit this URL to access the signing interface; no authentication is required unless the recipient has an account. No additional dependencies are needed for accessing the link. Output: an HTTP(S) GET request ready URL pointing to the Documenso signing page.\nSOURCE: https://github.com/documenso/documenso/blob/main/apps/documentation/pages/users/direct-links.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://app.documenso.com/d/<random-generated-string>\n```\n\n----------------------------------------\n\nTITLE: Self Hosting Deployment Workflow for Documenso\nDESCRIPTION: Guides users through cloning the repository, setting environment variables, installing dependencies, building, and starting the application locally for self-hosted deployment, with notes on port configuration.\nSOURCE: https://github.com/documenso/documenso/blob/main/README.md#_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nFirst, clone the code from Github:\n\n```\ngit clone https://github.com/documenso/documenso.git\n```\n\nThen, inside the `documenso` folder, copy the example env file:\n\n```\ncp .env.example .env\n```\n\nThe following environment variables must be set:\n\n- `NEXTAUTH_SECRET`\n- `NEXT_PUBLIC_WEBAPP_URL`\n- `NEXT_PRIVATE_DATABASE_URL`\n- `NEXT_PRIVATE_DIRECT_DATABASE_URL`\n- `NEXT_PRIVATE_SMTP_FROM_NAME`\n- `NEXT_PRIVATE_SMTP_FROM_ADDRESS`\n\n> If you are using a reverse proxy in front of Documenso, don't forget to provide the public URL for the `NEXT_PUBLIC_WEBAPP_URL` variable!\n\nNow you can install the dependencies and build it:\n\n```\nnpm i\nnpm run build:web\nnpm run prisma:migrate-deploy\n```\n\nFinally, start the application:\n\n```\ncd apps/web\nnpm run start\n```\n\nThis will run on `localhost:3000`. To use a different port, run:\n\n```\nnext -p <ANY PORT>\n```\n\nfrom within the `apps/web` folder.\n```\n\n----------------------------------------\n\nTITLE: Generate Document from Template API Payload\nDESCRIPTION: Specifies the JSON structure for generating a document from a template. Includes fields for metadata, recipients, authentication options, and form values, similar to creating a document directly. Requires the template ID and recipient IDs retrieved from the template details.\nSOURCE: https://github.com/documenso/documenso/blob/main/apps/documentation/pages/developers/public-api/reference.mdx#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"title\": \"string\",\n  \"externalId\": \"string\",\n  \"recipients\": [\n    {\n      \"id\": 0,\n      \"name\": \"string\",\n      \"email\": \"user@example.com\",\n      \"signingOrder\": 0\n    }\n  ],\n  \"meta\": {\n    \"subject\": \"string\",\n    \"message\": \"string\",\n    \"timezone\": \"string\",\n    \"dateFormat\": \"string\",\n    \"redirectUrl\": \"string\",\n    \"signingOrder\": \"PARALLEL\"\n  },\n  \"authOptions\": {\n    \"globalAccessAuth\": \"ACCOUNT\",\n    \"globalActionAuth\": \"ACCOUNT\"\n  },\n  \"formValues\": {\n    \"additionalProp1\": \"string\",\n    \"additionalProp2\": \"string\",\n    \"additionalProp3\": \"string\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Response: Retrieve Documenso Document Details\nDESCRIPTION: This JSON object is returned by a GET request to retrieve details of a specific document. It includes general document information (`id`, `status`, dates) and an array of `recipients` with their details, including the necessary `id` for adding fields.\nSOURCE: https://github.com/documenso/documenso/blob/main/apps/documentation/pages/developers/public-api/reference.mdx#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 137,\n  \"externalId\": null,\n  \"userId\": 3,\n  \"teamId\": null,\n  \"title\": \"documenso.pdf\",\n  \"status\": \"DRAFT\",\n  \"documentDataId\": \"<document-data-id>\",\n  \"createdAt\": \"2024-10-11T12:29:12.725Z\",\n  \"updatedAt\": \"2024-10-11T12:29:12.725Z\",\n  \"completedAt\": null,\n  \"recipients\": [\n    {\n      \"id\": 55,\n      \"documentId\": 137,\n      \"email\": \"ashdrew@email.com\",\n      \"name\": \"Ash Drew\",\n      \"role\": \"SIGNER\",\n      \"signingOrder\": null,\n      \"token\": \"<signing-token>\",\n      \"signedAt\": null,\n      \"readStatus\": \"NOT_OPENED\",\n      \"signingStatus\": \"NOT_SIGNED\",\n      \"sendStatus\": \"NOT_SENT\",\n      \"signingUrl\": \"https://app.documenso.com/sign/<signing-token>\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Starting the Application - npm\nDESCRIPTION: This command starts the Documenso application. It should be executed in the root directory of the project, after all setup steps are done.  The command utilizes `npm run dev`, a custom command probably defined in the project's package.json file. The expected output is the Documenso application running and accessible via a web browser, typically at http://localhost:3000.  Dependencies are the Documenso project, npm, and the prior execution of 'npm run dx'.\nSOURCE: https://github.com/documenso/documenso/blob/main/apps/documentation/pages/developers/local-development/quickstart.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Translating Basic Text with Lingui Trans Component (HTML)\nDESCRIPTION: Demonstrates the basic usage of the `<Trans>` component from `@lingui/react/macro` to wrap simple text content for translation extraction.\nSOURCE: https://github.com/documenso/documenso/blob/main/apps/documentation/pages/developers/local-development/translations.mdx#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<h1>\n  <Trans>Title</Trans>\n</h1>\n```\n\n----------------------------------------\n\nTITLE: Formatting Dates with Lingui i18n.date (TSX)\nDESCRIPTION: Shows how to use the `i18n.date` instance from `useLingui` within a `<Trans>` component to format dates according to the currently configured locale and specified options (e.g., `dateStyle: 'short'`).\nSOURCE: https://github.com/documenso/documenso/blob/main/apps/documentation/pages/developers/local-development/translations.mdx#_snippet_4\n\nLANGUAGE: TSX\nCODE:\n```\nimport { Trans } from '@lingui/macro';\nimport { useLingui } from '@lingui/react';\n\nexport const SomeComponent = () => {\n  const { i18n } = useLingui();\n\n  return <Trans>The current date is {i18n.date(new Date(), { dateStyle: 'short' })}</Trans>;\n};\n\n```\n\n----------------------------------------\n\nTITLE: Running a Documenso Docker Container - Bash\nDESCRIPTION: This snippet launches a Docker container for the Documenso application in detached mode, mapping host port 3000 to container port 3000, mounting the data volume, and setting the container name. It assumes a Docker image named documenso:latest has already been built and requires Docker to be installed. The command enables persistent storage and network configuration for local or registry-based deployments.\nSOURCE: https://github.com/documenso/documenso/blob/main/SIGNING.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d --restart=unless-stopped -p 3000:3000 -v documenso:/app/data --name documenso documenso:latest\n```\n\n----------------------------------------\n\nTITLE: Building the Documenso Project using npm (Bash)\nDESCRIPTION: Shows the command required to build the Documenso project using the Node Package Manager (npm). This command executes the 'build' script defined in the project's package.json file, which typically compiles source code, bundles assets, and prepares the application for deployment or testing. Contributors should ensure they can successfully run this command before creating pull requests.\nSOURCE: https://github.com/documenso/documenso/blob/main/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Defining the Custom Next.js App Component with Plausible Integration (TypeScript/JSX)\nDESCRIPTION: This React functional component serves as the custom App entry point in a Next.js application. It imports and utilizes the PlausibleProvider to wrap the currently rendered page (`Component`) along with its properties (`pageProps`), enabling application-wide Plausible analytics. Global styles from '../styles.css' are also imported.\nSOURCE: https://github.com/documenso/documenso/blob/main/apps/documentation/pages/_app.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PlausibleProvider } from '../providers/plausible.tsx';\nimport '../styles.css';\n\nexport default function App({ Component, pageProps }) {\n  return (\n    <PlausibleProvider>\n      <Component {...pageProps} />\n    </PlausibleProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning Documenso Repository - bash\nDESCRIPTION: This command clones the Documenso repository from your GitHub account to your local device.  It requires you to have forked the repository beforehand. The placeholder `<your-username>` should be replaced with your actual GitHub username. The output is the local copy of the repository on your machine.  No specific dependencies are required for this step, other than git and a forked repository.\nSOURCE: https://github.com/documenso/documenso/blob/main/apps/documentation/pages/developers/local-development/quickstart.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/<your-username>/documenso\n```\n\n----------------------------------------\n\nTITLE: Defining Volume Mount for Encryption Key File in Docker Compose YAML\nDESCRIPTION: This YAML snippet shows how to bind mount a local PKCS#12 key file into the Documenso Docker container, which is essential for signing and encrypting documents. Adjusting the path to point to the user's actual key file ensures the containerized application can access cryptographic material securely.\nSOURCE: https://github.com/documenso/documenso/blob/main/docker/README.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nvolumes:\\n  - /path/to/your/keyfile.p12:/opt/documenso/cert.p12\n```\n\n----------------------------------------\n\nTITLE: Cloning the Documenso Repository using Git - Shell\nDESCRIPTION: This shell snippet demonstrates how to clone the Documenso repository from GitHub to your local device. Dependencies include Git installed on your system and access to a terminal. Replace <your-username> with your GitHub handle to clone your fork. Expects GitHub authentication and network access; outputs a local copy of the repository in the working directory.\nSOURCE: https://github.com/documenso/documenso/blob/main/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/<your-username>/documenso\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Feature Branch in Git (Shell)\nDESCRIPTION: Demonstrates how to create and switch to a new Git branch for development work on the Documenso project. It suggests a naming convention including the type (e.g., 'feat'), the relevant issue ID (e.g., 'doc-999'), and a descriptive name for the feature or fix being implemented. This command should be run after cloning the repository locally.\nSOURCE: https://github.com/documenso/documenso/blob/main/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit checkout -b feat/doc-999-somefeature-that-rocks\n```\n\n----------------------------------------\n\nTITLE: Running Standalone Documenso Docker Container\nDESCRIPTION: Command to run the Documenso Docker container with all required environment variables and volume mounting for the certificate file. This configures the standalone container with database and SMTP settings.\nSOURCE: https://github.com/documenso/documenso/blob/main/apps/documentation/pages/developers/self-hosting/how-to.mdx#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d \\\n -p 3000:3000 \\\n -e NEXTAUTH_SECRET=\"<your-nextauth-secret>\"\n -e NEXT_PRIVATE_ENCRYPTION_KEY=\"<your-next-private-encryption-key>\"\n -e NEXT_PRIVATE_ENCRYPTION_SECONDARY_KEY=\"<your-next-private-encryption-secondary-key>\"\n -e NEXT_PUBLIC_WEBAPP_URL=\"<your-next-public-webapp-url>\"\n -e NEXT_PRIVATE_DATABASE_URL=\"<your-next-private-database-url>\"\n -e NEXT_PRIVATE_DIRECT_DATABASE_URL=\"<your-next-private-database-url>\"\n -e NEXT_PRIVATE_SMTP_TRANSPORT=\"<your-next-private-smtp-transport>\"\n -e NEXT_PRIVATE_SMTP_FROM_NAME=\"<your-next-private-smtp-from-name>\"\n -e NEXT_PRIVATE_SMTP_FROM_ADDRESS=\"<your-next-private-smtp-from-address>\"\n -v /path/to/your/keyfile.p12:/opt/documenso/cert.p12\n documenso/documenso\n```\n\n----------------------------------------\n\nTITLE: Webhook Payload for Document Created Event - Documenso JSON\nDESCRIPTION: This JSON payload represents the data sent to a webhook endpoint when a new document is created in Documenso. It includes full details about the document's initial state, such as title, status (DRAFT), metadata, and recipient information.\nSOURCE: https://github.com/documenso/documenso/blob/main/apps/documentation/pages/developers/webhooks.mdx#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"event\": \"DOCUMENT_CREATED\",\n  \"payload\": {\n    \"id\": 10,\n    \"externalId\": null,\n    \"userId\": 1,\n    \"authOptions\": null,\n    \"formValues\": null,\n    \"visibility\": \"EVERYONE\",\n    \"title\": \"documenso.pdf\",\n    \"status\": \"DRAFT\",\n    \"documentDataId\": \"hs8qz1ktr9204jn7mg6c5dxy0\",\n    \"createdAt\": \"2024-04-22T11:44:43.341Z\",\n    \"updatedAt\": \"2024-04-22T11:44:43.341Z\",\n    \"completedAt\": null,\n    \"deletedAt\": null,\n    \"teamId\": null,\n    \"templateId\": null,\n    \"source\": \"DOCUMENT\",\n    \"documentMeta\": {\n      \"id\": \"doc_meta_123\",\n      \"subject\": \"Please sign this document\",\n      \"message\": \"Hello, please review and sign this document.\",\n      \"timezone\": \"UTC\",\n      \"password\": null,\n      \"dateFormat\": \"MM/DD/YYYY\",\n      \"redirectUrl\": null,\n      \"signingOrder\": \"PARALLEL\",\n      \"typedSignatureEnabled\": true,\n      \"language\": \"en\",\n      \"distributionMethod\": \"EMAIL\",\n      \"emailSettings\": null\n    },\n    \"Recipient\": [\n      {\n        \"id\": 52,\n        \"documentId\": 10,\n        \"templateId\": null,\n        \"email\": \"signer@documenso.com\",\n        \"name\": \"John Doe\",\n        \"token\": \"vbT8hi3jKQmrFP_LN1WcS\",\n        \"documentDeletedAt\": null,\n        \"expired\": null,\n        \"signedAt\": null,\n        \"authOptions\": null,\n        \"signingOrder\": 1,\n        \"rejectionReason\": null,\n        \"role\": \"SIGNER\",\n        \"readStatus\": \"NOT_OPENED\",\n        \"signingStatus\": \"NOT_SIGNED\",\n        \"sendStatus\": \"NOT_SENT\"\n      }\n    ]\n  },\n  \"createdAt\": \"2024-04-22T11:44:44.779Z\",\n  \"webhookEndpoint\": \"https://mywebhooksite.com/mywebhook\"\n}\n```\n\n----------------------------------------\n\nTITLE: Webhook Payload for Document Sent Event - Documenso JSON\nDESCRIPTION: This JSON payload is sent when a document is sent to its recipients. The document status changes, and recipient details are included, showing their initial read and signing status and indicating the document has been sent.\nSOURCE: https://github.com/documenso/documenso/blob/main/apps/documentation/pages/developers/webhooks.mdx#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"event\": \"DOCUMENT_SENT\",\n  \"payload\": {\n    \"id\": 10,\n    \"externalId\": null,\n    \"userId\": 1,\n    \"authOptions\": null,\n    \"formValues\": null,\n    \"visibility\": \"EVERYONE\",\n    \"title\": \"documenso.pdf\",\n    \"status\": \"PENDING\",\n    \"documentDataId\": \"hs8qz1ktr9204jn7mg6c5dxy0\",\n    \"createdAt\": \"2024-04-22T11:44:43.341Z\",\n    \"updatedAt\": \"2024-04-22T11:48:07.569Z\",\n    \"completedAt\": null,\n    \"deletedAt\": null,\n    \"teamId\": null,\n    \"templateId\": null,\n    \"source\": \"DOCUMENT\",\n    \"documentMeta\": {\n      \"id\": \"doc_meta_123\",\n      \"subject\": \"Please sign this document\",\n      \"message\": \"Hello, please review and sign this document.\",\n      \"timezone\": \"UTC\",\n      \"password\": null,\n      \"dateFormat\": \"MM/DD/YYYY\",\n      \"redirectUrl\": null,\n      \"signingOrder\": \"PARALLEL\",\n      \"typedSignatureEnabled\": true,\n      \"language\": \"en\",\n      \"distributionMethod\": \"EMAIL\",\n      \"emailSettings\": null\n    },\n    \"Recipient\": [\n      {\n        \"id\": 52,\n        \"documentId\": 10,\n        \"templateId\": null,\n        \"email\": \"signer2@documenso.com\",\n        \"name\": \"Signer 2\",\n        \"token\": \"vbT8hi3jKQmrFP_LN1WcS\",\n        \"documentDeletedAt\": null,\n        \"expired\": null,\n        \"signedAt\": null,\n        \"authOptions\": null,\n        \"signingOrder\": 1,\n        \"rejectionReason\": null,\n        \"role\": \"VIEWER\",\n        \"readStatus\": \"NOT_OPENED\",\n        \"signingStatus\": \"NOT_SIGNED\",\n        \"sendStatus\": \"SENT\"\n      },\n      {\n        \"id\": 53,\n        \"documentId\": 10,\n        \"templateId\": null,\n        \"email\": \"signer1@documenso.com\",\n        \"name\": \"Signer 1\",\n        \"token\": \"HkrptwS42ZBXdRKj1TyUo\",\n        \"documentDeletedAt\": null,\n        \"expired\": null,\n        \"signedAt\": null,\n        \"authOptions\": null,\n        \"signingOrder\": 2,\n        \"rejectionReason\": null,\n        \"role\": \"SIGNER\",\n        \"readStatus\": \"NOT_OPENED\",\n        \"signingStatus\": \"NOT_SIGNED\",\n        \"sendStatus\": \"SENT\"\n      }\n    ]\n  },\n  \"createdAt\": \"2024-04-22T11:48:07.945Z\",\n  \"webhookEndpoint\": \"https://mywebhooksite.com/mywebhook\"\n}\n```\n\n----------------------------------------\n\nTITLE: PO File Translation Example\nDESCRIPTION: This snippet illustrates the structure of a PO file used for translations in Documenso.  It shows the `msgid` which is the original English text, and the `msgstr` which is the translated text. HTML-like tags such as `<0>` need to be preserved in both `msgid` and `msgstr` during translation.\nSOURCE: https://github.com/documenso/documenso/blob/main/apps/documentation/pages/developers/contributing/contributing-translations.mdx#_snippet_0\n\nLANGUAGE: po\nCODE:\n```\n#: apps/web/src/app/(signing)/sign/[token]/no-longer-available.tsx:61\nmsgid \"Want to send slick signing links like this one? <0>Check out Documenso.</0>\"\nmsgstr \"Möchten Sie auffällige Signatur-Links wie diesen senden? <0>Überprüfen Sie Documenso.</0>\"\n```\n\n----------------------------------------\n\nTITLE: Generating a Private RSA Key with OpenSSL - Bash\nDESCRIPTION: This snippet generates a 2048-bit RSA private key using OpenSSL via the command line and saves it as private.key. OpenSSL must be installed and available on your system. The command requires no additional parameters. The output is the private.key file, which is then used for generating a certificate.\nSOURCE: https://github.com/documenso/documenso/blob/main/SIGNING.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nopenssl genrsa -out private.key 2048\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting Email Reception Issues in Developer Quickstart\nDESCRIPTION: Explains that when using the developer quickstart, outgoing emails are captured via an embedded Inbucket server accessible through localhost, including UI and SMTP ports.\nSOURCE: https://github.com/documenso/documenso/blob/main/README.md#_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\nWhen using the developer quickstart, an [Inbucket](https://inbucket.org/) server will be spun up in a docker container that will store all outgoing emails locally for you to view.\n\nThe Web UI can be found at http://localhost:9000, while the SMTP port will be on localhost:2500.\n```\n\n----------------------------------------\n\nTITLE: Cloning Documenso Repository with Git\nDESCRIPTION: Command to clone the Documenso repository from GitHub to your local machine. This is the first step in the manual deployment process.\nSOURCE: https://github.com/documenso/documenso/blob/main/apps/documentation/pages/developers/self-hosting/how-to.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/documenso/documenso.git\n```\n\n----------------------------------------\n\nTITLE: Copying the Example Environment Config - Shell\nDESCRIPTION: This shell command copies the sample .env.example file to a new .env file to initialize environment variables for local development. Requires a Unix-like shell and read/write permissions in the directory. No parameters required. Outputs a new .env file with default configuration values.\nSOURCE: https://github.com/documenso/documenso/blob/main/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncp .env.example .env\n\n```\n\n----------------------------------------\n\nTITLE: Styling the EmbedCreateDocument Component with CSS\nDESCRIPTION: This snippet demonstrates how to customize the appearance of the embedded component using CSS classes, inline CSS, and CSS variables to match your application's design system.\nSOURCE: https://github.com/documenso/documenso/blob/main/apps/documentation/pages/developers/embedding/authoring.mdx#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<EmbedCreateDocument\n  className=\"h-screen w-full rounded-lg border-none shadow-md\"\n  presignToken=\"YOUR_PRESIGN_TOKEN\"\n  css={`\n    .documenso-embed {\n      border-radius: 8px;\n      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n    }\n  `}\n  cssVars={{\n    primary: '#0000FF',\n    background: '#F5F5F5',\n    radius: '8px',\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Seeding Database - npm/Prisma - bash\nDESCRIPTION: Runs the npm script to seed the database with initial or test data using Prisma. The `-w @documenso/prisma` flag targets a specific workspace within a monorepo structure to execute the seed script. This step is optional and useful for populating the database with sample data for development or testing.\nSOURCE: https://github.com/documenso/documenso/blob/main/apps/documentation/pages/developers/local-development/manual.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run prisma:seed -w @documenso/prisma\n```\n\n----------------------------------------\n\nTITLE: Required Environment Variables for Documenso\nDESCRIPTION: List of essential environment variables that need to be configured in the .env file for Documenso to function properly. These include authentication secrets, URLs, and email settings.\nSOURCE: https://github.com/documenso/documenso/blob/main/apps/documentation/pages/developers/self-hosting/how-to.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n- NEXTAUTH_SECRET\n- NEXT_PUBLIC_WEBAPP_URL\n- NEXT_PRIVATE_DATABASE_URL\n- NEXT_PRIVATE_DIRECT_DATABASE_URL\n- NEXT_PRIVATE_SMTP_FROM_NAME\n- NEXT_PRIVATE_SMTP_FROM_ADDRESS\n```\n\n----------------------------------------\n\nTITLE: Importing UI Component in Nextra/JavaScript\nDESCRIPTION: Imports the `Callout` component from the `nextra/components` library. This component is likely used for displaying highlighted information blocks within the documentation page, providing a standardized way to present notes, tips, or warnings. It is a standard JavaScript import statement used within a Nextra (React-based) documentation site.\nSOURCE: https://github.com/documenso/documenso/blob/main/apps/documentation/pages/users/fair-use.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Callout } from 'nextra/components';\n```\n\n----------------------------------------\n\nTITLE: Creating PKCS12 Certificate Bundle in Bash\nDESCRIPTION: This command combines the private key and certificate into a .p12 format file, which is required for document signing in Documenso. The -legacy flag ensures compatibility with older systems. Users will be prompted to set a password for the certificate.\nSOURCE: https://github.com/documenso/documenso/blob/main/apps/documentation/pages/developers/local-development/signing-certificate.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nopenssl pkcs12 -export -out certificate.p12 -inkey private.key -in certificate.crt -legacy\n```\n\n----------------------------------------\n\nTITLE: Deploying Documenso on Koyeb Cloud Platform\nDESCRIPTION: Offers a deployment button for Koyeb, guiding users to deploy the application via Koyeb's service with a Dockerfile from the GitHub repository.\nSOURCE: https://github.com/documenso/documenso/blob/main/README.md#_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n[![Deploy to Koyeb](https://www.koyeb.com/static/images/deploy/button.svg)](https://app.koyeb.com/deploy?type=git&repository=github.com/documenso/documenso&branch=main&name=documenso-app&builder=dockerfile&dockerfile=/docker/Dockerfile)\n```\n\n----------------------------------------\n\nTITLE: Running Documenso Containers Using Docker Compose with Environment File in Shell\nDESCRIPTION: This shell command starts Documenso and PostgreSQL containers in detached mode using Docker Compose, specifying the .env file containing confidential environment variables. It facilitates a production-like deployment by orchestrating multi-container setup with configured environments and mounted volumes.\nSOURCE: https://github.com/documenso/documenso/blob/main/docker/README.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ndocker-compose --env-file ./\\.env up -d\n```\n\n----------------------------------------\n\nTITLE: Creating Self-Signed Certificate with OpenSSL in Bash\nDESCRIPTION: This command generates a self-signed X.509 certificate using the previously created private key. The certificate will be valid for 365 days and is saved as certificate.crt. The user will be prompted to enter certificate details during execution.\nSOURCE: https://github.com/documenso/documenso/blob/main/apps/documentation/pages/developers/local-development/signing-certificate.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nopenssl req -new -x509 -key private.key -out certificate.crt -days 365\n```\n\n----------------------------------------\n\nTITLE: Managing Environment Variables in Package Scripts with with:env\nDESCRIPTION: Shows how to wrap npm or npx scripts with `with:env` to load environment variables from `.env` files, ensuring proper configuration within scripts.\nSOURCE: https://github.com/documenso/documenso/blob/main/README.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nnpm run with:env -- npm run myscript\n\nThe same can be done when using `npx`:\n\nnpm run with:env -- npx myscript\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Documenso Docker Setup in Shell\nDESCRIPTION: This snippet demonstrates how to define required environment variables in a .env file for the Documenso Docker Compose setup. It includes secrets for authentication, encryption keys, the web application URL, and SMTP credentials necessary for emailing. Users must replace placeholders with secure and valid values to ensure proper application operation, especially for authentication and SMTP email transport.\nSOURCE: https://github.com/documenso/documenso/blob/main/docker/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nNEXTAUTH_SECRET=\"<your-secret>\"\\nNEXT_PRIVATE_ENCRYPTION_KEY=\"<your-key>\"\\nNEXT_PRIVATE_ENCRYPTION_SECONDARY_KEY=\"<your-secondary-key>\"\\nNEXT_PUBLIC_WEBAPP_URL=\"<your-url>\"\\nNEXT_PRIVATE_SMTP_TRANSPORT=\"smtp-auth\"\\nNEXT_PRIVATE_SMTP_HOST=\"<your-host>\"\\nNEXT_PRIVATE_SMTP_PORT=<your-port>\\nNEXT_PRIVATE_SMTP_USERNAME=\"<your-username>\"\\nNEXT_PRIVATE_SMTP_PASSWORD=\"<your-password>\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Google OAuth in Documenso\nDESCRIPTION: Defines the necessary environment variables to authenticate Google OAuth in the Documenso application. These variables store the client ID and secret obtained from Google Cloud Console and are used during OAuth authentication flow.\nSOURCE: https://github.com/documenso/documenso/blob/main/apps/documentation/pages/developers/self-hosting/setting-up-oauth-providers.mdx#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nNEXT_PRIVATE_GOOGLE_CLIENT_ID=<your-client-id>\nNEXT_PRIVATE_GOOGLE_CLIENT_SECRET=<your-client-secret>\n```\n\n----------------------------------------\n\nTITLE: Cloning Repository - Git - bash\nDESCRIPTION: Clones the specified Documenso GitHub repository URL to the local machine using Git. Replace `<your-username>` with the actual GitHub username of the forked repository. This command requires Git to be installed and configured.\nSOURCE: https://github.com/documenso/documenso/blob/main/apps/documentation/pages/developers/local-development/manual.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/<your-username>/documenso\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Compose for Documenso\nDESCRIPTION: Command to start the Docker Compose configuration with the specified environment variables. This will launch both the PostgreSQL database and Documenso application containers.\nSOURCE: https://github.com/documenso/documenso/blob/main/apps/documentation/pages/developers/self-hosting/how-to.mdx#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose --env-file ./.env up -d\n```\n\n----------------------------------------\n\nTITLE: Deploying Documenso on Railway Cloud Platform\nDESCRIPTION: Provides a quick deployment button for Railway, a cloud hosting platform, enabling easy deployment of the application with preconfigured settings.\nSOURCE: https://github.com/documenso/documenso/blob/main/README.md#_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n[![Deploy on Railway](https://railway.app/button.svg)](https://railway.app/template/bG6D4p)\n```\n\n----------------------------------------\n\nTITLE: Deploying Documenso on Render Cloud Platform\nDESCRIPTION: Provides a deployment button for Render, facilitating one-click deployment from a specified repository to Render's hosting environment.\nSOURCE: https://github.com/documenso/documenso/blob/main/README.md#_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n[![Deploy to Render](https://render.com/images/deploy-to-render-button.svg)](https://render.com/deploy?repo=https://github.com/documenso/documenso)\n```\n\n----------------------------------------\n\nTITLE: Supporting IPv6 Deployment with Docker and Kubernetes\nDESCRIPTION: Provides commands for running the Docker container and Kubernetes deployment with IPv6 support by passing the `-H ::` parameter to the start command.\nSOURCE: https://github.com/documenso/documenso/blob/main/README.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it documenso:latest npm run start -- -H ::\n```\n\nLANGUAGE: yaml\nCODE:\n```\ncontainers:\n  - name: documenso\n    image: documenso:latest\n    imagePullPolicy: IfNotPresent\n    command:\n      - npm\n    args:\n      - run\n      - start\n      - --\n      - -H\n      - '::'\n```\n\n----------------------------------------\n\nTITLE: Generating RSA Private Key using OpenSSL in Bash\nDESCRIPTION: This command generates a 2048-bit RSA private key using OpenSSL, which will be used as the foundation for creating a signing certificate. The key is saved to a file named private.key.\nSOURCE: https://github.com/documenso/documenso/blob/main/apps/documentation/pages/developers/local-development/signing-certificate.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nopenssl genrsa -out private.key 2048\n```\n\n----------------------------------------\n\nTITLE: Implementing CallToAction Component in Markdown\nDESCRIPTION: This code snippet shows how to use the CallToAction component within a markdown document, setting a top margin and a UTM source parameter for tracking.\nSOURCE: https://github.com/documenso/documenso/blob/main/apps/documentation/pages/developers/self-hosting/index.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<CallToAction className=\"mt-12\" utmSource=\"self-hosting\" />\n```\n\n----------------------------------------\n\nTITLE: Importing CallToAction Component in React/JSX\nDESCRIPTION: This code snippet imports the CallToAction component from a relative path to be used in the markdown document. The component is later used with className and utmSource props.\nSOURCE: https://github.com/documenso/documenso/blob/main/apps/documentation/pages/developers/self-hosting/index.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { CallToAction } from '../../../components/call-to-action';\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Building Documenso\nDESCRIPTION: Commands to install project dependencies, build the web application, and run database migrations for Documenso deployment.\nSOURCE: https://github.com/documenso/documenso/blob/main/apps/documentation/pages/developers/self-hosting/how-to.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm i\nnpm run build:web\nnpm run prisma:migrate-deploy\n```\n\n----------------------------------------\n\nTITLE: Installing Documenso Embed Vue SDK\nDESCRIPTION: This command installs the Documenso Embed Vue SDK as a project dependency using npm. This allows the application to use the components and functionalities provided by the SDK.\nSOURCE: https://github.com/documenso/documenso/blob/main/apps/documentation/pages/developers/embedding/vue.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @documenso/embed-vue\n```\n\n----------------------------------------\n\nTITLE: Creating a New Git Branch with Issue ID\nDESCRIPTION: This code snippet demonstrates how to create a new git branch with a descriptive name, including a prefix indicating the type of change (feat/ for features, fix/ for bug fixes) and the issue ID. The example provided shows a feature branch for issue 1234.\nSOURCE: https://github.com/documenso/documenso/blob/main/apps/documentation/pages/developers/contributing/index.mdx#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit checkout -b feat/issue-id-your-branch-name\n\n## Example\ngit checkout -b feat/1234-add-share-button-to-articles\n```\n\n----------------------------------------\n\nTITLE: Starting the Development Environment - npm\nDESCRIPTION: This command starts a Postgres database and an inbucket mailserver in a docker container, setting up a development environment.  It is run within the root directory of the project. The command utilizes `npm run dx`, a custom command probably defined in the project's package.json file.  The expected output is the successful creation and start of the docker containers for the database and mail server. Dependencies include Docker, Docker Compose, and npm, along with the required project configuration.\nSOURCE: https://github.com/documenso/documenso/blob/main/apps/documentation/pages/developers/local-development/quickstart.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dx\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server\nDESCRIPTION: Command to start the development server with Hot Module Replacement (HMR). Once started, the application will be accessible at http://localhost:5173.\nSOURCE: https://github.com/documenso/documenso/blob/main/apps/remix/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Volume Binding Configuration\nDESCRIPTION: YAML configuration for binding the certificate file required for document signing and encryption in the Docker Compose setup.\nSOURCE: https://github.com/documenso/documenso/blob/main/apps/documentation/pages/developers/self-hosting/how-to.mdx#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nvolumes:\n  - /path/to/your/keyfile.p12:/opt/documenso/cert.p12\n```\n\n----------------------------------------\n\nTITLE: Running Documenso as a Systemd Service\nDESCRIPTION: Shows how to create a systemd service file for automating startup and management of the Documenso web application, including configuration parameters like port, user, and restart policies.\nSOURCE: https://github.com/documenso/documenso/blob/main/README.md#_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n[Unit]\nDescription=documenso\nAfter=network.target\n\n[Service]\nEnvironment=PATH=/path/to/your/node/binaries\nType=simple\nUser=www-data\nWorkingDirectory=/var/www/documenso/apps/web\nExecStart=/usr/bin/next start -p 3500\nTimeoutSec=15\nRestart=always\n\n[Install]\nWantedBy=multi-user.target\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with npm\nDESCRIPTION: Command to install the project dependencies using npm package manager.\nSOURCE: https://github.com/documenso/documenso/blob/main/apps/remix/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Building for Production\nDESCRIPTION: Command to create an optimized production build of the application.\nSOURCE: https://github.com/documenso/documenso/blob/main/apps/remix/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Docker Deployment Commands\nDESCRIPTION: Commands for building and running Docker containers with different package managers (npm, pnpm, bun). The template provides optimized Dockerfiles for each package manager.\nSOURCE: https://github.com/documenso/documenso/blob/main/apps/remix/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# For npm\ndocker build -t my-app .\n\n# For pnpm\ndocker build -f Dockerfile.pnpm -t my-app .\n\n# For bun\ndocker build -f Dockerfile.bun -t my-app .\n\n# Run the container\ndocker run -p 3000:3000 my-app\n```"
  }
]