[
  {
    "owner": "wordpress",
    "repo": "gutenberg",
    "content": "TITLE: Registering a Basic Block Type in Gutenberg using JavaScript\nDESCRIPTION: This snippet demonstrates how to register a custom block type called 'Gutenpride' using the registerBlockType function. It defines basic block properties including title, category, description, and icon, along with simple edit and save functions that render static content.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/platform-docs/docs/create-block/first-block-type.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createElement } from 'react';\nimport { registerBlockType } from '@wordpress/blocks';\n\nregisterBlockType( 'create-block/gutenpride', {\n\t// This is just a flag that tells the block editor that this block\n\t// is using the API version 3 (the latest block type API).\n\tapiVersion: 3,\n\n\t// This is the display title for your block type.\n\ttitle: 'Gutenpride',\n\n\t// This is the category this block type will be listed in.\n\t// Default categories include: text, media, design, widgets, theme and embed.\n\tcategory: 'widgets',\n\n\t// This is a short description for your block type.\n\t// It will be shown in various places in the Gutenberg user interface.\n\tdescription: 'Example static block scaffolded with Create Block tool.',\n\n\t// This is an icon for your block type.\n\ticon: (\n\t\t<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n\t\t\t<path d=\"M16.7 7.1l-6.3 8.5-3.3-2.5-.9 1.2 4.5 3.4L17.9 8z\" />\n\t\t</svg>\n\t),\n\n\tedit() {\n\t\treturn <p>Hello from the editor!</p>;\n\t},\n\n\tsave() {\n\t\treturn <p>Hello from the saved content!</p>;\n\t},\n} );\n```\n\n----------------------------------------\n\nTITLE: Scaffolding a WordPress Block Plugin with create-block\nDESCRIPTION: This command uses npx to run the latest version of @wordpress/create-block, creating a new block plugin named 'todo-list'. After creation, it changes the directory to the newly created plugin folder.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/getting-started/devenv/get-started-with-create-block.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @wordpress/create-block@latest todo-list\ncd todo-list\n```\n\n----------------------------------------\n\nTITLE: Aborting API Fetch Requests with AbortController\nDESCRIPTION: Shows how to abort an in-progress API Fetch request using the AbortController interface. Includes a fallback for browsers that don't support AbortController.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/api-fetch/README.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst controller =\n\ttypeof AbortController === 'undefined' ? undefined : new AbortController();\n\napiFetch( { path: '/wp/v2/posts', signal: controller?.signal } ).catch(\n\t( error ) => {\n\t\t// If the browser doesn't support AbortController then the code below will never log.\n\t\t// However, in most cases this should be fine as it can be considered to be a progressive enhancement.\n\t\tif ( error.name === 'AbortError' ) {\n\t\t\tconsole.log( 'Request has been aborted' );\n\t\t}\n\t}\n);\n\ncontroller?.abort();\n```\n\n----------------------------------------\n\nTITLE: Defining Allowed Child Blocks in Gutenberg\nDESCRIPTION: This JSON snippet demonstrates how to define allowed child blocks for a custom block. It uses the 'allowedBlocks' property to specify which blocks can be direct descendants of this block.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/block-tutorial/nested-blocks-inner-blocks.md#2025-04-21_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"title\": \"Navigation\",\n\t\"name\": \"core/navigation\",\n\t\"allowedBlocks\": [ \"core/navigation-link\", \"core/search\", \"core/social-links\", \"core/page-list\", \"core/spacer\" ],\n\t// ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Card Component with Sub-components in JSX\nDESCRIPTION: This snippet demonstrates how to use the Card component along with its sub-components CardHeader, CardBody, and CardFooter. It also shows the usage of experimental Text and Heading components.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/card/card/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n\tCard,\n\tCardHeader,\n\tCardBody,\n\tCardFooter,\n\t__experimentalText as Text,\n\t__experimentalHeading as Heading,\n} from '@wordpress/components';\n\nfunction Example() {\n\treturn (\n\t\t<Card>\n\t\t\t<CardHeader>\n\t\t\t\t<Heading level={ 4 }>Card Title</Heading>\n\t\t\t</CardHeader>\n\t\t\t<CardBody>\n\t\t\t\t<Text>Card Content</Text>\n\t\t\t</CardBody>\n\t\t\t<CardFooter>\n\t\t\t\t<Text>Card Footer</Text>\n\t\t\t</CardFooter>\n\t\t</Card>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Block Deprecation Example with Version Constants\nDESCRIPTION: Demonstrates how to structure multiple block deprecations using version constants in reverse chronological order.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-deprecation.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst v1 = {};\nconst v2 = {};\nconst v3 = {};\nconst deprecated = [ v3, v2, v1 ];\n```\n\n----------------------------------------\n\nTITLE: Template Locking in PHP\nDESCRIPTION: Shows how to implement template locking to prevent block manipulation. This example locks all operations on a paragraph block template.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-templates.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nfunction myplugin_register_template() {\n\t$post_type_object = get_post_type_object( 'post' );\n\t$post_type_object->template = array(\n\t\tarray( 'core/paragraph', array(\n\t\t\t'placeholder' => 'Add Description...',\n\t\t) ),\n\t);\n\t$post_type_object->template_lock = 'all';\n}\nadd_action( 'init', 'myplugin_register_template' );\n```\n\n----------------------------------------\n\nTITLE: Making POST Requests with API Fetch\nDESCRIPTION: Demonstrates how to make a POST request to update a WordPress post. This example specifies the HTTP method and includes a data object that will be sent as the request body.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/api-fetch/README.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\napiFetch( {\n\tpath: '/wp/v2/posts/1',\n\tmethod: 'POST',\n\tdata: { title: 'New Post Title' },\n} ).then( ( res ) => {\n\tconsole.log( res );\n} );\n```\n\n----------------------------------------\n\nTITLE: Registering Image Block Variation in PHP\nDESCRIPTION: Example of registering a custom 'wide-image' variation for the core/image block using the get_block_type_variations filter in PHP.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-variations.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nfunction my_custom_image_variation( $variations, $block_type ) {\n    // Only modify variations for the image block\n    if ( 'core/image' !== $block_type->name ) {\n        return $variations;\n    }\n\n    // Add a custom variation\n    $variations[] = array(\n\t\t'name'        => 'wide-image',\n\t\t'title'       => __( 'Wide image', 'textdomain' ),\n\t\t'description' => __( 'A wide image', 'textdomain' ),\n\t\t'scope'       => array( 'inserter' ),\n\t\t'isDefault'   => false,\n\t\t'attributes'  => array(\n\t\t\t'align' => 'wide', // Identifies the link type as custom\n\t\t),\n    );\n\n    return $variations;\n}\nadd_filter( 'get_block_type_variations', 'my_custom_image_variation', 10, 2 );\n```\n\n----------------------------------------\n\nTITLE: Rendering a Primary Button in React JSX\nDESCRIPTION: This snippet demonstrates how to import and use the Button component from the WordPress components library. It shows the basic usage of creating a primary button with a click handler.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/button/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Button } from '@wordpress/components';\nconst Mybutton = () => (\n  <Button\n    variant=\"primary\"\n    onClick={ handleClick }\n  >\n    Click here\n  </Button>\n);\n```\n\n----------------------------------------\n\nTITLE: Using Templates in InnerBlocks\nDESCRIPTION: This JavaScript code snippet demonstrates how to set up a default block template for InnerBlocks. The template specifies a predefined arrangement of blocks, including their attributes and placeholders, such as columns comprising an image and a paragraph with a placeholder. This allows predefined initial states for InnerBlocks.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/src/components/inner-blocks/README.md#2025-04-21_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst TEMPLATE = [ [ 'core/columns', {}, [\n    [ 'core/column', {}, [\n        [ 'core/image' ],\n    ] ],\n    [ 'core/column', {}, [\n        [ 'core/paragraph', { placeholder: 'Enter side content...' } ],\n    ] ],\n] ] ];\n...\n<InnerBlocks\n    template={ TEMPLATE }\n/>\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Block Variation\nDESCRIPTION: JavaScript code showing how to register a custom variation of the Media & Text block using the WordPress blocks API without a build process.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/getting-started/fundamentals/javascript-in-the-block-editor.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nwp.blocks.registerBlockVariation(\n\t'core/media-text',\n\t{\n\t\tname: 'media-text-custom',\n\t\ttitle: 'Media & Text Custom',\n\t\tattributes: {\n\t\t\talign: 'wide',\n\t\t\tbackgroundColor: 'tertiary'\n\t\t},\n\t}\n);\n```\n\n----------------------------------------\n\nTITLE: Using BoxControl Component in React\nDESCRIPTION: This example demonstrates how to use the BoxControl component in a React functional component. It shows setting up initial values and handling changes.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/box-control/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { BoxControl } from '@wordpress/components';\n\nfunction Example() {\n  const [ values, setValues ] = useState( {\n    top: '50px',\n    left: '10%',\n    right: '10%',\n    bottom: '50px',\n  } );\n\n  return (\n    <BoxControl\n      __next40pxDefaultSize\n      values={ values }\n      onChange={ setValues }\n    />\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Specifying Context Usage in Block JSON\nDESCRIPTION: Demonstrates how to declare which context values a block will inherit from an ancestor provider.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-metadata.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"usesContext\": [ \"message\" ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting AllowedBlocks in InnerBlocks\nDESCRIPTION: This JavaScript snippet demonstrates how to set the allowedBlocks property in InnerBlocks, which restricts the types of blocks that can be inserted. The example shows how to allow only image and paragraph blocks, enhancing control over the types of blocks allowed within the InnerBlocks area.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/src/components/inner-blocks/README.md#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst ALLOWED_BLOCKS = [ 'core/image', 'core/paragraph' ];\n...\n<InnerBlocks\n    allowedBlocks={ ALLOWED_BLOCKS }\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Async Actions with Generators in JavaScript for WordPress Gutenberg\nDESCRIPTION: This code snippet demonstrates how to implement async actions using generators in the WordPress Gutenberg Interactivity API. It shows how to properly handle context and state in asynchronous operations.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/api-reference.md#2025-04-21_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nconst { state } = store( 'myPlugin', {\n\tstate: {\n\t\tget isOpen() {\n\t\t\treturn getContext().isOpen;\n\t\t},\n\t},\n\tactions: {\n\t\tsomeAction: function* () {\n\t\t\tstate.isOpen; // This context is correct because it's synchronous.\n\t\t\tyield longDelay(); // With generators, the caller controls when to resume this function.\n\t\t\tstate.isOpen; // This context is correct because we restored the proper scope before we resumed the function.\n\t\t},\n\t},\n} );\n```\n\n----------------------------------------\n\nTITLE: Implementing Save Markup with useBlockProps.save() in JavaScript\nDESCRIPTION: This code snippet shows how to use useBlockProps.save() in the save function of a block to ensure proper rendering of block classes and attributes when the block is saved to the database. It includes both the Edit and save functions for context.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/getting-started/fundamentals/block-wrapper.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst Edit = () => <p { ...useBlockProps() }>Hello World - Block Editor</p>;\nconst save = () => <p { ...useBlockProps.save() }>Hello World - Frontend</p>;\n\nregisterBlockType( ..., {\n\tedit: Edit,\n\tsave,\n} );\n```\n\n----------------------------------------\n\nTITLE: Block Examples Implementation in JavaScript\nDESCRIPTION: Provides practical examples of block objects including a paragraph block, separator block, and a nested columns block. This demonstrates how blocks are structured in memory during editing.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/explanations/architecture/data-flow.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// A simple paragraph block.\nconst paragraphBlock1 = {\n\tclientId: '51828be1-5f0d-4a6b-8099-f4c6f897e0a3',\n\ttype: 'core/paragraph',\n\tattributes: {\n\t\tcontent: 'This is the <strong>content</strong> of the paragraph block',\n\t\tdropCap: true,\n\t},\n};\n\n// A separator block.\nconst separatorBlock = {\n\tclientId: '51828be1-5f0d-4a6b-8099-f4c6f897e0a4',\n\ttype: 'core/separator',\n\tattributes: {},\n};\n\n// A columns block with a paragraph block on each column.\nconst columnsBlock = {\n\tclientId: '51828be1-5f0d-4a6b-8099-f4c6f897e0a7',\n\ttype: 'core/columns',\n\tattributes: {},\n\tinnerBlocks: [\n\t\t{\n\t\t\tclientId: '51828be1-5f0d-4a6b-8099-f4c6f897e0a5',\n\t\t\ttype: 'core/column',\n\t\t\tattributes: {},\n\t\t\tinnerBlocks: [ paragraphBlock1 ],\n\t\t},\n\t\t{\n\t\t\tclientId: '51828be1-5f0d-4a6b-8099-f4c6f897e0a6',\n\t\t\ttype: 'core/column',\n\t\t\tattributes: {},\n\t\t\tinnerBlocks: [ paragraphBlock2 ],\n\t\t},\n\t],\n};\n```\n\n----------------------------------------\n\nTITLE: Registering Plugin using ESNext\nDESCRIPTION: This code snippet shows how to register a plugin with the Gutenberg editor using ESNext syntax. It utilizes `PluginSidebar` and `PluginSidebarMoreMenuItem` components from `@wordpress/editor` to create a sidebar plugin. The `registerPlugin` function from `@wordpress/plugins` registers the plugin with specified configurations, including an icon, a render function (which returns the React components for the sidebar), and a scope.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/plugins/README.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n\"// Using ESNext syntax\nimport { PluginSidebar, PluginSidebarMoreMenuItem } from '@wordpress/editor';\nimport { registerPlugin } from '@wordpress/plugins';\nimport { more } from '@wordpress/icons';\n\nconst Component = () => (\n\t<>\n\t\t<PluginSidebarMoreMenuItem target=\"sidebar-name\">\n\t\t\tMy Sidebar\n\t\t</PluginSidebarMoreMenuItem>\n\t\t<PluginSidebar name=\"sidebar-name\" title=\"My Sidebar\">\n\t\t\tContent of the sidebar\n\t\t</PluginSidebar>\n\t</>\n);\n\nregisterPlugin( 'plugin-name', {\n\ticon: more,\n\trender: Component,\n\tscope: 'my-page',\n} );\"\n```\n\n----------------------------------------\n\nTITLE: Installing NVM on Mac/Linux via curl\nDESCRIPTION: Command to download and install Node Version Manager (nvm) using curl. This is the recommended installation method for Mac and Linux systems to manage Node.js versions.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/getting-started/devenv/nodejs-development-environment.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.5/install.sh | bash\n```\n\n----------------------------------------\n\nTITLE: Implementing Component Logic with Hooks in TypeScript\nDESCRIPTION: Demonstrates how to extract component logic into a custom hook and use it in a React component. This pattern enables reusability and composition in Gutenberg components.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/CONTRIBUTING.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// in `hook.ts`\nfunction useExampleComponent(\n\tprops: PolymorphicComponentProps< ExampleProps, 'div' >\n) {\n\t// Merge received props with the context system.\n\tconst { isVisible, className, ...otherProps } = useContextSystem(\n\t\tprops,\n\t\t'Example'\n\t);\n\n\t// Any other reusable rendering logic (e.g. computing className, state, event listeners...)\n\tconst cx = useCx();\n\tconst classes = useMemo(\n\t\t() => cx( styles.example, isVisible && styles.visible, className ),\n\t\t[ className, isVisible ]\n\t);\n\n\treturn {\n\t\t...otherProps,\n\t\tclassName: classes,\n\t};\n}\n\n// in `component.tsx`\nfunction Example(\n\tprops: PolymorphicComponentProps< ExampleProps, 'div' >,\n\tforwardedRef: React.ForwardedRef< any >\n) {\n\tconst exampleProps = useExampleComponent( props );\n\n\treturn <View { ...spacerProps } ref={ forwardedRef } />;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Block Editor with React\nDESCRIPTION: This JavaScript snippet demonstrates how to instantiate a block editor using React. It imports components from @wordpress/block-editor and builds an editor layout with BlockEditorProvider and BlockCanvas. It requires registration of block types and React setup.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/README.md#2025-04-21_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { useState } from 'react';\nimport {\n\tBlockCanvas,\n\tBlockEditorProvider,\n\tBlockList,\n} from '@wordpress/block-editor';\n\nfunction MyEditorComponent() {\n\tconst [ blocks, updateBlocks ] = useState( [] );\n\n\treturn (\n\t\t<BlockEditorProvider\n\t\t\tvalue={ blocks }\n\t\t\tonInput={ ( blocks ) => updateBlocks( blocks ) }\n\t\t\tonChange={ ( blocks ) => updateBlocks( blocks ) }\n\t\t>\n\t\t\t<BlockCanvas height=\"400px\" />\n\t\t</BlockEditorProvider>\n\t);\n}\n\n// Make sure to load the block editor stylesheets too\n// import '@wordpress/components/build-style/style.css';\n// import '@wordpress/block-editor/build-style/style.css';\n```\n\n----------------------------------------\n\nTITLE: Transforming Paragraph to Heading Block in WordPress Gutenberg\nDESCRIPTION: Demonstrates how to transform a Paragraph block to a Heading block using the 'block' type transformation. It uses the createBlock function from the wp-blocks package.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-transforms.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ntransforms: {\n    from: [\n        {\n            type: 'block',\n            blocks: [ 'core/paragraph' ],\n            transform: ( { content } ) => {\n                return createBlock( 'core/heading', {\n                    content,\n                } );\n            },\n        },\n    ]\n},\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Slot/Fill Pattern with SlotFillProvider in React\nDESCRIPTION: Demonstrates how to use SlotFillProvider, Slot, and Fill components together to enable portal rendering. The example creates a panel with a slot that can be filled from elsewhere in the component tree.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/slot-fill/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n\tSlotFillProvider,\n\tSlot,\n\tFill,\n\tPanel,\n\tPanelBody,\n} from '@wordpress/components';\n\nconst MySlotFillProvider = () => {\n\tconst MyPanelSlot = () => (\n\t\t<Panel header=\"Panel with slot\">\n\t\t\t<PanelBody>\n\t\t\t\t<Slot name=\"MyPanelSlot\" />\n\t\t\t</PanelBody>\n\t\t</Panel>\n\t);\n\n\tMyPanelSlot.Content = () => <Fill name=\"MyPanelSlot\">Panel body</Fill>;\n\n\treturn (\n\t\t<SlotFillProvider>\n\t\t\t<MyPanelSlot />\n\t\t\t<MyPanelSlot.Content />\n\t\t</SlotFillProvider>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing TextControl Component in React for WordPress Gutenberg\nDESCRIPTION: This snippet demonstrates how to create a TextControl for inputting an additional CSS class. It uses React's useState hook to manage the value of the input and passes the necessary props to the TextControl component.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/text-control/README.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\nimport { TextControl } from '@wordpress/components';\n\nconst MyTextControl = () => {\n\tconst [ className, setClassName ] = useState( '' );\n\n\treturn (\n\t\t<TextControl\n\t\t\t__nextHasNoMarginBottom\n\t\t\t__next40pxDefaultSize\n\t\t\tlabel=\"Additional CSS Class\"\n\t\t\tvalue={ className }\n\t\t\tonChange={ ( value ) => setClassName( value ) }\n\t\t/>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Registering All Core Blocks in WordPress Gutenberg\nDESCRIPTION: Registers all block types from the WordPress block library using the registerCoreBlocks function. This allows access to all core blocks in your application.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/platform-docs/docs/basic-concepts/block-library.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { registerCoreBlocks } from '@wordpress/block-library';\n\nregisterCoreBlocks();\n```\n\n----------------------------------------\n\nTITLE: Implementing ComboboxControl with Filtered Options in React\nDESCRIPTION: This snippet demonstrates how to use the ComboboxControl component with dynamic filtering of options based on user input. It includes state management for the selected value and filtered options.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/combobox-control/README.md#2025-04-21_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport { useState } from 'react';\nimport { ComboboxControl } from '@wordpress/components';\n\nconst options = [\n\t{\n\t\tvalue: 'small',\n\t\tlabel: 'Small',\n\t},\n\t{\n\t\tvalue: 'normal',\n\t\tlabel: 'Normal',\n\t},\n\t{\n\t\tvalue: 'large',\n\t\tlabel: 'Large',\n\t},\n];\n\nfunction MyComboboxControl() {\n\tconst [ fontSize, setFontSize ] = useState();\n\tconst [ filteredOptions, setFilteredOptions ] = useState( options );\n\treturn (\n\t\t<ComboboxControl\n\t\t\t__next40pxDefaultSize\n\t\t\t__nextHasNoMarginBottom\n\t\t\tlabel=\"Font Size\"\n\t\t\tvalue={ fontSize }\n\t\t\tonChange={ setFontSize }\n\t\t\tisLoading={ isLoading }\n\t\t\toptions={ filteredOptions }\n\t\t\tonFilterValueChange={ ( inputValue ) =>\n\t\t\t\tsetFilteredOptions(\n\t\t\t\t\toptions.filter( ( option ) =>\n\t\t\t\t\t\toption.value === inputValue\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t}\n\t\t/>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Edit Function for Gutenberg Block in JSX\nDESCRIPTION: Demonstrates the basic structure of an edit function for a Gutenberg block, including the use of useBlockProps hook to handle block wrapper properties.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-edit-save.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useBlockProps } from '@wordpress/block-editor';\n\n// ...\nconst blockSettings = {\n\tapiVersion: 3,\n\n\t// ...\n\n\tedit: () => {\n\t\tconst blockProps = useBlockProps();\n\n\t\treturn <div { ...blockProps }>Your block.</div>;\n\t},\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing RichText Component in a WordPress Block\nDESCRIPTION: A complete example showing how to implement the RichText component in a WordPress block. The code demonstrates registering a block type with RichText in both the edit and save functions, allowing users to create editable headings with bold and italic formatting options.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/richtext.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { registerBlockType } from '@wordpress/blocks';\nimport { useBlockProps, RichText } from '@wordpress/block-editor';\n\nregisterBlockType( /* ... */, {\n\t// ...\n\n\tattributes: {\n\t\tcontent: {\n\t\t\ttype: 'string',\n\t\t\tsource: 'html',\n\t\t\tselector: 'h2',\n\t\t},\n\t},\n\n\tedit( { attributes, setAttributes } ) {\n\t\tconst blockProps = useBlockProps();\n\n\t\treturn (\n\t\t\t<RichText\n\t\t\t\t{ ...blockProps }\n\t\t\t\ttagName=\"h2\" // The tag here is the element output and editable in the admin\n\t\t\t\tvalue={ attributes.content } // Any existing content, either from the database or an attribute default\n\t\t\t\tallowedFormats={ [ 'core/bold', 'core/italic' ] } // Allow the content to be made bold or italic, but do not allow other formatting options\n\t\t\t\tonChange={ ( content ) => setAttributes( { content } ) } // Store updated content as a block attribute\n\t\t\t\tplaceholder={ __( 'Heading...' ) } // Display this text before any content has been added by the user\n\t\t\t/>\n\t\t);\n\t},\n\n\tsave( { attributes } ) {\n\t\tconst blockProps = useBlockProps.save();\n\n\t\treturn <RichText.Content { ...blockProps } tagName=\"h2\" value={ attributes.content } />; // Saves <h2>Content added in the editor...</h2> to the database for frontend display\n\t}\n} );\n```\n\n----------------------------------------\n\nTITLE: Configuring Spacing Support in Gutenberg Blocks\nDESCRIPTION: Example showing how to enable spacing controls (margin, padding, blockGap) for a Gutenberg block. These controls allow users to adjust spacing properties through the block editor UI.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-supports.md#2025-04-21_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nsupports: {\n    spacing: {\n        margin: true,  // Enable margin UI control.\n        padding: true, // Enable padding UI control.\n        blockGap: true,  // Enables block spacing UI control for blocks that also use `layout`.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Block in JavaScript\nDESCRIPTION: Demonstrates how to register a new block type with a unique name using the registerBlockType function.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-registration.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Registering my block with a unique name\nregisterBlockType( 'my-plugin/book', {} );\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Block Save Function in JavaScript\nDESCRIPTION: Creates a save function that returns JSX markup for a block's saved content. This function uses useBlockProps.save() to apply the necessary block wrapper attributes.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/getting-started/tutorial.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useBlockProps } from '@wordpress/block-editor';\n\nexport default function save() {\n\treturn (\n\t\t<p { ...useBlockProps.save() }>\n\t\t\t{ 'Copyright Date Block – hello from the saved content!' }\n\t\t</p>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Block Type Using block.json Metadata\nDESCRIPTION: Example showing how to register a Gutenberg block using metadata loaded from block.json file. Uses registerBlockType from @wordpress/blocks package with imported metadata and Edit component.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-metadata.md#2025-04-21_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nimport { registerBlockType } from '@wordpress/blocks';\nimport Edit from './edit';\nimport metadata from './block.json';\n\nregisterBlockType( metadata, {\n\tedit: Edit,\n\t// ...other client-side settings\n} );\n```\n\n----------------------------------------\n\nTITLE: Defining Interactive Markup with WordPress Directives\nDESCRIPTION: HTML markup that utilizes WordPress Interactivity API directives. It shows how to connect HTML elements to the global state, including class binding, visibility control, and text interpolation.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/core-concepts/undestanding-global-state-local-context-and-derived-state.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div\n\tdata-wp-interactive=\"myPlugin\"\n\tdata-wp-class--is-dark-theme=\"state.isDarkTheme\"\n\tclass=\"my-plugin\"\n>\n\t<div data-wp-bind--hidden=\"!state.show\">\n\t\tHello <span data-wp-text=\"state.helloText\"></span>\n\t</div>\n\t<button data-wp-on-async--click=\"actions.toggle\">Toggle</button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using withSelect HOC for State-Derived Props\nDESCRIPTION: Demonstrates the use of withSelect HOC to inject state-derived props into a component using registered selectors.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/data/README.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nimport { withSelect } from '@wordpress/data';\nimport { store as myCustomStore } from 'my-custom-store';\n\nfunction PriceDisplay( { price, currency } ) {\n\treturn new Intl.NumberFormat( 'en-US', {\n\t\tstyle: 'currency',\n\t\tcurrency,\n\t} ).format( price );\n}\n\nconst HammerPriceDisplay = withSelect( ( select, ownProps ) => {\n\tconst { getPrice } = select( myCustomStore );\n\tconst { currency } = ownProps;\n\n\treturn {\n\t\tprice: getPrice( 'hammer', currency ),\n\t};\n} )( PriceDisplay );\n\n// Rendered in the application:\n//\n//  <HammerPriceDisplay currency=\"USD\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing DeletePageButton with Error Handling in React\nDESCRIPTION: This snippet shows the implementation of a DeletePageButton component that handles page deletion, displays success or error notifications using the WordPress notices store, and integrates with the core data store for entity operations.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/data-basics/5-adding-a-delete-button.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useEffect } from 'react';\nimport { store as noticesStore } from '@wordpress/notices';\nfunction DeletePageButton( { pageId } ) {\n\tconst { createSuccessNotice, createErrorNotice } = useDispatch( noticesStore );\n\t// useSelect returns a list of selectors if you pass the store handle\n\t// instead of a callback:\n\tconst { getLastEntityDeleteError } = useSelect( coreDataStore )\n\tconst handleDelete = async () => {\n\t\tconst success = await deleteEntityRecord( 'postType', 'page', pageId);\n\t\tif ( success ) {\n\t\t\t// Tell the user the operation succeeded:\n\t\t\tcreateSuccessNotice( \"The page was deleted!\", {\n\t\t\t\ttype: 'snackbar',\n\t\t\t} );\n\t\t} else {\n\t\t\t// We use the selector directly to get the fresh error *after* the deleteEntityRecord\n\t\t\t// have failed.\n\t\t\tconst lastError = getLastEntityDeleteError( 'postType', 'page', pageId );\n\t\t\tconst message = ( lastError?.message || 'There was an error.' ) + ' Please refresh the page and try again.'\n\t\t\t// Tell the user how exactly the operation has failed:\n\t\t\tcreateErrorNotice( message, {\n\t\t\t\ttype: 'snackbar',\n\t\t\t} );\n\t\t}\n\t}\n\t// ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using isSelected Property in Edit Function\nDESCRIPTION: Shows how to use the isSelected property to conditionally render content when a block is selected in the editor.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-edit-save.md#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nedit: ( { attributes, isSelected } ) => {\n\tconst blockProps = useBlockProps();\n\n\treturn (\n\t\t<div { ...blockProps }>\n\t\t\tYour block.\n\t\t\t{ isSelected && (\n\t\t\t\t<span>Shows only when the block is selected.</span>\n\t\t\t) }\n\t\t</div>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Block Deprecation with Attribute Changes\nDESCRIPTION: Illustrates how to deprecate a block by renaming attributes and updating markup, using the migrate function to transform old attributes to new format.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-deprecation.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { registerBlockType } = wp.blocks;\n\nregisterBlockType( 'gutenberg/block-with-deprecated-version', {\n\t// ... other block properties go here\n\n\tattributes: {\n\t\tcontent: {\n\t\t\ttype: 'string',\n\t\t\tdefault: 'some random value',\n\t\t},\n\t},\n\n\tsave( props ) {\n\t\treturn <div>{ props.attributes.content }</div>;\n\t},\n\n\tdeprecated: [\n\t\t{\n\t\t\tattributes: {\n\t\t\t\ttext: {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tdefault: 'some random value',\n\t\t\t\t},\n\t\t\t},\n\n\t\t\tmigrate( { text } ) {\n\t\t\t\treturn {\n\t\t\t\t\tcontent: text,\n\t\t\t\t};\n\t\t\t},\n\n\t\t\tsave( props ) {\n\t\t\t\treturn <p>{ props.attributes.text }</p>;\n\t\t\t},\n\t\t},\n\t],\n} );\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Block from User Input in WordPress Gutenberg\nDESCRIPTION: Demonstrates a 'prefix' type transformation that creates a custom 'question' block when the user types a question mark followed by a space.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-transforms.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ntransforms: {\n\tfrom: [\n\t\t{\n\t\t\ttype: 'prefix',\n\t\t\tprefix: '?',\n\t\t\ttransform( content ) {\n\t\t\t\treturn createBlock( 'my-plugin/question', {\n\t\t\t\t\tcontent,\n\t\t\t\t} );\n\t\t\t},\n\t\t},\n\t];\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Block Title and Description\nDESCRIPTION: Shows how to set the display title and description for a custom block using translation functions.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-registration.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Our data object\ntitle: __( 'Book' );\n```\n\nLANGUAGE: javascript\nCODE:\n```\ndescription: __( 'Block showing a Book card.' );\n```\n\n----------------------------------------\n\nTITLE: Defining Block Transforms in WordPress Gutenberg\nDESCRIPTION: Example of how to define block transforms in the block configuration. It shows the structure for 'from' and 'to' transformations.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-transforms.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const settings = {\n\ttitle: 'My Block Title',\n\tdescription: 'My block description',\n\t/* ... */\n\ttransforms: {\n\t\tfrom: [\n\t\t\t/* supported from transforms */\n\t\t],\n\t\tto: [\n\t\t\t/* supported to transforms */\n\t\t],\n\t},\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Draggable Component in React\nDESCRIPTION: This example demonstrates how to use the Draggable component to create a draggable panel with a custom drag handle. It utilizes WordPress components like Panel and PanelBody, and includes an icon for the drag handle.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/draggable/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Draggable, Panel, PanelBody } from '@wordpress/components';\nimport { Icon, more } from '@wordpress/icons';\n\nconst MyDraggable = () => (\n\t<div id=\"draggable-panel\">\n\t\t<Panel header=\"Draggable panel\">\n\t\t\t<PanelBody>\n\t\t\t\t<Draggable elementId=\"draggable-panel\" transferData={ {} }>\n\t\t\t\t\t{ ( { onDraggableStart, onDraggableEnd } ) => (\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tclassName=\"example-drag-handle\"\n\t\t\t\t\t\t\tdraggable\n\t\t\t\t\t\t\tonDragStart={ onDraggableStart }\n\t\t\t\t\t\t\tonDragEnd={ onDraggableEnd }\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<Icon icon={ more } />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t) }\n\t\t\t\t</Draggable>\n\t\t\t</PanelBody>\n\t\t</Panel>\n\t</div>\n);\n```\n\n----------------------------------------\n\nTITLE: Example Block Definitions in JavaScript\nDESCRIPTION: Demonstrates how different types of blocks are defined in JavaScript, including a simple paragraph block, a separator block, and a complex columns block with nested inner blocks.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/platform-docs/docs/basic-concepts/data.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// A simple paragraph block.\nconst paragraphBlock1 = {\n\tclientId: '51828be1-5f0d-4a6b-8099-f4c6f897e0a3',\n\ttype: 'core/paragraph',\n\tattributes: {\n\t\tcontent: 'This is the <strong>content</strong> of the paragraph block',\n\t\tdropCap: true,\n\t},\n};\n\n// A separator block.\nconst separatorBlock = {\n\tclientId: '51828be1-5f0d-4a6b-8099-f4c6f897e0a4',\n\ttype: 'core/separator',\n\tattributes: {},\n};\n\n// A columns block with a paragraph block on each column.\nconst columnsBlock = {\n\tclientId: '51828be1-5f0d-4a6b-8099-f4c6f897e0a7',\n\ttype: 'core/columns',\n\tattributes: {},\n\tinnerBlocks: [\n\t\t{\n\t\t\tclientId: '51828be1-5f0d-4a6b-8099-f4c6f897e0a5',\n\t\t\ttype: 'core/column',\n\t\t\tattributes: {},\n\t\t\tinnerBlocks: [ paragraphBlock1 ],\n\t\t},\n\t\t{\n\t\t\tclientId: '51828be1-5f0d-4a6b-8099-f4c6f897e0a6',\n\t\t\ttype: 'core/column',\n\t\t\tattributes: {},\n\t\t\tinnerBlocks: [ paragraphBlock2 ],\n\t\t},\n\t],\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing Block Attributes in Edit Function\nDESCRIPTION: Demonstrates how to access the defined attributes within the block's edit function using the attributes prop.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-attributes.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction YourBlockEdit( { attributes } ) {\n\treturn (\n\t\t<p>URL is { attributes.url }, title is { attributes.title }, and size is { attributes.size }.</p>\n\t)\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Block Preview with Inner Blocks\nDESCRIPTION: Demonstrates how to include inner blocks in the block preview example.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-registration.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nexample: {\n\tattributes: {\n\t\tcover: 'https://example.com/image.jpg',\n\t},\n\tinnerBlocks: [\n\t\t{\n\t\t\tname: 'core/paragraph',\n\t\t\tattributes: {\n\t\t\t\t/* translators: example text. */\n\t\t\t\tcontent: __(\n\t\t\t\t\t'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Praesent et eros eu felis.'\n\t\t\t\t),\n\t\t\t},\n\t\t},\n\t],\n},\n```\n\n----------------------------------------\n\nTITLE: Implementing WordPress Page Form Components with React and Data Store Integration\nDESCRIPTION: Comprehensive implementation of three React components (CreatePageForm, EditPageForm, and PageForm) that handle page creation and editing in WordPress. Uses WordPress data store hooks (useSelect, useDispatch) for state management and entity operations. Includes form validation, loading states, and error handling.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/data-basics/4-building-a-create-page-form.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction CreatePageForm( { onCancel, onSaveFinished } ) {\n\tconst [title, setTitle] = useState();\n\tconst { lastError, isSaving } = useSelect(\n\t\t( select ) => ( {\n\t\t\tlastError: select( coreDataStore )\n\t\t\t\t.getLastEntitySaveError( 'postType', 'page' ),\n\t\t\tisSaving: select( coreDataStore )\n\t\t\t\t.isSavingEntityRecord( 'postType', 'page' ),\n\t\t} ),\n\t\t[]\n\t);\n\n\tconst { saveEntityRecord } = useDispatch( coreDataStore );\n\tconst handleSave = async () => {\n\t\tconst savedRecord = await saveEntityRecord(\n\t\t\t'postType',\n\t\t\t'page',\n\t\t\t{ title, status: 'publish' }\n\t\t);\n\t\tif ( savedRecord ) {\n\t\t\tonSaveFinished();\n\t\t}\n\t};\n\n\treturn (\n\t\t<PageForm\n\t\t\ttitle={ title }\n\t\t\tonChangeTitle={ setTitle }\n\t\t\thasEdits={ !!title }\n\t\t\tonSave={ handleSave }\n\t\t\tlastError={ lastError }\n\t\t\tonCancel={ onCancel }\n\t\t\tisSaving={ isSaving }\n\t\t/>\n\t);\n}\n\nfunction EditPageForm( { pageId, onCancel, onSaveFinished } ) {\n\tconst { page, lastError, isSaving, hasEdits } = useSelect(\n\t\t( select ) => ( {\n\t\t\tpage: select( coreDataStore ).getEditedEntityRecord( 'postType', 'page', pageId ),\n\t\t\tlastError: select( coreDataStore ).getLastEntitySaveError( 'postType', 'page', pageId ),\n\t\t\tisSaving: select( coreDataStore ).isSavingEntityRecord( 'postType', 'page', pageId ),\n\t\t\thasEdits: select( coreDataStore ).hasEditsForEntityRecord( 'postType', 'page', pageId ),\n\t\t} ),\n\t\t[pageId]\n\t);\n\n\tconst { saveEditedEntityRecord, editEntityRecord } = useDispatch( coreDataStore );\n\tconst handleSave = async () => {\n\t\tconst savedRecord = await saveEditedEntityRecord( 'postType', 'page', pageId );\n\t\tif ( savedRecord ) {\n\t\t\tonSaveFinished();\n\t\t}\n\t};\n\tconst handleChange = ( title ) => editEntityRecord( 'postType', 'page', page.id, { title } );\n\n\treturn (\n\t\t<PageForm\n\t\t\ttitle={ page.title }\n\t\t\tonChangeTitle={ handleChange }\n\t\t\thasEdits={ hasEdits }\n\t\t\tlastError={ lastError }\n\t\t\tisSaving={ isSaving }\n\t\t\tonCancel={ onCancel }\n\t\t\tonSave={ handleSave }\n\t\t/>\n\t);\n}\n\nfunction PageForm( { title, onChangeTitle, hasEdits, lastError, isSaving, onCancel, onSave } ) {\n\treturn (\n\t\t<div className=\"my-gutenberg-form\">\n\t\t\t<TextControl\n\t\t\t\t__nextHasNoMarginBottom\n\t\t\t\t__next40pxDefaultSize\n\t\t\t\tlabel=\"Page title:\"\n\t\t\t\tvalue={ title }\n\t\t\t\tonChange={ onChangeTitle }\n\t\t\t/>\n\t\t\t{ lastError ? (\n\t\t\t\t<div className=\"form-error\">Error: { lastError.message }</div>\n\t\t\t) : (\n\t\t\t\tfalse\n\t\t\t) }\n\t\t\t<div className=\"form-buttons\">\n\t\t\t\t<Button\n\t\t\t\t\tonClick={ onSave }\n\t\t\t\t\tvariant=\"primary\"\n\t\t\t\t\tdisabled={ !hasEdits || isSaving }\n\t\t\t\t>\n\t\t\t\t\t{ isSaving ? (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<Spinner/>\n\t\t\t\t\t\t\tSaving\n\t\t\t\t\t\t</>\n\t\t\t\t\t) : 'Save' }\n\t\t\t\t</Button>\n\t\t\t\t<Button\n\t\t\t\t\tonClick={ onCancel }\n\t\t\t\t\tvariant=\"tertiary\"\n\t\t\t\t\tdisabled={ isSaving }\n\t\t\t\t>\n\t\t\t\t\tCancel\n\t\t\t\t</Button>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Editor Markup with useBlockProps() in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the useBlockProps() hook to define the outer markup of a block in the Edit component. It shows how to register a block type with an Edit function that applies the necessary attributes to the block wrapper.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/getting-started/fundamentals/block-wrapper.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Edit = () => <p { ...useBlockProps() }>Hello World - Block Editor</p>;\n\nregisterBlockType( ..., {\n\tedit: Edit\n} );\n```\n\n----------------------------------------\n\nTITLE: Defining Block Metadata in block.json for WordPress Gutenberg\nDESCRIPTION: This JSON snippet demonstrates a comprehensive example of a block.json file used to define metadata for a custom 'Notice' block in WordPress Gutenberg. It includes various properties such as API version, name, title, category, attributes, and asset file references.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-metadata.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"$schema\": \"https://schemas.wp.org/trunk/block.json\",\n\t\"apiVersion\": 3,\n\t\"name\": \"my-plugin/notice\",\n\t\"title\": \"Notice\",\n\t\"category\": \"text\",\n\t\"parent\": [ \"core/group\" ],\n\t\"icon\": \"star\",\n\t\"description\": \"Shows warning, error or success notices...\",\n\t\"keywords\": [ \"alert\", \"message\" ],\n\t\"version\": \"1.0.3\",\n\t\"textdomain\": \"my-plugin\",\n\t\"attributes\": {\n\t\t\"message\": {\n\t\t\t\"type\": \"string\",\n\t\t\t\"source\": \"html\",\n\t\t\t\"selector\": \".message\"\n\t\t}\n\t},\n\t\"providesContext\": {\n\t\t\"my-plugin/message\": \"message\"\n\t},\n\t\"usesContext\": [ \"groupId\" ],\n\t\"selectors\": {\n\t\t\"root\": \".wp-block-my-plugin-notice\"\n\t},\n\t\"supports\": {\n\t\t\"align\": true\n\t},\n\t\"styles\": [\n\t\t{ \"name\": \"default\", \"label\": \"Default\", \"isDefault\": true },\n\t\t{ \"name\": \"other\", \"label\": \"Other\" }\n\t],\n\t\"example\": {\n\t\t\"attributes\": {\n\t\t\t\"message\": \"This is a notice!\"\n\t\t}\n\t},\n\t\"variations\": [\n\t\t{\n\t\t\t\"name\": \"example\",\n\t\t\t\"title\": \"Example\",\n\t\t\t\"attributes\": {\n\t\t\t\t\"message\": \"This is an example!\"\n\t\t\t}\n\t\t}\n\t],\n\t\"editorScript\": \"file:./index.js\",\n\t\"script\": \"file:./script.js\",\n\t\"viewScript\": [ \"file:./view.js\", \"example-shared-view-script\" ],\n\t\"editorStyle\": \"file:./index.css\",\n\t\"style\": [ \"file:./style.css\", \"example-shared-style\" ],\n\t\"viewStyle\": [ \"file:./view.css\", \"example-view-style\" ],\n\t\"render\": \"file:./render.php\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Client-Side Store in JavaScript for WordPress Gutenberg\nDESCRIPTION: This code shows how to set up a client-side store with actions and callbacks using the WordPress Gutenberg Interactivity API in a view.js file.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/api-reference.md#2025-04-21_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nimport { store, getContext } from '@wordpress/interactivity';\n\nstore( 'myPlugin', {\n\tactions: {\n\t\ttoggle: () => {\n\t\t\tconst context = getContext();\n\t\t\tcontext.isOpen = ! context.isOpen;\n\t\t},\n\t},\n\tcallbacks: {\n\t\tlogIsOpen: () => {\n\t\t\tconst { isOpen } = getContext();\n\t\t\t// Log the value of `isOpen` each time it changes.\n\t\t\tconsole.log( `Is open: ${ isOpen }` );\n\t\t},\n\t},\n} );\n```\n\n----------------------------------------\n\nTITLE: Setting up Block Editor with React and Gutenberg components\nDESCRIPTION: This JSX snippet demonstrates how to create a basic block editor using the Gutenberg components. It imports necessary components like `BlockEditorProvider` and `BlockCanvas` from `@wordpress/block-editor`, and imports base styles from `@wordpress/components` and `@wordpress/block-library`. It initializes the editor with an empty array of blocks and renders the `BlockCanvas` within the `BlockEditorProvider` to enable editing.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/platform-docs/docs/intro.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from \"react\";\nimport {\n  BlockEditorProvider,\n  BlockCanvas,\n} from \"@wordpress/block-editor\";\n\n// Base styles for the content within the block canvas iframe.\nimport componentsStyles from \"@wordpress/components/build-style/style.css?raw\";\nimport blockEditorContentStyles from \"@wordpress/block-editor/build-style/content.css?raw\";\nimport blocksStyles from \"@wordpress/block-library/build-style/style.css?raw\";\nimport blocksEditorStyles from \"@wordpress/block-library/build-style/editor.css?raw\";\n\nconst contentStyles = [\n  { css: componentsStyles },\n  { css: blockEditorContentStyles },\n  { css: blocksStyles },\n  { css: blocksEditorStyles },\n];\n\nexport default function Editor() {\n  const [ blocks, setBlocks ] = useState( [] );\n  return (\n    /*\n      The BlockEditorProvider is the wrapper of the block editor's state.\n      All the UI elements of the block editor need to be rendered within this provider.\n    */\n    <BlockEditorProvider\n      value={ blocks }\n      onChange={ setBlocks }\n      onInput={ setBlocks }\n    >\n      { /*\n        The BlockCanvas component renders the block list within an iframe\n        and wires up all the necessary events to make the block editor work.\n      */ }\n      <BlockCanvas height=\"500px\" styles={ contentStyles } />\n    </BlockEditorProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Generating WordPress Block Plugin with Create Block\nDESCRIPTION: Quick start command to scaffold a new WordPress block plugin using npx, creating a todo list block in a new directory\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/create-block/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npx @wordpress/create-block@latest todo-list\n$ cd todo-list\n$ npm start\n```\n\n----------------------------------------\n\nTITLE: Updating Block Registration to Include Save Function\nDESCRIPTION: Updates the block registration code to import and use the save function. This enables static rendering for the block, allowing it to save its content to the database.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/getting-started/tutorial.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nimport save from './save';\n\n...\n\nregisterBlockType( metadata.name, {\n\ticon: calendarIcon,\n\tedit: Edit,\n\tsave\n} );\n```\n\n----------------------------------------\n\nTITLE: Reading and Writing Meta Attributes in Gutenberg Block Editor\nDESCRIPTION: This code snippet shows how to read and write meta attributes within a Gutenberg block's edit function. It uses the attributes and setAttributes props to handle the attribute value.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-attributes.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nedit( { attributes, setAttributes } ) {\n\tfunction onChange( event ) {\n\t\tsetAttributes( { author: event.target.value } );\n\t}\n\n\treturn <input value={ attributes.author } onChange={ onChange } type=\"text\" />;\n},\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Fruit Autocompleter in WordPress Gutenberg\nDESCRIPTION: JavaScript implementation of a custom fruits autocompleter that adds emoji-based fruit suggestions to the paragraph block. Defines a completer object with trigger prefix, options, and handling functions, then hooks it into the editor using WordPress filters.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/autocomplete/README.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n( function () {\n\tconst fruits = {\n\t\tname: 'fruit',\n\t\ttriggerPrefix: '~',\n\t\toptions: [\n\t\t\t{ visual: '🍎', name: 'Apple', id: 1 },\n\t\t\t{ visual: '🍊', name: 'Orange', id: 2 },\n\t\t\t{ visual: '🍇', name: 'Grapes', id: 3 },\n\t\t\t{ visual: '🥭', name: 'Mango', id: 4 },\n\t\t\t{ visual: '🍓', name: 'Strawberry', id: 5 },\n\t\t\t{ visual: '🫐', name: 'Blueberry', id: 6 },\n\t\t\t{ visual: '🍒', name: 'Cherry', id: 7 },\n\t\t],\n\t\tgetOptionLabel: ( option ) => `${ option.visual } ${ option.name }`,\n\t\tgetOptionKeywords: ( option ) => [ option.name ],\n\t\tisOptionDisabled: ( option ) => option.name === 'Grapes',\n\t\tgetOptionCompletion: ( option ) => option.visual,\n\t};\n\n\tfunction appendTestCompleters( completers, blockName ) {\n\t\treturn blockName === 'core/paragraph'\n\t\t\t? [ ...completers, fruits ]\n\t\t\t: completers;\n\t}\n\n\twp.hooks.addFilter(\n\t\t'editor.Autocomplete.completers',\n\t\t'fruit-test/fruits',\n\t\tappendTestCompleters,\n\t\t11\n\t);\n} )();\n```\n\n----------------------------------------\n\nTITLE: Using setAttribute with Updater Function\nDESCRIPTION: Demonstrates how to use setAttribute with an updater function for more complex attribute updates.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-edit-save.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// Toggle a setting when the user clicks the button.\nconst toggleSetting = () =>\n\tsetAttributes( ( currentAttr ) => ( {\n\t\tmySetting: ! currentAttr.mySetting,\n\t} ) );\n\n// Add item to the list.\nconst addListItem = ( newListItem ) =>\n\tsetAttributes( ( currentAttr ) => ( {\n\t\tlist: [ ...currentAttr.list, newListItem ],\n\t} ) );\n```\n\n----------------------------------------\n\nTITLE: Implementing DropZone Component in React\nDESCRIPTION: This snippet demonstrates how to use the DropZone component from @wordpress/components. It creates a drop zone that updates state when an item is dropped, displaying different text based on the drop status.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/drop-zone/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { DropZone } from '@wordpress/components';\n\nconst MyDropZone = () => {\n\tconst [ hasDropped, setHasDropped ] = useState( false );\n\n\treturn (\n\t\t<div>\n\t\t\t{ hasDropped ? 'Dropped!' : 'Drop something here' }\n\t\t\t<DropZone\n\t\t\t\tonFilesDrop={ () => setHasDropped( true ) }\n\t\t\t\tonHTMLDrop={ () => setHasDropped( true ) }\n\t\t\t\tonDrop={ () => setHasDropped( true ) }\n\t\t\t/>\n\t\t</div>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Block Type in JavaScript\nDESCRIPTION: Shows how to register a new block type with a unique name and object defining its behavior. This example creates a simple block with edit and save functions.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/blocks/README.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { __ } from '@wordpress/i18n';\nimport { registerBlockType } from '@wordpress/blocks';\n\nregisterBlockType( 'namespace/block-name', {\n\ttitle: __( 'My First Block' ),\n\tedit: () => <div>{ __( 'Hello from the editor!' ) }</div>,\n\tsave: () => <div>Hello from the saved content!</div>,\n} );\n```\n\n----------------------------------------\n\nTITLE: Binding HTML Attributes with wp-bind\nDESCRIPTION: This example illustrates the wp-bind directive for dynamically binding HTML attributes to context values. It reacts to state changes to update attributes conditionally, such as toggling menus.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/api-reference.md#2025-04-21_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<li data-wp-context='{ \"isMenuOpen\": false }'>\n\t<button data-wp-on--click=\"actions.toggleMenu\" data-wp-bind--aria-expanded=\"context.isMenuOpen\">Toggle</button>\n\t<div data-wp-bind--hidden=\"!context.isMenuOpen\">\n\t\t<span>Title</span>\n\t\t<ul>SUBMENU ITEMS</ul>\n\t</div>\n</li>\n```\n\n----------------------------------------\n\nTITLE: Registering 404 Template Pattern in PHP\nDESCRIPTION: Example of registering a WordPress block pattern specifically for 404 template pages using the templateTypes property.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/curating-the-editor-experience/patterns.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nregister_block_pattern(\n  'wp-my-theme/404-template-pattern',\n  array(\n      'title'         => __( '404 Only template pattern', 'wp-my-theme' ),\n      'templateTypes' => array( '404' ),\n      'content'       => '<!-- wp:paragraph {\"align\":\"center\",\"fontSize\":\"x-large\"} --><p class=\"has-text-align-center has-x-large-font-size\">404 pattern</p><!-- /wp:paragraph -->',\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: Complete EditPageForm Component Implementation (JSX)\nDESCRIPTION: This code snippet provides the complete implementation of the EditPageForm component, including all the features discussed in the document.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/data-basics/3-building-an-edit-form.md#2025-04-21_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useDispatch } from '@wordpress/data';\nimport { Button, Modal, TextControl } from '@wordpress/components';\n\nfunction PageEditButton( { pageId } ) {\n\tconst [ isOpen, setOpen ] = useState( false );\n\tconst openModal = () => setOpen( true );\n\tconst closeModal = () => setOpen( false );\n\treturn (\n\t\t<>\n\t\t\t<Button onClick={ openModal } variant=\"primary\">\n\t\t\t\tEdit\n\t\t\t</Button>\n\t\t\t{ isOpen && (\n\t\t\t\t<Modal onRequestClose={ closeModal } title=\"Edit page\">\n\t\t\t\t\t<EditPageForm\n\t\t\t\t\t\tpageId={ pageId }\n\t\t\t\t\t\tonCancel={ closeModal }\n\t\t\t\t\t\tonSaveFinished={ closeModal }\n\t\t\t\t\t/>\n\t\t\t\t</Modal>\n\t\t\t) }\n\t\t</>\n\t);\n}\n\nfunction EditPageForm( { pageId, onCancel, onSaveFinished } ) {\n\tconst { page, lastError, isSaving, hasEdits } = useSelect(\n\t\t( select ) => ( {\n\t\t\tpage: select( coreDataStore ).getEditedEntityRecord( 'postType', 'page', pageId ),\n\t\t\tlastError: select( coreDataStore ).getLastEntitySaveError( 'postType', 'page', pageId ),\n\t\t\tisSaving: select( coreDataStore ).isSavingEntityRecord( 'postType', 'page', pageId ),\n\t\t\thasEdits: select( coreDataStore ).hasEditsForEntityRecord( 'postType', 'page', pageId ),\n\t\t} ),\n\t\t[ pageId ]\n\t);\n\n\tconst { saveEditedEntityRecord, editEntityRecord } = useDispatch( coreDataStore );\n\tconst handleSave = async () => {\n\t\tconst savedRecord = await saveEditedEntityRecord( 'postType', 'page', pageId );\n\t\tif ( savedRecord ) {\n\t\t\tonSaveFinished();\n\t\t}\n\t};\n\tconst handleChange = ( title ) =>  editEntityRecord( 'postType', 'page', page.id, { title } );\n\n\treturn (\n\t\t<div className=\"my-gutenberg-form\">\n\t\t\t<TextControl\n\t\t\t\t__nextHasNoMarginBottom\n\t\t\t\t__next40pxDefaultSize\n\t\t\t\tlabel=\"Page title:\"\n\t\t\t\tvalue={ page.title }\n\t\t\t\tonChange={ handleChange }\n\t\t\t/>\n\t\t\t{ lastError ? (\n\t\t\t\t<div className=\"form-error\">Error: { lastError.message }</div>\n\t\t\t) : (\n\t\t\t\tfalse\n\t\t\t) }\n\t\t\t<div className=\"form-buttons\">\n\t\t\t\t<Button\n\t\t\t\t\tonClick={ handleSave }\n\t\t\t\t\tvariant=\"primary\"\n\t\t\t\t\tdisabled={ ! hasEdits || isSaving }\n\t\t\t\t>\n\t\t\t\t\t{ isSaving ? (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<Spinner/>\n\t\t\t\t\t\t\tSaving\n\t\t\t\t\t\t</>\n\t\t\t\t\t) : 'Save' }\n\t\t\t\t</Button>\n\t\t\t\t<Button\n\t\t\t\t\tonClick={ onCancel }\n\t\t\t\t\tvariant=\"tertiary\"\n\t\t\t\t\tdisabled={ isSaving }\n\t\t\t\t>\n\t\t\t\t\tCancel\n\t\t\t\t</Button>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Providing Context in Block JSON\nDESCRIPTION: Shows how to define context that can be accessed by descendant blocks, mapping a context name to a block attribute.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-metadata.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"providesContext\": {\n\t\t\"my-plugin/recordId\": \"recordId\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Dispatching API Fetch in Gutenberg\nDESCRIPTION: This JavaScript snippet shows how to dispatch a control action using the apiFetch function from the @wordpress/data-controls package. The purpose is to trigger an API fetch call, with a request object provided as a parameter, and handle the returned control descriptor.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/data-controls/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { apiFetch } from '@wordpress/data-controls';\n\n// Action generator using apiFetch\nexport function* myAction() {\n\tconst path = '/v2/my-api/items';\n\tconst items = yield apiFetch( { path } );\n\t// do something with the items.\n}\n```\n\n----------------------------------------\n\nTITLE: Running JavaScript Tests with NPM\nDESCRIPTION: Command to run JavaScript tests using NPM in the Gutenberg project. This command executes both unit tests and code linting.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/testing-overview.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Rendering a RangeControl\nDESCRIPTION: This snippet demonstrates how to implement a RangeControl component using React hooks. It allows users to select a number of columns between 2 and 10. Changes to the selection update the state immediately, reflecting the selected value in the user interface.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/range-control/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { RangeControl } from '@wordpress/components';\n\nconst MyRangeControl = () => {\n\tconst [ columns, setColumns ] = useState( 2 );\n\n\treturn (\n\t\t<RangeControl\n\t\t\t__nextHasNoMarginBottom\n\t\t\t__next40pxDefaultSize\n\t\t\tlabel=\"Columns\"\n\t\t\tvalue={ columns }\n\t\t\tonChange={ ( value ) => setColumns( value ) }\n\t\t\tmin={ 2 }\n\t\t\tmax={ 10 }\n\t\t/>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Complete RichText Block Implementation\nDESCRIPTION: Shows full implementation of a custom block using RichText component, including block registration, edit function, and save function with proper attribute handling.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/src/components/rich-text/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { registerBlockType } from '@wordpress/blocks';\nimport { RichText } from '@wordpress/block-editor';\n\nregisterBlockType( /* ... */, {\n\t// ...\n\n\tattributes: {\n\t\tcontent: {\n\t\t\tsource: 'html',\n\t\t\tselector: 'h2',\n\t\t},\n\t},\n\n\tedit( { className, attributes, setAttributes } ) {\n\t\treturn (\n\t\t\t<RichText\n\t\t\t\ttagName=\"h2\"\n\t\t\t\tclassName={ className }\n\t\t\t\tidentifier=\"content\"\n\t\t\t\tvalue={ attributes.content }\n\t\t\t\tonChange={ ( content ) => setAttributes( { content } ) }\n\t\t\t/>\n\t\t);\n\t},\n\n\tsave( { attributes } ) {\n\t\treturn <RichText.Content tagName=\"h2\" value={ attributes.content } />;\n\t}\n} );\n```\n\n----------------------------------------\n\nTITLE: Using Disabled component to disable form inputs in React\nDESCRIPTION: This code snippet demonstrates how to use the `<Disabled>` component to disable a `TextControl` within a React component.  It uses a state variable `isDisabled` to toggle the disabled state and wraps the `TextControl` with `<Disabled>` when `isDisabled` is true. It also includes a button to toggle the disabled state.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/disabled/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { Button, Disabled, TextControl } from '@wordpress/components';\n\nconst MyDisabled = () => {\n\tconst [ isDisabled, setIsDisabled ] = useState( true );\n\n\tlet input = (\n\t\t<TextControl\n\t\t\t__next40pxDefaultSize\n\t\t\t__nextHasNoMarginBottom\n\t\t\tlabel=\"Input\"\n\t\t\tonChange={ () => {} }\n\t\t/>\n\t);\n\tif ( isDisabled ) {\n\t\tinput = <Disabled>{ input }</Disabled>;\n\t}\n\n\tconst toggleDisabled = () => {\n\t\tsetIsDisabled( ( state ) => ! state );\n\t};\n\n\treturn (\n\t\t<div>\n\t\t\t{ input }\n\t\t\t<Button variant=\"primary\" onClick={ toggleDisabled }>\n\t\t\t\tToggle Disabled\n\t\t\t</Button>\n\t\t</div>\n\t);\n};\n\n```\n\n----------------------------------------\n\nTITLE: Setting Default Values for Gutenberg Block Attributes\nDESCRIPTION: These JavaScript snippets show how to set default values for different types of Gutenberg block attributes. Examples are provided for string, array, and object attribute types.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-attributes.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n{\n\ttype: 'string',\n\tdefault: 'hello world'\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n\ttype: 'array',\n\tdefault: [\n\t\t{ \"url\": \"https://lorempixel.com/1200/800/\", \"alt\": \"large image\" },\n    \t{ \"url\": \"https://lorempixel.com/50/50/\", \"alt\": \"small image\" }\n\t]\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n\ttype: 'object',\n\tdefault: {\n\t\twidth: 100,\n\t\ttitle: 'title'\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Gradient Support in WordPress Gutenberg\nDESCRIPTION: This snippet shows how to enable gradient background support for a block in WordPress Gutenberg. It also disables default background and text color support.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-supports.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nsupports: {\n    color: {\n        gradients: true,\n        // Default values must be disabled if you don't want to use them with gradients.\n        background: false,\n        text: false\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Parent Block Relationship in Gutenberg\nDESCRIPTION: Demonstrates how to define a parent-child relationship between blocks using the parent property in block registration. This restricts the child block to only be available inside its parent block.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/platform-docs/docs/create-block/nested-blocks.md#2025-04-21_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n{\n\ttitle: 'Column',\n\tparent: [ 'core/columns' ],\n\t// ...\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Keywords for Block Discovery\nDESCRIPTION: Demonstrates how to add searchable keywords to make a block more discoverable in the editor.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-registration.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Make it easier to discover a block with keyword aliases.\n// These can be localised so your keywords work across locales.\nkeywords: [ __( 'image' ), __( 'photo' ), __( 'pics' ) ],\n```\n\n----------------------------------------\n\nTITLE: Creating a Controlled RadioGroup Component in React\nDESCRIPTION: This example demonstrates how to implement a controlled RadioGroup component with Radio buttons for selecting width percentages. It uses the useState hook to manage the selected value.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/radio-group/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport {\n\t__experimentalRadio as Radio,\n\t__experimentalRadioGroup as RadioGroup,\n} from '@wordpress/components';\n\nconst MyControlledRadioRadioGroup = () => {\n\tconst [ checked, setChecked ] = useState( '25' );\n\treturn (\n\t\t<RadioGroup label=\"Width\" onChange={ setChecked } checked={ checked }>\n\t\t\t<Radio __next40pxDefaultSize value=\"25\">25%</Radio>\n\t\t\t<Radio __next40pxDefaultSize value=\"50\">50%</Radio>\n\t\t\t<Radio __next40pxDefaultSize value=\"75\">75%</Radio>\n\t\t\t<Radio __next40pxDefaultSize value=\"100\">100%</Radio>\n\t\t</RadioGroup>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing withColors Higher-Order Component\nDESCRIPTION: A higher-order component that handles color logic for class generation, color value retrieval, and color attribute setting in Gutenberg blocks\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/src/components/colors/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nexport default compose(\n\twithColors( 'backgroundColor', { textColor: 'color' } ),\n\tMyColorfulComponent\n);\n```\n\n----------------------------------------\n\nTITLE: Declarative JavaScript Store Implementation for Interactivity API\nDESCRIPTION: This snippet shows how to implement the JavaScript store for a toggle functionality using the Interactivity API. It defines the actions that will be used by the directives in the HTML markup.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/iapi-about.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// view.js file\n \nimport { store, getContext } from \"@wordpress/interactivity\";\n \nstore( 'wpmovies', {\n  actions: {\n    toggle: () => {\n      const context = getContext();\n      context.isOpen = !context.isOpen;\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: HTML Block Binding Configuration for Image Block\nDESCRIPTION: Example of binding a random image URL to an Image block's url attribute using block metadata configuration.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-bindings.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- wp:image {\n\t\"metadata\":{\n\t\t\"bindings\":{\n\t\t\t\"url\":{\n\t\t\t\t\"source\":\"my-plugin/get-random-images\"\n\t\t\t}\n\t\t}\n\t}\n} -->\n```\n\n----------------------------------------\n\nTITLE: Using WordPress Gutenberg Hooks with createHooks\nDESCRIPTION: This code demonstrates how to import and use the `createHooks` function from the `@wordpress/hooks` package to create a custom hooks instance. This allows you to manage actions and filters within a specific object or context.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/hooks/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nimport { createHooks } from '@wordpress/hooks';\n\nmyObject.hooks = createHooks();\nmyObject.hooks.addAction(); //etc...\n```\n```\n\n----------------------------------------\n\nTITLE: Retrieving Taxonomy Information using getTaxonomy Selector in JavaScript\nDESCRIPTION: This example demonstrates how to use the getTaxonomy selector to fetch information for a specific taxonomy from the WordPress core data store.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useSelect } from '@wordpress/data';\nimport { store as coreDataStore } from '@wordpress/core-data';\n\nconst taxonomy = useSelect( ( select ) => {\n\treturn select( coreDataStore ).getTaxonomy( 'category' );\n\n\t// Equivalent to:\n\t// select( coreDataStore ).getEntityRecord( 'root', 'taxonomy', 'category' );\n} );\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Block Edit Function in React/JSX\nDESCRIPTION: Client-side implementation of a dynamic block that displays the latest post. Uses WordPress data API to fetch posts and render them in the editor.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/block-tutorial/creating-dynamic-blocks.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { registerBlockType } from '@wordpress/blocks';\nimport { useSelect } from '@wordpress/data';\nimport { useBlockProps } from '@wordpress/block-editor';\n\nregisterBlockType( 'gutenberg-examples/example-dynamic', {\n\tapiVersion: 3,\n\ttitle: 'Example: last post',\n\ticon: 'megaphone',\n\tcategory: 'widgets',\n\n\tedit: () => {\n\t\tconst blockProps = useBlockProps();\n\t\tconst posts = useSelect( ( select ) => {\n\t\t\treturn select( 'core' ).getEntityRecords( 'postType', 'post' );\n\t\t}, [] );\n\n\t\treturn (\n\t\t\t<div { ...blockProps }>\n\t\t\t\t{ ! posts && 'Loading' }\n\t\t\t\t{ posts && posts.length === 0 && 'No Posts' }\n\t\t\t\t{ posts && posts.length > 0 && (\n\t\t\t\t\t<a href={ posts[ 0 ].link }>\n\t\t\t\t\t\t{ posts[ 0 ].title.rendered }\n\t\t\t\t\t</a>\n\t\t\t\t) }\n\t\t\t</div>\n\t\t);\n\t},\n} );\n```\n\n----------------------------------------\n\nTITLE: Updating Block Attributes with setAttributes\nDESCRIPTION: Demonstrates how to use the setAttributes function to update block attributes based on user interactions.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-edit-save.md#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nedit: ( { attributes, setAttributes, isSelected } ) => {\n\tconst blockProps = useBlockProps();\n\n\t// Simplify access to attributes\n\tconst { content, mySetting } = attributes;\n\n\t// Toggle a setting when the user clicks the button\n\tconst toggleSetting = () => setAttributes( { mySetting: ! mySetting } );\n\treturn (\n\t\t<div { ...blockProps }>\n\t\t\t{ content }\n\t\t\t{ isSelected && (\n\t\t\t\t<button onClick={ toggleSetting }>Toggle setting</button>\n\t\t\t) }\n\t\t</div>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Panel Component in React\nDESCRIPTION: This code snippet demonstrates how to create a collapsible panel using React components from the '@wordpress/components' library. It includes a header with the text 'My Panel' and a 'PanelBody' with initial open state, an icon, and nested 'PanelRow' for inputs and labels. The 'more' icon is imported from '@wordpress/icons'.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/panel/README.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Panel, PanelBody, PanelRow } from '@wordpress/components';\nimport { more } from '@wordpress/icons';\n\nconst MyPanel = () => (\n\t<Panel header=\"My Panel\">\n\t\t<PanelBody title=\"My Block Settings\" icon={ more } initialOpen={ true }>\n\t\t\t<PanelRow>My Panel Inputs and Labels</PanelRow>\n\t\t</PanelBody>\n\t</Panel>\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Class to Block Wrapper in Edit Function\nDESCRIPTION: Shows how to add a custom class to the block wrapper by passing options to the useBlockProps hook in the edit function.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-edit-save.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useBlockProps } from '@wordpress/block-editor';\n\n// ...\nconst blockSettings = {\n\tapiVersion: 3,\n\n\t// ...\n\n\tedit: () => {\n\t\tconst blockProps = useBlockProps( {\n\t\t\tclassName: 'my-random-classname',\n\t\t} );\n\n\t\treturn <div { ...blockProps }>Your block.</div>;\n\t},\n};\n```\n\n----------------------------------------\n\nTITLE: Custom Suggestions Query in LinkControl\nDESCRIPTION: This snippet configures a custom suggestionsQuery for the <LinkControl> component to filter search results to post types like 'Page'. It requires React and a predefined suggestions query object. The primary parameter is suggestionsQuery, modifying the query's type and subtype attributes (e.g., 'post' and 'page', respectively). This influences search results accordingly.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/src/components/link-control/README.md#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<LinkControl\n\tsuggestionsQuery={ {\n\t\ttype: 'post',\n\t\tsubtype: 'page',\n\t} }\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing ButtonGroup with Buttons in React JSX\nDESCRIPTION: This snippet demonstrates how to import and use the ButtonGroup component along with Button components from the @wordpress/components package. It creates a custom MyButtonGroup component with two primary variant buttons.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/button-group/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Button, ButtonGroup } from '@wordpress/components';\n\nconst MyButtonGroup = () => (\n\t<ButtonGroup>\n\t\t<Button variant=\"primary\">Button 1</Button>\n\t\t<Button variant=\"primary\">Button 2</Button>\n\t</ButtonGroup>\n);\n```\n\n----------------------------------------\n\nTITLE: Using useSelect for Event Callbacks\nDESCRIPTION: Demonstrates how to use useSelect to get selectors for use in event callbacks, without causing unnecessary re-renders.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/data/README.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useSelect } from '@wordpress/data';\nimport { store as myCustomStore } from 'my-custom-store';\n\nfunction Paste( { children } ) {\n\tconst { getSettings } = useSelect( myCustomStore );\n\tfunction onPaste() {\n\t\t// Do something with the settings.\n\t\tconst settings = getSettings();\n\t}\n\treturn <div onPaste={ onPaste }>{ children }</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing QueryControls for Single Category Selection in React\nDESCRIPTION: This React code snippet demonstrates how to implement QueryControls for querying posts by categories, order, and number of items using default single category selection. It utilizes the useState hook for managing query state. Dependencies include React and @wordpress/components. The component renders UI controls for setting post order, orderBy, category, and the number of items to fetch. Input changes are managed by the updateQuery function.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/query-controls/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { QueryControls } from '@wordpress/components';\n\nconst QUERY_DEFAULTS = {\n    category: 1,\n    categories: [\n        {\n            id: 1,\n            name: 'Category 1',\n            parent: 0,\n        },\n        {\n            id: 2,\n            name: 'Category 1b',\n            parent: 1,\n        },\n        {\n            id: 3,\n            name: 'Category 2',\n            parent: 0,\n        },\n    ],\n    maxItems: 20,\n    minItems: 1,\n    numberOfItems: 10,\n    order: 'asc',\n    orderBy: 'title',\n};\n\nconst MyQueryControls = () => {\n    const [ query, setQuery ] = useState( QUERY_DEFAULTS );\n    const { category, categories, maxItems, minItems, numberOfItems, order, orderBy } = query;\n\n    const updateQuery = ( newQuery ) => {\n        setQuery( { ...query, ...newQuery } );\n    };\n\n    return (\n        <QueryControls\n            { ...{ maxItems, minItems, numberOfItems, order, orderBy } }\n            onOrderByChange={ ( newOrderBy ) => updateQuery( { orderBy: newOrderBy } ) }\n            onOrderChange={ ( newOrder ) => updateQuery( { order: newOrder } ) }\n            categoriesList={ categories }\n            selectedCategoryId={ category }\n            onCategoryChange={ ( newCategory ) => updateQuery( { category: newCategory } ) }\n            onNumberOfItemsChange={ ( newNumberOfItems ) =>\n                updateQuery( { numberOfItems: newNumberOfItems } )\n            }\n        />\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Using PlainText Component in WordPress Block Editor\nDESCRIPTION: Demonstrates how to implement a PlainText component in a WordPress block to render an auto-growing textarea. Shows block registration and attribute handling.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/README.md#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { registerBlockType } from '@wordpress/blocks';\nimport { PlainText } from '@wordpress/block-editor';\n\nregisterBlockType( 'my-plugin/example-block', {\n\t// ...\n\n\tattributes: {\n\t\tcontent: {\n\t\t\ttype: 'string',\n\t\t},\n\t},\n\n\tedit( { className, attributes, setAttributes } ) {\n\t\treturn (\n\t\t\t<PlainText\n\t\t\t\tclassName={ className }\n\t\t\t\tvalue={ attributes.content }\n\t\t\t\tonChange={ ( content ) => setAttributes( { content } ) }\n\t\t\t/>\n\t\t);\n\t},\n} );\n```\n\n----------------------------------------\n\nTITLE: Implementing Media Upload with Media Permissions in React\nDESCRIPTION: This React component shows how to implement a media uploader with user permission checks using `MediaUpload` and `MediaUploadCheck` from `@wordpress/block-editor`. This ensures only users with upload permissions can access the media library. The component accepts media types defined in the `ALLOWED_MEDIA_TYPES` array and logs the number of selected media items.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/src/components/media-upload/README.md#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Button } from '@wordpress/components';\nimport { MediaUpload, MediaUploadCheck } from '@wordpress/block-editor';\n\nconst ALLOWED_MEDIA_TYPES = [ 'audio' ];\n\nfunction MyMediaUploader() {\n\treturn (\n\t\t<MediaUploadCheck>\n\t\t\t<MediaUpload\n\t\t\t\tonSelect={ ( media ) =>\n\t\t\t\t\tconsole.log( 'selected ' + media.length )\n\t\t\t\t}\n\t\t\t\tallowedTypes={ ALLOWED_MEDIA_TYPES }\n\t\t\t\tvalue={ mediaId }\n\t\t\t\trender={ ( { open } ) => (\n\t\t\t\t\t<Button onClick={ open }>Open Media Library</Button>\n\t\t\t\t) }\n\t\t\t/>\n\t\t</MediaUploadCheck>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a DateTimePicker Component in React\nDESCRIPTION: This snippet demonstrates how to use the DateTimePicker component from @wordpress/components. It shows how to set up the component with a state hook for managing the selected date and time.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/date-time/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { DateTimePicker } from '@wordpress/components';\n\nconst MyDateTimePicker = () => {\n\tconst [ date, setDate ] = useState( new Date() );\n\n\treturn (\n\t\t<DateTimePicker\n\t\t\tcurrentDate={ date }\n\t\t\tonChange={ ( newDate ) => setDate( newDate ) }\n\t\t\tis12Hour={ true }\n\t\t/>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing a Toolbar with ToolbarButton Components in React\nDESCRIPTION: Example of creating a basic toolbar with three button options (Bold, Italic, and Link) using the Toolbar and ToolbarButton components from WordPress components. The example shows how to import necessary icons and properly structure a toolbar with labeled buttons.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/toolbar/toolbar/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Toolbar, ToolbarButton } from '@wordpress/components';\nimport { formatBold, formatItalic, link } from '@wordpress/icons';\n\nfunction MyToolbar() {\n\treturn (\n\t\t<Toolbar label=\"Options\">\n\t\t\t<ToolbarButton icon={ formatBold } label=\"Bold\" />\n\t\t\t<ToolbarButton icon={ formatItalic } label=\"Italic\" />\n\t\t\t<ToolbarButton icon={ link } label=\"Link\" />\n\t\t</Toolbar>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a User Guide with Guide Component in React\nDESCRIPTION: This snippet demonstrates how to use the Guide component to create a multi-page user tutorial. It shows setting up state for guide visibility and defining page content with text and images.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/guide/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nfunction MyTutorial() {\n\tconst [ isOpen, setIsOpen ] = useState( true );\n\n\tif ( ! isOpen ) {\n\t\treturn null;\n\t}\n\n\treturn (\n\t\t<Guide\n\t\t\tonFinish={ () => setIsOpen( false ) }\n\t\t\tpages={ [\n\t\t\t\t{\n\t\t\t\t\tcontent: <p>Welcome to the ACME Store!</p>,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\timage: <img src=\"https://acmestore.com/add-to-cart.png\" />,\n\t\t\t\t\tcontent: (\n\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\tClick <i>Add to Cart</i> to buy a product.\n\t\t\t\t\t\t</p>\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t] }\n\t\t/>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Edit component for Copyright Date Block\nDESCRIPTION: Creates the Edit function that renders the block in the Gutenberg editor, displaying the current year with copyright symbol.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/getting-started/tutorial.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function Edit() {\n\tconst currentYear = new Date().getFullYear().toString();\n\n\treturn (\n\t\t<p { ...useBlockProps() }>© { currentYear }</p>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing FormToggle Component in React\nDESCRIPTION: This snippet demonstrates how to use the FormToggle component from @wordpress/components in a React functional component. It uses the useState hook to manage the toggle state and shows how to handle the onChange event.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/form-toggle/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { FormToggle } from '@wordpress/components';\n\nconst MyFormToggle = () => {\n\tconst [ isChecked, setChecked ] = useState( true );\n\n\treturn (\n\t\t<FormToggle\n\t\t\tchecked={ isChecked }\n\t\t\tonChange={ () => setChecked( ( state ) => ! state ) }\n\t\t/>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Ungroup Transformation for Blocks in JavaScript\nDESCRIPTION: This code snippet shows how to implement an ungroup transformation for a block. The ungroup function receives the block's attributes and inner blocks, and returns an array of new block objects to replace the original block.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-transforms.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nexport const settings = {\n\ttitle: 'My grouping Block Title',\n\tdescription: 'My grouping block description',\n\t/* ... */\n\ttransforms: {\n\t\tungroup: ( attributes, innerBlocks ) =>\n\t\t\tinnerBlocks.flatMap( ( innerBlock ) => innerBlock.innerBlocks ),\n\t},\n};\n```\n\n----------------------------------------\n\nTITLE: PHP Server-Side Block Bindings Registration\nDESCRIPTION: Registration of a custom block binding source for visualization date using PHP. Includes context handling and value callback implementation.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-bindings.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nadd_action(\n\t'init',\n\tfunction () {\n\t\tregister_block_bindings_source(\n\t\t\t'wpmovies/visualization-date',\n\t\t\tarray(\n\t\t\t\t'label'              => __( 'Visualization Date', 'custom-bindings' ),\n\t\t\t\t'get_value_callback' => function ( array $source_args, $block_instance ) {\n\t\t\t\t\t$post_id = $block_instance->context['postId'];\n\t\t\t\t\tif ( isset( $source_args['key'] ) ) {\n\t\t\t\t\t\treturn get_post_meta( $post_id, $source_args['key'], true );\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t'uses_context'       => array( 'postId' ),\n\t\t\t)\n\t\t);\n\t}\n);\n```\n\n----------------------------------------\n\nTITLE: Font Size Attributes Configuration\nDESCRIPTION: Example of how to configure default fontSize attributes when fontSize support is enabled.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-supports.md#2025-04-21_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nattributes: {\n    fontSize: {\n        type: 'string',\n        default: 'some-value',\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ColorPalette Component in React\nDESCRIPTION: This snippet demonstrates how to use the ColorPalette component from @wordpress/components in a React functional component. It shows setting up state for the selected color, defining a color palette, and handling color changes.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/color-palette/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { ColorPalette } from '@wordpress/components';\n\nconst MyColorPalette = () => {\n\tconst [ color, setColor ] = useState ( '#f00' )\n\tconst colors = [\n\t\t{ name: 'red', color: '#f00' },\n\t\t{ name: 'white', color: '#fff' },\n\t\t{ name: 'blue', color: '#00f' },\n\t];\n\n\treturn (\n\t\t<ColorPalette\n\t\t\tcolors={ colors }\n\t\t\tvalue={ color }\n\t\t\tonChange={ ( color ) => setColor( color ) }\n\t\t/>\n\t);\n} );\n```\n\n----------------------------------------\n\nTITLE: Defining Block Editor Value Structure in JavaScript\nDESCRIPTION: Shows the basic structure of a block editor value as an array of block objects. This represents the in-memory tree structure used during editing.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/explanations/architecture/data-flow.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst value = [ block1, block2, block3 ];\n```\n\n----------------------------------------\n\nTITLE: Implementing Dragging Functionality with React Hook\nDESCRIPTION: This snippet shows how to use the `useDragging` hook from the WordPress `@wordpress/compose` package to implement drag and drop functionality in a React component. The example illustrates dragging a red square across the viewport by updating its position based on mouse events. Dependencies: `@wordpress/compose`, React’s `useState` and `useCallback`. The main parameters are event handlers for dragging state: `onDragMove`, `onDragStart`, and `onDragEnd`. The code outputs a red square that can be dragged around using mouse events.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/compose/src/hooks/use-dragging/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n/**\n * WordPress dependencies\n */\nimport { useState, useCallback } from 'react';\nimport { __experimentalUseDragging as useDragging } from '@wordpress/compose';\n\nconst UseDraggingExample = () => {\n\tconst [ position, setPosition ] = useState( null );\n\tconst changePosition = useCallback( ( event ) => {\n\t\tsetPosition( { x: event.clientX, y: event.clientY } );\n\t} );\n\tconst { startDrag } = useDragging( {\n\t\tonDragMove: changePosition,\n\t} );\n\treturn (\n\t\t// eslint-disable-next-line jsx-a11y/no-static-element-interactions\n\t\t<div\n\t\t\tonMouseDown={ startDrag }\n\t\t\tstyle={ {\n\t\t\t\tposition: 'fixed',\n\t\t\t\twidth: 10,\n\t\t\t\theight: 10,\n\t\t\t\tbackgroundColor: 'red',\n\t\t\t\t...( position ? { top: position.y, left: position.x } : {} ),\n\t\t\t} }\n\t\t/>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Specifying Block Example in JSON\nDESCRIPTION: Demonstrates how to provide example data for a block, used to construct a preview in the Inspector Help Panel.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-metadata.md#2025-04-21_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"example\": {\n\t\t\"attributes\": {\n\t\t\t\"message\": \"This is a notice!\"\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Numeric Input in Gutenberg Block Attributes\nDESCRIPTION: This JavaScript snippet demonstrates how to properly handle numeric input in a Gutenberg block's onChange event. It explicitly casts the input value to a Number to ensure the correct data type is set.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-attributes.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nfunction onChange( event ) {\n\tprops.setAttributes( { authorCount: Number( event.target.value ) } );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating EditPageForm Component in JavaScript/JSX\nDESCRIPTION: This snippet defines the EditPageForm component, which includes a text input for the page title and Save/Cancel buttons.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/data-basics/3-building-an-edit-form.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Button, TextControl } from '@wordpress/components';\nfunction EditPageForm( { pageId, onCancel, onSaveFinished } ) {\n\treturn (\n\t\t<div className=\"my-gutenberg-form\">\n\t\t\t<TextControl\n\t\t\t\t__nextHasNoMarginBottom\n\t\t\t\t__next40pxDefaultSize\n\t\t\t\tvalue=''\n\t\t\t\tlabel='Page title:'\n\t\t\t/>\n\t\t\t<div className=\"form-buttons\">\n\t\t\t\t<Button onClick={ onSaveFinished } variant=\"primary\">\n\t\t\t\t\tSave\n\t\t\t\t</Button>\n\t\t\t\t<Button onClick={ onCancel } variant=\"tertiary\">\n\t\t\t\t\tCancel\n\t\t\t\t</Button>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Block Serialization Structure in HTML\nDESCRIPTION: Demonstrates the serialized HTML format of a Gutenberg block. This example shows a paragraph block with a JSON object containing attributes in an HTML comment, followed by the actual paragraph content, and ending with a closing comment tag.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/explanations/architecture/key-concepts.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- wp:paragraph {\"key\": \"value\"} -->\n<p>Welcome to the world of blocks.</p>\n<!-- /wp:paragraph -->\n```\n\n----------------------------------------\n\nTITLE: Implementing PluginBlockSettingsMenuItem in WordPress Gutenberg Plugin (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to create a plugin that adds a new item to the More Options area using the PluginBlockSettingsMenuItem component. It shows the import of necessary functions, creation of a custom component, and registration of the plugin.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/slotfills/plugin-block-settings-menu-item.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { registerPlugin } from '@wordpress/plugins';\nimport { PluginBlockSettingsMenuItem } from '@wordpress/editor';\n\nconst PluginBlockSettingsMenuGroupTest = () => (\n\t<PluginBlockSettingsMenuItem\n\t\tallowedBlocks={ [ 'core/paragraph' ] }\n\t\ticon=\"smiley\"\n\t\tlabel=\"Menu item text\"\n\t\tonClick={ () => {\n\t\t\talert( 'clicked' );\n\t\t} }\n\t/>\n);\n\nregisterPlugin( 'block-settings-menu-group-test', {\n\trender: PluginBlockSettingsMenuGroupTest,\n} );\n```\n\n----------------------------------------\n\nTITLE: Creating Block Template with InnerBlocks in JavaScript\nDESCRIPTION: Shows how to create a new block type with predefined template using InnerBlocks component in JavaScript. The template includes an image block and a paragraph block with placeholder text.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-templates.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst el = React.createElement;\nconst { registerBlockType } = wp.blocks;\nconst { InnerBlocks } = wp.blockEditor;\n\nconst BLOCKS_TEMPLATE = [\n\t[ 'core/image', {} ],\n\t[ 'core/paragraph', { placeholder: 'Image Details' } ],\n];\n\nregisterBlockType( 'myplugin/template', {\n\ttitle: 'My Template Block',\n\tcategory: 'widgets',\n\tedit: ( props ) => {\n\t\treturn el( InnerBlocks, {\n\t\t\ttemplate: BLOCKS_TEMPLATE,\n\t\t\ttemplateLock: false,\n\t\t} );\n\t},\n\tsave: ( props ) => {\n\t\treturn el( InnerBlocks.Content, {} );\n\t},\n} );\n```\n\n----------------------------------------\n\nTITLE: Creating SVG Icon Component using WordPress Components\nDESCRIPTION: This snippet defines a functional React component named MyIcon that uses the @wordpress/components library to render an SVG icon with accessibility attributes. The SVG includes multiple paths to create a unique design and follows standard SVG practices, making it suitable for use in a WordPress environment.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/primitives/src/svg/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { G, Path, SVG } from '@wordpress/components';\n\nconst MyIcon = () => (\n\t<SVG viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n\t\t<Path fill=\"none\" d=\"M0 0h24v24H0V0z\" />\n\t\t<G>\n\t\t\t<Path d=\"M20 4v12H8V4h12m0-2H8L6 4v12l2 2h12l2-2V4l-2-2z\" />\n\t\t\t<Path d=\"M12 12l1 2 3-3 3 4H9z\" />\n\t\t\t<Path d=\"M2 6v14l2 2h14v-2H4V6H2z\" />\n\t\t</G>\n\t</SVG>\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Query Attributes for Query Loop Block in JavaScript\nDESCRIPTION: Illustrates how to add custom query attributes to the Query Loop block variation for use in custom queries.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/block-tutorial/extending-the-query-loop-block.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n{\n\t/** ...variation properties */\n\tattributes: {\n\t\t/** ...variation attributes */\n\t\tquery: {\n\t\t\t/** ...more query settings if needed */\n\t\t\tpostType: 'book',\n\t\t\t/** Our custom query parameter */\n\t\t\tbookAuthor: 'J. R. R. Tolkien'\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering URLs for Display in JavaScript\nDESCRIPTION: Demonstrates the use of filterURLForDisplay function to format URLs for display. It can truncate URLs to a specified length and remove unnecessary parts for cleaner presentation.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/url/README.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst displayUrl = filterURLForDisplay(\n\t'https://www.wordpress.org/gutenberg/'\n); // wordpress.org/gutenberg\nconst imageUrl = filterURLForDisplay(\n\t'https://www.wordpress.org/wp-content/uploads/img.png',\n\t20\n); // …ent/uploads/img.png\n```\n\n----------------------------------------\n\nTITLE: Registering Color Support in Gutenberg Block\nDESCRIPTION: This code snippet demonstrates how to add color support to a Gutenberg block. It shows how to register text and background color customization options in the block's configuration using the supports property, which will automatically add color panels to the block inspector.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/platform-docs/docs/create-block/block-supports.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nregisterBlockType( 'create-block/gutenpride', {\n\t// ...\n\tsupports: {\n\t\tcolor: {\n\t\t\ttext: true,\n\t\t\tbackground: true,\n\t\t},\n\t},\n} );\n```\n\n----------------------------------------\n\nTITLE: Enabling Interactivity in block.json\nDESCRIPTION: Configuring a WordPress block to support interactivity by adding the 'interactivity' property to the supports object in block.json.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/core-concepts/server-side-rendering.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"supports\": {\n\t\t\"interactivity\": true\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Embed Block Variations in JavaScript\nDESCRIPTION: Example of defining variations for the Embed block, showing how to create WordPress and YouTube embed variations with different provider name slugs.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-variations.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvariations: [\n\t{\n\t\tname: 'wordpress',\n\t\ttitle: 'WordPress',\n\t\tdescription: __( 'Embed a WordPress post.' ),\n\t\tattributes: { providerNameSlug: 'wordpress' },\n\t},\n\t{\n\t\tname: 'youtube',\n\t\ttitle: 'YouTube',\n\t\tdescription: __( 'Embed a YouTube video.' ),\n\t\tattributes: { providerNameSlug: 'youtube' },\n\t},\n],\n```\n\n----------------------------------------\n\nTITLE: Creating a Plugin Sidebar in WordPress Gutenberg using React\nDESCRIPTION: This snippet defines a functional component 'PluginSidebarExample' that utilizes the WordPress Plugin Sidebar to display a panel with controls including a text input and a select dropdown. Required dependencies are `@wordpress/i18n`, `@wordpress/editor`, and `@wordpress/components`. The component manages its state using React hooks, specifically useState for handling text and selected options.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/slotfills/plugin-sidebar.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { __ } from '@wordpress/i18n';\nimport { PluginSidebar } from '@wordpress/editor';\nimport {\n\tPanelBody,\n\tButton,\n\tTextControl,\n\tSelectControl,\n} from '@wordpress/components';\nimport { registerPlugin } from '@wordpress/plugins';\nimport { useState } from '@wordpress/element';\n\nconst PluginSidebarExample = () => {\n\tconst [ text, setText ] = useState( '' );\n\tconst [ select, setSelect ] = useState( 'a' );\n\n\treturn (\n\t\t<PluginSidebar\n\t\t\tname=\"plugin-sidebar-example\"\n\t\t\ttitle={ __( 'My PluginSidebar' ) }\n\t\t\ticon={ 'smiley' }\n\t\t>\n\t\t\t<PanelBody>\n\t\t\t\t<h2>\n\t\t\t\t\t{ __( 'This is a heading for the PluginSidebar example.' ) }\n\t\t\t\t</h2>\n\t\t\t\t<p>\n\t\t\t\t\t{ __(\n\t\t\t\t\t\t'This is some example text for the PluginSidebar example.'\n\t\t\t\t\t) }\n\t\t\t\t</p>\n\t\t\t\t<TextControl\n\t\t\t\t\t__nextHasNoMarginBottom\n\t\t\t\t\t__next40pxDefaultSize\n\t\t\t\t\tlabel={ __( 'Text Control' ) }\n\t\t\t\t\tvalue={ text }\n\t\t\t\t\tonChange={ ( newText ) => setText( newText ) }\n\t\t\t\t/>\n\t\t\t\t<SelectControl\n\t\t\t\t\tlabel={ __( 'Select Control' ) }\n\t\t\t\t\tvalue={ select }\n\t\t\t\t\toptions={ [\n\t\t\t\t\t\t{ value: 'a', label: 'Option A' },\n\t\t\t\t\t\t{ value: 'b', label: 'Option B' },\n\t\t\t\t\t\t{ value: 'c', label: 'Option C' },\n\t\t\t\t\t] }\n\t\t\t\t\tonChange={ ( newSelect ) => setSelect( newSelect ) }\n\t\t\t\t/>\n\t\t\t\t<Button variant=\"primary\">{ __( 'Primary Button' ) } </Button>\n\t\t\t</PanelBody>\n\t\t</PluginSidebar>\n\t);\n};\n\n// Register the plugin.\nregisterPlugin( 'plugin-sidebar-example', { render: PluginSidebarExample } );\n```\n\n----------------------------------------\n\nTITLE: Creating File Block from Dropped File in WordPress Gutenberg\nDESCRIPTION: Shows a 'files' type transformation that creates a File block when the user drops a single file into the editor. It uses createBlobURL and sets a lower priority to act as a fallback.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-transforms.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ntransforms: {\n\tfrom: [\n\t\t{\n\t\t\ttype: 'files',\n\t\t\tisMatch: ( files ) => files.length === 1,\n\t\t\t// By defining a lower priority than the default of 10,\n\t\t\t// we make that the File block to be created as a fallback,\n\t\t\t// if no other transform is found.\n\t\t\tpriority: 15,\n\t\t\ttransform: ( files ) => {\n\t\t\t\tconst file = files[ 0 ];\n\t\t\t\tconst blobURL = createBlobURL( file );\n\t\t\t\t// File will be uploaded in componentDidMount()\n\t\t\t\treturn createBlock( 'core/file', {\n\t\t\t\t\thref: blobURL,\n\t\t\t\t\tfileName: file.name,\n\t\t\t\t\ttextLinkHref: blobURL,\n\t\t\t\t} );\n\t\t\t},\n\t\t},\n\t];\n}\n```\n\n----------------------------------------\n\nTITLE: Internationalization Configuration in block.json\nDESCRIPTION: Example showing how to set up internationalization for block metadata by specifying a textdomain that WordPress will use for string translation.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-metadata.md#2025-04-21_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"title\": \"My block\",\n\t\"description\": \"My block is fantastic\",\n\t\"keywords\": [ \"fantastic\" ],\n\t\"textdomain\": \"my-plugin\"\n}\n```\n\n----------------------------------------\n\nTITLE: Complete MyFirstApp Component with Page List and Search\nDESCRIPTION: This snippet presents the complete JavaScript code for the MyFirstApp component, including the PagesList subcomponent, search functionality, and loading indicator.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/data-basics/2-building-a-list-of-pages.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\nimport { createRoot } from 'react-dom';\nimport { SearchControl, Spinner } from '@wordpress/components';\nimport { useSelect } from '@wordpress/data';\nimport { store as coreDataStore } from '@wordpress/core-data';\nimport { decodeEntities } from '@wordpress/html-entities';\nimport './style.css';\n\nfunction MyFirstApp() {\n\tconst [ searchTerm, setSearchTerm ] = useState( '' );\n\tconst { pages, hasResolved } = useSelect(\n\t\t( select ) => {\n\t\t\tconst query = {};\n\t\t\tif ( searchTerm ) {\n\t\t\t\tquery.search = searchTerm;\n\t\t\t}\n\t\t\tconst selectorArgs = [ 'postType', 'page', query ];\n\t\t\treturn {\n\t\t\t\tpages: select( coreDataStore ).getEntityRecords(\n\t\t\t\t\t...selectorArgs\n\t\t\t\t),\n\t\t\t\thasResolved: select( coreDataStore ).hasFinishedResolution(\n\t\t\t\t\t'getEntityRecords',\n\t\t\t\t\tselectorArgs\n\t\t\t\t),\n\t\t\t};\n\t\t},\n\t\t[ searchTerm ]\n\t);\n\n\treturn (\n\t\t<div>\n\t\t\t<SearchControl onChange={ setSearchTerm } value={ searchTerm } />\n\t\t\t<PagesList hasResolved={ hasResolved } pages={ pages } />\n\t\t</div>\n\t);\n}\n\nfunction PagesList( { hasResolved, pages } ) {\n\tif ( ! hasResolved ) {\n\t\treturn <Spinner />;\n\t}\n\tif ( ! pages?.length ) {\n\t\treturn <div>No results</div>;\n\t}\n\n\treturn (\n\t\t<table className=\"wp-list-table widefat fixed striped table-view-list\">\n\t\t\t<thead>\n\t\t\t\t<tr>\n\t\t\t\t\t<td>Title</td>\n\t\t\t\t</tr>\n\t\t\t</thead>\n\t\t\t<tbody>\n\t\t\t\t{ pages?.map( ( page ) => (\n\t\t\t\t\t<tr key={ page.id }>\n\t\t\t\t\t\t<td>{ decodeEntities( page.title.rendered ) }</td>\n\t\t\t\t\t</tr>\n\t\t\t\t) ) }\n\t\t\t</tbody>\n\t\t</table>\n\t);\n}\n\nconst root = createRoot(\n\tdocument.querySelector( '#my-first-gutenberg-app' )\n);\nwindow.addEventListener(\n\t'load',\n\tfunction () {\n\t\troot.render(\n\t\t\t<MyFirstApp />\n\t\t);\n\t},\n\tfalse\n);\n```\n\n----------------------------------------\n\nTITLE: Using the Nonce Middleware for Authentication\nDESCRIPTION: Shows how to use the built-in nonce middleware to add authentication to API Fetch requests. This is commonly used for WordPress REST API authentication.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/api-fetch/README.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport apiFetch from '@wordpress/api-fetch';\n\nconst nonce = 'nonce value';\napiFetch.use( apiFetch.createNonceMiddleware( nonce ) );\n```\n\n----------------------------------------\n\nTITLE: Rendering a Basic TreeGrid Component\nDESCRIPTION: This snippet demonstrates how to render a basic TreeGrid component with TreeGridRow and TreeGridCell components. Each TreeGridRow represents a row in the tree grid, and TreeGridCell contains focusable elements like buttons. The level, positionInSet, and setSize props on TreeGridRow are crucial for accessibility and navigation.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/tree-grid/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nfunction TreeMenu() {\n\treturn (\n\t\t<TreeGrid>\n\t\t\t<TreeGridRow level={ 1 } positionInSet={ 1 } setSize={ 2 }>\n\t\t\t\t<TreeGridCell>\n\t\t\t\t\t{ ( props ) => (\n\t\t\t\t\t\t<Button onClick={ onSelect } { ...props }>Select</Button>\n\t\t\t\t\t) }\n\t\t\t\t</TreeGridCell>\n\t\t\t\t<TreeGridCell>\n\t\t\t\t\t{ ( props ) => (\n\t\t\t\t\t\t<Button onClick={ onMove } { ...props }>Move</Button>\n\t\t\t\t\t) }\n\t\t\t\t</TreeGridCell>\n\t\t\t</TreeGridRow>\n\t\t\t<TreeGridRow level={ 1 } positionInSet={ 2 } setSize={ 2 }>\n\t\t\t\t<TreeGridCell>\n\t\t\t\t\t{ ( props ) => (\n\t\t\t\t\t\t<Button onClick={ onSelect } { ...props }>Select</Button>\n\t\t\t\t\t) }\n\t\t\t\t</TreeGridCell>\n\t\t\t\t<TreeGridCell>\n\t\t\t\t\t{ ( props ) => (\n\t\t\t\t\t\t<Button onClick={ onMove } { ...props }>Move</Button>\n\t\t\t\t\t) }\n\t\t\t\t</TreeGridCell>\n\t\t\t</TreeGridRow>\n\t\t\t<TreeGridRow level={ 2 } positionInSet={ 1 } setSize={ 1 }>\n\t\t\t\t<TreeGridCell>\n\t\t\t\t\t{ ( props ) => (\n\t\t\t\t\t\t<Button onClick={ onSelect } { ...props }>Select</Button>\n\t\t\t\t\t) }\n\t\t\t\t</TreeGridCell>\n\t\t\t\t<TreeGridCell>\n\t\t\t\t\t{ ( props ) => (\n\t\t\t\t\t\t<Button onClick={ onMove } { ...props }>Move</Button>\n\t\t\t\t\t) }\n\t\t\t\t</TreeGridCell>\n\t\t\t</TreeGridRow>\n\t\t</TreeGrid>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Block Metadata in JSON\nDESCRIPTION: Example of key properties that can be defined in a block.json file, including paths to editor scripts, styles, and render files.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/getting-started/fundamentals/file-structure-of-a-block.md#2025-04-21_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n\"editorScript\": \"file:./index.js\",\n\"style\": \"file:./style-index.css\",\n\"editorStyle\": \"file:./index.css\",\n\"render\": \"file:./render.php\",\n\"viewScript\": \"file:./view.js\"\n```\n\n----------------------------------------\n\nTITLE: Modifying Editor Settings in PHP\nDESCRIPTION: Demonstrates how to use the 'block_editor_settings_all' filter to modify editor settings, specifically changing the maximum upload file size.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/filters/editor-filters.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nadd_filter( 'block_editor_settings_all', 'example_filter_block_editor_settings_when_post_provided', 10, 2 );\n\nfunction example_filter_block_editor_settings_when_post_provided( $editor_settings, $editor_context ) {\n\tif ( ! empty( $editor_context->post ) ) {\n\t\t$editor_settings['maxUploadFileSize'] = 12345;\n\t}\n\treturn $editor_settings;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Ancestor Block Relationship in Gutenberg\nDESCRIPTION: This JSON snippet shows how to define an ancestor block relationship for a custom block. It uses the 'ancestor' property to specify which block can be an ancestor of this block in the block hierarchy.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/block-tutorial/nested-blocks-inner-blocks.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"title\": \"Comment Author Name\",\n\t\"name\": \"core/comment-author-name\",\n\t\"ancestor\": [ \"core/comment-template\" ],\n\t// ...\n}\n```\n\n----------------------------------------\n\nTITLE: Basic SlotFill Implementation in WordPress Gutenberg\nDESCRIPTION: Demonstrates the fundamental pattern for using SlotFills in WordPress by registering a plugin that adds content to the PluginPostStatusInfo slot. This example shows the four essential steps: importing dependencies, creating a component with the SlotFill wrapper, and registering the plugin.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/slotfills/README.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { registerPlugin } from '@wordpress/plugins';\nimport { PluginPostStatusInfo } from '@wordpress/editor';\n\nconst PluginPostStatusInfoTest = () => (\n\t<PluginPostStatusInfo>\n\t\t<p>Post Status Info SlotFill</p>\n\t</PluginPostStatusInfo>\n);\n\nregisterPlugin( 'post-status-info-test', { render: PluginPostStatusInfoTest } );\n```\n\n----------------------------------------\n\nTITLE: Block Deprecation with InnerBlocks Migration\nDESCRIPTION: Demonstrates how to deprecate a block by converting an attribute into an inner block, using the migrate function to transform the title attribute into a paragraph block.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-deprecation.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { registerBlockType } = wp.blocks;\n\nregisterBlockType( 'gutenberg/block-with-deprecated-version', {\n\t// ... block properties go here\n\n\tsave( props ) {\n\t\treturn <p>{ props.attributes.title }</p>;\n\t},\n\n\tdeprecated: [\n\t\t{\n\t\t\tattributes: {\n\t\t\t\ttitle: {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tsource: 'html',\n\t\t\t\t\tselector: 'p',\n\t\t\t\t},\n\t\t\t},\n\n\t\t\tmigrate( attributes, innerBlocks ) {\n\t\t\t\tconst { title, ...restAttributes } = attributes;\n\n\t\t\t\treturn [\n\t\t\t\t\trestAttributes,\n\t\t\t\t\t[\n\t\t\t\t\t\tcreateBlock( 'core/paragraph', {\n\t\t\t\t\t\t\tcontent: attributes.title,\n\t\t\t\t\t\t\tfontSize: 'large',\n\t\t\t\t\t\t} ),\n\t\t\t\t\t\t...innerBlocks,\n\t\t\t\t\t],\n\t\t\t\t];\n\t\t\t},\n\n\t\t\tsave( props ) {\n\t\t\t\treturn <p>{ props.attributes.title }</p>;\n\t\t\t},\n\t\t},\n\t],\n} );\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Document Setting Panel in WordPress Gutenberg\nDESCRIPTION: This example demonstrates how to register a custom document settings panel using the PluginDocumentSettingPanel component. It creates a panel named 'custom-panel' with a title and custom class, then registers it as a plugin with the palmtree icon.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/slotfills/plugin-document-setting-panel.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { registerPlugin } from '@wordpress/plugins';\nimport { PluginDocumentSettingPanel } from '@wordpress/editor';\n\nconst PluginDocumentSettingPanelDemo = () => (\n\t<PluginDocumentSettingPanel\n\t\tname=\"custom-panel\"\n\t\ttitle=\"Custom Panel\"\n\t\tclassName=\"custom-panel\"\n\t>\n\t\tCustom Panel Contents\n\t</PluginDocumentSettingPanel>\n);\n\nregisterPlugin( 'plugin-document-setting-panel-demo', {\n\trender: PluginDocumentSettingPanelDemo,\n\ticon: 'palmtree',\n} );\n```\n\n----------------------------------------\n\nTITLE: Registering Block Styles\nDESCRIPTION: Shows how to define multiple styles for a block, including setting a default style.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-registration.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// Register block styles.\nstyles: [\n\t// Mark style as default.\n\t{\n\t\tname: 'default',\n\t\tlabel: __( 'Rounded' ),\n\t\tisDefault: true\n\t},\n\t{\n\t\tname: 'outline',\n\t\tlabel: __( 'Outline' )\n\t},\n\t{\n\t\tname: 'squared',\n\t\tlabel: __( 'Squared' )\n\t},\n],\n```\n\n----------------------------------------\n\nTITLE: Hooking Blocks with blockHooks in Gutenberg (JS)\nDESCRIPTION: This code snippet illustrates how to use the `blockHooks` property to automatically insert a block next to other block types. The example shows how to inject blocks before or after `core/verse` and `core/spacer` respectively, and as the first or last child of `core/column` and `core/group`.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-registration.md#2025-04-21_snippet_13\n\nLANGUAGE: js\nCODE:\n```\n{\n\tblockHooks: {\n\t\t'core/verse': 'before',\n\t\t'core/spacer': 'after',\n\t\t'core/column': 'firstChild',\n\t\t'core/group': 'lastChild',\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Block Toolbar Controls in WordPress Gutenberg\nDESCRIPTION: This code snippet demonstrates how to add custom controls to the Block Toolbar using the BlockControls component. It includes an AlignmentToolbar for text alignment and a RichText component for content editing.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/getting-started/fundamentals/block-in-the-editor.md#2025-04-21_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nexport default function Edit( { className, attributes: attr, setAttributes } ) {\n\n\tconst onChangeContent = ( newContent ) => {\n\t\tsetAttributes( { content: newContent } );\n\t};\n\n\tconst onChangeAlignment = ( newAlignment ) => {\n\t\tsetAttributes( {\n\t\t\talignment: newAlignment === undefined ? 'none' : newAlignment,\n\t\t} );\n\t};\n\n\treturn (\n\t\t<div { ...useBlockProps() }>\n\t\t\t<BlockControls>\n\t\t\t\t<ToolbarGroup>\n\t\t\t\t\t<AlignmentToolbar\n\t\t\t\t\t\tvalue={ attr.alignment }\n\t\t\t\t\t\tonChange={ onChangeAlignment }\n\t\t\t\t\t/>\n\t\t\t\t</ToolbarGroup>\n\t\t\t</BlockControls>\n\n\t\t\t<RichText\n\t\t\t\tclassName={ className }\n\t\t\t\tstyle={ { textAlign: attr.alignment } }\n\t\t\t\ttagName=\"p\"\n\t\t\t\tonChange={ onChangeContent }\n\t\t\t\tvalue={ attr.content }\n\t\t\t/>\n\t\t</div>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Basic Query Loop Block Variation in JavaScript\nDESCRIPTION: Example of registering a complete Query Loop block variation with default settings, custom post type, and namespace configuration for displaying a books list.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/block-tutorial/extending-the-query-loop-block.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst MY_VARIATION_NAME = 'my-plugin/books-list';\n\nregisterBlockVariation( 'core/query', {\n\tname: MY_VARIATION_NAME,\n\ttitle: 'Books List',\n\tdescription: 'Displays a list of books',\n\tisActive: ( { namespace, query } ) => {\n\t\treturn (\n\t\t\tnamespace === MY_VARIATION_NAME\n\t\t\t&& query.postType === 'book'\n\t\t);\n\t},\n\ticon: /** An SVG icon can go here*/,\n\tattributes: {\n\t\tnamespace: MY_VARIATION_NAME,\n\t\tquery: {\n\t\t\tperPage: 6,\n\t\t\tpages: 0,\n\t\t\toffset: 0,\n\t\t\tpostType: 'book',\n\t\t\torder: 'desc',\n\t\t\torderBy: 'date',\n\t\t\tauthor: '',\n\t\t\tsearch: '',\n\t\t\texclude: [],\n\t\t\tsticky: '',\n\t\t\tinherit: false,\n\t\t},\n\t},\n\tscope: [ 'inserter' ],\n\t}\n);\n```\n\n----------------------------------------\n\nTITLE: Using Derived State with Local Context in JavaScript and HTML\nDESCRIPTION: This snippet demonstrates how to use derived state with local context, showing both JavaScript store configuration and HTML markup with directives.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/core-concepts/undestanding-global-state-local-context-and-derived-state.md#2025-04-21_snippet_28\n\nLANGUAGE: js\nCODE:\n```\nstore( 'myCounterPlugin', {\n\tstate: {\n\t\tget double() {\n\t\t\tconst { counter } = getContext();\n\t\t\treturn counter * 2;\n\t\t},\n\t},\n\tactions: {\n\t\tincrement() {\n\t\t\tconst context = getContext();\n\t\t\tcontext.counter += 1;\n\t\t},\n\t},\n} );\n```\n\nLANGUAGE: html\nCODE:\n```\n<div data-wp-interactive=\"myCounterPlugin\">\n\t<!-- This will render \"Double: 2\" -->\n\t<div data-wp-context='{ \"counter\": 1 }'>\n\t\tDouble: <span data-wp-text=\"state.double\"></span>\n\n\t\t<!-- This button will increment the local counter. -->\n\t\t<button data-wp-on-async--click=\"actions.increment\">Increment</button>\n\t</div>\n\n\t<!-- This will render \"Double: 4\" -->\n\t<div data-wp-context='{ \"counter\": 2 }'>\n\t\tDouble: <span data-wp-text=\"state.double\"></span>\n\n\t\t<!-- This button will increment the local counter. -->\n\t\t<button data-wp-on-async--click=\"actions.increment\">Increment</button>\n\t</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: JavaScript Editor-Side Block Bindings Registration\nDESCRIPTION: Client-side registration of block bindings source with value getting/setting and edit permission handling.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-bindings.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n\tregisterBlockBindingsSource,\n} from '@wordpress/blocks';\nimport { __ } from '@wordpress/i18n';\nimport { store as coreDataStore } from '@wordpress/core-data';\n\nregisterBlockBindingsSource( {\n\tname: 'wpmovies/visualization-date',\n\tlabel: __( 'Visualization Date', 'custom-bindings' ),\n\tusesContext: [ 'postType' ],\n\tgetValues( { select, context } ) {\n\t\tlet wpMoviesVisualizationDate;\n\t\tconst { getEditedEntityRecord } = select( coreDataStore );\n\t\tif ( context?.postType && context?.postId ) {\n\t\t\twpMoviesVisualizationDate = getEditedEntityRecord(\n\t\t\t\t'postType',\n\t\t\t\tcontext?.postType,\n\t\t\t\tcontext?.postId\n\t\t\t).meta?.wp_movies_visualization_date;\n\t\t}\n\t\tif ( wpMoviesVisualizationDate ) {\n\t\t\treturn {\n\t\t\t\tcontent: wpMoviesVisualizationDate,\n\t\t\t};\n\t\t}\n\n\t\treturn {\n\t\t\tcontent: new Date().toLocaleDateString( 'en-US' ),\n\t\t};\n\t},\n\tsetValues( { select, dispatch, context, bindings } ) {\n\t\tdispatch( coreDataStore ).editEntityRecord(\n\t\t\t'postType',\n\t\t\tcontext?.postType,\n\t\t\tcontext?.postId,\n\t\t\t{\n\t\t\t\tmeta: {\n\t\t\t\t\twp_movies_visualization_date: bindings?.content?.newValue,\n\t\t\t\t},\n\t\t\t}\n\t\t);\n\t},\n\tcanUserEditValue( { select, context } ) {\n\t\treturn true;\n\t},\n} );\n```\n\n----------------------------------------\n\nTITLE: Registering Block Variation in JavaScript\nDESCRIPTION: Demonstrates how to register a new block variation for a given block type. This example creates a custom variation of the core/embed block.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/blocks/README.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { __ } from '@wordpress/i18n';\nimport { registerBlockVariation } from '@wordpress/blocks';\nimport { Button } from '@wordpress/components';\n\nconst ExampleComponent = () => {\n\treturn (\n\t\t<Button\n\t\t\tonClick={ () => {\n\t\t\t\tregisterBlockVariation( 'core/embed', {\n\t\t\t\t\tname: 'custom',\n\t\t\t\t\ttitle: __( 'My Custom Embed' ),\n\t\t\t\t\tattributes: { providerNameSlug: 'custom' },\n\t\t\t\t} );\n\t\t\t} }\n\t\t>\n\t\t\t__( 'Add a custom variation for core/embed' ) }\n\t\t</Button>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Block Attributes\nDESCRIPTION: Demonstrates how to specify structured data needs for a block using attributes.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-registration.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// Specifying my block attributes\nattributes: {\n\tcover: {\n\t\ttype: 'string',\n\t\tsource: 'attribute',\n\t\tselector: 'img',\n\t\tattribute: 'src',\n\t},\n\tauthor: {\n\t\ttype: 'string',\n\t\tsource: 'html',\n\t\tselector: '.book-author',\n\t},\n\tpages: {\n\t\ttype: 'number',\n\t},\n},\n```\n\n----------------------------------------\n\nTITLE: Implementing PluginPostPublishPanel in WordPress Gutenberg\nDESCRIPTION: This code snippet demonstrates how to use the PluginPostPublishPanel component to add custom content to the post-publish panel in the WordPress Gutenberg editor. It imports necessary functions from WordPress packages, defines a custom component, and registers it as a plugin.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/slotfills/plugin-post-publish-panel.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { registerPlugin } from '@wordpress/plugins';\nimport { PluginPostPublishPanel } from '@wordpress/editor';\n\nconst PluginPostPublishPanelTest = () => (\n\t<PluginPostPublishPanel>\n\t\t<p>Post Publish Panel</p>\n\t</PluginPostPublishPanel>\n);\n\nregisterPlugin( 'post-publish-panel-test', {\n\trender: PluginPostPublishPanelTest,\n} );\n```\n\n----------------------------------------\n\nTITLE: Adding Edit Button to PagesList Component in JavaScript/JSX\nDESCRIPTION: This snippet shows how to add an Edit button to the PagesList component, including the creation of a PageEditButton component and updating the table structure.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/data-basics/3-building-an-edit-form.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Button } from '@wordpress/components';\nimport { decodeEntities } from '@wordpress/html-entities';\n\nconst PageEditButton = () => (\n\t<Button variant=\"primary\">\n\t\tEdit\n\t</Button>\n)\n\nfunction PagesList( { hasResolved, pages } ) {\n\tif ( ! hasResolved ) {\n\t\treturn <Spinner />;\n\t}\n\tif ( ! pages?.length ) {\n\t\treturn <div>No results</div>;\n\t}\n\n\treturn (\n\t\t<table className=\"wp-list-table widefat fixed striped table-view-list\">\n\t\t\t<thead>\n\t\t\t\t<tr>\n\t\t\t\t\t<td>Title</td>\n\t\t\t\t\t<td style={{width: 120}}>Actions</td>\n\t\t\t\t</tr>\n\t\t\t</thead>\n\t\t\t<tbody>\n\t\t\t\t{ pages?.map( ( page ) => (\n\t\t\t\t\t<tr key={page.id}>\n\t\t\t\t\t\t<td>{ decodeEntities( page.title.rendered ) }</td>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<PageEditButton pageId={ page.id } />\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</tr>\n\t\t\t\t) ) }\n\t\t\t</tbody>\n\t\t</table>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Experimental Features in Block Editor\nDESCRIPTION: Example of enabling text and background color features in the block editor, including custom colors and a predefined theme palette. These settings are passed to the BlockEditorProvider component.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/platform-docs/docs/basic-concepts/settings.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { BlockEditorProvider, BlockCanvas } from '@wordpress/block-editor';\n\nconst features = {\n\tcolor: {\n\t\tcustom: true,\n\t\ttext: true,\n\t\tbackground: true,\n\t\tpalette: {\n\t\t\ttheme: [\n\t\t\t\t{ name: 'red', color: '#f00', slug: 'red' },\n\t\t\t\t{ name: 'white', color: '#fff', slug: 'white' },\n\t\t\t\t{ name: 'blue', color: '#00f', slug: 'blue' },\n\t\t\t],\n\t\t},\n\t},\n};\n\nexport default function App() {\n\treturn (\n\t\t<BlockEditorProvider settings={ { __experimentalFeatures: features } }>\n\t\t\t<BlockCanvas />\n\t\t</BlockEditorProvider>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GradientPicker Component in React\nDESCRIPTION: This snippet demonstrates how to use the GradientPicker component from @wordpress/components. It shows setting up a state for the gradient value and passing predefined gradients as props.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/gradient-picker/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { GradientPicker } from '@wordpress/components';\n\nconst MyGradientPicker = () => {\n  const [ gradient, setGradient ] = useState( null );\n\n  return (\n    <GradientPicker\n      value={ gradient }\n      onChange={ ( currentGradient ) => setGradient( currentGradient ) }\n      gradients={ [\n        {\n          name: 'JShine',\n          gradient:\n            'linear-gradient(135deg,#12c2e9 0%,#c471ed 50%,#f64f59 100%)',\n          slug: 'jshine',\n        },\n        {\n          name: 'Moonlit Asteroid',\n          gradient:\n            'linear-gradient(135deg,#0F2027 0%, #203A43 0%, #2c5364 100%)',\n          slug: 'moonlit-asteroid',\n        },\n        {\n          name: 'Rastafarie',\n          gradient:\n            'linear-gradient(135deg,#1E9600 0%, #FFF200 0%, #FF0000 100%)',\n          slug: 'rastafari',\n        },\n      ] }\n    />\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Block Registration in JavaScript\nDESCRIPTION: Example of registering a block on the client-side using registerBlockType with minimal configuration.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/getting-started/fundamentals/registration-of-a-block.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { registerBlockType } from '@wordpress/blocks';\n\nregisterBlockType( 'my-plugin/notice', {\n\tedit: Edit,\n\t// ...other client-side settings\n} );\n```\n\n----------------------------------------\n\nTITLE: Server-Side Render Component Implementation in React/JSX\nDESCRIPTION: Implementation using ServerSideRender component to render block content on the server while maintaining editor preview.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/block-tutorial/creating-dynamic-blocks.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { registerBlockType } from '@wordpress/blocks';\nimport ServerSideRender from '@wordpress/server-side-render';\nimport { useBlockProps } from '@wordpress/block-editor';\n\nregisterBlockType( 'gutenberg-examples/example-dynamic', {\n\tapiVersion: 3,\n\ttitle: 'Example: last post',\n\ticon: 'megaphone',\n\tcategory: 'widgets',\n\n\tedit: function ( props ) {\n\t\tconst blockProps = useBlockProps();\n\t\treturn (\n\t\t\t<div { ...blockProps }>\n\t\t\t\t<ServerSideRender\n\t\t\t\t\tblock=\"gutenberg-examples/example-dynamic\"\n\t\t\t\t\tattributes={ props.attributes }\n\t\t\t\t/>\n\t\t\t</div>\n\t\t);\n\t},\n} );\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Site Title Block Rendering in PHP\nDESCRIPTION: PHP implementation of the Site Title block's render_callback function that dynamically generates the site title markup based on attributes and current site settings. Handles conditional link creation, text alignment, and proper HTML tag selection.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/getting-started/fundamentals/static-dynamic-rendering.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nfunction render_block_core_site_title( $attributes ) {\n\t$site_title = get_bloginfo( 'name' );\n\tif ( ! $site_title ) {\n\t\treturn;\n\t}\n\n\t$tag_name = 'h1';\n\t$classes  = empty( $attributes['textAlign'] ) ? '' : \"has-text-align-{$attributes['textAlign']}\";\n\tif ( isset( $attributes['style']['elements']['link']['color']['text'] ) ) {\n\t\t$classes .= ' has-link-color';\n\t}\n\n\tif ( isset( $attributes['level'] ) ) {\n\t\t$tag_name = 0 === $attributes['level'] ? 'p' : 'h' . (int) $attributes['level'];\n\t}\n\n\tif ( $attributes['isLink'] ) {\n\t\t$aria_current = is_home() || ( is_front_page() && 'page' === get_option( 'show_on_front' ) ) ? ' aria-current=\"page\"' : '';\n\t\t$link_target  = ! empty( $attributes['linkTarget'] ) ? $attributes['linkTarget'] : '_self';\n\n\t\t$site_title = sprintf(\n\t\t\t'<a href=\"%1$s\" target=\"%2$s\" rel=\"home\"%3$s>%4$s</a>',\n\t\t\tesc_url( home_url() ),\n\t\t\tesc_attr( $link_target ),\n\t\t\t$aria_current,\n\t\t\tesc_html( $site_title )\n\t\t);\n\t}\n\t$wrapper_attributes = get_block_wrapper_attributes( array( 'class' => trim( $classes ) ) );\n\n\treturn sprintf(\n\t\t'<%1$s %2$s>%3$s</%1$s>',\n\t\t$tag_name,\n\t\t$wrapper_attributes,\n\t\t$attributes['isLink'] ? $site_title : esc_html( $site_title )\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Click Event Handling with wp-on Directive\nDESCRIPTION: Shows how to use the wp-on directive to handle DOM events like clicks. The button will execute the logTime action when clicked.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/api-reference.md#2025-04-21_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n<button data-wp-on--click=\"actions.logTime\" >\n  Click Me!\n</button>\n```\n\n----------------------------------------\n\nTITLE: Nested Template Configuration in PHP\nDESCRIPTION: Demonstrates how to create nested templates with columns block, including multiple columns with different block configurations inside each column.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-templates.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$template = array(\n\tarray( 'core/paragraph', array(\n\t\t'placeholder' => 'Add a root-level paragraph',\n\t) ),\n\tarray( 'core/columns', array(), array(\n\t\tarray( 'core/column', array(), array(\n\t\t\tarray( 'core/image', array() ),\n\t\t) ),\n\t\tarray( 'core/column', array(), array(\n\t\t\tarray( 'core/paragraph', array(\n\t\t\t\t'placeholder' => 'Add a inner paragraph'\n\t\t\t) ),\n\t\t) ),\n\t) )\n);\n```\n\n----------------------------------------\n\nTITLE: Using I18nProvider for internationalization in React\nDESCRIPTION: This code demonstrates how to use the I18nProvider component to wrap a React application and provide internationalization support. It imports the necessary modules, creates an I18n instance, and renders the App component within the I18nProvider, passing the I18n instance as a prop.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/react-i18n/README.md#2025-04-21_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { createI18n } from '@wordpress/i18n';\nimport { I18nProvider } from '@wordpress/react-i18n';\nconst i18n = createI18n();\n\nReactDom.render(\n\t<I18nProvider i18n={ i18n }>\n\t\t<App />\n\t</I18nProvider>,\n\tel\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing withColors HOC in WordPress Block Editor (JSX)\nDESCRIPTION: Shows how to use the withColors higher-order component to handle color logic for class generation, color value retrieval, and color attribute setting in a WordPress block.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/README.md#2025-04-21_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nexport default compose(\n\twithColors( 'backgroundColor', { textColor: 'color' } ),\n\tMyColorfulComponent\n);\n```\n\n----------------------------------------\n\nTITLE: Using Directives in HTML Markup\nDESCRIPTION: This snippet shows how to use the Interactivity API by adding directives directly to HTML elements to manage block interactions. Directives like data-wp-on--click and data-wp-bind are used to handle events and state changes. The data-wp-interactive attribute is crucial but was omitted here for simplicity.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/api-reference.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div data-wp-interactive=\"myPlugin\" data-wp-context='{ \"isOpen\": false }' data-wp-watch=\"callbacks.logIsOpen\">\n\t<button data-wp-on--click=\"actions.toggle\" data-wp-bind--aria-expanded=\"context.isOpen\" aria-controls=\"p-1\">Toggle</button>\n\t<p id=\"p-1\" data-wp-bind--hidden=\"!context.isOpen\">This element is now visible!</p>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating Modal Form Button Component in JavaScript\nDESCRIPTION: Implementation of a button component that opens a modal form for creating new WordPress pages using Gutenberg components and React hooks.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/data-basics/4-building-a-create-page-form.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useDispatch } from '@wordpress/data';\nimport { Button, Modal, TextControl } from '@wordpress/components';\n\nfunction CreatePageButton() {\n\tconst [isOpen, setOpen] = useState( false );\n\tconst openModal = () => setOpen( true );\n\tconst closeModal = () => setOpen( false );\n\treturn (\n\t\t<>\n\t\t\t<Button onClick={ openModal } variant=\"primary\">\n\t\t\t\tCreate a new Page\n\t\t\t</Button>\n\t\t\t{ isOpen && (\n\t\t\t\t<Modal onRequestClose={ closeModal } title=\"Create a new page\">\n\t\t\t\t\t<CreatePageForm\n\t\t\t\t\t\tonCancel={ closeModal }\n\t\t\t\t\t\tonSaveFinished={ closeModal }\n\t\t\t\t\t/>\n\t\t\t\t</Modal>\n\t\t\t) }\n\t\t</>\n\t);\n}\n\nfunction CreatePageForm() {\n\t// Empty for now\n\treturn <div/>;\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Non-Derived vs Derived State Approaches in JavaScript\nDESCRIPTION: This snippet compares two approaches: one without derived state and one with derived state, demonstrating the benefits of using derived state for maintainability and reduced bugs.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/core-concepts/undestanding-global-state-local-context-and-derived-state.md#2025-04-21_snippet_27\n\nLANGUAGE: js\nCODE:\n```\n// Not using derived state\nconst { state } = store( 'myCounterPlugin', {\n\tstate: {\n\t\tcounter: 1,\n\t\tdouble: 2,\n\t},\n\tactions: {\n\t\tincrement() {\n\t\t\tstate.counter += 1;\n\t\t\tstate.double = state.counter * 2;\n\t\t},\n\t},\n} );\n```\n\nLANGUAGE: js\nCODE:\n```\n// Using derived state\nconst { state } = store( 'myCounterPlugin', {\n\tstate: {\n\t\tcounter: 1,\n\t\tget double() {\n\t\t\treturn state.counter * 2;\n\t\t},\n\t},\n\tactions: {\n\t\tincrement() {\n\t\t\tstate.counter += 1;\n\t\t},\n\t},\n} );\n```\n\n----------------------------------------\n\nTITLE: Widget Area Selectors Implementation - JavaScript\nDESCRIPTION: Collection of selector functions to get widget area state, blocks, and related data from the store. Includes functions for checking block insertion capabilities, edited widget areas, open states, and reference widgets.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core-edit-widgets.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncanInsertBlockInWidgetArea( state, blockName )\ngetEditedWidgetAreas()\ngetIsWidgetAreaOpen( state, clientId )\ngetParentWidgetAreaBlock( clientId )\ngetReferenceWidgetBlocks( referenceWidgetName )\ngetWidget( id )\ngetWidgetAreaForWidgetId( widgetId )\ngetWidgetAreas()\ngetWidgets()\nisInserterOpened( state )\nisListViewOpened( state )\nisSavingWidgetAreas()\n```\n\n----------------------------------------\n\nTITLE: Basic RichText Component Usage in WordPress\nDESCRIPTION: Demonstrates basic implementation of RichText component with formatting restrictions. Shows how to set up a heading with bold and italic formatting options only.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/src/components/rich-text/README.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<RichText\n\ttagName=\"h2\"\n\tidentifier=\"content\"\n\tvalue={ attributes.content }\n\tallowedFormats={ [ 'core/bold', 'core/italic' ] }\n\tonChange={ ( content ) => setAttributes( { content } ) }\n\tplaceholder={ __( 'Heading...' ) }\n/>\n```\n\n----------------------------------------\n\nTITLE: Using withFilters to Append a Component in React\nDESCRIPTION: This snippet demonstrates how to use withFilters to wrap a component and add filtering capability. It shows how to create a higher-order component that appends another component to the filtered component.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/higher-order/with-filters/README.md#2025-04-21_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport { withFilters } from '@wordpress/components';\nimport { addFilter } from '@wordpress/hooks';\n\nconst MyComponent = ( { title } ) => <h1>{ title }</h1>;\n\nconst ComponentToAppend = () => <div>Appended component</div>;\n\nfunction withComponentAppended( FilteredComponent ) {\n\treturn ( props ) => (\n\t\t<>\n\t\t\t<FilteredComponent { ...props } />\n\t\t\t<ComponentToAppend />\n\t\t</>\n\t);\n}\n\naddFilter(\n\t'MyHookName',\n\t'my-plugin/with-component-appended',\n\twithComponentAppended\n);\n\nconst MyComponentWithFilters = withFilters( 'MyHookName' )( MyComponent );\n```\n\n----------------------------------------\n\nTITLE: Adding Search Functionality to PagesList\nDESCRIPTION: This snippet demonstrates how to add a search box to filter the list of pages. It uses the SearchControl component from @wordpress/components and updates the API query based on the search term.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/data-basics/2-building-a-list-of-pages.md#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { createRoot } from 'react-dom';\nimport { SearchControl } from '@wordpress/components';\nimport { useSelect } from '@wordpress/data';\nimport { store as coreDataStore } from '@wordpress/core-data';\n\nfunction MyFirstApp() {\n\tconst [searchTerm, setSearchTerm] = useState( '' );\n\tconst pages = useSelect( select => {\n\t\tconst query = {};\n\t\tif ( searchTerm ) {\n\t\t\tquery.search = searchTerm;\n\t\t}\n\t\treturn select( coreDataStore ).getEntityRecords( 'postType', 'page', query );\n\t}, [searchTerm] );\n\n\treturn (\n\t\t<div>\n\t\t\t<SearchControl\n\t\t\t\tonChange={ setSearchTerm }\n\t\t\t\tvalue={ searchTerm }\n\t\t\t/>\n\t\t\t<PagesList pages={ pages }/>\n\t\t</div>\n\t)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Reusable Blocks in BlockEditorProvider\nDESCRIPTION: This snippet demonstrates how to configure the BlockEditorProvider to include reusable blocks. It uses the useSelect hook to fetch reusable blocks from the core store and passes them to the BlockEditorProvider's settings.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/reusable-blocks/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { __experimentalReusableBlocks } = useSelect( ( select ) =>\n\tselect( 'core' ).getEntityRecords( 'postType', 'wp_block' )\n);\n\nreturn (\n\t<BlockEditorProvider\n\t\tvalue={ blocks }\n\t\tonInput={ onInput }\n\t\tonChange={ onChange }\n\t\tsettings={ {\n\t\t\t...settings,\n\t\t\t__experimentalReusableBlocks,\n\t\t} }\n\t\t{ ...props }\n\t/>\n);\n```\n\n----------------------------------------\n\nTITLE: Parsing HTML Back to Blocks in WordPress Gutenberg\nDESCRIPTION: This snippet shows how to convert HTML back into a block list object using the parse function from the @wordpress/blocks package. It takes HTML content and returns the corresponding array of block objects.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/platform-docs/docs/basic-concepts/rendering.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { parse } from '@wordpress/blocks';\n\nconst blockList = parse( html );\n```\n\n----------------------------------------\n\nTITLE: Implementing a Modal Component with React in WordPress Gutenberg\nDESCRIPTION: This example demonstrates how to properly implement a modal component in WordPress Gutenberg using React hooks. It shows the pattern for managing the modal's open/close state and handling close events correctly.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/modal/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { Button, Modal } from '@wordpress/components';\n\nconst MyModal = () => {\n\tconst [ isOpen, setOpen ] = useState( false );\n\tconst openModal = () => setOpen( true );\n\tconst closeModal = () => setOpen( false );\n\n\treturn (\n\t\t<>\n\t\t\t<Button variant=\"secondary\" onClick={ openModal }>\n\t\t\t\tOpen Modal\n\t\t\t</Button>\n\t\t\t{ isOpen && (\n\t\t\t\t<Modal title=\"This is my modal\" onRequestClose={ closeModal }>\n\t\t\t\t\t<Button variant=\"secondary\" onClick={ closeModal }>\n\t\t\t\t\t\tMy custom close button\n\t\t\t\t\t</Button>\n\t\t\t\t</Modal>\n\t\t\t) }\n\t\t</>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Block Object Structure Definition in JavaScript\nDESCRIPTION: Defines the fundamental structure of a block object with its core properties including clientId, type, attributes, and innerBlocks. This structure is the foundation of the block editor's data model.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/explanations/architecture/data-flow.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst block = {\n\tclientId, // unique string identifier.\n\ttype, // The block type (paragraph, image...)\n\tattributes, // (key, value) set of attributes representing the direct properties/content of the current block.\n\tinnerBlocks, // An array of child blocks or inner blocks.\n};\n```\n\n----------------------------------------\n\nTITLE: Making GET Requests with API Fetch\nDESCRIPTION: Demonstrates how to use API Fetch to make a GET request to the WordPress posts endpoint. The example imports the apiFetch function and uses the path option to specify the endpoint URL.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/api-fetch/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport apiFetch from '@wordpress/api-fetch';\n\napiFetch( { path: '/wp/v2/posts' } ).then( ( posts ) => {\n\tconsole.log( posts );\n} );\n```\n\n----------------------------------------\n\nTITLE: Disabling Reusability for Gutenberg Blocks (JavaScript)\nDESCRIPTION: This snippet disables the ability to convert a block into a reusable block by setting the `reusable` property in the `supports` to false.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-supports.md#2025-04-21_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nsupports: {\n\t// Don't allow the block to be converted into a reusable block.\n\treusable: false,\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Stickiness for Gutenberg Blocks (JavaScript)\nDESCRIPTION: This snippet enables sticky positioning for a block by adding a `position` object to the `supports` property, allowing the user to set the sticky position through the UI.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-supports.md#2025-04-21_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nsupports: {\n\tposition: {\n\t\tsticky: true // Enable selecting sticky position.\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing and Rendering Custom Block Editor in JavaScript\nDESCRIPTION: This snippet demonstrates how to initialize the custom block editor once the DOM is ready. It retrieves editor settings, registers core blocks, and renders the Editor component.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/platform/custom-block-editor.md#2025-04-21_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\ndomReady( function () {\n\tconst root = createRoot( document.getElementById( 'getdave-sbe-block-editor' ) );\n\tconst settings = window.getdaveSbeSettings || {};\n\tregisterCoreBlocks();\n\troot.render(\n\t\t<Editor settings={ settings } />\n\t);\n} );\n```\n\n----------------------------------------\n\nTITLE: Saving Block Attributes to Child Elements in WordPress Gutenberg (JSX)\nDESCRIPTION: This code snippet demonstrates how to save block attributes to child elements in a WordPress Gutenberg block. It defines the block's attributes, edit function, and save function. The edit function uses a TextControl component to allow users to input text, which is then saved as the block's content.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-edit-save.md#2025-04-21_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nattributes: {\n\tcontent: {\n\t\ttype: 'string',\n\t\tsource: 'html',\n\t\tselector: 'div'\n\t}\n},\n\nedit: ( { attributes, setAttributes } ) => {\n\tconst blockProps = useBlockProps();\n\tconst updateFieldValue = ( val ) => {\n\t\tsetAttributes( { content: val } );\n\t}\n\treturn (\n\t\t<div { ...blockProps }>\n\t\t\t<TextControl\n\t\t\t\t__nextHasNoMarginBottom\n\t\t\t\t__next40pxDefaultSize\n\t\t\t\tlabel='My Text Field'\n\t\t\t\tvalue={ attributes.content }\n\t\t\t\tonChange={ updateFieldValue }\n\t\t\t/>\n\t\t</div>\n\t);\n},\n\nsave: ( { attributes } ) => {\n\tconst blockProps = useBlockProps.save();\n\n\treturn <div { ...blockProps }> { attributes.content } </div>;\n},\n```\n\n----------------------------------------\n\nTITLE: Using CardMedia Component in React for WordPress\nDESCRIPTION: This snippet demonstrates how to use the CardMedia component within a Card structure. It imports necessary components from @wordpress/components and shows the basic structure of a Card with CardMedia and CardBody.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/card/card-media/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Card, CardBody, CardMedia } from '@wordpress/components';\n\nconst Example = () => (\n\t<Card>\n\t\t<CardMedia>\n\t\t\t<img src=\"...\" />\n\t\t</CardMedia>\n\t\t<CardBody>...</CardBody>\n\t</Card>\n);\n```\n\n----------------------------------------\n\nTITLE: Installing @wordpress/scripts Package with npm\nDESCRIPTION: Command to install the @wordpress/scripts package as a development dependency using npm.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/scripts/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @wordpress/scripts --save-dev\n```\n\n----------------------------------------\n\nTITLE: Implementing TabbedSidebar Component in WordPress Block Editor\nDESCRIPTION: Example demonstrating how to implement a TabbedSidebar component with multiple tabs, close functionality, and optional panel references. The component supports customizable tab titles, content panels, and event handlers for tab selection and closure.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/src/components/tabbed-sidebar/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { TabbedSidebar } from '@wordpress/block-editor';\n\nconst MyTabbedSidebar = () => (\n\t<TabbedSidebar\n\t\ttabs={ [\n\t\t\t{\n\t\t\t\tname: 'slug-1',\n\t\t\t\ttitle: _x( 'Title 1', 'context' ),\n\t\t\t\tpanel: <PanelContents />,\n\t\t\t\tpanelRef: useRef('an-optional-ref'),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'slug-2',\n\t\t\t\ttitle: _x( 'Title 2', 'context' ),\n\t\t\t\tpanel: <PanelContents />,\n\t\t\t},\n\t\t] }\n\t\tonClose={ onClickCloseButton }\n\t\tonSelect={ onSelectTab }\n\t\tdefaultTabId=\"slug-1\"\n\t\tselectedTab=\"slug-1\"\n\t\tcloseButtonLabel=\"Close sidebar\"\n\t\tref={ tabsRef }\n\t/>\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Dropdown Component with Toggle Button in React\nDESCRIPTION: Example of how to use the Dropdown component from @wordpress/components to create a dropdown with a toggle button. The example demonstrates setting up render props for both the toggle button and dropdown content, along with basic configuration options.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/dropdown/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Button, Dropdown } from '@wordpress/components';\n\nconst MyDropdown = () => (\n\t<Dropdown\n\t\tclassName=\"my-container-class-name\"\n\t\tcontentClassName=\"my-popover-content-classname\"\n\t\tpopoverProps={ { placement: 'bottom-start' } }\n\t\trenderToggle={ ( { isOpen, onToggle } ) => (\n\t\t\t<Button\n\t\t\t\tvariant=\"primary\"\n\t\t\t\tonClick={ onToggle }\n\t\t\t\taria-expanded={ isOpen }\n\t\t\t>\n\t\t\t\tToggle Popover!\n\t\t\t</Button>\n\t\t) }\n\t\trenderContent={ () => <div>This is the content of the popover.</div> }\n\t/>\n);\n```\n\n----------------------------------------\n\nTITLE: Representing Block Collections in JavaScript\nDESCRIPTION: Shows the basic structure of how multiple blocks are represented as an array in JavaScript within the block editor.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/platform-docs/docs/basic-concepts/data.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst value = [ block1, block2, block3 ];\n```\n\n----------------------------------------\n\nTITLE: Rendering Block Variation Picker with React in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to render the BlockVariationPicker component using React in a Gutenberg block. It uses the useSelect hook from '@wordpress/data' to get block variations and passes them to the BlockVariationPicker component. This snippet requires knowledge of WordPress block development and dependencies like '@wordpress/data' and '@wordpress/block-editor'. The snippet provides a UI component for selecting different block variations based on the block's name. Expected input is the block name, and it outputs a picker interface with selectable block variations.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/src/components/block-variation-picker/README.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useSelect } from '@wordpress/data';\nimport {\n\t__experimentalBlockVariationPicker as BlockVariationPicker\n} from '@wordpress/block-editor';\nimport { store as blocksStore } from '@wordpress/blocks';\n\nconst MyBlockVariationPicker = ( { blockName } ) => {\n\tconst variations = useSelect(\n\t\t( select ) => {\n\t\t\tconst { getBlockVariations } = select( blocksStore );\n\t\t\treturn getBlockVariations( blockName, 'block' );\n\t\t},\n\t\t[ blockName ]\n\t);\n\treturn <BlockVariationPicker variations={ variations } />;\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Colors HOC in React/JSX\nDESCRIPTION: Example showing how to create a higher-order component for handling custom colors using createCustomColorsHOC. The HOC manages color logic for class generation, value retrieval and color attribute setting.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/README.md#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst CUSTOM_COLORS = [\n\t{ name: 'Red', slug: 'red', color: '#ff0000' },\n\t{ name: 'Blue', slug: 'blue', color: '#0000ff' },\n];\nconst withCustomColors = createCustomColorsHOC( CUSTOM_COLORS );\n// ...\nexport default compose(\n\twithCustomColors( 'backgroundColor', 'borderColor' ),\n\tMyColorfulComponent\n);\n```\n\n----------------------------------------\n\nTITLE: Registering Individual Block Methods\nDESCRIPTION: Three different approaches for registering individual blocks: direct import, reference import, and manual initialization\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-library/README.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport '@wordpress/block-library/build-module/verse/init';\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport verseBlock from '@wordpress/block-library/build-module/verse/init';\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { init } from '@wordpress/block-library/build-module/verse';\n\nconst verseBlock = init();\n```\n\n----------------------------------------\n\nTITLE: PHP Post Meta Registration for Block Bindings\nDESCRIPTION: Registration of post meta field for use with block bindings, including REST API support and metadata configuration.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-bindings.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nadd_action(\n\t'init',\n\tfunction () {\n\t\tregister_meta(\n\t\t\t'post',\n\t\t\t'wp_movies_visualization_date',\n\t\t\tarray(\n\t\t\t\t'show_in_rest' => true,\n\t\t\t\t'single'       => true,\n\t\t\t\t'type'         => 'string',\n\t\t\t\t'label'        => __( 'Movie visualization date', 'custom-bindings' ),\n\t\t\t)\n\t\t);\n\t}\n);\n```\n\n----------------------------------------\n\nTITLE: Updating WordPress Packages with wp-scripts\nDESCRIPTION: This snippet shows how to configure the `packages-update` script in `package.json` to update WordPress packages to their latest version using `wp-scripts`. It also includes an example of a post-update script to trigger a build. The `packages-update` script is executed using `npm run packages-update`.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/scripts/README.md#2025-04-21_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"scripts\": {\n\t\t\"packages-update\": \"wp-scripts packages-update\",\n\t\t\"postpackages-update\": \"npm run build\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Multiple Elements in JavaScript\nDESCRIPTION: Example of using the 'query' source to extract an array of objects from multiple elements in the block's markup.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-attributes.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n{\n\timages: {\n\t\ttype: 'array',\n\t\tsource: 'query',\n\t\tselector: 'img',\n\t\tquery: {\n\t\t\turl: {\n\t\t\t\ttype: 'string',\n\t\t\t\tsource: 'attribute',\n\t\t\t\tattribute: 'src',\n\t\t\t},\n\t\t\talt: {\n\t\t\t\ttype: 'string',\n\t\t\t\tsource: 'attribute',\n\t\t\t\tattribute: 'alt',\n\t\t\t},\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Edit Function for Gutenberg Block - JavaScript\nDESCRIPTION: The 'Edit' function controls the rendering of the block in the Gutenberg editor. It handles user inputs for the copyright start year and updates the displayed date based on user settings while utilizing WordPress components like InspectorControls.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/getting-started/tutorial.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function Edit( { attributes, setAttributes } ) {\n\tconst { showStartingYear, startingYear } = attributes;\n\tconst currentYear = new Date().getFullYear().toString();\n\n\tlet displayDate;\n\n\tif ( showStartingYear && startingYear ) {\n\t\tdisplayDate = startingYear + '–' + currentYear;\n\t} else {\n\t\tdisplayDate = currentYear;\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t<InspectorControls>\n\t\t\t\t<PanelBody title={ __( 'Settings', 'copyright-date-block' ) }>\n\t\t\t\t\t<ToggleControl\n\t\t\t\t\t\tchecked={ !! showStartingYear }\n\t\t\t\t\t\tlabel={ __( 'Show starting year', 'copyright-date-block' ) }\n\t\t\t\t\t\tonChange={ () =>\n\t\t\t\t\t\t\tsetAttributes( {\n\t\t\t\t\t\t\t\tshowStartingYear: ! showStartingYear,\n\t\t\t\t\t\t\t} )\n\t\t\t\t\t\t}\n\t\t\t\t\t/>\n\t\t\t\t\t{ showStartingYear && (\n\t\t\t\t\t\t<TextControl\n\t\t\t\t\t\t\tlabel={ __( 'Starting year', 'copyright-date-block' ) }\n\t\t\t\t\t\t\tvalue={ startingYear || '' }\n\t\t\t\t\t\t\tonChange={ ( value ) =>\n\t\t\t\t\t\t\t\tsetAttributes( { startingYear: value } )\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t/>\n\t\t\t\t\t) }\n\t\t\t\t</PanelBody>\n\t\t\t</InspectorControls>\n\t\t\t<p { ...useBlockProps() }>© { displayDate }</p>\n\t\t</>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Using useRegistry Hook in React Component\nDESCRIPTION: Demonstrates how to use the useRegistry hook to access the registry context in a child component, provided by a parent component using RegistryProvider.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/data/README.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { RegistryProvider, createRegistry, useRegistry } from '@wordpress/data';\n\nconst registry = createRegistry( {} );\n\nconst SomeChildUsingRegistry = ( props ) => {\n\tconst registry = useRegistry();\n\t// ...logic implementing the registry in other react hooks.\n};\n\nconst ParentProvidingRegistry = ( props ) => {\n\treturn (\n\t\t<RegistryProvider value={ registry }>\n\t\t\t<SomeChildUsingRegistry { ...props } />\n\t\t</RegistryProvider>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Using ToggleGroupControlOption with ToggleGroupControl in React\nDESCRIPTION: Example showing how to implement the ToggleGroupControlOption component within a ToggleGroupControl parent. The example demonstrates setting up a toggle group with horizontal and vertical options, including tooltip configuration.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/toggle-group-control/toggle-group-control-option/README.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n\t__experimentalToggleGroupControl as ToggleGroupControl,\n\t__experimentalToggleGroupControlOption as ToggleGroupControlOption,\n} from '@wordpress/components';\n\nfunction Example() {\n\treturn (\n\t\t<ToggleGroupControl\n\t\t\tlabel=\"my label\"\n\t\t\tvalue=\"vertical\"\n\t\t\tisBlock\n\t\t\t__nextHasNoMarginBottom\n\t\t\t__next40pxDefaultSize\n\t\t>\n\t\t\t<ToggleGroupControlOption\n\t\t\t\tvalue=\"horizontal\"\n\t\t\t\tlabel=\"Horizontal\"\n\t\t\t\tshowTooltip={ true }\n\t\t\t/>\n\t\t\t<ToggleGroupControlOption value=\"vertical\" label=\"Vertical\" />\n\t\t</ToggleGroupControl>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Applying CSS Classes Using wp-class\nDESCRIPTION: An HTML example using the wp-class directive for adding or removing CSS classes based on a boolean context state. The recommended kebab-case naming is showcased for HTML compatibility.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/api-reference.md#2025-04-21_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<div>\n\t<li data-wp-context='{ \"isSelected\": false }' data-wp-on--click=\"actions.toggleSelection\" data-wp-class--selected=\"context.isSelected\">\n\t\tOption 1\n\t</li>\n\t<li data-wp-context='{ \"isSelected\": false }' data-wp-on--click=\"actions.toggleSelection\" data-wp-class--selected=\"context.isSelected\">\n\t\tOption 2\n\t</li>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Registering Block Transforms in Gutenberg\nDESCRIPTION: Example of how to register block transforms in the `registerBlockType` function, showing the basic structure with placeholders for the transform definitions.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/platform-docs/docs/create-block/transforms.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nregisterBlockType( 'create-block/gutenpride', {\n\t// ...\n\ttransforms: {\n\t\tfrom: [\n\t\t\t/* supported from transforms */\n\t\t],\n\t\tto: [\n\t\t\t/* supported to transforms */\n\t\t],\n\t},\n} );\n```\n\n----------------------------------------\n\nTITLE: Implementing KeyboardShortcuts Component in React\nDESCRIPTION: This example demonstrates how to use the KeyboardShortcuts component from @wordpress/components to handle keyboard shortcuts in a React application. It shows binding the mod+a (cmd/ctrl+a) shortcut to the selectAll function to update component state.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/keyboard-shortcuts/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { KeyboardShortcuts } from '@wordpress/components';\n\nconst MyKeyboardShortcuts = () => {\n\tconst [ isAllSelected, setIsAllSelected ] = useState( false );\n\tconst selectAll = () => {\n\t\tsetIsAllSelected( true );\n\t};\n\n\treturn (\n\t\t<div>\n\t\t\t<KeyboardShortcuts\n\t\t\t\tshortcuts={ {\n\t\t\t\t\t'mod+a': selectAll,\n\t\t\t\t} }\n\t\t\t/>\n\t\t\t[cmd/ctrl + A] Combination pressed? { isAllSelected ? 'Yes' : 'No' }\n\t\t</div>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Locking paragraph block position\nDESCRIPTION: This JavaScript snippet utilizes the `blocks.getBlockAttributes` filter to lock the position of all paragraph blocks on a page. It checks if the block type is `core/paragraph` and, if so, adds a `lock` attribute to prevent moving the block.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/filters/block-filters.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// Our filter function\nfunction lockParagraphs( blockAttributes, blockType, innerHTML, attributes  ) {\n    if('core/paragraph' === blockType.name) {\n        blockAttributes['lock'] = {move: true}\n    }\n    return blockAttributes;\n}\n\n// Add the filter\nwp.hooks.addFilter(\n    'blocks.getBlockAttributes',\n    'my-plugin/lock-paragraphs',\n    lockParagraphs\n);\n\n```\n\n----------------------------------------\n\nTITLE: Scaffolding WordPress Block Plugin with create-block\nDESCRIPTION: This command uses @wordpress/create-block package with a tutorial template to scaffold a complete 'Copyright Date Block' plugin. It creates the plugin structure and necessary files.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/getting-started/quick-start-guide.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx @wordpress/create-block copyright-date-block --template @wordpress/create-block-tutorial-template\n```\n\n----------------------------------------\n\nTITLE: Using wp-text Directive with Context in HTML\nDESCRIPTION: Demonstrates how to use the wp-text directive to set element inner text based on context data. The example shows setting text content reactively within a context object and toggling it with a button click.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/api-reference.md#2025-04-21_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<div data-wp-context='{ \"text\": \"Text 1\" }'>\n\t<span data-wp-text=\"context.text\"></span>\n\t<button data-wp-on--click=\"actions.toggleContextText\">\n\t\tToggle Context Text\n\t</button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Transforming Blocks with InnerBlocks in WordPress Gutenberg\nDESCRIPTION: Shows how to transform blocks that have InnerBlocks to another block with InnerBlocks. It demonstrates preserving both attributes and inner blocks during transformation.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-transforms.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ntransforms: {\n    to: [\n        {\n            type: 'block',\n            blocks: [ 'some/block-with-innerblocks' ],\n            transform: ( attributes, innerBlocks ) => {\n                return createBlock(\n                    'some/other-block-with-innerblocks',\n                    attributes,\n                    innerBlocks\n                );\n            },\n        },\n    ],\n},\n```\n\n----------------------------------------\n\nTITLE: Disabling HTML Editing in WordPress Gutenberg Blocks (JavaScript)\nDESCRIPTION: This snippet disables the HTML editing mode for the block by setting the `html` property in the `supports` configuration to false.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-supports.md#2025-04-21_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nsupports: {\n\t// Remove support for an HTML mode.\n\thtml: false\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Page Data with WordPress Core Data Package\nDESCRIPTION: This snippet demonstrates how to use the @wordpress/core-data package to fetch the list of pages from the WordPress REST API. It uses the useSelect hook to manage data fetching and re-rendering.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/data-basics/2-building-a-list-of-pages.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useSelect } from '@wordpress/data';\nimport { store as coreDataStore } from '@wordpress/core-data';\nimport { decodeEntities } from '@wordpress/html-entities';\n\nfunction MyFirstApp() {\n\tconst pages = useSelect(\n\t\tselect =>\n\t\t\tselect( coreDataStore ).getEntityRecords( 'postType', 'page' ),\n\t\t[]\n\t);\n\treturn <PagesList pages={ pages }/>;\n}\n\nfunction PagesList( { pages } ) {\n\treturn (\n\t\t<ul>\n\t\t\t{ pages?.map( page => (\n\t\t\t\t<li key={ page.id }>\n\t\t\t\t\t{ decodeEntities( page.title.rendered ) }\n\t\t\t\t</li>\n\t\t\t) ) }\n\t\t</ul>\n\t)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Render Markup with get_block_wrapper_attributes() in PHP\nDESCRIPTION: This PHP snippet demonstrates how to use the get_block_wrapper_attributes() function in a dynamic block's render callback to output the necessary classes and attributes for the block wrapper on the server side.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/getting-started/fundamentals/block-wrapper.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<p <?php echo get_block_wrapper_attributes(); ?>>\n\t<?php esc_html_e( 'Block with Dynamic Rendering – hello!!!', 'block-development-examples' ); ?>\n</p>\n```\n\n----------------------------------------\n\nTITLE: Fetching Multiple Taxonomies with getTaxonomies Selector in JavaScript\nDESCRIPTION: This snippet illustrates how to use the getTaxonomies selector to retrieve information for multiple taxonomies with optional query parameters.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useSelect } from '@wordpress/data';\nimport { store as coreDataStore } from '@wordpress/core-data';\n\nconst taxonomies = useSelect( ( select ) => {\n\treturn select( coreDataStore ).getTaxonomies( { type: 'post' } );\n\n\t// Equivalent to:\n\t// select( coreDataStore ).getEntityRecords( 'root', 'taxonomy', { type: 'post' } );\n} );\n```\n\n----------------------------------------\n\nTITLE: ToolbarItem Inside BlockControls\nDESCRIPTION: This snippet demonstrates how to use `ToolbarItem` within `BlockControls` for a custom block's toolbar.  It imports `BlockControls` from `@wordpress/block-editor` and `ToolbarGroup`, `ToolbarItem`, and `Button` from `@wordpress/components`. Optionally, it wraps the `ToolbarItem` with a `ToolbarGroup`.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/toolbar/toolbar-item/README.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { BlockControls } from '@wordpress/block-editor';\nimport { ToolbarGroup, ToolbarItem, Button } from '@wordpress/components';\n\nfunction Edit() {\n\treturn (\n\t\t<BlockControls>\n\t\t\t<ToolbarGroup>\n\t\t\t\t<ToolbarItem as={ Button }>I am a toolbar button</ToolbarItem>\n\t\t\t</ToolbarGroup>\n\t\t</BlockControls>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Using ToolbarButton in a Toolbar for General Interfaces\nDESCRIPTION: This example demonstrates how to use ToolbarButton within a Toolbar component to create general interfaces. It imports necessary components and shows basic usage with an icon, label, and click handler.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/toolbar/toolbar-button/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Toolbar, ToolbarButton } from '@wordpress/components';\nimport { edit } from '@wordpress/icons';\n\nfunction MyToolbar() {\n\treturn (\n\t\t<Toolbar label=\"Options\">\n\t\t\t<ToolbarButton\n\t\t\t\ticon={ edit }\n\t\t\t\tlabel=\"Edit\"\n\t\t\t\tonClick={ () => alert( 'Editing' ) }\n\t\t\t/>\n\t\t</Toolbar>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Using TextDecorationControl Component in Block Editor\nDESCRIPTION: Demonstrates how to implement the TextDecorationControl component in a block editor UI, including value handling and attribute setting through the onChange callback.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/src/components/text-decoration-control/README.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<TextDecorationControl\n  value={textDecorationValue}\n  onChange={(newValue) => setAttributes({ textDecoration: newValue })}\n/>\n```\n\n----------------------------------------\n\nTITLE: Complete Block Registration in PHP with Init Hook\nDESCRIPTION: Complete example of WordPress block registration including the init hook implementation.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/getting-started/fundamentals/registration-of-a-block.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction minimal_block_ca6eda___register_block() {\n\tregister_block_type( __DIR__ . '/build' );\n}\nadd_action( 'init', 'minimal_block_ca6eda___register_block' );\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Format Type in WordPress Gutenberg\nDESCRIPTION: Basic setup to register a new format type for the Gutenberg editor using registerFormatType. Defines a format with title, tagName, and className properties.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/format-api.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { registerFormatType } from '@wordpress/rich-text';\n\nregisterFormatType( 'my-custom-format/sample-output', {\n\ttitle: 'Sample output',\n\ttagName: 'samp',\n\tclassName: null,\n} );\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Block with InnerBlocks\nDESCRIPTION: This JavaScript snippet shows how to register a custom block in the WordPress Gutenberg editor that uses InnerBlocks to manage nested block content. The edit function uses InnerBlocks to allow users to add blocks within the custom block, and the save function uses InnerBlocks.Content to store the nested blocks' content. Dependencies include the WordPress block-editor and blocks modules. The main purpose is to enable block nesting within custom blocks.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/src/components/inner-blocks/README.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { registerBlockType } from '@wordpress/blocks';\nimport { useBlockProps, InnerBlocks } from '@wordpress/block-editor';\n\nregisterBlockType( 'my-plugin/my-block', {\n\t// ...\n\n\tedit() {\n\t\tconst blockProps = useBlockProps();\n\n\t\treturn (\n\t\t\t<div { ...blockProps }>\n\t\t\t\t<InnerBlocks />\n\t\t\t</div>\n\t\t);\n\t},\n\n\tsave() {\n\t\tconst blockProps = useBlockProps.save();\n\n\t\treturn (\n\t\t\t<div { ...blockProps }>\n\t\t\t\t<InnerBlocks.Content />\n\t\t\t</div>\n\t\t);\n\t},\n} );\n```\n\n----------------------------------------\n\nTITLE: Safely Decoding URI\nDESCRIPTION: Provides a safe method for decoding URIs that prevents throwing errors for malformed URI encodings. Returns the original URI if decoding fails.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/url/README.md#2025-04-21_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nconst badUri = safeDecodeURI( '%z' ); // does not throw an Error, simply returns '%z'\n```\n\n----------------------------------------\n\nTITLE: Integrating Redux Store with WordPress Data\nDESCRIPTION: This JavaScript snippet demonstrates how to integrate an existing Redux store into the @wordpress/data environment. It involves mapping existing selectors and actions with the Redux store and registering it using the `register` function from @wordpress/data.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/data/README.md#2025-04-21_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { register } from '@wordpress/data';\nimport existingSelectors from './existing-app/selectors';\nimport existingActions from './existing-app/actions';\nimport createStore from './existing-app/store';\n\nconst reduxStore = createStore();\n\nconst mapValues = ( obj, callback ) =>\n\tObject.entries( obj ).reduce(\n\t\t( acc, [ key, value ] ) => ( {\n\t\t\t...acc,\n\t\t\t[ key ]: callback( value ),\n\t\t} ),\n\t\t{}\n\t);\n\nconst boundSelectors = mapValues(\n\texistingSelectors,\n\t( selector ) =>\n\t\t( ...args ) =>\n\t\t\tselector( reduxStore.getState(), ...args )\n);\n\nconst boundActions = mapValues(\n\texistingActions,\n\t( action ) =>\n\t\t( ...args ) =>\n\t\t\treduxStore.dispatch( action( ...args ) )\n);\n\nconst genericStore = {\n\tname: 'existing-app',\n\tinstantiate: () => ( {\n\t\tgetSelectors: () => boundSelectors,\n\t\tgetActions: () => boundActions,\n\t\tsubscribe: reduxStore.subscribe,\n\t} ),\n};\n\nregister( genericStore );\n```\n\n----------------------------------------\n\nTITLE: Custom Responsive Controls Implementation\nDESCRIPTION: Example of implementing custom responsive controls using the renderResponsiveControls prop with unique ID generation for accessibility.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/src/components/responsive-block-control/README.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nlet uniqueId = 0;\n\nconst renderResponsiveControls = ( viewports ) => {\n\tconst inputId = ++uniqueId;\n\n\treturn viewports.map( ( { id, label } ) => {\n\t\treturn (\n\t\t\t<Fragment key={ `${ inputId }-${ id }` }>\n\t\t\t\t<label htmlFor={ `${ inputId }-${ id }` }>\n\t\t\t\t\tCustom Viewport { label }\n\t\t\t\t</label>\n\t\t\t\t<input\n\t\t\t\t\tid={ `${ inputId }-${ id }` }\n\t\t\t\t\tdefaultValue={ label }\n\t\t\t\t\ttype=\"range\"\n\t\t\t\t/>\n\t\t\t</Fragment>\n\t\t);\n\t} );\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing Local Context in JavaScript\nDESCRIPTION: Demonstrates how to access local context values in JavaScript using the getContext function.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/core-concepts/undestanding-global-state-local-context-and-derived-state.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nstore( 'myPlugin', {\n\tactions: {\n\t\tsendAnalyticsEvent() {\n\t\t\tconst { counter } = getContext();\n\t\t\tmyAnalyticsLibrary.sendEvent( 'updated counter', counter );\n\t\t},\n\t},\n\tcallbacks: {\n\t\tlogCounter() {\n\t\t\tconst { counter } = getContext();\n\t\t\tconsole.log( `Current counter: ${ counter }` );\n\t\t},\n\t},\n} );\n```\n\n----------------------------------------\n\nTITLE: Implementing Store for Counter with wp-watch Directive\nDESCRIPTION: Defines a store with actions to increase and decrease a counter, and a callback that logs the counter value. Used with the wp-watch directive to monitor and react to counter changes.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/api-reference.md#2025-04-21_snippet_20\n\nLANGUAGE: js\nCODE:\n```\nstore( 'myPlugin', {\n\tactions: {\n\t\tincreaseCounter: () => {\n\t\t\tconst context = getContext();\n\t\t\tcontext.counter++;\n\t\t},\n\t\tdecreaseCounter: () => {\n\t\t\tconst context = getContext();\n\t\t\tcontext.counter--;\n\t\t},\n\t},\n\tcallbacks: {\n\t\tlogCounter: () => {\n\t\t\tconst { counter } = getContext();\n\t\t\tconsole.log( 'Counter is ' + counter + ' at ' + new Date() );\n\t\t},\n\t},\n} );\n```\n\n----------------------------------------\n\nTITLE: Using BlockContextProvider\nDESCRIPTION: This code snippet demonstrates how to use the `BlockContextProvider` component from the `@wordpress/block-editor` module to provide context values to blocks within the BlockEditorProvider. It sets a `postId` and `postType` in the context, making them accessible to child blocks. This component is intended for external use.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/src/components/block-context/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { BlockContextProvider } from '@wordpress/block-editor';\n\nfunction MyCustomPostEditor() {\n\treturn (\n\t\t<BlockContextProvider value={ { postId: 1, postType: 'post' } }>\n\t\t\t<BlockEditorProvider { /* ... */ } />\n\t\t</BlockContextProvider>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Using ToolbarDropdownMenu in Toolbar\nDESCRIPTION: This example demonstrates how to use the ToolbarDropdownMenu component within a Toolbar component to create a dropdown menu with directional options. It imports necessary components from @wordpress/components and @wordpress/icons and defines a MyToolbar component that renders the toolbar with the dropdown menu.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/toolbar/toolbar-dropdown-menu/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Toolbar, ToolbarDropdownMenu } from '@wordpress/components';\nimport {\n\tmore,\n\tarrowLeft,\n\tarrowRight,\n\tarrowUp,\n\tarrowDown,\n} from '@wordpress/icons';\n\nfunction MyToolbar() {\n\treturn (\n\t\t<Toolbar label=\"Options\">\n\t\t\t<ToolbarDropdownMenu\n\t\t\t\ticon={ more }\n\t\t\t\tlabel=\"Select a direction\"\n\t\t\t\tcontrols={ [\n\t\t\t\t\t{\n\t\t\t\t\t\ttitle: 'Up',\n\t\t\t\t\t\ticon: arrowUp,\n\t\t\t\t\t\tonClick: () => console.log( 'up' ),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttitle: 'Right',\n\t\t\t\t\t\ticon: arrowRight,\n\t\t\t\t\t\tonClick: () => console.log( 'right' ),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttitle: 'Down',\n\t\t\t\t\t\ticon: arrowDown,\n\t\t\t\t\t\tonClick: () => console.log( 'down' ),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttitle: 'Left',\n\t\t\t\t\t\ticon: arrowLeft,\n\t\t\t\t\t\tonClick: () => console.log( 'left' ),\n\t\t\t\t\t},\n\t\t\t\t] }\n\t\t\t/>\n\t\t</Toolbar>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Block Variations with Attributes in JavaScript\nDESCRIPTION: This snippet demonstrates how to define block variations for the Embed block, specifying attributes like name, title, icon, keywords, description, patterns, and attributes for Twitter and YouTube embeds.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-variations.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst variations = [\n\t{\n\t\tname: 'twitter',\n\t\ttitle: 'Twitter',\n\t\ticon: embedTwitterIcon,\n\t\tkeywords: [ 'tweet', __( 'social' ) ],\n\t\tdescription: __( 'Embed a tweet.' ),\n\t\tpatterns: [ /^https?:\\/\\/(www\\.)?twitter\\.com\\/.+/i ],\n\t\tattributes: { providerNameSlug: 'twitter', responsive: true },\n\t},\n\t{\n\t\tname: 'youtube',\n\t\ttitle: 'YouTube',\n\t\ticon: embedYouTubeIcon,\n\t\tkeywords: [ __( 'music' ), __( 'video' ) ],\n\t\tdescription: __( 'Embed a YouTube video.' ),\n\t\tpatterns: [\n\t\t\t/^https?:\\/\\/((m|www)\\.)?youtube\\.com\\/.+/i,\n\t\t\t/^https?:\\/\\/youtu\\.be\\/.+/i,\n\t\t],\n\t\tattributes: { providerNameSlug: 'youtube', responsive: true },\n\t},\n\t// ...\n];\n```\n\n----------------------------------------\n\nTITLE: Activating Interactivity on DOM Elements\nDESCRIPTION: These examples demonstrate how to utilize the wp-interactive directive to enable interactivity for elements and their children using a specific store namespace within the Interactivity API. Namespaces can be defined as strings or JSON objects.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/api-reference.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div data-wp-interactive=\"myPlugin\" data-wp-context='{ \"myColor\" : \"red\", \"myBgColor\": \"yellow\" }'>\n\t<p>\n\t\tI'm interactive now,\n\t\t<span data-wp-style--background-color=\"context.myBgColor\">and I can use directives!</span>\n\t</p>\n\t<div>\n\t\t<p>\n\t\t\tI'm also interactive,\n\t\t\t<span data-wp-style--color=\"context.myColor\">and I can also use directives!</span>\n\t\t</p>\n\t</div>\n</div>\n\n<div data-wp-interactive='{ \"namespace\": \"myPlugin\" }' data-wp-context='{ \"myColor\" : \"red\", \"myBgColor\": \"yellow\" }'>\n\t<p>\n\t\tI'm interactive now,\n\t\t<span data-wp-style--background-color=\"context.myBgColor\">and I can use directives!</span>\n\t</p>\n\t<div>\n\t\t<p>\n\t\t\tI'm also interactive,\n\t\t\t<span data-wp-style--color=\"context.myColor\">and I can also use directives!</span>\n\t\t</p>\n\t</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Making Page Title Editable with Gutenberg Data in JavaScript/JSX\nDESCRIPTION: This snippet updates the EditPageForm to use the editEntityRecord action and getEditedEntityRecord selector from Gutenberg Data, making the page title field editable and reflecting changes in real-time.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/data-basics/3-building-an-edit-form.md#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useDispatch } from '@wordpress/data';\n\nfunction EditPageForm( { pageId, onCancel, onSaveFinished } ) {\n\tconst page = useSelect(\n\t\tselect => select( coreDataStore ).getEditedEntityRecord( 'postType', 'page', pageId ),\n\t\t[ pageId ]\n\t);\n\tconst { editEntityRecord } = useDispatch( coreDataStore );\n\tconst handleChange = ( title ) => editEntityRecord( 'postType', 'page', pageId, { title } );\n\n\treturn (\n\t\t<div className=\"my-gutenberg-form\">\n\t\t\t<TextControl\n\t\t\t\t__nextHasNoMarginBottom\n\t\t\t\t__next40pxDefaultSize\n\t\t\t\tlabel=\"Page title:\"\n\t\t\t\tvalue={ page.title }\n\t\t\t\tonChange={ handleChange }\n\t\t\t/>\n\t\t\t<div className=\"form-buttons\">\n\t\t\t\t<Button onClick={ onSaveFinished } variant=\"primary\">\n\t\t\t\t\tSave\n\t\t\t\t</Button>\n\t\t\t\t<Button onClick={ onCancel } variant=\"tertiary\">\n\t\t\t\t\tCancel\n\t\t\t\t</Button>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Platform for Environment-Specific Placeholders\nDESCRIPTION: This code snippet showcases how to use the Platform module from @wordpress/element to create environment-specific labels. It allows for different messages based on whether the environment is native or web.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/element/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Platform } from '@wordpress/element';\n\nconst placeholderLabel = Platform.select( {\n\tnative: __( 'Add media' ),\n\tweb: __(\n\t\t'Drag images, upload new ones or select files from your library.'\n\t),\n} );\n```\n\n----------------------------------------\n\nTITLE: Registering Block Style in JavaScript\nDESCRIPTION: Demonstrates how to register a new block style for a given block type. This example shows registering a 'Fancy Quote' style for the core/quote block.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/blocks/README.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { __ } from '@wordpress/i18n';\nimport { registerBlockStyle } from '@wordpress/blocks';\nimport { Button } from '@wordpress/components';\n\nconst ExampleComponent = () => {\n\treturn (\n\t\t<Button\n\t\t\tonClick={ () => {\n\t\t\t\tregisterBlockStyle( 'core/quote', {\n\t\t\t\t\tname: 'fancy-quote',\n\t\t\t\t\tlabel: __( 'Fancy Quote' ),\n\t\t\t\t} );\n\t\t\t} }\n\t\t>\n\t\t\t{ __( 'Add a new block style for core/quote' ) }\n\t\t</Button>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Registering an EditableText Input in Gutenberg JavaScript\nDESCRIPTION: Demonstrates how to register a block type in WordPress Gutenberg with an editable text input using the EditableText component. Dependencies include the wp.blocks and wp.editor modules. Key parameters include attributes for content management and event handlers for change detection. The expected input is an object with className, attributes, and setAttributes parameters. The output is a rendered EditableText component that is also saved in the content.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/src/components/editable-text/README.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { registerBlockType } = wp.blocks;\nconst { EditableText } = wp.editor;\n\nregisterBlockType( /* ... */, {\n\t// ...\n\n\tattributes: {\n\t\tcontent: {\n\t\t\tsource: 'html',\n\t\t\tselector: '.text',\n\t\t},\n\t},\n\n\tedit( { className, attributes, setAttributes } ) {\n\t\treturn (\n\t\t\t<EditableText\n\t\t\t\tclassName={ className }\n\t\t\t\tvalue={ attributes.content }\n\t\t\t\tonChange={ ( content ) => setAttributes( { content } ) }\n\t\t\t/>\n\t\t);\n\t},\n\n\tsave( { attributes } ) {\n\t\treturn <EditableText.Content value={ attributes.content } />;\n\t}\n} );\n```\n\n----------------------------------------\n\nTITLE: Using useResizeObserver Hook in Gutenberg\nDESCRIPTION: This snippet shows how to use the `useResizeObserver` hook to observe changes in an element's size. It takes a callback function that is executed when the element's size changes and options for the ResizeObserver. The hook returns a setter function to attach the ResizeObserver to the element.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/compose/README.md#2025-04-21_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nconst setElement = useResizeObserver(\n\t( resizeObserverEntries ) => console.log( resizeObserverEntries ),\n\t{ box: 'border-box' }\n);\n<div ref={ setElement } />;\n\n// The setter can be used in other ways, for example:\nuseLayoutEffect( () => {\n\tsetElement( document.querySelector( `data-element-id=\"${ elementId }\"` ) );\n}, [ elementId ] );\n\n```\n\n----------------------------------------\n\nTITLE: Accessing Block Attributes in Edit Function\nDESCRIPTION: Demonstrates how to access and use block attributes within the edit function of a Gutenberg block.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-edit-save.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nedit: ( { attributes } ) => {\n\tconst blockProps = useBlockProps();\n\n\treturn <div { ...blockProps }>{ attributes.content }</div>;\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Conditional Rendering Component with React\nDESCRIPTION: This snippet defines a React component `MyEvenNumber` that is enhanced by the `ifCondition` higher-order component to render only when the passed `number` prop is even. The predicate function checks the number's parity and ensures that the component renders appropriately based on the condition.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/compose/src/higher-order/if-condition/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nfunction MyEvenNumber( { number } ) {\n\t// This is only reached if the `number` prop is even. Otherwise, nothing\n\t// will be rendered.\n\treturn <strong>{ number }</strong>;\n}\n\nMyEvenNumber = ifCondition( ( { number } ) => number % 2 === 0 )( MyEvenNumber );\n```\n\n----------------------------------------\n\nTITLE: Reactivity Example with WordPress Interactivity API\nDESCRIPTION: This code snippet demonstrates how reactivity works in the WordPress Interactivity API. It shows the state definition, including derived properties, and an action that updates the state, which automatically triggers UI updates.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/core-concepts/the-reactive-and-declarative-mindset.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { state } = store( 'myInteractivePlugin', {\n\tstate: {\n\t\tisVisible: false,\n\t\tisActive: false,\n\t\tget visibilityText() {\n\t\t\treturn state.isVisible ? 'hide' : 'show';\n\t\t},\n\t\t// ... other derived state\n\t},\n\tactions: {\n\t\ttoggleVisibility() {\n\t\t\tstate.isVisible = ! state.isVisible;\n\t\t},\n\t\t// ... other actions\n\t},\n} );\n```\n\n----------------------------------------\n\nTITLE: Registering Core Blocks in JavaScript\nDESCRIPTION: This JavaScript snippet imports the `registerCoreBlocks` function from the `@wordpress/block-library` package and calls it to register the core Gutenberg blocks. This ensures that basic blocks like paragraphs, headings, and lists are available for use in the block editor. It needs to be imported into the main javascript file, in this case main.jsx\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/platform-docs/docs/intro.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { registerCoreBlocks } from '@wordpress/block-library'\nregisterCoreBlocks();\n```\n\n----------------------------------------\n\nTITLE: Implementing Compound Components with React Context\nDESCRIPTION: Examples showing the recommended implementation of compound components using React Context instead of React.Children.map and cloneElement. Demonstrates proper state sharing between parent and child components.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// ❌ Don't:\nfunction List ( props ) {\n\tconst [ state, setState ] = useState();\n\treturn (\n\t\t<div { ...props }>\n\t\t\t{ Children.map( props.children, ( child ) => cloneElement( child, { state } ) ) ) }\n\t\t</div>\n\t);\n}\n```\n\nLANGUAGE: jsx\nCODE:\n```\n// ✅ Do:\nconst ListContext = createContext();\n\nfunction List( props ) {\n\tconst [ state, setState ] = useState();\n\treturn (\n\t\t<ListContext.Provider value={ state }>\n\t\t\t<div { ...props } />\n\t\t</ListContext.Provider>\n\t);\n}\n\nfunction ListItem( props ) {\n\tconst state = useContext( ListContext );\n\t...\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Reusable Blocks Management Features\nDESCRIPTION: This snippet shows how to add management features for reusable blocks using the ReusableBlocksMenuItems component from @wordpress/reusable-blocks. It extends the previous configuration to include these additional management options.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/reusable-blocks/README.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ReusableBlocksMenuItems } from '@wordpress/reusable-blocks';\n\nconst { __experimentalReusableBlocks } = useSelect( ( select ) =>\n\tselect( 'core' ).getEntityRecords( 'postType', 'wp_block' )\n);\n\nreturn (\n\t<BlockEditorProvider\n\t\tvalue={ blocks }\n\t\tonInput={ onInput }\n\t\tonChange={ onChange }\n\t\tsettings={ {\n\t\t\t...settings,\n\t\t\t__experimentalReusableBlocks,\n\t\t} }\n\t\t{ ...props }\n\t>\n\t\t<ReusableBlocksMenuItems />\n\t\t{ children }\n\t</BlockEditorProvider>\n);\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Store Changes - WordPress - JavaScript\nDESCRIPTION: The subscribe function registers a listener function that is called whenever a store's state changes. It returns an unsubscribe function to remove the listener.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/data/README.md#2025-04-21_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { subscribe } from '@wordpress/data';\n\nconst unsubscribe = subscribe( () => {\n\t// You could use this opportunity to test whether the derived result of a\n\t// selector has subsequently changed as the result of a state update.\n} );\n\n// Later, if necessary...\nunsubscribe();\n```\n\n----------------------------------------\n\nTITLE: Registering Block Bindings Source in JavaScript\nDESCRIPTION: Demonstrates how to register a new block bindings source with custom properties and functions. This allows the source to be connected to supported block attributes.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/blocks/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { _x } from '@wordpress/i18n';\nimport { registerBlockBindingsSource } from '@wordpress/blocks';\n\nregisterBlockBindingsSource( {\n\tname: 'plugin/my-custom-source',\n\tlabel: _x( 'My Custom Source', 'block bindings source' ),\n\tusesContext: [ 'postType' ],\n\tgetValues: getSourceValues,\n\tsetValues: updateMyCustomValuesInBatch,\n\tcanUserEditValue: () => true,\n} );\n```\n\n----------------------------------------\n\nTITLE: Implementing isActive as a Function in JavaScript\nDESCRIPTION: This snippet shows how to implement the isActive property as a function that compares block attributes with variation attributes to determine if a variation is active.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-variations.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nisActive: ( blockAttributes, variationAttributes ) =>\n\tblockAttributes.providerNameSlug === variationAttributes.providerNameSlug,\n```\n\n----------------------------------------\n\nTITLE: HTML Button with Async Action\nDESCRIPTION: Defines an HTML button that triggers an asynchronous action (`actions.deleteFruits`) when clicked. The `data-wp-on-async--click` directive is used to bind the button click event to the specified action.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/core-concepts/server-side-rendering.md#2025-04-21_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<button data-wp-on-async--click=\"actions.deleteFruits\">\n\tDelete all fruits\n</button>\n```\n\n----------------------------------------\n\nTITLE: Using CircularOptionPicker for Color Selection in React\nDESCRIPTION: This example demonstrates how to use the CircularOptionPicker component to create a color selection interface. It shows how to render color options, handle selection, and include a clear button.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/circular-option-picker/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { CircularOptionPicker } from '../circular-option-picker';\n\nconst Example = () => {\n\tconst [ currentColor, setCurrentColor ] = useState();\n\tconst colors = [\n\t\t{ color: '#f00', name: 'Red' },\n\t\t{ color: '#0f0', name: 'Green' },\n\t\t{ color: '#00f', name: 'Blue' },\n\t];\n\tconst colorOptions = (\n\t\t<>\n\t\t\t{ colors.map( ( { color, name }, index ) => {\n\t\t\t\treturn (\n\t\t\t\t\t<CircularOptionPicker.Option\n\t\t\t\t\t\tkey={ `${ color }-${ index }` }\n\t\t\t\t\t\ttooltipText={ name }\n\t\t\t\t\t\tstyle={ { backgroundColor: color, color } }\n\t\t\t\t\t\tisSelected={ index === currentColor }\n\t\t\t\t\t\tonClick={ () => setCurrentColor( index ) }\n\t\t\t\t\t/>\n\t\t\t\t);\n\t\t\t} ) }\n\t\t</>\n\t);\n\treturn (\n\t\t<CircularOptionPicker\n\t\t\t\toptions={ colorOptions }\n\t\t\t\tactions={\n\t\t\t\t\t<CircularOptionPicker.ButtonAction\n\t\t\t\t\t\tonClick={ () => setCurrentColor( undefined ) }\n\t\t\t\t\t>\n\t\t\t\t\t\t{ 'Clear' }\n\t\t\t\t\t</CircularOptionPicker.ButtonAction>\n\t\t\t\t}\n\t\t\t/>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: HTML Bindings for WordPress Interactivity API\nDESCRIPTION: This snippet shows the HTML binding syntax used with the WordPress Interactivity API. It demonstrates how to bind DOM elements to state properties and actions, allowing the framework to automatically update the UI when state changes.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/core-concepts/the-reactive-and-declarative-mindset.md#2025-04-21_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<button\n\tdata-wp-on--click=\"actions.toggleVisibility\"\n\tdata-wp-text=\"state.visibilityText\"\n\tdata-wp-bind--aria-expanded=\"state.isVisible\"\n>\n\tshow\n</button>\n```\n\n----------------------------------------\n\nTITLE: Accessing Store Data in Callbacks for WordPress Gutenberg Interactivity API\nDESCRIPTION: This snippet illustrates how to access store data, including state, actions, and context, within callbacks and actions in the WordPress Gutenberg Interactivity API.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/api-reference.md#2025-04-21_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nconst { state } = store( 'myPlugin', {\n\tstate: {\n\t\tget someDerivedValue() {\n\t\t\tconst context = getContext();\n\t\t\tconst { ref } = getElement();\n\t\t\t// ...\n\t\t},\n\t},\n\tactions: {\n\t\tsomeAction() {\n\t\t\tconst context = getContext();\n\t\t\tconst { ref } = getElement();\n\t\t\t// ...\n\t\t},\n\t},\n\tcallbacks: {\n\t\tsomeEffect() {\n\t\t\tconst context = getContext();\n\t\t\tconst { ref } = getElement();\n\t\t\t// ...\n\t\t},\n\t},\n} );\n```\n\n----------------------------------------\n\nTITLE: Implementing Constrained Tabbing in React Components\nDESCRIPTION: This code snippet demonstrates how to use the withConstrainedTabbing higher-order component to create a form with constrained tabbing functionality. It includes a toggle button to enable/disable the constrained tabbing feature.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/higher-order/with-constrained-tabbing/README.md#2025-04-21_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport { useState } from 'react';\nimport {\n\twithConstrainedTabbing,\n\tTextControl,\n\tButton,\n} from '@wordpress/components';\n\nconst ConstrainedTabbing = withConstrainedTabbing(\n\t( { children } ) => children\n);\n\nconst MyComponentWithConstrainedTabbing = () => {\n\tconst [ isConstrainedTabbing, setIsConstrainedTabbing ] = useState( false );\n\tlet form = (\n\t\t<form>\n\t\t\t<TextControl\n\t\t\t\t__next40pxDefaultSize\n\t\t\t\t__nextHasNoMarginBottom\n\t\t\t\tlabel=\"Input 1\"\n\t\t\t\tonChange={ () => {} }\n\t\t\t/>\n\t\t\t<TextControl\n\t\t\t\t__next40pxDefaultSize\n\t\t\t\t__nextHasNoMarginBottom\n\t\t\t\tlabel=\"Input 2\"\n\t\t\t\tonChange={ () => {} }\n\t\t\t/>\n\t\t</form>\n\t);\n\tif ( isConstrainedTabbing ) {\n\t\tform = <ConstrainedTabbing>{ form }</ConstrainedTabbing>;\n\t}\n\n\tconst toggleConstrain = () => {\n\t\tsetIsConstrainedTabbing( ( state ) => ! state );\n\t};\n\n\treturn (\n\t\t<div>\n\t\t\t{ form }\n\t\t\t<Button variant=\"secondary\" onClick={ toggleConstrain }>\n\t\t\t\t{ isConstrainedTabbing ? 'Disable' : 'Enable' } constrain\n\t\t\t\ttabbing\n\t\t\t</Button>\n\t\t</div>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Registering Block Style with Style Data in PHP\nDESCRIPTION: Demonstrates registering a block style using the style_data property for theme.json-like styling configuration.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-styles.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nregister_block_style(\n       array( 'core/image' ),\n       array(\n           'name'         => 'orange-border',\n           'label'        => __( 'Orange Border', 'pauli' ),\n           'style_data'=> array(\n                           'border' => array(\n                           'color' => '#f5bc42',\n                           'style' => 'solid',\n                           'width' => '4px',\n                           'radius' => '15px'\n            )\n        )\n    )\n);\n```\n\n----------------------------------------\n\nTITLE: Declarative PHP/HTML Implementation with Interactivity API\nDESCRIPTION: This code demonstrates the PHP/HTML part of a declarative toggle functionality implementation using the Interactivity API. It shows how to use directives like data-wp-interactive, data-wp-context, data-wp-on--click, and data-wp-bind.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/iapi-about.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<!-- Render.php file -->\n \n<div\n  data-wp-interactive='wpmovies'\n  <?php echo wp_interactivity_data_wp_context( array( 'isOpen' => true ) ); ?>\n>\n  <button\n    data-wp-on--click=\"actions.toggle\"\n    data-wp-bind--aria-expanded=\"context.isOpen\"\n    aria-controls=\"p-1\"\n  >\n    Toggle\n  </button>\n \n  <p id=\"p-1\" data-wp-bind--hidden=\"!context.isOpen\">\n    This element is now visible!\n  </p>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Block with Interactivity API in PHP and HTML\nDESCRIPTION: This example demonstrates how to create a dynamic block using the Interactivity API with PHP and HTML. It shows the implementation of a toggle functionality with directives like data-wp-interactive, data-wp-context, data-wp-watch, data-wp-on--click, and data-wp-bind.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/iapi-about.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div\n  data-wp-interactive='wpmovies'\n  <?php echo wp_interactivity_data_wp_context( array( 'isOpen' => false ) ); ?>\n  data-wp-watch=\"callbacks.logIsOpen\"\n>\n  <button\n    data-wp-on--click=\"actions.toggle\"\n    data-wp-bind--aria-expanded=\"context.isOpen\"\n    aria-controls=\"p-1\"\n  >\n    Toggle\n  </button>\n \n  <p id=\"p-1\" data-wp-bind--hidden=\"!context.isOpen\">\n    This element is now visible!\n  </p>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Defining Meta Attribute in JavaScript for WordPress Gutenberg\nDESCRIPTION: This snippet demonstrates how to define a meta attribute for a Gutenberg block. It specifies the attribute type, source, and corresponding meta key.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-attributes.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n{\n\tauthor: {\n\t\ttype: 'string',\n\t\tsource: 'meta',\n\t\tmeta: 'author'\n\t},\n},\n```\n\n----------------------------------------\n\nTITLE: Specifying Block Ancestors\nDESCRIPTION: Shows how to make a block available inside specified block types at any position in the ancestor block subtree.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-registration.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// Only allow this block when it is nested at any level in a Columns block.\nancestor: [ 'core/columns' ],\n```\n\n----------------------------------------\n\nTITLE: Quick Start Mode for WordPress Block Creation with Options\nDESCRIPTION: This command demonstrates using create-block in quick start mode with specific options. It creates a dynamic block named 'my-block' with the namespace 'my-plugin'.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/getting-started/devenv/get-started-with-create-block.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx @wordpress/create-block@latest --namespace=\"my-plugin\" --slug=\"my-block\" --variant=\"dynamic\"\n```\n\n----------------------------------------\n\nTITLE: Serializing and Parsing Blocks in JavaScript\nDESCRIPTION: Shows how to convert blocks between their JavaScript object representation and HTML using the serialize and parse functions from the @wordpress/blocks package.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/platform-docs/docs/basic-concepts/data.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { serialize, parse } from '@wordpress/blocks';\n\nconst value = [ block1, block2, block3 ];\n\nconst html = serialize( value );\n\nconst parsedValue = parse( html ); // This should be equivalent to value.\n```\n\n----------------------------------------\n\nTITLE: Using FormFileUpload for File Selection - JSX\nDESCRIPTION: This snippet demonstrates how to implement the FormFileUpload component from WordPress's components library. It sets the accept property to allow specific file types and logs the selected files in the console using an onChange handler.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/form-file-upload/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { FormFileUpload } from '@wordpress/components';\n\nconst MyFormFileUpload = () => (\n  <FormFileUpload\n    __next40pxDefaultSize\n    accept=\"image/*\"\n    onChange={ ( event ) => console.log( event.currentTarget.files ) }\n  >\n    Upload\n  </FormFileUpload>\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Class to Paragraph Blocks with render_block_core/paragraph Filter in PHP\nDESCRIPTION: This snippet demonstrates how to use the render_block_core/paragraph filter to add a custom class 'example-class' to all Paragraph blocks on the front end using the HTML API.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/filters/block-filters.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nfunction example_add_custom_class_to_paragraph_block( $block_content, $block ) {\n\t   \n\t// Add the custom class to the block content using the HTML API.\n\t$processor = new WP_HTML_Tag_Processor( $block_content );\n\t\n\tif ( $processor->next_tag( 'p' ) ) {\n\t\t$processor->add_class( 'example-class' );\n\t}\n\n\treturn $processor->get_updated_html();\n}\nadd_filter( 'render_block_core/paragraph', 'example_add_custom_class_to_paragraph_block', 10, 2 );\n```\n\n----------------------------------------\n\nTITLE: Setting Locale Data for Translations in Gutenberg\nDESCRIPTION: This snippet demonstrates how to use the setLocaleData function from @wordpress/i18n to provide translations. The locale data is passed as a Jed-formatted JSON object that maps original strings to their translations.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/platform-docs/docs/basic-concepts/internationalization.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { setLocaleData } from '@wordpress/i18n';\n\nsetLocaleData( { 'Type / to choose a block': [ 'Taper / pour choisir un bloc' ] } );\n```\n\n----------------------------------------\n\nTITLE: Saving Block Attributes via Serialization in WordPress Gutenberg (JSX)\nDESCRIPTION: This code snippet shows how to save block attributes via serialization in a WordPress Gutenberg block. It's useful for dynamic blocks where the markup is rendered server-side. The example defines an attribute for the number of posts to show, provides an edit function with a TextControl for user input, and a save function that returns null since the content is dynamically generated.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-edit-save.md#2025-04-21_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nattributes: {\n\tpostsToShow: {\n\t\ttype: 'number',\n\t}\n},\n\nedit: ( { attributes, setAttributes } ) => {\n\tconst blockProps = useBlockProps();\n\n\treturn (\n\t\t<div { ...blockProps }>\n\t\t\t<TextControl\n\t\t\t\t__nextHasNoMarginBottom\n\t\t\t\t__next40pxDefaultSize\n\t\t\t\tlabel='Number Posts to Show'\n\t\t\t\tvalue={ attributes.postsToShow }\n\t\t\t\tonChange={ ( val ) => {\n\t\t\t\t\tsetAttributes( { postsToShow: parseInt( val ) } );\n\t\t\t\t}}\n\t\t\t/>\n\t\t</div>\n\t);\n},\n\nsave: () => {\n\treturn null;\n}\n```\n\n----------------------------------------\n\nTITLE: Dispatching Store Actions - WordPress - JavaScript\nDESCRIPTION: The dispatch function returns an object of action creators for a given store descriptor, enabling state updates by dispatching actions. Actions return promises upon invocation.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/data/README.md#2025-04-21_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { dispatch } from '@wordpress/data';\nimport { store as myCustomStore } from 'my-custom-store';\n\ndispatch( myCustomStore ).setPrice( 'hammer', 9.75 );\n```\n\n----------------------------------------\n\nTITLE: Implementing i18n.gettext Filter Callback in JavaScript\nDESCRIPTION: Defines a callback function for the i18n.gettext filter. This function receives the translation, original text, and domain as arguments and returns the modified translation.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/filters/i18n-filters.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nfunction i18nGettextCallback( translation, text, domain ) {\n\treturn translation;\n}\n```\n\n----------------------------------------\n\nTITLE: Enqueuing JavaScript and CSS for Custom Block Editor in WordPress\nDESCRIPTION: This PHP code handles enqueuing JavaScript and CSS files for the custom block editor. It checks if the current page is the correct admin page, then enqueues the necessary scripts and styles using WordPress functions.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/platform/custom-block-editor.md#2025-04-21_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nfunction getdave_sbe_block_editor_init( $hook ) {\n\n    // Exit if not the correct page.\n\tif ( 'toplevel_page_getdavesbe' !== $hook ) {\n\t\treturn;\n    }\n}\n\nadd_action( 'admin_enqueue_scripts', 'getdave_sbe_block_editor_init' );\n```\n\n----------------------------------------\n\nTITLE: Registering Basic Post Template in PHP\nDESCRIPTION: Demonstrates how to register a basic template for posts that includes an image block using PHP. The template is registered using the init hook and modifies the post type object.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-templates.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfunction myplugin_register_template() {\n    $post_type_object = get_post_type_object( 'post' );\n    $post_type_object->template = array(\n        array( 'core/image' ),\n    );\n}\nadd_action( 'init', 'myplugin_register_template' );\n```\n\n----------------------------------------\n\nTITLE: Setting Default Gradient Preset in WordPress Gutenberg\nDESCRIPTION: This snippet demonstrates how to set a default gradient preset for a block in WordPress Gutenberg using a preset slug.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-supports.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nattributes: {\n    gradient: {\n        type: 'string',\n        default: 'some-preset-gradient-slug',\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a Basic Tooltip Component\nDESCRIPTION: This code snippet demonstrates how to render a basic Tooltip component. It imports the Tooltip component from '@wordpress/components' and uses it to wrap a div element, displaying the text \"More information\" when the div is hovered over.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/tooltip/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Tooltip } from '@wordpress/components';\n\nconst MyTooltip = () => (\n\t<Tooltip text=\"More information\">\n\t\t<div>Hover for more information</div>\n\t</Tooltip>\n);\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Color Palette in theme.json\nDESCRIPTION: Demonstrates how to define custom color palettes that get converted to CSS custom properties. Shows both the input JSON configuration and resulting CSS output.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/themes/global-settings-and-styles.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"version\": 3,\n\t\"settings\": {\n\t\t\"color\": {\n\t\t\t\"palette\": [\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"Black\",\n\t\t\t\t\t\"slug\": \"black\",\n\t\t\t\t\t\"color\": \"#000000\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"name\": \"White\",\n\t\t\t\t\t\"slug\": \"white\",\n\t\t\t\t\t\"color\": \"#ffffff\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t}\n}\n```\n\nLANGUAGE: css\nCODE:\n```\nbody {\n\t--wp--preset--color--black: #000000;\n\t--wp--preset--color--white: #ffffff;\n}\n```\n\n----------------------------------------\n\nTITLE: Using `useDialog` React Hook\nDESCRIPTION: This code snippet demonstrates how to use the `useDialog` hook from the `@wordpress/compose` package. It initializes the hook with an `onClose` callback and applies the returned `ref` and `extraProps` to a div element, effectively turning it into a dialog with constrained tabbing and focus management.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/compose/src/hooks/use-dialog/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { __experimentalUseDialog as useDialog } from '@wordpress/compose';\n\nconst MyDialog = () => {\n\tconst [ ref, extraProps ] = useDialog( {\n\t\tonClose: () => console.log( 'do something to close the dialog' ),\n\t} );\n\n\treturn (\n\t\t<div ref={ ref } { ...extraProps }>\n\t\t\t<Button />\n\t\t\t<Button />\n\t\t</div>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Dependency Injection in JavaScript Testing\nDESCRIPTION: Example of using dependency injection to improve testability. This snippet demonstrates how passing dependencies as arguments can make code simpler to test.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/testing-overview.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction isValueValid( value, validValuesList = [] ) {\n\treturn validValuesList.includes( value );\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Block Registration with Context in JavaScript\nDESCRIPTION: This snippet provides a complete example of registering two blocks: one that provides context and another that consumes it. It demonstrates attribute definition, context provision, and context usage.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-context.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nregisterBlockType( 'my-plugin/record', {\n\t// ... cut ...\n\n\tattributes: {\n\t\trecordId: {\n\t\t\ttype: 'number',\n\t\t},\n\t},\n\n\tprovidesContext: {\n\t\t'my-plugin/recordId': 'recordId',\n\t},\n\n\t/**\n\t * @see ./edit.js\n\t */\n\tedit: Edit,\n\n\t/**\n\t * @see ./save.js\n\t */\n\tsave,\n} );\n\nregisterBlockType( 'my-plugin/record-title', {\n\ttitle: 'Record Title',\n\tcategory: 'widgets',\n\n\tusesContext: [ 'my-plugin/recordId' ],\n\n\tedit( { context } ) {\n\t\treturn 'The record ID: ' + context[ 'my-plugin/recordId' ];\n\t},\n\n\tsave() {\n\t\treturn null;\n\t},\n} );\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Post Type with Template in PHP\nDESCRIPTION: Demonstrates how to register a custom post type 'book' with a predefined template containing image, heading, and paragraph blocks with specific attributes.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-templates.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nfunction myplugin_register_book_post_type() {\n\t$args = array(\n\t\t'public' => true,\n\t\t'label'  => 'Books',\n\t\t'show_in_rest' => true,\n\t\t'template' => array(\n\t\t\tarray( 'core/image', array(\n\t\t\t\t'align' => 'left',\n\t\t\t) ),\n\t\t\tarray( 'core/heading', array(\n\t\t\t\t'placeholder' => 'Add Author...',\n\t\t\t) ),\n\t\t\tarray( 'core/paragraph', array(\n\t\t\t\t'placeholder' => 'Add Description...',\n\t\t\t) ),\n\t\t),\n\t);\n\tregister_post_type( 'book', $args );\n}\nadd_action( 'init', 'myplugin_register_book_post_type' );\n```\n\n----------------------------------------\n\nTITLE: Registering the Heading Block in WordPress Gutenberg\nDESCRIPTION: Example of registering an additional block (heading) by importing its initialization module and editor stylesheet. The heading block provides heading elements (h1-h6) for document structure.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/platform-docs/docs/basic-concepts/block-library.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport '@wordpress/block-library/build-module/heading/init';\nimport '@wordpress/block-library/build-style/heading/editor.css';\n```\n\n----------------------------------------\n\nTITLE: Moving Blocks in Gutenberg Editor (JavaScript)\nDESCRIPTION: Action creator that returns an action object to move blocks to a new position in the editor. It handles moving blocks between different root blocks and to specific indices.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core-block-editor.md#2025-04-21_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\nmoveBlocksToPosition( clientIds, fromRootClientId, toRootClientId, index )\n```\n\n----------------------------------------\n\nTITLE: Defining Actions in TypeScript for WordPress Gutenberg Interactivity API\nDESCRIPTION: This snippet demonstrates how to define actions in a store using TypeScript. It shows how to create regular actions and how they can be called from other actions or directives.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/api-reference.md#2025-04-21_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nconst { state, actions } = store( 'myPlugin', {\n\tactions: {\n\t\tselectItem: ( id ) => {\n\t\t\tconst context = getContext();\n\t\t\t// `id` is optional here, so this action can be used in a directive.\n\t\t\tstate.selected = id || context.id;\n\t\t},\n\t\totherAction: () => {\n\t\t\t// but it can also be called from other actions.\n\t\t\tactions.selectItem( 123 ); // it works and type is correct\n\t\t},\n\t},\n} );\n```\n\n----------------------------------------\n\nTITLE: Consuming Block Context in JavaScript\nDESCRIPTION: This snippet shows how to declare that a block uses context from an ancestor block. It demonstrates the use of the 'usesContext' property in block registration.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-context.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nregisterBlockType('my-plugin/record-title', {\n\ttitle: 'Record Title',\n\tcategory: 'widgets',\n\n\tusesContext: ['my-plugin/recordId'],\n```\n\n----------------------------------------\n\nTITLE: Implementing withNotices HOC in React Component\nDESCRIPTION: This example demonstrates how to use the withNotices higher-order component to add notice functionality to a custom React component. It shows the usage of noticeOperations to create error notices and the rendering of noticeUI.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/higher-order/with-notices/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { withNotices, Button } from '@wordpress/components';\n\nconst MyComponentWithNotices = withNotices(\n\t( { noticeOperations, noticeUI } ) => {\n\t\tconst addError = () =>\n\t\t\tnoticeOperations.createErrorNotice( 'Error message' );\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t{ noticeUI }\n\t\t\t\t<Button variant=\"secondary\" onClick={ addError }>\n\t\t\t\t\tAdd error\n\t\t\t\t</Button>\n\t\t\t</div>\n\t\t);\n\t}\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering a Basic Toggle Popover in JSX\nDESCRIPTION: This example demonstrates how to create a basic toggleable Popover component that appears next to a button when clicked. The visibility is controlled by a boolean state variable.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/popover/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { Button, Popover } from '@wordpress/components';\n\nconst MyPopover = () => {\n\tconst [ isVisible, setIsVisible ] = useState( false );\n\tconst toggleVisible = () => {\n\t\tsetIsVisible( ( state ) => ! state );\n\t};\n\n\treturn (\n\t\t<Button variant=\"secondary\" onClick={ toggleVisible }>\n\t\t\tToggle Popover!\n\t\t\t{ isVisible && <Popover>Popover is toggled!</Popover> }\n\t\t</Button>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Mocking Imported Dependencies with Jest\nDESCRIPTION: Example of using jest.mock to stub imported dependencies. This snippet shows how to mock a config module to control feature flags in tests.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/testing-overview.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// test/bilbo.js\nimport { isEnabled } from 'config';\nimport { isBilboVisible } from '../bilbo';\n\njest.mock( 'config', () => ( {\n\t// bilbo is visible by default\n\tisEnabled: jest.fn( () => false ),\n} ) );\n\ndescribe( 'The bilbo module', () => {\n\ttest( 'bilbo should be visible by default', () => {\n\t\texpect( isBilboVisible() ).toBe( true );\n\t} );\n\n\ttest( 'bilbo should be invisible when the `the-ring` config feature flag is enabled', () => {\n\t\tisEnabled.mockImplementationOnce( ( name ) => name === 'the-ring' );\n\t\texpect( isBilboVisible() ).toBe( false );\n\t} );\n} );\n```\n\n----------------------------------------\n\nTITLE: Generating Block Variations in PHP\nDESCRIPTION: Example of a PHP file that generates variations for a Social Icon block, including localization.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-metadata.md#2025-04-21_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// Generate variations for a Social Icon kind of block.\n\nreturn array(\n\tarray(\n\t\t'isDefault'  => true,\n\t\t'name'       => 'wordpress',\n\t\t'title'      => 'WordPress',\n\t\t'icon'       => 'wordpress',\n\t\t'attributes' => array(\n\t\t\t'service' => 'wordpress',\n\t\t),\n\t\t'isActive'   => array( 'service' )\n\t),\n\tarray(\n\t\t'name'       => 'mail',\n\t\t'title'      => __( 'Mail' ),\n\t\t'keywords'   => array(\n\t\t\t__( 'email' ),\n\t\t\t__( 'e-mail' )\n\t\t),\n\t\t'icon'       => 'mail',\n\t\t'attributes' => array(\n\t\t\t'service' => 'mail',\n\t\t),\n\t\t'isActive'   => array( 'mail' )\n\t),\n);\n\n```\n\n----------------------------------------\n\nTITLE: Using useInnerBlocksProps Hook - Basic Implementation\nDESCRIPTION: Demonstrates the use of the useInnerBlocksProps React hook as an alternative to the InnerBlocks component. This approach gives more control over the markup of inner blocks areas.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/platform-docs/docs/create-block/nested-blocks.md#2025-04-21_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { registerBlockType } from '@wordpress/blocks';\nimport { useBlockProps, useInnerBlocksProps } from '@wordpress/block-editor';\n\nregisterBlockType( 'create-block/gutenpride-container', {\n\t// ...\n\n\tedit: () => {\n\t\tconst blockProps = useBlockProps();\n\t\tconst innerBlocksProps = useInnerBlocksProps();\n\n\t\treturn (\n\t\t\t<div { ...blockProps }>\n\t\t\t\t<div { ...innerBlocksProps } />\n\t\t\t</div>\n\t\t);\n\t},\n\n\tsave: () => {\n\t\tconst blockProps = useBlockProps.save();\n\t\tconst innerBlocksProps = useInnerBlocksProps.save();\n\n\t\treturn (\n\t\t\t<div { ...blockProps }>\n\t\t\t\t<div { ...innerBlocksProps } />\n\t\t\t</div>\n\t\t);\n\t},\n} );\n```\n\n----------------------------------------\n\nTITLE: Block Edit Function Implementation with useBlockProps\nDESCRIPTION: Shows how to use useBlockProps hook to apply block support properties in a block's Edit component.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-supports.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction BlockEdit() {\n\tconst blockProps = useBlockProps();\n\n\treturn <div { ...blockProps }>Hello World!</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing TabPanel Component in React for WordPress\nDESCRIPTION: Example of how to implement the TabPanel component in React. This code demonstrates creating a basic tab panel with two tabs, including a callback function for tab selection. The component handles rendering different content based on the selected tab.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/tab-panel/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { TabPanel } from '@wordpress/components';\n\nconst onSelect = ( tabName ) => {\n\tconsole.log( 'Selecting tab', tabName );\n};\n\nconst MyTabPanel = () => (\n\t<TabPanel\n\t\tclassName=\"my-tab-panel\"\n\t\tactiveClass=\"active-tab\"\n\t\tonSelect={ onSelect }\n\t\ttabs={ [\n\t\t\t{\n\t\t\t\tname: 'tab1',\n\t\t\t\ttitle: 'Tab 1',\n\t\t\t\tclassName: 'tab-one',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'tab2',\n\t\t\t\ttitle: 'Tab 2',\n\t\t\t\tclassName: 'tab-two',\n\t\t\t},\n\t\t] }\n\t>\n\t\t{ ( tab ) => <p>{ tab.title }</p> }\n\t</TabPanel>\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Stored Blocks in WordPress Block Editor\nDESCRIPTION: This useEffect hook retrieves previously stored block data from localStorage, parses it, and updates the editor state. It also displays a notification when blocks are successfully loaded.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/platform/custom-block-editor.md#2025-04-21_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\nuseEffect( () => {\n\tconst storedBlocks = window.localStorage.getItem( 'getdavesbeBlocks' );\n\n\tif ( storedBlocks && storedBlocks.length ) {\n\t\tupdateBlocks( () => parse( storedBlocks ) );\n\t\tcreateInfoNotice( 'Blocks loaded', {\n\t\t\ttype: 'snackbar',\n\t\t\tisDismissible: true,\n\t\t} );\n\t}\n}, [] );\n```\n\n----------------------------------------\n\nTITLE: Implementing withSafeTimeout in React Component using WordPress Compose\nDESCRIPTION: The code snippet demonstrates the usage of the withSafeTimeout higher-order component from the WordPress compose package to safely handle setTimeout calls in a React component. It ensures that the timeout callback does not execute if the component is unmounted. The snippet requires the withSafeTimeout function from '@wordpress/compose' and a React environment where the TextField component is available.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/compose/src/higher-order/with-safe-timeout/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n/**\n * WordPress dependencies\n */\nimport { withSafeTimeout } from '@wordpress/compose';\n\nfunction MyEffectfulComponent( { setTimeout } ) {\n\treturn (\n\t\t<TextField\n\t\t\tonBlur={ () => {\n\t\t\t\tsetTimeout( delayedAction, 0 );\n\t\t\t} }\n\t\t/>\n\t);\n}\n\nexport default withSafeTimeout( MyEffectfulComponent );\n```\n\n----------------------------------------\n\nTITLE: Restricting Blocks in InnerBlocks\nDESCRIPTION: This JavaScript example shows how to configure InnerBlocks with an empty allowedBlocks array, effectively restricting all block types and allowing only those registered as compatible child blocks. This configuration requires predefined child block compatibility.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/src/components/inner-blocks/README.md#2025-04-21_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst ALLOWED_BLOCKS = [];\n...\n<InnerBlocks\n    allowedBlocks={ ALLOWED_BLOCKS }\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Context System in React Components\nDESCRIPTION: Demonstrates the usage of the @wordpress/components context system in React components. It shows how to provide context values, connect components to the context, and read computed values from the context.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/CONTRIBUTING.md#2025-04-21_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n//=========================================================================\n// Simplified snippet from `packages/components/src/card/card/hook.ts`\n//=========================================================================\nimport { useContextSystem } from '../../context';\n\nexport function useCard( props ) {\n\t// Read any derived registered prop from the Context System in the `Card` namespace\n\tconst derivedProps = useContextSystem( props, 'Card' );\n\n\t// [...]\n\n\treturn computedHookProps;\n}\n\n//=========================================================================\n// Simplified snippet from `packages/components/src/card/card/component.ts`\n//=========================================================================\nimport { contextConnect, ContextSystemProvider } from '../../context';\n\nfunction Card( props, forwardedRef ) {\n\tconst { size, isBorderless, ...otherComputedHookProps } = useCard( props );\n\n\t// [...]\n\n\t// Prepare the additional props that should be passed to subcomponents via the Context System.\n\tconst contextProviderValue = useMemo( () => {\n\t\treturn {\n\t\t\t// Each key in this object should match a component's registered namespace.\n\t\t\tCardBody: {\n\t\t\t\tsize,\n\t\t\t\tisBorderless,\n\t\t\t},\n\t\t};\n\t}, [ isBorderless, size ] );\n\n\treturn (\n\t\t/* Write additional values to the Context System */\n\t\t<ContextSystemProvider value={ contextProviderValue }>\n\t\t\t{ /* [...] */ }\n\t\t</ContextSystemProvider>\n\t);\n}\n\n// Connect to the Context System under the `Card` namespace\nconst ConnectedCard = contextConnect( Card, 'Card' );\nexport default ConnectedCard;\n\n//=========================================================================\n// Simplified snippet from `packages/components/src/card/card-body/hook.ts`\n//=========================================================================\nimport { useContextSystem } from '../../context';\n\nexport function useCardBody( props ) {\n\t// Read any derived registered prop from the Context System in the `CardBody` namespace.\n\t// If a `CardBody` component is rendered as a child of a `Card` component, the value of\n\t// the `size` prop will be the one set by the parent `Card` component via the Context\n\t// System (unless the prop gets explicitly set on the `CardBody` component).\n\tconst { size = 'medium', ...otherDerivedProps } = useContextSystem(\n\t\tprops,\n\t\t'CardBody'\n\t);\n\n\t// [...]\n\n\treturn computedHookProps;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Block Category and Icon\nDESCRIPTION: Demonstrates how to assign a block to a category and specify an icon using Dashicons or custom SVG.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-registration.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Assigning to the 'widgets' category\ncategory: 'widgets',\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Specifying a dashicon for the block\nicon: 'book-alt',\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Specifying a custom svg for the block\nicon: <svg viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\" /><path d=\"M19 13H5v-2h14v2z\" /></svg>,\n```\n\n----------------------------------------\n\nTITLE: Using ToolbarGroup with WordPress Gutenberg Components\nDESCRIPTION: This code snippet illustrates the use of ToolbarGroup and ToolbarButton components from WordPress's Gutenberg block editor library. The ToolbarGroup component helps in organizing controls like 'Paragraph', 'Bold', 'Italic', and 'Link' inside a toolbar. It requires importing necessary components and icons from '@wordpress/components' and '@wordpress/icons'. The function MyToolbar returns a Toolbar with two ToolbarGroups showcasing various ToolbarButtons. No additional setup or state management is required, as it primarily manages rendering toolbar UI elements.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/toolbar/toolbar-group/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Toolbar, ToolbarGroup, ToolbarButton } from '@wordpress/components';\nimport { paragraph, formatBold, formatItalic, link } from '@wordpress/icons';\n\nfunction MyToolbar() {\n\treturn (\n\t\t<Toolbar label=\"Options\">\n\t\t\t<ToolbarGroup>\n\t\t\t\t<ToolbarButton icon={ paragraph } label=\"Paragraph\" />\n\t\t\t</ToolbarGroup>\n\t\t\t<ToolbarGroup>\n\t\t\t\t<ToolbarButton icon={ formatBold } label=\"Bold\" />\n\t\t\t\t<ToolbarButton icon={ formatItalic } label=\"Italic\" />\n\t\t\t\t<ToolbarButton icon={ link } label=\"Link\" />\n\t\t\t</ToolbarGroup>\n\t\t</Toolbar>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic InnerBlocks in a Custom Gutenberg Block\nDESCRIPTION: This snippet demonstrates the basic usage of InnerBlocks in a custom Gutenberg block. It shows how to register a block type and implement the edit and save functions using InnerBlocks.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/block-tutorial/nested-blocks-inner-blocks.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { registerBlockType } from '@wordpress/blocks';\nimport { InnerBlocks, useBlockProps } from '@wordpress/block-editor';\n\nregisterBlockType( 'gutenberg-examples/example-06', {\n\t// ...\n\n\tedit: () => {\n\t\tconst blockProps = useBlockProps();\n\n\t\treturn (\n\t\t\t<div { ...blockProps }>\n\t\t\t\t<InnerBlocks />\n\t\t\t</div>\n\t\t);\n\t},\n\n\tsave: () => {\n\t\tconst blockProps = useBlockProps.save();\n\n\t\treturn (\n\t\t\t<div { ...blockProps }>\n\t\t\t\t<InnerBlocks.Content />\n\t\t\t</div>\n\t\t);\n\t},\n} );\n```\n\n----------------------------------------\n\nTITLE: Creating Store Actions for Event Handling with wp-on\nDESCRIPTION: Defines a store with an action that logs the current time when triggered. This action is used by the wp-on click event directive to demonstrate event handling.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/api-reference.md#2025-04-21_snippet_14\n\nLANGUAGE: js\nCODE:\n```\nstore( 'myPlugin', {\n\tactions: {\n\t\tlogTime: ( event ) => {\n\t\t\tconsole.log( new Date() );\n\t\t},\n\t},\n} );\n```\n\n----------------------------------------\n\nTITLE: Customizing Slot Behavior with Conditional Rendering\nDESCRIPTION: Demonstrates how to use the children prop of a Slot as a function to conditionally render content based on the fills. This example shows rendering a different wrapper for mobile devices with many fills.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/slot-fill/README.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst Toolbar = ( { isMobile } ) => (\n\t<div className=\"toolbar\">\n\t\t<Slot name=\"Toolbar\">\n\t\t\t{ ( fills ) => {\n\t\t\t\treturn isMobile && fills.length > 3 ? (\n\t\t\t\t\t<div className=\"toolbar__mobile-long\">{ fills }</div>\n\t\t\t\t) : (\n\t\t\t\t\tfills\n\t\t\t\t);\n\t\t\t} }\n\t\t</Slot>\n\t</div>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing AlignmentControl in WordPress Block Editor\nDESCRIPTION: This snippet demonstrates how to implement the AlignmentControl component within BlockControls to provide text alignment options. It shows setting up the component with a value prop from state and an onChange handler that updates attributes.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/src/components/alignment-control/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { AlignmentControl } from '@wordpress/block-editor';\n\nconst MyAlignmentToolbar = () => (\n\t<BlockControls group=\"block\">\n\t\t<AlignmentControl\n\t\t\tvalue={ textAlign }\n\t\t\tonChange={ ( nextAlign ) => {\n\t\t\t\tsetAttributes( { textAlign: nextAlign } );\n\t\t\t} }\n\t\t/>\n\t</BlockControls>\n);\n```\n\n----------------------------------------\n\nTITLE: Using clsx for conditional class names with modifiers in React\nDESCRIPTION: Example of applying conditional CSS class names with modifier prefixes using the clsx utility. The component conditionally adds the 'is-dismissible' modifier class based on a prop value.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/coding-guidelines.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport clsx from 'clsx';\n\nexport default function Notice( { children, onRemove, isDismissible } ) {\n\tconst classes = clsx( 'components-notice', {\n\t\t'is-dismissible': isDismissible,\n\t} );\n\n\treturn <div className={ classes }>{ /* ... */ }</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Redux Store\nDESCRIPTION: This JavaScript code demonstrates how to register a Redux store using the `@wordpress/data` module.  It imports necessary modules, defines initial state, actions, a reducer, selectors, and resolvers. Then it creates a store using `createReduxStore` and registers it.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/data/README.md#2025-04-21_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n\"import apiFetch from '@wordpress/api-fetch';\nimport { createReduxStore, register } from '@wordpress/data';\n\nconst DEFAULT_STATE = {\n\tprices: {},\n\tdiscountPercent: 0,\n};\n\nconst actions = {\n\tsetPrice( item, price ) {\n\t\treturn {\n\t\t\ttype: 'SET_PRICE',\n\t\t\titem,\n\t\t\tprice,\n\t\t};\n\t},\n\n\tstartSale( discountPercent ) {\n\t\treturn {\n\t\t\ttype: 'START_SALE',\n\t\t\tdiscountPercent,\n\t\t};\n\t},\n};\n\nconst store = createReduxStore( 'my-shop', {\n\treducer( state = DEFAULT_STATE, action ) {\n\t\tswitch ( action.type ) {\n\t\t\tcase 'SET_PRICE':\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\tprices: {\n\t\t\t\t\t\t...state.prices,\n\t\t\t\t\t\t[ action.item ]: action.price,\n\t\t\t\t\t},\n\t\t\t\t};\n\n\t\t\tcase 'START_SALE':\n\t\t\t\treturn {\n\t\t\t\t\t...state,\n\t\t\t\t\tdiscountPercent: action.discountPercent,\n\t\t\t\t};\n\t\t}\n\n\t\treturn state;\n\t},\n\n\tactions,\n\n\tselectors: {\n\t\tgetPrice( state, item ) {\n\t\t\tconst { prices, discountPercent } = state;\n\t\t\tconst price = prices[ item ];\n\n\t\t\treturn price * ( 1 - 0.01 * discountPercent );\n\t\t},\n\t},\n\n\tresolvers: {\n\t\tgetPrice: ( item ) => async ({ dispatch }) => { {\n\t\t\tconst path = '/wp/v2/prices/' + item;\n\t\t\tconst price = await apiFetch( { path } );\n\t\t\tdispatch.setPrice( item, price );\n\t\t}, \n\t},\n} );\n\nregister( store );\n\"\n```\n\n----------------------------------------\n\nTITLE: Basic InnerBlocks Usage in Gutenberg\nDESCRIPTION: Shows the fundamental implementation of InnerBlocks component in both edit and save functions of a block registration. This demonstrates how to create a container block that can hold other blocks.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/platform-docs/docs/create-block/nested-blocks.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { registerBlockType } from '@wordpress/blocks';\nimport { InnerBlocks, useBlockProps } from '@wordpress/block-editor';\n\nregisterBlockType( 'create-block/gutenpride-container', {\n\t// ...\n\n\tedit: () => {\n\t\tconst blockProps = useBlockProps();\n\n\t\treturn (\n\t\t\t<div { ...blockProps }>\n\t\t\t\t<InnerBlocks />\n\t\t\t</div>\n\t\t);\n\t},\n\n\tsave: () => {\n\t\tconst blockProps = useBlockProps.save();\n\n\t\treturn (\n\t\t\t<div { ...blockProps }>\n\t\t\t\t<InnerBlocks.Content />\n\t\t\t</div>\n\t\t);\n\t},\n} );\n```\n\n----------------------------------------\n\nTITLE: Transform from Heading to Custom Block in Gutenberg\nDESCRIPTION: Implementation of a transform that converts a core Heading block to a custom Gutenpride block, using the `createBlock` function to generate the new block with content from the original.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/platform-docs/docs/create-block/transforms.md#2025-04-21_snippet_1\n\nLANGUAGE: js\nCODE:\n```\ntransforms: {\n    from: [\n      {\n        type: \"block\",\n        blocks: [\"core/heading\"],\n        transform: ({ content }) => {\n          return createBlock(\"create-block/gutenpride\", {\n            message: content,\n          });\n        },\n      },\n    ],\n},\n```\n\n----------------------------------------\n\nTITLE: Latest Stable WordPress Setup - JSON\nDESCRIPTION: This JSON snippet is used for setting up the latest stable WordPress installation with the current directory as a plugin, ideal for WordPress plugin development. It sets the core to null (for latest production WordPress) and includes the current directory in the plugins list, simplifying plugin testing.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/env/README.md#2025-04-21_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"core\": null,\n\t\"plugins\": [ \".\" ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using useEffect to Set Fallback Year in Edit Component\nDESCRIPTION: Updates the Edit component to set the fallbackCurrentYear attribute when the block is initialized. This uses React's useEffect hook to ensure the attribute is set only when needed.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/getting-started/tutorial.md#2025-04-21_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useEffect } from 'react';\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function Edit( { attributes, setAttributes } ) {\n\tconst { fallbackCurrentYear, showStartingYear, startingYear } = attributes;\n\n\t// Get the current year and make sure it's a string.\n\tconst currentYear = new Date().getFullYear().toString();\n\n\t// When the block loads, set the fallbackCurrentYear attribute to the\n\t// current year if it's not already set.\n\tuseEffect( () => {\n\t\tif ( currentYear !== fallbackCurrentYear ) {\n\t\t\tsetAttributes( { fallbackCurrentYear: currentYear } );\n\t\t}\n\t}, [ currentYear, fallbackCurrentYear, setAttributes ] );\n\n\t...\n```\n\n----------------------------------------\n\nTITLE: Unregistering Block Variation in JavaScript\nDESCRIPTION: Shows how to remove an existing block variation (YouTube embed) using wp.blocks.unregisterBlockVariation().\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-variations.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nwp.blocks.unregisterBlockVariation( 'core/embed', 'youtube' );\n```\n\n----------------------------------------\n\nTITLE: Base theme.json Structure\nDESCRIPTION: Shows the basic structure of a theme.json file with its main sections: version, settings, styles, customTemplates and templateParts.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/themes/global-settings-and-styles.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"version\": 3,\n\t\"settings\": {},\n\t\"styles\": {},\n\t\"customTemplates\": {},\n\t\"templateParts\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Post Meta Registration for Gutenberg Block in PHP\nDESCRIPTION: This PHP code shows how to register a post meta field with additional parameters. It sets the field to be single-valued and of integer type, in addition to making it visible in the REST API.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-attributes.md#2025-04-21_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nfunction gutenberg_my_block_init() {\n\tregister_post_meta( 'post', 'author_count', array(\n\t\t'show_in_rest' => true,\n\t\t'single' => true,\n\t\t'type' => 'integer',\n\t) );\n}\nadd_action( 'init', 'gutenberg_my_block_init' );\n```\n\n----------------------------------------\n\nTITLE: Implementing Reusable Page Form Component\nDESCRIPTION: Creation of a reusable form component that handles both editing and creating pages, including error handling and save states.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/data-basics/4-building-a-create-page-form.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction EditPageForm( { pageId, onCancel, onSaveFinished } ) {\n\t// ...\n\treturn (\n\t\t<PageForm\n\t\t\ttitle={ page.title }\n\t\t\tonChangeTitle={ handleChange }\n\t\t\thasEdits={ hasEdits }\n\t\t\tlastError={ lastError }\n\t\t\tisSaving={ isSaving }\n\t\t\tonCancel={ onCancel }\n\t\t\tonSave={ handleSave }\n\t\t/>\n\t);\n}\n\nfunction PageForm( { title, onChangeTitle, hasEdits, lastError, isSaving, onCancel, onSave } ) {\n\treturn (\n\t\t<div className=\"my-gutenberg-form\">\n\t\t\t<TextControl\n\t\t\t\t__nextHasNoMarginBottom\n\t\t\t\t__next40pxDefaultSize\n\t\t\t\tlabel=\"Page title:\"\n\t\t\t\tvalue={ title }\n\t\t\t\tonChange={ onChangeTitle }\n\t\t\t/>\n\t\t\t{ lastError ? (\n\t\t\t\t<div className=\"form-error\">Error: { lastError.message }</div>\n\t\t\t) : (\n\t\t\t\tfalse\n\t\t\t) }\n\t\t\t<div className=\"form-buttons\">\n\t\t\t\t<Button\n\t\t\t\t\tonClick={ onSave }\n\t\t\t\t\tvariant=\"primary\"\n\t\t\t\t\tdisabled={ !hasEdits || isSaving }\n\t\t\t\t>\n\t\t\t\t\t{ isSaving ? (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<Spinner/>\n\t\t\t\t\t\t\tSaving\n\t\t\t\t\t\t</>\n\t\t\t\t\t) : 'Save' }\n\t\t\t\t</Button>\n\t\t\t\t<Button\n\t\t\t\t\tonClick={ onCancel }\n\t\t\t\t\tvariant=\"tertiary\"\n\t\t\t\t\tdisabled={ isSaving }\n\t\t\t\t>\n\t\t\t\t\tCancel\n\t\t\t\t</Button>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Focus Return Hook in React\nDESCRIPTION: This snippet demonstrates how to use the `useFocusReturn` hook from the `@wordpress/compose` package to manage focus transition for a component containing buttons. The hook ensures that focus is returned to the element that was previously focused when the component unmounts, providing a better user experience in modal dialogs.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/compose/src/hooks/use-focus-return/README.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useFocusReturn } from '@wordpress/compose';\n\nconst WithFocusReturn = () => {\n\tconst ref = useFocusReturn();\n\treturn (\n\t\t<div ref={ ref }>\n\t\t\t<Button />\n\t\t\t<Button />\n\t\t</div>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Textarea Control with BaseControl in React/JSX\nDESCRIPTION: Demonstrates how to create a custom textarea control using BaseControl and useBaseControlProps hook. The example shows proper implementation of accessibility features and label association.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/base-control/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { BaseControl, useBaseControlProps } from '@wordpress/components';\n\n// Render a `BaseControl` for a textarea input\nconst MyCustomTextareaControl = ({ children, ...baseProps }) => (\n\t// `useBaseControlProps` is a convenience hook to get the props for the `BaseControl`\n\t// and the inner control itself. Namely, it takes care of generating a unique `id`,\n\t// properly associating it with the `label` and `help` elements.\n\tconst { baseControlProps, controlProps } = useBaseControlProps( baseProps );\n\n\treturn (\n\t\t<BaseControl { ...baseControlProps } __nextHasNoMarginBottom>\n\t\t\t<textarea { ...controlProps }>\n\t\t\t  { children }\n\t\t\t</textarea>\n\t\t</BaseControl>\n\t);\n);\n```\n\n----------------------------------------\n\nTITLE: Merging Multiple Store Calls with the Same Namespace\nDESCRIPTION: Demonstrates how multiple calls to the store function with the same namespace are merged together, allowing you to define different parts of your state, actions, and derived state in separate calls.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/core-concepts/undestanding-global-state-local-context-and-derived-state.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nstore( 'myPlugin', { state: { someValue: 1 } } );\n\nstore( 'myPlugin', { state: { otherValue: 2 } } );\n\n/* All calls to `store` return a stable reference to the same object, so you\n * can get a reference to `state` from any of them. */\nconst { state } = store( 'myPlugin' );\n\nstore( 'myPlugin', {\n\tactions: {\n\t\treadValues() {\n\t\t\tstate.someValue; // It exists and its initial value is 1.\n\t\t\tstate.otherValue; // It exists and its initial value is 2.\n\t\t},\n\t},\n} );\n```\n\n----------------------------------------\n\nTITLE: Launching WordPress Site with wp-now for Block Testing\nDESCRIPTION: This command uses @wp-now/wp-now to start a WordPress site with the newly created plugin installed, allowing you to test the block in a WordPress environment.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/iapi-quick-start-guide.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx @wp-now/wp-now start\n```\n\n----------------------------------------\n\nTITLE: Use Dispatch Hook in React - WordPress - JavaScript\nDESCRIPTION: The useDispatch function is a custom React hook that returns the current registry dispatch actions creators, which can be used to dispatch actions from components. It must be used within a RegistryProvider context.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/data/README.md#2025-04-21_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useCallback } from 'react';\nimport { useDispatch, useSelect } from '@wordpress/data';\nimport { store as myCustomStore } from 'my-custom-store';\n\nfunction Button( { onClick, children } ) {\n\treturn (\n\t\t<button type=\"button\" onClick={ onClick }>\n\t\t\t{ children }\n\t\t</button>\n\t);\n}\n\nconst SaleButton = ( { children } ) => {\n\tconst { stockNumber } = useSelect(\n\t\t( select ) => select( myCustomStore ).getStockNumber(),\n\t\t[]\n\t);\n\tconst { startSale } = useDispatch( myCustomStore );\n\tconst onClick = useCallback( () => {\n\t\tconst discountPercent = stockNumber > 50 ? 10 : 20;\n\t\tstartSale( discountPercent );\n\t}, [ stockNumber ] );\n\treturn <Button onClick={ onClick }>{ children }</Button>;\n};\n\n// Rendered somewhere in the application:\n//\n// <SaleButton>Start Sale!</SaleButton>\n```\n\n----------------------------------------\n\nTITLE: Template Configuration for InnerBlocks\nDESCRIPTION: Shows how to define a template for InnerBlocks to prefill it with a specific set of blocks and attributes. Also demonstrates the templateLock property to control whether the template can be modified.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/platform-docs/docs/create-block/nested-blocks.md#2025-04-21_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nconst MY_TEMPLATE = [\n\t[ 'core/image', {} ],\n\t[ 'core/heading', { placeholder: 'Book Title' } ],\n\t[ 'core/paragraph', { placeholder: 'Summary' } ],\n];\n\n//...\n\n\tedit: () => {\n\t\treturn (\n\t\t\t<InnerBlocks\n\t\t\t\ttemplate={ MY_TEMPLATE }\n\t\t\t\ttemplateLock=\"all\"\n\t\t\t/>\n\t\t);\n\t},\n```\n\n----------------------------------------\n\nTITLE: Transform from Custom Block to Heading in Gutenberg\nDESCRIPTION: Implementation of a transform that converts a custom Gutenpride block to a core Heading block, transferring the content from the custom block's message attribute to the heading's content.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/platform-docs/docs/create-block/transforms.md#2025-04-21_snippet_2\n\nLANGUAGE: js\nCODE:\n```\ntransforms: {\n    to: [\n        {\n            type: 'block',\n            blocks: [ 'core/heading' ],\n            transform: ( { content } ) => {\n                return createBlock( 'core/heading', {\n                    content: message,\n                } );\n            },\n        },\n    ]\n},\n```\n\n----------------------------------------\n\nTITLE: Implementing Window Event Callbacks for wp-on-window\nDESCRIPTION: Defines a store with a callback that logs the current window width. This callback is used with the wp-on-window directive to respond to window resize events.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/api-reference.md#2025-04-21_snippet_16\n\nLANGUAGE: js\nCODE:\n```\nstore( 'myPlugin', {\n\tcallbacks: {\n\t\tlogWidth() {\n\t\t\tconsole.log( 'Window width: ', window.innerWidth );\n\t\t},\n\t},\n} );\n```\n\n----------------------------------------\n\nTITLE: Registering Core Block Types\nDESCRIPTION: This snippet illustrates how to register the core block types using the @wordpress/block-library package, which is necessary to effectively use the block editor. It also reminds to load associated stylesheets.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/README.md#2025-04-21_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { registerCoreBlocks } from '@wordpress/block-library';\n\nregisterCoreBlocks();\n\n// Make sure to load the block stylesheets too\n// import '@wordpress/block-library/build-style/style.css';\n// import '@wordpress/block-library/build-style/editor.css';\n// import '@wordpress/block-library/build-style/theme.css';\n```\n\n----------------------------------------\n\nTITLE: Legacy Block Registration with Backward Compatibility\nDESCRIPTION: Traditional method of registering a Gutenberg block with edit, save, and wrapper props functions. Demonstrates backward compatibility approach for existing blocks not yet using block.json.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-metadata.md#2025-04-21_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nimport { registerBlockType } from '@wordpress/blocks';\n\nregisterBlockType( 'my-plugin/block-name', {\n\tedit: function () {\n\t\t// Edit definition goes here.\n\t},\n\tsave: function () {\n\t\t// Save definition goes here.\n\t},\n\tgetEditWrapperProps: function () {\n\t\t// Implementation goes here.\n\t},\n} );\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for Custom Block Editor in JavaScript\nDESCRIPTION: This code snippet shows the necessary imports for the main JavaScript file of the custom block editor. It includes external dependencies, WordPress dependencies, and internal components.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/platform/custom-block-editor.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// External dependencies.\nimport { createRoot } from 'react-dom';\n\n// WordPress dependencies.\nimport domReady from '@wordpress/dom-ready';\nimport { registerCoreBlocks } from '@wordpress/block-library';\n\n// Internal dependencies.\nimport Editor from './editor';\nimport './styles.scss';\n```\n\n----------------------------------------\n\nTITLE: Implementing wp-run Directive with IntersectionObserver\nDESCRIPTION: Example showing how to use the wp-run directive with IntersectionObserver to detect when an element enters viewport. Uses hooks like useState and useEffect within the callback.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/api-reference.md#2025-04-21_snippet_24\n\nLANGUAGE: html\nCODE:\n```\n<div data-wp-run=\"callbacks.logInView\">\n\t<p>Hi!</p>\n</div>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n\tgetElement,\n\tstore,\n\tuseState,\n\tuseEffect,\n} from '@wordpress/interactivity';\n\nconst useInView = () => {\n\tconst [ inView, setInView ] = useState( false );\n\tuseEffect( () => {\n\t\tconst { ref } = getElement();\n\t\tconst observer = new IntersectionObserver( ( [ entry ] ) => {\n\t\t\tsetInView( entry.isIntersecting );\n\t\t} );\n\t\tobserver.observe( ref );\n\t\treturn () => ref && observer.unobserve( ref );\n\t}, [] );\n\treturn inView;\n};\n\nstore( 'myPlugin', {\n\tcallbacks: {\n\t\tlogInView: () => {\n\t\t\tconst isInView = useInView();\n\t\t\tuseEffect( () => {\n\t\t\t\tif ( isInView ) {\n\t\t\t\t\tconsole.log( 'Inside' );\n\t\t\t\t} else {\n\t\t\t\t\tconsole.log( 'Outside' );\n\t\t\t\t}\n\t\t\t} );\n\t\t},\n\t},\n} );\n```\n\n----------------------------------------\n\nTITLE: Implementing Card with All Sub-components in JSX\nDESCRIPTION: This example shows how to use all available sub-components of Card, including CardBody, CardDivider, CardFooter, CardHeader, and CardMedia. It demonstrates the structure and composition of a fully-featured Card component.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/card/card/README.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n\tCard,\n\tCardBody,\n\tCardDivider,\n\tCardFooter,\n\tCardHeader,\n\tCardMedia,\n} from '@wordpress/components';\n\nconst Example = () => (\n\t<Card>\n\t\t<CardHeader>...</CardHeader>\n\t\t<CardBody>...</CardBody>\n\t\t<CardDivider />\n\t\t<CardBody>...</CardBody>\n\t\t<CardMedia>\n\t\t\t<img src=\"...\" />\n\t\t</CardMedia>\n\t\t<CardFooter>...</CardFooter>\n\t</Card>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Block Title in React - JSX\nDESCRIPTION: This snippet demonstrates how to use the Block Title component in a React application, setting the clientId and maximumLength props. It renders a block's title based on its configurations, ensuring flexibility with the optional maximumLength for truncation.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/src/components/block-title/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<BlockTitle clientId=\"afd1cb17-2c08-4e7a-91be-007ba7ddc3a1\" maximumLength={ 12 }/>\n```\n\n----------------------------------------\n\nTITLE: Using WordPress Icons Component\nDESCRIPTION: Example showing how to import and use the Icon component with a predefined icon from the WordPress icons library.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/icons/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Icon, check } from '@wordpress/icons';\n\n<Icon icon={ check } />;\n```\n\n----------------------------------------\n\nTITLE: WordPress Script Module Registration and Enqueuing\nDESCRIPTION: Demonstrates how to register and enqueue a script module in WordPress 6.5+ with proper dependency management and versioning.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/dependency-extraction-webpack-plugin/README.md#2025-04-21_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$module_path       = 'path/to/module.js';\n$module_asset_path = 'path/to/module.asset.php';\n$module_asset      = file_exists( $module_asset_path )\n\t? require( $module_asset_path )\n\t: array( 'dependencies' => array(), 'version' => filemtime( $module_path ) );\n$module_url = plugins_url( $module_path, __FILE__ );\nwp_register_script_module( 'my-module', $module_url, $module_asset['dependencies'], $module_asset['version'] );\nwp_enqueue_script_module( 'my-module' );\n```\n\n----------------------------------------\n\nTITLE: Adding Text Annotation in JavaScript for WordPress Gutenberg\nDESCRIPTION: This snippet demonstrates how to add a text annotation to a block using the core/annotations API in WordPress Gutenberg. It targets a specific range of text within a RichText instance of the first block.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-annotations.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nwp.data.dispatch( 'core/annotations' ).addAnnotation( {\n\tsource: 'my-annotations-plugin',\n\tblockClientId: wp.data.select( 'core/block-editor' ).getBlockOrder()[ 0 ],\n\trichTextIdentifier: 'content',\n\trange: {\n\t\tstart: 50,\n\t\tend: 100,\n\t},\n} );\n```\n\n----------------------------------------\n\nTITLE: Managing Reusable Blocks with Redux Actions\nDESCRIPTION: This snippet demonstrates how to use Redux actions from the reusableBlocksStore to manage reusable blocks. It includes examples of converting blocks to static or reusable, and deleting reusable blocks.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/reusable-blocks/README.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { store as reusableBlocksStore } from '@wordpress/reusable-blocks';\n\nfunction MyConvertToStaticButton( { clientId } ) {\n\tconst { __experimentalConvertBlockToStatic } = useDispatch(\n\t\treusableBlocksStore\n\t);\n\treturn (\n\t\t<button\n\t\t\tonClick={ () => __experimentalConvertBlockToStatic( clientId ) }\n\t\t>\n\t\t\tConvert to static\n\t\t</button>\n\t);\n}\n\nfunction MyConvertToReusableButton( { clientId } ) {\n\tconst { __experimentalConvertBlocksToReusable } = useDispatch(\n\t\treusableBlocksStore\n\t);\n\treturn (\n\t\t<button\n\t\t\tonClick={ () =>\n\t\t\t\t__experimentalConvertBlocksToReusable( [ clientId ] )\n\t\t\t}\n\t\t>\n\t\t\tConvert to reusable\n\t\t</button>\n\t);\n}\n\nfunction MyDeleteReusableBlockButton( { id } ) {\n\tconst { __experimentalDeleteReusableBlock } = useDispatch(\n\t\treusableBlocksStore\n\t);\n\treturn (\n\t\t<button onClick={ () => __experimentalDeleteReusableBlock( id ) }>\n\t\t\tDelete reusable block\n\t\t</button>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Schema Reference to block.json in WordPress Gutenberg\nDESCRIPTION: This JSON snippet shows how to add a schema reference to the block.json file. Adding this reference allows supported editors to provide features like tooltips, autocomplete, and schema validation.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-metadata.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"$schema\": \"https://schemas.wp.org/trunk/block.json\"\n```\n\n----------------------------------------\n\nTITLE: Implementing withFocusOutside HOC in React for WordPress Gutenberg\nDESCRIPTION: This code snippet demonstrates how to use the withFocusOutside higher-order component to wrap a React component. It defines a handleFocusOutside method that logs when focus leaves the component, and renders two TextControl components within a div.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/higher-order/with-focus-outside/README.md#2025-04-21_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport { withFocusOutside, TextControl } from '@wordpress/components';\n\nconst MyComponentWithFocusOutside = withFocusOutside(\n\tclass extends React.Component {\n\t\thandleFocusOutside() {\n\t\t\tconsole.log( 'Focus outside' );\n\t\t}\n\n\t\trender() {\n\t\t\treturn (\n\t\t\t\t<div>\n\t\t\t\t\t<TextControl onChange={ () => {} } />\n\t\t\t\t\t<TextControl onChange={ () => {} } />\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\t}\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Plugin ZIP Archive with wp-scripts\nDESCRIPTION: This snippet shows how to configure the `plugin-zip` script in `package.json` to create a zip file for a WordPress plugin using `wp-scripts`. It can be invoked using `npm run plugin-zip`. The zip file creation follows Plugin Handbook best practices by default.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/scripts/README.md#2025-04-21_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"scripts\": {\n\t\t\"plugin-zip\": \"wp-scripts plugin-zip\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Enhanced Plugin Sidebar with TextControl Component\nDESCRIPTION: Extended JavaScript implementation adding TextControl component and styling to the plugin sidebar.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/plugin-sidebar-0.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n( function ( wp ) {\n\tvar el = React.createElement;\n\tvar registerPlugin = wp.plugins.registerPlugin;\n\tvar PluginSidebar = wp.editor.PluginSidebar;\n\tvar TextControl = wp.components.TextControl;\n\n\tregisterPlugin( 'my-plugin-sidebar', {\n\t\trender: function () {\n\t\t\treturn el(\n\t\t\t\tPluginSidebar,\n\t\t\t\t{\n\t\t\t\t\tname: 'my-plugin-sidebar',\n\t\t\t\t\ticon: 'admin-post',\n\t\t\t\t\ttitle: 'My plugin sidebar',\n\t\t\t\t},\n\t\t\t\tel(\n\t\t\t\t\t'div',\n\t\t\t\t\t{ className: 'plugin-sidebar-content' },\n\t\t\t\t\tel( TextControl, {\n\t\t\t\t\t\tlabel: 'Meta Block Field',\n\t\t\t\t\t\tvalue: 'Initial value',\n\t\t\t\t\t\tonChange: function ( content ) {\n\t\t\t\t\t\t\tconsole.log( 'content changed to ', content );\n\t\t\t\t\t\t},\n\t\t\t\t\t} )\n\t\t\t\t)\n\t\t\t);\n\t\t},\n\t} );\n} )( window.wp );\n```\n\n----------------------------------------\n\nTITLE: Using Post Meta in Block Rendering for WordPress\nDESCRIPTION: This PHP code shows how to use post meta data when rendering a block, specifically appending the meta value to every Paragraph block's content.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/metabox.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nfunction myguten_render_paragraph( $block_attributes, $content ) {\n\t$value = get_post_meta( get_the_ID(), 'myguten_meta_block_field', true );\n\t// check value is set before outputting\n\tif ( $value ) {\n\t\treturn sprintf( \"%s (%s)\", $content, esc_html( $value ) );\n\t} else {\n\t\treturn $content;\n\t}\n}\n\nregister_block_type( 'core/paragraph', array(\n\t'api_version' => 3,\n\t'render_callback' => 'myguten_render_paragraph',\n) );\n```\n\n----------------------------------------\n\nTITLE: Implementing withInstanceId HOC in React Component\nDESCRIPTION: Demonstrates how to use withInstanceId to generate a unique instanceId for a custom element, which can be used to create unique element identifiers dynamically.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/compose/src/higher-order/with-instance-id/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { withInstanceId } from '@wordpress/compose';\n\nfunction MyCustomElement( { instanceId } ) {\n\treturn <div id={ `my-custom-element-${ instanceId }` }>content</div>;\n}\n\nexport default withInstanceId( MyCustomElement );\n```\n\n----------------------------------------\n\nTITLE: Configuring Inserter Media Categories\nDESCRIPTION: Example of defining custom media categories for the inserter panel. This example creates an Openverse media category with a custom fetch function that retrieves images from the Openverse API.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/platform-docs/docs/basic-concepts/settings.md#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst inserterMediaCategories = {\n    name: 'openverse',\n    labels: {\n        name: 'Openverse',\n        search_items: 'Search Openverse',\n    },\n    mediaType: 'image',\n    async fetch( query = {} ) {\n        const defaultArgs = {\n            mature: false,\n            excluded_source: 'flickr,inaturalist,wikimedia',\n            license: 'pdm,cc0',\n        };\n        const finalQuery = { ...query, ...defaultArgs };\n        // Sometimes you might need to map the supported request params according to the `InserterMediaRequest`\n        // interface. In this example the `search` query param is named `q`.\n        const mapFromInserterMediaRequest = {\n            per_page: 'page_size',\n            search: 'q',\n        };\n        const url = new URL( 'https://api.openverse.engineering/v1/images/' );\n        Object.entries( finalQuery ).forEach( ( [ key, value ] ) => {\n            const queryKey = mapFromInserterMediaRequest[ key ] || key;\n            url.searchParams.set( queryKey, value );\n        } );\n        const response = await window.fetch( url, {\n            headers: {\n                'User-Agent': 'WordPress/inserter-media-fetch',\n            },\n        } );\n        const jsonResponse = await response.json();\n        const results = jsonResponse.results;\n        return results.map( ( result ) => ( {\n            ...result,\n            // If your response result includes an `id` prop that you want to access later, it should\n            // be mapped to `InserterMediaItem`'s `sourceId` prop. This can be useful if you provide\n            // a report URL getter.\n            // Additionally you should always clear the `id` value of your response results because\n            // it is used to identify WordPress media items.\n            sourceId: result.id,\n            id: undefined,\n            caption: result.caption,\n            previewUrl: result.thumbnail,\n        } ) );\n    },\n    getReportUrl: ( { sourceId } ) =>\n        `https://wordpress.org/openverse/image/${ sourceId }/report/`,\n    isExternalResource: true,\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Inline Styles with useBlockProps in WordPress Block\nDESCRIPTION: Demonstrates how to apply inline styles to a block using the useBlockProps hook. The example shows different styles for editor and frontend views with green and red backgrounds respectively.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/block-tutorial/applying-styles-with-stylesheets.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { registerBlockType } from '@wordpress/blocks';\nimport { useBlockProps } from '@wordpress/block-editor';\n\nregisterBlockType( 'gutenberg-examples/example-02-stylesheets', {\n\tedit() {\n\t\tconst greenBackground = {\n\t\t\tbackgroundColor: '#090',\n\t\t\tcolor: '#fff',\n\t\t\tpadding: '20px',\n\t\t};\n\n\t\tconst blockProps = useBlockProps( { style: greenBackground } );\n\n\t\treturn (\n\t\t\t<p { ...blockProps }>Hello World (from the editor, in green).</p>\n\t\t);\n\t},\n\tsave() {\n\t\tconst redBackground = {\n\t\t\tbackgroundColor: '#900',\n\t\t\tcolor: '#fff',\n\t\t\tpadding: '20px',\n\t\t};\n\n\t\tconst blockProps = useBlockProps.save( { style: redBackground } );\n\n\t\treturn (\n\t\t\t<p { ...blockProps }>Hello World (from the frontend, in red).</p>\n\t\t);\n\t},\n} );\n```\n\n----------------------------------------\n\nTITLE: Query Loop Variation Inner Blocks Configuration\nDESCRIPTION: Configuration example showing how to define default inner blocks for a Query Loop variation including post template, pagination, and no-results blocks.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/block-tutorial/extending-the-query-loop-block.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ninnerBlocks: [\n\t[\n\t\t'core/post-template',\n\t\t{},\n\t\t[ [ 'core/post-title' ], [ 'core/post-excerpt' ] ],\n\t],\n\t[ 'core/query-pagination' ],\n\t[ 'core/query-no-results' ],\n],\n```\n\n----------------------------------------\n\nTITLE: Binding Global Events with `withGlobalEvents` HOC - JavaScript\nDESCRIPTION: `withGlobalEvents` is a higher-order component that simplifies managing global DOM events in React components. It handles automatic event binding and unbinding when a component mounts and unmounts. The component expects an object with DOM event types as keys and corresponding handler method names as values. The primary benefit is centralizing and managing a single event handler rather than multiple individual handlers.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/compose/src/higher-order/with-global-events/README.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { withGlobalEvents } from '@wordpress/components';\n\nclass ResizingComponent extends Component {\n\thandleResize() {\n\t\t// ...\n\t}\n\n\trender() {\n\t\t// ...\n\t}\n}\n\nexport default withGlobalEvents( {\n\tresize: 'handleResize',\n} )( ResizingComponent );\n```\n\n----------------------------------------\n\nTITLE: Defining Editor Style in block.json\nDESCRIPTION: Configuration for editor-specific styles that are only loaded in the block editor context. Accepts file paths or registered style handles.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-metadata.md#2025-04-21_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{ \"editorStyle\": \"file:./index.css\" }\n```\n\n----------------------------------------\n\nTITLE: Defining View Script Module in block.json\nDESCRIPTION: Configuration for frontend script modules that are only loaded when viewing content on the front of the site. Available since WordPress 6.5.0.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-metadata.md#2025-04-21_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{ \"viewScriptModule\": [ \"file:./view.js\", \"example-shared-script-module-id\" ] }\n```\n\n----------------------------------------\n\nTITLE: Registering Block Style with JavaScript\nDESCRIPTION: Demonstrates how to register a custom block style for the quote block using JavaScript. The style will add an 'is-style-fancy-quote' className when selected.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-styles.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nwp.blocks.registerBlockStyle( 'core/quote', {\n\tname: 'fancy-quote',\n\tlabel: 'Fancy Quote',\n} );\n```\n\n----------------------------------------\n\nTITLE: RichTextToolbarButton Implementation\nDESCRIPTION: Demonstrates how to create a custom formatting button in the RichText toolbar using RichTextToolbarButton component.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/src/components/rich-text/README.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { registerFormatType } from '@wordpress/rich-text';\nimport { RichTextToolbarButton } from '@wordpress/block-editor';\n\nregisterFormatType( /* ... */, {\n\t/* ... */\n\tedit( { isActive } ) {\n\t\treturn (\n\t\t\t<RichTextToolbarButton\n\t\t\t\ticon={ 'editor-code' }\n\t\t\t\ttitle={ 'My formatting button' }\n\t\t\t\tonClick={ /* ... */ }\n\t\t\t\tisActive={ isActive }\n\t\t\t\t/>\n\t\t);\n\t},\n\t/* ... */\n} );\n```\n\n----------------------------------------\n\nTITLE: Implementing Widget Preview Logic in PHP\nDESCRIPTION: This PHP snippet shows how to implement the widget() function in a custom widget class to control when the 'No preview available' message is displayed in the Legacy Widget block.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/widgets/legacy-widget-block.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass ExampleWidget extends WP_Widget {\n\t...\n\tpublic function widget( $instance ) {\n\t\tif ( ! isset( $instance['name'] ) ) {\n\t\t\t// Name is required, so display nothing if we don't have it.\n\t\t\treturn;\n\t\t}\n\t\t?>\n\t\t<h3>Name: <?php echo esc_html( $instance['name'] ); ?></h3>\n\t\t...\n\t\t<?php\n\t}\n\t...\n}\n```\n\n----------------------------------------\n\nTITLE: PHP Implementation of Server-side Block Rendering\nDESCRIPTION: Example implementation of a render.php file that handles server-side rendering of a block, showing how to access block attributes and apply wrapper attributes.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-metadata.md#2025-04-21_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n<div <?php echo get_block_wrapper_attributes(); ?>>\n\t<?php echo esc_html( $attributes['label'] ); ?>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating and Using a Priority Queue in WordPress\nDESCRIPTION: This code snippet demonstrates how to import and use the `createQueue` function from the `@wordpress/priority-queue` package.  It creates a queue, adds callbacks with associated contexts, and shows how only the last callback for each context is executed.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/priority-queue/README.md#2025-04-21_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { createQueue } from '@wordpress/priority-queue';\n\nconst queue = createQueue();\n\n// Context objects.\nconst ctx1 = {};\nconst ctx2 = {};\n\n// For a given context in the queue, only the last callback is executed.\nqueue.add( ctx1, () => console.log( 'This will be printed first' ) );\nqueue.add( ctx2, () => console.log( \"This won't be printed\" ) );\nqueue.add( ctx2, () => console.log( 'This will be printed second' ) );\n```\n\n----------------------------------------\n\nTITLE: PHP Implementation of Block Translation\nDESCRIPTION: Example showing how block metadata is processed for translation in PHP, wrapping translatable strings in _x() function calls with the specified textdomain.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-metadata.md#2025-04-21_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$metadata = array(\n\t'title'       => _x( 'My block', 'block title', 'my-plugin' ),\n\t'description' => _x( 'My block is fantastic!', 'block description', 'my-plugin' ),\n\t'keywords'    => array( _x( 'fantastic', 'block keyword', 'my-plugin' ) ),\n);\n```\n\n----------------------------------------\n\nTITLE: Using useSelect Hook for Data Retrieval\nDESCRIPTION: Shows how to use the useSelect hook to retrieve data from a custom store and display it in a component. The example fetches a hammer price based on the currency prop.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/data/README.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useSelect } from '@wordpress/data';\nimport { store as myCustomStore } from 'my-custom-store';\n\nfunction HammerPriceDisplay( { currency } ) {\n\tconst price = useSelect(\n\t\t( select ) => {\n\t\t\treturn select( myCustomStore ).getPrice( 'hammer', currency );\n\t\t},\n\t\t[ currency ]\n\t);\n\treturn new Intl.NumberFormat( 'en-US', {\n\t\tstyle: 'currency',\n\t\tcurrency,\n\t} ).format( price );\n}\n\n// Rendered in the application:\n// <HammerPriceDisplay currency=\"USD\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Save Function for Gutenberg Block\nDESCRIPTION: Shows the basic structure of a save function for a Gutenberg block, including the use of useBlockProps.save() for handling block wrapper properties.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-edit-save.md#2025-04-21_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nsave: () => {\n\tconst blockProps = useBlockProps.save();\n\n\treturn <div { ...blockProps }> Your block. </div>;\n};\n```\n\n----------------------------------------\n\nTITLE: Store Configuration for wp-bind Example\nDESCRIPTION: JavaScript snippet showing a store configuration for managing toggle actions with the wp-bind directive. Actions update the context to trigger changes in the associated HTML attributes.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/api-reference.md#2025-04-21_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nstore( 'myPlugin', {\n\tactions: {\n\t\ttoggleMenu: () => {\n\t\t\tconst context = getContext();\n\t\t\tcontext.isMenuOpen = ! context.isMenuOpen;\n\t\t},\n\t},\n} );\n```\n\n----------------------------------------\n\nTITLE: Enabling Button Color Support in WordPress Gutenberg\nDESCRIPTION: This snippet demonstrates how to enable button color support for a block in WordPress Gutenberg. It allows users to set button text and background colors.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-supports.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nsupports: {\n\tcolor: {\n\t\tbutton: true\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Running create-block in Interactive Mode for WordPress Block Development\nDESCRIPTION: This command starts create-block in interactive mode, prompting the user for inputs to configure the block settings step-by-step.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/getting-started/devenv/get-started-with-create-block.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx @wordpress/create-block@latest\n```\n\n----------------------------------------\n\nTITLE: Unregistering Block Variations in JavaScript\nDESCRIPTION: JavaScript code to disable specific block variations, such as the Row variation of the Group block.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/curating-the-editor-experience/disable-editor-functionality.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nwp.domReady( () => {\n\twp.blocks.unregisterBlockVariation( 'core/group', 'group-row' );\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing ToggleControl in React for Background Settings\nDESCRIPTION: This example demonstrates how to implement a ToggleControl component with conditional help text in a React component. It shows how to use state to manage the toggle's checked status and update it based on user interaction.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/toggle-control/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { ToggleControl } from '@wordpress/components';\n\nconst MyToggleControl = () => {\n\tconst [ hasFixedBackground, setHasFixedBackground ] = useState( false );\n\n\treturn (\n\t\t<ToggleControl\n\t\t\t__nextHasNoMarginBottom\n\t\t\tlabel=\"Fixed Background\"\n\t\t\thelp={\n\t\t\t\thasFixedBackground\n\t\t\t\t\t? 'Has fixed background.'\n\t\t\t\t\t: 'No fixed background.'\n\t\t\t}\n\t\t\tchecked={ hasFixedBackground }\n\t\t\tonChange={ (newValue) => {\n\t\t\t\tsetHasFixedBackground( newValue );\n\t\t\t} }\n\t\t/>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing Block Context in PHP Render Callback\nDESCRIPTION: This snippet shows how to access block context within a PHP render_callback function. The context is available as a property of the $block parameter.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-context.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nregister_block_type( 'my-plugin/record-title', array(\n\t'render_callback' => function( $attributes, $content, $block ) {\n\t\treturn 'The current record ID is: ' . $block->context['my-plugin/recordId'];\n\t},\n) );\n```\n\n----------------------------------------\n\nTITLE: Implementing ToggleGroupControl with Options in React\nDESCRIPTION: Example showing how to use the ToggleGroupControl component with ToggleGroupControlOption children to create a toggle group with horizontal and vertical options. This demonstrates importing the components, setting up props including label, value, and other configuration options.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/toggle-group-control/toggle-group-control/README.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n\t__experimentalToggleGroupControl as ToggleGroupControl,\n\t__experimentalToggleGroupControlOption as ToggleGroupControlOption,\n} from '@wordpress/components';\n\nfunction Example() {\n\treturn (\n\t\t<ToggleGroupControl\n\t\t\tlabel=\"my label\"\n\t\t\tvalue=\"vertical\"\n\t\t\tisBlock\n\t\t\t__nextHasNoMarginBottom\n\t\t\t__next40pxDefaultSize\n\t\t>\n\t\t\t<ToggleGroupControlOption value=\"horizontal\" label=\"Horizontal\" />\n\t\t\t<ToggleGroupControlOption value=\"vertical\" label=\"Vertical\" />\n\t\t</ToggleGroupControl>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Initial block.json Configuration for Copyright Date Block\nDESCRIPTION: This JSON configuration defines the initial structure and properties of the Copyright Date Block, including its name, version, category, and supported features.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/getting-started/tutorial.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"$schema\": \"https://schemas.wp.org/trunk/block.json\",\n\t\"apiVersion\": 3,\n\t\"name\": \"create-block/copyright-date-block\",\n\t\"version\": \"0.1.0\",\n\t\"title\": \"Copyright Date Block\",\n\t\"category\": \"widgets\",\n\t\"icon\": \"smiley\",\n\t\"description\": \"Example block scaffolded with Create Block tool.\",\n\t\"example\": {},\n\t\"supports\": {\n\t\t\"html\": false\n\t},\n\t\"textdomain\": \"copyright-date-block\",\n\t\"editorScript\": \"file:./index.js\",\n\t\"editorStyle\": \"file:./index.css\",\n\t\"style\": \"file:./style-index.css\",\n\t\"render\": \"file:./render.php\",\n\t\"viewScript\": \"file:./view.js\"\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Props with withFilters in React\nDESCRIPTION: This example shows how to use withFilters to override props of a component. It creates a higher-order component that modifies the 'hint' prop of the filtered component.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/higher-order/with-filters/README.md#2025-04-21_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\nimport { withFilters } from '@wordpress/components';\nimport { addFilter } from '@wordpress/hooks';\n\nconst MyComponent = ( { hint, title } ) => (\n\t<>\n\t\t<h1>{ title }</h1>\n\t\t<p>{ hint }</p>\n\t</>\n);\n\nfunction withHintOverridden( FilteredComponent ) {\n\treturn ( props ) => (\n\t\t<FilteredComponent { ...props } hint=\"Overridden hint\" />\n\t);\n}\n\naddFilter( 'MyHookName', 'my-plugin/with-hint-overridden', withHintOverridden );\n\nconst MyComponentWithFilters = withFilters( 'MyHookName' )( MyComponent );\n```\n\n----------------------------------------\n\nTITLE: Creating a Typed Context Helper Function in TypeScript\nDESCRIPTION: Demonstrates how to create a reusable typed context helper function to avoid repeatedly specifying context types throughout your code.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/core-concepts/using-typescript.md#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// Defines the types of your context.\ntype MyContext = {\n\tcounter: number;\n};\n\n// Defines a typed function. You only have to do this once.\nconst getMyContext = getContext< MyContext >;\n\nstore( 'myCounterPlugin', {\n\tactions: {\n\t\tincrement() {\n\t\t\t// Use your typed function.\n\t\t\tconst context = getMyContext();\n\t\t\t// Now `context` is properly typed.\n\t\t\tcontext.counter += 1;\n\t\t},\n\t},\n} );\n```\n\n----------------------------------------\n\nTITLE: Implementing BlockControls with BlockAlignmentMatrixControl in a React Component\nDESCRIPTION: This code snippet demonstrates how to integrate BlockControls into a custom block's edit function. It shows how to add a BlockAlignmentMatrixControl to the block toolbar, allowing users to change content position within the block.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/src/components/block-controls/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n/**\n * WordPress dependencies\n */\nimport {\n\tBlockControls,\n\t__experimentalBlockAlignmentMatrixControl as BlockAlignmentMatrixControl,\n\tuseBlockProps,\n} from '@wordpress/block-editor';\nimport { __ } from '@wordpress/i18n';\n\nexport default function MyBlockEdit( { attributes, setAttributes } ) {\n\tconst blockProps = useBlockProps( {\n\t\tclassName: 'my-block__custom-class',\n\t} );\n\tconst { contentPosition } = attributes;\n\n\treturn (\n\t\t<div { ...blockProps }>\n\t\t\t{\n\t\t\t\t<BlockControls>\n\t\t\t\t\t<BlockAlignmentMatrixControl\n\t\t\t\t\t\tlabel={ __( 'Change content position' ) }\n\t\t\t\t\t\tvalue={ contentPosition }\n\t\t\t\t\t\tonChange={ ( nextPosition ) =>\n\t\t\t\t\t\t\tsetAttributes( {\n\t\t\t\t\t\t\t\tcontentPosition: nextPosition,\n\t\t\t\t\t\t\t} )\n\t\t\t\t\t\t}\n\t\t\t\t\t/>\n\t\t\t\t</BlockControls>\n\t\t\t}\n\t\t</div>\n\t);\n}\n\n/// ...\n\n<MyBlockEdit />;\n\n```\n\n----------------------------------------\n\nTITLE: Defining Query Title Display - Gutenberg (Markdown)\nDESCRIPTION: This snippet defines a block for displaying the query title, with attributes for customization of its appearance and layout.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/core-blocks.md#2025-04-21_snippet_20\n\nLANGUAGE: markdown\nCODE:\n```\n- **Name:** core/query-title\n- **Category:** theme\n- **Supports:** align (full, wide), color (background, gradients, text), interactivity (clientNavigation), spacing (margin, padding), typography (fontSize, lineHeight), ~~html~~\n- **Attributes:** level, levelOptions, showPrefix, showSearchTerm, textAlign, type\n```\n\n----------------------------------------\n\nTITLE: Enabling Appearance Tools in WordPress\nDESCRIPTION: PHP code to enable the Appearance Tools feature set in WordPress. This enables multiple Global Styles settings including border, color, spacing, typography, dimensions, and position options.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/themes/theme-support.md#2025-04-21_snippet_30\n\nLANGUAGE: php\nCODE:\n```\nadd_theme_support( 'appearance-tools' );\n```\n\n----------------------------------------\n\nTITLE: Setting Up WordPress Script Translations\nDESCRIPTION: Shows how to configure WordPress to recognize translatable strings in a JavaScript file.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/internationalization.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\tfunction myguten_set_script_translations() {\n\t\twp_set_script_translations( 'myguten-script', 'myguten' );\n\t}\n\tadd_action( 'init', 'myguten_set_script_translations' );\n```\n\n----------------------------------------\n\nTITLE: Importing Interactivity Store in JavaScript\nDESCRIPTION: Import the store from the Interactivity API package in the block's view script to enable interactive functionality.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { store } from '@wordpress/interactivity';\n```\n\n----------------------------------------\n\nTITLE: Using useDropZone with Wrapper Element in React\nDESCRIPTION: This example demonstrates how to use the `useDropZone` hook with a wrapper element. A state variable `dropZoneElement` is used to hold a reference to the outer wrapper, and this reference is passed to the `useDropZone` hook. The drop zone functionality is applied to the inner div, which is a descendant of the outer wrapper.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/compose/src/hooks/use-drop-zone/README.md#2025-04-21_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { useState } from 'react';\nimport { useDropZone } from '@wordpress/compose';\n\nconst WithWrapperDropZoneElement = () => {\n\tconst [ dropZoneElement, setDropZoneElement ] = useState( null );\n\n\tconst dropZoneRef = useDropZone(\n\t\t{\n\t\t\tdropZoneElement,\n\t\t\tonDrop() => {\n\t\t\t\tconsole.log( 'Dropped within the drop zone.' );\n\t\t\t},\n\t\t\tonDragEnter() => {\n\t\t\t\tconsole.log( 'Dragging within the drop zone' );\n\t\t\t}\n\t\t}\n\t)\n\n\treturn (\n\t\t<div className=\"outer-wrapper\" ref={ setDropZoneElement }>\n\t\t\t<div ref={ dropZoneRef }>\n\t\t\t\t<p>Drop Zone</p>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\n```\n\n----------------------------------------\n\nTITLE: Rendering Block Alignment Toolbar\nDESCRIPTION: This code snippet demonstrates how to render the BlockAlignmentToolbar component within a Gutenberg block. It showcases how to use the `value` and `onChange` props to control the alignment and respond to user interactions. The toolbar is rendered as a child of the BlockControls component.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/src/components/block-alignment-control/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { BlockAlignmentToolbar } from '@wordpress/block-editor';\n\nconst MyBlockAlignmentToolbar = () => (\n\t<BlockControls>\n\t\t<BlockAlignmentToolbar value={ align } onChange={ updateAlignment } />\n\t</BlockControls>\n);\n\n```\n\n----------------------------------------\n\nTITLE: Implementing PanelColorSettings in React for WordPress Color Management\nDESCRIPTION: Example implementation of PanelColorSettings component showing how to manage multiple color settings including text, background, and overlay colors. Uses React useState for color state management and integrates with WordPress i18n for internationalization.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/src/components/panel-color-settings/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n/**\n * External dependencies\n */\nimport { useState } from 'react';\n\n/**\n * WordPress dependencies\n */\nimport { PanelColorSettings } from '@wordpress/block-editor';\nimport { __ } from '@wordpress/i18n';\n\n// ...\n\nconst MyPanelColorSettings = () => {\n\tconst [ textColor, setTextColor ] = useState( { color: '#000' } );\n\tconst [ backgroundColor, setBackgroundColor ] = useState( {\n\t\tcolor: '#fff',\n\t} );\n\tconst [ overlayTextColor, setOverlayTextColor ] = useState( {\n\t\tcolor: '#000',\n\t} );\n\tconst [ overlayBackgroundColor, setOverlayBackgroundColor ] = useState( {\n\t\tcolor: '#eee',\n\t} );\n\n\treturn (\n\t\t<PanelColorSettings\n\t\t\t__experimentalIsRenderedInSidebar\n\t\t\ttitle={ __( 'Color' ) }\n\t\t\tcolorSettings={ [\n\t\t\t\t{\n\t\t\t\t\tvalue: textColor.color,\n\t\t\t\t\tonChange: setTextColor,\n\t\t\t\t\tlabel: __( 'Text' ),\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tvalue: backgroundColor.color,\n\t\t\t\t\tonChange: setBackgroundColor,\n\t\t\t\t\tlabel: __( 'Background' ),\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tvalue: overlayTextColor.color,\n\t\t\t\t\tonChange: setOverlayTextColor,\n\t\t\t\t\tlabel: __( 'Submenu & overlay text' ),\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tvalue: overlayBackgroundColor.color,\n\t\t\t\t\tonChange: setOverlayBackgroundColor,\n\t\t\t\t\tlabel: __( 'Submenu & overlay background' ),\n\t\t\t\t},\n\t\t\t] }\n\t\t/>\n\t);\n};\n\n/// ...\n\n<MyPanelColorSettings />;\n```\n\n----------------------------------------\n\nTITLE: Creating Notices in WordPress Block Editor (JavaScript)\nDESCRIPTION: This JavaScript code snippet shows how to use the Notices Data API in the WordPress block editor to create a notice. It demonstrates creating a success notice with a dismissible option and an action button.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/notices/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n( function ( wp ) {\n\twp.data.dispatch( 'core/notices' ).createNotice(\n\t\t'success', // Can be one of: success, info, warning, error.\n\t\t'Post published.', // Text string to display.\n\t\t{\n\t\t\tisDismissible: true, // Whether the user can dismiss the notice.\n\t\t\t// Any actions the user can perform.\n\t\t\tactions: [\n\t\t\t\t{\n\t\t\t\t\turl: '#',\n\t\t\t\t\tlabel: 'View post',\n\t\t\t\t},\n\t\t\t],\n\t\t}\n\t);\n} )( window.wp );\n```\n\n----------------------------------------\n\nTITLE: Theme CSS Variables for Custom Themeable Components\nDESCRIPTION: A list of CSS variables that can be used to create themeable components that work with the Theme component. These variables represent accent colors, background colors, foreground colors, and a grayscale palette for consistent theming across components.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/theme/README.md#2025-04-21_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n--wp-components-color-accent: The accent color.\n--wp-components-color-accent-darker-10: A slightly darker version of the accent color.\n--wp-components-color-accent-darker-20: An even darker version of the accent color.\n--wp-components-color-accent-inverted: The foreground color when the accent color is the background, for example when placing text on the accent color.\n--wp-components-color-background: The background color.\n--wp-components-color-foreground: The foreground color, for example text.\n--wp-components-color-foreground-inverted: The foreground color when the foreground color is the background, for example when placing text on the foreground color.\n--wp-components-color-gray-100: Used for light gray backgrounds.\n--wp-components-color-gray-200: Used sparingly for light borders.\n--wp-components-color-gray-300: Used for most borders.\n--wp-components-color-gray-400\n--wp-components-color-gray-600: Meets 3:1 UI or large text contrast against white.\n--wp-components-color-gray-700: Meets 4.6:1 text contrast against white.\n--wp-components-color-gray-800\n```\n\n----------------------------------------\n\nTITLE: Block Deprecation with Markup Changes\nDESCRIPTION: Shows how to deprecate a block by changing its markup from a paragraph to a div element while maintaining the same attributes and supports configuration.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-deprecation.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { registerBlockType } = wp.blocks;\nconst attributes = {\n\ttext: {\n\t\ttype: 'string',\n\t\tdefault: 'some random value',\n\t},\n};\nconst supports = {\n\tclassName: false,\n};\n\nregisterBlockType( 'gutenberg/block-with-deprecated-version', {\n\t// ... other block properties go here\n\n\tattributes,\n\n\tsupports,\n\n\tsave( props ) {\n\t\treturn <div>{ props.attributes.text }</div>;\n\t},\n\n\tdeprecated: [\n\t\t{\n\t\t\tattributes,\n\n\t\t\tsupports,\n\n\t\t\tsave( props ) {\n\t\t\t\treturn <p>{ props.attributes.text }</p>;\n\t\t\t},\n\t\t},\n\t],\n} );\n```\n\n----------------------------------------\n\nTITLE: Updating Display Date in Gutenberg Editor - JavaScript\nDESCRIPTION: This snippet creates a variable 'displayDate' based on user preferences for showing a starting year alongside the current year in a Gutenberg block. It checks if 'showStartingYear' is true and if a 'startingYear' is provided to format the display correctly.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/getting-started/tutorial.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nlet displayDate;\n\nif ( showStartingYear && startingYear ) {\n\tdisplayDate = startingYear + '–' + currentYear;\n} else {\n\tdisplayDate = currentYear;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing URLPopover Component in React\nDESCRIPTION: This code snippet demonstrates how to implement the URLPopover component in a React class. It includes state management for URL editing, opening/closing the popover, and rendering the URLPopover with various props and child components.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/src/components/url-popover/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ToggleControl, Button } from '@wordpress/components';\nimport { URLPopover } from '@wordpress/block-editor';\nimport { keyboardReturn } from '@wordpress/icons';\n\nclass MyURLPopover extends Component {\n\tconstructor() {\n\t\tsuper( ...arguments );\n\n\t\tthis.onChangeURL = this.onChangeURL.bind( this );\n\t\tthis.openURLPopover = this.openURLPopover.bind( this );\n\t\tthis.closeURLPopover = this.closeURLPopover.bind( this );\n\t\tthis.submitURL = this.submitURL.bind( this );\n\t\tthis.setTarget = this.setTarget.bind( this );\n\n\t\tthis.state = {\n\t\t\tisVisible: false,\n\t\t};\n\t}\n\n\tonChangeURL( url ) {\n\t\tthis.setState( { url } );\n\t}\n\n\topenURLPopover() {\n\t\tthis.setState( {\n\t\t\tisVisible: true,\n\t\t} );\n\t}\n\n\tcloseURLPopover() {\n\t\tthis.setState( {\n\t\t\tisVisible: false,\n\t\t} );\n\t}\n\n\tsubmitURL() {\n\t\t// Not shown: Store the updated url.\n\n\t\tthis.closeURLPopover();\n\t}\n\n\tsetTarget() {\n\t\t// Not shown: Store the updated 'opensInNewWindow' setting.\n\t}\n\n\trender() {\n\t\tconst { opensInNewWindow } = this.props;\n\t\tconst { url, isVisible, isEditing } = this.state;\n\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<Button onClick={ this.openURLPopover }>Edit URL</Button>\n\t\t\t\t{ isVisible && (\n\t\t\t\t\t<URLPopover\n\t\t\t\t\t\tonClose={ this.closeURLPopover }\n\t\t\t\t\t\trenderSettings={ () => (\n\t\t\t\t\t\t\t<ToggleControl\n\t\t\t\t\t\t\t\tlabel={ __( 'Open in new tab' ) }\n\t\t\t\t\t\t\t\tchecked={ opensInNewWindow }\n\t\t\t\t\t\t\t\tonChange={ this.setTarget }\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t) }\n\t\t\t\t\t>\n\t\t\t\t\t\t<form onSubmit={ this.submitURL }>\n\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\ttype=\"url\"\n\t\t\t\t\t\t\t\tvalue={ url }\n\t\t\t\t\t\t\t\tonChange={ this.onChangeURL }\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\ticon={ keyboardReturn }\n\t\t\t\t\t\t\t\tlabel={ __( 'Apply' ) }\n\t\t\t\t\t\t\t\ttype=\"submit\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</form>\n\t\t\t\t\t</URLPopover>\n\t\t\t\t) }\n\t\t\t</>\n\t\t);\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Block Categories using PHP WordPress Filter\nDESCRIPTION: Server-side implementation to add custom block categories when a post context is available. Uses the block_categories_all filter hook and supports adding category slug, title and icon properties.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/filters/block-filters.md#2025-04-21_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nfunction example_filter_block_categories_when_post_provided( $block_categories, $editor_context ) {\n\tif ( ! empty( $editor_context->post ) ) {\n\t\tarray_push(\n\t\t\t$block_categories,\n\t\t\tarray(\n\t\t\t\t'slug'  => 'custom-category',\n\t\t\t\t'title' => __( 'Custom Category', 'custom-plugin' ),\n\t\t\t\t'icon'  => null,\n\t\t\t)\n\t\t);\n\t}\n\treturn $block_categories;\n}\nadd_filter( 'block_categories_all', 'example_filter_block_categories_when_post_provided', 10, 2 );\n```\n\n----------------------------------------\n\nTITLE: Using MediaPlaceholder for Image Selection in React\nDESCRIPTION: This snippet demonstrates how to use the MediaPlaceholder component to select an image and store its URL in the block's attributes. It showcases handling the onSelect event to update the image URL and how to restrict the media types to images.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/src/components/media-placeholder/README.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { MediaPlaceholder } from '@wordpress/block-editor';\n\n...\n\n\tedit: ( { attributes, setAttributes } ) => {\n\t\tconst mediaPlaceholder = <MediaPlaceholder\n\t\t\tonSelect = {\n\t\t\t\t( el ) => {\n\t\t\t\t\tsetAttributes( { theImage: el.url } );\n\t\t\t\t}\n\t\t\t}\n\t\t\tallowedTypes = { [ 'image' ] }\n\t\t\tmultiple = { false }\n\t\t\tlabels = { { title: 'The Image' } }\n\t\t>\n\t\t\t\"extra content\"\n\t\t</MediaPlaceholder>;\n\t\t...\n\t}\n\n```\n\n----------------------------------------\n\nTITLE: Handling Save Completion in EditPageForm Component (JSX)\nDESCRIPTION: This snippet shows how to handle the completion of a save operation and close the form modal using the promise returned by saveEditedEntityRecord.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/data-basics/3-building-an-edit-form.md#2025-04-21_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nfunction EditPageForm( { pageId, onCancel, onSaveFinished } ) {\n\t// ...\n\tconst handleSave = async () => {\n\t\tawait saveEditedEntityRecord( 'postType', 'page', pageId );\n\t\tonSaveFinished();\n\t};\n\t// ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Block Styles in JSON\nDESCRIPTION: Shows how to define alternative styles for a block, which can be selected by users in the editor.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-metadata.md#2025-04-21_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"styles\": [\n\t\t{ \"name\": \"default\", \"label\": \"Default\", \"isDefault\": true },\n\t\t{ \"name\": \"other\", \"label\": \"Other\" }\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a DotTip component in React\nDESCRIPTION: This JSX snippet demonstrates how to use the DotTip component to add a tip to a button. The `tipId` prop uniquely identifies the tip, and the content within the DotTip component is displayed as the tip's message.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/nux/README.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<button onClick={ ... }>\n\tAdd to Cart\n\t<DotTip tipId=\"acme/add-to-cart\">\n\t\tClick here to add the product to your shopping cart.\n\t</DotTip>\n</button>\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Styles from Block Attributes in PHP\nDESCRIPTION: Demonstrates how to use wp_style_engine_get_styles() to generate CSS styles from a block's style attributes. This function returns compiled CSS declarations and an array of property/value pairs.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/style-engine/README.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$block_attributes =  array(\n     'style' => array(\n        'spacing' => array( 'padding' => '100px' ),\n     ),\n);\n\n$styles = wp_style_engine_get_styles(\n    $block_attributes['style'],\n    array(\n        'selector' => '.a-selector',\n        'context'  => 'block-supports',\n    )\n);\nprint_r( $styles );\n\n/*\narray(\n    'css'          => '.a-selector{padding:100px}'\n    'declarations' => array( 'padding' => '100px' )\n)\n*/\n```\n\n----------------------------------------\n\nTITLE: Defining Field Elements for Filtering (JavaScript)\nDESCRIPTION: Example of defining valid values for a field, which can be used for filtering in DataViews and for populating edit controls in DataForm.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/dataviews/README.md#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\n{\n\telements: [\n\t\t{ value: '1', label: 'Product A' },\n\t\t{ value: '2', label: 'Product B' },\n\t\t{ value: '3', label: 'Product C' },\n\t\t{ value: '4', label: 'Product D' },\n\t];\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering with Mustache Templates\nDESCRIPTION: This Mustache code showcases conditional content rendering based on template variant flags. Using predefined mustache tags, different content is selectively outputted, allowing for dynamic file contents tailored to specific template variants.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/create-block/docs/external-template.md#2025-04-21_snippet_7\n\nLANGUAGE: Mustache\nCODE:\n```\n{{#isPrimaryVariant}}\nThis content is only rendered if `--variant primary` is passed.\n{{/isPrimaryVariant}}\n\n{{#isSecondaryVariant}}\nThis content is only rendered if `--variant secondary` is passed.\n{{/isSecondaryVariant}}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Typography Support\nDESCRIPTION: Shows how to enable typography-related features including fontSize, lineHeight, and textAlign controls in the block editor.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-supports.md#2025-04-21_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nsupports: {\n    typography: {\n        // Enable support and UI control for font-size.\n        fontSize: true,\n        // Enable support and UI control for line-height.\n        lineHeight: true,\n        // Enable support and UI control for text alignment.\n        textAlign: true,\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Static Block Save Function Example in JavaScript\nDESCRIPTION: Implementation of a save function for the Preformatted core block that defines static HTML structure to be saved in the database. The function uses RichText and useBlockProps from WordPress block editor to generate the markup.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/getting-started/fundamentals/static-dynamic-rendering.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { RichText, useBlockProps } from '@wordpress/block-editor';\n\nexport default function save( { attributes } ) {\n\tconst { content } = attributes;\n\n\treturn (\n\t\t<pre { ...useBlockProps.save() }>\n\t\t\t<RichText.Content value={ content } />\n\t\t</pre>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Using TokenList in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the TokenList class from the @wordpress/token-list package. It shows creating a new TokenList, adding, removing, and replacing tokens, and then logging the final value.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/token-list/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport TokenList from '@wordpress/token-list';\n\nconst tokens = new TokenList( 'abc def' );\ntokens.add( 'ghi' );\ntokens.remove( 'def' );\ntokens.replace( 'abc', 'xyz' );\nconsole.log( tokens.value );\n// \"xyz ghi\"\n```\n\n----------------------------------------\n\nTITLE: Using useStateWithHistory Hook for Undo/Redo in React\nDESCRIPTION: This snippet shows how to implement undo and redo functionality in a WordPress block editor context using the useStateWithHistory hook. It initializes the state for blocks and provides buttons for undoing and redoing actions. Make sure to include @wordpress/compose and other necessary WordPress packages.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/platform-docs/docs/basic-concepts/undo-redo.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useStateWithHistory } from '@wordpress/compose';\nimport { createElement, useState } from \"react\";\nimport { createRoot } from 'react-dom/client';\nimport {\n  BlockEditorProvider,\n  BlockCanvas,\n} from \"@wordpress/block-editor\";\n\nfunction Editor() {\n\tconst { value, setValue, hasUndo, hasRedo, undo, redo } =\n\t\tuseStateWithHistory( { blocks: [] } );\n\n\treturn (\n        <BlockEditorProvider\n            value={ value.blocks }\n            selection={ value.selection }\n            onInput={ ( blocks, { selection } ) =>\n                setValue( { blocks, selection }, true )\n            }\n            onChange={ ( blocks, { selection } ) =>\n                setValue( { blocks, selection }, false )\n            }\n        >\n            <div className=\"undo-redo-toolbar\">\n                <button onClick={ undo } disabled={ ! hasUndo }>\n                    Undo\n                </button>\n                <button onClick={ redo } disabled={ ! hasRedo }>\n                    Redo\n                </button>\n            </div>\n            <BlockCanvas />\n        </BlockEditorProvider>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Block Variation with Custom Style in JavaScript\nDESCRIPTION: Demonstrates creating a block variation that applies both initial attributes and a custom block style class.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-variations.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvariations: [\n\t{\n\t\tname: 'blue',\n\t\ttitle: __( 'Blue Quote' ),\n\t\tisDefault: true,\n\t\tattributes: {\n\t\t\tcolor: 'blue',\n\t\t\tclassName: 'is-style-blue-quote'\n\t\t},\n\t\ticon: 'format-quote',\n\t\tisActive: ( blockAttributes, variationAttributes ) =>\n\t\t\tblockAttributes.color === variationAttributes.color\n\t},\n],\n```\n\n----------------------------------------\n\nTITLE: Retrieving and Enqueuing Stored Styles in PHP\nDESCRIPTION: Demonstrates how to use wp_style_engine_get_stylesheet_from_context() to retrieve compiled CSS from a stored context and enqueue it for rendering in the frontend. This example shows registering styles and later fetching them for use.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/style-engine/README.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// First, let's gather and register our styles.\n$styles = array(\n    array(\n        'selector'     => '.wp-apple',\n        'declarations' => array( 'color' => 'green' )\n    ),\n);\n\nwp_style_engine_get_stylesheet_from_css_rules(\n    $styles,\n    array(\n        'context' => 'fruit-styles',\n    )\n);\n\n// Later, we fetch compiled rules from context store.\n$stylesheet = wp_style_engine_get_stylesheet_from_context( 'fruit-styles' );\n\nprint_r( $stylesheet ); // .wp-apple{color:green;}\n\nif ( ! empty( $stylesheet ) ) {\n    wp_register_style( 'my-stylesheet', false, array(), true, true );\n    wp_add_inline_style( 'my-stylesheet', $stylesheet );\n    wp_enqueue_style( 'my-stylesheet' );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring State and Actions with WordPress Interactivity API\nDESCRIPTION: This JavaScript code defines the state and actions for the WordPress Interactivity API example. It includes basic state properties, derived state using getters, and actions that modify the state, demonstrating the reactive programming model.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/core-concepts/the-reactive-and-declarative-mindset.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { store } from '@wordpress/interactivity';\n\nconst { state } = store( 'myInteractivePlugin', {\n\tstate: {\n\t\tisVisible: false,\n\t\tisActive: false,\n\t\tget visibilityText() {\n\t\t\treturn state.isVisible ? 'hide' : 'show';\n\t\t},\n\t\tget activationText() {\n\t\t\treturn state.isActive ? 'deactivate' : 'activate';\n\t\t},\n\t\tget paragraphText() {\n\t\t\treturn state.isActive ? 'this is active' : 'this is inactive';\n\t\t},\n\t},\n\tactions: {\n\t\ttoggleVisibility() {\n\t\t\tstate.isVisible = ! state.isVisible;\n\t\t\tif ( ! state.isVisible ) state.isActive = false;\n\t\t},\n\t\ttoggleActivation() {\n\t\t\tstate.isActive = ! state.isActive;\n\t\t},\n\t},\n} );\n```\n\n----------------------------------------\n\nTITLE: Using JustifyContentControl in a Block\nDESCRIPTION: This example shows how to implement `JustifyContentControl` within a Gutenberg block's `BlockControls`. It includes the import statement and demonstrates how to manage the `justification` attribute using `setAttributes` when the toolbar value changes. Note that you must use the `setAttributes` to add the appropriate classnames, such as `items-justified-left`, `items-justified-center`, etc.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/src/components/justify-content-control/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { JustifyContentControl } from '@wordpress/block-editor';\n\nconst MyJustifyToolbar = ( { attributes, setAttributes } ) => (\n\t<BlockControls group=\"block\">\n\t\t<JustifyContentControl\n\t\t\tvalue={ attributes.justification }\n\t\t\tonChange={ ( next ) => {\n\t\t\t\tsetAttributes( { justification: next } );\n\t\t\t} }\n\t\t/>\n\t</BlockControls>\n);\n```\n\n----------------------------------------\n\nTITLE: Advanced useInnerBlocksProps with Custom HTML\nDESCRIPTION: Advanced implementation showing how to destructure the children from innerBlocksProps to add custom HTML elements at the same level as inner blocks.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/block-tutorial/nested-blocks-inner-blocks.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { registerBlockType } from '@wordpress/blocks';\nimport { useBlockProps, useInnerBlocksProps } from '@wordpress/block-editor';\n\nregisterBlockType( 'gutenberg-examples/example-06', {\n\t// ...\n\n\tedit: () => {\n\t\tconst blockProps = useBlockProps();\n\t\tconst { children, ...innerBlocksProps } = useInnerBlocksProps( blockProps );\n\n\t\treturn (\n\t\t\t<div {...innerBlocksProps}>\n    \t\t\t{ children }\n\t\t\t\t<!-- Insert any arbitrary html here at the same level as the children -->\n\t\t\t</div>\n\t\t);\n\t},\n\n\t// ...\n} );\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Embed Block Variation in JavaScript\nDESCRIPTION: Demonstrates how to register a new variation for an existing block (core/embed) using wp.blocks.registerBlockVariation().\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-variations.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nwp.blocks.registerBlockVariation( 'core/embed', {\n\tname: 'custom-embed',\n\tattributes: { providerNameSlug: 'custom' },\n} );\n```\n\n----------------------------------------\n\nTITLE: Using Compound Components Pattern in React JSX\nDESCRIPTION: Examples demonstrating the preferred compound components pattern for rendering lists of subcomponents versus using array props. Shows both the recommended and discouraged approaches.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// ❌ Don't:\n<List\n\titems={ [ { value: 'Item 1' }, { value: 'Item 2' }, { value: 'Item 3' } ] }\n/>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n// ✅ Do:\n<List>\n\t<List.Item value=\"Item 1\" />\n\t<List.Item value=\"Item 2\" />\n\t<List.Item value=\"Item 3\" />\n</List>\n```\n\n----------------------------------------\n\nTITLE: Using Viewport Match Hook in React\nDESCRIPTION: Demonstrates usage of useViewportMatch hook to check if viewport matches specified breakpoint criteria. Takes a breakpoint name and optional operator as parameters.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/compose/README.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nuseViewportMatch( 'huge', '<' );\nuseViewportMatch( 'medium' );\n```\n\n----------------------------------------\n\nTITLE: Block Update Actions (updateBlock, updateBlockAttributes)\nDESCRIPTION: Actions for updating block content and attributes. updateBlock handles single block updates, while updateBlockAttributes can update multiple blocks simultaneously with support for unique attributes per block.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core-block-editor.md#2025-04-21_snippet_23\n\n\n\n----------------------------------------\n\nTITLE: Initializing Input Control in Gutenberg Sidebar Plugin (JavaScript)\nDESCRIPTION: This snippet creates a basic structure for a Gutenberg sidebar plugin with a text input field. It sets up the necessary WordPress components and registers the plugin.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/plugin-sidebar-0.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n( function ( wp ) {\n\tvar el = React.createElement;\n\tvar registerPlugin = wp.plugins.registerPlugin;\n\tvar PluginSidebar = wp.editor.PluginSidebar;\n\tvar TextControl = wp.components.TextControl;\n\n\tvar MetaBlockField = function () {\n\t\treturn el( TextControl, {\n\t\t\tlabel: 'Meta Block Field',\n\t\t\tvalue: 'Initial value',\n\t\t\tonChange: function ( content ) {\n\t\t\t\tconsole.log( 'content changed to ', content );\n\t\t\t},\n\t\t} );\n\t};\n\n\tregisterPlugin( 'my-plugin-sidebar', {\n\t\trender: function () {\n\t\t\treturn el(\n\t\t\t\tPluginSidebar,\n\t\t\t\t{\n\t\t\t\t\tname: 'my-plugin-sidebar',\n\t\t\t\t\ticon: 'admin-post',\n\t\t\t\t\ttitle: 'My plugin sidebar',\n\t\t\t\t},\n\t\t\t\tel(\n\t\t\t\t\t'div',\n\t\t\t\t\t{ className: 'plugin-sidebar-content' },\n\t\t\t\t\tel( MetaBlockField )\n\t\t\t\t)\n\t\t\t);\n\t\t},\n\t} );\n} )( window.wp );\n```\n\n----------------------------------------\n\nTITLE: Implementing TextareaControl Component in React with State Management\nDESCRIPTION: This example demonstrates how to implement a TextareaControl component with React hooks for state management. It shows how to initialize state for the textarea value and handle changes to update that state using the onChange prop.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/textarea-control/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { TextareaControl } from '@wordpress/components';\n\nconst MyTextareaControl = () => {\n\tconst [ text, setText ] = useState( '' );\n\n\treturn (\n\t\t<TextareaControl\n\t\t  __nextHasNoMarginBottom\n\t\t\tlabel=\"Text\"\n\t\t\thelp=\"Enter some text\"\n\t\t\tvalue={ text }\n\t\t\tonChange={ ( value ) => setText( value ) }\n\t\t/>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Interactive Counter Block Implementation\nDESCRIPTION: Complete example of an interactive counter block using local context for independent state management.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/core-concepts/undestanding-global-state-local-context-and-derived-state.md#2025-04-21_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n<div\n  data-wp-interactive=\"myCounterPlugin\"\n  <?php echo get_block_wrapper_attributes(); ?>\n  data-wp-context='{ \"counter\": 0 }'\n>\n  <p>Counter: <span data-wp-text=\"context.counter\"></span></p>\n  <button data-wp-on-async--click=\"actions.increment\">Increment</button>\n</div>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nstore( 'myCounterPlugin', {\n\tactions: {\n\t\tincrement() {\n\t\t\tconst context = getContext();\n\t\t\tcontext.counter += 1;\n\t\t},\n\t},\n} );\n```\n\n----------------------------------------\n\nTITLE: Component Snapshot Testing with React Testing Library\nDESCRIPTION: Example showing how to implement snapshot testing for React components with conditional rendering.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/testing-overview.md#2025-04-21_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nimport { render, screen } from '@testing-library/react';\nimport SolarSystem from 'solar-system';\n\ndescribe( 'SolarSystem', () => {\n\ttest( 'should render', () => {\n\t\tconst { container } = render( <SolarSystem /> );\n\n\t\texpect( container ).toMatchSnapshot();\n\t} );\n\n\ttest( 'should contain mars if planets is true', () => {\n\t\tconst { container } = render( <SolarSystem planets /> );\n\n\t\texpect( container ).toMatchSnapshot();\n\t\texpect( screen.getByText( /mars/i ) ).toBeInTheDocument();\n\t} );\n} );\n```\n\n----------------------------------------\n\nTITLE: Setting Default Button Colors in WordPress Gutenberg\nDESCRIPTION: This snippet shows how to set default button colors for a block in WordPress Gutenberg. It specifies default text and background colors using CSS variables and hex values.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-supports.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nattributes: {\n    style: {\n        type: 'object',\n        default: {\n            elements: {\n                button: {\n                    color: {\n                        text: 'var:preset|color|contrast',\n    \t\t\t\t\t    background: '#000000',\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Edit Function with PlainText Component in Gutenberg\nDESCRIPTION: Complete implementation of the edit function using the PlainText component from @wordpress/block-editor. It sets up a text input that updates the message attribute when the user types.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/platform-docs/docs/create-block/attributes.md#2025-04-21_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { useBlockProps, PlainText } from '@wordpress/block-editor';\n\nfunction Edit( { attributes, setAttributes } ) {\n\tconst blockProps = useBlockProps();\n\treturn (\n\t\t<PlainText\n\t\t\t{ ...blockProps }\n\t\t\ttagName=\"div\"\n\t\t\tvalue={ attributes.message }\n\t\t\tonChange={ ( val ) => setAttributes( { message: val } ) }\n\t\t\t__experimentalVersion={ 2 }\n\t\t/>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Suggestion Rendering with Popover\nDESCRIPTION: Example showing custom suggestion rendering using the renderSuggestions prop with a basic popover and list implementation.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/src/components/link-control/README.md#2025-04-21_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n<LinkControlSearchInput\n    renderSuggestions={( { suggestions } ) => {\n        return (\n            <Popover focusOnMount={ false } placement=\"bottom\">\n                <ul>\n                    { suggestions.map( () => ( <li key={ `${ suggestion.id }-${ suggestion.type }` }>{ suggestion.title }</li> ) ) }\n                </ul>\n            </Popover>\n        );\n    })\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating Storybook Stories for React Components\nDESCRIPTION: Illustrates how to create Storybook stories for React components, showcasing different states and variants. It uses the Storybook Controls addon to provide an interactive UI for component props.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/CONTRIBUTING.md#2025-04-21_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport Button from '../';\n\nexport default { title: 'Components/Button', component: Button };\n\nconst Template = ( args ) => <Button { ...args } />;\n\nexport const Default = Template.bind( {} );\nDefault.args = {\n\ttext: 'Default Button',\n\tisBusy: false,\n\tisSmall: false,\n};\n\nexport const Primary = Template.bind( {} );\nPrimary.args = {\n\t...Default.args,\n\ttext: 'Primary Button',\n\tvariant: 'primary',\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Block Categories in React Component (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use the setCategories function to add a custom category to the existing list of block categories. It uses the useSelect hook to retrieve the current categories and updates them with a new custom category.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/blocks/README.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { __ } from '@wordpress/i18n';\nimport { store as blocksStore, setCategories } from '@wordpress/blocks';\nimport { useSelect } from '@wordpress/data';\nimport { Button } from '@wordpress/components';\n\nconst ExampleComponent = () => {\n\t// Retrieve the list of current categories.\n\tconst blockCategories = useSelect(\n\t\t( select ) => select( blocksStore ).getCategories(),\n\t\t[]\n\t);\n\n\treturn (\n\t\t<Button\n\t\t\tonClick={ () => {\n\t\t\t\t// Add a custom category to the existing list.\n\t\t\t\tsetCategories( [\n\t\t\t\t\t...blockCategories,\n\t\t\t\t\t{ title: 'Custom Category', slug: 'custom-category' },\n\t\t\t\t] );\n\t\t\t} }\n\t\t>\n\t\t\t{ __( 'Add a new custom block category' ) }\n\t\t</Button>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Retrieving Shortcut Key Combinations in React (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use the getAllShortcutKeyCombinations selector to retrieve and display all key combinations for a given shortcut name.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core-keyboard-shortcuts.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { store as keyboardShortcutsStore } from '@wordpress/keyboard-shortcuts';\nimport { useSelect } from '@wordpress/data';\nimport { createInterpolateElement } from '@wordpress/element';\nimport { sprintf } from '@wordpress/i18n';\n\nconst ExampleComponent = () => {\n\tconst allShortcutKeyCombinations = useSelect(\n\t\t( select ) =>\n\t\t\tselect( keyboardShortcutsStore ).getAllShortcutKeyCombinations(\n\t\t\t\t'core/editor/next-region'\n\t\t\t),\n\t\t[]\n\t);\n\n\treturn (\n\t\tallShortcutKeyCombinations.length > 0 && (\n\t\t\t<ul>\n\t\t\t\t{ allShortcutKeyCombinations.map(\n\t\t\t\t\t( { character, modifier }, index ) => (\n\t\t\t\t\t\t<li key={ index }>\n\t\t\t\t\t\t\t{ createInterpolateElement(\n\t\t\t\t\t\t\t\tsprintf(\n\t\t\t\t\t\t\t\t\t'Character: <code>%s</code> / Modifier: <code>%s</code>',\n\t\t\t\t\t\t\t\t\tcharacter,\n\t\t\t\t\t\t\t\t\tmodifier\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tcode: <code />,\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t) }\n\t\t\t\t\t\t</li>\n\t\t\t\t\t)\n\t\t\t\t) }\n\t\t\t</ul>\n\t\t)\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Updated block.json Supports Configuration for Copyright Date Block\nDESCRIPTION: This JSON snippet shows the updated 'supports' section in block.json, enabling text color and font size controls while disabling background color support for the Copyright Date Block.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/getting-started/tutorial.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"supports\": {\n\t\"color\": {\n\t\t\"background\": false,\n\t\t\"text\": true\n\t},\n\t\"html\": false,\n\t\"typography\": {\n\t\t\"fontSize\": true\n\t}\n},\n```\n\n----------------------------------------\n\nTITLE: Restricting SlotFill Content to Specific Site Editor Screens in WordPress\nDESCRIPTION: Demonstrates how to limit a SlotFill component to only specific screens within the Site Editor by using an allow list of screen types. This example restricts rendering to templates, patterns, and template parts by checking both viewability and post type.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/slotfills/README.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * WordPress dependencies\n */\nimport { registerPlugin } from '@wordpress/plugins';\nimport {\n\tPluginDocumentSettingPanel,\n\tstore as editorStore,\n} from '@wordpress/editor';\nimport { store as coreStore } from '@wordpress/core-data';\nimport { useSelect } from '@wordpress/data';\nimport { __, sprintf } from '@wordpress/i18n';\n\n/**\n * The component to be rendered  as part of the plugin.\n */\nconst SiteEditorDocumentSettingPanel = () => {\n\t// Allowed areas in the Site Editor.\n\tconst allowedSiteEditorScreens = [\n\t\t'wp_template', // Templates\n\t\t'wp_block', // Patterns\n\t\t'wp_template_part', // Template Parts\n\t];\n\n\tconst { isViewable, postType } = useSelect( ( select ) => {\n\t\tconst postTypeName = select( editorStore ).getCurrentPostType();\n\t\tconst postTypeObject = select( coreStore ).getPostType( postTypeName );\n\n\t\treturn {\n\t\t\t// A viewable post type is one than can be viewed in the WordPress admin. Internal ones are not set to viewable.\n\t\t\tisViewable: postTypeObject?.viewable,\n\t\t\tpostType: postTypeName,\n\t\t};\n\t}, [] );\n\n\t// If the post type is viewable, do not render my plugin.\n\tif ( isViewable || ! allowedSiteEditorScreens.includes( postType ) ) {\n\t\treturn null;\n\t}\n\n\treturn (\n\t\t<PluginDocumentSettingPanel\n\t\t\tname=\"custom-panel\"\n\t\t\ttitle={ __( 'Restricted to Site Editor screens' ) }\n\t\t\tclassName=\"custom-panel\"\n\t\t>\n\t\t\t<p>\n\t\t\t\t{ sprintf(\n\t\t\t\t\t__(\n\t\t\t\t\t\t'Only appears on Editor Screens that are in the allowed list. %s'\n\t\t\t\t\t),\n\t\t\t\t\tallowedSiteEditorScreens.join( ', ' )\n\t\t\t\t) }\n\t\t\t</p>\n\t\t</PluginDocumentSettingPanel>\n\t);\n};\n\nregisterPlugin( 'example-site-editor-only', {\n\trender: SiteEditorDocumentSettingPanel,\n} );\n```\n\n----------------------------------------\n\nTITLE: Defining Form Field Properties (JavaScript)\nDESCRIPTION: Examples of defining various properties for form fields, including ID, layout, label position, and grouping fields using children.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/dataviews/README.md#2025-04-21_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\n{\n\tid: 'field_id';\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n\tid: 'field_id',\n\tlayout: 'regular'\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n\tid: 'field_id',\n\tlabelPosition: 'none'\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n\tid: 'field_id',\n\tlabel: 'Combined Field',\n\tchildren: [ 'field1', 'field2' ]\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n\tid: 'status',\n\tlayout: 'panel',\n\tlabel: 'Combined Field',\n\tchildren: [ 'field1', 'field2' ],\n}\n```\n\n----------------------------------------\n\nTITLE: Basic UnitControl Usage Example\nDESCRIPTION: Basic implementation of UnitControl component with React useState hook to manage the value state.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/src/components/unit-control/README.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { __experimentalUnitControl as UnitControl } from '@wordpress/block-editor/';\n\nconst Example = () => {\n\tconst [ value, setValue ] = useState( '10px' );\n\n\treturn <UnitControl onChange={ setValue } value={ value } />;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing CustomSelectControl in React\nDESCRIPTION: This code snippet demonstrates how to use the CustomSelectControl component in a React application. It shows both uncontrolled and controlled usage of the component, with custom styling options for font sizes.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/custom-select-control/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { CustomSelectControl } from '@wordpress/components';\n\nconst options = [\n\t{\n\t\tkey: 'small',\n\t\tname: 'Small',\n\t\tstyle: { fontSize: '50%' },\n\t},\n\t{\n\t\tkey: 'normal',\n\t\tname: 'Normal',\n\t\tstyle: { fontSize: '100%' },\n\t},\n\t{\n\t\tkey: 'large',\n\t\tname: 'Large',\n\t\tstyle: { fontSize: '200%' },\n\t},\n\t{\n\t\tkey: 'huge',\n\t\tname: 'Huge',\n\t\tstyle: { fontSize: '300%' },\n\t},\n];\n\nfunction MyCustomSelectControl() {\n\tconst [ , setFontSize ] = useState();\n\treturn (\n\t\t<CustomSelectControl\n\t\t\t__next40pxDefaultSize\n\t\t\tlabel=\"Font Size\"\n\t\t\toptions={ options }\n\t\t\tonChange={ ( { selectedItem } ) => setFontSize( selectedItem ) }\n\t\t/>\n\t);\n}\n\nfunction MyControlledCustomSelectControl() {\n\tconst [ fontSize, setFontSize ] = useState( options[ 0 ] );\n\treturn (\n\t\t<CustomSelectControl\n\t\t\t__next40pxDefaultSize\n\t\t\tlabel=\"Font Size\"\n\t\t\toptions={ options }\n\t\t\tonChange={ ( { selectedItem } ) => setFontSize( selectedItem ) }\n\t\t\tvalue={ options.find( ( option ) => option.key === fontSize.key ) }\n\t\t/>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Color Block Support Implementation with Serialization Checks\nDESCRIPTION: This PHP snippet demonstrates an advanced implementation of color block support, including checks for block support and serialization skipping.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/style-engine/docs/using-the-style-engine-with-block-supports.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nfunction gutenberg_apply_colors_support( $block_type, $block_attributes ) {\n\t// The return value.\n\t$attributes = array();\n\n\t// Return early if the block skips all serialization for block supports.\n\tif ( gutenberg_should_skip_block_supports_serialization( $block_type, 'color' ) ) {\n\t\treturn $attributes;\n\t}\n\n\t// Checks for support and skip serialization.\n\t$has_text_support                        = block_has_support( $block_type, array( 'color', 'text' ), false );\n\t$has_background_support                  = block_has_support( $block_type, array( 'color', 'background' ), false );\n\t$skips_serialization_of_color_text       = wp_should_skip_block_supports_serialization( $block_type, 'color', 'text' );\n\t$skips_serialization_of_color_background = wp_should_skip_block_supports_serialization( $block_type, 'color', 'background' );\n\n\t// Get the color styles from the style object.\n\t$block_color_styles = isset( $block_attributes['style']['color'] ) ? $block_attributes['style']['color'] : null;\n\n\t// The mutated styles object we're going to pass to wp_style_engine_get_styles().\n\t$color_block_styles = array();\n\n\t// Set the color style values according to whether the block has support and does not skip serialization.\n\t$spacing_block_styles['text']       = null;\n\t$spacing_block_styles['background'] = null;\n\tif ( $has_text_support && ! $skips_serialization_of_color_text ) {\n\t\t$spacing_block_styles['text'] = $block_color_styles['text'] ?? null;\n\t}\n\tif $has_background_support && ! $skips_serialization_of_color_background ) {\n\t\t$spacing_block_styles['background'] = $block_color_styles['background'] ?? null;\n\t}\n\n\t// Pass the color styles, excluding those that have no support or skip serialization, to the Style Engine.\n\t$styles = wp_style_engine_get_styles( array( 'color' => $block_color_styles ) );\n\n\t// Return the generated styles to be applied to the block's HTML element.\n\treturn array(\n\t\t'style' => $styles['css'],\n\t\t'class' => $styles['classnames']\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Store Configuration for wp-style Example\nDESCRIPTION: JavaScript snippet providing a store setup for toggling context color using the wp-style directive. The context updates determine the inline style adjustments in the HTML.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/api-reference.md#2025-04-21_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nstore( 'myPlugin', {\n\tactions: {\n\t\ttoggleContextColor: () => {\n\t\t\tconst context = getContext();\n\t\t\tcontext.color = context.color === 'red' ? 'blue' : 'red';\n\t\t},\n\t},\n} );\n```\n\n----------------------------------------\n\nTITLE: Passing Props from Slot to Fill Components\nDESCRIPTION: Shows how to pass props from a Slot to its Fills using the fillProps prop on Slot and a function as children to Fill. This enables communication between components in different parts of the tree.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/slot-fill/README.md#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst { Fill, Slot } = createSlotFill( 'Toolbar' );\n\nconst ToolbarItem = () => (\n\t<Fill>\n\t\t{ ( { hideToolbar } ) => {\n\t\t\t<Button onClick={ hideToolbar }>Hide</Button>;\n\t\t} }\n\t</Fill>\n);\n\nconst Toolbar = () => {\n\tconst hideToolbar = () => {\n\t\tconsole.log( 'Hide toolbar' );\n\t};\n\treturn (\n\t\t<div className=\"toolbar\">\n\t\t\t<Slot fillProps={ { hideToolbar } } />\n\t\t</div>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Handling View Changes with onChangeView Callback\nDESCRIPTION: Illustrates the use of the onChangeView callback, which is triggered upon changes in the data view, allowing for updates in line with user actions like sorting or filtering.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/dataviews/README.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nfunction MyCustomPageTable() {\n\tconst [ view, setView ] = useState( {\n\t\ttype: 'table',\n\t\tperPage: 5,\n\t\tpage: 1,\n\t\tsort: {\n\t\t\tfield: 'date',\n\t\t\tdirection: 'desc',\n\t\t},\n\t\tsearch: '',\n\t\tfilters: [\n\t\t\t{ field: 'author', operator: 'is', value: 2 },\n\t\t\t{\n\t\t\t\tfield: 'status',\n\t\t\t\toperator: 'isAny',\n\t\t\t\tvalue: [ 'publish', 'draft' ],\n\t\t\t},\n\t\t],\n\t\ttitleField: 'title',\n\t\tfields: [ 'author', 'status' ],\n\t\tlayout: {},\n\t} );\n\n\tconst queryArgs = useMemo( () => {\n\t\tconst filters = {};\n\t\tview.filters.forEach( ( filter ) => {\n\t\t\tif ( filter.field === 'status' && filter.operator === 'isAny' ) {\n\t\t\t\tfilters.status = filter.value;\n\t\t\t}\n\t\t\tif ( filter.field === 'author' && filter.operator === 'is' ) {\n\t\t\t\tfilters.author = filter.value;\n\t\t\t}\n\t\t} );\n\t\treturn {\n\t\t\tper_page: view.perPage,\n\t\t\tpage: view.page,\n\t\t\t_embed: 'author',\n\t\t\torder: view.sort?.direction,\n\t\t\torderby: view.sort?.field,\n\t\t\tsearch: view.search,\n\t\t\t...filters,\n\t\t};\n\t}, [ view ] );\n\n\tconst { records } = useEntityRecords( 'postType', 'page', queryArgs );\n\n\treturn (\n\t\t<DataViews\n\t\t\tdata={ records }\n\t\t\tview={ view }\n\t\t\tonChangeView={ setView }\n\t\t\t// ...\n\t\t/>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Block Context in JavaScript Edit Function\nDESCRIPTION: This snippet demonstrates how to access the block context within the edit function of a Gutenberg block. The context is provided as an object parameter.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-context.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nregisterBlockType('my-plugin/record-title', {\n\n\tedit({ context }) {\n\t\treturn 'The record ID: ' + context['my-plugin/recordId'];\n\t},\n```\n\n----------------------------------------\n\nTITLE: Creating a Notice Component with BEM-style CSS classes in React JSX\nDESCRIPTION: Example implementation of a Notice component following Gutenberg's CSS naming conventions. The component demonstrates the proper structure for class naming with package and directory prefixes.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/coding-guidelines.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function Notice( { children, onRemove } ) {\n\treturn (\n\t\t<div className=\"components-notice\">\n\t\t\t<div className=\"components-notice__content\">{ children }</div>\n\t\t\t<Button\n\t\t\t\tclassName=\"components-notice__dismiss\"\n\t\t\t\ticon={ check }\n\t\t\t\tlabel={ __( 'Dismiss this notice' ) }\n\t\t\t\tonClick={ onRemove }\n\t\t\t/>\n\t\t</div>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a New Block with Vertical Alignment Control - JSX\nDESCRIPTION: This snippet shows how to register a new block type in WordPress Gutenberg with attributes for vertical alignment. It integrates the BlockVerticalAlignmentControl within the BlockControls to allow users to set the vertical alignment for the block being edited. The 'onChange' function updates the block attributes with the new alignment value.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/src/components/block-vertical-alignment-control/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { registerBlockType } from '@wordpress/blocks';\nimport {\n\tBlockControls,\n\tBlockVerticalAlignmentControl,\n\tuseBlockProps,\n} from '@wordpress/block-editor';\n\nregisterBlockType( 'my-plugin/my-block', {\n\t// ...\n\n\tattributes: {\n\t\t// other attributes here\n\t\t// ...\n\n\t\tverticalAlignment: {\n\t\t\ttype: 'string',\n\t\t},\n\t},\n\n\tedit( { attributes, setAttributes } ) {\n\t\tconst blockProps = useBlockProps();\n\n\t\tconst { verticalAlignment } = attributes;\n\n\t\t// Change handler to set Block `attributes`\n\t\tconst onChange = ( alignment ) =>\n\t\t\tsetAttributes( { verticalAlignment: alignment } );\n\n\t\treturn (\n\t\t\t<> \n\t\t\t\t<BlockControls group=\"block\">\n\t\t\t\t\t<BlockVerticalAlignmentControl\n\t\t\t\t\t\tonChange={ onChange }\n\t\t\t\t\t\tvalue={ verticalAlignment }\n\t\t\t\t\t/>\n\t\t\t\t</BlockControls>\n\t\t\t\t<div { ...blockProps }>// your Block here</div>\n\t\t\t</>\n\t\t);\n\t},\n} );\n```\n\n----------------------------------------\n\nTITLE: Memoizing LinkControl Value in React\nDESCRIPTION: This snippet demonstrates how to memoize the value prop for the <LinkControl> component to maintain internal state and avoid unwanted synchronization. It requires React and hooks such as useMemo. The main parameter is attributes, an object containing URL, type, title, and target. The function returns a memoized link value to preserve changes during user interaction. There are no additional inputs or outputs.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/src/components/link-control/README.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst memoizedValue = useMemo(\n\t() => ( {\n\t\turl: attributes.url,\n\t\ttype: attributes.type,\n\t\topensInNewTab: attributes.target === '_blank',\n\t\ttitle: attributes.text,\n\t} ),\n\t[\n\t\tattributes.url,\n\t\tattributes.type,\n\t\tattributes.target,\n\t\tattributes.text,\n\t]\n);\n\n<LinkControl\n\tvalue={ memoizedValue }\n>\n```\n\n----------------------------------------\n\nTITLE: Applying Top-Level Styles in Gutenberg\nDESCRIPTION: This JSON snippet shows how to apply a top-level style to the `body` selector using the `theme.json` file.  In this case, the text color is set to a primary color preset.  This provides a global style that affects the entire document.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/themes/global-settings-and-styles.md#2025-04-21_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"version\": 3,\n\t\"styles\": {\n\t\t\"color\": {\n\t\t\t\"text\": \"var(--wp--preset--color--primary)\"\n\t\t}\n\t}\n}\n```\n\nLANGUAGE: css\nCODE:\n```\nbody {\n\tcolor: var( --wp--preset--color--primary );\n}\n```\n\n----------------------------------------\n\nTITLE: Using ToggleGroupControlOptionIcon with ToggleGroupControl in React\nDESCRIPTION: This example demonstrates how to implement the ToggleGroupControlOptionIcon component within a ToggleGroupControl. It creates a toggle group with two icon options for text formatting (uppercase and lowercase) using icons from the WordPress icons package.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/toggle-group-control/toggle-group-control-option-icon/README.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n\t__experimentalToggleGroupControl as ToggleGroupControl,\n\t__experimentalToggleGroupControlOptionIcon as ToggleGroupControlOptionIcon,\n} from '@wordpress/components';\nimport { formatLowercase, formatUppercase } from '@wordpress/icons';\n\nfunction Example() {\n\treturn (\n\t\t<ToggleGroupControl __nextHasNoMarginBottom __next40pxDefaultSize>\n\t\t\t<ToggleGroupControlOptionIcon\n\t\t\t\tvalue=\"uppercase\"\n\t\t\t\ticon={ formatUppercase }\n\t\t\t\tlabel=\"Uppercase\"\n\t\t\t/>\n\t\t\t<ToggleGroupControlOptionIcon\n\t\t\t\tvalue=\"lowercase\"\n\t\t\t\ticon={ formatLowercase }\n\t\t\t\tlabel=\"Lowercase\"\n\t\t\t/>\n\t\t</ToggleGroupControl>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Block Collection in JavaScript\nDESCRIPTION: Shows how to register a new block collection to group blocks in the same namespace in the inserter. It includes registering the collection and a block within that collection.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/blocks/README.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { __ } from '@wordpress/i18n';\nimport { registerBlockCollection, registerBlockType } from '@wordpress/blocks';\n\n// Register the collection.\nregisterBlockCollection( 'my-collection', {\n\ttitle: __( 'Custom Collection' ),\n} );\n\n// Register a block in the same namespace to add it to the collection.\nregisterBlockType( 'my-collection/block-name', {\n\ttitle: __( 'My First Block' ),\n\tedit: () => <div>{ __( 'Hello from the editor!' ) }</div>,\n\tsave: () => <div>'Hello from the saved content!</div>,\n} );\n```\n\n----------------------------------------\n\nTITLE: Using ResizableBox Component in WordPress Block Edit Function\nDESCRIPTION: This example demonstrates how to implement the ResizableBox component within a WordPress block's edit function. It shows how to set initial dimensions, configure resize handles, and handle resize events to update block attributes.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/resizable-box/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ResizableBox } from '@wordpress/components';\n\nconst Edit = ( props ) => {\n\tconst {\n\t\tattributes: { height, width },\n\t\tsetAttributes,\n\t\ttoggleSelection,\n\t} = props;\n\n\treturn (\n\t\t<ResizableBox\n\t\t\tsize={ {\n\t\t\t\theight,\n\t\t\t\twidth,\n\t\t\t} }\n\t\t\tminHeight=\"50\"\n\t\t\tminWidth=\"50\"\n\t\t\tenable={ {\n\t\t\t\ttop: false,\n\t\t\t\tright: true,\n\t\t\t\tbottom: true,\n\t\t\t\tleft: false,\n\t\t\t\ttopRight: false,\n\t\t\t\tbottomRight: true,\n\t\t\t\tbottomLeft: false,\n\t\t\t\ttopLeft: false,\n\t\t\t} }\n\t\t\tonResizeStop={ ( event, direction, elt, delta ) => {\n\t\t\t\tsetAttributes( {\n\t\t\t\t\theight: height + delta.height,\n\t\t\t\t\twidth: width + delta.width,\n\t\t\t\t} );\n\t\t\t\ttoggleSelection( true );\n\t\t\t} }\n\t\t\tonResizeStart={ () => {\n\t\t\t\ttoggleSelection( false );\n\t\t\t} }\n\t\t/>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Selectors for Block Styles\nDESCRIPTION: Illustrates how to specify custom CSS selectors for different block features when generating styles in theme.json.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-metadata.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"selectors\": {\n\t\t\"root\": \".my-custom-block-selector\",\n\t\t\"color\": {\n\t\t\t\"text\": \".my-custom-block-selector p\"\n\t\t},\n\t\t\"typography\": {\n\t\t\t\"root\": \".my-custom-block-selector > h2\",\n\t\t\t\"text-decoration\": \".my-custom-block-selector > h2 span\"\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing React Component with DOM Mounting\nDESCRIPTION: Basic React component setup that renders a hello message and mounts it to the DOM using createRoot. Includes style import and load event listener.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/data-basics/1-data-basics-setup.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createRoot } from 'react-dom';\nimport './style.css';\n\nfunction MyFirstApp() {\n\treturn <span>Hello from JavaScript!</span>;\n}\n\nconst root = createRoot( document.getElementById( 'my-first-gutenberg-app' ) );\nwindow.addEventListener(\n\t'load',\n\tfunction () {\n\t\troot.render(\n\t\t\t<MyFirstApp />,\n\t\t);\n\t},\n\tfalse\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Controlled CustomSelectControlV2 in React\nDESCRIPTION: Shows how to use CustomSelectControlV2 in controlled mode, where the parent component manages the state. It includes state management with useState hook and custom rendering of selected values.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/custom-select-control-v2/README.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst ControlledCustomSelectControlV2 = () => {\n\tconst [ value, setValue ] = useState< string | string[] >();\n\n    const renderControlledValue = ( renderValue: string | string[] ) => (\n\t\t<>\n\t\t\t{ /* Custom JSX to display `renderValue` item */ }\n\t\t</>\n    );\n\n\treturn (\n\t\t<CustomSelectControlV2\n\t\t\t{ ...props }\n\t\t\tonChange={ ( nextValue ) => {\n\t\t\t\tsetValue( nextValue );\n\t\t\t\tprops.onChange?.( nextValue );\n\t\t\t} }\n\t\t\tvalue={ value }\n\t\t>\n\t\t\t{ [ 'blue', 'purple', 'pink' ].map( ( option ) => (\n\t\t\t\t<CustomSelectControlV2.Item key={ option } value={ option }>\n\t\t\t\t\t{ renderControlledValue( option ) }\n\t\t\t\t</CustomSelectControlV2.Item>\n\t\t\t) ) }\n\t\t</CustomSelectControlV2>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Block Hooks in JSON\nDESCRIPTION: Shows how to specify that a block should automatically insert itself next to instances of another block type.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-metadata.md#2025-04-21_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"blockHooks\": {\n\t\t\"my-plugin/banner\": \"after\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Using Truncate with Number of Lines in JSX\nDESCRIPTION: This snippet shows how the Truncate component can be configured to limit the displayed text to a certain number of lines. It demonstrates the use of the `numberOfLines` prop to set a maximum of two lines for the displayed content, thereby preventing overflow and enhancing text layout management.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/truncate/README.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { __experimentalTruncate as Truncate } from '@wordpress/components';\n\nfunction Example() {\n\treturn (\n\t\t<Truncate numberOfLines={ 2 }>\n\t\t\tWhere the north wind meets the sea, there's a river full of memory.\n\t\t\tSleep, my darling, safe and sound, for in this river all is found.\n\t\t\tIn her waters, deep and true, lay the answers and a path for you.\n\t\t\tDive down deep into her sound, but not too far or you'll be drowned\n\t\t</Truncate>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Interactivity API Features in Gutenberg Blocks (JavaScript)\nDESCRIPTION: This snippet outlines how to configure interactivity features for a block, including the `clientNavigation` and `interactive` sub-properties that dictate how the block interacts with the Interactivity API.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-supports.md#2025-04-21_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\n// Interactivity API features configuration\n\n// Example of setting up property\ninteractive: {\n\tclientNavigation: false,\n\tinteractive: false\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Sync Provider in JavaScript\nDESCRIPTION: Function to create a sync provider. It takes two parameters: connectLocal and connectRemote, both of type ConnectDoc. Returns a SyncProvider object.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/sync/README.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncreateSyncProvider(connectLocal: ConnectDoc, connectRemote: ConnectDoc): SyncProvider\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Color Palette for Group Block in Gutenberg\nDESCRIPTION: This JSON snippet demonstrates how to define a custom color palette specifically for the group block, while also providing a global color palette. This allows the group block to have a distinct set of colors available to it within the editor. The color palette consists of an array of color objects, each with a slug, color value, and name.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/themes/global-settings-and-styles.md#2025-04-21_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"version\": 3,\n\t\"settings\": {\n\t\t\"color\": {\n\t\t\t\"palette\": [\n\t\t\t\t{\n\t\t\t\t\t\"slug\": \"black\",\n\t\t\t\t\t\"color\": \"#000000\",\n\t\t\t\t\t\"name\": \"Black\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"slug\": \"white\",\n\t\t\t\t\t\"color\": \"#FFFFFF\",\n\t\t\t\t\t\"name\": \"White\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"slug\": \"red\",\n\t\t\t\t\t\"color\": \"#FF0000\",\n\t\t\t\t\t\"name\": \"Red\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"slug\": \"green\",\n\t\t\t\t\t\"color\": \"#00FF00\",\n\t\t\t\t\t\"name\": \"Green\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"slug\": \"blue\",\n\t\t\t\t\t\"color\": \"#0000FF\",\n\t\t\t\t\t\"name\": \"Blue\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"blocks\": {\n\t\t\t\"core/group\": {\n\t\t\t\t\"color\": {\n\t\t\t\t\t\"palette\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"slug\": \"black\",\n\t\t\t\t\t\t\t\"color\": \"#000000\",\n\t\t\t\t\t\t\t\"name\": \"Black\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"slug\": \"white\",\n\t\t\t\t\t\t\t\"color\": \"#FFF\",\n\t\t\t\t\t\t\t\"name\": \"White\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Frontend-only Script in JSON\nDESCRIPTION: Illustrates how to define scripts that will only be enqueued when viewing content on the front of the site.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-metadata.md#2025-04-21_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{ \"viewScript\": [ \"file:./view.js\", \"example-shared-view-script\" ] }\n```\n\n----------------------------------------\n\nTITLE: Using the speak Function from @wordpress/a11y\nDESCRIPTION: Example of how to use the speak function to announce messages to screen readers using ARIA live regions. The function accepts a message string and an optional politeness level parameter that can be set to 'polite' (default) or 'assertive'.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/a11y/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { speak } from '@wordpress/a11y';\n\n// For polite messages that shouldn't interrupt what screen readers are currently announcing.\nspeak( 'The message you want to send to the ARIA live region' );\n\n// For assertive messages that should interrupt what screen readers are currently announcing.\nspeak( 'The message you want to send to the ARIA live region', 'assertive' );\n```\n\n----------------------------------------\n\nTITLE: Using HeadingLevelDropdown in Block Controls\nDESCRIPTION: Demonstrates how to implement the HeadingLevelDropdown component within BlockControls to create a toolbar dropdown for heading level selection. The example defines available heading levels and handles state changes through the onChange callback.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/src/components/block-heading-level-dropdown/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { BlockControls, HeadingLevelDropdown } from '@wordpress/block-editor';\n\nconst HEADING_LEVELS = [ 0, 1, 2, 3, 4, 5, 6 ];\n\nconst MyHeadingLevelToolbar = () => (\n\t<BlockControls group=\"block\">\n\t\t<HeadingLevelDropdown\n\t\t\toptions={ HEADING_LEVELS }\n\t\t\tvalue={ tag }\n\t\t\tonChange={ ( newTag ) =>\n\t\t\t\tsetAttributes( { tag: newTag } )\n\t\t\t}\n\t\t/>\n\t</BlockControls>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Delete Button UI Component in React\nDESCRIPTION: Creates a PagesList component with delete functionality, including a DeletePageButton component and table structure for displaying pages.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/data-basics/5-adding-a-delete-button.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Button } from '@wordpress/components';\nimport { decodeEntities } from '@wordpress/html-entities';\n\nconst DeletePageButton = () => (\n\t<Button variant=\"primary\">\n\t\tDelete\n\t</Button>\n)\n\nfunction PagesList( { hasResolved, pages } ) {\n\tif ( ! hasResolved ) {\n\t\treturn <Spinner />;\n\t}\n\tif ( ! pages?.length ) {\n\t\treturn <div>No results</div>;\n\t}\n\n\treturn (\n\t\t<table className=\"wp-list-table widefat fixed striped table-view-list\">\n\t\t\t<thead>\n\t\t\t\t<tr>\n\t\t\t\t\t<td>Title</td>\n\t\t\t\t\t<td style={{width: 190}}>Actions</td>\n\t\t\t\t</tr>\n\t\t\t</thead>\n\t\t\t<tbody>\n\t\t\t\t{ pages?.map( ( page ) => (\n\t\t\t\t\t<tr key={page.id}>\n\t\t\t\t\t\t<td>{ decodeEntities( page.title.rendered ) }</td>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<div className=\"form-buttons\">\n\t\t\t\t\t\t\t\t<PageEditButton pageId={ page.id } />\n\t\t\t\t\t\t\t\t<DeletePageButton pageId={ page.id }/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</tr>\n\t\t\t\t) ) }\n\t\t\t</tbody>\n\t\t</table>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Heading Color Support in WordPress Gutenberg\nDESCRIPTION: This snippet demonstrates how to enable heading color support for a block in WordPress Gutenberg. It allows users to set heading text and background colors.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-supports.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nsupports: {\n\tcolor: {\n\t\t// Enable heading color support.\n\t\theading: true\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Block Collections in React Component\nDESCRIPTION: Shows how to use the getCollections selector to retrieve all available block collections. The component renders a list of collection titles.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core-blocks.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { store as blocksStore } from '@wordpress/blocks';\nimport { useSelect } from '@wordpress/data';\n\nconst ExampleComponent = () => {\n\tconst blockCollections = useSelect(\n\t\t( select ) => select( blocksStore ).getCollections(),\n\t\t[]\n\t);\n\n\treturn (\n\t\t<ul>\n\t\t\t{ Object.values( blockCollections ).length > 0 &&\n\t\t\t\tObject.values( blockCollections ).map( ( collection ) => (\n\t\t\t\t\t<li key={ collection.title }>{ collection.title }</li>\n\t\t\t\t) ) }\n\t\t</ul>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Navigator Component in React for WordPress\nDESCRIPTION: This example demonstrates how to use the Navigator component from @wordpress/components to create a simple navigation interface with home and child screens. It shows the basic structure with Navigator.Screen and navigation buttons.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/navigator/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Navigator } from '@wordpress/components';\n\nconst MyNavigation = () => (\n\t<Navigator initialPath=\"/\">\n\t\t<Navigator.Screen path=\"/\">\n\t\t\t<p>This is the home screen.</p>\n\t\t\t<Navigator.Button path=\"/child\">\n\t\t\t\tNavigate to child screen.\n\t\t\t</Navigator.Button>\n\t\t</Navigator.Screen>\n\t\t<Navigator.Screen path=\"/child\">\n\t\t\t<p>This is the child screen.</p>\n\t\t\t<Navigator.BackButton>Go back</Navigator.BackButton>\n\t\t</Navigator.Screen>\n\t</Navigator>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing TreeSelect with useState in React\nDESCRIPTION: This snippet implements a basic use of the TreeSelect component from @wordpress/components within a React functional component. It demonstrates selecting a page from a hierarchical structure with useState managing the current selection state. Dependencies include React and WordPress components. Inputs are the page selections, with outputs being the updated selection state.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/tree-select/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { TreeSelect } from '@wordpress/components';\n\nconst MyTreeSelect = () => {\n\tconst [ page, setPage ] = useState( 'p21' );\n\n\treturn (\n\t\t<TreeSelect\n\t\t\t__nextHasNoMarginBottom\n\t\t\t__next40pxDefaultSize\n\t\t\tlabel=\"Parent page\"\n\t\t\tnoOptionLabel=\"No parent page\"\n\t\t\tonChange={ ( newPage ) => setPage( newPage ) }\n\t\t\tselectedId={ page }\n\t\t\ttree={ [\n\t\t\t\t{\n\t\t\t\t\tname: 'Page 1',\n\t\t\t\t\tid: 'p1',\n\t\t\t\t\tchildren: [\n\t\t\t\t\t\t{ name: 'Descend 1 of page 1', id: 'p11' },\n\t\t\t\t\t\t{ name: 'Descend 2 of page 1', id: 'p12' },\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'Page 2',\n\t\t\t\t\tid: 'p2',\n\t\t\t\t\tchildren: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'Descend 1 of page 2',\n\t\t\t\t\t\t\tid: 'p21',\n\t\t\t\t\t\t\tchildren: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: 'Descend 1 of Descend 1 of page 2',\n\t\t\t\t\t\t\t\t\tid: 'p211',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t] }\n\t\t/>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Transforming Shortcode to Block using Attributes in JavaScript\nDESCRIPTION: This example demonstrates how to transform an existing shortcode into its block counterpart using the attributes parameter. It shows how to extract and map shortcode attributes to block attributes.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-transforms.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ntransforms: {\n    from: [\n        {\n            type: 'shortcode',\n            tag: 'youtube',\n            attributes: {\n                url: {\n                    type: 'string',\n                    source: 'attribute',\n                    attribute: 'src',\n                    selector: 'img',\n                },\n                align: {\n                    type: 'string',\n                    // The shortcode function will extract\n                    // the shortcode atts into a value\n                    // to be sourced in the block's comment.\n                    shortcode: ( { named: { align = 'alignnone' } } ) => {\n                        return align.replace( 'align', '' );\n                    },\n                },\n            },\n            // Prevent the shortcode to be converted\n            // into this block when it doesn't\n            // have the proper ID.\n            isMatch( { named: { id } } ) {\n                return id === 'my-id';\n            },\n        },\n    ]\n},\n```\n\n----------------------------------------\n\nTITLE: Saving Edited Entity Record - JavaScript\nDESCRIPTION: Saves any edits made to an entity record based on specified parameters such as kind, name, and the record ID. It may include options for saving behavior.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core.md#2025-04-21_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\nsaveEditedEntityRecord(kind, name, recordId, options) {\n  // Action triggered to save an entity record's edits.\n  // Parameters:\n  // - kind: Kind of the entity.\n  // - name: Name of the entity.\n  // - recordId: ID of the record.\n  // - options: Saving options.\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing PluginPostStatusInfo in WordPress Gutenberg (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to use the PluginPostStatusInfo component to add custom content to the Summary panel in the WordPress Gutenberg editor. It imports necessary functions from WordPress packages, creates a custom component, and registers it as a plugin.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/slotfills/plugin-post-status-info.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { registerPlugin } from '@wordpress/plugins';\nimport { PluginPostStatusInfo } from '@wordpress/editor';\n\nconst PluginPostStatusInfoTest = () => (\n\t<PluginPostStatusInfo>\n\t\t<p>Post Status Info SlotFill</p>\n\t</PluginPostStatusInfo>\n);\n\nregisterPlugin( 'post-status-info-test', { render: PluginPostStatusInfoTest } );\n```\n\n----------------------------------------\n\nTITLE: Customizing RenderAppender in InnerBlocks\nDESCRIPTION: This code snippet provides different examples of customizing the renderAppender property in InnerBlocks. It demonstrates using predefined appender components or creating a custom appender component to be used for adding new blocks within InnerBlocks. This allows for flexibility in customizing the block insertion experience.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/src/components/inner-blocks/README.md#2025-04-21_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Utilise a predefined component\n<InnerBlocks\n\trenderAppender={ InnerBlocks.ButtonBlockAppender }\n/>\n\n// Don't display an appender\n<InnerBlocks\n\trenderAppender={ false }\n/>\n\n// Fully custom\n<InnerBlocks\n\trenderAppender={ MyAmazingAppender }\n/>\n```\n\n----------------------------------------\n\nTITLE: Using withFallbackStyles HOC in React for WordPress Gutenberg\nDESCRIPTION: This snippet demonstrates how to use the withFallbackStyles higher-order component to wrap a React component. It retrieves computed styles (background color and text color) from a button element and passes them as props to the wrapped component.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/higher-order/with-fallback-styles/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { withFallbackStyles, Button } from '@wordpress/components';\n\nconst { getComputedStyle } = window;\n\nconst MyComponentWithFallbackStyles = withFallbackStyles(\n\t( node, ownProps ) => {\n\t\tconst buttonNode = node.querySelector( 'button' );\n\t\treturn {\n\t\t\tfallbackBackgroundColor: getComputedStyle( buttonNode )\n\t\t\t\t.backgroundColor,\n\t\t\tfallbackTextColor: getComputedStyle( buttonNode ).color,\n\t\t};\n\t}\n)( ( { fallbackTextColor, fallbackBackgroundColor } ) => (\n\t<div>\n\t\t<Button variant=\"primary\">My button</Button>\n\t\t<div>Text color: { fallbackTextColor }</div>\n\t\t<div>Background color: { fallbackBackgroundColor }</div>\n\t</div>\n) );\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic AnglePickerControl in React\nDESCRIPTION: Example showing how to implement the AnglePickerControl component using React hooks. Demonstrates basic usage with value state management through useState hook. The component allows users to select an angle between 0 and 360 degrees.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/angle-picker-control/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from '@wordpress/element';\nimport { AnglePickerControl } from '@wordpress/components';\n\nfunction Example() {\n  const [ angle, setAngle ] = useState( 0 );\n  return (\n    <AnglePickerControl\n      value={ angle }\n      onChange={ setAngle }\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing BlockCaption in React Component\nDESCRIPTION: Example of using the BlockCaption component with various props for rendering an editable block caption with accessibility features\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/src/components/block-caption/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { BlockCaption, RichText } from '@wordpress/block-editor';\n\nconst MyBlockCaption = (\n\tclientId,\n\tisCaptionSelected,\n\tonFocusCaption,\n\tonBlur,\n\tinsertBlocksAfter\n) => (\n\t<BlockCaption\n\t\tclientId={ clientId }\n\t\taccessible={ true }\n\t\taccessibilityLabelCreator={ ( caption ) =>\n\t\t\tRichText.isEmpty( caption )\n\t\t\t\t? 'Caption. Empty'\n\t\t\t\t: sprintf(\n\t\t\t\t\t\t/* translators: accessibility text. %s: caption. */\n\t\t\t\t\t\t__( 'Caption. %s' ),\n\t\t\t\t\t\tcaption\n\t\t\t\t  )\n\t\t}\n\t\tisSelected={ isCaptionSelected }\n\t\tonFocus={ onFocusCaption }\n\t\tonBlur={ onBlur }\n\t\tinsertBlocksAfter={ insertBlocksAfter }\n\t/>\n);\n```\n\n----------------------------------------\n\nTITLE: Registering a Keyboard Shortcut in React (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use the registerShortcut action to register a new keyboard shortcut and verify its registration.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core-keyboard-shortcuts.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useEffect } from 'react';\nimport { store as keyboardShortcutsStore } from '@wordpress/keyboard-shortcuts';\nimport { useSelect, useDispatch } from '@wordpress/data';\nimport { __ } from '@wordpress/i18n';\n\nconst ExampleComponent = () => {\n\tconst { registerShortcut } = useDispatch( keyboardShortcutsStore );\n\n\tuseEffect( () => {\n\t\tregisterShortcut( {\n\t\t\tname: 'custom/my-custom-shortcut',\n\t\t\tcategory: 'my-category',\n\t\t\tdescription: __( 'My custom shortcut' ),\n\t\t\tkeyCombination: {\n\t\t\t\tmodifier: 'primary',\n\t\t\t\tcharacter: 'j',\n\t\t\t},\n\t\t} );\n\t}, [] );\n\n\tconst shortcut = useSelect(\n\t\t( select ) =>\n\t\t\tselect( keyboardShortcutsStore ).getShortcutKeyCombination(\n\t\t\t\t'custom/my-custom-shortcut'\n\t\t\t),\n\t\t[]\n\t);\n\n\treturn shortcut ? (\n\t\t<p>{ __( 'Shortcut is registered.' ) }</p>\n\t) : (\n\t\t<p>{ __( 'Shortcut is not registered.' ) }</p>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Extracting URL Components in JavaScript\nDESCRIPTION: Shows examples of functions that extract specific components from a URL, such as authority, filename, fragment, path, and protocol. These are useful for URL parsing and manipulation.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/url/README.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst authority1 = getAuthority( 'https://wordpress.org/help/' ); // 'wordpress.org'\nconst authority2 = getAuthority( 'https://localhost:8080/test/' ); // 'localhost:8080'\n\nconst filename1 = getFilename( 'http://localhost:8080/this/is/a/test.jpg' ); // 'test.jpg'\nconst filename2 = getFilename( '/this/is/a/test.png' ); // 'test.png'\n\nconst fragment1 = getFragment(\n\t'http://localhost:8080/this/is/a/test?query=true#fragment'\n); // '#fragment'\nconst fragment2 = getFragment(\n\t'https://wordpress.org#another-fragment?query=true'\n); // '#another-fragment'\n\nconst path1 = getPath( 'http://localhost:8080/this/is/a/test?query=true' ); // 'this/is/a/test'\nconst path2 = getPath( 'https://wordpress.org/help/faq/' ); // 'help/faq'\n\nconst protocol1 = getProtocol( 'tel:012345678' ); // 'tel:'\nconst protocol2 = getProtocol( 'https://wordpress.org' ); // 'https:'\n```\n\n----------------------------------------\n\nTITLE: Block Dragging Actions (startDraggingBlocks, stopDraggingBlocks)\nDESCRIPTION: Actions for handling the start and stop of block dragging operations. startDraggingBlocks takes an array of block client IDs being dragged, while stopDraggingBlocks signals the end of dragging.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core-block-editor.md#2025-04-21_snippet_19\n\n\n\n----------------------------------------\n\nTITLE: Defining Block Attributes in JSON\nDESCRIPTION: Example of defining three attributes (fallbackCurrentYear, showStartingYear, and startingYear) in a block.json file. This demonstrates how to specify data types and structure for block attributes.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/getting-started/fundamentals/block-json.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"attributes\": {\n\t\"fallbackCurrentYear\": {\n\t\t\"type\": \"string\"\n\t},\n\t\"showStartingYear\": {\n\t\t\"type\": \"boolean\"\n\t},\n\t\"startingYear\": {\n\t\t\"type\": \"string\"\n\t}\n},\n```\n\n----------------------------------------\n\nTITLE: Disabling Renaming Permission in Gutenberg Blocks (JavaScript)\nDESCRIPTION: This snippet disables the ability for users to rename the block using the block options or advanced panel by setting `renaming` to false.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-supports.md#2025-04-21_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nsupports: {\n\t// Don't allow the block to be renamed in the editor.\n\trenaming: false,\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Selection in CustomSelectControlV2\nDESCRIPTION: Demonstrates how to enable multiple selection in CustomSelectControlV2 by using an array for the defaultValue prop. It also shows how to map over an array to create multiple select items.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/custom-select-control-v2/README.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst MultiSelectCustomSelectControlV2 = () => (\n\t<CustomSelectControlV2 defaultValue={ [ 'blue', 'pink' ] } label=\"Colors\">\n\t\t{ [ 'blue', 'purple', 'pink' ].map( ( item ) => (\n\t\t\t<CustomSelectControlV2.Item key={ item } value={ item }>\n\t\t\t\t{ item }\n\t\t\t</CustomSelectControlV2.Item>\n\t\t) ) }\n\t</CustomSelectControlV2>\n);\n```\n\n----------------------------------------\n\nTITLE: Enqueuing CSS Styles for Custom Block Editor in WordPress\nDESCRIPTION: This PHP code enqueues both WordPress default formatting library styles and custom CSS styles for the block editor. It uses wp_enqueue_style() to register the styles with appropriate handles and dependencies.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/platform/custom-block-editor.md#2025-04-21_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n// Enqueue default editor styles.\nwp_enqueue_style( 'wp-format-library' );\n\n// Enqueue custom styles.\nwp_enqueue_style(\n    'getdave-sbe-styles',                       // Handle\n    plugins_url( 'build/index.css', __FILE__ ), // Block editor CSS\n    array( 'wp-edit-blocks' ),                  // Dependency to include the CSS after it\n    filemtime( __DIR__ . '/build/index.css' )\n);\n```\n\n----------------------------------------\n\nTITLE: Using BaseControl.VisualLabel for Accessible Button Labels\nDESCRIPTION: Shows how to use BaseControl.VisualLabel subcomponent to add visual labels to already accessibly labeled elements like buttons. Includes help text and proper component structure.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/base-control/README.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { BaseControl } from '@wordpress/components';\n\nconst MyBaseControl = () => (\n\t<BaseControl\n\t\t__nextHasNoMarginBottom\n\t\thelp=\"This button is already accessibly labeled.\"\n\t>\n\t\t<BaseControl.VisualLabel>Author</BaseControl.VisualLabel>\n\t\t<Button>Select an author</Button>\n\t</BaseControl>\n);\n```\n\n----------------------------------------\n\nTITLE: Connecting to IndexedDB Persistence Provider in JavaScript\nDESCRIPTION: Function to connect to the IndexedDB persistence provider. It takes an object ID, object type, and CRDT document as parameters and returns a Promise that resolves when the connection is established.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/sync/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconnectIndexDb(objectId: ObjectID, objectType: ObjectType, doc: CRDTDoc): Promise<() => void>\n```\n\n----------------------------------------\n\nTITLE: Importing and Using UngroupButton Component in React JSX\nDESCRIPTION: This snippet demonstrates how to import the UngroupButton component from the @wordpress/block-editor package and use it in a React component. The UngroupButton is rendered as a standalone component.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/src/components/ungroup-button/README.md#2025-04-21_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport { UngroupButton } from '@wordpress/block-editor';\n\nconst MyUngroupButton = () => <UngroupButton />;\n```\n\n----------------------------------------\n\nTITLE: Adding Loading State to Delete Button\nDESCRIPTION: Enhances the delete button with loading state feedback using isDeletingEntityRecord selector.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/data-basics/5-adding-a-delete-button.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst DeletePageButton = ({ pageId }) => {\n\tconst { isDeleting } = useSelect(\n\t\tselect => ({\n\t\t\tisDeleting: select( coreDataStore ).isDeletingEntityRecord( 'postType', 'page', pageId ),\n\t\t}),\n\t\t[ pageId ]\n\t)\n\treturn (\n\t\t<Button variant=\"primary\" onClick={ handleDelete } disabled={ isDeleting }>\n\t\t\t{ isDeleting ? (\n\t\t\t\t<>\n\t\t\t\t\t<Spinner />\n\t\t\t\t\tDeleting...\n\t\t\t\t</>\n\t\t\t) : 'Delete' }\n\t\t</Button>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Block Support using hasBlockSupport\nDESCRIPTION: This code snippet demonstrates how to determine if a specific block supports a given feature using `hasBlockSupport` selector. Specifically, it checks if the 'core/paragraph' block supports the 'className' feature and renders the result as a boolean within a paragraph element.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core-blocks.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport { __, sprintf } from '@wordpress/i18n';\nimport { store as blocksStore } from '@wordpress/blocks';\nimport { useSelect } from '@wordpress/data';\n\nconst ExampleComponent = () => {\n    const paragraphBlockSupportClassName = useSelect( ( select ) =>\n        select( blocksStore ).hasBlockSupport( 'core/paragraph', 'className' ),\n        []\n    );\n\n    return (\n        <p>\n            { sprintf(\n                __( 'core/paragraph supports custom class name?: %s' ),\n                paragraphBlockSupportClassName\n            ) }\n        /p>\n    );\n};\n\n```\n\n----------------------------------------\n\nTITLE: Modifying Editor Settings with Custom Styles\nDESCRIPTION: Example of using block_editor_settings_all filter to add custom styles directly to the editor settings, setting paragraph text color to green.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/enqueueing-assets-in-the-editor.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Modify the Editor settings by adding custom styles.\n *\n * @param array  $editor_settings An array containing the current Editor settings.\n * @param string $editor_context  The context of the editor.\n *\n * @return array Modified editor settings with the added custom CSS style.\n */\nfunction example_modify_editor_settings( $editor_settings, $editor_context ) {\n    $editor_settings[\"styles\"][] = array(\n        \"css\" => 'p { color: green }'\n    );\n\n    return $editor_settings;\n}\nadd_filter( 'block_editor_settings_all', 'example_modify_editor_settings', 10,2 );\n```\n\n----------------------------------------\n\nTITLE: Creating a Private Store with Lock Option - JavaScript\nDESCRIPTION: This snippet demonstrates how to create a private store by using the store() function with a lock option to restrict access to its content. Attempting to invoke store() with the same locked namespace results in an error, enhancing plugin security.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/api-reference.md#2025-04-21_snippet_37\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { state } = store(\n\t'myPlugin/private',\n\t{ state: { messages: [ 'private message' ] } },\n\t{ lock: true }\n);\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// The following call throws an Error!\nstore( 'myPlugin/private', {\n\t/* store part */\n} );\n```\n\n----------------------------------------\n\nTITLE: Rendering URLInputButton in a WordPress Block\nDESCRIPTION: This snippet demonstrates how to use the URLInputButton component within a WordPress block registration. It shows setting up attributes, using the component in the edit function, and creating a simple anchor tag in the save function.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/src/components/url-input/README.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { registerBlockType } from '@wordpress/blocks';\nimport { URLInputButton } from '@wordpress/block-editor';\n\nregisterBlockType( /* ... */, {\n\t// ...\n\n\tattributes: {\n\t\turl: {\n\t\t\ttype: 'string',\n\t\t},\n\t\ttext: {\n\t\t\ttype: 'string',\n\t\t},\n\t},\n\n\tedit( { className, attributes, setAttributes } ) {\n\t\treturn (\n\t\t\t<URLInputButton\n\t\t\t\turl={ attributes.url }\n\t\t\t\tonChange={ ( url, post ) => setAttributes( { url, text: (post && post.title) || 'Click here' } ) }\n\t\t\t/>\n\t\t);\n\t},\n\n\tsave( { attributes } ) {\n\t\treturn <a href={ attributes.url }>{ attributes.text }</a>;\n\t}\n} );\n```\n\n----------------------------------------\n\nTITLE: Defining Compose Function in JavaScript\nDESCRIPTION: Defines a simple compose function using two functions, inspired by lodash's 'flowRight'. It allows the composition of two functions where the result of the second function is passed to the first function.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/compose/README.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst compose = ( f, g ) => x\n    => f( g( x ) );\n```\n\n----------------------------------------\n\nTITLE: Configuring Block Editor Settings with theme.json in WordPress\nDESCRIPTION: This JSON snippet demonstrates how to configure various block editor settings using theme.json. It includes settings for colors, typography, spacing, and block-specific configurations.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/themes/global-settings-and-styles.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"version\": 3,\n\t\"settings\": {\n\t\t\"color\": {\n\t\t\t\"duotone\": [\n\t\t\t\t{\n\t\t\t\t\t\"colors\": [ \"#000\", \"#FFF\" ],\n\t\t\t\t\t\"slug\": \"black-and-white\",\n\t\t\t\t\t\"name\": \"Black and White\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"gradients\": [\n\t\t\t\t{\n\t\t\t\t\t\"slug\": \"blush-bordeaux\",\n\t\t\t\t\t\"gradient\": \"linear-gradient(135deg,rgb(254,205,165) 0%,rgb(254,45,45) 50%,rgb(107,0,62) 100%)\",\n\t\t\t\t\t\"name\": \"Blush bordeaux\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"slug\": \"blush-light-purple\",\n\t\t\t\t\t\"gradient\": \"linear-gradient(135deg,rgb(255,206,236) 0%,rgb(152,150,240) 100%)\",\n\t\t\t\t\t\"name\": \"Blush light purple\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"palette\": [\n\t\t\t\t{\n\t\t\t\t\t\"slug\": \"strong-magenta\",\n\t\t\t\t\t\"color\": \"#a156b4\",\n\t\t\t\t\t\"name\": \"Strong magenta\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"slug\": \"very-dark-grey\",\n\t\t\t\t\t\"color\": \"rgb(131, 12, 8)\",\n\t\t\t\t\t\"name\": \"Very dark grey\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"typography\": {\n\t\t\t\"fontFamilies\": [\n\t\t\t\t{\n\t\t\t\t\t\"fontFamily\": \"-apple-system,BlinkMacSystemFont,\\\"Segoe UI\\\",Roboto,Oxygen-Sans,Ubuntu,Cantarell, \\\"Helvetica Neue\\\",sans-serif\",\n\t\t\t\t\t\"slug\": \"system-font\",\n\t\t\t\t\t\"name\": \"System Font\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"fontFamily\": \"Helvetica Neue, Helvetica, Arial, sans-serif\",\n\t\t\t\t\t\"slug\": \"helvetica-arial\",\n\t\t\t\t\t\"name\": \"Helvetica or Arial\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"fontSizes\": [\n\t\t\t\t{\n\t\t\t\t\t\"slug\": \"big\",\n\t\t\t\t\t\"size\": 32,\n\t\t\t\t\t\"name\": \"Big\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"slug\": \"x-large\",\n\t\t\t\t\t\"size\": 46,\n\t\t\t\t\t\"name\": \"Large\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"spacing\": {\n\t\t\t\"spacingScale\": {\n\t\t\t\t\"operator\": \"*\",\n\t\t\t\t\"increment\": 1.5,\n\t\t\t\t\"steps\": 7,\n\t\t\t\t\"mediumStep\": 1.5,\n\t\t\t\t\"unit\": \"rem\"\n\t\t\t},\n\t\t\t\"spacingSizes\": [\n\t\t\t\t{\n\t\t\t\t\t\"slug\": \"40\",\n\t\t\t\t\t\"size\": \"1rem\",\n\t\t\t\t\t\"name\": \"Small\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"slug\": \"50\",\n\t\t\t\t\t\"size\": \"1.5rem\",\n\t\t\t\t\t\"name\": \"Medium\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"slug\": \"60\",\n\t\t\t\t\t\"size\": \"2rem\",\n\t\t\t\t\t\"name\": \"Large\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"blocks\": {\n\t\t\t\"core/group\": {\n\t\t\t\t\"color\": {\n\t\t\t\t\t\"palette\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"slug\": \"black\",\n\t\t\t\t\t\t\t\"color\": \"#000000\",\n\t\t\t\t\t\t\t\"name\": \"Black\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"slug\": \"white\",\n\t\t\t\t\t\t\t\"color\": \"#ffffff\",\n\t\t\t\t\t\t\t\"name\": \"White\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Adding custom wrapper property to BlockListBlock\nDESCRIPTION: This JavaScript snippet demonstrates how to add a new property to the block's wrapper component using the `wrapperProps` property of the returned component. It utilizes the `editor.BlockListBlock` filter and `createHigherOrderComponent` from `wp.compose`.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/filters/block-filters.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst { createHigherOrderComponent } = wp.compose;\nconst withMyWrapperProp = createHigherOrderComponent( ( BlockListBlock ) => {\n\treturn ( props ) => {\n\t\tconst wrapperProps = {\n\t\t\t...props.wrapperProps,\n\t\t\t'data-my-property': 'the-value',\n\t\t};\n\t\treturn <BlockListBlock { ...props } wrapperProps={ wrapperProps } />;\n\t};\n}, 'withMyWrapperProp' );\n\nwp.hooks.addFilter(\n\t'editor.BlockListBlock',\n\t'my-plugin/with-my-wrapper-prop',\n\twithMyWrapperProp\n);\n\n```\n\n----------------------------------------\n\nTITLE: Compiling CSS Stylesheet from Rules in PHP\nDESCRIPTION: Shows how to use wp_style_engine_get_stylesheet_from_css_rules() to compile a CSS stylesheet from an array of CSS rules. This function can merge declarations and combine selectors.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/style-engine/README.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$styles = array(\n    array(\n        'selector'     => '.wp-pumpkin',\n        'declarations' => array( 'color' => 'orange' )\n    ),\n    array(\n        'selector'     => '.wp-tomato',\n        'declarations' => array( 'color' => 'red' )\n    ),\n    array(\n        'selector'     => '.wp-tomato',\n        'declarations' => array( 'padding' => '100px' )\n    ),\n);\n\n$stylesheet = wp_style_engine_get_stylesheet_from_css_rules(\n    $styles,\n    array(\n        'context' => 'block-supports', // Indicates that these styles should be stored with block supports CSS.\n    )\n);\nprint_r( $stylesheet ); // .wp-pumpkin{color:orange}.wp-tomato{color:red;padding:100px}\n```\n\n----------------------------------------\n\nTITLE: Implementing Media Upload Functionality\nDESCRIPTION: Example implementation of a mediaUpload function that enables file uploads for media blocks. This function processes files, uploads them via an API call, and returns media objects with metadata.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/platform-docs/docs/basic-concepts/settings.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nasync function mediaUpload( {\n\tadditionalData = {},\n\tfilesList,\n\tonError = noop,\n\tonFileChange,\n} ) {\n\tconst uploadedMedia = [];\n\tfor ( const file of filesList ) {\n\t\ttry {\n\t\t\tconst data = await someApiCallToUploadTheFile( file );\n\t\t\tconst mediaObject = {\n\t\t\t\talt: data.alt,\n\t\t\t\tcaption: data.caption,\n\t\t\t\ttitle: data.title,\n\t\t\t\turl: data.url,\n\t\t\t};\n\t\t\tuploadedMedia.push( mediaObject );\n\t\t} catch ( error ) {\n\t\t\tonError( {\n\t\t\t\tcode: 'SOME_ERROR_CODE',\n\t\t\t\tmessage:\n\t\t\t\t\tmediaFile.name +\n\t\t\t\t\t' : Sorry, an error happened while uploading this file.',\n\t\t\t\tfile: mediaFile,\n\t\t\t} );\n\t\t}\n\t\tif ( uploadedMedia.length ) {\n\t\t\tonFileChange( uploadedMedia );\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Using BorderRadiusControl Component in React\nDESCRIPTION: This snippet demonstrates the usage of the BorderRadiusControl component from the WordPress block editor. It initializes the component with state management to handle individual corner radius values and updates them on change. The values object holds the border radius values for each corner, and the onChange callback updates the state accordingly. Dependencies required include WordPress dependencies for block-editor and element.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/src/components/border-radius-control/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// WordPress dependencies\nimport { __experimentalBorderRadiusControl as BorderRadiusControl } from '@wordpress/block-editor';\nimport { useState } from '@wordpress/element';\n\nconst MyBorderRadiusControl = () => {\n    const [values, setValues] = useState({\n        topLeft: '10px',\n        topRight: '10px',\n        bottomLeft: '10px',\n        bottomRight: '10px',\n    });\n\n    return (\n        <BorderRadiusControl\n            values={values}\n            onChange={setValues}\n        />\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Registering WordPress Script with i18n Dependencies\nDESCRIPTION: Demonstrates how to register a JavaScript file with the wp-i18n dependency and set up a basic block type in PHP.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/internationalization.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * Plugin Name: Myguten Plugin\n * Text Domain: myguten\n */\nfunction myguten_block_init() {\n    wp_register_script(\n        'myguten-script',\n        plugins_url( 'block.js', __FILE__ ),\n        array( 'wp-blocks', 'react', 'wp-i18n', 'wp-block-editor' )\n    );\n\n    register_block_type( 'myguten/simple', array(\n\t\tapi_version => 3,\n        'editor_script' => 'myguten-script',\n    ) );\n}\nadd_action( 'init', 'myguten_block_init' );\n```\n\n----------------------------------------\n\nTITLE: Generating Instance ID with useInstanceId in React JSX\nDESCRIPTION: This code snippet demonstrates how to use the `useInstanceId` hook from `@wordpress/compose` to generate a unique ID for each instance of a functional component. The generated `instanceId` is then used to create a unique `id` attribute for a `div` element. This ensures that each instance of `MyCustomElement` has a distinct ID.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/compose/src/hooks/use-instance-id/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n/**\n * WordPress dependencies\n */\nimport { useInstanceId } from '@wordpress/compose';\n\nfunction MyCustomElement() {\n\tconst instanceId = useInstanceId( MyCustomElement );\n\treturn <div id={ `my-custom-element-${ instanceId }` }>content</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Flex Component in WordPress Gutenberg\nDESCRIPTION: Demonstrates basic usage of Flex with FlexItem and FlexBlock components, showing how to import and structure a flexible layout with child elements.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/flex/flex/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Flex, FlexBlock, FlexItem } from '@wordpress/components';\n\nfunction Example() {\n\treturn (\n\t\t<Flex>\n\t\t\t<FlexItem>\n\t\t\t\t<p>Code</p>\n\t\t\t</FlexItem>\n\t\t\t<FlexBlock>\n\t\t\t\t<p>Poetry</p>\n\t\t\t</FlexBlock>\n\t\t</Flex>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Add Post to Todo Store in TypeScript\nDESCRIPTION: Defines TypeScript types and implements functionality for adding posts to the todo list\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/core-concepts/using-typescript.md#2025-04-21_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\n// add-post-to-todo-block/view.ts\ntype ServerState = {\n\tstate: {\n\t\tpostTitle: string;\n\t};\n};\n\nconst addPostToTodo = {\n\tactions: {\n\t\taddPostToTodo() {\n\t\t\tconst todo = `Read: ${ state.postTitle }`.trim();\n\t\t\tif ( ! state.todos.includes( todo ) ) {\n\t\t\t\tactions.addTodo( todo );\n\t\t\t}\n\t\t},\n\t},\n};\n\n// Merges the inferred types with the server state types.\ntype Store = ServerState & typeof addPostToTodo;\n\n// Injects the final types when calling the `store` function.\nconst { state, actions } = store< Store >( 'myTodoPlugin', addPostToTodo );\n```\n\n----------------------------------------\n\nTITLE: Complete Asset Configuration in block.json\nDESCRIPTION: Comprehensive example showing how to configure all types of assets in block.json, including scripts, modules, and styles with both file paths and registered handles.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-metadata.md#2025-04-21_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"editorScript\": \"file:./index.js\",\n\t\"script\": \"file:./script.js\",\n\t\"viewScriptModule\": [\n\t\t\"file:./view.js\",\n\t\t\"example-registered-script-module-id\"\n\t],\n\t\"editorStyle\": \"file:./index.css\",\n\t\"style\": [ \"file:./style.css\", \"example-shared-style\" ],\n\t\"viewStyle\": [ \"file:./view.css\", \"example-view-style\" ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SandBox Component in React (WordPress Gutenberg)\nDESCRIPTION: Example of importing and using the SandBox component from @wordpress/components to create an isolated iframe environment. This snippet demonstrates basic usage with html content, title and type props.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/sandbox/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { SandBox } from '@wordpress/components';\n\nconst MySandBox = () => (\n\t<SandBox html=\"<p>Content</p>\" title=\"SandBox\" type=\"embed\" />\n);\n```\n\n----------------------------------------\n\nTITLE: Using WordPress Data Plugins\nDESCRIPTION: This snippet demonstrates how to use a plugin (specifically `persistence`) with the WordPress data module, both using npm and WordPress globals. The `use` method is called to incorporate the plugin's behaviors into the data registry. This assumes the `@wordpress/data` package is available.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/data/src/plugins/README.md#2025-04-21_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n// npm Usage\nimport { plugins, use } from '@wordpress/data';\nuse( plugins.persistence );\n\n// WordPress Globals Usage\nwp.data.use( wp.data.plugins.persistence );\n```\n\n----------------------------------------\n\nTITLE: Defining Editor Component Structure in React\nDESCRIPTION: This code defines the structure of the main Editor component. It includes various sub-components like Notices, Header, Sidebar, and BlockEditor, wrapped in a DropZoneProvider for drag-and-drop functionality.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/platform/custom-block-editor.md#2025-04-21_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Editor( { settings } ) {\n\treturn (\n\t\t<DropZoneProvider>\n\t\t\t<div className=\"getdavesbe-block-editor-layout\">\n\t\t\t\t<Notices />\n\t\t\t\t<Header />\n\t\t\t\t<Sidebar />\n\t\t\t\t<BlockEditor settings={ settings } />\n\t\t\t</div>\n\t\t</DropZoneProvider>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Context with wp-context in PHP\nDESCRIPTION: This example demonstrates using the wp-context directive to define a local state accessible by a DOM node and its children. The context is set via stringified JSON, where PHP can dynamically inject values, such as post data.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/api-reference.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<div data-wp-context='{ \"post\": { \"id\": <?php echo $post->ID; ?> } }' >\n  <button data-wp-on--click=\"actions.logId\" >\n    Click Me!\n  </button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: block.json Script Field Example\nDESCRIPTION: This JSON snippet shows an example of the script fields within a `block.json` file.  These fields define the relative paths to the JavaScript files used for the editor, frontend script, and view script, enabling automatic entry point detection during the build process.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/scripts/README.md#2025-04-21_snippet_20\n\nLANGUAGE: JSON\nCODE:\n```\n{\n\t\"editorScript\": \"file:index.js\",\n\t\"script\": \"file:script.js\",\n\t\"viewScript\": \"file:view.js\"\n}\n```\n\n----------------------------------------\n\nTITLE: PHP: Serializing Ajax URL and Nonce\nDESCRIPTION: Serializes the AJAX URL (`admin_url( 'admin-ajax.php' )`) and a nonce (`wp_create_nonce( 'myPlugin_nonce' )`) from PHP to the client-side state using `wp_interactivity_state`. This allows JavaScript actions to securely make AJAX requests.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/core-concepts/server-side-rendering.md#2025-04-21_snippet_29\n\nLANGUAGE: php\nCODE:\n```\nwp_interactivity_state( 'myPlugin', array(\n  'ajaxUrl' => admin_url( 'admin-ajax.php' ),\n  'nonce'   => wp_create_nonce( 'myPlugin_nonce' ),\n));\n```\n\n----------------------------------------\n\nTITLE: Ensuring Scope with withScope() - JavaScript\nDESCRIPTION: The withScope() function is utilized to maintain the correct scope within callback functions, particularly when invoked outside the automatic scope management of the runtime. This is pertinent for operations like setInterval() where continuity of state is crucial.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/api-reference.md#2025-04-21_snippet_43\n\nLANGUAGE: JavaScript\nCODE:\n```\nstore( 'mySliderPlugin', {\n\tcallbacks: {\n\t\tinitSlideShow: () => {\n\t\t\tsetInterval(\n\t\t\t\twithScope( () => {\n\t\t\t\t\tactions.nextImage();\n\t\t\t\t} ),\n\t\t\t\t3_000\n\t\t\t);\n\t\t},\n\t},\n} );\n```\n\n----------------------------------------\n\nTITLE: Using DimensionControl Component\nDESCRIPTION: This code snippet demonstrates how to use the `DimensionControl` component from `@wordpress/components`. It initializes a state variable `paddingSize` using `useState` and renders the `DimensionControl` component, passing in props such as `label`, `icon`, `onChange`, and `value`. The `onChange` function updates the `paddingSize` state when a new value is selected.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/dimension-control/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { __experimentalDimensionControl as DimensionControl } from '@wordpress/components';\n\nexport default function MyCustomDimensionControl() {\n\tconst [ paddingSize, setPaddingSize ] = useState( '' );\n\n\treturn (\n\t\t<DimensionControl\n\t\t\t__nextHasNoMarginBottom\n\t\t\t__next40pxDefaultSize\n\t\t\tlabel={ 'Padding' }\n\t\t\ticon={ 'desktop' }\n\t\t\tonChange={ ( value ) => setPaddingSize( value ) }\n\t\t\tvalue={ paddingSize }\n\t\t/>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Post Object Structure for URLInput and URLInputButton\nDESCRIPTION: This JSON snippet shows the structure of the post object that is passed as the second parameter to the onChange function when a user selects a post from the suggestions dropdown in URLInput or URLInputButton components.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/src/components/url-input/README.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"id\": 1,\n\t\"subtype\": \"page\",\n\t\"title\": \"Sample Page\",\n\t\"type\": \"post\",\n\t\"url\": \"https://example.com/sample-page/\",\n\t\"_links\": {\n\t\t\"self\": [\n\t\t\t{\n\t\t\t\t\"embeddable\": true,\n\t\t\t\t\"href\": \"https://example.com/wp-json/wp/v2/pages/1\"\n\t\t\t}\n\t\t],\n\t\t\"about\": [ { \"href\": \"https://example.com/wp-json/wp/v2/types/page\" } ],\n\t\t\"collection\": [ { \"href\": \"https://example.com/wp-json/wp/v2/search\" } ]\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Using AlignmentMatrixControl Component in React\nDESCRIPTION: Example implementation of the AlignmentMatrixControl component using React hooks. Demonstrates basic usage with state management for alignment values using useState hook.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/alignment-matrix-control/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { AlignmentMatrixControl } from '@wordpress/components';\nimport { useState } from '@wordpress/element';\n\nconst Example = () => {\n\tconst [ alignment, setAlignment ] = useState( 'center center' );\n\n\treturn (\n\t\t<AlignmentMatrixControl\n\t\t\tvalue={ alignment }\n\t\t\tonChange={ setAlignment }\n\t\t/>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Inspector controls to all blocks\nDESCRIPTION: This JavaScript snippet adds a new Inspector panel to all blocks using the `editor.BlockEdit` filter. It uses `createHigherOrderComponent` from `wp.compose` to wrap the original `BlockEdit` component and add the custom InspectorControls component.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/filters/block-filters.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst { createHigherOrderComponent } = wp.compose;\nconst { InspectorControls } = wp.blockEditor;\nconst { PanelBody } = wp.components;\n\nconst withMyPluginControls = createHigherOrderComponent( ( BlockEdit ) => {\n\treturn ( props ) => {\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<BlockEdit key=\"edit\" { ...props } />\n\t\t\t\t<InspectorControls>\n\t\t\t\t\t<PanelBody>My custom control</PanelBody>\n\t\t\t\t</InspectorControls>\n\t\t\t</>\n\t\t);\n\t};\n}, 'withMyPluginControls' );\n\nwp.hooks.addFilter(\n\t'editor.BlockEdit',\n\t'my-plugin/with-inspector-controls',\n\twithMyPluginControls\n);\n\n```\n\n----------------------------------------\n\nTITLE: Typography Style Attributes Example\nDESCRIPTION: Shows the structure of style attributes for typography settings including fontSize configuration.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-supports.md#2025-04-21_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\nattributes: {\n    style: {\n        type: 'object',\n        default: {\n            typography: {\n                fontSize: 'value'\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Toggling WordPress Editor Panels Programmatically with useDispatch\nDESCRIPTION: This snippet shows how to programmatically toggle editor panels open or closed using the useDispatch hook with the editor store. It demonstrates toggling both a core WordPress panel (post-status) and a custom panel created through the PluginDocumentSettingPanel component.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/slotfills/plugin-document-setting-panel.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useDispatch } from '@wordpress/data';\nimport { store as editorStore } from '@wordpress/editor';\n\nconst Example = () => {\n\tconst { toggleEditorPanelOpened } = useDispatch( editorStore );\n\treturn (\n\t\t<Button\n\t\t\tvariant=\"primary\"\n\t\t\tonClick={ () => {\n\t\t\t\t// Toggle the Summary panel\n\t\t\t\ttoggleEditorPanelOpened( 'post-status' );\n\n\t\t\t\t// Toggle the Custom Panel introduced in the example above.\n\t\t\t\ttoggleEditorPanelOpened(\n\t\t\t\t\t'plugin-document-setting-panel-demo/custom-panel'\n\t\t\t\t);\n\t\t\t} }\n\t\t>\n\t\t\tToggle Panels\n\t\t</Button>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Restricting SlotFill Content to Post Editor in WordPress\nDESCRIPTION: Shows how to conditionally render a SlotFill component only in the Post Editor context by checking if the current post type is viewable. This approach prevents the component from appearing in the Site Editor.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/slotfills/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * WordPress dependencies\n */\nimport { registerPlugin } from '@wordpress/plugins';\nimport {\n\tPluginDocumentSettingPanel,\n\tstore as editorStore,\n} from '@wordpress/editor';\nimport { store as coreStore } from '@wordpress/core-data';\nimport { useSelect } from '@wordpress/data';\nimport { __ } from '@wordpress/i18n';\n\n/**\n * The component to be rendered  as part of the plugin.\n */\nconst EditPostDocumentSettingPanel = () => {\n\t// Retrieve information about the current post type.\n\tconst isViewable = useSelect( ( select ) => {\n\t\tconst postTypeName = select( editorStore ).getCurrentPostType();\n\t\tconst postTypeObject = select( coreStore ).getPostType( postTypeName );\n\t\treturn postTypeObject?.viewable;\n\t}, [] );\n\n\t// If the post type is not viewable, then do not render my the fill.\n\tif ( ! isViewable ) {\n\t\treturn null;\n\t}\n\n\treturn (\n\t\t<PluginDocumentSettingPanel\n\t\t\tname=\"custom-panel\"\n\t\t\ttitle={ __( 'Post Editor Example' ) }\n\t\t\tclassName=\"custom-panel\"\n\t\t>\n\t\t\t<p>{ __( 'Only appears in the Edit Post screen' ) }</p>\n\t\t</PluginDocumentSettingPanel>\n\t);\n};\n\nregisterPlugin( 'example-post-edit-only', {\n\trender: EditPostDocumentSettingPanel,\n} );\n```\n\n----------------------------------------\n\nTITLE: ToolbarItem Usage with `render` Prop\nDESCRIPTION: This example showcases how to use the `render` prop (passing children as a function) of the `ToolbarItem` component to gain access to the ToolbarItem props. These props can be then passed to another component, such as `DropdownMenu`. It utilizes `Toolbar`, `ToolbarItem`, and `DropdownMenu` from `@wordpress/components` and `table` from `@wordpress/icons`.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/toolbar/toolbar-item/README.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Toolbar, ToolbarItem, DropdownMenu } from '@wordpress/components';\nimport { table } from '@wordpress/icons';\n\nfunction MyToolbar() {\n\treturn (\n\t\t<Toolbar label=\"Options\">\n\t\t\t<ToolbarItem>\n\t\t\t\t{ ( toolbarItemHTMLProps ) => (\n\t\t\t\t\t<DropdownMenu\n\t\t\t\t\t\ticon={ table }\n\t\t\t\t\t\ttoggleProps={ toolbarItemHTMLProps }\n\t\t\t\t\t\tlabel={ 'Edit table' }\n\t\t\t\t\t\tcontrols={ [] }\n\t\t\t\t\t/>\n\t\t\t\t) }\n\t\t\t</ToolbarItem>\n\t\t</Toolbar>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Styles in theme.json for Gutenberg\nDESCRIPTION: This JSON snippet defines the styles supported by the Gutenberg plugin, extending the capabilities of WordPress 5.8. It includes properties like dimensions (aspect ratio, minHeight), font family, textColumns, and support for additional elements (heading, button, caption). This provides a broader range of styling options compared to the core WordPress version.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/themes/global-settings-and-styles.md#2025-04-21_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"version\": 3,\n\t\"styles\": {\n\t\t\"border\": {\n\t\t\t\"color\": \"value\",\n\t\t\t\"radius\": \"value\",\n\t\t\t\"style\": \"value\",\n\t\t\t\"width\": \"value\"\n\t\t},\n\t\t\"color\": {\n\t\t\t\"background\": \"value\",\n\t\t\t\"gradient\": \"value\",\n\t\t\t\"text\": \"value\"\n\t\t},\n\t\t\"dimensions\": {\n\t\t\t\"aspectRatio\": \"value\",\n\t\t\t\"minHeight\": \"value\"\n\t\t},\n\t\t\"filter\": {\n\t\t\t\"duotone\": \"value\"\n\t\t},\n\t\t\"spacing\": {\n\t\t\t\"blockGap\": \"value\",\n\t\t\t\"margin\": {\n\t\t\t\t\"top\": \"value\",\n\t\t\t\t\"right\": \"value\",\n\t\t\t\t\"bottom\": \"value\",\n\t\t\t\t\"left\": \"value\"\n\t\t\t},\n\t\t\t\"padding\": {\n\t\t\t\t\"top\": \"value\",\n\t\t\t\t\"right\": \"value\",\n\t\t\t\t\"bottom\": \"value\",\n\t\t\t\t\"left\": \"value\"\n\t\t\t}\n\t\t},\n\t\t\"typography\": {\n\t\t\t\"fontFamily\": \"value\",\n\t\t\t\"fontSize\": \"value\",\n\t\t\t\"fontStyle\": \"value\",\n\t\t\t\"fontWeight\": \"value\",\n\t\t\t\"letterSpacing\": \"value\",\n\t\t\t\"lineHeight\": \"value\",\n\t\t\t\"textColumns\": \"value\",\n\t\t\t\"textDecoration\": \"value\",\n\t\t\t\"textTransform\": \"value\"\n\t\t},\n\t\t\"elements\": {\n\t\t\t\"link\": {\n\t\t\t\t\"border\": {},\n\t\t\t\t\"color\": {},\n\t\t\t\t\"spacing\": {},\n\t\t\t\t\"typography\": {}\n\t\t\t},\n\t\t\t\"h1\": {},\n\t\t\t\"h2\": {},\n\t\t\t\"h3\": {},\n\t\t\t\"h4\": {},\n\t\t\t\"h5\": {},\n\t\t\t\"h6\": {},\n\t\t\t\"heading\": {},\n\t\t\t\"button\": {},\n\t\t\t\"caption\": {}\n\t\t},\n\t\t\"blocks\": {\n\t\t\t\"core/group\": {\n\t\t\t\t\"border\": {},\n\t\t\t\t\"color\": {},\n\t\t\t\t\"dimensions\": {},\n\t\t\t\t\"spacing\": {},\n\t\t\t\t\"typography\": {},\n\t\t\t\t\"elements\": {\n\t\t\t\t\t\"link\": {},\n\t\t\t\t\t\"h1\": {},\n\t\t\t\t\t\"h2\": {},\n\t\t\t\t\t\"h3\": {},\n\t\t\t\t\t\"h4\": {},\n\t\t\t\t\t\"h5\": {},\n\t\t\t\t\t\"h6\": {}\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"etc\": {}\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Middleware for API Fetch\nDESCRIPTION: Demonstrates how to create and use a custom middleware with API Fetch. This example creates a middleware that logs the time taken for each request to complete.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/api-fetch/README.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport apiFetch from '@wordpress/api-fetch';\n\napiFetch.use( ( options, next ) => {\n\tconst start = Date.now();\n\tconst result = next( options );\n\tresult.then( () => {\n\t\tconsole.log( 'The request took ' + ( Date.now() - start ) + 'ms' );\n\t} );\n\treturn result;\n} );\n```\n\n----------------------------------------\n\nTITLE: Implementing ScrollLock with React useState Hook in WordPress Components\nDESCRIPTION: This example demonstrates how to use the ScrollLock component from @wordpress/components with React's useState hook to toggle scroll locking functionality. The component prevents scroll bleed from modal UI to the page body when activated.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/scroll-lock/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { ScrollLock, Button } from '@wordpress/components';\n\nconst MyScrollLock = () => {\n\tconst [ isScrollLocked, setIsScrollLocked ] = useState( false );\n\n\tconst toggleLock = () => {\n\t\tsetIsScrollLocked( ( locked ) => ! locked ) );\n\t};\n\n\treturn (\n\t\t<div>\n\t\t\t<Button variant=\"secondary\" onClick={ toggleLock }>\n\t\t\t\tToggle scroll lock\n\t\t\t</Button>\n\t\t\t{ isScrollLocked && <ScrollLock /> }\n\t\t\t<p>\n\t\t\t\tScroll locked:\n\t\t\t\t<strong>{ isScrollLocked ? 'Yes' : 'No' }</strong>\n\t\t\t</p>\n\t\t</div>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Media Upload Filter in WordPress Gutenberg\nDESCRIPTION: This React code snippet demonstrates how to use the `addFilter` function from `@wordpress/hooks` to replace the default MediaUpload component. This setup allows customization of media handling in Gutenberg blocks. The key dependency for this snippet is the `@wordpress/hooks` module. It replaces the MediaUpload component using a custom function.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/src/components/media-upload/README.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { addFilter } from '@wordpress/hooks';\nimport MediaUpload from './media-upload';\n\nconst replaceMediaUpload = () => MediaUpload;\n\naddFilter(\n\t'editor.MediaUpload',\n\t'core/edit-post/components/media-upload/replace-media-upload',\n\treplaceMediaUpload\n);\n```\n\n----------------------------------------\n\nTITLE: Using unlockPostAutosaving in WordPress Gutenberg Editor\nDESCRIPTION: This code snippet demonstrates how to unlock post autosaving with a specific lock key in the WordPress Gutenberg editor using the core/editor store.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core-editor.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// Unlock post saving with the lock key `mylock`:\nwp.data.dispatch( 'core/editor' ).unlockPostAutosaving( 'mylock' );\n```\n\n----------------------------------------\n\nTITLE: Downloading Blob - JavaScript\nDESCRIPTION: This snippet demonstrates how to use the downloadBlob function to download a file in the browser. It prepares a JSON object as content and specifies the filename and MIME type.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/blob/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst fileContent = JSON.stringify(\\n\\t{\\n\\t\\ttitle: 'My Post',\\n\\t},\\n\\tnull,\\n\\t2\\n);\\nconst filename = 'file.json';\\n\\ndownloadBlob( filename, fileContent, 'application/json' );\n```\n\n----------------------------------------\n\nTITLE: Rendering Caption area with Caption component\nDESCRIPTION: This code snippet demonstrates how to render a caption area using the `Caption` component from `@wordpress/block-editor`. It shows the integration of the `Caption` component within a functional component `BlockCaption`, passing props such as `isSelected`, `onBlur`, `onChange`, `onFocus`, `shouldDisplay`, `value`, and `insertBlocksAfter` to control the caption's behavior and appearance.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/src/components/caption/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Caption } from '@wordpress/block-editor';\nconst BlockCaption = ( {\n\tonBlur,\n\tonChange,\n\tonFocus,\n\tisSelected,\n\tshouldDisplay,\n\ttext,\n\tinsertBlocksAfter,\n} ) => (\n\t<View >\n\t\t<Caption\n\t\t\tisSelected={ isSelected }\n\t\t\tonBlur={ onBlur }\n\t\t\tonChange={ onChange }\n\t\t\tonFocus={ onFocus }\n\t\t\tshouldDisplay={ shouldDisplay }\n\t\t\tvalue={ text }\n\t\t\tinsertBlocksAfter={ insertBlocksAfter }\n\t\t/>\n\t</View>\n);\n```\n\n----------------------------------------\n\nTITLE: Importing and Using ExternalLink Component\nDESCRIPTION: Demonstrates how to import and use the ExternalLink component from WordPress components library with a basic example linking to WordPress.org\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/external-link/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ExternalLink } from '@wordpress/components';\n\nconst MyExternalLink = () => (\n\t<ExternalLink href=\"https://wordpress.org\">WordPress.org</ExternalLink>\n);\n```\n\n----------------------------------------\n\nTITLE: Customizing Query Loop Block REST API Query in PHP\nDESCRIPTION: Shows how to customize the Query Loop block REST API query for the editor preview using the rest_{post_type}_query filter in PHP.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/block-tutorial/extending-the-query-loop-block.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nadd_filter(\n\t'rest_book_query',\n\tfunction( $args, $request ) {\n\t\t/** We can access our custom parameters from here */\n\t\t$book_author = $request->get_param( 'bookAuthor' );\n\t\t/** ...your custom query logic */\n\t}\n);\n```\n\n----------------------------------------\n\nTITLE: UnitControl Basic Usage\nDESCRIPTION: This example demonstrates the basic usage of the UnitControl component. It initializes a state variable for the value and passes it to the UnitControl component along with an onChange handler.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/unit-control/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { __experimentalUnitControl as UnitControl } from '@wordpress/components';\n\nconst Example = () => {\n\tconst [ value, setValue ] = useState( '10px' );\n\n\treturn <UnitControl __next40pxDefaultSize onChange={ setValue } value={ value } />;\n};\n```\n\n----------------------------------------\n\nTITLE: Using the View Component in Gutenberg\nDESCRIPTION: This code snippet demonstrates how to import and use the experimental `View` and `Text` components from the `@wordpress/components` library within a React component. The `View` component acts as a container, and the `Text` component displays the text \"Code is Poetry\".\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/view/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n\t__experimentalText as Text,\n\t__experimentalView as View,\n} from '@wordpress/components';\n\nfunction Example() {\n\treturn (\n\t\t<View>\n\t\t\t<Text>Code is Poetry</Text>\n\t\t</View>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Using ColorPicker Component in React\nDESCRIPTION: This example demonstrates how to use the ColorPicker component in a React functional component. It uses useState to manage the color state and passes necessary props to ColorPicker.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/color-picker/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { ColorPicker } from '@wordpress/components';\n\nfunction Example() {\n\tconst [color, setColor] = useState();\n\treturn (\n\t\t<ColorPicker\n\t\t\tcolor={color}\n\t\t\tonChange={setColor}\n\t\t\tenableAlpha\n\t\t\tdefaultValue=\"#000\"\n\t\t/>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Unsubscribing from Topics in WordPress Gutenberg Signaling Server\nDESCRIPTION: This code shows how to unsubscribe from communication topics in the Gutenberg Signaling Server. It sends a POST request with the client's subscriber ID, specifies the 'unsubscribe' action type, and includes an array of topics the client no longer wants to monitor.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/lib/experimental/sync/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nawait (\n\tawait fetch( window.wp.ajax.settings.url, {\n\t\tbody: new URLSearchParams( {\n\t\t\tsubscriber_id: '1',\n\t\t\taction: 'gutenberg_signaling_server',\n\t\t\tmessage: JSON.stringify( {\n\t\t\t\ttype: 'unsubscribe',\n\t\t\t\ttopics: [ 'WordPress', 'Drupal' ],\n\t\t\t} ),\n\t\t} ),\n\t\tmethod: 'POST',\n\t} )\n ).text();\n```\n\n----------------------------------------\n\nTITLE: Enabling Custom Line Height Support in WordPress Themes\nDESCRIPTION: This PHP snippet demonstrates how to enable support for custom line heights in blocks like paragraphs and headings in the WordPress block editor.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/themes/theme-support.md#2025-04-21_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nadd_theme_support( 'custom-line-height' );\n```\n\n----------------------------------------\n\nTITLE: Accessing Global State in HTML with Directives\nDESCRIPTION: Demonstrates how to access global state values directly in HTML markup using the data-wp-bind and data-wp-text directives, which reference the state object to control element visibility and content.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/core-concepts/undestanding-global-state-local-context-and-derived-state.md#2025-04-21_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<div data-wp-bind--hidden=\"!state.show\">\n\t<span data-wp-text=\"state.helloText\"></span>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Handling Synchronous Event Access in Async Actions for WordPress Gutenberg\nDESCRIPTION: This snippet shows how to handle synchronous event access in async actions using the `withSyncEvent` utility and `splitTask` function in the WordPress Gutenberg Interactivity API.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/api-reference.md#2025-04-21_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nimport { splitTask } from '@wordpress/interactivity';\n\nstore( 'myPlugin', {\n\tactions: {\n\t\thandleClick: withSyncEvent( function* ( event ) {\n\t\t\tevent.preventDefault();\n\t\t\tyield splitTask();\n\t\t\tdoTheWork();\n\t\t} ),\n\t},\n} );\n```\n\n----------------------------------------\n\nTITLE: Filtering Editor REST API Preload Paths in PHP\nDESCRIPTION: Shows how to add additional REST API paths to preload for the block editor using the 'block_editor_rest_api_preload_paths' filter.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/filters/editor-filters.md#2025-04-21_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nadd_filter( 'block_editor_rest_api_preload_paths', 'example_filter_block_editor_rest_api_preload_paths_when_post_provided', 10, 2 );\n\nfunction example_filter_block_editor_rest_api_preload_paths_when_post_provided( $preload_paths, $editor_context ) {\n\tif ( ! empty( $editor_context->post ) ) {\n\t\tarray_push( $preload_paths, array( '/wp/v2/blocks', 'OPTIONS' ) );\n\t}\n\treturn $preload_paths;\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Frontend and Editor Script in JSON\nDESCRIPTION: Shows how to define a script that will be enqueued both in the editor and on the front of the site.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-metadata.md#2025-04-21_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{ \"script\": \"file:./script.js\" }\n```\n\n----------------------------------------\n\nTITLE: Creating a Redux Store with Thunks for Temperature API in JavaScript\nDESCRIPTION: This snippet shows how to create the same Redux store using thunks, which removes the indirection and simplifies the code.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/thunks.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst store = wp.data.createReduxStore( 'my-store', {\n    actions: {\n        saveTemperatureToAPI: ( temperature ) => async () => {\n            const response = await window.fetch( 'https://...', {\n                method: 'POST',\n                body: JSON.stringify( { temperature } ),\n            } );\n            return await response.json();\n        }\n    },\n    // reducers, selectors, ...\n} );\n```\n\n----------------------------------------\n\nTITLE: Defining Theme-Specific Duotone Options in theme.json\nDESCRIPTION: This snippet shows how to define theme-specific duotone color options along with core options and customization for image-related blocks.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/curating-the-editor-experience/theme-json.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"version\": 3,\n\t\"settings\": {\n\t\t\"color\": {\n\t\t\t\"duotone\": [\n\t\t\t\t{\n\t\t\t\t\t\"colors\": [ \"#000000\", \"#ffffff\" ],\n\t\t\t\t\t\"slug\": \"foreground-and-background\",\n\t\t\t\t\t\"name\": \"Foreground and background\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"colors\": [ \"#000000\", \"#ff0200\" ],\n\t\t\t\t\t\"slug\": \"foreground-and-secondary\",\n\t\t\t\t\t\"name\": \"Foreground and secondary\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"colors\": [ \"#000000\", \"#7f5dee\" ],\n\t\t\t\t\t\"slug\": \"foreground-and-tertiary\",\n\t\t\t\t\t\"name\": \"Foreground and tertiary\"\n\t\t\t\t},\n\t\t\t]\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SpacingSizesControl in React Component\nDESCRIPTION: Example implementation of the SpacingSizesControl component in a React functional component. Demonstrates basic usage with useState hook to manage spacing values for all sides of an element.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/src/components/spacing-sizes-control/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { __experimentalSpacingSizesControl as SpacingSizesControl } from '@wordpress/block-editor';\nimport { useState } from '@wordpress/element';\n\nfunction Example() {\n\tconst [ sides, setSides ] = useState( {\n\t\ttop: '0px',\n\t\tright: '0px',\n\t\tbottom: '0px',\n\t\tleft: '0px',\n\t} );\n\n\treturn (\n\t\t<SpacingSizesControl\n\t\t\tvalues={ sides }\n\t\t\tonChange={ setSides }\n\t\t\tlabel=\"Sides\"\n\t\t/>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Using useBlockProps Hook in WordPress Block Editor (JavaScript)\nDESCRIPTION: Demonstrates how to use the useBlockProps hook to mark an element as a block element and apply custom props. This hook is required for API v2 and above.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/README.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useBlockProps } from '@wordpress/block-editor';\n\nexport default function Edit() {\n\tconst blockProps = useBlockProps( {\n\t\tclassName: 'my-custom-class',\n\t\tstyle: {\n\t\t\tcolor: '#222222',\n\t\t\tbackgroundColor: '#eeeeee',\n\t\t},\n\t} );\n\n\treturn <div { ...blockProps }></div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Block Editor with Global Styles Output\nDESCRIPTION: A React hook to retrieve styles and settings for configuring block editor instances based on current global styles\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/src/components/global-styles/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n\tuseGlobalStylesOutput,\n\tBlockEditorProvider,\n\tBlockList,\n} from '@wordpress/block-editor';\n\nfunction MyComponent() {\n\tconst [ styles, settings ] = useGlobalStylesOutput();\n\n\treturn (\n\t\t<BlockEditorProvider\n\t\t\tsettings={ {\n\t\t\t\tstyles,\n\t\t\t\t__experimentalFeatures: settings,\n\t\t\t} }\n\t\t>\n\t\t\t<BlockList />\n\t\t</BlockEditorProvider>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Using BlockAlignmentMatrixControl in JSX\nDESCRIPTION: This code snippet demonstrates how to use the BlockAlignmentMatrixControl component within a Gutenberg block. It imports necessary components from \"@wordpress/block-editor\" and renders the BlockAlignmentMatrixControl within BlockControls, allowing users to adjust the content position, using properties like label, value, and onChange.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/src/components/block-alignment-matrix-control/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// This is a paraphrased example from the cover block\nimport {\n    BlockControls,\n    __experimentalBlockAlignmentMatrixControl as BlockAlignmentMatrixControl\n} from \"@wordpress/block-editor\";\n\nconst controls = (\n  <>\n    <BlockControls>\n      <BlockAlignmentMatrixControl\n        label={ __( 'Change content position' ) }\n        value={ contentPosition }\n        onChange={ ( nextPosition ) =>\n          setAttributes( { contentPosition: nextPosition } )\n        }\n      />\n    </BlockControls>\n  </>\n);\n```\n\n----------------------------------------\n\nTITLE: SelectControl with Option Groups Implementation\nDESCRIPTION: Example demonstrating how to create grouped options within a SelectControl using the children prop with optgroup and option elements. This allows for categorizing options in logical groups.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/select-control/README.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst [ item, setItem ] = useState( '' );\n\n// ...\n\n<SelectControl\n    label={ __( 'My dinosaur' ) }\n    value={ item } // e.g: value = 'a'\n    onChange={ ( selection ) => { setItem( selection ) } }\n    __next40pxDefaultSize\n    __nextHasNoMarginBottom\n>\n\t<optgroup label=\"Theropods\">\n\t\t<option value=\"Tyrannosaurus\">Tyrannosaurus</option>\n\t\t<option value=\"Velociraptor\">Velociraptor</option>\n\t\t<option value=\"Deinonychus\">Deinonychus</option>\n\t</optgroup>\n\t<optgroup label=\"Sauropods\">\n\t\t<option value=\"Diplodocus\">Diplodocus</option>\n\t\t<option value=\"Saltasaurus\">Saltasaurus</option>\n\t\t<option value=\"Apatosaurus\">Apatosaurus</option>\n\t</optgroup>\n</SelectControl>\n```\n\n----------------------------------------\n\nTITLE: Managing Preferences in WordPress Gutenberg\nDESCRIPTION: The code defines how to use selectors and actions to manage preferences in WordPress Gutenberg. It retrieves and updates preferences using get and set methods, and shows how to toggle a boolean preference.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/preferences/README.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nwp.data\n\t.select( 'core/preferences' )\n\t.get( 'namespace/editor-or-plugin-name', 'myPreferenceName' ); // 1\nwp.data\n\t.dispatch( 'core/preferences' )\n\t.set( 'namespace/editor-or-plugin-name', 'myPreferenceName', 2 );\nwp.data\n\t.select( 'core/preferences' )\n\t.get( 'namespace/editor-or-plugin-name', 'myPreferenceName' ); // 2\n```\n\nLANGUAGE: javascript\nCODE:\n```\nwp.data\n\t.select( 'core/preferences' )\n\t.get( 'namespace/editor-or-plugin-name', 'myPreferenceName' ); // true\nwp.data\n\t.dispatch( 'core/preferences' )\n\t.toggle( 'namespace/editor-or-plugin-name', 'myPreferenceName' );\nwp.data\n\t.select( 'core/preferences' )\n\t.get( 'namespace/editor-or-plugin-name', 'myPreferenceName' ); // false\n```\n\n----------------------------------------\n\nTITLE: Limiting Nested Blocks with allowedBlocks in Gutenberg (JS)\nDESCRIPTION: This code snippet demonstrates how to use the `allowedBlocks` property to restrict which block types can be nested as direct children of a particular block.  It specifies that only the `core/columns` block is allowed as a direct child.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-registration.md#2025-04-21_snippet_12\n\nLANGUAGE: js\nCODE:\n```\n// Only allow the Columns block to be nested as direct child of this block\nallowedBlocks: [ 'core/columns' ],\n```\n\n----------------------------------------\n\nTITLE: Using getServerState in JavaScript to Synchronize Quiz Questions During Navigation\nDESCRIPTION: This JavaScript code demonstrates how to use getServerState() to subscribe to changes in the global state during client-side navigation. The updateQuestion callback updates only the question from the server state while preserving the existing timeLeft value.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/core-concepts/undestanding-global-state-local-context-and-derived-state.md#2025-04-21_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nimport { store, getServerState } from '@wordpress/interactivity';\n\nstore( 'myPlugin', {\n\tactions: {\n\t\t// This action would be triggered by a directive, like:\n\t\t// <button data-wp-on-click=\"actions.nextQuestion\">Next Question</button>\n\t\t*nextQuestion() {\n\t\t\tevent.preventDefault( event );\n\t\t\tconst { actions } = yield import(\n\t\t\t\t'@wordpress/interactivity-router'\n\t\t\t);\n\t\t\tactions.navigate( '/question-2' );\n\t\t},\n\t},\n\tcallbacks: {\n\t\t// This callback would be triggered by a directive, like:\n\t\t// <div data-wp-watch=\"callbacks.updateQuestion\"></div>\n\t\tupdateQuestion() {\n\t\t\tconst serverState = getServerState();\n\n\t\t\t// Update with the new value coming from the server.\n\t\t\t// We DON'T want to update `timeLeft` because it represents the time left to answer ALL the questions.\n\t\t\tstate.question = serverState.question;\n\t\t},\n\t},\n} );\n```\n\n----------------------------------------\n\nTITLE: Creating a Snackbar with Complex JSX Content\nDESCRIPTION: An example demonstrating how to use Snackbar with more complex JSX markup, including paragraphs and code elements to display error details.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/snackbar/README.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst MySnackbarNotice = () => (\n\t<Snackbar>\n\t\t<p>\n\t\t\tAn error occurred: <code>{ errorDetails }</code>.\n\t\t</p>\n\t</Snackbar>\n);\n```\n\n----------------------------------------\n\nTITLE: Server-Side State Initialization in PHP\nDESCRIPTION: Demonstrates how to initialize derived state values on the server side using wp_interactivity_state.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/core-concepts/using-typescript.md#2025-04-21_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nwp_interactivity_state( 'myCounterPlugin', array(\n\t'counter' => 1,\n\t'double'  => 2,\n));\n```\n\n----------------------------------------\n\nTITLE: Rendering Sidebar and BlockInspector in WordPress Block Editor\nDESCRIPTION: This snippet shows how the Sidebar component is used within the BlockEditor to display advanced block settings via the BlockInspector component. It demonstrates the use of Slot/Fill for rendering components in different locations.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/platform/custom-block-editor.md#2025-04-21_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nreturn (\n    <div className=\"getdavesbe-block-editor\">\n        <BlockEditorProvider>\n            <Sidebar.InspectorFill> /* <-- SIDEBAR */\n                <BlockInspector />\n            </Sidebar.InspectorFill>\n            <BlockCanvas height=\"400px\" />\n        </BlockEditorProvider>\n    </div>\n);\n```\n\n----------------------------------------\n\nTITLE: PHP Block Bindings Value Filter\nDESCRIPTION: Implementation of a filter to modify block binding values, specifically formatting visualization dates with fallback handling.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-bindings.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nfunction wpmovies_format_visualization_date( $value, $name ) {\n\tif ( $name !== 'wpmovies/visualization-date' ) {\n\t\treturn $value;\n\t}\n\tif ( ! $value ) {\n\t\treturn date( 'm/d/Y' );\n\t}\n\treturn date( 'm/d/Y', strtotime( $value ) );\n}\n\nadd_filter( 'block_bindings_source_value', 'wpmovies_format_visualization_date', 10, 2 );\n```\n\n----------------------------------------\n\nTITLE: Querying Elements in React Native Tests\nDESCRIPTION: These examples demonstrate different methods of querying elements in React Native tests, including by text, label, and test ID.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/react-native/integration-test-guide.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst mediaLibraryButton = getByText( 'WordPress Media Library' );\n\nconst missingBlock = getByLabelText( /Unsupported Block\\. Row 1/ );\n\nconst radiusSlider = getByTestId( 'Slider Border Radius' );\n```\n\n----------------------------------------\n\nTITLE: Using wp-watch Directive to React to Context Changes\nDESCRIPTION: Demonstrates the wp-watch directive for running callbacks when a node is created and when state or context changes. This example watches a counter value and logs changes.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/api-reference.md#2025-04-21_snippet_19\n\nLANGUAGE: html\nCODE:\n```\n<div data-wp-context='{ \"counter\": 0 }' data-wp-watch=\"callbacks.logCounter\">\n\t<p>Counter: <span data-wp-text=\"context.counter\"></span></p>\n\t<button data-wp-on--click=\"actions.increaseCounter\">+</button>\n\t<button data-wp-on--click=\"actions.decreaseCounter\">-</button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Customizing Root Selector in WordPress Gutenberg Block (JSON)\nDESCRIPTION: This snippet demonstrates how to set a custom root selector for a Gutenberg block. The root selector is the block's primary CSS selector used for style declarations.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-selectors.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t...\n\t\"selectors\": {\n\t\t\"root\": \".my-custom-block-selector\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Date Logic in Save Function\nDESCRIPTION: Updates the save function to format and display a copyright date based on block attributes. This implementation calculates the current year dynamically, which can lead to validation issues later.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/getting-started/tutorial.md#2025-04-21_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function save( { attributes } ) {\n\tconst { showStartingYear, startingYear } = attributes;\n\tconst currentYear = new Date().getFullYear().toString();\n\n\tlet displayDate;\n\n\tif ( showStartingYear && startingYear ) {\n\t\tdisplayDate = startingYear + '–' + currentYear;\n\t} else {\n\t\tdisplayDate = currentYear;\n\t}\n\n\treturn (\n\t\t<p { ...useBlockProps.save() }>© { displayDate }</p>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Using PreferenceToggleMenuItem Component in Gutenberg\nDESCRIPTION: This React component MyEditorMenu uses the PreferenceToggleMenuItem to create a toggle menu item within a DropdownMenu for managing boolean preferences, complete with custom messages and labels.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/preferences/README.md#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nfunction MyEditorMenu() {\n\treturn (\n\t\t<DropdownMenu>\n\t\t\t{ () => (\n\t\t\t\t<MenuGroup label={ __( 'Features' ) }>\n\t\t\t\t\t<PreferenceToggleMenuItem\n\t\t\t\t\t\tscope=\"namespace/editor-or-plugin-name\"\n\t\t\t\t\t\tname=\"myPreferenceName\"\n\t\t\t\t\t\tlabel={ __( 'My feature' ) }\n\t\t\t\t\t\tinfo={ __( 'A really awesome feature' ) }\n\t\t\t\t\t\tmessageActivated={ __( 'My feature activated' ) }\n\t\t\t\t\t\tmessageDeactivated={ __( 'My feature deactivated' ) }\n\t\t\t\t\t/>\n\t\t\t\t</MenuGroup>\n\t\t\t) }\n\t\t</DropdownMenu>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Toggle Feature Implementation Using Thunks in JavaScript\nDESCRIPTION: This snippet demonstrates how the toggleFeature action is now implemented using thunks, which provides a cleaner and more direct approach.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/thunks.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport function toggleFeature( scope, featureName ) {\n\treturn function ( { select, dispatch } ) {\n\t\tconst currentValue = select.isFeatureActive( scope, featureName );\n\t\tdispatch.setFeatureValue( scope, featureName, ! currentValue );\n\t};\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing FontSizePicker in React with Predefined Font Sizes\nDESCRIPTION: This snippet demonstrates how to implement a FontSizePicker component with predefined font sizes. It shows setting up font size options, managing state, and handling changes to the font size selection.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/font-size-picker/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { FontSizePicker } from '@wordpress/components';\nimport { __ } from '@wordpress/i18n';\n\nconst fontSizes = [\n\t{\n\t\tname: __( 'Small' ),\n\t\tslug: 'small',\n\t\tsize: 12,\n\t},\n\t{\n\t\tname: __( 'Big' ),\n\t\tslug: 'big',\n\t\tsize: 26,\n\t},\n];\nconst fallbackFontSize = 16;\n\nconst MyFontSizePicker = () => {\n\tconst [ fontSize, setFontSize ] = useState( 12 );\n\n\treturn (\n\t\t<FontSizePicker\n\t\t\t__next40pxDefaultSize\n\t\t\tfontSizes={ fontSizes }\n\t\t\tvalue={ fontSize }\n\t\t\tfallbackFontSize={ fallbackFontSize }\n\t\t\tonChange={ ( newFontSize ) => {\n\t\t\t\tsetFontSize( newFontSize );\n\t\t\t} }\n\t\t/>\n\t);\n};\n\n...\n\n<MyFontSizePicker />\n```\n\n----------------------------------------\n\nTITLE: Retrieving Post Type Information using getPostType Selector in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the getPostType selector to retrieve information for a given post type using the WordPress core data store.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useSelect } from '@wordpress/data';\nimport { store as coreDataStore } from '@wordpress/core-data';\n\nconst postType = useSelect(\n\t( select ) => select( coreDataStore ).getPostType( 'post' )\n\n\t// Equivalent to: select( coreDataStore ).getEntityRecord( 'root', 'postType', 'post' )\n);\n```\n\n----------------------------------------\n\nTITLE: Basic DataForm Component Implementation\nDESCRIPTION: Example showing basic usage of the DataForm component with required props.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/dataviews/README.md#2025-04-21_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nconst Example = () => {\n\t// Declare data, fields, etc.\n\n\treturn (\n\t\t<DataForm\n\t\t\tdata={ data }\n\t\t\tfields={ fields }\n\t\t\tform={ form }\n\t\t\tonChange={ onChange }\n\t\t/>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Navigation Component with Groups and Menus in React\nDESCRIPTION: Example demonstrating how to implement hierarchical navigation with the experimental Navigation components from WordPress Gutenberg. It shows a nested menu structure with groups, items, and a submenu.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/navigation/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n\t__experimentalNavigation as Navigation,\n\t__experimentalNavigationGroup as NavigationGroup,\n\t__experimentalNavigationItem as NavigationItem,\n\t__experimentalNavigationMenu as NavigationMenu,\n} from '@wordpress/components';\n\nconst MyNavigation = () => (\n\t<Navigation>\n\t\t<NavigationMenu title=\"Home\">\n\t\t\t<NavigationGroup title=\"Group 1\">\n\t\t\t\t<NavigationItem item=\"item-1\" title=\"Item 1\" />\n\t\t\t\t<NavigationItem item=\"item-2\" title=\"Item 2\" />\n\t\t\t</NavigationGroup>\n\t\t\t<NavigationGroup title=\"Group 2\">\n\t\t\t\t<NavigationItem\n\t\t\t\t\titem=\"item-3\"\n\t\t\t\t\tnavigateToMenu=\"category\"\n\t\t\t\t\ttitle=\"Category\"\n\t\t\t\t/>\n\t\t\t</NavigationGroup>\n\t\t</NavigationMenu>\n\n\t\t<NavigationMenu\n\t\t\tbackButtonLabel=\"Home\"\n\t\t\tmenu=\"category\"\n\t\t\tparentMenu=\"root\"\n\t\t\ttitle=\"Category\"\n\t\t>\n\t\t\t<NavigationItem badge=\"1\" item=\"child-1\" title=\"Child 1\" />\n\t\t\t<NavigationItem item=\"child-2\" title=\"Child 2\" />\n\t\t</NavigationMenu>\n\t</Navigation>\n);\n```\n\n----------------------------------------\n\nTITLE: UnitControl with Units Array\nDESCRIPTION: This example shows how to use the `units` prop to provide a custom set of units for the user to select. Each unit can have a value, label, and default value which is used when the unit is selected.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/unit-control/README.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { __experimentalUnitControl as UnitControl } from '@wordpress/components';\n\nconst Example = () => {\n\tconst [ value, setValue ] = useState( '10px' );\n\n\tconst units = [\n\t\t{ value: 'px', label: 'px', default: 0 },\n\t\t{ value: '%', label: '%', default: 10 },\n\t\t{ value: 'em', label: 'em', default: 0 },\n\t];\n\n\treturn (\n\t\t<UnitControl __next40pxDefaultSize onChange={ setValue } value={ value } units={ units } />\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Updating Save Function to Use Fallback Year\nDESCRIPTION: Modifies the save function to use the fallbackCurrentYear attribute instead of calculating the current year dynamically. This ensures consistent rendering and prevents validation errors.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/getting-started/tutorial.md#2025-04-21_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function save( { attributes } ) {\n\tconst { fallbackCurrentYear, showStartingYear, startingYear } = attributes;\n\n\tlet displayDate;\n\n\tif ( showStartingYear && startingYear ) {\n\t\tdisplayDate = startingYear + '–' + fallbackCurrentYear;\n\t} else {\n\t\tdisplayDate = fallbackCurrentYear;\n\t}\n\n\treturn (\n\t\t<p { ...useBlockProps.save() }>© { displayDate }</p>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Restricting SlotFill Content to Site Editor in WordPress\nDESCRIPTION: Shows how to conditionally render a SlotFill component only in the Site Editor context by excluding viewable post types. This approach ensures the component only appears in the Site Editor and not in the Post Editor.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/slotfills/README.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * WordPress dependencies\n */\nimport { registerPlugin } from '@wordpress/plugins';\nimport {\n\tPluginDocumentSettingPanel,\n\tstore as editorStore,\n} from '@wordpress/editor';\nimport { store as coreStore } from '@wordpress/core-data';\nimport { useSelect } from '@wordpress/data';\nimport { __ } from '@wordpress/i18n';\n\n/**\n * The component to be rendered  as part of the plugin.\n */\nconst SiteEditorDocumentSettingPanel = () => {\n\t// Retrieve information about the current post type.\n\tconst isViewable = useSelect( ( select ) => {\n\t\tconst postTypeName = select( editorStore ).getCurrentPostType();\n\t\tconst postTypeObject = select( coreStore ).getPostType( postTypeName );\n\n\t\t// A viewable post type is one than can be viewed in the WordPress admin. Internal ones are not set to viewable.\n\t\treturn postTypeObject?.viewable;\n\t}, [] );\n\n\t// If the post type is viewable, do not render my fill\n\tif ( isViewable ) {\n\t\treturn null;\n\t}\n\n\treturn (\n\t\t<PluginDocumentSettingPanel\n\t\t\tname=\"custom-panel\"\n\t\t\ttitle={ __( 'Site Editor Example' ) }\n\t\t\tclassName=\"custom-panel\"\n\t\t>\n\t\t\t<p>{ __( 'Only appears in the Site Editor' ) }</p>\n\t\t</PluginDocumentSettingPanel>\n\t);\n};\n\nregisterPlugin( 'example-site-editor', {\n\trender: SiteEditorDocumentSettingPanel,\n} );\n```\n\n----------------------------------------\n\nTITLE: Referencing a Root Style in theme.json\nDESCRIPTION: These JSON snippets demonstrate how to define and reference a root-level style for reuse in block styles. The first snippet defines a background color style at the root level. The second snippet reuses that root level style for the text color of a block.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/themes/global-settings-and-styles.md#2025-04-21_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n\"styles\": {\n\t\t\"color\": {\n\t\t\t\"background\": \"var(--wp--preset--color--primary)\"\n\t\t}\n\t}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"color\": {\n\t\t\"text\": { \"ref\": \"styles.color.background\" }\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Inspector Controls Implementation\nDESCRIPTION: Final implementation combining ToggleControl and TextControl with conditional rendering based on toggle state.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/getting-started/tutorial.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function Edit( { attributes, setAttributes } ) {\n\tconst { showStartingYear, startingYear } = attributes;\n\tconst currentYear = new Date().getFullYear().toString();\n\n\treturn (\n\t\t<>\n\t\t\t<InspectorControls>\n\t\t\t\t<PanelBody title={ __( 'Settings', 'copyright-date-block' ) }>\n\t\t\t\t\t<ToggleControl\n\t\t\t\t\t\tchecked={ !! showStartingYear }\n\t\t\t\t\t\tlabel={ __(\n\t\t\t\t\t\t\t'Show starting year',\n\t\t\t\t\t\t\t'copyright-date-block'\n\t\t\t\t\t\t) }\n\t\t\t\t\t\tonChange={ () =>\n\t\t\t\t\t\t\tsetAttributes( {\n\t\t\t\t\t\t\t\tshowStartingYear: ! showStartingYear,\n\t\t\t\t\t\t\t} )\n\t\t\t\t\t\t}\n\t\t\t\t\t/>\n\t\t\t\t\t{ showStartingYear && (\n\t\t\t\t\t\t<TextControl\n\t\t\t\t\t\t\t__nextHasNoMarginBottom\n\t\t\t\t\t\t\t__next40pxDefaultSize\n\t\t\t\t\t\t\tlabel={ __(\n\t\t\t\t\t\t\t\t'Starting year',\n\t\t\t\t\t\t\t\t'copyright-date-block'\n\t\t\t\t\t\t\t) }\n\t\t\t\t\t\t\tvalue={ startingYear || '' }\n\t\t\t\t\t\t\tonChange={ ( value ) =>\n\t\t\t\t\t\t\t\tsetAttributes( { startingYear: value } )\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t/>\n\t\t\t\t\t) }\n\t\t\t\t</PanelBody>\n\t\t\t</InspectorControls>\n\t\t\t<p { ...useBlockProps() }>© { currentYear }</p>\n\t\t</>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Tips with DotTip in JSX\nDESCRIPTION: This snippet shows how to use the DotTip React component to render an interactive tip linked to a UI element. Dependencies include the WordPress Gutenberg plugin and React. The tipId uniquely identifies the tip and should use the format 'pluginName/action'. The tip is positioned based on the 'position' prop. It accepts any valid React element as children, which will be displayed within the tooltip. The tip can point to a specific DOM node and the position is defined by the default position 'middle right'. This does not require any server-side processing.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/nux/src/components/dot-tip/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<button onClick={ ... }>\n\tAdd to Cart\n\t<DotTip tipId=\"acme/add-to-cart\">\n\t\tClick here to add the product to your shopping cart.\n\t</DotTip>\n</button>\n}\n```\n\n----------------------------------------\n\nTITLE: Core Blocks Component Documentation in Markdown\nDESCRIPTION: A structured documentation reference detailing each core block's properties including name, category, supported features, and attributes. The markdown format is used to organize block information hierarchically with clear section headers and bullet points.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/core-blocks.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Core Blocks Reference\n\nThis page lists the blocks included in the block-library package.\n\n-   Items marked with a strikeout (~~strikeout~~) are explicitly disabled.\n-   Blocks marked with **Experimental:** true are only available when Gutenberg is active.\n-   Blocks marked with **Experimental:** fse are only available in the Site Editor.\n\n<!-- START TOKEN Autogenerated - DO NOT EDIT -->\n\n## Archives\n\nDisplay a date archive of your posts.\n\n-\t**Name:** core/archives\n-\t**Category:** widgets\n-\t**Supports:** align, color (background, gradients, link, text), interactivity (clientNavigation), spacing (margin, padding), typography (fontSize, lineHeight), ~~html~~\n-\t**Attributes:** displayAsDropdown, showLabel, showPostCounts, type\n```\n\n----------------------------------------\n\nTITLE: Defining Block Variations in JSON\nDESCRIPTION: Shows how to define variations of a block with different initial attributes or inner blocks.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-metadata.md#2025-04-21_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"variations\": [\n\t\t{\n\t\t\t\"name\": \"example\",\n\t\t\t\"title\": \"Example\",\n\t\t\t\"attributes\": {\n\t\t\t\t\"level\": 2,\n\t\t\t\t\"message\": \"This is an example!\"\n\t\t\t},\n\t\t\t\"scope\": [ \"block\" ],\n\t\t\t\"isActive\": [ \"level\" ]\n\t\t}\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Block Editor Selector Examples\nDESCRIPTION: Collection of selector functions for querying block editor state. These functions handle operations like checking block permissions, getting block attributes, managing block hierarchies, and determining block order.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core-block-editor.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Example selector usage:\nconst canEdit = canEditBlock(state, blockId);\nconst block = getBlock(state, blockId);\nconst attributes = getBlockAttributes(state, blockId);\nconst parents = getBlockParents(state, blockId);\nconst blockCount = getBlockCount(state, rootClientId);\n```\n\n----------------------------------------\n\nTITLE: Disabling Custom Units in WordPress Themes\nDESCRIPTION: This PHP snippet shows how to disable support for custom units (px, em, rem, vh, vw) in the WordPress block editor. It restricts users to the default unit (px).\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/themes/theme-support.md#2025-04-21_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nadd_theme_support( 'custom-units', array() );\n```\n\n----------------------------------------\n\nTITLE: Local WordPress Develop Configuration - JSON\nDESCRIPTION: This configuration is useful for working on plugins alongside WordPress Core by setting the 'core' field to point to either a local build or source directory. This allows simultaneous development of plugins and core WordPress features. The current directory remains included as a plugin.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/env/README.md#2025-04-21_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"core\": \"../wordpress-develop/build\",\n\t\"plugins\": [ \".\" ]\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"core\": \"../wordpress-develop/src\",\n\t\"plugins\": [ \".\" ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using HeightControl Component in React\nDESCRIPTION: This code snippet demonstrates how to use the `HeightControl` component from `@wordpress/block-editor` within a React component. It includes importing `useState` from 'react' and `HeightControl` from '@wordpress/block-editor', initializing a state variable for the height value, and rendering the `HeightControl` component with a label, `onChange` handler, and the current `value` prop. The `onChange` function is used to update the state when the height value changes.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/src/components/height-control/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { HeightControl } from '@wordpress/block-editor';\n\nconst MyLineHeightControl = () => (\n\tconst [ value, setValue ] = useState();\n\t<HeightControl\n\t\tlabel={ 'My Height Control' }\n\t\tonChange={ setValue }\n\t\tvalue={ value }\n\t/>\n);\n\n```\n\n----------------------------------------\n\nTITLE: Transforming URLs to Embed Blocks in JavaScript\nDESCRIPTION: This code snippet demonstrates how to create an Embed block when a user pastes a URL into the editor. It uses a raw transformation type with an isMatch function to check if the pasted content is a URL, and then transforms it into an Embed block.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-transforms.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ntransforms: {\n    from: [\n        {\n            type: 'raw',\n            isMatch: ( node ) =>\n                node.nodeName === 'P' &&\n                /^\\s*(https?:\\/\\/\\S+)\\s*$/i.test( node.textContent ),\n            transform: ( node ) => {\n                return createBlock( 'core/embed', {\n                    url: node.textContent.trim(),\n                } );\n            },\n        },\n    ],\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Block Metadata with block_type_metadata Filter in PHP\nDESCRIPTION: This snippet demonstrates how to use the block_type_metadata filter to modify the apiVersion of all blocks to 2.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/filters/block-filters.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfunction example_filter_metadata_registration( $metadata ) {\n\t$metadata['apiVersion'] = 2;\n\treturn $metadata;\n};\nadd_filter( 'block_type_metadata', 'example_filter_metadata_registration' );\n```\n\n----------------------------------------\n\nTITLE: Enqueuing Main JavaScript File for Custom Block Editor in WordPress\nDESCRIPTION: This PHP code enqueues the main JavaScript file for the custom block editor using wp_enqueue_script(). It includes dynamically generated dependencies to ensure WordPress-provided scripts are not included in the built bundle.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/platform/custom-block-editor.md#2025-04-21_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nwp_enqueue_script( $script_handle, $script_url, $script_asset['dependencies'], $script_asset['version'] );\n```\n\n----------------------------------------\n\nTITLE: Typing Basic Derived State in TypeScript\nDESCRIPTION: Demonstrates how to type a derived state that depends on local context using TypeScript interfaces and the store function.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/core-concepts/using-typescript.md#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ntype MyContext = {\n\tcounter: number;\n};\n\nconst myStore = store( 'myCounterPlugin', {\n\tstate: {\n\t\tget double() {\n\t\t\tconst { counter } = getContext< MyContext >();\n\t\t\treturn counter * 2;\n\t\t},\n\t},\n\tactions: {\n\t\tincrement() {\n\t\t\tstate.counter += 1; // This type is number.\n\t\t},\n\t},\n} );\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Color Palette in WordPress Theme\nDESCRIPTION: Example of how to add custom color palette support to a WordPress theme using add_theme_support(). Defines four custom colors with names, slugs, and hex values.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/themes/theme-support.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfunction mytheme_setup_theme_supported_features() {\n\tadd_theme_support( 'editor-color-palette', array(\n\t\tarray(\n\t\t\t'name'  => esc_attr__( 'strong magenta', 'themeLangDomain' ),\n\t\t\t'slug'  => 'strong-magenta',\n\t\t\t'color' => '#a156b4',\n\t\t),\n\t\tarray(\n\t\t\t'name'  => esc_attr__( 'light grayish magenta', 'themeLangDomain' ),\n\t\t\t'slug'  => 'light-grayish-magenta',\n\t\t\t'color' => '#d0a5db',\n\t\t),\n\t\tarray(\n\t\t\t'name'  => esc_attr__( 'very light gray', 'themeLangDomain' ),\n\t\t\t'slug'  => 'very-light-gray',\n\t\t\t'color' => '#eee',\n\t\t),\n\t\tarray(\n\t\t\t'name'  => esc_attr__( 'very dark gray', 'themeLangDomain' ),\n\t\t\t'slug'  => 'very-dark-gray',\n\t\t\t'color' => '#444',\n\t\t),\n\t) );\n}\n\nadd_action( 'after_setup_theme', 'mytheme_setup_theme_supported_features' );\n```\n\n----------------------------------------\n\nTITLE: Page Utilities - JavaScript\nDESCRIPTION: This example demonstrates the creation and use of PageUtils to perform actions like pressing keys within a web page. The page instance is required to initialize the PageUtils.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/e2e-test-utils-playwright/README.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst pageUtils = new PageUtils( { page } );\nawait pageUtils.pressKeys( 'primary+a' );\n```\n\n----------------------------------------\n\nTITLE: Restricting Duotone Customization for Post Featured Image Block in theme.json\nDESCRIPTION: This snippet shows how to provide only predefined duotone options for the Post Featured Image block, disabling custom color and duotone options.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/curating-the-editor-experience/theme-json.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"version\": 3,\n\t\"settings\": {\n\t\t\"color\": {\n\t\t\t\"custom\": true,\n\t\t\t\"customDuotone\": true\n\t\t},\t\n\t\t\"blocks\": {\n\t\t\t\"core/post-featured-image\": {\n\t\t\t\t\"color\": {\n\t\t\t\t\t\"duotone\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"colors\": [ \"#282828\", \"#ff5837\" ],\n\t\t\t\t\t\t\t\"slug\": \"black-and-orange\",\n\t\t\t\t\t\t\t\"name\": \"Black and Orange\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"colors\": [ \"#282828\", \"#0288d1\" ],\n\t\t\t\t\t\t\t\"slug\": \"black-and-blue\",\n\t\t\t\t\t\t\t\"name\": \"Black and Blue\"\n\t\t\t\t\t\t}\n\t\t\t\t\t],\n\t\t\t\t\t\"customDuotone\": false,\n\t\t\t\t\t\"custom\": false\n\t\t\t\t}\n\t\t\t}\n\t\t} \n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Interactive Fruit List with Global State\nDESCRIPTION: Creating an interactive list using directives that reference the global state, including the data-wp-each directive to iterate through fruits.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/core-concepts/server-side-rendering.md#2025-04-21_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<ul data-wp-interactive=\"myFruitPlugin\">\n\t<template data-wp-each=\"state.fruits\">\n\t\t<li data-wp-text=\"context.item\"></li>\n\t</template>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Active Block Variation in React Component\nDESCRIPTION: Demonstrates how to use the getActiveBlockVariation selector to retrieve the active block variation for a given block based on its attributes. This example checks if the first block in the editor is a Spotify embed.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core-blocks.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { __ } from '@wordpress/i18n';\nimport { store as blocksStore } from '@wordpress/blocks';\nimport { store as blockEditorStore } from '@wordpress/block-editor';\nimport { useSelect } from '@wordpress/data';\n\nconst ExampleComponent = () => {\n\t// This example assumes that a core/embed block is the first block in the Block Editor.\n\tconst activeBlockVariation = useSelect( ( select ) => {\n\t\t// Retrieve the list of blocks.\n\t\tconst [ firstBlock ] = select( blockEditorStore ).getBlocks();\n\n\t\t// Return the active block variation for the first block.\n\t\treturn select( blocksStore ).getActiveBlockVariation(\n\t\t\tfirstBlock.name,\n\t\t\tfirstBlock.attributes\n\t\t);\n\t}, [] );\n\n\treturn activeBlockVariation && activeBlockVariation.name === 'spotify' ? (\n\t\t<p>{ __( 'Spotify variation' ) }</p>\n\t) : (\n\t\t<p>{ __( 'Other variation' ) }</p>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: ItemGroup with Size Prop Demonstration in React\nDESCRIPTION: Shows how to use the ItemGroup component with a specific size prop. This example demonstrates how the size prop is passed from the ItemGroup to its child Item components through React Context.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/item-group/item-group/README.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n\t__experimentalItemGroup as ItemGroup,\n\t__experimentalItem as Item,\n} from '@wordpress/components';\n\nconst Example = () => (\n\t<ItemGroup size=\"small\">\n\t\t<Item>Item text</Item>\n\t</ItemGroup>\n);\n```\n\n----------------------------------------\n\nTITLE: Optimizing Text Readability Against Background Color\nDESCRIPTION: Demonstrates how to use the optimizeReadabilityFor prop to adapt text color for optimal readability against a specified background color, supporting CSS variables and standard color values.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/text/README.md#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { __experimentalText as Text, View } from '@wordpress/components';\n\nfunction Example() {\n\tconst backgroundColor = 'blue';\n\n\treturn (\n\t\t<View css={ { backgroundColor } }>\n\t\t\t<Text optimizeReadabilityFor={ backgroundColor }>\n\t\t\t\tLorem ipsum dolor sit amet, consectetur adipiscing elit.\n\t\t\t</Text>\n\t\t</View>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Using useInnerBlocksProps with Custom HTML\nDESCRIPTION: Demonstrates how to use the children property from useInnerBlocksProps to place custom HTML elements at the same level as inner blocks. This allows for more complex layouts.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/platform-docs/docs/create-block/nested-blocks.md#2025-04-21_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport { registerBlockType } from '@wordpress/blocks';\nimport { useBlockProps, useInnerBlocksProps } from '@wordpress/block-editor';\n\nregisterBlockType( 'gutenberg-examples/example-06', {\n\t// ...\n\n\tedit: () => {\n\t\tconst blockProps = useBlockProps();\n\t\tconst { children, ...innerBlocksProps } = useInnerBlocksProps( blockProps );\n\n\t\treturn (\n\t\t\t<div {...innerBlocksProps}>\n    \t\t\t{ children }\n\t\t\t\t<!-- Insert any arbitrary html here at the same level as the children -->\n\t\t\t</div>\n\t\t);\n\t},\n\n\t// ...\n} );\n```\n\n----------------------------------------\n\nTITLE: Generated HTML Output Examples\nDESCRIPTION: Example HTML markup showing how the useInnerBlocksProps implementations render in the editor, demonstrating the resulting DOM structure.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/block-tutorial/nested-blocks-inner-blocks.md#2025-04-21_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<div>\n\t<!-- Inner Blocks get inserted here -->\n</div>\n```\n\nLANGUAGE: html\nCODE:\n```\n<div>\n\t<!-- Inner Blocks get inserted here -->\n\t<!-- The custom html gets rendered on the same level -->\n</div>\n```\n\n----------------------------------------\n\nTITLE: Generating CSS Styles in JavaScript\nDESCRIPTION: The compileCSS function generates a CSS stylesheet from a given style object and selector. It requires a style object as input, which may represent block attributes or theme styles. The function outputs a generated stylesheet or inline CSS declarations as a string.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/style-engine/README.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/*\n### compileCSS\n\nGenerates a stylesheet for a given style object and selector.\n\n_Parameters_\n\n-   _style_ `Style`: Style object, for example, the value of a block's attributes.style object or the top level styles in theme.json\n-   _options_ `StyleOptions`: Options object with settings to adjust how the styles are generated.\n\n_Returns_\n\n-   `string`: A generated stylesheet or inline style declarations.\n\n_Changelog_\n\n`6.1.0` Introduced in WordPress core.\n*/\n```\n\n----------------------------------------\n\nTITLE: Using wp-init Directive for Element Initialization\nDESCRIPTION: Shows how to use the wp-init directive to run callbacks when a node is created. This example logs initialization time when the div is created.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/api-reference.md#2025-04-21_snippet_21\n\nLANGUAGE: html\nCODE:\n```\n<div data-wp-init=\"callbacks.logTimeInit\">\n\t<p>Hi!</p>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Inserting Multiple Blocks in Gutenberg Editor (JavaScript)\nDESCRIPTION: Action creator that returns an action object to insert multiple blocks into the editor. It handles block validation, template locks, and can optionally update block selection and set initial focus position.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core-block-editor.md#2025-04-21_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\ninsertBlocks( blocks, index, rootClientId, updateSelection, initialPosition, meta )\n```\n\n----------------------------------------\n\nTITLE: Block Save Function Implementation with useBlockProps\nDESCRIPTION: Demonstrates using useBlockProps.save() to apply block support properties in a block's save function.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-supports.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction BlockEdit() {\n\tconst blockProps = useBlockProps.save();\n\n\treturn <div { ...blockProps }>Hello World!</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining and Using combineReducers in WordPress Data\nDESCRIPTION: This JavaScript snippet illustrates how to use the combineReducers helper function from the @wordpress/data module to combine multiple reducing functions into a single reducer, facilitating the creation of a comprehensive store.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/data/README.md#2025-04-21_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { combineReducers, createReduxStore, register } from '@wordpress/data';\n\nconst prices = ( state = {}, action ) => {\n\treturn action.type === 'SET_PRICE'\n\t\t? {\n\t\t\t\t...state,\n\t\t\t\t[ action.item ]: action.price,\n\t\t  }\n\t\t: state;\n};\n\nconst discountPercent = ( state = 0, action ) => {\n\treturn action.type === 'START_SALE' ? action.discountPercent : state;\n};\n\nconst store = createReduxStore( 'my-shop', {\n\treducer: combineReducers( {\n\t\tprices,\n\t\tdiscountPercent,\n\t} ),\n} );\nregister( store );\n```\n\n----------------------------------------\n\nTITLE: Setting a Custom Root URL for API Fetch\nDESCRIPTION: Shows how to use the built-in root URL middleware to specify a custom base URL for all API Fetch requests. This is useful for custom WordPress installations or development environments.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/api-fetch/README.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport apiFetch from '@wordpress/api-fetch';\n\nconst rootURL = 'http://my-wordpress-site/wp-json/';\napiFetch.use( apiFetch.createRootURLMiddleware( rootURL ) );\n```\n\n----------------------------------------\n\nTITLE: WordPress Core Settings Configuration\nDESCRIPTION: Complete example of WordPress core settings configuration including border, color, custom, layout, spacing, typography and block-specific settings.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/themes/global-settings-and-styles.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"version\": 3,\n\t\"settings\": {\n\t\t\"border\": {\n\t\t\t\"radius\": false,\n\t\t\t\"color\": false,\n\t\t\t\"style\": false,\n\t\t\t\"width\": false\n\t\t},\n\t\t\"color\": {\n\t\t\t\"custom\": true,\n\t\t\t\"customDuotone\": true,\n\t\t\t\"customGradient\": true,\n\t\t\t\"duotone\": [],\n\t\t\t\"gradients\": [],\n\t\t\t\"link\": false,\n\t\t\t\"palette\": [],\n\t\t\t\"text\": true,\n\t\t\t\"background\": true,\n\t\t\t\"defaultGradients\": true,\n\t\t\t\"defaultPalette\": true\n\t\t},\n\t\t\"custom\": {},\n\t\t\"layout\": {\n\t\t\t\"contentSize\": \"800px\",\n\t\t\t\"wideSize\": \"1000px\"\n\t\t},\n\t\t\"spacing\": {\n\t\t\t\"margin\": false,\n\t\t\t\"padding\": false,\n\t\t\t\"blockGap\": null,\n\t\t\t\"units\": [ \"px\", \"em\", \"rem\", \"vh\", \"vw\" ]\n\t\t},\n\t\t\"typography\": {\n\t\t\t\"customFontSize\": true,\n\t\t\t\"lineHeight\": false,\n\t\t\t\"dropCap\": true,\n\t\t\t\"fluid\": false,\n\t\t\t\"fontStyle\": true,\n\t\t\t\"fontWeight\": true,\n\t\t\t\"letterSpacing\": true,\n\t\t\t\"textDecoration\": true,\n\t\t\t\"textTransform\": true,\n\t\t\t\"fontSizes\": [],\n\t\t\t\"fontFamilies\": []\n\t\t},\n\t\t\"blocks\": {\n\t\t\t\"core/paragraph\": {\n\t\t\t\t\"color\": {},\n\t\t\t\t\"custom\": {},\n\t\t\t\t\"layout\": {},\n\t\t\t\t\"spacing\": {},\n\t\t\t\t\"typography\": {}\n\t\t\t},\n\t\t\t\"core/heading\": {},\n\t\t\t\"etc\": {}\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Using Derived State with Global State and Local Context in JavaScript and HTML\nDESCRIPTION: This example demonstrates using derived state that depends on both global state (tax rate) and local context (product price) to calculate the final price including tax.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/core-concepts/undestanding-global-state-local-context-and-derived-state.md#2025-04-21_snippet_29\n\nLANGUAGE: html\nCODE:\n```\n<div\n\tdata-wp-interactive=\"myProductPlugin\"\n\tdata-wp-context='{ \"priceWithoutTax\": 100 }'\n>\n\t<p>Product Price: $<span data-wp-text=\"context.priceWithoutTax\"></span></p>\n\t<p>Tax Rate: <span data-wp-text=\"state.taxRatePercentage\"></span></p>\n\t<p>Price (inc. tax): $<span data-wp-text=\"state.priceWithTax\"></span></p>\n</div>\n```\n\nLANGUAGE: js\nCODE:\n```\nconst { state } = store( 'myProductPlugin', {\n\tstate: {\n\t\ttaxRate: 0.21,\n\t\tget taxRatePercentage() {\n\t\t\treturn `${ state.taxRate * 100 }%`;\n\t\t},\n\t\tget priceWithTax() {\n\t\t\tconst { priceWithoutTax } = getContext();\n\t\t\treturn price * ( 1 + state.taxRate );\n\t\t},\n\t},\n\tactions: {\n\t\tupdateTaxRate( event ) {\n\t\t\t// Updates the global tax rate.\n\t\t\tstate.taxRate = event.target.value;\n\t\t},\n\t\tupdatePrice( event ) {\n\t\t\t// Updates the local product price.\n\t\t\tconst context = getContext();\n\t\t\tcontext.priceWithoutTax = event.target.value;\n\t\t},\n\t},\n} );\n```\n\n----------------------------------------\n\nTITLE: Using MenuGroup with MenuItems in WordPress Gutenberg (JSX)\nDESCRIPTION: This snippet demonstrates how to import and use the MenuGroup component to wrap related MenuItem components. The example shows creating a settings group with two menu items inside it.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/menu-group/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { MenuGroup, MenuItem } from '@wordpress/components';\n\nconst MyMenuGroup = () => (\n\t<MenuGroup label=\"Settings\">\n\t\t<MenuItem>Setting 1</MenuItem>\n\t\t<MenuItem>Setting 2</MenuItem>\n\t</MenuGroup>\n);\n```\n\n----------------------------------------\n\nTITLE: Scaffolding an Interactive Block with TypeScript\nDESCRIPTION: Command to create a new interactive block using the WordPress create-block package with the interactive template. This creates a TypeScript-based interactive block project.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/core-concepts/using-typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @wordpress/create-block@latest --template @wordpress/create-block-interactive-template\n```\n\n----------------------------------------\n\nTITLE: Transforming Shortcode to Block using Transform Function in JavaScript\nDESCRIPTION: This code snippet illustrates how to transform an existing shortcode into its block counterpart using the transform method. It includes an isMatch function to conditionally apply the transformation based on shortcode attributes.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-transforms.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ntransforms: {\n    from: [\n        {\n            type: 'shortcode',\n            tag: 'video',\n            transform( { named: { src } } ) {\n                return createBlock( 'core/video', { src } );\n            },\n            // Prevent the shortcode to be converted\n            // into this block when it doesn't\n            // have the proper ID.\n            isMatch( { named: { id } } ) {\n                return id === 'my-id';\n            },\n        },\n    ],\n},\n```\n\n----------------------------------------\n\nTITLE: Implementing Gradient CSS Classes in WordPress Themes\nDESCRIPTION: This CSS snippet shows how to create a class that applies a custom gradient background to blocks in the WordPress editor. It corresponds to the 'Vivid cyan blue to vivid purple' gradient defined in the PHP code.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/themes/theme-support.md#2025-04-21_snippet_8\n\nLANGUAGE: css\nCODE:\n```\n.has-vivid-cyan-blue-to-vivid-purple-gradient-background {\n\tbackground: linear-gradient(\n\t\t135deg,\n\t\trgba( 6, 147, 227, 1 ) 0%,\n\t\trgb( 155, 81, 224 ) 100%\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Class Exists Check for WordPress Core Classes\nDESCRIPTION: Pattern for conditionally declaring a WordPress Core class with a class_exists() check to prevent duplicate declarations. This ensures compatibility when running the plugin on different WordPress versions.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/lib/README.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n/**\n * WP_A_Stable_Class class\n *\n * @package WordPress\n * @since 6.3.0\n */\nif ( ! class_exists( 'WP_A_Stable_Class' ) ) {\n\t// Do not invert this pattern with an early `return`.\n\t// See below for details...\n\tclass WP_A_Stable_Class { ... }\n}\n```\n\n----------------------------------------\n\nTITLE: Action Creator: removeInstalledBlockType\nDESCRIPTION: This action creator removes a block type from the newly installed tracking list. It requires an item string representing the block and returns an action object.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-directory/README.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// Action creator\nfunction removeInstalledBlockType(item) {\n    return {\n        type: 'REMOVE_INSTALLED_BLOCK_TYPE',\n        item: item\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Using Selectors and Resolving States in WordPress Data (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to use the `useSelect` hook to retrieve and manage state from the WordPress core data store, specifically fetching entity records and handling resolution states.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/data/README.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nimport { store as coreDataStore } from '@wordpress/core-data';\nimport { useSelect } from '@wordpress/data';\n\nfunction Component() {\n\tconst result = useSelect( ( select ) => {\n\t\tconst query = { per_page: 20 };\n\t\tconst selectorArgs = [ 'postType', 'page', query ];\n\n\t\treturn {\n\t\t\tpages: select( coreDataStore ).getEntityRecords( ...selectorArgs ),\n\t\t\thasStartedResolution: select( coreDataStore ).hasStartedResolution(\n\t\t\t\t'getEntityRecords', // _selectorName_\n\t\t\t\tselectorArgs\n\t\t\t),\n\t\t\thasFinishedResolution: select(\n\t\t\t\tcoreDataStore\n\t\t\t).hasFinishedResolution( 'getEntityRecords', selectorArgs ),\n\t\t\tisResolving: select( coreDataStore ).isResolving(\n\t\t\t\t'getEntityRecords',\n\t\t\t\tselectorArgs\n\t\t\t),\n\t\t};\n\t} );\n\n\tif ( result.hasStartedResolution ) {\n\t\treturn <>Fetching data...</>;\n\t}\n\n\tif ( result.isResolving ) {\n\t\treturn (\n\t\t\t<> {\n\t\t\t\t// show a spinner\n\t\t\t} </>\n\t\t);\n\t}\n\n\tif ( result.hasFinishedResolution ) {\n\t\treturn (\n\t\t\t<> {\n\t\t\t\t// data is ready\n\t\t\t} </>\n\t\t);\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Post Template in WordPress\nDESCRIPTION: This PHP snippet shows how to create a post template that preloads the block editor with a set of blocks for a specific post type. This is different from InnerBlocks and applies to the entire post.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/block-tutorial/nested-blocks-inner-blocks.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nadd_action( 'init', function() {\n\t$post_type_object = get_post_type_object( 'post' );\n\t$post_type_object->template = array(\n\t\tarray( 'core/image' ),\n\t\tarray( 'core/heading' )\n\t);\n} );\n```\n\n----------------------------------------\n\nTITLE: Core Router Store Configuration\nDESCRIPTION: Definition of the core/router store with its state and actions for handling navigation and prefetching.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/interactivity-router/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { state, actions } = store( 'core/router', {\n\tstate: {\n\t\turl: window.location.href,\n\t\tnavigation: {\n\t\t\thasStarted: false,\n\t\t\thasFinished: false,\n\t\t\ttexts: {\n\t\t\t\tloading: '',\n\t\t\t\tloaded: '',\n\t\t\t},\n\t\t\tmessage: '',\n\t\t},\n\t},\n\tactions: {\n\t\t*navigate(href, options) {...},\n\t\tprefetch(url, options) {...},\n\t}\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Edit Control for Fields (JavaScript)\nDESCRIPTION: Example of creating a custom Edit component for a field. It receives data, field definition, onChange callback, and visibility props, and returns a React element for editing the field's value.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/dataviews/README.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n{\n\tEdit: ( { data, field, onChange, hideLabelFromVision } ) => {\n\t\tconst value = field.getValue( { item: data } );\n\n\t\treturn (\n\t\t\t<CustomTimePicker\n\t\t\t\tvalue={ value }\n\t\t\t\tonChange={ onChange }\n\t\t\t\thideLabelFromVision\n\t\t\t/>\n\t\t);\n\t};\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Info Notice with createInfoNotice Action\nDESCRIPTION: Shows how to create an info notice that cannot be dismissed using the createInfoNotice action.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core-notices.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { __ } from '@wordpress/i18n';\nimport { useDispatch } from '@wordpress/data';\nimport { store as noticesStore } from '@wordpress/notices';\nimport { Button } from '@wordpress/components';\n\nconst ExampleComponent = () => {\n\tconst { createInfoNotice } = useDispatch( noticesStore );\n\treturn (\n\t\t<Button\n\t\t\tonClick={ () =>\n\t\t\t\tcreateInfoNotice( __( 'Something happened!' ), {\n\t\t\t\t\tisDismissible: false,\n\t\t\t\t} )\n\t\t\t}\n\t\t>\n\t\t\t{ __( 'Generate a notice that cannot be dismissed.' ) }\n\t\t</Button>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing withFocusReturn HOC in React Component\nDESCRIPTION: This snippet demonstrates how to use the withFocusReturn higher-order component to create a component that returns focus to the previous input when unmounted. It includes a parent component that manages state and renders the enhanced component conditionally.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/higher-order/with-focus-return/README.md#2025-04-21_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport { useState } from 'react';\nimport { withFocusReturn, TextControl, Button } from '@wordpress/components';\n\nconst EnhancedComponent = withFocusReturn( () => (\n\t<div>\n\t\tFocus will return to the previous input when this component is unmounted\n\t\t<TextControl\n\t\t\t__nextHasNoMarginBottom\n\t\t\t__next40pxDefaultSize\n\t\t\tautoFocus={ true }\n\t\t\tonChange={ () => {} }\n\t\t/>\n\t</div>\n) );\n\nconst MyComponentWithFocusReturn = () => {\n\tconst [ text, setText ] = useState( '' );\n\tconst unmount = () => {\n\t\tdocument.activeElement.blur();\n\t\tsetText( '' );\n\t};\n\n\treturn (\n\t\t<div>\n\t\t\t<TextControl\n\t\t\t\t__nextHasNoMarginBottom\n\t\t\t\t__next40pxDefaultSize\n\t\t\t\tplaceholder=\"Type something\"\n\t\t\t\tvalue={ text }\n\t\t\t\tonChange={ ( value ) => setText( value ) }\n\t\t\t/>\n\t\t\t{ text && <EnhancedComponent /> }\n\t\t\t{ text && (\n\t\t\t\t<Button variant=\"secondary\" onClick={ unmount }>\n\t\t\t\t\tUnmount\n\t\t\t\t</Button>\n\t\t\t) }\n\t\t</div>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Enabling Responsive Embeds in WordPress\nDESCRIPTION: PHP code to enable responsive embedded content in WordPress. This allows embed blocks to maintain their aspect ratio when resizing by adding theme support for responsive embeds.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/themes/theme-support.md#2025-04-21_snippet_25\n\nLANGUAGE: php\nCODE:\n```\nadd_theme_support( 'responsive-embeds' );\n```\n\n----------------------------------------\n\nTITLE: Enabling Border Controls in WordPress\nDESCRIPTION: PHP code to enable all border settings in WordPress. This allows users to customize border properties for blocks through the editor interface.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/themes/theme-support.md#2025-04-21_snippet_31\n\nLANGUAGE: php\nCODE:\n```\nadd_theme_support( 'border' );\n```\n\n----------------------------------------\n\nTITLE: Implementing DropdownMenu with Button Controls in React - JSX\nDESCRIPTION: This snippet demonstrates how to render a DropdownMenu component with a set of controls in a React application. The DropdownMenu uses WordPress icons and maps each menu item to an onClick action logging the direction selected. Dependencies include '@wordpress/components' and '@wordpress/icons'. The component accepts props such as 'icon', 'label', and 'controls', each defining the DropdownMenu behavior and of which 'label' is required. The expected output is a button that expands to a menu listing directional choices when clicked.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/dropdown-menu/README.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { DropdownMenu } from '@wordpress/components';\nimport {\n\tmore,\n\tarrowLeft,\n\tarrowRight,\n\tarrowUp,\n\tarrowDown,\n} from '@wordpress/icons';\n\nconst MyDropdownMenu = () => (\n\t<DropdownMenu\n\t\ticon={ more }\n\t\tlabel=\"Select a direction\"\n\t\tcontrols={ [\n\t\t\t{\n\t\t\t\ttitle: 'Up',\n\t\t\t\ticon: arrowUp,\n\t\t\t\tonClick: () => console.log( 'up' ),\n\t\t\t},\n\t\t\t{\n\t\t\t\ttitle: 'Right',\n\t\t\t\ticon: arrowRight,\n\t\t\t\tonClick: () => console.log( 'right' ),\n\t\t\t},\n\t\t\t{\n\t\t\t\ttitle: 'Down',\n\t\t\t\ticon: arrowDown,\n\t\t\t\tonClick: () => console.log( 'down' ),\n\t\t\t},\n\t\t\t{\n\t\t\t\ttitle: 'Left',\n\t\t\t\ticon: arrowLeft,\n\t\t\t\tonClick: () => console.log( 'left' ),\n\t\t\t},\n\t\t] }\n\t/>\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Nested CSS Rules with Media Queries in PHP\nDESCRIPTION: Illustrates how to create nested CSS rules with media queries using wp_style_engine_get_stylesheet_from_css_rules(). This example shows the usage of the 'rules_group' key for creating media query blocks.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/style-engine/README.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$styles = array(\n    array(\n        'rules_group'  => '@media (min-width: 80rem)',\n        'selector'     => '.wp-carrot',\n        'declarations' => array( 'color' => 'orange' )\n    ),\n    array(\n        'rules_group'  => '@media (min-width: 80rem)',\n        'selector'     => '.wp-tomato',\n        'declarations' => array( 'color' => 'red' )\n    ),\n);\n\n$stylesheet = wp_style_engine_get_stylesheet_from_css_rules(\n    $styles,\n    array(\n        'context' => 'block-supports', // Indicates that these styles should be stored with block supports CSS.\n    )\n);\nprint_r( $stylesheet ); // @media (min-width: 80rem){.wp-carrot{color:orange}}@media (min-width: 80rem){.wp-tomato{color:red;}}\n```\n\n----------------------------------------\n\nTITLE: Disabling Heading Text Color in Media & Text Blocks with JavaScript\nDESCRIPTION: Implementation of blockEditor.useSetting.before filter to disable text color controls for Heading blocks within Media & Text blocks\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/curating-the-editor-experience/filters-and-hooks.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { select } from  '@wordpress/data';\nimport { addFilter } from '@wordpress/hooks';\n\n/**\n * Disable text color controls on Heading blocks when placed inside of Media & Text blocks.\n */\naddFilter(\n\t'blockEditor.useSetting.before',\n\t'example/useSetting.before',\n\t( settingValue, settingName, clientId, blockName ) => {\n\t\tif ( blockName === 'core/heading' ) {\n\t\t\tconst { getBlockParents, getBlockName } = select( 'core/block-editor' );\n\t\t\tconst blockParents = getBlockParents( clientId, true );\n\t\t\tconst inMediaText = blockParents.some( ( ancestorId ) => getBlockName( ancestorId ) === 'core/media-text' );\n\n\t\t\tif ( inMediaText && settingName === 'color.text' ) {\n\t\t\t    return false;\n\t\t\t}\n\t\t}\n\n\t\treturn settingValue;\n\t}\n);\n```\n\n----------------------------------------\n\nTITLE: Modifying Featured Image Size in JavaScript\nDESCRIPTION: Demonstrates how to change the image size displayed in the Post Featured Image component using a JavaScript filter.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/filters/editor-filters.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { addFilter } from '@wordpress/hooks';\n\nconst withImageSize = function ( size, mediaId, postId ) {\n\treturn 'large';\n};\n\naddFilter(\n\t'editor.PostFeaturedImage.imageSize',\n\t'my-plugin/with-image-size',\n\twithImageSize\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Status Indicators in EditPageForm Component (JSX)\nDESCRIPTION: This code demonstrates how to implement status indicators for saving and edit states in the EditPageForm component using Gutenberg data selectors.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/data-basics/3-building-an-edit-form.md#2025-04-21_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nfunction EditPageForm( { pageId, onSaveFinished } ) {\n\t// ...\n\tconst { isSaving, hasEdits, /* ... */ } = useSelect(\n\t\tselect => ({\n\t\t\tisSaving: select( coreDataStore ).isSavingEntityRecord( 'postType', 'page', pageId ),\n\t\t\thasEdits: select( coreDataStore ).hasEditsForEntityRecord( 'postType', 'page', pageId ),\n\t\t\t// ...\n\t\t}),\n\t\t[ pageId ]\n\t)\n\n\treturn (\n\t\t// ...\n\t\t<div className=\"form-buttons\">\n\t\t\t<Button onClick={ handleSave } variant=\"primary\" disabled={ ! hasEdits || isSaving }>\n\t\t\t\t{ isSaving ? (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<Spinner/>\n\t\t\t\t\t\tSaving\n\t\t\t\t\t</>\n\t\t\t\t) : 'Save' }\n\t\t\t</Button>\n\t\t\t<Button\n\t\t\t\tonClick={ onCancel }\n\t\t\t\tvariant=\"tertiary\"\n\t\t\t\tdisabled={ isSaving }\n\t\t\t>\n\t\t\t\tCancel\n\t\t\t</Button>\n\t\t</div>\n\t\t// ...\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving CSS Rules as JSON\nDESCRIPTION: The getCSSRules function converts generated CSS rules into a JSON format. It requires a style object as an input, similar to compileCSS, and outputs an array of objects representing CSS properties and values.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/style-engine/README.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/*\n### getCSSRules\n\nReturns a JSON representation of the generated CSS rules.\n\n_Parameters_\n\n-   _style_ `Style`: Style object, for example, the value of a block's attributes.style object or the top level styles in theme.json\n-   _options_ `StyleOptions`: Options object with settings to adjust how the styles are generated.\n\n_Returns_\n\n-   `GeneratedCSSRule[]`: A collection of objects containing the selector, if any, the CSS property key (camelcase) and parsed CSS value.\n\n_Changelog_\n\n`6.1.0` Introduced in WordPress core.\n*/\n```\n\n----------------------------------------\n\nTITLE: Using FontSizePicker Component\nDESCRIPTION: This code snippet demonstrates how to use the FontSizePicker component. It initializes a state variable for the font size, defines an array of font sizes, and sets a fallback font size. The component's `onChange` prop is used to update the font size state when a new size is selected.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/src/components/font-sizes/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { FontSizePicker } from '@wordpress/block-editor';\nimport { useState } from '@wordpress/element';\nimport { __ } from '@wordpress/i18n';\n\n...\nconst MyFontSizePicker = () => {\n\tconst [ fontSize, setFontSize ] = useState( 16 );\n\tconst fontSizes = [\n\t\t{\n\t\t\tname: __( 'Small' ),\n\t\t\tslug: 'small',\n\t\t\tsize: 12,\n\t\t},\n\t\t{\n\t\t\tname: __( 'Big' ),\n\t\t\tslug: 'big',\n\t\t\tsize: 26,\n\t\t},\n\t];\n\tconst fallbackFontSize = 16;\n\n\treturn (\n\t\t<FontSizePicker\n\t\t\tvalue={ fontSize }\n\t\t\tfallbackFontSize={ fallbackFontSize }\n\t\t\tonChange={ ( newFontSize ) => {\n\t\t\t\tsetFontSize( newFontSize );\n\t\t\t} }\n\t\t/>\n\t);\n} );\n\n...\n\n<MyFontSizePicker />\n```\n\n----------------------------------------\n\nTITLE: Handling Window Resize Events with wp-on-window Directive\nDESCRIPTION: Shows how to use the wp-on-window directive to attach event listeners to window events like resize. When the window is resized, the logWidth callback is executed.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/api-reference.md#2025-04-21_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n<div data-wp-on-window--resize=\"callbacks.logWidth\"></div>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Dimension Panel in Gutenberg with JSX\nDESCRIPTION: This code snippet demonstrates the implementation of a Dimension Panel utilizing the experimental ToolsPanel component in Gutenberg. Dependencies include WordPress components and Emotion for styling. The panel allows users to set dimensions like height, width, padding, and margin, with options to reset all values. Key parameters include props such as `hasValue`, `label`, and event handlers like `onChange`.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/tools-panel/tools-panel/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n/**\n * External dependencies\n */\nimport styled from '@emotion/styled';\n\n/**\n * WordPress dependencies\n */\nimport {\n\tBoxControl,\n\t__experimentalToolsPanel as ToolsPanel,\n\t__experimentalToolsPanelItem as ToolsPanelItem,\n\t__experimentalUnitControl as UnitControl,\n} from '@wordpress/components';\nimport { __ } from '@wordpress/i18n';\n\nconst PanelDescription = styled.div`\n\tgrid-column: span 2;\n`;\n\nconst SingleColumnItem = styled( ToolsPanelItem )`\n\tgrid-column: span 1;\n`;\n\nexport function DimensionPanel() {\n\tconst [ height, setHeight ] = useState();\n\tconst [ width, setWidth ] = useState();\n\tconst [ padding, setPadding ] = useState();\n\tconst [ margin, setMargin ] = useState();\n\n\tconst resetAll = () => {\n\t\tsetHeight( undefined );\n\t\tsetWidth( undefined );\n\t\tsetPadding( undefined );\n\t\tsetMargin( undefined );\n\t};\n\n\treturn (\n\t\t<ToolsPanel label={ __( 'Dimensions' ) } resetAll={ resetAll }>\n\t\t\t<PanelDescription>\n\t\t\t\tSelect dimensions or spacing related settings from the menu for\n\t\t\t\tadditional controls.\n\t\t\t</PanelDescription>\n\t\t\t<SingleColumnItem\n\t\t\t\thasValue={ () => !! height }\n\t\t\t\tlabel={ __( 'Height' ) }\n\t\t\t\tonDeselect={ () => setHeight( undefined ) }\n\t\t\t\tisShownByDefault\n\t\t\t>\n\t\t\t\t<UnitControl\n\t\t\t\t\t__next40pxDefaultSize\n\t\t\t\t\tlabel={ __( 'Height' ) }\n\t\t\t\t\tonChange={ setHeight }\n\t\t\t\t\tvalue={ height }\n\t\t\t\t/>\n\t\t\t</SingleColumnItem>\n\t\t\t<SingleColumnItem\n\t\t\t\thasValue={ () => !! width }\n\t\t\t\tlabel={ __( 'Width' ) }\n\t\t\t\tonDeselect={ () => setWidth( undefined ) }\n\t\t\t\tisShownByDefault\n\t\t\t>\n\t\t\t\t<UnitControl\n\t\t\t\t\t__next40pxDefaultSize\n\t\t\t\t\tlabel={ __( 'Width' ) }\n\t\t\t\t\tonChange={ setWidth }\n\t\t\t\t\tvalue={ width }\n\t\t\t\t/>\n\t\t\t</SingleColumnItem>\n\t\t\t<ToolsPanelItem\n\t\t\t\thasValue={ () => !! padding }\n\t\t\t\tlabel={ __( 'Padding' ) }\n\t\t\t\tonDeselect={ () => setPadding( undefined ) }\n\t\t\t>\n\t\t\t\t<BoxControl\n\t\t\t\t\t__next40pxDefaultSize\n\t\t\t\t\tlabel={ __( 'Padding' ) }\n\t\t\t\t\tonChange={ setPadding }\n\t\t\t\t\tvalues={ padding }\n\t\t\t\t\tallowReset={ false }\n\t\t\t\t/>\n\t\t\t</ToolsPanelItem>\n\t\t\t<ToolsPanelItem\n\t\t\t\thasValue={ () => !! margin }\n\t\t\t\tlabel={ __( 'Margin' ) }\n\t\t\t\tonDeselect={ () => setMargin( undefined ) }\n\t\t\t>\n\t\t\t\t<BoxControl\n\t\t\t\t\t__next40pxDefaultSize\n\t\t\t\t\tlabel={ __( 'Margin' ) }\n\t\t\t\t\tonChange={ setMargin }\n\t\t\t\t\tvalues={ margin }\n\t\t\t\t\tallowReset={ false }\n\t\t\t\t/>\n\t\t\t</ToolsPanelItem>\n\t\t</ToolsPanel>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Enqueuing Editor Assets in WordPress using wp-scripts Output\nDESCRIPTION: PHP function to enqueue JavaScript assets in the WordPress editor, utilizing the asset file generated by wp-scripts.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/getting-started/devenv/get-started-with-wp-scripts.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Enqueue Editor assets.\n */\nfunction example_project_enqueue_editor_assets() {\n    $asset_file = include( plugin_dir_path( __FILE__ ) . 'build/index.asset.php');\n\n    wp_enqueue_script(\n        'example-editor-scripts',\n        plugins_url( 'build/index.js', __FILE__ ),\n        $asset_file['dependencies'],\n        $asset_file['version']\n    );\n}\nadd_action( 'enqueue_block_editor_assets', 'example_project_enqueue_editor_assets' );\n```\n\n----------------------------------------\n\nTITLE: Implementing ResponsiveBlockControl in Gutenberg Block\nDESCRIPTION: Example implementation of ResponsiveBlockControl within a block's edit function. Shows how to set up responsive padding controls with state management and viewport handling.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/src/components/responsive-block-control/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { registerBlockType } from '@wordpress/blocks';\nimport {\n\tInspectorControls,\n\t__experimentalResponsiveBlockControl as ResponsiveBlockControl,\n} from '@wordpress/block-editor';\n\nregisterBlockType( 'my-plugin/my-block', {\n\t// ...\n\n\tedit( { attributes, setAttributes } ) {\n\n\t\tconst [ isResponsive, setIsResponsive ] = useState( false );\n\t\tconst { paddingSize } = attributes;\n\n\t\t// Your custom control can be anything you'd like to use.\n\t\tconst paddingControl = ( labelComponent, viewport ) => {\n\t\t\treturn (\n\t\t\t\t<input\n\t\t\t\t\ttype=\"number\"\n\t\t\t\t\tlabel={ viewport.label }\n\t\t\t\t\tonChange={ // handle update to padding value here  }\n\t\t\t\t\tvalue={ paddingSize }\n\t\t\t\t/>\n\t\t\t);\n\t\t};\n\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<InspectorControls>\n\t\t\t\t\t<ResponsiveBlockControl\n\t\t\t\t\t\ttitle='Block Padding'\n\t\t\t\t\t\tproperty='padding'\n\t\t\t\t\t\trenderDefaultControl={paddingControl}\n\t\t\t\t\t\tisResponsive={ isResponsive }\n\t\t\t\t\t\tonIsResponsiveChange={ () => {\n\t\t\t\t\t\t\tsetIsResponsive( ! isResponsive );\n\t\t\t\t\t\t} }\n\t\t\t\t\t/>\n\t\t\t\t</InspectorControls>\n\t\t\t\t<div>\n\t\t\t\t\t// your Block here\n\t\t\t\t</div>\n\t\t\t</>\n\t\t);\n\t}\n} );\n```\n\n----------------------------------------\n\nTITLE: Line Height Support Configuration\nDESCRIPTION: Example of style attributes structure when lineHeight support is enabled.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-supports.md#2025-04-21_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\nattributes: {\n    style: {\n        type: 'object',\n        default: {\n            typography: {\n                lineHeight: 'value'\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Redux Store with Controls for Temperature API in JavaScript\nDESCRIPTION: This code demonstrates how to create a Redux store using controls to save temperature to an API, showing the indirection involved.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/thunks.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst store = wp.data.createReduxStore( 'my-store', {\n    actions: {\n        saveTemperatureToAPI: function*( temperature ) {\n            const result = yield { type: 'FETCH_JSON', url: 'https://...', method: 'POST', data: { temperature } };\n            return result;\n        }\n    },\n    controls: {\n        async FETCH_JSON( action ) {\n            const response = await window.fetch( action.url, {\n                method: action.method,\n                body: JSON.stringify( action.data ),\n            } );\n            return response.json();\n        }\n    },\n    // reducers, selectors, ...\n} );\n```\n\n----------------------------------------\n\nTITLE: Implementing BottomSheet Navigation in React using WordPress components\nDESCRIPTION: Example showing how to create a bottom sheet with multiple navigation screens. The example demonstrates a settings panel with navigation between a main settings screen and a colors screen, using the BottomSheet component with NavigationContainer and NavigationScreen subcomponents.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/mobile/bottom-sheet/bottom-sheet-navigation/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { BottomSheet } from '@wordpress/components';\n\nconst BottomSheetWithNavigation = () => (\n\t<BottomSheet hasNavigation>\n\t\t   \n\t\t<BottomSheet.NavigationContainer>\n\t\t\t     \n\t\t\t<BottomSheet.NavigationScreen name={ 'Settings' }>\n\t\t\t\t<InspectorControls.Slot />\n\t\t\t</BottomSheet.NavigationScreen>\n\t\t\t      <BottomSheet.NavigationScreen name={ 'Colors' }>\n\t\t\t\t<ColorSettings defaultSettings={ settings } />    \n\t\t\t</BottomSheet.NavigationScreen>   \n\t\t</BottomSheet.NavigationContainer>\n\t\t \n\t</BottomSheet>\n);\n```\n\n----------------------------------------\n\nTITLE: Disabling Color Controls for Specific Blocks with register_block_type_args Filter in PHP\nDESCRIPTION: This example demonstrates how to use the register_block_type_args filter to disable color controls for Paragraph, Heading, List, and List Item blocks.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/filters/block-filters.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nfunction example_disable_color_for_specific_blocks( $args, $block_type ) {\n\n\t// List of block types to modify.\n\t$block_types_to_modify = [\n\t\t'core/paragraph',\n\t\t'core/heading',\n\t\t'core/list',\n\t\t'core/list-item'\n\t];\n\n\t// Check if the current block type is in the list.\n\tif ( in_array( $block_type, $block_types_to_modify, true ) ) {\n\t\t// Disable color controls.\n\t\t$args['supports']['color'] = array(\n\t\t\t'text'       => false,\n\t\t\t'background' => false,\n\t\t\t'link'       => false,\n\t\t);\n\t}\n\n\treturn $args;\n}\nadd_filter( 'register_block_type_args', 'example_disable_color_for_specific_blocks', 10, 2 );\n```\n\n----------------------------------------\n\nTITLE: Server-side Rendering for Dynamic Block in PHP\nDESCRIPTION: PHP implementation for server-side rendering of the dynamic block. Includes block registration and render callback function to display the latest post.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/block-tutorial/creating-dynamic-blocks.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n/**\n * Plugin Name: Gutenberg examples dynamic\n */\n\nfunction gutenberg_examples_dynamic_render_callback( $block_attributes, $content ) {\n\t$recent_posts = wp_get_recent_posts( array(\n\t\t'numberposts' => 1,\n\t\t'post_status' => 'publish',\n\t) );\n\tif ( count( $recent_posts ) === 0 ) {\n\t\treturn 'No posts';\n\t}\n\t$post = $recent_posts[ 0 ];\n\t$post_id = $post['ID'];\n\treturn sprintf(\n\t\t'<a class=\"wp-block-my-plugin-latest-post\" href=\"%1$s\">%2$s</a>',\n\t\tesc_url( get_permalink( $post_id ) ),\n\t\tesc_html( get_the_title( $post_id ) )\n\t);\n}\n\nfunction gutenberg_examples_dynamic() {\n\t// automatically load dependencies and version\n\t$asset_file = include( plugin_dir_path( __FILE__ ) . 'build/index.asset.php');\n\n\twp_register_script(\n\t\t'gutenberg-examples-dynamic',\n\t\tplugins_url( 'build/block.js', __FILE__ ),\n\t\t$asset_file['dependencies'],\n\t\t$asset_file['version']\n\t);\n\n\tregister_block_type( 'gutenberg-examples/example-dynamic', array(\n\t\t'api_version' => 3,\n\t\t'editor_script' => 'gutenberg-examples-dynamic',\n\t\t'render_callback' => 'gutenberg_examples_dynamic_render_callback'\n\t) );\n\n}\nadd_action( 'init', 'gutenberg_examples_dynamic' );\n```\n\n----------------------------------------\n\nTITLE: Enabling Link Color Support in WordPress Gutenberg\nDESCRIPTION: This snippet demonstrates how to enable link color support for a block in WordPress Gutenberg. It allows users to set link text colors.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-supports.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nsupports: {\n\tcolor: {\n\t\tlink: true\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Color Support in WordPress Gutenberg\nDESCRIPTION: This snippet demonstrates how to enable general color support for a block in WordPress Gutenberg. It enables both background and text color support.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-supports.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nsupports: {\n\tcolor: true // Enables background and text, but not link.\n}\n```\n\n----------------------------------------\n\nTITLE: Removing All Block Bindings in WordPress Gutenberg\nDESCRIPTION: This snippet shows how to use the removeAllBlockBindings function to remove all existing connections in a block by removing the metadata.bindings attribute.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-bindings.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useBlockBindingsUtils } from '@wordpress/block-editor';\n\nconst { removeAllBlockBindings } = useBlockBindingsUtils();\n\nfunction clearBlockBindings() {\n\tremoveAllBlockBindings();\n}\n```\n\n----------------------------------------\n\nTITLE: Save Function for Record Block\nDESCRIPTION: This snippet demonstrates the save function for the 'record' block. It renders the record ID as a paragraph element.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-context.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function save( props ) {\n\treturn <p>The record ID: { props.attributes.recordId }</p>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing useConstrainedTabbing Hook in React Component\nDESCRIPTION: Demonstrates how to use the `useConstrainedTabbing` hook from @wordpress/compose to restrict tabbing within a specific div container. The hook returns a ref that is applied to the wrapper element to control keyboard navigation.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/compose/src/hooks/use-constrained-tabbing/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useConstrainedTabbing } from '@wordpress/compose';\n\nconst ConstrainedTabbingExample = () => {\n\tconst ref = useConstrainedTabbing();\n\treturn (\n\t\t<div ref={ ref }>\n\t\t\t<Button />\n\t\t\t<Button />\n\t\t</div>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of getRangeAt Method\nDESCRIPTION: Shows unsafe usage of getRangeAt that could throw errors when no ranges exist in the selection.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/eslint-plugin/docs/rules/no-unguarded-get-range-at.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.getSelection().getRangeAt( 0 );\n```\n\n----------------------------------------\n\nTITLE: Unregistering Block Style with JavaScript\nDESCRIPTION: Shows how to remove an existing block style from the quote block using JavaScript.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-styles.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nwp.blocks.unregisterBlockStyle( 'core/quote', 'large' );\n```\n\n----------------------------------------\n\nTITLE: Styling Block Variation in WordPress Theme JSON\nDESCRIPTION: Example of providing styles for the 'plain' variation of the 'core/quote' block using theme.json. This sets a red background color for the plain quote style.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/themes/global-settings-and-styles.md#2025-04-21_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"version\": 3,\n\t\"styles\": {\n\t\t\"blocks\": {\n\t\t\t\"core/quote\": {\n\t\t\t\t\"variations\": {\n\t\t\t\t\t\"plain\": {\n\t\t\t\t\t\t\"color\": {\n\t\t\t\t\t\t\t\"background\": \"red\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SearchControl Component in React with useState\nDESCRIPTION: Example showing how to implement the SearchControl component with React's useState hook. The component renders a search input field with a label and tracks state changes through the useState hook and onChange handler.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/search-control/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { __ } from '@wordpress/i18n';\nimport { SearchControl } from '@wordpress/components';\n\nfunction MySearchControl( { className, setState } ) {\n    const [ searchInput, setSearchInput ] = useState( '' );\n\n    return (\n        <SearchControl\n            __nextHasNoMarginBottom\n            label={ __( 'Search posts' ) }\n            value={ searchInput }\n            onChange={ setSearchInput }\n        />\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Destructuring Store with TypeScript Type Inference\nDESCRIPTION: Example of destructuring a store object while maintaining proper TypeScript type inference. Shows how state can be referenced directly in actions and callbacks.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/core-concepts/using-typescript.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst { state } = store( 'myCounterPlugin', {\n\tstate: {\n\t\tcounter: 0,\n\t},\n\tactions: {\n\t\tincrement() {\n\t\t\tstate.counter += 1;\n\t\t},\n\t},\n\tcallbacks: {\n\t\tlog() {\n\t\t\tconsole.log( `counter: ${ state.counter }` );\n\t\t},\n\t},\n} );\n```\n\n----------------------------------------\n\nTITLE: Implementing MenuItemsChoice Component with React Hooks in JSX\nDESCRIPTION: This example demonstrates how to implement the MenuItemsChoice component within a MenuGroup. It uses React useState hook to manage the selected mode and defines choices as an array of objects with value and label properties. The component renders a menu group with selectable options for switching between visual and code editors.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/menu-items-choice/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { MenuGroup, MenuItemsChoice } from '@wordpress/components';\n\nconst MyMenuItemsChoice = () => {\n\tconst [ mode, setMode ] = useState( 'visual' );\n\tconst choices = [\n\t\t{\n\t\t\tvalue: 'visual',\n\t\t\tlabel: 'Visual editor',\n\t\t},\n\t\t{\n\t\t\tvalue: 'text',\n\t\t\tlabel: 'Code editor',\n\t\t},\n\t];\n\n\treturn (\n\t\t<MenuGroup label=\"Editor\">\n\t\t\t<MenuItemsChoice\n\t\t\t\tchoices={ choices }\n\t\t\t\tvalue={ mode }\n\t\t\t\tonSelect={ ( newMode ) => setMode( newMode ) }\n\t\t\t/>\n\t\t</MenuGroup>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Importing and Using the Placeholder Component\nDESCRIPTION: This snippet demonstrates how to import the Placeholder component from the '@wordpress/components' library and use it within a React component. The Placeholder component displays a placeholder UI with an icon and a label.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/placeholder/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Placeholder } from '@wordpress/components';\nimport { more } from '@wordpress/icons';\n\nconst MyPlaceholder = () => <Placeholder icon={ more } label=\"Placeholder\" />;\n```\n\n----------------------------------------\n\nTITLE: Creating a Toggle MenuItem in React\nDESCRIPTION: Example of creating a toggleable MenuItem component with useState hook. The component displays different icons based on its active state and toggles the state when clicked.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/menu-item/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { MenuItem } from '@wordpress/components';\n\nconst MyMenuItem = () => {\n\tconst [ isActive, setIsActive ] = useState( true );\n\n\treturn (\n\t\t<MenuItem\n\t\t\ticon={ isActive ? 'yes' : 'no' }\n\t\t\tisSelected={ isActive }\n\t\t\tonClick={ () => setIsActive( ( state ) => ! state ) }\n\t\t>\n\t\t\tToggle\n\t\t</MenuItem>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering MultiSelectionInspector Component in React\nDESCRIPTION: This code snippet demonstrates how to import and render the MultiSelectionInspector component conditionally based on the selected block count in the WordPress block editor. It ensures that the component is only rendered when more than one block is selected.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/src/components/multi-selection-inspector/README.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { MultiSelectionInspector } from '@wordpress/block-editor';\n\nconst SelectedBlockCount = getSelectedBlockCount();\n\nif ( SelectedBlockCount > 1 ) {\n    const MyMultiSelectionInspector = () => <MultiSelectionInspector />;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Block Registration in PHP\nDESCRIPTION: Simple example of registering a WordPress block type using register_block_type() function with a render callback.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/getting-started/fundamentals/registration-of-a-block.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nregister_block_type(\n\t__DIR__ . '/build',\n\tarray(\n\t\t'render_callback' => 'render_block_core_notice',\n\t)\n);\n```\n\n----------------------------------------\n\nTITLE: Testing User Interactions with fireEvent in React\nDESCRIPTION: Example demonstrating how to test user interactions using the fireEvent API from Testing Library. This approach directly dispatches DOM events but is not recommended as it may not accurately represent real user interactions.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/testing-overview.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { render, screen } from '@testing-library/react';\n\ntest( 'fires onChange when a new value is typed', () => {\n\tconst spyOnChange = jest.fn();\n\n\t// A component with one `input` and one `select`.\n\trender( <MyComponent onChange={ spyOnChange } /> );\n\n\tconst input = screen.getByRole( 'textbox' );\n\tinput.focus();\n\t// No clicks, no key events.\n\tfireEvent.change( input, { target: { value: 62 } } );\n\n\t// The `onChange` callback gets called once with '62' as the argument.\n\texpect( spyOnChange ).toHaveBeenCalledTimes( 1 );\n\n\tconst select = screen.getByRole( 'listbox' );\n\tselect.focus();\n\t// No pointer events dispatched.\n\tfireEvent.change( select, { target: { value: 'optionValue' } } );\n\n\t// ...\n```\n\n----------------------------------------\n\nTITLE: Implementing Tabs in Uncontrolled Mode with React in JSX\nDESCRIPTION: Example of using the Tabs component in uncontrolled mode where the component manages its own state. The defaultTabId prop sets the initially selected tab, with an onSelect callback to handle tab selection events.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/tabs/stories/best-practices.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Tabs } from '@wordpress/components';\n\nconst onSelect = ( tabName ) => {\n\tconsole.log( 'Selecting tab', tabName );\n};\n\nconst MyUncontrolledTabs = () => (\n\t<Tabs onSelect={ onSelect } defaultTabId=\"tab2\">\n\t\t<Tabs.TabList>\n\t\t\t<Tabs.Tab tabId=\"tab1\" title=\"Tab 1\">\n\t\t\t\tTab 1\n\t\t\t</Tabs.Tab>\n\t\t\t<Tabs.Tab tabId=\"tab2\" title=\"Tab 2\">\n\t\t\t\tTab 2\n\t\t\t</Tabs.Tab>\n\t\t\t<Tabs.Tab tabId=\"tab3\" title=\"Tab 3\">\n\t\t\t\tTab 3\n\t\t\t</Tabs.Tab>\n\t\t</Tabs.TabList>\n\t\t<Tabs.TabPanel tabId=\"tab1\">\n\t\t\t<p>Selected tab: Tab 1</p>\n\t\t</Tabs.TabPanel>\n\t\t<Tabs.TabPanel tabId=\"tab2\">\n\t\t\t<p>Selected tab: Tab 2</p>\n\t\t</Tabs.TabPanel>\n\t\t<Tabs.TabPanel tabId=\"tab3\">\n\t\t\t<p>Selected tab: Tab 3</p>\n\t\t</Tabs.TabPanel>\n\t</Tabs>\n);\n```\n\n----------------------------------------\n\nTITLE: Using withDispatch HOC for Action Dispatching\nDESCRIPTION: Illustrates the use of withDispatch HOC to add dispatch props to a component, allowing it to trigger actions in the store.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/data/README.md#2025-04-21_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Button( { onClick, children } ) {\n\treturn (\n\t\t<button type=\"button\" onClick={ onClick }>\n\t\t\t{ children }\n\t\t</button>\n\t);\n}\n\nimport { withDispatch } from '@wordpress/data';\nimport { store as myCustomStore } from 'my-custom-store';\n\nconst SaleButton = withDispatch( ( dispatch, ownProps ) => {\n\tconst { startSale } = dispatch( myCustomStore );\n\tconst { discountPercent } = ownProps;\n\n\treturn {\n\t\tonClick() {\n\t\t\tstartSale( discountPercent );\n\t\t},\n\t};\n} )( Button );\n\n// Rendered in the application:\n//\n// <SaleButton discountPercent=\"20\">Start Sale!</SaleButton>\n```\n\n----------------------------------------\n\nTITLE: Configuring Persistence Layer for Preferences\nDESCRIPTION: This snippet shows how to set up a persistence layer for preferences in WordPress Gutenberg. It uses the setPersistenceLayer action to configure preference storage, either synchronously or asynchronously, often using local storage or an API.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/preferences/README.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nwp.data.dispatch( 'core/preferences' ).setPersistenceLayer( {\n\t// `get` is asynchronous to support persisting preferences using a REST API.\n\t// it will immediately be called by `setPersistenceLayer` and the returned\n\t// value used as the initial state of the preferences.\n\tasync get() {\n\t\treturn JSON.parse( window.localStorage.getItem( 'MY_PREFERENCES' ) );\n\t},\n\n\t// `set` is synchronous. It's ok to use asynchronous code, but the\n\t// preferences store won't wait for a promise to resolve, the function is\n\t// 'fire and forget'.\n\tset( preferences ) {\n\t\twindow.localStorage.setItem(\n\t\t\t'MY_PREFERENCES',\n\t\t\tJSON.stringify( preferences )\n\t\t);\n\t},\n} );\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Preloaded data from the server.\nlet cache = preloadedData;\nwp.data.dispatch( 'core/preferences' ).setPersistenceLayer( {\n\tasync get() {\n\t\tif ( cache ) {\n\t\t\treturn cache;\n\t\t}\n\n\t\t// Call to a made-up async API.\n\t\treturn await api.preferences.get();\n\t},\n\tset( preferences ) {\n\t\tcache = preferences;\n\t\tapi.preferences.set( { data: preferences } );\n\t},\n} );\n```\n\n----------------------------------------\n\nTITLE: Type Casting Client State with Server State in TypeScript\nDESCRIPTION: Example of typing both server and client state properties by manually casting the state object and allowing TypeScript to infer the rest of the store types.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/core-concepts/using-typescript.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ntype State = {\n\tcounter: number; // The server state.\n\tproduct: number; // The client state.\n};\n\nconst { state } = store( 'myCounterPlugin', {\n\tstate: {\n\t\tproduct: 2,\n\t} as State, // Casts the entire state manually.\n\tactions: {\n\t\tincrement() {\n\t\t\tstate.counter * state.product;\n\t\t},\n\t},\n} );\n```\n\n----------------------------------------\n\nTITLE: Using withViewportMatch Higher-Order Component\nDESCRIPTION: Example demonstrating the withViewportMatch higher-order component which injects viewport-related props into a component. This component receives an isMobile prop that updates based on the current viewport size.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/viewport/README.md#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nfunction MyComponent( { isMobile } ) {\n\treturn <div>Currently: { isMobile ? 'Mobile' : 'Not Mobile' }</div>;\n}\n\nMyComponent = withViewportMatch( { isMobile: '< small' } )( MyComponent );\n```\n\n----------------------------------------\n\nTITLE: Initializing Derived State on Server in PHP\nDESCRIPTION: This snippet demonstrates how to initialize derived state on the server using the wp_interactivity_state function. It shows both static and computed initialization methods.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/core-concepts/undestanding-global-state-local-context-and-derived-state.md#2025-04-21_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nwp_interactivity_state( 'myCounterPlugin', array(\n  'counter' => 1, // This is global state.\n  'double'  => 2, // This is derived state.\n));\n```\n\nLANGUAGE: php\nCODE:\n```\n$counter = 1;\n$double  = $counter * 2;\n\nwp_interactivity_state( 'myCounterPlugin', array(\n  'counter' => $counter, // This is global state.\n  'double'  => $double,  // This is derived state.\n));\n```\n\n----------------------------------------\n\nTITLE: Collecting Meta Box Data in WordPress\nDESCRIPTION: This code snippet demonstrates the process of collecting meta box data in WordPress to determine if an area is empty. It uses the register_and_do_post_meta_boxes function and runs through various hooks to register meta boxes.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/metabox.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nregister_and_do_post_meta_boxes()\n```\n\n----------------------------------------\n\nTITLE: Integrating Block Settings Menu with Gutenberg in JSX\nDESCRIPTION: This code snippet demonstrates how to import and utilize the BlockSettingsMenuControls component from Gutenberg's block editor library. It integrates a custom toggle button into the block settings menu, allowing for additional interactive functionality when the block is being edited. The snippet assumes familiarity with React components and requires Gutenberg's block-editor package as a dependency. It outputs a menu control with an interactive button that triggers when toggled.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/src/components/block-settings-menu-controls/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { BlockSettingsMenuControls } from '@wordress/block-editor';\nimport MyButton from './my-toggle-button';\n\nfunction ReusableBlocksMenuItems() {\n\treturn (\n\t\t<BlockSettingsMenuControls>\n\t\t\t{ ( { onClose } ) => <MyToggleButton onToggle={ onClose } /> }\n\t\t</BlockSettingsMenuControls>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Constrained Layout Group Block in WordPress Gutenberg\nDESCRIPTION: This code represents a WordPress Gutenberg group block with a constrained layout type. The HTML structure includes the opening and closing block comments that Gutenberg uses to identify blocks, along with the empty div that serves as the container.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/test/e2e/specs/editor/blocks/__snapshots__/Group-can-be-created-using-the-slash-inserter-1-chromium.txt#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"}} -->\n<div class=\"wp-block-group\"></div>\n<!-- /wp:group -->\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Sort Function for Fields (JavaScript)\nDESCRIPTION: Examples of defining custom sort functions for fields. These functions compare two items and determine their order based on a specified direction (ascending or descending).\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/dataviews/README.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n{\n\tsort: ( a, b, direction ) => {\n\t\treturn direction === 'asc'\n\t\t\t? a.localeCompare( b )\n\t\t\t: b.localeCompare( a );\n\t};\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n\ttype: 'number';\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n\ttype: 'number';\n\tsort: ( a, b, direction ) => {\n\t\t/* Custom sort */\n\t};\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Representation of Dynamic Server-Rendered Block\nDESCRIPTION: Shows how a dynamic block that needs to be rendered on the server is serialized to HTML, with attributes stored as a JSON object within the HTML comment.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/platform-docs/docs/basic-concepts/data.md#2025-04-21_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<!-- wp:latest-posts {\"postsToShow\":4,\"displayPostDate\":true} /-->\n```\n\n----------------------------------------\n\nTITLE: Enabling Shadow Controls in Gutenberg Blocks (JavaScript)\nDESCRIPTION: This snippet enables the box-shadow picker in the block by specifying `shadow` support in the `supports.property`, with attributes extended to include a style property for shadow settings.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-supports.md#2025-04-21_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nsupports: {\n\tshadow: true // Enable the box-shadow picker.\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Registry Selector - WordPress - JavaScript\nDESCRIPTION: The createRegistrySelector function initializes a selector function allowing selection from other registered stores using a curried select argument. It facilitates querying across multiple stores without manually passing a registry.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/data/README.md#2025-04-21_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { store as coreStore } from '@wordpress/core-data';\nimport { store as editorStore } from '@wordpress/editor';\n\nconst getCurrentPostId = createRegistrySelector( ( select ) => ( state ) => {\n\treturn select( editorStore ).getCurrentPostId();\n} );\n\nconst getPostEdits = createRegistrySelector( ( select ) => ( state ) => {\n\tconst postType = getCurrentPostType( state );\n\tconst postId = getCurrentPostId( state );\n\treturn select( coreStore ).getEntityRecordEdits(\n\t\t'postType',\n\t\tpostType,\n\t\tpostId\n\t);\n} );\n```\n\n----------------------------------------\n\nTITLE: Using InputControl Component in React\nDESCRIPTION: This snippet demonstrates how to import and use the InputControl component in a React functional component. It shows setting up state and handling onChange events.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/input-control/README.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { __experimentalInputControl as InputControl } from '@wordpress/components';\nimport { useState } from 'react';\n\nconst Example = () => {\n\tconst [ value, setValue ] = useState( '' );\n\n\treturn (\n\t\t<InputControl\n\t\t\t__next40pxDefaultSize\n\t\t\tvalue={ value }\n\t\t\tonChange={ ( nextValue ) => setValue( nextValue ?? '' ) }\n\t\t/>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Build Command (bash)\nDESCRIPTION: This bash command demonstrates a simple `wp-scripts build` command.  When executed in a directory containing a `block.json` file, it triggers the build process, automatically detecting and processing the JavaScript files specified in the metadata.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/scripts/README.md#2025-04-21_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nwp-scripts build\n```\n\n----------------------------------------\n\nTITLE: Handling File Selection Change - JSX\nDESCRIPTION: This snippet illustrates how to use the onClick prop to reset the file input value, which is useful for allowing the selection of the same file multiple times. It leverages the onChange prop to manage file selection.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/form-file-upload/README.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<FormFileUpload\n  __next40pxDefaultSize\n  onClick={ ( event ) => ( event.target.value = '' ) }\n  onChange={ onChange }\n>\n  Upload\n</FormFileUpload>\n```\n\n----------------------------------------\n\nTITLE: Registering a WordPress Block in PHP\nDESCRIPTION: This snippet demonstrates how to register a block on the server side in the main PHP file of a WordPress plugin using the register_block_type() function.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/getting-started/fundamentals/file-structure-of-a-block.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nregister_block_type()\n```\n\n----------------------------------------\n\nTITLE: Retrieving Block Type Information in React Component\nDESCRIPTION: Demonstrates the use of getBlockType selector to fetch information about a specific block type (core/paragraph). The component displays a list of supported features for the block.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core-blocks.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { store as blocksStore } from '@wordpress/blocks';\nimport { useSelect } from '@wordpress/data';\n\nconst ExampleComponent = () => {\n\tconst paragraphBlock = useSelect(\n\t\t( select ) => ( select ) =>\n\t\t\tselect( blocksStore ).getBlockType( 'core/paragraph' ),\n\t\t[]\n\t);\n\n\treturn (\n\t\t<ul>\n\t\t\t{ paragraphBlock &&\n\t\t\t\tObject.entries( paragraphBlock.supports ).map(\n\t\t\t\t\t( blockSupportsEntry ) => {\n\t\t\t\t\t\tconst [ propertyName, value ] = blockSupportsEntry;\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<li\n\t\t\t\t\t\t\t\tkey={ propertyName }\n\t\t\t\t\t\t\t>{ `${ propertyName } : ${ value }` }</li>\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t) }\n\t\t</ul>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Updating Meta Field on Input Change (JavaScript)\nDESCRIPTION: This snippet completes the functionality by adding the ability to update the meta field when the input content changes. It uses the useDispatch hook to update the editor store.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/plugin-sidebar-0.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n( function ( wp ) {\n\tvar el = React.createElement;\n\tvar registerPlugin = wp.plugins.registerPlugin;\n\tvar PluginSidebar = wp.editor.PluginSidebar;\n\tvar TextControl = wp.components.TextControl;\n\tvar useSelect = wp.data.useSelect;\n\tvar useDispatch = wp.data.useDispatch;\n\n\tvar MetaBlockField = function ( props ) {\n\t\tvar metaFieldValue = useSelect( function ( select ) {\n\t\t\treturn select( 'core/editor' ).getEditedPostAttribute(\n\t\t\t\t'meta'\n\t\t\t)[ 'sidebar_plugin_meta_block_field' ];\n\t\t}, [] );\n\n\t\tvar editPost = useDispatch( 'core/editor' ).editPost;\n\n\t\treturn el( TextControl, {\n\t\t\tlabel: 'Meta Block Field',\n\t\t\tvalue: metaFieldValue,\n\t\t\tonChange: function ( content ) {\n\t\t\t\teditPost( {\n\t\t\t\t\tmeta: { sidebar_plugin_meta_block_field: content },\n\t\t\t\t} );\n\t\t\t},\n\t\t} );\n\t};\n\n\tregisterPlugin( 'my-plugin-sidebar', {\n\t\trender: function () {\n\t\t\treturn el(\n\t\t\t\tPluginSidebar,\n\t\t\t\t{\n\t\t\t\t\tname: 'my-plugin-sidebar',\n\t\t\t\t\ticon: 'admin-post',\n\t\t\t\t\ttitle: 'My plugin sidebar',\n\t\t\t\t},\n\t\t\t\tel(\n\t\t\t\t\t'div',\n\t\t\t\t\t{ className: 'plugin-sidebar-content' },\n\t\t\t\t\tel( MetaBlockField )\n\t\t\t\t)\n\t\t\t);\n\t\t},\n\t} );\n} )( window.wp );\n```\n\n----------------------------------------\n\nTITLE: Using the Warning Function in React Components\nDESCRIPTION: Example of how to use the warning function in a React component to display a warning message when a required prop is missing. The warning will only be shown in non-production environments.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/warning/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport warning from '@wordpress/warning';\n\nfunction MyComponent( props ) {\n  if ( ! props.title ) {\n    warning( '`props.title` was not passed' );\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Selector Configuration in WordPress Gutenberg Block (JSON)\nDESCRIPTION: This example demonstrates a more complex selector configuration, including feature-specific selectors and subfeature overrides. It showcases the fallback mechanism for undefined selectors.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-selectors.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n\t...\n\t\"selectors\": {\n\t\t\"root\": \".my-custom-block-selector\",\n\t\t\"color\": {\n\t\t\t\"text\": \".my-custom-block-selector p\"\n\t\t},\n\t\t\"typography\": {\n\t\t\t\"root\": \".my-custom-block-selector > h2\",\n\t\t\t\"text-decoration\": \".my-custom-block-selector > h2 span\"\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Using an allow list for blocks\nDESCRIPTION: This JavaScript snippet uses an allow list to disable all blocks except for those specified in the `allowedBlocks` array. It iterates through all registered block types and unregisters any block that is not present in the allow list.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/filters/block-filters.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n// my-plugin.js\n\nvar allowedBlocks = [\n\t'core/paragraph',\n\t'core/image',\n\t'core/html',\n\t'core/freeform',\n];\n\nwp.blocks.getBlockTypes().forEach( function ( blockType ) {\n\tif ( allowedBlocks.indexOf( blockType.name ) === -1 ) {\n\t\twp.blocks.unregisterBlockType( blockType.name );\n\t}\n} );\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Document Event Callbacks for wp-on-document\nDESCRIPTION: Defines a store with a callback that logs the key pressed during a keydown event. This callback is used with the wp-on-document directive to respond to document keydown events.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/api-reference.md#2025-04-21_snippet_18\n\nLANGUAGE: js\nCODE:\n```\nstore( 'myPlugin', {\n\tcallbacks: {\n\t\tlogKeydown( event ) {\n\t\t\tconsole.log( 'Key pressed: ', event.key );\n\t\t},\n\t},\n} );\n```\n\n----------------------------------------\n\nTITLE: Populating EditPageForm with Page Details in JavaScript/JSX\nDESCRIPTION: This snippet updates the EditPageForm to use the getEntityRecord selector from Gutenberg Data to populate the form with the current page title.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/data-basics/3-building-an-edit-form.md#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nfunction EditPageForm( { pageId, onCancel, onSaveFinished } ) {\n\tconst page = useSelect(\n\t\tselect => select( coreDataStore ).getEntityRecord( 'postType', 'page', pageId ),\n\t\t[pageId]\n\t);\n\treturn (\n\t\t<div className=\"my-gutenberg-form\">\n\t\t\t<TextControl\n\t\t\t\t__nextHasNoMarginBottom\n\t\t\t\t__next40pxDefaultSize\n\t\t\t\tlabel='Page title:'\n\t\t\t\tvalue={ page.title.rendered }\n\t\t\t/>\n\t\t\t{ /* ... */ }\n\t\t</div>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering BlockPreview with Blocks and Viewport in JSX\nDESCRIPTION: This snippet demonstrates how to render the BlockPreview component with the essential 'blocks' and 'viewportWidth' props. The component displays blocks inside a preview container, allowing developers to specify its width. The 'blocks' can be a single block object or an array, while 'viewportWidth' sets the width of the preview container.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/src/components/block-preview/README.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript (JSX)\nCODE:\n```\n<BlockPreview blocks={ blocks } viewportWidth={ 800 } />\n```\n\n----------------------------------------\n\nTITLE: Multiple wp-init Directives on a Form Element\nDESCRIPTION: Demonstrates using multiple wp-init directives on the same DOM element by utilizing unique identifiers. This example logs initialization time and focuses the first input element.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/api-reference.md#2025-04-21_snippet_22\n\nLANGUAGE: html\nCODE:\n```\n<form\n\tdata-wp-init--log=\"callbacks.logTimeInit\"\n\tdata-wp-init--focus=\"callbacks.focusFirstElement\"\n>\n\t<input type=\"text\" />\n</form>\n```\n\n----------------------------------------\n\nTITLE: Creating a WebRTC Connection in JavaScript\nDESCRIPTION: Function to create a new WebRTC Connection. It takes a configuration object with signaling and password properties. Returns a Promise that resolves when the connection is established.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/sync/README.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncreateWebRTCConnection(config: { signaling: Array<string>, password: string }): Function\n```\n\n----------------------------------------\n\nTITLE: Using PreferencesModal with Tabs and Sections\nDESCRIPTION: This code snippet demonstrates how to use the `PreferencesModal` component with `PreferencesModalTabs` to create a modal with multiple preference sections.  It defines two sections, each with its own tab label and content within a `PreferencesModalSection`. It uses the `useDispatch` hook from the `editPostStore` to get the `closeModal` function and passes `closeModal` to the `PreferencesModal` component.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/preferences/src/components/preferences-modal/README.md#2025-04-21_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nfunction MyEditorPreferencesModal() {\n\tconst { closeModal } = useDispatch( editPostStore );\n\tconst sections = [\n\t\t{\n\t\t\tname: 'section 1',\n\t\t\ttabLabel: __( 'Section 1' ),\n\t\t\tcontent: (\n\t\t\t\t\t\t<PreferencesModalSection\n\t\t\t\t\t\t\ttitle={ __( 'Publishing' ) }\n\t\t\t\t\t\t\tdescription={ __( \n\t\t\t\t\t\t\t\t'Change options related to publishing.'\n\t\t\t\t\t\t\t) }\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<EnablePublishSidebarOption\n\t\t\t\t\t\t\t\thelp={ __( \n\t\t\t\t\t\t\t\t\t'Review settings, such as visibility and tags.'\n\t\t\t\t\t\t\t\t) }\n\t\t\t\t\t\t\t\tlabel={ __( \n\t\t\t\t\t\t\t\t\t'Enable pre-publish checks'\n\t\t\t\t\t\t\t\t) }\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</PreferencesModalSection>\n\t\t\t\t\t)\n\n\t\t}\n\t\t{\n\t\t\tname: 'section 2',\n\t\t\ttabLabel: __( 'Section 2' ),\n\t\t\tcontent: (\n\t\t\t\t\t\t<PreferencesModalSection\n\t\t\t\t\t\t\ttitle={ __( 'Additional' ) }\n\t\t\t\t\t\t\tdescription={ __( \n\t\t\t\t\t\t\t\t'Add extra areas to the editor.'\n\t\t\t\t\t\t\t) }\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t// Section content here\n\t\t\t\t\t\t</PreferencesModalSection>\n\t\t\t\t\t)\n\n\t\t}\n\t]\n\treturn (\n\t\t<PreferencesModal closeModal={ closeModal }>\n\t\t\t<PreferencesModalTabs sections={ sections } />\n\t\t<PreferencesModal />\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Using WordPress Button Component in React\nDESCRIPTION: Example of importing and using the Button component from @wordpress/components in a React application. This demonstrates how to integrate WordPress UI components into a React project.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/platform/README.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Button } from '@wordpress/components';\n\nfunction MyApp() {\n\treturn <Button>Hello Button</Button>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Notifications Component\nDESCRIPTION: Creates a reusable Notifications component using WordPress SnackbarList for displaying status messages.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/data-basics/5-adding-a-delete-button.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { SnackbarList } from '@wordpress/components';\nimport { store as noticesStore } from '@wordpress/notices';\n\nfunction Notifications() {\n\tconst notices = useSelect(\n\t\t( select ) => select( noticesStore ).getNotices(),\n\t\t[]\n\t);\n\tconst { removeNotice } = useDispatch( noticesStore );\n\tconst snackbarNotices = notices.filter( ({ type }) => type === 'snackbar' );\n\n\treturn (\n\t\t<SnackbarList\n\t\t\tnotices={ snackbarNotices }\n\t\t\tclassName=\"components-editor-notices__snackbar\"\n\t\t\tonRemove={ removeNotice }\n\t\t/>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Block for InnerBlocks in Gutenberg\nDESCRIPTION: This snippet shows how to set a default block with specific attributes when using InnerBlocks. It uses the defaultBlock prop to specify the block type and its attributes.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/block-tutorial/nested-blocks-inner-blocks.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<InnerBlocks defaultBlock={['core/paragraph', {placeholder: \"Lorem ipsum...\"}]} directInsert />\n```\n\n----------------------------------------\n\nTITLE: Using Animate Component with Notice in React JSX\nDESCRIPTION: Example demonstrating how to use the Animate component to create a sliding animation effect on a Notice component. The animation slides in from the top using the slide-in animation type.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/animate/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Animate, Notice } from '@wordpress/components';\n\nconst MyAnimatedNotice = () => (\n\t<Animate type=\"slide-in\" options={ { origin: 'top' } }>\n\t\t{ ( { className } ) => (\n\t\t\t<Notice className={ className } status=\"success\">\n\t\t\t\t<p>Animation finished.</p>\n\t\t\t</Notice>\n\t\t) }\n\t</Animate>\n);\n```\n\n----------------------------------------\n\nTITLE: Customizing Subfeature Selectors in WordPress Gutenberg Block (JSON)\nDESCRIPTION: This snippet illustrates how to set custom selectors for subfeatures, such as text-decoration within typography. It allows for more granular control over style application.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-selectors.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n\t...\n\t\"selectors\": {\n\t\t\"root\": \".my-custom-block-selector\",\n\t\t\"color\": \".my-custom-block-selector\",\n\t\t\"typography\": {\n\t\t\t\"root\": \".my-custom-block-selector > h2\",\n\t\t\t\"text-decoration\": \".my-custom-block-selector > h2 span\"\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing BorderBoxControl in React\nDESCRIPTION: Example showing how to implement the BorderBoxControl component with state management for border configuration. Demonstrates setting up default borders and handling border changes.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/border-box-control/border-box-control/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { BorderBoxControl } from '@wordpress/components';\nimport { __ } from '@wordpress/i18n';\n\nconst colors = [\n\t{ name: 'Blue 20', color: '#72aee6' },\n\t// ...\n];\n\nconst MyBorderBoxControl = () => {\n\tconst defaultBorder = {\n\t\tcolor: '#72aee6',\n\t\tstyle: 'dashed',\n\t\twidth: '1px',\n\t};\n\tconst [ borders, setBorders ] = useState( {\n\t\ttop: defaultBorder,\n\t\tright: defaultBorder,\n\t\tbottom: defaultBorder,\n\t\tleft: defaultBorder,\n\t} );\n\tconst onChange = ( newBorders ) => setBorders( newBorders );\n\n\treturn (\n\t\t<BorderBoxControl\n\t\t\t__next40pxDefaultSize\n\t\t\tcolors={ colors }\n\t\t\tlabel={ __( 'Borders' ) }\n\t\t\tonChange={ onChange }\n\t\t\tvalue={ borders }\n\t\t/>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Plugin-Only Feature Flag Example in JavaScript\nDESCRIPTION: Illustrates how the globalThis.IS_GUTENBERG_PLUGIN flag is used in code and how it's transformed during the build process for both plugin and core environments.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/feature-flags.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nif ( globalThis.IS_GUTENBERG_PLUGIN ) {\n\tpluginOnlyFeature();\n}\n```\n\n----------------------------------------\n\nTITLE: WordPress Plugin PHP Configuration\nDESCRIPTION: PHP configuration file that sets up the WordPress admin menu, registers the application scripts and styles, and handles asset loading for the Gutenberg app.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/data-basics/1-data-basics-setup.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * Plugin Name: My first Gutenberg App\n *\n */\n\nfunction my_admin_menu() {\n\t// Create a new admin page for our app.\n\tadd_menu_page(\n\t\t__( 'My first Gutenberg app', 'gutenberg' ),\n\t\t__( 'My first Gutenberg app', 'gutenberg' ),\n\t\t'manage_options',\n\t\t'my-first-gutenberg-app',\n\t\tfunction () {\n\t\t\techo '\n\t\t\t<h2>Pages</h2>\n\t\t\t<div id=\"my-first-gutenberg-app\"></div>\n\t\t';\n\t\t},\n\t\t'dashicons-schedule',\n\t\t3\n\t);\n}\n\nadd_action( 'admin_menu', 'my_admin_menu' );\n\nfunction load_custom_wp_admin_scripts( $hook ) {\n\t// Load only on ?page=my-first-gutenberg-app.\n\tif ( 'toplevel_page_my-first-gutenberg-app' !== $hook ) {\n\t\treturn;\n\t}\n\n\t// Load the required WordPress packages.\n\n\t// Automatically load imported dependencies and assets version.\n\t$asset_file = include plugin_dir_path( __FILE__ ) . 'build/index.asset.php';\n\n\t// Enqueue CSS dependencies.\n\tforeach ( $asset_file['dependencies'] as $style ) {\n\t\twp_enqueue_style( $style );\n\t}\n\n\t// Load our app.js.\n\twp_register_script(\n\t\t'my-first-gutenberg-app',\n\t\tplugins_url( 'build/index.js', __FILE__ ),\n\t\t$asset_file['dependencies'],\n\t\t$asset_file['version']\n\t);\n\twp_enqueue_script( 'my-first-gutenberg-app' );\n\n\t// Load our style.css.\n\twp_register_style(\n\t\t'my-first-gutenberg-app',\n\t\tplugins_url( 'build/style-index.css', __FILE__ ),\n\t\tarray(),\n\t\t$asset_file['version']\n\t);\n\twp_enqueue_style( 'my-first-gutenberg-app' );\n}\n\nadd_action( 'admin_enqueue_scripts', 'load_custom_wp_admin_scripts' );\n```\n\n----------------------------------------\n\nTITLE: Defining Post Navigation Link - Gutenberg (Markdown)\nDESCRIPTION: This snippet defines a block for displaying links to the next or previous post adjacent to the current post.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/core-blocks.md#2025-04-21_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n- **Name:** core/post-navigation-link\n- **Category:** theme\n- **Supports:** color (background, link, text), interactivity (clientNavigation), typography (fontSize, lineHeight), ~~html~~, ~~reusable~~\n- **Attributes:** arrow, label, linkLabel, showTitle, taxonomy, textAlign, type\n```\n\n----------------------------------------\n\nTITLE: Inserting Default Block in InnerBlocks\nDESCRIPTION: This JavaScript snippet shows how to configure a default block for insertion in InnerBlocks using the defaultBlock and directInsert properties. A paragraph block with default content is specified for insertion, enhancing the user experience by providing a starting point block in the InnerBlocks area.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/src/components/inner-blocks/README.md#2025-04-21_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst DEFAULT_BLOCK = { name: 'core/paragraph', attributes: { content: 'Lorem ipsum...' } };\n...\n<InnerBlocks\n    defaultBlock={ DEFAULT_BLOCK }\n    directInsert={ true }\n/>\n```\n\n----------------------------------------\n\nTITLE: Using autop Function in JavaScript\nDESCRIPTION: Example of importing and using the autop function from the @wordpress/autop package to convert plain text with line breaks into HTML paragraphs.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/autop/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { autop } from '@wordpress/autop';\nautop( 'my text' ); // \"<p>my text</p>\"\n```\n\n----------------------------------------\n\nTITLE: Editing an Entity Record in WordPress\nDESCRIPTION: Sets the title of a post with ID 1 to \"Hello World\". This creates an edit in the core-data store but doesn't save it to the database.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/explanations/architecture/entities.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nwp.data.dispatch( 'core' ).editEntityRecord( 'postType', 'post', 1, { title: 'Hello World' } );\n```\n\n----------------------------------------\n\nTITLE: Applying Compose for PluginSidebar in JavaScript\nDESCRIPTION: Demonstrates the use of 'compose' to apply enhancements with 'withSelect' and 'withDispatch' to the 'PluginSidebarMoreMenuItem' component. Dependencies include 'withPluginContext', 'withSelect', and 'withDispatch'. It simplifies code composition by layering enhancements.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/compose/README.md#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst applyWithSelect = withSelect( ( select, ownProps ) => {\n\treturn doSomething( select, ownProps );\n} );\nconst applyWithDispatch = withDispatch( ( dispatch, ownProps ) => {\n\treturn doSomethingElse( dispatch, ownProps );\n} );\n\nexport default compose(\n\twithPluginContext,\n\tapplyWithSelect,\n\tapplyWithDispatch\n)( PluginSidebarMoreMenuItem );\n```\n\n----------------------------------------\n\nTITLE: Extending MediaPlaceholder with a Custom Filter in React\nDESCRIPTION: This snippet shows how to use the wp.hooks system to replace the default MediaPlaceholder component with a custom implementation, allowing for greater flexibility in media handling within the editor.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/src/components/media-placeholder/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction replaceMediaPlaceholder() {\n\treturn function () {\n\t\treturn React.createElement(\n\t\t\t'div',\n\t\t\t{},\n\t\t\t'The replacement contents or components.'\n\t\t);\n\t};\n}\n\nwp.hooks.addFilter(\n\t'editor.MediaPlaceholder',\n\t'my-plugin/replace-media-placeholder',\n\treplaceMediaPlaceholder\n);\n\n```\n\n----------------------------------------\n\nTITLE: Fetching All Entity Revisions - JavaScript\nDESCRIPTION: This function returns all revisions associated with a given entity record, based on the parameters provided. It returns an array of revision records or null if none are found.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n// getRevisions\n\nfunction getRevisions( state, kind, name, recordKey, query ) {\n    // Implementation here\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Selection Implementation with SelectControl\nDESCRIPTION: Example showing how to implement a multi-select control for choosing multiple users from a list. The component uses the 'multiple' prop and manages an array of selected values.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/select-control/README.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<SelectControl\n\tmultiple\n\tlabel={ __( 'User' ) }\n\tvalue={ this.state.users } // e.g: value = [ 'a', 'c' ]\n\tonChange={ ( users ) => {\n\t\tthis.setState( { users } );\n\t} }\n\toptions={ [\n\t\t{ value: '', label: 'Select a User', disabled: true },\n\t\t{ value: 'a', label: 'User A' },\n\t\t{ value: 'b', label: 'User B' },\n\t\t{ value: 'c', label: 'User c' },\n\t] }\n\t__next40pxDefaultSize\n\t__nextHasNoMarginBottom\n/>\n```\n\n----------------------------------------\n\nTITLE: Using Viewport Match Selector in React Component\nDESCRIPTION: Demonstrates how to use the isViewportMatch selector from the viewport store to conditionally render content based on viewport size. The example shows checking for mobile viewport using the '< small' query.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core-viewport.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { store as viewportStore } from '@wordpress/viewport';\nimport { useSelect } from '@wordpress/data';\nimport { __ } from '@wordpress/i18n';\nconst ExampleComponent = () => {\n\tconst isMobile = useSelect(\n\t\t( select ) => select( viewportStore ).isViewportMatch( '< small' ),\n\t\t[]\n\t);\n\n\treturn isMobile ? (\n\t\t<div>{ __( 'Mobile' ) }</div>\n\t) : (\n\t\t<div>{ __( 'Not Mobile' ) }</div>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Checking Post Publication Status in JavaScript\nDESCRIPTION: This function determines if the current post has already been published by examining the global application state and optionally using an explicit current post object.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core-editor.md#2025-04-21_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nisCurrentPostPublished( state, currentPost ) {\n    // Implementation not shown\n    return true; // Whether the post has been published\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using BlockQuotation in WordPress Gutenberg\nDESCRIPTION: This snippet demonstrates how to import and use the BlockQuotation component from the '@wordpress/components' package in a React application. The component is a replacement for the standard HTML blockquote element, usable on both web and mobile platforms. It requires React and '@wordpress/components' as prerequisites and wraps the quote content to indicate an extended quotation. The expected input is a string to be quoted within the BlockQuotation tags.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/primitives/src/block-quotation/README.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { BlockQuotation } from '@wordpress/components';\n\nconst MyBlockQuotation = () => (\n\t<BlockQuotation>...Quote content</BlockQuotation>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Delete Functionality with WordPress Data Layer\nDESCRIPTION: Shows how to delete entity records using the WordPress core data store and deleteEntityRecord action.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/data-basics/5-adding-a-delete-button.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst pageId = wp.data.select( 'core' ).getEntityRecords( 'postType', 'page' )[0].id;\n\nconst promise = wp.data.dispatch( 'core' ).deleteEntityRecord( 'postType', 'page', pageId );\n```\n\n----------------------------------------\n\nTITLE: Default Block Configuration for InnerBlocks\nDESCRIPTION: Demonstrates how to specify a default block type and attributes that will be inserted when the block appender is clicked. The directInsert prop must be set to true to enable this behavior.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/platform-docs/docs/create-block/nested-blocks.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<InnerBlocks\n\tdefaultBlock={ [ 'core/paragraph', { placeholder: 'Lorem ipsum...' } ] }\n\tdirectInsert\n/>\n```\n\n----------------------------------------\n\nTITLE: PHP: Adding Translations to State and HTML\nDESCRIPTION: This snippet demonstrates how to incorporate translations directly into the application's state and HTML using PHP's `__()` function.  Translations are applied to fruit names and UI elements, ensuring a localized user experience.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/core-concepts/server-side-rendering.md#2025-04-21_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n<?php\nwp_interactivity_state( 'myFruitPlugin', array(\n  'fruits'         => array( __( 'Apple' ), __( 'Banana' ), __( 'Cherry' ) ),\n  'shoppingList'   => array( __( 'Apple' ), __( 'Cherry' ) ),\n  // ...\n?>\n\n<div data-wp-interactive=\"myFruitPlugin\">\n  <button data-wp-on-async--click=\"actions.deleteFruits\">\n    <?php echo __( 'Delete all fruits' ); ?>\n  </button>\n  <button data-wp-on-async--click=\"actions.addMango\">\n    <?php echo __( 'Add Mango' ); ?>\n  </button>\n  <ul data-wp-bind--hidden=\"!state.hasFruits\">\n    <template data-wp-each=\"state.fruits\">\n      <li>\n        <span data-wp-text=\"context.item\"></span>\n        <span data-wp-text=\"state.onShoppingList\"></span>\n      </li>\n    </template>\n  </ul>\n  <div data-wp-bind--hidden=\"state.hasFruits\">\n    <?php echo __( 'No fruits, sorry!' ); ?>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Inferring Store Types from Client Definition in TypeScript\nDESCRIPTION: Example of defining a store with TypeScript where the types are automatically inferred from the client-side store definition. Demonstrates state, actions, and callbacks with type inference.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/core-concepts/using-typescript.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// view.ts\nconst myStore = store( 'myCounterPlugin', {\n\tstate: {\n\t\tcounter: 0,\n\t},\n\tactions: {\n\t\tincrement() {\n\t\t\tmyStore.state.counter += 1;\n\t\t},\n\t},\n\tcallbacks: {\n\t\tlog() {\n\t\t\tconsole.log( `counter: ${ myStore.state.counter }` );\n\t\t},\n\t},\n} );\n```\n\n----------------------------------------\n\nTITLE: Toggling Features with WordPress Interface Store\nDESCRIPTION: Demonstrates how to toggle and check feature states using interface store selectors and actions\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/interface/README.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nwp.data\n\t.select( 'core/interface' )\n\t.isFeatureActive( 'namespace/editor-or-plugin-name', 'myFeatureName' ); // true\n\nwp.data\n\t.dispatch( 'core/interface' )\n\t.toggleFeature( 'namespace/editor-or-plugin-name', 'myFeatureName' );\n\nwp.data\n\t.select( 'core/interface' )\n\t.isFeatureActive( 'namespace/editor-or-plugin-name', 'myFeatureName' ); // false\n```\n\n----------------------------------------\n\nTITLE: Mutating an Array in State Management - JavaScript\nDESCRIPTION: This snippet shows how to directly mutate an array in the Interactivity API's state management without creating a new instance. It highlights the correct method of pushing an item to the state array and explains the implication of immutability in other frameworks.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/core-concepts/the-reactive-and-declarative-mindset.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst { state } = store( 'myArrayPlugin', {\n\tstate: {\n\t\tlist: [ 'item 1', 'item 2' ],\n\t},\n\tactions: {\n\t\taddItem() {\n\t\t\t// Right:\n\t\t\tstate.list.push( 'new item' );\n\n\t\t\t// Wrong:\n\t\t\tstate.list = [ ...state.list, 'new item' ]; // Don't do this!\n\t\t},\n\t},\n} );\n```\n\n----------------------------------------\n\nTITLE: Rendering Block Hierarchy in React for WordPress Block Editor\nDESCRIPTION: This code snippet demonstrates the hierarchy of components used to render a list of blocks in the WordPress Block Editor. It shows how BlockList, BlockListBlock, BlockEdit, and individual block components work together.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/platform/custom-block-editor.md#2025-04-21_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\n<BlockList>\n\t/* renders a list of blocks from the rootClientId. */\n\t<BlockListBlock>\n\t\t/* renders a single block from the BlockList. */\n\t\t<BlockEdit>\n\t\t\t/* renders the standard editable area of a block. */\n\t\t\t<Component /> /* renders the block UI as defined by its `edit()` implementation.\n\t\t\t*/\n\t\t</BlockEdit>\n\t</BlockListBlock>\n</BlockList>\n```\n\n----------------------------------------\n\nTITLE: Using Truncate for Text Content in JSX\nDESCRIPTION: This snippet demonstrates how to use the Truncate component from WordPress components to trim text content. It showcases the basic usage where a paragraph of text is wrapped within the Truncate component. The Truncate component is intended for instances where text needs to be limited visually, adhering to the `children` prop type requirements.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/truncate/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { __experimentalTruncate as Truncate } from '@wordpress/components';\n\nfunction Example() {\n\treturn (\n\t\t<Truncate>\n\t\t\tLorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc ex\n\t\t\tneque, vulputate a diam et, luctus convallis lacus. Vestibulum ac\n\t\t\tmollis mi. Morbi id elementum massa.\n\t\t</Truncate>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Shortcut Description in React (JavaScript)\nDESCRIPTION: This example demonstrates how to use the getShortcutDescription selector to retrieve and display the description of a given shortcut.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core-keyboard-shortcuts.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { store as keyboardShortcutsStore } from '@wordpress/keyboard-shortcuts';\nimport { useSelect } from '@wordpress/data';\nimport { __ } from '@wordpress/i18n';\nconst ExampleComponent = () => {\n\tconst shortcutDescription = useSelect(\n\t\t( select ) =>\n\t\t\tselect( keyboardShortcutsStore ).getShortcutDescription(\n\t\t\t\t'core/editor/next-region'\n\t\t\t),\n\t\t[]\n\t);\n\n\treturn shortcutDescription ? (\n\t\t<div>{ shortcutDescription }</div>\n\t) : (\n\t\t<div>{ __( 'No description.' ) }</div>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: ComplementaryArea.Slot Component Props Documentation\nDESCRIPTION: Documentation for the ComplementaryArea.Slot component props, which is used to render the currently active ComplementaryArea.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/interface/src/components/complementary-area/README.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### scope\n\nThe scope of the complementary area e.g: \"core\", \"myplugin/custom-screen-a\",\n\n-   Type: `String`\n-   Required: Yes\n```\n\n----------------------------------------\n\nTITLE: Dynamic WordPress Latest Posts Block Markup Example\nDESCRIPTION: Example of a dynamic WordPress block markup (Latest Posts) that uses null save function. Shows how dynamic blocks store only the comment delimiter with attributes without any HTML content.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/getting-started/fundamentals/markup-representation-block.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- wp:latest-posts {\"postsToShow\":4,\"displayPostDate\":true} /-->\n```\n\n----------------------------------------\n\nTITLE: Edit Function for Record Block with Context\nDESCRIPTION: This snippet shows the edit function for a 'record' block that provides context. It includes a TextControl for setting the record ID and an InnerBlocks component for rendering child blocks.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-context.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { TextControl } from '@wordpress/components';\nimport { InnerBlocks } from '@wordpress/block-editor';\n\nexport default function Edit( props ) {\n\tconst MY_TEMPLATE = [ [ 'my-plugin/record-title', {} ] ];\n\tconst {\n\t\tattributes: { recordId },\n\t\tsetAttributes,\n\t} = props;\n\treturn (\n\t\t<div>\n\t\t\t<TextControl\n\t\t\t\t__nextHasNoMarginBottom\n\t\t\t\t__next40pxDefaultSize\n\t\t\t\tlabel={ __( 'Record ID' ) }\n\t\t\t\tvalue={ recordId }\n\t\t\t\tonChange={ ( val ) =>\n\t\t\t\t\tsetAttributes( { recordId: Number( val ) } )\n\t\t\t\t}\n\t\t\t/>\n\t\t\t<InnerBlocks template={ MY_TEMPLATE } templateLock=\"all\" />\n\t\t</div>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Messages in WordPress Gutenberg Signaling Server\nDESCRIPTION: This code demonstrates how to publish a message to a specific topic in the Gutenberg Signaling Server. It sends a POST request with the client's subscriber ID, specifies the 'publish' action type, the target topic, and the message data to be broadcasted to all subscribers of that topic.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/lib/experimental/sync/README.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nawait (\n\tawait fetch( window.wp.ajax.settings.url, {\n\t\tbody: new URLSearchParams( {\n\t\t\tsubscriber_id: '1',\n\t\t\taction: 'gutenberg_signaling_server',\n\t\t\tmessage: JSON.stringify( {\n\t\t\t\ttype: 'publish',\n\t\t\t\ttopic: 'WordPress',\n\t\t\t\tdata: 'hello I am client 1!',\n\t\t\t} ),\n\t\t} ),\n\t\tmethod: 'POST',\n\t} )\n ).text();\n```\n\n----------------------------------------\n\nTITLE: Updating Block Bindings in WordPress Gutenberg\nDESCRIPTION: This code demonstrates how to use the updateBlockBindings function to create, update, or remove specific connections in a block. It also includes an example of removing a binding from a specific attribute.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-bindings.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useBlockBindingsUtils } from '@wordpress/block-editor';\n\nconst { updateBlockBindings } = useBlockBindingsUtils();\n\nfunction updateBlockBindingsURLSource( url ) {\n\tupdateBlockBindings({\n\t\turl: {\n\t\t\tsource: 'myplugin/new-source',\n\t\t}\n\t})\n}\n\n// Remove binding from url attribute.\nfunction removeBlockBindingsURLSource() {\n\tupdateBlockBindings( { url: undefined } );\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Plugin using ES5\nDESCRIPTION: This code snippet demonstrates how to register a plugin with the Gutenberg editor using ES5 syntax. It creates a sidebar with a menu item that opens the sidebar when clicked. The `registerPlugin` function from `wp.plugins` is used to register the plugin with a unique name and settings including an icon, render function, and scope.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/plugins/README.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n\"// Using ES5 syntax\nvar el = React.createElement;\nvar Fragment = wp.element.Fragment;\nvar PluginSidebar = wp.editor.PluginSidebar;\nvar PluginSidebarMoreMenuItem = wp.editor.PluginSidebarMoreMenuItem;\nvar registerPlugin = wp.plugins.registerPlugin;\nvar moreIcon = React.createElement( 'svg' ); //... svg element.\n\nfunction Component() {\n\treturn el(\n\t\tFragment,\n\t\t{},\n\t\tel(\n\t\t\tPluginSidebarMoreMenuItem,\n\t\t\t{\n\t\t\t\ttarget: 'sidebar-name',\n\t\t\t},\n\t\t\t'My Sidebar'\n\t\t),\n\t\tel(\n\t\t\tPluginSidebar,\n\t\t\t{\n\t\t\t\tname: 'sidebar-name',\n\t\t\t\ttitle: 'My Sidebar',\n\t\t\t},\n\t\t\t'Content of the sidebar'\n\t\t)\n\t);\n}\nregisterPlugin( 'plugin-name', {\n\ticon: moreIcon,\n\trender: Component,\n\tscope: 'my-page',\n} );\"\n```\n\n----------------------------------------\n\nTITLE: Block Serialization Examples in HTML\nDESCRIPTION: Shows how blocks are serialized to HTML with comment delimiters. Includes examples of a static image block and a dynamic server-rendered block with attributes stored as JSON in the comment.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/explanations/architecture/data-flow.md#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"source.jpg\" alt=\"\" /></figure>\n<!-- /wp:image -->\n```\n\nLANGUAGE: html\nCODE:\n```\n<!-- wp:latest-posts {\"postsToShow\":4,\"displayPostDate\":true} /-->\n```\n\n----------------------------------------\n\nTITLE: Retrieving Shortcut Aliases in React (JavaScript)\nDESCRIPTION: This snippet shows how to use the getShortcutAliases selector to retrieve and display aliases for a given shortcut name.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core-keyboard-shortcuts.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { store as keyboardShortcutsStore } from '@wordpress/keyboard-shortcuts';\nimport { useSelect } from '@wordpress/data';\nimport { createInterpolateElement } from '@wordpress/element';\nimport { sprintf } from '@wordpress/i18n';\nconst ExampleComponent = () => {\n\tconst shortcutAliases = useSelect(\n\t\t( select ) =>\n\t\t\tselect( keyboardShortcutsStore ).getShortcutAliases(\n\t\t\t\t'core/editor/next-region'\n\t\t\t),\n\t\t[]\n\t);\n\n\treturn (\n\t\tshortcutAliases.length > 0 && (\n\t\t\t<ul>\n\t\t\t\t{ shortcutAliases.map( ( { character, modifier }, index ) => (\n\t\t\t\t\t<li key={ index }>\n\t\t\t\t\t\t{ createInterpolateElement(\n\t\t\t\t\t\t\tsprintf(\n\t\t\t\t\t\t\t\t'Character: <code>%s</code> / Modifier: <code>%s</code>',\n\t\t\t\t\t\t\t\tcharacter,\n\t\t\t\t\t\t\t\tmodifier\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tcode: <code />,\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t) }\n\t\t\t\t\t</li>\n\t\t\t\t) ) }\n\t\t\t</ul>\n\t\t)\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Autocomplete for Acronyms in WordPress Gutenberg (JSX)\nDESCRIPTION: This code snippet demonstrates how to create a custom autocompleter for acronyms and add it to specific Gutenberg blocks using the 'editor.Autocomplete.completers' filter. It defines an acronym completer object, a filter function, and shows how to add the filter to WordPress hooks.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/filters/autocomplete-filters.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// Our completer\nconst acronymCompleter = {\n\tname: 'acronyms',\n\ttriggerPrefix: '::',\n\toptions: [\n\t\t{ letters: 'FYI', expansion: 'For Your Information' },\n\t\t{ letters: 'AFAIK', expansion: 'As Far As I Know' },\n\t\t{ letters: 'IIRC', expansion: 'If I Recall Correctly' },\n\t],\n\tgetOptionKeywords( { letters, expansion } ) {\n\t\tconst expansionWords = expansion.split( /\\s+/ );\n\t\treturn [ letters, ...expansionWords ];\n\t},\n\tgetOptionLabel: acronym => acronym.letters,\n\tgetOptionCompletion: ( { letters, expansion } ) => (\n\t\t<abbr title={ expansion }>{ letters }</abbr>\n\t),\n};\n\n// Our filter function\nfunction appendAcronymCompleter( completers, blockName ) {\n\treturn blockName === 'my-plugin/foo' ?\n\t\t[ ...completers, acronymCompleter ] :\n\t\tcompleters;\n}\n\n// Adding the filter\nwp.hooks.addFilter(\n\t'editor.Autocomplete.completers',\n\t'my-plugin/autocompleters/acronym',\n\tappendAcronymCompleter\n);\n```\n\n----------------------------------------\n\nTITLE: Extending Autocomplete Functionality in Gutenberg\nDESCRIPTION: This snippet defines a custom Autocomplete component that integrates with the Gutenberg block editor. It extends the standard Autocomplete component from @wordpress/components by allowing developers to customize the autocompleters through a filter.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/src/components/autocomplete/README.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Autocomplete } from '@wordpress/components';\n\n// Wrap Autocomplete component with additional functionality\nconst CustomAutocomplete = ( props ) => {\n    return ( <Autocomplete {...props} /> );\n};\n\n// Pass the completers through a filter\nconst completers = applyFilters( 'editor.Autocomplete.completers', defaultCompleters );\n\nexport default CustomAutocomplete;\n```\n\n----------------------------------------\n\nTITLE: Initializing ConfirmDialog in Controlled Mode (JSX)\nDESCRIPTION: Shows how to use the ConfirmDialog component in controlled mode, where the parent component manages the open/closed state. Both onConfirm and onCancel callbacks are required, and the isOpen prop controls visibility.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/confirm-dialog/README.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { __experimentalConfirmDialog as ConfirmDialog } from '@wordpress/components';\n\nfunction Example() {\n\tconst [ isOpen, setIsOpen ] = useState( true );\n\n\tconst handleConfirm = () => {\n\t\tconsole.debug( 'Confirmed!' );\n\t\tsetIsOpen( false );\n\t};\n\n\tconst handleCancel = () => {\n\t\tconsole.debug( 'Cancelled!' );\n\t\tsetIsOpen( false );\n\t};\n\n\treturn (\n\t\t<ConfirmDialog\n\t\t\tisOpen={ isOpen }\n\t\t\tonConfirm={ handleConfirm }\n\t\t\tonCancel={ handleCancel }\n\t\t>\n\t\t\tAre you sure? <strong>This action cannot be undone!</strong>\n\t\t</ConfirmDialog>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Using MediaUploadProgress Component\nDESCRIPTION: This code snippet demonstrates how to use the MediaUploadProgress component. It imports necessary components from react-native and @wordpress/block-editor, and renders the MediaUploadProgress component with specified mediaId and a renderContent function to display an image and a retry message on upload failure.  The renderContent prop receives an object containing isUploadFailed and retryMessage properties.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/src/components/media-upload-progress/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ImageBackground, Text, View } from 'react-native';\nimport { MediaUploadProgress } from '@wordpress/block-editor';\n\nfunction MediaProgress( { url, id } ) {\n\treturn (\n\t\t<MediaUploadProgress\n\t\t\tmediaId={ id }\n\t\t\trenderContent={ ( { isUploadFailed, retryMessage } ) => {\n\t\t\t\treturn (\n\t\t\t\t\t<ImageBackground\n\t\t\t\t\t\tresizeMethod=\"scale\"\n\t\t\t\t\t\tsource={ { uri: url } }\n\t\t\t\t\t>\n\t\t\t\t\t\t{ isUploadFailed && (\n\t\t\t\t\t\t\t<View>\n\t\t\t\t\t\t\t\t<Text>{ retryMessage }</Text>\n\t\t\t\t\t\t\t</View>\n\t\t\t\t\t\t) }\n\t\t\t\t\t</ImageBackground>\n\t\t\t\t);\n\t\t\t} }\n\t\t/>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Block Name in React Component (JavaScript)\nDESCRIPTION: This example shows how to use the setDefaultBlockName function to change the default block type to 'core/heading'. It's implemented as a button click handler in a React component.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/blocks/README.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { setDefaultBlockName } from '@wordpress/blocks';\n\nconst ExampleComponent = () => {\n\treturn (\n\t\t<Button onClick={ () => setDefaultBlockName( 'core/heading' ) }>\n\t\t\t{ __( 'Set the default block to Heading' ) }\n\t\t</Button>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing CardDivider in a Card Component\nDESCRIPTION: This snippet demonstrates how to use the CardDivider component within a Card structure. It shows the import statement for necessary components and an example of CardDivider usage between two CardBody components.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/card/card-divider/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Card, CardBody, CardDivider } from '@wordpress/components';\n\nconst Example = () => (\n\t<Card>\n\t\t<CardBody>...</CardBody>\n\t\t<CardDivider />\n\t\t<CardBody>...</CardBody>\n\t</Card>\n);\n```\n\n----------------------------------------\n\nTITLE: Disabling Widgets Block Editor in WordPress Theme\nDESCRIPTION: PHP code snippet demonstrating how theme developers can disable the Widgets Block Editor functionality using remove_theme_support().\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/widgets/overview.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nremove_theme_support( 'widgets-block-editor' )\n```\n\n----------------------------------------\n\nTITLE: Using Spacer within HStack for Adaptive Spacing\nDESCRIPTION: This example shows how to use the Spacer component within HStack to adaptively expand and take up remaining space between child elements.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/h-stack/README.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n\t__experimentalHStack as HStack,\n\t__experimentalSpacer as Spacer,\n\t__experimentalText as Text,\n} from '@wordpress/components';\n\nfunction Example() {\n\treturn (\n\t\t<HStack>\n\t\t\t<Text>Code</Text>\n\t\t\t<Spacer>\n\t\t\t\t<Text>is</Text>\n\t\t\t</Spacer>\n\t\t\t<Text>Poetry</Text>\n\t\t</HStack>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing PostFeaturedImage Contents with React\nDESCRIPTION: This snippet demonstrates how to replace the contents of the PostFeaturedImage component using a custom filter in the Gutenberg editor. It utilizes the wp.hooks API to inject a new component as the replacement. No additional dependencies are required beyond WordPress and React.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/editor/src/components/post-featured-image/README.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction replacePostFeaturedImage() {\n\treturn function () {\n\t\treturn React.createElement(\n\t\t\t'div',\n\t\t\t{},\n\t\t\t'The replacement contents or components.'\n\t\t);\n\t};\n}\n\nwp.hooks.addFilter(\n\t'editor.PostFeaturedImage',\n\t'my-plugin/replace-post-featured-image',\n\treplacePostFeaturedImage\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Fetch Handler with Axios\nDESCRIPTION: Demonstrates how to replace the default fetch handler with a custom implementation using the Axios library. This allows for complete customization of how requests are made.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/api-fetch/README.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport apiFetch from '@wordpress/api-fetch';\nimport axios from 'axios';\n\napiFetch.setFetchHandler( ( options ) => {\n\tconst { url, path, data, method } = options;\n\n\treturn axios( {\n\t\turl: url || path,\n\t\tmethod,\n\t\tdata,\n\t} );\n} );\n```\n\n----------------------------------------\n\nTITLE: Basic SelectControl Implementation in React for Size Selection\nDESCRIPTION: Example of implementing a SelectControl component to let users select an image size from predefined options. Uses React's useState hook to manage the selected size state.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/select-control/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { SelectControl } from '@wordpress/components';\n\nconst MySelectControl = () => {\n\tconst [ size, setSize ] = useState( '50%' );\n\n\treturn (\n\t\t<SelectControl\n\t\t\tlabel=\"Size\"\n\t\t\tvalue={ size }\n\t\t\toptions={ [\n\t\t\t\t{ label: 'Big', value: '100%' },\n\t\t\t\t{ label: 'Medium', value: '50%' },\n\t\t\t\t{ label: 'Small', value: '25%' },\n\t\t\t] }\n\t\t\tonChange={ ( newSize ) => setSize( newSize ) }\n\t\t\t__next40pxDefaultSize\n\t\t\t__nextHasNoMarginBottom\n\t\t/>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Block Icon with Colors\nDESCRIPTION: Shows how to set up a block icon with custom background and foreground colors.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-registration.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nicon: {\n\t// Specifying a background color to appear with the icon e.g.: in the inserter.\n\tbackground: '#7e70af',\n\t// Specifying a color for the icon (optional: if not set, a readable color will be automatically defined)\n\tforeground: '#fff',\n\t// Specifying an icon for the block\n\tsrc: <svg viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\" /><path d=\"M19 13H5v-2h14v2z\" /></svg>,\n} ,\n```\n\n----------------------------------------\n\nTITLE: Retrieving Featured Media URL Example\nDESCRIPTION: Shows how to get the URL of a featured media item using useSelect hook, with fallback handling for different media sizes and source URLs.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core-editor.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst getFeaturedMediaUrl = useSelect( ( select ) => {\n\tconst getFeaturedMediaId =\n\t\tselect( 'core/editor' ).getEditedPostAttribute( 'featured_media' );\n\tconst getMedia = select( 'core' ).getMedia( getFeaturedMediaId );\n\n\treturn (\n\t\tgetMedia?.media_details?.sizes?.large?.source_url ||\n\t\tgetMedia?.source_url ||\n\t\t''\n\t);\n}, [] );\n```\n\n----------------------------------------\n\nTITLE: Importing and Using SVG Primitives in React\nDESCRIPTION: Example of importing SVG and Path primitives from @wordpress/primitives to create a custom SVG element with specific dimensions and path data\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/primitives/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { SVG, Path } from '@wordpress/primitives';\n\nconst myElement = (\n\t<SVG\n\t\twidth=\"18\"\n\t\theight=\"18\"\n\t\tviewBox=\"0 0 18 18\"\n\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t>\n\t\t<Path d=\"M4.5 9l5.6-5.7 1.4 1.5L7.3 9l4.2 4.2-1.4 1.5L4.5 9z\" />\n\t</SVG>\n);\n```\n\n----------------------------------------\n\nTITLE: Verifying Post Autosave Status in JavaScript\nDESCRIPTION: This function checks if the post is currently autosaving by examining the global application state.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core-editor.md#2025-04-21_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nisAutosavingPost( state ) {\n    // Implementation not shown\n    return true; // Whether the post is autosaving\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Meta Field Value from Console (JavaScript)\nDESCRIPTION: This snippet shows how to retrieve the current value of the meta field from the browser console, useful for verifying updates.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/plugin-sidebar-0.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nwp.data.select( 'core/editor' ).getEditedPostAttribute( 'meta' )[\n\t'sidebar_plugin_meta_block_field'\n];\n```\n\n----------------------------------------\n\nTITLE: Rendering Editor Components in WordPress\nDESCRIPTION: This code snippet shows the layout of the main Editor component in WordPress, including the Notices, Header, Sidebar, and BlockEditor components. It demonstrates how different parts of the editor are organized.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/platform/custom-block-editor.md#2025-04-21_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\n<Notices />\n<Header />\n<Sidebar /> // <-- What's this?\n<BlockEditor settings={ settings } />\n```\n\n----------------------------------------\n\nTITLE: Merging Blocks in Gutenberg Editor (JavaScript)\nDESCRIPTION: Action creator that returns an action object to merge two blocks in the editor. It takes the client IDs of the two blocks to be merged as parameters.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core-block-editor.md#2025-04-21_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\nmergeBlocks( firstBlockClientId, secondBlockClientId )\n```\n\n----------------------------------------\n\nTITLE: Updating Sidebar Plugin with useSelect Hook (JavaScript)\nDESCRIPTION: This snippet enhances the previous code by introducing the useSelect hook to fetch and update the meta field value from the editor's data store.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/plugin-sidebar-0.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n( function ( wp ) {\n\tvar el = React.createElement;\n\tvar registerPlugin = wp.plugins.registerPlugin;\n\tvar PluginSidebar = wp.editor.PluginSidebar;\n\tvar Text = wp.components.TextControl;\n\tvar useSelect = wp.data.useSelect;\n\n\tvar MetaBlockField = function () {\n\t\tvar metaFieldValue = useSelect( function ( select ) {\n\t\t\treturn select( 'core/editor' ).getEditedPostAttribute(\n\t\t\t\t'meta'\n\t\t\t)[ 'sidebar_plugin_meta_block_field' ];\n\t\t}, [] );\n\n\t\treturn el( Text, {\n\t\t\tlabel: 'Meta Block Field',\n\t\t\tvalue: metaFieldValue,\n\t\t\tonChange: function ( content ) {\n\t\t\t\tconsole.log( 'content has changed to ', content );\n\t\t\t},\n\t\t} );\n\t};\n\n\tregisterPlugin( 'my-plugin-sidebar', {\n\t\trender: function () {\n\t\t\treturn el(\n\t\t\t\tPluginSidebar,\n\t\t\t\t{\n\t\t\t\t\tname: 'my-plugin-sidebar',\n\t\t\t\t\ticon: 'admin-post',\n\t\t\t\t\ttitle: 'My plugin sidebar',\n\t\t\t\t},\n\t\t\t\tel(\n\t\t\t\t\t'div',\n\t\t\t\t\t{ className: 'plugin-sidebar-content' },\n\t\t\t\t\tel( MetaBlockField )\n\t\t\t\t)\n\t\t\t);\n\t\t},\n\t} );\n} )( window.wp );\n```\n\n----------------------------------------\n\nTITLE: Valid Text Domain Usage Examples in JavaScript\nDESCRIPTION: Examples showing correct usage of translation functions with properly configured text domains that match the allowedTextDomain setting.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/eslint-plugin/docs/rules/i18n-text-domain.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n__( 'Hello World' ); // with allowedTextDomain = [ 'default' ]\n__( 'Hello World', 'foo-bar' ); // with allowedTextDomain = [ 'foo-bar' ]\n```\n\n----------------------------------------\n\nTITLE: Using Editor Utilities - JavaScript\nDESCRIPTION: This snippet illustrates how to use the Editor utilities within a test file, enabling interaction with the Block Editor in WordPress. Requires the use of the test.use function to instantiate Editor objects with the page object.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/e2e-test-utils-playwright/README.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ntest.use( {\n\teditor: async ( { page }, use ) => {\n\t\tawait use( new Editor( { page } ) );\n\t},\n} );\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Commands Store\nDESCRIPTION: Example showing how to import and use the commands store with useDispatch hook\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/commands/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { store as commandsStore } from '@wordpress/commands';\nimport { useDispatch } from '@wordpress/data';\n...\nconst { open: openCommandCenter } = useDispatch( commandsStore );\n```\n\n----------------------------------------\n\nTITLE: Configuring Allowed Controls for Query Loop Block Variation in JavaScript\nDESCRIPTION: Demonstrates how to specify which controls should be available for a custom Query Loop block variation using the allowedControls property.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/block-tutorial/extending-the-query-loop-block.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n\t/** ...variation properties */\n\tallowedControls: [ 'inherit', 'order', 'taxQuery', 'search' ],\n}\n```\n\n----------------------------------------\n\nTITLE: PHP: Defining Computed Initial State\nDESCRIPTION: Defines the initial state on the server using the `wp_interactivity_state` function in PHP, computing the value of `hasFruits` based on the initial `fruits` array. This approach is useful when the derived state depends on other server-side variables or computations.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/core-concepts/server-side-rendering.md#2025-04-21_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n$fruits    = array( 'Apple', 'Banana', 'Cherry' );\n$hasFruits = count( $fruits ) > 0;\n\nwp_interactivity_state( 'myFruitPlugin', array(\n  'fruits'    => $fruits,\n  'hasFruits' => $hasFruits,\n));\n```\n\n----------------------------------------\n\nTITLE: Initializing Server-Side Store with Translations in PHP for WordPress Gutenberg\nDESCRIPTION: This PHP code shows how to initialize the store state on the server-side with translated content using the WordPress Core Translation API in a Gutenberg block's render.php file.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/api-reference.md#2025-04-21_snippet_36\n\nLANGUAGE: php\nCODE:\n```\nwp_interactivity_state( 'favoriteMovies', array(\n      \"1\" => array(\n        \"id\" => \"123-abc\",\n        \"movieName\" => __( \"someMovieName\", \"textdomain\" )\n      ),\n) );\n```\n\n----------------------------------------\n\nTITLE: Enqueuing WordPress Block Editor Dependencies in PHP\nDESCRIPTION: Example of how to enqueue a script with WordPress JavaScript dependencies. This PHP snippet demonstrates how to properly include required scripts like React, blocks, block editor, and internationalization.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/packages.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nwp_enqueue_script(\n\t'my-custom-block',\n\tplugins_url( $block_path, __FILE__ ),\n\tarray( 'react', 'wp-blocks', 'wp-block-editor', 'wp-i18n' )\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Global Style for Specific Context\nDESCRIPTION: A React hook for retrieving and modifying styles for specific contexts like site root or individual block types\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/src/components/global-styles/README.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useGlobalStyle } from '@wordpress/block-editor';\n\nfunction MyComponent() {\n\t// Text color for the site root.\n\tconst [ color, setColor ] = useGlobalStyle( 'color.text' );\n\n\t// The user modified color for the core paragraph block.\n\tconst [ pColor, setPColor ] = useGlobalStyle(\n\t\t'color.text',\n\t\t'core/paragraph',\n\t\t'user'\n\t);\n\n\treturn 'Something';\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering URLInput in a WordPress Block\nDESCRIPTION: This snippet shows how to use the URLInput component directly within a WordPress block registration. It demonstrates setting up attributes, using the component in the edit function, and creating a simple anchor tag in the save function.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/src/components/url-input/README.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { registerBlockType } from '@wordpress/blocks';\nimport { URLInput } from '@wordpress/block-editor';\n\nregisterBlockType( /* ... */, {\n\t// ...\n\n\tattributes: {\n\t\turl: {\n\t\t\ttype: 'string',\n\t\t},\n\t\ttext: {\n\t\t\ttype: 'string',\n\t\t},\n\t},\n\n\tedit( { className, attributes, setAttributes } ) {\n\t\treturn (\n\t\t\t<URLInput\n\t\t\t\tclassName={ className }\n\t\t\t\tvalue={ attributes.url }\n\t\t\t\tonChange={ ( url, post ) => setAttributes( { url, text: (post && post.title) || 'Click here' } ) }\n\t\t\t/>\n\t\t);\n\t},\n\n\tsave( { attributes } ) {\n\t\treturn <a href={ attributes.url }>{ attributes.text }</a>;\n\t}\n} );\n```\n\n----------------------------------------\n\nTITLE: Using the useI18n React hook\nDESCRIPTION: This code demonstrates how to use the useI18n hook to access i18n functions within a React component.  It imports the useI18n hook and retrieves the __ function, which is then used to translate a string.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/react-i18n/README.md#2025-04-21_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { useI18n } from '@wordpress/react-i18n';\n\nfunction MyComponent() {\n\tconst { __ } = useI18n();\n\treturn __( 'Hello, world!' );\n}\n```\n\n----------------------------------------\n\nTITLE: Scaffolding a Dynamic Block with create-block in WordPress\nDESCRIPTION: This command uses @wordpress/create-block to scaffold a new dynamic block plugin named 'copyright-date-block'. It then changes the directory to the newly created plugin folder.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/getting-started/tutorial.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @wordpress/create-block@latest copyright-date-block --variant=dynamic\ncd copyright-date-block\n```\n\n----------------------------------------\n\nTITLE: Rendering Target HTML for Block Editor in WordPress Admin\nDESCRIPTION: This PHP function outputs the target HTML where the React-powered block editor will be rendered. It creates a div element with a specific ID and class for JavaScript to hook into.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/platform/custom-block-editor.md#2025-04-21_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nfunction getdave_sbe_render_block_editor() {\n\t?>\n\t<div\n\t\tid=\"getdave-sbe-block-editor\"\n\t\tclass=\"getdave-sbe-block-editor\"\n\t>\n\t\tLoading Editor...\n\t</div>\n\t<?php\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a BlockCard component\nDESCRIPTION: This code snippet demonstrates how to render a `BlockCard` component with a specified icon, title, description, and name.  It imports the component from `@wordpress/block-editor` and an icon from `@wordpress/icons`. It assumes that the component is rendered within a `BlockEditorProvider` context.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/src/components/block-card/README.md#2025-04-21_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport { BlockCard } from '@wordpress/block-editor';\nimport { paragraph } from '@wordpress/icons';\n\nconst MyBlockCard = () => (\n\t<BlockCard\n\t\ticon={ paragraph }\n\t\ttitle=\"Paragraph\"\n\t\tdescription=\"Start with the basic building block of all narrative.\"\n\t\tname=\"Custom Block\"\n\t/>\n);\n```\n\n----------------------------------------\n\nTITLE: Using useFocusReturn Hook in Gutenberg\nDESCRIPTION: This snippet demonstrates how to use the `useFocusReturn` hook to return focus to the previously focused element when a component unmounts.  It is used to maintain focus within the page after closing modal or menu elements for a better user experience. The hook returns a ref to be attached to the root element of the component.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/compose/README.md#2025-04-21_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nimport { useFocusReturn } from '@wordpress/compose';\n\nconst WithFocusReturn = () => {\n\tconst ref = useFocusReturn();\n\treturn (\n\t\t<div ref={ ref }>\n\t\t\t<Button />\n\t\t\t<Button />\n\t\t</div>\n\t);\n};\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Focus on Mount using useFocusOnMount in React\nDESCRIPTION: This code snippet demonstrates how to use the `useFocusOnMount` hook from `@wordpress/compose` to automatically focus the first tabbable element within a component when it mounts.  The `useFocusOnMount` hook returns a `ref` that must be attached to the parent DOM element of the focusable elements. The example utilizes `<Button />` components for demonstration purposes.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/compose/src/hooks/use-focus-on-mount/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useFocusOnMount } from '@wordpress/compose';\n\nconst WithFocusOnMount = () => {\n\tconst ref = useFocusOnMount();\n\treturn (\n\t\t<div ref={ ref }>\n\t\t\t<Button />\n\t\t\t<Button />\n\t\t</div>\n\t);\n};\n\n```\n\n----------------------------------------\n\nTITLE: Using AsyncModeProvider in WordPress Data Components\nDESCRIPTION: This JavaScript snippet demonstrates how to use the AsyncModeProvider component from the @wordpress/data module to manage asynchronous rendering in WordPress components. It portrays how to wrap a component to render it asynchronously, delaying less critical UI updates.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/data/README.md#2025-04-21_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useSelect, AsyncModeProvider } from '@wordpress/data';\nimport { store as blockEditorStore } from '@wordpress/block-editor';\n\nfunction BlockCount() {\n\tconst count = useSelect( ( select ) => {\n\t\treturn select( blockEditorStore ).getBlockCount();\n\t}, [] );\n\n\treturn count;\n}\n\nfunction App() {\n\treturn (\n\t\t<AsyncModeProvider value={ true }>\n\t\t\t<BlockCount />\n\t\t</AsyncModeProvider>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Raw Shortcut Key Combinations in React (JavaScript)\nDESCRIPTION: This snippet shows how to use the getAllShortcutRawKeyCombinations selector to get and display the raw representation of all keyboard combinations for a given shortcut name.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core-keyboard-shortcuts.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { store as keyboardShortcutsStore } from '@wordpress/keyboard-shortcuts';\nimport { useSelect } from '@wordpress/data';\nimport { createInterpolateElement } from '@wordpress/element';\nimport { sprintf } from '@wordpress/i18n';\n\nconst ExampleComponent = () => {\n\tconst allShortcutRawKeyCombinations = useSelect(\n\t\t( select ) =>\n\t\t\tselect( keyboardShortcutsStore ).getAllShortcutRawKeyCombinations(\n\t\t\t\t'core/editor/next-region'\n\t\t\t),\n\t\t[]\n\t);\n\n\treturn (\n\t\tallShortcutRawKeyCombinations.length > 0 && (\n\t\t\t<ul>\n\t\t\t\t{ allShortcutRawKeyCombinations.map(\n\t\t\t\t\t( shortcutRawKeyCombination, index ) => (\n\t\t\t\t\t\t<li key={ index }>\n\t\t\t\t\t\t\t{ createInterpolateElement(\n\t\t\t\t\t\t\t\tsprintf(\n\t\t\t\t\t\t\t\t\t' <code>%s</code>',\n\t\t\t\t\t\t\t\t\tshortcutRawKeyCombination\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tcode: <code />,\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t) }\n\t\t\t\t\t\t</li>\n\t\t\t\t\t)\n\t\t\t\t) }\n\t\t\t</ul>\n\t\t)\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Object Property Shorthand Notation in JavaScript\nDESCRIPTION: Demonstrates the preferred shorthand notation for defining object properties and methods using ES6 syntax. Shows both incorrect and correct approaches.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/coding-guidelines.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst a = 10;\n\n// Bad:\nconst object = {\n\ta: a,\n\tperformAction: function () {\n\t\t// ...\n\t},\n};\n\n// Good:\nconst object = {\n\ta,\n\tperformAction() {\n\t\t// ...\n\t},\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Actions in JavaScript Store with Local Context\nDESCRIPTION: JavaScript code that defines an action to add a mango to the fruits array in the local context when the button is clicked.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/core-concepts/server-side-rendering.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nstore( 'myFruitPlugin', {\n\tactions: {\n\t\taddMango() {\n\t\t\tconst context = getContext();\n\t\t\tcontext.fruits.push( 'Mango' );\n\t\t},\n\t},\n} );\n```\n\n----------------------------------------\n\nTITLE: Setting Default Heading Colors in WordPress Gutenberg\nDESCRIPTION: This snippet shows how to set default heading colors for a block in WordPress Gutenberg. It specifies default text and background colors using CSS variables and hex values.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-supports.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nattributes: {\n    style: {\n        type: 'object',\n        default: {\n            elements: {\n                heading: {\n                    color: {\n                        text: 'var:preset|color|contrast',\n    \t\t\t\t\t    background: '#000000',\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: CSS Styling for ProgressBar Component\nDESCRIPTION: CSS example showing how to customize the appearance of the ProgressBar component by defining a custom CSS class.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/progress-bar/README.md#2025-04-21_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.my-custom-progress-bar {\n\twidth: 100%;\n}\n```\n\n----------------------------------------\n\nTITLE: Setup and Teardown Methods in Jest\nDESCRIPTION: Example of using Jest's beforeAll and afterAll methods for setup and teardown tasks. This snippet shows how to handle asynchronous code in these methods.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/testing-overview.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// one-time setup for *all* tests\nbeforeAll( () =>\n\tsomeAsyncAction().then( ( resp ) => {\n\t\twindow.someGlobal = resp;\n\t} )\n);\n\n// one-time teardown for *all* tests\nafterAll( () => {\n\twindow.someGlobal = null;\n} );\n```\n\n----------------------------------------\n\nTITLE: Using ToolbarButton in BlockControls for Custom Blocks\nDESCRIPTION: This snippet shows how to implement ToolbarButton within BlockControls and ToolbarGroup for custom block editing interfaces. This is the recommended approach when adding controls to a block toolbar in the editor.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/toolbar/toolbar-button/README.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { BlockControls } from '@wordpress/block-editor';\nimport { ToolbarGroup, ToolbarButton } from '@wordpress/components';\nimport { edit } from '@wordpress/icons';\n\nfunction Edit() {\n\treturn (\n\t\t<BlockControls>\n\t\t\t<ToolbarGroup>\n\t\t\t\t<ToolbarButton\n\t\t\t\t\ticon={ edit }\n\t\t\t\t\tlabel=\"Edit\"\n\t\t\t\t\tonClick={ () => alert( 'Editing' ) }\n\t\t\t\t/>\n\t\t\t</ToolbarGroup>\n\t\t</BlockControls>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Restricting Block Parent\nDESCRIPTION: Demonstrates how to limit a block to only be available as a nested block within specific parent blocks.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-registration.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// Only allow this block when it is nested in a Columns block\nparent: [ 'core/columns' ],\n```\n\n----------------------------------------\n\nTITLE: Configuring npm Scripts for @wordpress/scripts in package.json\nDESCRIPTION: Example configuration for the scripts section in package.json, demonstrating various commands available in @wordpress/scripts.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/scripts/README.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"scripts\": {\n\t\t\"build\": \"wp-scripts build\",\n\t\t\"check-engines\": \"wp-scripts check-engines\",\n\t\t\"check-licenses\": \"wp-scripts check-licenses\",\n\t\t\"format\": \"wp-scripts format\",\n\t\t\"lint:css\": \"wp-scripts lint-style\",\n\t\t\"lint:js\": \"wp-scripts lint-js\",\n\t\t\"lint:md:docs\": \"wp-scripts lint-md-docs\",\n\t\t\"lint:pkg-json\": \"wp-scripts lint-pkg-json\",\n\t\t\"packages-update\": \"wp-scripts packages-update\",\n\t\t\"plugin-zip\": \"wp-scripts plugin-zip\",\n\t\t\"start\": \"wp-scripts start\",\n\t\t\"test:e2e\": \"wp-scripts test-e2e\",\n\t\t\"test:unit\": \"wp-scripts test-unit-js\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Fields for Dataset Display\nDESCRIPTION: This snippet defines the fields configuration for DataViews, detailing how each dataset field behaves in terms of sorting, visibility, and display properties.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/dataviews/README.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst STATUSES = [\n\t{ value: 'draft', label: __( 'Draft' ) },\n\t{ value: 'future', label: __( 'Scheduled' ) },\n\t{ value: 'pending', label: __( 'Pending Review' ) },\n\t{ value: 'private', label: __( 'Private' ) },\n\t{ value: 'publish', label: __( 'Published' ) },\n\t{ value: 'trash', label: __( 'Trash' ) },\n];\nconst fields = [\n\t{\n\t\tid: 'title',\n\t\tlabel: 'Title',\n\t\tenableHiding: false,\n\t},\n\t{\n\t\tid: 'date',\n\t\tlabel: 'Date',\n\t\trender: ( { item } ) => {\n\t\t\treturn <time>{ getFormattedDate( item.date ) }</time>;\n\t\t},\n\t},\n\t{\n\t\tid: 'author',\n\t\tlabel: 'Author',\n\t\trender: ( { item } ) => {\n\t\t\treturn <a href=\"...\">{ item.author }</a>;\n\t\t},\n\t\telements: [\n\t\t\t{ value: 1, label: 'Admin' },\n\t\t\t{ value: 2, label: 'User' },\n\t\t],\n\t\tfilterBy: {\n\t\t\toperators: [ 'is', 'isNot' ],\n\t\t},\n\t\tenableSorting: false,\n\t},\n\t{\n\t\tid: 'status',\n\t\tlabel: 'Status',\n\t\tgetValue: ( { item } ) =>\n\t\t\tSTATUSES.find( ( { value } ) => value === item.status )?.label ??\n\t\t\titem.status,\n\t\telements: STATUSES,\n\t\tfilterBy: {\n\t\t\toperators: [ 'isAny' ],\n\t\t},\n\t\tenableSorting: false,\n\t},\n];\n```\n\n----------------------------------------\n\nTITLE: Using Scrollable Component in JSX\nDESCRIPTION: This code snippet demonstrates how to import and use the `Scrollable` component from `@wordpress/components`. It wraps a `div` with a specified height within the `Scrollable` component, creating a scrollable container with a maximum height of 200 pixels. The `__experimentalScrollable` alias indicates that the component is still experimental and subject to changes.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/scrollable/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { __experimentalScrollable as Scrollable } from '@wordpress/components';\n\nfunction Example() {\n\treturn (\n\t\t<Scrollable style={ { maxHeight: 200 } }>\n\t\t\t<div style={ { height: 500 } }>...</div>\n\t\t</Scrollable>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting from Store - WordPress - JavaScript\nDESCRIPTION: The select function returns an object of pre-bound selector functions for a given store descriptor, allowing easy state querying without providing the state explicitly.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/data/README.md#2025-04-21_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { select } from '@wordpress/data';\nimport { store as myCustomStore } from 'my-custom-store';\n\nselect( myCustomStore ).getPrice( 'hammer' );\n```\n\n----------------------------------------\n\nTITLE: Registering Store with Persistence in JavaScript\nDESCRIPTION: This code snippet illustrates how to register a store in WordPress with a persistence option, allowing specific state keys to be persisted. The `persist` property can be set to true for full state persistence or an array of specific state keys to persist.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/data/src/plugins/persistence/README.md#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nwp.data.registerStore( 'my-plugin', {\n\t// ...\n\n\tpersist: [ 'preferences' ],\n} );\n```\n\n----------------------------------------\n\nTITLE: Fetching Block Variations for Social Link Block in React Component\nDESCRIPTION: Demonstrates the use of getBlockVariations selector to retrieve variations for a specific block (core/social-link). The component displays a list of variation titles.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core-blocks.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { store as blocksStore } from '@wordpress/blocks';\nimport { useSelect } from '@wordpress/data';\n\nconst ExampleComponent = () => {\n\tconst socialLinkVariations = useSelect(\n\t\t( select ) =>\n\t\t\tselect( blocksStore ).getBlockVariations( 'core/social-link' ),\n\t\t[]\n\t);\n\n\treturn (\n\t\t<ul>\n\t\t\t{ socialLinkVariations &&\n\t\t\t\tsocialLinkVariations.map( ( variation ) => (\n\t\t\t\t\t<li key={ variation.name }>{ variation.title }</li>\n\t\t\t\t) ) }\n\t\t</ul>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Counter Block Implementation with Global State\nDESCRIPTION: A complete example of a Counter Block that displays a counter value from global state. It initializes the counter state on the server and uses data-wp-text directive to display the current count.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/core-concepts/undestanding-global-state-local-context-and-derived-state.md#2025-04-21_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\nwp_interactivity_state( 'myCounterPlugin', array(\n  'counter' => 0\n));\n?>\n\n<div\n  data-wp-interactive=\"myCounterPlugin\"\n  <?php echo get_block_wrapper_attributes(); ?>\n>\n  Counter: <span data-wp-text=\"state.counter\"></span>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Generating CSS Custom Properties from theme.json Custom Settings\nDESCRIPTION: Example of how custom settings in theme.json are transformed into CSS custom properties. This shows how nested properties like lineHeight.body become kebab-case CSS variables with -- separators.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/themes/global-settings-and-styles.md#2025-04-21_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"version\": 3,\n\t\"settings\": {\n\t\t\"custom\": {\n\t\t\t\"lineHeight\": {\n\t\t\t\t\"body\": 1.7\n\t\t\t},\n\t\t\t\"font-primary\": \"-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, Ubuntu, Cantarell, 'Helvetica Neue', sans-serif\"\n\t\t}\n\t}\n}\n```\n\nLANGUAGE: css\nCODE:\n```\nbody {\n\t--wp--custom--line-height--body: 1.7;\n\t--wp--custom--font-primary: \"-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, Ubuntu, Cantarell, 'Helvetica Neue', sans-serif\";\n}\n```\n\n----------------------------------------\n\nTITLE: Using Block Classname with useBlockProps in WordPress\nDESCRIPTION: Shows how to use the automatically generated block classname with useBlockProps for styling. The classname is generated based on the block's name with 'wp-block-' prefix.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/block-tutorial/applying-styles-with-stylesheets.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { registerBlockType } from '@wordpress/blocks';\nimport { useBlockProps } from '@wordpress/block-editor';\n\nregisterBlockType( 'gutenberg-examples/example-02-stylesheets', {\n\tedit() {\n\t\tconst blockProps = useBlockProps();\n\n\t\treturn (\n\t\t\t<p { ...blockProps }>Hello World (from the editor, in green).</p>\n\t\t);\n\t},\n\tsave() {\n\t\tconst blockProps = useBlockProps.save();\n\n\t\treturn (\n\t\t\t<p { ...blockProps }>Hello World (from the frontend, in red).</p>\n\t\t);\n\t},\n} );\n```\n\n----------------------------------------\n\nTITLE: Creating Error Notice with createErrorNotice Action\nDESCRIPTION: Demonstrates how to create an error notice using the createErrorNotice action. Shows usage with snackbar type and explicit dismiss button options.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core-notices.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { __ } from '@wordpress/i18n';\nimport { useDispatch } from '@wordpress/data';\nimport { store as noticesStore } from '@wordpress/notices';\nimport { Button } from '@wordpress/components';\n\nconst ExampleComponent = () => {\n\tconst { createErrorNotice } = useDispatch( noticesStore );\n\treturn (\n\t\t<Button\n\t\t\tonClick={ () =>\n\t\t\t\tcreateErrorNotice( __( 'An error occurred!' ), {\n\t\t\t\t\ttype: 'snackbar',\n\t\t\t\t\texplicitDismiss: true,\n\t\t\t\t} )\n\t\t\t}\n\t\t>\n\t\t\t{ __(\n\t\t\t\t'Generate an snackbar error notice with explicit dismiss button.'\n\t\t\t) }\n\t\t</Button>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Using Item Component with Custom Size via ItemGroup Context\nDESCRIPTION: Demonstrates how the Item component receives the size prop from its parent ItemGroup component through React Context. In this example, the Item will render with a size of 'small'.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/item-group/item/README.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n\t__experimentalItemGroup as ItemGroup,\n\t__experimentalItem as Item,\n} from '@wordpress/components';\n\nconst Example = () => (\n\t<ItemGroup size=\"small\">\n\t\t<Item>...</Item>\n\t</ItemGroup>\n);\n```\n\n----------------------------------------\n\nTITLE: Customizing Product Type Selector in WordPress Gutenberg using JavaScript\nDESCRIPTION: This snippet customizes the UI for the taxonomy 'product-type' by using a React component to replace the default taxonomy selector. It adds a filter to the 'editor.PostTaxonomyType' hook that allows for conditional rendering based on the taxonomy slug. The original component remains intact for other taxonomies.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/editor/src/components/post-taxonomies/README.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar el = React.createElement;\n\nfunction customizeProductTypeSelector( OriginalComponent ) {\n\treturn function ( props ) {\n\t\tif ( props.slug === 'product-type' ) {\n\t\t\treturn el( 'div', {}, 'Product Type Selector' );\n\t\t} else {\n\t\t\treturn el( OriginalComponent, props );\n\t\t}\n\t};\n}\n\nwp.hooks.addFilter(\n\t'editor.PostTaxonomyType',\n\t'my-plugin/set-custom-term-selector',\n\tcustomizeProductTypeSelector\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Controls to Query Loop Block in React\nDESCRIPTION: Shows how to add custom controls to the Query Loop block using a React Higher-Order Component and the editor.BlockEdit filter.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/block-tutorial/extending-the-query-loop-block.md#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { InspectorControls } from '@wordpress/block-editor';\n\nexport const withBookQueryControls = ( BlockEdit ) => ( props ) => {\n\t// We only want to add these controls if it is our variation,\n\t// so here we can implement a custom logic to check for that, similar\n\t// to the `isActive` function described above.\n\t// The following assumes that you wrote a custom `isMyBooksVariation`\n\t// function to handle that.\n\treturn isMyBooksVariation( props ) ? (\n\t\t<>\n\t\t\t<BlockEdit key=\"edit\" { ...props } />\n\t\t\t<InspectorControls>\n\t\t\t\t<BookAuthorSelector /> { /** Our custom component */ }\n\t\t\t</InspectorControls>\n\t\t</>\n\t) : (\n\t\t<BlockEdit key=\"edit\" { ...props } />\n\t);\n};\n\naddFilter( 'editor.BlockEdit', 'core/query', withBookQueryControls );\n```\n\n----------------------------------------\n\nTITLE: Creating Post Content Pattern in PHP for WordPress Events\nDESCRIPTION: A WordPress block pattern for new event announcements that supports core/post-content block type and is specific to post content type. Includes structured sections for details, directions, and RSVP with locked elements.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/curating-the-editor-experience/patterns.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n /**\n  * Title: New Event Announcement\n  * Slug: twentytwentytwo/new-event-announcement\n  * Block Types: core/post-content\n  * Post Types: post\n  * Categories: featured, text\n  */\n?>\n\n<!-- wp:heading {\"lock\":{\"move\":false,\"remove\":true}} -->\n<h2>Details</h2>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"lock\":{\"move\":false,\"remove\":true}} -->\n<h2>Directions</h2>\n<!-- /wp:heading -->\n\n<!-- wp:heading {\"lock\":{\"move\":false,\"remove\":true}} -->\n<h2>RSVP</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph {\"lock\":{\"move\":true,\"remove\":true}} -->\n<p>To RSVP, please join the #fse-outreach-experiment in Make Slack. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:buttons -->\n<div class=\"wp-block-buttons\"><!-- wp:button {\"lock\":{\"move\":true,\"remove\":false}} -->\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link wp-element-button\">Learn more</a></div>\n<!-- /wp:button --></div>\n<!-- /wp:buttons -->\n\n<!-- wp:cover {\"useFeaturedImage\":true,\"dimRatio\":80,\"overlayColor\":\"primary\",\"contentPosition\":\"center center\",\"align\":\"full\"} -->\n<div class=\"wp-block-cover alignfull\"><span aria-hidden=\"true\" class=\"wp-block-cover__background has-primary-background-color has-background-dim-80 has-background-dim\"></span><div class=\"wp-block-cover__inner-container\"><!-- wp:paragraph {\"align\":\"center\",\"placeholder\":\"Write title…\",\"fontSize\":\"large\"} -->\n<p class=\"has-text-align-center has-large-font-size\">We hope to see you there!</p>\n<!-- /wp:paragraph --></div></div>\n<!-- /wp:cover -->\n```\n\n----------------------------------------\n\nTITLE: Template-Based Directive Processing with Output Buffering\nDESCRIPTION: Shows how to process directives in a template file using output buffering (ob_start and ob_get_clean) to capture and process HTML before rendering.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/core-concepts/server-side-rendering.md#2025-04-21_snippet_32\n\nLANGUAGE: php\nCODE:\n```\n<?php\nwp_interactivity_state( 'myClassicTheme', /* ... */ );\nob_start();\n?>\n\n<div data-wp-interactive=\"myClassicTheme\">\n  ...\n</div>\n\n<?php\n$html = ob_get_clean();\necho wp_interactivity_process_directives( $html );\n```\n\n----------------------------------------\n\nTITLE: Creating Suggestions in LinkControl\nDESCRIPTION: This snippet offers examples of handling dynamic link creation in the <LinkControl> component using createSuggestion, which can return a new suggestion object directly or via a Promise. It relies on React and potential external APIs for creating entities. The createSuggestion passes the current search input and calls the handler to create a new link value, automating it through the onChange handler. Inputs are the search input value and outputs include a new link suggestion object.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/src/components/link-control/README.md#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n// Promise example\n<LinkControl\n\tcreateSuggestion={ async (inputText) => {\n        // Hard coded values. These could be dynamically created by calling out to an API which creates an entity (eg: https://developer.wordpress.org/rest-api/reference/pages/#create-a-page).\n\t\treturn {\n\t\t\tid: 1234,\n\t\t\ttype: 'page',\n\t\t\ttitle: inputText,\n\t\t\turl: '/some-url-here'\n\t\t}\n\t}}\n/>\n\n// Non-Promise example\n<LinkControl\n\tcreateSuggestion={ (inputText) => (\n\t\t{\n\t\t\tid: 1234,\n\t\t\ttype: 'page',\n\t\t\ttitle: inputText,\n\t\t\turl: '/some-url-here'\n\t\t}\n\t)}\n/>\n```\n\n----------------------------------------\n\nTITLE: Counting Total Pages of Entity Records - JavaScript\nDESCRIPTION: This function returns the total number of pages available for a specific entity's records based on the provided query parameters. This can help navigate through paginated results. It shares parameters with the previous functions.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// getEntityRecordsTotalPages\n\nfunction getEntityRecordsTotalPages( state, kind, name, query ) {\n    // Implementation here\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Post Terms - Gutenberg (Markdown)\nDESCRIPTION: This snippet defines a block for displaying post terms. It includes attributes for customizing the display of these terms.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/core-blocks.md#2025-04-21_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n- **Name:** core/post-terms\n- **Category:** theme\n- **Supports:** color (background, gradients, link, text), interactivity (clientNavigation), spacing (margin, padding), typography (fontSize, lineHeight), ~~html~~\n- **Attributes:** prefix, separator, suffix, term, textAlign\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom BlockEditor Component in React\nDESCRIPTION: This snippet shows the core structure of the custom BlockEditor component. It uses BlockEditorProvider to establish a new block editing context and includes components for block inspection and rendering.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/platform/custom-block-editor.md#2025-04-21_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nreturn (\n\t<div className=\"getdavesbe-block-editor\">\n\t\t<BlockEditorProvider\n\t\t\tvalue={ blocks }\n\t\t\tonInput={ updateBlocks }\n\t\t\tonChange={ persistBlocks }\n\t\t\tsettings={ settings }\n\t\t>\n\t\t\t<Sidebar.InspectorFill>\n\t\t\t\t<BlockInspector />\n\t\t\t</Sidebar.InspectorFill>\n\t\t\t<BlockCanvas height=\"400px\" />\n\t\t</BlockEditorProvider>\n\t</div>\n);\n```\n\n----------------------------------------\n\nTITLE: Block HTML Markup After Static Rendering\nDESCRIPTION: Shows the updated HTML markup after implementing static rendering. The block now includes the actual HTML content between opening and closing block comments.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/getting-started/tutorial.md#2025-04-21_snippet_21\n\nLANGUAGE: html\nCODE:\n```\n<!-- wp:create-block/copyright-date-block {\"showStartingYear\":true,\"startingYear\":\"2017\"} -->\n<p class=\"wp-block-create-block-copyright-date-block\">Copyright Date Block – hello from the saved content!</p>\n<!-- /wp:create-block/copyright-date-block -->\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Item Component with ItemGroup in React\nDESCRIPTION: Demonstrates how to import and use the Item component with ItemGroup to create a simple list of items. This example shows the basic structure for creating a grouped list with three items.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/item-group/item/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n\t__experimentalItemGroup as ItemGroup,\n\t__experimentalItem as Item,\n} from '@wordpress/components';\n\nfunction Example() {\n\treturn (\n\t\t<ItemGroup>\n\t\t\t<Item>Code</Item>\n\t\t\t<Item>is</Item>\n\t\t\t<Item>Poetry</Item>\n\t\t</ItemGroup>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Prepending HTTP Protocol to URL in JavaScript\nDESCRIPTION: Shows the usage of the prependHTTP function, which adds 'http://' to a URL if it appears to be a TLD without a protocol. This is useful for ensuring valid URLs when working with user input.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/url/README.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst actualURL = prependHTTP( 'wordpress.org' ); // http://wordpress.org\n```\n\n----------------------------------------\n\nTITLE: Implementing TextTransformControl in React Component\nDESCRIPTION: Demonstrates how to integrate the TextTransformControl component from @wordpress/block-editor to manage text transformation attributes. The component allows selection between none, uppercase, lowercase, and capitalize options, with changes handled through a callback function.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/src/components/text-transform-control/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { TextTransformControl } from '@wordpress/block-editor';\n\nconst MyTextTransformControlComponent = () => (\n\t<TextTransformControl\n\t\tvalue={ textTransform }\n\t\tonChange={ ( value ) => {\n\t\t\tsetAttributes( { textTransform: value } );\n\t\t} }\n\t/>\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Child Block Names for Navigation Block in React Component\nDESCRIPTION: Demonstrates the use of getChildBlockNames selector to fetch child block names for a specific block (core/navigation). The component displays a list of child block names.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core-blocks.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { store as blocksStore } from '@wordpress/blocks';\nimport { useSelect } from '@wordpress/data';\n\nconst ExampleComponent = () => {\n\tconst childBlockNames = useSelect(\n\t\t( select ) =>\n\t\t\tselect( blocksStore ).getChildBlockNames( 'core/navigation' ),\n\t\t[]\n\t);\n\n\treturn (\n\t\t<ul>\n\t\t\t{ childBlockNames &&\n\t\t\t\tchildBlockNames.map( ( child ) => (\n\t\t\t\t\t<li key={ child }>{ child }</li>\n\t\t\t\t) ) }\n\t\t</ul>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Checking If Entity Record Is Saving - JavaScript\nDESCRIPTION: This function checks if a specified entity record is currently being saved, utilizing state, kind, name, and record ID as inputs and returning a boolean result.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core.md#2025-04-21_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\n// isSavingEntityRecord\n\nfunction isSavingEntityRecord( state, kind, name, recordId ) {\n    // Implementation here\n}\n```\n\n----------------------------------------\n\nTITLE: State Management with useStateWithHistory\nDESCRIPTION: The `useStateWithHistory` hook adds state management capabilities with undo/redo support, enabling developers to provide a better user experience by allowing users to revert changes easily.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/compose/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n-   `useStateWithHistory`: Add a new hook to manage state with undo/redo support.\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Levels of Derived State in JavaScript\nDESCRIPTION: This snippet shows how to create multiple levels of computed values by accessing derived state from another derived state.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/core-concepts/undestanding-global-state-local-context-and-derived-state.md#2025-04-21_snippet_25\n\nLANGUAGE: js\nCODE:\n```\nconst { state } = store( 'myPlugin', {\n\tstate: {\n\t\tget double() {\n\t\t\treturn state.counter * 2;\n\t\t},\n\t\tget doublePlusOne() {\n\t\t\treturn state.double + 1;\n\t\t},\n\t},\n} );\n```\n\n----------------------------------------\n\nTITLE: Using useDropZone without Wrapper Element in React\nDESCRIPTION: This example demonstrates the usage of the `useDropZone` hook without a wrapper element. The `dropZoneRef` returned by the hook is directly applied to a div element. This makes the div element itself the drop zone.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/compose/src/hooks/use-drop-zone/README.md#2025-04-21_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst WithoutWrapperDropZoneElement = () => {\n\tconst dropZoneRef = useDropZone(\n\t\t{\n\t\t\tonDrop() => {\n\t\t\t\tconsole.log( 'Dropped within the drop zone.' );\n\t\t\t},\n\t\t\tonDragEnter() => {\n\t\t\t\tconsole.log( 'Dragging within the drop zone' );\n\t\t\t}\n\t\t}\n\t)\n\n\treturn (\n\t\t<div ref={ dropZoneRef }>\n\t\t\t<p>Drop Zone</p>\n\t\t</div>\n\t);\n};\n\n```\n\n----------------------------------------\n\nTITLE: Image Size Options Format\nDESCRIPTION: This code snippet shows the required format for the `imageSizeOptions` prop. This array specifies the available image sizes and their corresponding labels, enabling the 'Image Size' dropdown in the ImageSizeControl.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/src/components/image-size-control/README.md#2025-04-21_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n[\n\t{ value: 'thumbnail', label: 'Thumbnail' },\n\t{ value: 'medium', label: 'Medium' },\n\t...\n]\n```\n\n----------------------------------------\n\nTITLE: Using ActionItem.Slot Component\nDESCRIPTION: The Slot component that serves as a container for action items. Accepts name, bubblesVirtually props and passes remaining props to the container component. Defaults to using MenuGroup as the container.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/interface/src/components/action-item/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ActionItem.Slot\n  name=\"slotName\"\n  bubblesVirtually={true}\n  as={MenuGroup}\n  {...otherProps}\n/>\n```\n\n----------------------------------------\n\nTITLE: Displaying a Basic Snackbar Component in JSX\nDESCRIPTION: A simple example showing how to render a Snackbar with a text message passed as children. This displays a static success message to the user.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/snackbar/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst MySnackbarNotice = () => (\n\t<Snackbar>Post published successfully.</Snackbar>\n);\n```\n\n----------------------------------------\n\nTITLE: Using useSelect with hasFinishedResolution in MyFirstApp\nDESCRIPTION: This snippet demonstrates how to use the useSelect hook with the hasFinishedResolution selector to determine if the data has finished loading.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/data-basics/2-building-a-list-of-pages.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useSelect } from '@wordpress/data';\nimport { store as coreDataStore } from '@wordpress/core-data';\n\nfunction MyFirstApp() {\n\t// ...\n\tconst { pages, hasResolved } = useSelect( select => {\n\t\t// ...\n\t\treturn {\n\t\t\tpages: select( coreDataStore ).getEntityRecords( 'postType', 'page', query ),\n\t\t\thasResolved:\n\t\t\t\tselect( coreDataStore ).hasFinishedResolution( 'getEntityRecords', ['postType', 'page', query] ),\n\t\t}\n\t}, [searchTerm] );\n\n\t// ...\n}\n```\n\n----------------------------------------\n\nTITLE: Saving Entity Record - JavaScript\nDESCRIPTION: Saves an entity record with defined properties such as kind and name, with options available for autosave and error handling.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core.md#2025-04-21_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\nsaveEntityRecord(kind, name, record, options) {\n  // Action triggered to save an entity record.\n  // Parameters:\n  // - kind: Kind of the received entity.\n  // - name: Name of the received entity.\n  // - record: Record to be saved.\n  // - options: Saving options.\n}\n```\n\n----------------------------------------\n\nTITLE: Without Compose Example in JavaScript\nDESCRIPTION: Provides an example of achieving the same functionality as a compose call by manually nesting component enhancements with 'withSelect' and 'withDispatch'. Demonstrates how 'compose' helps clean up and simplify code structure.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/compose/README.md#2025-04-21_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst applyWithSelect = withSelect( ( select, ownProps ) => {\n\treturn doSomething( select, ownProps );\n} );\nconst applyWithDispatch = withDispatch( ( dispatch, ownProps ) => {\n\treturn doSomethingElse( dispatch, ownProps );\n} );\n\nexport default withPluginContext(\n\tapplyWithSelect( applyWithDispatch( PluginSidebarMoreMenuItem ) )\n);\n```\n\n----------------------------------------\n\nTITLE: Duplicating Blocks in Gutenberg Editor (JavaScript)\nDESCRIPTION: Action creator that returns an action object to duplicate a list of blocks. It takes an array of client IDs and an optional update selection flag.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core-block-editor.md#2025-04-21_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nduplicateBlocks( clientIds, updateSelection )\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Button Component in React\nDESCRIPTION: Example of how to import a Button component from the WordPress components package and use it in a React functional component.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/storybook/stories/docs/introduction.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Button } from '@wordpress/components';\n\nexport default function MyButton() {\n\treturn <Button>Click Me!</Button>;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Persistence Plugin in JavaScript\nDESCRIPTION: This snippet shows how to use the `use` method to include the persistence plugin in a registry with a specified storage key. The snippet requires the `wp.data` API from WordPress and demonstrates enhancing registry functionality by adding persistent storage options.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/data/src/plugins/persistence/README.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nwp.data.use( wp.data.plugins.persistence, { storageKey: 'example' } );\n```\n\n----------------------------------------\n\nTITLE: Using DataViews Component in React\nDESCRIPTION: An example of how to integrate the DataViews component in a React application. It demonstrates setting up the component with data, fields, view configuration, and the onChangeView callback for interaction handling.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/dataviews/README.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst Example = () => {\n\tconst onChangeView = () => {\n\t\t/* React to user changes. */\n\t};\n\n\treturn (\n\t\t<DataViews\n\t\t\tdata={ data }\n\t\t\tfields={ fields }\n\t\t\tview={ view }\n\t\t\tonChangeView={ onChangeView }\n\t\t\tdefaultLayouts={ defaultLayouts }\n\t\t\tactions={ actions }\n\t\t\tpaginationInfo={ paginationInfo }\n\t\t/>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Compound Components with Naming Conventions in TypeScript\nDESCRIPTION: Showcases the recommended naming conventions and structure for compound components in Gutenberg. It includes examples of subcomponents, contexts, and hooks, demonstrating proper TypeScript usage and JSDoc documentation.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/CONTRIBUTING.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n//=======================\n// subcomponent.tsx\n//=======================\nimport { forwardRef } from '@wordpress/element';\n\nexport const ComponentSubcomponent = forwardRef(\n\tfunction UnforwardedComponentSubcomponent( props, ref ) {\n\t\t/* ... */\n\t}\n);\n\n//=======================\n// context.ts\n//=======================\nimport { createContext } from '@wordpress/element';\n\nexport const ComponentContext = createContext();\n\n//=======================\n// hook.ts\n//=======================\n\n/** The hook's JSDoc. */\nexport function useComponent() {\n\t/* ... */\n}\n\n//=======================\n// component.tsx\n//=======================\nimport { forwardRef } from '@wordpress/element';\nimport { ComponentSubcomponent } from './subcomponent';\nimport { ComponentContext } from './context';\n\n/** The top-level component's JSDoc. */\nexport const Component = Object.assign(\n\tforwardRef( function UnforwardedTopLevelComponent( props, ref ) {\n\t\t/* ... */\n\t} ),\n\t{\n\t\t/** The subcomponent's JSDoc. */\n\t\tSubcomponent: Object.assign(ComponentSubcomponent, {\n\t\t\tdisplayName: 'Component.SubComponent';\n\t\t}),\n\t\t/** The context's JSDoc. */\n\t\tContext: Object.assign(ComponentContext, {\n\t\t\tdisplayName: 'Component.Context'\n\t\t}),\n\t}\n);\n\nexport default Component;\n\n//=======================\n// App.tsx\n//=======================\nimport { Component, useComponent } from '@wordpress/components';\nimport { useContext } from '@wordpress/element';\n\nfunction CompoundComponentExample() {\n\treturn (\n\t\t<Component>\n\t\t\t<Component.SubComponent />\n\t\t</Component>\n\t);\n}\n\nfunction ContextProviderExample() {\n\treturn (\n\t\t<Component.Context.Provider value={ /* ... */ }>\n\t\t\t{ /* React tree */ }\n\t\t</Component.Context.Provider>\n\t);\n}\n\nfunction ContextConsumerExample() {\n\tconst componentContext = useContext( Component.Context );\n\n\t// etc\n}\n\nfunction HookExample() {\n\tconst hookReturnValue = useComponent();\n\n\t// etc.\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Private Functions and Components\nDESCRIPTION: Demonstrates how to implement private functions, React components, classes, and variables using the lock/unlock pattern.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/coding-guidelines.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { lock } from './lock-unlock';\n\nexport const privateApis = {};\nlock( privateApis, {\n\tprivateCallback: function () {},\n\tprivateReactComponent: function PrivateComponent() {\n\t\treturn <div />;\n\t},\n\tprivateClass: class PrivateClass {},\n\tprivateVariable: 5,\n} );\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { privateApis } from '@wordpress/package1';\nimport { unlock } from './lock-unlock';\n\nconst {\n\tprivateCallback,\n\tprivateReactComponent,\n\tprivateClass,\n\tprivateVariable,\n} = unlock( privateApis );\n```\n\n----------------------------------------\n\nTITLE: JavaScript Action to Delete Fruits\nDESCRIPTION: Defines a JavaScript action (`deleteFruits`) within a store that clears the `fruits` array in the state. This action is triggered by the button click defined in the HTML.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/core-concepts/server-side-rendering.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst { state } = store( 'myFruitPlugin', {\n\tactions: {\n\t\t// ...\n\t\tdeleteFruits() {\n\t\t\tstate.fruits = [];\n\t\t},\n\t},\n} );\n```\n\n----------------------------------------\n\nTITLE: Using ActionItem Fill Component\nDESCRIPTION: The Fill component that renders individual action items. Takes name and onClick props, with remaining props passed to the item component. Defaults to using Button as the rendered component.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/interface/src/components/action-item/README.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ActionItem\n  name=\"slotName\"\n  onClick={() => {}}\n  as={Button}\n  {...otherProps}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Basic HStack Component in React\nDESCRIPTION: This snippet demonstrates how to import and use the HStack component to arrange Text components horizontally.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/h-stack/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n\t__experimentalHStack as HStack,\n\t__experimentalText as Text,\n} from '@wordpress/components';\n\nfunction Example() {\n\treturn (\n\t\t<HStack>\n\t\t\t<Text>Code</Text>\n\t\t\t<Text>is</Text>\n\t\t\t<Text>Poetry</Text>\n\t\t</HStack>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Debugging Jest Unit Tests with Chrome\nDESCRIPTION: This command shows how to debug Jest unit tests in Google Chrome using the `--inspect-brk` flag.  It pauses execution at the first line of the script, allowing you to open Chrome DevTools and inspect the code.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/scripts/README.md#2025-04-21_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nwp-scripts --inspect-brk test-unit-js --runInBand --no-cache\n```\n\n----------------------------------------\n\nTITLE: Rendering Entire Editor for Buttons Block Testing\nDESCRIPTION: This snippet shows how to render the entire editor for testing the Buttons block, including initializing with HTML content.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/react-native/integration-test-guide.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst initialHtml = `<!-- wp:buttons -->\n<div class=\"wp-block-buttons\"><!-- wp:button {\"style\":{\"border\":{\"radius\":\"5px\"}}} -->\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link\" style=\"border-radius:5px\" >Hello</a></div>\n<!-- /wp:button --></div>\n<!-- /wp:buttons -->`;\nconst { getByLabelText } = initializeEditor( {\n\tinitialHtml,\n} );\n```\n\n----------------------------------------\n\nTITLE: Using NavigableMenu and TabbableContainer in WordPress Components\nDESCRIPTION: Example demonstrating how to implement both NavigableMenu and TabbableContainer components with Button elements. NavigableMenu is configured for horizontal navigation while TabbableContainer enables tab-based navigation between elements with tabIndex=\"0\".\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/navigable-container/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n\tNavigableMenu,\n\tTabbableContainer,\n\tButton,\n} from '@wordpress/components';\n\nfunction onNavigate( index, target ) {\n\tconsole.log( `Navigates to ${ index }`, target );\n}\n\nconst MyNavigableContainer = () => (\n\t<div>\n\t\t<span>Navigable Menu:</span>\n\t\t<NavigableMenu onNavigate={ onNavigate } orientation=\"horizontal\">\n\t\t\t<Button variant=\"secondary\">Item 1</Button>\n\t\t\t<Button variant=\"secondary\">Item 2</Button>\n\t\t\t<Button variant=\"secondary\">Item 3</Button>\n\t\t</NavigableMenu>\n\n\t\t<span>Tabbable Container:</span>\n\t\t<TabbableContainer onNavigate={ onNavigate }>\n\t\t\t<Button variant=\"secondary\" tabIndex=\"0\">\n\t\t\t\tSection 1\n\t\t\t</Button>\n\t\t\t<Button variant=\"secondary\" tabIndex=\"0\">\n\t\t\t\tSection 2\n\t\t\t</Button>\n\t\t\t<Button variant=\"secondary\" tabIndex=\"0\">\n\t\t\t\tSection 3\n\t\t\t</Button>\n\t\t\t<Button variant=\"secondary\" tabIndex=\"0\">\n\t\t\t\tSection 4\n\t\t\t</Button>\n\t\t</TabbableContainer>\n\t</div>\n);\n```\n\n----------------------------------------\n\nTITLE: Loading Legacy Widget Scripts in Block Editor\nDESCRIPTION: This PHP code shows how to load necessary styles and scripts for legacy widgets in other block editors by simulating the hooks that run on the widgets admin screen.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/widgets/legacy-widget-block.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nadd_action( 'admin_print_styles', function() {\n\tif ( get_current_screen()->is_block_editor() ) {\n\t\tdo_action( 'admin_print_styles-widgets.php' );\n\t}\n} );\nadd_action( 'admin_print_scripts', function() {\n\tif ( get_current_screen()->is_block_editor() ) {\n\t\tdo_action( 'load-widgets.php' );\n\t\tdo_action( 'widgets.php' );\n\t\tdo_action( 'sidebar_admin_setup' );\n\t\tdo_action( 'admin_print_scripts-widgets.php' );\n\t}\n} );\nadd_action( 'admin_print_footer_scripts', function() {\n\tif ( get_current_screen()->is_block_editor() ) {\n\t\tdo_action( 'admin_print_footer_scripts-widgets.php' );\n\t}\n} );\nadd_action( 'admin_footer', function() {\n\tif ( get_current_screen()->is_block_editor() ) {\n\t\tdo_action( 'admin_footer-widgets.php' );\n\t}\n} );\n```\n\n----------------------------------------\n\nTITLE: Toggling Preference Value Action\nDESCRIPTION: Action creator for toggling a preference value. Takes scope and preference name parameters to create an action object that signals a preference should be toggled.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core-preferences.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ntoggle( scope: string, name: string ) => Object\n```\n\n----------------------------------------\n\nTITLE: Validating Block Template in Gutenberg Editor (JavaScript)\nDESCRIPTION: Selector function that checks if the blocks match the template. It takes a boolean state parameter and returns a boolean or undefined value indicating template validity.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core-block-editor.md#2025-04-21_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nisValidTemplate( state )\n```\n\n----------------------------------------\n\nTITLE: Saving Block Attributes in Save Function\nDESCRIPTION: Example of a save function that ensures the 'url' attribute is saved in the block's HTML output.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-attributes.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction YourBlockSave( { attributes } ) {\n\treturn (\n\t\t<img src={ attributes.url } />\n\t)\n}\n```\n\n----------------------------------------\n\nTITLE: Checking for Child Blocks with Inserter Support\nDESCRIPTION: This snippet checks if a block type has at least one child block with inserter support using the `hasChildBlocksWithInserterSupport` selector. It retrieves the result for 'core/navigation' and renders it as a string within a paragraph.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core-blocks.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nimport { __, sprintf } from '@wordpress/i18n';\nimport { store as blocksStore } from '@wordpress/blocks';\nimport { useSelect } from '@wordpress/data';\n\nconst ExampleComponent = () => {\n\tconst navigationBlockHasChildBlocksWithInserterSupport = useSelect(\n\t\t( select ) =>\n\t\t\tselect( blocksStore ).hasChildBlocksWithInserterSupport(\n\t\t\t\t'core/navigation'\n\t\t\t),\n\t\t[]\n\t);\n\n\treturn (\n\t\t<p>\n\t\t\t{ sprintf(\n\t\t\t\t__(\n\t\t\t\t\t'core/navigation has child blocks with inserter support: %s'\n\t\t\t\t),\n\t\t\t\tnavigationBlockHasChildBlocksWithInserterSupport\n\t\t\t) }\n\t\t</p>\n\t);\n};\n\n```\n\n----------------------------------------\n\nTITLE: Defining Component Props\nDESCRIPTION: This Typescript definition outlines the structure of component props, including their types and requirements. Dependencies include the React library for component creation. The key parameters are propName representing the property name, with potential types such as string, number, or a callback function. The expected input is a prop object, and the output is a properly validated prop structure for use within the component.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/CONTRIBUTING.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n### `propName`: Typescript style type i.e `string`, `number`, `( nextValue: string ) => void`\n\nProp description. With a new line before and after the description and before and after type/required blocks.\n\n-   Required: Either `Yes` or `No`\n<!-- If the prop has a default value, add the following line: -->\n-   Default: [default value]\n```\n\n----------------------------------------\n\nTITLE: Using ifViewportMatches Higher-Order Component\nDESCRIPTION: Example showing how to use the ifViewportMatches higher-order component to conditionally render a component based on viewport size. This component will only render on mobile viewports smaller than the small breakpoint.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/viewport/README.md#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nfunction MyMobileComponent() {\n\treturn <div>I'm only rendered on mobile viewports!</div>;\n}\n\nMyMobileComponent = ifViewportMatches( '< small' )( MyMobileComponent );\n```\n\n----------------------------------------\n\nTITLE: Customizing Theme.json Data with PHP Filter\nDESCRIPTION: Implementation of wp_theme_json_data_theme filter to enable color controls for administrators only\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/curating-the-editor-experience/filters-and-hooks.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction example_filter_theme_json_data_theme( $theme_json ){\n    $is_administrator = current_user_can( 'edit_theme_options' );\n\n    if ( $is_administrator ) {\n        $new_data = array(\n            'version'  => 2,\n            'settings' => array(\n                'color' => array(\n                    'background'       => true,\n                    'custom'           => true,\n                    'customDuotone'    => true,\n                    'customGradient'   => true,\n                    'defaultGradients' => true,\n                    'defaultPalette'   => true,\n                    'text'             => true,\n                ),\n            ),\n        );\n    }\n\n\treturn $theme_json->update_with( $new_data );\n}\nadd_filter( 'wp_theme_json_data_theme', 'example_filter_theme_json_data_theme' );\n```\n\n----------------------------------------\n\nTITLE: Defining Block Attributes in JavaScript\nDESCRIPTION: Example of defining three attributes (url, title, and size) for a Gutenberg block. Demonstrates different attribute types and sources.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-attributes.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n\turl: {\n\t\ttype: 'string',\n\t\tsource: 'attribute',\n\t\tselector: 'img',\n\t\tattribute: 'src',\n\t},\n\ttitle: {\n\t\ttype: 'string',\n\t},\n\tsize: {\n\t\tenum: [ 'large', 'small' ],\n\t},\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Divider Component in React JSX\nDESCRIPTION: This code snippet demonstrates how to use the experimental Divider component along with Text and VStack components from @wordpress/components. It creates a vertical stack with text separated by a divider.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/divider/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n\t__experimentalDivider as Divider,\n\t__experimentalText as Text,\n\t__experimentalVStack as VStack,\n} from `@wordpress/components`;\n\nfunction Example() {\n\treturn (\n\t\t<VStack spacing={4}>\n\t\t\t<Text>Some text here</Text>\n\t\t\t<Divider />\n\t\t\t<Text>Some more text here</Text>\n\t\t</VStack>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Derived State in JavaScript\nDESCRIPTION: This snippet demonstrates how to define derived state using getters in JavaScript. It shows examples of derived state depending on global state and local context.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/core-concepts/undestanding-global-state-local-context-and-derived-state.md#2025-04-21_snippet_22\n\nLANGUAGE: js\nCODE:\n```\nconst { state } = store( 'myCounterPlugin', {\n\tstate: {\n\t\tget double() {\n\t\t\treturn state.counter * 2;\n\t\t},\n\t},\n} );\n```\n\nLANGUAGE: js\nCODE:\n```\nconst { state } = store( 'myCounterPlugin', {\n\tstate: {\n\t\tget double() {\n\t\t\tconst { counter } = getContext();\n\t\t\t// Depends on local context.\n\t\t\treturn counter * 2;\n\t\t},\n\t\tget product() {\n\t\t\tconst { counter } = getContext();\n\t\t\t// Depends on local context and global state.\n\t\t\treturn counter * state.factor;\n\t\t},\n\t},\n} );\n```\n\n----------------------------------------\n\nTITLE: Implementing TextAlignmentControl in React Component\nDESCRIPTION: Example showing how to implement the TextAlignmentControl component in a React component. The component allows setting text alignment through a user interface and updates the alignment value using the setAttributes callback.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/src/components/text-alignment-control/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { TextAlignmentControl } from '@wordpress/block-editor';\n\nconst MyTextAlignmentControlComponent = () => (\n\t<TextAlignmentControl\n\t\tvalue={ textAlign }\n\t\tonChange={ ( value ) => {\n\t\t\tsetAttributes( { textAlign: value } );\n\t\t} }\n\t/>\n);\n```\n\n----------------------------------------\n\nTITLE: Using getServerContext in JavaScript to Synchronize Local Context During Navigation\nDESCRIPTION: This JavaScript code demonstrates how to use getServerContext() to subscribe to changes in the local context during client-side navigation. The updateQuestion callback updates the currentQuestion in the local context from the server context.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/core-concepts/undestanding-global-state-local-context-and-derived-state.md#2025-04-21_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nimport { store, getServerContext } from '@wordpress/interactivity';\n\nstore( 'myPlugin', {\n\tactions: {\n\t\t// This action would be triggered by a directive, like:\n\t\t// <button data-wp-on-click=\"actions.nextQuestion\">Next Question</button>\n\t\t*nextQuestion() {\n\t\t\tevent.preventDefault( event );\n\t\t\tconst { actions } = yield import(\n\t\t\t\t'@wordpress/interactivity-router'\n\t\t\t);\n\t\t\tactions.navigate( '/question-2' );\n\t\t},\n\t},\n\tcallbacks: {\n\t\t// This callback would be triggered by a directive, like:\n\t\t// <div data-wp-watch=\"callbacks.updateQuestion\"></div>\n\t\tupdateQuestion() {\n\t\t\tconst serverContext = getServerContext();\n\t\t\tconst context = getContext();\n\n\t\t\t// Update with the new value coming from the server.\n\t\t\tcontext.currentQuestion = serverContext.currentQuestion;\n\t\t},\n\t},\n} );\n```\n\n----------------------------------------\n\nTITLE: Defining Frontend and Editor Styles in block.json\nDESCRIPTION: Configuration for styles that apply both in the editor and on the frontend. Accepts file paths, registered style handles, or an array of both.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-metadata.md#2025-04-21_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{ \"style\": [ \"file:./style.css\", \"example-shared-style\" ] }\n```\n\n----------------------------------------\n\nTITLE: Using ResponsiveWrapper Component in React\nDESCRIPTION: Example of implementing the ResponsiveWrapper component to maintain aspect ratio for an image. The wrapper takes naturalWidth and naturalHeight props to calculate the correct aspect ratio.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/responsive-wrapper/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ResponsiveWrapper } from '@wordpress/components';\n\nconst MyResponsiveWrapper = () => (\n\t<ResponsiveWrapper naturalWidth={ 2000 } naturalHeight={ 680 }>\n\t\t<img\n\t\t\tsrc=\"https://s.w.org/style/images/about/WordPress-logotype-standard.png\"\n\t\t\talt=\"WordPress\"\n\t\t/>\n\t</ResponsiveWrapper>\n);\n```\n\n----------------------------------------\n\nTITLE: Making GET Requests with Query Parameters\nDESCRIPTION: Shows how to make a GET request with query parameters using API Fetch and the addQueryArgs helper from @wordpress/url. This example demonstrates filtering posts by ID.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/api-fetch/README.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport apiFetch from '@wordpress/api-fetch';\nimport { addQueryArgs } from '@wordpress/url';\n\nconst queryParams = { include: [1,2,3] }; // Return posts with ID = 1,2,3.\n\napiFetch( { path: addQueryArgs( '/wp/v2/posts', queryParams ) } ).then( ( posts ) => {\n\tconsole.log( posts );\n} );\n```\n\n----------------------------------------\n\nTITLE: Registering Plugin Sidebar Scripts in PHP\nDESCRIPTION: PHP code to register and enqueue the necessary JavaScript files and dependencies for the plugin sidebar.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/plugin-sidebar-0.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n/*\nPlugin Name: Sidebar plugin\n*/\n\nfunction sidebar_plugin_register() {\n\twp_register_script(\n\t\t'plugin-sidebar-js',\n\t\tplugins_url( 'plugin-sidebar.js', __FILE__ ),\n\t\tarray( 'wp-plugins', 'wp-editor', 'react' )\n\t);\n}\nadd_action( 'init', 'sidebar_plugin_register' );\n\nfunction sidebar_plugin_script_enqueue() {\n\twp_enqueue_script( 'plugin-sidebar-js' );\n}\nadd_action( 'enqueue_block_editor_assets', 'sidebar_plugin_script_enqueue' );\n```\n\n----------------------------------------\n\nTITLE: BlockEditorProvider Props Type Definitions\nDESCRIPTION: Type definitions and descriptions for the BlockEditorProvider component props including value (blocks array), onChange (persistent changes callback), onInput (non-persistent changes callback), and children elements.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/src/components/provider/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface BlockEditorProviderProps {\n  value?: Array<any>;        // The current array of blocks\n  onChange?: Function;      // Callback for persistent changes\n  onInput?: Function;      // Callback for non-persistent changes\n  children?: Element;      // Child elements for context\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Post Meta for Gutenberg Block in PHP\nDESCRIPTION: This PHP snippet demonstrates how to register a post meta field for use with a Gutenberg block. It makes the field visible in the REST API, which is necessary for Gutenberg to access it.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-attributes.md#2025-04-21_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nfunction gutenberg_my_block_init() {\n\tregister_post_meta( 'post', 'author', array(\n\t\t'show_in_rest' => true,\n\t) );\n}\nadd_action( 'init', 'gutenberg_my_block_init' );\n```\n\n----------------------------------------\n\nTITLE: Checking Block Support for Paragraph Block in React Component\nDESCRIPTION: Illustrates the use of getBlockSupport selector to check if a specific block (core/paragraph) supports a particular feature (anchor). The component displays the support value.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core-blocks.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { __, sprintf } from '@wordpress/i18n';\nimport { store as blocksStore } from '@wordpress/blocks';\nimport { useSelect } from '@wordpress/data';\n\nconst ExampleComponent = () => {\n\tconst paragraphBlockSupportValue = useSelect(\n\t\t( select ) =>\n\t\t\tselect( blocksStore ).getBlockSupport( 'core/paragraph', 'anchor' ),\n\t\t[]\n\t);\n\n\treturn (\n\t\t<p>\n\t\t\t{ sprintf(\n\t\t\t\t__( 'core/paragraph supports.anchor value: %s' ),\n\t\t\t\tparagraphBlockSupportValue\n\t\t\t) }\n\t\t</p>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: WordPress Script Enqueuing with Dependencies\nDESCRIPTION: Shows how to enqueue a script in WordPress while dynamically reading its dependencies from an asset file. Includes version handling and proper script registration.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/dependency-extraction-webpack-plugin/README.md#2025-04-21_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$script_path       = 'path/to/script.js';\n$script_asset_path = 'path/to/script.asset.php';\n$script_asset      = file_exists( $script_asset_path )\n\t? require( $script_asset_path )\n\t: array( 'dependencies' => array(), 'version' => filemtime( $script_path ) );\n$script_url = plugins_url( $script_path, __FILE__ );\nwp_enqueue_script( 'script', $script_url, $script_asset['dependencies'], $script_asset['version'] );\n```\n\n----------------------------------------\n\nTITLE: Accessing Entity Record Content via REST API\nDESCRIPTION: This Javascript code snippet demonstrates how to retrieve a post entity record using `getEntityRecord` with the `view` context. The comment highlights that `post.content` will be an object containing `protected` and `rendered` properties, illustrating the structure of data returned from the REST API in the specified context. wp.data.select('core') is assumed to provide the necessary data fetching functionality.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/core-data/src/entity-types/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst post = wp.data.select('core').getEntityRecord( 'postType', 'post', 1, { context: 'view' } )\n// `post.content` is an object with two fields: protected and rendered\n```\n\n----------------------------------------\n\nTITLE: Using Spacer to Push Apart HStack Items\nDESCRIPTION: This snippet demonstrates how to use the Spacer component within HStack to push items apart, creating space between them.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/h-stack/README.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n\t__experimentalHStack as HStack,\n\t__experimentalSpacer as Spacer,\n\t__experimentalText as Text,\n} from '@wordpress/components';\n\nfunction Example() {\n\treturn (\n\t\t<HStack>\n\t\t\t<Text>Code</Text>\n\t\t\t<Spacer />\n\t\t\t<Text>is</Text>\n\t\t\t<Text>Poetry</Text>\n\t\t</HStack>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Quote Block in Gutenberg\nDESCRIPTION: This snippet showcases a quote block in the Gutenberg editor, which wraps a paragraph within a blockquote tag. The structure allows users to add a quotation along with any attributes encapsulated in the paragraph.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/test/e2e/specs/editor/plugins/__snapshots__/Post-type-templates-Using-a-CPT-with-a-predefi-fffe1--custom-post-types-with-a-predefined-template-1-chromium.txt#2025-04-21_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph --></blockquote>\n<!-- /wp:quote -->\n```\n\n----------------------------------------\n\nTITLE: Listing Block Categories in React Component\nDESCRIPTION: Shows how to use the getCategories selector to retrieve all available block categories. The component renders a list of category titles.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core-blocks.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { store as blocksStore } from '@wordpress/blocks';\nimport { useSelect } from '@wordpress/data';\n\nconst ExampleComponent = () => {\n\tconst blockCategories = useSelect(\n\t\t( select ) => select( blocksStore ).getCategories(),\n\t\t[]\n\t);\n\n\treturn (\n\t\t<ul>\n\t\t\t{ blockCategories.map( ( category ) => (\n\t\t\t\t<li key={ category.slug }>{ category.title }</li>\n\t\t\t) ) }\n\t\t</ul>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Detecting User Typing in Gutenberg Editor (JavaScript)\nDESCRIPTION: Selector function that returns true if the user is currently typing, false otherwise. It takes the global application state as a parameter.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core-block-editor.md#2025-04-21_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nisTyping( state )\n```\n\n----------------------------------------\n\nTITLE: Editor-specific CSS for WordPress Block\nDESCRIPTION: CSS styles applied only in the editor view, setting a green background for the block.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/block-tutorial/applying-styles-with-stylesheets.md#2025-04-21_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n/* green background */\n.wp-block-gutenberg-examples-example-02-stylesheets {\n\tbackground: #090;\n\tcolor: white;\n\tpadding: 20px;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Stylelint to Use WordPress Config\nDESCRIPTION: JSON configuration to extend the WordPress stylelint config in a local project setup.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/stylelint-config/README.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"extends\": \"@wordpress/stylelint-config\"\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Local Context with HTML\nDESCRIPTION: Shows how to initialize local context directly in HTML using the data-wp-context directive with a JSON string.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/core-concepts/undestanding-global-state-local-context-and-derived-state.md#2025-04-21_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<div data-wp-context='{ \"counter\": 0 }'>\n\t<!-- Child elements will have access to `context.counter` -->\n</div>\n```\n\n----------------------------------------\n\nTITLE: Disabling Block Locking for Pages in WordPress\nDESCRIPTION: PHP filter that disables block locking permissions for all users when editing a page using the block_editor_settings_all hook. The function checks the post type and sets canLockBlocks to false for pages.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/curating-the-editor-experience/block-locking.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nadd_filter( 'block_editor_settings_all', function( $settings, $context ) {\n\tif ( $context->post && 'page' === $context->post->post_type ) {\n\t\t$settings['canLockBlocks'] = false;\n\t}\n\n\treturn $settings;\n}, 10, 2 );\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Menu Item for Plugin Sidebar in WordPress (JavaScript)\nDESCRIPTION: This snippet defines a React functional component that utilizes WordPress's Gutenberg components to create a custom menu item in a Plugin Sidebar. It demonstrates how to customize the text label of the menu item and incorporate various form controls into the sidebar panel.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/slotfills/plugin-sidebar-more-menu-item.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { __ } from '@wordpress/i18n';\nimport { PluginSidebar, PluginSidebarMoreMenuItem } from '@wordpress/editor';\nimport {\n\tPanelBody,\n\tButton,\n\tTextControl,\n\tSelectControl,\n} from '@wordpress/components';\nimport { registerPlugin } from '@wordpress/plugins';\nimport { useState } from '@wordpress/element';\nimport { image } from '@wordpress/icons';\n\nconst PluginSidebarMoreMenuItemTest = () => {\n\tconst [ text, setText ] = useState( '' );\n\tconst [ select, setSelect ] = useState( 'a' );\n\treturn (\n\t\t<> \n\t\t\t<PluginSidebarMoreMenuItem target=\"sidebar-name\" icon={ image }>\n\t\t\t\t{ __( 'Custom Menu Item Text' ) }\n\t\t\t</PluginSidebarMoreMenuItem>\n\t\t\t<PluginSidebar\n\t\t\t\tname=\"sidebar-name\"\n\t\t\t\ticon={ image }\n\t\t\t\ttitle=\"My Sidebar\"\n\t\t\t>\n\t\t\t\t<PanelBody>\n\t\t\t\t\t<h2>\n\t\t\t\t\t\t{ __(\n\t\t\t\t\t\t\t'This is a heading for the PluginSidebar example.'\n\t\t\t\t\t\t) }\n\t\t\t\t\t</h2>\n\t\t\t\t\t<p>\n\t\t\t\t\t\t{ __(\n\t\t\t\t\t\t\t'This is some example text for the PluginSidebar example.'\n\t\t\t\t\t\t) }\n\t\t\t\t\t</p>\n\t\t\t\t\t<TextControl\n\t\t\t\t\t\t__nextHasNoMarginBottom\n\t\t\t\t\t\t__next40pxDefaultSize\n\t\t\t\t\t\tlabel={ __( 'Text Control' ) }\n\t\t\t\t\t\tvalue={ text }\n\t\t\t\t\t\tonChange={ ( newText ) => setText( newText ) }\n\t\t\t\t\t/>\n\t\t\t\t\t<SelectControl\n\t\t\t\t\t\tlabel={ __( 'Select Control' ) }\n\t\t\t\t\t\tvalue={ select }\n\t\t\t\t\t\toptions={ [\n\t\t\t\t\t\t\t{ value: 'a', label: __( 'Option A' ) },\n\t\t\t\t\t\t\t{ value: 'b', label: __( 'Option B' ) },\n\t\t\t\t\t\t\t{ value: 'c', label: __( 'Option C' ) },\n\t\t\t\t\t\t] }\n\t\t\t\t\t\tonChange={ ( newSelect ) => setSelect( newSelect ) }\n\t\t\t\t\t/>\n\t\t\t\t\t<Button variant=\"primary\">\n\t\t\t\t\t\t{ __( 'Primary Button' ) }{ ' ' }\n\t\t\t\t\t</Button>\n\t\t\t\t</PanelBody>\n\t\t\t</PluginSidebar>\n\t\t\t</>\n\t);\n};\n\nregisterPlugin( 'plugin-sidebar-more-menu-item-example', {\n\trender: PluginSidebarMoreMenuItemTest,\n} );\n```\n\n----------------------------------------\n\nTITLE: Adding extra props to save element\nDESCRIPTION: This JavaScript snippet demonstrates how to use the `blocks.getSaveContent.extraProps` filter to add extra props (in this case, a background color style) to the root element of a block's `save` function. It uses `wp.hooks.addFilter` to apply the custom function to all blocks.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/filters/block-filters.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nfunction addBackgroundColorStyle( props ) {\n\treturn {\n\t\t...props,\n\t\tstyle: { backgroundColor: 'red' },\n\t};\n}\n\nwp.hooks.addFilter(\n\t'blocks.getSaveContent.extraProps',\n\t'my-plugin/add-background-color-style',\n\taddBackgroundColorStyle\n);\n\n```\n\n----------------------------------------\n\nTITLE: Using useSettings Hook for Color Palette in WordPress Gutenberg\nDESCRIPTION: Demonstrates how to use the useSettings hook to fetch the default color palette for a block instance. The hook performs a hierarchical lookup of settings through block instances, third-party filters, and block editor store.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/src/components/use-settings/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useSettings } from '@wordpress/block-editor';\n\nconst [ defaultColorPalette ] = useSettings( 'color.palette.default' );\n```\n\n----------------------------------------\n\nTITLE: Validating URL Components in JavaScript\nDESCRIPTION: Demonstrates functions for validating individual components of a URL, such as authority, fragment, path, protocol, and query string. These are useful for ensuring URL integrity.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/url/README.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst isValid = isValidAuthority( 'wordpress.org' ); // true\nconst isNotValid = isValidAuthority( 'wordpress#org' ); // false\n\nconst isValid = isValidFragment( '#valid-fragment' ); // true\nconst isNotValid = isValidFragment( '#invalid-#fragment' ); // false\n\nconst isValid = isValidPath( 'test/path/' ); // true\nconst isNotValid = isValidPath( '/invalid?test/path/' ); // false\n\nconst isValid = isValidProtocol( 'https:' ); // true\nconst isNotValid = isValidProtocol( 'https :' ); // false\n\nconst isValid = isValidQueryString( 'query=true&another=false' ); // true\nconst isNotValid = isValidQueryString( 'query=true?another=false' ); // false\n```\n\n----------------------------------------\n\nTITLE: Example WordPress Translation File in JSON Format\nDESCRIPTION: Shows the structure of a JED-formatted JSON translation file for JavaScript strings.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/internationalization.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"translation-revision-date\": \"2019-04-26T13:30:11-07:00\",\n\t\"generator\": \"WP-CLI/2.2.0\",\n\t\"source\": \"block.js\",\n\t\"domain\": \"messages\",\n\t\"locale_data\": {\n\t\t\"messages\": {\n\t\t\t\"\": {\n\t\t\t\t\"domain\": \"messages\",\n\t\t\t\t\"lang\": \"eo\",\n\t\t\t\t\"plural-forms\": \"nplurals=2; plural=(n != 1);\"\n\t\t\t},\n\t\t\t\"Simple Block\": [ \"Simpla Bloko\" ],\n\t\t\t\"Hello World\": [ \"Salunton mondo\" ]\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Save Function for Gutenberg Block\nDESCRIPTION: The save function implementation that renders the message attribute content in a div element. This matches the selector defined in the attributes configuration for proper serialization.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/platform-docs/docs/create-block/attributes.md#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useBlockProps } from '@wordpress/block-editor';\n\nfunction Save( { attributes } ) {\n\tconst blockProps = useBlockProps.save();\n\treturn <div { ...blockProps }>{ attributes.message }</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Format Types in WordPress Editor\nDESCRIPTION: A code snippet demonstrating how to disable specific format types in the WordPress block editor using the unregisterFormatType function. This example shows how to disable inline images in the RichText component.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/richtext.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nwp.richText.unregisterFormatType( 'core/image' );\n```\n\n----------------------------------------\n\nTITLE: Customizing Focus Return Behavior with withFocusReturn in React\nDESCRIPTION: This example shows how to use withFocusReturn as a higher-order function creator with custom options. It demonstrates the usage of the onFocusReturn option to customize the focus return behavior.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/higher-order/with-focus-return/README.md#2025-04-21_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\nfunction MyComponent() {\n\treturn <textarea />;\n}\n\nconst EnhancedMyComponent = withFocusReturn( {\n\tonFocusReturn() {\n\t\tdocument.getElementById( 'other-input' ).focus();\n\t\treturn false;\n\t},\n} )( MyComponent );\n```\n\n----------------------------------------\n\nTITLE: Style Diff Snapshot Testing with Jest (JSX)\nDESCRIPTION: This snippet demonstrates the use of toMatchStyleDiffSnapshot function to test the difference in styles between two states of a component. It renders a Spacer component with different props and snapshots the style differences.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/testing-overview.md#2025-04-21_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\ntest( 'should render margin', () => {\n\tconst { container: spacer } = render( <Spacer /> );\n\tconst { container: spacerWithMargin } = render( <Spacer margin={ 5 } /> );\n\texpect( spacerWithMargin ).toMatchStyleDiffSnapshot( spacer );\n} );\n```\n\n----------------------------------------\n\nTITLE: Using Performance Warning Hook in React Components\nDESCRIPTION: Shows implementation of useWarnOnChange hook that logs object changes to console for debugging component re-renders. Takes an object to monitor and optional prefix for log messages.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/compose/README.md#2025-04-21_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\nfunction MyComponent( props ) {\n\tuseWarnOnChange( props );\n\n\treturn 'Something';\n}\n```\n\n----------------------------------------\n\nTITLE: Using Lock and Unlock Utilities\nDESCRIPTION: Demonstrates basic usage of lock() and unlock() utilities for securing private data within public objects.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/coding-guidelines.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexport const publicObject = {};\nconst privateString = 'private information';\nlock( publicObject, privateString );\nconsole.log( publicObject );\nconsole.log( unlock( publicObject ) );\nexport const anotherObject = {};\nlock( anotherObject, function privateFn() {} );\nconsole.log( unlock( anotherObject ) );\n```\n\n----------------------------------------\n\nTITLE: Retrieving Updated Entity Record in Gutenberg Data (JavaScript)\nDESCRIPTION: This code snippet shows how to retrieve the updated entity record after saving changes using the getEntityRecord selector.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/data-basics/3-building-an-edit-form.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// Replace 9 with an actual page ID\nwp.data.select( 'core' ).getEntityRecord( 'postType', 'page', 9 ).title.rendered\n```\n\n----------------------------------------\n\nTITLE: DOM Ready Block Style Unregistration\nDESCRIPTION: JavaScript implementation ensuring block style unregistration occurs after DOM is ready.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-styles.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nwp.domReady( function () {\n\twp.blocks.unregisterBlockStyle( 'core/quote', 'large' );\n} );\n```\n\n----------------------------------------\n\nTITLE: Documenting Version 1.50.0 Changes in WordPress Gutenberg Changelog\nDESCRIPTION: This section details the changes in version 1.50.0 of the WordPress Gutenberg project. It includes an update to the minimum deployment target for iOS, raising it to iOS 13.0.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/react-native-bridge/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.50.0\n\n-   [***] Bump minimum deployment target to iOS 13.0 [#27577]\n```\n\n----------------------------------------\n\nTITLE: Accessing Disabled Context in React\nDESCRIPTION: This code snippet demonstrates how to access the disabled context provided by the `<Disabled>` component. It uses the `useContext` hook with `Disabled.Context` to determine if the component is currently disabled, and then applies styling (opacity) based on the disabled state.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/disabled/README.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nfunction CustomButton( props ) {\n\tconst isDisabled = useContext( Disabled.Context );\n\treturn <button { ...props } style={ { opacity: isDisabled ? 0.5 : 1 } } />;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic Block Variant\nDESCRIPTION: Command to generate a dynamic block using a built-in template variant\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/create-block/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ npx @wordpress/create-block@latest --variant dynamic\n```\n\n----------------------------------------\n\nTITLE: Providing Block Example Data\nDESCRIPTION: Shows how to define example data for a block to be used in previews and the inspector help panel.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-registration.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexample: {\n\tattributes: {\n\t\tcover: 'https://example.com/image.jpg',\n\t\tauthor: 'William Shakespeare',\n\t\tpages: 500\n\t},\n},\n```\n\n----------------------------------------\n\nTITLE: Display Shortcut Example\nDESCRIPTION: Example showing how to use the displayShortcut utility to show keyboard shortcuts. This example demonstrates displaying a primary shortcut on macOS.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/keycodes/README.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndisplayShortcut.primary( 'm' );\n// \"⌘M\"\n```\n\n----------------------------------------\n\nTITLE: Checking if Block is Ungroupable in Gutenberg Editor (JavaScript)\nDESCRIPTION: Selector function that determines if a block can be ungrouped. It considers factors like being a single grouping block with inner blocks, having an 'ungroup' transform, and being removable.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core-block-editor.md#2025-04-21_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nisUngroupable( state, clientId )\n```\n\n----------------------------------------\n\nTITLE: Implementing Loading Indicator in PagesList Component\nDESCRIPTION: This snippet shows how to add a loading indicator and 'No results' message to the PagesList component using the Spinner component from @wordpress/components.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/data-basics/2-building-a-list-of-pages.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { SearchControl, Spinner } from '@wordpress/components';\nfunction PagesList( { hasResolved, pages } ) {\n\tif ( !hasResolved ) {\n\t\treturn <Spinner/>\n\t}\n\tif ( !pages?.length ) {\n\t\treturn <div>No results</div>\n\t}\n\t// ...\n}\n\nfunction MyFirstApp() {\n\t// ...\n\n\treturn (\n\t\t<div>\n\t\t\t// ...\n\t\t\t<PagesList hasResolved={ hasResolved } pages={ pages }/>\n\t\t</div>\n\t)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest Setup Files\nDESCRIPTION: Jest configuration to include the jest-puppeteer-axe setup file in the test environment.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/jest-puppeteer-axe/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n\"jest\": {\n  \"setupFilesAfterEnv\": [\n    \"@wordpress/jest-puppeteer-axe\"\n  ]\n},\n```\n\n----------------------------------------\n\nTITLE: Basic Media Upload Implementation\nDESCRIPTION: Example showing how to use uploadMedia function to handle file uploads to the WordPress media library. Demonstrates basic usage with file list and handlers.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/media-utils/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nwp.mediaUtils.utils.uploadMedia( {\n\tfilesList: myFiles,\n\tonFileChange: handleFileChange,\n\tonError: handleFileError,\n} );\n```\n\n----------------------------------------\n\nTITLE: Setting Default Link Colors in WordPress Gutenberg\nDESCRIPTION: This snippet shows how to set default link colors for a block in WordPress Gutenberg. It specifies default text colors for normal and hover states using CSS variables and hex values.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-supports.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nattributes: {\n    style: {\n        type: 'object',\n        default: {\n            elements: {\n                link: {\n                    color: {\n                        text: 'var:preset|color|contrast',\n                    },\n\t\t\t\t\t\":hover\": {\n\t\t\t\t\t\tcolor: {\n\t\t\t\t\t\t\ttext: \"#000000\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Store for wp-init with Multiple Callbacks\nDESCRIPTION: Defines a store with initialization callbacks for logging time and focusing on elements. Used with multiple wp-init directives on a form to perform different initialization actions.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/api-reference.md#2025-04-21_snippet_23\n\nLANGUAGE: js\nCODE:\n```\nimport { store, getElement } from '@wordpress/interactivity';\n\nstore( \"myPlugin\", {\n  callbacks: {\n    logTimeInit: () => console.log( `Init at ` + new Date() ),\n    focusFirstElement: () => {\n      const { ref } = getElement();\n      ref.querySelector( 'input:first-child' ).focus(),\n    },\n  },\n} );\n```\n\n----------------------------------------\n\nTITLE: Hiding Insertion Point in Gutenberg Editor (JavaScript)\nDESCRIPTION: Action creator that returns an action object to hide the block insertion point in the editor.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core-block-editor.md#2025-04-21_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nhideInsertionPoint()\n```\n\n----------------------------------------\n\nTITLE: Unregistering Block Style in React Component (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use the unregisterBlockStyle function to remove a specific style variation from a block type. In this case, it removes the 'plain' style from the 'core/quote' block.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/blocks/README.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { __ } from '@wordpress/i18n';\nimport { unregisterBlockStyle } from '@wordpress/blocks';\nimport { Button } from '@wordpress/components';\n\nconst ExampleComponent = () => {\n\treturn (\n\t\t<Button\n\t\t\tonClick={ () => {\n\t\t\t\tunregisterBlockStyle( 'core/quote', 'plain' );\n\t\t\t} }\n\t\t>\n\t\t\t{ __( 'Remove the \"Plain\" block style for core/quote' ) }\n\t\t</Button>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Filtering Available Custom Units in WordPress Themes\nDESCRIPTION: This PHP snippet demonstrates how to filter the available custom units in the WordPress block editor. It allows only 'rem' and 'em' units to be used.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/themes/theme-support.md#2025-04-21_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nadd_theme_support( 'custom-units', 'rem', 'em' );\n```\n\n----------------------------------------\n\nTITLE: Initializing Local Context with PHP\nDESCRIPTION: Demonstrates server-side initialization of local context using the wp_interactivity_data_wp_context PHP helper function.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/core-concepts/undestanding-global-state-local-context-and-derived-state.md#2025-04-21_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$context = array( 'counter' => 0 );\n?>\n\n<div <?php echo wp_interactivity_data_wp_context( $context ); ?>>\n  <!-- Child elements will have access to `context.counter` -->\n</div>\n```\n\n----------------------------------------\n\nTITLE: Spacer for Element Separation in VStack with React\nDESCRIPTION: This snippet illustrates the utilization of Spacer in a VStack to create space between elements. When Spacer is invoked without children, it creates a buffer zone between 'Code' and 'is'. The requisite is the '@wordpress/components' package, featuring Spacer and Text imports. The output visibly separates 'Code', 'is', and 'Poetry' with Spacer applied between the first two elements.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/v-stack/README.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n\t__experimentalSpacer as Spacer,\n\t__experimentalText as Text,\n\t__experimentalVStack as VStack,\n} from '@wordpress/components';\n\nfunction Example() {\n\treturn (\n\t\t<VStack>\n\t\t\t<Text>Code</Text>\n\t\t\t<Spacer />\n\t\t\t<Text>is</Text>\n\t\t\t<Text>Poetry</Text>\n\t\t</VStack>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: WordPress Global Styles Theme.json Examples\nDESCRIPTION: Series of JSON examples showing how styles and settings are consolidated from different sources (WordPress defaults, theme, and user) in the Global Styles system.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/explanations/architecture/styles.md#2025-04-21_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"styles\": {\n\t\t\"color\": {\n\t\t\t\"background\": \"<WordPress value>\"\n\t\t},\n\t\t\"typography\": {\n\t\t\t\"fontSize\": \"<WordPress value>\"\n\t\t}\n\t}\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"styles\": {\n\t\t\"typography\": {\n\t\t\t\"fontSize\": \"<theme value>\",\n\t\t\t\"lineHeight\": \"<theme value>\"\n\t\t}\n\t}\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"styles\": {\n\t\t\"typography\": {\n\t\t\t\"lineHeight\": \"<user value>\"\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: WordPress Editor Action Creators\nDESCRIPTION: Collection of action creator functions for modifying editor UI state in the core/edit-post namespace. Includes actions for closing/opening sidebars, handling meta boxes, toggling panels, and managing modals.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core-edit-post.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncloseGeneralSidebar() // Closes the sidebar\ncloseModal() // Closes active modal\nhideBlockTypes( blockNames ) // Hides specified block types\ninitializeMetaBoxes() // Initializes meta box functionality\nmetaBoxUpdatesFailure() // Signals failed meta box update\nmetaBoxUpdatesSuccess() // Signals successful meta box update\nopenGeneralSidebar( name ) // Opens specified sidebar\n```\n\n----------------------------------------\n\nTITLE: PHP: Serializing a Translated String\nDESCRIPTION: This snippet shows how to serialize a translated string ('Mango') from PHP to the client-side state using `wp_interactivity_state`.  This ensures that the JavaScript action uses the translated version of the string.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/core-concepts/server-side-rendering.md#2025-04-21_snippet_24\n\nLANGUAGE: php\nCODE:\n```\nwp_interactivity_state( 'myFruitPlugin', array(\n  'fruits' => array( __( 'Apple' ), __( 'Banana' ), __( 'Cherry' ) ),\n  'mango'  => __( 'Mango' ),\n));\n```\n\n----------------------------------------\n\nTITLE: Block Object Structure in JavaScript\nDESCRIPTION: Defines the core structure of a block object, including clientId, type, attributes, and innerBlocks. This represents the fundamental data model of a block in the editor.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/platform-docs/docs/basic-concepts/data.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst block = {\n\tclientId, // unique string identifier.\n\ttype, // The block type (paragraph, image...)\n\tattributes, // (key, value) set of attributes representing the direct properties/content of the current block.\n\tinnerBlocks, // An array of child blocks or inner blocks.\n};\n```\n\n----------------------------------------\n\nTITLE: Fetching Block Styles for Button Block in React Component\nDESCRIPTION: Shows how to use the getBlockStyles selector to retrieve block styles for a specific block (in this case, the core/button block). The component renders a list of available style labels.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core-blocks.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { store as blocksStore } from '@wordpress/blocks';\nimport { useSelect } from '@wordpress/data';\n\nconst ExampleComponent = () => {\n\tconst buttonBlockStyles = useSelect(\n\t\t( select ) => select( blocksStore ).getBlockStyles( 'core/button' ),\n\t\t[]\n\t);\n\n\treturn (\n\t\t<ul>\n\t\t\t{ buttonBlockStyles &&\n\t\t\t\tbuttonBlockStyles.map( ( style ) => (\n\t\t\t\t\t<li key={ style.name }>{ style.label }</li>\n\t\t\t\t) ) }\n\t\t</ul>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Shared Lock Acquisition on Book Entity\nDESCRIPTION: Shows how multiple shared locks can be acquired on the same entity, enabling concurrent read operations\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/core-data/src/locks/README.md#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n{\n\t\"locks\": [],\n\t\"children\": {\n\t\t\"book\": {\n\t\t\t\"locks\": [ { \"exclusive\": false, /* data */ }, { \"exclusive\": false, /* data */ } ],\n\t\t\t\"children\": {\n\t\t\t\t1: {\n\t\t\t\t\t\"locks\": [],\n\t\t\t\t\t\"children\": {}\n\t\t\t\t},\n\t\t\t\t2: {\n\t\t\t\t\t\"locks\": [],\n\t\t\t\t\t\"children\": {}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using the Spinner Component in React\nDESCRIPTION: This code demonstrates how to import the Spinner component from the WordPress components package and implement it in a React functional component. The Spinner is rendered without any props to display a loading indicator.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/spinner/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Spinner } from '@wordpress/components';\n\nfunction Example() {\n\treturn <Spinner />;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Toolbar Button Component\nDESCRIPTION: Implementation of a custom toolbar button using RichTextToolbarButton component with basic click handling.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/format-api.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { registerFormatType } from '@wordpress/rich-text';\nimport { RichTextToolbarButton } from '@wordpress/block-editor';\n\nconst MyCustomButton = ( props ) => {\n\treturn (\n\t\t<RichTextToolbarButton\n\t\t\ticon=\"editor-code\"\n\t\t\ttitle=\"Sample output\"\n\t\t\tonClick={ () => {\n\t\t\t\tconsole.log( 'toggle format' );\n\t\t\t} }\n\t\t/>\n\t);\n};\n\nregisterFormatType( 'my-custom-format/sample-output', {\n\ttitle: 'Sample output',\n\ttagName: 'samp',\n\tclassName: null,\n\tedit: MyCustomButton,\n} );\n```\n\n----------------------------------------\n\nTITLE: Creating Variants in JavaScript Templates\nDESCRIPTION: This JavaScript example details the use of variants to form template modifications, allowing for variant-specific values over default ones. This flexibility is useful when running template commands with variant flags, and it supports conditional mustache tag rendering.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/create-block/docs/external-template.md#2025-04-21_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n\tdefaultValues: {\n\t\tslug: 'my-fantastic-block',\n\t\ttitle: 'My fantastic block',\n\t\tdashicon: 'palmtree',\n\t\tversion: '1.2.3',\n\t},\n\tvariants: {\n\t\tprimary: {},\n\t\tsecondary: {\n\t\t\ttitle: 'My fantastic block - secondary variant',\n\t\t},\n\t},\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing ConfirmDialog in Uncontrolled Mode (JSX)\nDESCRIPTION: Demonstrates how to use the ConfirmDialog component in uncontrolled mode, where it automatically opens on mount and closes itself. The onConfirm callback is required, and the message is passed as children.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/confirm-dialog/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { __experimentalConfirmDialog as ConfirmDialog } from '@wordpress/components';\n\nfunction Example() {\n\treturn (\n\t\t<ConfirmDialog onConfirm={ () => console.debug( ' Confirmed! ' ) }>\n\t\t\tAre you sure? <strong>This action cannot be undone!</strong>\n\t\t</ConfirmDialog>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring No Side Effects in package.json\nDESCRIPTION: This JSON snippet shows how to declare that a package has no side effects in its package.json file, allowing bundlers to perform tree-shaking.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/side-effects.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"name\": \"package\",\n\t\"sideEffects\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Admin Notices in Classic WordPress Editor (PHP)\nDESCRIPTION: This PHP code snippet demonstrates how to hook into the 'admin_notices' action to render a generic HTML notice in the classic WordPress editor. It checks the current screen, ensures it's the post editor, and then outputs the notice HTML.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/notices/README.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Hook into the 'admin_notices' action to render\n * a generic HTML notice.\n */\nfunction myguten_admin_notice() {\n\t$screen = get_current_screen();\n\t// Only render this notice in the post editor.\n\tif ( ! $screen || 'post' !== $screen->base ) {\n\t\treturn;\n\t}\n\t// Render the notice's HTML.\n\t// Each notice should be wrapped in a <div>\n\t// with a 'notice' class.\n\techo '<div class=\"notice notice-success is-dismissible\"><p>';\n\techo sprintf( __( 'Post draft updated. <a href=\"%s\" target=\"_blank\">Preview post</a>' ), get_preview_post_link() );\n\techo '</p></div>';\n};\nadd_action( 'admin_notices', 'myguten_admin_notice' );\n```\n\n----------------------------------------\n\nTITLE: Declaring Block Alignment Support\nDESCRIPTION: Examples showing how to enable full or selective alignment options for a block.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-supports.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nsupports: {\n\t// Declare support for block's alignment.\n\t// This adds support for all the options:\n\t// left, center, right, wide, and full.\n\talign: true\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nsupports: {\n\t// Declare support for specific alignment options.\n\talign: [ 'left', 'right', 'full' ]\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Context with getContext() - JavaScript\nDESCRIPTION: The getContext() method retrieves the context inherited by an element from the store. This context is influenced by the namespace and can be specified for a certain interactive region, making it helpful for dynamic UI updates.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/api-reference.md#2025-04-21_snippet_39\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst context = getContext( 'namespace' );\n```\n\nLANGUAGE: PHP\nCODE:\n```\n// render.php\n<div data-wp-interactive=\"myPlugin\" data-wp-context='{ \"isOpen\": false }'>\n\t<button data-wp-on--click=\"actions.log\">Log</button>\n</div>\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// store\nimport { store, getContext } from '@wordpress/interactivity';\n\nstore( 'myPlugin', {\n\tactions: {\n\t\tlog: () => {\n\t\t\tconst context = getContext();\n\t\t\t// Logs \"false\"\n\t\t\tconsole.log( 'context => ', context.isOpen );\n\n\t\t\t// With namespace argument.\n\t\t\tconst myPluginContext = getContext( 'myPlugin' );\n\t\t\t// Logs \"false\"\n\t\t\tconsole.log( 'myPlugin isOpen => ', myPluginContext.isOpen );\n\t\t},\n\t},\n} );\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Port Numbers for WordPress Environments\nDESCRIPTION: This configuration example demonstrates how to set custom port numbers for different WordPress environments using wp-env. It shows how to specify ports for both the main and test environments.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/env/README.md#2025-04-21_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"plugins\": [ \".\" ],\n\t\"port\": 4013,\n\t\"env\": {\n\t\t\"tests\": {\n\t\t\t\"port\": 4012\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Interactive Elements with Declarative WordPress Interactivity API (HTML)\nDESCRIPTION: This HTML markup demonstrates the declarative approach using WordPress Interactivity API directives. The UI elements are configured to automatically respond to state changes through data-wp- attributes rather than explicit DOM manipulation.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/core-concepts/the-reactive-and-declarative-mindset.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"my-interactive-plugin\" data-wp-interactive=\"myInteractivePlugin\">\n\t<button\n\t\tdata-wp-on--click=\"actions.toggleVisibility\"\n\t\tdata-wp-bind--aria-expanded=\"state.isVisible\"\n\t\tdata-wp-text=\"state.visibilityText\"\n\t\taria-controls=\"status-paragraph\"\n\t>\n\t\tshow\n\t</button>\n\t<button\n\t\tdata-wp-on--click=\"actions.toggleActivation\"\n\t\tdata-wp-bind--disabled=\"!state.isVisible\"\n\t\tdata-wp-text=\"state.activationText\"\n\t>\n\t\tactivate\n\t</button>\n\t<p\n\t\tid=\"status-paragraph\"\n\t\tdata-wp-bind--hidden=\"!state.isVisible\"\n\t\tdata-wp-class--active=\"state.isActive\"\n\t\tdata-wp-class--inactive=\"!state.isActive\"\n\t\tdata-wp-text=\"state.paragraphText\"\n\t>\n\t\tthis is inactive\n\t</p>\n</div>\n\n<style>\n\t.active {\n\t\tcolor: green;\n\t}\n\t.inactive {\n\t\tcolor: red;\n\t}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Fetching Multiple Post Types with getPostTypes Selector in JavaScript\nDESCRIPTION: This code snippet shows how to use the getPostTypes selector to retrieve information for multiple post types with optional query parameters.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useSelect } from '@wordpress/data';\nimport { store as coreDataStore } from '@wordpress/core-data';\n\nconst postTypes = useSelect( ( select ) => {\n\treturn select( coreDataStore ).getPostTypes( { per_page: 4 } );\n\n\t// Equivalent to:\n\t// select( coreDataStore ).getEntityRecords( 'root', 'postType', { per_page: 4 } );\n} );\n```\n\n----------------------------------------\n\nTITLE: Complete PHP Implementation with Styles\nDESCRIPTION: Full PHP implementation including style registration and meta field setup for the plugin sidebar.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/plugin-sidebar-0.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n/*\nPlugin Name: Sidebar example\n*/\n\nfunction sidebar_plugin_register() {\n\twp_register_script(\n\t\t'plugin-sidebar-js',\n\t\tplugins_url( 'plugin-sidebar.js', __FILE__ ),\n\t\tarray(\n\t\t\t'react',\n\t\t\t'wp-plugins',\n\t\t\t'wp-editor',\n\t\t\t'wp-components'\n\t\t)\n\t);\n\twp_register_style(\n\t\t'plugin-sidebar-css',\n\t\tplugins_url( 'plugin-sidebar.css', __FILE__ )\n\t);\n}\nadd_action( 'init', 'sidebar_plugin_register' );\n\nfunction sidebar_plugin_script_enqueue() {\n\twp_enqueue_script( 'plugin-sidebar-js' );\n\twp_enqueue_style( 'plugin-sidebar-css' );\n}\nadd_action( 'enqueue_block_editor_assets', 'sidebar_plugin_script_enqueue' );\n```\n\n----------------------------------------\n\nTITLE: Retrieving Server State with getServerState() - JavaScript\nDESCRIPTION: getServerState() retrieves server-side state information relevant to an interactive region. Like getServerContext(), the state is read-only and updates in reaction to server-side changes, enabling useful synchronization in client-server interactions.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/api-reference.md#2025-04-21_snippet_41\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst serverState = getServerState( 'namespace' );\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { state } = store( 'myStore', {\n\tcallbacks: {\n\t\tupdateServerState() {\n\t\t\tconst serverState = getServerState();\n\t\t\t// Override some property with the new value that came from the server.\n\t\t\tstate.overridableProp = serverState.overridableProp;\n\t\t},\n\t},\n} );\n```\n\n----------------------------------------\n\nTITLE: Converting Theme.json Styles to CSS Rules\nDESCRIPTION: Example showing how styles section in theme.json is converted to corresponding CSS selectors and declarations. Demonstrates the hierarchy of styling from top-level to block-specific rules.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/explanations/architecture/styles.md#2025-04-21_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"styles\": {\n\t\t\"typography\": {\n\t\t\t\"fontSize\": \"<top-level value>\"\n\t\t},\n\t\t\"elements\": {\n\t\t\t\"h1\": {\n\t\t\t\t\"typography\": {\n\t\t\t\t\t\"fontSize\": \"<h1 value>\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"blocks\": {\n\t\t\t\"core/paragraph\": {\n\t\t\t\t\"color\": {\n\t\t\t\t\t\"text\": \"<paragraph value>\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"core/group\": {\n\t\t\t\t\"color\": {\n\t\t\t\t\t\"text\": \"<group value>\"\n\t\t\t\t},\n\t\t\t\t\"elements\": {\n\t\t\t\t\t\"h1\": {\n\t\t\t\t\t\t\"color\": {\n\t\t\t\t\t\t\t\"text\": \"<h1 within group value>\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\nLANGUAGE: css\nCODE:\n```\nbody {\n\tfont-size: <top-level value>;\n}\nh1 {\n\tfont-size: <h1 value>;\n}\np {\n\tcolor: <paragraph value>;\n}\n.wp-block-group {\n\tcolor: <group value>;\n}\n.wp-block-group h1 {\n\tcolor: <h1 within group value>;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Text Domain-Specific i18n.gettext Filter in JavaScript\nDESCRIPTION: Shows how to use a text domain-specific i18n.gettext filter for better performance. The example overrides a WooCommerce-specific string using the 'i18n.gettext_woocommerce' filter.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/filters/i18n-filters.md#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n// Define our filter callback.\nfunction myPluginGettextFilter( translation, text, domain ) {\n\tif ( text === 'You've fulfilled all your orders' ) {\n\t\treturn 'All packed up and ready to go. Good job!';\n\t}\n\treturn translation;\n}\n\n// Adding the filter\nwp.hooks.addFilter(\n\t'i18n.gettext_woocommerce',\n\t'my-plugin/override-fulfilled-all-orders-text',\n\tmyPluginGettextFilter\n);\n```\n\n----------------------------------------\n\nTITLE: Normalizing Selector Arguments in WordPress Data (JavaScript)\nDESCRIPTION: This snippet illustrates the importance of argument normalization in selector calls to ensure consistent resolution status. The use of a normalization method is demonstrated to convert arguments to the expected types.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/data/README.md#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nconst getItemsSelector = ( name, type, id ) => {\n\treturn state.items[ name ][ type ][ id ] || null;\n};\n\n// Define normalization method.\ngetItemsSelector.__unstableNormalizeArgs = ( args ) => {\n\t// \"id\" argument at the 2nd index\n\tif (args[2] && typeof args[2] === 'string' ) {\n\t\targs[2] === Number(args[2]);\n\t}\n\n\treturn args;\n};\n\n// Call with correct number type.\nregistry.select( 'store' ).getItems( 'foo', 'bar', 54 );\n\n// Call with the wrong string type, **but** here we have avoided an\n// wanted resolver call because '54' is guaranteed to have been\n// coerced to a number by the `__unstableNormalizeArgs` method.\nregistry.select( 'store' ).getItems( 'foo', 'bar', '54' );\n```\n\n----------------------------------------\n\nTITLE: BorderBoxControl Value Object Examples\nDESCRIPTION: Code examples showing the two possible formats for the value prop: flat border configuration and split border configuration for individual sides.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/border-box-control/border-box-control/README.md#2025-04-21_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst flatBorder = { color: '#72aee6', style: 'solid', width: '1px' };\nconst splitBorders = {\n\ttop: { color: '#72aee6', style: 'solid', width: '1px' },\n\tright: { color: '#e65054', style: 'dashed', width: '2px' },\n\tbottom: { color: '#68de7c', style: 'solid', width: '1px' },\n\tleft: { color: '#f2d675', style: 'dotted', width: '1em' },\n};\n```\n\n----------------------------------------\n\nTITLE: Registering Block Variation Styles Programmatically in WordPress\nDESCRIPTION: PHP example of registering a 'Green' variation style for Group and Columns blocks using register_block_style(). It defines color styles for the blocks and their elements.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/themes/global-settings-and-styles.md#2025-04-21_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nregister_block_style(\n    array( 'core/group', 'core/columns' ),\n    array(\n        'name'       => 'green',\n        'label'      => __( 'Green' ),\n        'style_data' => array(\n            'color'    => array(\n                'background' => '#4f6f52',\n                'text'       => '#d2e3c8',\n            ),\n            'blocks'   => array(\n                'core/group' => array(\n                    'color' => array(\n                        'background' => '#739072',\n                        'text'       => '#e3eedd',\n                    ),\n                ),\n            ),\n            'elements' => array(\n                'link'   => array(\n                    'color'  => array(\n                        'text' => '#ead196',\n                    ),\n                    ':hover' => array(\n                        'color' => array(\n                            'text' => '#ebd9b4',\n                        ),\n                    ),\n                ),\n            ),\n        ),\n    )\n);\n```\n\n----------------------------------------\n\nTITLE: Registering New Core Block\nDESCRIPTION: Example of registering a new core block in the block library index.js file\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-library/README.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// packages/block-library/src/index.js\nimport * as blinkingParagraph from './blinking-paragraph';\n```\n\n----------------------------------------\n\nTITLE: Using Spacer Component with Heading in WordPress Gutenberg\nDESCRIPTION: This example demonstrates how to import and use the experimental Spacer component along with Heading and View components from WordPress. The Spacer adds padding around the Heading component for better spacing.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/spacer/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n\t__experimentalSpacer as Spacer,\n\t__experimentalHeading as Heading,\n\t__experimentalView as View,\n} from '@wordpress/components';\n\nfunction Example() {\n\treturn (\n\t\t<View>\n\t\t\t<Spacer>\n\t\t\t\t<Heading>WordPress.org</Heading>\n\t\t\t</Spacer>\n\t\t\t<Text>Code is Poetry</Text>\n\t\t</View>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Block Variation Styles in WordPress Theme JSON Partial\nDESCRIPTION: Example of a theme.json partial file defining styles for a 'Variation A' block style across multiple block types. It sets colors and element styles for Group, Columns, and Media & Text blocks.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/themes/global-settings-and-styles.md#2025-04-21_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"$schema\": \"https://schemas.wp.org/trunk/theme.json\",\n\t\"version\": 3,\n\t\"title\": \"Variation A\",\n\t\"slug\": \"variation-a\",\n\t\"blockTypes\": [ \"core/group\", \"core/columns\", \"core/media-text\" ],\n\t\"styles\": {\n\t\t\"color\": {\n\t\t\t\"background\": \"#eed8d3\",\n\t\t\t\"text\": \"#201819\"\n\t\t},\n\t\t\"elements\": {\n\t\t\t\"heading\": {\n\t\t\t\t\"color\": {\n\t\t\t\t\t\"text\": \"#201819\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"blocks\": {\n\t\t\t\"core/group\": {\n\t\t\t\t\"color\": {\n\t\t\t\t\t\"background\": \"#825f58\",\n\t\t\t\t\t\"text\": \"#eed8d3\"\n\t\t\t\t},\n\t\t\t\t\"elements\": {\n\t\t\t\t\t\"heading\": {\n\t\t\t\t\t\t\"color\": {\n\t\t\t\t\t\t\t\"text\": \"#eed8d3\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Using Block Bindings Utils Hook in WordPress Gutenberg\nDESCRIPTION: This snippet shows how to use the useBlockBindingsUtils hook from @wordpress/block-editor. It returns utility functions for managing block bindings and can be used with or without a specific clientId.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-bindings.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useBlockBindingsUtils } from '@wordpress/block-editor';\n\nconst { updateBlockBindings } = useBlockBindingsUtils('my-block-client-id-12345');\n...\n```\n\n----------------------------------------\n\nTITLE: Documenting Nullable and Undefined Types in TypeScript for WordPress Gutenberg\nDESCRIPTION: Examples of properly documenting nullable and undefined types in TypeScript, including the use of the ? operator and explicit undefined type annotations.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/coding-guidelines.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Returns a configuration value for a given key, if exists. Returns null if\n * there is no configured value.\n *\n * @param {string} key Configuration key to retrieve.\n *\n * @return {?*} Configuration value, if exists.\n */\nfunction getConfigurationValue( key ) {\n\treturn config.hasOwnProperty( key ) ? config[ key ] : null;\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Returns true if the next HTML token closes the current token.\n *\n * @param {WPHTMLToken}           currentToken Current token to compare with.\n * @param {WPHTMLToken|undefined} nextToken    Next token to compare against.\n *\n * @return {boolean} True if `nextToken` closes `currentToken`, false otherwise.\n */\n```\n\n----------------------------------------\n\nTITLE: Selecting Inner Blocks in React Native Gutenberg Testing\nDESCRIPTION: This code shows how to render and select inner blocks within a parent block (e.g., Buttons block) during React Native testing. It simulates a layout event to trigger rendering and then selects an inner block.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/react-native/integration-test-guide.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst innerBlockListWrapper = await within( buttonsBlock ).findByTestId(\n\t'block-list-wrapper'\n);\nfireEvent( innerBlockListWrapper, 'layout', {\n\tnativeEvent: {\n\t\tlayout: {\n\t\t\twidth: 100,\n\t\t},\n\t},\n} );\n\nconst buttonInnerBlock = await within( buttonsBlock ).findByLabelText(\n\t/Button Block\\. Row 1/\n);\nfireEvent.press( buttonInnerBlock );\n```\n\n----------------------------------------\n\nTITLE: Installing Specific WordPress Version Package\nDESCRIPTION: Command to install a WordPress package from a specific WordPress major version. This demonstrates how to use npm distribution tags to install the block editor package as used in WordPress 5.8.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/packages.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @wordpress/block-editor@wp-5.8\n```\n\n----------------------------------------\n\nTITLE: Listing All Available Block Types in React Component\nDESCRIPTION: Shows how to use the getBlockTypes selector to retrieve all available block types. The component renders a list of block titles.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core-blocks.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { store as blocksStore } from '@wordpress/blocks';\nimport { useSelect } from '@wordpress/data';\n\nconst ExampleComponent = () => {\n\tconst blockTypes = useSelect(\n\t\t( select ) => select( blocksStore ).getBlockTypes(),\n\t\t[]\n\t);\n\n\treturn (\n\t\t<ul>\n\t\t\t{ blockTypes.map( ( block ) => (\n\t\t\t\t<li key={ block.name }>{ block.title }</li>\n\t\t\t) ) }\n\t\t</ul>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Installing @wordpress/reusable-blocks Package\nDESCRIPTION: This snippet shows how to install the @wordpress/reusable-blocks package using npm. It's a prerequisite for using the reusable blocks functionality in a project.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/reusable-blocks/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @wordpress/reusable-blocks --save\n```\n\n----------------------------------------\n\nTITLE: Component Property Changes in WordPress Gutenberg\nDESCRIPTION: Examples of deprecated component properties and their replacements, including Popover focusOnMount property change from boolean to enum.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/deprecations.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Old usage\n<Popover focusOnMount />\n\n// New usage\n<Popover focusOnMount=\"firstElement\" />\n```\n\n----------------------------------------\n\nTITLE: Rendering Default List View in WordPress Block Editor using JSX\nDESCRIPTION: This snippet demonstrates how to import and use the ListView component from the WordPress block editor library. It renders a default list view which allows users to navigate through the blocks in the editor's hierarchical structure.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/src/components/list-view/README.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ListView } from '@wordpress/block-editor';\n\nconst MyNavigation = () => <ListView />;\n```\n\n----------------------------------------\n\nTITLE: Displaying a basic Notice component in React\nDESCRIPTION: Code example showing how to implement a basic Notice component with an error status and simple text message.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/notice/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Notice } from `@wordpress/components`;\n\nconst MyNotice = () => (\n\t<Notice status=\"error\">An unknown error occurred.</Notice>\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Server Context with getServerContext() - JavaScript\nDESCRIPTION: The getServerContext function offers a read-only view of the server context, which updates dynamically whenever actions like actions.navigate() are called. It is crucial for reflecting new states after page navigation while maintaining immutability.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/api-reference.md#2025-04-21_snippet_40\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst serverContext = getServerContext( 'namespace' );\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nstore( 'myPlugin', {\n\tcallbacks: {\n\t\tupdateServerContext() {\n\t\t\tconst context = getContext();\n\t\t\tconst serverContext = getServerContext();\n\t\t\t// Override some property with the new value that came from the server.\n\t\t\tcontext.overridableProp = serverContext.overridableProp;\n\t\t},\n\t},\n} );\n```\n\n----------------------------------------\n\nTITLE: Implementing withSpokenMessages HOC in React for WordPress Gutenberg\nDESCRIPTION: This code snippet demonstrates how to use the withSpokenMessages higher-order component to add spoken message functionality to a React component. It shows the usage of both immediate and debounced speak functions.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/higher-order/with-spoken-messages/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { withSpokenMessages, Button } from '@wordpress/components';\n\nconst MyComponentWithSpokenMessages = withSpokenMessages(\n\t( { speak, debouncedSpeak } ) => (\n\t\t<div>\n\t\t\t<Button\n\t\t\t\tvariant=\"secondary\"\n\t\t\t\tonClick={ () => speak( 'Spoken message' ) }\n\t\t\t>\n\t\t\t\tSpeak\n\t\t\t</Button>\n\t\t\t<Button\n\t\t\t\tvariant=\"secondary\"\n\t\t\t\tonClick={ () => debouncedSpeak( 'Delayed message' ) }\n\t\t\t>\n\t\t\t\tDebounced Speak\n\t\t\t</Button>\n\t\t</div>\n\t)\n);\n```\n\n----------------------------------------\n\nTITLE: Illustrating Updatable Type Transformation\nDESCRIPTION: This TypeScript code snippet demonstrates the effect of the `Updatable` type.  The first section shows `post.title` as an object with `raw` and `rendered` properties when using the standard `Post` interface.  The second section showcases how applying `Updatable` transforms `post.title` into a string, reflecting the data structure expected when updating the entity.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/core-data/src/entity-types/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Post< C extends Context > {\n  title: {\n    raw: string;\n    rendered: string;\n  }\n}\n\nconst post : Post< 'edit' > = ...\n// post.title is an object with properties `raw` and `rendered`\n\nconst post : Updatable<Post< 'edit' >> = ...\n// post.title is a string\n```\n\n----------------------------------------\n\nTITLE: Using Card with Size Prop in JSX\nDESCRIPTION: This snippet illustrates how to use the size prop with the Card component. It shows that the size prop is passed down to sub-components like CardBody through Context.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/card/card/README.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Card, CardBody } from '@wordpress/components';\n\nconst Example = () => (\n\t<Card size=\"small\">\n\t\t<CardBody>...</CardBody>\n\t</Card>\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Dataset Actions\nDESCRIPTION: Defines a set of actions applicable to the dataset, including view, edit, and delete functionalities. These actions support custom icons, bulk operations, and callback methods for handling user interactions.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/dataviews/README.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst actions = [\n\t{\n\t\tid: 'view',\n\t\tlabel: 'View',\n\t\tisPrimary: true,\n\t\ticon: <Icon icon={ view } />,\n\t\tisEligible: ( item ) => item.status === 'published',\n\t\tcallback: ( items ) => {\n\t\t\tconsole.log( 'Viewing item:', items[0] );\n\t\t},\n\t},\n\t{\n\t\tid: 'edit',\n\t\tlabel: 'Edit',\n\t\ticon: <Icon icon={ edit } />,\n\t\tsupportsBulk: true,\n\t\tcallback: ( items ) => {\n\t\t\tconsole.log( 'Editing items:', items );\n\t\t}\n\t},\n\t{\n\t\tid: 'delete',\n\t\tlabel: 'Delete',\n\t\tisDestructive: true,\n\t\tsupportsBulk: true,\n\t\tRenderModal: ( { items, closeModal, onActionPerformed } ) => (\n\t\t\t<div>\n\t\t\t\t<p>Are you sure you want to delete { items.length } item(s)?</p>\n\t\t\t\t<Button\n\t\t\t\t\tvariant=\"primary\"\n\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\tconsole.log( 'Deleting items:', items );\n\t\t\t\t\t\tonActionPerformed();\n\t\t\t\t\t\tcloseModal();\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\tConfirm Delete\n\t\t\t\t</Button>\n\t\t\t</div>\n\t\t)\n\t}\n];\n```\n\n----------------------------------------\n\nTITLE: Creating an Uncontrolled RadioGroup Component in React\nDESCRIPTION: This example shows how to implement an uncontrolled RadioGroup component with Radio buttons where the default value is set using the defaultChecked prop.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/radio-group/README.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport {\n\t__experimentalRadio as Radio,\n\t__experimentalRadioGroup as RadioGroup,\n} from '@wordpress/components';\n\nconst MyUncontrolledRadioRadioGroup = () => {\n\treturn (\n\t\t<RadioGroup label=\"Width\" defaultChecked=\"25\">\n\t\t\t<Radio __next40pxDefaultSize value=\"25\">25%</Radio>\n\t\t\t<Radio __next40pxDefaultSize value=\"50\">50%</Radio>\n\t\t\t<Radio __next40pxDefaultSize value=\"75\">75%</Radio>\n\t\t\t<Radio __next40pxDefaultSize value=\"100\">100%</Radio>\n\t\t</RadioGroup>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of isShallowEqual\nDESCRIPTION: Demonstrates basic usage of the isShallowEqual function for comparing objects and arrays. Shows examples of both equal and unequal comparisons.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/is-shallow-equal/README.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport isShallowEqual from '@wordpress/is-shallow-equal';\n\nisShallowEqual( { a: 1 }, { a: 1, b: 2 } );\n// ⇒ false\n\nisShallowEqual( { a: 1 }, { a: 1 } );\n// ⇒ true\n\nisShallowEqual( [ 1 ], [ 1, 2 ] );\n// ⇒ false\n\nisShallowEqual( [ 1 ], [ 1 ] );\n// ⇒ true\n```\n\n----------------------------------------\n\nTITLE: Rendering Block Variation Transforms in JSX\nDESCRIPTION: This JSX code snippet demonstrates how to render the BlockVariationTransforms component within a Gutenberg block editor context. It uses the `useSelect` hook from `@wordpress/data` to retrieve the currently selected block's client ID and passes it as a prop to the BlockVariationTransforms component. This allows the component to display available variations for the selected block.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/src/components/block-variation-transforms/README.md#2025-04-21_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport { useSelect } from '@wordpress/data';\nimport { __experimentalBlockVariationTransforms as BlockVariationTransforms } from '@wordpress/block-editor';\n\nconst MyBlockVariationTransforms = () => {\n\tconst { selectedBlockClientId } = useSelect( ( select ) => {\n\t\tconst { getSelectedBlockClientId } = select( 'core/block-editor' );\n\t\treturn {\n\t\t\tselectedBlockClientId: getSelectedBlockClientId(),\n\t\t};\n\t} );\n\n\treturn <BlockVariationTransforms blockClientId={ selectedBlockClientId } />;\n};\n```\n\n----------------------------------------\n\nTITLE: Targeting Right-Justified Content Blocks in CSS\nDESCRIPTION: This CSS selector targets blocks that explicitly set their content justification to right. It uses a semantic class name output by the Layout block support.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/explanations/architecture/styles.md#2025-04-21_snippet_18\n\nLANGUAGE: css\nCODE:\n```\n.is-content-justification-right {\n  /* styles here */\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Copyright Date Block Rendering in PHP\nDESCRIPTION: PHP implementation for rendering a copyright date block that switches between static and dynamic content based on the current year. It handles displaying either a single year or a year range with proper escaping and block wrapper attributes.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/getting-started/tutorial.md#2025-04-21_snippet_28\n\nLANGUAGE: php\nCODE:\n```\n$current_year = date( \"Y\" );\n\n// Determine which content to display.\nif ( isset( $attributes['fallbackCurrentYear'] ) && $attributes['fallbackCurrentYear'] === $current_year ) {\n\n\t// The current year is the same as the fallback, so use the block content saved in the database (by the save.js function).\n\t$block_content = $content;\n} else {\n\n\t// The current year is different from the fallback, so render the updated block content.\n\tif ( ! empty( $attributes['startingYear'] ) && ! empty( $attributes['showStartingYear'] ) ) {\n\t\t$display_date = $attributes['startingYear'] . '–' . $current_year;\n\t} else {\n\t\t$display_date = $current_year;\n\t}\n\n\t$block_content = '<p ' . get_block_wrapper_attributes() . '>© ' . esc_html( $display_date ) . '</p>';\n}\n\necho wp_kses_post( $block_content );\n```\n\n----------------------------------------\n\nTITLE: Registering Patterns in WordPress Theme JSON\nDESCRIPTION: Example of registering patterns from the WordPress Pattern Directory in theme.json. It lists pattern slugs to be included in the theme.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/themes/global-settings-and-styles.md#2025-04-21_snippet_25\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"version\": 3,\n\t\"patterns\": [ \"short-text-surrounded-by-round-images\", \"partner-logos\" ]\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Server State Typing with Client-side Inference in TypeScript\nDESCRIPTION: Demonstrates how to manually type server-initialized state while letting TypeScript infer the types for client-side store definitions. Uses type merging to combine both.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/core-concepts/using-typescript.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Types the server state.\ntype ServerState = {\n\tstate: {\n\t\tcounter: number;\n\t};\n};\n\n// Defines the store in a variable to be able to extract its type later.\nconst storeDef = {\n\tactions: {\n\t\tincrement() {\n\t\t\tstate.counter += 1;\n\t\t},\n\t},\n\tcallbacks: {\n\t\tlog() {\n\t\t\tconsole.log( `counter: ${ state.counter }` );\n\t\t},\n\t},\n};\n\n// Merges the types of the server state and the client store definition.\ntype Store = ServerState & typeof storeDef;\n\n// Injects the final types when calling the `store` function.\nconst { state } = store< Store >( 'myCounterPlugin', storeDef );\n```\n\n----------------------------------------\n\nTITLE: Checking Resolution States in Selectors (JavaScript)\nDESCRIPTION: This snippet defines the behavior and parameters of three selector state-checking functions, providing clarity on how to check whether data resolution has started, is in progress, or has completed.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/data/README.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n### hasFinishedResolution\n\nReturns true if resolution has completed for a given selector name, and arguments set.\n\n_Parameters_\n\n-   _state_ `State`: Data state.\n-   _selectorName_ `string`: Selector name.\n-   _args_ `unknown[]?`: Arguments passed to selector.\n\n_Returns_\n\n-   `boolean`: Whether resolution has completed.\n\n### hasStartedResolution\n\nReturns true if resolution has already been triggered for a given selector name, and arguments set.\n\n_Parameters_\n\n-   _state_ `State`: Data state.\n-   _selectorName_ `string`: Selector name.\n-   _args_ `unknown[]?`: Arguments passed to selector.\n\n_Returns_\n\n-   `boolean`: Whether resolution has been triggered.\n\n### isResolving\n\nReturns true if resolution has been triggered but has not yet completed for a given selector name, and arguments set.\n\n_Parameters_\n\n-   _state_ `State`: Data state.\n-   _selectorName_ `string`: Selector name.\n-   _args_ `unknown[]?`: Arguments passed to selector.\n\n_Returns_\n\n-   `boolean`: Whether resolution is in progress.\n```\n\n----------------------------------------\n\nTITLE: Implementing FormTokenField Component in React\nDESCRIPTION: Shows how to use the FormTokenField component in a React application. It demonstrates importing necessary dependencies, setting up state for selected continents, and rendering the FormTokenField with appropriate props.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/form-token-field/README.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { FormTokenField } from '@wordpress/components';\n\nconst continents = [\n\t'Africa',\n\t'America',\n\t'Antarctica',\n\t'Asia',\n\t'Europe',\n\t'Oceania',\n];\n\nconst MyFormTokenField = () => {\n\tconst [ selectedContinents, setSelectedContinents ] = useState( [] );\n\n\treturn (\n\t\t<FormTokenField\n\t\t\t__next40pxDefaultSize\n\t\t\tvalue={ selectedContinents }\n\t\t\tsuggestions={ continents }\n\t\t\tonChange={ ( tokens ) => setSelectedContinents( tokens ) }\n\t\t\t__nextHasNoMarginBottom\n\t\t/>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Block Parent Selector\nDESCRIPTION: This code snippet demonstrates how to render the BlockParentSelector component within a React component. It imports the BlockParentSelector component from the '@wordpress/block-editor' package and utilizes it with a set of client IDs for the blocks.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/src/components/block-parent-selector/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { BlockParentSelector } from '@wordpress/block-editor';\n\nconst MyBlockParentSelector = () => (\n\t<BlockParentSelector clientIds={ blockClientIds } />\n);\n\n```\n\n----------------------------------------\n\nTITLE: Preventing Plugin Activation in WordPress Environment\nDESCRIPTION: This configuration example shows how to avoid activating specific plugins in a WordPress environment using wp-env. It demonstrates using the 'mappings' key to prevent automatic activation of a test plugin.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/env/README.md#2025-04-21_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"plugins\": [ \".\" ],\n\t\"mappings\": {\n\t\t\"wp-content/plugins/my-test-plugin\": \"./path/to/test/plugin\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Translatable State in WordPress Interactivity API\nDESCRIPTION: This PHP snippet demonstrates how to use wp_interactivity_state() to set translatable content in the Interactivity API store. It creates a 'favoriteMovies' state object with a movie entry that includes a translatable name using WordPress's __() translation function.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/iapi-faq.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// render.php\nwp_interactivity_state( 'favoriteMovies', array(\n      \"1\" => array(\n        \"id\" => \"123-abc\",\n        \"movieName\" => __(\"someMovieName\", \"textdomain\")\n      ),\n) );\n```\n\n----------------------------------------\n\nTITLE: Fetching an Entity Record in WordPress\nDESCRIPTION: Loads a post with ID 1 into the core-data store. This is the first step before editing any entity in WordPress editors.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/explanations/architecture/entities.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nwp.data.select( 'core' ).getEntityRecord( 'postType', 'post', 1 );\n```\n\n----------------------------------------\n\nTITLE: Enabling Custom Spacing Controls\nDESCRIPTION: PHP code to enable padding controls for blocks in WordPress. This feature allows users to adjust spacing within blocks through the editor interface.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/themes/theme-support.md#2025-04-21_snippet_27\n\nLANGUAGE: php\nCODE:\n```\nadd_theme_support( 'custom-spacing' );\n```\n\n----------------------------------------\n\nTITLE: Store Implementation with State Management\nDESCRIPTION: Example of implementing store with global and local state management using derived values.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/api-reference.md#2025-04-21_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nconst { state } = store( 'myPlugin', {\n\tstate: {\n\t\tcurrentVideo: '',\n\t\tget isPlaying() {\n\t\t\treturn state.currentVideo !== '';\n\t\t},\n\t},\n} );\n```\n\nLANGUAGE: html\nCODE:\n```\n<div data-wp-bind--hidden=\"!state.isPlaying\" ...>\n\t<iframe ...></iframe>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Structuring Deprecated Styles in Styled Components\nDESCRIPTION: Shows how to structure deprecated styles using styled-components, allowing for easy removal when the deprecation period ends. The styles are conditionally applied based on a feature flag prop.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/CONTRIBUTING.md#2025-04-21_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n// styles.ts\nconst deprecatedMargins = ( { __nextHasNoOuterMargins } ) => {\n\tif ( ! __nextHasNoOuterMargins ) {\n\t\treturn css`\n\t\t\tmargin: 8px;\n\t\t`;\n\t}\n};\n\nexport const Wrapper = styled.div`\n\tmargin: 0;\n\n\t${ deprecatedMargins }\n`;\n```\n\n----------------------------------------\n\nTITLE: Popover Component Implementation\nDESCRIPTION: Example demonstrating how to implement popovers with SlotFillProvider and Popover.Slot for controlled rendering.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/README.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n/**\n * External dependencies\n */\nimport { Popover, SlotFillProvider } from '@wordpress/components';\n\n/**\n * Internal dependencies\n */\nimport { MyComponentWithPopover } from './my-component';\n\nconst Example = () => {\n\t<SlotFillProvider>\n\t\t<MyComponentWithPopover />\n\t\t<Popover.Slot />\n\t</SlotFillProvider>;\n};\n```\n\n----------------------------------------\n\nTITLE: Registering Block Type for ServerSideRender in PHP\nDESCRIPTION: PHP code to register a block type (core/archives) with attributes and render callback, necessary for ServerSideRender to function properly with passed attributes.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/server-side-render/README.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nregister_block_type(\n\t'core/archives',\n\tarray(\n\t\t'api_version' => 3,\n\t\t'attributes'      => array(\n\t\t\t'showPostCounts'    => array(\n\t\t\t\t'type'      => 'boolean',\n\t\t\t\t'default'   => false,\n\t\t\t),\n\t\t\t'displayAsDropdown' => array(\n\t\t\t\t'type'      => 'boolean',\n\t\t\t\t'default'   => false,\n\t\t\t),\n\t\t),\n\t\t'render_callback' => 'render_block_core_archives',\n\t)\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Notice with createNotice Action\nDESCRIPTION: Example of creating a basic success notice using the createNotice action. This is the base action that other notice creation actions build upon.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core-notices.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { __ } from '@wordpress/i18n';\nimport { useDispatch } from '@wordpress/data';\nimport { store as noticesStore } from '@wordpress/notices';\nimport { Button } from '@wordpress/components';\n\nconst ExampleComponent = () => {\n\tconst { createNotice } = useDispatch( noticesStore );\n\treturn (\n\t\t<Button\n\t\t\tonClick={ () => createNotice( 'success', __( 'Notice message' ) ) }\n\t\t>\n\t\t\t{ __( 'Generate a success notice!' ) }\n\t\t</Button>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Registering Static Command with useCommand\nDESCRIPTION: Example demonstrating how to register a static command using useCommand hook with a callback to add a new post\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/commands/README.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useCommand } from '@wordpress/commands';\nimport { plus } from '@wordpress/icons';\n\nuseCommand( {\n\tname: 'myplugin/my-command-name',\n\tlabel: __( 'Add new post' ),\n\ticon: plus,\n\tcallback: ( { close } ) => {\n\t\tdocument.location.href = 'post-new.php';\n\t\tclose();\n\t},\n} );\n```\n\n----------------------------------------\n\nTITLE: Selecting Elements in iFrame Canvas - JavaScript\nDESCRIPTION: This snippet shows how to select elements within the iframe canvas using the canvas property of the Editor utilities. It is used to locate the 'Paragraph block' document element.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/e2e-test-utils-playwright/README.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nawait editor.canvas.locator( 'role=document[name=\"Paragraph block\"i]' );\n```\n\n----------------------------------------\n\nTITLE: Installing ESLint Plugin with npm\nDESCRIPTION: This code snippet installs the WordPress ESLint plugin as a development dependency using npm. It requires a Node.js version that is supported under long-term support status.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/eslint-plugin/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @wordpress/eslint-plugin --save-dev\n```\n\n----------------------------------------\n\nTITLE: Using Interactive Elevation Component in React JSX\nDESCRIPTION: This example shows how to use the Elevation component with the isInteractive prop set to true. This allows for automatic calculation and rendering of hover, active, and focus shadow values.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/elevation/README.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { __experimentalElevation as Elevation } from '@wordpress/components';\n\nfunction Example() {\n\treturn (\n\t\t<div>\n\t\t\t<Elevation isInteractive value={ 200 } />\n\t\t</div>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Registry Consumer for React Context - WordPress - JavaScript\nDESCRIPTION: The RegistryConsumer component is a custom React context consumer exposing the registry to children components, used in conjunction with RegistryProvider to pass context data.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/data/README.md#2025-04-21_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {\n  RegistryProvider,\n  RegistryConsumer,\n  createRegistry\n} from '@wordpress/data';\n\nconst registry = createRegistry( {} );\n\nconst App = ( { props } ) => {\n  return <RegistryProvider value={ registry }>\n    <div>Hello There</div>\n    <RegistryConsumer>\n      { ( registry ) => (\n        <ComponentUsingRegistry\n        \t{ ...props }\n        \t  registry={ registry }\n      ) }\n    </RegistryConsumer>\n  </RegistryProvider>\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Gradient Value by Slug - JavaScript\nDESCRIPTION: This function retrieves the gradient value based on a gradient slug provided in the parameters. It requires an array of gradients and the specific slug to search for. It outputs the corresponding gradient value as a string.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/src/components/gradients/README.md#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction getGradientValueBySlug(gradients, slug) {\n    // Implementation to retrieve gradient value\n}\n```\n\n----------------------------------------\n\nTITLE: Safely Decoding URI Component\nDESCRIPTION: Offers a safe decoding method for URI components that gracefully handles decoding errors by returning the original component.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/url/README.md#2025-04-21_snippet_12\n\nLANGUAGE: js\nCODE:\n```\n// No specific usage example provided\n```\n\n----------------------------------------\n\nTITLE: Retrieving Unregistered Fallback Block Name with useSelect\nDESCRIPTION: This snippet illustrates how to fetch the name of the fallback block used for unregistered blocks using the `useSelect` hook and the `getUnregisteredFallbackBlockName` selector. The code then renders the unregistered fallback block name within a paragraph element, contingent on its existence.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core-blocks.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { __, sprintf } from '@wordpress/i18n';\nimport { store as blocksStore } from '@wordpress/blocks';\nimport { useSelect } from '@wordpress/data';\n\nconst ExampleComponent = () => {\n\tconst unregisteredFallbackBlockName = useSelect(\n\t\t( select ) => select( blocksStore ).getUnregisteredFallbackBlockName(),\n\t\t[]\n\t);\n\n\treturn (\n\t\tunregisteredFallbackBlockName && (\n\t\t\t<p>\n\t\t\t\t{ sprintf(\n\t\t\t\t\t__( 'Unregistered fallback block name: %s' ),\n\t\t\t\t\tunregisteredFallbackBlockName\n\t\t\t\t) }\n\t\t\t</p>\n\t\t)\n\t);\n};\n\n```\n\n----------------------------------------\n\nTITLE: Initializing ContrastChecker with Example Configuration\nDESCRIPTION: Demonstrates how to import and use the ContrastChecker component with specific color and font size parameters to validate color contrast accessibility\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/src/components/contrast-checker/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ContrastChecker } from '@wordpress/block-editor';\n\nconst Example = () => {\n\treturn (\n\t\t<ContrastChecker\n\t\t\tfonSize={ 13 }\n\t\t\ttextColor=\"#111\"\n\t\t\tbackgroundColor=\"#eee\"\n\t\t/>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Writing README Documentation for Components\nDESCRIPTION: Provides a template for creating README documentation for components in the @wordpress/components package. It includes sections for usage examples, prop documentation, and special notices for experimental or deprecated components.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/CONTRIBUTING.md#2025-04-21_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n# `ComponentName`\n\n<!-- If component is experimental, add the following section: -->\n<div class=\"callout callout-alert\">\nThis feature is still experimental. \"Experimental\" means this is an early implementation subject to drastic and breaking changes.\n</div>\n\n<!-- If component is deprecated, add the following section: -->\n<div class=\"callout callout-alert\">\nThis component is deprecated. Please use `{other component}` from the `{other package}` package instead.\n</div>\n\nDescription of the component.\n\n## Usage\n\nCode example using correct markdown syntax and formatted using project's formatting rules. See [ItemGroup](https://github.com/WordPress/gutenberg/blob/trunk/packages/components/src/item-group/item-group/README.md) for a real-world example.\n\n```jsx\nimport { ExampleComponent } from '@wordpress/components';\n\nfunction Example() {\n\treturn (\n\t\t<ExampleComponent>\n\t\t\t<p>Code is poetry</p>\n\t\t</ExampleComponent>\n\t);\n}\n```\n\n## Props\n\nThe component accepts the following props:\n```\n\n----------------------------------------\n\nTITLE: Initializing Meta Box State in Redux Store\nDESCRIPTION: This action dispatches the collected meta box location data to the editor Redux store, initializing the meta box state.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/metabox.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nINITIALIZE_META_BOX_STATE\n```\n\n----------------------------------------\n\nTITLE: Defining Actions in JavaScript Store with Global State\nDESCRIPTION: JavaScript code that defines an action to add a mango to the fruits array in the global state when the button is clicked.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/core-concepts/server-side-rendering.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst { state } = store( 'myFruitPlugin', {\n\tactions: {\n\t\taddMango() {\n\t\t\tstate.fruits.push( 'Mango' );\n\t\t},\n\t},\n} );\n```\n\n----------------------------------------\n\nTITLE: Rendering Block Breadcrumb Component\nDESCRIPTION: This snippet demonstrates how to render a block breadcrumb component with default styling. It imports the BlockBreadcrumb component from the '@wordpress/block-editor' package and renders it within a functional component.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/src/components/block-breadcrumb/README.md#2025-04-21_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport { BlockBreadcrumb } from '@wordpress/block-editor';\n\nconst MyBreadcrumb = () => <BlockBreadcrumb />;\n```\n\n----------------------------------------\n\nTITLE: Using NumberControl Component in WordPress Gutenberg\nDESCRIPTION: Example demonstrating how to import and implement the experimental NumberControl component with custom settings including shift step functionality and change handling.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/number-control/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { __experimentalNumberControl as NumberControl } from '@wordpress/components';\n\nconst Example = () => {\n\tconst [ value, setValue ] = useState( 10 );\n\n\treturn (\n\t\t<NumberControl\n\t\t\t__next40pxDefaultSize\n\t\t\tisShiftStepEnabled={ true }\n\t\t\tonChange={ setValue }\n\t\t\tshiftStep={ 10 }\n\t\t\tvalue={ value }\n\t\t/>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing Local Context in HTML\nDESCRIPTION: Shows how to access local context values in HTML markup using directives.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/core-concepts/undestanding-global-state-local-context-and-derived-state.md#2025-04-21_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<div data-wp-bind--hidden=\"!context.isOpen\">\n\t<span data-wp-text=\"context.counter\"></span>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Lazy Import with Options Configuration\nDESCRIPTION: Example showing how to use lazy-import with additional options like localPath and onInstall callback.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/lazy-import/README.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst lazyImport = require( '@wordpress/lazy-import' );\n\nfunction onInstall() {\n\tconsole.log( 'Installing…' );\n}\n\nlazyImport( 'fbjs@^1.0.0', {\n\tlocalPath: './lib/shallowEqual',\n\tonInstall,\n} ).then( /* ... */ );\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Dashicons in React JSX\nDESCRIPTION: This snippet demonstrates how to import the Dashicon component from @wordpress/components and use it to render various WordPress admin icons. It shows the usage of three different icon types: admin-home, products, and wordpress.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/dashicon/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Dashicon } from '@wordpress/components';\n\nconst MyDashicon = () => (\n\t<div>\n\t\t<Dashicon icon=\"admin-home\" />\n\t\t<Dashicon icon=\"products\" />\n\t\t<Dashicon icon=\"wordpress\" />\n\t</div>\n);\n```\n\n----------------------------------------\n\nTITLE: Handling Circular References in Derived State\nDESCRIPTION: Shows how to resolve TypeScript circular reference issues when derived state depends on global state by manually typing the getter return value.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/core-concepts/using-typescript.md#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst { state } = store( 'myCounterPlugin', {\n\tstate: {\n\t\tcounter: 1,\n\t\tget double(): number {\n\t\t\treturn state.counter * 2;\n\t\t},\n\t},\n\tactions: {\n\t\tincrement() {\n\t\t\tstate.counter += 1; // Correctly inferred!\n\t\t},\n\t},\n} );\n```\n\n----------------------------------------\n\nTITLE: Defining a WordPress Gutenberg Group Block with Constrained Layout\nDESCRIPTION: This code snippet shows the structure of a WordPress Gutenberg group block with its layout type set to 'constrained'. The block is empty but properly formatted with the required HTML comments that WordPress uses to identify and process blocks.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/test/e2e/specs/editor/blocks/__snapshots__/Group-can-be-created-using-the-block-inserter-1-chromium.txt#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"}} -->\n<div class=\"wp-block-group\"></div>\n<!-- /wp:group -->\n```\n\n----------------------------------------\n\nTITLE: Installing WordPress Priority Queue via npm\nDESCRIPTION: This command installs the `@wordpress/priority-queue` package as a dependency in your project using npm. The `--save` flag ensures that the package is added to your project's `package.json` file.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/priority-queue/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @wordpress/priority-queue --save\n```\n\n----------------------------------------\n\nTITLE: Configuring requestToExternal for Module Externalization in JavaScript\nDESCRIPTION: Demonstrates how to customize module handling by mapping module requests to global variables. The function accepts a module request string and returns either a string or array representing the global variable to use.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/dependency-extraction-webpack-plugin/README.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Externalize 'my-module'\n *\n * @param {string} request Requested module\n *\n * @return {(string|undefined)} Script global\n */\nfunction requestToExternal( request ) {\n\t// Handle imports like `import myModule from 'my-module'`\n\tif ( request === 'my-module' ) {\n\t\t// Expect to find `my-module` as myModule in the global scope:\n\t\treturn 'myModule';\n\t}\n}\n\nmodule.exports = {\n\tplugins: [ new DependencyExtractionWebpackPlugin( { requestToExternal } ) ],\n};\n```\n\n----------------------------------------\n\nTITLE: Unregistering Plugin using ES5\nDESCRIPTION: This code snippet demonstrates how to unregister a plugin using ES5 syntax. It uses the `unregisterPlugin` function from `wp.plugins` to remove a registered plugin by its name. Unregistering a plugin removes it from the editor.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/plugins/README.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n\"// Using ES5 syntax\nvar unregisterPlugin = wp.plugins.unregisterPlugin;\n\nunregisterPlugin( 'plugin-name' );\"\n```\n\n----------------------------------------\n\nTITLE: Handling Widget-Added Event in JavaScript\nDESCRIPTION: This snippet demonstrates how to handle the 'widget-added' event in JavaScript to add dynamic behavior to widget forms. It shows how to toggle visibility of a password field based on a checkbox state.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/widgets/legacy-widget-block.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n( function ( $ ) {\n\t$( document ).on( 'widget-added', function ( $event, $control ) {\n\t\t$control.find( '.change-password' ).on( 'change', function () {\n\t\t\tvar isChecked = $( this ).prop( 'checked' );\n\t\t\t$control.find( '.password' ).toggleClass( 'hidden', ! isChecked );\n\t\t} );\n\t} );\n} )( jQuery );\n```\n\n----------------------------------------\n\nTITLE: Configuring block.json for Copyright Date Block\nDESCRIPTION: Defines the block's metadata, including API version, name, category, supports, and render settings.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/getting-started/tutorial.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"$schema\": \"https://schemas.wp.org/trunk/block.json\",\n\t\"apiVersion\": 3,\n\t\"name\": \"create-block/copyright-date-block\",\n\t\"version\": \"0.1.0\",\n\t\"title\": \"Copyright Date Block\",\n\t\"category\": \"widgets\",\n\t\"description\": \"Display your site's copyright date.\",\n\t\"example\": {},\n\t\"supports\": {\n\t\t\"color\": {\n\t\t\t\"background\": false,\n\t\t\t\"text\": true\n\t\t},\n\t\t\"html\": false,\n\t\t\"typography\": {\n\t\t\t\"fontSize\": true\n\t\t}\n\t},\n\t\"textdomain\": \"copyright-date-block\",\n\t\"editorScript\": \"file:./index.js\",\n\t\"render\": \"file:./render.php\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using data-expanded Attribute with TreeGridRow\nDESCRIPTION: This snippet demonstrates how to use the data-expanded attribute on a TreeGridRow when implementing aria-expanded elsewhere in the component.  The `isExpanded` prop on `TreeGridRow` is set to undefined, and the `data-expanded` attribute is added with a boolean value. This enables keyboard navigation to continue working correctly.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/tree-grid/README.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nfunction TreeMenu() {\n\treturn (\n\t\t<TreeGrid>\n\t\t\t<TreeGridRow level={ 1 } positionInSet={ 1 } setSize={ 2 } isExpanded={ undefined } data-expanded={ false }>\n\t\t\t\t<TreeGridCell>\n\t\t\t\t\t{ ( props ) => (\n\t\t\t\t\t\t<Button aria-expanded=\"false\" onClick={ onSelect } { ...props }>Select</Button>\n\t\t\t\t\t) }\n\t\t\t\t</TreeGridCell>\n\t\t\t</TreeGridRow>\n\t\t</TreeGrid>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Format Type for Class Name in React Component\nDESCRIPTION: This example demonstrates the use of getFormatTypeForClassName selector to find a format type based on a CSS class name. It retrieves the format for the 'has-inline-color' class and displays its name.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core-rich-text.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { __, sprintf } from '@wordpress/i18n';\nimport { store as richTextStore } from '@wordpress/rich-text';\nimport { useSelect } from '@wordpress/data';\n\nconst ExampleComponent = () => {\n\tconst { getFormatTypeForClassName } = useSelect(\n\t\t( select ) => select( richTextStore ),\n\t\t[]\n\t);\n\n\tconst format = getFormatTypeForClassName( 'has-inline-color' );\n\n\treturn format && <p>{ sprintf( __( 'Format name: %s' ), format.name ) }</p>;\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Custom CSS Properties in theme.json\nDESCRIPTION: Shows how to define custom CSS properties for line heights that can be used across the theme. Includes input JSON and resulting CSS output.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/themes/global-settings-and-styles.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"version\": 3,\n\t\"settings\": {\n\t\t\"custom\": {\n\t\t\t\"line-height\": {\n\t\t\t\t\"body\": 1.7,\n\t\t\t\t\"heading\": 1.3\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\nLANGUAGE: css\nCODE:\n```\nbody {\n\t--wp--custom--line-height--body: 1.7;\n\t--wp--custom--line-height--heading: 1.3;\n}\n```\n\n----------------------------------------\n\nTITLE: Using DateFormatPicker in JSX\nDESCRIPTION: This code snippet demonstrates how to import and use the DateFormatPicker component from the @wordpress/block-editor package. It shows how to manage state with useState to handle the current date format selection. The default format is specified, and an onChange handler updates the state as the user selects or types a new date format.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/src/components/date-format-picker/README.md#2025-04-21_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport { DateFormatPicker } from '@wordpress/block-editor';\n\nconst Example = () => {\n\tconst [ format, setFormat ] = useState( null );\n\treturn (\n\t\t<DateFormatPicker\n\t\t\tformat={ format }\n\t\t\tdefaultFormat={ 'M j, Y' }\n\t\t\tonChange={ ( nextFormat ) =>\n\t\t\t\tsetFormat( nextFormat );\n\t\t\t}\n\t\t/>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Disabling RichText Formatting Options in JavaScript\nDESCRIPTION: JavaScript code to globally disable specific RichText formatting options like Inline Image, Language, Keyboard Input, Subscript, and Superscript.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/curating-the-editor-experience/disable-editor-functionality.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nwp.domReady( () => {\n\twp.richText.unregisterFormatType( 'core/image' );\n\twp.richText.unregisterFormatType( 'core/language' );\n\twp.richText.unregisterFormatType( 'core/keyboard' );\n\twp.richText.unregisterFormatType( 'core/subscript' );\n\twp.richText.unregisterFormatType( 'core/superscript' );\n});\n```\n\n----------------------------------------\n\nTITLE: Saving an Edited Entity Record in WordPress\nDESCRIPTION: Saves the edited post with ID 1 to the database. This persists any changes made through editEntityRecord.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/explanations/architecture/entities.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nwp.data.dispatch( 'core' ).saveEditedEntityRecord( 'postType', 'post', 1 );\n```\n\n----------------------------------------\n\nTITLE: Customizing Preview Interstitial Message in JavaScript\nDESCRIPTION: Shows how to customize the interstitial message shown when generating post previews using a JavaScript filter.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/filters/editor-filters.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { addFilter } from '@wordpress/hooks';\n\nconst customPreviewMessage = function () {\n\treturn '<b>Post preview is being generated!</b>';\n};\n\naddFilter(\n\t'editor.PostPreview.interstitialMarkup',\n\t'my-plugin/custom-preview-message',\n\tcustomPreviewMessage\n);\n```\n\n----------------------------------------\n\nTITLE: Converting PagesList to Table Format\nDESCRIPTION: This snippet shows how to convert the list of pages into a table format for better presentation. It uses CSS classes for styling consistent with WordPress admin tables.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/data-basics/2-building-a-list-of-pages.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nfunction PagesList( { pages } ) {\n\treturn (\n\t\t<table className=\"wp-list-table widefat fixed striped table-view-list\">\n\t\t\t<thead>\n\t\t\t\t<tr>\n\t\t\t\t\t<th>Title</th>\n\t\t\t\t</tr>\n\t\t\t</thead>\n\t\t\t<tbody>\n\t\t\t\t{ pages?.map( page => (\n\t\t\t\t\t<tr key={ page.id }>\n\t\t\t\t\t\t<td>{ decodeEntities( page.title.rendered ) }</td>\n\t\t\t\t\t</tr>\n\t\t\t\t) ) }\n\t\t\t</tbody>\n\t\t</table>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Using the withI18n higher-order component\nDESCRIPTION: This code demonstrates how to use the withI18n higher-order component to pass i18n functions as props to a React component. It imports the withI18n function, defines a component that receives the __ function as a prop, and then exports the wrapped component.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/react-i18n/README.md#2025-04-21_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport { withI18n } from '@wordpress/react-i18n';\n\nfunction MyComponent( { __ } ) {\n\treturn __( 'Hello, world!' );\n}\n\nexport default withI18n( MyComponent );\n```\n\n----------------------------------------\n\nTITLE: Selector: isInstalling\nDESCRIPTION: This selector checks if a block plugin installation is currently in progress. It requires the global application state and block ID as parameters, returning a boolean indicating the installation status.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-directory/README.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n// Selector\nfunction isInstalling(state, blockId) {\n    // logic to determine if a plugin is installing\n    return false; // or return true if installing\n}\n```\n\n----------------------------------------\n\nTITLE: Block Selection Actions (startMultiSelect, stopMultiSelect, toggleSelection)\nDESCRIPTION: Actions for managing block selection state. Includes starting/stopping multi-selection and toggling selection capability. toggleSelection takes an optional boolean parameter to enable/disable selection.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core-block-editor.md#2025-04-21_snippet_20\n\n\n\n----------------------------------------\n\nTITLE: Registering Block Style with Inline CSS in PHP\nDESCRIPTION: Server-side registration of a block style with inline CSS using register_block_style function.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-styles.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nregister_block_style(\n    'core/quote',\n    array(\n        'name'         => 'blue-quote',\n        'label'        => __( 'Blue Quote', 'textdomain' ),\n        'inline_style' => '.wp-block-quote.is-style-blue-quote { color: blue; }',\n    )\n);\n```\n\n----------------------------------------\n\nTITLE: Updating Global State in JavaScript Actions\nDESCRIPTION: Shows how to update global state by directly mutating the state object from within action functions. Changes to state properties automatically trigger updates to any HTML elements that depend on those values.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/core-concepts/undestanding-global-state-local-context-and-derived-state.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst { state } = store( 'myPlugin', {\n\tactions: {\n\t\tupdateValues() {\n\t\t\tstate.someValue = 3;\n\t\t\tstate.otherValue = 4;\n\t\t},\n\t},\n} );\n```\n\n----------------------------------------\n\nTITLE: Wrapping PostFeaturedImage with Additional Content\nDESCRIPTION: This snippet shows how to wrap the original PostFeaturedImage component to prepend and append additional content. It uses React's Fragment to maintain the rendering without introducing unnecessary markup. Dependencies include React and the WordPress hooks API.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/editor/src/components/post-featured-image/README.md#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar el = React.createElement;\n\nfunction wrapPostFeaturedImage( OriginalComponent ) {\n\treturn function ( props ) {\n\t\treturn el(\n\t\t\tReact.Fragment,\n\t\t\t{},\n\t\t\t'Prepend above',\n\t\t\tel( OriginalComponent, props ),\n\t\t\t'Append below'\n\t\t);\n\t};\n}\n\nwp.hooks.addFilter(\n\t'editor.PostFeaturedImage',\n\t'my-plugin/wrap-post-featured-image',\n\twrapPostFeaturedImage\n);\n```\n\n----------------------------------------\n\nTITLE: JavaScript Derived State for Shopping List Emoji\nDESCRIPTION: Defines a derived state `onShoppingList` in JavaScript that checks if a fruit (determined by `context.item`) is present in the `shoppingList` array. It returns a shopping cart emoji if the fruit is on the list, and an empty string otherwise.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/core-concepts/server-side-rendering.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nstore( 'myFruitPlugin', {\n\tstate: {\n\t\tget onShoppingList() {\n\t\t\tconst context = getContext();\n\t\t\treturn state.shoppingList.includes( context.item ) ? '🛒' : '';\n\t\t},\n\t},\n\t// ...\n} );\n```\n\n----------------------------------------\n\nTITLE: Initializing WordPress Edit Site Module in JavaScript\nDESCRIPTION: Demonstrates how to import and initialize the edit-site package with block editor settings in a WordPress project\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/edit-site/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { initialize } from '@wordpress/edit-site';\n\nimport blockEditorSettings from './block-editor-settings';\n\ninitialize( '#editor-root', blockEditorSettings );\n```\n\n----------------------------------------\n\nTITLE: Unregistering Block Variation in React Component (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use the unregisterBlockVariation function to remove a specific variation of a block type. In this example, it removes the 'youtube' variation from the 'core/embed' block.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/blocks/README.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { __ } from '@wordpress/i18n';\nimport { unregisterBlockVariation } from '@wordpress/blocks';\nimport { Button } from '@wordpress/components';\n\nconst ExampleComponent = () => {\n\treturn (\n\t\t<Button\n\t\t\tonClick={ () => {\n\t\t\t\tunregisterBlockVariation( 'core/embed', 'youtube' );\n\t\t\t} }\n\t\t>\n\t\t\t{ __( 'Remove the YouTube variation from core/embed' ) }\n\t\t</Button>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Using PHP Helper for Local Context\nDESCRIPTION: Creating local context in PHP and using the wp_interactivity_data_wp_context helper to add it to an HTML element.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/core-concepts/server-side-rendering.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$context = array( 'fruits' => array( 'Apple', 'Banana', 'Cherry' ) );\n?>\n\n<ul <?php echo wp_interactivity_data_wp_context( $context ); ?>>\n  ...\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Using Surface Component in React with WordPress Components\nDESCRIPTION: Example demonstrating how to import and use the experimental Surface component from WordPress components. The Surface wraps Text content, rendering with a primary background color.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/surface/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n\t__experimentalSurface as Surface,\n\t__experimentalText as Text,\n} from '@wordpress/components';\n\nfunction Example() {\n\treturn (\n\t\t<Surface>\n\t\t\t<Text>Code is Poetry</Text>\n\t\t</Surface>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling block inside locked template\nDESCRIPTION: This JavaScript snippet uses the `editor.postContentBlockTypes` filter to enable the fictitious block `namespace/example` even when used inside a locked template. This is important for blocks that save data to a post, such as the Post Featured Image block.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/filters/block-filters.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst addExampleBlockToPostContentBlockTypes = ( blockTypes ) => {\n\treturn [ ...blockTypes, 'namespace/example' ];\n};\n\nwp.hooks.addFilter(\n\t'editor.postContentBlockTypes',\n\t'my-plugin/post-content-block-types',\n\taddExampleBlockToPostContentBlockTypes\n);\n\n```\n\n----------------------------------------\n\nTITLE: Registering Block Template in PHP for WordPress\nDESCRIPTION: This PHP code demonstrates how to use block templates to automatically insert the meta block at the top of a post.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/metabox.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nfunction myguten_register_template() {\n    $post_type_object = get_post_type_object( 'post' );\n    $post_type_object->template = array(\n        array( 'myguten/meta-block' ),\n    );\n}\nadd_action( 'init', 'myguten_register_template' );\n```\n\n----------------------------------------\n\nTITLE: Running Storybook Locally in Gutenberg\nDESCRIPTION: Command to run Storybook locally in a Gutenberg development environment. This allows developers to interact with UI components in isolation.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/storybook/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run storybook:dev\n```\n\n----------------------------------------\n\nTITLE: Retrieving Global Settings for Different Contexts\nDESCRIPTION: A React hook for retrieving global settings with support for different contexts and levels of inheritance\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/src/components/global-styles/README.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useGlobalSetting } from '@wordpress/block-editor';\n\nfunction MyComponent() {\n\t// The theme color palette.\n\tconst [ colorPalette, setColorPalette ] = useGlobalSetting(\n\t\t'color.palette.theme'\n\t);\n\n\t// The theme color palette for the paragraph block, ignoring user changes.\n\t// If the palette is not defined for the paragraph block, the root one is returned.\n\tconst [ pColor, setPColor ] = useGlobalSetting(\n\t\t'color.palette.theme',\n\t\t'core/paragraph',\n\t\t'base'\n\t);\n\n\treturn 'Something';\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering DropdownMenu with Menu Items in React - JSX\nDESCRIPTION: This snippet illustrates how to render a DropdownMenu component by specifying a 'children' function returning MenuItem elements in a React application. Dependencies include '@wordpress/components' and '@wordpress/icons'. The 'children' function uses callbackProps from the Dropdown component such as 'onClose'. This setup allows for flexible menu groupings within the DropdownMenu, showcasing actions such as 'Move Up', 'Move Down', and 'Remove'. The output results in a dropdown with grouped menu items, utilizing different iconography for each action.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/dropdown-menu/README.md#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { DropdownMenu, MenuGroup, MenuItem } from '@wordpress/components';\nimport { more, arrowUp, arrowDown, trash } from '@wordpress/icons';\n\nconst MyDropdownMenu = () => (\n\t<DropdownMenu icon={ more } label=\"Select a direction\">\n\t\t{ ( { onClose } ) => (\n\t\t\t<>\n\t\t\t\t<MenuGroup>\n\t\t\t\t\t<MenuItem icon={ arrowUp } onClick={ onClose }>\n\t\t\t\t\t\tMove Up\n\t\t\t\t\t</MenuItem>\n\t\t\t\t\t<MenuItem icon={ arrowDown } onClick={ onClose }>\n\t\t\t\t\t\tMove Down\n\t\t\t\t\t</MenuItem>\n\t\t\t\t</MenuGroup>\n\t\t\t\t<MenuGroup>\n\t\t\t\t\t<MenuItem icon={ trash } onClick={ onClose }>\n\t\t\t\t\t\tRemove\n\t\t\t\t\t</MenuItem>\n\t\t\t\t</MenuGroup>\n\t\t\t</>\n\t\t) }\n\t</DropdownMenu>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Modal for Edit Form in JavaScript/JSX\nDESCRIPTION: This snippet updates the PageEditButton component to display the EditPageForm in a Modal when the Edit button is clicked.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/data-basics/3-building-an-edit-form.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Button, Modal, TextControl } from '@wordpress/components';\n\nfunction PageEditButton({ pageId }) {\n\tconst [ isOpen, setOpen ] = useState( false );\n\tconst openModal = () => setOpen( true );\n\tconst closeModal = () => setOpen( false );\n\treturn (\n\t\t<>\n\t\t\t<Button\n\t\t\t\tonClick={ openModal }\n\t\t\t\tvariant=\"primary\"\n\t\t\t>\n\t\t\t\tEdit\n\t\t\t</Button>\n\t\t\t{ isOpen && (\n\t\t\t\t<Modal onRequestClose={ closeModal } title=\"Edit page\">\n\t\t\t\t\t<EditPageForm\n\t\t\t\t\t\tpageId={pageId}\n\t\t\t\t\t\tonCancel={closeModal}\n\t\t\t\t\t\tonSaveFinished={closeModal}\n\t\t\t\t\t/>\n\t\t\t\t</Modal>\n\t\t\t) }\n\t\t</>\n\t)\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Preference Value Action\nDESCRIPTION: Action creator for setting a preference value. Takes scope, name and value parameters to create an action object that signals a preference should be updated.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core-preferences.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nset( scope: string, name: string, value: * ) => Object\n```\n\n----------------------------------------\n\nTITLE: Implementing PostSummary Component with SlotFill Integration\nDESCRIPTION: Demonstrates the usage of PluginPostStatusInfo.Slot in a PostSummary component, showing how SlotFills are integrated into the editor interface to display various post-related panels and information.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/slotfills/README.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function PostSummary( { onActionPerformed } ) {\n\tconst { isRemovedPostStatusPanel } = useSelect( ( select ) => {\n\t\t// We use isEditorPanelRemoved to hide the panel if it was programmatically removed. We do\n\t\t// not use isEditorPanelEnabled since this panel should not be disabled through the UI.\n\t\tconst { isEditorPanelRemoved } = select( editorStore );\n\t\treturn {\n\t\t\tisRemovedPostStatusPanel: isEditorPanelRemoved( PANEL_NAME ),\n\t\t};\n\t}, [] );\n\n\treturn (\n\t\t<PostPanelSection className=\"editor-post-summary\">\n\t\t\t<PluginPostStatusInfo.Slot>\n\t\t\t\t{ ( fills ) => (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<VStack spacing={ 4 }>\n\t\t\t\t\t\t\t<PostCardPanel\n\t\t\t\t\t\t\t\tonActionPerformed={ onActionPerformed }\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<PostFeaturedImagePanel withPanelBody={ false } />\n\t\t\t\t\t\t\t<PostExcerptPanel />\n\t\t\t\t\t\t\t<VStack spacing={ 1 }>\n\t\t\t\t\t\t\t\t<PostContentInformation />\n\t\t\t\t\t\t\t\t<PostLastEditedPanel />\n\t\t\t\t\t\t\t</VStack>\n\t\t\t\t\t\t\t{ ! isRemovedPostStatusPanel && (\n\t\t\t\t\t\t\t\t<VStack spacing={ 2 }>\n\t\t\t\t\t\t\t\t\t<VStack spacing={ 1 }>\n\t\t\t\t\t\t\t\t\t\t<PostStatusPanel />\n\t\t\t\t\t\t\t\t\t\t<PostSchedulePanel />\n\t\t\t\t\t\t\t\t\t\t<PostURLPanel />\n\t\t\t\t\t\t\t\t\t\t<PostAuthorPanel />\n\t\t\t\t\t\t\t\t\t\t<PostTemplatePanel />\n\t\t\t\t\t\t\t\t\t\t<PostDiscussionPanel />\n\t\t\t\t\t\t\t\t\t\t<PageAttributesPanel />\n\t\t\t\t\t\t\t\t\t\t<PostSyncStatus />\n\t\t\t\t\t\t\t\t\t\t<BlogTitle />\n\t\t\t\t\t\t\t\t\t\t<PostsPerPage />\n\t\t\t\t\t\t\t\t\t\t<SiteDiscussion />\n\t\t\t\t\t\t\t\t\t\t<PostFormatPanel />\n\t\t\t\t\t\t\t\t\t\t<PostStickyPanel />\n\t\t\t\t\t\t\t\t\t</VStack>\n\t\t\t\t\t\t\t\t\t<TemplateAreas />\n\t\t\t\t\t\t\t\t\t{ fills }\n\t\t\t\t\t\t\t\t</VStack>\n\t\t\t\t\t\t\t) }\n\t\t\t\t\t\t</VStack>\n\t\t\t\t\t</>\n\t\t\t\t) }\n\t\t\t</PluginPostStatusInfo.Slot>\n\t\t</PostPanelSection>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Global State with wp_interactivity_state in PHP for Quiz Navigation\nDESCRIPTION: This PHP code sets up the initial global state for a quiz application using wp_interactivity_state(). It provides the current question based on the page ID and sets a time limit for answering all questions.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/core-concepts/undestanding-global-state-local-context-and-derived-state.md#2025-04-21_snippet_30\n\nLANGUAGE: php\nCODE:\n```\n<div <?php echo wp_interactivity_state( 'myPlugin', array(\n\t'question' => get_question_for_page( get_the_ID() ),\n\t'timeLeft' => 5 * 60, // Time to answer all the questions.\n) ); ?>>\n```\n\n----------------------------------------\n\nTITLE: Using the Viewport Data Store with Selectors\nDESCRIPTION: Example of importing the viewport store and using the isViewportMatch selector to determine if the current viewport is smaller than the medium breakpoint.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/viewport/README.md#2025-04-21_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { select } from '@wordpress/data';\nimport { store } from '@wordpress/viewport';\n\nconst isSmall = select( store ).isViewportMatch( '< medium' );\n```\n\n----------------------------------------\n\nTITLE: Removing Multiple Notices\nDESCRIPTION: Shows how to remove multiple notices by their IDs using the removeNotices action.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core-notices.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { __ } from '@wordpress/i18n';\nimport { useDispatch, useSelect } from '@wordpress/data';\nimport { store as noticesStore } from '@wordpress/notices';\nimport { Button } from '@wordpress/components';\n\nconst ExampleComponent = () => {\n\tconst notices = useSelect( ( select ) =>\n\t\tselect( noticesStore ).getNotices()\n\t);\n\tconst { removeNotices } = useDispatch( noticesStore );\n\treturn (\n\t\t<>\n\t\t\t<ul>\n\t\t\t\t{ notices.map( ( notice ) => (\n\t\t\t\t\t<li key={ notice.id }>{ notice.content }</li>\n\t\t\t\t) ) }\n\t\t\t</ul>\n\t\t\t<Button\n\t\t\t\tonClick={ () =>\n\t\t\t\t\tremoveNotices( notices.map( ( { id } ) => id ) )\n\t\t\t\t}\n\t\t\t>\n\t\t\t\t{ __( 'Clear all notices' ) }\n\t\t\t</Button>\n\t\t</>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Saving Entity Record in Gutenberg Data (JavaScript)\nDESCRIPTION: This snippet demonstrates how to save changes to a WordPress entity record using the saveEditedEntityRecord action from the Gutenberg data system.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/data-basics/3-building-an-edit-form.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// Replace 9 with an actual page ID\nwp.data.dispatch( 'core' ).editEntityRecord( 'postType', 'page', 9, { title: 'updated title' } );\nwp.data.dispatch( 'core' ).saveEditedEntityRecord( 'postType', 'page', 9 );\n```\n\n----------------------------------------\n\nTITLE: Defining a Post Interface with Context\nDESCRIPTION: This code snippet defines a TypeScript interface `Post` that uses a generic type `C` extending `Context` to specify the API context.  The `status` field is conditionally typed as `PostStatus` based on whether the context `C` is either `'view'` or `'edit'`. This allows for type-safe access to fields based on the expected API response context.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/core-data/src/entity-types/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Post<C extends Context> {\n\t/**\n\t * A named status for the post.\n\t */\n\tstatus: ContextualField< PostStatus, 'view' | 'edit', C >;\n\n\t// ... other fields ...\n}\n```\n\n----------------------------------------\n\nTITLE: Paragraph Block HTML\nDESCRIPTION: This HTML snippet defines a paragraph block in Gutenberg. It consists of a simple paragraph element wrapped in a Gutenberg comment delimiter. The content inside the <p> tag represents the text of the paragraph block.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/test/e2e/specs/editor/various/__snapshots__/Copy-cut-paste-should-cut-paste-partial-selection-with-other-blocks-in-between-2-chromium.txt#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n\"<!-- wp:paragraph -->\\n<p>block</p>\\n<!-- /wp:paragraph -->\"\n```\n\n----------------------------------------\n\nTITLE: Disabling and enabling tips programmatically\nDESCRIPTION: This JSX snippet shows how to use the `disableTips` and `enableTips` dispatch methods, along with the `areTipsEnabled` selector, from the `core/nux` data store to programmatically control the state of tips. The button's text and action change based on whether tips are currently enabled or disabled.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/nux/README.md#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nconst areTipsEnabled = select( 'core/nux' ).areTipsEnabled();\nreturn (\n\t<button\n\t\tonClick={ () => {\n\t\t\tif ( areTipsEnabled ) {\n\t\t\t\tdispatch( 'core/nux' ).disableTips();\n\t\t\t} else {\n\t\t\t\tdispatch( 'core/nux' ).enableTips();\n\t\t\t}\n\t\t} }\n\t>\n\t\t{ areTipsEnabled ? 'Disable tips' : 'Enable tips' }\n\t</button>\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing WordPress Post Editor\nDESCRIPTION: Function to initialize a new editor instance with specific post parameters and settings\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/edit-post/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ninitializeEditor(\n    id,\n    postType,\n    postId,\n    settings,\n    initialEdits\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing BottomSheetSelectControl in React\nDESCRIPTION: This snippet demonstrates how to use the BottomSheetSelectControl component in both uncontrolled and controlled forms. It shows setting up options, handling state changes, and passing props to the component.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/mobile/bottom-sheet-select-control/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n/**\n * WordPress dependencies\n */\nimport { BottomSheetSelectControl } from '@wordpress/components';\nimport { useState } from 'react';\n\nconst options = [\n\t{\n\t\tkey: 'small',\n\t\tname: 'Small',\n\t\tstyle: { fontSize: '50%' },\n\t},\n\t{\n\t\tkey: 'normal',\n\t\tname: 'Normal',\n\t\tstyle: { fontSize: '100%' },\n\t},\n\t{\n\t\tkey: 'large',\n\t\tname: 'Large',\n\t\tstyle: { fontSize: '200%' },\n\t},\n\t{\n\t\tkey: 'huge',\n\t\tname: 'Huge',\n\t\tstyle: { fontSize: '300%' },\n\t},\n];\n\nfunction MyCustomSelectControl() {\n\tconst [ fontSize, setFontSize ] = useState();\n\treturn (\n\t\t<BottomSheetSelectControl\n\t\t\tlabel=\"Font Size\"\n\t\t\toptions={ options }\n\t\t\tonChange={ ( { selectedItem } ) => setFontSize( selectedItem ) }\n\t\t/>\n\t);\n}\n\nfunction MyControlledCustomSelectControl() {\n\tconst [ fontSize, setFontSize ] = useState( options[ 0 ] );\n\treturn (\n\t\t<BottomSheetSelectControl\n\t\t\tlabel=\"Font Size\"\n\t\t\toptions={ options }\n\t\t\tonChange={ ( { selectedItem } ) => setFontSize( selectedItem ) }\n\t\t\tvalue={ options.find( ( option ) => option.key === fontSize.key ) }\n\t\t/>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Plugin ZIP Contents with wp-scripts\nDESCRIPTION: This snippet shows how to customize the files included in the plugin zip file by providing the `files` field in `package.json`. This uses the same logic as `npm pack` command. This example includes the `dir` directory in the resulting zip file.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/scripts/README.md#2025-04-21_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"files\": [ \"dir\" ]\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Code Style with wp-scripts\nDESCRIPTION: This snippet shows how to configure the `format` script in `package.json` to enforce coding style guidelines using `wp-scripts`. It includes examples for formatting the entire project and a specific source directory, which can be executed using `npm run format` and `npm run format:src` respectively.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/scripts/README.md#2025-04-21_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"scripts\": {\n\t\t\"format\": \"wp-scripts format\",\n\t\t\"format:src\": \"wp-scripts format ./src\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Store Reference Using Store Definition in WordPress JavaScript\nDESCRIPTION: This code snippet illustrates the correct method of referencing a WordPress data store using store definitions. It imports the select function from the @wordpress/data package alongside the blocksStore from @wordpress/blocks. This approach avoids the use of string literals, promoting maintainability and consistency in WordPress data handling.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/eslint-plugin/docs/rules/data-no-store-string-literals.md#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { store as blocksStore } from '@wordpress/blocks';\nimport { select } from '@wordpress/data';\n\nconst blockTypes = select( blocksStore ).getBlockTypes();\n```\n\n----------------------------------------\n\nTITLE: Inlining Editor Settings in PHP\nDESCRIPTION: This snippet demonstrates how to inline the editor settings as JSON and assign them to a global window object. It retrieves custom editor settings and adds them as an inline script.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/platform/custom-block-editor.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// Get custom editor settings.\n$settings = getdave_sbe_get_block_editor_settings();\n\n// Inline all settings.\nwp_add_inline_script( $script_handle, 'window.getdaveSbeSettings = ' . wp_json_encode( $settings ) . ';' );\n```\n\n----------------------------------------\n\nTITLE: Spacing Attributes Structure Example\nDESCRIPTION: Shows the structure of style attributes that get added when spacing support is enabled. These attributes store user-defined spacing values.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-supports.md#2025-04-21_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nattributes: {\n    style: {\n        margin: 'value',\n        padding: {\n            top: 'value',\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Cross-Origin Attribute for Media in JavaScript\nDESCRIPTION: Demonstrates how to set the crossOrigin attribute for foreign-origin media elements using a JavaScript filter.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/filters/editor-filters.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { addFilter } from '@wordpress/hooks';\n\naddFilter(\n\t'media.crossOrigin',\n\t'my-plugin/with-cors-media',\n\t// The callback accepts a second `mediaSrc` argument which references\n\t// the url to actual foreign media, useful if you want to decide\n\t// the value of crossOrigin based upon it.\n\t( crossOrigin, mediaSrc ) => {\n\t\tif ( mediaSrc.startsWith( 'https://example.com' ) ) {\n\t\t\treturn 'use-credentials';\n\t\t}\n\t\treturn crossOrigin;\n\t}\n);\n```\n\n----------------------------------------\n\nTITLE: Disabling Block Directory in PHP\nDESCRIPTION: Demonstrates how to disable the Block Directory functionality by removing the action that enqueues it.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/filters/editor-filters.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nremove_action( 'enqueue_block_editor_assets', 'wp_enqueue_editor_block_directory_assets' );\n```\n\n----------------------------------------\n\nTITLE: Adding a Fallback Current Year Attribute in block.json\nDESCRIPTION: Adds a new fallbackCurrentYear attribute to the block.json file. This attribute will store the current year at the time of block creation to prevent validation errors when years change.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/getting-started/tutorial.md#2025-04-21_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n\"attributes\": {\n    \"fallbackCurrentYear\": {\n\t\t\"type\": \"string\"\n    },\n    \"showStartingYear\": {\n\t\t\"type\": \"boolean\"\n    },\n    \"startingYear\": {\n\t\t\"type\": \"string\"\n\t}\n},\n```\n\n----------------------------------------\n\nTITLE: Rendering Popover with a Slot in JSX\nDESCRIPTION: This example demonstrates how to render Popover elements to a specific location on the page using Popover.Slot. By default, Popovers render at the end of the document body, but this approach allows for more control over popover positioning.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/popover/README.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createRoot } from 'react-dom/client';\nimport { Popover } from '@wordpress/components';\nimport Content from './Content';\n\nconst app = document.getElementById( 'app' );\nconst root = createRoot( app );\nroot.render(\n\t<div>\n\t\t<Content />\n\t\t<Popover.Slot />\n\t</div>\n);\n```\n\n----------------------------------------\n\nTITLE: Hovering Block in Gutenberg Editor (JavaScript)\nDESCRIPTION: Action creator that returns an action object to signal that a block has been hovered. It takes the client ID of the hovered block as a parameter.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core-block-editor.md#2025-04-21_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nhoverBlock( clientId )\n```\n\n----------------------------------------\n\nTITLE: Exclusive Lock on Specific Book Entity\nDESCRIPTION: Demonstrates acquiring an exclusive lock on a specific book, blocking concurrent read operations on that entity\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/core-data/src/locks/README.md#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n{\n\t\"locks\": [],\n\t\"children\": {\n\t\t\"book\": {\n\t\t\t\"locks\": [],\n\t\t\t\"children\": {\n\t\t\t\t1: {\n\t\t\t\t\t\"locks\": [ { \"exclusive\": true, /* data */ } ],\n\t\t\t\t\t\"children\": {}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ClipboardButton Component in React\nDESCRIPTION: This snippet demonstrates how to use the ClipboardButton component from @wordpress/components. It shows state management for copy status and prop usage for customizing button behavior.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/clipboard-button/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { ClipboardButton } from '@wordpress/components';\n\nconst MyClipboardButton = () => {\n\tconst [ hasCopied, setHasCopied ] = useState( false );\n\treturn (\n\t\t<ClipboardButton\n\t\t\tvariant=\"primary\"\n\t\t\ttext=\"Text to be copied.\"\n\t\t\tonCopy={ () => setHasCopied( true ) }\n\t\t\tonFinishCopy={ () => setHasCopied( false ) }\n\t\t>\n\t\t\t{ hasCopied ? 'Copied!' : 'Copy Text' }\n\t\t</ClipboardButton>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Using Locked Private APIs\nDESCRIPTION: This snippet demonstrates how to distribute and access private experimental APIs across various packages using the locked data structure. It shows how to lock private data in one package and unlock it in another.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/private-apis/README.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// In packages/package1/index.js:\nimport { lock } from './lock-unlock';\n\nexport const privateApis = {};\n/* Attach private data to the exported object */\nlock( privateApis, {\n\t__experimentalFunction: function () {},\n} );\n\n// In packages/package2/index.js:\nimport { privateApis } from '@wordpress/package1';\nimport { unlock } from './lock-unlock';\n\nconst { __experimentalFunction } = unlock( privateApis );\n\n```\n\n----------------------------------------\n\nTITLE: Using Elevation Component with Surface and Text in React JSX\nDESCRIPTION: This snippet demonstrates how to import and use the Elevation component along with Surface and Text components. It shows the basic usage of the Elevation component with a value prop.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/elevation/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n\t__experimentalElevation as Elevation,\n\t__experimentalSurface as Surface,\n\t__experimentalText as Text,\n} from '@wordpress/components';\n\nfunction Example() {\n\treturn (\n\t\t<Surface>\n\t\t\t<Text>Code is Poetry</Text>\n\t\t\t<Elevation value={ 5 } />\n\t\t</Surface>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring View Object for Data Display\nDESCRIPTION: Defines the view configuration object that dictates how the dataset is presented, including layout type, sorting, pagination, filters, and visible fields.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/dataviews/README.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst view = {\n\ttype: 'table',\n\tsearch: '',\n\tfilters: [\n\t\t{ field: 'author', operator: 'is', value: 2 },\n\t\t{ field: 'status', operator: 'isAny', value: [ 'publish', 'draft' ] },\n\t],\n\tpage: 1,\n\tperPage: 5,\n\tsort: {\n\t\tfield: 'date',\n\t\tdirection: 'desc',\n\t},\n\ttitleField: 'title',\n\tfields: [ 'author', 'status' ],\n\tlayout: {},\n};\n```\n\n----------------------------------------\n\nTITLE: Importing and Using VisuallyHidden Component in React\nDESCRIPTION: Demonstrates how to import and use the VisuallyHidden component from WordPress components library. The component wraps content that should be hidden visually but accessible to screen readers.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/visually-hidden/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { VisuallyHidden } from '@wordpress/components';\n\nfunction Example() {\n\treturn (\n\t\t<VisuallyHidden>\n\t\t\t<label>Code is Poetry</label>\n\t\t</VisuallyHidden>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Using useFocusOnMount Hook in Gutenberg\nDESCRIPTION: This snippet shows how to use the `useFocusOnMount` hook to focus the first tabbable element within a component when it mounts. The hook returns a ref that should be attached to the parent element containing the focusable elements. It is useful for accessibility purposes to improve the user experience.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/compose/README.md#2025-04-21_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nimport { useFocusOnMount } from '@wordpress/compose';\n\nconst WithFocusOnMount = () => {\n\tconst ref = useFocusOnMount();\n\treturn (\n\t\t<div ref={ ref }>\n\t\t\t<Button />\n\t\t\t<Button />\n\t\t</div>\n\t);\n};\n\n```\n\n----------------------------------------\n\nTITLE: Optimized useInnerBlocksProps Implementation\nDESCRIPTION: Optimized version that reduces DOM elements by passing blockProps directly to useInnerBlocksProps, resulting in a more efficient markup structure.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/block-tutorial/nested-blocks-inner-blocks.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { registerBlockType } from '@wordpress/blocks';\nimport { useBlockProps, useInnerBlocksProps } from '@wordpress/block-editor';\n\nregisterBlockType( 'gutenberg-examples/example-06', {\n\t// ...\n\n\tedit: () => {\n\t\tconst blockProps = useBlockProps();\n\t\tconst innerBlocksProps = useInnerBlocksProps( blockProps );\n\n\t\treturn (\n\t\t\t<div {...innerBlocksProps} />\n\t\t);\n\t},\n\n\tsave: () => {\n\t\tconst blockProps = useBlockProps.save();\n\t\tconst innerBlocksProps = useInnerBlocksProps.save( blockProps );\n\n\t\treturn (\n\t\t\t<div {...innerBlocksProps} />\n\t\t);\n\t},\n} );\n```\n\n----------------------------------------\n\nTITLE: Getting Notices with useSelect Hook\nDESCRIPTION: Example showing how to retrieve all notices using the getNotices selector with useSelect hook. Returns an array of notices that can be rendered in a list.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core-notices.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useSelect } from '@wordpress/data';\nimport { store as noticesStore } from '@wordpress/notices';\n\nconst ExampleComponent = () => {\n\tconst notices = useSelect( ( select ) =>\n\t\tselect( noticesStore ).getNotices()\n\t);\n\treturn (\n\t\t<ul>\n\t\t\t{ notices.map( ( notice ) => (\n\t\t\t\t<li key={ notice.ID }>{ notice.content }</li>\n\t\t\t) ) }\n\t\t</ul>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Block Delimiter with Attributes in HTML\nDESCRIPTION: Example of a block delimiter in HTML format, showing how attributes are serialized and stored within the block's comment tags. This includes the block name and attribute values.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/getting-started/fundamentals/block-json.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- wp:block-development-examples/copyright-date-block-09aac3 {\"fallbackCurrentYear\":\"2023\",\"showStartingYear\":true,\"startingYear\":\"2020\"} -->\n<p class=\"wp-block-block-development-examples-copyright-date-block-09aac3\">© 2020–2023</p>\n<!-- /wp:block-development-examples/copyright-date-block-09aac3 -->\n```\n\n----------------------------------------\n\nTITLE: Rendering Block Inspector Component in React\nDESCRIPTION: Demonstrates how to import and render the BlockInspector component from the WordPress block-editor package. This component provides a user interface for modifying block-specific settings.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/src/components/block-inspector/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { BlockInspector } from '@wordpress/block-editor';\n\nconst MyBlockInspector = () => <BlockInspector />;\n```\n\n----------------------------------------\n\nTITLE: Action Creator: setIsInstalling\nDESCRIPTION: This action creator indicates whether a block installation is in progress. It requires the block ID and a boolean value as parameters and returns an action object.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-directory/README.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// Action creator\nfunction setIsInstalling(blockId, isInstalling) {\n    return {\n        type: 'SET_IS_INSTALLING',\n        blockId: blockId,\n        isInstalling: isInstalling\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Controls with Custom Store in Gutenberg\nDESCRIPTION: This JavaScript snippet demonstrates how to register the default controls from the @wordpress/data-controls package with a custom store using the WordPress data API. It requires integrating with internal dependencies such as reducer, selectors, actions, and resolvers to configure the store.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/data-controls/README.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// WordPress dependencies\nimport { controls } from '@wordpress/data-controls';\nimport { registerStore } from '@wordpress/data';\n\n// Internal dependencies\nimport reducer from './reducer';\nimport * as selectors from './selectors';\nimport * as actions from './actions';\nimport * as resolvers from './resolvers';\n\nregisterStore( 'my-custom-store', {\n\treducer,\n\tcontrols,\n\tactions,\n\tselectors,\n\tresolvers,\n} );\n```\n\n----------------------------------------\n\nTITLE: Extracting Text Content from HTML in JavaScript\nDESCRIPTION: Shows how to extract text content from a specific element using the 'text' source and a CSS selector.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-attributes.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n{\n\tcontent: {\n\t\ttype: 'string',\n\t\tsource: 'text',\n\t\tselector: '.my-content',\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing PublishDateTimePicker in React\nDESCRIPTION: Example showing how to implement the PublishDateTimePicker component within a Dropdown component. The component allows users to select a publication date and time for a post, maintaining the selected date in local state.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/src/components/publish-date-time-picker/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { Dropdown, Button } from '@wordpress/components';\nimport { __experimentalPublishDateTimePicker as PublishDateTimePicker } from '@wordpress/block-editor';\n\nconst MyDateTimePicker = () => {\n\tconst [ date, setDate ] = useState( new Date() );\n\n\treturn (\n\t\t<Dropdown\n\t\t\trenderToggle={ ( { isOpen, onToggle } ) => (\n\t\t\t\t<Button\n\t\t\t\t\tonClick={ onToggle }\n\t\t\t\t\taria-expanded={ isOpen }\n\t\t\t\t>\n\t\t\t\t\tSelect post date\n\t\t\t\t</Button>\n\t\t\t) }\n\t\t\trenderContent={ ( { onClose } ) => (\n\t\t\t\t<PublishDateTimePicker\n\t\t\t\t\tcurrentDate={ date }\n\t\t\t\t\tonChange={ ( newDate ) => setDate( newDate ) }\n\t\t\t\t\tonClose={ onClose }\n\t\t\t\t/>\n\t\t\t) }\n\t\t/>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Running E2E Tests with npm Commands\nDESCRIPTION: Various npm commands for running E2E tests in different modes and configurations, including browser selection and debugging options\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/e2e/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Run all available tests.\nnpm run test:e2e\n\n# Run in headed mode.\nnpm run test:e2e -- --headed\n\n# Run tests with specific browsers (`chromium`, `firefox`, or `webkit`).\nnpm run test:e2e -- --project=webkit --project=firefox\n\n# Run a single test file.\nnpm run test:e2e -- <path_to_test_file> # E.g., npm run test:e2e -- site-editor/title.spec.js\n\n# Debugging.\nnpm run test:e2e -- --debug\n```\n\n----------------------------------------\n\nTITLE: Using withState to create a counter component\nDESCRIPTION: This code snippet demonstrates how to use the `withState` higher-order component to create a simple counter component.  The `withState` HOC provides the `count` state and `setState` function as props to the `MyCounter` component. Clicking the \"Increment\" button updates the `count` state using the `setState` function.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/compose/src/higher-order/with-state/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n/**\n * WordPress dependencies\n */\nimport { withState } from '@wordpress/compose';\n\nfunction MyCounter( { count, setState } ) {\n\treturn (\n\t\t<>\n\t\t\tCount: { count }\n\t\t\t<button\n\t\t\t\tonClick={ () =>\n\t\t\t\t\tsetState( ( state ) => ( { count: state.count + 1 } ) )\n\t\t\t\t}\n\t\t\t>\n\t\t\t\tIncrement\n\t\t\t</button>\n\t\t</>\n\t);\n}\n\nexport default withState( {\n\tcount: 0,\n} )( MyCounter );\n```\n\n----------------------------------------\n\nTITLE: Typing Local Context in TypeScript\nDESCRIPTION: Shows how to define and use typed local context in TypeScript by creating a type definition and passing it to the getContext function for proper type checking.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/core-concepts/using-typescript.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// Defines the types of your context.\ntype MyContext = {\n\tcounter: number;\n};\n\nstore( 'myCounterPlugin', {\n\tactions: {\n\t\tincrement() {\n\t\t\t// Passes it to the getContext function.\n\t\t\tconst context = getContext< MyContext >();\n\t\t\t// Now `context` is properly typed.\n\t\t\tcontext.counter += 1;\n\t\t},\n\t},\n} );\n```\n\n----------------------------------------\n\nTITLE: Documenting React Components in JSDoc for WordPress Gutenberg\nDESCRIPTION: An example of how to document a React function component in JSDoc, including prop types and usage example.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/coding-guidelines.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Renders the block's configured title as a string, or empty if the title\n * cannot be determined.\n *\n * @example\n *\n * ```jsx\n * <BlockTitle clientId=\"afd1cb17-2c08-4e7a-91be-007ba7ddc3a1\" />\n * ```\n *\n * @param {Object} props\n * @param {string} props.clientId Client ID of block.\n *\n * @return {?string} Block title.\n */\n```\n\n----------------------------------------\n\nTITLE: Gutenberg Plugin Settings Configuration\nDESCRIPTION: Extended settings configuration available in the Gutenberg plugin, including additional features like appearanceTools, dimensions, and expanded spacing options.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/themes/global-settings-and-styles.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"version\": 3,\n\t\"settings\": {\n\t\t\"appearanceTools\": false,\n\t\t\"border\": {\n\t\t\t\"color\": false,\n\t\t\t\"radius\": false,\n\t\t\t\"style\": false,\n\t\t\t\"width\": false\n\t\t},\n\t\t\"color\": {\n\t\t\t\"background\": true,\n\t\t\t\"custom\": true,\n\t\t\t\"customDuotone\": true,\n\t\t\t\"customGradient\": true,\n\t\t\t\"defaultGradients\": true,\n\t\t\t\"defaultPalette\": true,\n\t\t\t\"duotone\": [],\n\t\t\t\"gradients\": [],\n\t\t\t\"link\": false,\n\t\t\t\"palette\": [],\n\t\t\t\"text\": true\n\t\t},\n\t\t\"custom\": {},\n\t\t\"dimensions\": {\n\t\t\t\"aspectRatio\": false,\n\t\t\t\"minHeight\": false\n\t\t},\n\t\t\"layout\": {\n\t\t\t\"contentSize\": \"800px\",\n\t\t\t\"wideSize\": \"1000px\"\n\t\t},\n\t\t\"spacing\": {\n\t\t\t\"blockGap\": null,\n\t\t\t\"margin\": false,\n\t\t\t\"padding\": false,\n\t\t\t\"customSpacingSize\": true,\n\t\t\t\"units\": [ \"px\", \"em\", \"rem\", \"vh\", \"vw\" ],\n\t\t\t\"spacingScale\": {\n\t\t\t\t\"operator\": \"*\",\n\t\t\t\t\"increment\": 1.5,\n\t\t\t\t\"steps\": 7,\n\t\t\t\t\"mediumStep\": 1.5,\n\t\t\t\t\"unit\": \"rem\"\n\t\t\t},\n\t\t\t\"spacingSizes\": []\n\t\t},\n\t\t\"typography\": {\n\t\t\t\"customFontSize\": true,\n\t\t\t\"dropCap\": true,\n\t\t\t\"fluid\": false,\n\t\t\t\"fontFamilies\": [],\n\t\t\t\"fontSizes\": [],\n\t\t\t\"fontStyle\": true,\n\t\t\t\"fontWeight\": true,\n\t\t\t\"letterSpacing\": true,\n\t\t\t\"lineHeight\": false,\n\t\t\t\"textAlign\": true,\n\t\t\t\"textColumns\": false,\n\t\t\t\"textDecoration\": true,\n\t\t\t\"textTransform\": true\n\t\t},\n\t\t\"blocks\": {\n\t\t\t\"core/paragraph\": {\n\t\t\t\t\"border\": {},\n\t\t\t\t\"color\": {},\n\t\t\t\t\"custom\": {},\n\t\t\t\t\"layout\": {},\n\t\t\t\t\"spacing\": {},\n\t\t\t\t\"typography\": {}\n\t\t\t},\n\t\t\t\"core/heading\": {},\n\t\t\t\"etc\": {}\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Preference Value Selector\nDESCRIPTION: A selector function that checks if a preference is active for a particular scope. Takes state, scope and preference name as parameters and returns the preference value.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core-preferences.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nget( state: Object, scope: string, name: string ) => *\n```\n\n----------------------------------------\n\nTITLE: Global Styles Settings Object Example\nDESCRIPTION: Illustrates the comprehensive settings object for global styles, including color palettes, gradients, and typography configurations\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/src/components/global-styles/README.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n{\n\tcolor: {\n\t\tpalette: {\n\t\t\tcustom: [\n\t\t\t\t{\n\t\t\t\t\tslug: 'black',\n\t\t\t\t\tcolor: '#000000',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tslug: 'white',\n\t\t\t\t\tcolor: '#FFFFFF',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tslug: 'blue',\n\t\t\t\t\tcolor: '#0000FF',\n\t\t\t\t},\n\t\t\t]\n\t\t},\n\t\tgradients: {\n\t\t\tcustom: [\n\t\t\t\t{\n\t\t\t\t\tslug: 'gradient-1',\n\t\t\t\t\tgradient: 'linear-gradient(135deg,rgba(6,147,227,1) 0%,rgb(155,81,224) 100%)'\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tslug: 'gradient-2',\n\t\t\t\t\tgradient: 'linear-gradient(135deg,rgba(6,147,227,1) 0%,rgb(155,81,224) 100%)'\n\t\t\t\t},\n\t\t\t]\n\t\t},\n\t},\n\ttypography: {\n\t\tfontSizes: [\n\t\t\t{\n\t\t\t\tslug: 'small',\n\t\t\t\tsize: '12px',\n\t\t\t},\n\t\t\t{\n\t\t\t\tslug: 'medium',\n\t\t\t\tsize: '16px',\n\t\t\t},\n\t\t\t{\n\t\t\t\tslug: 'large',\n\t\t\t\tsize: '24px',\n\t\t\t},\n\t\t],\n\t},\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Global Styles Reset State with React Hook\nDESCRIPTION: A React hook for checking and resetting global styles to default theme values in the WordPress block editor\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/src/components/global-styles/README.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useGlobalStylesReset } from '@wordpress/block-editor';\n\nfunction MyComponent() {\n\tconst [ canReset, reset ] = useGlobalStylesReset();\n\n\treturn canReset ? <Button onClick={ () => reset() }>Reset</Button> : null;\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Local Contexts in HTML\nDESCRIPTION: Demonstrates defining different wp-context values at various DOM levels. Merging occurs between contexts defined at deeper levels with parent contexts, allowing nested states.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/api-reference.md#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div data-wp-context='{ \"foo\": \"bar\" }'>\n\t<span data-wp-text=\"context.foo\"><!-- Will output: \"bar\" --></span>\n\t<div data-wp-context='{ \"bar\": \"baz\" }'>\n\t\t<span data-wp-text=\"context.foo\"><!-- Will output: \"bar\" --></span>\n\t\t<div data-wp-context='{ \"foo\": \"bob\" }'>\n\t\t\t<span data-wp-text=\"context.foo\"><!-- Will output: \"bob\" --></span>\n\t\t</div>\n\t</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Typography Styles with Primitive Tokens in CSS\nDESCRIPTION: Demonstrates how to create ad hoc typography styles by directly referencing primitive tokens. This example shows combining font family, line height, and weight primitives for a custom type style.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/storybook/stories/tokens/typography.mdx#2025-04-21_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n.my-type-style {\n\tfont-family: $font-family-headings;\n\tline-height: $font-line-height-x-small;\n\tfont-weight: $font-weight-regular;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Save Record Action Using Thunks in JavaScript\nDESCRIPTION: This snippet demonstrates how to implement the same save record action using thunks, which allow inline side effects and simplify the code.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/thunks.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport const saveRecordAction = ( id ) => async ({ select, dispatch }) => {\n\tconst record = select( 'current-store', 'getRecord', id );\n\tdispatch({ type: 'BEFORE_SAVE', id, record });\n\tconst response = await fetch({ url: 'https://...', method: 'POST', data: record });\n\tconst results = await response.json();\n\tdispatch({ type: 'AFTER_SAVE', id, results });\n\treturn results;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using ProgressBar Component in Indeterminate Mode\nDESCRIPTION: Basic example of importing and using the ProgressBar component from WordPress components in indeterminate mode (without specifying a value).\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/progress-bar/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ProgressBar } from '@wordpress/components';\n\nconst MyLoadingComponent = () => {\n\treturn <ProgressBar />;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Central Store Types in TypeScript\nDESCRIPTION: Creates a central types definition file for consistent typing across multiple store parts\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/core-concepts/using-typescript.md#2025-04-21_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\n// types.ts\ninterface Store {\n\tstate: {\n\t\ttodos: string[];\n\t\tfilter: 'all' | 'completed';\n\t\tfiltered: string[];\n\t\tpostTitle: string;\n\t};\n\tactions: {\n\t\taddTodo( todo: string ): void;\n\t\taddPostToTodo(): void;\n\t};\n}\n\nexport default Store;\n```\n\n----------------------------------------\n\nTITLE: Adding Interactive Directive to DOM Element\nDESCRIPTION: Apply the wp-interactive directive to a DOM element to activate Interactivity API features within that element and its children.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/README.md#2025-04-21_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<div data-wp-interactive=\"myPlugin\">\n    <!-- Interactivity API zone -->\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Draggable Component with Custom Event Handlers\nDESCRIPTION: This example shows how to use the Draggable component with custom dragstart and dragend event handlers. It demonstrates passing these handlers to the Draggable component, which will call them after its own handlers.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/draggable/README.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Draggable, Panel, PanelBody } from '@wordpress/components';\nimport { Icon, more } from '@wordpress/icons';\n\nconst MyDraggable = ( { onDragStart, onDragEnd } ) => (\n\t<div id=\"draggable-panel\">\n\t\t<Panel header=\"Draggable panel\">\n\t\t\t<PanelBody>\n\t\t\t\t<Draggable\n\t\t\t\t\telementId=\"draggable-panel\"\n\t\t\t\t\ttransferData={ {} }\n\t\t\t\t\tonDragStart={ onDragStart }\n\t\t\t\t\tonDragEnd={ onDragEnd }\n\t\t\t\t>\n\t\t\t\t\t{ ( { onDraggableStart, onDraggableEnd } ) => (\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tclassName=\"example-drag-handle\"\n\t\t\t\t\t\t\tdraggable\n\t\t\t\t\t\t\tonDragStart={ onDraggableStart }\n\t\t\t\t\t\t\tonDragEnd={ onDraggableEnd }\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<Icon icon={ more } />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t) }\n\t\t\t\t</Draggable>\n\t\t\t</PanelBody>\n\t\t</Panel>\n\t</div>\n);\n```\n\n----------------------------------------\n\nTITLE: Allowed Blocks Configuration for InnerBlocks\nDESCRIPTION: Shows how to restrict which blocks can be inserted inside an InnerBlocks component by specifying an allowedBlocks array. This helps create a more focused editing experience.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/platform-docs/docs/create-block/nested-blocks.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst ALLOWED_BLOCKS = [ 'core/heading', 'core/paragraph' ];\n//...\n<InnerBlocks allowedBlocks={ ALLOWED_BLOCKS } />;\n```\n\n----------------------------------------\n\nTITLE: UnitControl with Default Value\nDESCRIPTION: This example demonstrates how to use a string value directly to set the current unit in the UnitControl Component. The component parses the unit directly from the input string.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/unit-control/README.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<UnitControl __next40pxDefaultSize value=\"50%\" />\n```\n\n----------------------------------------\n\nTITLE: Mocking Response Setup in JavaScript\nDESCRIPTION: Example of setting up mock response checking and handling for embed requests in WordPress. Shows how to configure mock responses for different URL patterns and handle request matching.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/e2e-test-utils/README.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst MOCK_RESPONSES = [\n\t{\n\t\tmatch: isEmbedding( 'https://wordpress.org/gutenberg/handbook/' ),\n\t\tonRequestMatch: JSONResponse( MOCK_BAD_WORDPRESS_RESPONSE ),\n\t},\n\t{\n\t\tmatch: isEmbedding(\n\t\t\t'https://wordpress.org/gutenberg/handbook/block-api/attributes/'\n\t\t),\n\t\tonRequestMatch: JSONResponse( MOCK_EMBED_WORDPRESS_SUCCESS_RESPONSE ),\n\t},\n];\nsetUpResponseMocking( MOCK_RESPONSES );\n```\n\n----------------------------------------\n\nTITLE: Extracting CSS Custom Variable Values\nDESCRIPTION: The getCSSValueFromRawStyle function extracts WordPress CSS custom variable values from a predefined style value. It expects a string input following a specific pattern and returns a formatted CSS variable string.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/style-engine/README.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n/*\n### getCSSValueFromRawStyle\n\nReturns a WordPress CSS custom var value from incoming style preset value, if one is detected.\n\nThe preset value is a string and follows the pattern `var:description|context|slug`.\n\nExample:\n\n`getCSSValueFromRawStyle( 'var:preset|color|heavenlyBlue' )` // returns 'var(--wp--preset--color--heavenly-blue)'\n\n_Parameters_\n\n-   _styleValue_ `StyleValue`: A string representing a raw CSS value. Non-strings won't be processed.\n\n_Returns_\n\n-   `StyleValue`: A CSS custom var value if the incoming style value is a preset value.\n*/\n```\n\n----------------------------------------\n\nTITLE: Configuring blockGap Support in theme.json\nDESCRIPTION: Example of how to enable blockGap support in theme.json, which controls spacing between inner blocks. The setting can be true/false/null to control both style output and UI controls.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/themes/global-settings-and-styles.md#2025-04-21_snippet_31\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"version\": 3,\n\t\"settings\": {\n\t\t\"spacing\": {\n\t\t\t\"blockGap\": true,\n\t\t}\n\t},\n\t\"styles\": {\n\t\t\"spacing\": {\n\t\t\t\"blockGap\": \"1.5rem\"\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing PanelBody Component\nDESCRIPTION: Adds a PanelBody component with a title to wrap the inspector controls content.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/getting-started/tutorial.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function Edit() {\n\tconst currentYear = new Date().getFullYear().toString();\n\n\treturn (\n\t\t<>\n\t\t\t<InspectorControls>\n\t\t\t\t<PanelBody title={ __( 'Settings', 'copyright-date-block' ) }>\n\t\t\t\t\tTesting\n\t\t\t\t</PanelBody>\n\t\t\t</InspectorControls>\n\t\t\t<p { ...useBlockProps() }>© { currentYear }</p>\n\t\t</>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Gutenberg Blocks in JavaScript\nDESCRIPTION: JavaScript method to parse WordPress post content into blocks using the wp.blocks.parse() function.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/getting-started/faq.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar blocks = wp.blocks.parse( postContent );\n```\n\n----------------------------------------\n\nTITLE: Block Supports API Example for Typography\nDESCRIPTION: Shows how to declare font size support in a paragraph block using the Block Supports API in the block.json file. This enables the font size control UI for users and handles the data flow automatically.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/explanations/architecture/styles.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"name\": \"core/paragraph\",\n\t\"...\": \"...\",\n\t\"supports\": {\n\t\t\"typography\": {\n\t\t\t\"fontSize\": true\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Installing WordPress Preferences Package with npm\nDESCRIPTION: The command installs the @wordpress/preferences package into a project using npm. This package requires an ES2015+ environment, and the @wordpress/babel-preset-default polyfill should be included if the environment lacks support for ES2015+ features.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/preferences/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @wordpress/preferences --save\n```\n\n----------------------------------------\n\nTITLE: Implementing useFocusableIframe Hook in React Component\nDESCRIPTION: Demonstrates how to use the useFocusableIframe hook with an iframe element to detect and handle focus events. The hook is imported from @wordpress/compose and attached to the iframe ref.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/compose/src/hooks/use-focusable-iframe/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useFocusableIframe } from '@wordpress/compose';\n\nconst MyFocusableIframe = () => {\n    return(\n        <iframe\n            ref={ useFocusableIframe() }\n            src=\"/my-iframe-url\"\n            onFocus={ () => console.log( 'iframe is focused' ) }\n        />\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Building Docusaurus Website for Production\nDESCRIPTION: Command to generate static content into the build directory that can be deployed to any static hosting service.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/platform-docs/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run build\n```\n\n----------------------------------------\n\nTITLE: Configuring License Checks with wp-scripts\nDESCRIPTION: This snippet demonstrates how to configure the `check-licenses` script in `package.json` to validate project dependencies against a specific license (GPLv2) and ignore certain packages. It leverages `wp-scripts` to perform the validation, and is invoked using `npm run check-licenses`.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/scripts/README.md#2025-04-21_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"scripts\": {\n\t\t\"check-licenses\": \"wp-scripts check-licenses --prod --gpl2 --ignore=abab\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Using batch Function for Optimized Dispatching\nDESCRIPTION: Shows how to use the batch function to wrap multiple dispatch calls, ensuring that components only update once after all dispatches are complete.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/data/README.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useRegistry } from '@wordpress/data';\n\nfunction Component() {\n\tconst registry = useRegistry();\n\n\tfunction callback() {\n\t\t// This will only rerender the components once.\n\t\tregistry.batch( () => {\n\t\t\tregistry.dispatch( someStore ).someAction();\n\t\t\tregistry.dispatch( someStore ).someOtherAction();\n\t\t} );\n\t}\n\n\treturn <button onClick={ callback }>Click me</button>;\n}\n```\n\n----------------------------------------\n\nTITLE: Admin Page Navigation - JavaScript\nDESCRIPTION: This snippet demonstrates how to instantiate and use the Admin utilities to navigate to a specific admin page in WordPress. Requires the instantiation of an Admin object with dependencies such as page and pageUtils.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/e2e-test-utils-playwright/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst admin = new Admin( { page, pageUtils } );\nawait admin.visitAdminPage( 'options-general.php' );\n```\n\n----------------------------------------\n\nTITLE: Paragraph Block Example 2\nDESCRIPTION: This snippet is another paragraph block example in Gutenberg.  It's similar to the first one and contains a paragraph element nested inside HTML comments to denote the start and end of the block.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/test/e2e/specs/editor/various/__snapshots__/Copy-cut-paste-should-copy-paste-partial-selection-with-other-blocks-in-between-1-chromium.txt#2025-04-21_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- wp:paragraph -->\n<p>B block</p>\n<!-- /wp:paragraph -->\n```\n\n----------------------------------------\n\nTITLE: Installing docgen Module\nDESCRIPTION: The command is used to install the @wordpress/docgen module locally in a Node.js project as a development dependency. Node.js needs to be at the Active LTS or Maintenance LTS releases; older versions are not supported.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/docgen/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @wordpress/docgen --save-dev\n```\n\n----------------------------------------\n\nTITLE: Action Creator: setErrorNotice\nDESCRIPTION: This action creator sets an error notice for a given block. It takes the block ID, a message string, and a boolean indicating if the error is fatal as parameters and returns an action object.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-directory/README.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// Action creator\nfunction setErrorNotice(blockId, message, isFatal) {\n    return {\n        type: 'SET_ERROR_NOTICE',\n        blockId: blockId,\n        message: message,\n        isFatal: isFatal\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Menu Item with Preference Toggle - JavaScript\nDESCRIPTION: The `PreferenceToggleMenuItem` component renders a menu item associated with the WordPress preference package's store. It toggles a specified preference between true and false states. It is essential to pass in specific props, such as `scope` and `name`, to identify the preference being toggled.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/preferences/src/components/preference-toggle-menu-item/README.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nPreferenceToggleMenuItem renders a menu item that is connected to the preference package's store, and will toggle the value of a 'preference' between true and false.\n```\n\n----------------------------------------\n\nTITLE: Block Attributes JSON Structure for Style Engine\nDESCRIPTION: This JSON snippet shows the structure of block attributes containing style information that can be processed by the Style Engine.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/style-engine/docs/using-the-style-engine-with-block-supports.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"attributes\": {\n        \"style\": {\n            \"spacing\": {\n                \"margin\": {\n                    \"top\": \"10px\"\n                },\n                \"padding\": \"1em\"\n            },\n            \"typography\": {\n                \"fontSize\": \"2.2rem\"\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Last Entity Delete Error - JavaScript\nDESCRIPTION: This function retrieves the last error that occurred during an attempt to delete a specified entity record. The parameters include the state, kind, name, and record ID, returning any error encountered.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// getLastEntityDeleteError\n\nfunction getLastEntityDeleteError( state, kind, name, recordId ) {\n    // Implementation here\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Post Template - Gutenberg (Markdown)\nDESCRIPTION: This snippet defines a block that contains various elements used to render a post, such as title, date, featured image, and content.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/core-blocks.md#2025-04-21_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n- **Name:** core/post-template\n- **Category:** theme\n- **Ancestor:** core/query\n- **Supports:** align (full, wide), color (background, gradients, link, text), interactivity (clientNavigation), layout, spacing (blockGap, margin, padding), typography (fontSize, lineHeight), ~~html~~, ~~reusable~~\n```\n\n----------------------------------------\n\nTITLE: Using WordPress Components in Plugin JavaScript\nDESCRIPTION: Demonstrates how to use the Button component from wp.components global in a WordPress plugin script.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/explanations/architecture/modularity.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Using the package in your scripts\nconst { Button } = wp.components;\n\nfunction MyApp() {\n\treturn <Button>Nice looking button</Button>;\n}\n```\n\n----------------------------------------\n\nTITLE: Targeting Vertically Oriented Blocks in CSS\nDESCRIPTION: This CSS selector targets blocks that explicitly set their orientation to vertical. It uses a semantic class name output by the Layout block support.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/explanations/architecture/styles.md#2025-04-21_snippet_15\n\nLANGUAGE: css\nCODE:\n```\n.is-vertical {\n  /* styles here */\n}\n```\n\n----------------------------------------\n\nTITLE: Simplifying Multiple Entry Points with Build and Start Commands - JavaScript\nDESCRIPTION: This snippet describes the functionality of the `build` and `start` commands which now support a simplified syntax allowing multiple entry points. The command syntax `wp-scripts build entry-one.js entry-two.js` enables developers to build multiple files in a single command.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/scripts/CHANGELOG.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nwp-scripts build entry-one.js entry-two.js\n```\n\n----------------------------------------\n\nTITLE: Configuring Block-Specific Duotone Options in theme.json\nDESCRIPTION: This snippet demonstrates how to configure different duotone settings for the Image block and the Post Featured Image block, allowing full customization for one while restricting options for the other.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/curating-the-editor-experience/theme-json.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"version\": 3,\n\t\"settings\": {\n\t\t\"color\": {\n\t\t\t\"custom\": true,\n\t\t\t\"customDuotone\": true\n\t\t},\n\t\t\"blocks\": {\n\t\t\t\"core/image\": {\n\t\t\t\t\"color\": {\n\t\t\t\t\t\"duotone\": [],\n\t\t\t\t\t\"customDuotone\": true,\n\t\t\t\t\t\"custom\": true\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"core/post-featured-image\": {\n\t\t\t\t\"color\": {\n\t\t\t\t\t\"duotone\": [],\n\t\t\t\t\t\"customDuotone\": false,\n\t\t\t\t\t\"custom\": false\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Generated Block Markup with Color Support\nDESCRIPTION: Example of the HTML markup generated when block supports are enabled, showing how color attributes and CSS classes are automatically added to the block wrapper element. Demonstrates the storage of backgroundColor and textColor attributes.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/getting-started/fundamentals/block-json.md#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!-- wp:block-development-examples/block-supports-6aa4dd {\"backgroundColor\":\"contrast\",\"textColor\":\"accent-4\"} -->\n<p class=\"wp-block-block-development-examples-block-supports-6aa4dd has-accent-4-color has-contrast-background-color has-text-color has-background\">Hello World</p>\n<!-- /wp:block-development-examples/block-supports-6aa4dd -->\n```\n\n----------------------------------------\n\nTITLE: Selector: getErrorNoticeForBlock\nDESCRIPTION: This selector returns any error notice related to a specific block given its ID. It takes the global application state and block ID as parameters and returns the notice text or false if no error exists.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-directory/README.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// Selector\nfunction getErrorNoticeForBlock(state, blockId) {\n    // logic to get error notice for the block\n    return false; // or return error message\n}\n```\n\n----------------------------------------\n\nTITLE: Enhancing Accessibility for Autocomplete - JavaScript\nDESCRIPTION: This bug fix adds 'aria-live' announcements to the Autocomplete component, ensuring compatibility with Mac and iOS VoiceOver for improved accessibility.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/CHANGELOG.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nAutocomplete: Add `aria-live` announcements for Mac and IOS Voiceover to fix lack of support for `aria-owns` ([#54902](https://github.com/WordPress/gutenberg/pull/54902)).\n```\n\n----------------------------------------\n\nTITLE: Disabling Contrast Checker in WordPress Gutenberg\nDESCRIPTION: This snippet demonstrates how to disable the contrast checker widget in the block editor UI for a specific block in WordPress Gutenberg.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-supports.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nsupports: {\n\tcolor: {\n\t\tenableContrastChecker: false\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Triggering a guide with a series of tips\nDESCRIPTION: This JSX snippet shows how to use the `triggerGuide` dispatch method from the `core/nux` data store to start a guide consisting of a series of tips. It dispatches an action with an array of tip IDs that should be presented to the user sequentially.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/nux/README.md#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\ndispatch( 'core/nux' ).triggerGuide( [\n\t'acme/product-info',\n\t'acme/add-to-cart',\n\t'acme/checkout',\n] );\n```\n\n----------------------------------------\n\nTITLE: Enqueue script for unregistering block type\nDESCRIPTION: This PHP snippet demonstrates how to enqueue the JavaScript file (`my-plugin.js`) that unregisters a block type. It uses `wp_enqueue_script` to load the script in the editor, ensuring that it depends on `wp-blocks`, `wp-dom-ready`, and `wp-edit-post` to avoid race conditions.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/filters/block-filters.md#2025-04-21_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// my-plugin.php\n\nfunction my_plugin_deny_list_blocks() {\n\twp_enqueue_script(\n\t\t'my-plugin-deny-list-blocks',\n\t\tplugins_url( 'my-plugin.js', __FILE__ ),\n\t\tarray( 'wp-blocks', 'wp-dom-ready', 'wp-edit-post' )\n\t);\n}\nadd_action( 'enqueue_block_editor_assets', 'my_plugin_deny_list_blocks' );\n\n```\n\n----------------------------------------\n\nTITLE: Adding Block Annotation in JavaScript for WordPress Gutenberg\nDESCRIPTION: This code snippet shows how to add a block-level annotation using the core/annotations API in WordPress Gutenberg. It targets the entire first block by setting the selector to 'block'.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-annotations.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nwp.data.dispatch( 'core/annotations' ).addAnnotation( {\n\tsource: 'my-annotations-plugin',\n\tblockClientId: wp.data.select( 'core/block-editor' ).getBlockOrder()[ 0 ],\n\tselector: 'block',\n} );\n```\n\n----------------------------------------\n\nTITLE: Parsing WordPress Blocks with JavaScript\nDESCRIPTION: Example showing how to use the parse function to convert HTML blocks into a structured JavaScript object representation\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-serialization-default-parser/README.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { parse } from '@wordpress/block-serialization-default-parser';\n\nparse( post ) ===\n\t[\n\t\t{\n\t\t\tblockName: 'core/columns',\n\t\t\tattrs: {\n\t\t\t\tcolumns: 3,\n\t\t\t},\n\t\t\tinnerBlocks: [\n\t\t\t\t{\n\t\t\t\t\tblockName: 'core/column',\n\t\t\t\t\tattrs: null,\n\t\t\t\t\tinnerBlocks: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tblockName: 'core/paragraph',\n\t\t\t\t\t\t\tattrs: null,\n\t\t\t\t\t\t\tinnerBlocks: [],\n\t\t\t\t\t\t\tinnerHTML: '\\n<p>Left</p>\\n',\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t\tinnerHTML: '\\n<div class=\"wp-block-column\"></div>\\n',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tblockName: 'core/column',\n\t\t\t\t\tattrs: null,\n\t\t\t\t\tinnerBlocks: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tblockName: 'core/paragraph',\n\t\t\t\t\t\t\tattrs: null,\n\t\t\t\t\t\t\tinnerBlocks: [],\n\t\t\t\t\t\t\tinnerHTML: '\\n<p><strong>Middle</strong></p>\\n',\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t\tinnerHTML: '\\n<div class=\"wp-block-column\"></div>\\n',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tblockName: 'core/column',\n\t\t\t\t\tattrs: null,\n\t\t\t\t\tinnerBlocks: [],\n\t\t\t\t\tinnerHTML: '\\n<div class=\"wp-block-column\"></div>\\n',\n\t\t\t\t},\n\t\t\t],\n\t\t\tinnerHTML:\n\t\t\t\t'\\n<div class=\"wp-block-columns has-3-columns\">\\n\\n\\n\\n</div>\\n',\n\t\t},\n\t];\n```\n\n----------------------------------------\n\nTITLE: Slot and Fill Pattern Directives - HTML\nDESCRIPTION: Implementation of new directives for Slot and Fill pattern including data-wp-slot-provider, data-wp-slot, and data-wp-fill.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/interactivity/CHANGELOG.md#2025-04-21_snippet_5\n\nLANGUAGE: html\nCODE:\n```\ndata-wp-slot-provider\ndata-wp-slot\ndata-wp-fill\n```\n\n----------------------------------------\n\nTITLE: Rendering Plugin Area using ESNext\nDESCRIPTION: This code snippet demonstrates how to render a plugin area within a React component using ESNext syntax. It imports the `PluginArea` component from `@wordpress/plugins` and specifies a scope, allowing plugins registered for that scope to render within the designated area. The scope prop is used to filter plugins that should be rendered in that specific area.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/plugins/README.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n\"// Using ESNext syntax\nimport { PluginArea } from '@wordpress/plugins';\n\nconst Layout = () => (\n\t<div>\n\t\tContent of the page\n\t\t<PluginArea scope=\"my-page\" />\n\t</div>\n);\"\n```\n\n----------------------------------------\n\nTITLE: Manually Typing the Entire Store in TypeScript\nDESCRIPTION: Demonstrates how to explicitly define all types for a store, including state, actions, and callbacks, rather than relying on TypeScript inference.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/core-concepts/using-typescript.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// Defines the store types.\ninterface Store {\n\tstate: {\n\t\tcounter: number; // Initial server state\n\t};\n\tactions: {\n\t\tincrement(): void;\n\t};\n\tcallbacks: {\n\t\tlog(): void;\n\t};\n}\n\n// Pass the types when calling the `store` function.\nconst { state } = store< Store >( 'myCounterPlugin', {\n\tactions: {\n\t\tincrement() {\n\t\t\tstate.counter += 1;\n\t\t},\n\t},\n\tcallbacks: {\n\t\tlog() {\n\t\t\tconsole.log( `counter: ${ state.counter }` );\n\t\t},\n\t},\n} );\n```\n\n----------------------------------------\n\nTITLE: Implementing navigateRegions HOC in React\nDESCRIPTION: This example demonstrates how to use the navigateRegions higher-order component to wrap a React component. It creates a component with three focusable regions (Header, Content, and Sidebar) that can be navigated using keyboard shortcuts.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/higher-order/navigate-regions/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { navigateRegions } from '@wordpress/components';\n\nconst MyComponentWithNavigateRegions = navigateRegions( () => (\n\t<div>\n\t\t<div role=\"region\" tabIndex=\"-1\" aria-label=\"Header\">\n\t\t\tHeader\n\t\t</div>\n\t\t<div role=\"region\" tabIndex=\"-1\" aria-label=\"Content\">\n\t\t\tContent\n\t\t</div>\n\t\t<div role=\"region\" tabIndex=\"-1\" aria-label=\"Sidebar\">\n\t\t\tSidebar\n\t\t</div>\n\t</div>\n) );\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Gradient Presets in WordPress Themes\nDESCRIPTION: This snippet demonstrates how to add custom gradient presets to the WordPress block editor using the 'editor-gradient-presets' theme support. It defines several gradients with names, CSS values, and unique slugs.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/themes/theme-support.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nadd_theme_support(\n\t'editor-gradient-presets',\n\tarray(\n\t\tarray(\n\t\t\t'name'     => esc_attr__( 'Vivid cyan blue to vivid purple', 'themeLangDomain' ),\n\t\t\t'gradient' => 'linear-gradient(135deg,rgba(6,147,227,1) 0%,rgb(155,81,224) 100%)',\n\t\t\t'slug'     => 'vivid-cyan-blue-to-vivid-purple'\n\t\t),\n\t\tarray(\n\t\t\t'name'     => esc_attr__( 'Vivid green cyan to vivid cyan blue', 'themeLangDomain' ),\n\t\t\t'gradient' => 'linear-gradient(135deg,rgba(0,208,132,1) 0%,rgba(6,147,227,1) 100%)',\n\t\t\t'slug'     =>  'vivid-green-cyan-to-vivid-cyan-blue',\n\t\t),\n\t\tarray(\n\t\t\t'name'     => esc_attr__( 'Light green cyan to vivid green cyan', 'themeLangDomain' ),\n\t\t\t'gradient' => 'linear-gradient(135deg,rgb(122,220,180) 0%,rgb(0,208,130) 100%)',\n\t\t\t'slug'     => 'light-green-cyan-to-vivid-green-cyan',\n\t\t),\n\t\tarray(\n\t\t\t'name'     => esc_attr__( 'Luminous vivid amber to luminous vivid orange', 'themeLangDomain' ),\n\t\t\t'gradient' => 'linear-gradient(135deg,rgba(252,185,0,1) 0%,rgba(255,105,0,1) 100%)',\n\t\t\t'slug'     => 'luminous-vivid-amber-to-luminous-vivid-orange',\n\t\t),\n\t\tarray(\n\t\t\t'name'     => esc_attr__( 'Luminous vivid orange to vivid red', 'themeLangDomain' ),\n\t\t\t'gradient' => 'linear-gradient(135deg,rgba(255,105,0,1) 0%,rgb(207,46,46) 100%)',\n\t\t\t'slug'     => 'luminous-vivid-orange-to-vivid-red',\n\t\t),\n\t)\n);\n```\n\n----------------------------------------\n\nTITLE: Dismissing a tip programmatically\nDESCRIPTION: This JSX snippet shows how to use the `dismissTip` dispatch method from the `core/nux` data store to programmatically dismiss a tip. Clicking the button executes a function that dispatches an action to dismiss the tip with the specified ID.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/nux/README.md#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<button\n\tonClick={ () => {\n\t\tdispatch( 'core/nux' ).dismissTip( 'acme/add-to-cart' );\n\t} }\n>\n\tDismiss tip\n</button>\n```\n\n----------------------------------------\n\nTITLE: Invalid Custom Property Naming in theme.json\nDESCRIPTION: Example of incorrect naming in theme.json custom properties that should be avoided. Using -- in key names will interfere with the separator system WordPress uses for CSS custom properties.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/themes/global-settings-and-styles.md#2025-04-21_snippet_27\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"version\": 3,\n\t\"settings\": {\n\t\t\"custom\": {\n\t\t\t\"line--height\": { // DO NOT DO THIS\n\t\t\t\t\"body\": 1.7\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Element Pseudo Selectors in theme.json\nDESCRIPTION: This JSON snippet demonstrates how to define pseudo-selectors for element styles, specifically targeting the `link` element and defining styles for its `:hover` state. This allows for dynamic styling based on user interaction.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/themes/global-settings-and-styles.md#2025-04-21_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n\"elements\": {\n\t\t\"link\": {\n\t\t\t\"color\": {\n\t\t\t\t\"text\": \"green\"\n\t\t\t},\n\t\t\t\":hover\": {\n\t\t\t\t\"color\": {\n\t\t\t\t\t\"text\": \"hotpink\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n```\n\n----------------------------------------\n\nTITLE: Using IsolatedEventContainer Component in JSX\nDESCRIPTION: Creates a custom component that prevents mousedown events from propagating outside of it. This example shows how to implement the IsolatedEventContainer around content that should be isolated from external event handlers.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/isolated-event-container/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { IsolatedEventContainer } from '@wordpress/components';\n\nconst MyModal = () => {\n\treturn (\n\t\t<IsolatedEventContainer\n\t\t\tclassName=\"component-some_component\"\n\t\t\tonClick={ clickHandler }\n\t\t>\n\t\t\t<p>This is an isolated component</p>\n\t\t</IsolatedEventContainer>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Scripts Documentation Header in Markdown\nDESCRIPTION: Markdown header and introductory text explaining the purpose of the scripts documentation for WordPress Gutenberg plugin developers.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/scripts.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Scripts\n\nThe editor provides several vendor and internal scripts to plugin developers. Script names, handles, and descriptions are documented in the table below.\n```\n\n----------------------------------------\n\nTITLE: Playwright Script Configuration in package.json\nDESCRIPTION: This code snippet demonstrates how to configure Playwright test scripts within the `package.json` file. It defines scripts for running tests, displaying help, and debugging, which are then executed using `npm run`.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/scripts/README.md#2025-04-21_snippet_18\n\nLANGUAGE: JSON\nCODE:\n```\n{\n\t\"scripts\": {\n\t\t\"test:playwright\": \"wp-scripts test-playwright\",\n\t\t\"test:playwright:help\": \"wp-scripts test-playwright --help\",\n\t\t\"test:playwright:debug\": \"wp-scripts test-playwright --debug\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using React Native Gutenberg Bridge in JavaScript\nDESCRIPTION: Example of how to import and use the React Native Gutenberg Bridge module in a JavaScript file.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/react-native-bridge/README.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport RNReactNativeGutenbergBridge from '@wordpress/react-native-bridge';\n\n// TODO: What to do with the module?\nRNReactNativeGutenbergBridge;\n```\n\n----------------------------------------\n\nTITLE: Configuring Field Display Properties (JavaScript)\nDESCRIPTION: Examples of configuring various display properties for fields, including sorting, hiding, and global search capabilities.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/dataviews/README.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n{\n\tenableSorting: true;\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n\tenableHiding: true;\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n\tenableGlobalSearch: true;\n}\n```\n\n----------------------------------------\n\nTITLE: Registering the HTML Block in WordPress Gutenberg\nDESCRIPTION: Imports and registers the HTML block, which allows users to insert arbitrary HTML code in the editor. This block is often used for embeds or external content.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/platform-docs/docs/basic-concepts/block-library.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport '@wordpress/block-library/build-module/html/init';\nimport '@wordpress/block-library/build-style/html/editor.css';\n```\n\n----------------------------------------\n\nTITLE: Hooking into Error Boundaries in WordPress Gutenberg\nDESCRIPTION: This code demonstrates how to use the editor.ErrorBoundary.errorLogged action to capture JavaScript errors that occur within Gutenberg's error boundaries. It imports the addAction function from the WordPress hooks package and registers a callback that receives the error object, which can then be logged or sent to an external error tracking service.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/filters/editor-filters.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { addAction } from '@wordpress/hooks';\n\naddAction(\n\t'editor.ErrorBoundary.errorLogged',\n\t'mu-plugin/error-capture-setup',\n\t( error ) => {\n\t\t// Error is the exception's error object. \n\t\t// You can console.log it or send it to an external error-tracking tool.\n\t\tconsole.log ( error );\n\t}\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Settings Sidebar Controls in WordPress Gutenberg\nDESCRIPTION: This code snippet shows how to add custom controls to the Settings Sidebar using the InspectorControls component. It includes color pickers for background and text colors, as well as a TextControl for editing the block's message.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/getting-started/fundamentals/block-in-the-editor.md#2025-04-21_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\nexport default function Edit( { attributes, setAttributes } ) {\n\tconst onChangeBGColor = ( hexColor ) => {\n\t\tsetAttributes( { bg_color: hexColor } );\n\t};\n\n\tconst onChangeTextColor = ( hexColor ) => {\n\t\tsetAttributes( { text_color: hexColor } );\n\t};\n\n\treturn (\n\t\t<div { ...useBlockProps() }>\n\t\t\t<InspectorControls key=\"setting\">\n\t\t\t\t<div>\n\t\t\t\t\t<fieldset>\n\t\t\t\t\t\t<legend className=\"blocks-base-control__label\">\n\t\t\t\t\t\t\t{ __( 'Background color', 'block-development-examples' ) }\n\t\t\t\t\t\t</legend>\n\t\t\t\t\t\t<ColorPalette // Element Tag for Gutenberg standard color selector\n\t\t\t\t\t\t\tonChange={ onChangeBGColor } // onChange event callback\n\t\t\t\t\t\t/>\n\t\t\t\t\t</fieldset>\n\t\t\t\t\t<fieldset>\n\t\t\t\t\t\t<legend className=\"blocks-base-control__label\">\n\t\t\t\t\t\t\t{ __( 'Text color', 'block-development-examples' ) }\n\t\t\t\t\t\t</legend>\n\t\t\t\t\t\t<ColorPalette\n\t\t\t\t\t\t\tonChange={ onChangeTextColor }\n\t\t\t\t\t\t/>\n\t\t\t\t\t</fieldset>\n\t\t\t\t</div>\n\t\t\t</InspectorControls>\n\t\t\t<TextControl\n\t\t\t\t__nextHasNoMarginBottom\n\t\t\t\t__next40pxDefaultSize\n\t\t\t\tvalue={ attributes.message }\n\t\t\t\tonChange={ ( val ) => setAttributes( { message: val } ) }\n\t\t\t\tstyle={ {\n\t\t\t\t\tbackgroundColor: attributes.bg_color,\n\t\t\t\t\tcolor: attributes.text_color,\n\t\t\t\t} }\n\t\t\t/>\n\t\t</div>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Enqueuing Block Style Scripts in PHP\nDESCRIPTION: PHP code to properly enqueue JavaScript files for block styles with necessary dependencies.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-styles.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nfunction myguten_enqueue() {\n\twp_enqueue_script(\n\t\t'myguten-script',\n\t\tplugins_url( 'myguten.js', __FILE__ ),\n\t\tarray( 'wp-blocks', 'wp-dom-ready', 'wp-edit-post' ),\n\t\tfilemtime( plugin_dir_path( __FILE__ ) . '/myguten.js' )\n\t);\n}\nadd_action( 'enqueue_block_editor_assets', 'myguten_enqueue' );\n```\n\n----------------------------------------\n\nTITLE: Advanced Babel Configuration with Custom JSX Pragma Options\nDESCRIPTION: Extended .babelrc.js configuration that customizes both the import JSX pragma plugin and React JSX transform plugin to use custom scope variables and React as the source.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/babel-plugin-import-jsx-pragma/README.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// .babelrc.js\nmodule.exports = {\n\tplugins: [\n\t\t[\n\t\t\t'@wordpress/babel-plugin-import-jsx-pragma',\n\t\t\t{\n\t\t\t\tscopeVariable: 'createElement',\n\t\t\t\tscopeVariableFrag: 'Fragment',\n\t\t\t\tsource: 'react',\n\t\t\t\tisDefault: false,\n\t\t\t},\n\t\t],\n\t\t[\n\t\t\t'@babel/plugin-transform-react-jsx',\n\t\t\t{\n\t\t\t\tpragma: 'createElement',\n\t\t\t\tpragmaFrag: 'Fragment',\n\t\t\t},\n\t\t],\n\t],\n};\n```\n\n----------------------------------------\n\nTITLE: Using ServerSideRender with wp Global in JSX\nDESCRIPTION: Example of using the ServerSideRender component when imported from the wp global object in a JSX environment, requiring an alias.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/server-side-render/README.md#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst { serverSideRender: ServerSideRender } = wp;\n\nconst MyServerSideRender = () => (\n\t<ServerSideRender\n\t\tblock=\"core/archives\"\n\t\tattributes={ {\n\t\t\tshowPostCounts: true,\n\t\t\tdisplayAsDropdown: false,\n\t\t} }\n\t/>\n);\n```\n\n----------------------------------------\n\nTITLE: Defining npm scripts for development using wp-scripts\nDESCRIPTION: This JSON snippet demonstrates how to define npm scripts in package.json to leverage wp-scripts for various development tasks. It includes scripts for starting the development server, enabling hot reloading, specifying custom entry points, copying PHP files, and setting a custom source directory.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/scripts/README.md#2025-04-21_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"scripts\": {\n\t\t\"start\": \"wp-scripts start\",\n\t\t\"start:hot\": \"wp-scripts start --hot\",\n\t\t\"start:custom\": \"wp-scripts start entry-one.js entry-two.js --output-path=custom\",\n\t\t\"start:copy-php\": \"wp-scripts start --webpack-copy-php\",\n\t\t\"start:custom-directory\": \"wp-scripts start --source-path=custom-directory\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Shallow vs Deep Comparison Example\nDESCRIPTION: Illustrates the difference between shallow and deep comparison, showing how references are compared versus values when using different equality checking methods.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/is-shallow-equal/README.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport isShallowEqual from '@wordpress/is-shallow-equal';\nimport fastDeepEqual from 'fast-deep-equal/es6'; // deep comparison\n\nlet object = { a: 1 };\n\nisShallowEqual( [ { a: 1 } ], [ { a: 1 } ] );\n// ⇒ false\n\nfastDeepEqual( [ { a: 1 } ], [ { a: 1 } ] );\n// ⇒ true\n\nisShallowEqual( [ object ], [ object ] );\n// ⇒ true\n```\n\n----------------------------------------\n\nTITLE: Unregistering Plugin using ESNext\nDESCRIPTION: This code snippet shows how to unregister a plugin using ESNext syntax.  It imports the `unregisterPlugin` function from `@wordpress/plugins` and calls it with the name of the plugin to be unregistered. This removes the plugin from the Gutenberg editor's interface.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/plugins/README.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n\"// Using ESNext syntax\nimport { unregisterPlugin } from '@wordpress/plugins';\n\nunregisterPlugin( 'plugin-name' );\"\n```\n\n----------------------------------------\n\nTITLE: SCSS Style Definition for WordPress Block\nDESCRIPTION: Example SCSS file showing variable definition and block styling with a custom color variable.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/scripts/README.md#2025-04-21_snippet_24\n\nLANGUAGE: scss\nCODE:\n```\n// index.scss\n$body-color: red;\n\n.wp-block-my-block {\n\tcolor: $body-color;\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Edits for Entity Record - JavaScript\nDESCRIPTION: This function checks if there are any edits associated with a specified entity record. This is determined by parameters including state, kind, name, and record ID, returning a boolean result.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n// hasEditsForEntityRecord\n\nfunction hasEditsForEntityRecord( state, kind, name, recordId ) {\n    // Implementation here\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Fields for DataForm\nDESCRIPTION: Example demonstrating how to configure fields with different types and properties.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/dataviews/README.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst fields = [\n\t{\n\t\tid: 'title',\n\t\ttype: 'text',\n\t\tlabel: 'Title',\n\t},\n\t{\n\t\tid: 'date',\n\t\ttype: 'datetime',\n\t\tlabel: 'Date',\n\t},\n\t{\n\t\tid: 'author',\n\t\ttype: 'text'\n\t\tlabel: 'Author',\n\t\telements: [\n\t\t\t{ value: 1, label: 'Admin' },\n\t\t\t{ value: 2, label: 'User' },\n\t\t],\n\t},\n];\n```\n\n----------------------------------------\n\nTITLE: Accessing BlockContext Internally\nDESCRIPTION: This snippet shows how to access the full `BlockContext` object within the `@wordpress/block-editor` module, typically using the `useContext` hook. It demonstrates retrieving the `postId` from the context. This component is not meant for external consumption and is intended for internal use within the `@wordpress/block-editor` module.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/src/components/block-context/README.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useContext } from 'react';\n\n// Only available internally within `@wordpress/block-editor`!\nimport BlockContext from '../block-context';\n\nfunction MyBlockComponent() {\n\tconst { postId } = useContext( BlockContext );\n\n\treturn 'The current post ID is: ' + postId;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Axe Accessibility Test\nDESCRIPTION: Simple example of running an accessibility test on a page using the toPassAxeTests matcher.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/jest-puppeteer-axe/README.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ntest( 'checks the test page with Axe', async () => {\n\t// First, run some code which loads the content of the page.\n\tloadTestPage();\n\n\tawait expect( page ).toPassAxeTests();\n} );\n```\n\n----------------------------------------\n\nTITLE: Adding Text Control Component\nDESCRIPTION: Implements TextControl component with attribute management for the starting year setting.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/getting-started/tutorial.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function Edit( { attributes, setAttributes } ) {\n\tconst { showStartingYear, startingYear } = attributes;\n\tconst currentYear = new Date().getFullYear().toString();\n\n\treturn (\n\t\t<>\n\t\t\t<InspectorControls>\n\t\t\t\t<PanelBody title={ __( 'Settings', 'copyright-date-block' ) }>\n\t\t\t\t\t<TextControl\n\t\t\t\t\t    __nextHasNoMarginBottom\n\t\t\t\t\t\t__next40pxDefaultSize\n\t\t\t\t\t\tlabel={ __(\n\t\t\t\t\t\t\t'Starting year',\n\t\t\t\t\t\t\t'copyright-date-block'\n\t\t\t\t\t\t) }\n\t\t\t\t\t\tvalue={ startingYear || '' }\n\t\t\t\t\t\tonChange={ ( value ) =>\n\t\t\t\t\t\t\tsetAttributes( { startingYear: value } )\n\t\t\t\t\t\t}\n\t\t\t\t\t/>\n\t\t\t\t</PanelBody>\n\t\t\t</InspectorControls>\n\t\t\t<p { ...useBlockProps() }>© { currentYear }</p>\n\t\t</>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Using build-blocks-manifest Script with Custom Options\nDESCRIPTION: Example of using the build-blocks-manifest script with custom input and output options to generate a blocks manifest file.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/scripts/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nwp-scripts build-blocks-manifest --input=src --output=dist/blocks-manifest.php\n```\n\n----------------------------------------\n\nTITLE: Incorrect Global Flag Usage - Boolean Comparison\nDESCRIPTION: Shows incorrect strict equality comparison with boolean value\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/eslint-plugin/docs/rules/wp-global-usage.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nif ( globalThis.IS_GUTENBERG_PLUGIN === true ) {\n\t// implement feature here.\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Opt-in Prop for Default Size - ToggleGroupControl - JavaScript\nDESCRIPTION: This snippet introduces an optional property to the ToggleGroupControl component, allowing a default size of 40px. This aids in consistency across component sizes and enhances the user interface experience.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nToggleGroupControl: Add opt-in prop for 40px default size ([#55789](https://github.com/WordPress/gutenberg/pull/55789)).\n```\n\n----------------------------------------\n\nTITLE: Querying a Block by Accessibility Label\nDESCRIPTION: This example shows how to query a block using its accessibility label in a React Native integration test.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/react-native/integration-test-guide.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst spacerBlock = await waitFor( () =>\n\tgetByLabelText( /Spacer Block\\. Row 1/ )\n);\n```\n\n----------------------------------------\n\nTITLE: Validating Email, Phone Number, and URL in JavaScript\nDESCRIPTION: Shows the usage of utility functions to validate if a string looks like an email address, phone number, or URL. These are useful for basic format checking before more rigorous validation.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/url/README.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst isEmail = isEmail( 'hello@wordpress.org' ); // true\n\nconst isPhoneNumber = isPhoneNumber( '+1 (555) 123-4567' ); // true\n\nconst isURL = isURL( 'https://wordpress.org' ); // true\n```\n\n----------------------------------------\n\nTITLE: Checking for Embed Preview Request - JavaScript\nDESCRIPTION: This function checks if a request for embed preview data is currently in progress, returning a boolean result based on the state and URL provided.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core.md#2025-04-21_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\n// isRequestingEmbedPreview\n\nfunction isRequestingEmbedPreview( state, url ) {\n    // Implementation here\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Command Loader\nDESCRIPTION: Complex example showing how to implement a dynamic command loader for page search functionality using useCommandLoader\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/commands/README.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useCommandLoader } from '@wordpress/commands';\nimport { post, page, layout, symbolFilled } from '@wordpress/icons';\n\nconst icons = {\n    post,\n    page,\n    wp_template: layout,\n    wp_template_part: symbolFilled,\n};\n\nfunction usePageSearchCommandLoader( { search } ) {\n    // Retrieve the pages for the \"search\" term.\n    const { records, isLoading } = useSelect( ( select ) => {\n        const { getEntityRecords } = select( coreStore );\n        const query = {\n            search: !! search ? search : undefined,\n            per_page: 10,\n            orderby: search ? 'relevance' : 'date',\n        };\n        return {\n            records: getEntityRecords( 'postType', 'page', query ),\n            isLoading: ! select( coreStore ).hasFinishedResolution(\n                'getEntityRecords',\n                'postType', 'page', query ]\n            ),\n        };\n    }, [ search ] );\n\n    // Create the commands.\n    const commands = useMemo( () => {\n        return ( records ?? [] ).slice( 0, 10 ).map( ( record ) => {\n            return {\n                name: record.title?.rendered + ' ' + record.id,\n                label: record.title?.rendered\n                    ? record.title?.rendered\n                    : __( '(no title)' ),\n                icon: icons[ postType ],\n                callback: ( { close } ) => {\n                    const args = {\n                        postType,\n                        postId: record.id,\n                        ...extraArgs,\n                    };\n                    document.location = addQueryArgs( 'site-editor.php', args );\n                    close();\n                },\n            };\n        } );\n    }, [ records, history ] );\n\n    return {\n        commands,\n        isLoading,\n    };\n}\n\nuseCommandLoader( {\n    name: 'myplugin/page-search',\n    hook: usePageSearchCommandLoader,\n} );\n```\n\n----------------------------------------\n\nTITLE: Defining Title Display - Gutenberg (Markdown)\nDESCRIPTION: This snippet defines a block for displaying the title of a post or page with customizable styling options.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/core-blocks.md#2025-04-21_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n- **Name:** core/post-title\n- **Category:** theme\n- **Supports:** align (full, wide), color (background, gradients, link, text), interactivity (clientNavigation), spacing (margin, padding), typography (fontSize, lineHeight), ~~html~~\n- **Attributes:** isLink, level, levelOptions, linkTarget, rel, textAlign\n```\n\n----------------------------------------\n\nTITLE: Creating Success Notice with createSuccessNotice Action\nDESCRIPTION: Shows how to create a success notice with snackbar type and custom icon using createSuccessNotice action.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core-notices.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { __ } from '@wordpress/i18n';\nimport { useDispatch } from '@wordpress/data';\nimport { store as noticesStore } from '@wordpress/notices';\nimport { Button } from '@wordpress/components';\n\nconst ExampleComponent = () => {\n\tconst { createSuccessNotice } = useDispatch( noticesStore );\n\treturn (\n\t\t<Button\n\t\t\tonClick={ () =>\n\t\t\t\tcreateSuccessNotice( __( 'Success!' ), {\n\t\t\t\t\ttype: 'snackbar',\n\t\t\t\t\ticon: '🔥',\n\t\t\t\t} )\n\t\t\t}\n\t\t>\n\t\t\t{ __( 'Generate a snackbar success notice!' ) }\n\t\t</Button>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Field Values in React (JavaScript)\nDESCRIPTION: Example of implementing a custom render function for a field. This function takes an item prop and returns a React element to display the field's value.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/dataviews/README.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n{\n\trender: ( { item } ) => {\n\t\t/* React element to be displayed. */\n\t};\n}\n```\n\n----------------------------------------\n\nTITLE: Optimized useSelect with Stored Selector Arguments\nDESCRIPTION: This snippet shows an optimized version of the useSelect hook where the selector arguments are stored in a variable to prevent typos and ensure consistency.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/data-basics/2-building-a-list-of-pages.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useSelect } from '@wordpress/data';\nimport { store as coreDataStore } from '@wordpress/core-data';\nfunction MyFirstApp() {\n\t// ...\n\tconst { pages, hasResolved } = useSelect( select => {\n\t\t// ...\n\t\tconst selectorArgs = [ 'postType', 'page', query ];\n\t\treturn {\n\t\t\tpages: select( coreDataStore ).getEntityRecords( ...selectorArgs ),\n\t\t\thasResolved:\n\t\t\t\tselect( coreDataStore ).hasFinishedResolution( 'getEntityRecords', selectorArgs ),\n\t\t}\n\t}, [searchTerm] );\n\n\t// ...\n}\n```\n\n----------------------------------------\n\nTITLE: Checking if Block was Just Inserted in Gutenberg Editor (JavaScript)\nDESCRIPTION: Selector function that determines if a block with the given clientId was just inserted. It can optionally check against a specific insertion source.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core-block-editor.md#2025-04-21_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nwasBlockJustInserted( state, clientId, source )\n```\n\n----------------------------------------\n\nTITLE: Adding a unique class name to all blocks\nDESCRIPTION: This JavaScript snippet adds a unique class name to all blocks using the `editor.BlockListBlock` filter.  It uses `createHigherOrderComponent` from `wp.compose` to wrap the original `BlockListBlock` component and adds a class name based on the block's `clientId`.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/filters/block-filters.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst { createHigherOrderComponent } = wp.compose;\n\nconst withClientIdClassName = createHigherOrderComponent(\n\t( BlockListBlock ) => {\n\t\treturn ( props ) => {\n\t\t\treturn (\n\t\t\t\t<BlockListBlock\n\t\t\t\t\t{ ...props }\n\t\t\t\t\tclassName={ 'block-' + props.clientId }\n\t\t\t\t/>\n\t\t\t);\n\t\t};\n\t},\n\t'withClientIdClassName'\n);\n\nwp.hooks.addFilter(\n\t'editor.BlockListBlock',\n\t'my-plugin/with-client-id-class-name',\n\twithClientIdClassName\n);\n\n```\n\n----------------------------------------\n\nTITLE: Calculating Display Date in render.php - PHP\nDESCRIPTION: This PHP snippet calculates the display date for the block's output using the starting year and current year. It checks if the attributes for starting year and display option are set, and formats the output accordingly.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/getting-started/tutorial.md#2025-04-21_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nif ( ! empty( $attributes['startingYear'] ) && ! empty( $attributes['showStartingYear'] ) ) {\n\t$display_date = $attributes['startingYear'] . '–' . $current_year;\n} else {\n\t$display_date = $current_year;\n}\n```\n\n----------------------------------------\n\nTITLE: Explicit Block Assertion Using editor.getBlocks in JavaScript\nDESCRIPTION: This code demonstrates how to rewrite the string assertion into a more explicit assertion using editor.getBlocks, improving readability and maintainability.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/e2e/overusing-snapshots.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nawait expect.poll( editor.getBlocks ).toMatchObject( [ {\n\tname: 'core/paragraph',\n\tattributes: { content: 'Paragraph' },\n} ] );\n```\n\n----------------------------------------\n\nTITLE: Creating a Notice with complex JSX content\nDESCRIPTION: Code example demonstrating how to use the Notice component with more complex JSX elements, including a paragraph and code block.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/notice/README.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Notice } from `@wordpress/components`;\n\nconst MyNotice = () => (\n\t<Notice status=\"error\">\n\t\t<p>\n\t\t\tAn error occurred: <code>{ errorDetails }</code>.\n\t\t</p>\n\t</Notice>\n);\n```\n\n----------------------------------------\n\nTITLE: Documenting Examples in JSDoc for WordPress Gutenberg\nDESCRIPTION: An example of how to include usage examples in JSDoc comments using markdown code blocks for better readability and integration with documentation generation tools.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/coding-guidelines.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Given the name of a registered store, returns an object of the store's\n * selectors. The selector functions are been pre-bound to pass the current\n * state automatically. As a consumer, you need only pass arguments of the\n * selector, if applicable.\n *\n * @param {string} name Store name.\n *\n * @example\n * ```js\n * select( 'my-shop' ).getPrice( 'hammer' );\n * ```\n *\n * @return {Record<string,WPDataSelector>} Object containing the store's\n *                                         selectors.\n */\n```\n\n----------------------------------------\n\nTITLE: Disabling Widgets Block Editor using remove_theme_support in PHP\nDESCRIPTION: This code snippet demonstrates how to disable the Widgets Block Editor by removing theme support. It should be placed in the theme's functions.php file.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/widgets/opting-out.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nfunction example_theme_support() {\n\tremove_theme_support( 'widgets-block-editor' );\n}\nadd_action( 'after_setup_theme', 'example_theme_support' );\n```\n\n----------------------------------------\n\nTITLE: Executing Callback on DOM Ready in JavaScript\nDESCRIPTION: Imports and uses the domReady function from @wordpress/dom-ready to perform actions after the DOM is fully loaded. The callback function is executed once the DOM is ready, with no parameters and no return value.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/dom-ready/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport domReady from '@wordpress/dom-ready';\n\ndomReady( function () {\n\t//do something after DOM loads.\n} );\n```\n\n----------------------------------------\n\nTITLE: Installing WordPress Package via npm\nDESCRIPTION: Command to install a WordPress package using npm. This example shows how to install the block editor package and save it as a dependency in your project's package.json.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/packages.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @wordpress/block-editor --save\n```\n\n----------------------------------------\n\nTITLE: HTML with Derived State Binding\nDESCRIPTION: Defines HTML elements that use the `data-wp-bind--hidden` directive to control visibility based on the derived state `state.hasFruits`.  The list of fruits is rendered using `data-wp-each`. A message is displayed when there are no fruits.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/core-concepts/server-side-rendering.md#2025-04-21_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<div data-wp-interactive=\"myFruitPlugin\">\n\t<ul data-wp-bind--hidden=\"!state.hasFruits\">\n\t\t<template data-wp-each=\"state.fruits\">\n\t\t\t<li data-wp-text=\"context.item\"></li>\n\t\t</template>\n\t</ul>\n\t<div data-wp-bind--hidden=\"state.hasFruits\">No fruits, sorry!</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Checking for Previous Edit Available - JavaScript\nDESCRIPTION: This function checks if a previous edit is available for undo based on the current undo offset in the entity record edits history. It returns a boolean indicating availability.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core.md#2025-04-21_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\n// hasUndo\n\nfunction hasUndo( state ) {\n    // Implementation here\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Query Arguments from URL\nDESCRIPTION: Removes specified query arguments from a URL string. Useful for cleaning or modifying URL parameters dynamically.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/url/README.md#2025-04-21_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nconst newUrl = removeQueryArgs(\n\t'https://wordpress.org?foo=bar&bar=baz&baz=foobar',\n\t'foo',\n\t'bar'\n); // https://wordpress.org?baz=foobar\n```\n\n----------------------------------------\n\nTITLE: Modifying Query Loop Block Query on Front-end in PHP\nDESCRIPTION: Demonstrates how to modify the Query Loop block query on the front-end using the query_loop_block_query_vars filter in PHP.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/block-tutorial/extending-the-query-loop-block.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nif( 'my-plugin/books-list' === $block[ 'attrs' ][ 'namespace' ] ) {\n\tadd_filter(\n\t\t'query_loop_block_query_vars',\n\t\tfunction( $query ) {\n\t\t\t/** You can read your block custom query parameters here and build your query */\n\t\t},\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Count Function in JavaScript\nDESCRIPTION: Example of how to import and use the count function from the @wordpress/wordcount package. The function accepts text to count, the type of counting to perform, and optional user settings.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/wordcount/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { count } from '@wordpress/wordcount';\nconst numberOfWords = count( 'Words to count', 'words', {} );\n```\n\n----------------------------------------\n\nTITLE: Text Truncation in Text Component\nDESCRIPTION: Demonstrates how to enable text truncation using the truncate prop, which allows for cutting long text content based on different truncation strategies.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/text/README.md#2025-04-21_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { __experimentalText as Text } from '@wordpress/components';\n\nfunction Example() {\n\treturn (\n\t\t<Text truncate>\n\t\t\tLorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc ex\n\t\t\tneque, vulputate a diam et, luctus convallis lacus. Vestibulum ac\n\t\t\tmollis mi. Morbi id elementum massa. Suspendisse interdum auctor\n\t\t\tligula eget cursus. In fermentum ultricies mauris, pharetra\n\t\t\tfermentum erat pellentesque id.\n\t\t</Text>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server for WordPress Block\nDESCRIPTION: This command changes to the newly created plugin directory and starts the development server, which watches for changes and rebuilds the block as modifications are made.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/iapi-quick-start-guide.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd my-first-interactive-block && npm start\n```\n\n----------------------------------------\n\nTITLE: Starting WordPress Block Development\nDESCRIPTION: This command navigates into the newly created plugin folder and starts the development process. It runs npm start, which initiates a development server and watches for code changes.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/getting-started/quick-start-guide.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncd copyright-date-block && npm start\n```\n\n----------------------------------------\n\nTITLE: Running PHP Tests in Watch Mode\nDESCRIPTION: Command to run PHP tests with automatic re-running when files change, similar to Jest's watch functionality. This provides immediate feedback during development.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/testing-overview.md#2025-04-21_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test:php:watch\n```\n\n----------------------------------------\n\nTITLE: Cloning Gutenberg Repository and Adding Upstream\nDESCRIPTION: Commands to fork the Gutenberg repository, clone it locally, and add the WordPress repository as upstream for future synchronization.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/getting-started-with-code-contribution.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/YOUR_GITHUB_USERNAME/gutenberg.git\n$ cd gutenberg\n$ git remote add upstream https://github.com/WordPress/gutenberg.git\n```\n\n----------------------------------------\n\nTITLE: Adding Additional Styles to BlockPreview in JSX\nDESCRIPTION: This example shows how to pass additional CSS styles to the BlockPreview component through the 'additionalStyles' prop. The 'additionalStyles' prop accepts an array of style objects, each containing a 'css' attribute that specifies custom CSS rules to apply to the preview. This is useful when custom styling of blocks is required in the preview display.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/src/components/block-preview/README.md#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript (JSX)\nCODE:\n```\n<BlockPreview\n\tblocks={ blocks }\n\tadditionalStyles={ [\n\t\t{ css: 'body { padding: 16px; }' },\n\t] }\n/>\n```\n\n----------------------------------------\n\nTITLE: Extended .npmpackagejsonlintrc.json Configuration with Custom Rules\nDESCRIPTION: Advanced configuration showing how to extend WordPress rules and add multiple custom validation rules in a dedicated config file.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/npm-package-json-lint-config/README.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"extends\": \"@wordpress/npm-package-json-lint-config\",\n\t\"rules\": {\n\t\t\"require-publishConfig\": \"error\",\n\t\t\"valid-values-author\": [ \"error\", [ \"WordPress\" ] ]\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom CSS Properties in theme.json for WordPress\nDESCRIPTION: This JSON snippet demonstrates how to define custom CSS properties in theme.json, including nested properties and block-specific custom properties.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/themes/global-settings-and-styles.md#2025-04-21_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"version\": 3,\n\t\"settings\": {\n\t\t\"custom\": {\n\t\t\t\"baseFont\": 16,\n\t\t\t\"lineHeight\": {\n\t\t\t\t\"small\": 1.2,\n\t\t\t\t\"medium\": 1.4,\n\t\t\t\t\"large\": 1.8\n\t\t\t}\n\t\t},\n\t\t\"blocks\": {\n\t\t\t\"core/group\": {\n\t\t\t\t\"custom\": {\n\t\t\t\t\t\"baseFont\": 32\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Derived State with Getter\nDESCRIPTION: Defines a derived state (`hasFruits`) using a getter function in JavaScript. This getter returns `true` if the `fruits` array has a length greater than 0, and `false` otherwise. This derived state is used to dynamically show or hide elements in the HTML.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/core-concepts/server-side-rendering.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst { state } = store( 'myFruitPlugin', {\n\tstate: {\n\t\tget hasFruits() {\n\t\t\treturn state.fruits.length > 0;\n\t\t},\n\t},\n\t// ...\n} );\n```\n\n----------------------------------------\n\nTITLE: Checking for Next Edit Available - JavaScript\nDESCRIPTION: This function checks if a next edit is available for redo based on the current undo offset in the entity record edits history. It returns a boolean indicating availability.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core.md#2025-04-21_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\n// hasRedo\n\nfunction hasRedo( state ) {\n    // Implementation here\n}\n```\n\n----------------------------------------\n\nTITLE: Adding POST Method Support for ServerSideRender in PHP\nDESCRIPTION: PHP function to add POST method support for the ServerSideRender component in WordPress versions earlier than 5.5. This allows sending attributes in the request body instead of the URL.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/server-side-render/README.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction add_rest_method( $endpoints ) {\n    if ( is_wp_version_compatible( '5.5' ) ) {\n        return $endpoints;\n    }\n\n    foreach ( $endpoints as $route => $handler ) {\n        if ( isset( $endpoints[ $route ][0] ) ) {\n            $endpoints[ $route ][0]['methods'] = [ WP_REST_Server::READABLE, WP_REST_Server::CREATABLE ];\n        }\n    }\n\n    return $endpoints;\n}\nadd_filter( 'rest_endpoints', 'add_rest_method');\n```\n\n----------------------------------------\n\nTITLE: Registering Copyright Date Block with custom icon in index.js\nDESCRIPTION: Registers the block type with a custom calendar icon using SVG and sets up the edit component.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/getting-started/tutorial.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst calendarIcon = (\n\t<svg\n\t\tviewBox=\"0 0 24 24\"\n\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\taria-hidden=\"true\"\n\t\tfocusable=\"false\"\n\t>\n\t\t<path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm.5 16c0 .3-.2.5-.5.5H5c-.3 0-.5-.2-.5-.5V7h15v12zM9 10H7v2h2v-2zm0 4H7v2h2v-2zm4-4h-2v2h2v-2zm4 0h-2v2h2v-2zm-4 4h-2v2h2v-2zm4 0h-2v2h2v-2z\"></path>\n\t</svg>\n);\n\nregisterBlockType( metadata.name, {\n\ticon: calendarIcon,\n\tedit: Edit\n} );\n```\n\n----------------------------------------\n\nTITLE: Minimal Query Loop Block Variation Configuration\nDESCRIPTION: Basic implementation of a Query Loop block variation that sets up a custom post type without additional configuration.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/block-tutorial/extending-the-query-loop-block.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nregisterBlockVariation( 'core/query', {\n\tname: 'my-plugin/books-list',\n\tattributes: {\n\t\tquery: {\n\t\t\t/** ...more query settings if needed */\n\t\t\tpostType: 'book',\n\t\t},\n\t},\n} );\n```\n\n----------------------------------------\n\nTITLE: Basic Lazy Import Usage with Promise\nDESCRIPTION: Example demonstrating basic usage of lazy-import with Promise-based syntax to import and use the is-equal-shallow package.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/lazy-import/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst lazyImport = require( '@wordpress/lazy-import' );\n\nlazyImport( 'is-equal-shallow@^0.1.3' ).then( ( isEqualShallow ) => {\n\tconsole.log( isEqualShallow( { a: true, b: true }, { a: true, b: true } ) );\n\t// true\n} );\n```\n\n----------------------------------------\n\nTITLE: Loading Custom WordPress Translation Files\nDESCRIPTION: Demonstrates how to configure WordPress to load custom translation files from a specific directory.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/internationalization.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\tfunction myguten_set_script_translations() {\n\t\twp_set_script_translations( 'myguten-script', 'myguten', plugin_dir_path( __FILE__ ) . 'languages' );\n\t}\n\tadd_action( 'init', 'myguten_set_script_translations' );\n```\n\n----------------------------------------\n\nTITLE: Creating a Popover with Explicit Anchor in JSX\nDESCRIPTION: This example shows how to create a Popover with an explicit anchor element. The anchor is stored in component state to ensure proper re-rendering when it changes, rather than using a plain React ref.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/popover/README.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { Button, Popover } from '@wordpress/components';\n\nconst MyPopover = () => {\n\t// Use internal state instead of a ref to make sure that the component\n\t// re-renders when the popover's anchor updates.\n\tconst [ popoverAnchor, setPopoverAnchor ] = useState();\n\tconst [ isVisible, setIsVisible ] = useState( false );\n\tconst toggleVisible = () => {\n\t\tsetIsVisible( ( state ) => ! state );\n\t};\n\n\treturn (\n\t\t<p ref={ setPopoverAnchor }>Popover s anchor</p>\n\t\t<Button variant=\"secondary\" onClick={ toggleVisible }>\n\t\t\tToggle Popover!\n\t\t</Button>\n\t\t{ isVisible && (\n\t\t\t<Popover\n\t\t\t\tanchor={ popoverAnchor }\n\t\t\t>\n\t\t\t\tPopover is toggled!\n\t\t\t</Popover>\n\t\t) }\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Enabling Editor Styles Support in WordPress Themes\nDESCRIPTION: This PHP snippet demonstrates how to opt-in to editor styles support in the WordPress block editor. It's required to apply theme-specific styles to the editor content.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/themes/theme-support.md#2025-04-21_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nadd_theme_support( 'editor-styles' );\n```\n\n----------------------------------------\n\nTITLE: Retrieving Entity Records - JavaScript\nDESCRIPTION: This function returns the records of a specified entity. It requires parameters such as the state, kind, name of the entity, and an optional query to refine the results. The function returns an array of entity records or null if no records are found.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// getEntityRecords\n\nfunction getEntityRecords( state, kind, name, query ) {\n    // Implementation here\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Persistence Layer\nDESCRIPTION: This JavaScript snippet demonstrates how to create a persistence layer for storing preferences in WordPress user meta using the 'create' function. This is the foundational step for implementing the persistence mechanism.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/preferences-persistence/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst persistenceLayer = create();\n```\n\n----------------------------------------\n\nTITLE: Basic Inspector Controls Implementation\nDESCRIPTION: Implements basic inspector controls with a test message and current year display using React Fragment.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/getting-started/tutorial.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function Edit() {\n\tconst currentYear = new Date().getFullYear().toString();\n\n\treturn (\n\t\t<>\n\t\t\t<InspectorControls>\n\t\t\t\tTesting\n\t\t\t</InspectorControls>\n\t\t\t<p { ...useBlockProps() }>© { currentYear }</p>\n\t\t</>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: String Declaration Best Practices in JavaScript\nDESCRIPTION: Shows proper string declaration practices using single quotes, double quotes and handling of apostrophes. Includes examples of both incorrect and correct approaches.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/coding-guidelines.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// Bad:\nconst name = \"Matt\";\n// Good:\nconst name = 'Matt';\n\n// Bad:\nconst pet = \"Matt's dog\";\n// Also bad (not using an apostrophe):\nconst pet = \"Matt's dog\";\n// Good:\nconst pet = 'Matt's dog';\n// Also good:\nconst oddString = \"She said 'This is odd.'\";\n```\n\n----------------------------------------\n\nTITLE: Removing Extra Vertical Space - DropdownMenu - JavaScript\nDESCRIPTION: This bug fix addresses layout issues by removing unnecessary vertical space around the toggle button of the DropdownMenu component, optimizing its appearance.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nDropdownMenu: remove extra vertical space around the toggle button ([#56136](https://github.com/WordPress/gutenberg/pull/56136)).\n```\n\n----------------------------------------\n\nTITLE: Retrieving Freeform Fallback Block Name in React Component\nDESCRIPTION: Shows how to use the getFreeformFallbackBlockName selector to fetch the name of the block for handling non-block content. The component displays the fallback block name.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core-blocks.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { __, sprintf } from '@wordpress/i18n';\nimport { store as blocksStore } from '@wordpress/blocks';\nimport { useSelect } from '@wordpress/data';\n\nconst ExampleComponent = () => {\n\tconst freeformFallbackBlockName = useSelect(\n\t\t( select ) => select( blocksStore ).getFreeformFallbackBlockName(),\n\t\t[]\n\t);\n\n\treturn (\n\t\tfreeformFallbackBlockName && (\n\t\t\t<p>\n\t\t\t\t{ sprintf(\n\t\t\t\t\t__( 'Freeform fallback block name: %s' ),\n\t\t\t\t\tfreeformFallbackBlockName\n\t\t\t\t) }\n\t\t\t</p>\n\t\t)\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Adding a Paragraph Block in React Native Tests\nDESCRIPTION: This code snippet demonstrates the process of adding a Paragraph block in a React Native integration test, including opening the inserter menu and selecting the block.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/react-native/integration-test-guide.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// Open the inserter menu\nfireEvent.press( await findByLabelText( 'Add block' ) );\n\nconst blockList = getByTestId( 'InserterUI-Blocks' );\n// onScroll event used to force the FlatList to render all items\nfireEvent.scroll( blockList, {\n\tnativeEvent: {\n\t\tcontentOffset: { y: 0, x: 0 },\n\t\tcontentSize: { width: 100, height: 100 },\n\t\tlayoutMeasurement: { width: 100, height: 100 },\n\t},\n} );\n\n// Insert a Paragraph block\nfireEvent.press( await findByText( `Paragraph` ) );\n```\n\n----------------------------------------\n\nTITLE: Checking If Entity Records Exist - JavaScript\nDESCRIPTION: This function assesses whether any records have been received for given parameters, returning a boolean indicating the presence of entity records.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n// hasEntityRecords\n\nfunction hasEntityRecords( state, kind, name, query ) {\n    // Implementation here\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Inline Styles Using wp-style\nDESCRIPTION: HTML example demonstrating the wp-style directive for managing inline styling based on context values. It reacts to state changes for dynamic CSS property updates.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/api-reference.md#2025-04-21_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<div data-wp-context='{ \"color\": \"red\" }'>\n\t<button data-wp-on--click=\"actions.toggleContextColor\">\n\t\tToggle Color Text\n\t</button>\n\t<p data-wp-style--color=\"context.color\">Hello World!</p>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Shortcut Key Combination in React (JavaScript)\nDESCRIPTION: This snippet shows how to use the getShortcutKeyCombination selector to retrieve and display the main key combination for a given shortcut name.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core-keyboard-shortcuts.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { store as keyboardShortcutsStore } from '@wordpress/keyboard-shortcuts';\nimport { useSelect } from '@wordpress/data';\nimport { createInterpolateElement } from '@wordpress/element';\nimport { sprintf } from '@wordpress/i18n';\nconst ExampleComponent = () => {\n\tconst { character, modifier } = useSelect(\n\t\t( select ) =>\n\t\t\tselect( keyboardShortcutsStore ).getShortcutKeyCombination(\n\t\t\t\t'core/editor/next-region'\n\t\t\t),\n\t\t[]\n\t);\n\n\treturn (\n\t\t<div>\n\t\t\t{ createInterpolateElement(\n\t\t\t\tsprintf(\n\t\t\t\t\t'Character: <code>%s</code> / Modifier: <code>%s</code>',\n\t\t\t\t\tcharacter,\n\t\t\t\t\tmodifier\n\t\t\t\t),\n\t\t\t\t{\n\t\t\t\t\tcode: <code />,\n\t\t\t\t}\n\t\t\t) }\n\t\t</div>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: WordPress Block Structure Example\nDESCRIPTION: Example HTML structure showing WordPress block formatting with columns and nested content\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-serialization-default-parser/README.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- wp:columns {\"columns\":3} -->\n<div class=\"wp-block-columns has-3-columns\">\n\t<!-- wp:column -->\n\t<div class=\"wp-block-column\">\n\t\t<!-- wp:paragraph -->\n\t\t<p>Left</p>\n\t\t<!-- /wp:paragraph -->\n\t</div>\n\t<!-- /wp:column -->\n\n\t<!-- wp:column -->\n\t<div class=\"wp-block-column\">\n\t\t<!-- wp:paragraph -->\n\t\t<p><strong>Middle</strong></p>\n\t\t<!-- /wp:paragraph -->\n\t</div>\n\t<!-- /wp:column -->\n\n\t<!-- wp:column -->\n\t<div class=\"wp-block-column\"></div>\n\t<!-- /wp:column -->\n</div>\n<!-- /wp:columns -->\n```\n\n----------------------------------------\n\nTITLE: Implementing CardHeader with Card in React\nDESCRIPTION: This code snippet demonstrates how to use the CardHeader component within a Card component. It imports necessary components from @wordpress/components and shows a basic structure of a card with a header and body.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/card/card-header/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Card, CardHeader } from '@wordpress/components';\n\nconst Example = () => (\n\t<Card>\n \t\t<CardHeader>...</CardHeader>\n \t\t<CardBody>...</CardBody>\n\t</Card>\n);\n```\n\n----------------------------------------\n\nTITLE: Getting Non-Transient Edits of Entity Record - JavaScript\nDESCRIPTION: This function retrieves the non-transient edits of a specified entity record. Non-transient edits are those that create a permanent undo level and are necessary for change detection. Parameters include the state of the application, the kind and name of the entity, and the record ID. The function returns an optional value containing the entity record's non-transient edits.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// getEntityRecordNonTransientEdits\n\nfunction getEntityRecordNonTransientEdits( state, kind, name, recordId ) {\n    // Implementation here\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Default Block Variation for Embed Block in React Component\nDESCRIPTION: Demonstrates the use of getDefaultBlockVariation selector to retrieve the default variation for a specific block (core/embed). The component displays the default variation title.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core-blocks.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { __, sprintf } from '@wordpress/i18n';\nimport { store as blocksStore } from '@wordpress/blocks';\nimport { useSelect } from '@wordpress/data';\n\nconst ExampleComponent = () => {\n\tconst defaultEmbedBlockVariation = useSelect(\n\t\t( select ) =>\n\t\t\tselect( blocksStore ).getDefaultBlockVariation( 'core/embed' ),\n\t\t[]\n\t);\n\n\treturn (\n\t\tdefaultEmbedBlockVariation && (\n\t\t\t<p>\n\t\t\t\t{ sprintf(\n\t\t\t\t\t__( 'core/embed default variation: %s' ),\n\t\t\t\t\tdefaultEmbedBlockVariation.title\n\t\t\t\t) }\n\t\t\t</p>\n\t\t)\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Spacing Sides Support\nDESCRIPTION: Demonstrates how to configure specific sides for spacing controls, including arbitrary sides for margin/padding and axial controls for blockGap.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-supports.md#2025-04-21_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nsupports: {\n    spacing: {\n        margin: [ 'top', 'bottom' ],             // Enable margin for arbitrary sides.\n        padding: true,                           // Enable padding for all sides.\n        blockGap: [ 'horizontal', 'vertical' ],  // Enables axial (column/row) block spacing controls\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing internal dependencies in JavaScript\nDESCRIPTION: Illustrates the convention for importing modules from within the same feature. Uses relative paths and a comment indicating they are internal dependencies.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/coding-guidelines.md#2025-04-21_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n/**\n * Internal dependencies\n */\nimport VisualEditor from '../visual-editor';\n```\n\n----------------------------------------\n\nTITLE: Checking Navigation Mode in Gutenberg Editor (JavaScript)\nDESCRIPTION: Selector function that returns whether navigation mode is enabled in the editor state. It takes the editor state as a parameter and returns a boolean value.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core-block-editor.md#2025-04-21_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nisNavigationMode( state )\n```\n\n----------------------------------------\n\nTITLE: Array Data Structure Example\nDESCRIPTION: This example defines an array of data objects, showcasing the data structure expected by DataViews. Each object represents a dataset record with fields such as id, title, author, and date.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/dataviews/README.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = [\n\t{\n\t\tid: 1,\n\t\ttitle: 'Title',\n\t\tauthor: 'Admin',\n\t\tdate: '2012-04-23T18:25:43.511Z',\n\t},\n\t{\n\t\t/* ... */\n\t},\n];\n```\n\n----------------------------------------\n\nTITLE: Conditionally disabling Widgets Block Editor for specific user in PHP\nDESCRIPTION: This advanced example demonstrates how to disable the Widgets Block Editor for a specific user (ID 123) using a custom function with the use_widgets_block_editor filter.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/widgets/opting-out.md#2025-04-21_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nfunction example_use_widgets_block_editor( $use_widgets_block_editor ) {\n\tif ( 123 === get_current_user_id() ) {\n\t\treturn false;\n\t}\n\treturn $use_widgets_block_editor;\n}\nadd_filter( 'use_widgets_block_editor', 'example_use_widgets_block_editor' );\n```\n\n----------------------------------------\n\nTITLE: Unlocking a Private Store - JavaScript\nDESCRIPTION: This snippet demonstrates how to unlock a private store using a string lock value. This allows subsequent calls to access the locked store content securely based on the provided string.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/api-reference.md#2025-04-21_snippet_38\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { state } = store(\n\t'myPlugin/private',\n\t{ state: { messages: [ 'private message' ] } },\n\t{ lock: PRIVATE_LOCK }\n);\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n// The following call works as expected.\nstore(\n\t'myPlugin/private',\n\t{\n\t\t/* store part */\n\t},\n\t{ lock: PRIVATE_LOCK }\n);\n```\n\n----------------------------------------\n\nTITLE: Counting Total Entity Records - JavaScript\nDESCRIPTION: This function counts the total number of available records for a given entity based on a query, ignoring pagination. It requires the same parameters as the retrieval function and returns the number of records or null if none exist.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// getEntityRecordsTotalItems\n\nfunction getEntityRecordsTotalItems( state, kind, name, query ) {\n    // Implementation here\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript: Performing AJAX Request\nDESCRIPTION: This JavaScript snippet shows how to use the serialized AJAX URL and nonce to perform a secure AJAX request.  It creates a `FormData` object, appends the action and nonce, and then uses `fetch` to send the request to the server.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/core-concepts/server-side-rendering.md#2025-04-21_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nconst { state } = store( 'myPlugin', {\n\tactions: {\n\t\t*doSomething() {\n\t\t\tconst formData = new FormData();\n\t\t\tformData.append( 'action', 'do_something' );\n\t\t\tformData.append( '_ajax_nonce', state.nonce );\n\n\t\t\tconst data = yield fetch( state.ajaxUrl, {\n\t\t\t\tmethod: 'POST',\n\t\t\t\tbody: formData,\n\t\t\t} ).then( ( response ) => response.json() );\n\n\t\t\tconsole.log( 'Server data', data );\n\t\t},\n\t},\n} );\n```\n\n----------------------------------------\n\nTITLE: Fetching a Single Entity Revision - JavaScript\nDESCRIPTION: This function retrieves a specific revision of a parent entity based on given parameters. It returns a revision record or undefined if it does not exist.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n// getRevision\n\nfunction getRevision( state, kind, name, recordKey, revisionKey, query ) {\n    // Implementation here\n}\n```\n\n----------------------------------------\n\nTITLE: Restricting SlotFill Content to Specific Post Types in WordPress\nDESCRIPTION: Demonstrates how to limit a SlotFill component to only appear when editing specific post types by using an allow list. The example restricts rendering to only the 'page' post type by combining post type checking with viewability verification.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/slotfills/README.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * WordPress dependencies\n */\nimport { registerPlugin } from '@wordpress/plugins';\nimport {\n\tPluginDocumentSettingPanel,\n\tstore as editorStore,\n} from '@wordpress/editor';\nimport { store as coreStore } from '@wordpress/core-data';\nimport { useSelect } from '@wordpress/data';\nimport { __, sprintf } from '@wordpress/i18n';\n\n/**\n * The component to be rendered  as part of the plugin.\n */\nconst RestrictPostTypes = () => {\n\t// Retrieve information about the current post type.\n\tconst { isViewable, postTypeName } = useSelect( ( select ) => {\n\t\tconst postType = select( editorStore ).getCurrentPostType();\n\t\tconst postTypeObject = select( coreStore ).getPostType( postType );\n\t\treturn {\n\t\t\tisViewable: postTypeObject?.viewable,\n\t\t\tpostTypeName: postType,\n\t\t};\n\t}, [] );\n\n\t// The list of post types that are allowed to render the plugin.\n\tconst allowedPostTypes = [ 'page' ];\n\n\t// If the post type is not viewable or not in the allowed list, do not render the plugin.\n\tif ( ! isViewable || ! allowedPostTypes.includes( postTypeName ) ) {\n\t\treturn null;\n\t}\n\n\treturn (\n\t\t<PluginDocumentSettingPanel\n\t\t\tname=\"custom-panel\"\n\t\t\ttitle={ __( 'Restrict Post Types Example' ) }\n\t\t\tclassName=\"custom-panel\"\n\t\t>\n\t\t\t<p>\n\t\t\t\t{ sprintf(\n\t\t\t\t\t__(\n\t\t\t\t\t\t'Only appears on Post Types that are in the allowed list. %s'\n\t\t\t\t\t),\n\t\t\t\t\tallowedPostTypes.join( ', ' )\n\t\t\t\t) }\n\t\t\t</p>\n\t\t</PluginDocumentSettingPanel>\n\t);\n};\n\nregisterPlugin( 'example-restrict-post-types', {\n\trender: RestrictPostTypes,\n} );\n```\n\n----------------------------------------\n\nTITLE: Disabling Block Inspector Tabs in PHP\nDESCRIPTION: Shows how to disable block inspector tabs by default and for specific blocks using the 'block_editor_settings_all' filter.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/filters/editor-filters.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nadd_filter( 'block_editor_settings_all', 'example_disable_inspector_tabs_by_default' );\n\nfunction example_disable_inspector_tabs_by_default( $settings ) {\n\t$settings['blockInspectorTabs'] = array( 'default' => false );\n\treturn $settings;\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nadd_filter( 'block_editor_settings_all', 'example_disable_tabs_for_my_custom_block' );\n\nfunction example_disable_tabs_for_my_custom_block( $settings ) {\n\t$current_tab_settings = _wp_array_get( $settings, array( 'blockInspectorTabs' ), array() );\n\t$settings['blockInspectorTabs'] = array_merge(\n\t\t$current_tab_settings,\n\t\tarray( 'my-plugin/my-custom-block' => false )\n\t);\n\n\treturn $settings;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Derived State Indirectly in JavaScript\nDESCRIPTION: This snippet demonstrates how derived state is updated indirectly by modifying the global state or local context it depends on.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/core-concepts/undestanding-global-state-local-context-and-derived-state.md#2025-04-21_snippet_26\n\nLANGUAGE: js\nCODE:\n```\nconst { state } = store( 'myCounterPlugin', {\n\t// ...\n\tactions: {\n\t\tupdateValues() {\n\t\t\tstate.counter; // Regular state, returns 1.\n\t\t\tstate.double; // Derived state, returns 2.\n\n\t\t\tstate.counter = 2;\n\n\t\t\tstate.counter; // Regular state, returns 2.\n\t\t\tstate.double; // Derived state, returns 4.\n\t\t},\n\t},\n} );\n```\n\n----------------------------------------\n\nTITLE: Adding Delete Action Handler to Delete Button\nDESCRIPTION: Implements the delete functionality in the DeletePageButton component using WordPress data dispatch.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/data-basics/5-adding-a-delete-button.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst DeletePageButton = ({ pageId }) => {\n\tconst { deleteEntityRecord } = useDispatch( coreDataStore );\n\tconst handleDelete = () => deleteEntityRecord( 'postType', 'page', pageId );\n\treturn (\n\t\t<Button variant=\"primary\" onClick={ handleDelete }>\n\t\t\tDelete\n\t\t</Button>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Navigation Timeout Configuration - JavaScript\nDESCRIPTION: Implementation of timeout option for the navigate() function with a default value of 10000 milliseconds to control navigation timing.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/interactivity/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nnavigate({ timeout: 10000 })\n```\n\n----------------------------------------\n\nTITLE: Data Key Implementation - HTML\nDESCRIPTION: Implementation of data-wp-key directive for managing key-based operations in components.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/interactivity/CHANGELOG.md#2025-04-21_snippet_4\n\nLANGUAGE: html\nCODE:\n```\ndata-wp-key=\"uniqueKey\"\n```\n\n----------------------------------------\n\nTITLE: Type Inference with Server State\nDESCRIPTION: Shows how to combine server state types with client store definition types for complete type coverage.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/core-concepts/using-typescript.md#2025-04-21_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\ntype ServerState = {\n\tstate: {\n\t\tcounter: number;\n\t};\n};\n\nconst storeDef = {\n\tstate: {\n\t\tget double(): number {\n\t\t\treturn state.counter * 2;\n\t\t},\n\t},\n\tactions: {\n\t\tincrement() {\n\t\t\tstate.counter += 1;\n\t\t},\n\t},\n};\n\ntype Store = ServerState & typeof storeDef;\n\nconst { state } = store< Store >( 'myCounterPlugin', storeDef );\n```\n\n----------------------------------------\n\nTITLE: Defining a Generator Function for Temperature Retrieval in JavaScript\nDESCRIPTION: Example of a generator function that yields a FETCH_JSON action and returns a SET_TEMPERATURE action. This demonstrates the core functionality of using @wordpress/redux-routine for handling asynchronous operations.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/redux-routine/README.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction* retrieveTemperature() {\n\tconst result = yield { type: 'FETCH_JSON', url: 'https://' };\n\treturn { type: 'SET_TEMPERATURE', temperature: result.value };\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Toolbar Button Outside Dropdown\nDESCRIPTION: Implementation of a format button that appears directly in the toolbar instead of the dropdown menu using BlockControls component.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/format-api.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { registerFormatType, toggleFormat } from '@wordpress/rich-text';\nimport { BlockControls } from '@wordpress/block-editor';\nimport { ToolbarGroup, ToolbarButton } from '@wordpress/components';\n\nconst MyCustomButton = ( { isActive, onChange, value } ) => {\n\treturn (\n\t\t<BlockControls>\n\t\t\t<ToolbarGroup>\n\t\t\t\t<ToolbarButton\n\t\t\t\t\ticon=\"editor-code\"\n\t\t\t\t\ttitle=\"Sample output\"\n\t\t\t\t\tonClick={ () => {\n\t\t\t\t\t\tonChange(\n\t\t\t\t\t\t\ttoggleFormat( value, {\n\t\t\t\t\t\t\t\ttype: 'my-custom-format/sample-output',\n\t\t\t\t\t\t\t} )\n\t\t\t\t\t\t);\n\t\t\t\t\t} }\n\t\t\t\t\tisActive={ isActive }\n\t\t\t\t/>\n\t\t\t</ToolbarGroup>\n\t\t</BlockControls>\n\t);\n};\n\nregisterFormatType( 'my-custom-format/sample-output', {\n\ttitle: 'Sample output',\n\ttagName: 'samp',\n\tclassName: null,\n\tedit: MyCustomButton,\n} );\n```\n\n----------------------------------------\n\nTITLE: Using ServerSideRender Component in React\nDESCRIPTION: Example of using the ServerSideRender component in a React application to render a core/archives block preview with custom attributes.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/server-side-render/README.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport ServerSideRender from '@wordpress/server-side-render';\n\nconst MyServerSideRender = () => (\n\t<ServerSideRender\n\t\tblock=\"core/archives\"\n\t\tattributes={ {\n\t\t\tshowPostCounts: true,\n\t\t\tdisplayAsDropdown: false,\n\t\t} }\n\t/>\n);\n```\n\n----------------------------------------\n\nTITLE: Linting Command Enhancements - JavaScript\nDESCRIPTION: The `lint-js` command lints JavaScript files, `lint-pkg-json` checks the `package.json` files, and `lint-style` lints CSS and SCSS files within the entire project's directories by default. The commands have been modified to ignore files in the `build` and `node_modules` folders to optimize performance.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/scripts/CHANGELOG.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\neslint --ext .js,.jsx src/ --ignore-pattern \"build/\" --ignore-pattern \"node_modules/\"\n```\n\n----------------------------------------\n\nTITLE: Example HTML Output for Block Editor Markup\nDESCRIPTION: This HTML snippet shows the potential output of a block in the Block Editor after useBlockProps() has been applied. It includes various automatically added classes and attributes for enhanced functionality and styling.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/getting-started/fundamentals/block-wrapper.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<p\n    tabindex=\"0\"\n    id=\"block-4462939a-b918-44bb-9b7c-35a0db5ab8fe\"\n    role=\"document\"\n    aria-label=\"Block: Minimal Gutenberg Block ca6eda\"\n    data-block=\"4462939a-b918-44bb-9b7c-35a0db5ab8fe\"\n    data-type=\"block-development-examples/minimal-block-ca6eda\"\n    data-title=\"Minimal Gutenberg Block ca6eda\"\n    class=\"\n        block-editor-block-list__block\n        wp-block\n        is-selected\n        wp-block-block-development-examples-minimal-block-ca6eda\n    \"\n>Hello World - Block Editor</p>\n```\n\n----------------------------------------\n\nTITLE: Representing Formatted Text with RichTextValue Object in JavaScript\nDESCRIPTION: Example of how a RichTextValue object represents richly formatted text, including bold and link formatting applied to specific character ranges.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/rich-text/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  text: 'Hello world', // length 11\n  formats: [\n    [], // 0\n    [],\n    [ // 2\n      {\n        type: 'core/bold',\n      },\n      {\n        type: 'core/link',\n      }\n    ],\n    [\n      {\n        type: 'core/bold',\n      },\n      {\n        type: 'core/link',\n      }\n    ],\n    [\n      {\n        type: 'core/bold',\n      },\n      {\n        type: 'core/link',\n      }\n    ],\n    [\n      {\n        type: 'core/bold',\n      },\n      {\n        type: 'core/link',\n      }\n    ],\n    [ // 6\n      {\n        type: 'core/link',\n      }\n    ]\n    [\n      {\n        type: 'core/link',\n      }\n    ],\n    [\n      {\n        type: 'core/link',\n      }\n    ],\n    [], // 9\n    [], // 10\n    [], // 11\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Cleaning and Reinstalling Dependencies\nDESCRIPTION: Commands to clean the node_modules directory and reinstall dependencies for an existing Gutenberg checkout.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/react-native/osx-setup-guide.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpm run distclean\nnpm ci\n```\n\n----------------------------------------\n\nTITLE: Dynamic Block Script Enqueuing\nDESCRIPTION: PHP example showing how to enqueue view script for a dynamic block\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-library/README.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nfunction render_block_core_blinking_paragraph( $attributes, $content ) {\n    $should_load_view_script = ! empty( $attributes['isInteractive'] );\n    if ( $should_load_view_script ) {\n\t    wp_enqueue_script_module( '@wordpress/block-library/blinking-paragraph' );\n    }\n\n\treturn $content;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring WordPress Scripts in package.json\nDESCRIPTION: Example of adding scripts to the package.json file using wp-scripts commands. This configuration sets up common development tasks like building, formatting, linting, and starting the development server.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/platform/README.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n\t\"build\": \"wp-scripts build\",\n\t\"format\": \"wp-scripts format\",\n\t\"lint:js\": \"wp-scripts lint-js\",\n\t\"start\": \"wp-scripts start\"\n}\n```\n\n----------------------------------------\n\nTITLE: Registering WordPress Script with Dependencies in PHP\nDESCRIPTION: Illustrates how to register a WordPress script with dependencies on wp-components and react packages in a plugin file.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/explanations/architecture/modularity.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// myplugin.php\n// Example of script registration depending on the \"components\" and \"element packages.\nwp_register_script( 'myscript', 'pathtomyscript.js', array ('wp-components', \"react\" ) );\n```\n\n----------------------------------------\n\nTITLE: Describing Tests in Jest\nDESCRIPTION: Example of how to properly describe and structure tests using Jest's describe and test blocks. This snippet demonstrates a good practice for writing readable test descriptions.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/testing-overview.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe( 'CheckboxWithLabel', () => {\n    test( 'checking checkbox should disable the form submit button', () => {\n        ...\n    } );\n} );\n```\n\n----------------------------------------\n\nTITLE: Managing Complementary Areas with WordPress Interface Store\nDESCRIPTION: Demonstrates how to interact with complementary areas using WordPress data store methods for selection and dispatching\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/interface/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nwp.data\n\t.select( 'core/interface' )\n\t.getActiveComplementaryArea( 'core' );\n// -> \"edit-post/document\"\n\nwp.data\n\t.dispatch( 'core/interface' )\n\t.enableComplementaryArea( 'core', 'edit-post/block' );\n\nwp.data\n\t.select( 'core/interface' )\n\t.getActiveComplementaryArea( 'core' );\n// -> \"edit-post/block\"\n```\n\n----------------------------------------\n\nTITLE: Conditional Format Button Rendering\nDESCRIPTION: Implementation of a format button that only appears for specific block types using the WordPress data API.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/format-api.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { registerFormatType, toggleFormat } from '@wordpress/rich-text';\nimport { RichTextToolbarButton } from '@wordpress/block-editor';\nimport { useSelect } from '@wordpress/data';\n\nfunction ConditionalButton( { isActive, onChange, value } ) {\n\tconst selectedBlock = useSelect( ( select ) => {\n\t\treturn select( 'core/block-editor' ).getSelectedBlock();\n\t}, [] );\n\n\tif ( selectedBlock && selectedBlock.name !== 'core/paragraph' ) {\n\t\treturn null;\n\t}\n\n\treturn (\n\t\t<RichTextToolbarButton\n\t\t\ticon=\"editor-code\"\n\t\t\ttitle=\"Sample output\"\n\t\t\tonClick={ () => {\n\t\t\t\tonChange(\n\t\t\t\t\ttoggleFormat( value, {\n\t\t\t\t\t\ttype: 'my-custom-format/sample-output',\n\t\t\t\t\t} )\n\t\t\t\t);\n\t\t\t} }\n\t\t\tisActive={ isActive }\n\t\t/>\n\t);\n}\n\nregisterFormatType( 'my-custom-format/sample-output', {\n\ttitle: 'Sample output',\n\ttagName: 'samp',\n\tclassName: null,\n\tedit: ConditionalButton,\n} );\n```\n\n----------------------------------------\n\nTITLE: Defining Frontend-only Styles in block.json\nDESCRIPTION: Configuration for styles that only load when viewing content on the frontend. Available since WordPress 6.5.0.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-metadata.md#2025-04-21_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{ \"viewStyle\": [ \"file:./view.css\", \"example-view-style\" ] }\n```\n\n----------------------------------------\n\nTITLE: Webpack Build Command with Multiple Entry Points\nDESCRIPTION: Example showing how to build multiple JavaScript entry points using wp-scripts.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/scripts/README.md#2025-04-21_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\nwp-scripts build entry-one.js entry-two.js\n```\n\n----------------------------------------\n\nTITLE: Configuring mu-plugins and Mapped Directories in WordPress\nDESCRIPTION: This snippet demonstrates how to add mu-plugins and map directories in a WordPress environment using wp-env. It shows how to specify plugins, mu-plugins, and theme directories in the configuration.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/env/README.md#2025-04-21_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"plugins\": [ \".\" ],\n\t\"mappings\": {\n\t\t\"wp-content/mu-plugins\": \"./path/to/local/mu-plugins\",\n\t\t\"wp-content/themes\": \"./path/to/local/themes\",\n\t\t\"wp-content/themes/specific-theme\": \"./path/to/local/theme-1\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling RTL Text Direction in Gutenberg\nDESCRIPTION: This code shows how to set the text direction to right-to-left (RTL) using the setLocaleData function. This is the first step in properly supporting RTL languages in the Gutenberg editor.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/platform-docs/docs/basic-concepts/internationalization.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { setLocaleData } from '@wordpress/i18n';\n\nsetLocaleData( { 'text direction\\u0004ltr': [ 'rtl' ] } );\n```\n\n----------------------------------------\n\nTITLE: Implementing i18n in WordPress Block JavaScript\nDESCRIPTION: Shows how to use the __ translation function in a React-based WordPress block component with proper text domain.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/internationalization.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { __ } from '@wordpress/i18n';\nimport { registerBlockType } from '@wordpress/blocks';\nimport { useBlockProps } from '@wordpress/block-editor';\n\nregisterBlockType( 'myguten/simple', {\n\tapiVersion: 3,\n\ttitle: __( 'Simple Block', 'myguten' ),\n\tcategory: 'widgets',\n\n\tedit: () => {\n\t\tconst blockProps = useBlockProps( { style: { color: 'red' } } );\n\n\t\treturn <p { ...blockProps }>{ __( 'Hello World', 'myguten' ) }</p>;\n\t},\n\n\tsave: () => {\n\t\tconst blockProps = useBlockProps.save( { style: { color: 'red' } } );\n\n\t\treturn <p { ...blockProps }>{ __( 'Hello World', 'myguten' ) }</p>;\n\t},\n} );\n```\n\n----------------------------------------\n\nTITLE: Using Closures for Dynamic Derived State in PHP\nDESCRIPTION: This snippet shows how to use a Closure function to calculate derived state dynamically when it depends on changing local context on the server.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/core-concepts/undestanding-global-state-local-context-and-derived-state.md#2025-04-21_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n<?php\nwp_interactivity_state( 'myProductPlugin', array(\n  'list'    => array( 1, 2, 3 ),\n  'factor'  => 3,\n  'product' => function() {\n    $state   = wp_interactivity_state();\n    $context = wp_interactivity_get_context();\n    return $context['item'] * $state['factor'];\n  }\n));\n?>\n\n<template\n  data-wp-interactive=\"myProductPlugin\"\n  data-wp-each=\"state.list\"\n>\n  <span data-wp-text=\"state.product\"></span>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Setting Prettier Config in .prettierrc\nDESCRIPTION: This snippet shows an alternative way to set Prettier config by adding the module name in a .prettierrc file.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/prettier-config/README.md#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n\"@wordpress/prettier-config\"\n```\n\n----------------------------------------\n\nTITLE: Using BorderControl Component in React\nDESCRIPTION: This snippet demonstrates how to use the BorderControl component in a React application. It imports necessary dependencies, sets up a state for the border value, and renders the BorderControl with some basic props.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/border-control/border-control/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { BorderControl } from '@wordpress/components';\nimport { __ } from '@wordpress/i18n';\n\nconst colors = [\n\t{ name: 'Blue 20', color: '#72aee6' },\n\t// ...\n];\n\nconst MyBorderControl = () => {\n\tconst [ border, setBorder ] = useState();\n\n\treturn (\n\t\t<BorderControl\n\t\t\t__next40pxDefaultSize\n\t\t\tcolors={ colors }\n\t\t\tlabel={ __( 'Border' ) }\n\t\t\tonChange={ setBorder }\n\t\t\tvalue={ border }\n\t\t/>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Using LineHeightControl component in Gutenberg\nDESCRIPTION: This code snippet demonstrates how to use the LineHeightControl component from the @wordpress/block-editor package. It renders the markup for the line height setting option within a block inspector. It requires the lineHeight state and an onChange handler to update the line height value.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/src/components/line-height-control/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { LineHeightControl } from '@wordpress/block-editor';\nconst MyLineHeightControl = () => (\n\t<LineHeightControl\n\t\tvalue={ lineHeight }\n\t\tonChange={ onChange }\n\t\t__next40pxDefaultSize\n\t/>\n);\n\n```\n\n----------------------------------------\n\nTITLE: Referencing Schema in theme.json for WordPress\nDESCRIPTION: Demonstrates how to include the schema reference in a theme.json file. This helps code editors provide validation and autocomplete features based on WordPress theme standards.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/schemas/README.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"$schema\": \"https://schemas.wp.org/trunk/theme.json\"\n}\n```\n\n----------------------------------------\n\nTITLE: Pinging WordPress Gutenberg Signaling Server\nDESCRIPTION: This code demonstrates how to ping the Gutenberg Signaling Server to indicate that a client is still active. It sends a POST request with the client's subscriber ID and specifies the 'ping' action type, which helps maintain the connection and track active clients.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/lib/experimental/sync/README.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nawait (\n\tawait fetch( window.wp.ajax.settings.url, {\n\t\tbody: new URLSearchParams( {\n\t\t\tsubscriber_id: '1',\n\t\t\taction: 'gutenberg_signaling_server',\n\t\t\tmessage: JSON.stringify( {\n\t\t\t\ttype: 'ping',\n\t\t\t} ),\n\t\t} ),\n\t\tmethod: 'POST',\n\t} )\n ).text();\n```\n\n----------------------------------------\n\nTITLE: Removing All Notices\nDESCRIPTION: Shows how to remove all notices or notices of a specific type using the removeAllNotices action.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core-notices.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { __ } from '@wordpress/i18n';\nimport { useDispatch, useSelect } from '@wordpress/data';\nimport { store as noticesStore } from '@wordpress/notices';\nimport { Button } from '@wordpress/components';\n\nexport const ExampleComponent = () => {\n\tconst notices = useSelect( ( select ) =>\n\t\tselect( noticesStore ).getNotices()\n\t);\n\tconst { removeAllNotices } = useDispatch( noticesStore );\n\treturn (\n\t\t<>\n\t\t\t<ul>\n\t\t\t\t{ notices.map( ( notice ) => (\n\t\t\t\t\t<li key={ notice.id }>{ notice.content }</li>\n\t\t\t\t) ) }\n\t\t\t</ul>\n\t\t\t<Button onClick={ () => removeAllNotices() }>\n\t\t\t\t{ __( 'Clear all notices', 'woo-gutenberg-products-block' ) }\n\t\t\t</Button>\n\t\t\t<Button onClick={ () => removeAllNotices( 'snackbar' ) }>\n\t\t\t\t{ __(\n\t\t\t\t\t'Clear all snackbar notices',\n\t\t\t\t\t'woo-gutenberg-products-block'\n\t\t\t\t) }\n\t\t\t</Button>\n\t\t</>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Changing Site Timezone - JavaScript\nDESCRIPTION: Navigates to the general settings page and updates the WordPress site's timezone. This is vital for tests that depend on localized time settings.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/e2e-test-utils/README.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nasync function changeSiteTimezone(timezone) {\n    // logic to change timezone\n}\n```\n\n----------------------------------------\n\nTITLE: Static WordPress Image Block Markup Example\nDESCRIPTION: Example of a static WordPress Image block markup showing the HTML comment delimiters, JSON attributes, and HTML content structure. This represents how image blocks are stored in the database and templates.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/getting-started/fundamentals/markup-representation-block.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- wp:image {\"sizeSlug\":\"large\"} -->\n<figure class=\"wp-block-image size-large\">\n    <img src=\"source.jpg\" alt=\"\" />\n</figure>\n<!-- /wp:image -->\n```\n\n----------------------------------------\n\nTITLE: Implementing FocalPointPicker Component in React with WordPress Gutenberg\nDESCRIPTION: This code demonstrates how to implement the FocalPointPicker component in a React application. It shows state management for the focal point, rendering the component, and applying the resulting values to CSS styles for background positioning.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/focal-point-picker/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { FocalPointPicker } from '@wordpress/components';\n\nconst Example = () => {\n\tconst [ focalPoint, setFocalPoint ] = useState( {\n\t\tx: 0.5,\n\t\ty: 0.5,\n\t} );\n\n\tconst url = '/path/to/image';\n\n\t/* Example function to render the CSS styles based on Focal Point Picker value */\n\tconst style = {\n\t\tbackgroundImage: `url(${ url })`,\n\t\tbackgroundPosition: `${ focalPoint.x * 100 }% ${ focalPoint.y * 100 }%`,\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<FocalPointPicker\n\t\t\t  __nextHasNoMarginBottom\n\t\t\t\turl={ url }\n\t\t\t\tvalue={ focalPoint }\n\t\t\t\tonDragStart={ setFocalPoint }\n\t\t\t\tonDrag={ setFocalPoint }\n\t\t\t\tonChange={ setFocalPoint }\n\t\t\t/>\n\t\t\t<div style={ style } />\n\t\t</>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Default Custom Gradient in WordPress Gutenberg\nDESCRIPTION: This snippet shows how to set a default custom gradient for a block in WordPress Gutenberg using a CSS linear-gradient value.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-supports.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nattributes: {\n    style: {\n        type: 'object',\n        default: {\n            color: {\n                gradient: 'linear-gradient(135deg,rgb(170,187,204) 0%,rgb(17,34,51) 100%)',\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using LocalAutosaveMonitor in a React Component\nDESCRIPTION: This JavaScript snippet illustrates how to incorporate the `LocalAutosaveMonitor` component into a React component. The component is rendered within a layout, ensuring that local autosaving is active whenever the editor is displayed. This is a basic usage example.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/editor/src/components/local-autosave-monitor/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst MyLayout = () => (\n\t<main>\n\t\t<LocalAutosaveMonitor />\n\t\t<MyEditor />\n\t</main>\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Async Hook Functions in Gutenberg\nDESCRIPTION: Introduces `doActionAsync` and `applyFiltersAsync` to enable asynchronous execution of hooks within the Gutenberg environment.  This enhancement allows developers to leverage asynchronous operations when working with actions and filters. These functions allow hooking into asynchronous operations which are resolved through promises.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/hooks/CHANGELOG.md#2025-04-21_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Defining Featured Image Display - Gutenberg (Markdown)\nDESCRIPTION: This snippet defines a block for displaying a post's featured image with customizable attributes for alignment and interactivity.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/core-blocks.md#2025-04-21_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n- **Name:** core/post-featured-image\n- **Category:** theme\n- **Supports:** align (center, full, left, right, wide), color (~~background~~, ~~text~~), filter (duotone), interactivity (clientNavigation), shadow (), spacing (margin, padding), ~~html~~\n- **Attributes:** aspectRatio, customGradient, customOverlayColor, dimRatio, gradient, height, isLink, linkTarget, overlayColor, rel, scale, sizeSlug, useFirstImageFromPost, width\n```\n\n----------------------------------------\n\nTITLE: Initializing Locale Data - JavaScript i18n Implementation\nDESCRIPTION: Code changes introducing new methods for handling locale data in the i18n system, including addLocaleData for merging locale data by domain and resetLocaleData for resetting existing Tannin locale data.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/i18n/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\naddLocaleData() // Merges locale data into Tannin instance by domain\nresetLocaleData() // Resets the existing Tannin locale data\ngetLocaleData() // Gets the internal Tannin locale data object\nsubscribe() // Subscribes to changes in internal locale data\nhasTranslation() // Checks if translation exists for a string\n```\n\n----------------------------------------\n\nTITLE: Rendering LinkControlSearchInput with Custom Children\nDESCRIPTION: Example showing how to render LinkControlSearchInput with custom child elements including a submit button with HStack layout.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/src/components/link-control/README.md#2025-04-21_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<LinkControlSearchInput>\n\t<HStack justify=\"right\">\n\t\t<Button\n\t\t\ttype=\"submit\"\n\t\t\tlabel={ __( 'Submit' ) }\n\t\t\ticon={ keyboardReturn }\n\t\t\tclassName=\"block-editor-link-control__search-submit\"\n\t\t/>\n\t</HStack>\n</LinkControlSearchInput>\n```\n\n----------------------------------------\n\nTITLE: JavaScript Namespace Export\nDESCRIPTION: The code snippet demonstrates a namespace export in JavaScript, exporting all functions from a file named count. The count file contains functions addition and subtraction written with JSDoc comments.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/docgen/README.md#2025-04-21_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nexport * from './count';\n```\n\n----------------------------------------\n\nTITLE: Enqueuing Editor Content Assets with Conditional Check\nDESCRIPTION: Shows how to enqueue assets specifically for editor content using enqueue_block_assets hook with an is_admin() check to load assets only in the editor environment.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/enqueueing-assets-in-the-editor.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Enqueue content assets but only in the Editor.\n */\nfunction example_enqueue_editor_content_assets() {\n    if ( is_admin() ) {\n        wp_enqueue_script(\n            'example-editor-content-scripts',\n            plugins_url( 'content-scripts.js', __FILE__ )\n        );\n        wp_enqueue_style(\n            'example-editor-content-styles',\n            plugins_url( 'content-styles.css', __FILE__ )\n        );\n    }\n}\nadd_action( 'enqueue_block_assets', 'example_enqueue_editor_content_assets' );\n```\n\n----------------------------------------\n\nTITLE: Using useBlockDisplayInformation Hook in React Component\nDESCRIPTION: Demonstrates how to use the useBlockDisplayInformation hook to retrieve and display block information including title, icon, and description. The hook accepts a clientId prop and returns an object containing display information or null if no block type is found.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/src/components/use-block-display-information/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { BlockIcon, useBlockDisplayInformation } from '@wordpress/block-editor';\n\nfunction DemoBlockCard( { clientId } ) {\n\tconst blockInformation = useBlockDisplayInformation( clientId );\n\tconst { title, icon, description } = blockInformation;\n\treturn (\n\t\t<div>\n\t\t\t<BlockIcon icon={ icon } showColors />\n\t\t\t<h1>{ title }</h1>\n\t\t\t<p>{ description }</p>\n\t\t</div>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating PluginPostStatusInfo SlotFill Component in JavaScript\nDESCRIPTION: Defines a SlotFill component for the Summary panel using createSlotFill from WordPress components. Creates a reusable PluginPostStatusInfo component that wraps content in a PanelRow.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/slotfills/README.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Defines as extensibility slot for the Summary panel.\n */\n\n/**\n * WordPress dependencies\n */\nimport { createSlotFill, PanelRow } from '@wordpress/components';\n\nexport const { Fill, Slot } = createSlotFill( 'PluginPostStatusInfo' );\n\nconst PluginPostStatusInfo = ( { children, className } ) => (\n\t<Fill>\n\t\t<PanelRow className={ className }>{ children }</PanelRow>\n\t</Fill>\n);\n\nPluginPostStatusInfo.Slot = Slot;\n\nexport default PluginPostStatusInfo;\n```\n\n----------------------------------------\n\nTITLE: Basic Implementation of useInnerBlocksProps Hook in Gutenberg\nDESCRIPTION: Basic example showing how to implement the useInnerBlocksProps hook in both edit and save functions of a Gutenberg block. Demonstrates the fundamental usage pattern with separate block and inner blocks props.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/block-tutorial/nested-blocks-inner-blocks.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { registerBlockType } from '@wordpress/blocks';\nimport { useBlockProps, useInnerBlocksProps } from '@wordpress/block-editor';\n\nregisterBlockType( 'gutenberg-examples/example-06', {\n\t// ...\n\n\tedit: () => {\n\t\tconst blockProps = useBlockProps();\n\t\tconst innerBlocksProps = useInnerBlocksProps();\n\n\t\treturn (\n\t\t\t<div { ...blockProps }>\n\t\t\t\t<div {...innerBlocksProps} />\n\t\t\t</div>\n\t\t);\n\t},\n\n\tsave: () => {\n\t\tconst blockProps = useBlockProps.save();\n\t\tconst innerBlocksProps = useInnerBlocksProps.save();\n\n\t\treturn (\n\t\t\t<div { ...blockProps }>\n\t\t\t\t<div {...innerBlocksProps} />\n\t\t\t</div>\n\t\t);\n\t},\n} );\n```\n\n----------------------------------------\n\nTITLE: Using useDisabled Hook in Gutenberg\nDESCRIPTION: This snippet demonstrates how to use the `useDisabled` hook to disable all focusable elements within a given DOM element. This is useful for scenarios like block previews where user interaction needs to be restricted. It returns a ref to be attached to a DOM element and disables the elements inside it if isDisabled is true.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/compose/README.md#2025-04-21_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nimport { useDisabled } from '@wordpress/compose';\n\nconst DisabledExample = () => {\n\tconst disabledRef = useDisabled();\n\treturn (\n\t\t<div ref={ disabledRef }>\n\t\t\t<a href=\"#\">This link will have tabindex set to -1</a>\n\t\t\t<input\n\t\t\t\tplaceholder=\"This input will have the disabled attribute added to it.\"\n\t\t\t\ttype=\"text\"\n\t\t\t/>\n\t\t</div>\n\t);\n};\n\n```\n\n----------------------------------------\n\nTITLE: Rendering Block Patterns in WordPress Gutenberg (JSX)\nDESCRIPTION: This snippet demonstrates how to render a list of block patterns using the BlockPatternsList component. It imports the component from '@wordpress/block-editor' and renders it with necessary props like blockPatterns and onClickPattern. The component is used to present a UI interface for selecting block patterns in Gutenberg.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/src/components/block-patterns-list/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { BlockPatternsList } from '@wordpress/block-editor';\n\nconst MyBlockPatternsList = () => (\n\t<BlockPatternsList\n\t\tblockPatterns={ shownBlockPatterns }\n\t\tonClickPattern={ onSelectBlockPattern }\n\t/>\n);\n```\n\n----------------------------------------\n\nTITLE: Build Script Example with Entry Points (bash)\nDESCRIPTION: This bash command demonstrates how to use `wp-scripts build` to build JavaScript entry points. It specifies two entry points, `entry-one.js` and `entry-two.js`, which will be processed by webpack.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/scripts/README.md#2025-04-21_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nwp-scripts build entry-one.js entry-two.js\n```\n\n----------------------------------------\n\nTITLE: Displaying Error Messages in EditPageForm Component (JSX)\nDESCRIPTION: This snippet shows how to display error messages in the EditPageForm component using the getLastEntitySaveError selector.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/data-basics/3-building-an-edit-form.md#2025-04-21_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nfunction EditPageForm( { pageId, onSaveFinished } ) {\n\t// ...\n    const { lastError, page } = useSelect(\n        select => ({\n\t\t\tpage: select( coreDataStore ).getEditedEntityRecord( 'postType', 'page', pageId ),\n\t\t\tlastError: select( coreDataStore ).getLastEntitySaveError( 'postType', 'page', pageId )\n\t\t}),\n        [ pageId ]\n\t)\n\t// ...\n\treturn (\n\t\t<div className=\"my-gutenberg-form\">\n\t\t\t{/* ... */}\n\t\t\t{ lastError ? (\n\t\t\t\t<div className=\"form-error\">\n\t\t\t\t\tError: { lastError.message }\n\t\t\t\t</div>\n\t\t\t) : false }\n\t\t\t{/* ... */}\n\t\t</div>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Individual Notice\nDESCRIPTION: Demonstrates how to remove a specific notice by its ID using the removeNotice action.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core-notices.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { __ } from '@wordpress/i18n';\nimport { useDispatch } from '@wordpress/data';\nimport { store as noticesStore } from '@wordpress/notices';\nimport { Button } from '@wordpress/components';\n\nconst ExampleComponent = () => {\n\tconst notices = useSelect( ( select ) =>\n\t\tselect( noticesStore ).getNotices()\n\t);\n\tconst { createWarningNotice, removeNotice } = useDispatch( noticesStore );\n\n\treturn (\n\t\t<>\n\t\t\t<Button\n\t\t\t\tonClick={ () =>\n\t\t\t\t\tcreateWarningNotice( __( 'Warning!' ), {\n\t\t\t\t\t\tisDismissible: false,\n\t\t\t\t\t} )\n\t\t\t\t}\n\t\t\t>\n\t\t\t\t{ __( 'Generate a notice' ) }\n\t\t\t</Button>\n\t\t\t{ notices.length > 0 && (\n\t\t\t\t<Button onClick={ () => removeNotice( notices[ 0 ].id ) }>\n\t\t\t\t\t{ __( 'Remove the notice' ) }\n\t\t\t\t</Button>\n\t\t\t) }\n\t\t</>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Setting HTML Block as Fallback Handler in WordPress Gutenberg\nDESCRIPTION: Configures the HTML block as the fallback handler for unregistered block types and freeform content, ensuring proper rendering of unknown blocks or arbitrary HTML content.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/platform-docs/docs/basic-concepts/block-library.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n    setFreeformContentHandlerName,\n    setUnregisteredTypeHandlerName\n} from '@wordpress/blocks';\n\nsetFreeformContentHandlerName( 'core/html' );\nsetUnregisteredTypeHandlerName( 'core/html' );\n```\n\n----------------------------------------\n\nTITLE: Updatable Type Example\nDESCRIPTION: This TypeScript code demonstrates how the `Updatable` type transforms fields. Initially, `post.title` is an object with `raw` and `rendered` properties. After applying the `Updatable` type, `updatablePost.title` becomes a string. This transformation reflects the change in data structure when editing entities, where the entire field becomes a string representing the raw markup.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/core-data/src/entity-types/README.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ntype Post< C extends Context > {\n  title: RenderedText< C >;\n}\nconst post = {} as Post;\n// post.title is an object with raw and rendered properties\n\nconst updatablePost = {} as Updatable< Post >;\n// updatablePost.title is a string\n```\n\n----------------------------------------\n\nTITLE: Importing WordPress Components in JavaScript\nDESCRIPTION: Example of importing WordPress components when using npm packages. This shows how to import the PlainText component from the @wordpress/block-editor package after installation.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/packages.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { PlainText } from '@wordpress/block-editor';\n```\n\n----------------------------------------\n\nTITLE: Using wp_style_engine_get_styles Function in PHP\nDESCRIPTION: This PHP snippet demonstrates how to use the wp_style_engine_get_styles function to generate CSS and declarations from a block styles array.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/style-engine/docs/using-the-style-engine-with-block-supports.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$block_styles =  array(\n\t'spacing' => array( 'padding' => '10px', 'margin' => array( 'top' => '1em') ),\n\t'typography' => array( 'fontSize' => '2.2rem' ),\n);\n$styles = wp_style_engine_get_styles(\n\t$block_styles\n);\nprint_r( $styles );\n\n/*\narray(\n    'css'          => 'padding:10px;margin-top:1em;font-size:2.2rem',\n    'declarations' => array( 'padding' => '10px', 'margin-top' => '1em', 'font-size' => '2.2rem' )\n)\n*/\n```\n\n----------------------------------------\n\nTITLE: Final Output in render.php - PHP\nDESCRIPTION: This snippet defines how the final HTML output of the block is rendered in PHP, printing the copyright symbol followed by the formatted display date. It includes the use of WordPress functions for safe output and block attributes.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/getting-started/tutorial.md#2025-04-21_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$current_year = date( \"Y\" );\n\nif ( ! empty( $attributes['startingYear'] ) && ! empty( $attributes['showStartingYear'] ) ) {\n\t$display_date = $attributes['startingYear'] . '–' . $current_year;\n} else {\n\t$display_date = $current_year;\n}\n?>\n<p <?php echo get_block_wrapper_attributes(); ?>>\n    © <?php echo esc_html( $display_date ); ?>\n</p>\n```\n\n----------------------------------------\n\nTITLE: Destroying the wp-env Environment - Shell\nDESCRIPTION: This command removes all containers, volumes, and files associated with wp-env, allowing for a fresh start.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/env/README.md#2025-04-21_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\n$ wp-env destroy\n$ wp-env start\n```\n\n----------------------------------------\n\nTITLE: Converting Theme.json Settings to CSS Custom Properties\nDESCRIPTION: Demonstrates how color palette settings in theme.json are converted to CSS custom properties and utility classes. Shows both global and block-specific color definitions.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/explanations/architecture/styles.md#2025-04-21_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"settings\": {\n\t\t\"color\": {\n\t\t\t\"palette\": {\n\t\t\t\t\"default\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"slug\": \"vivid-red\",\n\t\t\t\t\t\t\"value\": \"#cf2e2e\",\n\t\t\t\t\t\t\"name\": \"Vivid Red\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"theme\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"slug\": \"foreground\",\n\t\t\t\t\t\t\"value\": \"#000\",\n\t\t\t\t\t\t\"name\": \"Foreground\"\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t},\n\t\t\"blocks\": {\n\t\t\t\"core/site-title\": {\n\t\t\t\t\"color\": {\n\t\t\t\t\t\"palette\": {\n\t\t\t\t\t\t\"theme\": [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"slug\": \"foreground\",\n\t\t\t\t\t\t\t\t\"value\": \"#1a4548\",\n\t\t\t\t\t\t\t\t\"name\": \"Foreground\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\nLANGUAGE: css\nCODE:\n```\nbody {\n  --wp--preset--color--vivid-red: #cf2e2e;\n  --wp--preset--color--foreground: #000;\n}\n\n.wp-block-site-title {\n  --wp--preset--color--foreground: #1a4548;\n}\n```\n\nLANGUAGE: css\nCODE:\n```\n/* vivid-red */\n.has-vivid-red-color { color: var(--wp--preset--color--vivid-red) !important; }\n.has-vivid-red-background-color { background-color: var(--wp--preset--color--vivid-red) !important; }\n.has-vivid-red-border-color { border-color: var(--wp--preset--color--vivid-red) !important; }\n\n/* foreground */\n.has-foreground-color { color: var(--wp--preset--color--foreground) !important; }\n.has-foreground-background-color { background-color: var(--wp--preset--color--foreground) !important; }\n.has-foreground-border-color { border-color: var(--wp--preset--color--foreground) !important; }\n\n/* foreground within site title*/\n.wp-block-site-title .has-foreground-color { color: var(--wp--preset--color--foreground) !important; }\n.wp-block-site-title .has-foreground-background-color { background-color: var(--wp--preset--color--foreground) !important; }\n.wp-block-site-title .has-foreground-border-color { border-color: var(--wp--preset--color--foreground) !important; }\n```\n\n----------------------------------------\n\nTITLE: Configuring webpack to use ReadableJsAssetsWebpackPlugin\nDESCRIPTION: This snippet demonstrates how to include and configure the ReadableJsAssetsWebpackPlugin in a webpack configuration file. It imports the plugin and adds it to the plugins array in the webpack configuration object.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/readable-js-assets-webpack-plugin/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// webpack.config.js\nconst ReadableJsAssetsWebpackPlugin = require( '@wordpress/readable-js-assets-webpack-plugin' );\n\nmodule.exports = {\n\t// …snip\n\tplugins: [ new ReadableJsAssetsWebpackPlugin() ],\n};\n```\n\n----------------------------------------\n\nTITLE: Starting WordPress Environment with wp-env\nDESCRIPTION: Command to start a local WordPress environment using the wp-env package which creates a Docker container with WordPress and the Gutenberg plugin mounted as a volume.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/getting-started-with-code-contribution.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run wp-env start\n```\n\n----------------------------------------\n\nTITLE: PHP Dynamic Block Render Callback Implementation\nDESCRIPTION: Shows how to use get_block_wrapper_attributes() to apply block support properties in PHP dynamic blocks.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-supports.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nfunction render_block() {\n\t$wrapper_attributes = get_block_wrapper_attributes();\n\n\treturn sprintf(\n\t\t'<div %1$s>%2$s</div>',\n\t\t$wrapper_attributes,\n\t\t'Hello World!'\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Enqueuing Editor Assets using enqueue_block_editor_assets Hook\nDESCRIPTION: Demonstrates how to enqueue scripts and styles specifically for the Editor interface using wp_enqueue_script and wp_enqueue_style functions within the enqueue_block_editor_assets hook.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/enqueueing-assets-in-the-editor.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Enqueue Editor assets.\n */\nfunction example_enqueue_editor_assets() {\n    wp_enqueue_script(\n        'example-editor-scripts',\n        plugins_url( 'editor-scripts.js', __FILE__ )\n    );\n    wp_enqueue_style(\n        'example-editor-styles',\n        plugins_url( 'editor-styles.css', __FILE__ )\n    );\n}\nadd_action( 'enqueue_block_editor_assets', 'example_enqueue_editor_assets' );\n```\n\n----------------------------------------\n\nTITLE: Setting up Integration Tests for Block UI in React\nDESCRIPTION: Example showing how to set up integration tests for block UI components using a special instance of the block editor.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/testing-overview.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { initializeEditor } from 'test/integration/helpers/integration-test-editor';\n\nasync function setup( attributes ) {\n\tconst testBlock = { name: 'core/cover', attributes };\n\treturn initializeEditor( testBlock );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Lock Structure Definition in JavaScript\nDESCRIPTION: Defines the fundamental tree-based lock structure with locks and children properties, allowing hierarchical concurrency control\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/core-data/src/locks/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n{\n\t\"locks\": [],\n\t\"children\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Marking Meta Box as Incompatible with Block Editor in PHP\nDESCRIPTION: This PHP code shows how to mark a meta box as incompatible with the block editor, causing WordPress to display a message instead of the meta box.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/metabox.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nadd_meta_box( 'my-meta-box', 'My Meta Box', 'my_meta_box_callback',\n\tnull, 'normal', 'high',\n\tarray(\n\t\t'__block_editor_compatible_meta_box' => false,\n\t)\n);\n```\n\n----------------------------------------\n\nTITLE: Enabling Dimension Support in WordPress Gutenberg\nDESCRIPTION: This snippet shows how to enable support for aspect ratio and minimum height controls for a block in WordPress Gutenberg.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-supports.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nsupports: {\n\tdimensions: {\n\t\taspectRatio: true // Enable aspect ratio control.\n\t\tminHeight: true // Enable min height control.\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: DataForm onChange Handler Example\nDESCRIPTION: Example demonstrating implementation of the onChange handler for DataForm.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/dataviews/README.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = {\n\tid: 1,\n\ttitle: 'Title',\n\tauthor: 'Admin',\n\tdate: '2012-04-23T18:25:43.511Z',\n};\n\nconst onChange = ( edits ) => {\n\t/*\n\t * edits will contain user edits.\n\t * For example, if the user edited the title\n\t * edits will be:\n\t *\n\t * {\n\t *   title: 'New title'\n\t * }\n\t *\n\t */\n};\n\nreturn (\n\t<DataForm\n\t\tdata={ data }\n\t\tfields={ fields }\n\t\tform={ form }\n\t\tonChange={ onChange }\n\t/>\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Default Duotone Colors for Gutenberg Block (JavaScript)\nDESCRIPTION: This snippet sets up a default duotone color for the block by extending the attributes definition to include a `style` property that contains a default duotone color setting.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-supports.md#2025-04-21_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nattributes: {\n    style: {\n        type: 'object',\n        default: {\n            color: {\n                duotone: [\n                    '#FFF',\n                    '#000'\n                ]\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Element Styles in Gutenberg\nDESCRIPTION: This JSON snippet demonstrates how to apply element styles globally and within specific blocks using `theme.json`. It sets a default font size for the body, then overrides the font sizes for h1, h2, and h3 elements globally. It further overrides h2 and h3 font sizes specifically within the `core/group` block. This allows for fine-grained control over element styling across the site.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/themes/global-settings-and-styles.md#2025-04-21_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"version\": 3,\n\t\"styles\": {\n\t\t\"typography\": {\n\t\t\t\"fontSize\": \"var(--wp--preset--font-size--normal)\"\n\t\t},\n\t\t\"elements\": {\n\t\t\t\"h1\": {\n\t\t\t\t\"typography\": {\n\t\t\t\t\t\"fontSize\": \"var(--wp--preset--font-size--huge)\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"h2\": {\n\t\t\t\t\"typography\": {\n\t\t\t\t\t\"fontSize\": \"var(--wp--preset--font-size--big)\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"h3\": {\n\t\t\t\t\"typography\": {\n\t\t\t\t\t\"fontSize\": \"var(--wp--preset--font-size--medium)\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"blocks\": {\n\t\t\t\"core/group\": {\n\t\t\t\t\"elements\": {\n\t\t\t\t\t\"h2\": {\n\t\t\t\t\t\t\"typography\": {\n\t\t\t\t\t\t\t\"fontSize\": \"var(--wp--preset--font-size--small)\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t\"h3\": {\n\t\t\t\t\t\t\"typography\": {\n\t\t\t\t\t\t\t\"fontSize\": \"var(--wp--preset--font-size--smaller)\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\nLANGUAGE: css\nCODE:\n```\nbody {\n\tfont-size: var( --wp--preset--font-size--normal );\n}\nh1 {\n\tfont-size: var( --wp--preset--font-size--huge );\n}\nh2 {\n\tfont-size: var( --wp--preset--font-size--big );\n}\nh3 {\n\tfont-size: var( --wp--preset--font-size--medium );\n}\n.wp-block-group h2 {\n\tfont-size: var( --wp--preset--font-size--small );\n}\n.wp-block-group h3 {\n\tfont-size: var( --wp--preset--font-size--smaller );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Paragraph as Default Block in WordPress Gutenberg\nDESCRIPTION: Configures the paragraph block as the default block type that's selected when users start typing, hit Enter, or click the \"Add block\" button.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/platform-docs/docs/basic-concepts/block-library.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { setDefaultBlockName } from '@wordpress/blocks';\n\nsetDefaultBlockName( 'core/paragraph' );\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Class to Paragraph Blocks with render_block Filter in PHP\nDESCRIPTION: This example uses the render_block filter to add a custom class 'example-class' to all Paragraph blocks on the front end using the HTML API.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/filters/block-filters.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nfunction example_add_custom_class_to_paragraph_block( $block_content, $block ) {\n\t\n\t// Check if the block is a Paragraph block.\n\tif ( 'core/paragraph' === $block['blockName'] ) {\n\t   \n\t\t// Add the custom class to the block content using the HTML API.\n\t\t$processor = new WP_HTML_Tag_Processor( $block_content );\n\t\t\n\t\tif ( $processor->next_tag( 'p' ) ) {\n\t\t\t$processor->add_class( 'example-class' );\n\t\t}\n\n\t\treturn $processor->get_updated_html();\n\t}\n\n\treturn $block_content;\n}\nadd_filter( 'render_block', 'example_add_custom_class_to_paragraph_block', 10, 2 );\n```\n\n----------------------------------------\n\nTITLE: WordPress Data Store Query Function\nDESCRIPTION: Function to query WordPress data stores through Puppeteer. Handles data serialization limitations when accessing store data. Takes store name, selector, and optional parameters.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/e2e-test-utils/README.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nwpDataSelect( store, selector, ...parameters )\n```\n\n----------------------------------------\n\nTITLE: Defining Comments Form - Gutenberg (Markdown)\nDESCRIPTION: This snippet defines the block that displays a post's comments form. It supports various color and typography attributes, allowing customization of its appearance.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/core-blocks.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- **Name:** core/post-comments-form\n- **Category:** theme\n- **Supports:** color (background, gradients, heading, link, text), spacing (margin, padding), typography (fontSize, lineHeight), ~~html~~\n- **Attributes:** textAlign\n```\n\n----------------------------------------\n\nTITLE: Extracting Strings Using NPM Command in Gutenberg React Native\nDESCRIPTION: Shell command to extract all strings used in the React Native version of the editor and save them to a JSON file. The absolute path parameter is required to ensure correct file locations.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/react-native/internationalization-guide.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm run native i18n:extract-used-strings -- \"$PWD/used-strings.json\"\n```\n\n----------------------------------------\n\nTITLE: Getting Current Post Type Example\nDESCRIPTION: Demonstrates how to retrieve the post type of the currently edited post using the WordPress data API selector.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core-editor.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst currentPostType = wp.data.select( 'core/editor' ).getCurrentPostType();\n```\n\n----------------------------------------\n\nTITLE: Registering a Block Collection in Gutenberg (JS)\nDESCRIPTION: This code snippet demonstrates how to register a block collection using the `registerBlockCollection` function. It takes a namespace and settings object as parameters, including a title for the collection.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-registration.md#2025-04-21_snippet_14\n\nLANGUAGE: js\nCODE:\n```\n// Registering a block collection\nregisterBlockCollection( 'my-plugin', { title: 'My Plugin' } );\n```\n\n----------------------------------------\n\nTITLE: Checking for Unsaved Content Changes in JavaScript\nDESCRIPTION: This function determines if the content includes unsaved changes by examining the editor state.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core-editor.md#2025-04-21_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nhasChangedContent( state ) {\n    // Implementation not shown\n    return true; // Whether content includes unsaved changes\n}\n```\n\n----------------------------------------\n\nTITLE: BlockSettingsMenu Refactoring\nDESCRIPTION: The `BlockSettingsMenu` was refactored to use `DropdownMenu` from `@wordpress/components`. This internal change likely improves the maintainability and consistency of the block settings menu.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/CHANGELOG.md#2025-04-21_snippet_15\n\n\n\n----------------------------------------\n\nTITLE: Checking for Child Blocks using hasChildBlocks\nDESCRIPTION: This example shows how to check if a block type has child blocks using the `hasChildBlocks` selector. It retrieves the result for 'core/navigation' and displays the result in a paragraph.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core-blocks.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport { __, sprintf } from '@wordpress/i18n';\nimport { store as blocksStore } from '@wordpress/blocks';\nimport { useSelect } from '@wordpress/data';\n\nconst ExampleComponent = () => {\n\tconst navigationBlockHasChildBlocks = useSelect(\n\t\t( select ) => select( blocksStore ).hasChildBlocks( 'core/navigation' ),\n\t\t[]\n\t);\n\n\treturn (\n\t\t<p>\n\t\t\t{ sprintf(\n\t\t\t\t__( 'core/navigation has child blocks: %s' ),\n\t\t\t\tnavigationBlockHasChildBlocks\n\t\t\t) }\n\t\t</p>\n\t);\n};\n\n```\n\n----------------------------------------\n\nTITLE: Setting Default Text Color Preset in WordPress Gutenberg\nDESCRIPTION: This snippet demonstrates how to set a default text color preset for a block in WordPress Gutenberg using a preset slug.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-supports.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nattributes: {\n    textColor: {\n        type: 'string',\n        default: 'some-preset-text-color-slug',\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Destructuring the Store Object in JavaScript\nDESCRIPTION: A more concise way to access the global state by destructuring the object returned by the store function, providing direct access to the state property without referencing the parent object.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/core-concepts/undestanding-global-state-local-context-and-derived-state.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst { state } = store( 'myPlugin' );\n```\n\n----------------------------------------\n\nTITLE: Initializing Client-Side State with Interactivity API\nDESCRIPTION: JavaScript code that defines additional global state on the client side using the store function. This example adds an isLoading state property and a loadSomething generator action.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/core-concepts/undestanding-global-state-local-context-and-derived-state.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { state } = store( 'myPlugin', {\n\tstate: {\n\t\tisLoading: false,\n\t},\n\tactions: {\n\t\t*loadSomething() {\n\t\t\tstate.isLoading = true;\n\t\t\t// ...\n\t\t},\n\t},\n} );\n```\n\n----------------------------------------\n\nTITLE: MediaUpload Interface Update\nDESCRIPTION: Added the `addToGallery` property to the `MediaUpload` interface. The property allows users to open the media modal in the `gallery-library` instead of `gallery-edit` state.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/CHANGELOG.md#2025-04-21_snippet_16\n\n\n\n----------------------------------------\n\nTITLE: Restricting Code Editor Access in PHP\nDESCRIPTION: Shows how to use the 'block_editor_settings_all' filter to disable the code editor for non-administrator users.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/filters/editor-filters.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nadd_filter( 'block_editor_settings_all', 'example_restrict_code_editor' );\n\nfunction example_restrict_code_editor( $settings ) {\n\t$can_active_plugins = current_user_can( 'activate_plugins' );\n\n\t// Disable the Code Editor for users that cannot activate plugins (Administrators).\n\tif ( ! $can_active_plugins ) {\n\t\t$settings[ 'codeEditingEnabled' ] = false;\n\t}\n\n\treturn $settings;\n}\n```\n\n----------------------------------------\n\nTITLE: RichText Component Format Changes\nDESCRIPTION: Example of RichText component format changes, showing removal of explicit element format in favor of children format.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/deprecations.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Removed format\n<RichText element=\"div\" />\n\n// New format\n<RichText>{children}</RichText>\n```\n\n----------------------------------------\n\nTITLE: RichText allowedFormats Prop Addition\nDESCRIPTION: A new `allowedFormats` prop was added to `RichText` to fine-tune allowed formats. The `formattingControls` prop was deprecated in favor of this. Also added a `withoutInteractiveFormatting` to specifically disable format types that would insert interactive elements, which can not be nested.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/CHANGELOG.md#2025-04-21_snippet_13\n\n\n\n----------------------------------------\n\nTITLE: Removing WordPress Editor Panels with removeEditorPanel Function\nDESCRIPTION: This example demonstrates how to permanently remove editor panels from the WordPress admin interface using the removeEditorPanel function. It shows how to remove both a core panel (featured-image) and a custom panel that was registered through the PluginDocumentSettingPanel component.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/slotfills/plugin-document-setting-panel.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useDispatch } from '@wordpress/data';\nimport { store as editorStore } from '@wordpress/editor';\n\nconst Example = () => {\n\tconst { removeEditorPanel } = useDispatch( editorStore );\n\treturn (\n\t\t<Button\n\t\t\tvariant=\"primary\"\n\t\t\tonClick={ () => {\n\t\t\t\t// Remove the Featured Image panel.\n\t\t\t\tremoveEditorPanel( 'featured-image' );\n\n\t\t\t\t// Remove the Custom Panel introduced in the example above.\n\t\t\t\tremoveEditorPanel(\n\t\t\t\t\t'plugin-document-setting-panel-demo/custom-panel'\n\t\t\t\t);\n\t\t\t} }\n\t\t>\n\t\t\tToggle Panels\n\t\t</Button>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing PluginPrePublishPanel in WordPress Gutenberg\nDESCRIPTION: This code snippet demonstrates how to use the PluginPrePublishPanel component to add custom content to the pre-publish panel in WordPress Gutenberg. It imports necessary functions from WordPress packages, creates a custom component, and registers it as a plugin.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/slotfills/plugin-pre-publish-panel.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { registerPlugin } from '@wordpress/plugins';\nimport { PluginPrePublishPanel } from '@wordpress/editor';\n\nconst PluginPrePublishPanelTest = () => (\n\t<PluginPrePublishPanel>\n\t\t<p>Pre Publish Panel</p>\n\t</PluginPrePublishPanel>\n);\n\nregisterPlugin( 'pre-publish-panel-test', {\n\trender: PluginPrePublishPanelTest,\n} );\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Data Store in WordPress\nDESCRIPTION: This JavaScript snippet shows how to create a custom data store in WordPress using the @wordpress/data module. It includes defining selectors and actions and setting up a subscription mechanism to notify of state changes.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/data/README.md#2025-04-21_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { register } from '@wordpress/data';\n\nfunction customStore() {\n\treturn {\n\t\tname: 'custom-data',\n\t\tinstantiate: () => {\n\t\t\tconst listeners = new Set();\n\t\t\tconst prices = { hammer: 7.5 };\n\n\t\t\tfunction storeChanged() {\n\t\t\t\tfor ( const listener of listeners ) {\n\t\t\t\t\tlistener();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction subscribe( listener ) {\n\t\t\t\tlisteners.add( listener );\n\t\t\t\treturn () => listeners.delete( listener );\n\t\t\t}\n\n\t\t\tconst selectors = {\n\t\t\t\tgetPrice( itemName ) {\n\t\t\t\t\treturn prices[ itemName ];\n\t\t\t\t},\n\t\t\t};\n\n\t\t\tconst actions = {\n\t\t\t\tsetPrice( itemName, price ) {\n\t\t\t\t\tprices[ itemName ] = price;\n\t\t\t\t\tstoreChanged();\n\t\t\t\t},\n\t\t\t};\n\n\t\t\treturn {\n\t\t\t\tgetSelectors: () => selectors,\n\t\t\t\tgetActions: () => actions,\n\t\t\t\tsubscribe,\n\t\t\t};\n\t\t},\n\t};\n}\n\nregister( customStore );\n```\n\n----------------------------------------\n\nTITLE: Mocking Platform for iOS-specific Testing in React Native\nDESCRIPTION: This snippet demonstrates how to mock the Platform module to simulate an iOS environment for platform-specific testing in React Native. It overrides the OS and select method of the Platform object.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/react-native/integration-test-guide.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\njest.mock( 'Platform', () => {\n\tconst Platform = jest.requireActual( 'Platform' );\n\tPlatform.OS = 'ios';\n\tPlatform.select = jest.fn().mockImplementation( ( select ) => {\n\t\tconst value = select[ Platform.OS ];\n\t\treturn ! value ? select.default : value;\n\t} );\n\treturn Platform;\n} );\n```\n\n----------------------------------------\n\nTITLE: Registering the Paragraph Block in WordPress Gutenberg\nDESCRIPTION: Registers the paragraph block by importing its initialization module and associated stylesheets. The paragraph block is fundamental for text entry in the block editor.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/platform-docs/docs/basic-concepts/block-library.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport '@wordpress/block-library/build-module/paragraph/init';\nimport '@wordpress/block-library/build-style/paragraph/style.css';\nimport '@wordpress/block-library/build-style/paragraph/editor.css';\n```\n\n----------------------------------------\n\nTITLE: Retrieving Selected Block Data in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the WordPress data store to get information about the currently selected block in the editor. It includes a function to log the block name and attributes when the selection changes.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core-block-editor.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { select } from '@wordpress/data';\nimport { store as blockEditorStore } from '@wordpress/block-editor';\n\n// Set initial active block client ID\nlet activeBlockClientId = null;\n\nconst getActiveBlockData = () => {\n\tconst activeBlock = select( blockEditorStore ).getSelectedBlock();\n\n\tif ( activeBlock && activeBlock.clientId !== activeBlockClientId ) {\n\t\tactiveBlockClientId = activeBlock.clientId;\n\n\t\t// Get active block name and attributes\n\t\tconst activeBlockName = activeBlock.name;\n\t\tconst activeBlockAttributes = activeBlock.attributes;\n\n\t\t// Log active block name and attributes\n\t\tconsole.log( activeBlockName, activeBlockAttributes );\n\t}\n};\n\n// Subscribe to changes in the editor\n// wp.data.subscribe(() => {\n// getActiveBlockData()\n// })\n\n// Update active block data on click\n// onclick=\"getActiveBlockData()\"\n```\n\n----------------------------------------\n\nTITLE: Unregistering a block type\nDESCRIPTION: This JavaScript snippet demonstrates how to unregister a block type using the `unregisterBlockType` function from `@wordpress/blocks`. It removes the `core/verse` block from the editor.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/filters/block-filters.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n// my-plugin.js\nimport { unregisterBlockType } from '@wordpress/blocks';\nimport domReady from '@wordpress/dom-ready';\n\ndomReady( function () {\n\tunregisterBlockType( 'core/verse' );\n} );\n\n```\n\n----------------------------------------\n\nTITLE: Example HTML Output with Additional Block Supports\nDESCRIPTION: This HTML snippet shows how additional classes are automatically added to the block wrapper when block supports are enabled, such as text and background color classes for the Paragraph block.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/getting-started/fundamentals/block-wrapper.md#2025-04-21_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<p class=\"\n    wp-block-block-development-examples-block-supports-6aa4dd\n    has-accent-4-color\n    has-contrast-background-color\n    has-text-color\n    has-background\n\">Hello World</p>\n```\n\n----------------------------------------\n\nTITLE: Installing E2E Test Utilities - JavaScript\nDESCRIPTION: Installs the E2E test utilities needed for WordPress development. This command requires npm and is essential for setting up E2E testing in WordPress projects using the Gutenberg package.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/e2e-test-utils/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @wordpress/e2e-test-utils --save-dev\n```\n\n----------------------------------------\n\nTITLE: Using useMergeRefs Hook in Gutenberg\nDESCRIPTION: This example shows how to use the `useMergeRefs` hook to merge multiple refs into a single ref callback. It supports regular refs and effect-like ref callbacks (useRefEffect). The merged ref callback is only called when the dependencies change or the ref value changes, mimicking React's behavior.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/compose/README.md#2025-04-21_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nconst ref = useRefEffect( ( node ) => {\n  node.addEventListener( ... );\n  return () => {\n    node.removeEventListener( ... );\n  };\n}, [ ...dependencies ] );\nconst otherRef = useRef();\nconst mergedRefs useMergeRefs( [\n  enabled && ref,\n  otherRef,\n] );\nreturn <div ref={ mergedRefs } />;\n\n```\n\n----------------------------------------\n\nTITLE: Fetching User Query Results - JavaScript\nDESCRIPTION: This function retrieves all users matching a specified query ID from the application state. It returns a list of users or an empty array if none match.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n// getUserQueryResults\n\nfunction getUserQueryResults( state, queryID ) {\n    // Implementation here\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Usage of withDispatch with Registry\nDESCRIPTION: Shows an advanced use case of withDispatch where the registry object is used to optimize performance by avoiding unnecessary re-renders.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/data/README.md#2025-04-21_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Button( { onClick, children } ) {\n\treturn (\n\t\t<button type=\"button\" onClick={ onClick }>\n\t\t\t{ children }\n\t\t</button>\n\t);\n}\n\nimport { withDispatch } from '@wordpress/data';\nimport { store as myCustomStore } from 'my-custom-store';\n\nconst SaleButton = withDispatch( ( dispatch, ownProps, { select } ) => {\n\t// Stock number changes frequently.\n\tconst { getStockNumber } = select( myCustomStore );\n\tconst { startSale } = dispatch( myCustomStore );\n\treturn {\n\t\tonClick() {\n\t\t\tconst discountPercent = getStockNumber() > 50 ? 10 : 20;\n\t\t\tstartSale( discountPercent );\n\t\t},\n\t};\n} )( Button );\n\n// Rendered in the application:\n//\n//  <SaleButton>Start Sale!</SaleButton>\n```\n\n----------------------------------------\n\nTITLE: Accessing Attributes in Save Function\nDESCRIPTION: Demonstrates how to access and use block attributes within the save function of a Gutenberg block.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-edit-save.md#2025-04-21_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nsave: ( { attributes } ) => {\n\tconst blockProps = useBlockProps.save();\n\n\treturn <div { ...blockProps }>{ attributes.content }</div>;\n};\n```\n\n----------------------------------------\n\nTITLE: Final Save Function with Null Handling\nDESCRIPTION: The complete save function that handles the case when fallbackCurrentYear is not set by returning null. This ensures no incomplete HTML is saved to the database.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/getting-started/tutorial.md#2025-04-21_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function save( { attributes } ) {\n\tconst { fallbackCurrentYear, showStartingYear, startingYear } = attributes;\n\n\tif ( ! fallbackCurrentYear ) {\n\t\treturn null;\n\t}\n\n\tlet displayDate;\n\n\tif ( showStartingYear && startingYear ) {\n\t\tdisplayDate = startingYear + '–' + fallbackCurrentYear;\n\t} else {\n\t\tdisplayDate = fallbackCurrentYear;\n\t}\n\n\treturn (\n\t\t<p { ...useBlockProps.save() }>© { displayDate }</p>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Checking If Entity Record Is Deleting - JavaScript\nDESCRIPTION: This function checks if the specified entity record is in the process of being deleted. It returns a boolean result based on parameters such as state, kind, name, and record ID.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core.md#2025-04-21_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\n// isDeletingEntityRecord\n\nfunction isDeletingEntityRecord( state, kind, name, recordId ) {\n    // Implementation here\n}\n```\n\n----------------------------------------\n\nTITLE: Extending ESLint Configuration for ESNext Rules\nDESCRIPTION: This JSON snippet extends the ESLint configuration to include only the ESNext rules from the WordPress ESLint plugin, suitable for projects that do not use React.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/eslint-plugin/README.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"extends\": [ \"plugin:@wordpress/eslint-plugin/esnext\" ]\n}\n```\n\n----------------------------------------\n\nTITLE: Updated HTML After Client-Side Interaction\nDESCRIPTION: The HTML output after the user clicks the \"Add Mango\" button, showing the newly added fruit in the list.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/core-concepts/server-side-rendering.md#2025-04-21_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<ul>\n\t<li>Apple</li>\n\t<li>Banana</li>\n\t<li>Cherry</li>\n\t<li>Mango</li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Customizing Main Dashboard Button Icon and Link in WordPress Gutenberg\nDESCRIPTION: This code snippet shows how to change both the icon and the link of the main dashboard button. It replaces the default icon with an external link icon and sets the href to 'https://wordpress.org'. It uses the MainDashboardButton and FullscreenModeClose components from WordPress.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/slotfills/main-dashboard-button.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { registerPlugin } from '@wordpress/plugins';\nimport {\n\t__experimentalFullscreenModeClose as FullscreenModeClose,\n\t__experimentalMainDashboardButton as MainDashboardButton,\n} from '@wordpress/edit-post';\nimport { external } from '@wordpress/icons';\n\nconst MainDashboardButtonIconTest = () => (\n\t<MainDashboardButton>\n\t\t<FullscreenModeClose icon={ external } href=\"https://wordpress.org\" />\n\t</MainDashboardButton>\n);\n\nregisterPlugin( 'main-dashboard-button-icon-test', {\n\trender: MainDashboardButtonIconTest,\n} );\n```\n\n----------------------------------------\n\nTITLE: Stopping the Local Environment - Shell\nDESCRIPTION: This command stops the currently running wp-env local environment.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/env/README.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n$ wp-env stop\n```\n\n----------------------------------------\n\nTITLE: Receiving Default Template ID - JavaScript\nDESCRIPTION: Sets the default template ID based on a lookup query. This action returns an object containing the template ID for use in further operations.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core.md#2025-04-21_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nreceiveDefaultTemplateId(query, templateId) {\n  // Returns an action object used to set the template for a given query.\n  // Parameters:\n  // - query: The lookup query.\n  // - templateId: The resolved template id.\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Widget REST API Visibility in PHP\nDESCRIPTION: This PHP code demonstrates how to configure a widget to allow its instance data to be visible in the REST API, which is necessary for block migration.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/widgets/legacy-widget-block.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nclass ExampleWidget extends WP_Widget {\n\t...\n\t/**\n\t * Sets up the widget\n\t */\n\tpublic function __construct() {\n\t\t$widget_ops = array(\n\t\t\t// ...other options here\n\t\t\t'show_instance_in_rest' => true,\n\t\t\t// ...other options here\n\t\t);\n\t\tparent::__construct( 'example_widget', 'ExampleWidget', $widget_ops );\n\t}\n\t...\n}\n```\n\n----------------------------------------\n\nTITLE: Redo Last Edit - JavaScript\nDESCRIPTION: Triggers a redo of the last edit made to an entity record, restoring the previously undone changes. No parameters are required.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core.md#2025-04-21_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\nredo() {\n  // Action triggered to redo the last undone edit to an entity record, if any.\n}\n```\n\n----------------------------------------\n\nTITLE: Constructing Meta Box Save URL in WordPress\nDESCRIPTION: This code snippet shows an example of how the save URL for meta boxes is constructed in WordPress.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/metabox.md#2025-04-21_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nexample.org/wp-admin/post.php?post=1&action=edit&meta-box-loader=1\n```\n\n----------------------------------------\n\nTITLE: Disabling Text Color Support in WordPress Gutenberg\nDESCRIPTION: This snippet shows how to disable text color support while keeping other color supports enabled for a block in WordPress Gutenberg.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-supports.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nsupports: {\n\tcolor: {\n\t\t// Disable text color support.\n\t\ttext: false\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: BlockPopover Component Props\nDESCRIPTION: Describes the props for the BlockPopover component.  It utilizes `clientId` to position the popover relative to a specific block, and optionally `bottomClientId` for further positioning. The `shift` prop (defaulting to true) controls whether the popover dynamically adjusts to remain within the viewport.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/src/components/block-popover/README.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n/**\n * Props\n */\n\n// clientId\n// The client ID of the block representing the top position of the popover.\n// Type: `String`\n// Required: Yes\n\n// bottomClientId\n// The client ID of the block representing the bottom position of the popover.\n// Type: `String`\n// Required: No\n\n// shift\n// This determines whether the block popover always shifts into the viewport or remains at its original position. See FloatingUI for more details on shift.\n// Type: `Boolean`\n// Required: No\n// Default: `true`\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping Sync Provider in JavaScript\nDESCRIPTION: This snippet shows how to bootstrap the sync provider in the Gutenberg editor. It's called when fetching an entity record and sets up the callback for dispatching Redux actions on changes.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/sync/CODE.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ngetSyncProvider().bootstrap( ... )\n```\n\n----------------------------------------\n\nTITLE: Importing WordPress Editor State Selectors\nDESCRIPTION: Collection of selector functions for retrieving editor UI state from the core/edit-post namespace. Includes functions for checking meta box status, sidebar state, panel visibility, and other UI elements.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core-edit-post.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nareMetaBoxesInitialized( state ) // Returns true if meta boxes are initialized\ngetActiveGeneralSidebarName( state ) // Returns active sidebar name\ngetActiveMetaBoxLocations( state ) // Returns array of active meta box locations\ngetAllMetaBoxes( state ) // Returns list of all available meta boxes\ngetEditedPostTemplate() // Retrieves template of currently edited post\ngetEditorMode( state ) // Returns current editing mode\n```\n\n----------------------------------------\n\nTITLE: Enabling Link Color Support in WordPress\nDESCRIPTION: PHP code to enable the link color setting in WordPress. This allows users to customize link colors through the editor interface.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/themes/theme-support.md#2025-04-21_snippet_32\n\nLANGUAGE: php\nCODE:\n```\nadd_theme_support( 'link-color' );\n```\n\n----------------------------------------\n\nTITLE: Explicit Block Assertions Using editor.getBlocks in JavaScript\nDESCRIPTION: This code demonstrates how to rewrite snapshot assertions into more explicit and atomic assertions using editor.getBlocks. It improves readability and makes the test's intentions clearer.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/e2e/overusing-snapshots.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Expect empty paragraph outside quote block.\nawait expect.poll( editor.getBlocks ).toMatchObject( [\n\t{\n\t\tname: 'core/quote',\n\t\tinnerBlocks: [\n\t\t\t{\n\t\t\t\tname: 'core/paragraph',\n\t\t\t\tattributes: { content: '1' },\n\t\t\t},\n\t\t],\n\t},\n\t{\n\t\tname: 'core/paragraph',\n\t\tattributes: { content: '' },\n\t}\n] );\n\n// ...\n\n// Expect the paragraph to be merged into the quote block.\nawait expect.poll( editor.getBlocks ).toMatchObject( [ {\n\tname: 'core/quote',\n\tinnerBlocks: [\n\t\t{\n\t\t\tname: 'core/paragraph',\n\t\t\tattributes: { content: '1' },\n\t\t},\n\t\t{\n\t\t\tname: 'core/paragraph',\n\t\t\tattributes: { content: '2' },\n\t\t},\n\t],\n} ] );\n```\n\n----------------------------------------\n\nTITLE: Block Mode and Highlight Actions (toggleBlockMode, toggleBlockHighlight)\nDESCRIPTION: Actions for toggling block editing modes (visual/HTML) and highlight states. toggleBlockMode takes a clientId parameter, while toggleBlockHighlight requires both clientId and isHighlighted parameters.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core-block-editor.md#2025-04-21_snippet_22\n\n\n\n----------------------------------------\n\nTITLE: Unregistering Block Type in React Component (JavaScript)\nDESCRIPTION: This example shows how to use the unregisterBlockType function to remove a custom block type from the editor. It's implemented as a button click handler in a React component.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/blocks/README.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { __ } from '@wordpress/i18n';\nimport { unregisterBlockType } from '@wordpress/blocks';\n\nconst ExampleComponent = () => {\n\treturn (\n\t\t<Button\n\t\t\tonClick={ () => unregisterBlockType( 'my-collection/block-name' ) }\n\t\t>\n\t\t\t{ __( 'Unregister my custom block.' ) }\n\t\t</Button>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Incorrect setTimeout Usage in React Components\nDESCRIPTION: Examples demonstrating unsafe patterns of setTimeout usage in React components that should be avoided as they can lead to memory leaks and unexpected behavior after component unmounting.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/eslint-plugin/docs/rules/react-no-unsafe-timeout.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction MyComponent() {\n\tsetTimeout( fn );\n}\n\nclass MyComponent extends Component {\n\tcomponentDidMount() {\n\t\tsetTimeout( fn );\n\t}\n}\n\nclass MyComponent extends React.Component {\n\tcomponentDidMount() {\n\t\tsetTimeout( fn );\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Static Block Front-end HTML Rendering\nDESCRIPTION: The final HTML markup rendered on the front end for the Preformatted block, with block delimiters removed.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/getting-started/fundamentals/static-dynamic-rendering.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<pre class=\"wp-block-preformatted\">This is some preformatted text</pre>\n```\n\n----------------------------------------\n\nTITLE: Setting Default Media & Text Block Variation in JavaScript\nDESCRIPTION: Example of creating a default variation for the Media & Text block that displays the image on the right by default.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-variations.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nwp.blocks.registerBlockVariation( 'core/media-text', {\n\tname: 'media-text-media-right',\n\ttitle: __( 'Media & Text' ),\n\tisDefault: true,\n\tattributes: {\n\t\tmediaPosition: 'right',\n\t},\n} );\n```\n\n----------------------------------------\n\nTITLE: Setting Feature Defaults in WordPress Interface Store\nDESCRIPTION: Example of initializing and setting default feature values for an editor or plugin\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/interface/README.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { dispatch } from '@wordpress/data';\nimport { store as interfaceStore } from '@wordpress/interface';\n\nfunction initialize() {\n\t// ...\n\n\tdispatch( interfaceStore ).setFeatureDefaults(\n\t\t'namespace/editor-or-plugin-name',\n\t\t{\n\t\t\tmyFeatureName: true,\n\t\t}\n\t);\n\n\t// ...\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Private APIs Package Access\nDESCRIPTION: Shows how to opt-in to private APIs usage in a WordPress package using the __dangerousOptInToUnstableAPIsOnlyForCoreModules function.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/coding-guidelines.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { __dangerousOptInToUnstableAPIsOnlyForCoreModules } from '@wordpress/private-apis';\nexport const { lock, unlock } =\n\t__dangerousOptInToUnstableAPIsOnlyForCoreModules(\n\t\t'I acknowledge private features are not for use in themes or plugins and doing so will break in the next version of WordPress.',\n\t\t'@wordpress/block-editor'\n\t);\n```\n\n----------------------------------------\n\nTITLE: Checking Multi-Selection in Gutenberg Editor (JavaScript)\nDESCRIPTION: Selector function that determines if multi-selection is enabled in the global application state. It returns a boolean indicating whether it's possible to multi-select blocks.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core-block-editor.md#2025-04-21_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nisSelectionEnabled( state )\n```\n\n----------------------------------------\n\nTITLE: Setting isActive Property as String Array in JavaScript\nDESCRIPTION: This snippet shows how to set the isActive property as a string array to determine which attributes should be compared for identifying the active variation.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-variations.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nisActive: [ 'providerNameSlug' ];\n```\n\n----------------------------------------\n\nTITLE: Registering Block Metadata Collection in PHP\nDESCRIPTION: PHP code example showing how to register a block metadata collection using the generated blocks manifest file.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/scripts/README.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nwp_register_block_metadata_collection(\n    plugin_dir_path( __FILE__ ) . 'dist',\n    plugin_dir_path( __FILE__ ) . 'dist/blocks-manifest.php'\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering a CheckboxControl in React\nDESCRIPTION: This snippet demonstrates how to use the CheckboxControl component from @wordpress/components to create an 'Is author' checkbox. It uses React hooks to manage the checkbox state.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/checkbox-control/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { CheckboxControl } from '@wordpress/components';\n\nconst MyCheckboxControl = () => {\n\tconst [ isChecked, setChecked ] = useState( true );\n\treturn (\n\t\t<CheckboxControl\n\t\t\t__nextHasNoMarginBottom\n\t\t\tlabel=\"Is author\"\n\t\t\thelp=\"Is the user a author or not?\"\n\t\t\tchecked={ isChecked }\n\t\t\tonChange={ setChecked }\n\t\t/>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Enabling Script Module Bundling with Webpack\nDESCRIPTION: Configure webpack to support script module bundling with this plugin. Required configuration includes setting the `output.module` to true and using `requestToExternalModule` for module requests.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/dependency-extraction-webpack-plugin/README.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst webpackConfig = {\n\t...defaultConfig,\n\n\t// These lines are necessary to enable module compilation at time-of-writing:\n\toutput: { module: true },\n\texperiments: { outputModule: true },\n\n\tplugins: [\n\t\t...defaultConfig.plugins.filter(\n\t\t\t( plugin ) =>\n\t\t\t\tplugin.constructor.name !== 'DependencyExtractionWebpackPlugin'\n\t\t),\n\t\tnew DependencyExtractionWebpackPlugin( {\n\t\t\t// With modules, use `requestToExternalModule`:\n\t\t\trequestToExternalModule( request ) {\n\t\t\t\tif ( request === 'my-registered-module' ) {\n\t\t\t\t\treturn request;\n\t\t\t\t}\n\t\t\t},\n\t\t} ),\n\t],\n};\n```\n\n----------------------------------------\n\nTITLE: PHP: Dynamic Derived State for Shopping List Emoji\nDESCRIPTION: Defines a dynamic derived state `onShoppingList` in PHP using `wp_interactivity_state`. The value is computed within a function that accesses both the current state and context to determine if the fruit is on the shopping list and returns the appropriate emoji.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/core-concepts/server-side-rendering.md#2025-04-21_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nwp_interactivity_state( 'myFruitPlugin', array(\n  // ...\n  'onShoppingList' => function() {\n    $state   = wp_interactivity_state();\n    $context = wp_interactivity_get_context();\n    return in_array( $context['item'], $state['shoppingList'] ) ? '🛒' : '';\n  }\n));\n```\n\n----------------------------------------\n\nTITLE: Using Core Edit Controls in Fields (JavaScript)\nDESCRIPTION: Examples of using built-in edit controls and combining them with field types. These snippets show how to use predefined controls or override them with custom implementations.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/dataviews/README.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n{\n\tEdit: 'radio';\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n\ttype: 'text';\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n\ttype: 'text',\n\tEdit: 'radio'\n}\n```\n\n----------------------------------------\n\nTITLE: Disallow Collapsible Whitespace in Strings - ESLint JavaScript\nDESCRIPTION: Ensures that translatable strings in JavaScript do not contain collapsible whitespace (e.g., newlines, tabs) which complicates translation. Dependencies include the use of the `__` function for string translation, and the ESLint rules. This ensures translatable strings are easy to manage and translate. Incorrect examples show prohibited usages of newlines and tabs, while the correct example demonstrates proper concatenation.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/eslint-plugin/docs/rules/i18n-no-collapsible-whitespace.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n__( 'A string\\non two lines' );\n__( 'A string\\non two lines' );\n__( `A string\non two lines` );\n__( `A\tstring\twith\ttabs` );\n__( \"Multiple spaces.  Even after a full stop.  (We're going there)\" );\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n__( `A long string ` + `spread over ` + `multiple lines.` );\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Available Format Types in React Component\nDESCRIPTION: This snippet showcases the use of getFormatTypes selector to retrieve all available format types. It displays a list of format names or a message if no formats are available.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core-rich-text.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { __, sprintf } from '@wordpress/i18n';\nimport { store as richTextStore } from '@wordpress/rich-text';\nimport { useSelect } from '@wordpress/data';\n\nconst ExampleComponent = () => {\n\tconst { getFormatTypes } = useSelect(\n\t\t( select ) => select( richTextStore ),\n\t\t[]\n\t);\n\n\tconst availableFormats = getFormatTypes();\n\n\treturn availableFormats ? (\n\t\t<ul>\n\t\t\t{ availableFormats?.map( ( format ) => (\n\t\t\t\t<li>{ format.name }</li>\n\t\t\t) ) }\n\t\t</ul>\n\t) : (\n\t\t__( 'No Formats available' )\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: NPM Package Configuration for Gutenberg App\nDESCRIPTION: Package.json configuration for the Gutenberg app defining dependencies, build scripts, and project metadata using @wordpress/scripts for build tooling.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/data-basics/1-data-basics-setup.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"09-code-data-basics-esnext\",\n  \"version\": \"1.1.0\",\n  \"private\": true,\n  \"description\": \"My first Gutenberg App\",\n  \"author\": \"The WordPress Contributors\",\n  \"license\": \"GPL-2.0-or-later\",\n  \"keywords\": [\n    \"WordPress\",\n    \"block\"\n  ],\n  \"homepage\": \"https://github.com/WordPress/gutenberg-examples/\",\n  \"repository\": \"git+https://github.com/WordPress/gutenberg-examples.git\",\n  \"bugs\": {\n    \"url\": \"https://github.com/WordPress/gutenberg-examples/issues\"\n  },\n  \"main\": \"build/index.js\",\n  \"devDependencies\": {\n    \"@wordpress/scripts\": \"^24.0.0\"\n  },\n  \"scripts\": {\n    \"build\": \"wp-scripts build\",\n    \"format\": \"wp-scripts format\",\n    \"lint:js\": \"wp-scripts lint-js\",\n    \"packages-update\": \"wp-scripts packages-update\",\n    \"start\": \"wp-scripts start\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: React v17 Upgrade\nDESCRIPTION: React components have been upgraded to v17.0. While there are no new features in React v17.0 itself, this upgrade may necessitate changes in dependent code or libraries to ensure compatibility and proper functioning within the Gutenberg environment.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/CHANGELOG.md#2025-04-21_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: JavaScript Style Imports for WordPress Block\nDESCRIPTION: JavaScript entry point showing how to import different style files (PCSS, SCSS, CSS).\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/scripts/README.md#2025-04-21_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\n// index.js\nimport './index.pcss';\nimport './index.scss';\nimport './style.css';\n```\n\n----------------------------------------\n\nTITLE: Implementing useResizeCanvas Hook in React Component\nDESCRIPTION: Example showing how to implement the useResizeCanvas hook in a React component. The hook accepts a deviceType prop obtained from the core/editor selector and returns inline styles for responsive container sizing.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/src/components/use-resize-canvas/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { __experimentalUseResizeCanvas as useResizeCanvas } from '@wordpress/block-editor';\n\nfunction ResizedContainer() {\n\tconst deviceType = useSelect( ( select ) => {\n\t\treturn select( 'core/editor' ).getDeviceType();\n\t}, [] );\n\tconst inlineStyles = useResizeCanvas( deviceType );\n\n\treturn <div style={ resizeStyles }>Your content</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Command Store Actions\nDESCRIPTION: Core actions for managing commands and command palette state. Includes functions to register/unregister commands and command loaders, and open/close the palette.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core-commands.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclose: () => Object\n```\n\nLANGUAGE: javascript\nCODE:\n```\nopen: () => Object\n```\n\nLANGUAGE: javascript\nCODE:\n```\nregisterCommand: ( config: WPCommandConfig ) => Object\n```\n\nLANGUAGE: javascript\nCODE:\n```\nregisterCommandLoader: ( config: WPCommandLoaderConfig ) => Object\n```\n\nLANGUAGE: javascript\nCODE:\n```\nunregisterCommand: ( name: string ) => Object\n```\n\nLANGUAGE: javascript\nCODE:\n```\nunregisterCommandLoader: ( name: string ) => Object\n```\n\n----------------------------------------\n\nTITLE: Extending ESLint Configuration\nDESCRIPTION: This snippet shows how to extend the default ESLint configuration for a WordPress project by modifying the `.eslintrc` file to include the recommended settings from the WordPress ESLint plugin.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/eslint-plugin/README.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"extends\": [ \"plugin:@wordpress/eslint-plugin/recommended\" ]\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Pattern Categories - JavaScript\nDESCRIPTION: This function retrieves the registered user pattern categories from the application state, returning an array of user pattern categories.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n// getUserPatternCategories\n\nfunction getUserPatternCategories( state ) {\n    // Implementation here\n}\n```\n\n----------------------------------------\n\nTITLE: PinnedItems Component Props Definition\nDESCRIPTION: Defines the required props for the PinnedItems component, including children elements for content display and scope for identifying the pinned items area.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/interface/src/components/pinned-items/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### children\n\nThe content to be displayed for the pinned items. Most of the time, a button with an icon should be used.\n\n-   Type: `Element`\n-   Required: Yes\n\n### scope\n\nThe scope of the pinned items area e.g: \"core\", \"myplugin/custom-screen-a\",\n\n-   Type: `String`\n-   Required: Yes\n```\n\n----------------------------------------\n\nTITLE: Action Creator: uninstallBlockType\nDESCRIPTION: This action creator triggers the uninstallation of a block plugin. It requires a block type object and performs the uninstallation process.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-directory/README.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// Action creator\nfunction uninstallBlockType(block) {\n    // uninstallation logic here...\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Example for RichText Content in WordPress Gutenberg\nDESCRIPTION: This HTML snippet illustrates how text positions are calculated in RichText content, ignoring HTML tags. The start position 0 refers to the position before the capital S in 'Strong'.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-annotations.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<strong>Strong text</strong>\n```\n\n----------------------------------------\n\nTITLE: Overriding Card Size for Specific Sub-component in JSX\nDESCRIPTION: This example demonstrates how to override the size prop for a specific sub-component. It shows that while the Card sets a small size, individual CardBody components can have different sizes.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/card/card/README.md#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Card, CardBody } from '@wordpress/components';\n\nconst Example = () => (\n\t<Card size=\"small\">\n\t\t<CardBody>...</CardBody>\n\t\t<CardBody>...</CardBody>\n\t\t<CardBody size=\"large\">...</CardBody>\n\t</Card>\n);\n```\n\n----------------------------------------\n\nTITLE: Using WordPress Components in JavaScript\nDESCRIPTION: Shows how to import and use a Button component from the @wordpress/components package in a JavaScript application.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/explanations/architecture/modularity.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Button } from '@wordpress/components';\n\nfunction MyApp() {\n\treturn <Button>Nice looking button</Button>;\n}\n```\n\n----------------------------------------\n\nTITLE: Set Environment Configurations - JSON\nDESCRIPTION: This JSON configuration shows how to set plugins and configuration options within the .wp-env.json file, affecting behavior on different environments during development and testing. Key parameters include lists of plugins and themes to use, as well as environment-specific settings like ports and configurations. The purpose is to ensure distinct configurations for development and testing environments.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/env/README.md#2025-04-21_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"plugins\": [ \".\" ],\n\t\"config\": {\n\t\t\"KEY_1\": true,\n\t\t\"KEY_2\": false\n\t},\n\t\"env\": {\n\t\t\"development\": {\n\t\t\t\"themes\": [ \"./one-theme\" ]\n\t\t},\n\t\t\"tests\": {\n\t\t\t\"config\": {\n\t\t\t\t\"KEY_1\": false\n\t\t\t},\n\t\t\t\"port\": 3000,\n\t\t\t\"mysqlPort\": 13306,\n\t\t\t\"phpmyadminPort\": 9001\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: AztecText Implementation (Kotlin)\nDESCRIPTION: This snippet points to the Kotlin implementation of `AztecText` from the AztecEditor-Android library. It underlines the base class for rich text editing in the Android Aztec library.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/react-native-aztec/README.md#2025-04-21_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\n[`AztecText`](https://github.com/wordpress-mobile/AztecEditor-Android/blob/437ecec9034003c32b9b8b0b00ec76cb5b248679/aztec/src/main/kotlin/org/wordpress/aztec/AztecText.kt#L130)\n\n```\n\n----------------------------------------\n\nTITLE: Managing Tips State Actions in JavaScript\nDESCRIPTION: A collection of action creators for managing tips and guides. Includes functions to enable/disable all tips, dismiss individual tips, and trigger step-by-step guides.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core-nux.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndisableTips\n\nReturns:\n- Object: Action object.\n\ndismissTip\n\nParameters:\n- id (string): The tip to dismiss.\n\nReturns:\n- Object: Action object.\n\nenableTips\n\nReturns:\n- Object: Action object.\n\ntriggerGuide\n\nParameters:\n- tipIds (string[]): Which tips to show in the guide.\n\nReturns:\n- Object: Action object.\n```\n\n----------------------------------------\n\nTITLE: HTML Local Context Definition with data-wp-context\nDESCRIPTION: Example of defining local context in HTML using the data-wp-context directive, which sets initial context values that need to be typed in TypeScript.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/core-concepts/using-typescript.md#2025-04-21_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<div data-wp-context='{ \"counter\": 0 }'>...</div>\n```\n\n----------------------------------------\n\nTITLE: Installing WordPress Core Commands\nDESCRIPTION: This command installs the WordPress core commands package using npm. It adds the package to your project's dependencies and assumes an ES2015+ environment. If your environment lacks support for ES2015 features, a polyfill is recommended.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/core-commands/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @wordpress/core-commands --save\n```\n\n----------------------------------------\n\nTITLE: TypeScript Component Props Implementation\nDESCRIPTION: Example showing how to use TypeScript with WordPress components, specifically implementing proper typing for component props.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/README.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { ComponentProps } from 'react';\nimport { Button } from '@wordpress/components';\n\nexport default function MyButton( props: ComponentProps< typeof Button > ) {\n\treturn <Button { ...props }>Click Me!</Button>;\n}\n```\n\n----------------------------------------\n\nTITLE: Manipulating Query Arguments in JavaScript\nDESCRIPTION: Demonstrates functions for working with query arguments in URLs, including getting single arguments, all arguments, and checking for the presence of specific arguments.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/url/README.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst foo = getQueryArg( 'https://wordpress.org?foo=bar&bar=baz', 'foo' ); // bar\n\nconst foo = getQueryArgs( 'https://wordpress.org?foo=bar&bar=baz' );\n// { \"foo\": \"bar\", \"bar\": \"baz\" }\n\nconst hasBar = hasQueryArg( 'https://wordpress.org?foo=bar&bar=baz', 'bar' ); // true\n```\n\n----------------------------------------\n\nTITLE: Selector: getDownloadableBlocks\nDESCRIPTION: This selector retrieves the list of available uninstalled blocks based on the global application state and filter value. It requires state object and filter value string as parameters and returns an array of downloadable blocks.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-directory/README.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// Selector\nfunction getDownloadableBlocks(state, filterValue) {\n    // logic to retrieve downloadable blocks\n    return []; // return array of blocks\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning the Gutenberg Repository\nDESCRIPTION: Command to clone the WordPress Gutenberg GitHub repository to your local machine.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/react-native/getting-started-react-native.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/WordPress/gutenberg.git\n```\n\n----------------------------------------\n\nTITLE: Block Editor Store Definition\nDESCRIPTION: A store definition `store` was added for the block editor namespace. This store is intended to be used with the `@wordpress/data` API. This allows for managing block editor state using the WordPress data layer.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/CHANGELOG.md#2025-04-21_snippet_6\n\n\n\n----------------------------------------\n\nTITLE: Using Semantic Typography Mixins in CSS\nDESCRIPTION: Demonstrates how to use SASS mixins for semantic typography tokens in CSS. This example shows applying a heading-large style to a custom component class.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/storybook/stories/tokens/typography.mdx#2025-04-21_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.my-component {\n\t@include heading-large();\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Gutenberg Blocks in PHP\nDESCRIPTION: PHP function to parse WordPress post content into blocks using the parse_blocks() function.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/getting-started/faq.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$blocks = parse_blocks( $post_content );\n```\n\n----------------------------------------\n\nTITLE: Badge Component Props Definition - TypeScript\nDESCRIPTION: TypeScript type definitions for the Badge component props. Includes required children prop for badge text and optional intent prop for variant styling.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/badge/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface BadgeProps {\n  children: string;  // Required text content\n  intent?: \"default\" | \"info\" | \"success\" | \"warning\" | \"error\";  // Optional variant type\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @wordpress/dom-ready Package with npm\nDESCRIPTION: Installs the @wordpress/dom-ready package to allow executing callbacks after the DOM is loaded. Ensure that the environment supports ES2015+ features; otherwise, include the necessary polyfills.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/dom-ready/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @wordpress/dom-ready --save\n```\n\n----------------------------------------\n\nTITLE: Using Block Bindings Utils in WordPress\nDESCRIPTION: Shows how to use the useBlockBindingsUtils hook to manage block bindings metadata for attributes like URL and alt text using custom fields.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/README.md#2025-04-21_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nimport { useBlockBindingsUtils } from '@wordpress/block-editor';\nconst { updateBlockBindings, removeAllBlockBindings } = useBlockBindingsUtils();\n\n// Update url and alt attributes.\nupdateBlockBindings( {\n\turl: {\n\t\tsource: 'core/post-meta',\n\t\targs: {\n\t\t\tkey: 'url_custom_field',\n\t\t},\n\t},\n\talt: {\n\t\tsource: 'core/post-meta',\n\t\targs: {\n\t\t\tkey: 'text_custom_field',\n\t\t},\n\t},\n} );\n\n// Remove binding from url attribute.\nupdateBlockBindings( { url: undefined } );\n\n// Remove bindings from all attributes.\nremoveAllBlockBindings();\n```\n\n----------------------------------------\n\nTITLE: Block Asset Dependencies Definition in PHP\nDESCRIPTION: Example of an index.asset.php file that defines dependencies and version information for block assets, which WordPress uses when enqueueing scripts.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-metadata.md#2025-04-21_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn array(\n\t'dependencies' => array(\n\t\t'react',\n\t\t'wp-blocks',\n\t\t'wp-i18n',\n\t),\n\t'version'      => '3be55b05081a63d8f9d0ecb466c42cfd',\n);\n```\n\n----------------------------------------\n\nTITLE: Installing WordPress Blocks Package\nDESCRIPTION: NPM installation command for the WordPress blocks package. This package requires an ES2015+ environment.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/blocks/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @wordpress/blocks --save\n```\n\n----------------------------------------\n\nTITLE: Implementing Font Size CSS Classes in WordPress Themes\nDESCRIPTION: This CSS snippet demonstrates how to create a class that applies a custom font size to text in the WordPress editor. It corresponds to the 'Regular' font size defined in the PHP code.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/themes/theme-support.md#2025-04-21_snippet_11\n\nLANGUAGE: css\nCODE:\n```\n.has-regular-font-size {\n\tfont-size: 16px;\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Multisite in WordPress Environment\nDESCRIPTION: This configuration example illustrates how to enable multisite functionality in a WordPress environment using wp-env. It shows setting the 'multisite' flag to true.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/env/README.md#2025-04-21_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"multisite\": true,\n\t\"plugins\": [ \".\" ]\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Displaying WordPress Components README in Storybook\nDESCRIPTION: This code imports Storybook's Meta and Markdown components along with the WordPress components README file. It then configures the page title and renders the README content using the Markdown component.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/storybook/stories/docs/components/readme.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Meta, Markdown } from '@storybook/blocks';\nimport Readme from '@wordpress/components/README.md?raw';\n\n<Meta title=\"Components/Introduction\" />\n\n<Markdown>{Readme}</Markdown>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Format Type for Bare Element in React Component\nDESCRIPTION: This snippet shows how to use the getFormatTypeForBareElement selector to find a format type for a given HTML tag name. It retrieves the format for the 'strong' tag and displays its name.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core-rich-text.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { __, sprintf } from '@wordpress/i18n';\nimport { store as richTextStore } from '@wordpress/rich-text';\nimport { useSelect } from '@wordpress/data';\n\nconst ExampleComponent = () => {\n\tconst { getFormatTypeForBareElement } = useSelect(\n\t\t( select ) => select( richTextStore ),\n\t\t[]\n\t);\n\n\tconst format = getFormatTypeForBareElement( 'strong' );\n\n\treturn format && <p>{ sprintf( __( 'Format name: %s' ), format.name ) }</p>;\n};\n```\n\n----------------------------------------\n\nTITLE: Incorrect BaseControl Usage - Label Without ID\nDESCRIPTION: Examples of incorrect BaseControl component implementation where a label prop is provided without a corresponding id property.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/eslint-plugin/docs/rules/no-base-control-with-label-without-id.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<BaseControl label=\"ok\">\n\t<input id=\"my-id\" />\n</BaseControl>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<BaseControl label=\"ok\" />\n```\n\n----------------------------------------\n\nTITLE: Block HTML Markup Before Static Rendering\nDESCRIPTION: Shows the HTML markup of a dynamically rendered block with attributes. This self-closing markup doesn't contain any content HTML as it relies on server-side rendering.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/getting-started/tutorial.md#2025-04-21_snippet_20\n\nLANGUAGE: html\nCODE:\n```\n<!-- wp:create-block/copyright-date-block {\"showStartingYear\":true,\"startingYear\":\"2017\"} /-->\n```\n\n----------------------------------------\n\nTITLE: Configuring Node Lifecycle Script for WordPress Environment\nDESCRIPTION: This snippet demonstrates how to set up a Node lifecycle script to run after starting the WordPress environment using wp-env. It shows configuring an 'afterStart' script for E2E test environment setup.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/env/README.md#2025-04-21_snippet_27\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"lifecycleScripts\": {\n\t\t\"afterStart\": \"node tests/e2e/bin/setup-env.js\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Error Handling in EditPageForm Component (JSX)\nDESCRIPTION: This code demonstrates how to handle errors during the save operation and keep the form modal open if the update fails.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/data-basics/3-building-an-edit-form.md#2025-04-21_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nfunction EditPageForm( { pageId, onSaveFinished } ) {\n\t// ...\n\tconst handleSave = async () => {\n\t\tconst updatedRecord = await saveEditedEntityRecord( 'postType', 'page', pageId );\n\t\tif ( updatedRecord ) {\n\t\t\tonSaveFinished();\n\t\t}\n\t};\n\t// ...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Grouping Block Name in React Component (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use the setGroupingBlockName function to change the block used for grouping interactions. In this case, it sets the grouping block to 'core/columns' instead of the default 'core/group'.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/blocks/README.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { setGroupingBlockName } from '@wordpress/blocks';\n\nconst ExampleComponent = () => {\n\treturn (\n\t\t<Button onClick={ () => setGroupingBlockName( 'core/columns' ) }>\n\t\t\t{ __( 'Wrap in columns' ) }\n\t\t</Button>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Global Styles Style Object Example\nDESCRIPTION: Demonstrates the structure of a typical style object used in WordPress Global Styles with nested properties\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/src/components/global-styles/README.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n\tcolor: {\n\t\ttext: 'var:preset|color|blue',\n\t\tbackground: '#FF0000',\n\t},\n\ttypography: {\n\t\tfontFamily: 'var:preset|font-family|base',\n\t\tfontSize: '10px',\n\t\tlineHeight: 1.5,\n\t},\n\tspacing: {\n\t\tpadding: 'var:preset|spacing|medium',\n\t},\n\telements: {\n\t\tlink: {\n\t\t\tcolor: {\n\t\t\t\ttext: 'var:preset|color|green',\n\t\t\t},\n\t\t},\n\t},\n}\n```\n\n----------------------------------------\n\nTITLE: Type-Specific Import Usage\nDESCRIPTION: Shows how to import specific implementations for array or object comparisons when the data type is known in advance.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/is-shallow-equal/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { isShallowEqualArrays } from '@wordpress/is-shallow-equal';\nimport { isShallowEqualObjects } from '@wordpress/is-shallow-equal';\n```\n\n----------------------------------------\n\nTITLE: Customizing Webpack Configuration for WordPress Dependencies\nDESCRIPTION: Extend an existing webpack configuration to include a customized instance of the Dependency Extraction Webpack Plugin. Ensure the default instance is removed before adding custom configurations.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/dependency-extraction-webpack-plugin/README.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst defaultConfig = require( '@wordpress/scripts/config/webpack.config' );\nconst webpackConfig = {\n\t...defaultConfig,\n\tplugins: [\n\t\t...defaultConfig.plugins.filter(\n\t\t\t( plugin ) =>\n\t\t\t\tplugin.constructor.name !== 'DependencyExtractionWebpackPlugin'\n\t\t),\n\t\tnew DependencyExtractionWebpackPlugin( {\n\t\t\tinjectPolyfill: true,\n\t\t\trequestToExternal( request ) {\n\t\t\t\t/* My externals */\n\t\t\t},\n\t\t} ),\n\t],\n};\n```\n\n----------------------------------------\n\nTITLE: Unregistering Block Styles in JavaScript\nDESCRIPTION: JavaScript code to disable specific block styles, such as the 'Rounded' style for Image blocks.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/curating-the-editor-experience/disable-editor-functionality.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nwp.domReady( () => {\n\twp.blocks.unregisterBlockStyle( 'core/image', 'rounded' );\n});\n```\n\n----------------------------------------\n\nTITLE: Limiting Column Block Spacing Units with JavaScript Filter\nDESCRIPTION: Using blockEditor.useSetting.before filter to restrict Column block spacing units to pixels only\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/curating-the-editor-experience/filters-and-hooks.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { addFilter } from '@wordpress/hooks';\n\n/**\n * Limit the Column block's spacing options to pixels.\n */\naddFilter(\n\t'blockEditor.useSetting.before',\n\t'example/useSetting.before',\n\t( settingValue, settingName, clientId, blockName ) => {\n\t\tif ( blockName === 'core/column' && settingName === 'spacing.units' ) {\n\t\t\treturn [ 'px' ];\n\t\t}\n\t\treturn settingValue;\n\t}\n);\n```\n\n----------------------------------------\n\nTITLE: Emulating Reduced Motion\nDESCRIPTION: This snippet describes a new feature introduced in Gutenberg v2.5.0, which allows emulating `prefers-reduced-motion: reduce` during tests.  This enables testing accessibility features related to reduced motion preferences.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/e2e-tests/CHANGELOG.md#2025-04-21_snippet_7\n\nLANGUAGE: None\nCODE:\n```\nEmulate `prefers-reduced-motion: reduce` [#34132](https://github.com/WordPress/gutenberg/pull/34132).\n```\n\n----------------------------------------\n\nTITLE: Configuring Block JSON for Interactivity Support\nDESCRIPTION: Enable Interactivity API support in a block's block.json configuration by setting the interactivity support flag.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/README.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"supports\": {\n        \"interactivity\": true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ObserveTyping Component in React\nDESCRIPTION: Example showing how to wrap content with the ObserveTyping component to manage typing state in a Visual Editor. The component monitors keyboard and mouse events to control block border and control visibility.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/src/components/observe-typing/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nfunction VisualEditor() {\n\treturn (\n\t\t<ObserveTyping>\n\t\t\t<MyInput />\n\t\t</ObserveTyping>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Node.js Version Update\nDESCRIPTION: This snippet describes a breaking change in Gutenberg v8.0.0, where the minimum required Node.js version was increased to v18.12.0.  This requires users to update their Node.js environment to be compatible with the new version.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/e2e-tests/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: None\nCODE:\n```\n\tIncrease the minimum required Node.js version to v18.12.0 matching long-term support releases ([#31270](https://github.com/WordPress/gutenberg/pull/61930)). Learn more about [Node.js releases](https://nodejs.org/en/about/previous-releases).\n```\n\n----------------------------------------\n\nTITLE: Extracting Attribute from HTML in JavaScript\nDESCRIPTION: Demonstrates how to extract the 'src' attribute from an img element in the block's markup using the 'attribute' source.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-attributes.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n\turl: {\n\t\ttype: 'string',\n\t\tsource: 'attribute',\n\t\tselector: 'img',\n\t\tattribute: 'src',\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Link Color Control in theme.json\nDESCRIPTION: JSON configuration to enable link color controls in the Gutenberg editor. This setting allows users to customize link colors within blocks through the editor interface.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/themes/theme-support.md#2025-04-21_snippet_28\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"settings\": {\n\t\t\"color\": {\n\t\t\t\"link\": true\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: ComplementaryArea Component Props Documentation\nDESCRIPTION: Detailed documentation of the props accepted by the ComplementaryArea component, including types, requirements, and default values.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/interface/src/components/complementary-area/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### children\n\nThe content to be displayed within the complementary area.\n\n-   Type: `Element`\n-   Required: Yes\n\n### closeLabel\n\nLabel of the button that allows to close the complementary area.\n\n-   Type: `String`\n-   Required: No\n-   Default: \"Close plugin\"\n\n### identifier\n\nIdentifier of the complementary area. The string is saved on the store and allows to identify which of the sidebars is active.\n\n-   Type: `String`\n-   Required: No\n-   Default: Concatenation of `name` of the plugin extracted from the context (when available) with the \"name\" of the sidebar passed as a property.\n```\n\n----------------------------------------\n\nTITLE: Implementing Code Tabs in Markdown Documentation\nDESCRIPTION: This markdown example shows how to implement the codetabs feature in Gutenberg documentation, which allows showing multiple versions of code samples (JSX and Plain) with a toggle option for the reader.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/documentation/README.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n    \\{\\% codetabs \\%\\}\n    \\{\\% JSX \\%\\}\n    ```js\n    // JSX code here\n    ```\n    \\{\\% Plain \\%\\}\n    ```js\n    // Plain code here\n    ```\n    \\{\\% end \\%\\}\n```\n\n----------------------------------------\n\nTITLE: Using Function Exists Check for WordPress Core Functions\nDESCRIPTION: Pattern for conditionally declaring a WordPress Core function with a function_exists() check to prevent duplicate declarations. This allows the code to run in the plugin until it's merged to Core.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/lib/README.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nif ( ! function_exists( 'wp_a_new_and_stable_feature' ) ) {\n\t/**\n\t* A very new and stable feature.\n\t*\n\t* @return string Something useful.\n\t*/\n\tfunction wp_a_new_and_stable_feature() {\n\t\t// ...\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Block Library Stylesheets in WordPress Gutenberg\nDESCRIPTION: Imports the necessary CSS stylesheets for WordPress core blocks, including common styles, general block styles, and editor-specific styles.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/platform-docs/docs/basic-concepts/block-library.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"@wordpress/block-library/build-style/common.css\";\nimport \"@wordpress/block-library/build-style/style.css\";\nimport \"@wordpress/block-library/build-style/editor.css\";\n```\n\n----------------------------------------\n\nTITLE: Opening Block Settings in React Native Tests\nDESCRIPTION: This snippet shows how to open the block settings in a React Native integration test by selecting the block and pressing the 'Open Settings' button.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/react-native/integration-test-guide.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nfireEvent.press( block );\n\nconst settingsButton = await findByLabelText( 'Open Settings' );\nfireEvent.press( settingsButton );\n```\n\n----------------------------------------\n\nTITLE: Installing E2E Test Module\nDESCRIPTION: Command to install the WordPress E2E tests module as a development dependency using npm\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/e2e-tests/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @wordpress/e2e-tests --save-dev\n```\n\n----------------------------------------\n\nTITLE: Customizing Gutenberg Editor Width with CSS\nDESCRIPTION: CSS code to adjust the width of the main editor column, wide blocks, and full-width blocks in the Gutenberg editor. This can be added to style-editor.css to match the theme's content width.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/themes/theme-support.md#2025-04-21_snippet_24\n\nLANGUAGE: css\nCODE:\n```\n/* Main column width */\n.wp-block {\n\tmax-width: 720px;\n}\n\n/* Width of \"wide\" blocks */\n.wp-block[data-align='wide'] {\n\tmax-width: 1080px;\n}\n\n/* Width of \"full-wide\" blocks */\n.wp-block[data-align='full'] {\n\tmax-width: none;\n}\n```\n\n----------------------------------------\n\nTITLE: Query Block Markup in Gutenberg\nDESCRIPTION: Illustrates a query block in Gutenberg configured to display a list of posts. It includes settings for pagination, post type, ordering, and other query parameters. The block utilizes nested blocks for post title, featured image, excerpt, separator, and post date.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/test/e2e/specs/editor/various/__snapshots__/Inserting-blocks-firefox-webkit-inserts-p-59603-ragging-and-dropping-from-the-global-inserter-1-webkit.txt#2025-04-21_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- wp:query {\"queryId\":1,\"query\":{\"perPage\":3,\"pages\":0,\"offset\":0,\"postType\":\"post\",\"order\":\"desc\",\"orderBy\":\"date\",\"author\":\"\",\"search\":\"\",\"exclude\":[],\"sticky\":\"\",\"inherit\":false},\"metadata\":{\"categories\":[\"posts\"],\"patternName\":\"core/query-standard-posts\",\"name\":\"Standard\"}} -->\n<div class=\"wp-block-query\"><!-- wp:post-template -->\n<!-- wp:post-title {\"isLink\":true} /-->\n\n<!-- wp:post-featured-image {\"isLink\":true,\"align\":\"wide\"} /-->\n\n<!-- wp:post-excerpt /-->\n\n<!-- wp:separator {\"opacity\":\"css\"} -->\n<hr class=\"wp-block-separator has-css-opacity\"/>\n<!-- /wp:separator -->\n\n<!-- wp:post-date /-->\n<!-- /wp:post-template --></div>\n<!-- /wp:query -->\n```\n\n----------------------------------------\n\nTITLE: Rendering Search Results with Default Component\nDESCRIPTION: Example showing how to render suggestions using the default LinkControlSearchResults component within a Popover.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/src/components/link-control/README.md#2025-04-21_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n<LinkControlSearchInput\n    renderSuggestions={( suggestionsProps ) => {\n        return (\n            <Popover focusOnMount={ false } placement=\"bottom\">\n                <LinkControlSearchResults { ...suggestionsProps } />\n            </Popover>\n        );\n    })\n/>\n```\n\n----------------------------------------\n\nTITLE: Using withSyncEvent() for Synchronous Access - JavaScript\nDESCRIPTION: This snippet illustrates how to define actions that need synchronous access to the event object using withSyncEvent(). This is essential for functionality requiring immediate event handling like preventing default actions or stopping propagation.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/api-reference.md#2025-04-21_snippet_44\n\nLANGUAGE: JavaScript\nCODE:\n```\n// store\nimport { store, withSyncEvent } from '@wordpress/interactivity';\n\nstore( 'myPlugin', {\n\tactions: {\n\t\t// `event.preventDefault()` requires synchronous event access.\n\t\tpreventNavigation: withSyncEvent( ( event ) => {\n\t\t\tevent.preventDefault();\n\t\t} ),\n\n\t\t// `event.target` does not require synchronous event access.\n\t\tlogTarget: ( event ) => {\n\t\t\tconsole.log( 'event target => ', event.target );\n\t\t},\n\n\t\t// Not using `event` at all does not require synchronous event access.\n\t\tlogSomething: () => {\n\t\t\tconsole.log( 'something' );\n\t\t},\n\t},\n} );\n```\n\n----------------------------------------\n\nTITLE: Rendering ImageSizeControl Component\nDESCRIPTION: This code snippet demonstrates how to render the ImageSizeControl component with state management for width and height. It initializes the size state, defines fixed image dimensions, and sets the onChange handler to update the state when the size changes.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/src/components/image-size-control/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { __experimentalImageSizeControl as ImageSizeControl } from '@wordpress/block-editor';\n\nconst MyImageSizeControl = () => {\n\tconst [ size, setSize ] = useState( { width: null, height: null } );\n\t// In this example, we have one image with a fixed size of 600x600.\n\tconst imageWidth = 600;\n\tconst imageHeight = 600;\n\n\treturn (\n\t\t<ImageSizeControl\n\t\t\tonChange={ ( value ) => setSize( value ) }\n\t\t\twidth={ size.width }\n\t\t\theight={ size.height }\n\t\t\timageWidth={ imageWidth }\n\t\t\timageHeight={ imageHeight }\n\t\t/>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing PostCSS Themes\nDESCRIPTION: This command installs the `@wordpress/postcss-themes` package as a dependency to your project. It uses npm to download and add the package to your `node_modules` directory and updates your `package.json` file.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/postcss-themes/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @wordpress/postcss-themes --save\n```\n\n----------------------------------------\n\nTITLE: Testing Generator Functions with Node's Assert Module in JavaScript\nDESCRIPTION: Example of how to test a generator function created with @wordpress/redux-routine using Node's built-in assert module. It demonstrates checking the yielded and returned values of the generator.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/redux-routine/README.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { deepEqual } from 'assert';\n\nconst action = retrieveTemperature();\n\ndeepEqual( action.next().value, {\n\ttype: 'FETCH_JSON',\n\turl: 'https://',\n} );\n\nconst jsonResult = { value: 10 };\ndeepEqual( action.next( jsonResult ).value, {\n\ttype: 'SET_TEMPERATURE',\n\ttemperature: 10,\n} );\n```\n\n----------------------------------------\n\nTITLE: Create Block Command Usage with Options\nDESCRIPTION: Base command for creating a WordPress block with various configuration options and template selection\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/create-block/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npx @wordpress/create-block@latest [options] [slug]\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel with .babelrc\nDESCRIPTION: This JSON snippet shows how to configure Babel to use the `@wordpress/babel-preset-default` preset. By adding it to the `presets` array in `.babelrc`, the project will use this preset for transpilation.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/babel-preset-default/README.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"{\n\\t\\\"presets\\\": [ \\\"@wordpress/babel-preset-default\\\" ]\n}\"\n```\n\n----------------------------------------\n\nTITLE: Displaying WordPress Gutenberg Scripts Table in Markdown\nDESCRIPTION: This markdown table lists various WordPress Gutenberg scripts, their corresponding handles, and brief descriptions. It covers a wide range of functionalities from block creation to data management and UI components.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/scripts.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Script Name                                                                                  | Handle                                | Description                                                                                                                                                   |\n| -------------------------------------------------------------------------------------------- | ------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| [Blob](/packages/blob/README.md)                                                             | wp-blob                               | Blob utilities                                                                                                                                                |\n| [Block Library](/packages/block-library/README.md)                                           | wp-block-library                      | Block library for the editor                                                                                                                                  |\n| [Blocks](/packages/blocks/README.md)                                                         | wp-blocks                             | Block creations                                                                                                                                               |\n| [Block Serialization Default Parser](/packages/block-serialization-default-parser/README.md) | wp-block-serialization-default-parser | Default block serialization parser implementations for WordPress documents                                                                                    |\n| [Block Serialization Spec Parser](/packages/block-serialization-spec-parser/README.md)       | wp-block-serialization-spec-parser    | Grammar file (grammar.pegjs) for WordPress posts                                                                                                              |\n| [Components](/packages/components/README.md)                                                 | wp-components                         | Generic components to be used for creating common UI elements                                                                                                 |\n| [Compose](/packages/compose/README.md)                                                       | wp-compose                            | Collection of handy Higher Order Components (HOCs)                                                                                                            |\n| [Core Data](/packages/core-data/README.md)                                                   | wp-core-data                          | Simplify access to and manipulation of core WordPress entities                                                                                                |\n| [Data](/packages/data/README.md)                                                             | wp-data                               | Data module serves as a hub to manage application state for both plugins and WordPress itself                                                                 |\n| [Date](/packages/date/README.md)                                                             | wp-date                               | Date module for WordPress                                                                                                                                     |\n| [Deprecated](/packages/deprecated/README.md)                                                 | wp-deprecated                         | Utility to log a message to notify developers about a deprecated feature                                                                                      |\n| [Dom](/packages/dom/README.md)                                                               | wp-dom                                | DOM utilities module for WordPress                                                                                                                            |\n| [Dom Ready](/packages/dom-ready/README.md)                                                   | wp-dom-ready                          | Execute callback after the DOM is loaded                                                                                                                      |\n| [Editor](/packages/editor/README.md)                                                         | wp-editor                             | Building blocks for WordPress editors                                                                                                                         |\n| [Edit Post](/packages/edit-post/README.md)                                                   | wp-edit-post                          | Edit Post Module for WordPress                                                                                                                                |\n| [Element](/packages/element/README.md)                                                       | wp-element                            | Element is, quite simply, an abstraction layer atop [React](https://reactjs.org/)                                                                             |\n| [Escape Html](/packages/escape-html/README.md)                                               | wp-escape-html                        | Escape HTML utils                                                                                                                                             |\n| [Hooks](/packages/hooks/README.md)                                                           | wp-hooks                              | A lightweight and efficient EventManager for JavaScript                                                                                                       |\n| [Html Entities](/packages/html-entities/README.md)                                           | wp-html-entities                      | HTML entity utilities for WordPress                                                                                                                           |\n| [I18N](/packages/i18n/README.md)                                                             | wp-i18n                               | Internationalization utilities for client-side localization                                                                                                   |\n| [Is Shallow Equal](/packages/is-shallow-equal/README.md)                                     | wp-is-shallow-equal                   | A function for performing a shallow comparison between two objects or arrays                                                                                  |\n| [Keycodes](/packages/keycodes/README.md)                                                     | wp-keycodes                           | Keycodes utilities for WordPress, used to check the key pressed in events like `onKeyDown`                                                                    |\n| [List Reusable blocks](/packages/list-reusable-blocks/README.md)                             | wp-list-reusable-blocks               | Package used to add import/export links to the listing page of the reusable blocks                                                                            |\n| [NUX](/packages/nux/README.md)                                                               | wp-nux                                | Components, and wp.data methods useful for onboarding a new user to the WordPress admin interface                                                             |\n| [Plugins](/packages/plugins/README.md)                                                       | wp-plugins                            | Plugins module for WordPress                                                                                                                                  |\n| [Redux Routine](/packages/redux-routine/README.md)                                           | wp-redux-routine                      | Redux middleware for generator coroutines                                                                                                                     |\n| [Rich Text](/packages/rich-text/README.md)                                                   | wp-rich-text                          | Helper functions to convert HTML or a DOM tree into a rich text value and back                                                                                |\n| [Shortcode](/packages/shortcode/README.md)                                                   | wp-shortcode                          | Shortcode module for WordPress                                                                                                                                |\n| [Token List](/packages/token-list/README.md)                                                 | wp-token-list                         | Constructable, plain JavaScript [DOMTokenList](https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList) implementation, supporting non-browser runtimes |\n| [URL](/packages/url/README.md)                                                               | wp-url                                | A collection of utilities to manipulate URLs                                                                                                                  |\n| [Viewport](/packages/viewport/README.md)                                                     | wp-viewport                           | Module for responding to changes in the browser viewport size                                                                                                 |\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment-Specific Plugin Activation in WordPress\nDESCRIPTION: This snippet illustrates how to activate plugins only in specific environments (e.g., tests) using wp-env. It shows how to use the 'env' key to set environment-specific options.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/env/README.md#2025-04-21_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"plugins\": [ \".\" ],\n\t\"env\": {\n\t\t\"tests\": {\n\t\t\t\"plugins\": [ \".\", \"path/to/test/plugin\" ]\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Line Height Primitive Tokens in CSS\nDESCRIPTION: Defines the primitive line height tokens as SASS variables. These variables provide consistent line height options from x-small to 2x-large for use in typography styling.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/storybook/stories/tokens/typography.mdx#2025-04-21_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n$font-line-height-x-small: 16px;\n$font-line-height-small: 20px;\n$font-line-height-medium: 24px;\n$font-line-height-large: 28px;\n$font-line-height-x-large: 32px;\n$font-line-height-2x-large: 40px;\n```\n\n----------------------------------------\n\nTITLE: Updating Editor Settings with localAutosaveInterval\nDESCRIPTION: This JavaScript snippet demonstrates how to update the editor settings to modify the local autosave interval. The `wp.data.dispatch` function is used to dispatch an action to the `core/editor` data store, updating the `localAutosaveInterval` setting to a specified value.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/editor/src/components/local-autosave-monitor/README.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nwp.data.dispatch( 'core/editor' ).updateEditorSettings( {\n\tlocalAutosaveInterval: 100000000000,\n} );\n```\n\n----------------------------------------\n\nTITLE: Configuring wp-env Port - Shell\nDESCRIPTION: This command sets the port for the wp-env local environment, preventing conflicts with other services.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/env/README.md#2025-04-21_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\n$ WP_ENV_PORT=3333 wp-env start\n```\n\n----------------------------------------\n\nTITLE: Linting package.json Files with wp-scripts\nDESCRIPTION: This snippet illustrates configuring the `lint-pkg-json` script in `package.json` to enforce standards for `package.json` files using `wp-scripts` and `npm-package-json-lint`. Examples are provided for linting the entire project and a specific source directory, which are executed using `npm run lint:pkg-json` and `npm run lint:pkg-json:src`.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/scripts/README.md#2025-04-21_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"scripts\": {\n\t\t\"lint:pkg-json\": \"wp-scripts lint-pkg-json\",\n\t\t\"lint:pkg-json:src\": \"wp-scripts lint-pkg-json ./src\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New User - JavaScript\nDESCRIPTION: Creates a new user account with specified username and optional settings. This is important for testing user role and permissions.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/e2e-test-utils/README.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nasync function createUser(username, object) {\n    // logic to create a new user\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Custom Text Color in WordPress Gutenberg\nDESCRIPTION: This snippet shows how to set a default custom text color for a block in WordPress Gutenberg using a hex color value.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-supports.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nattributes: {\n    style: {\n        type: 'object',\n        default: {\n            color: {\n                text: '#aabbcc',\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Unnecessary Client-Side State Initialization\nDESCRIPTION: An example of redundant state initialization in JavaScript that should be avoided when the state is already initialized on the server.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/core-concepts/server-side-rendering.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nstore( 'myFruitPlugin', {\n\tstate: {\n\t\tfruits: [ 'Apple', 'Banana', 'Cherry' ], // This is not necessary!\n\t},\n} );\n```\n\n----------------------------------------\n\nTITLE: Router Region HTML Implementation\nDESCRIPTION: Example of using the data-wp-router-region directive to define a region that updates during navigation.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/interactivity-router/README.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div data-wp-interactive=\"myblock\" data-wp-router-region=\"main-list\">\n  <ul>\n     <li><a href=\"/post-1\">Post 1</a></li>\n     <li><a href=\"/post-2\">Post 2</a></li>\n     <li><a href=\"/post-3\">Post 3</a></li>\n  </ul>\n  <a data-wp-on--click=\"actions.navigate\" href=\"/page/2\">Page 2</a>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Clicking Block Toolbar Button - JavaScript\nDESCRIPTION: Simulates a click on a block toolbar button identified by its label. This utility helps automate interactions with the block editor.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/e2e-test-utils/README.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nasync function clickBlockToolbarButton(label, type) {\n    // logic to click block toolbar button\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Interactive Block using create-block\nDESCRIPTION: This command uses the `@wordpress/create-block` tool to scaffold a new WordPress block based on the interactive template. It simplifies the process of setting up an interactive block project with predefined structure and dependencies.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/create-block-interactive-template/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @wordpress/create-block --template @wordpress/create-block-interactive-template\n```\n\n----------------------------------------\n\nTITLE: Warn if useSelect hook returns different values\nDESCRIPTION: This note emphasizes a new warning feature if the useSelect hook returns different values under the same parameters, added in the 9.10.0 release.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/data/CHANGELOG.md#2025-04-21_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n-   Warn if the `useSelect` hook returns different values when called with the same state and parameters ([#53666](https://github.com/WordPress/gutenberg/pull/53666)).\n```\n\n----------------------------------------\n\nTITLE: Triggering Invalid Delete Operation in React Component\nDESCRIPTION: This snippet demonstrates how to trigger an invalid delete operation by multiplying the pageId by a large number, which will cause the deletion to fail and display an error message.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/data-basics/5-adding-a-delete-button.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nfunction DeletePageButton( { pageId, onCancel, onSaveFinished } ) {\n\tpageId = pageId * 1000;\n\t// ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Gutenberg Paragraph Block\nDESCRIPTION: This snippet demonstrates the structure of a Gutenberg paragraph block in HTML. It includes the necessary HTML comments used by WordPress to identify and render the block. The paragraph contains strong text.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/test/e2e/specs/editor/various/__snapshots__/RTL-should-navigate-inline-boundaries-1-chromium.txt#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- wp:paragraph -->\n<p><strong>١</strong>٠٢</p>\n<!-- /wp:paragraph -->\n```\n\n----------------------------------------\n\nTITLE: Implementing RadioControl Component in React for User Type Selection\nDESCRIPTION: This example demonstrates how to implement a RadioControl component to select a user type. It uses React's useState hook to manage the selected option and renders radio buttons for Author and Editor options.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/radio-control/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { RadioControl } from '@wordpress/components';\nimport { useState } from 'react';\n\nconst MyRadioControl = () => {\n\tconst [ option, setOption ] = useState( 'a' );\n\n\treturn (\n\t\t<RadioControl\n\t\t\tlabel=\"User type\"\n\t\t\thelp=\"The type of the current user\"\n\t\t\tselected={ option }\n\t\t\toptions={ [\n\t\t\t\t{ label: 'Author', value: 'a' },\n\t\t\t\t{ label: 'Editor', value: 'e' },\n\t\t\t] }\n\t\t\tonChange={ ( value ) => setOption( value ) }\n\t\t/>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Diff Snapshot Testing with Jest (JSX)\nDESCRIPTION: This example shows how to use the toMatchDiffSnapshot function from the snapshot-diff package to test the difference between two states of a component. It renders a CardBody component with different props and snapshots the difference.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/testing-overview.md#2025-04-21_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\ntest( 'should render a darker background when isShady is true', () => {\n\tconst { container } = render( <CardBody>Body</CardBody> );\n\tconst { container: containerShady } = render(\n\t\t<CardBody isShady>Body</CardBody>\n\t);\n\texpect( container ).toMatchDiffSnapshot( containerShady );\n} );\n```\n\n----------------------------------------\n\nTITLE: Defining Styles in theme.json for WordPress 5.8\nDESCRIPTION: This JSON snippet defines the supported styles in WordPress 5.8 using the `theme.json` file.  It shows how to set values for border, filter, color, spacing, typography, and elements like links and headings.  The styles are categorized and organized to provide a structured approach to theme customization.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/themes/global-settings-and-styles.md#2025-04-21_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"version\": 3,\n\t\"styles\": {\n\t\t\"border\": {\n\t\t\t\"radius\": \"value\",\n\t\t\t\"color\": \"value\",\n\t\t\t\"style\": \"value\",\n\t\t\t\"width\": \"value\"\n\t\t},\n\t\t\"filter\": {\n\t\t\t\"duotone\": \"value\"\n\t\t},\n\t\t\"color\": {\n\t\t\t\"background\": \"value\",\n\t\t\t\"gradient\": \"value\",\n\t\t\t\"text\": \"value\"\n\t\t},\n\t\t\"spacing\": {\n\t\t\t\"blockGap\": \"value\",\n\t\t\t\"margin\": {\n\t\t\t\t\"top\": \"value\",\n\t\t\t\t\"right\": \"value\",\n\t\t\t\t\"bottom\": \"value\",\n\t\t\t\t\"left\": \"value\",\n\t\t\t},\n\t\t\t\"padding\": {\n\t\t\t\t\"top\": \"value\",\n\t\t\t\t\"right\": \"value\",\n\t\t\t\t\"bottom\": \"value\",\n\t\t\t\t\"left\": \"value\"\n\t\t\t}\n\t\t},\n\t\t\"typography\": {\n\t\t\t\"fontSize\": \"value\",\n\t\t\t\"fontStyle\": \"value\",\n\t\t\t\"fontWeight\": \"value\",\n\t\t\t\"letterSpacing\": \"value\",\n\t\t\t\"lineHeight\": \"value\",\n\t\t\t\"textDecoration\": \"value\",\n\t\t\t\"textTransform\": \"value\"\n\t\t},\n\t\t\"elements\": {\n\t\t\t\"link\": {\n\t\t\t\t\"border\": {},\n\t\t\t\t\"color\": {},\n\t\t\t\t\"spacing\": {},\n\t\t\t\t\"typography\": {}\n\t\t\t},\n\t\t\t\"h1\": {},\n\t\t\t\"h2\": {},\n\t\t\t\"h3\": {},\n\t\t\t\"h4\": {},\n\t\t\t\"h5\": {},\n\t\t\t\"h6\": {}\n\t\t},\n\t\t\"blocks\": {\n\t\t\t\"core/group\": {\n\t\t\t\t\"border\": {},\n\t\t\t\t\"color\": {},\n\t\t\t\t\"spacing\": {},\n\t\t\t\t\"typography\": {},\n\t\t\t\t\"elements\": {\n\t\t\t\t\t\"link\": {},\n\t\t\t\t\t\"h1\": {},\n\t\t\t\t\t\"h2\": {},\n\t\t\t\t\t\"h3\": {},\n\t\t\t\t\t\"h4\": {},\n\t\t\t\t\t\"h5\": {},\n\t\t\t\t\t\"h6\": {}\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"etc\": {}\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Snapshot Testing with Expectations in Jest (JSX)\nDESCRIPTION: This snippet demonstrates how to combine snapshot testing with specific expectations in a Jest test. It renders a SolarSystem component and checks for both unintended changes and the presence of specific text.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/testing-overview.md#2025-04-21_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\ntest( 'should contain mars if planets is true', () => {\n\tconst { container } = render( <SolarSystem planets /> );\n\n\t// Snapshot will catch unintended changes\n\texpect( container ).toMatchSnapshot();\n\n\t// This is what we actually expect to find in our test\n\texpect( screen.getByText( /mars/i ) ).toBeInTheDocument();\n} );\n```\n\n----------------------------------------\n\nTITLE: Using unlockPostSaving in WordPress Gutenberg Editor\nDESCRIPTION: This code snippet shows how to unlock post saving with a specific lock key in the WordPress Gutenberg editor using the core/editor store.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core-editor.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// Unlock post saving with the lock key `mylock`:\nwp.data.dispatch( 'core/editor' ).unlockPostSaving( 'mylock' );\n```\n\n----------------------------------------\n\nTITLE: Enabling Duotone Support in WordPress Gutenberg (JavaScript)\nDESCRIPTION: This snippet enables duotone support for a block by updating the `supports` property. Additionally, it defines a selector for applying the duotone filter to image elements within the block.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-supports.md#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nsupports: {\n    filter: {\n        // Enable duotone support\n        duotone: true\n    }\n},\nselectors: {\n    filter: {\n        // Apply the filter to img elements inside the image block\n        duotone: '.wp-block-image img'\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using DuotonePicker and DuotoneSwatch in React\nDESCRIPTION: This snippet demonstrates how to use the DuotonePicker and DuotoneSwatch components in a React application. It includes the necessary imports, setup of color palettes, and a functional component example.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/duotone-picker/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { DuotonePicker, DuotoneSwatch } from '@wordpress/components';\n\nconst DUOTONE_PALETTE = [\n\t{ colors: [ '#8c00b7', '#fcff41' ], name: 'Purple and yellow', slug: 'purple-yellow' },\n\t{ colors: [ '#000097', '#ff4747' ], name: 'Blue and red', slug: 'blue-red' },\n];\n\nconst COLOR_PALETTE = [\n\t{ color: '#ff4747', name: 'Red', slug: 'red' },\n\t{ color: '#fcff41', name: 'Yellow', slug: 'yellow' },\n\t{ color: '#000097', name: 'Blue', slug: 'blue' },\n\t{ color: '#8c00b7', name: 'Purple', slug: 'purple' },\n];\n\nconst Example = () => {\n\tconst [ duotone, setDuotone ] = useState( [ '#000000', '#ffffff' ] );\n\treturn (\n\t\t<>\n\t\t\t<DuotonePicker\n\t\t\t\tduotonePalette={ DUOTONE_PALETTE }\n\t\t\t\tcolorPalette={ COLOR_PALETTE }\n\t\t\t\tvalue={ duotone }\n\t\t\t\tonChange={ setDuotone }\n\t\t\t/>\n\t\t\t<DuotoneSwatch values={ duotone } />\n\t\t</>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Enabling Block Based Template Parts\nDESCRIPTION: PHP code to enable block-based template parts in non-block themes. This feature allows administrators to edit parts of the site using blocks, but does not allow creating new or deleting existing template parts.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/themes/theme-support.md#2025-04-21_snippet_33\n\nLANGUAGE: php\nCODE:\n```\nadd_theme_support( 'block-template-parts' );\n```\n\n----------------------------------------\n\nTITLE: Verifying Post Editability in JavaScript\nDESCRIPTION: This function checks if the post can be saved by examining if it contains a title, an excerpt, or non-empty content.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core-editor.md#2025-04-21_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nisEditedPostSaveable( state ) {\n    // Implementation not shown\n    return true; // Whether the post can be saved\n}\n```\n\n----------------------------------------\n\nTITLE: New Debounce Utility\nDESCRIPTION: Introduces an in-house `debounce()` utility to replace the previous Lodash version, improving performance and reducing dependencies on external libraries.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/compose/CHANGELOG.md#2025-04-21_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n-   Compose: Introduce an in-house `debounce()` utility, deprecate Lodash version ([#43943](https://github.com/WordPress/gutenberg/pull/43943)).\n```\n\n----------------------------------------\n\nTITLE: Markdown Support Table for Content Paste Handling\nDESCRIPTION: Detailed support table showing paste handling capabilities across different content sources like Google Docs, Apple Pages, MS Word, and others. The table covers formatting, headings, lists, images, separators, tables, and footnotes support.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/blocks/src/api/raw-handling/readme.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Source           | Formatting | Headings | Lists | Image | Separator | Table | Footnotes, endnotes |\n| ---------------- | ---------- | -------- | ----- | ----- | --------- | ----- | ------------------- |\n| Google Docs      | ✓          | ✓        | ✓     | ✓     | ✓         | ✓     | ✘ [1]               |\n| Apple Pages      | ✓          | ✘ [2]    | ✓     | ✘ [2] | n/a       | ✓     | ✘ [1]               |\n| MS Word          | ✓          | ✓        | ✓     | ✘ [3] | n/a       | ✓     | ✓                   |\n| MS Word Online   | ✓          | ✘ [4]    | ✓     | ✓     | n/a       | ✓     | ✘ [1]               |\n| LibreOffice      | ✓          | ✓        | ✓     | ✘ [3] | ✓         | ✓     | ✓                   |\n| Evernote         | ✓          | ✘ [5]    | ✓     | ✓     | ✓         | ✓     | n/a                 |\n| Markdown         | ✓          | ✓        | ✓     | ✓     | ✓         | ✓     | n/a                 |\n| Legacy WordPress | ✓          | ✓        | ✓     | … [6] | ✓         | ✓     | n/a                 |\n| Web              | ✓          | ✓        | ✓     | ✓     | ✓         | ✓     | n/a                 |\n```\n\n----------------------------------------\n\nTITLE: Disabling Font Library in PHP\nDESCRIPTION: Demonstrates how to disable the Font Library feature using the 'block_editor_settings_all' filter.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/filters/editor-filters.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nadd_filter( 'block_editor_settings_all', 'example_disable_font_library' );\n\nfunction example_disable_font_library( $settings ) {\n\t$settings['fontLibraryEnabled'] = false;\n\treturn $settings;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Sync Provider in JavaScript\nDESCRIPTION: This code snippet illustrates how to update the sync provider when changes are made to an entity record. It broadcasts changes to other peers in the collaborative editing session.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/sync/CODE.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ngetSyncProvider().update( ... )\n```\n\n----------------------------------------\n\nTITLE: Overriding Specific Translation Using i18n.gettext Filter in JavaScript\nDESCRIPTION: Demonstrates how to use the i18n.gettext filter to override a specific translation. The example changes the text 'Create Reusable block' to 'Save to MyOrg block library'.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/filters/i18n-filters.md#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n// Define our filter callback.\nfunction myPluginGettextFilter( translation, text, domain ) {\n\tif ( text === 'Create Reusable block' ) {\n\t\treturn 'Save to MyOrg block library';\n\t}\n\treturn translation;\n}\n\n// Adding the filter\nwp.hooks.addFilter(\n\t'i18n.gettext',\n\t'my-plugin/override-add-to-reusable-blocks-label',\n\tmyPluginGettextFilter\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering a WordPress Icon in JSX\nDESCRIPTION: Example of how to import and use the WordPress icon from the @wordpress/icons package with the Icon component.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/icon/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { wordpress } from '@wordpress/icons';\n\n<Icon icon={ wordpress } />\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Build Scripts in package.json\nDESCRIPTION: Example of custom build script configurations in package.json, showing different options for the build command.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/scripts/README.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"scripts\": {\n\t\t\"build\": \"wp-scripts build\",\n\t\t\"build:custom\": \"wp-scripts build entry-one.js entry-two.js --output-path=custom\",\n\t\t\"build:copy-php\": \"wp-scripts build --webpack-copy-php\",\n\t\t\"build:custom-directory\": \"wp-scripts build --source-path=custom-directory\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Serializing Blocks to HTML in WordPress Gutenberg\nDESCRIPTION: This snippet demonstrates how to convert a block list object to HTML using the serialize function from the @wordpress/blocks package. It takes an array of block objects with name and attributes properties and outputs the corresponding HTML.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/platform-docs/docs/basic-concepts/rendering.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { serialize } from '@wordpress/blocks';\n\nconst blockList = [\n    {\n        name: 'core/paragraph',\n        attributes: {\n            content: 'Hello world!',\n        },\n    },\n];\n\nconst html = serialize( blockList );\n```\n\n----------------------------------------\n\nTITLE: Accessing Global State in JavaScript\nDESCRIPTION: Shows different ways to access the global state in JavaScript using the store function. This can be done by retrieving the entire store object or by destructuring to get direct access to the state property.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/core-concepts/undestanding-global-state-local-context-and-derived-state.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst myPluginStore = store( 'myPlugin' );\n\nmyPluginStore.state; // This is the state of the 'myPlugin' namespace.\n```\n\n----------------------------------------\n\nTITLE: Disabling Settings in LinkControl\nDESCRIPTION: This snippet illustrates how to disable link settings in the <LinkControl> component by passing an empty array to the settings prop. No other dependencies are needed aside from React. The key parameter is settings, which when empty, removes toggled settings. Behavior returns to a default state without additional settings applied.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/src/components/link-control/README.md#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<LinkControl settings={ [] } />\n```\n\n----------------------------------------\n\nTITLE: Starting WordPress Environment with wp-env\nDESCRIPTION: Command reference for wp-env start command showing available options including debug mode, updates, and Xdebug configuration.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/env/README.md#2025-04-21_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\nwp-env start\n\nStarts WordPress for development on port 8888 (​http://localhost:8888​)\n(override with WP_ENV_PORT) and tests on port 8889 (​http://localhost:8889​)\n(override with WP_ENV_TESTS_PORT). The current working directory must be a\nWordPress installation, a plugin, a theme, or contain a .wp-env.json file. After\nfirst install, use the '--update' flag to download updates to mapped sources and\nto re-apply WordPress configuration options.\n\nOptions:\n  --debug    Enable debug output.                     [boolean] [default: false]\n  --update   Download source updates and apply WordPress configuration.\n                                                      [boolean] [default: false]\n  --xdebug   Enables Xdebug. If not passed, Xdebug is turned off. If no modes\n             are set, uses \"debug\". You may set multiple Xdebug modes by passing\n             them in a comma-separated list: `--xdebug=develop,coverage`. See\n             https://xdebug.org/docs/all_settings#mode for information about\n             Xdebug modes.                                              [string]\n  --scripts  Execute any configured lifecycle scripts. [boolean] [default: true]\n```\n\n----------------------------------------\n\nTITLE: Installing DOM Utilities Module\nDESCRIPTION: NPM installation command for the WordPress DOM utilities package. Allows developers to add DOM manipulation capabilities to their WordPress Gutenberg projects.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/dom/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @wordpress/dom --save\n```\n\n----------------------------------------\n\nTITLE: Importing SCSS Styles with Webpack\nDESCRIPTION: This line demonstrates how to import SCSS styles from the @wordpress/base-styles package when using Webpack. The `~` alias allows Webpack to resolve the path to the `node_modules` directory, simplifying the import statement.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/base-styles/README.md#2025-04-21_snippet_2\n\nLANGUAGE: scss\nCODE:\n```\n\"@import '~@wordpress/base-styles/colors';\"\n```\n\n----------------------------------------\n\nTITLE: Targeting Space-Between Justified Content Blocks in CSS\nDESCRIPTION: This CSS selector targets blocks that explicitly set their content justification to space-between. It uses a semantic class name output by the Layout block support.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/explanations/architecture/styles.md#2025-04-21_snippet_19\n\nLANGUAGE: css\nCODE:\n```\n.is-content-justification-space-between {\n  /* styles here */\n}\n```\n\n----------------------------------------\n\nTITLE: WordPress Color CSS Custom Properties\nDESCRIPTION: Shows how to override core color values using CSS Custom Properties in themes without theme.json.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/themes/theme-support.md#2025-04-21_snippet_6\n\nLANGUAGE: css\nCODE:\n```\n:root {\n\t--wp--preset--color--cyan-bluish-gray: <new_value>;\n\t--wp--preset--color--pale-pink: <new_value>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Content Model for HTML Transformation in JavaScript\nDESCRIPTION: This example shows how to define a custom content model schema for transforming specific HTML structures into custom blocks. It demonstrates allowing inner h2 and p elements with phrasing content.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-transforms.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nschema = ({ phrasingContentSchema }) => {\n    div: {\n        required: true,\n        attributes: [ 'data-post-id' ],\n        children: {\n            h2: { children: phrasingContentSchema },\n            p: { children: phrasingContentSchema }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Color Support in block.json\nDESCRIPTION: Example configuration in block.json that enables text, link, and background color customization options for a WordPress block. This configuration allows users to modify these color properties through the Settings Sidebar.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/getting-started/fundamentals/block-json.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"supports\": {\n\t\"color\": {\n\t\t\"text\": true,\n\t\t\"link\": true,\n\t\t\"background\": true\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Ensuring Unique LinkControl Instances in React\nDESCRIPTION: This snippet ensures each <LinkControl> instance is unique using the key prop, which forces React to remount a new instance and avoids state leaking between components. There are no required dependencies other than React and props. The main parameter is the key, which must be unique. No inputs and outputs are specified, but this technique is crucial to prevent prop value issues in the UI.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/src/components/link-control/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<LinkControl key=\"some-unique-key\" { ...props } />\n```\n\n----------------------------------------\n\nTITLE: Generating Custom CSS Properties from theme.json in WordPress\nDESCRIPTION: This CSS snippet shows the output of custom CSS properties defined in theme.json, including global and block-specific properties.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/themes/global-settings-and-styles.md#2025-04-21_snippet_8\n\nLANGUAGE: css\nCODE:\n```\nbody {\n\t--wp--custom--base-font: 16;\n\t--wp--custom--line-height--small: 1.2;\n\t--wp--custom--line-height--medium: 1.4;\n\t--wp--custom--line-height--large: 1.8;\n}\n.wp-block-group {\n\t--wp--custom--base-font: 32;\n}\n```\n\n----------------------------------------\n\nTITLE: Action Creator: installBlockType\nDESCRIPTION: This action creator triggers the installation process of a block plugin. It requires a block item object returned by the search and returns a boolean indicating the success of the installation.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-directory/README.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Action creator\nfunction installBlockType(block) {\n    // installation logic here...\n    return true; // indicate success\n}\n```\n\n----------------------------------------\n\nTITLE: Adding block attributes to Copyright Date Block\nDESCRIPTION: Defines attributes in block.json for storing the starting year and whether to display it.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/getting-started/tutorial.md#2025-04-21_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n\"example\": {},\n\"attributes\": {\n\t\"showStartingYear\": {\n\t\t\"type\": \"boolean\"\n\t},\n\t\"startingYear\": {\n\t\t\"type\": \"string\"\n\t}\n},\n```\n\n----------------------------------------\n\nTITLE: Display Shortcut List Example\nDESCRIPTION: Example showing how to use the displayShortcutList utility to get an array of shortcut chord parts for display.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/keycodes/README.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ndisplayShortcutList.primary( 'm' );\n// [ \"⌘\", \"M\" ]\n```\n\n----------------------------------------\n\nTITLE: CSS Output for Styled Block Variation in WordPress\nDESCRIPTION: The resulting CSS output from the theme.json configuration for the 'plain' variation of the 'core/quote' block. This applies a red background to the plain quote style.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/themes/global-settings-and-styles.md#2025-04-21_snippet_20\n\nLANGUAGE: css\nCODE:\n```\n.wp-block-quote.is-style-plain {\n\tbackground-color: red;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Snapshot Testing Example in React\nDESCRIPTION: Simple example demonstrating how to create and use snapshot tests for basic data structures.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/testing-overview.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ntest( 'foobar test', () => {\n\tconst foobar = { foo: 'bar' };\n\n\texpect( foobar ).toMatchSnapshot();\n} );\n```\n\n----------------------------------------\n\nTITLE: Displaying Gutenberg Repository Folder Structure\nDESCRIPTION: A detailed directory tree representation showing the entire folder structure of the Gutenberg repository with annotations explaining the purpose of each file and directory. This includes configuration files, source code locations, documentation, and testing infrastructure.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/folder-structure.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n    │\n    ├── LICENSE\n    ├── README.md\n    ├── SECURITY.md\n    ├── CONTRIBUTING.md\n    │\n    ├── .editorconfig\n    ├── .eslintignore\n    ├── .eslintrc\n    ├── .jshintignore\n    ├── .eslintignore\n    ├── .prettierrc.js\n    ├── .stylelintignore\n    ├── .stylelintrc.js\n    ├── .markdownlintignore\n    ├── .npmpackagejsonlintrc.json\n    ├── phpcs.xml.dist\n    │   Dot files and config files used to configure the various linting tools\n    │   used in the repository (PHP, JS, styles...).\n    │\n    ├── .browserslistrc\n    ├── babel.config.js\n    ├── jsconfig.json\n    ├── tsconfig.json\n    ├── tsconfig.base.json\n    ├── webpack.config.js\n    │   Transpilation and bundling Config files.\n    │\n    ├── .wp-env.json\n    │   Config file for the development and testing environment.\n    │   Includes WordPress and the Gutenberg plugin.\n    │\n    ├── composer.lock\n    ├── composer.json\n    │   Handling of PHP dependencies. Essentially used for development tools.\n    │   The production code don't use external PHP dependencies.\n    │\n    ├── package-lock.json\n    ├── package.json\n    │\tHandling of JavaScript dependencies. Both for development tools and\n    │   production dependencies.\n    │   The package.json also serves to define common tasks and scripts\n    |   used for day to day development.\n    │\n    ├── changelog.txt\n    ├── readme.txt\n    │   Readme and Changelog of the Gutenberg plugin hosted on the WordPress\n    │   plugin repository.\n    │\n    ├── gutenberg.php\n    │   Entry point of the Gutenberg plugin.\n    │\n    ├── post-content.php\n    │   Demo post content used on the Gutenberg plugin to showcase the editor.\n    │\n    ├── .github/*\n    │   Config of the different GitHub features (issues and PR templates, CI, owners).\n    │\n    ├── bin/api-docs\n    │   Tool/script used to generate the API Docs.\n    │\n    ├── bin/packages\n    │   Set of scripts used to build the WordPress packages.\n    │\n    ├── bin/plugin\n    │   Tool use to perform the Gutenberg plugin release and the npm releases as well.\n    │\n    ├── docs/tool\n    │   Tool used to generate the Block editor handbook's markdown pages.\n    │\n    ├── docs/*.md\n    │   Set of documentation pages composing the [Block editor handbook](https://developer.wordpress.org/block-editor/).\n    │\n    ├── platform-docs\n    │   Documentation website targeted to non WordPress developers\n    │   using Gutenberg in their own applications.\n    │   Deployed on [https://wordpress.org/gutenberg-framework/](https://wordpress.org/gutenberg-framework/).\n    │\n    │\n    ├── lib\n    │   PHP Source code of the Gutenberg plugin.\n    │\n    ├── lib/compact/wordpress-x.x\n    │   PHP code that was include in WordPress ont the WordPrexx X.X version.\n    │   It is kept to ensure plugin compatibility with older WordPress versions.\n    │\n    ├── packages\n    │   Source code of the WordPress packages.\n    │   Packages can be:\n    │    - Production JavaScript scripts and styles loaded on WordPress\n    │      and the Gutenberg plugin or distributed as npm packages.\n    │    - Development tools available on npm.\n    │\n    ├── packages/{packageName}/package.json\n    │   Dependencies of the current package.\n    │\n    ├── packages/{packageName}/CHANGELOG.md\n    ├── packages/{packageName}/README.md\n    │\n    ├── packages/{packageName}/src/**/*.js\n    ├── packages/{packageName}/src/**/*.scss\n    │   Source code of a given package.\n    |\n    ├── packages/{packageName}/src/**/*.test.js\n    │   JavaScript unit tests.\n    |\n    ├── packages/{packageName}/src/**/{ComponentName}/index.js\n    │   Entry point of a given component.\n    |\n    ├── packages/{packageName}/src/**/{ComponentName}/style.scss\n    │   Style entry point for a given component.\n    │\n    ├── packages/{packageName}/src/**/{ComponentName}/stories/*.js\n    │   Component Stories to load on the Gutenberg storybook.\n    │\n    ├── phpunit\n    │   Unit tests for the PHP code of the Gutenberg plugin.\n    │\n    ├── storybook\n    │   Config of the [Gutenberg Storybook](https://wordpress.github.io/gutenberg/).\n    │\n    ├── test/integration\n    │   Set of WordPress packages integration tests.\n    │\n    ├── test/native\n    │   Configuration for the Gutenberg Mobile unit tests.\n    │\n    ├── test/unit\n    │   Configuration for the Packages unit tests.\n    │\n    ├── test/e2e\n    │   End-2-end tests of the Gutenberg plugin.\n    │\n    ├── test/performance\n    │   Performance metrics. Results are tracked on the [Gutenberg performance dashboard](https://codevitals.run/project/gutenberg).\n    │\n    ├── tools/eslint\n    │   Configuration files for the ESLint linter.\n    │\n    ├── tools/webpack\n    │   Configuration files for the webpack build.\n```\n\n----------------------------------------\n\nTITLE: Command Store Selectors\nDESCRIPTION: Core selectors for retrieving command data from the store state. Includes functions to get command loaders, commands, context and palette open state.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core-commands.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngetCommandLoaders: ( state: Object, contextual: boolean ) => WPCommandLoaderConfig[]\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngetCommands: ( state: Object, contextual: boolean ) => WPCommandConfig[]\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngetContext: ( state: Object ) => string\n```\n\nLANGUAGE: javascript\nCODE:\n```\nisOpen: ( state: Object ) => boolean\n```\n\n----------------------------------------\n\nTITLE: Starting the Local Environment - Shell\nDESCRIPTION: This command sequence initiates the wp-env local environment for a WordPress plugin or theme after verifying that Docker is running.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/env/README.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n$ cd ~/gutenberg\n$ wp-env start\n```\n\n----------------------------------------\n\nTITLE: Adding viewScriptModule Support in block.json\nDESCRIPTION: Adds experimental support for the viewScriptModule field in block.json for build and start scripts.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/scripts/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n\"viewScriptModule\": \"path/to/view-script.js\"\n```\n\n----------------------------------------\n\nTITLE: Using removep Function in JavaScript\nDESCRIPTION: Example of importing and using the removep function from the @wordpress/autop package to convert HTML paragraphs back into plain text with line breaks.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/autop/README.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { removep } from '@wordpress/autop';\nremovep( '<p>my text</p>' ); // \"my text\"\n```\n\n----------------------------------------\n\nTITLE: Plugin Sidebar CSS Styling\nDESCRIPTION: CSS styles for the plugin sidebar content area.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/plugin-sidebar-0.md#2025-04-21_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n.plugin-sidebar-content {\n\tpadding: 16px;\n}\n```\n\n----------------------------------------\n\nTITLE: React Version Update\nDESCRIPTION: This snippet describes a breaking change in Gutenberg v6.0.0, where dependencies were updated to require React 18.  This necessitates updating React in the project to version 18.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/e2e-tests/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: None\nCODE:\n```\nUpdated dependencies to require React 18 ([45235](https://github.com/WordPress/gutenberg/pull/45235))\n```\n\n----------------------------------------\n\nTITLE: Defining Content Display - Gutenberg (Markdown)\nDESCRIPTION: This snippet defines the block for displaying the contents of a post or page. It includes various support options for color, spacing, and typography.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/core-blocks.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n- **Name:** core/post-content\n- **Category:** theme\n- **Supports:** align (full, wide), background (backgroundImage, backgroundSize), color (background, gradients, heading, link, text), dimensions (minHeight), layout, spacing (blockGap, margin, padding), typography (fontSize, lineHeight), ~~html~~\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Font Sizes in WordPress Themes\nDESCRIPTION: This PHP snippet shows how to add custom font sizes to the WordPress block editor using the 'editor-font-sizes' theme support. It defines four font sizes with names, pixel values, and unique slugs.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/themes/theme-support.md#2025-04-21_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nadd_theme_support( 'editor-font-sizes', array(\n\tarray(\n\t\t'name' => esc_attr__( 'Small', 'themeLangDomain' ),\n\t\t'size' => 12,\n\t\t'slug' => 'small'\n\t),\n\tarray(\n\t\t'name' => esc_attr__( 'Regular', 'themeLangDomain' ),\n\t\t'size' => 16,\n\t\t'slug' => 'regular'\n\t),\n\tarray(\n\t\t'name' => esc_attr__( 'Large', 'themeLangDomain' ),\n\t\t'size' => 36,\n\t\t'slug' => 'large'\n\t),\n\tarray(\n\t\t'name' => esc_attr__( 'Huge', 'themeLangDomain' ),\n\t\t'size' => 50,\n\t\t'slug' => 'huge'\n\t)\n) );\n```\n\n----------------------------------------\n\nTITLE: PHP: Initializing State with Shopping List\nDESCRIPTION: Initializes the state with both `fruits` and `shoppingList` arrays in PHP using `wp_interactivity_state`. This sets up the data structure required for determining which fruits are on the shopping list.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/core-concepts/server-side-rendering.md#2025-04-21_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nwp_interactivity_state( 'myFruitPlugin', array(\n  'fruits'        => array( 'Apple', 'Banana', 'Cherry' ),\n  'shoppingList'  => array( 'Apple', 'Cherry' ),\n));\n```\n\n----------------------------------------\n\nTITLE: Persisting Blocks in WordPress Block Editor using localStorage\nDESCRIPTION: This function demonstrates how to save block data to localStorage in the WordPress Block Editor. It updates the blocks state and serializes the blocks before storing them.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/platform/custom-block-editor.md#2025-04-21_snippet_13\n\nLANGUAGE: js\nCODE:\n```\nfunction persistBlocks( newBlocks ) {\n\tupdateBlocks( newBlocks );\n\twindow.localStorage.setItem( 'getdavesbeBlocks', serialize( newBlocks ) );\n}\n```\n\n----------------------------------------\n\nTITLE: Building and Serving E2E Storybook\nDESCRIPTION: This snippet provides the command to build and serve the E2E Storybook locally, a prerequisite step before running the visual regression tests.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/test/storybook-playwright/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm run storybook:e2e:dev\n```\n\n----------------------------------------\n\nTITLE: Block HTML with Formatted Copyright Date\nDESCRIPTION: Shows the HTML markup with the formatted copyright date after implementing the updated save function. The date now shows as a range when starting year is provided.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/getting-started/tutorial.md#2025-04-21_snippet_23\n\nLANGUAGE: html\nCODE:\n```\n<!-- wp:create-block/copyright-date-block {\"showStartingYear\":true,\"startingYear\":\"2017\"} -->\n<p class=\"wp-block-create-block-copyright-date-block\">© 2017–2023</p>\n<!-- /wp:create-block/copyright-date-block -->\n```\n\n----------------------------------------\n\nTITLE: CSS Structure for Custom Link Colors\nDESCRIPTION: CSS structure showing how custom link colors are applied in WordPress. When a user sets a link color, WordPress generates this CSS with a unique identifier to style links within a block.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/themes/theme-support.md#2025-04-21_snippet_29\n\nLANGUAGE: css\nCODE:\n```\n.wp-elements-<uuid> a {\n\tcolor: <link-color> !important;\n}\n```\n\n----------------------------------------\n\nTITLE: Converting DropdownMenu to TypeScript\nDESCRIPTION: This snippet documents the conversion of the `DropdownMenu` component to TypeScript within the Gutenberg project.  The move to TypeScript aims to enhance code quality, maintainability, and type safety by utilizing static typing and interface definitions.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/CHANGELOG.md#2025-04-21_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"DropdownMenu`: Convert to TypeScript ([#50187](https://github.com/WordPress/gutenberg/pull/50187)).\"\n```\n\n----------------------------------------\n\nTITLE: WordPress Site Editor Navigation Function\nDESCRIPTION: Function to navigate to the Site Editor main page with options to skip the welcome guide. Accepts query string parameters and skipWelcomeGuide boolean flag.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/e2e-test-utils/README.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nvisitSiteEditor( query, skipWelcomeGuide )\n```\n\n----------------------------------------\n\nTITLE: Installing WordPress Preferences Persistence Package\nDESCRIPTION: This snippet shows how to install the WordPress preferences persistence package using npm, which is essential for incorporating the persistence layer for storing user preferences.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/preferences-persistence/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @wordpress/preferences-persistence --save\n```\n\n----------------------------------------\n\nTITLE: Using BlockMover Component\nDESCRIPTION: This code snippet shows how to import and use the BlockMover component within a React component. It imports BlockMover from the `@wordpress/block-editor` package and renders it, passing the `clientId` as a prop within an array. This allows users to move the block with the specified `clientId` within the editor.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/src/components/block-mover/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { BlockMover } from '@wordpress/block-editor';\nconst MyMover = () => <BlockMover clientIds={ [ clientId ] } />;\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Templates in WordPress Theme JSON\nDESCRIPTION: Example of declaring custom templates in theme.json. It specifies a custom template 'my-custom-template' that can be used for pages, posts, and a custom post type.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/themes/global-settings-and-styles.md#2025-04-21_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"version\": 3,\n\t\"customTemplates\": [\n\t\t{\n\t\t\t\"name\": \"my-custom-template\",\n\t\t\t\"title\": \"The template title\",\n\t\t\t\"postTypes\": [\n\t\t\t\t\"page\",\n\t\t\t\t\"post\",\n\t\t\t\t\"my-cpt\"\n\t\t\t]\n\t\t}\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Deprecating Gutenberg Component Example - JavaScript\nDESCRIPTION: Example showing how to properly deprecate a Gutenberg component using the deprecated helper method, including since and plugin metadata.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/backward-compatibility.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndeprecated( 'wp.components.ClipboardButton', {\n\tsince: '10.3',\n\tplugin: 'Gutenberg',\n\talternative: 'wp.compose.useCopyToClipboard',\n} );\n```\n\n----------------------------------------\n\nTITLE: Using RCTAztecView in React Native\nDESCRIPTION: This code demonstrates how to import and use the RCTAztecView component within a React Native application.  It shows how to pass an HTML string to the component for rendering.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/react-native-aztec/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport RCTAztecView from '@wordpress/react-native-aztec';\n\nconst RichText = () => (\n\t<>\n\t\t<RCTAztecView\n\t\t\ttext={ {\n\t\t\t\ttext: '<h1>This is a Heading</h1>',\n\t\t\t\tselection: { start: 0, end: 0 },\n\t\t\t} }\n\t\t/>\n\t</>\n);\n\n```\n\n----------------------------------------\n\nTITLE: Installing JDK for Android Development\nDESCRIPTION: Commands to install the Azul Zulu JDK using Homebrew for Android development.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/react-native/osx-setup-guide.md#2025-04-21_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nbrew tap homebrew/cask-versions\nbrew install --cask zulu11\n```\n\n----------------------------------------\n\nTITLE: Block Directory Actions Documentation\nDESCRIPTION: A collection of action creators for managing block directory operations like installing blocks, handling errors, and tracking installation status.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core-block-directory.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\naddInstalledBlockType(item: Object) => Object\nclearErrorNotice(blockId: string) => Object\nfetchDownloadableBlocks(filterValue: string) => Object\ninstallBlockType(block: Object) => boolean\nreceiveDownloadableBlocks(downloadableBlocks: Array, filterValue: string) => Object\nremoveInstalledBlockType(item: string) => Object\nsetErrorNotice(blockId: string, message: string, isFatal: boolean) => Object\nsetIsInstalling(blockId: string, isInstalling: boolean) => Object\nuninstallBlockType(block: Object)\n```\n\n----------------------------------------\n\nTITLE: Targeting Group Block with Constrained Layout in CSS\nDESCRIPTION: This CSS selector targets a Group block that uses a constrained layout. It demonstrates how to combine block and layout class names for specific styling.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/explanations/architecture/styles.md#2025-04-21_snippet_9\n\nLANGUAGE: css\nCODE:\n```\n.wp-block-group-is-layout-constrained {\n  /* styles here */\n}\n```\n\n----------------------------------------\n\nTITLE: Frontend CSS for WordPress Block\nDESCRIPTION: CSS styles applied on the frontend view, setting a red background for the block.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/block-tutorial/applying-styles-with-stylesheets.md#2025-04-21_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n/* red background */\n.wp-block-gutenberg-examples-example-02-stylesheets {\n\tbackground: #900;\n\tcolor: white;\n\tpadding: 20px;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Text Variants in Text Component\nDESCRIPTION: Shows how to apply style variations to text using the variant prop, with 'muted' being a supported variation option for styling text content.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/text/README.md#2025-04-21_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { __experimentalText as Text } from '@wordpress/components';\n\nfunction Example() {\n\treturn <Text variant=\"muted\">Code is Poetry</Text>;\n}\n```\n\n----------------------------------------\n\nTITLE: Enqueuing Block Variations Script in WordPress\nDESCRIPTION: Example of enqueuing a JavaScript file for block variations in WordPress, demonstrating proper dependency management with wp-blocks package.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/getting-started/fundamentals/javascript-in-the-block-editor.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfunction example_enqueue_block_variations() {\n\twp_enqueue_script(\n\t\t'example-enqueue-block-variations',\n\t\tget_template_directory_uri() . '/assets/js/variations.js',\n\t\tarray( 'wp-blocks' ),\n\t\twp_get_theme()->get( 'Version' ),\n\t\tfalse\n\t);\n}\nadd_action( 'enqueue_block_editor_assets', 'example_enqueue_block_variations' );\n```\n\n----------------------------------------\n\nTITLE: Using TextHighlight Component in React/JSX\nDESCRIPTION: Example showing how to use the TextHighlight component to highlight instances of a specific string within text. In this example, occurrences of 'Gutenberg' will be highlighted in the provided text string.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/text-highlight/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { TextHighlight } from '@wordpress/components';\n\nconst MyTextHighlight = () => (\n\t<TextHighlight\n\t\ttext=\"Why do we like Gutenberg? Because Gutenberg is the best!\"\n\t\thighlight=\"Gutenberg\"\n\t/>\n);\n```\n\n----------------------------------------\n\nTITLE: Restricting Block Locking to Theme Editors in WordPress\nDESCRIPTION: PHP filter that limits block locking/unlocking capabilities to users with theme editing permissions using the edit_theme_options capability check.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/curating-the-editor-experience/block-locking.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nadd_filter( 'block_editor_settings_all', function( $settings ) {\n\t$settings['canLockBlocks'] = current_user_can( 'edit_theme_options' );\n\n\treturn $settings;\n} );\n```\n\n----------------------------------------\n\nTITLE: Configuring requestToHandle for Script Dependencies\nDESCRIPTION: Demonstrates how to customize script handle mapping for WordPress dependencies. The function maps module requests to specific script handles used in WordPress dependency management.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/dependency-extraction-webpack-plugin/README.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Map 'my-module' request to 'my-module-script-handle'\n *\n * @param {string} request Requested module\n *\n * @return {(string|undefined)} Script global\n */\nfunction requestToHandle( request ) {\n\t// Handle imports like `import myModule from 'my-module'`\n\tif ( request === 'my-module' ) {\n\t\t// `my-module` depends on the script with the 'my-module-script-handle' handle.\n\t\treturn 'my-module-script-handle';\n\t}\n}\n\nmodule.exports = {\n\tplugins: [ new DependencyExtractionWebpackPlugin( { requestToHandle } ) ],\n};\n```\n\n----------------------------------------\n\nTITLE: Destroying wp-env Local Environment\nDESCRIPTION: Command to completely remove the local WordPress environment created by wp-env for a specific project.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/getting-started/devenv/get-started-with-wp-env.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nwp-env destroy\n```\n\n----------------------------------------\n\nTITLE: Setting Persistence Layer Action\nDESCRIPTION: Action creator for configuring the preference persistence layer. Takes a persistence layer object that handles getting and setting preference values persistently.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core-preferences.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nsetPersistenceLayer( persistenceLayer: WPPreferencesPersistenceLayer ) => Object\n```\n\n----------------------------------------\n\nTITLE: Defining a Heading Block in Gutenberg\nDESCRIPTION: This snippet shows how to define a heading block in Gutenberg. It utilizes an HTML-like syntax enclosed in HTML comments. The class 'wp-block-heading' is assigned for styling purposes.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/test/e2e/specs/editor/various/__snapshots__/Copy-cut-paste-should-paste-plain-text-in-plain-text-context-when-cross-block-selection-is-copied-1-chromium.txt#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Heading</h2>\n<!-- /wp:heading -->\n```\n\n----------------------------------------\n\nTITLE: Creating Warning Notice with Callback\nDESCRIPTION: Demonstrates creating a warning notice with an onDismiss callback that creates an info notice when the warning is dismissed.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core-notices.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { __ } from '@wordpress/i18n';\nimport { useDispatch } from '@wordpress/data';\nimport { store as noticesStore } from '@wordpress/notices';\nimport { Button } from '@wordpress/components';\n\nconst ExampleComponent = () => {\n\tconst { createWarningNotice, createInfoNotice } =\n\t\tuseDispatch( noticesStore );\n\treturn (\n\t\t<Button\n\t\t\tonClick={ () =>\n\t\t\t\tcreateWarningNotice( __( 'Warning!' ), {\n\t\t\t\t\tonDismiss: () => {\n\t\t\t\t\t\tcreateInfoNotice(\n\t\t\t\t\t\t\t__( 'The warning has been dismissed!' )\n\t\t\t\t\t\t);\n\t\t\t\t\t},\n\t\t\t\t} )\n\t\t\t}\n\t\t>\n\t\t\t{ __( 'Generates a warning notice with onDismiss callback' ) }\n\t\t</Button>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Activating Plugin - JavaScript\nDESCRIPTION: Activates an installed plugin using its slug. This function is useful for ensuring that the required plugins are enabled during testing.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/e2e-test-utils/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nasync function activatePlugin(slug) {\n    // logic to activate plugin\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional export for Gutenberg plugin-only APIs\nDESCRIPTION: Demonstrates how to conditionally export plugin-only APIs that should be excluded from WordPress core. Uses the globalThis.IS_GUTENBERG_PLUGIN flag for Webpack to handle the exclusion.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/coding-guidelines.md#2025-04-21_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n// Using globalThis.IS_GUTENBERG_PLUGIN allows Webpack to exclude this\n// export from WordPress core:\nif ( globalThis.IS_GUTENBERG_PLUGIN ) {\n\texport { doSomethingExciting } from './api';\n}\n```\n\n----------------------------------------\n\nTITLE: Using ifCondition Higher-Order Component in TypeScript\nDESCRIPTION: Examples how to create a component that renders conditionally based on a predicate function, illustrated with a React component that only renders if a property's string length is not zero.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/compose/README.md#2025-04-21_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype Props = { foo: string };\nconst Component = ( props: Props ) => <div>{ props.foo }</div>;\nconst ConditionalComponent = ifCondition( ( props: Props ) => props.foo.length !== 0 )( Component );\n<ConditionalComponent foo=\"\" />; // => null\n<ConditionalComponent foo=\"bar\" />; // => <div>bar</div>;\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js LTS Version with NVM\nDESCRIPTION: Commands to install the latest LTS version of Node.js using NVM, set it as default, and use it for the project.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/react-native/osx-setup-guide.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnvm install 'lts/*'\nnvm alias default 'lts/*' # sets this as the default when opening a new terminal\nnvm use # switches to the project settings\n```\n\n----------------------------------------\n\nTITLE: Implementing Font Family Selection with React in WordPress Gutenberg\nDESCRIPTION: This snippet demonstrates the usage of the FontFamilyControl component from WordPress Gutenberg to allow users to select font families. It uses React hooks to manage the selected font family state and captures changes through a callback function. Dependencies include WordPress block-editor and i18n packages. The component is experimental and subject to change.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/src/components/font-family/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { __experimentalFontFamilyControl as FontFamilyControl } from '@wordpress/block-editor';\nimport { __ } from '@wordpress/i18n';\n\n// ...\n\nconst MyFontFamilyControl = () => {\n\tconst [ fontFamily, setFontFamily ] = useState( '' );\n\n\treturn (\n\t\t<FontFamilyControl\n\t\t\tvalue={ fontFamily }\n\t\t\tonChange={ ( newFontFamily ) => {\n\t\t\t\tsetFontFamily( newFontFamily );\n\t\t\t} }\n\t\t\t__nextHasNoMarginBottom\n\t\t\t__next40pxDefaultSize\n\t\t/>\n\t);\n};\n\n/// ...\n\n<MyFontFamilyControl />\n```\n\n----------------------------------------\n\nTITLE: Restarting wp-env with Updates - Shell\nDESCRIPTION: This command restarts the wp-env local environment and applies updates to the WordPress instance.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/env/README.md#2025-04-21_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\n$ wp-env start --update\n```\n\n----------------------------------------\n\nTITLE: Action Creator: addInstalledBlockType\nDESCRIPTION: This action creator returns an action object used to track newly installed block types. It requires a block item object as a parameter, including the block id and name, and returns an action object to update the state of installed blocks.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-directory/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Action creator\nfunction addInstalledBlockType(item) {\n    return {\n        type: 'ADD_INSTALLED_BLOCK_TYPE',\n        item: item\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Preferences in Gutenberg\nDESCRIPTION: This code snippet initializes default preferences for a WordPress Gutenberg feature by dispatching an action using the preferences store. It uses the setDefaults method to set initial preference values.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/preferences/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { dispatch } from '@wordpress/data';\nimport { store as preferencesStore } from '@wordpress/preferences';\n\nfunction initialize() {\n\t// ...\n\tdispatch( preferencesStore ).setDefaults(\n\t\t'namespace/editor-or-plugin-name',\n\t\t{\n\t\t\tmyBooleanFeature: true,\n\t\t}\n\t);\n\n\t// ...\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering SkipToSelectedBlock Component in React/JSX\nDESCRIPTION: Example showing how to implement the SkipToSelectedBlock component with a clientId prop. The component renders a visually hidden button that allows users to skip to the selected block when clicked.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/src/components/skip-to-selected-block/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nfunction render( { clientId } ) {\n\treturn (\n\t\t<div>\n\t\t\t<SkipToSelectedBlock selectedBlockClientId={ clientId } />\n\t\t</div>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Styling the WordPress Block Editor Background and Text\nDESCRIPTION: This CSS snippet demonstrates how to change the background color and font color of the WordPress block editor. It's applied to the editor content area.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/themes/theme-support.md#2025-04-21_snippet_23\n\nLANGUAGE: css\nCODE:\n```\n/* Add this to your `style-editor.css` file */\nbody {\n\tbackground-color: #d3ebf3;\n\tcolor: #00005d;\n}\n```\n\n----------------------------------------\n\nTITLE: MediaPlaceholder Deprecation\nDESCRIPTION: The `dropZoneUIOnly` prop in the `MediaPlaceholder` component has been deprecated in favor of the `disableMediaButtons` prop. Developers should update their code to use the `disableMediaButtons` prop for future compatibility and to avoid deprecation warnings.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/CHANGELOG.md#2025-04-21_snippet_12\n\n\n\n----------------------------------------\n\nTITLE: Block Experimental Configuration\nDESCRIPTION: JSON configuration to mark a block as experimental in block.json\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-library/README.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"__experimental\": \"true\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Xdebug in VS Code for WordPress Development\nDESCRIPTION: VS Code launch.json configuration for PHP debugging with Xdebug. Sets up port 9003 and maps the Gutenberg plugin directory to the workspace folder.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/env/README.md#2025-04-21_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"name\": \"Listen for XDebug\",\n\t\"type\": \"php\",\n\t\"request\": \"launch\",\n\t\"port\": 9003,\n\t\"pathMappings\": {\n\t\t\"/var/www/html/wp-content/plugins/gutenberg\": \"${workspaceFolder}/\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Targeting No-Wrap Flex Blocks in CSS\nDESCRIPTION: This CSS selector targets blocks that explicitly set their flex-wrap property to nowrap. It uses a semantic class name output by the Layout block support.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/explanations/architecture/styles.md#2025-04-21_snippet_20\n\nLANGUAGE: css\nCODE:\n```\n.is-nowrap {\n  /* styles here */\n}\n```\n\n----------------------------------------\n\nTITLE: Using isInserterOpened Selector in WordPress Gutenberg\nDESCRIPTION: Example showing how to use the isInserterOpened selector to check if the widget inserter is opened. Uses the useSelect hook from @wordpress/data to access the customize-widgets store state.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core-customize-widgets.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { store as customizeWidgetsStore } from '@wordpress/customize-widgets';\nimport { __ } from '@wordpress/i18n';\nimport { useSelect } from '@wordpress/data';\n\nconst ExampleComponent = () => {\n\tconst { isInserterOpened } = useSelect(\n\t\t( select ) => select( customizeWidgetsStore ),\n\t\t[]\n\t);\n\n\treturn isInserterOpened()\n\t\t? __( 'Inserter is open' )\n\t\t: __( 'Inserter is closed.' );\n};\n```\n\n----------------------------------------\n\nTITLE: Ensuring Class Name for List Blocks with blocks.registerBlockType Filter in JavaScript\nDESCRIPTION: This snippet uses the blocks.registerBlockType filter to ensure that List blocks are saved with the canonical generated class name (wp-block-list).\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/filters/block-filters.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction addListBlockClassName( settings, name ) {\n\tif ( name !== 'core/list' ) {\n\t\treturn settings;\n\t}\n\n\treturn {\n\t\t...settings,\n\t\tsupports: {\n\t\t\t...settings.supports,\n\t\t\tclassName: true,\n\t\t},\n\t};\n}\n\nwp.hooks.addFilter(\n\t'blocks.registerBlockType',\n\t'my-plugin/class-names/list-block',\n\taddListBlockClassName\n);\n```\n\n----------------------------------------\n\nTITLE: Accessible Element Selection in Playwright\nDESCRIPTION: Examples of using accessible selectors with getByRole for writing accessible queries in Playwright tests\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/e2e/README.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Select a button which includes the accessible name \"Hello World\" (case-insensitive).\npage.getByRole( 'button', { name: 'Hello World' } );\n```\n\n----------------------------------------\n\nTITLE: Comparing Performance Metrics Across Branches\nDESCRIPTION: Command to compare performance metrics between different branches, tags, or commits. This helps in identifying performance regressions between versions.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/testing-overview.md#2025-04-21_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\n./bin/plugin/cli.js perf trunk v8.1.0 v8.0.0\n```\n\n----------------------------------------\n\nTITLE: Defining Block Attributes in JSON\nDESCRIPTION: Demonstrates how to define structured data attributes for a block, including cover image and author information.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-metadata.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"attributes\": {\n\t\t\"cover\": {\n\t\t\t\"type\": \"string\",\n\t\t\t\"source\": \"attribute\",\n\t\t\t\"selector\": \"img\",\n\t\t\t\"attribute\": \"src\"\n\t\t},\n\t\t\"author\": {\n\t\t\t\"type\": \"string\",\n\t\t\t\"source\": \"html\",\n\t\t\t\"selector\": \".book-author\"\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Wide Alignment in WordPress Theme\nDESCRIPTION: Demonstrates how to add support for wide and full alignment options in blocks.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/themes/theme-support.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nadd_theme_support( 'align-wide' );\n```\n\n----------------------------------------\n\nTITLE: Increment Button Block Implementation with Global State\nDESCRIPTION: A companion block to the Counter Block that provides a button to increment the global counter. It contains the HTML markup for the button with a click event handler and the JavaScript action that updates the counter state.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/core-concepts/undestanding-global-state-local-context-and-derived-state.md#2025-04-21_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n<div\n  data-wp-interactive=\"myCounterPlugin\"\n  <?php echo get_block_wrapper_attributes(); ?>\n>\n  <button data-wp-on-async--click=\"actions.increment\">\n    Increment\n  </button>\n</div>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst { state } = store( 'myCounterPlugin', {\n\tactions: {\n\t\tincrement() {\n\t\t\tstate.counter += 1;\n\t\t},\n\t},\n} );\n```\n\n----------------------------------------\n\nTITLE: Importing SCSS Styles\nDESCRIPTION: These lines import various SCSS files from the @wordpress/base-styles package. These files contain color definitions, variables, mixins, breakpoint definitions, animations, z-index values, and default custom properties for use in WordPress themes and plugins. Using these imports allows developers to leverage pre-defined styles and maintain consistency.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/base-styles/README.md#2025-04-21_snippet_1\n\nLANGUAGE: scss\nCODE:\n```\n\"@import 'node_modules/@wordpress/base-styles/colors';\\n@import 'node_modules/@wordpress/base-styles/variables';\\n@import 'node_modules/@wordpress/base-styles/mixins';\\n@import 'node_modules/@wordpress/base-styles/breakpoints';\\n@import 'node_modules/@wordpress/base-styles/animations';\\n@import 'node_modules/@wordpress/base-styles/z-index';\\n@import 'node_modules/@wordpress/base-styles/default-custom-properties';\"\n```\n\n----------------------------------------\n\nTITLE: Installing Jest Console Package\nDESCRIPTION: Command to install the @wordpress/jest-console package as a development dependency using npm.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/jest-console/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @wordpress/jest-console --save-dev\n```\n\n----------------------------------------\n\nTITLE: WordPress Core Data API Changes\nDESCRIPTION: Example of API changes in WordPress core data module, showing deprecated methods and their replacements.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/deprecations.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Deprecated\nwp.data.dispatch(\"core\").receiveTerms()\n\n// New usage\nwp.data.dispatch(\"core\").receiveEntityRecords()\n```\n\n----------------------------------------\n\nTITLE: Using ProgressBar Component in Determinate Mode\nDESCRIPTION: Example of using the ProgressBar component in determinate mode by passing a progress value between 0 and 100.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/progress-bar/README.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ProgressBar } from '@wordpress/components';\n\nconst MyLoadingComponent = ( { progress } ) => {\n\treturn <ProgressBar value={ progress } />;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Units in theme.json\nDESCRIPTION: Example configuration in theme.json to define allowed units for the UnitControl component.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/src/components/unit-control/README.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"global\": {\n\t\t\"settings\": {\n\t\t\t\"spacing\": {\n\t\t\t\t\"units\": [ \"px\", \"em\", \"rem\", \"vh\", \"vw\" ]\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Targeting Horizontally Oriented Blocks in CSS\nDESCRIPTION: This CSS selector targets blocks that explicitly set their orientation to horizontal. It uses a semantic class name output by the Layout block support.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/explanations/architecture/styles.md#2025-04-21_snippet_14\n\nLANGUAGE: css\nCODE:\n```\n.is-horizontal {\n  /* styles here */\n}\n```\n\n----------------------------------------\n\nTITLE: Window Dimensions Wait Function\nDESCRIPTION: Utility function that waits for page viewport to reach specified dimensions before continuing execution. Addresses timing issues with Puppeteer's setViewport command.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/e2e-test-utils/README.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nwaitForWindowDimensions( width, height )\n```\n\n----------------------------------------\n\nTITLE: Setting WordPress Plugin Assets Path in JavaScript\nDESCRIPTION: This JavaScript example sets a path for static assets used in WordPress plugin templates through the 'assetsPath' field. It joins the current directory with the 'plugin-assets' directory to point to the location of assets like images or fonts, which will be copied to the 'assets' subfolder in the generated plugin.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/create-block/docs/external-template.md#2025-04-21_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { join } = require( 'path' );\n\nmodule.exports = {\n\tassetsPath: join( __dirname, 'plugin-assets' ),\n};\n```\n\n----------------------------------------\n\nTITLE: Enqueuing Editor Styles in WordPress Themes\nDESCRIPTION: This PHP snippet shows how to enqueue and load a CSS file for styling the WordPress editor. It works for both the classic and block editors, but requires 'editor-styles' support for the block editor.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/themes/theme-support.md#2025-04-21_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nadd_editor_style( 'style-editor.css' );\n```\n\n----------------------------------------\n\nTITLE: Updating Array Attributes Immutably\nDESCRIPTION: Shows the correct way to update array attributes immutably using the spread operator.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-edit-save.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// Good - a new array is created from the old list attribute and a new list item:\nconst { list } = attributes;\nconst addListItem = ( newListItem ) =>\n\tsetAttributes( { list: [ ...list, newListItem ] } );\n\n// Bad - the list from the existing attribute is modified directly to add the new list item:\nconst { list } = attributes;\nconst addListItem = ( newListItem ) => {\n\tlist.push( newListItem );\n\tsetAttributes( { list } );\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Ancestor Block Relationship in Gutenberg\nDESCRIPTION: Shows how to define an ancestor-descendant relationship between blocks using the ancestor property. This allows the descendant block to be used anywhere in the hierarchical tree below its ancestor.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/platform-docs/docs/create-block/nested-blocks.md#2025-04-21_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n{\n\ttitle: 'Comment Author Name',\n\tancestor: [ 'core/comment-template' ]\n\t// ...\n}\n```\n\n----------------------------------------\n\nTITLE: Styling WordPress Admin Page for Gutenberg App\nDESCRIPTION: CSS styles for the WordPress admin page including button styling, form layouts, error messages, and list controls with specific styling for the Gutenberg app container.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/data-basics/1-data-basics-setup.md#2025-04-21_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.toplevel_page_my-first-gutenberg-app #wpcontent {\n\tbackground: #fff;\n\theight: 1000px;\n}\nbutton .components-spinner {\n\twidth: 15px;\n\theight: 15px;\n\tmargin-top: 0;\n\tmargin-bottom: 0;\n\tmargin-left: 0;\n}\n.form-buttons {\n\tdisplay: flex;\n}\n.my-gutenberg-form .form-buttons {\n\tmargin-top: 20px;\n\tmargin-left: 1px;\n}\n.form-error {\n\tcolor: #cc1818;\n}\n.form-buttons button {\n\tmargin-right: 4px;\n}\n.form-buttons .components-spinner {\n\tmargin-top: 0;\n}\n#my-first-gutenberg-app {\n\tmax-width: 500px;\n}\n#my-first-gutenberg-app ul,\n#my-first-gutenberg-app ul li {\n\tlist-style-type: disc;\n}\n#my-first-gutenberg-app ul {\n\tpadding-left: 20px;\n}\n#my-first-gutenberg-app .components-search-control__input {\n\theight: 36px;\n\tmargin-left: 0;\n}\n\n#my-first-gutenberg-app .list-controls {\n\tdisplay: flex;\n\twidth: 100%;\n}\n\n#my-first-gutenberg-app .list-controls .components-search-control {\n\tflex-grow: 1;\n\tmargin-right: 8px;\n}\n```\n\n----------------------------------------\n\nTITLE: Custom getItemLevel Function\nDESCRIPTION: An example of the getItemLevel function, which assigns a hierarchical level to each item. This property is optional and enhances the display of hierarchical data when view.showLevels is true.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/dataviews/README.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n\tgetItemLevel={ ( item ) => item.level }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Private Selectors and Actions\nDESCRIPTION: Shows how to attach private selectors and actions to a public store using lock/unlock pattern.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/coding-guidelines.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { privateHasContentRoleAttribute } from './private-selectors';\nimport { privateToggleFeature } from './private-actions';\nimport { lock, unlock } from './lock-unlock';\n\nexport const store = registerStore( /* ... */ );\nunlock( store ).registerPrivateActions( {\n\tprivateToggleFeature,\n} );\n\nunlock( store ).registerPrivateSelectors( {\n\tprivateHasContentRoleAttribute,\n} );\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { store } from '@wordpress/package1';\nimport { useSelect } from '@wordpress/data';\nimport { unlock } from './lock-unlock';\n\nfunction MyComponent() {\n\tconst hasRole = useSelect(\n\t\t( select ) =>\n\t\t\tunlock( select( store ) ).privateHasContentRoleAttribute()\n\t);\n\tunlock( useDispatch( store ) ).privateToggleFeature();\n}\n```\n\n----------------------------------------\n\nTITLE: Targeting Constrained Layout Blocks in CSS\nDESCRIPTION: This CSS selector targets blocks that use the Constrained layout type. It uses a semantic class name output by the Layout block support.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/explanations/architecture/styles.md#2025-04-21_snippet_11\n\nLANGUAGE: css\nCODE:\n```\n.is-layout-constrained {\n  /* styles here */\n}\n```\n\n----------------------------------------\n\nTITLE: WordPress Block.json Configuration for Styles\nDESCRIPTION: Configuration file showing how to specify editor and frontend stylesheets in block.json using editorStyle and style properties.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/block-tutorial/applying-styles-with-stylesheets.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"apiVersion\": 3,\n\t\"name\": \"gutenberg-examples/example-02-stylesheets\",\n\t\"title\": \"Example: Stylesheets\",\n\t\"icon\": \"universal-access-alt\",\n\t\"category\": \"layout\",\n\t\"editorScript\": \"file:./block.js\",\n\t\"editorStyle\": \"file:./editor.css\",\n\t\"style\": \"file:./style.css\"\n}\n```\n\n----------------------------------------\n\nTITLE: Selector: isRequestingDownloadableBlocks\nDESCRIPTION: This selector checks if the application is currently requesting downloadable blocks. It requires the global application state and filter value as parameters and returns a boolean indicating the request status.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-directory/README.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n// Selector\nfunction isRequestingDownloadableBlocks(state, filterValue) {\n    // logic to determine if requesting downloadable blocks\n    return false; // or return true if requesting\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Preferences Action\nDESCRIPTION: Action creator for setting multiple preference defaults at once. Takes a scope and an object containing default values for multiple preferences.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core-preferences.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nsetDefaults( scope: string, defaults: Object<string, *> ) => Object\n```\n\n----------------------------------------\n\nTITLE: Rendering BlockTypesList in WordPress Gutenberg\nDESCRIPTION: This snippet defines the rendering of the BlockTypesList component in a custom implementation. It uses the imported BlockTypesList component from the @wordpress/block-editor package, and renders it with the filteredItems prop, which contains the blocks to be displayed. Ensure that the @wordpress/block-editor package is installed and properly configured in your WordPress setup. The component is intended for web and mobile platforms, with additional customization options for mobile users.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/src/components/block-types-list/README.md#2025-04-21_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport { BlockTypesList } from '@wordpress/block-editor';\n\nconst MyBlockTypesList = () => <BlockTypesList items={ filteredItems } />;\n```\n\n----------------------------------------\n\nTITLE: Direct API Call Example in React Component\nDESCRIPTION: This snippet demonstrates how to directly call the WordPress API using apiFetch within a React component. It's used to illustrate the potential issues with this approach.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/data-basics/2-building-a-list-of-pages.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport apiFetch from '@wordpress/api-fetch';\nfunction MyFirstApp() {\n\t// ...\n\tconst [pages, setPages] = useState( [] );\n\tuseEffect( () => {\n\t\tconst url = '/wp-json/wp/v2/pages?search=' + searchTerm;\n\t\tapiFetch( { url } )\n\t\t\t.then( setPages )\n\t}, [searchTerm] );\n\t// ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Style Deprecation in React Component\nDESCRIPTION: Demonstrates how to deprecate styles in a React component using a feature flag prop and deprecation warning. The component conditionally applies deprecated styles and logs a warning when the new styles are not opted into.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/CONTRIBUTING.md#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n// component.tsx\nimport deprecated from '@wordpress/deprecated';\nimport { Wrapper } from './styles.ts';\n\nfunction MyComponent( { __nextHasNoOuterMargins = false } ) {\n\tif ( ! __nextHasNoOuterMargins ) {\n\t\tdeprecated( 'Outer margin styles for wp.components.MyComponent', {\n\t\t\tsince: '6.0',\n\t\t\tversion: '6.2', // Set a reasonable grace period depending on impact\n\t\t\thint: 'Set the `__nextHasNoOuterMargins` prop to true to start opting into the new styles, which will become the default in a future version.',\n\t\t} );\n\t}\n\treturn <Wrapper __nextHasNoOuterMargins={ __nextHasNoOuterMargins } />;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing i18n.ngettext_with_context Filter Callback in JavaScript\nDESCRIPTION: Defines a callback function for the i18n.ngettext_with_context filter. This function receives the translation, singular and plural forms, number, context, and domain as arguments and returns the modified translation.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/filters/i18n-filters.md#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nfunction i18nNgettextWithContextCallback(\n\ttranslation,\n\tsingle,\n\tplural,\n\tnumber,\n\tcontext,\n\tdomain\n) {\n\treturn translation;\n}\n```\n\n----------------------------------------\n\nTITLE: Running PHP Tests in Gutenberg Project\nDESCRIPTION: Command to execute PHP tests using PHPUnit through npm. Requires wp-env to be running and composer dependencies to be installed. The script will start wp-env automatically if not running.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/testing-overview.md#2025-04-21_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test:php\n```\n\n----------------------------------------\n\nTITLE: Installing CocoaPods on Mac M1\nDESCRIPTION: Commands to install the ffi package and CocoaPods on Mac M1 architecture.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/react-native/osx-setup-guide.md#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nsudo arch -x86_64 gem install ffi\narch -x86_64 pod install\n```\n\n----------------------------------------\n\nTITLE: Block Support with Selective Skip Serialization\nDESCRIPTION: JSON configuration demonstrating how to skip serialization for specific typography properties while leaving others unaffected.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/explanations/architecture/styles.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"name\": \"core/paragraph\",\n\t\"...\": \"...\",\n\t\"supports\": {\n\t\t\"typography\": {\n\t\t\t\"fontSize\": true,\n\t\t\t\"lineHeight\": true,\n\t\t\t\"__experimentalSkipSerialization\": [ \"fontSize\" ]\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Gutenberg Paragraph Block\nDESCRIPTION: This snippet demonstrates a paragraph block in Gutenberg. It uses HTML comments to define the start and end of the block, and includes standard HTML paragraph tags for the content. The snippet showcases a basic implementation of text and a link within a paragraph block.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/test/e2e/specs/editor/various/__snapshots__/Copy-cut-paste-should-paste-link-to-formatted-text-1-chromium.txt#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- wp:paragraph -->\n<p><strong>t<a href=\"https://wordpress.org/gutenberg\">es</a>t</strong></p>\n<!-- /wp:paragraph -->\n```\n\n----------------------------------------\n\nTITLE: Reference By Distinct Edits - JavaScript\nDESCRIPTION: This function determines if an edit has occurred by comparing references of edited values between states. It returns a reference that changes only when an edit occurs based on strict equality checks.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// getReferenceByDistinctEdits\n\nconst hasEditOccurred = (\n    getReferenceByDistinctEdits( beforeState ) !==\n    getReferenceByDistinctEdits( afterState )\n);\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Settings for Gutenberg Bridge\nDESCRIPTION: Gradle configuration to include the React Native Gutenberg Bridge package in an Android project.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/react-native-bridge/README.md#2025-04-21_snippet_2\n\nLANGUAGE: gradle\nCODE:\n```\ninclude ':@wordpress_react-native-bridge'\nproject(':@wordpress_react-native-bridge').projectDir = new File(rootProject.projectDir, './gutenberg/packages/react-native-bridge/android')\n```\n\n----------------------------------------\n\nTITLE: Setting custom class name for a block\nDESCRIPTION: This JavaScript snippet uses the `blocks.getBlockDefaultClassName` filter to set a custom class name for the `core/code` block. It uses `wp.hooks.addFilter` to apply a custom function which checks the block name and returns a custom class if it matches, otherwise returning the default class name.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/filters/block-filters.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// Our filter function.\nfunction setBlockCustomClassName( className, blockName ) {\n\treturn blockName === 'core/code' ? 'my-plugin-code' : className;\n}\n\n// Adding the filter.\nwp.hooks.addFilter(\n\t'blocks.getBlockDefaultClassName',\n\t'my-plugin/set-block-custom-class-name',\n\tsetBlockCustomClassName\n);\n\n```\n\n----------------------------------------\n\nTITLE: Handling Document Keydown Events with wp-on-document\nDESCRIPTION: Demonstrates using the wp-on-document directive to attach event listeners to document events like keydown. When a key is pressed, the logKeydown callback is executed.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/api-reference.md#2025-04-21_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n<div data-wp-on-document--keydown=\"callbacks.logKeydown\"></div>\n```\n\n----------------------------------------\n\nTITLE: API Documentation for createUndoManager Function\nDESCRIPTION: This markdown snippet describes the createUndoManager function, which creates an undo manager. It specifies that the function returns an UndoManager object.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/undo-manager/README.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### createUndoManager\n\nCreates an undo manager.\n\n_Returns_\n\n-   `UndoManager`: Undo manager.\n```\n\n----------------------------------------\n\nTITLE: Selector: getNewBlockTypes\nDESCRIPTION: This selector retrieves block types that are installed and used in the current post. It requires the global application state and returns an array of used block type items.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-directory/README.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n// Selector\nfunction getNewBlockTypes(state) {\n    // logic to get new block types\n    return []; // return array of new block types\n}\n```\n\n----------------------------------------\n\nTITLE: Toggling Fullscreen Mode in WordPress Gutenberg (JavaScript)\nDESCRIPTION: This action function toggles the Fullscreen Mode view option in the Gutenberg editor.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core-edit-post.md#2025-04-21_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\ntoggleFullscreenMode()\n```\n\n----------------------------------------\n\nTITLE: Defining Next Page Link - Gutenberg (Markdown)\nDESCRIPTION: This snippet defines a block for displaying the link to the next page in pagination. It includes various attributes for styling.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/core-blocks.md#2025-04-21_snippet_17\n\nLANGUAGE: markdown\nCODE:\n```\n- **Name:** core/query-pagination-next\n- **Category:** theme\n- **Parent:** core/query-pagination\n- **Supports:** color (background, gradients, ~~text~~), interactivity (clientNavigation), typography (fontSize, lineHeight), ~~html~~, ~~reusable~~\n- **Attributes:** label\n```\n\n----------------------------------------\n\nTITLE: Receiving Entity Records - JavaScript\nDESCRIPTION: Signals that entity records have been received based on specified parameters, including kind, name, and records. It allows for the batching of updates and cache invalidation if necessary.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core.md#2025-04-21_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nreceiveEntityRecords(kind, name, records, query, invalidateCache, edits, meta) {\n  // Returns an action object used in signalling that entity records have been received.\n  // Parameters:\n  // - kind: Kind of the received entity record.\n  // - name: Name of the received entity record.\n  // - records: Records received.\n  // - query: Query Object.\n  // - invalidateCache: Should invalidate query caches.\n  // - edits: Edits to reset.\n  // - meta: Meta information about pagination.\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Local WordPress Environment with wp-env\nDESCRIPTION: Command to start a local WordPress environment using wp-env. When run from a plugin or theme directory, it will automatically mount and activate that plugin or theme.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/getting-started/devenv/get-started-with-wp-env.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nwp-env start\n```\n\n----------------------------------------\n\nTITLE: Rendering Plugin Area using ES5\nDESCRIPTION: This code snippet demonstrates how to render a plugin area within a React component using ES5 syntax. It utilizes `React.createElement` and specifies a scope for the plugin area, enabling plugins registered for that scope to render within the designated area.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/plugins/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n\"// Using ES5 syntax\nvar el = React.createElement;\nvar PluginArea = wp.plugins.PluginArea;\n\nfunction Layout() {\n\treturn el( 'div', { scope: 'my-page' }, 'Content of the page', PluginArea );\n}\"\n```\n\n----------------------------------------\n\nTITLE: Introducing CycleSelectControl Component for Mobile in WordPress Gutenberg\nDESCRIPTION: This code snippet defines the CycleSelectControl component, which is an experimental alternative to SelectControl optimized for mobile interfaces in the WordPress Gutenberg project.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/mobile/cycle-select-control/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# CycleSelectControl\n\n`CycleSelectControl` is an experimental alternative to SelectControl for mobile.\n```\n\n----------------------------------------\n\nTITLE: Block Scaffolding without Plugin Generation\nDESCRIPTION: Command to create block files without generating a complete WordPress plugin\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/create-block/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ npx @wordpress/create-block@latest --no-plugin\n```\n\n----------------------------------------\n\nTITLE: Selector: getErrorNotices\nDESCRIPTION: This selector retrieves all error notices for blocks. It only requires the global application state as a parameter and returns an object containing error notices.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-directory/README.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// Selector\nfunction getErrorNotices(state) {\n    // logic to get all error notices\n    return {} ; // return notices object\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Custom Font Sizes in WordPress Themes\nDESCRIPTION: This PHP snippet demonstrates how to disable the ability to set custom font sizes in the WordPress block editor. It restricts users to the default sizes or those provided via the 'editor-font-sizes' theme support.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/themes/theme-support.md#2025-04-21_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nadd_theme_support( 'disable-custom-font-sizes' );\n```\n\n----------------------------------------\n\nTITLE: Running on Android Device/Emulator\nDESCRIPTION: Command to compile and run the Android version of the app on a connected device or emulator.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/react-native/getting-started-react-native.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpm run native android\n```\n\n----------------------------------------\n\nTITLE: Getting Post Excerpt with getEditedPostAttribute\nDESCRIPTION: Updated method for retrieving post excerpt using getEditedPostAttribute instead of deprecated getEditedPostExcerpt selector\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/deprecations.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ngetEditedPostAttribute('excerpt')\n```\n\n----------------------------------------\n\nTITLE: PinnedItems.Slot Component Props Definition\nDESCRIPTION: Defines the required props for the PinnedItems.Slot component, which is responsible for rendering pinned items in a specific scope.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/interface/src/components/pinned-items/README.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### scope\n\nThe scope of the pinned items area e.g: \"core\", \"myplugin/custom-screen-a\",\n\n-   Type: `String`\n-   Required: Yes\n```\n\n----------------------------------------\n\nTITLE: Disabling Base Layout Styles in WordPress 6.1+ Themes\nDESCRIPTION: This PHP snippet shows how to opt out of generated block layout styles in WordPress 6.1 and later. Themes using this commit to providing their own structural styling for core blocks.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/themes/theme-support.md#2025-04-21_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nadd_theme_support( 'disable-layout-styles' );\n```\n\n----------------------------------------\n\nTITLE: Targeting Flex Layout Blocks in CSS\nDESCRIPTION: This CSS selector targets blocks that use the Flex layout type. It uses a semantic class name output by the Layout block support.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/explanations/architecture/styles.md#2025-04-21_snippet_12\n\nLANGUAGE: css\nCODE:\n```\n.is-layout-flex {\n  /* styles here */\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using the Experimental Heading Component in React\nDESCRIPTION: This code snippet demonstrates how to import and use the experimental Heading component from the @wordpress/components package. It shows a basic example of rendering a heading with the text 'Code is Poetry'.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/heading/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { __experimentalHeading as Heading } from '@wordpress/components';\n\nfunction Example() {\n\treturn <Heading>Code is Poetry</Heading>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Editor Styles for Block Editor\nDESCRIPTION: Example of defining custom styles to be applied within the block editor iframe. These styles include font family, size, and list styling definitions.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/platform-docs/docs/basic-concepts/settings.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst styles = [\n\t{\n\t\tcss: `\n\t\t\tbody {\n\t\t\t\tfont-family: Arial;\n\t\t\t\tfont-size: 16px;\n\t\t\t}\n\n\t\t\tp {\n\t\t\t\tfont-size: inherit;\n\t\t\t\tline-height: inherit;\n\t\t\t}\n\n\t\t\tul {\n\t\t\t\tlist-style-type: disc;\n\t\t\t}\n\n\t\t\tol {\n\t\t\t\tlist-style-type: decimal;\n\t\t\t}\n\t\t`,\n\t},\n];\n```\n\n----------------------------------------\n\nTITLE: Default Controls Configuration Example\nDESCRIPTION: Demonstrates the default control configuration for the ColorPanel component in Global Styles\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/src/components/global-styles/README.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n{\n\tbackground: true,\n\ttext: true,\n\tlink: true,\n}\n```\n\n----------------------------------------\n\nTITLE: Generated API Documentation - Namespace Exports\nDESCRIPTION: This markdown snippet shows the documented output for namespace exports, listing functions with descriptions, usage examples, parameters, and return information.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/docgen/README.md#2025-04-21_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n# API\\n\\n## addition\\n\\n[example-module.js#L1-L1](example-module.js#L1-L1)\\n\\nAdds two numbers.\\n\\n**Usage**\\n\\n```js\\nconst result = addition( 5, 2 );\\nconsole.log( result ); // Will log 7\\n```\\n\\n**Parameters**\\n\\n-   **term1** `number`: First number.\\n-   **term2** `number`: Second number.\\n\\n**Returns**\\n\\n`number` The result of adding the two numbers.\\n\\n## subtraction\\n\\n[example-module.js#L1-L1](example-module.js#L1-L1)\\n\\nSubtracts two numbers.\\n\\n**Usage**\\n\\n```js\\nconst result = subtraction( 5, 2 );\\nconsole.log( result ); // Will log 3\\n```\\n\\n**Parameters**\\n\\n-   **term1** `number`: First number.\\n-   **term2** `number`: Second number.\\n\\n**Returns**\\n\\n`number` The result of subtracting the two numbers.\n```\n\n----------------------------------------\n\nTITLE: Scenario Testing with CPU and Network Throttling (Bash)\nDESCRIPTION: These commands show how to run end-to-end tests with CPU and network throttling to simulate different conditions and isolate race conditions. They include options for CPU slowdown, slow network, and offline testing.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/testing-overview.md#2025-04-21_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nTHROTTLE_CPU=4 npm run test:e2e\n\nSLOW_NETWORK=true npm run test:e2e\n\nOFFLINE=true npm run test:e2e\n```\n\n----------------------------------------\n\nTITLE: Fetching Theme Supports - JavaScript\nDESCRIPTION: This function retrieves the theme supports data from the application state. It returns the index data relevant to theme settings.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n// getThemeSupports\n\nfunction getThemeSupports( state ) {\n    // Implementation here\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Blob Module - Bash\nDESCRIPTION: This snippet installs the blob utilities for WordPress using npm. It saves the module as a dependency in the project.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/blob/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @wordpress/blob --save\n```\n\n----------------------------------------\n\nTITLE: Referencing Schema in font-collection.json for WordPress\nDESCRIPTION: Shows how to include the schema reference in a font-collection.json file, which enables code editors to validate and provide autocomplete for WordPress font collection definitions.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/schemas/README.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"$schema\": \"https://schemas.wp.org/trunk/font-collection.json\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Gutenberg Block Editor Package using npm\nDESCRIPTION: This snippet provides the command to install the @wordpress/block-editor package using npm. The package facilitates standalone block editor creation in a JavaScript environment. Requires an ES2015+ environment or appropriate polyfills.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @wordpress/block-editor --save\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Types in TypeScript for WordPress Gutenberg\nDESCRIPTION: Examples of defining custom types using TypeScript's @template tag and creating typedefs for complex structures like API fetch middleware and breakpoint sizes.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/coding-guidelines.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * An apiFetch middleware handler. Passed the fetch options, the middleware is\n * expected to call the `next` middleware once it has completed its handling.\n *\n * @typedef {(options:WPAPIFetchOptions,next:WPAPIFetchMiddleware)=>void} WPAPIFetchMiddleware\n */\n```\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Named breakpoint sizes.\n *\n * @typedef {\"huge\"|\"wide\"|\"large\"|\"medium\"|\"small\"|\"mobile\"} WPBreakpoint\n */\n\n/**\n * Hash of breakpoint names with pixel width at which it becomes effective.\n *\n * @type {Record<WPBreakpoint,number>}\n */\nconst BREAKPOINTS = { huge: 1440 /* , ... */ };\n```\n\n----------------------------------------\n\nTITLE: Implementing BottomSheetTextControl in React Native for WordPress\nDESCRIPTION: This snippet demonstrates how to use the BottomSheetTextControl component within a React Native component for WordPress. It shows importing necessary components, setting up state management, and rendering the control with various props.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/mobile/bottom-sheet-text-control/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// This is a paraphrased example from the image block's edit.native.js file\nimport {\n\tBottomSheetSelectControl,\n\tFooterMessageLink,\n} from '@wordpress/components';\nimport { __ } from '@wordpress/i18n';\n\nconst MyTextControl = () => {\n\tconst {\n\t\tattributes: { alt },\n\t} = this.props;\n\n\tconst updateAlt = ( newAlt ) => {\n\t\tthis.props.setAttributes( { alt: newAlt } );\n\t};\n\n\treturn (\n\t\t<PanelBody>\n\t\t\t<BottomSheetTextControl\n\t\t\t\tinitialValue={ alt }\n\t\t\t\tonChange={ updateAlt }\n\t\t\t\tplaceholder={ __( 'Generic placeholder text' ) }\n\t\t\t\tlabel={ __( 'Generic label' ) }\n\t\t\t\ticon={ textColor }\n\t\t\t\tfooterNote={\n\t\t\t\t\t<>\n\t\t\t\t\t\t{ __( 'A footer note to add to the component! ' ) }\n\t\t\t\t\t\t<FooterMessageLink\n\t\t\t\t\t\t\thref={ 'https://wordpress.org/' }\n\t\t\t\t\t\t\tvalue={ __( 'Visit WordPress.org' ) }\n\t\t\t\t\t\t/>\n\t\t\t\t\t</>\n\t\t\t\t}\n\t\t\t/>\n\t\t</PanelBody>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Breaking Changes - Enhanced Node.js Requirements\nDESCRIPTION: This snippet communicates the breaking change involving the increase in the minimum Node.js version requirement to 12, which is necessary for supporting newer features in the Gutenberg package.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/postcss-themes/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n-   Increase the minimum Node.js version to 12 ([#27934](https://github.com/WordPress/gutenberg/pull/27934)).\n```\n\n----------------------------------------\n\nTITLE: Defining Publish Date Display - Gutenberg (Markdown)\nDESCRIPTION: This snippet defines a block that displays the publish date for a post or page. It supports various attributes that customize how the date is displayed.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/core-blocks.md#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n- **Name:** core/post-date\n- **Category:** theme\n- **Supports:** color (background, gradients, link, text), interactivity (clientNavigation), spacing (margin, padding), typography (fontSize, lineHeight), ~~html~~\n- **Attributes:** displayType, format, isLink, textAlign\n```\n\n----------------------------------------\n\nTITLE: Unregistering a Keyboard Shortcut in React (JavaScript)\nDESCRIPTION: This example shows how to use the unregisterShortcut action to unregister an existing keyboard shortcut and verify its removal.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core-keyboard-shortcuts.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useEffect } from 'react';\nimport { store as keyboardShortcutsStore } from '@wordpress/keyboard-shortcuts';\nimport { useSelect, useDispatch } from '@wordpress/data';\nimport { __ } from '@wordpress/i18n';\n\nconst ExampleComponent = () => {\n\tconst { unregisterShortcut } = useDispatch( keyboardShortcutsStore );\n\n\tuseEffect( () => {\n\t\tunregisterShortcut( 'core/editor/next-region' );\n\t}, [] );\n\n\tconst shortcut = useSelect(\n\t\t( select ) =>\n\t\t\tselect( keyboardShortcutsStore ).getShortcutKeyCombination(\n\t\t\t\t'core/editor/next-region'\n\t\t\t),\n\t\t[]\n\t);\n\n\treturn shortcut ? (\n\t\t<p>{ __( 'Shortcut is not unregistered.' ) }</p>\n\t) : (\n\t\t<p>{ __( 'Shortcut is unregistered.' ) }</p>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Using Reactive Side Effects with the Interactivity API - HTML and JavaScript\nDESCRIPTION: This snippet demonstrates how to implement side effects in the Interactivity API using `data-wp-watch` and `data-wp-context` directives. It shows how to create a simple counter that logs its value anytime it changes, and illustrates the declarative approach to managing reactive data.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/core-concepts/the-reactive-and-declarative-mindset.md#2025-04-21_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<div\n\tdata-wp-interactive=\"myCounterPlugin\"\n\tdata-wp-context='{ \"counter\": 0 }'\n\tdata-wp-watch=\"callbacks.logCounter\"\n>\n\t<p>Counter: <span data-wp-text=\"context.counter\"></span></p>\n\t<button data-wp-on--click=\"actions.increment\">Increment</button>\n</div>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nstore( 'myCounterPlugin', {\n\tactions: {\n\t\tincrement() {\n\t\t\tconst context = getContext();\n\t\t\tcontext.counter += 1;\n\t\t},\n\t},\n\tcallbacks: {\n\t\tlogCounter: () => {\n\t\t\tconst context = getContext();\n\t\t\tconsole.log( `The counter is now: ${ context.counter }` );\n\t\t},\n\t},\n} );\n```\n\n----------------------------------------\n\nTITLE: Customizing Duotone for Post Featured Image Block in theme.json\nDESCRIPTION: This snippet demonstrates how to define default duotone options and enable full customization specifically for the Post Featured Image block.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/curating-the-editor-experience/theme-json.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"version\": 3,\n\t\"settings\": {\n\t\t\"color\": {\n\t\t\t\"custom\": true,\n\t\t\t\"customDuotone\": true\n\t\t},\n\t\t\"blocks\": {\n\t\t\t\"core/post-featured-image\": {\n\t\t\t\t\"color\": {\n\t\t\t\t\t\"duotone\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"colors\": [ \"#282828\", \"#ff5837\" ],\n\t\t\t\t\t\t\t\"slug\": \"black-and-orange\",\n\t\t\t\t\t\t\t\"name\": \"Black and Orange\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"colors\": [ \"#282828\", \"#0288d1\" ],\n\t\t\t\t\t\t\t\"slug\": \"black-and-blue\", \n\t\t\t\t\t\t\t\"name\": \"Black and Blue\"\n\t\t\t\t\t\t}\n\t\t\t\t\t],\n\t\t\t\t\t\"customDuotone\": true,\n\t\t\t\t\t\"custom\": true\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Site Title Block Frontend HTML Output\nDESCRIPTION: Example of the final HTML markup generated by the Site Title block's render_callback function when displayed on the frontend.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/getting-started/fundamentals/static-dynamic-rendering.md#2025-04-21_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<h1 class=\"wp-block-site-title\"><a href=\"https://www.wp.org\" target=\"_self\" rel=\"home\">My WordPress Website</a></h1>\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel Plugin Makepot in .babelrc\nDESCRIPTION: Configuration example for the @wordpress/babel-plugin-makepot Babel plugin. The example shows how to set a custom output path for the generated POT file.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/babel-plugin-makepot/README.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"plugins\": [\n\t\t[\n\t\t\t\"@wordpress/babel-plugin-makepot\",\n\t\t\t{ \"output\": \"languages/myplugin.pot\" }\n\t\t]\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Unregistering Block Bindings Source (JavaScript)\nDESCRIPTION: This example shows how to use the unregisterBlockBindingsSource function to remove a custom block bindings source. It takes the name of the source as a parameter.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/blocks/README.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { unregisterBlockBindingsSource } from '@wordpress/blocks';\n\nunregisterBlockBindingsSource( 'plugin/my-custom-source' );\n```\n\n----------------------------------------\n\nTITLE: Displaying Gutenberg Blueprint Image in Markdown\nDESCRIPTION: This code snippet embeds an image showing the Gutenberg Blueprint, which illustrates the architecture of a block in the Gutenberg editor.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/design/the-block.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n![Gutenberg Blueprint](https://cldup.com/LQrPNubkJY.png)\n```\n\n----------------------------------------\n\nTITLE: Paragraph Block with User-Modified Styles\nDESCRIPTION: Demonstrates how a paragraph block's HTML changes after user modifications, showing classes and inline styles added for things like colors, font sizes, and line height.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/explanations/architecture/styles.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<p class=\"has-color has-green-color has-font-size has-small-font-size my-custom-class\"\n\tstyle=\"line-height: 1em\"></p>\n```\n\n----------------------------------------\n\nTITLE: BlockPopoverInbetween Component Props\nDESCRIPTION: Describes the props for the BlockPopoverInbetween component. This component uses `previousClientId` and `nextClientId` to determine the positioning of the popover between two blocks. It is considered a private component within the Gutenberg editor.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/src/components/block-popover/README.md#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n/**\n * Props\n */\n\n// previousClientId\n// The client ID of the block before the popover.\n// Type: `String`\n// Required: Yes\n\n// nextClientId\n// The client ID of the block after the popover.\n// Type: `String`\n// Required: Yes\n```\n\n----------------------------------------\n\nTITLE: Getting Last Entity Save Error - JavaScript\nDESCRIPTION: This function retrieves the last error that occurred during an attempt to save a specified entity record. It requires the state, kind, name, and record ID as parameters and returns the corresponding error.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// getLastEntitySaveError\n\nfunction getLastEntitySaveError( state, kind, name, recordId ) {\n    // Implementation here\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Todo List Server State in PHP\nDESCRIPTION: Sets up initial todo list state on the server side using wp_interactivity_state()\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/core-concepts/using-typescript.md#2025-04-21_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// todo-list-block/render.php\n$todos = array( 'Buy milk', 'Walk the dog' );\nwp_interactivity_state( 'myTodoPlugin', array(\n  'todos'         => $todos,\n  'filter'        => 'all',\n  'filteredTodos' => $todos,\n));\n?>\n\n<!-- HTML markup... -->\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Context-Dependent Buttons in WordPress Gutenberg\nDESCRIPTION: This HTML snippet shows the structure for two buttons within different contexts, demonstrating how context affects the behavior of actions in the Interactivity API.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/api-reference.md#2025-04-21_snippet_29\n\nLANGUAGE: html\nCODE:\n```\n<div data-wp-context='{ \"isOpen\": true }'>\n\t<button data-wp-on--click=\"actions.someAction\">Click</button>\n</div>\n\n<div data-wp-context='{ \"isOpen\": false }'>\n\t<button data-wp-on--click=\"actions.someAction\">Click</button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing MyFirstApp Component with Page Management in React\nDESCRIPTION: This snippet shows the complete implementation of the MyFirstApp component, which includes page searching, creation, listing, and deletion functionality. It also incorporates the SnackbarNotices component for displaying notifications.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/data-basics/5-adding-a-delete-button.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { useSelect, useDispatch } from '@wordpress/data';\nimport { Button, Modal, TextControl } from '@wordpress/components';\n\nfunction MyFirstApp() {\n\tconst [searchTerm, setSearchTerm] = useState( '' );\n\tconst { pages, hasResolved } = useSelect(\n\t\t( select ) => {\n\t\t\tconst query = {};\n\t\t\tif ( searchTerm ) {\n\t\t\t\tquery.search = searchTerm;\n\t\t\t}\n\t\t\tconst selectorArgs = ['postType', 'page', query];\n\t\t\tconst pages = select( coreDataStore ).getEntityRecords( ...selectorArgs );\n\t\t\treturn {\n\t\t\t\tpages,\n\t\t\t\thasResolved: select( coreDataStore ).hasFinishedResolution(\n\t\t\t\t\t'getEntityRecords',\n\t\t\t\t\tselectorArgs,\n\t\t\t\t),\n\t\t\t};\n\t\t},\n\t\t[searchTerm],\n\t);\n\n\treturn (\n\t\t<div>\n\t\t\t<div className=\"list-controls\">\n\t\t\t\t<SearchControl onChange={ setSearchTerm } value={ searchTerm }/>\n\t\t\t\t<PageCreateButton/>\n\t\t\t</div>\n\t\t\t<PagesList hasResolved={ hasResolved } pages={ pages }/>\n\t\t\t<Notifications />\n\t\t</div>\n\t);\n}\n\nfunction SnackbarNotices() {\n\tconst notices = useSelect(\n\t\t( select ) => select( noticesStore ).getNotices(),\n\t\t[]\n\t);\n\tconst { removeNotice } = useDispatch( noticesStore );\n\tconst snackbarNotices = notices.filter( ( { type } ) => type === 'snackbar' );\n\n\treturn (\n\t\t<SnackbarList\n\t\t\tnotices={ snackbarNotices }\n\t\t\tclassName=\"components-editor-notices__snackbar\"\n\t\t\tonRemove={ removeNotice }\n\t\t/>\n\t);\n}\n\nfunction PagesList( { hasResolved, pages } ) {\n\tif ( !hasResolved ) {\n\t\treturn <Spinner/>;\n\t}\n\tif ( !pages?.length ) {\n\t\treturn <div>No results</div>;\n\t}\n\n\treturn (\n\t\t<table className=\"wp-list-table widefat fixed striped table-view-list\">\n\t\t\t<thead>\n\t\t\t\t<tr>\n\t\t\t\t\t<td>Title</td>\n\t\t\t\t\t<td style={ { width: 190 } }>Actions</td>\n\t\t\t\t</tr>\n\t\t\t</thead>\n\t\t\t<tbody>\n\t\t\t\t{ pages?.map( ( page ) => (\n\t\t\t\t\t<tr key={ page.id }>\n\t\t\t\t\t\t<td>{ page.title.rendered }</td>\n\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t<div className=\"form-buttons\">\n\t\t\t\t\t\t\t\t<PageEditButton pageId={ page.id }/>\n\t\t\t\t\t\t\t\t<DeletePageButton pageId={ page.id }/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t</tr>\n\t\t\t\t) ) }\n\t\t\t</tbody>\n\t\t</table>\n\t);\n}\n\nfunction DeletePageButton( { pageId } ) {\n\tconst { createSuccessNotice, createErrorNotice } = useDispatch( noticesStore );\n\t// useSelect returns a list of selectors if you pass the store handle\n\t// instead of a callback:\n\tconst { getLastEntityDeleteError } = useSelect( coreDataStore )\n\tconst handleDelete = async () => {\n\t\tconst success = await deleteEntityRecord( 'postType', 'page', pageId);\n\t\tif ( success ) {\n\t\t\t// Tell the user the operation succeeded:\n\t\t\tcreateSuccessNotice( \"The page was deleted!\", {\n\t\t\t\ttype: 'snackbar',\n\t\t\t} );\n\t\t} else {\n\t\t\t// We use the selector directly to get the error at this point in time.\n\t\t\t// Imagine we fetched the error like this:\n\t\t\t//     const { lastError } = useSelect( function() { /* ... */ } );\n\t\t\t// Then, lastError would be null inside of handleDelete.\n\t\t\t// Why? Because we'd refer to the version of it that was computed\n\t\t\t// before the handleDelete was even called.\n\t\t\tconst lastError = getLastEntityDeleteError( 'postType', 'page', pageId );\n\t\t\tconst message = ( lastError?.message || 'There was an error.' ) + ' Please refresh the page and try again.'\n\t\t\t// Tell the user how exactly the operation have failed:\n\t\t\tcreateErrorNotice( message, {\n\t\t\t\ttype: 'snackbar',\n\t\t\t} );\n\t\t}\n\t}\n\n\tconst { deleteEntityRecord } = useDispatch( coreDataStore );\n\tconst { isDeleting } = useSelect(\n\t\tselect => ( {\n\t\t\tisDeleting: select( coreDataStore ).isDeletingEntityRecord( 'postType', 'page', pageId ),\n\t\t} ),\n\t\t[ pageId ]\n\t);\n\n\treturn (\n\t\t<Button variant=\"primary\" onClick={ handleDelete } disabled={ isDeleting }>\n\t\t\t{ isDeleting ? (\n\t\t\t\t<>\n\t\t\t\t\t<Spinner />\n\t\t\t\t\tDeleting...\n\t\t\t\t</>\n\t\t\t) : 'Delete' }\n\t\t</Button>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Install Compose Package via NPM\nDESCRIPTION: Shows how to install the '@wordpress/compose' package using npm, with a note on ES2015+ support and polyfills for environments lacking modern JavaScript support.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/compose/README.md#2025-04-21_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\nnpm install @wordpress/compose --save\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Meta Field\nDESCRIPTION: PHP code to register a custom meta field for use with the plugin sidebar.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/plugin-sidebar-0.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nregister_post_meta( 'post', 'sidebar_plugin_meta_block_field', array(\n\t'show_in_rest' => true,\n\t'single' => true,\n\t'type' => 'string',\n) );\n```\n\n----------------------------------------\n\nTITLE: Updating Local Context in JavaScript\nDESCRIPTION: Shows how to update local context values by modifying the object returned by getContext.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/core-concepts/undestanding-global-state-local-context-and-derived-state.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nstore( 'myPlugin', {\n\tactions: {\n\t\tincrement() {\n\t\t\tconst context = getContext();\n\t\t\tcontext.counter += 1;\n\t\t},\n\t\tupdateName( event ) {\n\t\t\tconst context = getContext();\n\t\t\tcontext.name = event.target.value;\n\t\t},\n\t},\n} );\n```\n\n----------------------------------------\n\nTITLE: Installing WordPress Gutenberg Plugins Module\nDESCRIPTION: This command installs the WordPress Gutenberg plugins module using npm and saves it as a dependency in your project's `package.json` file. This allows you to use the plugins API in your Gutenberg blocks and extensions.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/plugins/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"npm install @wordpress/plugins --save\"\n```\n\n----------------------------------------\n\nTITLE: JavaScript: Using Serialized Translated String\nDESCRIPTION: This JavaScript snippet demonstrates how to access the serialized translated string (`state.mango`) within the `addMango` action.  The translated string is then pushed to the `fruits` array, ensuring the UI displays the localized fruit name.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/core-concepts/server-side-rendering.md#2025-04-21_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nconst { state } = store( 'myFruitPlugin', {\n\tactions: {\n\t\taddMango() {\n\t\t\t// `state.mango` contains the 'Mango' string already translated.\n\t\t\tstate.fruits.push( state.mango );\n\t\t},\n\t},\n} );\n```\n\n----------------------------------------\n\nTITLE: Vertical Alignment Change Handler - JavaScript\nDESCRIPTION: This JavaScript snippet defines a change handler function for the BlockVerticalAlignmentControl component. It updates the verticalAlignment attribute whenever the alignment value is changed by the user interacting with the control buttons.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/src/components/block-vertical-alignment-control/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst onChange = ( alignment ) =>\n\tsetAttributes( { verticalAlignment: alignment } );\n```\n\n----------------------------------------\n\nTITLE: Using Nested Object Paths in isActive Property in JavaScript\nDESCRIPTION: This example demonstrates how to use nested object paths in the isActive property to check specific nested attributes, introduced in WordPress 6.6.0.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-variations.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nisActive: [ 'query.postType' ];\n```\n\n----------------------------------------\n\nTITLE: Running Performance Benchmark Comparison with Multiple Gutenberg Versions\nDESCRIPTION: Command line example showing how to run the performance benchmark tool to compare performance across different versions of Gutenberg (trunk, v8.1.0, and v8.0.0). This CLI command triggers a series of tests that measure and compare performance metrics between the specified versions.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/explanations/architecture/performance.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./bin/plugin/cli.js perf trunk v8.1.0 v8.0.0\n```\n\n----------------------------------------\n\nTITLE: Overriding Core Font Size Values in WordPress 5.9+ Themes\nDESCRIPTION: This CSS snippet shows how to override core font size values in WordPress 5.9 and later versions using CSS Custom Properties. It's applicable for themes without a theme.json file.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/themes/theme-support.md#2025-04-21_snippet_12\n\nLANGUAGE: css\nCODE:\n```\n:root {\n\t--wp--preset--font-size--small: <new_value>;\n\t--wp--preset--font-size--large: <new_value>;\n}\n```\n\n----------------------------------------\n\nTITLE: Cross-browser Test Configuration\nDESCRIPTION: Examples of configuring tests to run in specific browsers using @browser tags in test titles\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/e2e/README.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ntest( 'I will run in @firefox and @webkit (and chromium by default)', async ( { page } ) => {\n\t// ...\n} );\n\ntest( 'I will only run in @firefox but not -chromium', async ( { page } ) => {\n\t// ...\n} );\n\ntest.describe( 'Grouping tests (@webkit, -chromium)', () => {\n\ttest( 'I will only run in webkit', async ( { page } ) => {\n\t\t// ...\n\t} );\n} );\n```\n\n----------------------------------------\n\nTITLE: Enabling Default Block Styles in WordPress Theme\nDESCRIPTION: Shows how to enable opinionated block styles in a classic WordPress theme using wp-block-styles support.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/themes/theme-support.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nadd_theme_support( 'wp-block-styles' );\n```\n\n----------------------------------------\n\nTITLE: Declaring WordPress Core Functions for Future Merge\nDESCRIPTION: Example of a function using the 'wp_' prefix that's intended to be merged into WordPress Core. This naming convention should be used for stable features expected to be merged soon.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/lib/README.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n/**\n* Returns something useful.\n*\n* @since 6.2.0 Updates to something even more useful.\n* @since 6.3.0 Now more useful than ever.\n*\n* @return string Something useful.\n*/\nfunction wp_get_something_useful() {\n\t// ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using ProgressBar Component with Custom Styling\nDESCRIPTION: Example of applying custom styling to the ProgressBar component by passing a custom CSS class name to the className prop.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/progress-bar/README.md#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ProgressBar } from '@wordpress/components';\n\nconst MyLoadingComponent = () => {\n\treturn <ProgressBar className=\"my-custom-progress-bar\" />;\n};\n```\n\n----------------------------------------\n\nTITLE: Server-Rendered HTML Output\nDESCRIPTION: The final HTML output after the server processes the directives, showing the list of fruits without any directives visible.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/core-concepts/server-side-rendering.md#2025-04-21_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<ul>\n\t<li>Apple</li>\n\t<li>Banana</li>\n\t<li>Cherry</li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Generated API Documentation - Named Exports\nDESCRIPTION: This markdown snippet represents the output of the docgen tool for exporting named functions, documenting each function's details including a deprecation notice for one of the functions.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/docgen/README.md#2025-04-21_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n# API\\n\\n## addition\\n\\n[example.js#L25-L25](example.js#L25-L25)\\n\\nAdds two numbers.\\n\\n**Parameters**\\n\\n-   **term1** `number`: First number.\\n-   **term2** `number`: Second number.\\n\\n**Returns**\\n\\n`number` The result of adding the two numbers.\\n\\n## count\\n\\n[example.js#L25-L25](example.js#L25-L25)\\n\\n> **Deprecated** Use `addition` instead.\\n\\nAdds two numbers.\\n\\n**Parameters**\\n\\n-   **term1** `number`: First number.\\n-   **term2** `number`: Second number.\\n\\n**Returns**\\n\\n`number` The result of adding the two numbers.\n```\n\n----------------------------------------\n\nTITLE: Basic Directive Processing in Classic WordPress Themes\nDESCRIPTION: Demonstrates the basic usage of wp_interactivity_process_directives function to process interactive HTML markup with directives. Includes state initialization and HTML processing steps.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/core-concepts/server-side-rendering.md#2025-04-21_snippet_31\n\nLANGUAGE: php\nCODE:\n```\n// Initializes the global and derived state…\nwp_interactivity_state( '...', /* ... */ );\n\n// The interactive HTML markup that contains the directives.\n$html = '<div data-wp-...>...</div>';\n\n// Processes the directives so they are ready to be sent to the client.\n$processed_html = wp_interactivity_process_directives( $html );\n```\n\n----------------------------------------\n\nTITLE: Registering Core Blocks in Jest Setup\nDESCRIPTION: This snippet demonstrates how to register all core blocks in the beforeAll Jest callback, which is a common setup step for integration tests.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/react-native/integration-test-guide.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nbeforeAll( () => {\n\t// Register all core blocks\n\tregisterCoreBlocks();\n} );\n```\n\n----------------------------------------\n\nTITLE: Specifying PHP File for Block Variations\nDESCRIPTION: Demonstrates how to specify a PHP file that generates block variations on the server side.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-metadata.md#2025-04-21_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{ \"variations\": \"file:./variations.php\" }\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic PagesList Component in React\nDESCRIPTION: This snippet shows the initial setup of a React component to display a hardcoded list of pages. It demonstrates the basic structure of the MyFirstApp and PagesList components.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/data-basics/2-building-a-list-of-pages.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nfunction MyFirstApp() {\n\tconst pages = [{ id: 'mock', title: 'Sample page' }]\n\treturn <PagesList pages={ pages }/>;\n}\n\nfunction PagesList( { pages } ) {\n\treturn (\n\t\t<ul>\n\t\t\t{ pages?.map( page => (\n\t\t\t\t<li key={ page.id }>\n\t\t\t\t\t{ page.title }\n\t\t\t\t</li>\n\t\t\t) ) }\n\t\t</ul>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Block Support Configuration with Skip Serialization\nDESCRIPTION: JSON configuration showing how to use __experimentalSkipSerialization to prevent typography styles from being serialized to HTML markup.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/explanations/architecture/styles.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"name\": \"core/paragraph\",\n\t\"...\": \"...\",\n\t\"supports\": {\n\t\t\"typography\": {\n\t\t\t\"fontSize\": true,\n\t\t\t\"__experimentalSkipSerialization\": true\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Preferred Style Variations in WordPress Gutenberg (Deprecated JavaScript)\nDESCRIPTION: This deprecated function returns an action object used to signal that a style should be auto-applied when a block is created.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core-edit-post.md#2025-04-21_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nupdatePreferredStyleVariations()\n```\n\n----------------------------------------\n\nTITLE: Running E2E Tests with xvfb in Linux\nDESCRIPTION: Commands for running E2E tests in Linux using xvfb-run for headless execution in a virtual environment\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/e2e/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Run all available tests.\nxvfb-run npm run test:e2e\n\n# Only run webkit tests.\nxvfb-run -- npm run test:e2e -- --project=webkit\n```\n\n----------------------------------------\n\nTITLE: Installing Enzyme Snapshot Serializer\nDESCRIPTION: Command to install the enzyme-to-json package for snapshot testing support\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/jest-preset-default/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save enzyme-to-json\n```\n\n----------------------------------------\n\nTITLE: Basic Babel Configuration with JSX Pragma Plugin\nDESCRIPTION: Basic .babelrc.js configuration that includes the import JSX pragma plugin along with the React JSX transform plugin.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/babel-plugin-import-jsx-pragma/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// .babelrc.js\nmodule.exports = {\n\tplugins: [\n\t\t'@wordpress/babel-plugin-import-jsx-pragma',\n\t\t'@babel/plugin-transform-react-jsx',\n\t],\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Button Component Usage in JSX\nDESCRIPTION: Example showing how to import and use a Button component from @wordpress/components in a React component.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/README.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n/**\n * WordPress dependencies\n */\nimport { Button } from '@wordpress/components';\n\nexport default function MyButton() {\n\treturn <Button>Click Me!</Button>;\n}\n```\n\n----------------------------------------\n\nTITLE: Using wp-key Directive for List Items\nDESCRIPTION: Examples of using wp-key directive to uniquely identify elements in lists and navigation components.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/api-reference.md#2025-04-21_snippet_25\n\nLANGUAGE: html\nCODE:\n```\n<ul>\n\t<li data-wp-key=\"unique-id-1\">Item 1</li>\n\t<li data-wp-key=\"unique-id-2\">Item 2</li>\n</ul>\n```\n\nLANGUAGE: html\nCODE:\n```\n<div>\n\t<a data-wp-key=\"previous-page\" ...>Previous page</a>\n\t<a data-wp-key=\"next-page\" ...>Next page</a>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating Package Documentation with TOC Configuration in JSON\nDESCRIPTION: This code snippet demonstrates how to create a table of contents JSON file for package documentation. The example shows how to add child pages to the @wordpress/create-block section by specifying title, slug, markdown source, and parent properties.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/documentation/README.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n\t{\n\t\t\"title\": \"@wordpress/create-block External Template\",\n\t\t\"slug\": \"packages-create-block-external-template\",\n\t\t\"markdown_source\": \"../packages/create-block/docs/external-template.md\",\n\t\t\"parent\": \"packages-create-block\"\n\t}\n]\n```\n\n----------------------------------------\n\nTITLE: Setting Local Context with wp_interactivity_data_wp_context in PHP\nDESCRIPTION: This PHP code sets up the local context for a quiz application using wp_interactivity_data_wp_context(). It provides the current question based on the page ID as local context data.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/core-concepts/undestanding-global-state-local-context-and-derived-state.md#2025-04-21_snippet_32\n\nLANGUAGE: php\nCODE:\n```\n<div <?php echo wp_interactivity_data_wp_context( array(\n\t'currentQuestion' => get_question_for_page( get_the_ID() ),\n), ); ?>>\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Building Gutenberg in Development Mode\nDESCRIPTION: Commands to install all project dependencies and run the development build with automatic rebuilding as files change.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/getting-started-with-code-contribution.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Using FooterMessageLink within FooterMessageControl in JSX\nDESCRIPTION: This example demonstrates how to use the FooterMessageLink component inside a FooterMessageControl component. It combines regular text with a clickable link that opens an external URL.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/mobile/bottom-sheet/footer-message-link/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nreturn (\n\t<FooterMessageControl\n\t\tvalue={\n\t\t\t<>\n\t\t\t\t{ __( 'Example footer text. ' ) }\n\t\t\t\t<FooterMessageLink\n\t\t\t\t\thref={ 'https://www.wordpress.org/' }\n\t\t\t\t\tvalue={ __( 'Visit WordPress.org!' ) }\n\t\t\t\t/>\n\t\t\t</>\n\t\t}\n\t/>\n);\n```\n\n----------------------------------------\n\nTITLE: ESLint Rule Configuration Example\nDESCRIPTION: JSON configuration example showing how to allow specific experimental APIs for certain WordPress packages.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/eslint-plugin/docs/rules/no-unsafe-wp-apis.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"@wordpress/no-unsafe-wp-apis\": [\n\t\t\"error\",\n\t\t{ \"@wordpress/block-editor\": [ \"__experimentalBlock\" ] }\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Good Practice: Organizing PHP by Feature\nDESCRIPTION: Example of good practice for organizing PHP code by feature, with hook registration immediately after the function declaration. This makes code easier to move between directories.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/lib/README.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// lib/experimental/navigation.php\n\nfunction wp_get_navigation( $slug ) { ... }\n\nfunction wp_register_navigation_cpt() { ... }\n\nadd_action( 'init', 'wp_register_navigation_cpt' );\n```\n\n----------------------------------------\n\nTITLE: Block Directory Selectors Documentation\nDESCRIPTION: A collection of selector functions for accessing block directory state, including downloadable blocks, error notices, installed block types, and installation status.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core-block-directory.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngetDownloadableBlocks(state: Object, filterValue: string) => Array\ngetErrorNoticeForBlock(state: Object, blockId: string) => string|boolean\ngetErrorNotices(state: Object) => Object\ngetInstalledBlockTypes(state: Object) => Array\ngetNewBlockTypes(state: Object) => Array\ngetUnusedBlockTypes(state: Object) => Array\nisInstalling(state: Object, blockId: string) => boolean\nisRequestingDownloadableBlocks(state: Object, filterValue: string) => boolean\n```\n\n----------------------------------------\n\nTITLE: Selector: getUnusedBlockTypes\nDESCRIPTION: This selector retrieves block types that are installed but not used in the current post. It requires the global application state as a parameter and returns an array of unused block type items.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-directory/README.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n// Selector\nfunction getUnusedBlockTypes(state) {\n    // logic to get unused block types\n    return []; // return array of unused block types\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Testing Environment for WordPress - JSON\nDESCRIPTION: Used for configuring a comprehensive testing setup, this snippet loads a specific version of WordPress along with multiple plugins and themes to evaluate compatibility and performance. This configuration is beneficial for integration testing, accommodating different WordPress versions and modules.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/env/README.md#2025-04-21_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"core\": \"WordPress/WordPress#5.2.0\",\n\t\"plugins\": [ \"WordPress/wp-lazy-loading\", \"WordPress/classic-editor\" ],\n\t\"themes\": [ \"WordPress/theme-experiments\" ]\n}\n```\n\n----------------------------------------\n\nTITLE: Site Title Block Database Representation in HTML\nDESCRIPTION: Example of how the Site Title block is stored in the WordPress database using block delimiters. Shows the minimal storage format for dynamic blocks.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/getting-started/fundamentals/static-dynamic-rendering.md#2025-04-21_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<!-- wp:site-title /-->\n```\n\n----------------------------------------\n\nTITLE: E2E Test Scripts Configuration in package.json\nDESCRIPTION: JSON configuration for running E2E tests with different modes including standard, debug, and watch modes\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/e2e-tests/README.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"test:e2e\": \"wp-scripts test-e2e --config packages/e2e-tests/jest.config.js\",\n\t\"test:e2e:debug\": \"wp-scripts --inspect-brk test-e2e --config packages/e2e-tests/jest.config.js --puppeteer-devtools\",\n\t\"test:e2e:watch\": \"npm run test:e2e -- --watch\"\n}\n```\n\n----------------------------------------\n\nTITLE: OmitNevers Type Example\nDESCRIPTION: This TypeScript code demonstrates the `OmitNevers` type. It removes all properties with the type `never` from an object, even deeply nested ones. In the example, the `bar` properties are removed, resulting in a type without the `never` properties.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/core-data/src/entity-types/README.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ntype MyType = {\n  foo: string;\n  bar: never;\n  nested: {\n    foo: string;\n    bar: never;\n  }\n}\nconst x = {} as OmitNevers<MyType>;\n// x is of type { foo: string; nested: { foo: string; }}\n// The `never` properties were removed entirely\n```\n\n----------------------------------------\n\nTITLE: Configuring Enzyme Setup with Jest\nDESCRIPTION: Jest configuration code to setup Enzyme with React 17 adapter in setupFilesAfterEnv\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/jest-preset-default/README.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nlet mockEnzymeSetup = false;\n\njest.mock( 'enzyme', () => {\n\tconst actualEnzyme = jest.requireActual( 'enzyme' );\n\tif ( ! mockEnzymeSetup ) {\n\t\tmockEnzymeSetup = true;\n\n\t\t// Configure enzyme 3 for React, from docs: http://airbnb.io/enzyme/docs/installation/index.html\n\t\tconst Adapter = jest.requireActual(\n\t\t\t'@wojtekmaj/enzyme-adapter-react-17'\n\t\t);\n\t\tactualEnzyme.configure( { adapter: new Adapter() } );\n\t}\n\treturn actualEnzyme;\n} );\n```\n\n----------------------------------------\n\nTITLE: Rendering WordPress Gutenberg Table Block\nDESCRIPTION: Creates a table block with a fixed layout, two rows, and a caption using WordPress Gutenberg block syntax\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/test/e2e/specs/editor/blocks/__snapshots__/Table-allows-a-caption-to-be-added-1-chromium.txt#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- wp:table -->\n<figure class=\"wp-block-table\"><table class=\"has-fixed-layout\"><tbody><tr><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table><figcaption class=\"wp-element-caption\">Caption!</figcaption></figure>\n<!-- /wp:table -->\n```\n\n----------------------------------------\n\nTITLE: Implementing CopyHandler in WordPress block-editor\nDESCRIPTION: This snippet demonstrates how to use the CopyHandler component to enable copy-and-paste functionalities within the WordPress block editor. It requires importing the BlockList and CopyHandler components from '@wordpress/block-editor'. The CopyHandler intercepts copy, cut, and paste events from its children, namely the BlockList in this context, when a block-editing context is present with selected blocks.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/src/components/copy-handler/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { BlockList, CopyHandler } from '@wordpress/block-editor';\n\nconst MyCopyHandler = () => (\n\t<CopyHandler>\n\t\t<BlockList />\n\t</CopyHandler>\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Vertical Spacer in Gutenberg\nDESCRIPTION: Renders a spacer div with a fixed height of 100 pixels to provide visual separation between content blocks. Uses WordPress block markup with accessibility and styling attributes.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/test/e2e/specs/editor/blocks/__snapshots__/Spacer-can-be-created-by-typing-spacer-1-chromium.txt#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- wp:spacer -->\n<div style=\"height:100px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n```\n\n----------------------------------------\n\nTITLE: Multi-Selecting Blocks in Gutenberg Editor (JavaScript)\nDESCRIPTION: Action creator that returns an action object to change block multi-selection in the editor. It takes the start and end block client IDs, and an optional initial position for focus.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core-block-editor.md#2025-04-21_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\nmultiSelect( start, end, __experimentalInitialPosition )\n```\n\n----------------------------------------\n\nTITLE: Disabling Remote Block Patterns in PHP\nDESCRIPTION: Shows how to disable remote block patterns from the WordPress.org Pattern Directory using a filter.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/filters/editor-filters.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nadd_filter( 'should_load_remote_block_patterns', '__return_false' );\n```\n\n----------------------------------------\n\nTITLE: Registering Core WordPress Blocks\nDESCRIPTION: Example showing how to register core blocks using the registerCoreBlocks function. Accepts an optional array of core blocks to register.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-library/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { registerCoreBlocks } from '@wordpress/block-library';\n\nregisterCoreBlocks();\n```\n\n----------------------------------------\n\nTITLE: Receiving Navigation Fallback ID - JavaScript\nDESCRIPTION: Signals that the fallback Navigation Menu ID has been received. This action is used for managing navigation structure in the WordPress backend.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core.md#2025-04-21_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nreceiveNavigationFallbackId(fallbackId) {\n  // Returns an action object signalling that the fallback Navigation Menu id has been received.\n  // Parameters:\n  // - fallbackId: the id of the fallback Navigation Menu\n}\n```\n\n----------------------------------------\n\nTITLE: Getting information about a guide\nDESCRIPTION: This JSX snippet demonstrates how to use the `getAssociatedGuide` selector from the `core/nux` data store to retrieve information about the guide associated with a particular tip. The information includes the IDs of all tips in the guide, the ID of the currently displayed tip, and the ID of the next tip to be displayed.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/nux/README.md#2025-04-21_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nconst guide = select( 'core/nux' ).getAssociatedGuide( 'acme/add-to-cart' );\nconsole.log( 'Tips in this guide:', guide.tipIds );\nconsole.log( 'Currently showing:', guide.currentTipId );\nconsole.log( 'Next to show:', guide.nextTipId );\n```\n\n----------------------------------------\n\nTITLE: Retrieving Gradient Slug by Value - JavaScript\nDESCRIPTION: This function retrieves the gradient slug based on a gradient value provided in the parameters. It requires an array of gradients and the specific gradient value to search for. It outputs the corresponding gradient slug as a string.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/src/components/gradients/README.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction getGradientSlugByValue(gradients, value) {\n    // Implementation to retrieve gradient slug\n}\n```\n\n----------------------------------------\n\nTITLE: Clearing Block Selection in Gutenberg Editor (JavaScript)\nDESCRIPTION: Action creator that returns an action object to clear the current block selection in the editor.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core-block-editor.md#2025-04-21_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nclearSelectedBlock()\n```\n\n----------------------------------------\n\nTITLE: Adding Local Context Directly in HTML\nDESCRIPTION: Defining local context directly in HTML using the data-wp-context attribute with an array of fruits.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/core-concepts/server-side-rendering.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<ul data-wp-context='{ \"fruits\": [\"Apple\", \"Banana\", \"Cherry\"] }'>\n\t...\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Default Webpack Config Usage in Build and Start Commands - JavaScript\nDESCRIPTION: This snippet indicates that the `build` and `start` commands will now utilize a default Webpack configuration if none is explicitly provided. This change ensures users can run scripts without needing custom configurations.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/scripts/CHANGELOG.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nwp-scripts build\n```\n\n----------------------------------------\n\nTITLE: Accessing WordPress Components via Global Variable\nDESCRIPTION: Example of accessing WordPress components through the global wp variable. This shows how to destructure the PlainText component from the blockEditor namespace after declaring the dependency.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/packages.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { PlainText } = wp.blockEditor;\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage Examples of WordPress APIs\nDESCRIPTION: Examples showing incorrect imports of experimental and unstable WordPress APIs that should be avoided.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/eslint-plugin/docs/rules/no-unsafe-wp-apis.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { __experimentalFeature } from '@wordpress/foo';\nimport { __unstableFeature } from '@wordpress/bar';\n```\n\n----------------------------------------\n\nTITLE: Configuring Stylelint with WordPress SCSS Preset\nDESCRIPTION: JSON configuration to use the WordPress SCSS preset, which extends both the default config and stylelint-config-recommended-scss.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/stylelint-config/README.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"extends\": [ \"@wordpress/stylelint-config/scss\" ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Colors Higher-Order Component\nDESCRIPTION: A higher-order component factory for generating a custom 'withCustomColors' HOC, allowing developers to define a custom set of colors for Gutenberg blocks\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/src/components/colors/README.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createCustomColorsHOC } from '@wordpress/block-editor';\n\nconst CUSTOM_COLORS = [\n\t{ name: 'Red', slug: 'red', color: '#ff0000' },\n\t{ name: 'Blue', slug: 'blue', color: '#0000ff' },\n];\nconst withCustomColors = createCustomColorsHOC( CUSTOM_COLORS );\n\nexport default compose(\n\twithCustomColors( 'backgroundColor', 'borderColor' ),\n\tMyColorfulComponent\n);\n```\n\n----------------------------------------\n\nTITLE: Extending WordPress Stylelint Config with Custom Rules\nDESCRIPTION: JSON configuration demonstrating how to extend the WordPress stylistic preset and override specific rules for indentation and number leading zeros.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/stylelint-config/README.md#2025-04-21_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"extends\": \"@wordpress/stylelint-config/stylistic\",\n\t\"rules\": {\n\t\t\"@stylistic/indentation\": 4,\n\t\t\"@stylistic/number-leading-zero\": null\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Using WordPress Development Version - JSON\nDESCRIPTION: Demonstrates how to configure the WordPress environment to use the development version of core WordPress. This setup is advantageous for testing changes from the WordPress trunk. The core is set to the master branch of the WordPress Git repository, and the current directory is used as a plugin.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/env/README.md#2025-04-21_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"core\": \"WordPress/WordPress#master\",\n\t\"plugins\": [ \".\" ]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Base Styles to HTML for Gutenberg Editor\nDESCRIPTION: This snippet demonstrates how to include the necessary CSS styles for the Gutenberg Block Editor within the `<head>` of an HTML file. It uses `<link>` tags to import styles from the `@wordpress/components` and `@wordpress/block-editor` packages. The `vite-ignore` attribute prevents Vite from processing these links.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/platform-docs/docs/intro.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<link href=\"node_modules/@wordpress/components/build-style/style.css\" rel=\"stylesheet\" vite-ignore/>\n<link href=\"node_modules/@wordpress/block-editor/build-style/style.css\" rel=\"stylesheet\" vite-ignore/>\n```\n\n----------------------------------------\n\nTITLE: JavaScript Default Export Function\nDESCRIPTION: The snippet demonstrates a default exported function in JavaScript that adds two numbers together, and its corresponding output using docgen tool that documents the function details in markdown format.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/docgen/README.md#2025-04-21_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n/**\\n * Adds two numbers.\\n *\\n * @param {number} term1 First number.\\n * @param {number} term2 Second number.\\n * @return {number} The result of adding the two numbers.\\n */\\nexport default function addition( term1, term2 ) {\\n\\t// Implementation would go here.\\n}\n```\n\n----------------------------------------\n\nTITLE: Installing the WordPress Word Count Package\nDESCRIPTION: Command to install the @wordpress/wordcount package via npm. This installs the word count utility as a dependency in your project.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/wordcount/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @wordpress/wordcount --save\n```\n\n----------------------------------------\n\nTITLE: Matching Search Term with isMatchingSearchTerm\nDESCRIPTION: This code demonstrates how to check if a block type matches a search term using the `isMatchingSearchTerm` selector. It checks if the block 'core/navigation' matches the term 'theme' and displays the result in a paragraph.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core-blocks.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nimport { __, sprintf } from '@wordpress/i18n';\nimport { store as blocksStore } from '@wordpress/blocks';\nimport { useSelect } from '@wordpress/data';\n\nconst ExampleComponent = () => {\n\tconst termFound = useSelect(\n\t\t( select ) =>\n\t\t\tselect( blocksStore ).isMatchingSearchTerm(\n\t\t\t\t'core/navigation',\n\t\t\t\t'theme'\n\t\t\t),\n\t\t[]\n\t);\n\n\treturn (\n\t\t<p>\n\t\t\t{ sprintf(\n\t\t\t\t__(\n\t\t\t\t\t'Search term was found in the title, keywords, category or description in block.json: %s'\n\t\t\t\t),\n\t\t\t\ttermFound\n\t\t\t) }\n\t\t</p>\n\t);\n};\n\n```\n\n----------------------------------------\n\nTITLE: Specifying Editor Script in JSON\nDESCRIPTION: Demonstrates how to define a script that will be enqueued only in the context of the editor.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-metadata.md#2025-04-21_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{ \"editorScript\": \"file:./index.js\" }\n```\n\n----------------------------------------\n\nTITLE: Importing and Using HorizontalRule Component\nDESCRIPTION: Demonstrates how to import and use the HorizontalRule component from WordPress components library in a React-based application\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/primitives/src/horizontal-rule/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { HorizontalRule } from '@wordpress/components';\n\nconst MyHorizontalRule = () => <HorizontalRule />;\n```\n\n----------------------------------------\n\nTITLE: Implementing Field Visibility Function (JavaScript)\nDESCRIPTION: Example of a custom visibility function for a field. This function determines whether the field should be visible based on the provided item data.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/dataviews/README.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n{\n\tisVisible: ( item ) => {\n\t\t/* Custom implementation. */\n\t};\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Custom Colors in WordPress Block Color Palettes\nDESCRIPTION: This PHP snippet shows how to disable the ability to select custom colors in the WordPress block editor. It restricts users to colors provided by the theme or editor defaults.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/themes/theme-support.md#2025-04-21_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nadd_theme_support( 'disable-custom-colors' );\n```\n\n----------------------------------------\n\nTITLE: JavaScript: Using Translated Fruit Keywords\nDESCRIPTION: This JavaScript snippet defines a derived state `translatedFruit` that accesses the `translatedFruits` array to return the translated name of a fruit based on the current context. The `addMango` action now pushes the fruit keyword 'mango' instead of the translated string. This action is now pushing 'mango' instead of the translated string.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/core-concepts/server-side-rendering.md#2025-04-21_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nconst { state } = store( 'myFruitPlugin', {\n  state: {\n    get translatedFruit() {\n      const context = getContext();\n      return state.translatedFruits[ context.item ];\n    }\n  }\n  actions: {\n    addMango() {\n      state.fruits.push( 'mango' );\n    },\n  },\n} );\n```\n\n----------------------------------------\n\nTITLE: Installing the WordPress Customize Widgets Module using npm\nDESCRIPTION: This code snippet demonstrates how to install the WordPress Customize Widgets module using npm. It requires npm as a prerequisite and is intended for use within an ES2015+ environment.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/customize-widgets/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @wordpress/customize-widgets\n```\n\n----------------------------------------\n\nTITLE: Setting Up E2E Testing Environment for Performance Tests\nDESCRIPTION: Commands to prepare the environment for performance testing. This includes using the correct Node.js version, installing dependencies, and building packages.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/testing-overview.md#2025-04-21_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nnvm use && npm install\nnpm run build:packages\n```\n\n----------------------------------------\n\nTITLE: Configuring Heading Block with Level Options in HTML\nDESCRIPTION: Example of restricting heading levels (H1, H2, H6) in the Heading block using block markup with levelOptions attribute.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/curating-the-editor-experience/disable-editor-functionality.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- wp:heading {\"level\":3,\"levelOptions\":[3,4,5],\"className\":\"wp-block-heading\"} -->\n<h3 class=\"wp-block-heading\">Markup example</h3>\n<!-- /wp:heading -->\n```\n\n----------------------------------------\n\nTITLE: Customizing Source Path in JavaScript Build Commands\nDESCRIPTION: Introduces a new option to customize the source directory used with the start and build commands.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/scripts/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n--source-path\n```\n\n----------------------------------------\n\nTITLE: Export Legacy API for React Native\nDESCRIPTION: This snippet indicates the export of the legacy API at the top-level for the `useResizeObserver` functionality in React Native. It serves to maintain backward compatibility with older implementations while allowing access to new features.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/compose/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n-   `useResizeObserver`: export legacy API at top-level for React Native ([#65588](https://github.com/WordPress/gutenberg/pull/65588)).\n```\n\n----------------------------------------\n\nTITLE: Implementing Recursive Block Rendering with RecursionProvider in React/JSX\nDESCRIPTION: Example implementation of a recursive block edit component using RecursionProvider and useHasRecursion hook. The code demonstrates how to detect and handle infinite loops in block rendering, including showing a warning when a block attempts to render inside itself.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/src/components/recursion-provider/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n/**\n * WordPress dependencies\n */\nimport {\n\tRecursionProvider,\n\tuseHasRecursion,\n\tuseBlockProps,\n\tWarning,\n} from '@wordpress/block-editor';\nimport { __ } from '@wordpress/i18n';\n\nexport default function MyRecursiveBlockEdit( { attributes: { ref } } ) {\n\tconst hasAlreadyRendered = useHasRecursion( ref );\n\tconst blockProps = useBlockProps( {\n\t\tclassName: 'my-block__custom-class',\n\t} );\n\n\tif ( hasAlreadyRendered ) {\n\t\treturn (\n\t\t\t<div { ...blockProps }>\n\t\t\t\t<Warning>\n\t\t\t\t\t{ __( 'Block cannot be rendered inside itself.' ) }\n\t\t\t\t</Warning>\n\t\t\t</div>\n\t\t);\n\t}\n\n\treturn (\n\t\t<RecursionProvider uniqueId={ ref }>\n\t\t\tBlock editing code here....\n\t\t</RecursionProvider>\n\t);\n}\n\n/// ...\n\n<MyRecursiveBlockEdit />;\n```\n\n----------------------------------------\n\nTITLE: Declaring Meta Box for Backward Compatibility in PHP\nDESCRIPTION: This PHP code demonstrates how to declare a meta box as existing only for backward compatibility after it has been converted to a block.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/metabox.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nadd_meta_box( 'my-meta-box', 'My Meta Box', 'my_meta_box_callback',\n\tnull, 'normal', 'high',\n\tarray(\n\t\t'__back_compat_meta_box' => true,\n\t)\n);\n```\n\n----------------------------------------\n\nTITLE: Imperative JavaScript Implementation of Toggle Functionality\nDESCRIPTION: This snippet demonstrates an imperative approach to implementing toggle functionality in JavaScript. It manually selects elements and adds event listeners to handle the visibility of an element.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/iapi-about.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<button id=\"toggle-button\">Toggle Element</button>\n<p>This element is now visible!</p>\n<script>\n  const button = document.getElementById(\"toggle-button\");\n \n  button.addEventListener(\"click\", () => {\n    const element = document.getElementById(\"element\");\n    if(element) {\n      element.remove();\n    } else {\n      const newElement = document.createElement(\"p\");\n      newElement.textContent = \"This element is visible\";\n      document.body.appendChild(newElement);\n    }\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring includePaths for Sass\nDESCRIPTION: This JSON snippet configures the `includePaths` option for the `sass` or `node-sass` NPM modules, allowing direct imports from the `node_modules` directory without Webpack. This enables the use of the `@wordpress/base-styles` package by specifying the path where the SCSS compiler should look for modules.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/base-styles/README.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"{\\n\\t\\\"includePaths\\\": [ \\\"node_modules\\\" ]\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Selector: getInstalledBlockTypes\nDESCRIPTION: This selector retrieves block types that have been installed during the current session. It requires the global application state and returns an array of installed block type items.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-directory/README.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n// Selector\nfunction getInstalledBlockTypes(state) {\n    // logic to get installed block types\n    return []; // return array of installed block types\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Development Dependencies for Gutenberg Project\nDESCRIPTION: Command for adding development dependencies to the root package.json file, making them available to all packages in the workspace.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/README.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm install glob --save-dev\n```\n\n----------------------------------------\n\nTITLE: Defining Options for Dependency Extraction Plugin\nDESCRIPTION: Pass an options object to the Dependency Extraction Webpack Plugin constructor to customize its behavior. Options include `injectPolyfill`, `outputFormat`, and `combineAssets`.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/dependency-extraction-webpack-plugin/README.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n\tplugins: [\n\t\tnew DependencyExtractionWebpackPlugin( { injectPolyfill: true } ),\n\t],\n};\n```\n\n----------------------------------------\n\nTITLE: YouTube Video Embed HTML Template\nDESCRIPTION: HTML iframe template for embedding YouTube videos in documentation with proper dimensions and permissions.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/documentation/README.md#2025-04-21_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<iframe width=\"960\" height=\"540\" src=\"[Video embed link]\" title=\"[Video title]\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"true\"></iframe>\n```\n\n----------------------------------------\n\nTITLE: Introduction of compose and pipe Utilities\nDESCRIPTION: The new in-house `compose` and `pipe` utilities enhance functional programming styles within the project, providing developers with additional tools for composing functions in a readable and maintainable way.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/compose/CHANGELOG.md#2025-04-21_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n-   Compose: Introduce in-house `compose` and `pipe` utils ([#44112](https://github.com/WordPress/gutenberg/pull/44112)).\n```\n\n----------------------------------------\n\nTITLE: Reading Pending Messages from WordPress Gutenberg Signaling Server\nDESCRIPTION: This code shows how to request pending messages from the Gutenberg Signaling Server. It sends a GET request with the client's subscriber ID, which returns an event stream containing any unread messages for the topics the client has subscribed to.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/lib/experimental/sync/README.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nawait (\n\tawait fetch(\n\t\twindow.wp.url.addQueryArgs( window.wp.ajax.settings.url, {\n\t\t\tsubscriber_id: '1',\n\t\t\taction: 'gutenberg_signaling_server',\n\t\t} )\n\t)\n ).text();\n```\n\n----------------------------------------\n\nTITLE: Defining Font Size Primitive Tokens in CSS\nDESCRIPTION: Defines the primitive font size tokens as SASS variables. These variables provide consistent sizing options from x-small to 2x-large for use across the WordPress components system.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/storybook/stories/tokens/typography.mdx#2025-04-21_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n$font-size-x-small: 11px;\n$font-size-small: 12px;\n$font-size-medium: 13px;\n$font-size-large: 15px;\n$font-size-x-large: 20px;\n$font-size-2x-large: 32px;\n```\n\n----------------------------------------\n\nTITLE: Importing useBlockDropZone Hook in JavaScript\nDESCRIPTION: This code snippet demonstrates how to import the useBlockDropZone hook from the WordPress @wordpress/block-editor package. The hook is used to create a drop zone for blocks, supporting drag and drop of media in the Gutenberg editor.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/src/components/use-block-drop-zone/README.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useBlockDropZone } from '@wordpress/block-editor';\n```\n\n----------------------------------------\n\nTITLE: Correct Variable Assignment Timing in JavaScript\nDESCRIPTION: Example showing the proper way to structure code where the costly operation is only performed after ensuring it will be used, avoiding unnecessary computation in early return scenarios.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/eslint-plugin/docs/rules/no-unused-vars-before-return.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction example( number ) {\n\tif ( number > 10 ) {\n\t\treturn number + 1;\n\t}\n\n\tconst foo = doSomeCostlyOperation();\n\treturn number + foo;\n}\n```\n\n----------------------------------------\n\nTITLE: PHP: Defining Static Initial State\nDESCRIPTION: Defines the initial state on the server using the `wp_interactivity_state` function in PHP. It sets the initial values for both `fruits` and the derived state `hasFruits` statically. This ensures the initial HTML rendering reflects the correct state.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/core-concepts/server-side-rendering.md#2025-04-21_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nwp_interactivity_state( 'myFruitPlugin', array(\n  'fruits'    => array( 'Apple', 'Banana', 'Cherry' ),\n  'hasFruits' => true\n));\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack with Dependency Extraction\nDESCRIPTION: Integrate the Dependency Extraction Webpack Plugin into a webpack configuration to externalize WordPress dependencies. It is crucial to ensure only one instance of the plugin is used to avoid conflicts.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/dependency-extraction-webpack-plugin/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// webpack.config.js\nconst DependencyExtractionWebpackPlugin = require( '@wordpress/dependency-extraction-webpack-plugin' );\n\nmodule.exports = {\n\t// …snip\n\tplugins: [ new DependencyExtractionWebpackPlugin() ],\n};\n```\n\n----------------------------------------\n\nTITLE: Running React Native Doctor\nDESCRIPTION: Command to run the React Native doctor tool for identifying missing dependencies in the development environment.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/react-native/osx-setup-guide.md#2025-04-21_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nnpx @react-native-community/cli doctor\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Empty Parser in PHP for WordPress Gutenberg\nDESCRIPTION: This code snippet demonstrates how to create a custom parser class that returns an empty document and how to use the 'block_parser_class' filter to replace the default parser with this custom implementation.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/filters/parser-filters.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass EmptyParser {\n  public function parse( $post_content ) {\n    // return an empty document\n    return array();\n  }\n}\n\nfunction wpdocs_select_empty_parser( $prev_parser_class ) {\n    return 'EmptyParser';\n}\n\nadd_filter( 'block_parser_class', 'wpdocs_select_empty_parser', 10, 1 );\n```\n\n----------------------------------------\n\nTITLE: Prepending HTTPS to URL\nDESCRIPTION: Adds 'https://' to URLs that appear to be top-level domains. Does not replace existing HTTP protocols. Useful for standardizing URL formats.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/url/README.md#2025-04-21_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nconst actualURL = prependHTTPS( 'wordpress.org' ); // https://wordpress.org\n```\n\n----------------------------------------\n\nTITLE: Initializing Derived State with Local Context in PHP\nDESCRIPTION: This snippet shows how to initialize derived state that depends on local context using PHP. It demonstrates the use of wp_interactivity_state and wp_interactivity_data_wp_context functions.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/core-concepts/undestanding-global-state-local-context-and-derived-state.md#2025-04-21_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$counter = 1;\n\n// This is the local context.\n$context = array( 'counter' => $counter );\n\nwp_interactivity_state( 'myCounterPlugin', array(\n  'double' => $counter * 2, // This is derived state.\n));\n?>\n\n<div\n  data-wp-interactive=\"myCounterPlugin\"\n  <?php echo wp_interactivity_data_wp_context( $context ); ?>\n>\n  <div>\n    Counter: <span data-wp-text=\"context.counter\"></span>\n  </div>\n  <div>\n    Double: <span data-wp-text=\"state.double\"></span>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Server-Side Rendered Interactive HTML\nDESCRIPTION: Shows the HTML markup after server-side processing of Interactivity API directives. The directives have been applied to create the initial DOM state, with classes added and attributes hydrated based on the global state.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/core-concepts/undestanding-global-state-local-context-and-derived-state.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div\n\tdata-wp-interactive=\"myPlugin\"\n\tdata-wp-class--is-dark-theme=\"state.isDarkTheme\"\n\tclass=\"my-plugin is-dark-theme\"\n>\n\t<div hidden data-wp-bind--hidden=\"!state.show\">\n\t\tHello <span data-wp-text=\"state.helloText\">world</span>\n\t</div>\n\t<button data-wp-on-async--click=\"actions.toggle\">Toggle</button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: CSS Styling for Block Annotations in WordPress Gutenberg\nDESCRIPTION: This CSS snippet provides styling for block-level annotations. It adds a black outline to blocks annotated by 'my-annotations-plugin'.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-annotations.md#2025-04-21_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n.is-annotated-by-my-annotations-plugin {\n\toutline: 1px solid black;\n}\n```\n\n----------------------------------------\n\nTITLE: Block Typing Actions (startTyping, stopTyping)\nDESCRIPTION: Actions that signal when a user begins and ends typing in the block editor. These actions help manage the typing state of the editor.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core-block-editor.md#2025-04-21_snippet_21\n\n\n\n----------------------------------------\n\nTITLE: Configuring Enzyme Snapshot Serializer\nDESCRIPTION: Jest configuration to add enzyme-to-json serializer for snapshot testing\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/jest-preset-default/README.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n{\n\tsnapshotSerializers: [ 'enzyme-to-json/serializer' ];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Stylelint with WordPress Stylistic Preset\nDESCRIPTION: JSON configuration to use the WordPress stylistic preset, which adds rules for code style such as indentation.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/stylelint-config/README.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"extends\": [ \"@wordpress/stylelint-config/stylistic\" ]\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using FocusableIframe Component\nDESCRIPTION: Demonstrates how to import and use the FocusableIframe component with an onFocus event handler\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/focusable-iframe/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { FocusableIframe } from '@wordpress/components';\n\nconst MyFocusableIframe = () => (\n\t<FocusableIframe\n\t\tsrc=\"/my-iframe-url\"\n\t\tonFocus={ () => console.log( 'iframe is focused' ) }\n\t/>\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Specific Block Bindings Source in WordPress Gutenberg\nDESCRIPTION: This snippet demonstrates how to get a specific block bindings source by its name using the getBlockBindingsSource function from the @wordpress/blocks package. It returns the source object if found.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-bindings.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getBlockBindingsSource } from '@wordpress/blocks';\n\nconst blockBindingsSource = getBlockBindingsSource( 'plugin/my-custom-source' );\n```\n\n----------------------------------------\n\nTITLE: Extended Package.json Configuration with Custom Rules\nDESCRIPTION: Advanced configuration showing how to extend WordPress rules and add custom validation rules in package.json.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/npm-package-json-lint-config/README.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"npmpackagejsonlint\": {\n\t\"extends\": \"@wordpress/npm-package-json-lint-config\",\n\t\"rules\": {\n\t\t\"valid-values-author\": [\n\t\t\t\"error\",\n\t\t\t[\n\t\t\t\t\"WordPress\"\n\t\t\t]\n\t\t]\n\t}\n},\n```\n\n----------------------------------------\n\nTITLE: Configuring Stylelint with Global WordPress Config Path\nDESCRIPTION: JSON configuration to extend the WordPress stylelint config when installed globally, using an absolute path.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/stylelint-config/README.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"extends\": \"/absolute/path/to/@wordpress/stylelint-config\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example Size Object for DimensionControl\nDESCRIPTION: This code snippet shows the expected format for size objects passed to the `sizes` property of the `DimensionControl` component. Each object should have a `name` and a `slug` property, both of which are strings. The `name` property is a human-readable label, while the `slug` property is a unique identifier for the size.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/dimension-control/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n[\n\t{\n\t\tname: __( 'Small' ),\n\t\tslug: 'small',\n\t},\n\t\t{\n\t\tname: __( 'Medium' ),\n\t\tslug: 'small',\n\t},\n\t// ...etc\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring WordPress Block Templates Path in JavaScript\nDESCRIPTION: This JavaScript snippet provides an example of setting up a custom path for individual WordPress block templates via the 'blockTemplatesPath' field. It uses the Node.js 'path' module to specify the location of the 'block-templates' directory. This allows overriding default template files for block creation.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/create-block/docs/external-template.md#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { join } = require( 'path' );\n\nmodule.exports = {\n\tblockTemplatesPath: join( __dirname, 'block-templates' ),\n};\n```\n\n----------------------------------------\n\nTITLE: Inserting Block in Gutenberg Editor (JavaScript)\nDESCRIPTION: Action creator that returns an action object to insert a single block into the editor. It handles block validation and template locks, and can optionally update block selection.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core-block-editor.md#2025-04-21_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\ninsertBlock( block, index, rootClientId, updateSelection, meta )\n```\n\n----------------------------------------\n\nTITLE: ButtonBlockerAppender Renaming\nDESCRIPTION: The `ButtonBlockerAppender` component was renamed to `ButtonBlockAppender` due to a typo. The original name is still exported for backward compatibility. Developers should update their code to use the corrected name for future compatibility and to avoid deprecation warnings.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/CHANGELOG.md#2025-04-21_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: The registry.register function behavior changes\nDESCRIPTION: This change states that the registry.register function will no longer register a store if another instance was registered with the same name, noted in the 9.0.0 release.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/data/CHANGELOG.md#2025-04-21_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n-   The `registry.register` function will no longer register a store if another instance is registered with the same name.\n```\n\n----------------------------------------\n\nTITLE: Rendering ButtonBlockAppender in Gutenberg\nDESCRIPTION: This JSX function demonstrates how to render the ButtonBlockAppender component within a block's edit function. It is essential for customizing the block insertion UI in Gutenberg. The main dependency is the ButtonBlockAppender component and it requires rootClientId to function properly.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/src/components/button-block-appender/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nfunction render( { clientId } ) {\n\treturn (\n\t\t<div>\n\t\t\t<p>Some rendered content here</p>\n\t\t\t<ButtonBlockAppender rootClientId={ clientId } />\n\t\t</div>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Pullquote - Gutenberg (Markdown)\nDESCRIPTION: This snippet defines a block for displaying quotes with special visual emphasis. It supports layout and styling attributes.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/core-blocks.md#2025-04-21_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\n- **Name:** core/pullquote\n- **Category:** text\n- **Supports:** align (full, left, right, wide), anchor, background (backgroundImage, backgroundSize), color (background, gradients, link, text), dimensions (minHeight), interactivity (clientNavigation), spacing (margin, padding), typography (fontSize, lineHeight)\n- **Attributes:** citation, textAlign, value\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Service Override for Ubuntu\nDESCRIPTION: Configuration file to set up Docker daemon to listen on TCP, which can resolve connection issues with wp-env on Ubuntu versions prior to 20.04.1.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/getting-started/devenv/get-started-with-wp-env.md#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n# /etc/systemd/system/docker.service.d/override.conf\n[Service]\nExecStart=\nExecStart=/usr/bin/dockerd -H fd:// -H tcp://0.0.0.0:2376\n```\n\n----------------------------------------\n\nTITLE: Using Post Meta in PHP Content Filter for WordPress\nDESCRIPTION: This PHP code demonstrates how to use the saved post meta data by appending it to the end of the post content wrapped in an H4 tag.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/metabox.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nfunction myguten_content_filter( $content ) {\n\t$value = get_post_meta( get_the_ID(), 'myguten_meta_block_field', true );\n\tif ( $value ) {\n\t\treturn sprintf( \"%s <h4> %s </h4>\", $content, esc_html( $value ) );\n\t} else {\n\t\treturn $content;\n\t}\n}\nadd_filter( 'the_content', 'myguten_content_filter' );\n```\n\n----------------------------------------\n\nTITLE: Using BottomSheet NavBar in React Components\nDESCRIPTION: Example of implementing a BottomSheet with a NavBar that includes navigation buttons and a heading. The NavBar uses a left-center-right layout pattern with back button, heading, and apply button components.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/mobile/bottom-sheet/nav-bar/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { BottomSheet } from '@wordpress/components';\n\nexport default = () => (\n\t<BottomSheet>\n\t\t<BottomSheet.NavBar>\n\t\t\t<BottomSheet.NavBar.BackButton onPress={ () => {} } />\n\t\t\t<BottomSheet.NavBar.Heading>A Sheet Title</BottomSheet.NavBar.Heading>\n\t\t\t<BottomSheet.NavBar.ApplyButton onPress={ () => {} } />\n\t\t</BottomSheet.NavBar>\n\t</BottomSheet>\n);\n```\n\n----------------------------------------\n\nTITLE: Simplified Color Block Support Implementation in PHP\nDESCRIPTION: This PHP snippet shows a simplified version of how the color block support is implemented using the Style Engine.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/style-engine/docs/using-the-style-engine-with-block-supports.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nfunction gutenberg_apply_colors_support( $block_type, $block_attributes ) {\n\t// Get the color styles from the style object.\n\t$block_color_styles = isset( $block_attributes['style']['color'] ) ? $block_attributes['style']['color'] : null;\n\n\t// Since we only want the color styles, pass the color styles only to the Style Engine.\n\t$styles = wp_style_engine_get_styles( array( 'color' => $block_color_styles ) );\n\n\t// Return the generated styles to be applied to the block's HTML element.\n\treturn array(\n\t\t'style' => $styles['css'],\n\t\t'class' => $styles['classnames']\n\t);\n}\n\n// Register the block support.\nWP_Block_Supports::get_instance()->register(\n\t'colors',\n\tarray(\n\t\t'register_attribute' => 'gutenberg_register_colors_support',\n\t\t'apply'              => 'gutenberg_apply_colors_support',\n\t)\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Format Type in React Component using WordPress Data API\nDESCRIPTION: This snippet demonstrates how to use the getFormatType selector from the rich-text store in a React component. It retrieves the 'core/bold' format type and displays its properties.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core-rich-text.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { __, sprintf } from '@wordpress/i18n';\nimport { store as richTextStore } from '@wordpress/rich-text';\nimport { useSelect } from '@wordpress/data';\n\nconst ExampleComponent = () => {\n   const { getFormatType } = useSelect(\n       ( select ) => select( richTextStore ),\n       []\n   );\n\n   const boldFormat = getFormatType( 'core/bold' );\n\n   return boldFormat ? (\n       <ul>\n           { Object.entries( boldFormat )?.map( ( [ key, value ] ) => (\n               <li>\n                   { key } : { value }\n               </li>\n          ) ) }\n      </ul>\n   ) : (\n       __( 'Not Found' )\n   ;\n};\n```\n\n----------------------------------------\n\nTITLE: Clearing Local Storage - JavaScript\nDESCRIPTION: Clears the browser's local storage. This utility is useful for resetting the testing environment between tests.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/e2e-test-utils/README.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nasync function clearLocalStorage() {\n    // logic to clear local storage\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Non-Multiplicity for Gutenberg Blocks (JavaScript)\nDESCRIPTION: This snippet restricts the block to be used only once in a post by setting the `multiple` property to false within the `supports` configuration.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-supports.md#2025-04-21_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nsupports: {\n\t// Use the block just once per post\n\tmultiple: false\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Query Total Display - Gutenberg (Markdown)\nDESCRIPTION: This snippet defines a block that displays the total number of results found in a query, with support for various visual customization options.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/core-blocks.md#2025-04-21_snippet_21\n\nLANGUAGE: markdown\nCODE:\n```\n- **Name:** core/query-total\n- **Category:** theme\n- **Ancestor:** core/query\n- **Supports:** align (full, wide), color (background, gradients, text), interactivity (clientNavigation), spacing (margin, padding), typography (fontSize, lineHeight), ~~html~~\n- **Attributes:** displayType\n```\n\n----------------------------------------\n\nTITLE: Creating a Paragraph Block in Gutenberg\nDESCRIPTION: This snippet illustrates how to create a paragraph block in the Gutenberg editor, including a placeholder for adding descriptive text. The paragraph is structured to allow content to be inserted dynamically in the editor.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/test/e2e/specs/editor/plugins/__snapshots__/Post-type-templates-Using-a-CPT-with-a-predefi-fffe1--custom-post-types-with-a-predefined-template-1-chromium.txt#2025-04-21_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- wp:paragraph {\"placeholder\":\"Add a book description\"} -->\n<p></p>\n<!-- /wp:paragraph -->\n```\n\n----------------------------------------\n\nTITLE: Initializing Server-Side Store State in PHP for WordPress Gutenberg\nDESCRIPTION: This PHP snippet demonstrates how to initialize the store state on the server-side using the wp_interactivity_state() function in a WordPress Gutenberg block's render.php file.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/api-reference.md#2025-04-21_snippet_35\n\nLANGUAGE: php\nCODE:\n```\nwp_interactivity_state( 'myPlugin', array (\n\t'someValue' => get_some_value()\n));\n```\n\n----------------------------------------\n\nTITLE: Rendering Copyright Date Block on frontend\nDESCRIPTION: PHP code to render the block on the frontend, displaying the current year with copyright symbol.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/getting-started/tutorial.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n...\n?>\n<p <?php echo get_block_wrapper_attributes(); ?>>© <?php echo date( \"Y\" ); ?></p>\n```\n\n----------------------------------------\n\nTITLE: Handling Legacy Components\nDESCRIPTION: This section highlights key considerations for handling legacy components and prevents incompatibility issues during merging of new and legacy components. It advises on ensuring automated tests are in place and warns against combined usage of legacy and new components to mitigate unexpected behavior.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/CONTRIBUTING.md#2025-04-21_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\nIn case that is not possible (eg. too difficult to reconciliate new and legacy implementations, or impossible to preserve backward compatibility), then the legacy implementation can stay as-is.\n\nIn any case, extra attention should be paid to legacy component families made of two or more subcomponents. It is possible, in fact, that the a legacy subcomponent is used as a parent / child of a subcomponent from the new version (this can happen, for example, when Gutenberg allows third party developers to inject React components via Slot/Fill). To avoid incompatibility issues and unexpected behavior, there should be some code in the components warning when the above scenario happens — or even better, aliasing to the correct version of the component.\n```\n\n----------------------------------------\n\nTITLE: Implementing Save Functionality in EditPageForm Component (JSX)\nDESCRIPTION: This code snippet demonstrates how to implement a save button and functionality in the EditPageForm component using Gutenberg data actions.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/data-basics/3-building-an-edit-form.md#2025-04-21_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nfunction EditPageForm( { pageId, onCancel, onSaveFinished } ) {\n\t// ...\n\tconst { saveEditedEntityRecord } = useDispatch( coreDataStore );\n\tconst handleSave = () => saveEditedEntityRecord( 'postType', 'page', pageId );\n\n\treturn (\n\t\t<div className=\"my-gutenberg-form\">\n\t\t\t{/* ... */}\n\t\t\t<div className=\"form-buttons\">\n\t\t\t\t<Button onClick={ handleSave } variant=\"primary\">\n\t\t\t\t\tSave\n\t\t\t\t</Button>\n\t\t\t\t{/* ... */}\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Text Alignment Support Configuration\nDESCRIPTION: Shows two ways to configure text alignment support - either enabling all options or specific alignment options only.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-supports.md#2025-04-21_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\nsupports: {\n    typography: {\n        // Declare support for block's text alignment.\n        // This adds support for all the options:\n        // left, center, right.\n        textAlign: true\n    }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nsupports: {\n    typography: {\n        // Declare support for specific text alignment options.\n        textAlign: [ 'left', 'right' ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Toggling Feature Flag in WordPress Gutenberg (JavaScript)\nDESCRIPTION: This function triggers an action to toggle a feature flag. It takes a single parameter 'feature' which is a string representing the feature name.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core-edit-post.md#2025-04-21_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\ntoggleFeature( feature )\n```\n\n----------------------------------------\n\nTITLE: Installing the @wordpress/patterns module\nDESCRIPTION: This command installs the `@wordpress/patterns` module as a dependency to your project using npm. The `--save` flag ensures that the package is added to your project's `package.json` file.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/patterns/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"npm install @wordpress/patterns --save\"\n```\n\n----------------------------------------\n\nTITLE: Disabling Heading Block Background Colors with PHP Filter\nDESCRIPTION: Using block_type_metadata filter to disable background color and gradient support for Heading blocks\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/curating-the-editor-experience/filters-and-hooks.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nfunction example_disable_heading_background_color_and_gradients( $metadata ) {\n\n    // Only apply the filter to Heading blocks.\n    if ( ! isset( $metadata['name'] ) || 'core/heading' !== $metadata['name'] ) {\n        return $metadata;\n    }\n\n    // Check if 'supports' key exists.\n    if ( isset( $metadata['supports'] ) && isset( $metadata['supports']['color'] ) ) {\n\n        // Remove Background color and Gradients support.\n        $metadata['supports']['color']['background'] = false;\n        $metadata['supports']['color']['gradients']  = false;\n    }\n\n    return $metadata;\n}\nadd_filter( 'block_type_metadata', 'example_disable_heading_background_color_and_gradients' );\n```\n\n----------------------------------------\n\nTITLE: Installing Prettier for Code Formatting\nDESCRIPTION: This code snippet installs Prettier as a development dependency, which can be integrated with ESLint to ensure consistent code formatting by reporting differences as ESLint issues.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/eslint-plugin/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install prettier --save-dev\n```\n\n----------------------------------------\n\nTITLE: Android ReactAztecText Implementation (Java)\nDESCRIPTION: This snippet references the Java implementation of the `ReactAztecText` view in the `react-native-aztec` package. It highlights the class extending `AztecText` from the Android Aztec Library, handling rich text editing natively.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/react-native-aztec/README.md#2025-04-21_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n[`ReactAztecText`](https://github.com/WordPress/gutenberg/blob/7532a485b400f86638145b71f94f6f717e5add25/packages/react-native-aztec/android/src/main/java/org/wordpress/mobile/ReactNativeAztec/ReactAztecText.java#L50)\n\n```\n\n----------------------------------------\n\nTITLE: Using Elevation Tokens in JavaScript Components\nDESCRIPTION: Example of importing and using elevation tokens from the WordPress components CONFIG object. This demonstrates how to apply elevation values in JavaScript components within the @wordpress/components package.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/storybook/stories/tokens/elevation.mdx#2025-04-21_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n// Note: the `CONFIG` object is only available within the `@wordpress/components` package.\nimport { CONFIG } from '../utils';\n\n// Later in the code:\nbox-shadow: ${ CONFIG.elevationXSmall };\n```\n\n----------------------------------------\n\nTITLE: Default npm Scripts in package.json for WordPress Block Development\nDESCRIPTION: This JSON snippet shows the default scripts added to package.json by create-block. These scripts utilize wp-scripts for various development tasks such as building, formatting, linting, and starting a development server.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/getting-started/devenv/get-started-with-create-block.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"scripts\": {\n\t\t\"build\": \"wp-scripts build\",\n\t\t\"format\": \"wp-scripts format\",\n\t\t\"lint:css\": \"wp-scripts lint-style\",\n\t\t\"lint:js\": \"wp-scripts lint-js\",\n\t\t\"packages-update\": \"wp-scripts packages-update\",\n\t\t\"plugin-zip\": \"wp-scripts plugin-zip\",\n\t\t\"start\": \"wp-scripts start\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Request Utilities Setup - JavaScript\nDESCRIPTION: This snippet explains how to set up RequestUtils for interacting with the WordPress REST API, requiring user credentials for authentication.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/e2e-test-utils-playwright/README.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst requestUtils = await RequestUtils.setup( {\n\tuser: {\n\t\tusername: 'admin',\n\t\tpassword: 'password',\n\t},\n} );\n```\n\n----------------------------------------\n\nTITLE: Modifying Theme JSON Data with wp_theme_json_data_theme Filter in PHP\nDESCRIPTION: This snippet demonstrates how to use the wp_theme_json_data_theme filter to modify the theme's color palette and disable the text color UI. It creates a new data array with updated color settings and uses the update_with() method to apply the changes.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/filters/global-styles-filters.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfunction wpdocs_filter_theme_json_theme( $theme_json ){\n\t$new_data = array(\n\t\t'version'  => 2,\n\t\t'settings' => array(\n\t\t\t'color' => array(\n\t\t\t\t'text'       => false,\n\t\t\t\t'palette'    => array( /* New palette */\n\t\t\t\t\tarray(\n\t\t\t\t\t\t'slug'  => 'foreground',\n\t\t\t\t\t\t'color' => 'black',\n\t\t\t\t\t\t'name'  => __( 'Foreground', 'theme-domain' ),\n\t\t\t\t\t),\n\t\t\t\t\tarray(\n\t\t\t\t\t\t'slug'  => 'background',\n\t\t\t\t\t\t'color' => 'white',\n\t\t\t\t\t\t'name'  => __( 'Background', 'theme-domain' ),\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t),\n\t\t),\n\t);\n\n\treturn $theme_json->update_with( $new_data );\n}\nadd_filter( 'wp_theme_json_data_theme', 'wpdocs_filter_theme_json_theme' );\n```\n\n----------------------------------------\n\nTITLE: Creating Meta Block in JavaScript for WordPress Gutenberg\nDESCRIPTION: This JavaScript code creates a custom block that allows users to input and save meta data using the useEntityProp hook in the WordPress block editor.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/metabox.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { registerBlockType } from '@wordpress/blocks';\nimport { TextControl } from '@wordpress/components';\nimport { useSelect } from '@wordpress/data';\nimport { useEntityProp } from '@wordpress/core-data';\nimport { useBlockProps } from '@wordpress/block-editor';\n\nregisterBlockType( 'myguten/meta-block', {\n\tedit: ( { setAttributes, attributes } ) => {\n\t\tconst blockProps = useBlockProps();\n\t\tconst postType = useSelect(\n\t\t\t( select ) => select( 'core/editor' ).getCurrentPostType(),\n\t\t\t[]\n\t\t);\n\n\t\tconst [ meta, setMeta ] = useEntityProp( 'postType', postType, 'meta' );\n\n\t\tconst metaFieldValue = meta[ 'myguten_meta_block_field' ];\n\t\tconst updateMetaValue = ( newValue ) => {\n\t\t\tsetMeta( { ...meta, myguten_meta_block_field: newValue } );\n\t\t};\n\n\t\treturn (\n\t\t\t<div { ...blockProps }>\n\t\t\t\t<TextControl\n\t\t\t\t\t__nextHasNoMarginBottom\n\t\t\t\t\t__next40pxDefaultSize\t\t\t\t\n\t\t\t\t\tlabel=\"Meta Block Field\"\n\t\t\t\t\tvalue={ metaFieldValue }\n\t\t\t\t\tonChange={ updateMetaValue }\n\t\t\t\t/>\n\t\t\t</div>\n\t\t);\n\t},\n\n\t// No information saved to the block.\n\t// Data is saved to post meta via the hook.\n\tsave: () => {\n\t\treturn null;\n\t},\n} );\n```\n\n----------------------------------------\n\nTITLE: Retrieving Grouping Block Name using useSelect\nDESCRIPTION: This code snippet demonstrates how to retrieve the name of the block used for grouping other blocks using the `useSelect` hook from `@wordpress/data` and the `getGroupingBlockName` selector from the `@wordpress/blocks` store. It displays the grouping block name within a paragraph element.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core-blocks.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { __, sprintf } from '@wordpress/i18n';\nimport { store as blocksStore } from '@wordpress/blocks';\nimport { useSelect } from '@wordpress/data';\n\nconst ExampleComponent = () => {\n\tconst groupingBlockName = useSelect(\n\t\t( select ) => select( blocksStore ).getGroupingBlockName(),\n\t\t[]\n\t);\n\n\treturn (\n\t\tgroupingBlockName && (\n\t\t\t<p>\n\t\t\t\t{ sprintf(\n\t\t\t\t\t__( 'Default grouping block name: %s' ),\n\t\t\t\t\tgroupingBlockName\n\t\t\t\t) }\n\t\t\t</p>\n\t\t)\n\t);\n};\n\n```\n\n----------------------------------------\n\nTITLE: Installing @wordpress/undo-manager Package with npm\nDESCRIPTION: This command installs the @wordpress/undo-manager package using npm, saving it as a dependency in the project's package.json file.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/undo-manager/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @wordpress/undo-manager --save\n```\n\n----------------------------------------\n\nTITLE: Configuring requestToExternalModule for Script Module Handling\nDESCRIPTION: Shows how to customize script module handling for module imports. The function accepts a script module request string and returns a string representing the script module identifier.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/dependency-extraction-webpack-plugin/README.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Externalize 'my-module'\n *\n * @param {string} request Requested script module\n *\n * @return {(string|boolean|undefined)} Script module ID\n */\nfunction requestToExternalModule( request ) {\n\t// Handle imports like `import myModule from 'my-module'`\n\tif ( request === 'my-module' ) {\n\t\t// Import should be of the form `import { something } from \"myModule\";` in the final bundle.\n\t\treturn 'myModule';\n\t}\n\n\t// If the script module ID in source is the same as the external script module, `true` can be returned.\n\treturn request === 'external-module-id-no-change-required';\n}\n\nmodule.exports = {\n\tplugins: [\n\t\tnew DependencyExtractionWebpackPlugin( { requestToExternalModule } ),\n\t],\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of WordPress Upload Media Store\nDESCRIPTION: Demonstrates how to interact with the upload data store by updating settings and adding items to the upload queue.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/upload-media/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { store as uploadStore } from '@wordpress/upload-media';\nimport { dispatch } from '@wordpress/data';\n\ndispatch( uploadStore ).updateSettings( /* ... */ );\ndispatch( uploadStore ).addItems( [\n\t/* ... */\n] );\n```\n\n----------------------------------------\n\nTITLE: Initializing Global State in PHP\nDESCRIPTION: Using the wp_interactivity_state function to initialize global state for an interactive block with an array of fruits.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/core-concepts/server-side-rendering.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nwp_interactivity_state( 'myFruitPlugin', array(\n  'fruits' => array( 'Apple', 'Banana', 'Cherry' )\n));\n```\n\n----------------------------------------\n\nTITLE: Accessing Server-Initialized State in JavaScript\nDESCRIPTION: Shows how state initialized on the server with wp_interactivity_state is automatically available in JavaScript. The server-side values are combined with client-side definitions.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/core-concepts/undestanding-global-state-local-context-and-derived-state.md#2025-04-21_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nwp_interactivity_state( 'myPlugin', array(\n  'someValue' => 1,\n));\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst { state } = store( 'myPlugin', {\n\tstate: {\n\t\totherValue: 2,\n\t},\n\tactions: {\n\t\treadGlobalState() {\n\t\t\tstate.someValue; // It exists and its initial value is 1.\n\t\t\tstate.otherValue; // It exists and its initial value is 2.\n\t\t},\n\t},\n} );\n```\n\n----------------------------------------\n\nTITLE: Installing WordPress i18n Package\nDESCRIPTION: Instructions for installing the WordPress internationalization package via npm.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/i18n/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @wordpress/i18n --save\n```\n\n----------------------------------------\n\nTITLE: Avoiding Side Effects with Function Encapsulation in JavaScript\nDESCRIPTION: This snippet demonstrates how to avoid side effects by encapsulating the registerStore call within an init function that isn't called at the module's top level.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/side-effects.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { registerStore } from '@wordpress/data';\n\nexport function init() {\n\tconst store = registerStore( STORE_NAME, {\n\t\t// ...\n\t} );\n}\n\n// `init` doesn't get called at the top level of the module,\n// therefore importing the module doesn't cause side effects.\n```\n\n----------------------------------------\n\nTITLE: Installing wp-env as a Global Package - Shell\nDESCRIPTION: This command installs the wp-env tool globally on the system using npm, allowing access to the tool from any location.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/env/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ npm -g i @wordpress/env\n```\n\n----------------------------------------\n\nTITLE: Using Radius Tokens with CSS SASS Variables\nDESCRIPTION: Example of implementing radius tokens using SASS variables in CSS. These tokens provide border-radius values ranging from extra small (1px) to round (100%) for consistent styling across the WordPress design system.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/storybook/stories/tokens/radius.mdx#2025-04-21_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.radius-extra-small {\n\tborder-radius: $radius-x-small;\n}\n.radius-small {\n\tborder-radius: $radius-small;\n}\n.radius-medium {\n\tborder-radius: $radius-medium;\n}\n.radius-large {\n\tborder-radius: $radius-large;\n}\n.radius-full {\n\tborder-radius: $radius-full;\n}\n.radius-round {\n\tborder-radius: $radius-round;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Rich Text Module via npm\nDESCRIPTION: Command to install the @wordpress/rich-text package using npm. This module is designed for use in ES2015+ environments.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/rich-text/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @wordpress/rich-text\n```\n\n----------------------------------------\n\nTITLE: Initializing Post Title Server State in PHP\nDESCRIPTION: Sets up post title state on the server side for the add-post-to-todo block\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/core-concepts/using-typescript.md#2025-04-21_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// add-post-to-todo-block/render.php\nwp_interactivity_state( 'myTodoPlugin', array(\n  'postTitle' => get_the_title(),\n));\n?>\n\n<!-- HTML markup... -->\n```\n\n----------------------------------------\n\nTITLE: Disabling Custom Class Name Support in WordPress Gutenberg\nDESCRIPTION: This snippet demonstrates how to disable the custom class name field for a block in WordPress Gutenberg.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-supports.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nsupports: {\n\t// Remove the support for the custom className.\n\tcustomClassName: false\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Store with State and Actions\nDESCRIPTION: Demonstrates defining a store with both state and actions, where the toggle action updates the global state. The state object is accessed directly within the action functions.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/core-concepts/undestanding-global-state-local-context-and-derived-state.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst { state } = store( 'myPlugin', {\n\tstate: {\n\t\t// ...\n\t},\n\tactions: {\n\t\ttoggle() {\n\t\t\tstate.show = ! state.show;\n\t\t},\n\t},\n} );\n```\n\n----------------------------------------\n\nTITLE: Importing and Using ColorIndicator Component in React\nDESCRIPTION: This snippet demonstrates how to import the ColorIndicator component from WordPress components and use it in a React functional component. It shows the basic usage with a specific color value.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/color-indicator/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ColorIndicator } from '@wordpress/components';\n\nconst MyColorIndicator = () => <ColorIndicator colorValue=\"#0073aa\" />;\n```\n\n----------------------------------------\n\nTITLE: Creating Block with External Template\nDESCRIPTION: Command to scaffold a block using an external npm package or local directory as a project template\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/create-block/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ npx @wordpress/create-block@latest --template my-template-package\n```\n\n----------------------------------------\n\nTITLE: Registering Fruit Autocompleter WordPress Plugin\nDESCRIPTION: PHP plugin code that registers and enqueues the custom fruit autocompleter JavaScript script. Demonstrates proper WordPress plugin structure with script dependencies.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/autocomplete/README.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * Plugin Name: Fruit Autocompleter\n * Plugin URI: https://github.com/WordPress/gutenberg\n * Author: Gutenberg Team\n */\n\n/**\n * Registers a custom script for the plugin.\n */\nfunction enqueue_fruit_autocompleter_plugin_script() {\n\twp_enqueue_script(\n\t\t'fruit-autocompleter',\n\t\tplugins_url( '/index.js', __FILE__ ),\n\t\tarray(\n\t\t\t'wp-hooks',\n\t\t),\n\t);\n}\n\nadd_action( 'init', 'enqueue_fruit_autocompleter_plugin_script' );\n```\n\n----------------------------------------\n\nTITLE: Implementing Warning Component with Actions in React\nDESCRIPTION: Example showing how to use the Warning component with primary and secondary actions. The component accepts children content, primary action buttons, and secondary actions displayed in a dropdown menu.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/src/components/warning/README.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<Warning\n\tactions={ [ <Button onClick={ fixIssue }>{ __( 'Fix issue' ) }</Button> ] }\n\tsecondaryActions={ [\n\t\t{\n\t\t\ttitle: __( 'Get help' ),\n\t\t\tonClick: getHelp,\n\t\t},\n\t\t{\n\t\t\ttitle: __( 'Remove block' ),\n\t\t\tonClick: removeBlock,\n\t\t},\n\t] }\n>\n\t{ __( 'This block ran into an issue.' ) }\n</Warning>\n```\n\n----------------------------------------\n\nTITLE: Add new createSelector function\nDESCRIPTION: This entry describes the addition of the createSelector function for creating memoized store selectors in the 9.26.0 release.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/data/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n-   Add new `createSelector` function for creating memoized store selectors ([#60370](https://github.com/WordPress/gutenberg/pull/60370)).\n```\n\n----------------------------------------\n\nTITLE: Update type definitions for dispatched actions\nDESCRIPTION: This entry captures the updates made to type definitions for dispatched actions to account for Promisified return values and thunks, mentioned in the 9.9.0 release.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/data/CHANGELOG.md#2025-04-21_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n-   Update the type definitions for dispatched actions by accounting for Promisified return values and thunks.\n```\n\n----------------------------------------\n\nTITLE: Accessing Global Variables in JavaScript\nDESCRIPTION: Replaces process.env variables with globalThis to access global variables in JavaScript.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/scripts/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nglobalThis.IS_GUTENBERG_PLUGIN\n```\n\n----------------------------------------\n\nTITLE: Filtering allowed block types\nDESCRIPTION: This PHP snippet filters the list of blocks shown in the inserter using the `allowed_block_types_all` filter. It allows only `core/paragraph` and `core/heading` blocks when a post is being edited, otherwise it returns the original allowed block types.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/filters/block-filters.md#2025-04-21_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// my-plugin.php\nfunction example_filter_allowed_block_types_when_post_provided( $allowed_block_types, $editor_context ) {\n\tif ( ! empty( $editor_context->post ) ) {\n\t\treturn array( 'core/paragraph', 'core/heading' );\n\t}\n\treturn $allowed_block_types;\n}\nadd_filter( 'allowed_block_types_all', 'example_filter_allowed_block_types_when_post_provided', 10, 2 );\n\n```\n\n----------------------------------------\n\nTITLE: Declaring Anchor Support in Block Configuration\nDESCRIPTION: Example of enabling anchor support in a block's configuration to allow direct linking to specific blocks.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-supports.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nsupports: {\n\tanchor: true\n}\n```\n\n----------------------------------------\n\nTITLE: Adding downloadBlob function in JavaScript\nDESCRIPTION: New feature added in version 3.46.0 which introduces the downloadBlob function and removes the downloadjs dependency.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/blob/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n-   Add `downloadBlob` function and remove `downloadjs` dependency ([#56024](https://github.com/WordPress/gutenberg/pull/56024)).\n```\n\n----------------------------------------\n\nTITLE: Running PHP Unit Tests for Style Engine\nDESCRIPTION: Command to execute PHP unit tests for the style-engine package in the Gutenberg project. This runs tests with the 'style-engine' group tag.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/style-engine/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpm run test:unit:php -- --group style-engine\n```\n\n----------------------------------------\n\nTITLE: Core Edit-Site Store Actions Definition\nDESCRIPTION: A collection of action creators for modifying edit-site store state, including template management, navigation controls, sidebar toggles and feature flags.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core-edit-site.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\naddTemplate( template )\ncloseGeneralSidebar()\nopenGeneralSidebar( name )\nremoveTemplate( template )\nrevertTemplate( template, options )\nsetEditedEntity( postType, postId, context )\nsetEditedPostContext( context )\nsetHasPageContentFocus( hasPageContentFocus )\nsetIsInserterOpened( value )\nsetIsListViewOpened( isOpen )\nsetIsSaveViewOpened( isOpen )\nsetNavigationMenu( navigationMenuId )\nsetPage()\nsetTemplate()\nsetTemplatePart( templatePartId )\nswitchEditorMode( mode )\ntoggleDistractionFree()\ntoggleFeature( featureName )\nupdateSettings( settings )\n```\n\n----------------------------------------\n\nTITLE: Defining Preformatted Text - Gutenberg (Markdown)\nDESCRIPTION: This snippet defines a block designed for styled preformatted text that preserves spacing and tabs.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/core-blocks.md#2025-04-21_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n- **Name:** core/preformatted\n- **Category:** text\n- **Supports:** anchor, color (background, gradients, text), interactivity (clientNavigation), spacing (margin, padding), typography (fontSize, lineHeight)\n- **Attributes:** content\n```\n\n----------------------------------------\n\nTITLE: Resulting CSS Output in Editor\nDESCRIPTION: Shows the final CSS output after styles are inlined in the editor body with the editor-styles-wrapper prefix.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/enqueueing-assets-in-the-editor.md#2025-04-21_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n<style>.editor-styles-wrapper p { color: green; }</style>\n```\n\n----------------------------------------\n\nTITLE: Implementing wp-each Directive for List Rendering\nDESCRIPTION: Examples of using wp-each directive to render lists from array data with different context configurations.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/api-reference.md#2025-04-21_snippet_26\n\nLANGUAGE: html\nCODE:\n```\n<ul data-wp-context='{ \"list\": [ \"hello\", \"hola\", \"olá\" ] }'>\n\t<template data-wp-each=\"context.list\">\n\t\t<li data-wp-text=\"context.item\"></li>\n\t</template>\n</ul>\n```\n\nLANGUAGE: html\nCODE:\n```\n<ul data-wp-context='{ \"list\": [ \"hello\", \"hola\", \"olá\" ] }'>\n\t<template data-wp-each--greeting=\"context.list\">\n\t\t<li data-wp-text=\"context.greeting\"></li>\n\t</template>\n</ul>\n```\n\nLANGUAGE: html\nCODE:\n```\n<ul\n\tdata-wp-context='{\n  \"list\": [\n    { \"id\": \"en\", \"value\": \"hello\" },\n    { \"id\": \"es\", \"value\": \"hola\" },\n    { \"id\": \"pt\", \"value\": \"olá\" }\n  ]\n}'\n>\n\t<template\n\t\tdata-wp-each--greeting=\"context.list\"\n\t\tdata-wp-each-key=\"context.greeting.id\"\n\t>\n\t\t<li data-wp-text=\"context.greeting.value\"></li>\n\t</template>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Configuring WordPress Query Block\nDESCRIPTION: Defines a WordPress Gutenberg query block with specific configuration for post display, including pagination, sorting, and template settings\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/test/e2e/specs/editor/various/__snapshots__/Inserting-blocks-firefox-webkit-inserts-p-59603-ragging-and-dropping-from-the-global-inserter-1-chromium.txt#2025-04-21_snippet_0\n\nLANGUAGE: wordpress-gutenberg\nCODE:\n```\n<!-- wp:query {\"queryId\":1,\"query\":{\"perPage\":3,\"pages\":0,\"offset\":0,\"postType\":\"post\",\"order\":\"desc\",\"orderBy\":\"date\",\"author\":\"\",\"search\":\"\",\"exclude\":[],\"sticky\":\"\",\"inherit\":false},\"metadata\":{\"categories\":[\"posts\"],\"patternName\":\"core\\/query-standard-posts\",\"name\":\"Standard\"}} -->\n```\n\n----------------------------------------\n\nTITLE: Correct usage of translation functions with string literals (i18n-no-variables)\nDESCRIPTION: This snippet demonstrates correct usage of translation functions where string literals are used as arguments. String concatenation within the argument is also allowed. This adheres to the i18n-no-variables rule and allows for proper static analysis.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/eslint-plugin/docs/rules/i18n-no-variables.md#2025-04-21_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n__( 'Hello World' );\n_x( 'Hello' + ' World', 'context', 'foo' );\n```\n\n----------------------------------------\n\nTITLE: Customizing Feature Selectors in WordPress Gutenberg Block (JSON)\nDESCRIPTION: This example shows how to customize selectors for specific features like color and typography. It allows applying styles to different elements within a block for each feature.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-selectors.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\t...\n\t\"selectors\": {\n\t\t\"root\": \".my-custom-block-selector\",\n\t\t\"color\": \".my-custom-block-selector\",\n\t\t\"typography\": \".my-custom-block-selector > h2\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Layout Options for Gutenberg Blocks (JavaScript)\nDESCRIPTION: This entry describes how to configure layout options for a block, including allowing switching of layout types and the display of layout controls in the sidebar.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-supports.md#2025-04-21_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\n// Example of setting layout options\n\nlayout: {\n\tallowSwitching: true,\n\tallowEditing: true\n}\n```\n\n----------------------------------------\n\nTITLE: Running Performance Tests with Custom Test Files\nDESCRIPTION: Command to run performance tests using test files from a specific branch. This is useful when modifying or extending performance test coverage.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/testing-overview.md#2025-04-21_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\n./bin/plugin/cli.js perf trunk v8.1.0 v8.0.0 --tests-branch add/perf-tests-coverage\n```\n\n----------------------------------------\n\nTITLE: Enqueuing Editor Styles in WordPress Theme\nDESCRIPTION: WordPress theme function to load custom stylesheets for the Gutenberg block editor using wp_enqueue_style and the enqueue_block_editor_assets hook.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/getting-started/faq.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction gutenbergtheme_editor_styles() {\n    wp_enqueue_style( 'gutenbergtheme-blocks-style', get_template_directory_uri() . '/blocks.css');\n}\nadd_action( 'enqueue_block_editor_assets', 'gutenbergtheme_editor_styles' );\n```\n\n----------------------------------------\n\nTITLE: WordPress Color Classes CSS Implementation\nDESCRIPTION: Example of CSS classes required for implementing custom color palette support across different contexts.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/themes/theme-support.md#2025-04-21_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n.has-strong-magenta-color {\n\tcolor: #a156b4;\n}\n\n.has-strong-magenta-background-color {\n\tbackground-color: #a156b4;\n}\n\n.has-strong-magenta-border-color {\n\tborder-color: #a156b4;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Reference Images for Tests\nDESCRIPTION: This command updates the reference images for Playwright tests by passing the `--update-snapshots` flag during the test execution. It's useful for maintaining updated visual benchmarks.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/test/storybook-playwright/README.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm run test:e2e:storybook -- --update-snapshots\n```\n\n----------------------------------------\n\nTITLE: Snapshot Failure Bail Out\nDESCRIPTION: This snippet describes a new feature in Gutenberg v2.4.0 which causes tests to bail out if a prior snapshot failed. It also fixes a bug where failing snapshots would not trigger screenshots, improving the debugging process.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/e2e-tests/CHANGELOG.md#2025-04-21_snippet_8\n\nLANGUAGE: None\nCODE:\n```\nBail out tests if a prior snapshot failed. Fixed a bug which failing snapshots won't trigger screenshots [#33448](https://github.com/WordPress/gutenberg/pull/33448).\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Documentation\nDESCRIPTION: Core changelog documentation with version history, breaking changes, and release dates. Contains breaking changes related to Node.js version requirements and React version updates.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/list-reusable-blocks/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- Learn how to maintain this file at https://github.com/WordPress/gutenberg/tree/HEAD/packages#maintaining-changelogs. -->\n\n## Unreleased\n\n## 5.22.0 (2025-04-11)\n\n## 5.21.0 (2025-03-27)\n\n[...additional version entries...]\n\n### Breaking Changes\n\n-   Increase the minimum required Node.js version to v18.12.0 matching long-term support releases ([#31270](https://github.com/WordPress/gutenberg/pull/61930)). Learn more about [Node.js releases](https://nodejs.org/en/about/previous-releases).\n\n[...additional version entries...]\n\n### Breaking Changes\n\n-   Updated dependencies to require React 18 ([45235](https://github.com/WordPress/gutenberg/pull/45235))\n\n[...additional version entries...]\n\n### New Features\n\n-   Initial public release.\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional wp-scripts Commands in package.json\nDESCRIPTION: Example of how to set up additional npm scripts in package.json for code formatting, linting, and testing using wp-scripts.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/getting-started/devenv/get-started-with-wp-scripts.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"scripts\": {\n        \"format\": \"wp-scripts format\",\n        \"lint:css\": \"wp-scripts lint-style\",\n        \"lint:js\": \"wp-scripts lint-js\",\n        \"test:e2e\": \"wp-scripts test-e2e\",\n        \"test:unit\": \"wp-scripts test-unit-js\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom getItemId Function\nDESCRIPTION: Illustrates a custom implementation of the getItemId function, which identifies each item uniquely in the dataset. It defaults to retrieving the item id if not overridden.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/dataviews/README.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n\tgetItemId={ ( item ) => item.name ?? item.id }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a Block Toolbar in Gutenberg\nDESCRIPTION: This snippet demonstrates how to import and render the `BlockToolbar` component from the `@wordpress/block-editor` package. The component must be used within a `BlockEditorProvider` to function correctly.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/src/components/block-toolbar/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { BlockToolbar } from '@wordpress/block-editor';\n\nconst MyBlockToolbar = () => <BlockToolbar />;\n```\n\n----------------------------------------\n\nTITLE: Registering Block Type with Attributes in Gutenberg\nDESCRIPTION: Shows how to set up the edit and save functions that receive attributes and how to register a block type with the defined attributes. The edit function also receives setAttributes to update values.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/platform-docs/docs/create-block/attributes.md#2025-04-21_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nfunction Edit( { attributes, setAttributes } ) {\n\t// ...\n}\n\nfunction Save( { attributes } ) {\n\t// ...\n}\n\nregisterBlockType( 'create-block/gutenpride', {\n    // ...\n    attributes,\n    edit: Edit,\n    save: Save,\n} );\n```\n\n----------------------------------------\n\nTITLE: Complete Block Registration in JavaScript with Edit and Save\nDESCRIPTION: Full example of client-side block registration including edit and save components with block props.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/getting-started/fundamentals/registration-of-a-block.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { registerBlockType } from '@wordpress/blocks';\nimport { useBlockProps } from '@wordpress/block-editor';\nimport metadata from './block.json';\n\nconst Edit = () => <p { ...useBlockProps() }>Hello World - Block Editor</p>;\nconst save = () => <p { ...useBlockProps.save() }>Hello World - Frontend</p>;\n\nregisterBlockType( metadata.name, {\n\tedit: Edit,\n\tsave,\n} );\n```\n\n----------------------------------------\n\nTITLE: Folder Structure for Components\nDESCRIPTION: This Markdown representation describes the recommended folder structure for organizing components in the Gutenberg project. It supports development and testing of components, emphasizing separation of component logic, context, and styles. Each component and its related files such as stories and tests should follow this structure for optimal organization and maintainability.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/CONTRIBUTING.md#2025-04-21_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n## Folder structure\n\nAs a result of the above guidelines, all new components (except for shared utilities) should _generally_ follow this folder structure:\n\n```text\ncomponent-name/\n├── stories\n│   └── index.js\n├── test\n│   └── index.js\n├── component.tsx\n├── context.ts\n├── hook.ts\n├── index.ts\n├── README.md\n├── styles.ts\n└── types.ts\n```\n\nIn case of a family of components (e.g. `Card` and `CardBody`, `CardFooter`, `CardHeader` ...), each component's implementation should live in a separate subfolder, while code common to the whole family of components (e.g types, utils, context...) should live in the family of components root folder:\n\n```text\ncomponent-family-name/\n├── sub-component-name/\n│   ├── index.ts\n│   ├── component.tsx\n│   ├── hook.ts\n│   ├── README.md\n│   └── styles.ts\n├── sub-component-name/\n│   ├── index.ts\n│   ├── component.tsx\n│   ├── hook.ts\n│   ├── README.md\n│   └── styles.ts\n├── stories\n│   └── index.js\n├── test\n│   └── index.js\n├── context.ts\n├── index.ts\n├── types.ts\n└── utils.ts\n```\n```\n\n----------------------------------------\n\nTITLE: Plugin Build Transformation in JavaScript\nDESCRIPTION: Shows how the feature flag condition is transformed during the plugin build process, replacing the flag with a boolean true value.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/feature-flags.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nif ( true ) {\n\t// Webpack has replaced `globalThis.IS_GUTENBERG_PLUGIN` with `true`\n\tpluginOnlyFeature();\n}\n```\n\n----------------------------------------\n\nTITLE: Lock Storage with Shared Lock Example\nDESCRIPTION: Demonstrates how locks are stored in the tree structure, showing a shared lock implementation with multiple possible scenarios\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/core-data/src/locks/README.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n{\n\t\"locks\": [ { \"exclusive\": false, /* data */ } ],\n\t\"children\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Cached Entity Edits in WordPress\nDESCRIPTION: Edits a post title with the isCached option set to true. Cached edits are not immediately added to the undo/redo stack, useful for frequent changes like typing.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/explanations/architecture/entities.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nwp.data.dispatch( 'core' ).editEntityRecord( 'postType', 'post', 1, { title: 'Hello World' }, { isCached: true } );\n```\n\n----------------------------------------\n\nTITLE: Registering Block Style with External Stylesheet in PHP\nDESCRIPTION: Example of registering a block style that uses an external stylesheet for styling.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-styles.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nwp_register_style( 'myguten-style', get_template_directory_uri() . '/custom-style.css' );\n\n// ...\n\nregister_block_style(\n    'core/quote',\n    array(\n        'name'         => 'fancy-quote',\n        'label'        => __( 'Fancy Quote', 'textdomain' ),\n        'style_handle' => 'myguten-style',\n    )\n);\n```\n\n----------------------------------------\n\nTITLE: Text Alignment in Text Component\nDESCRIPTION: Demonstrates how to center-align text using the align prop in combination with isBlock to create a block-level text element with centered content.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/text/README.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { __experimentalText as Text } from '@wordpress/components';\n\nfunction Example() {\n\treturn (\n\t\t<Text align=\"center\" isBlock>\n\t\t\tLorem ipsum dolor sit amet, consectetur adipiscing elit...\n\t\t</Text>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Plugin-Only Feature in JavaScript\nDESCRIPTION: Demonstrates how to export a function that should only be available in the Gutenberg plugin environment using the globalThis.IS_GUTENBERG_PLUGIN flag.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/feature-flags.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction myPluginOnlyFeature() {\n\t// implementation\n}\n\nexport const pluginOnlyFeature = globalThis.IS_GUTENBERG_PLUGIN\n\t? myPluginOnlyFeature\n\t: undefined;\n```\n\n----------------------------------------\n\nTITLE: Installing wp-env Globally with npm\nDESCRIPTION: Command to install the @wordpress/env package globally using npm, allowing the wp-env tool to be run from any directory.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/getting-started/devenv/get-started-with-wp-env.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm -g install @wordpress/env\n```\n\n----------------------------------------\n\nTITLE: Configuring Browserslist in package.json\nDESCRIPTION: JSON configuration to extend WordPress Browserslist config in package.json file.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/browserslist-config/README.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"browserslist\": [\n\t\"extends @wordpress/browserslist-config\"\n]\n```\n\n----------------------------------------\n\nTITLE: Cleaning WordPress Databases\nDESCRIPTION: Command reference for wp-env clean command to clean WordPress databases in development or test environments.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/env/README.md#2025-04-21_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\nwp-env clean [environment]\n\nCleans the WordPress databases.\n\nPositionals:\n  environment  Which environments' databases to clean.\n            [string] [choices: \"all\", \"development\", \"tests\"] [default: \"tests\"]\n\nOptions:\n  --debug    Enable debug output.                     [boolean] [default: false]\n  --scripts  Execute any configured lifecycle scripts. [boolean] [default: true]\n```\n\n----------------------------------------\n\nTITLE: Typing Asynchronous Actions with Generators\nDESCRIPTION: Demonstrates how to type asynchronous actions using generator functions and handle their return types.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/core-concepts/using-typescript.md#2025-04-21_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nconst { state } = store( 'myCounterPlugin', {\n\tstate: {\n\t\tcounter: 0,\n\t\tget double(): number {\n\t\t\treturn state.counter * 2;\n\t\t},\n\t},\n\tactions: {\n\t\tincrement() {\n\t\t\tstate.counter += 1;\n\t\t},\n\t\t*delayedIncrement() {\n\t\t\tyield new Promise( ( r ) => setTimeout( r, 1000 ) );\n\t\t\tstate.counter += 1;\n\t\t},\n\t},\n} );\n```\n\n----------------------------------------\n\nTITLE: WordPress-Gutenberg Version Mapping Table\nDESCRIPTION: Markdown table showing the correlation between WordPress versions and their included Gutenberg versions. The table lists version numbers in descending order, from WordPress 6.8 down to 5.0.8.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/versions-in-wordpress.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Gutenberg Versions | WordPress Version |\n| ------------------ | ----------------- |\n| 19.4-20.4          | 6.8               |\n| 18.6-19.3          | 6.7.2             |\n```\n\n----------------------------------------\n\nTITLE: Implementing PlainText Component in WordPress Gutenberg Block\nDESCRIPTION: Example showing how to implement the PlainText component within a WordPress Gutenberg block registration. The component is used to create an auto-growing textarea that updates block attributes when content changes.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/src/components/plain-text/README.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { registerBlockType } from '@wordpress/blocks';\nimport { PlainText } from '@wordpress/block-editor';\n\nregisterBlockType( /* ... */, {\n\t// ...\n\n\tattributes: {\n\t\tcontent: {\n\t\t\ttype: 'string',\n\t\t},\n\t},\n\n\tedit( { className, attributes, setAttributes } ) {\n\t\treturn (\n\t\t\t<PlainText\n\t\t\t\tclassName={ className }\n\t\t\t\tvalue={ attributes.content }\n\t\t\t\tonChange={ ( content ) => setAttributes( { content } ) }\n\t\t\t/>\n\t\t);\n\t},\n} );\n```\n\n----------------------------------------\n\nTITLE: Cleanup After Block Registration Tests\nDESCRIPTION: This code demonstrates how to clean up after tests that involve block registration by unregistering all blocks in the afterAll callback.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/react-native/integration-test-guide.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nafterAll( () => {\n\t// Clean up registered blocks\n\tgetBlockTypes().forEach( ( block ) => {\n\t\tunregisterBlockType( block.name );\n\t} );\n} );\n```\n\n----------------------------------------\n\nTITLE: Removing Dependencies from WordPress Packages\nDESCRIPTION: Command for removing a dependency from a specific WordPress package using npm workspaces.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/README.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm uninstall change-case -w packages/a11y\n```\n\n----------------------------------------\n\nTITLE: Getting Raw Entity Record - JavaScript\nDESCRIPTION: This function fetches the raw entity record object by its key, mapping its attributes to their raw values. It requires state, kind, name, and key parameters, returning the record or undefined if not found.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// getRawEntityRecord\n\nfunction getRawEntityRecord( state, kind, name, key ) {\n    // Implementation here\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Global State with wp_interactivity_state in PHP\nDESCRIPTION: Sets up the initial global state values in PHP using the wp_interactivity_state function. This defines the isDarkTheme, show, and helloText values that will be available to all interactive blocks using the 'myPlugin' namespace.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/core-concepts/undestanding-global-state-local-context-and-derived-state.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// Populates the initial global state values.\nwp_interactivity_state( 'myPlugin', array(\n  'isDarkTheme' => true,\n  'show'        => false,\n  'helloText'   => __( 'world' ),\n));\n```\n\n----------------------------------------\n\nTITLE: Registering Inserter Media Category in WordPress Block Editor\nDESCRIPTION: Example of how to register a custom media category in the Gutenberg inserter's media tab. This implementation shows how to add Openverse as a media source, including mapping API responses to the required InserterMediaItem interface and handling search functionality.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core-block-editor.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nwp.data.dispatch( 'core/block-editor' ).registerInserterMediaCategory( {\n\tname: 'openverse',\n\tlabels: {\n\t\tname: 'Openverse',\n\t\tsearch_items: 'Search Openverse',\n\t},\n\tmediaType: 'image',\n\tasync fetch( query = {} ) {\n\t\tconst defaultArgs = {\n\t\t\tmature: false,\n\t\t\texcluded_source: 'flickr,inaturalist,wikimedia',\n\t\t\tlicense: 'pdm,cc0',\n\t\t};\n\t\tconst finalQuery = { ...query, ...defaultArgs };\n\t\t// Sometimes you might need to map the supported request params according to `InserterMediaRequest`.\n\t\t// interface. In this example the `search` query param is named `q`.\n\t\tconst mapFromInserterMediaRequest = {\n\t\t\tper_page: 'page_size',\n\t\t\tsearch: 'q',\n\t\t};\n\t\tconst url = new URL( 'https://api.openverse.org/v1/images/' );\n\t\tObject.entries( finalQuery ).forEach( ( [ key, value ] ) => {\n\t\t\tconst queryKey = mapFromInserterMediaRequest[ key ] || key;\n\t\t\turl.searchParams.set( queryKey, value );\n\t\t} );\n\t\tconst response = await window.fetch( url, {\n\t\t\theaders: {\n\t\t\t\t'User-Agent': 'WordPress/inserter-media-fetch',\n\t\t\t},\n\t\t} );\n\t\tconst jsonResponse = await response.json();\n\t\tconst results = jsonResponse.results;\n\t\treturn results.map( ( result ) => ( {\n\t\t\t...result,\n\t\t\t// If your response result includes an `id` prop that you want to access later, it should\n\t\t\t// be mapped to `InserterMediaItem`'s `sourceId` prop. This can be useful if you provide\n\t\t\t// a report URL getter.\n\t\t\t// Additionally you should always clear the `id` value of your response results because\n\t\t\t// it is used to identify WordPress media items.\n\t\t\tsourceId: result.id,\n\t\t\tid: undefined,\n\t\t\tcaption: result.caption,\n\t\t\tpreviewUrl: result.thumbnail,\n\t\t} ) );\n\t},\n\tgetReportUrl: ( { sourceId } ) =>\n\t\t`https://wordpress.org/openverse/image/${ sourceId }/report/`,\n\tisExternalResource: true,\n} );\n```\n\n----------------------------------------\n\nTITLE: Updating Branch with Rebase\nDESCRIPTION: Commands to update your branch with the latest changes from the trunk branch.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/git-workflow.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ngit fetch\ngit rebase trunk\ngit push --force-with-lease origin your-branch-name\n```\n\n----------------------------------------\n\nTITLE: Rendering InserterButton Component in React\nDESCRIPTION: This code snippet demonstrates how to render the InserterButton component within a React functional component. The button displays a title and an icon, and it defines an onSelect function that logs a message when the button is selected. It requires props for item information and optional button width attributes.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/src/components/inserter-button/README.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction render() {\n\treturn (\n\t\t<View>\n\t\t\t<Text>Some rendered content here</Text>\n\t\t\t<InserterButton\n\t\t\titem={ { title: 'Short Text', icon: <SVG></SVG> } }\n\t\t\tonSelect={ function ( item ) {\n\t\t\t\tconsole.log( 'selected' );\n\t\t\t} }\n\t\t\t/>\n\t\t</View>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing WordPress Data Module\nDESCRIPTION: This command installs the `@wordpress/data` package as a dependency using npm. The `--save` flag adds the package to the `package.json` file.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/data/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"npm install @wordpress/data --save\"\n```\n\n----------------------------------------\n\nTITLE: Rendering Cover Block Component for Testing\nDESCRIPTION: This code shows how to render the Cover block component for testing, including setting up mock attributes and functions.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/react-native/integration-test-guide.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// This import points to the index file of the block\nimport { metadata, settings, name } from '../index';\n\n...\n\nconst setAttributes = jest.fn();\nconst attributes = {\n\tbackgroundType: IMAGE_BACKGROUND_TYPE,\n\tfocalPoint: { x: '0.25', y: '0.75' },\n\thasParallax: false,\n\toverlayColor: { color: '#000000' },\n\turl: 'mock-url',\n};\n\n...\n\n// Simplified tree to render Cover edit within slot\nconst CoverEdit = ( props ) => (\n\t<SlotFillProvider>\n\t\t<BlockEdit isSelected name={ name } clientId={ 0 } { ...props } />\n\t\t<BottomSheetSettings isVisible />\n\t</SlotFillProvider>\n);\n\nconst { getByText, findByText } = render(\n\t<CoverEdit\n\t\tattributes={ {\n\t\t\t...attributes,\n\t\t\turl: undefined,\n\t\t\tbackgroundType: undefined,\n\t\t} }\n\t\tsetAttributes={ setAttributes }\n\t/>\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Custom SVG Icon for Block Category using JavaScript\nDESCRIPTION: Client-side implementation to update a block category with a custom SVG icon using wp.blocks.updateCategory. Creates an SVG circle element using React and assigns it to a specific category.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/filters/block-filters.md#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\n( function () {\n\tvar el = React.createElement;\n\tvar SVG = wp.primitives.SVG;\n\tvar circle = el( 'circle', {\n\t\tcx: 10,\n\t\tcy: 10,\n\t\tr: 10,\n\t\tfill: 'red',\n\t\tstroke: 'blue',\n\t\tstrokeWidth: '10',\n\t} );\n\tvar svgIcon = el(\n\t\tSVG,\n\t\t{ width: 20, height: 20, viewBox: '0 0 20 20' },\n\t\tcircle\n\t);\n\twp.blocks.updateCategory( 'my-category', { icon: svgIcon } );\n} )();\n```\n\n----------------------------------------\n\nTITLE: Installing @wordpress/redux-routine with npm\nDESCRIPTION: Command to install the @wordpress/redux-routine package using npm.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/redux-routine/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @wordpress/redux-routine\n```\n\n----------------------------------------\n\nTITLE: Starting Local Development Server for Docusaurus Website\nDESCRIPTION: Command to start a local development server that opens a browser window and supports live reloading for most changes.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/platform-docs/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run start\n```\n\n----------------------------------------\n\nTITLE: Importing and Using withNetworkConnectivity HOC in React Component\nDESCRIPTION: Demonstrates how to import and apply the withNetworkConnectivity higher-order component to a React component to check network connectivity status\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/compose/src/higher-order/with-network-connectivity/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { withNetworkConnectivity } from '@wordpress/compose';\n\nexport class MyComponent extends Component {\n\tif ( this.props.isConnected !== true ) {\n\t\tconsole.log( 'You are currently offline.' )\n\t}\n}\n\nexport default withNetworkConnectivity( MyComponent )\n```\n\n----------------------------------------\n\nTITLE: Querying Format Types in WordPress Console\nDESCRIPTION: Console command to verify registered format types in the core/rich-text store.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/format-api.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nwp.data.select( 'core/rich-text' ).getFormatTypes();\n```\n\n----------------------------------------\n\nTITLE: Correct WordPress Environment Variable Access using globalThis\nDESCRIPTION: Shows the recommended way to access WordPress environment variables using globalThis, which is safer for package consumers.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/eslint-plugin/docs/rules/no-wp-process-env.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nglobalThis.SCRIPT_DEBUG;\n```\n\n----------------------------------------\n\nTITLE: Using Xdebug with wp-env - Shell\nDESCRIPTION: This command starts wp-env with Xdebug enabled for debugging PHP applications.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/env/README.md#2025-04-21_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\n$ wp-env start --xdebug\n```\n\n----------------------------------------\n\nTITLE: Correct Translation Function Usage in JavaScript\nDESCRIPTION: Examples of correct code that comply with the i18n-translator-comments rule by including proper translator comments for placeholders.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/eslint-plugin/docs/rules/i18n-translator-comments.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar color = '';\n// translators: %s: Color\nsprintf( __( 'Color: %s' ), color );\n\nvar address = '';\nsprintf(\n\t// translators: %s: Address.\n\t__( 'Address: %s' ),\n\taddress\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Persistence Layer in WordPress\nDESCRIPTION: This snippet illustrates how to configure the WordPress core data module to use the created persistence layer, ensuring that user preferences are correctly saved and retrieved.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/preferences-persistence/README.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nwp.data( 'core/preferences' ).setPersistenceLayer( persistenceLayer );\n```\n\n----------------------------------------\n\nTITLE: Defining Block Attributes Structure in Gutenberg\nDESCRIPTION: Code that defines the attributes structure for a Gutenberg block, specifically creating a 'message' attribute of type string. The attribute will be sourced from a div element's text content with an empty default value.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/platform-docs/docs/create-block/attributes.md#2025-04-21_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconst attributes = {\n\tmessage: {\n\t\ttype: 'string',\n\t\tsource: 'text',\n\t\tselector: 'div',\n\t\t'default': ''\n\t}\n};\n```\n\n----------------------------------------\n\nTITLE: New useObservableValue Hook\nDESCRIPTION: The addition of the `observableMap` data structure and the `useObservableValue` React hook provides developers with new capabilities for managing and observing state changes more effectively in their applications.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/compose/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n-   Added new `observableMap` data structure and `useObservableValue` React hook ([#60945](https://github.com/WordPress/gutenberg/pull/60945)).\n```\n\n----------------------------------------\n\nTITLE: Installing WordPress Interactivity Package via NPM\nDESCRIPTION: Command to install the @wordpress/interactivity package using npm package manager. This installation is only necessary when using the Interactivity API outside of WordPress, as it's already bundled in WordPress Core v6.5+.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/interactivity/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @wordpress/interactivity --save\n```\n\n----------------------------------------\n\nTITLE: Mapping .htaccess File for Advanced PHP Settings in WordPress\nDESCRIPTION: This configuration example shows how to map an .htaccess file to the WordPress root directory for advanced PHP settings using wp-env. It demonstrates the mapping configuration for the .htaccess file.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/env/README.md#2025-04-21_snippet_28\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"mappings\": {\n\t\t\".htaccess\": \".htaccess\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Interactive Program Notice for GNU GPL\nDESCRIPTION: A notice template for interactive programs licensed under GNU GPL, to be displayed when the program starts in interactive mode. It provides basic copyright information and directs users to commands for viewing warranty and redistribution information.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/LICENSE.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nGnomovision version 69, Copyright (C) year name of author\nGnomovision comes with ABSOLUTELY NO WARRANTY; for details\ntype `show w'.  This is free software, and you are welcome\nto redistribute it under certain conditions; type `show c'\nfor details.\n```\n\n----------------------------------------\n\nTITLE: Webpack Configuration Improvements - JavaScript\nDESCRIPTION: This part of the documentation outlines enhancements to the default Webpack configuration, including the use of `thread-loader` for parallelizing Babel processing and enabling the `cacheDirectory` option for performance optimization.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/scripts/CHANGELOG.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = { loader: 'babel-loader', options: { cacheDirectory: true } };\n```\n\n----------------------------------------\n\nTITLE: Specifying PHP Version for WordPress Environment\nDESCRIPTION: This snippet shows how to specify a particular PHP version for a WordPress environment using wp-env. It demonstrates setting the PHP version to 7.2 in the configuration.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/env/README.md#2025-04-21_snippet_25\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"phpVersion\": \"7.2\",\n\t\"plugins\": [ \".\" ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using Radius Tokens with JavaScript CONFIG Object\nDESCRIPTION: Example of implementing radius tokens in JavaScript using the CONFIG object from @wordpress/components package. This demonstrates how to access radius tokens from extra small to round as JavaScript variables.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/storybook/stories/tokens/radius.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Note: the `CONFIG` object is only available within the `@wordpress/components` package.\nimport { CONFIG } from '../utils';\n\n// Later in the code:\nborder-radius: ${ CONFIG.radiusXSmall };\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Layouts in DataViews\nDESCRIPTION: Example showing how to configure view types with specific layout settings for table and grid views.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/dataviews/README.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst defaultLayouts = {\n\ttable: {\n\t\tshowMedia: false,\n\t},\n\tgrid: {\n\t\tshowMedia: true,\n\t},\n};\n```\n\n----------------------------------------\n\nTITLE: Checking for oEmbed Preview Fallback - JavaScript\nDESCRIPTION: This function determines if the returned preview for a URL is an oEmbed link fallback, based on state and the URL provided. It returns a boolean to indicate if the fallback is applicable.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core.md#2025-04-21_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\n// isPreviewEmbedFallback\n\nfunction isPreviewEmbedFallback( state, url ) {\n    // Implementation here\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of getRangeAt Method with Range Check\nDESCRIPTION: Demonstrates safe usage of getRangeAt by first checking rangeCount to ensure ranges exist before accessing them.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/eslint-plugin/docs/rules/no-unguarded-get-range-at.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst selection = window.getSelection();\nconst range = selection.rangeCount ? selection.getRangeAt( 0 ) : null;\n```\n\n----------------------------------------\n\nTITLE: Checking Autosave Completeness - JavaScript\nDESCRIPTION: This function determines if the REST request for autosaves has completed successfully, using the state, post type, and post ID as parameters. It returns a boolean result.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core.md#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\n// hasFetchedAutosaves\n\nfunction hasFetchedAutosaves( state, postType, postId ) {\n    // Implementation here\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Redux Middleware with @wordpress/redux-routine in JavaScript\nDESCRIPTION: Example of creating and using Redux middleware with @wordpress/redux-routine. It demonstrates setting up a store, defining a control handler for network requests, and creating a generator function for retrieving temperature data.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/redux-routine/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { combineReducers, createStore, applyMiddleware } from 'redux';\nimport createMiddleware from '@wordpress/redux-routine';\n\nconst middleware = createMiddleware( {\n\tasync FETCH_JSON( action ) {\n\t\tconst response = await window.fetch( action.url );\n\t\treturn response.json();\n\t},\n} );\n\nfunction temperature( state = null, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'SET_TEMPERATURE':\n\t\t\treturn action.temperature;\n\t}\n\n\treturn state;\n}\n\nconst reducer = combineReducers( { temperature } );\n\nconst store = createStore( reducer, applyMiddleware( middleware ) );\n\nfunction* retrieveTemperature() {\n\tconst result = yield { type: 'FETCH_JSON', url: 'https://' };\n\treturn { type: 'SET_TEMPERATURE', temperature: result.value };\n}\n\nstore.dispatch( retrieveTemperature() );\n```\n\n----------------------------------------\n\nTITLE: Importing WordPress Format Library for Rich Text Editing\nDESCRIPTION: This code imports the WordPress Format Library and its associated styles to register all available text formats such as bold, italic, superscript, subscript, strikethrough, links, and more. These formats become available for use in RichText components.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/platform-docs/docs/basic-concepts/rich-text.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport '@wordpress/format-library';\nimport '@wordpress/format-library/build-style/style.css';\n```\n\n----------------------------------------\n\nTITLE: Basic i18n Usage Example\nDESCRIPTION: Demonstrates basic usage of the i18n utilities, specifically sprintf and plural translation functions.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/i18n/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { sprintf, _n } from '@wordpress/i18n';\n\nsprintf( _n( '%d hat', '%d hats', 4, 'text-domain' ), 4 );\n// 4 hats\n```\n\n----------------------------------------\n\nTITLE: Paragraph Block Example\nDESCRIPTION: This snippet demonstrates a simple paragraph block in Gutenberg. It uses HTML comments to denote the start and end of the block and a paragraph element for the content.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/test/e2e/specs/editor/various/__snapshots__/Copy-cut-paste-should-copy-paste-partial-selection-with-other-blocks-in-between-1-chromium.txt#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- wp:paragraph -->\n<p>A block</p>\n<!-- /wp:paragraph -->\n```\n\n----------------------------------------\n\nTITLE: MediaPlaceholder Component Updates\nDESCRIPTION: Several properties were added to the `MediaPlaceholder` component, including `addToGallery`, `isAppender`, `dropZoneUIOnly`, `onCancel` link, `mediaPreview` usage, and `onDoubleClick` event handler. These additions enhance the flexibility and usability of the MediaPlaceholder component.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/CHANGELOG.md#2025-04-21_snippet_17\n\n\n\n----------------------------------------\n\nTITLE: CSS Output for WordPress Preset Values in Global Stylesheet\nDESCRIPTION: Sample CSS generated for WordPress preset values in the global stylesheet. Shows how preset values generate both CSS custom properties and corresponding utility classes.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/themes/global-settings-and-styles.md#2025-04-21_snippet_28\n\nLANGUAGE: css\nCODE:\n```\n/* CSS Custom Properties for the preset values */\nbody {\n  --wp--preset--<PRESET_TYPE>--<PRESET_SLUG>: <DEFAULT_VALUE>;\n  --wp--preset--color--pale-pink: #f78da7;\n  --wp--preset--font-size--large: 36px;\n  /* etc. */\n}\n\n/* CSS classes for the preset values */\n.has-<PRESET_SLUG>-<PRESET_TYPE> { ... }\n.has-pale-pink-color { color: var(--wp--preset--color--pale-pink) !important; }\n.has-large-font-size { font-size: var(--wp--preset--font-size--large) !important; }\n```\n\n----------------------------------------\n\nTITLE: Overriding Core Gradient Values in WordPress 5.9+ Themes\nDESCRIPTION: This CSS snippet demonstrates how to override core gradient values in WordPress 5.9 and later versions using CSS Custom Properties. It's applicable for themes without a theme.json file.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/themes/theme-support.md#2025-04-21_snippet_9\n\nLANGUAGE: css\nCODE:\n```\n:root {\n\t--wp--preset--gradient--vivid-cyan-blue-to-vivid-purple: <new_value>;\n\t--wp--preset--gradient--light-green-cyan-to-vivid-green-cyan: <new_value>;\n}\n```\n\n----------------------------------------\n\nTITLE: Final Execution Output Example\nDESCRIPTION: Shows the final output of the script after successful cherry-picking, including pushing changes and adding comments to PRs.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/auto-cherry-picking.md#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nPushing to origin/wp/6.2\nCommenting and removing labels...\n  41198: I just cherry-picked this PR to the wp/6.2 branch to get it included in the next release: afe9b757b4\nDone!\n```\n\n----------------------------------------\n\nTITLE: Linting Markdown Documents with wp-scripts\nDESCRIPTION: This snippet shows how to configure the `lint-md-docs` script in `package.json` to lint Markdown files using `wp-scripts` and markdownlint. It includes an example for linting all markdown files in the project, executed via `npm run lint:md:docs`.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/scripts/README.md#2025-04-21_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"scripts\": {\n\t\t\"lint:md:docs\": \"wp-scripts lint-md-docs\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Template Variables with a Transformer Function in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates a 'transformer' function enhancing the customization of template variables. The function modifies the 'slug' by appending a random hex code, allowing for unique identification. Such transformers can alter default values or introduce new ones for use in template files.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/create-block/docs/external-template.md#2025-04-21_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\ntransformer: ( view ) => {\n    const hex = getRandomHexCode();\n      return {\n         ...view,\n         slug: `${ view.slug }-${ hex }`,\n      };\n},\n```\n\n----------------------------------------\n\nTITLE: Updating Snapshot Tests in React\nDESCRIPTION: Commands for updating snapshot tests in both unit and e2e testing environments.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/testing-overview.md#2025-04-21_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\n# --testPathPattern is optional but will be much faster by only running matching tests\nnpm run test:unit -- --updateSnapshot --testPathPattern path/to/tests\n\n# Update snapshot for e2e tests\nnpm run test:e2e -- --update-snapshots path/to/spec\n```\n\n----------------------------------------\n\nTITLE: Setting Prettier Config in package.json\nDESCRIPTION: This JSON snippet shows how to set Prettier config by adding an entry to the package.json file.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/prettier-config/README.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"prettier\": \"@wordpress/prettier-config\"\n```\n\n----------------------------------------\n\nTITLE: Checking Running wp-env Instances - Shell\nDESCRIPTION: This command checks which Docker containers are currently running, useful for troubleshooting wp-env.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/env/README.md#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n$ docker ps\n```\n\n----------------------------------------\n\nTITLE: Using useConstrainedTabbing Hook in JavaScript\nDESCRIPTION: Demonstrates the use of 'useConstrainedTabbing', a React hook, to ensure tabbing is constrained within a dialog component by assigning a ref to an element.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/compose/README.md#2025-04-21_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useConstrainedTabbing } from '@wordpress/compose';\n\nconst ConstrainedTabbingExample = () => {\n\tconst constrainedTabbingRef = useConstrainedTabbing();\n\treturn (\n\t\t<div ref={ constrainedTabbingRef }>\n\t\t\t<Button />\n\t\t\t<Button />\n\t\t</div>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Callout Notice in HTML\nDESCRIPTION: Shows how to create styled callout notices using HTML and CSS classes. Supports info, tip, alert, and warning levels.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/documentation/README.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"callout callout-info\">This is an **info** callout.</div>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Side Effects in JavaScript ES Module\nDESCRIPTION: This snippet shows an example of a side effect in an ES module, where registerStore is called at the top level, causing external changes when the module is imported.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/side-effects.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { registerStore } from '@wordpress/data';\n\nconst store = registerStore( STORE_NAME, {\n\t// ...\n} );\n```\n\n----------------------------------------\n\nTITLE: Toggle Feature Implementation Using Controls in JavaScript\nDESCRIPTION: This code shows how the toggleFeature action was implemented using controls before the introduction of thunks.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/thunks.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport function* toggleFeature( scope, featureName ) {\n\tconst currentValue = yield controls.select(\n\t\tinterfaceStoreName,\n\t\t'isFeatureActive',\n\t\tscope,\n\t\tfeatureName\n\t);\n\n\tyield controls.dispatch(\n\t\tinterfaceStoreName,\n\t\t'setFeatureValue',\n\t\tscope,\n\t\tfeatureName,\n\t\t! currentValue\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing TypeScript for ESLint Integration\nDESCRIPTION: This snippet installs TypeScript as a development dependency, allowing ESLint to support TypeScript language features when used in conjunction with the corresponding ESLint plugin.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/eslint-plugin/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install typescript --save-dev\n```\n\n----------------------------------------\n\nTITLE: Targeting Center-Justified Content Blocks in CSS\nDESCRIPTION: This CSS selector targets blocks that explicitly set their content justification to center. It uses a semantic class name output by the Layout block support.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/explanations/architecture/styles.md#2025-04-21_snippet_17\n\nLANGUAGE: css\nCODE:\n```\n.is-content-justification-center {\n  /* styles here */\n}\n```\n\n----------------------------------------\n\nTITLE: Installing WordPress Components Package\nDESCRIPTION: Command to install the @wordpress/components package using npm. This package provides UI components for use in WordPress-related projects.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/platform/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @wordpress/components\n```\n\n----------------------------------------\n\nTITLE: Lazy Import Error Handling\nDESCRIPTION: Example demonstrating error handling for offline scenarios when using lazy-import.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/lazy-import/README.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ntry {\n\tawait lazyImport( 'is-equal-shallow@^0.1.3' );\n} catch ( error ) {\n\tif ( error.code === 'ENOTFOUND' ) {\n\t\tconsole.log( 'Unable to connect to NPM registry!' );\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Heading Levels Globally in PHP\nDESCRIPTION: PHP function to modify heading level options globally for all Heading blocks by removing H1, H2, and H6 options.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/curating-the-editor-experience/disable-editor-functionality.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction example_modify_heading_levels_globally( $args, $block_type ) {\n\tif ( 'core/heading' !== $block_type ) {\n\t\treturn $args;\n\t}\n\n\t// Remove H1, H2, and H6.\n\t$args['attributes']['levelOptions']['default'] = [ 3, 4, 5 ];\n\t\n\treturn $args;\n}\nadd_filter( 'register_block_type_args', 'example_modify_heading_levels_globally', 10, 2 );\n```\n\n----------------------------------------\n\nTITLE: PHP: Serializing Translated Fruit Keywords\nDESCRIPTION: This PHP snippet serializes an array of fruit keywords and their translated versions using `wp_interactivity_state`.  It also defines a dynamic derived state `translatedFruit` that retrieves the appropriate translation based on the `context.item` (fruit keyword).\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/core-concepts/server-side-rendering.md#2025-04-21_snippet_26\n\nLANGUAGE: php\nCODE:\n```\nwp_interactivity_state( 'myFruitPlugin', array(\n  'fruits'           => array( 'apple', 'banana', 'cherry' ),\n  'translatedFruits' => array(\n    'apple'  => __( 'Apple' ),\n    'banana' => __( 'Banana' ),\n    'cherry' => __( 'Cherry' ),\n    'mango'  => __( 'Mango' ),\n  ),\n  'translatedFruit'  => function() {\n    $state   = wp_interactivity_state();\n    $context = wp_interactivity_get_context();\n    return $state['translatedFruits'][ $context['item'] ];\n  }\n));\n```\n\n----------------------------------------\n\nTITLE: Modifying Block Settings with block_type_metadata_settings Filter in PHP\nDESCRIPTION: This snippet shows how to use the block_type_metadata_settings filter to increase the apiVersion for all blocks by 1.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/filters/block-filters.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nfunction example_filter_metadata_registration( $settings, $metadata ) {\n\t$settings['api_version'] = $metadata['apiVersion'] + 1;\n\treturn $settings;\n};\nadd_filter( 'block_type_metadata_settings', 'example_filter_metadata_registration', 10, 2 );\n```\n\n----------------------------------------\n\nTITLE: Defining Sample Text for Typography Demonstration\nDESCRIPTION: Exports sample text constants used to demonstrate typography styles in the Storybook documentation. These constants provide consistent text examples for headings and paragraphs.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/storybook/stories/tokens/typography.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const SampleTextHeading = 'Code is Poetry.';\nexport const SampleTextParagraph = 'WordPress grows when people like you tell their friends about it, and the thousands of businesses and services that are built on and around WordPress share that fact with their users.'\n```\n\n----------------------------------------\n\nTITLE: Triggering Meta Box Updates in Redux\nDESCRIPTION: This Redux action is triggered when a post update is requested, setting the meta box's state to 'isUpdating'.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/metabox.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nREQUEST_META_BOX_UPDATES\n```\n\n----------------------------------------\n\nTITLE: Using docgen CLI for JavaScript\nDESCRIPTION: This command runs docgen using npx to generate an API documentation file, specifically from an entry point JavaScript file. The generated file consists of exports and their corresponding JSDoc comments.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/docgen/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx docgen <entry-point.js>\n```\n\n----------------------------------------\n\nTITLE: Rendering SlotFillProvider and BottomSheetSettings in React Native\nDESCRIPTION: This snippet demonstrates how to render the SlotFillProvider and BottomSheetSettings components along with a block edit component in a React Native environment. It shows the proper structure for setting up these components for testing.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/react-native/integration-test-guide.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n<SlotFillProvider>\n\t<BlockEdit isSelected name={ name } clientId={ 0 } { ...props } />\n\t<BottomSheetSettings isVisible />\n</SlotFillProvider>\n```\n\n----------------------------------------\n\nTITLE: Stopping WordPress Environment\nDESCRIPTION: Command reference for wp-env stop command to stop running WordPress environments and free ports.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/env/README.md#2025-04-21_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\nwp-env stop\n\nStops running WordPress for development and tests and frees the ports.\n\nOptions:\n  --debug            Enable debug output.             [boolean] [default: false]\n```\n\n----------------------------------------\n\nTITLE: Accessing Sync Experiment Configuration in JavaScript\nDESCRIPTION: This snippet shows how to access the sync experiment configuration data in JavaScript. It includes two window properties: one to enable sync and another for the collaborative editing secret.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/sync/CODE.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.__experimentalEnableSync\nwindow.__experimentalCollaborativeEditingSecret\n```\n\n----------------------------------------\n\nTITLE: Implementing Resolvers with Thunks in Redux Store for JavaScript\nDESCRIPTION: This code demonstrates how to implement resolvers using thunks in a Redux store, showcasing the ability to use async operations directly.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/thunks.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst store = wp.data.createReduxStore( 'my-store', {\n    // ...\n    selectors: {\n        getTemperature: ( state ) => state.temperature\n    },\n    resolvers: {\n        getTemperature: () => async ( { dispatch } ) => {\n            const response = await window.fetch( 'https://...' );\n            const result = await response.json();\n            dispatch.receiveCurrentTemperature( result.temperature );\n        }\n    },\n    // ...\n} );\n```\n\n----------------------------------------\n\nTITLE: Defining Font Family Primitive Tokens in CSS\nDESCRIPTION: Defines the primitive font family tokens as SASS variables. These variables provide consistent font family options for headings, body text, and monospace text in WordPress components.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/storybook/stories/tokens/typography.mdx#2025-04-21_snippet_6\n\nLANGUAGE: css\nCODE:\n```\n$font-family-headings: -apple-system, \"system-ui\", \"Segoe UI\", Roboto, Oxygen-Sans, Ubuntu, Cantarell, \"Helvetica Neue\", sans-serif;\n$font-family-body: -apple-system, \"system-ui\", \"Segoe UI\", Roboto, Oxygen-Sans, Ubuntu, Cantarell, \"Helvetica Neue\", sans-serif;\n$font-family-mono: Menlo, Consolas, monaco, monospace;\n```\n\n----------------------------------------\n\nTITLE: Breaking Change - React 18 Requirement\nDESCRIPTION: Documentation of breaking change that updates dependencies to require React 18.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/format-library/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n-   Updated dependencies to require React 18 ([45235](https://github.com/WordPress/gutenberg/pull/45235))\n```\n\n----------------------------------------\n\nTITLE: Nested Lock Tree with Multiple Entities\nDESCRIPTION: Illustrates a more complex lock tree structure with nested children representing different entities and their potential lock states\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/core-data/src/locks/README.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n{\n\t\"locks\": [],\n\t\"children\": {\n\t\t\"book\": {\n\t\t\t\"locks\": [],\n\t\t\t\"children\": {\n\t\t\t\t1: {\n\t\t\t\t\t\"locks\": [],\n\t\t\t\t\t\"children\": {}\n\t\t\t\t},\n\t\t\t\t2: {\n\t\t\t\t\t\"locks\": [],\n\t\t\t\t\t\"children\": {}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Running E2E Tests with Alternate Environment (Bash)\nDESCRIPTION: This command demonstrates how to run end-to-end tests in Gutenberg using an alternate environment. It specifies the base URL, username, and password for the test site.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/testing-overview.md#2025-04-21_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nWP_BASE_URL=http://wp.test npm run test:e2e -- --wordpress-username=admin --wordpress-password=password\n```\n\n----------------------------------------\n\nTITLE: Sourcing Updated Environment Variables\nDESCRIPTION: Commands to source the updated environment variables for zsh or bash shells.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/react-native/osx-setup-guide.md#2025-04-21_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\nsource ~/.zshrc\n```\n\nLANGUAGE: sh\nCODE:\n```\nsource ~/.bash_profile\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Text Component in React\nDESCRIPTION: Demonstrates the basic implementation of the Text component to render simple text content, similar to HTML p or span elements.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/text/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { __experimentalText as Text } from '@wordpress/components';\n\nfunction Example() {\n\treturn <Text>Code is Poetry</Text>;\n}\n```\n\n----------------------------------------\n\nTITLE: Action Creator: fetchDownloadableBlocks\nDESCRIPTION: This action creator signals that downloadable blocks are being requested. It requires a search string parameter for filtering results and returns an action object.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-directory/README.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Action creator\nfunction fetchDownloadableBlocks(filterValue) {\n    return {\n        type: 'FETCH_DOWNLOADABLE_BLOCKS',\n        filterValue: filterValue\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: PlainText Ref Property Addition\nDESCRIPTION: Added a way to pass a special `ref` property to the `PlainText` component. This provides more control over accessing and manipulating the PlainText component.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/CHANGELOG.md#2025-04-21_snippet_18\n\n\n\n----------------------------------------\n\nTITLE: Paragraph Block Markup\nDESCRIPTION: Empty paragraph block structure used in WordPress Gutenberg editor for creating text content\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/test/e2e/specs/editor/various/__snapshots__/Copy-cut-paste-can-copy-group-onto-non-textual-element-image-spacer-1-chromium.txt#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n```\n\n----------------------------------------\n\nTITLE: Installing WordPress Base Styles\nDESCRIPTION: This command installs the @wordpress/base-styles package as a development dependency using npm. This package provides SCSS utilities and variables for WordPress development.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/base-styles/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"npm install @wordpress/base-styles --save-dev\"\n```\n\n----------------------------------------\n\nTITLE: Installing WordPress Stylelint Config via npm\nDESCRIPTION: Command to install the @wordpress/stylelint-config package as a development dependency using npm.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/stylelint-config/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install @wordpress/stylelint-config --save-dev\n```\n\n----------------------------------------\n\nTITLE: Checking If Entity Record Is Autosaving - JavaScript\nDESCRIPTION: This function checks if a specified entity record is currently in the process of autosaving. It uses parameters including the state, kind, name, and record ID for assessment.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core.md#2025-04-21_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\n// isAutosavingEntityRecord\n\nfunction isAutosavingEntityRecord( state, kind, name, recordId ) {\n    // Implementation here\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding WordPress Default Preset Values with CSS\nDESCRIPTION: Example showing how to override WordPress default preset values by setting new CSS custom property values, useful for themes without theme.json support.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/themes/global-settings-and-styles.md#2025-04-21_snippet_29\n\nLANGUAGE: css\nCODE:\n```\nbody {\n --wp--preset--font-size--large: <NEW_VALUE>;\n}\n```\n\n----------------------------------------\n\nTITLE: Wrapping Cover Block in Container with blocks.getSaveElement Filter in JavaScript\nDESCRIPTION: This example uses the blocks.getSaveElement filter to wrap a Cover block in an outer container div in the editor.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/filters/block-filters.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nfunction wrapCoverBlockInContainer( element, blockType, attributes ) {\n\t\n\t// Skip if element is undefined.\n\tif ( ! element ) {\n\t\treturn;\n\t}\n\n\t// Only apply to Cover blocks.\n\tif ( blockType.name !== 'core/cover' ) {\n\t\treturn element;\n\t}\n\n\t// Return the element wrapped in a div.\n\treturn <div className=\"cover-block-wrapper\">{ element }</div>;\n}\n\nwp.hooks.addFilter(\n\t'blocks.getSaveElement',\n\t'my-plugin/wrap-cover-block-in-container',\n\twrapCoverBlockInContainer\n);\n```\n\n----------------------------------------\n\nTITLE: Raw Shortcut Example\nDESCRIPTION: Example showing how to use the rawShortcut utility to get raw shortcut strings for use with KeyboardShortcuts.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/keycodes/README.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nrawShortcut.primary( 'm' );\n// \"meta+m\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Table in WordPress Gutenberg using HTML\nDESCRIPTION: This snippet renders a simple table in the WordPress Gutenberg editor. It employs the HTML structure for tables, specifying a fixed layout. The table contains two rows and two columns filled with numeric data.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/test/e2e/specs/editor/blocks/__snapshots__/Table-up-and-down-arrow-navigation-1-chromium.txt#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- wp:table -->\n<figure class=\"wp-block-table\"><table class=\"has-fixed-layout\"><tbody><tr><td>1</td><td>4</td></tr><tr><td>2</td><td>3</td></tr></tbody></table></figure>\n<!-- /wp:table -->\n```\n\n----------------------------------------\n\nTITLE: URLInput Label Prop Addition\nDESCRIPTION: A `label` prop was added to `URLInput`. This allows the label to be set without needing to wrap the `URLInput` in a `BaseControl`. This simplifies the process of adding labels to URL input fields.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/CHANGELOG.md#2025-04-21_snippet_11\n\n\n\n----------------------------------------\n\nTITLE: Using Templates with create-block for WordPress Block Development\nDESCRIPTION: This command shows how to use create-block with a custom template. The --template option specifies a predefined template to use for block creation.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/getting-started/devenv/get-started-with-create-block.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx @wordpress/create-block --template=\"my-custom-template\"\n```\n\n----------------------------------------\n\nTITLE: Using useInnerBlocksProps with useBlockProps\nDESCRIPTION: Shows how to combine useBlockProps and useInnerBlocksProps to reduce the number of elements created. This approach passes the blockProps object directly to useInnerBlocksProps.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/platform-docs/docs/create-block/nested-blocks.md#2025-04-21_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { registerBlockType } from '@wordpress/blocks';\nimport { useBlockProps, useInnerBlocksProps } from '@wordpress/block-editor';\n\nregisterBlockType( 'gcreate-block/gutenpride-container', {\n\t// ...\n\n\tedit: () => {\n\t\tconst blockProps = useBlockProps();\n\t\tconst innerBlocksProps = useInnerBlocksProps( blockProps );\n\n\t\treturn <div { ...innerBlocksProps } />;\n\t},\n\n\tsave: () => {\n\t\tconst blockProps = useBlockProps.save();\n\t\tconst innerBlocksProps = useInnerBlocksProps.save( blockProps );\n\n\t\treturn <div { ...innerBlocksProps } />;\n\t},\n} );\n```\n\n----------------------------------------\n\nTITLE: Template String Usage in JavaScript\nDESCRIPTION: Demonstrates the preferred use of ES6 template strings over string concatenation for variable interpolation.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/coding-guidelines.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst name = 'Stacey';\n\n// Bad:\nalert( 'My name is ' + name + '.' );\n// Good:\nalert( `My name is ${ name }.` );\n```\n\n----------------------------------------\n\nTITLE: Running Performance Tests in Gutenberg\nDESCRIPTION: Command to execute performance tests which measure editor loading time, typing responsiveness, and block selection speed. Requires an e2e testing environment to be set up first.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/testing-overview.md#2025-04-21_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test:performance\n```\n\n----------------------------------------\n\nTITLE: Building WordPress Block Assets\nDESCRIPTION: Command to build scripts and update asset files for tracking dependencies and build version.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/block-tutorial/applying-styles-with-stylesheets.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Installing the API Fetch Package\nDESCRIPTION: Shows how to install the @wordpress/api-fetch package using npm. This is the first step required before using the API Fetch utility in your project.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/api-fetch/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @wordpress/api-fetch --save\n```\n\n----------------------------------------\n\nTITLE: Running on Default iOS Simulator\nDESCRIPTION: Command to compile and run the iOS version of the app using the default iOS simulator.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/react-native/getting-started-react-native.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnpm run native ios\n```\n\n----------------------------------------\n\nTITLE: Gutenberg Plugin Release Cherry-Pick Commands\nDESCRIPTION: Commands for using the cherry-pick script specifically for Gutenberg plugin releases, including checking out the release branch.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/auto-cherry-picking.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Switch to the release branch\ngit checkout release/X.Y\n\n# Cherry-pick all the merged PRs with a relevant backport label\nnpm run other:cherry-pick \"Backport to Gutenberg RC\"\n```\n\n----------------------------------------\n\nTITLE: Hiding Widget from Legacy Widget Block in PHP\nDESCRIPTION: This PHP snippet demonstrates how to use the 'widget_types_to_hide_from_legacy_widget_block' filter to hide a specific widget from the Legacy Widget block's dropdown and block inserter.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/widgets/legacy-widget-block.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nfunction hide_example_widget( $widget_types ) {\n\t$widget_types[] = 'example_widget';\n\treturn $widget_types;\n}\nadd_filter( 'widget_types_to_hide_from_legacy_widget_block', 'hide_example_widget' );\n```\n\n----------------------------------------\n\nTITLE: Block Module Script Configuration\nDESCRIPTION: Package.json configuration for exposing block script modules\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-library/README.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"name\": \"@wordpress/block-library\",\n\t\"wpScriptModuleExports\": {\n\t\t\"./blinking-paragraph/view\": \"./build-module/blinking-paragraph/view.js\",\n\t\t\"./image/view\": \"./build-module/image/view.js\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Appending Query Arguments to URL in JavaScript\nDESCRIPTION: Demonstrates how to use the addQueryArgs function to append query parameters to a URL. This function handles both new and existing query arguments.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/url/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst newURL = addQueryArgs( 'https://google.com', { q: 'test' } ); // https://google.com/?q=test\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest Preset in Package Configuration\nDESCRIPTION: Basic Jest configuration setup using the WordPress preset in either jest.config.json or package.json\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/jest-preset-default/README.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"preset\": \"@wordpress/jest-preset-default\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PreferencesModalSection Prop Types\nDESCRIPTION: Describes the prop types and requirements for the PreferencesModalSection component, including title, description, and children props\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/preferences/src/components/preferences-modal-section/README.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  title: String, // Required section title\n  description: String, // Optional section description\n  children: Element // Required child components\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Paragraph Block - HTML\nDESCRIPTION: This snippet creates a paragraph block that displays the text 'B block'. It is formatted according to the Gutenberg block specifications.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/test/e2e/specs/editor/various/__snapshots__/Copy-cut-paste-should-copy-only-partial-selection-of-text-blocks-1-chromium.txt#2025-04-21_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- wp:paragraph -->\n<p>B block</p>\n<!-- /wp:paragraph -->\n```\n\n----------------------------------------\n\nTITLE: InnerBlocks Control Value Change\nDESCRIPTION: The block control value for `InnerBlocks` has changed from `__experimentalBlocks` to `value` and is now considered a stable API. Developers should update their code to use the new `value` property when working with InnerBlocks to ensure compatibility and leverage the stable API.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/CHANGELOG.md#2025-04-21_snippet_8\n\n\n\n----------------------------------------\n\nTITLE: Displaying Triage Labels in Markdown Table\nDESCRIPTION: This code snippet shows how to create a Markdown table listing commonly used labels for triaging issues in the Gutenberg repository. It includes the label name and the reason for using each label.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/triage.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Label                      | Reason                                                                                    |\n| -------------------------- | ----------------------------------------------------------------------------------------- |\n| `[Type] Bug`               | When an intended feature is broken.                                                       |\n| `[Type] Enhancement`       | When someone is suggesting an enhancement to a current feature.                           |\n| `[Type] Help Request`      | When someone is asking for general help with setup/implementation.                        |\n| `Needs Technical Feedback` | When you see new features or API changes proposed.                                        |\n| `Needs More Info`          | When it's not clear what the issue is or it would help to provide additional details.     |\n| `Needs Testing`            | When a new issue needs to be confirmed or old bugs seem like they are no longer relevant. |\n```\n\n----------------------------------------\n\nTITLE: Creating Separator Block from User Input in WordPress Gutenberg\nDESCRIPTION: Demonstrates an 'enter' type transformation that creates a Separator block when the user types three or more hyphens and hits the ENTER key.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-transforms.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ntransforms = {\n\tfrom: [\n\t\t{\n\t\t\ttype: 'enter',\n\t\t\tregExp: /^-{3,}$/,\n\t\t\ttransform: () => createBlock( 'core/separator' ),\n\t\t},\n\t],\n};\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Update Code Reference\nDESCRIPTION: Code change reference showing the replacement of process.env.IS_GUTENBERG_PLUGIN with globalThis.IS_GUTENBERG_PLUGIN for build systems.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-library/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nprocess.env.IS_GUTENBERG_PLUGIN = globalThis.IS_GUTENBERG_PLUGIN\n```\n\n----------------------------------------\n\nTITLE: Defining Typography Configuration in JavaScript\nDESCRIPTION: Exports JavaScript objects that define typography properties including font family, weights, and sizes. These are used for displaying typography samples in the Storybook documentation.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/storybook/stories/tokens/typography.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const typography = {\n\ttype: {\n\t\tprimary: '-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Oxygen-Sans,Ubuntu,Cantarell,\"Helvetica Neue\",sans-serif',\n\t},\n\tweight: {\n\t\tregular: '400',\n\t\tmedium: '500',\n\t},\n\tsize: {\n\t\ts1: 11,\n\t\ts2: 12,\n\t\ts3: 13,\n\t\ts4: 15,\n\t\ts5: 20,\n\t\ts6: 32,\n\t},\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of ItemGroup with Item Components in React\nDESCRIPTION: Demonstrates how to import and use the experimental ItemGroup and Item components from WordPress components. This example shows the basic structure of rendering multiple Item components within an ItemGroup container.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/item-group/item-group/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n\t__experimentalItemGroup as ItemGroup,\n\t__experimentalItem as Item,\n} from '@wordpress/components';\n\nfunction Example() {\n\treturn (\n\t\t<ItemGroup>\n\t\t\t<Item>Code</Item>\n\t\t\t<Item>is</Item>\n\t\t\t<Item>Poetry</Item>\n\t\t</ItemGroup>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting HTML Content in JavaScript\nDESCRIPTION: Demonstrates how to extract inner HTML from an element using the 'html' source.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-attributes.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n{\n\tcontent: {\n\t\ttype: 'string',\n\t\tsource: 'html',\n\t\tselector: 'figcaption',\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook Components and SVG Assets for Radius Documentation\nDESCRIPTION: Imports Meta and Typeset components from Storybook blocks, along with SVG images used to illustrate radius concepts in the documentation.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/storybook/stories/foundations/design-language/radius.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Meta, Typeset } from '@storybook/blocks';\nimport radius from './static/radius.svg';\nimport radiusDo from './static/radius-do.svg';\nimport radiusDont from './static/radius-dont.svg';\n```\n\n----------------------------------------\n\nTITLE: Linting JavaScript/TypeScript with wp-scripts\nDESCRIPTION: This snippet demonstrates configuring the `lint-js` script in `package.json` to lint JavaScript and TypeScript files using `wp-scripts` and eslint. It includes examples for linting the entire project and a specific source directory, invoked via `npm run lint:js` and `npm run lint:js:src`.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/scripts/README.md#2025-04-21_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"scripts\": {\n\t\t\"lint:js\": \"wp-scripts lint-js\",\n\t\t\"lint:js:src\": \"wp-scripts lint-js ./src\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Targeting Grid Layout Blocks in CSS\nDESCRIPTION: This CSS selector targets blocks that use the Grid layout type. It uses a semantic class name output by the Layout block support.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/explanations/architecture/styles.md#2025-04-21_snippet_13\n\nLANGUAGE: css\nCODE:\n```\n.is-layout-grid {\n  /* styles here */\n}\n```\n\n----------------------------------------\n\nTITLE: Defining npm scripts for Unit testing using wp-scripts\nDESCRIPTION: This JSON snippet defines npm scripts for running unit tests using wp-scripts. It provides examples for running all tests, displaying help information, enabling watch mode, and starting the debugger.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/scripts/README.md#2025-04-21_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"scripts\": {\n\t\t\"test:unit\": \"wp-scripts test-unit-js\",\n\t\t\"test:unit:help\": \"wp-scripts test-unit-js --help\",\n\t\t\"test:unit:watch\": \"wp-scripts test-unit-js --watch\",\n\t\t\"test:unit:debug\": \"wp-scripts --inspect-brk test-unit-js --runInBand --no-cache\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Server-side State Initialization with PHP\nDESCRIPTION: Example of initializing state on the server using the wp_interactivity_state PHP function, which sets initial values that need to be typed in TypeScript.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/core-concepts/using-typescript.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nwp_interactivity_state( 'myCounterPlugin', array(\n\t'counter' => 1,\n));\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint Auto-Fix on Save in Visual Studio Code\nDESCRIPTION: JSON configuration for Visual Studio Code to automatically fix ESLint issues on save. This setting helps maintain code quality and consistency.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/getting-started-with-code-contribution.md#2025-04-21_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"editor.codeActionsOnSave\": {\n        \"source.fixAll.eslint\": \"explicit\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Field Validation Functions (JavaScript)\nDESCRIPTION: Examples of custom validation functions for fields. These functions take an item and context as arguments and return a boolean indicating whether the field is valid.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/dataviews/README.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n{\n\tisValid: ( item, context ) => {\n\t\treturn !! item;\n\t};\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n\ttype: 'number',\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n\ttype: 'number',\n\tisValid: ( item, context ) => { /* Custom function. */ }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DialogInputEvent Type (TypeScript)\nDESCRIPTION: Defines a custom type for dialog input events, which can be either a keyboard event on the dialog div or a mouse event on a button.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/confirm-dialog/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype DialogInputEvent =\n\t| KeyboardEvent< HTMLDivElement >\n\t| MouseEvent< HTMLButtonElement >;\n```\n\n----------------------------------------\n\nTITLE: Breaking Change: Increasing Minimum Node.js Version to 14\nDESCRIPTION: This code snippet documents a breaking change in version 2.0.0 that increases the minimum Node.js version to 14.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/readable-js-assets-webpack-plugin/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Breaking Changes\n\n-   Increase the minimum Node.js version to 14 ([#43141](https://github.com/WordPress/gutenberg/pull/43141)).\n```\n\n----------------------------------------\n\nTITLE: Running Native Unit Tests\nDESCRIPTION: Command to run unit tests for the native components of the project.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/react-native/osx-setup-guide.md#2025-04-21_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\nnpm run test:native\n```\n\n----------------------------------------\n\nTITLE: Using History API to Sync Post ID with URL in React\nDESCRIPTION: The <BrowserURL /> component updates the browser URL to reflect the current post ID when it changes, utilizing window.replaceState for seamless updates. Dependencies include the React library and the History API for managing browser history.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/edit-post/src/components/browser-url/README.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n<BrowserURL /> is a component used to keep the editor's saved post ID in sync with the browser's URL. Using the [History API](https://developer.mozilla.org/en-US/docs/Web/API/History_API), it makes an in-place replacement (using `window.replaceState`) of the URL if the post ID changes and is not an auto-draft.\n```\n\n----------------------------------------\n\nTITLE: Setting Up Mobile Gutenberg Dependencies\nDESCRIPTION: Commands for installing Node.js with the correct version using nvm, installing dependencies, and preparing the iOS build.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/react-native/getting-started-react-native.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnvm install\nnpm ci\nnpm run native preios\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Responsive Embeds\nDESCRIPTION: HTML structure showing how responsive embed blocks are implemented in WordPress. The figure element includes classes that define the aspect ratio for proper responsive behavior.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/themes/theme-support.md#2025-04-21_snippet_26\n\nLANGUAGE: html\nCODE:\n```\n<figure class=\"wp-embed-aspect-16-9 wp-has-aspect-ratio\">...</figure>\n```\n\n----------------------------------------\n\nTITLE: Installing WordPress Components Package with npm\nDESCRIPTION: Demonstrates how to install the @wordpress/components package using npm for use in JavaScript applications outside of WordPress.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/explanations/architecture/modularity.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @wordpress/components\n```\n\n----------------------------------------\n\nTITLE: E2E Tests Migration\nDESCRIPTION: This snippet describes a breaking change in Gutenberg v4.0.0, where E2E tests are being migrated to Playwright. The existing package is deprecated and will only receive bug fixes until fully migrated.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/e2e-tests/CHANGELOG.md#2025-04-21_snippet_5\n\nLANGUAGE: None\nCODE:\n```\nThere's currently an ongoing [project](https://github.com/WordPress/gutenberg/issues/38851) to migrate E2E tests to Playwright instead. This package is deprecated and will only accept bug fixes until fully migrated.\n```\n\n----------------------------------------\n\nTITLE: Style Directive Implementation - HTML\nDESCRIPTION: Implementation of data-wp-style directive for runtime style handling.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/interactivity/CHANGELOG.md#2025-04-21_snippet_6\n\nLANGUAGE: html\nCODE:\n```\ndata-wp-style\n```\n\n----------------------------------------\n\nTITLE: Locking Private Data\nDESCRIPTION: This snippet illustrates how to use the `lock()` function to secure private data, ensuring that internal strings cannot be accessed from the outside once locked. It shows that `lock()` can secure various data types, not just strings.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/private-apis/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Say this object is exported from a package:\nexport const publicObject = {};\n\n// However, this string is internal and should not be publicly available:\nconst __experimentalString = '__experimental information';\n\n// Solution: lock the string \"inside\" of the object:\nlock( publicObject, __experimentalString );\n\n// The string is not nested in the object and cannot be extracted from it:\nconsole.log( publicObject );\n// {}\n\n// The only way to access the string is by \"unlocking\" the object:\nconsole.log( unlock( publicObject ) );\n// \"__experimental information\"\n\n// lock() accepts all data types, not just strings:\nexport const anotherObject = {};\nlock( anotherObject, function __experimentalFn() {} );\nconsole.log( unlock( anotherObject ) );\n// function __experimentalFn() {}\n\n```\n\n----------------------------------------\n\nTITLE: Correct Ellipsis Usage in JavaScript\nDESCRIPTION: This code snippet illustrates the correct way to represent an ellipsis within a translatable string, using the ellipsis character (U+2026). This adheres to the i18n-ellipsis rule in Gutenberg.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/eslint-plugin/docs/rules/i18n-ellipsis.md#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"__( 'Continue…' );\"\n```\n\n----------------------------------------\n\nTITLE: Rendering a Letter Spacing Control in Gutenberg\nDESCRIPTION: This code snippet demonstrates how to render a LetterSpacingControl component in Gutenberg.  It imports the component from '@wordpress/block-editor' and shows its basic usage with value and onChange props.  The __unstableInputWidth and __next40pxDefaultSize props are also included for customization.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/src/components/letter-spacing-control/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { __experimentalLetterSpacingControl as LetterSpacingControl } from '@wordpress/block-editor';\n\nconst MyLetterSpacingControl = () => (\n\t<LetterSpacingControl\n\t\tvalue={ value }\n\t\tonChange={ onChange }\n\t\t__unstableInputWidth=\"auto\"\n\t\t__next40pxDefaultSize\n\t/>\n);\n\n```\n\n----------------------------------------\n\nTITLE: Paragraph Block Definition\nDESCRIPTION: Defines a paragraph block in Gutenberg. It utilizes an HTML comment to mark the block's beginning and end, and a standard HTML paragraph tag to represent the content.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/test/e2e/specs/editor/various/__snapshots__/Copy-cut-paste-should-cut-and-paste-individual-non-textual-blocks-1-chromium.txt#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n```\n\n----------------------------------------\n\nTITLE: Importing InspectorControls Component\nDESCRIPTION: Imports InspectorControls and useBlockProps from the WordPress block editor package.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/getting-started/tutorial.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { InspectorControls, useBlockProps } from '@wordpress/block-editor';\n```\n\n----------------------------------------\n\nTITLE: CopyHandler Event Handling Change\nDESCRIPTION: `CopyHandler` will now only catch cut/copy events coming from its `props.children`, instead of from anywhere in the `document`. This improves the precision and efficiency of event handling within the CopyHandler component.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/CHANGELOG.md#2025-04-21_snippet_20\n\n\n\n----------------------------------------\n\nTITLE: Importing Playwright Test Utilities in WordPress Gutenberg Tests\nDESCRIPTION: Shows how to import the necessary test utilities from the @wordpress/e2e-test-utils-playwright package when migrating from Jest + Puppeteer to Playwright.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/e2e/migration.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { test, expect } = require( '@wordpress/e2e-test-utils-playwright' );\n```\n\n----------------------------------------\n\nTITLE: HTML: Displaying Fruits with Shopping List Emoji\nDESCRIPTION: Renders a list of fruits with their corresponding shopping list emoji using `data-wp-each` to iterate through the `fruits` array and `data-wp-text` to display the fruit name and the emoji based on the `state.onShoppingList` derived state.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/core-concepts/server-side-rendering.md#2025-04-21_snippet_20\n\nLANGUAGE: html\nCODE:\n```\n<ul data-wp-interactive=\"myFruitPlugin\">\n\t<template data-wp-each=\"state.fruits\">\n\t\t<li>\n\t\t\t<span data-wp-text=\"context.item\"></span>\n\t\t\t<span data-wp-text=\"state.onShoppingList\"></span>\n\t\t</li>\n\t</template>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Configuring Prettier in Visual Studio Code for JavaScript and Markdown\nDESCRIPTION: JSON configuration for Visual Studio Code to set Prettier as the default formatter and enable auto-formatting on save for JavaScript and Markdown files.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/getting-started-with-code-contribution.md#2025-04-21_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n\"[[javascript]]\": {\n    \"editor.defaultFormatter\": \"esbenp.prettier-vscode\",\n    \"editor.formatOnSave\": true\n},\n\"[[markdown]]\": {\n    \"editor.defaultFormatter\": \"esbenp.prettier-vscode\",\n    \"editor.formatOnSave\": true\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Action Creator: clearErrorNotice\nDESCRIPTION: This action creator sets the error notice for a specified block to empty. It requires the block ID as a string parameter and returns an action object.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-directory/README.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Action creator\nfunction clearErrorNotice(blockId) {\n    return {\n        type: 'CLEAR_ERROR_NOTICE',\n        blockId: blockId\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Block State Handling Improvements\nDESCRIPTION: Improved handling of blocks state references for unchanging states. Updated handling of blocks state to effectively ignore programmatically-received blocks data (e.g. reusable blocks received from editor). These internal improvements enhance the performance and stability of block state management.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/CHANGELOG.md#2025-04-21_snippet_21\n\n\n\n----------------------------------------\n\nTITLE: Installing WordPress Block Directory Package via npm\nDESCRIPTION: This snippet shows how to install the Block Directory package using npm, which is necessary for extending the WordPress block editor functionalities. Ensure you run it in an environment that supports ES2015+ features.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-directory/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @wordpress/block-directory --save\n```\n\n----------------------------------------\n\nTITLE: Link Color Styling with User Preferences in WordPress 5.9\nDESCRIPTION: CSS approach used in WordPress 5.9 for applying user-selected link colors with appropriate specificity, removing the !important declaration used in WordPress 5.8.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/themes/global-settings-and-styles.md#2025-04-21_snippet_30\n\nLANGUAGE: css\nCODE:\n```\n.wp-element-<ID> a { color: <USER_COLOR_VALUE>; }\n```\n\n----------------------------------------\n\nTITLE: Configuring Stylelint with WordPress SCSS Stylistic Preset\nDESCRIPTION: JSON configuration to use the WordPress SCSS stylistic preset, combining default, stylistic, and SCSS configs with SCSS-specific style adaptations.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/stylelint-config/README.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"extends\": [ \"@wordpress/stylelint-config/scss-stylistic\" ]\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Webpack Configuration with TOML Support\nDESCRIPTION: Example of extending the default webpack configuration to add TOML file parsing support.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/scripts/README.md#2025-04-21_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nconst toml = require( 'toml' );\nconst defaultConfig = require( '@wordpress/scripts/config/webpack.config' );\n\nmodule.exports = {\n\t...defaultConfig,\n\tmodule: {\n\t\t...defaultConfig.module,\n\t\trules: [\n\t\t\t...defaultConfig.module.rules,\n\t\t\t{\n\t\t\t\ttest: /.toml/,\n\t\t\t\ttype: 'json',\n\t\t\t\tparser: {\n\t\t\t\t\tparse: toml.parse,\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t},\n};\n```\n\n----------------------------------------\n\nTITLE: Displaying Black and White Color Palette\nDESCRIPTION: Creates a color palette section displaying the black and white base colors using Storybook's ColorPalette and ColorItem components.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/storybook/stories/tokens/color.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<ColorPalette>\n\t<ColorItem\n\t\ttitle=\"Black & White\"\n\t\tsubtitle=\"\"\n\t\tcolors={{\n\t\t\t'$black': '#000',\n\t\t\t'$white': '#fff',\n\t\t}}\n\t/>\n</ColorPalette>\n```\n\n----------------------------------------\n\nTITLE: Disabling Openverse in PHP\nDESCRIPTION: Shows how to disable the Openverse integration using the 'block_editor_settings_all' filter.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/filters/editor-filters.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nadd_filter( 'block_editor_settings_all', 'example_disable_openverse' );\n\nfunction example_disable_openverse( $settings ) {\n\t$settings['enableOpenverseMediaCategory'] = false;\n\treturn $settings;\n}\n```\n\n----------------------------------------\n\nTITLE: Stable Callback Function with useEvent\nDESCRIPTION: The `useEvent` utility creates a stable callback function that has access to the latest state, allowing it to be used within event handlers and effect callbacks. This helps developers to maintain a consistent reference in their event-driven code.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/compose/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n-   `useEvent`: a new utility that creates a stable callback function that has access to the latest state and can be used within event handlers and effect callbacks ([#64943](https://github.com/WordPress/gutenberg/pull/64943)).\n```\n\n----------------------------------------\n\nTITLE: Installing WordPress Edit Widgets Package\nDESCRIPTION: This snippet shows how to install the @wordpress/edit-widgets package using npm. The package is designed to work in an ES2015+ environment, with additional polyfills available if required.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/edit-widgets/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @wordpress/edit-widgets\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Meta Field in PHP for WordPress\nDESCRIPTION: This PHP code registers a custom meta field for posts, making it available in the REST API and compatible with the block editor.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/metabox.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// register custom meta tag field\nfunction myguten_register_post_meta() {\n\tregister_post_meta( 'post', 'myguten_meta_block_field', array(\n\t\t'show_in_rest' => true,\n\t\t'single' => true,\n\t\t'type' => 'string',\n\t) );\n}\nadd_action( 'init', 'myguten_register_post_meta' );\n```\n\n----------------------------------------\n\nTITLE: Implementing VStack Layout in React\nDESCRIPTION: This snippet demonstrates using the VStack component from the WordPress components library to vertically stack Text elements. It requires the '@wordpress/components' package, and it imports VStack and Text in their experimental forms. There are no parameters, and the rendered output consists of three vertically aligned text elements: 'Code', 'is', and 'Poetry'.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/v-stack/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n\t__experimentalText as Text,\n\t__experimentalVStack as VStack,\n} from '@wordpress/components';\n\nfunction Example() {\n\treturn (\n\t\t<VStack>\n\t\t\t<Text>Code</Text>\n\t\t\t<Text>is</Text>\n\t\t\t<Text>Poetry</Text>\n\t\t</VStack>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Interactive Cherry-Pick Prompt Example\nDESCRIPTION: Shows the initial interactive prompt displayed when running the cherry-pick automation script, explaining the actions that will be performed.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/auto-cherry-picking.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nYou are on branch \"wp/6.2\".\nThis script will:\n• Cherry-pick the merged PRs labeled as \"Backport to WP Beta/RC\" to this branch\n• Ask whether you want to push this branch\n• Comment on each PR\n• Remove the label from each PR\n\nThe last two actions will be performed USING YOUR GITHUB ACCOUNT that you've\nlinked to your GitHub CLI (gh command)\n\nDo you want to proceed? (Y/n)\n```\n\n----------------------------------------\n\nTITLE: Illustrating Tree-Shaking Challenges with Re-exports in JavaScript\nDESCRIPTION: This snippet demonstrates how re-exporting from multiple modules can prevent tree-shaking if the bundler assumes all modules have side effects.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/side-effects.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// index.js\n\nexport { a, b } from './module1';\nexport { c, d, e } from './module2';\nexport { f } from './module3';\n\n// Nothing can be tree-shaken away, because the bundler doesn't know if\n// this or the re-exported modules have any side effects.\n```\n\n----------------------------------------\n\nTITLE: Restarting Docker Service on Ubuntu\nDESCRIPTION: Commands to reload daemon and restart Docker service after configuration changes on Ubuntu.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/getting-started/devenv/get-started-with-wp-env.md#2025-04-21_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nsudo systemctl daemon-reload\nsudo systemctl restart docker.service\n```\n\n----------------------------------------\n\nTITLE: Setting Text Size in Text Component\nDESCRIPTION: Shows how to adjust text size using the size prop, which can accept system presets like 'largeTitle' or custom numerical/unit values based on the typography system.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/text/README.md#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { __experimentalText as Text } from '@wordpress/components';\n\nfunction Example() {\n\treturn <Text size=\"largeTitle\">Code is Poetry</Text>;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering GlobalStylesUI Component in JavaScript\nDESCRIPTION: This code snippet demonstrates how to import and render the GlobalStylesUI component within a JavaScript function component. It shows the basic integration of the Global Styles UI into a React-based environment, such as the Gutenberg editor.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/edit-site/src/components/global-styles/README.md#2025-04-21_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { GlobalStylesUI } from './global-styles';\n\nfunction MyComponent() {\n\treturn <GlobalStylesUI />;\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying an Elevation Diagram\nDESCRIPTION: This snippet displays the `elevation.svg` image within the documentation.  The `alt` attribute is intentionally left empty because the image is purely presentational.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/storybook/stories/foundations/design-language/elevation.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<img src={ elevation } alt=\"\" width=\"100%\" />\n```\n\n----------------------------------------\n\nTITLE: HTML Table Structure Example\nDESCRIPTION: Example HTML structure of a table block showing header, body and footer sections to demonstrate Block Supports API limitations.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/explanations/architecture/styles.md#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<table>\n\t<thead>\n\t\t<tr>\n\t\t\t<th>Header</th>\n\t\t</tr>\n\t</thead>\n\t<tbody>\n\t\t<tr>\n\t\t\t<th>First</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<th>Second</th>\n\t\t</tr>\n\t</tbody>\n\t<tfoot>\n\t\t<tr>\n\t\t\t<th>Footer</th>\n\t\t</tr>\n\t</tfoot>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Defining npm scripts for E2E testing using wp-scripts\nDESCRIPTION: This JSON snippet defines npm scripts for running end-to-end tests using wp-scripts. It shows how to run all tests, display help information, and enable debugging with interactive mode.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/scripts/README.md#2025-04-21_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"scripts\": {\n\t\t\"test:e2e\": \"wp-scripts test-e2e\",\n\t\t\"test:e2e:help\": \"wp-scripts test-e2e --help\",\n\t\t\"test:e2e:debug\": \"wp-scripts --inspect-brk test-e2e --puppeteer-devtools\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Functions in count/index.js File\nDESCRIPTION: This snippet contains functions for addition and subtraction defined in a JavaScript file under a namespace export, accompanied by JSDoc examples showing how to use each function.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/docgen/README.md#2025-04-21_snippet_7\n\nLANGUAGE: js\nCODE:\n```\n/**\\n * Subtracts two numbers.\\n *\\n * @example\\n *\\n * ```js\\n * const result = subtraction( 5, 2 );\\n * console.log( result ); // Will log 3\\n * ```\\n *\\n * @param {number} term1 First number.\\n * @param {number} term2 Second number.\\n * @return {number} The result of subtracting the two numbers.\\n */\\nexport function subtraction( term1, term2 ) {\\n\\treturn term1 - term2;\\n}\\n\\n/**\\n * Adds two numbers.\\n *\\n * @example\\n *\\n * ```js\\n * const result = addition( 5, 2 );\\n * console.log( result ); // Will log 7\\n * ```\\n *\\n * @param {number} term1 First number.\\n * @param {number} term2 Second number.\\n * @return {number} The result of adding the two numbers.\\n */\\nexport function addition( term1, term2 ) {\\n\\t// Implementation would go here.\\n\\treturn term1 - term2;\\n}\n```\n\n----------------------------------------\n\nTITLE: Data Binding Role Attribute - HTML/JavaScript\nDESCRIPTION: Implementation of data-wp-bind directive to handle role attribute removal when set to null.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/interactivity/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\ndata-wp-bind=\"role: null\"\n```\n\n----------------------------------------\n\nTITLE: Deleting Entity Record - JavaScript\nDESCRIPTION: Deletes an entity record based on specified parameters including kind, name, recordId, and options. This action allows for removing records through a DELETE API call.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core.md#2025-04-21_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\ndeleteEntityRecord(kind, name, recordId, query, options) {\n  // Action triggered to delete an entity record.\n  // Parameters:\n  // - kind: Kind of the deleted entity.\n  // - name: Name of the deleted entity.\n  // - recordId: Record ID of the deleted entity.\n  // - query: Special query parameters for the DELETE API call.\n  // - options: Delete options.\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Changelog for WordPress Packages\nDESCRIPTION: Template for the initial CHANGELOG.md file structure when creating a new WordPress package. Includes the required header comment and unreleased section.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/README.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- Learn how to maintain this file at https://github.com/WordPress/gutenberg/tree/HEAD/packages#maintaining-changelogs. -->\n\n## Unreleased\n\nInitial release.\n```\n\n----------------------------------------\n\nTITLE: Cherry-Pick Execution Output Example\nDESCRIPTION: Demonstrates the script's output during execution, showing the process of finding PRs, fetching commit IDs, and performing the cherry-pick operations.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/auto-cherry-picking.md#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nTrying to cherry-pick one by one..\n\n$ git pull origin wp/6.2 --rebase...\n$ git fetch origin trunk...\n\nFound the following PRs to cherry-pick:\n   #41198 – Site Editor: Set min-width for styles preview\n\nFetching commit IDs... Done!\n   #41198 – 860a39665c318d33027d – Site Editor: Set min-width for...\n\nTrying to cherry-pick one by one...\n\nCherry-picking round 1:\n    cherry-pick commit: afe9b757b4  for PR: #41198 – Site Editor: Set min-width for...\nCherry-picking finished!\n\nSummary:\n    1 PRs got cherry-picked cleanly\n    0 PRs failed\n\nAbout to push to origin/wp/6.2\nDo you want to proceed? (Y/n)\n```\n\n----------------------------------------\n\nTITLE: Chained Element Selection in Playwright\nDESCRIPTION: Example of chaining multiple getByRole selectors to perform complex element queries\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/e2e/README.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Select an option with a name \"Buttons\" under the \"Block Library\" region.\npage.getByRole( 'region', { name: 'Block Library' } )\n\t.getByRole( 'option', { name: 'Buttons' } )\n```\n\n----------------------------------------\n\nTITLE: Using BlockMediaUpdateProgress in React Native\nDESCRIPTION: This code snippet demonstrates how to use the `BlockMediaUpdateProgress` component in a React Native application. It imports necessary components from 'react-native' and '@wordpress/block-editor', then implements a function that renders an `ImageBackground` with media upload progress information. The component takes a media ID and URL as props, displaying a progress bar and retry message if the save operation fails.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/src/components/block-media-update-progress/README.md#2025-04-21_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n```jsx\nimport { ImageBackground, Text, View } from 'react-native';\nimport { BlockMediaUpdateProgress } from '@wordpress/block-editor';\n\nfunction BlockUpdatingProgress( { url, id } ) {\n\treturn (\n\t\t<BlockMediaUpdateProgress\n\t\t\tmediaId={ id }\n\t\t\trenderContent={ ( { isSaveFailed, retryMessage } ) => {\n\t\t\t\treturn (\n\t\t\t\t\t<ImageBackground\n\t\t\t\t\t\tresizeMethod=\"scale\"\n\t\t\t\t\t\tsource={ { uri: url } }\n\t\t\t\t\t>\n\t\t\t\t\t\t{ isSaveFailed && (\n\t\t\t\t\t\t\t<View>\n\t\t\t\t\t\t\t\t<Text>{ retryMessage }</Text>\n\t\t\t\t\t\t\t</View>\n\t\t\t\t\t\t) }\n\t\t\t\t\t</ImageBackground>\n\t\t\t\t);\n\t\t\t} }\n\t\t/>\n\t);\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Running Appium Doctor for Integration Tests\nDESCRIPTION: Command to run the Appium doctor tool for checking integration test dependencies.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/react-native/osx-setup-guide.md#2025-04-21_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\nnpx appium-doctor\n```\n\n----------------------------------------\n\nTITLE: Installing WordPress Annotations Package via npm\nDESCRIPTION: Command to install the @wordpress/annotations package using npm. This package allows developers to annotate content in the Gutenberg editor and requires an ES2015+ environment.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/annotations/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @wordpress/annotations --save\n```\n\n----------------------------------------\n\nTITLE: Triggering FlatList Render in React Native Testing\nDESCRIPTION: This code snippet shows how to force a FlatList component to render all its items during testing. It simulates a scroll event with specific parameters to ensure all list items are rendered and can be queried in the test environment.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/react-native/integration-test-guide.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst blockList = getByTestId( 'InserterUI-Blocks' );\n// onScroll event used to force the FlatList to render all items\nfireEvent.scroll( blockList, {\n\tnativeEvent: {\n\t\tcontentOffset: { y: 0, x: 0 },\n\t\tcontentSize: { width: 100, height: 100 },\n\t\tlayoutMeasurement: { width: 100, height: 100 },\n\t},\n} );\n```\n\n----------------------------------------\n\nTITLE: Installing WordPress Lazy Import Package\nDESCRIPTION: Command to install the @wordpress/lazy-import package using npm package manager.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/lazy-import/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @wordpress/lazy-import --save\n```\n\n----------------------------------------\n\nTITLE: Incorrect Import Grouping in JavaScript\nDESCRIPTION: Example of non-compliant import statement without proper dependency group docblocks, which violates the project's coding guidelines\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/eslint-plugin/docs/rules/dependency-group.md#2025-04-21_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { camelCase } from 'change-case';\nimport { Component } from 'react';\nimport edit from './edit';\n```\n\n----------------------------------------\n\nTITLE: Uploading Text File Example\nDESCRIPTION: Specific example of uploading a text file to the WordPress media library with content 'foo' and alerting its URL after upload.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/media-utils/README.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nwp.mediaUtils.utils.uploadMedia( {\n\tfilesList: [ new File( [ 'foo' ], 'foo.txt', { type: 'text/plain' } ) ],\n\tonFileChange: ( [ fileObj ] ) => alert( fileObj.url ),\n\tonError: console.error,\n} );\n```\n\n----------------------------------------\n\nTITLE: Implementing ResizeTooltip in a React Component\nDESCRIPTION: Basic example showing how to implement the ResizeTooltip component within a parent div that has position styling defined. The parent element must have position styling for the ResizeTooltip to function correctly.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/resizable-box/resize-tooltip/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst Example = () => {\n\treturn (\n\t\t<div style={ { position: 'relative' } }>\n\t\t\t<ResizeTooltip />\n\t\t\t...\n\t\t</div>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Installing E2E Test Utils - bash\nDESCRIPTION: This snippet shows the command to install the E2E test utilities for WordPress using npm. It must be installed in a development environment with Node.js in a long-term support version.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/e2e-test-utils-playwright/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @wordpress/e2e-test-utils-playwright --save-dev\n```\n\n----------------------------------------\n\nTITLE: Creating New Post - JavaScript\nDESCRIPTION: Creates a new post in the WordPress editor using specified details such as title, content, and type. This function is essential for generating posts during testing.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/e2e-test-utils/README.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nasync function createNewPost(object) {\n    // logic to create a new post\n}\n```\n\n----------------------------------------\n\nTITLE: Format of Extracted Strings JSON for Gutenberg React Native\nDESCRIPTION: JSON structure showing the format of extracted strings from the React Native editor, containing string values, comments, file references, and platform information.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/react-native/internationalization-guide.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n {\n\t\"gutenberg\": {\n\t  \"<string>\": {\n\t    \"string\": String value.\n\t\t\"stringPlural\": String value with its plural form. [optional]\n\t\t\"comments\": Comments for translators. [default value is an empty string]\n\t\t\"reference\": Array containing the paths of the source files that reference the string.\n\t\t\"platforms\": Array containing the platforms where the string is being used, values are \"android\" | \"ios\" | \"web\".\n\t  },\n\t  ...\n\t},\n\t\"other-domain-plugin\": {\n\t  ...\n\t},\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Installing WordPress Date Module with npm\nDESCRIPTION: This command installs the @wordpress/date module as a dependency in your project using npm. The --save flag ensures that the package is added to your project's package.json file.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/date/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n```bash\nnpm install @wordpress/date --save\n```\n```\n\n----------------------------------------\n\nTITLE: Updating Height for InputControl and SelectControl - JavaScript\nDESCRIPTION: This enhancement updates the default dimensions of the InputControl and SelectControl components' heights to 32px, aligning with modern UI design standards.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/CHANGELOG.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nInputControl/SelectControl: update `height`/`min-height` to `32px` instead of `30px` to align with modern sizing scale ([#55490](https://github.com/WordPress/gutenberg/pull/55490)).\n```\n\n----------------------------------------\n\nTITLE: HTML Representation of Image Block\nDESCRIPTION: Demonstrates how an image block is serialized to HTML, using HTML comments as delimiters to mark the beginning and end of the block.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/platform-docs/docs/basic-concepts/data.md#2025-04-21_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"source.jpg\" alt=\"\" /></figure>\n<!-- /wp:image -->\n```\n\n----------------------------------------\n\nTITLE: List View Breaking Change\nDESCRIPTION: The `showOnlyCurrentHierarchy` flag in the List View component is no longer supported. To display a subset of blocks, the `blocks` parameter should be used instead. This change impacts how developers filter and display blocks within the list view.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/CHANGELOG.md#2025-04-21_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Installing CocoaPods with System Ruby\nDESCRIPTION: Command to install CocoaPods using system Ruby on macOS.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/react-native/osx-setup-guide.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nsudo gem install cocoapods\n```\n\n----------------------------------------\n\nTITLE: Installing WordPress HTML Entities Package\nDESCRIPTION: Command to install the @wordpress/html-entities package using npm package manager.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/html-entities/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @wordpress/html-entities --save\n```\n\n----------------------------------------\n\nTITLE: Dependency Updates for ESLint and Jest - JavaScript\nDESCRIPTION: The file details updates to the bundled versions of `eslint` and `jest`, improving compatibility and reliability by requiring newer versions than previously specified. Users are advised to check migration guides for potential breaking changes.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/scripts/CHANGELOG.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nnpm install eslint@^5.16.0 jest@^24.1.0\n```\n\n----------------------------------------\n\nTITLE: Installing WordPress Block Library Package\nDESCRIPTION: Command to install the @wordpress/block-library package via npm\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-library/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @wordpress/block-library --save\n```\n\n----------------------------------------\n\nTITLE: Correct Global Flag Usage - Negation\nDESCRIPTION: Shows correct usage of negated IS_GUTENBERG_PLUGIN check\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/eslint-plugin/docs/rules/wp-global-usage.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nif ( ! globalThis.IS_GUTENBERG_PLUGIN ) {\n\treturn;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Package.json Template for WordPress Packages\nDESCRIPTION: Template for package.json configuration when creating a new WordPress package. It includes required fields for npm publishing, WordPress script integration, and proper metadata. The template supports both traditional scripts and module exports.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n\t\"name\": \"@wordpress/package-name\",\n\t\"version\": \"1.0.0-prerelease\",\n\t\"description\": \"Package description.\",\n\t\"author\": \"The WordPress Contributors\",\n\t\"license\": \"GPL-2.0-or-later\",\n\t\"keywords\": [ \"wordpress\" ],\n\t\"homepage\": \"https://github.com/WordPress/gutenberg/tree/HEAD/packages/package-name/README.md\",\n\t\"repository\": {\n\t\t\"type\": \"git\",\n\t\t\"url\": \"https://github.com/WordPress/gutenberg.git\",\n\t\t\"directory\": \"packages/package-name\"\n\t},\n\t\"bugs\": {\n\t\t\"url\": \"https://github.com/WordPress/gutenberg/issues\"\n\t},\n\t\"engines\": {\n\t\t\"node\": \">=18.12.0\",\n\t\t\"npm\": \">=8.19.2\"\n\t},\n\t\"main\": \"build/index.js\",\n\t\"module\": \"build-module/index.js\",\n\t\"react-native\": \"src/index\",\n\t// Include this line to include the package as a WordPress script.\n\t\"wpScript\": true,\n\t// Include this line to include the package as a WordPress script module.\n\t\"wpScriptModuleExports\": \"./build-module/index.js\",\n\t\"types\": \"build-types\",\n\t\"sideEffects\": false,\n\t\"dependencies\": {\n\t\t\"@babel/runtime\": \"7.25.7\"\n\t},\n\t\"publishConfig\": {\n\t\t\"access\": \"public\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Template Editor Access in PHP\nDESCRIPTION: PHP function to remove access to the Template Editor in both Classic and Block themes.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/curating-the-editor-experience/disable-editor-functionality.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nfunction example_theme_support() {\n\tremove_theme_support( 'block-templates');\n}\nadd_action( 'after_setup_theme', 'example_theme_support' );\n```\n\n----------------------------------------\n\nTITLE: Block Editor Default Styles Removal\nDESCRIPTION: The block editor no longer contains default colors, gradients, and font sizes. To utilize these features, developers must explicitly pass colors, gradients, and/or settings or use the new `__experimentalFeatures` setting. This provides greater control over styling, but requires more explicit configuration.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/CHANGELOG.md#2025-04-21_snippet_7\n\n\n\n----------------------------------------\n\nTITLE: Store Configuration for wp-class Example\nDESCRIPTION: JavaScript snippet showing how to configure a store for handling toggle selection actions using the wp-class directive. The context state is updated to manage class toggling dynamically.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/api-reference.md#2025-04-21_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nstore( 'myPlugin', {\n\tactions: {\n\t\ttoggleSelection: () => {\n\t\t\tconst context = getContext();\n\t\t\tcontext.isSelected = ! context.isSelected;\n\t\t},\n\t},\n} );\n```\n\n----------------------------------------\n\nTITLE: TypeScript Migration Changelog Entry\nDESCRIPTION: Changelog entry documenting the package rewrite in TypeScript with exported utility functions.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/media-utils/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 5.8.0 (2024-09-19)\n\n### New Features\n\n-   Rewrite in TypeScript, exporting all the individual utility functions.\n```\n\n----------------------------------------\n\nTITLE: Decoding HTML Entities in JavaScript\nDESCRIPTION: Example usage of the decodeEntities function to convert HTML entities into their corresponding characters. Takes an HTML string containing entities as input and returns the decoded string.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/html-entities/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { decodeEntities } from '@wordpress/html-entities';\n\nconst result = decodeEntities( '&aacute;' );\nconsole.log( result ); // result will be \"á\"\n```\n\n----------------------------------------\n\nTITLE: Form Configuration Example\nDESCRIPTION: Example showing how to configure form layout and field organization.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/dataviews/README.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst form = {\n\ttype: 'panel',\n\tfields: [\n\t\t'title',\n\t\t'data',\n\t\t{\n\t\t\tid: 'status',\n\t\t\tlabel: 'Status & Visibility',\n\t\t\tchildren: [ 'status', 'password' ],\n\t\t},\n\t\t{\n\t\t\tid: 'featured_media',\n\t\t\tlayout: 'regular',\n\t\t},\n\t],\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Derived State in JavaScript for WordPress Gutenberg Interactivity API\nDESCRIPTION: This code demonstrates how to define derived state properties in a store, which compute values based on other state properties in the WordPress Gutenberg Interactivity API.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/api-reference.md#2025-04-21_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nconst { state } = store( 'myPlugin', {\n\tstate: {\n\t\tamount: 34,\n\t\tdefaultCurrency: 'EUR',\n\t\tcurrencyExchange: {\n\t\t\tUSD: 1.1,\n\t\t\tGBP: 0.85,\n\t\t},\n\t\tget amountInUSD() {\n\t\t\treturn state.currencyExchange[ 'USD' ] * state.amount;\n\t\t},\n\t\tget amountInGBP() {\n\t\t\treturn state.currencyExchange[ 'GBP' ] * state.amount;\n\t\t},\n\t},\n} );\n```\n\n----------------------------------------\n\nTITLE: Displaying Contributor Guide Sections in Markdown\nDESCRIPTION: This snippet lists the different sections of the Contributor Guide using Markdown formatting. It includes links to specific documentation for code, design, documentation, triage support, and internationalization contributions.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n-   **Code?** See the [developer section](/docs/contributors/code/README.md).\n\n-   **Design?** See the [design section](/docs/contributors/design/README.md).\n\n-   **Documentation?** See the [documentation section](/docs/contributors/documentation/README.md)\n\n-   **Triage Support?** See the [triaging issues section](/docs/contributors/triage.md)\n\n-   **Internationalization?** See the [localizing and translating section](/docs/contributors/localizing.md)\n```\n\n----------------------------------------\n\nTITLE: Linting Stylesheets with wp-scripts\nDESCRIPTION: This snippet demonstrates configuring the `lint-style` script in `package.json` to enforce coding style guidelines for stylesheets using `wp-scripts` and stylelint. Examples are provided for linting all CSS, PCSS, and SCSS files, and for linting only CSS files in a source directory.  The scripts are invoked using `npm run lint:style` and `npm run lint:css:src`.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/scripts/README.md#2025-04-21_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"scripts\": {\n\t\t\"lint:style\": \"wp-scripts lint-style\",\n\t\t\"lint:css:src\": \"wp-scripts lint-style 'src/**/*.css'\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Keyboard Shortcuts Example in Markdown\nDESCRIPTION: Demonstrates keyboard shortcut notation for accessing the Gutenberg help modal on different operating systems\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/getting-started/faq.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<kbd>Shift</kbd>+<kbd>Alt</kbd>+<kbd>H</kbd> on Linux/Windows and <kbd>⌃</kbd><kbd>⌥</kbd><kbd>H</kbd> on macOS\n```\n\n----------------------------------------\n\nTITLE: Breaking Change Increasing Minimum Node.js Version Requirement\nDESCRIPTION: Documentation of a breaking change that increases the minimum required Node.js version to v18.12.0 to align with long-term support releases.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/widgets/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n-   Increase the minimum required Node.js version to v18.12.0 matching long-term support releases ([#31270](https://github.com/WordPress/gutenberg/pull/61930)). Learn more about [Node.js releases](https://nodejs.org/en/about/previous-releases).\n```\n\n----------------------------------------\n\nTITLE: Importing Meta Component from Storybook in JavaScript\nDESCRIPTION: This code snippet imports the Meta component from the Storybook blocks package. It's used to set metadata for the Storybook documentation.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/button/stories/best-practices.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Meta } from '@storybook/blocks';\n```\n\n----------------------------------------\n\nTITLE: Cloning Gutenberg Repository\nDESCRIPTION: Command to clone the Gutenberg repository from GitHub using SSH.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/react-native/osx-setup-guide.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone git@github.com:WordPress/gutenberg.git\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation for WordPress Figma Resources\nDESCRIPTION: Markdown documentation containing instructions and resources for using Figma in WordPress design, including links to tutorials, guides, and steps for enabling WordPress component libraries.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/explanations/user-interface/design-resources.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Resources\n\n## Figma\n\nThe [WordPress Design team](https://make.wordpress.org/design/) uses [Figma](https://www.figma.com/) to collaborate and share work. If you'd like to contribute, you can use [the WordPress Figma design library](https://make.wordpress.org/design/handbook/get-involved/tools-figma/) to make mockups. You can also join the [#design channel](https://app.slack.com/client/T024MFP4J/C02S78ZAL) in [Slack](https://make.wordpress.org/chat/) and if you'd like to ask for advice or otherwise. Figma accounts are free, and with one you can use components from the shared libraries, or duplicate files to your draft if you need to make edits. Full edit access to the WordPress libraries is paid and reserved for the design team.\n\n### How to contribute\n\n### Resources for learning how to use Figma\n\n[Getting started with Figma](https://help.figma.com/category/9-getting-started)\n\n[Top Online Tutorials to Learn Figma for UI/UX Design](https://medium.com/quick-design/top-online-tutorials-to-learn-figma-for-ui-ux-design-4e9c6721a72d)\n\n[Take a Tour Around Figma](https://help.figma.com/article/12-getting-familiar-with-figma)\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Plugin-Only Feature in JavaScript\nDESCRIPTION: Shows how to safely import and use a plugin-only feature by checking the globalThis.IS_GUTENBERG_PLUGIN flag before execution.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/feature-flags.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { pluginOnlyFeature } from '@wordpress/foo';\n\nif ( globalThis.IS_GUTENBERG_PLUGIN ) {\n\tpluginOnlyFeature();\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Badge Component in WordPress Gutenberg with JSX\nDESCRIPTION: This snippet demonstrates how to wrap a View component with a Badge component that displays 'Hello World!' text. The badge can be conditionally displayed using the optional 'show' prop.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/mobile/badge/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nreturn\n<Badge label={ __( 'Hello World!' ) } show={ optionalBoolean }/>\n    <View></View>\n</Badge>;\n```\n\n----------------------------------------\n\nTITLE: SVG Import and Usage in React Component\nDESCRIPTION: Example showing how to import and use SVG files both as URLs and React components.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/scripts/README.md#2025-04-21_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nimport starUrl, { ReactComponent as Star } from './star.svg';\n\nconst App = () => (\n\t<div>\n\t\t<img src={ starUrl } alt=\"star\" />\n\t\t<Star />\n\t</div>\n);\n```\n\n----------------------------------------\n\nTITLE: getInserterItems Selector Update\nDESCRIPTION: The `utility` property was removed from the objects returned by the `getInserterItems` selector. This change may impact code that relies on this property, requiring developers to find alternative ways to access the information previously provided by the `utility` property.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/CHANGELOG.md#2025-04-21_snippet_9\n\n\n\n----------------------------------------\n\nTITLE: Defining Previous Page Link - Gutenberg (Markdown)\nDESCRIPTION: This snippet defines a block for displaying the link to the previous page in pagination, with attributes for link styling.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/core-blocks.md#2025-04-21_snippet_19\n\nLANGUAGE: markdown\nCODE:\n```\n- **Name:** core/query-pagination-previous\n- **Category:** theme\n- **Parent:** core/query-pagination\n- **Supports:** color (background, gradients, ~~text~~), interactivity (clientNavigation), typography (fontSize, lineHeight), ~~html~~, ~~reusable~~\n- **Attributes:** label\n```\n\n----------------------------------------\n\nTITLE: Handling WordPress Script Dependencies\nDESCRIPTION: Each webpack entry point generates an asset file that lists WordPress script dependencies to enqueue. This ensures automated management of external scripts without manual intervention.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/dependency-extraction-webpack-plugin/README.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php return array('dependencies' => array('react'), 'version' => 'dd4c2dc50d046ed9d4c063a7ca95702f');\n```\n\n----------------------------------------\n\nTITLE: VSCode E2E Test Debugging Configuration\nDESCRIPTION: JSON configuration for setting up VSCode debugger to run and debug E2E tests with Jest\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/e2e-tests/README.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"type\": \"node\",\n\t\"request\": \"launch\",\n\t\"name\": \"Debug current e2e test\",\n\t\"program\": \"${workspaceFolder}/node_modules/@wordpress/scripts/bin/wp-scripts.js\",\n\t\"args\": [\n\t\t\"test-e2e\",\n\t\t\"--config=${workspaceFolder}/packages/e2e-tests/jest.config.js\",\n\t\t\"--verbose=true\",\n\t\t\"--runInBand\",\n\t\t\"--watch\",\n\t\t\"${file}\"\n\t],\n\t\"console\": \"integratedTerminal\",\n\t\"internalConsoleOptions\": \"neverOpen\",\n\t\"trace\": \"all\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example for Running on iPhone Xs Max Simulator\nDESCRIPTION: Specific example of how to run the app on an iPhone Xs Max simulator.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/react-native/getting-started-react-native.md#2025-04-21_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nnpm run native ios -- -- --simulator=\"iPhone Xs Max\"\n```\n\n----------------------------------------\n\nTITLE: Defining Comments Link - Gutenberg (Markdown)\nDESCRIPTION: This snippet defines the block that displays a link to the current post comments. It supports various attributes for color, typography, and interactivity.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/core-blocks.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n- **Name:** core/post-comments-link\n- **Category:** theme\n- **Supports:** color (background, link, ~~text~~), interactivity (clientNavigation), spacing (margin, padding), typography (fontSize, lineHeight), ~~html~~\n- **Attributes:** textAlign\n```\n\n----------------------------------------\n\nTITLE: Highlighting Words in Text Component\nDESCRIPTION: Shows how to highlight specific words or letter combinations within text content using the highlightWords prop, which accepts an array of search terms.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/text/README.md#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { __experimentalText as Text } from '@wordpress/components';\n\nfunction Example() {\n\treturn (\n\t\t<Text highlightWords={ [ 'pi' ] }>\n\t\t\tLorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc ex\n\t\t\tneque, vulputate a diam et, luctus convallis lacus. Vestibulum ac\n\t\t\tmollis mi. Morbi id elementum massa. Suspendisse interdum auctor\n\t\t\tligula eget cursus. In fermentum ultricies mauris, pharetra\n\t\t\tfermentum erat pellentesque id.\n\t\t</Text>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Documentation\nDESCRIPTION: Changelog for WordPress Gutenberg project tracking version history from 1.0.0 to 7.22.0, documenting breaking changes, dependency updates, and version requirements for Node.js, Jest, and Puppeteer.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/jest-puppeteer-axe/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- Learn how to maintain this file at https://github.com/WordPress/gutenberg/tree/HEAD/packages#maintaining-changelogs. -->\n\n## Unreleased\n\n## 7.22.0 (2025-04-11)\n\n## 7.21.0 (2025-03-27)\n\n## 7.20.0 (2025-03-13)\n\n[...]\n\n### Breaking Changes\n\n-   Increase the minimum required Node.js version to v18.12.0 matching long-term support releases ([#31270](https://github.com/WordPress/gutenberg/pull/61930))\n\n[...]\n\n### Breaking Changes\n\n-   Started requiring Jest v29 instead of v27 as a peer dependency.\n\n[...]\n\n### Breaking Changes\n\n-   Migrated `axe-puppeteer` to its new package [@axe-core/puppeteer](https://github.com/dequelabs/axe-core-npm/tree/develop/packages/puppeteer)\n```\n\n----------------------------------------\n\nTITLE: Creating Spacer Block in HTML - WordPress Gutenberg\nDESCRIPTION: This snippet creates a spacer block that adds a vertical space of 100 pixels in the WordPress Gutenberg editor. The block is marked with 'aria-hidden' to ensure it is not read by screen readers, enhancing accessibility. It can be used multiple times to create consistent spacing in layout design.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/test/e2e/specs/editor/various/__snapshots__/Copy-cut-paste-should-copy-blocks-when-non-textual-elements-are-focused-image-spacer-2-chromium.txt#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- wp:spacer -->\n<div style=\"height:100px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n```\n\n----------------------------------------\n\nTITLE: Theme JSON Dynamic Schema URL Pattern\nDESCRIPTION: Dynamic URL pattern for retrieving theme.json schemas for different WordPress versions\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/theme-json-reference/theme-json-v1.md#2025-04-21_snippet_1\n\nLANGUAGE: URL Template\nCODE:\n```\nhttps://schemas.wp.org/wp/{{version}}/theme.json\n```\n\n----------------------------------------\n\nTITLE: Installing WordPress Keycodes Package\nDESCRIPTION: Command to install the @wordpress/keycodes package using npm package manager.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/keycodes/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @wordpress/keycodes --save\n```\n\n----------------------------------------\n\nTITLE: Installing WordPress Commands Package\nDESCRIPTION: npm installation command for the @wordpress/commands package\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/commands/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @wordpress/commands --save\n```\n\n----------------------------------------\n\nTITLE: Documenting Generic Types in TypeScript for WordPress Gutenberg\nDESCRIPTION: Examples of properly documenting generic types such as Object, Function, and Promise in TypeScript, including the use of Record types and function type annotations.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/coding-guidelines.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n// Bad:\n\n/** @type {Object} */\n/** @type {Function} */\n/** @type {Promise} */\n\n// Good:\n\n/** @type {Record<string,number>} */ /* or */ /** @type {{[setting:string]:any}} */\n/** @type {(key:string)=>boolean} */\n/** @type {Promise<string>} */\n```\n\n----------------------------------------\n\nTITLE: Documenting Breaking Changes in Markdown\nDESCRIPTION: This section documents a breaking change in version 1.0.0, which increases the minimum required Node.js version. It includes a link to the related GitHub pull request and additional information about Node.js releases.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/sync/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n### Breaking Changes\n\n-   Increase the minimum required Node.js version to v18.12.0 matching long-term support releases ([#31270](https://github.com/WordPress/gutenberg/pull/61930)). Learn more about [Node.js releases](https://nodejs.org/en/about/previous-releases).\n```\n\n----------------------------------------\n\nTITLE: Asserting Element Visibility and HTML Output\nDESCRIPTION: These snippets show how to assert element visibility and verify HTML output in React Native integration tests.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/react-native/integration-test-guide.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst translatedTableTitle = within( missingBlock ).getByText( 'Tabla' );\nexpect( translatedTableTitle ).toBeVisible();\n\nexpect( getEditorHtml() ).toBe(\n\t'<!-- wp:spacer {\"height\":50} -->\\n<div style=\"height:50px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\\n<!-- /wp:spacer -->'\n);\n```\n\n----------------------------------------\n\nTITLE: Correct Implementation of Translatable Strings in JavaScript\nDESCRIPTION: This snippet shows the correct usage of the __() function with a translatable string that properly mixes text and placeholders, ensuring the string is translatable. No external dependencies are required.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/eslint-plugin/docs/rules/i18n-no-placeholders-only.md#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n__( 'Hello %s' );\n```\n\n----------------------------------------\n\nTITLE: WordPress Admin Page Navigation Function\nDESCRIPTION: Function that handles navigation to WordPress admin pages, including automatic login if needed. Takes adminPath for the page path and query string parameters.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/e2e-test-utils/README.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nvisitAdminPage( adminPath, query )\n```\n\n----------------------------------------\n\nTITLE: Package Installation Command\nDESCRIPTION: NPM command to install the @wordpress/interactivity-router package.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/interactivity-router/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @wordpress/interactivity-router --save\n```\n\n----------------------------------------\n\nTITLE: Naming Strategies for New Components\nDESCRIPTION: This section discusses strategies for naming new components, advocating for either new names reflecting UI changes or versioned names to distinguish from legacy counterparts. This promotes clearer progression and understanding for developers working within the Gutenberg package.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/CONTRIBUTING.md#2025-04-21_snippet_14\n\nLANGUAGE: markdown\nCODE:\n```\n##### Naming\n\nWhen it comes to naming the newly added component, there are two options.\n\nIf there is a good reason for it, pick a new name for the component. For example, some legacy components have names that don't correspond to the current name of UI widget that they implement (for example, `TabPanel` should be called `Tabs`, and `Modal` should be called `Dialog`).\n\nAlternatively, version the component name. For example, the new version of `Component` could be called `ComponentV2`. This also applies for namespaced subcomponents (ie. `ComponentV2.SubComponent`).\n```\n\n----------------------------------------\n\nTITLE: Default Viewport Configuration\nDESCRIPTION: Default configuration object for viewport settings used in ResponsiveBlockControl\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/src/components/responsive-block-control/README.md#2025-04-21_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n[\n\t{\n\t\tid: 'small',\n\t\tlabel: 'Small screens',\n\t},\n\t{\n\t\tid: 'medium',\n\t\tlabel: 'Medium screens',\n\t},\n\t{\n\t\tid: 'large',\n\t\tlabel: 'Large screens',\n\t},\n];\n```\n\n----------------------------------------\n\nTITLE: Targeting Default/Flow Layout Blocks in CSS\nDESCRIPTION: This CSS selector targets blocks that use the Default/Flow layout type. It uses a semantic class name output by the Layout block support.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/explanations/architecture/styles.md#2025-04-21_snippet_10\n\nLANGUAGE: css\nCODE:\n```\n.is-layout-flow {\n  /* styles here */\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Legacy Widget Block in Other Editors\nDESCRIPTION: This PHP snippet demonstrates how to register the Legacy Widget block for use in other block editors by enqueuing the necessary script and calling the registration function.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/widgets/legacy-widget-block.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nadd_action( 'enqueue_block_editor_assets', function() {\n\twp_enqueue_script( 'wp-widgets' );\n\twp_add_inline_script( 'wp-widgets', 'wp.widgets.registerLegacyWidgetBlock()' );\n} );\n```\n\n----------------------------------------\n\nTITLE: Using WordPress Block Parser\nDESCRIPTION: Example showing how to import and use the parse function from the block serialization parser to parse WordPress blocks. The example demonstrates parsing a 'more' block and shows the expected output structure.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-serialization-spec-parser/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { parse } from '@wordpress/block-serialization-spec-parser';\n\nparse( '<!-- wp:core/more --><!--more--><!-- /wp:core/more -->' );\n// [{\"attrs\": null, \"blockName\": \"core/more\", \"innerBlocks\": [], \"innerHTML\": \"<!--more-->\"}]\n```\n\n----------------------------------------\n\nTITLE: Creating a Standalone Paragraph Block in WordPress Gutenberg\nDESCRIPTION: This HTML markup creates a standalone paragraph block in WordPress Gutenberg with the content '2'. The markup includes the comment blocks that WordPress uses to identify and render the paragraph block.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/test/e2e/specs/editor/blocks/__snapshots__/Group-can-merge-into-group-with-Backspace-1-chromium.txt#2025-04-21_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- wp:paragraph -->\n<p>2</p>\n<!-- /wp:paragraph -->\n```\n\n----------------------------------------\n\nTITLE: Installing WordPress Media Utils Package\nDESCRIPTION: Commands for installing the @wordpress/media-utils package via npm. This package requires an ES2015+ environment.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/media-utils/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @wordpress/media-utils --save\n```\n\n----------------------------------------\n\nTITLE: Code Snippet: Demonstrating wp-env Usage\nDESCRIPTION: This code snippet shows an example of using wp-env, which is mentioned in the guide as the recommended tool for setting up a local WordPress environment for Gutenberg development.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/getting-started/devenv/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<div class=\"callout callout-info\">\n    Throughout the Handbook, you may also see references to <code><a href=\"https://github.com/WordPress/playground-tools/tree/trunk/packages/wp-now\">wp-now</a></code>. This is a lightweight tool powered by <a hre=\"https://developer.wordpress.org/playground/\">WordPress Playground</a> that streamlines setting up a simple local WordPress environment. While still experimental, this tool is great for quickly testing WordPress releases, plugins, and themes. \n</div>\n```\n\n----------------------------------------\n\nTITLE: Toggling Plugin Item in WordPress Gutenberg (JavaScript)\nDESCRIPTION: This function triggers an action object used to toggle a plugin name flag. It takes a single parameter 'pluginName' which is a string representing the name of the plugin.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core-edit-post.md#2025-04-21_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\ntogglePinnedPluginItem( pluginName )\n```\n\n----------------------------------------\n\nTITLE: Implementing Interactive Elements with Imperative JavaScript\nDESCRIPTION: This example demonstrates the traditional imperative approach to web interactivity. It shows two buttons that control paragraph visibility and styling, directly manipulating the DOM through JavaScript event listeners and element properties.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/core-concepts/the-reactive-and-declarative-mindset.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"my-interactive-plugin\">\n\t<button\n\t\tid=\"show-hide-btn\"\n\t\taria-expanded=\"false\"\n\t\taria-controls=\"status-paragraph\"\n\t>\n\t\tshow\n\t</button>\n\t<button id=\"activate-btn\" disabled>activate</button>\n\t<p id=\"status-paragraph\" class=\"inactive\" hidden>this is inactive</p>\n</div>\n\n<style>\n\t.active {\n\t\tcolor: green;\n\t}\n\t.inactive {\n\t\tcolor: red;\n\t}\n</style>\n\n<script>\n\tconst showHideBtn = document.getElementById( 'show-hide-btn' );\n\tconst activateBtn = document.getElementById( 'activate-btn' );\n\tconst statusParagraph = document.getElementById( 'status-paragraph' );\n\n\tshowHideBtn.addEventListener( 'click', () => {\n\t\tif ( statusParagraph.hasAttribute( 'hidden' ) ) {\n\t\t\tstatusParagraph.removeAttribute( 'hidden' );\n\t\t\tshowHideBtn.textContent = 'hide';\n\t\t\tshowHideBtn.setAttribute( 'aria-expanded', 'true' );\n\t\t\tactivateBtn.removeAttribute( 'disabled' );\n\t\t} else {\n\t\t\tif ( statusParagraph.classList.contains( 'active' ) ) {\n\t\t\t\tstatusParagraph.textContent = 'this is inactive';\n\t\t\t\tstatusParagraph.classList.remove( 'active' );\n\t\t\t\tactivateBtn.textContent = 'activate';\n\t\t\t}\n\t\t\tstatusParagraph.setAttribute( 'hidden', true );\n\t\t\tshowHideBtn.textContent = 'show';\n\t\t\tshowHideBtn.setAttribute( 'aria-expanded', 'false' );\n\t\t\tactivateBtn.setAttribute( 'disabled', true );\n\t\t}\n\t} );\n\n\tactivateBtn.addEventListener( 'click', () => {\n\t\tif ( activateBtn.textContent === 'activate' ) {\n\t\t\tstatusParagraph.textContent = 'this is active';\n\t\t\tstatusParagraph.classList.remove( 'inactive' );\n\t\t\tstatusParagraph.classList.add( 'active' );\n\t\t\tactivateBtn.textContent = 'deactivate';\n\t\t} else {\n\t\t\tstatusParagraph.textContent = 'this is inactive';\n\t\t\tstatusParagraph.classList.remove( 'active' );\n\t\t\tstatusParagraph.classList.add( 'inactive' );\n\t\t\tactivateBtn.textContent = 'activate';\n\t\t}\n\t} );\n</script>\n```\n\n----------------------------------------\n\nTITLE: Internet Explorer 11 Support Removal\nDESCRIPTION: Support for Internet Explorer 11 has been dropped. This change impacts users who rely on older browsers and necessitates either upgrading their browser or accepting that certain Gutenberg features may not function as intended.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/CHANGELOG.md#2025-04-21_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Breaking Change for React 17 Upgrade\nDESCRIPTION: Documentation of upgrading React components to work with v17.0, noting there are no new features in this React version as explained in the linked blog post.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/widgets/CHANGELOG.md#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n-   Upgraded React components to work with v17.0 ([#29118](https://github.com/WordPress/gutenberg/pull/29118)). There are no new features in React v17.0 as explained in the [blog post](https://reactjs.org/blog/2020/10/20/react-v17.html).\n```\n\n----------------------------------------\n\nTITLE: Upgrade redux dependency to version 5.0.1\nDESCRIPTION: This snippet notes the enhancement to upgrade the redux dependency to version ^5.0.1 as part of the 10.12.0 release in the Gutenberg project.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/data/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n-   Upgrade `redux` dependency to `^5.0.1` ([#66966](https://github.com/WordPress/gutenberg/pull/66966))\n```\n\n----------------------------------------\n\nTITLE: Committing Changes\nDESCRIPTION: Command to commit your changes with a descriptive message.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/git-workflow.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit commit -m \"Your Good Commit Message\" path/to/FILE\n```\n\n----------------------------------------\n\nTITLE: Paragraph Block Markup in Gutenberg\nDESCRIPTION: Defines a paragraph block in Gutenberg, containing placeholder text. This snippet illustrates the basic structure of a Gutenberg block using HTML comments to delineate the block's boundaries.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/test/e2e/specs/editor/various/__snapshots__/Inserting-blocks-firefox-webkit-inserts-p-59603-ragging-and-dropping-from-the-global-inserter-1-webkit.txt#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- wp:paragraph -->\n<p>Dummy text</p>\n<!-- /wp:paragraph -->\n```\n\n----------------------------------------\n\nTITLE: Implementing Format Toggle Functionality\nDESCRIPTION: Enhanced toolbar button implementation that applies the format to selected text using toggleFormat method.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/format-api.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { registerFormatType, toggleFormat } from '@wordpress/rich-text';\nimport { RichTextToolbarButton } from '@wordpress/block-editor';\n\nconst MyCustomButton = ( { isActive, onChange, value } ) => {\n\treturn (\n\t\t<RichTextToolbarButton\n\t\t\ticon=\"editor-code\"\n\t\t\ttitle=\"Sample output\"\n\t\t\tonClick={ () => {\n\t\t\t\tonChange(\n\t\t\t\t\ttoggleFormat( value, {\n\t\t\t\t\t\ttype: 'my-custom-format/sample-output',\n\t\t\t\t\t} )\n\t\t\t\t);\n\t\t\t} }\n\t\t\tisActive={ isActive }\n\t\t/>\n\t);\n};\n\nregisterFormatType( 'my-custom-format/sample-output', {\n\ttitle: 'Sample output',\n\ttagName: 'samp',\n\tclassName: null,\n\tedit: MyCustomButton,\n} );\n```\n\n----------------------------------------\n\nTITLE: Running iOS Demo App\nDESCRIPTION: Command to run the iOS demo app in the simulator.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/react-native/osx-setup-guide.md#2025-04-21_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nnpm run native ios\n```\n\n----------------------------------------\n\nTITLE: Global Variable Replacement\nDESCRIPTION: This snippet illustrates a breaking change in Gutenberg where environment variables are replaced by globalThis properties.  Build systems that rely on the older environment variables must be updated to use the new globalThis property. This change impacts how the Gutenberg plugin determines its environment during runtime.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/private-apis/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n\t\t\"Variables like `process.env.IS_GUTENBERG_PLUGIN` have been replaced by `globalThis.IS_GUTENBERG_PLUGIN`. Build systems using `process.env` should be updated ([#61486](https://github.com/WordPress/gutenberg/pull/61486)).\"\n```\n\n----------------------------------------\n\nTITLE: Package Installation and Benchmark Execution\nDESCRIPTION: Commands for installing and running the package benchmarks to compare performance with other implementations.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/is-shallow-equal/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/WordPress/gutenberg.git\nnpm install\nnpm run build:packages\nnode ./packages/is-shallow-equal/benchmark\n```\n\n----------------------------------------\n\nTITLE: Methodology for Component Updates\nDESCRIPTION: This section outlines the methodology for updating components, which includes maintaining comprehensive test coverage, working in temporary folders during development, and eventually transitioning to new implementations while deprecating legacy code.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/CONTRIBUTING.md#2025-04-21_snippet_15\n\nLANGUAGE: markdown\nCODE:\n```\n### Methodology\n\nRegardless of the chosen approach, we recommend adopting the following methodology:\n\n1. First, make sure that the legacy component is well covered by automated tests. Using those tests against the new implementation will serve as a great first layer to make sure that we don't break backward compatibility where necessary, and that we are otherwise aware of any differences in behavior;\n2. Create a new temporary folder, so that all the work can be done without affecting publicly exported APIs; make it explicit in the README, JSDocs and Storybook (by using badges) that the components are WIP and shouldn't be used outside of the components package;\n3. Once the first iteration of the new component(s) is complete, start testing it by exporting it via private APIs, and replacing usages of the legacy component across the Gutenberg repository. This process is great to gather more feedback, spot bugs and missing features;\n4. Once all usages are migrated, you can replace the legacy component with the new implementation, and delete the temporary folder and private exports. Don't forget to write a dev note when necessary.\n```\n\n----------------------------------------\n\nTITLE: TypeScript Inferred Store Types Example\nDESCRIPTION: Shows what TypeScript infers from a store definition, demonstrating how TypeScript automatically creates the correct types for state, actions, and callbacks.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/core-concepts/using-typescript.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst myStore: {\n\tstate: {\n\t\tcounter: number;\n\t};\n\tactions: {\n\t\tincrement(): void;\n\t};\n\tcallbacks: {\n\t\tlog(): void;\n\t};\n};\n```\n\n----------------------------------------\n\nTITLE: Anti-pattern for Class Exists Check with Return\nDESCRIPTION: Example of an incorrect pattern using a return statement with class_exists() that can cause unexpected side effects as it doesn't halt PHP script parsing.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/lib/README.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n/**\n * ANTI-PATTERN\n * DO NOT COPY!\n *\n */\nif ( class_exists( 'WP_A_Stable_Class' ) ) {\n\treturn; // do not do this.\n}\n```\n\n----------------------------------------\n\nTITLE: Installing WordPress Upload Media Module\nDESCRIPTION: Command to install the @wordpress/upload-media module using npm.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/upload-media/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @wordpress/upload-media --save\n```\n\n----------------------------------------\n\nTITLE: Adding wp-env Commands to package.json - JSON\nDESCRIPTION: This JSON snippet shows how to add wp-env commands to your project's scripts section in package.json, which allows running wp-env commands using npm.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/env/README.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n\t\"wp-env\": \"wp-env\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Docker Host Environment Variable for wp-env\nDESCRIPTION: Commands to set the DOCKER_HOST environment variable and start wp-env, which can resolve connection issues on Ubuntu.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/getting-started/devenv/get-started-with-wp-env.md#2025-04-21_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nexport DOCKER_HOST=tcp://127.0.0.1:2376\nwp-env start\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Environment Variables\nDESCRIPTION: Shell commands to set up environment variables for Android development, including JAVA_HOME and ANDROID_HOME.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/react-native/osx-setup-guide.md#2025-04-21_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\n### Java that comes with Android Studio:\nexport JAVA_HOME=/Applications/Android\\ Studio.app/Contents/jre/Contents/Home\n### Android Home is configurable in Android Studio. Go to Preferences > System Settings > Android SDK\nexport ANDROID_HOME=$HOME/Library/Android/sdk\nexport PATH=$PATH:$ANDROID_HOME/emulator\nexport PATH=$PATH:$ANDROID_HOME/tools\nexport PATH=$PATH:$ANDROID_HOME/tools/bin\nexport PATH=$PATH:$ANDROID_HOME/platform-tools\n```\n\n----------------------------------------\n\nTITLE: Referencing Local theme.json Schema for Development\nDESCRIPTION: Shows how to reference a local version of the theme.json schema during development. This allows developers to see how changes to the schema impact IDE behavior.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/schemas/README.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"$schema\": \"file://{{FULL_FILE_PATH}}/schemas/json/theme.json\"\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Package Scripts for Module Support\nDESCRIPTION: Modify package.json scripts to include experimental modules flag for proper building and starting of Script Modules.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/README.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"scripts\": {\n        \"build\": \"wp-scripts build --experimental-modules\",\n        \"start\": \"wp-scripts start --experimental-modules\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running E2E Tests with wp-env (Bash)\nDESCRIPTION: These commands show how to run end-to-end tests using wp-env in the Gutenberg project. They include options for running tests interactively, with browser observation, and with execution speed control.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/testing-overview.md#2025-04-21_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test:e2e\n\nnpm run test:e2e:watch\n\nnpm run test:e2e:watch -- --puppeteer-interactive\n\nnpm run test:e2e:watch -- --puppeteer-interactive --puppeteer-slowmo=200\n\nnpm run test:e2e:watch -- --puppeteer-devtools\n```\n\n----------------------------------------\n\nTITLE: Plugin Uninstallation Function for WordPress\nDESCRIPTION: Function to uninstall a WordPress plugin by its slug identifier.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/e2e-test-utils/README.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nuninstallPlugin( slug )\n```\n\n----------------------------------------\n\nTITLE: Using useEvent Hook in Gutenberg\nDESCRIPTION: This snippet illustrates the usage of the `useEvent` hook, which creates a stable callback function that maintains access to the latest state. This is particularly useful within event handlers and effect callbacks to prevent unnecessary re-renders and ensure that the correct props are being used.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/compose/README.md#2025-04-21_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Component( props ) {\n\tconst onClick = useEvent( props.onClick );\n\tuseEffect( () => {\n\t\tonClick();\n\t\t// Won't trigger the effect again when props.onClick is updated.\n\t}, [ onClick ] );\n\t// Won't re-render Button when props.onClick is updated (if `Button` is\n\t// wrapped in `React.memo`).\n\treturn <Button onClick={ onClick } />;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Incorrect Global Flag Usage - Variable Assignment\nDESCRIPTION: Shows incorrect assignment of global flag to a variable\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/eslint-plugin/docs/rules/wp-global-usage.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst isMyFeatureActive = globalThis.IS_GUTENBERG_PLUGIN;\n```\n\n----------------------------------------\n\nTITLE: Incorrect Variable Assignment Before Return in JavaScript\nDESCRIPTION: Example showing inefficient code where a costly operation result is assigned to a variable but not used before an early return statement, leading to potential performance issues.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/eslint-plugin/docs/rules/no-unused-vars-before-return.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction example( number ) {\n\tconst foo = doSomeCostlyOperation();\n\tif ( number > 10 ) {\n\t\treturn number + 1;\n\t}\n\n\treturn number + foo;\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Environment Variables in Gutenberg 7.0.0\nDESCRIPTION: Breaking change in how environment variables are referenced, replacing `process.env` with `globalThis`\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/plugins/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nglobalThis.IS_GUTENBERG_PLUGIN\n```\n\n----------------------------------------\n\nTITLE: Retrieving Post Rendering Mode in JavaScript\nDESCRIPTION: This function returns the post editor's rendering mode based on the current editor state.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core-editor.md#2025-04-21_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\ngetRenderingMode( state ) {\n    // Implementation not shown\n    return 'string'; // Rendering mode\n}\n```\n\n----------------------------------------\n\nTITLE: Refactoring Hooks to TypeScript\nDESCRIPTION: Several hooks such as `useDisabled`, `useFocusOutside`, and `useFocusableIframe` have been refactored to TypeScript to improve type safety, enhance maintainability, and facilitate better integration with modern tooling.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/compose/CHANGELOG.md#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n-   `useDisabled`: Refactor the component to rely on the HTML `inert` attribute ([#44865](https://github.com/WordPress/gutenberg/pull/44865)).\n-   `useFocusOutside`: Refactor the hook to TypeScript, rewrite tests using modern RTL and jest features ([#45317](https://github.com/WordPress/gutenberg/pull/45317)).\n-   `useFocusableIframe`: Refactor to TypeScript ([#45428](https://github.com/WordPress/gutenberg/pull/45428)).\n```\n\n----------------------------------------\n\nTITLE: Installing wp-env as a Local Package - Shell\nDESCRIPTION: This command installs the wp-env tool locally as a development dependency using npm, suitable for specific project requirements.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/env/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ npm i @wordpress/env --save-dev\n```\n\n----------------------------------------\n\nTITLE: Adding Inspector controls conditionally\nDESCRIPTION: This JavaScript snippet adds a new Inspector panel to all blocks, but only when a block is selected. It uses the block's \"selected\" state (`props.isSelected`) to conditionalize the rendering of the InspectorControls.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/filters/block-filters.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst withMyPluginControls = createHigherOrderComponent( ( BlockEdit ) => {\n\treturn ( props ) => {\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<BlockEdit { ...props } />\n\t\t\t\t{ props.isSelected && (\n\t\t\t\t\t<InspectorControls>\n\t\t\t\t\t\t<PanelBody>My custom control</PanelBody>\n\t\t\t\t\t</InspectorControls>\n\t\t\t\t) }\n\t\t\t</>\n\t\t);\n\t};\n}, 'withMyPluginControls' );\n\n```\n\n----------------------------------------\n\nTITLE: Setting Preview Container Width\nDESCRIPTION: Shows how to define the width of the preview container for a block example.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-registration.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nexample: {\n\tattributes: {\n\t\tcover: 'https://example.com/image.jpg',\n\t},\n\tviewportWidth: 800\n},\n```\n\n----------------------------------------\n\nTITLE: Incorrect sprintf Usage Examples in JavaScript\nDESCRIPTION: Examples demonstrating invalid usage of sprintf function that will trigger ESLint errors. Shows cases where format strings are missing, invalid, or have mismatched placeholders.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/eslint-plugin/docs/rules/valid-sprintf.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsprintf();\nsprintf( '%s' );\nsprintf( 1, 'substitute' );\nsprintf( [], 'substitute' );\nsprintf( '%%', 'substitute' );\nsprintf( __( '%%' ), 'substitute' );\nsprintf( _n( '%s', '' ), 'substitute' );\nsprintf( _n( '%s', '%s %s' ), 'substitute' );\n```\n\n----------------------------------------\n\nTITLE: Jest Version Update\nDESCRIPTION: This snippet describes a breaking change in Gutenberg v7.0.0, where Jest v29 became a required peer dependency instead of v27. This requires developers to update their Jest version and address any breaking changes introduced in Jest v28 and v29.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/e2e-tests/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: None\nCODE:\n```\nStarted requiring Jest v29 instead of v27 as a peer dependency. See [breaking changes in Jest 28](https://jestjs.io/blog/2022/04/25/jest-28) and [in jest 29](https://jestjs.io/blog/2022/08/25/jest-29) ([#47388](https://github.com/WordPress/gutenberg/pull/47388))\n```\n\n----------------------------------------\n\nTITLE: URLPopover Prop Passing\nDESCRIPTION: The `URLPopover` component now passes through all unhandled props to the underlying Popover component. This enhances the flexibility and configurability of the URLPopover component.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/CHANGELOG.md#2025-04-21_snippet_19\n\n\n\n----------------------------------------\n\nTITLE: Using ToolbarDropdownMenu inside BlockControls\nDESCRIPTION: This example demonstrates how to use the ToolbarDropdownMenu component within BlockControls for custom blocks. It imports necessary components from @wordpress/block-editor, @wordpress/components, and @wordpress/icons.  The Edit function renders BlockControls containing a ToolbarDropdownMenu with directional options, designed for block-specific actions.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/toolbar/toolbar-dropdown-menu/README.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { BlockControls } from '@wordpress/block-editor';\nimport { Toolbar, ToolbarDropdownMenu } from '@wordpress/components';\nimport {\n\tmore,\n\tarrowLeft,\n\tarrowRight,\n\tarrowUp,\n\tarrowDown,\n} from '@wordpress/icons';\n\nfunction Edit() {\n\treturn (\n\t\t<BlockControls group=\"block\">\n\t\t\t<ToolbarDropdownMenu\n\t\t\t\ticon={ more }\n\t\t\t\tlabel=\"Select a direction\"\n\t\t\t\tcontrols={ [\n\t\t\t\t\t{\n\t\t\t\t\t\ttitle: 'Up',\n\t\t\t\t\t\ticon: arrowUp,\n\t\t\t\t\t\tonClick: () => console.log( 'up' ),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttitle: 'Right',\n\t\t\t\t\t\ticon: arrowRight,\n\t\t\t\t\t\tonClick: () => console.log( 'right' ),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttitle: 'Down',\n\t\t\t\t\t\ticon: arrowDown,\n\t\t\t\t\t\tonClick: () => console.log( 'down' ),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttitle: 'Left',\n\t\t\t\t\t\ticon: arrowLeft,\n\t\t\t\t\t\tonClick: () => console.log( 'left' ),\n\t\t\t\t\t},\n\t\t\t\t] }\n\t\t\t/>\n\t\t</BlockControls>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Widgets Block Editor using a filter in PHP\nDESCRIPTION: This code snippet shows how to disable the Widgets Block Editor globally using the use_widgets_block_editor filter. It can be included in a mu-plugin.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/widgets/opting-out.md#2025-04-21_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nadd_filter( 'use_widgets_block_editor', '__return_false' );\n```\n\n----------------------------------------\n\nTITLE: Running E2E Tests with Custom WordPress URL\nDESCRIPTION: Command to run end-to-end tests against a custom WordPress installation using environment variables to specify the base URL.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/getting-started-with-code-contribution.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nWP_BASE_URL=http://localhost:8888/gutenberg/ npm run test:e2e\n```\n\n----------------------------------------\n\nTITLE: Spacer Block HTML\nDESCRIPTION: This HTML snippet defines a spacer block in Gutenberg. It uses a <div> element with inline styling to control the height of the spacer. The `aria-hidden` attribute is set to `true` for accessibility, and a CSS class `wp-block-spacer` is applied.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/test/e2e/specs/editor/various/__snapshots__/Copy-cut-paste-should-cut-paste-partial-selection-with-other-blocks-in-between-2-chromium.txt#2025-04-21_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n\"<!-- wp:spacer -->\\n<div style=\\\"height:100px\\\" aria-hidden=\\\"true\\\" class=\\\"wp-block-spacer\\\"></div>\\n<!-- /wp:spacer -->\"\n```\n\n----------------------------------------\n\nTITLE: Installing WordPress Browserslist Config\nDESCRIPTION: Command to install the WordPress Browserslist configuration package and its dependencies using npm.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/browserslist-config/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ npm install browserslist @wordpress/browserslist-config --save-dev\n```\n\n----------------------------------------\n\nTITLE: WordPress Block Template Enhancement History\nDESCRIPTION: Changelog documenting the evolution of the WordPress block template generator, including version changes, feature improvements, and compatibility updates\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/create-block-tutorial-template/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 4.7.0 (2024-09-05)\n\n### Enhancements\n\n-   Set the minimum supported WordPress version to 6.6 to make it work seamlessly with the latest version of `@wordpress/scripts` package\n```\n\nLANGUAGE: markdown\nCODE:\n```\n## 4.0.0 (2024-05-31)\n\n### Breaking Changes\n\n-   Increase the minimum required Node.js version to v18.12.0 matching long-term support releases\n```\n\n----------------------------------------\n\nTITLE: Displaying Markdown Image with Link in React\nDESCRIPTION: This code snippet demonstrates how to display an image with a link in Markdown format. It shows the finished app preview and links to a WordPress Playground demo.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/data-basics/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![Open demo in WordPress Playground](https://raw.githubusercontent.com/WordPress/gutenberg/HEAD/docs/how-to-guides/data-basics/media/list-of-pages/part1-finished.jpg)](https://playground.wordpress.net/?blueprint-url=https://raw.githubusercontent.com/WordPress/block-development-examples/trunk/plugins/data-basics-59c8f8/_playground/blueprint.json \"Opens demo in WordPress Playground\")\n```\n\n----------------------------------------\n\nTITLE: Incorrect WordPress Environment Variable Access using process.env\nDESCRIPTION: Demonstrates the deprecated method of accessing WordPress environment variables using process.env, which should be avoided.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/eslint-plugin/docs/rules/no-wp-process-env.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nprocess.env.SCRIPT_DEBUG;\n```\n\n----------------------------------------\n\nTITLE: Adding Opt-in Prop for Default Size - TextControl - JavaScript\nDESCRIPTION: This snippet introduces an optional property for the TextControl component, enabling a 40px default size to enhance visual consistency across the user interface.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nTextControl: Add opt-in prop for 40px default size ([#55471](https://github.com/WordPress/gutenberg/pull/55471)).\n```\n\n----------------------------------------\n\nTITLE: Correct Global Flag Usage - Direct Check\nDESCRIPTION: Demonstrates correct usage of IS_GUTENBERG_PLUGIN with globalThis\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/eslint-plugin/docs/rules/wp-global-usage.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nif ( globalThis.IS_GUTENBERG_PLUGIN ) {\n\t// implement feature here.\n}\n```\n\n----------------------------------------\n\nTITLE: Change implementation of combineReducers\nDESCRIPTION: This entry indicates the change in the combineReducers function's implementation, removing the use of eval, in the 9.13.0 release.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/data/CHANGELOG.md#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n-   Change implementation of `combineReducers` so that it doesn't use `eval` internally, and can run with a CSP policy that doesn't allow `unsafe-eval` ([#54606](https://github.com/WordPress/gutenberg/pull/54606)).\n```\n\n----------------------------------------\n\nTITLE: Importing and Displaying WordPress Component Contribution Guidelines in Storybook\nDESCRIPTION: This code imports Storybook block components and the raw content of the WordPress components' CONTRIBUTING.md file. It then sets up a Storybook documentation page that renders the contribution guidelines as formatted Markdown.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/storybook/stories/docs/components/contributing.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Meta, Markdown } from '@storybook/blocks';\nimport Contributing from '@wordpress/components/CONTRIBUTING.md?raw';\n\n<Meta title=\"Components/Contributing Guidelines\" />\n\n<Markdown>{Contributing}</Markdown>\n```\n\n----------------------------------------\n\nTITLE: Customizing Demo Editor with Initial HTML\nDESCRIPTION: JavaScript code for customizing the editor's initial state by creating a setup-local.js file that uses WordPress hooks to modify block editor properties.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/react-native/getting-started-react-native.md#2025-04-21_snippet_7\n\nLANGUAGE: js\nCODE:\n```\n/**\n * WordPress dependencies\n */\nimport { addFilter } from '@wordpress/hooks';\n\nexport default () => {\n\taddFilter(\n\t\t'native.block_editor_props',\n\t\t'core/react-native-editor',\n\t\t( props ) => {\n\t\t\treturn {\n\t\t\t\t...props,\n\t\t\t\tinitialHtml,\n\t\t\t};\n\t\t}\n\t);\n};\n\nconst initialHtml = `\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Just a Heading</h2>\n<!-- /wp:heading -->\n`;\n```\n\n----------------------------------------\n\nTITLE: Referencing Schema in block.json for WordPress\nDESCRIPTION: Shows how to include the schema reference in a block.json file. This enables code editors to offer tooltips, autocomplete, and validation based on WordPress standards.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/schemas/README.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"$schema\": \"https://schemas.wp.org/trunk/block.json\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing PostCSS Plugins Preset Using npm\nDESCRIPTION: This snippet installs the PostCSS plugins preset required for WordPress development. It requires Node.js with long-term support. The command adds the package to the project dependencies.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/postcss-plugins-preset/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @wordpress/postcss-plugins-preset --save\n```\n\n----------------------------------------\n\nTITLE: Retrieving Default Block Name in React Component\nDESCRIPTION: Illustrates the use of getDefaultBlockName selector to fetch the name of the default block. The component displays the default block name.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core-blocks.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { __, sprintf } from '@wordpress/i18n';\nimport { store as blocksStore } from '@wordpress/blocks';\nimport { useSelect } from '@wordpress/data';\n\nconst ExampleComponent = () => {\n\tconst defaultBlockName = useSelect(\n\t\t( select ) => select( blocksStore ).getDefaultBlockName(),\n\t\t[]\n\t);\n\n\treturn (\n\t\tdefaultBlockName && (\n\t\t\t<p>\n\t\t\t\t{ sprintf( __( 'Default block name: %s' ), defaultBlockName ) }\n\t\t\t</p>\n\t\t)\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Updating ActionItem.Slot Component Usage in JavaScript\nDESCRIPTION: Demonstrates the change in passing components to the ActionItem.Slot component. Instead of using a tuple with the 'as' prop, a single component should be passed.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/deprecations.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n<ActionItem.Slot\n\tname=\"my/slot\"\n\tlabel={ __( 'My slot' ) }\n-\tas={ [ MenuGroup, MenuItem ] }\n+\tas={ MenuGroup }\n/>\n```\n\n----------------------------------------\n\nTITLE: Installing @wordpress/shortcode package using npm\nDESCRIPTION: Command to install the @wordpress/shortcode package as a dependency in a project using npm.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/shortcode/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @wordpress/shortcode --save\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for Gutenberg Packages\nDESCRIPTION: Example tsconfig.json configuration for Gutenberg packages that opt into TypeScript. Includes compiler options, source file inclusion patterns, and package references.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/README.md#2025-04-21_snippet_9\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n\t\"extends\": \"../../tsconfig.base.json\",\n\t\"compilerOptions\": {\n\t\t\"rootDir\": \"src\",\n\t\t\"declarationDir\": \"build-types\"\n\t},\n\t\"include\": [ \"src/**/*\" ],\n\t\"references\": [ { \"path\": \"../dom-ready\" } ]\n}\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Migration Note\nDESCRIPTION: Breaking change note about replacing process.env.IS_GUTENBERG_PLUGIN with globalThis.IS_GUTENBERG_PLUGIN in build systems.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/blocks/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nprocess.env.IS_GUTENBERG_PLUGIN -> globalThis.IS_GUTENBERG_PLUGIN\n```\n\n----------------------------------------\n\nTITLE: Incorrect usage of translation functions with variables (i18n-no-variables)\nDESCRIPTION: This snippet illustrates examples of incorrect usage of translation functions where variables are used as arguments. This violates the i18n-no-variables rule because it prevents static analysis from properly extracting translatable strings.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/eslint-plugin/docs/rules/i18n-no-variables.md#2025-04-21_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n__( `Hello ${ foo }` );\n__( foo );\n_x( 'Hello World', bar );\n```\n\n----------------------------------------\n\nTITLE: Using Composite Component in JSX\nDESCRIPTION: Demonstrates how to use the Composite component with its sub-components to create a composite widget structure.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/composite/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Composite } from '@wordpress/components';\n\n<Composite>\n  <Composite.Group>\n    <Composite.GroupLabel>Label</Composite.GroupLabel>\n    <Composite.Item>Item 1</Composite.Item>\n    <Composite.Item>Item 2</Composite.Item>\n  </CompositeGroup>\n</Composite>\n```\n\n----------------------------------------\n\nTITLE: Limiting Global Options in theme.json\nDESCRIPTION: This snippet demonstrates how to globally disable various color and typography controls in the WordPress editor, significantly limiting customization options.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/curating-the-editor-experience/theme-json.md#2025-04-21_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"version\": 3,\n\t\"settings\": {\n\t\t\"layout\": {\n\t\t\t\"contentSize\": \"750px\"\n\t\t},\n\t\t\"color\": {\n\t\t\t\"background\": false,\n\t\t\t\"custom\": false,\n\t\t\t\"customDuotone\": false,\n\t\t\t\"customGradient\": false,\n\t\t\t\"defaultGradients\": false,\n\t\t\t\"defaultPalette\": false,\n\t\t\t\"text\": false\n\t\t},\n\t\t\"typography\": {\n\t\t\t\"customFontSize\": false,\n\t\t\t\"dropCap\": false,\n\t\t\t\"fontStyle\": false,\n\t\t\t\"fontWeight\": false,\n\t\t\t\"letterSpacing\": false,\n\t\t\t\"lineHeight\": false,\n\t\t\t\"textDecoration\": false,\n\t\t\t\"textTransform\": false\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect code examples for i18n-no-flanking-whitespace rule in JavaScript\nDESCRIPTION: This snippet illustrates examples of incorrect code that violate the i18n-no-flanking-whitespace rule. The rule flags translatable strings with leading or trailing spaces or tabs, which can negatively impact translation accuracy and pipeline efficiency. The examples demonstrate various forms of flanking whitespace, including spaces, tabs, and newlines.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/eslint-plugin/docs/rules/i18n-no-flanking-whitespace.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n__( ' A string with a leading space.' );\n__( 'A string with a trailing space. ' );\n__( ' A string with flanking spaces. ' );\n__( '\\tA string with a leading tab.' );\n__( 'A string with an empty newline\\n' );\n```\n\n----------------------------------------\n\nTITLE: Pushing Changes\nDESCRIPTION: Command to push your local branch to your forked repository on GitHub.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/git-workflow.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit push -u origin update/my-branch\n```\n\n----------------------------------------\n\nTITLE: Converting NavigableContainer to TypeScript\nDESCRIPTION: This snippet describes the conversion of the `NavigableContainer` component to TypeScript. Converting the component to TypeScript improves code maintainability, reduces potential runtime errors, and enhances type safety.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/CHANGELOG.md#2025-04-21_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"NavigableContainer`: Convert to TypeScript ([#49377](https://github.com/WordPress/gutenberg/pull/49377)).\"\n```\n\n----------------------------------------\n\nTITLE: __experimentalEditorSkeleton Component Addition\nDESCRIPTION: A new `__experimentalEditorSkeleton` component was added. This component was moved from the `@wordpress/edit-post` package, where it was an internal component called `EditorRegions`. Its class names have been renamed from `edit-post-editor-regions` to `block-editor-editor-skeleton`.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/CHANGELOG.md#2025-04-21_snippet_10\n\n\n\n----------------------------------------\n\nTITLE: Scaffolding an Interactive Block with create-block in WordPress\nDESCRIPTION: This command uses @wordpress/create-block package with the @wordpress/create-block-interactive-template to scaffold a new interactive block plugin named 'my-first-interactive-block'.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/iapi-quick-start-guide.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @wordpress/create-block@latest my-first-interactive-block --template @wordpress/create-block-interactive-template\n```\n\n----------------------------------------\n\nTITLE: Correct Usage Examples of WordPress APIs\nDESCRIPTION: Examples showing correct imports of stable WordPress APIs that are safe to use.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/eslint-plugin/docs/rules/no-unsafe-wp-apis.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { registerBlockType } from '@wordpress/blocks';\n```\n\n----------------------------------------\n\nTITLE: Installing @wordpress/token-list package using npm\nDESCRIPTION: This command installs the @wordpress/token-list package using npm. It's a prerequisite for using the TokenList functionality in your project.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/token-list/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @wordpress/token-list\n```\n\n----------------------------------------\n\nTITLE: Undo Last Edit - JavaScript\nDESCRIPTION: Triggers an undo of the last edit made to an entity record, if such an edit exists. This provides a way to revert unintended changes.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core.md#2025-04-21_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\nundo() {\n  // Action triggered to undo the last edit to an entity record, if any.\n}\n```\n\n----------------------------------------\n\nTITLE: Resetting the Database - Shell\nDESCRIPTION: This command sequence resets the local WordPress database, which will delete all data in the WordPress installation.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/env/README.md#2025-04-21_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\n$ wp-env clean all\n$ wp-env start\n```\n\n----------------------------------------\n\nTITLE: Inserting Raw HTML in WordPress Gutenberg Block\nDESCRIPTION: A basic example of embedding raw HTML content within a WordPress Gutenberg HTML block. The content is a simple pre-formatted text element that contains two numbers on separate lines.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/test/e2e/specs/editor/blocks/__snapshots__/Preformatted-should-preserve-character-newlines-1-chromium.txt#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<pre>1\n2</pre>\n```\n\n----------------------------------------\n\nTITLE: Changelog Header Comment\nDESCRIPTION: HTML comment providing documentation link for maintaining changelog files in the Gutenberg repository\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/interactivity/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- Learn how to maintain this file at https://github.com/WordPress/gutenberg/tree/HEAD/packages#maintaining-changelogs. -->\n```\n\n----------------------------------------\n\nTITLE: Installing Interface Package via NPM\nDESCRIPTION: Command to install the WordPress interface package as a project dependency using npm\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/interface/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @wordpress/interface --save\n```\n\n----------------------------------------\n\nTITLE: Installing Production Dependencies for WordPress Packages\nDESCRIPTION: Commands for adding production dependencies to specific WordPress packages using npm workspaces. Shows how to install dependencies with default or specific versions.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install change-case -w packages/a11y\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Script Module Exports in WordPress Packages\nDESCRIPTION: Configuration example for exposing multiple script modules from a single WordPress package using the wpScriptModuleExports field. Shows both single module export and multiple sub-module exports patterns.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/README.md#2025-04-21_snippet_1\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n\t\"name\": \"@wordpress/example\",\n\n\t// The string form exposes the `@wordpress/example` script module.\n\t\"wpScriptModuleExports\": \"./build-module/index.js\",\n\n\t// Multiple sub-modules can be exposed by providing an object:\n\t\"wpScriptModuleExports\": {\n\t\t// Exposed as `@wordpress/example` script module.\n\t\t\".\": \"./build-module/index.js\",\n\t\t// Exposed as `@wordpress/example/demo-block/view` script module.\n\t\t\"./demo-block/view\": \"./build-module/index.js\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Alert Colors Palette\nDESCRIPTION: Creates a color palette section displaying alert colors (yellow, red, green) using Storybook's ColorPalette and ColorItem components.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/storybook/stories/tokens/color.mdx#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<ColorPalette>\n\t<ColorItem\n\t\ttitle=\"Alert colors\"\n\t\tsubtitle=\"\"\n\t\tcolors={{\n\t\t\t'$alert-yellow': '#f0b849',\n\t\t\t'$alert-red': '#cc1818',\n\t\t\t'$alert-green': '#4ab866',\n\t\t}}\n\t/>\n</ColorPalette>\n```\n\n----------------------------------------\n\nTITLE: Using Find Queries for Asynchronous Elements\nDESCRIPTION: These snippets show how to use find queries to wait for asynchronous elements to appear in the React Native tests.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/react-native/integration-test-guide.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst mediaLibraryButton = await findByText( 'WordPress Media Library' );\n\nconst missingBlock = await findByLabelText( /Unsupported Block\\. Row 1/ );\n\nconst radiusSlider = await findByTestId( 'Slider Border Radius' );\n```\n\n----------------------------------------\n\nTITLE: Defining Page Numbers Display - Gutenberg (Markdown)\nDESCRIPTION: This snippet defines a block for displaying pagination numbers. It enables users to see page numbers dynamically based on results.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/core-blocks.md#2025-04-21_snippet_18\n\nLANGUAGE: markdown\nCODE:\n```\n- **Name:** core/query-pagination-numbers\n- **Category:** theme\n- **Parent:** core/query-pagination\n- **Supports:** color (background, gradients, ~~text~~), interactivity (clientNavigation), typography (fontSize, lineHeight), ~~html~~, ~~reusable~~\n- **Attributes:** midSize\n```\n\n----------------------------------------\n\nTITLE: Declaring Gutenberg-prefixed Functions for Plugin Use\nDESCRIPTION: Example of how to declare a function with the 'gutenberg_' prefix intended for plugin use. This pattern is used for 'evergreen' code that is constantly updated and should not conflict with WordPress Core.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/lib/README.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n/**\n* Returns something useful.\n*\n* @since 6.2.0 Updates to something even more useful.\n* @since 6.3.0 Now more useful than ever.\n*\n* @return string Something useful.\n*/\nfunction gutenberg_get_something_useful() {\n\t// ...\n}\n```\n\n----------------------------------------\n\nTITLE: Spacer Block Example\nDESCRIPTION: This snippet shows a spacer block, used to create vertical space in Gutenberg. It utilizes a div element with inline styles to set the height and attributes to control visibility and class names for styling.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/test/e2e/specs/editor/various/__snapshots__/Copy-cut-paste-should-copy-paste-partial-selection-with-other-blocks-in-between-1-chromium.txt#2025-04-21_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- wp:spacer -->\n<div style=\"height:100px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n```\n\n----------------------------------------\n\nTITLE: Rendering Preformatted Text Block - HTML\nDESCRIPTION: This snippet showcases how to implement a preformatted block in the Gutenberg editor of WordPress. It uses HTML to define the content structure and styling for preformatted text.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/test/e2e/specs/editor/blocks/__snapshots__/Preformatted-should-preserve-white-space-when-merging-1-chromium.txt#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">1<br>2<br><br>3</pre>\n<!-- /wp:preformatted -->\n```\n\n----------------------------------------\n\nTITLE: Firing Events in React Native Tests\nDESCRIPTION: These examples demonstrate how to fire events like press and custom events in React Native tests to simulate user interactions.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/react-native/integration-test-guide.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfireEvent.press( settingsButton );\n\nfireEvent( heightSlider, 'valueChange', '50' );\n```\n\n----------------------------------------\n\nTITLE: Example HTML Output for Save Markup\nDESCRIPTION: This HTML snippet demonstrates the potential output of a block on the front end after useBlockProps.save() has been applied in the save function. It shows the automatically applied class for the block.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/getting-started/fundamentals/block-wrapper.md#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<p class=\"wp-block-block-development-examples-minimal-block-ca6eda\">Hello World – Frontend</p>\n```\n\n----------------------------------------\n\nTITLE: Installing Interactivity API Package in JavaScript\nDESCRIPTION: Install the Interactivity API package using npm for WordPress block development. Required for adding interactive features to blocks.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @wordpress/interactivity --save\n```\n\n----------------------------------------\n\nTITLE: Configuring DataViews with Layout Fields in JavaScript\nDESCRIPTION: This code snippet demonstrates how to configure a DataViews object with unified fields for title, media, and description. It includes additional fields for author and date. This configuration is part of a breaking change where layout fields are unified. Prerequisites include knowledge of JavaScript object configuration and understanding of how DataViews handles layouts and fields.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/dataviews/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst view = {\n\ttype: 'table',\n\ttitleField: 'title',\n\tmediaField: 'media',\n\tdescriptionField: 'description',\n\tfields: [ 'author', 'date' ],\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Spacer Block in HTML for WordPress Gutenberg\nDESCRIPTION: This code snippet implements a spacer block in WordPress Gutenberg, enabling the addition of vertical space (100px) within the editor. It includes necessary attributes for accessibility and styling.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/test/e2e/specs/editor/various/__snapshots__/Copy-cut-paste-should-copy-blocks-when-non-textual-elements-are-focused-image-spacer-1-chromium.txt#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- wp:spacer -->\n<div style=\"height:100px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n```\n\n----------------------------------------\n\nTITLE: Installing Edit Site Package with npm\nDESCRIPTION: Command to install the WordPress edit-site package using npm package manager\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/edit-site/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @wordpress/edit-site\n```\n\n----------------------------------------\n\nTITLE: Node.js Version Bump\nDESCRIPTION: This snippet documents a breaking change concerning the minimum required Node.js version for the Gutenberg project.  The minimum Node.js version was increased to v18.12.0 to match long-term support (LTS) releases.  Developers and build systems must ensure they are using a compatible Node.js version to avoid compatibility issues.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/private-apis/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n\t\t\"Increase the minimum required Node.js version to v18.12.0 matching long-term support releases ([#31270](https://github.com/WordPress/gutenberg/pull/61930)). Learn more about [Node.js releases](https://nodejs.org/en/about/previous-releases).\"\n```\n\n----------------------------------------\n\nTITLE: Block Initialization Module\nDESCRIPTION: Standard initialization file template for individual block registration\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-library/README.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Internal dependencies\n */\nimport { init } from './';\n\nexport default init();\n```\n\n----------------------------------------\n\nTITLE: Generated API Documentation - TypeScript\nDESCRIPTION: The markdown snippet represents the documented output of a TypeScript default function showing detailed descriptions of parameters and return type.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/docgen/README.md#2025-04-21_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n# API\\n\\n## default\\n\\n[example.js#L8-L10](example.js#L8-L10)\\n\\nAdds two numbers.\\n\\n**Parameters**\\n\\n-   **term1** `number`: First number.\\n-   **term2** `number`: Second number.\\n\\n**Returns**\\n\\n`number` The result of adding the two numbers.\n```\n\n----------------------------------------\n\nTITLE: Creating Higher Order Component\nDESCRIPTION: Using createHigherOrderComponent instead of deprecated getWrapperDisplayName function\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/deprecations.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nwp.element.createHigherOrderComponent\n```\n\n----------------------------------------\n\nTITLE: Configuring Duotone with Core Options in theme.json\nDESCRIPTION: This snippet demonstrates how to enable custom duotone filters and provide core options for image-related blocks using theme.json.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/curating-the-editor-experience/theme-json.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"version\": 3,\n\t\"settings\": {\n\t\t\"color\": {\n\t\t\t\"customDuotone\": true,\n\t\t\t\"duotone\": [\n\t\t\t]\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Bug Fix - Dependency Removal\nDESCRIPTION: Documentation of bug fix removing unused WordPress DOM and keycodes dependencies.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/format-library/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n-   Removed unused `@wordpress/dom` and `@wordpress/keycodes` dependencies ([#38388](https://github.com/WordPress/gutenberg/pull/38388)).\n```\n\n----------------------------------------\n\nTITLE: Interacting with Sliders in React Native Bottom Sheets\nDESCRIPTION: This snippet demonstrates how to query and interact with slider components in bottom sheets during React Native testing. It uses the testID to find the slider and then simulates a value change event.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/react-native/integration-test-guide.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst radiusSlider = await findByTestId( 'Slider Border Radius' );\nfireEvent( radiusSlider, 'valueChange', '30' );\n```\n\n----------------------------------------\n\nTITLE: Converting ToolbarItem to TypeScript\nDESCRIPTION: This snippet describes the conversion of the `ToolbarItem` component to TypeScript within the Gutenberg project.  The conversion enhances type safety, improves code maintainability, and helps catch potential errors during development.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/CHANGELOG.md#2025-04-21_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"ToolbarItem`: Convert to TypeScript ([#49190](https://github.com/WordPress/gutenberg/pull/49190)).\"\n```\n\n----------------------------------------\n\nTITLE: Advanced Viewport Matching with Different Operators\nDESCRIPTION: Example demonstrating how to use different operators with the isViewportMatch selector to check for various viewport conditions. Shows how to check for smaller than medium and wider than or equal to wide viewports.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/viewport/README.md#2025-04-21_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { select } from '@wordpress/data';\nimport { store } from '@wordpress/viewport';\n\nconst { isViewportMatch } = select( store );\nconst isSmall = isViewportMatch( '< medium' );\nconst isWideOrHuge = isViewportMatch( '>= wide' );\n// Equivalent:\n//  const isWideOrHuge = isViewportMatch( 'wide' );\n```\n\n----------------------------------------\n\nTITLE: Installing Jest Puppeteer Axe Package\nDESCRIPTION: Command to install the @wordpress/jest-puppeteer-axe package as a development dependency using npm.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/jest-puppeteer-axe/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @wordpress/jest-puppeteer-axe --save-dev\n```\n\n----------------------------------------\n\nTITLE: Installing Babel Plugin Makepot via npm\nDESCRIPTION: Command to install the @wordpress/babel-plugin-makepot package as a development dependency using npm.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/babel-plugin-makepot/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @wordpress/babel-plugin-makepot --save-dev\n```\n\n----------------------------------------\n\nTITLE: Installing the WordPress DataViews Package\nDESCRIPTION: This code snippet shows how to install the @wordpress/dataviews package using npm. It is a prerequisite for using the DataViews and DataForm React components within a WordPress environment.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/dataviews/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @wordpress/dataviews --save\n```\n\n----------------------------------------\n\nTITLE: Receiving Upload Permissions - JavaScript\nDESCRIPTION: Signals the receipt of upload permissions for the user. This function is now deprecated in favor of a different permissions handling approach.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core.md#2025-04-21_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nreceiveUploadPermissions(hasUploadPermissions) {\n  // Deprecated since WP 5.9, use receiveUserPermission instead.\n  // Returns an action object used in signalling that Upload permissions have been received.\n  // Parameters:\n  // - hasUploadPermissions: Does the user have permission to upload files?\n}\n```\n\n----------------------------------------\n\nTITLE: Correct code example for i18n-no-flanking-whitespace rule in JavaScript\nDESCRIPTION: This snippet showcases a correct code example that adheres to the i18n-no-flanking-whitespace rule. The rule mandates that translatable strings should not have any leading or trailing spaces or tabs. The example demonstrates a translatable string without any flanking whitespace, representing the desired code style.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/eslint-plugin/docs/rules/i18n-no-flanking-whitespace.md#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n__( 'A string with no leading or trailing spaces or tabs.' );\n```\n\n----------------------------------------\n\nTITLE: Disabling Core Block Patterns in PHP\nDESCRIPTION: PHP function to remove core block patterns from the WordPress Block Inserter.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/curating-the-editor-experience/disable-editor-functionality.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nfunction example_theme_support() {\n\tremove_theme_support( 'core-block-patterns' );\n}\nadd_action( 'after_setup_theme', 'example_theme_support' );\n```\n\n----------------------------------------\n\nTITLE: Installing Enzyme Dependencies\nDESCRIPTION: Commands to install Enzyme and its React 17 adapter for legacy support\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/jest-preset-default/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save enzyme\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @wojtekmaj/enzyme-adapter-react-17\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook Documentation Components\nDESCRIPTION: Imports the necessary components from Storybook blocks to create a color documentation page.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/storybook/stories/tokens/color.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Meta, ColorPalette, ColorItem } from '@storybook/blocks';\n```\n\n----------------------------------------\n\nTITLE: BlockEditorProvider Changes\nDESCRIPTION: `BlockEditorProvider` no longer renders a wrapping `SlotFillProvider` or `DropZoneProvider` (from `@wordpress/components`). For custom block editors, you should render your own as wrapping the `BlockEditorProvider`. A future release will include a new `BlockEditor` component for simple, standard usage. `BlockEditorProvider` will serve the simple purpose of establishing its own context for block editors.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/CHANGELOG.md#2025-04-21_snippet_14\n\n\n\n----------------------------------------\n\nTITLE: Breaking Change Node.js Version Requirement\nDESCRIPTION: Changelog entry for increased minimum Node.js version requirement to v18.12.0.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/media-utils/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## 5.0.0 (2024-05-31)\n\n### Breaking Changes\n\n-   Increase the minimum required Node.js version to v18.12.0 matching long-term support releases ([#31270](https://github.com/WordPress/gutenberg/pull/61930)). Learn more about [Node.js releases](https://nodejs.org/en/about/previous-releases).\n```\n\n----------------------------------------\n\nTITLE: Installing Babel Preset Default\nDESCRIPTION: This command installs the `@wordpress/babel-preset-default` package as a development dependency using npm.  The `--save-dev` flag ensures that the package is added to the `devDependencies` section of the `package.json` file.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/babel-preset-default/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"npm install @wordpress/babel-preset-default --save-dev\"\n```\n\n----------------------------------------\n\nTITLE: Installing @wordpress/element Package Using NPM\nDESCRIPTION: This snippet demonstrates the installation command for the @wordpress/element package, which is required for building React components in WordPress. Ensure you have npm installed to execute this command.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/element/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @wordpress/element --save\n```\n\n----------------------------------------\n\nTITLE: Installing @wordpress/sync Module via npm\nDESCRIPTION: Command to install the @wordpress/sync module using npm package manager. This adds the module as a dependency to your project.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/sync/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @wordpress/sync --save\n```\n\n----------------------------------------\n\nTITLE: Getting Edit for Redo - JavaScript\nDESCRIPTION: This deprecated function returns the next edit available for redo based on the current undo offset, using the application state as input. It may not be used in future versions.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// getRedoEdit\n\nfunction getRedoEdit( state ) {\n    // Implementation here\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Console Error With Specific Arguments\nDESCRIPTION: Example test demonstrating how to use toHaveErroredWith() to verify specific console error messages.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/jest-console/README.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe( 'drinkAll', () => {\n\ttest( 'errors with message when something is octopus-flavored', () => {\n\t\tdrinkAll( 'octopus' );\n\t\texpect( console ).toHaveErroredWith(\n\t\t\t'Should I really drink something that is octopus-flavored?'\n\t\t);\n\t} );\n} );\n```\n\n----------------------------------------\n\nTITLE: Adjusting Line Height for Inner Controls with Text Component\nDESCRIPTION: Shows how to use the adjustLineHeightForInnerControls prop to automatically calculate appropriate line-height for text content containing control elements like TextInput.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/text/README.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { __experimentalText as Text, TextInput } from '@wordpress/components';\n\nfunction Example() {\n\treturn (\n\t\t<Text adjustLineHeightForInnerControls={\"small\"}>\n\t\t\tLorem ipsum dolor sit amet, consectetur\n\t\t\t<TextInput value=\"adipiscing elit...\" />\n\t\t</Text>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Changelog Maintenance Guidelines\nDESCRIPTION: HTML comment providing a link to documentation on how to maintain the changelog file.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/url/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- Learn how to maintain this file at https://github.com/WordPress/gutenberg/tree/HEAD/packages#maintaining-changelogs. -->\n```\n\n----------------------------------------\n\nTITLE: Installing WordPress Keyboard Shortcuts Package\nDESCRIPTION: Command to install the @wordpress/keyboard-shortcuts package via npm. This package requires an ES2015+ environment.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/keyboard-shortcuts/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @wordpress/keyboard-shortcuts --save\n```\n\n----------------------------------------\n\nTITLE: Configuring npm Scripts for wp-scripts in package.json\nDESCRIPTION: Example of how to set up npm scripts in package.json to use wp-scripts for starting development and building production code.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/getting-started/devenv/get-started-with-wp-scripts.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"scripts\": {\n        \"start\": \"wp-scripts start\",\n        \"build\": \"wp-scripts build\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Theme JSON Schema Version 1 URL\nDESCRIPTION: Official JSON schema URL for WordPress theme configuration in version 5.8\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/theme-json-reference/theme-json-v1.md#2025-04-21_snippet_0\n\nLANGUAGE: URL\nCODE:\n```\nhttps://schemas.wp.org/wp/5.8/theme.json\n```\n\n----------------------------------------\n\nTITLE: Checking if a tip is visible\nDESCRIPTION: This JSX snippet demonstrates how to use the `isTipVisible` selector from the `core/nux` data store to determine if a tip is currently visible.  It logs a boolean value (true or false) to the console indicating the visibility state of the tip with the specified ID.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/nux/README.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst isVisible = select( 'core/nux' ).isTipVisible( 'acme/add-to-cart' );\nconsole.log( isVisible ); // true or false\n```\n\n----------------------------------------\n\nTITLE: Advanced Axe Accessibility Test with Options\nDESCRIPTION: Extended example showing how to use Axe tests with custom configurations including element selection, rule exclusions, and additional options.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/jest-puppeteer-axe/README.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ntest( 'checks the test component with Axe excluding some button', async () => {\n\t// First, run some code which loads the content of the page.\n\tloadPageWithTestComponent();\n\n\tawait expect( page ).toPassAxeTests( {\n\t\tinclude: '.test-component',\n\t\texclude: '.some-button',\n\t\tdisabledRules: [ 'aria-allowed-role' ],\n\t\toptions: { iframes: false },\n\t\tconfig: { reporter: 'raw' },\n\t} );\n} );\n```\n\n----------------------------------------\n\nTITLE: Defining Server-side Rendering in block.json\nDESCRIPTION: Configuration to specify a PHP file for server-side rendering of a block. Available since WordPress 6.1.0.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-metadata.md#2025-04-21_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{ \"render\": \"file:./render.php\" }\n```\n\n----------------------------------------\n\nTITLE: Gutenberg Paragraph Block HTML\nDESCRIPTION: This HTML snippet defines a Gutenberg paragraph block. It uses HTML comments to mark the beginning and end of the block, and the paragraph element contains the block's content.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/test/e2e/specs/editor/various/__snapshots__/Copy-cut-paste-should-copy-only-partial-selection-of-text-blocks-2-chromium.txt#2025-04-21_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- wp:paragraph -->\n<p>A block</p>\n<!-- /wp:paragraph -->\n```\n\n----------------------------------------\n\nTITLE: Creating Feature Branch\nDESCRIPTION: Command to create and switch to a new branch for your changes.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/git-workflow.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit switch -c update/my-branch\n```\n\n----------------------------------------\n\nTITLE: Installing ServerSideRender Package in JavaScript\nDESCRIPTION: Command to install the @wordpress/server-side-render package using npm. This package is used for server-side rendering of dynamic blocks in WordPress Gutenberg.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/server-side-render/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @wordpress/server-side-render --save\n```\n\n----------------------------------------\n\nTITLE: Fetching Unoptimized Translations for Gutenberg React Native\nDESCRIPTION: Shell command to fetch all translations for Gutenberg from WordPress.org without optimization. Requires specifying an output path for the translation files.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/react-native/internationalization-guide.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpm run native i18n:fetch-translations -- \"gutenberg\" <OUTPUT_PATH>\n```\n\n----------------------------------------\n\nTITLE: Change Handler for LinkControl\nDESCRIPTION: This snippet demonstrates attaching an onChange handler to the <LinkControl> component, which logs the selected URL when a change occurs. It requires React and the console object for logging. The key parameter is nextValue, containing the updated URL value. The output is a console log of the URL when the value changes.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/src/components/link-control/README.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<LinkControl\n\tonChange={ ( nextValue ) => {\n\t\tconsole.log( `The selected item URL: ${ nextValue.url }.` );\n\t} }\n/>\n```\n\n----------------------------------------\n\nTITLE: Unregistering Block Style in PHP\nDESCRIPTION: Shows how to unregister a server-side registered block style using unregister_block_style function.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-styles.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nunregister_block_style( 'core/quote', 'fancy-quote' );\n```\n\n----------------------------------------\n\nTITLE: Importing Meta and Typeset components from Storybook Blocks\nDESCRIPTION: This snippet imports the `Meta` and `Typeset` components from the `@storybook/blocks` library. These components are likely used to define metadata and manage the typesetting for the Storybook documentation page about elevation in WordPress Gutenberg.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/storybook/stories/foundations/design-language/elevation.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Meta, Typeset } from '@storybook/blocks';\n```\n\n----------------------------------------\n\nTITLE: Node.js Minimum Version Increase\nDESCRIPTION: The minimum Node.js version has been increased to v12 to align with Long Term Support (LTS) releases. Developers need to ensure their development environment and deployment infrastructure meet this minimum requirement to avoid compatibility issues when working with Gutenberg.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/CHANGELOG.md#2025-04-21_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Targeting Left-Justified Content Blocks in CSS\nDESCRIPTION: This CSS selector targets blocks that explicitly set their content justification to left. It uses a semantic class name output by the Layout block support.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/explanations/architecture/styles.md#2025-04-21_snippet_16\n\nLANGUAGE: css\nCODE:\n```\n.is-content-justification-left {\n  /* styles here */\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Named Export Functions\nDESCRIPTION: This snippet shows two functions defined in JavaScript with corresponding JSDoc comments, showcasing both addition and a deprecated count function. Both functions are exported by name.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/docgen/README.md#2025-04-21_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n/**\\n * Adds two numbers.\\n *\\n * @param {number} term1 First number.\\n * @param {number} term2 Second number.\\n * @return {number} The result of adding the two numbers.\\n */\\nfunction addition( term1, term2 ) {\\n\\treturn term1 + term2;\\n}\\n\\n/**\\n * Adds two numbers.\\n *\\n * @deprecated Use `addition` instead.\\n *\\n * @param {number} term1 First number.\\n * @param {number} term2 Second number.\\n * @return {number} The result of adding the two numbers.\\n */\\nfunction count( term1, term2 ) {\\n\\treturn term1 + term2;\\n}\\n\\nexport { count, addition };\n```\n\n----------------------------------------\n\nTITLE: Breaking Changes - Node.js Version Requirement Update\nDESCRIPTION: This snippet outlines the breaking changes for the Gutenberg project where the minimum required Node.js version is increased for various releases to ensure compatibility with long-term support releases. This is crucial for developers to note when upgrading their environments.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/postcss-themes/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n-   Increase the minimum required Node.js version to v18.12.0 matching long-term support releases ([#31270](https://github.com/WordPress/gutenberg/pull/61930)). Learn more about [Node.js releases](https://nodejs.org/en/about/previous-releases).\n```\n\n----------------------------------------\n\nTITLE: Setting Default Image Size in PHP\nDESCRIPTION: Demonstrates how to change the default image size in the editor to 'medium' using the 'block_editor_settings_all' filter.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/filters/editor-filters.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nadd_filter( 'block_editor_settings_all', 'example_set_default_image_size' );\n\nfunction example_set_default_image_size( $settings ) {\n\t$settings['imageDefaultSize'] = 'medium';\n\treturn $settings;\n}\n```\n\n----------------------------------------\n\nTITLE: Package Side Effects Configuration - With Files\nDESCRIPTION: Package.json configuration for declaring specific files that have side effects, allowing bundlers to tree-shake other files.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/README.md#2025-04-21_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"name\": \"package\",\n\t\"sideEffects\": [\n\t\t\"file-with-side-effects.js\",\n\t\t\"another-file-with-side-effects.js\"\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Elevation with CSS Variables in WordPress\nDESCRIPTION: Example of using the elevation SASS variables in CSS classes. Each class applies a different elevation level box-shadow using the corresponding SASS variable.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/storybook/stories/tokens/elevation.mdx#2025-04-21_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.elevation-extra-small {\n\tbox-shadow: $elevation-x-small;\n}\n.elevation-small {\n\tbox-shadow: $elevation-small;\n}\n.elevation-medium {\n\tbox-shadow: $elevation-medium;\n}\n.elevation-large {\n\tbox-shadow: $elevation-large;\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Babel Configuration with Plugins\nDESCRIPTION: This JSON snippet demonstrates how to extend the Babel configuration by adding a plugin, in this case, `@babel/plugin-transform-class-properties`.  It allows using newer language features that may not be included in the default WordPress Babel preset.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/babel-preset-default/README.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"{\n\\t\\\"presets\\\": [ \\\"@wordpress/babel-preset-default\\\" ],\n\\t\\\"plugins\\\": [ \\\"@babel/plugin-transform-class-properties\\\" ]\n}\"\n```\n\n----------------------------------------\n\nTITLE: Testing User Interactions with user-event in React\nDESCRIPTION: Recommended approach for testing user interactions using the user-event library. This method simulates real browser events and handles React-specific behaviors correctly.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/testing-overview.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { render, screen } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\n\ntest( 'fires onChange when a new value is typed', async () => {\n\tconst user = userEvent.setup();\n\n\tconst spyOnChange = jest.fn();\n\n\t// A component with one `input` and one `select`.\n\trender( <MyComponent onChange={ spyOnChange } /> );\n\n\tconst input = screen.getByRole( 'textbox' );\n\t// Focus the element, select and delete all its contents.\n\tawait user.clear( input );\n\t// Click the element, type each character separately (generating keydown,\n\t// keypress and keyup events).\n\tawait user.type( input, '62' );\n\n\t// The `onChange` callback gets called 3 times with the following arguments:\n\t// - 1: clear ('')\n\t// - 2: '6'\n\t// - 3: '62'\n\texpect( spyOnChange ).toHaveBeenCalledTimes( 3 );\n\n\tconst select = screen.getByRole( 'listbox' );\n\t// Dispatches events for focus, pointer, mouse, click and change.\n\tawait user.selectOptions( select, [ 'optionValue' ] );\n\n\t// ...\n} );\n```\n\n----------------------------------------\n\nTITLE: Block Settings Actions (updateBlockListSettings, updateSettings)\nDESCRIPTION: Actions for updating block-related settings. updateBlockListSettings handles nested block settings, while updateSettings updates the general block editor settings.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core-block-editor.md#2025-04-21_snippet_24\n\n\n\n----------------------------------------\n\nTITLE: Configuring Jest Setup Files\nDESCRIPTION: Jest configuration to include jest-console in the setupFilesAfterEnv array for automatic setup.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/jest-console/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n\"jest\": {\n  \"setupFilesAfterEnv\": [\n    \"@wordpress/jest-console\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Label Cherry-Pick Command\nDESCRIPTION: Example of how to use the cherry-pick script with a custom label instead of the default 'Backport to WP Beta/RC' label.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/auto-cherry-picking.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run other:cherry-pick \"Another Label\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Browserslist in .browserslistrc\nDESCRIPTION: Alternative configuration for .browserslistrc file to extend WordPress Browserslist config.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/browserslist-config/README.md#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nextends @wordpress/browserslist-config\n```\n\n----------------------------------------\n\nTITLE: Breaking Change: React 18 Dependency Update\nDESCRIPTION: Documentation of breaking change that updates dependencies to require React 18.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/keyboard-shortcuts/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n-   Updated dependencies to require React 18 ([45235](https://github.com/WordPress/gutenberg/pull/45235))\n```\n\n----------------------------------------\n\nTITLE: Incorrect Global Flag Usage - Window Access\nDESCRIPTION: Shows incorrect access to IS_GUTENBERG_PLUGIN through window object\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/eslint-plugin/docs/rules/wp-global-usage.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nif ( window[ 'IS_GUTENBERG_PLUGIN' ] ) {\n\t// implement feature here.\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Globals with Jest Spies\nDESCRIPTION: Example of using Jest spies to test code that calls global methods. This snippet demonstrates how to mock the global.open method.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/testing-overview.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { myModuleFunctionThatOpensANewWindow } from '../my-module';\n\ndescribe( 'my module', () => {\n\tbeforeAll( () => {\n\t\tjest.spyOn( global, 'open' ).mockImplementation( () => true );\n\t} );\n\n\ttest( 'something', () => {\n\t\tmyModuleFunctionThatOpensANewWindow();\n\t\texpect( global.open ).toHaveBeenCalled();\n\t} );\n} );\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Action Workflow for Pull Request Management\nDESCRIPTION: This YAML snippet configures a GitHub Action to automate tasks for pull request management in the Gutenberg repository. It runs on the latest Ubuntu environment and uses the 'WordPress/gutenberg/packages/project-management-automation' package to perform various automation tasks. It requires a GitHub API token as 'github_token'.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/project-management-automation/README.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\non: pull_request\njobs:\n    pull-request-automation:\n        runs-on: ubuntu-latest\n        steps:\n            - uses: WordPress/gutenberg/packages/project-management-automation@trunk\n              with:\n                  github_token: ${{ secrets.GITHUB_TOKEN }}\n```\n\n----------------------------------------\n\nTITLE: Installing Jest Preset Package\nDESCRIPTION: Command to install the WordPress Jest preset package as a dev dependency\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/jest-preset-default/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @wordpress/jest-preset-default --save-dev\n```\n\n----------------------------------------\n\nTITLE: Core Build Transformation in JavaScript\nDESCRIPTION: Demonstrates how the feature flag condition is transformed during the WordPress core build process, replacing the flag with undefined.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/feature-flags.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nif ( undefined ) {\n\t// Webpack has replaced `globalThis.IS_GUTENBERG_PLUGIN` with `undefined`\n\tpluginOnlyFeature();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing WordPress Warning Package via npm\nDESCRIPTION: Command to install the @wordpress/warning package as a dependency in your project using npm.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/warning/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @wordpress/warning --save\n```\n\n----------------------------------------\n\nTITLE: Increasing Minimum Required Node.js Version in WordPress Style Engine\nDESCRIPTION: Breaking change in version 2.0.0 that increases the minimum required Node.js version to v18.12.0 to match long-term support releases.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/style-engine/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Breaking Changes\n\n-   Increase the minimum required Node.js version to v18.12.0 matching long-term support releases ([#31270](https://github.com/WordPress/gutenberg/pull/61930)). Learn more about [Node.js releases](https://nodejs.org/en/about/previous-releases).\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Gutenberg Bridge Package\nDESCRIPTION: Command to install the React Native Gutenberg Bridge package locally using npm.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/react-native-bridge/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install ./gutenberg/packages/react-native-bridge --save\n```\n\n----------------------------------------\n\nTITLE: Installing Edit Post Module\nDESCRIPTION: Installation command for the WordPress Gutenberg edit-post package using npm package manager\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/edit-post/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @wordpress/edit-post\n```\n\n----------------------------------------\n\nTITLE: Installing WordPress List Reusable Blocks Package\nDESCRIPTION: Command to install the @wordpress/list-reusable-blocks package using npm package manager. The package should be saved as a project dependency.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/list-reusable-blocks/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @wordpress/list-reusable-blocks --save\n```\n\n----------------------------------------\n\nTITLE: Restricting Code Editor Access with PHP Filter\nDESCRIPTION: Example of using block_editor_settings_all filter to disable the Code Editor for non-administrator users\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/curating-the-editor-experience/filters-and-hooks.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nadd_filter( 'block_editor_settings_all', 'example_restrict_code_editor' );\n\nfunction example_restrict_code_editor( $settings ) {\n\t$can_active_plugins = current_user_can( 'activate_plugins' );\n\n\t// Disable the Code Editor for users that cannot activate plugins (Administrators).\n\tif ( ! $can_active_plugins ) {\n\t\t$settings[ 'codeEditingEnabled' ] = false;\n\t}\n\n\treturn $settings;\n}\n```\n\n----------------------------------------\n\nTITLE: Running Composer Commands in wp-env - Shell\nDESCRIPTION: This command runs Composer within the wp-env environment, facilitating dependency management for PHP projects.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/env/README.md#2025-04-21_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\n$ wp-env run cli composer install\n```\n\n----------------------------------------\n\nTITLE: Setting HTML Direction Attribute for RTL Support\nDESCRIPTION: This HTML snippet shows how to set the 'dir' attribute on the HTML element to 'rtl'. This is necessary to properly display RTL content in the document.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/platform-docs/docs/basic-concepts/internationalization.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<html dir=\"rtl\">\n    <!-- rest of your app -->\n</html>\n```\n\n----------------------------------------\n\nTITLE: Fix combineReducers() types\nDESCRIPTION: This note outlines the fix for the combineReducers() types in the 9.15.0 release, addressing issues in type definitions.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/data/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n-   Fix `combineReducers()` types ([#55321](https://github.com/WordPress/gutenberg/pull/55321)).\n```\n\n----------------------------------------\n\nTITLE: Node.js options with wp-scripts\nDESCRIPTION: This demonstrates how to pass Node.js CLI options to `wp-scripts` before the script name. The options are passed after the `wp-scripts` command and before the script name, allowing for customization of the Node.js environment.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/scripts/README.md#2025-04-21_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nwp-scripts [NODE_OPTIONS] script\n```\n\n----------------------------------------\n\nTITLE: Installing Primitives NPM Package\nDESCRIPTION: Command to install the WordPress Primitives package via npm with save flag for project dependencies\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/primitives/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @wordpress/primitives --save\n```\n\n----------------------------------------\n\nTITLE: Using setIsInserterOpened Action in WordPress Gutenberg\nDESCRIPTION: Example demonstrating how to use the setIsInserterOpened action to toggle the widget inserter state. Uses the useDispatch hook from @wordpress/data and Button component to implement the toggle functionality.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core-customize-widgets.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\nimport { store as customizeWidgetsStore } from '@wordpress/customize-widgets';\nimport { __ } from '@wordpress/i18n';\nimport { useDispatch } from '@wordpress/data';\nimport { Button } from '@wordpress/components';\n\nconst ExampleComponent = () => {\n\tconst { setIsInserterOpened } = useDispatch( customizeWidgetsStore );\n\tconst [ isOpen, setIsOpen ] = useState( false );\n\n\treturn (\n\t\t<Button\n\t\t\tonClick={ () => {\n\t\t\t\tsetIsInserterOpened( ! isOpen );\n\t\t\t\tsetIsOpen( ! isOpen );\n\t\t\t} }\n\t\t>\n\t\t\t{ __( 'Open/close inserter' ) }\n\t\t</Button>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Store Actions for wp-text Toggle Functionality\nDESCRIPTION: Shows the JavaScript store implementation for toggling text content used with the wp-text directive. This code defines an action that switches between two text values in the context object.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/api-reference.md#2025-04-21_snippet_12\n\nLANGUAGE: js\nCODE:\n```\nstore( 'myPlugin', {\n\tactions: {\n\t\ttoggleContextText: () => {\n\t\t\tconst context = getContext();\n\t\t\tcontext.text = context.text === 'Text 1' ? 'Text 2' : 'Text 1';\n\t\t},\n\t},\n} );\n```\n\n----------------------------------------\n\nTITLE: Gutenberg Paragraph Block HTML\nDESCRIPTION: This HTML snippet defines a Gutenberg paragraph block. It uses HTML comments to mark the beginning and end of the block, and the paragraph element contains the block's content.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/test/e2e/specs/editor/various/__snapshots__/Copy-cut-paste-should-copy-only-partial-selection-of-text-blocks-2-chromium.txt#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- wp:paragraph -->\n<p>block</p>\n<!-- /wp:paragraph -->\n```\n\n----------------------------------------\n\nTITLE: Starting Metro Bundler for React Native\nDESCRIPTION: Command to start the Metro bundler for React Native development.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/react-native/osx-setup-guide.md#2025-04-21_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nnpm run native start:reset\n```\n\n----------------------------------------\n\nTITLE: Running Android Integration Tests\nDESCRIPTION: Commands for executing integration tests on Android platform using a virtual device. Can run either the full test suite or individual test files.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/react-native/osx-setup-guide.md#2025-04-21_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\nnpm run native test:e2e:android:local\n```\n\nLANGUAGE: sh\nCODE:\n```\nnpm run native test:e2e:android:local gutenberg-editor-paragraph.test.js\n```\n\n----------------------------------------\n\nTITLE: Bug Fix: Compose Dependency Removal\nDESCRIPTION: Documentation of bug fix that removes unused @wordpress/compose dependency.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/keyboard-shortcuts/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n-   Removed unused `@wordpress/compose` dependency ([#38388](https://github.com/WordPress/gutenberg/pull/38388)).\n```\n\n----------------------------------------\n\nTITLE: Configuring WordPress Plugin Templates Path in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates setting a custom path for WordPress plugin templates using the 'pluginTemplatesPath' configuration field. It utilizes the Node.js 'path' module to resolve the path to the 'plugin-templates' directory. This customization allows developers to override default template files with their own.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/create-block/docs/external-template.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { join } = require( 'path' );\n\nmodule.exports = {\n\tpluginTemplatesPath: join( __dirname, 'plugin-templates' ),\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Paragraph Block HTML Structure\nDESCRIPTION: Shows the basic HTML markup for a paragraph block in its simplest form. This is the starting point before any user modifications or styling is applied.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/explanations/architecture/styles.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<p></p>\n```\n\n----------------------------------------\n\nTITLE: Installing WordPress Style Engine Module\nDESCRIPTION: This Bash command installs the WordPress Style Engine via npm. The package is intended for environments supporting ES2015+ syntax. Developers need to include a polyfill if the environment has limited support for ES2015+ features.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/style-engine/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @wordpress/style-engine --save\n```\n\n----------------------------------------\n\nTITLE: Running JavaScript Unit Tests for Style Engine\nDESCRIPTION: Command to execute JavaScript unit tests for the style-engine package in the Gutenberg project. This runs tests located in the packages/style-engine/src/test/ directory.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/style-engine/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm run test:unit packages/style-engine/src/test/\n```\n\n----------------------------------------\n\nTITLE: Axe API Integration\nDESCRIPTION: This snippet describes a new feature in Gutenberg v1.2.0, adding Axe (the Accessibility Engine) API integration with the e2e tests suite. This enhances accessibility testing capabilities within the Gutenberg project.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/e2e-tests/CHANGELOG.md#2025-04-21_snippet_11\n\nLANGUAGE: None\nCODE:\n```\nAdded Axe (the Accessibility Engine) API integration with e2e tests suite.\n```\n\n----------------------------------------\n\nTITLE: Adding --blocks-manifest CLI Flag in JavaScript\nDESCRIPTION: Adds a new CLI flag to generate a PHP file containing block metadata from all block.json files in the project.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/scripts/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n--blocks-manifest\n```\n\n----------------------------------------\n\nTITLE: Displaying Gray Tones Color Palette\nDESCRIPTION: Creates a color palette section displaying the gray scale colors from 100-900 using Storybook's ColorPalette and ColorItem components.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/storybook/stories/tokens/color.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<ColorPalette>\n\t<ColorItem\n\t\ttitle=\"Gray Tones\"\n\t\tsubtitle=\"\"\n\t\tcolors={{\n\t\t\t'$gray-900': '#1e1e1e',\n\t\t\t'$gray-800': '#2f2f2f',\n\t\t\t'$gray-700': '#757575',\n\t\t\t'$gray-600': '#949494',\n\t\t\t'$gray-400': '#ccc',\n\t\t\t'$gray-300': '#ddd',\n\t\t\t'$gray-200': '#e0e0e0',\n\t\t\t'$gray-100': '#f0f0f0',\n\t\t}}\n\t/>\n</ColorPalette>\n```\n\n----------------------------------------\n\nTITLE: Gutenberg Paragraph Block - Second Block\nDESCRIPTION: This code snippet represents a second paragraph block in the WordPress Gutenberg editor.  It uses HTML comments to define the block and a paragraph tag to contain the block's content. The content of this block is 'Second block'.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/test/e2e/specs/editor/various/__snapshots__/Copy-cut-paste-should-respect-inline-copy-when-text-is-selected-1-chromium.txt#2025-04-21_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- wp:paragraph -->\n<p>Second block</p>\n<!-- /wp:paragraph -->\n```\n\n----------------------------------------\n\nTITLE: Starting the Metro Packager\nDESCRIPTION: Command to start the Metro bundler in development mode with a reset, which serves the app bundle to client requests.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/react-native/getting-started-react-native.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm run native start:reset\n```\n\n----------------------------------------\n\nTITLE: Creating a Gutenberg List Block\nDESCRIPTION: This HTML snippet defines a Gutenberg list block using comments. It creates an unordered list (`<ul>`) containing a single list item (`<li>`). The `wp:list` and `wp:list-item` comments are used by Gutenberg to identify and manage the blocks.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/test/e2e/specs/editor/various/__snapshots__/Copy-cut-paste-should-paste-preformatted-in-list-1-chromium.txt#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>xy</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n```\n\n----------------------------------------\n\nTITLE: Variable Replacement\nDESCRIPTION: This snippet describes a breaking change in Gutenberg v8.0.0, where variables like `process.env.IS_GUTENBERG_PLUGIN` have been replaced with `globalThis.IS_GUTENBERG_PLUGIN`. Build systems using `process.env` should be updated.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/e2e-tests/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: None\nCODE:\n```\nVariables like `process.env.IS_GUTENBERG_PLUGIN` have been replaced by `globalThis.IS_GUTENBERG_PLUGIN`. Build systems using `process.env` should be updated ([#61486](https://github.com/WordPress/gutenberg/pull/61486)).\n```\n\n----------------------------------------\n\nTITLE: Installing WordPress Notices Package\nDESCRIPTION: Command to install the @wordpress/notices package via npm package manager. This package provides state management functionality for notices in WordPress/Gutenberg.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/notices/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @wordpress/notices\n```\n\n----------------------------------------\n\nTITLE: Implementing QueryControls for Multiple Category Selection in React\nDESCRIPTION: This snippet shows how to implement multiple category selection using the QueryControls component in React. It leverages categorySuggestions and selectedCategories props for managing multiple categories. The feature supports dynamically updating UI controls for order, numberOfItems, and categories based on user input through the updateQuery function.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/query-controls/README.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst QUERY_DEFAULTS = {\n    orderBy: 'title',\n    order: 'asc',\n    selectedCategories: [\n        {\n            id: 1,\n            value: 'Category 1',\n            parent: 0,\n        },\n        {\n            id: 2,\n            value: 'Category 1b',\n            parent: 1,\n        },\n    ],\n    categories: {\n        'Category 1': {\n            id: 1,\n            name: 'Category 1',\n            parent: 0,\n        },\n        'Category 1b': {\n            id: 2,\n            name: 'Category 1b',\n            parent: 1,\n        },\n        'Category 2': {\n            id: 3,\n            name: 'Category 2',\n            parent: 0,\n        },\n    },\n    numberOfItems: 10,\n};\n\nconst MyQueryControls = () => {\n    const [ query, setQuery ] = useState( QUERY_DEFAULTS );\n    const { orderBy, order, selectedCategories, categories, numberOfItems } = query;\n\n    const updateQuery = ( newQuery ) => {\n        setQuery( { ...query, ...newQuery } );\n    };\n\n    return (\n        <QueryControls\n            { ...{ orderBy, order, numberOfItems } }\n            onOrderByChange={ ( newOrderBy ) => updateQuery( { orderBy: newOrderBy } ) }\n            onOrderChange={ ( newOrder ) => updateQuery( { order: newOrder } ) }\n            categorySuggestions={ categories }\n            selectedCategories={ selectedCategories }\n            onCategoryChange={ ( category ) => updateQuery( { selectedCategories: category } ) }\n            onNumberOfItemsChange={ ( newNumberOfItems ) =>\n                updateQuery( { numberOfItems: newNumberOfItems } )\n            }\n        />\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing BottomSheetSubSheet in React Native for WordPress\nDESCRIPTION: A complete example demonstrating how to implement the BottomSheetSubSheet component from WordPress components in a React Native application. The example shows navigation setup, state management for sheet visibility, and proper implementation of the sub-sheet UI with navigation controls.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/mobile/bottom-sheet/sub-sheet/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n/**\n * External dependencies\n */\nimport { useState } from 'react';\nimport { SafeAreaView, View } from 'react-native';\nimport { useNavigation } from '@react-navigation/native';\n\n/**\n * WordPress dependencies\n */\nimport { Icon, chevronRight } from '@wordpress/icons';\nimport { BottomSheet } from '@wordpress/components';\n\nconst ExampleControl = () => {\n\tconst [ showSubSheet, setShowSubSheet ] = useState( false );\n\tconst navigation = useNavigation();\n\n\tconst goBack = () => {\n\t\tsetShowSubSheet( false );\n\t\tnavigation.goBack();\n\t};\n\n\tconst openSubSheet = () => {\n\t\tnavigation.navigate( BottomSheet.SubSheet.screenName );\n\t\tsetShowSubSheet( true );\n\t};\n\n\treturn (\n\t\t<BottomSheet.SubSheet\n\t\t\tnavigationButton={\n\t\t\t\t<BottomSheet.Cell\n\t\t\t\t\tlabel={ 'Howdy' }\n\t\t\t\t\tseparatorType=\"none\"\n\t\t\t\t\tonPress={ openSubSheet }\n\t\t\t\t\taccessibilityRole={ 'button' }\n\t\t\t\t\taccessibilityLabel={ 'Howdy' }\n\t\t\t\t\taccessibilityHint={ 'Navigates to Howdy bottom sheet' }\n\t\t\t\t>\n\t\t\t\t\t<Icon icon={ chevronRight }></Icon>\n\t\t\t\t</BottomSheet.Cell>\n\t\t\t}\n\t\t\tshowSheet={ showSubSheet }\n\t\t>\n\t\t\t<>\n\t\t\t\t<BottomSheet.NavBar>\n\t\t\t\t\t<BottomSheet.NavBar.BackButton onPress={ goBack } />\n\t\t\t\t\t<BottomSheet.NavBar.Heading>{ 'Howdy' }</BottomSheet.NavBar.Heading>\n\t\t\t\t</BottomSheet.NavBar>\n\t\t\t\t<View paddingHorizontal={ 16 }>\n\t\t\t\t\t<Text>{ 'World' }</Text>\n\t\t\t\t</View>\n\t\t\t</>\n\t\t</BottomSheet.SubSheet>\n\t);\n};\n\nexport default ExampleControl;\n```\n\n----------------------------------------\n\nTITLE: NavigableToolbar Props Documentation in Markdown\nDESCRIPTION: Documents the focusOnMount prop which controls initial focus behavior when the component mounts. The prop is marked as deprecated.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/src/components/navigable-toolbar/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# NavigableToolbar\n\nA toolbar that can be navigated with a keyboard\n\n## Props\n\nThe component accepts the following props. Props not included in this set will be applied to the element wrapping NavigableMenu content.\n\n## `focusOnMount`\n\n_Note: this prop is deprecated._\n\nWhether to immediately focus when the component mounts.\n\n- Type: `Boolean`\n- Required: No\n- Default: false\n```\n\n----------------------------------------\n\nTITLE: Installing Block Serialization Parser Package\nDESCRIPTION: Command to install the @wordpress/block-serialization-default-parser package using npm\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-serialization-default-parser/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @wordpress/block-serialization-default-parser --save\n```\n\n----------------------------------------\n\nTITLE: Listing Repository Management Topics in Markdown\nDESCRIPTION: This snippet outlines the repository management topics using Markdown formatting. It provides links to specific sections covering issue management, pull requests, and teams and projects.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/README.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n-   [Issue Management](/docs/contributors/repository-management.md#issues)\n\n-   [Pull Requests](/docs/contributors/repository-management.md#pull-requests)\n\n-   [Teams and Projects](/docs/contributors/repository-management.md#teams)\n```\n\n----------------------------------------\n\nTITLE: Node.js Version Requirement Update - v12\nDESCRIPTION: Breaking change documentation for increasing minimum required Node.js version to v12 in version 4.0.0\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-serialization-spec-parser/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n-   Increase the minimum Node.js version to v12 matching Long Term Support releases ([#31270](https://github.com/WordPress/gutenberg/pull/31270)). Learn more at https://nodejs.org/en/about/releases/.\n```\n\n----------------------------------------\n\nTITLE: Defining a Paragraph Block in Gutenberg\nDESCRIPTION: This snippet defines a simple paragraph block in Gutenberg. The block is represented using an HTML-like syntax within HTML comments. The paragraph contains the text 'Paragraph'.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/test/e2e/specs/editor/various/__snapshots__/Copy-cut-paste-should-paste-plain-text-in-plain-text-context-when-cross-block-selection-is-copied-1-chromium.txt#2025-04-21_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- wp:paragraph -->\n<p>Paragraph</p>\n<!-- /wp:paragraph -->\n```\n\n----------------------------------------\n\nTITLE: Package.json Type Declarations Configuration\nDESCRIPTION: Configuration for exposing TypeScript type declarations in package.json, specifying main entry points and types directory.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/README.md#2025-04-21_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"main\": \"build/index.js\",\n\t\"module\": \"build-module/index.js\",\n\t\"types\": \"build-types\"\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Code Editor Access in PHP\nDESCRIPTION: PHP function to disable access to the Code Editor for all users in the block editor.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/curating-the-editor-experience/disable-editor-functionality.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nfunction example_restrict_code_editor_access( $settings, $context ) {\n    $settings[ 'codeEditingEnabled' ] = false;\n\n\treturn $settings;\n}\nadd_filter( 'block_editor_settings_all', 'example_restrict_code_editor_access', 10, 2 );\n```\n\n----------------------------------------\n\nTITLE: Running Template Command for WordPress Block\nDESCRIPTION: This Bash command runs the '@wordpress/create-block' package with the specified tutorial template for creating a 'Copyright Date' block. It initiates the block creation process using default options when prompted, highlighting a practical example in the WordPress block development Quick Start Guide.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/create-block-tutorial-template/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @wordpress/create-block --template @wordpress/create-block-tutorial-template\n```\n\n----------------------------------------\n\nTITLE: Installing WordPress Format Library Package\nDESCRIPTION: Command to install the @wordpress/format-library package via npm. Requires an ES2015+ environment or appropriate polyfills from @wordpress/babel-preset-default.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/format-library/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @wordpress/format-library --save\n```\n\n----------------------------------------\n\nTITLE: Breaking Change: Increasing Minimum Node.js Version for WordPress Gutenberg Package\nDESCRIPTION: This snippet documents a breaking change that increases the minimum required Node.js version to v18.12.0 for the package. It includes a reference to the related GitHub pull request and a link for more information about Node.js releases.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/token-list/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Breaking Changes\n\n-   Increase the minimum required Node.js version to v18.12.0 matching long-term support releases ([#31270](https://github.com/WordPress/gutenberg/pull/61930)). Learn more about [Node.js releases](https://nodejs.org/en/about/previous-releases).\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies\nDESCRIPTION: Command to install project dependencies using npm.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/react-native/osx-setup-guide.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm ci\n```\n\n----------------------------------------\n\nTITLE: Installing WordPress Components Package\nDESCRIPTION: Command to install the @wordpress/components package using npm.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @wordpress/components --save\n```\n\n----------------------------------------\n\nTITLE: Installing WordPress VIPS Package with npm\nDESCRIPTION: Command to install the @wordpress/vips package using npm package manager. This package is required to interact with wasm-vips for image processing operations.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/vips/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @wordpress/vips --save\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Non-Side Effects in JavaScript Module\nDESCRIPTION: This snippet shows examples of operations that are not considered side effects because they only affect the current module and don't have external impacts.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/side-effects.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport list from './list';\n\n// Not a side effect.\nlet localVariable = [];\n// Not a side effect, either.\nfor ( const entry of list ) {\n\tlocalVariable.push( processListEntry( entry ) );\n}\n```\n\n----------------------------------------\n\nTITLE: Data Selection with wp.data\nDESCRIPTION: Updated syntax for selecting data using wp.data with reducer key\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/deprecations.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nwp.data.select('reducerKey').*\n```\n\n----------------------------------------\n\nTITLE: Getting Edit for Undo - JavaScript\nDESCRIPTION: This deprecated function returns the previous edit available for undo based on the current undo offset, using the application state as input.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n// getUndoEdit\n\nfunction getUndoEdit( state ) {\n    // Implementation here\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Pagination Navigation - Gutenberg (Markdown)\nDESCRIPTION: This snippet defines a block to navigate through paginated results, enabling users to go to next or previous sets of posts.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/core-blocks.md#2025-04-21_snippet_16\n\nLANGUAGE: markdown\nCODE:\n```\n- **Name:** core/query-pagination\n- **Category:** theme\n- **Ancestor:** core/query\n- **Allowed Blocks:** core/query-pagination-previous, core/query-pagination-numbers, core/query-pagination-next\n- **Supports:** align, color (background, gradients, link, text), interactivity (clientNavigation), layout (default, ~~allowInheriting~~, ~~allowSwitching~~), typography (fontSize, lineHeight), ~~html~~, ~~reusable~~\n- **Attributes:** paginationArrow, showLabel\n```\n\n----------------------------------------\n\nTITLE: Installing WordPress NPM Package JSON Lint Config\nDESCRIPTION: Command to install the WordPress npm-package-json-lint configuration package using npm.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/npm-package-json-lint-config/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ npm install @wordpress/npm-package-json-lint-config\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Class to WordPress Pattern Group Block\nDESCRIPTION: Example of adding a custom theme-specific class to a Group block wrapper in a WordPress pattern. This allows theme authors to maintain some CSS control over pattern styling through theme updates, though users can still modify the class through the editor UI.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/propagating-updates.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- wp:group {\"className\":\"themeslug-special\"} -->\n<div class=\"wp-block-group themeslug-special\">\n\t<!-- Nested pattern blocks -->\n</div>\n<!-- /wp:group -->\n```\n\n----------------------------------------\n\nTITLE: Implementing i18n.ngettext Filter Callback in JavaScript\nDESCRIPTION: Defines a callback function for the i18n.ngettext filter. This function receives the translation, singular and plural forms, number, and domain as arguments and returns the modified translation.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/filters/i18n-filters.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nfunction i18nNgettextCallback( translation, single, plural, number, domain ) {\n\treturn translation;\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Comment - Changelog Maintenance Instructions\nDESCRIPTION: HTML comment providing a link to documentation about maintaining the changelog file\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/is-shallow-equal/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- Learn how to maintain this file at https://github.com/WordPress/gutenberg/tree/HEAD/packages#maintaining-changelogs. -->\n```\n\n----------------------------------------\n\nTITLE: Disabling Custom Gradients in WordPress Themes\nDESCRIPTION: This PHP snippet demonstrates how to disable the ability to set custom gradients in the WordPress block editor. It restricts users to the default gradients or those provided via the 'editor-gradient-presets' theme support.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/themes/theme-support.md#2025-04-21_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nadd_theme_support( 'disable-custom-gradients' );\n```\n\n----------------------------------------\n\nTITLE: Importing WordPress dependencies in JavaScript\nDESCRIPTION: Shows the proper way to import modules from WordPress packages. The commented section clearly identifies these imports as WordPress dependencies.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/coding-guidelines.md#2025-04-21_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n/**\n * WordPress dependencies\n */\nimport { __ } from '@wordpress/i18n';\n```\n\n----------------------------------------\n\nTITLE: Integrating Create Button in Main App Component\nDESCRIPTION: Shows how to integrate the create page button into the main application component alongside search control and pages list.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/data-basics/4-building-a-create-page-form.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction MyFirstApp() {\n\t// ...\n\treturn (\n\t\t<div>\n\t\t\t<div className=\"list-controls\">\n\t\t\t\t<SearchControl onChange={ setSearchTerm } value={ searchTerm }/>\n\t\t\t\t<CreatePageButton/>\n\t\t\t</div>\n\t\t\t<PagesList hasResolved={ hasResolved } pages={ pages }/>\n\t\t</div>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Symlinks for E2E Test Plugins\nDESCRIPTION: Command to create symbolic links to the Gutenberg E2E test plugins in the WordPress plugins directory, necessary for running end-to-end tests with Local or MAMP.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/getting-started-with-code-contribution.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nln -s gutenberg/packages/e2e-tests/plugins/* .\n```\n\n----------------------------------------\n\nTITLE: Running Basic Installation and Build Commands in Shell\nDESCRIPTION: A simple shell script example showing the commands to install dependencies and build a project. This demonstrates how code snippets should be used within the how-to guide to illustrate steps.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/documentation/how-to-guide-template.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests for Mobile Gutenberg\nDESCRIPTION: Command to run the Jest test suite for testing the React Native components and functionality.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/react-native/getting-started-react-native.md#2025-04-21_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nnpm run test:native\n```\n\n----------------------------------------\n\nTITLE: Basic Console Error Testing\nDESCRIPTION: Example test suite demonstrating basic usage of toHaveErrored() matcher with a drink flavor testing scenario.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/jest-console/README.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe( 'drinkAll', () => {\n\ttest( 'drinks something lemon-flavored', () => {\n\t\tdrinkAll( 'lemon' );\n\t\texpect( console ).not.toHaveErrored();\n\t} );\n\n\ttest( 'errors when something is octopus-flavored', () => {\n\t\tdrinkAll( 'octopus' );\n\t\texpect( console ).toHaveErrored();\n\t} );\n} );\n```\n\n----------------------------------------\n\nTITLE: Viewport Rendering Rules for Non-Edit Canvas Mode\nDESCRIPTION: Describes the rendering behavior of different areas in non-mobile and mobile viewports when canvas mode is not set to edit\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/edit-site/src/components/site-editor-routes/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Area | Non-mobile viewport | Mobile viewport |\n| --- | --- | --- |\n| `sidebar` | Always rendered. | Only if `mobile` is not provided. |\n| `content` | Rendered if provided. | Not rendered. |\n| `preview` | Rendered if provided. | Not rendered. |\n| `edit` | Rendered if provided. | Not rendered. |\n| `mobile` | Not rendered | Rendered as full-screen, if provided. |\n```\n\n----------------------------------------\n\nTITLE: Package Side Effects Configuration - Simple\nDESCRIPTION: Package.json configuration for declaring a package has no side effects, enabling better tree-shaking by bundlers.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/README.md#2025-04-21_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"name\": \"package\",\n\t\"sideEffects\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Component Versioning\nDESCRIPTION: This section outlines the strategies for managing component versioning in Gutenberg, especially when rewriting components. Key strategies include maintaining the existing API surface while altering implementations, creating new components for significant changes, and ensuring backward compatibility as needed. The expected input is the current component implementation, and outputs are the updated components along with potentially new versions for public use.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/CONTRIBUTING.md#2025-04-21_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n## Component versioning\n\nAs the needs of the package evolve with time, sometimes we may opt to fully rewrite an existing component — either to introduce substantial changes, support new features, or swap the implementation details.\n\n### Glossary\n\nHere is some terminology that will be used in the upcoming sections:\n\n-   \"Legacy\" component: the version(s) of the component that existsted on `trunk` before the rewrite;\n-   API surface: the component's public APIs. It includes the list of components (and subcomponents) exported from the package, their props, any associated React context. It does not include internal classnames and internal DOM structure of the components.\n```\n\n----------------------------------------\n\nTITLE: Updating Polyfill Handling for ES2015+ Support in JavaScript\nDESCRIPTION: Changes have been made to how required built-ins are polyfilled with Babel 7. For environments with limited ES2015+ support, use core-js or @babel/polyfill to add support for these methods.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/blocks/CHANGELOG.md#2025-04-21_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport 'core-js';\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport '@babel/polyfill';\n```\n\n----------------------------------------\n\nTITLE: Setting Up Storybook Meta Component for Layout Documentation\nDESCRIPTION: Configures the Storybook Meta component to define this documentation as a layout foundation page in the Storybook navigation.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/storybook/stories/foundations/layout.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Meta title=\"Foundations/Layout\" name=\"page\" />\n```\n\n----------------------------------------\n\nTITLE: Paragraph Block in Gutenberg\nDESCRIPTION: WordPress Gutenberg paragraph block with simple text content wrapped in paragraph tags\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/test/e2e/specs/editor/various/__snapshots__/Copy-cut-paste-should-copy-paste-partial-selection-with-other-blocks-in-between-2-chromium.txt#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- wp:paragraph -->\n<p>block</p>\n<!-- /wp:paragraph -->\n```\n\n----------------------------------------\n\nTITLE: Defining Query Loop - Gutenberg (Markdown)\nDESCRIPTION: This snippet defines an advanced block for displaying post types based on various query parameters in a specified format.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/core-blocks.md#2025-04-21_snippet_14\n\nLANGUAGE: markdown\nCODE:\n```\n- **Name:** core/query\n- **Category:** theme\n- **Supports:** align (full, wide), interactivity, layout, ~~html~~\n- **Attributes:** enhancedPagination, namespace, query, queryId, tagName\n```\n\n----------------------------------------\n\nTITLE: Installing @wordpress/router package using npm\nDESCRIPTION: This command installs the @wordpress/router package and saves it as a dependency in your project. The package provides browser routing functionality for WordPress packages.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/router/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @wordpress/router --save\n```\n\n----------------------------------------\n\nTITLE: Puppeteer and Jest Dependency Update\nDESCRIPTION: This snippet describes breaking changes in Gutenberg v3.0.0 related to peer dependencies. `puppeteer` was replaced with `puppeteer-core` requiring version `>=11`, and `jest` was updated to require version `>=27`.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/e2e-tests/CHANGELOG.md#2025-04-21_snippet_6\n\nLANGUAGE: None\nCODE:\n```\nThe peer `puppeteer` dependency has been replaced with `puppeteer-core` requiring version `>=11` (see [Breaking Changes](https://github.com/puppeteer/puppeteer/releases/tag/v11.0.0), [#36040](https://github.com/WordPress/gutenberg/pull/36040)).\nThe peer `jest` dependency has been updated from requiring `>=26` to requiring `>=27` (see [Breaking Changes](https://jestjs.io/blog/2021/05/25/jest-27), [#33287](https://github.com/WordPress/gutenberg/pull/33287)).\n```\n\n----------------------------------------\n\nTITLE: Importing external dependencies in JavaScript\nDESCRIPTION: Demonstrates the conventional way to import third-party dependencies in Gutenberg. Uses a multi-line comment to identify the source as an external dependency.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/coding-guidelines.md#2025-04-21_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n/**\n * External dependencies\n */\nimport moment from 'moment';\n```\n\n----------------------------------------\n\nTITLE: Creating Spacer Block in HTML - WordPress Gutenberg\nDESCRIPTION: This snippet is identical to the previous one, creating another 100 pixel high spacer block in the WordPress Gutenberg editor. It serves the same purpose, ensuring proper spacing between other blocks for better visual formatting.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/test/e2e/specs/editor/various/__snapshots__/Copy-cut-paste-should-copy-blocks-when-non-textual-elements-are-focused-image-spacer-2-chromium.txt#2025-04-21_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- wp:spacer -->\n<div style=\"height:100px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n```\n\n----------------------------------------\n\nTITLE: Installing WordPress Dependency Extraction Plugin\nDESCRIPTION: Install the Dependency Extraction Webpack Plugin via npm to manage shared dependencies in WordPress projects. Requires Node.js with LTS and webpack 5.0.0 or newer.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/dependency-extraction-webpack-plugin/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @wordpress/dependency-extraction-webpack-plugin --save-dev\n```\n\n----------------------------------------\n\nTITLE: Receiving Theme Supports - JavaScript\nDESCRIPTION: Deprecated function used to signal that the theme supports index has been received. This function is retained for legacy support and may be removed in future versions.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core.md#2025-04-21_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nreceiveThemeSupports() {\n  // Deprecated since WP 5.9, this is not useful anymore, use the selector directly.\n  // Returns an action object used in signalling that the index has been received.\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Storybook Meta Information for Radius Documentation\nDESCRIPTION: Configures the Storybook metadata for the Radius documentation page, setting its title and name within the documentation hierarchy.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/storybook/stories/foundations/design-language/radius.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Meta title=\"Foundations/Design Language/Radius\" name=\"page\" />\n```\n\n----------------------------------------\n\nTITLE: Regenerating WordPress Fixture Files using npm\nDESCRIPTION: This shell command is used to regenerate the necessary fixture files based on the initial post content. It automates the creation of the parsed and serialized JSON outputs from the original HTML file.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/test/integration/fixtures/blocks/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm run fixtures:regenerate\n```\n\n----------------------------------------\n\nTITLE: PHP Opening Tag in WordPress Gutenberg Block\nDESCRIPTION: A simple example showing the PHP opening tag in a WordPress Gutenberg code block. This represents the beginning of a PHP script section in WordPress.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/test/e2e/specs/editor/blocks/__snapshots__/Code-can-be-created-by-three-backticks-and-enter-1-chromium.txt#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n```\n\n----------------------------------------\n\nTITLE: Creating Constrained Group with Paragraph Blocks in Gutenberg\nDESCRIPTION: This HTML snippet demonstrates the structure of WordPress Gutenberg blocks, specifically a constrained group block containing two paragraph blocks with numeric content. The content uses Gutenberg's HTML comment format to define block types and attributes.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/test/e2e/specs/editor/blocks/__snapshots__/Group-can-merge-into-group-with-Backspace-2-chromium.txt#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"}} -->\n<div class=\"wp-block-group\"><!-- wp:paragraph -->\n<p>1</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>2</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:group -->\n```\n\n----------------------------------------\n\nTITLE: Updating Block Category in React Component (JavaScript)\nDESCRIPTION: This example shows how to use the updateCategory function to modify an existing block category. In this case, it updates the title of the 'text' category to 'Written Word'.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/blocks/README.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { __ } from '@wordpress/i18n';\nimport { updateCategory } from '@wordpress/blocks';\nimport { Button } from '@wordpress/components';\n\nconst ExampleComponent = () => {\n\treturn (\n\t\t<Button\n\t\t\tonClick={ () => {\n\t\t\t\tupdateCategory( 'text', { title: __( 'Written Word' ) } );\n\t\t\t} }\n\t\t>\n\t\t\t{ __( 'Update Text category title' ) }\n\t\t</Button>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Declaring Specific Files with Side Effects in package.json\nDESCRIPTION: This JSON snippet demonstrates how to declare specific files that have side effects in a package's package.json, allowing bundlers to tree-shake other files.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/side-effects.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"name\": \"package\",\n\t\"sideEffects\": [ \"dist/store/index.js\", \"dist/polyfill/index.js\" ]\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Inherit Default Layout in theme.json\nDESCRIPTION: This snippet shows the JSON configuration that should be removed to disable the \"Inherit default layout\" setting for container blocks like the Group block.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/curating-the-editor-experience/theme-json.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"layout\": {\n\t\"contentSize\": null,\n\t\"wideSize\": null\n},\n```\n\n----------------------------------------\n\nTITLE: Gutenberg Paragraph Block HTML\nDESCRIPTION: This HTML snippet defines a Gutenberg paragraph block. It uses HTML comments to mark the beginning and end of the block, and the paragraph element contains the block's content.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/test/e2e/specs/editor/various/__snapshots__/Copy-cut-paste-should-copy-only-partial-selection-of-text-blocks-2-chromium.txt#2025-04-21_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- wp:paragraph -->\n<p>B </p>\n<!-- /wp:paragraph -->\n```\n\n----------------------------------------\n\nTITLE: Setting Prettier Config in .prettierrc.js\nDESCRIPTION: This JavaScript snippet demonstrates how to configure Prettier using module.exports in a .prettierrc.js file.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/prettier-config/README.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = require( '@wordpress/prettier-config' );\n```\n\n----------------------------------------\n\nTITLE: HTML Comment for Changelog Maintenance\nDESCRIPTION: Comment providing a link to documentation about maintaining changelog files in the WordPress Gutenberg repository\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/fields/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- Learn how to maintain this file at https://github.com/WordPress/gutenberg/tree/HEAD/packages#maintaining-changelogs. -->\n```\n\n----------------------------------------\n\nTITLE: Embedding Deprecated Node Matcher Block\nDESCRIPTION: This snippet integrates a deprecated node matcher block into a WordPress Gutenberg post. It forms part of a backward compatibility feature for older content. The expected input is the `blockquote` HTML element representing the block.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/test/e2e/specs/editor/plugins/__snapshots__/Deprecated-Node-Matcher-should-insert-block-with-node-source-1-chromium.txt#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- wp:deprecated-node-matcher -->\n<blockquote class=\"wp-block-deprecated-node-matcher\"><p>test</p><p></p></blockquote>\n<!-- /wp:deprecated-node-matcher -->\n```\n\n----------------------------------------\n\nTITLE: Referencing a Specific Version of WordPress Schema\nDESCRIPTION: Demonstrates how to reference a specific version of a WordPress schema, using the wp/X.X version format instead of trunk for backward compatibility.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/schemas/README.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"$schema\": \"https://schemas.wp.org/wp/5.8/block.json\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing WordPress Block Serialization Parser\nDESCRIPTION: npm command to install the @wordpress/block-serialization-spec-parser package as a project dependency.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-serialization-spec-parser/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @wordpress/block-serialization-spec-parser --save\n```\n\n----------------------------------------\n\nTITLE: Configuring VSCode Editor Settings for Markdown\nDESCRIPTION: JSON configuration for Visual Studio Code to use Prettier for automatic markdown formatting on save.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/documentation/README.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"[[markdown]]\": {\n    \"editor.defaultFormatter\": \"esbenp.prettier-vscode\",\n    \"editor.formatOnSave\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Strings with Additional Plugins in Gutenberg React Native\nDESCRIPTION: Shell command to extract strings from the React Native editor including extra plugins. Requires domain names and source paths for each additional plugin.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/react-native/internationalization-guide.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm run native i18n:extract-used-strings -- \"$PWD/used-strings.json\" \"domain-plugin-1\" <PLUGIN-1_SOURCE_PATH> \"domain-plugin-2\" <PLUGIN-2_SOURCE_PATH> ...\n```\n\n----------------------------------------\n\nTITLE: Legacy Component Management Approaches\nDESCRIPTION: This section describes the approaches for managing legacy components when updates are necessary. Strategies include swapping implementations while keeping the same API surface, and creating new components for improved functionality. This ensures that previous users can transition smoothly and components remain tree-shakeable.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/CONTRIBUTING.md#2025-04-21_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n### Approaches\n\nWe identified two approaches to the task.\n\n#### Swap the implementation, keep the same API surface\n\nOne possible approach is to keep the existing API surface and only swap the internal implementation of the component.\n\nThis is by far the simplest approach, since it doesn't involve making changes to the API surface.\n\nIf the existing API surface is not a good fit for the new implementation, or if it is not possible (or simply not desirable) to preserve backward compatibility with the existing implementation, there is another approach that can be used.\n\n#### Create a new component (or component family)\n\nThis second approach involves creating a new, separate version (ie. export) of the component. Having two separate exports will help to keep the package tree-shakeable, and it will make it easier to potentially deprecated and remove the legacy component.\n```\n\n----------------------------------------\n\nTITLE: Correct BaseControl Usage - With ID\nDESCRIPTION: Examples of correct BaseControl component implementation showing proper usage patterns including cases with no props, with only id, and with both label and id props.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/eslint-plugin/docs/rules/no-base-control-with-label-without-id.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<BaseControl />\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<BaseControl id=\"my-id\">\n\t<input id=\"my-id\" />\n</BaseControl>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<BaseControl label=\"ok\" id=\"my-id\">\n\t<input id=\"my-id\" />\n</BaseControl>\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry Header\nDESCRIPTION: HTML comment providing documentation link for maintaining changelog files in WordPress Gutenberg packages.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/npm-package-json-lint-config/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- Learn how to maintain this file at https://github.com/WordPress/gutenberg/tree/HEAD/packages#maintaining-changelogs. -->\n```\n\n----------------------------------------\n\nTITLE: Core Edit-Site Store Selectors Definition\nDESCRIPTION: A collection of selector functions for accessing and manipulating edit-site store state, including template management, user capabilities, editor modes and UI states.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core-edit-site.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngetCanUserCreateMedia( state ) => Object\ngetCurrentTemplateTemplateParts( state ) => Array\ngetEditedPostContext( state ) => Object\ngetEditedPostId( state ) => string\ngetEditedPostType( state ) => TemplateType\ngetEditorMode( state ) => string\ngetPage( state ) => Object\ngetReusableBlocks( state ) => Array\ngetSettings( state ) => Object\nhasPageContentFocus() => boolean\nisFeatureActive( state, featureName ) => boolean\nisInserterOpened( state ) => boolean\nisListViewOpened( state ) => boolean\nisPage( state ) => boolean\nisSaveViewOpened( state ) => boolean\n```\n\n----------------------------------------\n\nTITLE: Building URL-encoded Query String in JavaScript\nDESCRIPTION: Shows the usage of buildQueryString function to generate a URL-encoded query string from an object. It handles nested objects and arrays, mimicking PHP's http_build_query behavior.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/url/README.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst queryString = buildQueryString( {\n\tsimple: 'is ok',\n\tarrays: [ 'are', 'fine', 'too' ],\n\tobjects: {\n\t\tevenNested: {\n\t\t\tok: 'yes',\n\t\t},\n\t},\n} );\n// \"simple=is%20ok&arrays%5B0%5D=are&arrays%5B1%5D=fine&arrays%5B2%5D=too&objects%5BevenNested%5D%5Bok%5D=yes\"\n```\n\n----------------------------------------\n\nTITLE: Basic Package.json Configuration\nDESCRIPTION: Basic configuration to extend WordPress npm-package-json-lint rules in package.json file.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/npm-package-json-lint-config/README.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"npmpackagejsonlint\": {\n\t\"extends\": \"@wordpress/npm-package-json-lint-config\",\n},\n```\n\n----------------------------------------\n\nTITLE: Configuring Field Filters (JavaScript)\nDESCRIPTION: Examples of configuring filters for fields, including setting primary filters and defining supported operators for single and multi-selection filtering.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/dataviews/README.md#2025-04-21_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\n{\n\tfilterBy: {\n\t\tisPrimary: true;\n\t}\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n\tfilterBy: {\n\t\toperators: [ `is`, `isNot` ];\n\t}\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n\tfilterBy: {\n\t\toperators: [ `isAny`, `isNone`, `isAll`, `isNotAll` ];\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Widget Area Actions Implementation - JavaScript\nDESCRIPTION: Collection of action creators for managing widget areas, including saving, moving blocks, managing sidebar state, and handling widget area open states.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core-edit-widgets.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncloseGeneralSidebar()\nmoveBlockToWidgetArea( clientId, widgetAreaId )\npersistStubPost( id, blocks )\nsaveEditedWidgetAreas()\nsaveWidgetArea( widgetAreaId )\nsaveWidgetAreas( widgetAreas )\nsetIsInserterOpened( value )\nsetIsListViewOpened( isOpen )\nsetIsWidgetAreaOpen( clientId, isOpen )\nsetWidgetAreasOpenState( widgetAreasOpenState )\nsetWidgetIdForClientId( clientId, widgetId )\n```\n\n----------------------------------------\n\nTITLE: Deprecate getIsResolved meta-selector\nDESCRIPTION: This update specifies that the getIsResolved meta-selector has been deprecated in the 9.24.0 release.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/data/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n-   Deprecate the `getIsResolved` meta-selector ([#59679](https://github.com/WordPress/gutenberg/pull/59679)).\n```\n\n----------------------------------------\n\nTITLE: Adding API Documentation Tokens in Package README\nDESCRIPTION: Markdown comment template for marking sections in a README file where API documentation will be automatically generated from source code.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/README.md#2025-04-21_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- START TOKEN(Autogenerated API docs) -->\n\nContent within the HTML comment will be replaced by the generated documentation.\n\n<!-- END TOKEN(Autogenerated API docs) -->\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Versions of Dependencies for WordPress Packages\nDESCRIPTION: Command for installing a specific version of a dependency for a WordPress package, using the @latest suffix to enforce the latest version.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install change-case@latest -w packages/a11y\n```\n\n----------------------------------------\n\nTITLE: Installing the NUX module with npm\nDESCRIPTION: This command installs the @wordpress/nux package as a dependency using npm. The `--save` flag ensures that the package is added to the project's package.json file.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/nux/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @wordpress/nux --save\n```\n\n----------------------------------------\n\nTITLE: Registering Block Types from Metadata Collection in PHP\nDESCRIPTION: PHP code example demonstrating how to register all block types from a metadata collection using the generated blocks manifest file.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/scripts/README.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nwp_register_block_types_from_metadata_collection(\n    plugin_dir_path( __FILE__ ) . 'dist',\n    plugin_dir_path( __FILE__ ) . 'dist/blocks-manifest.php'\n);\n```\n\n----------------------------------------\n\nTITLE: Defining a Group Block with Paragraph in WordPress Gutenberg\nDESCRIPTION: HTML structure for a Gutenberg Group Block with constrained layout containing a Paragraph Block. The markup uses HTML comments to define block boundaries and properties, which is the standard format for Gutenberg blocks in the saved/serialized state.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/test/e2e/specs/editor/blocks/__snapshots__/Group-can-have-other-blocks-appended-to-it-using-the-button-appender-1-chromium.txt#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"}} -->\n<div class=\"wp-block-group\"><!-- wp:paragraph -->\n<p>Group Block with a Paragraph</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:group -->\n```\n\n----------------------------------------\n\nTITLE: Running Storybook in Local Development Environment\nDESCRIPTION: Command to run the Storybook development server in a local Gutenberg development environment.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/storybook/stories/docs/introduction.mdx#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run storybook:dev\n```\n\n----------------------------------------\n\nTITLE: Importing Layout Resources in React for Storybook Documentation\nDESCRIPTION: Imports SVG resources for layout documentation in a Storybook environment. These resources illustrate different layout areas and page layout examples used in the WordPress admin interface.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/storybook/stories/foundations/layout.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Meta } from '@storybook/blocks';\nimport areas from './static/areas.svg';\nimport pageLayoutExample1 from './static/page-layout-example-1.svg';\nimport pageLayoutExample2 from './static/page-layout-example-2.svg';\nimport pageLayoutExample3 from './static/page-layout-example-3.svg';\nimport pageLayoutExample4 from './static/page-layout-example-4.svg';\n```\n\n----------------------------------------\n\nTITLE: Data Module Reference List in Markdown\nDESCRIPTION: A markdown-formatted list of data module references for WordPress Gutenberg, including links to detailed documentation for each module.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Data Module Reference\n\n-   [**core**: WordPress Core Data](/docs/reference-guides/data/data-core.md)\n-   [**core/annotations**: Annotations](/docs/reference-guides/data/data-core-annotations.md)\n-   [**core/block-directory**: Block directory](/docs/reference-guides/data/data-core-block-directory.md)\n-   [**core/block-editor**: The Block Editor's Data](/docs/reference-guides/data/data-core-block-editor.md)\n-   [**core/blocks**: Block Types Data](/docs/reference-guides/data/data-core-blocks.md)\n-   [**core/commands**: Command Palette](/docs/reference-guides/data/data-core-commands.md)\n-   [**core/customize-widgets**: Customize Widgets](/docs/reference-guides/data/data-core-customize-widgets.md)\n-   [**core/edit-post**: The Editor's UI Data](/docs/reference-guides/data/data-core-edit-post.md)\n-   [**core/edit-site**: Edit Site](/docs/reference-guides/data/data-core-edit-site.md)\n-   [**core/edit-widgets**: Edit Widgets](/docs/reference-guides/data/data-core-edit-widgets.md)\n-   [**core/editor**: The Post Editor's Data](/docs/reference-guides/data/data-core-editor.md)\n-   [**core/keyboard-shortcuts**: The Keyboard Shortcuts Data](/docs/reference-guides/data/data-core-keyboard-shortcuts.md)\n-   [**core/notices**: Notices Data](/docs/reference-guides/data/data-core-notices.md)\n-   [**core/nux**: The NUX (New User Experience) Data](/docs/reference-guides/data/data-core-nux.md)\n-   [**core/preferences**: Preferences](/docs/reference-guides/data/data-core-preferences.md)\n-   [**core/reusable-blocks**: Reusable blocks](/docs/reference-guides/data/data-core-reusable-blocks.md)\n-   [**core/rich-text**: Rich Text](/docs/reference-guides/data/data-core-rich-text.md)\n-   [**core/viewport**: The Viewport Data](/docs/reference-guides/data/data-core-viewport.md)\n```\n\n----------------------------------------\n\nTITLE: HTML Comment for Changelog Maintenance\nDESCRIPTION: Reference comment indicating where to find documentation about maintaining the changelog file.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/icons/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- Learn how to maintain this file at https://github.com/WordPress/gutenberg/tree/HEAD/packages#maintaining-changelogs. -->\n```\n\n----------------------------------------\n\nTITLE: Initializing Paragraph Block in Gutenberg\nDESCRIPTION: WordPress Gutenberg paragraph block with basic text content. Represents a standard text block in the block editor.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/test/e2e/specs/editor/various/__snapshots__/Copy-cut-paste-should-cut-paste-partial-selection-with-other-blocks-in-between-1-chromium.txt#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- wp:paragraph -->\n<p>A block</p>\n<!-- /wp:paragraph -->\n```\n\n----------------------------------------\n\nTITLE: Using Hierarchical Term Selector for Non-Hierarchical Taxonomy in WordPress Gutenberg using JavaScript\nDESCRIPTION: This snippet demonstrates how to use the HierarchicalTermSelector component for a non-hierarchical taxonomy. By adding a filter to 'editor.PostTaxonomyType', this code allows the 'track' taxonomy to render as a hierarchical selector while still using the original component for other taxonomies.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/editor/src/components/post-taxonomies/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst el = React.createElement;\nconst HierarchicalTermSelector = wp.editor.PostTaxonomiesHierarchicalTermSelector;\n\nfunction customizeTrackSelector( OriginalComponent ) {\n\treturn function ( props ) {\n\t\tif ( props.slug === 'track' ) {\n\t\t\treturn el( HierarchicalTermSelector, props );\n\t\t} else {\n\t\t\treturn el( OriginalComponent, props );\n\t\t}\n\t};\n}\n\nwp.hooks.addFilter(\n\t'editor.PostTaxonomyType',\n\t'my-plugin/set-hierarchical-term-selector',\n\tcustomizeTrackSelector\n);\n```\n\n----------------------------------------\n\nTITLE: Android ReactAztecManager Implementation (Java)\nDESCRIPTION: This snippet highlights the `ReactAztecManager` class in Java, which manages the interactions between the native `ReactAztecText` view and the JavaScript code. It is responsible for handling events and properties.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/react-native-aztec/README.md#2025-04-21_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n[`ReactAztecManager`](https://github.com/WordPress/gutenberg/blob/7532a485b400f86638145b71f94f6f717e5add25/packages/react-native-aztec/android/src/main/java/org/wordpress/mobile/ReactNativeAztec/ReactAztecManager.java#L62)\n\n```\n\n----------------------------------------\n\nTITLE: Rendering Deprecated Gutenberg Block\nDESCRIPTION: Demonstrates a deprecated block wrapper with nested HTML elements including paragraph and strong tags\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/test/e2e/specs/editor/plugins/__snapshots__/Deprecated-Node-Matcher-should-insert-block-with-children-source-1-chromium.txt#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- wp:deprecated-children-matcher -->\n<p class=\"wp-block-deprecated-children-matcher\">test<br/><strong>a</strong></p>\n<!-- /wp:deprecated-children-matcher -->\n```\n\n----------------------------------------\n\nTITLE: TypeScript Default Export Function\nDESCRIPTION: This snippet exemplifies a TypeScript function defined as a default export that adds two numbers with type annotations, illustrating how it can be converted to an API documentation.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/docgen/README.md#2025-04-21_snippet_9\n\nLANGUAGE: js\nCODE:\n```\n/**\\n * Adds two numbers.\\n *\\n * @param term1 First number.\\n * @param term2 Second number.\\n * @return The result of adding the two numbers.\\n */\\nexport default function addition( term1: number, term2: number ): number {\\n\\t// Implementation would go here.\\n}\n```\n\n----------------------------------------\n\nTITLE: Updating All WordPress Packages to Specific Version\nDESCRIPTION: Command to update all WordPress packages in a project to a specific WordPress version. This uses the @wordpress/scripts utility to update all packages to match those in WordPress 5.8.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/packages.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx @wordpress/scripts packages-update --dist-tag=wp-5.8\n```\n\n----------------------------------------\n\nTITLE: Adding Interactive Button with Event Handling\nDESCRIPTION: HTML for a button that uses the data-wp-on-async--click directive to trigger an action when clicked.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/core-concepts/server-side-rendering.md#2025-04-21_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<button data-wp-on-async--click=\"actions.addMango\">Add Mango</button>\n```\n\n----------------------------------------\n\nTITLE: Defining Storybook Meta Information\nDESCRIPTION: Sets up the Storybook page metadata with the title 'Tokens/Color'.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/storybook/stories/tokens/color.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Meta title=\"Tokens/Color\" name=\"page\" />\n```\n\n----------------------------------------\n\nTITLE: Uninstalling wp-env Package Globally\nDESCRIPTION: Command to globally uninstall the wp-env tool from your system.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/getting-started/devenv/get-started-with-wp-env.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpm -g uninstall @wordpress/env\n```\n\n----------------------------------------\n\nTITLE: Node.js Version Update\nDESCRIPTION: This snippet describes a breaking change in Gutenberg v2.0.0 where the minimum Node.js version was increased to 12.  Users will need to upgrade their Node.js installation to at least version 12 to use this version of Gutenberg.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/e2e-tests/CHANGELOG.md#2025-04-21_snippet_9\n\nLANGUAGE: None\nCODE:\n```\nIncrease the minimum Node.js version to 12 ([#27934](https://github.com/WordPress/gutenberg/pull/27934)).\n```\n\n----------------------------------------\n\nTITLE: Creating Core Backport Changelog Entry in Markdown\nDESCRIPTION: Example of how to create a markdown file for a core backport changelog entry. The file should contain the Core PR URL followed by a list of related Gutenberg PR URLs.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/backport-changelog/readme.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nhttps://github.com/WordPress/wordpress-develop/pull/1234\n\n* https://github.com/WordPress/gutenberg/pull/1111\n* https://github.com/WordPress/gutenberg/pull/2222\n```\n\n----------------------------------------\n\nTITLE: Documenting Version 1.70.1 Changes in WordPress Gutenberg Changelog\nDESCRIPTION: This section documents the changes in version 1.70.1 of the WordPress Gutenberg project. It includes a fix for video preview functionality on Android 11 and newer versions.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/react-native-bridge/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.70.1\n\n-   [***] Fix launching video preview on Android 11+ [#38377]\n```\n\n----------------------------------------\n\nTITLE: Incorrect Global Flag Usage - Direct Access\nDESCRIPTION: Demonstrates incorrect direct access to IS_GUTENBERG_PLUGIN without using globalThis\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/eslint-plugin/docs/rules/wp-global-usage.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nif ( IS_GUTENBERG_PLUGIN ) {\n\t// implement feature here.\n}\n```\n\n----------------------------------------\n\nTITLE: Quote Block Splitting Test with Comments in JavaScript\nDESCRIPTION: This snippet shows the same test as above but includes a test title and comments, providing more context about the test's purpose and expectations.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/e2e/overusing-snapshots.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nit( 'can be split at the end', async () => {\n\t// ...\n\n\t// Expect empty paragraph outside quote block.\n\texpect( await getEditedPostContent() ).toMatchSnapshot();\n\n\t// ...\n\n\t// Expect the paragraph to be merged into the quote block.\n\texpect( await getEditedPostContent() ).toMatchSnapshot();\n} );\n```\n\n----------------------------------------\n\nTITLE: Fetching Optimized Translations for Gutenberg React Native\nDESCRIPTION: Shell command to fetch optimized translations that only include strings referenced in the provided used-strings file, reducing file size and improving performance.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/react-native/internationalization-guide.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnpm run native i18n:fetch-translations -- \"gutenberg\" <OUTPUT_PATH> <USED_STRINGS_FILE>\n```\n\n----------------------------------------\n\nTITLE: GNU GPL License Notice Template for Source Files\nDESCRIPTION: A template for the notice that should be attached to the start of each source file when using the GNU GPL. This notice includes copyright information, basic license terms, warranty disclaimers, and information on where to find the full license text.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/LICENSE.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\none line to give the program's name and an idea of what it does.\nCopyright (C) yyyy  name of author\n\nThis program is free software; you can redistribute it and/or\nmodify it under the terms of the GNU General Public License\nas published by the Free Software Foundation; either version 2\nof the License, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program; if not, write to the Free Software\nFoundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n```\n\n----------------------------------------\n\nTITLE: Referencing Local font-collection.json Schema for Development\nDESCRIPTION: Shows how to reference a local version of the font-collection.json schema during development, facilitating testing of schema changes.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/schemas/README.md#2025-04-21_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"$schema\": \"file://{{FULL_FILE_PATH}}/schemas/json/font-collection.json\"\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Source File for API Documentation\nDESCRIPTION: Extended markdown comment template for specifying a custom source file to generate API documentation from.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/README.md#2025-04-21_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- START TOKEN(Autogenerated API docs|src/actions.js) -->\n\nContent within the HTML comment will be replaced by the generated documentation.\n\n<!-- END TOKEN(Autogenerated API docs|src/actions.js) -->\n```\n\n----------------------------------------\n\nTITLE: Enqueuing Variation Disabling Script in PHP\nDESCRIPTION: PHP function to enqueue a JavaScript file that disables block variations in the editor.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/curating-the-editor-experience/disable-editor-functionality.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nfunction example_disable_variations_script() {\n\twp_enqueue_script(\n\t\t'example-disable-variations-script',\n\t\tget_template_directory_uri() . '/disable-variations.js',\n       \tarray( 'wp-dom-ready' ),\n\t\twp_get_theme()->get( 'Version' ),\n\t\ttrue\n\t);\n}\nadd_action( 'enqueue_block_editor_assets', 'example_disable_variations_script' );\n```\n\n----------------------------------------\n\nTITLE: Update minimum Node.js version in Gutenberg\nDESCRIPTION: This entry highlights a breaking change that increases the minimum required Node.js version for the Gutenberg project.  This ensures compatibility with long-term support releases of Node.js. Links to the pull request and Node.js releases are provided for more context.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/escape-html/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: None\nCODE:\n```\n-   Increase the minimum required Node.js version to v18.12.0 matching long-term support releases ([#31270](https://github.com/WordPress/gutenberg/pull/61930)). Learn more about [Node.js releases](https://nodejs.org/en/about/previous-releases).\n```\n\n----------------------------------------\n\nTITLE: Setting Storybook Meta Title for Button Component\nDESCRIPTION: This code sets the title for the Storybook documentation page. It specifies the component hierarchy and focuses on best practices for the Button component.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/button/stories/best-practices.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<Meta title=\"Components/Actions/Button/Best Practices\" />\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Boilerplate Notice Template\nDESCRIPTION: A template for the copyright notice and license statement to be included in source files. Developers should replace the bracketed fields with their information and format the text according to the file type's comment syntax.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/scripts/utils/test/licenses/apache2.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Paragraph Block with Simple Phrase\nDESCRIPTION: WordPress Gutenberg paragraph block containing a short phrase\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/test/e2e/specs/editor/various/__snapshots__/Copy-cut-paste-should-cut-partial-selection-of-text-blocks-2-chromium.txt#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!-- wp:paragraph -->\n<p>A block</p>\n<!-- /wp:paragraph -->\n```\n\n----------------------------------------\n\nTITLE: Editing Entity Record - JavaScript\nDESCRIPTION: Triggers an edit to an entity record with the ability to specify the kind, name, recordId, and the edits to be made. It returns an action object reflecting the changes.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core.md#2025-04-21_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\neditEntityRecord(kind, name, recordId, edits, options) {\n  // Returns an action object that triggers an edit to an entity record.\n  // Parameters:\n  // - kind: Kind of the edited entity record.\n  // - name: Name of the edited entity record.\n  // - recordId: Record ID of the edited entity record.\n  // - edits: The edits.\n  // - options: Options for the edit.\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Image Block in Gutenberg\nDESCRIPTION: This snippet demonstrates how to create an image block in the Gutenberg editor using HTML comments. It utilizes a figure tag to wrap an img tag, allowing for the integration of images within the post content.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/test/e2e/specs/editor/plugins/__snapshots__/Post-type-templates-Using-a-CPT-with-a-predefi-fffe1--custom-post-types-with-a-predefined-template-1-chromium.txt#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img alt=\"\"/></figure>\n<!-- /wp:image -->\n```\n\n----------------------------------------\n\nTITLE: Creating a Table Block in WordPress Gutenberg HTML\nDESCRIPTION: This code snippet demonstrates how to create a table using HTML within the WordPress Gutenberg editor. It includes headers, body rows, and a footer for structuring tabular data. No external dependencies are required besides the WordPress environment that supports Gutenberg blocks.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/test/e2e/specs/editor/blocks/__snapshots__/Table-allows-header-and-footer-rows-to-be-switched-on-and-off-1-chromium.txt#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- wp:table -->\n<figure class=\"wp-block-table\"><table class=\"has-fixed-layout\"><thead><tr><th>header</th><th></th></tr></thead><tbody><tr><td>body</td><td></td></tr><tr><td></td><td></td></tr></tbody><tfoot><tr><td>footer</td><td></td></tr></tfoot></table></figure>\n<!-- /wp:table -->\n```\n\n----------------------------------------\n\nTITLE: Documenting Changelog Entry Format in Markdown\nDESCRIPTION: This code snippet demonstrates the format for documenting changelog entries, including importance categorization labels and version headers.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/react-native-editor/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<!--\nFor each user feature we should also add a importance categorization label  to indicate the relevance of the change for end users of GB Mobile. The format is the following:\n[***] → Major new features, significant updates to core flows, or impactful fixes (e.g. a crash that impacts a lot of users) — things our users should be aware of.\n\n[**] → Changes our users will probably notice, but doesn't impact core flows. Most fixes.\n\n[*] → Minor enhancements and fixes that address annoyances — things our users can miss.\n-->\n\n## Unreleased\n\n\n## 1.121.0\n-   [internal] Fix Inserter items list filtering [#62334]\n-   [*] Prevent hiding the keyboard when creating new list items [#62446]\n-   [*] Fix issue when pasting HTML content [#62588]\n-   [**] Add support prefix transforms [#62576]\n-   [*] Remove themes from supported endpoints [#63183]\n```\n\n----------------------------------------\n\nTITLE: Replacing isSharedBlock with isReusableBlock Function in JavaScript\nDESCRIPTION: The 'isSharedBlock' function has been removed and replaced with 'isReusableBlock'. Developers should update their code to use the new function name.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/blocks/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nisSharedBlock\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nisReusableBlock\n```\n\n----------------------------------------\n\nTITLE: Breaking Change: Increasing Minimum Node.js Version\nDESCRIPTION: This code snippet documents a breaking change in version 3.0.0 that increases the minimum required Node.js version to v18.12.0, matching long-term support releases.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/readable-js-assets-webpack-plugin/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Breaking Changes\n\n-   Increase the minimum required Node.js version to v18.12.0 matching long-term support releases ([#31270](https://github.com/WordPress/gutenberg/pull/61930)). Learn more about [Node.js releases](https://nodejs.org/en/about/previous-releases).\n```\n\n----------------------------------------\n\nTITLE: Installing Babel Plugin Import JSX Pragma with npm\nDESCRIPTION: Command to install the @wordpress/babel-plugin-import-jsx-pragma package using npm package manager.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/babel-plugin-import-jsx-pragma/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @wordpress/babel-plugin-import-jsx-pragma\n```\n\n----------------------------------------\n\nTITLE: Referencing Local block.json Schema for Development\nDESCRIPTION: Demonstrates how to reference a local version of the block.json schema during development, allowing developers to test schema modifications.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/schemas/README.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"$schema\": \"file://{{FULL_FILE_PATH}}/schemas/json/block.json\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Font Weight Primitive Tokens in CSS\nDESCRIPTION: Defines the primitive font weight tokens as SASS variables. These variables provide consistent weight options (regular and medium) for typography styling in WordPress components.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/storybook/stories/tokens/typography.mdx#2025-04-21_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n$font-weight-regular: 400;\n$font-weight-medium: 500;\n```\n\n----------------------------------------\n\nTITLE: Registering Sync Provider in JavaScript\nDESCRIPTION: This code snippet demonstrates how to register a sync provider in the Gutenberg editor. It's part of the sync experiment implementation.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/sync/CODE.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ngetSyncProvider().register( ... )\n```\n\n----------------------------------------\n\nTITLE: Gutenberg Heading Block HTML\nDESCRIPTION: This HTML snippet defines a heading block for the Gutenberg editor. It includes the `wp:heading` comment and the heading element with the `wp-block-heading` class.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/test/e2e/specs/editor/various/__snapshots__/Copy-cut-paste-should-cut-partial-selection-and-merge-like-a-normal-delete---not-forward-2-chromium.txt#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">ading</h2>\n<!-- /wp:heading -->\n```\n\n----------------------------------------\n\nTITLE: Linking React Native Gutenberg Bridge Package\nDESCRIPTION: Command to automatically link the React Native Gutenberg Bridge package in a React Native project.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/react-native-bridge/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ react-native link @wordpress/react-native-bridge\n```\n\n----------------------------------------\n\nTITLE: Removing getDefaultBlockForPostFormat Function in JavaScript\nDESCRIPTION: The 'getDefaultBlockForPostFormat' function has been removed from the Gutenberg project. This is a breaking change that developers should be aware of when updating to version 3.0.0.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/blocks/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\ngetDefaultBlockForPostFormat\n```\n\n----------------------------------------\n\nTITLE: JavaScript: Adding a Non-Translated String\nDESCRIPTION: This snippet illustrates the issue of adding a hardcoded, non-translated string ('Mango') to the `fruits` array within a JavaScript action. This highlights the need to serialize translated strings from the server to ensure proper localization.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/core-concepts/server-side-rendering.md#2025-04-21_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nconst { state } = store( 'myFruitPlugin', {\n\tactions: {\n\t\taddMango() {\n\t\t\tstate.fruits.push( 'Mango' ); // Not translated!\n\t\t},\n\t},\n} );\n```\n\n----------------------------------------\n\nTITLE: Changelog Header Comment\nDESCRIPTION: HTML comment providing information about maintaining the changelog file\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/keycodes/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- Learn how to maintain this file at https://github.com/WordPress/gutenberg/tree/HEAD/packages#maintaining-changelogs. -->\n```\n\n----------------------------------------\n\nTITLE: Creating Columns Block in Gutenberg\nDESCRIPTION: This snippet defines a columns block in the Gutenberg editor, demonstrating how to organize content into multiple columns. Each column can contain various blocks, such as images or paragraphs, allowing for versatile layouts.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/test/e2e/specs/editor/plugins/__snapshots__/Post-type-templates-Using-a-CPT-with-a-predefi-fffe1--custom-post-types-with-a-predefined-template-1-chromium.txt#2025-04-21_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- wp:columns -->\n<div class=\"wp-block-columns\"><!-- wp:column -->\n<div class=\"wp-block-column\"><!-- wp:image -->\n<figure class=\"wp-block-image\"><img alt=\"\"/></figure>\n<!-- /wp:image --></div>\n<!-- /wp:column -->\n\n<!-- wp:column -->\n<div class=\"wp-block-column\"><!-- wp:paragraph {\"placeholder\":\"Add a inner paragraph\"} -->\n<p></p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:column --></div>\n<!-- /wp:columns -->\n```\n\n----------------------------------------\n\nTITLE: Installing @wordpress/autop Package with npm\nDESCRIPTION: Command to install the @wordpress/autop package as a dependency in your project using npm.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/autop/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @wordpress/autop --save\n```\n\n----------------------------------------\n\nTITLE: Copyright Disclaimer Template for GNU GPL\nDESCRIPTION: A sample copyright disclaimer template for employers or schools to sign when an employee or student creates a GPL-licensed program. This disclaimer allows the author to maintain copyright while releasing the program under the GPL.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/LICENSE.md#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nYoyodyne, Inc., hereby disclaims all copyright\ninterest in the program `Gnomovision'\n(which makes passes at compilers) written\nby James Hacker.\n\nsignature of Ty Coon, 1 April 1989\nTy Coon, President of Vice\n```\n\n----------------------------------------\n\nTITLE: Cleaning WordPress Database in wp-env\nDESCRIPTION: Command to reset and clean the WordPress database in an existing wp-env environment.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/getting-started/devenv/get-started-with-wp-env.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nwp-env clean all\n```\n\n----------------------------------------\n\nTITLE: Rendering WordPress Gutenberg Paragraph Block\nDESCRIPTION: HTML block representing a paragraph in the WordPress Gutenberg editor. Each block is wrapped in WordPress-specific comment tags that define its type and structure.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/test/e2e/specs/editor/various/__snapshots__/Copy-cut-paste-should-respect-inline-copy-when-text-is-selected-2-chromium.txt#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- wp:paragraph -->\n<p>First block</p>\n<!-- /wp:paragraph -->\n```\n\nLANGUAGE: html\nCODE:\n```\n<!-- wp:paragraph -->\n<p>ck</p>\n<!-- /wp:paragraph -->\n```\n\nLANGUAGE: html\nCODE:\n```\n<!-- wp:paragraph -->\n<p>Second block</p>\n<!-- /wp:paragraph -->\n```\n\n----------------------------------------\n\nTITLE: Poor Practice: Fragmented PHP Organization\nDESCRIPTION: Example of poor practice where related code is fragmented across multiple files, making it harder to maintain and move features between directories.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/lib/README.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n// lib/experimental/functions.php\n\nfunction wp_get_navigation( $slug ) { ... }\n\n// lib/experimental/post-types.php\n\nfunction wp_register_navigation_cpt() { ... }\n\n// lib/experimental/init.php\nadd_action( 'init', 'wp_register_navigation_cpt' );\n```\n\n----------------------------------------\n\nTITLE: CSS with Font and Image References\nDESCRIPTION: Example CSS showing how to reference font and image files in WordPress blocks.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/scripts/README.md#2025-04-21_snippet_28\n\nLANGUAGE: css\nCODE:\n```\n/* style.css */\n@font-face {\n\tfont-family: Gilbert;\n\tsrc: url( ../assets/gilbert-color.otf );\n}\n.wp-block-my-block {\n\tbackground-color: url( ../assets/block-background.png );\n\tfont-family: Gilbert;\n}\n```\n\n----------------------------------------\n\nTITLE: Changelog Header Comment\nDESCRIPTION: Documentation reference comment for maintaining changelog files in the WordPress/Gutenberg repository\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/html-entities/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- Learn how to maintain this file at https://github.com/WordPress/gutenberg/tree/HEAD/packages#maintaining-changelogs. -->\n```\n\n----------------------------------------\n\nTITLE: Updating Package Dependencies - JavaScript\nDESCRIPTION: This update removes the dependency on '@ariakit/test' from the package, as it is only required for testing purposes, streamlining the package dependencies.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/CHANGELOG.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nPackage should not depend on `@ariakit/test`, that package is only needed for testing ([#56091](https://github.com/WordPress/gutenberg/pull/56091)).\n```\n\n----------------------------------------\n\nTITLE: Gutenberg Paragraph Block HTML\nDESCRIPTION: This HTML snippet defines a paragraph block for the Gutenberg editor. It includes the `wp:paragraph` comment and the paragraph element.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/test/e2e/specs/editor/various/__snapshots__/Copy-cut-paste-should-cut-partial-selection-and-merge-like-a-normal-delete---not-forward-2-chromium.txt#2025-04-21_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- wp:paragraph -->\n<p>Paragra</p>\n<!-- /wp:paragraph -->\n```\n\n----------------------------------------\n\nTITLE: HTML Comment - Changelog Maintenance Instructions\nDESCRIPTION: HTML comment providing a reference link for maintaining the changelog file\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/lazy-import/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- Learn how to maintain this file at https://github.com/WordPress/gutenberg/tree/HEAD/packages#maintaining-changelogs. -->\n```\n\n----------------------------------------\n\nTITLE: Breaking Change - Node.js Version Update\nDESCRIPTION: Documentation of breaking change that increases the minimum required Node.js version to v18.12.0 to match long-term support releases.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/format-library/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n-   Increase the minimum required Node.js version to v18.12.0 matching long-term support releases ([#31270](https://github.com/WordPress/gutenberg/pull/61930)). Learn more about [Node.js releases](https://nodejs.org/en/about/previous-releases).\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests with Debugger Support\nDESCRIPTION: Command to run tests with debugger support, which can be connected to using Chrome's inspect functionality.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/react-native/getting-started-react-native.md#2025-04-21_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nnpm run test:native:debug\n```\n\n----------------------------------------\n\nTITLE: Breaking Change for React 18 Requirement\nDESCRIPTION: Documentation of a breaking change that updates dependencies to require React 18, which may require updates to consuming applications.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/widgets/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n-   Updated dependencies to require React 18 ([45235](https://github.com/WordPress/gutenberg/pull/45235))\n```\n\n----------------------------------------\n\nTITLE: Running Android Demo App\nDESCRIPTION: Command to run the Android demo app in the emulator.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/react-native/osx-setup-guide.md#2025-04-21_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\nnpm run native android\n```\n\n----------------------------------------\n\nTITLE: HTML Code Block Example\nDESCRIPTION: This snippet demonstrates how to include an HTML code block within a Markdown document. The backticks (```) delineate the start and end of the code block, allowing for the inclusion of raw HTML code.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/test/integration/fixtures/documents/markdown-in.txt#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n\"```html\nThis is a code block.\n```\"\n```\n\n----------------------------------------\n\nTITLE: Final Paragraph Block HTML\nDESCRIPTION: This is the last paragraph block example, showing a simple paragraph containing the text 'A block'. This demonstrates the structure of a typical Gutenberg paragraph block with its content.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/test/e2e/specs/editor/various/__snapshots__/Copy-cut-paste-should-cut-paste-partial-selection-with-other-blocks-in-between-2-chromium.txt#2025-04-21_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n\"<!-- wp:paragraph -->\\n<p>A block</p>\\n<!-- /wp:paragraph -->\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Thunk Action in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a basic thunk action that can be dispatched and use selectors or dispatch other actions.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/thunks.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const myThunkAction = () => ( { select, dispatch } ) => {\n\treturn \"I'm a thunk! I can be dispatched, use selectors, and even dispatch other actions.\";\n};\n```\n\n----------------------------------------\n\nTITLE: Installing WordPress Gutenberg Hooks package\nDESCRIPTION: This command installs the `@wordpress/hooks` package as a dependency in your project using npm. The `--save` flag ensures that the package is added to your project's `package.json` file.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/hooks/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n```bash\nnpm install @wordpress/hooks --save\n```\n```\n\n----------------------------------------\n\nTITLE: Include TypeScript type declarations in Gutenberg\nDESCRIPTION: This entry announces the inclusion of TypeScript type declarations in the Gutenberg project. This addition improves the developer experience by providing type checking and autocompletion features. A pull request link is provided for reference.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/escape-html/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: None\nCODE:\n```\n-   Include TypeScript type declarations ([#20669](https://github.com/WordPress/gutenberg/pull/20669))\n```\n\n----------------------------------------\n\nTITLE: Displaying 'Incompatible With Secondary Licenses' Notice for MPL 2.0\nDESCRIPTION: This code snippet presents the notice indicating that the Source Code Form is 'Incompatible With Secondary Licenses' as defined by the Mozilla Public License 2.0. This notice affects how the code can be licensed or combined with other software.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/LICENSE.md#2025-04-21_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n    This Source Code Form is \"Incompatible With Secondary Licenses\", as\n    defined by the Mozilla Public License, v. 2.0.\n```\n\n----------------------------------------\n\nTITLE: Polyfilling Required Built-ins with Babel 7\nDESCRIPTION: This code snippet describes a breaking change in version 2.0.0 related to how required built-ins are polyfilled with Babel 7. It suggests using core-js or @babel/polyfill for environments with limited ES2015+ support.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/shortcode/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n### Breaking Changes\n\n-   Change how required built-ins are polyfilled with Babel 7 ([#9171](https://github.com/WordPress/gutenberg/pull/9171)). If you're using an environment that has limited or no support for ES2015+ such as lower versions of IE then using [core-js](https://github.com/zloirock/core-js) or [@babel/polyfill](https://babeljs.io/docs/en/next/babel-polyfill) will add support for these methods.\n```\n\n----------------------------------------\n\nTITLE: Defining Template Parts in WordPress Theme JSON\nDESCRIPTION: Example of declaring template parts in theme.json. It defines a template part named 'my-template-part' as a header area, which affects how it's rendered in the editor.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/themes/global-settings-and-styles.md#2025-04-21_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"version\": 3,\n\t\"templateParts\": [\n\t\t{\n\t\t\t\"name\": \"my-template-part\",\n\t\t\t\"title\": \"Header\",\n\t\t\t\"area\": \"header\"\n\t\t}\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: YouTube Video Embed URL Format\nDESCRIPTION: Example format for YouTube video embed URL used in documentation.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/documentation/README.md#2025-04-21_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nhttps://www.youtube.com/embed/nrut8SfXA44?si=YxvmHmAoYx-BDCog\n```\n\n----------------------------------------\n\nTITLE: Simple UnitControl Value Example\nDESCRIPTION: Example showing how to set a percentage value in UnitControl component.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/src/components/unit-control/README.md#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<UnitControl value=\"50%\" />\n```\n\n----------------------------------------\n\nTITLE: Exporting CSS Custom Variable Compilation Utility in WordPress Style Engine\nDESCRIPTION: New feature added in version 2.6.0 to export a utility for compiling CSS custom variables from preset strings.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/style-engine/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### New Features\n\n-   Style engine: export util to compile CSS custom var from preset string. ([#64490](https://github.com/WordPress/gutenberg/pull/64490))\n```\n\n----------------------------------------\n\nTITLE: Defining Legacy JSHint Configuration\nDESCRIPTION: This snippet shows how to create an ESLint configuration that extends from a JSHint configuration, which is useful for projects migrating from JSHint to ESLint.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/eslint-plugin/README.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"extends\": [ \"plugin:@wordpress/eslint-plugin/jshint\" ]\n}\n```\n\n----------------------------------------\n\nTITLE: Breaking Change: Increase Minimum Node.js Version\nDESCRIPTION: Documents a breaking change that increases the minimum required Node.js version to v18.12.0, matching long-term support releases.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/url/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n### Breaking Changes\n\n-   Increase the minimum required Node.js version to v18.12.0 matching long-term support releases ([#31270](https://github.com/WordPress/gutenberg/pull/61930)). Learn more about [Node.js releases](https://nodejs.org/en/about/previous-releases).\n```\n\n----------------------------------------\n\nTITLE: String Assertion for Post Content in JavaScript\nDESCRIPTION: This snippet shows a string assertion used to simulate inline snapshots in Playwright, which is considered a variant of snapshot testing.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/e2e/overusing-snapshots.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexpect( await editor.getEditedPostContent() ).toBe( `<!-- wp:paragraph -->\n<p>Paragraph</p>\n<!-- /wp:paragraph -->` );\n```\n\n----------------------------------------\n\nTITLE: Setting the Storybook Meta Title for the Page\nDESCRIPTION: This snippet sets the title of the Storybook page using the `Meta` component from `@storybook/blocks`. The title is set to \"Foundations/Design Language/Elevation\", indicating the location of this documentation within the Storybook structure.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/storybook/stories/foundations/design-language/elevation.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Meta title=\"Foundations/Design Language/Elevation\" name=\"page\" />\n```\n\n----------------------------------------\n\nTITLE: Incorrect Global Flag Usage - Equality Comparison\nDESCRIPTION: Demonstrates incorrect comparison of IS_GUTENBERG_PLUGIN with numeric value\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/eslint-plugin/docs/rules/wp-global-usage.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nif ( globalThis.IS_GUTENBERG_PLUGIN == 1 ) {\n\t// implement feature here.\n}\n```\n\n----------------------------------------\n\nTITLE: Refactoring to TypeScript in WordPress Gutenberg Package\nDESCRIPTION: This code snippet references an internal refactoring task to convert the package to TypeScript. It includes a link to the related GitHub pull request.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/token-list/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Internal\n\n-   Refactor to TypeScript ([#62584](https://github.com/WordPress/gutenberg/pull/62584)).\n```\n\n----------------------------------------\n\nTITLE: Gutenberg Paragraph Block\nDESCRIPTION: This snippet demonstrates a paragraph block in WordPress Gutenberg. The block contains Arabic numerals (٠١٢) wrapped in a strong tag.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/test/e2e/specs/editor/various/__snapshots__/RTL-should-navigate-inline-boundaries-4-chromium.txt#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- wp:paragraph -->\n<p>٠<strong>١</strong>٢</p>\n<!-- /wp:paragraph -->\n```\n\n----------------------------------------\n\nTITLE: Node.js Version Requirement Update - v18.12.0\nDESCRIPTION: Breaking change documentation for increasing minimum required Node.js version to v18.12.0 in version 5.0.0\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-serialization-spec-parser/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n-   Increase the minimum required Node.js version to v18.12.0 matching long-term support releases ([#31270](https://github.com/WordPress/gutenberg/pull/61930)). Learn more about [Node.js releases](https://nodejs.org/en/about/previous-releases).\n```\n\n----------------------------------------\n\nTITLE: Displaying GitHub Issue Filters in Markdown\nDESCRIPTION: This code snippet shows how to create links to filtered GitHub issue lists using Markdown syntax. It includes filters for issues without labels, least recently updated issues, and issues with no comments.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/triage.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n-   **All Gutenberg issues [without an assigned label](https://github.com/WordPress/gutenberg/issues?q=is%3Aopen+is%3Aissue+no%3Alabel+sort%3Aupdated-asc)**. Triaging by simply adding labels helps people focused on certain aspects of Gutenberg find relevant issues easier and start working on them.\n-   **All Gutenberg pull requests [without an assigned label](https://github.com/WordPress/gutenberg/pulls?q=is%3Aopen+is%3Apr+no%3Alabel)**. This requires a level of comfortability with code. For more guidance on which labels are best to use, please [review this section on labeling pull requests](/docs/contributors/repository-management.md#pull-requests) for contributors. You can also always check with the person authoring the pull request to make sure the labels match what they are intending to do.\n-  **[The least recently updated](https://github.com/WordPress/gutenberg/issues?q=is%3Aopen+is%3Aissue+sort%3Aupdated-asc) Gutenberg issues**. Triaging issues that are getting old and possibly out of date keeps important work from being overlooked.\n-  **All Gutenberg issues [with no comments](https://github.com/wordpress/gutenberg/issues?q=is%3Aissue+is%3Aopen+comments%3A0+)**. Triaging this list helps make sure all issues are acknowledged, and can help identify issues that may need more information or discussion before they are actionable.\n```\n\n----------------------------------------\n\nTITLE: Defining Excerpt Display - Gutenberg (Markdown)\nDESCRIPTION: This snippet defines a block for displaying the excerpt of a post. It has customizable attributes for controlling format and presentation options.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/core-blocks.md#2025-04-21_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n- **Name:** core/post-excerpt\n- **Category:** theme\n- **Supports:** color (background, gradients, link, text), interactivity (clientNavigation), spacing (margin, padding), typography (fontSize, lineHeight), ~~html~~\n- **Attributes:** excerptLength, moreText, showMoreOnNewLine, textAlign\n```\n\n----------------------------------------\n\nTITLE: Usage Instructions Link Comment\nDESCRIPTION: XML comment providing a link to documentation about maintaining changelog files in the WordPress/gutenberg repository.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-library/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Learn how to maintain this file at https://github.com/WordPress/gutenberg/tree/HEAD/packages#maintaining-changelogs. -->\n```\n\n----------------------------------------\n\nTITLE: Rendering List with Items in Gutenberg HTML\nDESCRIPTION: This snippet renders an unordered list in the Gutenberg editor using HTML and WordPress block comments for item encapsulation. It creates a simple list with two items, 'x' and 'y', using the appropriate block structure. There are no external dependencies required for this markup to function within the Gutenberg context.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/test/e2e/specs/editor/various/__snapshots__/Copy-cut-paste-should-paste-paragraphs-in-list-1-chromium.txt#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- wp:list -->\n<ul class=\"wp-block-list\"><!-- wp:list-item -->\n<li>x</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>y‸</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n```\n\n----------------------------------------\n\nTITLE: Installing @wordpress/react-i18n using npm\nDESCRIPTION: This command installs the @wordpress/react-i18n package using npm. This is a necessary first step before using any of the components or hooks provided by the package.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/react-i18n/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @wordpress/react-i18n\n```\n\n----------------------------------------\n\nTITLE: Installing @wordpress/a11y Package with npm\nDESCRIPTION: Command for installing the WordPress accessibility package as a dependency in your project using npm.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/a11y/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @wordpress/a11y --save\n```\n\n----------------------------------------\n\nTITLE: Another Paragraph Block HTML\nDESCRIPTION: This snippet presents another paragraph block. It contains a single letter, 'B', indicating the paragraph content. The surrounding comments indicate the block's start and end within the Gutenberg editor.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/test/e2e/specs/editor/various/__snapshots__/Copy-cut-paste-should-cut-paste-partial-selection-with-other-blocks-in-between-2-chromium.txt#2025-04-21_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n\"<!-- wp:paragraph -->\\n<p>B </p>\\n<!-- /wp:paragraph -->\"\n```\n\n----------------------------------------\n\nTITLE: Installing Prettier Config Package in Node.js\nDESCRIPTION: This shell command installs the WordPress Prettier config as a development dependency. Requires Node.js with long-term support.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/prettier-config/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ npm install @wordpress/prettier-config --save-dev\n```\n\n----------------------------------------\n\nTITLE: Implementing Tabs in Controlled Mode with React in TypeScript\nDESCRIPTION: Example of using the Tabs component in controlled mode where the parent component manages tab selection state. The component uses the selectedTabId and onSelect props to control tab selection, with TypeScript typing for the state variable.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/tabs/stories/best-practices.mdx#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Tabs } from '@wordpress/components';\n\nconst [ selectedTabId, setSelectedTabId ] = useState<\n\tstring | undefined | null\n>();\n\nconst onSelect = ( tabName ) => {\n\tconsole.log( 'Selecting tab', tabName );\n};\n\nconst MyControlledTabs = () => (\n\t<Tabs\n\t\tselectedTabId={ selectedTabId }\n\t\tonSelect={ ( selectedId ) => {\n\t\t\tsetSelectedTabId( selectedId );\n\t\t\tonSelect( selectedId );\n\t\t} }\n\t>\n\t\t<Tabs.TabList>\n\t\t\t<Tabs.Tab tabId=\"tab1\" title=\"Tab 1\">\n\t\t\t\tTab 1\n\t\t\t</Tabs.Tab>\n\t\t\t<Tabs.Tab tabId=\"tab2\" title=\"Tab 2\">\n\t\t\t\tTab 2\n\t\t\t</Tabs.Tab>\n\t\t\t<Tabs.Tab tabId=\"tab3\" title=\"Tab 3\">\n\t\t\t\tTab 3\n\t\t\t</Tabs.Tab>\n\t\t</Tabs.TabList>\n\t\t<Tabs.TabPanel tabId=\"tab1\">\n\t\t\t<p>Selected tab: Tab 1</p>\n\t\t</Tabs.TabPanel>\n\t\t<Tabs.TabPanel tabId=\"tab2\">\n\t\t\t<p>Selected tab: Tab 2</p>\n\t\t</Tabs.TabPanel>\n\t\t<Tabs.TabPanel tabId=\"tab3\">\n\t\t\t<p>Selected tab: Tab 3</p>\n\t\t</Tabs.TabPanel>\n\t</Tabs>\n);\n```\n\n----------------------------------------\n\nTITLE: Documenting Fluid Typography Properties in theme.json\nDESCRIPTION: HTML comment explaining how to maintain the changelog file, with a link to relevant documentation in the Gutenberg repository.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/schemas/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- Learn how to maintain this file at https://github.com/WordPress/gutenberg/tree/HEAD/packages#maintaining-changelogs. -->\n```\n\n----------------------------------------\n\nTITLE: Disabling Style Engine Optimization by Default in WordPress\nDESCRIPTION: Bug fix in version 1.22.0 that switches off optimization by default in the style engine.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/style-engine/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### Bug Fixes\n\n-   Style engine: switch off optimize by default [#53085](https://github.com/WordPress/gutenberg/pull/53085).\n```\n\n----------------------------------------\n\nTITLE: Referencing Changelog Maintenance Instructions in Markdown\nDESCRIPTION: This HTML comment provides a link to instructions on how to maintain the changelog file. It directs users to a specific directory in the WordPress/gutenberg GitHub repository.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/sync/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n<!-- Learn how to maintain this file at https://github.com/WordPress/gutenberg/tree/HEAD/packages#maintaining-changelogs. -->\n```\n\n----------------------------------------\n\nTITLE: Documenting Breaking Change in Markdown\nDESCRIPTION: This snippet documents a breaking change in version 1.0.0 of the project, which increases the minimum required Node.js version to v18.12.0. It includes a link to the related GitHub pull request and additional information about Node.js releases.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/undo-manager/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n### Breaking Changes\n\n-   Increase the minimum required Node.js version to v18.12.0 matching long-term support releases ([#31270](https://github.com/WordPress/gutenberg/pull/61930)). Learn more about [Node.js releases](https://nodejs.org/en/about/previous-releases).\n```\n\n----------------------------------------\n\nTITLE: Stopping WordPress Environment with wp-env\nDESCRIPTION: Command to stop the running WordPress Docker environment created by wp-env.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/getting-started-with-code-contribution.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run wp-env stop\n```\n\n----------------------------------------\n\nTITLE: Incorrect Global Flag Usage - Logical OR\nDESCRIPTION: Demonstrates incorrect usage within a logical OR expression\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/eslint-plugin/docs/rules/wp-global-usage.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nif ( true || globalThis.IS_GUTENBERG_PLUGIN ) {\n\t// implement feature here.\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Spacer Block in Gutenberg\nDESCRIPTION: WordPress Gutenberg spacer block that creates vertical spacing between elements. Uses inline style to define height and includes accessibility attributes.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/test/e2e/specs/editor/various/__snapshots__/Copy-cut-paste-should-cut-paste-partial-selection-with-other-blocks-in-between-1-chromium.txt#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- wp:spacer -->\n<div style=\"height:100px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n```\n\n----------------------------------------\n\nTITLE: Installing WordPress Icons Package via NPM\nDESCRIPTION: Command to install the @wordpress/icons package as a project dependency using npm.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/icons/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @wordpress/icons --save\n```\n\n----------------------------------------\n\nTITLE: Spacer Block in Gutenberg\nDESCRIPTION: WordPress Gutenberg spacer block creating vertical space with a fixed height of 100 pixels\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/test/e2e/specs/editor/various/__snapshots__/Copy-cut-paste-should-copy-paste-partial-selection-with-other-blocks-in-between-2-chromium.txt#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- wp:spacer -->\n<div style=\"height:100px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n```\n\n----------------------------------------\n\nTITLE: Basic HTML Comment in Markdown\nDESCRIPTION: HTML comment providing guidance on how to maintain the changelog file.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/commands/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- Learn how to maintain this file at https://github.com/WordPress/gutenberg/tree/HEAD/packages#maintaining-changelogs. -->\n```\n\n----------------------------------------\n\nTITLE: Initial Package Release Changelog Entry\nDESCRIPTION: First version changelog entry documenting initial package implementation.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/media-utils/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.1.0 (2019-01-03)\n\n### New Features\n\n-   Implemented first version of the package.\n```\n\n----------------------------------------\n\nTITLE: Additional Paragraph Block in Gutenberg\nDESCRIPTION: Second paragraph block in the Gutenberg markup, demonstrating multiple text blocks in a single document.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/test/e2e/specs/editor/various/__snapshots__/Copy-cut-paste-should-cut-paste-partial-selection-with-other-blocks-in-between-1-chromium.txt#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!-- wp:paragraph -->\n<p>B block</p>\n<!-- /wp:paragraph -->\n```\n\n----------------------------------------\n\nTITLE: 3-Clause BSD License for Web Platform Tests URL Data\nDESCRIPTION: The full text of the 3-Clause BSD License under which the Web Platform Tests URL data is made available. This license governs the use and distribution of the test data.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/url/src/test/fixtures/README.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n# The 3-Clause BSD License\n\nCopyright 2019 web-platform-tests contributors\n\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n```\n\n----------------------------------------\n\nTITLE: Reusable Blocks Namespace Declaration\nDESCRIPTION: Defines the namespace for reusable blocks functionality in Gutenberg\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core-reusable-blocks.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\ncore/reusable-blocks\n```\n\n----------------------------------------\n\nTITLE: Incorrect Store Reference Using String Literal in WordPress JavaScript\nDESCRIPTION: This code snippet demonstrates an incorrect method of referencing a WordPress data store by using a string literal. It imports the select function from the @wordpress/data package and incorrectly uses a string to access the core/blocks store. It highlights a discouraged practice within WordPress data store usage.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/eslint-plugin/docs/rules/data-no-store-string-literals.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { select } from '@wordpress/data';\n\nconst blockTypes = select( 'core/blocks' ).getBlockTypes();\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry Format\nDESCRIPTION: The changelog uses standard markdown formatting to document version releases with headings, bug fixes, enhancements, and links to related pull requests.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/interactivity/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 6.22.0 (2025-04-11)\n\n## 6.21.0 (2025-03-27)\n\n### Bug Fixes\n\n- Fix the logic path that merges plain objects ([#68579](https://github.com/WordPress/gutenberg/pull/68579)).\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Topics in WordPress Gutenberg Signaling Server\nDESCRIPTION: This code demonstrates how to subscribe to communication topics in the Gutenberg Signaling Server. It sends a POST request with the client's subscriber ID, specifies the 'subscribe' action type, and includes an array of topics the client wants to monitor.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/lib/experimental/sync/README.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nawait (\n\tawait fetch( window.wp.ajax.settings.url, {\n\t\tbody: new URLSearchParams( {\n\t\t\tsubscriber_id: '1',\n\t\t\taction: 'gutenberg_signaling_server',\n\t\t\tmessage: JSON.stringify( {\n\t\t\t\ttype: 'subscribe',\n\t\t\t\ttopics: [ 'WordPress', 'Drupal' ],\n\t\t\t} ),\n\t\t} ),\n\t\tmethod: 'POST',\n\t} )\n ).text();\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Configuration Options\nDESCRIPTION: This snippet describes new features in Gutenberg v1.9.0, adding `THROTTLE_CPU` and `DOWNLOAD_THROUGHPUT` environment variable configuration options. These options likely allow controlling CPU throttling and download throughput for testing or development purposes.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/e2e-tests/CHANGELOG.md#2025-04-21_snippet_10\n\nLANGUAGE: None\nCODE:\n```\nAdded `THROTTLE_CPU` and `DOWNLOAD_THROUGHPUT` environment variable configuration options ([#18770](https://github.com/WordPress/gutenberg/pull/18770)).\n```\n\n----------------------------------------\n\nTITLE: Retrieving Element Representation with getElement() - JavaScript\nDESCRIPTION: The getElement() function retrieves the representation of a bound DOM element, containing references to its properties and reactive state. This is essential for accessing specific attributes, enabling dynamic interaction based on element characteristics.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/api-reference.md#2025-04-21_snippet_42\n\nLANGUAGE: JavaScript\nCODE:\n```\n// store\nimport { store, getElement } from '@wordpress/interactivity';\n\nstore( 'myPlugin', {\n\tactions: {\n\t\tlog: () => {\n\t\t\tconst element = getElement();\n\t\t\t// Logs attributes\n\t\t\tconsole.log( 'element attributes => ', element.attributes );\n\t\t},\n\t},\n} );\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n\t\"data-wp-on--click\": 'actions.log',\n\t\"children\": ['Log'],\n\t\"onclick\": event => { evaluate(entry, event); }\n}\n```\n\n----------------------------------------\n\nTITLE: Internet Explorer 11 Support Removal\nDESCRIPTION: Breaking change documentation for dropping IE11 support in version 4.0.0\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-serialization-spec-parser/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n-   Drop support for Internet Explorer 11 ([#31110](https://github.com/WordPress/gutenberg/pull/31110)). Learn more at https://make.wordpress.org/core/2021/04/22/ie-11-support-phase-out-plan/.\n```\n\n----------------------------------------\n\nTITLE: Node.js Version Update\nDESCRIPTION: This snippet describes a breaking change in Gutenberg v5.0.0, where the minimum Node.js version was increased to 14. Users must update their Node.js environment to at least version 14 to use this version of Gutenberg.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/e2e-tests/CHANGELOG.md#2025-04-21_snippet_4\n\nLANGUAGE: None\nCODE:\n```\nIncrease the minimum Node.js version to 14 ([#43141](https://github.com/WordPress/gutenberg/pull/43141)).\n```\n\n----------------------------------------\n\nTITLE: Incorrect Ellipsis Usage in JavaScript\nDESCRIPTION: This code snippet demonstrates the incorrect usage of three dots (...) to represent an ellipsis within a translatable string. The rule aims to prevent this practice in favor of using the ellipsis character (U+2026).\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/eslint-plugin/docs/rules/i18n-ellipsis.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"__( 'Continue...' );\"\n```\n\n----------------------------------------\n\nTITLE: Gutenberg Paragraph Block - First Block\nDESCRIPTION: This code snippet represents a paragraph block in the WordPress Gutenberg editor. It uses HTML comments to define the block and a paragraph tag to contain the block's content. The content of this block is 'First block'.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/test/e2e/specs/editor/various/__snapshots__/Copy-cut-paste-should-respect-inline-copy-when-text-is-selected-1-chromium.txt#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- wp:paragraph -->\n<p>First block</p>\n<!-- /wp:paragraph -->\n```\n\n----------------------------------------\n\nTITLE: Displaying Source Code Form License Notice for MPL 2.0\nDESCRIPTION: This code snippet shows the required license notice for source code files under the Mozilla Public License 2.0. It informs recipients about the applicable license terms and where to obtain a copy of the license.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/LICENSE.md#2025-04-21_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n    This Source Code Form is subject to the terms of the Mozilla Public\n    License, v. 2.0. If a copy of the MPL was not distributed with this\n    file, You can obtain one at http://mozilla.org/MPL/2.0/.\n```\n\n----------------------------------------\n\nTITLE: Opting into Private APIs\nDESCRIPTION: This code snippet demonstrates how to opt in to private experimental APIs by importing the function from '@wordpress/private-apis' and using the consent string. The exported `lock` and `unlock` functions allow handling of private data within the package.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/private-apis/README.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// In packages/block-editor/private-apis.js:\nimport { __dangerousOptInToUnstableAPIsOnlyForCoreModules } from '@wordpress/private-apis';\nexport const { lock, unlock } =\n\t__dangerousOptInToUnstableAPIsOnlyForCoreModules(\n\t\t'I acknowledge private features are not for use in themes or plugins and doing so will break in the next version of WordPress.',\n\t\t'@wordpress/block-editor' // Name of the package calling __dangerousOptInToUnstableAPIsOnlyForCoreModules,\n\t\t// (not the name of the package whose APIs you want to access)\n\t);\n\n```\n\n----------------------------------------\n\nTITLE: Invalid Text Domain Usage Examples in JavaScript\nDESCRIPTION: Examples demonstrating incorrect usage of translation functions where text domains are either missing, invalid, or not allowed based on configuration.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/eslint-plugin/docs/rules/i18n-text-domain.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n__( 'Hello World' ); // unless allowedTextDomain contains 'default'\n__( 'Hello World', 'default' ); // with allowedTextDomain = [ 'default' ]\n__( 'Hello World', foo );\n```\n\n----------------------------------------\n\nTITLE: Refactoring to TypeScript\nDESCRIPTION: Internal refactoring of the blob module from JavaScript to TypeScript in version 4.1.0.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/blob/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n-   Refactor to TypeScript ([#62569](https://github.com/WordPress/gutenberg/pull/62569)).\n```\n\n----------------------------------------\n\nTITLE: Keyboard Event Matching Example\nDESCRIPTION: Example showing how to use the isKeyboardEvent utility to check if a keyboard event matches a predefined shortcut combination.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/keycodes/README.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Assuming an event for ⌘M key press:\nisKeyboardEvent.primary( event, 'm' );\n// true\n```\n\n----------------------------------------\n\nTITLE: Paragraph Block with Simple Text\nDESCRIPTION: WordPress Gutenberg paragraph block with basic text content\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/test/e2e/specs/editor/various/__snapshots__/Copy-cut-paste-should-cut-partial-selection-of-text-blocks-2-chromium.txt#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- wp:paragraph -->\n<p>block</p>\n<!-- /wp:paragraph -->\n```\n\n----------------------------------------\n\nTITLE: Generated API Documentation - Default Export\nDESCRIPTION: This markdown snippet illustrates the output of the docgen tool for a default export function, documenting the function's purpose, parameters, and return type.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/docgen/README.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n# API\\n\\n## default\\n\\n[example.js#L8-L10](example.js#L8-L10)\\n\\nAdds two numbers.\\n\\n**Parameters**\\n\\n-   **term1** `number`: First number.\\n-   **term2** `number`: Second number.\\n\\n**Returns**\\n\\n`number` The result of adding the two numbers.\n```\n\n----------------------------------------\n\nTITLE: Breaking Changes - Dependency Updates\nDESCRIPTION: The snippet details several breaking changes where the dependencies, such as 'postcss' and the Node.js version requirements, were updated. This ensures that developers are informed about the necessity of compatible versions for the proper functioning of the Gutenberg package.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/postcss-themes/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n-   The bundled `postcss` dependency requiring `^7.0.32` has been replaced with a peer dependency requiring `^8.0.0` (see [Breaking Changes](https://github.com/postcss/postcss/releases/tag/8.0.0), [#27821](https://github.com/WordPress/gutenberg/pull/27821)).\n```\n\n----------------------------------------\n\nTITLE: Gutenberg Heading Block HTML\nDESCRIPTION: This HTML snippet defines a heading block for the Gutenberg editor. It includes the `wp:heading` comment and the heading element with the `wp-block-heading` class.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/test/e2e/specs/editor/various/__snapshots__/Copy-cut-paste-should-cut-partial-selection-and-merge-like-a-normal-delete---not-forward-2-chromium.txt#2025-04-21_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Heph</h2>\n<!-- /wp:heading -->\n```\n\n----------------------------------------\n\nTITLE: Destroying WordPress Environment with wp-env\nDESCRIPTION: Command to completely destroy the WordPress Docker environment created by wp-env, removing all associated containers and volumes.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/getting-started-with-code-contribution.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run wp-env destroy\n```\n\n----------------------------------------\n\nTITLE: WordPress Gutenberg Table Block\nDESCRIPTION: This snippet demonstrates the HTML structure of a table block in the WordPress Gutenberg editor. It includes the necessary HTML tags to define a table with a fixed layout and some content within table cells.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/test/e2e/specs/editor/blocks/__snapshots__/Table-allows-header-and-footer-rows-to-be-switched-on-and-off-2-chromium.txt#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n\"<!-- wp:table -->\\n<figure class=\\\"wp-block-table\\\"><table class=\\\"has-fixed-layout\\\"><tbody><tr><td>body</td><td></td></tr><tr><td></td><td></td></tr></tbody></table></figure>\\n<!-- /wp:table -->\"\n```\n\n----------------------------------------\n\nTITLE: Node.js Version Requirement Update in Gutenberg 7.0.0\nDESCRIPTION: Increased minimum Node.js version to v18.12.0 to match long-term support releases\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/plugins/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Minimum Node.js version: v18.12.0\n```\n\n----------------------------------------\n\nTITLE: Toggling Publish Sidebar in WordPress Gutenberg (Deprecated JavaScript)\nDESCRIPTION: This deprecated function returns an action object used to signal that the user toggles the publish sidebar. It returns an Object representing the action object.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core-edit-post.md#2025-04-21_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\ntogglePublishSidebar()\n```\n\n----------------------------------------\n\nTITLE: HTML Comment Instruction\nDESCRIPTION: Comment providing instructions for maintaining the changelog file\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/notices/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- Learn how to maintain this file at https://github.com/WordPress/gutenberg/tree/HEAD/packages#maintaining-changelogs. -->\n```\n\n----------------------------------------\n\nTITLE: Incorrect Translation Function Usage in JavaScript\nDESCRIPTION: Examples of incorrect code that violate the i18n-translator-comments rule by missing translator comments or having improper comment format.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/eslint-plugin/docs/rules/i18n-translator-comments.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar color = '';\nsprintf( __( 'Color: %s' ), color );\n\nvar address = '';\nsprintf( __( 'Address: %s' ), address );\n\n// translators: %s: Name\nvar name = '';\nsprintf( __( 'Name: %s' ), name );\n```\n\n----------------------------------------\n\nTITLE: Displaying an Elevation Examples Diagram\nDESCRIPTION: This snippet displays the `elevationExamples.svg` image within the documentation. The `alt` attribute describes the image as a diagram illustrating elevation levels.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/storybook/stories/foundations/design-language/elevation.mdx#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<img src={ elevationExamples } alt=\"Diagram illustrating elevation levels\" width=\"100%\" />\n```\n\n----------------------------------------\n\nTITLE: Importing TextDecorationControl Component in JSX\nDESCRIPTION: Shows how to import the experimental TextDecorationControl component from the WordPress block editor package.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/src/components/text-decoration-control/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { __experimentalTextDecorationControl as TextDecorationControl } from '@wordpress/block-editor';\n```\n\n----------------------------------------\n\nTITLE: Installing @wordpress/readable-js-assets-webpack-plugin via npm\nDESCRIPTION: This command installs the @wordpress/readable-js-assets-webpack-plugin package as a development dependency using npm.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/readable-js-assets-webpack-plugin/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @wordpress/readable-js-assets-webpack-plugin --save-dev\n```\n\n----------------------------------------\n\nTITLE: Gutenberg Paragraph Block HTML\nDESCRIPTION: This HTML snippet defines a Gutenberg paragraph block. It uses HTML comments to mark the beginning and end of the block, and the paragraph element contains the block's content.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/test/e2e/specs/editor/various/__snapshots__/Copy-cut-paste-should-copy-only-partial-selection-of-text-blocks-2-chromium.txt#2025-04-21_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- wp:paragraph -->\n<p>B block</p>\n<!-- /wp:paragraph -->\n```\n\n----------------------------------------\n\nTITLE: Rendering Table Block with HTML\nDESCRIPTION: This snippet defines a table block for the Gutenberg editor using HTML tags. It utilizes the 'wp:table' block registration and renders a fixed-layout table structure with empty cells. No specific dependencies are required beyond WordPress and the Gutenberg plugin itself.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/test/e2e/specs/editor/blocks/__snapshots__/Table-displays-a-form-for-choosing-the-row-and-column-count-of-the-table-1-chromium.txt#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- wp:table -->\n<figure class=\"wp-block-table\"><table class=\"has-fixed-layout\"><tbody><tr><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr></tbody></table></figure>\n<!-- /wp:table -->\n```\n\n----------------------------------------\n\nTITLE: Inserting and Editing Quote Block with Snapshot Testing in JavaScript\nDESCRIPTION: This code snippet demonstrates the insertion of a quote block, typing content, and using snapshot testing for assertions. It illustrates the lack of clarity in snapshot-based tests without proper context.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/e2e/overusing-snapshots.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nawait editor.insertBlock( { name: 'core/quote' } );\nawait page.keyboard.type( '1' );\nawait page.keyboard.press( 'Enter' );\nawait page.keyboard.press( 'Enter' );\n\nexpect( await editor.getEditedPostContent() ).toMatchSnapshot();\n\nawait page.keyboard.press( 'Backspace' );\nawait page.keyboard.type( '2' );\n\nexpect( await editor.getEditedPostContent() ).toMatchSnapshot();\n```\n\n----------------------------------------\n\nTITLE: HTML Comment - Changelog Maintenance Instructions\nDESCRIPTION: Comment providing a link to documentation about maintaining the changelog file.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- Learn how to maintain this file at https://github.com/WordPress/gutenberg/tree/HEAD/packages#maintaining-changelogs. -->\n```\n\n----------------------------------------\n\nTITLE: Creating a Constrained Group Block with Nested Paragraph in WordPress Gutenberg\nDESCRIPTION: This HTML markup creates a constrained group block in WordPress Gutenberg that contains a paragraph block with the content '1'. The markup includes the necessary comment blocks that WordPress uses to identify and render Gutenberg blocks.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/test/e2e/specs/editor/blocks/__snapshots__/Group-can-merge-into-group-with-Backspace-1-chromium.txt#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- wp:group {\"layout\":{\"type\":\"constrained\"}} -->\n<div class=\"wp-block-group\"><!-- wp:paragraph -->\n<p>1</p>\n<!-- /wp:paragraph --></div>\n<!-- /wp:group -->\n```\n\n----------------------------------------\n\nTITLE: Bug Fix for Removing Unused Dependency\nDESCRIPTION: Removal of an unused WordPress URL dependency from the package to clean up dependencies and potentially reduce bundle size.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/widgets/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n-   Removed unused `@wordpress/url` dependency ([#38388](https://github.com/WordPress/gutenberg/pull/38388)).\n```\n\n----------------------------------------\n\nTITLE: Updating Environment Variables Code Example\nDESCRIPTION: Code change example showing migration from process.env to globalThis for environment variables used in Gutenberg plugin.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/jest-preset-default/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nprocess.env.IS_GUTENBERG_PLUGIN -> globalThis.IS_GUTENBERG_PLUGIN\n```\n\n----------------------------------------\n\nTITLE: Drop Internet Explorer 11 support in Gutenberg\nDESCRIPTION: This changelog entry documents a breaking change where support for Internet Explorer 11 was dropped in Gutenberg. This decision was likely made to simplify development and leverage newer web technologies. A link to a WordPress core blog post explains the rationale.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/escape-html/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: None\nCODE:\n```\n-   Drop support for Internet Explorer 11 ([#31110](https://github.com/WordPress/gutenberg/pull/31110)). Learn more at https://make.wordpress.org/core/2021/04/22/ie-11-support-phase-out-plan/.\n```\n\n----------------------------------------\n\nTITLE: Stopping All Docker Containers\nDESCRIPTION: Command to stop all running Docker containers, which can be useful when encountering \"Host is already in use\" errors with wp-env.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/getting-started/devenv/get-started-with-wp-env.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ndocker stop $(docker ps -q)\n```\n\n----------------------------------------\n\nTITLE: Gutenberg Block HTML Representation\nDESCRIPTION: This snippet shows the HTML representation of a Gutenberg block. The block is named \"test/iframed-block\" and contains a paragraph with a specific class.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/test/e2e/specs/editor/plugins/__snapshots__/Iframed-block-should-load-script-and-dependencies-in-iframe-1-chromium.txt#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- wp:test/iframed-block -->\n<p class=\"wp-block-test-iframed-block\">Iframed Block (saved)</p>\n<!-- /wp:test/iframed-block -->\n```\n\n----------------------------------------\n\nTITLE: Documenting Changelog Maintenance in Markdown\nDESCRIPTION: This comment provides a link to instructions on how to maintain the changelog file in the WordPress Gutenberg repository.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/router/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- Learn how to maintain this file at https://github.com/WordPress/gutenberg/tree/HEAD/packages#maintaining-changelogs. -->\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Docusaurus Website\nDESCRIPTION: Command to install all required npm dependencies for the Docusaurus website project.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/platform-docs/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install\n```\n\n----------------------------------------\n\nTITLE: CSS Best Practices for wp-class Directive\nDESCRIPTION: Recommended and not recommended CSS examples showcasing best practices for class naming conventions when using the wp-class directive, emphasizing the use of kebab-case.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/api-reference.md#2025-04-21_snippet_10\n\nLANGUAGE: css\nCODE:\n```\n.is-dark {\n\t/* ... */\n}\n\n.isDark {\n\t/* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Spacer Block Definition\nDESCRIPTION: Defines a spacer block in Gutenberg. It utilizes an HTML comment to mark the block, and a div with inline styles and aria attributes to create a space of a specific height.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/test/e2e/specs/editor/various/__snapshots__/Copy-cut-paste-should-cut-and-paste-individual-non-textual-blocks-1-chromium.txt#2025-04-21_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- wp:spacer -->\n<div style=\"height:100px\" aria-hidden=\"true\" class=\"wp-block-spacer\"></div>\n<!-- /wp:spacer -->\n```\n\n----------------------------------------\n\nTITLE: Changelog Importance Labeling System\nDESCRIPTION: A structured annotation system for categorizing the significance of changes in mobile Gutenberg releases. Labels range from minor enhancements (*) to major feature updates (***), helping users understand the impact of each change.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/react-native-aztec/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[***] → Major new features, significant updates to core flows, or impactful fixes\n```\n\nLANGUAGE: markdown\nCODE:\n```\n[**] → Changes our users will probably notice, but doesn't impact core flows\n```\n\nLANGUAGE: markdown\nCODE:\n```\n[*] → Minor enhancements and fixes that address annoyances\n```\n\n----------------------------------------\n\nTITLE: Changelog Header Comment\nDESCRIPTION: Comment providing link to documentation about maintaining changelog files\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-serialization-default-parser/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- Learn how to maintain this file at https://github.com/WordPress/gutenberg/tree/HEAD/packages#maintaining-changelogs. -->\n```\n\n----------------------------------------\n\nTITLE: Creating a Paragraph Block - HTML\nDESCRIPTION: This snippet creates a paragraph block that displays the text 'A block'. It is formatted according to the Gutenberg block specifications.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/test/e2e/specs/editor/various/__snapshots__/Copy-cut-paste-should-copy-only-partial-selection-of-text-blocks-1-chromium.txt#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- wp:paragraph -->\n<p>A block</p>\n<!-- /wp:paragraph -->\n```\n\n----------------------------------------\n\nTITLE: Documenting Version 1.70.0 Changes in WordPress Gutenberg Changelog\nDESCRIPTION: This section outlines the changes in version 1.70.0 of the WordPress Gutenberg project. It includes a fix for handling Hebrew and Indonesian translations on Android.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/react-native-bridge/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.70.0\n\n-   [**] Fix Android handling of Hebrew and Indonesian translations [#37565]\n```\n\n----------------------------------------\n\nTITLE: Action Creator: receiveDownloadableBlocks\nDESCRIPTION: This action creator is used to signal that the downloadable blocks have updated. It takes an array of downloadable blocks and a filter value string as parameters and returns an action object.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-directory/README.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// Action creator\nfunction receiveDownloadableBlocks(downloadableBlocks, filterValue) {\n    return {\n        type: 'RECEIVE_DOWNLOADABLE_BLOCKS',\n        downloadableBlocks: downloadableBlocks,\n        filterValue: filterValue\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Providing Block Context in JavaScript\nDESCRIPTION: This snippet demonstrates how to define and provide block context in a Gutenberg block's registered settings. It shows how to map a context name to a block attribute.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-context.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nattributes: {\n\trecordId: {\n\t\ttype: 'number',\n\t},\n},\n\nprovidesContext: {\n\t'my-plugin/recordId': 'recordId',\n},\n```\n\n----------------------------------------\n\nTITLE: Using Keycodes for Event Handling\nDESCRIPTION: Example showing how to use keycodes to handle keyboard events in a WordPress application. Demonstrates checking for DOWN and ENTER key presses in an onKeyDown event handler.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/keycodes/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { DOWN, ENTER } from '@wordpress/keycodes';\n\n// [...]\n\nonKeyDown( event ) {\n\tconst { keyCode } = event;\n\n\tif ( keyCode === DOWN ) {\n\t\talert( 'You pressed the down arrow!' );\n\t} else if ( keyCode === ENTER ) {\n\t\talert( 'You pressed the enter key!' );\n\t} else {\n\t\talert( 'You pressed another key.' );\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Todo List Store Types and Logic in TypeScript\nDESCRIPTION: Defines TypeScript types for the todo list store and implements core functionality including derived state and actions\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/core-concepts/using-typescript.md#2025-04-21_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n// todo-list-block/view.ts\ntype ServerState = {\n\tstate: {\n\t\ttodos: string[];\n\t\tfilter: 'all' | 'completed';\n\t};\n};\n\nconst todoList = {\n\tstate: {\n\t\tget filteredTodos(): string[] {\n\t\t\treturn state.filter === 'completed'\n\t\t\t\t? state.todos.filter( ( todo ) => todo.includes( '✅' ) )\n\t\t\t\t: state.todos;\n\t\t},\n\t},\n\tactions: {\n\t\taddTodo( todo: string ) {\n\t\t\tstate.todos.push( todo );\n\t\t},\n\t},\n};\n\n// Merges the inferred types with the server state types.\nexport type TodoList = ServerState & typeof todoList;\n\n// Injects the final types when calling the `store` function.\nconst { state } = store< TodoList >( 'myTodoPlugin', todoList );\n```\n\n----------------------------------------\n\nTITLE: Refactor to TypeScript in Gutenberg\nDESCRIPTION: This changelog entry documents the refactoring of code to TypeScript within the Gutenberg project.  This indicates an effort to improve code maintainability, readability, and type safety. The pull request number is provided for further details.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/escape-html/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: None\nCODE:\n```\n-   Refactor to TypeScript ([#62586](https://github.com/WordPress/gutenberg/pull/62586)).\n```\n\n----------------------------------------\n\nTITLE: Nesting Local Contexts Example\nDESCRIPTION: Demonstrates how to nest local contexts with inheritance and value overriding.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/core-concepts/undestanding-global-state-local-context-and-derived-state.md#2025-04-21_snippet_18\n\nLANGUAGE: html\nCODE:\n```\n<div data-wp-context='{ \"theme\": \"light\", \"counter\": 0 }'>\n\t<p>Theme: <span data-wp-text=\"context.theme\"></span></p>\n\t<p>Counter: <span data-wp-text=\"context.counter\"></span></p>\n\n\t<div data-wp-context='{ \"theme\": \"dark\" }'>\n\t\t<p>Theme: <span data-wp-text=\"context.theme\"></span></p>\n\t\t<p>Counter: <span data-wp-text=\"context.counter\"></span></p>\n\t</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Changelog Markdown Content\nDESCRIPTION: Markdown formatted changelog entries documenting version history, bug fixes, enhancements and breaking changes for the WordPress Gutenberg Router package.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/interactivity-router/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- Learn how to maintain this file at https://github.com/WordPress/gutenberg/tree/HEAD/packages#maintaining-changelogs. -->\n\n## Unreleased\n\n## 2.22.0 (2025-04-11)\n\n## 2.21.0 (2025-03-27)\n\n## 2.20.0 (2025-03-13)\n\n## 2.19.0 (2025-02-28)\n\n### Bug Fixes\n\n-   Revert \"Handle styles assets on region-based navigation\". ([#69222](https://github.com/WordPress/gutenberg/pull/69222))\n\n## 2.18.0 (2025-02-12)\n\n### Bug Fixes\n\n-   Fix CSS rule order in some constructed style sheets. ([#68923](https://github.com/WordPress/gutenberg/pull/68923))\n\n## 2.17.0 (2025-01-29)\n\n## 2.16.0 (2025-01-15)\n\n## 2.15.0 (2025-01-02)\n\n## 2.14.0 (2024-12-11)\n\n## 2.13.0 (2024-11-27)\n\n## 2.12.0 (2024-11-16)\n\n## 2.11.0 (2024-10-30)\n\n## 2.10.0 (2024-10-16)\n\n### Enhancements\n\n-   Improvements to the experimental full-page navigation ([#64067](https://github.com/WordPress/gutenberg/pull/64067)):\n    -   Remove the `src` attributes from prefetched script tags.\n    -   Use `.textContent` instead of `.innerText` to set `<script>` contents.\n    -   Use [`populateServerData()`](https://github.com/WordPress/gutenberg/blob/9671329c386d2b743f14ef314823fbf915366ebd/packages/interactivity/src/store.ts#L269) with state from the server.\n    -   Wait for the `load` event of the script element before evaluating it.\n    -   Make `renderRegions()` an async function.\n    -   Only prefetch **module** scripts, never prefetch regular scripts. That's because regular scripts (without `async` or `defer` attributes) found in the head are blocking and must be executed in order. When prefetching there is no guarantee that the scripts will execute in the order they are prefetched. Module scripts can be executed in any order.\n```\n\n----------------------------------------\n\nTITLE: Creating a Preformatted Block in WordPress Gutenberg\nDESCRIPTION: This HTML snippet demonstrates how to create a preformatted block in WordPress Gutenberg. It contains three consecutive numbers (0, 1, 2) displayed on separate lines using HTML line break tags.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/test/e2e/specs/editor/blocks/__snapshots__/Preformatted-should-preserve-character-newlines-2-chromium.txt#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">0<br>1<br>2</pre>\n<!-- /wp:preformatted -->\n```\n\n----------------------------------------\n\nTITLE: Syncing Fork with Upstream\nDESCRIPTION: Commands to fetch and merge upstream changes to keep your fork updated.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/git-workflow.md#2025-04-21_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ngit fetch upstream\ngit checkout trunk\ngit merge upstream/trunk\n```\n\n----------------------------------------\n\nTITLE: Button Block Markup\nDESCRIPTION: WordPress Gutenberg button block with a clickable link element, demonstrating nested block structure\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/test/e2e/specs/editor/various/__snapshots__/Copy-cut-paste-can-copy-group-onto-non-textual-element-image-spacer-1-chromium.txt#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- wp:buttons -->\n<div class=\"wp-block-buttons\"><!-- wp:button -->\n<div class=\"wp-block-button\"><a class=\"wp-block-button__link wp-element-button\">Click</a></div>\n<!-- /wp:button --></div>\n<!-- /wp:buttons -->\n```\n\n----------------------------------------\n\nTITLE: Package Dependency Update in WordPress Gutenberg\nDESCRIPTION: Replacement of the 'classnames' package with 'clsx' package for better performance. This internal change aims to improve speed and reduce package size.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/widgets/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n-   Replaced `classnames` package with the faster and smaller `clsx` package ([#61138](https://github.com/WordPress/gutenberg/pull/61138)).\n```\n\n----------------------------------------\n\nTITLE: Replacing Main Dashboard Button Icon in WordPress Gutenberg\nDESCRIPTION: This code snippet demonstrates how to replace the default W icon of the main dashboard button with a close icon. It uses the MainDashboardButton SlotFill and the registerPlugin function from WordPress.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/slotfills/main-dashboard-button.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { registerPlugin } from '@wordpress/plugins';\nimport { __experimentalMainDashboardButton as MainDashboardButton } from '@wordpress/edit-post';\nimport { close } from '@wordpress/icons';\n\nconst MainDashboardButtonTest = () => (\n\t<MainDashboardButton>\n\t\t<FullscreenModeClose icon={ close } />\n\t</MainDashboardButton>\n);\n\nregisterPlugin( 'main-dashboard-button-test', {\n\trender: MainDashboardButtonTest,\n} );\n```\n\n----------------------------------------\n\nTITLE: Documenting Changelog Maintenance in WordPress Gutenberg\nDESCRIPTION: This HTML comment provides a link to instructions on how to maintain the changelog file in the WordPress Gutenberg repository.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/upload-media/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- Learn how to maintain this file at https://github.com/WordPress/gutenberg/tree/HEAD/packages#maintaining-changelogs. -->\n```\n\n----------------------------------------\n\nTITLE: Importing Menu Stories in Storybook for Gutenberg\nDESCRIPTION: This code snippet imports the Meta component from Storybook and the Menu stories from the index.story file. It then sets up the Meta component for the Menu stories with a name of 'Best Practices'.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/menu/stories/best-practices.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Meta } from '@storybook/blocks';\n\nimport * as MenuStories from './index.story';\n\n<Meta of={ MenuStories } name=\"Best Practices\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing a Save Record Action Using Controls in JavaScript\nDESCRIPTION: This code shows how to implement a save record action using controls, which require separate implementation of side effects.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/thunks.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport function* saveRecordAction( id ) {\n\tconst record = yield controls.select( 'current-store', 'getRecord', id );\n\tyield { type: 'BEFORE_SAVE', id, record };\n\tconst results = yield controls.fetch({ url: 'https://...', method: 'POST', data: record });\n\tyield { type: 'AFTER_SAVE', id, results };\n\treturn results;\n}\n\nconst controls = {\n\tselect: // ...,\n\tfetch: // ...,\n};\n```\n\n----------------------------------------\n\nTITLE: Block Parent Type Normalization\nDESCRIPTION: Breaking change note about normalizing blockType.parent to be an array instead of string values.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/blocks/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nblockType.parent: string -> blockType.parent: array\n```\n\n----------------------------------------\n\nTITLE: Installing URL Package for WordPress\nDESCRIPTION: Command to install the @wordpress/url package using npm. This package provides URL manipulation utilities for WordPress projects.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/url/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @wordpress/url --save\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Block Bindings Sources in WordPress Gutenberg\nDESCRIPTION: This code snippet shows how to get all registered block bindings sources using the getBlockBindingsSources function from the @wordpress/blocks package. It returns an array of all registered sources.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-bindings.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getBlockBindingsSources } from '@wordpress/blocks';\n\nconst registeredSources = getBlockBindingsSources();\n```\n\n----------------------------------------\n\nTITLE: Describing Mobile Components Directory in Markdown\nDESCRIPTION: This Markdown snippet provides an overview of the mobile components directory, explaining its purpose and contents. It emphasizes that the components are specifically for native mobile apps and not for web interfaces.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/mobile/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# Mobile Components\n\nThis directory houses generic WordPress components to be used for creating common UI elements shared between screens and features of the WordPress native mobile apps. The components in this directory are generally mobile-specific, and not utilized for web interfaces.\n```\n\n----------------------------------------\n\nTITLE: Interactive Fruit List with Local Context\nDESCRIPTION: Creating an interactive list using directives that reference local context, with both context definition and iteration in the same element.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/core-concepts/server-side-rendering.md#2025-04-21_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<ul\n\tdata-wp-interactive=\"myFruitPlugin\"\n\tdata-wp-context='{ \"fruits\": [ \"Apple\", \"Banana\", \"Cherry\" ] }'\n>\n\t<template data-wp-each=\"context.fruits\">\n\t\t<li data-wp-text=\"context.item\"></li>\n\t</template>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Rendering InspectorPopoverHeader in Dropdown\nDESCRIPTION: Example of using InspectorPopoverHeader with a Dropdown component to create a post date selection popover with a header, actions, and close button\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/src/components/inspector-popover-header/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst MyPostDatePopover = () => {\n\treturn (\n\t\t<Dropdown\n\t\t\trenderToggle={ ( { isOpen, onToggle } ) => (\n\t\t\t\t<Button\n\t\t\t\t\tonClick={ onToggle }\n\t\t\t\t\taria-expanded={ isOpen }\n\t\t\t\t>\n\t\t\t\t\tSelect post date\n\t\t\t\t</Button>\n\t\t\t) }\n\t\t\trenderContent={ ( { onClose } ) => (\n\t\t\t\t<>\n\t\t\t\t\t<InspectorPopoverHeader\n\t\t\t\t\t\ttitle=\"Post date\"\n\t\t\t\t\t\tactions={ [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tlabel: 'Reset',\n\t\t\t\t\t\t\t\tonClick: () => {},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t] }\n\t\t\t\t\t\tonClose={ onClose }\n\t\t\t\t\t/>\n\t\t\t\t\tPlace form for editing post date here\n\t\t\t\t</>\n\t\t\t) }\n\t\t/>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Using Spacer Within VStack for Dynamic Layouts in React\nDESCRIPTION: This example shows how to use the Spacer component within a VStack layout to adjust spacing dynamically. By placing Spacer between Text elements, the layout adapts to flesh out spacing between 'Code', 'is', and 'Poetry'. The '@wordpress/components' package must be installed for Spacer and Text. There are no additional parameters, and the output is a VStack with selectively spaced Text elements.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/v-stack/README.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n\t__experimentalSpacer as Spacer,\n\t__experimentalText as Text,\n\t__experimentalVStack as VStack,\n} from '@wordpress/components';\n\nfunction Example() {\n\treturn (\n\t\t<VStack>\n\t\t\t<Text>Code</Text>\n\t\t\t<Spacer>\n\t\t\t\t<Text>is</Text>\n\t\t\t</Spacer>\n\t\t\t<Text>Poetry</Text>\n\t\t</VStack>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting Functions for Core Merging\nDESCRIPTION: Example of proper function documentation that includes a note about where the function should live when merged to WordPress Core, which helps future developers during the merge process.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/lib/README.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Returns a navigation object for the given slug.\n *\n * Should live in `wp-includes/navigation.php` when merged to Core.\n *\n * @since 6.3.0\n *\n * @param string $slug\n * @return WP_Navigation\n */\nfunction wp_get_navigation( $slug ) { ... }\n```\n\n----------------------------------------\n\nTITLE: ContextualField Example\nDESCRIPTION: This TypeScript code snippet demonstrates the usage of the `ContextualField` type. The `modified` field is available in both `edit` and `view` contexts, while the `password` field is only available in the `edit` context. This ensures that fields are only present in the type when the API context allows it, providing type safety based on the REST API context.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/core-data/src/entity-types/README.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Post< C extends Context > {\n\t…\n\tmodified: ContextualField< string, 'edit' | 'view', C >;\n\tpassword: ContextualField< string, 'edit', C >;\n\t…\n}\n\nconst post: Post<'edit'> = …\n// post.modified exists as a string\n// post.password exists as a string\n\nconst post: Post<'view'> = …\n// post.modified still exists as a string\n// post.password is missing, undefined, because we're not in the `edit` context.\n```\n\n----------------------------------------\n\nTITLE: Managing Pinned Items with WordPress Interface Store\nDESCRIPTION: Shows how to pin and unpin items using WordPress interface store methods\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/interface/README.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nwp.data.select( 'core/interface' ).isItemPinned( 'core', 'edit-post-block-patterns/block-patterns-sidebar' );\n// -> false\n\nwp.data.dispatch( 'core/interface' ).pinItem( 'core', 'edit-post-block-patterns/block-patterns-sidebar' );\n\nwp.data.select( 'core/interface' ).isItemPinned( 'core', 'edit-post-block-patterns/block-patterns-sidebar' );\n// -> true\n```\n\n----------------------------------------\n\nTITLE: Initializing Plugin Sidebar in JavaScript\nDESCRIPTION: Basic JavaScript implementation to register and render a plugin sidebar using WordPress plugins API and React components.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/plugin-sidebar-0.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n( function ( wp, React ) {\n\tvar el = React.createElement;\n\tvar registerPlugin = wp.plugins.registerPlugin;\n\tvar PluginSidebar = wp.editor.PluginSidebar;\n\n\tregisterPlugin( 'my-plugin-sidebar', {\n\t\trender: function () {\n\t\t\treturn el(\n\t\t\t\tPluginSidebar,\n\t\t\t\t{\n\t\t\t\t\tname: 'my-plugin-sidebar',\n\t\t\t\t\ticon: 'admin-post',\n\t\t\t\t\ttitle: 'My plugin sidebar',\n\t\t\t\t},\n\t\t\t\t'Meta field'\n\t\t\t);\n\t\t},\n\t} );\n} )( window.wp, window.React );\n```\n\n----------------------------------------\n\nTITLE: Accessing Editor Settings with wp.data\nDESCRIPTION: Example of accessing editor settings using the data module instead of deprecated withEditorSettings\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/deprecations.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nwp.data.select(\"core/editor\").getEditorSettings()\n```\n\n----------------------------------------\n\nTITLE: Documenting Unreleased Changes in WordPress Gutenberg Changelog\nDESCRIPTION: This section is a placeholder for unreleased changes in the WordPress Gutenberg project. It's currently empty, indicating no unreleased changes at the moment.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/react-native-bridge/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Unreleased\n```\n\n----------------------------------------\n\nTITLE: Installing the WordPress Widgets Package using npm\nDESCRIPTION: Command to install the @wordpress/widgets package using npm. This package provides common functionality for the widgets block editor in WordPress.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/widgets/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @wordpress/widgets\n```\n\n----------------------------------------\n\nTITLE: Retrieving Shortcut Representation in React (JavaScript)\nDESCRIPTION: This example demonstrates how to use the getShortcutRepresentation selector to retrieve different string representations of a shortcut (display, raw, ariaLabel).\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core-keyboard-shortcuts.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { store as keyboardShortcutsStore } from '@wordpress/keyboard-shortcuts';\nimport { useSelect } from '@wordpress/data';\nimport { sprintf } from '@wordpress/i18n';\n\nconst ExampleComponent = () => {\n\tconst { display, raw, ariaLabel } = useSelect( ( select ) => {\n\t\treturn {\n\t\t\tdisplay: select( keyboardShortcutsStore ).getShortcutRepresentation(\n\t\t\t\t'core/editor/next-region'\n\t\t\t),\n\t\t\traw: select( keyboardShortcutsStore ).getShortcutRepresentation(\n\t\t\t\t'core/editor/next-region',\n\t\t\t\t'raw'\n\t\t\t),\n\t\t\tariaLabel: select(\n\t\t\t\tkeyboardShortcutsStore\n\t\t\t).getShortcutRepresentation(\n\t\t\t\t'core/editor/next-region',\n\t\t\t\t'ariaLabel'\n\t\t\t),\n\t\t};\n\t}, [] );\n\n\treturn (\n\t\t<ul>\n\t\t\t<li>{ sprintf( 'display string: %s', display ) }</li>\n\t\t\t<li>{ sprintf( 'raw string: %s', raw ) }</li>\n\t\t\t<li>{ sprintf( 'ariaLabel string: %s', ariaLabel ) }</li>\n\t\t</ul>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Block Transform for Legacy Widget in JavaScript\nDESCRIPTION: This JavaScript code defines a block transform that converts a Legacy Widget block containing a specific widget into a custom block. It demonstrates how to match the widget and transform its data.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/widgets/legacy-widget-block.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ntransforms: {\n\tfrom: [\n\t\t{\n\t\t\ttype: 'block',\n\t\t\tblocks: [ 'core/legacy-widget' ],\n\t\t\tisMatch: ( { idBase, instance } ) => {\n\t\t\t\tif ( ! instance?.raw ) {\n\t\t\t\t\t// Can't transform if raw instance is not shown in REST API.\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\treturn idBase === 'example_widget';\n\t\t\t},\n\t\t\ttransform: ( { instance } ) => {\n\t\t\t\treturn createBlock( 'example/block', {\n\t\t\t\t\tname: instance.raw.name,\n\t\t\t\t} );\n\t\t\t},\n\t\t},\n\t]\n},\n```\n\n----------------------------------------\n\nTITLE: Disabling Background Color and Gradients for Heading Blocks in PHP\nDESCRIPTION: This example uses the block_type_metadata filter to disable background color and gradient support specifically for Heading blocks.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/filters/block-filters.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction example_disable_heading_background_color_and_gradients( $metadata ) {\n\t\n\t// Only apply the filter to Heading blocks.\n\tif ( ! isset( $metadata['name'] ) || 'core/heading' !== $metadata['name'] ) {\n\t\treturn $metadata;\n\t}\n\n\t// Check if 'supports' key exists.\n\tif ( isset( $metadata['supports'] ) && isset( $metadata['supports']['color'] ) ) {\n\t\t\n\t\t// Remove Background color and Gradients support.\n\t\t$metadata['supports']['color']['background'] = false;\n\t\t$metadata['supports']['color']['gradients']  = false;\n\t}\n\n\treturn $metadata;\n}\nadd_filter( 'block_type_metadata', 'example_disable_heading_background_color_and_gradients' );\n```\n\n----------------------------------------\n\nTITLE: Enabling Custom Colors for Paragraph Block in Gutenberg\nDESCRIPTION: This JSON snippet demonstrates how to enable custom colors specifically for the paragraph block within the Gutenberg editor. The `settings` object controls various theme features, and the `blocks` property allows for block-specific customizations. Here, it enables the custom color option for the `core/paragraph` block while disabling it globally.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/themes/global-settings-and-styles.md#2025-04-21_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"version\": 3,\n\t\"settings\": {\n\t\t\"color\": {\n\t\t\t\"custom\": false\n\t\t},\n\t\t\"blocks\": {\n\t\t\t\"core/paragraph\": {\n\t\t\t\t\"color\": {\n\t\t\t\t\t\"custom\": true\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Edited Entity Record\nDESCRIPTION: This Javascript code snippet illustrates how to use the `getEditedEntityRecord` selector to retrieve the updatable version of a post entity.  The comment indicates that `post.content` will be a string, as the `Updatable` type has been applied, representing the data structure when editing an entity.  `wp.data.select('core')` is assumed to provide the necessary data fetching functionality.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/core-data/src/entity-types/README.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst post = wp.data.select('core').getEditedEntityRecord( 'postType', 'post', 1 );\n// `post.content` is a string\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Template Configuration in JavaScript\nDESCRIPTION: This JavaScript snippet customizes default template settings via the 'defaultValues' field. It specifies values such as 'slug', 'title', 'dashicon', and 'version', which are used when no user data is provided. These configurations are critical for accurately generating plugin and block files.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/create-block/docs/external-template.md#2025-04-21_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n\tdefaultValues: {\n\t\tslug: 'my-fantastic-block',\n\t\ttitle: 'My fantastic block',\n\t\tdashicon: 'palmtree',\n\t\tversion: '1.2.3',\n\t},\n};\n```\n\n----------------------------------------\n\nTITLE: Hiding Block from the Inserter in Gutenberg (JavaScript)\nDESCRIPTION: This snippet hides the block from being displayed in the inserter and other UI components by setting the `inserter` property to false.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-supports.md#2025-04-21_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nsupports: {\n\t// Hide this block from the inserter.\n\tinserter: false\n}\n```\n\n----------------------------------------\n\nTITLE: NavigableRegion Component Props Definition\nDESCRIPTION: Type definitions for the props accepted by the NavigableRegion component. Includes children (required React element), className (optional string), ariaLabel (required string for accessibility), and as (optional component type defaulting to div).\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/interface/src/components/navigable-region/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface NavigableRegionProps {\n  children: React.ReactElement;\n  className?: string;\n  ariaLabel: string;\n  as?: React.ComponentType;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Components Conditionally in React - JSX\nDESCRIPTION: This JSX snippet demonstrates the usage of the `PostTypeSupportCheck` component, which conditionally renders its children if the current post type supports any of the keys specified in `supportKeys`. It requires at least the `supportKeys` prop, which can be a string or an array of strings. When the post type's support status is unknown, the component will assume support.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/editor/src/components/post-type-support-check/README.md#2025-04-21_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n<PostTypeSupportCheck supportKeys=\\\"title\\\">Supported</PostTypeSupportCheck>\n```\n\n----------------------------------------\n\nTITLE: Implementing PluginMoreMenuItem in Gutenberg Editor (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to create a custom More Menu Item using the PluginMoreMenuItem component from @wordpress/editor. It registers a new plugin that renders a button in the More Tools & Options section, which displays an alert when clicked.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/slotfills/plugin-more-menu-item.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { registerPlugin } from '@wordpress/plugins';\nimport { PluginMoreMenuItem } from '@wordpress/editor';\nimport { image } from '@wordpress/icons';\n\nconst MyButtonMoreMenuItemTest = () => (\n\t<PluginMoreMenuItem\n\t\ticon={ image }\n\t\tonClick={ () => {\n\t\t\talert( 'Button Clicked' );\n\t\t} }\n\t>\n\t\tMore Menu Item\n\t</PluginMoreMenuItem>\n);\n\nregisterPlugin( 'more-menu-item-test', { render: MyButtonMoreMenuItemTest } );\n```\n\n----------------------------------------\n\nTITLE: Disabling Locking Mechanism in Gutenberg Blocks (JavaScript)\nDESCRIPTION: This snippet disables the user's ability to toggle the lock state for the block by updating the `supports.lock` property to false.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-supports.md#2025-04-21_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nsupports: {\n\t// Remove support for locking UI.\n\tlock: false\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Tips State Selectors in JavaScript\nDESCRIPTION: A collection of selector functions to check the state of tips and guides. Includes functions to check if tips are enabled globally, get associated guide information for a tip, and determine tip visibility based on various conditions.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core-nux.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nareTipsEnabled\n\nParameters:\n- state (Object): Global application state.\n\nReturns:\n- boolean: Whether tips are globally enabled.\n\ngetAssociatedGuide\n\nParameters:\n- state (Object): Global application state.\n- tipId (string): The tip to query.\n\nReturns:\n- ?NUXGuideInfo: Information about the associated guide.\n\nisTipVisible\n\nParameters:\n- state (Object): Global application state.\n- tipId (string): The tip to query.\n\nReturns:\n- boolean: Whether or not the given tip is showing.\n```\n\n----------------------------------------\n\nTITLE: Rendering Uncontrolled CustomSelectControlV2 in React\nDESCRIPTION: Demonstrates how to use CustomSelectControlV2 in uncontrolled mode, where the component manages its own state. It shows how to set up the component with multiple items and custom styling.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/custom-select-control-v2/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst UncontrolledCustomSelectControlV2 = () => (\n\t<CustomSelectControlV2 label=\"Colors\">\n\t\t<CustomSelectControlV2.Item value=\"Blue\">\n\t\t\t{ /* The `defaultValue` since it wasn't defined */ }\n\t\t\t<span style={ { color: 'blue' } }>Blue</span>\n\t\t</CustomSelectControlV2.Item>\n\t\t<CustomSelectControlV2.Item value=\"Purple\">\n\t\t\t<span style={ { color: 'purple' } }>Purple</span>\n\t\t</CustomSelectControlV2.Item>\n\t\t<CustomSelectControlV2.Item value=\"Pink\">\n\t\t\t<span style={ { color: 'deeppink' } }>Pink</span>\n\t\t</CustomSelectControlV2.Item>\n\t</CustomSelectControlV2>\n);\n```\n\n----------------------------------------\n\nTITLE: Correct setTimeout Usage in React Components\nDESCRIPTION: Examples showing proper setTimeout usage patterns in React components, including storing timeout IDs in variables, using props-provided setTimeout, and usage outside of components.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/eslint-plugin/docs/rules/react-no-unsafe-timeout.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction getNotComponent() {\n\tsetTimeout( fn );\n}\n\nfunction MyComponent( props ) {\n\tconst { setTimeout } = props;\n\tsetTimeout( fn );\n}\n\nfunction MyComponent( props ) {\n\tprops.setTimeout( fn );\n}\n\nclass MyNotComponent {\n\tdoAction() {\n\t\tsetTimeout( fn );\n\t}\n}\n\nclass MyComponent extends React.Component {\n\tcomponentDidMount() {\n\t\tconst { setTimeout } = this.props;\n\t\tsetTimeout( fn );\n\t}\n}\n\nclass MyComponent extends Component {\n\tcomponentDidMount() {\n\t\tconst { setTimeout } = this.props;\n\t\tsetTimeout( fn );\n\t}\n}\n\nclass MyComponent extends Component {\n\tcomponentDidMount() {\n\t\tthis.props.setTimeout( fn );\n\t}\n}\n\nclass MyComponent extends Component {\n\tcomponentDidMount() {\n\t\tthis.timeoutId = setTimeout( fn );\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Using Flex Layout within CardFooter in JSX\nDESCRIPTION: This example shows how to utilize the Flex layout component within CardFooter. It imports additional components like Button, FlexItem, and FlexBlock to create a more complex footer structure with aligned content and an action button.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/card/card-footer/README.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n\tButton,\n\tCard,\n\tCardFooter,\n\tFlexItem,\n\tFlexBlock,\n} from '@wordpress/components';\n\nconst Example = () => (\n\t<Card>\n\t\t<CardBody>...</CardBody>\n\t\t<CardFooter>\n\t\t\t<FlexBlock>Content</FlexBlock>\n\t\t\t<FlexItem>\n\t\t\t\t<Button>Action</Button>\n\t\t\t</FlexItem>\n\t\t</CardFooter>\n\t</Card>\n);\n```\n\n----------------------------------------\n\nTITLE: CSS Style Definition for WordPress Block\nDESCRIPTION: Basic CSS styling for a WordPress block with background color.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/scripts/README.md#2025-04-21_snippet_25\n\nLANGUAGE: css\nCODE:\n```\n/* style.css */\n.wp-block-my-block {\n\tbackground-color: black;\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Border Radius for Button Block in Gutenberg\nDESCRIPTION: This JSON snippet shows how to disable the border radius option for the button block in Gutenberg. By setting `radius` to `false` within the `border` property of the `core/button` block's settings, you can prevent users from adjusting the border radius of buttons within the editor.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/themes/global-settings-and-styles.md#2025-04-21_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"version\": 3,\n\t\"settings\": {\n\t\t\"blocks\": {\n\t\t\t\"core/button\": {\n\t\t\t\t\"border\": {\n\t\t\t\t\t\"radius\": false\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Using ZStack for Layered Stacking - React\nDESCRIPTION: This code snippet demonstrates how to import and use the ZStack component from the WordPress components library to stack image components along the Z-axis in a React functional component. The example shows how to specify offsets and layering behavior.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/z-stack/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { __experimentalZStack as ZStack } from '@wordpress/components';\n\nfunction Example() {\n\treturn (\n\t\t<ZStack offset={ 20 } isLayered>\n\t\t\t<ExampleImage />\n\t\t\t<ExampleImage />\n\t\t\t<ExampleImage />\n\t\t</ZStack>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Category Shortcuts in React (JavaScript)\nDESCRIPTION: This example demonstrates how to use the getCategoryShortcuts selector to retrieve and display a list of shortcut names for a given category.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core-keyboard-shortcuts.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { store as keyboardShortcutsStore } from '@wordpress/keyboard-shortcuts';\nimport { useSelect } from '@wordpress/data';\n\nconst ExampleComponent = () => {\n\tconst categoryShortcuts = useSelect(\n\t\t( select ) =>\n\t\t\tselect( keyboardShortcutsStore ).getCategoryShortcuts( 'block' ),\n\t\t[]\n\t);\n\n\treturn (\n\t\tcategoryShortcuts.length > 0 && (\n\t\t\t<ul>\n\t\t\t\t{ categoryShortcuts.map( ( categoryShortcut ) => (\n\t\t\t\t\t<li key={ categoryShortcut }>{ categoryShortcut }</li>\n\t\t\t\t) ) }\n\t\t\t</ul>\n\t\t)\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Navigation Action in View.js\nDESCRIPTION: Example showing how to implement client-side navigation in a block's view.js file using dynamic import of the interactivity-router package.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/interactivity-router/README.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/* view.js */\n\nimport { store, withSyncEvent } from '@wordpress/interactivity';\n\n// This is how you would typically use the navigate() action in your block.\nstore( 'my-namespace/myblock', {\n\tactions: {\n\t\t// The withSyncEvent() utility needs to be used because preventDefault() requires synchronous event access.\n\t\tgoToPage: withSyncEvent( function* ( e ) {\n\t\t\te.preventDefault();\n\n\t\t\t// We import the package dynamically to reduce the initial JS bundle size.\n\t\t\t// Async actions are defined as generators so the import() must be called with `yield`\n\t\t\tconst { actions } = yield import(\n\t\t\t\t'@wordpress/interactivity-router'\n\t\t\t);\n\t\t\tyield actions.navigate( e.target.href );\n\t\t} ),\n\t},\n} );\n```\n\n----------------------------------------\n\nTITLE: Defining Time to Read - Gutenberg (Markdown)\nDESCRIPTION: This snippet defines a block that shows the estimated time in minutes required to finish reading the post. It includes attributes for text alignment.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/core-blocks.md#2025-04-21_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n- **Name:** core/post-time-to-read\n- **Experimental:** true\n- **Category:** theme\n- **Supports:** color (background, gradients, text), interactivity (clientNavigation), spacing (margin, padding), typography (fontSize, lineHeight), ~~html~~\n- **Attributes:** textAlign\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Variables through a Transformer Function in JavaScript\nDESCRIPTION: This snippet illustrates a transformer function that adds a new custom variable to the view. This custom variable can then be used in associated mustache templates to render specific content, thus providing a flexible approach to extend the template capabilities.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/create-block/docs/external-template.md#2025-04-21_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\ntransformer: ( view ) => {\n      return {\n         ...view,\n         customVariable: `Custom Value`,\n      };\n},\n```\n\n----------------------------------------\n\nTITLE: Registering Block Variations with Specificity in JavaScript\nDESCRIPTION: This example demonstrates how to register block variations with different levels of specificity using the isActive property, showcasing the improved handling introduced in WordPress 6.6.0.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-variations.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nwp.blocks.registerBlockVariation( 'core/paragraph', {\n\tname: 'paragraph-red',\n\ttitle: 'Red Paragraph',\n\tattributes: {\n\t\ttextColor: 'vivid-red',\n\t},\n\tisActive: [ 'textColor' ],\n} );\n\nwp.blocks.registerBlockVariation( 'core/paragraph', {\n\tname: 'paragraph-red-grey',\n\ttitle: 'Red/Grey Paragraph',\n\tattributes: {\n\t\ttextColor: 'vivid-red',\n\t\tbackgroundColor: 'cyan-bluish-gray',\n\t},\n\tisActive: [ 'textColor', 'backgroundColor' ],\n} );\n```\n\n----------------------------------------\n\nTITLE: Breaking Changes - End of Internal Babel Transpilation\nDESCRIPTION: This part of the changelog indicates the removal of Babel transpilation within the Gutenberg package and sets Node 8 as the minimum version required. This change affects how developers handle their builds and compatibility.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/postcss-themes/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\n-   Stop using Babel transpilation internally and set node 8 as a minimal version required ([#13540](https://github.com/WordPress/gutenberg/pull/13540)).\n```\n\n----------------------------------------\n\nTITLE: Defining a Template for InnerBlocks in Gutenberg\nDESCRIPTION: This example demonstrates how to create a template for InnerBlocks, defining a set of blocks to be pre-filled when the component has no existing content. It also shows how to use the templateLock property.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/block-tutorial/nested-blocks-inner-blocks.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst MY_TEMPLATE = [\n\t[ 'core/image', {} ],\n\t[ 'core/heading', { placeholder: 'Book Title' } ],\n\t[ 'core/paragraph', { placeholder: 'Summary' } ],\n];\n\n//...\n\n\tedit: () => {\n\t\treturn (\n\t\t\t<InnerBlocks\n\t\t\t\ttemplate={ MY_TEMPLATE }\n\t\t\t\ttemplateLock=\"all\"\n\t\t\t/>\n\t\t);\n\t},\n```\n\n----------------------------------------\n\nTITLE: ToolbarItem Usage with `as` Prop\nDESCRIPTION: This snippet demonstrates how to use the `as` prop of the `ToolbarItem` component to render a custom component or HTML element as a toolbar button. It imports `Toolbar`, `ToolbarItem`, and `Button` from `@wordpress/components`.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/toolbar/toolbar-item/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Toolbar, ToolbarItem, Button } from '@wordpress/components';\n\nfunction MyToolbar() {\n\treturn (\n\t\t<Toolbar label=\"Options\">\n\t\t\t<ToolbarItem as={ Button }>I am a toolbar button</ToolbarItem>\n\t\t\t<ToolbarItem as=\"button\">I am another toolbar button</ToolbarItem>\n\t\t</Toolbar>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Receiving Revisions - JavaScript\nDESCRIPTION: Triggered to handle the reception of revision items related to entity records, enabling tracking and management of changes over time.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core.md#2025-04-21_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nreceiveRevisions(kind, name, recordKey, records, query, invalidateCache, meta) {\n  // Action triggered to receive revision items.\n  // Parameters:\n  // - kind: Kind of the received entity record revisions.\n  // - name: Name of the received entity record revisions.\n  // - recordKey: The key of the entity record whose revisions you want to fetch.\n  // - records: Revisions received.\n  // - query: Query Object.\n  // - invalidateCache: Should invalidate query caches.\n  // - meta: Meta information about pagination.\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Admin Page in WordPress\nDESCRIPTION: This PHP code registers a custom admin page in WordPress using the add_menu_page() function. It sets up the page name, menu label, required capability, and the function to render the page content.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/platform/custom-block-editor.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nadd_menu_page(\n    'Standalone Block Editor',         // Visible page name\n    'Block Editor',                    // Menu label\n    'edit_posts',                      // Required capability\n    'getdavesbe',                      // Hook/slug of page\n    'getdave_sbe_render_block_editor', // Function to render the page\n    'dashicons-welcome-widgets-menus'  // Custom icon\n);\n```\n\n----------------------------------------\n\nTITLE: Using Translatable Strings in JavaScript\nDESCRIPTION: This snippet demonstrates the use of the internationalization function __() with a translatable string that includes only a placeholder, which is incorrect as it prevents translation. There are no dependencies, but it is intended to guide correct internationalization practices.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/eslint-plugin/docs/rules/i18n-no-placeholders-only.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n__( '%s' );\n```\n\n----------------------------------------\n\nTITLE: Defining FormTokenField Value Object in JavaScript\nDESCRIPTION: Demonstrates the structure of an object that can be passed as a value to the FormTokenField component. It includes properties for the token's value, status, title, and event handlers.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/form-token-field/README.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n\tvalue: '(string) The value of the token.',\n\tstatus: \"(string) One of 'error', 'validating', or 'success'. Applies styles to token.\"\n\ttitle: '(string) If not falsey, will add a title to the token.',\n\tonMouserEnter: '(function) Function to call when onMouseEnter event triggered on token.'\n\tonMouseLeave: '(function) Function to call when onMouseLeave is triggered on token.'\n}\n```\n\n----------------------------------------\n\nTITLE: HTML: Rendering Translated Fruit Names\nDESCRIPTION: This HTML snippet uses `data-wp-each` to iterate through the `fruits` array (containing fruit keywords) and `data-wp-text` to display the translated fruit name using the `state.translatedFruit` derived state.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/core-concepts/server-side-rendering.md#2025-04-21_snippet_28\n\nLANGUAGE: html\nCODE:\n```\n<template data-wp-each=\"state.fruits\">\n\t<li data-wp-text=\"state.translatedFruit\"></li>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using createSlotFill Helper Method for Simplified Slot/Fill Creation\nDESCRIPTION: Shows how to use the createSlotFill helper function to create paired Slot and Fill components with the same name. This simplifies the creation of matching Slot and Fill components.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/slot-fill/README.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst { Fill, Slot } = createSlotFill( 'Toolbar' );\n\nconst ToolbarItem = () => <Fill>My item</Fill>;\n\nconst Toolbar = () => (\n\t<div className=\"toolbar\">\n\t\t<Slot />\n\t</div>\n);\n```\n\n----------------------------------------\n\nTITLE: Using innerBlocks in Save Function\nDESCRIPTION: Shows an advanced use case of the innerBlocks property in the save function to adjust block rendering based on nested blocks.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-edit-save.md#2025-04-21_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nsave: ( { attributes, innerBlocks } ) => {\n\tconst { className, ...rest } = useBlockProps.save();\n\n\t// innerBlocks could also be an object - react element during initialization\n\tconst numberOfInnerBlocks = innerBlocks?.length;\n\tif ( numberOfInnerBlocks > 1 ) {\n\t\tclassName = className + ( className ? ' ' : '' ) + 'more-than-one';\n\t};\n\tconst blockProps =  { ...rest, className };\n\n\treturn <div { ...blockProps }>{ attributes.content }</div>;\n};\n```\n\n----------------------------------------\n\nTITLE: Importing SVG images for elevation visualization\nDESCRIPTION: This snippet imports two SVG images, `elevation.svg` and `elevation-examples.svg`, from the `./static/` directory. These images are used to visually represent the concept of elevation and provide examples of its application in the WordPress Gutenberg design system.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/storybook/stories/foundations/design-language/elevation.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport elevation from './static/elevation.svg';\nimport elevationExamples from './static/elevation-examples.svg';\n```\n\n----------------------------------------\n\nTITLE: Correct sprintf Usage Examples in JavaScript\nDESCRIPTION: Examples showing proper usage of sprintf function with i18n functions that will pass ESLint validation. Demonstrates correct format string and placeholder value combinations.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/eslint-plugin/docs/rules/valid-sprintf.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsprintf( '%s', 'substitute' );\nsprintf( __( '%s' ), 'substitute' );\nsprintf( _x( '%s' ), 'substitute' );\nsprintf( _n( '%s', '%s' ), 'substitute' );\nsprintf( _nx( '%s', '%s' ), 'substitute' );\n```\n\n----------------------------------------\n\nTITLE: Installing wp-scripts in a WordPress Project\nDESCRIPTION: Command to install @wordpress/scripts as a development dependency in a WordPress project using npm.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/getting-started/devenv/get-started-with-wp-scripts.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @wordpress/scripts --save-dev\n```\n\n----------------------------------------\n\nTITLE: Converting ClipboardButton to TypeScript\nDESCRIPTION: This snippet documents the conversion of the `ClipboardButton` component to TypeScript within the Gutenberg project. This conversion aims to improve code maintainability, readability, and type safety by leveraging TypeScript's static typing capabilities.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/CHANGELOG.md#2025-04-21_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"ClipboardButton`: Convert to TypeScript ([#51334](https://github.com/WordPress/gutenberg/pull/51334)).\"\n```\n\n----------------------------------------\n\nTITLE: Using Grid Component in React for WordPress Gutenberg\nDESCRIPTION: This snippet demonstrates how to import and use the experimental Grid component from @wordpress/components. It creates a 3-column grid with text content.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/grid/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n\t__experimentalGrid as Grid,\n\t__experimentalText as Text,\n} from '@wordpress/components';\n\nfunction Example() {\n\treturn (\n\t\t<Grid columns={ 3 }>\n\t\t\t<Text>Code</Text>\n\t\t\t<Text>is</Text>\n\t\t\t<Text>Poetry</Text>\n\t\t</Grid>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced PHP Settings in .htaccess for WordPress\nDESCRIPTION: This snippet illustrates how to set advanced PHP settings using an .htaccess file in a WordPress environment. It shows examples of setting post_max_size, upload_max_filesize, and memory_limit.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/env/README.md#2025-04-21_snippet_29\n\nLANGUAGE: apache\nCODE:\n```\n# Note: the default upload value is 1G.\nphp_value post_max_size 2G\nphp_value upload_max_filesize 2G\nphp_value memory_limit 2G\n```\n\n----------------------------------------\n\nTITLE: Defining No Results Display - Gutenberg (Markdown)\nDESCRIPTION: This snippet defines the elements used when no results are found in a query. It supports attributes for visual representation.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/core-blocks.md#2025-04-21_snippet_15\n\nLANGUAGE: markdown\nCODE:\n```\n- **Name:** core/query-no-results\n- **Category:** theme\n- **Ancestor:** core/query\n- **Supports:** align, color (background, gradients, link, text), interactivity (clientNavigation), typography (fontSize, lineHeight), ~~html~~, ~~reusable~~\n```\n\n----------------------------------------\n\nTITLE: Accessing Derived State in JavaScript\nDESCRIPTION: This snippet demonstrates how to access both global and derived state uniformly through the state property of the store in JavaScript.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/core-concepts/undestanding-global-state-local-context-and-derived-state.md#2025-04-21_snippet_24\n\nLANGUAGE: js\nCODE:\n```\nconst { state } = store( 'myCounterPlugin', {\n\t// ...\n\tactions: {\n\t\treadValues() {\n\t\t\tstate.counter; // Regular state, returns 1.\n\t\t\tstate.double; // Derived state, returns 2.\n\t\t},\n\t},\n} );\n```\n\n----------------------------------------\n\nTITLE: Rendering CardFooter within Card Component in JSX\nDESCRIPTION: This snippet demonstrates how to use the CardFooter component within a Card component. It imports necessary components from @wordpress/components and shows a basic structure of a Card with a CardBody and CardFooter.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/card/card-footer/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Card, CardFooter } from '@wordpress/components';\n\nconst Example = () => (\n\t<Card>\n \t\t<CardBody>...</CardBody>\n \t\t<CardFooter>...</CardFooter>\n\t</Card>\n);\n```\n\n----------------------------------------\n\nTITLE: Activating Theme - JavaScript\nDESCRIPTION: Activates an installed theme based on its slug. This operation is crucial for testing theme-specific features or changes.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/e2e-test-utils/README.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nasync function activateTheme(slug) {\n    // logic to activate theme\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing CardBody Component in React for WordPress Gutenberg\nDESCRIPTION: This code snippet demonstrates how to use the CardBody component within a Card component in a React application for WordPress Gutenberg. It shows the basic structure and import statements required.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/card/card-body/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Card, CardBody } from '@wordpress/components';\n\nconst Example = () => (\n\t<Card>\n\t\t<CardBody>...</CardBody>\n\t</Card>\n);\n```\n\n----------------------------------------\n\nTITLE: Post Template Block Configuration\nDESCRIPTION: Defines the template for rendering individual posts within the query, including title, featured image, excerpt, separator, and date\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/test/e2e/specs/editor/various/__snapshots__/Inserting-blocks-firefox-webkit-inserts-p-59603-ragging-and-dropping-from-the-global-inserter-1-chromium.txt#2025-04-21_snippet_1\n\nLANGUAGE: wordpress-gutenberg\nCODE:\n```\n<!-- wp:post-template -->\n<!-- wp:post-title {\"isLink\":true} /-->\n\n<!-- wp:post-featured-image {\"isLink\":true,\"align\":\"wide\"} /-->\n\n<!-- wp:post-excerpt /-->\n\n<!-- wp:separator {\"opacity\":\"css\"} -->\n```\n\n----------------------------------------\n\nTITLE: JustifyToolbar Component Abstraction\nDESCRIPTION: The `JustifyToolbar` component was abstracted from the Navigation block. This component can now be used elsewhere. This provides developers with a reusable component for handling text justification within Gutenberg blocks.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/CHANGELOG.md#2025-04-21_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: Adding Entities Action - JavaScript\nDESCRIPTION: This function creates and returns an action object used for adding new entities into the state based on received entities. It typically includes an array of entities as input and returns the action object to be dispatched.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core.md#2025-04-21_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\n// addEntities\n\nfunction addEntities( entities ) {\n    // Implementation here\n}\n```\n\n----------------------------------------\n\nTITLE: UnitControl with Custom Units Configuration\nDESCRIPTION: Extended example showing UnitControl implementation with custom units array including default values for unit changes.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/src/components/unit-control/README.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { __experimentalUnitControl as UnitControl } from '@wordpress/block-editor/';\n\nconst Example = () => {\n\tconst [ value, setValue ] = useState( '10px' );\n\tconst units = [\n\t\t{ value: 'px', label: 'px', default: 0 },\n\t\t{ value: '%', label: '%', default: 10 },\n\t\t{ value: 'em', label: 'em', default: 0 },\n\t];\n\n\treturn <UnitControl onChange={ setValue } value={ value } />;\n};\n```\n\n----------------------------------------\n\nTITLE: CSS Classes for WordPress Navigation Block Components\nDESCRIPTION: Core CSS class definitions used to style different components of the Navigation block including submenus, menu items, content containers, labels, descriptions, and submenu indicators.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-library/src/navigation/README.md#2025-04-21_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.wp-block-navigation__submenu-container\n.wp-block-navigation-item\n.wp-block-navigation-item__content\n.wp-block-navigation-item__label\n.wp-block-navigation-item__description\n.wp-block-navigation__submenu-icon\n```\n\n----------------------------------------\n\nTITLE: Implementing i18n.gettext_with_context Filter Callback in JavaScript\nDESCRIPTION: Defines a callback function for the i18n.gettext_with_context filter. This function receives the translation, original text, context, and domain as arguments and returns the modified translation.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/filters/i18n-filters.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nfunction i18nGettextWithContextCallback( translation, text, context, domain ) {\n\treturn translation;\n}\n```\n\n----------------------------------------\n\nTITLE: Viewport Rendering Rules for Edit Canvas Mode\nDESCRIPTION: Describes the rendering behavior of different areas in non-mobile and mobile viewports when canvas mode is set to edit\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/edit-site/src/components/site-editor-routes/README.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Area | Non-mobile viewport | Mobile viewport |\n| --- | --- | --- |\n| `preview` | Rendered as full-screen, if provided. Otherwise, it'll display an empty blank sidebar. | Not rendered. |\n| `mobile` | Not rendered | Rendered as full-screen, if provided. Otherwise, it'll display an empty blank sidebar. |\n```\n\n----------------------------------------\n\nTITLE: Unregistering a Block Bindings Source in WordPress Gutenberg\nDESCRIPTION: This snippet demonstrates how to unregister a block bindings source using the unregisterBlockBindingsSource function. It requires the @wordpress/blocks package and takes the source name as an argument.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-bindings.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { unregisterBlockBindingsSource } from '@wordpress/blocks';\n\nunregisterBlockBindingsSource( 'plugin/my-custom-source' );\n```\n\n----------------------------------------\n\nTITLE: Defining Parent Block Relationship in Gutenberg\nDESCRIPTION: This JSON snippet demonstrates how to define a parent block relationship for a custom block. It uses the 'parent' property to specify which block can be the parent of this block.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/block-tutorial/nested-blocks-inner-blocks.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"title\": \"Column\",\n\t\"name\": \"core/column\",\n\t\"parent\": [ \"core/columns\" ],\n\t// ...\n}\n```\n\n----------------------------------------\n\nTITLE: Breaking Change: Node.js Version Requirement Update\nDESCRIPTION: Documentation of breaking change that increases the minimum required Node.js version to v18.12.0 to match long-term support releases.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/keyboard-shortcuts/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n-   Increase the minimum required Node.js version to v18.12.0 matching long-term support releases ([#31270](https://github.com/WordPress/gutenberg/pull/61930)). Learn more about [Node.js releases](https://nodejs.org/en/about/previous-releases).\n```\n\n----------------------------------------\n\nTITLE: Markdown Navigation Links for Widgets Documentation\nDESCRIPTION: Markdown-formatted navigation links to key documentation sections for the Gutenberg Widgets system, including overview, opt-out instructions, and legacy compatibility guides.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/widgets/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n**Contents**\n\n- [Widgets Block Editor overview](/docs/how-to-guides/widgets/overview.md)\n- [Restoring the old Widgets Editor](/docs/how-to-guides/widgets/opting-out.md)\n- [Ensuring compatibility with the Legacy Widget block](/docs/how-to-guides/widgets/legacy-widget-block.md)\n```\n\n----------------------------------------\n\nTITLE: Verifying Pre-Publish Checks Status - JavaScript\nDESCRIPTION: Checks if the pre-publish checks are enabled in the WordPress setup. Ensuring that the testing environment has these checks set up is crucial for proper content validation.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/e2e-test-utils/README.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nasync function arePrePublishChecksEnabled() {\n    // logic to check pre-publish checks\n}\n```\n\n----------------------------------------\n\nTITLE: Improving Button Saving State Accessibility - JavaScript\nDESCRIPTION: This bug fix enhances the accessibility of the Button component during saving states, making it easier for users with assistive technologies to interact with the interface.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/CHANGELOG.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nImprove Button saving state accessibility. ([#55547](https://github.com/WordPress/gutenberg/pull/55547)).\n```\n\n----------------------------------------\n\nTITLE: Correct Import Grouping in JavaScript\nDESCRIPTION: Demonstrates the proper way to group and document import statements with appropriate dependency group docblocks, following Gutenberg's coding guidelines\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/eslint-plugin/docs/rules/dependency-group.md#2025-04-21_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n/*\n * External dependencies\n */\nimport { camelCase } from 'change-case';\n\n/*\n * WordPress dependencies\n */\nimport { Component } from 'react';\n\n/*\n * Internal dependencies\n */\nimport edit from './edit';\n```\n\n----------------------------------------\n\nTITLE: Rendering a BlockIcon Component in JSX\nDESCRIPTION: Demonstrates how to import and use the BlockIcon component to render a block icon with default styling. The component requires an icon prop that defines the icon to be displayed.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/src/components/block-icon/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { BlockIcon } from '@wordpress/block-editor';\n\nconst MyBlockIcon = () => <BlockIcon icon={ icon } />;\n```\n\n----------------------------------------\n\nTITLE: Flashing Block in Gutenberg Editor (JavaScript)\nDESCRIPTION: Action creator that returns an action object to visually 'flash' a block by rhythmically highlighting it. It takes the target block's client ID as a parameter.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/data/data-core-block-editor.md#2025-04-21_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nflashBlock( clientId )\n```\n\n----------------------------------------\n\nTITLE: Border Value Object Structure\nDESCRIPTION: This snippet shows the structure of the border value object that can be used with the BorderControl component. It includes properties for color, style, and width.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/border-control/border-control/README.md#2025-04-21_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n{\n\tcolor: '#72aee6',\n\tstyle: 'solid',\n\twidth: '2px,\n}\n```\n\n----------------------------------------\n\nTITLE: Bulk Post Deletion Function in WordPress\nDESCRIPTION: Function that navigates to post listing screen and bulk deletes posts of specified type and status. Takes postType and postStatus as parameters and returns a Promise that resolves when posts are trashed.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/e2e-test-utils/README.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ntrashAllPosts( postType, postStatus )\n```\n\n----------------------------------------\n\nTITLE: WordPress Image Block HTML Structure\nDESCRIPTION: Shows the HTML markup structure for a standard image block with caption in WordPress Gutenberg.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/themes/theme-support.md#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<figure class=\"wp-block-image\">\n\t<img src=\"...\" alt=\"\" width=\"200px\" />\n\t<figcaption>Short image caption.</figcaption>\n</figure>\n```\n\n----------------------------------------\n\nTITLE: Running iOS Integration Tests\nDESCRIPTION: Commands for executing integration tests on iOS platform. Can run either the full test suite or individual test files.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/react-native/osx-setup-guide.md#2025-04-21_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\nnpm run native test:e2e:ios:local\n```\n\nLANGUAGE: sh\nCODE:\n```\nnpm run native test:e2e:ios:local gutenberg-editor-paragraph.test.js\n```\n\n----------------------------------------\n\nTITLE: Lazy Import with Top-level Await\nDESCRIPTION: Example showing how to use lazy-import with top-level await syntax in Node.js v14.3.0 or newer.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/lazy-import/README.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst lazyImport = require( '@wordpress/lazy-import' );\n\nconst isEqualShallow = await lazyImport( 'is-equal-shallow@^0.1.3' );\nconsole.log( isEqualShallow( { a: true, b: true }, { a: true, b: true } ) );\n// true\n```\n\n----------------------------------------\n\nTITLE: Basic HTML Self-closing Elements in WordPress Gutenberg\nDESCRIPTION: Example of HTML self-closing tags for image and line break elements. The code demonstrates the syntax for an empty image element and a line break element.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/test/e2e/specs/editor/blocks/__snapshots__/Code-should-paste-plain-text-1-chromium.txt#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<img />\n\t<br>\n```\n\n----------------------------------------\n\nTITLE: Installing WordPress Scripts Package\nDESCRIPTION: Command to install the @wordpress/scripts package as a dev dependency. This package provides a collection of reusable scripts for JavaScript development in WordPress projects.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/platform/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @wordpress/scripts\n```\n\n----------------------------------------\n\nTITLE: Updating Editor Store via Console (JavaScript)\nDESCRIPTION: This snippet demonstrates how to update the editor store directly from the browser console, useful for testing and debugging.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/plugin-sidebar-0.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nwp.data\n\t.dispatch( 'core/editor' )\n\t.editPost( { meta: { sidebar_plugin_meta_block_field: 'hello world!' } } );\n```\n\n----------------------------------------\n\nTITLE: WordPress Floated Image HTML Structure\nDESCRIPTION: Shows the HTML markup structure for a left-floated image with caption in WordPress Gutenberg.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/themes/theme-support.md#2025-04-21_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"wp-block-image\">\n\t<figure class=\"alignleft\">\n\t\t<img src=\"...\" alt=\"\" width=\"200px\" />\n\t\t<figcaption>Short image caption.</figcaption>\n\t</figure>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Commenting HTML Instructions for Changelog Maintenance\nDESCRIPTION: This HTML comment provides a link to instructions on how to maintain the changelog file for the WordPress Gutenberg project.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/report-flaky-tests/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- Learn how to maintain this file at https://github.com/WordPress/gutenberg/tree/HEAD/packages#maintaining-changelogs. -->\n```\n\n----------------------------------------\n\nTITLE: Configuring View Script Module in Block JSON\nDESCRIPTION: Configure the block's view script module using viewScriptModule in block.json to load Interactivity API JavaScript.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/interactivity-api/README.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"viewScriptModule\": \"file:./view.js\"\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Children in TreeGridCell with a Function\nDESCRIPTION: This snippet shows how to render children within a TreeGridCell using a function. The function receives props that must be passed to the focusable child component or element within the cell. The child component must correctly handle onFocus, tabIndex, and ref props for roving tabindex functionality.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/components/src/tree-grid/README.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<TreeGridCell>\n\t{ ( props ) => (\n\t\t<Button onClick={ doSomething } { ...props }>\n\t\t\tDo something\n\t\t</Button>\n\t) }\n</TreeGridCell>\n```\n\n----------------------------------------\n\nTITLE: Running Visual Regression Tests\nDESCRIPTION: This command executes the Playwright test suite for Storybook, generating reference images on the first run and comparing against them in subsequent runs. Users may need to install Playwright if prompted.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/test/storybook-playwright/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm run test:e2e:storybook\n```\n\n----------------------------------------\n\nTITLE: Registering Pattern Directory Patterns in theme.json\nDESCRIPTION: Configuration in theme.json to register specific patterns from the WordPress Pattern Directory for use in a theme.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/curating-the-editor-experience/patterns.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"patterns\": [ \"short-text-surrounded-by-round-images\", \"partner-logos\" ]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Upstream Remote\nDESCRIPTION: Commands to add and verify the upstream remote for keeping your fork up to date.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/git-workflow.md#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ngit remote add upstream https://github.com/WordPress/gutenberg.git\ngit remote -v\n```\n\n----------------------------------------\n\nTITLE: Installing the WordPress Viewport Package\nDESCRIPTION: Command for installing the WordPress Viewport package using npm. This package is used for responding to changes in the browser viewport size.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/viewport/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @wordpress/viewport --save\n```\n\n----------------------------------------\n\nTITLE: Defining Enum Attribute in JavaScript\nDESCRIPTION: Example of defining an attribute with an enum, specifying a fixed set of allowed values.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-attributes.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n\tsize: {\n\t\tenum: [ 'large', 'small', 'tiny' ]\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Basic .npmpackagejsonlintrc.json Configuration\nDESCRIPTION: Basic configuration to extend WordPress npm-package-json-lint rules in a dedicated config file.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/npm-package-json-lint-config/README.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"extends\": \"@wordpress/npm-package-json-lint-config\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Core Components\nDESCRIPTION: Imports PanelBody, TextControl, and ToggleControl components from WordPress components package.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/getting-started/tutorial.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { PanelBody, TextControl, ToggleControl } from '@wordpress/components';\n```\n\n----------------------------------------\n\nTITLE: Creating a Persistence Layer Function\nDESCRIPTION: This snippet defines the 'create' function, which is responsible for generating the persistence layer, along with its parameters. It specifies how to preload data and manage local storage and request debounce settings.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/preferences-persistence/README.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/**\\n * Creates a persistence layer that stores data in WordPress user meta via the REST API.\\n *\\n * @param {Object} options - Options for configuring the persistence layer.\\n * @param {Object} [options.preloadedData] - Any persisted preferences data that should be preloaded. When set, the persistence layer will avoid fetching data from the REST API.\\n * @param {string} [options.localStorageRestoreKey] - The key to use for restoring the localStorage backup.\\n * @param {number} [options.requestDebounceMS] - Debounce requests to the API so that they occur at minimum every requestDebounceMS milliseconds. Defaults to 2500ms.\\n * @returns {Object} A persistence layer for WordPress user meta.\\n */\\nconst create = (options) => {\\n    // Implementation here\\n};\n```\n\n----------------------------------------\n\nTITLE: Installing WordPress Fields Package via NPM\nDESCRIPTION: Command to install the @wordpress/fields package as a project dependency using npm package manager.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/fields/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @wordpress/fields --save\n```\n\n----------------------------------------\n\nTITLE: Registering Core Blocks\nDESCRIPTION: Updated method for registering core blocks using wp.coreBlocks instead of deprecated wp.blocks\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/deprecations.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nwp.coreBlocks.registerCoreBlocks\n```\n\n----------------------------------------\n\nTITLE: Disabling Default Block Patterns in WordPress Themes\nDESCRIPTION: This PHP snippet shows how to opt out of the bundled block patterns in WordPress. Themes can use this to provide their own set of patterns instead.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/themes/theme-support.md#2025-04-21_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nremove_theme_support( 'core-block-patterns' );\n```\n\n----------------------------------------\n\nTITLE: Static Block HTML Output Example\nDESCRIPTION: Example of the HTML markup generated by the Preformatted block's save function when saved in the database, including WordPress block delimiters.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/getting-started/fundamentals/static-dynamic-rendering.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- wp:preformatted -->\n<pre class=\"wp-block-preformatted\">This is some preformatted text</pre>\n<!-- /wp:preformatted -->\n```\n\n----------------------------------------\n\nTITLE: Single Character Paragraph Block\nDESCRIPTION: WordPress Gutenberg paragraph block with a single character text content\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/test/e2e/specs/editor/various/__snapshots__/Copy-cut-paste-should-cut-partial-selection-of-text-blocks-2-chromium.txt#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- wp:paragraph -->\n<p>B </p>\n<!-- /wp:paragraph -->\n```\n\n----------------------------------------\n\nTITLE: Text Alignment Attributes Structure\nDESCRIPTION: Example showing the structure of style attributes when text alignment support is enabled.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/reference-guides/block-api/block-supports.md#2025-04-21_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\nattributes: {\n    style: {\n        type: 'object',\n        default: {\n            typography: {\n                textAlign: 'value'\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Gutenberg Bridge Dependency in Android\nDESCRIPTION: Gradle configuration to add the React Native Gutenberg Bridge as a dependency in an Android project.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/react-native-bridge/README.md#2025-04-21_snippet_3\n\nLANGUAGE: gradle\nCODE:\n```\nimplementation project(':@wordpress_react-native-bridge')\n```\n\n----------------------------------------\n\nTITLE: Computing Fluid Typography Values in JavaScript\nDESCRIPTION: Demonstrates how to compute fluid font-size values using clamp() with either min/max font sizes or a single font size that scales logarithmically.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/README.md#2025-04-21_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n// Calculate fluid font-size value from a minimum and maximum value.\nconst fontSize = getComputedFluidTypographyValue( {\n\tminimumFontSize: '20px',\n\tmaximumFontSize: '45px',\n} );\n// Calculate fluid font-size value from a single font size.\nconst fontSize = getComputedFluidTypographyValue( {\n\tfontSize: '30px',\n} );\n```\n\n----------------------------------------\n\nTITLE: Running on Specific iOS Simulator Device\nDESCRIPTION: Command pattern to run the app on a specific iOS simulator device by passing the device name.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/react-native/getting-started-react-native.md#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nnpm run native ios -- -- --simulator=\"DEVICE_NAME\"\n```\n\n----------------------------------------\n\nTITLE: Git Blame with Ignore Revisions\nDESCRIPTION: Commands demonstrating how to use git blame while ignoring formatting revisions.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/git-workflow.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngit blame --ignore-rev f63053cace3c02e284f00918e1854284c85b9132 -L 66,73 packages/api-fetch/src/middlewares/media-upload.js\ngit blame --ignore-revs-file .git-blame-ignore-revs -L 66,73 packages/api-fetch/src/middlewares/media-upload.js\n```\n\n----------------------------------------\n\nTITLE: Downloading Web Platform Tests URL Data in Node.js\nDESCRIPTION: This script downloads the latest URL test data from the Web Platform Tests project for use in @wordpress/url module testing.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/url/src/test/fixtures/README.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nnode packages/url/scripts/download-wpt-data.js\n```\n\n----------------------------------------\n\nTITLE: Cloning Gutenberg Repository\nDESCRIPTION: Command to clone your forked Gutenberg repository to your local machine.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/contributors/code/git-workflow.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/YOUR-USER-NAME/gutenberg\n```\n\n----------------------------------------\n\nTITLE: Applying Block Styles in Gutenberg\nDESCRIPTION: This JSON snippet demonstrates how to apply styles to specific blocks and the document body using `theme.json`. It sets the body text color, overrides the text color for the `core/paragraph` block using the `p` selector, and applies a text color to the `core/group` block using the `.wp-block-group` selector. This showcases the cascading nature of styles and how to target specific blocks.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/themes/global-settings-and-styles.md#2025-04-21_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"version\": 3,\n\t\"styles\": {\n\t\t\"color\": {\n\t\t\t\"text\": \"var(--wp--preset--color--primary)\"\n\t\t},\n\t\t\"blocks\": {\n\t\t\t\"core/paragraph\": {\n\t\t\t\t\"color\": {\n\t\t\t\t\t\"text\": \"var(--wp--preset--color--secondary)\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"core/group\": {\n\t\t\t\t\"color\": {\n\t\t\t\t\t\"text\": \"var(--wp--preset--color--tertiary)\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\nLANGUAGE: css\nCODE:\n```\nbody {\n\tcolor: var( --wp--preset--color--primary );\n}\np { /* The core/paragraph opts out from the default behaviour and uses p as a selector. */\n\tcolor: var( --wp--preset--color--secondary );\n}\n.wp-block-group {\n\tcolor: var( --wp--preset--color--tertiary );\n}\n```\n\n----------------------------------------\n\nTITLE: Generating CSS Custom Properties and Classes from theme.json in WordPress\nDESCRIPTION: This CSS snippet shows the output generated from the theme.json configuration, including custom properties for colors, gradients, font sizes, font families, and spacing, as well as classes for colors and font sizes.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/docs/how-to-guides/themes/global-settings-and-styles.md#2025-04-21_snippet_6\n\nLANGUAGE: css\nCODE:\n```\n/* Top-level custom properties */\nbody {\n\t--wp--preset--color--strong-magenta: #a156b4;\n\t--wp--preset--color--very-dark-grey: #444;\n\t--wp--preset--gradient--blush-bordeaux: linear-gradient( 135deg, rgb( 254, 205, 165 ) 0%, rgb( 254, 45, 45 ) 50%, rgb( 107, 0, 62 ) 100% );\n\t--wp--preset--gradient--blush-light-purple: linear-gradient( 135deg, rgb( 255, 206, 236 ) 0%, rgb( 152, 150, 240 ) 100% );\n\t--wp--preset--font-size--x-large: 46;\n\t--wp--preset--font-size--big: 32;\n\t--wp--preset--font-family--helvetica-arial: Helvetica Neue, Helvetica, Arial, sans-serif;\n\t--wp--preset--font-family--system: -apple-system,BlinkMacSystemFont,\\\"Segoe UI\\\",Roboto,Oxygen-Sans,Ubuntu,Cantarell, \\\"Helvetica Neue\\\",sans-serif;\n\t--wp--preset--spacing--20: 0.44rem;\n\t--wp--preset--spacing--30: 0.67rem;\n\t--wp--preset--spacing--40: 1rem;\n\t--wp--preset--spacing--50: 1.5rem;\n\t--wp--preset--spacing--60: 2.25rem;\n\t--wp--preset--spacing--70: 3.38rem;\n\t--wp--preset--spacing--80: 5.06rem;\n}\n\n/* Block-level custom properties (bounded to the group block) */\n.wp-block-group {\n\t--wp--preset--color--black: #000000;\n\t--wp--preset--color--white: #ffffff;\n}\n\n/* Top-level classes */\n.has-strong-magenta-color { color: #a156b4 !important; }\n.has-strong-magenta-background-color { background-color: #a156b4 !important; }\n.has-strong-magenta-border-color { border-color: #a156b4 !important; }\n.has-very-dark-grey-color { color: #444 !important; }\n.has-very-dark-grey-background-color { background-color: #444 !important; }\n.has-very-dark-grey-border-color { border-color: #444 !important; }\n.has-blush-bordeaux-background { background: linear-gradient( 135deg, rgb( 254, 205, 165 ) 0%, rgb( 254, 45, 45 ) 50%, rgb( 107, 0, 62 ) 100% ) !important; }\n.has-blush-light-purple-background { background: linear-gradient( 135deg, rgb( 255, 206, 236 ) 0%, rgb( 152, 150, 240 ) 100% ) !important; }\n.has-big-font-size { font-size: 32; }\n.has-normal-font-size { font-size: 16; }\n\n/* Block-level classes (bounded to the group block) */\n.wp-block-group.has-black-color { color: #a156b4 !important; }\n.wp-block-group.has-black-background-color { background-color: #a156b4 !important; }\n.wp-block-group.has-black-border-color { border-color: #a156b4 !important; }\n.wp-block-group.has-white-color { color: #444 !important; }\n.wp-block-group.has-white-background-color { background-color: #444 !important; }\n.wp-block-group.has-white-border-color { border-color: #444 !important; }\n\n```\n\n----------------------------------------\n\nTITLE: Handling Create Suggestion in LinkControlSearchInput\nDESCRIPTION: Example demonstrating how to handle the creation of new pages when no matching results are found using onCreateSuggestion prop.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/block-editor/src/components/link-control/README.md#2025-04-21_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<LinkControlSearchInput\n    onCreateSuggestion={( inputValue ) => {\n        createNewPage( inputValue );\n    })\n/>\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry Header Comment\nDESCRIPTION: Documentation header comment providing information about maintaining the changelog file\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/browserslist-config/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- Learn how to maintain this file at https://github.com/WordPress/gutenberg/tree/HEAD/packages#maintaining-changelogs. -->\n```\n\n----------------------------------------\n\nTITLE: Installing WordPress Data Controls Package\nDESCRIPTION: This snippet illustrates how to install the @wordpress/data-controls package using npm. The package is designed for an ES2015+ environment and improvements using the @wordpress/babel-preset-default polyfill may be necessary if the environment lacks support for modern JavaScript features.\nSOURCE: https://github.com/wordpress/gutenberg/blob/trunk/packages/data-controls/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @wordpress/data-controls --save\n```"
  }
]