[
  {
    "owner": "fluent-ffmpeg",
    "repo": "node-fluent-ffmpeg",
    "content": "TITLE: Reading Video Metadata using ffprobe with fluent-ffmpeg (JavaScript)\nDESCRIPTION: This snippet demonstrates how to read metadata from a video file using the `ffprobe` method in fluent-ffmpeg. It takes the file path as input and provides metadata information in the callback function.\nSOURCE: https://github.com/fluent-ffmpeg/node-fluent-ffmpeg/blob/master/README.md#_snippet_54\n\nLANGUAGE: javascript\nCODE:\n```\nffmpeg.ffprobe('/path/to/file.avi', function(err, metadata) {\n    console.dir(metadata);\n});\n```\n\n----------------------------------------\n\nTITLE: Concatenating Multiple Input Files (JavaScript)\nDESCRIPTION: This snippet shows how to concatenate multiple input files into a single output file using the `input` and `mergeToFile` methods. It requires a temporary directory for intermediate processing and includes error and end event handlers to manage the merging process.\nSOURCE: https://github.com/fluent-ffmpeg/node-fluent-ffmpeg/blob/master/README.md#_snippet_50\n\nLANGUAGE: javascript\nCODE:\n```\nffmpeg('/path/to/part1.avi')\n  .input('/path/to/part2.avi')\n  .input('/path/to/part2.avi')\n  .on('error', function(err) {\n    console.log('An error occurred: ' + err.message);\n  })\n  .on('end', function() {\n    console.log('Merging finished !');\n  })\n  .mergeToFile('/path/to/merged.avi', '/path/to/tempDir');\n```\n\n----------------------------------------\n\nTITLE: Add Custom Output Options (JavaScript)\nDESCRIPTION: Passes custom output-related options to ffmpeg using the `outputOptions()` method.  Options can be passed as a single string, as an array of strings, or as separate arguments.\nSOURCE: https://github.com/fluent-ffmpeg/node-fluent-ffmpeg/blob/master/README.md#_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\n/* Single option */\nffmpeg('/path/to/file.avi').outputOptions('-someOption');\n\n/* Single option with parameter */\nffmpeg('/dev/video0').outputOptions('-r 24');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nffmpeg('/path/to/file.avi').outputOptions([\n  '-option1',\n  '-option2 param2',\n  '-option3',\n  '-option4 param4'\n]);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nffmpeg('/path/to/file.avi').outputOptions(\n  '-option1',\n  '-option2', 'param2',\n  '-option3',\n  '-option4', 'param4'\n);\n```\n\n----------------------------------------\n\nTITLE: Generating Thumbnails (Screenshots) (JavaScript)\nDESCRIPTION: This snippet illustrates how to generate thumbnails using the `screenshots` method. It demonstrates setting options such as the number of thumbnails to generate (`count`), specific timestamps (`timestamps`), output filename pattern (`filename`), and output folder (`folder`).  It also includes examples of both fixed interval and timestamp-based screenshot generation.\nSOURCE: https://github.com/fluent-ffmpeg/node-fluent-ffmpeg/blob/master/README.md#_snippet_51\n\nLANGUAGE: javascript\nCODE:\n```\nffmpeg('/path/to/video.avi')\n  .on('filenames', function(filenames) {\n    console.log('Will generate ' + filenames.join(', '))\n  })\n  .on('end', function() {\n    console.log('Screenshots taken');\n  })\n  .screenshots({\n    // Will take screens at 20%, 40%, 60% and 80% of the video\n    count: 4,\n    folder: '/path/to/output'\n  });\n\nffmpeg('/path/to/video.avi')\n  .screenshots({\n    timestamps: [30.5, '50%', '01:10.123'],\n    filename: 'thumbnail-at-%s-seconds.png',\n    folder: '/path/to/output',\n    size: '320x240'\n  });\n```\n\n----------------------------------------\n\nTITLE: Handling 'error' Event with fluent-ffmpeg\nDESCRIPTION: This code demonstrates how to handle the 'error' event in fluent-ffmpeg. This event is emitted when an error occurs during ffmpeg execution or preparation. The handler receives an error object, and optionally stdout and stderr if the error happened during execution. It is crucial to set a handler for this event to prevent the program from terminating.\nSOURCE: https://github.com/fluent-ffmpeg/node-fluent-ffmpeg/blob/master/README.md#_snippet_44\n\nLANGUAGE: javascript\nCODE:\n```\nffmpeg('/path/to/file.avi')\n  .on('error', function(err, stdout, stderr) {\n    console.log('Cannot process video: ' + err.message);\n  });\n```\n\n----------------------------------------\n\nTITLE: Specifying multiple inputs to an FFmpeg command\nDESCRIPTION: This code shows how to specify multiple input files or streams to an FFmpeg command. The `.input()` method (and its aliases) can be chained to add multiple inputs. It also demonstrates the use of streams and image patterns as inputs.\nSOURCE: https://github.com/fluent-ffmpeg/node-fluent-ffmpeg/blob/master/README.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// Note that all fluent-ffmpeg methods are chainable\nffmpeg('/path/to/input1.avi')\n  .input('/path/to/input2.avi')\n  .input(fs.createReadStream('/path/to/input3.avi'));\n\n// Passing an input to the constructor is the same as calling .input()\nffmpeg()\n  .input('/path/to/input1.avi')\n  .input('/path/to/input2.avi');\n\n// Most methods have several aliases, here you may use addInput or mergeAdd instead\nffmpeg()\n  .addInput('/path/to/frame%02d.png')\n  .addInput('/path/to/soundtrack.mp3');\n\nffmpeg()\n  .mergeAdd('/path/to/input1.avi')\n  .mergeAdd('/path/to/input2.avi');\n```\n\n----------------------------------------\n\nTITLE: Running FFmpeg Processing with Multiple Outputs (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use the `run()` method to start processing with multiple outputs. It sets up different output files with specific audio codecs and sizes, and defines error and end event handlers to track the processing status.\nSOURCE: https://github.com/fluent-ffmpeg/node-fluent-ffmpeg/blob/master/README.md#_snippet_49\n\nLANGUAGE: javascript\nCODE:\n```\nffmpeg('/path/to/file.avi')\n  .output('screenshot.png')\n  .noAudio()\n  .seek('3:00')\n\n  .output('small.avi')\n  .audioCodec('copy')\n  .size('320x200')\n\n  .output('big.avi')\n  .audioCodec('copy')\n  .size('640x480')\n\n  .on('error', function(err) {\n    console.log('An error occurred: ' + err.message);\n  })\n  .on('end', function() {\n    console.log('Processing finished !');\n  })\n  .run();\n```\n\n----------------------------------------\n\nTITLE: Piping output to Stream with fluent-ffmpeg\nDESCRIPTION: This code demonstrates how to pipe the output of ffmpeg processing to a writable stream using the `pipe()` method. It sets video and audio codecs, sets the output size, defines event handlers for error and end events, and then pipes the output to a file stream. Options can be passed to the stream's `pipe()` method.\nSOURCE: https://github.com/fluent-ffmpeg/node-fluent-ffmpeg/blob/master/README.md#_snippet_47\n\nLANGUAGE: javascript\nCODE:\n```\nvar outStream = fs.createWriteStream('/path/to/output.mp4');\n\nffmpeg('/path/to/file.avi')\n  .videoCodec('libx264')\n  .audioCodec('libmp3lame')\n  .size('320x240')\n  .on('error', function(err) {\n    console.log('An error occurred: ' + err.message);\n  })\n  .on('end', function() {\n    console.log('Processing finished !');\n  })\n  .pipe(outStream, { end: true });\n```\n\n----------------------------------------\n\nTITLE: Applying Complex Filtergraph with fluent-ffmpeg\nDESCRIPTION: This code demonstrates how to apply a complex filtergraph to a video using fluent-ffmpeg. It defines a series of filters to rescale, split, manipulate color channels, pad, and overlay the video. The filters are specified as an array of strings or objects, and the output is mapped to the 'output' stream.\nSOURCE: https://github.com/fluent-ffmpeg/node-fluent-ffmpeg/blob/master/README.md#_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\nffmpeg('/path/to/file.avi')\n  .complexFilter([\n    // Rescale input stream into stream 'rescaled'\n    'scale=640:480[rescaled]',\n\n    // Duplicate rescaled stream 3 times into streams a, b, and c\n    {\n      filter: 'split', options: '3',\n      inputs: 'rescaled', outputs: ['a', 'b', 'c']\n    },\n\n    // Create stream 'red' by removing green and blue channels from stream 'a'\n    {\n      filter: 'lutrgb', options: { g: 0, b: 0 },\n      inputs: 'a', outputs: 'red'\n    },\n\n    // Create stream 'green' by removing red and blue channels from stream 'b'\n    {\n      filter: 'lutrgb', options: { r: 0, b: 0 },\n      inputs: 'b', outputs: 'green'\n    },\n\n    // Create stream 'blue' by removing red and green channels from stream 'c'\n    {\n      filter: 'lutrgb', options: { r: 0, g: 0 },\n      inputs: 'c', outputs: 'blue'\n    },\n\n    // Pad stream 'red' to 3x width, keeping the video on the left,\n    // and name output 'padded'\n    {\n      filter: 'pad', options: { w: 'iw*3', h: 'ih' },\n      inputs: 'red', outputs: 'padded'\n    },\n\n    // Overlay 'green' onto 'padded', moving it to the center,\n    // and name output 'redgreen'\n    {\n      filter: 'overlay', options: { x: 'w', y: 0 },\n      inputs: ['padded', 'green'], outputs: 'redgreen'\n    },\n\n    // Overlay 'blue' onto 'redgreen', moving it to the right\n    {\n      filter: 'overlay', options: { x: '2*w', y: 0 },\n      inputs: ['redgreen', 'blue'], outputs: 'output'\n    },\n  ], 'output');\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Outputs (JavaScript)\nDESCRIPTION: Adds multiple outputs to the ffmpeg command, either as files or streams. The `output()` method is used to define each output, and methods like `audioCodec`, `videoCodec`, and `size` apply to the last output added. Demonstrates using a writable stream and pipe options. The `run()` method executes the command with multiple outputs.\nSOURCE: https://github.com/fluent-ffmpeg/node-fluent-ffmpeg/blob/master/README.md#_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nvar stream  = fs.createWriteStream('outputfile.divx');\n\nffmpeg('/path/to/file.avi')\n  .output('outputfile.mp4')\n  .output(stream);\n\nffmpeg('/path/to/file.avi')\n  // You may pass a pipe() options object when using a stream\n  .output(stream, { end:true });\n\n// Output-related methods apply to the last output added\nffmpeg('/path/to/file.avi')\n\n  .output('outputfile.mp4')\n  .audioCodec('libfaac')\n  .videoCodec('libx264')\n  .size('320x200')\n\n  .output(stream)\n  .preset('divx')\n  .size('640x480');\n\n// Use the run() method to run commands with multiple outputs\nffmpeg('/path/to/file.avi')\n  .output('outputfile.mp4')\n  .output(stream)\n  .on('end', function() {\n    console.log('Finished processing');\n  })\n  .run();\n```\n\n----------------------------------------\n\nTITLE: Add Custom Video Filters - fluent-ffmpeg JavaScript\nDESCRIPTION: This example demonstrates how to add custom video filters using the `videoFilters()` method.  Filters can be added as strings or as filter specification objects with filter name and options.  Aliases are `videoFilter()`, `withVideoFilter()`, `withVideoFilters()`. Multiple filters can be passed either as individual arguments or within an array.\nSOURCE: https://github.com/fluent-ffmpeg/node-fluent-ffmpeg/blob/master/README.md#_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nffmpeg('/path/to/file.avi')\n  .videoFilters('fade=in:0:30')\n  .videoFilters('pad=640:480:0:40:violet');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nffmpeg('/path/to/file.avi')\n  .videoFilters('fade=in:0:30', 'pad=640:480:0:40:violet');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nffmpeg('/path/to/file.avi')\n  .videoFilters(['fade=in:0:30', 'pad=640:480:0:40:violet']);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nffmpeg('/path/to/file.avi')\n  .videoFilters([\n    {\n      filter: 'fade',\n      options: 'in:0:30'\n    },\n    {\n      filter: 'pad',\n      options: '640:480:0:40:violet'\n    }\n  ]);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nffmpeg('/path/to/file.avi')\n    .videoFilters(\n    {\n      filter: 'fade',\n      options: ['in', 0, 30]\n    },\n    {\n      filter: 'filter2',\n      options: { w: 640, h: 480, x: 0, y: 40, color: 'violet' }\n    }\n  );\n```\n\n----------------------------------------\n\nTITLE: Querying Available Encoders using fluent-ffmpeg (JavaScript)\nDESCRIPTION: This snippet demonstrates how to retrieve available encoders supported by ffmpeg using fluent-ffmpeg. It uses the `getAvailableEncoders` method and logs the result to the console.\nSOURCE: https://github.com/fluent-ffmpeg/node-fluent-ffmpeg/blob/master/README.md#_snippet_59\n\nLANGUAGE: javascript\nCODE:\n```\nFfmpeg.getAvailableEncoders(function(err, encoders) {\n  console.log('Available encoders:');\n  console.dir(encoders);\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Available Codecs using fluent-ffmpeg (JavaScript)\nDESCRIPTION: This snippet demonstrates how to retrieve available codecs supported by ffmpeg using fluent-ffmpeg. It uses the `getAvailableCodecs` method and logs the result to the console.\nSOURCE: https://github.com/fluent-ffmpeg/node-fluent-ffmpeg/blob/master/README.md#_snippet_58\n\nLANGUAGE: javascript\nCODE:\n```\nFfmpeg.getAvailableCodecs(function(err, codecs) {\n  console.log('Available codecs:');\n  console.dir(codecs);\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Available Formats using fluent-ffmpeg (JavaScript)\nDESCRIPTION: This snippet demonstrates how to retrieve available formats supported by ffmpeg using fluent-ffmpeg. It uses the `getAvailableFormats` method and logs the result to the console.\nSOURCE: https://github.com/fluent-ffmpeg/node-fluent-ffmpeg/blob/master/README.md#_snippet_57\n\nLANGUAGE: javascript\nCODE:\n```\nvar Ffmpeg = require('fluent-ffmpeg');\n\nFfmpeg.getAvailableFormats(function(err, formats) {\n  console.log('Available formats:');\n  console.dir(formats);\n});\n```\n\n----------------------------------------\n\nTITLE: Use Fluent-ffmpeg Preset (JavaScript)\nDESCRIPTION: Applies a fluent-ffmpeg preset to the command, either from a preset module or a preset function, using the `preset()` method. Preset modules are loaded from a directory and must export a `load()` function. Preset functions take an FfmpegCommand as a parameter.\nSOURCE: https://github.com/fluent-ffmpeg/node-fluent-ffmpeg/blob/master/README.md#_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\n// Uses <path-to-fluent-ffmpeg>/lib/presets/divx.js\nffmpeg('/path/to/file.avi').preset('divx');\n\n// Uses /my/presets/foo.js\nffmpeg('/path/to/file.avi', { presets: '/my/presets' }).preset('foo');\n```\n\n----------------------------------------\n\nTITLE: Querying Available Codecs on Commands (JavaScript)\nDESCRIPTION: This snippet demonstrates how to query available codecs using the `getAvailableCodecs` method on an `FfmpegCommand` instance. It allows checking capabilities in the context of specific inputs.\nSOURCE: https://github.com/fluent-ffmpeg/node-fluent-ffmpeg/blob/master/README.md#_snippet_61\n\nLANGUAGE: javascript\nCODE:\n```\n// Those methods can also be called on commands\nnew Ffmpeg({ source: '/path/to/file.avi' })\n  .getAvailableCodecs(...);\n```\n\n----------------------------------------\n\nTITLE: Add Custom Audio Filters - fluent-ffmpeg JavaScript\nDESCRIPTION: This example demonstrates how to add custom audio filters using the `audioFilters()` method. Multiple filters can be added either as separate arguments or as an array. Filters can be specified as strings or objects with `filter` and `options` keys. Aliases are `audioFilter()`, `withAudioFilter()`, `withAudioFilters()`.\nSOURCE: https://github.com/fluent-ffmpeg/node-fluent-ffmpeg/blob/master/README.md#_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nffmpeg('/path/to/file.avi')\n  .audioFilters('volume=0.5')\n  .audioFilters('silencedetect=n=-50dB:d=5');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nffmpeg('/path/to/file.avi')\n  .audioFilters('volume=0.5', 'silencedetect=n=-50dB:d=5');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nffmpeg('/path/to/file.avi')\n  .audioFilters(['volume=0.5', 'silencedetect=n=-50dB:d=5']);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nffmpeg('/path/to/file.avi')\n  .audioFilters([\n    {\n      filter: 'volume',\n      options: '0.5'\n    },\n    {\n      filter: 'silencedetect',\n      options: 'n=-50dB:d=5'\n    }\n  ]);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nffmpeg('/path/to/file.avi')\n  .audioFilters(\n    {\n      filter: 'volume',\n      options: ['0.5']\n    },\n    {\n      filter: 'silencedetect',\n      options: { n: '-50dB', d: 5 }\n    }\n  );\n```\n\n----------------------------------------\n\nTITLE: Set Output Frame Size - fluent-ffmpeg JavaScript\nDESCRIPTION: This snippet shows how to set the output frame size using the `size()` method. The size argument can be a fixed size, a fixed width or height with automatic computation of the other dimension, or a percentage. Aliases are `videoSize()` and `withSize()`.\nSOURCE: https://github.com/fluent-ffmpeg/node-fluent-ffmpeg/blob/master/README.md#_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nffmpeg('/path/to/file.avi').size('640x480');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nffmpeg('/path/to/file.avi').size('640x?');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nffmpeg('/path/to/file.avi').size('640x?').aspect('4:3');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nffmpeg('/path/to/file.avi').size('50%');\n```\n\n----------------------------------------\n\nTITLE: Enable Auto-Padding with Fluent-ffmpeg (JavaScript)\nDESCRIPTION: Enables applying auto-padding to the output video to maintain aspect ratio. The color parameter specifies the padding color (defaults to 'black'). This snippet shows different ways to use the `autopad()` method with and without `size()` and `aspect()` calls.\nSOURCE: https://github.com/fluent-ffmpeg/node-fluent-ffmpeg/blob/master/README.md#_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\n// No size specified, autopad() is ignored\nffmpeg('/path/to/file.avi').autopad();\n\n// Adds padding to keep original aspect ratio.\n// - with a 640x400 input, 40 pixels of padding are added on both sides\n// - with a 600x480 input, 20 pixels of padding are added on top and bottom\n// - with a 320x200 input, video is scaled up to 640x400 and 40px of padding\n//   is added on both sides\n// - with a 320x240 input, video is scaled up to 640x480 and and no padding\n//   is needed\nffmpeg('/path/to/file.avi').size('640x480').autopad();\nffmpeg('/path/to/file.avi').size('640x480').autopad('white');\nffmpeg('/path/to/file.avi').size('640x480').autopad('#35A5FF');\n\n// Size computed from input, autopad() is ignored\nffmpeg('/path/to/file.avi').size('50%').autopad();\nffmpeg('/path/to/file.avi').size('640x?').autopad();\nffmpeg('/path/to/file.avi').size('?x480').autopad();\n\n// Calling .size('640x?').aspect('4:3') is similar to calling .size('640x480')\n// - with a 640x400 input, 40 pixels of padding are added on both sides\n// - with a 600x480 input, 20 pixels of padding are added on top and bottom\n// - with a 320x200 input, video is scaled up to 640x400 and 40px of padding\n//   is added on both sides\n// - with a 320x240 input, video is scaled up to 640x480 and and no padding\n//   is needed\nffmpeg('/path/to/file.avi').size('640x?').aspect('4:3').autopad();\nffmpeg('/path/to/file.avi').size('640x?').aspect('4:3').autopad('white');\nffmpeg('/path/to/file.avi').size('640x?').aspect('4:3').autopad('#35A5FF');\n\n// Calling .size('?x480').aspect('4:3') is similar to calling .size('640x480')\nffmpeg('/path/to/file.avi').size('?x480').aspect('4:3').autopad();\nffmpeg('/path/to/file.avi').size('?x480').aspect('4:3').autopad('white');\nffmpeg('/path/to/file.avi').size('?x480').aspect('4:3').autopad('#35A5FF');\n```\n\n----------------------------------------\n\nTITLE: Adding custom input options using inputOptions()\nDESCRIPTION: This code showcases how to pass custom input options to ffmpeg using the `inputOptions()` method.  Options can be passed as a single string, an array of strings, or as individual arguments.\nSOURCE: https://github.com/fluent-ffmpeg/node-fluent-ffmpeg/blob/master/README.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n/* Single option */\nffmpeg('/path/to/file.avi').inputOptions('-someOption');\n\n/* Single option with parameter */\nffmpeg('/dev/video0').inputOptions('-r 24');\n\n/* You may also pass multiple options at once by passing an array to the method: */\nffmpeg('/path/to/file.avi').inputOptions([\n  '-option1',\n  '-option2 param2',\n  '-option3',\n  '-option4 param4'\n]);\n\n/* Finally, you may also directly pass command line tokens as separate arguments to the method: */\nffmpeg('/path/to/file.avi').inputOptions(\n  '-option1',\n  '-option2', 'param2',\n  '-option3',\n  '-option4', 'param4'\n);\n```\n\n----------------------------------------\n\nTITLE: Handling 'progress' Event with fluent-ffmpeg\nDESCRIPTION: This code shows how to listen for the 'progress' event in fluent-ffmpeg. This event is emitted periodically during transcoding and provides information about the progress, such as the number of frames processed, framerate, throughput, target size, timemark, and an estimated percentage.\nSOURCE: https://github.com/fluent-ffmpeg/node-fluent-ffmpeg/blob/master/README.md#_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\nffmpeg('/path/to/file.avi')\n  .on('progress', function(progress) {\n    console.log('Processing: ' + progress.percent + '% done');\n  });\n```\n\n----------------------------------------\n\nTITLE: Handling 'end' Event with fluent-ffmpeg\nDESCRIPTION: This code shows how to handle the 'end' event in fluent-ffmpeg. This event is emitted when processing is finished. The handler receives ffmpeg standard output and standard error as arguments (or an array of generated filenames when generating thumbnails).\nSOURCE: https://github.com/fluent-ffmpeg/node-fluent-ffmpeg/blob/master/README.md#_snippet_45\n\nLANGUAGE: javascript\nCODE:\n```\nffmpeg('/path/to/file.avi')\n  .on('end', function(stdout, stderr) {\n    console.log('Transcoding succeeded !');\n  });\n```\n\n----------------------------------------\n\nTITLE: Setting audio codec using audioCodec()\nDESCRIPTION: This code shows how to specify the audio codec using the `audioCodec()` method.  Fluent-ffmpeg checks codec availability before execution.\nSOURCE: https://github.com/fluent-ffmpeg/node-fluent-ffmpeg/blob/master/README.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nffmpeg('/path/to/file.avi').audioCodec('libmp3lame');\n```\n\n----------------------------------------\n\nTITLE: Set Video Codec - fluent-ffmpeg JavaScript\nDESCRIPTION: This example demonstrates how to set the video codec using the `videoCodec()` method. Fluent-ffmpeg checks for codec availability and throws an error if it's not available. Alias for this function is `withVideoCodec()`.\nSOURCE: https://github.com/fluent-ffmpeg/node-fluent-ffmpeg/blob/master/README.md#_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nffmpeg('/path/to/file.avi').videoCodec('libx264');\n```\n\n----------------------------------------\n\nTITLE: Reading Metadata from ffmpeg Input using ffprobe (JavaScript)\nDESCRIPTION: This snippet shows how to use `ffprobe` on an `FfmpegCommand` to probe input files. It allows specifying the input number (0-based) to read metadata from.  If no input number is provided, the last added input will be probed.\nSOURCE: https://github.com/fluent-ffmpeg/node-fluent-ffmpeg/blob/master/README.md#_snippet_55\n\nLANGUAGE: javascript\nCODE:\n```\nffmpeg('/path/to/file1.avi')\n  .input('/path/to/file2.avi')\n  .ffprobe(function(err, data) {\n    console.log('file2 metadata:');\n    console.dir(data);\n  });\n\nffmpeg('/path/to/file1.avi')\n  .input('/path/to/file2.avi')\n  .ffprobe(0, function(err, data) {\n    console.log('file1 metadata:');\n    console.dir(data);\n  });\n```\n\n----------------------------------------\n\nTITLE: Setting audio bitrate using audioBitrate()\nDESCRIPTION: This code demonstrates setting a constant audio bitrate using the `audioBitrate()` method. The bitrate can be specified as a number or a string with a `k` suffix for kbps.\nSOURCE: https://github.com/fluent-ffmpeg/node-fluent-ffmpeg/blob/master/README.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nffmpeg('/path/to/file.avi').audioBitrate(128);\nffmpeg('/path/to/file.avi').audioBitrate('128');\nffmpeg('/path/to/file.avi').audioBitrate('128k');\n```\n\n----------------------------------------\n\nTITLE: Set Video Bitrate - fluent-ffmpeg JavaScript\nDESCRIPTION: This snippet shows how to set the video bitrate using the `videoBitrate()` method. The `bitrate` argument can be a number or a string with an optional `k` suffix. The `constant` argument specifies whether to enforce a constant bitrate. Alias for this function is `withVideoBitrate()`.\nSOURCE: https://github.com/fluent-ffmpeg/node-fluent-ffmpeg/blob/master/README.md#_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nffmpeg('/path/to/file.avi').videoBitrate(1000);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nffmpeg('/path/to/file.avi').videoBitrate('1000');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nffmpeg('/path/to/file.avi').videoBitrate('1000k');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nffmpeg('/path/to/file.avi').videoBitrate('1000k', true);\n```\n\n----------------------------------------\n\nTITLE: Set Output Framerate - fluent-ffmpeg JavaScript\nDESCRIPTION: This snippet shows how to set the output framerate using the `fps()` method. Many aliases are supported, including `withOutputFps()`, `withOutputFPS()`, `withFpsOutput()`, `withFPSOutput()`, `withFps()`, `withFPS()`, `outputFPS()`, `outputFps()`, `fpsOutput()`, `FPSOutput()`, and `FPS()`.\nSOURCE: https://github.com/fluent-ffmpeg/node-fluent-ffmpeg/blob/master/README.md#_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nffmpeg('/path/to/file.avi').fps(29.7);\n```\n\n----------------------------------------\n\nTITLE: Handling 'stderr' Event with fluent-ffmpeg\nDESCRIPTION: This code demonstrates how to listen for the 'stderr' event in fluent-ffmpeg. This event is emitted whenever FFmpeg outputs a line to stderr. The handler receives the line of stderr as a string.\nSOURCE: https://github.com/fluent-ffmpeg/node-fluent-ffmpeg/blob/master/README.md#_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\nffmpeg('/path/to/file.avi')\n  .on('stderr', function(stderrLine) {\n    console.log('Stderr output: ' + stderrLine);\n  });\n```\n\n----------------------------------------\n\nTITLE: Saving output to File with fluent-ffmpeg\nDESCRIPTION: This code shows how to save the output of ffmpeg processing to a file using the `save()` method. It sets video and audio codecs, sets the output size, and then defines event handlers for error and end events.\nSOURCE: https://github.com/fluent-ffmpeg/node-fluent-ffmpeg/blob/master/README.md#_snippet_46\n\nLANGUAGE: javascript\nCODE:\n```\nffmpeg('/path/to/file.avi')\n  .videoCodec('libx264')\n  .audioCodec('libmp3lame')\n  .size('320x240')\n  .on('error', function(err) {\n    console.log('An error occurred: ' + err.message);\n  })\n  .on('end', function() {\n    console.log('Processing finished !');\n  })\n  .save('/path/to/output.mp4');\n```\n\n----------------------------------------\n\nTITLE: Setting input start time using seekInput()\nDESCRIPTION: This code shows how to seek to a specific start time in the input using `seekInput()`. The time can be specified in seconds or as a timestamp string (hh:mm:ss.xxx).\nSOURCE: https://github.com/fluent-ffmpeg/node-fluent-ffmpeg/blob/master/README.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nffmpeg('/path/to/file.avi').seekInput(134.5);\nffmpeg('/path/to/file.avi').seekInput('2:14.500');\n```\n\n----------------------------------------\n\nTITLE: Set Output Frame Aspect Ratio - fluent-ffmpeg JavaScript\nDESCRIPTION: This example demonstrates how to enforce a specific output aspect ratio using the `aspect()` method. The `aspect` argument can be a number or a `X:Y` string. Aliases include `withAspect()`, `withAspectRatio()`, `setAspect()`, `setAspectRatio()`, and `aspectRatio()`.\nSOURCE: https://github.com/fluent-ffmpeg/node-fluent-ffmpeg/blob/master/README.md#_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nffmpeg('/path/to/file.avi').size('640x?').aspect('4:3');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nffmpeg('/path/to/file.avi').size('640x?').aspect(1.33333);\n```\n\n----------------------------------------\n\nTITLE: Looping over input using loop()\nDESCRIPTION: This code demonstrates how to loop over the input file indefinitely or for a specified duration using the `loop()` method. The duration can be specified in seconds or as a timestamp string.\nSOURCE: https://github.com/fluent-ffmpeg/node-fluent-ffmpeg/blob/master/README.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nffmpeg('/path/to/file.avi').loop();\nffmpeg('/path/to/file.avi').loop(134.5);\nffmpeg('/path/to/file.avi').loop('2:14.500');\n```\n\n----------------------------------------\n\nTITLE: Set Output Duration (JavaScript)\nDESCRIPTION: Forces ffmpeg to stop transcoding after a specific duration using the `duration()` method. The time can be specified in seconds or as a timestamp string.\nSOURCE: https://github.com/fluent-ffmpeg/node-fluent-ffmpeg/blob/master/README.md#_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nffmpeg('/path/to/file.avi').duration(134.5);\nffmpeg('/path/to/file.avi').duration('2:14.500');\n```\n\n----------------------------------------\n\nTITLE: Changing FFmpeg Process Priority (Renice) (JavaScript)\nDESCRIPTION: This snippet illustrates how to change the priority (niceness) of the FFmpeg process using the `renice()` method. It demonstrates setting the niceness at startup and modifying it after a timeout. Note that this is ineffective on Windows platforms.\nSOURCE: https://github.com/fluent-ffmpeg/node-fluent-ffmpeg/blob/master/README.md#_snippet_53\n\nLANGUAGE: javascript\nCODE:\n```\n// Set startup niceness\nvar command = ffmpeg('/path/to/file.avi')\n  .renice(5)\n  .save('/path/to/output.mp4');\n\n// Command takes too long, raise its priority\nsetTimeout(function() {\n  command.renice(-5);\n}, 60000);\n```\n\n----------------------------------------\n\nTITLE: Setting audio channel count using audioChannels()\nDESCRIPTION: This code shows how to set the number of audio channels using the `audioChannels()` method.\nSOURCE: https://github.com/fluent-ffmpeg/node-fluent-ffmpeg/blob/master/README.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nffmpeg('/path/to/file.avi').audioChannels(2);\n```\n\n----------------------------------------\n\nTITLE: Killing a Running FFmpeg Process (JavaScript)\nDESCRIPTION: This snippet demonstrates how to kill a running FFmpeg process using the `kill()` method. It shows how to send signals like `SIGSTOP` to pause the process and `SIGCONT` to resume it. It also includes an example of killing the process after a specified timeout.\nSOURCE: https://github.com/fluent-ffmpeg/node-fluent-ffmpeg/blob/master/README.md#_snippet_52\n\nLANGUAGE: javascript\nCODE:\n```\nvar command = ffmpeg('/path/to/video.avi')\n  .videoCodec('libx264')\n  .audioCodec('libmp3lame')\n  .on('start', function() {\n    // Send SIGSTOP to suspend ffmpeg\n    command.kill('SIGSTOP');\n\n    doSomething(function() {\n      // Send SIGCONT to resume ffmpeg\n      command.kill('SIGCONT');\n    });\n  })\n  .save('/path/to/output.mp4');\n\n// Kill ffmpeg after 60 seconds anyway\nsetTimeout(function() {\n  command.on('error', function() {\n    console.log('Ffmpeg has been killed');\n  });\n\n  command.kill();\n}, 60000);\n```\n\n----------------------------------------\n\nTITLE: Handling 'start' Event with fluent-ffmpeg\nDESCRIPTION: This code snippet demonstrates how to listen for the 'start' event in fluent-ffmpeg. This event is triggered when the ffmpeg process starts and provides the full command line used to spawn the process. The example logs the command line to the console.\nSOURCE: https://github.com/fluent-ffmpeg/node-fluent-ffmpeg/blob/master/README.md#_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\nffmpeg('/path/to/file.avi')\n  .on('start', function(commandLine) {\n    console.log('Spawned Ffmpeg with command: ' + commandLine);\n  });\n```\n\n----------------------------------------\n\nTITLE: Setting input framerate for raw inputs\nDESCRIPTION: This code demonstrates setting the input framerate using the `inputFPS()` method, applicable only for raw inputs where ffmpeg can't automatically determine the framerate.\nSOURCE: https://github.com/fluent-ffmpeg/node-fluent-ffmpeg/blob/master/README.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nffmpeg('/dev/video0').inputFPS(29.7);\n```\n\n----------------------------------------\n\nTITLE: Piping to PassThrough Stream with fluent-ffmpeg\nDESCRIPTION: This code shows how to use the `pipe()` method without a stream argument to get a PassThrough stream. It then pipes the ffmpeg output into this stream and listens for data events.\nSOURCE: https://github.com/fluent-ffmpeg/node-fluent-ffmpeg/blob/master/README.md#_snippet_48\n\nLANGUAGE: javascript\nCODE:\n```\nvar command = ffmpeg('/path/to/file.avi')\n  .videoCodec('libx264')\n  .audioCodec('libmp3lame')\n  .size('320x240')\n  .on('error', function(err) {\n    console.log('An error occurred: ' + err.message);\n  })\n  .on('end', function() {\n    console.log('Processing finished !');\n  });\n\nvar ffstream = command.pipe();\nffstream.on('data', function(chunk) {\n  console.log('ffmpeg just wrote ' + chunk.length + ' bytes');\n});\n```\n\n----------------------------------------\n\nTITLE: Handling 'codecData' Event with fluent-ffmpeg\nDESCRIPTION: This code shows how to handle the 'codecData' event in fluent-ffmpeg. This event is emitted when ffmpeg provides codec information about the input streams. The handler receives an object containing the format, duration, and audio/video codec details.\nSOURCE: https://github.com/fluent-ffmpeg/node-fluent-ffmpeg/blob/master/README.md#_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\nffmpeg('/path/to/file.avi')\n  .on('codecData', function(data) {\n    console.log('Input is ' + data.audio + ' audio ' +\n      'with ' + data.video + ' video');\n  });\n```\n\n----------------------------------------\n\nTITLE: Set Output Format (JavaScript)\nDESCRIPTION: Sets the output format of the video using the `format()` method. This example sets the output format to 'flv'.\nSOURCE: https://github.com/fluent-ffmpeg/node-fluent-ffmpeg/blob/master/README.md#_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nffmpeg('/path/to/file.avi').format('flv');\n```\n\n----------------------------------------\n\nTITLE: Reading input at native framerate\nDESCRIPTION: This code demonstrates how to instruct ffmpeg to read the input at its native framerate using the `native()` method.\nSOURCE: https://github.com/fluent-ffmpeg/node-fluent-ffmpeg/blob/master/README.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nffmpeg('/path/to/file.avi').native();\n```\n\n----------------------------------------\n\nTITLE: Specify Frame Count - fluent-ffmpeg JavaScript\nDESCRIPTION: This example demonstrates how to set the number of frames to encode using the `frames()` method. Aliases for this function include `takeFrames()` and `withFrames()`.\nSOURCE: https://github.com/fluent-ffmpeg/node-fluent-ffmpeg/blob/master/README.md#_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nffmpeg('/path/to/file.avi').frames(240);\n```\n\n----------------------------------------\n\nTITLE: Cloning an FfmpegCommand (JavaScript)\nDESCRIPTION: This snippet demonstrates how to clone an `FfmpegCommand` instance using the `clone()` method.  Cloning allows applying different processing options on the same input without affecting the original command.\nSOURCE: https://github.com/fluent-ffmpeg/node-fluent-ffmpeg/blob/master/README.md#_snippet_62\n\nLANGUAGE: javascript\nCODE:\n```\n// Create a command to convert source.avi to MP4\nvar command = ffmpeg('/path/to/source.avi')\n  .audioCodec('libfaac')\n  .videoCodec('libx264')\n  .format('mp4');\n\n// Create a clone to save a small resized version\ncommand.clone()\n  .size('320x200')\n  .save('/path/to/output-small.mp4');\n\n// Create a clone to save a medium resized version\ncommand.clone()\n  .size('640x400')\n  .save('/path/to/output-medium.mp4');\n\n// Save a converted version with the original size\ncommand.save('/path/to/output-original-size.mp4');\n```\n\n----------------------------------------\n\nTITLE: Creating FFmpeg command with input file and options\nDESCRIPTION: This code showcases creating FFmpeg commands with various input options. It demonstrates how to pass an input file path, a readable stream, a configuration object, or a combination of both to the constructor, allowing for flexible initialization of FFmpeg commands.\nSOURCE: https://github.com/fluent-ffmpeg/node-fluent-ffmpeg/blob/master/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar command = ffmpeg('/path/to/file.avi');\nvar command = ffmpeg(fs.createReadStream('/path/to/file.avi'));\nvar command = ffmpeg({ option: \"value\", ... });\nvar command = ffmpeg('/path/to/file.avi', { option: \"value\", ... });\n```\n\n----------------------------------------\n\nTITLE: Seek Output Time (JavaScript)\nDESCRIPTION: Seeks streams before encoding them into the output, applying an offset to specific outputs using the `seek()` method. The time can be specified in seconds or as a timestamp string.\nSOURCE: https://github.com/fluent-ffmpeg/node-fluent-ffmpeg/blob/master/README.md#_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nffmpeg('/path/to/file.avi')\n  .seekInput('1:00')\n\n  .output('from-1m30s.avi')\n  .seek(30)\n\n  .output('from-1m40s.avi')\n  .seek('0:40');\n```\n\n----------------------------------------\n\nTITLE: Example Preset Module (JavaScript)\nDESCRIPTION: This is an example of a fluent-ffmpeg preset module, demonstrating how to configure settings such as format, bitrate, codec, size, audio channels, and output options within a preset.\nSOURCE: https://github.com/fluent-ffmpeg/node-fluent-ffmpeg/blob/master/README.md#_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nexports.load = function(ffmpeg) {\n  ffmpeg\n    .format('avi')\n    .videoBitrate('1024k')\n    .videoCodec('mpeg4')\n    .size('720x?')\n    .audioBitrate('128k')\n    .audioChannels(2)\n    .audioCodec('libmp3lame')\n    .outputOptions(['-vtag DIVX']);\n};\n```\n\n----------------------------------------\n\nTITLE: Force Keeping Display Aspect Ratio (JavaScript)\nDESCRIPTION: Rescales the input video to maintain the display aspect ratio when converting from non-square pixels to a format that does not support them. This is achieved using the `keepDAR()` method.\nSOURCE: https://github.com/fluent-ffmpeg/node-fluent-ffmpeg/blob/master/README.md#_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nffmpeg('/path/to/file.avi').keepDAR();\n```\n\n----------------------------------------\n\nTITLE: Use Preset Function (JavaScript)\nDESCRIPTION: Applies a custom preset function to the command. The function takes an FfmpegCommand as a parameter, allowing for dynamic configuration.\nSOURCE: https://github.com/fluent-ffmpeg/node-fluent-ffmpeg/blob/master/README.md#_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\nfunction myPreset(command) {\n  command.format('avi').size('720x?');\n}\n\nffmpeg('/path/to/file.avi').preset(myPreset);\n```\n\n----------------------------------------\n\nTITLE: Set Audio Frequency - fluent-ffmpeg JavaScript\nDESCRIPTION: This snippet shows how to set the audio frequency using the `audioFrequency()` method in fluent-ffmpeg.  The `freq` parameter specifies the audio frequency in Hz. Aliases for this function are `withAudioFrequency()`.\nSOURCE: https://github.com/fluent-ffmpeg/node-fluent-ffmpeg/blob/master/README.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nffmpeg('/path/to/file.avi').audioFrequency(22050);\n```\n\n----------------------------------------\n\nTITLE: Disabling audio using noAudio()\nDESCRIPTION: This code demonstrates how to disable audio processing in the output using the `noAudio()` method.  This removes any previously set audio options.\nSOURCE: https://github.com/fluent-ffmpeg/node-fluent-ffmpeg/blob/master/README.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nffmpeg('/path/to/file.avi').noAudio();\n```\n\n----------------------------------------\n\nTITLE: Set Audio Quality - fluent-ffmpeg JavaScript\nDESCRIPTION: This snippet demonstrates how to set the audio quality using the `audioQuality()` method. The quality scale depends on the audio codec used. Aliases for this function are `withAudioQuality()`.\nSOURCE: https://github.com/fluent-ffmpeg/node-fluent-ffmpeg/blob/master/README.md#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nffmpeg('/path/to/file.avi')\n  .audioCodec('libmp3lame')\n  .audioQuality(0);\n```\n\n----------------------------------------\n\nTITLE: Setting input format for raw inputs\nDESCRIPTION: This code demonstrates how to specify the input format for raw inputs using the `inputFormat()` method. It's useful when ffmpeg can't automatically determine the input format. Fluent-ffmpeg validates format availability before running the command.\nSOURCE: https://github.com/fluent-ffmpeg/node-fluent-ffmpeg/blob/master/README.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nffmpeg()\n  .input('/dev/video0')\n  .inputFormat('mov')\n  .input('/path/to/file.avi')\n  .inputFormat('avi');\n```\n\n----------------------------------------\n\nTITLE: Disable Video Output - fluent-ffmpeg JavaScript\nDESCRIPTION: This snippet shows how to disable video output using the `noVideo()` method. It removes any previously set video options. Alias for this function is `withNoVideo()`.\nSOURCE: https://github.com/fluent-ffmpeg/node-fluent-ffmpeg/blob/master/README.md#_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nffmpeg('/path/to/file.avi').noVideo();\n```\n\n----------------------------------------\n\nTITLE: Querying Available Filters using fluent-ffmpeg (JavaScript)\nDESCRIPTION: This snippet demonstrates how to retrieve available filters supported by ffmpeg using fluent-ffmpeg. It uses the `getAvailableFilters` method and logs the result to the console.\nSOURCE: https://github.com/fluent-ffmpeg/node-fluent-ffmpeg/blob/master/README.md#_snippet_60\n\nLANGUAGE: javascript\nCODE:\n```\nFfmpeg.getAvailableFilters(function(err, filters) {\n  console.log(\"Available filters:\");\n  console.dir(filters);\n});\n```\n\n----------------------------------------\n\nTITLE: Update FLV Metadata (JavaScript)\nDESCRIPTION: Updates FLV metadata after transcoding to make files streamable using the `flvmeta()` method.  This method is specifically for FLV format outputs.\nSOURCE: https://github.com/fluent-ffmpeg/node-fluent-ffmpeg/blob/master/README.md#_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nffmpeg('/path/to/file.avi').flvmeta().format('flv');\n```\n\n----------------------------------------\n\nTITLE: Creating an FFmpeg command instance (alternate)\nDESCRIPTION: This code demonstrates an alternative way to create a new instance of an FFmpeg command. It invokes the `ffmpeg` constructor directly without the `new` keyword, and achieves the same result.\nSOURCE: https://github.com/fluent-ffmpeg/node-fluent-ffmpeg/blob/master/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar ffmpeg = require('fluent-ffmpeg');\nvar command = ffmpeg();\n```\n\n----------------------------------------\n\nTITLE: Creating an FFmpeg command instance\nDESCRIPTION: This code demonstrates how to create a new instance of the FfmpegCommand object using the `require` function and the `new` keyword. This allows you to interact with ffmpeg via Javascript.\nSOURCE: https://github.com/fluent-ffmpeg/node-fluent-ffmpeg/blob/master/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar FfmpegCommand = require('fluent-ffmpeg');\nvar command = new FfmpegCommand();\n```\n\n----------------------------------------\n\nTITLE: Installing fluent-ffmpeg using npm\nDESCRIPTION: This command installs the fluent-ffmpeg package from npm, making it available for use in your Node.js project.\nSOURCE: https://github.com/fluent-ffmpeg/node-fluent-ffmpeg/blob/master/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ npm install fluent-ffmpeg\n```\n\n----------------------------------------\n\nTITLE: Executing ffprobe command from shell (Shell)\nDESCRIPTION: This snippet shows the equivalent shell command for probing video metadata. This command returns a JSON object with format and stream information.\nSOURCE: https://github.com/fluent-ffmpeg/node-fluent-ffmpeg/blob/master/README.md#_snippet_56\n\nLANGUAGE: shell\nCODE:\n```\n$ ffprobe -of json -show_streams -show_format /path/to/file.avi\n```\n\n----------------------------------------\n\nTITLE: Installing fluent-ffmpeg as a submodule\nDESCRIPTION: This command adds the fluent-ffmpeg repository as a submodule to your Git project, allowing you to manage its version separately.\nSOURCE: https://github.com/fluent-ffmpeg/node-fluent-ffmpeg/blob/master/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ git submodule add git://github.com/schaermu/node-fluent-ffmpeg.git vendor/fluent-ffmpeg\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests for fluent-ffmpeg\nDESCRIPTION: This command executes the unit tests for the fluent-ffmpeg library. Before running the tests, it's essential to install the npm dependencies using `npm install`. Running tests ensures the code functions as expected and prevents regressions.\nSOURCE: https://github.com/fluent-ffmpeg/node-fluent-ffmpeg/blob/master/README.md#_snippet_66\n\nLANGUAGE: Shell\nCODE:\n```\n$ make test\n```\n\n----------------------------------------\n\nTITLE: Enable Auto-Padding with Boolean (JavaScript)\nDESCRIPTION: Demonstrates the deprecated method of enabling auto-padding using a boolean argument, which specifies whether to apply auto-padding. This usage is for compatibility with older versions of fluent-ffmpeg.\nSOURCE: https://github.com/fluent-ffmpeg/node-fluent-ffmpeg/blob/master/README.md#_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nffmpeg('/path/to/file.avi').size('640x480').autopad(true);\nffmpeg('/path/to/file.avi').size('640x480').autopad(true, 'pink');\n```\n\n----------------------------------------\n\nTITLE: Documenting Method Aliases with JSDoc in fluent-ffmpeg\nDESCRIPTION: This snippet demonstrates how to document method aliases in fluent-ffmpeg using the `@aliases` JSDoc tag. The `@method` tag specifies the primary method, while `@aliases` lists alternative names for the same method. This improves discoverability and understanding of the API.\nSOURCE: https://github.com/fluent-ffmpeg/node-fluent-ffmpeg/blob/master/README.md#_snippet_63\n\nLANGUAGE: JavaScript\nCODE:\n```\n/**\n * ...\n * @method FfmpegCommand#myMethod\n * @aliases myMethodAlias,myOtherMethodAlias\n */\n```\n\n----------------------------------------\n\nTITLE: Categorizing Methods with JSDoc in fluent-ffmpeg\nDESCRIPTION: This snippet illustrates how to categorize methods in fluent-ffmpeg using the `@category` JSDoc tag.  This helps to organize and group related methods within the documentation, improving navigation and discoverability. This example categorizes a method under \"Audio\".\nSOURCE: https://github.com/fluent-ffmpeg/node-fluent-ffmpeg/blob/master/README.md#_snippet_64\n\nLANGUAGE: JavaScript\nCODE:\n```\n/**\n * ...\n * @category Audio\n */\n```\n\n----------------------------------------\n\nTITLE: Regenerating JSDoc Documentation for fluent-ffmpeg\nDESCRIPTION: This command regenerates the JSDoc documentation for the fluent-ffmpeg library. It's a crucial step when contributing API changes to ensure the documentation accurately reflects the current state of the codebase. This uses the `make` command with the `doc` target.\nSOURCE: https://github.com/fluent-ffmpeg/node-fluent-ffmpeg/blob/master/README.md#_snippet_65\n\nLANGUAGE: Shell\nCODE:\n```\n$ make doc\n```\n\n----------------------------------------\n\nTITLE: Applying Apache License - Copyright Notice\nDESCRIPTION: This snippet demonstrates the boilerplate copyright notice to be included when applying the Apache License 2.0 to your work. Replace the bracketed fields with your specific information.\nSOURCE: https://github.com/fluent-ffmpeg/node-fluent-ffmpeg/blob/master/tools/jsdoc-template/static/scripts/prettify/Apache-License-2.0.txt#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\nCopyright [yyyy] [name of copyright owner]\n```\n\n----------------------------------------\n\nTITLE: Applying Apache License - License Text\nDESCRIPTION: This snippet shows the standardized license text to include when using the Apache License 2.0. This text provides details about permitted use, distribution, and modification under the Apache License.\nSOURCE: https://github.com/fluent-ffmpeg/node-fluent-ffmpeg/blob/master/tools/jsdoc-template/static/scripts/prettify/Apache-License-2.0.txt#_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```"
  }
]