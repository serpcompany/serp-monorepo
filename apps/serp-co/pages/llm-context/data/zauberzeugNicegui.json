[
  {
    "owner": "zauberzeug",
    "repo": "nicegui",
    "content": "TITLE: Installing NiceGUI with Pip - Bash\nDESCRIPTION: This command installs the NiceGUI library using pip, the standard Python package installer. It requires Python 3 to be installed and configured correctly. Running this command makes the `nicegui` package and its components available for use in Python applications.\nSOURCE: https://github.com/zauberzeug/nicegui/blob/main/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m pip install nicegui\n```\n\n----------------------------------------\n\nTITLE: Listing Python Dependencies\nDESCRIPTION: This snippet specifies the required Python packages and their minimum versions for the project using the standard `requirements.txt` syntax. It ensures that `nicegui` version 1.0 or greater and `replicate` version 0.4 or greater are installed when using tools like pip.\nSOURCE: https://github.com/zauberzeug/nicegui/blob/main/examples/ai_interface/requirements.txt#_snippet_0\n\nLANGUAGE: requirements.txt\nCODE:\n```\nnicegui>=1.0\nreplicate>=0.4\n```\n\n----------------------------------------\n\nTITLE: Installing NiceGUI in Editable Mode using pip - Bash\nDESCRIPTION: This command installs the 'nicegui' package and all its dependencies in editable mode. Installing in editable mode allows changes made in the source code to be immediately reflected without reinstalling. Requires Python 3.8+ and pip to be available in the environment.\nSOURCE: https://github.com/zauberzeug/nicegui/blob/main/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m pip install -e .\n```\n\n----------------------------------------\n\nTITLE: Installing pre-commit and Setting Up Git Hooks - Bash\nDESCRIPTION: These commands install the 'pre-commit' package using pip and set up git hooks to enforce coding standards on commit. Requires Python 3.8+ and pip. The repository must be initialized with git. After installation, coding style checks will run automatically with each commit.\nSOURCE: https://github.com/zauberzeug/nicegui/blob/main/CONTRIBUTING.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m pip install pre-commit\npre-commit install\n```\n\n----------------------------------------\n\nTITLE: Running pre-commit Checks on All Files - Bash\nDESCRIPTION: This command executes all configured pre-commit hooks on every file in the repository to ensure coding standards are met. May require Python 3.8 to be available if specified in the project's pre-commit configuration.\nSOURCE: https://github.com/zauberzeug/nicegui/blob/main/CONTRIBUTING.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npre-commit run --all-files\n```\n\n----------------------------------------\n\nTITLE: Running NiceGUI Application using Docker Compose (Bash)\nDESCRIPTION: This snippet demonstrates how to execute a NiceGUI application within a Docker container using the `docker compose` command. It involves modifying the `docker-compose.yml` file to align with local host user's uid/gid and executing the `docker compose up` command. The expected output is the successful start of the NiceGUI application.\nSOURCE: https://github.com/zauberzeug/nicegui/blob/main/examples/docker_image/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up\n```\n\n----------------------------------------\n\nTITLE: Starting the NiceGUI Development Docker Container - Bash\nDESCRIPTION: This command launches the NiceGUI development environment within a Docker container by executing the 'docker.sh' script. It starts the development server that listens on http://localhost:80/. Docker must be installed and configured, and 'docker.sh' should be present and executable in the project directory.\nSOURCE: https://github.com/zauberzeug/nicegui/blob/main/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./docker.sh up app\n```\n\n----------------------------------------\n\nTITLE: Running NiceGUI App in Container with Docker Compose (Bash)\nDESCRIPTION: Launches the NiceGUI application using Docker Compose, orchestrating required containers as defined in the Docker Compose configuration. Assumes that a valid docker-compose.yml file is present in the directory. Requires Docker and Docker Compose installed.\nSOURCE: https://github.com/zauberzeug/nicegui/blob/main/examples/nginx_https/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up\n```\n\n----------------------------------------\n\nTITLE: Creating Basic NiceGUI App - Python\nDESCRIPTION: This Python code defines a minimal NiceGUI application. It imports the necessary `ui` object, creates a simple text label and a button. The button's `on_click` event is handled by a lambda function that triggers a non-blocking notification. The `ui.run()` call starts the embedded web server.\nSOURCE: https://github.com/zauberzeug/nicegui/blob/main/README.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom nicegui import ui\n\nui.label('Hello NiceGUI!')\nui.button('BUTTON', on_click=lambda: ui.notify('button was pressed'))\n\nui.run()\n```\n\n----------------------------------------\n\nTITLE: Creating certs Directory using Bash\nDESCRIPTION: Creates a 'certs' directory in the working directory to store SSL certificate and key files required for HTTPS. This is a prerequisite before generating certificates. The command has no parameters and expects file system write permissions.\nSOURCE: https://github.com/zauberzeug/nicegui/blob/main/examples/nginx_https/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir certs\n```\n\n----------------------------------------\n\nTITLE: Installing Node Modules for NiceGUI App\nDESCRIPTION: This code snippet shows the command to install Node.js dependencies, specifically the signature_pad module, which is required for creating signature pads in the GUI. It assumes npm is installed and sets up the node_modules directory with necessary packages.\nSOURCE: https://github.com/zauberzeug/nicegui/blob/main/examples/signature_pad/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Deploying NGINX Configuration for NiceGUI App (Bash)\nDESCRIPTION: Installs and activates a site-specific NGINX configuration file for serving the NiceGUI app via HTTPS. The sequence of commands copies the configuration, opens it for editing to adjust to custom domains and paths, symlinks it into NGINX enabled-sites, and reloads NGINX to apply the changes. Requires sudo privileges, systemd-managed NGINX, and correct file naming in /etc/nginx.\nSOURCE: https://github.com/zauberzeug/nicegui/blob/main/examples/nginx_https/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo cp nginx_site.conf /etc/nginx/sites-available/my_nicegui_app.conf\nsudo nano /etc/nginx/sites-available/my_nicegui_app.conf # customize your domain, certificates, port number, etc.\nsudo ln -s /etc/nginx/sites-available/mynicegui_app.conf /etc/nginx/sites-enabled\nsudo systemctl reload nginx\n```\n\n----------------------------------------\n\nTITLE: Running ROS2 NiceGUI Example with Docker Compose\nDESCRIPTION: This command uses the `docker compose` tool to build and start the services defined in the project's `docker-compose.yml` file. It sets up the necessary ROS2 environment and the NiceGUI node, making the web interface accessible. Prerequisites include having Docker and Docker Compose installed.\nSOURCE: https://github.com/zauberzeug/nicegui/blob/main/examples/ros2/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up --build\n```\n\n----------------------------------------\n\nTITLE: Running the NiceGUI Test Suite with pytest - Bash\nDESCRIPTION: This command runs the full test suite in the NiceGUI repository using pytest. Requires pytest to be installed in the Python environment, as well as python-selenium and ChromeDriver. The command must be executed from the root directory of the NiceGUI project.\nSOURCE: https://github.com/zauberzeug/nicegui/blob/main/CONTRIBUTING.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npytest\n```\n\n----------------------------------------\n\nTITLE: Running the NiceGUI Server in Bash\nDESCRIPTION: Command to start the NiceGUI server that creates a plot and updates it with data received from the ZeroMQ socket. This component handles the visualization of the streaming data.\nSOURCE: https://github.com/zauberzeug/nicegui/blob/main/examples/zeromq/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython main.py\n```\n\n----------------------------------------\n\nTITLE: Running the NiceGUI Application with Node Modules\nDESCRIPTION: This command executes the main Python script of the NiceGUI project, which integrates the signature_pad Node.js module into the application. It requires Python 3 and assumes previous setup steps are completed, allowing the app to run with third-party dependencies.\nSOURCE: https://github.com/zauberzeug/nicegui/blob/main/examples/signature_pad/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython3 main.py\n```\n\n----------------------------------------\n\nTITLE: Generating Self-Signed SSL Certificate using OpenSSL (Bash)\nDESCRIPTION: Uses OpenSSL to generate a new self-signed SSL certificate and key for 'localhost', placing them in the 'certs/' directory for local HTTPS usage. This command is intended for local development only and not secure for production. Requires OpenSSL to be installed and bash shell with process substitution support.\nSOURCE: https://github.com/zauberzeug/nicegui/blob/main/examples/nginx_https/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nopenssl req -x509 -out certs/localhost.crt -keyout certs/localhost.key -newkey rsa:2048 -nodes -sha256 -subj '/CN=localhost' -extensions EXT -config <( printf \"[dn]\\nCN=localhost\\n[req]\\ndistinguished_name = dn\\n[EXT]\\nsubjectAltName=DNS:localhost\\nkeyUsage=digitalSignature\\nextendedKeyUsage=serverAuth\")\n```\n\n----------------------------------------\n\nTITLE: Formatting Code with autopep8 - Bash\nDESCRIPTION: This command recursively applies PEP8 formatting to all files in the project directory using autopep8, enforcing a maximum line length of 120 characters. Requires the autopep8 package to be installed in the environment.\nSOURCE: https://github.com/zauberzeug/nicegui/blob/main/CONTRIBUTING.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nautopep8 --max-line-length=120 --in-place --recursive .\n```\n\n----------------------------------------\n\nTITLE: Refreshing CodeMirror Files - Bash\nDESCRIPTION: This snippet provides instructions on how to refresh the generated CodeMirror files within the project. It specifies the use of a bash script named `./bundle.bash` to achieve this. The script should be executed on a Linux machine or within a devcontainer for proper functionality. The primary goal is to update the CodeMirror-related files after making changes or updates to the core logic. No specific input or output is detailed within this text; however, the output is the updated CodeMirror files within the project directory after running the script.\nSOURCE: https://github.com/zauberzeug/nicegui/blob/main/scripts/codemirror/README.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nTo refresh the generated CodeMirror files, run `./bundle.bash` on a Linux machine or in the devcontainer.\n```\n\n----------------------------------------\n\nTITLE: Running the ZeroMQ Publisher in Bash\nDESCRIPTION: Command to start the ZeroMQ publisher script which sends random data to a ZeroMQ socket. This component generates the data that will be visualized.\nSOURCE: https://github.com/zauberzeug/nicegui/blob/main/examples/zeromq/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython zmq-server.py\n```\n\n----------------------------------------\n\nTITLE: Running NiceGUI Application - Bash\nDESCRIPTION: This command executes a Python script (`main.py`) that contains a NiceGUI application. The `ui.run()` function within the script starts a web server, making the defined user interface accessible via a web browser, typically on the default port 8080.\nSOURCE: https://github.com/zauberzeug/nicegui/blob/main/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython3 main.py\n```\n\n----------------------------------------\n\nTITLE: Running NiceGUI Behind Nginx Reverse Proxy with Docker Compose\nDESCRIPTION: Simple command to start the Docker Compose configuration that sets up NiceGUI behind an Nginx reverse proxy. After execution, the application will be accessible at http://localhost/nicegui/ with the trailing slash being mandatory.\nSOURCE: https://github.com/zauberzeug/nicegui/blob/main/examples/nginx_subpath/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up\n```\n\n----------------------------------------\n\nTITLE: Declaring pyserial Dependency - Python\nDESCRIPTION: This snippet declares the `pyserial` library as a dependency for the Python project. This indicates that the project utilizes functionality provided by `pyserial`, most likely for serial communication. No specific code is provided, but the presence of `pyserial` in the content directly implies the need for it during project setup or execution. The output is implied, signifying a project dependency.\nSOURCE: https://github.com/zauberzeug/nicegui/blob/main/examples/pyserial/requirements.txt#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Viewing Docker Log Output - Bash\nDESCRIPTION: This command displays log output from the NiceGUI Docker development container. It executes the 'docker.sh' script with the 'log' argument. Requires a running development container started by './docker.sh up app'.\nSOURCE: https://github.com/zauberzeug/nicegui/blob/main/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./docker.sh log\n```"
  }
]