[
  {
    "owner": "deephaven",
    "repo": "deephaven-plugins",
    "content": "TITLE: Implementing Species Dashboard Component in Python\nDESCRIPTION: Creates the main species dashboard component, combining various UI elements such as species picker, summary badges, heatmap, and panels. It uses hooks for state management and memoization.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/tutorial.md#2025-04-17_snippet_29\n\nLANGUAGE: Python\nCODE:\n```\n@ui.component\ndef create_species_dashboard():\n    species, set_species = ui.use_state()\n    species_picker = ui.picker(\n        species_table,\n        on_change=set_species,\n        selected_key=species,\n        label=\"Current Species\",\n    )\n  \n    heatmap = ui.use_memo(lambda: create_heatmap(species), [species])\n\n    badges = summary_badges(species) if species else None\n\n    species_panel = ui.panel(\n        ui.flex(species_picker, badges, heatmap, direction=\"column\"),\n        title=\"Investigate Species\",\n    )\n\n    sepal_panel = create_sepal_panel(set_species)\n\n    return ui.column(\n        ui.row(about_panel, iris_agg_stack, height=1),\n        ui.row(sepal_panel, species_panel, height=2),\n    )\n\niris_species_dashboard_final = ui.dashboard(create_species_dashboard())\n```\n\n----------------------------------------\n\nTITLE: Building a Complete Interactive Stock Widget Dashboard\nDESCRIPTION: Demonstrates a comprehensive dashboard component combining multiple UI elements: dual range sliders to filter by price, an interactive table that updates a text input on row selection, and an interactive plot that responds to the filtered data and displays details on click.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/DESIGN.md#2025-04-17_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.ui as ui\nimport deephaven.plot.express as dx\n\n\n@ui.component\ndef stock_widget(source: Table, column: str = \"Sym\"):\n    lo, set_lo = use_state(0)\n    hi, set_hi = use_state(10000)\n    sym, set_sym = use_state(\"\")\n\n    # Create the filtered table\n    filtered_table = ui.use_memo(\n        lambda: source.where([f\"Price >= {lo} && Price <= {hi}\"]), [lo, hi]\n    )\n\n    p = ui.use_memo(\n        lambda: dx.line(filtered_table.where(f\"Sym=`{sym}`\"), x=\"Timestamp\", y=\"Last\"),\n        [filtered_table],\n    )\n\n    def handle_slider_change(event):\n        set_lo(event.value.lo)\n        set_hi(event.value.hi)\n\n    return ui.flex(\n        [\n            # Slider will update the lo/hi values on changes\n            ui.range_slider(\n                lo=lo, hi=hi, min=0, max=10000, on_change=handle_slider_change\n            ),\n            # Wrap the filtered table so you can select a row\n            ui.interactive_table(\n                t=filtered_table,\n                # Update the Sym value when a row is selected\n                on_row_clicked=lambda event: set_sym(event[\"data\"][column]),\n            ),\n            # Text input will update the sym when it is changed, or display the new value when selected from the table\n            ui.text_input(value=sym, on_change=lambda event: set_sym(event[\"value\"])),\n            # Wrap the filtered plot so you can select data\n            ui.interactive_plot(\n                p=p, on_data_clicked=lambda event: print(f\"data selected: {str(event)}\")\n            ),\n        ]\n    )\n```\n\n----------------------------------------\n\nTITLE: Basic Cell Data Usage with Time Table\nDESCRIPTION: Demonstrates basic usage of use_cell_data to display the first cell value from a time table. Creates a component that updates when the table changes.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/hooks/use_cell_data.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import time_table, ui\n\n@ui.component\ndef ui_table_first_cell(table):\n    cell_value = ui.use_cell_data(table)\n    return ui.heading(f\"The first cell value is {cell_value}\")\n\ntable_first_cell = ui_table_first_cell(time_table(\"PT1s\").tail(1))\n```\n\n----------------------------------------\n\nTITLE: Implementing Table Actions with Row Double-Click\nDESCRIPTION: Creates a component with interactive tables and plots that respond to user actions. When a user double-clicks on a row in the table, it filters another table and updates a plot to show data for the selected stock.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/docker/data/storage/notebooks/DEMO.md#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n@ui.component\ndef stock_table_input(source, default_sym=\"\", default_exchange=\"\"):\n    sym, set_sym = ui.use_state(default_sym)\n    exchange, set_exchange = ui.use_state(default_exchange)\n\n    t1 = source.select_distinct([\"sym\", \"exchange\"])\n    t2 = source.where([f\"sym=`{sym.upper()}`\", f\"exchange=`{exchange}`\"])\n    p = dx.line(t2, x=\"timestamp\", y=\"price\")\n\n    def handle_row_double_press(row, data):\n        set_sym(data[\"sym\"][\"value\"])\n        set_exchange(data[\"exchange\"][\"value\"])\n\n    return [\n        ui.panel(\n            # Add a callback for when user double clicks a row in the table\n            ui.table(t1, on_row_double_press=handle_row_double_press),\n            title=\"Stock Row Press\",\n        ),\n        ui.panel(t2, title=\"Stock Filtered Table\"),\n        ui.panel(p, title=\"Stock Plot\"),\n    ]\n\n\nsti = stock_table_input(stocks, \"CAT\", \"TPET\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Cross-Panel Communication in Deephaven UI Dashboard\nDESCRIPTION: This comprehensive example demonstrates how to share state between different panels in a dashboard. It creates a sepal panel with table event handling that can update the species picker in another panel, enabling coordinated interactions across the dashboard.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/tutorial.md#2025-04-17_snippet_22\n\nLANGUAGE: python\nCODE:\n```\ndef create_sepal_panel(set_species):\n    ui_iris = ui.table(\n        iris,\n        reverse=True,\n        front_columns=[\"Timestamp\", \"Species\"],\n        hidden_columns=[\"PetalLength\", \"PetalWidth\", \"SpeciesID\"],\n        density=\"compact\",\n        on_row_double_press=lambda event: set_species(event[\"Species\"][\"value\"]),\n    )\n\n    sepal_flex = ui.flex(ui_iris, scatter_by_species)\n\n    sepal_tabs = ui.tabs(\n        ui.tab(sepal_flex, title=\"Sepal Length vs. Sepal Width\"),\n        ui.tab(sepal_length_hist, title=\"Sepal Length Histogram\"),\n        ui.tab(sepal_width_hist, title=\"Sepal Width Histogram\"),\n    )\n\n    sepal_flex_tabs = ui.flex(sepal_text, sepal_tabs, direction=\"column\")\n\n    return ui.panel(sepal_flex_tabs, title=\"Sepal Panel\")\n\n\n@ui.component\ndef create_species_dashboard():\n    species, set_species = ui.use_state()\n    species_picker = ui.picker(\n        species_table,\n        on_change=set_species,\n        selected_key=species,\n        label=\"Current Species\",\n    )\n\n    heatmap = ui.illustrated_message(\n        ui.icon(\"vsFilter\"),\n        ui.heading(\"Species required\"),\n        ui.content(\"Select a species to display filtered table and chart.\"),\n        width=\"100%\",\n    )\n\n    if species:\n        filtered_table = iris.where(\"Species = species\")\n\n        heatmap = dx.density_heatmap(filtered_table, x=\"SepalLength\", y=\"SepalWidth\")\n\n    species_panel = ui.panel(\n        ui.flex(species_picker, heatmap, direction=\"column\"),\n        title=\"Investigate Species\",\n    )\n\n    sepal_panel = create_sepal_panel(set_species)\n\n    return ui.column(\n        ui.row(about_panel, iris_agg_stack, height=1),\n        ui.row(sepal_panel, species_panel, height=2),\n    )\n\n\niris_species_dashboard_state = ui.dashboard(create_species_dashboard())\n```\n\n----------------------------------------\n\nTITLE: Converting Parameterized Query to deephaven.ui Component in Python\nDESCRIPTION: Shows how to implement the same parameterized query using the deephaven.ui React-like components approach. This implementation uses hooks for state management, user authentication, table fetching, and creates an interactive UI with sliders, text inputs, and checkboxes.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/DESIGN.md#2025-04-17_snippet_85\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.ui as ui\nfrom deephaven.ui.hooks import *\nimport deephaven.plot.express as dx\n\n\n@ui.component\ndef my_query_component():\n    # Store the state for our parameters\n    int_param, set_int_param = use_state(0)\n    string_param, set_string_param = use_state(\"\")\n    double_param, set_double_param = use_state(0.0)\n    is_double_used, set_is_double_used = use_state(False)\n\n    # Hooks for getting the authenticated/effective user names and groups\n    authenticated_user = use_authenticated_user()\n    effective_user = use_effective_user()\n    groups = use_groups()\n\n    # Hooks for getting tables. Pass in an optional `as_owner` to fetch as query owner\n    table_result_as_owner = use_intraday_table(\n        \"SomeNamespace\", \"SomeTable\", as_owner=True\n    )\n    table_result = use_intraday_table(\"SomeNamespace\", \"SomeTable\")\n\n    # Apply the parameters\n    table_result = table_result.where(\n        f\"Date=currentDateNy()\", f\"StringCol=`{string_param}`\"\n    ).update_view(f\"OffsetInt = IntCol + {int_param}\", \"Scaled = (double)OffsetInt\")\n\n    # Apply the double_param if it is used\n    if is_double_used:\n        table_result = table_result.update_view(f\"Scaled = OffsetInt * {double_param}\")\n\n    plot_result = dx.line(table=table_result, x=\"Timestamp\", y=\"Scaled\")\n\n    return [\n        # One panel for all the inputs\n        ui.panel(\n            [\n                # For each kind of input, we can specify the control we want to use (e.g. slider, text input, checkbox)\n                ui.slider(value=my_int, on_change=on_int_change, min=0, max=100),\n                ui.text_input(value=my_str, on_change=on_str_change),\n                ui.checkbox(\n                    \"Use double?\", value=is_double_used, on_change=set_is_double_used\n                ),\n                ui.slider(\n                    value=double_param,\n                    on_change=set_double_param,\n                    min=-1.0,\n                    max=1.0,\n                    disabled=not is_double_used,\n                ),\n            ]\n        ),\n        # One panel for the table\n        ui.panel(table_result),\n        # One panel for the plot\n        ui.panel(plot(\"Stuff\", table_result, \"Timestamp\", \"Scaled\").show()),\n    ]\n\n\nmy_query = my_query_component()\n```\n\n----------------------------------------\n\nTITLE: Sharing State Between Dashboard Panels in Python\nDESCRIPTION: Implements a complex dashboard with shared state management between panels, including filtering controls, table display, and plotting functionality using Deephaven UI components.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/creating-layouts/creating-dashboards.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven.time import dh_now\nfrom deephaven import time_table, ui\nimport deephaven.plot.express as dx\n\n@ui.component\ndef control_panel(filter_type, set_filter_type, dates, set_dates, value, set_value):\n    return ui.panel(\n        ui.radio_group(\n            ui.radio(\"Date\"),\n            ui.radio(\"Value\"),\n            value=filter_type,\n            on_change=set_filter_type,\n            label=\"Filter type\",\n        ),\n        ui.date_range_picker(label=\"Date filter\", value=dates, on_change=set_dates),\n        ui.picker(\n            \"A\", \"B\", selected_key=value, on_change=set_value, label=\"Value filter\"\n        ),\n        title=\"Controls\",\n    )\n\n@ui.component\ndef create_dashboard(start_date, end_date, table):\n    filter_type, set_filter_type = ui.use_state(\"Date\")\n    value, set_value = ui.use_state(\"A\")\n    dates, set_dates = ui.use_state({\"start\": start_date, \"end\": end_date})\n    start = dates[\"start\"]\n    end = dates[\"end\"]\n\n    def handle_filter(filter_type, start, end, value, table):\n        if filter_type == \"Date\":\n            return table.where(\"Date >= start && Date < end\")\n        else:\n            return table.where(\"Value=value\")\n\n    filtered_table = ui.use_memo(\n        lambda start=start, end=end: handle_filter(\n            filter_type, start, end, value, table\n        ),\n        [filter_type, start, end, value, table],\n    )\n    plot = ui.use_memo(\n        lambda: dx.line(filtered_table, x=\"Date\", y=\"Row\"), [filtered_table]\n    )\n\n    return ui.row(\n        control_panel(filter_type, set_filter_type, dates, set_dates, value, set_value),\n        ui.column(\n            ui.stack(\n                ui.panel(filtered_table, title=\"Filter table\"),\n                ui.panel(table, title=\"Original table\"),\n                active_item_index=0,\n            ),\n            ui.panel(plot, title=\"Plot\"),\n        ),\n    )\n\nSECONDS_IN_DAY = 86400\ntoday = dh_now()\n_table = time_table(\"PT1s\").update_view(\n    [\"Date=today.plusSeconds(SECONDS_IN_DAY*i)\", \"Value=i%2==0 ? `A` : `B`\", \"Row=i\"]\n)\nexample_dashboard = ui.dashboard(\n    create_dashboard(today, today.plusSeconds(SECONDS_IN_DAY * 10), _table)\n)\n```\n\n----------------------------------------\n\nTITLE: Plotting Partitioned Tables for Efficient Filtering in Deephaven\nDESCRIPTION: Demonstrates how to use partitioned tables for more efficient filtering when creating plots. This approach partitions the table once and then selects the relevant key, which can be more memory-efficient for large datasets.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/add-interactivity/plot-with-deephaven-ui.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.plot.express as dx\nimport deephaven.ui as ui\n\n_stocks = dx.data.stocks()\n\n\n@ui.component\ndef plot_partitioned_table(table, initial_value):\n    text, set_text = ui.use_state(initial_value)\n    # memoize the partition by so that it only performed once\n    partitioned_table = ui.use_memo(lambda: table.partition_by([\"Sym\"]), [table])\n    constituent_table = ui.use_memo(\n        lambda: partitioned_table.get_constituent(text.upper()) if text != \"\" else None,\n        [partitioned_table, text],\n    )\n    # only attempt to plot valid partition keys\n    plot = ui.use_memo(\n        lambda: dx.line(\n            constituent_table, x=\"Timestamp\", y=\"Price\", title=f\"partition key: {text}\"\n        )\n        if constituent_table != None\n        else ui.text(\"Please enter a valid partition.\"),\n        [constituent_table, text],\n    )\n    return [\n        ui.text_field(value=text, on_change=set_text),\n        plot,\n    ]\n\n\np = plot_partitioned_table(_stocks, \"DOG\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Text Filter Table Component with deephaven.ui\nDESCRIPTION: Demonstrates a more complex component that filters a table based on text input, utilizing state management with use_state.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/architecture.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\nimport deephaven.plot.express as dx\n\n@ui.component\ndef text_filter_table(source, column, initial_value=\"\"):\n    value, set_value = ui.use_state(initial_value)\n    ti = ui.text_field(value=value, on_change=set_value)\n    tt = source.where(f\"{column}=`{value}`\")\n    return [ti, tt]\n\n@ui.component\ndef double_text_filter_table(source):\n    tft1 = text_filter_table(source, \"Sym\", \"CAT\")\n    tft2 = text_filter_table(source, \"Exchange\", \"PETX\")\n    return ui.panel(tft1, title=\"Sym\"), ui.panel(tft2, title=\"Exchange\")\n\n_stocks = dx.data.stocks()\n\ntft = double_text_filter_table(_stocks)\n```\n\n----------------------------------------\n\nTITLE: Passing Event Handlers as Props in Deephaven UI Components\nDESCRIPTION: This example demonstrates how to pass event handlers from parent to child components, allowing customization of behavior based on context and maintaining separation of concerns.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/add-interactivity/respond-to-events.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef custom_button(*children, on_press):\n    return ui.button(children, on_press=on_press)\n\n\n@ui.component\ndef play_button(movie_name):\n    def handle_play_press():\n        print(f\"Playing {movie_name}\")\n\n    return custom_button(f\"Play {movie_name}\", on_press=handle_play_press)\n\n\n@ui.component\ndef upload_button():\n    return custom_button(\"Upload Image\", on_press=lambda: print(\"Uploading!\"))\n\n\n@ui.component\ndef toolbar():\n    return [play_button(\"Alice in Wonderland\"), upload_button()]\n\n\npass_event_handlers = toolbar()\n```\n\n----------------------------------------\n\nTITLE: Creating Line Plot with Multiple Axes Using 'by' Parameter in Python\nDESCRIPTION: Demonstrates creating a multi-axis plot using the 'by' parameter to group data by stock symbols. Shows how to create separate axes for different groups of data.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/plotly-express/docs/multiple-axes.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.plot.express as dx\nstocks = dx.data.stocks()\n\n# subset to get two symbols\ncat_dog = stocks.where(\"Sym in `CAT`, `DOG`\")\n\n# use `by` to specify the grouping column and order axes left to right with yaxis_sequence\nline_plot_by = dx.line(cat_dog, x=\"Timestamp\", y=\"Price\", by=\"Sym\", yaxis_sequence=[1, 2])\n```\n\n----------------------------------------\n\nTITLE: Creating Sepal Panel Function in Python\nDESCRIPTION: Defines a function to create the sepal panel, including a table view of Iris data and various charts. It uses Deephaven UI components to structure the layout and handle user interactions.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/tutorial.md#2025-04-17_snippet_26\n\nLANGUAGE: Python\nCODE:\n```\ndef create_sepal_panel(set_species):\n  ui_iris = ui.table(\n      iris,\n      reverse=True,\n      front_columns=[\"Timestamp\", \"Species\"],\n      hidden_columns=[\"PetalLength\", \"PetalWidth\", \"SpeciesID\"],\n      density=\"compact\",\n      on_row_double_press=lambda event: set_species(event[\"Species\"][\"value\"])\n    )\n\n  sepal_flex = ui.flex(ui_iris, scatter_by_species)\n\n  sepal_tabs = ui.tabs(\n      ui.tab(sepal_flex, title=\"Sepal Length vs. Sepal Width\"),\n      ui.tab(sepal_length_hist, title=\"Sepal Length Histogram\"),\n      ui.tab(sepal_width_hist, title=\"Sepal Width Histogram\"),\n  )\n\n  sepal_flex_tabs = ui.flex(sepal_text, sepal_tabs, direction=\"column\")\n  \n  return ui.panel(sepal_flex_tabs, title=\"Sepal Panel\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Single Panel Dashboard\nDESCRIPTION: Creates a titled panel and initializes a dashboard with this single panel to display the flex layout with tabbed interface.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/tutorial.md#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nsepal_panel = ui.panel(sepal_flex_tabs, title=\"Sepal Panel\")\niris_dashboard = ui.dashboard(sepal_panel)\n```\n\n----------------------------------------\n\nTITLE: Creating a Dashboard with Custom Components in Deephaven UI\nDESCRIPTION: This code creates a dashboard by combining multiple components, including the custom species picker panel. It arranges panels in rows and columns to create a comprehensive visualization of the iris dataset.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/tutorial.md#2025-04-17_snippet_20\n\nLANGUAGE: python\nCODE:\n```\niris_species_dashboard = ui.dashboard(\n    ui.column(\n        ui.row(about_panel, iris_agg_stack), ui.row(sepal_panel, species_picker_panel)\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Importing and Loading Iris Dataset with deephaven.ui\nDESCRIPTION: Imports the deephaven.ui library along with deephaven.plot.express and loads the simulated iris dataset for visualization and analysis.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/tutorial.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\nimport deephaven.plot.express as dx\n\niris = dx.data.iris()\n```\n\n----------------------------------------\n\nTITLE: Updating Tables and Plots from User Input (Python)\nDESCRIPTION: This example demonstrates how to update tables and plots based on user input, specifically using a date_range_picker to filter a table and update a corresponding plot.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/describing/ui_with_tables.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven.time import dh_now\nfrom deephaven import time_table, ui\nimport deephaven.plot.express as dx\n\n\n@ui.component\ndef date_table_filter(table, start_date, end_date, time_col=\"Timestamp\"):\n    dates, set_dates = ui.use_state({\"start\": start_date, \"end\": end_date})\n\n    def filter_by_dates():\n        start = dates[\"start\"]\n        end = dates[\"end\"]\n        return table.where(f\"{time_col} >= start && {time_col} < end\")\n\n    filtered_table = ui.use_memo(filter_by_dates, [table, dates])\n    plot = ui.use_memo(\n        lambda: dx.line(filtered_table, x=\"Timestamp\", y=\"Row\"), [filtered_table]\n    )\n\n    return [\n        ui.date_range_picker(\n            label=\"Dates\", value=dates, on_change=set_dates, max_visible_months=2\n        ),\n        filtered_table,\n        plot,\n    ]\n\n\nSECONDS_IN_DAY = 86400\ntoday = dh_now()\n_table = time_table(\"PT1s\").update_view(\n    [\"Timestamp=today.plusSeconds(SECONDS_IN_DAY*i)\", \"Row=i\"]\n)\ndate_filter = date_table_filter(_table, today, today.plusSeconds(SECONDS_IN_DAY * 10))\n```\n\n----------------------------------------\n\nTITLE: Creating an Interactive Panel with Filtered Chart in Deephaven UI\nDESCRIPTION: This snippet creates an interactive panel that includes a species picker and a density heatmap chart. The chart displays data filtered by the selected species, showing the relationship between SepalLength and SepalWidth.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/tutorial.md#2025-04-17_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n@ui.component\ndef species_panel():\n  species, set_species = ui.use_state()\n  species_picker = ui.picker(\n    species_table,\n    on_change=set_species,\n    selected_key=species,\n    label=\"Current Species\"\n  )\n\n  filtered_table = iris.where(\"Species = species\")\n\n  heatmap = dx.density_heatmap(filtered_table, x=\"SepalLength\", y=\"SepalWidth\")\n  \n  return ui.panel(ui.flex(species_picker, heatmap, direction=\"column\"), title=\"Investigate Species\")\n\nspecies_picker_panel = species_panel()\n```\n\n----------------------------------------\n\nTITLE: Changing Plot Types Based on User Selection in Deephaven\nDESCRIPTION: Demonstrates how to dynamically change plot types in response to user selection. The example uses a picker component to allow users to switch between line, scatter, and area plots for the same dataset.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/add-interactivity/plot-with-deephaven-ui.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.plot.express as dx\nimport deephaven.ui as ui\n\n_stocks = dx.data.stocks().where(\"Sym = `DOG`\")\n\nplot_types = [\"Line\", \"Scatter\", \"Area\"]\n\n\n@ui.component\ndef change_plot_type(table):\n    plot_type, set_plot_type = ui.use_state(\"Line\")\n\n    def create_plot(t, pt):\n        match pt:\n            case \"Line\":\n                return dx.line(t, x=\"Timestamp\", y=\"Price\")\n            case \"Scatter\":\n                return dx.scatter(t, x=\"Timestamp\", y=\"Price\")\n            case \"Area\":\n                return dx.area(t, x=\"Timestamp\", y=\"Price\")\n            case _:\n                return ui.text(f\"Unknown plot type {pt}\")\n\n    plot = ui.use_memo(lambda: create_plot(table, plot_type), [table, plot_type])\n    return [\n        ui.picker(plot_types, selected_key=plot_type, on_change=set_plot_type),\n        plot,\n    ]\n\n\nchange_plot_type_example = change_plot_type(_stocks)\n```\n\n----------------------------------------\n\nTITLE: Adding Illustrated Messages for Empty States in Deephaven UI\nDESCRIPTION: This snippet enhances the interactive species panel by adding an illustrated message when no species is selected. It provides a more user-friendly experience by displaying guidance instead of empty components.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/tutorial.md#2025-04-17_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n@ui.component\ndef species_panel():\n  species, set_species = ui.use_state()\n  species_picker = ui.picker(\n    species_table,\n    on_change=set_species,\n    selected_key=species,\n    label=\"Current Species\"\n  )\n\n  heatmap = ui.illustrated_message(\n      ui.icon(\"vsFilter\"),\n      ui.heading(\"Species required\"),\n      ui.content(\"Select a species to display filtered table and chart.\"),\n      width=\"100%\",\n  )\n\n  if species:\n    filtered_table = iris.where(\"Species = species\")\n\n    heatmap = dx.density_heatmap(filtered_table, x=\"SepalLength\", y=\"SepalWidth\")\n\n  return ui.panel(ui.flex(species_picker, heatmap, direction=\"column\"), title=\"Investigate Species\")\n\nspecies_picker_panel = species_panel()\n```\n\n----------------------------------------\n\nTITLE: Memoizing Plots for Efficient Rendering in Deephaven UI\nDESCRIPTION: Demonstrates how to properly memoize plots in a Deephaven UI component to prevent unnecessary re-creation during renders. The example creates a time table with a dynamic multiplier controlled by a slider and renders it as a line plot.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/add-interactivity/plot-with-deephaven-ui.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import time_table, ui\nimport deephaven.plot.express as dx\n\n\n@ui.component\ndef ui_memo_plot_app():\n    n, set_n = ui.use_state(1)\n\n    result_table = ui.use_memo(\n        lambda: time_table(\"PT1s\").update(f\"y=i*{n}\").reverse(), [n]\n    )\n\n    # memoize the plot\n    plot = ui.use_memo(\n        lambda: dx.line(result_table, x=\"Timestamp\", y=\"y\"), [result_table]\n    )\n\n    return ui.view(\n        ui.flex(\n            ui.slider(value=n, min_value=1, max_value=10, on_change=set_n, label=\"n\"),\n            plot,\n            direction=\"column\",\n            height=\"100%\",\n        ),\n        align_self=\"stretch\",\n        flex_grow=1,\n    )\n\n\nmemo_plot_app = ui_memo_plot_app()\n```\n\n----------------------------------------\n\nTITLE: Creating a 2x2 Grid of Different Plot Types with Deephaven Express\nDESCRIPTION: This code demonstrates how to create four different plots (scatter, violin, pie, and bar) and arrange them in a 2x2 grid using the make_subplots function. The plots show different visualizations of the tips dataset, including relationships between tip amounts, total bills, and factors like gender, day, and smoking status.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/plotly-express/docs/sub-plots.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.plot.express as dx\ntips = dx.data.tips() # import a ticking version of the Tips dataset\n\n# create 4 plots from within make_subplots\ntipping_plots = dx.make_subplots(\n    dx.scatter(tips, x=\"TotalBill\", y=\"Tip\", by=\"Sex\",\n        title=\"Tip amount by total bill\"),\n    dx.violin(tips, y=\"TotalBill\", by=\"Day\",\n        title=\"Total bill distribution by day\"),\n    dx.pie(\n        tips\n        .count_by(\"Count\", by=[\"Sex\", \"Smoker\"])\n        .update_view(\"SmokerStatus = Smoker == `No` ? `non-smoker` : `smoker`\")\n        .update_view(\"SmokerLabel = Sex + ` ` + SmokerStatus\"),\n        names=\"SmokerLabel\", values=\"Count\",\n        title=\"Total bill by sex and smoking status\"),\n    dx.bar(tips\n        .view([\"TotalBill\", \"Tip\", \"Day\"])\n        .avg_by(\"Day\"),\n        x=\"Day\", y=[\"TotalBill\", \"Tip\"],\n        title=\"Average tip as a fraction of total bill\"),\n    rows=2, cols=2, shared_xaxes=False, shared_yaxes=False\n)\n```\n\n----------------------------------------\n\nTITLE: Complete Dashboard Implementation\nDESCRIPTION: The complete code for creating an interactive dashboard with multiple panels, including data loading, component creation, and layout configuration.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/tutorial.md#2025-04-17_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\nimport deephaven.plot.express as dx\nfrom deephaven import agg\n\niris = dx.data.iris()\n\nui_iris = ui.table(\n    iris,\n    reverse=True,\n    front_columns=[\"Timestamp\", \"Species\"],\n    hidden_columns=[\"PetalLength\", \"PetalWidth\", \"SpeciesID\"],\n    density=\"compact\",\n)\n\nscatter_by_species = dx.scatter(iris, x=\"SepalLength\", y=\"SepalWidth\", by=\"Species\")\n\nsepal_text = ui.text(\"SepalLength vs. SepalWidth By Species Panel\")\n\nsepal_flex = ui.flex(ui_iris, scatter_by_species)\n\nsepal_flex_column = ui.flex(sepal_text, sepal_flex, direction=\"column\")\n\nsepal_length_hist = dx.histogram(iris, x=\"SepalLength\", by=\"Species\")\nsepal_width_hist = dx.histogram(iris, x=\"SepalWidth\", by=\"Species\")\n\nsepal_tabs = ui.tabs(\n    ui.tab(sepal_flex, title=\"Sepal Length vs. Sepal Width\"),\n    ui.tab(sepal_length_hist, title=\"Sepal Length Histogram\"),\n    ui.tab(sepal_width_hist, title=\"Sepal Width Histogram\"),\n)\nsepal_flex_tabs = ui.flex(sepal_text, sepal_tabs, direction=\"column\")\n\nabout_markdown = ui.markdown(r\"\"\"\n### Iris Dashboard\n\nExplore the Iris dataset with **deephaven.ui**\n\n- The data powering this dashboard is simulated Iris data\n- Charts are from Deephaven Plotly Express\n- Other components are from **deephaven.ui**\n  \"\"\")\n```\n\n----------------------------------------\n\nTITLE: Creating an Indicator Plot from Variables in Python\nDESCRIPTION: Demonstrates how to create an indicator plot from variables instead of table columns. The example creates a new table with two columns from variables and uses them for the indicator plot.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/plotly-express/docs/indicator.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.plot.express as dx\nfrom deephaven import new_table\nfrom deephaven.column import int_col\n\nmy_value = 10\nmy_reference = 5\n\nmy_table = new_table([\n    int_col(\"MyValue\", [my_value]),\n    int_col(\"MyReference\", [my_reference])\n])\n\nindicator_plot = dx.indicator(my_table, value=\"MyValue\", reference=\"MyReference\")\n```\n\n----------------------------------------\n\nTITLE: Implementing State Management in a Deephaven UI Component\nDESCRIPTION: This snippet demonstrates how to use the ui.use_state hook to manage state in a UI component. It creates a controlled picker where the selected value is tracked and can be updated through the set_species function.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/tutorial.md#2025-04-17_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n@ui.component\ndef species_panel():\n  species, set_species = ui.use_state()\n  species_picker = ui.picker(species_table, on_change=set_species, selected_key=species, label=\"Current Species\")\n\n  return species_picker\n\nspecies_picker_panel = species_panel()\n```\n\n----------------------------------------\n\nTITLE: Interactive Wave Dashboard with Custom Components - Python\nDESCRIPTION: Creates an interactive dashboard with custom components for controlling wave parameters. Implements sliders for amplitude, frequency, and phase control, displaying multiple wave plots.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/docker/data/storage/notebooks/DEMO.md#2025-04-17_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui, time_table\nfrom deephaven.ui import use_memo, use_state\nfrom deephaven.plot.figure import Figure\n\n\ndef use_wave_input():\n    \"\"\"\n    Demonstrating a custom hook.\n    Creates an input panel that controls the amplitude, frequency, and phase for a wave\n    \"\"\"\n    amplitude, set_amplitude = use_state(1.0)\n    frequency, set_frequency = use_state(1.0)\n    phase, set_phase = use_state(1.0)\n\n    input_panel = ui.flex(\n        ui.slider(\n            label=\"Amplitude\",\n            default_value=amplitude,\n            min_value=-100.0,\n            max_value=100.0,\n            on_change=set_amplitude,\n            step=0.1,\n        ),\n        ui.slider(\n            label=\"Frequency\",\n            default_value=frequency,\n            min_value=-100.0,\n            max_value=100.0,\n            on_change=set_frequency,\n            step=0.1,\n        ),\n        ui.slider(\n            label=\"Phase\",\n            default_value=phase,\n            min_value=-100.0,\n            max_value=100.0,\n            on_change=set_phase,\n            step=0.1,\n        ),\n        direction=\"column\",\n    )\n\n    return amplitude, frequency, phase, input_panel\n\n\n@ui.component\ndef multiwave():\n    amplitude, frequency, phase, wave_input = use_wave_input()\n\n    tt = use_memo(lambda: time_table(\"PT1s\").update(\"x=i\"), [])\n    t = use_memo(\n        lambda: tt.update(\n            [\n                f\"y_sin={amplitude}*Math.sin({frequency}*x+{phase})\",\n                f\"y_cos={amplitude}*Math.cos({frequency}*x+{phase})\",\n                f\"y_tan={amplitude}*Math.tan({frequency}*x+{phase})\",\n            ]\n        ),\n        [amplitude, frequency, phase],\n    )\n    p_sin = use_memo(\n        lambda: Figure().plot_xy(series_name=\"Sine\", t=t, x=\"x\", y=\"y_sin\").show(), [t]\n    )\n    p_cos = use_memo(\n        lambda: Figure().plot_xy(series_name=\"Cosine\", t=t, x=\"x\", y=\"y_cos\").show(),\n        [t],\n    )\n    p_tan = use_memo(\n        lambda: Figure().plot_xy(series_name=\"Tangent\", t=t, x=\"x\", y=\"y_tan\").show(),\n        [t],\n    )\n\n    return ui.column(\n        ui.row(\n            ui.stack(\n                ui.panel(wave_input, title=\"Wave Input\"),\n                ui.panel(t, title=\"Wave Table\"),\n                activeItemIndex=0,\n            ),\n            height=25,\n        ),\n        ui.row(\n            ui.stack(ui.panel(p_sin, title=\"Sine\"), width=50),\n            ui.stack(ui.panel(p_cos, title=\"Cosine\"), width=30),\n            ui.stack(ui.panel(p_tan, title=\"Tangent\")),\n        ),\n    )\n\n\nmw = ui.dashboard(multiwave())\n```\n\n----------------------------------------\n\nTITLE: Using Table Data Hooks in UI Components (Python)\nDESCRIPTION: This example demonstrates the use of various hooks (use_table_data, use_row_data, use_cell_data) to access and display table data in UI components.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/describing/ui_with_tables.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import time_table, ui\n\n\n@ui.component\ndef ui_table_data(table):\n    table_data = ui.use_table_data(table)\n    return ui.flex(\n        table,\n        ui.list_view(\n            [ui.item(str(timestamp)) for timestamp in table_data[\"Timestamp\"]],\n            selection_mode=None,\n        ),\n        ui.list_view(\n            [ui.item(x) for x in table_data[\"x\"]],\n            selection_mode=None,\n        ),\n    )\n\n\ntable_data_example = ui_table_data(time_table(\"PT1s\").update(\"x=i\").tail(5))\n\n\n@ui.component\ndef ui_table_first_cell(table):\n    row_data = ui.use_row_data(table)\n    return [\n        ui.heading(\"Latest data\"),\n        ui.text(f\"Timestamp: {row_data['Timestamp']}\"),\n        ui.text(f\"x: {row_data['x']}\"),\n    ]\n\n\ntable_first_cell2 = ui_table_first_cell(time_table(\"PT1s\").update(\"x=i\").reverse())\n\n\n@ui.component\ndef ui_table_first_cell(table):\n    cell_value = ui.use_cell_data(table)\n    is_even = cell_value % 2 == 0\n    return [\n        ui.heading(f\"The first cell value is {cell_value}\"),\n        ui.text(f\"Is {cell_value} even?\", \" ✅\" if is_even else \" ❌\"),\n    ]\n\n\ntable_first_cell2 = ui_table_first_cell(\n    time_table(\"PT1s\").update(\"x=i\").drop_columns(\"Timestamp\").tail(1)\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Histogram Plots in Python with Deephaven\nDESCRIPTION: Demonstrates creating basic histogram plots using both x and y orientations. Shows how to load iris dataset and filter for specific species data.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/plotly-express/docs/histogram.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.plot.express as dx\niris = dx.data.iris()\n\n# subset to get specific species\nsetosa = iris.where(\"Species == `setosa`\")\n\n# control the plot orientation using `x` or `y`\nhist_plot_x = dx.histogram(setosa, x=\"SepalLength\")\nhist_plot_y = dx.histogram(setosa, y=\"SepalLength\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Treemap Plot with Deephaven Express\nDESCRIPTION: This snippet demonstrates how to create a basic treemap plot using Deephaven's plotting library. It loads the gapminder dataset, filters to the most recent year, computes the total population for each continent, and visualizes the data as a treemap.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/plotly-express/docs/treemap.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.plot.express as dx\ngapminder = dx.data.gapminder()\n\n# create table of only the most recent year of data, compute total population for each continent\ngapminder_recent = (\n    gapminder\n    .last_by(\"Country\")\n    .view([\"Continent\", \"Pop\"])\n    .sum_by(\"Continent\")\n    .update(\"World = `World`\")\n)\n\ntreemap_plot = dx.treemap(gapminder_recent, names=\"Continent\", values=\"Pop\", parents=\"World\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Real-time Line Plot with Deephaven Plotly Express\nDESCRIPTION: Example demonstrating how to create a real-time line plot using Deephaven Plotly Express. This imports the library, creates a dataset using built-in demo data, and generates a line plot of stock prices over time with colors assigned by stock symbol.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/plotly-express/docs/README.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.plot.express as dx\n\n# Deephaven plotly express includes a number of generated data sets for examples\nmy_table = dx.data.stocks()\n\n# Create a line plot, and assign colors by distinct values in the `sym` column\nmy_plot = dx.line(table=my_table, x=\"Timestamp\", y=\"Price\", color=\"Sym\")\n```\n\n----------------------------------------\n\nTITLE: Optimizing Dashboard Performance with ui.use_memo in Deephaven Python\nDESCRIPTION: This code demonstrates how to optimize dashboard performance by using ui.use_memo to cache expensive calculations like heatmap creation. The heatmap is only recreated when the species selection changes, improving rendering efficiency.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/tutorial.md#2025-04-17_snippet_24\n\nLANGUAGE: python\nCODE:\n```\ndef create_heatmap(species):\n    heatmap = ui.illustrated_message(\n        ui.icon(\"vsFilter\"),\n        ui.heading(\"Species required\"),\n        ui.content(\"Select a species to display filtered table and chart.\"),\n        width=\"100%\",\n    )\n\n    if species:\n        filtered_table = iris.where(\"Species = species\")\n        heatmap = dx.density_heatmap(filtered_table, x=\"SepalLength\", y=\"SepalWidth\")\n\n    return heatmap\n\n\n@ui.component\ndef create_species_dashboard():\n    species, set_species = ui.use_state()\n    species_picker = ui.picker(\n        species_table,\n        on_change=set_species,\n        selected_key=species,\n        label=\"Current Species\",\n    )\n\n    heatmap = ui.use_memo(lambda: create_heatmap(species), [species])\n\n    badges = summary_badges(species) if species else None\n\n    species_panel = ui.panel(\n        ui.flex(species_picker, badges, heatmap, direction=\"column\"),\n        title=\"Investigate Species\",\n    )\n\n    sepal_panel = create_sepal_panel(set_species)\n\n    return ui.column(\n        ui.row(about_panel, iris_agg_stack, height=1),\n        ui.row(sepal_panel, species_panel, height=2),\n    )\n\n\niris_species_dashboard_final = ui.dashboard(create_species_dashboard())\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering with None Return\nDESCRIPTION: Demonstrates how to conditionally render nothing by returning None when items are packed.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/describing/conditional_rendering.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef item(name, is_packed):\n    if is_packed:\n        return None\n    return ui.text(\"- \", name)\n\n@ui.component\ndef packing_list():\n    return ui.flex(\n        ui.heading(\"Packing list\"),\n        item(\"Clothes\", is_packed=True),\n        item(\"Shoes\", is_packed=True),\n        item(\"Wallet\", is_packed=False),\n        direction=\"column\",\n    )\n\nmy_packing_list = packing_list()\n```\n\n----------------------------------------\n\nTITLE: Creating a Dashboard Layout with Nested Components in Python\nDESCRIPTION: This snippet demonstrates how to create a dashboard layout using ui.dashboard with nested rows, columns, stacks, and panels. It shows the structure of a complex layout with header, footer, sidebars, and main content areas.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/creating-layouts/layout-overview.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\ndashboard_example = ui.dashboard(\n    ui.column(\n        ui.panel(\"Header\", title=\"Header\"),\n        ui.row(\n            ui.panel(\"Left Sidebar\", title=\"Left Sidebar\"),\n            ui.stack(\n                ui.panel(\"Main Content\", title=\"Main Content\"),\n                ui.panel(\"Sub Content\", title=\"Sub Content\"),\n                width=70,\n            ),\n            ui.panel(\"Right Sidebar\", title=\"Right Sidebar\"),\n        ),\n        ui.panel(\"Footer\", title=\"Footer\"),\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Using use_state Hook\nDESCRIPTION: This snippet demonstrates replacing a regular variable with the use_state hook. It shows the syntax for declaring a state variable and its setter function, which are used to retain data between renders and trigger re-renders.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/add-interactivity/state-a-components-memory.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nindex, set_index = ui.use_state(0)\n```\n\n----------------------------------------\n\nTITLE: Implementing Table Filtering with Date Range Picker\nDESCRIPTION: Creates a component that uses a date range picker to filter time-based table data.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/date_range_picker.md#2025-04-17_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven.time import dh_now\nfrom deephaven import time_table, ui\n\n@ui.component\ndef date_table_filter(table, start_date, end_date, time_col=\"Timestamp\"):\n    dates, set_dates = ui.use_state({\"start\": start_date, \"end\": end_date})\n    start = dates[\"start\"]\n    end = dates[\"end\"]\n    return [\n        ui.date_range_picker(label=\"Dates\", value=dates, on_change=set_dates),\n        table.where(f\"{time_col} >= start && {time_col} < end\"),\n    ]\n\nSECONDS_IN_DAY = 86400\ntoday = dh_now()\n_table = time_table(\"PT1s\").update_view(\n    [\"Timestamp=today.plusSeconds(SECONDS_IN_DAY*i)\", \"Row=i\"]\n)\ndate_filter = date_table_filter(_table, today, today.plusSeconds(SECONDS_IN_DAY * 10))\n```\n\n----------------------------------------\n\nTITLE: Implementing Tabbed Interface with ui.tabs\nDESCRIPTION: Creates histogram visualizations and organizes them with the scatter plot into a tabbed interface, allowing users to switch between different data views.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/tutorial.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nsepal_length_hist = dx.histogram(iris, x=\"SepalLength\", by=\"Species\")\nsepal_width_hist = dx.histogram(iris, x=\"SepalWidth\", by=\"Species\")\n\nsepal_tabs = ui.tabs(\n    ui.tab(sepal_flex, title=\"Sepal Length vs. Sepal Width\"),\n    ui.tab(sepal_length_hist, title=\"Sepal Length Histogram\"),\n    ui.tab(sepal_width_hist, title=\"Sepal Width Histogram\"),\n)\nsepal_flex_tabs = ui.flex(sepal_text, sepal_tabs, direction=\"column\")\n```\n\n----------------------------------------\n\nTITLE: Creating Summary Badges with UI Hooks in Deephaven Python\nDESCRIPTION: This code creates a custom component that uses UI hooks to display min, max, and average values for Iris dataset features. It filters tables by selected species and formats the values as badges to draw attention to key statistics.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/tutorial.md#2025-04-17_snippet_23\n\nLANGUAGE: python\nCODE:\n```\n@ui.component\ndef summary_badges(species):\n    # Filter the tables to the selected species\n    species_min = iris_min.where(\"Species=species\")\n    species_max = iris_max.where(\"Species=species\")\n    species_avg = iris_avg.where(\"Species=species\")\n\n    # Pull the desired columns from the tables before using the hooks\n    sepal_length_min = ui.use_cell_data(species_min.view([\"SepalLength\"]))\n    sepal_width_min = ui.use_cell_data(species_min.view([\"SepalWidth\"]))\n    sepal_length_max = ui.use_cell_data(species_max.view([\"SepalLength\"]))\n    sepal_width_max = ui.use_cell_data(species_max.view([\"SepalWidth\"]))\n    sepal_length_avg = ui.use_cell_data(species_avg.view([\"SepalLength\"]))\n    sepal_width_avg = ui.use_cell_data(species_avg.view([\"SepalWidth\"]))\n\n    # format the values to 3 decimal places\n    # set flex_grow to 0 to prevent the badges from growing\n    return ui.flex(\n        ui.badge(f\"SepalLength Min: {sepal_length_min:.3f}\", variant=\"info\"),\n        ui.badge(f\"SepalLength Max: {sepal_length_max:.3f}\", variant=\"info\"),\n        ui.badge(f\"SepalLength Avg: {sepal_length_avg:.3f}\", variant=\"info\"),\n        ui.badge(f\"SepalWidth Min: {sepal_width_min:.3f}\", variant=\"info\"),\n        ui.badge(f\"SepalWidth Max: {sepal_width_max:.3f}\", variant=\"info\"),\n        ui.badge(f\"SepalWidth Avg: {sepal_width_avg:.3f}\", variant=\"info\"),\n        flex_grow=0,\n    )\n\n\n@ui.component\ndef create_species_dashboard():\n    species, set_species = ui.use_state()\n    species_picker = ui.picker(\n        species_table,\n        on_change=set_species,\n        selected_key=species,\n        label=\"Current Species\",\n    )\n\n    heatmap = ui.illustrated_message(\n        ui.icon(\"vsFilter\"),\n        ui.heading(\"Species required\"),\n        ui.content(\"Select a species to display filtered table and chart.\"),\n        width=\"100%\",\n    )\n\n    badges = None\n\n    if species:\n        filtered_table = iris.where(\"Species = species\")\n\n        heatmap = dx.density_heatmap(filtered_table, x=\"SepalLength\", y=\"SepalWidth\")\n\n        badges = summary_badges(species)\n\n    species_panel = ui.panel(\n        ui.flex(species_picker, badges, heatmap, direction=\"column\"),\n        title=\"Investigate Species\",\n    )\n\n    sepal_panel = create_sepal_panel(set_species)\n\n    return ui.column(\n        ui.row(about_panel, iris_agg_stack, height=1),\n        ui.row(sepal_panel, species_panel, height=2),\n    )\n\n\niris_species_dashboard_badge = ui.dashboard(create_species_dashboard())\n```\n\n----------------------------------------\n\nTITLE: Creating a Nested Treemap Plot with Branch Values in Deephaven\nDESCRIPTION: This example shows how to create a nested treemap plot with hierarchical data organization. It demonstrates using the 'branchvalues' parameter with 'total' when the values column equals the sum of its children. The code creates a three-level hierarchy (world → continents → countries).\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/plotly-express/docs/treemap.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.plot.express as dx\nfrom deephaven import merge\n\ndata = dx.data.gapminder(ticking=False)\n\ncountries = data.last_by(\"Country\").view([\"Name=Country\", \"Pop\", \"Parent=Continent\"])\n\n# Sum country population by continent\ncontinents = (\n    countries.drop_columns(\"Name\")\n    .sum_by(\"Parent\")\n    .view([\"Name=Parent\", \"Pop\", \"Parent=`World`\"])\n)\n\n# Sum continent population\nworld = (\n    continents.view(\"Pop\").sum_by().view([\"Name=`World`\", \"Pop\", \"Parent=(String)null\"])\n)\n\nmerged_gapminder = merge([world, continents, countries])\n\n# Since the values column is equal to the sum of it's children, set branchvalues to \"total\"\ntreemap_nested = dx.treemap(\n    merged_gapminder, names=\"Name\", values=\"Pop\", parents=\"Parent\", branchvalues=\"total\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Reusable UI Components with React-like Syntax\nDESCRIPTION: Implements a filterable table component using React-like hooks syntax. The component takes a source table and column name, and provides a text filter input that filters the table.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/DESIGN.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.ui as ui\n\n# @ui.component decorator marks a function as a \"component\" function\n# By adding this decorator, wraps the function such that \"hooks\" can be used within the function (effectively similar to `React.createElement`). Hooks are functions following the convention `use_*`, can only be used within a `@ui.component` context\n@ui.component\ndef text_filter_table(source: Table, column: str):\n    # The value of the text filter is entirely separate from the text input field definition\n    value, set_value = ui.use_state(\"\")\n\n    # TODO: Should be using QST/filters here instead, e.g. https://github.com/deephaven/deephaven-core/issues/3784\n    t = source.where(f\"{column}=`{value}`\")\n\n    # Return a column that has the text input, then the table below it\n    return ui.flex(\n        [\n            ui.text_input(\n                value=value, on_change=lambda event: set_value(event[\"value\"])\n            ),\n            t,\n        ]\n    )\n```\n\n----------------------------------------\n\nTITLE: Configuring Dashboard with Varying Stack Widths in Python\nDESCRIPTION: Shows how to create a dashboard with stacks of different widths using the Deephaven UI library.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/dashboard.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\ndash_stack_widths = ui.dashboard(\n    ui.row(ui.stack(ui.panel(\"A\", title=\"A\"), width=70), ui.panel(\"B\", title=\"B\"))\n)\n```\n\n----------------------------------------\n\nTITLE: Interactive Dashboard Layout in Python\nDESCRIPTION: Shows how to create a complete interactive dashboard with custom layout and components.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/DESIGN.md#2025-04-17_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven.parquet import read\nfrom deephaven.plot.selectable_dataset import one_click\nimport deephaven.plot.express as dx\nfrom deephaven import dtypes as dht\n\n@ui.component\ndef my_oc_dash():\n    path, set_path = use_state(\"/data/stocks.parquet\")\n    source = use_memo(lambda: read(path), [path])\n    oc = use_memo(lambda: one_click(t=source, by=[\"Sym\"]), [path])\n    plot = use_memo(lambda: dx.line(oc, x=\"Timestamp\", y=\"Price\"), [oc])\n    sym_filter = ui.dropdown_filter(source=source, source_column=\"Sym\")\n    return ui.dashboard(\n        ui.column(\n            ui.row(ui.text_input(value=path, on_change=set_path), sym_filter), plot\n        )\n    )\n\nd = my_oc_dash()\n```\n\n----------------------------------------\n\nTITLE: Rendering Basic Random Number Generator in Deephaven UI - Python\nDESCRIPTION: Demonstrates a basic Deephaven UI application that generates and displays random numbers. Shows component composition with a main app component and a random number generator component.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/describing/your-ui-as-a-tree.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\nimport random\n\n@ui.component\ndef random_generator():\n    num, set_num = ui.use_state()\n\n    def generate():\n        set_num(random.random())\n\n    return ui.flex(\n        ui.text(f\"Random Number: {num}\"),\n        ui.button(\"Generate random number\", on_press=generate),\n        direction=\"column\",\n    )\n\n@ui.component\ndef app():\n    return ui.flex(\n        ui.heading(\"Random Number Generator\"),\n        random_generator(),\n        direction=\"column\",\n    )\n\nmy_app = app()\n```\n\n----------------------------------------\n\nTITLE: Optimized Todo List With Memoization\nDESCRIPTION: Implements an optimized version of the todo list using use_memo to cache filtered results and improve performance.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/hooks/use_memo.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\nimport time\n\ntheme_options = [\"accent-200\", \"red-200\", \"green-200\"]\n\n@ui.component\ndef ui_todo_list(todos: list[str], search: str, theme: str):\n    def filter_todos():\n        # Simulate delay based on filter length\n        time.sleep(min(len(search) + 1, 3))\n        return [todo for todo in todos if search in todo]\n\n    filtered_todos = ui.use_memo(filter_todos, [todos, search])\n\n    return ui.view(\n        ui.flex(\n            ui.text(f\"Showing {len(filtered_todos)} todos\"),\n            *[ui.checkbox(todo) for todo in filtered_todos],\n            direction=\"column\",\n        ),\n        background_color=theme,\n    )\n\n@ui.component\ndef ui_todo_app(todos: list[str]):\n    search, set_search = ui.use_state(\"\")\n    theme, set_theme = ui.use_state(theme_options[0])\n\n    return [\n        ui.text_field(value=search, label=\"Search\", on_change=set_search),\n        ui.picker(\n            *theme_options, label=\"Theme\", selected_key=theme, on_change=set_theme\n        ),\n        ui_todo_list(todos, search, theme),\n    ]\n\ntodo_app = ui_todo_app([\"Do grocery shopping\", \"Walk the dog\", \"Do laundry\"])\n```\n\n----------------------------------------\n\nTITLE: Creating an Interactive Histogram with Range Controls\nDESCRIPTION: Implements an interactive histogram component with sliders to control the bin count and data range. Uses use_memo hook to efficiently recalculate the histogram when control values change.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/docker/data/storage/notebooks/DEMO.md#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n@ui.component\ndef hist_demo(source, column):\n    bin_count, set_bin_count = ui.use_state(10)\n    hist_range, set_hist_range = ui.use_state({\"start\": 0, \"end\": 100000})\n\n    p = ui.use_memo(\n        lambda: dx.histogram(\n            source.where(\n                f\"{column}>={hist_range['start']} && {column}<={hist_range['end']}\"\n            ),\n            x=column,\n            nbins=bin_count,\n        ),\n        [bin_count, hist_range, source, column],\n    )\n\n    return [\n        ui.flex(\n            ui.slider(label=\"Bin Count\", value=bin_count, on_change=set_bin_count),\n            ui.range_slider(\n                label=\"Range\",\n                value=hist_range,\n                on_change=set_hist_range,\n                min_value=0,\n                max_value=100000,\n            ),\n            gap=20,\n            marginX=20,\n            marginTop=10,\n        ),\n        p,\n    ]\n\n\nresult = hist_demo(stocks, \"size\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Cross-Dependent Range Sliders\nDESCRIPTION: Creates two interconnected range sliders where the maximum of the first slider depends on the second slider's value, and the minimum of the second slider depends on the first slider's value. Updates automatically when either slider is adjusted.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/DESIGN.md#2025-04-17_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.ui as ui\n\n\n@ui.component\ndef two_sliders(min=0, max=10000):\n    lo, set_lo = use_state(min)\n    hi, set_hi = use_state(max)\n\n    # Use the `hi` currently set as the `max`. Will update automatically as `hi` is adjusted\n    s1 = ui.slider(value=lo, min=min, max=hi, on_change=set_lo)\n\n    # Use the `lo` currently set as the `min`. Will update automatically as `lo` is adjusted\n    s2 = ui.slider(value=hi, min=lo, max=max, on_change=set_hi)\n\n    return [s1, s2]\n```\n\n----------------------------------------\n\nTITLE: Creating a 2x2 Dashboard Layout in Python\nDESCRIPTION: Demonstrates how to create a 2x2 grid dashboard layout using the Deephaven UI library.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/dashboard.md#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\ndash_2x2 = ui.dashboard(\n    ui.row(\n        ui.column(ui.panel(\"A\", title=\"A\"), ui.panel(\"C\", title=\"C\")),\n        ui.column(ui.panel(\"B\", title=\"B\"), ui.panel(\"D\", title=\"D\")),\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Tab Switcher Implementation with use_column_data\nDESCRIPTION: Shows how to create dynamic tabs based on unique values in a table column using use_column_data and use_memo hooks. Filters table data based on selected tab.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/hooks/use_column_data.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\nfrom deephaven.table import Table\nfrom deephaven.plot import express as dx\n\n@ui.component\ndef ui_table_tabs(source: Table, column_name: str):\n    table_options = ui.use_memo(\n        lambda: source.select_distinct(\"Exchange\"), [source, column_name]\n    )\n    exchanges = ui.use_column_data(table_options)\n\n    return ui.tabs(\n        *[\n            ui.tab(source.where(f\"{column_name}=`{exchange}`\"), title=exchange)\n            for exchange in exchanges\n        ]\n    )\n\n_stocks = dx.data.stocks()\ntable_tabs = ui_table_tabs(_stocks, \"Exchange\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Groupable Table Component\nDESCRIPTION: Implements a table component that allows filtering by stock symbol and toggling between grouped and ungrouped views. Uses text field for input and toggle button for grouping control.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/docker/data/storage/notebooks/DEMO.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import agg\n\n\n@ui.component\ndef groupable_table(source, column, aggs, default_value=\"\"):\n    value, set_value = ui.use_state(default_value)\n    grouped, set_grouped = ui.use_state(False)\n\n    t = source.where(f\"{column}.contains(`{value.upper()}`)\")\n\n    return ui.flex(\n        ui.flex(\n            ui.text_field(\n                value=value,\n                on_change=set_value,\n                label=\"Sym\",\n                label_position=\"side\",\n            ),\n            ui.toggle_button(ui.text(\"Group\"), on_change=set_grouped),\n            gap=10,\n            margin=4,\n        ),\n        t if not grouped else t.rollup(aggs=aggs, by=column),\n        direction=\"column\",\n        flex_grow=1,\n    )\n\n\nresult = groupable_table(\n    stocks, \"sym\", agg.avg(cols=[\"size\", \"price\", \"dollars\"]), \"fish\"\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Iris Dashboard Components in Python\nDESCRIPTION: Sets up the main components of the Iris dashboard, including panels for sepal data, aggregated statistics, and an about section. It also creates aggregated views of the Iris dataset.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/tutorial.md#2025-04-17_snippet_25\n\nLANGUAGE: Python\nCODE:\n```\nsepal_panel = ui.panel(sepal_flex_tabs, title=\"Sepal Panel\")\nabout_panel = ui.panel(about_markdown, title=\"About\")\n\niris_avg = iris.agg_by([agg.avg(cols=[\"SepalLength\", \"SepalWidth\", \"PetalLength\", \"PetalWidth\"])], by=[\"Species\"])\niris_max = iris.agg_by([agg.max_(cols=[\"SepalLength\", \"SepalWidth\", \"PetalLength\", \"PetalWidth\"])], by=[\"Species\"])\niris_min = iris.agg_by([agg.min_(cols=[\"SepalLength\", \"SepalWidth\", \"PetalLength\", \"PetalWidth\"])], by=[\"Species\"])\n\nui_iris_avg = ui.panel(iris_avg, title=\"Average\")\nui_iris_max = ui.panel(iris_max, title=\"Max\")\nui_iris_min = ui.panel(iris_min, title=\"Min\")\n\niris_agg_stack = ui.stack(ui_iris_avg, ui_iris_max, ui_iris_min)\n\nspecies_table = iris.view(\"Species\").select_distinct()\n```\n\n----------------------------------------\n\nTITLE: Implementing Boolean State with UI Components in Python\nDESCRIPTION: Example showing how to use use_boolean hook with various UI components including checkbox, switch, and buttons. Demonstrates state management and different ways to modify the boolean value.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/hooks/use_boolean.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef ui_boolean_example():\n    value, set_value = ui.use_boolean()\n\n    return [\n        ui.text(f\"{value}\"),\n        ui.checkbox(\"My value\", is_selected=value, on_change=set_value),\n        ui.switch(\"My value\", is_selected=value, on_change=set_value),\n        ui.button(\"Set True\", on_press=set_value.on),\n        ui.button(\"Set False\", variant=\"negative\", on_press=set_value.off),\n        ui.button(\"Toggle\", variant=\"secondary\", on_press=set_value.toggle),\n    ]\n\n\nmy_boolean_example = ui_boolean_example()\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Tabs with Content in Python\nDESCRIPTION: Demonstrates how to create basic tabs using ui.tabs and ui.tab components, including text and table content.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/tabs.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui, empty_table\n\nmy_tabs_basic = ui.tabs(\n    ui.tab(\"Hello World!\", title=\"Tab 1\"),\n    ui.tab(\n        ui.flex(\n            \"Hello World with table!\",\n            empty_table(10).update(\"I=i\"),\n        ),\n        title=\"Tab 2\",\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Tabbed Panels in Deephaven UI - Python\nDESCRIPTION: Demonstrates how to create a tabbed panel interface with multiple tabs showing filtered and unfiltered table data. Uses ui.tabs method to create tabs for different views of stock data.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/docker/data/storage/notebooks/DEMO.md#2025-04-17_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n@ui.component\ndef table_tabs(source):\n    return ui.tabs(\n        ui.tab_list(\n            ui.item(\"Unfiltered\", key=\"Unfiltered\"),\n            ui.item(ui.icon(\"vsGithubAlt\"), ui.text(\"CAT\"), key=\"CAT\"),\n            ui.item(\"DOG\", key=\"DOG\"),\n        ),\n        ui.tab_panels(\n            ui.item(source, key=\"Unfiltered\"),\n            ui.item(source.where(\"sym=`CAT`\"), key=\"CAT\"),\n            ui.item(source.where(\"sym=`DOG`\"), key=\"DOG\"),\n        ),\n        flex_grow=1,\n    )\n\n\nresult = table_tabs(stocks)\n```\n\n----------------------------------------\n\nTITLE: Creating a Clock Component with Periodic Updates in Deephaven UI\nDESCRIPTION: Demonstrates a more complex example with an auto-updating clock that preserves child component state. Uses threading for periodic updates and use_effect for lifecycle management.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/add-interactivity/render-cycle.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport time, threading\nfrom deephaven import ui\n\n\n@ui.component\ndef clock(t):\n    return [ui.heading(t), ui.text_field()]\n\n\n@ui.component\ndef clock_wrapper():\n    clock_time, set_clock_time = ui.use_state(time.ctime())\n    is_cancelled = False\n\n    def periodic_update():\n        if is_cancelled:\n            return\n        set_clock_time(time.ctime())\n        threading.Timer(1, periodic_update).start()\n\n    def start_update():\n        periodic_update()\n\n        def cancel_timer():\n            nonlocal is_cancelled\n            is_cancelled = True\n\n        return cancel_timer\n\n    start_timer = ui.use_callback(start_update, [set_clock_time])\n    ui.use_effect(start_timer, [])\n\n    return clock(clock_time)\n\n\nclock_example = clock_wrapper()\n```\n\n----------------------------------------\n\nTITLE: Implementing Form State Management with Deepcopy in Python\nDESCRIPTION: Creates a form component that manages nested state for contact information using deepcopy for immutable state updates. The component includes text fields for first name, last name, email, and phone number, with separate handlers for each field that create deep copies of the state before updating.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/add-interactivity/update-dictionaries-in-state.md#2025-04-17_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport copy\nfrom deephaven import ui\n\n\n@ui.component\ndef form():\n    person, set_person = ui.use_state(\n        {\n            \"first_name\": \"John\",\n            \"last_name\": \"Doe\",\n            \"contact\": {\"email\": \"jondoe@domain.com\", \"phone\": \"555-5555\"},\n        }\n    )\n\n    def handle_first_name_change(value):\n        person_copy = copy.deepcopy(person)\n        person_copy[\"first_name\"] = value\n        set_person(person_copy)\n\n    def handle_last_name_change(value):\n        person_copy = copy.deepcopy(person)\n        person_copy[\"last_name\"] = value\n        set_person(person_copy)\n\n    def handle_email_change(value):\n        person_copy = copy.deepcopy(person)\n        person_copy[\"contact\"][\"email\"] = value\n        set_person(person_copy)\n\n    def handle_phone_change(value):\n        person_copy = copy.deepcopy(person)\n        person_copy[\"contact\"][\"phone\"] = value\n        set_person(person_copy)\n\n    return [\n        ui.text_field(\n            label=\"First name\",\n            value=person[\"first_name\"],\n            on_change=handle_first_name_change,\n        ),\n        ui.text_field(\n            label=\"Last name\",\n            value=person[\"last_name\"],\n            on_change=handle_last_name_change,\n        ),\n        ui.text_field(\n            label=\"Email\",\n            value=person[\"contact\"][\"email\"],\n            on_change=handle_email_change,\n        ),\n        ui.text_field(\n            label=\"Phone\",\n            value=person[\"contact\"][\"phone\"],\n            on_change=handle_phone_change,\n        ),\n        ui.text(\n            f'{person[\"first_name\"]} {person[\"last_name\"]} {person[\"contact\"][\"email\"]} {person[\"contact\"][\"phone\"]}'\n        ),\n    ]\n\n\nform_example = form()\n```\n\n----------------------------------------\n\nTITLE: Creating Icon Buttons with Deephaven UI\nDESCRIPTION: Creates two button groups: one with icons and labels, and another with icon-only buttons that include accessibility labels. Demonstrates various VS Code icons and proper accessibility practices.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/action_button.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef ui_button_group():\n    iconAndLabel = ui.button_group(\n        ui.action_button(\"Restart\", ui.icon(\"vsDebugRestart\")),\n        ui.action_button(\"Record\", ui.icon(\"vsRecord\")),\n        ui.action_button(\"Play\", ui.icon(\"vsDebugPause\")),\n        ui.action_button(\"Pause\", ui.icon(\"vsDebugStart\")),\n        ui.action_button(\"Edit\", ui.icon(\"vsEdit\")),\n        ui.action_button(\"Configure\", ui.icon(\"vsGear\")),\n    )\n    iconOnly = ui.button_group(\n        ui.action_button(ui.icon(\"vsDebugRestart\"), aria_label=\"Restart\"),\n        ui.action_button(ui.icon(\"vsRecord\"), aria_label=\"Record\"),\n        ui.action_button(ui.icon(\"vsDebugPause\"), aria_label=\"Play\"),\n        ui.action_button(ui.icon(\"vsDebugStart\"), aria_label=\"Pause\"),\n        ui.action_button(ui.icon(\"vsEdit\"), aria_label=\"Edit\"),\n        ui.action_button(ui.icon(\"vsGear\"), aria_label=\"Configure\"),\n    )\n    return [iconAndLabel, iconOnly]\n\n\nmy_action_buttons = ui_button_group()\n```\n\n----------------------------------------\n\nTITLE: Creating Violin Plot with Categorical Grouping\nDESCRIPTION: Creates a violin plot showing life expectancy distribution by continent, similar to box plot but with density estimation.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/plotly-express/docs/plot-by.md#2025-04-17_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.plot.express as dx\ngapminder = dx.data.gapminder() # import ticking Gapminder dataset\n\n# filter by most recent instance of each country\nrecent_gapminder = gapminder.last_by(\"Country\")\n\n# the violins may be too thin to be useful\nlife_exp_violin = dx.violin(recent_gapminder, x=\"LifeExp\", by=\"Continent\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Stacked Dashboard Layout with Deephaven UI\nDESCRIPTION: This snippet demonstrates how to create a stacked dashboard layout using ui.stack for comparing aggregated statistics from the Iris dataset. It aggregates average, maximum, and minimum values for measurements grouped by Species.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/tutorial.md#2025-04-17_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import agg\n\niris_avg = iris.agg_by([agg.avg(cols=[\"SepalLength\", \"SepalWidth\", \"PetalLength\", \"PetalWidth\"])], by=[\"Species\"])\niris_max = iris.agg_by([agg.max_(cols=[\"SepalLength\", \"SepalWidth\", \"PetalLength\", \"PetalWidth\"])], by=[\"Species\"])\niris_min = iris.agg_by([agg.min_(cols=[\"SepalLength\", \"SepalWidth\", \"PetalLength\", \"PetalWidth\"])], by=[\"Species\"])\n\nui_iris_avg = ui.panel(iris_avg, title=\"Average\")\nui_iris_max = ui.panel(iris_max, title=\"Max\")\nui_iris_min = ui.panel(iris_min, title=\"Min\")\n\niris_agg_stack = ui.stack(ui_iris_avg, ui_iris_max, ui_iris_min)\n  \niris_dashboard_stack = ui.dashboard(iris_agg_stack)\n```\n\n----------------------------------------\n\nTITLE: Creating a Column-based Dashboard Layout\nDESCRIPTION: Arranges the about panel and sepal panel vertically in a stacked layout using ui.column within the dashboard.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/tutorial.md#2025-04-17_snippet_11\n\nLANGUAGE: python\nCODE:\n```\niris_dashboard_column = ui.dashboard(ui.column(about_panel, sepal_panel))\n```\n\n----------------------------------------\n\nTITLE: Complete Multithreaded Table Update Solution\nDESCRIPTION: Final implementation combining use_render_queue and use_liveness_scope for proper table state management in a multithreaded context.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/add-interactivity/update-tables-in-state.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui, time_table\nimport threading\n\n@ui.component\ndef ui_resetable_table():\n    render_queue = ui.use_render_queue()\n    table, set_table = ui.use_state(lambda: time_table(\"PT1s\"))\n    reset_table = ui.use_liveness_scope(lambda: set_table(time_table(\"PT1s\")), [])\n\n    def do_work():\n        render_queue(reset_table)\n\n    def start_background_thread():\n        threading.Thread(target=do_work).start()\n\n    return [\n        ui.action_button(\n            \"Reset\",\n            on_press=start_background_thread,\n        ),\n        table,\n    ]\n\nresetable_table = ui_resetable_table()\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Timeline Plot with Deephaven Plot Express\nDESCRIPTION: This snippet demonstrates how to create a basic timeline plot using Deephaven Plot Express. It visualizes the duration of different jobs using start and end timestamps.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/plotly-express/docs/timeline.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.plot.express as dx\njobs = dx.data.jobs()\n\ntimeline_plot = dx.timeline(jobs, x_start=\"StartTime\", x_end=\"EndTime\", y=\"Job\")\n```\n\n----------------------------------------\n\nTITLE: Combining Filters and Partitions for Interactive Plotting in Deephaven\nDESCRIPTION: Shows two approaches to combining filtering and partitioning for interactive plots: partitioning first and then filtering, or filtering first and then partitioning. These techniques allow for efficient 'one-click plot by' behavior.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/add-interactivity/plot-with-deephaven-ui.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.plot.express as dx\nimport deephaven.ui as ui\n\n_stocks = dx.data.stocks()\n\n\n@ui.component\ndef partition_then_filter(table, by, initial_value):\n    \"\"\"\n    Partition the table by both passed columns, then filter it by the value entered by the user\n    \"\"\"\n    text, set_text = ui.use_state(initial_value)\n    partitioned_table = ui.use_memo(lambda: table.partition_by(by), [table, by])\n    filtered = ui.use_memo(\n        lambda: partitioned_table.filter(f\"{by[0]} = `{text.upper()}`\"),\n        [text, partitioned_table],\n    )\n    plot = ui.use_memo(\n        lambda: dx.line(filtered, x=\"Timestamp\", y=\"Price\", by=[f\"{by[1]}\"]),\n        [filtered, by],\n    )\n    return [\n        ui.text_field(value=text, on_change=set_text),\n        plot,\n    ]\n\n\n@ui.component\ndef where_then_partition(table, by, initial_value):\n    \"\"\"\n    Filter the table by the value entered by the user, then re-partition it by the second passed column\n    \"\"\"\n    text, set_text = ui.use_state(initial_value)\n    filtered = ui.use_memo(\n        lambda: table.where(f\"{by[0]} = `{text.upper()}`\"), [text, table]\n    )\n    plot = ui.use_memo(\n        lambda: dx.line(filtered, x=\"Timestamp\", y=\"Price\", by=[f\"{by[1]}\"]),\n        [filtered, by],\n    )\n    return [ui.text_field(value=text, on_change=set_text), plot]\n\n\n# outputs the same thing, done two different ways depending on how you want the work done\nptf = partition_then_filter(_stocks, [\"Sym\", \"Exchange\"], \"DOG\")\nwtp = where_then_partition(_stocks, [\"Sym\", \"Exchange\"], \"DOG\")\n```\n\n----------------------------------------\n\nTITLE: Adding Text Component with ui.text\nDESCRIPTION: Creates a basic text component to add explanatory text that accompanies the scatter plot and table displays.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/tutorial.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nsepal_text = ui.text(\"SepalLength vs. SepalWidth By Species\")\n```\n\n----------------------------------------\n\nTITLE: Exporting UI Component in Deephaven Core (Python)\nDESCRIPTION: Demonstrates how to create and export a reusable UI component in Deephaven Core. The component creates a table of contents using various UI elements.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/describing/importing_and_exporting_components.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# file1.py\nfrom deephaven import ui\n\n\n@ui.component\ndef table_of_contents():\n    return ui.flex(\n        ui.heading(\"My First Component\"),\n        ui.text(\"- Components: UI Building Blocks\"),\n        ui.text(\"- Defining a Component\"),\n        ui.text(\"- Using a Component\"),\n        direction=\"column\",\n    )\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Dashboard with Rows and Columns in Python\nDESCRIPTION: Demonstrates how to create a simple dashboard layout using rows and columns with the Deephaven UI library.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/dashboard.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\nmy_dash = ui.dashboard(\n    ui.row(\n        ui.column(ui.panel(\"A\"), ui.panel(\"C\")),\n        ui.column(ui.panel(\"B\"), ui.panel(\"D\")),\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Handling Number Field Change Events in Python with Deephaven UI\nDESCRIPTION: This example demonstrates how to handle change events for number fields and display the updated value using Deephaven's UI library.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/number_field.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef ui_number_field_on_change_example():\n    value, set_value = ui.use_state(\"\")\n    return [\n        ui.number_field(label=\"Your age\", value=value, on_change=set_value),\n        ui.text(f\"Age has been changed to: {value}\"),\n    ]\n\n\nmy_number_field_on_change_example = ui_number_field_on_change_example()\n```\n\n----------------------------------------\n\nTITLE: Creating AG Grid Table with Deephaven Plugin\nDESCRIPTION: Demonstrates how to create a new Deephaven table and wrap it with the AG Grid plugin. Creates a table with two columns: a double column 'Doubles' and a string column 'Strings', then wraps it with AgGrid for display.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ag-grid/README.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import new_table\nfrom deephaven.column import string_col, double_col\nfrom deephaven.ag_grid import AgGrid\n\n_result = new_table([\n    double_col(\"Doubles\", [3.1, 5.45, -1.0]),\n    string_col(\"Strings\", [\"Creating\", \"New\", \"Tables\"]),\n])\n\nag_result = AgGrid(_result)\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Deephaven Dashboards in Python\nDESCRIPTION: Demonstrates creating multiple dashboard layouts with different configurations including 2x1, 1x2, and 2x2 grid patterns using row and column components.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/creating-layouts/creating-dashboards.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\ndash_2x1 = ui.dashboard(ui.row(ui.panel(\"A\", title=\"A\"), ui.panel(\"B\", title=\"B\")))\n\ndash_1x2 = ui.dashboard(ui.column(ui.panel(\"A\", title=\"A\"), ui.panel(\"B\", title=\"B\")))\n\ndash_2x2 = ui.dashboard(\n    ui.row(\n        ui.column(ui.panel(\"A\", title=\"A\"), ui.panel(\"C\", title=\"C\")),\n        ui.column(ui.panel(\"B\", title=\"B\"), ui.panel(\"D\", title=\"D\")),\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Composing UI Components with React-like Syntax\nDESCRIPTION: Creates a component that combines two filterable tables side by side, demonstrating component composition and reuse in the React-like UI system.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/DESIGN.md#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# Just using one source table, and allowing it to be filtered using two different filter inputs\n@ui.component\ndef double_filter_table(source: Table, column: str):\n    return ui.flex(\n        [text_filter_table(source, column), text_filter_table(source, column)],\n        direction=\"row\",\n    )\n```\n\n----------------------------------------\n\nTITLE: Creating a Complex Stateful Dashboard in Python\nDESCRIPTION: Shows how to create a complex stateful dashboard using the Deephaven UI library, featuring custom hooks, sliders, and interactive plots.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/dashboard.md#2025-04-17_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui, time_table\nfrom deephaven.ui import use_memo, use_state\nfrom deephaven.plot.figure import Figure\n\n\ndef use_wave_input():\n    \"\"\"\n    Demonstrating a custom hook.\n    Creates an input panel that controls the amplitude, frequency, and phase for a wave\n    \"\"\"\n    amplitude, set_amplitude = use_state(1.0)\n    frequency, set_frequency = use_state(1.0)\n    phase, set_phase = use_state(1.0)\n\n    input_panel = ui.flex(\n        ui.slider(\n            label=\"Amplitude\",\n            default_value=amplitude,\n            min_value=-100.0,\n            max_value=100.0,\n            on_change=set_amplitude,\n            step=0.1,\n        ),\n        ui.slider(\n            label=\"Frequency\",\n            default_value=frequency,\n            min_value=-100.0,\n            max_value=100.0,\n            on_change=set_frequency,\n            step=0.1,\n        ),\n        ui.slider(\n            label=\"Phase\",\n            default_value=phase,\n            min_value=-100.0,\n            max_value=100.0,\n            on_change=set_phase,\n            step=0.1,\n        ),\n        direction=\"column\",\n    )\n\n    return amplitude, frequency, phase, input_panel\n\n\n@ui.component\ndef multiwave():\n    amplitude, frequency, phase, wave_input = use_wave_input()\n\n    tt = use_memo(lambda: time_table(\"PT1s\").update(\"x=i\"), [])\n    t = use_memo(\n        lambda: tt.update(\n            [\n                f\"y_sin={amplitude}*Math.sin({frequency}*x+{phase})\",\n                f\"y_cos={amplitude}*Math.cos({frequency}*x+{phase})\",\n                f\"y_tan={amplitude}*Math.tan({frequency}*x+{phase})\",\n            ]\n        ),\n        [amplitude, frequency, phase],\n    )\n    p_sin = use_memo(\n        lambda: Figure().plot_xy(series_name=\"Sine\", t=t, x=\"x\", y=\"y_sin\").show(), [t]\n    )\n    p_cos = use_memo(\n        lambda: Figure().plot_xy(series_name=\"Cosine\", t=t, x=\"x\", y=\"y_cos\").show(),\n        [t],\n    )\n    p_tan = use_memo(\n        lambda: Figure().plot_xy(series_name=\"Tangent\", t=t, x=\"x\", y=\"y_tan\").show(),\n        [t],\n    )\n\n    return ui.column(\n        ui.row(\n            ui.stack(\n                ui.panel(wave_input, title=\"Wave Input\"),\n                ui.panel(t, title=\"Wave Table\"),\n                active_item_index=0,\n            ),\n            height=25,\n        ),\n        ui.row(\n            ui.stack(ui.panel(p_sin, title=\"Sine\"), width=50),\n            ui.stack(ui.panel(p_cos, title=\"Cosine\"), width=30),\n            ui.stack(ui.panel(p_tan, title=\"Tangent\")),\n        ),\n    )\n\n\ndash_complex_state = ui.dashboard(multiwave())\n```\n\n----------------------------------------\n\nTITLE: Creating Dashboard Layout\nDESCRIPTION: Example of creating a dashboard with complex layout using rows, columns, and stacks.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/DESIGN.md#2025-04-17_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.ui as ui\n\n# ui.dashboard takes only one root element\nd = ui.dashboard(\n    ui.column(\n        [\n            ui.row([my_input_panel(), my_table_panel()]),\n            ui.stack([my_plot1(), my_plot2()]),\n        ]\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring UI Table in Python for Deephaven Plugins\nDESCRIPTION: This function configures a UI table with various options for column management, filtering, selection, and event handling. It takes a Table object and numerous optional parameters to customize the table's appearance and behavior in the Deephaven UI.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/DESIGN.md#2025-04-17_snippet_62\n\nLANGUAGE: python\nCODE:\n```\nui_table(\n    table: Table,\n    always_fetch_columns: list[ColumnName] | None,\n    front_columns: list[ColumnName] | None,\n    back_columns: list[ColumnName] | None,\n    frozen_columns: list[ColumnName] | None,\n    hidden_columns: list[ColumnName] | None,\n    column_groups: list[ColumnGroup] | None,\n    quick_filters: dict[ColumnName, QuickFilterExpression] | None,\n    show_search: bool,\n    show_quick_filters: bool,\n    show_column_headers: bool | None,\n    selection_mode: SelectionMode | None,\n    selection_area: SelectionArea | None,\n    selection_style: SelectionStyleCombination | None,\n    selected_rows: RowIndexCombination | None,\n    selected_columns: ColumnIndexCombination | None,\n    selected_cells: CellIndexCombination | None,\n    density: DensityMode | None,\n    column_display_names: dict[ColumnName, ColumnNameCombination] | None,\n    on_row_press: Callable[[RowIndex, RowData], None] | None,\n    on_row_double_press: Callable[[RowIndex, RowData], None] | None\n    on_cell_press: Callable[[CellIndex, CellData], None] | None,\n    on_cell_double_press: Callable[[CellIndex, CellData], None] | None\n    on_column_press: Callable[[ColumnName], None] | None,\n    on_columns_double_press: Callable[[ColumnName], None] | None,\n    on_search: Callable[[str], None],\n    on_quick_filter: Callable[[ColumnName, QuickFilterExpression], None] | None\n    on_freeze_column: Callable[[ColumnName], None] | None,\n    on_hide_column: Callable[[ColumnName], None] | None,\n    on_sort: Callable[[ColumnName, LiteralSortDirection], None] | None,\n    context_menu: ResolvableContextMenuItem | list[ResolvableContextMenuItem] | None,\n    context_header_menu: ResolvableContextMenuItem | list[ResolvableContextMenuItem] | None,\n) -> UITable\n```\n\n----------------------------------------\n\nTITLE: Implementing a Toggle Logic Button with Event Handling in Python\nDESCRIPTION: This example shows how to create a Logic Button that toggles between 'or' and 'and' variants when pressed. It uses the @ui.component decorator and the use_state hook for managing state.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/logic_button.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef ui_toggle_logic_button():\n    variant, set_variant = ui.use_state(\"or\")\n\n    return ui.logic_button(\n        variant,\n        variant=variant,\n        on_press=lambda: set_variant(\"and\" if variant == \"or\" else \"or\"),\n    )\n\n\nmy_toggle_logic_button = ui_toggle_logic_button()\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Pie Plot with Gapminder Data in Python\nDESCRIPTION: Creates a pie plot showing population distribution by continent using Deephaven's plotting library. The example demonstrates data aggregation by getting the most recent population totals per continent and visualizing them in a pie chart format.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/plotly-express/docs/pie.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.plot.express as dx\ngapminder = dx.data.gapminder()\n\n# get table of most recent total population per continent\ngapminder_recent_pop = (\n    gapminder\n    .last_by(\"Country\")\n    .drop_columns([\"Country\", \"LifeExp\", \"GdpPerCap\"])\n    .sum_by([\"Year\", \"Month\", \"Continent\"])\n)\n\npie_plot = dx.pie(gapminder_recent_pop, names=\"Continent\", values=\"Pop\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Counter with use_state Hook in Python\nDESCRIPTION: Demonstrates the use of the use_state hook to create a stateful counter button component. The hook manages the count state and provides a function to update it.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/describing/use_hooks.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef ui_counter():\n    count, set_count = ui.use_state(0)\n    return ui.button(f\"Pressed {count} times\", on_press=lambda: set_count(count + 1))\n\ncounter = ui_counter()\n```\n\n----------------------------------------\n\nTITLE: Creating Heatmap Function in Python\nDESCRIPTION: Defines a function to create a heatmap based on the selected Iris species. It displays an illustrated message when no species is selected and generates a density heatmap when a species is chosen.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/tutorial.md#2025-04-17_snippet_28\n\nLANGUAGE: Python\nCODE:\n```\ndef create_heatmap(species):\n    heatmap = ui.illustrated_message(\n        ui.icon(\"vsFilter\"),\n        ui.heading(\"Species required\"),\n        ui.content(\"Select a species to display filtered table and chart.\"),\n        width=\"100%\",\n    )\n  \n    if species:\n        filtered_table = iris.where(\"Species = species\")\n        heatmap = dx.density_heatmap(filtered_table, x=\"SepalLength\", y=\"SepalWidth\")\n      \n    return heatmap\n```\n\n----------------------------------------\n\nTITLE: Creating a Form with State-Based UI Changes in deephaven.ui\nDESCRIPTION: This snippet demonstrates a form component that uses state to change its display after submission. When the 'Send' button is clicked, the state is updated and triggers a re-render, showing a confirmation message instead of the form.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/add-interactivity/state-as-a-snapshot.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\ndef send_message(message: str):\n    print(\"Message sent: \", message)\n\n\n@ui.component\ndef form():\n    is_sent, set_is_sent = ui.use_state(False)\n\n    def handle_submit(form_data):\n        set_is_sent(True)\n        send_message(form_data[\"message\"])\n\n    if is_sent:\n        return ui.heading(\"Your message is on its way!\")\n\n    return ui.form(\n        ui.text_area(default_value=\"Hi!\", name=\"message\"),\n        ui.button(\"Send\", type=\"submit\"),\n        on_submit=handle_submit,\n    )\n\n\nexample_form = form()\n```\n\n----------------------------------------\n\nTITLE: Displaying Tables in UI Components (Python)\nDESCRIPTION: This snippet demonstrates different ways to display Deephaven tables in UI components, including returning a table directly, as part of a list or tuple, and adding it to a container like flex or panel.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/describing/ui_with_tables.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import new_table, ui\nfrom deephaven.column import int_col\n\n# Prepend name with an underscore to avoid displaying the source table\n_source = new_table([int_col(\"IntegerColumn\", [1, 2, 3])])\n\n\n@ui.component\ndef single_table(t):\n    ui.use_effect(lambda: print(\"displaying table\"), [])\n    return t\n\n\n@ui.component\ndef list_table(t):\n    return [ui.text(\"list table\"), t]\n\n\n@ui.component\ndef flex_table(t):\n    return ui.flex(ui.text(\"flex table\"), t)\n\n\nmy_single_table = single_table(_source)\nmy_list_table = list_table(_source)\nmy_flex_table = flex_table(_source)\n```\n\n----------------------------------------\n\nTITLE: Basic Table Column Usage with use_column_data in Python\nDESCRIPTION: Demonstrates basic usage of use_column_data hook to display data from the first column of a time table. The component updates automatically when the table data changes.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/hooks/use_column_data.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import time_table, ui\n\n@ui.component\ndef ui_table_column(table):\n    column_data = ui.use_column_data(table)\n    return ui.heading(f\"The column data is {column_data}\")\n\ntable_column = ui_table_column(time_table(\"PT1s\").tail(5))\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Picker Component in Deephaven UI\nDESCRIPTION: This code creates a simple picker component that allows users to select from a list of iris species (setosa, versicolor, virginica). The picker is wrapped in a panel for display in the dashboard.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/tutorial.md#2025-04-17_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n@ui.component\ndef species_panel():\n  species_picker = ui.picker(\"setosa\", \"versicolor\", \"virginica\")\n\n  return species_picker\n\npicker_panel = species_panel()\n```\n\n----------------------------------------\n\nTITLE: Implementing Time Table Filtering with Date Pickers in Python\nDESCRIPTION: Demonstrates how to use date pickers for filtering tables with time columns. It creates a component that allows users to select start and end dates to filter a time-based table.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/date_picker.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven.time import dh_now\nfrom deephaven import time_table, ui\n\n\n@ui.component\ndef date_table_filter(table, start_date, end_date, time_col=\"Timestamp\"):\n    after_date, set_after_date = ui.use_state(start_date)\n    before_date, set_before_date = ui.use_state(end_date)\n    return [\n        ui.date_picker(label=\"Start Date\", value=after_date, on_change=set_after_date),\n        ui.date_picker(label=\"End Date\", value=before_date, on_change=set_before_date),\n        table.where(f\"{time_col} >= after_date  && {time_col} < before_date\"),\n    ]\n\n\nSECONDS_IN_DAY = 86400\ntoday = dh_now()\n_table = time_table(\"PT1s\").update_view(\n    [\"Timestamp=today.plusSeconds(SECONDS_IN_DAY*i)\", \"Row=i\"]\n)\ndate_filter = date_table_filter(_table, today, today.plusSeconds(SECONDS_IN_DAY * 10))\n```\n\n----------------------------------------\n\nTITLE: Creating Grouped 3D Scatter Plot in Python\nDESCRIPTION: Creates a 3D scatter plot with points colored by species groups using the 'by' parameter.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/plotly-express/docs/scatter-3d.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.plot.express as dx\niris = dx.data.iris()\n\nscatter_plot_3D_groups = dx.scatter_3d(iris, x=\"SepalWidth\", y=\"SepalLength\", z=\"PetalWidth\", by=\"Species\")\n```\n\n----------------------------------------\n\nTITLE: Implementing State-Based Re-rendering in Deephaven UI Components\nDESCRIPTION: Shows how to create a component that re-renders when state changes. Uses use_state to track a counter, and includes a button that increments the counter, triggering re-renders.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/add-interactivity/render-cycle.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef example_renderer():\n    num, set_num = ui.use_state(0)\n\n    def handle_press():\n        set_num(num + 1)\n\n    text = \"Initial Render\" if num == 0 else f\"Re-render {num}\"\n\n    return [\n        ui.button(\"Render\", on_press=handle_press),\n        ui.text(text),\n    ]\n\n\nexample = example_renderer()\n```\n\n----------------------------------------\n\nTITLE: Creating Layered Line Plot with Multiple Axes in Python using Deephaven Express\nDESCRIPTION: Shows how to create a layered plot with multiple axes using dx.layer function. Demonstrates combining multiple individual plots with different y-axes into a single visualization.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/plotly-express/docs/multiple-axes.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.plot.express as dx\nstocks = dx.data.stocks()\n\n# subset to get two tables with a shared x-axis\nfish = stocks.where(\"Sym == `FISH`\")\nbird = stocks.where(\"Sym == `BIRD`\")\n\n# create multiple axes using dx.layer and specifying yaxis_sequence\nline_plot_layered = dx.layer(\n    dx.line(fish, x=\"Timestamp\", y=\"Price\", yaxis_sequence=1),\n    dx.line(bird, x=\"Timestamp\", y=\"Price\", yaxis_sequence=2)\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Series Animation with TableAnimation\nDESCRIPTION: An example demonstrating how to animate multiple plot types (two line plots and a scatter plot) from the same Deephaven table data source, updating all series when the table changes.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/matplotlib/README.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport matplotlib.pyplot as plt\nfrom deephaven import time_table\nfrom deephaven.plugin.matplotlib import TableAnimation\n\ntt = time_table(\"PT00:00:01\").update(\n    [\"x=i\", \"y=Math.sin(x)\", \"z=Math.cos(x)\", \"r=Math.random()\", \"s=Math.random()*100\"]\n)\n\nfig = plt.figure()\nax = fig.subplots()\n(line1,) = ax.plot([], [])\n(line2,) = ax.plot([], [])\nscat = ax.scatter([], [])\nscatter_offsets = []\nscatter_sizes = []\n\n\ndef update_fig(data, update):\n    line1.set_data([data[\"x\"], data[\"y\"]])\n    line2.set_data([data[\"x\"], data[\"z\"]])\n    added = update.added()\n    for i in range(0, len(added[\"x\"])):\n        scatter_offsets.append([added[\"x\"][i], added[\"r\"][i]])\n        scatter_sizes.append(added[\"s\"][i])\n    scat.set_offsets(scatter_offsets)\n    scat.set_sizes(scatter_sizes)\n    ax.relim()\n    ax.autoscale_view(True, True, True)\n\n\nani = TableAnimation(fig, tt, update_fig)\n```\n\n----------------------------------------\n\nTITLE: Improved Feedback Form Using a Status Enum State in Deephaven UI (Python)\nDESCRIPTION: Refactored feedback form that replaces contradictory boolean states with a single status variable that can be in one of three valid states: 'typing', 'sending', or 'sent'. This eliminates impossible state combinations.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/managing-state/choose-the-state-structure.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\nimport threading\n\n\n@ui.component\ndef feedback_form():\n    text, set_text = ui.use_state(\"\")\n    status, set_status = ui.use_state(\"typing\")\n\n    def finish_submit():\n        set_status(\"sent\")\n\n    def handle_submit():\n        set_status(\"sending\")\n        threading.Timer(5, finish_submit).start()\n\n    is_sending = status == \"sending\"\n    is_sent = status == \"sent\"\n\n    if is_sent:\n        return ui.heading(\"Thanks for the feedback!\")\n\n    return ui.form(\n        ui.text(\"Do you have any feedback?\"),\n        ui.text_area(value=text, on_change=set_text, is_disabled=is_sending),\n        ui.button(\"Send\", type=\"submit\"),\n        ui.text(\"Sending...\") if is_sending else None,\n        on_submit=handle_submit,\n    )\n\n\nfeedback_form_example = feedback_form()\n```\n\n----------------------------------------\n\nTITLE: Handling Menu Actions with State in Python using Deephaven UI\nDESCRIPTION: This example shows how to handle menu actions using state management in a Deephaven UI component. It demonstrates the use of the on_action callback and state updates.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/menu.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef open_action_example():\n    action, set_action = ui.use_state()\n    return ui.flex(\n        ui.menu_trigger(\n            ui.action_button(\"Edit\"),\n            ui.menu(\n                ui.item(\"Cut\", key=\"cut\"),\n                ui.item(\"Copy\", key=\"copy\"),\n                ui.item(\"Paste\", key=\"paste\"),\n                on_action=set_action,\n            ),\n        ),\n        ui.text(f\"Action {action}\"),\n        gap=\"size-100\",\n        align_items=\"center\",\n    )\n\n\nmy_open_action_example = open_action_example()\n```\n\n----------------------------------------\n\nTITLE: Creating Basic OHLC Plot in Python with Deephaven\nDESCRIPTION: Demonstrates how to create a basic OHLC plot using Deephaven's plotting library. Aggregates stock data into 1-minute OHLC bars and visualizes it for a specific symbol (DOG).\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/plotly-express/docs/ohlc.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.plot.express as dx\nimport deephaven.agg as agg\nstocks = dx.data.stocks()\n\n# compute ohlc per symbol for each minute\nstocks_1min_ohlc = stocks.update_view(\n    \"BinnedTimestamp = lowerBin(Timestamp, 'PT1m')\"\n).agg_by(\n    [\n        agg.first(\"Open=Price\"),\n        agg.max_(\"High=Price\"),\n        agg.min_(\"Low=Price\"),\n        agg.last(\"Close=Price\"),\n    ],\n    by=[\"Sym\", \"BinnedTimestamp\"],\n)\n\n# create a basic candlestick plot - the `open`, `high`, `low`, and `close` arguments must be specified\nohlc_plot = dx.ohlc(\n    stocks_1min_ohlc.where(\"Sym == `DOG`\"),\n    x=\"BinnedTimestamp\",\n    open=\"Open\",\n    high=\"High\",\n    low=\"Low\",\n    close=\"Close\",\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Explicit Grid Layout in Deephaven UI\nDESCRIPTION: Creates a typical application layout with header, sidebar, content, and footer using explicit grid areas. Demonstrates usage of areas, columns, and rows props for precise layout control.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/grid.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef explicit_grid():\n    return ui.grid(\n        ui.view(background_color=\"celery-600\", grid_area=\"header\"),\n        ui.view(background_color=\"blue-600\", grid_area=\"sidebar\"),\n        ui.view(background_color=\"purple-600\", grid_area=\"content\"),\n        ui.view(background_color=\"magenta-600\", grid_area=\"footer\"),\n        areas=[\"header header\", \"sidebar content\", \"footer footer\"],\n        columns=[\"1fr\", \"3fr\"],\n        rows=[\"size-1000\", \"auto\", \"size-1000\"],\n        height=\"size-6000\",\n        gap=\"size-100\",\n    )\n\nexplicit_grid_example = explicit_grid()\n```\n\n----------------------------------------\n\nTITLE: Implementing DateRangePicker in Deephaven UI\nDESCRIPTION: This snippet demonstrates various implementations of the DateRangePicker component in Deephaven UI, including controlled and uncontrolled states, different date formats, and granularity settings.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/DESIGN.md#2025-04-17_snippet_46\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.ui as ui\nfrom deephaven.time import to_j_local_date, dh_today, to_j_instant, to_j_zdt\n\nzdt_start = to_j_zdt(\"1995-03-22T11:11:11.23142 America/New_York\")\nzdt_end = to_j_zdt(\"1995-03-25T11:11:11.23142 America/New_York\")\ninstant_start = to_j_instant(\"2022-01-01T00:00:00 ET\")\ninstant_end = to_j_instant(\"2022-01-05T00:00:00 ET\")\nlocal_start = to_j_local_date(\"2024-05-06\")\nlocal_end = to_j_local_date(\"2024-05-10\")\n\n# simple date picker that takes ui.items and is uncontrolled\n# this creates a date picker with a granularity of days\ndate_range_picker1 = ui.date_range_picker(\n    default_value={\"start\": local_start, \"end\": local_end}\n)\n\n# simple date picker that takes list view items directly and is controlled\n# this creates a date picker with a granularity of seconds in UTC\n# the on_change handler is passed a range of instants\ndates2, set_dates2 = ui.use_state({\"start\": instant_start, \"end\": instant_end})\ndate_range_picker2 = ui.date_range_picker(\n    value=dates2,\n    on_change=set_dates2\n)\n\n# this creates a date picker with a granularity of seconds in the specified time zone\n# the on_change handler is passed a zoned date time\ndates3, set_dates3 = ui.use_state(None)\n\ndate_range_picker3 = ui.date_range_picker(\n    placeholder_value=zdt_start,\n    on_change=set_dates3\n)\n\n# this creates a date picker with a granularity of seconds in UTC\n# the on_change handler is passed an instant\ndates4, set_dates4 = ui.use_state(None)\n\ndate_range_picker4 = ui.date_range_picker(\n    placeholder_value=instant_start,\n    on_change=set_dates4\n)\n\n# this creates a date picker with a granularity of days\n# the on_change handler is passed a local date\ndates5, set_dates5 = ui.use_state(None)\n\ndate_range_picker5 = ui.date_range_picker(\n    placeholder_value=local_start,\n    on_change=set_date5\n)\n\n# this creates a date picker with a granularity of days, but the on_change handler is still passed an instant\ndates6, set_dates6 = ui.use_state(None)\n\ndate_range_picker6 = ui.date_range_picker(\n    placeholder_value=instant_start,\n    granularity=\"day\",\n    on_change=set_date6\n)\n\n# this creates a date picker with a granularity of seconds and the on_change handler is passed an instant\ndates7, set_dates7 = ui.use_state(None)\n\ndate_range_picker7 = ui.date_range_picker(\n    on_change=set_dates7\n)\n```\n\n----------------------------------------\n\nTITLE: Creating an Interactive Query in Deephaven\nDESCRIPTION: Demonstrates a basic interactive query that creates a table updating with slider values. The make_iq function connects the UI controls to the data processing function.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/DESIGN.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven.plugin.interactive import make_iq, dh\nfrom deephaven import empty_table\n\n\ndef my_func(x, a):\n    print(\"x is now \" + str(x))\n    t = empty_table(1).update_view([f\"x={x}\"])\n    return {\"t\": t}\n\n\nmy_query = make_iq(my_func, x=dh.slider(22, 2, 111))\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Sunburst Plot with Deephaven Plot Express\nDESCRIPTION: This snippet demonstrates how to create a basic sunburst plot using Deephaven's plot express library. It uses the gapminder dataset to visualize population data by continent.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/plotly-express/docs/sunburst.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.plot.express as dx\ngapminder = dx.data.gapminder()\n\n# create table of only the most recent year of data, compute total population for each continent\ngapminder_recent = (\n    gapminder\n    .last_by(\"Country\")\n    .view([\"Continent\", \"Pop\"])\n    .sum_by(\"Continent\")\n    .update(\"World = `World`\")\n)\n\nsunburst_plot = dx.sunburst(gapminder_recent, names=\"Continent\", values=\"Pop\", parents=\"World\")\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Flex Layouts with Custom Styling in Python\nDESCRIPTION: This example demonstrates how to create complex nested flex layouts with custom styling. It uses flex containers with different directions, justification, and wrapping, along with custom background colors and sizes for child components.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/creating-layouts/layout-overview.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef ui_flex_nesting():\n    return [\n        ui.flex(\n            ui.view(1, background_color=\"red\", height=\"size-800\"),\n            ui.flex(\n                ui.view(\n                    2, background_color=\"green\", height=\"size-800\", width=\"size-800\"\n                ),\n                ui.view(\n                    3, background_color=\"blue\", height=\"size-800\", width=\"size-800\"\n                ),\n                justify_content=\"right\",\n                wrap=True,\n            ),\n            direction=\"column\",\n        ),\n    ]\n\n\nmy_flex_nesting = ui_flex_nesting()\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Component\nDESCRIPTION: Example of creating a custom component using the @ui.component decorator that combines a heading and button.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/README.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@ui.component\ndef ui_foo_bar():\n    return [\n        ui.heading(\"Click button below\"),\n        ui.button(\"Click Me!\", on_press=lambda: print(\"Button was clicked!\")),\n    ]\n\n\nfoo_bar = ui_foo_bar()\n```\n\n----------------------------------------\n\nTITLE: Handling Null Values in Row Data\nDESCRIPTION: Shows how to handle null values in the table data using pandas.NA and isna() check. Includes conditional null value generation in the time table.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/hooks/use_row_data.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import time_table, ui\nimport datetime as dt\nimport pandas as pd\n\n@ui.component\ndef ui_table_row(table):\n    row_data = ui.use_row_data(table)\n    if row_data is None:\n        return ui.heading(\"No data yet.\")\n    if pd.isna(row_data[\"x\"]):\n        return ui.heading(\"Value of 'x' is null.\")\n    return ui.heading(f\"Row data: {row_data}. Value of 'x' is {row_data['x']}\")\n\nstart_time = dt.datetime.now() + dt.timedelta(seconds=2)\ntable_row = ui_table_row(\n    time_table(\"PT1s\", start_time=start_time).update(\"x=i%2==0?null:i\").tail(1)\n)\n```\n\n----------------------------------------\n\nTITLE: Building Interactive Plots with Deephaven\nDESCRIPTION: Creates interactive sine and cosine plots that respond to amplitude, frequency, and phase sliders. Shows how to share inputs between multiple interactive queries.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/DESIGN.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven.plugin.interactive import make_iq, dh\nfrom deephaven import empty_table\nfrom deephaven.plot.figure import Figure\n\n\ndef sin_func(amplitude, frequency, phase):\n    # Note: Should use QST to create filters instead of f-strings?\n    t = empty_table(1000).update_view(\n        [\"x=i\", f\"y={amplitude}*Math.sin(x*{frequency}+{phase})\"]\n    )\n    f = Figure().plot_xy(series_name=\"Series\", t=t, x=\"x\", y=\"y\").show()\n    return {\"t\": t, \"f\": f}\n\n\ndef cos_func(amplitude, frequency, phase):\n    t = empty_table(1000).update_view(\n        [\"x=i\", f\"y={amplitude}*Math.cos(x*{frequency}+{phase})\"]\n    )\n    f = Figure().plot_xy(series_name=\"Series\", t=t, x=\"x\", y=\"y\").show()\n    return {\"t\": t, \"f\": f}\n\n\ninputs = {\"amplitude\": dh.slider(1), \"frequency\": dh.slider(1), \"phase\": dh.slider(1)}\n\niqs = make_iq(sin_func, **inputs)\niqc = make_iq(cos_func, **inputs)\n```\n\n----------------------------------------\n\nTITLE: Creating Calendar-Based Area Plots in Python with Deephaven\nDESCRIPTION: Shows how to create area plots with calendar support in Deephaven. This example demonstrates multiple ways to use the calendar parameter: with a calendar name, with a calendar object, on different axes, and with the default calendar setting.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/plotly-express/docs/area.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.plot.express as dx\nfrom deephaven.calendar import calendar, set_calendar\n\ncal_name = \"USNYSE_EXAMPLE\"\ncal = calendar(cal_name)\nset_calendar(cal_name)\n\nstocks = dx.data.stocks(starting_time=\"2018-06-01T09:27:00 ET\")\n\ndog_prices = stocks.where(\"Sym = `DOG`\")\n\n# plot with a specific calendar by name\narea_plot_cal_name = dx.area(dog_prices, x=\"Timestamp\", y=\"Price\", calendar=cal_name)\n\n# plot with a specific calendar by name on the y-axis\narea_plot_cal_y = dx.area(dog_prices, x=\"Price\", y=\"Timestamp\", calendar=cal_name)\n\n# plot with a specific calendar object\narea_plot_cal = dx.area(dog_prices, x=\"Timestamp\", y=\"Price\", calendar=cal)\n\n# plot with the default calendar\narea_plot_default = dx.area(dog_prices, x=\"Timestamp\", y=\"Price\", calendar=True)\n```\n\n----------------------------------------\n\nTITLE: Building an Order Entry Form with Table Publishing\nDESCRIPTION: Creates an order entry form component that allows users to enter stock orders and publish them to a table. Uses table_publisher to create a streaming table and blink_to_append_only to view order history.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/docker/data/storage/notebooks/DEMO.md#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import dtypes as dht, empty_table, ui\nfrom deephaven.stream.table_publisher import table_publisher\nfrom deephaven.stream import blink_to_append_only\n\n\n@ui.component\ndef order_table():\n    sym, set_sym = ui.use_state(\"\")\n    size, set_size = ui.use_state(0)\n\n    blink_table, publisher = ui.use_memo(\n        lambda: table_publisher(\n            \"Order table\", {\"sym\": dht.string, \"size\": dht.int32, \"side\": dht.string}\n        ),\n        [],\n    )\n    t = ui.use_memo(lambda: blink_to_append_only(blink_table), [blink_table])\n\n    def submit_order(order_sym, order_size, side):\n        publisher.add(\n            empty_table(1).update(\n                [f\"sym=`{order_sym}`\", f\"size={order_size}\", f\"side=`{side}`\"]\n            )\n        )\n\n    def handle_buy(_):\n        submit_order(sym, size, \"buy\")\n\n    def handle_sell(_):\n        submit_order(sym, size, \"sell\")\n\n    return [\n        ui.flex(\n            ui.text_field(\n                label=\"Sym\", label_position=\"side\", value=sym, on_change=set_sym\n            ),\n            ui.number_field(\n                label=\"Size\", label_position=\"side\", value=size, on_change=set_size\n            ),\n            ui.button(\"Buy\", on_press=handle_buy, variant=\"accent\", style=\"fill\"),\n            ui.button(\"Sell\", on_press=handle_sell, variant=\"negative\", style=\"fill\"),\n            gap=10,\n            marginX=10,\n            marginTop=4,\n            wrap=True,\n        ),\n        t,\n    ]\n\n\nresult = order_table()\n```\n\n----------------------------------------\n\nTITLE: Creating Complex Action Menu Items with Icons and Descriptions\nDESCRIPTION: Demonstrates how to create rich action menu items with icons, text, and descriptions. The example shows two complex items with different icons and descriptive text.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/action_menu.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\nmy_action_menu_complex_items_example = ui.action_menu(\n    ui.item(\n        ui.icon(\"github_alt\"),\n        ui.text(\"Github\"),\n        ui.text(\"Github Option\", slot=\"description\"),\n        text_value=\"Github\",\n    ),\n    ui.item(\n        ui.icon(\"azure_devops\"),\n        ui.text(\"Azure\"),\n        ui.text(\"Azure Option\", slot=\"description\"),\n        text_value=\"Azure\",\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom use_server Hook in Python\nDESCRIPTION: Shows how to create a custom hook 'use_server' that encapsulates server connection logic. The custom hook uses use_callback and use_effect internally.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/describing/use_hooks.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\nimport time\n\n# Custom hook\ndef use_server():\n    create_server = ui.use_callback(lambda: {\"host\": \"localhost\"}, [])\n\n    def connect():\n        server = create_server()\n        print(f\"Connecting to {server}\")\n        time.sleep(0.5)\n\n    ui.use_effect(connect, [create_server])\n\n@ui.component\ndef ui_server():\n    theme, set_theme = ui.use_state(\"red\")\n\n    use_server()\n\n    return ui.view(\n        ui.picker(\n            \"red\",\n            \"orange\",\n            \"yellow\",\n            label=\"Theme\",\n            selected_key=theme,\n            on_change=set_theme,\n        ),\n        padding=\"size-100\",\n        background_color=theme,\n    )\n\nmy_server = ui_server()\n```\n\n----------------------------------------\n\nTITLE: Creating a Holy Grail Dashboard Layout in Python\nDESCRIPTION: Illustrates how to create a 'Holy Grail' dashboard layout using the Deephaven UI library.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/dashboard.md#2025-04-17_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\ndash_holy_grail = ui.dashboard(\n    ui.column(\n        ui.panel(\"Header\", title=\"Header\"),\n        ui.row(\n            ui.panel(\"Left Sidebar\", title=\"Left Sidebar\"),\n            ui.stack(ui.panel(\"Main Content\", title=\"Main Content\"), width=70),\n            ui.panel(\"Right Sidebar\", title=\"Right Sidebar\"),\n        ),\n        ui.panel(\"Footer\", title=\"Footer\"),\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Submenus in Python with Deephaven UI\nDESCRIPTION: This example demonstrates how to create submenus using Deephaven's UI library. It shows the implementation of nested menus with different levels of depth and custom action handlers.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/menu.md#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\nmy_submenu_example = ui.menu_trigger(\n    ui.action_button(\"Actions\"),\n    ui.menu(\n        ui.item(\"Cut\", key=\"cut\"),\n        ui.item(\"Copy\", key=\"copy\"),\n        ui.item(\"Paste\", key=\"paste\"),\n        ui.submenu_trigger(\n            ui.item(\"Share\", key=\"share\"),\n            ui.menu(\n                ui.item(\"Copy link\", key=\"copy link\"),\n                ui.submenu_trigger(\n                    ui.item(\"Email\", key=\"email\"),\n                    ui.menu(\n                        ui.item(\"Email as attachment\", key=\"attachment\"),\n                        ui.item(\"Email as link\", key=\"link\"),\n                        on_action=lambda key: print(f\"Email menu {key} action\"),\n                    ),\n                ),\n                ui.item(\"SMS\", key=\"sms\"),\n                on_action=lambda key: print(f\"Share menu {key} action\"),\n            ),\n        ),\n        ui.item(\"Delete\", key=\"delete\"),\n        on_action=lambda key: print(f\"Root menu {key} action\"),\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Correct List Addition in DeepHaven UI\nDESCRIPTION: Shows proper way to add items to a list using unpacking operator to create a new list instead of mutating the existing one.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/add-interactivity/update-lists-in-state.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef artist_list():\n    name, set_name = ui.use_state(\"\")\n    artists, set_artists = ui.use_state([])\n\n    return [\n        ui.heading(\"Artists:\"),\n        ui.text_field(value=name, on_change=set_name),\n        ui.button(\n            \"Add\",\n            # Use unpacking to create a new list\n            on_press=lambda: set_artists([*artists, name]),\n        ),\n        [ui.text(n) for n in artists],\n    ]\n\nartist_list_example = artist_list()\n```\n\n----------------------------------------\n\nTITLE: Applying Formatting Rules to UITable in Python\nDESCRIPTION: Example of applying multiple formatting rules to a UITable, including color formatting, value formatting, and data bar rendering.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/DESIGN.md#2025-04-17_snippet_70\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui, time_table\n\n_t = time_table(\"PT1S\").update(\"X=i % 10\", \"Y=i % 10\", \"Z=i % 100\")\n\nt = ui.table(\n    t,\n    formatting=[\n        ui.table.FORMAT(cols=\"X\", color=\"RED\"),\n        ui.table.FORMAT(cols=\"Y\", color=\"BLUE\", where=\"Y % 2 == 0\"),\n        ui.table.FORMAT(cols=\"Y\", value=\"0.00\"),\n        ui.table.FORMAT(cols=[\"A\", \"B\"], color=\"PURPLE\", value=\"0.00%\", where=\"A > 5\"),\n        ui.table.FORMAT(cols=\"Z\", mode=ui.table.DATABAR(value_col=\"Z\", min=0, max=100, positive_color=\"GREEN\", negative_color=\"RED\"),\n        ui.table.FORMAT(where=\"X > 5\", color=\"GREEN\")\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Creating an Explicit Grid Layout with Named Areas in Python\nDESCRIPTION: This snippet shows how to create an explicit grid layout using ui.grid. It defines named grid areas and places components in these areas with custom background colors, demonstrating complex layout capabilities.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/creating-layouts/layout-overview.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef explicit_grid():\n    return ui.grid(\n        ui.view(background_color=\"celery-600\", grid_area=\"header\"),\n        ui.view(background_color=\"blue-600\", grid_area=\"sidebar\"),\n        ui.view(background_color=\"purple-600\", grid_area=\"content\"),\n        ui.view(background_color=\"magenta-600\", grid_area=\"footer\"),\n        areas=[\"header header\", \"sidebar content\", \"footer footer\"],\n        columns=[\"1fr\", \"3fr\"],\n        rows=[\"size-1000\", \"size-3000\", \"size-1000\"],\n        height=\"size-6000\",\n        gap=\"size-100\",\n    )\n\n\nexplicit_grid_example = explicit_grid()\n```\n\n----------------------------------------\n\nTITLE: Creating Dependent Dropdown Filters for Tables\nDESCRIPTION: Implements cascading dropdown selectors where the second dropdown's options depend on the selection made in the first dropdown. It filters a table based on both selected values, refreshing dynamically with each selection.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/DESIGN.md#2025-04-17_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n@ui.component\ndef filtered_accounts(source):\n    company, set_company = use_state(\"\")\n    trader, set_trader = use_state(\"\")\n\n    return [\n        # Use the distinct \"Company\" values as the possible options in the dropdown\n        ui.dropdown(source.select_distinct(\"Company\")),\n        # Use the distinct \"Trader\" values after filtering the source by \"Company\"\n        ui.dropdown(source.where(f\"Company={company}\").select_distinct(\"Trader\")),\n        # Show the table filtered on both \"Company\" and \"Trader\" selected\n        source.where([f\"Company={company}\", f\"Trader={trader}\"]),\n    ]\n```\n\n----------------------------------------\n\nTITLE: Building Custom Dashboards with Deephaven UI - Python\nDESCRIPTION: Shows how to create a dashboard layout with multiple components using column, row, stack, and panel elements. Creates a dashboard displaying stock data with two tables and a plot.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/docker/data/storage/notebooks/DEMO.md#2025-04-17_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\nfrom deephaven.plot import express as dx\nfrom deephaven.plot.figure import Figure\n\n_stocks = dx.data.stocks()\n_cat_stocks = _stocks.where(\"sym=`CAT`\")\n_dog_stocks = _stocks.where(\"sym=`DOG`\")\n_stocks_plot = (\n    Figure()\n    .plot_xy(\"Cat\", _cat_stocks, x=\"timestamp\", y=\"price\")\n    .plot_xy(\"Dog\", _dog_stocks, x=\"timestamp\", y=\"price\")\n    .show()\n)\n\nmy_dash = ui.dashboard(\n    ui.column(\n        ui.row(\n            ui.stack(ui.panel(_cat_stocks, title=\"Cat\")),\n            ui.stack(ui.panel(_dog_stocks, title=\"Dog\")),\n        ),\n        ui.stack(ui.panel(_stocks_plot, title=\"Stocks\")),\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Grid Justification Example in Deephaven UI\nDESCRIPTION: Shows various justification options for grid layouts with interactive picker control. Demonstrates different justify_content values and their effects on grid item positioning.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/grid.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\ncolors = []\nfor i in range(100, 901, 100):\n    colors.append(f\"red-{i}\")\n    colors.append(f\"green-{i}\")\n    colors.append(f\"blue-{i}\")\n\n@ui.component\ndef grid_justification():\n    justify, set_justify = ui.use_state(\"stretch\")\n    return [\n        ui.picker(\n            ui.item(\"stretch\"),\n            ui.item(\"start\"),\n            ui.item(\"end\"),\n            ui.item(\"left\"),\n            ui.item(\"right\"),\n            ui.item(\"center\"),\n            ui.item(\"space-between\"),\n            ui.item(\"space-around\"),\n            ui.item(\"space-evenly\"),\n            ui.item(\"baseline\"),\n            ui.item(\"first baseline\"),\n            ui.item(\"last baseline\"),\n            ui.item(\"safe center\"),\n            ui.item(\"unsafe center\"),\n            selected_key=justify,\n            on_selection_change=set_justify,\n            label=\"Pick an option (controlled)\",\n        ),\n        ui.grid(\n            [\n                ui.view(background_color=color, height=\"25px\", width=\"25px\")\n                for color in colors\n            ],\n            columns=\"repeat(3, 80px)\",\n            justify_content=justify,\n        ),\n    ]\n\ngrid_justification_example = grid_justification()\n```\n\n----------------------------------------\n\nTITLE: Memoizing Table Operations in UI Components (Python)\nDESCRIPTION: This snippet demonstrates how to memoize table operations using the use_memo hook to prevent unnecessary recomputation of table data on every render.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/describing/ui_with_tables.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import time_table, ui\nfrom deephaven.table import Table\n\n\ntheme_options = [\"accent-200\", \"red-200\", \"green-200\"]\n\n\n@ui.component\ndef ui_memo_table_app():\n    n, set_n = ui.use_state(1)\n    theme, set_theme = ui.use_state(theme_options[0])\n\n    # ✅ Memoize the table operation, only recompute when the dependency `n` changes\n    result_table = ui.use_memo(\n        lambda: time_table(\"PT1s\").update(f\"x=i*{n}\").reverse(), [n]\n    )\n\n    return ui.view(\n        ui.flex(\n            ui.picker(\n                *theme_options, label=\"Theme\", selected_key=theme, on_change=set_theme\n            ),\n            ui.slider(value=n, min_value=1, max_value=999, on_change=set_n, label=\"n\"),\n            result_table,\n            direction=\"column\",\n            height=\"100%\",\n        ),\n        background_color=theme,\n        align_self=\"stretch\",\n        flex_grow=1,\n    )\n\n\nmemo_table_app = ui_memo_table_app()\n```\n\n----------------------------------------\n\nTITLE: Creating Line Plots with Calendar Functionality in Python using Deephaven\nDESCRIPTION: This snippet demonstrates various ways to create line plots with calendar functionality in Deephaven. It shows how to use calendar objects, calendar names, and default calendars in both x and y axes.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/plotly-express/docs/line.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.plot.express as dx\nfrom deephaven.calendar import calendar, set_calendar\n\ncal_name = \"USNYSE_EXAMPLE\"\ncal = calendar(cal_name)\nset_calendar(cal_name)\n\nstocks = dx.data.stocks(starting_time=\"2018-06-01T09:27:00 ET\")\n\ndog_prices = stocks.where(\"Sym = `DOG`\")\n\n# plot with a specific calendar by name\nline_plot_cal_name = dx.line(dog_prices, x=\"Timestamp\", y=\"Price\", calendar=cal_name)\n\n# plot with a specific calendar by name on the y-axis\nline_plot_cal_y = dx.line(dog_prices, x=\"Price\", y=\"Timestamp\", calendar=cal_name)\n\n# plot with a specific calendar object\nline_plot_cal = dx.line(dog_prices, x=\"Timestamp\", y=\"Price\", calendar=cal)\n\n# plot with the default calendar\nline_plot_default = dx.line(dog_prices, x=\"Timestamp\", y=\"Price\", calendar=True)\n```\n\n----------------------------------------\n\nTITLE: Creating Animated Scatter Plot with TableAnimation\nDESCRIPTION: An example showing how to create a scatter plot that updates when a Deephaven time table updates, handling the different data format required for scatter plots compared to line plots.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/matplotlib/README.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport matplotlib.pyplot as plt\nfrom deephaven import time_table\nfrom deephaven.plugin.matplotlib import TableAnimation\n\ntt = time_table(\"PT00:00:01\").update(\n    [\"x=Math.random()\", \"y=Math.random()\", \"z=Math.random()*50\"]\n)\n\nfig = plt.figure()\nax = fig.subplots()\nax.set_xlim(0, 1)\nax.set_ylim(0, 1)\nscat = ax.scatter([], [])  # Provide empty data initially\nscatter_offsets = []  # Store separate arrays for offsets and sizes\nscatter_sizes = []\n\n\ndef update_fig(data, update):\n    # This assumes that table is always increasing. Otherwise need to look at other\n    # properties in update for creates and removed items\n    added = update.added()\n    for i in range(0, len(added[\"x\"])):\n        # Append new data to the sources\n        scatter_offsets.append([added[\"x\"][i], added[\"y\"][i]])\n        scatter_sizes.append(added[\"z\"][i])\n\n    # Update the figure\n    scat.set_offsets(scatter_offsets)\n    scat.set_sizes(scatter_sizes)\n\n\nani = TableAnimation(fig, tt, update_fig)\n```\n\n----------------------------------------\n\nTITLE: Advanced Tab Layout with tab_list and tab_panels in Python\nDESCRIPTION: Demonstrates more complex tab implementations using ui.tab_list and ui.tab_panels for greater control over layout and styling.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/DESIGN.md#2025-04-17_snippet_33\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\nt = ui.tabs(\n    ui.tab_list(ui.item(\"Tab 1\", key=\"Key 1\"), ui.item(\"Tab 2\", key=\"Key 2\")),\n    ui.tab_panels(\n        ui.item(\"Content 3\", key=\"Key 1\"),\n        ui.item(\"Content 2\", key=\"Key 2\"),\n        flex_grow=1,\n        position=\"relative\",\n    ),\n    flex_grow=1,\n)\n```\n\n----------------------------------------\n\nTITLE: Handling Null Values with use_column_data\nDESCRIPTION: Shows how to handle null values in table data using use_column_data with pandas.NA checking. Includes conditional rendering based on null status.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/hooks/use_column_data.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import time_table, ui\nimport datetime as dt\n\n@ui.component\ndef ui_table_column(table):\n    column_data = ui.use_column_data(table)\n    if column_data is None:\n        return ui.heading(\"No data yet.\")\n    if pd.isna(column_data[0]):\n        return ui.heading(\"Value of first cell is null.\")\n    return ui.heading(f\"Column data: {column_data}\")\n\nstart_time = dt.datetime.now() + dt.timedelta(seconds=2)\ntable_column = ui_table_column(\n    time_table(\"PT1s\", start_time=start_time)\n    .update(\"x=i%2==0?null:i\")\n    .select(\"x\")\n    .tail(4)\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Button Component in Python with deephaven.ui\nDESCRIPTION: Demonstrates how to create a simple button component using the @ui.component decorator in deephaven.ui.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/architecture.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef my_button():\n    return ui.button(\"Click me!\")\n\nbtn = my_button()\n```\n\n----------------------------------------\n\nTITLE: Nested Form with Proper Updates\nDESCRIPTION: Complete form implementation showing proper nested dictionary state management.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/add-interactivity/update-dictionaries-in-state.md#2025-04-17_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef form():\n    person, set_person = ui.use_state(\n        {\n            \"first_name\": \"John\",\n            \"last_name\": \"Doe\",\n            \"contact\": {\"email\": \"jondoe@domain.com\", \"phone\": \"555-5555\"},\n        }\n    )\n\n    return [\n        ui.text_field(\n            label=\"First name\",\n            value=person[\"first_name\"],\n            on_change=lambda new_first_name: set_person(\n                {\n                    **person,\n                    \"first_name\": new_first_name,\n                }\n            ),\n        ),\n        ui.text_field(\n            label=\"Last name\",\n            value=person[\"last_name\"],\n            on_change=lambda new_last_name: set_person(\n                {**person, \"last_name\": new_last_name}\n            ),\n        ),\n        ui.text_field(\n            label=\"Email\",\n            value=person[\"contact\"][\"email\"],\n            on_change=lambda new_email: set_person(\n                {**person, \"contact\": {**person[\"contact\"], \"email\": new_email}}\n            ),\n        ),\n        ui.text_field(\n            label=\"Phone\",\n            value=person[\"contact\"][\"phone\"],\n            on_change=lambda new_phone: set_person(\n                {**person, \"contact\": {**person[\"contact\"], \"phone\": new_phone}}\n            ),\n        ),\n        ui.text(\n            f'{person[\"first_name\"]} {person[\"last_name\"]} {person[\"contact\"][\"email\"]} {person[\"contact\"][\"phone\"]}'\n        ),\n    ]\n\nform_example = form()\n```\n\n----------------------------------------\n\nTITLE: Implementing Grouped State with a Date Range Component in Deephaven UI (Python)\nDESCRIPTION: Complete example of a UI component that uses a single state variable to manage a date range object. Shows how to initialize the state and use it with a range calendar component.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/managing-state/choose-the-state-structure.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef example():\n    date_range, set_date_range = ui.use_state(\n        {\"start\": \"2020-02-03\", \"end\": \"2020-02-08\"}\n    )\n    return ui.range_calendar(\n        aria_label=\"Date range (controlled)\", value=date_range, on_change=set_date_range\n    )\n\n\nmy_example = example()\n```\n\n----------------------------------------\n\nTITLE: Creating Line Plot with Multiple Y-Axes in Python using Deephaven Express\nDESCRIPTION: Creates a line plot with separate y-axes for population and GDP per capita using yaxis_sequence parameter. Shows how to split variables onto different axes for better visualization.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/plotly-express/docs/multiple-axes.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.plot.express as dx\ngapminder = dx.data.gapminder()\n\n# get a specific country\nbrazil = gapminder.where(\"Country == `Brazil`\")\n\n# specify multiple y-axis columns and split axes with yaxis_sequence\nline_plot_multi = dx.line(brazil, x=\"Year\", y=[\"Pop\", \"GdpPerCap\"], yaxis_sequence=[1, 2])\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Candlestick Plot with OHLC Data in Python\nDESCRIPTION: Demonstrates how to create a basic candlestick plot using Deephaven's plot.express library. The example aggregates stock data by minute to calculate Open, High, Low, and Close values, then filters for a specific stock symbol 'DOG' before visualizing.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/plotly-express/docs/candlestick.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.plot.express as dx\nimport deephaven.agg as agg\nstocks = dx.data.stocks()\n\n# compute ohlc per symbol for each minute\nstocks_1min_ohlc = stocks.update_view(\n    \"BinnedTimestamp = lowerBin(Timestamp, 'PT1m')\"\n).agg_by(\n    [\n        agg.first(\"Open=Price\"),\n        agg.max_(\"High=Price\"),\n        agg.min_(\"Low=Price\"),\n        agg.last(\"Close=Price\"),\n    ],\n    by=[\"Sym\", \"BinnedTimestamp\"],\n)\n\ncandlestick_plot = dx.candlestick(\n    stocks_1min_ohlc.where(\"Sym == `DOG`\"),\n    x=\"BinnedTimestamp\",\n    open=\"Open\",\n    high=\"High\",\n    low=\"Low\",\n    close=\"Close\",\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing use_callback in a Deephaven UI Component\nDESCRIPTION: This example demonstrates how to use the use_callback hook in a Deephaven UI component. It creates a server connection callback and uses it in an effect, while also implementing a theme picker.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/hooks/use_callback.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\nimport time\n\n\n@ui.component\ndef ui_server():\n    theme, set_theme = ui.use_state(\"red\")\n\n    create_server = ui.use_callback(lambda: {\"host\": \"localhost\"}, [])\n\n    def connect():\n        server = create_server()\n        print(f\"Connecting to {server}\")\n        time.sleep(0.5)\n\n    ui.use_effect(connect, [create_server])\n\n    return ui.view(\n        ui.picker(\n            \"red\",\n            \"orange\",\n            \"yellow\",\n            label=\"Theme\",\n            selected_key=theme,\n            on_change=set_theme,\n        ),\n        padding=\"size-100\",\n        background_color=theme,\n    )\n\n\nmy_server = ui_server()\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-Query Components with URI Resolution\nDESCRIPTION: Demonstrates how to create components that retrieve data from multiple queries using the URI resolver. This allows combining data sources from different persistent queries into a single component.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/DESIGN.md#2025-04-17_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n# Persistent Query 'A'\nt = empty_table(100).update(\"a=i\")\n\n# Persistent Query 'B'\nt = empty_table(100).update(\"b=i\")\n\n# Executed in console session or a 3rd query\nimport deephaven.ui as ui\nfrom deephaven.uri import resolve\n\n\n@ui.component\ndef multi_query():\n    # Since the `resolve` method is only called from within a `@ui.component` wrapped function, it is only called when the component is actually rendered (e.g. opened in the UI)\n    # Note however this is still resolving the table on the server side, rather than the client fetching the table directly.\n    t1 = resolve(\"dh+plain://query-a:10000/scope/t\")\n    t2 = resolve(\"dh+plain://query-b:10000/scope/t\")\n    return [t1, t2]\n\n\nmq = multi_query()\n```\n\n----------------------------------------\n\nTITLE: Implementing Controlled and Uncontrolled Color Pickers in Python\nDESCRIPTION: Demonstrates the creation of both controlled and uncontrolled color pickers using the ui.component decorator. The controlled picker uses state management with ui.use_state.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/color_picker.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef ui_color_picker_value():\n    value, set_value = ui.use_state(\"#65C4D7\")\n\n    return [\n        ui.color_picker(label=\"Uncontrolled\", default_value=\"#65C4D7\"),\n        ui.color_picker(label=\"Controlled\", value=value, on_change=set_value),\n    ]\n\n\nmy_color_picker_value = ui_color_picker_value()\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Default Component and List Layouts in Python\nDESCRIPTION: This snippet illustrates the default layout behavior for single components and lists of components when used with @ui.component decorator. It shows how components are automatically wrapped in a panel with a flex layout.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/creating-layouts/layout-overview.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef single_component():\n    return ui.text(\"hello\")\n\n\n@ui.component\ndef list_of_components():\n    return [ui.heading(\"hello\"), ui.text(\"good bye\"), ui.button(\"button\")]\n\n\nsingle_example = single_component()\nlist_example = list_of_components()\n```\n\n----------------------------------------\n\nTITLE: Creating a Nested Sunburst Plot with Branch Values in Deephaven\nDESCRIPTION: This example shows how to create a nested sunburst plot with branch values using Deephaven's plot express library. It demonstrates the use of the 'branchvalues' parameter and merging multiple data views.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/plotly-express/docs/sunburst.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.plot.express as dx\nfrom deephaven import merge\n\ndata = dx.data.gapminder(ticking=False)\n\ncountries = data.last_by(\"Country\").view([\"Name=Country\", \"Pop\", \"Parent=Continent\"])\n\n# Sum country population by continent\ncontinents = (\n    countries.drop_columns(\"Name\")\n    .sum_by(\"Parent\")\n    .view([\"Name=Parent\", \"Pop\", \"Parent=`World`\"])\n)\n\n# Sum continent population\nworld = (\n    continents.view(\"Pop\").sum_by().view([\"Name=`World`\", \"Pop\", \"Parent=(String)null\"])\n)\n\nmerged_gapminder = merge([world, continents, countries])\n\n# Since the values column is equal to the sum of it's children, set branchvalues to \"total\"\nsunburst_nested = dx.sunburst(\n    merged_gapminder, names=\"Name\", values=\"Pop\", parents=\"Parent\", branchvalues=\"total\"\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Text Input to Filter a Plot in Deephaven UI\nDESCRIPTION: Creates a text input component that filters a plot based on a column value. The component uses state management to update the plot when the input changes, displaying only data matching the entered value.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/DESIGN.md#2025-04-17_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.ui as ui\n\n\n@ui.component\ndef text_input_plot(source: Table, column: str = \"Sym\"):\n    value, set_value = ui.use_state(\"\")\n\n    # Create the plot by filtering the source using the currently selected value\n    # TODO: Is this link visible in the UI or just implicit?\n    p = ui.use_memo(\n        lambda: plot_xy(t=source.where(f\"{column}=`{value}`\"), x=\"Timestamp\", y=\"Last\"),\n        [value],\n    )\n\n    return ui.flex(\n        [\n            # Text input will update the value when it is changed\n            ui.text_input(\n                value=value, on_change=lambda event: set_value(event[\"value\"])\n            ),\n            # Plot will be filtered/updated based on the above logic\n            p,\n        ]\n    )\n```\n\n----------------------------------------\n\nTITLE: Interactive Counter Button Implementation\nDESCRIPTION: Creates a button that maintains and displays a counter state, incrementing on each press.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/button.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef counter():\n    count, set_count = use_state(0)\n    return ui.button(\n        f\"Pressed {count} times\",\n        on_press=lambda: set_count(count + 1),\n    )\n\n\ncounter_example = counter()\n```\n\n----------------------------------------\n\nTITLE: Implementing State Management with Deephaven UI in Python\nDESCRIPTION: Example showing how to manage state using the flattened data structure with Deephaven UI integration. Demonstrates the basic setup for the travel plan data.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/managing-state/choose-the-state-structure.md#2025-04-17_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\ninitial_travel_plan = {\n    0: {\n        \"id\": 0,\n        \"title\": \"(Root)\",\n        \"child_ids\": [1, 42, 46],\n    },\n    1: {\"id\": 1, \"title\": \"Earth\", \"child_ids\": [2, 10, 19, 26, 34]},\n    2: {\"id\": 2, \"title\": \"Africa\", \"child_ids\": [3, 4, 5, 6, 7, 8, 9]},\n    3: {\"id\": 3, \"title\": \"Botswana\", \"child_ids\": []},\n    4: {\"id\": 4, \"title\": \"Egypt\", \"child_ids\": []},\n    5: {\"id\": 5, \"title\": \"Kenya\", \"child_ids\": []},\n    6: {\"id\": 6, \"title\": \"Madagascar\", \"child_ids\": []},\n    7: {\"id\": 7, \"title\": \"Morocco\", \"child_ids\": []},\n    8: {\"id\": 8, \"title\": \"Nigeria\", \"child_ids\": []},\n    9: {\"id\": 9, \"title\": \"South Africa\", \"child_ids\": []},\n    10: {\n        \"id\": 10,\n        \"title\": \"Americas\",\n        \"child_ids\": [11, 12, 13, 14, 15, 16, 17, 18],\n    },\n    11: {\"id\": 11, \"title\": \"Argentina\", \"child_ids\": []},\n    12: {\"id\": 12, \"title\": \"Brazil\", \"child_ids\": []},\n    13: {\"id\": 13, \"title\": \"Barbados\", \"child_ids\": []},\n    14: {\"id\": 14, \"title\": \"Canada\", \"child_ids\": []},\n    15: {\"id\": 15, \"title\": \"Jamaica\", \"child_ids\": []},\n    16: {\"id\": 16, \"title\": \"Mexico\", \"child_ids\": []}\n```\n\n----------------------------------------\n\nTITLE: Accessing Component Props in Event Handlers with Deephaven UI\nDESCRIPTION: An example showing how event handlers can access component props since they are defined inside the component. This creates buttons that print different messages based on their props.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/add-interactivity/respond-to-events.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef custom_button(label, message):\n    return ui.button(label, on_press=lambda: print(message))\n\n\n@ui.component\ndef toolbar():\n    return [\n        custom_button(\"Play Movie\", \"Playing!\"),\n        custom_button(\"Upload Image\", \"Uploading!\"),\n    ]\n\n\nread_props_example = toolbar()\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Polar Line Plot with Deephaven\nDESCRIPTION: This snippet demonstrates how to create a basic polar line plot using Deephaven's plotting library. It visualizes wind data, using frequency for the radial component and direction for the angular component, grouped by wind strength.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/plotly-express/docs/line-polar.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.plot.express as dx\nwind = dx.data.wind()\n\n# `by` is used to separate data by groups\npolar_line_plot = dx.line_polar(wind, r=\"Frequency\", theta=\"Direction\", by=\"Strength\")\n```\n\n----------------------------------------\n\nTITLE: Creating Grouped Box Plots with Deephaven Plot Express\nDESCRIPTION: Shows how to create box plots for multiple groups using Deephaven's plot express library. It creates two grouped box plots: one grouping by 'Smoker' status and another by 'Sex', both for the 'TotalBill' column.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/plotly-express/docs/box.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.plot.express as dx\ntips = dx.data.tips()\n\n# total bill distribution by Smoker / non-Smoker\nbox_plot_group_1 = dx.box(tips, y=\"TotalBill\", by=\"Smoker\")\n\n# total bill distribution by male / female\nbox_plot_group_2 = dx.box(tips, y=\"TotalBill\", by=\"Sex\")\n```\n\n----------------------------------------\n\nTITLE: Creating Pickers with Various Configuration Options in Deephaven UI (Python)\nDESCRIPTION: Demonstrates multiple ways to create and configure picker components in Deephaven UI, including uncontrolled/controlled pickers, using sections, working with tables, and creating complex pickers with partitioned data sources.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/DESIGN.md#2025-04-17_snippet_55\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.ui as ui\n\n# simple picker that takes ui.items and is uncontrolled\npicker1 = ui.picker(\n    ui.item(\"Option 1\"),\n    ui.item(\"Option 2\"),\n    ui.item(\"Option 3\"),\n    ui.item(\"Option 4\"),\n    default_selected_key=\"Option 2\"\n)\n\n# simple picker that takes picker options directly and is controlled\noption, set_option = ui.use_state(\"Option 2\")\n\npicker2 = ui.picker(\n    \"Option 1\",\n    \"Option 2\",\n    \"Option 3\",\n    \"Option 4\",\n    selected_key=option,\n    on_selection_change=set_option\n)\n\n# manually create a section with items\npicker3 = ui.picker(\n    ui.section(\n        ui.item(\"Option 1\"),\n        ui.item(\"Option 2\"),\n        title=\"Section 1\"\n    ),\n    ui.section(\n        ui.item(\"Option 3\"),\n        ui.item(\"Option 4\"),\n        title=\"Section 2\"\n    )\n)\n\n# manually create a section with picker options directly\npicker4 = ui.picker(\n    ui.section(\n        \"Option 1\",\n        \"Option 2\",\n    ),\n    ui.section(\n        \"Option 3\",\n        \"Option 4\",\n    )\n)\n\nfrom deephaven import empty_table\n\ntable1 = empty_table(4).update_view(\"data=i\")\ntable2 = empty_table(1).update_view(\"data=10\")\n\n# data hooks can be used to create a picker from a table\n# this should be avoided as it is not as performant as just passing in the table directly\noptions = ui.use_column_data(table1)\n\npicker5 = ui.picker(\n    children=options\n)\n\n# instead, pass in the table directly\npicker6 = ui.picker(\n    table1\n)\n\nfrom deephaven import new_table\nfrom deephaven.column import string_col, int_col\n\ncolor_table = new_table([\n    string_col(\"Sections\", [\"Interesting Colors\", 'Interesting Colors', \"Other Colors\"]),\n    string_col(\"SectionNames\", [\"Favorites\", 'Favorites', \"Other\"]),\n    int_col(\"Keys\", [\"salmon\", \"lemonchiffon\", \"black\"]),\n    string_col(\"Labels\", [\"Salmon\", \"Lemon Chiffon\", \"Black\"]),\n    string_col(\"Descriptions\", [\"An interesting color\", \"Another interesting color\", \"A color\"]),\n    string_col(\"Icons\", [\"Amusementpark\", \"Teapot\", \"Sentiment Negative\"])\n])\npartitioned_table = color_table.partition_by(\"Sections\")\n\ncolor, set_color = ui.use_state(\"salmon\")\n\n# this will create a picker with two sections, one for each partition\n# in order to customize the columns used for the picker, use an item_table_source\nsource = ui.item_table_source(\n    partitioned_table,\n    key_column=\"Keys\",\n    label_column=\"Labels\",\n    description_column=\"Descriptions\",\n    icon_column=\"Icons\",\n    title_column=\"SectionNames\"\n)\n\npicker7 = ui.picker(\n    source,\n    selected_key=color,\n    on_selection_change=set_color\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering with If/Else Statements\nDESCRIPTION: Shows how to use if/else statements to conditionally render different content based on the is_packed property.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/describing/conditional_rendering.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef item(name, is_packed):\n    if is_packed:\n        return ui.text(\"- \", name + \" ✅\")\n    return ui.text(\"- \", name)\n\n@ui.component\ndef packing_list():\n    return ui.flex(\n        ui.heading(\"Packing list\"),\n        item(\"Clothes\", is_packed=True),\n        item(\"Shoes\", is_packed=True),\n        item(\"Wallet\", is_packed=False),\n        direction=\"column\",\n    )\n\nmy_packing_list = packing_list()\n```\n\n----------------------------------------\n\nTITLE: Configuring Dashboard with Varying Column Widths in Python\nDESCRIPTION: Illustrates how to create a dashboard with columns of different widths using the Deephaven UI library.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/dashboard.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\ndash_column_widths = ui.dashboard(\n    [\n        ui.column(\n            ui.stack(ui.panel(\"A\", title=\"A\")), ui.panel(\"C\", title=\"C\"), width=70\n        ),\n        ui.column(ui.stack(ui.panel(\"B\", title=\"B\")), ui.panel(\"D\", title=\"D\")),\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Basic Todo List with Memo Hook\nDESCRIPTION: Demonstrates basic usage of use_memo hook to cache filtered todo items based on dependencies.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/hooks/use_memo.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef ui_todo_list(todos: list[str], filter: str):\n    filtered_todos = ui.use_memo(\n        lambda: [todo for todo in todos if filter in todo], [todos, filter]\n    )\n\n    return [\n        ui.text(f\"Showing {len(filtered_todos)} of {len(todos)} todos\"),\n        *[ui.checkbox(todo) for todo in filtered_todos],\n    ]\n\n\nresult = ui_todo_list([\"Do grocery shopping\", \"Walk the dog\", \"Do laundry\"], \"Do\")\n```\n\n----------------------------------------\n\nTITLE: Using Multiple State Variables vs. Combined State Object in Deephaven UI (Python)\nDESCRIPTION: Demonstrates two approaches to handling related state: using separate state variables for start and end dates versus using a single state variable with an object containing both values.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/managing-state/choose-the-state-structure.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nstart_date, set_start_date = ui.use_state(\"2020-02-03\")\nend_date, set_end_date = ui.use_state(\"2020-02-08\")\n```\n\nLANGUAGE: python\nCODE:\n```\ndate_range, set_date_range = ui.use_state({\"start\": \"2020-02-03\", \"end\": \"2020-02-08\"})\n```\n\n----------------------------------------\n\nTITLE: Handling Dialog Events in Python with Deephaven UI\nDESCRIPTION: This snippet demonstrates how to handle events in a dialog, including custom callbacks for save and cancel actions.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/dialog.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef print_example():\n    is_open, set_open = ui.use_boolean()\n\n    def print_save():\n        set_open.off()\n        print(\"Profile saved!\")\n\n    def print_cancel():\n        set_open.off()\n        print(\"Provfile not saved!\")\n\n    return ui.dialog_trigger(\n        ui.action_button(\"Set Profile\", on_press=set_open.on),\n        ui.dialog(\n            ui.heading(\"Profile\"),\n            ui.content(\n                ui.form(ui.text_field(label=\"Name\"), ui.checkbox(\"Make private\"))\n            ),\n            ui.button_group(\n                ui.button(\"Cancel\", variant=\"secondary\", on_press=print_cancel),\n                ui.button(\"Confirm\", variant=\"accent\", on_press=print_save),\n            ),\n        ),\n        is_open=is_open,\n    )\n\nmy_print_example = print_example()\n```\n\n----------------------------------------\n\nTITLE: Using Tables Directly with UI Components (Python)\nDESCRIPTION: This snippet shows how to use Deephaven tables directly with UI components like list_view and picker, including the use of item_table_source for creating complex items from a table.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/describing/ui_with_tables.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui, new_table, empty_table\nfrom deephaven.column import string_col\n\n_colors = new_table(\n    [\n        string_col(\"Colors\", [\"Red\", \"Blue\", \"Green\"]),\n    ]\n)\n\n\n@ui.component\ndef ui_list_view_table():\n    return ui.list_view(_colors)\n\n\nlist_view_table_example = ui_list_view_table()\n\nicon_names = [\"vsAccount\"]\ncolumns = [\n    \"Key=new Integer(i)\",\n    \"Label=new String(`Display `+i)\",\n    \"Icon=(String) icon_names[0]\",\n]\n_column_types = empty_table(20).update(columns)\n\nitem_table_source = ui.item_table_source(\n    _column_types,\n    key_column=\"Key\",\n    label_column=\"Label\",\n    icon_column=\"Icon\",\n)\n\npicker_item_table_source_example = ui.picker(item_table_source, label=\"User Picker\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Controlled and Uncontrolled Range Sliders in Python\nDESCRIPTION: This example shows how to create both controlled and uncontrolled range sliders, including state management and change handling.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/range_slider.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef range_slider_value_example():\n    value, set_value = ui.use_state({\"start\": 25, \"end\": 75})\n\n    def handle_value_change(new_value):\n        print(f\"Range changed to {new_value}\")\n        set_value(new_value)\n\n    return [\n        ui.range_slider(\n            default_value={\"start\": 25, \"end\": 75}, label=\"Range (uncontrolled)\"\n        ),\n        ui.range_slider(\n            value=value, on_change=handle_value_change, label=\"Range (controlled)\"\n        ),\n    ]\n\n\nmy_range_slider_value_example = range_slider_value_example()\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering in Deephaven UI - Python\nDESCRIPTION: Extends the random number generator example to demonstrate conditional rendering, where components can switch between text and heading display based on a boolean flag.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/describing/your-ui-as-a-tree.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\nimport random\n\n@ui.component\ndef random_generator():\n    num, set_num = ui.use_state()\n    flag, set_flag = ui.use_boolean()\n\n    def generate():\n        set_flag.toggle()\n        set_num(random.random())\n\n    return ui.flex(\n        ui.text(f\"Random text: {num}\")\n        if flag\n        else ui.heading(f\"Random heading: {num}\"),\n        ui.button(\"Generate random number\", on_press=generate),\n        direction=\"column\",\n    )\n\n@ui.component\ndef app():\n    return ui.flex(\n        ui.heading(\"Random Number Generator\"),\n        random_generator(),\n        direction=\"column\",\n    )\n\nmy_app = app()\n```\n\n----------------------------------------\n\nTITLE: Form Example with Correct Updates\nDESCRIPTION: Complete form component implementation using proper dictionary state updates with spreading operator.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/add-interactivity/update-dictionaries-in-state.md#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef form():\n    person, set_person = ui.use_state(\n        {\n            \"first_name\": \"John\",\n            \"last_name\": \"Doe\",\n            \"email\": \"jondoe@domain.com\",\n        }\n    )\n\n    return [\n        ui.text_field(\n            label=\"First name\",\n            value=person[\"first_name\"],\n            on_change=lambda new_first_name: set_person(\n                {\n                    **person,\n                    \"first_name\": new_first_name,\n                }\n            ),\n        ),\n        ui.text_field(\n            label=\"Last name\",\n            value=person[\"last_name\"],\n            on_change=lambda new_last_name: set_person(\n                {\n                    **person,\n                    \"last_name\": new_last_name,\n                }\n            ),\n        ),\n        ui.text_field(\n            label=\"Email\",\n            value=person[\"email\"],\n            on_change=lambda new_email: set_person({**person, \"email\": new_email}),\n        ),\n        ui.text(f'{person[\"first_name\"]} {person[\"last_name\"]} {person[\"email\"]}'),\n    ]\n\nform_example = form()\n```\n\n----------------------------------------\n\nTITLE: Implementing Summary Badges Component in Python\nDESCRIPTION: Creates a UI component that displays summary statistics for the selected Iris species using badges. It filters data based on the selected species and formats the values for display.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/tutorial.md#2025-04-17_snippet_27\n\nLANGUAGE: Python\nCODE:\n```\n@ui.component\ndef summary_badges(species):\n  # Filter the tables to the selected species\n  species_min = iris_min.where(\"Species=species\")\n  species_max = iris_max.where(\"Species=species\")\n  species_avg = iris_avg.where(\"Species=species\")\n  \n  # Pull the desired columns from the tables before using the hooks\n  sepal_length_min = ui.use_cell_data(species_min.view([\"SepalLength\"]))\n  sepal_width_min = ui.use_cell_data(species_min.view([\"SepalWidth\"]))\n  sepal_length_max = ui.use_cell_data(species_max.view([\"SepalLength\"]))\n  sepal_width_max = ui.use_cell_data(species_max.view([\"SepalWidth\"]))\n  sepal_length_avg = ui.use_cell_data(species_avg.view([\"SepalLength\"]))\n  sepal_width_avg = ui.use_cell_data(species_avg.view([\"SepalWidth\"]))\n\n  # format the values to 3 decimal places\n  # set flex_grow to 0 to prevent the badges from growing \n  return ui.flex(\n    ui.badge(f\"SepalLength Min: {sepal_length_min:.3f}\", variant=\"info\"), \n    ui.badge(f\"SepalLength Max: {sepal_length_max:.3f}\", variant=\"info\"),\n    ui.badge(f\"SepalLength Avg: {sepal_length_avg:.3f}\", variant=\"info\"),\n    ui.badge(f\"SepalWidth Min: {sepal_width_min:.3f}\", variant=\"info\"), \n    ui.badge(f\"SepalWidth Max: {sepal_width_max:.3f}\", variant=\"info\"),\n    ui.badge(f\"SepalWidth Avg: {sepal_width_avg:.3f}\", variant=\"info\"),\n    flex_grow=0\n  )\n```\n\n----------------------------------------\n\nTITLE: Dashboard Configuration\nDESCRIPTION: Complete configuration options for creating a dashboard including filters, links, settings, and event callbacks.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/DESIGN.md#2025-04-17_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.ui as ui\nui_dashboard= ui.dashboard(\n    root: Element,\n    label: Optional[str] = None,\n    description: Optional[str] = None,\n    background_color: Optional[Color] = None,\n    filters: Optional[DashboardFilter[]] = None,\n    links: Optional[Link[]] = None,\n    settings: Optional[DashboardSettings] = None,\n    on_focus: Optional[Callable[[UIDashboard], None]] = None,\n    on_blur: Optional[Callable[[UIDashboard], None]] = None,\n    on_hide: Optional[Callable[[UIDashboard], None]] = None,\n    on_show: Optional[Callable[[UIDashboard], None]] = None,\n    on_open: Optional[Callable[[UIDashboard], None]] = None,\n    on_close: Optional[Callable[[UIDashboard], None]] = None,\n) -> UIDashboard\n```\n\n----------------------------------------\n\nTITLE: Creating and plotting a bar chart with Deephaven Plot Express\nDESCRIPTION: Creates a sample table and uses Deephaven Plot Express to generate a bar chart. This example shows how to use the plugin with Deephaven tables.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/plotly-express/README.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven.column import int_col, string_col\nimport deephaven.plot.express as dx\nfrom deephaven import new_table\n\nsource = new_table(\n    [\n        string_col(\"Categories\", [\"A\", \"B\", \"C\"]),\n        int_col(\"Values\", [1, 3, 5]),\n    ]\n)\n\nfig = dx.bar(table=source, x=\"Categories\", y=\"Values\")\n```\n\n----------------------------------------\n\nTITLE: Creating Date Picker Variants in Python\nDESCRIPTION: Showcases different variants of date pickers, including those with descriptions, error messages, validation states, min/max values, specific time formats, and various granularities.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/date_picker.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef date_picker_variants():\n    return [\n        ui.date_picker(description=\"description\"),\n        ui.date_picker(error_message=\"error\", validation_state=\"valid\"),\n        ui.date_picker(error_message=\"error\", validation_state=\"invalid\"),\n        ui.date_picker(min_value=\"2024-01-01\", max_value=\"2024-01-05\"),\n        ui.date_picker(value=\"2024-07-27T16:10:10 America/New_York\", hour_cycle=24),\n        ui.date_picker(granularity=\"YEAR\"),\n        ui.date_picker(granularity=\"MONTH\"),\n        ui.date_picker(granularity=\"DAY\"),\n        ui.date_picker(granularity=\"HOUR\"),\n        ui.date_picker(granularity=\"MINUTE\"),\n        ui.date_picker(granularity=\"SECOND\"),\n    ]\n\n\ndate_picker_variants_example = date_picker_variants()\n```\n\n----------------------------------------\n\nTITLE: Demonstrating State Isolation Between Component Instances\nDESCRIPTION: This example shows how state is isolated to component instances. Two instances of the same component maintain separate state, with changes to one not affecting the other. The parent component doesn't need to know about the child component's state.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/add-interactivity/state-a-components-memory.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\nword_list = [\"apple\", \"banana\", \"cherry\", \"orange\", \"kiwi\", \"strawberry\"]\ndetail_list = [\n    \"An apple is a round, edible fruit produced by an apple tree.\",\n    \"A banana is an elongated, edible fruit.\",\n    \"A cherry is the fruit of many plants of the genus Prunus.\",\n    \"The oranges the fruit of a tree in the family Rutaceae.\",\n    \"Kiwi has a thin, fuzzy, fibrous, tart but edible, light brown skin and light green or golden flesh with rows of tiny, black, edible seeds.\",\n    \"The genus Fragaria, the strawberries, is in the rose family, Rosaceae.\",\n]\n\n\n@ui.component\ndef word_display():\n    index, set_index = ui.use_state(0)\n    show_more, set_show_more = ui.use_state(False)\n\n    def handle_press():\n        set_index(index + 1)\n\n    def handle_more_press():\n        set_show_more(not show_more)\n\n    word = word_list[index]\n    detail = detail_list[index]\n\n    return ui.flex(\n        ui.button(\"Next\", on_press=handle_press),\n        ui.text(f\"({index+1} of {len(word_list)})\"),\n        ui.heading(word),\n        ui.button(\"Show Details\", on_press=handle_more_press),\n        show_more and ui.text(detail),\n        direction=\"column\",\n    )\n\n\n@ui.component\ndef page():\n    return ui.flex(word_display(), word_display())\n\n\npage_example = page()\n```\n\n----------------------------------------\n\nTITLE: Nesting Flex Containers in Deephaven UI\nDESCRIPTION: This snippet demonstrates how to nest flex containers within each other to create more complex layouts in Deephaven UI. It shows a column layout with a nested row layout inside.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/flex.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef ui_flex_nesting():\n    return [\n        ui.flex(\n            ui.view(1, background_color=\"red\", height=\"size-800\"),\n            ui.flex(\n                ui.view(\n                    2, background_color=\"green\", height=\"size-800\", width=\"size-800\"\n                ),\n                ui.view(\n                    3, background_color=\"blue\", height=\"size-800\", width=\"size-800\"\n                ),\n            ),\n            direction=\"column\",\n        ),\n    ]\n\nmy_flex_nesting = ui_flex_nesting()\n```\n\n----------------------------------------\n\nTITLE: Plotting Filtered Tables Based on User Input in Deephaven\nDESCRIPTION: Shows how to create a line plot that updates in real-time based on user input. The component filters a stock data table based on the stock symbol entered by the user in a text field.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/add-interactivity/plot-with-deephaven-ui.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.plot.express as dx\nimport deephaven.ui as ui\n\n_stocks = dx.data.stocks()\n\n\n@ui.component\ndef plot_filtered_table(table, initial_value):\n    text, set_text = ui.use_state(initial_value)\n    # the filter is memoized so that it is only recalculated when the text changes\n    filtered_table = ui.use_memo(\n        lambda: table.where(f\"Sym = `{text.upper()}`\"), [table, text]\n    )\n    plot = ui.use_memo(\n        lambda: dx.line(\n            filtered_table, x=\"Timestamp\", y=\"Price\", title=f\"Filtered by: {text}\"\n        ),\n        [filtered_table, text],\n    )\n    return [ui.text_field(value=text, on_change=set_text), plot]\n\n\np = plot_filtered_table(_stocks, \"DOG\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Nested Icicle Plot with Branch Values in Python\nDESCRIPTION: This code snippet shows how to create a more complex nested icicle plot with three hierarchical levels (world, continents, countries). It demonstrates proper handling of branch values by setting the branchvalues parameter to 'total' when the values column equals the sum of its children.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/plotly-express/docs/icicle.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.plot.express as dx\nfrom deephaven import merge\n\ndata = dx.data.gapminder(ticking=False)\n\ncountries = data.last_by(\"Country\").view([\"Name=Country\", \"Pop\", \"Parent=Continent\"])\n\n# Sum country population by continent\ncontinents = (\n    countries.drop_columns(\"Name\")\n    .sum_by(\"Parent\")\n    .view([\"Name=Parent\", \"Pop\", \"Parent=`World`\"])\n)\n\n# Sum continent population\nworld = (\n    continents.view(\"Pop\").sum_by().view([\"Name=`World`\", \"Pop\", \"Parent=(String)null\"])\n)\n\nmerged_gapminder = merge([world, continents, countries])\n\n# Since the values column is equal to the sum of it's children, set branchvalues to \"total\"\nicicle_nested = dx.icicle(\n    merged_gapminder, names=\"Name\", values=\"Pop\", parents=\"Parent\", branchvalues=\"total\"\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Time Table Filtering with Calendar in Python\nDESCRIPTION: Shows how to use calendars for filtering time tables, allowing selection of start and end dates to filter a time-based table.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/calendar.md#2025-04-17_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven.time import dh_now\nfrom deephaven import time_table, ui\n\n\n@ui.component\ndef date_table_filter(table, start_date, end_date, time_col=\"Timestamp\"):\n    after_date, set_after_date = ui.use_state(start_date)\n    before_date, set_before_date = ui.use_state(end_date)\n    return [\n        ui.flex(\n            ui.calendar(\n                aria_label=\"Start Date\", value=after_date, on_change=set_after_date\n            ),\n            ui.calendar(\n                aria_label=\"End Date\", value=before_date, on_change=set_before_date\n            ),\n        ),\n        table.where(f\"{time_col} >= after_date  && {time_col} < before_date\"),\n    ]\n\n\nSECONDS_IN_DAY = 86400\ntoday = dh_now()\n_table = time_table(\"PT1s\").update_view(\n    [\"Timestamp=today.plusSeconds(SECONDS_IN_DAY*i)\", \"Row=i\"]\n)\ndate_filter = date_table_filter(_table, today, today.plusSeconds(SECONDS_IN_DAY * 10))\n```\n\n----------------------------------------\n\nTITLE: OHLC Plot with Calendar Integration in Python\nDESCRIPTION: Shows how to create OHLC plots with different calendar configurations including named calendars, calendar objects, and default calendar settings. Uses NYSE calendar example for time-based filtering.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/plotly-express/docs/ohlc.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.plot.express as dx\nimport deephaven.agg as agg\nfrom deephaven.calendar import calendar, set_calendar\n\ncal_name = \"USNYSE_EXAMPLE\"\ncal = calendar(cal_name)\nset_calendar(cal_name)\n\nstocks = dx.data.stocks(starting_time=\"2018-06-01T09:27:00 ET\")\n\n# compute ohlc per symbol for each minute\nstocks_1min_ohlc = stocks.update_view(\n    \"BinnedTimestamp = lowerBin(Timestamp, 'PT1m')\"\n).agg_by(\n    [\n        agg.first(\"Open=Price\"),\n        agg.max_(\"High=Price\"),\n        agg.min_(\"Low=Price\"),\n        agg.last(\"Close=Price\"),\n    ],\n    by=[\"Sym\", \"BinnedTimestamp\"],\n)\n\ndog_prices = stocks.where(\"Sym = `DOG`\")\n\n# plot with a specific calendar by name\nohlc_plot_cal_name = dx.ohlc(\n    stocks_1min_ohlc.where(\"Sym == `DOG`\"),\n    x=\"BinnedTimestamp\",\n    open=\"Open\",\n    high=\"High\",\n    low=\"Low\",\n    close=\"Close\",\n    calendar=cal_name,\n)\n\n# plot with a specific calendar object\nohlc_plot_cal = dx.ohlc(\n    stocks_1min_ohlc.where(\"Sym == `DOG`\"),\n    x=\"BinnedTimestamp\",\n    open=\"Open\",\n    high=\"High\",\n    low=\"Low\",\n    close=\"Close\",\n    calendar=cal,\n)\n\n# plot with the default calendar\nohlc_plot_default = dx.ohlc(\n    stocks_1min_ohlc.where(\"Sym == `DOG`\"),\n    x=\"BinnedTimestamp\",\n    open=\"Open\",\n    high=\"High\",\n    low=\"Low\",\n    close=\"Close\",\n    calendar=True,\n)\n```\n\n----------------------------------------\n\nTITLE: Table State Management with Liveness Scope\nDESCRIPTION: Shows how to properly manage table state using the use_liveness_scope hook to prevent garbage collection issues.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/add-interactivity/update-tables-in-state.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui, time_table\n\n@ui.component\ndef ui_resetable_table():\n    table, set_table = ui.use_state(lambda: time_table(\"PT1s\"))\n    handle_press = ui.use_liveness_scope(lambda _: set_table(time_table(\"PT1s\")), [])\n    return [\n        ui.action_button(\n            \"Reset\",\n            on_press=handle_press,\n        ),\n        table,\n    ]\n\nresetable_table = ui_resetable_table()\n```\n\n----------------------------------------\n\nTITLE: Customizing Gauge Colors in Indicator Plots in Python\nDESCRIPTION: Shows how to customize the colors of gauge visualizations in indicator plots. Colors are applied sequentially and looped for multiple indicators.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/plotly-express/docs/indicator.md#2025-04-17_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.plot.express as dx\nfrom deephaven import agg as agg\n\nmy_table = dx.data.stocks()\n\n# subset data and aggregate for DOG prices\nsym_agg = my_table.where(\"Sym = `DOG`\").agg_by([agg.avg(cols=\"Price\")])\n\nindicator_plot = dx.indicator(\n    sym_agg, value=\"Price\", gauge=\"angular\", gauge_color_sequence=[\"darkgreen\", \"green\"]\n)\n```\n\n----------------------------------------\n\nTITLE: Creating an Interactive Plotly Chart\nDESCRIPTION: Creates a component that displays a filterable line plot of stock prices over time. Users can filter by stock symbol, and the plot updates in real-time based on user input.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/docker/data/storage/notebooks/DEMO.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@ui.component\ndef filterable_plot(source):\n    value, set_value = ui.use_state(\"fish\")\n\n    t = source.where(f\"sym.contains(`{value.upper()}`)\")\n\n    return [\n        ui.text_field(\n            value=value,\n            on_change=set_value,\n            label=\"Sym\",\n            label_position=\"side\",\n        ),\n        dx.line(t, x=\"timestamp\", y=\"price\", by=[\"exchange\"]),\n    ]\n\n\nresult = filterable_plot(stocks)\n```\n\n----------------------------------------\n\nTITLE: Placeholder Implementation with Illustrated Message in Python\nDESCRIPTION: Creates a dynamic placeholder using illustrated message that responds to user input with filter functionality and data display.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/illustrated_message.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\nimport deephaven.plot.express as dx\n\n_stocks = dx.data.stocks()\n\n\n@ui.component\ndef illustrated_message_placeholder_example():\n    filter, set_filter = ui.use_state(\"\")\n    return [\n        ui.text_field(\n            value=filter, label=\"Sym Filter\", is_required=True, on_change=set_filter\n        ),\n        ui.illustrated_message(\n            ui.icon(\"vsFilter\"),\n            ui.heading(\"Filter required\"),\n            ui.content(\"Enter a filter to display filtered table\"),\n            width=\"100%\",\n        )\n        if filter == \"\"\n        else _stocks.where(f\"Sym=`{filter.upper()}`\"),\n    ]\n\n\nmy_illustrated_message_placeholder_example = illustrated_message_placeholder_example()\n```\n\n----------------------------------------\n\nTITLE: Different Input Types for Text Fields\nDESCRIPTION: Shows various input types available for text fields including text, url, tel, email, password, and search.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/text_field.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef ui_text_field_input_types_examples():\n    return ui.form(\n        ui.text_field(label=\"Name\", type=\"text\", is_required=True),\n        ui.text_field(label=\"Personal Website\", type=\"url\", is_required=True),\n        ui.text_field(label=\"Phone\", type=\"tel\", is_required=True),\n        ui.text_field(label=\"Email\", type=\"email\", is_required=True),\n        ui.text_field(label=\"Password\", type=\"password\", is_required=True),\n        ui.text_field(label=\"Search Bar\", type=\"search\"),\n        validation_behavior=\"native\",\n    )\n\nmy_text_field_input_types_examples = ui_text_field_input_types_examples()\n```\n\n----------------------------------------\n\nTITLE: Filtering Todo List with use_memo Hook in Python\nDESCRIPTION: Shows how to use the use_memo hook to efficiently filter a list of todos. The hook memoizes the filtered list, recomputing only when the todos or filter changes.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/describing/use_hooks.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef ui_todo_list(todos: list[str], filter: str):\n    filtered_todos = ui.use_memo(\n        lambda: [todo for todo in todos if filter in todo], [todos, filter]\n    )\n\n    return [\n        ui.text(f\"Showing {len(filtered_todos)} of {len(todos)} todos\"),\n        *[ui.checkbox(todo) for todo in filtered_todos],\n    ]\n\nresult = ui_todo_list([\"Do grocery shopping\", \"Walk the dog\", \"Do laundry\"], \"Do\")\n```\n\n----------------------------------------\n\nTITLE: Creating Grouped and Styled Indicators in Python\nDESCRIPTION: Demonstrates how to create groups of styled indicators using the by parameter and color mapping. Different color maps can be applied to increasing and decreasing values based on the group.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/plotly-express/docs/indicator.md#2025-04-17_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.plot.express as dx\nfrom deephaven import agg as agg\n\nmy_table = dx.data.stocks()\n\n# subset data and aggregate prices, keeping the Sym\nsym_agg = my_table.agg_by(\n    [\n        agg.avg(cols=\"Price\"),\n        agg.first(cols=\"StartingPrice = Price\"),\n    ],\n    by=\"Sym\",\n)\n\nindicator_plot = dx.indicator(\n    sym_agg,\n    value=\"Price\",\n    reference=\"StartingPrice\",\n    by=\"Sym\",\n    by_vars=(\"increasing_color\", \"decreasing_color\"),\n    increasing_color_map={\"DOG\": \"darkgreen\"},\n    decreasing_color_map={\"DOG\": \"darkred\"},\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Combo Box Components with Deephaven UI (Python)\nDESCRIPTION: Examples of implementing ui.combo_box components in both controlled and uncontrolled states. Demonstrates how to create simple combo boxes with predefined options and how to manage selection state with ui.use_state.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/DESIGN.md#2025-04-17_snippet_50\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.ui as ui\n\n# simple combo_box that takes ui.items and is uncontrolled\ncombo_box1 = ui.combo_box(\n    ui.item(\"Option 1\"),\n    ui.item(\"Option 2\"),\n    ui.item(\"Option 3\"),\n    ui.item(\"Option 4\"),\n    default_selected_key=\"Option 2\",\n)\n\n# simple combo_box that takes combo_box options directly and is controlled\noption, set_option = ui.use_state(\"Option 2\")\n\ncombo_box2 = ui.combo_box(\n    \"Option 1\",\n    \"Option 2\",\n    \"Option 3\",\n    \"Option 4\",\n    selected_key=option,\n    on_selection_change=set_option\n)\n```\n\n----------------------------------------\n\nTITLE: Handling Switch Change Events in Deephaven UI\nDESCRIPTION: Demonstrates how to use the on_change property to handle switch state changes and update UI accordingly.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/switch.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef ui_switch_on_change_example():\n    selected, set_selected = ui.use_state(False)\n    return [\n        ui.switch(\"Switch Label\", on_change=set_selected, is_selected=selected),\n        ui.text(f\"The switch is {'on' if selected else 'off'}.\"),\n    ]\n\n\nmy_switch_on_change_example = ui_switch_on_change_example()\n```\n\n----------------------------------------\n\nTITLE: Using Date Field Component in Deephaven UI (Python)\nDESCRIPTION: Multiple examples of creating and configuring date field components with different settings, including controlled and uncontrolled components, various date types, and custom configurations.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/DESIGN.md#2025-04-17_snippet_42\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.ui as ui\nfrom deephaven.time import to_j_local_date, dh_today, to_j_instant, to_j_zdt\n\nzoned_date_time = to_j_zdt(\"1995-03-22T11:11:11.23142 America/New_York\")\ninstant = to_j_instant(\"2022-01-01T00:00:00 ET\")\nlocal_date = to_j_local_date(dh_today())\n\n# simple date field that takes ui.items and is uncontrolled\n# this creates a date field with a granularity of days with a default value of today\ndate_field1 = ui.date_field(\n    default_value=local_date\n)\n\n# simple date field that takes list view items directly and is controlled\n# this creates a date field with a granularity of seconds in UTC\n# the on_change handler is passed an instant\ndate, set_date = ui.use_state(instant)\n\ndate_field2 = ui.date_field(\n    value=date,\n    on_change=set_date\n)\n\n# this creates a date field with a granularity of seconds in the specified time zone\n# the on_change handler is passed a zoned date time\ndate, set_date = ui.use_state(None)\n\ndate_field3 = ui.date_field(\n    placeholder_value=zoned_date_time,\n    on_change=set_date\n)\n\n# this creates a date field with a granularity of seconds in UTC\n# the on_change handler is passed an instant\ndate, set_date = ui.use_state(None)\n\ndate_field4 = ui.date_field(\n    placeholder_value=instant,\n    on_change=set_date\n)\n\n# this creates a date field with a granularity of days\n# the on_change handler is passed a local date\ndate, set_date = ui.use_state(None)\n\ndate_field5 = ui.date_field(\n    placeholder_value=local_date,\n    on_change=set_date\n)\n\n# this creates a date field with a granularity of days, but the on_change handler is still passed an instant\ndate, set_date = ui.use_state(None)\n\ndate_field6 = ui.date_field(\n    placeholder_value=instant,\n    granularity=\"day\",\n    on_change=set_date\n)\n\n# this creates a date field with a granularity of seconds and the on_change handler is passed an instant\ndate, set_date = ui.use_state(None)\n\ndate_field7 = ui.date_field(\n    on_change=set_date\n)\n\n# this create a date field with a granularity of days, a min and max value, and unavailable dates\nmin_value = to_j_local_date(\"2022-01-01\")\nmax_value = to_j_local_date(\"2022-12-31\")\nunavailable_dates = [to_j_local_date(\"2022-03-15\"), to_j_local_date(\"2022-03-17\")]\ndate, set_date = ui.use_state(to_j_local_date(\"2022-03-16\"))\ndate_field8 = ui.date_field(\n    value=date,\n    min_value=min_value,\n    max_value=max_value,\n    unavailable_values=unavailable_dates,\n    on_change=set_date\n)\n```\n\n----------------------------------------\n\nTITLE: Advanced Table Filtering with Breadcrumbs\nDESCRIPTION: Complex example showing how to implement hierarchical data filtering using breadcrumbs navigation with the tips dataset\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/breadcrumbs.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.plot.express as dx\nfrom deephaven.table import Table\nfrom deephaven import ui\n\n@ui.component\ndef table_breadcrumb_filterer(\n    table: Table, filter_columns: list[str], all_item_text=\"All\"\n):\n    items, set_items = ui.use_state([ui.item(all_item_text)])\n    option_column, set_option_column = ui.use_state(filter_columns[0])\n    filters, set_filters = ui.use_state([])\n\n    filtered_table = ui.use_memo(lambda: table.where(filters), [table, filters])\n    column_value_table = ui.use_memo(\n        lambda: filtered_table.select_distinct(option_column),\n        [filtered_table, option_column],\n    )\n    column_values = ui.use_column_data(column_value_table)\n\n    def handle_action(key):\n        current_index = filter_columns.index(option_column)\n        set_items(items + [ui.item(f\"{key}\", key=option_column)])\n        if current_index < len(filter_columns) - 1:\n            set_option_column(filter_columns[current_index + 1])\n        set_filters(filters + [f\"{option_column} == '{key}'\"])\n\n    def handle_back(key):\n        if key not in filter_columns:\n            set_items([ui.item(all_item_text)])\n            set_option_column(filter_columns[0])\n            set_filters([])\n            return\n\n        selected_index = filter_columns.index(key)\n        set_items(items[: selected_index + 2])\n        set_option_column(filter_columns[selected_index + 1])\n        set_filters(filters[: selected_index + 1])\n\n    show_filter = len(filters) < len(filter_columns)\n\n    return ui.flex(\n        ui.flex(\n            ui.breadcrumbs(*items, show_root=True, on_action=handle_back, flex_grow=1),\n            ui.view(\n                ui.menu_trigger(\n                    ui.action_button(f\"Filter by {option_column}\", ui.icon(\"filter\")),\n                    ui.menu(\n                        *[ui.item(value) for value in column_values],\n                        on_action=handle_action,\n                    ),\n                ),\n            )\n            if show_filter\n            else None,\n        ),\n        filtered_table.view(\n            formulas=[\"TotalBill\", \"Tip\", \"Size\"] + filter_columns[len(filters) :]\n        ),\n        direction=\"column\",\n    )\n\n_tips = dx.data.tips()\nmy_tips = table_breadcrumb_filterer(_tips, [\"Day\", \"Time\", \"Sex\", \"Smoker\"], \"All Tips\")\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Heading Levels and Custom Content in Deephaven UI (Python)\nDESCRIPTION: This example shows how to create headings of different levels (1-6) and demonstrates the use of headings in a time field component with contextual help. It uses a custom UI component function to generate multiple examples.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/heading.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef ui_heading_content_examples():\n    return [\n        ui.heading(\"Heading 1\", level=1),\n        ui.heading(\"Heading 2\", level=2),\n        ui.heading(\"Heading 3\", level=3),\n        ui.heading(\"Heading 4\", level=4),\n        ui.heading(\"Heading 5\", level=5),\n        ui.heading(\"Heading 6\", level=6),\n        ui.time_field(\n            label=\"Sample Label\",\n            contextual_help=ui.contextual_help(ui.heading(\"Content tips\")),\n        ),\n    ]\n\n\nmy_heading_content_examples = ui_heading_content_examples()\n```\n\n----------------------------------------\n\nTITLE: Implementing Size Demonstration Component\nDESCRIPTION: Creates a visual demonstration of various size options available in Deephaven UI, displaying different size values with corresponding bars for comparison.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/creating-layouts/size-and-theme.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\nsizes = [\n    \"size-0\",\n    \"size-10\",\n    \"size-25\",\n    \"size-40\",\n    \"size-50\",\n    \"size-65\",\n    \"size-75\",\n    \"size-85\",\n    \"size-100\",\n    \"size-115\",\n    \"size-125\",\n    \"size-130\",\n    \"size-150\",\n    \"size-160\",\n    \"size-175\",\n    \"size-200\",\n    \"size-225\",\n    \"size-250\",\n    \"size-275\",\n    \"size-300\",\n    \"size-325\",\n    \"size-350\",\n    \"size-400\",\n    \"size-450\",\n    \"size-500\",\n    \"size-550\",\n    \"size-600\",\n    \"size-675\",\n    \"size-700\",\n    \"size-800\",\n    \"size-900\",\n    \"size-1000\",\n    \"size-1200\",\n    \"size-1250\",\n    \"size-1600\",\n    \"size-1700\",\n    \"size-2000\",\n    \"size-2400\",\n    \"size-3000\",\n    \"size-3400\",\n    \"size-3600\",\n    \"size-4600\",\n    \"size-5000\",\n    \"size-6000\",\n]\n\n@ui.component\ndef size_bar(size):\n    return ui.flex(ui.view(background_color=\"blue-500\", width=size), ui.text(size))\n\n@ui.component\ndef ui_sizes():\n    return [size_bar(size) for size in sizes]\n\nui_sizes_example = ui_sizes()\n```\n\n----------------------------------------\n\nTITLE: Batched Background Thread Updates with Render Queue Python Example\nDESCRIPTION: Shows how to use render_queue to properly batch state updates from background threads, ensuring synchronized UI updates.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/hooks/use_render_queue.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\nimport threading\nimport time\n\n@ui.component\ndef ui_batch_example():\n    render_queue = ui.use_render_queue()\n    a, set_a = ui.use_state(0)\n    b, set_b = ui.use_state(0)\n\n    ui.toast(\n        f\"Values are {a} and {b}\",\n        variant=\"negative\" if a != b else \"neutral\",\n        timeout=5000,\n    )\n\n    def do_work():\n        def update_state():\n            set_a(lambda new_a: new_a + 1)\n            # Introduce a bit of delay between updates\n            time.sleep(0.1)\n            set_b(lambda new_b: new_b + 1)\n\n        render_queue(update_state)\n\n    def start_background_thread():\n        threading.Thread(target=do_work).start()\n\n    return ui.button(\"Update values\", on_press=start_background_thread)\n\nbatch_example = ui_batch_example()\n```\n\n----------------------------------------\n\nTITLE: Basic Table Row Data Usage in Python\nDESCRIPTION: Demonstrates basic usage of use_row_data to access first row data from a time table and display it via a UI component. Shows how to access specific column values from the row data dictionary.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/hooks/use_row_data.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import time_table, ui\n\n@ui.component\ndef ui_table_row(table):\n    row_data = ui.use_row_data(table)\n    if row_data == ():\n        return ui.heading(\"No data yet.\")\n    return ui.heading(f\"Row data is {row_data}. Value of X is {row_data['x']}\")\n\ntable_row = ui_table_row(time_table(\"PT1s\").update(\"x=i\").reverse())\n```\n\n----------------------------------------\n\nTITLE: Layering Line and Candlestick Plots in Deephaven\nDESCRIPTION: This code demonstrates how to layer a line plot and a candlestick plot using Deephaven's plotting capabilities. It processes stock market data, filters for a specific symbol (DOG), computes OHLC (Open, High, Low, Close) values with 1-minute bins, and then layers a line plot of prices with a candlestick plot of the aggregated data.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/plotly-express/docs/layer-plots.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.plot.express as dx\nimport deephaven.agg as agg\nstocks = dx.data.stocks()  # import the example stock market data set\n\n# select only DOG prices and compute ohlc\ndog_prices = stocks.where(\"Sym == `DOG`\")\ndog_ohlc = dog_prices.update_view(\n    \"BinnedTimestamp = lowerBin(Timestamp, 'PT1m')\"\n).agg_by(\n    [\n        agg.first(\"Open=Price\"),\n        agg.max_(\"High=Price\"),\n        agg.min_(\"Low=Price\"),\n        agg.last(\"Close=Price\"),\n    ],\n    by=\"BinnedTimestamp\",\n)\n\n# layer a line plot and a candlestick plot by passing both to layer()\nfinancial_plot = dx.layer(\n    dx.line(\n        dog_prices, x=\"Timestamp\", y=\"Price\"),\n    dx.candlestick(\n        dog_ohlc, x=\"BinnedTimestamp\",\n        open=\"Open\", high=\"High\", low=\"Low\", close=\"Close\")\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Hook to Check for Odd Cell Values in Python\nDESCRIPTION: This example shows how to create a custom hook 'use_is_cell_odd' that checks if a table cell value is odd. It then uses this hook in a component to display whether the cell is odd, demonstrating the reuse of stateful logic between components.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/hooks/overview.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import time_table, ui\n\ndef use_is_cell_odd(table):\n    cell_value = ui.use_cell_data(table, 0)\n    return cell_value % 2 == 1\n\n@ui.component\ndef ui_table_odd_cell(table):\n    is_odd = use_is_cell_odd(table)\n    return ui.view(f\"Is the cell odd? {is_odd}\")\n\n_table = time_table(\"PT1s\").update(\"x=i\").view(\"x\").tail(1)\ntable_odd_cell = ui_table_odd_cell(_table)\n```\n\n----------------------------------------\n\nTITLE: Customizing 3D Scatter Plot Colors in Python\nDESCRIPTION: Demonstrates three different methods for customizing colors in 3D scatter plots: using color sequences, color maps, and dynamic color generation.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/plotly-express/docs/scatter-3d.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.plot.express as dx\niris = dx.data.iris()\n\n# set custom colors using color_discrete_sequence\nscatter_3D_custom_1 = dx.scatter_3d(\n    iris,\n    x=\"SepalWidth\",\n    y=\"SepalLength\",\n    z=\"PetalWidth\",\n    by=\"Species\",\n    # A list of colors to sequentially apply to one or more series\n    # The colors loop if there are more series than colors\n    color_discrete_sequence=[\"salmon\", \"#fffacd\", \"rgb(100,149,237)\"]\n)\n\n# use a dictionary to specify custom colors\nscatter_3D_custom_2 = dx.scatter_3d(\n    iris,\n    x=\"SepalWidth\",\n    y=\"SepalLength\",\n    z=\"PetalWidth\",\n    by=\"Species\",\n    # set each series to a specific color\n    color_discrete_map={\"virginica\":\"lemonchiffon\", \"setosa\": \"cornflowerblue\", \"versicolor\":\"#FA8173\"}\n)\n\n# or, create a new table with a column of colors, and use that column for the color values\niris_with_custom_colors = iris.update(\n    \"ExampleColors = `rgb(` + Math.round(Math.random() * 255) + `,` + Math.round(Math.random() * 255) + `,`  + Math.round(Math.random() * 255) +`)`\"\n)\n\nscatter_3D_custom_3 = dx.scatter_3d(\n    iris_with_custom_colors,\n    x=\"SepalWidth\",\n    y=\"SepalLength\",\n    z=\"PetalWidth\",\n    by=\"ExampleColors\",\n    # When set to `identity`, the column data passed to the\n    # color parameter will used as the actual color\n    color_discrete_map=\"identity\"\n)\n```\n\n----------------------------------------\n\nTITLE: Table Listener with Render Queue Python Example\nDESCRIPTION: Demonstrates using render_queue to display toast notifications when a table updates, ensuring the toast is triggered on the render thread.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/hooks/use_render_queue.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import time_table\nfrom deephaven import ui\n\n_source = time_table(\"PT5S\").update(\"X = i\").tail(5)\n\n@ui.component\ndef toast_table(t):\n    render_queue = ui.use_render_queue()\n\n    def listener_function(update, is_replay):\n        data_added = update.added()[\"X\"][0]\n        render_queue(lambda: ui.toast(f\"added {data_added}\", timeout=5000))\n\n    ui.use_table_listener(t, listener_function, [])\n    return t\n\nmy_toast_table = toast_table(_source)\n```\n\n----------------------------------------\n\nTITLE: Handling Form Submit Event in Deephaven UI (Python)\nDESCRIPTION: Shows how to create a form with submit event handling, including a text field, number field, and submit button.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/form.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef ui_form_submit():\n    return ui.form(\n        ui.text_field(name=\"name\", label=\"Enter name\"),\n        ui.number_field(name=\"age\", label=\"Enter age\"),\n        ui.button(\"Submit\", type=\"submit\"),\n        on_submit=lambda e: print(f\"Form submitted: {e}\"),\n    )\n\nmy_form_submit = ui_form_submit()\n```\n\n----------------------------------------\n\nTITLE: Implementing Controlled Selection in Action Group\nDESCRIPTION: Demonstrates how to implement controlled selection in an action group using the selected_keys prop and a state hook.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/action_group.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef ui_action_group_selected_keys_example():\n    selected, set_selected = ui.use_state([])\n    return [\n        ui.action_group(\n            ui.item(\"Grid view\", key=\"grid\"),\n            ui.item(\"List view\", key=\"list\"),\n            ui.item(\"Gallery view\", key=\"gallery\"),\n            selection_mode=\"multiple\",\n            selected_keys=selected,\n            on_change=set_selected,\n        ),\n        ui.text(f\"Current selection (controlled): {selected}\"),\n    ]\n\n\nmy_action_group_selected_keys_example = ui_action_group_selected_keys_example()\n```\n\n----------------------------------------\n\nTITLE: Controlled and Uncontrolled Checkbox Groups\nDESCRIPTION: Demonstrates both controlled and uncontrolled checkbox groups using state management and default values.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/checkbox_group.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef ui_checkbox_group_value_examples():\n    value, set_value = ui.use_state([\"Soccer\"])\n    return [\n        ui.checkbox_group(\n            \"Soccer\",\n            \"Basketball\",\n            \"Baseball\",\n            label=\"Favourite Sports (uncontrolled)\",\n            default_value=[\"Soccer\", \"Baseball\"],\n        ),\n        ui.checkbox_group(\n            \"Soccer\",\n            \"Basketball\",\n            \"Baseball\",\n            label=\"Favourite Sports (controlled)\",\n            value=value,\n            on_change=set_value,\n        ),\n    ]\n\nmy_checkbox_group_value_examples = ui_checkbox_group_value_examples()\n```\n\n----------------------------------------\n\nTITLE: Implementing Tab Selection in Python\nDESCRIPTION: Shows how to implement tab selection using default_selected_key and selected_key props, including both controlled and uncontrolled examples.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/tabs.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef ui_tabs_selected_key_examples():\n    selected_tab, set_selected_tab = ui.use_state(\"Tab 1\")\n    return [\n        \"Pick a tab (uncontrolled)\",\n        ui.tabs(\n            ui.tab(\n                \"There is no prior chat history with John Doe.\",\n                title=\"John Doe\",\n                key=\"Tab 1\",\n            ),\n            ui.tab(\n                \"There is no prior chat history with Jane Doe.\",\n                title=\"Jane Doe\",\n                key=\"Tab 2\",\n            ),\n            ui.tab(\n                \"There is no prior chat history with Joe Bloggs.\",\n                title=\"Joe Bloggs\",\n                key=\"Tab 3\",\n            ),\n            default_selected_key=\"Tab 2\",\n        ),\n        f\"Pick a tab (controlled), selected tab: {selected_tab}\",\n        ui.tabs(\n            ui.tab(\n                \"There is no prior chat history with John Doe.\",\n                title=\"John Doe\",\n                key=\"Tab 1\",\n            ),\n            ui.tab(\n                \"There is no prior chat history with Jane Doe.\",\n                title=\"Jane Doe\",\n                key=\"Tab 2\",\n            ),\n            ui.tab(\n                \"There is no prior chat history with Joe Bloggs.\",\n                title=\"Joe Bloggs\",\n                key=\"Tab 3\",\n            ),\n            selected_key=selected_tab,\n            on_selection_change=set_selected_tab,\n        ),\n    ]\n\n\nmy_tabs_selected_key_examples = ui_tabs_selected_key_examples()\n```\n\n----------------------------------------\n\nTITLE: Creating Input-Output Components Across Multiple Queries\nDESCRIPTION: Demonstrates a pattern for defining input components in one query and output components in another query, then combining them in a third query. This allows for modular component design across query boundaries.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/DESIGN.md#2025-04-17_snippet_21\n\nLANGUAGE: python\nCODE:\n```\n# Persistent Query 'A'\nimport deephaven.ui as ui\n\n\n@ui.component\ndef my_input(value, on_change):\n    return ui.text_input(value, on_change)\n\n\n# Persistent Query 'B'\nimport deephaven.ui as ui\n\n\n@ui.component\ndef my_output(value):\n    return empty_table(100).update(f\"sym=`{value}`\")\n\n\n# Executed in console session or a 3rd query\nimport deephaven.ui as ui\n\n\n@ui.component\ndef multi_query():\n    sym, set_sym = use_state(\"\")\n\n    # TODO: Would this actually work? Resolving to a custom type defined in plugins rather than a simple table object\n    my_input = resolve(\"dh+plain://query-a:10000/scope/my_input\")\n    my_output = resolve(\"dh+plain://query-b:10000/scope/my_output\")\n\n    return [my_input(sym, set_sym), my_output(sym)]\n\n\nmq = multi_query()\n```\n\n----------------------------------------\n\nTITLE: Form with Native Validation Behavior in Deephaven UI (Python)\nDESCRIPTION: Shows how to create a form with native HTML validation behavior, including an email field with required validation.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/form.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef ui_form_validation_behavior():\n    return ui.form(\n        ui.text_field(name=\"email\", label=\"Email\", type=\"email\", is_required=True),\n        ui.button(\"Submit\", type=\"submit\"),\n        validation_behavior=\"native\",\n    )\n\nmy_form_validation_behavior = ui_form_validation_behavior()\n```\n\n----------------------------------------\n\nTITLE: Advanced Range Calendar Implementation in Deephaven UI\nDESCRIPTION: Demonstrates implementing range calendars with various date types and configurations. Shows handling of different date formats including LocalDate, Instant, and ZonedDateTime, with both controlled and uncontrolled components.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/DESIGN.md#2025-04-17_snippet_54\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.ui as ui\nfrom deephaven.time import to_j_local_date, dh_today, to_j_instant, to_j_zdt\n\nzdt_start = to_j_zdt(\"1995-03-22T11:11:11.23142 America/New_York\")\nzdt_end = to_j_zdt(\"1995-03-25T11:11:11.23142 America/New_York\")\ninstant_start = to_j_instant(\"2022-01-01T00:00:00 ET\")\ninstant_end = to_j_instant(\"2022-01-05T00:00:00 ET\")\nlocal_start = to_j_local_date(\"2024-05-06\")\nlocal_end = to_j_local_date(\"2024-05-10\")\n\nrange_calendar1 = ui.range_calendar(\n    default_value={\"start\": local_start, \"end\": local_end}\n)\n```\n\n----------------------------------------\n\nTITLE: Correct Implementation of Cup Component in Python\nDESCRIPTION: This snippet shows the correct way to implement the cup component as a pure function by passing the guest number as a prop. This ensures predictable behavior and avoids side effects.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/describing/pure_components.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef cup(guest):\n    return ui.text(f\"Tea cup for guest {guest}\")\n\n@ui.component\ndef tea_set():\n    return ui.flex(cup(guest=1), cup(guest=2), cup(guest=3), direction=\"column\")\n\nmy_tea_set1 = tea_set()\nmy_tea_set2 = tea_set()\n```\n\n----------------------------------------\n\nTITLE: Using ui.table for Custom Table Formatting (Python)\nDESCRIPTION: This example shows how to use ui.table to customize the display of a Deephaven table, including adding color formatting to specific columns.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/describing/ui_with_tables.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\nimport deephaven.plot.express as dx\n\n_stocks_table = dx.data.stocks()\n\nt = ui.table(\n    _stocks_table,\n    format_=[\n        ui.TableFormat(color=\"fg\"),\n        ui.TableFormat(cols=\"Sym\", color=\"white\"),\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Interactive Stopwatch Implementation using use_ref and use_state\nDESCRIPTION: Creates a stopwatch component that uses both use_ref for timer management and use_state for display updates. Includes start/stop functionality and elapsed time display.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/hooks/use_ref.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\nimport datetime\nfrom threading import Timer\n\n\nclass RepeatTimer(Timer):\n    def run(self):\n        while not self.finished.wait(self.interval):\n            self.function(*self.args, **self.kwargs)\n\n\n@ui.component\ndef ui_stopwatch():\n    start_time, set_start_time = ui.use_state(datetime.datetime.now())\n    now, set_now = ui.use_state(start_time)\n    timer_ref = ui.use_ref(None)\n\n    def stop():\n        if timer_ref.current is not None:\n            timer_ref.current.cancel()\n\n    def start():\n        stop()\n        new_start_time = datetime.datetime.now()\n        set_start_time(new_start_time)\n        set_now(new_start_time)\n        timer_ref.current = RepeatTimer(0.01, lambda: set_now(datetime.datetime.now()))\n        timer_ref.current.start()\n\n    return ui.view(\n        ui.heading(f\"Elapsed time: {now - start_time}\"),\n        ui.button(\"Start\", on_press=start),\n        ui.button(\"Stop\", on_press=stop),\n    )\n\n\nstopwatch = ui_stopwatch()\n```\n\n----------------------------------------\n\nTITLE: Creating a Stateful Counter Button Using Deephaven UI Components\nDESCRIPTION: Implements a counter button that increments and displays the count each time it's pressed, demonstrating state management in Deephaven UI components.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/action_button.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef counter():\n    count, set_count = use_state(0)\n    return ui.action_button(\n        f\"Pressed {count} times\",\n        on_press=lambda: set_count(count + 1),\n    )\n\n\ncounter_example = counter()\n```\n\n----------------------------------------\n\nTITLE: Creating UI Columns in Deephaven Dashboards with Python\nDESCRIPTION: Demonstrates how to create a column of panels in a Deephaven dashboard using the ui.column function. This component arranges child elements vertically and can have an optional width specification.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/DESIGN.md#2025-04-17_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.ui as ui\nui_column = ui.column(\n    *children: Element,\n    width: int | None = None\n) -> UIColumn\n```\n\n----------------------------------------\n\nTITLE: Handling Radio Group Events in Python\nDESCRIPTION: Demonstrates how to handle onChange events for radio groups in Deephaven's UI framework.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/radio_group.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef ui_radio_group_on_change_example():\n    value, set_value = ui.use_state(\"\")\n    return [\n        ui.radio_group(\n            ui.radio(\"Yes\", value=\"Yes\"),\n            ui.radio(\"No\", value=\"No\"),\n            label=\"Is vanilla the best flavor of ice cream?\",\n            value=value,\n            on_change=set_value,\n        ),\n        ui.text(f\"You have selected: {value}\"),\n    ]\n\n\nmy_radio_group_on_change_example = ui_radio_group_on_change_example()\n```\n\n----------------------------------------\n\nTITLE: Creating a 1x2 Dashboard Layout in Python\nDESCRIPTION: Illustrates how to create a simple 1x2 column split dashboard layout using the Deephaven UI library.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/dashboard.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\ndash_1x2 = ui.dashboard(ui.column(ui.panel(\"A\", title=\"A\"), ui.panel(\"B\", title=\"B\")))\n```\n\n----------------------------------------\n\nTITLE: Handling Action Menu Events with on_action Callback\nDESCRIPTION: Demonstrates how to use the on_action event to track when a user selects an item from the action menu. The example creates a component that displays the selected action.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/action_menu.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef ui_action_menu_on_change_example():\n    selected_action, set_selected_action = ui.use_state(\"\")\n    return [\n        ui.action_menu(\n            \"Cut\",\n            \"Copy\",\n            \"Paste\",\n            on_action=set_selected_action,\n        ),\n        ui.text(f\"The action you have selected is: {selected_action}\"),\n    ]\n\n\nmy_action_menu_on_change_example = ui_action_menu_on_change_example()\n```\n\n----------------------------------------\n\nTITLE: Adding a Click Event Handler to a Button Component in Python\nDESCRIPTION: Example demonstrating how to create a button with an event handler function that prints a message when clicked. The handler is defined within the component.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/add-interactivity/respond-to-events.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef my_button():\n    def handle_press():\n        print(\"You clicked me!\")\n\n    return ui.button(\"Click me\", on_press=handle_press)\n\n\nbutton_with_event = my_button()\n```\n\n----------------------------------------\n\nTITLE: Creating 3D Spiral Line Plot Using Deephaven Express\nDESCRIPTION: Demonstrates how to create a 3D line plot of a spiral using Deephaven's plotting library. The example creates a time-based dataset with sine and cosine functions to generate a spiral pattern in 3D space, then visualizes it using the line_3d function.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/plotly-express/docs/line-3d.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.plot.express as dx\nfrom deephaven import time_table\n\n# create a simple spiral dataset\nspiral = time_table(\"PT0.01s\").update_view(\n    [\"X = sin(ii / 100)\", \"Y = cos(ii / 100)\", \"Z = 4 * ii / 100\"]\n)\n\nline_plot_3D = dx.line_3d(spiral, x=\"X\", y=\"Y\", z=\"Z\")\n```\n\n----------------------------------------\n\nTITLE: Creating Image Variants with Different Object-Fit Properties (Python)\nDESCRIPTION: Defines a function that creates multiple image variants using different object-fit properties and container styles. It demonstrates the use of ui.flex, ui.view, and ui.image components with various styling options.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/image.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef image_variants():\n    return ui.flex(\n        ui.view(\n            ui.image(src=\"https://i.imgur.com/Z7AzH2c.png\", alt=\"Sky and roof\"),\n            background_color=\"celery-600\",\n            padding=\"10px\",\n        ),\n        ui.view(\n            ui.image(\n                src=\"https://i.imgur.com/Z7AzH2c.png\",\n                alt=\"Sky and roof\",\n                object_fit=\"contain\",\n            ),\n            background_color=\"blue-600\",\n            padding=\"10px\",\n            padding_x=\"25px\",\n        ),\n        ui.view(\n            ui.image(\n                src=\"https://i.imgur.com/Z7AzH2c.png\",\n                alt=\"Sky and roof\",\n                object_fit=\"cover\",\n            ),\n            background_color=\"blue-600\",\n            width=\"75%\",\n        ),\n        ui.view(\n            ui.image(\n                src=\"https://i.imgur.com/Z7AzH2c.png\",\n                alt=\"Sky and roof\",\n                object_fit=\"none\",\n            )\n        ),\n        ui.view(\n            ui.image(\n                src=\"https://i.imgur.com/Z7AzH2c.png\",\n                alt=\"Sky and roof\",\n                object_fit=\"scale-down\",\n            )\n        ),\n        direction=\"column\",\n        width=\"300px\",\n    )\n\n\nimage_variants_example = image_variants()\n```\n\n----------------------------------------\n\nTITLE: Creating a Table-Backed Picker Component in Deephaven UI\nDESCRIPTION: This snippet creates a picker component that pulls options directly from a table column. It uses distinct species values from the iris dataset, which allows for dynamic updates based on the underlying data.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/tutorial.md#2025-04-17_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nspecies_table = iris.view(\"Species\").select_distinct()\n\n@ui.component\ndef species_panel():\n  species_picker = ui.picker(species_table)\n\n  return species_picker\n\nspecies_picker_panel = species_panel()\n```\n\n----------------------------------------\n\nTITLE: Creating a Parameterized Query using Groovy\nDESCRIPTION: Demonstrates how to create a parameterized query using Groovy with ParameterizedQuery and Parameter classes. This example defines parameters with constraints, fetches tables with permissions, applies filters based on parameters, and creates a plot.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/DESIGN.md#2025-04-17_snippet_84\n\nLANGUAGE: groovy\nCODE:\n```\nimport io.deephaven.query.parameterized.ParameterizedQuery\nimport io.deephaven.query.parameterized.Parameter\n\nmyQuery = ParameterizedQuery.create()\n    .with(Parameter.ofLong(\"intParam\").inRange(0,100))\n    .with(Parameter.ofString(\"stringParam\"))\n    .with(Parameter.ofDouble(\"doubleParam\").inRange(-1.0, 1.0).optional())\n    .willDo({scope ->\n        def intParam = scope.getInteger(\"intParam\")\n        def stringParam = scope.getString(\"stringParam\")\n\n        // Get the authenticated or effective ('run as') user names of the person or\n        // process executing this query.\n        def authenticatedUser = scope.getAuthenticatedUser()\n        def effectiveUser = scope.getEffectiveUser()\n\n        // Get the groups of the effective user.\n        def groups = scope.getPermissionFilterProvider().getGroupsForUser(scope.getUserContext())\n\n                // Using db.i() or db.t() will return results in the context of the query's owner, not the executor.\n        // You may want to perform this fetch with the owner's elevated permissions, for example, to produce\n        // summaries that can be more broadly shared. The query writer is responsible for ensuring that they\n        // are not returning sensitive data to viewers.\n        def tableResultAsOwner = db.i(\"SomeNamespace\", \"SomeTable\")\n\n        // Using the fetchTableIntraday() or fetchTableHistorical() from the scope will return results in the\n        // context of the query's executor, which will apply the permissions for that user. You can then safely\n        // display the resulting table to that user.\n        def tableResult = scope.fetchTableIntraday(\"SomeNamespace\", \"SomeTable\")\n\n        def tableResult = tableResult.where(\"Date=currentDateNy()\", \"StringCol=`$stringParam`\")\n            .updateView(\"OffsetInt = IntCol + $intParam\", \"Scaled = (double)OffsetInt\")\n\n        if (scope.isPresent(\"doubleParam\")) {\n            def maybeDoubleParam = scope.getDouble(\"doubleParam\")\n            tableResult = tableResult.updateView(\"Scaled = OffsetInt * $maybeDoubleParam\")\n        }\n\n        plotResult = plot(\"Stuff\", tableResult, \"Timestamp\", \"Scaled\").show()\n\n        scope.setResult(\"tableResult\", tableResult)\n        scope.setResult(\"plotResult\", plotResult)\n    }).build()\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Table of Contents Component\nDESCRIPTION: Demonstrates how to create a simple table of contents component using Deephaven UI with flex layout and text elements.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/describing/your_first_component.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef table_of_contents():\n    return ui.flex(\n        ui.heading(\"My First Component\"),\n        ui.text(\"- Components: UI Building Blocks\"),\n        ui.text(\"- Defining a Component\"),\n        ui.text(\"- Using a Component\"),\n        direction=\"column\",\n    )\n\n\nmy_table_of_contents = table_of_contents()\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Polar Scatter Plot with Deephaven Express\nDESCRIPTION: This snippet demonstrates how to create a polar scatter plot using the deephaven.plot.express module. It loads a wind dataset and visualizes it in polar coordinates, with frequency as the radial component and direction as the angular component. The 'by' parameter is used to group data points by wind strength.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/plotly-express/docs/scatter-polar.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.plot.express as dx\nwind = dx.data.wind()\n\n# `by` is used to separate data by groups\npolar_scatter_plot = dx.scatter_polar(wind, r=\"Frequency\", theta=\"Direction\", by=\"Strength\")\n```\n\n----------------------------------------\n\nTITLE: Solving State Duplication with ID-based Selection\nDESCRIPTION: The improved implementation that avoids state duplication by storing only the selected item's ID in state instead of the complete object. This ensures all UI elements stay in sync when items are edited.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/managing-state/choose-the-state-structure.md#2025-04-17_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\ninitial_items = [\n    {\"title\": \"peanuts\", \"id\": 0},\n    {\"title\": \"chips\", \"id\": 1},\n    {\"title\": \"apples\", \"id\": 2},\n]\n\n\n@ui.component\ndef snacks():\n    items, set_items = ui.use_state(initial_items)\n    selected_id, set_selected_id = ui.use_state(0)\n\n    selected_item = next(item for item in items if item[\"id\"] == selected_id)\n\n    def handle_item_change(id, value):\n        new_items = [\n            {**item, \"title\": value} if item[\"id\"] == id else item for item in items\n        ]\n        set_items(new_items)\n\n    def snack_row(item):\n        return ui.flex(\n            ui.text_field(\n                value=item[\"title\"],\n                on_change=lambda value: handle_item_change(item[\"id\"], value),\n            ),\n            ui.button(\"Choose\", on_press=lambda: set_selected_id(item[\"id\"])),\n        )\n\n    return [\n        ui.heading(\"What is your favorite snack?\"),\n        [snack_row(item) for item in items],\n        ui.text(f\"You picked {selected_item['title']}\"),\n    ]\n\n\nsnacks_example = snacks()\n```\n\n----------------------------------------\n\nTITLE: Handling Contextual Help Events in Deephaven UI (Python)\nDESCRIPTION: Illustrates how to use the 'on_open_change' prop to handle events when the contextual help popover opens or closes. It uses a state variable to track the open state.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/contextual_help.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef ui_contextual_help_events_example():\n    is_open, set_is_open = ui.use_state(False)\n    return [\n        ui.flex(\n            ui.contextual_help(\n                heading=\"Permission required\",\n                content=\"Your admin must grant you permission before you can create a segment.\",\n                variant=\"info\",\n                on_open_change={set_is_open},\n            ),\n            align_items=\"center\",\n        )\n    ]\n\n\nmy_contextual_help_events_example = ui_contextual_help_events_example()\n```\n\n----------------------------------------\n\nTITLE: Creating a Button Group with Limited Horizontal Space in Python\nDESCRIPTION: This example shows how to create a button group that handles limited horizontal space. It uses a view component to set a specific width and adds padding and a border.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/button_group.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\nmy_button_group_content_space_example = ui.view(\n    ui.button_group(\n        ui.button(\"Rate Now\", variant=\"accent\", style=\"outline\"),\n        ui.button(\"Remind me later\", variant=\"primary\", style=\"outline\"),\n        ui.button(\"No, thanks\", variant=\"primary\", style=\"outline\"),\n    ),\n    width=200,\n    border_width=\"thin\",\n    padding=\"size-100\",\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Calendars with Different Date Types in Python\nDESCRIPTION: Demonstrates creating calendars with ZonedDateTime, Instant, and LocalDate types. It uses a custom component to display the selected date.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/calendar.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\nfrom deephaven.time import to_j_local_date, dh_today, to_j_instant, to_j_zdt\n\nzoned_date_time = to_j_zdt(\"1995-03-22T11:11:11.23142 America/New_York\")\ninstant = to_j_instant(\"2022-01-01T00:00:00 ET\")\nlocal_date = to_j_local_date(dh_today())\n\n\n@ui.component\ndef calendar_test(value):\n    date, set_date = ui.use_state(value)\n    return [ui.calendar(on_change=set_date, value=date), ui.text(str(date))]\n\n\nzoned_calendar = calendar_test(zoned_date_time)\ninstant_calendar = calendar_test(instant)\nlocal_calendar = calendar_test(local_date)\n```\n\n----------------------------------------\n\nTITLE: Implementing Candlestick Plots with Calendar Integration in Python\nDESCRIPTION: Shows how to create candlestick plots with calendar functionality in Deephaven. The example demonstrates three ways to integrate calendars: using a calendar name, a calendar object, or the default calendar setting, which affects how dates and times are displayed on the axes.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/plotly-express/docs/candlestick.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.plot.express as dx\nimport deephaven.agg as agg\nfrom deephaven.calendar import calendar, set_calendar\n\ncal_name = \"USNYSE_EXAMPLE\"\ncal = calendar(cal_name)\nset_calendar(cal_name)\n\nstocks = dx.data.stocks(starting_time=\"2018-06-01T09:27:00 ET\")\n\n# compute ohlc per symbol for each minute for dog\nstocks_1min_dog = (\n    stocks.update_view(\"BinnedTimestamp = lowerBin(Timestamp, 'PT1m')\")\n    .agg_by(\n        [\n            agg.first(\"Open=Price\"),\n            agg.max_(\"High=Price\"),\n            agg.min_(\"Low=Price\"),\n            agg.last(\"Close=Price\"),\n        ],\n        by=[\"Sym\", \"BinnedTimestamp\"],\n    )\n    .where(\"Sym == `DOG`\")\n)\n\ndog_prices = stocks.where(\"Sym = `DOG`\")\n\n# plot with a specific calendar by name\ncandlestick_plot_cal_name = dx.candlestick(\n    stocks_1min_dog,\n    x=\"BinnedTimestamp\",\n    open=\"Open\",\n    high=\"High\",\n    low=\"Low\",\n    close=\"Close\",\n    calendar=cal_name,\n)\n\n# plot with a specific calendar object\ncandlestick_plot_cal = dx.candlestick(\n    stocks_1min_dog,\n    x=\"BinnedTimestamp\",\n    open=\"Open\",\n    high=\"High\",\n    low=\"Low\",\n    close=\"Close\",\n    calendar=cal,\n)\n\n# plot with the default calendar\ncandlestick_plot_default = dx.candlestick(\n    stocks_1min_dog,\n    x=\"BinnedTimestamp\",\n    open=\"Open\",\n    high=\"High\",\n    low=\"Low\",\n    close=\"Close\",\n    calendar=True,\n)\n```\n\n----------------------------------------\n\nTITLE: One-Click Plot Implementation in Python\nDESCRIPTION: Shows how to create one-click operations with plots using DeepHaven's plot library.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/DESIGN.md#2025-04-17_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven.parquet import read\nfrom deephaven.plot.selectable_dataset import one_click\nimport deephaven.plot.express as dx\n\nsource = read(\"/data/stocks.parquet\")\noc = one_click(t=source, by=[\"Sym\"])\nplot = dx.line(oc, x=\"Timestamp\", y=\"Price\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Tabs with ui.tab in Python\nDESCRIPTION: Demonstrates how to create tabs using the ui.tab method with different content types including text, flex layouts, and icons. Shows various ways to specify tab titles, content and keys.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/DESIGN.md#2025-04-17_snippet_31\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import empty_table, ui\n\nt = ui.tabs(\n    ui.tab(\"Content 1\", title=\"Tab 1\"),\n    ui.tab(\"Content 2\", title=\"Tab 2\", key=\"Key 2\"),\n    ui.tab(\n        ui.flex(\n            \"Hello World!\",\n            ui.flex(empty_table(10).update(\"I=i\")),\n        ),\n        title=\"Tab 3\",\n    ),\n    ui.tab(\"Content 4\", title=\"Tab 4\", icon=ui.icon(\"vsGithubAlt\")),\n    aria_label=\"Some label\"\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Switch Labeling Examples in Deephaven UI\nDESCRIPTION: Shows how to create switches with labels and aria labels for accessibility.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/switch.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef ui_switch_label_examples():\n    return [\n        ui.switch(\"Switch Label\", name=\"value\"),\n        ui.switch(aria_label=\"Switch Label\", name=\"value\"),\n    ]\n\n\nmy_switch_label_examples = ui_switch_label_examples()\n```\n\n----------------------------------------\n\nTITLE: Adding Help Text to Date Range Picker in Python\nDESCRIPTION: Demonstrates adding descriptions and error messages to date range pickers with different validation states.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/date_range_picker.md#2025-04-17_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef date_range_picker_help_text_examples():\n    return [\n        ui.date_range_picker(\n            label=\"Sample Label\",\n            description=\"Enter a date range.\",\n        ),\n        ui.date_range_picker(\n            label=\"Sample Label\",\n            validation_state=\"valid\",\n            error_message=\"Sample invalid error message.\",\n        ),\n        ui.date_range_picker(\n            label=\"Sample Label\",\n            validation_state=\"invalid\",\n            error_message=\"Sample invalid error message.\",\n        ),\n    ]\n\nmy_date_range_picker_help_text_examples = date_range_picker_help_text_examples()\n```\n\n----------------------------------------\n\nTITLE: Creating Tabs with Custom Layout and Content in Python\nDESCRIPTION: Demonstrates how to create tabs with more control over layout and content using ui.tab_list and ui.tab_panels within ui.tabs.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/tabs.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\nmy_tabs_list_panels_content_example = ui.tabs(\n    ui.tab_list(ui.item(\"Tab 1\", key=\"Key 1\"), ui.item(\"Tab 2\", key=\"Key 2\")),\n    ui.tab_panels(\n        ui.item(\n            ui.calendar(\n                aria_label=\"Calendar (uncontrolled)\",\n                default_value=\"2020-02-03\",\n            ),\n            key=\"Key 1\",\n        ),\n        ui.item(\n            ui.radio_group(\n                ui.radio(\"Yes\", value=\"Yes\"),\n                ui.radio(\"No\", value=\"No\"),\n                label=\"Is vanilla the best flavor of ice cream?\",\n            ),\n            key=\"Key 2\",\n        ),\n        flex_grow=1,\n        position=\"relative\",\n    ),\n    flex_grow=1,\n    margin_bottom=\"size-400\",\n)\n```\n\n----------------------------------------\n\nTITLE: Table Operations with Memo\nDESCRIPTION: Shows how to memoize table operations to prevent unnecessary table recreation on theme changes.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/hooks/use_memo.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import time_table, ui\nfrom deephaven.table import Table\n\ntheme_options = [\"accent-200\", \"red-200\", \"green-200\"]\n\n@ui.component\ndef ui_memo_table_app():\n    n, set_n = ui.use_state(1)\n    theme, set_theme = ui.use_state(theme_options[0])\n\n    result_table = ui.use_memo(\n        lambda: time_table(\"PT1s\").update(f\"x=i*{n}\").reverse(), [n]\n    )\n\n    return ui.view(\n        ui.flex(\n            ui.picker(\n                *theme_options, label=\"Theme\", selected_key=theme, on_change=set_theme\n            ),\n            ui.slider(value=n, min_value=1, max_value=999, on_change=set_n, label=\"n\"),\n            result_table,\n            direction=\"column\",\n            height=\"100%\",\n        ),\n        background_color=theme,\n        align_self=\"stretch\",\n        flex_grow=1,\n    )\n\nmemo_table_app = ui_memo_table_app()\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Panels with Custom Layouts in Python\nDESCRIPTION: This example shows how to create nested panels within a dashboard. It demonstrates customizing panel titles and layouts, including setting a row direction for one of the panels.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/creating-layouts/layout-overview.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\nmy_nested_panel = ui.dashboard(\n    [\n        ui.panel(ui.heading(\"A\"), ui.text_field(), title=\"A\"),\n        ui.panel(ui.heading(\"B\"), ui.text_field(), title=\"B\", direction=\"row\"),\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Main Travel Plan Component with State Management in Python\nDESCRIPTION: The main travel plan UI component that manages state and renders the hierarchical place tree. It initializes state with the travel plan data and provides a handler to update the state when a place is marked as complete.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/managing-state/choose-the-state-structure.md#2025-04-17_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n@ui.component\ndef travel_plan():\n    plan, set_plan = ui.use_state(initial_travel_plan)\n\n    def handle_complete(parent_id, child_id):\n        parent = plan[parent_id]\n        # Create a new version of the parent place that doesn't include this child id\n        next_parent = {\n            **parent,\n            \"child_ids\": [cid for cid in parent[\"child_ids\"] if cid != child_id],\n        }\n        # Update the root state dictionary\n        set_plan({**plan, parent_id: next_parent})\n\n    root = plan[0]\n    planet_ids = root[\"child_ids\"]\n\n    return [\n        ui.heading(\"Places to visit\"),\n        [place_tree(child_id, 0, plan, handle_complete, 0) for child_id in planet_ids],\n    ]\n```\n\n----------------------------------------\n\nTITLE: Controlled and Uncontrolled Slider Implementation\nDESCRIPTION: Demonstrates both controlled and uncontrolled slider implementations using state management.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/slider.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef slider_value_example():\n    value, set_value = ui.use_state(25)\n    return [\n        ui.slider(default_value=25, label=\"Cookies to buy (Uncontrolled)\"),\n        ui.slider(\n            value=value, on_change=set_value, label=\"Cookies to buy (Controlled)\"\n        ),\n    ]\n\nmy_slider_value_example = slider_value_example()\n```\n\n----------------------------------------\n\nTITLE: Configuring Table Aggregations in Python\nDESCRIPTION: Method to set up totals table display with customizable aggregation operations, grouping, and positioning options.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/DESIGN.md#2025-04-17_snippet_63\n\nLANGUAGE: python\nCODE:\n```\nui_table.aggregations(\n    operations: dict[ColumnName, list[AggregationOperation]],\n    operation_order: list[AggregationOperation] = [],\n    default_operation: AggregationOperation = \"Skip\",\n    group_by: list[ColumnName] = [],\n    show_on_top: bool = False,\n) -> UITable\n```\n\n----------------------------------------\n\nTITLE: Dynamic Selection Mode in List View with Python and Deephaven UI\nDESCRIPTION: This snippet shows how to dynamically change the selection mode of a List View using a radio button group.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/list_view.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@ui.component\ndef ui_list_view():\n    selection_mode, set_selection_mode = ui.use_state(\"NONE\")\n\n    radio = ui.radio_group(\n        ui.radio(\"None\", value=\"NONE\"),\n        ui.radio(\"Multiple\", value=\"MULTIPLE\"),\n        ui.radio(\"Single\", value=\"SINGLE\"),\n        label=\"Selection Mode\",\n        orientation=\"horizontal\",\n        value=selection_mode,\n        on_change=set_selection_mode,\n    )\n\n    lv = ui.list_view(\n        ui.item(\"Option 1\"),\n        ui.item(\"Option 2\"),\n        ui.item(\"Option 3\"),\n        ui.item(\"Option 4\"),\n        selection_mode=selection_mode,\n    )\n\n    return radio, lv\n\nmy_list_view = ui_list_view()\n```\n\n----------------------------------------\n\nTITLE: Custom Sentinel Value with use_column_data\nDESCRIPTION: Demonstrates using a custom sentinel value with use_column_data to handle empty tables with a specific default value instead of None.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/hooks/use_column_data.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import time_table, ui\nimport datetime as dt\n\n@ui.component\ndef ui_table_column(table):\n    column_data = ui.use_column_data(table, sentinel=\"No data yet.\")\n    return ui.heading(f\"Column data: {column_data}\")\n\nstart_time = dt.datetime.now() + dt.timedelta(seconds=2)\ntable_column = ui_table_column(time_table(\"PT1s\", start_time=start_time).tail(5))\n```\n\n----------------------------------------\n\nTITLE: Creating a 3x1 Dashboard Layout in Python\nDESCRIPTION: Shows how to create a 3x1 row dashboard layout using the Deephaven UI library.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/dashboard.md#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\ndash_3x1 = ui.dashboard(\n    ui.row(ui.panel(\"A\", title=\"A\"), ui.panel(\"B\", title=\"B\"), ui.panel(\"C\", title=\"C\"))\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Menu Trigger in Python\nDESCRIPTION: Demonstrates how to create a simple menu trigger with a button and a menu containing three items.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/menu_trigger.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\nmy_menu_trigger_example = ui.menu_trigger(\n    ui.action_button(\"Edit\"),\n    ui.menu(\n        ui.item(\"Cut\"),\n        ui.item(\"Copy\"),\n        ui.item(\"Paste\"),\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Using ui.html for Custom HTML Elements in Deephaven UI\nDESCRIPTION: Demonstrates how to inject custom HTML elements into a Deephaven UI component using ui.html. Creates a div containing an h1 heading and a paragraph element with custom content.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/creating-layouts/escape-hatches.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\ncomponent_with_html = ui.view(\n    ui.heading(\"HTML inside a component\"),\n    ui.html.div(\n        ui.html.h1(\"Welcome to Deephaven\"),\n        ui.html.p(\"This is a custom HTML component.\"),\n        id=\"html_div\",\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a List View with Item Table Source in Python with Deephaven UI\nDESCRIPTION: This snippet demonstrates how to use item_table_source to create complex items from a table in a List View. It specifies which columns are used for keys and labels.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/list_view.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui, new_table\nfrom deephaven.column import string_col\n\n_table = new_table(\n    [\n        string_col(\"Keys\", [\"key-0\", \"key-1\", \"key-2\"]),\n        string_col(\"Labels\", [\"Option 0\", \"Option 1\", \"Option 2\"]),\n    ]\n)\n\n@ui.component\ndef ui_list_view_table_source():\n    source = ui.item_table_source(_table, key_column=\"Keys\", label_column=\"Labels\")\n    return ui.list_view(source)\n\nmy_list_view_table_source = ui_list_view_table_source()\n```\n\n----------------------------------------\n\nTITLE: Creating Scatter Plot with Combined Color and Symbol Grouping\nDESCRIPTION: Creates a scatter plot using both color and symbol to represent different categorical variables.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/plotly-express/docs/plot-by.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.plot.express as dx\ntips = dx.data.tips() # import a ticking version of the Tips dataset\n\n# use color to denote sex, and symbol to denote smoking status\ntotal_bill_sex_smoker_sym = dx.scatter(tips, x=\"TotalBill\", y=\"Tip\", by=\"Sex\", symbol=\"Smoker\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Combo Boxes in Deephaven UI\nDESCRIPTION: Examples of creating combo boxes with different configurations including uncontrolled input, controlled input, and sectioned options. Shows both basic item lists and section-based organization.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/DESIGN.md#2025-04-17_snippet_51\n\nLANGUAGE: python\nCODE:\n```\ncombo_box3 = ui.combo_box(\n    ui.item(\"Option 1\"),\n    ui.item(\"Option 2\"),\n    ui.item(\"Option 3\"),\n    ui.item(\"Option 4\"),\n    default_input_value=\"Option\"\n)\n\ninput_value, set_input_value = ui.use_state(\"Option\")\n\ncombo_box4 = ui.combo_box(\n    ui.item(\"Option 1\"),\n    ui.item(\"Option 2\"),\n    ui.item(\"Option 3\"),\n    ui.item(\"Option 4\"),\n    input_value=input_value,\n    on_input_change=set_input_value\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Controlled Date Picker with React-like Hooks in Python\nDESCRIPTION: Demonstrates how to create controlled date pickers using React-like hooks in Python. It shows examples with ZonedDateTime, Instant, and LocalDate types, updating the value based on user selection.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/date_picker.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\nfrom deephaven.time import to_j_local_date, dh_today, to_j_instant, to_j_zdt\n\nzoned_date_time = to_j_zdt(\"1995-03-22T11:11:11.23142 America/New_York\")\ninstant = to_j_instant(\"2022-01-01T00:00:00 ET\")\nlocal_date = to_j_local_date(dh_today())\n\n\n@ui.component\ndef date_picker_test(value):\n    date, set_date = ui.use_state(value)\n    return [ui.date_picker(on_change=set_date, value=date), ui.text(str(date))]\n\n\nzoned_date_picker = date_picker_test(zoned_date_time)\ninstant_date_picker = date_picker_test(instant)\nlocal_date_picker = date_picker_test(local_date)\n```\n\n----------------------------------------\n\nTITLE: Input Filter with Plot in Python\nDESCRIPTION: Demonstrates adding input filters to plots and creating interactive dashboards.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/DESIGN.md#2025-04-17_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven.parquet import read\nfrom deephaven.plot.selectable_dataset import one_click\nimport deephaven.plot.express as dx\nfrom deephaven import dtypes as dht\n\nsource = read(\"/data/stocks.parquet\")\noc = one_click(t=source, by=[\"Sym\"])\nplot = dx.line(oc, x=\"Timestamp\", y=\"Price\")\nsym_filter = ui.input_filter(column=\"Sym\", type=dht.string)\n```\n\n----------------------------------------\n\nTITLE: Component with Multiple State Variables\nDESCRIPTION: This example demonstrates using multiple state variables in a single component. It tracks both the current index and a boolean flag for showing/hiding details, with separate setter functions for each state variable.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/add-interactivity/state-a-components-memory.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\nword_list = [\"apple\", \"banana\", \"cherry\", \"orange\", \"kiwi\", \"strawberry\"]\ndetail_list = [\n    \"An apple is a round, edible fruit produced by an apple tree.\",\n    \"A banana is an elongated, edible fruit.\",\n    \"A cherry is the fruit of many plants of the genus Prunus.\",\n    \"The oranges are the fruit of a tree in the family Rutaceae.\",\n    \"Kiwi has a thin, fuzzy, fibrous, tart but edible, light brown skin and light green or golden flesh with rows of tiny, black, edible seeds.\",\n    \"The genus Fragaria, strawberries, is in the rose family, Rosaceae.\",\n]\n\n\n@ui.component\ndef word_display():\n    index, set_index = ui.use_state(0)\n    show_more, set_show_more = ui.use_state(False)\n\n    def handle_press():\n        set_index(index + 1)\n\n    def handle_more_press():\n        set_show_more(not show_more)\n\n    word = word_list[index]\n    detail = detail_list[index]\n\n    return [\n        ui.button(\"Next\", on_press=handle_press),\n        ui.text(f\"({index+1} of {len(word_list)})\"),\n        ui.heading(word),\n        ui.button(\n            f\"{'Hide' if show_more else 'Show'} Details\", on_press=handle_more_press\n        ),\n        show_more and ui.text(detail),\n    ]\n\n\nword_display_example = word_display()\n```\n\n----------------------------------------\n\nTITLE: Gradient Slider Implementation\nDESCRIPTION: Shows how to apply a gradient to the slider's fill track for visual enhancement.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/slider.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\nmy_slider_gradient_example = ui.slider(\n    label=\"Filter density\",\n    track_gradient=[\"white\", \"rgba(177,141,32,1)\"],\n    default_value=0.3,\n    max_value=1,\n    step=0.01,\n    is_filled=True,\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Page Behavior in Date Range Picker\nDESCRIPTION: Sets up single-month pagination behavior for a date range picker with multiple visible months.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/date_range_picker.md#2025-04-17_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\ndate_range_picker_page_example = ui.date_range_picker(\n    label=\"Date range\", max_visible_months=3, page_behavior=\"single\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Styled Views with Overflow in Python\nDESCRIPTION: This snippet demonstrates the use of ui.view for custom styling. It creates two views: one with a simple text field and custom borders, and another with multiple text fields and overflow enabled, showcasing flexible styling options.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/creating-layouts/layout-overview.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\nview = ui.view(\n    ui.text_field(label=\"Name\"),\n    border_width=\"thin\",\n    border_color=\"accent-400\",\n    background_color=\"seafoam-500\",\n    border_radius=\"medium\",\n    padding=\"size-250\",\n)\n\nview_overflow = ui.view(\n    [ui.text_field(label=f\"{i}\", width=\"size-3000\") for i in range(50)],\n    border_width=\"thin\",\n    border_color=\"accent-400\",\n    background_color=\"seafoam-500\",\n    border_radius=\"medium\",\n    padding=\"size-250\",\n    overflow=True,\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Color Palette Component in Python\nDESCRIPTION: Creates an interactive color palette component that displays various shades of a selected color using Deephaven UI. Includes a color picker and grid display of color variations.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/creating-layouts/size-and-theme.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\ndef generate_colors(color):\n    colors = []\n    for i in range(100, 1401, 100):\n        colors.append(f\"{color}-{i}\")\n    return colors\n\n@ui.component\ndef color_palette():\n    color, set_color = ui.use_state(\"blue\")\n    colors = ui.use_memo(lambda: generate_colors(color), [color])\n    return [\n        ui.picker(\n            ui.item(\"red\"),\n            ui.item(\"orange\"),\n            ui.item(\"yellow\"),\n            ui.item(\"chartreuse\"),\n            ui.item(\"celery\"),\n            ui.item(\"green\"),\n            ui.item(\"seafoam\"),\n            ui.item(\"cyan\"),\n            ui.item(\"blue\"),\n            ui.item(\"indigo\"),\n            ui.item(\"purple\"),\n            ui.item(\"fuchsia\"),\n            ui.item(\"magenta\"),\n            selected_key=color,\n            on_selection_change=set_color,\n            label=\"Pick a color\",\n        ),\n        ui.grid(\n            [ui.view(ui.text(color), background_color=color) for color in colors],\n            columns=\"repeat(5, 1fr)\",\n            auto_rows=\"size-800\",\n            justify_content=\"center\",\n            gap=\"size-100\",\n        ),\n    ]\n\ncolor_palette_example = color_palette()\n```\n\n----------------------------------------\n\nTITLE: Creating a Multi-Group Strip Plot with Deephaven\nDESCRIPTION: This example shows how to create a strip plot that compares distributions across multiple groups. It uses the 'Day' column as a grouping variable and assigns different colors to each day's data points.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/plotly-express/docs/strip.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.plot.express as dx\ntips = dx.data.tips()\n\nstrip_plot_group = dx.strip(tips, x=\"TotalBill\", by=\"Day\", color_discrete_sequence=[\"lightgreen\", \"lightblue\", \"goldenrod\", \"lightcoral\"])\n```\n\n----------------------------------------\n\nTITLE: Handling List View Actions in Python with Deephaven UI\nDESCRIPTION: This snippet demonstrates how to handle actions in a List View, such as Edit and Delete, using the item_table_source and list_action_group.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/list_view.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui, new_table\nfrom deephaven.column import string_col\n\n_table = new_table(\n    [\n        string_col(\"Keys\", [\"key-0\", \"key-1\", \"key-2\"]),\n        string_col(\"Labels\", [\"Option 0\", \"Option 1\", \"Option 2\"]),\n    ]\n)\n\n@ui.component\ndef ui_list_view_actions():\n    action_item_keys, set_action_item_keys = ui.use_state([\"\", \"\"])\n    on_action = ui.use_callback(\n        lambda action_key, item_key: set_action_item_keys([action_key, str(item_key)]),\n        [],\n    )\n\n    source = ui.item_table_source(\n        _table,\n        key_column=\"Keys\",\n        label_column=\"Labels\",\n        actions=ui.list_action_group(\n            \"Edit\",\n            \"Delete\",\n            on_action=on_action,\n        ),\n    )\n    lv = ui.list_view(source)\n\n    text_action = ui.text(\"Action: \" + \" \".join(map(str, action_item_keys)))\n\n    return lv, text_action\n\nmy_list_view_actions = ui_list_view_actions()\n```\n\n----------------------------------------\n\nTITLE: Creating Continuous Color Scale 3D Scatter Plot in Python\nDESCRIPTION: Creates a 3D scatter plot with continuous color scaling using the viridis color scale based on petal length.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/plotly-express/docs/scatter-3d.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.plot.express as dx\niris = dx.data.iris()\n\n# use the `color` argument to specify the value column, and the `color_continuous_scale` to specify the color scale\nscatter_3D_color = dx.scatter_3d(\n    iris,\n    x=\"SepalWidth\",\n    y=\"SepalLength\",\n    z=\"PetalWidth\",\n    by=\"PetalLength\",\n    # use any plotly express built in color scale name\n    color_continuous_scale=\"viridis\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Horizontal Flex Layout\nDESCRIPTION: Combines the table and scatter plot into a responsive horizontal layout using ui.flex, which enables components to resize based on available space.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/tutorial.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nsepal_flex = ui.flex(ui_iris, scatter_by_species)\n```\n\n----------------------------------------\n\nTITLE: Creating Grouped Violin Plots in Python using Deephaven Express\nDESCRIPTION: Shows how to create violin plots grouped by a categorical variable using the 'by' parameter. The example visualizes sepal length distributions across different iris species.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/plotly-express/docs/violin.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.plot.express as dx\niris = dx.data.iris()\n\nviolin_plot_group = dx.violin(iris, x=\"SepalLength\", by=\"Species\")\n```\n\n----------------------------------------\n\nTITLE: Creating Scatter Plot with Categorical Grouping\nDESCRIPTION: Creates a scatter plot of iris dataset where points are colored by species. Uses the 'by' parameter to group data points by the Species column.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/plotly-express/docs/plot-by.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.plot.express as dx\niris = dx.data.iris() # import the example iris data set\n\n# specify `x` and `y` columns, as well as additional grouping variable with `by`\npedal_size_by_species = dx.scatter(iris, x=\"PetalLength\", y=\"PetalWidth\", by=\"Species\")\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering with Variable Assignment\nDESCRIPTION: Shows how to use variable assignment and if statements for more complex conditional rendering logic.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/describing/conditional_rendering.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef item(name, is_packed):\n    item_content = name\n    if is_packed:\n        item_content = name + \" ✅\"\n    return ui.text(\"- \", item_content)\n\n@ui.component\ndef packing_list():\n    return ui.flex(\n        ui.heading(\"Packing list\"),\n        item(\"Clothes\", is_packed=True),\n        item(\"Shoes\", is_packed=True),\n        item(\"Wallet\", is_packed=False),\n        direction=\"column\",\n    )\n\nmy_packing_list = packing_list()\n```\n\n----------------------------------------\n\nTITLE: Creating Between-Line Fill using unsafe_update_figure in Python\nDESCRIPTION: Shows how to fill the area between multiple lines in a line plot using tonexty fill. The example creates upper and lower bounds around a price line and fills the areas between them.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/plotly-express/docs/unsafe-update-figure.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.plot.express as dx\n\nmy_table = dx.data.stocks()\n\n# subset data for just DOG transactions and add upper and lower bounds\ndog_prices = my_table.where(\"Sym = `DOG`\").update_view(\n    [\"UpperPrice = Price + 5\", \"LowerPrice = Price - 5\"]\n)\n\n\ndef update(figure):\n    # tonexty fills the area between the trace and the previous trace in the list\n    figure.update_traces(\n        fill=\"tonexty\", fillcolor=\"rgba(123,67,0,0.3)\", selector={\"name\": \"LowerPrice\"}\n    )\n    figure.update_traces(\n        fill=\"tonexty\", fillcolor=\"rgba(123,67,0,0.3)\", selector={\"name\": \"Price\"}\n    )\n\n\n# Order matters for y since the fill is between the trace and the previous trace in the list\nfilled_line_plot = dx.line(\n    dog_prices,\n    x=\"Timestamp\",\n    y=[\"UpperPrice\", \"Price\", \"LowerPrice\"],\n    unsafe_update_figure=update,\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Links with Custom Content - Python\nDESCRIPTION: Shows how to create links with different content types including icons and text using a component function.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/link.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef ui_link_content_examples():\n    return [\n        ui.link(ui.icon(\"github\"), href=\"https://github.com/deephaven\"),\n        ui.link(\"Deephaven Website\", href=\"https://deephaven.io/\"),\n    ]\n\n\nmy_link_content_examples = ui_link_content_examples()\n```\n\n----------------------------------------\n\nTITLE: Creating a Dashboard with Stack in Layout in Python\nDESCRIPTION: Shows how to create a dashboard with a stack component integrated into a layout using the Deephaven UI library.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/dashboard.md#2025-04-17_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\ndash_layout_stack = ui.dashboard(\n    ui.row(\n        ui.stack(\n            ui.panel(\"A\", title=\"A\"), ui.panel(\"B\", title=\"B\"), ui.panel(\"C\", title=\"C\")\n        ),\n        ui.panel(\"D\", title=\"D\"),\n        ui.panel(\"E\", title=\"E\"),\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Funnel Plot in Python using Deephaven Express\nDESCRIPTION: Demonstrates how to create a basic funnel plot using Deephaven's plotting library. The example uses marketing data to visualize the count of items across different stages, where Count represents the frequency/value column and Stage represents the category column.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/plotly-express/docs/funnel.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.plot.express as dx\nmarketing = dx.data.marketing()\n\n# `Count` is the frequency/value column, and `Stage` is the category column\nfunnel_plot = dx.funnel(marketing, x=\"Count\", y=\"Stage\")\n```\n\n----------------------------------------\n\nTITLE: Applying Color Picker to Table Formatting in Python\nDESCRIPTION: Demonstrates how to use color pickers to dynamically format a table's background and highlight colors. The example uses state management and applies the selected colors to a table using TableFormat.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/color_picker.md#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\nimport deephaven.plot.express as dx\n\n\n@ui.component\ndef ui_color_picker_table_format():\n    background, set_backgruond = ui.use_state(\"#232323\")\n    highlight, set_highlight = ui.use_state(\"#65C4D7\")\n\n    return [\n        ui.color_picker(label=\"Background\", value=background, on_change=set_backgruond),\n        ui.color_picker(label=\"Highlight\", value=highlight, on_change=set_highlight),\n        ui.table(\n            dx.data.stocks(),\n            format_=[\n                ui.TableFormat(background_color=background, color=\"white\"),\n                ui.TableFormat(cols=\"Sym\", background_color=highlight),\n            ],\n        ),\n    ]\n\n\nmy_color_picker_table_format = ui_color_picker_table_format()\n```\n\n----------------------------------------\n\nTITLE: Form with Necessity Indicators in Deephaven UI (Python)\nDESCRIPTION: Shows how to create forms with different necessity indicators (icon and label) for required fields.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/form.md#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef ui_form_indicator():\n    def icon_indicator():\n        return ui.form(\n            ui.text_field(name=\"name\", label=\"Name\", is_required=True),\n            ui.text_field(name=\"age\", label=\"Age\"),\n            is_required=True,\n        )\n\n    def label_indicator():\n        return ui.form(\n            ui.text_field(name=\"name\", label=\"Name\", is_required=True),\n            ui.text_field(name=\"age\", label=\"Age\"),\n            is_required=True,\n            necessity_indicator=\"label\",\n        )\n\n    return [icon_indicator(), label_indicator()]\n\nmy_form_required = ui_form_indicator()\n```\n\n----------------------------------------\n\nTITLE: Configuring Dashboard with Varying Stack Heights in Python\nDESCRIPTION: Demonstrates how to create a dashboard with stacks of different heights using the Deephaven UI library.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/dashboard.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\ndash_stack_heights = ui.dashboard(\n    ui.column(ui.stack(ui.panel(\"A\", title=\"A\"), height=70), ui.panel(\"B\", title=\"B\"))\n)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Flex Justification Options in Deephaven UI\nDESCRIPTION: This snippet illustrates various justify_content options for flex containers in Deephaven UI. It creates multiple flex containers with different justification settings to show how items can be aligned along the main axis.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/flex.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef ui_flex_justify():\n    start = ui.flex(\n        ui.view(1, background_color=\"red\", height=\"size-800\", width=\"size-400\"),\n        ui.view(2, background_color=\"green\", height=\"size-800\", width=\"size-800\"),\n        ui.view(3, background_color=\"blue\", height=\"size-800\", width=\"size-200\"),\n        justify_content=\"start\",\n    )\n    center = ui.flex(\n        ui.view(1, background_color=\"red\", height=\"size-800\", width=\"size-400\"),\n        ui.view(2, background_color=\"green\", height=\"size-800\", width=\"size-800\"),\n        ui.view(3, background_color=\"blue\", height=\"size-800\", width=\"size-200\"),\n        justify_content=\"center\",\n    )\n    end = ui.flex(\n        ui.view(1, background_color=\"red\", height=\"size-800\", width=\"size-400\"),\n        ui.view(2, background_color=\"green\", height=\"size-800\", width=\"size-800\"),\n        ui.view(3, background_color=\"blue\", height=\"size-800\", width=\"size-200\"),\n        justify_content=\"end\",\n    )\n    space_between = ui.flex(\n        ui.view(1, background_color=\"red\", height=\"size-800\", width=\"size-400\"),\n        ui.view(2, background_color=\"green\", height=\"size-800\", width=\"size-800\"),\n        ui.view(3, background_color=\"blue\", height=\"size-800\", width=\"size-200\"),\n        justify_content=\"space-between\",\n    )\n    space_around = ui.flex(\n        ui.view(1, background_color=\"red\", height=\"size-800\", width=\"size-400\"),\n        ui.view(2, background_color=\"green\", height=\"size-800\", width=\"size-800\"),\n        ui.view(3, background_color=\"blue\", height=\"size-800\", width=\"size-200\"),\n        justify_content=\"space-around\",\n    )\n\n    return ui.flex(\n        'justify_content=\"start\"',\n        start,\n        'justify_content=\"center\"',\n        center,\n        'justify_content=\"end\"',\n        end,\n        'justify_content=\"space-between\"',\n        space_between,\n        'justify_content=\"space-around\"',\n        space_around,\n        direction=\"column\",\n    )\n\nmy_flex_justify = ui_flex_justify()\n```\n\n----------------------------------------\n\nTITLE: Customizing UI Table with Chained Methods\nDESCRIPTION: Example demonstrating the immutable fluent interface for customizing a UITable, including color formatting and column grouping.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/DESIGN.md#2025-04-17_snippet_60\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n# Create a table with some customizations\nui_table = (\n    ui.table(source)\n    .color_column(\"X\", [\"X = Y > 5 ? RED : NO_FORMATTING\"])\n    .column_group(\"Group 1\", [\"Col1\", \"Col2\"], \"RED\")\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Date Range Formatting in DeepHaven UI\nDESCRIPTION: Demonstrates how to create and format date ranges using the labeled_value component. Shows both default and custom date formatting for time ranges and day ranges.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/labeled_value.md#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef labeled_value_datetime_range_format():\n    time_range = {\"start\": \"2035-01-31T12:30:00Z\", \"end\": \"2035-01-31T16:30:00Z\"}\n    day_range = {\"start\": \"2035-01-31\", \"end\": \"2035-02-01\"}\n    default_date_format = {\"date_format\": \"\"}\n\n    return [\n        ui.labeled_value(\n            label=\"Default format time range\",\n            value=time_range,\n            format_options=default_date_format,\n        ),\n        ui.labeled_value(\n            label=\"Custom format time range\",\n            value=time_range,\n            format_options={\"date_format\": \"MMMM d, yyyy, h:mm a z\"},\n        ),\n        ui.labeled_value(\n            label=\"Default format day range\",\n            value=day_range,\n            format_options=default_date_format,\n        ),\n        ui.labeled_value(\n            label=\"Custom format day range\",\n            value=day_range,\n            format_options={\"date_format\": \"MMMM d, yyyy\"},\n        ),\n    ]\n\nmy_labeled_value_datetime_range_format = labeled_value_datetime_range_format()\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple-Expanded Accordion with Event Handling in Deephaven UI (Python)\nDESCRIPTION: This snippet illustrates how to create an accordion that allows multiple elements to be expanded simultaneously. It uses the allows_multiple_expanded prop and demonstrates more complex state management with multiple disclosures.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/accordion.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef ui_accordion_event():\n    expanded_keys, set_expanded_keys = ui.use_state([])\n\n    return ui.view(\n        ui.accordion(\n            ui.disclosure(\n                id=\"which-core-version\",\n                title=\"How can I find which Core version to which a particular feature or fix was added?\",\n                panel=\"At the bottom of a Deephaven Community Core commit message you can see branches and tags containing that particular change. You can browse commits in the deephaven-core GitHub repository. Click on any title for details.\",\n            ),\n            ui.disclosure(\n                id=\"docker-compose-required\",\n                title=\"Is docker compose required to run deephaven?\",\n                panel=\"No. You can run Deephaven via Docker without compose. See here for an example. Docker compose does make customizing your deployment easier, though, so we recommend it for users who want to do that.\",\n            ),\n            ui.disclosure(\n                id=\"reset-python-kernel\",\n                title=\"Can I reset the Python kernel without restarting the Deephaven Docker container?\",\n                panel=\"At this time, there is no way to restart the Python kernel without restarting Docker as well.\",\n            ),\n            expanded_keys=expanded_keys,\n            on_expanded_change=set_expanded_keys,\n            allows_multiple_expanded=True,\n        ),\n        ui.heading(\"Currently expanded: \", \", \".join(expanded_keys), margin_top=\"20px\"),\n    )\n\n\nmy_accordion_event = ui_accordion_event()\n```\n\n----------------------------------------\n\nTITLE: Table-Based Combo Boxes in Deephaven UI\nDESCRIPTION: Shows how to create combo boxes from Deephaven tables, including both direct table usage and data hooks approach. Demonstrates creating complex combo boxes with partitioned tables and custom column mappings.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/DESIGN.md#2025-04-17_snippet_53\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import empty_table\n\ntable1 = empty_table(4).update_view(\"data=i\")\ntable2 = empty_table(1).update_view(\"data=10\")\n\noptions = ui.use_column_data(table1)\ncombo_box7 = ui.combo_box(children=options)\ncombo_box8 = ui.combo_box(table1)\n```\n\n----------------------------------------\n\nTITLE: Adding Contextual Help to Range Slider in Python\nDESCRIPTION: This example demonstrates how to add contextual help to a range slider using the contextual_help prop and ui.contextual_help component.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/range_slider.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\nmy_range_slider_contextual_help_example = ui.range_slider(\n    label=\"Search Radius\",\n    min_value=0,\n    max_value=100,\n    default_value={\"start\": 15, \"end\": 60},\n    contextual_help=ui.contextual_help(\n        ui.heading(\"Ranking\"),\n        ui.content(\"Search results are sorted by distance from city center.\"),\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Row Data with use_row_data in Python\nDESCRIPTION: Hook function for capturing data from a specific row in a Deephaven table, with an option to provide a sentinel value when the row is loading.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/DESIGN.md#2025-04-17_snippet_77\n\nLANGUAGE: python\nCODE:\n```\nuse_row_data(\n    table: Table,\n    sentinel: SentinelType = None\n) -> RowData | Sentinel:\n```\n\n----------------------------------------\n\nTITLE: Implementing Accordion with Single-Expanded Event Handling in Deephaven UI (Python)\nDESCRIPTION: This example shows how to create an accordion with event handling for expanded states. It uses the @ui.component decorator, ui.use_state for state management, and demonstrates the usage of expanded_keys and on_expanded_change props.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/accordion.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef ui_accordion_event():\n    expanded_keys, set_expanded_keys = ui.use_state([])\n\n    return ui.view(\n        ui.accordion(\n            ui.disclosure(\n                id=\"which-core-version\",\n                title=\"How can I find which Core version to which a particular feature or fix was added?\",\n                panel=\"At the bottom of a Deephaven Community Core commit message you can see branches and tags containing that particular change. You can browse commits in the deephaven-core GitHub repository. Click on any title for details.\",\n            ),\n            ui.disclosure(\n                id=\"docker-compose-required\",\n                title=\"Is docker compose required to run deephaven?\",\n                panel=\"No. You can run Deephaven via Docker without compose. See here for an example. Docker compose does make customizing your deployment easier, though, so we recommend it for users who want to do that.\",\n            ),\n            expanded_keys=expanded_keys,\n            on_expanded_change=set_expanded_keys,\n        ),\n        ui.heading(\"Currently expanded: \", expanded_keys, margin_top=\"20px\"),\n    )\n\n\nmy_accordion_event = ui_accordion_event()\n```\n\n----------------------------------------\n\nTITLE: Creating Different Dialog Types in Python with Deephaven UI\nDESCRIPTION: This snippet demonstrates how to create different types of dialogs: modal, popover, and tray.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/dialog.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\nmy_modal = ui.dialog_trigger(\n    ui.action_button(\n        \"Trigger Modal\",\n    ),\n    ui.dialog(\n        ui.heading(\"Modal\"),\n        ui.content(\"This is a modal.\"),\n    ),\n    is_dismissable=True,\n    type=\"modal\",\n)\n\nmy_popover = ui.dialog_trigger(\n    ui.action_button(\n        \"Trigger Popover\",\n    ),\n    ui.dialog(\n        ui.heading(\"Popover\"),\n        ui.content(\"This is a popover.\"),\n    ),\n    type=\"popover\",\n)\n\nmy_tray = ui.dialog_trigger(\n    ui.action_button(\n        \"Trigger Tray\",\n    ),\n    ui.dialog(\n        ui.heading(\"Tray\"),\n        ui.content(\"This is a tray.\"),\n    ),\n    type=\"tray\",\n)\n```\n\n----------------------------------------\n\nTITLE: Updating State Multiple Times Using Updater Functions\nDESCRIPTION: This snippet shows how to use updater functions to update the same state variable multiple times before the next render. It uses lambda functions to increment the counter by 3.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/add-interactivity/queueing-updates.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef counter():\n    number, set_number = ui.use_state(0)\n\n    def handle_press():\n        set_number(lambda n: n + 1)\n        set_number(lambda n: n + 1)\n        set_number(lambda n: n + 1)\n\n    return [ui.heading(f\"{number}\"), ui.button(\"+3\", on_press=handle_press)]\n\nexample_counter = counter()\n```\n\n----------------------------------------\n\nTITLE: Number Formatting in Labeled Value\nDESCRIPTION: Shows different number formatting options including percentage, currency, and units using format_options.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/labeled_value.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef ui_labeled_value_numbers_example():\n    return [\n        ui.labeled_value(\n            label=\"Percent completed\",\n            value=0.89,\n            format_options={\"style\": \"percent\"},\n        ),\n        ui.labeled_value(\n            label=\"Withdrawal amount\",\n            value=2350.50,\n            format_options={\"style\": \"currency\", \"currency\": \"USD\"},\n        ),\n        ui.labeled_value(\n            label=\"Height of Burj Khalifa\",\n            value=32600,\n            format_options={\"style\": \"unit\", \"unit\": \"inch\"},\n        ),\n    ]\n\nmy_labeled_value_numbers_example = ui_labeled_value_numbers_example()\n```\n\n----------------------------------------\n\nTITLE: Applying Custom CSS Classes with UNSAFE_class_name in Deephaven UI\nDESCRIPTION: Shows how to apply custom CSS styling using the UNSAFE_class_name property. Defines a CSS class and applies it to both a button and a div element.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/creating-layouts/escape-hatches.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\nunsafe_class_name = ui.panel(\n    ui.html.style(\n        \"\"\"\n        .my_class { background: red !important;}\n        \"\"\"\n    ),\n    ui.button(\"test\", UNSAFE_class_name=\"my_class\"),\n    ui.html.div(\"test\", class_name=\"my_class\"),\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Calendars in Deephaven UI\nDESCRIPTION: Demonstrates various implementations of the calendar component including different date types, time zones, and value constraints.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/DESIGN.md#2025-04-17_snippet_40\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.ui as ui\nfrom deephaven.time import to_j_local_date, dh_today, to_j_instant, to_j_zdt\n\nzoned_date_time = to_j_zdt(\"1995-03-22T11:11:11.23142 America/New_York\")\ninstant = to_j_instant(\"2022-01-01T00:00:00 ET\")\nlocal_date = to_j_local_date(dh_today())\n\n# simple calendar that takes ui.items and is uncontrolled\ncalendar1 = ui.calendar(\n    default_value=local_date\n)\n\n# simple calendar that takes list view items directly and is controlled\n# the on_change handler is passed an instant\ndate, set_date = ui.use_state(instant)\n\ncalendar2 = ui.calendar(\n    value=date,\n    on_change=set_date\n)\n\n# this creates a calendar in the specified time zone\n# the on_change handler is passed a zoned date time\ndate, set_date = ui.use_state(None)\n\ncalendar3 = ui.calendar(\n    default_value=zoned_date_time,\n    on_change=set_date\n)\n\n# this creates a calendar in UTC\n# the on_change handler is passed an instant\ndate, set_date = ui.use_state(None)\n\ncalendar4 = ui.calendar(\n    default_value=instant,\n    on_change=set_date\n)\n\n# this creates a calendar\n# the on_change handler is passed a local date\ndate, set_date = ui.use_state(None)\n\ncalendar5 = ui.calendar(\n    default_value=local_date,\n    on_change=set_date\n)\n\n# this creates a calendar the on_change handler is passed an instant\ndate, set_date = ui.use_state(None)\n\ncalendar7 = ui.calendar(\n    on_change=set_date\n)\n\n# this create a calendar, a min and max value\nmin_value = to_j_local_date(\"2022-01-01\")\nmax_value = to_j_local_date(\"2022-12-31\")\nunavailable_dates = [to_j_local_date(\"2022-03-15\"), to_j_local_date(\"2022-03-17\")]\ndate, set_date = ui.use_state(to_j_local_date(\"2022-03-16\"))\ncalendar8 = ui.calendar(\n    value=date,\n    min_value=min_value,\n    max_value=max_value,\n    on_change=set_date\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Travel Itinerary Structure in Python\nDESCRIPTION: Initial implementation using deeply nested dictionaries to represent a hierarchical travel plan with planets, continents, and countries. Each location contains an ID, title, and array of child places.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/managing-state/choose-the-state-structure.md#2025-04-17_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ninitial_travel_plan = {\n    \"id\": 0,\n    \"title\": \"(Root)\",\n    \"child_places\": [\n        {\n            \"id\": 1,\n            \"title\": \"Earth\",\n            \"child_places\": [\n                {\n                    \"id\": 2,\n                    \"title\": \"Africa\",\n                    \"child_places\": [\n                        {\"id\": 3, \"title\": \"Botswana\", \"child_places\": []},\n                        {\"id\": 4, \"title\": \"Egypt\", \"child_places\": []},\n                        {\"id\": 5, \"title\": \"Kenya\", \"child_places\": []},\n                        {\"id\": 6, \"title\": \"Madagascar\", \"child_places\": []},\n                        {\"id\": 7, \"title\": \"Morocco\", \"child_places\": []},\n                        {\"id\": 8, \"title\": \"Nigeria\", \"child_places\": []},\n                        {\"id\": 9, \"title\": \"South Africa\", \"child_places\": []},\n                    ],\n                },\n                {\n                    \"id\": 10,\n                    \"title\": \"Americas\",\n                    \"child_places\": [\n                        {\"id\": 11, \"title\": \"Argentina\", \"child_places\": []},\n                        {\"id\": 12, \"title\": \"Brazil\", \"child_places\": []},\n                        {\"id\": 13, \"title\": \"Barbados\", \"child_places\": []},\n                        {\"id\": 14, \"title\": \"Canada\", \"child_places\": []},\n                        {\"id\": 15, \"title\": \"Jamaica\", \"child_places\": []},\n                        {\"id\": 16, \"title\": \"Mexico\", \"child_places\": []},\n                        {\"id\": 17, \"title\": \"Trinidad and Tobago\", \"child_places\": []},\n                        {\"id\": 18, \"title\": \"Venezuela\", \"child_places\": []},\n                    ],\n                },\n                {\n                    \"id\": 19,\n                    \"title\": \"Asia\",\n                    \"child_places\": [\n                        {\"id\": 20, \"title\": \"China\", \"child_places\": []},\n                        {\"id\": 21, \"title\": \"India\", \"child_places\": []},\n                        {\"id\": 22, \"title\": \"Singapore\", \"child_places\": []},\n                        {\"id\": 23, \"title\": \"South Korea\", \"child_places\": []},\n                        {\"id\": 24, \"title\": \"Thailand\", \"child_places\": []},\n                        {\"id\": 25, \"title\": \"Vietnam\", \"child_places\": []},\n                    ],\n                },\n                {\n                    \"id\": 26,\n                    \"title\": \"Europe\",\n                    \"child_places\": [\n                        {\"id\": 27, \"title\": \"Croatia\", \"child_places\": []},\n                        {\"id\": 28, \"title\": \"France\", \"child_places\": []},\n                        {\"id\": 29, \"title\": \"Germany\", \"child_places\": []},\n                        {\"id\": 30, \"title\": \"Italy\", \"child_places\": []},\n                        {\"id\": 31, \"title\": \"Portugal\", \"child_places\": []},\n                        {\"id\": 32, \"title\": \"Spain\", \"child_places\": []},\n                        {\"id\": 33, \"title\": \"Turkey\", \"child_places\": []},\n                    ],\n                },\n                {\n                    \"id\": 34,\n                    \"title\": \"Oceania\",\n                    \"child_places\": [\n                        {\"id\": 35, \"title\": \"Australia\", \"child_places\": []},\n                        {\n                            \"id\": 36,\n                            \"title\": \"Bora Bora (French Polynesia)\",\n                            \"child_places\": [],\n                        },\n                        {\n                            \"id\": 37,\n                            \"title\": \"Easter Island (Chile)\",\n                            \"child_places\": [],\n                        },\n                        {\"id\": 38, \"title\": \"Fiji\", \"child_places\": []},\n                        {\"id\": 39, \"title\": \"Hawaii (the USA)\", \"child_places\": []},\n                        {\"id\": 40, \"title\": \"New Zealand\", \"child_places\": []},\n                        {\"id\": 41, \"title\": \"Vanuatu\", \"child_places\": []},\n                    ],\n                },\n            ],\n        },\n        {\n            \"id\": 42,\n            \"title\": \"Moon\",\n            \"child_places\": [\n                {\"id\": 43, \"title\": \"Rheita\", \"child_places\": []},\n                {\"id\": 44, \"title\": \"Piccolomini\", \"child_places\": []},\n                {\"id\": 45, \"title\": \"Tycho\", \"child_places\": []},\n            ],\n        },\n        {\n            \"id\": 46,\n            \"title\": \"Mars\",\n            \"child_places\": [\n                {\"id\": 47, \"title\": \"Corn Town\", \"child_places\": []},\n                {\"id\": 48, \"title\": \"Green Hill\", \"child_places\": []},\n            ],\n        },\n    ],\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Complex Dialog with Form in Python using Deephaven UI\nDESCRIPTION: This example shows how to create a more complex dialog with a form for user input, including text fields and a checkbox in the footer.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/dialog.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef dialog_example3():\n    is_open, set_open = ui.use_boolean()\n    return ui.dialog_trigger(\n        ui.action_button(\"Register\", on_press=set_open.on),\n        ui.dialog(\n            ui.heading(\n                ui.flex(\n                    ui.text(\"Register for newsletter\"),\n                    align_items=\"center\",\n                    gap=\"size-100\",\n                )\n            ),\n            ui.content(\n                ui.form(\n                    ui.text_field(label=\"First Name\", auto_focus=True),\n                    ui.text_field(label=\"Last Name\"),\n                    ui.text_field(label=\"Street Address\"),\n                    ui.text_field(label=\"City\"),\n                )\n            ),\n            ui.footer(\n                ui.checkbox(\"I want to receive updates for exclusive offers.\"),\n            ),\n            ui.button_group(\n                ui.button(\"Cancel\", variant=\"secondary\", on_press=set_open.off),\n                ui.button(\"Register\", variant=\"accent\", on_press=set_open.off),\n            ),\n        ),\n        is_open=is_open,\n    )\n\nmy_dialog_example3 = dialog_example3()\n```\n\n----------------------------------------\n\nTITLE: Managing List Items with Keys in Deephaven UI (Python)\nDESCRIPTION: This snippet illustrates the importance of using keys when rendering list items that can be dynamically added or removed. It implements a component with deletable cells, demonstrating how keys ensure correct item deletion.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/describing/render_lists.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\nimport itertools\n\n\n@ui.component\ndef ui_cell(label=\"Cell\"):\n    text, set_text = ui.use_state(\"\")\n    return ui.text_field(label=label, value=text, on_change=set_text)\n\n\n@ui.component\ndef ui_deletable_cell(i, delete_cell):\n    return ui.flex(\n        ui_cell(label=f\"Cell {i}\"),\n        ui.action_button(\n            ui.icon(\"vsTrash\"),\n            aria_label=\"Delete cell\",\n            on_press=lambda: delete_cell(i),\n        ),\n        align_items=\"end\",\n    )\n\n\n@ui.component\ndef ui_cells():\n    id_iter, set_id_iter = ui.use_state(lambda: itertools.count())\n    cells, set_cells = ui.use_state(lambda: [next(id_iter)])\n\n    def add_cell():\n        set_cells(lambda old_cells: old_cells + [next(id_iter)])\n\n    def delete_cell(delete_id: int):\n        set_cells(lambda old_cells: [c for c in old_cells if c != delete_id])\n\n    return ui.view(\n        [\n            ui_deletable_cell(\n                i,\n                delete_cell,\n                # uncomment this line to fix\n                # key=str(i)\n            )\n            for i in cells\n        ],\n        ui.action_button(ui.icon(\"vsAdd\"), \"Add cell\", on_press=add_cell),\n        overflow=\"auto\",\n    )\n\n\ncells = ui_cells()\n```\n\n----------------------------------------\n\nTITLE: Pending State Button Implementation\nDESCRIPTION: Shows how to implement a button with a pending state that displays a spinner during async operations.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/button.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\nfrom threading import Timer\n\n\n@ui.component\ndef pending_button():\n    [pending, set_pending] = ui.use_state(False)\n\n    def handle_on_press():\n        # start an asynchronous thing\n        timeout = Timer(3, callback_finshed)  # use a timer to wait 3 seconds\n        timeout.start()\n\n        # turn on loading spinner\n        set_pending(True)\n\n    def callback_finshed():\n        # turn of loading spinner\n        set_pending(False)\n\n    return ui.button(\n        \"Pending request\",\n        on_press=handle_on_press,\n        is_pending=pending,\n        variant=\"accent\",\n    )\n\n\npending_example = pending_button()\n```\n\n----------------------------------------\n\nTITLE: Creating Heatmaps with Large Datasets in Python\nDESCRIPTION: Demonstrates creating density heatmaps with large datasets (10 million rows) and shows how to optimize visualization with increased bin counts.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/plotly-express/docs/density_heatmap.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven.plot import express as dx\nfrom deephaven import empty_table\n\nlarge_data = empty_table(10_000_000).update([\n    \"X = 50 + 25 * cos(i * Math.PI / 180)\",\n    \"Y = 50 + 25 * sin(i * Math.PI / 180)\",\n])\n\n# specify range to see entire plot\nlarge_heatmap_1 = dx.density_heatmap(large_data, x=\"X\", y=\"Y\", range_bins_x=[0,100], range_bins_y=[0,100])\n\n# using bins may be useful for more precise visualizations\nlarge_heatmap_2 = dx.density_heatmap(\n    large_data,\n    x=\"X\",\n    y=\"Y\",\n    range_bins_x=[0,100],\n    range_bins_y=[0,100],\n    nbinsx=100,\n    nbinsy=100\n)\n```\n\n----------------------------------------\n\nTITLE: Handling Form Invalid Event in Deephaven UI (Python)\nDESCRIPTION: Shows how to create a form with invalid event handling and native validation behavior, including a required text field.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/form.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef ui_form_invalid():\n    value, set_value = ui.use_state(\"\")\n    return ui.form(\n        ui.text_field(\n            name=\"name\",\n            label=\"Enter name\",\n            value=value,\n            on_change=set_value,\n            is_required=True,\n        ),\n        ui.number_field(name=\"age\", label=\"Enter age\"),\n        ui.button(\"Submit\", type=\"submit\"),\n        on_invalid=lambda e: print(f\"Form invalid\"),\n        validation_behavior=\"native\",\n    )\n\nmy_form_invalid = ui_form_invalid()\n```\n\n----------------------------------------\n\nTITLE: Implementing Flex Wrapping in Deephaven UI\nDESCRIPTION: This snippet shows how to enable wrapping in a flex container using the wrap property in Deephaven UI. It creates a flex container with multiple child views that will wrap based on the container's width.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/flex.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef ui_flex_wrap():\n    return ui.flex(\n        ui.view(1, background_color=\"red\", height=\"size-800\", width=\"size-800\"),\n        ui.view(2, background_color=\"green\", height=\"size-800\", width=\"size-800\"),\n        ui.view(3, background_color=\"yellow\", height=\"size-800\", width=\"size-800\"),\n        ui.view(4, background_color=\"blue\", height=\"size-800\", width=\"size-800\"),\n        ui.view(5, background_color=\"orange\", height=\"size-800\", width=\"size-800\"),\n        wrap=True,\n        width=\"200px\",\n        align_content=\"start\",\n    )\n\nmy_flex_wrap = ui_flex_wrap()\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Stack Dashboard in Python\nDESCRIPTION: Illustrates how to create a basic stack dashboard layout using the Deephaven UI library.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/dashboard.md#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\ndash_stack = ui.dashboard(\n    ui.stack(\n        ui.panel(\"A\", title=\"A\"), ui.panel(\"B\", title=\"B\"), ui.panel(\"C\", title=\"C\")\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Creating an Ordered Bar Plot in Deephaven\nDESCRIPTION: Shows how to change the x-axis ordering of a bar plot by first sorting the dataset by the categorical variable, resulting in an alphabetically ordered display.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/plotly-express/docs/bar.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.plot.express as dx\ntips = dx.data.tips()\n\n# sort the dataset to get a specific x-axis ordering, sort() acts alphabetically\nordered_bar_plot = dx.bar(tips.sort(\"Day\"), x=\"Day\", y=\"TotalBill\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Counter Component with useState Hook\nDESCRIPTION: Demonstrates a simple counter component using the use_state hook to maintain state. The component displays a button that increments a counter each time it's pressed.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/docker/data/storage/notebooks/DEMO.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@ui.component\ndef counter():\n    count, set_count = ui.use_state(0)\n    return ui.action_button(\n        f\"You pressed me {count} times\", on_press=lambda _: set_count(count + 1)\n    )\n\n\nresult = counter()\n```\n\n----------------------------------------\n\nTITLE: Creating a Delta Indicator Plot in Python\nDESCRIPTION: Creates an indicator plot that shows a value with a delta to a reference value. The example aggregates DOG stock data to show the average price compared to the starting price.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/plotly-express/docs/indicator.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.plot.express as dx\nfrom deephaven import agg as agg\nmy_table = dx.data.stocks()\n\n# subset data and aggregate for DOG prices\ndog_agg = my_table.where(\"Sym = `DOG`\").agg_by([agg.avg(cols=\"Price\"), agg.first(cols=\"StartingPrice = Price\")])\n\nindicator_plot = dx.indicator(dog_agg, value=\"Price\", reference=\"StartingPrice\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Long Press Behavior in Menu Trigger\nDESCRIPTION: Demonstrates how to set up a menu trigger with long press behavior, where the menu only opens on long press or specific key combinations.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/menu_trigger.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\nmy_long_press_example = ui.menu_trigger(\n    ui.action_button(\"Crop tool\", on_press=lambda _: print(\"Cropping!\")),\n    ui.menu(\n        ui.item(\"Crop Rotate\"),\n        ui.item(\"Slice\"),\n        ui.item(\"Clone stamp\"),\n    ),\n    trigger=\"longPress\",\n)\n```\n\n----------------------------------------\n\nTITLE: Creating an Enhanced Table with ui.table\nDESCRIPTION: Demonstrates creating a customized table that reverses row order, rearranges columns, hides specific columns, and uses compact density for optimal data display.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/tutorial.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nui_iris = ui.table(\n  iris,\n  reverse=True,\n  front_columns=[\"Timestamp\", \"Species\"],\n  hidden_columns=[\"PetalLength\", \"PetalWidth\", \"SpeciesID\"],\n  density=\"compact\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Message Form with Delayed Execution in deephaven.ui\nDESCRIPTION: This example demonstrates how state values in closures are preserved even with timing delays. The form allows sending a message with a 5-second delay, showing that state values are captured at the time of the event, not when the delayed function executes.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/add-interactivity/state-as-a-snapshot.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom threading import Timer\nfrom deephaven import ui\n\n\n@ui.component\ndef form():\n    to, set_to = ui.use_state(\"Alice\")\n    message, set_message = ui.use_state(\"Hello\")\n\n    def handle_submit():\n        Timer(5, lambda: print(f\"You said {message} to {to}\")).start()\n\n    return ui.form(\n        ui.picker(\n            \"Alice\", \"Bob\", label=\"To\", selected_key=to, on_selection_change=set_to\n        ),\n        ui.text_area(value=message, on_change=set_message),\n        ui.button(\"Send\", type=\"submit\"),\n        on_submit=handle_submit,\n    )\n\n\nexample_form = form()\n```\n\n----------------------------------------\n\nTITLE: Formatting Number Fields with Units in Python\nDESCRIPTION: This snippet illustrates how to format a number field to display values with specific units using Deephaven's UI library.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/number_field.md#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef ui_number_field_unit_example():\n\n    return [\n        ui.number_field(\n            label=\"Unit\",\n            default_value=\"10\",\n            format_options={\"style\": \"unit\", \"unit\": \"inch\"},\n        ),\n    ]\n\n\nmy_number_field_unit_example = ui_number_field_unit_example()\n```\n\n----------------------------------------\n\nTITLE: Conditional Component Rendering\nDESCRIPTION: Shows how to implement conditional rendering in Deephaven UI components based on input parameters.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/describing/component_rules.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef return_conditional(is_button):\n    if is_button:\n        return ui.button(\"button\")\n    return ui.text(\"text\")\n\n\nmy_button = return_conditional(True)\nmy_text = return_conditional(False)\n```\n\n----------------------------------------\n\nTITLE: Custom Sentinel Value for Empty Tables\nDESCRIPTION: Demonstrates using a custom sentinel value when the table is empty, providing a default dictionary with predefined values instead of None.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/hooks/use_row_data.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import time_table, ui\nimport datetime as dt\n\n@ui.component\ndef ui_table_row(table):\n    row_data = ui.use_row_data(table, sentinel={\"Timestamp\": \"No data yet.\"})\n    return ui.heading(f\"Row data: {row_data}. Value of 'x' is {row_data['x']}\")\n\nstart_time = dt.datetime.now() + dt.timedelta(seconds=2)\ntable_row = ui_table_row(\n    time_table(\"PT1s\", start_time=start_time).update(\"x=i\").tail(1)\n)\n```\n\n----------------------------------------\n\nTITLE: Component Return Value Examples\nDESCRIPTION: Shows various types of return values possible in Deephaven UI components, including components, lists, tuples, None, and primitive values.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/describing/component_rules.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef return_component():\n    return ui.text(\"component\")\n\n\n@ui.component\ndef list_of_components():\n    return [ui.text(\"list\"), ui.text(\"of\"), ui.text(\"components\")]\n\n\n@ui.component\ndef return_tuple():\n    return (ui.text(\"a\"), ui.text(\"b\"))\n\n\n@ui.component\ndef return_none():\n    print(\"return none\")\n    return None\n\n\n@ui.component\ndef return_string():\n    return \"string\"\n\n\n@ui.component\ndef return_int():\n    return 1\n\n\nmy_return_component = return_component()\nmy_list_of_components = list_of_components()\nmy_return_tuple = return_tuple()\nmy_return_none = return_none()\nmy_return_string = return_string()\nmy_return_int = return_int()\n```\n\n----------------------------------------\n\nTITLE: Direct Styling with UNSAFE_style in Deephaven UI\nDESCRIPTION: Demonstrates using the UNSAFE_style property to apply inline styles directly to components using Python dictionaries. Creates two buttons with different background colors.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/creating-layouts/escape-hatches.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\nunsafe_style = ui.panel(\n    ui.button(\"test\", UNSAFE_style={\"background\": \"red\"}),\n    ui.button(\"test\", UNSAFE_style={\"background\": \"green\"}),\n)\n```\n\n----------------------------------------\n\nTITLE: Time Zone Aware Date Fields\nDESCRIPTION: Implementation of date fields with time zone awareness using ZonedDateTime and Instant objects.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/date_field.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\nfrom deephaven.time import to_j_instant\n\nmy_zoned_date_time = ui.date_field(\n    label=\"Date field\",\n    default_value=\"2022-11-07T00:45 America/Los_Angeles\",\n)\n\nmy_instant = ui.date_field(\n    label=\"Date field\",\n    default_value=to_j_instant(\"2022-11-07T00:45Z\"),\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Parameterized Query in Groovy\nDESCRIPTION: Creates a parameterized query with low/high range parameters that filter stock trades data and plot results. Parameters automatically trigger re-execution of the scope when changed.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/DESIGN.md#2025-04-17_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nimport io.deephaven.query.parameterized.ParameterizedQuery\nimport io.deephaven.query.parameterized.Parameter\n\nmyQuery = ParameterizedQuery.create()\n  .with(Parameter.ofLong(\"low\").inRange(0, 20).withDefault(5))\n  .with(Parameter.ofLong(\"high\").inRange(0, 20).withDefault(15))\n  .willDo({scope ->\n    def low = scope.getLong(\"low\")\n    def high = scope.getLong(\"high\")\n    def tableResult = db.t(\"LearnDeephaven\", \"StockTrades\")\n    .where(\"Date=`2017-08-25`\", \"Size<=$high\", \"Size>=$low\")\n    plotResult = plot(\"Stuff\", tableResult, \"Timestamp\", \"Last\").show()\n    scope.setResult(\"tableResult\", tableResult)\n    scope.setResult(\"plotResult\", plotResult)\n  }).build()\n```\n\n----------------------------------------\n\nTITLE: Configuring Dashboard with Varying Row Heights in Python\nDESCRIPTION: Shows how to create a dashboard with rows of different heights using the Deephaven UI library.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/dashboard.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\ndash_row_heights = ui.dashboard(\n    [\n        ui.row(ui.stack(ui.panel(\"A\", title=\"A\")), ui.panel(\"B\", title=\"B\"), height=70),\n        ui.row(ui.stack(ui.panel(\"C\", title=\"C\")), ui.panel(\"D\", title=\"D\")),\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Histogram Binning and Aggregation on Different Columns\nDESCRIPTION: Demonstrates how to create histograms with different orientations and aggregation functions using multiple columns of data.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/plotly-express/docs/histogram.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.plot.express as dx\niris = dx.data.iris()\n\n# subset to get specific species\nsetosa = iris.where(\"Species == `setosa`\")\n\n# The default orientation is \"v\" (vertical) and the default aggregation function is \"sum\"\nhist_v = dx.histogram(setosa, x=\"SepalLength\", y=\"SepalWidth\")\n\n# Control the plot orientation using orientation\nhist_h = dx.histogram(setosa, x=\"SepalLength\", y=\"SepalWidth\", orientation=\"h\")\n\n# Control the aggregation function using histfunc\nhist_avg = dx.histogram(setosa, x=\"SepalLength\", y=\"SepalWidth\", histfunc=\"avg\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Dismissable Dialog in Python with Deephaven UI\nDESCRIPTION: This snippet demonstrates how to create a dismissable dialog without a button group, rendering a close button at the top right of the dialog.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/dialog.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\nmy_dialog_example2 = ui.dialog_trigger(\n    ui.action_button(\"Status\"),\n    ui.dialog(ui.heading(\"Status\"), ui.content(\"Printer Status: Connected\")),\n    is_dismissable=True,\n)\n```\n\n----------------------------------------\n\nTITLE: Disabling Specific List View Options in Python with Deephaven UI\nDESCRIPTION: This snippet demonstrates how to disable specific options in a List View using the disabled_keys prop.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/list_view.md#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui, new_table\nfrom deephaven.column import string_col\n\n_table = new_table(\n    [\n        string_col(\"Keys\", [\"key-0\", \"key-1\", \"key-2\"]),\n        string_col(\"Labels\", [\"Option 0\", \"Option 1\", \"Option 2\"]),\n    ]\n)\n\n@ui.component\ndef ui_list_view_disabled():\n    value, set_value = ui.use_state([\"key-2\"])\n\n    source = ui.item_table_source(\n        _table,\n        key_column=\"Keys\",\n        label_column=\"Labels\",\n    )\n    lv = ui.list_view(\n        source, selected_keys=value, on_change=set_value, disabled_keys=[\"key-0\"]\n    )\n\n    return lv\n\nmy_list_view_disabled = ui_list_view_disabled()\n```\n\n----------------------------------------\n\nTITLE: Creating a Styled View Container in Python with Deephaven UI\nDESCRIPTION: This snippet demonstrates how to create a View container with custom styling using Deephaven UI. It includes a text field with border, background color, border radius, and padding applied.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/view.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\nview = ui.view(\n    ui.text_field(label=\"Name\"),\n    border_width=\"thin\",\n    border_color=\"seafoam-800\",\n    background_color=\"seafoam-300\",\n    border_radius=\"medium\",\n    padding=\"size-250\",\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Line Plot with Line Dash Grouping\nDESCRIPTION: Creates a line plot using different line dash styles to differentiate between stock symbols.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/plotly-express/docs/plot-by.md#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.plot.express as dx\nstocks = dx.data.stocks() # import ticking Stocks dataset\n\n# use `line_dash` argument to change line appearance per stock symbol\nprices_by_sym = dx.line(stocks, x=\"Timestamp\", y=\"Price\", line_dash=\"Sym\")\n```\n\n----------------------------------------\n\nTITLE: Implementing State Setter in Event Handler\nDESCRIPTION: This snippet shows how to use the state setter function in an event handler to update state and trigger a re-render. The function accepts the new value that should be set.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/add-interactivity/state-a-components-memory.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nset_index(index + 1)\n```\n\n----------------------------------------\n\nTITLE: Multithreaded Table Update with Render Queue\nDESCRIPTION: Demonstrates using use_render_queue to safely update table state from a background thread.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/add-interactivity/update-tables-in-state.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui, time_table\nimport threading\n\n@ui.component\ndef ui_resetable_table():\n    render_queue = ui.use_render_queue()\n    table, set_table = ui.use_state(lambda: time_table(\"PT1s\"))\n\n    def do_work():\n        render_queue(lambda: set_table(time_table(\"PT1s\")))\n\n    def start_background_thread():\n        threading.Thread(target=do_work).start()\n\n    return [\n        ui.action_button(\n            \"Reset\",\n            on_press=start_background_thread,\n        ),\n        table,\n    ]\n\nresetable_table = ui_resetable_table()\n```\n\n----------------------------------------\n\nTITLE: Implementing Vertical Alignment with Flex in Deephaven UI (Python)\nDESCRIPTION: This snippet demonstrates how to use the flex component in Deephaven UI to create vertically aligned layouts. It showcases different alignment options (start, center, end) for column-direction flex containers.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/flex.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef ui_flex_align_vertical():\n    vertical = ui.flex(\n        ui.flex(\n            ui.view(1, background_color=\"red\", height=\"size-800\", width=\"size-400\"),\n            ui.view(2, background_color=\"green\", height=\"size-800\", width=\"size-800\"),\n            ui.view(3, background_color=\"blue\", height=\"size-800\", width=\"size-200\"),\n            direction=\"column\",\n            align_items=\"start\",\n        ),\n        ui.flex(\n            ui.view(1, background_color=\"red\", height=\"size-800\", width=\"size-400\"),\n            ui.view(2, background_color=\"green\", height=\"size-800\", width=\"size-800\"),\n            ui.view(3, background_color=\"blue\", height=\"size-800\", width=\"size-200\"),\n            direction=\"column\",\n            align_items=\"center\",\n        ),\n        ui.flex(\n            ui.view(1, background_color=\"red\", height=\"size-800\", width=\"size-400\"),\n            ui.view(2, background_color=\"green\", height=\"size-800\", width=\"size-800\"),\n            ui.view(3, background_color=\"blue\", height=\"size-800\", width=\"size-200\"),\n            direction=\"column\",\n            align_items=\"end\",\n        ),\n    )\n\n    return ui.flex(vertical)\n\nmy_flex_align_vertical = ui_flex_align_vertical()\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Line Plot in Python with Deephaven\nDESCRIPTION: This snippet demonstrates how to create a basic line plot using Deephaven's plotting library. It visualizes the price of a specific stock (DOG) over time.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/plotly-express/docs/line.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.plot.express as dx\nmy_table = dx.data.stocks()\n\n# subset data for just DOG transactions\ndog_prices = my_table.where(\"Sym = `DOG`\")\n\nline_plot = dx.line(dog_prices, x=\"Timestamp\", y=\"Price\")\n```\n\n----------------------------------------\n\nTITLE: Rendering Lists with Fragments in Python\nDESCRIPTION: Shows how to render a list of posts using fragments with unique keys for proper item management. The example creates a component that displays posts with titles and bodies in a column layout.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/fragment.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef ui_post_list(items):\n    posts = (\n        ui.fragment(ui.heading(p[\"title\"]), ui.text(p[\"body\"]), key=p[\"id\"])\n        for p in items\n    )\n    return ui.flex(\n        *posts,\n        direction=\"column\",\n    )\n\n\nmy_post_list = ui_post_list(\n    [\n        {\"id\": 1, \"title\": \"About me\", \"body\": \"I am a developer\"},\n        {\"id\": 2, \"title\": \"Contact\", \"body\": \"I want to hear from you!\"},\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Using an Inline Lambda for Event Handling in Deephaven UI\nDESCRIPTION: This example shows how to use a lambda function directly in the component definition for handling button clicks, which is convenient for short handler functions.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/add-interactivity/respond-to-events.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef my_button():\n    return ui.button(\"Click me\", on_press=lambda: print(\"You clicked me!\"))\n\n\nbutton_with_inline_event = my_button()\n```\n\n----------------------------------------\n\nTITLE: Grid Alignment Example in Deephaven UI\nDESCRIPTION: Demonstrates various alignment options for grid items with interactive picker control. Shows different align_items values and their effects on grid item positioning.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/grid.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\ncolors = []\nfor i in range(100, 901, 100):\n    colors.append(f\"red-{i}\")\n    colors.append(f\"green-{i}\")\n    colors.append(f\"blue-{i}\")\n\n@ui.component\ndef grid_align():\n    align, set_align = ui.use_state(\"stretch\")\n    return [\n        ui.picker(\n            ui.item(\"stretch\"),\n            ui.item(\"start\"),\n            ui.item(\"end\"),\n            ui.item(\"center\"),\n            ui.item(\"self-start\"),\n            ui.item(\"self-end\"),\n            ui.item(\"baseline\"),\n            ui.item(\"first baseline\"),\n            ui.item(\"last baseline\"),\n            ui.item(\"safe center\"),\n            ui.item(\"unsafe center\"),\n            selected_key=align,\n            on_selection_change=set_align,\n            label=\"Pick an option (controlled)\",\n        ),\n        ui.grid(\n            [\n                ui.view(background_color=color, height=\"25px\", width=\"25px\")\n                for color in colors\n            ],\n            columns=\"repeat(3, 80px)\",\n            rows=[\"repeat(9, 80px)\"],\n            align_items=align,\n        ),\n    ]\n\ngrid_align_example = grid_align()\n```\n\n----------------------------------------\n\nTITLE: Basic Slider Implementation in Python\nDESCRIPTION: Creates a basic slider component with a default value and label for selecting number of cookies.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/slider.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\nmy_slider_basic = ui.slider(default_value=12, label=\"Cookies to buy\")\n```\n\n----------------------------------------\n\nTITLE: Customizing Meter Value Range in Deephaven UI (Python)\nDESCRIPTION: Shows how to set custom minimum and maximum values for a meter. This example creates a meter for tutorials completed, with a range from 50 to 150.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/meter.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef ui_meter_value():\n    return ui.meter(label=\"Tutorials completed\", value=100, min_value=50, max_value=150)\n\nmy_meter_value = ui_meter_value()\n```\n\n----------------------------------------\n\nTITLE: Initializing Date Picker Component in Deephaven UI (Python)\nDESCRIPTION: Function signature for creating a date picker component in Deephaven UI. It accepts various parameters to customize the date picker's behavior and appearance, similar to the date field component.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/DESIGN.md#2025-04-17_snippet_43\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.ui as ui\nui.date_picker(\n    placeholder_value: Date | None = None,\n    value: Date | None = None,\n    default_value: Date | None = None,\n    min_value: Date | None = None,\n    max_value: Date | None = None,\n    granularity: Granularity | None = None,\n    on_change: Callable[[Date], None] | None = None,\n    **props: Any\n) -> DatePickerElement\n```\n\n----------------------------------------\n\nTITLE: Creating a Text Field Component with useState\nDESCRIPTION: Creates a component with a text field input, allowing users to type text and see it displayed. It also includes a counter button. Uses Flex component to organize UI elements in a column.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/docker/data/storage/notebooks/DEMO.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@ui.component\ndef my_input():\n    text, set_text = ui.use_state(\"hello\")\n    count, set_count = ui.use_state(0)\n\n    return ui.flex(\n        ui.action_button(\n            f\"You pressed me {count} times\", on_press=lambda _: set_count(count + 1)\n        ),\n        ui.text_field(value=text, on_change=set_text),\n        ui.text(f\"You typed {text}\"),\n        gap=10,\n        margin=10,\n        direction=\"column\",\n    )\n\n\nresult = my_input()\n```\n\n----------------------------------------\n\nTITLE: Updating State After Replacing It\nDESCRIPTION: This example demonstrates what happens when you update state after replacing it. It shows how deephaven.ui processes the queue of state updates, including both direct value assignments and updater functions.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/add-interactivity/queueing-updates.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef counter():\n    number, set_number = ui.use_state(0)\n\n    def handle_press():\n        set_number(number + 5)\n        set_number(lambda n: n + 1)\n\n    return [ui.heading(f\"{number}\"), ui.button(\"+3\", on_press=handle_press)]\n\nexample_counter = counter()\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Ternary Scatter Plot in Python using Deephaven\nDESCRIPTION: Demonstrates how to create a basic ternary scatter plot using Deephaven's plotting library. The example uses election data to visualize the distribution of votes between three candidates (Joly, Coderre, and Bergeron) in a triangular coordinate system.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/plotly-express/docs/scatter-ternary.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.plot.express as dx\nelection = dx.data.election()\n\n# create a ternary scatter plot by specifying the columns for the three points of the triangle\nternary_scatter_plot = dx.scatter_ternary(election, a=\"Joly\", b=\"Coderre\", c=\"Bergeron\")\n```\n\n----------------------------------------\n\nTITLE: Multi-threaded Toast Implementation\nDESCRIPTION: Complex example showing toast implementation with multi-threading, CSV loading, and error handling.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/toast.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport threading\nfrom deephaven import read_csv, ui\n\n\n@ui.component\ndef csv_loader():\n    render_queue = ui.use_render_queue()\n    table, set_table = ui.use_state()\n    error, set_error = ui.use_state()\n\n    def handle_submit(data):\n        def load_table():\n            try:\n                t = read_csv(data[\"url\"])\n\n                def update_state():\n                    set_error(None)\n                    set_table(t)\n                    ui.toast(\"Table loaded\", variant=\"positive\", timeout=5000)\n\n                render_queue(update_state)\n            except Exception as e:\n                error_message = e\n\n                def update_state():\n                    set_table(None)\n                    set_error(error_message)\n                    ui.toast(\n                        f\"Unable to load table: {error_message}\",\n                        variant=\"negative\",\n                        timeout=5000,\n                    )\n\n                render_queue(update_state)\n\n        threading.Thread(target=load_table).start()\n\n    return [\n        ui.form(\n            ui.flex(\n                ui.text_field(\n                    default_value=\"https://media.githubusercontent.com/media/deephaven/examples/main/DeNiro/csv/deniro.csv\",\n                    label=\"Enter URL\",\n                    label_position=\"side\",\n                    name=\"url\",\n                    flex_grow=1,\n                ),\n                ui.button(f\"Load Table\", type=\"submit\"),\n                gap=10,\n            ),\n            on_submit=handle_submit,\n        ),\n        (\n            ui.illustrated_message(\n                ui.heading(\"Enter URL above\"),\n                ui.content(\"Enter a URL of a CSV above and click 'Load' to load it\"),\n            )\n            if error is None and table is None\n            else None\n        ),\n        table,\n        (\n            ui.illustrated_message(\n                ui.icon(\"vsWarning\"),\n                ui.heading(\"Error loading table\"),\n                ui.content(f\"{error}\"),\n            )\n            if error != None\n            else None\n        ),\n    ]\n\n\nmy_loader = csv_loader()\n```\n\n----------------------------------------\n\nTITLE: Creating Grouped Bar Plots by Categorical Variables in Deephaven\nDESCRIPTION: Demonstrates how to partition bars by different grouping variables using the 'by' parameter. The example creates two different grouped bar plots, one grouped by smoking status and another by sex.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/plotly-express/docs/bar.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.plot.express as dx\ntips = dx.data.tips()\n\nsorted_tips = tips.sort(\"Day\")\n\n# group by smoker / non-smoker\nbar_plot_smoke = dx.bar(sorted_tips, x=\"Day\", y=\"TotalBill\", by=\"Smoker\")\n\n# group by male / female\nbar_plot_sex = dx.bar(sorted_tips, x=\"Day\", y=\"TotalBill\", by=\"Sex\")\n```\n\n----------------------------------------\n\nTITLE: Creating Reusable Stock Table Components with State Management\nDESCRIPTION: Implements a component that shows stock data for a specific exchange with a text input for symbol selection. Demonstrates component reuse with different parameters.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/DESIGN.md#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n@ui.component\ndef stock_table(exchange: str):\n    sym, set_sym = use_state(\"AAPL\")\n    table = use_memo(\n        lambda: db.live_table(\"LearnDeephaven\", \"StockTrades\").where(\n            [f\"Exchange=`{exchange}`\", f\"Sym=`{sym}`\"]\n        ),\n        [exchange, sym],\n    )\n    return [ui.text_input(value=sym, on_value_change=set_sym), table]\n\n\nnasdaq_table = stock_table(\"NASDAQ\")\nnyse_table = stock_table(\"NYSE\")\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Contextual Help in Deephaven UI (Python)\nDESCRIPTION: Demonstrates how to create a basic contextual help component with required props (heading and content) and an optional footer. The variant is set to 'info'.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/contextual_help.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\nmy_contextual_help_basic = ui.contextual_help(\n    heading=\"Need Help\",\n    content=\"If you are having issues accessing your account, contact our customer support team for help.\",\n    footer=ui.link(\"Download support logs\"),\n    variant=\"info\",\n)\n```\n\n----------------------------------------\n\nTITLE: Customizing Contextual Help Placement in Deephaven UI (Python)\nDESCRIPTION: Shows how to create multiple contextual help components with different placement options. The function demonstrates default, 'top start', and 'end' placements.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/contextual_help.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef ui_contextual_help_placement_examples():\n    return [\n        ui.contextual_help(\n            heading=\"Need Help\",\n            content=\"If you are having issues accessing your account, contact our customer support team for help.\",\n            variant=\"info\",\n        ),\n        ui.contextual_help(\n            heading=\"Need Help\",\n            content=\"If you are having issues accessing your account, contact our customer support team for help.\",\n            variant=\"info\",\n            placement=\"top start\",\n        ),\n        ui.contextual_help(\n            heading=\"Need Help\",\n            content=\"If you are having issues accessing your account, contact our customer support team for help.\",\n            variant=\"info\",\n            placement=\"end\",\n        ),\n    ]\n\n\nmy_contextual_help_placement_examples = ui_contextual_help_placement_examples()\n```\n\n----------------------------------------\n\nTITLE: Basic Markdown Component Example in Python\nDESCRIPTION: Demonstrates basic usage of the markdown component with various markdown formatting elements including headings, lists, and text styling.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/markdown.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\nmarkdown_str = \"\"\"\n# Heading 1\n## Heading 2\n### Heading 3\n\nRegular **bold** *italic*\n\n- Unordered list 1\n- Unordered list 2\n\n1. Ordered list 1\n2. Ordered list 2\n\n`inline code`\n\"\"\"\n\n@ui.component\ndef ui_markdown():\n    return ui.markdown(markdown_str)\n\nui_markdown_example = ui_markdown()\n```\n\n----------------------------------------\n\nTITLE: Date Field Granularity Control\nDESCRIPTION: Example showing how to control date field granularity between seconds and days.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/date_field.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef granularity_example():\n    value, set_value = ui.use_state(\"2021-04-07T18:45:22 UTC\")\n    return ui.flex(\n        ui.date_field(\n            label=\"Date field and time field\",\n            granularity=\"SECOND\",\n            value=value,\n            on_change=set_value,\n        ),\n        ui.date_field(\n            label=\"Date field\", granularity=\"DAY\", value=value, on_change=set_value\n        ),\n        gap=\"size-150\",\n        wrap=True,\n    )\n\nmy_granularity_example = granularity_example()\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Number Field in Python with Deephaven UI\nDESCRIPTION: This snippet demonstrates how to create a basic number field with a label, onChange event handler, and default value using Deephaven's UI library.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/number_field.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\nmy_number_field = ui.number_field(\n    label=\"Width\",\n    on_change=lambda value: print(f\"Number changed to {value}\"),\n    default_value=1024,\n)\n```\n\n----------------------------------------\n\nTITLE: Component with useMemo Hook in Python\nDESCRIPTION: Shows implementation of caching using a useMemo-like hook to prevent unnecessary data reloading.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/DESIGN.md#2025-04-17_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.ui as ui\nfrom deephaven.parquet import read\n\n@ui.component\ndef text_filter_table(source: Table, column: str):\n    value, set_value = ui.use_state(\"\")\n    t = source.where(f\"{column}=`{value}`\")\n    return ui.flex(\n        [\n            ui.text_input(\n                value=value, on_change=lambda event: set_value(event[\"value\"])\n            ),\n            t,\n        ]\n    )\n\n@ui.component\ndef my_caching_component(parquet_path=\"/data/stocks.parquet\"):\n    value, set_value = ui.use_state(\"\")\n    source = use_memo(lambda: read(parquet_path), [parquet_path])\n    t = source.where(f\"sym=`{value}`\")\n    return ui.flex(\n        [\n            ui.text_input(\n                value=value, on_change=lambda event: set_value(event[\"value\"])\n            ),\n            t,\n        ]\n    )\n```\n\n----------------------------------------\n\nTITLE: Creating a Required Text Input Filter for Tables\nDESCRIPTION: Implements a component with a required text input that filters a table. It displays a placeholder message when no value is entered and shows the filtered table only after user input, using a ternary operator for conditional rendering.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/DESIGN.md#2025-04-17_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.ui as ui\n\n\n@ui.component\ndef text_filter_table(source: Table, column: str):\n    value, set_value = ui.use_state(\"\")\n\n    # Return a column that has the text input, then the table below it\n    return ui.flex(\n        [\n            ui.text_input(\n                value=value,\n                on_change=lambda event: set_value(event[\"value\"]),\n                required=True,\n            ),\n            (\n                # Use Python ternary operator to only display the table if there has been a value entered\n                source.where(f\"{column}=`{value}`\")\n                if value\n                else ui.info(\"Please input a filter value\")\n            ),\n        ]\n    )\n```\n\n----------------------------------------\n\nTITLE: Creating a Grouped Area Plot in Python with Deephaven\nDESCRIPTION: Demonstrates how to create an area plot grouped by country, showing the cumulative population trends for the United States, India, and China. This example uses the 'by' parameter to separate the data by country while showing each group's contribution to the whole.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/plotly-express/docs/area.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.plot.express as dx\ngapminder = dx.data.gapminder()\n\n# subset to get several countries to compare\nlarge_countries_population = gapminder.where(\"Country in `United States`, `India`, `China`\")\n\n# cumulative trend showing contribution from each group\narea_plot_group = dx.area(large_countries_population, x=\"Year\", y=\"Pop\", by=\"Country\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Controlled and Uncontrolled Number Fields in Python\nDESCRIPTION: This example shows how to create both controlled and uncontrolled number fields using Deephaven's UI library, demonstrating the use of state management.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/number_field.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef ui_number_field_value_examples():\n    value, set_value = ui.use_state(5)\n    return [\n        ui.number_field(label=\"Hours (Uncontrolled)\", default_value=5),\n        ui.number_field(\n            label=\"Favorite animal (controlled)\", value=value, on_change=set_value\n        ),\n    ]\n\n\nmy_number_field_value_examples = ui_number_field_value_examples()\n```\n\n----------------------------------------\n\nTITLE: Importing UI Component in Deephaven Core (Python)\nDESCRIPTION: Shows how to import a previously defined UI component in Deephaven Core. It includes setting up the Python interpreter to locate the data directory and using the imported component to create a new component.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/describing/importing_and_exporting_components.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# file2.py\n# Tell the Python interpreter where the data directory is located\nimport sys\n\nsys.path.append(\"/data/storage/notebooks\")\n\nfrom deephaven import ui\n\n# Import component from file1\nfrom file1 import table_of_contents\n\n\n@ui.component\ndef multiple_contents():\n    return ui.flex(\n        table_of_contents(),\n        table_of_contents(),\n        table_of_contents(),\n    )\n\n\nmy_multiple_contents = multiple_contents()\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Accordion with Disclosures in Deephaven UI (Python)\nDESCRIPTION: This snippet demonstrates how to create a basic accordion with two disclosure elements using Deephaven UI. It uses the ui.accordion and ui.disclosure functions to structure the component.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/accordion.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\nmy_accordion_basic = ui.accordion(\n    ui.disclosure(title=\"FAQ #1\", panel=\"Answer\"),\n    ui.disclosure(title=\"FAQ #2\", panel=\"Answer\"),\n)\n```\n\n----------------------------------------\n\nTITLE: Creating an Indeterminate Progress Bar in Python\nDESCRIPTION: This snippet demonstrates how to create an indeterminate progress bar when the progress cannot be determined.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/progress_bar.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef indeterminate_variant():\n    return ui.progress_bar(is_indeterminate=True)\n\nprogress_bar_indeterminate_example = indeterminate_variant()\n```\n\n----------------------------------------\n\nTITLE: Basic Breadcrumbs Implementation in Python\nDESCRIPTION: Shows basic implementation of breadcrumbs navigation with three levels of hierarchy using Deephaven UI\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/breadcrumbs.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\nbreadcrumbs_example = ui.view(\n    ui.breadcrumbs(\n        ui.item(\"Deephaven\", key=\"deephaven\"),\n        ui.item(\"Products\", key=\"products\"),\n        ui.item(\"Community Core\", key=\"community_core\"),\n    ),\n    width=\"100%\",\n)\n```\n\n----------------------------------------\n\nTITLE: Date Field Value Range Constraints\nDESCRIPTION: Demonstrates how to set minimum and maximum value constraints on date fields.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/date_field.md#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\nmy_date_field_basic = ui.date_field(\n    label=\"Date field\",\n    min_value=\"2024-01-01\",\n    default_value=\"2022-02-03\",\n)\n```\n\n----------------------------------------\n\nTITLE: Handling Empty Tables with None Check\nDESCRIPTION: Shows how to handle empty tables by checking for None values returned by use_cell_data. Includes time table initialization with future start time.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/hooks/use_cell_data.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import time_table, ui\nimport datetime as dt\n\n@ui.component\ndef ui_table_first_cell(table):\n    cell_value = ui.use_cell_data(table)\n    if cell_value is None:\n        return ui.heading(\"No data yet.\")\n    return ui.heading(f\"The first cell value is {cell_value}\")\n\nstart_time = dt.datetime.now() + dt.timedelta(seconds=2)\ntable_first_cell = ui_table_first_cell(\n    time_table(\"PT1s\", start_time=start_time).tail(1)\n)\n```\n\n----------------------------------------\n\nTITLE: Date Field Validation Implementation\nDESCRIPTION: Shows how to implement validation behavior in date fields.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/date_field.md#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef date_field_validation_behaviour_example():\n    return ui.form(\n        ui.date_field(\n            validation_behavior=\"native\",\n            is_required=True,\n        )\n    )\n\nmy_date_field_validation_behaviour_example = date_field_validation_behaviour_example()\n```\n\n----------------------------------------\n\nTITLE: Working Component with State Variable\nDESCRIPTION: This example demonstrates a fully functional component using the use_state hook. Clicking the 'Next' button now properly updates the displayed word because state is maintained between renders and changes trigger re-rendering.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/add-interactivity/state-a-components-memory.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\nword_list = [\"apple\", \"banana\", \"cherry\", \"orange\", \"kiwi\", \"strawberry\"]\n\n\n@ui.component\ndef word_display():\n    index, set_index = ui.use_state(0)\n\n    def handle_press():\n        set_index(index + 1)\n\n    word = word_list[index]\n\n    return [\n        ui.button(\"Next\", on_press=handle_press),\n        ui.text(f\"({index+1} of {len(word_list)})\"),\n        ui.heading(word),\n    ]\n\n\nword_display_example = word_display()\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Stateful Dashboard in Python\nDESCRIPTION: Demonstrates how to create a simple stateful dashboard using the Deephaven UI library, with a text input field and display.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/dashboard.md#2025-04-17_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef layout():\n    message, set_message = ui.use_state(\"Hello world!\")\n\n    return ui.row(\n        ui.panel(ui.text_field(value=message, on_change=set_message, width=\"100%\")),\n        ui.panel(message),\n    )\n\n\ndash_simple_state = ui.dashboard(layout())\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Meter in Deephaven UI (Python)\nDESCRIPTION: Demonstrates how to create a basic meter component using Deephaven's UI library. The meter displays RAM usage with a value of 35%.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/meter.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef ui_meter():\n    return ui.meter(label=\"RAM Usage\", value=35)\n\nmy_meter = ui_meter()\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Custom Component with Deephaven UI\nDESCRIPTION: This snippet shows how to create a basic custom component using the ui.component decorator. It returns a simple 'Hello, World!' string which is rendered in the UI.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/tutorial.md#2025-04-17_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n@ui.component\ndef custom_component():\n  return \"Hello, World!\"\n\ncustom_panel = custom_component()\n```\n\n----------------------------------------\n\nTITLE: Customizing Meter Labels in Deephaven UI (Python)\nDESCRIPTION: Shows various ways to customize meter labels, including changing label position and hiding value labels. This example creates three meters with different label configurations.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/meter.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef ui_meter_label():\n    return [\n        ui.meter(\n            label=\"Label\",\n            value=50,\n        ),\n        ui.meter(\n            label=\"Label\",\n            value=50,\n            label_position=\"side\",\n        ),\n        ui.meter(label=\"Label\", value=50, show_value_label=False),\n    ]\n\nmy_meter_label = ui_meter_label()\n```\n\n----------------------------------------\n\nTITLE: Repositioning Legend Location using unsafe_update_figure in Python\nDESCRIPTION: Shows how to move the legend to the bottom of the plot by updating the layout configuration. The legend is positioned horizontally outside the plot area using specific anchor points and coordinates.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/plotly-express/docs/unsafe-update-figure.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.plot.express as dx\n\ntips = dx.data.tips()\n\n\ndef update(figure):\n    # Update the layout to move the legend to the bottom\n    # y is negative to move the legend outside the plot area\n    figure.update_layout(\n        legend=dict(orientation=\"h\", yanchor=\"bottom\", y=-0.3, xanchor=\"left\", x=0.3)\n    )\n\n\nlegend_bottom_plot = dx.scatter(\n    tips, x=\"TotalBill\", y=\"Tip\", color=\"Day\", unsafe_update_figure=update\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Radio Group in Python\nDESCRIPTION: Demonstrates how to create a simple radio group with multiple options using Deephaven's UI framework.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/radio_group.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\nmy_radio_group_basic = ui.radio_group(\n    ui.radio(\"Dogs\", value=\"dogs\"),\n    ui.radio(\"Cats\", value=\"cats\"),\n    ui.radio(\"Lizard\", value=\"lizard\"),\n    ui.radio(\"Fish\", value=\"fish\"),\n    label=\"What is the best type of pet\",\n)\n```\n\n----------------------------------------\n\nTITLE: Refactored Table State Management Using use_memo\nDESCRIPTION: Demonstrates how to refactor the code to avoid liveness scope by using use_memo hook and iteration counter.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/add-interactivity/update-tables-in-state.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui, time_table\n\n@ui.component\ndef ui_resetable_table():\n    iteration, set_iteration = ui.use_state(0)\n    table = ui.use_memo(lambda: time_table(\"PT1s\"), [iteration])\n    return [\n        ui.action_button(\n            \"Reset\",\n            on_press=lambda: set_iteration(iteration + 1),\n        ),\n        table,\n    ]\n\nresetable_table = ui_resetable_table()\n```\n\n----------------------------------------\n\nTITLE: Managing Live Table Objects with use_liveness_scope in Python\nDESCRIPTION: Example demonstrating how to use use_liveness_scope to manage a live table object in a UI component. The component creates a resetable time table with a button to refresh the data.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/hooks/use_liveness_scope.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui, time_table\n\n\n@ui.component\ndef ui_resetable_table():\n    table, set_table = ui.use_state(lambda: time_table(\"PT1s\"))\n    handle_press = ui.use_liveness_scope(lambda _: set_table(time_table(\"PT1s\")), [])\n    return [\n        ui.action_button(\n            \"Reset\",\n            on_press=handle_press,\n        ),\n        table,\n    ]\n\n\nresetable_table = ui_resetable_table()\n```\n\n----------------------------------------\n\nTITLE: Nesting Components in a Flex Container with deephaven.ui\nDESCRIPTION: Shows how to create a more complex component by nesting a custom button component within a flex container.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/architecture.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@ui.component\ndef my_app():\n    return ui.flex(ui.text(\"Hello, world!\"), my_button(), direction=\"column\")\n\napp = my_app()\n```\n\n----------------------------------------\n\nTITLE: Creating an Expanded Disclosure Component in Python\nDESCRIPTION: This snippet shows how to create a Disclosure component that is expanded by default when rendered.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/disclosure.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\nmy_disclosure_expanded = ui.disclosure(\n    title=\"Heading\", panel=\"Content\", default_expanded=True\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring List View Selection Mode in Python with Deephaven UI\nDESCRIPTION: This snippet shows how to configure the selection mode of a List View. It demonstrates setting the selection mode to 'SINGLE' to constrain selection to a single item.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/list_view.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef ui_list_view():\n    return ui.list_view(\n        ui.item(\"Option 1\"),\n        ui.item(\"Option 2\"),\n        ui.item(\"Option 3\"),\n        selection_mode=\"SINGLE\",\n    )\n\nmy_list_view = ui_list_view()\n```\n\n----------------------------------------\n\nTITLE: Event Handling in Checkbox Groups\nDESCRIPTION: Demonstrates event handling with checkbox groups using the on_change prop and state management.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/checkbox_group.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef ui_checkbox_group_event_example():\n    selected, set_selected = ui.use_state([\"Soccer\"])\n    return [\n        ui.checkbox_group(\n            \"Soccer\",\n            \"Basketball\",\n            \"Baseball\",\n            label=\"Favourite Sports (controlled)\",\n            value=selected,\n            on_change=set_selected,\n        ),\n        f\"You have selected: {selected}!\",\n    ]\n\nmy_checkbox_group_event_example = ui_checkbox_group_event_example()\n```\n\n----------------------------------------\n\nTITLE: Event Handling in Breadcrumbs\nDESCRIPTION: Demonstrates how to handle click events on breadcrumb items using the on_action callback\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/breadcrumbs.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef breadcrumbs_action_example():\n    selected, set_selected = ui.use_state(\"None\")\n\n    return (\n        ui.view(\n            ui.breadcrumbs(\n                ui.item(\"Deephaven\", key=\"deephaven\"),\n                ui.item(\"Products\", key=\"products\"),\n                ui.item(\"Community Core\", key=\"community_core\"),\n                on_action=set_selected,\n            ),\n            ui.text(f\"{selected} clicked\"),\n            width=\"100%\",\n        ),\n    )\n\nmy_breadcrumbs_action_example = breadcrumbs_action_example()\n```\n\n----------------------------------------\n\nTITLE: Implementing use_cell_data Hook in Python\nDESCRIPTION: The use_cell_data hook captures data in a specific cell of a table. It returns a sentinel value if the table is still loading. This hook is designed to work with tables that have been filtered to a single row and column.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/DESIGN.md#2025-04-17_snippet_79\n\nLANGUAGE: python\nCODE:\n```\nuse_cell_data(\n    table: Table,\n    sentinel: Sentinel = None\n) -> Any | Sentinel:\n```\n\n----------------------------------------\n\nTITLE: Implementing Art Bucket List with Deep Copy Solution\nDESCRIPTION: Corrected implementation using deep copy to properly isolate state between the two lists. Uses Python's copy.deepcopy to create independent copies of nested structures.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/add-interactivity/update-lists-in-state.md#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport copy\nfrom deephaven import ui\n\ninitial_art = [\n    {\"id\": 0, \"name\": \"Mona Lisa\", \"seen\": False},\n    {\"id\": 1, \"name\": \"The Starry Night\", \"seen\": False},\n    {\"id\": 2, \"name\": \"The Scream\", \"seen\": True},\n    {\"id\": 3, \"name\": \"The Persistence of Memory\", \"seen\": False},\n]\n\n\n@ui.component\ndef item_list(artworks, on_toggle):\n    return [\n        ui.checkbox(\n            artwork[\"name\"],\n            is_selected=artwork[\"seen\"],\n            on_change=lambda value, artwork=artwork: on_toggle(artwork[\"id\"], value),\n        )\n        for artwork in artworks\n    ]\n\n\n@ui.component\ndef bucket_list():\n    my_list, set_my_list = ui.use_state(initial_art)\n    your_list, set_your_list = ui.use_state(initial_art)\n\n    def handle_toggle_my_list(artworkId, next_seen):\n        my_list_copy = copy.deepcopy(my_list)\n        artwork = next((a for a in my_list_copy if a[\"id\"] == artworkId), None)\n        artwork[\"seen\"] = next_seen\n        set_my_list(my_list_copy)\n\n    def handle_toggle_your_list(artworkId, next_seen):\n        your_list_copy = copy.deepcopy(your_list)\n        artwork = next((a for a in your_list_copy if a[\"id\"] == artworkId), None)\n        artwork[\"seen\"] = next_seen\n        set_your_list(your_list_copy)\n\n    return [\n        ui.heading(\"Art Bucket List\"),\n        ui.heading(\"My list of art to see:\", level=4),\n        item_list(my_list, handle_toggle_my_list),\n        ui.heading(\"Your list of art to see:\", level=4),\n        item_list(your_list, handle_toggle_your_list),\n    ]\n\n\nbucket_list_example = bucket_list()\n```\n\n----------------------------------------\n\nTITLE: Creating a Stack Dashboard with Nested Tabs in Python\nDESCRIPTION: Demonstrates how to create a stack dashboard with nested tabs using the Deephaven UI library.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/dashboard.md#2025-04-17_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\ndash_stack = ui.dashboard(\n    ui.stack(\n        ui.panel(\n            ui.tabs(ui.tab(\"A1 content\", title=\"A1\"), ui.tab(\"A2 content\", title=\"A2\")),\n            title=\"A\",\n        ),\n        ui.panel(\n            ui.tabs(ui.tab(\"B1 content\", title=\"B1\"), ui.tab(\"B2 content\", title=\"B2\")),\n            title=\"B\",\n        ),\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Recursive UI Component for Hierarchical Display in Python\nDESCRIPTION: A recursive UI component that renders a place and all its children in a tree structure. Each place displays its title with indentation based on its depth and a Complete button to remove it from the parent's child list.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/managing-state/choose-the-state-structure.md#2025-04-17_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n@ui.component\ndef place_tree(my_id, parent_id, places_by_id, on_complete, n):\n    place = places_by_id[my_id]\n    child_ids = place[\"child_ids\"]\n\n    return [\n        ui.flex(\n            ui.text(\"-\" * n + place[\"title\"]),\n            ui.action_button(\n                \"Complete\", on_press=lambda: on_complete(parent_id, my_id)\n            ),\n        ),\n        [\n            place_tree(child_id, my_id, places_by_id, on_complete, n + 1)\n            for child_id in child_ids\n        ],\n    ]\n```\n\n----------------------------------------\n\nTITLE: List Transformation in DeepHaven UI\nDESCRIPTION: Shows how to transform list items using list comprehension to create a new list with modified values while preserving immutability.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/add-interactivity/update-lists-in-state.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\ninitial_values = [\n    {\"number\": 0, \"type\": \"mutable\"},\n    {\"number\": 10, \"type\": \"immutable\"},\n    {\"number\": 20, \"type\": \"mutable\"},\n]\n\n@ui.component\ndef transform():\n    values, set_values = ui.use_state(initial_values)\n\n    def handle_press(id):\n        set_values(\n            [\n                value\n                if value[\"type\"] == \"immutable\"\n                else {**value, \"number\": value[\"number\"] + 1}\n                for value in values\n            ]\n        )\n\n    return [\n        ui.heading(\"Values:\"),\n        ui.button(\"Increment mutable\", on_press=handle_press),\n        [ui.text(value[\"number\"]) for value in values],\n    ]\n\ntransform_example = transform()\n```\n\n----------------------------------------\n\nTITLE: Integrating Range Slider with HTML Forms in Python\nDESCRIPTION: This example demonstrates how to integrate a range slider with HTML forms using the name prop for easy value identification on form submission.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/range_slider.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\nmy_range_slider_name_example = ui.form(\n    ui.range_slider(\n        label=\"Opacity\", default_value={\"start\": 50, \"end\": 100}, name=\"Opacity Range\"\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Dialog in Python with Deephaven UI\nDESCRIPTION: This snippet demonstrates how to create a basic dialog using Deephaven UI components. It includes a trigger button and a dialog with a heading, content, and action buttons.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/dialog.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef dialog_example():\n    is_open, set_open = ui.use_boolean()\n    return ui.dialog_trigger(\n        ui.action_button(\"Check connectivity\", on_press=set_open.on),\n        ui.dialog(\n            ui.heading(\"Internet Speed Test\"),\n            ui.content(\"Start speed test?\"),\n            ui.button_group(\n                ui.button(\"Cancel\", variant=\"secondary\", on_press=set_open.off),\n                ui.button(\"Confirm\", variant=\"accent\", on_press=set_open.off),\n            ),\n        ),\n        is_open=is_open,\n    )\n\nmy_dialog_example = dialog_example()\n```\n\n----------------------------------------\n\nTITLE: Handling Null Values with Pandas\nDESCRIPTION: Shows how to handle null values in table cells using pandas.isna() function, with custom messages for different states.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/hooks/use_cell_data.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import time_table, ui\nimport datetime as dt\nimport pandas as pd\n\n@ui.component\ndef ui_table_first_cell(table):\n    cell_value = ui.use_cell_data(table)\n    if cell_value is None:\n        return ui.heading(\"No data yet.\")\n    if pd.isna(cell_value):\n        return ui.heading(\"Cell value is null.\")\n    return ui.heading(f\"Cell value: {cell_value}\")\n\nstart_time = dt.datetime.now() + dt.timedelta(seconds=2)\ntable_first_cell = ui_table_first_cell(\n    time_table(\"PT1s\", start_time=start_time)\n    .update(\"x=i%2==0?null:i\")\n    .select(\"x\")\n    .tail(1)\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Row-based Dashboard Layout\nDESCRIPTION: Arranges the about panel and sepal panel side by side in a horizontal layout using ui.row within the dashboard.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/tutorial.md#2025-04-17_snippet_10\n\nLANGUAGE: python\nCODE:\n```\niris_dashboard_row = ui.dashboard(ui.row(about_panel, sepal_panel))\n```\n\n----------------------------------------\n\nTITLE: Customizing Range Slider Scale and Step in Python\nDESCRIPTION: This snippet illustrates how to customize the scale and step of range sliders using min_value, max_value, and step props.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/range_slider.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef range_slider_range_step_examples():\n    return [\n        ui.range_slider(\n            default_value={\"start\": 75, \"end\": 100},\n            min_value=50,\n            max_value=150,\n            label=\"Range\",\n        ),\n        ui.range_slider(\n            default_value={\"start\": 10, \"end\": 100},\n            min_value=0,\n            max_value=500,\n            step=10,\n            label=\"Range\",\n        ),\n    ]\n\n\nmy_range_slider_range_step_examples = range_slider_range_step_examples()\n```\n\n----------------------------------------\n\nTITLE: Customizing Number Field Width in Python with Deephaven UI\nDESCRIPTION: This example shows how to customize the width of number fields, demonstrating both fixed and responsive widths using Deephaven's UI library.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/number_field.md#2025-04-17_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef ui_number_field_width_examples():\n    return [\n        ui.number_field(label=\"Birth year\", width=\"size-3600\"),\n        ui.number_field(label=\"Birth year\", width=\"size-3600\", max_width=\"100%\"),\n    ]\n\n\nmy_number_field_width_examples = ui_number_field_width_examples()\n```\n\n----------------------------------------\n\nTITLE: Creating Tabs with Simple Content in Python\nDESCRIPTION: Shows how to create tabs with simple text content using ui.tabs and ui.tab components.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/tabs.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\nmy_tabs_tab_content_example = ui.tabs(\n    ui.tab(\"Arma virumque cano, Troiae qui primus ab oris.\", title=\"Founding of Rome\"),\n    ui.tab(\"Senatus Populusque Romanus.\", title=\"Monarchy and Republic\"),\n    ui.tab(\"Alea jacta est.\", title=\"Empire\"),\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Radio Group Orientation in Python\nDESCRIPTION: Demonstrates how to change the orientation of radio buttons within a radio group.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/radio_group.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\nmy_radio_group_orientation_example = ui.radio_group(\n    ui.radio(\"Wizard\", value=\"wizard\"),\n    ui.radio(\"Dragon\", value=\"dragon\"),\n    label=\"Favorite avatar\",\n    orientation=\"horizontal\",\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Area Plot with Deephaven in Python\nDESCRIPTION: Creates a basic area plot visualizing population data for the United States over time using Deephaven's plot express library. This example demonstrates how to filter data for a specific country and plot the relationship between Year and Population.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/plotly-express/docs/area.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.plot.express as dx\ngapminder = dx.data.gapminder()\n\n# subset to get a specific group\nusa_population = gapminder.where(\"Country == `United States`\")\n\narea_plot = dx.area(usa_population, x=\"Year\", y=\"Pop\")\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Box Plots with Deephaven Plot Express\nDESCRIPTION: Demonstrates how to create basic box plots using Deephaven's plot express library. It shows two orientations of box plots for the 'TotalBill' column from a tips dataset.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/plotly-express/docs/box.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.plot.express as dx\ntips = dx.data.tips()\n\n# control the plot orientation using `x` or `y`\nbox_plot_x = dx.box(tips, x=\"TotalBill\")\nbox_plot_y = dx.box(tips, y=\"TotalBill\")\n```\n\n----------------------------------------\n\nTITLE: Customizing Progress Bar Value and Range in Python\nDESCRIPTION: This example shows how to create progress bars with custom values and ranges using the Deephaven UI component system.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/progress_bar.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef value_variants():\n    return [\n        ui.progress_bar(value=50),\n        ui.progress_bar(value=50, min_value=25, max_value=125),\n    ]\n\nprogress_bar_value_examples = value_variants()\n```\n\n----------------------------------------\n\nTITLE: Controlling Action Menu Flip Behavior\nDESCRIPTION: Shows how to control whether an action menu automatically flips direction when space is limited. The example compares menus with flipping enabled and disabled.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/action_menu.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef ui_action_menu_flip_examples():\n    return [\n        ui.action_menu(\n            \"Cut\", \"Copy\", \"Paste\", align=\"start\", direction=\"top\", should_flip=True\n        ),\n        ui.action_menu(\n            \"Cut\", \"Copy\", \"Paste\", align=\"start\", direction=\"top\", should_flip=False\n        ),\n    ]\n\n\nmy_action_menu_flip_examples = ui_action_menu_flip_examples()\n```\n\n----------------------------------------\n\nTITLE: Adding Help Text and Error Messages to Search Fields\nDESCRIPTION: Shows how to add descriptions and error messages to search fields, and how to set validation states.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/search_field.md#2025-04-17_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef ui_search_field_help_text_examples():\n    return [\n        ui.search_field(\n            label=\"Search\",\n            default_value=\"Sushi\",\n            validation_state=\"valid\",\n            description=\"Enter a query\",\n        ),\n        ui.search_field(\n            label=\"Search\",\n            validation_state=\"invalid\",\n            error_message=\"Empty input is not allowed.\",\n        ),\n    ]\n\n\nmy_search_field_help_text_examples = ui_search_field_help_text_examples()\n```\n\n----------------------------------------\n\nTITLE: Creating a Vertical Button Group in Python with Deephaven UI\nDESCRIPTION: This snippet demonstrates how to create a vertical button group by setting the orientation prop to 'vertical'. This prevents any spacing-related dynamic orientation changes.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/button_group.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\nmy_button_group_orientation_example = ui.button_group(\n    ui.button(\"No, thanks\", variant=\"primary\", style=\"outline\"),\n    ui.button(\"Remind me later\", variant=\"primary\", style=\"outline\"),\n    ui.button(\"Rate Now\", variant=\"accent\"),\n    orientation=\"vertical\",\n)\n```\n\n----------------------------------------\n\nTITLE: Basic Tag Group Implementation in Python\nDESCRIPTION: Shows basic usage of the tag_group component with multiple items, each having a key property.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/tag_group.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\ntag_group_example = ui.tag_group(\n    ui.item(\"News\", key=\"news\"),\n    ui.item(\"Travel\", key=\"travel\"),\n    ui.item(\"Gaming\", key=\"gaming\"),\n    ui.item(\"Shopping\", key=\"shopping\"),\n)\n```\n\n----------------------------------------\n\nTITLE: Importing UI Component in Deephaven Enterprise (Python)\nDESCRIPTION: Demonstrates how to import a UI component in Deephaven Enterprise using the meta_import function from the deephaven_enterprise.notebook module. It then uses the imported component to create a new component with multiple instances.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/describing/importing_and_exporting_components.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# file2.py\n# Use the notebook module to meta_import file1.py\nfrom deephaven_enterprise.notebook import meta_import\n\nmeta_import(db, \"nb\")\n\n# Import component from file1\nfrom nb.file1 import table_of_contents\n\nfrom deephaven import ui\n\n\n@ui.component\ndef multiple_contents():\n    return ui.flex(\n        table_of_contents(),\n        table_of_contents(),\n        table_of_contents(),\n    )\n\n\nmy_multiple_contents = multiple_contents()\n```\n\n----------------------------------------\n\nTITLE: Implementing Unavailable Menu Items with Contextual Help in Python using Deephaven UI\nDESCRIPTION: This snippet demonstrates how to implement unavailable menu items with contextual help using Deephaven's UI library. It shows the use of contextual_help_trigger to provide information for disabled items.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/menu.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\nmy_menu_example = ui.menu_trigger(\n    ui.action_button(\"Edit\"),\n    ui.menu(\n        ui.item(\"Undo\", key=\"undo\"),\n        ui.item(\"Redo\", key=\"redo\"),\n        ui.contextual_help_trigger(\n            ui.item(\"Cut\", key=\"cut\"),\n            ui.dialog(\n                ui.heading(\"Cut\"),\n                ui.content(\"Please select text for 'Cut' to be enabled.\"),\n            ),\n            is_unavailable=True,\n        ),\n        ui.contextual_help_trigger(\n            ui.item(\"Copy\", key=\"copy\"),\n            ui.dialog(\n                ui.heading(\"Copy\"),\n                ui.content(\"Please select text for 'Copy' to be enabled.\"),\n            ),\n            is_unavailable=True,\n        ),\n        ui.contextual_help_trigger(\n            ui.item(\"Paste\", key=\"paste\"),\n            ui.dialog(ui.heading(\"Paste\"), ui.content(\"You have nothing to 'Paste'.\")),\n        ),\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Complete Range Slider with Correct Updates\nDESCRIPTION: Full component implementation showing proper dictionary state management.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/add-interactivity/update-dictionaries-in-state.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef range_example():\n    value, set_value = ui.use_state({\"start\": 0, \"end\": 50})\n\n    def handle_press():\n        set_value({\"start\": 0, \"end\": value[\"end\"] + 1})\n\n    return [\n        ui.range_slider(value=value, label=\"Range\"),\n        ui.button(\"Update\", on_press=handle_press),\n    ]\n\nmy_range_example = range_example()\n```\n\n----------------------------------------\n\nTITLE: Creating Button Variants with Semantic Colors\nDESCRIPTION: Demonstrates the implementation of buttons with different semantic color variants including accent, primary, secondary, and negative styles.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/creating-layouts/size-and-theme.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef button_variants():\n    return [\n        ui.button(\n            \"Accent\",\n            variant=\"accent\",\n        ),\n        ui.button(\"Primary\", variant=\"primary\"),\n        ui.button(\"Secondary\", variant=\"secondary\"),\n        ui.button(\"Negative\", variant=\"negative\"),\n    ]\n\nbutton_variants_example = button_variants()\n```\n\n----------------------------------------\n\nTITLE: Creating Interactive UI with Streamlit in Python\nDESCRIPTION: Demonstrates Streamlit's approach where the entire script reruns on any change. Includes a slider that shows its squared value and a cached expensive computation example.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/DESIGN.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\n\nx = st.slider(\"x\")\nst.write(x, \"squared is\", x * x)\n\n\n@st.cache  # tells streamlit to memoize this function though\ndef expensive_computation(a, b):\n    time.sleep(2)  # This makes the function take 2s to run\n    return a * b\n\n\na = 2\nb = 21\nres = expensive_computation(a, b)\nst.write(\"Result:\", res)\n```\n\n----------------------------------------\n\nTITLE: Controlled and Uncontrolled Checkbox States\nDESCRIPTION: Example showing both controlled and uncontrolled checkbox implementations using state management.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/checkbox.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef ui_checkbox_content_examples():\n    selected, set_selected = ui.use_state(False)\n    return ui.flex(\n        ui.checkbox(\"Subscribe (uncontrolled)\", default_selected=True),\n        ui.checkbox(\n            \"Subscribe (uncontrolled)\", is_selected=selected, on_change=set_selected\n        ),\n        direction=\"column\",\n    )\n\n\nmy_checkbox_content_examples = ui_checkbox_content_examples()\n```\n\n----------------------------------------\n\nTITLE: Exporting UI Component in Deephaven Enterprise (Python)\nDESCRIPTION: Illustrates the creation and export of a reusable UI component in Deephaven Enterprise. The component structure is identical to the Core version, creating a table of contents.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/describing/importing_and_exporting_components.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# file1.py\nfrom deephaven import ui\n\n\n@ui.component\ndef table_of_contents():\n    return ui.flex(\n        ui.heading(\"My First Component\"),\n        ui.text(\"- Components: UI Building Blocks\"),\n        ui.text(\"- Defining a Component\"),\n        ui.text(\"- Using a Component\"),\n        direction=\"column\",\n    )\n```\n\n----------------------------------------\n\nTITLE: Customizing Heading Colors in Deephaven UI (Python)\nDESCRIPTION: This snippet illustrates how to customize the color of headings using the Deephaven UI library. It demonstrates various color options including named colors, hex values, and nested color applications.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/heading.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\nmy_heading_color_example = ui.flex(\n    ui.heading(\"Faded heading\", color=\"gray-500\"),\n    ui.heading(\"Negative heading\", color=\"negative\"),\n    ui.heading(\"Positive heading\", color=\"positive\"),\n    ui.heading(\"Hex color\", color=\"#FA8072\"),\n    ui.heading(\"Nested \", ui.text(\"example\", color=\"green\"), \"!\"),\n    direction=\"column\",\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Help Text to Number Fields in Python with Deephaven UI\nDESCRIPTION: This example demonstrates how to add description and error messages to number fields, showing both valid and invalid states using Deephaven's UI library.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/number_field.md#2025-04-17_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef ui_number_field_help_number_examples():\n    return [\n        ui.number_field(\n            label=\"Comment\",\n            default_value=\"Awesome!\",\n            validation_state=\"valid\",\n            description=\"Enter a comment.\",\n        ),\n        ui.number_field(\n            label=\"Comment\",\n            validation_state=\"invalid\",\n            error_message=\"Empty input is not allowed.\",\n        ),\n    ]\n\n\nmy_number_field_help_number_examples = ui_number_field_help_number_examples()\n```\n\n----------------------------------------\n\nTITLE: Basic Text Area Implementation in Python\nDESCRIPTION: Creates a basic text area with a label and change event handler that prints the updated value.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/text_area.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\nta = ui.text_area(\n    label=\"Description\", on_change=lambda value: print(f\"Text changed to {value}\")\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Strip Plot with Deephaven\nDESCRIPTION: This example demonstrates how to create a basic strip plot for a single group (Thursday tips) using Deephaven's plot express library. It visualizes the distribution of total bill amounts using a light green color scheme.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/plotly-express/docs/strip.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.plot.express as dx\ntips = dx.data.tips()\n\n# subset to get a single group\nthursday_tips = tips.where(\"Day == `Thur`\")\n\nstrip_plot = dx.strip(thursday_tips, x=\"TotalBill\", color_discrete_sequence=[\"lightgreen\"])\n```\n\n----------------------------------------\n\nTITLE: Implementing Table List Rendering with Keys\nDESCRIPTION: Shows how to render lists of data from tables using snapshots and unique keys for optimal rendering performance.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/DESIGN.md#2025-04-17_snippet_83\n\nLANGUAGE: python\nCODE:\n```\n@ui.component\ndef user_list():\n    user_table = use_table(\"Company\", \"Users\")\n    users = use_snapshot(user_table, [\"Name\", \"Email\", \"ID\"])\n    return ui.flex([\n        map(\n            lambda user: ui.text(\n                f\"{user['Name']}: {user['Email']}\", _key=user[\"ID\"]\n            ),\n            users,\n        )\n    ])\n\nul = user_list()\n```\n\n----------------------------------------\n\nTITLE: Customizing Meter Value Label in Deephaven UI (Python)\nDESCRIPTION: Demonstrates how to use the value_label prop to display a custom value label. This example shows progress as '1 of 5' instead of a percentage.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/meter.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef ui_meter_value_label():\n    return ui.meter(label=\"Currency\", value=20, value_label=\"1 of 5\")\n\nmy_meter_value_label = ui_meter_value_label()\n```\n\n----------------------------------------\n\nTITLE: Initializing Boolean State with True Value in Python\nDESCRIPTION: Shows how to initialize the boolean state with a specific value using use_boolean hook.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/hooks/use_boolean.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nvalue, set_value = ui.use_boolean(True)\n```\n\n----------------------------------------\n\nTITLE: Implementing Single Selection in Menu with Python and Deephaven UI\nDESCRIPTION: This snippet demonstrates how to implement single selection mode in a menu using Deephaven's UI library. It uses controlled state to manage the selected item.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/menu.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef single_selection_example():\n    selected, set_selected = ui.use_state([\"middle\"])\n    return ui.flex(\n        ui.menu_trigger(\n            ui.action_button(\"Align\"),\n            ui.menu(\n                ui.item(\"Left\", key=\"left\"),\n                ui.item(\"Middle\", key=\"middle\"),\n                ui.item(\"Right\", key=\"right\"),\n                selection_mode=\"single\",\n                selected_keys=selected,\n                on_change=set_selected,\n            ),\n        ),\n        ui.text(f\"Current selection (controlled) {selected}\"),\n        gap=\"size-100\",\n        align_items=\"center\",\n    )\n\n\nmy_single_selection_example = single_selection_example()\n```\n\n----------------------------------------\n\nTITLE: Initializing Date Field Component in Deephaven UI (Python)\nDESCRIPTION: Function signature for creating a date field component in Deephaven UI. It accepts various parameters to customize the date field's behavior and appearance.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/DESIGN.md#2025-04-17_snippet_41\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.ui as ui\nui.date_field(\n    placeholder_value: Date | None = None,\n    value: Date | None = None,\n    default_value: Date | None = None,\n    min_value: Date | None = None,\n    max_value: Date | None = None,\n    granularity: Granularity | None = None,\n    on_change: Callable[[Date], None] | None = None,\n    **props: Any\n) -> DateFieldElement\n```\n\n----------------------------------------\n\nTITLE: Adding Contextual Help to Number Fields in Python with Deephaven UI\nDESCRIPTION: This snippet illustrates how to add contextual help to a number field using Deephaven's UI library, providing additional information about the field's purpose.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/number_field.md#2025-04-17_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\nmy_number_field_contextual_help_example = ui.number_field(\n    label=\"FPS\",\n    contextual_help=ui.contextual_help(\n        ui.heading(\"What is FPS\"),\n        ui.content(\n            \"Frames Per Second (FPS) is a measure of how many individual frames (images) are displayed in one second of video or animation\"\n        ),\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Multiple Value Types Example in Labeled Value\nDESCRIPTION: Demonstrates using labeled value with different data types including strings, numbers, lists, and dates.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/labeled_value.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\nimport datetime\n\n@ui.component\ndef ui_labeled_value_examples():\n    return [\n        ui.labeled_value(label=\"File name\", value=\"Budget.xls\"),\n        ui.labeled_value(label=\"Number of expenses in Budget file\", value=123),\n        ui.labeled_value(\n            label=\"Pizza toppings\", value=[\"Pizza\", \"Pineapple\", \"Mushroom\", \"Garlic\"]\n        ),\n        ui.labeled_value(label=\"Today's date\", value=datetime.datetime.today().date()),\n    ]\n\nmy_labeled_value_values_examples = ui_labeled_value_examples()\n```\n\n----------------------------------------\n\nTITLE: Managing Component Lifecycle with use_effect Hook in Python\nDESCRIPTION: Illustrates the use of the use_effect hook to handle component mounting and unmounting. The effect prints messages when the component is mounted and unmounted.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/describing/use_hooks.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef ui_effect_example():\n    def handle_mount():\n        # effect prints \"Mounted\" once when component is first rendered\n        print(\"Mounted\")\n        # cleanup function prints \"Unmounted\" when component is closed\n        return lambda: print(\"Unmounted\")\n\n    # Passing in an empty list for dependencies will run the effect only once when the component is mounted, and cleanup when the component is unmounted\n    ui.use_effect(handle_mount, [])\n\n    return ui.text(\"Effect Example\")\n\neffect_example = ui_effect_example()\n```\n\n----------------------------------------\n\nTITLE: Retrieving Column Data with use_column_data in Python\nDESCRIPTION: Hook function for capturing data from a specific column in a Deephaven table, with an option to provide a sentinel value when the column is loading.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/DESIGN.md#2025-04-17_snippet_76\n\nLANGUAGE: python\nCODE:\n```\nuse_column_data(\n    table: Table,\n    sentinel: Sentinel = None\n) -> ColumnData | Sentinel:\n```\n\n----------------------------------------\n\nTITLE: Applying Row Color Formatting in Python\nDESCRIPTION: Method to apply conditional color formatting to table rows based on column values.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/DESIGN.md#2025-04-17_snippet_66\n\nLANGUAGE: python\nCODE:\n```\nui_table.color_row(\n    column: ColumnName,\n    where: QuickFilterExpression,\n    color: Color | None = None,\n    background_color: Color | None = None\n) -> UITable\n```\n\n----------------------------------------\n\nTITLE: Date Field Types and Conversion Example\nDESCRIPTION: Demonstrates different date type implementations including ZonedDateTime, Instant, and LocalDate with state management.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/date_field.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\nfrom deephaven.time import to_j_local_date, dh_today, to_j_instant, to_j_zdt\n\nzoned_date_time = to_j_zdt(\"1995-03-22T11:11:11.23142 America/New_York\")\ninstant = to_j_instant(\"2022-01-01T00:00:00 ET\")\nlocal_date = to_j_local_date(dh_today())\n\n@ui.component\ndef date_field_test(value):\n    date, set_date = ui.use_state(value)\n    return [ui.date_field(on_change=set_date, value=date), ui.text(str(date))]\n\nzoned_date_field = date_field_test(zoned_date_time)\ninstant_date_field = date_field_test(instant)\nlocal_date_field = date_field_test(local_date)\n```\n\n----------------------------------------\n\nTITLE: Controlled and Uncontrolled Date Field Values\nDESCRIPTION: Shows how to implement controlled and uncontrolled date field components using state management.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/date_field.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef example():\n    value, set_value = ui.use_state(\"2020-02-03\")\n    return ui.flex(\n        ui.date_field(\n            label=\"Date field (uncontrolled)\",\n            default_value=\"2020-02-03\",\n        ),\n        ui.date_field(\n            label=\"Date field (controlled)\", value=value, on_change=set_value\n        ),\n        gap=\"size-150\",\n        wrap=True,\n    )\n\nmy_example = example()\n```\n\n----------------------------------------\n\nTITLE: Building a Callback-based UI with Dash in Python\nDESCRIPTION: Implements a UI with a range slider using Dash framework. Uses decorators to define callbacks that update the UI when the slider value changes.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/DESIGN.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom dash import Dash, html, dcc, Input, Output\n\napp = Dash(__name__, external_stylesheets=external_stylesheets)\napp.layout = html.Div(\n    [\n        dcc.RangeSlider(0, 20, 1, value=[5, 15], id=\"my-range-slider\"),\n        html.Div(id=\"output-container-range-slider\"),\n    ]\n)\n\n\n@app.callback(\n    Output(\"output-container-range-slider\", \"children\"),\n    [Input(\"my-range-slider\", \"value\")],\n)\ndef update_output(value):\n    return 'You have selected \"{}\"'.format(value)\n\n\nif __name__ == \"__main__\":\n    app.run_server()\n```\n\n----------------------------------------\n\nTITLE: Handling Color Picker Events in Python\nDESCRIPTION: Demonstrates how to handle color change events using the on_change prop. The example prints the selected color to the console when changed.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/color_picker.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef ui_color_picker_event():\n    return [\n        ui.color_picker(\n            label=\"Label\",\n            default_value=\"#65C4D7\",\n            on_change=lambda x: print(\"Color: \", x),\n        )\n    ]\n\n\nmy_color_picker_event = ui_color_picker_event()\n```\n\n----------------------------------------\n\nTITLE: Basic Component Rendering in Deephaven UI\nDESCRIPTION: Demonstrates basic component structure with a packing list implementation showing items with packed status.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/describing/conditional_rendering.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef item(name, is_packed):\n    return ui.text(\"- \", name)\n\n@ui.component\ndef packing_list():\n    return ui.flex(\n        ui.heading(\"Packing list\"),\n        item(\"Clothes\", is_packed=True),\n        item(\"Shoes\", is_packed=True),\n        item(\"Wallet\", is_packed=False),\n        direction=\"column\",\n    )\n\nmy_packing_list = packing_list()\n```\n\n----------------------------------------\n\nTITLE: Content Example for Illustrated Message in Python\nDESCRIPTION: Demonstrates creating an illustrated message with warning icon and invalid input notification using Deephaven UI components.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/illustrated_message.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\nmy_illustrated_message_content_example = ui.illustrated_message(\n    ui.icon(\"vsWarning\"),\n    ui.heading(\"Invalid input\"),\n    ui.content(\"No special characters allowed.\"),\n)\n```\n\n----------------------------------------\n\nTITLE: Min-Max Value Constraints in Date Range Picker\nDESCRIPTION: Shows how to set minimum and maximum value constraints.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/date_range_picker.md#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\nmy_date_range_picker_basic = ui.date_range_picker(\n    label=\"Date range\",\n    min_value=\"2024-01-01\",\n    default_value={\"start\": \"2022-02-03\", \"end\": \"2022-05-03\"},\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Color Picker in Python\nDESCRIPTION: Creates a basic color picker with a label and default value. The color picker is initialized using the ui.color_picker function from the deephaven.ui module.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/color_picker.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\nmy_color_picker = ui.color_picker(label=\"Background\", default_value=\"#65C4D7\")\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Semantic Badge Variants in Deephaven UI\nDESCRIPTION: Creates a component that displays multiple badges with different semantic variants (positive, info, negative, neutral). Each variant is used to represent different statuses or states with appropriate color coding.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/badge.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef ui_badge_variant_examples():\n    return [\n        ui.badge(\n            \"Green: Approved, Complete, Success, New, Purchased, Licensed\",\n            variant=\"positive\",\n        ),\n        ui.badge(\"Blue: Active, In Use, Live, Published\", variant=\"info\"),\n        ui.badge(\"Red: Error, Alert, Rejected, Failed\", variant=\"negative\"),\n        ui.badge(\n            \"Gray: Archived, Deleted, Paused, Draft, Not Started, Ended\",\n            variant=\"neutral\",\n        ),\n    ]\n\n\nmy_badge_variant_examples = ui_badge_variant_examples()\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Bar Plot in Deephaven\nDESCRIPTION: Demonstrates how to create a simple bar plot that visualizes the relationship between a categorical variable (Day) and a continuous variable (TotalBill) using the Deephaven Plot Express library.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/plotly-express/docs/bar.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.plot.express as dx\ntips = dx.data.tips()\n\nbar_plot = dx.bar(tips, x=\"Day\", y=\"TotalBill\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Action Menu in Deephaven UI\nDESCRIPTION: Creates a simple action menu with three basic options: Cut, Copy, and Paste. This demonstrates the fundamental syntax for creating an action menu component.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/action_menu.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\nmy_action_menu_basic = ui.action_menu(\"Cut\", \"Copy\", \"Paste\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Grouped Line Plot in Python with Deephaven\nDESCRIPTION: This example shows how to create a line plot with multiple lines, each representing a different group (in this case, different stock symbols). Each group is assigned a unique color.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/plotly-express/docs/line.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.plot.express as dx\nmy_table = dx.data.stocks()\n\n# each line represents a group and has a unique color\nline_plot = dx.line(my_table, x=\"Timestamp\", y=\"Price\", by=\"Sym\")\n```\n\n----------------------------------------\n\nTITLE: Basic Toggle Button Implementation - Python\nDESCRIPTION: Creates a basic toggle button with a text label 'Pin'.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/toggle_button.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\nmy_toggle_button_basic = ui.toggle_button(\"Pin\")\n```\n\n----------------------------------------\n\nTITLE: Button Variants Demonstration\nDESCRIPTION: Demonstrates different button styles and variants including accent, primary, secondary, and negative in both fill and outline styles.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/button.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef button_variants():\n    return [\n        ui.button(\"Accent fill\", variant=\"accent\", style=\"fill\"),\n        ui.button(\"Accent outline\", variant=\"accent\", style=\"outline\"),\n        ui.button(\"Primary fill\", variant=\"primary\", style=\"fill\"),\n        ui.button(\"Primary outline\", variant=\"primary\", style=\"outline\"),\n        ui.button(\"Secondary fill\", variant=\"secondary\", style=\"fill\"),\n        ui.button(\"Secondary outline\", variant=\"secondary\", style=\"outline\"),\n        ui.button(\"Negative fill\", variant=\"negative\", style=\"fill\"),\n        ui.button(\"Negative outline\", variant=\"negative\", style=\"outline\"),\n    ]\n\n\nbutton_variants_example = button_variants()\n```\n\n----------------------------------------\n\nTITLE: Creating Group-Based Histogram Distributions\nDESCRIPTION: Shows how to create comparative histograms for different groups using stacked and overlay modes.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/plotly-express/docs/histogram.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.plot.express as dx\niris = dx.data.iris()\n\n# each bin may be stacked side-by-side for each group\nstacked_hist = dx.histogram(iris, x=\"SepalLength\", by=\"Species\")\n\n# or, each bin may be overlaid with the others\noverlay_hist = dx.histogram(iris, x=\"SepalLength\", by=\"Species\", barmode=\"overlay\")\n```\n\n----------------------------------------\n\nTITLE: Adding Contextual Help to LabeledValue\nDESCRIPTION: Shows how to add contextual help information to a labeled value component using the contextual_help prop.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/labeled_value.md#2025-04-17_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\nmy_labeled_value_contextual_help_example = ui.labeled_value(\n    label=\"File name\",\n    value=\"Onboarding.pdf\",\n    contextual_help=ui.contextual_help(\n        heading=\"Info about the onboarding document\", content=\"Sample content\"\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Numeric Range Formatting in Labeled Value\nDESCRIPTION: Example of formatting a numeric range with start and end values using currency formatting.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/labeled_value.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\nmy_number_range = ui.labeled_value(\n    label=\"Price range\",\n    value={\"start\": 150, \"end\": 400},\n    format_options={\"style\": \"currency\", \"currency\": \"USD\", \"minimumFractionDigits\": 0},\n)\n```\n\n----------------------------------------\n\nTITLE: Text Field Value Control Examples\nDESCRIPTION: Demonstrates controlled and uncontrolled text field implementations using state management.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/text_field.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef ui_text_field_value_examples():\n    value, set_value = ui.use_state(\"Aardvark\")\n    return [\n        ui.text_field(label=\"Favorite animal (Uncontrolled)\", default_value=\"Aardvark\"),\n        ui.text_field(\n            label=\"Favorite animal (controlled)\", value=value, on_change=set_value\n        ),\n    ]\n\nmy_text_field_value_examples = ui_text_field_value_examples()\n```\n\n----------------------------------------\n\nTITLE: Implementing Switch Value Examples in Deephaven UI\nDESCRIPTION: Shows how to create switches with uncontrolled and controlled states using default_selected and is_selected props.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/switch.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef ui_switch_value_examples():\n    selected, set_selected = ui.use_state(False)\n    return [\n        ui.switch(\"Low power mode (uncontrolled)\", default_selected=True),\n        ui.switch(\n            \"Low power mode (controlled)\", is_selected=selected, on_change=set_selected\n        ),\n    ]\n\n\nmy_switch_value_examples = ui_switch_value_examples()\n```\n\n----------------------------------------\n\nTITLE: Toggle Button Value Examples - Python\nDESCRIPTION: Demonstrates controlled and uncontrolled toggle button implementations with state management.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/toggle_button.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef ui_toggle_button_value_examples():\n    selected, set_selected = ui.use_state(False)\n    return [\n        ui.text(\"Toggle Button (uncontrolled)\"),\n        ui.toggle_button(\"Pin\", default_selected=True, width=\"90px\"),\n        ui.text(\"Toggle Button (controlled)\"),\n        ui.toggle_button(\n            \"Pin\", is_selected=selected, on_change=set_selected, width=\"90px\"\n        ),\n    ]\n\n\nmy_toggle_button_value_examples = ui_toggle_button_value_examples()\n```\n\n----------------------------------------\n\nTITLE: Implementing Toast Notifications with Variants\nDESCRIPTION: Creates a picker component that triggers toast notifications with different semantic variants including neutral, positive, negative, and info styles.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/creating-layouts/size-and-theme.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\nvariants = [\"neutral\", \"positive\", \"negative\", \"info\"]\n\nui_toast_variants_example = ui.picker(\n    [ui.item(option) for option in variants],\n    on_selection_change=lambda variant: ui.toast(variant, variant=variant),\n)\n```\n\n----------------------------------------\n\nTITLE: Correct Dictionary State Update\nDESCRIPTION: Shows the proper way to update dictionary state by creating a new dictionary.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/add-interactivity/update-dictionaries-in-state.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef handle_press():\n    set_value({\"start\": 0, \"end\": value[\"end\"] + 1})\n```\n\n----------------------------------------\n\nTITLE: Customizing Text Color in Deephaven UI (Python)\nDESCRIPTION: Illustrates how to set custom colors for text components using predefined color names, semantic color names, and hex color codes.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/text.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\nmy_text_color_example = ui.flex(\n    ui.text(\"Faded text\", color=\"gray-500\"),\n    ui.text(\"Negative text\", color=\"negative\"),\n    ui.text(\"Positive text\", color=\"positive\"),\n    ui.text(\"Hex color\", color=\"#FA8072\"),\n    ui.text(\"Nested \", ui.text(\"text\", color=\"green\"), \"!\"),\n    direction=\"column\",\n)\n```\n\n----------------------------------------\n\nTITLE: Static Color Buttons Implementation\nDESCRIPTION: Shows implementation of static-colored buttons in white and black, designed for use over fixed-color backgrounds.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/button.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef static_buttons():\n    return [\n        ui.view(\n            ui.button_group(\n                ui.button(\"White fill\", static_color=\"white\", style=\"fill\"),\n                ui.button(\n                    \"White outline\",\n                    static_color=\"white\",\n                    style=\"outline\",\n                ),\n            ),\n            background_color=\"#000066\",\n            padding=\"size-300\",\n        ),\n        ui.view(\n            ui.button_group(\n                ui.button(\"Black fill\", static_color=\"black\", style=\"fill\"),\n                ui.button(\n                    \"Black outline\",\n                    static_color=\"black\",\n                    style=\"outline\",\n                ),\n            ),\n            background_color=\"#FFFF00\",\n            padding=\"size-300\",\n        ),\n    ]\n\n\nstatic_buttons_example = static_buttons()\n```\n\n----------------------------------------\n\nTITLE: Implementing Visual Variants of Contextual Help in Deephaven UI (Python)\nDESCRIPTION: Demonstrates the use of different visual variants ('info' and 'help') for the contextual help component. Each variant is suitable for different types of information presentation.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/contextual_help.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef ui_contextual_help_variant_examples():\n    return [\n        ui.contextual_help(\n            heading=\"Permission required\",\n            content=\"Your admin must grant you permission before you can create a segment.\",\n            variant=\"info\",\n        ),\n        ui.contextual_help(\n            heading=\"What is a segment?\",\n            content=\"Segments identify who your visitors are, what devices and services they use, where they navigated from, and much more.\",\n            variant=\"help\",\n        ),\n    ]\n\n\nmy_contextual_help_variant_examples = ui_contextual_help_variant_examples()\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Violin Plots in Python using Deephaven Express\nDESCRIPTION: Demonstrates how to create basic violin plots using both x and y orientations. The example uses the iris dataset filtered to show only versicolor species data.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/plotly-express/docs/violin.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.plot.express as dx\niris = dx.data.iris()\n\n# subset to get a specific group\nversicolor = iris.where(\"Species == `versicolor`\")\n\n# control the plot orientation using `x` or `y`\nviolin_plot_x = dx.violin(versicolor, x=\"SepalLength\")\nviolin_plot_y = dx.violin(versicolor, y=\"SepalLength\")\n```\n\n----------------------------------------\n\nTITLE: Customizing Label Position for Number Fields in Python\nDESCRIPTION: This snippet shows how to customize the label position for number fields, demonstrating both top and side label placements using Deephaven's UI library.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/number_field.md#2025-04-17_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef ui_number_field_label_position_examples():\n    return [\n        ui.number_field(label=\"Sample Label\"),\n        ui.number_field(\n            label=\"Sample Label\", label_position=\"side\", label_align=\"start\"\n        ),\n    ]\n\n\nmy_number_field_label_position_examples = ui_number_field_label_position_examples()\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Indicators in Python\nDESCRIPTION: Demonstrates how to create multiple indicators by using a table with multiple rows and the by parameter. The example creates indicators for average prices by stock symbol.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/plotly-express/docs/indicator.md#2025-04-17_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.plot.express as dx\nfrom deephaven import agg as agg\n\nmy_table = dx.data.stocks()\n\n# aggregate for average prices by Sym\nsym_avg = my_table.agg_by([agg.avg(cols=\"Price\")], by=\"Sym\")\n\nindicator_plot = dx.indicator(sym_avg, value=\"Price\", by=\"Sym\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Variant Inline Alerts in Deephaven UI\nDESCRIPTION: Creates multiple inline alerts with different variants (info, positive, notice, negative) to demonstrate semantic messaging. This component function returns an array of inline alerts with different styling and purposes.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/inline_alert.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef ui_inline_alert_variant_examples():\n    return [\n        ui.inline_alert(\n            heading=\"Accepted Payment Methods\",\n            content=\"Only major credit cards are accepted for payment. Direct debit is currently unavailable.\",\n            variant=\"info\",\n        ),\n        ui.inline_alert(\n            heading=\"Purchase completed\",\n            content=\"You'll get a confirmation email with your order details shortly.\",\n            variant=\"positive\",\n        ),\n        ui.inline_alert(\n            heading=\"Payment Information\",\n            content=\"Enter your billing address, shipping address, and payment method to complete your purchase.\",\n            variant=\"notice\",\n        ),\n        ui.inline_alert(\n            heading=\"Payment Information\",\n            content=\"Enter your billing address, shipping address, and payment method to complete your purchase.\",\n            variant=\"negative\",\n        ),\n    ]\n\n\nmy_inline_alert_variant_examples = ui_inline_alert_variant_examples()\n```\n\n----------------------------------------\n\nTITLE: Granularity Control in Date Range Pickers\nDESCRIPTION: Shows how to control the granularity of date/time display in range pickers.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/date_range_picker.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef granularity_example():\n    value, set_value = ui.use_state(\n        {\"start\": \"2021-04-07T18:45:22 UTC\", \"end\": \"2021-04-08T20:00:00 UTC\"}\n    )\n    return ui.flex(\n        ui.date_range_picker(\n            label=\"Date range and time range\",\n            granularity=\"SECOND\",\n            value=value,\n            on_change=set_value,\n        ),\n        ui.date_range_picker(\n            label=\"Date range\", granularity=\"DAY\", value=value, on_change=set_value\n        ),\n        gap=\"size-150\",\n        wrap=True,\n    )\n\nmy_granularity_example = granularity_example()\n```\n\n----------------------------------------\n\nTITLE: Creating Menu Sections in Python with Deephaven UI\nDESCRIPTION: This example shows how to create menu sections using Deephaven's UI library. It demonstrates grouping menu items into distinct sections with titles.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/menu.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef sections_example():\n    selected, set_selected = ui.use_state([\"bold\", \"left\"])\n    return (\n        ui.menu_trigger(\n            ui.action_button(\"Show\"),\n            ui.menu(\n                ui.section(\n                    ui.item(\"Bold\", key=\"bold\"),\n                    ui.item(\"Underline\", key=\"underline\"),\n                    title=\"Styles\",\n                ),\n                ui.section(\n                    ui.item(\"Left\", key=\"left\"),\n                    ui.item(\"Middle\", key=\"middle\"),\n                    ui.item(\"Right\", key=\"right\"),\n                    title=\"Align\",\n                ),\n                selection_mode=\"multiple\",\n                selected_keys=selected,\n                on_change=set_selected,\n            ),\n            close_on_select=False,\n        ),\n    )\n\n\nmy_sections_example = sections_example()\n```\n\n----------------------------------------\n\nTITLE: Creating a 2x1 Dashboard Layout in Python\nDESCRIPTION: Shows how to create a simple 2x1 row split dashboard layout using the Deephaven UI library.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/dashboard.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\ndash_2x1 = ui.dashboard(ui.row(ui.panel(\"A\", title=\"A\"), ui.panel(\"B\", title=\"B\")))\n```\n\n----------------------------------------\n\nTITLE: Implementing Uncontrolled Date Picker with Placeholder Value in Python\nDESCRIPTION: Demonstrates creating uncontrolled date pickers with placeholder values. When opened, the date picker will suggest the date from the placeholder_value prop or default to the current date and time.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/date_picker.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\ndp1 = ui.date_picker(\n    label=\"Date Picker\",\n    placeholder_value=\"2022-10-01T08:30:00 ET\",\n    on_change=print,\n)\n\ndp2 = ui.date_picker(\n    label=\"Date Picker\",\n    on_change=print,\n)\n```\n\n----------------------------------------\n\nTITLE: Handling onSubmit Events in Search Fields\nDESCRIPTION: Demonstrates how to handle onSubmit events for search fields, printing the submitted value.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/search_field.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\nmy_search_field_on_submit = ui.search_field(\n    on_submit=lambda e: print(f\"Submitted value: {e}\")\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Form in Deephaven UI (Python)\nDESCRIPTION: Demonstrates how to create a simple form with a text field and submit button using Deephaven UI components.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/form.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef ui_form():\n    return ui.form(\n        ui.text_field(name=\"name\", label=\"Enter name\"),\n        ui.button(\"Submit\", type=\"submit\"),\n    )\n\nmy_form = ui_form()\n```\n\n----------------------------------------\n\nTITLE: Creating an Emphasized Form in Deephaven UI (Python)\nDESCRIPTION: Shows how to create a form with emphasized styling, including text field and radio group components.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/form.md#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef ui_form_emphasized():\n\n    return ui.form(\n        ui.text_field(name=\"name\", label=\"Enter name\"),\n        ui.radio_group(\n            ui.radio(\"Video games\", value=\"games\"),\n            ui.radio(\"Reading\", value=\"reading\"),\n            ui.radio(\"Sports\", value=\"sports\"),\n            label=\"Favorite hobby\",\n            default_value=\"games\",\n        ),\n        is_emphasized=True,\n    )\n\nmy_form = ui_form_emphasized()\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Categorical Badge Colors in Deephaven UI\nDESCRIPTION: Creates a component that displays badges with different categorical color variants (seafoam, indigo, purple, fuchsia, magenta, yellow). These color variants are ideal for color-coding categories when there are 8 or fewer categories.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/badge.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef ui_badge_variant_color_examples():\n    return [\n        ui.badge(\"Seafoam\", variant=\"seafoam\"),\n        ui.badge(\"Indigo\", variant=\"indigo\"),\n        ui.badge(\"Purple\", variant=\"purple\"),\n        ui.badge(\"Fuchsia\", variant=\"fuchsia\"),\n        ui.badge(\"Magenta\", variant=\"magenta\"),\n        ui.badge(\"Yellow\", variant=\"yellow\"),\n    ]\n\n\nmy_badge_variant_color_examples = ui_badge_variant_color_examples()\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Search Field in Deephaven UI\nDESCRIPTION: Demonstrates how to create a simple search field with a label and an onChange event handler.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/search_field.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\nmy_search_field_basic = ui.search_field(\n    label=\"Description\", on_change=lambda value: print(f\"Search changed to {value}\")\n)\n```\n\n----------------------------------------\n\nTITLE: Text Area with Necessity Indicators\nDESCRIPTION: Demonstrates different ways to indicate whether a text area is required or optional.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/text_area.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef text_area_necessity_indicator_prop():\n    return [\n        ui.text_area(label=\"Address\", is_required=True, necessity_indicator=\"label\"),\n        ui.text_area(label=\"Address\", necessity_indicator=\"label\"),\n    ]\n\ntext_area_necessity_indicator_example = text_area_necessity_indicator_prop()\n```\n\n----------------------------------------\n\nTITLE: Styling Markdown Container\nDESCRIPTION: Shows how to apply styling to the markdown container view using props like height, width, and background color.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/markdown.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef style_markdown():\n    return ui.markdown(\"Test\", height=\"150px\", width=\"300px\", background_color=\"red\")\n\nstyle_example = style_markdown()\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Component with Initial Render in Deephaven UI\nDESCRIPTION: Demonstrates how to create a simple Deephaven UI component that renders text on its initial mount. The component returns a text element with a static string.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/add-interactivity/render-cycle.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef example_renderer():\n    text = \"Initial Render\"\n    return ui.text(text)\n\n\nexample = example_renderer()\n```\n\n----------------------------------------\n\nTITLE: Calculating Derived Values During Rendering in Deephaven UI (Python)\nDESCRIPTION: Simple example showing how to calculate a value during component rendering instead of storing it in state. This approach ensures the derived value always stays in sync with its source state.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/managing-state/choose-the-state-structure.md#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfull_name = f\"{first_name} {last_name}\"\n```\n\n----------------------------------------\n\nTITLE: Icon Buttons Implementation\nDESCRIPTION: Demonstrates buttons with icons, including accessibility considerations using aria-label.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/button.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef icon_buttons():\n    return [\n        ui.button(ui.icon(\"squirrel\"), \"Squirrel\"),\n        ui.button(ui.icon(\"squirrel\"), aria_label=\"Squirrel\"),\n    ]\n\n\nicon_buttons_example = icon_buttons()\n```\n\n----------------------------------------\n\nTITLE: Creating Uncontrolled Date Picker with Default Value in Python\nDESCRIPTION: Shows how to create an uncontrolled date picker with a default value. The date picker will store its state internally and update automatically when a new date is selected.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/date_picker.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven.time import dh_now\nfrom deephaven import ui\n\ndp = ui.date_picker(\n    label=\"Date Picker\",\n    default_value=dh_now(),\n    on_change=print,\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Icons to Action Group Items in Python\nDESCRIPTION: Shows how to add icons to action group items by using ui.icon and ui.text components.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/action_group.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\nmy_action_group_icon_example = ui.action_group(\n    ui.item(ui.icon(\"edit\"), ui.text(\"Edit\")),\n    ui.item(ui.icon(\"copy\"), ui.text(\"Copy\")),\n    ui.item(ui.icon(\"trash\"), ui.text(\"Delete\")),\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Disabled Accordion in Deephaven UI (Python)\nDESCRIPTION: This example shows how to create a disabled accordion using the is_disabled prop. When set to True, all disclosure elements within the accordion become non-interactive.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/accordion.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\nmy_accordion_disabled = ui.accordion(\n    ui.disclosure(title=\"FAQ #1\", panel=\"Answer\"),\n    ui.disclosure(title=\"FAQ #2\", panel=\"Answer\"),\n    is_disabled=True,\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Sectioned Action Menus in Deephaven UI\nDESCRIPTION: Shows how to organize action menu items into logical sections with titles. This example creates two sections: 'Addition' with Write and Append options, and 'Deletion' with Erase and Remove options.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/action_menu.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\nmy_action_menu_section_example = ui.action_menu(\n    ui.section(ui.item(\"Write\"), ui.item(\"Append\"), title=\"Addition\"),\n    ui.section(ui.item(\"Erase\"), ui.item(\"Remove\"), title=\"Deletion\"),\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic List View in Python with Deephaven UI\nDESCRIPTION: This snippet demonstrates how to create a basic List View component using Deephaven UI. It includes multiple items and sets default selected keys.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/list_view.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef ui_list_view():\n    return ui.list_view(\n        ui.item(\"Option 1\"),\n        ui.item(\"Option 2\"),\n        ui.item(\"Option 3\"),\n        ui.item(\"Option 4\"),\n        default_selected_keys=[\"Option 2\", \"Option 3\"],\n    )\n\nmy_list_view = ui_list_view()\n```\n\n----------------------------------------\n\nTITLE: Handling onClear Events in Search Fields\nDESCRIPTION: Shows how to implement and handle onClear events for search fields, printing a message when the input is cleared.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/search_field.md#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\nmy_search_field_on_clear = ui.search_field(on_clear=lambda: print(\"Input cleared\"))\n```\n\n----------------------------------------\n\nTITLE: Creating a Quiet Search Field\nDESCRIPTION: Shows how to create a 'quiet' search field using the 'is_quiet' prop for less visual distraction.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/search_field.md#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\nmy_search_field_is_quiet_example = ui.search_field(label=\"Animal\", is_quiet=True)\n```\n\n----------------------------------------\n\nTITLE: Handling Tab Change Events in Python\nDESCRIPTION: Demonstrates how to handle tab change events using the on_change property and update the UI accordingly.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/tabs.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef ui_tabs_on_change_example():\n    selected_tab, set_selected_tab = ui.use_state(\"Tab 1\")\n\n    def get_background_color(tab):\n        if tab == \"Tab 1\":\n            return \"celery-500\"\n        elif tab == \"Tab 2\":\n            return \"fuchsia-500\"\n        elif tab == \"Tab 3\":\n            return \"blue-500\"\n        else:\n            return \"gray-200\"\n\n    return [\n        ui.view(\n            ui.tabs(\n                ui.tab(\n                    \"There is no prior chat history with John Doe.\",\n                    title=\"John Doe\",\n                    key=\"Tab 1\",\n                ),\n                ui.tab(\n                    \"There is no prior chat history with Jane Doe.\",\n                    title=\"Jane Doe\",\n                    key=\"Tab 2\",\n                ),\n                ui.tab(\n                    \"There is no prior chat history with Joe Bloggs.\",\n                    title=\"Joe Bloggs\",\n                    key=\"Tab 3\",\n                ),\n                selected_key=selected_tab,\n                on_selection_change=set_selected_tab,\n            ),\n            background_color=get_background_color(selected_tab),\n            flex=\"auto\",\n            width=\"100%\",\n        ),\n        ui.text(f\"You have selected: {selected_tab}\"),\n    ]\n\n\nmy_tabs_on_change_example = ui_tabs_on_change_example()\n```\n\n----------------------------------------\n\nTITLE: HTML Form Integration with Checkbox Group\nDESCRIPTION: Shows how to integrate a checkbox group with HTML forms using the name prop.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/checkbox_group.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\nmy_checkbox_name_example = ui.form(\n    ui.checkbox_group(ui.checkbox(\"Sample Label\"), name=\"Sample Name\")\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Read-Only Calendar in Python\nDESCRIPTION: Demonstrates how to create a read-only calendar using the 'is_read_only' prop, making the calendar's value immutable but still focusable.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/calendar.md#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\nmy_calendar_is_read_only_example = ui.calendar(\n    is_read_only=True,\n)\n```\n\n----------------------------------------\n\nTITLE: Handling onChange Events in Search Fields\nDESCRIPTION: Shows how to implement and handle onChange events for search fields, updating the UI based on user input.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/search_field.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef ui_search_field_on_change():\n    value, set_value = ui.use_state(\"\")\n    return [\n        ui.search_field(label=\"Your search\", value=value, on_change=set_value),\n        ui.text(f\"Search has been changed to: {value}\"),\n    ]\n\n\nmy_search_field_on_change = ui_search_field_on_change()\n```\n\n----------------------------------------\n\nTITLE: Implementing Overflow Behavior in Deephaven UI Tabs\nDESCRIPTION: Demonstrates how tabs automatically collapse into a Picker when horizontal space is limited. The example shows creating three tabs with fixed width constraint that triggers overflow behavior.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/tabs.md#2025-04-17_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef ui_tabs_overflow_example():\n    return [\n        ui.view(\n            ui.tabs(\n                ui.tab(\n                    \"There is no prior chat history with John Doe.\", title=\"John Doe\"\n                ),\n                ui.tab(\n                    \"There is no prior chat history with Jane Doe.\", title=\"Jane Doe\"\n                ),\n                ui.tab(\n                    \"There is no prior chat history with Joe Bloggs.\",\n                    title=\"Joe Bloggs\",\n                ),\n            ),\n            width=\"80px\",\n        )\n    ]\n\n\nmy_tabs_overflow_example = ui_tabs_overflow_example()\n```\n\n----------------------------------------\n\nTITLE: Disabling Close on Selection in Menu Trigger\nDESCRIPTION: Demonstrates how to keep the menu open after item selection by setting close_on_select to False.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/menu_trigger.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\nmy_close_on_selection_example = ui.menu_trigger(\n    ui.action_button(\"View\"),\n    ui.menu(\n        ui.item(\"Side bar\"),\n        ui.item(\"Page options\"),\n        ui.item(\"Edit panel\"),\n        selection_mode=\"multiple\",\n    ),\n    close_on_select=False,\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Quiet Tabs in Python\nDESCRIPTION: Shows how to create quiet tabs by removing the line separator using the is_quiet prop.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/tabs.md#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\nmy_tabs_is_quiet_example = ui.tabs(\n    ui.tab(\"There is no prior chat history with John Doe.\", title=\"John Doe\"),\n    ui.tab(\"There is no prior chat history with Jane Doe.\", title=\"Jane Doe\"),\n    ui.tab(\"There is no prior chat history with Joe Bloggs.\", title=\"Joe Bloggs\"),\n    is_quiet=True,\n)\n```\n\n----------------------------------------\n\nTITLE: Text Area Label Position Example\nDESCRIPTION: Demonstrates different label positions for text areas, including top and side positioning.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/text_area.md#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef text_area_label_position_props():\n    return [\n        ui.text_area(label=\"Test Label\"),\n        ui.text_area(label=\"Test Label\", label_position=\"side\", label_align=\"start\"),\n    ]\n\ntext_area_label_position_example = text_area_label_position_props()\n```\n\n----------------------------------------\n\nTITLE: Toast with Events and Actions\nDESCRIPTION: Implementation of toast with action buttons, close events, and automatic closing functionality.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/toast.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\nbtn = ui.button(\n    \"Show toast\",\n    on_press=lambda: ui.toast(\n        \"An update is available\",\n        action_label=\"Update\",\n        on_action=lambda: print(\"Updating!\"),\n        should_close_on_action=True,\n        on_close=lambda: print(\"Closed\"),\n        variant=\"positive\",\n    ),\n    variant=\"primary\",\n)\n```\n\n----------------------------------------\n\nTITLE: Applying Meter Variants in Deephaven UI (Python)\nDESCRIPTION: Demonstrates how to use the variant prop to change the meter's visual style. This example creates four meters with different variants: informative, positive, critical, and warning.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/meter.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef ui_meter_variant():\n    return [\n        ui.meter(\n            label=\"Progress\",\n            value=75,\n            variant=\"informative\",\n        ),\n        ui.meter(\n            label=\"Progress\",\n            value=75,\n            variant=\"positive\",\n        ),\n        ui.meter(\n            label=\"Progress\",\n            value=75,\n            variant=\"critical\",\n        ),\n        ui.meter(\n            label=\"Progress\",\n            value=75,\n            variant=\"warning\",\n        ),\n    ]\n\nmy_meter_variant = ui_meter_variant()\n```\n\n----------------------------------------\n\nTITLE: Basic Checkbox Group Implementation in Python\nDESCRIPTION: Creates a basic checkbox group with three sports options and a label. Demonstrates the fundamental usage of the checkbox_group component.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/checkbox_group.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\nmy_checkbox_group_basic = ui.checkbox_group(\n    \"Soccer\",\n    \"Basketball\",\n    \"Baseball\",\n    label=\"Favourite Sports\",\n)\n```\n\n----------------------------------------\n\nTITLE: Using Timers with State in deephaven.ui to Demonstrate Closures\nDESCRIPTION: This snippet shows how state values are captured in closures. Even with a timer delay, the printed value will be the state at the time the event handler ran, not the updated state after re-rendering.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/add-interactivity/state-as-a-snapshot.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom threading import Timer\nfrom deephaven import ui\n\n\n@ui.component\ndef counter():\n    number, set_number = ui.use_state(0)\n\n    def handle_press():\n        set_number(number + 5)\n        Timer(3, lambda: print(number)).start()\n\n    return [ui.heading(f\"{number}\"), ui.button(\"+5\", on_press=handle_press)]\n\n\nexample_counter = counter()\n```\n\n----------------------------------------\n\nTITLE: Creating Simple and Nested HTML Elements in Deephaven UI\nDESCRIPTION: Shows how to create both simple and nested HTML elements using the html_element method, demonstrating the flexibility of element creation with custom tags and attributes.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/html.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\nsimple_html = ui.html.html_element(\"div\", \"Welcome to Deephaven\", id=\"simple\")\n\nnested_html = ui.html.html_element(\n    \"div\",\n    ui.html.html_element(\"h1\", \"Welcome to Deephaven\"),\n    ui.html.html_element(\"p\", \"This is a custom HTML component.\"),\n    id=\"nested\",\n)\n```\n\n----------------------------------------\n\nTITLE: Refactored Table Management without use_liveness_scope\nDESCRIPTION: Improved version of the resetable table component that avoids using use_liveness_scope by deriving the table from state instead of setting it directly using an iteration counter.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/hooks/use_liveness_scope.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui, time_table\n\n\n@ui.component\ndef ui_resetable_table():\n    iteration, set_iteration = ui.use_state(0)\n    table = ui.use_memo(lambda: time_table(\"PT1s\"), [iteration])\n    return [\n        ui.action_button(\n            \"Reset\",\n            on_press=lambda: set_iteration(iteration + 1),\n        ),\n        table,\n    ]\n\n\nresetable_table = ui_resetable_table()\n```\n\n----------------------------------------\n\nTITLE: TableListener Hook Definition in Python\nDESCRIPTION: Definition of the use_table_listener hook for handling table updates with callback functions or TableListener implementations.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/DESIGN.md#2025-04-17_snippet_74\n\nLANGUAGE: python\nCODE:\n```\nuse_table_listener(\n    table: Table,\n    listener: Callable[[TableUpdate, bool], None] | TableListener,\n    dependencies: set[Any],\n    description: str | None = None,\n    do_replay: bool = False,\n    replay_lock: LockType = \"shared\",\n) -> None\n```\n\n----------------------------------------\n\nTITLE: Customizing Necessity Indicators for Number Fields in Python\nDESCRIPTION: This snippet shows how to customize the necessity indicator for number fields, demonstrating both required and optional fields with label indicators.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/number_field.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef ui_number_field_necessity_indicator_examples():\n    return [\n        ui.number_field(\n            label=\"Birth year\", is_required=True, necessity_indicator=\"label\"\n        ),\n        ui.number_field(label=\"Birth year\", necessity_indicator=\"label\"),\n    ]\n\n\nmy_number_field_necessity_indicator_examples = (\n    ui_number_field_necessity_indicator_examples()\n)\n```\n\n----------------------------------------\n\nTITLE: Text Area with Custom Width\nDESCRIPTION: Demonstrates setting custom width and max-width properties for text areas.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/text_area.md#2025-04-17_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef text_area_width_props():\n    return [\n        ui.text_area(label=\"Sample Label\", width=\"size-3600\"),\n        ui.text_area(label=\"Sample Label\", width=\"size-3600\", max_width=\"100%\"),\n    ]\n\ntext_area_width_example = text_area_width_props()\n```\n\n----------------------------------------\n\nTITLE: Configuring Range Slider Labels in Python\nDESCRIPTION: This snippet shows different ways to configure labels for range sliders, including changing label position and hiding value labels.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/range_slider.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\nmy_range_slider_label_example = ui.flex(\n    ui.range_slider(label=\"Jeans price range\", default_value={\"start\": 75, \"end\": 100}),\n    ui.range_slider(\n        label=\"Shoes price range\",\n        label_position=\"side\",\n        default_value={\"start\": 50, \"end\": 100},\n    ),\n    ui.range_slider(\n        label=\"Cakes to buy\",\n        show_value_label=False,\n        default_value={\"start\": 15, \"end\": 30},\n    ),\n    direction=\"column\",\n    gap=\"size-500\",\n)\n```\n\n----------------------------------------\n\nTITLE: Visualizing Frequency of Categories in Deephaven Bar Plots\nDESCRIPTION: Shows how to create bar plots that display the frequency of categories by passing only one column name to either the 'x' or 'y' parameter, creating vertical and horizontal bar plots respectively.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/plotly-express/docs/bar.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.plot.express as dx\n\ntips = dx.data.tips()\n\n# count the number of occurrences of each day with a vertical bar plot\nbar_plot_vertical = dx.bar(tips, x=\"Day\")\n\n# count the number of occurrences of each day with a horizontal bar plot\nbar_plot_horizontal = dx.bar(tips, y=\"Day\")\n```\n\n----------------------------------------\n\nTITLE: Custom Flex Component with Children and Props\nDESCRIPTION: Demonstrates how to create a custom component that accepts children and props using the @ui.component decorator.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/describing/component_rules.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef custom_flex(*children, is_column):\n    return ui.flex(\n        ui.heading(\"My Component\"),\n        children,\n        direction=\"column\" if is_column else \"row\",\n    )\n\n\nmy_custom_flex = custom_flex(ui.text(\"text\"), ui.button(\"button\"), is_column=True)\n```\n\n----------------------------------------\n\nTITLE: Text Field with Contextual Help\nDESCRIPTION: Implements a text field with additional contextual help information.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/text_field.md#2025-04-17_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\nmy_text_field_contextual_help_example = ui.text_field(\n    label=\"Favorite animal\",\n    contextual_help=ui.contextual_help(\n        ui.heading(\"Information about animals\"),\n        ui.content(\n            \"Animals are classified into two main categories – the vertebrates and the invertebrates.\"\n        ),\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Panel with Text Field in Python\nDESCRIPTION: Demonstrates how to create a basic panel with a text field component using the @ui.component decorator. The panel includes a custom title 'Text Field'.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/panel.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef ui_panel():\n    text = ui.text_field()\n\n    return ui.panel(text, title=\"Text Field\")\n\n\nmy_panel = ui_panel()\n```\n\n----------------------------------------\n\nTITLE: Creating Implicit Grid Layout in Deephaven UI\nDESCRIPTION: Demonstrates creating an implicit grid layout with automatically generated columns and rows. Uses the repeat function for column generation and includes color variations for visual demonstration.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/grid.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\ncolors = []\nfor i in range(100, 901, 100):\n    colors.append(f\"red-{i}\")\n    colors.append(f\"green-{i}\")\n    colors.append(f\"blue-{i}\")\n\n@ui.component\ndef implicit_grid():\n    return ui.grid(\n        [ui.view(background_color=color) for color in colors],\n        columns=\"repeat(5, 1fr)\",\n        auto_rows=\"size-800\",\n        justify_content=\"center\",\n        gap=\"size-100\",\n    )\n\nimplicit_grid_example = implicit_grid()\n```\n\n----------------------------------------\n\nTITLE: Adding Labels to Color Pickers in Python\nDESCRIPTION: Shows how to add visual labels and aria labels to color pickers for accessibility. The example uses the ui.component decorator to create a custom component.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/color_picker.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef ui_color_picker_label():\n    return [\n        ui.color_picker(label=\"Label\", default_value=\"#65C4D7\"),\n        ui.color_picker(aria_label=\"Label\", default_value=\"#65C4D7\"),\n    ]\n\n\nmy_color_picker_label = ui_color_picker_label()\n```\n\n----------------------------------------\n\nTITLE: Creating UI Rows in Deephaven Dashboards with Python\nDESCRIPTION: Demonstrates how to create a row of panels in a Deephaven dashboard using the ui.row function. This component arranges child elements horizontally and can have an optional height specification.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/DESIGN.md#2025-04-17_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.ui as ui\nui_row = ui.row(\n    *children: Element,\n    height: int | None = None\n) -> UIRow\n```\n\n----------------------------------------\n\nTITLE: Customizing Progress Bar Sizes in Python\nDESCRIPTION: This example shows how to create progress bars with different sizes using the Deephaven UI component system.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/progress_bar.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef size_variants():\n    return [\n        ui.progress_bar(value=70, size=\"S\"),\n        ui.progress_bar(value=70),\n    ]\n\nprogress_bar_size_examples = size_variants()\n```\n\n----------------------------------------\n\nTITLE: List Item Replacement in DeepHaven UI\nDESCRIPTION: Demonstrates replacing items in a list using list comprehension instead of direct index assignment.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/add-interactivity/update-lists-in-state.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\ninitial_artists = [\n    {\"id\": 0, \"name\": \"Leonardo\"},\n    {\"id\": 1, \"name\": \"Donatello\"},\n    {\"id\": 2, \"name\": \"Michelangelo\"},\n    {\"id\": 3, \"name\": \"Raphael\"},\n]\n\n@ui.component\ndef artist_list():\n    value, set_value = ui.use_state(\"\")\n    artists, set_artists = ui.use_state(initial_artists)\n\n    def handle_replace(id):\n        set_artists(\n            [\n                artist if artist[\"id\"] != id else {\"id\": id, \"name\": value}\n                for artist in artists\n            ]\n        )\n\n    def artist_row(artist):\n        return ui.flex(\n            ui.text(artist[\"name\"]),\n            ui.button(\"Replace\", on_press=lambda: handle_replace(artist[\"id\"])),\n        )\n\n    return [\n        ui.heading(\"Artists:\"),\n        ui.text_field(label=\"Name\", value=value, on_change=set_value),\n        [artist_row(artist) for artist in artists],\n    ]\n\nartist_list_example = artist_list()\n```\n\n----------------------------------------\n\nTITLE: Creating a Multiple Selection Menu in Python with Deephaven UI\nDESCRIPTION: This example shows how to create a menu with multiple selection mode using Deephaven's UI library. It demonstrates controlled state management for multiple selections.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/menu.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef multiple_selection_example():\n    selected, set_selected = ui.use_state(\"all\")\n    return ui.flex(\n        ui.menu_trigger(\n            ui.action_button(\"Show\"),\n            ui.menu(\n                ui.item(\"Sidebar\", key=\"sidebar\"),\n                ui.item(\"Searchbar\", key=\"searchbar\"),\n                ui.item(\"Tools\", key=\"tools\"),\n                ui.item(\"Console\", key=\"console\"),\n                selection_mode=\"multiple\",\n                selected_keys=selected,\n                on_change=set_selected,\n            ),\n            close_on_select=False,\n        ),\n        ui.text(f\"Current selection (controlled) {selected}\"),\n        gap=\"size-100\",\n        align_items=\"center\",\n    )\n\n\nmy_multiple_selection_example = multiple_selection_example()\n```\n\n----------------------------------------\n\nTITLE: Adjusting Meter Size in Deephaven UI (Python)\nDESCRIPTION: Shows how to use the size prop to control the thickness of the meter bar. This example creates two meters with different sizes: 'S' (small) and 'L' (large).\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/meter.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef ui_meter_size():\n    return [\n        ui.meter(label=\"Progress\", value=75, size=\"S\"),\n        ui.meter(label=\"Progress\", value=75, size=\"L\"),\n    ]\n\nmy_meter_size = ui_meter_size()\n```\n\n----------------------------------------\n\nTITLE: Creating a Disabled Form in Deephaven UI (Python)\nDESCRIPTION: Demonstrates how to create a form with disabled fields, preventing user interaction while keeping the fields visible.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/form.md#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef ui_form_disabled():\n    return ui.form(\n        ui.text_field(name=\"name\", label=\"Enter name\"),\n        is_disabled=True,\n    )\n\nmy_form_disabled = ui_form_disabled()\n```\n\n----------------------------------------\n\nTITLE: Date and Time Handling in Labeled Value\nDESCRIPTION: Shows various date/time input types and their handling in labeled value components.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/labeled_value.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui, time_table\nfrom deephaven.time import dh_now\nimport datetime\n\n_table = time_table(period=\"PT1s\").reverse()\n\n@ui.component\ndef labeled_value_datetime():\n    timestamp = ui.use_cell_data(_table)\n\n    return [\n        ui.labeled_value(label=\"Instant\", value=dh_now()),\n        ui.labeled_value(label=\"Pandas timestamp\", value=timestamp),\n        ui.labeled_value(\n            label=\"Date string\",\n            value=\"2035-01-31T12:30:00.12345Z\",\n            format_options={\"date_format\": \"\"},\n        ),\n        ui.labeled_value(\n            label=\"Nanoseconds\",\n            value=2053877400123450000,\n            format_options={\"date_format\": \"\"},\n        ),\n        ui.labeled_value(\n            label=\"Python datetime\",\n            value=datetime.datetime(2035, 1, 31, 12, 30, 0),\n        ),\n    ]\n\nmy_labeled_value_datetime = labeled_value_datetime()\n```\n\n----------------------------------------\n\nTITLE: Adding Vertical Line using unsafe_update_figure in Python\nDESCRIPTION: Demonstrates adding a vertical line to a scatter plot using add_vline. The example adds a dashed orange vertical line at x=20 with a width of 3 pixels.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/plotly-express/docs/unsafe-update-figure.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.plot.express as dx\n\ntips = dx.data.tips()\n\n\ndef update(figure):\n    # Add a dashed orange vertical line at x=20\n    figure.add_vline(x=20, line_width=3, line_dash=\"dash\", line_color=\"orange\")\n\n\nscatter_vline_plot = dx.scatter(\n    tips, x=\"TotalBill\", y=\"Tip\", unsafe_update_figure=update\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing List Views in Deephaven UI\nDESCRIPTION: Demonstrates various implementations of list_view component including simple lists, controlled/uncontrolled states, table integration, and custom item sources with action buttons.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/DESIGN.md#2025-04-17_snippet_38\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.ui as ui\n\n# simple list_view that takes ui.items and is uncontrolled\nlist_view1 = ui.list_view(\n    ui.item(\"Option 1\"),\n    ui.item(\"Option 2\"),\n    ui.item(\"Option 3\"),\n    ui.item(\"Option 4\"),\n    default_selected_keys=[\"Option 2\", \"Option 3\"]\n)\n\n# simple list_view that takes list view items directly and is controlled\nselection, set_selection = ui.use_state([\"Option 1\", \"Option 2\"])\n\nlist_view2 = ui.list_view(\n    \"Option 1\",\n    \"Option 2\",\n    \"Option 3\",\n    \"Option 4\",\n    selected_keys=selection,\n    on_selection_change=selection\n)\n\nfrom deephaven import empty_table\n\ntable1 = empty_table(4).update_view(\"data=i\")\n\n# data hooks can be used to create a list view from a table\n# this should be avoided as it is not as performant as just passing in the table directly\noptions = ui.use_column_data(table1)\n\nlist_view3 = ui.list_view(\n    children=options\n)\n\n# instead, pass in the table directly\nlist_view4 = ui.list_view(\n    table1\n)\n\nfrom deephaven import new_table\nfrom deephaven.column import string_col, int_col\n\ncolor_table = new_table([\n    int_col(\"Keys\", [\"salmon\", \"lemonchiffon\", \"black\"]),\n    string_col(\"Labels\", [\"Salmon\", \"Lemon Chiffon\", \"Black\"]),\n    string_col(\"Descriptions\", [\"An interesting color\", \"Another interesting color\", \"A color\"]),\n    string_col(\"Icons\", [\"Amusementpark\", \"Teapot\", \"Sentiment Negative\"]),\n    string_col(\"SectionKeys\", [\"Interesting Colors\", \"Interesting Colors\", \"Other Colors\"]),\n    string_col(\"SectionLabels\", [\"Favorites\", \"Favorites\", \"Other\"]),\n    string_col(\"SectionDescriptions\", [\"Favorite colors\", \"Favorite colors\", \"Other colors\"]),\n    string_col(\"SectionIcons\", [\"Folder\", \"Folder\", \"Not Found\"])\n])\n\ncolors, set_colors = ui.use_state([\"salmon\", \"lemonchiffon\"])\n\n# this will create a controlled list_view with color_table\n# In order to customize the columns and add table-based buttons for the list_view, use an item_table_source\n# Note key is added to the on_press handler, but is not required.\non_button_action = lambda action_key, key: print(f\"Action {action_key} was pressed for list item {key}\")\nbutton = ui.list_action_group(\"Print Item\", on_action=on_button_action)\n\nsource = ui.item_table_source(\n    color_table,\n    key_column=\"Keys\",\n    label_column=\"Labels\",\n    description_column=\"Descriptions\",\n    icon_column=\"Icons\",\n    actions=button\n)\nlist_view5 = ui.list_view(\n    source,\n    selected_keys=colors,\n    on_selection_change=set_colors\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Counter Component with useState Hook in Python\nDESCRIPTION: This snippet demonstrates how to create a simple counter component using the useState hook in Deephaven UI. It creates a button that displays the number of times it has been pressed and increments the count on each press.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/hooks/overview.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef ui_counter():\n    count, set_count = ui.use_state(0)\n    return ui.button(f\"Pressed {count} times\", on_press=lambda: set_count(count + 1))\n\ncounter = ui_counter()\n```\n\n----------------------------------------\n\nTITLE: Custom Scale and Step Slider Implementation\nDESCRIPTION: Shows how to customize slider range and step values for different use cases.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/slider.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef slider_range_step_examples():\n    return [\n        ui.slider(\n            default_value=100, min_value=50, max_value=150, label=\"Cookies to buy\"\n        ),\n        ui.slider(\n            default_value=100,\n            min_value=0,\n            max_value=1000,\n            step=100,\n            label=\"Donuts to buy for group event\",\n        ),\n    ]\n\nmy_slider_range_step_examples = slider_range_step_examples()\n```\n\n----------------------------------------\n\nTITLE: Creating Static Color Action Buttons in Deephaven UI\nDESCRIPTION: Creates action buttons with fixed colors (white and black) that don't change based on theme, suitable for use on fixed-color backgrounds rather than theme-dependent backgrounds.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/action_button.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef static_buttons():\n    return [\n        ui.view(\n            ui.action_button(\n                \"White outline\",\n                static_color=\"white\",\n            ),\n            background_color=\"#000066\",\n            padding=\"size-300\",\n        ),\n        ui.view(\n            ui.action_button(\n                \"Black outline\",\n                static_color=\"black\",\n            ),\n            background_color=\"#FFFF00\",\n            padding=\"size-300\",\n        ),\n    ]\n\n\nstatic_buttons_example = static_buttons()\n```\n\n----------------------------------------\n\nTITLE: Linking Components in Deephaven Dashboards with Python\nDESCRIPTION: Demonstrates how to create links between dashboard components using ui.link. This example creates a dashboard with two tables and links the 'a' column of the first table to the 'b' column of the second table.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/DESIGN.md#2025-04-17_snippet_30\n\nLANGUAGE: python\nCODE:\n```\n@ui.component\ndef my_dashboard():\n    t1 = empty_table(100).update(\"a=i\")\n    t2 = empty_table(100).update(\"b=i\", \"c=Math.sin(i)\")\n\n    return ui.dashboard(\n        ui.row([ui.table(t1, id=\"t1\"), ui.table(t2, id=\"t2\")]),\n        links=[\n            # Create a link from the \"a\" column of t1 to the \"b\" column of t2\n            ui.link(\n                start=ui.link_point(\"t1\", column=\"a\"),\n                end=ui.link_point(\"t2\", column=\"b\"),\n            )\n        ],\n    )\n\n\nd = my_dashboard()\n```\n\n----------------------------------------\n\nTITLE: Toast Variants Implementation\nDESCRIPTION: Demonstrates different toast variants including neutral, positive, negative, and info styles.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/toast.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\ntoasts = ui.button_group(\n    ui.button(\n        \"Show neutral toast\",\n        on_press=lambda: ui.toast(\"Toast available\", variant=\"neutral\"),\n        variant=\"secondary\",\n    ),\n    ui.button(\n        \"Show positive toast\",\n        on_press=lambda: ui.toast(\"Toast is done!\", variant=\"positive\"),\n        variant=\"primary\",\n    ),\n    ui.button(\n        \"Show negative toast\",\n        on_press=lambda: ui.toast(\"Toast is burned!\", variant=\"negative\"),\n        variant=\"negative\",\n    ),\n    ui.button(\n        \"Show info toast\",\n        on_press=lambda: ui.toast(\"Toasting...\", variant=\"info\"),\n        variant=\"accent\",\n        style=\"outline\",\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Displaying Multiple Logic Button Variants in Python\nDESCRIPTION: This snippet demonstrates how to create and display multiple Logic Button variants ('or' and 'and') using a component function.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/logic_button.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef ui_logic_button_variants():\n\n    return [\n        ui.logic_button(\"Or\", variant=\"or\"),\n        ui.logic_button(\"And\", variant=\"and\"),\n    ]\n\n\nmy_logic_button_variants = ui_logic_button_variants()\n```\n\n----------------------------------------\n\nTITLE: Adding Prefixes and Suffixes to Indicator Plot Values in Python\nDESCRIPTION: Demonstrates how to add a prefix and suffix to the numeric value in an indicator plot. The example adds a dollar sign prefix and 'USD' suffix to price values.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/plotly-express/docs/indicator.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.plot.express as dx\nfrom deephaven import agg as agg\n\nmy_table = dx.data.stocks()\n\n# subset data and aggregate for DOG prices\ndog_avg = my_table.where(\"Sym = `DOG`\").agg_by([agg.avg(cols=\"Price\"), agg.first(cols=\"StartingPrice = Price\")])\n\nindicator_plot = dx.indicator(dog_avg, value=\"Price\", reference=\"StartingPrice\", prefix=\"$\", suffix=\" USD\")\n```\n\n----------------------------------------\n\nTITLE: Text Area with Help Text\nDESCRIPTION: Shows how to add description and error messages to text areas with validation states.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/text_area.md#2025-04-17_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef text_area_help_text_props():\n    return [\n        ui.text_area(\n            label=\"Comment\",\n            default_value=\"Awesome!\",\n            validation_state=\"valid\",\n            description=\"Enter a comment.\",\n        ),\n        ui.text_area(\n            label=\"Comment\",\n            validation_state=\"invalid\",\n            error_message=\"Empty input is not allowed.\",\n        ),\n    ]\n\ntext_area_help_text_example = text_area_help_text_props()\n```\n\n----------------------------------------\n\nTITLE: Configuring List View Overflow Mode in Python with Deephaven UI\nDESCRIPTION: This snippet shows how to configure the overflow mode of a List View, demonstrating both truncate and wrap modes.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/list_view.md#2025-04-17_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef ui_list_view_overflow():\n    value, set_value = ui.use_state([\"Text 2\"])\n\n    truncated_list = ui.list_view(\n        \"Really long Text 1\",\n        \"Really long Text 2\",\n        \"Really long Text 3\",\n        aria_label=\"List View - Quiet\",\n        on_change=set_value,\n        selected_keys=value,\n        overflow_mode=\"truncate\",\n        width=\"150px\",\n    )\n\n    wrapped_list = ui.list_view(\n        \"Really long Text 1\",\n        \"Really long Text 2\",\n        \"Really long Text 3\",\n        aria_label=\"List View - Quiet\",\n        on_change=set_value,\n        selected_keys=value,\n        overflow_mode=\"wrap\",\n        width=\"150px\",\n    )\n    return truncated_list, wrapped_list\n\nmy_list_view_overflow = ui_list_view_overflow()\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Flex Container in Deephaven UI\nDESCRIPTION: This snippet demonstrates how to create a basic flex container with three child views using the ui.flex component in Deephaven UI. It showcases the default row layout with different colored child elements.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/flex.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef ui_flex():\n    return ui.flex(\n        ui.view(1, background_color=\"red\", height=\"size-800\", width=\"size-800\"),\n        ui.view(2, background_color=\"green\", height=\"size-800\", width=\"size-800\"),\n        ui.view(3, background_color=\"blue\", height=\"size-800\", width=\"size-800\"),\n    )\n\nmy_flex = ui_flex()\n```\n\n----------------------------------------\n\nTITLE: Implementing a Read-Only Search Field\nDESCRIPTION: Shows how to create a read-only search field using the 'is_read_only' prop, allowing visibility but preventing editing.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/search_field.md#2025-04-17_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\nmy_search_field_is_quiet_example = ui.search_field(\n    label=\"Animal\", default_value=\"Panda\", is_read_only=True\n)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Flex Direction Options in Deephaven UI\nDESCRIPTION: This snippet shows how to use different flex direction options (row, row-reverse, column, column-reverse) in Deephaven UI. It creates multiple flex containers to illustrate each direction option.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/flex.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef ui_flex_direction():\n    return [\n        'direction=\"row\"',\n        ui.flex(\n            ui.view(1, background_color=\"red\", height=\"size-800\", width=\"size-800\"),\n            ui.view(2, background_color=\"green\", height=\"size-800\", width=\"size-800\"),\n            ui.view(3, background_color=\"blue\", height=\"size-800\", width=\"size-800\"),\n        ),\n        'direction=\"row-reverse\"',\n        ui.flex(\n            ui.view(1, background_color=\"red\", height=\"size-800\", width=\"size-800\"),\n            ui.view(2, background_color=\"green\", height=\"size-800\", width=\"size-800\"),\n            ui.view(3, background_color=\"blue\", height=\"size-800\", width=\"size-800\"),\n            direction=\"row-reverse\",\n        ),\n        'direction=\"column\"',\n        ui.flex(\n            ui.view(1, background_color=\"red\", height=\"size-800\", width=\"size-800\"),\n            ui.view(2, background_color=\"green\", height=\"size-800\", width=\"size-800\"),\n            ui.view(3, background_color=\"blue\", height=\"size-800\", width=\"size-800\"),\n            direction=\"column\",\n        ),\n        'direction=\"column-reverse\"',\n        ui.flex(\n            ui.view(1, background_color=\"red\", height=\"size-800\", width=\"size-800\"),\n            ui.view(2, background_color=\"green\", height=\"size-800\", width=\"size-800\"),\n            ui.view(3, background_color=\"blue\", height=\"size-800\", width=\"size-800\"),\n            direction=\"column-reverse\",\n        ),\n    ]\n\nmy_flex_direction = ui_flex_direction()\n```\n\n----------------------------------------\n\nTITLE: Handling Calendar Events in Python\nDESCRIPTION: Demonstrates how to handle the 'on_change' event of a calendar component.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/calendar.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef event_example():\n    value, set_value = ui.use_state(\"2020-02-03\")\n    return ui.calendar(\n        aria_label=\"Calendar (controlled)\", value=value, on_change=set_value\n    )\n\n\nmy_event_example = event_example()\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Inline Alert in Deephaven UI\nDESCRIPTION: Creates a basic inline alert component with required heading and content properties. This snippet demonstrates the minimal setup needed to display an inline alert message.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/inline_alert.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\nmy_inline_alert_basic = ui.inline_alert(\n    heading=\"Payment Information\",\n    content=\"Enter your billing address, shipping address, and payment method to complete your purchase.\",\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Links to Menu Items in Python using Deephaven UI\nDESCRIPTION: This snippet demonstrates how to add links to menu items using the href prop in Deephaven's UI library. It creates a menu with external links to various websites.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/menu.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\nmy_link_example = ui.menu_trigger(\n    ui.action_button(\"Links\"),\n    ui.menu(\n        ui.item(\"Adobe\", href=\"https://adobe.com/\", target=\"_blank\"),\n        ui.item(\"Apple\", href=\"https://apple.com/\", target=\"_blank\"),\n        ui.item(\"Google\", href=\"https://google.com/\", target=\"_blank\"),\n        ui.item(\"Microsoft\", href=\"https://microsoft.com/\", target=\"_blank\"),\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Disabled Range Slider in Python\nDESCRIPTION: This snippet shows how to create a disabled range slider using the is_disabled prop.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/range_slider.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\nmy_range_slider_disabled_example = ui.range_slider(\n    label=\"Price filter\", default_value={\"start\": 25, \"end\": 50}, is_disabled=True\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Aggregation to Heatmap in Python\nDESCRIPTION: Shows how to incorporate an additional continuous variable with custom aggregation function to color the heatmap using the average of SepalLength.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/plotly-express/docs/density_heatmap.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.plot.express as dx\niris = dx.data.iris()\n\n# color the map by the average of an additional continuous variable\nheatmap_aggregation = dx.density_heatmap(iris,\n    x=\"PetalLength\",\n    y=\"PetalWidth\",\n    z=\"SepalLength\",\n    histfunc=\"avg\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Badge in Deephaven UI\nDESCRIPTION: Creates a simple badge with a 'Licensed' label using the positive (green) variant. This example demonstrates the minimal usage of the badge component.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/badge.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\nmy_badge_basic = ui.badge(\"Licensed\", variant=\"positive\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Dismissable Dialog with Callback in Python using Deephaven UI\nDESCRIPTION: This example shows how to create a dismissable dialog with a custom callback for the dismiss action.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/dialog.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef dismissable_callback():\n    is_open, set_open = ui.use_boolean()\n\n    def print_dismiss():\n        set_open.off()\n        print(\"Dialog dismissed.\")\n\n    return ui.dialog_trigger(\n        ui.action_button(\"Info\", on_press=set_open.on),\n        ui.dialog(\n            ui.heading(\"Version Info\"),\n            ui.content(\"Version 1.0.0, Copyright 2020\"),\n            on_dismiss=print_dismiss,\n        ),\n        is_open=is_open,\n        is_dismissable=True,\n    )\n\nmy_dismissable_callback = dismissable_callback()\n```\n\n----------------------------------------\n\nTITLE: Creating Line Plot with Categorical Grouping\nDESCRIPTION: Creates a line plot tracking price trends over time, grouped by stock symbol.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/plotly-express/docs/plot-by.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.plot.express as dx\nstocks = dx.data.stocks() # import ticking Stocks dataset\n\n# use `by` argument to plot prices by stock symbol\nprices_by_sym = dx.line(stocks, x=\"Timestamp\", y=\"Price\", by=\"Sym\")\n```\n\n----------------------------------------\n\nTITLE: Setting Static Color in Action Group\nDESCRIPTION: Demonstrates how to set a static color for an action group when it's placed over a colored background.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/action_group.md#2025-04-17_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\nmy_action_group_static_color_example = ui.view(\n    ui.action_group(\n        ui.item(ui.icon(\"edit\"), ui.text(\"Edit\")),\n        ui.item(ui.icon(\"copy\"), ui.text(\"Copy\")),\n        ui.item(ui.icon(\"trash\"), ui.text(\"Delete\")),\n        static_color=\"white\",\n    ),\n    background_color=\"blue-700\",\n    padding=\"size-500\",\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Radio Group Validation in Python\nDESCRIPTION: Shows how to implement validation for radio groups using the is_required and validation_behavior props.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/radio_group.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef ui_radio_group_validation_behaviour_example():\n    return ui.form(\n        ui.radio_group(\n            ui.radio(\"Yes\", value=\"Yes\"),\n            ui.radio(\"No\", value=\"No\"),\n            label=\"Is vanilla the best flavor of ice cream?\",\n            validation_behavior=\"aria\",\n            is_required=True,\n        )\n    )\n\n\nmy_radio_group_validation_behaviour_example = (\n    ui_radio_group_validation_behaviour_example()\n)\n```\n\n----------------------------------------\n\nTITLE: Importing Deephaven Plot Express module\nDESCRIPTION: Demonstrates how to import the Deephaven Plot Express module, which mirrors the syntax of plotly express.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/plotly-express/README.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.plot.express as dx\n```\n\n----------------------------------------\n\nTITLE: Controlling Indicator Rows Layout in Python\nDESCRIPTION: Shows how to control the layout of multiple indicators by specifying the number of rows. The indicators will be arranged with a fixed number of rows and dynamic number of columns.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/plotly-express/docs/indicator.md#2025-04-17_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.plot.express as dx\nfrom deephaven import agg as agg\n\nmy_table = dx.data.stocks()\n\n# aggregate for average prices by Sym\nsym_avg = my_table.agg_by([agg.avg(cols=\"Price\")], by=\"Sym\")\n\nindicator_plot = dx.indicator(sym_avg, value=\"Price\", by=\"Sym\", rows=2)\n```\n\n----------------------------------------\n\nTITLE: Contextual Help Integration with Slider\nDESCRIPTION: Demonstrates how to add contextual help information to a slider component.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/slider.md#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\nmy_slider_contextual_help_example = ui.slider(\n    label=\"Exposure\",\n    min_value=-100,\n    max_value=100,\n    default_value=0,\n    is_filled=True,\n    fill_offset=0,\n    contextual_help=ui.contextual_help(\n        ui.heading(\"What is exposure?\"),\n        ui.content(\"Exposure adjusts how bright the image is\"),\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Dialog with Footer in Python using Deephaven UI\nDESCRIPTION: This example shows how to create a dialog with a title, content, footer, and action buttons using Deephaven UI components.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/dialog.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef dialog_example1():\n    is_open, set_open = ui.use_boolean()\n    return ui.dialog_trigger(\n        ui.action_button(\"Publish\", on_press=set_open.on),\n        ui.dialog(\n            ui.heading(\"Publish 3 pages\"),\n            ui.content(\"Confirm publish?\"),\n            ui.footer(\"You can undo this action later.\"),\n            ui.button_group(\n                ui.button(\"Cancel\", variant=\"secondary\", on_press=set_open.off),\n                ui.button(\n                    \"Confirm\", variant=\"accent\", on_press=set_open.off, auto_focus=True\n                ),\n            ),\n        ),\n        is_open=is_open,\n    )\n\nmy_dialog_example1 = dialog_example1()\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Button Group in Python with Deephaven UI\nDESCRIPTION: This snippet demonstrates how to create a basic button group using Deephaven's UI library. It includes three buttons with different variants and styles.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/button_group.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\nmy_button_group_basic = ui.button_group(\n    ui.button(\"Rate Now\", variant=\"accent\"),\n    ui.button(\"No, thanks\", variant=\"primary\", style=\"outline\"),\n    ui.button(\"Remind me later\", variant=\"primary\", style=\"outline\"),\n)\n```\n\n----------------------------------------\n\nTITLE: Complex Boolean State Initialization with Lambda in Python\nDESCRIPTION: Shows how to initialize boolean state using a lambda function for complex computations that should only run once during initialization.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/hooks/use_boolean.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nvalue, set_value = ui.use_boolean(lambda: complex_function())\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Action Group in Python\nDESCRIPTION: Demonstrates how to create a basic action group with three items using the Deephaven UI library.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/action_group.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\nmy_action_group_basic = ui.action_group(\n    ui.item(\"Add\"),\n    ui.item(\"Edit\"),\n    ui.item(\"Delete\"),\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Contextual Help to Search Fields\nDESCRIPTION: Demonstrates how to add contextual help to a search field using the 'contextual_help' prop with additional information.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/search_field.md#2025-04-17_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\nmy_search_field_contextual_help_example = ui.search_field(\n    label=\"Animal\",\n    contextual_help=ui.contextual_help(\n        ui.heading(\"Information about animals\"),\n        ui.content(\n            \"Animals are classified into two main categories – the vertebrates and the invertebrates.\"\n        ),\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Checkbox Validation Implementation\nDESCRIPTION: Shows how to implement validation states for checkboxes using the is_invalid prop.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/checkbox.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef ui_checkbox_validation_example():\n    invalid, set_invalid = ui.use_state(False)\n    return [\n        ui.button(\n            \"Make checkbox valid\" if invalid else \"Make checkbox invalid\",\n            on_press=lambda: set_invalid(not invalid),\n        ),\n        ui.checkbox(\"I accept the terms and conditions\", is_invalid=invalid),\n    ]\n\n\nmy_checkbox_validation_example = ui_checkbox_validation_example()\n```\n\n----------------------------------------\n\nTITLE: Handling Form Reset Event in Deephaven UI (Python)\nDESCRIPTION: Demonstrates how to create a form with reset event handling, including text and number fields, and a reset button.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/form.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef ui_form_submit():\n    return ui.form(\n        ui.text_field(name=\"name\", label=\"Enter name\"),\n        ui.number_field(name=\"age\", label=\"Enter age\"),\n        ui.button(\"Reset\", type=\"reset\"),\n        on_reset=lambda e: print(f\"Form reset\"),\n    )\n\nmy_form_submit = ui_form_submit()\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Heading in Deephaven UI (Python)\nDESCRIPTION: This snippet demonstrates how to create a basic heading using the Deephaven UI library. It creates a default level 3 heading with the text 'Hello world'.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/heading.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\nmy_heading_basic = ui.heading(\"Hello world\")\n```\n\n----------------------------------------\n\nTITLE: Customizing Necessity Indicators for Search Fields\nDESCRIPTION: Demonstrates how to customize the necessity indicator for search fields, showing both required and optional fields.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/search_field.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef ui_search_field_necessity_indicator_examples():\n    return [\n        ui.search_field(label=\"Search\", is_required=True, necessity_indicator=\"label\"),\n        ui.search_field(label=\"Search\", necessity_indicator=\"label\"),\n    ]\n\n\nmy_search_field_necessity_indicator_examples = (\n    ui_search_field_necessity_indicator_examples()\n)\n```\n\n----------------------------------------\n\nTITLE: Displaying Multiple Months in Calendar with Python\nDESCRIPTION: Shows how to display multiple months (up to 3) in a calendar using the 'visible_months' prop.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/calendar.md#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\nmy_calendar_visible_months_example = ui.calendar(\n    visible_months=3,\n)\n```\n\n----------------------------------------\n\nTITLE: Controlling Indicator Columns Layout in Python\nDESCRIPTION: Shows how to control the layout of multiple indicators by specifying the number of columns. The indicators will be arranged with a fixed number of columns and dynamic number of rows.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/plotly-express/docs/indicator.md#2025-04-17_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.plot.express as dx\nfrom deephaven import agg as agg\n\nmy_table = dx.data.stocks()\n\n# aggregate for average prices by Sym\nsym_avg = my_table.agg_by([agg.avg(cols=\"Price\")], by=\"Sym\")\n\nindicator_plot = dx.indicator(sym_avg, value=\"Price\", by=\"Sym\", cols=2)\n```\n\n----------------------------------------\n\nTITLE: Timezone Handling in Labeled Value\nDESCRIPTION: Shows how to handle different timezone scenarios in labeled value components.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/labeled_value.md#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef labeled_value_datetime_timezone():\n    date = \"2035-01-31T12:30:00.12345Z\"\n    zoned_date = \"2035-01-31T12:30:00.12345 America/Los_Angeles\"\n    default_date_format = {\"date_format\": \"\"}\n\n    return [\n        ui.labeled_value(\n            label=\"User settings timezone\",\n            value=date,\n            format_options=default_date_format,\n        ),\n        ui.labeled_value(\n            label=\"Provided timezone from date string\",\n            value=zoned_date,\n            format_options=default_date_format,\n        ),\n        ui.labeled_value(\n            label=\"Overridden with timezone property\",\n            value=zoned_date,\n            format_options={**default_date_format, \"timezone\": \"America/Halifax\"},\n        ),\n    ]\n\nmy_labeled_value_datetime_timezone = labeled_value_datetime_timezone()\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Menu in Python with Deephaven UI\nDESCRIPTION: This snippet demonstrates how to create a basic menu using Deephaven's UI library. It includes a menu trigger with an action button and a menu with multiple items.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/menu.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\nmy_menu_example = ui.menu_trigger(\n    ui.action_button(\"Edit\"),\n    ui.menu(\n        ui.item(\"Cut\", key=\"cut\"),\n        ui.item(\"Copy\", key=\"copy\"),\n        ui.item(\"Paste\", key=\"paste\"),\n        ui.item(\"Replace\", key=\"replace\"),\n        on_action=lambda key: print(key),\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Scatter Plot with Multiple Categorical Variables\nDESCRIPTION: Creates a scatter plot grouped by multiple categorical variables using a list in the 'by' parameter.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/plotly-express/docs/plot-by.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.plot.express as dx\ntips = dx.data.tips() # import a ticking version of the Tips dataset\n\n# passing a list to `by` gives unique colors for each combination of values in the given columns\ntotal_bill_sex_smoker = dx.scatter(tips, x=\"TotalBill\", y=\"Tip\", by=[\"Sex\", \"Smoker\"])\n```\n\n----------------------------------------\n\nTITLE: Creating a Badge with Icon and Text in Deephaven UI\nDESCRIPTION: Creates a badge that includes both an icon and text. This example shows how to combine an icon (warning) with a text label (Rejected) using the negative variant.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/badge.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\nmy_badge_context_example = ui.badge(\n    ui.icon(\"vsWarning\"), \"Rejected\", variant=\"negative\"\n)\n```\n\n----------------------------------------\n\nTITLE: Formatting Meter Values in Deephaven UI (Python)\nDESCRIPTION: Demonstrates how to use the format_options prop to display the meter value as currency. This example formats the value as US Dollars.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/meter.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef ui_meter_format():\n    return ui.meter(\n        label=\"Currency\",\n        value=75,\n        format_options={\"style\": \"currency\", \"currency\": \"USD\"},\n    )\n\nmy_meter_format = ui_meter_format()\n```\n\n----------------------------------------\n\nTITLE: Modifying List View Density in Python with Deephaven UI\nDESCRIPTION: This snippet demonstrates how to adjust the vertical padding of each row in a List View using the density prop.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/list_view.md#2025-04-17_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef ui_list_view_density():\n    value, set_value = ui.use_state([\"Text 2\"])\n\n    compact_list = ui.list_view(\n        \"Text 1\",\n        \"Text 2\",\n        \"Text 3\",\n        aria_label=\"List View - Compact\",\n        on_change=set_value,\n        selected_keys=value,\n        density=\"compact\",\n    )\n\n    spacious_list = ui.list_view(\n        \"Text 1\",\n        \"Text 2\",\n        \"Text 3\",\n        aria_label=\"List View - Spacious\",\n        on_change=set_value,\n        selected_keys=value,\n        density=\"spacious\",\n    )\n    return compact_list, spacious_list\n\nmy_list_view_density = ui_list_view_density()\n```\n\n----------------------------------------\n\nTITLE: Slider Label Position Customization\nDESCRIPTION: Shows different ways to position and display slider labels and values.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/slider.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\nmy_slider_label_example = ui.flex(\n    ui.slider(label=\"Cookies to buy\", default_value=25),\n    ui.slider(label=\"Donuts to buy\", label_position=\"side\", default_value=25),\n    ui.slider(label=\"Cakes to buy\", show_value_label=False, default_value=25),\n    direction=\"column\",\n    gap=\"size-500\",\n)\n```\n\n----------------------------------------\n\nTITLE: Date Types Example Implementation\nDESCRIPTION: Demonstrates different date type implementations including ZonedDateTime, Instant, and LocalDate with a component that displays selected date ranges.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/range_calendar.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\nfrom deephaven.time import to_j_local_date, to_j_instant, to_j_zdt\n\n\n@ui.component\ndef range_calendar_example(start, end):\n    dates, set_dates = ui.use_state({\"start\": start, \"end\": end})\n    return [\n        ui.range_calendar(on_change=set_dates, value=dates),\n        ui.text(str(dates[\"start\"])),\n        ui.text(str(dates[\"end\"])),\n    ]\n\n\nzdt_start = to_j_zdt(\"1995-03-22T11:11:11.23142 America/New_York\")\nzdt_end = to_j_zdt(\"1995-03-25T11:11:11.23142 America/New_York\")\ninstant_start = to_j_instant(\"2022-01-01T00:00:00 ET\")\ninstant_end = to_j_instant(\"2022-01-05T00:00:00 ET\")\nlocal_start = to_j_local_date(\"2024-05-06\")\nlocal_end = to_j_local_date(\"2024-05-10\")\n\nmy_zoned_example = range_calendar_example(zdt_start, zdt_end)\nmy_instant_example = range_calendar_example(instant_start, instant_end)\nmy_local_example = range_calendar_example(local_start, local_end)\n```\n\n----------------------------------------\n\nTITLE: Date Formatting Options in Labeled Value\nDESCRIPTION: Demonstrates various date formatting patterns using GWT Java DateTimeFormat syntax.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/labeled_value.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\nfrom deephaven.time import dh_now\n\n@ui.component\ndef labeled_value_datetime_formatting():\n    now = dh_now()\n\n    return [\n        ui.labeled_value(\n            label=\"12-hr time\", value=now, format_options={\"date_format\": \"h:mm a\"}\n        ),\n        ui.labeled_value(\n            label=\"Day, abbreviated month, year\",\n            value=now,\n            format_options={\"date_format\": \"d MMM yyyy\"},\n        ),\n        ui.labeled_value(\n            label=\"Day of week, full month, day, year, 24-hr time\",\n            value=now,\n            format_options={\"date_format\": \"EEEE, MMMM dd, yyyy HH:mm:ss\"},\n        ),\n        ui.labeled_value(\n            label=\"Timestamp in nanoseconds\",\n            value=now,\n            format_options={\"date_format\": \"yyyy-MM-dd'T'HH:mm:ss.SSSSSSSSS z\"},\n        ),\n    ]\n\nmy_labeled_value_datetime_formatting = labeled_value_datetime_formatting()\n```\n\n----------------------------------------\n\nTITLE: Handling Open Change Events in Menu Trigger\nDESCRIPTION: Shows how to use the on_open_change handler to track the open state of the menu trigger.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/menu_trigger.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef open_change_example():\n    is_open, set_open = ui.use_boolean()\n    return ui.flex(\n        ui.menu_trigger(\n            ui.action_button(\"Edit\"),\n            ui.menu(\n                ui.item(\"Cut\"),\n                ui.item(\"Copy\"),\n                ui.item(\"Paste\"),\n            ),\n            on_open_change=set_open.toggle,\n        ),\n        ui.text(f\"Currently open: {is_open}\"),\n        gap=\"size-100\",\n        align_items=\"center\",\n    )\n\n\nmy_open_change_example = open_change_example()\n```\n\n----------------------------------------\n\nTITLE: Individual Checkbox Validation\nDESCRIPTION: Shows how to implement validation for individual checkboxes within a group.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/checkbox_group.md#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\nmy_checkbox_group_individual_validation_example = ui.form(\n    ui.checkbox_group(\n        ui.checkbox(\"Terms and conditions\", value=\"terms\", is_required=True),\n        ui.checkbox(\"Privacy policy\", value=\"privacy\", is_required=True),\n        label=\"Agree to the following\",\n        is_required=True,\n    ),\n    ui.button_group(\n        ui.button(\"Submit\", type=\"submit\", variant=\"primary\"),\n        ui.button(\"Reset\", type=\"reset\", variant=\"secondary\"),\n    ),\n    on_submit=lambda: print(\"Form submitted!\"),\n    validation_behavior=\"native\",\n)\n```\n\n----------------------------------------\n\nTITLE: Customizing Width of Search Fields\nDESCRIPTION: Shows how to adjust the width and set a maximum width for search fields using the 'width' and 'max_width' props.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/search_field.md#2025-04-17_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef ui_search_field_width_examples():\n    return [\n        ui.search_field(label=\"Animal\", width=\"size-3600\"),\n        ui.search_field(label=\"Animal\", width=\"size-3600\", max_width=\"100%\"),\n    ]\n\n\nmy_search_field_width_examples = ui_search_field_width_examples()\n```\n\n----------------------------------------\n\nTITLE: Customizing Icon in Search Fields\nDESCRIPTION: Demonstrates how to change the icon within a search field using the 'icon' prop to indicate the field's purpose.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/search_field.md#2025-04-17_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\nmy_search_field_icon = ui.search_field(label=\"User\", icon=ui.icon(\"account\"))\n```\n\n----------------------------------------\n\nTITLE: Creating a Quiet List View in Python with Deephaven UI\nDESCRIPTION: This snippet shows how to create a quiet List View using the is_quiet prop, and compares it with a default List View.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/list_view.md#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef ui_list_view_quiet():\n    value, set_value = ui.use_state([\"Text 2\"])\n\n    quiet_list = ui.list_view(\n        \"Text 1\",\n        \"Text 2\",\n        \"Text 3\",\n        aria_label=\"List View - Quiet\",\n        on_change=set_value,\n        selected_keys=value,\n        is_quiet=True,\n    )\n\n    default_list = ui.list_view(\n        \"Text 1\",\n        \"Text 2\",\n        \"Text 3\",\n        aria_label=\"List View - Default\",\n        on_change=set_value,\n        selected_keys=value,\n    )\n    return quiet_list, default_list\n\nmy_list_view_quiet = ui_list_view_quiet()\n```\n\n----------------------------------------\n\nTITLE: Customizing Date Range Picker Width\nDESCRIPTION: Examples of setting custom width and maximum width constraints for date range pickers.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/date_range_picker.md#2025-04-17_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef date_range_picker_width_examples():\n    return [\n        ui.date_range_picker(\n            width=\"size-6000\",\n        ),\n        ui.date_range_picker(\n            width=\"size-6000\",\n            max_width=\"100%\",\n        ),\n    ]\n\nmy_date_range_picker_width_examples = date_range_picker_width_examples()\n```\n\n----------------------------------------\n\nTITLE: Customizing Delta Colors in Indicator Plots in Python\nDESCRIPTION: Demonstrates how to customize the colors of delta values based on whether they are increasing or decreasing. Colors are applied sequentially and looped for multiple indicators.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/plotly-express/docs/indicator.md#2025-04-17_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.plot.express as dx\nfrom deephaven import agg as agg\n\nmy_table = dx.data.stocks()\n\n# subset data and aggregate for DOG prices\nsym_agg = my_table.agg_by(\n    [agg.avg(cols=\"Price\"), agg.first(cols=\"StartingPrice = Price\")]\n)\n\nindicator_plot = dx.indicator(\n    sym_agg,\n    value=\"Price\",\n    reference=\"StartingPrice\",\n    increasing_color_sequence=[\"darkgreen\", \"green\"],\n    decreasing_color_sequence=[\"darkred\", \"red\"],\n)\n```\n\n----------------------------------------\n\nTITLE: Todo List Without Memoization\nDESCRIPTION: Shows an example of a todo list implementation without memoization, demonstrating performance issues when filtering todos.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/hooks/use_memo.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\nimport time\n\ntheme_options = [\"accent-200\", \"red-200\", \"green-200\"]\n\n@ui.component\ndef ui_todo_list(todos: list[str], search: str, theme: str):\n    def filter_todos():\n        # Simulate delay\n        time.sleep(2)\n        return [todo for todo in todos if search in todo]\n\n    filtered_todos = filter_todos()\n\n    return ui.view(\n        ui.flex(\n            ui.text(f\"Showing {len(filtered_todos)} todos\"),\n            *[ui.checkbox(todo) for todo in filtered_todos],\n            direction=\"column\",\n        ),\n        padding=\"size-200\",\n        background_color=theme,\n    )\n\n@ui.component\ndef ui_todo_app(todos: list[str]):\n    search, set_search = ui.use_state(\"\")\n    theme, set_theme = ui.use_state(theme_options[0])\n\n    return [\n        ui.text_field(value=search, label=\"Search\", on_change=set_search),\n        ui.picker(\n            *theme_options, label=\"Theme\", selected_key=theme, on_change=set_theme\n        ),\n        ui_todo_list(todos, search, theme),\n    ]\n\ntodo_app = ui_todo_app([\"Do grocery shopping\", \"Walk the dog\", \"Do laundry\"])\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Date Picker in Python\nDESCRIPTION: Creates a basic date picker with a label, default value, and on_change callback. The date picker allows users to select a date and time from a pop-up calendar.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/date_picker.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\ndp = ui.date_picker(\n    label=\"Date Picker\",\n    default_value=\"2024-01-02T10:30:00 UTC\",\n    on_change=print,\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Button Label Behavior in Action Group\nDESCRIPTION: Demonstrates how to hide label text within buttons and show it in a tooltip on hover using the button_label_behavior prop.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/action_group.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\nmy_action_group_button_label_behavior_example = ui.action_group(\n    ui.item(ui.icon(\"edit\"), ui.text(\"Edit\")),\n    ui.item(ui.icon(\"copy\"), ui.text(\"Copy\")),\n    ui.item(ui.icon(\"trash\"), ui.text(\"Delete\")),\n    button_label_behavior=\"hide\",\n)\n```\n\n----------------------------------------\n\nTITLE: Time Zone Aware Date Range Pickers\nDESCRIPTION: Demonstrates time zone handling with ZonedDateTime and Instant objects in date range pickers.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/date_range_picker.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\nfrom deephaven.time import to_j_instant\n\nmy_zoned_date_time = ui.date_range_picker(\n    label=\"Date range\",\n    default_value={\n        \"start\": \"2022-11-07T00:45 America/Los_Angeles\",\n        \"end\": \"2022-11-08T11:15 America/Los_Angeles\",\n    },\n)\n\nmy_instant = ui.date_range_picker(\n    label=\"Date range\",\n    default_value={\n        \"start\": to_j_instant(\"2022-11-07T00:45Z\"),\n        \"end\": to_j_instant(\"2022-11-08T11:15Z\"),\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Emphasized Tabs with Deephaven UI\nDESCRIPTION: Shows how to create tabs with emphasized styling using the is_emphasized property, which adds an accent-colored underline to the selected tab for visual prominence.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/tabs.md#2025-04-17_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\nmy_tabs_is_emphasized_example = ui.tabs(\n    ui.tab(\"There is no prior chat history with John Doe.\", title=\"John Doe\"),\n    ui.tab(\"There is no prior chat history with Jane Doe.\", title=\"Jane Doe\"),\n    ui.tab(\"There is no prior chat history with Joe Bloggs.\", title=\"Joe Bloggs\"),\n    is_emphasized=True,\n)\n```\n\n----------------------------------------\n\nTITLE: Indeterminate Checkbox State\nDESCRIPTION: Shows how to create a checkbox with an indeterminate state using the is_indeterminate prop.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/checkbox.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\nmy_checkbox_is_indeterminate_example = ui.checkbox(\n    \"Indeterminate State\", is_indeterminate=True\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Dialog Triggers with Various Configurations in Deephaven UI (Python)\nDESCRIPTION: Examples of using ui.dialog_trigger to create different types of dialog components including controlled modal dialogs, dismissable dialogs, popovers, trays, and fullscreen dialogs. Shows how to use boolean state to control dialog visibility.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/DESIGN.md#2025-04-17_snippet_48\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n# Open and closed using flag (controlled)\n@ui.component\ndef open_close_example():\n    is_open, set_open = ui.use_boolean()\n    return ui.dialog_trigger(\n        ui.action_button(\"Open dialog\", on_press=set_open.on),\n        ui.dialog(ui.heading(\"Dialog\"), ui.content(\"Close using the button.\"), ui.button_group(ui.button(\"close\", on_press=set_open.off))),\n        is_open=is_open\n    )\n\nmy_open_close_example = open_close_example()\n\n# Dismissable (uncontrolled)\nmy_dismissable = ui.dialog_trigger(\n        ui.action_button(\"Open dialog\",),\n        ui.dialog(\n            ui.heading(\"Dialog\"),\n            ui.content(\"Dismiss using the X button.\"),\n            ),\n        is_dismissable=True,\n    )\n\n# popover\nmy_popover = ui.dialog_trigger(\n        ui.action_button(\"Open dialog\",),\n        ui.dialog(\n            ui.heading(\"Dialog\"),\n            ui.content(\"Popover.\"),\n            ),\n        type=\"popover\"\n    )\n\n# tray\nmy_tray = ui.dialog_trigger(\n        ui.action_button(\"Open dialog\",),\n        ui.dialog(\n            ui.heading(\"Dialog\"),\n            ui.content(\"Tray.\"),\n            ),\n        type=\"tray\"\n    )\n\n# fullscreen\nmy_fullscreen = ui.dialog_trigger(\n        ui.action_button(\"Open dialog\",),\n        ui.dialog(\n            ui.heading(\"Dialog\"),\n            ui.content(\"Fullscreen.\"),\n            ),\n        type=\"fullscreen\"\n    )\n\n# takeover\nmy_takeover = ui.dialog_trigger(\n        ui.action_button(\"Open dialog\",),\n        ui.dialog(\n            ui.heading(\"Dialog\"),\n            ui.content(\"Fullscreen takeover.\"),\n            ),\n        type=\"fullscreenTakeover\"\n    )\n```\n\n----------------------------------------\n\nTITLE: Creating a List View from a Table in Python with Deephaven UI\nDESCRIPTION: This snippet shows how to create a List View directly from a table using Deephaven UI. It uses the first column as the key and label by default.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/list_view.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui, new_table\nfrom deephaven.column import string_col\n\n_colors = new_table(\n    [\n        string_col(\"Colors\", [\"Red\", \"Blue\", \"Green\"]),\n    ]\n)\n\n@ui.component\ndef ui_list_view_table():\n    return ui.list_view(_colors)\n\nmy_list_view_table = ui_list_view_table()\n```\n\n----------------------------------------\n\nTITLE: Customizing Progress Bar Colors in Python\nDESCRIPTION: This snippet demonstrates how to create progress bars with different colors and backgrounds using the Deephaven UI component system.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/progress_bar.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef color_variants():\n    return ui.flex(\n        ui.view(ui.progress_bar(value=70, margin=\"10px\")),\n        ui.view(\n            ui.progress_bar(value=70, static_color=\"white\", margin=\"10px\"),\n            background_color=\"black\",\n        ),\n        ui.view(\n            ui.progress_bar(value=70, static_color=\"black\", margin=\"10px\"),\n            background_color=\"white\",\n        ),\n        direction=\"column\",\n    )\n\nprogress_bar_color_examples = color_variants()\n```\n\n----------------------------------------\n\nTITLE: Creating Line Plot with Shared Axes in Python using Deephaven Express\nDESCRIPTION: Creates a line plot with shared axes showing population and GDP per capita for Brazil over time. Demonstrates basic plotting of multiple columns on shared axes.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/plotly-express/docs/multiple-axes.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.plot.express as dx\ngapminder = dx.data.gapminder()\n\n# get a specific country\nbrazil = gapminder.where(\"Country == `Brazil`\")\n\n# population and per capita gdp have very different scales and units\nline_plot_shared = dx.line(brazil, x=\"Year\", y=[\"Pop\", \"GdpPerCap\"])\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Action Button in Deephaven UI\nDESCRIPTION: Creates a simple action button with a label and a press handler that prints a message when clicked.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/action_button.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\nbtn = ui.action_button(\"Press me\", on_press=lambda: print(\"Button clicked\"))\n```\n\n----------------------------------------\n\nTITLE: Adding Contextual Help to Date Fields in Python\nDESCRIPTION: Shows how to add contextual help to a date field using the contextual_help prop, which displays additional information next to the label.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/date_field.md#2025-04-17_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\ndate_field_contextual_help_example = ui.date_field(\n    label=\"Sample Label\",\n    contextual_help=ui.contextual_help(ui.heading(\"Content tips\")),\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Quiet Disclosure Component in Python\nDESCRIPTION: This example demonstrates how to create a Disclosure component in a quiet state, which typically has a more subdued visual appearance.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/disclosure.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\nmy_disclosure_disabled = ui.disclosure(title=\"Heading\", panel=\"Content\", is_quiet=True)\n```\n\n----------------------------------------\n\nTITLE: Controlling Focused Date in Calendar with Python\nDESCRIPTION: Demonstrates how to control the focused date in a calendar using 'focused_value' and 'on_focus_change' props, with a reset button.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/calendar.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\nfrom deephaven.time import to_j_local_date\n\ndefault_date = to_j_local_date(\"2021-07-01\")\n\n\n@ui.component\ndef focused_example():\n    value, set_value = ui.use_state(default_date)\n    return ui.flex(\n        ui.action_button(\n            \"Reset focused date\", on_press=lambda: set_value(default_date)\n        ),\n        ui.calendar(focused_value=value, on_focus_change=set_value),\n        direction=\"column\",\n        align_items=\"start\",\n        gap=\"size-200\",\n    )\n\n\nmy_focused_example = focused_example()\n```\n\n----------------------------------------\n\nTITLE: Integrating Number Field with HTML Forms in Python\nDESCRIPTION: This snippet illustrates how to integrate a number field with HTML forms by using the 'name' prop and formatting options for currency display.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/number_field.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\nmy_number_field_name_example = ui.form(\n    ui.number_field(\n        label=\"Withdrawal amount\",\n        name=\"amount\",\n        default_value=45,\n        format_options={\"currency_sign\": \"standard\"},\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing List Action Menu in Python\nDESCRIPTION: Function definition for creating a menu of action buttons within a ListView component with action and open state handlers.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/DESIGN.md#2025-04-17_snippet_36\n\nLANGUAGE: python\nCODE:\n```\ndef list_action_menu(\n    *children: ActionMenuItem,\n    on_action: Callable[[ActionKey, Key], None] | None = None,\n    on_open_change: Callable[[bool, Key], None] | None = None,\n    **props: Any\n) -> ListActionMenuElement:\n```\n\n----------------------------------------\n\nTITLE: Event Handling in Range Calendar\nDESCRIPTION: Demonstrates event handling with on_change prop in a controlled calendar component.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/range_calendar.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef event_example():\n    value, set_value = ui.use_state({\"start\": \"2020-02-03\", \"end\": \"2020-02-08\"})\n    return ui.range_calendar(\n        aria_label=\"Calendar (controlled)\", value=value, on_change=set_value\n    )\n\n\nmy_event_example = event_example()\n```\n\n----------------------------------------\n\nTITLE: HTML Form Integration with Date Range Picker\nDESCRIPTION: Example of integrating date range picker with HTML forms using start_name and end_name props.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/date_range_picker.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\nmy_date_range_picker_forms = ui.form(\n    ui.date_range_picker(\n        label=\"Trip dates\", start_name=\"startDate\", end_name=\"endDate\"\n    ),\n    ui.button(\"Submit\", type=\"submit\"),\n    on_submit=print,\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Animated Line Plot with TableAnimation\nDESCRIPTION: An example demonstrating how to create a line plot that updates whenever a Deephaven time table updates. The plot shows a sine wave that changes over time.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/matplotlib/README.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport matplotlib.pyplot as plt\nfrom deephaven import time_table\nfrom deephaven.plugin.matplotlib import TableAnimation\n\n# Create a ticking table with the sin function\ntt = time_table(\"PT00:00:01\").update([\"x=i\", \"y=Math.sin(x)\"])\n\nfig = plt.figure()  # Create a new figure\nax = fig.subplots()  # Add an axes to the figure\n(line,) = ax.plot(\n    [], []\n)  # Plot a line. Start with empty data, will get updated with table updates.\n\n# Define our update function. We only look at `data` here as the data is already stored in the format we want\ndef update_fig(data, update):\n    line.set_data([data[\"x\"], data[\"y\"]])\n\n    # Resize and scale the axes. Our data may have expanded and we don't want it to appear off screen.\n    ax.relim()\n    ax.autoscale_view(True, True, True)\n\n\n# Create our animation. It will listen for updates on `tt` and call `update_fig` whenever there is an update\nani = TableAnimation(fig, tt, update_fig)\n```\n\n----------------------------------------\n\nTITLE: Integrating Radio Group with HTML Forms in Python\nDESCRIPTION: Demonstrates how to use a radio group within an HTML form using Deephaven's UI framework.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/radio_group.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\nmy_radio_group_name_example = ui.form(\n    ui.radio_group(\n        ui.radio(\"Yes\", value=\"yes\"),\n        ui.radio(\"No\", value=\"no\"),\n        label=\"Is your favorite color blue?\",\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Filtering Lists of Items in Deephaven UI (Python)\nDESCRIPTION: This snippet shows how to filter a list of items based on a specific criteria before rendering them as UI components. It uses the Python filter function to select only vegetables from a list of food items.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/describing/render_lists.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\nfood = [\n    \"apple: fruit\",\n    \"broccoli: vegetable\",\n    \"banana: fruit\",\n    \"yogurt: dairy\",\n    \"carrot: vegetable\",\n]\n\n\n@ui.component\ndef content_list(data, data_type):\n    # filter for items that end with the desired data type\n    filtered = list(filter(lambda item: item.endswith(data_type), data))\n    # map the text items to components\n    components = [ui.text(item) for item in filtered]\n    return ui.flex(components, direction=\"column\")\n\n\nmy_content_list = content_list(food, \"vegetable\")\n```\n\n----------------------------------------\n\nTITLE: Tag Group with Help Text and Validation\nDESCRIPTION: Implements help text, error messages, and validation using description, error_message, and is_invalid props.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/tag_group.md#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef tag_group_help_text_example():\n    items, set_items = ui.use_state(\n        [\n            ui.item(\"News\", key=\"news\"),\n            ui.item(\"Travel\", key=\"travel\"),\n            ui.item(\"Gaming\", key=\"gaming\"),\n            ui.item(\"Shopping\", key=\"shopping\"),\n        ]\n    )\n\n    return (\n        ui.tag_group(\n            *items,\n            on_remove=lambda keys: set_items(\n                [item for item in items if item.key not in keys]\n            ),\n            is_invalid=len(items) > 3,\n            description=\"Please include tags for related categories.\",\n            error_message=\"Must contain no more than 3 tags. Please remove some.\",\n        ),\n    )\n\n\nmy_tag_group_help_text_example = tag_group_help_text_example()\n```\n\n----------------------------------------\n\nTITLE: Creating Quiet Action Menus for Subtle UI Integration\nDESCRIPTION: Shows how to create an action menu in a 'quiet' state using the is_quiet property. This reduces the visual prominence of the menu to avoid distracting from surrounding content.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/action_menu.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\nmy_action_menu_basic = ui.action_menu(\"Cut\", \"Copy\", \"Paste\", is_quiet=True)\n```\n\n----------------------------------------\n\nTITLE: Emphasized Checkbox Group\nDESCRIPTION: Demonstrates how to create an emphasized checkbox group with accent color highlighting.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/checkbox_group.md#2025-04-17_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\nmy_checkbox_group_is_emphasized_example = ui.checkbox_group(\n    \"Soccer\",\n    \"Basketball\",\n    \"Baseball\",\n    label=\"Favorite sports\",\n    is_emphasized=True,\n)\n```\n\n----------------------------------------\n\nTITLE: Required Checkbox Groups with Necessity Indicators\nDESCRIPTION: Shows how to implement required checkbox groups with different necessity indicators.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/checkbox_group.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef ui_checkbox_group_required_examples():\n    return [\n        ui.checkbox_group(\n            ui.checkbox(\"Wizard\", value=\"wizard\"),\n            ui.checkbox(\"Dragon\", value=\"dragon\"),\n            label=\"Favorite avatars\",\n            is_required=True,\n        ),\n        ui.checkbox_group(\n            ui.checkbox(\"Wizard\", value=\"wizard\"),\n            ui.checkbox(\"Dragon\", value=\"dragon\"),\n            label=\"Favorite avatars\",\n            is_required=True,\n            necessity_indicator=\"label\",\n        ),\n        ui.checkbox_group(\n            ui.checkbox(\"Wizard\", value=\"wizard\"),\n            ui.checkbox(\"Dragon\", value=\"dragon\"),\n            label=\"Favorite avatars\",\n            necessity_indicator=\"label\",\n        ),\n    ]\n\nmy_checkbox_group_required_examples = ui_checkbox_group_required_examples()\n```\n\n----------------------------------------\n\nTITLE: Text Area with Contextual Help\nDESCRIPTION: Adds contextual help to a text area using the contextual_help prop.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/text_area.md#2025-04-17_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\ntext_area_contextual_help_example = ui.text_area(\n    label=\"Comment\", contextual_help=ui.contextual_help(ui.heading(\"Sample tips\"))\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Switch in Deephaven UI\nDESCRIPTION: Demonstrates how to create a simple switch component with a label.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/switch.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\nmy_switch_basic = ui.switch(\"Low power mode\")\n```\n\n----------------------------------------\n\nTITLE: Implementing an Event-Driven Disclosure Component in Python\nDESCRIPTION: This example shows how to create a Disclosure component with an event handler for expansion/collapse actions. It uses a custom component and state management to toggle the disclosure and display its current state.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/disclosure.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef ui_toggle_disclosure():\n    is_expanded, set_is_expanded = ui.use_state(False)\n\n    return ui.flex(\n        ui.disclosure(\n            title=\"Heading\",\n            panel=\"Content\",\n            is_expanded=is_expanded,\n            on_expanded_change=lambda: set_is_expanded(not is_expanded),\n        ),\n        ui.text(\"Disclosure is \", \"expanded\" if is_expanded else \"collapsed\"),\n        direction=\"column\",\n    )\n\n\nmy_toggle_disclosure = ui_toggle_disclosure()\n```\n\n----------------------------------------\n\nTITLE: Custom Width Text Field Implementation\nDESCRIPTION: Shows how to customize text field width using fixed sizes and percentage-based maximum widths.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/text_field.md#2025-04-17_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef ui_text_field_width_examples():\n    return [\n        ui.text_field(label=\"Favorite animal\", width=\"size-3600\"),\n        ui.text_field(label=\"Favorite animal\", width=\"size-3600\", max_width=\"100%\"),\n    ]\n\nmy_text_field_width_examples = ui_text_field_width_examples()\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum Date for Calendar in Python\nDESCRIPTION: Creates a calendar that only accepts dates after today using the 'min_value' prop.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/calendar.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\nfrom deephaven.time import dh_today\n\n\nmy_calendar_min_value_example = ui.calendar(\n    aria_label=\"Appointment Date\", min_value=dh_today()\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Disabled Disclosure Component in Python\nDESCRIPTION: This snippet shows how to create a Disclosure component in a disabled state, preventing user interaction.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/disclosure.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\nmy_disclosure_disabled = ui.disclosure(\n    title=\"Heading\", panel=\"Content\", is_disabled=True\n)\n```\n\n----------------------------------------\n\nTITLE: Toggle Button with Icon and Text - Python\nDESCRIPTION: Creates a toggle button that combines both an icon and text label.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/toggle_button.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\nmy_toggle_button = ui.toggle_button(ui.icon(\"pin\"), ui.text(\"Pin content\"))\n```\n\n----------------------------------------\n\nTITLE: Using App-Specific Event Handler Names in Deephaven UI\nDESCRIPTION: Shows how to name event handlers using domain-specific terminology that describes the application action rather than the UI event, improving flexibility and maintainability.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/add-interactivity/respond-to-events.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef custom_button(*children, on_press):\n    return ui.button(children, on_press=on_press)\n\n\n@ui.component\ndef toolbar(on_play_movie, on_upload_image):\n    return [\n        custom_button(\"Play Movie\", on_press=on_play_movie),\n        custom_button(\"Upload Image\", on_press=on_upload_image),\n    ]\n\n\n@ui.component\ndef app():\n    return toolbar(\n        on_play_movie=lambda: print(\"Playing!\"),\n        on_upload_image=lambda: print(\"Uploading!\"),\n    )\n\n\napp_example = app()\n```\n\n----------------------------------------\n\nTITLE: Accessible Toggle Button - Python\nDESCRIPTION: Implements a toggle button with accessibility features using aria_label for screen readers.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/toggle_button.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\nmy_toggle_button_accessibility_example = ui.toggle_button(\n    ui.icon(\"pin\"), aria_label=\"pin content\"\n)\n```\n\n----------------------------------------\n\nTITLE: Handling List View Selection Changes in Python with Deephaven UI\nDESCRIPTION: This snippet shows how to handle selection changes in a List View by using the on_change callback.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/list_view.md#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui, new_table\nfrom deephaven.column import string_col\n\n_table = new_table(\n    [\n        string_col(\"Keys\", [\"key-0\", \"key-1\", \"key-2\"]),\n        string_col(\"Labels\", [\"Option 0\", \"Option 1\", \"Option 2\"]),\n    ]\n)\n\n@ui.component\ndef ui_list_view_selection():\n    value, set_value = ui.use_state([\"key-2\"])\n\n    def handle_change(e):\n        set_value(e)\n        print(\"Selection: \" + \", \".join(map(str, e)))\n\n    source = ui.item_table_source(\n        _table,\n        key_column=\"Keys\",\n        label_column=\"Labels\",\n    )\n    lv = ui.list_view(source, on_change=handle_change)\n\n    return lv\n\nmy_list_view_selection = ui_list_view_selection()\n```\n\n----------------------------------------\n\nTITLE: Adjusting Color Picker Rounding in Python\nDESCRIPTION: Demonstrates different rounding options for color pickers including none, default, and full. The example uses a custom component to display multiple pickers with different rounding settings.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/color_picker.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef ui_color_picker_rounding():\n    value, set_value = ui.use_state(\"#65C4D7\")\n\n    return [\n        ui.color_picker(label=\"None\", default_value=\"#65C4D7\", rounding=\"none\"),\n        ui.color_picker(label=\"Default\", default_value=\"#FAD35B\", rounding=\"default\"),\n        ui.color_picker(label=\"Full\", default_value=\"#EE5D82\", rounding=\"full\"),\n    ]\n\n\nmy_color_picker_rounding = ui_color_picker_rounding()\n```\n\n----------------------------------------\n\nTITLE: HTML Form Integration with Slider\nDESCRIPTION: Demonstrates how to integrate a slider component with HTML forms using the name prop.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/slider.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\nmy_slider_name_example = ui.form(\n    ui.slider(label=\"Opacity\", default_value=50, name=\"opacity\")\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Disabled Logic Button in Python\nDESCRIPTION: This example shows how to create a disabled Logic Button by setting the is_disabled parameter to True.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/logic_button.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\nmy_logic_button_disabled = ui.logic_button(\"Or\", variant=\"or\", is_disabled=True)\n```\n\n----------------------------------------\n\nTITLE: Creating a Justified Action Group\nDESCRIPTION: Demonstrates how to create a justified action group using the is_justified prop, which evenly divides all available horizontal space among the action items.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/action_group.md#2025-04-17_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\nmy_action_group_is_justified_example = ui.flex(\n    ui.action_group(\n        ui.item(ui.icon(\"edit\")),\n        ui.item(ui.icon(\"copy\")),\n        ui.item(ui.icon(\"trash\")),\n        is_justified=True,\n        density=\"compact\",\n    ),\n    width=\"size-3000\",\n    direction=\"column\",\n)\n```\n\n----------------------------------------\n\nTITLE: Rendering Data from Lists in Deephaven UI (Python)\nDESCRIPTION: This snippet demonstrates how to create a list of UI components from a data list using list comprehension in Deephaven UI. It converts a list of food items into a column of text components.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/describing/render_lists.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\nfood = [\n    \"apple: fruit\",\n    \"broccoli: vegetable\",\n    \"banana: fruit\",\n    \"yogurt: dairy\",\n    \"carrot: vegetable\",\n]\n\n\n@ui.component\ndef content_list(data):\n    # map the text items to components\n    components = [ui.text(item) for item in data]\n    return ui.flex(components, direction=\"column\")\n\n\nmy_content_list = content_list(food)\n```\n\n----------------------------------------\n\nTITLE: Nesting Panels in Dashboard Layout\nDESCRIPTION: Shows how to nest multiple panels within a dashboard layout. Creates two panels labeled 'A' and 'B' and arranges them using ui.dashboard.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/panel.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\nmy_nested_panel = ui.dashboard([ui.panel(\"A\"), ui.panel(\"B\")])\n```\n\n----------------------------------------\n\nTITLE: Date Field Event Handling\nDESCRIPTION: Example of handling date field events with onChange prop and state management.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/date_field.md#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef event_example():\n    value, set_value = ui.use_state(\"2020-02-03\")\n    return ui.date_field(\n        label=\"Date field (controlled)\", value=value, on_change=set_value\n    )\n\nmy_event_example = event_example()\n```\n\n----------------------------------------\n\nTITLE: Implementing Link Variants - Python\nDESCRIPTION: Demonstrates different link styling variants (primary and secondary) using the variant property.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/link.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef ui_link_variant_examples():\n    return [\n        ui.link(\"Deephaven\", href=\"https://deephaven.io/\", variant=\"primary\"),\n        ui.link(\n            \"Contact the team\",\n            href=\"https://deephaven.io/contact\",\n            variant=\"secondary\",\n        ),\n    ]\n\n\nmy_link_variant_examples = ui_link_variant_examples()\n```\n\n----------------------------------------\n\nTITLE: Checkbox with Label Content\nDESCRIPTION: Demonstrates creating a checkbox with basic label content.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/checkbox.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\nmy_checkbox_basic = ui.checkbox(\"Basic Checkbox\")\n```\n\n----------------------------------------\n\nTITLE: Handling Selection Change Events in Action Group\nDESCRIPTION: Shows how to handle selection change events in an action group using the on_selection_change property.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/action_group.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef ui_action_group_on_change_example():\n    selected_option, set_selected_option = ui.use_state(\"\")\n    return [\n        ui.action_group(\n            ui.item(\"Grid view\", key=\"grid\"),\n            ui.item(\"List view\", key=\"list\"),\n            ui.item(\"Gallery view\", key=\"gallery\"),\n            selection_mode=\"single\",\n            on_selection_change=set_selected_option,\n        ),\n        ui.text(f\"You have selected: {selected_option}\"),\n    ]\n\n\nmy_action_group_on_change_example = ui_action_group_on_change_example()\n```\n\n----------------------------------------\n\nTITLE: Date Range Picker Labeling Options\nDESCRIPTION: Demonstrates different labeling options including required indicators.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/date_range_picker.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\nmy_date_range_picker_labeling = ui.flex(\n    ui.date_range_picker(label=\"Date range\"),\n    ui.date_range_picker(\n        label=\"Date range\", is_required=True, necessity_indicator=\"icon\"\n    ),\n    ui.date_range_picker(\n        label=\"Date range\", is_required=True, necessity_indicator=\"label\"\n    ),\n    ui.date_range_picker(label=\"Date range\", necessity_indicator=\"label\"),\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Sectioned Combo Boxes in Deephaven UI\nDESCRIPTION: Demonstrates how to create combo boxes with sections, both using explicit item definitions and direct option strings. Shows two different approaches to organizing dropdown content.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/DESIGN.md#2025-04-17_snippet_52\n\nLANGUAGE: python\nCODE:\n```\ncombo_box5 = ui.combo_box(\n    ui.section(\n        ui.item(\"Option 1\"),\n        ui.item(\"Option 2\"),\n        title=\"Section 1\"\n    ),\n    ui.section(\n        ui.item(\"Option 3\"),\n        ui.item(\"Option 4\"),\n        title=\"Section 2\"\n    )\n)\n\ncombo_box6 = ui.combo_box(\n    ui.section(\n        \"Option 1\",\n        \"Option 2\",\n    ),\n    ui.section(\n        \"Option 3\",\n        \"Option 4\",\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Tag Group with Row Limit\nDESCRIPTION: Demonstrates how to limit the number of visible rows using the max_rows prop.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/tag_group.md#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\ntag_group_max_rows_example = ui.flex(\n    ui.view(\n        ui.tag_group(\n            ui.item(\"News\", key=\"news\"),\n            ui.item(\"Travel\", key=\"travel\"),\n            ui.item(\"Gaming\", key=\"gaming\"),\n            ui.item(\"Shopping\", key=\"shopping\"),\n        ),\n        border_width=\"thin\",\n        border_color=\"accent-400\",\n        width=\"size-2000\",\n    ),\n    ui.view(\n        ui.tag_group(\n            ui.item(\"News\", key=\"news\"),\n            ui.item(\"Travel\", key=\"travel\"),\n            ui.item(\"Gaming\", key=\"gaming\"),\n            ui.item(\"Shopping\", key=\"shopping\"),\n            max_rows=1,\n        ),\n        border_width=\"thin\",\n        border_color=\"accent-400\",\n        width=\"size-2000\",\n    ),\n    direction=\"column\",\n)\n```\n\n----------------------------------------\n\nTITLE: Text Field Label Position Examples\nDESCRIPTION: Demonstrates different label positions for text fields including top and side positioning.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/text_field.md#2025-04-17_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef ui_text_field_label_position_examples():\n    return [\n        ui.text_field(label=\"Sample Label\"),\n        ui.text_field(label=\"Sample Label\", label_position=\"side\", label_align=\"start\"),\n    ]\n\nmy_text_field_label_position_examples = ui_text_field_label_position_examples()\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Prop Variations in deephaven.ui Components\nDESCRIPTION: Illustrates different ways of passing props to components, including positional arguments as children and keyword arguments as React props.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/architecture.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\nmy_prop_variations = ui.flex(\"Hello\", \"World\", direction=\"column\")\nfooter_as_positional = ui.contextual_help(\"Heading\", \"Content\", \"Footer\")\nfooter_as_keyword = ui.contextual_help(\"Heading\", \"Content\", footer=\"Footer\")\n```\n\n----------------------------------------\n\nTITLE: Quiet Text Area Implementation\nDESCRIPTION: Creates a text area with quiet styling for minimal visual impact.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/text_area.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\ntext_area_is_quiet_example = ui.text_area(label=\"Sample\", is_quiet=True)\n```\n\n----------------------------------------\n\nTITLE: Optimized Form with Derived Values in Deephaven UI (Python)\nDESCRIPTION: Improved version of the name input form that eliminates redundant state. Instead of storing full_name in state, it is calculated during rendering from the first_name and last_name state values.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/managing-state/choose-the-state-structure.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef name_input():\n    first_name, set_first_name = ui.use_state(\"\")\n    last_name, set_last_name = ui.use_state(\"\")\n\n    def handle_first_name_change(value):\n        set_first_name(value)\n\n    def handle_last_name_change(value):\n        set_last_name(value)\n\n    full_name = f\"{first_name} {last_name}\"\n\n    return [\n        ui.heading(\"Check in\"),\n        ui.text_field(\n            label=\"First Name\", value=first_name, on_change=handle_first_name_change\n        ),\n        ui.text_field(\n            label=\"Last Name\", value=last_name, on_change=handle_last_name_change\n        ),\n        ui.text(f\"You are checking in: {full_name}\"),\n    ]\n\n\nname_input_example = name_input()\n```\n\n----------------------------------------\n\nTITLE: Creating a Read-Only Form in Deephaven UI (Python)\nDESCRIPTION: Demonstrates how to create a form with read-only fields, allowing focus but preventing user input.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/form.md#2025-04-17_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef ui_form_read_only():\n    return ui.form(\n        ui.text_field(name=\"name\", label=\"Name\"),\n        is_read_only=True,\n    )\n\nmy_form_read_only = ui_form_read_only()\n```\n\n----------------------------------------\n\nTITLE: Creating Scatter Plot with Symbol Grouping\nDESCRIPTION: Creates a scatter plot where different species are represented by different symbols instead of colors.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/plotly-express/docs/plot-by.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.plot.express as dx\niris = dx.data.iris() # import the example iris data set\n\n# use different symbols to denote different groups\npedal_size_by_species_sym = dx.scatter(iris, x=\"PetalLength\", y=\"PetalWidth\", symbol=\"Species\")\n```\n\n----------------------------------------\n\nTITLE: Basic Button Implementation in Python\nDESCRIPTION: Creates a basic button with a click handler that prints to console when pressed.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/button.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\nbtn = ui.button(\"Press me\", on_press=lambda: print(\"Button clicked\"))\n```\n\n----------------------------------------\n\nTITLE: Icon Coloring in Deephaven UI\nDESCRIPTION: Demonstrates how to apply semantic colors to icons using the 'color' property.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/icon.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef icons():\n    negative = ui.icon(\"bell\", color=\"negative\")\n    informative = ui.icon(\"bell\", color=\"informative\")\n    positive = ui.icon(\"bell\", color=\"positive\")\n\n    return [negative, informative, positive]\n\n\nmy_icons = icons()\n```\n\n----------------------------------------\n\nTITLE: Tag Group with Contextual Help\nDESCRIPTION: Shows how to add contextual help information using the contextual_help prop.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/tag_group.md#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\ntag_group_contextual_help_example = ui.tag_group(\n    ui.item(\"News\", key=\"news\"),\n    ui.item(\"Travel\", key=\"travel\"),\n    ui.item(\"Gaming\", key=\"gaming\"),\n    ui.item(\"Shopping\", key=\"shopping\"),\n    label=\"Categories\",\n    contextual_help=ui.contextual_help(\n        heading=\"Hint\", content=\"Pick your favorite category\"\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Date Field Labeling and Required States\nDESCRIPTION: Demonstrates different labeling options and required state indicators for date fields.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/date_field.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\nmy_date_field_labeling = ui.flex(\n    ui.date_field(label=\"Date field\"),\n    ui.date_field(label=\"Date field\", is_required=True, necessity_indicator=\"icon\"),\n    ui.date_field(label=\"Date field\", is_required=True, necessity_indicator=\"label\"),\n    ui.date_field(label=\"Date field\", necessity_indicator=\"label\"),\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Quiet State Accordion in Deephaven UI (Python)\nDESCRIPTION: This snippet demonstrates how to create an accordion in a quiet state using the is_quiet prop. The quiet state typically reduces visual emphasis on the accordion, making it less prominent in the UI.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/accordion.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\nmy_accordion_quiet = ui.accordion(\n    ui.disclosure(title=\"FAQ #1\", panel=\"Answer\"),\n    ui.disclosure(title=\"FAQ #2\", panel=\"Answer\"),\n    is_quiet=True,\n)\n```\n\n----------------------------------------\n\nTITLE: Basic Icon Usage in Deephaven UI\nDESCRIPTION: Demonstrates how to create a basic icon component using the 'filter' icon.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/icon.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef icons():\n    icon = ui.icon(\"filter\")\n\n    return icon\n\n\nmy_icons = icons()\n```\n\n----------------------------------------\n\nTITLE: Implementing Date Pickers with Various Configurations in Python\nDESCRIPTION: This code demonstrates multiple examples of creating date pickers with various configurations using the Deephaven UI library. Examples include controlled and uncontrolled date pickers with different date types (LocalDate, Instant, ZonedDateTime), granularity settings, min/max value constraints, and unavailable date specifications.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/DESIGN.md#2025-04-17_snippet_44\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.ui as ui\nfrom deephaven.time import to_j_local_date, dh_today, to_j_instant, to_j_zdt\n\nzoned_date_time = to_j_zdt(\"1995-03-22T11:11:11.23142 America/New_York\")\ninstant = to_j_instant(\"2022-01-01T00:00:00 ET\")\nlocal_date = to_j_local_date(dh_today())\n\n# simple date picker that takes ui.items and is uncontrolled\n# this creates a date picker with a granularity of days with a default value of today\ndate_picker1 = ui.date_picker(\n    default_value=local_date\n)\n\n# simple date picker that takes list view items directly and is controlled\n# this creates a date picker with a granularity of seconds in UTC\n# the on_change handler is passed an instant\ndate, set_date = ui.use_state(instant)\n\ndate_picker2 = ui.date_picker(\n    value=date,\n    on_change=set_date\n)\n\n# this creates a date picker with a granularity of seconds in the specified time zone\n# the on_change handler is passed a zoned date time\ndate, set_date = ui.use_state(None)\n\ndate_picker3 = ui.date_picker(\n    placeholder_value=zoned_date_time,\n    on_change=set_date\n)\n\n# this creates a date picker with a granularity of seconds in UTC\n# the on_change handler is passed an instant\ndate, set_date = ui.use_state(None)\n\ndate_picker4 = ui.date_picker(\n    placeholder_value=instant,\n    on_change=set_date\n)\n\n# this creates a date picker with a granularity of days\n# the on_change handler is passed a local date\ndate, set_date = ui.use_state(None)\n\ndate_picker5 = ui.date_picker(\n    placeholder_value=local_date,\n    on_change=set_date\n)\n\n# this creates a date picker with a granularity of days, but the on_change handler is still passed an instant\ndate, set_date = ui.use_state(None)\n\ndate_picker6 = ui.date_picker(\n    placeholder_value=instant,\n    granularity=\"day\",\n    on_change=set_date\n)\n\n# this creates a date picker with a granularity of seconds and the on_change handler is passed an instant\ndate, set_date = ui.use_state(None)\n\ndate_picker7 = ui.date_picker(\n    on_change=set_date\n)\n\n# this create a date picker with a granularity of days, a min and max value, and unavailable dates\nmin_value = to_j_local_date(\"2022-01-01\")\nmax_value = to_j_local_date(\"2022-12-31\")\nunavailable_dates = [to_j_local_date(\"2022-03-15\"), to_j_local_date(\"2022-03-17\")]\ndate, set_date = ui.use_state(to_j_local_date(\"2022-03-16\"))\ndate_picker8 = ui.date_picker(\n    value=date,\n    min_value=min_value,\n    max_value=max_value,\n    unavailable_values=unavailable_dates,\n    on_change=set_date\n)\n```\n\n----------------------------------------\n\nTITLE: Nested Dictionary State Initialization\nDESCRIPTION: Example of initializing state with a nested dictionary structure.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/add-interactivity/update-dictionaries-in-state.md#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nperson, set_person = ui.use_state(\n    {\n        \"first_name\": \"John\",\n        \"last_name\": \"Doe\",\n        \"contact\": {\"email\": \"jondoe@domain.com\", \"phone\": \"555-5555\"},\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Page Behavior in Multi-Month Calendar with Python\nDESCRIPTION: Demonstrates how to set the page behavior to 'single' for a multi-month calendar, allowing pagination by single months.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/calendar.md#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\nmy_calendar_page_behavior_example = ui.calendar(\n    visible_months=3, page_behavior=\"single\"\n)\n```\n\n----------------------------------------\n\nTITLE: HTML Form Integration with Text Field\nDESCRIPTION: Shows how to integrate a text field with HTML forms using the name property.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/text_field.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\nmy_text_field_name_example = ui.form(\n    ui.text_field(label=\"Email\", name=\"email\", type=\"email\")\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Quiet Action Button in Deephaven UI\nDESCRIPTION: Creates an action button with a quiet visual style that has no visible background until interaction, useful in clear layouts like vertical stacks, tables, or grids.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/action_button.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\nbtn = ui.action_button(\"Quiet button\", is_quiet=True)\n```\n\n----------------------------------------\n\nTITLE: State Structure Comparison in Deephaven UI\nDESCRIPTION: Code snippet demonstrating the difference between duplicated state (storing both items and selected_item) and non-duplicated state (storing items and just selected_id) in a Deephaven UI component.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/managing-state/choose-the-state-structure.md#2025-04-17_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nitems = [{\"title\": \"peanuts\", \"id\": 0}, ...]\nselected_item = {\"title\": \"peanuts\", \"id\": 0}\n```\n\n----------------------------------------\n\nTITLE: Basic Fragment Usage in Python with Deephaven UI\nDESCRIPTION: Demonstrates basic usage of the fragment component to group multiple text elements without adding extra DOM nodes.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/fragment.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\nmy_fragment = ui.fragment(ui.text(\"Child 1\"), ui.text(\"Child 2\"))\n```\n\n----------------------------------------\n\nTITLE: Basic Progress Circle Implementation in Python\nDESCRIPTION: Shows how to create a basic indeterminate progress circle using Deephaven UI components.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/progress_circle.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef ui_progress_circle():\n    return ui.progress_circle(is_indeterminate=True)\n\nprogress_circle = ui_progress_circle()\n```\n\n----------------------------------------\n\nTITLE: Toggle Button Event Handling - Python\nDESCRIPTION: Shows how to handle toggle button state changes with an on_change event handler.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/toggle_button.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef ui_toggle_button_on_change_example():\n    is_selected, set_is_selected = ui.use_state(False)\n    return [\n        ui.toggle_button(\n            \"Pin\",\n            is_selected=is_selected,\n            on_change=set_is_selected,\n        ),\n        ui.text(\n            f\"The toggle button is: `{'selected' if is_selected else 'not selected'}`\"\n        ),\n    ]\n\n\nmy_toggle_button_on_change_example = ui_toggle_button_on_change_example()\n```\n\n----------------------------------------\n\nTITLE: Tag Group with Links\nDESCRIPTION: Demonstrates how to create tags with external links using href and target props.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/tag_group.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\ntag_group_links_example = ui.tag_group(\n    ui.item(\"Adobe\", key=\"adobe\", href=\"https://adobe.com/\", target=\"_blank\"),\n    ui.item(\"Apple\", key=\"apple\", href=\"https://apple.com/\", target=\"_blank\"),\n    ui.item(\"Google\", key=\"google\", href=\"https://google.com/\", target=\"_blank\"),\n)\n```\n\n----------------------------------------\n\nTITLE: Tag Group with Side Label Position\nDESCRIPTION: Shows how to position the label to the side of the tag group using label_position prop.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/tag_group.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\ntag_group_label_example = ui.tag_group(\n    ui.item(\"News\", key=\"news\"),\n    ui.item(\"Travel\", key=\"travel\"),\n    ui.item(\"Gaming\", key=\"gaming\"),\n    ui.item(\"Shopping\", key=\"shopping\"),\n    label=\"Categories\",\n    label_position=\"side\",\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Heatmap Grid Size and Range in Python\nDESCRIPTION: Demonstrates how to customize the number of bins and axis ranges in a density heatmap, setting 20 bins for both axes and a custom x-axis range.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/plotly-express/docs/density_heatmap.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.plot.express as dx\niris = dx.data.iris()\n\n# Create a density heatmap with 20 bins on each axis and a range from 3 to the maximum value for the x-axis.\n# None is used to specify an upper bound of the maximum value.\nheatmap_bins = dx.density_heatmap(\n    iris,\n    x=\"PetalLength\",\n    y=\"PetalWidth\",\n    nbinsx=20,\n    nbinsy=20,\n    range_bins_x=[3, None],\n)\n```\n\n----------------------------------------\n\nTITLE: TimeField Usage Examples in Python\nDESCRIPTION: Comprehensive examples showing different ways to use the TimeField component with various time types including LocalTime, Instant, and ZonedDateTime.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/DESIGN.md#2025-04-17_snippet_72\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.ui as ui\nfrom deephaven.time import to_j_local_time, to_j_instant, to_j_zdt\n\nzoned_date_time = to_j_zdt(\"1995-03-22T11:11:11.23142 America/New_York\")\ninstant = to_j_instant(\"2022-01-01T00:00:00 ET\")\nlocal_time = to_j_local_time(\"12:30:45\")\n\n# simple time field that takes ui.items and is uncontrolled\ntime_field1 = ui.time_field(\n    default_value=local_time\n)\n\n# simple time field that takes list view items directly and is controlled\n# this creates a time field with a granularity of seconds in UTC\n# the on_change handler is passed an instant\ntime, set_time = ui.use_state(instant)\n\ntime_field2 = ui.time_field(\n    value=time,\n    on_change=set_time\n)\n\n# this creates a time field with a granularity of seconds in the specified time zone\n# the on_change handler is passed a zoned date time\ntime, set_time = ui.use_state(None)\n\ntime_field3 = ui.time_field(\n    placeholder_value=zoned_date_time,\n    on_change=set_time\n)\n\n# this creates a time field with a granularity of seconds in UTC\n# the on_change handler is passed an instant\ntime, set_time = ui.use_state(None)\n\ntime_field4 = ui.time_field(\n    placeholder_value=instant,\n    on_change=set_time\n)\n\n# this creates a time field with a granularity of seconds\n# the on_change handler is passed a local time\ntime, set_time = ui.use_state(None)\n\ntime_field5 = ui.time_field(\n    placeholder_value=local_time,\n    on_change=set_time\n)\n\n# this creates a time field with a granularity of hours, but the on_change handler is still passed an instant\ntime, set_time = ui.use_state(None)\n\ntime_field6 = ui.time_field(\n    placeholder_value=instant,\n    granularity=\"hour\",\n    on_change=set_time\n)\n\n# this creates a time field with a granularity of seconds and the on_change handler is passed an instant\ntime, set_time = ui.use_state(None)\n\ntime_field7 = ui.time_field(\n    on_change=set_time\n)\n```\n\n----------------------------------------\n\nTITLE: Label Position Configuration in Date Range Picker\nDESCRIPTION: Demonstrates different label positioning options for date range picker.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/date_range_picker.md#2025-04-17_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef date_range_picker_label_position_examples():\n    return [\n        ui.date_range_picker(\n            label=\"Test Label\",\n        ),\n        ui.date_range_picker(\n            label=\"Test Label\",\n            label_position=\"side\",\n        ),\n    ]\n\nmy_date_range_picker_label_position_examples = (\n    date_range_picker_label_position_examples()\n)\n```\n\n----------------------------------------\n\nTITLE: Disabled Text Field Implementation\nDESCRIPTION: Creates a disabled text field that prevents user interaction.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/text_field.md#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\nmy_text_field_is_disabled_example = ui.text_field(\n    label=\"Favorite animal\", is_disabled=True\n)\n```\n\n----------------------------------------\n\nTITLE: Combo Box Function Signature for Deephaven UI (Python)\nDESCRIPTION: Function signature for the ui.combo_box component which allows searching or selecting from a list. Shows supported parameter types including Item, SectionElement, Table, PartitionedTable, and ItemTableSource.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/DESIGN.md#2025-04-17_snippet_49\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.ui as ui\nui.combo_box(\n    *children: Item | SectionElement | Table | PartitionedTable | ItemTableSource,\n    default_selected_key: Key | None = None,\n    selected_key: Key | None = None,\n    input_value: str | None = None,\n    default_input_value: str | None = None,\n    on_input_change: Callable[[str], None] | None = None,\n    on_selection_change: Callable[[Key], None] | None = None,\n    on_change: Callable[[Key], None] | None = None,\n    on_open_change: Callable[[bool, MenuTriggerAction], None] | None = None,\n    **props: Any\n) -> ComboBoxElement\n```\n\n----------------------------------------\n\nTITLE: Quiet Toggle Button - Python\nDESCRIPTION: Creates a toggle button with quiet styling for minimal visual impact.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/toggle_button.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\nmy_toggle_button_is_quiet_example = ui.toggle_button(\n    \"Pin\",\n    is_quiet=True,\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Disabled Action Button in Deephaven UI\nDESCRIPTION: Creates an action button in a disabled state, preventing user interaction while keeping the button visible in the interface.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/action_button.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\nbtn = ui.action_button(\"Disabled button\", is_disabled=True)\n```\n\n----------------------------------------\n\nTITLE: Setting Default Selected Keys in Action Group\nDESCRIPTION: Shows how to set default selected keys for uncontrolled selections in an action group.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/action_group.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\nmy_action_group_default_selected_keys_example = ui.action_group(\n    ui.item(\"Grid view\", key=\"grid\"),\n    ui.item(\"List view\", key=\"list\"),\n    ui.item(\"Gallery view\", key=\"gallery\"),\n    selection_mode=\"single\",\n    default_selected_keys=[\"list\"],\n)\n```\n\n----------------------------------------\n\nTITLE: Basic Toast Implementation in Python\nDESCRIPTION: Shows how to create a basic toast notification using a button trigger.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/toast.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\nbtn = ui.button(\n    \"Show toast\",\n    on_press=lambda: ui.toast(\"Toast is done!\"),\n    variant=\"primary\",\n)\n```\n\n----------------------------------------\n\nTITLE: Creating an Emphasized Switch in Deephaven UI\nDESCRIPTION: Demonstrates how to create an emphasized switch using the is_emphasized prop for visual prominence.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/switch.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\nmy_switch_is_emphasized_example = ui.switch(\"Switch Label\", is_emphasized=True)\n```\n\n----------------------------------------\n\nTITLE: Date Range Picker Types Example\nDESCRIPTION: Demonstrates different date type implementations including ZonedDateTime, Instant, and LocalDate with a component function.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/date_range_picker.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\nfrom deephaven.time import to_j_local_date, dh_today, to_j_instant, to_j_zdt\n\n@ui.component\ndef date_range_picker_example(start, end):\n    dates, set_dates = ui.use_state({\"start\": start, \"end\": end})\n    return [ui.date_range_picker(on_change=set_dates, value=dates), ui.text(str(dates))]\n\nzdt_start = to_j_zdt(\"1995-03-22T11:11:11.23142 America/New_York\")\nzdt_end = to_j_zdt(\"1995-03-25T11:11:11.23142 America/New_York\")\ninstant_start = to_j_instant(\"2022-01-01T00:00:00 ET\")\ninstant_end = to_j_instant(\"2022-01-05T00:00:00 ET\")\nlocal_start = to_j_local_date(\"2024-05-06\")\nlocal_end = to_j_local_date(\"2024-05-10\")\n\nmy_zoned_example = date_range_picker_example(zdt_start, zdt_end)\nmy_instant_example = date_range_picker_example(instant_start, instant_end)\nmy_local_example = date_range_picker_example(local_start, local_end)\n```\n\n----------------------------------------\n\nTITLE: Multi-month Range Calendar\nDESCRIPTION: Displays multiple months in the range calendar using visible_months property.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/range_calendar.md#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\nmy_range_calendar_visible_months_example = ui.range_calendar(\n    visible_months=3,\n)\n```\n\n----------------------------------------\n\nTITLE: Optimizing Server Connection with use_callback Hook in Python\nDESCRIPTION: Demonstrates the use of the use_callback hook to memoize a server creation function. The component also uses use_state for theme management and use_effect for connection handling.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/describing/use_hooks.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\nimport time\n\n@ui.component\ndef ui_server():\n    theme, set_theme = ui.use_state(\"red\")\n\n    create_server = ui.use_callback(lambda: {\"host\": \"localhost\"}, [])\n\n    def connect():\n        server = create_server()\n        print(f\"Connecting to {server}\")\n        time.sleep(0.5)\n\n    ui.use_effect(connect, [create_server])\n\n    return ui.view(\n        ui.picker(\n            \"red\",\n            \"orange\",\n            \"yellow\",\n            label=\"Theme\",\n            selected_key=theme,\n            on_change=set_theme,\n        ),\n        padding=\"size-100\",\n        background_color=theme,\n    )\n\nmy_server = ui_server()\n```\n\n----------------------------------------\n\nTITLE: Progress Circle Color Customization\nDESCRIPTION: Shows how to customize progress circle colors using the static_color prop with different background combinations.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/progress_circle.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef color_variants():\n    return ui.view(\n        ui.flex(\n            ui.view(ui.progress_circle(value=70, margin=\"10px\")),\n            ui.view(\n                ui.progress_circle(value=70, static_color=\"white\", margin=\"10px\"),\n                background_color=\"black\",\n            ),\n            ui.view(\n                ui.progress_circle(value=70, static_color=\"black\", margin=\"10px\"),\n                background_color=\"white\",\n            ),\n        )\n    )\n\nprogress_circle_color_examples = color_variants()\n```\n\n----------------------------------------\n\nTITLE: Tag Group with Remove Functionality\nDESCRIPTION: Implements tag removal functionality using the on_remove prop and state management.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/tag_group.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef tag_group_remove_example():\n    items, set_items = ui.use_state(\n        [\n            ui.item(\"News\", key=\"news\"),\n            ui.item(\"Travel\", key=\"travel\"),\n            ui.item(\"Gaming\", key=\"gaming\"),\n            ui.item(\"Shopping\", key=\"shopping\"),\n        ]\n    )\n\n    return (\n        ui.tag_group(\n            *items,\n            on_remove=lambda keys: set_items(\n                [item for item in items if item.key not in keys]\n            )\n        ),\n    )\n\n\nmy_tag_group_remove_example = tag_group_remove_example()\n```\n\n----------------------------------------\n\nTITLE: Time Table Filtering with Range Calendar\nDESCRIPTION: Implements a date range filter for time tables using range calendar component.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/range_calendar.md#2025-04-17_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven.time import dh_now\nfrom deephaven import time_table, ui\n\n\n@ui.component\ndef date_table_filter(table, start_date, end_date, time_col=\"Timestamp\"):\n    dates, set_dates = ui.use_state({\"start\": start_date, \"end\": end_date})\n    start = dates[\"start\"]\n    end = dates[\"end\"]\n    return [\n        ui.range_calendar(value=dates, on_change=set_dates),\n        table.where(f\"{time_col} >= start && {time_col} < end\"),\n    ]\n\n\nSECONDS_IN_DAY = 86400\ntoday = dh_now()\n_table = time_table(\"PT1s\").update_view(\n    [\"Timestamp=today.plusSeconds(SECONDS_IN_DAY*i)\", \"Row=i\"]\n)\ndate_filter = date_table_filter(_table, today, today.plusSeconds(SECONDS_IN_DAY * 10))\n```\n\n----------------------------------------\n\nTITLE: Creating Disabled Calendar in Python\nDESCRIPTION: Shows how to create a disabled calendar using the 'is_disabled' prop to prevent user interaction.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/calendar.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\nmy_calendar_is_disabled_example = ui.calendar(\n    is_disabled=True,\n)\n```\n\n----------------------------------------\n\nTITLE: Emphasized Toggle Button - Python\nDESCRIPTION: Creates a toggle button with emphasized styling using the user's accent color.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/toggle_button.md#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\nmy_toggle_button_is_emphasized_example = ui.toggle_button(\n    \"Pin\",\n    is_emphasized=True,\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Required Number Fields in Python with Deephaven UI\nDESCRIPTION: This example demonstrates how to create required number fields and customize the necessity indicator using Deephaven's UI library.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/number_field.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef ui_number_field_is_required_examples():\n    return [\n        ui.number_field(label=\"Birth year\"),\n        ui.number_field(label=\"Birth year\", is_required=True),\n    ]\n\n\nmy_number_field_is_required_example = ui_number_field_is_required_examples()\n```\n\n----------------------------------------\n\nTITLE: Hiding Time Zone in Date Range Picker\nDESCRIPTION: Demonstrates how to hide the time zone display in a date range picker with default values.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/date_range_picker.md#2025-04-17_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\nmy_hide_time_zone_example = ui.date_range_picker(\n    label=\"Date range\",\n    default_value={\n        \"start\": \"2022-11-07T00:45 America/Los_Angeles\",\n        \"end\": \"2022-11-08T11:15 America/Los_Angeles\",\n    },\n    hide_time_zone=True,\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Data Bar Visualization in Python\nDESCRIPTION: Method to add data bar visualizations to columns with customizable appearance and behavior options.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/DESIGN.md#2025-04-17_snippet_67\n\nLANGUAGE: python\nCODE:\n```\nui_table.data_bar(self,\n    col: str,\n    value_col: str = None,\n    min: float | str = None,\n    max: float | str = None,\n    axis: DataBarAxis | None = None,\n    positive_color: Color | list[Color] = None,\n    negative_color: Color | list[Color] = None,\n    value_placement: DataBarValuePlacement | None = None,\n    direction: DataBarDirection | None = None,\n    opacity: float = None,\n    marker_col: str = None,\n    marker_color: Color = None\n) -> UITable\n```\n\n----------------------------------------\n\nTITLE: Basic Date Field Implementation in Python\nDESCRIPTION: Creates a basic date field component with a label.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/date_field.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\nmy_date_field_basic = ui.date_field(label=\"Date field\")\n```\n\n----------------------------------------\n\nTITLE: Basic Labeled Value Implementation in Python\nDESCRIPTION: Simple example showing how to create a basic labeled value component with a string value.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/labeled_value.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\nmy_labeled_value_basic = ui.labeled_value(label=\"File name\", value=\"Budget.xls\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Action Group Density\nDESCRIPTION: Shows how to configure the density of an action group using the density prop, which affects the margins between action buttons.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/action_group.md#2025-04-17_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef ui_action_group_density_examples():\n    return [\n        ui.action_group(\n            ui.item(ui.icon(\"edit\")),\n            ui.item(ui.icon(\"copy\")),\n            ui.item(ui.icon(\"trash\")),\n            density=\"compact\",\n        ),\n        ui.action_group(\n            ui.item(ui.icon(\"edit\")),\n            ui.item(ui.icon(\"copy\")),\n            ui.item(ui.icon(\"trash\")),\n            is_quiet=True,\n            density=\"compact\",\n        ),\n        ui.action_group(\n            ui.item(ui.icon(\"edit\")),\n            ui.item(ui.icon(\"copy\")),\n            ui.item(ui.icon(\"trash\")),\n            density=\"spacious\",\n        ),\n    ]\n\n\nmy_action_group_density_examples = ui_action_group_density_examples()\n```\n\n----------------------------------------\n\nTITLE: Auto-dismissing Toast Implementation\nDESCRIPTION: Shows how to implement auto-dismissing toasts with timeout functionality.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/toast.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\nbtn = ui.button(\n    \"Show toast\",\n    on_press=lambda: ui.toast(\"Toast is done!\", timeout=5000, variant=\"positive\"),\n    variant=\"primary\",\n)\n```\n\n----------------------------------------\n\nTITLE: Quiet Text Field Implementation\nDESCRIPTION: Creates a quiet text field with minimal styling.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/text_field.md#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\nmy_text_field_is_quiet_example = ui.text_field(label=\"Favorite animal\", is_quiet=True)\n```\n\n----------------------------------------\n\nTITLE: Implementing Tab Change Events in Python\nDESCRIPTION: Shows how to add an event listener for tab changes using the on_change parameter to track selected tab keys.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/DESIGN.md#2025-04-17_snippet_32\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\nt = ui.tabs(\n    ui.tab(\"Content 1\", title=\"Tab 1\", key=\"Key 1\"),\n    ui.tab(\"Content 2\", title=\"Tab 2\", key=\"Key 2\"),\n    aria_label=\"Some label\",\n    on_change=lambda key: print(f\"Selected key: {key}\"),\n)\n```\n\n----------------------------------------\n\nTITLE: Adjusting Divider Size in Deephaven UI (Python)\nDESCRIPTION: This snippet illustrates how to adjust the thickness of dividers using the 'size' prop. It shows three dividers with different sizes (L, M, S) in a vertical flex container.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/divider.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef ui_divider_size_example():\n    return ui.flex(\n        \"Content below\",\n        ui.divider(size=\"L\"),\n        \"Content above\",\n        ui.divider(size=\"M\"),\n        \"More content above\",\n        ui.divider(size=\"S\"),\n        direction=\"column\",\n    )\n\nmy_divider_size_example = ui_divider_size_example()\n```\n\n----------------------------------------\n\nTITLE: Progress Circle Size Variants Implementation\nDESCRIPTION: Demonstrates different size variants (S, M, L) of progress circles using the size prop.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/progress_circle.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef size_variants():\n    return ui.flex(\n        ui.progress_circle(value=70, size=\"S\"),\n        ui.progress_circle(value=70),\n        ui.progress_circle(value=70, size=\"L\"),\n    )\n\nprogress_circle_size_examples = size_variants()\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Logic Button in Python\nDESCRIPTION: This snippet demonstrates how to create a basic Logic Button component with the 'Or' text and 'or' variant.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/logic_button.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\nmy_logic_button_basic = ui.logic_button(\"Or\", variant=\"or\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Read-Only Switch in Deephaven UI\nDESCRIPTION: Shows how to create a read-only switch using the is_read_only prop, which prevents user interaction but keeps the switch focusable.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/switch.md#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\nmy_switch_is_read_only_example = ui.switch(\n    \"Switch Label\", is_read_only=True, default_selected=True\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Text to Indicator Plots in Python\nDESCRIPTION: Shows how to add text to indicator plots by using the text parameter. The example displays the stock symbol as text alongside the price value.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/plotly-express/docs/indicator.md#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.plot.express as dx\nfrom deephaven import agg as agg\n\nmy_table = dx.data.stocks()\n\n# subset data and aggregate prices, keeping the Sym\ndog_avg = my_table.where(\"Sym = `DOG`\").agg_by([agg.avg(cols=\"Price\")], by=\"Sym\")\n\nindicator_plot = dx.indicator(dog_avg, value=\"Price\", by=\"Sym\", text=\"Sym\")\n```\n\n----------------------------------------\n\nTITLE: Static Color Toggle Button - Python\nDESCRIPTION: Implements a toggle button with a static color for use on colored backgrounds.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/toggle_button.md#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\nmy_toggle_button_static_color_example = ui.view(\n    ui.toggle_button(\n        ui.icon(\"pin\"),\n        ui.text(\"Pin content\"),\n        static_color=\"white\",\n    ),\n    background_color=\"blue-700\",\n    padding=\"size-500\",\n)\n```\n\n----------------------------------------\n\nTITLE: Handling Empty Tables with use_column_data\nDESCRIPTION: Example showing how to handle empty tables using use_column_data with default None sentinel value. Displays alternative text when table has no data.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/hooks/use_column_data.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import time_table, ui\nimport datetime as dt\n\n@ui.component\ndef ui_table_column(table):\n    column_data = ui.use_column_data(table)\n    if column_data is None:\n        return ui.heading(\"No data yet.\")\n    return ui.heading(f\"Column data: {column_data}\")\n\nstart_time = dt.datetime.now() + dt.timedelta(seconds=2)\ntable_column = ui_table_column(time_table(\"PT1s\", start_time=start_time).tail(5))\n```\n\n----------------------------------------\n\nTITLE: Handling Radio Group Values in Python\nDESCRIPTION: Shows different ways to handle radio group values, including uncontrolled and controlled components.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/radio_group.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef radio_group_value_examples():\n    selected, set_selected = ui.use_state(\"yes\")\n    return [\n        ui.radio_group(\n            ui.radio(\"Yes\", value=\"yes\"),\n            ui.radio(\"No\", value=\"no\"),\n            label=\"Are you a wizard? (no value set)?\",\n        ),\n        ui.radio_group(\n            ui.radio(\"Yes\", value=\"yes\"),\n            ui.radio(\"No\", value=\"no\"),\n            label=\"Are you a wizard? (uncontrolled)?\",\n            default_value=\"yes\",\n        ),\n        ui.radio_group(\n            ui.radio(\"Yes\", value=\"yes\"),\n            ui.radio(\"No\", value=\"no\"),\n            label=\"Are you a wizard? (controlled)?\",\n            value=selected,\n            on_change=set_selected,\n        ),\n    ]\n\n\nmy_radio_group_value_examples = radio_group_value_examples()\n```\n\n----------------------------------------\n\nTITLE: Required Text Field Implementation\nDESCRIPTION: Demonstrates required and optional text field implementations with different indicators.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/text_field.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef ui_text_field_is_required_examples():\n    return [\n        ui.text_field(label=\"Address\"),\n        ui.text_field(label=\"Address\", is_required=True),\n    ]\n\nmy_text_field_is_required_example = ui_text_field_is_required_examples()\n```\n\n----------------------------------------\n\nTITLE: Setting Hour Cycle in Date Range Picker\nDESCRIPTION: Shows how to override the default hour format (12/24) in a date range picker.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/date_range_picker.md#2025-04-17_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\ndate_range_picker_hour_cycle_example = ui.date_range_picker(\n    label=\"Date range\", hour_cycle=24\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Box Plot with Categorical Grouping\nDESCRIPTION: Creates a box plot showing life expectancy distribution by continent using five-number summary.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/plotly-express/docs/plot-by.md#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.plot.express as dx\ngapminder = dx.data.gapminder() # import ticking Gapminder dataset\n\n# filter by most recent instance of each country\nrecent_gapminder = gapminder.last_by(\"Country\")\n\n# box plot gives 5-number summary and potential outliers\nlife_exp_box = dx.box(recent_gapminder, x=\"LifeExp\", by=\"Continent\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Calendar in Python\nDESCRIPTION: Creates a basic calendar component with an aria label for accessibility.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/calendar.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\nmy_calendar_basic = ui.calendar(aria_label=\"Event Date\")\n```\n\n----------------------------------------\n\nTITLE: Disabled Text Area Implementation\nDESCRIPTION: Creates a disabled text area that prevents user interaction.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/text_area.md#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\ntext_area_is_disabled_example = ui.text_area(label=\"Sample\", is_disabled=True)\n```\n\n----------------------------------------\n\nTITLE: Creating an Emphasized Action Group\nDESCRIPTION: Shows how to create an emphasized action group using the is_emphasized prop, which adds visual prominence to the selection.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/action_group.md#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\nmy_action_group_is_emphasized_example = ui.action_group(\n    ui.item(\"Dogs\"),\n    ui.item(\"Cats\"),\n    ui.item(\"Fish\"),\n    selected_keys=[\"Dogs\"],\n    selection_mode=\"single\",\n    is_emphasized=True,\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Text in Deephaven UI (Python)\nDESCRIPTION: Demonstrates how to create a basic text element using the Deephaven UI library.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/text.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\nmy_text_basic = ui.text(\"Hello world\")\n```\n\n----------------------------------------\n\nTITLE: Text Area in HTML Form\nDESCRIPTION: Shows how to integrate a text area with HTML forms using the name prop.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/text_area.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\ntext_area_name_example = ui.form(ui.flex(ui.text_area(label=\"Comment\", name=\"comment\")))\n```\n\n----------------------------------------\n\nTITLE: Required Text Area Implementation\nDESCRIPTION: Shows how to create required text areas with different necessity indicators.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/text_area.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef text_area_is_required_prop():\n    return [\n        ui.text_area(label=\"Address\"),\n        ui.text_area(label=\"Address\", is_required=True),\n    ]\n\ntext_area_is_required_example = text_area_is_required_prop()\n```\n\n----------------------------------------\n\nTITLE: Creating Column Groups in Python\nDESCRIPTION: Method to create and configure column groups with custom names, child columns, and color formatting.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/DESIGN.md#2025-04-17_snippet_64\n\nLANGUAGE: python\nCODE:\n```\nui_table.column_group(name: str, children: list[str], color: str | None) -> UITable\n```\n\n----------------------------------------\n\nTITLE: Implementing Controlled and Uncontrolled Calendars in Python\nDESCRIPTION: Shows how to create both controlled and uncontrolled calendars using the 'value' and 'default_value' props respectively.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/calendar.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef example():\n    value, set_value = ui.use_state(\"2020-02-03\")\n    return ui.flex(\n        ui.calendar(\n            aria_label=\"Calendar (uncontrolled)\",\n            default_value=\"2020-02-03\",\n        ),\n        ui.calendar(\n            aria_label=\"Calendar (controlled)\", value=value, on_change=set_value\n        ),\n        gap=\"size-300\",\n        wrap=True,\n    )\n\n\nmy_example = example()\n```\n\n----------------------------------------\n\nTITLE: Adding Help Text to Radio Groups in Python\nDESCRIPTION: Shows how to add description and error messages to radio groups in Deephaven's UI framework.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/radio_group.md#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef ui_radio_group_help_text_examples():\n    return [\n        ui.radio_group(\n            ui.radio(\"Wizard\", value=\"wizard\"),\n            ui.radio(\"Dragon\", value=\"dragon\"),\n            label=\"Favorite avatar\",\n            description=\"Select an avatar from the two options.\",\n        ),\n        ui.radio_group(\n            ui.radio(\"Wizard\", value=\"wizard\"),\n            ui.radio(\"Dragon\", value=\"dragon\"),\n            label=\"Favorite avatar\",\n            description=\"Select an avatar from the two options.\",\n            error_message=\"Sample invalid error message.\",\n            is_invalid=True,\n        ),\n    ]\n\n\nmy_radio_group_help_text_examples = ui_radio_group_help_text_examples()\n```\n\n----------------------------------------\n\nTITLE: Tag Group with Label in Python\nDESCRIPTION: Demonstrates how to add a label to a tag group using the label prop.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/tag_group.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\ntag_group_label_example = ui.tag_group(\n    ui.item(\"News\", key=\"news\"),\n    ui.item(\"Travel\", key=\"travel\"),\n    ui.item(\"Gaming\", key=\"gaming\"),\n    ui.item(\"Shopping\", key=\"shopping\"),\n    label=\"Categories\",\n)\n```\n\n----------------------------------------\n\nTITLE: Handling Intentional Side Effects in Deephaven UI Component\nDESCRIPTION: This snippet shows how to handle intentional side effects in Deephaven UI components using event handlers. It demonstrates creating a button with a click handler that performs a side effect (printing) outside the rendering process.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/describing/pure_components.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef event_handler_example():\n    # An event handler for a button\n    def button_handler():\n        print(\"button pressed\")\n\n    return ui.button(\"button\", on_press=button_handler)\n\nmy_event_handler_example = event_handler_example()\n```\n\n----------------------------------------\n\nTITLE: Installing Deephaven Plotly Express with pip\nDESCRIPTION: Command to install the Deephaven Plotly Express plugin using pip package manager. This allows access to the enhanced visualization capabilities that integrate with the Deephaven platform.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/plotly-express/docs/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install deephaven-plugin-plotly-express\n```\n\n----------------------------------------\n\nTITLE: Controlling Menu Flipping Behavior\nDESCRIPTION: Shows how to use the should_flip prop to control whether the menu automatically flips direction when space is limited.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/menu_trigger.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\nmy_flip_example = ui.flex(\n    ui.menu_trigger(\n        ui.action_button(\"Edit\"),\n        ui.menu(\n            ui.item(\"Cut\"),\n            ui.item(\"Copy\"),\n            ui.item(\"Paste\"),\n        ),\n        should_flip=True,\n    ),\n    ui.menu_trigger(\n        ui.action_button(\"View\"),\n        ui.menu(\n            ui.item(\"Side bar\"),\n            ui.item(\"Page options\"),\n            ui.item(\"Edit panel\"),\n        ),\n        should_flip=False,\n    ),\n    gap=\"size-100\",\n)\n```\n\n----------------------------------------\n\nTITLE: Filled Slider with Offset Implementation\nDESCRIPTION: Demonstrates how to create filled sliders with optional offset values for visual feedback.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/slider.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\nmy_slider_fill_example = ui.flex(\n    ui.slider(\n        label=\"Contrast\",\n        min_value=-5,\n        max_value=5,\n        default_value=0.75,\n        step=0.05,\n        is_filled=True,\n    ),\n    ui.slider(\n        label=\"Exposure\",\n        min_value=-5,\n        max_value=5,\n        default_value=1.83,\n        step=0.01,\n        fill_offset=1,\n        is_filled=True,\n    ),\n    direction=\"column\",\n    gap=\"size-300\",\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Background Overlay Link - Python\nDESCRIPTION: Shows how to create a link with background overlay styling using the overBackground variant and custom background color.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/link.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\nmy_link_over_background_example = ui.view(\n    ui.link(\n        \"Learn more about pandas here!\",\n        href=\"https://en.wikipedia.org/wiki/Giant_panda\",\n        variant=\"overBackground\",\n    ),\n    background_color=\"green-500\",\n    padding=\"size-300\",\n)\n```\n\n----------------------------------------\n\nTITLE: Creating an Angular Gauge Indicator Plot in Python\nDESCRIPTION: Creates an indicator plot with an angular gauge visualization by setting the gauge parameter to 'angular'. The example uses the average price of DOG stocks.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/plotly-express/docs/indicator.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.plot.express as dx\nfrom deephaven import agg as agg\n\nmy_table = dx.data.stocks()\n\n# subset data and aggregate for DOG prices\ndog_avg = my_table.where(\"Sym = `DOG`\").agg_by([agg.avg(cols=\"Price\")])\n\nindicator_plot = dx.indicator(dog_avg, value=\"Price\", gauge=\"angular\")\n```\n\n----------------------------------------\n\nTITLE: Adding Formatted Text with ui.markdown\nDESCRIPTION: Creates an informational panel using markdown formatting to provide context and information about the dashboard and its components.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/tutorial.md#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nabout_markdown = ui.markdown(r\"\"\"\n### Iris Dashboard\n\nExplore **SepalLength** and **SepalWidth** from the Iris dataset with **deephaven.ui**\n- The data powering this dashboard is simulated Iris data\n- Charts are from Deephaven Plotly Express\n- Other components are from **deephaven.ui**\n\"\"\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Disabled Search Field\nDESCRIPTION: Demonstrates how to create a disabled search field using the 'is_disabled' prop to prevent user interaction.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/search_field.md#2025-04-17_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\nmy_search_field_is_quiet_example = ui.search_field(label=\"Animal\", is_disabled=True)\n```\n\n----------------------------------------\n\nTITLE: Creating a Quiet Action Group\nDESCRIPTION: Demonstrates how to create a quiet action group using the is_quiet prop, which can be useful when the group should not distract from surrounding content.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/action_group.md#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\nmy_action_group_is_quiet_example = ui.action_group(\n    ui.item(\"Add\"),\n    ui.item(\"Edit\"),\n    ui.item(\"Delete\"),\n    is_quiet=True,\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Divider in Deephaven UI (Python)\nDESCRIPTION: This snippet demonstrates how to create a basic divider using the Deephaven UI library. It shows the divider separating content above and below it.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/divider.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef ui_divider_basic_example():\n    return [\"Content above\", ui.divider(), \"Content below\"]\n\nmy_divider_basic_example = ui_divider_basic_example()\n```\n\n----------------------------------------\n\nTITLE: Using Common HTML Tags with Deephaven UI\nDESCRIPTION: Demonstrates the usage of common HTML tag shortcuts provided by the ui.html module for creating div, h1, and p elements.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/html.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\nsimple_html = ui.html.div(\"Welcome to Deephaven\", id=\"simple\")\n\nnested_html = ui.html.div(\n    ui.html.h1(\"Welcome to Deephaven\"),\n    ui.html.p(\"This is a custom HTML component.\"),\n    id=\"nested\",\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering with Ternary Operator\nDESCRIPTION: Shows how to use Python's ternary operator for conditional rendering in a more concise way.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/describing/conditional_rendering.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef item(name, is_packed):\n    return ui.text(\"- \", name + \" ✅\" if is_packed else name)\n\n@ui.component\ndef packing_list():\n    return ui.flex(\n        ui.heading(\"Packing list\"),\n        item(\"Clothes\", is_packed=True),\n        item(\"Shoes\", is_packed=True),\n        item(\"Wallet\", is_packed=False),\n        direction=\"column\",\n    )\n\nmy_packing_list = packing_list()\n```\n\n----------------------------------------\n\nTITLE: Creating Disabled Date Range Picker in Python\nDESCRIPTION: Implements a disabled date range picker that prevents user interaction while remaining visible.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/date_range_picker.md#2025-04-17_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\nmy_date_range_picker_is_disabled_example = ui.date_range_picker(\n    is_disabled=True,\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Quiet State Date Range Picker in Python\nDESCRIPTION: Creates a date range picker with quiet styling that minimizes visual impact on surrounding content.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/date_range_picker.md#2025-04-17_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\nmy_date_range_picker_is_quiet_example = ui.date_range_picker(\n    is_quiet=True,\n)\n```\n\n----------------------------------------\n\nTITLE: Accessibility Labeling for Illustrated Message in Python\nDESCRIPTION: Shows how to implement accessibility labeling for an illustrated message when no heading is specified using aria-label property.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/illustrated_message.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\nmy_illustrated_message_labeling_example = ui.illustrated_message(\n    ui.icon(\"vsWorkspaceTrusted\", aria_label=\"Trusted Workspace\")\n)\n```\n\n----------------------------------------\n\nTITLE: Basic Illustrated Message Implementation in Python\nDESCRIPTION: Creates a basic illustrated message with an error icon, heading, and content text using Deephaven UI components.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/illustrated_message.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\nmy_illustrated_message_basic = ui.illustrated_message(\n    ui.icon(\"vsError\"),\n    ui.heading(\"Access denied\"),\n    ui.content(\"You do not have permissions to access this page.\"),\n)\n```\n\n----------------------------------------\n\nTITLE: Watching for Changes with Multiple Actions\nDESCRIPTION: This command reinstalls the 'ui' plugin with JS support, starts the server, and watches for changes, using shorthand flags.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/README.md#2025-04-17_snippet_28\n\nLANGUAGE: shell\nCODE:\n```\npython tools/plugin_builder.py -jrsw ui\n```\n\n----------------------------------------\n\nTITLE: Resizing Dashboard Rows in Deephaven UI\nDESCRIPTION: This snippet demonstrates how to resize dashboard rows by specifying height ratios. It configures the top row to have a height of 1 and the bottom row to have a height of 2, creating a 1:2 ratio.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/tutorial.md#2025-04-17_snippet_21\n\nLANGUAGE: python\nCODE:\n```\niris_species_dashboard_resized = ui.dashboard(ui.column(ui.row(about_panel, iris_agg_stack, height=1), ui.row(sepal_panel, species_picker_panel, height=2)))\n```\n\n----------------------------------------\n\nTITLE: Text Field Help Text Implementation\nDESCRIPTION: Shows how to add description and error messages to text fields with validation states.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/text_field.md#2025-04-17_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef ui_text_field_help_text_examples():\n    return [\n        ui.text_field(\n            label=\"Comment\",\n            default_value=\"Awesome!\",\n            validation_state=\"valid\",\n            description=\"Enter a comment.\",\n        ),\n        ui.text_field(\n            label=\"Comment\",\n            validation_state=\"invalid\",\n            error_message=\"Empty input is not allowed.\",\n        ),\n    ]\n\nmy_text_field_help_text_examples = ui_text_field_help_text_examples()\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Range Slider in Python\nDESCRIPTION: This snippet demonstrates how to create a basic range slider with a default value and label using the Deephaven UI library.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/range_slider.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\nmy_range_slider_basic = ui.range_slider(\n    default_value={\"start\": 18, \"end\": 80}, label=\"Age range\"\n)\n```\n\n----------------------------------------\n\nTITLE: Progress Circle Value Control Implementation\nDESCRIPTION: Demonstrates how to control progress circle values using min_value, max_value, and value props.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/progress_circle.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef value_variants():\n    return ui.flex(\n        ui.progress_circle(value=50),\n        ui.progress_circle(value=50, min_value=25, max_value=125),\n    )\n\nprogress_circle_value_examples = value_variants()\n```\n\n----------------------------------------\n\nTITLE: Implementing Quiet State Link - Python\nDESCRIPTION: Demonstrates how to create a quiet link that blends with surrounding content using the is_quiet property.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/link.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\nmy_link_is_quiet_example = ui.text(\n    \"You can \", ui.link(\"use quiet\", is_quiet=True), \" links inline.\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Scatter Plot with Deephaven Plotly Express\nDESCRIPTION: Generates a scatter plot comparing SepalLength and SepalWidth, with points colored by Species, using Deephaven Plotly Express.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/tutorial.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nscatter_by_species = dx.scatter(iris, x = \"SepalLength\", y = \"SepalWidth\", by=\"Species\")\n```\n\n----------------------------------------\n\nTITLE: Retrieving Row Data as List with use_row_list in Python\nDESCRIPTION: Hook function that works like use_row_data but returns a list of values instead of a RowData object, with an option to provide a sentinel value when the row is loading.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/DESIGN.md#2025-04-17_snippet_78\n\nLANGUAGE: python\nCODE:\n```\nuse_row_list(\n    table: Table,\n    sentinel: SentinelType = None\n) -> list[Any] | Sentinel:\n```\n\n----------------------------------------\n\nTITLE: Single Month Page Behavior\nDESCRIPTION: Configures range calendar to page by single months despite showing multiple months.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/range_calendar.md#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\nmy_range_calendar_page_behavior_example = ui.range_calendar(\n    visible_months=3, page_behavior=\"single\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Read-Only Radio Groups in Python\nDESCRIPTION: Shows how to create a read-only radio group using the is_read_only prop in Deephaven's UI framework.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/radio_group.md#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\nmy_radio_group_is_read_only_example = ui.radio_group(\n    ui.radio(\"Wizard\", value=\"wizard\"),\n    ui.radio(\"Dragon\", value=\"dragon\"),\n    label=\"Favorite avatar\",\n    default_value=\"dragon\",\n    is_read_only=True,\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Divider Orientation in Deephaven UI (Python)\nDESCRIPTION: This example shows how to change the orientation of a divider to vertical using the 'orientation' prop. It demonstrates the divider in a flex container separating content.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/divider.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef ui_divider_orientation_example():\n    return ui.flex(\n        \"Content before\",\n        ui.divider(orientation=\"vertical\"),\n        \"Content after\",\n        flex_grow=0,\n    )\n\nmy_ui_divider_orientation_example = ui_divider_orientation_example()\n```\n\n----------------------------------------\n\nTITLE: Using Text Content in Buttons and Pickers (Python)\nDESCRIPTION: Shows how to use the text component within buttons and pickers, demonstrating its versatility in defining text content for complex UI elements.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/text.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef ui_text_content_examples():\n    return [\n        ui.button(ui.text(\"Press me\"), variant=\"accent\", style=\"fill\"),\n        ui.picker(\n            ui.item(\n                ui.icon(\"github_alt\"),\n                ui.text(\"Github\"),\n                ui.text(\"Github Option\", slot=\"description\"),\n                text_value=\"Github\",\n            ),\n            ui.item(\n                ui.icon(\"azure_devops\"),\n                ui.text(\"Azure\"),\n                ui.text(\"Azure Option\", slot=\"description\"),\n                text_value=\"Azure\",\n            ),\n        ),\n    ]\n\n\nmy_text_content_examples = ui_text_content_examples()\n```\n\n----------------------------------------\n\nTITLE: Text Field Necessity Indicators\nDESCRIPTION: Shows different ways to indicate whether a text field is required or optional using necessity indicators.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/text_field.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef ui_text_field_necessity_indicator_examples():\n    return [\n        ui.text_field(label=\"Address\", is_required=True, necessity_indicator=\"label\"),\n        ui.text_field(label=\"Address\", necessity_indicator=\"label\"),\n    ]\n\nmy_text_field_necessity_indicator_examples = (\n    ui_text_field_necessity_indicator_examples()\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing List Action Group in Python\nDESCRIPTION: Function definition for creating a group of action buttons within a ListView component with various callback handlers.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/DESIGN.md#2025-04-17_snippet_35\n\nLANGUAGE: python\nCODE:\n```\ndef list_action_group(\n    *children: ActionGroupItem,\n    on_action: Callable[[ActionKey, Key], None] | None = None,\n    on_selection_change: Callable[[Selection, Key], None] | None = None,\n    on_change: Callable[[Selection, Key], None] | None = None,\n    **props: Any\n) -> ListActionGroupElement:\n```\n\n----------------------------------------\n\nTITLE: Memoized Fibonacci List Items\nDESCRIPTION: Demonstrates proper implementation of memoization for individual list items by extracting them into separate components.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/hooks/use_memo.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\nimport time\n\ntheme_options = [\"accent-200\", \"red-200\", \"green-200\"]\n\ndef fib(n):\n    if n <= 1:\n        return n\n    time.sleep(1)\n    return fib(n - 1) + fib(n - 2)\n\n@ui.component\ndef ui_fibonacci_item(i: int):\n    value = ui.use_memo(lambda: fib(i), [i])\n    return ui.view(f\"{i}: {value}\")\n\n@ui.component\ndef ui_fibonacci_list(n: int, theme: str):\n    return ui.view(\n        *[ui_fibonacci_item(i) for i in range(n)],\n        background_color=theme,\n        padding=\"size-100\",\n    )\n\n@ui.component\ndef ui_fibonacci_app():\n    n, set_n = ui.use_state(1)\n    theme, set_theme = ui.use_state(theme_options[0])\n\n    return [\n        ui.slider(value=n, min_value=1, max_value=5, on_change=set_n, label=\"n\"),\n        ui.picker(\n            *theme_options, label=\"Theme\", selected_key=theme, on_change=set_theme\n        ),\n        ui_fibonacci_list(n, theme),\n    ]\n\nfibonacci_app = ui_fibonacci_app()\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Link - Python\nDESCRIPTION: Demonstrates how to create a simple link component with text and URL using Deephaven's UI framework.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/link.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\nmy_link_basic = ui.link(\"Learn more about Deephaven\", href=\"https://deephaven.io/\")\n```\n\n----------------------------------------\n\nTITLE: Toast with Table Updates\nDESCRIPTION: Implementation of toast notifications triggered by table updates with timeout functionality.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/toast.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import time_table\nfrom deephaven import ui\n\n_source = time_table(\"PT5S\").update(\"X = i\").tail(5)\n\n\n@ui.component\ndef toast_table(t):\n    render_queue = ui.use_render_queue()\n\n    def listener_function(update, is_replay):\n        data_added = update.added()[\"X\"][0]\n        render_queue(lambda: ui.toast(f\"added {data_added}\", timeout=5000))\n\n    ui.use_table_listener(t, listener_function, [])\n    return t\n\n\nmy_toast_table = toast_table(_source)\n```\n\n----------------------------------------\n\nTITLE: Customizing Date Field Width in Python\nDESCRIPTION: Demonstrates how to adjust the width of date fields using the width and max_width props to control their size and maximum bounds.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/date_field.md#2025-04-17_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef date_field_width_examples():\n    return [\n        ui.date_field(\n            width=\"size-3600\",\n        ),\n        ui.date_field(\n            width=\"size-3600\",\n            max_width=\"100%\",\n        ),\n    ]\n\nmy_date_field_width_examples = date_field_width_examples()\n```\n\n----------------------------------------\n\nTITLE: Building Specific JavaScript Plugins in Watch Mode\nDESCRIPTION: Demonstrates how to build specific JavaScript plugins (e.g., those containing 'theme' in the name) in watch mode.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/README.md#2025-04-17_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnpm start -- --scope *theme*\n```\n\n----------------------------------------\n\nTITLE: Basic State Updates on Render Thread Python Example\nDESCRIPTION: Shows how state updates are automatically batched when executed on the render thread using the use_state hook.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/hooks/use_render_queue.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\nimport time\n\n@ui.component\ndef ui_batch_example():\n    a, set_a = ui.use_state(0)\n    b, set_b = ui.use_state(0)\n\n    ui.toast(\n        f\"Values are {a} and {b}\",\n        variant=\"negative\" if a != b else \"neutral\",\n        timeout=5000,\n    )\n\n    def do_work():\n        set_a(lambda new_a: new_a + 1)\n        # Introduce a bit of delay between updates\n        time.sleep(0.1)\n        set_b(lambda new_b: new_b + 1)\n\n    return ui.button(\"Update values\", on_press=do_work)\n\nbatch_example = ui_batch_example()\n```\n\n----------------------------------------\n\nTITLE: Creating a Disabled Button Group in Python with Deephaven UI\nDESCRIPTION: This snippet shows how to create a disabled button group using the 'is_disabled' prop. This prevents user interaction with the button group.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/button_group.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\nmy_button_group_is_disabled_example = ui.button_group(\n    ui.button(\"No, thanks\", variant=\"primary\", style=\"outline\"),\n    ui.button(\"Remind me later\", variant=\"primary\", style=\"outline\"),\n    ui.button(\"Rate Now\", variant=\"accent\"),\n    is_disabled=True,\n)\n```\n\n----------------------------------------\n\nTITLE: Customizing Color Picker Alpha Channel in Python\nDESCRIPTION: Shows how to hide the alpha channel in a color picker using the ui.color_editor function with the hide_alpha_channel parameter set to True.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/color_picker.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\nmy_color_picker_hide_alpha_channel = ui.color_picker(\n    ui.color_editor(hide_alpha_channel=True),\n    label=\"Background\",\n    default_value=\"#65C4D7\",\n)\n```\n\n----------------------------------------\n\nTITLE: Color Picker Component with Liveness Scope\nDESCRIPTION: Example of using liveness scope with external table creation and multiple table states.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/add-interactivity/update-tables-in-state.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui, new_table\nfrom deephaven.column import string_col\n\ndef create_rgb_table():\n    return new_table([\n        string_col(\"Colors\", [\"Red\", \"Green\", \"Blue\"]),\n    ])\n\ndef create_cmyk_table():\n    return new_table([\n        string_col(\"Colors\", [\"Cyan\", \"Magenta\", \"Yellow\", \"Black\"]),\n    ])\n\n@ui.component\ndef color_picker(rgb, cmyk):\n    table, set_table = ui.use_state(lambda: rgb)\n    handle_rgb = ui.use_liveness_scope(lambda _: set_table(rgb), [rgb])\n    handle_cmyk = ui.use_liveness_scope(lambda _: set_table(cmyk), [cmyk])\n    return [\n        ui.action_button(\n            \"Set RGB\",\n            on_press=handle_rgb,\n        ),\n        ui.action_button(\n            \"Set CMYK\",\n            on_press=handle_cmyk,\n        ),\n        table,\n    ]\n\ncolor_picker_example = color_picker(create_rgb_table(), create_cmyk_table())\n```\n\n----------------------------------------\n\nTITLE: Setting Component Context Levels in Deephaven UI\nDESCRIPTION: Example showing how to define UI components with different context scopes. The context parameter determines whether component state is isolated to a client session, shared among all tabs for a user, or shared with all users.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/DESIGN.md#2025-04-17_snippet_81\n\nLANGUAGE: python\nCODE:\n```\n# Define a client session component, where execution will be scoped to the current client session\n# One user making a change will not be reflected to other tabs for that user\n# This will be the default and is equivalent to not specifying a context\n# @ui.component(context=ui.ContextType.CLIENT)\n# def client_component():\n# ... component details here\n\n# Define a user component, where execution will be scoped to the current user\n# One user making a change will be reflected to all tabs for that user\n# @ui.component(context=ui.ContextType.USER)\n# def user_component():\n# ... component details here\n\n# Define a shared component, where execution will be scoped to all users\n# One user making a change will be reflected to all users\n# @ui.component(context=ui.ContextType.SHARED)\n# def shared_component():\n```\n\n----------------------------------------\n\nTITLE: Empty Tag Group Default State\nDESCRIPTION: Shows the default empty state of a tag group.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/tag_group.md#2025-04-17_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\nmy_tag_group_empty_default = ui.tag_group()\n```\n\n----------------------------------------\n\nTITLE: Disabling Tabs in Python\nDESCRIPTION: Demonstrates how to disable tabs using the is_disabled prop to prevent user interaction.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/tabs.md#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\nmy_tabs_is_disabled_example = ui.tabs(\n    ui.tab(\"There is no prior chat history with John Doe.\", title=\"John Doe\"),\n    ui.tab(\"There is no prior chat history with Jane Doe.\", title=\"Jane Doe\"),\n    ui.tab(\"There is no prior chat history with Joe Bloggs.\", title=\"Joe Bloggs\"),\n    is_disabled=True,\n)\n```\n\n----------------------------------------\n\nTITLE: Text Area Value Properties Example\nDESCRIPTION: Demonstrates setting controlled and uncontrolled values in text areas using value and default_value props.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/text_area.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef text_area_value_prop():\n    return [\n        ui.text_area(label=\"Sample (Uncontrolled)\", default_value=\"Value 1\"),\n        ui.text_area(label=\"Sample (controlled)\", value=\"Value 2\"),\n    ]\n\ntext_area_value_example = text_area_value_prop()\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Indeterminate Progress Bar in Python\nDESCRIPTION: This snippet demonstrates how to create a basic indeterminate progress bar using the Deephaven UI component system.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/progress_bar.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef ui_progress_bar():\n    return ui.progress_bar(is_indeterminate=True)\n\nprogress_bar = ui_progress_bar()\n```\n\n----------------------------------------\n\nTITLE: Customizing Label Position for Search Fields\nDESCRIPTION: Demonstrates how to change the label position of search fields using the 'label_position' and 'label_align' props.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/search_field.md#2025-04-17_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef ui_search_field_label_position_examples():\n    return [\n        ui.search_field(label=\"Sample Label\"),\n        ui.search_field(\n            label=\"Sample Label\", label_position=\"side\", label_align=\"start\"\n        ),\n    ]\n\n\nmy_search_field_label_position_examples = ui_search_field_label_position_examples()\n```\n\n----------------------------------------\n\nTITLE: Background Thread State Updates Python Example\nDESCRIPTION: Illustrates how state updates from background threads are not automatically batched and may cause multiple re-renders.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/hooks/use_render_queue.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\nimport threading\nimport time\n\n@ui.component\ndef ui_batch_example():\n    a, set_a = ui.use_state(0)\n    b, set_b = ui.use_state(0)\n\n    ui.toast(\n        f\"Values are {a} and {b}\",\n        variant=\"negative\" if a != b else \"neutral\",\n        timeout=5000,\n    )\n\n    def do_work():\n        set_a(lambda new_a: new_a + 1)\n        # Introduce a bit of delay between updates\n        time.sleep(0.1)\n        set_b(lambda new_b: new_b + 1)\n\n    def start_background_thread():\n        threading.Thread(target=do_work).start()\n\n    return ui.button(\"Update values\", on_press=start_background_thread)\n\nbatch_example = ui_batch_example()\n```\n\n----------------------------------------\n\nTITLE: Handling Button Click Events\nDESCRIPTION: Example of creating a button with an event handler that prints to console when clicked.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/README.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nmy_button = ui.button(\"Click Me!\", on_press=lambda e: print(f\"Button was clicked! {e}\"))\n```\n\n----------------------------------------\n\nTITLE: Creating Disabled Action Menus\nDESCRIPTION: Demonstrates how to create an action menu in a disabled state using the is_disabled property. This prevents user interaction while keeping the menu visible in the UI.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/action_menu.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\nmy_action_menu_basic = ui.action_menu(\"Cut\", \"Copy\", \"Paste\", is_disabled=True)\n```\n\n----------------------------------------\n\nTITLE: Creating a Quiet Number Field in Python with Deephaven UI\nDESCRIPTION: This example shows how to create a quiet number field, which has a less prominent appearance, using Deephaven's UI library.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/number_field.md#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\nmy_number_field_is_quiet_example = ui.number_field(label=\"Age\", is_quiet=True)\n```\n\n----------------------------------------\n\nTITLE: Running Pre-commit Hooks on All Files\nDESCRIPTION: Executes pre-commit hooks on all files in the repository to verify the setup.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/README.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npre-commit run --all-files\n```\n\n----------------------------------------\n\nTITLE: Using Constants for Readability with State Enums in Deephaven UI (Python)\nDESCRIPTION: Demonstrates how to use local variables for readability when working with enum state values. These constants are not state variables themselves but derived from state during rendering.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/managing-state/choose-the-state-structure.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nis_sending = status == \"sending\"\nis_sent = status == \"sent\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Horizontal Alignment with Flex in Deephaven UI (Python)\nDESCRIPTION: This snippet shows how to use the flex component in Deephaven UI to create horizontally aligned layouts. It demonstrates different alignment options (start, center, end) for row-direction flex containers.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/flex.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef ui_flex_align_horizontal():\n    horizontal = ui.flex(\n        ui.flex(\n            ui.view(1, background_color=\"red\", height=\"size-800\", width=\"size-400\"),\n            ui.view(2, background_color=\"green\", height=\"size-800\", width=\"size-800\"),\n            ui.view(3, background_color=\"blue\", height=\"size-800\", width=\"size-200\"),\n            align_items=\"start\",\n        ),\n        ui.flex(\n            ui.view(1, background_color=\"red\", height=\"size-800\", width=\"size-400\"),\n            ui.view(2, background_color=\"green\", height=\"size-800\", width=\"size-800\"),\n            ui.view(3, background_color=\"blue\", height=\"size-800\", width=\"size-200\"),\n            align_items=\"center\",\n        ),\n        ui.flex(\n            ui.view(1, background_color=\"red\", height=\"size-800\", width=\"size-400\"),\n            ui.view(2, background_color=\"green\", height=\"size-800\", width=\"size-800\"),\n            ui.view(3, background_color=\"blue\", height=\"size-800\", width=\"size-200\"),\n            align_items=\"end\",\n        ),\n        direction=\"column\",\n    )\n\n    return ui.flex(horizontal)\n\nmy_flex_align_horizontal = ui_flex_align_horizontal()\n```\n\n----------------------------------------\n\nTITLE: Setting Color Picker Sizes in Python\nDESCRIPTION: Shows how to create color pickers with different sizes (XS, S, M, L) using the size parameter. The example uses a custom component to display multiple pickers with different sizes.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/color_picker.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef ui_color_picker_size():\n    value, set_value = ui.use_state(\"#65C4D7\")\n\n    return [\n        ui.color_picker(label=\"Extra small\", default_value=\"#65C4D7\", size=\"XS\"),\n        ui.color_picker(label=\"Small\", default_value=\"#FAD35B\", size=\"S\"),\n        ui.color_picker(label=\"Medium\", default_value=\"#EE5D82\", size=\"M\"),\n        ui.color_picker(label=\"Large\", default_value=\"#FFFFFF\", size=\"L\"),\n    ]\n\n\nmy_color_picker_size = ui_color_picker_size()\n```\n\n----------------------------------------\n\nTITLE: Creating a Disabled Switch in Deephaven UI\nDESCRIPTION: Shows how to create a disabled switch using the is_disabled prop.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/switch.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\nmy_switch_is_disabled_example = ui.switch(\"Switch Label\", is_disabled=True)\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Avatar in Deephaven UI with Python\nDESCRIPTION: This snippet demonstrates how to create a basic avatar using the Deephaven UI library. It sets the source URL and alt text for the avatar.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/avatar.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\nmy_avatar_basic = ui.avatar(\n    src=\"https://github.com/deephaven.png\", alt=\"default avatar\"\n)\n```\n\n----------------------------------------\n\nTITLE: Tab Implementation Error Cases in Python\nDESCRIPTION: Shows common error cases when implementing tabs including empty tabs, duplicate keys, and mismatched configurations.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/DESIGN.md#2025-04-17_snippet_34\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\nt1 = ui.tabs()\n\nt2 = ui.tabs(\n    ui.tab(\"Content 1\", title=\"Tab 1\", key=\"Key 1\"),\n    ui.tab(\"Content 2\", title=\"Tab 2\", key=\"Key 1\"),\n)\n\nt3 = ui.tabs(\n    ui.tab(\"Content 1\", title=\"Tab 1\"),\n    ui.tab_list(ui.item(\"Tab 2\", key=\"Key 2\")),\n    ui.tab_panels(\n        ui.item(\n            ui.flex(\n                \"Content 2\",\n                ui.flex(\n                    empty_table(10).update(\"I=i\"), flex_grow=1, direction=\"column\"\n                ),\n            ),\n            key=\"Key 2\",\n        ),\n    ),\n)\n\nt4 = ui.tabs(\n    ui.tab_list(\n      ui.item(\"Tab 1\", key=\"Key 1\"),\n      ui.item(\"Tab 2\", key=\"Key 2\")),\n    ui.tab_panels(\n        ui.item(\"Content 3\", key=\"Key 1\"),\n        ui.item(\"Content 2\", key=\"Key 3\"),\n        flex_grow=1,\n        position=\"relative\",\n    ),\n    flex_grow=1,\n)\n```\n\n----------------------------------------\n\nTITLE: Disabled Checkbox Group\nDESCRIPTION: Demonstrates how to create a disabled checkbox group that prevents user interaction.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/checkbox_group.md#2025-04-17_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\nmy_checkbox_group_is_disabled_example = ui.checkbox_group(\n    \"Soccer\",\n    \"Basketball\",\n    \"Baseball\",\n    label=\"Favorite sports\",\n    is_disabled=True,\n)\n```\n\n----------------------------------------\n\nTITLE: Disabled Range Calendar\nDESCRIPTION: Creates a disabled range calendar that prevents user interaction.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/range_calendar.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\nmy_range_calendar_is_disabled_example = ui.range_calendar(\n    is_disabled=True,\n)\n```\n\n----------------------------------------\n\nTITLE: Accessible Icon Labeling in Deephaven UI\nDESCRIPTION: Shows how to add accessibility labels to icons, especially when used within buttons.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/icon.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef icons():\n    icon_button = ui.action_button(ui.icon(\"squirrel\"), aria_label=\"squirrel\")\n\n    return icon_button\n\n\nmy_icons = icons()\n```\n\n----------------------------------------\n\nTITLE: Read-Only Date Field Implementation\nDESCRIPTION: Demonstrates how to create a read-only date field.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/date_field.md#2025-04-17_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\nmy_date_field_is_read_only_example = ui.date_field(\n    is_read_only=True,\n)\n```\n\n----------------------------------------\n\nTITLE: Inserting Basic Image in Deephaven UI (Python)\nDESCRIPTION: Demonstrates how to use the ui.image function to insert a basic image with a source URL and alt text.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/image.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\nimg = ui.image(src=\"https://i.imgur.com/Z7AzH2c.png\", alt=\"Sky and roof\")\n```\n\n----------------------------------------\n\nTITLE: HTML Form Integration with Checkbox\nDESCRIPTION: Demonstrates how to integrate a checkbox with HTML forms using the name prop.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/checkbox.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\nmy_checkbox_name_example = ui.form(ui.checkbox(\"Sample Label\", name=\"Sample Name\"))\n```\n\n----------------------------------------\n\nTITLE: Formatting Number Fields as Percentages in Python\nDESCRIPTION: This snippet shows how to format a number field to display percentages using Deephaven's UI library and the format_options prop.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/number_field.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef ui_number_field_percentage_example():\n\n    return [\n        ui.number_field(\n            label=\"Percent\", default_value=\"0.5\", format_options={\"style\": \"percent\"}\n        ),\n    ]\n\n\nmy_number_field_percentage_example = ui_number_field_percentage_example()\n```\n\n----------------------------------------\n\nTITLE: Creating a Quiet Form in Deephaven UI (Python)\nDESCRIPTION: Demonstrates how to create a form with the quiet styling option, which reduces visual distraction.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/form.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef ui_form_quiet():\n\n    return ui.form(\n        ui.text_field(name=\"name\", label=\"Enter name\"),\n        is_quiet=True,\n    )\n\nmy_form_quiet = ui_form_quiet()\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Icicle Plot with Gapminder Data in Python\nDESCRIPTION: This code snippet demonstrates how to create a basic icicle plot using Deephaven's plot express module with gapminder data. It creates a visualization of population by continent, using hierarchical data structure with the 'World' as the parent of all continents.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/plotly-express/docs/icicle.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.plot.express as dx\ngapminder = dx.data.gapminder()\n\n# create table of only the most recent year of data, compute total population for each continent\ngapminder_recent = (\n    gapminder\n    .last_by(\"Country\")\n    .view([\"Continent\", \"Pop\"])\n    .sum_by(\"Continent\")\n    .update(\"World = `World`\")\n)\n\nicicle_plot = dx.icicle(gapminder_recent, names=\"Continent\", values=\"Pop\", parents=\"World\")\n```\n\n----------------------------------------\n\nTITLE: Customizing Delta Symbols in Indicator Plots in Python\nDESCRIPTION: Demonstrates how to modify the symbols displayed before delta values by using the increasing_text and decreasing_text parameters to replace the default up/down arrows.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/plotly-express/docs/indicator.md#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.plot.express as dx\nfrom deephaven import agg as agg\n\nmy_table = dx.data.stocks()\n\n# subset data and aggregate for DOG prices\ndog_agg = my_table.where(\"Sym = `DOG`\").agg_by([agg.avg(cols=\"Price\"), agg.first(cols=\"StartingPrice = Price\")])\n\nindicator_plot = dx.indicator(\n    dog_agg,\n    value=\"Price\",\n    reference=\"StartingPrice\",\n    increasing_text=\"Up: \",\n    decreasing_text=\"Down: \"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation Structure with toctree Directive in reStructuredText\nDESCRIPTION: Sets up a table of contents tree (toctree) for Sphinx documentation with a maximum depth of 2 levels. Uses glob patterns to automatically include all files in the current directory and all files in immediate subdirectories.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/index.rst#2025-04-17_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n   :glob:\n\n   *\n   */*\n```\n\n----------------------------------------\n\nTITLE: List Reversal in DeepHaven UI\nDESCRIPTION: Demonstrates how to safely reverse a list by creating a copy first and then applying mutations to the copy.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/add-interactivity/update-lists-in-state.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\ninitial_artists = [\n    {\"id\": 0, \"name\": \"Leonardo\"},\n    {\"id\": 1, \"name\": \"Donatello\"},\n    {\"id\": 2, \"name\": \"Michelangelo\"},\n    {\"id\": 3, \"name\": \"Raphael\"},\n]\n\n@ui.component\ndef artist_list():\n    artists, set_artists = ui.use_state(initial_artists)\n\n    def handle_reverse():\n        new_artists = [*artists]\n        new_artists.reverse()\n        set_artists(new_artists)\n\n    return [\n        ui.heading(\"Artists:\"),\n        ui.button(\"Reverse\", on_press=handle_reverse),\n        [ui.text(artist[\"name\"]) for artist in artists],\n    ]\n\nartist_list_example = artist_list()\n```\n\n----------------------------------------\n\nTITLE: Configuring Keyboard Activation for Tabs in Python\nDESCRIPTION: Shows how to configure keyboard activation for tabs using the keyboard_activation prop.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/tabs.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\nmy_tabs_keyboard_activation_example = ui.tabs(\n    ui.tab(\"Arma virumque cano, Troiae qui primus ab oris.\", title=\"Founding of Rome\"),\n    ui.tab(\"Senatus Populusque Romanus.\", title=\"Monarchy and Republic\"),\n    ui.tab(\"Alea jacta est.\", title=\"Empire\"),\n    keyboard_activation=\"manual\",\n)\n```\n\n----------------------------------------\n\nTITLE: Local Mutations in Tea Set Component in Python\nDESCRIPTION: This example demonstrates safe local mutations within a component. It creates a list of cups inside the tea_set function, which is acceptable as it doesn't affect any external state.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/describing/pure_components.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef cup(guest):\n    return ui.text(f\"Tea cup for guest {guest}\")\n\n@ui.component\ndef tea_set():\n    cups = []\n    for i in range(1, 13):\n        cups.append(cup(guest=i))\n    return ui.flex(cups, direction=\"column\")\n\nmy_tea_set1 = tea_set()\nmy_tea_set2 = tea_set()\n```\n\n----------------------------------------\n\nTITLE: Default Boolean State Initialization in Python\nDESCRIPTION: Demonstrates default initialization of boolean state which sets the value to False.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/hooks/use_boolean.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nvalue, set_value = ui.use_boolean()\n```\n\n----------------------------------------\n\nTITLE: Read-only Checkbox Group\nDESCRIPTION: Shows how to create a read-only checkbox group that remains focusable but prevents changes.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/checkbox_group.md#2025-04-17_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\nmy_checkbox_group_is_read_only_example = ui.checkbox_group(\n    \"Soccer\",\n    \"Basketball\",\n    \"Baseball\",\n    label=\"Favorite sports\",\n    is_read_only=True,\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Required Search Fields with Labels\nDESCRIPTION: Shows how to create search fields with labels and set them as required using the 'is_required' prop.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/search_field.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef ui_search_field_is_required_examples():\n    return [\n        ui.search_field(label=\"Search\"),\n        ui.search_field(label=\"Search\", is_required=True),\n    ]\n\n\nmy_search_field_is_required_example = ui_search_field_is_required_examples()\n```\n\n----------------------------------------\n\nTITLE: Basic Matplotlib Plot in Deephaven\nDESCRIPTION: A simple example showing how to create a basic Matplotlib figure with a single axes and plot data on it when using Deephaven.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/matplotlib/README.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport matplotlib.pyplot as plt\n\nfig = plt.figure()\nax = fig.subplots()  # Create a figure containing a single axes.\nax.plot([1, 2, 3, 4], [4, 2, 6, 7])  # Plot some data on the axes.\n```\n\n----------------------------------------\n\nTITLE: UI Tree Structure Visualization - Mermaid\nDESCRIPTION: Mermaid flowchart showing the basic concept of UI tree structure and its relationship to the DOM.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/describing/your-ui-as-a-tree.md#2025-04-17_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    subgraph UI-Tree\n            A --> B\n            A --> C\n    end\n    X[\n        Component A\n        Component B\n        Component C\n    ]\n    X --> UI-Tree --> DOM@{ shape: doc, label: \"DOM\" }\n```\n\n----------------------------------------\n\nTITLE: Custom Empty Tag Group State\nDESCRIPTION: Demonstrates how to customize the empty state display using render_empty_state prop.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/tag_group.md#2025-04-17_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\nmy_tag_group_empty_custom = ui.tag_group(\n    render_empty_state=ui.flex(\n        ui.icon(\"dh_warning_circle_filled\", size=\"S\"),\n        ui.text(\"No tags here\"),\n        align_items=\"center\",\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Disabled Slider Implementation\nDESCRIPTION: Shows how to create a disabled slider component using the is_disabled prop.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/slider.md#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\nmy_slider_disabled_example = ui.slider(\n    label=\"Cookies to share\", default_value=0, is_disabled=True\n)\n```\n\n----------------------------------------\n\nTITLE: Incorrect Dictionary Mutation\nDESCRIPTION: Demonstrates incorrect way of updating dictionary state through direct mutation.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/add-interactivity/update-dictionaries-in-state.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nposition[\"x\"] = 5\n```\n\n----------------------------------------\n\nTITLE: Help Text and Error Messages\nDESCRIPTION: Demonstrates adding description and error messages to checkbox groups.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/checkbox_group.md#2025-04-17_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef ui_checkbox_group_help_text_examples():\n    return [\n        ui.checkbox_group(\n            \"Soccer\",\n            \"Basketball\",\n            \"Baseball\",\n            label=\"Favourite sports\",\n            description=\"Select an avatar from the two options.\",\n        ),\n        ui.checkbox_group(\n            \"Soccer\",\n            \"Basketball\",\n            \"Baseball\",\n            label=\"Favourite sports\",\n            description=\"Select favourite sports from the two options.\",\n            error_message=\"Sample invalid error message.\",\n            is_invalid=True,\n        ),\n    ]\n\nmy_checkbox_group_help_text_examples = ui_checkbox_group_help_text_examples()\n```\n\n----------------------------------------\n\nTITLE: Date Range Validation\nDESCRIPTION: Sets minimum value constraint for date selection using current date.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/range_calendar.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\nfrom deephaven.time import dh_today\n\n\nmy_range_calendar_min_value_example = ui.range_calendar(\n    aria_label=\"Appointment Date\", min_value=dh_today()\n)\n```\n\n----------------------------------------\n\nTITLE: Tag Group with End Label Alignment\nDESCRIPTION: Demonstrates label alignment at the end of the tag group using label_align prop.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/tag_group.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\ntag_group_label_example = ui.tag_group(\n    ui.item(\"News\", key=\"news\"),\n    ui.item(\"Travel\", key=\"travel\"),\n    ui.item(\"Gaming\", key=\"gaming\"),\n    ui.item(\"Shopping\", key=\"shopping\"),\n    label=\"Categories\",\n    label_align=\"end\",\n)\n```\n\n----------------------------------------\n\nTITLE: Build Environment Setup for Deephaven Matplotlib Plugin\nDESCRIPTION: Shell commands for setting up a Python virtual environment and installing the necessary dependencies to build the Deephaven Matplotlib plugin.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/matplotlib/README.md#2025-04-17_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\npython -m venv .venv\nsource .venv/bin/activate\npip install --upgrade pip setuptools\npip install build deephaven-plugin matplotlib\n```\n\n----------------------------------------\n\nTITLE: List Item Removal in DeepHaven UI\nDESCRIPTION: Demonstrates removing items from a list using list comprehension to filter out unwanted items instead of using mutating methods.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/add-interactivity/update-lists-in-state.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\ninitial_artists = [\n    {\"id\": 0, \"name\": \"Leonardo\"},\n    {\"id\": 1, \"name\": \"Donatello\"},\n    {\"id\": 2, \"name\": \"Michelangelo\"},\n    {\"id\": 3, \"name\": \"Raphael\"},\n]\n\n@ui.component\ndef artist_list():\n    artists, set_artists = ui.use_state(initial_artists)\n\n    def handle_remove(id):\n        # Use list comprehension to filter by id\n        set_artists([artist for artist in artists if artist[\"id\"] != id])\n\n    def artist_row(artist):\n        return ui.flex(\n            ui.text(artist[\"name\"]),\n            ui.button(\"Delete\", on_press=lambda: handle_remove(artist[\"id\"])),\n        )\n\n    return [ui.heading(\"Artists:\"), [artist_row(artist) for artist in artists]]\n\nartist_list_example = artist_list()\n```\n\n----------------------------------------\n\nTITLE: Implementing Date Field Help Text Examples in Python\nDESCRIPTION: Demonstrates creating date fields with different help text configurations including descriptions and error messages. Shows how to use validation states to indicate valid/invalid inputs.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/date_field.md#2025-04-17_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef date_field_help_text_examples():\n    return [\n        ui.date_field(\n            label=\"Sample Label\",\n            description=\"Enter a date field.\",\n        ),\n        ui.date_field(\n            label=\"Sample Label\",\n            validation_state=\"valid\",\n            error_message=\"Sample invalid error message.\",\n        ),\n        ui.date_field(\n            label=\"Sample Label\",\n            validation_state=\"invalid\",\n            error_message=\"Sample invalid error message.\",\n        ),\n    ]\n\nmy_date_field_help_text_examples = date_field_help_text_examples()\n```\n\n----------------------------------------\n\nTITLE: Handling Timezone Support in Date Ranges\nDESCRIPTION: Shows different scenarios for timezone handling in date ranges, including user settings timezone, single timezone-aware dates, and multiple timezone-aware dates with override options.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/labeled_value.md#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef labeled_value_datetime_range_timezone():\n    date_range = {\"start\": \"2035-01-31T12:30:00Z\", \"end\": \"2035-02-01T12:30:00Z\"}\n    zoned_date_range = {\n        \"start\": \"2035-01-31T12:30:00Z\",\n        \"end\": \"2035-02-01T23:30:00 Asia/Tokyo\",\n    }\n    both_zoned_date_range = {\n        \"start\": \"2035-01-31T12:30:00 America/Los_Angeles\",\n        \"end\": \"2035-02-01T23:30:00 Asia/Tokyo\",\n    }\n    default_date_format = {\"date_format\": \"\"}\n\n    return [\n        ui.labeled_value(\n            label=\"User settings timezone\",\n            value=date_range,\n            format_options=default_date_format,\n        ),\n        ui.labeled_value(\n            label=\"Provided timezone from one date\",\n            value=zoned_date_range,\n            format_options=default_date_format,\n        ),\n        ui.labeled_value(\n            label=\"Provided timezone from both dates\",\n            value=both_zoned_date_range,\n            format_options=default_date_format,\n        ),\n        ui.labeled_value(\n            label=\"Overridden with timezone property\",\n            value=both_zoned_date_range,\n            format_options={**default_date_format, \"timezone\": \"America/Halifax\"},\n        ),\n    ]\n\nmy_labeled_value_datetime_range_timezone = labeled_value_datetime_range_timezone()\n```\n\n----------------------------------------\n\nTITLE: Icon Sizing in Deephaven UI\nDESCRIPTION: Shows how to create icons with different sizes using the 'size' property.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/icon.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef icons():\n    small = ui.icon(\"bell\", size=\"S\")\n    default = ui.icon(\"bell\")\n    large = ui.icon(\"bell\", size=\"L\")\n\n    return [small, default, large]\n\n\nmy_icons = icons()\n```\n\n----------------------------------------\n\nTITLE: Sorting UITable in Python\nDESCRIPTION: Method to provide the default sort for a UITable. It accepts column names to sort by and optional sort directions.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/DESIGN.md#2025-04-17_snippet_69\n\nLANGUAGE: python\nCODE:\n```\nui_table.sort(\n    order_by: str | Sequence[str],\n    order: TableSortDirection | Sequence[TableSortDirection] | None = None\n) -> UITable\n```\n\n----------------------------------------\n\nTITLE: Problematic State Update Example\nDESCRIPTION: Code snippet showing the specific problematic part where shallow copying leads to unintended state mutations.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/add-interactivity/update-lists-in-state.md#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nmy_list_copy = my_list.copy()\nartwork = next((a for a in my_list_copy if a[\"id\"] == artworkId), None)\nartwork[\"seen\"] = next_seen  # Problem: mutates an existing item\nset_my_list(my_list_copy)\n```\n\n----------------------------------------\n\nTITLE: Hiding Time Zone in Date Fields\nDESCRIPTION: Shows how to hide the time zone display in a date field using the hide_time_zone option while setting a default value.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/date_field.md#2025-04-17_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\nmy_hide_time_zone_example = ui.date_field(\n    label=\"Date field\",\n    default_value=\"2022-11-07T00:45 America/Los_Angeles\",\n    hide_time_zone=True,\n)\n```\n\n----------------------------------------\n\nTITLE: Disabled Toggle Button - Python\nDESCRIPTION: Implements a disabled toggle button that prevents user interaction.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/toggle_button.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\nmy_toggle_button_is_disabled_example = ui.toggle_button(\n    \"Pin\",\n    is_disabled=True,\n)\n```\n\n----------------------------------------\n\nTITLE: Creating an About Panel\nDESCRIPTION: Creates a titled panel for the markdown content to be added to the dashboard alongside the existing sepal panel.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/tutorial.md#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nabout_panel = ui.panel(about_markdown, title=\"About\")\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Color Scale 3D Scatter Plot in Python\nDESCRIPTION: Creates a 3D scatter plot with a custom continuous color scale using specific color values.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/plotly-express/docs/scatter-3d.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.plot.express as dx\niris = dx.data.iris()\n\nscatter_3D_custom_color = dx.scatter_3d(\n    iris,\n    x=\"SepalWidth\",\n    y=\"SepalLength\",\n    z=\"PetalWidth\",\n    by=\"PetalLength\",\n    # custom scale colors can be any valid browser css color\n    color_continuous_scale=[\"lemonchiffon\", \"#FA8173\", \"rgb(201, 61, 44)\"]\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Vertical Flex Layout\nDESCRIPTION: Arranges the text component above the horizontal flex layout using a vertical flex container with the 'column' direction property.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/tutorial.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nsepal_flex_column = ui.flex(sepal_text, sepal_flex, direction=\"column\")\n```\n\n----------------------------------------\n\nTITLE: Indeterminate Progress Circle Implementation\nDESCRIPTION: Shows how to create an indeterminate progress circle for unknown progress states.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/progress_circle.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef indeterminate_variant():\n    return ui.progress_circle(is_indeterminate=True)\n\nprogress_circle_indeterminate_example = indeterminate_variant()\n```\n\n----------------------------------------\n\nTITLE: Formatting Number Fields as Currency in Python\nDESCRIPTION: This example demonstrates how to format a number field to display currency values using Deephaven's UI library, specifying the currency type.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/number_field.md#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef ui_number_field_currency_example():\n\n    return [\n        ui.number_field(\n            label=\"Currency\",\n            default_value=\"49.99\",\n            format_options={\"style\": \"currency\", \"currency\": \"USD\"},\n        ),\n    ]\n\n\nmy_number_field_currency_example = ui_number_field_currency_example()\n```\n\n----------------------------------------\n\nTITLE: Implementing Selection Collapsing in Action Group\nDESCRIPTION: Shows how to implement selection collapsing in an action group when space is limited, with a highlighted menu button indicating a selection.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/action_group.md#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\nmy_action_group_selection_collapsing_example = ui.action_group(\n    ui.item(ui.icon(\"edit\"), ui.text(\"Edit\")),\n    ui.item(ui.icon(\"copy\"), ui.text(\"Copy\")),\n    ui.item(ui.icon(\"trash\"), ui.text(\"Delete\")),\n    static_color=\"white\",\n    summary_icon=ui.icon(\"vsSearch\"),\n    overflow_mode=\"collapse\",\n    selection_mode=\"multiple\",\n    is_emphasized=True,\n    max_width=10,\n)\n```\n\n----------------------------------------\n\nTITLE: Disabling List View Selection in Python with Deephaven UI\nDESCRIPTION: This snippet demonstrates how to disable selection in a List View by setting the selection mode to None or 'NONE'.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/list_view.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef ui_list_view():\n    return ui.list_view(\n        ui.item(\"Option 1\"),\n        ui.item(\"Option 2\"),\n        ui.item(\"Option 3\"),\n        selection_mode=None,\n    )\n\nmy_list_view = ui_list_view()\n```\n\n----------------------------------------\n\nTITLE: Creating Scatter Plot with Numeric Size Grouping\nDESCRIPTION: Creates a scatter plot where point sizes vary based on a numeric variable.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/plotly-express/docs/plot-by.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.plot.express as dx\ntips = dx.data.tips() # import a ticking version of the Tips dataset\n\n# the `size` column from tips gives the number in the party\ntotal_bill_tip_size = dx.scatter(tips, x=\"TotalBill\", y=\"Tip\", size=\"Size\")\n```\n\n----------------------------------------\n\nTITLE: Listing Python Package Dependencies for Deephaven Plugins\nDESCRIPTION: This snippet lists the required Python packages for the Deephaven plugins project. It includes Sphinx for documentation generation, myst-parser for Markdown support, sphinx-markdown-builder for Markdown output, sphinx-autodoc-typehints for type hints documentation, and conditional typing_extensions for Python versions before 3.11.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/sphinx_ext/sphinx-requirements.txt#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndeephaven-server\nSphinx\nmyst-parser\nsphinx-markdown-builder\nsphinx-autodoc-typehints\ntyping_extensions;python_version<'3.11'\n```\n\n----------------------------------------\n\nTITLE: Initializing Dictionary State\nDESCRIPTION: Example of initializing state with a dictionary containing position coordinates.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/add-interactivity/update-dictionaries-in-state.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nposition, set_position = ui.use_state({\"x\": 0, \"y\": 0})\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Components Example\nDESCRIPTION: Shows how to create a component that nests multiple instances of another component using flex layout.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/describing/your_first_component.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef table_of_contents():\n    return ui.flex(\n        ui.heading(\"My First Component\"),\n        ui.text(\"- Components: UI Building Blocks\"),\n        ui.text(\"- Defining a Component\"),\n        ui.text(\"- Using a Component\"),\n        direction=\"column\",\n    )\n\n\n@ui.component\ndef multiple_contents():\n    return ui.flex(\n        table_of_contents(),\n        table_of_contents(),\n        table_of_contents(),\n    )\n\n\nmy_multiple_contents = multiple_contents()\n```\n\n----------------------------------------\n\nTITLE: Conditional Render Tree Visualization - Mermaid\nDESCRIPTION: Mermaid flowchart showing the render tree structure with conditional rendering paths.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/describing/your-ui-as-a-tree.md#2025-04-17_snippet_4\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    A[app] -->|renders| B[ui.flex]\n    B -->|renders| C[ui.heading]\n    B -->|renders| D[random_generator]\n    D -->|renders| E[ui.flex]\n    E -->|renders?| F[ui.text]\n    E -->|renders?| G[ui.heading]\n    E -->|renders| H[ui.button]\n```\n\n----------------------------------------\n\nTITLE: Incorrect List Mutation Example in DeepHaven UI\nDESCRIPTION: Demonstrates incorrect approach of mutating a list directly using append() method, which should be avoided in UI state management.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/add-interactivity/update-lists-in-state.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef artist_list():\n    name, set_name = ui.use_state(\"\")\n    artists, set_artists = ui.use_state([])\n\n    return [\n        ui.heading(\"Artists:\"),\n        ui.text_field(value=name, on_change=set_name),\n        ui.button(\n            \"Add\",\n            # Append mutates the existing list\n            on_press=lambda: artists.append(name),\n        ),\n        [ui.text(n) for n in artists],\n    ]\n\nartist_list_example = artist_list()\n```\n\n----------------------------------------\n\nTITLE: Sequence Diagram: Client-Server Communication in deephaven.ui\nDESCRIPTION: Mermaid sequence diagram showing the communication flow between the UI Plugin and Server Plugin using JSON-RPC.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/architecture.md#2025-04-17_snippet_5\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n  participant UIP as UI Plugin\n  participant SP as Server Plugin\n\n    Note over UIP, SP: Uses JSON-RPC\n  UIP->>SP: setState(initialState)\n  SP-->>UIP: documentUpdated(Document, State)\n\n  loop Callback\n    UIP->>SP: foo(params)\n    SP-->>UIP: foo result\n    opt Update sent if callback modified state\n    SP->>UIP: documentUpdated(Document, State)\n    end\n      Note over UIP: Client can store State to restore the same state later\n  end\n```\n\n----------------------------------------\n\nTITLE: Customizing Avatar Sizes in Deephaven UI with Python\nDESCRIPTION: This snippet demonstrates how to create avatars with various preset sizes and a custom pixel size. It uses a UI component function to generate multiple avatar examples.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/avatar.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef ui_avatar_sizing_examples():\n    return [\n        ui.avatar(\n            src=\"https://github.com/deephaven.png\",\n            alt=\"avatar-size-50\",\n            size=\"avatar-size-50\",\n        ),\n        ui.avatar(\n            src=\"https://github.com/deephaven.png\",\n            alt=\"avatar-size-75\",\n            size=\"avatar-size-75\",\n        ),\n        ui.avatar(\n            src=\"https://github.com/deephaven.png\",\n            alt=\"davatar-size-100\",\n            size=\"avatar-size-100\",\n        ),\n        ui.avatar(\n            src=\"https://github.com/deephaven.png\",\n            alt=\"avatar-size-200\",\n            size=\"avatar-size-200\",\n        ),\n        ui.avatar(\n            src=\"https://github.com/deephaven.png\",\n            alt=\"avatar-size-300\",\n            size=\"avatar-size-300\",\n        ),\n        ui.avatar(\n            src=\"https://github.com/deephaven.png\",\n            alt=\"avatar-size-400\",\n            size=\"avatar-size-400\",\n        ),\n        ui.avatar(\n            src=\"https://github.com/deephaven.png\",\n            alt=\"avatar-size-500\",\n            size=\"avatar-size-500\",\n        ),\n        ui.avatar(\n            src=\"https://github.com/deephaven.png\",\n            alt=\"avatar-size-600\",\n            size=\"avatar-size-600\",\n        ),\n        ui.avatar(\n            src=\"https://github.com/deephaven.png\",\n            alt=\"avatar-size-700\",\n            size=\"avatar-size-700\",\n        ),\n        ui.avatar(\n            src=\"https://github.com/deephaven.png\", alt=\"custom pixel size\", size=80\n        ),\n    ]\n\n\nmy_avatar_sizing_examples = ui_avatar_sizing_examples()\n```\n\n----------------------------------------\n\nTITLE: Implementing Date Range Picker in Python\nDESCRIPTION: This code shows the function signature for creating a date range picker component using the Deephaven UI library. The date range picker allows selecting a range with start and end dates, and supports various date formats and configurations including placeholder values, default values, min/max constraints, and granularity settings.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/DESIGN.md#2025-04-17_snippet_45\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.ui as ui\nui.date_range_picker(\n    placeholder_value: Date | None = None,\n    value: { \"start\": Date, \"end\": Date } | None = None,\n    default_value: { \"start\": Date, \"end\": Date } | None = None,\n    min_value: Date | None = None,\n    max_value: Date | None = None,\n    granularity: Granularity | None = None,\n    on_change: Callable[[{ \"start\": Date, \"end\": Date }], None] | None = None,\n    **props: Any\n) -> DateRangePickerElement\n```\n\n----------------------------------------\n\nTITLE: Customizing Heatmap Color Scale in Python\nDESCRIPTION: Shows how to customize the color scale of a density heatmap using the viridis color scheme and setting a specific color range from 5 to 8.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/plotly-express/docs/density_heatmap.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.plot.express as dx\niris = dx.data.iris()\n\n# use the \"viridis\" color scale with a range from 5 to 8\nheatmap_colorscale = dx.density_heatmap(iris,\n    x=\"PetalLength\",\n    y=\"PetalWidth\",\n    color_continuous_scale=\"viridis\",\n    range_color=[5, 8]\n)\n```\n\n----------------------------------------\n\nTITLE: Read-only Range Calendar\nDESCRIPTION: Implements a read-only range calendar that remains focusable but immutable.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/range_calendar.md#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\nmy_range_calendar_is_read_only_example = ui.range_calendar(\n    is_read_only=True,\n)\n```\n\n----------------------------------------\n\nTITLE: Read-only Text Area Implementation\nDESCRIPTION: Creates a read-only text area that remains focusable but prevents editing.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/text_area.md#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\ntext_area_is_read_only_example = ui.text_area(label=\"Sample\", is_read_only=True)\n```\n\n----------------------------------------\n\nTITLE: Importing Deephaven UI Module\nDESCRIPTION: Shows how to import the Deephaven UI module for component creation.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/describing/your_first_component.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n```\n\n----------------------------------------\n\nTITLE: Integrating Search Fields with HTML Forms\nDESCRIPTION: Demonstrates how to use the 'name' prop to integrate search fields with HTML forms for easy value identification on submission.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/search_field.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\nmy_search_field_name_example = ui.form(\n    ui.search_field(label=\"Email\", name=\"email\", type=\"email\"),\n    ui.button(\"Submit\", type=\"submit\"),\n    on_submit=print,\n)\n```\n\n----------------------------------------\n\nTITLE: Read-only Text Field Implementation\nDESCRIPTION: Creates a read-only text field that remains focusable but prevents editing.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/text_field.md#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\nmy_text_field_is_read_only_example = ui.text_field(\n    label=\"Favorite animal\", default_value=\"Panda\", is_read_only=True\n)\n```\n\n----------------------------------------\n\nTITLE: Icon Search and Display in Deephaven UI\nDESCRIPTION: Creates a searchable grid of all available icons, demonstrating icon filtering and dynamic rendering.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/icon.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven.ui.components.types import IconTypes\nfrom deephaven import ui\nfrom typing import get_args\n\n\n@ui.component\ndef icon_search_example():\n    available_icons = [*get_args(IconTypes)]\n    filtered_icons, set_filtered_icons = ui.use_state(available_icons)\n\n    def filter_icons(search):\n        new_icons = []\n        for icon in available_icons:\n            if search in icon:\n                new_icons.append(icon)\n        set_filtered_icons(new_icons)\n\n    def render_icons():\n        entries = []\n        for icon in filtered_icons:\n            entries.append(\n                ui.flex(\n                    ui.icon(icon),\n                    ui.text(icon, color=\"gray-700\"),\n                    direction=\"column\",\n                    align_items=\"center\",\n                )\n            )\n        return ui.grid(entries, columns=\"repeat(auto-fit, minmax(250px, 1fr))\")\n\n    return ui.panel(\n        ui.view(\n            ui.text_field(\n                ui.icon(\"search\"),\n                label=\"Search icons\",\n                width=\"100%\",\n                on_change=filter_icons,\n            ),\n            position=\"sticky\",\n            top=\"0px\",\n            padding=\"size-100\",\n            background_color=\"surface-bg\",\n            border_bottom_width=\"thin\",\n            border_bottom_color=\"bg\",\n            width=\"100%\",\n        ),\n        render_icons(),\n        padding=0,\n    )\n\n\nmy_icon_search_example = icon_search_example()\n```\n\n----------------------------------------\n\nTITLE: Component Props Example in Deephaven UI\nDESCRIPTION: Shows the Deephaven UI Python syntax equivalent to the JSX example.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/describing/component_rules.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nmy_component(\"Hello World\", prop1=\"value1\")\n```\n\n----------------------------------------\n\nTITLE: Text Area with Change Event Handler\nDESCRIPTION: Implements a controlled text area with state management and change event handling.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/text_area.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef text_area_on_change_prop():\n    value, set_value = ui.use_state(\"\")\n    return ui.text_area(label=\"Your text\", value=value, on_change=set_value)\n\ntext_area_on_change_example = text_area_on_change_prop()\n```\n\n----------------------------------------\n\nTITLE: Custom Naming for Event Handler Props in Deephaven UI\nDESCRIPTION: Demonstrates how to create custom names for event handler props in components while still mapping them to standard event handlers internally.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/add-interactivity/respond-to-events.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef custom_button(*children, on_smash):\n    return ui.button(children, on_press=on_smash)\n\n\n@ui.component\ndef toolbar():\n    return [\n        custom_button(\"Play Movie\", on_smash=lambda: print(\"Playing!\")),\n        custom_button(\"Upload Image\", on_smash=lambda: print(\"Uploading!\")),\n    ]\n\n\nhandler_name_example = toolbar()\n```\n\n----------------------------------------\n\nTITLE: Creating a Delta-Only Indicator Plot in Python\nDESCRIPTION: Creates an indicator plot that displays only the delta to a reference value without showing the actual value. This is done by setting the number parameter to False.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/plotly-express/docs/indicator.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.plot.express as dx\nfrom deephaven import agg as agg\nmy_table = dx.data.stocks()\n\n# subset data and aggregate for DOG prices\ndog_agg = my_table.where(\"Sym = `DOG`\").agg_by([agg.avg(cols=\"Price\"), agg.first(cols=\"StartingPrice = Price\")])\n\nindicator_plot = dx.indicator(dog_agg, value=\"Price\", reference=\"StartingPrice\", number=False)\n```\n\n----------------------------------------\n\nTITLE: Form with Redundant State in Deephaven UI (Python)\nDESCRIPTION: Example of a name input form that stores redundant data in state. The full_name state variable is unnecessary because it can be calculated from first_name and last_name during rendering.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/managing-state/choose-the-state-structure.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef name_input():\n    first_name, set_first_name = ui.use_state(\"\")\n    last_name, set_last_name = ui.use_state(\"\")\n    full_name, set_full_name = ui.use_state(\"\")\n\n    def handle_first_name_change(value):\n        set_first_name(value)\n        set_full_name(f\"{value} {last_name}\")\n\n    def handle_last_name_change(value):\n        set_last_name(value)\n        set_full_name(f\"{first_name} {value}\")\n\n    return [\n        ui.heading(\"Check in\"),\n        ui.text_field(\n            label=\"First Name\", value=first_name, on_change=handle_first_name_change\n        ),\n        ui.text_field(\n            label=\"Last Name\", value=last_name, on_change=handle_last_name_change\n        ),\n        ui.text(f\"You are checking in: {full_name}\"),\n    ]\n\n\nname_input_example = name_input()\n```\n\n----------------------------------------\n\nTITLE: Setting Up Development Environment for Deephaven Plugin Utilities\nDESCRIPTION: Commands to create a Python virtual environment and install required dependencies for developing Deephaven plugins. This includes setting up a virtual environment, activating it, and installing necessary packages.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/utilities/README.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npython -m venv .venv\nsource .venv/bin/activate\npip install --upgrade pip setuptools\npip install build deephaven-plugin\n```\n\n----------------------------------------\n\nTITLE: Instantiating the Travel Plan Component in Python\nDESCRIPTION: Creates an instance of the travel plan component for use in the application. This line serves as the entry point for rendering the travel plan UI.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/managing-state/choose-the-state-structure.md#2025-04-17_snippet_19\n\nLANGUAGE: python\nCODE:\n```\ntravel_plan_example = travel_plan()\n```\n\n----------------------------------------\n\nTITLE: Importing the Deephaven UI Module\nDESCRIPTION: Basic import statement for the deephaven.ui module, which automatically loads the plugin and makes UI functionality available.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/docker/data/storage/notebooks/DEMO.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n```\n\n----------------------------------------\n\nTITLE: Creating Section Components for Deephaven UI Pickers (Python)\nDESCRIPTION: Defines the section function signature for creating section components that can be added to UI pickers. Sections can contain multiple items and have a title property.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/DESIGN.md#2025-04-17_snippet_56\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.ui as ui\nui.section(\n    *children: Item,\n    title: str | None = None,\n    **props: Any\n) -> SectionElement\n```\n\n----------------------------------------\n\nTITLE: Basic Multithreaded Table Update\nDESCRIPTION: Shows an initial attempt at updating table state from a background thread, which leads to errors.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/add-interactivity/update-tables-in-state.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui, time_table\nimport threading\n\n@ui.component\ndef ui_resetable_table():\n    table, set_table = ui.use_state(lambda: time_table(\"PT1s\"))\n\n    def do_work():\n        set_table(time_table(\"PT1s\"))\n\n    def start_background_thread():\n        threading.Thread(target=do_work).start()\n\n    return [\n        ui.action_button(\n            \"Reset\",\n            on_press=start_background_thread,\n        ),\n        table,\n    ]\n\nresetable_table = ui_resetable_table()\n```\n\n----------------------------------------\n\nTITLE: Creating a Disabled Avatar in Deephaven UI with Python\nDESCRIPTION: This example shows how to create a disabled avatar using the is_disabled property. Disabled avatars prevent user interaction and have a silenced style.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/avatar.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\nmy_avatar_is_disabled_example = ui.avatar(\n    src=\"https://github.com/deephaven.png\", alt=\"default avatar\", is_disabled=True\n)\n```\n\n----------------------------------------\n\nTITLE: Side Label Position for Checkbox Groups\nDESCRIPTION: Shows how to position the label to the side of the checkbox group.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/checkbox_group.md#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\nmy_checkbox_group_label_position_example = ui.checkbox_group(\n    ui.checkbox(\"Wizard\", value=\"wizard\"),\n    ui.checkbox(\"Dragon\", value=\"dragon\"),\n    label=\"Favorite avatars\",\n    label_position=\"side\",\n)\n```\n\n----------------------------------------\n\nTITLE: Checkbox Event Handling\nDESCRIPTION: Example showing how to handle checkbox events using the on_change prop with state management.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/checkbox.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef ui_checkbox_event_example():\n    selected, set_selected = ui.use_state(False)\n    return ui.flex(\n        ui.checkbox(\"Subscribe\", is_selected=selected, on_change=set_selected),\n        ui.text(value=\"Subscribed!\" if selected else \"Not subscribed!\"),\n        direction=\"column\",\n    )\n\n\nmy_checkbox_event_example = ui_checkbox_event_example()\n```\n\n----------------------------------------\n\nTITLE: Configuring Hour Cycle in Date Fields\nDESCRIPTION: Demonstrates how to override the default hour cycle format (12/24) in date fields using the hour_cycle prop.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/date_field.md#2025-04-17_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\ndate_field_hour_cycle_example = ui.date_field(label=\"Date field\", hour_cycle=24)\n```\n\n----------------------------------------\n\nTITLE: Disabled State Date Field Implementation\nDESCRIPTION: Shows how to implement a disabled state date field.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/date_field.md#2025-04-17_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\nmy_date_field_is_disabled_example = ui.date_field(\n    is_disabled=True,\n)\n```\n\n----------------------------------------\n\nTITLE: Basic Date Range Picker Initialization\nDESCRIPTION: Shows the basic initialization of a date range picker component with a simple label.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/date_range_picker.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\nmy_date_range_picker_basic = ui.date_range_picker(label=\"Date range\")\n```\n\n----------------------------------------\n\nTITLE: Basic Component Without Caching in Python\nDESCRIPTION: Demonstrates a simple UI component that reads Parquet data without caching, showing the inefficiency of re-reading on every render.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/DESIGN.md#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.ui as ui\nfrom deephaven.parquet import read\n\n@ui.component\ndef my_caching_component(parquet_path=\"/data/stocks.parquet\"):\n    value, set_value = ui.use_state(\"\")\n\n    source = read(parquet_path)\n    t = source.where(f\"sym=`{value}`\")\n\n    return ui.flex(\n        [\n            ui.text_input(\n                value=value, on_change=lambda event: set_value(event[\"value\"])\n            ),\n            t,\n        ]\n    )\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Indicator Plot in Python\nDESCRIPTION: Creates a simple indicator plot to visualize a single numeric value (average price) from a filtered dataset. The example filters the stocks data for 'DOG' symbol and calculates the average price.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/plotly-express/docs/indicator.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.plot.express as dx\nfrom deephaven import agg as agg\n\nmy_table = dx.data.stocks()\n\n# subset data and aggregate for DOG prices\ndog_avg = my_table.where(\"Sym = `DOG`\").agg_by([agg.avg(cols=\"Price\")])\n\nindicator_plot = dx.indicator(dog_avg, value=\"Price\")\n```\n\n----------------------------------------\n\nTITLE: Starting a plugins server for theme development\nDESCRIPTION: Terminal commands to start a plugins server that proxies your plugins for development without reinstallation after changes.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/example-theme/src/js/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Building JS Plugins and Starting Server\nDESCRIPTION: This command builds JS plugins, reinstalls the 'ui' plugin, and starts the server using shorthand flags.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/README.md#2025-04-17_snippet_26\n\nLANGUAGE: shell\nCODE:\n```\npython tools/plugin_builder.py --js -r -s ui\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests for Deephaven UI Plugin\nDESCRIPTION: Command to run unit tests for the Deephaven UI plugin using tox.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/README.md#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ntox -e py\n```\n\n----------------------------------------\n\nTITLE: Building the Deephaven JSON Plugin Wheel\nDESCRIPTION: Builds the plugin as a wheel package using Python's build module. The resulting wheel file is stored in the 'dist/' directory for later installation into a Deephaven environment.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/json/README.md#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npython -m build --wheel\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Theme CSS Variables\nDESCRIPTION: CSS variables defining the gray background color palette for a custom Financial Times-inspired theme with 11 shades from light to dark.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/example-theme/src/js/README.md#2025-04-17_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n// Background colors, labeled as gray but may be any suitable background color\n--dh-color-gray-50: hsl(30, 100%, 99.22%);\n--dh-color-gray-75: hsl(30, 100%, 97.65%);\n--dh-color-gray-100: hsl(27.69, 100%, 94.9%);\n--dh-color-gray-200: hsl(29.19, 78.72%, 90.78%);\n--dh-color-gray-300: hsl(28.33, 58.06%, 87.84%);\n--dh-color-gray-400: hsl(28, 18.99%, 69.02%);\n--dh-color-gray-500: hsl(27.5, 10.34%, 54.51%);\n--dh-color-gray-600: hsl(26.67, 8.57%, 41.18%);\n--dh-color-gray-700: hsl(25, 9.38%, 25.1%);\n--dh-color-gray-800: hsl(34.29, 10.77%, 12.75%);\n--dh-color-gray-900: hsl(0, 0%, 0%);\n```\n\n----------------------------------------\n\nTITLE: Form Example with Incorrect Mutations\nDESCRIPTION: Form component example showing incorrect dictionary mutations that don't trigger updates.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/add-interactivity/update-dictionaries-in-state.md#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef form():\n    person, set_person = ui.use_state(\n        {\n            \"first_name\": \"John\",\n            \"last_name\": \"Doe\",\n            \"email\": \"jondoe@domain.com\",\n        }\n    )\n\n    def handle_first_name_change(value):\n        person[\"first_name\"] = value\n\n    def handle_last_name_change(value):\n        person[\"last_name\"] = value\n\n    def handle_email_change(value):\n        person[\"email\"] = value\n\n    return [\n        ui.text_field(\n            label=\"First name\",\n            value=person[\"first_name\"],\n            on_change=handle_first_name_change,\n        ),\n        ui.text_field(\n            label=\"Last name\",\n            value=person[\"last_name\"],\n            on_change=handle_last_name_change,\n        ),\n        ui.text_field(\n            label=\"Email\", value=person[\"email\"], on_change=handle_email_change\n        ),\n        ui.text(f'{person[\"first_name\"]} {person[\"last_name\"]} {person[\"email\"]}'),\n    ]\n\nform_example = form()\n```\n\n----------------------------------------\n\nTITLE: Creating Basic UI Panel with Label\nDESCRIPTION: Basic example of creating a UI panel with a custom label for the tab.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/DESIGN.md#2025-04-17_snippet_23\n\nLANGUAGE: python\nCODE:\n```\np = ui.panel(my_component(), label=\"My Tab Label\")\n```\n\n----------------------------------------\n\nTITLE: HTML Form Integration with Date Fields\nDESCRIPTION: Shows how to integrate date fields with HTML forms including form submission.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/date_field.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\nmy_date_field_forms = ui.form(\n    ui.date_field(label=\"Birth date\", name=\"birthday\"),\n    ui.button(\"Submit\", type=\"submit\"),\n    on_submit=print,\n)\n```\n\n----------------------------------------\n\nTITLE: Fragment Component Definition in Python\nDESCRIPTION: Definition of the Fragment component that allows grouping elements without a wrapper node, similar to React.Fragment.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/DESIGN.md#2025-04-17_snippet_73\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.ui as ui\nui_fragment = ui.fragment(*children: Element) -> Element\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Visible Months in Date Range Picker\nDESCRIPTION: Configures the date range picker to display multiple months in the calendar popover.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/date_range_picker.md#2025-04-17_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\ndate_range_picker_months_example = ui.date_range_picker(\n    label=\"Date range\", max_visible_months=3\n)\n```\n\n----------------------------------------\n\nTITLE: List Insertion in DeepHaven UI\nDESCRIPTION: Shows how to insert items at specific positions in a list using slice syntax to create a new list.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/add-interactivity/update-lists-in-state.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\nnext_id = 4\ninitial_artists = [\n    {\"id\": 0, \"name\": \"Leonardo\"},\n    {\"id\": 1, \"name\": \"Donatello\"},\n    {\"id\": 2, \"name\": \"Michelangelo\"},\n    {\"id\": 3, \"name\": \"Raphael\"},\n]\n\n@ui.component\ndef artist_list():\n    value, set_value = ui.use_state(\"\")\n    artists, set_artists = ui.use_state(initial_artists)\n\n    def handle_insert():\n        global next_id\n        # Use slicing to create a new list\n        set_artists([*artists[:1], {\"id\": next_id, \"name\": value}, *artists[1:]])\n        next_id += 1\n\n    return [\n        ui.heading(\"Artists:\"),\n        ui.text_field(label=\"Name\", value=value, on_change=set_value),\n        ui.button(\"Insert\", on_press=handle_insert),\n        [ui.text(artist[\"name\"]) for artist in artists],\n    ]\n\nartist_list_example = artist_list()\n```\n\n----------------------------------------\n\nTITLE: Implementing Flattened Travel Itinerary Structure in Python\nDESCRIPTION: Normalized version of the travel plan data structure using a flat dictionary with IDs as keys. Each location references child locations through an array of IDs instead of nested objects.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/managing-state/choose-the-state-structure.md#2025-04-17_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ninitial_travel_plan = {\n    0: {\n        \"id\": 0,\n        \"title\": \"(Root)\",\n        \"child_ids\": [1, 42, 46],\n    },\n    1: {\"id\": 1, \"title\": \"Earth\", \"child_ids\": [2, 10, 19, 26, 34]},\n    2: {\"id\": 2, \"title\": \"Africa\", \"child_ids\": [3, 4, 5, 6, 7, 8, 9]},\n    3: {\"id\": 3, \"title\": \"Botswana\", \"child_ids\": []},\n    4: {\"id\": 4, \"title\": \"Egypt\", \"child_ids\": []},\n    5: {\"id\": 5, \"title\": \"Kenya\", \"child_ids\": []},\n    6: {\"id\": 6, \"title\": \"Madagascar\", \"child_ids\": []},\n    7: {\"id\": 7, \"title\": \"Morocco\", \"child_ids\": []},\n    8: {\"id\": 8, \"title\": \"Nigeria\", \"child_ids\": []},\n    9: {\"id\": 9, \"title\": \"South Africa\", \"child_ids\": []},\n    10: {\n        \"id\": 10,\n        \"title\": \"Americas\",\n        \"child_ids\": [11, 12, 13, 14, 15, 16, 17, 18],\n    },\n    11: {\"id\": 11, \"title\": \"Argentina\", \"child_ids\": []},\n    12: {\"id\": 12, \"title\": \"Brazil\", \"child_ids\": []},\n    13: {\"id\": 13, \"title\": \"Barbados\", \"child_ids\": []},\n    14: {\"id\": 14, \"title\": \"Canada\", \"child_ids\": []},\n    15: {\"id\": 15, \"title\": \"Jamaica\", \"child_ids\": []},\n    16: {\"id\": 16, \"title\": \"Mexico\", \"child_ids\": []}\n```\n\n----------------------------------------\n\nTITLE: Creating Sample Stock Data Table\nDESCRIPTION: Creates a sample table of mock stock data for demonstration purposes in the following examples. Uses the express plotting module to generate fictional stock market data.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/docker/data/storage/notebooks/DEMO.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven.plot import express as dx\n\nstocks = dx.data.stocks().reverse()\n# stocks creates a fictional stock market of pets\n```\n\n----------------------------------------\n\nTITLE: Implementing Different Input Types for Search Fields\nDESCRIPTION: Demonstrates how to use different input types (text, url, tel, email) for search fields in a form.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/search_field.md#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef ui_search_field_input_types():\n    return ui.form(\n        ui.search_field(label=\"Name\", type=\"text\", is_required=True),\n        ui.search_field(label=\"Personal Website\", type=\"url\", is_required=True),\n        ui.search_field(label=\"Phone\", type=\"tel\", is_required=True),\n        ui.search_field(label=\"Email\", type=\"email\", is_required=True),\n    )\n\n\nmy_search_field_input_types = ui_search_field_input_types()\n```\n\n----------------------------------------\n\nTITLE: Controlled and Uncontrolled Date Range Picker Values\nDESCRIPTION: Shows implementation of both controlled and uncontrolled date range pickers using state management.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/date_range_picker.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef example():\n    value, set_value = ui.use_state({\"start\": \"2020-02-03\", \"end\": \"2020-02-08\"})\n    return ui.flex(\n        ui.date_range_picker(\n            label=\"Date range (uncontrolled)\",\n            default_value={\"start\": \"2020-02-03\", \"end\": \"2020-02-08\"},\n        ),\n        ui.date_range_picker(\n            label=\"Date range (controlled)\", value=value, on_change=set_value\n        ),\n        gap=\"size-150\",\n        wrap=True,\n    )\n\nmy_example = example()\n```\n\n----------------------------------------\n\nTITLE: Basic Counter Implementation with use_ref in Python\nDESCRIPTION: Demonstrates a simple counter implementation using use_ref to track clicks without re-rendering the component. The counter value is only logged to console on button clicks.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/hooks/use_ref.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef ui_ref_counter():\n    ref = ui.use_ref(0)\n\n    def handle_press():\n        ref.current += 1\n        print(f\"You clicked {ref.current} times!\")\n\n    return ui.button(\"Click me!\", on_press=handle_press)\n\n\nref_counter = ui_ref_counter()\n```\n\n----------------------------------------\n\nTITLE: Sequence Diagram: Fetch-Only Object Communication Flow\nDESCRIPTION: Demonstrates the simplified communication flow for fetch-only objects that don't require bidirectional communication, showing how data is transferred from the server to the client.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/ARCHITECTURE.md#2025-04-17_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n  participant J as JS Plugin\n  participant P as Plugin\n  participant S as Server\n  J ->> S: Fetch object info\n  S ->> P: to_bytes(object)\n  P -->> S: Payload\n  S -->> J: Widget data and exports\n```\n\n----------------------------------------\n\nTITLE: Creating a Deephaven plugin from GitHub templates using cookiecutter\nDESCRIPTION: Command to create a Deephaven plugin directly from the GitHub repository without having it locally. This uses cookiecutter to fetch the template from the deephaven/deephaven-plugins repository.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/templates/README.md#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncookiecutter gh:deephaven/deephaven-plugins --directory=\"templates/<template name>\"\n```\n\n----------------------------------------\n\nTITLE: Setting up Python Environment for Deephaven UI Plugin\nDESCRIPTION: Commands to create a virtual environment, activate it, and install necessary dependencies for building and developing the Deephaven UI plugin.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/README.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npython -m venv .venv\nsource .venv/bin/activate\npip install --upgrade pip setuptools\npip install build deephaven-plugin plotly\n```\n\n----------------------------------------\n\nTITLE: Building Deephaven UI Documentation\nDESCRIPTION: Shell command to run the Python script for building the Deephaven UI plugin documentation.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/README.md#2025-04-17_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\npython make_docs.py\n```\n\n----------------------------------------\n\nTITLE: Calendar Component Type Definition\nDESCRIPTION: Type definition for the calendar component showing its parameters and return type.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/DESIGN.md#2025-04-17_snippet_39\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.ui as ui\nui.calendar(\n    value: Date | None = None,\n    default_value: Date | None = None,\n    focused_value: Date | None = None,\n    default_focused_value: Date | None = None,\n    min_value: Date | None = None,\n    max_value: Date | None = None,\n    on_change: Callable[[Date], None] | None = None,\n    **props: Any\n) -> CalendarElement\n```\n\n----------------------------------------\n\nTITLE: Setting UI Table Padding\nDESCRIPTION: Example showing how to set table padding using the padding property when creating a UITable.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/DESIGN.md#2025-04-17_snippet_61\n\nLANGUAGE: python\nCODE:\n```\nui_table = ui.table(source, padding=\"size-250\")\n```\n\n----------------------------------------\n\nTITLE: Building Deephaven UI Plugin Wheel\nDESCRIPTION: Command to build the Deephaven UI plugin wheel, which will be stored in the 'dist/' directory.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/README.md#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npython -m build --wheel\n```\n\n----------------------------------------\n\nTITLE: Validation Behavior in Date Range Picker\nDESCRIPTION: Demonstrates validation behavior implementation with native form validation.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/date_range_picker.md#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef date_range_picker_validation_behaviour_example():\n    return ui.form(\n        ui.date_range_picker(\n            validation_behavior=\"native\",\n            is_required=True,\n        )\n    )\n\nmy_date_range_picker_validation_behaviour_example = (\n    date_range_picker_validation_behaviour_example()\n)\n```\n\n----------------------------------------\n\nTITLE: Text Field Change Event Handler\nDESCRIPTION: Implements an onChange event handler to display text field value updates.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/text_field.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef ui_text_field_on_change_example():\n    value, set_value = ui.use_state(\"\")\n    return [\n        ui.text_field(label=\"Your text\", value=value, on_change=set_value),\n        ui.text(f\"Text has been changed to: {value}\"),\n    ]\n\nmy_text_field_on_change_example = ui_text_field_on_change_example()\n```\n\n----------------------------------------\n\nTITLE: Horizontal Checkbox Group Orientation\nDESCRIPTION: Demonstrates how to create a horizontally oriented checkbox group.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/checkbox_group.md#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\nmy_checkbox_group_orientation_example = ui.checkbox_group(\n    ui.checkbox(\"Wizard\", value=\"wizard\"),\n    ui.checkbox(\"Dragon\", value=\"dragon\"),\n    label=\"Favorite avatars\",\n    orientation=\"horizontal\",\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic State in Deephaven UI\nDESCRIPTION: Demonstrates basic state initialization using use_state hook with a number value.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/add-interactivity/update-dictionaries-in-state.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nx, set_x = ui.use_state(0)\n```\n\n----------------------------------------\n\nTITLE: Quiet State Date Field Implementation\nDESCRIPTION: Example of implementing a quiet state date field.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/date_field.md#2025-04-17_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\nmy_date_field_is_quiet_example = ui.date_field(\n    is_quiet=True,\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Log Levels for Specific Deephaven UI Modules\nDESCRIPTION: Python code to set specific log levels for different modules within the Deephaven UI plugin.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/README.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Only log warnings from deephaven.ui.hooks\nlogging.getLogger(\"deephaven.ui.hooks\").setLevel(level=logging.WARNING)\n\n# Log all debug messages from the render module specifically\nlogging.getLogger(\"deephaven.ui.render\").setLevel(level=logging.DEBUG)\n```\n\n----------------------------------------\n\nTITLE: Creating a Picker Component for Selection\nDESCRIPTION: Implements a picker component that allows selecting from predefined text options. The selected value is displayed using a text component, and both are arranged in a vertical flex container.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/docker/data/storage/notebooks/DEMO.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.ui as ui\nfrom deephaven.ui import use_state\n\n\n@ui.component\ndef picker():\n    value, set_value = use_state(\"\")\n\n    # Picker for selecting values\n    pick = ui.picker(\n        \"Text 1\",\n        \"Text 2\",\n        \"Text 3\",\n        label=\"Text\",\n        on_selection_change=set_value,\n        selected_key=value,\n    )\n\n    # Show current selection in a ui.text component\n    text = ui.text(\"Selection: \" + value)\n\n    # Display picker and output in a flex column\n    return ui.flex(\n        pick,\n        text,\n        direction=\"column\",\n        margin=10,\n        gap=10,\n    )\n\n\nresult = picker()\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation Navigation with toctree Directive\nDESCRIPTION: This snippet configures a Sphinx toctree directive for documentation navigation. It sets the maximum depth to 2 levels and uses a glob pattern to include all files in the current directory.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/plotly-express/docs/index.rst#2025-04-17_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n   :glob:\n\n   *\n```\n\n----------------------------------------\n\nTITLE: Building the Deephaven Matplotlib Plugin\nDESCRIPTION: Shell commands for building the Deephaven Matplotlib plugin as a wheel package that can be installed in a Deephaven environment.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/matplotlib/README.md#2025-04-17_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\npython -m build --wheel\n```\n\n----------------------------------------\n\nTITLE: Starting Deephaven Core with JavaScript Plugins\nDESCRIPTION: Launches the Deephaven server with specified JavaScript plugins (matplotlib and plotly examples) for development use.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/README.md#2025-04-17_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nSTART_OPTS=\"-Ddeephaven.jsPlugins.@deephaven/js-plugin-matplotlib=<deephaven-plugins-path>/plugins/matploltib/src/js -Ddeephaven.jsPlugins.@deephaven/js-plugin-plotly=<deephaven-plugins-path>/plugins/plotly/src/js\" ./gradlew server-jetty-app:run\n```\n\n----------------------------------------\n\nTITLE: Running Python Tests with Specific Python Version\nDESCRIPTION: Demonstrates how to run tests against a specific Python version (e.g., Python 3.12) using Tox.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/README.md#2025-04-17_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ntox -e py3.12\n```\n\n----------------------------------------\n\nTITLE: Creating a Deephaven plugin from local templates using cookiecutter\nDESCRIPTION: Command to create a Deephaven plugin using a local template repository. This requires having the deephaven-plugins repository on your local machine and uses the cookiecutter tool to generate the plugin structure.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/templates/README.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncookiecutter <path/to/deephaven-plugins>/templates/<template name>\n```\n\n----------------------------------------\n\nTITLE: Customizing Grid Component Colors in CSS\nDESCRIPTION: Shows how to customize specific component colors like grid headers and alternating row backgrounds using CSS variables.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/example-theme/src/js/README.md#2025-04-17_snippet_6\n\nLANGUAGE: css\nCODE:\n```\n--dh-color-grid-header-bg: var(--dh-color-gray-100);\n--dh-color-grid-row-0-bg: var(--dh-color-gray-200);\n--dh-color-grid-row-1-bg: var(--dh-color-gray-100);\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Building Deephaven UI Documentation\nDESCRIPTION: Shell commands to install dependencies required for building the Deephaven UI plugin documentation.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/README.md#2025-04-17_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\npip install -r ../../sphinx_ext/sphinx-requirements.txt\npip install dist/deephaven_plugin_ui-*.whl\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Types for Deephaven API\nDESCRIPTION: Definition of custom types used throughout the Deephaven API, including types for aggregation operations, grid indices, colors, component IDs, and various UI-related settings. These types provide strong typing for the API functions.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/DESIGN.md#2025-04-17_snippet_80\n\nLANGUAGE: python\nCODE:\n```\nAggregationOperation = Literal[\"COUNT\", \"COUNT_DISTINCT\", \"DISTINCT\", \"MIN\", \"MAX\", \"SUM\", \"ABS_SUM\", \"VAR\", \"AVG\", \"STD\", \"FIRST\", \"LAST\", \"UNIQUE\", \"SKIP\"]\n# An index of None means a header was selected\nGridIndex = [ColumnIndex | None, RowIndex | None]\nCellIndex = [ColumnIndex, RowIndex]\nColor = DeephavenColor | HexColor\nColumnIndex = int\nColumnName = str\nColumnData = list[Any]\n# ID of a component. Used for linking.\nComponentId = str\nContextMenuModeOption = Literal[\"CELL\", \"ROW_HEADER\", \"COLUMN_HEADER\"]\nContextMenuMode = ContextMenuModeOption | list[ContextMenuModeOption] | None\nDataBarAxis = Literal[\"PROPORTIONAL\", \"MIDDLE\", \"DIRECTIONAL\"]\nDataBarDirection = Literal[\"LTR\", \"RTL\"]\nDataBarValuePlacement = Literal[\"BESIDE\", \"OVERLAP\", \"HIDE\"]\n# TODO: Fill in the list of Deephaven Colors we allow\nDeephavenColor = Literal[...]\nHexColor = str\nLockType = Literal[\"shared\", \"exclusive\"]\nQuickFilterExpression = str\nRowData = dict[ColumnName, RowDataValue]\nRowIndex = int\nSelectionStyle = Literal[\"HIGHLIGHT\", \"CHECKBOX\"]\nSelectionArea = Literal[\"CELL\", \"ROW\", \"COLUMN\"]\nSelectionMode = Literal[\"SINGLE\", \"MULTIPLE\"]\nDensityMode = Literal[\"COMPACT\", \"REGULAR\", \"SPACIOUS\"]\nSentinel = Any\nLiteralSortDirection = Literal[\"ASC\", \"DESC\"]\nTableSortDirection = Union[LiteralSortDirection, SortDirection]\nTableData = dict[ColumnName, ColumnData]\nTransformedData = Any\n# Stringable is a type that is naturally convertible to a string\nStringable = str | int | float | bool\nItem = Stringable | ItemElement\nKey = Stringable\nActionKey = Key\nSelection = Sequence[Key]\nListViewItem = Stringable | ItemElement\nLocalDateConvertible = Union[None, LocalDate, str, datetime.date, datetime.datetime, numpy.datetime64, pandas.Timestamp]\nInstantConvertible = Union[None, Instant, int, str, datetime.datetime, numpy.datetime64, pandas.Timestamp]\nZonedDateTimeConvertible = Union[None, ZonedDateTime, str, datetime.datetime, numpy.datetime64, pandas.Timestamp]\nDate = Instant | LocalDate | ZonedDateTime | LocalDateConvertible | InstantConvertible | ZonedDateTimeConvertible\nGranularity = Literal[\"DAY\", \"HOUR\", \"MINUTE\", \"SECOND\"]\nMenuTriggerAction = Literal[\"FOCUS\", \"INPUT\", \"MANUAL\"]\n\nT = TypeVar(\"T\")\nCombination: TypeAlias = T | set[T] | Sequence[T]\n\nRowIndexCombination = Combination[RowIndex]\nColumnNameCombination = Combination[ColumnName]\nColumnIndexCombination = Combination[ColumnIndex]\nCellIndexCombination = Combination[CellIndex]\nSelectionStyleCombination = Combination[SelectionStyle]\n\n# Data for one cell. Returned with click handlers.\nclass CellData(TypedDict):\n    type: str\n    text: str\n    value: Any\n\n# Data for value of one column in a row. Returned with row press handlers.\nclass RowDataValue(CellData):\n  isExpandable: bool\n  isGrouped: bool\n\n# Set a filter for a dashboard. Filter will apply to all items with a matching column/type, except for items specified in the `exclude_ids` parameter\nclass DashboardFilter(TypedDict):\n  # Name of column to filter on\n  name: ColumnName\n\n  # Type of column to filter on\n  type: str\n\n  # Quick filter value to apply to the column\n  value: QuickFilterExpression\n\n  # Do not apply the filter to these items specified, even if they have a matching colum/type\n  exclude_ids: Optional[ComponentId | ComponentId[]];\n\n# Typed dictionary for settings that can be passed into a Dashboards initialization\nclass DashboardSettings(TypedDict):\n    # Whether to show headers on the panels. Defaults to `True`\n    # Note that if you use stacks with this option enabled, you will not be able to see all of the tabs in the stack\n    has_headers: Optional[bool]\n\n    # Whether the panels can be re-organized or resized by dragging. Defaults to `True`\n    reorder_enabled: Optional[bool]\n\n# Typed dictionary for links that can be added to a dashboard\nclass Link(TypeDict):\n    start: LinkPoint\n    end: LinkPoint\n\n# Typed dictionary for a link point\nclass LinkPoint(TypedDict):\n    # ID of the component to link to\n    id: ComponentId\n\n    # Column to link to\n    column: str\n\n# Typed dictionary for a column group\nclass ColumnGroup(TypedDict):\n    # Name of the group\n    name: str\n\n    # Children columns/groups in the group\n    children: list[str]\n\n    # Optional background color of the group header\n    color: NotRequired[str]\n\nclass ContextMenuActionParams(TypedDict):\n    \"\"\"\n    Parameters given to a context menu action\n    \"\"\"\n\n    value: Any\n    \"\"\"\n    Value of the cell.\n    \"\"\"\n\n    text_value: str\n    \"\"\"\n    Rendered text for the cell.\n    \"\"\"\n\n    column_name: str\n    \"\"\"\n    Name of the column.\n    \"\"\"\n\n    is_column_header: bool\n    \"\"\"\n    Whether the context menu was opened on a column header.\n    \"\"\"\n\n    is_row_header: bool\n    \"\"\"\n    Whether the context menu was opened on a row header.\n    \"\"\"\n\n\nContextMenuAction = Callable[[ContextMenuActionParams], None]\n\"\"\"\nThe action to execute when the context menu item is clicked.\n\"\"\"\n\n\nclass ContextMenuItemBase(TypedDict):\n    \"\"\"\n    Base props that context menu items and submenu items share.\n    \"\"\"\n\n    title: str\n    \"\"\"\n    Title to display for the action.\n    \"\"\"\n\n    icon: NotRequired[str]\n    \"\"\"\n    The name of the icon to display next to the action.\n    The name must be a valid name for ui.icon.\n    \"\"\"\n\n    description: NotRequired[str]\n    \"\"\"\n    Description for the action. Will be used as a tooltip for the action.\n    \"\"\"\n\n\nclass ContextMenuActionItem(ContextMenuItemBase):\n    \"\"\"\n    An item that appears in a context menu and performs an action when clicked.\n    \"\"\"\n\n    action: ContextMenuAction\n    \"\"\"\n    Action to run when the menu item is clicked.\n    \"\"\"\n\n\nclass ContextMenuSubmenuItem(ContextMenuItemBase):\n    \"\"\"\n    An item that contains a submenu for a context menu.\n    \"\"\"\n\n    actions: list[\"ResolvableContextMenuItem\"]\n    \"\"\"\n    A list of actions that will form the submenu for the item.\n    \"\"\"\n\n\nContextMenuItem = ContextMenuActionItem | ContextMenuSubmenuItem\n\"\"\"\nAn item that can appear in a context menu.\nMay contain an action item or a submenu item.\n\"\"\"\n\nResolvableContextMenuItem = (\n    ContextMenuItem\n    | Callable[\n        [ContextMenuActionParams], ContextMenuItem | List[ContextMenuItem] | None\n    ]\n)\n\"\"\"\nA context menu item or a function that returns a list of context menu items or None.\nThis can be used to dynamically generate context menu items based on the cell the menu is opened on.\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Creating ItemTableSource for Deephaven UI Components (Python)\nDESCRIPTION: Defines the function signature for creating item table sources that wrap Tables or PartitionedTables to provide additional information for creating complex items from tabular data.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/DESIGN.md#2025-04-17_snippet_58\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.ui as ui\nui.item_table_source(\n    table: Table | PartitionedTable,\n    key_column: ColumnName | None = None,\n    label_column: ColumnName | None = None,\n    description_column: ColumnName | None = None,\n    icon_column: ColumnName | None = None,\n    title_column: ColumnName | None = None,\n    actions: ListActionGroupElement | ListActionMenuElement | None = None,\n) -> ItemTableSource:\n```\n\n----------------------------------------\n\nTITLE: Date Field Label Position Configuration\nDESCRIPTION: Shows how to configure label positioning for date fields.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/date_field.md#2025-04-17_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef date_field_label_position_examples():\n    return [\n        ui.date_field(\n            label=\"Test Label\",\n        ),\n        ui.date_field(\n            label=\"Test Label\",\n            label_position=\"side\",\n        ),\n    ]\n\nmy_date_field_label_position_examples = date_field_label_position_examples()\n```\n\n----------------------------------------\n\nTITLE: Setting Up Python Environment for Plugin Development\nDESCRIPTION: These shell commands set up a Python virtual environment and install required dependencies for plugin development.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/README.md#2025-04-17_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\npython -m venv .venv\nsource .venv/bin/activate\npip install --upgrade -r requirements.txt\npip install click watchdog\n```\n\n----------------------------------------\n\nTITLE: Implementing ListView Component in Python\nDESCRIPTION: Function definition for creating a list view component that supports multiple item types, selection modes, and various callback handlers.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/DESIGN.md#2025-04-17_snippet_37\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.ui as ui\nui.list_view(\n    *children: Item | Table | ItemTableSource,\n    selection_mode: SelectionMode | None = 'MULTIPLE',\n    density: Density | None = \"COMPACT\",\n    default_selected_keys: Selection | None = None,\n    selected_keys: Selection | None = None,\n    render_empty_state: Element | None = None,\n    on_selection_change: Callable[[Selection], None] | None = None,\n    on_change: Callable[[Selection], None] | None = None,\n    **props: Any\n) -> ListViewElement\n```\n\n----------------------------------------\n\nTITLE: Building the Deephaven Plugin Utilities Package\nDESCRIPTION: Command to build the Deephaven Plugin Utilities package as a Python wheel. The resulting wheel file will be stored in the 'dist/' directory for installation into a Deephaven environment.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/utilities/README.md#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npython -m build --wheel\n```\n\n----------------------------------------\n\nTITLE: Setting Tab Orientation in Python\nDESCRIPTION: Shows how to set tab orientation to vertical using the orientation prop.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/tabs.md#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef ui_tabs_orientation_examples():\n    return [\n        ui.tabs(\n            ui.tab(\"There is no prior chat history with John Doe.\", title=\"John Doe\"),\n            ui.tab(\"There is no prior chat history with Jane Doe.\", title=\"Jane Doe\"),\n            ui.tab(\n                \"There is no prior chat history with Joe Bloggs.\", title=\"Joe Bloggs\"\n            ),\n            orientation=\"vertical\",\n        ),\n        ui.tabs(\n            ui.tab(\"There is no prior chat history with John Doe.\", title=\"John Doe\"),\n            ui.tab(\"There is no prior chat history with Jane Doe.\", title=\"Jane Doe\"),\n            ui.tab(\n                \"There is no prior chat history with Joe Bloggs.\", title=\"Joe Bloggs\"\n            ),\n        ),\n    ]\n\n\nmy_tabs_orientation_examples = ui_tabs_orientation_examples()\n```\n\n----------------------------------------\n\nTITLE: Configuring Menu Trigger Alignment and Direction\nDESCRIPTION: Shows how to use the align and direction props to control the positioning of the menu relative to the trigger.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/menu_trigger.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\nmy_align_example = ui.flex(\n    ui.menu_trigger(\n        ui.action_button(\"Edit\"),\n        ui.menu(\n            ui.item(\"Cut\"),\n            ui.item(\"Copy\"),\n            ui.item(\"Paste\"),\n        ),\n        align=\"start\",\n    ),\n    ui.menu_trigger(\n        ui.action_button(\"View\"),\n        ui.menu(\n            ui.item(\"Side bar\"),\n            ui.item(\"Page options\"),\n            ui.item(\"Edit panel\"),\n        ),\n        align=\"end\",\n        direction=\"top\",\n        should_flip=False,\n    ),\n    ui.menu_trigger(\n        ui.action_button(\"Edit\"),\n        ui.menu(\n            ui.item(\"Cut\"),\n            ui.item(\"Copy\"),\n            ui.item(\"Paste\"),\n        ),\n        align=\"start\",\n        direction=\"start\",\n    ),\n    ui.menu_trigger(\n        ui.action_button(\"View\"),\n        ui.menu(\n            ui.item(\"Side bar\"),\n            ui.item(\"Page options\"),\n            ui.item(\"Edit panel\"),\n        ),\n        align=\"end\",\n        direction=\"end\",\n    ),\n    gap=\"size-100\",\n)\n```\n\n----------------------------------------\n\nTITLE: Logging State Values During and After Updates in deephaven.ui\nDESCRIPTION: This example demonstrates that state values are fixed within a render and don't change even when a state update is called. The print statement logs the current state value (0) even though set_number has been called to update it.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/add-interactivity/state-as-a-snapshot.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef counter():\n    number, set_number = ui.use_state(0)\n\n    def handle_press():\n        set_number(number + 5)\n        print(number)\n\n    return [ui.heading(f\"{number}\"), ui.button(\"+5\", on_press=handle_press)]\n\n\nexample_counter = counter()\n```\n\n----------------------------------------\n\nTITLE: Building Specific Plugins\nDESCRIPTION: This command demonstrates how to build and install specific plugins using the plugin_builder.py script.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/README.md#2025-04-17_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\npython tools/plugin_builder.py plotly-express ui\n```\n\n----------------------------------------\n\nTITLE: Building the Deephaven KeyCloak Authentication Plugin\nDESCRIPTION: Commands for setting up and building the KeyCloak authentication plugin for Deephaven. The build process installs dependencies and generates the final output file in the dist directory.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/auth-keycloak/src/js/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Adding UI Plugin to Existing Docker Installation\nDESCRIPTION: Command to install the UI plugin in a running Deephaven Docker container named 'deephaven'.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/installation.md#2025-04-17_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ndocker exec deephaven pip install deephaven-plugin-ui\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Tox for Deephaven JSON Plugin\nDESCRIPTION: Executes the test suite for the JSON plugin using Tox, which is a standardized testing tool for Python projects that automates and standardizes testing.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/json/README.md#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ntox\n```\n\n----------------------------------------\n\nTITLE: Sequence Diagram: Client-to-Server Message Flow\nDESCRIPTION: Shows how the client sends messages to the server in a bidirectional setup, including the handling of message data and optional references.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/ARCHITECTURE.md#2025-04-17_snippet_4\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n  participant J as JS Plugin\n  participant P as Plugin\n  participant S as Server\n  J ->> S: Fetch object info\n  S -->> J: Widget data and exports\n  J ->> S: widget.sendMessage('message', [references])\n  S ->> P: MessageStream.on_data(payload, [references])\n```\n\n----------------------------------------\n\nTITLE: Configuring environment for local plugin development\nDESCRIPTION: Environment configuration for web-client-ui to enable local plugin development by setting the plugins development port.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/example-theme/src/js/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nVITE_JS_PLUGINS_DEV_PORT=4100\n```\n\n----------------------------------------\n\nTITLE: Verifying Deephaven UI Installation\nDESCRIPTION: Python code snippet to verify that the UI plugin is working correctly by creating a simple heading component.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/installation.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\nhello_world = ui.heading(\"Hello World!\")\n```\n\n----------------------------------------\n\nTITLE: Basic Text Field Implementation in Python\nDESCRIPTION: Creates a basic text field with a label and change event handler that prints the updated value.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/text_field.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\nmy_text_field_basic = ui.text_field(\n    label=\"Description\", on_change=lambda value: print(f\"Text changed to {value}\")\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Density Heatmap in Python\nDESCRIPTION: Demonstrates how to create a basic density heatmap visualization using the iris dataset, plotting PetalLength against PetalWidth.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/plotly-express/docs/density_heatmap.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.plot.express as dx\niris = dx.data.iris()\n\nheatmap = dx.density_heatmap(iris, x=\"PetalLength\", y=\"PetalWidth\")\n```\n\n----------------------------------------\n\nTITLE: Feedback Form with Contradictory State Variables in Deephaven UI (Python)\nDESCRIPTION: Example of a feedback form that uses potentially contradictory state variables (is_sending and is_sent). This approach can lead to impossible states if state updates aren't coordinated properly.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/managing-state/choose-the-state-structure.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\nimport threading\n\n\n@ui.component\ndef feedback_form():\n    text, set_text = ui.use_state(\"\")\n    is_sending, set_is_sending = ui.use_state(False)\n    is_sent, set_is_sent = ui.use_state(False)\n\n    def finish_submit():\n        set_is_sending(False)\n        set_is_sent(True)\n\n    def handle_submit():\n        set_is_sending(True)\n        threading.Timer(5, finish_submit).start()\n\n    if is_sent:\n        return ui.heading(\"Thanks for the feedback!\")\n\n    return ui.form(\n        ui.text(\"Do you have any feedback?\"),\n        ui.text_area(value=text, on_change=set_text, is_disabled=is_sending),\n        ui.button(\"Send\", type=\"submit\"),\n        ui.text(\"Sending...\") if is_sending else None,\n        on_submit=handle_submit,\n    )\n\n\nfeedback_form_example = feedback_form()\n```\n\n----------------------------------------\n\nTITLE: Setting State Value in Deephaven UI\nDESCRIPTION: Shows how to update a state value using the state setter function.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/add-interactivity/update-dictionaries-in-state.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nset_x(5)\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Documentation Building\nDESCRIPTION: This command installs the necessary dependencies for building plugin documentation.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/README.md#2025-04-17_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\npip install -r sphinx_ext/sphinx-requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Batching Multiple State Updates in deephaven.ui\nDESCRIPTION: This snippet demonstrates how deephaven.ui batches multiple state updates. It shows that calling set_number(number + 1) three times in a row does not increment the counter by 3, as the state value remains fixed for each render.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/add-interactivity/queueing-updates.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef counter():\n    number, set_number = ui.use_state(0)\n\n    def handle_press():\n        set_number(number + 1)\n        set_number(number + 1)\n        set_number(number + 1)\n\n    return [ui.heading(f\"{number}\"), ui.button(\"+3\", on_press=handle_press)]\n\nexample_counter = counter()\n```\n\n----------------------------------------\n\nTITLE: Installing and Building Deephaven Plugin\nDESCRIPTION: Commands to install dependencies and build the plugin. The output will be generated in the dist/index.js file.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/table-example/src/js/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Button Without Event Handlers in Python\nDESCRIPTION: A simple example of creating a button component with deephaven.ui that doesn't have any event handling functionality.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/add-interactivity/respond-to-events.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef my_button():\n    return ui.button(\"I don't do anything\")\n\n\nno_button_event = my_button()\n```\n\n----------------------------------------\n\nTITLE: Adding UI Plugin to Existing pip Installation\nDESCRIPTION: Command to add the UI plugin to an existing pip installation of Deephaven.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/installation.md#2025-04-17_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\npip install deephaven-plugin-ui\n```\n\n----------------------------------------\n\nTITLE: Running unit tests for Deephaven Plugin\nDESCRIPTION: Executes unit tests for the Deephaven Plugin for Charts using tox.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/plotly-express/README.md#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ntox -e py\n```\n\n----------------------------------------\n\nTITLE: Setting up Development Environment for Deephaven Plugin Packaging\nDESCRIPTION: Commands to create a Python virtual environment and install the required dependencies for development. This includes upgrading pip and setuptools and installing the build package.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/packaging/README.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npython -m venv .venv\nsource .venv/bin/activate\npip install --upgrade pip setuptools\npip install build\n```\n\n----------------------------------------\n\nTITLE: Importing Deephaven UI Package\nDESCRIPTION: Basic import statement to access the deephaven.ui package functionality.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/README.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n```\n\n----------------------------------------\n\nTITLE: Basic Render Tree Visualization - Mermaid\nDESCRIPTION: Mermaid flowchart depicting the render tree structure of the basic random number generator application.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/describing/your-ui-as-a-tree.md#2025-04-17_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    A[app] -->|renders| B[ui.flex]\n    B -->|renders| C[ui.heading]\n    B -->|renders| D[random_generator]\n    D -->|renders| E[ui.flex]\n    E -->|renders| F[ui.text]\n    E -->|renders| G[ui.button]\n```\n\n----------------------------------------\n\nTITLE: Sequence Diagram: Plugin Registration and Widget Processing Flow\nDESCRIPTION: Illustrates the complete flow from plugin registration to widget display, showing how the server, plugin, and web IDE interact when code is run and widgets are requested.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/ARCHITECTURE.md#2025-04-17_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n  participant W as Web IDE\n  participant J as JS Plugin\n  participant P as Plugin\n  participant S as Server\n  P ->> S: Register\n  W ->> S: Run code\n  activate S\n  S ->> P: is_type(object)\n  P -->> S: Matching plugin\n  S ->> W: Widgets\n  deactivate S\n  W ->> J: Panel open event\n  J ->> S: Fetch object info\n  activate S\n  S ->> P: serialize(object)\n  P -->> S: Payload\n  S -->> J: Widget data and exports\n  deactivate S\n  J ->> W: Display panel\n```\n\n----------------------------------------\n\nTITLE: Decorator-based Memoization in Python\nDESCRIPTION: Demonstrates using a decorator pattern for memoization at the top level of the application.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/DESIGN.md#2025-04-17_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.ui as ui\nfrom deephaven.parquet import read\n\n@ui.memo\ndef parquet_table(path: str):\n    return read(path)\n\n@ui.component\ndef my_caching_component(parquet_path=\"/data/stocks.parquet\"):\n    value, set_value = ui.use_state(\"\")\n    source = parquet_table(parquet_path)\n    t = source.where(f\"sym=`{value}`\")\n    return ui.flex(\n        [\n            ui.text_input(\n                value=value, on_change=lambda event: set_value(event[\"value\"])\n            ),\n            t,\n        ]\n    )\n```\n\n----------------------------------------\n\nTITLE: Initializing TimeField Component in Python\nDESCRIPTION: TimeField component definition showing the function signature and parameters. Supports various time input types and formatting options with configurable granularity and change handlers.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/DESIGN.md#2025-04-17_snippet_71\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.ui as ui\nui.time_field(\n    placeholder_value: Time | None = None,\n    value: Time | None = None,\n    default_value: Time | None = None,\n    min_value: Time | None = None,\n    max_value: Time | None = None,\n    granularity: Granularity | None = None,\n    on_change: Callable[[Time], None] | None = None,\n    **props: Any\n) -> TimeFieldElement\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugin Builder for Minimal Setup\nDESCRIPTION: This command configures the plugin_builder.py script with minimal dependencies for building plugins.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/README.md#2025-04-17_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\npython tools/plugin_builder.py --configure=min\n```\n\n----------------------------------------\n\nTITLE: Creating Dialogs with Different Sizes in Python using Deephaven UI\nDESCRIPTION: This example shows how to create dialogs with different sizes: small, medium, and large.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/dialog.md#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef small_example():\n    is_open, set_open = ui.use_boolean()\n    return ui.dialog_trigger(\n        ui.action_button(\"Small\", on_press=set_open.on),\n        ui.dialog(\n            ui.heading(\"Profile\"),\n            ui.content(\n                ui.form(ui.text_field(label=\"Name\"), ui.checkbox(\"Make private\"))\n            ),\n            ui.button_group(\n                ui.button(\"Cancel\", variant=\"secondary\", on_press=set_open.off),\n                ui.button(\"Confirm\", variant=\"accent\", on_press=set_open.off),\n            ),\n            size=\"S\",\n        ),\n        is_open=is_open,\n    )\n\nmy_small_example = small_example()\n\n@ui.component\ndef medium_example():\n    is_open, set_open = ui.use_boolean()\n    return ui.dialog_trigger(\n        ui.action_button(\"Medium\", on_press=set_open.on),\n        ui.dialog(\n            ui.heading(\"Profile\"),\n            ui.content(\n                ui.form(ui.text_field(label=\"Name\"), ui.checkbox(\"Make private\"))\n            ),\n            ui.button_group(\n                ui.button(\"Cancel\", variant=\"secondary\", on_press=set_open.off),\n                ui.button(\"Confirm\", variant=\"accent\", on_press=set_open.off),\n            ),\n            size=\"M\",\n        ),\n        is_open=is_open,\n    )\n\nmy_medium_example = medium_example()\n\n@ui.component\ndef large_example():\n    is_open, set_open = ui.use_boolean()\n    return ui.dialog_trigger(\n        ui.action_button(\"Large\", on_press=set_open.on),\n        ui.dialog(\n            ui.heading(\"Profile\"),\n            ui.content(\n                ui.form(ui.text_field(label=\"Name\"), ui.checkbox(\"Make private\"))\n            ),\n            ui.button_group(\n                ui.button(\"Cancel\", variant=\"secondary\", on_press=set_open.off),\n                ui.button(\"Confirm\", variant=\"accent\", on_press=set_open.off),\n            ),\n            size=\"L\",\n        ),\n        is_open=is_open,\n    )\n\nmy_large_example = large_example()\n```\n\n----------------------------------------\n\nTITLE: Controlling Action Menu Open State\nDESCRIPTION: Shows how to control the open state of action menus using both controlled (is_open with on_open_change) and uncontrolled (default_open) approaches. Includes state display for the controlled menu.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/action_menu.md#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef ui_action_menu_open_examples():\n    is_open, set_is_open = ui.use_state(False)\n    return [\n        ui.text(f\"Controlled menu open state: {is_open}\"),\n        ui.action_menu(\n            \"Cut\",\n            \"Copy\",\n            \"Paste\",\n            is_open=is_open,\n            on_open_change=set_is_open,\n        ),\n        ui.action_menu(\n            \"Cut\",\n            \"Copy\",\n            \"Paste\",\n            default_open=True,\n        ),\n    ]\n\n\nmy_action_menu_open_examples = ui_action_menu_open_examples()\n```\n\n----------------------------------------\n\nTITLE: Improved State Structure in Deephaven UI\nDESCRIPTION: Code snippet showing the improved approach to state management by storing only essential data (ID reference) instead of duplicating objects.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/managing-state/choose-the-state-structure.md#2025-04-17_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nitems = [{\"title\": \"peanuts\", \"id\": 0}, ...]\nselected_id = 0\n```\n\n----------------------------------------\n\nTITLE: Configuring Deephaven Table Plugin\nDESCRIPTION: Python code demonstrating how to create a table and configure it to use the JavaScript plugin by setting the PluginName attribute.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/table-example/src/js/README.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import empty_table\n\nt = (\n    empty_table(5)\n    .update(\"X=i\")\n    .with_attributes({\"PluginName\": \"@deephaven/js-plugin-table-example\"})\n)\n```\n\n----------------------------------------\n\nTITLE: Customizing Histogram Bin Sizes in Python\nDESCRIPTION: Shows how to modify histogram bin sizes using the nbins parameter, demonstrating different bin counts and their effects on visualization clarity.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/plotly-express/docs/histogram.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.plot.express as dx\niris = dx.data.iris()\n\n# subset to get specific species\nvirginica = iris.where(\"Species == `virginica`\")\n\n# too many bins will produce jagged, disconnected histograms\nhist_20_bins = dx.histogram(setosa, x=\"SepalLength\", nbins=20)\n\n# too few bins will mask distributional information\nhist_3_bins = dx.histogram(setosa, x=\"SepalLength\", nbins=3)\n\n# play with the `nbins` parameter to get a good visualization\nhist_8_bins = dx.histogram(setosa, x=\"SepalLength\", nbins=8)\n```\n\n----------------------------------------\n\nTITLE: Starting Server with Custom Arguments\nDESCRIPTION: This command demonstrates how to start the server with custom arguments, overriding the default 'no-browser' setting.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/README.md#2025-04-17_snippet_24\n\nLANGUAGE: shell\nCODE:\n```\npython tools/plugin_builder.py --server-arg --browser\n```\n\n----------------------------------------\n\nTITLE: Building Single JavaScript Plugin in Watch Mode\nDESCRIPTION: Shows how to build a single JavaScript plugin in watch mode without starting the dev server.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/README.md#2025-04-17_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ncd plugins/plugin\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Sequence Diagram: Rendering and Interaction Flow in deephaven.ui\nDESCRIPTION: Mermaid sequence diagram illustrating the process of rendering a UI component and handling user interactions in deephaven.ui.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/architecture.md#2025-04-17_snippet_4\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n  participant U as User\n  participant W as Web UI\n  participant UIP as UI Plugin\n  participant C as Core\n  participant SP as Server Plugin\n\n  U->>W: Run notebook\n  W->>C: Execute code\n  C->>SP: is_type(object)\n  SP-->>C: Matching plugin\n  C-->>W: VariableChanges(added=[t, tft])\n\n  W->>UIP: Open tft\n  activate UIP\n  UIP->>C: Fetch tft\n  C-->>UIP: Export tft (Element)\n\n  Note over UIP: UI knows about object tft<br/>double_text_filter_table not executed yet\n\n  UIP->>SP: Render tft (initialState)\n  SP->>SP: Run double_text_filter_table\n  Note over SP: double_text_filter_table executes, running text_filter_table twice\n  SP-->>UIP: Result (document=[panel(tft1), pane(tft2)], exported_objects=[tft1, tft2])\n  UIP-->>W: Display Result\n  deactivate UIP\n\n  U->>UIP: Change text input 1\n  activate UIP\n  UIP->>SP: Change state\n  SP->>SP: Run double_text_filter_table\n  Note over SP: double_text_filter_table executes, text_filter_table only <br/>runs once for the one changed input<br/>only exports the new table, as client already has previous tables\n  SP-->>UIP: Result (document=[panel(tft1'), panel(tft2)], <br/>state={}, exported_objects=[tft1'])\n  UIP-->>W: Display Result\n  deactivate UIP\n```\n\n----------------------------------------\n\nTITLE: Creating a Disabled Number Field in Python with Deephaven UI\nDESCRIPTION: This snippet demonstrates how to create a disabled number field, which prevents user interaction, using Deephaven's UI library.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/number_field.md#2025-04-17_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\nmy_number_field_is_disabled_example = ui.number_field(label=\"Age\", is_disabled=True)\n```\n\n----------------------------------------\n\nTITLE: Installing Deephaven UI with pip\nDESCRIPTION: Command to install both Deephaven server and the UI plugin using pip package manager.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/installation.md#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npip install deephaven-server deephaven-plugin-ui\n```\n\n----------------------------------------\n\nTITLE: Starting the web-client-ui development server\nDESCRIPTION: Terminal commands to install dependencies and start the web-client-ui development server for previewing theme changes.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/example-theme/src/js/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Component Scoping in Python\nDESCRIPTION: Demonstrates nested component scoping using context types CLIENT and USER. Shows how component scoping restrictions work and proper nesting patterns.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/DESIGN.md#2025-04-17_snippet_82\n\nLANGUAGE: python\nCODE:\n```\n@ui.component(context=ui.ContextType.CLIENT)\ndef stock_table(source: Table):\n    sym, set_sym = use_state(\"AAPL\")\n    t = source.where(f\"sym=`{sym}`\")\n    return [ui.text_input(value=sym, on_change=set_sym), t]\n\n@ui.component(context=ui.ContextType.USER)\ndef user_path_component():\n    path, set_path = use_state(\"/data/stocks.parquet\")\n    t = use_memo(lambda: read(path), [path])\n    return [ui.text_input(value=path, on_change=set_path), stock_table(t)]\n\nresult = user_path_component()\n\n@ui.component(context=ui.ContextType.CLIENT)\ndef bad_scoping():\n    return user_path_component()\n```\n\n----------------------------------------\n\nTITLE: Reinstalling Python Plugin Wheels\nDESCRIPTION: Shows how to reinstall Python plugin wheels without updating dependencies, useful for development without version bumps.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/README.md#2025-04-17_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\npip install --force-reinstall --no-deps <deephaven-plugins-path>/plugins/*/dist/*.whl\n```\n\n----------------------------------------\n\nTITLE: Setting up Python Development Environment for Deephaven JSON Plugin\nDESCRIPTION: Creates a Python virtual environment and installs the necessary dependencies for developing the Deephaven JSON plugin. This includes creating a virtual environment, activating it, and installing core packages needed for development.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/json/README.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npython3 -m venv .venv\nsource .venv/bin/activate\npip install --upgrade pip setuptools build deephaven-plugin\n```\n\n----------------------------------------\n\nTITLE: Creating Basic 3D Scatter Plot in Python\nDESCRIPTION: Creates a basic 3D scatter plot using the iris dataset, mapping sepal width, length and petal width to x, y, and z axes respectively.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/plotly-express/docs/scatter-3d.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.plot.express as dx\niris = dx.data.iris()\n\nscatter_plot_3D = dx.scatter_3d(iris, x=\"SepalWidth\", y=\"SepalLength\", z=\"PetalWidth\")\n```\n\n----------------------------------------\n\nTITLE: Starting Deephaven Server\nDESCRIPTION: Command to start the Deephaven server after pip installation.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/installation.md#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ndeephaven server\n```\n\n----------------------------------------\n\nTITLE: Building Python Plugin Wheels\nDESCRIPTION: Builds wheel distributions for Python plugins (matplotlib and plotly examples) for development use.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/README.md#2025-04-17_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npython -m build --wheel plugins/matplotlib\npython -m build --wheel plugins/plotly\n```\n\n----------------------------------------\n\nTITLE: Range Slider Example with Incorrect Updates\nDESCRIPTION: Complete component example showing incorrect dictionary state updates that don't trigger re-renders.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/add-interactivity/update-dictionaries-in-state.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef range_example():\n    value, set_value = ui.use_state({\"start\": 0, \"end\": 50})\n\n    def handle_press():\n        value[\"end\"] = value[\"end\"] + 1\n\n    return [\n        ui.range_slider(value=value, label=\"Range\"),\n        ui.button(\"Update\", on_press=handle_press),\n    ]\n\nmy_range_example = range_example()\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging for Deephaven UI Plugin\nDESCRIPTION: Python code to configure logging for the Deephaven UI plugin, including setting log levels and output stream.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/README.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport logging\nimport sys\n\n# Have the root logger output to stdout instead of stderr\nlogging.basicConfig(stream=sys.stdout, level=logging.WARNING)\n\n# Set the log level for the deephaven.ui logger to DEBUG\nlogging.getLogger(\"deephaven.ui\").setLevel(level=logging.DEBUG)\n```\n\n----------------------------------------\n\nTITLE: Building the Deephaven Plugin Package\nDESCRIPTION: Command to build a wheel distribution package using Python's build module. The resulting wheel file will be stored in the dist/ directory.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/packaging/README.md#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npython -m build --wheel\n```\n\n----------------------------------------\n\nTITLE: Implementing Art Bucket List with Problematic Shallow Copy\nDESCRIPTION: Initial implementation using shallow copy that causes unintended state sharing between two separate lists. Shows how mutations can affect both lists due to shared references.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/add-interactivity/update-lists-in-state.md#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\ninitial_art = [\n    {\"id\": 0, \"name\": \"Mona Lisa\", \"seen\": False},\n    {\"id\": 1, \"name\": \"The Starry Night\", \"seen\": False},\n    {\"id\": 2, \"name\": \"The Scream\", \"seen\": True},\n    {\"id\": 3, \"name\": \"The Persistence of Memory\", \"seen\": False},\n]\n\n\n@ui.component\ndef item_list(artworks, on_toggle):\n    return [\n        ui.checkbox(\n            artwork[\"name\"],\n            is_selected=artwork[\"seen\"],\n            on_change=lambda value, artwork=artwork: on_toggle(artwork[\"id\"], value),\n        )\n        for artwork in artworks\n    ]\n\n\n@ui.component\ndef bucket_list():\n    my_list, set_my_list = ui.use_state(initial_art)\n    your_list, set_your_list = ui.use_state(initial_art)\n\n    def handle_toggle_my_list(artworkId, next_seen):\n        my_list_copy = my_list.copy()\n        artwork = next((a for a in my_list_copy if a[\"id\"] == artworkId), None)\n        artwork[\"seen\"] = next_seen\n        set_my_list(my_list_copy)\n\n    def handle_toggle_your_list(artworkId, next_seen):\n        your_list_copy = your_list.copy()\n        artwork = next((a for a in your_list_copy if a[\"id\"] == artworkId), None)\n        artwork[\"seen\"] = next_seen\n        set_your_list(your_list_copy)\n\n    return [\n        ui.heading(\"Art Bucket List\"),\n        ui.heading(\"My list of art to see:\", level=2),\n        item_list(my_list, handle_toggle_my_list),\n        ui.heading(\"Your list of art to see:\", level=2),\n        item_list(your_list, handle_toggle_your_list),\n    ]\n\n\nbucket_list_example = bucket_list()\n```\n\n----------------------------------------\n\nTITLE: Implementing Alternative Multi-Query Component Pattern\nDESCRIPTION: Showcases an alternative approach to multi-query components using a custom function that specifies which tables to fetch from different queries. This method requires client-side fetching rather than server-side resolution.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/DESIGN.md#2025-04-17_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n# Persistent Query 'A'\nt = empty_table(100).update(\"a=i\")\n\n# Persistent Query 'B'\nt = empty_table(100).update(\"b=i\")\n\n# Executed in console session or a 3rd query\nimport deephaven.ui as ui\n\n\n@ui.component\ndef multi_query():\n    # Object that contains metadata about the table source, then UI client must fetch\n    t1 = ui.pq_table(\"Query A\", \"t\")\n    t2 = ui.pq_table(\"Query B\", \"t\")\n    return [t1, t2]\n\n\nmq = multi_query()\n```\n\n----------------------------------------\n\nTITLE: Configuring Development Dependencies for Deephaven Plugins\nDESCRIPTION: A requirements file listing the development dependencies including pre-commit hooks version 3.3.3 and essential build tools like pip, setuptools, and tox for the Deephaven plugins project.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/requirements.txt#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npre-commit==3.3.3\nbuild\npip\nsetuptools\ntox\n```\n\n----------------------------------------\n\nTITLE: Button Link Implementation\nDESCRIPTION: Demonstrates how to create a button that functions as a link to navigate to another page.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/button.md#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\nbtn = ui.button(\"Go to deephaven.io\", href=\"https://deephaven.io\")\n```\n\n----------------------------------------\n\nTITLE: Controlling Menu Open State\nDESCRIPTION: Demonstrates how to use is_open and default_open props to control the open state of the menu trigger.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/menu_trigger.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef open_example():\n    is_open, set_open = ui.use_boolean(True)\n    return ui.flex(\n        ui.text(f\"Is Open: {is_open}\"),\n        ui.menu_trigger(\n            ui.action_button(\"View\"),\n            ui.menu(\n                ui.item(\"Side bar\"),\n                ui.item(\"Page options\"),\n                ui.item(\"Edit panel\"),\n                selection_mode=\"multiple\",\n            ),\n            is_open=is_open,\n            on_open_change=set_open,\n        ),\n    )\n\n\nmy_open_example = open_example()\n```\n\n----------------------------------------\n\nTITLE: API Reference for Deephaven Plot Express Timeline Function\nDESCRIPTION: This code block represents a placeholder for the API reference of the timeline function in Deephaven Plot Express. It uses a special syntax for automatic function documentation generation.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/plotly-express/docs/timeline.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n{eval-rst}\n.. dhautofunction:: deephaven.plot.express.timeline\n```\n\n----------------------------------------\n\nTITLE: Installing Pre-commit Hooks for Python Development\nDESCRIPTION: Sets up a Python virtual environment, installs required packages, and configures pre-commit hooks for code formatting and linting.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npython -m venv .venv\nsource .venv/bin/activate\npip install --upgrade -r requirements.txt\npre-commit install\n```\n\n----------------------------------------\n\nTITLE: Documenting Deephaven Plot Express Indicator Function Using reStructuredText\nDESCRIPTION: Uses reStructuredText eval directive to auto-generate API documentation for the deephaven.plot.express.indicator function by extracting docstrings and signature information.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/plotly-express/docs/indicator.md#2025-04-17_snippet_16\n\nLANGUAGE: rst\nCODE:\n```\n.. dhautofunction:: deephaven.plot.express.indicator\n```\n\n----------------------------------------\n\nTITLE: Configuring Action Menu Alignment and Direction\nDESCRIPTION: Demonstrates various combinations of align and direction properties to control the positioning and opening direction of action menus. Examples show start/top, start/start, and end/end configurations.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/action_menu.md#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef ui_action_menu_align_direction_examples():\n    return [\n        ui.action_menu(\"Cut\", \"Copy\", \"Paste\", align=\"start\"),\n        ui.action_menu(\n            \"Cut\", \"Copy\", \"Paste\", align=\"start\", direction=\"top\", should_flip=False\n        ),\n        ui.action_menu(\n            \"Cut\",\n            \"Copy\",\n            \"Paste\",\n            align=\"start\",\n            direction=\"start\",\n        ),\n        ui.action_menu(\n            \"Cut\",\n            \"Copy\",\n            \"Paste\",\n            align=\"end\",\n            direction=\"end\",\n        ),\n    ]\n\n\nmy_action_menu_align_direction_examples = ui_action_menu_align_direction_examples()\n```\n\n----------------------------------------\n\nTITLE: Installing Python Plugin Wheels\nDESCRIPTION: Installs built Python plugin wheels (plotly and matplotlib examples) into the deephaven-core virtual environment.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/README.md#2025-04-17_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\npip install <deephaven-plugins-path>/plotly/plugins/dist/deephaven_plugin_plotly-0.0.1.dev2-py3-none-any.whl <deephaven-plugins-path>/plugins/matplotlib/dist/deephaven_plugin_matplotlib-0.1.1-py3-none-any.whl\n```\n\n----------------------------------------\n\nTITLE: Formatting UITable Columns in Python\nDESCRIPTION: Method to specify the formatting for displaying a column in a UITable. It takes the column name and a format string as parameters.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/DESIGN.md#2025-04-17_snippet_68\n\nLANGUAGE: python\nCODE:\n```\nui_table.format(column: ColumnName, format: str) -> UITable\n```\n\n----------------------------------------\n\nTITLE: Building Deephaven Plugin wheel\nDESCRIPTION: Builds the Deephaven Plugin for Charts and stores the resulting wheel in the 'dist/' directory.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/plotly-express/README.md#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npython -m build --wheel\n```\n\n----------------------------------------\n\nTITLE: Sequence Diagram: Establishing Bidirectional Communication\nDESCRIPTION: Shows how bidirectional communication is established between server and client, illustrating the creation of MessageStream and initial data exchange.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/ARCHITECTURE.md#2025-04-17_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n  participant J as JS Plugin\n  participant P as Plugin\n  participant S as Server\n  J ->> S: Fetch object info\n  S ->> P: create_client_connection(object)\n  P -->> S: MessageStream\n  P ->> S: Client MessageStream.on_data(payload)\n  S -->> J: Widget data and exports\n```\n\n----------------------------------------\n\nTITLE: Watching for Changes and Rebuilding Docs\nDESCRIPTION: This command watches the 'plotly-express' plugin for changes and automatically rebuilds the documentation when changes are detected.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/README.md#2025-04-17_snippet_27\n\nLANGUAGE: shell\nCODE:\n```\npython tools/plugin_builder.py --docs --watch plotly-express\n```\n\n----------------------------------------\n\nTITLE: Running Deephaven UI Docker Container\nDESCRIPTION: Commands to run the Deephaven UI example Docker container for different versions of Deephaven.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# For Deephaven < 0.37.0\ndocker run --rm --name deephaven-ui -p 10000:10000 --pull=always ghcr.io/deephaven/server-ui:latest\n\n# For Deephaven >= 0.37.0\ndocker run --rm --name deephaven-ui -p 10000:10000 --pull=always ghcr.io/deephaven/server:latest\n```\n\n----------------------------------------\n\nTITLE: Incorrect Nested Dictionary Update\nDESCRIPTION: Shows incorrect way of updating nested dictionary through direct mutation.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/add-interactivity/update-dictionaries-in-state.md#2025-04-17_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nperson[\"contact\"][\"email\"] = \"jdoe@domain.net\"\n```\n\n----------------------------------------\n\nTITLE: Customizing Accent Colors with Seafoam Palette in CSS\nDESCRIPTION: Demonstrates how to override the default accent color variables with seafoam color palette values. These variables are used for UI elements like buttons and interactive components.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/example-theme/src/js/README.md#2025-04-17_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n--dh-color-accent-100: var(--dh-color-seafoam-100);\n--dh-color-accent-200: var(--dh-color-seafoam-200);\n--dh-color-accent-300: var(--dh-color-seafoam-300);\n--dh-color-accent-400: var(--dh-color-seafoam-400);\n--dh-color-accent-500: var(--dh-color-seafoam-500);\n--dh-color-accent-600: var(--dh-color-seafoam-600);\n--dh-color-accent-700: var(--dh-color-seafoam-700);\n--dh-color-accent-800: var(--dh-color-seafoam-800);\n--dh-color-accent-900: var(--dh-color-seafoam-900);\n--dh-color-accent-1000: var(--dh-color-seafoam-1000);\n--dh-color-accent-1100: var(--dh-color-seafoam-1100);\n--dh-color-accent-1200: var(--dh-color-seafoam-1200);\n--dh-color-accent-1300: var(--dh-color-seafoam-1300);\n--dh-color-accent-1400: var(--dh-color-seafoam-1400);\n```\n\n----------------------------------------\n\nTITLE: Basic Checkbox Implementation in Deephaven UI\nDESCRIPTION: Shows the basic implementation of a checkbox component with a simple label.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/checkbox.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\ncb = ui.checkbox(\"Unsubscribe\")\n```\n\n----------------------------------------\n\nTITLE: Tag Group with Custom Action\nDESCRIPTION: Shows how to add a custom action button with specific functionality using action_label and on_action props.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/tag_group.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef tag_group_action_example():\n    items, set_items = ui.use_state(\n        [\n            ui.item(\"News\", key=\"news\"),\n            ui.item(\"Travel\", key=\"travel\"),\n            ui.item(\"Gaming\", key=\"gaming\"),\n            ui.item(\"Shopping\", key=\"shopping\"),\n        ]\n    )\n\n    return ui.tag_group(\n        *items,\n        action_label=\"Delete Shopping\",\n        on_action=lambda: set_items([item for item in items if item.key != \"shopping\"])\n    )\n\n\nmy_tag_group_action_example = tag_group_action_example()\n```\n\n----------------------------------------\n\nTITLE: Building JavaScript Plugins in Watch Mode\nDESCRIPTION: Builds all JavaScript plugins in watch mode and serves the plugins directory using Vite's dev server.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/README.md#2025-04-17_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Configuring Overflow Mode in Action Group\nDESCRIPTION: Demonstrates how to set the overflow_mode prop to 'collapse' to keep items in a single line and collapse them into a menu when space is limited.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/action_group.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\nmy_action_group_overflow_example = ui.action_group(\n    ui.item(ui.icon(\"edit\"), ui.text(\"Edit\")),\n    ui.item(ui.icon(\"copy\"), ui.text(\"Copy\")),\n    ui.item(ui.icon(\"trash\"), ui.text(\"Delete\")),\n    ui.item(ui.icon(\"move\"), ui.text(\"Move\")),\n    ui.item(ui.icon(\"diff_multiple\"), ui.text(\"Duplicate\")),\n    overflow_mode=\"collapse\",\n    max_width=250,\n)\n```\n\n----------------------------------------\n\nTITLE: Basic HTML Component Structure Example\nDESCRIPTION: Demonstrates the basic HTML structure for creating a table of contents component with headings and list items.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/describing/your_first_component.md#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div>\n  <h1>My First Component</h1>\n  <ol>\n    <li>Components: UI Building Blocks</li>\n    <li>Defining a Component</li>\n    <li>Defining a Component</li>\n  </ol>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Reinstalling a Plugin and Starting the Server\nDESCRIPTION: This command reinstalls the 'plotly-express' plugin and then starts the Deephaven server.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/README.md#2025-04-17_snippet_23\n\nLANGUAGE: shell\nCODE:\n```\npython tools/plugin_builder.py --reinstall --server plotly-express\n```\n\n----------------------------------------\n\nTITLE: Labeling Radio Groups in Python\nDESCRIPTION: Shows different ways to label radio groups, including using aria-labels for accessibility.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/radio_group.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef ui_radio_group_label_examples():\n    return [\n        ui.radio_group(\n            ui.radio(\"Wizard\", value=\"wizard\"),\n            ui.radio(\"Dragon\", value=\"dragon\"),\n            label=\"Favorite avatar\",\n        ),\n        ui.radio_group(\n            ui.radio(\"Wizard\", value=\"wizard\"),\n            ui.radio(\"Dragon\", value=\"dragon\"),\n            aria_label=\"Favorite avatar\",\n        ),\n    ]\n\n\nmy_radio_group_label_examples = ui_radio_group_label_examples()\n```\n\n----------------------------------------\n\nTITLE: Code Block Formatting in Markdown\nDESCRIPTION: Demonstrates how to include formatted code blocks within markdown content, supporting multiple programming languages.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/markdown.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\ncode_str = \"\"\"\n### Python\n\n```python\nprint(\"Hello, World!\")\n```\n\n### Java\n\n```java\npublic class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, World!\");\n    }\n}\n```\n\"\"\"\n\n@ui.component\ndef code_markdown():\n    return ui.markdown(code_str)\n\ncode_example = code_markdown()\n```\n\n----------------------------------------\n\nTITLE: Checkbox Group with Mixed Content Types\nDESCRIPTION: Shows how to create a checkbox group with both primitive types and checkbox components as children.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/checkbox_group.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\nmy_checkbox_group_content_example = ui.checkbox_group(\n    \"Soccer\",\n    ui.checkbox(\"Basketball\"),\n    label=\"Favourite Sports\",\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Multiple Python Plugin Wheels\nDESCRIPTION: Demonstrates a shorthand method to install all built Python plugin wheels at once.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/README.md#2025-04-17_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\npip install <deephaven-plugins-path>/plugins/*/dist/*.whl\n```\n\n----------------------------------------\n\nTITLE: Running Python Tests with Tox\nDESCRIPTION: Executes Python tests for plugins using Tox, targeting Python 3.8 by default.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/README.md#2025-04-17_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ntox -e py\n```\n\n----------------------------------------\n\nTITLE: Basic Range Calendar Implementation in Python\nDESCRIPTION: Creates a basic range calendar component with an aria label for accessibility.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/range_calendar.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\nmy_range_calendar_basic = ui.range_calendar(aria_label=\"Trip Dates\")\n```\n\n----------------------------------------\n\nTITLE: Handling Empty Tables with Default None\nDESCRIPTION: Shows how to handle empty tables when using use_row_data, where None is returned as the default value. Includes time table initialization with a future start time.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/hooks/use_row_data.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import time_table, ui\nimport datetime as dt\n\n@ui.component\ndef ui_table_row(table):\n    row_data = ui.use_row_data(table)\n    if row_data is None:\n        return ui.heading(\"No data yet.\")\n    return ui.heading(f\"Row data: {row_data}.\")\n\nstart_time = dt.datetime.now() + dt.timedelta(seconds=2)\ntable_row = ui_table_row(\n    time_table(\"PT1s\", start_time=start_time).update(\"x=i\").tail(1)\n)\n```\n\n----------------------------------------\n\nTITLE: Mixing Deephaven UI Components with HTML Elements\nDESCRIPTION: Shows how to combine regular Deephaven UI components with HTML elements, demonstrating the interoperability between the two.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/html.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\ncomponent = ui.view(\n    ui.heading(\"HTML inside a component\"), ui.html.label(\"this is html\")\n)\n\nhtml = ui.html.div(ui.html.h1(\"Component inside html\"), ui.text(\"this is a component\"))\n```\n\n----------------------------------------\n\nTITLE: Building and Previewing Full Documentation\nDESCRIPTION: These commands build the full documentation for multiple plugins and then serve the preview, including API reference docs.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/README.md#2025-04-17_snippet_30\n\nLANGUAGE: shell\nCODE:\n```\npython tools/plugin_builder.py -d ui plotly-express\nBUILT=true npm run docs\n```\n\n----------------------------------------\n\nTITLE: Implementing Contextual Help in Date Range Picker\nDESCRIPTION: Shows how to add contextual help information next to the date range picker label.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/date_range_picker.md#2025-04-17_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\ndate_range_picker_contextual_help_example = ui.date_range_picker(\n    label=\"Sample Label\",\n    contextual_help=ui.contextual_help(ui.heading(\"Content tips\")),\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Disclosure Component in Python\nDESCRIPTION: This snippet demonstrates how to create a basic Disclosure component with a title and content panel using Deephaven's UI framework.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/disclosure.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\nmy_disclosure_basic = ui.disclosure(title=\"Heading\", panel=\"Content\")\n```\n\n----------------------------------------\n\nTITLE: Setting Tab Density in Python\nDESCRIPTION: Demonstrates how to set the density of tabs using the density prop.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/tabs.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef ui_tabs_density_examples():\n    return [\n        ui.tabs(\n            ui.tab(\"There is no prior chat history with John Doe.\", title=\"John Doe\"),\n            ui.tab(\"There is no prior chat history with Jane Doe.\", title=\"Jane Doe\"),\n            ui.tab(\n                \"There is no prior chat history with Joe Bloggs.\", title=\"Joe Bloggs\"\n            ),\n            density=\"regular\",\n        ),\n    ]\n\n\nmy_tabs_density_examples = ui_tabs_density_examples()\n```\n\n----------------------------------------\n\nTITLE: Previewing Documentation\nDESCRIPTION: This command runs a preview server for the documentation using npm.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/README.md#2025-04-17_snippet_29\n\nLANGUAGE: shell\nCODE:\n```\nnpm run docs\n```\n\n----------------------------------------\n\nTITLE: Updating Deephaven UI Icon Types\nDESCRIPTION: Shell commands to install npm dependencies and run the Python script for updating icon types in the Deephaven UI plugin.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/README.md#2025-04-17_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nnpm install\ncd plugins/ui\npython make_icon_types.py\n```\n\n----------------------------------------\n\nTITLE: Setting Default and Controlled Values in Search Fields\nDESCRIPTION: Shows how to set default (uncontrolled) and controlled values for search fields using state management.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/search_field.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef ui_search_field_value_examples():\n    value, set_value = ui.use_state(\"Aardvark\")\n    return [\n        ui.search_field(label=\"Search (Uncontrolled)\", default_value=\"Aardvark\"),\n        ui.search_field(label=\"Search (controlled)\", value=value, on_change=set_value),\n    ]\n\n\nmy_search_field_value_examples = ui_search_field_value_examples()\n```\n\n----------------------------------------\n\nTITLE: Using Sentinel Values for Empty Tables\nDESCRIPTION: Demonstrates using a sentinel value as default when the table is empty, providing a cleaner alternative to None checking.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/hooks/use_cell_data.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import time_table, ui\nimport datetime as dt\n\n@ui.component\ndef ui_table_first_cell(table):\n    cell_value = ui.use_cell_data(table, sentinel=\"No data yet.\")\n    return ui.heading(f\"Cell value: {cell_value}\")\n\nstart_time = dt.datetime.now() + dt.timedelta(seconds=2)\ntable_first_cell = ui_table_first_cell(\n    time_table(\"PT1s\", start_time=start_time).tail(1)\n)\n```\n\n----------------------------------------\n\nTITLE: Disabled Button Implementation\nDESCRIPTION: Shows how to create a disabled button that prevents user interaction.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/button.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\nbtn = ui.button(\"Disabled button\", is_disabled=True)\n```\n\n----------------------------------------\n\nTITLE: Installing dependencies for Deephaven Plugin documentation\nDESCRIPTION: Installs the necessary dependencies for building the documentation for the Deephaven Plugin for Charts.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/plotly-express/README.md#2025-04-17_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\npip install -r ../../sphinx_ext/sphinx-requirements.txt\npip install dist/deephaven_plugin_plotly_express-*.whl\n```\n\n----------------------------------------\n\nTITLE: Building Deephaven matplotlib JS Plugin\nDESCRIPTION: Commands for installing dependencies and building the plugin. The output file will be generated as 'dist/index.js'.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/matplotlib/src/js/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Creating a Form with Action in Deephaven UI (Python)\nDESCRIPTION: Demonstrates how to create a form that communicates with a 3rd party server using the action prop.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/form.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef ui_form_action():\n    return ui.form(\n        ui.text_field(name=\"first_name\", default_value=\"Mickey\", label=\"First Name\"),\n        ui.text_field(name=\"last_name\", default_value=\"Mouse\", label=\"Last Name\"),\n        ui.button(\"Submit\", type=\"submit\"),\n        action=\"https://postman-echo.com/get\",\n        method=\"get\",\n        target=\"_blank\",\n    )\n\nmy_form_action = ui_form_action()\n```\n\n----------------------------------------\n\nTITLE: Implementing a Markdown Component in Deephaven UI\nDESCRIPTION: Creates a markdown component that renders formatted text with support for LaTeX mathematical expressions using the CommonMark spec with remark-math and rehype-mathjax plugins.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/DESIGN.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\nmd_example = ui.markdown(\n    r\"\"\"\n# Heading 1\n\n## Heading 2\n\nText **bold**\n\n$$\n\\eqalign{\n(a+b)^2 &= (a+b)(a+b) \\\\\n&= a^2 + ab + ba + b^2 \\\\\n&= a^2 + 2ab + b^2\n}\n$$\n    \"\"\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Disabled Action Group\nDESCRIPTION: Shows how to create a disabled action group using the is_disabled prop, which prevents user interaction but keeps the group visible.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/action_group.md#2025-04-17_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\nmy_action_group_is_disabled_example = ui.action_group(\n    ui.item(\"Add\"),\n    ui.item(\"Edit\"),\n    ui.item(\"Delete\"),\n    is_disabled=True,\n)\n```\n\n----------------------------------------\n\nTITLE: Contextual Help Integration\nDESCRIPTION: Shows how to add contextual help to a checkbox group using the contextual_help prop.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/checkbox_group.md#2025-04-17_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\nmy_checkbox_group_contextual_help_example = ui.checkbox_group(\n    \"Soccer\",\n    \"Basketball\",\n    \"Baseball\",\n    label=\"Favorite sports\",\n    contextual_help=ui.contextual_help(ui.heading(\"Content tips\")),\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Emphasized Radio Groups in Python\nDESCRIPTION: Demonstrates how to create an emphasized radio group using the is_emphasized prop for visual prominence.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/radio_group.md#2025-04-17_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\nmy_radio_group_is_emphasized_example = ui.radio_group(\n    ui.radio(\"Wizard\", value=\"wizard\"),\n    ui.radio(\"Dragon\", value=\"dragon\"),\n    label=\"Favorite avatar\",\n    default_value=\"dragon\",\n    is_emphasized=True,\n)\n```\n\n----------------------------------------\n\nTITLE: Breadcrumbs with External Links\nDESCRIPTION: Shows how to configure breadcrumb items with external links using href and target properties\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/breadcrumbs.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\nbreadcrumbs_link_example = ui.view(\n    ui.breadcrumbs(\n        ui.item(\n            \"Deephaven\",\n            key=\"deephaven\",\n            href=\"https://deephaven.io/\",\n            target=\"_blank\",\n        ),\n        ui.item(\n            \"Community Core\",\n            key=\"community_core\",\n            href=\"https://deephaven.io/community/\",\n            target=\"_blank\",\n        ),\n        ui.item(\n            \"Getting Started\",\n            key=\"getting_started\",\n            href=\"https://deephaven.io/core/docs/getting-started/quickstart/\",\n            target=\"_blank\",\n        ),\n    ),\n    width=\"100%\",\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Time Table Filtering with Date Fields\nDESCRIPTION: Shows how to use date fields for filtering time-based tables, including state management and time-based queries.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/date_field.md#2025-04-17_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven.time import dh_now\nfrom deephaven import time_table, ui\n\n@ui.component\ndef date_table_filter(table, start_date, end_date, time_col=\"Timestamp\"):\n    after_date, set_after_date = ui.use_state(start_date)\n    before_date, set_before_date = ui.use_state(end_date)\n    return [\n        ui.date_field(label=\"Start Date\", value=after_date, on_change=set_after_date),\n        ui.date_field(label=\"End Date\", value=before_date, on_change=set_before_date),\n        table.where(f\"{time_col} >= after_date  && {time_col} < before_date\"),\n    ]\n\nSECONDS_IN_DAY = 86400\ntoday = dh_now()\n_table = time_table(\"PT1s\").update_view(\n    [\"Timestamp=today.plusSeconds(SECONDS_IN_DAY*i)\", \"Row=i\"]\n)\ndate_filter = date_table_filter(_table, today, today.plusSeconds(SECONDS_IN_DAY * 10))\n```\n\n----------------------------------------\n\nTITLE: Changing Action Group Orientation\nDESCRIPTION: Demonstrates how to change the orientation of an action group to vertical using the orientation prop.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/action_group.md#2025-04-17_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\nmy_action_group_orientation_example = ui.action_group(\n    ui.item(\"Add\"),\n    ui.item(\"Edit\"),\n    ui.item(\"Delete\"),\n    orientation=\"vertical\",\n)\n```\n\n----------------------------------------\n\nTITLE: Focused Date Control\nDESCRIPTION: Controls focused date with reset functionality using a button component.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/range_calendar.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\nfrom deephaven.time import to_j_local_date\n\ndefault_date = to_j_local_date(\"2021-07-01\")\n\n\n@ui.component\ndef focused_example():\n    value, set_value = ui.use_state(default_date)\n    return ui.flex(\n        ui.action_button(\n            \"Reset focused date\", on_press=lambda: set_value(default_date)\n        ),\n        ui.range_calendar(focused_value=value, on_focus_change=set_value),\n        direction=\"column\",\n        align_items=\"start\",\n        gap=\"size-200\",\n    )\n\n\nmy_focused_example = focused_example()\n```\n\n----------------------------------------\n\nTITLE: Size Variants of Breadcrumbs\nDESCRIPTION: Illustrates different size options (L, M, S) for breadcrumbs components\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/breadcrumbs.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\nbreadcrumbs_size_example = ui.view(\n    ui.breadcrumbs(\n        ui.item(\"Deephaven\", key=\"deephaven\"),\n        ui.item(\"Products\", key=\"products\"),\n        ui.item(\"Community Core\", key=\"community_core\"),\n    ),\n    ui.breadcrumbs(\n        ui.item(\"Deephaven\", key=\"deephaven\"),\n        ui.item(\"Products\", key=\"products\"),\n        ui.item(\"Community Core\", key=\"community_core\"),\n        size=\"M\",\n    ),\n    ui.breadcrumbs(\n        ui.item(\"Deephaven\", key=\"deephaven\"),\n        ui.item(\"Products\", key=\"products\"),\n        ui.item(\"Community Core\", key=\"community_core\"),\n        size=\"S\",\n    ),\n    width=\"100%\",\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Disabled Radio Groups in Python\nDESCRIPTION: Demonstrates how to create a disabled radio group using the is_disabled prop.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/radio_group.md#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\nmy_radio_group_is_disabled_example = ui.radio_group(\n    ui.radio(\"Wizard\", value=\"wizard\"),\n    ui.radio(\"Dragon\", value=\"dragon\"),\n    label=\"Favorite avatar\",\n    is_disabled=True,\n)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating State Rendering Behavior with Multiple Updates in deephaven.ui\nDESCRIPTION: This example illustrates how multiple state updates in a single event handler are batched. It shows that calling set_number three times with the same calculation doesn't increment the value three times, as state values remain fixed during a render cycle.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/add-interactivity/state-as-a-snapshot.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef counter():\n    number, set_number = ui.use_state(0)\n\n    def handle_press():\n        set_number(number + 1)\n        set_number(number + 1)\n        set_number(number + 1)\n\n    return [ui.heading(f\"{number}\"), ui.button(\"+3\", on_press=handle_press)]\n\n\nexample_counter = counter()\n```\n\n----------------------------------------\n\nTITLE: List Formatting in Labeled Value\nDESCRIPTION: Demonstrates different list formatting options using Intl.ListFormat compatible options.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/labeled_value.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef labeled_value_list_formatting():\n\n    return [\n        ui.labeled_value(\n            label=\"Interests\",\n            value=[\"Travel\", \"Hiking\", \"Snorkeling\", \"Camping\"],\n            format_options={\"type\": \"conjunction\"},\n        ),\n        ui.labeled_value(\n            label=\"Travel Destination\",\n            value=[\"Paris\", \"Tokyo\", \"New York\", \"Sydney\"],\n            format_options={\"type\": \"disjunction\"},\n        ),\n        ui.labeled_value(\n            label=\"Clothing Sizes\",\n            value=[\"XS\", \"S\", \"M\", \"L\", \"XL\"],\n            format_options={\"type\": \"unit\", \"style\": \"narrow\"},\n        ),\n    ]\n\nmy_labeled_value_list_formatting = labeled_value_list_formatting()\n```\n\n----------------------------------------\n\nTITLE: Replacing State After Updating It\nDESCRIPTION: This snippet illustrates the behavior when replacing state after updating it. It shows how deephaven.ui processes a queue of state updates that includes direct assignments and updater functions, followed by a final replacement.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/add-interactivity/queueing-updates.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef counter():\n    number, set_number = ui.use_state(0)\n\n    def handle_press():\n        set_number(number + 5)\n        set_number(lambda n: n + 1)\n        set_number(42)\n\n    return [ui.heading(f\"{number}\"), ui.button(\"+3\", on_press=handle_press)]\n\nexample_counter = counter()\n```\n\n----------------------------------------\n\nTITLE: Creating a Switch with HTML Form Integration in Deephaven UI\nDESCRIPTION: Demonstrates how to create a switch that integrates with HTML forms using the name prop.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/switch.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\nmy_switch_name_example = ui.form(ui.switch(\"Low Power Mode\", name=\"power\", value=\"low\"))\n```\n\n----------------------------------------\n\nTITLE: Event Handling in Date Range Picker\nDESCRIPTION: Shows how to handle selection events in date range picker with state management.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/date_range_picker.md#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef event_example():\n    value, set_value = ui.use_state({\"start\": \"2020-02-03\", \"end\": \"2020-02-08\"})\n    return ui.date_range_picker(\n        label=\"Date range (controlled)\", value=value, on_change=set_value\n    )\n\nmy_event_example = event_example()\n```\n\n----------------------------------------\n\nTITLE: Configuring Label Position in LabeledValue\nDESCRIPTION: Demonstrates how to position the label to the side of the value instead of the default top position.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/labeled_value.md#2025-04-17_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\nmy_labeled_value_label_position_example = ui.labeled_value(\n    label=\"File name\", value=\"Onboarding.pdf\", label_position=\"side\", label_align=\"end\"\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Table Data with use_table_data in Python\nDESCRIPTION: Hook function for capturing data from a Deephaven table, with options for providing a sentinel value when the table is loading and transforming the data from a pandas DataFrame to a custom object.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/DESIGN.md#2025-04-17_snippet_75\n\nLANGUAGE: python\nCODE:\n```\nuse_table_data(\n    table: Table,\n    sentinel: Sentinel = None,\n    transform: Callable[\n        [pd.DataFrame | Sentinel, bool], TransformedData | Sentinel\n    ] = None,\n) -> TableData | Sentinel | TransformedData:\n```\n\n----------------------------------------\n\nTITLE: Sequence Diagram: Server-to-Client Message Flow\nDESCRIPTION: Illustrates how the server sends unsolicited messages to the client in a bidirectional setup, including how the client registers for message events.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/ARCHITECTURE.md#2025-04-17_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n  participant J as JS Plugin\n  participant P as Plugin\n  participant S as Server\n  J ->> S: Fetch object info\n  S -->> J: Widget data and exports\n  J ->> J: widget.addEventListener('message', fn)\n  P ->> S: Client MessageStream.on_data(payload, [references])\n  S ->> J: 'message' event with payload and references\n```\n\n----------------------------------------\n\nTITLE: Creating a Read-Only Number Field in Python with Deephaven UI\nDESCRIPTION: This example illustrates how to create a read-only number field, which remains visible and focusable but prevents user input, using Deephaven's UI library.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/number_field.md#2025-04-17_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\nmy_number_field_is_read_only_example = ui.number_field(\n    label=\"Age\", default_value=25, is_read_only=True\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Snack Selection with Deephaven UI\nDESCRIPTION: A basic implementation that creates a component allowing users to select a snack from a list. This version stores the complete selected item object in state, which introduces duplication.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/managing-state/choose-the-state-structure.md#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\ninitial_items = [\n    {\"title\": \"peanuts\", \"id\": 0},\n    {\"title\": \"chips\", \"id\": 1},\n    {\"title\": \"apples\", \"id\": 2},\n]\n\n\n@ui.component\ndef snacks():\n    items, set_items = ui.use_state(initial_items)\n    selected_item, set_selected_item = ui.use_state(items[0])\n\n    def snack_row(item):\n        return ui.flex(\n            ui.text(item[\"title\"]),\n            ui.button(\"Choose\", on_press=lambda: set_selected_item(item)),\n        )\n\n    return [\n        ui.heading(\"What is your favorite snack?\"),\n        [snack_row(item) for item in items],\n        ui.text(f\"You picked {selected_item['title']}\"),\n    ]\n\n\nsnacks_example = snacks()\n```\n\n----------------------------------------\n\nTITLE: Incorrect Implementation of Cup Component in Python\nDESCRIPTION: This snippet demonstrates an incorrect implementation of a cup component that has unintentional side effects by modifying a global variable. This approach leads to unpredictable behavior.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/describing/pure_components.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\nguest = [0]\n\n@ui.component\ndef cup():\n    # changing a preexisting variable\n    guest[0] += 1\n    return ui.text(f\"Tea cup for guest {guest[0]}\")\n\n@ui.component\ndef tea_set():\n    return ui.flex(cup(), cup(), cup(), direction=\"column\")\n\nmy_tea_set1 = tea_set()\nmy_tea_set2 = tea_set()\n```\n\n----------------------------------------\n\nTITLE: Checkbox Group Labeling Examples\nDESCRIPTION: Demonstrates different labeling approaches including standard labels and ARIA labels for accessibility.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/checkbox_group.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef ui_checkbox_group_label_examples():\n    return [\n        ui.checkbox_group(\n            ui.checkbox(\"Wizard\", value=\"wizard\"),\n            ui.checkbox(\"Dragon\", value=\"dragon\"),\n            label=\"Favorite avatars\",\n        ),\n        ui.checkbox_group(\n            ui.checkbox(\"Wizard\", value=\"wizard\"),\n            ui.checkbox(\"Dragon\", value=\"dragon\"),\n            aria_label=\"Favorite avatars\",\n        ),\n    ]\n\nmy_checkbox_group_label_examples = ui_checkbox_group_label_examples()\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering with Logical AND Operator\nDESCRIPTION: Demonstrates using the logical AND operator for conditional rendering of additional content.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/describing/conditional_rendering.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n@ui.component\ndef item(name, is_packed):\n    return ui.text(\"- \", name, is_packed and \" ✅\")\n\n@ui.component\ndef packing_list():\n    return ui.flex(\n        ui.heading(\"Packing list\"),\n        item(\"Clothes\", is_packed=True),\n        item(\"Shoes\", is_packed=True),\n        item(\"Wallet\", is_packed=False),\n        direction=\"column\",\n    )\n\nmy_packing_list = packing_list()\n```\n\n----------------------------------------\n\nTITLE: Toast on Component Mount\nDESCRIPTION: Demonstrates how to show a toast notification when a component mounts.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/toast.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef ui_toast_on_mount():\n    ui.toast(\"Mounted.\", variant=\"info\")\n    return ui.heading(\"Toast was shown on mount.\")\n\n\nmy_mount_example = ui_toast_on_mount()\n```\n\n----------------------------------------\n\nTITLE: Basic HTML Element Creation in Python using Deephaven UI\nDESCRIPTION: Demonstrates the basic usage of creating an HTML div element using the Deephaven UI html module.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/html.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\nbasic_html_example = ui.html.div(\"basic html example\")\n```\n\n----------------------------------------\n\nTITLE: Creating Flex Component with Children and Props in Python\nDESCRIPTION: Demonstrates how to create a flex container component with multiple child elements and styling props. Shows proper ordering of children and props arguments.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/describing/component_rules.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\nmy_flex = ui.flex(\n    ui.heading(\"Heading\"),\n    ui.button(\"Button\"),\n    ui.text(\"Text\"),\n    direction=\"column\",\n    wrap=True,\n    width=\"200px\",\n)\n```\n\n----------------------------------------\n\nTITLE: Component Props Example in JSX\nDESCRIPTION: Shows the equivalent JSX syntax for comparison with Deephaven UI components.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/describing/component_rules.md#2025-04-17_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<MyComponent prop1=\"value1\">Hello World</MyComponent>\n```\n\n----------------------------------------\n\nTITLE: Basic Table State Management with Reset Button\nDESCRIPTION: Demonstrates basic table state management with a reset button, showing initial implementation that leads to liveness errors.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/add-interactivity/update-tables-in-state.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui, time_table\n\n@ui.component\ndef ui_resetable_table():\n    table, set_table = ui.use_state(lambda: time_table(\"PT1s\"))\n    handle_press = ui.use_callback(lambda: set_table(time_table(\"PT1s\")), [])\n    return [\n        ui.action_button(\n            \"Reset\",\n            on_press=handle_press,\n        ),\n        table,\n    ]\n\nresetable_table = ui_resetable_table()\n```\n\n----------------------------------------\n\nTITLE: LaTeX Markdown Examples with Raw and Regular Strings\nDESCRIPTION: Shows how to use LaTeX in markdown with both raw and regular Python strings, demonstrating the difference in escape character handling.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/markdown.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\nraw_md_str = r\"\"\"\nThis is a raw Python string. Notice the \"r\" before the quotation marks in the code.\n\n$$\n\\eqalign{\n(a+b)^2 &= (a+b)(a+b) \\\\\n&= a^2 + ab + ba + b^2 \\\\\n&= a^2 + 2ab + b^2\n}\n$$\n\nSince raw strings ignore backslashes, all symbols require one backslash.\n$$\n\\leftarrow \\rightarrow \\nrightarrow\n$$\n\"\"\"\n\nregular_md_str = \"\"\"\nThis is a regular Python string. Notice the extra backslashes necessary in the code.\n\n$$\n\\eqalign{\n(a+b)^2 &= (a+b)(a+b) \\\\\\\\\n&= a^2 + ab + ba + b^2 \\\\\\\\\n&= a^2 + 2ab + b^2\n}\n$$\n\nSome backslashes are used to represent escape characters, requiring an extra backslash for LaTeX symbols.\n$$\n\\leftarrow \\\\rightarrow \\\\nrightarrow\n$$\n\"\"\"\n\n@ui.component\ndef latex_markdown():\n    return ui.flex(\n        ui.markdown(raw_md_str), ui.markdown(regular_md_str), column_gap=\"30px\"\n    )\n\nlatex_example = latex_markdown()\n```\n\n----------------------------------------\n\nTITLE: Managing Component State\nDESCRIPTION: Examples of using state management in components, including a counter implementation with multiple instances.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/README.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@ui.component\ndef ui_counter():\n    count, set_count = ui.use_state(0)\n    return ui.button(f\"Pressed {count} times\", on_press=lambda: set_count(count + 1))\n\n\nc1 = ui_counter()\nc2 = ui_counter()\n```\n\n----------------------------------------\n\nTITLE: Applying Column Color Formatting in Python\nDESCRIPTION: Method to apply conditional color formatting to specific columns with custom filters and color options.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/DESIGN.md#2025-04-17_snippet_65\n\nLANGUAGE: python\nCODE:\n```\nui_table.color_column(\n    column: ColumnName,\n    where: QuickFilterExpression | None = None,\n    color: Color | None = None,\n    background_color: Color | None = None,\n) -> UITable\n```\n\n----------------------------------------\n\nTITLE: Creating Item Components for Deephaven UI Pickers (Python)\nDESCRIPTION: Defines the item function signature for creating individual item components that can be added to UI pickers or sections.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/DESIGN.md#2025-04-17_snippet_57\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.ui as ui\nui.item(\n    children: Stringable,\n    **props: Any\n) -> ItemElement\n```\n\n----------------------------------------\n\nTITLE: Creating UI Stacks in Deephaven Dashboards with Python\nDESCRIPTION: Demonstrates how to create a stack of panels in a Deephaven dashboard using the ui.stack function. This component layers child elements and can have optional height and width specifications.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/DESIGN.md#2025-04-17_snippet_29\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.ui as ui\nui_stack = ui.stack(\n    *children: Element,\n    height: int | None = None,\n    width: int | None = None\n) -> UIStack\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic UI Table in Python\nDESCRIPTION: Basic syntax for creating a UITable object by wrapping a Deephaven Table. Takes a table parameter and additional props for customization.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/DESIGN.md#2025-04-17_snippet_59\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.ui as ui\nui_table = ui.table(table: Table, **props: Any) -> UITable\n```\n\n----------------------------------------\n\nTITLE: Defining Hierarchical Location Data in JSON\nDESCRIPTION: A JSON data structure representing locations organized hierarchically with parent-child relationships. Each location has an ID, title, and a list of child location IDs.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/managing-state/choose-the-state-structure.md#2025-04-17_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n    17: {\"id\": 17, \"title\": \"Trinidad and Tobago\", \"child_ids\": []},\n    18: {\"id\": 18, \"title\": \"Venezuela\", \"child_ids\": []},\n    19: {\n        \"id\": 19,\n        \"title\": \"Asia\",\n        \"child_ids\": [20, 21, 22, 23, 24, 25],\n    },\n    20: {\"id\": 20, \"title\": \"China\", \"child_ids\": []},\n    21: {\"id\": 21, \"title\": \"India\", \"child_ids\": []},\n    22: {\"id\": 22, \"title\": \"Singapore\", \"child_ids\": []},\n    23: {\"id\": 23, \"title\": \"South Korea\", \"child_ids\": []},\n    24: {\"id\": 24, \"title\": \"Thailand\", \"child_ids\": []},\n    25: {\"id\": 25, \"title\": \"Vietnam\", \"child_ids\": []},\n    26: {\n        \"id\": 26,\n        \"title\": \"Europe\",\n        \"child_ids\": [27, 28, 29, 30, 31, 32, 33],\n    },\n    27: {\"id\": 27, \"title\": \"Croatia\", \"child_ids\": []},\n    28: {\"id\": 28, \"title\": \"France\", \"child_ids\": []},\n    29: {\"id\": 29, \"title\": \"Germany\", \"child_ids\": []},\n    30: {\"id\": 30, \"title\": \"Italy\", \"child_ids\": []},\n    31: {\"id\": 31, \"title\": \"Portugal\", \"child_ids\": []},\n    32: {\"id\": 32, \"title\": \"Spain\", \"child_ids\": []},\n    33: {\"id\": 33, \"title\": \"Turkey\", \"child_ids\": []},\n    34: {\n        \"id\": 34,\n        \"title\": \"Oceania\",\n        \"child_ids\": [35, 36, 37, 38, 39, 40, 41],\n    },\n    35: {\"id\": 35, \"title\": \"Australia\", \"child_ids\": []},\n    36: {\"id\": 36, \"title\": \"Bora Bora (French Polynesia)\", \"child_ids\": []},\n    37: {\"id\": 37, \"title\": \"Easter Island (Chile)\", \"child_ids\": []},\n    38: {\"id\": 38, \"title\": \"Fiji\", \"child_ids\": []},\n    39: {\"id\": 40, \"title\": \"Hawaii (the USA)\", \"child_ids\": []},\n    40: {\"id\": 40, \"title\": \"New Zealand\", \"child_ids\": []},\n    41: {\"id\": 41, \"title\": \"Vanuatu\", \"child_ids\": []},\n    42: {\"id\": 42, \"title\": \"Moon\", \"child_ids\": [43, 44, 45]},\n    43: {\"id\": 43, \"title\": \"Rheita\", \"child_ids\": []},\n    44: {\"id\": 44, \"title\": \"Piccolomini\", \"child_ids\": []},\n    45: {\"id\": 45, \"title\": \"Tycho\", \"child_ids\": []},\n    46: {\"id\": 46, \"title\": \"Mars\", \"child_ids\": [47, 48]},\n    47: {\"id\": 47, \"title\": \"Corn Town\", \"child_ids\": []},\n    48: {\"id\": 48, \"title\": \"Green Hill\", \"child_ids\": []},\n}\n```\n\n----------------------------------------\n\nTITLE: Bypassing Pre-commit Hooks for Git Commit\nDESCRIPTION: Demonstrates how to commit changes without running pre-commit hooks using the --no-verify flag.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/README.md#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngit commit --no-verify -m \"commit message\"\n```\n\n----------------------------------------\n\nTITLE: Creating Dialogs with Deephaven UI\nDESCRIPTION: This snippet shows examples of creating dialogs using the Deephaven UI library, including controlled and uncontrolled dialogs, dismissable dialogs, and dialogs with different sizes.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/DESIGN.md#2025-04-17_snippet_47\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n# Open and closed using flag (controlled)\n@ui.component\ndef open_close_example():\n    is_open, set_open = ui.use_boolean()\n    return ui.dialog_trigger(\n        ui.action_button(\"Open dialog\", on_press=set_open.on),\n        ui.dialog(ui.heading(\"Dialog\"), ui.content(\"Close using the button.\"), ui.button_group(ui.button(\"close\", on_press=set_open.off))),\n        is_open=is_open\n    )\n\nmy_open_close_example = open_close_example()\n\n# Dismissable (uncontrolled)\nmy_dismissable = ui.dialog_trigger(\n        ui.action_button(\"Open dialog\",),\n        ui.dialog(\n            ui.heading(\"Dialog\"),\n            ui.content(\"Dismiss using the X button.\"),\n            is_dismissable=True,\n            ),\n    )\n\n# A small dialog\nmy_small = ui.dialog_trigger(\n        ui.action_button(\"Open dialog\",),\n        ui.dialog(ui.heading(\"Dialog\"), ui.content(\"Dismiss using the X button.\"), is_dismissable=True, size=\"S\"),\n    )\n\nfrom deephaven import ui\n\n# Dismissable callback (controlled)\n@ui.component\ndef dismissable_callback():\n    is_open, set_open = ui.use_boolean()\n    return ui.dialog_trigger(\n        ui.action_button(\"Open dialog\", on_press=set_open.on),\n        ui.dialog(ui.heading(\"Dialog\"),\n            ui.content(\"Dismiss using the X button.\"),\n            is_dismissable=True,\n            on_dismiss=set_open.off\n            ),\n        is_open=is_open\n    )\n\nmy_dismissable_callback = dismissable_callback()\n```\n\n----------------------------------------\n\nTITLE: Adding Lines to Bar Plot using unsafe_update_figure in Python\nDESCRIPTION: Demonstrates how to add gray lines to bars in a bar plot using update_traces. The example uses the tips dataset and adds a 3-pixel wide gray line to each bar.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/plotly-express/docs/unsafe-update-figure.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.plot.express as dx\n\ntips = dx.data.tips()\n\n\ndef update(figure):\n    # Add a gray line to the bars\n    figure.update_traces(marker_line_width=3, marker_line_color=\"gray\")\n\n\nbar_lined_plot = dx.bar(tips, x=\"Day\", unsafe_update_figure=update)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating State Duplication Issues with Editable Items\nDESCRIPTION: An enhanced version that adds editability to snack items, revealing the issue with duplicated state. When an item is edited, the displayed selection text doesn't update because the selected item is a separate copy.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/managing-state/choose-the-state-structure.md#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\ninitial_items = [\n    {\"title\": \"peanuts\", \"id\": 0},\n    {\"title\": \"chips\", \"id\": 1},\n    {\"title\": \"apples\", \"id\": 2},\n]\n\n\n@ui.component\ndef snacks():\n    items, set_items = ui.use_state(initial_items)\n    selected_item, set_selected_item = ui.use_state(items[0])\n\n    def handle_item_change(id, value):\n        new_items = [\n            {**item, \"title\": value} if item[\"id\"] == id else item for item in items\n        ]\n        set_items(new_items)\n\n    def snack_row(item):\n        return ui.flex(\n            ui.text_field(\n                value=item[\"title\"],\n                on_change=lambda value: handle_item_change(item[\"id\"], value),\n            ),\n            ui.button(\"Choose\", on_press=lambda: set_selected_item(item)),\n        )\n\n    return [\n        ui.heading(\"What is your favorite snack?\"),\n        [snack_row(item) for item in items],\n        ui.text(f\"You picked {selected_item['title']}\"),\n    ]\n\n\nsnacks_example = snacks()\n```\n\n----------------------------------------\n\nTITLE: Building documentation for Deephaven Plugin\nDESCRIPTION: Runs the documentation build script to generate markdown files in the 'docs/build/markdown' directory.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/plotly-express/README.md#2025-04-17_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\npython make_docs.py\n```\n\n----------------------------------------\n\nTITLE: UI Panel Configuration\nDESCRIPTION: Complete configuration options for creating a UI panel including callbacks, styling, and sizing parameters.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/DESIGN.md#2025-04-17_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.ui as ui\nui_panel = ui.panel(\n    *children: Element,\n    label: (str | Element)[] | None = None,\n    description: str | Element | None = None,\n    background_color: Color | None = None,\n    tab_background_color: Color | None = None,\n    height: int | None = None,\n    width: int | None = None,\n    is_closable: bool = True,\n    on_focus: Callable[[UIPanel], None] | None = None,\n    on_blur: Callable[[UIPanel], None] | None = None,\n    on_hide: Callable[[UIPanel], None] | None = None,\n    on_show: Callable[[UIPanel], None] | None = None,\n    on_open: Callable[[UIPanel], None] | None = None,\n    on_close: Callable[[UIPanel], None] | None = None,\n) -> UIPanel\n```\n\n----------------------------------------\n\nTITLE: Creating Grouped Histograms\nDESCRIPTION: Creates histograms showing life expectancy distribution by continent, with both stacked and overlaid versions.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/plotly-express/docs/plot-by.md#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.plot.express as dx\ngapminder = dx.data.gapminder() # import ticking Gapminder dataset\n\n# filter by most recent instance of each country\nrecent_gapminder = gapminder.last_by(\"Country\")\n\n# create histogram of life expectancy distribution for each continent\nlife_exp_hist = dx.histogram(recent_gapminder, x=\"LifeExp\", by=\"Continent\")\n\n# overlay histograms for easier visualization\nlife_exp_hist_overlaid = dx.histogram(recent_gapminder, x=\"LifeExp\", by=\"Continent\", barmode=\"overlay\")\n```\n\n----------------------------------------\n\nTITLE: Creating 3D Bubble Plot in Python\nDESCRIPTION: Creates a 3D bubble plot where marker size represents petal length, adding a fourth dimension to the visualization.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/plotly-express/docs/scatter-3d.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.plot.express as dx\niris = dx.data.iris()\n\nbubble_plot_3D = dx.scatter_3d(iris, x=\"SepalWidth\", y=\"SepalLength\", z=\"PetalWidth\", size=\"PetalLength\")\n```\n\n----------------------------------------\n\nTITLE: Setting up Python environment for Deephaven Plugin\nDESCRIPTION: Creates a virtual environment, activates it, and installs necessary dependencies for building and developing the Deephaven Plugin for Charts.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/plotly-express/README.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npython -m venv .venv\nsource .venv/bin/activate\npip install --upgrade pip setuptools\npip install build deephaven-plugin plotly\n```\n\n----------------------------------------\n\nTITLE: Creating an Implicit Grid Layout with Auto-generated Items in Python\nDESCRIPTION: This example demonstrates creating an implicit grid layout using ui.grid. It generates a large number of colored view components and arranges them in a 5-column grid with auto-sized rows, showcasing dynamic grid generation.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/creating-layouts/layout-overview.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\ncolors = []\nfor i in range(100, 901, 100):\n    colors.append(f\"gray-{i}\")\n    colors.append(f\"green-{i}\")\n    colors.append(f\"blue-{i}\")\n\n\n@ui.component\ndef implicit_grid():\n    return ui.grid(\n        [ui.view(background_color=color) for color in colors],\n        columns=[\"repeat(5, 1fr)\"],\n        auto_rows=\"size-800\",\n        justify_content=\"center\",\n        gap=\"size-100\",\n    )\n\n\nimplicit_grid_example = implicit_grid()\n```\n\n----------------------------------------\n\nTITLE: Creating a Bullet Gauge Indicator Plot with Hidden Axis in Python\nDESCRIPTION: Creates an indicator plot with a bullet gauge visualization and hides the axis. This is done by setting gauge to 'bullet' and axis to False.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/plotly-express/docs/indicator.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.plot.express as dx\nfrom deephaven import agg as agg\n\nmy_table = dx.data.stocks()\n\n# subset data and aggregate for DOG prices\ndog_avg = my_table.where(\"Sym = `DOG`\").agg_by([agg.avg(cols=\"Price\")])\n\nindicator_plot = dx.indicator(dog_avg, value=\"Price\", gauge=\"bullet\", axis=False)\n```\n\n----------------------------------------\n\nTITLE: Creating Basic UI Component\nDESCRIPTION: Example of creating a simple heading component using deephaven.ui.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/README.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nhello_world = ui.heading(\"Hello World!\")\n```\n\n----------------------------------------\n\nTITLE: Installing and Building Documentation for a Plugin\nDESCRIPTION: This command installs the latest version of the 'ui' plugin and then builds its documentation.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/README.md#2025-04-17_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\npython tools/plugin_builder.py --docs --install ui\n```\n\n----------------------------------------\n\nTITLE: Creating Scatter Plot with Custom Size Mapping\nDESCRIPTION: Creates a scatter plot with custom size mappings for different numeric values using size_map parameter.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/plotly-express/docs/plot-by.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.plot.express as dx\ntips = dx.data.tips() # import a ticking version of the Tips dataset\n\n# the `size` column from tips gives the number in the party, map it to different sizes\ntotal_bill_tip_size = dx.scatter(\n    tips, x=\"TotalBill\", y=\"Tip\", size=\"size\",\n    size_map={\"1\": 5, \"2\": 7, \"3\": 11, \"4\": 13, \"5\": 15, \"6\": 17}\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Aligned Button Groups in Python with Deephaven UI\nDESCRIPTION: This example shows how to create button groups with different alignments using the 'align' prop. It demonstrates center and end alignments.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/button_group.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef ui_button_group_alignment_examples():\n    return [\n        ui.button_group(\n            ui.button(\"No, thanks\", variant=\"primary\", style=\"outline\"),\n            ui.button(\"Remind me later\", variant=\"primary\", style=\"outline\"),\n            ui.button(\"Rate Now\", variant=\"accent\"),\n            align=\"center\",\n        ),\n        ui.button_group(\n            ui.button(\"No, thanks\", variant=\"primary\", style=\"outline\"),\n            ui.button(\"Remind me later\", variant=\"primary\", style=\"outline\"),\n            ui.button(\"Rate Now\", variant=\"accent\"),\n            align=\"end\",\n        ),\n    ]\n\n\nmy_button_group_alignment_examples = ui_button_group_alignment_examples()\n```\n\n----------------------------------------\n\nTITLE: Customizing Docker Compose for Deephaven Plugins\nDESCRIPTION: This YAML snippet shows how to override the default Docker Compose configuration to use a custom data folder for Deephaven plugins.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/README.md#2025-04-17_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\nservices:\n  deephaven-plugins:\n    volumes:\n      # Specifying a data volume here will override the default data folder, and you will not be able to access the default data files (such as the demo data)\n      - /path/to/mydata/:/data\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Ternary Line Plot with Deephaven Plot Express\nDESCRIPTION: This snippet demonstrates how to create a basic ternary line plot using Deephaven's plot express library. It imports the necessary module, loads election data, and creates a ternary line plot using the 'Joly', 'Coderre', and 'Bergeron' columns as the three components.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/plotly-express/docs/line-ternary.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.plot.express as dx\nelection = dx.data.election()\n\nternary_line_plot = dx.line_ternary(election, a=\"Joly\", b=\"Coderre\", c=\"Bergeron\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Funnel Area Plot in Python using Deephaven\nDESCRIPTION: This snippet demonstrates how to create a basic funnel area plot using Deephaven's plotting library. It uses the marketing dataset and visualizes the trend in consecutive stages of a categorical variable.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/plotly-express/docs/funnel-area.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.plot.express as dx\nmarketing = dx.data.marketing()\n\n# `Count` is the frequency/value column, and `Stage` is the category column\nfunnel_area_plot = dx.funnel_area(marketing, names=\"Stage\", values=\"Count\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugin Builder for Full Setup\nDESCRIPTION: This command configures the plugin_builder.py script with full dependencies for building plugins, including documentation and server capabilities.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/README.md#2025-04-17_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\npython tools/plugin_builder.py --configure=full\n```\n\n----------------------------------------\n\nTITLE: Formatting Numbers in Indicator Plots in Python\nDESCRIPTION: Shows how to format numbers in indicator plots using the number_format parameter. The example demonstrates using a specific format string and how prefix arguments override format prefixes.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/plotly-express/docs/indicator.md#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport deephaven.plot.express as dx\nfrom deephaven import agg as agg\n\nmy_table = dx.data.stocks()\n\n# subset data and aggregate for DOG prices\ndog_avg = my_table.where(\"Sym = `DOG`\").agg_by([agg.avg(cols=\"Price\")])\n\n# format the number with a dollar sign prefix, USD suffix, and three decimal places\nindicator_plot = dx.indicator(dog_avg, value=\"Price\", number_format=\"$#,##0.000USD\")\n\n# prefix overrides the prefix from the number_format\nindicator_plot_prefix = dx.indicator(\n    dog_avg, value=\"Price\", number_format=\"$#,##0.000USD\", prefix=\"Dollars: \"\n)\n```\n\n----------------------------------------\n\nTITLE: Building Documentation for a Specific Plugin\nDESCRIPTION: This command builds the documentation for the 'ui' plugin using the plugin_builder.py script.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/README.md#2025-04-17_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\npython tools/plugin_builder.py --docs ui\n```\n\n----------------------------------------\n\nTITLE: Configuring ThemePlugin in TypeScript\nDESCRIPTION: TypeScript configuration for the theme plugin, specifying plugin name, type, and base theme to extend.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/example-theme/src/js/README.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport const plugin: ThemePlugin = {\n  name: 'example-theme',\n  type: 'ThemePlugin',\n  themes: {\n    ...\n    baseTheme: 'light', // The base theme to extend, either 'light' or 'dark'\n    ...\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Controlled and Uncontrolled Calendar Values\nDESCRIPTION: Shows implementation of both controlled and uncontrolled calendar components with default and managed values.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/components/range_calendar.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\n\n@ui.component\ndef example():\n    value, set_value = ui.use_state({\"start\": \"2020-02-03\", \"end\": \"2020-02-08\"})\n    return ui.flex(\n        ui.range_calendar(\n            aria_label=\"Date range (uncontrolled)\",\n            default_value={\"start\": \"2020-02-03\", \"end\": \"2020-02-08\"},\n        ),\n        ui.range_calendar(\n            aria_label=\"Date range (controlled)\", value=value, on_change=set_value\n        ),\n        gap=\"size-300\",\n        wrap=True,\n    )\n\n\nmy_example = example()\n```\n\n----------------------------------------\n\nTITLE: Installing Deephaven Server\nDESCRIPTION: This command installs the Deephaven server package, which is required for running the server with plugins.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/README.md#2025-04-17_snippet_22\n\nLANGUAGE: shell\nCODE:\n```\npip install deephaven-server\n```\n\n----------------------------------------\n\nTITLE: Releasing a Plugin\nDESCRIPTION: This command initiates the release process for a specific plugin using the release.sh script.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/README.md#2025-04-17_snippet_31\n\nLANGUAGE: shell\nCODE:\n```\ntools/release.sh <pluginName>\n```\n\n----------------------------------------\n\nTITLE: Non-Working Component with Regular Variable\nDESCRIPTION: This example shows a component that doesn't work correctly because it uses a regular variable instead of state. The 'Next' button doesn't update the display because local variables don't persist between renders or trigger re-rendering.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/add-interactivity/state-a-components-memory.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom deephaven import ui\n\nword_list = [\"apple\", \"banana\", \"cherry\", \"orange\", \"kiwi\", \"strawberry\"]\n\n\n@ui.component\ndef word_display():\n    index = 0\n\n    def handle_press():\n        nonlocal index\n        index = index + 1\n\n    word = word_list[index]\n\n    return [\n        ui.button(\"Next\", on_press=handle_press),\n        ui.text(f\"({index+1} of {len(word_list)})\"),\n        ui.heading(word),\n    ]\n\n\nword_display_example = word_display()\n```\n\n----------------------------------------\n\nTITLE: Building the Deephaven Object Viewer Plugin\nDESCRIPTION: Commands to install dependencies and build the plugin. The output will be generated in the 'dist/index.js' file.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/dashboard-object-viewer/src/js/README.md#2025-04-17_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Starting Server with Multiple Custom Arguments\nDESCRIPTION: This command shows how to start the server with multiple custom arguments, including port and JVM settings.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/README.md#2025-04-17_snippet_25\n\nLANGUAGE: shell\nCODE:\n```\npython tools/plugin_builder.py -r -sa --port=9999 -sa --jvm-args=\"-Dauthentication.psk=mypsk\" ui\n```\n\n----------------------------------------\n\nTITLE: Building and Installing All Plugins\nDESCRIPTION: This command uses the plugin_builder.py script to build and install all available plugins.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/README.md#2025-04-17_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\npython tools/plugin_builder.py\n```\n\n----------------------------------------\n\nTITLE: Installing Deephaven UI with Docker\nDESCRIPTION: Docker commands to run Deephaven with the UI plugin, with options for different Deephaven versions.\nSOURCE: https://github.com/deephaven/deephaven-plugins/blob/main/plugins/ui/docs/installation.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# For Deephaven < 0.37.0\ndocker run --name deephaven -p 10000:10000 ghcr.io/deephaven/server-ui:latest\n\n# For Deephaven >= 0.37.0\ndocker run --name deephaven -p 10000:10000 ghcr.io/deephaven/server:latest\n```"
  }
]