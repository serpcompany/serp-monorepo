[
  {
    "owner": "slackapi",
    "repo": "python-slack-sdk",
    "content": "TITLE: Sending a Message with Python Slack SDK\nDESCRIPTION: This snippet demonstrates how to send a basic message to a Slack channel using the WebClient. It sets up logging, initializes the client with a bot token from environment variables, and handles potential API errors.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/docs/content/web.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport logging\nlogging.basicConfig(level=logging.DEBUG)\n\nimport os\nfrom slack_sdk import WebClient\nfrom slack_sdk.errors import SlackApiError\n\nslack_token = os.environ[\"SLACK_BOT_TOKEN\"]\nclient = WebClient(token=slack_token)\n\ntry:\n    response = client.chat_postMessage(\n        channel=\"C0XXXXXX\",\n        text=\"Hello from your app! :tada:\"\n    )\nexcept SlackApiError as e:\n    # You will get a SlackApiError if \"ok\" is False\n    assert e.response[\"error\"]    # str like 'invalid_auth', 'channel_not_found'\n```\n\n----------------------------------------\n\nTITLE: Handling Rate Limits in Python Slack SDK\nDESCRIPTION: Demonstrates how to handle rate limiting in Slack API calls by implementing retry logic with exponential backoff using try-except blocks and the Retry-After header.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/docs/content/web.md#2025-04-17_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport time\nfrom slack_sdk import WebClient\nfrom slack_sdk.errors import SlackApiError\n\nclient = WebClient(token=os.environ[\"SLACK_BOT_TOKEN\"])\n\n# Simple wrapper for sending a Slack message\ndef send_slack_message(channel, message):\n    return client.chat_postMessage(\n        channel=channel,\n        text=message\n    )\n\n# Make the API call and save results to `response`\nchannel = \"#random\"\nmessage = \"Hello, from Python!\"\n# Do until being rate limited\nwhile True:\n    try:\n        response = send_slack_message(channel, message)\n    except SlackApiError as e:\n        if e.response.status_code == 429:\n            # The `Retry-After` header will tell you how long to wait before retrying\n            delay = int(e.response.headers['Retry-After'])\n            print(f\"Rate limited. Retrying in {delay} seconds\")\n            time.sleep(delay)\n            response = send_slack_message(channel, message)\n        else:\n            # other errors\n            raise e\n```\n\n----------------------------------------\n\nTITLE: Connecting to Slack RTM API Using v2 Client in Python\nDESCRIPTION: Example of connecting to Slack's RTM API using the v2 client. The code initializes an RTM client, sets up a message event handler that responds with a greeting when 'Hello' is detected, and starts the WebSocket connection.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/docs/content/rtm.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom slack_sdk.rtm_v2 import RTMClient\n\nrtm = RTMClient(token=os.environ[\"SLACK_BOT_TOKEN\"])\n\n@rtm.on(\"message\")\ndef handle(client: RTMClient, event: dict):\n    if 'Hello' in event['text']:\n        channel_id = event['channel']\n        thread_ts = event['ts']\n        user = event['user'] # This is not username but user ID (the format is either U*** or W***)\n\n        client.web_client.chat_postMessage(\n            channel=channel_id,\n            text=f\"Hi <@{user}>!\",\n            thread_ts=thread_ts\n        )\n\nrtm.start()\n```\n\n----------------------------------------\n\nTITLE: Sending Messages with Slack Web API in Python\nDESCRIPTION: This code demonstrates how to send a message to a Slack channel using the WebClient. It initializes the client with a bot token from environment variables and handles potential API errors with appropriate error checking.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/README.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom slack_sdk import WebClient\nfrom slack_sdk.errors import SlackApiError\n\nclient = WebClient(token=os.environ['SLACK_BOT_TOKEN'])\n\ntry:\n    response = client.chat_postMessage(channel='#random', text=\"Hello world!\")\n    assert response[\"message\"][\"text\"] == \"Hello world!\"\nexcept SlackApiError as e:\n    # You will get a SlackApiError if \"ok\" is False\n    assert e.response[\"ok\"] is False\n    assert e.response[\"error\"]  # str like 'invalid_auth', 'channel_not_found'\n    print(f\"Got an error: {e.response['error']}\")\n    # Also receive a corresponding status_code\n    assert isinstance(e.response.status_code, int)\n    print(f\"Received a response status_code: {e.response.status_code}\")\n```\n\n----------------------------------------\n\nTITLE: Opening a Modal Using views_open in a Flask Application with Python Slack SDK\nDESCRIPTION: Creates a Flask app that handles a global shortcut request to open a modal dialog with an input field. Includes verification of Slack's request signature and handling of form submission data.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/docs/content/web.md#2025-04-17_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nfrom slack_sdk.signature import SignatureVerifier\nsignature_verifier = SignatureVerifier(os.environ[\"SLACK_SIGNING_SECRET\"])\n\nfrom flask import Flask, request, make_response, jsonify\napp = Flask(__name__)\n\n@app.route(\"/slack/events\", methods=[\"POST\"])\ndef slack_app():\n    if not signature_verifier.is_valid_request(request.get_data(), request.headers):\n        return make_response(\"invalid request\", 403)\n\n    if \"payload\" in request.form:\n        payload = json.loads(request.form[\"payload\"])\n        if payload[\"type\"] == \"shortcut\" and payload[\"callback_id\"] == \"test-shortcut\":\n            # Open a new modal by a global shortcut\n            try:\n                api_response = client.views_open(\n                    trigger_id=payload[\"trigger_id\"],\n                    view={\n                        \"type\": \"modal\",\n                        \"callback_id\": \"modal-id\",\n                        \"title\": {\n                            \"type\": \"plain_text\",\n                            \"text\": \"Awesome Modal\"\n                        },\n                        \"submit\": {\n                            \"type\": \"plain_text\",\n                            \"text\": \"Submit\"\n                        },\n                        \"blocks\": [\n                            {\n                                \"type\": \"input\",\n                                \"block_id\": \"b-id\",\n                                \"label\": {\n                                    \"type\": \"plain_text\",\n                                    \"text\": \"Input label\",\n                                },\n                                \"element\": {\n                                    \"action_id\": \"a-id\",\n                                    \"type\": \"plain_text_input\",\n                                }\n                            }\n                        ]\n                    }\n                )\n                return make_response(\"\", 200)\n            except SlackApiError as e:\n                code = e.response[\"error\"]\n                return make_response(f\"Failed to open a modal due to {code}\", 200)\n\n        if (\n            payload[\"type\"] == \"view_submission\"\n            and payload[\"view\"][\"callback_id\"] == \"modal-id\"\n        ):\n            # Handle a data submission request from the modal\n            submitted_data = payload[\"view\"][\"state\"][\"values\"]\n            print(submitted_data)    # {'b-id': {'a-id': {'type': 'plain_text_input', 'value': 'your input'}}}\n\n            # Close this modal with an empty response body\n            return make_response(\"\", 200)\n\n    return make_response(\"\", 404)\n\nif __name__ == \"__main__\":\n    # export SLACK_SIGNING_SECRET=***\n    # export SLACK_BOT_TOKEN=xoxb-***\n    # export FLASK_ENV=development\n    # python3 app.py\n    app.run(\"localhost\", 3000)\n```\n\n----------------------------------------\n\nTITLE: Handling Slash Commands with WebhookClient and Flask in Python\nDESCRIPTION: Demonstrates how to use WebhookClient to respond to a slash command in a Flask application. It includes request verification, extracting the response_url, and sending a reply using WebhookClient.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/docs/content/webhook.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom slack_sdk.signature import SignatureVerifier\nsignature_verifier = SignatureVerifier(\n    signing_secret=os.environ[\"SLACK_SIGNING_SECRET\"]\n)\n\nfrom slack_sdk.webhook import WebhookClient\n\nfrom flask import Flask, request, make_response\napp = Flask(__name__)\n\n@app.route(\"/slack/events\", methods=[\"POST\"])\ndef slack_app():\n    if not signature_verifier.is_valid(\n        body=request.get_data(),\n        timestamp=request.headers.get(\"X-Slack-Request-Timestamp\"),\n        signature=request.headers.get(\"X-Slack-Signature\")):\n        return make_response(\"invalid request\", 403)\n\n    if \"command\" in request.form \\\n        and request.form[\"command\"] == \"/reply-this\":\n        response_url = request.form[\"response_url\"]\n        text = request.form[\"text\"]\n        webhook = WebhookClient(response_url)\n        response = webhook.send(text=f\"You said '{text}'\")\n        return make_response(\"\", 200)\n\n    return make_response(\"\", 404)\n```\n\n----------------------------------------\n\nTITLE: Async Web Client Implementation in Python Slack SDK\nDESCRIPTION: Demonstrates how to use AsyncWebClient for asynchronous API calls using Python's asyncio library and AIOHTTP.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/docs/content/web.md#2025-04-17_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nimport os\n# requires: pip install aiohttp\nfrom slack_sdk.web.async_client import AsyncWebClient\nfrom slack_sdk.errors import SlackApiError\n\nclient = AsyncWebClient(token=os.environ['SLACK_API_TOKEN'])\n\n# This must be an async method\nasync def post_message():\n    try:\n        # Don't forget `await` keyword here\n        response = await client.chat_postMessage(\n            channel='#random',\n            text=\"Hello world!\"\n        )\n        assert response[\"message\"][\"text\"] == \"Hello world!\"\n    except SlackApiError as e:\n        assert e.response[\"ok\"] is False\n        assert e.response[\"error\"]  # str like 'invalid_auth', 'channel_not_found'\n        print(f\"Got an error: {e.response['error']}\")\n\n# This is the simplest way to run the async method\n# but you can go with any ways to run it\nasyncio.run(post_message())\n```\n\n----------------------------------------\n\nTITLE: Uploading a File to a Thread with Python Slack SDK\nDESCRIPTION: This code shows how to upload a file to a specific thread in a Slack channel by including the thread_ts parameter along with the channel ID.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/docs/content/web.md#2025-04-17_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nresponse = client.files_upload_v2(\n    file=\"test.pdf\",\n    title=\"Test upload\",\n    channel=\"C3UKJTQAC\",\n    thread_ts=\"1731398999.934122\",\n    initial_comment=\"Here is the latest version of the file!\",\n)\n```\n\n----------------------------------------\n\nTITLE: Complete OAuth callback handler in Flask\nDESCRIPTION: Complete implementation of the OAuth redirect handler that processes the callback, saves the token, and confirms successful installation.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/docs/content/installation.md#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n@app.route(\"/slack/oauth_redirect\", methods=[\"GET\"])\ndef post_install():\n    # Verify the \"state\" parameter\n\n    # Retrieve the auth code from the request params\n    code_param = request.args['code']\n\n    # An empty string is a valid token for this request\n    client = WebClient()\n\n    # Request the auth tokens from Slack\n    response = client.oauth_v2_access(\n        client_id=client_id,\n        client_secret=client_secret,\n        code=code_param\n    )\n    print(response)\n\n    # Save the bot token to an environmental variable or to your data store\n    # for later use\n    os.environ[\"SLACK_BOT_TOKEN\"] = response['access_token']\n\n    # Don't forget to let the user know that OAuth has succeeded!\n    return \"Installation is completed!\"\n\nif __name__ == \"__main__\":\n    app.run(\"localhost\", 3000)\n```\n\n----------------------------------------\n\nTITLE: Using AsyncWebClient in a Python Script\nDESCRIPTION: This code demonstrates how to use the AsyncWebClient to send messages asynchronously in a Python script. It uses asyncio.run() to execute the async function, which is suitable for standalone scripts.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/README.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nimport os\nfrom slack_sdk.web.async_client import AsyncWebClient\nfrom slack_sdk.errors import SlackApiError\n\nclient = AsyncWebClient(token=os.environ['SLACK_BOT_TOKEN'])\n\nasync def post_message():\n    try:\n        response = await client.chat_postMessage(channel='#random', text=\"Hello world!\")\n        assert response[\"message\"][\"text\"] == \"Hello world!\"\n    except SlackApiError as e:\n        assert e.response[\"ok\"] is False\n        assert e.response[\"error\"]  # str like 'invalid_auth', 'channel_not_found'\n        print(f\"Got an error: {e.response['error']}\")\n\nasyncio.run(post_message())\n```\n\n----------------------------------------\n\nTITLE: Uploading and Sharing a File to a Specific Channel in Slack with Python\nDESCRIPTION: This snippet demonstrates how to upload a file directly to a specific Slack channel in a single operation using the files_upload_v2 method. It specifies the channel ID, title, filename, content, and an initial comment to accompany the file.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/docs/content/tutorial/uploading-files.md#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nupload_and_then_share_file = client.files_upload_v2(\n    channel=\"C123456789\",\n    title=\"Test text data\",\n    filename=\"test.txt\",\n    content=\"Hi there! This is a text file!\",\n    initial_comment=\"Here is the file:\",\n)\n```\n\n----------------------------------------\n\nTITLE: Updating Modal View Using views.update API in Python Slack SDK\nDESCRIPTION: Shows how to update an existing modal view using the views.update API method. Includes complete view configuration with input blocks and metadata handling.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/docs/content/web.md#2025-04-17_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nprivate_metadata = \"any str data you want to store\"\nresponse = client.views_update(\n    view_id=payload[\"view\"][\"id\"],\n    hash=payload[\"view\"][\"hash\"],\n    view={\n        \"type\": \"modal\",\n        \"callback_id\": \"modal-id\",\n        \"private_metadata\": private_metadata,\n        \"title\": {\n            \"type\": \"plain_text\",\n            \"text\": \"Awesome Modal\"\n        },\n        \"submit\": {\n            \"type\": \"plain_text\",\n            \"text\": \"Submit\"\n        },\n        \"close\": {\n            \"type\": \"plain_text\",\n            \"text\": \"Cancel\"\n        },\n        \"blocks\": [\n            {\n                \"type\": \"input\",\n                \"block_id\": \"b-id\",\n                \"label\": {\n                    \"type\": \"plain_text\",\n                    \"text\": \"Input label\",\n                },\n                \"element\": {\n                    \"action_id\": \"a-id\",\n                    \"type\": \"plain_text_input\",\n                }\n            }\n        ]\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Async Slack Socket Mode Client in Python\nDESCRIPTION: Demonstrates the setup and usage of SocketModeClient for handling Slack events and interactions asynchronously. Includes initialization of the client, event processing, reaction adding, modal interactions, and connection management. Requires Slack app-level and bot tokens as environment variables.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/docs/content/socket-mode.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nasync def main():\n    from slack_sdk.socket_mode.response import SocketModeResponse\n    from slack_sdk.socket_mode.request import SocketModeRequest\n\n    # Initialize SocketModeClient with an app-level token + AsyncWebClient\n    client = SocketModeClient(\n        # This app-level token will be used only for establishing a connection\n        app_token=os.environ.get(\"SLACK_APP_TOKEN\"),  # xapp-A111-222-xyz\n        # You will be using this AsyncWebClient for performing Web API calls in listeners\n        web_client=AsyncWebClient(token=os.environ.get(\"SLACK_BOT_TOKEN\"))  # xoxb-111-222-xyz\n    )\n\n    # Use async method\n    async def process(client: SocketModeClient, req: SocketModeRequest):\n        if req.type == \"events_api\":\n            # Acknowledge the request anyway\n            response = SocketModeResponse(envelope_id=req.envelope_id)\n            # Don't forget having await for method calls\n            await client.send_socket_mode_response(response)\n\n            # Add a reaction to the message if it's a new message\n            if req.payload[\"event\"][\"type\"] == \"message\" \\\n                and req.payload[\"event\"].get(\"subtype\") is None:\n                await client.web_client.reactions_add(\n                    name=\"eyes\",\n                    channel=req.payload[\"event\"][\"channel\"],\n                    timestamp=req.payload[\"event\"][\"ts\"],\n                )\n        if req.type == \"interactive\" \\\n            and req.payload.get(\"type\") == \"shortcut\":\n            if req.payload[\"callback_id\"] == \"hello-shortcut\":\n                # Acknowledge the request\n                response = SocketModeResponse(envelope_id=req.envelope_id)\n                await client.send_socket_mode_response(response)\n                # Open a welcome modal\n                await client.web_client.views_open(\n                    trigger_id=req.payload[\"trigger_id\"],\n                    view={\n                        \"type\": \"modal\",\n                        \"callback_id\": \"hello-modal\",\n                        \"title\": {\n                            \"type\": \"plain_text\",\n                            \"text\": \"Greetings!\"\n                        },\n                        \"submit\": {\n                            \"type\": \"plain_text\",\n                            \"text\": \"Good Bye\"\n                        },\n                        \"blocks\": [\n                            {\n                                \"type\": \"section\",\n                                \"text\": {\n                                    \"type\": \"mrkdwn\",\n                                    \"text\": \"Hello!\"\n                                }\n                            }\n                        ]\n                    }\n                )\n\n        if req.type == \"interactive\" \\\n            and req.payload.get(\"type\") == \"view_submission\":\n            if req.payload[\"view\"][\"callback_id\"] == \"hello-modal\":\n                # Acknowledge the request and close the modal\n                response = SocketModeResponse(envelope_id=req.envelope_id)\n                await client.send_socket_mode_response(response)\n\n    # Add a new listener to receive messages from Slack\n    # You can add more listeners like this\n    client.socket_mode_request_listeners.append(process)\n    # Establish a WebSocket connection to the Socket Mode servers\n    await client.connect()\n    # Just not to stop this process\n    await asyncio.sleep(float(\"inf\"))\n\n# You can go with other way to run it. This is just for easiness to try it out.\nasyngio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Uploading Files to Slack in Python\nDESCRIPTION: This snippet shows how to upload a file to a Slack channel using the files_upload_v2 method. It includes error handling to catch and process any API errors that may occur during the upload process.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/README.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom slack_sdk import WebClient\nfrom slack_sdk.errors import SlackApiError\n\nclient = WebClient(token=os.environ['SLACK_BOT_TOKEN'])\n\ntry:\n    filepath=\"./tmp.txt\"\n    response = client.files_upload_v2(channel='C0123456789', file=filepath)\n    assert response[\"file\"]  # the uploaded file\nexcept SlackApiError as e:\n    # You will get a SlackApiError if \"ok\" is False\n    assert e.response[\"ok\"] is False\n    assert e.response[\"error\"]  # str like 'invalid_auth', 'channel_not_found'\n    print(f\"Got an error: {e.response['error']}\")\n```\n\n----------------------------------------\n\nTITLE: Sending a Simple Message with WebhookClient in Python\nDESCRIPTION: Demonstrates how to use WebhookClient to send a basic text message to a Slack channel using an Incoming Webhook URL. It shows the initialization of the client and sending a message, along with response handling.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/docs/content/webhook.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom slack_sdk.webhook import WebhookClient\nurl = \"https://hooks.slack.com/services/T00000000/B00000000/XXXXXXXXXXXXXXXXXXXXXXXX\"\nwebhook = WebhookClient(url)\n\nresponse = webhook.send(text=\"Hello!\")\nassert response.status_code == 200\nassert response.body == \"ok\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up Slack Event Handler with Token Lookup in Flask\nDESCRIPTION: Flask route implementation for handling Slack events with proper request verification, token lookup, slash command handling for opening modals, and handling modal submissions. Uses InstallationStore for token retrieval.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/docs/content/oauth.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport json\nfrom slack_sdk.errors import SlackApiError\n\nfrom slack_sdk.signature import SignatureVerifier\nsigning_secret = os.environ[\"SLACK_SIGNING_SECRET\"]\nsignature_verifier = SignatureVerifier(signing_secret=signing_secret)\n\n@app.route(\"/slack/events\", methods=[\"POST\"])\ndef slack_app():\n    # Verify incoming requests from Slack\n    # https://api.slack.com/authentication/verifying-requests-from-slack\n    if not signature_verifier.is_valid(\n        body=request.get_data(),\n        timestamp=request.headers.get(\"X-Slack-Request-Timestamp\"),\n        signature=request.headers.get(\"X-Slack-Signature\")):\n        return make_response(\"invalid request\", 403)\n\n    # Handle a slash command invocation\n    if \"command\" in request.form \\\n        and request.form[\"command\"] == \"/open-modal\":\n        try:\n            # in the case where this app gets a request from an Enterprise Grid workspace\n            enterprise_id = request.form.get(\"enterprise_id\")\n            # The workspace's ID\n            team_id = request.form[\"team_id\"]\n            # Lookup the stored bot token for this workspace\n            bot = installation_store.find_bot(\n                enterprise_id=enterprise_id,\n                team_id=team_id,\n            )\n            bot_token = bot.bot_token if bot else None\n            if not bot_token:\n                # The app may be uninstalled or be used in a shared channel\n                return make_response(\"Please install this app first!\", 200)\n\n            # Open a modal using the valid bot token\n            client = WebClient(token=bot_token)\n            trigger_id = request.form[\"trigger_id\"]\n            response = client.views_open(\n                trigger_id=trigger_id,\n                view={\n                    \"type\": \"modal\",\n                    \"callback_id\": \"modal-id\",\n                    \"title\": {\n                        \"type\": \"plain_text\",\n                        \"text\": \"Awesome Modal\"\n                    },\n                    \"submit\": {\n                        \"type\": \"plain_text\",\n                        \"text\": \"Submit\"\n                    },\n                    \"blocks\": [\n                        {\n                            \"type\": \"input\",\n                            \"block_id\": \"b-id\",\n                            \"label\": {\n                                \"type\": \"plain_text\",\n                                \"text\": \"Input label\",\n                            },\n                            \"element\": {\n                                \"action_id\": \"a-id\",\n                                \"type\": \"plain_text_input\",\n                            }\n                        }\n                    ]\n                }\n            )\n            return make_response(\"\", 200)\n        except SlackApiError as e:\n            code = e.response[\"error\"]\n            return make_response(f\"Failed to open a modal due to {code}\", 200)\n\n    elif \"payload\" in request.form:\n        # Data submission from the modal\n        payload = json.loads(request.form[\"payload\"])\n        if payload[\"type\"] == \"view_submission\" \\\n            and payload[\"view\"][\"callback_id\"] == \"modal-id\":\n            submitted_data = payload[\"view\"][\"state\"][\"values\"]\n            print(submitted_data)  # {'b-id': {'a-id': {'type': 'plain_text_input', 'value': 'your input'}}}\n            # You can use WebClient with a valid token here too\n            return make_response(\"\", 200)\n\n    # Indicate unsupported request patterns\n    return make_response(\"\", 404)\n```\n\n----------------------------------------\n\nTITLE: Formatting a Message with Block Kit in Python Slack SDK\nDESCRIPTION: This example demonstrates how to create a richly formatted message using Slack's Block Kit. The message includes sections with markdown text, an image accessory, and formatted fields for a property review example.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/docs/content/web.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclient.chat_postMessage(\n    channel=\"C0XXXXXX\",\n    blocks=[\n        {\n            \"type\": \"section\",\n            \"text\": {\n                \"type\": \"mrkdwn\",\n                \"text\": \"Danny Torrence left the following review for your property:\"\n            }\n        },\n        {\n            \"type\": \"section\",\n            \"text\": {\n                \"type\": \"mrkdwn\",\n                \"text\": \"<https://example.com|Overlook Hotel> \\n :star: \\n Doors had too many axe holes, guest in room \" +\n                    \"237 was far too rowdy, whole place felt stuck in the 1920s.\"\n            },\n            \"accessory\": {\n                \"type\": \"image\",\n                \"image_url\": \"https://images.pexels.com/photos/750319/pexels-photo-750319.jpeg\",\n                \"alt_text\": \"Haunted hotel image\"\n            }\n        },\n        {\n            \"type\": \"section\",\n            \"fields\": [\n                {\n                    \"type\": \"mrkdwn\",\n                    \"text\": \"*Average Rating*\\n1.0\"\n                }\n            ]\n        }\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing SCIM Client and Searching Users\nDESCRIPTION: Demonstrates how to initialize the SCIM client with an admin token and perform user search operations with filtering capabilities.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/docs/content/scim.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom slack_sdk.scim import SCIMClient\n\nclient = SCIMClient(token=os.environ[\"SLACK_ORG_ADMIN_USER_TOKEN\"])\n\nresponse = client.search_users(\n    start_index=1,\n    count=100,\n    filter=\"\"\"filter=userName Eq \"Carly\"\"\"\",\n)\nresponse.users  # List[User]\n```\n\n----------------------------------------\n\nTITLE: Updating Modal View on Submission in Python Slack SDK\nDESCRIPTION: Demonstrates how to handle view_submission payload and update a modal view with new content in response to form submission. Uses make_response and jsonify to return the updated view configuration.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/docs/content/web.md#2025-04-17_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nif (\n    payload[\"type\"] == \"view_submission\"\n    and payload[\"view\"][\"callback_id\"] == \"modal-id\"\n):\n    # Handle a data submission request from the modal\n    submitted_data = payload[\"view\"][\"state\"][\"values\"]\n    print(submitted_data)    # {'b-id': {'a-id': {'type': 'plain_text_input', 'value': 'your input'}}}\n\n    # Update the modal with a new view\n    return make_response(\n        jsonify(\n            {\n                \"response_action\": \"update\",\n                \"view\": {\n                    \"type\": \"modal\",\n                    \"title\": {\"type\": \"plain_text\", \"text\": \"Accepted\"},\n                    \"close\": {\"type\": \"plain_text\", \"text\": \"Close\"},\n                    \"blocks\": [\n                        {\n                            \"type\": \"section\",\n                            \"text\": {\n                                \"type\": \"plain_text\",\n                                \"text\": \"Thanks for submitting the data!\",\n                            },\n                        }\n                    ],\n                },\n            }\n        ),\n        200,\n    )\n```\n\n----------------------------------------\n\nTITLE: Adding an Emoji Reaction with Python Slack SDK\nDESCRIPTION: This example shows how to add an emoji reaction to a message by specifying the channel, emoji name, and timestamp of the target message.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/docs/content/web.md#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nresponse = client.reactions_add(\n    channel=\"C0XXXXXXX\",\n    name=\"thumbsup\",\n    timestamp=\"1234567890.123456\"\n)\n```\n\n----------------------------------------\n\nTITLE: Sending a Block Kit Message with WebhookClient in Python\nDESCRIPTION: Shows how to send a more complex message using Block Kit with WebhookClient. This example includes both a fallback text and a structured block containing markdown text.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/docs/content/webhook.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom slack_sdk.webhook import WebhookClient\nurl = \"https://hooks.slack.com/services/T00000000/B00000000/XXXXXXXXXXXXXXXXXXXXXXXX\"\nwebhook = WebhookClient(url)\nresponse = webhook.send(\n    text=\"fallback\",\n    blocks=[\n        {\n            \"type\": \"section\",\n            \"text\": {\n                \"type\": \"mrkdwn\",\n                \"text\": \"You have a new request:\\n*<fakeLink.toEmployeeProfile.com|Fred Enriquez - New device request>*\"\n            }\n        }\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Sending Asynchronous Messages with Python Slack SDK\nDESCRIPTION: This function demonstrates how to send messages to Slack channels asynchronously using the Python Slack SDK. It handles exceptions and asserts the response.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/README.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nasync def send_to_slack(channel, text):\n    try:\n        # Don't forget to have await as the client returns asyncio.Future\n        response = await client.chat_postMessage(channel=channel, text=text)\n        assert response[\"message\"][\"text\"] == text\n    except SlackApiError as e:\n        assert e.response[\"ok\"] is False\n        assert e.response[\"error\"]  # str like 'invalid_auth', 'channel_not_found'\n        raise e\n```\n\n----------------------------------------\n\nTITLE: Opening a Direct Message Using conversations_open in Python Slack SDK\nDESCRIPTION: Opens a direct message or multi-person direct message depending on the number of users provided. Supplying one user ID creates a 1:1 DM, while multiple IDs (up to 8) create a multi-party DM.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/docs/content/web.md#2025-04-17_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom slack_sdk import WebClient\n\nclient = WebClient(token=os.environ[\"SLACK_BOT_TOKEN\"])\nresponse = client.conversations_open(users=[\"W123456789\", \"U987654321\"])\n```\n\n----------------------------------------\n\nTITLE: Updating a Message with Python Slack SDK\nDESCRIPTION: This snippet shows how to update a previously sent message by specifying the channel and the timestamp of the message to be updated, along with the new text.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/docs/content/web.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nresponse = client.chat_update(\n    channel=\"C0XXXXXX\",\n    ts=\"1476746830.000003\",\n    text=\"updates from your app! :tada:\"\n)\n```\n\n----------------------------------------\n\nTITLE: Handling Web Requests with aiohttp and Python Slack SDK\nDESCRIPTION: This async function handles web requests, extracts query parameters, sends messages to Slack, and returns JSON responses. It uses aiohttp for web server functionality.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/README.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom aiohttp import web\n\nasync def handle_requests(request: web.Request) -> web.Response:\n    text = 'Hello World!'\n    if 'text' in request.query:\n        text = \"\\t\".join(request.query.getall(\"text\"))\n    try:\n        await send_to_slack(channel=\"#random\", text=text)\n        return web.json_response(data={'message': 'Done!'})\n    except SlackApiError as e:\n        return web.json_response(data={'message': f\"Failed due to {e.response['error']}\"})\n\n\nif __name__ == \"__main__\":\n    app = web.Application()\n    app.add_routes([web.get(\"/\", handle_requests)])\n    # e.g., http://localhost:3000/?text=foo&text=bar\n    web.run_app(app, host=\"0.0.0.0\", port=3000)\n```\n\n----------------------------------------\n\nTITLE: Posting Messages to Slack Using WebClient\nDESCRIPTION: This code snippet demonstrates the efficient way to post a message to a Slack channel using the WebClient's chat_postMessage method. It requires a properly initialized client object and specifies both the channel ID and message text.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/docs/content/v3-migration.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclient.chat_postMessage(\n    channel='C0123456',\n    text='Hi!')\n```\n\n----------------------------------------\n\nTITLE: Sending a Threaded Reply in Python Slack SDK\nDESCRIPTION: This code shows how to reply to a message thread by passing the original message's timestamp (ts) as the thread_ts parameter when posting a message.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/docs/content/web.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nresponse = client.chat_postMessage(\n    channel=\"C0XXXXXX\",\n    thread_ts=\"1476746830.000003\",\n    text=\"Hello from your app! :tada:\"\n)\n```\n\n----------------------------------------\n\nTITLE: Initiating OAuth Flow with Flask and Python Slack SDK\nDESCRIPTION: This snippet demonstrates how to start the Slack OAuth flow by redirecting users to Slack's authorization page. It uses FileOAuthStateStore for managing the state parameter, FileInstallationStore for persisting installation data, and AuthorizeUrlGenerator for building the authorization URL.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/docs/content/oauth.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport html\nfrom slack_sdk.oauth import AuthorizeUrlGenerator\nfrom slack_sdk.oauth.installation_store import FileInstallationStore, Installation\nfrom slack_sdk.oauth.state_store import FileOAuthStateStore\n\n# Issue and consume state parameter value on the server-side.\nstate_store = FileOAuthStateStore(expiration_seconds=300, base_dir=\"./data\")\n# Persist installation data and lookup it by IDs.\ninstallation_store = FileInstallationStore(base_dir=\"./data\")\n\n# Build https://slack.com/oauth/v2/authorize with sufficient query parameters\nauthorize_url_generator = AuthorizeUrlGenerator(\n    client_id=os.environ[\"SLACK_CLIENT_ID\"],\n    scopes=[\"app_mentions:read\", \"chat:write\"],\n    user_scopes=[\"search:read\"],\n)\n\nfrom flask import Flask, request, make_response\napp = Flask(__name__)\n\n@app.route(\"/slack/install\", methods=[\"GET\"])\ndef oauth_start():\n    # Generate a random value and store it on the server-side\n    state = state_store.issue()\n    # https://slack.com/oauth/v2/authorize?state=(generated value)&client_id={client_id}&scope=app_mentions:read,chat:write&user_scope=search:read\n    url = authorize_url_generator.generate(state)\n    return f'<a href=\"{html.escape(url)}\">' \\\n           f'<img alt=\"\"Add to Slack\"\" height=\"40\" width=\"139\" src=\"https://platform.slack-edge.com/img/add_to_slack.png\" srcset=\"https://platform.slack-edge.com/img/add_to_slack.png 1x, https://platform.slack-edge.com/img/add_to_slack@2x.png 2x\" /></a>'\n```\n\n----------------------------------------\n\nTITLE: Initializing SocketModeClient with WebClient for Slack Socket Mode\nDESCRIPTION: Sets up a SocketModeClient using an app-level token and a WebClient. This establishes Socket Mode connectivity with Slack and handles event processing for message events and interactive components.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/docs/content/socket-mode.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom slack_sdk.web import WebClient\nfrom slack_sdk.socket_mode import SocketModeClient\n\n# Initialize SocketModeClient with an app-level token + WebClient\nclient = SocketModeClient(\n    # This app-level token will be used only for establishing a connection\n    app_token=os.environ.get(\"SLACK_APP_TOKEN\"),  # xapp-A111-222-xyz\n    # You will be using this WebClient for performing Web API calls in listeners\n    web_client=WebClient(token=os.environ.get(\"SLACK_BOT_TOKEN\"))  # xoxb-111-222-xyz\n)\n\nfrom slack_sdk.socket_mode.response import SocketModeResponse\nfrom slack_sdk.socket_mode.request import SocketModeRequest\n\ndef process(client: SocketModeClient, req: SocketModeRequest):\n    if req.type == \"events_api\":\n        # Acknowledge the request anyway\n        response = SocketModeResponse(envelope_id=req.envelope_id)\n        client.send_socket_mode_response(response)\n\n        # Add a reaction to the message if it's a new message\n        if req.payload[\"event\"][\"type\"] == \"message\" \\\n            and req.payload[\"event\"].get(\"subtype\") is None:\n            client.web_client.reactions_add(\n                name=\"eyes\",\n                channel=req.payload[\"event\"][\"channel\"],\n                timestamp=req.payload[\"event\"][\"ts\"],\n            )\n    if req.type == \"interactive\" \\\n        and req.payload.get(\"type\") == \"shortcut\":\n        if req.payload[\"callback_id\"] == \"hello-shortcut\":\n            # Acknowledge the request\n            response = SocketModeResponse(envelope_id=req.envelope_id)\n            client.send_socket_mode_response(response)\n            # Open a welcome modal\n            client.web_client.views_open(\n                trigger_id=req.payload[\"trigger_id\"],\n                view={\n                    \"type\": \"modal\",\n                    \"callback_id\": \"hello-modal\",\n                    \"title\": {\n                        \"type\": \"plain_text\",\n                        \"text\": \"Greetings!\"\n                    },\n                    \"submit\": {\n                        \"type\": \"plain_text\",\n                        \"text\": \"Good Bye\"\n                    },\n                    \"blocks\": [\n                        {\n                            \"type\": \"section\",\n                            \"text\": {\n                                \"type\": \"mrkdwn\",\n                                \"text\": \"Hello!\"\n                            }\n                        }\n                    ]\n                }\n            )\n\n    if req.type == \"interactive\" \\\n        and req.payload.get(\"type\") == \"view_submission\":\n        if req.payload[\"view\"][\"callback_id\"] == \"hello-modal\":\n            # Acknowledge the request and close the modal\n            response = SocketModeResponse(envelope_id=req.envelope_id)\n            client.send_socket_mode_response(response)\n\n# Add a new listener to receive messages from Slack\n# You can add more listeners like this\nclient.socket_mode_request_listeners.append(process)\n# Establish a WebSocket connection to the Socket Mode servers\nclient.connect()\n# Just not to stop this process\nfrom threading import Event\nEvent().wait()\n```\n\n----------------------------------------\n\nTITLE: Deleting a Message with Python Slack SDK\nDESCRIPTION: This code demonstrates how to delete a message from a channel by specifying the channel ID and the timestamp of the message to be deleted.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/docs/content/web.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nresponse = client.chat_delete(\n    channel=\"C0XXXXXX\",\n    ts=\"1476745373.000002\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Retry Handlers in Python Slack SDK\nDESCRIPTION: Shows how to configure and implement custom retry handlers for handling rate limits and connection errors in Slack API calls.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/docs/content/web.md#2025-04-17_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom slack_sdk.web import WebClient\nclient = WebClient(token=os.environ[\"SLACK_BOT_TOKEN\"])\n\n# This handler does retries when HTTP status 429 is returned\nfrom slack_sdk.http_retry.builtin_handlers import RateLimitErrorRetryHandler\nrate_limit_handler = RateLimitErrorRetryHandler(max_retry_count=1)\n\n# Enable rate limited error retries as well\nclient.retry_handlers.append(rate_limit_handler)\n```\n\n----------------------------------------\n\nTITLE: Implementing OnboardingTutorial Class in Python\nDESCRIPTION: This Python class builds an onboarding message for Slack using Block Kit. It tracks completion state of tutorial tasks (adding reactions and pinning messages), generates the message payload, and includes helper methods for creating task blocks with appropriate checkmarks.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/tutorial/02-building-a-message.md#2025-04-17_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nclass OnboardingTutorial:\n    \"\"\"Constructs the onboarding message and stores the state of which tasks were completed.\"\"\"\n\n    WELCOME_BLOCK = {\n        \"type\": \"section\",\n        \"text\": {\n            \"type\": \"mrkdwn\",\n            \"text\": (\n                \"Welcome to Slack! :wave: We're so glad you're here. :blush:\\n\\n\"\n                \"*Get started by completing the steps below:*\"\n            ),\n        },\n    }\n    DIVIDER_BLOCK = {\"type\": \"divider\"}\n\n    def __init__(self, channel):\n        self.channel = channel\n        self.username = \"pythonboardingbot\"\n        self.icon_emoji = \":robot_face:\"\n        self.timestamp = \"\"\n        self.reaction_task_completed = False\n        self.pin_task_completed = False\n\n    def get_message_payload(self):\n        return {\n            \"ts\": self.timestamp,\n            \"channel\": self.channel,\n            \"username\": self.username,\n            \"icon_emoji\": self.icon_emoji,\n            \"blocks\": [\n                self.WELCOME_BLOCK,\n                self.DIVIDER_BLOCK,\n                *self._get_reaction_block(),\n                self.DIVIDER_BLOCK,\n                *self._get_pin_block(),\n            ],\n        }\n\n    def _get_reaction_block(self):\n        task_checkmark = self._get_checkmark(self.reaction_task_completed)\n        text = (\n            f\"{task_checkmark} *Add an emoji reaction to this message* :thinking_face:\\n\"\n            \"You can quickly respond to any message on Slack with an emoji reaction.\"\n            \"Reactions can be used for any purpose: voting, checking off to-do items, showing excitement.\"\n        )\n        information = (\n            \":information_source: *<https://get.slack.help/hc/en-us/articles/206870317-Emoji-reactions|\"\n            \"Learn How to Use Emoji Reactions>*\"\n        )\n        return self._get_task_block(text, information)\n\n    def _get_pin_block(self):\n        task_checkmark = self._get_checkmark(self.pin_task_completed)\n        text = (\n            f\"{task_checkmark} *Pin this message* :round_pushpin:\\n\"\n            \"Important messages and files can be pinned to the details pane in any channel or\"\n            \" direct message, including group messages, for easy reference.\"\n        )\n        information = (\n            \":information_source: *<https://get.slack.help/hc/en-us/articles/205239997-Pinning-messages-and-files\"\n            \"|Learn How to Pin a Message>*\"\n        )\n        return self._get_task_block(text, information)\n\n    @staticmethod\n    def _get_checkmark(task_completed: bool) -> str:\n        if task_completed:\n            return \":white_check_mark:\"\n        return \":white_large_square:\"\n\n    @staticmethod\n    def _get_task_block(text, information):\n        return [\n            {\"type\": \"section\", \"text\": {\"type\": \"mrkdwn\", \"text\": text}},\n            {\"type\": \"context\", \"elements\": [{\"type\": \"mrkdwn\", \"text\": information}]},\n        ]\n```\n\n----------------------------------------\n\nTITLE: Listing All Conversations in a Workspace Using conversations_list in Python Slack SDK\nDESCRIPTION: Retrieves a list of all conversations in a Slack workspace. By default, returns only public channels unless specified otherwise with the types parameter.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/docs/content/web.md#2025-04-17_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom slack_sdk import WebClient\n\nclient = WebClient(token=os.environ[\"SLACK_BOT_TOKEN\"])\nresponse = client.conversations_list()\nconversations = response[\"channels\"]\n```\n\n----------------------------------------\n\nTITLE: Handling OAuth Callback in Flask with Python Slack SDK\nDESCRIPTION: This snippet shows how to handle the callback request from Slack after a user authorizes the application. It verifies the state parameter, exchanges the authorization code for access tokens using oauth.v2.access API, and saves the installation data to the installation store.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/docs/content/oauth.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom slack_sdk.web import WebClient\nclient_secret = os.environ[\"SLACK_CLIENT_SECRET\"]\n\n# Redirect URL\n@app.route(\"/slack/oauth/callback\", methods=[\"GET\"])\ndef oauth_callback():\n    # Retrieve the auth code and state from the request params\n    if \"code\" in request.args:\n        # Verify the state parameter\n        if state_store.consume(request.args[\"state\"]):\n            client = WebClient()  # no prepared token needed for this\n            # Complete the installation by calling oauth.v2.access API method\n            oauth_response = client.oauth_v2_access(\n                client_id=client_id,\n                client_secret=client_secret,\n                redirect_uri=redirect_uri,\n                code=request.args[\"code\"]\n            )\n            installed_enterprise = oauth_response.get(\"enterprise\") or {}\n            is_enterprise_install = oauth_response.get(\"is_enterprise_install\")\n            installed_team = oauth_response.get(\"team\") or {}\n            installer = oauth_response.get(\"authed_user\") or {}\n            incoming_webhook = oauth_response.get(\"incoming_webhook\") or {}\n            bot_token = oauth_response.get(\"access_token\")\n            # NOTE: oauth.v2.access doesn't include bot_id in response\n            bot_id = None\n            enterprise_url = None\n            if bot_token is not None:\n                auth_test = client.auth_test(token=bot_token)\n                bot_id = auth_test[\"bot_id\"]\n                if is_enterprise_install is True:\n                    enterprise_url = auth_test.get(\"url\")\n\n            installation = Installation(\n                app_id=oauth_response.get(\"app_id\"),\n                enterprise_id=installed_enterprise.get(\"id\"),\n                enterprise_name=installed_enterprise.get(\"name\"),\n                enterprise_url=enterprise_url,\n                team_id=installed_team.get(\"id\"),\n                team_name=installed_team.get(\"name\"),\n                bot_token=bot_token,\n                bot_id=bot_id,\n                bot_user_id=oauth_response.get(\"bot_user_id\"),\n                bot_scopes=oauth_response.get(\"scope\"),  # comma-separated string\n                user_id=installer.get(\"id\"),\n                user_token=installer.get(\"access_token\"),\n                user_scopes=installer.get(\"scope\"),  # comma-separated string\n                incoming_webhook_url=incoming_webhook.get(\"url\"),\n                incoming_webhook_channel=incoming_webhook.get(\"channel\"),\n                incoming_webhook_channel_id=incoming_webhook.get(\"channel_id\"),\n                incoming_webhook_configuration_url=incoming_webhook.get(\"configuration_url\"),\n                is_enterprise_install=is_enterprise_install,\n                token_type=oauth_response.get(\"token_type\"),\n            )\n\n            # Store the installation\n            installation_store.save(installation)\n\n            return \"Thanks for installing this app!\"\n        else:\n            return make_response(f\"Try the installation again (the state value is already expired)\", 400)\n\n    error = request.args[\"error\"] if \"error\" in request.args else \"\"\n    return make_response(f\"Something is wrong with the installation (error: {html.escape(error)})\", 400)\n```\n\n----------------------------------------\n\nTITLE: Using AsyncWebhookClient with asyncio in Python\nDESCRIPTION: Illustrates how to use the AsyncWebhookClient for asynchronous webhook operations. This example demonstrates sending a message asynchronously and running the async function using asyncio.run().\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/docs/content/webhook.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom slack_sdk.webhook.async_client import AsyncWebhookClient\nurl = \"https://hooks.slack.com/services/T00000000/B00000000/XXXXXXXXXXXXXXXXXXXXXXXX\"\n\nasync def send_message_via_webhook(url: str):\n    webhook = AsyncWebhookClient(url)\n    response = await webhook.send(text=\"Hello!\")\n    assert response.status_code == 200\n    assert response.body == \"ok\"\n\nasyncio.run(send_message_via_webhook(url))\n```\n\n----------------------------------------\n\nTITLE: Retrieving Conversation Information Using conversations_info in Python Slack SDK\nDESCRIPTION: Gets metadata about a specific channel, DM, or multi-party DM. Additional parameters include include_locale for localization data and include_num_members to get the member count.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/docs/content/web.md#2025-04-17_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom slack_sdk import WebClient\n\nclient = WebClient(token=os.environ[\"SLACK_BOT_TOKEN\"])\nresponse = client.conversations_info(\n    channel=\"C031415926\",\n    include_num_members=1\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Structured Slack Messages with Blocks and Elements in Python\nDESCRIPTION: Demonstrates how to build a Slack message containing section blocks with fields and interactive buttons. Uses WebClient to post the message and leverages blocks, elements, and message classes from the Slack SDK.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/slack/web/classes/readme.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom slack.web.client import WebClient\nfrom slack.web.classes import messages, blocks, elements\n\nclient = WebClient(token=\"abc\")\n\nfields = blocks.SectionBlock(fields=[\"*Type:*\\nComputer\", \"*Reason:*\\nAll vowel keys aren't working\"])\n\napprove_button = elements.ButtonElement(text=\"Approve\", action_id=\"approval\", value=\"order_123\", style=\"primary\")\ndeny_button = elements.ButtonElement(text=\"Deny\", action_id=\"denial\", value=\"order_123\", style=\"danger\")\n\nbuttons = [approve_button, deny_button]\n\nactions = blocks.ActionsBlock(elements=buttons)\n\nwork_order_message = messages.Message(text=\"You have a new request\", blocks=[fields, actions])\n\nclient.chat_postMessage(channel=\"C12345\", **work_order_message.to_dict())\n```\n\n----------------------------------------\n\nTITLE: Listing Files for Bot User\nDESCRIPTION: Retrieves a list of files associated with the bot user using files.list API method.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/docs/content/tutorial/uploading-files.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfiles = client.files_list(user=bot_user_id)\n```\n\n----------------------------------------\n\nTITLE: Adding a Remote File with Python Slack SDK\nDESCRIPTION: This example demonstrates how to add information about a file stored in external storage to Slack using files_remote_add, including external ID, URL, title, and a preview image.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/docs/content/web.md#2025-04-17_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nresponse = client.files_remote_add(\n    external_id=\"the-all-hands-deck-12345\",\n    external_url=\"https://{your domain}/files/the-all-hands-deck-12345\",\n    title=\"The All-hands Deck\",\n    preview_image=\"./preview.png\" # will be displayed in channels\n)\n```\n\n----------------------------------------\n\nTITLE: Uploading a Local File to Slack Channel with Python\nDESCRIPTION: This code demonstrates how to upload a local file to a specific Slack channel using the files_upload_v2 method. It specifies the channel ID, title, file path, and an initial comment to accompany the file.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/docs/content/tutorial/uploading-files.md#2025-04-17_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nupload_text_file = client.files_upload_v2(\n    channel=\"C123456789\",\n    title=\"Test text data\",\n    file=\"./test.txt\",\n    initial_comment=\"Here is the file:\",\n)\n```\n\n----------------------------------------\n\nTITLE: Handling Direct Message Events in Slack\nDESCRIPTION: Event handler for the 'message' event that triggers the onboarding process when a user sends the message 'start'.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/tutorial/03-responding-to-slack-events.md#2025-04-17_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\n@app.event(\"message\")\ndef message(event, client):\n    \"\"\"Display the onboarding welcome message after receiving a message\n    that contains \"start\".\n    \"\"\"\n    channel_id = event.get(\"channel\")\n    user_id = event.get(\"user\")\n    text = event.get(\"text\")\n\n    if text and text.lower() == \"start\":\n        return start_onboarding(user_id, channel_id, client)\n```\n\n----------------------------------------\n\nTITLE: Leaving a Conversation Using conversations_leave in Python Slack SDK\nDESCRIPTION: Removes the authenticated user or bot from a conversation or channel.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/docs/content/web.md#2025-04-17_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom slack_sdk import WebClient\n\nclient = WebClient(token=os.environ[\"SLACK_BOT_TOKEN\"])\nresponse = client.conversations_leave(channel=\"C27182818\")\n```\n\n----------------------------------------\n\nTITLE: AsyncWebClient Initialization in a Framework\nDESCRIPTION: This example shows how to initialize the AsyncWebClient in a framework that already manages the asyncio event loop (like Sanic or Jupyter Notebook). It sets up the client with a bot token from environment variables.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/README.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom slack_sdk.web.async_client import AsyncWebClient\nfrom slack_sdk.errors import SlackApiError\n\nclient = AsyncWebClient(token=os.environ['SLACK_BOT_TOKEN'])\n```\n\n----------------------------------------\n\nTITLE: Checking Channel Existence with Slack WebClient in Python\nDESCRIPTION: Function that verifies if a specific channel exists by checking the workspace's channel list using the Slack Web API. Requires channels:read and groups:read scopes.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/docs/content/tutorial/understanding-oauth-scopes.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom slack_sdk import WebClient\n\n# verifies if \"the-welcome-channel\" already exists\ndef channel_exists():\n    token = os.environ[\"SLACK_BOT_TOKEN\"]\n    client = WebClient(token=token)\n\n    # grab a list of all the channels in a workspace\n    clist = client.conversations_list()\n    exists = False\n    for k in clist[\"channels\"]:\n        # look for the channel in the list of existing channels\n        if k['name'] == 'the-welcome-channel':\n            exists = True\n            break\n    if exists == False:\n        # create the channel since it doesn't exist\n        create_channel()\n```\n\n----------------------------------------\n\nTITLE: Authenticating Bot User with Slack SDK\nDESCRIPTION: Validates the bot token and retrieves the bot user ID using auth.test API method.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/docs/content/tutorial/uploading-files.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nauth_test = client.auth_test()\nbot_user_id = auth_test[\"user_id\"]\nprint(f\"App's bot user: {bot_user_id}\")\n```\n\n----------------------------------------\n\nTITLE: Custom Retry Handler Implementation in Python Slack SDK\nDESCRIPTION: Demonstrates how to create a custom retry handler by extending the RetryHandler class and implementing custom retry logic for specific error conditions.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/docs/content/web.md#2025-04-17_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nimport socket\nfrom typing import Optional\nfrom slack_sdk.http_retry import (RetryHandler, RetryState, HttpRequest, HttpResponse)\nfrom slack_sdk.http_retry.builtin_interval_calculators import BackoffRetryIntervalCalculator\nfrom slack_sdk.http_retry.jitter import RandomJitter\n\nclass MyRetryHandler(RetryHandler):\n    def _can_retry(\n        self,\n        *,\n        state: RetryState,\n        request: HttpRequest,\n        response: Optional[HttpResponse] = None,\n        error: Optional[Exception] = None\n    ) -> bool:\n        # [Errno 104] Connection reset by peer\n        return error is not None and isinstance(error, socket.error) and error.errno == 104\n\nclient = WebClient(\n    token=os.environ[\"SLACK_BOT_TOKEN\"],\n    retry_handlers=[MyRetryHandler(\n        max_retry_count=1,\n        interval_calculator=BackoffRetryIntervalCalculator(\n            backoff_factor=0.5,\n            jitter=RandomJitter(),\n        ),\n    )],\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Slack Channels Using conversations_create in Python Slack SDK\nDESCRIPTION: Creates a new Slack channel with a specified name. Set is_private=True to create a private channel. The example also demonstrates archiving the newly created channel.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/docs/content/web.md#2025-04-17_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom slack_sdk import WebClient\nfrom time import time\n\nclient = WebClient(token=os.environ[\"SLACK_BOT_TOKEN\"])\nchannel_name = f\"my-private-channel-{round(time())}\"\nresponse = client.conversations_create(\n    name=channel_name,\n    is_private=True\n)\nchannel_id = response[\"channel\"][\"id\"]\nresponse = client.conversations_archive(channel=channel_id)\n```\n\n----------------------------------------\n\nTITLE: Sharing File in Channel\nDESCRIPTION: Posts a message in a Slack channel to share the uploaded file using chat.postMessage API method.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/docs/content/tutorial/uploading-files.md#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfile_url = new_file.get(\"file\").get(\"permalink\")\nnew_message = client.chat_postMessage(\n    channel=\"C123456789\",\n    text=f\"Here is the file: {file_url}\",\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Slack SDK via pip\nDESCRIPTION: Command to install the Slack SDK package using pip, the Python package manager.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/docs/content/installation.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install slack_sdk\n```\n\n----------------------------------------\n\nTITLE: Direct API Method Calling in Python Slack SDK\nDESCRIPTION: Shows how to directly call Slack API methods using the api_call method when newer SDK methods are not yet available.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/docs/content/web.md#2025-04-17_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom slack_sdk import WebClient\n\nclient = WebClient(token=os.environ['SLACK_BOT_TOKEN'])\nresponse = client.api_call(\n    api_method='chat.postMessage',\n    params={'channel': '#random','text': \"Hello world!\"}\n)\nassert response[\"message\"][\"text\"] == \"Hello world!\"\n```\n\n----------------------------------------\n\nTITLE: Deleting Files from a Slack Workspace with Python\nDESCRIPTION: This code demonstrates how to delete all files associated with a bot user from a Slack workspace. It iterates through files retrieved with the files_list method and uses the files_delete method to remove each file identified by its ID.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/docs/content/tutorial/uploading-files.md#2025-04-17_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfor page in client.files_list(user=bot_user_id):\n    for file in page.get(\"files\", []):\n        client.files_delete(file=file[\"id\"])\n```\n\n----------------------------------------\n\nTITLE: Handling OAuth callback in Flask - Part 1\nDESCRIPTION: First part of the Flask route handler that processes OAuth callback from Slack, including retrieving the auth code and requesting access tokens.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/docs/content/installation.md#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n@app.route(\"/slack/oauth_redirect\", methods=[\"GET\"])\ndef post_install():\n    # Verify the \"state\" parameter\n\n    # Retrieve the auth code from the request params\n    code_param = request.args['code']\n\n    # An empty string is a valid token for this request\n    client = WebClient()\n\n    # Request the auth tokens from Slack\n    response = client.oauth_v2_access(\n        client_id=client_id,\n        client_secret=client_secret,\n        code=code_param\n    )\n```\n\n----------------------------------------\n\nTITLE: Configuring SSL and Proxy for Python Slack SDK\nDESCRIPTION: This example shows how to configure SSL context and proxy settings for the Python Slack SDK WebClient. It includes imports and client initialization with custom SSL and proxy options.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/README.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom slack_sdk import WebClient\nfrom ssl import SSLContext\n\nsslcert = SSLContext()\n# pip3 install proxy.py\n# proxy --port 9000 --log-level d\nproxyinfo = \"http://localhost:9000\"\n\nclient = WebClient(\n    token=os.environ['SLACK_BOT_TOKEN'],\n    ssl=sslcert,\n    proxy=proxyinfo\n)\nresponse = client.chat_postMessage(channel=\"#random\", text=\"Hello World!\")\nprint(response)\n```\n\n----------------------------------------\n\nTITLE: Async SCIM Client Implementation\nDESCRIPTION: Shows how to use the async version of the SCIM client with asyncio for asynchronous API calls.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/docs/content/scim.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nimport os\nfrom slack_sdk.scim.async_client import AsyncSCIMClient\n\nclient = AsyncSCIMClient(token=os.environ[\"SLACK_ORG_ADMIN_USER_TOKEN\"])\n\nasync def main():\n    response = await client.search_groups(start_index=1, count=2)\n    print(response.groups)\n\nasyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Sending an Ephemeral Message with Python Slack SDK\nDESCRIPTION: This code shows how to send an ephemeral message which is only visible to a specific user in a channel. It requires specifying the channel ID, message text, and the target user ID.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/docs/content/web.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom slack_sdk import WebClient\n\nslack_token = os.environ[\"SLACK_BOT_TOKEN\"]\nclient = WebClient(token=slack_token)\n\nresponse = client.chat_postEphemeral(\n    channel=\"C0XXXXXX\",\n    text=\"Hello silently from your app! :tada:\",\n    user=\"U0XXXXXXX\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom RetryHandler for WebhookClient in Python\nDESCRIPTION: Shows how to add a custom RetryHandler to the WebhookClient. This example adds a RateLimitErrorRetryHandler to handle HTTP 429 responses, and demonstrates creating a custom retry handler for specific socket errors.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/docs/content/webhook.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom slack_sdk.webhook import WebhookClient\nurl = \"https://hooks.slack.com/services/T00000000/B00000000/XXXXXXXXXXXXXXXXXXXXXXXX\"\nwebhook = WebhookClient(url=url)\n\nfrom slack_sdk.http_retry.builtin_handlers import RateLimitErrorRetryHandler\nrate_limit_handler = RateLimitErrorRetryHandler(max_retry_count=1)\n\nclient.retry_handlers.append(rate_limit_handler)\n\nimport socket\nfrom typing import Optional\nfrom slack_sdk.http_retry import (RetryHandler, RetryState, HttpRequest, HttpResponse)\nfrom slack_sdk.http_retry.builtin_interval_calculators import BackoffRetryIntervalCalculator\nfrom slack_sdk.http_retry.jitter import RandomJitter\n\nclass MyRetryHandler(RetryHandler):\n    def _can_retry(\n        self,\n        *,\n        state: RetryState,\n        request: HttpRequest,\n        response: Optional[HttpResponse] = None,\n        error: Optional[Exception] = None\n    ) -> bool:\n        return error is not None and isinstance(error, socket.error) and error.errno == 104\n\nwebhook = WebhookClient(\n    url=url,\n    retry_handlers=[MyRetryHandler(\n        max_retry_count=1,\n        interval_calculator=BackoffRetryIntervalCalculator(\n            backoff_factor=0.5,\n            jitter=RandomJitter(),\n        ),\n    )],\n)\n```\n\n----------------------------------------\n\nTITLE: Custom Retry Handler Implementation\nDESCRIPTION: Shows how to implement a custom retry handler for specific error conditions with backoff and jitter strategies.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/docs/content/scim.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport socket\nfrom typing import Optional\nfrom slack_sdk.http_retry import (RetryHandler, RetryState, HttpRequest, HttpResponse)\nfrom slack_sdk.http_retry.builtin_interval_calculators import BackoffRetryIntervalCalculator\nfrom slack_sdk.http_retry.jitter import RandomJitter\n\nclass MyRetryHandler(RetryHandler):\n    def _can_retry(\n        self,\n        *,\n        state: RetryState,\n        request: HttpRequest,\n        response: Optional[HttpResponse] = None,\n        error: Optional[Exception] = None\n    ) -> bool:\n        # [Errno 104] Connection reset by peer\n        return error is not None and isinstance(error, socket.error) and error.errno == 104\n\nclient = SCIMClient(\n    token=os.environ[\"SLACK_ORG_ADMIN_USER_TOKEN\"],\n    retry_handlers=[MyRetryHandler(\n        max_retry_count=1,\n        interval_calculator=BackoffRetryIntervalCalculator(\n            backoff_factor=0.5,\n            jitter=RandomJitter(),\n        ),\n    )],\n)\n```\n\n----------------------------------------\n\nTITLE: Broadcasting a Threaded Reply with Python Slack SDK\nDESCRIPTION: This example demonstrates how to send a reply to a thread that is also broadcast to the channel for all members to see, by setting reply_broadcast to True.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/docs/content/web.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nresponse = client.chat_postMessage(\n    channel=\"C0XXXXXX\",\n    thread_ts=\"1476746830.000003\",\n    text=\"Hello from your app! :tada:\",\n    reply_broadcast=True\n)\n```\n\n----------------------------------------\n\nTITLE: Basic Slack SDK test script\nDESCRIPTION: Sample Python script that enables debug logging and tests the API connection using the WebClient.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/docs/content/installation.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# test.py\nimport sys\n# Enable debug logging\nimport logging\nlogging.basicConfig(level=logging.DEBUG)\n# Verify it works\nfrom slack_sdk import WebClient\nclient = WebClient()\napi_response = client.api_test()\n```\n\n----------------------------------------\n\nTITLE: Accessing Schemas and Actions in Audit Logs API\nDESCRIPTION: Shows how to access the /schemes and /actions endpoints using the AuditLogsClient. These endpoints provide metadata about available audit log schemas and actions.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/docs/content/audit-logs.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\napi_response = client.schemas()\napi_response = client.actions()\n```\n\n----------------------------------------\n\nTITLE: Setting up asyncio-based SocketModeClient\nDESCRIPTION: Shows how to import the asyncio-based SocketModeClient using aiohttp. This approach requires an application compatible with asyncio's async/await programming model.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/docs/content/socket-mode.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nimport os\nfrom slack_sdk.web.async_client import AsyncWebClient\nfrom slack_sdk.socket_mode.aiohttp import SocketModeClient\n```\n\n----------------------------------------\n\nTITLE: Connecting to Slack RTM API Using Legacy v1 Client in Python\nDESCRIPTION: Example of connecting to Slack's RTM API using the legacy v1 client. This code uses the @RTMClient.run_on decorator to register a message event handler that responds with a greeting when 'Hello' is detected. Note that this approach is no longer recommended for new development.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/docs/content/rtm.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom slack_sdk.rtm import RTMClient\n\n@RTMClient.run_on(event=\"message\")\ndef say_hello(**payload):\n    data = payload['data']\n    web_client = payload['web_client']\n\n    if 'Hello' in data['text']:\n        channel_id = data['channel']\n        thread_ts = data['ts']\n        user = data['user'] # This is not username but user ID (the format is either U*** or W***)\n\n        web_client.chat_postMessage(\n            channel=channel_id,\n            text=f\"Hi <@{user}>!\",\n            thread_ts=thread_ts\n        )\n\nslack_token = os.environ[\"SLACK_BOT_TOKEN\"]\nrtm_client = RTMClient(token=slack_token)\nrtm_client.start()\n```\n\n----------------------------------------\n\nTITLE: Creating OAuth initiation endpoint in Flask\nDESCRIPTION: Flask route handler that generates an OAuth authorization link for Slack app installation.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/docs/content/installation.md#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n@app.route(\"/slack/install\", methods=[\"GET\"])\ndef pre_install():\n    state = \"randomly-generated-one-time-value\"\n    return '<a href=\"https://slack.com/oauth/v2/authorize?' \\\n        f'scope={oauth_scope}&client_id={client_id}&state={state}\">' \\\n        'Add to Slack</a>'\n```\n\n----------------------------------------\n\nTITLE: Uploading a File with Python Slack SDK\nDESCRIPTION: This snippet demonstrates how to upload a file to a Slack channel using the files_upload_v2 method, including setting a title and initial comment.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/docs/content/web.md#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nresponse = client.files_upload_v2(\n    file=\"test.pdf\",\n    title=\"Test upload\",\n    channel=\"C3UKJTQAC\",\n    initial_comment=\"Here is the latest version of the file!\",\n)\n```\n\n----------------------------------------\n\nTITLE: Example RTM App in v2 with slack.RTMClient\nDESCRIPTION: The same simple app reimplemented using slackclient v2 syntax with the decorator-based event handling pattern. It uses the @slack.RTMClient.run_on decorator to register a callback for message events.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/docs/content/v3-migration.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport slack\n\nslack_token = os.environ[\"SLACK_API_TOKEN\"]\nrtmclient = slack.RTMClient(token=slack_token)\n\n@slack.RTMClient.run_on(event='message')\ndef say_hello(**payload):\n    data = payload['data']\n    if 'Hello' in data['text']:\n        channel_id = data['channel']\n        thread_ts = data['ts']\n        user = data['user']\n\n        webclient = payload['web_client']\n        webclient.chat_postMessage(\n            channel=channel_id,\n            text=\"Hi <@{}>!\".format(user),\n            thread_ts=thread_ts\n        )\n\nrtmclient.start()\n```\n\n----------------------------------------\n\nTITLE: Verifying Slack SDK installation\nDESCRIPTION: Python code to verify that the SDK is correctly installed and can connect to the Slack API.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/docs/content/installation.md#2025-04-17_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport logging\nfrom slack_sdk import WebClient\nlogging.basicConfig(level=logging.DEBUG)\nclient = WebClient(token=os.environ[\"SLACK_BOT_TOKEN\"])\nres = client.api_test()\n```\n\n----------------------------------------\n\nTITLE: Setting environment variable for Slack token\nDESCRIPTION: Example of running a Python application with an environment variable for the Slack bot token.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/docs/content/installation.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nSLACK_BOT_TOKEN=\"xoxb-111-222-xxxxx\" python myapp.py\n```\n\n----------------------------------------\n\nTITLE: Example RTM App in v1 with SlackClient\nDESCRIPTION: A simple example app using slackclient v1 that replies to 'Hello' messages in a thread using the RTM API. This demonstrates the old connection pattern with rtm_connect() and rtm_read().\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/docs/content/v3-migration.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom slackclient import SlackClient\n\nslack_token = os.environ[\"SLACK_API_TOKEN\"]\nclient = SlackClient(slack_token)\n\ndef say_hello(data):\n    if 'Hello' in data['text']:\n        channel_id = data['channel']\n        thread_ts = data['ts']\n        user = data['user']\n\n        client.api_call('chat.postMessage',\n            channel=channel_id,\n            text=\"Hi <@{}>!\".format(user),\n            thread_ts=thread_ts\n        )\n\nif client.rtm_connect():\n    while client.server.connected is True:\n        for data in client.rtm_read():\n            if \"type\" in data and data[\"type\"] == \"message\":\n                say_hello(data)\nelse:\n    print \"Connection Failed\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Onboarding Function for New Slack Users\nDESCRIPTION: A function that creates a new onboarding tutorial, sends a message to the user, and stores the message timestamp for future updates.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/tutorial/03-responding-to-slack-events.md#2025-04-17_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\ndef start_onboarding(user_id: str, channel: str, client: WebClient):\n    # Create a new onboarding tutorial.\n    onboarding_tutorial = OnboardingTutorial(channel)\n\n    # Get the onboarding message payload\n    message = onboarding_tutorial.get_message_payload()\n\n    # Post the onboarding message in Slack\n    response = client.chat_postMessage(**message)\n\n    # Capture the timestamp of the message we've just posted so\n    # we can use it to update the message after a user\n    # has completed an onboarding task.\n    onboarding_tutorial.timestamp = response[\"ts\"]\n\n    # Store the message sent in onboarding_tutorials_sent\n    if channel not in onboarding_tutorials_sent:\n        onboarding_tutorials_sent[channel] = {}\n    onboarding_tutorials_sent[channel][user_id] = onboarding_tutorial\n```\n\n----------------------------------------\n\nTITLE: Listing File IDs from a Slack Workspace with Python\nDESCRIPTION: This snippet shows how to retrieve a list of file IDs from a Slack workspace. It uses the files_list method to get files associated with a specific bot user and stores their IDs in an array, with automatic pagination handling.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/docs/content/tutorial/uploading-files.md#2025-04-17_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfile_ids = []\n# The Python SDK will automatically paginate for you within a for-loop.\nfor page in client.files_list(user=bot_user_id):\n    for file in page.get(\"files\", []):\n        file_ids.append(file[\"id\"])\n\nprint(file_ids)\n```\n\n----------------------------------------\n\nTITLE: Using AsyncAuditLogsClient for Asynchronous API Calls\nDESCRIPTION: Demonstrates how to use the asynchronous client for making Audit Logs API calls with asyncio. This client relies on the aiohttp library and provides async/await compatible methods.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/docs/content/audit-logs.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom slack_sdk.audit_logs.async_client import AsyncAuditLogsClient\nclient = AsyncAuditLogsClient(token=os.environ[\"SLACK_ORG_ADMIN_USER_TOKEN\"])\n\napi_response = await client.logs(action=\"user_login\", limit=1)\napi_response.typed_body  # slack_sdk.audit_logs.v1.LogsResponse\n```\n\n----------------------------------------\n\nTITLE: Handling Team Join Events in Slack\nDESCRIPTION: Event handler for the 'team_join' event that opens a direct message with new users and starts the onboarding process.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/tutorial/03-responding-to-slack-events.md#2025-04-17_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\n@app.event(\"team_join\")\ndef onboarding_message(event, client):\n    \"\"\"Create and send an onboarding welcome message to new users. Save the\n    time stamp of this message so we can update this message in the future.\n    \"\"\"\n    # Get the id of the Slack user associated with the incoming event\n    user_id = event.get(\"user\", {}).get(\"id\")\n\n    # Open a DM with the new user.\n    response = client.conversations_open(users=user_id)\n    channel = response[\"channel\"][\"id\"]\n\n    # Post the onboarding message.\n    start_onboarding(user_id, channel, client)\n```\n\n----------------------------------------\n\nTITLE: Uploading Text File to Slack\nDESCRIPTION: Creates and uploads a new text file to Slack using files_upload_v2 API method with specified title, filename, and content.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/docs/content/tutorial/uploading-files.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nnew_file = client.files_upload_v2(\n    title=\"My Test Text File\",\n    filename=\"test.txt\",\n    content=\"Hi there! This is a text file!\",\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Slack Bolt App Instance\nDESCRIPTION: Creating an instance of the Bolt App class to handle Slack events and interactions.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/tutorial/03-responding-to-slack-events.md#2025-04-17_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\napp = App()\n```\n\n----------------------------------------\n\nTITLE: Handling OAuth Callback in Python Slack Bot\nDESCRIPTION: Route handler for OAuth callback that exchanges temporary code for access token and initializes the welcome channel. Validates state parameter and stores the bot token.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/docs/content/tutorial/understanding-oauth-scopes.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Grab client Secret from your environment variables\nclient_secret = os.environ[\"SLACK_CLIENT_SECRET\"]\n\n# Route for Oauth flow to redirect to after user accepts scopes\n@app.route(\"/finish_auth\", methods=[\"GET\", \"POST\"])\ndef post_install():\n    # Retrieve the auth code and state from the request params\n    auth_code = request.args['code']\n    received_state = request.args['state']\n\n# This request doesn't need a token so an empty string will suffice\nclient = WebClient(token=\"\")\n\n# verify state received in params matches state we originally sent in auth request\nif received_state == state:\n    # Request the auth tokens from Slack\n    response = client.oauth_v2_access(\n        client_id=client_id,\n        client_secret=client_secret,\n        code=auth_code\n    )\nelse:\n    return \"Invalid State\"\n\n# Save the bot token to an environmental variable or to your data store\nos.environ[\"SLACK_BOT_TOKEN\"] = response['access_token']\n\n# See if \"the-welcome-channel\" exists. Create it if it doesn't.\nchannel_exists()\n\n# Don't forget to let the user know that auth has succeeded!\nreturn \"Auth complete!\"\n```\n\n----------------------------------------\n\nTITLE: Setting Slack Bot Token in Bash\nDESCRIPTION: This snippet shows how to set the Slack bot token as an environment variable. The token is necessary for the app to authenticate with Slack's API.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/tutorial/04-running-the-app.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ export SLACK_BOT_TOKEN='xoxb-XXXXXXXXXXXX-xxxxxxxxxxxx-XXXXXXXXXXXXXXXXXXXXXXXX'\n```\n\n----------------------------------------\n\nTITLE: Starting the Slack Bolt App\nDESCRIPTION: Setting up logging and starting the Bolt app to listen on port 3000.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/tutorial/03-responding-to-slack-events.md#2025-04-17_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\nif __name__ == \"__main__\":\n    logger = logging.getLogger()\n    logger.setLevel(logging.DEBUG)\n    logger.addHandler(logging.StreamHandler())\n    app.start(3000)\n```\n\n----------------------------------------\n\nTITLE: Example of Slack RTM Message Event Format in JavaScript\nDESCRIPTION: Sample JSON structure of a message event received from Slack's RTM API. This illustrates the structure of event data that will be passed to the handler functions in the previous examples.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/docs/content/rtm.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    'type': 'message',\n    'ts': '1358878749.000002',\n    'user': 'U023BECGF',\n    'text': 'Hello'\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Slack Signing Secret in Bash\nDESCRIPTION: This code sets the Slack signing secret as an environment variable. The signing secret is used to verify that incoming requests are actually from Slack.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/tutorial/04-running-the-app.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ export SLACK_SIGNING_SECRET='xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'\n```\n\n----------------------------------------\n\nTITLE: Using websocket_client library with SocketModeClient\nDESCRIPTION: Example of using the websocket_client library instead of the built-in WebSocket client. This requires installing the websocket_client package as a dependency.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/docs/content/socket-mode.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Note that the pockage is different\nfrom slack_sdk.socket_mode.websocket_client import SocketModeClient\n\nclient = SocketModeClient(\n    app_token=os.environ.get(\"SLACK_APP_TOKEN\"),  # xapp-A111-222-xyz\n    web_client=WebClient(token=os.environ.get(\"SLACK_BOT_TOKEN\"))  # xoxb-111-222-xyz\n)\n```\n\n----------------------------------------\n\nTITLE: Importing Web API Package in Python\nDESCRIPTION: Package paths for accessing Slack Web API functionality in both synchronous and asynchronous contexts.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/docs/content/index.md#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nslack_sdk.web, slack_sdk.web.async_client\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using AuditLogsClient in Python Slack SDK\nDESCRIPTION: Demonstrates how to initialize the AuditLogsClient and make a request to the /logs endpoint. Requires an OAuth token with admin scope. The example retrieves user login events with a limit of 1 record.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/docs/content/audit-logs.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom slack_sdk.audit_logs import AuditLogsClient\n\nclient = AuditLogsClient(token=os.environ[\"SLACK_ORG_ADMIN_USER_TOKEN\"])\n\napi_response = client.logs(action=\"user_login\", limit=1)\napi_response.typed_body  # slack_sdk.audit_logs.v1.LogsResponse\n```\n\n----------------------------------------\n\nTITLE: Implementing RateLimitErrorRetryHandler for AuditLogsClient\nDESCRIPTION: Shows how to add a RateLimitErrorRetryHandler to handle HTTP 429 rate limit errors. The default client only includes ConnectionErrorRetryHandler, but additional handlers can be appended.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/docs/content/audit-logs.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom slack_sdk.audit_logs import AuditLogsClient\nclient = AuditLogsClient(token=os.environ[\"SLACK_ORG_ADMIN_USER_TOKEN\"])\n\n# This handler does retries when HTTP status 429 is returned\nfrom slack_sdk.http_retry.builtin_handlers import RateLimitErrorRetryHandler\nrate_limit_handler = RateLimitErrorRetryHandler(max_retry_count=1)\n\n# Enable rate limited error retries as well\nclient.retry_handlers.append(rate_limit_handler)\n```\n\n----------------------------------------\n\nTITLE: Importing Request Signature Verification Package in Python\nDESCRIPTION: Package path for verifying request signatures from Slack API servers.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/docs/content/index.md#2025-04-17_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\nslack_sdk.signature\n```\n\n----------------------------------------\n\nTITLE: Getting Conversation Members Using conversations_members in Python Slack SDK\nDESCRIPTION: Retrieves a list of user IDs for members in a specified conversation or channel.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/docs/content/web.md#2025-04-17_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom slack_sdk import WebClient\n\nclient = WebClient(token=os.environ[\"SLACK_BOT_TOKEN\"])\nresponse = client.conversations_members(channel=\"C16180339\")\nuser_ids = response[\"members\"]\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom RetryHandler for AuditLogsClient\nDESCRIPTION: Demonstrates how to create and implement a custom RetryHandler by inheriting from slack_sdk.http_retry.RetryHandler. This example creates a handler for connection reset errors (errno 104) with backoff and jitter.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/docs/content/audit-logs.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport socket\nfrom typing import Optional\nfrom slack_sdk.http_retry import (RetryHandler, RetryState, HttpRequest, HttpResponse)\nfrom slack_sdk.http_retry.builtin_interval_calculators import BackoffRetryIntervalCalculator\nfrom slack_sdk.http_retry.jitter import RandomJitter\n\nclass MyRetryHandler(RetryHandler):\n    def _can_retry(\n        self,\n        *,\n        state: RetryState,\n        request: HttpRequest,\n        response: Optional[HttpResponse] = None,\n        error: Optional[Exception] = None\n    ) -> bool:\n        # [Errno 104] Connection reset by peer\n        return error is not None and isinstance(error, socket.error) and error.errno == 104\n\nclient = AuditLogsClient(\n    token=os.environ[\"SLACK_ORG_ADMIN_USER_TOKEN\"],\n    retry_handlers=[MyRetryHandler(\n        max_retry_count=1,\n        interval_calculator=BackoffRetryIntervalCalculator(\n            backoff_factor=0.5,\n            jitter=RandomJitter(),\n        ),\n    )],\n)\n```\n\n----------------------------------------\n\nTITLE: WebClient Usage in v1 vs v3\nDESCRIPTION: Comparison of making an API call with WebClient in v1 versus v3. This shows the differences in initialization and method calling patterns, particularly how parameters are passed to API methods.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/docs/content/v3-migration.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Before:\n# from slackclient import SlackClient\n#\n# client = SlackClient(os.environ[\"SLACK_API_TOKEN\"])\n# client.api_call('chat.postMessage',\n#     timeout=30,\n#     channel='C0123456',\n#     text=\"Hi!\")\n\n# After:\n\nimport slack\n\nclient = slack.WebClient(os.environ[\"SLACK_API_TOKEN\"], timeout=30)\nclient.api_call('chat.postMessage', json={\n    'channel': 'C0123456',\n    'text': 'Hi!'})\n```\n\n----------------------------------------\n\nTITLE: CRUD Operations for Users\nDESCRIPTION: Demonstrates creating, updating, patching, and deleting user resources using the SCIM API client.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/docs/content/scim.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom slack_sdk.scim.v1.user import User, UserName, UserEmail\n\n# POST /Users\n# Creates a user. Must include the user_name argument and at least one email address.\n# You may provide an email address as the user_name value,\n# but it will be automatically converted to a Slack-appropriate username.\nuser = User(\n    user_name=\"cal\",\n    name=UserName(given_name=\"C\", family_name=\"Henderson\"),\n    emails=[UserEmail(value=\"your-unique-name@example.com\")],\n)\ncreation_result = client.create_user(user)\n\n# PATCH /Users/{user_id}\n# Updates an existing user resource, overwriting values for specified attributes.\npatch_result = client.patch_user(\n    id=creation_result.user.id,\n    partial_user=User(user_name=\"chenderson\"),\n)\n\n# PUT /Users/{user_id}\n# Updates an existing user resource, overwriting all values for a user\n# even if an attribute is empty or not provided.\nuser_to_update = patch_result.user\nuser_to_update.name = UserName(given_name=\"Cal\", family_name=\"Henderson\")\nupdate_result = client.update_user(user=user_to_update)\n\n# DELETE /Users/{user_id}\n# Sets a Slack user to deactivated. The value of the {id}\n# should be the user's corresponding Slack ID, beginning with either U or W.\ndelete_result = client.delete_user(user_to_update.id)\n```\n\n----------------------------------------\n\nTITLE: Configuring Retry Handlers\nDESCRIPTION: Demonstrates how to configure and customize retry handlers for handling rate limits and connection errors.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/docs/content/scim.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom slack_sdk.scim import SCIMClient\nclient = SCIMClient(token=os.environ[\"SLACK_ORG_ADMIN_USER_TOKEN\"])\n\n# This handler does retries when HTTP status 429 is returned\nfrom slack_sdk.http_retry.builtin_handlers import RateLimitErrorRetryHandler\nrate_limit_handler = RateLimitErrorRetryHandler(max_retry_count=1)\n\n# Enable rate limited error retries as well\nclient.retry_handlers.append(rate_limit_handler)\n```\n\n----------------------------------------\n\nTITLE: Import Pattern Changes in v3\nDESCRIPTION: Demonstrates the change in import statements when migrating from slackclient to slack_sdk. This shows how to import the WebClient class from the slack_sdk package.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/docs/content/v3-migration.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Before:\n# import slackclient\n\n# After:\nfrom slack import WebClient\n```\n\n----------------------------------------\n\nTITLE: Initiating OAuth Flow with Add to Slack Button\nDESCRIPTION: Route handler that generates an Add to Slack button with OAuth authorization URL containing required scopes and state parameter.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/docs/content/tutorial/understanding-oauth-scopes.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Grab client ID from your environment variables\nclient_id = os.environ[\"SLACK_CLIENT_ID\"]\n# Generate random string to use as state to prevent CSRF attacks\nfrom uuid import uuid4\nstate = str(uuid4())\n\n# Route to kick off Oauth flow\n@app.route(\"/begin_auth\", methods=[\"GET\"])\ndef pre_install():\n    return f'<a href=\"https://slack.com/oauth/v2/authorize?scope=channels:read,groups:read,channels:manage,chat:write&client_id={ client_id }&state={ state }\"><img alt=\"\"Add to Slack\"\" height=\"40\" width=\"139\" src=\"https://platform.slack-edge.com/img/add_to_slack.png\" srcset=\"https://platform.slack-edge.com/img/add_to_slack.png 1x, https://platform.slack-edge.com/img/add_to_slack@2x.png 2x\" /></a>'\n```\n\n----------------------------------------\n\nTITLE: Initializing Slack Web API Client in Python\nDESCRIPTION: Python code to set up logging and initialize the Slack Web API client using the environment variable token.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/docs/content/tutorial/uploading-files.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport logging, os\n\n# Sets the debug level. \n# If you're using this in production, you can change this back to INFO and add extra log entries as needed.\nlogging.basicConfig(level=logging.DEBUG)\n\n# Initialize the Web API client.\n# This expects that you've already set your SLACK_BOT_TOKEN as an environment variable.\n# Try to resist the urge to put your token directly in your code; it is best practice not to.\nfrom slack_sdk import WebClient\nclient = WebClient(os.environ[\"SLACK_BOT_TOKEN\"])\n```\n\n----------------------------------------\n\nTITLE: Retrieving Team Data with slack.RTMClient and Event Handling\nDESCRIPTION: Example showing how to retrieve team data using the v2 event-based pattern. This demonstrates how to extract team information from the 'open' event payload instead of accessing it from the client object.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/docs/content/v3-migration.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@slack.RTMClient.run_on(event='open')\ndef get_team_data(**payload):\n    team_domain = payload['data']['team']['domain']\n```\n\n----------------------------------------\n\nTITLE: Searching Groups with SCIM Client\nDESCRIPTION: Shows how to use the SCIM client to search for groups with pagination parameters.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/docs/content/scim.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresponse = client.search_groups(\n    start_index=1,\n    count=10,\n)\nresponse.groups  # List[Group]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Slack token from environment variables\nDESCRIPTION: Python code to access a Slack bot token that was set as an environment variable.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/docs/content/installation.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport os\nSLACK_BOT_TOKEN = os.environ[\"SLACK_BOT_TOKEN\"]\n```\n\n----------------------------------------\n\nTITLE: Creating JSON Payload for Slack Block Kit Message in Python\nDESCRIPTION: This code snippet shows the JSON payload structure required to create an onboarding message in Slack using Block Kit. The message includes welcome text, instructions for emoji reactions and pinning messages, with dividers and context blocks for additional information.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/tutorial/02-building-a-message.md#2025-04-17_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n{\n    \"channel\": \"D0123456\",\n    \"username\": \"pythonboardingbot\",\n    \"icon_emoji\": \":robot_face:\",\n    \"blocks\": [\n        {\n            \"type\": \"section\",\n            \"text\": {\n                \"type\": \"mrkdwn\",\n                \"text\": \"Welcome to Slack! :wave: We're so glad you're here. :blush:\\n\\n*Get started by completing the steps below:*\",\n            },\n        },\n        {\"type\": \"divider\"},\n        {\n            \"type\": \"section\",\n            \"text\": {\n                \"type\": \"mrkdwn\",\n                \"text\": \":white_large_square: *Add an emoji reaction to this message* :thinking_face:\\nYou can quickly respond to any message on Slack with an emoji reaction. Reactions can be used for any purpose: voting, checking off to-do items, showing excitement.\",\n            },\n        },\n        {\n            \"type\": \"context\",\n            \"elements\": [\n                {\n                    \"type\": \"mrkdwn\",\n                    \"text\": \" :information_source: *<https://get.slack.help/hc/en-us/articles/206870317-Emoji-reactions|Learn How to Use Emoji Reactions>*\",\n                }\n            ],\n        },\n        {\"type\": \"divider\"},\n        {\n            \"type\": \"section\",\n            \"text\": {\n                \"type\": \"mrkdwn\",\n                \"text\": \":white_large_square: *Pin this message* :round_pushpin:\\nImportant messages and files can be pinned to the details pane in any channel or direct message, including group messages, for easy reference.\",\n            },\n        },\n        {\n            \"type\": \"context\",\n            \"elements\": [\n                {\n                    \"type\": \"mrkdwn\",\n                    \"text\": \" :information_source: *<https://get.slack.help/hc/en-us/articles/205239997-Pinning-messages-and-files|Learn How to Pin a Message>*\",\n                }\n            ],\n        },\n    ],\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Slack Channel using WebClient in Python\nDESCRIPTION: Function that creates a new channel named 'the-welcome-channel' using the Slack Web API. Requires channels:manage scope.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/docs/content/tutorial/understanding-oauth-scopes.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# creates a channel named \"the-welcome-channel\"\ndef create_channel():\n    token = os.environ[\"SLACK_BOT_TOKEN\"]\n    client = WebClient(token=token)\n    resp = client.conversations_create(name=\"the-welcome-channel\")\n```\n\n----------------------------------------\n\nTITLE: Setting up virtual environment for troubleshooting\nDESCRIPTION: Commands to create a virtual environment, activate it, install the SDK, and set environment variables for testing.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/docs/content/installation.md#2025-04-17_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n# Create a dedicated virtual env for running your Python scripts\npython -m venv .venv\n\n# Run .venv\\Scripts\\activate on Windows OS\nsource .venv/bin/activate\n\n# Install slack_sdk PyPI package\npip install \"slack_sdk>=3.0\"\n\n# Set your token as an env variable (`set` command for Windows OS)\nexport SLACK_BOT_TOKEN=xoxb-***\n```\n\n----------------------------------------\n\nTITLE: Building Interactive Dialogs using DialogBuilder in Python\nDESCRIPTION: Shows how to create an interactive Slack dialog using the DialogBuilder helper class. Demonstrates adding various form elements like conversation selectors, text areas, and text fields with custom properties.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/slack/web/classes/readme.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom slack.web.client import WebClient\nfrom slack.web.classes import dialogs\n\nbuilder = (\n    dialogs.DialogBuilder()\n        .title(\"My Cool Dialog\")\n        .callback_id(\"myCoolDialog\")\n        .state({'value': 123, 'key': \"something\"})\n        .conversation_selector(name=\"target\", label=\"Choose Target\")\n        .text_area(name=\"message\", label=\"Message\", hint=\"Enter a message\", max_length=500)\n        .text_field(name=\"signature\", label=\"Signature\", optional=True, max_length=50)\n)\n\nclient = WebClient(token=\"abc\")\n\nclient.dialog_open(dialog=builder.to_dict(), trigger_id=\"123458.12355\")\n```\n\n----------------------------------------\n\nTITLE: Removing an Emoji Reaction with Python Slack SDK\nDESCRIPTION: This code demonstrates how to remove an emoji reaction from a message using the reactions_remove method, specifying the channel, emoji name, and message timestamp.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/docs/content/web.md#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nresponse = client.reactions_remove(\n    channel=\"C0XXXXXXX\",\n    name=\"thumbsup\",\n    timestamp=\"1234567890.123456\"\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Flask app for Slack OAuth\nDESCRIPTION: Setting up a Flask application with environment variables for handling Slack OAuth flow.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/docs/content/installation.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom slack_sdk import WebClient\nfrom flask import Flask, request\n\nclient_id = os.environ[\"SLACK_CLIENT_ID\"]\nclient_secret = os.environ[\"SLACK_CLIENT_SECRET\"]\noauth_scope = os.environ[\"SLACK_SCOPES\"]\n\napp = Flask(__name__)\n```\n\n----------------------------------------\n\nTITLE: Configuring Slack App Manifest in YAML\nDESCRIPTION: YAML configuration for a Slack app manifest, specifying app name, bot user details, and required OAuth scopes for file operations.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/docs/content/tutorial/uploading-files.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n_metadata:\n  major_version: 1\n  minor_version: 1\ndisplay_information:\n  name: File Writer App\nfeatures:\n  bot_user:\n    display_name: File Writer Bot\noauth_config:\n  scopes:\n    bot:\n      # Used to send messages to a channel\n      - chat:write\n      # This scope is not required if your app will just upload files. We've included it in order to use the `files.info` `files.list` methods.\n      - files:read\n      # Used to upload files to Slack\n      - files:write\n```\n\n----------------------------------------\n\nTITLE: Handling Reaction Added Events in Slack\nDESCRIPTION: Event handler for the 'reaction_added' event that updates the onboarding message when a user adds a reaction to a message.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/tutorial/03-responding-to-slack-events.md#2025-04-17_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\n@app.event(\"reaction_added\")\ndef update_emoji(event, client):\n    \"\"\"Update the onboarding welcome message after receiving a \"reaction_added\"\n    event from Slack. Update timestamp for welcome message as well.\n    \"\"\"\n    # Get the ids of the Slack user and channel associated with the incoming event\n    channel_id = event.get(\"item\", {}).get(\"channel\")\n    user_id = event.get(\"user\")\n\n    if channel_id not in onboarding_tutorials_sent:\n        return\n\n    # Get the original tutorial sent.\n    onboarding_tutorial = onboarding_tutorials_sent[channel_id][user_id]\n\n    # Mark the reaction task as completed.\n    onboarding_tutorial.reaction_task_completed = True\n\n    # Get the new message payload\n    message = onboarding_tutorial.get_message_payload()\n\n    # Post the updated message in Slack\n    updated_message = client.chat_update(**message)\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth Scopes for Sign in with Slack\nDESCRIPTION: YAML configuration for setting up the OAuth scopes required for implementing Sign in with Slack using OpenID Connect. Includes required and optional scopes.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/docs/content/oauth.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\noauth_config:\n  redirect_urls:\n    - https://{your-domain}/slack/oauth_redirect\n  scopes:\n    user:\n      - openid   # required\n      - email    # optional\n      - profile  # optional\n```\n\n----------------------------------------\n\nTITLE: Setting Slack Bot Token as Environment Variable in Bash\nDESCRIPTION: Bash command to set the Slack Bot OAuth Token as an environment variable for use in the Python script.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/docs/content/tutorial/uploading-files.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport SLACK_BOT_TOKEN=<your token>\n```\n\n----------------------------------------\n\nTITLE: Handling Pin Added Events in Slack\nDESCRIPTION: Event handler for the 'pin_added' event that updates the onboarding message when a user pins a message.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/tutorial/03-responding-to-slack-events.md#2025-04-17_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\n@app.event(\"pin_added\")\ndef update_pin(event, client):\n    \"\"\"Update the onboarding welcome message after receiving a \"pin_added\"\n    event from Slack. Update timestamp for welcome message as well.\n    \"\"\"\n    # Get the ids of the Slack user and channel associated with the incoming event\n    channel_id = event.get(\"channel_id\")\n    user_id = event.get(\"user\")\n\n    # Get the original tutorial sent.\n    onboarding_tutorial = onboarding_tutorials_sent[channel_id][user_id]\n\n    # Mark the pin task as completed.\n    onboarding_tutorial.pin_task_completed = True\n\n    # Get the new message payload\n    message = onboarding_tutorial.get_message_payload()\n\n    # Post the updated message in Slack\n    updated_message = client.chat_update(**message)\n```\n\n----------------------------------------\n\nTITLE: Configuring SSL Context for Slack App\nDESCRIPTION: Creating an SSL context using certifi to locate the CA bundle, required when running in virtual environments.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/tutorial/03-responding-to-slack-events.md#2025-04-17_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport ssl as ssl_lib\nimport certifi\n\nssl_context = ssl_lib.create_default_context(cafile=certifi.where())\n```\n\n----------------------------------------\n\nTITLE: Creating Python Virtual Environment and Installing Dependencies\nDESCRIPTION: Bash commands to set up a Python virtual environment, create a requirements file, and install the slack-sdk package.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/docs/content/tutorial/uploading-files.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\necho 'slack-sdk>=3.12,<4' > requirements.txt\npython3 -m venv .venv\nsource .venv/bin/activate\npip install -U pip\npip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Joining a Channel Using conversations_join in Python Slack SDK\nDESCRIPTION: Allows a user to join a channel using its ID. Note that bot users cannot join channels on their own and must be invited by another user.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/docs/content/web.md#2025-04-17_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nresponse = client.conversations_join(channel=\"C0XXXXXXY\")\n```\n\n----------------------------------------\n\nTITLE: Installing Requirements with pip Command\nDESCRIPTION: Terminal command to install the dependencies listed in requirements.txt file using pip3.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/tutorial/03-responding-to-slack-events.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ pip3 install -r requirements.txt\n-> Successfully installed slack_sdk-3.0.0\n```\n\n----------------------------------------\n\nTITLE: Handling Member Join Events in Slack Python Bot\nDESCRIPTION: Event listener that sends a welcome DM when a user joins the channel. Requires channels:read, groups:read, and chat:write scopes.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/docs/content/tutorial/understanding-oauth-scopes.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Create an event listener for \"member_joined_channel\" events\n# Sends a DM to the user who joined the channel\n@slack_events_adapter.on(\"member_joined_channel\")\ndef member_joined_channel(event_data):\n    user = event_data['event']['user']\n    token = os.environ[\"SLACK_BOT_TOKEN\"]\n    client = WebClient(token=token)\n    msg = 'Welcome! Thanks for joining the-welcome-channel'\n    client.chat_postMessage(channel=user, text=msg)\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with pip for Python Slack SDK\nDESCRIPTION: A requirements.txt file listing the dependencies needed for the Slack app, including slack_sdk, slack_bolt, and certifi for SSL certificate validation.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/tutorial/03-responding-to-slack-events.md#2025-04-17_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nslack_sdk>=3.0\nslack_bolt>=1.6.1\ncertifi\n```\n\n----------------------------------------\n\nTITLE: Importing Required Python Modules for Slack App\nDESCRIPTION: Importing necessary modules for the Slack app, including logging, the Bolt App framework, WebClient from slack_sdk, and a custom OnboardingTutorial class.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/tutorial/03-responding-to-slack-events.md#2025-04-17_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nimport logging\nfrom slack_bolt import App\nfrom slack_sdk.web import WebClient\nfrom onboarding_tutorial import OnboardingTutorial\n```\n\n----------------------------------------\n\nTITLE: Filtering Conversations by Type Using conversations_list in Python Slack SDK\nDESCRIPTION: Lists specific types of conversations by using the types parameter. The parameter accepts a comma-separated string of values including public_channel, private_channel, mpim, and im.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/docs/content/web.md#2025-04-17_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom slack_sdk import WebClient\n\nclient = WebClient(token=os.environ[\"SLACK_BOT_TOKEN\"])\nresponse = client.conversations_list(\n    types=\"public_channel, private_channel\"\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Up In-Memory Storage for Onboarding Data\nDESCRIPTION: Creating an empty dictionary to store onboarding tutorial instances by channel and user ID.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/tutorial/03-responding-to-slack-events.md#2025-04-17_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nonboarding_tutorials_sent = {}\n```\n\n----------------------------------------\n\nTITLE: Excluding Archived Channels Using conversations_list in Python Slack SDK\nDESCRIPTION: Retrieves a list of active conversations by excluding archived channels with the exclude_archived parameter.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/docs/content/web.md#2025-04-17_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nresponse = client.conversations_list(exclude_archived=True)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Project Environment\nDESCRIPTION: Terminal commands to create a new project folder, set up a Python virtual environment, and activate it. This isolates your project dependencies from the system Python installation.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/tutorial/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ mkdir PythOnBoardingBot && cd PythOnBoardingBot\n$ python3 -m venv env/\n$ source env/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Specifying Optional Dependencies for Python Slack SDK\nDESCRIPTION: This snippet lists the optional dependencies for the Python Slack SDK project, including their version requirements. It covers async modules, storage solutions, and Socket Mode dependencies. The comments provide context for specific version constraints and recommendations.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/requirements/optional.txt#2025-04-17_snippet_0\n\nLANGUAGE: Plain Text\nCODE:\n```\n# pip install -r requirements/optional.txt\n# async modules depend on aiohttp\naiodns>1.0\n# We recommend using 3.7.1+ for RTMClient\n# https://github.com/slackapi/python-slack-sdk/issues/912\naiohttp>=3.7.3,<4\n# used only under slack_sdk/*_store\nboto3<=2\n# InstallationStore/OAuthStateStore\n# Since v3.20, we no longer support SQLAlchemy 1.3 or older.\n# If you need to use a legacy version, please add our v3.19.5 code to your project.\nSQLAlchemy>=1.4,<3\n# Socket Mode\n# websockets 9 is not compatible with Python 3.10\nwebsockets>=9.1,<16\nwebsocket-client>=1,<2\n```\n\n----------------------------------------\n\nTITLE: Installing Slack SDK from source\nDESCRIPTION: Commands to clone the SDK repository from GitHub and install it in development mode within a virtual environment.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/docs/content/installation.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/slackapi/python-slack-sdk.git\ncd python-slack-sdk\npython3 -m venv .venv\nsource .venv/bin/activate\npip install -U pip\npip install -e .  # install the SDK project into the virtual env\n```\n\n----------------------------------------\n\nTITLE: Importing Webhook Package in Python\nDESCRIPTION: Package paths for using Slack Webhooks and response_url functionality in both synchronous and asynchronous contexts.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/docs/content/index.md#2025-04-17_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nslack_sdk.webhook, slack_sdk.webhook.async_client\n```\n\n----------------------------------------\n\nTITLE: Importing Socket Mode Package in Python\nDESCRIPTION: Package path for using Slack Socket Mode connections to receive and send messages.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/docs/content/index.md#2025-04-17_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nslack_sdk.socket_mode\n```\n\n----------------------------------------\n\nTITLE: Installing NVM for Node Version Management in Bash\nDESCRIPTION: Demonstrates how to install NVM (Node Version Manager) using a curl command, which is a prerequisite for running Docusaurus locally.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/docs/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash\n```\n\n----------------------------------------\n\nTITLE: Running Python Slack App\nDESCRIPTION: This command runs the Python script that contains the Slack app. It assumes the main file is named 'app.py'.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/tutorial/04-running-the-app.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ python3 app.py\n```\n\n----------------------------------------\n\nTITLE: Importing OAuth Package in Python\nDESCRIPTION: Package path for implementing OAuth authentication flow for Slack apps, including OpenID Connect.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/docs/content/index.md#2025-04-17_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nslack_sdk.oauth\n```\n\n----------------------------------------\n\nTITLE: Installing NPM Dependencies for Docusaurus Project in Bash\nDESCRIPTION: Demonstrates the command to install all necessary npm packages for the Docusaurus project, which is required before running the development server.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/docs/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Running the test script\nDESCRIPTION: Command to execute the Python test script.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/docs/content/installation.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython test.py\n```\n\n----------------------------------------\n\nTITLE: Importing UI Builders Package in Python\nDESCRIPTION: Package path for constructing Slack UI components using builder classes.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/docs/content/index.md#2025-04-17_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\nslack_sdk.models\n```\n\n----------------------------------------\n\nTITLE: Specifying Dependencies for Python Slack SDK\nDESCRIPTION: A requirements.txt file that lists all necessary dependencies for the Python Slack SDK. Each dependency is specified with version constraints to ensure compatibility. The file includes web frameworks like Flask and Sanic, along with security-related packages like PyJWT and cryptography.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/integration_tests/samples/openid_connect/requirements.txt#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nslack-sdk\nFlask>=2,<3\npyjwt>=2.1,<3\ncryptography>=3.4,<4\nSanic>=21.3\n```\n\n----------------------------------------\n\nTITLE: Importing Audit Logs API Package in Python\nDESCRIPTION: Package path for accessing Slack Audit Logs API functionality.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/docs/content/index.md#2025-04-17_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nslack_sdk.audit_logs\n```\n\n----------------------------------------\n\nTITLE: Defining Python Slack SDK Dependencies in requirements.txt\nDESCRIPTION: This specifies the minimum required versions of packages for a Slack application. It includes slack_sdk 3.0 or higher for API interactions, slack_bolt 1.6.1 or higher for the Bolt framework, and certifi for SSL certificate verification.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/tutorial/PythOnBoardingBot/requirements.txt#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nslack_sdk>=3.0\nslack_bolt>=1.6.1\ncertifi\n```\n\n----------------------------------------\n\nTITLE: Importing SCIM API Package in Python\nDESCRIPTION: Package path for using Slack SCIM API to manage user accounts and groups.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/docs/content/index.md#2025-04-17_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nslack_sdk.scim\n```\n\n----------------------------------------\n\nTITLE: Configuring Testing Dependencies with pip requirements\nDESCRIPTION: Defines the required Python packages and their version constraints needed for testing the Python Slack SDK. Includes packages for async testing, code quality tools, AWS testing, and database testing.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/requirements/testing.txt#2025-04-17_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\naiohttp<4  # used for a WebSocket server mock\npytest>=7.0.1,<9\npytest-asyncio<1  # for async\npytest-cov>=2,<7\n# while flake8 5.x have issues with Python 3.12, flake8 6.x requires Python >= 3.8.1,\n# so 5.x should be kept in order to stay compatible with Python 3.6/3.7\nflake8>=5.0.4,<8\n#  Don't change this version without running CI builds;\n#  The latest version may not be available for older Python runtime\nblack>=22.8.0; python_version==\"3.6\"\nblack==22.10.0; python_version>\"3.6\"\nclick==8.0.4  # black is affected by https://github.com/pallets/click/issues/2225\npsutil>=6.0.0,<8\n#  used only under slack_sdk/*_store\nboto3<=2\n# For AWS tests\nmoto>=4.0.13,<6\nmypy<=1.15.0\n# For AsyncSQLAlchemy tests\ngreenlet<=4\naiosqlite<=1\n```\n\n----------------------------------------\n\nTITLE: Importing RTM API Package in Python\nDESCRIPTION: Package path for using Slack Real Time Messaging API with WebSocket connections.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/docs/content/index.md#2025-04-17_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\nslack_sdk.rtm_v2\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies for Slack SDK\nDESCRIPTION: This snippet lists the required Python packages and their versions for the Slack SDK project. It includes docutils version 0.21.2 and pdoc3 version 0.11.6.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/requirements/documentation.txt#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndocutils==0.21.2\npdoc3==0.11.6\n```\n\n----------------------------------------\n\nTITLE: Checking Python Version in Terminal\nDESCRIPTION: Command to verify the installed Python version in your terminal. The expected output shows Python 3.6.7, which meets the minimum requirement of Python 3.6+ for this project.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/tutorial/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ python3 --version\n-> Python 3.6.7\n```\n\n----------------------------------------\n\nTITLE: Displaying Project Structure for Python Slack SDK Docusaurus Setup\nDESCRIPTION: Shows the directory structure of the Docusaurus project for Python Slack SDK documentation, including content, static assets, configuration files, and theme customizations.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/docs/README.md#2025-04-17_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ndocs/\n├── content/ (the good stuff. md/mdx files supported)\n│   ├── rtm.md\n│   └── oauth.md\n├── static/\n│   ├── api_docs/ (generated reference docs)\n│   │   └── slack_sdk/\n│   │   │   └── index.html\n│   ├── css/\n│   │   └── custom.css (the css for everything!)\n│   └── img/ (the pictures for the site)\n│       ├── rory.png \n│       └── oslo.svg \n├── src/\n│   └── theme (only contains the 404 page)\n├── docusaurus.config.js (main config file)\n├── footerConfig.js (footer. go to main repo to change)\n├── navbarConfig.js (navbar. go to main repo to change)\n└── sidebar.js (manually set where the content docs are in the sidebar.)\n```\n\n----------------------------------------\n\nTITLE: Creating a Text File Using Bash\nDESCRIPTION: A simple bash command to create a text file named 'test.txt' with a basic message. This file will be used in subsequent examples for uploading to Slack.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/docs/content/tutorial/uploading-files.md#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\necho 'Hi there! This is a text file!' > test.txt\n```\n\n----------------------------------------\n\nTITLE: Python Command Not Found Error Example\nDESCRIPTION: Example of the error message that appears when Python 3 is not installed on your system. This indicates you need to install Python 3.6+ before proceeding with the tutorial.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/tutorial/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n-> bash: python3: command not found\n```\n\n----------------------------------------\n\nTITLE: Starting Docusaurus Development Server in Bash\nDESCRIPTION: Shows the command to start the local development server for Docusaurus, which allows for live editing and preview of the documentation site.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/docs/README.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Building Static Content for Docusaurus Site in Bash\nDESCRIPTION: Demonstrates the command to generate static content for the Docusaurus site, which is necessary for deployment or local testing of the built site.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/docs/README.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run build\n```\n\n----------------------------------------\n\nTITLE: Serving Built Docusaurus Site Locally in Bash\nDESCRIPTION: Shows the command to serve the built Docusaurus site locally, allowing for testing of the generated static content before deployment.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/docs/README.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm run serve\n```\n\n----------------------------------------\n\nTITLE: Installing Latest Node Version Using NVM in Bash\nDESCRIPTION: Shows the command to install the latest version of Node.js using NVM, which is required for running Docusaurus.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/docs/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnvm install node\n```\n\n----------------------------------------\n\nTITLE: Sample Output of File IDs in Slack\nDESCRIPTION: This snippet shows the expected output from the file listing operation, displaying the IDs of three files that were uploaded to the Slack workspace in previous examples.\nSOURCE: https://github.com/slackapi/python-slack-sdk/blob/main/docs/content/tutorial/uploading-files.md#2025-04-17_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n>>> file_ids\n['F02P5J88137', 'F02P8H5BN9G', 'F02P5K7T8SZ']\n```"
  }
]