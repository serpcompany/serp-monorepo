[
  {
    "owner": "afrise",
    "repo": "mcpsharp",
    "content": "TITLE: Defining an MCP Tool with Calculator Example in C#\nDESCRIPTION: Example of how to define an MCP tool by creating a Calculator class with an Add method marked with the [McpTool] attribute. This demonstrates the basic pattern for exposing functionality to AI models.\nSOURCE: https://github.com/afrise/mcpsharp/blob/master/README.md#2025-04-19_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing MCPSharp;\n\npublic class Calculator\n{\n    [McpTool(\"add\", \"Adds two numbers\")]  // Note: [McpFunction] is deprecated, use [McpTool] instead\n    public static int Add([McpParameter(true)] int a, [McpParameter(true)] int b)\n    {\n        return a + b;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting the MCP Server in C#\nDESCRIPTION: Code snippet showing how to start the MCPServer with a server name and version. The StartAsync method automatically finds and registers methods marked with the McpTool attribute in the base assembly.\nSOURCE: https://github.com/afrise/mcpsharp/blob/master/README.md#2025-04-19_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nawait MCPServer.StartAsync(\"CalculatorServer\", \"1.0.0\");\n```\n\n----------------------------------------\n\nTITLE: Semantic Kernel Integration with MCPServer in C#\nDESCRIPTION: Example showing how to use Semantic Kernel's KernelFunction attribute to define functions that can be registered with MCPServer, allowing for seamless integration between the two frameworks.\nSOURCE: https://github.com/afrise/mcpsharp/blob/master/README.md#2025-04-19_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.SemanticKernel;\n\npublic class MySkillClass\n{\n    [KernelFunction(\"MyFunction\")]\n    [Description(\"Description of my function\")]\n    public string MyFunction(string input) => $\"Processed: {input}\";\n}\n\n// Register with MCPServer\nMCPServer.Register<MySkillClass>();\n```\n\n----------------------------------------\n\nTITLE: Creating Documented MCP Tools with XML Comments in C#\nDESCRIPTION: Example demonstrating how to use XML documentation comments to provide rich descriptions for MCP tools. MCPSharp automatically extracts this documentation to improve tool discovery and usage by AI models.\nSOURCE: https://github.com/afrise/mcpsharp/blob/master/README.md#2025-04-19_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n/// <summary>\n/// Provides mathematical operations\n/// </summary>\npublic class Calculator\n{\n    /// <summary>\n    /// Adds two numbers together\n    /// </summary>\n    /// <param name=\"a\">The first number to add</param>\n    /// <param name=\"b\">The second number to add</param>\n    /// <returns>The sum of the two numbers</returns>\n    [McpTool]\n    public static int Add(\n        [McpParameter(true)] int a,\n        [McpParameter(true)] int b)\n    {\n        return a + b;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Dynamic Tools in MCPServer with C#\nDESCRIPTION: Example of how to dynamically register tools with custom implementation using the AddToolHandler method. This allows for runtime tool creation without requiring attribute-based class definitions.\nSOURCE: https://github.com/afrise/mcpsharp/blob/master/README.md#2025-04-19_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nMCPServer.AddToolHandler(new Tool() \n{\n    Name = \"dynamicTool\",\n    Description = \"A dynamic tool\",\n    InputSchema = new InputSchema {\n        Type = \"object\",\n        Required = [\"input\"],\n        Properties = new Dictionary<string, ParameterSchema>{\n            {\"input\", new ParameterSchema{Type=\"string\", Description=\"Input value\"}}\n        }\n    }\n}, (string input) => { return $\"You provided: {input}\"; });\n```\n\n----------------------------------------\n\nTITLE: Microsoft.Extensions.AI Integration with MCPClient in C#\nDESCRIPTION: Code showing how to integrate MCPSharp with Microsoft.Extensions.AI by creating an MCPClient and getting AI functions that can be used with IChatClient implementations.\nSOURCE: https://github.com/afrise/mcpsharp/blob/master/README.md#2025-04-19_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n// Client-side integration\nMCPClient client = new(\"AIClient\", \"1.0\", \"path/to/mcp/server\");\nIList<AIFunction> functions = await client.GetFunctionsAsync();\n```\n\n----------------------------------------\n\nTITLE: Installing MCPSharp Package with .NET CLI\nDESCRIPTION: Command to install the MCPSharp NuGet package using the .NET CLI. This is the first step to integrate MCPSharp into your project.\nSOURCE: https://github.com/afrise/mcpsharp/blob/master/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet add package MCPSharp\n```\n\n----------------------------------------\n\nTITLE: Enabling XML Documentation in Project File\nDESCRIPTION: XML configuration for enabling XML documentation generation in a .NET project file. This setting is required for MCPSharp to extract documentation from XML comments for tool descriptions.\nSOURCE: https://github.com/afrise/mcpsharp/blob/master/README.md#2025-04-19_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyGroup>\n    <GenerateDocumentationFile>true</GenerateDocumentationFile>\n    <NoWarn>$(NoWarn);1591</NoWarn>\n</PropertyGroup>\n```"
  }
]