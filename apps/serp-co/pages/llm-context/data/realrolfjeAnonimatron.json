[
  {
    "owner": "realrolfje",
    "repo": "anonimatron",
    "content": "TITLE: Creating an XML Configuration File for Anonimatron\nDESCRIPTION: An example configuration file that specifies database connection details and defines which tables and columns to anonymize. It shows how to map specific columns to different anonymization types like ROMAN_NAME, ELVEN_NAME, and RANDOMDIGITS.\nSOURCE: https://github.com/realrolfje/anonimatron/blob/develop/docs/documentation/index.md#2025-04-23_snippet_4\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration jdbcurl=\"jdbc:mysql://localhost:3306/mydb\"\n               userid=\"mydata\" password=\"mypassword\">\n \n  <table name=\"userdata\">\n    <column name=\"firstname\" type=\"ROMAN_NAME\" />\n    <column name=\"lastname\" type=\"ELVEN_NAME\" />\n    <column name=\"creditcardnr\" type=\"RANDOMDIGITS\"/>\n  </table>\n \n  <table name=\"lastnames\">\n    <column name=\"lastname\" type=\"ELVEN_NAME\" />\n  </table>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Running Anonimatron with Configuration and Synonyms Files\nDESCRIPTION: Demonstrates how to execute Anonimatron with a configuration file and specify where to store the generated synonyms. The output shows the anonymization process progress and completion status.\nSOURCE: https://github.com/realrolfje/anonimatron/blob/develop/docs/documentation/index.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ ./anonimatron.sh -config config.xml -synonyms synonyms.xml\n \nAnonymization process started\n \nJdbc url      : jdbc:mysql://localhost:3306/mydb\nDatabase user : mydata\nTo do         : 2 tables.\n \nAnonymizing table 'lastnames', total progress  [100%, ETA 11:36:56 PM]\nAnonymization process completed.\n \nWriting Synonyms to synonyms.xml ...[done].\n```\n\n----------------------------------------\n\nTITLE: Querying Anonymized User Data in MySQL\nDESCRIPTION: Shows an SQL query to view the anonymized user data table after processing. The results demonstrate how names and credit card numbers have been consistently replaced with generated values.\nSOURCE: https://github.com/realrolfje/anonimatron/blob/develop/docs/documentation/index.md#2025-04-23_snippet_7\n\nLANGUAGE: SQL\nCODE:\n```\nselect * from mydb.userdata;\n```\n\n----------------------------------------\n\nTITLE: Examining Generated Synonyms XML File\nDESCRIPTION: Shows the content of the generated synonyms.xml file with Base64 encoded mappings between original and anonymized values. This file contains the relationships between original and anonymized data for each data type used.\nSOURCE: https://github.com/realrolfje/anonimatron/blob/develop/docs/documentation/index.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ cat synonyms.xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<synonyms>\n  <string type=\"ELVEN_NAME\" from=\"QnVybnM=\" to=\"RGhvZWxsaWFu\"/>\n  <string type=\"ELVEN_NAME\" from=\"RmxhbmRlcnM=\" to=\"QWhlbGhhbGRldGhlc3M=\"/>\n  <string type=\"ELVEN_NAME\" from=\"U2ltcHNvbg==\" to=\"QWhkdWxlbGhhbGVs\"/>\n  <string type=\"ROMAN_NAME\" from=\"SG9tZXI=\" to=\"QmVudWxhdWJlbGl1cw==\"/>\n  <string type=\"ROMAN_NAME\" from=\"TmVk\" to=\"RWN1cw==\"/>\n  <string type=\"ROMAN_NAME\" from=\"TWFyZ2U=\" to=\"QWxudWxhdWN1cw==\"/>\n  <string type=\"ROMAN_NAME\" from=\"Q2hhcmxlcw==\" to=\"QWxudXM=\"/>\n  <string type=\"RANDOMDIGITS\" from=\"NTY3OA==\" to=\"ODY5OA==\"/>\n  <string type=\"RANDOMDIGITS\" from=\"MTIzNA==\" to=\"NDM0Mw==\"/>\n  <string type=\"RANDOMDIGITS\" from=\"MzQ1Ng==\" to=\"NjEyNQ==\"/>\n</synonyms>\n```\n\n----------------------------------------\n\nTITLE: Querying Anonymized Lastnames Table in MySQL\nDESCRIPTION: Demonstrates querying the lastnames table to verify that anonymization was performed consistently across related tables. This shows how referential integrity is maintained during the anonymization process.\nSOURCE: https://github.com/realrolfje/anonimatron/blob/develop/docs/documentation/index.md#2025-04-23_snippet_8\n\nLANGUAGE: SQL\nCODE:\n```\nselect * from mydb.lastnames;\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Anonymizers in XML Configuration\nDESCRIPTION: Example XML configuration for Anonimatron that demonstrates how to register custom anonymizer classes and use them with tables and columns. Shows both a basic anonymizer and one with parameters.\nSOURCE: https://github.com/realrolfje/anonimatron/blob/develop/resources/anonymizers/README.md#2025-04-23_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration jdbcurl=\"jdbc:oracle:thin:@[HOST]:[PORT]:[SID]\"\n    userid=\"userid\" password=\"password\">\n    <anonymizerclass>my.package.ToLowerAnonymizer</anonymizerclass>\n    <anonymizerclass>my.package.FixedValueAnonymizer</anonymizerclass>\n    <table name=\"MY_TABLE\">\n        <column name=\"MY_COLUMN1\" type=\"TO_LOWER_CASE\"/>\n        <column name=\"MY_COLUMN2\" type=\"FIXED\">\n            <parameter id=\"value\">testValue</parameter>\n        </column>\n    </table>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Listing Supported Database Drivers with Anonimatron's Configexample Option\nDESCRIPTION: Shows how to use the -configexample parameter to display supported database drivers and their JDBC URL formats. This helps users determine the correct connection string format for their database.\nSOURCE: https://github.com/realrolfje/anonimatron/blob/develop/docs/documentation/index.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ ./anonimatron.sh -configexample\n \nSupported Database URL formats:\nJdbc URL format                        By Driver\njdbc:oracle:oci8:@[SID]                oracle.jdbc.driver.OracleDriver\njdbc:oracle:thin:@[HOST]:[PORT]:[SID]  oracle.jdbc.driver.OracleDriver\njdbc:oracle:oci:@[SID]                 oracle.jdbc.driver.OracleDriver\njdbc:postgresql://[HOST]:[PORT]/[DB]   org.postgresql.Driver\njdbc:mysql://[HOST]:[PORT]/[DB]        org.gjt.mm.mysql.Driver\n \nAnonimatron will try to autodetect drivers which are\nstored in the lib directory. Add you driver there.\n \n...\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic String Anonymizer in Java\nDESCRIPTION: An example of a simple anonymizer that converts strings to lowercase. Implements the Anonymizer interface with methods for providing type information and performing the anonymization.\nSOURCE: https://github.com/realrolfje/anonimatron/blob/develop/resources/anonymizers/README.md#2025-04-23_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage my.package;\n\nimport com.rolfje.anonimatron.synonyms.StringSynonym;\nimport com.rolfje.anonimatron.synonyms.Synonym;\nimport com.rolfje.anonimatron.anonymizer.Anonymizer;\n\npublic class ToLowerAnonymizer implements Anonymizer {\n\n\t@Override\n\tpublic String getType() {\n\t\treturn \"TO_LOWER_CASE\";\n\t}\n\n\t@Override\n\tpublic Synonym anonymize(Object from, int size) {\n\t\tStringSynonym s = new StringSynonym();\n\t\ts.setFrom(from);\n\t\ts.setTo(((String)from).toLowerCase());\n\t\treturn s;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Parameterized Anonymizer in Java\nDESCRIPTION: An example of an anonymizer that accepts parameters to customize its behavior. This anonymizer uses a 'value' parameter to set a fixed output value for any input.\nSOURCE: https://github.com/realrolfje/anonimatron/blob/develop/resources/anonymizers/README.md#2025-04-23_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npackage my.packager;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport com.rolfje.anonimatron.synonyms.StringSynonym;\nimport com.rolfje.anonimatron.synonyms.Synonym;\nimport com.rolfje.anonimatron.anonymizer.Anonymizer;\n\npublic class FixedValueAnonymizer implements Anonymizer {\n    @Override\n    public Synonym anonymize(Object from, int size, boolean shortlived) {\n        return anonymize(from, size, shortlived, new HashMap<>());\n    }\n\n    @Override\n    public Synonym anonymize(Object from, int size, boolean shortlived, Map<String, String> parameters) {\n        if (parameters == null || !parameters.containsKey(\"value\")) {\n            throw new UnsupportedOperationException(\"no value\");\n        }\n        return new StringSynonym(getType(),\n                (String) from,\n                parameters.get(\"value\"),\n                shortlived);\n    }\n\n    @Override\n    public String getType() {\n        return \"FIXED\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Test Database in MySQL for Anonymization Demo\nDESCRIPTION: SQL commands to create a demo database with user data containing personal information like names and credit card numbers. This creates a simple database structure with two related tables to demonstrate Anonimatron's capabilities.\nSOURCE: https://github.com/realrolfje/anonimatron/blob/develop/docs/documentation/index.md#2025-04-23_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\ncreate database mydb;\n\ncreate user 'myuser'@'%' identified by 'mypassword';\ngrant all on *.* to 'myuser'@'%';\nflush privileges;\n\ncreate table mydb.userdata (\n         id int not null auto_increment primary key,\n         firstname varchar(20),\n         lastname varchar(20),\n         creditcardnr varchar(20)\n       );\n \ncreate table mydb.lastnames (\n         id int not null auto_increment primary key,\n         lastname varchar(20)\n       );\n \ninsert into mydb.userdata\n       (firstname,lastname, creditcardnr)\nvalues ('Homer', 'Simpson','1234'),\n       ('Marge', 'Simpson','5678'),\n       ('Ned', 'Flanders','3456'),\n       ('Charles', 'Burns','3456');\n \ninsert into mydb.lastnames (lastname)\nvalues ('Simpson'), ('Flanders'), ('Burns');\n```\n\n----------------------------------------\n\nTITLE: Querying User Data from Test Database\nDESCRIPTION: SQL query to view the inserted user data before anonymization. This shows the initial state of the 'userdata' table with personally identifiable information.\nSOURCE: https://github.com/realrolfje/anonimatron/blob/develop/docs/documentation/index.md#2025-04-23_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nselect * from mydb.userdata;\n```\n\n----------------------------------------\n\nTITLE: Querying Last Names from Test Database\nDESCRIPTION: SQL query to view the last names table that contains related data to the userdata table. This demonstrates the relational aspect that Anonimatron will preserve during anonymization.\nSOURCE: https://github.com/realrolfje/anonimatron/blob/develop/docs/documentation/index.md#2025-04-23_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nselect * from mydb.lastnames;\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring MS-SQL Database for Testing\nDESCRIPTION: SQL script to create a contained database, user, schema, and tables for testing Anonimatron. It also inserts sample data.\nSOURCE: https://github.com/realrolfje/anonimatron/blob/develop/resources/integration/mssql/README.md#2025-04-23_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nEXEC sp_configure 'CONTAINED DATABASE AUTHENTICATION'\ngo\nEXEC sp_configure 'CONTAINED DATABASE AUTHENTICATION', 1\ncreate database mydb containment = partial\ngo\n\nuse mydb\ngo\n\nCREATE USER test WITH PASSWORD = 'Test.1234'\nGRANT SELECT to test\ngrant update to test\ngo\n\nCREATE TABLE TABLE1 (ID int primary key IDENTITY(1,1) NOT NULL, COL1 VARCHAR(200))\nCREATE SCHEMA SCHEMA2\nCREATE TABLE SCHEMA2.TABLE2 (ID int primary key IDENTITY(1,1) NOT NULL, COL1 VARCHAR(200))\ngo\n\nINSERT INTO table1 (col1) VALUES ('testmail@example.com'); \nINSERT INTO schema2.table1 (col1) VALUES ('testmail@example.com'); \ngo\n```\n\n----------------------------------------\n\nTITLE: Starting MySQL Docker Container for Anonimatron Testing\nDESCRIPTION: Command to start a MySQL 8 container in Docker with the name 'anonimatron-mysql'. The container exposes port 3306 and sets a root password for database access.\nSOURCE: https://github.com/realrolfje/anonimatron/blob/develop/resources/integration/mysql/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker run --name anonimatron-mysql \\\n       -p3306:3306 \\\n       -e MYSQL_ROOT_PASSWORD=anonimatron \\\n       -d mysql:8\n```\n\n----------------------------------------\n\nTITLE: Starting MS-SQL Server Docker Container\nDESCRIPTION: Docker command to start an MS-SQL server container, setting the SA password and exposing port 1433.\nSOURCE: https://github.com/realrolfje/anonimatron/blob/develop/resources/integration/mssql/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -e 'ACCEPT_EULA=Y' -e 'SA_PASSWORD=Anon!matron' -p 1433:1433 -d mcr.microsoft.com/mssql/server:2017-latest\n```\n\n----------------------------------------\n\nTITLE: Running Anonimatron Scripts\nDESCRIPTION: Commands to execute Anonimatron on different platforms using provided shell scripts.\nSOURCE: https://github.com/realrolfje/anonimatron/blob/develop/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nanonimatron.sh\n```\n\nLANGUAGE: shell\nCODE:\n```\nanonimatron.bat\n```\n\n----------------------------------------\n\nTITLE: Accessing MySQL Command Line in Docker Container\nDESCRIPTION: Command to start the MySQL command line client within the running Docker container. This allows direct database interaction using the root user with password authentication.\nSOURCE: https://github.com/realrolfje/anonimatron/blob/develop/resources/integration/mysql/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndocker exec -it anonimatron-mysql mysql -uroot -p\n```\n\n----------------------------------------\n\nTITLE: Accessing SQL Command Line in Docker Container\nDESCRIPTION: Command to start the sqlcmd command line tool inside the running Docker container.\nSOURCE: https://github.com/realrolfje/anonimatron/blob/develop/resources/integration/mssql/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndocker exec -it focused_proskuriakova /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P 'Anon!matron'\n```\n\n----------------------------------------\n\nTITLE: Pulling MS-SQL Server Docker Image\nDESCRIPTION: Command to pull the latest Microsoft SQL Server 2017 Docker image for Ubuntu.\nSOURCE: https://github.com/realrolfje/anonimatron/blob/develop/resources/integration/mssql/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker pull mcr.microsoft.com/mssql/server:2017-latest-ubuntu\n```\n\n----------------------------------------\n\nTITLE: Displaying Version Number - Text\nDESCRIPTION: Version number specification showing this is a snapshot build version 1.16\nSOURCE: https://github.com/realrolfje/anonimatron/blob/develop/src/main/java/com/rolfje/anonimatron/version.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n1.16-SNAPSHOT\n```"
  }
]