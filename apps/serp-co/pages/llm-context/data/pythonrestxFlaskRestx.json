[
  {
    "owner": "python-restx",
    "repo": "flask-restx",
    "content": "TITLE: Creating a RESTful Todo API with Flask-RESTX\nDESCRIPTION: Complete example demonstrating how to create a RESTful Todo API using Flask-RESTX. The example includes model definition, data access object implementation, and resource endpoints with proper Swagger documentation.\nSOURCE: https://github.com/python-restx/flask-restx/blob/master/README.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import Flask\nfrom flask_restx import Api, Resource, fields\n\napp = Flask(__name__)\napi = Api(app, version='1.0', title='TodoMVC API',\n    description='A simple TodoMVC API',\n)\n\nns = api.namespace('todos', description='TODO operations')\n\ntodo = api.model('Todo', {\n    'id': fields.Integer(readonly=True, description='The task unique identifier'),\n    'task': fields.String(required=True, description='The task details')\n})\n\n\nclass TodoDAO(object):\n    def __init__(self):\n        self.counter = 0\n        self.todos = []\n\n    def get(self, id):\n        for todo in self.todos:\n            if todo['id'] == id:\n                return todo\n        api.abort(404, \"Todo {} doesn't exist\".format(id))\n\n    def create(self, data):\n        todo = data\n        todo['id'] = self.counter = self.counter + 1\n        self.todos.append(todo)\n        return todo\n\n    def update(self, id, data):\n        todo = self.get(id)\n        todo.update(data)\n        return todo\n\n    def delete(self, id):\n        todo = self.get(id)\n        self.todos.remove(todo)\n\n\nDAO = TodoDAO()\nDAO.create({'task': 'Build an API'})\nDAO.create({'task': '?????'})\nDAO.create({'task': 'profit!'})\n\n\n@ns.route('/')\nclass TodoList(Resource):\n    '''Shows a list of all todos, and lets you POST to add new tasks'''\n    @ns.doc('list_todos')\n    @ns.marshal_list_with(todo)\n    def get(self):\n        '''List all tasks'''\n        return DAO.todos\n\n    @ns.doc('create_todo')\n    @ns.expect(todo)\n    @ns.marshal_with(todo, code=201)\n    def post(self):\n        '''Create a new task'''\n        return DAO.create(api.payload), 201\n\n\n@ns.route('/<int:id>')\n@ns.response(404, 'Todo not found')\n@ns.param('id', 'The task identifier')\nclass Todo(Resource):\n    '''Show a single todo item and lets you delete them'''\n    @ns.doc('get_todo')\n    @ns.marshal_with(todo)\n    def get(self, id):\n        '''Fetch a given resource'''\n        return DAO.get(id)\n\n    @ns.doc('delete_todo')\n    @ns.response(204, 'Todo deleted')\n    def delete(self, id):\n        '''Delete a task given its identifier'''\n        DAO.delete(id)\n        return '', 204\n\n    @ns.expect(todo)\n    @ns.marshal_with(todo)\n    def put(self, id):\n        '''Update a task given its identifier'''\n        return DAO.update(id, api.payload)\n\n\nif __name__ == '__main__':\n    app.run(debug=True)\n```\n\n----------------------------------------\n\nTITLE: Creating Minimal Flask-RESTX API\nDESCRIPTION: Basic implementation of a Flask-RESTX API with a single endpoint returning a hello world response.\nSOURCE: https://github.com/python-restx/flask-restx/blob/master/doc/quickstart.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import Flask\nfrom flask_restx import Resource, Api\n\napp = Flask(__name__)\napi = Api(app)\n\n@api.route('/hello')\nclass HelloWorld(Resource):\n    def get(self):\n        return {'hello': 'world'}\n\nif __name__ == '__main__':\n    app.run(debug=True)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Complete TodoMVC API with Flask-RestX in Python\nDESCRIPTION: This code demonstrates a full implementation of a TodoMVC API using Flask-RestX. It includes setting up the Flask application with RestX, defining a Todo model, creating a data access object for CRUD operations, and implementing RESTful endpoints with proper documentation, validation, and serialization.\nSOURCE: https://github.com/python-restx/flask-restx/blob/master/doc/example.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import Flask\nfrom flask_restx import Api, Resource, fields\nfrom werkzeug.middleware.proxy_fix import ProxyFix\n\napp = Flask(__name__)\napp.wsgi_app = ProxyFix(app.wsgi_app)\napi = Api(app, version='1.0', title='TodoMVC API',\n    description='A simple TodoMVC API',\n)\n\nns = api.namespace('todos', description='TODO operations')\n\ntodo = api.model('Todo', {\n    'id': fields.Integer(readonly=True, description='The task unique identifier'),\n    'task': fields.String(required=True, description='The task details')\n})\n\n\nclass TodoDAO(object):\n    def __init__(self):\n        self.counter = 0\n        self.todos = []\n\n    def get(self, id):\n        for todo in self.todos:\n            if todo['id'] == id:\n                return todo\n        api.abort(404, \"Todo {} doesn't exist\".format(id))\n\n    def create(self, data):\n        todo = data\n        todo['id'] = self.counter = self.counter + 1\n        self.todos.append(todo)\n        return todo\n\n    def update(self, id, data):\n        todo = self.get(id)\n        todo.update(data)\n        return todo\n\n    def delete(self, id):\n        todo = self.get(id)\n        self.todos.remove(todo)\n\n\nDAO = TodoDAO()\nDAO.create({'task': 'Build an API'})\nDAO.create({'task': '?????'})\nDAO.create({'task': 'profit!'})\n\n\n@ns.route('/')\nclass TodoList(Resource):\n    '''Shows a list of all todos, and lets you POST to add new tasks'''\n    @ns.doc('list_todos')\n    @ns.marshal_list_with(todo)\n    def get(self):\n        '''List all tasks'''\n        return DAO.todos\n\n    @ns.doc('create_todo')\n    @ns.expect(todo)\n    @ns.marshal_with(todo, code=201)\n    def post(self):\n        '''Create a new task'''\n        return DAO.create(api.payload), 201\n\n\n@ns.route('/<int:id>')\n@ns.response(404, 'Todo not found')\n@ns.param('id', 'The task identifier')\nclass Todo(Resource):\n    '''Show a single todo item and lets you delete them'''\n    @ns.doc('get_todo')\n    @ns.marshal_with(todo)\n    def get(self, id):\n        '''Fetch a given resource'''\n        return DAO.get(id)\n\n    @ns.doc('delete_todo')\n    @ns.response(204, 'Todo deleted')\n    def delete(self, id):\n        '''Delete a task given its identifier'''\n        DAO.delete(id)\n        return '', 204\n\n    @ns.expect(todo)\n    @ns.marshal_with(todo)\n    def put(self, id):\n        '''Update a task given its identifier'''\n        return DAO.update(id, api.payload)\n\n\nif __name__ == '__main__':\n    app.run(debug=True)\n```\n\n----------------------------------------\n\nTITLE: Initializing Flask-RESTX API\nDESCRIPTION: Two methods for initializing a Flask-RESTX API - direct initialization and lazy loading using factory pattern.\nSOURCE: https://github.com/python-restx/flask-restx/blob/master/doc/quickstart.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import Flask\nfrom flask_restx import Api\n\napp = Flask(__name__)\napi = Api(app)\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import Flask\nfrom flask_restx import Api\n\napi = Api()\n\napp = Flask(__name__)\napi.init_app(app)\n```\n\n----------------------------------------\n\nTITLE: Documenting Routes and Parameters with @api.doc() in Python\nDESCRIPTION: This snippet shows how to use the @api.doc() decorator to add documentation for route parameters and response codes to a Flask-RESTX resource.\nSOURCE: https://github.com/python-restx/flask-restx/blob/master/doc/swagger.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@api.route('/my-resource/<id>', endpoint='my-resource')\n@api.doc(params={'id': 'An ID'})\nclass MyResource(Resource):\n    def get(self, id):\n        return {}\n\n    @api.doc(responses={403: 'Not Authorized'})\n    def post(self, id):\n        api.abort(403)\n```\n\n----------------------------------------\n\nTITLE: Basic Field Marshalling in Flask-RESTX\nDESCRIPTION: Demonstrates basic field marshalling with String and DateTime fields using Flask-RESTX decorators. Shows how to define a model and marshal database objects.\nSOURCE: https://github.com/python-restx/flask-restx/blob/master/doc/marshalling.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom flask_restx import Resource, fields\n\nmodel = api.model('Model', {\n    'name': fields.String,\n    'address': fields.String,\n    'date_updated': fields.DateTime(dt_format='rfc822'),\n})\n\n@api.route('/todo')\nclass Todo(Resource):\n    @api.marshal_with(model, envelope='resource')\n    def get(self, **kwargs):\n        return db_get_todo()\n```\n\n----------------------------------------\n\nTITLE: Basic Request Parsing in Flask-RESTX\nDESCRIPTION: Demonstrates basic request parser setup with integer and string arguments. Shows how to create a parser and add basic arguments with type validation.\nSOURCE: https://github.com/python-restx/flask-restx/blob/master/doc/parsing.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom flask_restx import reqparse\n\nparser = reqparse.RequestParser()\nparser.add_argument('rate', type=int, help='Rate cannot be converted')\nparser.add_argument('name')\nargs = parser.parse_args()\n```\n\n----------------------------------------\n\nTITLE: Implementing CRUD Resource\nDESCRIPTION: Example of a CRUD resource implementation for a todo application using Flask-RESTX.\nSOURCE: https://github.com/python-restx/flask-restx/blob/master/doc/quickstart.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import Flask, request\nfrom flask_restx import Resource, Api\n\napp = Flask(__name__)\napi = Api(app)\n\ntodos = {}\n\n@api.route('/<string:todo_id>')\nclass TodoSimple(Resource):\n    def get(self, todo_id):\n        return {todo_id: todos[todo_id]}\n\n    def put(self, todo_id):\n        todos[todo_id] = request.form['data']\n        return {todo_id: todos[todo_id]}\n\nif __name__ == '__main__':\n    app.run(debug=True)\n```\n\n----------------------------------------\n\nTITLE: Flask Application with Multiple API Versions\nDESCRIPTION: Shows how to register multiple API versions using blueprints in a Flask application for version management.\nSOURCE: https://github.com/python-restx/flask-restx/blob/master/doc/scaling.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import Flask\nfrom api1 import blueprint as api1\nfrom apiX import blueprint as apiX\n\napp = Flask(__name__)\napp.register_blueprint(api1)\napp.register_blueprint(apiX)\napp.run(debug=True)\n```\n\n----------------------------------------\n\nTITLE: Creating Namespace with Models and Resources in Flask-RESTX\nDESCRIPTION: Demonstrates how to create a namespace module containing model definitions and resource endpoints for a cat API. Includes model declaration, list and detail endpoints with proper documentation.\nSOURCE: https://github.com/python-restx/flask-restx/blob/master/doc/scaling.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom flask_restx import Namespace, Resource, fields\n\napi = Namespace('cats', description='Cats related operations')\n\ncat = api.model('Cat', {\n    'id': fields.String(required=True, description='The cat identifier'),\n    'name': fields.String(required=True, description='The cat name'),\n})\n\nCATS = [\n    {'id': 'felix', 'name': 'Felix'},\n]\n\n@api.route('/')\nclass CatList(Resource):\n    @api.doc('list_cats')\n    @api.marshal_list_with(cat)\n    def get(self):\n        '''List all cats'''\n        return CATS\n\n@api.route('/<id>')\n@api.param('id', 'The cat identifier')\n@api.response(404, 'Cat not found')\nclass Cat(Resource):\n    @api.doc('get_cat')\n    @api.marshal_with(cat)\n    def get(self, id):\n        '''Fetch a cat given its identifier'''\n        for cat in CATS:\n            if cat['id'] == id:\n                return cat\n        api.abort(404)\n```\n\n----------------------------------------\n\nTITLE: Documenting Input and Output Models in Flask-RESTX\nDESCRIPTION: Example demonstrating how to document input and output models for API endpoints. For GET methods, the model parameter specifies the output model, while for POST and PUT methods, the body parameter specifies the input model.\nSOURCE: https://github.com/python-restx/flask-restx/blob/master/doc/swagger.rst#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nmy_model = api.model('MyModel', {\n    'name': fields.String(description='The name', required=True),\n    'type': fields.String(description='The object type', enum=['A', 'B']),\n    'age': fields.Integer(min=0),\n})\n\n\nclass Person(fields.Raw):\n    def format(self, value):\n        return {'name': value.name, 'age': value.age}\n\n\n@api.route('/my-resource/<id>', endpoint='my-resource')\n@api.doc(params={'id': 'An ID'})\nclass MyResource(Resource):\n    @api.doc(model=my_model)\n    def get(self, id):\n        return {}\n\n    @api.doc(model=my_model, body=Person)\n    def post(self, id):\n        return {}\n```\n\n----------------------------------------\n\nTITLE: Using @api.response() for Detailed Response Documentation in Python\nDESCRIPTION: This snippet shows how to use the @api.response() decorator to document known responses, including status codes, descriptions, and response models.\nSOURCE: https://github.com/python-restx/flask-restx/blob/master/doc/swagger.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nmodel = api.model('Model', {\n    'name': fields.String,\n})\n\n@api.route('/my-resource/')\nclass MyResource(Resource):\n    @api.response(200, 'Success', model)\n    @api.response(400, 'Validation Error')\n    def get(self):\n        pass\n\n    @api.response(400, 'Validation error')\n    @api.marshal_with(model, code=201, description='Object created')\n    def post(self):\n        pass\n```\n\n----------------------------------------\n\nTITLE: Custom Error Handlers using @api.errorhandler\nDESCRIPTION: Demonstrates how to implement custom error handlers for different exceptions using the @api.errorhandler decorator.\nSOURCE: https://github.com/python-restx/flask-restx/blob/master/doc/errors.rst#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@api.errorhandler(RootException)\ndef handle_root_exception(error):\n    '''Return a custom message and 400 status code'''\n    return {'message': 'What you want'}, 400\n\n\n@api.errorhandler(CustomException)\ndef handle_custom_exception(error):\n    '''Return a custom message and 400 status code'''\n    return {'message': 'What you want'}, 400\n\n\n@api.errorhandler(AnotherException)\ndef handle_another_exception(error):\n    '''Return a custom message and 500 status code'''\n    return {'message': error.specific}\n\n\n@api.errorhandler(FakeException)\ndef handle_fake_exception_with_header(error):\n    '''Return a custom message and 400 status code'''\n    return {'message': error.message}, 400, {'My-Header': 'Value'}\n\n\n@api.errorhandler(NoResultFound)\ndef handle_no_result_exception(error):\n    '''Return a custom not found error message and 404 status code'''\n    return {'message': error.specific}, 404\n```\n\n----------------------------------------\n\nTITLE: Configuring API Authorizations in Flask-RESTX\nDESCRIPTION: This snippet shows how to set up API authorizations using the authorizations parameter in the Api constructor and how to apply them to resources and methods.\nSOURCE: https://github.com/python-restx/flask-restx/blob/master/doc/swagger.rst#2025-04-22_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nauthorizations = {\n    'apikey': {\n        'type': 'apiKey',\n        'in': 'header',\n        'name': 'X-API-KEY'\n    }\n}\napi = Api(app, authorizations=authorizations)\n\n@api.route('/resource/')\nclass Resource1(Resource):\n    @api.doc(security='apikey')\n    def get(self):\n        pass\n\n    @api.doc(security='apikey')\n    def post(self):\n        pass\n```\n\n----------------------------------------\n\nTITLE: Implementing Polymorphism with api.inherit in Flask-RESTx\nDESCRIPTION: This snippet shows how to use the Model.inherit method to extend a model in the \"Swagger way\" and handle polymorphism. It demonstrates creating a parent model and inheriting from it to create a child model.\nSOURCE: https://github.com/python-restx/flask-restx/blob/master/doc/marshalling.rst#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nparent = api.model('Parent', {\n    'name': fields.String,\n    'class': fields.String(discriminator=True)\n})\n\nchild = api.inherit('Child', parent, {\n    'extra': fields.String\n})\n\n# Alternative approach\nparent = Model('Parent', {\n    'name': fields.String,\n    'class': fields.String(discriminator=True)\n})\n\nchild = parent.inherit('Child', {\n    'extra': fields.String\n})\n```\n\n----------------------------------------\n\nTITLE: Using Nested Fields with Lists in Flask-RESTx\nDESCRIPTION: This example demonstrates how to use Nested fields in combination with List fields to marshal lists of complex objects. It defines a user model and a user list model.\nSOURCE: https://github.com/python-restx/flask-restx/blob/master/doc/marshalling.rst#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nuser_fields = api.model('User', {\n    'id': fields.Integer,\n    'name': fields.String,\n})\n\nuser_list_fields = api.model('UserList', {\n    'users': fields.List(fields.Nested(user_fields)),\n})\n```\n\n----------------------------------------\n\nTITLE: Namespace-specific Error Handler\nDESCRIPTION: Shows how to implement a namespace-specific error handler that overrides the API-level handler.\nSOURCE: https://github.com/python-restx/flask-restx/blob/master/doc/errors.rst#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nns = Namespace('cats', description='Cats related operations')\n\n@ns.errorhandler\ndef specific_namespace_error_handler(error):\n    '''Namespace error handler'''\n    return {'message': str(error)}, getattr(error, 'code', 500)\n```\n\n----------------------------------------\n\nTITLE: Using the api.model() Factory in Flask-RESTx\nDESCRIPTION: This snippet shows how to use the api.model() factory to instantiate and register models with the API or Namespace. It demonstrates creating a model with string and integer fields.\nSOURCE: https://github.com/python-restx/flask-restx/blob/master/doc/marshalling.rst#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nmy_fields = api.model('MyModel', {\n    'name': fields.String,\n    'age': fields.Integer(min=0)\n})\n\n# Equivalent to\nmy_fields = Model('MyModel', {\n    'name': fields.String,\n    'age': fields.Integer(min=0)\n})\napi.models[my_fields.name] = my_fields\n```\n\n----------------------------------------\n\nTITLE: Configuring Flask-RESTX Settings\nDESCRIPTION: Configuration values that can be set in Flask-RESTX to control various features including JSON serialization, payload validation, error handling, and Swagger UI settings.\nSOURCE: https://github.com/python-restx/flask-restx/blob/master/doc/configuration.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Flask-RESTX Configuration Values\n\napp.config['RESTX_JSON'] = {}  # JSON serialization options\napp.config['RESTX_VALIDATE'] = False  # Default payload validation\napp.config['RESTX_MASK_HEADER'] = 'X-Fields'  # Mask header name\napp.config['RESTX_MASK_SWAGGER'] = True  # Enable mask documentation\napp.config['RESTX_INCLUDE_ALL_MODELS'] = False  # Include all models in Swagger\napp.config['BUNDLE_ERRORS'] = False  # Bundle validation errors\napp.config['ERROR_404_HELP'] = None  # 404 error help text\napp.config['HTTP_BASIC_AUTH_REALM'] = None  # Basic auth realm\napp.config['SWAGGER_VALIDATOR_URL'] = None  # Swagger validator URL\napp.config['SWAGGER_UI_DOC_EXPANSION'] = None  # Swagger UI expansion setting\napp.config['SWAGGER_UI_OPERATION_ID'] = None  # Swagger operation ID\napp.config['SWAGGER_UI_REQUEST_DURATION'] = None  # Request duration display\napp.config['SWAGGER_UI_OAUTH_APP_NAME'] = None  # OAuth app name\napp.config['SWAGGER_UI_OAUTH_CLIENT_ID'] = None  # OAuth client ID\napp.config['SWAGGER_UI_OAUTH_REALM'] = None  # OAuth realm\napp.config['SWAGGER_SUPPORTED_SUBMIT_METHODS'] = None  # Supported submit methods\n```\n\n----------------------------------------\n\nTITLE: Default Error Handler Override\nDESCRIPTION: Demonstrates how to override the default error handler in Flask-RESTX.\nSOURCE: https://github.com/python-restx/flask-restx/blob/master/doc/errors.rst#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n@api.errorhandler\ndef default_error_handler(error):\n    '''Default error handler'''\n    return {'message': str(error)}, getattr(error, 'code', 500)\n```\n\n----------------------------------------\n\nTITLE: Documenting Field Parameters in Flask-RESTX Models\nDESCRIPTION: This snippet demonstrates how to document model fields in Flask-RESTX with metadata such as descriptions, requirements, and validation constraints. Fields can be documented with parameters like required, description, example, and type-specific constraints.\nSOURCE: https://github.com/python-restx/flask-restx/blob/master/doc/swagger.rst#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nmy_fields = api.model('MyModel', {\n    'name': fields.String(description='The name', required=True),\n    'type': fields.String(description='The object type', enum=['A', 'B']),\n    'age': fields.Integer(min=0),\n})\n```\n\n----------------------------------------\n\nTITLE: Using @api.marshal_with() for Response Documentation in Python\nDESCRIPTION: This snippet shows how to use the @api.marshal_with() decorator to document API responses, including specifying HTTP status codes and whether the response is a list.\nSOURCE: https://github.com/python-restx/flask-restx/blob/master/doc/swagger.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nresource_fields = api.model('Resource', {\n    'name': fields.String,\n})\n\n@api.route('/my-resource/<id>', endpoint='my-resource')\nclass MyResource(Resource):\n    @api.marshal_with(resource_fields, as_list=True)\n    def get(self):\n        return get_objects()\n\n    @api.marshal_with(resource_fields, code=201)\n    def post(self):\n        return create_object(), 201\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Nested Fields in Flask-RESTx\nDESCRIPTION: This snippet shows how to use nested fields to marshal complex objects with sub-objects. It demonstrates the difference between nested dicts and the Nested field, explaining the context for attributes.\nSOURCE: https://github.com/python-restx/flask-restx/blob/master/doc/marshalling.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> resource_fields['shipping_address'] = fields.Nested(address_fields)\n>>> address1 = {'addr1': '123 fake street', 'city': 'New York', 'state': 'NY', 'zip': '10468'}\n>>> address2 = {'addr1': '555 nowhere', 'city': 'New York', 'state': 'NY', 'zip': '10468'}\n>>> data = {'name': 'bob', 'billing_address': address1, 'shipping_address': address2}\n>>>\n>>> json.dumps(marshal(data, resource_fields))\n'{\"billing_address\": {\"line 1\": \"123 fake street\", \"line 2\": null, \"state\": \"NY\", \"zip\": \"10468\", \"city\": \"New York\"}, \"name\": \"bob\", \"shipping_address\": {\"line 1\": \"555 nowhere\", \"line 2\": null, \"state\": \"NY\", \"zip\": \"10468\", \"city\": \"New York\"}}'\n```\n\n----------------------------------------\n\nTITLE: Configuring API with Multiple Namespaces in Flask-RESTX\nDESCRIPTION: Shows how to aggregate multiple namespaces into a single API instance with metadata configuration. Includes namespace registration with optional URL prefixes.\nSOURCE: https://github.com/python-restx/flask-restx/blob/master/doc/scaling.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom flask_restx import Api\n\nfrom .namespace1 import api as ns1\nfrom .namespace2 import api as ns2\n# ...\nfrom .namespaceX import api as nsX\n\napi = Api(\n    title='My Title',\n    version='1.0',\n    description='A description',\n    # All API metadatas\n)\n\napi.add_namespace(ns1, path='/prefix/of/ns1')\napi.add_namespace(ns2, path='/prefix/of/ns2')\n# ...\napi.add_namespace(nsX, path='/prefix/of/nsX')\n```\n\n----------------------------------------\n\nTITLE: Documented Error Handler with Swagger Support\nDESCRIPTION: Shows how to document error handlers with marshal_with and header decorators for Swagger documentation.\nSOURCE: https://github.com/python-restx/flask-restx/blob/master/doc/errors.rst#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n@api.errorhandler(FakeException)\n@api.marshal_with(error_fields, code=400)\n@api.header('My-Header',  'Some description')\ndef handle_fake_exception_with_header(error):\n    '''This is a custom error'''\n    return {'message': error.message}, 400, {'My-Header': 'Value'}\n\n\n@api.route('/test/')\nclass TestResource(Resource):\n    def get(self):\n        '''\n        Do something\n\n        :raises CustomException: In case of something\n        '''\n        pass\n```\n\n----------------------------------------\n\nTITLE: Defining Models Using JSON Schema in Flask-RESTx\nDESCRIPTION: This example shows how to define models using JSON Schema (Draft v4) in Flask-RESTx. It demonstrates creating an Address model and a Person model with nested references.\nSOURCE: https://github.com/python-restx/flask-restx/blob/master/doc/marshalling.rst#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\naddress = api.schema_model('Address', {\n    'properties': {\n        'road': {\n            'type': 'string'\n        },\n    },\n    'type': 'object'\n})\n\nperson = api.schema_model('Person', {\n    'required': ['address'],\n    'properties': {\n        'name': {\n            'type': 'string'\n        },\n        'age': {\n            'type': 'integer'\n        },\n        'birthdate': {\n            'type': 'string',\n            'format': 'date-time'\n        },\n        'address': {\n            '$ref': '#/definitions/Address',\n        }\n    },\n    'type': 'object'\n})\n```\n\n----------------------------------------\n\nTITLE: Defining and Inheriting Swagger Models in Python\nDESCRIPTION: This example demonstrates how to define Swagger models using api.model() and api.inherit() methods, which automatically document the models in Swagger specifications.\nSOURCE: https://github.com/python-restx/flask-restx/blob/master/doc/swagger.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nparent = api.model('Parent', {\n    'name': fields.String,\n    'class': fields.String(discriminator=True)\n})\n\nchild = api.inherit('Child', parent, {\n    'extra': fields.String\n})\n```\n\n----------------------------------------\n\nTITLE: Cloning Models in Flask-RESTx\nDESCRIPTION: This example demonstrates how to use the Model.clone method to create an augmented model based on an existing one. It shows both manual cloning and using the API's clone method.\nSOURCE: https://github.com/python-restx/flask-restx/blob/master/doc/marshalling.rst#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nparent = Model('Parent', {\n    'name': fields.String\n})\n\nchild = parent.clone('Child', {\n    'age': fields.Integer\n})\n\n# Using API's clone method\nparent = api.model('Parent', {\n    'name': fields.String\n})\n\nchild = api.clone('Child', parent, {\n    'age': fields.Integer\n})\n```\n\n----------------------------------------\n\nTITLE: Skipping None Values in Flask-RESTx Marshaling\nDESCRIPTION: This snippet demonstrates how to skip fields with None values during marshaling by using the skip_none parameter. It shows an example with a model containing optional fields and how to apply skip_none in nested fields.\nSOURCE: https://github.com/python-restx/flask-restx/blob/master/doc/marshalling.rst#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n>>> from flask_restx import Model, fields, marshal_with\n>>> import json\n>>> model = Model('Model', {\n...     'name': fields.String,\n...     'address_1': fields.String,\n...     'address_2': fields.String\n... })\n>>> @marshal_with(model, skip_none=True)\n... def get():\n...     return {'name': 'John', 'address_1': None}\n...\n>>> get()\nOrderedDict([('name', 'John')])\n\n# For nested fields\n>>> model = Model('Model', {\n...     'name': fields.String,\n...     'location': fields.Nested(location_model, skip_none=True)\n... })\n```\n\n----------------------------------------\n\nTITLE: Data Model and Marshal Example\nDESCRIPTION: Example showing how to use fields and marshal_with decorator for response formatting.\nSOURCE: https://github.com/python-restx/flask-restx/blob/master/doc/quickstart.rst#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import Flask\nfrom flask_restx import fields, Api, Resource\n\napp = Flask(__name__)\napi = Api(app)\n\nmodel = api.model('Model', {\n    'task': fields.String,\n    'uri': fields.Url('todo_ep')\n})\n\nclass TodoDao(object):\n    def __init__(self, todo_id, task):\n        self.todo_id = todo_id\n        self.task = task\n        self.status = 'active'\n\n@api.route('/todo')\nclass Todo(Resource):\n    @api.marshal_with(model)\n    def get(self, **kwargs):\n        return TodoDao(todo_id='my_todo', task='Remember the milk')\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Logging with Flask-RESTX Namespaces\nDESCRIPTION: This snippet demonstrates how to set up basic logging in a Flask-RESTX application with multiple namespaces. It shows how namespace loggers inherit configuration from the Flask application logger and how log levels affect output.\nSOURCE: https://github.com/python-restx/flask-restx/blob/master/doc/logging.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport logging\n\nimport flask\n\nfrom flask_restx import Api, Resource\n\n# configure root logger\nlogging.basicConfig(level=logging.INFO)\n\napp = flask.Flask(__name__)\n\napi = Api(app)\n\n\n# each of these loggers uses configuration from app.logger\nns1 = api.namespace('api/v1', description='test')\nns2 = api.namespace('api/v2', description='test')\n\n\n@ns1.route('/my-resource')\nclass MyResource(Resource):\n    def get(self):\n        # will log\n        ns1.logger.info(\"hello from ns1\")\n        return {\"message\": \"hello\"}\n\n\n@ns2.route('/my-resource')\nclass MyNewResource(Resource):\n    def get(self):\n        # won't log due to INFO log level from app.logger\n        ns2.logger.debug(\"hello from ns2\")\n        return {\"message\": \"hello\"}\n```\n\n----------------------------------------\n\nTITLE: Setting Individual Log Levels for Flask-RESTX Namespaces\nDESCRIPTION: This example shows how to override the default log level for specific namespaces in Flask-RESTX. It demonstrates setting a DEBUG log level for one namespace while keeping another namespace at the default INFO level.\nSOURCE: https://github.com/python-restx/flask-restx/blob/master/doc/logging.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# ns1 will have log level INFO from app.logger\nns1 = api.namespace('api/v1', description='test')\n\n# ns2 will have log level DEBUG\nns2 = api.namespace('api/v2', description='test')\nns2.logger.setLevel(logging.DEBUG)\n\n\n@ns1.route('/my-resource')\nclass MyResource(Resource):\n    def get(self):\n        # will log\n        ns1.logger.info(\"hello from ns1\")\n        return {\"message\": \"hello\"}\n\n\n@ns2.route('/my-resource')\nclass MyNewResource(Resource):\n    def get(self):\n        # will log\n        ns2.logger.debug(\"hello from ns2\")\n        return {\"message\": \"hello\"}\n```\n\n----------------------------------------\n\nTITLE: Custom Type Validation in Flask-RESTX\nDESCRIPTION: Example of creating a custom type validator with Swagger documentation support.\nSOURCE: https://github.com/python-restx/flask-restx/blob/master/doc/parsing.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef my_type(value):\n    '''Parse my type'''\n    if not condition:\n        raise ValueError('This is not my type')\n    return parse(value)\n\n# Swagger documentation\nmy_type.__schema__ = {'type': 'string', 'format': 'my-custom-format'}\n```\n\n----------------------------------------\n\nTITLE: Handling Basic HTTPException in Flask-RESTX\nDESCRIPTION: Demonstrates basic HTTP exception handling using Werkzeug's BadRequest. Returns a 400 HTTP status code with a default error message.\nSOURCE: https://github.com/python-restx/flask-restx/blob/master/doc/errors.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom werkzeug.exceptions import BadRequest\nraise BadRequest()\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"message\": \"The browser (or proxy) sent a request that this server could not understand.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Flask-RESTX Abort Helper with Custom Attributes\nDESCRIPTION: Shows how to use Flask-RESTX's abort helper with additional custom attributes.\nSOURCE: https://github.com/python-restx/flask-restx/blob/master/doc/errors.rst#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom flask_restx import abort\nabort(400, custom='value')\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"message\": \"The browser (or proxy) sent a request that this server could not understand.\",\n    \"custom\": \"value\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using RequestParser for Form and File Parameters\nDESCRIPTION: This example shows how to use the RequestParser to document and validate form parameters and file uploads. Using RequestParser is preferred over the api.param() decorator for form fields as it also performs validation.\nSOURCE: https://github.com/python-restx/flask-restx/blob/master/doc/swagger.rst#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nparser = api.parser()\nparser.add_argument('param', type=int, help='Some param', location='form')\nparser.add_argument('in_files', type=FileStorage, location='files')\n\n@api.route('/with-parser/', endpoint='with-parser')\nclass WithParserResource(restx.Resource):\n    @api.expect(parser)\n    def get(self):\n        return {}\n```\n\n----------------------------------------\n\nTITLE: Complex Nested Structure Example\nDESCRIPTION: Shows how to marshal complex nested data structures using field definitions, including address information with multiple subfields.\nSOURCE: https://github.com/python-restx/flask-restx/blob/master/doc/marshalling.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> from flask_restx import fields, marshal\n>>> import json\n>>>\n>>> resource_fields = {'name': fields.String}\n>>> resource_fields['address'] = {}\n>>> resource_fields['address']['line 1'] = fields.String(attribute='addr1')\n>>> resource_fields['address']['line 2'] = fields.String(attribute='addr2')\n>>> resource_fields['address']['city'] = fields.String\n>>> resource_fields['address']['state'] = fields.String\n>>> resource_fields['address']['zip'] = fields.String\n>>> data = {'name': 'bob', 'addr1': '123 fake street', 'addr2': '', 'city': 'New York', 'state': 'NY', 'zip': '10468'}\n>>> json.dumps(marshal(data, resource_fields))\n```\n\n----------------------------------------\n\nTITLE: Basic Field Mask Syntax in Python\nDESCRIPTION: Demonstrates the basic syntax for creating field masks using either bracketed or unbracketed comma-separated lists of field names.\nSOURCE: https://github.com/python-restx/flask-restx/blob/master/doc/mask.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# These two mask are equivalents\nmask = '{name,age}'\n# or\nmask = 'name,age'\ndata = requests.get('/some/url/', headers={'X-Fields': mask})\nassert len(data) == 2\nassert 'name' in data\nassert 'age' in data\n```\n\n----------------------------------------\n\nTITLE: Basic Flask-RESTX API with Swagger UI\nDESCRIPTION: This snippet demonstrates a basic Flask-RESTX API setup with Swagger UI documentation, including route definition and response documentation.\nSOURCE: https://github.com/python-restx/flask-restx/blob/master/doc/swagger.rst#2025-04-22_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import Flask\nfrom flask_restx import Api, Resource, fields\n\napp = Flask(__name__)\napi = Api(app, version='1.0', title='Sample API',\n    description='A sample API',\n)\n\n@api.route('/my-resource/<id>')\n@api.doc(params={'id': 'An ID'})\nclass MyResource(Resource):\n    def get(self, id):\n        return {}\n\n    @api.response(403, 'Not Authorized')\n    def post(self, id):\n        api.abort(403)\n\n\nif __name__ == '__main__':\n    app.run(debug=True)\n```\n\n----------------------------------------\n\nTITLE: Nested Field Mask Syntax\nDESCRIPTION: Shows how to specify nested field masks using bracket notation for accessing nested object properties.\nSOURCE: https://github.com/python-restx/flask-restx/blob/master/doc/mask.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nmask = '{name, age, pet{name}}'\n```\n\n----------------------------------------\n\nTITLE: Wildcard Field Mask Usage\nDESCRIPTION: Shows how to use the special star token (*) to include all remaining fields while specifying specific nested filters.\nSOURCE: https://github.com/python-restx/flask-restx/blob/master/doc/mask.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Will apply the mask {name} to each pet\n# in the pets list and take all other root fields\n# without filtering.\nmask = '{pets{name},*}'\n\n# Will not filter anything\nmask = '*'\n```\n\n----------------------------------------\n\nTITLE: Response Formatting Examples\nDESCRIPTION: Different ways to format and return responses with status codes and headers in Flask-RESTX.\nSOURCE: https://github.com/python-restx/flask-restx/blob/master/doc/quickstart.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass Todo1(Resource):\n    def get(self):\n        # Default to 200 OK\n        return {'task': 'Hello world'}\n\nclass Todo2(Resource):\n    def get(self):\n        # Set the response code to 201\n        return {'task': 'Hello world'}, 201\n\nclass Todo3(Resource):\n    def get(self):\n        # Set the response code to 201 and return custom headers\n        return {'task': 'Hello world'}, 201, {'Etag': 'some-opaque-string'}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Handlers to Flask-RESTX Namespace Loggers\nDESCRIPTION: This snippet demonstrates how to add custom logging handlers to Flask-RESTX namespace loggers. It shows how to configure a file handler for one namespace while leaving other namespaces with their default configuration.\nSOURCE: https://github.com/python-restx/flask-restx/blob/master/doc/logging.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# configure a file handler for ns1 only\nns1 = api.namespace('api/v1')\nfh = logging.FileHandler(\"v1.log\")\nns1.logger.addHandler(fh)\n\nns2 = api.namespace('api/v2')\n\n\n@ns1.route('/my-resource')\nclass MyResource(Resource):\n    def get(self):\n        # will log to *both* v1.log file and app.logger handlers\n        ns1.logger.info(\"hello from ns1\")\n        return {\"message\": \"hello\"}\n\n\n@ns2.route('/my-resource')\nclass MyNewResource(Resource):\n    def get(self):\n        # will log to *only* app.logger handlers\n        ns2.logger.info(\"hello from ns2\")\n        return {\"message\": \"hello\"}\n```\n\n----------------------------------------\n\nTITLE: Marking Resources as Deprecated in Flask-RESTX\nDESCRIPTION: Examples showing how to mark entire resources or specific methods as deprecated in the Swagger documentation using the api.deprecated decorator.\nSOURCE: https://github.com/python-restx/flask-restx/blob/master/doc/swagger.rst#2025-04-22_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n# Deprecate the full resource\n@api.deprecated\n@api.route('/resource1/')\nclass Resource1(Resource):\n    def get(self):\n        return {}\n\n# Deprecate methods\n@api.route('/resource4/')\nclass Resource4(Resource):\n    def get(self):\n        return {}\n\n    @api.deprecated\n    def post(self):\n        return {}\n\n    def put(self):\n        return {}\n```\n\n----------------------------------------\n\nTITLE: Using Vendor Extensions in Flask-RESTX\nDESCRIPTION: This snippet demonstrates how to use the @api.vendor decorator to expose custom vendor extensions in the API documentation.\nSOURCE: https://github.com/python-restx/flask-restx/blob/master/doc/swagger.rst#2025-04-22_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n@api.route('/vendor/')\n@api.vendor(extension1='any authorized value')\nclass Vendor(Resource):\n    @api.vendor({\n        'extension-1': {'works': 'with complex values'},\n        'x-extension-3': 'x- prefix is optional',\n    })\n    def get(self):\n        return {}\n```\n\n----------------------------------------\n\nTITLE: Blueprint Integration with Flask-RESTX API\nDESCRIPTION: Demonstrates how to use Flask Blueprints with Flask-RESTX API for better URL prefix management and application structure.\nSOURCE: https://github.com/python-restx/flask-restx/blob/master/doc/scaling.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import Blueprint\nfrom flask_restx import Api\n\nblueprint = Blueprint('api', __name__)\napi = Api(blueprint)\n# ...\n```\n\n----------------------------------------\n\nTITLE: Custom Message HTTPException in Flask-RESTX\nDESCRIPTION: Shows how to raise an HTTP exception with a custom error message using Werkzeug's BadRequest.\nSOURCE: https://github.com/python-restx/flask-restx/blob/master/doc/errors.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom werkzeug.exceptions import BadRequest\nraise BadRequest('My custom message')\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"message\": \"My custom message\"\n}\n```\n\n----------------------------------------\n\nTITLE: Required Arguments in Flask-RESTX Parser\nDESCRIPTION: Shows how to make arguments required in the request parser by adding the required flag.\nSOURCE: https://github.com/python-restx/flask-restx/blob/master/doc/parsing.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nparser.add_argument('name', required=True, help=\"Name cannot be blank!\")\n```\n\n----------------------------------------\n\nTITLE: List Object Field Mask\nDESCRIPTION: Demonstrates how to apply field masks to lists of nested objects.\nSOURCE: https://github.com/python-restx/flask-restx/blob/master/doc/mask.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Will apply the mask {name} to each pet\n# in the pets list.\nmask = '{name, age, pets{name}}'\n```\n\n----------------------------------------\n\nTITLE: Customizing Swagger UI in Flask-RESTX\nDESCRIPTION: This snippet shows various ways to customize the Swagger UI in Flask-RESTX, including changing the documentation path, specifying a custom validator URL, and configuring OAuth2 Implicit Flow.\nSOURCE: https://github.com/python-restx/flask-restx/blob/master/doc/swagger.rst#2025-04-22_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import Flask\nfrom flask_restx import Api\n\napp = Flask(__name__)\napp.config.SWAGGER_VALIDATOR_URL = 'http://domain.com/validator'\napp.config.SWAGGER_UI_DOC_EXPANSION = 'list'\napp.config.SWAGGER_UI_OPERATION_ID = True\napp.config.SWAGGER_UI_REQUEST_DURATION = True\n\napi = Api(app)\n\n# OAuth2 configuration\napp.config.SWAGGER_UI_OAUTH_CLIENT_ID = 'MyClientId'\napp.config.SWAGGER_UI_OAUTH_REALM = '-'\napp.config.SWAGGER_UI_OAUTH_APP_NAME = 'Demo'\n\napi = Api(\n    app,\n    title=app.config.SWAGGER_UI_OAUTH_APP_NAME,\n    security={'OAuth2': ['read', 'write']},\n    authorizations={\n        'OAuth2': {\n            'type': 'oauth2',\n            'flow': 'implicit',\n            'authorizationUrl': 'https://idp.example.com/authorize?audience=https://app.example.com',\n            'clientId': app.config.SWAGGER_UI_OAUTH_CLIENT_ID,\n            'scopes': {\n                'openid': 'Get ID token',\n                'profile': 'Get identity',\n            }\n        }\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Custom Field Implementation for Bit Flags\nDESCRIPTION: Shows how to create custom fields by subclassing Raw to handle bit-field values, converting them into human-readable string representations.\nSOURCE: https://github.com/python-restx/flask-restx/blob/master/doc/marshalling.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass UrgentItem(fields.Raw):\n    def format(self, value):\n        return \"Urgent\" if value & 0x01 else \"Normal\"\n\nclass UnreadItem(fields.Raw):\n    def format(self, value):\n        return \"Unread\" if value & 0x02 else \"Read\"\n\nmodel = {\n    'name': fields.String,\n    'priority': UrgentItem(attribute='flags'),\n    'status': UnreadItem(attribute='flags'),\n}\n```\n\n----------------------------------------\n\nTITLE: Resource Default Mask Configuration\nDESCRIPTION: Example of setting a default mask at the resource level using the marshal_with decorator.\nSOURCE: https://github.com/python-restx/flask-restx/blob/master/doc/mask.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass MyResource(Resource):\n    @api.marshal_with(my_model, mask='name,age')\n    def get(self):\n        pass\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Fields in Flask-RESTx\nDESCRIPTION: This example demonstrates how to create custom output fields by subclassing fields.Raw and implementing the format method. It also shows how to specify schema format, type, and example for custom fields.\nSOURCE: https://github.com/python-restx/flask-restx/blob/master/doc/marshalling.rst#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nclass AllCapsString(fields.Raw):\n    def format(self, value):\n        return value.upper()\n\n# example usage\nfields = {\n    'name': fields.String,\n    'all_caps_name': AllCapsString(attribute='name'),\n}\n\nclass MyIntField(fields.Integer):\n    __schema_format__ = 'int64'\n\nclass MySpecialField(fields.Raw):\n    __schema_type__ = 'some-type'\n    __schema_format__ = 'some-format'\n\nclass MyVerySpecialField(fields.Raw):\n    __schema_example__ = 'hello, world'\n```\n\n----------------------------------------\n\nTITLE: URL and Random Number Field Example\nDESCRIPTION: Demonstrates the Url field type and custom RandomNumber field implementation for generating dynamic values in API responses.\nSOURCE: https://github.com/python-restx/flask-restx/blob/master/doc/marshalling.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass RandomNumber(fields.Raw):\n    def output(self, key, obj):\n        return random.random()\n\nmodel = {\n    'name': fields.String,\n    'uri': fields.Url('todo_resource'),\n    'random': RandomNumber,\n}\n```\n\n----------------------------------------\n\nTITLE: HTTPException with Extra Attributes in Flask-RESTX\nDESCRIPTION: Demonstrates how to add extra attributes to HTTP exceptions using the data property.\nSOURCE: https://github.com/python-restx/flask-restx/blob/master/doc/errors.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom werkzeug.exceptions import BadRequest\ne = BadRequest('My custom message')\ne.data = {'custom': 'value'}\nraise e\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"message\": \"My custom message\",\n    \"custom\": \"value\"\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting URL Parameters in Flask-RESTX\nDESCRIPTION: Examples showing how to document URL path parameters in Flask-RESTX using either the api.doc decorator with the params parameter or the api.param shortcut decorator.\nSOURCE: https://github.com/python-restx/flask-restx/blob/master/doc/swagger.rst#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n@api.route('/my-resource/<id>', endpoint='my-resource')\n@api.doc(params={'id': 'An ID'})\nclass MyResource(Resource):\n    pass\n```\n\nLANGUAGE: python\nCODE:\n```\n@api.route('/my-resource/<id>', endpoint='my-resource')\n@api.param('id', 'An ID')\nclass MyResource(Resource):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Basic Flask Abort Helper Usage\nDESCRIPTION: Shows how to use Flask's abort helper for error handling with default message.\nSOURCE: https://github.com/python-restx/flask-restx/blob/master/doc/errors.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import abort\nabort(400)\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"message\": \"The browser (or proxy) sent a request that this server could not understand.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Flask Abort Helper with Custom Message\nDESCRIPTION: Demonstrates using Flask's abort helper with a custom error message.\nSOURCE: https://github.com/python-restx/flask-restx/blob/master/doc/errors.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import abort\nabort(400, 'My custom message')\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"message\": \"My custom message\"\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Error Messages in Flask-RestX RequestParser\nDESCRIPTION: This example demonstrates how to customize error messages in Flask-RestX request parsers. It shows how to use the 'help' parameter with an interpolation token {error_msg} to include the original error in a custom message when validation fails.\nSOURCE: https://github.com/python-restx/flask-restx/blob/master/doc/parsing.rst#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom flask_restx import reqparse\n\n\nparser = reqparse.RequestParser()\nparser.add_argument(\n    'foo',\n    choices=('one', 'two'),\n    help='Bad choice: {error_msg}'\n)\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"message\":  {\n        \"foo\": \"Bad choice: three is not a valid choice\",\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Flask-RESTX via pip\nDESCRIPTION: This command installs the stable version of Flask-RESTX using pip. It's the simplest method for most users.\nSOURCE: https://github.com/python-restx/flask-restx/blob/master/doc/installation.rst#2025-04-22_snippet_0\n\nLANGUAGE: console\nCODE:\n```\npip install flask-restx\n```\n\n----------------------------------------\n\nTITLE: Documenting Multiple Routes for a Resource in Python\nDESCRIPTION: This example shows how to use multiple @api.route() decorators to add multiple routes for a single Resource, with route-specific documentation.\nSOURCE: https://github.com/python-restx/flask-restx/blob/master/doc/swagger.rst#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@api.route(\"/my-resource/<id>\")\n@api.route(\n    \"/also-my-resource/<id>\",\n    doc={\"description\": \"Alias for /my-resource/<id>\"},\n)\nclass MyResource(Resource):\n    def get(self, id):\n        return {}\n```\n\n----------------------------------------\n\nTITLE: Installing Flask-RESTX development version from GitHub\nDESCRIPTION: These commands clone the Flask-RESTX repository from GitHub, navigate to the project directory, and install the package in editable mode with development and test dependencies.\nSOURCE: https://github.com/python-restx/flask-restx/blob/master/doc/installation.rst#2025-04-22_snippet_1\n\nLANGUAGE: console\nCODE:\n```\ngit clone https://github.com/python-restx/flask-restx.git\ncd flask-restx\npip install -e .[dev,test]\n```\n\n----------------------------------------\n\nTITLE: Defining Shared Documentation for Resource Routes with Flask-RESTX\nDESCRIPTION: Example showing how to define multiple routes for a single resource with shared documentation. The documentation applied to the Resource is shared among all routes unless explicitly overridden with route-specific doc parameters.\nSOURCE: https://github.com/python-restx/flask-restx/blob/master/doc/swagger.rst#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@api.route(\"/my-resource/<id>\")\n@api.route(\n\"/also-my-resource/<id>\",\ndoc={\"description\": \"Alias for /my-resource/<id>\"},\n)\n@api.doc(params={\"id\": \"An ID\", description=\"My resource\"})\nclass MyResource(Resource):\ndef get(self, id):\n    return {}\n```\n\n----------------------------------------\n\nTITLE: Disabling Swagger UI in Flask-RESTX\nDESCRIPTION: This snippet shows how to completely disable the Swagger UI documentation in a Flask-RESTX application.\nSOURCE: https://github.com/python-restx/flask-restx/blob/master/doc/swagger.rst#2025-04-22_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import Flask\nfrom flask_restx import Api\n\napp = Flask(__name__)\napi = Api(app, doc=False)\n```\n\n----------------------------------------\n\nTITLE: Cascading Documentation in Flask-RESTX\nDESCRIPTION: Examples demonstrating the cascading behavior of documentation in Flask-RESTX where method documentation takes precedence over class documentation, and inherited documentation takes precedence over parent documentation.\nSOURCE: https://github.com/python-restx/flask-restx/blob/master/doc/swagger.rst#2025-04-22_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n@api.route('/my-resource/<id>', endpoint='my-resource')\n@api.params('id', 'An ID')\nclass MyResource(Resource):\n    def get(self, id):\n        return {}\n```\n\nLANGUAGE: python\nCODE:\n```\n@api.route('/my-resource/<id>', endpoint='my-resource')\n@api.param('id', 'Class-wide description')\nclass MyResource(Resource):\n    @api.param('id', 'An ID')\n    def get(self, id):\n        return {}\n```\n\nLANGUAGE: python\nCODE:\n```\n@api.route('/my-resource/<id>', endpoint='my-resource')\n@api.params('id', 'Class-wide description')\n@api.doc(get={'params': {'id': 'An ID'}})\nclass MyResource(Resource):\n    def get(self, id):\n        return {}\n```\n\n----------------------------------------\n\nTITLE: File Upload Handling in Flask-RESTX\nDESCRIPTION: Demonstrates how to handle file uploads using FileStorage type and files location.\nSOURCE: https://github.com/python-restx/flask-restx/blob/master/doc/parsing.rst#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom werkzeug.datastructures import FileStorage\n\nupload_parser = api.parser()\nupload_parser.add_argument('file', location='files',\n                           type=FileStorage, required=True)\n\n\n@api.route('/upload/')\n@api.expect(upload_parser)\nclass Upload(Resource):\n    def post(self):\n        args = upload_parser.parse_args()\n        uploaded_file = args['file']  # This is FileStorage instance\n        url = do_something_with_file(uploaded_file)\n        return {'url': url}, 201\n```\n\n----------------------------------------\n\nTITLE: Configuring Field Order Preservation in Flask-RestX\nDESCRIPTION: Shows three different methods to preserve field order in Flask-RestX: globally on Api class, globally on Namespace class, and locally on marshal function.\nSOURCE: https://github.com/python-restx/flask-restx/blob/master/doc/quickstart.rst#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\napi = Api(ordered=True)\n```\n\nLANGUAGE: python\nCODE:\n```\nns = Namespace(ordered=True)\n```\n\nLANGUAGE: python\nCODE:\n```\nreturn marshal(data, fields, ordered=True)\n```\n\n----------------------------------------\n\nTITLE: Installing Flask-RestX Development Dependencies\nDESCRIPTION: Command to install Flask-RestX with development dependencies using pip. This allows contributors to set up their local development environment with all necessary tools.\nSOURCE: https://github.com/python-restx/flask-restx/blob/master/CONTRIBUTING.rst#2025-04-22_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ pip install -e .[dev]\n```\n\n----------------------------------------\n\nTITLE: Documenting Headers in Flask-RESTX\nDESCRIPTION: Examples showing how to document response headers using the api.header decorator and how to document expected request headers using the RequestParser.\nSOURCE: https://github.com/python-restx/flask-restx/blob/master/doc/swagger.rst#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n@api.route('/with-headers/')\n@api.header('X-Header', 'Some class header')\nclass WithHeaderResource(restx.Resource):\n    @api.header('X-Collection', type=[str], collectionType='csv')\n    def get(self):\n        pass\n```\n\nLANGUAGE: python\nCODE:\n```\n@api.route('/response-headers/')\nclass WithHeaderResource(restx.Resource):\n    @api.response(200, 'Success', headers={'X-Header': 'Some header'})\n    def get(self):\n        pass\n```\n\nLANGUAGE: python\nCODE:\n```\nparser = api.parser()\nparser.add_argument('Some-Header', location='headers')\n\n@api.route('/expect-headers/')\n@api.expect(parser)\nclass ExpectHeaderResource(restx.Resource):\n    def get(self):\n        pass\n```\n\n----------------------------------------\n\nTITLE: Installing Flask-RESTX with pip\nDESCRIPTION: Command to install the Flask-RESTX package using pip package manager. This is the recommended installation method for Flask-RESTX, which requires Python 3.9+.\nSOURCE: https://github.com/python-restx/flask-restx/blob/master/doc/index.rst#2025-04-22_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ pip install flask-restx\n```\n\n----------------------------------------\n\nTITLE: Running Full Pre-Commit Verification\nDESCRIPTION: Command to run both quality assurance checks and tests with tox. This all-in-one command ensures code quality and compatibility before committing changes.\nSOURCE: https://github.com/python-restx/flask-restx/blob/master/CONTRIBUTING.rst#2025-04-22_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ inv qa tox\n```\n\n----------------------------------------\n\nTITLE: Exporting Swagger Specifications in Flask-RESTX\nDESCRIPTION: This snippet shows how to export the Swagger specifications for a Flask-RESTX API as a JSON string.\nSOURCE: https://github.com/python-restx/flask-restx/blob/master/doc/swagger.rst#2025-04-22_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import json\n\nfrom myapp import api\n\nprint(json.dumps(api.__schema__))\n```\n\n----------------------------------------\n\nTITLE: Multiple Bug Fix Entries for Flask-RestX in reStructuredText\nDESCRIPTION: Shows multiple bug fix entries for version 1.3.0, including fixes for Werkzeug 3 compatibility, Flask 3.0+ support, and handling of HTTPExceptions.\nSOURCE: https://github.com/python-restx/flask-restx/blob/master/CHANGELOG.rst#2025-04-22_snippet_2\n\nLANGUAGE: reStructuredText\nCODE:\n```\n* Fixing werkzeug 3 deprecated version import. Import is replaced by new style version check with importlib (#573) [Ryu-CZ]\n* Fixing flask 3.0+ compatibility of `ModuleNotFoundError: No module named 'flask.scaffold'` Import error. (#567) [Ryu-CZ]\n* Fix wrong status code and message on responses when handling `HTTPExceptions` (#569) [lkk7]\n* Add flask 2 and flask 3 to testing matrix. [foarsitter]\n* Update internally pinned pytest-flask to 1.3.0 for Flask >=3.0.0 support. [peter-doggart]\n* Python 3.12 support. [foarsitter]\n* Fix wrong status code and message on responses when handling HTTPExceptions. [ikk7]\n* Update changelog Flask version table. [peter-doggart]\n* Remove temporary package version restrictions for flask < 3.0.0, werkzeug and jsonschema (jsonschema future deprecation warning remains. See #553). [peter-doggart]\n```\n\n----------------------------------------\n\nTITLE: Flask Application Setup with API Integration\nDESCRIPTION: Basic Flask application setup showing how to initialize and register the Flask-RESTX API instance with the Flask application.\nSOURCE: https://github.com/python-restx/flask-restx/blob/master/doc/scaling.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import Flask\nfrom apis import api\n\napp = Flask(__name__)\napi.init_app(app)\n\napp.run(debug=True)\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Operation IDs for API Methods\nDESCRIPTION: Examples showing how to specify custom operationIds for Swagger documentation using the api.doc decorator. These examples demonstrate different ways to customize the operationId for API methods.\nSOURCE: https://github.com/python-restx/flask-restx/blob/master/doc/swagger.rst#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n@api.route('/my-resource/')\nclass MyResource(Resource):\n    @api.doc(id='get_something')\n    def get(self):\n        return {}\n```\n\nLANGUAGE: python\nCODE:\n```\n@api.route('/my-resource/')\nclass MyResource(Resource):\n    @api.doc('get_something')\n    def get(self):\n        return {}\n```\n\nLANGUAGE: python\nCODE:\n```\ndef default_id(resource, method):\n    return ''.join((method, resource))\n\napi = Api(app, default_id=default_id)\n```\n\n----------------------------------------\n\nTITLE: Installing Flask-RESTX with easy_install\nDESCRIPTION: Command to install Flask-RESTX using easy_install package manager.\nSOURCE: https://github.com/python-restx/flask-restx/blob/master/README.rst#2025-04-22_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ easy_install flask-restx\n```\n\n----------------------------------------\n\nTITLE: Multiple Values Handling with append Action\nDESCRIPTION: Demonstrates how to accept multiple values for a single parameter using the append action.\nSOURCE: https://github.com/python-restx/flask-restx/blob/master/doc/parsing.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nparser.add_argument('name', action='append')\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Tox\nDESCRIPTION: Command to run the test suite against all supported Python versions using tox. This ensures code compatibility across different Python environments.\nSOURCE: https://github.com/python-restx/flask-restx/blob/master/CONTRIBUTING.rst#2025-04-22_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ tox\n```\n\n----------------------------------------\n\nTITLE: Split Action for Comma-separated Lists\nDESCRIPTION: Shows how to handle comma-separated list inputs using the split action.\nSOURCE: https://github.com/python-restx/flask-restx/blob/master/doc/parsing.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nparser.add_argument('fruits', action='split')\n```\n\n----------------------------------------\n\nTITLE: Installing Swagger Assets for Local Development\nDESCRIPTION: Command to fetch and install Swagger web assets using NPM. This allows running a local Swagger server for development and testing purposes.\nSOURCE: https://github.com/python-restx/flask-restx/blob/master/CONTRIBUTING.rst#2025-04-22_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ inv assets\n```\n\n----------------------------------------\n\nTITLE: Configuring 'Try it Out' Feature in Swagger UI\nDESCRIPTION: This snippet demonstrates how to configure the 'Try it Out' feature in Swagger UI by specifying which HTTP methods should have the button enabled.\nSOURCE: https://github.com/python-restx/flask-restx/blob/master/doc/swagger.rst#2025-04-22_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import Flask\nfrom flask_restx import Api\n\napp = Flask(__name__)\n\n# disable Try it Out for all methods\napp.config.SWAGGER_SUPPORTED_SUBMIT_METHODS = []\n\n# enable Try it Out for specific methods\napp.config.SWAGGER_SUPPORTED_SUBMIT_METHODS = [\"get\", \"post\"]\n\napi = Api(app)\n```\n\n----------------------------------------\n\nTITLE: Hiding Resources from Documentation in Flask-RESTX\nDESCRIPTION: Example showing how to hide a resource from the Swagger documentation by setting doc=False in the api.route decorator.\nSOURCE: https://github.com/python-restx/flask-restx/blob/master/doc/swagger.rst#2025-04-22_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n# Hide the full resource\n@api.route('/resource1/', doc=False)\nclass Resource1(Resource):\n    def get(self):\n        return {}\n```\n\n----------------------------------------\n\nTITLE: Hiding Resources and Methods in Flask-RESTX API Documentation\nDESCRIPTION: This snippet demonstrates how to hide specific resources and methods from the API documentation using @api.doc(False) and @api.hide decorators.\nSOURCE: https://github.com/python-restx/flask-restx/blob/master/doc/swagger.rst#2025-04-22_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n@api.route('/resource2/')\n@api.doc(False)\nclass Resource2(Resource):\n    def get(self):\n        return {}\n\n@api.route('/resource3/')\n@api.hide\nclass Resource3(Resource):\n    def get(self):\n        return {}\n\n# Hide methods\n@api.route('/resource4/')\n@api.doc(delete=False)\nclass Resource4(Resource):\n    def get(self):\n        return {}\n\n    @api.doc(False)\n    def post(self):\n        return {}\n\n    @api.hide\n    def put(self):\n        return {}\n\n    def delete(self):\n        return {}\n```\n\n----------------------------------------\n\nTITLE: Model Level Mask Definition\nDESCRIPTION: Shows how to define a default mask at the model level when creating an API model.\nSOURCE: https://github.com/python-restx/flask-restx/blob/master/doc/mask.rst#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nmodel = api.model('Person', {\n    'name': fields.String,\n    'age': fields.Integer,\n    'boolean': fields.Boolean,\n}, mask='{name,age}')\n```\n\n----------------------------------------\n\nTITLE: Converting Flask-RestX API to Postman Collection\nDESCRIPTION: Demonstrates how to export a Flask-RestX API as a Postman collection using the as_postman() method. Includes options to build query strings in URLs and export Swagger specifications. The resulting data is output as JSON.\nSOURCE: https://github.com/python-restx/flask-restx/blob/master/doc/postman.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import json\n\nfrom myapp import api\n\nurlvars = False  # Build query strings in URLs\nswagger = True  # Export Swagger specifications\ndata = api.as_postman(urlvars=urlvars, swagger=swagger)\nprint(json.dumps(data))\n```\n\n----------------------------------------\n\nTITLE: Swagger Model Mask Definition\nDESCRIPTION: JSON representation of how the mask is exposed in the Swagger/OpenAPI specification as a vendor extension.\nSOURCE: https://github.com/python-restx/flask-restx/blob/master/doc/mask.rst#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\"definitions\": {\n    \"Test\": {\n        \"properties\": {\n            \"age\": {\"type\": \"integer\"},\n            \"boolean\": {\"type\": \"boolean\"},\n            \"name\": {\"type\": \"string\"}\n        },\n        \"x-mask\": \"{name,age}\"\n    }\n}}\n```\n\n----------------------------------------\n\nTITLE: Installing Flask-RESTX with easy_install\nDESCRIPTION: Alternative command to install the Flask-RESTX package using easy_install. While pip is generally preferred, this method provides an alternative installation approach.\nSOURCE: https://github.com/python-restx/flask-restx/blob/master/doc/index.rst#2025-04-22_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ easy_install flask-restx\n```\n\n----------------------------------------\n\nTITLE: Installing Flask-RESTX with pip\nDESCRIPTION: Command to install Flask-RESTX using pip package manager.\nSOURCE: https://github.com/python-restx/flask-restx/blob/master/README.rst#2025-04-22_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ pip install flask-restx\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Dependencies for Flask-RestX Project\nDESCRIPTION: This requirements.txt file lists all the Python packages required for a Flask-RestX API project, specifying exact versions to ensure compatibility. It includes Flask 1.1.4, flask-restx 0.5.1, and supporting packages for JSON schema handling, templating, and HTTP request processing.\nSOURCE: https://github.com/python-restx/flask-restx/blob/master/examples/zoo_app/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\naniso8601==9.0.1\nattrs==21.2.0\nclick==7.1.2\nFlask==1.1.4\nflask-restx==0.5.1\nitsdangerous==1.1.0\nJinja2==2.11.3\njsonschema==3.2.0\nMarkupSafe==2.0.1\npyrsistent==0.17.3\nsix==1.16.0\nWerkzeug==2.2.3\n```\n\n----------------------------------------\n\nTITLE: Adding a Bug Fix Entry to Changelog in reStructuredText\nDESCRIPTION: Demonstrates the format for adding a bug fix entry to the changelog, including the fix description, ticket number, and contributor name.\nSOURCE: https://github.com/python-restx/flask-restx/blob/master/CHANGELOG.rst#2025-04-22_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n* Message (TICKET) [CONTRIBUTOR]\n```\n\n----------------------------------------\n\nTITLE: Migrating Flask-RESTPlus to Flask-RESTX\nDESCRIPTION: Commands to update import statements and configuration options when migrating from Flask-RESTPlus to Flask-RESTX.\nSOURCE: https://github.com/python-restx/flask-restx/blob/master/doc/quickstart.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfind . -type f -name \"*.py\" | xargs sed -i \"s/flask_restplus/flask_restx/g\"\n```\n\nLANGUAGE: bash\nCODE:\n```\nfind . -type f -name \"*.py\" | xargs sed -i \"s/RESTPLUS_/RESTX_/g\"\n```\n\n----------------------------------------\n\nTITLE: Bug Fix Entry for Python Version Requirement in reStructuredText\nDESCRIPTION: Example of a bug fix entry in the changelog, specifically for adding a Python version requirement to setup.py.\nSOURCE: https://github.com/python-restx/flask-restx/blob/master/CHANGELOG.rst#2025-04-22_snippet_1\n\nLANGUAGE: reStructuredText\nCODE:\n```\n* Add python version requirement on setup.py (#586) [jason-the-j]\n```\n\n----------------------------------------\n\nTITLE: Running Quality Assurance Checks\nDESCRIPTION: Command to run quality assurance checks on the code. This verifies that the code meets the Flask-RestX coding standards and conventions.\nSOURCE: https://github.com/python-restx/flask-restx/blob/master/CONTRIBUTING.rst#2025-04-22_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ inv qa\n```\n\n----------------------------------------\n\nTITLE: Enhancement Entry for Dropping Python 3.7 Support in reStructuredText\nDESCRIPTION: Example of an enhancement entry in the changelog, specifically for dropping support for Python 3.7.\nSOURCE: https://github.com/python-restx/flask-restx/blob/master/CHANGELOG.rst#2025-04-22_snippet_3\n\nLANGUAGE: reStructuredText\nCODE:\n```\n* Drop support for python 3.7\n```\n\n----------------------------------------\n\nTITLE: Including Contributing Guidelines in RST Documentation\nDESCRIPTION: A reStructuredText directive that includes the CONTRIBUTING.rst file from the parent directory into the current document. This approach allows maintaining a single source of contribution guidelines that can be referenced from multiple documentation files.\nSOURCE: https://github.com/python-restx/flask-restx/blob/master/doc/contributing.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. include:: ../CONTRIBUTING.rst\n```\n\n----------------------------------------\n\nTITLE: Viewing Available Invoke Tasks\nDESCRIPTION: Command to list all available tasks defined in the Invoke tasks.py file. These tasks simplify common development processes like testing, building docs, and packaging.\nSOURCE: https://github.com/python-restx/flask-restx/blob/master/CONTRIBUTING.rst#2025-04-22_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ inv -l\nAvailable tasks:\n\n  all      Run tests, reports and packaging\n  assets   Fetch web assets -- Swagger. Requires NPM (see below)\n  clean    Cleanup all build artifacts\n  cover    Run tests suite with coverage\n  demo     Run the demo\n  dist     Package for distribution\n  doc      Build the documentation\n  qa       Run a quality report\n  test     Run tests suite\n  tox      Run tests against Python versions\n```\n\n----------------------------------------\n\nTITLE: Documenting Expected Input with @api.expect() in Python\nDESCRIPTION: This example demonstrates how to use the @api.expect() decorator to specify expected input fields and enable payload validation for API endpoints.\nSOURCE: https://github.com/python-restx/flask-restx/blob/master/doc/swagger.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nresource_fields = api.model('Resource', {\n    'name': fields.String,\n})\n\n@api.route('/my-resource/<id>')\nclass MyResource(Resource):\n    @api.expect(resource_fields)\n    def get(self):\n        pass\n\n    @api.expect(resource_fields, validate=True)\n    def post(self):\n        pass\n```"
  }
]