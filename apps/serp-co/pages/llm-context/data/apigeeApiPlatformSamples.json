[
  {
    "owner": "apigee",
    "repo": "api-platform-samples",
    "content": "TITLE: Implementing VerifyAPIKey Policy in Apigee Edge\nDESCRIPTION: XML configuration for the VerifyAPIKey policy that validates API keys from query parameters. The policy checks for an API key in the 'apikey' query parameter of incoming requests.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/learn-edge/apikey-security-1/README.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<VerifyAPIKey name=\"VerifyAPIKey\">\n    <APIKey ref=\"request.queryparam.apikey\"/>\n</VerifyAPIKey>\n```\n\n----------------------------------------\n\nTITLE: Installation Dialog with Yeoman Generator\nDESCRIPTION: Example dialog showing the prompts when running the Yeoman generator for this OAuth Authorization Code Grant Type sample. Users need to provide their credentials, API endpoint, organization name, and environment name.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/sample-proxies/oauth-advanced/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nSample Generator of OAuth Authorization Code Grant Type Proxies.\n? Your user name:\n? Password:\n? Management API URL Endpoint: https://api.enterprise.apigee.com\n? Organization Name:\n? Environment Name:\n```\n\n----------------------------------------\n\nTITLE: Configuring Verify API Key Policy in Apigee Edge\nDESCRIPTION: This XML snippet defines the Verify API Key policy in Apigee Edge. It checks for an API key in the 'apikey' query parameter against the Consumer Keys in all Developer Apps in the organization.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/edge-ux/basic-apikey-security/README.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<VerifyAPIKey name=\"VerifyAPIKey\">\n  <!-- This policy checks the query param \"apikey\" against the Consumer Keys in all the Developer Apps defined in our organization.-->\n    <APIKey ref=\"request.queryparam.apikey\"/>\n</VerifyAPIKey>\n```\n\n----------------------------------------\n\nTITLE: Example Callback URL Configuration\nDESCRIPTION: Example of a configured callback URL with specific organization and environment values.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/sample-proxies/oauth-advanced/README.md#2025-04-23_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<CallbackUrl>https://myorg-test.apigee.net/web/callback<CallbackUrl>\n```\n\n----------------------------------------\n\nTITLE: Configuring Fault Rule for Invalid API Key in Apigee Edge Proxy\nDESCRIPTION: Defines a FaultRule in the proxy endpoint that executes when an invalid API key error occurs. The rule contains a condition that matches the 'InvalidApiKey' fault name and triggers the corresponding error handling step.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/edge-ux/fault-handling-apikey/README.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<ProxyEndpoint name=\"default\">\n  <FaultRules>\n    <FaultRule name=\"InvalidApiKey\">\n        <Step>\n            <Name>InvalidApiKey</Name>\n        </Step>\n        <Condition>(fault.name Matches \"InvalidApiKey\") </Condition>\n    </FaultRule>\n  </FaultRules>\n  ...\n```\n\n----------------------------------------\n\nTITLE: Authorization Request for OAuth 2.0 Implicit Grant\nDESCRIPTION: HTTP GET request for initiating the OAuth 2.0 implicit grant flow. It includes client_id, redirect_uri, scope, and state parameters.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/sample-proxies/oauth-login-app/README.md#2025-04-23_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nhttps://$org-$env.$api_domain/oauth/authorize?response_type=token&client_id=$consumerkey&redirect_uri=$callback&scope=READ&state=foobar\n```\n\n----------------------------------------\n\nTITLE: Attaching ResponseCache Policy to ProxyEndpoint Preflow (XML)\nDESCRIPTION: This XML snippet shows how to attach the ResponseCache policy to the Preflow of a ProxyEndpoint in Apigee Edge. The policy is applied to the request flow, allowing caching to be checked before forwarding to the target.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/edge-ux/response-cache-simple/README.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<PreFlow>\n    <Request>\n      <Step>\n        <Name>ResponseCache</Name>\n      </Step>\n    </Request>\n</PreFlow>\n```\n\n----------------------------------------\n\nTITLE: Using Python Deploy Tool Command\nDESCRIPTION: Command syntax for deploying an API proxy to Apigee Edge using the Python deploy tool. Requires Python installation and valid Apigee credentials. Used to import and deploy API proxies from local machine to an Apigee environment.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/tools/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndeploy.py -n {apiName} -u {myname:mypass} -o {myorg} -e {environment} -p {basePath} -d {path to /apiproxy directory}\n```\n\n----------------------------------------\n\nTITLE: Configuring Apigee Edge Account Settings in Bash\nDESCRIPTION: This snippet shows how to set up environment variables for deploying Apigee Edge proxies. It includes organization name, username, API URL, environment, and domain.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\norg=myorg\nusername=jdoe@example.com\nurl=\"https://api.enterprise.apigee.com\"\nenv=test\napi_domain=\"apigee.net\"\n```\n\n----------------------------------------\n\nTITLE: Token Exchange Request for OAuth 2.0 Authorization Code\nDESCRIPTION: HTTP POST request to exchange the authorization code for an access token. It includes the code, grant_type, and response_type parameters.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/sample-proxies/oauth-login-app/README.md#2025-04-23_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nhttps://$org-$env.$api_domain/oauth/token?code=$auth_code&grant_type=authorization_code&response_type=code\n-X POST -H \"Content-type:application/x-www-form-urlencoded\" \"Authorization: key:secret\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Proxy Endpoint PreFlow with Multiple Policies\nDESCRIPTION: This configuration attaches the VerifyAPIKey, AM-BuildRequest, and ServiceCalloutGetMockResponse policies to the Proxy Endpoint PreFlow. The policies execute in sequence to verify API key, build the request, and make the service callout.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/learn-edge/service-callout-1/README.md#2025-04-23_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<PreFlow>\n  <Request>\n    <Step>\n      <Name>VerifyAPIKey</Name>\n    </Step>\n    <Step>\n      <Name>AM-BuildRequest</Name>\n    </Step>\n    <Step>\n      <Name>ServiceCalloutGetMockResponse</Name>\n    </Step>\n  </Request>\n</PreFlow>\n```\n\n----------------------------------------\n\nTITLE: Configuring Login App Environment Settings in JavaScript\nDESCRIPTION: Configuration settings for the login app including organization name, environment, and domain information for Apigee Edge deployment.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/sample-proxies/oauth-advanced/README.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexports.envInfo = {\n   org: 'Your org name on Edge',\n   env: 'Your environment on Edge (test or prod)',\n   domain: 'apigee.net'\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Quota Policy in Apigee Edge\nDESCRIPTION: This XML snippet defines a Quota policy named 'EnforceQuota'. It uses flow variables set by the VerifyAPIKey policy to determine the quota interval, time unit, and allow count. The policy limits API calls based on values set in the associated API Product.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/learn-edge/quota-1/README.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<Quota name=\"EnforceQuota\">\n  <DisplayName>Enforce Quota</DisplayName>\n  <Interval ref=\"verifyapikey.VerifyAPIKey.apiproduct.developer.quota.interval\">100</Interval>\n  <TimeUnit ref=\"verifyapikey.VerifyAPIKey.apiproduct.developer.quota.timeunit\">hour</TimeUnit>\n  <Allow count=\"20\" countRef=\"verifyapikey.VerifyAPIKey.apiproduct.developer.quota.limit\"/>\n</Quota>\n```\n\n----------------------------------------\n\nTITLE: OAuth Access Token Request with cURL\nDESCRIPTION: Example cURL command for requesting an OAuth access token using an authorization code grant type. The request includes required headers for content type and basic authentication, along with form parameters for the authorization code, grant type, and redirect URI.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/doc-samples/oauth-doc-examples/README.md#2025-04-23_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl -i -H 'ContentType: x-www-form-urlencoded' -X POST 'https://docs-test.apigee.net/oauth/accesstoken' -d 'code=I9dMGHAN&grant_type=authorization_code&redirect_uri=http://example-callback.com' -H 'Authorization: Basic c3FIOG9vSGV4VHo4QzAyg5T1JvNnJoZ3ExaVNyQWw6WjRsanRKZG5lQk9qUE1BVQ'\n```\n\n----------------------------------------\n\nTITLE: Defining TargetEndpoint in Apigee API Proxy\nDESCRIPTION: This XML snippet defines a TargetEndpoint named 'default' that specifies the backend target URL. It uses HTTPTargetConnection to set the target URL to 'http://mocktarget.apigee.net'.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/edge-ux/proxy-to-target/README.md#2025-04-23_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<TargetEndpoint name=\"default\">\n   <HTTPTargetConnection>\n     <!-- This is where we define the target. For this sample we just use a simple URL. -->\n     <URL>http://mocktarget.apigee.net</URL>\n   </HTTPTargetConnection>\n</TargetEndpoint>\n```\n\n----------------------------------------\n\nTITLE: Initiating Asynchronous HTTP Request with JavaScript in Apigee\nDESCRIPTION: Makes an asynchronous HTTP GET request to Yahoo's weather API and stores the response in the context session for later retrieval. This demonstrates the first part of the async pattern where the request is initiated but not waited on.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/sample-proxies/async-callout/README.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar paloAlto = httpClient.get('http://weather.yahooapis.com/forecastrss?w=2467861');\ncontext.session['paloAlto'] = paloAlto;\n```\n\n----------------------------------------\n\nTITLE: Using AssignMessage Policy to Remove API Key in Apigee Edge (XML)\nDESCRIPTION: This XML snippet defines an AssignMessage policy that removes the 'apikey' query parameter from the request. The policy is configured to ignore unresolved variables and applies to the existing HTTP request without creating a new one.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/learn-edge/apikey-security-2/README.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<AssignMessage name=\"RemoveAPIKey\">\n    <DisplayName>Remove API Key</DisplayName>\n    <Remove>\n        <QueryParams>\n            <QueryParam name=\"apikey\"/>\n        </QueryParams>\n    </Remove>\n    <IgnoreUnresolvedVariables>true</IgnoreUnresolvedVariables>\n    <AssignTo createNew=\"false\" transport=\"http\" type=\"request\"></AssignTo>\n</AssignMessage>\n```\n\n----------------------------------------\n\nTITLE: JavaScript Callout Configuration for GraphQL Authorization\nDESCRIPTION: XML configuration for the JavaScript callout used to validate and authorize GraphQL queries. It specifies input properties and the resource URL for the JavaScript file.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/sample-proxies/graphql-sample/README.md#2025-04-23_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<Javascript async=\"false\" continueOnError=\"false\" enabled=\"true\" timeLimit=\"200\" name=\"GraphQLAuthZ\">\n    <DisplayName>GraphQLAuthZ</DisplayName>\n    <Properties>\n        <Property name=\"input\">{query}</Property>\n        <Property name=\"entitlements\">{entitlements}</Property>\n        <Property name=\"debug\">true</Property>\n    </Properties>\n    <ResourceURL>jsc://graphql.jsc.js</ResourceURL>\n</Javascript>\n```\n\n----------------------------------------\n\nTITLE: Configuring ResponseCache Policy in Apigee Edge (XML)\nDESCRIPTION: This XML snippet defines a ResponseCache policy that caches responses for 3 seconds. It uses request.uri as the cache key fragment to separate caches for different requests.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/learn-edge/response-cache-1/README.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<ResponseCache async=\"false\" continueOnError=\"false\" enabled=\"true\" name=\"ResponseCache\">\n    <DisplayName>ResponseCache</DisplayName>\n    <CacheKey>\n        <KeyFragment ref=\"request.uri\" type=\"string\"/>\n    </CacheKey>\n    <ExpirySettings>\n        <TimeoutInSec>3</TimeoutInSec>\n    </ExpirySettings>\n</ResponseCache>\n```\n\n----------------------------------------\n\nTITLE: Extracting XML Data with Multiple Namespaces in Apigee Edge\nDESCRIPTION: This Extract Variables policy demonstrates how to extract XML data from a request using multiple namespace declarations. It extracts a company ID from a SOAP envelope structure.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/learn-edge/extract-xml-payload/README.md#2025-04-23_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<ExtractVariables name=\"ExtractCompanyId\">\n    <Source>request</Source>\n    <IgnoreUnresolvedVariables>false</IgnoreUnresolvedVariables>\n    <XMLPayload>\n        <Namespaces>\n            <Namespace prefix=\"S\">http://schemas.xmlsoap.org/soap/envelope/</Namespace>\n            <Namespace prefix=\"ns1\">urn:xxxx.xxxx.xxxxx.com</Namespace>\n        </Namespaces>\n        <Variable name=\"companyId\" type=\"string\">\n            <XPath>/S:Envelope/S:Body/ns1:login/ns1:credential/ns1:companyId/text()</XPath>\n        </Variable>\n    </XMLPayload>\n    <DisplayName>Extract Company Id</DisplayName>\n</ExtractVariables>\n```\n\n----------------------------------------\n\nTITLE: cURL Command for Testing GraphQL API Proxy\nDESCRIPTION: Sample cURL command to test the deployed GraphQL API proxy. It includes headers for content type, scope, and a sample GraphQL query for resorts and lifts.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/sample-proxies/graphql-sample/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n  https://yourorg-yourenv.apigee.net/graphql \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -H 'scope: reader' \\\n  -d '{\"query\":\"{\n  resorts {\n    name\n    lifts {\n      status\n      name\n    }\n  }\n}\n\"}'\n```\n\n----------------------------------------\n\nTITLE: Configuring ResponseCache Policy in Apigee Edge (XML)\nDESCRIPTION: This XML snippet defines a ResponseCache policy in Apigee Edge. It sets up caching properties including a cache key based on the request URI and an expiration time of 3 seconds. The policy is configured to run synchronously and continue on error.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/edge-ux/response-cache-simple/README.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<ResponseCache async=\"false\" continueOnError=\"false\" \n    enabled=\"true\" name=\"ResponseCache\">\n    <DisplayName>ResponseCache</DisplayName>\n    <CacheKey>\n        <KeyFragment ref=\"request.uri\" type=\"string\"/>\n    </CacheKey>\n    <ExpirySettings>\n        <TimeoutInSec>3</TimeoutInSec>\n    </ExpirySettings>\n</ResponseCache>\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Flow in ProxyEndpoint\nDESCRIPTION: XML configuration for the ProxyEndpoint that defines a custom flow 'HandleHeaders' which executes the ParseJsonResponse and AssignCustomHeaders policies in sequence during the response phase.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/edge-ux/extract-json-payload/README.md#2025-04-23_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<Flows>\n    <Flow name=\"HandleHeaders\">\n        <Response>\n            <Step>\n                <Name>ParseJsonResponse</Name>\n            </Step>\n            <Step>\n                <Name>AssignCustomHeaders</Name>\n            </Step>\n        </Response>\n        <Request/>\n    </Flow>\n</Flows>\n```\n\n----------------------------------------\n\nTITLE: Deploying Node.js API Proxy using apigeetool\nDESCRIPTION: Shell command that first gets an authentication token and then uses apigeetool to deploy a Node.js Express application as an API proxy to Apigee Edge. The command specifies the organization, environment, API name and uses JSON output format.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/doc-samples/hosted-targets/node-hosted-express/deploy.txt#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nget_token && apigeetool deployproxy \\\n      -o apigee-hf-testing \\\n      -e test \\\n      --json \\\n      --token \"$(< ~/.sso-cli/valid_token.dat)\" \\\n      --api node-hosted-express \\\n      --directory .\n```\n\n----------------------------------------\n\nTITLE: Making OAuth Client Credentials Request with cURL\nDESCRIPTION: Example cURL command to request an access token using the client credentials grant type. This command sends a Base64-encoded client ID and secret in the Authorization header to the Apigee endpoint.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/sample-proxies/oauth-client-credentials/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncurl -H \"Authorization: Basic <base64-encoded key:secret>\" https://example-test.apigee.net/oauth/accesstoken?grant_type=client_credentials\n```\n\n----------------------------------------\n\nTITLE: Implementing Service Callout Policy in Apigee Edge\nDESCRIPTION: This policy calls the mocktarget service directly without using a TargetEndpoint. It defines a 30-second timeout and specifies the target URL. The response is stored in a variable named 'mockresponse' for further processing.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/learn-edge/service-callout-1/README.md#2025-04-23_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<ServiceCallout name='ServiceCalloutGetMockResponse'>\n    <DisplayName>ServiceCallout.GetMockResponse</DisplayName>\n    <Request variable=\"myrequest\">\n    </Request>\n    <Response>mockresponse</Response>\n    <Timeout>30000</Timeout>\n    <HTTPTargetConnection>\n      <URL>http://mocktarget.apigee.net</URL>\n    </HTTPTargetConnection>\n</ServiceCallout>\n```\n\n----------------------------------------\n\nTITLE: Invoking the API Proxy and Displaying Custom Headers in Bash\nDESCRIPTION: This bash snippet shows the custom headers returned by the API proxy after invoking it. It demonstrates the extracted variables assigned to HTTP response headers.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/sample-proxies/variables/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmock.city: San Jose\nmock.state: CA\nmock.firstName: John\nmock.lastName: Doe\n```\n\n----------------------------------------\n\nTITLE: Importing Sharedflow to Apigee Organization\nDESCRIPTION: Curl command to import the packaged sharedflow to an Apigee organization using the API.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/perf-proxies/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -v 'https://apigee.googleapis.com/v1/organizations/${org_name}/sharedflows?action=import&name=sfassignmessage' \\\n    -X POST \\\n    -H \"Authorization: Bearer $TOKEN\" \\\n    -F \"file=@sfassignmessage.zip\" \\\n    -H \"Content-Type:multipart/form-data\"\n```\n\n----------------------------------------\n\nTITLE: Configuring API Products, Developers, and Apps\nDESCRIPTION: Shell command to run a setup script that configures API products, developers, and apps in the Apigee organization. This step is crucial for setting up the OAuth2 environment.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/sample-proxies/oauth-verify-accesstoken/README.md#2025-04-23_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n../setup/provisioning/setup.sh\n```\n\n----------------------------------------\n\nTITLE: Configuring Response Headers with Assign Message Policy\nDESCRIPTION: XML configuration for the SetResponseHeaders policy that adds cache-related information to response headers using flow variables from the Response Cache policy execution.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/learn-edge/response-cache-2/README.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<AssignMessage async=\"false\" continueOnError=\"false\" enabled=\"true\" name=\"SetResponseHeaders\">\n    <DisplayName>Set Response Headers</DisplayName>\n    <Properties/>\n    <Set>\n        <Headers>\n          <Header name=\"X-CACHE-HIT\">{responsecache.ResponseCache.cachehit}</Header>\n          <Header name=\"X-CACHE-NAME\">{responsecache.ResponseCache.cachename}</Header>\n          <Header name=\"X-CACHE-KEY\">{responsecache.ResponseCache.cachekey}</Header>\n          <Header name=\"X-CACHE-INVALID-ENTRY\">{responsecache.ResponseCache.invalidentry}</Header>\n        </Headers>\n    </Set>\n    <IgnoreUnresolvedVariables>true</IgnoreUnresolvedVariables>\n    <AssignTo createNew=\"false\" transport=\"http\" type=\"response\"/>\n</AssignMessage>\n```\n\n----------------------------------------\n\nTITLE: Assigning Custom XML Response in Apigee Edge\nDESCRIPTION: This Assign Message policy creates a custom XML response using extracted variables. It demonstrates how to build a structured XML payload with dynamic content from previously extracted variables.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/learn-edge/extract-xml-payload/README.md#2025-04-23_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<AssignMessage name='AssignDirectionsPayload'>\n  <AssignTo createNew=\"false\" type=\"response\"/>\n  <Set>\n    <Payload contentType='application/xml'>\n        <root>\n            <status>{direction_info.status}</status>\n            <mode>{direction_info.travelmode}</mode>\n            <duration>{direction_info.duration}</duration>\n            <timeunit>{direction_info.timeunit}</timeunit>\n        </root>\n    </Payload>\n  </Set>\n  <IgnoreUnresolvedVariables>true</IgnoreUnresolvedVariables>\n  <DisplayName>Assign Directions Payload</DisplayName>\n</AssignMessage>\n```\n\n----------------------------------------\n\nTITLE: Attaching Verify API Key Policy to ProxyEndpoint in Apigee Edge\nDESCRIPTION: This XML snippet shows how the Verify API Key policy is attached to the proxy's ProxyEndpoint. It's placed in the Preflow, ensuring the API key is checked for each new request before any other processing occurs.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/edge-ux/basic-apikey-security/README.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ProxyEndpoint name=\"default\">\n  <PreFlow>\n    <Request>\n      <Step>\n        <Name>VerifyAPIKey</Name>\n      </Step>\n    </Request>\n  </PreFlow>\n  ...\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Error Response with AssignMessage Policy\nDESCRIPTION: Defines an AssignMessage policy that constructs a custom error response when an invalid API key is detected. Sets the response payload to a JSON error message, along with a 400 status code and BadRequest reason phrase.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/edge-ux/fault-handling-apikey/README.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<AssignMessage async=\"false\" continueOnError=\"false\" enabled=\"true\" name=\"InvalidApiKey\">\n    <DisplayName>Invalid ApiKey Message</DisplayName>\n    <Properties/>\n    <Set>\n      <Payload contentType=\"application/json\">\\{\"error\": \\{\"message\":\"{fault.name}\", \"detail\":\"Please provide valid API key in the apikey query parameter.}} </Payload>\n      <StatusCode>400</StatusCode>\n      <ReasonPhrase>BadRequest</ReasonPhrase>\n    </Set>\n    <IgnoreUnresolvedVariables>true</IgnoreUnresolvedVariables>\n    <AssignTo createNew=\"false\" transport=\"http\" type=\"response\"/>\n</AssignMessage>\n```\n\n----------------------------------------\n\nTITLE: Invoking the OAuth2 Token Verification API Proxy\nDESCRIPTION: Shell command to test the deployed API proxy. This script guides the user through the access token generation process before making a request to the protected resource.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/sample-proxies/oauth-verify-accesstoken/README.md#2025-04-23_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n$ sh invoke.sh\n```\n\n----------------------------------------\n\nTITLE: Configuring Target Endpoint PostFlow Response\nDESCRIPTION: XML configuration for the target endpoint's PostFlow that defines the sequence of policies to execute. This includes setting a sample response, parsing it with Extract Variables, and adding custom headers.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/learn-edge/extract-json-payload-2/README.md#2025-04-23_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<PostFlow name=\"PostFlow\">\n    <Request/>\n    <Response>\n        <Step>\n            <Name>AM-Set-Sample-Response</Name>\n        </Step>\n        <Step>\n            <Name>EV-Parse-Json-Response</Name>\n        </Step>   \n        <Step>\n            <Name>AM-Set-Custom-Response</Name>\n        </Step>       \n    </Response>\n</PostFlow>\n```\n\n----------------------------------------\n\nTITLE: Defining Quota Policy in Apigee Edge XML\nDESCRIPTION: This XML snippet defines a Quota policy that limits requests to 1 per minute. If more than one request is made within a minute, a fault is returned.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/edge-ux/enforce-quota-simple/README.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<Quota name=\"EnforceQuota\">\n      <DisplayName>Enforce Quota</DisplayName>\n      <FaultRules/>\n      <Properties/>\n      <Interval>1</Interval>\n      <TimeUnit>minute</TimeUnit>\n      <Allow count=\"1\"/>\n</Quota>\n```\n\n----------------------------------------\n\nTITLE: Configuring Webserver App Variables in XML\nDESCRIPTION: AssignMessage policy configuration for setting app credentials, environment variables, and domain settings in the webserver application.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/sample-proxies/oauth-advanced/README.md#2025-04-23_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<AssignMessage async=\"false\" continueOnError=\"false\" enabled=\"true\" name=\"SetConfigurationVariables\">\n    <DisplayName>SetConfigurationVariables</DisplayName>\n    <FaultRules/>\n    <Properties/>\n    <AssignVariable>\n        <Name>appKey</Name>\n        <Value>Substitute the Consumer key</Value>\n    </AssignVariable>\n    <AssignVariable>\n        <Name>appSecret</Name>\n        <Value>Substitute the Consumer secret</Value>\n    </AssignVariable>\n    <AssignVariable>\n        <Name>config.environment</Name>\n        <Value>Substitute your Edge environment (prod or test)</Value>\n    </AssignVariable>\n    <AssignVariable>\n        <Name>config.organization</Name>\n        <Value>Substitute your organization name on Edge</Value>\n    </AssignVariable>\n    <AssignVariable>\n        <Name>config.domain</Name>\n        <Value>apigee.net</Value>\n    </AssignVariable>\n    <AssignVariable>\n        <Name>config.protocol</Name>\n        <Value>https</Value>\n    </AssignVariable>\n    <IgnoreUnresolvedVariables>false</IgnoreUnresolvedVariables>\n</AssignMessage>\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Error Response with AssignMessage Policy in Apigee Edge\nDESCRIPTION: This AssignMessage policy creates a custom error response when an invalid API key is detected. It sets a JSON payload with a custom error message, a 400 status code, and a 'BadRequest' reason phrase that will be returned to the client.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/learn-edge/fault-handling-1/README.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<AssignMessage async=\"false\" continueOnError=\"false\" enabled=\"true\" name=\"InvalidApiKey\">\n    <DisplayName>Invalid ApiKey Message</DisplayName>\n    <Properties/>\n    <Set>\n        <Payload contentType=\"application/json\">\\{\"error\": \\{\"message\":\"{fault.name}\", \"detail\":\"Hello from Learn Edge: Please provide valid API key in the apikey query parameter.}} </Payload>\n        <StatusCode>400</StatusCode>\n        <ReasonPhrase>BadRequest</ReasonPhrase>\n    </Set>\n    <IgnoreUnresolvedVariables>true</IgnoreUnresolvedVariables>\n    <AssignTo createNew=\"false\" transport=\"http\" type=\"response\"/>\n</AssignMessage>\n```\n\n----------------------------------------\n\nTITLE: Assigning Custom Headers in Apigee Edge\nDESCRIPTION: This XML snippet defines an AssignMessage policy named 'AssignCustomHeaders' that sets custom headers x-firstName and x-lastName using the previously extracted variables. It operates on the response and ignores unresolved variables.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/learn-edge/extract-json-payload/README.md#2025-04-23_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<AssignMessage name=\"AssignCustomHeaders\">\n    <AssignTo createNew=\"false\" type=\"response\"/>\n    <IgnoreUnresolvedVariables>true</IgnoreUnresolvedVariables>\n    <Set>\n        <Headers>\n            <!-- Variables populated by parsing JSON response with an ExtractVariables policy -->\n            <Header name=\"x-firstName\">{mock.firstName}</Header>\n            <Header name=\"x-lastName\">{mock.lastName}</Header>\n        </Headers>\n    </Set>\n</AssignMessage>\n```\n\n----------------------------------------\n\nTITLE: Extracting JSON Data from Response in Apigee Edge\nDESCRIPTION: This XML snippet defines an ExtractVariables policy named 'ParseJsonResponse' that extracts firstName and lastName from a JSON payload using JSONPath. It uses a variable prefix 'mock' and ignores unresolved variables.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/learn-edge/extract-json-payload/README.md#2025-04-23_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<ExtractVariables name=\"ParseJsonResponse\">\n    <IgnoreUnresolvedVariables>true</IgnoreUnresolvedVariables>\n    <VariablePrefix>mock</VariablePrefix>\n    <JSONPayload>\n        <Variable name=\"firstName\">\n            <JSONPath>$.firstName</JSONPath>\n        </Variable>\n        <Variable name=\"lastName\">\n            <JSONPath>$.lastName</JSONPath>\n        </Variable>\n    </JSONPayload>\n</ExtractVariables>\n```\n\n----------------------------------------\n\nTITLE: Configuring Kerberos Credential Delegation Policy in XML\nDESCRIPTION: XML configuration for the Kerberos credential delegation policy that specifies the required properties including krb5Conf, loginConf, loginModule, and serverPrincipal. These properties define how the Kerberos authentication will be handled.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/sample-proxies/kerberos-credential-mediation/README.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<Properties>\n      <Property name=\"krb5Conf\">krb5.conf</Property>\n      <Property name=\"loginConf\">login.conf</Property>\n      <Property name=\"loginModule\">ServicePrincipalLoginContext</Property>\n      <Property name=\"serverPrincipal\">http@server-backend</Property>\n</Properties>\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic Routing with ProxyEndpoint XML in Apigee\nDESCRIPTION: This XML snippet defines the ProxyEndpoint configuration for dynamic routing. It uses route rules to direct requests to either Facebook or Twitter based on the 'routeTo' query parameter. If no parameter is provided, it defaults to Twitter.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/sample-proxies/dynamic-endpoint/README.md#2025-04-23_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<ProxyEndpoint name=\"default\">\n\t<HTTPProxyConnection>\n\t\t<BasePath>/dynamic-endpoint</BasePath>\n\t\t<VirtualHost>default</VirtualHost>\n\t</HTTPProxyConnection>\n\t<RouteRule name=\"fbroute\">\n\t\t<Condition>request.queryparam.routeTo = \"fb\"</Condition>\n\t\t<TargetEndpoint>facebook</TargetEndpoint>\n\t</RouteRule>\n\t<RouteRule name=\"twroute\">\n\t\t<Condition>request.queryparam.routeTo = \"tw\"</Condition>\n\t\t<TargetEndpoint>twitter</TargetEndpoint>\n\t</RouteRule>\n\t<RouteRule name=\"default\">\n\t\t<TargetEndpoint>twitter</TargetEndpoint>\n\t</RouteRule>\t\n</ProxyEndpoint>\n```\n\n----------------------------------------\n\nTITLE: Token Validation and API Services Flow Description\nDESCRIPTION: Markdown documentation outlining the token validation and API service call process, including prerequisites and setup instructions. Details the flow from token extraction to Advanced API Services interaction.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/sample-proxies/advanced-api-services/token-validate/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Advanced API Services Token Validation\n\nThis sample shows how to use the tokens generated by the \"token-gen\" sample in an API proxy\nthat utilizes both back-end services and the Advanced API Services data store.  In this sample,\na Gateway access token is validated, the Advanced API Services token is extracted, and a call\nis made to Advanced API Services as a target endpoint.\n\nThis sample exposes a single endpoint, \"/v1/datastore\", which implements a single resource that\nmakes calls to \"api.usergrid.com\".\n\nIn general, the following steps occur:\n\n1) The Authorization header is decoded to extract the access token.  If no access token is\n\tpresent, a 401 Unauthorized error is returned.\n\t\n2) The access token is validated by the gateway, and a 401 Unauthorized error is returned if\n\tthe access token is not valid.\n\t\n3) The Advanced API Services access token - which is stored as an attribute of the Gateway \n\ttoken - is extracted.\n\t\n4) The call to Advanced API Services is constructed and executed, and any error is returned \n\tto the calling application.\n```\n\n----------------------------------------\n\nTITLE: Iterating Response Headers with httpClient in JavaScript\nDESCRIPTION: JavaScript code that makes an HTTP GET request using httpClient, stores the response in a context variable, and iterates through response headers to create a formatted string. The code handles the asynchronous response and includes error checking.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/sample-proxies/iterate-headers/README.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar response = httpClient.get(\"http://mocktarget.apigee.net/json\");\n// set the pending request into a context variable\ncontext.setVariable('pendingResponse', response); \n\nvar headers = \"\";\n\nvar response = context.getVariable('pendingResponse');\nif (response) { // retrieve the pending request from the context variable \n    response.waitForComplete();\n    if (response.isSuccess()) {\n        for (var n in response.getResponse().headers) { \n            headers = headers + n + \" --> \" + response.getResponse().headers[n] + \"\\n\";\n        }\n    }\n    context.setVariable(\"response_headers\", headers);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Quota Policy in Apigee Edge\nDESCRIPTION: XML configuration for a Quota policy that references API product quota variables and applies quota restrictions based on API key identification.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/sample-proxies/apikey/README.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<Quota name=\"CheckQuota\"> \n  <Interval ref=\"verifyapikey.ValidateAPIKey.apiproduct.developer.quota.interval\"/>\n  <TimeUnit ref=\"verifyapikey.ValidateAPIKey.apiproduct.developer.quota.timeunit\"/>\n  <Allow countRef=\"verifyapikey.ValidateAPIKey.apiproduct.developer.quota.limit\"/>\n  <Identifier ref=\"request.queryparam.apikey\"/>\n</Quota>\n```\n\n----------------------------------------\n\nTITLE: Authorization Request for OAuth 2.0 Authorization Code Grant\nDESCRIPTION: HTTP GET request for initiating the OAuth 2.0 authorization code grant flow. It includes client_id, redirect_uri, scope, and state parameters.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/sample-proxies/oauth-login-app/README.md#2025-04-23_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nhttps://$org-$env.$api_domain/oauth/authorize?response_type=code&client_id=$consumerkey&redirect_uri=$callback&scope=READ&state=foobar\n```\n\n----------------------------------------\n\nTITLE: Implementing RaiseFault Policy for Custom Error Handling in Apigee Edge\nDESCRIPTION: This XML snippet defines a RaiseFault policy that generates a custom error message when triggered. It sets a 404 status code and provides a JSON payload with error details.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/learn-edge/service-callout-2/README.md#2025-04-23_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<RaiseFault async=\"false\" continueOnError=\"false\" enabled=\"true\" name=\"RF-RaiseCustomFault\">\n    <DisplayName>RF-RaiseCustomFault</DisplayName>\n    <Properties/>\n    <FaultResponse>\n        <Set>\n            <Payload contentType=\"application/json\">\\{&quot;error&quot;: \\{&quot;message&quot;:&quot;Page Not Found&quot;, &quot;details&quot;:&quot;Hello from Learn Edge! This is a custom message..}} </Payload>\n            <StatusCode>404</StatusCode>\n            <ReasonPhrase>Page not found.</ReasonPhrase>\n        </Set>\n    </FaultResponse>\n    <IgnoreUnresolvedVariables>true</IgnoreUnresolvedVariables>\n</RaiseFault>\n```\n\n----------------------------------------\n\nTITLE: Rewriting Target URL with JavaScript in Apigee Edge\nDESCRIPTION: JavaScript policy that constructs a new target URL for the Google Maps API by setting the target.url flow variable. It incorporates the previously extracted zip code as an address parameter.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/sample-proxies/target-reroute/README.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncontext.setVariable(\"target.url\", \"http://maps.googleapis.com/maps/api/geocode/json?address=\"+context.getVariable(\"LOCATION.zip\"));\n```\n\n----------------------------------------\n\nTITLE: Configuring Extract Variables Policy for JSON Parsing\nDESCRIPTION: XML configuration for an Extract Variables policy that demonstrates multiple techniques for extracting data from JSON. It includes extracting individual values, arrays, and querying based on parameters.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/learn-edge/extract-json-payload-2/README.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ExtractVariables name=\"EV-Parse-Json-Response\">\n    <IgnoreUnresolvedVariables>true</IgnoreUnresolvedVariables>\n    <JSONPayload>\n        <Variable name=\"mp_pod_name_val\">\n            <JSONPath>$.[0].name</JSONPath>            <!-- Returns first value pod1 -->\n        </Variable>\n        <Variable name=\"mp_pod_names\">\n            <JSONPath>$.[*].name</JSONPath>            <!-- Returns array [\"pod1\",\"pod2\"] -->\n        </Variable>\n        <Variable name=\"mp_pod_regions\">\n            <JSONPath>$.[*].region</JSONPath>          <!-- Returns array [\"us-east-1\",\"us-west-2\"] -->\n        </Variable>\n        <Variable name=\"desired_mp_pod_name\">\n            <JSONPath>$.[?(@.region=='{request.queryparam.region}')].name</JSONPath>             <!-- Returns specific value as array [\"pod1\"] -->\n        </Variable>\n        <Variable name=\"desired_mp_pod_name_val\">\n            <JSONPath>$.[?(@.region=='{request.queryparam.region}')].name[0]</JSONPath>             <!-- Returns specific value as string pod1 -->\n        </Variable>\n    </JSONPayload>\n</ExtractVariables>\n```\n\n----------------------------------------\n\nTITLE: Deploying Individual GraphQL Proxy Module Using Maven in Bash\nDESCRIPTION: Command to deploy a specific sub-module (graphql-proxy) independently using Maven. It requires specifying the Apigee organization, environment, username, and password.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/sample-proxies/graphql-sample/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd graphql-smp/graphql-proxy\nmvn install -Ptest -Dorg=<APIGEE_ORG> -Denv=<APIGEE_ENV> -Dusername=<APIGEE_USERNAME> -Dpassword=<APIGEE_PASSWORD>\n```\n\n----------------------------------------\n\nTITLE: Configuring AssignMessage Policy for Error Triggering in Apigee Edge\nDESCRIPTION: This XML snippet configures an AssignMessage policy to intentionally call a non-existent resource '/make-error', which will trigger a 404 error from the target service.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/learn-edge/service-callout-2/README.md#2025-04-23_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<AssignMessage name=\"AM-BuildRequest\">\n    <AssignTo createNew=\"true\" type=\"request\">myrequest</AssignTo>\n    <IgnoreUnresolvedVariables>false</IgnoreUnresolvedVariables>\n    <Set>\n        <Path>/make-error</Path>\n    </Set>\n    <AssignVariable>\n        <Name>target.copy.pathsuffix</Name>\n        <Value>false</Value> \n    </AssignVariable>\n</AssignMessage>\n```\n\n----------------------------------------\n\nTITLE: Implementing FaultRule for Invalid API Key in Apigee Edge Proxy\nDESCRIPTION: This XML configuration adds a FaultRule to the ProxyEndpoint that catches the InvalidApiKey error and executes the InvalidApiKey policy when this specific error occurs. The condition ensures the rule only triggers for this particular error type.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/learn-edge/fault-handling-1/README.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<ProxyEndpoint name=\"default\">\n  <FaultRules>\n    <FaultRule name=\"InvalidApiKey\">\n        <Step>\n            <Name>InvalidApiKey</Name>\n        </Step>\n        <Condition>(fault.name Matches \"InvalidApiKey\") </Condition>\n    </FaultRule>\n  </FaultRules>\n  ...\n```\n\n----------------------------------------\n\nTITLE: Configuring FaultRule for 404 Error Handling in Apigee Edge\nDESCRIPTION: This XML snippet defines a FaultRule that catches ExecutionFailed errors and triggers the RaiseFault policy when the target service returns a 404 status code.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/learn-edge/service-callout-2/README.md#2025-04-23_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<FaultRule name=\"SC-Error\">\n      <Condition>(fault.name Matches \"ExecutionFailed\") </Condition>\n      <Step>\n          <Name>RF-RaiseCustomFault</Name>\n          <Condition>(mockresponse.status.code = \"404\") </Condition>\n      </Step>\n  </FaultRule>\n```\n\n----------------------------------------\n\nTITLE: Configuring Extract Variables Policy in Apigee XML\nDESCRIPTION: This XML snippet configures an Extract Variables policy named 'EV-Path-Component' to extract a path component from the request URL and store it in a flow variable with the prefix 'urirequest'.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/samplets/Extract-Variables/docs/Extract-URI-Part.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<ExtractVariables name=\"EV-Path-Component\">\n  <Source>request</Source>\n  <URIPath>\n    <Pattern ignoreCase=\"true\">/resource1/{id}</Pattern>\n  </URIPath>\n  <VariablePrefix>urirequest</VariablePrefix>\n  <IgnoreUnresolvedVariables>true</IgnoreUnresolvedVariables>\n</ExtractVariables>\n```\n\n----------------------------------------\n\nTITLE: JSON Configuration for Scopes-to-Entitlements Mapping\nDESCRIPTION: JSON object representing the mapping of scopes to GraphQL entitlements. This configuration is stored in an Apigee KVM and used for authorization.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/sample-proxies/graphql-sample/README.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"instrospect\": [\n    \"query.__schema.**\"\n  ],\n  \"reader\": [\n    \"query.__schema.**\",\n    \"query.resorts.**\"\n  ],\n  \"site:admin\": [\n    \"query.__schema.**\",\n    \"query.resorts.**\",\n    \"mutation.resorts.create.**\",\n    \"mutation.resorts.delete.**\",\n    \"mutation.resorts.update.**\"\n  ],\n  \"resort:admin\": [\n    \"query.__schema.**\",\n    \"query.resorts.**\",\n    \"mutation.resorts.update.**\",\n    \"mutation.resorts.update.lifts.create.**\",\n    \"mutation.resorts.update.lifts.update.**\",\n    \"mutation.resorts.update.lifts.delete.**\",\n    \"mutation.resorts.update.trails.create.**\",\n    \"mutation.resorts.update.trails.update.**\",\n    \"mutation.resorts.update.trails.delete.**\"\n  ],\n  \"resort:manager\": [\n    \"query.__schema.**\",\n    \"query.resorts.**\",\n    \"mutation.resorts.update.resort.**\",\n    \"mutation.resorts.update.lifts.update.**\",\n    \"mutation.resorts.update.trails.update.**\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Fault Rules in Target Endpoint in Apigee Edge\nDESCRIPTION: Definition of three fault rules in the Target Endpoint that check for specific query parameter values. When an error occurs in the Target Endpoint, these rules are evaluated from top to bottom, with the first rule that evaluates to true being executed.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/learn-edge/fault-handling-2/README.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<FaultRules>\n    <FaultRule name=\"BadParam-X\">\n        <Step>\n            <Name>CatchBadParam-X</Name>\n        </Step>\n        <Condition>(queryparam.X Matches \"true\") </Condition>\n    </FaultRule>\n    <FaultRule name=\"BadParam-Y\">\n        <Step>\n            <Name>CatchBadParam-Y</Name>\n        </Step>\n        <Condition>(queryparam.Y Matches \"true\") </Condition>\n    </FaultRule>\n     <FaultRule name=\"BadParam-Z\">\n        <Step>\n            <Name>CatchBadParam-Z</Name>\n        </Step>\n        <Condition>(queryparam.Z Matches \"true\") </Condition>\n    </FaultRule>\n</FaultRules>\n```\n\n----------------------------------------\n\nTITLE: Extracting XML Data with XPath in Apigee Edge\nDESCRIPTION: This Extract Variables policy extracts XML data from the request content using XPath notation. It demonstrates namespace declaration and extraction of multiple variables from different XML elements and attributes.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/learn-edge/extract-xml-payload/README.md#2025-04-23_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<ExtractVariables name=\"ExtractDirectionInfo\">\n    <Source>request.content</Source>\n    <VariablePrefix>direction_info</VariablePrefix>\n    <XMLPayload>\n        <Namespaces>\n            <Namespace prefix=\"dir\">urn:43BFF88D-D204-4427-B6BA-140AF393142F</Namespace>\n        </Namespaces>\n        <Variable name=\"status\" type=\"string\">\n            <XPath>/dir:Directions/dir:status/text()</XPath>\n        </Variable>\n        <Variable name=\"travelmode\" type=\"string\">\n            <XPath>/dir:Directions/dir:route/dir:leg/dir:step/@mode</XPath>\n        </Variable>\n        <Variable name=\"duration\" type=\"string\">\n            <XPath>/dir:Directions/dir:route/dir:leg/dir:step/dir:duration/dir:value/text()</XPath>\n        </Variable>\n        <Variable name=\"timeunit\" type=\"string\">\n            <XPath>/dir:Directions/dir:route/dir:leg/dir:step/dir:duration/dir:text/text()</XPath>\n        </Variable>\n    </XMLPayload>\n    <DisplayName>Extract Direction Info</DisplayName>\n</ExtractVariables>\n```\n\n----------------------------------------\n\nTITLE: API Proxy File Structure\nDESCRIPTION: The basic directory structure required for an Apigee Edge API proxy, showing the main folders needed for proxy configuration, targets, policies and resources.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/learn-edge/simplest-proxy/README.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n/apiproxy\n   /proxies\n   /targets\n   /policies\n   /resources\n   proxyname.xml\n```\n\n----------------------------------------\n\nTITLE: OAuth Client Credentials Response Format\nDESCRIPTION: Example response from a successful client credentials access token request. The response includes the access token, token expiration, scopes, and other metadata about the request and the client application.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/sample-proxies/oauth-client-credentials/README.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncurl -H \"Authorization: Basic <base64-encoded key:secret>\" https://example-test.apigee.net/oauth/accesstoken?grant_type=client_credentials \n\nAccessToken Response: \n {\n  \"issued_at\" : \"1416157639014\",\n  \"application_name\" : \"e49ef95f-6d32-4062-ac9a-3beea62ca922\",\n  \"scope\" : \"\",\n  \"status\" : \"approved\",\n  \"api_product_list\" : \"[Test App product]\",\n  \"expires_in\" : \"3599\",\n  \"developer.email\" : \"testdev@example.com\",\n  \"organization_id\" : \"0\",\n  \"token_type\" : \"BearerToken\",\n  \"client_id\" : \"kWocGgKENrdWRT0jq4l0F0ACnPAQsD3\",\n  \"access_token\" : \"WNSnwquKualbgnGeAK0EXGqzO3A\",\n  \"organization_name\" : \"example\",\n  \"refresh_token_expires_in\" : \"0\",\n  \"refresh_count\" : \"0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting JSON Response Data with ExtractVariables Policy\nDESCRIPTION: XML configuration for ExtractVariables policy that extracts firstName and lastName values from a JSON response using JSONPath expressions. The policy uses a variable prefix 'mock' and ignores unresolved variables.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/edge-ux/extract-json-payload/README.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<ExtractVariables name=\"ParseJsonResponse\">\n    <IgnoreUnresolvedVariables>true</IgnoreUnresolvedVariables>\n    <VariablePrefix>mock</VariablePrefix>\n    <JSONPayload>\n        <Variable name=\"firstName\">\n            <JSONPath>$.firstName</JSONPath>\n        </Variable>\n        <Variable name=\"lastName\">\n            <JSONPath>$.lastName</JSONPath>\n        </Variable>\n    </JSONPayload>\n</ExtractVariables>\n```\n\n----------------------------------------\n\nTITLE: Implementing Pattern Matching in Apigee Proxy PreFlow Conditions\nDESCRIPTION: XML configuration that defines a conditional statement in an Apigee proxy PreFlow. This snippet shows how to set up a condition that uses pattern matching on the proxy path suffix, executing the 'SomePolicy' only when the condition is true.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/sample-proxies/condition-pattern-matching/README.md#2025-04-23_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n    <PreFlow name=\"PreFlow\">\n        <Request>\n            <Step>\n                <Condition>(proxy.pathsuffix Matches \"/cat\")</Condition>\n                <Name>SomePolicy</Name>\n            </Step>\n        </Request>\n        <Response/>\n    </PreFlow>\n```\n\n----------------------------------------\n\nTITLE: Deploy and Test Apigee Edge Proxy\nDESCRIPTION: Shell commands to deploy and test a basic API proxy on Apigee Edge. The invoke.sh script makes a curl request to test the deployed proxy endpoint.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/learn-edge/simplest-proxy/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl http://<your org name>-<your environment>.apigee.net/v1/learn-edge\n```\n\n----------------------------------------\n\nTITLE: Python Script for Setting Response Header\nDESCRIPTION: Python script that sets a custom response header 'X-Apigee-Demo-target' using the target URL flow variable. The script demonstrates how to access flow variables and modify response headers in Apigee Edge.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/sample-proxies/simple-python/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nresponse.setVariable(\"header.X-Apigee-Demo-target\", flow.getVariable(\"target.url\"));\nprint 'Reached the script & assigned header variable'\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Response Headers with AssignMessage Policy\nDESCRIPTION: XML configuration for an AssignMessage policy that sets custom response headers containing the extracted JSON values and creates a custom JSON response payload with variable substitution.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/learn-edge/extract-json-payload-2/README.md#2025-04-23_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<AssignMessage name=\"AM-Set-Custom-Response\">\n    <AssignTo createNew=\"false\" type=\"response\"/>\n    <IgnoreUnresolvedVariables>true</IgnoreUnresolvedVariables>\n    <Set>\n        <Headers>\n            <!-- Variables populated by parsing JSON response with an ExtractVariables policy -->       \n            <Header name=\"x-first-pod-name-as-string\">{desired_mp_pod_name_val}</Header>\n            <Header name=\"x-all-pod-names-as-array\">{mp_pod_names}</Header>\n            <Header name=\"x-all-region-names-as-array\">{mp_pod_regions}</Header>\n            <Header name=\"x-queried-pod-name-as-array\">{desired_mp_pod_name}</Header>\n            <Header name=\"x-queried-pod-name-as-string\">{mp_pod_name_val}</Header>            \n        </Headers>\n    </Set>\n    <Set>\n        <Payload contentType=\"application/json\" variablePrefix=\"@\" variableSuffix=\"#\">\n                {\"name\":\"@request.queryparam.region#\", \"region\":\"@desired_mp_pod_name_val#\"}\n        </Payload>\n    </Set>\n</AssignMessage>\n```\n\n----------------------------------------\n\nTITLE: Generating OAuth Access Token in Performance Proxy\nDESCRIPTION: Curl command to test the OAuth token generation functionality in the deployed proxy.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/perf-proxies/README.md#2025-04-23_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ncurl -v -X POST 'https://YOUR_ENV_GROUP_HOSTNAME/v1/perf/accesstoken?grant_type=client_credentials' -d \"client_id=${yourapikey}&client_secret=${yourapisecret}\"\n```\n\n----------------------------------------\n\nTITLE: Success Response from Apigee Pattern Matching Test\nDESCRIPTION: Example response returned when a condition succeeds in the pattern matching test. The response includes the path suffix that matched the condition.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/sample-proxies/condition-pattern-matching/README.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n  Condition Succeeded for proxy.pathsuffix: /animals/cats/wild/african/spotted\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Headers with AssignMessage Policy\nDESCRIPTION: XML configuration for AssignMessage policy that creates custom response headers using the previously extracted variables. The policy assigns the extracted firstName and lastName values to x-firstName and x-lastName headers respectively.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/edge-ux/extract-json-payload/README.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<AssignMessage name=\"AssignCustomHeaders\">\n    <AssignTo createNew=\"false\" type=\"response\"/>\n    <IgnoreUnresolvedVariables>true</IgnoreUnresolvedVariables>\n    <Set>\n        <Headers>\n            <!-- Variables populated by parsing JSON response with an ExtractVariables policy -->\n            <Header name=\"x-firstName\">{mock.firstName}</Header>\n            <Header name=\"x-lastName\">{mock.lastName}</Header>\n        </Headers>\n    </Set>\n</AssignMessage>\n```\n\n----------------------------------------\n\nTITLE: Validating OAuth Access Token in Performance Proxy\nDESCRIPTION: Curl command to test the OAuth token validation functionality in the deployed proxy.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/perf-proxies/README.md#2025-04-23_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ncurl -v -H 'Authorization: Bearer $access_token' 'https://YOUR_ENV_GROUP_HOSTNAME/v1/perf?test=oauth'\n```\n\n----------------------------------------\n\nTITLE: Paginating Cached Responses with XSLT in Apigee\nDESCRIPTION: This XSLT stylesheet is used to paginate the cached response from the restaurant_locator proxy. It takes 'offset' and 'limit' parameters to extract a subset of restaurant data from the XML response.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/sample-proxies/pagination/README.md#2025-04-23_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<xsl:stylesheet xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" version=\"1.0\">\n        <xsl:output method=\"xml\" version=\"1.0\" encoding=\"UTF-8\" />\n        <xsl:param name=\"offset\" select=\"offset\"/>\n        <xsl:param name=\"limit\" select=\"limit\"/>\n        <xsl:template match=\"/\">\n            <Restaurants>\n                <xsl:for-each select=\"/RestaurantLocator/Restaurant\">\n                 <xsl:if test=\"position() &lt; number($limit+$offset) and position() &gt; number($offset)-1\">\n                     <xsl:copy-of select=\".\"/>\n                 </xsl:if>\n                   </xsl:for-each>\n           </Restaurants>\n        </xsl:template>\n</xsl:stylesheet>\n```\n\n----------------------------------------\n\nTITLE: Testing JWT Token Generation and Validation in Performance Proxy\nDESCRIPTION: Curl command to test the JWT token generation and validation in the deployed proxy.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/perf-proxies/README.md#2025-04-23_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\ncurl -v 'https://YOUR_ENV_GROUP_HOSTNAME/v1/perf?test=gvjwt&subject=abc'\n```\n\n----------------------------------------\n\nTITLE: Running the Apigee Organization Snapshot Tool in Bash\nDESCRIPTION: This command runs the apigee-getorg.sh script with optional parameters for admin email, management server, organization name, and output directory. It retrieves organization settings from Apigee.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/tools/org-snapshot/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./apigee-getorg.sh -e {admin-email} -s {mgmtserver} -o {org-name} -d {bundle-loc}\n```\n\n----------------------------------------\n\nTITLE: Attaching Quota Policy in ProxyEndpoint\nDESCRIPTION: This XML snippet shows how to attach the EnforceQuota policy to the ProxyEndpoint's Preflow. It is placed after the VerifyAPIKey policy to ensure the necessary flow variables are set before the Quota policy executes.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/learn-edge/quota-1/README.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ProxyEndpoint name=\"default\">\n  <PreFlow>\n    <Request>\n      <Step>\n        <Name>VerifyAPIKey</Name>\n      </Step>\n      <Step>\n        <Name>EnforceQuota</Name>\n      </Step>\n    </Request>\n  </PreFlow>\n  ...\n```\n\n----------------------------------------\n\nTITLE: Retrieving Asynchronous Response with JavaScript in Apigee\nDESCRIPTION: Retrieves the previously initiated HTTP request from the session, waits for it to complete with a timeout, and then accesses the response. This demonstrates the second part of the async pattern where results are collected.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/sample-proxies/async-callout/README.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar exchange = context.session['paloAlto'];\nexchange.waitForComplete(1000);\nvar resp = exchange.getResponse();\n```\n\n----------------------------------------\n\nTITLE: Generating JWT Access Token Using OAuth in Performance Proxy\nDESCRIPTION: Curl command to test the JWT access token generation using OAuth in the deployed proxy.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/perf-proxies/README.md#2025-04-23_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\ncurl -v -X POST 'https://YOUR_ENV_GROUP_HOSTNAME/v1/perf/jwtAccessToken?grant_type=password' -d 'client_id=${yourapikey}&client_secret=${yourapisecret}&username=username_a&password=password_a'\n```\n\n----------------------------------------\n\nTITLE: Setting Callback URL in Webserver App XML\nDESCRIPTION: XML configuration for the callback URL in webserver-app.xml, which must match the environment-specific endpoint.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/sample-proxies/oauth-advanced/README.md#2025-04-23_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<CallbackUrl>https://org-env.apigee.net/web/callback<CallbackUrl>\n```\n\n----------------------------------------\n\nTITLE: Deploying Node.js Proxy to Apigee using apigeetool\nDESCRIPTION: This command uses apigeetool to deploy the Node.js proxy to Apigee. It requires a valid token and specifies the organization, environment, and API name.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/doc-samples/hosted-targets/node-hosted-express/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nget_token && apigeetool deployproxy \\\n-o <apigee org> \\\n-e <apigee env> \\\n--json \\\n--token \"$(< ~/.sso-cli/valid_token.dat)\" \\\n--api node-hosted-express \\\n--directory .\n```\n\n----------------------------------------\n\nTITLE: Verifying JWT Access Token Using OAuth in Performance Proxy\nDESCRIPTION: Curl command to test the JWT access token verification using OAuth in the deployed proxy.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/perf-proxies/README.md#2025-04-23_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\ncurl -v -H 'Authorization: Bearer $access_token' https://YOUR_ENV_GROUP_HOSTNAME/v1/perf/?test=verifyJwtAccessToken'\n```\n\n----------------------------------------\n\nTITLE: Making API Request to Search and Translate Tweets\nDESCRIPTION: Example cURL request to the API endpoint that searches for tweets in Spanish and translates them, showing the response format with original and translated text.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/sample-proxies/outbound-oauth/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -v \"http://demo-prod.apigee.net/outbound-oauth/search.json?lang=es&q=bicycle\"\n```\n\n----------------------------------------\n\nTITLE: Attaching ResponseCache Policy to TargetEndpoint PostFlow in Apigee Edge (XML)\nDESCRIPTION: This XML snippet shows how to attach the ResponseCache policy to the TargetEndpoint's PostFlow response path, which executes after the response comes back from the target.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/learn-edge/response-cache-1/README.md#2025-04-23_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<TargetEndpoint name=\"default\">\n    <PostFlow name=\"PostFlow\">\n        <Request/>\n        <Response>\n            <Step>\n                <Name>ResponseCache</Name>\n            </Step>\n        </Response>\n    </PostFlow>\n  ...\n```\n\n----------------------------------------\n\nTITLE: Testing Service Callout in Performance Proxy\nDESCRIPTION: Curl command to test the service callout functionality in the deployed proxy.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/perf-proxies/README.md#2025-04-23_snippet_23\n\nLANGUAGE: shell\nCODE:\n```\ncurl -v 'https://YOUR_ENV_GROUP_HOSTNAME/v1/perf/?test=sc'\n```\n\n----------------------------------------\n\nTITLE: Testing Monetization Limits Check in Performance Proxy\nDESCRIPTION: Curl command to test the monetization limits check policy in the deployed proxy.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/perf-proxies/README.md#2025-04-23_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\ncurl -v 'https://YOUR_ENV_GROUP_HOSTNAME/v1/perf/?test=monetizationlimitscheck&apikey=${yourapikey}'\n```\n\n----------------------------------------\n\nTITLE: Environment Configuration Path in Apigee Setup\nDESCRIPTION: File path reference for the environment configuration script that needs to be modified with organization, username and environment values.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/learn-edge/provisioning/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n../setenv.sh\n```\n\n----------------------------------------\n\nTITLE: Testing XSLT Transformation in Performance Proxy\nDESCRIPTION: Curl command to test the XSLT transformation functionality in the deployed proxy.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/perf-proxies/README.md#2025-04-23_snippet_22\n\nLANGUAGE: shell\nCODE:\n```\ncurl -v 'https://YOUR_ENV_GROUP_HOSTNAME/v1/perf/?test=xslt'\n```\n\n----------------------------------------\n\nTITLE: Testing Raise Fault Policy in Performance Proxy\nDESCRIPTION: Curl command to test the raise fault policy in the deployed proxy.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/perf-proxies/README.md#2025-04-23_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\ncurl -v 'https://YOUR_ENV_GROUP_HOSTNAME/v1/perf/?test=raisefault'\n```\n\n----------------------------------------\n\nTITLE: Configuring RouteRule in Apigee Edge XML\nDESCRIPTION: XML configuration for the RouteRule element that connects the proxy to a target endpoint. The RouteRule references a TargetEndpoint named 'default'.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/learn-edge/proxy-to-a-target/README.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<RouteRule name=\"default\">\n        <!-- This connects our proxy to the target defined in apiproxy/targets/default.xml -->\n        <TargetEndpoint>default</TargetEndpoint>\n   </RouteRule>\n```\n\n----------------------------------------\n\nTITLE: Client Credentials Flow Request for OAuth 2.0\nDESCRIPTION: HTTP POST request for the OAuth 2.0 client credentials flow. It requires Basic HTTP Authentication and includes the grant_type parameter.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/sample-proxies/oauth-login-app/README.md#2025-04-23_snippet_8\n\nLANGUAGE: http\nCODE:\n```\nPOST https://$org-$env.$api_domain/oauth/token\nAuthorization: Basic {base64_encoded_client_id_and_secret}\nContent-Type: application/x-www-form-urlencoded\n\ngrant_type=client_credentials\n```\n\n----------------------------------------\n\nTITLE: Testing Distributed Quota in Performance Proxy\nDESCRIPTION: Curl command to test the distributed quota functionality in the deployed proxy.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/perf-proxies/README.md#2025-04-23_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\ncurl -v 'https://YOUR_ENV_GROUP_HOSTNAME/v1/perf?test=test=distributed-quota&quota=id-1'\n\ncurl -v 'https://YOUR_ENV_GROUP_HOSTNAME/v1/perf?test=synchronous-distributed-quota&quota=id-1'\n```\n\n----------------------------------------\n\nTITLE: Testing GraphQL Parsing in Performance Proxy\nDESCRIPTION: Curl command to test the GraphQL parsing functionality in the deployed proxy.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/perf-proxies/README.md#2025-04-23_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\ncurl -v -X POST -H 'Content-Type: application/graphql' 'https://YOUR_ENV_GROUP_HOSTNAME/v1/perf/?test=graphql' --data-raw  'query PROJECTS_EDGES($filters_1: FiltersArgument) { projects { hits(filters: $filters_1) { total  }  } }'\n```\n\n----------------------------------------\n\nTITLE: Deployment Shell Command\nDESCRIPTION: Shell command to deploy the API proxy to Apigee, using the deploy.sh script after configuring environment variables.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/doc-samples/javascript-mashup-cookbook/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ sh deploy.sh\n```\n\n----------------------------------------\n\nTITLE: Testing KeyValueMap Operations in Performance Proxy\nDESCRIPTION: Curl command to test the KVM get and put operations in the deployed proxy.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/perf-proxies/README.md#2025-04-23_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\ncurl -v 'https://YOUR_ENV_GROUP_HOSTNAME/v1/perf?test=get-put-kvm'\n```\n\n----------------------------------------\n\nTITLE: Testing Assign Message Policy in Performance Proxy\nDESCRIPTION: Curl command to test the assign message policy in the deployed proxy.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/perf-proxies/README.md#2025-04-23_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\ncurl -v 'https://YOUR_ENV_GROUP_HOSTNAME/v1/perf/?test=assignmessage'\n```\n\n----------------------------------------\n\nTITLE: Sample GraphQL Query for Resorts\nDESCRIPTION: Example GraphQL query to retrieve resort IDs and names. This query demonstrates the structure of a simple GraphQL request.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/sample-proxies/graphql-sample/README.md#2025-04-23_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  resorts {\n    id,\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Extract Variables Policy for Query Parameter Parsing in Apigee XML\nDESCRIPTION: This XML configuration for the Extract Variables policy extracts part of the 'code' query parameter value, ignoring the 'DBN' prefix, and stores it in the 'queryinfo.dbncode' flow variable.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/samplets/Extract-Variables/docs/Extract-Query-Param.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<ExtractVariables name=\"EV-Query-Param\">\n  <Source>request</Source>\n  <QueryParam name=\"code\">\n    <Pattern ignoreCase=\"true\">DBN{dbncode}</Pattern>\n  </QueryParam>\n  <VariablePrefix>queryinfo</VariablePrefix>\n  <IgnoreUnresolvedVariables>true</IgnoreUnresolvedVariables>\n</ExtractVariables>\n```\n\n----------------------------------------\n\nTITLE: Testing Spike Arrest in Performance Proxy\nDESCRIPTION: Curl command to test the spike arrest functionality in the deployed proxy.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/perf-proxies/README.md#2025-04-23_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ncurl -v 'https://YOUR_ENV_GROUP_HOSTNAME/v1/perf?test=spikearrest'\n```\n\n----------------------------------------\n\nTITLE: Testing Flow Callout in Performance Proxy\nDESCRIPTION: Curl command to test the flow callout functionality in the deployed proxy.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/perf-proxies/README.md#2025-04-23_snippet_24\n\nLANGUAGE: shell\nCODE:\n```\ncurl -v 'https://YOUR_ENV_GROUP_HOSTNAME/v1/perf/?test=flowcallout'\n```\n\n----------------------------------------\n\nTITLE: Deploying OAuth Sample to Apigee\nDESCRIPTION: Shell command to deploy the OAuth sample project to Apigee environment\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/sample-proxies/oauth10a-3legged/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ sh deploy.sh\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Output in Apigee Edge XML to JSON Transformation\nDESCRIPTION: This snippet demonstrates the JSON format of the data after processing by the XML to JSON policy.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/sample-proxies/xmltojson/README.md#2025-04-23_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\"root\":{\"city\":\"San Jose\",\"firstName\":\"John\",\"lastName\":\"Doe\",\"state\":\"CA\"}}\n```\n\n----------------------------------------\n\nTITLE: Testing Null Target in Performance Proxy\nDESCRIPTION: Curl command to test the null target functionality in the deployed proxy.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/perf-proxies/README.md#2025-04-23_snippet_26\n\nLANGUAGE: shell\nCODE:\n```\ncurl -v 'https://YOUR_ENV_GROUP_HOSTNAME/v1/perf/?test=nulltarget'\n```\n\n----------------------------------------\n\nTITLE: Configuring JavaScript Policy with Dependencies in Apigee Edge\nDESCRIPTION: XML configuration showing how to include multiple JavaScript dependencies in an Apigee Edge JavaScript policy. The configuration loads CryptoJS library files for UTF-16 and Base64 encoding along with the main script.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/sample-proxies/base64encoder/README.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n    <Javascript timeLimit=\"200\" name=\"EncodeAuthHeader\">\n        <DisplayName>EncodeAuthHeader</DisplayName>\n        <IncludeURL>jsc://core-min.js</IncludeURL>\n        <IncludeURL>jsc://enc-utf16-min.js</IncludeURL>\n        <IncludeURL>jsc://enc-base64-min.js</IncludeURL>\n        <ResourceURL>jsc://encodeAuthHeader.js</ResourceURL>\n    </Javascript>\n```\n\n----------------------------------------\n\nTITLE: Transformed REST API Response in JSON\nDESCRIPTION: Shows how the Firestore data is transformed into a more REST-friendly structure by the proxy. This format is easier for clients like AppSheet to consume, with flattened key-value pairs and simplified data types.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/tutorial-demos/firestore-demo/README.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\"id\": \"8ebb59f9\",\n\"funny\": true,\n\"text\": \"What do you call a fish with 3 eyes?\",\n\"imagePath\": \"https://dakiniland.files.wordpress.com/2011/05/102-0907085235-simpsons-mutant-fish-blinky.jpg\",\n\"timestamp\": \"2020-10-08T13:05:29Z\",\n\"punchline\": \"A fiiish.\",\n\"location\": \"29.987294, -39.6875\"\n}\n```\n\n----------------------------------------\n\nTITLE: API Provider Login Page Redirection for OAuth 2.0\nDESCRIPTION: URL for redirecting to the API provider's login page during OAuth 2.0 flow. It includes client_id, response_type, and scope parameters.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/sample-proxies/oauth-login-app/README.md#2025-04-23_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nhttps://$org-$env.$api_domain/oauth/samplelogingpage?client_id={request.queryparam.client_id}&response_type={request.queryparam.response_type}&scope={request.queryparam.scope}\n```\n\n----------------------------------------\n\nTITLE: Undeploying a Hosted Function from Apigee\nDESCRIPTION: A bash command for undeploying a previously deployed Node.js Hosted Function from Apigee. It requires specifying the organization, environment, and revision number.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/doc-samples/hosted-targets/node-hosted-custom-deps/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nget_token && apigeetool undeploy \\\n-o <apigee org> \\\n-e <apigee env> \\\n--json \\\n--token \"$(< ~/.sso-cli/valid_token.dat)\" \\\n--api hosted-hello-conversion \\\n--revision <revision to undeploy e.g 1>\n```\n\n----------------------------------------\n\nTITLE: Quota Violation Error Response\nDESCRIPTION: Example JSON error response when quota limit is exceeded.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/sample-proxies/apikey/README.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\"fault\":{\"faultstring\":\"Rate limit quota violation. Quota limit  exceeded. Identifier : G8M6kx6zSnAERwvMSmmUvzXs460G7k2oN\",\"detail\":{\"errorcode\":\"policies.ratelimit.QuotaViolation\"}}}\n```\n\n----------------------------------------\n\nTITLE: Invoking Paginated API with cURL in Apigee\nDESCRIPTION: This cURL command demonstrates how to invoke the paginated API endpoint. It includes 'offset' and 'limit' query parameters to control the pagination of results.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/sample-proxies/pagination/README.md#2025-04-23_snippet_1\n\nLANGUAGE: cURL\nCODE:\n```\ncurl -v http://{org}-{env}.apigee.net/pagination?\"offset=1&limit=2\"\n```\n\n----------------------------------------\n\nTITLE: Attaching ResponseCache Policy to ProxyEndpoint PreFlow in Apigee Edge (XML)\nDESCRIPTION: This XML code shows how to attach the ResponseCache policy to the ProxyEndpoint's PreFlow request path, executing after the VerifyAPIKey policy.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/learn-edge/response-cache-1/README.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<PreFlow>\n    <Request>\n      <Step>\n        <Name>VerifyAPIKey</Name>\n      </Step>\n      <Step>\n        <Name>ResponseCache</Name>\n      </Step>\n    </Request>\n</PreFlow>\n...\n```\n\n----------------------------------------\n\nTITLE: Testing the Local Node.js Express Application\nDESCRIPTION: These curl commands test the local application by sending GET requests to different endpoints and displaying the JSON responses.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/doc-samples/hosted-targets/node-hosted-express/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://localhost:8081\n{\"hello\":\"Hello World!\"}\n\ncurl http://localhost:8081/hello/user\n{\"hello\":\"hello user\"}\n```\n\n----------------------------------------\n\nTITLE: Accessing Quota Variables in Apigee Edge\nDESCRIPTION: Example of flow variables that are populated when an API key is verified with quota settings of 10 requests per second.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/sample-proxies/apikey/README.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nverifyapikey.VerifyKey.apiproduct.developer.quota.limit = 10\nverifyapikey.VerifyKey.apiproduct.developer.quota.interval = 1\nverifyapikey.VerifyKey.apiproduct.developer.quota.timeunit = second\n```\n\n----------------------------------------\n\nTITLE: Deploying the OAuth2 Token Verification API Proxy\nDESCRIPTION: Shell command to deploy the API proxy to Apigee. This command should be run after configuring the environment settings.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/sample-proxies/oauth-verify-accesstoken/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ sh deploy.sh\n```\n\n----------------------------------------\n\nTITLE: Sample HTTP Response with Base64 Encoded Credentials\nDESCRIPTION: Example HTTP response showing the output of the base64 encoding operation, where the encoded credentials are returned in a custom header X-Encoded-Credentials.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/sample-proxies/base64encoder/README.md#2025-04-23_snippet_1\n\nLANGUAGE: http\nCODE:\n```\n    HTTP/1.1 200 OK\n    User-Agent: curl/7.37.1\n    Host: docs-test.apigee.net\n    Accept: */*\n    X-Encoded-Credentials: Basic TXlVc2VyTmFtZTpNeVBhc3N3b3Jk\n    Content-Length: 0\n    Connection: keep-alive\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response from Tweet Translation API\nDESCRIPTION: Sample JSON response showing the structure of translated tweet data including original and translated text, user information, and metadata.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/sample-proxies/outbound-oauth/README.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"completed_in\": 0.012,\n    \"max_id\": 268099561782931460,\n    \"max_id_str\": \"268099561782931457\",\n    \"next_page\": \"?page=2&max_id=268099561782931457&q=bicicleta&lang=es\",\n    \"page\": 1,\n    \"query\": \"bicicleta\",\n    \"refresh_url\": \"?since_id=268099561782931457&q=bicicleta&lang=es\",\n    \"results\": [{\n        \"created_at\": \"Mon, 12 Nov 2012 21:14:51 +0000\",\n        \"from_user\": \"Maureira10\",\n        \"from_user_id\": 198397428,\n        \"from_user_id_str\": \"198397428\",\n        \"from_user_name\": \"Álvaro Maureira \",\n        \"geo\": null,\n        \"id\": 268099561782931460,\n        \"id_str\": \"268099561782931457\",\n        \"iso_language_code\": \"es\",\n        \"metadata\": {\n            \"result_type\": \"recent\"\n        },\n        \"profile_image_url\": \"http://a0.twimg.com/profile_images/2632871896/80a1fbf2075c9f0e8630aeb5b8bfcb66_normal.jpeg\",\n        \"profile_image_url_https\": \"https://si0.twimg.com/profile_images/2632871896/80a1fbf2075c9f0e8630aeb5b8bfcb66_normal.jpeg\",\n        \"source\": \"&lt;a href=&quot;http://twitter.com/download/iphone&quot;&gt;Twitter for iPhone&lt;/a&gt;\",\n        \"text\": \"I thought it was not good idea to exit at noon at bicycle to 14. I feel like the balls!\",\n        \"to_user\": null,\n        \"to_user_id\": 0,\n        \"to_user_id_str\": \"0\",\n        \"to_user_name\": null,\n        \"text_orig\": \"Creo que NO fue buena idea salir al medio día en bicicleta al 14. Me siento como las pelotas!\"\n    }\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response Structure\nDESCRIPTION: Example JSON response payload that contains pod information with name and region properties. This represents the data structure that will be queried in the example.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/learn-edge/extract-json-payload-2/README.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"name\" : \"pod1\",\n    \"region\" : \"us-east-1\"\n  }, {\n    \"name\" : \"pod2\",\n    \"region\" : \"us-west-2\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Testing JavaScript Policy in Performance Proxy\nDESCRIPTION: Curl command to test the JavaScript policy execution in the deployed proxy.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/perf-proxies/README.md#2025-04-23_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\ncurl -v 'https://YOUR_ENV_GROUP_HOSTNAME/v1/perf/?test=jsheader'\n```\n\n----------------------------------------\n\nTITLE: Demonstrating API Endpoints in Markdown\nDESCRIPTION: This code block lists the available endpoints and their responses for the 'helloworld' API proxy. It includes the base path and various resource paths that return different types of responses.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/default-proxies/helloworld/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* The API proxy BasePath (`/v0/hello`), which maps directly to `http://mocktarget.apigee.net`, returns `Hello, Guest!`.\n* `/user` - Returns `Hello, Guest!`\n* `/user?user=your_name` - Returns a customized greeting.\n* `/iloveapis` - Returns `<H2>I <3 APIs</H2>`\n* `/ip` - Returns the client IP address as JSON.\n* `/xml` - Returns a sample XML response.\n* `/json` - Returns a sample JSON response.\n* `/echo` - Returns request headers and the request body as JSON.\n* `/help` - Returns a help page of available resources in HTML.\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Node.js Project Files\nDESCRIPTION: These commands remove the node_modules directory and package-lock.json file to prepare for deployment.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/doc-samples/hosted-targets/node-hosted-express/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf node_modules\nrm package-lock.json\n```\n\n----------------------------------------\n\nTITLE: Sample XML Response Data from Backend API\nDESCRIPTION: Example XML response returned by the backend API containing user information.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/sample-proxies/simple-python/README.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<root>\n    <city>San Jose</city>\n    <firstName>John</firstName>\n    <lastName>Doe</lastName>\n    <state>CA</state>\n</root>\n```\n\n----------------------------------------\n\nTITLE: Deploying Proxy to Apigee\nDESCRIPTION: Command to deploy the Node.js application as a proxy to Apigee using apigeetool. Requires authentication token and organization/environment details.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/doc-samples/hosted-targets/node-hosted-hello/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nget_token && apigeetool deployproxy \\\n-o <apigee org> \\\n-e <apigee env> \\\n--json \\\n--token \"$(< ~/.sso-cli/valid_token.dat)\" \\\n--api node-hosted-hello \\\n--directory .\n```\n\n----------------------------------------\n\nTITLE: Connecting Proxy to Target in Apigee API Proxy\nDESCRIPTION: This XML snippet defines a RouteRule named 'default' that connects the proxy to the target defined in the TargetEndpoint. It specifies the TargetEndpoint name as 'default'.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/edge-ux/proxy-to-target/README.md#2025-04-23_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<RouteRule name=\"default\">\n     <!-- This connects our proxy to the target defined in apiproxy/targets/default.xml -->\n     <TargetEndpoint>default</TargetEndpoint>\n</RouteRule>\n```\n\n----------------------------------------\n\nTITLE: Building Request for Service Callout with AssignMessage Policy\nDESCRIPTION: This AssignMessage policy creates a custom request object that specifies the path suffix '/json' to be appended to the target URL. It sets 'target.copy.pathsuffix' to false to prevent the original path suffix from being copied to the outbound request.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/learn-edge/service-callout-1/README.md#2025-04-23_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<AssignMessage name=\"AM-BuildRequest\">\n    <AssignTo createNew=\"true\" type=\"request\">myrequest</AssignTo>\n    <IgnoreUnresolvedVariables>false</IgnoreUnresolvedVariables>\n    <Set>\n        <Path>/json</Path>\n    </Set>\n    <AssignVariable>\n        <Name>target.copy.pathsuffix</Name>\n        <Value>false</Value> \n    </AssignVariable>\n</AssignMessage>\n```\n\n----------------------------------------\n\nTITLE: Deploying an API Proxy in Bash\nDESCRIPTION: This snippet demonstrates how to deploy an API proxy using a Bash script. It includes setting execute permissions and running the deployment script.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/README.md#2025-04-23_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nchmod 744 deploy.sh\n./deploy.sh\n```\n\n----------------------------------------\n\nTITLE: Starting Node.js Application Locally\nDESCRIPTION: Command to start the Node.js application locally on port 8081 for testing purposes.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/doc-samples/hosted-targets/node-hosted-hello/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nPORT=8081 node apiproxy/resources/hosted/index.js\n```\n\n----------------------------------------\n\nTITLE: Running the Cleanup Script for OAuth Sample\nDESCRIPTION: Command syntax for executing the cleanup script that removes entities (developers, apps, products) installed with the sample. Requires organization name, environment, username, password, and management server URL.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/sample-proxies/oauth-advanced/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./cleanup.sh <OrgName> <Environment> <Username> <Password> <MSURL>\n```\n\n----------------------------------------\n\nTITLE: Defining TargetEndpoint in Apigee Edge XML\nDESCRIPTION: XML configuration for the TargetEndpoint that specifies the backend service URL. This element defines the HTTP target connection to the mocktarget.apigee.net service.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/learn-edge/proxy-to-a-target/README.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<TargetEndpoint name=\"default\">\n      <HTTPTargetConnection>\n        <!-- This is where we define the target. For this sample we just use a simple URL. -->\n        <URL>http://mocktarget.apigee.net</URL>\n      </HTTPTargetConnection>\n   </TargetEndpoint>\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Node.js Express Application\nDESCRIPTION: These commands navigate to the project directory and install the required npm packages for the Express application.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/doc-samples/hosted-targets/node-hosted-express/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd apiproxy/resources/hosted\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Testing API Key Validation Flow\nDESCRIPTION: Shell command to test the deployed shared flow by sending a request to the API proxy.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/sample-proxies/shared-flow/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ sh invoke.sh\n```\n\n----------------------------------------\n\nTITLE: Obtaining Google Cloud Access Token for Apigee API Authentication\nDESCRIPTION: Commands to authenticate with Google Cloud and get an access token for making Apigee API calls.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/perf-proxies/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngcloud auth login\n\nexport TOKEN=$(gcloud auth print-access-token)\n```\n\n----------------------------------------\n\nTITLE: Deploying OAuth 2.0 Sample API Proxy\nDESCRIPTION: Shell command to deploy the OAuth 2.0 sample API proxy.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/sample-proxies/oauth-login-app/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ sh deploy.sh\n```\n\n----------------------------------------\n\nTITLE: Deploying API Proxy to Apigee Environment\nDESCRIPTION: Curl command to deploy the imported API proxy to a specific Apigee environment.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/perf-proxies/README.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl -v 'https://apigee.googleapis.com/v1/organizations/${org_name}/environments/${env_name}/apis/perf/revisions/1/deployments' \\\n    -X POST \\\n    -H \"Authorization: Bearer $TOKEN\"\n```\n\n----------------------------------------\n\nTITLE: Creating and Packaging API Proxy Sample for Deployment\nDESCRIPTION: Instructions for creating a zip file of the API proxy sample for deployment via Apigee APIs.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/perf-proxies/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd api-platform-samples/perf-proxies/perfproxy\n\nzip -r perf.zip apiproxy\n```\n\n----------------------------------------\n\nTITLE: Importing API Proxy to Apigee Organization\nDESCRIPTION: Curl command to import the packaged API proxy to an Apigee organization using the API.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/perf-proxies/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl -v 'https://apigee.googleapis.com/v1/organizations/${org_name}/apis?action=import&name=perf' \\\n    -X POST \\\n    -H \"Authorization: Bearer $TOKEN\" \\\n    -F \"file=@perf.zip\" \\\n    -H \"Content-Type:multipart/form-data\"\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response\nDESCRIPTION: Example JSON response from the API showing the combined data from both services, including country code, postal code, elevation in meters and feet, and location coordinates.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/doc-samples/javascript-mashup-cookbook/README.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"country\":\"us\",\"postalcode\":\"08008\",\n \"elevation\":{\"meters\":0.5045232,\"feet\":1.6552599030345978},\n \"location\":{\"latitude\":39.75007129999999,\"longitude\":-74.1357407}}\n```\n\n----------------------------------------\n\nTITLE: HTTP Response Example from Apigee Edge Entity Access\nDESCRIPTION: Example HTTP response showing the extracted developer email address returned in a custom header X-Developer-email after accessing entity data.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/sample-proxies/access-entity/README.md#2025-04-23_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nUser-Agent: curl/7.37.1\nHost: docs-test.apigee.net\nAccept: */*\nX-Developer-email: tesla@weathersample.com\nContent-Length: 0\nConnection: keep-alive\n```\n\n----------------------------------------\n\nTITLE: Testing OAuth 2.0 Sample API Proxy\nDESCRIPTION: Shell command to test the deployed OAuth 2.0 sample API proxy.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/sample-proxies/oauth-login-app/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ sh invoke.sh\n```\n\n----------------------------------------\n\nTITLE: Retrieving Apigee Environments API Call\nDESCRIPTION: cURL command to list available environments in an Apigee organization. Requires authentication with username and password.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/tools/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncurl -u myname:mypass https://api.enterprise.apigee.com/v1/o/{org_name}/environments/\n```\n\n----------------------------------------\n\nTITLE: Configuring API BaaS Credentials in Node.js\nDESCRIPTION: Configuration file for setting up API BaaS connection details. Includes organization name, application name, client credentials, token expiration time, and logging flag.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/doc-samples/nodejs-baas-cookbook/README.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexports.organization = 'myorg'\nexports.application = 'employees'\nexports.clientId = 'b3U6gjxoiwin4gEeOaDDwafXLGg'\nexports.clientSecret = 'b3U6JAorOoLMn0bE02uuJrls2x40p78'\nexports.tokenExpiration = 60000\nexports.logging = true\n```\n\n----------------------------------------\n\nTITLE: Setting Cache Expiry Settings in Response Cache Policy\nDESCRIPTION: XML configuration for setting the cache expiration timeout to 3 seconds in the Response Cache policy.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/learn-edge/response-cache-2/README.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<ExpirySettings>\n    <TimeoutInSec>3</TimeoutInSec>\n</ExpirySettings>\n```\n\n----------------------------------------\n\nTITLE: Deploying SOAP API Proxy Sample in Apigee\nDESCRIPTION: This shell command deploys the SOAP API proxy sample to the Apigee platform. It assumes that the environment variables and configuration have been set up correctly in the setenv.sh file.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/sample-proxies/soap/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ sh deploy.sh\n```\n\n----------------------------------------\n\nTITLE: Deploying the App Services JSON Patch Sample\nDESCRIPTION: Shell command to deploy the sample project to Apigee. This script likely handles the deployment process including importing and configuring the proxy bundle.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/sample-proxies/json-patch-app-services/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ sh deploy.sh\n```\n\n----------------------------------------\n\nTITLE: Sample API Request with Key\nDESCRIPTION: Example cURL command showing how to make an API request with an API key parameter.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/sample-proxies/apikey/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://myorg-test.apigee.net/mocktarget_key/json?apikey=abc123\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Policy Execution Order in ProxyEndpoint (XML)\nDESCRIPTION: This XML snippet shows how to attach the RemoveAPIKey policy in the ProxyEndpoint configuration. The policy is added as a Step in the PreFlow Request section, immediately after the VerifyAPIKey policy to ensure the API key is removed after validation.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/learn-edge/apikey-security-2/README.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ProxyEndpoint name=\"default\">\n  <PreFlow>\n    <Request>\n      <Step>\n        <Name>VerifyAPIKey</Name>\n      </Step>\n      <Step>\n        <Name>RemoveAPIKey</Name>\n      </Step>\n    </Request>\n  </PreFlow>\n  ...\n```\n\n----------------------------------------\n\nTITLE: Extracting ZIP Code with Extract Variables Policy in Apigee Edge\nDESCRIPTION: Extract Variables policy that captures the zip code from the request path after the /zip base path. The extracted value is stored in the LOCATION.zip flow variable for later use.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/sample-proxies/target-reroute/README.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<ExtractVariables name=\"extractZip\">\n    <DisplayName>getZipfromPath</DisplayName>\n    <URIPath>\n        <Pattern ignoreCase=\"true\">/{zip}</Pattern>\n    </URIPath>\n    <IgnoreUnresolvedVariables>false</IgnoreUnresolvedVariables>\n    <VariablePrefix>LOCATION</VariablePrefix>\n</ExtractVariables>\n```\n\n----------------------------------------\n\nTITLE: Invoking Apigee Edge API Proxy Samplet using Bash\nDESCRIPTION: This snippet shows how to invoke an Apigee Edge API Proxy Samplet using Bash commands. It includes changing file permissions and executing the invoke script.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/samplets/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nchmod 755 invoke.sh\n./invoke.sh\n```\n\n----------------------------------------\n\nTITLE: Testing Shell Command\nDESCRIPTION: Shell command to test the deployed API proxy using the invoke.sh script, which sends a sample request and displays the response.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/doc-samples/javascript-mashup-cookbook/README.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ sh invoke.sh\n```\n\n----------------------------------------\n\nTITLE: Sample HTTP Response with Performance Metrics\nDESCRIPTION: Example HTTP response showing the performance metrics headers (X-Apigee-*) when responsetime is enabled.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/sample-proxies/conditional-policy/README.md#2025-04-23_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nContent-Type: text/plain; charset=utf-8\nDate: Thu, 03 Nov 2016 13:42:18 GMT\nETag: W/\"d-GHB1ZrJKk/wdVTdB/jgBsw\"\nServer: Apigee Router\nX-Apigee-end-time: Thu, 3 Nov 2016 13:42:18 UTC\nX-Apigee-end-timestamp: 1478180538275\nX-Apigee-start-time: Thu, 3 Nov 2016 13:42:18 UTC\nX-Apigee-start-timestamp: 1478180538088\nX-Apigee-target: http://mocktarget.apigee.net\nX-Apigee-target-responseTime: 187\nX-Powered-By: Apigee\nContent-Length: 13\nConnection: keep-alive\n```\n\n----------------------------------------\n\nTITLE: Configuring Kerberos Login Module in login.conf\nDESCRIPTION: Configuration for the ServicePrincipalLoginContext module in login.conf that defines the Kerberos login parameters including principal name, ticket cache settings, and keytab location. This allows the service to authenticate using a service principal account.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/sample-proxies/kerberos-credential-mediation/README.md#2025-04-23_snippet_1\n\nLANGUAGE: conf\nCODE:\n```\nServicePrincipalLoginContext\n{\n      com.sun.security.auth.module.Krb5LoginModule required \n      principal=\"http/service-principal-account@APIGEE.LOCAL\" \n      doNotPrompt=true\n      useTicketCache=true   \n      keyTab=\"spn.keytab\"\n      useKeyTab=true\n      storeKey=true\n      debug=true;      \n}\n```\n\n----------------------------------------\n\nTITLE: Listing Samplets for Variable Extraction in Markdown\nDESCRIPTION: This markdown snippet lists two samplets available in the project: one for extracting query parameters from requests and another for extracting parts of the request path. It also includes a reference to the main README for instructions on using samplets.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/samplets/Extract-Variables/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Extract Variables Samplets\n\nThis samplet proxy includes these samplets:\n\n* [Extract Query Parameter from Request](./docs/Extract-Query-Param.md)\n* [Extract Part of Request Path](./docs/Extract-URI-Part.md)\n\n>See How to Use Samplets in the main Samplets [README.md](../README.md)\n```\n\n----------------------------------------\n\nTITLE: Sample XML Input in Apigee Edge XML to JSON Transformation\nDESCRIPTION: This snippet shows the default XML format returned by the backend service before transformation.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/sample-proxies/xmltojson/README.md#2025-04-23_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<root>\n    <city>San Jose</city>\n    <firstName>John</firstName>\n    <lastName>Doe</lastName>\n    <state>CA</state>\n</root>\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Output from Apigee Extract Variables Policy\nDESCRIPTION: This JSON structure represents the response returned by the Apigee proxy after processing the Extract Variables policy. It includes information about the demonstrated feature, extracted data, policy used, and the flow variable affected.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/samplets/Extract-Variables/docs/Extract-Query-Param.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Feature demonstrated\": \"Extracted value of {dbncode} parsed from query param: /extract-variables?code=DBN{dbncode}.\",\n  \"Data extracted\": null,\n  \"Policy demonstrated\": \"Extract Variables\",\n  \"Flow variable written/read\": \"queryinfo.dbncode\"\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Tutorial Demos Overview in Markdown\nDESCRIPTION: This Markdown snippet provides a brief introduction to the tutorial demos, explaining their purpose and the components included with each demo. It emphasizes the practical nature of the demos, linking theory with hands-on examples.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/tutorial-demos/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# Tutorial Demos\nThese demos are used by tutorials to demonstrate both technical and industry use-cases using APIs & cloud technologies.  Each demo here links to a running example, along with deployment instructions and the tutorial codelab to understand how it works.\n```\n\n----------------------------------------\n\nTITLE: Starting the Node.js Express Application Locally\nDESCRIPTION: This command starts the Node.js application locally on port 8081 for testing purposes.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/doc-samples/hosted-targets/node-hosted-express/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nPORT=8081 node index.js\n```\n\n----------------------------------------\n\nTITLE: Running dos2unix Command for Windows/Cygwin Setup\nDESCRIPTION: Command to recursively convert line endings in shell files when using Cygwin on Windows. This resolves the '\\r': command not found error by converting Windows-style line endings to Unix format.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/setup/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nfind . -name *.sh |xargs dos2unix\n```\n\n----------------------------------------\n\nTITLE: Deploying a Hosted Function Node.js Proxy in Apigee\nDESCRIPTION: A bash command for deploying a Node.js application with custom modules as a Hosted Function in Apigee. It uses apigeetool with the deployhostedtarget option and includes bundled dependencies.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/doc-samples/hosted-targets/node-hosted-custom-deps/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nget_token && apigeetool deployhostedtarget \\\n-o <apigee org> \\\n-e <apigee env> \\\n-n hosted-hello-conversion \\\n-d ./myapp/ \\\n-b hosted-hello-conversion \\\n--bundled-dependencies \\\n--json \\\n--token \"$(< ~/.sso-cli/valid_token.dat)\"\n```\n\n----------------------------------------\n\nTITLE: Setup Script Execution Command\nDESCRIPTION: Command to run the setup script that creates all sample entities in the Apigee environment.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/learn-edge/provisioning/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsetup.sh\n```\n\n----------------------------------------\n\nTITLE: Invoking Shell Deploy Script\nDESCRIPTION: Shell command to deploy the shared flow and client API proxy to Apigee Edge. Requires admin user privileges.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/sample-proxies/shared-flow/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ sh deploy.sh\n```\n\n----------------------------------------\n\nTITLE: Testing API Key Validation in Performance Proxy\nDESCRIPTION: Curl command to test the API key validation functionality in the deployed proxy.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/perf-proxies/README.md#2025-04-23_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ncurl -v 'https://YOUR_ENV_GROUP_HOSTNAME/v1/perf?test=validkey&apikey=${yourapikey}'\n```\n\n----------------------------------------\n\nTITLE: Shell Command for API Key Configuration\nDESCRIPTION: Sample shell variable assignment showing how to configure the API key for invoking the proxy.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/sample-proxies/access-entity/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nKEY=\"t3AyRHIfbNJwJ6ZbBAxGmNj5YWljAeB\"\n```\n\n----------------------------------------\n\nTITLE: Deploying GraphQL Sample Proxy Using Maven in Bash\nDESCRIPTION: Command to deploy both the graphql-config and graphql-proxy directories using Maven. It requires specifying the Apigee organization, environment, username, and password.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/sample-proxies/graphql-sample/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd graphql-smp\nmvn install -Ptest -Dorg=<APIGEE_ORG> -Denv=<APIGEE_ENV> -Dusername=<APIGEE_USERNAME> -Dpassword=<APIGEE_PASSWORD>\n```\n\n----------------------------------------\n\nTITLE: Testing Apigee Hosted Function Deployment\nDESCRIPTION: A curl command example to test the deployed Node.js proxy that demonstrates how to call the endpoint and shows expected response.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/doc-samples/hosted-targets/node-hosted-custom-deps/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl https:/<apigee org>-<apigee env>.apigee.net/hosted-hello-conversion/hello/spanish\n{\"hello\":\"This is how you say hello in spanish: Hola!\"}\n```\n\n----------------------------------------\n\nTITLE: Testing Deployed Node.js Proxy on Apigee\nDESCRIPTION: This curl command tests the deployed proxy by sending a GET request to the Apigee URL.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/doc-samples/hosted-targets/node-hosted-express/README.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl https:/<apigee org>-<apigee env>.apigee.net/node-hosted-express\n```\n\n----------------------------------------\n\nTITLE: Authorization Code Return URL for OAuth 2.0\nDESCRIPTION: URL invoked by the login application to return the authorization code to the app after successful authentication.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/sample-proxies/oauth-login-app/README.md#2025-04-23_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nhttps://$org-$env.$api_domain/oauth/authorizationcode?client_id=$consumerkey&response_type=code&app_enduser={userId}\n```\n\n----------------------------------------\n\nTITLE: Testing OAuth Implementation\nDESCRIPTION: Shell command to test the deployed OAuth implementation\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/sample-proxies/oauth10a-3legged/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ sh invoke.sh\n```\n\n----------------------------------------\n\nTITLE: Configuring ProxyEndpoint Flow with Cache Policies\nDESCRIPTION: XML configuration showing the placement of VerifyAPIKey, ResponseCache, and SetResponseHeaders policies in the ProxyEndpoint flows.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/learn-edge/response-cache-2/README.md#2025-04-23_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<ProxyEndpoint name=\"default\">\n  ...\n  <PreFlow>\n    <Request>\n      <Step>\n        <Name>VerifyAPIKey</Name>\n      </Step>\n      <Step>\n        <Name>ResponseCache</Name>\n      </Step>\n    </Request>\n  </PreFlow>\n  <PostFlow>\n    <Response>\n      <Step>\n        <Name>SetResponseHeaders</Name>\n      </Step>\n    </Response>\n  </PostFlow>\n...\n```\n\n----------------------------------------\n\nTITLE: Deploying Sharedflow to Apigee Environment\nDESCRIPTION: Curl command to deploy the imported sharedflow to a specific Apigee environment.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/perf-proxies/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -v 'https://apigee.googleapis.com/v1/organizations/${org_name}/environments/${env_name}/sharedflows/sfassignmessage/revisions/1/deployments' \\\n    -X POST \\\n    -H \"Authorization: Bearer $TOKEN\"\n```\n\n----------------------------------------\n\nTITLE: Undeploying Node.js Proxy from Apigee\nDESCRIPTION: This command uses apigeetool to undeploy a specific revision of the Node.js proxy from Apigee.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/doc-samples/hosted-targets/node-hosted-express/README.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nget_token && apigeetool undeploy \\\n-o <apigee org> \\\n-e <apigee env> \\\n--json \\\n--token \"$(< ~/.sso-cli/valid_token.dat)\" \\\n--api node-hosted-express \\\n--revision <revision to undeploy e.g 1>\n```\n\n----------------------------------------\n\nTITLE: Attaching Quota Policy to ProxyEndpoint in Apigee Edge XML\nDESCRIPTION: This XML snippet shows how to attach the EnforceQuota policy to the ProxyEndpoint's Preflow. This ensures the quota is enforced before processing the request.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/edge-ux/enforce-quota-simple/README.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<PreFlow>\n      <Request>\n        <Step>\n          <Name>EnforceQuota</Name>\n        </Step>\n      </Request>\n  </PreFlow>\n```\n\n----------------------------------------\n\nTITLE: Sample Note Block Formatting in Markdown\nDESCRIPTION: A markdown note block highlighting that the build files are example implementations that may require customization for specific use cases.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/doc-samples/java-cookbook/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n>Note: This example `pom.xml` and related build files are intended as examples\\n>only. When you create your own Java callout, you may need to add dependencies\\n>or make other modifications that are beyond the scope of this example.\n```\n\n----------------------------------------\n\nTITLE: Testing Local Application Response\nDESCRIPTION: Example of testing the local application using curl and its JSON response showing timestamp and hello world message.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/doc-samples/hosted-targets/node-hosted-hello/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://localhost:8081\n```\n\nLANGUAGE: json\nCODE:\n```\n{\"date\":\"2018-03-12T21:45:22.161Z\",\"msg\":\"Hello, World!\"}\n```\n\n----------------------------------------\n\nTITLE: Dependencies Notice for Apigee JavaCallout Development\nDESCRIPTION: Markdown documentation explaining that Java JAR dependencies should only be used for local compilation and not included in API proxy deployments since they are already available in the Edge runtime environment.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/doc-samples/java-hello/lib/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Note about these dependency files\n\nThese Java JAR files are dependencies for local compilation of your JavaCallout only. The JARs are available in the Edge runtime, so don't include/upload them separately as resources in your API proxies.\n```\n\n----------------------------------------\n\nTITLE: Testing Deployed Proxy\nDESCRIPTION: Command to test the deployed proxy on Apigee using curl.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/doc-samples/hosted-targets/node-hosted-hello/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl https:/<apigee org>-<apigee env>.apigee.net/node-hosted-hello\n```\n\n----------------------------------------\n\nTITLE: Undeploying Proxy from Apigee\nDESCRIPTION: Command to undeploy the proxy from Apigee using apigeetool. Requires specifying the revision number to undeploy.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/doc-samples/hosted-targets/node-hosted-hello/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nget_token && apigeetool undeploy \\\n-o <apigee org> \\\n-e <apigee env> \\\n--json \\\n--token \"$(< ~/.sso-cli/valid_token.dat)\" \\\n--api node-hosted-hello \\\n--revision <revision to undeploy e.g 1>\n```\n\n----------------------------------------\n\nTITLE: API Response Example with Custom Headers\nDESCRIPTION: Sample output showing custom X-Apigee-Demo headers and JSON response from the JavaScript-enabled proxy. Demonstrates the format of response headers and payload.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/doc-samples/javascript-cookbook/README.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"city\":\"San Jose\",\"state\":\"CA\"}\n```\n\n----------------------------------------\n\nTITLE: Sample oEmbed JSON Response from Twitter Timeline API\nDESCRIPTION: This JSON snippet shows a partial example of the oEmbed object returned by the API, including metadata and HTML content for a tweet.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/sample-proxies/twitter-oembed/README.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"type\":\"rich\",\n \"version\":\"1.0\",\n \"author_name\":\"Twitter Timeline oEmbed\",\n \"author_url\":\"http://apigee.com\",\n \"provider_name\":\"Twitter\",\n \"provider_url\":\"http://twitter.com\",\n \"width\":550,\n \"height\":null,\n \"html\":\"<blockquote class=\\\"twitter-tweet\\\"><p>Applying Universal Design Principles to API Initiatives (video &amp; slides from Webcast 9/18 ) <a href=\\\"http://t.co/jQwtxIaW\\\">http://t.co/jQwtxIaW</a> thx @<a href=\\\"http://twitter.com/13protons\\\">13protons</a> @<a href=\\\"http://twitter.com/kevinswiber\\\">kevinswiber</a></p>&mdash; Apigee(@Apigee) <a href=\\\"https://twitter.com/Apigee/statuses/252831118057934848\\\" data-datetime=\\\"2012-10-01T18:03:30Z\\\">October 1, 2012 6:03:30 PM UTC</a></blockquote>...\n```\n\n----------------------------------------\n\nTITLE: Attaching ResponseCache Policy to TargetEndpoint PostFlow (XML)\nDESCRIPTION: This XML snippet demonstrates how to attach the ResponseCache policy to the PostFlow of a TargetEndpoint in Apigee Edge. The policy is applied to the response flow, allowing responses to be cached before being sent back to the client.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/edge-ux/response-cache-simple/README.md#2025-04-23_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<TargetEndpoint name=\"default\">\n    <PostFlow name=\"PostFlow\">\n        <Request/>\n        <Response>\n            <Step>\n                <Name>ResponseCache</Name>\n            </Step>\n        </Response>\n    </PostFlow>\n```\n\n----------------------------------------\n\nTITLE: Configuring Kerberos Settings in krb5.conf\nDESCRIPTION: Configuration file for Kerberos (krb5.conf) that defines the default realm, encryption types, KDC location, and domain mappings. This configuration is essential for establishing secure Kerberos communications.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/sample-proxies/kerberos-credential-mediation/README.md#2025-04-23_snippet_2\n\nLANGUAGE: conf\nCODE:\n```\n[libdefaults]\n    default_realm=APIGEE.LOCAL\n    default_tkt_enctypes = aes128-cts rc4-hmac des3-cbc-sha1 des-cbc-md5 des-cbc-crc\n    default_tgs_enctypes = aes128-cts rc4-hmac des3-cbc-sha1 des-cbc-md5 des-cbc-crc\n    permitted_enctypes   = aes128-cts rc4-hmac des3-cbc-sha1 des-cbc-md5 des-cbc-crc\n\n[realms]\n    APIGEE.LOCAL  = {\n        kdc = kdc.youdomain.com \n        default_domain = APIGEE.LOCAL\n}\n\n[domain_realm]\n    .APIGEE.LOCAL = APIGEE.LOCAL\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Flow in Apigee Edge Proxy Endpoint\nDESCRIPTION: This XML snippet defines a custom flow named 'HandleHeaders' in the ProxyEndpoint. It includes two steps: ParseJsonResponse and AssignCustomHeaders, which are executed in the Response phase of the flow.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/learn-edge/extract-json-payload/README.md#2025-04-23_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<Flows>\n    <Flow name=\"HandleHeaders\">\n      <Response>\n        <Step>\n            <Name>ParseJsonResponse</Name>\n        </Step>\n        <Step>\n            <Name>AssignCustomHeaders</Name>\n        </Step>\n      </Response>\n      <Request/>\n    </Flow>\n</Flows>\n```\n\n----------------------------------------\n\nTITLE: Creating and Packaging Sharedflow Sample for Deployment\nDESCRIPTION: Instructions for creating a zip file of the sharedflow sample for deployment via Apigee APIs.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/perf-proxies/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd api-platform-samples/perf-proxies/sharedflows/sfassignmessage\n\nzip -r sfassignmessage.zip sharedflowbundle\n```\n\n----------------------------------------\n\nTITLE: Testing Response Cache in Performance Proxy\nDESCRIPTION: Curl command to test the response cache functionality in the deployed proxy.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/perf-proxies/README.md#2025-04-23_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ncurl -v 'https://YOUR_ENV_GROUP_HOSTNAME/v1/perf?test=cache&cache=1'\n```\n\n----------------------------------------\n\nTITLE: Testing Passthrough Mode in Performance Proxy\nDESCRIPTION: Curl command to test the passthrough functionality in the deployed proxy.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/perf-proxies/README.md#2025-04-23_snippet_25\n\nLANGUAGE: shell\nCODE:\n```\ncurl -v 'https://YOUR_ENV_GROUP_HOSTNAME/v1/perf/?test=passthrough'\n```\n\n----------------------------------------\n\nTITLE: Failure Response from Apigee Pattern Matching Test\nDESCRIPTION: Example response returned when a condition fails in the pattern matching test. The response includes the path suffix that did not match the condition.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/sample-proxies/condition-pattern-matching/README.md#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n   Condition Failed for proxy.pathsuffix: /animals/cats\n```\n\n----------------------------------------\n\nTITLE: Sample Response Headers Output\nDESCRIPTION: Example of the formatted response headers output showing the key-value pairs with custom formatting. This demonstrates the expected output format from the header iteration code.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/sample-proxies/iterate-headers/README.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nAccess-Control-Allow-Origin --> *\nConnection --> keep-alive\nContent-Length --> 68\nContent-Type --> application/json; charset=utf-8\nDate --> Thu, 27 Apr 2017 19:16:42 GMT\nETag --> W/\"44-rA5eRt/mMLik54NvbWbSzg\"\nX-Powered-By --> Apigee\n```\n\n----------------------------------------\n\nTITLE: Sample cURL Command for API Invocation\nDESCRIPTION: Example command to invoke the API endpoint with the 'responsetime' header set to true.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/sample-proxies/conditional-policy/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -i -H \"responsetime:true\" \"http://$org-$env.$api_domain/v1/timer\"\n```\n\n----------------------------------------\n\nTITLE: Attaching VerifyAPIKey Policy to ProxyEndpoint Preflow\nDESCRIPTION: XML configuration showing how to attach the VerifyAPIKey policy to the proxy endpoint's Preflow, ensuring API key verification happens at the start of request processing.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/learn-edge/apikey-security-1/README.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<ProxyEndpoint name=\"default\">\n  <PreFlow>\n    <Request>\n      <Step>\n        <Name>VerifyAPIKey</Name>\n      </Step>\n    </Request>\n  </PreFlow>\n  ...\n```\n\n----------------------------------------\n\nTITLE: Cleanup Script Example with Sample Parameters\nDESCRIPTION: Example of the cleanup command with placeholder values, showing the order and format of parameters needed to remove entities created by the OAuth sample installation.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/sample-proxies/oauth-advanced/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./cleanup.sh myorg prod test@example.com apigee123 https://api.enterprise.apigee.com\n```\n\n----------------------------------------\n\nTITLE: Invoking the API with curl\nDESCRIPTION: Example curl command to invoke the sample API proxy. The request includes country and postal code parameters to retrieve elevation and location data.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/doc-samples/javascript-mashup-cookbook/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl \"http://{org_name}-test.apigee.net/altitude2?country=us&postalcode=08008\"\n```\n\n----------------------------------------\n\nTITLE: Access Token Return URL for OAuth 2.0 Implicit Grant\nDESCRIPTION: URL invoked by the login application to return the access token to the app after successful authentication in the implicit flow.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/sample-proxies/oauth-login-app/README.md#2025-04-23_snippet_7\n\nLANGUAGE: http\nCODE:\n```\nhttps://$org-$env.$api_domain/oauth/token?client_id=$consumerkey&response_type=code&app_enduser={userId}\n```\n\n----------------------------------------\n\nTITLE: Querying Twitter Timeline oEmbed API for JSON Response\nDESCRIPTION: This curl command demonstrates how to request the oEmbed JSON object from the API by including an 'Accept: application/json' header.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/sample-proxies/twitter-oembed/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -v -H \"Accept: application/json\" \"http://demo-prod.apigee.net/twitter-oembed/search.json?q=from%3Aapigee&result_type=mixed\"\n```\n\n----------------------------------------\n\nTITLE: Testing the App Services JSON Patch Sample\nDESCRIPTION: Shell command to invoke and test the deployed sample project. This script likely sends test requests to the deployed proxy to verify its functionality.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/sample-proxies/json-patch-app-services/README.md#2025-04-23_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n$ sh invoke.sh\n```\n\n----------------------------------------\n\nTITLE: Querying Twitter Timeline oEmbed API for HTML Response\nDESCRIPTION: This curl command shows how to request the HTML content directly from the API without specifying an Accept header.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/sample-proxies/twitter-oembed/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -v \"http://demo-prod.apigee.net/twitter-oembed/search.json?q=from%3Aapigee&result_type=mixed\"\n```\n\n----------------------------------------\n\nTITLE: Creating Cache for OAuth Tokens\nDESCRIPTION: cURL command to create a cache in Apigee for storing OAuth tokens, using the oauth-token-cache.xml definition file.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/sample-proxies/outbound-oauth/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -v -X POST -H \"Content-Type: application/xml\" -d @oauth-token-cache.xml https://api.enterprise.apigee.com/v1/organizations/$ORG/environments/$ENV/caches -u myname:mypass\n```\n\n----------------------------------------\n\nTITLE: Invoking an API Proxy in Bash\nDESCRIPTION: This snippet shows how to invoke an API proxy using a Bash script. It includes setting execute permissions and running the invocation script.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/README.md#2025-04-23_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\nchmod 744 invoke.sh\n./invoke.sh\n```\n\n----------------------------------------\n\nTITLE: Testing SOAP API Proxy Sample in Apigee\nDESCRIPTION: This shell command invokes a test on the deployed SOAP API proxy sample. It is used to verify that the proxy is functioning correctly after deployment.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/sample-proxies/soap/README.md#2025-04-23_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n$ sh invoke.sh\n```\n\n----------------------------------------\n\nTITLE: Testing Apigee Twitter Integration\nDESCRIPTION: Shell command to test the deployed API proxy by invoking sample requests.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/sample-proxies/twitter-mobile-timeline/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ sh invoke.sh\n```\n\n----------------------------------------\n\nTITLE: Deploying Apigee Twitter Integration\nDESCRIPTION: Shell command to deploy the API proxy to Apigee Edge platform. Must be run after configuring environment variables in setenv.sh.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/sample-proxies/twitter-mobile-timeline/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ sh deploy.sh\n```\n\n----------------------------------------\n\nTITLE: Apigee Edge Installation Command\nDESCRIPTION: Command to install the apigeetool package globally via npm, which is required for deploying proxies to Apigee Edge.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/learn-edge/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g apigeetool\n```\n\n----------------------------------------\n\nTITLE: Sample HTML Response from Twitter Timeline API\nDESCRIPTION: This HTML snippet demonstrates the formatted tweet content returned by the API when requesting HTML directly.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/sample-proxies/twitter-oembed/README.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<blockquote class=\"twitter-tweet\"><p>Applying Universal Design Principles to API Initiatives (video &amp; slides from Webcast 9/18 ) <a href=\"http://t.co/jQwtxIaW\">http://t.co/jQwtxIaW</a> thx @<a href=\"http://twitter.com/13protons\">13protons</a> @<a href=\"http://twitter.com/kevinswiber\">kevinswiber</a></p>&mdash; Apigee(@Apigee) <a href=\"https://twitter.com/Apigee/statuses/252831118057934848\" data-datetime=\"2012-10-01T18:03:30Z\">October 1, 2012 6:03:30 PM UTC</a></blockquote>...\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Output from Apigee Extract Variables Policy\nDESCRIPTION: This JSON snippet shows the sample output returned by the Apigee proxy after successfully extracting the path variable. It includes information about the demonstrated feature, extracted data, policy used, and the flow variable accessed.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/samplets/Extract-Variables/docs/Extract-URI-Part.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Feature demonstrated\": \"Extract value of {id} parsed from the proxypath.suffix: /extract-variables/resource1/{id}.\",\n  \"Data extracted\": \"420DDB2C\",\n  \"Policy demonstrated\": \"Extract Variables\",\n  \"Flow variable written/read\": \"urirequest.id\"\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Apigee Edge API Proxy Samplet using Bash\nDESCRIPTION: This snippet demonstrates how to deploy an Apigee Edge API Proxy Samplet using Bash commands. It includes changing to the samplet directory, modifying file permissions, and executing the deploy script.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/samplets/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd Extract-Variables\nchmod 755 deploy.sh\n./deploy.sh\n```\n\n----------------------------------------\n\nTITLE: Example Firestore Data Structure in JSON\nDESCRIPTION: Demonstrates the structure of a Firestore document with various field types including boolean, string, geopoint, and timestamp. This example shows how data is stored in Firestore before being transformed by the proxy.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/tutorial-demos/firestore-demo/README.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\"name\": \"projects/...\",\n\"fields\": {\n\"funny\": {\n\"booleanValue\": true\n},\n\"imagePath\": {\n\"stringValue\": \"https://dakiniland.files.wordpress.com/2011/05/102-0907085235-simpsons-mutant-fish-blinky.jpg\"\n},\n\"location\": {\n\"geoPointValue\": {\n\"latitude\": 29.987294,\n\"longitude\": -39.6875\n}\n},\n\"punchline\": {\n\"stringValue\": \"A fiiish.\"\n},\n\"text\": {\n\"stringValue\": \"What do you call a fish with 3 eyes?\"\n},\n\"id\": {\n\"stringValue\": \"8ebb59f9\"\n},\n\"timestamp\": {\n\"timestampValue\": \"2020-10-08T13:05:29Z\"\n}\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Navigating Back to Home Directory\nDESCRIPTION: This command changes the current directory back to the project root for deployment preparation.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/doc-samples/hosted-targets/node-hosted-express/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd ../../..\n```\n\n----------------------------------------\n\nTITLE: Custom Application Attributes Configuration Table\nDESCRIPTION: Table showing the required custom attributes that need to be configured for the Apigee application to integrate with Advanced API Services. Includes attribute names and their meanings.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/sample-proxies/advanced-api-services/token-gen/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nAttribute name\t\t\t\tMeaning\t\n----------------------------\t-----------------------------------------------\nDATA_STORE_APP_CONSUMER_KEY\t\tThe consumer key associated with the Advanced API Services\n\t\t\t\t\t\t\tapp you want to use.\nDATA_STORE_APP_CONSUMER_SECRET\tThe shared secret associated with the Advanced API Services\n\t\t\t\t\t\t\tapp you want to use.\nDATA_STORE_APP_NAME\t\t\t\tThe name of the Advanced API Services application you want\n\t\t\t\t\t\t\tto use\nDATA_STORE_ORG_NAME\t\t\t\tThe name of the Advanced API Services organization you want\n\t\t\t\t\t\t\tto use.\n```\n\n----------------------------------------\n\nTITLE: Generating OAuth Access Token Using External Token in Apigee Edge\nDESCRIPTION: This OAuthV2 policy configuration generates an access token using a previously generated token stored in a flow variable. It supports the password grant type, extracting username and password from form parameters, and generates both the access token and error responses when needed.\nSOURCE: https://github.com/apigee/api-platform-samples/blob/master/sample-proxies/oauth-validate-key-secret/README.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<OAuthV2 async=\"false\" continueOnError=\"false\" enabled=\"true\" name=\"OA-GenerateAccessToken-Password\">\n    <DisplayName>OA-GenerateAccessToken Password</DisplayName>\n    <Operation>GenerateAccessToken</Operation>\n    <ExternalAccessToken>apigee.access_token</ExternalAccessToken>\n    <!-- This is in millseconds, so expire in an hour -->\n    <ExpiresIn>36000000</ExpiresIn>\n    <SupportedGrantTypes>\n        <GrantType>password</GrantType>\n    </SupportedGrantTypes>\n    <GrantType>request.formparam.grant_type</GrantType>\n    <UserName>request.formparam.username</UserName>\n    <PassWord>request.formparam.password</PassWord>\n    <GenerateResponse enabled=\"true\"/>\n    <GenerateErrorResponse enabled=\"true\"/>\n</OAuthV2>\n```"
  }
]