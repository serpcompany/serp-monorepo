[
  {
    "owner": "storyblok",
    "repo": "storyblok-react",
    "content": "TITLE: Initializing Storyblok SDK in React Application\nDESCRIPTION: JavaScript code for initializing the Storyblok SDK in a React application with API plugin, component registration, and authentication token configuration.\nSOURCE: https://github.com/storyblok/storyblok-react/blob/main/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { apiPlugin, storyblokInit } from '@storyblok/react'\n\n/** Import your components */\nimport Page from './components/Page'\nimport Teaser from './components/Teaser'\n// import FallbackComponent from \"./components/FallbackComponent\";\n\nstoryblokInit({\n  accessToken: 'YOUR_ACCESS_TOKEN',\n  use: [apiPlugin],\n  components: {\n    page: Page,\n    teaser: Teaser,\n  },\n  // bridge: false,\n  // apiOptions: {},\n  // richText: {},\n  // enableFallbackComponent: false,\n  // customFallbackComponent: FallbackComponent,\n})\n```\n\n----------------------------------------\n\nTITLE: Complete Storyblok Integration with Static Props in Next.js\nDESCRIPTION: Full example showing how to integrate Storyblok with Next.js, including static props generation and story state management.\nSOURCE: https://github.com/storyblok/storyblok-react/blob/main/README.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  getStoryblokApi,\n  StoryblokComponent,\n  useStoryblokState,\n} from '@storyblok/react'\n\nexport default function Home({ story: initialStory }) {\n  const story = useStoryblokState(initialStory)\n\n  if (!story.content) {\n    return <div>Loading...</div>\n  }\n\n  return <StoryblokComponent blok={story.content} />\n}\n\nexport async function getStaticProps({ preview = false }) {\n  const storyblokApi = getStoryblokApi()\n  const { data } = await storyblokApi.get(`cdn/stories/react`, {\n    version: 'draft',\n  })\n\n  return {\n    props: {\n      story: data ? data.story : false,\n      preview,\n    },\n    revalidate: 3600,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching and Rendering Storyblok Content in Next.js App Router\nDESCRIPTION: Next.js App Router page component that fetches data from Storyblok and renders it using the StoryblokStory component with RSC support.\nSOURCE: https://github.com/storyblok/storyblok-react/blob/main/README.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { StoryblokClient, ISbStoriesParams } from '@storyblok/react';\nimport { StoryblokStory } from '@storyblok/react/rsc';\nimport { getStoryblokApi } from '@/lib/storyblok'; // Remember to import from the local file\n\nexport default async function Home() {\n  const { data } = await fetchData();\n\n  return (\n    <div>\n      <StoryblokStory story={data.story} />\n    </div>\n  );\n}\n\nexport async function fetchData() {\n  let sbParams: ISbStoriesParams = { version: 'draft' };\n\n  const storyblokApi: StoryblokClient = getStoryblokApi();\n  return storyblokApi.get(`cdn/stories/home`, sbParams);\n}\n```\n\n----------------------------------------\n\nTITLE: Making React Components Editable with storyblokEditable\nDESCRIPTION: Example of a React component that implements the storyblokEditable function to connect it with Storyblok's Visual Editor for in-context editing.\nSOURCE: https://github.com/storyblok/storyblok-react/blob/main/README.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { storyblokEditable } from '@storyblok/react'\n\nconst Feature = ({ blok }) => {\n  return (\n    <div {...storyblokEditable(blok)} key={blok._uid} data-test=\"feature\">\n      <div>\n        <div>{blok.name}</div>\n        <p>{blok.description}</p>\n      </div>\n    </div>\n  )\n}\n\nexport default Feature\n```\n\n----------------------------------------\n\nTITLE: Implementing Storyblok Visual Editor Event Handling in React\nDESCRIPTION: Basic implementation of useStoryblokState hook for handling Storyblok visual editor events. Shows how to manage story state and render components dynamically.\nSOURCE: https://github.com/storyblok/storyblok-react/blob/main/README.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport { StoryblokComponent, useStoryblokState } from '@storyblok/react'\n\nexport default function Home({ story: initialStory }) {\n  const story = useStoryblokState(initialStory)\n\n  if (!story.content) {\n    return <div>Loading...</div>\n  }\n\n  return <StoryblokComponent blok={story.content} />\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up StoryblokProvider in Next.js App Router Layout\nDESCRIPTION: Implementation of the root layout in Next.js App Router that wraps the application with a StoryblokProvider to enable Visual Editor functionality.\nSOURCE: https://github.com/storyblok/storyblok-react/blob/main/README.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// app/layout.jsx\nimport { apiPlugin, storyblokInit } from '@storyblok/react/rsc'\nimport StoryblokProvider from '../components/StoryblokProvider'\n\nexport default function RootLayout({ children }) {\n  return (\n    <StoryblokProvider>\n      <html lang=\"en\">\n        <body>{children}</body>\n      </html>\n    </StoryblokProvider>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Data from Storyblok with Next.js 13/14 Cache Prevention\nDESCRIPTION: Example function demonstrating how to fetch data from Storyblok API while preventing Next.js 13/14 default caching behavior with the 'cache: \"no-store\"' option.\nSOURCE: https://github.com/storyblok/storyblok-react/blob/main/README.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function fetchData() {\n  const sbParams: ISbStoriesParams = { version: 'draft' }\n\n  const storyblokApi: StoryblokClient = getStoryblokApi()\n\n  return storyblokApi.get(`cdn/stories/home`, sbParams, {\n    cache: 'no-store', // This prevents Next.js 13, 14 default caching behaviour\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Content and Enabling Visual Editor with useStoryblok in React\nDESCRIPTION: Basic implementation of useStoryblok hook to fetch content and enable live editing. The hook requires slug and apiOptions as parameters, with optional bridgeOptions for customizing the Storyblok Bridge.\nSOURCE: https://github.com/storyblok/storyblok-react/blob/main/README.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { StoryblokComponent, useStoryblok } from '@storyblok/react'\n\nfunction App() {\n  const story = useStoryblok('react', { version: 'draft' })\n\n  if (!story?.content) {\n    return <div>Loading...</div>\n  }\n\n  return <StoryblokComponent blok={story.content} />\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Storyblok Content in Next.js Pages Router\nDESCRIPTION: Example of using getStoryblokApi to fetch content from Storyblok in the Pages Router approach, typically used in getStaticProps or getServerSideProps functions.\nSOURCE: https://github.com/storyblok/storyblok-react/blob/main/README.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getStoryblokApi } from '@storyblok/react'\n\n// At the required place\nconst storyblokApi = getStoryblokApi()\nconst { data } = await storyblokApi.get('cdn/stories', { version: 'draft' })\n```\n\n----------------------------------------\n\nTITLE: Lazy Loading Storyblok Components with React.lazy\nDESCRIPTION: This code snippet shows how to use React.lazy for code splitting and lazy loading Storyblok components. This approach enables automatic code splitting and loads only the necessary JavaScript for each page, improving performance.\nSOURCE: https://github.com/storyblok/storyblok-react/blob/main/README.md#2025-04-22_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n'use client'\nimport { apiPlugin, storyblokInit } from '@storyblok/react/rsc'\nimport { lazy } from 'react'\n\nconst lazyComponents = {\n  page: lazy(() => import('./components/Page')),\n  // other lazy-loaded components\n}\n\nstoryblokInit({\n  accessToken,\n  use: [apiPlugin],\n  components: lazyComponents,\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Storyblok SDK with RSC Support\nDESCRIPTION: Creating a shared Storyblok API instance with RSC (React Server Components) support by initializing the SDK and registering components in a separate file.\nSOURCE: https://github.com/storyblok/storyblok-react/blob/main/README.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// lib/storyblok.js\nimport Page from '@/components/Page';\nimport Teaser from '@/components/Teaser';\nimport { apiPlugin, storyblokInit } from '@storyblok/react/rsc';\n\nexport const getStoryblokApi = storyblokInit({\n  accessToken: 'YOUR_ACCESS_TOKEN',\n  use: [apiPlugin],\n  components: {\n    teaser: Teaser,\n    page: Page,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using StoryblokServerComponent in React Server Components\nDESCRIPTION: Example of using StoryblokServerComponent from the RSC module to render nested Storyblok components within a server component.\nSOURCE: https://github.com/storyblok/storyblok-react/blob/main/README.md#2025-04-22_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nimport { storyblokEditable, StoryblokServerComponent } from '@storyblok/react/rsc';\n\nconst Page = ({ blok }) => (\n  <main {...storyblokEditable(blok)}>\n    {blok.body.map(nestedBlok => (\n      <StoryblokServerComponent blok={nestedBlok} key={nestedBlok._uid} />\n    ))}\n  </main>\n);\n\nexport default Page;\n```\n\n----------------------------------------\n\nTITLE: Creating Client-Side StoryblokProvider Component\nDESCRIPTION: Client-side StoryblokProvider component that re-initializes the connection with Storyblok to enable Visual Editor and client-side interactions.\nSOURCE: https://github.com/storyblok/storyblok-react/blob/main/README.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// components/StoryblokProvider.jsx\n'use client';\n\nimport { getStoryblokApi } from '@/lib/storyblok';\n\nexport default function StoryblokProvider({ children }) {\n  getStoryblokApi();\n  return children;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Storyblok API Options\nDESCRIPTION: Example of initializing Storyblok with custom API options and component registration. Shows how to configure cache and other API-specific settings.\nSOURCE: https://github.com/storyblok/storyblok-react/blob/main/README.md#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nstoryblokInit({\n  accessToken: 'YOUR_ACCESS_TOKEN',\n  apiOptions: {\n    cache: { type: 'memory' },\n  },\n  use: [apiPlugin],\n  components: {\n    page: Page,\n    teaser: Teaser,\n    grid: Grid,\n    feature: Feature,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Custom Rich Text Resolvers with Next.js Integration\nDESCRIPTION: Advanced implementation of rich text rendering with custom resolvers for Next.js Link component and custom codeblock handling.\nSOURCE: https://github.com/storyblok/storyblok-react/blob/main/README.md#2025-04-22_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport { StoryblokRichText, useStoryblok, MarkTypes, type StoryblokRichTextNode } from '@storyblok/react';\nimport Link from 'next/link';\nimport CodeBlock from './components/CodeBlock';\n\nfunction App() {\n  const story = useStoryblok('home', { version: 'draft' });\n\n  if (!story?.content) {\n    return <div>Loading...</div>;\n  }\n\n  const resolvers = {\n     [MarkTypes.LINK]: (node: StoryblokRichTextNode<ReactElement>) => {\n      return node.attrs?.linktype === 'story'\n         ? (\n            <Link\n              href={node.attrs?.href}\n              target={node.attrs?.target}\n            >\n              {node.text}\n            </Link>\n          )\n        : (\n            <a\n              href={node.attrs?.href}\n              target={node.attrs?.target}\n            >\n              {node.text}\n            </a>\n          );\n    },\n    [BlockTypes.CODE_BLOCK]: (node) => \n      <CodeBlock \n        class={node?.attrs?.class}\n      >\n        {node.children}  \n      </CodeBlock>;\n  }\n\n  return (\n    <div>\n      <StoryblokRichText \n        doc={story.content.richText}\n        resolvers={resolvers} \n      />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rich Text Rendering with StoryblokRichText Component\nDESCRIPTION: Implementation of rich text rendering using the StoryblokRichText component with TypeScript support.\nSOURCE: https://github.com/storyblok/storyblok-react/blob/main/README.md#2025-04-22_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { StoryblokRichText, useStoryblok } from '@storyblok/react';\n\nfunction App() {\n  const story = useStoryblok('home', { version: 'draft' });\n\n  if (!story?.content) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div>\n      <StoryblokRichText doc={story.content.richText} />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Storyblok with All Components in React\nDESCRIPTION: This snippet demonstrates the standard approach of loading all Storyblok components during initialization. While convenient, this method can lead to larger bundle sizes and slower page speeds for larger sites.\nSOURCE: https://github.com/storyblok/storyblok-react/blob/main/README.md#2025-04-22_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nstoryblokInit({\n  accessToken,\n  use: [apiPlugin],\n  components: {\n    // all your React components\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Passing Bridge Options to useStoryblok Hook\nDESCRIPTION: Example showing how to pass Bridge options as a third parameter to the useStoryblok hook, enabling features like relation resolution and link handling.\nSOURCE: https://github.com/storyblok/storyblok-react/blob/main/README.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nuseStoryblok(\n  story.id,\n  { version: 'draft', resolveRelations: ['Article.author'] },\n  {\n    resolveRelations: ['Article.author'],\n    resolveLinks: 'url',\n    preventClicks: true,\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Region Parameter for Storyblok API\nDESCRIPTION: JavaScript configuration for specifying the geographic region of your Storyblok space for proper API routing to EU, US, Australia, Canada, or China datacenters.\nSOURCE: https://github.com/storyblok/storyblok-react/blob/main/README.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { apiPlugin, storyblokInit } from '@storyblok/react'\n\nstoryblokInit({\n  accessToken: 'YOUR_ACCESS_TOKEN',\n  use: [apiPlugin],\n  apiOptions: {\n    region: 'us',\n  },\n  components: {},\n})\n```\n\n----------------------------------------\n\nTITLE: Installing @storyblok/react Package\nDESCRIPTION: Command line instructions for installing the Storyblok React SDK using npm or yarn package managers.\nSOURCE: https://github.com/storyblok/storyblok-react/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @storyblok/react\n// yarn add @storyblok/react\n```\n\n----------------------------------------\n\nTITLE: Loading Storyblok React SDK from CDN\nDESCRIPTION: HTML script tag for loading the Storyblok React SDK from a CDN for browser-based applications.\nSOURCE: https://github.com/storyblok/storyblok-react/blob/main/README.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/@storyblok/react\"></script>\n```\n\n----------------------------------------\n\nTITLE: Starting Next.js Development Server\nDESCRIPTION: Commands to start the Next.js development server using various package managers including npm, yarn, pnpm, and bun. The server will run on localhost:3000 with hot-reload capabilities.\nSOURCE: https://github.com/storyblok/storyblok-react/blob/main/playground/next15/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```"
  }
]