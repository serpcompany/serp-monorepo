[
  {
    "owner": "piotrmurach",
    "repo": "pastel",
    "content": "TITLE: Basic usage of Pastel for text coloring in Ruby\nDESCRIPTION: Demonstrates how to create a Pastel instance and use it to color text output.\nSOURCE: https://github.com/piotrmurach/pastel/blob/master/README.md#2025-04-13_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\npastel = Pastel.new\n\nputs pastel.red(\"Unicorns!\")\n```\n\n----------------------------------------\n\nTITLE: Installing Pastel gem in Ruby\nDESCRIPTION: Instructions for adding Pastel to a Ruby project's Gemfile and installing it via Bundler or as a standalone gem.\nSOURCE: https://github.com/piotrmurach/pastel/blob/master/README.md#2025-04-13_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ngem \"pastel\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ bundle\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ gem install pastel\n```\n\n----------------------------------------\n\nTITLE: Chaining multiple styles with Pastel in Ruby\nDESCRIPTION: Shows how to combine multiple color and style attributes using Pastel's chainable API.\nSOURCE: https://github.com/piotrmurach/pastel/blob/master/README.md#2025-04-13_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\npastel.red.on_green.bold(\"Unicorns!\")\n```\n\n----------------------------------------\n\nTITLE: Combining styled and unstyled strings with Pastel in Ruby\nDESCRIPTION: Illustrates how to mix styled and unstyled text using Pastel.\nSOURCE: https://github.com/piotrmurach/pastel/blob/master/README.md#2025-04-13_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\npastel.red(\"Unicorns\") + \" will rule \" + pastel.green(\"the World!\")\n```\n\n----------------------------------------\n\nTITLE: Nesting styles with Pastel in Ruby\nDESCRIPTION: Shows how to nest different styles within a single Pastel styling call.\nSOURCE: https://github.com/piotrmurach/pastel/blob/master/README.md#2025-04-13_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\npastel.red(\"Unicorns \", pastel.on_green(\"everywhere!\"))\n```\n\n----------------------------------------\n\nTITLE: Predefining and reusing styles with Pastel in Ruby\nDESCRIPTION: Shows how to create reusable style objects using Pastel's detach method.\nSOURCE: https://github.com/piotrmurach/pastel/blob/master/README.md#2025-04-13_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nerror    = pastel.red.bold.detach\nwarning  = pastel.yellow.detach\n\nputs error.(\"Error!\")\nputs warning.(\"Warning\")\n```\n\n----------------------------------------\n\nTITLE: Using Pastel with multiple arguments in Ruby\nDESCRIPTION: Demonstrates Pastel's ability to handle multiple string arguments in a single styling call.\nSOURCE: https://github.com/piotrmurach/pastel/blob/master/README.md#2025-04-13_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\npastel.red(\"Unicorns\", \"are\", \"running\", \"everywhere!\")\n```\n\n----------------------------------------\n\nTITLE: Checking and configuring color support with Pastel in Ruby\nDESCRIPTION: Demonstrates how to check for color support and force color output in Pastel.\nSOURCE: https://github.com/piotrmurach/pastel/blob/master/README.md#2025-04-13_snippet_18\n\nLANGUAGE: ruby\nCODE:\n```\npastel.enabled?   # => false\n\npastel = Pastel.new(enabled: true)\npastel.enabled?   # => true\n```\n\n----------------------------------------\n\nTITLE: Creating color aliases with Pastel in Ruby\nDESCRIPTION: Shows how to create custom color aliases for more meaningful color names in Pastel.\nSOURCE: https://github.com/piotrmurach/pastel/blob/master/README.md#2025-04-13_snippet_21\n\nLANGUAGE: ruby\nCODE:\n```\npastel.alias_color(:funky, :red, :bold)\n\npastel.funky.on_green(\"unicorn\")   # => will use :red, :bold color\n```\n\n----------------------------------------\n\nTITLE: Complex nested styling with Pastel in Ruby\nDESCRIPTION: Demonstrates Pastel's ability to handle complex nested styling scenarios.\nSOURCE: https://github.com/piotrmurach/pastel/blob/master/README.md#2025-04-13_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\npastel.red(\"Unicorns \" + pastel.green(\"everywhere\") + pastel.on_yellow(\"!\"))\n```\n\n----------------------------------------\n\nTITLE: Using detached styles with Pastel in Ruby\nDESCRIPTION: Shows different ways to use detached color styles in Pastel.\nSOURCE: https://github.com/piotrmurach/pastel/blob/master/README.md#2025-04-13_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\nnotice = pastel.blue.bold.detach\n\nnotice.call(\"Unicorns running\")\nnotice.(\"Unicorns running\")\nnotice[\"Unicorns running\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Pastel for dynamic color suppression in Ruby\nDESCRIPTION: Shows how to dynamically enable or disable color output based on the output stream.\nSOURCE: https://github.com/piotrmurach/pastel/blob/master/README.md#2025-04-13_snippet_19\n\nLANGUAGE: ruby\nCODE:\n```\nstdout_pastel = Pastel.new(enabled: $stdout.tty?)\nstderr_pastel = Pastel.new(enabled: $stderr.tty?)\n```\n\n----------------------------------------\n\nTITLE: Block-based nested styling with Pastel in Ruby\nDESCRIPTION: Shows how to use block syntax for nested styling in Pastel.\nSOURCE: https://github.com/piotrmurach/pastel/blob/master/README.md#2025-04-13_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\npastel.red.on_green(\"Unicorns\") {\n  green.on_red(\"will \", \"dominate\") {\n    yellow(\"the world!\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Pastel for multiline strings in Ruby\nDESCRIPTION: Demonstrates how to set the 'eachline' option for proper multiline string handling in Pastel.\nSOURCE: https://github.com/piotrmurach/pastel/blob/master/README.md#2025-04-13_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\npastel = Pastel.new(eachline: \"\\n\")\n```\n\n----------------------------------------\n\nTITLE: Configuring multiline string handling in Pastel for Ruby\nDESCRIPTION: Demonstrates how to set up Pastel to properly handle multiline strings with background colors.\nSOURCE: https://github.com/piotrmurach/pastel/blob/master/README.md#2025-04-13_snippet_20\n\nLANGUAGE: ruby\nCODE:\n```\npastel = Pastel.new(eachline: \"\\n\")\npastel.red(\"foo\\nbar\")  # => \"\\e[31mfoo\\e[0m\\n\\e[31mbar\\e[0m\"\n```\n\n----------------------------------------\n\nTITLE: Stripping color codes with Pastel in Ruby\nDESCRIPTION: Demonstrates how to remove color sequences from a string while preserving other escape sequences.\nSOURCE: https://github.com/piotrmurach/pastel/blob/master/README.md#2025-04-13_snippet_14\n\nLANGUAGE: ruby\nCODE:\n```\npastel.strip(\"\\e[1A\\e[1m\\e[34mbold blue text\\e[0m\")  # => \"\\e[1Abold blue text\"\n```\n\n----------------------------------------\n\nTITLE: Low-level string decoration with Pastel in Ruby\nDESCRIPTION: Shows how to use the decorate method for applying multiple styles to a string.\nSOURCE: https://github.com/piotrmurach/pastel/blob/master/README.md#2025-04-13_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\npastel.decorate(\"Unicorn\", :green, :on_blue, :bold)\n```\n\n----------------------------------------\n\nTITLE: Checking for color codes in strings with Pastel in Ruby\nDESCRIPTION: Shows how to determine if a string contains color escape codes using the colored? method.\nSOURCE: https://github.com/piotrmurach/pastel/blob/master/README.md#2025-04-13_snippet_17\n\nLANGUAGE: ruby\nCODE:\n```\npastel.colored?(\"\\e[31mcolorful\\e[0m\")  # => true\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Color Aliases in Pastel with Environment Variables\nDESCRIPTION: Shows how to define custom color aliases at runtime using the PASTEL_COLORS_ALIASES environment variable. The format allows mapping custom names to existing colors or combined styles.\nSOURCE: https://github.com/piotrmurach/pastel/blob/master/README.md#2025-04-13_snippet_22\n\nLANGUAGE: ruby\nCODE:\n```\nPASTEL_COLORS_ALIASES=\"newcolor_1=red,newcolor_2=on_green,funky=red.bold\"\n```\n\n----------------------------------------\n\nTITLE: Using Pastel CLI for terminal text styling\nDESCRIPTION: Demonstrates how to use the pastel-cli companion library for styling text in the terminal.\nSOURCE: https://github.com/piotrmurach/pastel/blob/master/README.md#2025-04-13_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ pastel green \"Unicorns & rainbows!\"\n```\n\n----------------------------------------\n\nTITLE: Using Pastel CLI to Style Text in Terminal\nDESCRIPTION: Demonstrates using the pastel-cli command line tool to apply color formatting to terminal output. This example shows how to display text in green color.\nSOURCE: https://github.com/piotrmurach/pastel/blob/master/README.md#2025-04-13_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\n$ pastel green 'Unicorns & rainbows!'\n```\n\n----------------------------------------\n\nTITLE: Validating color names with Pastel in Ruby\nDESCRIPTION: Demonstrates how to check if color names are valid using the valid? method.\nSOURCE: https://github.com/piotrmurach/pastel/blob/master/README.md#2025-04-13_snippet_16\n\nLANGUAGE: ruby\nCODE:\n```\npastel.valid?(:red, :blue) # => true\npastel.valid?(:unicorn)    # => false\n```\n\n----------------------------------------\n\nTITLE: Looking up ANSI codes for colors with Pastel in Ruby\nDESCRIPTION: Shows how to translate color names to ANSI escape codes using the lookup method.\nSOURCE: https://github.com/piotrmurach/pastel/blob/master/README.md#2025-04-13_snippet_15\n\nLANGUAGE: ruby\nCODE:\n```\npastel.lookup(:red)   # => \"\\e[31m\"\npastel.lookup(:reset) # => \"\\e[0m\"\n```\n\n----------------------------------------\n\nTITLE: Undecorating styled strings with Pastel in Ruby\nDESCRIPTION: Demonstrates how to convert styled strings back into a list of style attributes using the undecorate method.\nSOURCE: https://github.com/piotrmurach/pastel/blob/master/README.md#2025-04-13_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\npastel.undecorate(\"\\e[32mfoo\\e[0m \\e[31mbar\\e[0m\")\n# => [{foreground: :green, text: \"foo\"}, {text: \" \"}, {foreground: :red, text: \"bar\"}]\n```"
  }
]