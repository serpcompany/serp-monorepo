[
  {
    "owner": "amark",
    "repo": "gun",
    "content": "TITLE: Initializing and Using GUN in HTML\nDESCRIPTION: This snippet demonstrates how to initialize GUN, store data, and set up real-time updates in a web application. It shows basic operations like putting data, subscribing to updates, and setting up periodic updates.\nSOURCE: https://github.com/amark/gun/blob/master/README.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://cdn.jsdelivr.net/npm/gun/gun.js\"></script>\n<script>\n// import GUN from 'gun'; // in ESM\n// GUN = require('gun'); // in NodeJS\n// GUN = require('gun/gun'); // in React\ngun = GUN();\n\ngun.get('mark').put({\n  name: \"Mark\",\n  email: \"mark@gun.eco\",\n});\n\ngun.get('mark').on((data, key) => {\n  console.log(\"realtime updates:\", data);\n});\n\nsetInterval(() => { gun.get('mark').get('live').put(Math.random()) }, 9);\n</script>\n```\n\n----------------------------------------\n\nTITLE: Handling Complex Data Structures with GUN in JavaScript\nDESCRIPTION: This snippet showcases GUN's ability to handle circular references, partial updates, and table-like structures. It demonstrates putting and retrieving complex data, traversing circular references, and working with sets of data.\nSOURCE: https://github.com/amark/gun/blob/master/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncat = {name: \"Fluffy\", species: \"kitty\"};\nmark = {boss: cat};\ncat.slave = mark;\n\n// partial updates merge with existing data!\ngun.get('mark').put(mark);\n\n// access the data as if it is a document.\ngun.get('mark').get('boss').get('name').once(function(data, key){\n  // `once` grabs the data once, no subscriptions.\n  console.log(\"Mark's boss is\", data);\n});\n\n// traverse a graph of circular references!\ngun.get('mark').get('boss').get('slave').once(function(data, key){\n  console.log(\"Mark is the cat's slave!\", data);\n});\n\n// add both of them to a table!\ngun.get('list').set(gun.get('mark').get('boss'));\ngun.get('list').set(gun.get('mark'));\n\n// grab each item once from the table, continuously:\ngun.get('list').map().once(function(data, key){\n  console.log(\"Item:\", data);\n});\n\n// live update the table!\ngun.get('list').set({type: \"cucumber\", goal: \"jumping cat\"});\n```\n\n----------------------------------------\n\nTITLE: Importing GUN and SEA modules in JavaScript\nDESCRIPTION: This snippet demonstrates how to require the GUN core and SEA (Security, Encryption, Authorization) modules in a JavaScript environment. It's used for setting up GUN with user authentication and security features.\nSOURCE: https://github.com/amark/gun/blob/master/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nGUN = require('gun/gun');\nSEA = require('gun/sea');\n```\n\n----------------------------------------\n\nTITLE: GUN Database Radix State Structure\nDESCRIPTION: Example of GUN's radix state structure derived from stream data. This O(1) lookup format organizes data hierarchically by user and post IDs, enabling efficient retrieval of individual values with timestamps for version control.\nSOURCE: https://github.com/amark/gun/blob/master/test/wire.txt#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n=@\n\t'#'\n\t\t'ambernadal'\n\t\t\t=@\n\t\t\t\t'.'\n\t\t\t\t\t'last' = '#\"ambernadal/says/1234567890/asdf\"'>'1234567890'\n\t\t\t\t\t'says' = '#\"ambernadal/says\"'>'1234567890'\n\t\t\t'/says'\n\t\t\t\t=@\n\t\t\t\t\t'.ambernadal/says/1234567890/asdf' = '#\"ambernadal/says/1234567890/asdf\"'>'1234567890'\n\t\t\t\t'/1234567890/asdf'\n\t\t\t\t\t=@\n\t\t\t\t\t\t'.wh'\n\t\t\t\t\t\t\t'at' = '\"Hello world!\"'>'1234567890'\n\t\t\t\t\t\t\t'en' = '1234567890'>'1234567890'\n\t\t\t\t\t\t\t'o' = '#\"ambernadal\"'>'1234567890'\n\t\t'jessegibson'\n\t\t\t=@\n\t\t\t\t'.'\n\t\t\t\t\t'last' = '#\"jessegibson/says/1234567890/asdf\"'>'1234567890'\n\t\t\t\t\t'says' = '#\"jessegibson/says\"'>'1234567890'\n\t\t\t'/says'\n\t\t\t\t=@\n\t\t\t\t\t'.jessegibson/says/1234567890/asdf' = '#\"jessegibson/says/1234567890/asdf\"'>'1234567890'\n\t\t\t\t'/1234567890/asdf'\n\t\t\t\t\t=@\n\t\t\t\t\t\t'.wh'\n\t\t\t\t\t\t\t'at' = '\"Hello world!\"'>'1234567890'\n\t\t\t\t\t\t\t'en' = '1234567890'>'1234567890'\n\t\t\t\t\t\t\t'o' = '#\"jessegibson\"'>'1234567890'\n\t\t'marknadal'\n\t\t\t=@\n\t\t\t\t'.'\n\t\t\t\t\t'last' = '#\"marknadal/says/1234567891/fdsa\"'>'1234567891'\n\t\t\t\t\t'says' = '#\"marknadal/says\"'>'1234567891'\n\t\t\t'/says'\n\t\t\t\t=@\n\t\t\t\t\t'.marknadal/says/123456789'\n\t\t\t\t\t\t'0/asdf' = '#\"marknadal/says/1234567890/asdf\"'>'1234567890'\n\t\t\t\t\t\t'1/fads' = '#\"marknadal/says/1234567891/fads\"'>'1234567891'\n\t\t\t\t'/123456789'\n\t\t\t\t\t'0/asdf'\n\t\t\t\t\t\t=@\n\t\t\t\t\t\t\t'.wh'\n\t\t\t\t\t\t\t\t'at' = '\"Hello world!\"'>'1234567890'\n\t\t\t\t\t\t\t\t'en' = '1234567890'>'1234567890'\n\t\t\t\t\t\t\t\t'o' = '#\"marknadal\"'>'1234567890'\n\t\t\t\t\t'1/fads'\n\t\t\t\t\t\t=@\n\t\t\t\t\t\t\t'.wh'\n\t\t\t\t\t\t\t\t'at' = '\"Hello universe!\"'>'1234567891'\n\t\t\t\t\t\t\t\t'en' = '1234567891'>'1234567891'\n\t\t\t\t\t\t\t\t'o' = '#\"marknadal\"'>'1234567891'\n```\n\n----------------------------------------\n\nTITLE: GUN Database Stream Format Example\nDESCRIPTION: Example of GUN's stream format for storing social media posts. Each entry contains user data, post content, timestamps, and relationship references structured in a graph format. This stream is later processed into a radix state structure.\nSOURCE: https://github.com/amark/gun/blob/master/test/wire.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n%'1024'#'\"marknadal/says/1234567890/asdf\"'.'\"who\"'='#\"marknadal\"'.'\"when\"'='1234567890'.'\"what\"'='\"Hello world!\"'>'1234567890'#'\"marknadal\"'.'\"last\"'='#\"marknadal/says/1234567890/asdf\"'.'\"says\"'='#\"marknadal/says\"'>'1234567890'#'\"marknadal/says\"'.'\"marknadal/says/1234567890/asdf\"'='#\"marknadal/says/1234567890/asdf\"'>'1234567890'\n\n%'1024'#'\"ambernadal/says/1234567890/asdf\"'.'\"who\"'='#\"ambernadal\"'.'\"when\"'='1234567890'.'\"what\"'='\"Hello world!\"'>'1234567890'#'\"ambernadal\"'.'\"last\"'='#\"ambernadal/says/1234567890/asdf\"'.'\"says\"'='#\"ambernadal/says\"'>'1234567890'#'\"ambernadal/says\"'.'\"ambernadal/says/1234567890/asdf\"'='#\"ambernadal/says/1234567890/asdf\"'>'1234567890'\n\n%'1024'#'\"jessegibson/says/1234567890/asdf\"'.'\"who\"'='#\"jessegibson\"'.'\"when\"'='1234567890'.'\"what\"'='\"Hello world!\"'>'1234567890'#'\"jessegibson\"'.'\"last\"'='#\"jessegibson/says/1234567890/asdf\"'.'\"says\"'='#\"jessegibson/says\"'>'1234567890'#'\"jessegibson/says\"'.'\"jessegibson/says/1234567890/asdf\"'='#\"jessegibson/says/1234567890/asdf\"'>'1234567890'\n\n%'1024'#'\"marknadal/says/1234567891/fdsa\"'.'\"who\"'='#\"marknadal\"'.'\"when\"'='1234567891'.'\"what\"'='\"Hello universe!\"'>'1234567891'#'\"marknadal\"'.'\"last\"'='#\"marknadal/says/1234567891/fdsa\"'.'\"says\"'='#\"marknadal/says\"'>'1234567891'#'\"marknadal/says\"'.'\"marknadal/says/1234567891/fdsa\"'='#\"marknadal/says/1234567891/fdsa\"'>'1234567891'\n```\n\n----------------------------------------\n\nTITLE: Demonstrating GUN 0.3 to 0.5 Migration Changes\nDESCRIPTION: Illustrates various API changes between GUN versions 0.3, 0.4, and 0.5, including changes to methods like back, get, map, and put.\nSOURCE: https://github.com/amark/gun/blob/master/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ngun.back -> gun.back();\ngun.get(key, cb) -> cb(err, data) -> cb(at) at.err, at.put;\ngun.map(cb) -> gun.map().on(cb);\ngun.init -> deprecated;\ngun.put(data, cb) -> cb(err, ok) -> cb(ack) ack.err, ack.ok;\ngun.get(key) global/absolute -> gun.back(-1).get(key);\ngun.key(key) -> temporarily broken;\n```\n\n----------------------------------------\n\nTITLE: Configuring GUN to Prevent Automatic DHT Connection\nDESCRIPTION: Demonstrates how to configure a GUN instance to prevent automatic connection to the DHT, which may be necessary in some scenarios but loses scaling properties.\nSOURCE: https://github.com/amark/gun/blob/master/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nGun({axe: false}\n```\n\n----------------------------------------\n\nTITLE: Migrating GUN Event Listeners from 0.7.x to 0.8.x\nDESCRIPTION: Shows the change in adapter interfaces from using Gun.on('event', cb) to gun.on('event', cb), making adapters instance-specific.\nSOURCE: https://github.com/amark/gun/blob/master/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Old way\nGun.on('event', cb)\n\n// New way\ngun.on('event', cb)\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Gun React Native Demo\nDESCRIPTION: This command installs the necessary dependencies for the Gun React Native demo using Yarn package manager.\nSOURCE: https://github.com/amark/gun/blob/master/examples/react-native/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Basic Object Synchronization in JavaScript\nDESCRIPTION: Demonstrates basic object property synchronization between Earth and Mars nodes. Shows how properties added on one node are transmitted to the other.\nSOURCE: https://github.com/amark/gun/blob/master/test/old/timelines.txt#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nthing = {}\n\nthing.a = 'hello'\n\nthing.z = 'cool'\n\nthing = {z: 'cool'}\nthing.a = 'hello'\nthing = {a: 'hello', z: 'cool'}\n```\n\n----------------------------------------\n\nTITLE: Object Value Replacement Synchronization\nDESCRIPTION: Shows how object values are synchronized when completely replacing objects rather than just modifying properties. Demonstrates merging of properties from different nodes.\nSOURCE: https://github.com/amark/gun/blob/master/test/old/timelines.txt#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nthing = 5\n\nthing = {a: 'yay'}\n\nthing = {a: 'yay', b:'cool'}\n```\n\n----------------------------------------\n\nTITLE: Complex Object Synchronization with Multiple Updates\nDESCRIPTION: More complex example showing multiple changes to object values, including primitive reassignments and property additions. Illustrates challenges with synchronization ordering.\nSOURCE: https://github.com/amark/gun/blob/master/test/old/timelines.txt#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nthing = 5\n\nthing = {a: 'yay'}\n\nthing = 9\nthing = {z: 1}\nthing.j = 'how?'\n\nthing = {z: 1, j: 'how?'}\nthing = {z: 1, j: 'how?', k: 'lol'}\n\nthing = {z: 1, j: 'how?'}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Breaking Change in GUN 0.2020.x\nDESCRIPTION: Shows an example of how in-process message passing between gun instances may break in version 0.2020.520 and later. Refers to a test file for more details.\nSOURCE: https://github.com/amark/gun/blob/master/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`>0.2020.520` may break in-process `gun1` `gun2` message passing. Check `test/common.js` \"Check multi instance message passing\" for a hint and/or complain on community chat.\n```\n\n----------------------------------------\n\nTITLE: Linking Nodes in GUN 0.3.3\nDESCRIPTION: Demonstrates how to link nodes natively in GUN version 0.3.3 using the put method.\nSOURCE: https://github.com/amark/gun/blob/master/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ngun.get('mark').path('owner').put(gun.get('cat'))\n```\n\n----------------------------------------\n\nTITLE: Creating Sets in GUN 0.3.3\nDESCRIPTION: Shows how to create sets (tables, collections, lists) in GUN version 0.3.3 using the set method.\nSOURCE: https://github.com/amark/gun/blob/master/CHANGELOG.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ngun.get('users').set(gun.get('person/mark'))\n```\n\n----------------------------------------\n\nTITLE: Running Gun React Native Demo on iOS\nDESCRIPTION: This command runs the Gun React Native demo on iOS simulator or device.\nSOURCE: https://github.com/amark/gun/blob/master/examples/react-native/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nreact-native run-ios\n```\n\n----------------------------------------\n\nTITLE: Running Gun React Native Demo on Android\nDESCRIPTION: This command runs the Gun React Native demo on Android emulator or device.\nSOURCE: https://github.com/amark/gun/blob/master/examples/react-native/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nreact-native run-android\n```\n\n----------------------------------------\n\nTITLE: Deploying GUN to Heroku using Git\nDESCRIPTION: This series of bash commands clones the GUN repository, creates a new Heroku app, and deploys GUN to Heroku. It's used for quickly setting up a GUN instance on the Heroku platform.\nSOURCE: https://github.com/amark/gun/blob/master/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/amark/gun.git\ncd gun\nheroku create\ngit push -f heroku HEAD:master\n```\n\n----------------------------------------\n\nTITLE: Installing GUN on Linux using curl and bash\nDESCRIPTION: This bash command downloads and executes an installation script for GUN on a Linux system. It's used to quickly set up a GUN relay peer for development purposes.\nSOURCE: https://github.com/amark/gun/blob/master/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -o- https://raw.githubusercontent.com/amark/gun/master/examples/install.sh | bash\n```\n\n----------------------------------------\n\nTITLE: Basic Text Encoding and Decoding in JavaScript\nDESCRIPTION: Demonstrates the basic usage of TextEncoder to encode a string into a Uint8Array, and TextDecoder to decode a Uint8Array back into a string. The encoding parameter is optional for TextDecoder.\nSOURCE: https://github.com/amark/gun/blob/master/lib/text-encoding/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar uint8array = new TextEncoder().encode(string);\nvar string = new TextDecoder(encoding).decode(uint8array);\n```\n\n----------------------------------------\n\nTITLE: Streaming Text Decoding in JavaScript\nDESCRIPTION: Shows how to perform streaming decoding of text data. It uses a while loop to process chunks of data, accumulating the decoded string. The final decode call without arguments finishes the stream.\nSOURCE: https://github.com/amark/gun/blob/master/lib/text-encoding/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar string = \"\", decoder = new TextDecoder(encoding), buffer;\nwhile (buffer = next_chunk()) {\n  string += decoder.decode(buffer, {stream:true});\n}\nstring += decoder.decode(); // finish the stream\n```\n\n----------------------------------------\n\nTITLE: Including Text Encoding Library in HTML\nDESCRIPTION: This snippet shows how to include the text-encoding library files in an HTML page. It requires two script tags, one for encoding indexes and one for the main encoding functionality.\nSOURCE: https://github.com/amark/gun/blob/master/lib/text-encoding/README.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- Required for non-UTF encodings -->\n<script src=\"encoding-indexes.js\"></script>\n<script src=\"encoding.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Starting Angular Development Server\nDESCRIPTION: Launches a development server for the Angular project. The app will be accessible at http://localhost:4200/ and will automatically reload on file changes.\nSOURCE: https://github.com/amark/gun/blob/master/examples/angular/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nng serve\n```\n\n----------------------------------------\n\nTITLE: Generating Angular Components and Other Artifacts\nDESCRIPTION: Uses Angular CLI to generate new components, directives, pipes, services, classes, or modules. This helps in scaffolding the project structure.\nSOURCE: https://github.com/amark/gun/blob/master/examples/angular/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nng generate component component-name\n```\n\nLANGUAGE: bash\nCODE:\n```\nng generate directive/pipe/service/class/module\n```\n\n----------------------------------------\n\nTITLE: Building Angular Project\nDESCRIPTION: Builds the Angular project and stores the output in the 'dist/' directory. Use the '-prod' flag for a production build with optimizations.\nSOURCE: https://github.com/amark/gun/blob/master/examples/angular/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nng build\n```\n\n----------------------------------------\n\nTITLE: Running Gun Database Docker Image\nDESCRIPTION: Command to run the Gun database Docker image, exposing port 8765. This allows users to quickly start a Gun database instance using a pre-built Docker image.\nSOURCE: https://github.com/amark/gun/blob/master/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -p 8765:8765 gundb/gun\n```\n\n----------------------------------------\n\nTITLE: Building and Running Custom Gun Database Docker Image\nDESCRIPTION: Series of commands to clone the Gun repository, build a custom Docker image, and run it. This allows users to create their own version of the Gun database Docker image with potential modifications.\nSOURCE: https://github.com/amark/gun/blob/master/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/amark/gun.git\ncd gun\ndocker build -t myrepo/gundb:v1 .\ndocker run -p 8765:8765 myrepo/gundb:v1\n```\n\n----------------------------------------\n\nTITLE: Building and Running Gun Database Docker Image with Metadata Labels\nDESCRIPTION: Commands to build a Gun database Docker image with metadata labels and run it. This method is specific to Linux/Mac systems and includes additional metadata in the Docker image.\nSOURCE: https://github.com/amark/gun/blob/master/README.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm run docker\ndocker run -p 8765:8765 username/gun:git\n```\n\n----------------------------------------\n\nTITLE: Creating Git Version Tag and Release\nDESCRIPTION: Commands for creating and pushing a new version tag (0.2021.001) to trigger release automation for the Gun project.\nSOURCE: https://github.com/amark/gun/blob/master/RELEASE.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit tag v0.2021.001\ngit push --tags\n```\n\n----------------------------------------\n\nTITLE: Non-Standard Text Encoding with Legacy Encodings in JavaScript\nDESCRIPTION: Demonstrates how to force non-standard behavior to encode text using legacy encodings. This is not part of the standard API and requires a special option to be set.\nSOURCE: https://github.com/amark/gun/blob/master/lib/text-encoding/README.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar uint8array = new TextEncoder(\n  'windows-1252', { NONSTANDARD_allowLegacyEncoding: true }).encode(text);\n```\n\n----------------------------------------\n\nTITLE: Running Angular Unit Tests\nDESCRIPTION: Executes unit tests for the Angular project using Karma test runner.\nSOURCE: https://github.com/amark/gun/blob/master/examples/angular/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nng test\n```\n\n----------------------------------------\n\nTITLE: Running Angular End-to-End Tests\nDESCRIPTION: Runs end-to-end tests for the Angular project using Protractor. Ensure the app is being served via 'ng serve' before running these tests.\nSOURCE: https://github.com/amark/gun/blob/master/examples/angular/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nng e2e\n```\n\n----------------------------------------\n\nTITLE: Displaying Supported Versions Table in Markdown\nDESCRIPTION: This snippet shows a markdown table that lists the supported versions of the project for security updates. It indicates that version 0.2020.x is supported, while versions below 0.2020 are not.\nSOURCE: https://github.com/amark/gun/blob/master/SECURITY.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Version | Supported          |\n| ------- | ------------------ |\n| 0.2020.x| :white_check_mark: |\n| < 0.2020| :x:                |\n```\n\n----------------------------------------\n\nTITLE: Getting Help with Angular CLI\nDESCRIPTION: Provides information on how to get additional help with Angular CLI commands and usage.\nSOURCE: https://github.com/amark/gun/blob/master/examples/angular/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nng help\n```\n\n----------------------------------------\n\nTITLE: Forcing Polyfill Usage in HTML\nDESCRIPTION: This snippet shows how to force the use of the polyfill implementation by nullifying the native TextEncoder and TextDecoder objects before including the polyfill.\nSOURCE: https://github.com/amark/gun/blob/master/lib/text-encoding/README.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<script>\nwindow.TextEncoder = window.TextDecoder = null;\n</script>\n```\n\n----------------------------------------\n\nTITLE: Applying Apache License 2.0 Boilerplate Notice\nDESCRIPTION: This snippet provides a template for the boilerplate notice to be included when applying the Apache License 2.0 to a software project. It includes placeholders for the copyright year and owner's name, as well as the standard license text and reference to the full license.\nSOURCE: https://github.com/amark/gun/blob/master/lib/text-encoding/LICENSE.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Secret Key Warning Message\nDESCRIPTION: A warning message indicating the presence of a sensitive security key that should not be leaked or exposed\nSOURCE: https://github.com/amark/gun/blob/master/test/hub/whatever/aws-key.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nI'M A SUPER SECRET KEY WHICH SHALL NOT BE LEAKED \nFOR YOUR OWN SAKE.\n```"
  }
]