[
  {
    "owner": "owasp",
    "repo": "nettacker",
    "content": "TITLE: Target Specification Examples\nDESCRIPTION: These examples demonstrate various ways to specify targets for OWASP Nettacker, including single IPs, IP ranges, CIDR notation, domain names, and URLs. Targets can also be read from a list using the `-l` or `--target-list` option, or provided as a comma-separated string.\nSOURCE: https://github.com/owasp/nettacker/blob/master/docs/Usage.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n192.168.1.1\n192.168.1.1-192.168.255.255\n192.168.1.1.1-192.255.255.255\n192.168.1.1/24\nowasp.org\nhttp://owasp.org\nhttps://owasp.org\n```\n\n----------------------------------------\n\nTITLE: Update and Install Python3, PIP, and VENV (bash)\nDESCRIPTION: This set of commands updates the package list and installs Python 3, the Python development package, the Python package installer (pip), and the virtual environment module (venv) on Debian-based Linux distributions like Ubuntu.\nSOURCE: https://github.com/owasp/nettacker/blob/master/docs/Installation.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get update\nsudo apt-get install -y python3 python3-dev python3-pip python3-venv\npip3 install --upgrade pip3\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Setup and Execution\nDESCRIPTION: This code snippet provides instructions for setting up and running OWASP Nettacker using Docker Compose. It includes commands to start the Docker containers and execute a basic port scan against owasp.org. The command sequence uses docker-compose to create and start the nettacker service and then uses docker exec to run a nettacker scan within the container.\nSOURCE: https://github.com/owasp/nettacker/blob/master/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ docker-compose up -d && docker exec -it nettacker-nettacker-1 /bin/bash\n# poetry run python nettacker.py -i owasp.org -s -m port_scan\n```\n\n----------------------------------------\n\nTITLE: Nettacker Command to Find CVE 2020-5902\nDESCRIPTION: These commands show how to use the 'f5_cve_2020_5902' module to identify the CVE-2020-5902 vulnerability in F5 devices. The first two examples show how to specify either a target or target list. The `-s` option is included for subdomain scanning in the last example.\nSOURCE: https://github.com/owasp/nettacker/blob/master/docs/Usage.md#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\npython nettacker.py -i <CIDR/IP/Domain> -m f5_cve_2020_5902\npython nettacker.py -l <List of IP/CIDR/Domain> -m f5_cve_2020_5902\npython nettacker.py -i <CIDR/IP/Domain> -m f5_cve_2020_5902 -s\n```\n\n----------------------------------------\n\nTITLE: Install Nettacker via Git Clone and Poetry (bash)\nDESCRIPTION: These commands clone the Nettacker repository, install Poetry, and then install Nettacker's dependencies and run the application using Poetry.\nSOURCE: https://github.com/owasp/nettacker/blob/master/docs/Installation.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt update\nsudo apt install python3-poetry git\ngit clone https://github.com/OWASP/Nettacker --depth 1\ncd Nettacker\npoetry install\npoetry run nettacker --help\n```\n\n----------------------------------------\n\nTITLE: Nettacker Command with Target List, All Modules and Credentials\nDESCRIPTION: This example utilizes a target list file (-l), runs all modules (-m all), excludes port_scan module (-x port_scan), specifies a port range (-g), and sets a thread count (-t). It also demonstrates using credentials (-u and -p) for authentication-based modules.\nSOURCE: https://github.com/owasp/nettacker/blob/master/docs/Usage.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\npython nettacker.py -l targets.txt -m all -x port_scan -g 20-100 -t 5 -u root -p 123456,654321,123123\n```\n\n----------------------------------------\n\nTITLE: Submitting a New Scan\nDESCRIPTION: Illustrates how to submit a new scan to the OWASP Nettacker API using a POST request. It highlights the required parameters 'targets' and 'scan_method', and shows how to process the JSON response.\nSOURCE: https://github.com/owasp/nettacker/blob/master/docs/API.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> r = requests.post('https://127.0.0.1:5000/new/scan', data={\"key\": \"8370bd0a0b9a98ac25b341833fb0fb07\", \"targets\": \"127.0.0.1,owasp.org\", \"scan_method\": \"port_scan\"})\n>>> r.status_code\n200\n>>> import json\n>>> print json.dumps(json.loads(r.content), sort_keys=True, indent=4)\n{\n    \"backup_ports\": null, \n    \"check_ranges\": false, \n    \"check_subdomains\": false, \n    \"database_host\": \"\", \n    \"database_name\": \"/home/am4n/owasp-nettacker/.data/nettacker.db\", \n    \"database_password\": \"\", \n    \"database_port\": \"\", \n    \"database_type\": \"sqlite\", \n    \"database_username\": \"\", \n    \"graph_flag\": \"d3_tree_v2_graph\", \n    \"home_path\": \"/home/am4n/owasp-nettacker/.data\", \n    \"language\": \"en\", \n    \"log_in_file\": \"/home/am4n/owasp-nettacker/.data/results/results_2020_06_09_10_36_56_mibtrtoacd.html\", \n    \"methods_args\": {\n        \"as_user_set\": \"set_successfully\"\n    }, \n    \"passwds\": null, \n    \"ping_flag\": false, \n    \"ports\": null, \n    \"profile\": null, \n    \"results_path\": \"/home/am4n/owasp-nettacker/.data/results\", \n    \"retries\": 3, \n    \"scan_method\": [\n        \"port_scan\"\n    ], \n    \"socks_proxy\": null, \n    \"targets\": [\n        \"owasp.org\"\n    ], \n    \"thread_number\": 100, \n    \"thread_number_host\": 5, \n    \"time_sleep\": 0.0, \n    \"timeout_sec\": 3, \n    \"tmp_path\": \"/home/am4n/owasp-nettacker/.data/tmp\", \n    \"users\": null, \n    \"verbose_level\": 0\n}\n\n```\n\n----------------------------------------\n\nTITLE: Nettacker Command with Multiple Targets and Modules\nDESCRIPTION: This example shows how to use the `-i` option to specify multiple targets as a comma-separated string, along with module selection (-m), port range (-g), and thread count (-t). It demonstrates running the 'port_scan' module against a range of targets and specific ports.\nSOURCE: https://github.com/owasp/nettacker/blob/master/docs/Usage.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\npython nettacker.py -i 192.168.1.1,192.168.1.2-192.168.1.10,127.0.0.1,owasp.org,192.168.2.1/24 -m port_scan -g 20-100 -t 10\n```\n\n----------------------------------------\n\nTITLE: Nettacker Command with RIPE Database Range Scanning\nDESCRIPTION: These commands demonstrate using the `-r` option to automatically retrieve and scan IP ranges from the RIPE database based on the target domain. Subdomain scanning (`-s`) can be combined with RIPE range scanning. The second example shows comma separated targets with -s and -r parameters.\nSOURCE: https://github.com/owasp/nettacker/blob/master/docs/Usage.md#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\npython nettacker.py -i owasp.org -s -r -m port_scan -t 10 -M 35 -g 20-100 --graph d3_tree_v2_graph\npython nettacker.py -i nettackerwebsiteblabla.com,owasp.org,192.168.1.1 -s -r -m all -t 10 -M 35 -g 20-100 -o file.txt -u root,user -P passwords.txt\n```\n\n----------------------------------------\n\nTITLE: Nettacker Command with SOCKS Proxy\nDESCRIPTION: These commands demonstrate the usage of a SOCKS proxy for outgoing connections. The `--socks-proxy` option accepts a SOCKS proxy URL in the format `socks://host:port` or `socks[4|5]://host:port`. Authentication can be included in the URL: `socks://username:password@host:port`.\nSOURCE: https://github.com/owasp/nettacker/blob/master/docs/Usage.md#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\npython nettacker.py -i 192.168.1.1 -m tcp_connect_port_scan -T 5 --socks-proxy socks://127.0.0.1:9050\npython nettacker.py -i 192.168.1.1 -m tcp_connect_port_scan -T 5 --socks-proxy socks4://127.0.0.1:9050\npython nettacker.py -i 192.168.1.1 -m tcp_connect_port_scan -T 5 --socks-proxy socks5://127.0.0.1:9050\npython nettacker.py -i 192.168.1.1 -m tcp_connect_port_scan -T 5 --socks-proxy socks://username:password@127.0.0.1:9050\npython nettacker.py -i 192.168.1.1 -m tcp_connect_port_scan -T 5 --socks-proxy socks4://username:password@127.0.0.1:9050\npython nettacker.py -i 192.168.1.1 -m tcp_connect_port_scan -T 5 --socks-proxy socks5://username:password@127.0.0.1:9050\n```\n\n----------------------------------------\n\nTITLE: API Request Authentication\nDESCRIPTION: Demonstrates how to authenticate with the OWASP Nettacker API using the API key in GET, POST, and Cookie requests. It shows how to disable SSL warnings and verifies the authentication by checking the status code.\nSOURCE: https://github.com/owasp/nettacker/blob/master/docs/API.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> import requests\n>>> from requests.packages.urllib3.exceptions import InsecureRequestWarning\n>>> requests.packages.urllib3.disable_warnings(InsecureRequestWarning)\n>>> r = requests.get('https://127.0.0.1:5000/?key=8370bd0a0b9a98ac25b341833fb0fb07')\n>>> r.status_code\n200\n>>> r = requests.post('https://127.0.0.1:5000/', data={\"key\": \"8370bd0a0b9a98ac25b341833fb0fb07\"})\n>>> r.status_code\n200\n>>> r = requests.get('https://127.0.0.1:5000/', cookies={\"key\": \"8370bd0a0b9a98ac25b341833fb0fb07\"})\n>>> r.status_code\n200\n>>> r = requests.get('https://127.0.0.1:5000/new/scan', cookies={\"key\": \"wrong_key\"})\n>>> r.status_code\n401\n```\n\n----------------------------------------\n\nTITLE: Running Nettacker with Profiles\nDESCRIPTION: This snippet shows how to quickly run Nettacker using pre-defined profiles for vulnerability scanning and high severity assessments. It uses the `--profile` option to specify the profile to use.\nSOURCE: https://github.com/owasp/nettacker/blob/master/docs/Usage.md#_snippet_17\n\nLANGUAGE: python\nCODE:\n```\npython nettacker.py -i example.com --profile vulnerabilities\npython nettacker.py -i example.com --profile high_severity\n```\n\n----------------------------------------\n\nTITLE: Nettacker Port Scan\nDESCRIPTION: This command uses Nettacker to perform a port scan on the specified target domain ('z3r0d4y.com'). The '-i' flag specifies the target, and the '-m' flag specifies the module to use (port_scan).\nSOURCE: https://github.com/owasp/nettacker/blob/master/docs/Instructions-for-the-OWASP-Bay-Area-tutorial.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\npython nettacker.py -i z3r0d4y.com -m port_scan\n```\n\n----------------------------------------\n\nTITLE: Nettacker Default Port List\nDESCRIPTION: This JSON-like array represents the default list of ports that Nettacker scans if no specific port range is defined. To scan all ports, users should specify the range 1-65535 using the -g flag when running Nettacker.\nSOURCE: https://github.com/owasp/nettacker/blob/master/docs/Modules.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n[1, 3, 4, 6, 7, 9, 13, 17, 19, 20, 21, 22, 23, 24, 25, 26, 30, 32, 33, 37, 42,\n                            43, 49, 53, 67, 68, 69, 70, 79, 80, 81, 82, 83, 84, 85, 88, 89, 90, 99, 100, 106, 109, 110,\n                            111, 113, 119, 125, 135, 139, 143, 144, 146, 161, 162, 163, 179, 199, 211, 212, 222,\n                            254, 255, 256, 259, 264, 280, 301, 306, 311, 340, 366, 389, 406, 407, 416, 417,\n                            425, 427, 443, 444, 445, 458, 464, 465, 481, 497, 500, 512, 513, 514, 515, 524,\n                            541, 543, 544, 545, 548, 554, 555, 563, 587, 593, 616, 617, 625, 631, 636, 646,\n                            648, 666, 667, 668, 683, 687, 691, 700, 705, 711, 714, 720, 722, 726, 749, 765,\n                            777, 783, 787, 800, 801, 808, 843, 873, 880, 888, 898, 900, 901, 902, 903, 911,\n                            912, 981, 987, 990, 992, 993, 995, 999, 1000, 1001, 1002, 1007, 1009, 1010,\n                            1011, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032,\n                            1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045,\n                            1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058,\n                            1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071,\n                            1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084,\n                            1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097,\n                            1098, 1099, 1100, 1102, 1104, 1105, 1106, 1107, 1108, 1110, 1111, 1112, 1113,\n                            1114, 1117, 1119, 1121, 1122, 1123, 1124, 1126, 1130, 1131, 1132, 1137, 1138,\n                            1141, 1145, 1147, 1148, 1149, 1151, 1152, 1154, 1163, 1164, 1165, 1166, 1169,\n                            1174, 1175, 1183, 1185, 1186, 1187, 1192, 1198, 1199, 1201, 1213, 1216, 1217,\n                            1218, 1233, 1234, 1236, 1244, 1247, 1248, 1259, 1271, 1272, 1277, 1287, 1296,\n                            1300, 1301, 1309, 1310, 1311, 1322, 1328, 1334, 1352, 1417, 1433, 1434, 1443,\n                            1455, 1461, 1494, 1500, 1501, 1503, 1521, 1524, 1533, 1556, 1580, 1583, 1594,\n                            1600, 1641, 1658, 1666, 1687, 1688, 1700, 1717, 1718, 1719, 1720, 1721, 1723,\n                            1755, 1761, 1782, 1783, 1801, 1805, 1812, 1839, 1840, 1862, 1863, 1864, 1875,\n                            1900, 1914, 1935, 1947, 1971, 1972, 1974, 1984, 1998, 1999, 2000, 2001, 2002,\n                            2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2013, 2020, 2021, 2022, 2030,\n                            2033, 2034, 2035, 2038, 2040, 2041, 2042, 2043, 2045, 2046, 2047, 2048, 2049,\n                            2065, 2068, 2099, 2100, 2103, 2105, 2106, 2107, 2111, 2119, 2121, 2126, 2135,\n                            2144, 2160, 2161, 2170, 2179, 2190, 2191, 2196, 2200, 2222, 2251, 2260, 2288,\n                            2301, 2323, 2366, 2381, 2382, 2383, 2393, 2394, 2399, 2401, 2492, 2500, 2522,\n                            2525, 2557, 2601, 2602, 2604, 2605, 2607, 2608, 2638, 2701, 2702, 2710, 2717,\n                            2718, 2725, 2800, 2809, 2811, 2869, 2875, 2909, 2910, 2920, 2967, 2968, 2998,\n                            3000, 3001, 3003, 3005, 3006, 3007, 3011, 3013, 3017, 3030, 3031, 3052, 3071,\n                            3077, 3128, 3168, 3211, 3221, 3260, 3261, 3268, 3269, 3283, 3300, 3301, 3306,\n                            3322, 3323, 3324, 3325, 3333, 3351, 3367, 3369, 3370, 3371, 3372, 3389, 3390,\n                            3404, 3476, 3493, 3517, 3527, 3546, 3551, 3580, 3659, 3689, 3690, 3703, 3737,\n                            3766, 3784, 3800, 3801, 3809, 3814, 3826, 3827, 3828, 3851, 3869, 3871, 3878,\n                            3880, 3889, 3905, 3914, 3918, 3920, 3945, 3971, 3986, 3995, 3998, 4000, 4001,\n                            4002, 4003, 4004, 4005, 4006, 4045, 4111, 4125, 4126, 4129, 4224, 4242, 4279,\n                            4321, 4343, 4443, 4444, 4445, 4446, 4449, 4550, 4567, 4662, 4848, 4899, 4900,\n                            4998, 5000, 5001, 5002, 5003, 5004, 5009, 5030, 5033, 5050, 5051, 5054, 5060,\n                            5061, 5080, 5087, 5100, 5101, 5102, 5120, 5190, 5200, 5214, 5221, 5222, 5225,\n                            5226, 5269, 5280, 5298, 5357, 5405, 5414, 5431, 5432, 5440, 5500, 5510, 5544,\n                            5550, 5555, 5560, 5566, 5631, 5633, 5666, 5678, 5679, 5718, 5730, 5800, 5801,\n                            5802, 5810, 5811, 5815, 5822, 5825, 5850, 5859, 5862, 5877, 5900, 5901, 5902,\n                            5903, 5904, 5906, 5907, 5910, 5911, 5915, 5922, 5925, 5950, 5952, 5959, 5960,\n                            5961, 5962, 5963, 5987, 5988, 5989, 5998, 5999, 6000, 6001, 6002, 6003, 6004,\n                            6005, 6006, 6007, 6009, 6025, 6059, 6100, 6101, 6106, 6112, 6123, 6129, 6156,\n                            6346, 6389, 6502, 6510, 6543, 6547, 6565, 6566, 6567, 6580, 6646, 6666, 6667,\n                            6668, 6669, 6689, 6692, 6699, 6779, 6788, 6789, 6792, 6839, 6881, 6901, 6969,\n                            7000, 7001, 7002, 7004, 7007, 7019, 7025, 7070, 7100, 7103, 7106, 7200, 7201,\n                            7402, 7435, 7443, 7496, 7512, 7625, 7627, 7676, 7741, 7777, 7778, 7800, 7911,\n                            7920, 7921, 7937, 7938, 7999, 8000, 8001, 8002, 8007, 8008, 8009, 8010, 8011,\n                            8021, 8022, 8031, 8042, 8045, 8080, 8081, 8082, 8083, 8084, 8085, 8086, 8087,\n                            8088, 8089, 8090, 8093, 8099, 8100, 8180, 8181, 8192, 8193, 8194, 8200, 8222,\n                            8254, 8290, 8291, 8292, 8300, 8333, 8383, 8400, 8402, 8443, 8500, 8600, 8649,\n                            8651, 8652, 8654, 8701, 8800, 8873, 8888, 8899, 8994, 9000, 9001, 9002, 9003,\n                            9009, 9010, 9011, 9040, 9050, 9071, 9080, 9081, 9090, 9091, 9099, 9100, 9101,\n                            9102, 9103, 9110, 9111, 9200, 9207, 9220, 9290, 9415, 9418, 9485, 9500, 9502,\n                            9503, 9535, 9575, 9593, 9594, 9595, 9618, 9666, 9876, 9877, 9878, 9898, 9900,\n                            9917, 9929, 9943, 9944, 9968, 9998, 9999, 10000, 10001, 10002, 10003, 10004,\n                            10009, 10010, 10012, 10024, 10025, 10082, 10180, 10215, 10243, 10566, 10616,\n                            10617, 10621, 10626, 10628, 10629, 10778, 11110, 11111, 11967, 12000, 12174,\n                            12265, 12345, 13456, 13722, 13782, 13783, 14000, 14238, 14441, 14442, 15000,\n                            15002, 15003, 15004, 15660, 15742, 16000, 16001, 16012, 16016, 16018, 16080,\n                            16113, 16992, 16993, 17877, 17988, 18040, 18101, 18988, 19101, 19283, 19315,\n                            19350, 19780, 19801, 19842, 20000, 20005, 20031, 20221, 20222, 20828, 21571,\n                            22939, 23502, 24444, 24800, 25734, 25735, 26214, 27000, 27352, 27353, 27355,\n                            27356, 27715, 28201, 30000, 30718, 30951, 31038, 31337, 32768, 32769, 32770,\n                            32771, 32772, 32773, 32774, 32775, 32776, 32777, 32778, 32779, 32780, 32781,\n                            32782, 32783, 32784, 32785, 33354, 33899, 34571, 34572, 34573, 35500, 38292,\n                            40193, 40911, 41511, 42510, 44176, 44442, 44443, 44501, 45100, 48080, 49152,\n                            49153, 49154, 49155, 49156, 49157, 49158, 49159, 49160, 49161, 49163, 49165,\n                            49167, 49175, 49176, 49400, 49999, 50000, 50001, 50002, 50003, 50006, 50300,\n                            50389, 50500, 50636, 50800, 51103, 51493, 52673, 52822, 52848, 52869, 54045,\n                            54328, 55055, 55056, 55555, 55600, 56737, 56738, 57294, 57797, 58080, 60020,\n                            60443, 61532, 61900, 62078, 63331, 64623, 64680, 65000, 65129, 65389]\n```\n\n----------------------------------------\n\nTITLE: YAML Module Configuration Example\nDESCRIPTION: This YAML snippet demonstrates the configuration structure for a Nettacker module, showcasing the 'info' and 'payloads' sections. The 'info' section contains metadata like name, author, severity, and description. The 'payloads' section defines the module's behavior, including the HTTP method, headers, and URL format to fuzz. The 'response' section defines the conditions to check to determine if the payload was successful.\nSOURCE: https://github.com/owasp/nettacker/blob/master/docs/Developers.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\ninfo: # this section is to store information about module\n  name: dir_scan\n  author: OWASP Nettacker Team\n  severity: 3\n  description: Directory, Backup finder\n  reference: https://www.zaproxy.org/docs/alerts/10095/\n  profiles: # module will be added to below profiles and user can use --profile scan to run this and other modules in same profile\n    - scan\n    - http\n    - backup\n    - low_severity\n\npayloads: # this section stores the payloads\n  - library: http # the time of library, you can use multiple library if needed as an array\n    verify: false\n    timeout: 3\n    cert: \"\"\n    stream: false\n    proxies: \"\"\n    steps:\n      - method: get # type of request\n        headers: # headers\n          User-Agent: \"{user_agent}\" # this will be replaced by default user-agent or user input\n        URL: # URL is the input we want to fuzz\n          nettacker_fuzzer:\n            input_format: \"{{schema}}://{target}:{{ports}}/{{urls}}\" # format of url\n            prefix: \"\"\n            suffix: \"\"\n            interceptors:\n            data:\n              urls:\n                - \"administrator\"\n                - \"admin\"\n                - \"old\"\n                - \"_vti_bin\"\n                - \"_private\"\n                - \"cgi-bin\"\n                - \"public_html\"\n                - \"images\"\n              schema:\n                - \"http\"\n                - \"https\"\n              ports:\n                - 80\n                - 443\n        response: # response will check if the payload were success\n          condition_type: or # could be and/or\n          conditions: # could be in header/content/status_code/reason/timeresponse\n            status_code:\n              regex: 200|403|401\n              reverse: false # if true, it will reverse the regex\n```\n\n----------------------------------------\n\nTITLE: Nettacker Command with Graph Output\nDESCRIPTION: These commands showcase the generation of graph-based outputs. They specify targets using CIDR notation, select modules, define thread counts, and use the '--graph' option to create visualizations like 'd3_tree_v2_graph' and 'jit_circle_v1_graph'. The output is saved to HTML or JSON files using the `-o` option.\nSOURCE: https://github.com/owasp/nettacker/blob/master/docs/Usage.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\npython nettacker.py -i 192.168.1.1/24 -m port_scan -t 10 -M 35 -g 20-100 --graph d3_tree_v2_graph -o result.html\npython nettacker.py -i 192.168.1.1/24 -m port_scan -t 10 -M 35 -g 20-100 -o file.html --graph jit_circle_v1_graph\npython nettacker.py -i 192.168.1.1/24 -m all -t 10 -M 35 -g 20-100 -o result.json -u root,user -P passwords.txt\npython nettacker.py -i 192.168.1.1/24 -m all -x ssh_brute -t 10 -M 35 -g 20-100 -o file.txt -U users.txt -P passwords.txt -T 3 -w 2\n```\n\n----------------------------------------\n\nTITLE: Nettacker Command to Show All Modules\nDESCRIPTION: This command shows how to get the list of all available modules with details like name, author, severity, description, reference, and profiles, using the `--show-all-modules` flag.\nSOURCE: https://github.com/owasp/nettacker/blob/master/docs/Usage.md#_snippet_16\n\nLANGUAGE: python\nCODE:\n```\npython nettacker.py --show-all-modules\n```\n\n----------------------------------------\n\nTITLE: Nettacker Subdomain Scan\nDESCRIPTION: This command uses Nettacker to perform a subdomain scan on the specified target domain ('z3r0d4y.com'). The '-i' flag specifies the target, and the '-m' flag specifies the module to use (subdomain_scan).\nSOURCE: https://github.com/owasp/nettacker/blob/master/docs/Instructions-for-the-OWASP-Bay-Area-tutorial.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n> python nettacker.py -i z3r0d4y.com -m subdomain_scan\n```\n\n----------------------------------------\n\nTITLE: Nettacker Command with Whatcms Scan\nDESCRIPTION: This command demonstrates how to use the 'whatcms_scan' module, requiring an API key provided via the `--method-args` parameter. It scans a specified target to identify the content management system used.\nSOURCE: https://github.com/owasp/nettacker/blob/master/docs/Usage.md#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\npython nettacker.py -i eng.uber.com -m whatcms_scan --method-args whatcms_api_key=XXXX\n```\n\n----------------------------------------\n\nTITLE: Nettacker Command with Subdomain Scanning\nDESCRIPTION: This command demonstrates subdomain scanning using the `-s` option in conjunction with the port scanning module. The target domain is specified using the `-i` option.\nSOURCE: https://github.com/owasp/nettacker/blob/master/docs/Usage.md#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\npython nettacker.py -i owasp.org -s -m port_scan -t 10 -M 35 -g 20-100 --graph d3_tree_v2_graph\n```\n\n----------------------------------------\n\nTITLE: Searching Hosts - Python\nDESCRIPTION: This snippet demonstrates how to search for hosts in the Nettacker API using a GET request with a query parameter. It retrieves a list of hosts based on the search query 'port_scan' and page number 3.\nSOURCE: https://github.com/owasp/nettacker/blob/master/docs/API.md#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n>>> r = s.get(\"https://localhost:5000/logs/search?q=port_scan&page=3\")\n>>> print r.content\n[\n  {\n    \"host\": \"owasp4.owasp.org\",\n    \"info\": {\n      \"category\": [\n        \"scan\"\n      ],\n      \"descriptions\": [\n        \"22/TCP_CONNECT\",\n        \"80/TCP_CONNECT\"\n      ],\n      \"open_ports\": [\n        22,\n        80\n      ],\n      \"scan_methods\": [\n        \"port_scan\"\n      ]\n    }\n  },\n  {\n    \"host\": \"new-wiki.owasp.org\",\n    \"info\": {\n      \"category\": [\n        \"scan\"\n      ],\n      \"descriptions\": [\n        \"22/TCP_CONNECT\",\n        \"80/TCP_CONNECT\"\n      ],\n      \"open_ports\": [\n        22,\n        80\n      ],\n      \"scan_methods\": [\n        \"port_scan\"\n      ]\n    }\n  },\n  {\n    \"host\": \"cheesemonkey.owasp.org\",\n    \"info\": {\n      \"category\": [\n        \"scan\"\n      ],\n      \"descriptions\": [\n        \"80/TCP_CONNECT\"\n      ],\n      \"open_ports\": [\n        80\n      ],\n      \"scan_methods\": [\n        \"port_scan\"\n      ]\n    }\n  },\n  {\n    \"host\": \"5.79.66.240\",\n    \"info\": {\n      \"category\": [\n        \"scan\"\n      ],\n      \"descriptions\": [\n        \"filesmog.com\",\n        \"\\u062f\\u0631\\u06af\\u0627\\u0647 \\u0628\\u0627\\u0632\"\n      ],\n      \"open_ports\": [\n        5901,\n        6001,\n        22\n      ],\n      \"scan_methods\": [\n        \"viewdns_reverse_ip_lookup_scan\",\n        \"port_scan\"\n      ]\n    }\n  },\n  {\n    \"host\": \"5.79.66.237\",\n    \"info\": {\n      \"category\": [\n        \"scan\"\n      ],\n      \"descriptions\": [\n        \"\\u062f\\u0631\\u06af\\u0627\\u0647 \\u0628\\u0627\\u0632\",\n        \"http://5.79.66.237/robots.txt \\u067e\\u06cc\\u062f\\u0627 \\u0634\\u062f!(OK:200)\",\n        \"http://5.79.66.237/.htaccess.txt \\u067e\\u06cc\\u062f\\u0627 \\u0634\\u062f!(Forbidden:403)\",\n        \"http://5.79.66.237/.htaccess.save \\u067e\\u06cc\\u062f\\u0627 \\u0634\\u062f!(Forbidden:403)\",\n        \"http://5.79.66.237/phpmyadmin \\u067e\\u06cc\\u062f\\u0627 \\u0634\\u062f!(OK:200)\",\n        \"http://5.79.66.237/.htaccess.old \\u067e\\u06cc\\u062f\\u0627 \\u0634\\u062f!(Forbidden:403)\",\n        \"http://5.79.66.237/.htaccess \\u067e\\u06cc\\u062f\\u0627 \\u0634\\u062f!(Forbidden:403)\",\n        \"http://5.79.66.237/server-status \\u067e\\u06cc\\u062f\\u0627 \\u0634\\u062f!(Forbidden:403)\",\n        \"http://5.79.66.237//phpmyadmin/ \\u067e\\u06cc\\u062f\\u0627 \\u0634\\u062f!(OK:200)\",\n        \"http://5.79.66.237//phpMyAdmin/ \\u067e\\u06cc\\u062f\\u0627 \\u0634\\u062f!(OK:200)\",\n        \"offsec.ir\"\n      ],\n      \"open_ports\": [\n        8083,\n        8000,\n        443,\n        80,\n        22,\n        21\n      ],\n      \"scan_methods\": [\n        \"port_scan\",\n        \"dir_scan\",\n        \"pma_scan\",\n        \"viewdns_reverse_ip_lookup_scan\"\n      ]\n    }\n  },\n  {\n    \"host\": \"192.168.1.124\",\n    \"info\": {\n      \"category\": [\n        \"scan\"\n      ],\n      \"descriptions\": [\n        \"2179/TCP_CONNECT\",\n        \"445/TCP_CONNECT\",\n        \"135/TCP_CONNECT\",\n        \"22/TCP_CONNECT\",\n        \"139/TCP_CONNECT\",\n        \"zhanpang.cn\",\n        \"yowyeh.cn\",\n        \"treelights.website\",\n        \"sxyhed.com\",\n        \"redlxin.com\",\n        \"ppoo6.com\",\n        \"miancan.cn\",\n        \"maynard.top\",\n        \"liyedai.site\",\n        \"linterfund.com\",\n        \"li5xs.com\",\n        \"hxinglan.win\",\n        \"heresylly.top\",\n        \"gzptjwangye.bid\",\n        \"eatpeanutfree.com\",\n        \"comgmultiservices.com\",\n        \"biyao123.com\"\n      ],\n      \"open_ports\": [\n        2179,\n        445,\n        135,\n        22,\n        139\n      ],\n      \"scan_methods\": [\n        \"port_scan\",\n        \"viewdns_reverse_ip_lookup_scan\"\n      ]\n    }\n  },\n  {\n    \"host\": \"192.168.1.127\",\n    \"info\": {\n      \"category\": [\n        \"scan\"\n      ],\n      \"descriptions\": [\n        \"49152/TCP_CONNECT\",\n        \"49154/TCP_CONNECT\",\n        \"49155/TCP_CONNECT\",\n        \"49153/TCP_CONNECT\"\n      ],\n      \"open_ports\": [\n        49152,\n        49154,\n        49155,\n        49153\n      ],\n      \"scan_methods\": [\n        \"port_scan\"\n      ]\n    }\n  }\n]\n\n>>>\n```\n\n----------------------------------------\n\nTITLE: Starting Nettacker API with Host, Port, and Access Key - Python\nDESCRIPTION: This command demonstrates starting the Nettacker API by specifying a custom host address, port number, and access key. This configuration allows the API to be accessed remotely with authentication.\nSOURCE: https://github.com/owasp/nettacker/blob/master/docs/Usage.md#_snippet_29\n\nLANGUAGE: python\nCODE:\n```\npython nettacker.py --start-api --api-access-key mysecretkey --api-host 192.168.1.2 --api-port 80\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Scan Result - Python\nDESCRIPTION: This snippet demonstrates how to retrieve a scan result from the Nettacker API using a GET request. It uses the `requests` library to make the request and prints the first 500 characters of the response content.\nSOURCE: https://github.com/owasp/nettacker/blob/master/docs/API.md#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n>>> r = s.get(\"https://localhost:5000/results/get?id=8\")\n>>> print r.content[:500]\n<!DOCTYPE html>\n<!-- THIS PAGE COPIED AND MODIFIED FROM http://bl.ocks.org/robschmuecker/7880033-->\n<title>OWASP Nettacker Report</title>\n<meta charset=\"utf-8\">\n<div class=\"header\">\n    <h3><a href=\"https://github.com/zdresearch/nettacker\">OWASP Nettacker</a></h3>\n    <h3>Penetration Testing Graphs</h3>\n</div>\n<style type=\"text/css\">\n\n\t.header{\n    margin:2%;\n    text-align:center;\n  }\n  .node {\n    cursor: pointer;\n  }\n\n  .overlay{\n      background-color:#EEE;\n  }\n\n  .node circle {\n    fill: #f\n\n...\n\n```\n\n----------------------------------------\n\nTITLE: Starting Nettacker API with Port, Debug Mode, and Access Logging - Python\nDESCRIPTION: This command starts the Nettacker API with a custom port, debug mode enabled, and access logging. Debug mode provides more verbose output, which is useful for development.\nSOURCE: https://github.com/owasp/nettacker/blob/master/docs/Usage.md#_snippet_30\n\nLANGUAGE: python\nCODE:\n```\npython nettacker.py --start-api --api-access-log --api-port 8080 --api-debug-mode\n```\n\n----------------------------------------\n\nTITLE: Generating HTML Report - Python\nDESCRIPTION: This snippet generates an HTML report for a specific host using the Nettacker API. It retrieves the HTML content from the `/logs/get_html` endpoint and prints the first 1000 characters.\nSOURCE: https://github.com/owasp/nettacker/blob/master/docs/API.md#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n>>> r = s.get(\"https://localhost:5000/logs/get_html?host=127.0.0.1\")\n>>> print r.content[:1000]\n<!DOCTYPE html>\n<!-- THIS PAGE COPIED AND MODIFIED FROM http://bl.ocks.org/robschmuecker/7880033-->\n<title>OWASP Nettacker Report</title>\n<meta charset=\"utf-8\">\n<div class=\"header\">\n    <h3><a href=\"https://github.com/zdresearch/nettacker\">OWASP Nettacker</a></h3>\n    <h3>Penetration Testing Graphs</h3>\n</div>\n<style type=\"text/css\">\n\n\t.header{\n    margin:2%;\n    text-align:center;\n  }\n  .node {\n    cursor: pointer;\n  }\n\n  .overlay{\n      background-color:#EEE;\n  }\n\n  .node circle {\n    fill: #fff;\n    stroke: steelblue;\n    stroke-width: 1.5px;\n  }\n\n  .node text {\n    font-size:12px;\n    font-family:sans-serif;\n  }\n...\n...\n>>>\n```\n\n----------------------------------------\n\nTITLE: Install Nettacker Using Docker (docker)\nDESCRIPTION: These commands pull the Nettacker Docker image from Docker Hub and then run it in interactive mode, providing a shell inside the container.\nSOURCE: https://github.com/owasp/nettacker/blob/master/docs/Installation.md#_snippet_8\n\nLANGUAGE: docker\nCODE:\n```\ndocker pull owasp/nettacker\ndocker run -it owasp/nettacker /bin/bash\n```\n\n----------------------------------------\n\nTITLE: Retrieving and Printing Nettacker Results List in Python\nDESCRIPTION: This code snippet retrieves a list of results from the Nettacker API using a GET request to the `/results/get_list` endpoint. It then parses the JSON response and prints it to the console with indentation for readability. The 'page' parameter specifies the page number of the results to retrieve.\nSOURCE: https://github.com/owasp/nettacker/blob/master/docs/API.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> r = s.get(\"https://localhost:5000/results/get_list?page=1\")\n>>> print(json.dumps(json.loads(r.content), sort_keys=True, indent=4))\n```\n\n----------------------------------------\n\nTITLE: Nettacker Usage Synopsis\nDESCRIPTION: This snippet shows the synopsis and a subset of arguments for using Nettacker from the command line, describing options for engine configuration, target specification, scan method selection, and API configuration. The options included allow for setting verbosity levels, output file names, and target inputs.\nSOURCE: https://github.com/owasp/nettacker/blob/master/docs/Usage.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nusage: Nettacker [-L LANGUAGE] [-v] [--verbose-event] [-V] [-o REPORT_PATH_FILENAME] [--graph GRAPH_NAME] [-h]\n                 [-i TARGETS] [-l TARGETS_LIST] [-m SELECTED_MODULES] [--modules-extra-args MODULES_EXTRA_ARGS]\n                 [--show-all-modules] [--profile PROFILES] [--show-all-profiles] [-x EXCLUDED_MODULES] [-u USERNAMES]\n                 [-U USERNAMES_LIST] [-p PASSWORDS] [-P PASSWORDS_LIST] [-g PORTS] [--user-agent USER_AGENT]\n                 [-T TIMEOUT] [-w TIME_SLEEP_BETWEEN_REQUESTS] [-r] [-s] [-d] [-t THREAD_PER_HOST]\n                 [-M PARALLEL_MODULE_SCAN] [--set-hardware-usage SET_HARDWARE_USAGE] [-R SOCKS_PROXY]\n                 [--retries RETRIES] [--ping-before-scan] [-K SCAN_COMPARE_ID] [-J COMPARE_REPORT_PATH_FILENAME]\n                 [--start-api] [--api-host API_HOSTNAME] [--api-port API_PORT] [--api-debug-mode]\n                 [--api-access-key API_ACCESS_KEY] [--api-client-whitelisted-ips API_CLIENT_WHITELISTED_IPS]\n                 [--api-access-log API_ACCESS_LOG] [--api-cert API_CERT] [--api-cert-key API_CERT_KEY]\n```\n\n----------------------------------------\n\nTITLE: Python Requests Library Looping Example\nDESCRIPTION: This Python snippet illustrates how Nettacker handles multiple values in YAML arrays by creating multiple HTTP requests. It shows how the framework iterates over the 'urls', 'schema', and 'ports' arrays in the YAML configuration to generate a series of `requests.get()` calls with different URL combinations.\nSOURCE: https://github.com/owasp/nettacker/blob/master/docs/Developers.md#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nlib.get(verify=False, timeout=3, cert=\"\", stream=False, proxies=\"\", url=\"https://www.owasp.org:443/url1\", headers={'User-Agent': 'whatever'})\nlib.get(verify=False, timeout=3, cert=\"\", stream=False, proxies=\"\", url=\"https://www.owasp.org:443/url2\", headers={'User-Agent': 'whatever'})\nlib.get(verify=False, timeout=3, cert=\"\", stream=False, proxies=\"\", url=\"https://www.owasp.org:443/url3\", headers={'User-Agent': 'whatever'})\nlib.get(verify=False, timeout=3, cert=\"\", stream=False, proxies=\"\", url=\"https://www.owasp.org:443/url4\", headers={'User-Agent': 'whatever'})\n```\n\nLANGUAGE: Python\nCODE:\n```\ndynamics: http, https, url1, url2 , url3, url4, port 80, port 443\n# https\nlib.get(verify=False, timeout=3, cert=\"\", stream=False, proxies=\"\", url=\"https://www.owasp.org:443/url1\", headers={'User-Agent': 'whatever'})\nlib.get(verify=False, timeout=3, cert=\"\", stream=False, proxies=\"\", url=\"https://www.owasp.org:443/url2\", headers={'User-Agent': 'whatever'})\nlib.get(verify=False, timeout=3, cert=\"\", stream=False, proxies=\"\", url=\"https://www.owasp.org:443/url3\", headers={'User-Agent': 'whatever'})\nlib.get(verify=False, timeout=3, cert=\"\", stream=False, proxies=\"\", url=\"https://www.owasp.org:443/url4\", headers={'User-Agent': 'whatever'})\n# http\nlib.get(verify=False, timeout=3, cert=\"\", stream=False, proxies=\"\", url=\"http://www.owasp.org:80/url1\", headers={'User-Agent': 'whatever'})\nlib.get(verify=False, timeout=3, cert=\"\", stream=False, proxies=\"\", url=\"http://www.owasp.org:80/url2\", headers={'User-Agent': 'whatever'})\nlib.get(verify=False, timeout=3, cert=\"\", stream=False, proxies=\"\", url=\"http://www.owasp.org:80/url3\", headers={'User-Agent': 'whatever'})\nlib.get(verify=False, timeout=3, cert=\"\", stream=False, proxies=\"\", url=\"http://www.owasp.org:80/url4\", headers={'User-Agent': 'whatever'})\n\n# https on 80\nlib.get(verify=False, timeout=3, cert=\"\", stream=False, proxies=\"\", url=\"https://www.owasp.org:80/url1\", headers={'User-Agent': 'whatever'})\nlib.get(verify=False, timeout=3, cert=\"\", stream=False, proxies=\"\", url=\"https://www.owasp.org:80/url2\", headers={'User-Agent': 'whatever'})\nlib.get(verify=False, timeout=3, cert=\"\", stream=False, proxies=\"\", url=\"https://www.owasp.org:80/url3\", headers={'User-Agent': 'whatever'})\nlib.get(verify=False, timeout=3, cert=\"\", stream=False, proxies=\"\", url=\"https://www.owasp.org:80/url4\", headers={'User-Agent': 'whatever'})\n\n# http on 443\nlib.get(verify=False, timeout=3, cert=\"\", stream=False, proxies=\"\", url=\"http://www.owasp.org:443/url1\", headers={'User-Agent': 'whatever'})\nlib.get(verify=False, timeout=3, cert=\"\", stream=False, proxies=\"\", url=\"http://www.owasp.org:443/url2\", headers={'User-Agent': 'whatever'})\nlib.get(verify=False, timeout=3, cert=\"\", stream=False, proxies=\"\", url=\"http://www.owasp.org:443/url3\", headers={'User-Agent': 'whatever'})\nlib.get(verify=False, timeout=3, cert=\"\", stream=False, proxies=\"\", url=\"http://www.owasp.org:443/url4\", headers={'User-Agent': 'whatever'})\n```\n\n----------------------------------------\n\nTITLE: Starting Nettacker API with Multiple Options - Python\nDESCRIPTION: This command shows how to start the Nettacker API with multiple options enabled, including an access key, client whitelist, and access logging.  Combining options allows for increased security and auditability.\nSOURCE: https://github.com/owasp/nettacker/blob/master/docs/Usage.md#_snippet_28\n\nLANGUAGE: python\nCODE:\n```\npython nettacker.py --start-api --api-access-key mysecretkey --api-client-white-list --api-access-log \npython nettacker.py --start-api --api-access-key mysecretkey --api-client-white-list --api-access-log \n```\n\n----------------------------------------\n\nTITLE: Retrieving Host List - Python\nDESCRIPTION: This snippet demonstrates how to retrieve a list of hosts from the Nettacker API using a GET request. The response is parsed as JSON and then pretty-printed using `json.dumps` for readability.\nSOURCE: https://github.com/owasp/nettacker/blob/master/docs/API.md#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n>>> r = s.get(\"https://localhost:5000/logs/search?q=&page=1\")\n>>> print json.dumps(json.loads(r.content), sort_keys=True, indent=4)\n[\n    {\n        \"host\": \"owasp.org\", \n        \"info\": {\n            \"category\": [\n                \"scan\"\n            ], \n            \"descriptions\": [\n                \"8443/http/TCP_CONNECT\", \n                \"80/http/TCP_CONNECT\", \n                \"443/http/TCP_CONNECT\"\n            ], \n            \"open_ports\": [], \n            \"scan_methods\": [\n                \"port_scan\"\n            ]\n        }\n    }\n]\n\n\n>>>\n```\n\n----------------------------------------\n\nTITLE: Nettacker CLI Help Menu\nDESCRIPTION: This code snippet displays the help menu for the Nettacker penetration testing tool. It shows the available command-line options for configuring and running scans, including target specification, module selection, API configuration, and other scan parameters. This provides a guide to using Nettacker from the command line.\nSOURCE: https://github.com/owasp/nettacker/blob/master/docs/Usage.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npython3 nettacker.py --help\n```\n\n----------------------------------------\n\nTITLE: Nettacker Command with Module Selection Pattern\nDESCRIPTION: These commands showcase the usage of the `*` wildcard character in module selection.  The pattern `*_scan` selects all modules ending with `_scan`.  Multiple patterns can be specified, separated by commas, such as `*_scan,*_vuln`.\nSOURCE: https://github.com/owasp/nettacker/blob/master/docs/Usage.md#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\npython nettacker.py -i 192.168.1.1/24 -m *_scan\npython nettacker.py -i 192.168.1.1/24 -m *_scan,*_vuln\n```\n\n----------------------------------------\n\nTITLE: Getting Scan Result as JSON - Python\nDESCRIPTION: This snippet fetches scan results for a host in JSON format. It calls the `/logs/get_json` endpoint with the host as a parameter and then prints the JSON response in a pretty format.\nSOURCE: https://github.com/owasp/nettacker/blob/master/docs/API.md#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n>>> r = s.get(\"https://localhost:5000/logs/get_json?host=owasp.org\")\n>>> print(json.dumps(json.loads(r.content), sort_keys=True, indent=4))\n[\n    {\n        \"DESCRIPTION\": \"443/http/TCP_CONNECT\", \n        \"HOST\": \"owasp.org\", \n        \"PASSWORD\": \"\", \n        \"PORT\": \"443\", \n        \"SCAN_ID\": \"708e1dcf0f2ce9fe71038ccea7bf28bb\", \n        \"TIME\": \"2020-06-09 10:36:59\", \n        \"TYPE\": \"port_scan\", \n        \"USERNAME\": \"\"\n    }, \n    {\n        \"DESCRIPTION\": \"80/http/TCP_CONNECT\", \n        \"HOST\": \"owasp.org\", \n        \"PASSWORD\": \"\", \n        \"PORT\": \"80\", \n        \"SCAN_ID\": \"708e1dcf0f2ce9fe71038ccea7bf28bb\", \n        \"TIME\": \"2020-06-09 10:36:59\", \n        \"TYPE\": \"port_scan\", \n        \"USERNAME\": \"\"\n    }, \n    {\n        \"DESCRIPTION\": \"8443/http/TCP_CONNECT\", \n        \"HOST\": \"owasp.org\", \n        \"PASSWORD\": \"\", \n        \"PORT\": \"8443\", \n        \"SCAN_ID\": \"708e1dcf0f2ce9fe71038ccea7bf28bb\", \n        \"TIME\": \"2020-06-09 10:38:17\", \n        \"TYPE\": \"port_scan\", \n        \"USERNAME\": \"\"\n    }\n]\n>>>\n```\n\n----------------------------------------\n\nTITLE: Python Requests Library Example\nDESCRIPTION: This Python snippet demonstrates how the YAML configuration for the 'http' protocol in Nettacker modules translates to a Python `requests` library call. It shows how parameters like `verify`, `timeout`, `cert`, `stream`, `proxies`, `url`, and `headers` are passed to the `requests.get()` function.\nSOURCE: https://github.com/owasp/nettacker/blob/master/docs/Developers.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nIn [5]: import requests\n\nIn [6]: lib=requests\n\nIn [7]: lib.get(verify=False, timeout=3, cert=\"\", stream=False, proxies=\"\", url=\"https://www.owasp.org:443/url\", headers={'User-Agent': 'whatever'})\n```\n\n----------------------------------------\n\nTITLE: Install Nettacker with PIPX (bash)\nDESCRIPTION: This command installs Nettacker using pipx, creating an isolated environment for the tool. Afterwards, it tests the installation by showing help.\nSOURCE: https://github.com/owasp/nettacker/blob/master/docs/Installation.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npipx install nettacker\nettacker --help\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Profiles in Nettacker\nDESCRIPTION: This example demonstrates how to add a custom profile to a module in Nettacker. It involves editing the YAML file of a specific module (e.g., `subdomain_scan`) and adding the desired profile name to the `profiles` list. This allows the module to be included when the custom profile is specified during a scan.\nSOURCE: https://github.com/owasp/nettacker/blob/master/docs/Usage.md#_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\ninfo:\n  name: subdomain_scan\n  author: OWASP Nettacker Team\n  severity: 0\n  description: Find subdomains using different sources on internet\n  reference:\n  profiles:\n    - scan\n    - information_gathering\n    - infortmation\n    - info\n    - low_severity\n    - asset_discovery(new added profile)\n```\n\n----------------------------------------\n\nTITLE: Nettacker API Configuration\nDESCRIPTION: This snippet shows the API configuration settings within the `nettacker_api_config()` function in `config.py`. It includes parameters such as `api_hostname`, `api_port`, `api_debug_mode`, `api_access_key`, and `api_client_whitelisted_ips`.\nSOURCE: https://github.com/owasp/nettacker/blob/master/docs/Usage.md#_snippet_21\n\nLANGUAGE: python\nCODE:\n```\ndef nettacker_api_config():\n    \"\"\"\n    API Config (could be modify by user)\n\n    Returns:\n        a JSON with API configuration\n    \"\"\"\n    return {  # OWASP Nettacker API Default Configuration\n        \"start_api_server\": False,\n        \"api_hostname\": \"0.0.0.0\" if os.environ.get(\"docker_env\") == \"true\" else \"nettacker-api.z3r0d4y.com\",\n        \"api_port\": 5000,\n        \"api_debug_mode\": False,\n        \"api_access_key\": generate_random_token(32),\n        \"api_client_whitelisted_ips\": [],  # disabled - to enable please put an array with list of ips/cidr/ranges\n        # [\n        #     \"127.0.0.1\",\n        #     \"10.0.0.0/24\",\n        #     \"192.168.1.1-192.168.1.255\"\n        # ],\n        \"api_access_log\": os.path.join(sys.path[0], '.data/nettacker.log'),\n    }\n```\n\n----------------------------------------\n\nTITLE: Install Nettacker via Git Clone and PIP (bash)\nDESCRIPTION: These commands clone the Nettacker repository, create and activate a virtual environment, then install Nettacker from the local directory using pip. Afterwards, it tests the installation by showing help via python3.\nSOURCE: https://github.com/owasp/nettacker/blob/master/docs/Installation.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt update\nsudo apt install python3-venv python3-pip git\npython3 -m venv venv\n. venv/bin/activate\ngit clone https://github.com/OWASP/Nettacker --depth 1\ncd Nettacker\npip3 install .\npython3 nettacker.py --help\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Settings in Nettacker\nDESCRIPTION: This snippet illustrates how to modify default settings such as `timeout`, `socks proxy`, `target`, and `ports` in Nettacker by editing the `nettacker_user_application_config()` function in the `config.py` file. The configuration is defined in JSON format.\nSOURCE: https://github.com/owasp/nettacker/blob/master/docs/Usage.md#_snippet_19\n\nLANGUAGE: python\nCODE:\n```\ndef nettacker_user_application_config():\n    \"\"\"\n    core framework default config (could be modify by user)\n\n    Returns:\n        a JSON with all user default configurations\n    \"\"\"\n    from core.compatible import version_info\n    return {  # OWASP Nettacker Default Configuration\n        \"language\": \"en\",\n        \"verbose_mode\": False,\n        \"show_version\": False,\n        \"report_path_filename\": \"{results_path}/results_{date_time}_{random_chars}.html\".format(\n            results_path=nettacker_paths()[\"results_path\"],\n            date_time=now(model=\"%Y_%m_%d_%H_%M_%S\"),\n            random_chars=generate_random_token(10)\n        ),\n        \"graph_name\": \"d3_tree_v2_graph\",\n        \"show_help_menu\": False,\n        \"targets\": None,\n        \"targets_list\": None,\n        \"selected_modules\": None,\n        \"excluded_modules\": None,\n        \"usernames\": None,\n        \"usernames_list\": None,\n        \"passwords\": None,\n        \"passwords_list\": None,\n        \"ports\": None,\n        \"timeout\": 3.0,\n        \"time_sleep_between_requests\": 0.0,\n        \"scan_ip_range\": False,\n        \"scan_subdomains\": False,\n        \"thread_per_host\": 250,\n        \"parallel_module_scan\": 20,\n        \"socks_proxy\": None,\n        \"retries\": 1,\n        \"ping_before_scan\": False,\n        \"profiles\": None,\n        \"set_hardware_usage\": \"maximum\",  # low, normal, high, maximum\n        \"user_agent\": \"Nettacker {version_number} {version_code} - https://github.com/OWASP/Nettacker\".format(\n            version_number=version_info()[0], version_code=version_info()[1]\n        ),\n        \"show_all_modules\": False,\n        \"show_all_profiles\": False,\n        \"modules_extra_args\": None\n    }\n```\n\n----------------------------------------\n\nTITLE: Install Nettacker with PIP and VENV (bash)\nDESCRIPTION: These commands create a virtual environment, activate it, and install Nettacker from PyPI using pip.  Afterwards, it tests the installation by showing help.\nSOURCE: https://github.com/owasp/nettacker/blob/master/docs/Installation.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt update\nsudo apt install python3-venv python3-pip\npython3 -m venv venv\n. venv/bin/activate\npip3 install nettacker\nettacker --help\n```\n\n----------------------------------------\n\nTITLE: Starting Nettacker API with Access Logging and Filename - Python\nDESCRIPTION: This command starts the Nettacker API with access logging and specifies the filename for the log. The log will contain records of API access.\nSOURCE: https://github.com/owasp/nettacker/blob/master/docs/Usage.md#_snippet_27\n\nLANGUAGE: python\nCODE:\n```\npython nettacker.py --start-api --api-access-log --api-access-log-filename log.txt\n```\n\n----------------------------------------\n\nTITLE: Nettacker Command with Profiles\nDESCRIPTION: These commands demonstrate how to use profiles for module selection. A profile is a predefined set of modules. The `--profile` option accepts a single profile name or a comma-separated list of profiles. The 'all' profile includes all modules.\nSOURCE: https://github.com/owasp/nettacker/blob/master/docs/Usage.md#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\npython nettacker.py -i 192.168.1.1/24 --profile information_gathering\npython nettacker.py -i 192.168.1.1/24 --profile information_gathering,vulnerabilities\npython nettacker.py -i 192.168.1.1/24 --profile all\n```\n\n----------------------------------------\n\nTITLE: Running Nettacker Help\nDESCRIPTION: This command executes the Nettacker script with the '-h' flag to display the help menu, showing available options and usage instructions. It confirms that Nettacker is installed and executable.\nSOURCE: https://github.com/owasp/nettacker/blob/master/docs/Instructions-for-the-OWASP-Bay-Area-tutorial.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n> python nettacker.py -h\n```\n\n----------------------------------------\n\nTITLE: Nettacker SSH Brute-Force\nDESCRIPTION: This command attempts an SSH brute-force attack on the specified target ('tg1.z3r0d4y.com'). The '-i' flag specifies the target, '-m' specifies the module (ssh_brute), '-T' sets the number of threads to 10, and '-v' sets the verbosity level to 5.\nSOURCE: https://github.com/owasp/nettacker/blob/master/docs/Instructions-for-the-OWASP-Bay-Area-tutorial.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\n> python nettacker.py -i tg1.z3r0d4y.com -m ssh_brute -T 10 -v 5\n```\n\n----------------------------------------\n\nTITLE: Cloning and Installing Nettacker\nDESCRIPTION: This command clones the Nettacker repository from GitHub, navigates to the project directory, and installs the required Python packages using pip.\nSOURCE: https://github.com/owasp/nettacker/blob/master/docs/Instructions-for-the-OWASP-Bay-Area-tutorial.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n> git clone https://github.com/zdresearch/OWASP-Nettacker.git && cd OWASP-Nettacker && pip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: MySQL Database Configuration - Python\nDESCRIPTION: This code snippet shows how to configure a MySQL database for Nettacker. It requires setting the database name, username, password, host, and port to connect to the MySQL server.\nSOURCE: https://github.com/owasp/nettacker/blob/master/docs/Usage.md#_snippet_32\n\nLANGUAGE: python\nCODE:\n```\nreturn {\n        \"DB\": \"mysql\",\n        \"DATABASE\": \"nettacker\", # This is the name of your db\n        \"USERNAME\": \"username\",\n        \"PASSWORD\": \"password\",\n        \"HOST\": \"localhost or some other host\",\n        \"PORT\": \"3306 or some other custom port\"\n    }\n```\n\n----------------------------------------\n\nTITLE: Postgres Database Configuration - Python\nDESCRIPTION: This code snippet demonstrates the configuration for connecting to a Postgres database within Nettacker. It specifies database name, username, password, host, and port for the connection.\nSOURCE: https://github.com/owasp/nettacker/blob/master/docs/Usage.md#_snippet_34\n\nLANGUAGE: python\nCODE:\n```\nreturn {\n        \"DB\": \"postgreas\",\n        \"DATABASE\": \"nettacker\" # Name of db\n        \"USERNAME\": \"username\",\n        \"PASSWORD\": \"password\",\n        \"HOST\": \"localhost or some other host\",\n        \"PORT\": \"5432 or some other custom port\"\n    }\n```\n\n----------------------------------------\n\nTITLE: SQLite Database Configuration - Python\nDESCRIPTION: This code snippet demonstrates the configuration of an SQLite database for Nettacker.  It defines the database type and the path to the database file. The username, password, host and port are left empty since SQLite does not use them.\nSOURCE: https://github.com/owasp/nettacker/blob/master/docs/Usage.md#_snippet_31\n\nLANGUAGE: python\nCODE:\n```\nreturn {\n        \"DB\": \"sqlite\",\n        \"DATABASE\":  _paths()[\"home_path\"] + \"/nettacker.db\", # This is the location of your db\n        \"USERNAME\": \"\",\n        \"PASSWORD\": \"\",\n        \"HOST\": \"\",\n        \"PORT\": \"\"\n    }\n```\n\n----------------------------------------\n\nTITLE: Starting Nettacker API with Access Key - Python\nDESCRIPTION: This command shows how to start the Nettacker API with an access key for authentication.  Using an access key provides a simple way to secure the API.\nSOURCE: https://github.com/owasp/nettacker/blob/master/docs/Usage.md#_snippet_23\n\nLANGUAGE: python\nCODE:\n```\npython nettacker.py --start-api --api-access-key mysecretkey\n```\n\n----------------------------------------\n\nTITLE: Nettacker Language Flag Usage\nDESCRIPTION: This snippet demonstrates how to set the language for Nettacker's output using the `-L` flag. The value `fa` represents the Farsi language. Requires a Nettacker installation and a terminal.\nSOURCE: https://github.com/owasp/nettacker/blob/master/docs/Usage.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n$ nettacker -L fa\n```\n\n----------------------------------------\n\nTITLE: Starting Nettacker API with Certificates - Python\nDESCRIPTION: This command demonstrates how to start the Nettacker API using SSL certificates for secure communication. It requires the paths to the certificate file and the certificate key file.\nSOURCE: https://github.com/owasp/nettacker/blob/master/docs/Usage.md#_snippet_22\n\nLANGUAGE: python\nCODE:\n```\npython nettacker.py --start-api --api-cert ~/cert.crt --api-cert-key ~/key.pem\n```\n\n----------------------------------------\n\nTITLE: Submitting Scan with Multiple Methods\nDESCRIPTION: Illustrates how to submit a scan with multiple scan methods and using a scan profile.\nSOURCE: https://github.com/owasp/nettacker/blob/master/docs/API.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> r = requests.post('https://127.0.0.1:5000/new/scan', data={\"key\": \"09877e92c75f6afdca6ae61ad3f53727\", \"targets\": \"127.0.0.1\", \"scan_method\": \"dir_scan,port_scan\"})\n>>> print json.dumps(json.loads(r.content), sort_keys=True, indent=4)\n{\n    \"backup_ports\": null, \n    \"check_ranges\": false, \n    \"check_subdomains\": false, \n    \"database_host\": \"\", \n    \"database_name\": \"/home/am4n/owasp-nettacker/.data/nettacker.db\", \n    \"database_password\": \"\", \n    \"database_port\": \"\", \n    \"database_type\": \"sqlite\", \n    \"database_username\": \"\", \n    \"graph_flag\": \"d3_tree_v2_graph\", \n    \"home_path\": \"/home/am4n/owasp-nettacker/.data\", \n    \"language\": \"en\", \n    \"log_in_file\": \"/home/am4n/owasp-nettacker/.data/results/results_2020_06_09_10_47_08_dugacttfmf.html\", \n    \"methods_args\": {\n        \"as_user_set\": \"set_successfully\"\n    }, \n    \"passwds\": null, \n    \"ping_flag\": false, \n    \"ports\": null, \n    \"profile\": null, \n    \"results_path\": \"/home/am4n/owasp-nettacker/.data/results\", \n    \"retries\": 3, \n    \"scan_method\": [\n        \"dir_scan\", \n        \"port_scan\"\n    ], \n    \"socks_proxy\": null, \n    \"targets\": [\n        \"127.0.0.1\"\n    ], \n    \"thread_number\": 100, \n    \"thread_number_host\": 5, \n    \"time_sleep\": 0.0, \n    \"timeout_sec\": 3, \n    \"tmp_path\": \"/home/am4n/owasp-nettacker/.data/tmp\", \n    \"users\": null, \n    \"verbose_level\": 0\n}\n>>> r = requests.post('https://127.0.0.1:5000/new/scan', data={\"key\": \"09877e92c75f6afdca6ae61ad3f53727\", \"targets\": \"127.0.0.1\", \"profile\": \"information_gathering\"})\n>>> print json.dumps(json.loads(r.content), sort_keys=True, indent=4)\n{\n    \"backup_ports\": null, \n    \"check_ranges\": false, \n    \"check_subdomains\": false, \n    \"database_host\": \"\", \n    \"database_name\": \"/home/am4n/owasp-nettacker/.data/nettacker.db\", \n    \"database_password\": \"\", \n    \"database_port\": \"\", \n    \"database_type\": \"sqlite\", \n    \"database_username\": \"\", \n    \"graph_flag\": \"d3_tree_v2_graph\", \n    \"home_path\": \"/home/am4n/owasp-nettacker/.data\", \n    \"language\": \"en\", \n    \"log_in_file\": \"/home/am4n/owasp-nettacker/.data/results/results_2020_06_09_10_50_09_xjqatmkngn.html\", \n    \"methods_args\": {\n        \"as_user_set\": \"set_successfully\"\n    }, \n    \"passwds\": null, \n    \"ping_flag\": false, \n    \"ports\": null, \n    \"profile\": \"information_gathering\", \n    \"results_path\": \"/home/am4n/owasp-nettacker/.data/results\", \n    \"retries\": 3, \n    \"scan_method\": [\n        \"port_scan\"\n    ], \n    \"socks_proxy\": null, \n    \"targets\": [\n        \"127.0.0.1\"\n    ], \n    \"thread_number\": 100, \n    \"thread_number_host\": 5, \n    \"time_sleep\": 0.0, \n    \"timeout_sec\": 3, \n    \"tmp_path\": \"/home/am4n/owasp-nettacker/.data/tmp\", \n    \"users\": null, \n    \"verbose_level\": 0\n}\n\n>>>\n\n```\n\n----------------------------------------\n\nTITLE: Starting Nettacker API with Whitelist and IPs - Python\nDESCRIPTION: This command demonstrates how to start the Nettacker API with a client whitelist and specifies the allowed IP addresses.  It uses comma separation to define multiple IPs or IP ranges.\nSOURCE: https://github.com/owasp/nettacker/blob/master/docs/Usage.md#_snippet_25\n\nLANGUAGE: python\nCODE:\n```\npython nettacker.py --start-api --api-client-white-list --api-client-white-list-ips 127.0.0.1,192.168.0.1/24,10.0.0.1-10.0.0.255\n```\n\n----------------------------------------\n\nTITLE: Starting Nettacker API with Access Logging - Python\nDESCRIPTION: This command starts the Nettacker API with access logging enabled. This generates logs of API access attempts.\nSOURCE: https://github.com/owasp/nettacker/blob/master/docs/Usage.md#_snippet_26\n\nLANGUAGE: python\nCODE:\n```\npython nettacker.py --start-api --api-access-log\n```\n\n----------------------------------------\n\nTITLE: Submitting Scan with Errors\nDESCRIPTION: Shows examples of submitting a new scan with missing parameters ('targets' and 'scan_method') to demonstrate the error handling of the API.\nSOURCE: https://github.com/owasp/nettacker/blob/master/docs/API.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> r = requests.post('https://127.0.0.1:5000/new/scan', data={\"key\": \"8370bd0a0b9a98ac25b341833fb0fb07\"})\n>>> r.content\n'{\"msg\":\"Cannot specify the target(s)\",\"status\":\"error\"}\\n'\n\n>>> r = requests.post('https://127.0.0.1:5000/new/scan', data={\"key\": \"09877e92c75f6afdca6ae61ad3f53727\", \"targets\": \"127.0.0.1\"})\n>>> r.content\nu'{\"msg\":\"please choose your scan method!\",\"status\":\"error\"}\\n'\n```\n\n----------------------------------------\n\nTITLE: Install PIPX (bash)\nDESCRIPTION: These commands install pipx using either apt or pip, then ensure pipx is in the PATH.\nSOURCE: https://github.com/owasp/nettacker/blob/master/docs/Installation.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt update\nsudo apt install pipx\npipx ensurepath\npipx --version\n```\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m pip install --user pipx\npython3 -m pipx ensurepath\n```\n\n----------------------------------------\n\nTITLE: Nettacker Command with Verbosity Control\nDESCRIPTION: This command demonstrates how to control the verbosity of the output using the `-v` option. Setting the verbosity level to a value between 1 and 5 will include more details in the output file, even if no results are found during the host scan.\nSOURCE: https://github.com/owasp/nettacker/blob/master/docs/Usage.md#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\npython nettacker.py -i 192.168.1.1/24 -m all -t 10 -M 35 -g 20-100 -o file.txt -u root,user -P passwords.txt -v 1\n```\n\n----------------------------------------\n\nTITLE: Check Python Version (bash)\nDESCRIPTION: This command checks the installed version of Python 3. It's essential to verify that the Python version meets Nettacker's requirements (3.10-3.12).\nSOURCE: https://github.com/owasp/nettacker/blob/master/docs/Installation.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython3 -V\n```\n\n----------------------------------------\n\nTITLE: Checking API Session Cookie\nDESCRIPTION: Shows how to check the validity of an established session with the OWASP Nettacker API by checking session cookie.\nSOURCE: https://github.com/owasp/nettacker/blob/master/docs/API.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> r = s.get(\"https://localhost:5000/session/check\")\n>>> print r.content\n{\n  \"msg\": \"your browser session is valid\",\n  \"status\": \"ok\"\n}\n```\n\n----------------------------------------\n\nTITLE: Unsetting API Session Cookie\nDESCRIPTION: Illustrates how to terminate a session with the OWASP Nettacker API by unsetting the session cookie.\nSOURCE: https://github.com/owasp/nettacker/blob/master/docs/API.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> r = s.get(\"https://localhost:5000/session/kill\")\n>>> print r.content\n{\n  \"msg\": \"your browser session killed\",\n  \"status\": \"ok\"\n}\n\n>>> print r.cookies\n<RequestsCookieJar[]>\n>>>\n```\n\n----------------------------------------\n\nTITLE: Starting Nettacker API with Client Whitelist - Python\nDESCRIPTION: This command illustrates starting the Nettacker API with a client whitelist enabled. When active, only hosts specified in the whitelist are allowed to connect to the API.\nSOURCE: https://github.com/owasp/nettacker/blob/master/docs/Usage.md#_snippet_24\n\nLANGUAGE: python\nCODE:\n```\npython nettacker.py --start-api --api-client-white-list\n```\n\n----------------------------------------\n\nTITLE: Starting Nettacker API\nDESCRIPTION: This example shows how to start the Nettacker API using the command line. It includes instructions to run the API with SSL certificate and key.\nSOURCE: https://github.com/owasp/nettacker/blob/master/docs/Usage.md#_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\npython nettacker.py --start-api --api-cert ~/cert.crt --api-cert-key ~/key.pem\n```\n\n----------------------------------------\n\nTITLE: Run Nettacker After Installation (bash)\nDESCRIPTION: This command demonstrates how to run Nettacker after it has been installed, displaying help information.\nSOURCE: https://github.com/owasp/nettacker/blob/master/docs/Installation.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnettacker --help\n```\n\n----------------------------------------\n\nTITLE: Nettacker Verbose Subdomain Scan\nDESCRIPTION: This command performs a subdomain scan with verbose output level 5, providing more detailed information about the scan process and results. The '-v' flag controls the verbosity level.\nSOURCE: https://github.com/owasp/nettacker/blob/master/docs/Instructions-for-the-OWASP-Bay-Area-tutorial.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n> python nettacker.py -i z3r0d4y.com -m subdomain_scan -v 5\n```\n\n----------------------------------------\n\nTITLE: Setting API Session Cookie\nDESCRIPTION: Demonstrates how to establish a session with the OWASP Nettacker API using cookies, simulating a browser session. It covers setting, checking, and unsetting the session cookie.\nSOURCE: https://github.com/owasp/nettacker/blob/master/docs/API.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> s = requests.session()\n>>> r = s.get(\"https://localhost:5000/session/set?key=09877e92c75f6afdca6ae61ad3f53727\")\n>>> print json.dumps(json.loads(r.content), sort_keys=True, indent=4)\n{\n    \"msg\": \"your browser session is valid\", \n    \"status\": \"ok\"\n}\n>>> print r.cookies\n<RequestsCookieJar[<Cookie key=09877e92c75f6afdca6ae61ad3f53727 for localhost.local/>]>\n>>> r = s.get(\"https://localhost:5000/new/scan\")\n>>> print r.content\n{\n  \"msg\": \"Cannot specify the target(s)\",\n  \"status\": \"error\"\n}\n\n>>>\n```\n\n----------------------------------------\n\nTITLE: Nettacker Help Output with Language Flag\nDESCRIPTION: This snippet shows the help output from Nettacker when the language flag is set to Farsi (`fa`). It provides usage instructions and options in Farsi. Requires Nettacker installed and a terminal with Unicode support.\nSOURCE: https://github.com/owasp/nettacker/blob/master/docs/Usage.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n$ python nettacker.py --help -L fa\n   ______          __      _____ _____\n  / __ \\ \\        / /\\    / ____|  __ \\\n | |  | \\ \\  /\\  / /  \\  | (___ | |__) |\n | |  | |\\ \\/  \\/ / /\\ \\  \\___ \\|  ___/\n | |__| | \\  /\\  / ____ \\ ____) | |     Version 0.4.0\n  \\____/   \\/  \\/_/    \\_\\_____/|_|     QUIN\n                          _   _      _   _\n                         | \\ | |    | | | |           | |\n  github.com/OWASP       |  \\| | ___| |_| |_ __ _  ___| | _____ _ __\n  owasp.org              | . ` |/ _ \\ __| __/ _` |/ __| |/ / _ \\ '__|\n  z3r0d4y.com            | |\\  |  __/ |_| || (_| | (__|   <  __/ |\n                         |_| \\_|\\___|\\__|\\__\\__,_|\\___|_|\\_\\___|_|\n\n[2024-09-26 07:53:24][+] انجین Nettacker آغاز به کار کرد ...\n\n\n[2024-09-26 07:53:25][+] 106 ماژول بارگزاری شد ...\nusage: Nettacker [-L LANGUAGE] [-v] [--verbose-event] [-V] [-o REPORT_PATH_FILENAME] [--graph GRAPH_NAME] [-h]\n                 [-i TARGETS] [-l TARGETS_LIST] [-m SELECTED_MODULES] [--modules-extra-args MODULES_EXTRA_ARGS]\n                 [--show-all-modules] [--profile PROFILES] [--show-all-profiles] [-x EXCLUDED_MODULES] [-u USERNAMES]\n                 [-U USERNAMES_LIST] [-p PASSWORDS] [-P PASSWORDS_LIST] [-g PORTS] [--user-agent USER_AGENT]\n                 [-T TIMEOUT] [-w TIME_SLEEP_BETWEEN_REQUESTS] [-r] [-s] [-d] [-t THREAD_PER_HOST]\n                 [-M PARALLEL_MODULE_SCAN] [--set-hardware-usage SET_HARDWARE_USAGE] [-R SOCKS_PROXY]\n                 [--retries RETRIES] [--ping-before-scan] [-K SCAN_COMPARE_ID] [-J COMPARE_REPORT_PATH_FILENAME]\n                 [--start-api] [--api-host API_HOSTNAME] [--api-port API_PORT] [--api-debug-mode]\n                 [--api-access-key API_ACCESS_KEY] [--api-client-whitelisted-ips API_CLIENT_WHITELISTED_IPS]\n                 [--api-access-log API_ACCESS_LOG] [--api-cert API_CERT] [--api-cert-key API_CERT_KEY]\n\nانجین:\n  گزینه های ورودی انجین\n\n  -L LANGUAGE, --language LANGUAGE\n                        یک زبان انتخاب کنید ['bn', 'de', 'nl', 'iw', 'es', 'pt-br', 'ar', 'tr', 'el', 'ko', 'ru', 'hi',\n                        'it', 'en', 'fr', 'id', 'ps', 'ur', 'zh-cn', 'hy', 'fa', 'ja', 'vi']\n  -v, --verbose         سطح حالت پرگویی (0-5) (پیشفرض 0)\n  --verbose-event       enable verbose event to see state of each thread\n  -V, --version         نمایش ورژن نرم افزار\n  -o REPORT_PATH_FILENAME, --output REPORT_PATH_FILENAME\n                        ذخیره کردن کل لاگ ها در فایل (result.txt، result.html، results.json)\n  --graph GRAPH_NAME    ساخت گراف از همه فعالیت ها و اطلاعات، شما باید از خروجی HTML استفاده کنید. گراف های در دسترس:\n                        ['d3_tree_v1_graph', 'd3_tree_v2_graph']\n  -h, --help            نشان دادن منوی کمک Nettacker\n\nهدف:\n  گزینه های ورودی هدف\n\n  -i TARGETS, --targets TARGETS\n                        لیست هدف (ها)، با \",\" جدا کنید\n  -l TARGETS_LIST, --targets-list TARGETS_LIST\n                        خواندن هدف (ها) از فایل\n\nمتود:\n  گزینه های متود های اسکن\n\n  -m SELECTED_MODULES, --modules SELECTED_MODULES\n                        متود اسکن را انتخاب کنید ['accela_cve_2021_34370_vuln', 'admin_scan',\n                        'adobe_coldfusion_cve_2023_26360_vuln', 'apache_cve_2021_41773_vuln',\n                        'apache_cve_2021_42013_vuln', 'apache_ofbiz_cve_2024_38856_vuln', 'apache_struts_vuln',\n                        'aviatrix_cve_2021_40870_vuln', 'cisco_hyperflex_cve_2021_1497_vuln',\n                        'citrix_cve_2019_19781_vuln']\n  --modules-extra-args MODULES_EXTRA_ARGS\n                        add extra args to pass to modules (e.g. --modules-extra-args \"x_api_key=123&xyz_passwd=abc\"\n  --show-all-modules    show all modules and their information\n  --profile PROFILES    انتخاب پروفایل ['accela', 'adobe', 'apache', 'apache_ofbiz', 'apache_struts', 'atlassian',\n                        'aviatrix', 'backup', 'brute', 'brute_force']\n  --show-all-profiles   show all profiles and their information\n  -x EXCLUDED_MODULES, --exclude-modules EXCLUDED_MODULES\n                        انتخاب متود اسکن استثنا ['accela_cve_2021_34370_vuln', 'admin_scan',\n                        'adobe_coldfusion_cve_2023_26360_vuln', 'apache_cve_2021_41773_vuln',\n                        'apache_cve_2021_42013_vuln', 'apache_ofbiz_cve_2024_38856_vuln', 'apache_struts_vuln',\n                        'aviatrix_cve_2021_40870_vuln', 'cisco_hyperflex_cve_2021_1497_vuln']\n  -u USERNAMES, --usernames USERNAMES\n                        لیست نام کاربری (ها)، با \",\" جدا شود\n  -U USERNAMES_LIST, --users-list USERNAMES_LIST\n                        خواندن نام کاربری (ها) از لیست\n  -p PASSWORDS, --passwords PASSWORDS\n                        لیست کلمه عبور (ها)، با \",\" جدا شود\n  -P PASSWORDS_LIST, --passwords-list PASSWORDS_LIST\n                        خواندن کلمه عبور (ها) از فایل\n  -g PORTS, --ports PORTS\n                        لیست درگاه (ها)، با \",\" جدا شود\n  --user-agent USER_AGENT\n                        Select a user agent to send with HTTP requests or enter \"random_user_agent\" to randomize the\n                        User-Agent in the requests.\n  -T TIMEOUT, --timeout TIMEOUT\n                        خواندن کلمه عبور (ها) از فایل\n  -w TIME_SLEEP_BETWEEN_REQUESTS, --time-sleep-between-requests TIME_SLEEP_BETWEEN_REQUESTS\n                        زمان مکث بین هر درخواست\n  -r, --range           اسکن تمام آی پی ها در رنج\n  -s, --sub-domains     پیدا کردن و اسکن کردن ساب دامین ها\n  -d, --skip-service-discovery\n                        skip service discovery before scan and enforce all modules to scan anyway\n  -t THREAD_PER_HOST, --thread-per-host THREAD_PER_HOST\n                        تعداد ریسه ها برای ارتباطات با یک هاست\n  -M PARALLEL_MODULE_SCAN, --parallel-module-scan PARALLEL_MODULE_SCAN\n                        parallel module scan for hosts\n  --set-hardware-usage SET_HARDWARE_USAGE\n                        Set hardware usage while scanning. (low, normal, high, maximum)\n  -R SOCKS_PROXY, --socks-proxy SOCKS_PROXY\n                        پراکسی ارتباطات خروجی (socks) مثال: 127.0.0.1:9050, socks://127.0.0.1:9050,\n                        socks5:127.0.0.1:9050 یا socks4: socks4://127.0.0.1:9050, احراز هویت:\n                        socks://username:password@127.0.0.1, socks4://username:password@127.0.0.1,\n                        socks5://username:password@127.0.0.1\n  --retries RETRIES     سعی مجدد وقتی که ارتباط قطع شد (پیشفرض 3)\n  --ping-before-scan    پینگ کردن هست قبل از اسکن\n  -K SCAN_COMPARE_ID, --scan-compare SCAN_COMPARE_ID\n                        compare current scan to old scans using the unique scan_id\n  -J COMPARE_REPORT_PATH_FILENAME, --compare-report-path COMPARE_REPORT_PATH_FILENAME\n                        the file-path to store the compare_scan report\n\nAPI:\n  API گزینه های\n\n  --start-api           شروع سرویس API\n  --api-host API_HOSTNAME\n                        آدرس هاست API\n  --api-port API_PORT   شماره درگاه API\n  --api-debug-mode      حالت اشکال زدایی API\n  --api-access-key API_ACCESS_KEY\n                        کلید دسترسی API\n  --api-client-whitelisted-ips API_CLIENT_WHITELISTED_IPS\n                        تعریف کردن لیست سفید، با \",\" جدا کنید (مثال: 127.0.0.1, 192.168.1.1/24, 10.0.0.1-10.0.0.255)\n  --api-access-log API_ACCESS_LOG\n                        اسم فایل لیست دسترسی به API\n  --api-cert API_CERT   API CERTIFICATE\n  --api-cert-key API_CERT_KEY\n                        API CERTIFICATE Key\n\n\nلطفا مجوز و موافقت نامه را مطالعه فرمایید https://github.com/OWASP/Nettacker\n\n```\n\n----------------------------------------\n\nTITLE: MySQL Configuration Update - Configuration File\nDESCRIPTION: This code block contains settings that must be added to the MySQL configuration file (my.cnf).  This specific setting enforces stricter SQL mode settings.\nSOURCE: https://github.com/owasp/nettacker/blob/master/docs/Usage.md#_snippet_33\n\nLANGUAGE: python\nCODE:\n```\n[mysqld]  \nsql_mode = \"STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION\"\n```"
  }
]