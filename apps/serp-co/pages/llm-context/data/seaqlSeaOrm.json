[
  {
    "owner": "seaql",
    "repo": "sea-orm",
    "content": "TITLE: Selecting Data with SeaORM\nDESCRIPTION: This code shows how to perform various select operations in SeaORM, including finding all records, filtering results, finding by ID, and retrieving related models both lazily and eagerly.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/README.md#2025-04-12_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n// find all models\nlet cakes: Vec<cake::Model> = Cake::find().all(db).await?;\n\n// find and filter\nlet chocolate: Vec<cake::Model> = Cake::find()\n    .filter(cake::Column::Name.contains(\"chocolate\"))\n    .all(db)\n    .await?;\n\n// find one model\nlet cheese: Option<cake::Model> = Cake::find_by_id(1).one(db).await?;\nlet cheese: cake::Model = cheese.unwrap();\n\n// find related models (lazy)\nlet fruits: Vec<fruit::Model> = cheese.find_related(Fruit).all(db).await?;\n\n// find related models (eager)\nlet cake_with_fruits: Vec<(cake::Model, Vec<fruit::Model>)> =\n    Cake::find().find_with_related(Fruit).all(db).await?;\n```\n\n----------------------------------------\n\nTITLE: Defining Entity Models in SeaORM\nDESCRIPTION: This code demonstrates how to define an entity model in SeaORM using the DeriveEntityModel macro. It includes primary key definition, relation definition between entities, and implementation of the Related trait.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/README.md#2025-04-12_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse sea_orm::entity::prelude::*;\n\n#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]\n#[sea_orm(table_name = \"cake\")]\npub struct Model {\n    #[sea_orm(primary_key)]\n    pub id: i32,\n    pub name: String,\n}\n\n#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]\npub enum Relation {\n    #[sea_orm(has_many = \"super::fruit::Entity\")]\n    Fruit,\n}\n\nimpl Related<super::fruit::Entity> for Entity {\n    fn to() -> RelationDef {\n        Relation::Fruit.def()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Database Migration Commands\nDESCRIPTION: Comprehensive set of commands for managing database migrations including initialization, generation, applying, rolling back, and checking status.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/sea-orm-cli/README.md#2025-04-12_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- migrate init\n```\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- migrate generate MIGRATION_NAME\n```\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- migrate\n```\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- migrate up\n```\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- migrate up -n 10\n```\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- migrate down\n```\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- migrate down -n 10\n```\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- migrate fresh\n```\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- migrate refresh\n```\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- migrate reset\n```\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- migrate status\n```\n\n----------------------------------------\n\nTITLE: Inserting Data with SeaORM\nDESCRIPTION: This code demonstrates how to insert data using SeaORM, including inserting a single record and inserting multiple records at once using ActiveModel.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/README.md#2025-04-12_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nlet apple = fruit::ActiveModel {\n    name: Set(\"Apple\".to_owned()),\n    ..Default::default() // no need to set primary key\n};\n\nlet pear = fruit::ActiveModel {\n    name: Set(\"Pear\".to_owned()),\n    ..Default::default()\n};\n\n// insert one\nlet pear = pear.insert(db).await?;\n\n// insert many\nFruit::insert_many([apple, pear]).exec(db).await?;\n```\n\n----------------------------------------\n\nTITLE: Installing and Using SeaORM CLI\nDESCRIPTION: Commands for installing the SeaORM CLI tool via cargo and showing the help menu.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/sea-orm-migration/README.md#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n> cargo install sea-orm-cli \n> sea-orm-cli help\n```\n\n----------------------------------------\n\nTITLE: Saving Data with SeaORM\nDESCRIPTION: This code demonstrates how to use the save method in SeaORM, which automatically determines whether to perform an insert or update operation based on the primary key status.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/README.md#2025-04-12_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nlet banana = fruit::ActiveModel {\n    id: NotSet,\n    name: Set(\"Banana\".to_owned()),\n    ..Default::default()\n};\n\n// create, because primary key `id` is `NotSet`\nlet mut banana = banana.save(db).await?;\n\nbanana.name = Set(\"Banana Mongo\".to_owned());\n\n// update, because primary key `id` is `Set`\nlet banana = banana.save(db).await?;\n```\n\n----------------------------------------\n\nTITLE: Updating Data with SeaORM\nDESCRIPTION: This code shows how to update data in SeaORM, including updating a single record by converting a model to an ActiveModel, and updating multiple records with a filter condition.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/README.md#2025-04-12_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nuse sea_orm::sea_query::{Expr, Value};\n\nlet pear: Option<fruit::Model> = Fruit::find_by_id(1).one(db).await?;\nlet mut pear: fruit::ActiveModel = pear.unwrap().into();\n\npear.name = Set(\"Sweet pear\".to_owned());\n\n// update one\nlet pear: fruit::Model = pear.update(db).await?;\n\n// update many: UPDATE \"fruit\" SET \"cake_id\" = NULL WHERE \"fruit\".\"name\" LIKE '%Apple%'\nFruit::update_many()\n    .col_expr(fruit::Column::CakeId, Expr::value(Value::Int(None)))\n    .filter(fruit::Column::Name.contains(\"Apple\"))\n    .exec(db)\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Generating Entity Files\nDESCRIPTION: Commands for generating entity files from existing databases including MySQL, SQLite, and PostgreSQL configurations.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/sea-orm-cli/README.md#2025-04-12_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n# MySQL (`--database-schema` option is ignored)\ncargo run -- generate entity -u mysql://sea:sea@localhost/bakery -o out\n\n# SQLite (`--database-schema` option is ignored)\ncargo run -- generate entity -u sqlite://bakery.db -o out\n\n# PostgreSQL\ncargo run -- generate entity -u postgres://sea:sea@localhost/bakery -s public -o out\n```\n\n----------------------------------------\n\nTITLE: Deleting Data with SeaORM\nDESCRIPTION: This code shows various ways to delete data in SeaORM, including deleting a single record by converting a model to an ActiveModel, using a shorthand delete method, and deleting multiple records with a filter condition.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/README.md#2025-04-12_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\n// delete one\nlet orange: Option<fruit::Model> = Fruit::find_by_id(1).one(db).await?;\nlet orange: fruit::Model = orange.unwrap();\nfruit::Entity::delete(orange.into_active_model())\n    .exec(db)\n    .await?;\n\n// or simply\nlet orange: Option<fruit::Model> = Fruit::find_by_id(1).one(db).await?;\nlet orange: fruit::Model = orange.unwrap();\norange.delete(db).await?;\n\n// delete many: DELETE FROM \"fruit\" WHERE \"fruit\".\"name\" LIKE 'Orange'\nfruit::Entity::delete_many()\n    .filter(fruit::Column::Name.contains(\"Orange\"))\n    .exec(db)\n    .await?;\n```\n\n----------------------------------------\n\nTITLE: Using SelectThree in Sea-ORM for Multi-Entity Relationships\nDESCRIPTION: Demonstrates how to use SelectThree to query related entities across multiple relationships (Order -> Lineitem -> Cake) in a single operation with ordering.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/CHANGELOG.md#2025-04-12_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\n// Order -> (many) Lineitem -> Cake\nlet items: Vec<(order::Model, Option<lineitem::Model>, Option<cake::Model>)> =\n    order::Entity::find()\n        .find_also_related(lineitem::Entity)\n        .and_also_related(cake::Entity)\n        .order_by_asc(order::Column::Id)\n        .order_by_asc(lineitem::Column::Id)\n        .all(&ctx.db)\n        .await?;\n```\n\n----------------------------------------\n\nTITLE: Generating Entity Models for Different Databases\nDESCRIPTION: Commands for generating entity models from existing databases including MySQL, SQLite, and PostgreSQL with their respective connection strings.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/sea-orm-migration/README.md#2025-04-12_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n# MySQL (`--database-schema` option is ignored)\ncargo run -- generate entity -u mysql://sea:sea@localhost/bakery -o out\n\n# SQLite (`--database-schema` option is ignored)\ncargo run -- generate entity -u sqlite://bakery.db -o out\n\n# PostgreSQL\ncargo run -- generate entity -u postgres://sea:sea@localhost/bakery -s public -o out\n```\n\n----------------------------------------\n\nTITLE: Using RelationDef with Alias in Sea-ORM Joins\nDESCRIPTION: Shows how to use RelationDef with aliases in complex join queries, allowing for more flexible and readable join expressions when dealing with multiple relations and table aliases.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/CHANGELOG.md#2025-04-12_snippet_16\n\nLANGUAGE: rust\nCODE:\n```\nlet cf = Alias::new(\"cf\");\n\nassert_eq!(\n    cake::Entity::find()\n        .join_as(\n            JoinType::LeftJoin,\n            cake_filling::Relation::Cake.def().rev(),\n            cf.clone()\n        )\n        .join(\n            JoinType::LeftJoin,\n            cake_filling::Relation::Filling.def().from_alias(cf)\n        )\n        .build(DbBackend::MySql)\n        .to_string(),\n    [\n        \"SELECT `cake`.`id`, `cake`.`name` FROM `cake`\",\n        \"LEFT JOIN `cake_filling` AS `cf` ON `cake`.`id` = `cf`.`cake_id`\",\n        \"LEFT JOIN `filling` ON `cf`.`filling_id` = `filling`.`id`\",\n    ]\n    .join(\" \")\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing DeriveValueType for Enum Strings in Rust with Sea-ORM\nDESCRIPTION: Demonstrates how to use the DeriveValueType trait to convert between enum values and strings. The example shows both default implementations using FromStr/ToString and custom implementations with user-defined methods.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/CHANGELOG.md#2025-04-12_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(DeriveValueType)]\n#[sea_orm(value_type = \"String\")]\npub enum Tag {\n    Hard,\n    Soft,\n}\n\n// `from_str` defaults to `std::str::FromStr::from_str`\nimpl std::str::FromStr for Tag {\n    type Err = sea_orm::sea_query::ValueTypeErr;\n    fn from_str(s: &str) -> Result<Self, Self::Err> { .. }\n}\n\n// `to_str` defaults to `std::string::ToString::to_string`.\nimpl std::fmt::Display for Tag {\n    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result { .. }\n}\n\n// you can override from_str and to_str with custom functions\n#[derive(DeriveValueType)]\n#[sea_orm(value_type = \"String\", from_str = \"Tag::from_str\", to_str = \"Tag::to_str\")]\npub enum Tag {\n    Color,\n    Grey,\n}\n\nimpl Tag {\n    fn from_str(s: &str) -> Result<Self, ValueTypeErr> { .. }\n\n    fn to_str(&self) -> &'static str { .. }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Returning Operations with Insert in Sea-ORM\nDESCRIPTION: Shows how to use exec_with_returning_keys and exec_with_returning_many methods on Insert to retrieve generated keys and complete models after insertion operations.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/CHANGELOG.md#2025-04-12_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\nassert_eq!(\n    Entity::insert_many([\n        ActiveModel { id: NotSet, name: Set(\"two\".into()) },\n        ActiveModel { id: NotSet, name: Set(\"three\".into()) },\n    ])\n    .exec_with_returning_many(db)\n    .await\n    .unwrap(),\n    [\n        Model { id: 2, name: \"two\".into() },\n        Model { id: 3, name: \"three\".into() },\n    ]\n);\n\nassert_eq!(\n    cakes_bakers::Entity::insert_many([\n        cakes_bakers::ActiveModel {\n            cake_id: Set(1),\n            baker_id: Set(2),\n        },\n        cakes_bakers::ActiveModel {\n            cake_id: Set(2),\n            baker_id: Set(1),\n        },\n    ])\n    .exec_with_returning_keys(db)\n    .await\n    .unwrap(),\n    [(1, 2), (2, 1)]\n);\n```\n\n----------------------------------------\n\nTITLE: Deriving Partial Model in Rust with SeaORM\nDESCRIPTION: Demonstrates the usage of the new DerivePartialModel macro in SeaORM. This allows for creating partial models with custom column expressions and simplified querying.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/CHANGELOG.md#2025-04-12_snippet_25\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(DerivePartialModel, FromQueryResult)]\n#[sea_orm(entity = \"Cake\")]\nstruct PartialCake {\n    name: String,\n    #[sea_orm(\n        from_expr = r#\"SimpleExpr::FunctionCall(Func::upper(Expr::col((Cake, cake::Column::Name))))\"#\n    )]\n    name_upper: String,\n}\n\nassert_eq!(\n    cake::Entity::find()\n        .into_partial_model::<PartialCake>()\n        .into_statement(DbBackend::Sqlite)\n        .to_string(),\n    r#\"SELECT \"cake\".\"name\", UPPER(\"cake\".\"name\") AS \"name_upper\" FROM \"cake\"\"#\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Entity Model with JSON Array Support in Rust\nDESCRIPTION: Demonstrates how to define an entity model with a JSON array column using SeaORM's derive macros. This new feature allows for root JSON arrays and requires the 'json-array' or 'postgres-array' feature to be enabled.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/CHANGELOG.md#2025-04-12_snippet_22\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(Clone, Debug, PartialEq, Eq, DeriveEntityModel)]\n#[sea_orm(table_name = \"json_struct_vec\")]\npub struct Model {\n    #[sea_orm(primary_key)]\n    pub id: i32,\n    #[sea_orm(column_type = \"Json\")]\n    pub struct_vec: Vec<JsonColumn>,\n}\n\n#[derive(Clone, Debug, PartialEq, Eq, Serialize, Deserialize, FromJsonQueryResult)]\npub struct JsonColumn {\n    pub value: String,\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Entity Relations with Custom Join Conditions in Rust\nDESCRIPTION: Illustrates how to define entity relations with custom join conditions in SeaORM. It demonstrates both AND and OR join conditions using the 'on_condition' and 'condition_type' attributes.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/CHANGELOG.md#2025-04-12_snippet_24\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(Clone, Debug, PartialEq, Eq, DeriveEntityModel)]\n#[sea_orm(table_name = \"cake\")]\npub struct Model {\n    #[sea_orm(primary_key)]\n    pub id: i32,\n    pub name: String,\n}\n\n#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]\npub enum Relation {\n    #[sea_orm(\n        has_many = \"super::fruit::Entity\",\n        on_condition = r#\"super::fruit::Column::Name.like(\"%tropical%\")\"#\n    )]\n    TropicalFruit,\n    #[sea_orm(\n        has_many = \"super::fruit::Entity\",\n        on_condition = r#\"super::fruit::Column::Name.like(\"%tropical%\")\"#\n        condition_type = \"any\",\n    )]\n    OrTropicalFruit,\n}\n```\n\n----------------------------------------\n\nTITLE: Using Nested Entities with FromQueryResult in Sea-ORM\nDESCRIPTION: Demonstrates how to use nested entity structures in FromQueryResult trait implementations to create structured query results from joined tables while customizing column mapping using aliases.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/CHANGELOG.md#2025-04-12_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(FromQueryResult)]\nstruct Cake {\n    id: i32,\n    name: String,\n    #[sea_orm(nested)]\n    bakery: Option<CakeBakery>,\n}\n\n#[derive(FromQueryResult)]\nstruct CakeBakery {\n    #[sea_orm(from_alias = \"bakery_id\")]\n    id: i32,\n    #[sea_orm(from_alias = \"bakery_name\")]\n    title: String,\n}\n\nlet cake: Cake = cake::Entity::find()\n    .select_only()\n    .column(cake::Column::Id)\n    .column(cake::Column::Name)\n    .column_as(bakery::Column::Id, \"bakery_id\")\n    .column_as(bakery::Column::Name, \"bakery_name\")\n    .left_join(bakery::Entity)\n    .order_by_asc(cake::Column::Id)\n    .into_model()\n    .one(&ctx.db)\n    .await?\n    .unwrap();\n\nassert_eq!(\n    cake,\n    Cake {\n        id: 1,\n        name: \"Cake\".to_string(),\n        bakery: Some(CakeBakery {\n            id: 20,\n            title: \"Bakery\".to_string(),\n        })\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Deriving IntoActiveModel with DerivePartialModel in Sea-ORM\nDESCRIPTION: Shows how to use DerivePartialModel with into_active_model option to automatically convert partial models into active models for database operations.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/CHANGELOG.md#2025-04-12_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(DerivePartialModel)]\n#[sea_orm(entity = \"cake::Entity\", into_active_model)]\nstruct Cake {\n    id: i32,\n    name: String,\n}\n\nassert_eq!(\n    Cake {\n        id: 12,\n        name: \"Lemon Drizzle\".to_owned(),\n    }\n    .into_active_model(),\n    cake::ActiveModel {\n        id: Set(12),\n        name: Set(\"Lemon Drizzle\".to_owned()),\n        ..Default::default()\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Using Postgres IpNetwork Type in Sea-ORM Models\nDESCRIPTION: Shows how to work with Postgres IpNetwork types in Sea-ORM models including defining the schema, creating models with these types, and performing CRUD operations. Requires the 'with-ipnetwork' feature flag.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/CHANGELOG.md#2025-04-12_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n// Model\n#[derive(Clone, Debug, PartialEq, Eq, DeriveEntityModel)]\n#[sea_orm(table_name = \"host_network\")]\npub struct Model {\n    #[sea_orm(primary_key)]\n    pub id: i32,\n    pub ipaddress: IpNetwork,\n    #[sea_orm(column_type = \"Cidr\")]\n    pub network: IpNetwork,\n}\n\n// Schema\nsea_query::Table::create()\n    .table(host_network::Entity)\n    .col(ColumnDef::new(host_network::Column::Id).integer().not_null().auto_increment().primary_key())\n    .col(ColumnDef::new(host_network::Column::Ipaddress).inet().not_null())\n    .col(ColumnDef::new(host_network::Column::Network).cidr().not_null())\n    .to_owned();\n\n// CRUD\nhost_network::ActiveModel {\n    ipaddress: Set(IpNetwork::new(Ipv6Addr::new(..))),\n    network: Set(IpNetwork::new(Ipv4Addr::new(..))),\n    ..Default::default()\n}\n```\n\n----------------------------------------\n\nTITLE: Using Schema Helper for Database Migrations in Rust\nDESCRIPTION: Shows how to use the new schema helper in sea-orm-migration to create tables with various column types and constraints.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/CHANGELOG.md#2025-04-12_snippet_21\n\nLANGUAGE: rust\nCODE:\n```\n// Remember to import `sea_orm_migration::schema::*`\nuse sea_orm_migration::{prelude::*, schema::*};\n\n#[derive(DeriveMigrationName)]\npub struct Migration;\n\n#[async_trait::async_trait]\nimpl MigrationTrait for Migration {\n    async fn up(&self, manager: &SchemaManager) -> Result<(), DbErr> {\n        manager\n            .create_table(\n                Table::create()\n                    .table(Users::Table)\n                    .if_not_exists()\n                    .col(pk_auto(Users::Id)) // Primary key with auto-increment\n                    .col(uuid(Users::Pid)) // UUID column\n                    .col(string_uniq(Users::Email)) // String column with unique constraint\n                    .col(string(Users::Password)) // String column\n                    .col(string(Users::ApiKey).unique_key())\n                    .col(string(Users::Name))\n                    .col(string_null(Users::ResetToken)) // Nullable string column\n                    .col(timestamp_null(Users::ResetSentAt)) // Nullable timestamp column\n                    .col(string_null(Users::EmailVerificationToken))\n                    .col(timestamp_null(Users::EmailVerificationSentAt))\n                    .col(timestamp_null(Users::EmailVerifiedAt))\n                    .to_owned(),\n            )\n            .await\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Entity Model with Default Expression in Rust\nDESCRIPTION: Illustrates how to use the default_expr attribute in SeaORM's DeriveEntityModel to specify a default expression for a column, such as using the current timestamp.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/CHANGELOG.md#2025-04-12_snippet_29\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(DeriveEntityModel)]\n#[sea_orm(table_name = \"hello\")]\npub struct Model {\n    #[sea_orm(default_expr = \"Expr::current_timestamp()\")]\n    pub timestamp: DateTimeUtc,\n}\n\nassert_eq!(\n    Column::Timestamp.def(),\n    ColumnType::TimestampWithTimeZone.def()\n        .default(Expr::current_timestamp())\n);\n```\n\n----------------------------------------\n\nTITLE: Using PgVector Type in Sea-ORM Models\nDESCRIPTION: Demonstrates how to use Postgres vector types in Sea-ORM models, including model definition, schema creation, and insertion operations. Requires the 'postgres-vector' feature flag.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/CHANGELOG.md#2025-04-12_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\n// Model\n#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]\n#[sea_orm(table_name = \"image_model\")]\npub struct Model {\n    #[sea_orm(primary_key, auto_increment = false)]\n    pub id: i32,\n    pub embedding: PgVector,\n}\n \n// Schema\nsea_query::Table::create()\n    .table(image_model::Entity.table_ref())\n    .col(ColumnDef::new(Column::Id).integer().not_null().primary_key())\n    .col(ColumnDef::new(Column::Embedding).vector(None).not_null())\n    ..\n\n// Insert\nActiveModel {\n    id: NotSet,\n    embedding: Set(PgVector::from(vec![1., 2., 3.])),\n}\n.insert(db)\n.await?\n```\n\n----------------------------------------\n\nTITLE: Using rename_all Attribute with DeriveEntityModel and DeriveActiveEnum in Rust\nDESCRIPTION: Shows how to use the new rename_all attribute with DeriveEntityModel and DeriveActiveEnum macros to automatically rename fields and variants.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/CHANGELOG.md#2025-04-12_snippet_19\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(DeriveEntityModel)]\n#[sea_orm(table_name = \"user\", rename_all = \"camelCase\")]\npub struct Model {\n    #[sea_orm(primary_key)]\n    id: i32,\n    first_name: String, // firstName\n    #[sea_orm(column_name = \"lAsTnAmE\")]\n    last_name: String, // lAsTnAmE\n}\n\n#[derive(EnumIter, DeriveActiveEnum)]\n#[sea_orm(rs_type = \"String\", db_type = \"String(StringLen::None)\", rename_all = \"camelCase\")]\npub enum TestEnum {\n    DefaultVariant, // defaultVariant\n    #[sea_orm(rename = \"kebab-case\")]\n    VariantKebabCase, // variant-kebab-case\n    #[sea_orm(rename = \"snake_case\")]\n    VariantSnakeCase, // variant_snake_case\n    #[sea_orm(string_value = \"CuStOmStRiNgVaLuE\")]\n    CustomStringValue, // CuStOmStRiNgVaLuE\n}\n```\n\n----------------------------------------\n\nTITLE: Refreshing Database with Fresh Migrations in SeaORM\nDESCRIPTION: Command to completely reset the database by dropping all tables and then reapplying all migrations from scratch. This creates a fresh database state.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/rocket_okapi_example/migration/README.md#2025-04-12_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- fresh\n```\n\n----------------------------------------\n\nTITLE: Handling SQL Errors in Rust with SeaORM\nDESCRIPTION: Shows how to use the new DbErr::sql_err() method in SeaORM to convert database errors into common SQL error types, such as unique constraint or foreign key violation errors.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/CHANGELOG.md#2025-04-12_snippet_26\n\nLANGUAGE: rust\nCODE:\n```\nassert!(matches!(\n    cake.into_active_model().insert(db).await\n        .expect_err(\"Insert a row with duplicated primary key\")\n        .sql_err(),\n    Some(SqlErr::UniqueConstraintViolation(_))\n));\n\nassert!(matches!(\n    fk_cake.insert(db).await\n        .expect_err(\"Insert a row with invalid foreign key\")\n        .sql_err(),\n    Some(SqlErr::ForeignKeyConstraintViolation(_))\n));\n```\n\n----------------------------------------\n\nTITLE: Using rename_all Attribute with DeriveEntityModel in Sea-ORM\nDESCRIPTION: Shows how to use the rename_all attribute with DeriveEntityModel and DeriveActiveEnum to automatically rename fields and variants according to different case conventions, while allowing individual overrides.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/CHANGELOG.md#2025-04-12_snippet_14\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(DeriveEntityModel)]\n#[sea_orm(table_name = \"user\", rename_all = \"camelCase\")]\npub struct Model {\n    #[sea_orm(primary_key)]\n    id: i32,\n    first_name: String, // firstName\n    #[sea_orm(column_name = \"lAsTnAmE\")]\n    last_name: String, // lAsTnAmE\n}\n\n#[derive(EnumIter, DeriveActiveEnum)]\n#[sea_orm(rs_type = \"String\", db_type = \"String(StringLen::None)\", rename_all = \"camelCase\")]\npub enum TestEnum {\n    DefaultVariant, // defaultVariant\n    #[sea_orm(rename = \"kebab-case\")]\n    VariantKebabCase, // variant-kebab-case\n    #[sea_orm(rename = \"snake_case\")]\n    VariantSnakeCase, // variant_snake_case\n    #[sea_orm(string_value = \"CuStOmStRiNgVaLuE\")]\n    CustomStringValue, // CuStOmStRiNgVaLuE\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Method Overloading in Rust Using Traits\nDESCRIPTION: This snippet demonstrates how to achieve method overloading in Rust using traits. It defines an IntoActiveModel trait and implements it for both Model and ActiveModel, allowing a single method to accept either type.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/DESIGN.md#2025-04-12_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nfn method_with_model(m: Model) { ... }\nfn method_with_active_model(a: ActiveModel) { ... }\n```\n\nLANGUAGE: rust\nCODE:\n```\npub trait IntoActiveModel {\n    fn into_active_model(self) -> ActiveModel;\n}\n```\n\nLANGUAGE: rust\nCODE:\n```\npub fn method<A>(a: A)\nwhere\n    A: IntoActiveModel,\n{\n    let a: ActiveModel = a.into_active_model();\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Resetting and Refreshing Migrations in SeaORM\nDESCRIPTION: Commands to completely reset the database state, including fresh (drop and reapply) and refresh (rollback and reapply) operations.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/poem_example/migration/README.md#2025-04-12_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- fresh\n```\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- refresh\n```\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- reset\n```\n\n----------------------------------------\n\nTITLE: Refreshing Database with Fresh Migrations\nDESCRIPTION: Command to drop all tables from the database and then reapply all migrations from scratch.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/sea-orm-migration/README.md#2025-04-12_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- migrate fresh\n```\n\n----------------------------------------\n\nTITLE: Using Insert Many with Different Column Sets in Sea-ORM\nDESCRIPTION: Demonstrates the enhanced insert_many functionality that allows active models to have different column sets. This code shows how to insert multiple records with varying column values, where some columns are set and others are not.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/CHANGELOG.md#2025-04-12_snippet_11\n\nLANGUAGE: rust\nCODE:\n```\n// this previously panics\nlet apple = cake_filling::ActiveModel {\n    cake_id: ActiveValue::set(2),\n    filling_id: ActiveValue::NotSet,\n};\nlet orange = cake_filling::ActiveModel {\n    cake_id: ActiveValue::NotSet,\n    filling_id: ActiveValue::set(3),\n};\nassert_eq!(\n    Insert::<cake_filling::ActiveModel>::new()\n        .add_many([apple, orange])\n        .build(DbBackend::Postgres)\n        .to_string(),\n    r#\"INSERT INTO \"cake_filling\" (\"cake_id\", \"filling_id\") VALUES (2, NULL), (NULL, 3)\"#,\n);\n```\n\n----------------------------------------\n\nTITLE: Using Schema Helpers in Sea-ORM Migration\nDESCRIPTION: Demonstrates the use of schema helper functions in Sea-ORM migrations to simplify table creation with common column types and constraints, making migration code more concise and readable.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/CHANGELOG.md#2025-04-12_snippet_15\n\nLANGUAGE: rust\nCODE:\n```\n// Remember to import `sea_orm_migration::schema::*`\nuse sea_orm_migration::{prelude::*, schema::*};\n\n#[derive(DeriveMigrationName)]\npub struct Migration;\n\n#[async_trait::async_trait]\nimpl MigrationTrait for Migration {\n    async fn up(&self, manager: &SchemaManager) -> Result<(), DbErr> {\n        manager\n            .create_table(\n                Table::create()\n                    .table(Users::Table)\n                    .if_not_exists()\n                    .col(pk_auto(Users::Id)) // Primary key with auto-increment\n                    .col(uuid(Users::Pid)) // UUID column\n                    .col(string_uniq(Users::Email)) // String column with unique constraint\n                    .col(string(Users::Password)) // String column\n                    .col(string(Users::ApiKey).unique_key())\n                    .col(string(Users::Name))\n                    .col(string_null(Users::ResetToken)) // Nullable string column\n                    .col(timestamp_null(Users::ResetSentAt)) // Nullable timestamp column\n                    .col(string_null(Users::EmailVerificationToken))\n                    .col(timestamp_null(Users::EmailVerificationSentAt))\n                    .col(timestamp_null(Users::EmailVerifiedAt))\n                    .to_owned(),\n            )\n            .await\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Deriving Custom Value Types in Rust with SeaORM\nDESCRIPTION: Demonstrates the usage of the DeriveValueType macro in SeaORM for creating custom wrapper types with automatic implementation of required traits. It allows customization of column and array types.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/CHANGELOG.md#2025-04-12_snippet_27\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(DeriveValueType)]\n#[sea_orm(array_type = \"Int\")]\npub struct Integer(i32);\n\n#[derive(DeriveValueType)]\n#[sea_orm(column_type = \"Boolean\", array_type = \"Bool\")]\npub struct Boolbean(pub String);\n\n#[derive(DeriveValueType)]\npub struct StringVec(pub Vec<String>);\n```\n\n----------------------------------------\n\nTITLE: Rust Database Connection Options Example\nDESCRIPTION: Shows how to configure database connection options in SeaORM\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/CHANGELOG.md#2025-04-12_snippet_52\n\nLANGUAGE: rust\nCODE:\n```\nlet mut opt = ConnectOptions::new(\"protocol://username:password@host/database\".to_owned());\nopt.max_connections(100)\n    .min_connections(5)\n    .connect_timeout(Duration::from_secs(8))\n    .idle_timeout(Duration::from_secs(8));\nlet db = Database::connect(opt).await?;\n```\n\n----------------------------------------\n\nTITLE: Generating a new migration file in SeaORM\nDESCRIPTION: Creates a new migration file with the specified name. This command is used to generate the scaffolding for a new database schema change.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/loco_example/migration/README.md#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- migrate generate MIGRATION_NAME\n```\n\n----------------------------------------\n\nTITLE: Executing SeaORM SQLx Example with Database Operations\nDESCRIPTION: This code snippet shows the terminal output from running the SeaORM SQLx example. It demonstrates various database operations including querying, filtering, joins, pagination, and CRUD operations on a bakery database schema with cakes, fruits, and fillings tables.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/basic/Readme.md#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nfind all cakes: SELECT `cake`.`id`, `cake`.`name` FROM `cake`\n\nModel { id: 1, name: \"New York Cheese\" }\n\nModel { id: 2, name: \"Chocolate Forest\" }\n\nfind all fruits: SELECT `fruit`.`id`, `fruit`.`name`, `fruit`.`cake_id` FROM `fruit`\n\nModel { id: 1, name: \"Blueberry\", cake_id: Some(1) }\n\nModel { id: 2, name: \"Raspberry\", cake_id: Some(1) }\n\nModel { id: 3, name: \"Strawberry\", cake_id: Some(2) }\n\nModel { id: 4, name: \"Apple\", cake_id: None }\n\nModel { id: 5, name: \"Banana\", cake_id: None }\n\nModel { id: 6, name: \"Cherry\", cake_id: None }\n\nModel { id: 7, name: \"Lemon\", cake_id: None }\n\nModel { id: 8, name: \"Orange\", cake_id: None }\n\nModel { id: 9, name: \"Pineapple\", cake_id: None }\n\n===== =====\n\nfind one by primary key: SELECT `cake`.`id`, `cake`.`name` FROM `cake` WHERE `cake`.`id` = 1 LIMIT 1\n\nModel { id: 1, name: \"New York Cheese\" }\n\nfind one by name: SELECT `cake`.`id`, `cake`.`name` FROM `cake` WHERE `cake`.`name` LIKE '%chocolate%' LIMIT 1\n\nSome(Model { id: 2, name: \"Chocolate Forest\" })\n\nfind models belong to: SELECT `fruit`.`id`, `fruit`.`name`, `fruit`.`cake_id` FROM `fruit` INNER JOIN `cake` ON `cake`.`id` = `fruit`.`cake_id` WHERE `cake`.`id` = 1\n\nModel { id: 1, name: \"Blueberry\", cake_id: Some(1) }\n\nModel { id: 2, name: \"Raspberry\", cake_id: Some(1) }\n\n===== =====\n\nfind fruits and cakes: SELECT `fruit`.`id` AS `A_id`, `fruit`.`name` AS `A_name`, `fruit`.`cake_id` AS `A_cake_id`, `cake`.`id` AS `B_id`, `cake`.`name` AS `B_name` FROM `fruit` LEFT JOIN `cake` ON `fruit`.`cake_id` = `cake`.`id`\nwith loader: \nSELECT `fruit`.`id`, `fruit`.`name`, `fruit`.`cake_id` FROM `fruit`\nSELECT `cake`.`id`, `cake`.`name` FROM `cake` WHERE `cake`.`id` IN (1, 1, 2, NULL, NULL, NULL, NULL, NULL, NULL)\n\n(Model { id: 1, name: \"Blueberry\", cake_id: Some(1) }, Some(Model { id: 1, name: \"New York Cheese\" }))\n(Model { id: 2, name: \"Raspberry\", cake_id: Some(1) }, Some(Model { id: 1, name: \"New York Cheese\" }))\n(Model { id: 3, name: \"Strawberry\", cake_id: Some(2) }, Some(Model { id: 2, name: \"Chocolate Forest\" }))\n(Model { id: 4, name: \"Apple\", cake_id: None }, None)\n(Model { id: 5, name: \"Banana\", cake_id: None }, None)\n(Model { id: 6, name: \"Cherry\", cake_id: None }, None)\n(Model { id: 7, name: \"Lemon\", cake_id: None }, None)\n(Model { id: 8, name: \"Orange\", cake_id: None }, None)\n(Model { id: 9, name: \"Pineapple\", cake_id: None }, None)\n===== =====\n\nfind cakes with fruits: SELECT `cake`.`id` AS `A_id`, `cake`.`name` AS `A_name`, `fruit`.`id` AS `B_id`, `fruit`.`name` AS `B_name`, `fruit`.`cake_id` AS `B_cake_id` FROM `cake` LEFT JOIN `fruit` ON `cake`.`id` = `fruit`.`cake_id` ORDER BY `cake`.`id` ASC\nwith loader: \nSELECT `cake`.`id`, `cake`.`name` FROM `cake`\nSELECT `fruit`.`id`, `fruit`.`name`, `fruit`.`cake_id` FROM `fruit` WHERE `fruit`.`cake_id` IN (1, 2)\n\n(Model { id: 1, name: \"New York Cheese\" }, [Model { id: 1, name: \"Blueberry\", cake_id: Some(1) }, Model { id: 2, name: \"Raspberry\", cake_id: Some(1) }])\n\n(Model { id: 2, name: \"Chocolate Forest\" }, [Model { id: 3, name: \"Strawberry\", cake_id: Some(2) }])\n\n===== =====\n\ncount fruits by cake: SELECT `cake`.`name`, COUNT(`fruit`.`id`) AS `num_of_fruits` FROM `cake` LEFT JOIN `fruit` ON `cake`.`id` = `fruit`.`cake_id` GROUP BY `cake`.`name`\n\nSelectResult { name: \"New York Cheese\", num_of_fruits: 2 }\n\nSelectResult { name: \"Chocolate Forest\", num_of_fruits: 1 }\n\n===== =====\n\nfind cakes and fillings: SELECT `cake`.`id` AS `A_id`, `cake`.`name` AS `A_name`, `filling`.`id` AS `B_id`, `filling`.`name` AS `B_name` FROM `cake` LEFT JOIN `cake_filling` ON `cake`.`id` = `cake_filling`.`cake_id` LEFT JOIN `filling` ON `cake_filling`.`filling_id` = `filling`.`id` ORDER BY `cake`.`id` ASC\nwith loader: \nSELECT `cake`.`id`, `cake`.`name` FROM `cake`\nSELECT `cake_filling`.`cake_id`, `cake_filling`.`filling_id` FROM `cake_filling` WHERE `cake_filling`.`cake_id` IN (1, 2)\nSELECT `filling`.`id`, `filling`.`name` FROM `filling` WHERE `filling`.`id` IN (1, 2, 2, 3)\n\n(Model { id: 1, name: \"New York Cheese\" }, [Model { id: 1, name: \"Vanilla\" }, Model { id: 2, name: \"Lemon\" }])\n\n(Model { id: 2, name: \"Chocolate Forest\" }, [Model { id: 2, name: \"Lemon\" }, Model { id: 3, name: \"Mango\" }])\n\nfind fillings for cheese cake: SELECT `cake`.`id`, `cake`.`name` FROM `cake` WHERE `cake`.`id` = 1 LIMIT 1\nSELECT `filling`.`id`, `filling`.`name` FROM `filling` INNER JOIN `cake_filling` ON `cake_filling`.`filling_id` = `filling`.`id` INNER JOIN `cake` ON `cake`.`id` = `cake_filling`.`cake_id` WHERE `cake`.`id` = 1\n\nModel { id: 1, name: \"Vanilla\" }\n\nModel { id: 2, name: \"Lemon\" }\n\nfind cakes for lemon: SELECT `filling`.`id`, `filling`.`name` FROM `filling` WHERE `filling`.`id` = 2 LIMIT 1\nSELECT `cake`.`id`, `cake`.`name` FROM `cake` INNER JOIN `cake_filling` ON `cake_filling`.`cake_id` = `cake`.`id` INNER JOIN `filling` ON `filling`.`id` = `cake_filling`.`filling_id` WHERE `filling`.`id` = 2\n\nModel { id: 1, name: \"New York Cheese\" }\n\nModel { id: 2, name: \"Chocolate Forest\" }\n\n===== =====\n\nfind all cakes paginated: \nSELECT `cake`.`id`, `cake`.`name` FROM `cake` LIMIT 3 OFFSET 0\nModel { id: 1, name: \"New York Cheese\" }\nModel { id: 2, name: \"Chocolate Forest\" }\nSELECT `cake`.`id`, `cake`.`name` FROM `cake` LIMIT 3 OFFSET 3\n\nfind all fruits paginated: \nSELECT `fruit`.`id`, `fruit`.`name`, `fruit`.`cake_id` FROM `fruit` LIMIT 3 OFFSET 0\nModel { id: 1, name: \"Blueberry\", cake_id: Some(1) }\nModel { id: 2, name: \"Raspberry\", cake_id: Some(1) }\nModel { id: 3, name: \"Strawberry\", cake_id: Some(2) }\nSELECT `fruit`.`id`, `fruit`.`name`, `fruit`.`cake_id` FROM `fruit` LIMIT 3 OFFSET 3\nModel { id: 4, name: \"Apple\", cake_id: None }\nModel { id: 5, name: \"Banana\", cake_id: None }\nModel { id: 6, name: \"Cherry\", cake_id: None }\nSELECT `fruit`.`id`, `fruit`.`name`, `fruit`.`cake_id` FROM `fruit` LIMIT 3 OFFSET 6\nModel { id: 7, name: \"Lemon\", cake_id: None }\nModel { id: 8, name: \"Orange\", cake_id: None }\nModel { id: 9, name: \"Pineapple\", cake_id: None }\nSELECT `fruit`.`id`, `fruit`.`name`, `fruit`.`cake_id` FROM `fruit` LIMIT 3 OFFSET 9\n\nfind all fruits with stream: \nSELECT `fruit`.`id`, `fruit`.`name`, `fruit`.`cake_id` FROM `fruit` LIMIT 3 OFFSET 0\nModel { id: 1, name: \"Blueberry\", cake_id: Some(1) }\nModel { id: 2, name: \"Raspberry\", cake_id: Some(1) }\nModel { id: 3, name: \"Strawberry\", cake_id: Some(2) }\nSELECT `fruit`.`id`, `fruit`.`name`, `fruit`.`cake_id` FROM `fruit` LIMIT 3 OFFSET 3\nModel { id: 4, name: \"Apple\", cake_id: None }\nModel { id: 5, name: \"Banana\", cake_id: None }\nModel { id: 6, name: \"Cherry\", cake_id: None }\nSELECT `fruit`.`id`, `fruit`.`name`, `fruit`.`cake_id` FROM `fruit` LIMIT 3 OFFSET 6\nModel { id: 7, name: \"Lemon\", cake_id: None }\nModel { id: 8, name: \"Orange\", cake_id: None }\nModel { id: 9, name: \"Pineapple\", cake_id: None }\nSELECT `fruit`.`id`, `fruit`.`name`, `fruit`.`cake_id` FROM `fruit` LIMIT 3 OFFSET 9\n\nfind all fruits in json with stream: \nSELECT `fruit`.`id`, `fruit`.`name`, `fruit`.`cake_id` FROM `fruit` LIMIT 3 OFFSET 0\nObject {\"cake_id\": Number(1), \"id\": Number(1), \"name\": String(\"Blueberry\")}\nObject {\"cake_id\": Number(1), \"id\": Number(2), \"name\": String(\"Raspberry\")}\nObject {\"cake_id\": Number(2), \"id\": Number(3), \"name\": String(\"Strawberry\")}\nSELECT `fruit`.`id`, `fruit`.`name`, `fruit`.`cake_id` FROM `fruit` LIMIT 3 OFFSET 3\nObject {\"cake_id\": Null, \"id\": Number(4), \"name\": String(\"Apple\")}\nObject {\"cake_id\": Null, \"id\": Number(5), \"name\": String(\"Banana\")}\nObject {\"cake_id\": Null, \"id\": Number(6), \"name\": String(\"Cherry\")}\nSELECT `fruit`.`id`, `fruit`.`name`, `fruit`.`cake_id` FROM `fruit` LIMIT 3 OFFSET 6\nObject {\"cake_id\": Null, \"id\": Number(7), \"name\": String(\"Lemon\")}\nObject {\"cake_id\": Null, \"id\": Number(8), \"name\": String(\"Orange\")}\nObject {\"cake_id\": Null, \"id\": Number(9), \"name\": String(\"Pineapple\")}\nSELECT `fruit`.`id`, `fruit`.`name`, `fruit`.`cake_id` FROM `fruit` LIMIT 3 OFFSET 9\n===== =====\n\nfruits first page: \nSELECT `fruit`.`id`, `fruit`.`name`, `fruit`.`cake_id` FROM `fruit` LIMIT 3 OFFSET 0\nModel { id: 1, name: \"Blueberry\", cake_id: Some(1) }\nModel { id: 2, name: \"Raspberry\", cake_id: Some(1) }\nModel { id: 3, name: \"Strawberry\", cake_id: Some(2) }\n===== =====\n\nfruits number of page: \nSELECT COUNT(*) AS num_items FROM (SELECT `fruit`.`id`, `fruit`.`name`, `fruit`.`cake_id` FROM `fruit`) AS `sub_query`\n3\n===== =====\n\nINSERT INTO `fruit` (`name`) VALUES ('pear')\nInserted: last_insert_id = 64\nSELECT `fruit`.`id`, `fruit`.`name`, `fruit`.`cake_id` FROM `fruit` WHERE `fruit`.`id` = 64 LIMIT 1\nPear: Some(Model { id: 64, name: \"pear\", cake_id: None })\nUPDATE `fruit` SET `name` = 'Sweet pear' WHERE `fruit`.`id` = 64\nSELECT `fruit`.`id`, `fruit`.`name`, `fruit`.`cake_id` FROM `fruit` WHERE `fruit`.`id` = 64 LIMIT 1\nUpdated: Model { id: 64, name: \"Sweet pear\", cake_id: None }\nDELETE FROM `fruit` WHERE `fruit`.`id` = 64\nDeleted: DeleteResult { rows_affected: 1 }\n===== =====\n\nINSERT INTO `fruit` (`name`) VALUES ('Banana')\nSELECT `fruit`.`id`, `fruit`.`name`, `fruit`.`cake_id` FROM `fruit` WHERE `fruit`.`id` = 65 LIMIT 1\nInserted: ActiveModel { id: Unchanged(65), name: Unchanged(\"Banana\"), cake_id: Unchanged(None) }\nUPDATE `fruit` SET `name` = 'Banana Mongo' WHERE `fruit`.`id` = 65\nSELECT `fruit`.`id`, `fruit`.`name`, `fruit`.`cake_id` FROM `fruit` WHERE `fruit`.`id` = 65 LIMIT 1\nUpdated: ActiveModel { id: Unchanged(65), name: Unchanged(\"Banana Mongo\"), cake_id: Unchanged(None) }\nDELETE FROM `fruit` WHERE `fruit`.`id` = 65\nDeleted: DeleteResult { rows_affected: 1 }\n===== =====\n\nINSERT INTO `fruit` (`name`) VALUES ('Pineapple')\nSELECT `fruit`.`id`, `fruit`.`name`, `fruit`.`cake_id` FROM `fruit` WHERE `fruit`.`id` = 66 LIMIT 1\nSaved: ActiveModel { id: Unchanged(66), name: Unchanged(\"Pineapple\"), cake_id: Unchanged(None) }\nDELETE FROM `fruit` WHERE `fruit`.`id` = 66\nDeleted: DeleteResult { rows_affected: 1 }\n```\n\n----------------------------------------\n\nTITLE: Implementing Display for Enums in Rust with SeaORM\nDESCRIPTION: Shows how to use the DeriveDisplay macro in SeaORM to automatically implement std::fmt::Display for enums, with the option to customize display values.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/CHANGELOG.md#2025-04-12_snippet_28\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(DeriveDisplay)]\nenum DisplayTea {\n    EverydayTea,\n    #[sea_orm(display_value = \"Breakfast Tea\")]\n    BreakfastTea,\n}\nassert_eq!(format!(\"{}\", DisplayTea::EverydayTea), \"EverydayTea\");\nassert_eq!(format!(\"{}\", DisplayTea::BreakfastTea), \"Breakfast Tea\");\n```\n\n----------------------------------------\n\nTITLE: Checking Migration Status with SeaORM\nDESCRIPTION: Command to check the current status of all migrations to see which have been applied.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/sea-orm-migration/README.md#2025-04-12_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- migrate status\n```\n\n----------------------------------------\n\nTITLE: Applying All Pending Migrations in Sea ORM\nDESCRIPTION: These commands apply all pending migrations to the database. They bring the database schema up to date with the latest changes.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/loco_starter/migration/README.md#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncargo run\n```\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- up\n```\n\n----------------------------------------\n\nTITLE: Installing SeaORM CLI\nDESCRIPTION: Installation instructions for SeaORM CLI using cargo package manager with two alternative installation methods.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/sea-orm-cli/README.md#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n> cargo install sea-orm-cli \n> sea-orm-cli help\n```\n\nLANGUAGE: sh\nCODE:\n```\n> cargo install --bin sea\n> sea help\n```\n\n----------------------------------------\n\nTITLE: Using DatabaseConnection Close Methods in Sea-ORM\nDESCRIPTION: Shows different methods for closing database connections in Sea-ORM, including the new close_by_ref method that doesn't consume the connection.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/CHANGELOG.md#2025-04-12_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\npub async fn close(self) -> Result<(), DbErr> { .. } // existing\npub async fn close_by_ref(&self) -> Result<(), DbErr> { .. } // new\n```\n\n----------------------------------------\n\nTITLE: Dropping and Reapplying All Migrations in SeaORM\nDESCRIPTION: Command to completely refresh the database by dropping all tables and reapplying all migrations. This is useful for resetting the database to a clean state.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/jsonrpsee_example/migration/README.md#2025-04-12_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- fresh\n```\n\n----------------------------------------\n\nTITLE: Applying All Pending Migrations in Sea ORM\nDESCRIPTION: Command to apply all pending migrations to the database. Two equivalent commands are provided for this operation.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/axum_example/migration/README.md#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncargo run\n```\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- up\n```\n\n----------------------------------------\n\nTITLE: Registering Entity Modules and Active Enums with Seaography in Sea-ORM\nDESCRIPTION: Shows how to register Sea-ORM entity modules and active enums with Seaography for GraphQL integration. This code is generated by sea-orm-codegen.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/CHANGELOG.md#2025-04-12_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\npub mod prelude;\n\npub mod sea_orm_active_enums;\n\npub mod baker;\npub mod bakery;\npub mod cake;\npub mod cakes_bakers;\npub mod customer;\npub mod lineitem;\npub mod order;\n\nseaography::register_entity_modules!([\n    baker,\n    bakery,\n    cake,\n    cakes_bakers,\n    customer,\n    lineitem,\n    order,\n]);\n\nseaography::register_active_enums!([\n    sea_orm_active_enums::Tea,\n    sea_orm_active_enums::Color,\n]);\n```\n\n----------------------------------------\n\nTITLE: Rust PaginatorTrait Example\nDESCRIPTION: Example showing how to use the paginator trait to stream paginated results in SeaORM\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/CHANGELOG.md#2025-04-12_snippet_50\n\nLANGUAGE: rust\nCODE:\n```\nuse futures::TryStreamExt;\nuse sea_orm::{entity::*, query::*, tests_cfg::cake};\n\nlet mut cake_stream = cake::Entity::find()\n    .order_by_asc(cake::Column::Id)\n    .paginate(db, 50)\n    .into_stream();\n\nwhile let Some(cakes) = cake_stream.try_next().await? {\n    // Do something on cakes: Vec<cake::Model>\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Migration Status with SeaORM Migrator\nDESCRIPTION: Command to check the current status of all database migrations using the SeaORM migrator CLI. This helps identify which migrations have been applied and which are pending.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/actix_example/migration/README.md#2025-04-12_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- status\n```\n\n----------------------------------------\n\nTITLE: Sending JSON-RPC Requests to SeaORM Server\nDESCRIPTION: This snippet demonstrates how to send various JSON-RPC requests to the SeaORM server using curl. It includes examples for inserting, listing, deleting, and updating posts.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/jsonrpsee_example/README.md#2025-04-12_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n#insert\ncurl --location --request POST 'http://127.0.0.1:8000' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\"jsonrpc\": \"2.0\", \"method\": \"Post.Insert\", \"params\": [\n    {\n        \"id\":0,\n        \"title\":\"aaaaaaa\",\n        \"text\":\"aaaaaaa\"\n    }\n], \"id\": 2}'\n\n#list\ncurl --location --request POST 'http://127.0.0.1:8000' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"Post.List\",\n    \"params\": [\n        1,\n        100\n    ],\n    \"id\": 2\n}'\n\n#delete\ncurl --location --request POST 'http://127.0.0.1:8000' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"Post.Delete\",\n    \"params\": [\n        10\n    ],\n    \"id\": 2\n}'\n\n#update\ncurl --location --request POST 'http://127.0.0.1:8000' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"Post.Update\",\n    \"params\": [\n        {\n            \"id\": 1,\n            \"title\": \"1111\",\n            \"text\": \"11111\"\n        }\n    ],\n    \"id\": 2\n}'\n```\n\n----------------------------------------\n\nTITLE: Generating a new migration file in Sea-ORM\nDESCRIPTION: This command generates a new migration file with the specified name. Migration files are used to define database schema changes that can be applied or rolled back.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/sea-orm-cli/template/migration/README.md#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- generate MIGRATION_NAME\n```\n\n----------------------------------------\n\nTITLE: Applying all pending migrations in Sea-ORM\nDESCRIPTION: These commands apply all pending migrations to the database. Both commands perform the same action, bringing the database schema up to date.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/sea-orm-cli/template/migration/README.md#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncargo run\n```\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- up\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query for Bakery-Cake-Baker Relationship\nDESCRIPTION: Query that retrieves bakeries with their cakes and associated bakers, including pagination and sorting.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/seaography_example/README.md#2025-04-12_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  bakery(pagination: { page: { limit: 10, page: 0 } }, orderBy: { name: ASC }) {\n    nodes {\n      name\n      cake {\n        nodes {\n          name\n          price\n          baker {\n            nodes {\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Complex Type Paths with DeriveIntoActiveModel in Sea-ORM\nDESCRIPTION: Shows how to use DeriveIntoActiveModel with complex type paths, allowing for more flexible ActiveModel transformation patterns with nested Option types.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/CHANGELOG.md#2025-04-12_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(DeriveIntoActiveModel)]\n#[sea_orm(active_model = \"<fruit::Entity as EntityTrait>::ActiveModel\")]\nstruct Fruit {\n    cake_id: Option<Option<i32>>,\n}\n```\n\n----------------------------------------\n\nTITLE: Generating New Migration File in SeaORM (Rust)\nDESCRIPTION: This command generates a new migration file with the specified name using the SeaORM Migrator CLI.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/loco_seaography/migration/README.md#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- migrate generate MIGRATION_NAME\n```\n\n----------------------------------------\n\nTITLE: Initializing Migration Directory with SeaORM\nDESCRIPTION: Command to initialize a new migration directory structure for database migrations.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/sea-orm-migration/README.md#2025-04-12_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- migrate init\n```\n\n----------------------------------------\n\nTITLE: Applying Pending Migrations in SeaORM\nDESCRIPTION: Commands to apply all or a specific number of pending database migrations.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/graphql_example/migration/README.md#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncargo run\n```\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- up\n```\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- up -n 10\n```\n\n----------------------------------------\n\nTITLE: Implementing PrimaryKeyArity for Compile-Time Arity in Rust\nDESCRIPTION: Demonstrates how to use the new PrimaryKeyArity trait to get the arity of a primary key at compile-time instead of runtime.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/CHANGELOG.md#2025-04-12_snippet_18\n\nLANGUAGE: rust\nCODE:\n```\nfn get_arity_of<E: EntityTrait>() -> usize {\n    E::PrimaryKey::iter().count() // before; runtime\n    <<E::PrimaryKey as PrimaryKeyTrait>::ValueType as PrimaryKeyArity>::ARITY // now; compile-time\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Pending Migrations in SeaORM\nDESCRIPTION: Commands to apply all or a specific number of pending database migrations.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/poem_example/migration/README.md#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncargo run\n```\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- up\n```\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- up -n 10\n```\n\n----------------------------------------\n\nTITLE: Applying Pending Migrations in SeaORM using Cargo\nDESCRIPTION: These commands apply all pending migrations or a specified number of pending migrations using the SeaORM Migrator CLI.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/salvo_example/migration/README.md#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncargo run\n```\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- up\n```\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- up -n 10\n```\n\n----------------------------------------\n\nTITLE: Applying Pending Migrations with SeaORM\nDESCRIPTION: Commands to apply all pending database migrations, with two equivalent versions.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/sea-orm-migration/README.md#2025-04-12_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- migrate\n```\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- migrate up\n```\n\n----------------------------------------\n\nTITLE: Applying All Pending Migrations in Sea ORM\nDESCRIPTION: Commands to apply all pending migrations in a Sea ORM project. Both commands perform the same operation, with the second one explicitly specifying the 'up' directive.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/tonic_example/migration/README.md#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncargo run\n```\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- up\n```\n\n----------------------------------------\n\nTITLE: Generic Struct Support in FromQueryResult\nDESCRIPTION: Shows how to use generic structs with the FromQueryResult derive macro.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/CHANGELOG.md#2025-04-12_snippet_37\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(FromQueryResult)]\nstruct GenericTest<T: TryGetable> {\n    foo: i32,\n    bar: T,\n}\n```\n\n----------------------------------------\n\nTITLE: Using PrimaryKeyArity with ARITY Constant in Sea-ORM\nDESCRIPTION: Demonstrates how to use the PrimaryKeyArity trait with the ARITY constant to determine the number of primary key fields at compile-time rather than runtime, improving performance and type safety.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/CHANGELOG.md#2025-04-12_snippet_13\n\nLANGUAGE: rust\nCODE:\n```\nfn get_arity_of<E: EntityTrait>() -> usize {\n    E::PrimaryKey::iter().count() // before; runtime\n    <<E::PrimaryKey as PrimaryKeyTrait>::ValueType as PrimaryKeyArity>::ARITY // now; compile-time\n}\n```\n\n----------------------------------------\n\nTITLE: Fresh Database Migration\nDESCRIPTION: Command to drop all tables from the database and then reapply all migrations for a clean state.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/seaography_example/migration/README.md#2025-04-12_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- fresh\n```\n\n----------------------------------------\n\nTITLE: Reset and Refresh Database Commands in SeaORM\nDESCRIPTION: Commands to perform complete database resets, refreshes, and table drops with migration reapplication.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/graphql_example/migration/README.md#2025-04-12_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- fresh\n```\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- refresh\n```\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- reset\n```\n\n----------------------------------------\n\nTITLE: Updated Iden Derive Macro Usage\nDESCRIPTION: Demonstrates the transition from Iden to DeriveIden macro usage in SeaORM.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/CHANGELOG.md#2025-04-12_snippet_36\n\nLANGUAGE: rust\nCODE:\n```\n// then:\n\n#[derive(Iden)]\n#[iden = \"category\"]\npub struct CategoryEnum;\n\n#[derive(Iden)]\npub enum Tea {\n    Table,\n    #[iden = \"EverydayTea\"]\n    EverydayTea,\n}\n\n// now:\n\n#[derive(DeriveIden)]\n#[sea_orm(iden = \"category\")]\npub struct CategoryEnum;\n\n#[derive(DeriveIden)]\npub enum Tea {\n    Table,\n    #[sea_orm(iden = \"EverydayTea\")]\n    EverydayTea,\n}\n```\n\n----------------------------------------\n\nTITLE: Resetting and Refreshing Migrations in SeaORM using Cargo\nDESCRIPTION: These commands perform database reset, refresh, and reapplication of all migrations using the SeaORM Migrator CLI.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/salvo_example/migration/README.md#2025-04-12_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- fresh\n```\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- refresh\n```\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- reset\n```\n\n----------------------------------------\n\nTITLE: Resetting all migrations in SeaORM\nDESCRIPTION: Rolls back all previously applied migrations, returning the database to its pre-migration state.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/loco_example/migration/README.md#2025-04-12_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- reset\n```\n\n----------------------------------------\n\nTITLE: Installing sea-orm-cli from Source Code\nDESCRIPTION: Commands to install sea-orm-cli from source code, either from the root directory, within the sea-orm-cli directory, or directly from GitHub.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/CONTRIBUTING.md#2025-04-12_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncargo install --force --path sea-orm-cli\n```\n\nLANGUAGE: sh\nCODE:\n```\ncargo install --force --path .\n```\n\nLANGUAGE: sh\nCODE:\n```\ncargo install sea-orm-cli --force --git https://github.com/SeaQL/sea-orm --branch <GIT_BRANCH>\n```\n\n----------------------------------------\n\nTITLE: DeriveActiveEnum Implementation for String Values\nDESCRIPTION: Shows how DeriveActiveEnum handles string values with non-UAX#31 compliant characters.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/CHANGELOG.md#2025-04-12_snippet_35\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(EnumIter, DeriveActiveEnum)]\n#[sea_orm(rs_type = \"String\", db_type = \"String(None)\")]\npub enum StringValue {\n    #[sea_orm(string_value = \"\")]\n    Member1,\n    #[sea_orm(string_value = \"$$\")]\n    Member2,\n}\n// will now produce the following enum:\npub enum StringValueVariant {\n    __Empty,\n    _0x240x24,\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Limited Number of Migrations with SeaORM\nDESCRIPTION: Command to apply only a specific number of pending migrations (10 in this example).\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/sea-orm-migration/README.md#2025-04-12_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- migrate up -n 10\n```\n\n----------------------------------------\n\nTITLE: Rolling Back Last Applied Migration in Sea ORM\nDESCRIPTION: This command rolls back the last applied migration. It's used to undo the most recent database schema change.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/loco_starter/migration/README.md#2025-04-12_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- down\n```\n\n----------------------------------------\n\nTITLE: Refreshing All Migrations with SeaORM\nDESCRIPTION: Command to rollback all applied migrations and then reapply them in sequence.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/sea-orm-migration/README.md#2025-04-12_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- migrate refresh\n```\n\n----------------------------------------\n\nTITLE: Defining Enum Column Type in Rust for SeaORM\nDESCRIPTION: Code showing the structural changes to ColumnType::Enum in SeaORM between versions. The change replaces a simple String and Vec<String> with a more complex structure using DynIden for enum name and variants.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/CHANGELOG.md#2025-04-12_snippet_46\n\nLANGUAGE: rust\nCODE:\n```\nenum ColumnType {\n    // then\n    Enum(String, Vec<String>)\n\n    // now\n    Enum {\n        /// Name of enum\n        name: DynIden,\n        /// Variants of enum\n        variants: Vec<DynIden>,\n    }\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Applying All Pending Migrations in SeaORM (Rust)\nDESCRIPTION: These commands apply all pending migrations to the database using the SeaORM Migrator CLI. Two equivalent forms are provided.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/loco_seaography/migration/README.md#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncargo run\n```\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- up\n```\n\n----------------------------------------\n\nTITLE: Rolling back the most recent migration in Sea-ORM\nDESCRIPTION: This command rolls back the last applied migration, reverting the database schema to its previous state.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/sea-orm-cli/template/migration/README.md#2025-04-12_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- down\n```\n\n----------------------------------------\n\nTITLE: Refreshing All Migrations\nDESCRIPTION: Command to rollback all applied migrations and then reapply them all, useful for resetting to a clean state without dropping tables.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/seaography_example/migration/README.md#2025-04-12_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- refresh\n```\n\n----------------------------------------\n\nTITLE: Rust Schema Creation Example\nDESCRIPTION: Demonstrates how to create database schema from entity in SeaORM 0.4.x vs 0.3.x\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/CHANGELOG.md#2025-04-12_snippet_51\n\nLANGUAGE: rust\nCODE:\n```\nuse sea_orm::{tests_cfg::*, DbBackend, Schema};\nuse sea_orm::sea_query::TableCreateStatement;\n\n// 0.3.x\nlet _: TableCreateStatement = Schema::create_table_from_entity(cake::Entity);\n\n// 0.4.x\nlet schema: Schema = Schema::new(DbBackend::MySql);\nlet _: TableCreateStatement = schema.create_table_from_entity(cake::Entity);\n```\n\n----------------------------------------\n\nTITLE: Checking Migration Status in SeaORM\nDESCRIPTION: Command to check the status of all migrations. This displays which migrations have been applied and which are pending.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/jsonrpsee_example/migration/README.md#2025-04-12_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- status\n```\n\n----------------------------------------\n\nTITLE: Rolling Back Last Applied Migration in SeaORM\nDESCRIPTION: Command to rollback the most recently applied migration. The 'down' command reverts the last migration that was applied.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/jsonrpsee_example/migration/README.md#2025-04-12_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- down\n```\n\n----------------------------------------\n\nTITLE: Checking migration status in SeaORM\nDESCRIPTION: Displays the current status of all migrations, showing which ones have been applied and which are pending.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/loco_example/migration/README.md#2025-04-12_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- status\n```\n\n----------------------------------------\n\nTITLE: Recreating the database schema in Sea-ORM\nDESCRIPTION: The 'fresh' command drops all tables from the database and then reapplies all migrations, effectively resetting the database to a clean state while preserving the defined schema.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/sea-orm-cli/template/migration/README.md#2025-04-12_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- fresh\n```\n\n----------------------------------------\n\nTITLE: Handling RecordNotUpdated Error Changes\nDESCRIPTION: Demonstrates the change in error handling where RecordNotFound is replaced with RecordNotUpdated variant.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/CHANGELOG.md#2025-04-12_snippet_44\n\nLANGUAGE: rust\nCODE:\n```\nlet res = Update::one(cake::ActiveModel {\n        name: Set(\"Cheese Cake\".to_owned()),\n        ..model.into_active_model()\n    })\n    .exec(&db)\n    .await;\n\n// then\nassert_eq!(\n    res,\n    Err(DbErr::RecordNotFound(\n        \"None of the database rows are affected\".to_owned()\n    ))\n);\n\n// now\nassert_eq!(res, Err(DbErr::RecordNotUpdated));\n```\n\n----------------------------------------\n\nTITLE: Applying Limited Number of Pending Migrations in SeaORM (Rust)\nDESCRIPTION: This command applies a specified number of pending migrations (in this case, 10) to the database using the SeaORM Migrator CLI.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/loco_seaography/migration/README.md#2025-04-12_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- up -n 10\n```\n\n----------------------------------------\n\nTITLE: Rolling Back Last Applied Migration in SeaORM\nDESCRIPTION: Command to roll back the most recently applied migration, reverting the database to its previous state.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/rocket_okapi_example/migration/README.md#2025-04-12_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- down\n```\n\n----------------------------------------\n\nTITLE: Getting CLI Help\nDESCRIPTION: Command to display SeaORM CLI help information.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/sea-orm-cli/README.md#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- -h\n```\n\n----------------------------------------\n\nTITLE: Fresh Database Setup with SeaORM Migrator\nDESCRIPTION: Command to completely reset the database by dropping all tables and then reapplying all migrations from scratch using the SeaORM migrator CLI.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/actix_example/migration/README.md#2025-04-12_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- fresh\n```\n\n----------------------------------------\n\nTITLE: Running Integration Tests with Different Databases\nDESCRIPTION: Commands to run integration tests on live database instances for SQLite, MySQL/MariaDB, and PostgreSQL.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/CONTRIBUTING.md#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nDATABASE_URL=\"sqlite::memory:\" cargo test --all --features default,sqlx-sqlite,runtime-async-std-native-tls\n```\n\nLANGUAGE: sh\nCODE:\n```\nDATABASE_URL=\"mysql://root:root@localhost\" cargo test --all --features default,sqlx-mysql,runtime-async-std-rustls\n```\n\nLANGUAGE: sh\nCODE:\n```\nDATABASE_URL=\"postgres://root:root@localhost\" cargo test --all --features default,sqlx-postgres,runtime-async-std-native-tls\n```\n\n----------------------------------------\n\nTITLE: Rolling Back All Applied Migrations in Sea ORM\nDESCRIPTION: This command rolls back all applied migrations, effectively reverting the database to its initial state before any migrations were applied.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/loco_starter/migration/README.md#2025-04-12_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- reset\n```\n\n----------------------------------------\n\nTITLE: Rolling Back Migrations in SeaORM\nDESCRIPTION: Commands to rollback the last applied migrations, either all or a specific number.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/graphql_example/migration/README.md#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- down\n```\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- down -n 10\n```\n\n----------------------------------------\n\nTITLE: Refreshing All Migrations in SeaORM\nDESCRIPTION: Command to rollback all migrations and then reapply them. This is similar to 'fresh' but uses proper rollback procedures instead of dropping tables.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/jsonrpsee_example/migration/README.md#2025-04-12_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- refresh\n```\n\n----------------------------------------\n\nTITLE: Refreshing all migrations in Sea-ORM\nDESCRIPTION: The 'refresh' command performs a complete rollback of all applied migrations and then reapplies them. This is useful for resetting the database to a clean state while preserving all data definitions.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/sea-orm-cli/template/migration/README.md#2025-04-12_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- refresh\n```\n\n----------------------------------------\n\nTITLE: Running Mock Tests for SeaORM Service Logic\nDESCRIPTION: This snippet shows how to run mock tests on the service logic crate of the SeaORM application. It changes to the service directory and runs cargo test with the mock feature enabled.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/jsonrpsee_example/README.md#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd service\ncargo test --features mock\n```\n\n----------------------------------------\n\nTITLE: Rolling Back Multiple Applied Migrations with SeaORM Migrator\nDESCRIPTION: Command to rollback a specific number of previously applied database migrations using the SeaORM migrator CLI. This example rolls back the last 10 applied migrations.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/actix_example/migration/README.md#2025-04-12_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- down -n 10\n```\n\n----------------------------------------\n\nTITLE: Refreshing Database Schema in SeaORM (Rust)\nDESCRIPTION: This command drops all tables from the database and then reapplies all migrations using the SeaORM Migrator CLI.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/loco_seaography/migration/README.md#2025-04-12_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- fresh\n```\n\n----------------------------------------\n\nTITLE: Refreshing All Migrations in SeaORM\nDESCRIPTION: Command to refresh all migrations by first rolling back all applied migrations and then reapplying them. This is useful for ensuring the database schema is up to date.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/rocket_okapi_example/migration/README.md#2025-04-12_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- refresh\n```\n\n----------------------------------------\n\nTITLE: Refreshing All Migrations in SeaORM (Rust)\nDESCRIPTION: This command rolls back all applied migrations and then reapplies them using the SeaORM Migrator CLI.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/react_admin/backend/migration/README.md#2025-04-12_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- refresh\n```\n\n----------------------------------------\n\nTITLE: Running the Cloudflare Worker with Wrangler\nDESCRIPTION: Command to run the SeaORM Proxy Demo using Cloudflare's Wrangler development tool. This requires both npm and cargo to be installed, with the latest versions of Node.js and Rust.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/proxy_cloudflare_worker_example/README.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx wrangler dev\n```\n\n----------------------------------------\n\nTITLE: Defining Related Entities for Seaography in Rust\nDESCRIPTION: Demonstrates how to use the DeriveRelatedEntity macro in SeaORM to generate a RelatedEntity enum for Seaography integration. This is typically used with the sea-orm-cli tool when the seaography flag is set.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/CHANGELOG.md#2025-04-12_snippet_30\n\nLANGUAGE: rust\nCODE:\n```\n/// SeaORM Entity\n#[derive(Copy, Clone, Debug, EnumIter, DeriveRelatedEntity)]\npub enum RelatedEntity {\n    #[sea_orm(entity = \"super::bakery::Entity\")]\n    Bakery,\n    #[sea_orm(entity = \"super::cake_baker::Entity\")]\n    CakeBaker,\n    #[sea_orm(entity = \"super::cake::Entity\")]\n    Cake,\n}\n```\n\n----------------------------------------\n\nTITLE: Resetting and Reapplying All Migrations in SeaORM (Rust)\nDESCRIPTION: This command drops all tables from the database and then reapplies all migrations using the SeaORM Migrator CLI.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/react_admin/backend/migration/README.md#2025-04-12_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- fresh\n```\n\n----------------------------------------\n\nTITLE: Refreshing All Migrations in Sea ORM\nDESCRIPTION: Command to rollback all applied migrations and then reapply them. This refreshes the entire database schema without dropping tables.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/axum_example/migration/README.md#2025-04-12_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- refresh\n```\n\n----------------------------------------\n\nTITLE: Resetting the database in Sea-ORM\nDESCRIPTION: The 'reset' command rolls back all applied migrations, bringing the database to its state before any migrations were applied. This effectively removes all schema changes made by the migrations.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/sea-orm-cli/template/migration/README.md#2025-04-12_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- reset\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Migration Status Checking in Rust\nDESCRIPTION: Shows how to check pending migrations and access migration metadata using the new Migration::name() and Migration::status() getters.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/CHANGELOG.md#2025-04-12_snippet_31\n\nLANGUAGE: rust\nCODE:\n```\nlet migrations = Migrator::get_pending_migrations(db).await?;\nassert_eq!(migrations.len(), 5);\n\nlet migration = migrations.get(0).unwrap();\nassert_eq!(migration.name(), \"m20220118_000002_create_fruit_table\");\nassert_eq!(migration.status(), MigrationStatus::Pending);\n```\n\n----------------------------------------\n\nTITLE: Rolling Back All Applied Migrations in Sea ORM\nDESCRIPTION: Command to rollback all previously applied migrations using the 'reset' directive. This undoes all database changes made by migrations but keeps the tables structure intact.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/tonic_example/migration/README.md#2025-04-12_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- reset\n```\n\n----------------------------------------\n\nTITLE: Refreshing migrations without dropping tables in SeaORM\nDESCRIPTION: Rolls back all previously applied migrations and then reapplies them. This keeps the database but reconstructs its schema from scratch.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/loco_example/migration/README.md#2025-04-12_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- refresh\n```\n\n----------------------------------------\n\nTITLE: Resetting Database Migrations with SeaORM Migrator\nDESCRIPTION: Command to completely remove all applied migrations from the database without reapplying them using the SeaORM migrator CLI.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/actix_example/migration/README.md#2025-04-12_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- reset\n```\n\n----------------------------------------\n\nTITLE: Applying a limited number of pending migrations in Sea-ORM\nDESCRIPTION: This command applies a specific number of pending migrations to the database. The '-n' flag limits the operation to the specified number of migrations (10 in this example).\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/sea-orm-cli/template/migration/README.md#2025-04-12_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- up -n 10\n```\n\n----------------------------------------\n\nTITLE: Rolling Back Multiple Applied Migrations in SeaORM\nDESCRIPTION: Command to rollback multiple recently applied migrations. The -n flag specifies the number of migrations to rollback.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/jsonrpsee_example/migration/README.md#2025-04-12_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- down -n 10\n```\n\n----------------------------------------\n\nTITLE: Rolling Back Last Migration with SeaORM\nDESCRIPTION: Command to rollback the most recently applied migration.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/sea-orm-migration/README.md#2025-04-12_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- migrate down\n```\n\n----------------------------------------\n\nTITLE: Resetting All Migrations with SeaORM\nDESCRIPTION: Command to rollback all previously applied migrations without reapplying them.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/sea-orm-migration/README.md#2025-04-12_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- migrate reset\n```\n\n----------------------------------------\n\nTITLE: Conflict Handling in Insert Operations\nDESCRIPTION: Demonstrates the new API for handling insert conflicts with do_nothing() behavior.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/CHANGELOG.md#2025-04-12_snippet_34\n\nLANGUAGE: rust\nCODE:\n```\nlet on = OnConflict::column(Column::Id).do_nothing().to_owned();\n\n// Existing behaviour\nlet res = Entity::insert_many([..]).on_conflict(on).exec(db).await;\nassert!(matches!(res, Err(DbErr::RecordNotInserted)));\n\n// New API; now you can:\nlet res =\nEntity::insert_many([..]).on_conflict(on).do_nothing().exec(db).await;\nassert!(matches!(res, Ok(TryInsertResult::Conflicted)));\n```\n\n----------------------------------------\n\nTITLE: Rolling Back Multiple Applied Migrations in Sea ORM\nDESCRIPTION: Command to rollback a specific number of the most recently applied migrations. This example rolls back the last 10 applied migrations.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/axum_example/migration/README.md#2025-04-12_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- down -n 10\n```\n\n----------------------------------------\n\nTITLE: Rolling Back Last Applied Migration in SeaORM (Rust)\nDESCRIPTION: This command rolls back the last applied migration using the SeaORM Migrator CLI.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/loco_seaography/migration/README.md#2025-04-12_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- down\n```\n\n----------------------------------------\n\nTITLE: Implementing ColumnTrait for Binary Columns in Expanded Format\nDESCRIPTION: Example of ColumnTrait implementation generated by `sea-orm-cli generate entity --expanded-format` command for Binary and VarBinary columns. This shows how column definitions are created for different binary column types.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/CHANGELOG.md#2025-04-12_snippet_40\n\nLANGUAGE: rust\nCODE:\n```\nimpl ColumnTrait for Column {\n    type EntityName = Entity;\n    fn def(&self) -> ColumnDef {\n        match self {\n            Self::Id => ColumnType::Integer.def(),\n            Self::Binary => ColumnType::Binary(sea_orm::sea_query::BlobSize::Blob(None)).def(),\n            Self::Binary10 => {\n                ColumnType::Binary(sea_orm::sea_query::BlobSize::Blob(Some(10u32))).def()\n            }\n            Self::BinaryTiny => ColumnType::Binary(sea_orm::sea_query::BlobSize::Tiny).def(),\n            Self::BinaryMedium => ColumnType::Binary(sea_orm::sea_query::BlobSize::Medium).def(),\n            Self::BinaryLong => ColumnType::Binary(sea_orm::sea_query::BlobSize::Long).def(),\n            Self::VarBinary => ColumnType::VarBinary(10u32).def(),\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Entity Files with Sea ORM CLI\nDESCRIPTION: Command to generate Sea ORM entity files from the database schema into the src/entity directory.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/seaography_example/migration/README.md#2025-04-12_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nsea-orm-cli generate entity --output-dir src/entity\n```\n\n----------------------------------------\n\nTITLE: Refreshing All Migrations in Sea ORM\nDESCRIPTION: This command rolls back all applied migrations and then reapplies them. It's useful for ensuring the database is in sync with the current migration scripts.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/loco_starter/migration/README.md#2025-04-12_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- refresh\n```\n\n----------------------------------------\n\nTITLE: Using DerivePartialModel with Nested Entities in Sea-ORM\nDESCRIPTION: Shows how to use DerivePartialModel to create nested entity structures with simplified query handling. Also demonstrates automatic FromQueryResult derivation and customized column mapping.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/CHANGELOG.md#2025-04-12_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(DerivePartialModel)] // FromQueryResult is no longer needed\n#[sea_orm(entity = \"cake::Entity\", from_query_result)]\nstruct Cake {\n    id: i32,\n    name: String,\n    #[sea_orm(nested)]\n    bakery: Option<Bakery>,\n}\n\n#[derive(DerivePartialModel)]\n#[sea_orm(entity = \"bakery::Entity\", from_query_result)]\nstruct Bakery {\n    id: i32,\n    #[sea_orm(from_col = \"Name\")]\n    title: String,\n}\n\n// same as previous example, but without the custom selects\nlet cake: Cake = cake::Entity::find()\n    .left_join(bakery::Entity)\n    .order_by_asc(cake::Column::Id)\n    .into_partial_model()\n    .one(&ctx.db)\n    .await?\n    .unwrap();\n\nassert_eq!(\n    cake,\n    Cake {\n        id: 1,\n        name: \"Cake\".to_string(),\n        bakery: Some(CakeBakery {\n            id: 20,\n            title: \"Bakery\".to_string(),\n        })\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Rolling Back Last Applied Migration in Sea ORM\nDESCRIPTION: Command to rollback the most recently applied migration using the 'down' directive. This undoes the changes made by the last migration that was applied to the database.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/tonic_example/migration/README.md#2025-04-12_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- down\n```\n\n----------------------------------------\n\nTITLE: Checking Migration Status\nDESCRIPTION: Command to check the current status of all migrations, showing which have been applied and which are pending.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/seaography_example/migration/README.md#2025-04-12_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- status\n```\n\n----------------------------------------\n\nTITLE: Running Database Migration\nDESCRIPTION: Executes the database migration script in the migration folder.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/seaography_example/README.md#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncargo run\n```\n\n----------------------------------------\n\nTITLE: Refreshing All Migrations in SeaORM (Rust)\nDESCRIPTION: This command rolls back all applied migrations and then reapplies them using the SeaORM Migrator CLI.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/loco_seaography/migration/README.md#2025-04-12_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- refresh\n```\n\n----------------------------------------\n\nTITLE: Implementing From<Model> for ActiveModel in Sea-ORM\nDESCRIPTION: Shows how to implement a custom conversion from a model struct to an ActiveModel. This feature allows for more flexible model transformations and enables custom data mapping between different model representations.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/CHANGELOG.md#2025-04-12_snippet_12\n\nLANGUAGE: rust\nCODE:\n```\nuse sea_orm::{tests_cfg::cake, Set};\n\nstruct Cake {\n    id: i32,\n    name: String,\n}\n\nimpl From<Cake> for cake::ActiveModel {\n    fn from(value: Cake) -> Self {\n        Self {\n            id: Set(value.id),\n            name: Set(value.name),\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Rolling back multiple recent migrations in SeaORM\nDESCRIPTION: Reverts multiple recently applied migrations. This example rolls back the last 10 applied migrations.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/loco_example/migration/README.md#2025-04-12_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- down -n 10\n```\n\n----------------------------------------\n\nTITLE: Rolling Back Last Applied Migration with SeaORM Migrator\nDESCRIPTION: Command to rollback the most recently applied database migration using the SeaORM migrator CLI.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/actix_example/migration/README.md#2025-04-12_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- down\n```\n\n----------------------------------------\n\nTITLE: Running sea-orm-cli from Source Code\nDESCRIPTION: Commands to run sea-orm-cli directly from the source code, either from the root directory or within the sea-orm-cli directory.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/CONTRIBUTING.md#2025-04-12_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncargo run --manifest-path sea-orm-cli/Cargo.toml -- <command & arguments for sea-orm-cli>\n```\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- <command & arguments for sea-orm-cli>\n```\n\n----------------------------------------\n\nTITLE: Checking migration status in Sea-ORM\nDESCRIPTION: This command displays the current status of all migrations, showing which migrations have been applied and which are pending. It's useful for understanding the current state of the database schema.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/sea-orm-cli/template/migration/README.md#2025-04-12_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- status\n```\n\n----------------------------------------\n\nTITLE: Using DerivePartialModel with Complex Entity Types in Sea-ORM\nDESCRIPTION: Demonstrates how to use the DerivePartialModel macro with complex entity type expressions, enabling more flexible partial model derivation when dealing with nested or compound entity types.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/CHANGELOG.md#2025-04-12_snippet_17\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(DerivePartialModel)]\n#[sea_orm(entity = \"<entity::Model as ModelTrait>::Entity\")]\nstruct EntityNameNotAIdent {\n    #[sea_orm(from_col = \"foo2\")]\n    _foo: i32,\n    #[sea_orm(from_col = \"bar2\")]\n    _bar: String,\n}\n```\n\n----------------------------------------\n\nTITLE: Rolling Back Multiple Applied Migrations in Sea ORM\nDESCRIPTION: Command to rollback a specific number of previously applied migrations using the 'down' directive with the -n flag. This example rolls back the last 10 applied migrations.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/tonic_example/migration/README.md#2025-04-12_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- down -n 10\n```\n\n----------------------------------------\n\nTITLE: Rolling back multiple recent migrations in Sea-ORM\nDESCRIPTION: This command rolls back multiple recently applied migrations. The '-n' flag specifies the number of migrations to roll back (10 in this example).\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/sea-orm-cli/template/migration/README.md#2025-04-12_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- down -n 10\n```\n\n----------------------------------------\n\nTITLE: Enabling Database Feature in Cargo.toml (TOML)\nDESCRIPTION: Guidance on enabling the appropriate database feature in the Cargo.toml file. This step is necessary when not using the default SQLite database, allowing users to specify their chosen database backend.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/rocket_okapi_example/README.md#2025-04-12_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n\"sqlx-postgres\",\n```\n\n----------------------------------------\n\nTITLE: Implementing a Builder Pattern for Relationship Definition in Rust\nDESCRIPTION: This snippet compares two approaches to defining relationships in an ORM. The first uses a traditional function call, while the second implements a builder pattern for improved readability and flexibility.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/DESIGN.md#2025-04-12_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nfn has_many(entity: Entity, from: Column, to: Column);\n\nhas_many(cake::Entity, cake::Column::Id, fruit::Column::CakeId)\n```\n\nLANGUAGE: rust\nCODE:\n```\nhas_many(cake::Entity).from(cake::Column::Id).to(fruit::Column::CakeId)\n```\n\n----------------------------------------\n\nTITLE: Rolling Back Multiple Applied Migrations in SeaORM (Rust)\nDESCRIPTION: This command rolls back a specified number of applied migrations (in this case, 10) using the SeaORM Migrator CLI.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/loco_seaography/migration/README.md#2025-04-12_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- down -n 10\n```\n\n----------------------------------------\n\nTITLE: Getting Help with SeaORM CLI\nDESCRIPTION: Command to display the help documentation when running from source.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/sea-orm-migration/README.md#2025-04-12_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- -h\n```\n\n----------------------------------------\n\nTITLE: Checking Migration Status in SeaORM\nDESCRIPTION: Command to check the current status of all migrations, showing which migrations have been applied and which are pending application.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/rocket_okapi_example/migration/README.md#2025-04-12_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- status\n```\n\n----------------------------------------\n\nTITLE: Implementing ActiveModelBehavior as Async Trait\nDESCRIPTION: Shows how to implement the ActiveModelBehavior trait which is now an async trait.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/CHANGELOG.md#2025-04-12_snippet_43\n\nLANGUAGE: rust\nCODE:\n```\n#[async_trait::async_trait]\nimpl ActiveModelBehavior for ActiveModel {\n    async fn before_save<C>(self, db: &C, insert: bool) -> Result<Self, DbErr>\n    where\n        C: ConnectionTrait,\n    {\n        // ...\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Rolling Back Multiple Applied Migrations in Sea ORM\nDESCRIPTION: This command rolls back a specified number of the most recently applied migrations. It allows for undoing multiple database schema changes at once.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/loco_starter/migration/README.md#2025-04-12_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- down -n 10\n```\n\n----------------------------------------\n\nTITLE: Applying All Pending Migrations with SeaORM Migrator\nDESCRIPTION: Commands to apply all pending database migrations using the SeaORM migrator CLI. Both commands perform the same action, with the second one explicitly specifying the 'up' command.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/actix_example/migration/README.md#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncargo run\n```\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- up\n```\n\n----------------------------------------\n\nTITLE: Refreshing the database with fresh migrations in SeaORM\nDESCRIPTION: Drops all tables from the database and then reapplies all migrations from scratch. This creates a clean slate for the database schema.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/loco_example/migration/README.md#2025-04-12_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- fresh\n```\n\n----------------------------------------\n\nTITLE: Using RelationDef::from_alias() for Joining Tables in Rust\nDESCRIPTION: Demonstrates how to use the new RelationDef::from_alias() method to join tables with aliases in a query.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/CHANGELOG.md#2025-04-12_snippet_20\n\nLANGUAGE: rust\nCODE:\n```\nlet cf = Alias::new(\"cf\");\n\nassert_eq!(\n    cake::Entity::find()\n        .join_as(\n            JoinType::LeftJoin,\n            cake_filling::Relation::Cake.def().rev(),\n            cf.clone()\n        )\n        .join(\n            JoinType::LeftJoin,\n            cake_filling::Relation::Filling.def().from_alias(cf)\n        )\n        .build(DbBackend::MySql)\n        .to_string(),\n    [\n        \"SELECT `cake`.`id`, `cake`.`name` FROM `cake`\",\n        \"LEFT JOIN `cake_filling` AS `cf` ON `cake`.`id` = `cf`.`cake_id`\",\n        \"LEFT JOIN `filling` ON `cf`.`filling_id` = `filling`.`id`\",\n    ]\n    .join(\" \")\n);\n```\n\n----------------------------------------\n\nTITLE: Applying a specific number of pending migrations in SeaORM\nDESCRIPTION: Applies a limited number of pending migrations to the database. This example applies the first 10 pending migrations.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/loco_example/migration/README.md#2025-04-12_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- up -n 10\n```\n\n----------------------------------------\n\nTITLE: Running SeaORM Mock Tests\nDESCRIPTION: Commands to navigate to the service directory and run mock tests with specific feature flags enabled for testing database operations.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/rocket_example/README.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd service\ncargo test --features mock\n```\n\n----------------------------------------\n\nTITLE: Applying All Pending Migrations in SeaORM\nDESCRIPTION: Commands to apply all pending database migrations using SeaORM's migrator CLI. Running without arguments or with the 'up' command will apply all pending migrations.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/jsonrpsee_example/migration/README.md#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncargo run\n```\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- up\n```\n\n----------------------------------------\n\nTITLE: Generating New Migration File in Sea ORM\nDESCRIPTION: This command generates a new migration file with the specified name. It's used to create a new migration script for database schema changes.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/loco_starter/migration/README.md#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- migrate generate MIGRATION_NAME\n```\n\n----------------------------------------\n\nTITLE: Configuring Migration Table Name in Rust\nDESCRIPTION: Shows how to override the default migration table name in SeaORM by implementing the MigratorTrait. This allows for custom naming of the migration tracking table.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/CHANGELOG.md#2025-04-12_snippet_23\n\nLANGUAGE: rust\nCODE:\n```\n#[async_trait::async_trait]\nimpl MigratorTrait for Migrator {\n    // Override the name of migration table\n    fn migration_table_name() -> sea_orm::DynIden {\n        Alias::new(\"override_migration_table_name\").into_iden()\n    }\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Limited Number of Pending Migrations with SeaORM Migrator\nDESCRIPTION: Command to apply a specific number of pending database migrations using the SeaORM migrator CLI. This example applies only the first 10 pending migrations.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/actix_example/migration/README.md#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- up -n 10\n```\n\n----------------------------------------\n\nTITLE: Applying all pending migrations in SeaORM\nDESCRIPTION: Executes all pending migrations that haven't been applied to the database yet. Two equivalent commands are provided for this operation.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/loco_example/migration/README.md#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncargo run\n```\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- up\n```\n\n----------------------------------------\n\nTITLE: Empty Insert Handling with TryInsert in Rust\nDESCRIPTION: Shows how to handle empty inserts without panicking using the new TryInsert functionality.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/CHANGELOG.md#2025-04-12_snippet_33\n\nLANGUAGE: rust\nCODE:\n```\n// now, you can do:\nlet res = Bakery::insert_many(std::iter::empty())\n    .on_empty_do_nothing()\n    .exec(db)\n    .await;\n\nassert!(matches!(res, Ok(TryInsertResult::Empty)));\n```\n\n----------------------------------------\n\nTITLE: Defining a Generic Left Join Method in Rust\nDESCRIPTION: This snippet demonstrates two approaches to defining a left join method in Rust. The first approach requires a turbofish syntax, while the second allows for type inference, improving readability.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/DESIGN.md#2025-04-12_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nfn left_join<E>(self) -> Self\nwhere\n    E: EntityTrait,\n{\n    // ...\n}\n```\n\nLANGUAGE: rust\nCODE:\n```\n.left_join::<fruit::Entity>()\n```\n\nLANGUAGE: rust\nCODE:\n```\nfn left_join<E>(self, _: E) -> Self\nwhere\n    E: EntityTrait,\n{\n    // ...\n}\n```\n\nLANGUAGE: rust\nCODE:\n```\n.left_join(fruit::Entity)\n```\n\n----------------------------------------\n\nTITLE: Applying Limited Number of Pending Migrations in Sea ORM\nDESCRIPTION: Command to apply a specific number of pending migrations. This example applies the first 10 pending migrations.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/axum_example/migration/README.md#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- up -n 10\n```\n\n----------------------------------------\n\nTITLE: Applying All Pending Migrations in SeaORM (Rust)\nDESCRIPTION: These commands apply all pending migrations using the SeaORM Migrator CLI. Two equivalent forms are provided.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/react_admin/backend/migration/README.md#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncargo run\n```\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- up\n```\n\n----------------------------------------\n\nTITLE: Applying Limited Number of Pending Migrations in Sea ORM\nDESCRIPTION: Command to apply a specific number of pending migrations using the -n flag followed by the number of migrations to apply. This example applies only the first 10 pending migrations.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/tonic_example/migration/README.md#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- up -n 10\n```\n\n----------------------------------------\n\nTITLE: Database Connection Ping Implementation in Rust\nDESCRIPTION: Demonstrates how to use the new DatabaseConnection::ping functionality to check connection status.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/CHANGELOG.md#2025-04-12_snippet_32\n\nLANGUAGE: rust\nCODE:\n```\n|db: DatabaseConnection| {\n    assert!(db.ping().await.is_ok());\n    db.clone().close().await;\n    assert!(matches!(db.ping().await, Err(DbErr::ConnectionAcquire)));\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Limited Number of Pending Migrations in SeaORM (Rust)\nDESCRIPTION: This command applies a specified number of pending migrations (in this case, 10) using the SeaORM Migrator CLI.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/react_admin/backend/migration/README.md#2025-04-12_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- up -n 10\n```\n\n----------------------------------------\n\nTITLE: Applying Limited Number of Pending Migrations in SeaORM\nDESCRIPTION: Command to apply a specific number of pending migrations (in this case, 10) using the -n flag to limit how many migrations are processed.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/rocket_okapi_example/migration/README.md#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- up -n 10\n```\n\n----------------------------------------\n\nTITLE: Generating Entity Model with Binary Columns in Compact Format\nDESCRIPTION: Example of entity model code generated by `sea-orm-cli generate entity` command for Binary and VarBinary columns in compact format. The model includes various binary column types with different size specifications.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/CHANGELOG.md#2025-04-12_snippet_39\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]\n#[sea_orm(table_name = \"binary\")]\npub struct Model {\n    #[sea_orm(primary_key)]\n    pub id: i32,\n    #[sea_orm(column_type = \"Binary(BlobSize::Blob(None))\")]\n    pub binary: Vec<u8>,\n    #[sea_orm(column_type = \"Binary(BlobSize::Blob(Some(10)))\")]\n    pub binary_10: Vec<u8>,\n    #[sea_orm(column_type = \"Binary(BlobSize::Tiny)\")]\n    pub binary_tiny: Vec<u8>,\n    #[sea_orm(column_type = \"Binary(BlobSize::Medium)\")]\n    pub binary_medium: Vec<u8>,\n    #[sea_orm(column_type = \"Binary(BlobSize::Long)\")]\n    pub binary_long: Vec<u8>,\n    #[sea_orm(column_type = \"VarBinary(10)\")]\n    pub var_binary: Vec<u8>,\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Limited Number of Pending Migrations in SeaORM\nDESCRIPTION: Command to apply a specific number of pending migrations. The -n flag specifies the number of migrations to apply.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/jsonrpsee_example/migration/README.md#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- up -n 10\n```\n\n----------------------------------------\n\nTITLE: Resetting All Migrations in SeaORM\nDESCRIPTION: Command to completely roll back all previously applied migrations, returning the database to its initial state before any migrations were applied.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/rocket_okapi_example/migration/README.md#2025-04-12_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- reset\n```\n\n----------------------------------------\n\nTITLE: Docker Command for PostgreSQL Database Setup\nDESCRIPTION: Command to run a PostgreSQL database in Docker for local development. Sets up a container with the required username, password, and database name for the Loco application.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/loco_example/README.md#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ndocker run -d -p 5432:5432 -e POSTGRES_USER=loco -e POSTGRES_DB=[app name]_development -e POSTGRES_PASSWORD=\"loco\" postgres:15.3-alpine\n```\n\n----------------------------------------\n\nTITLE: Generating New Migration File in SeaORM (Rust)\nDESCRIPTION: This command generates a new migration file with the specified name using the SeaORM Migrator CLI.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/react_admin/backend/migration/README.md#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- migrate generate MIGRATION_NAME\n```\n\n----------------------------------------\n\nTITLE: Resetting and Reapplying All Migrations in Sea ORM\nDESCRIPTION: This command drops all tables from the database and then reapplies all migrations. It's used for a complete reset of the database schema.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/loco_starter/migration/README.md#2025-04-12_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- fresh\n```\n\n----------------------------------------\n\nTITLE: Checking Migration Status in Sea ORM\nDESCRIPTION: This command checks and displays the status of all migrations. It shows which migrations have been applied and which are pending.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/loco_starter/migration/README.md#2025-04-12_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- status\n```\n\n----------------------------------------\n\nTITLE: Resetting All Migrations in SeaORM\nDESCRIPTION: Command to rollback all applied migrations without reapplying them. This leaves the database in a state as if no migrations had been applied.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/jsonrpsee_example/migration/README.md#2025-04-12_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- reset\n```\n\n----------------------------------------\n\nTITLE: Applying Limited Pending Migrations\nDESCRIPTION: Command to apply only the first 10 pending migrations rather than all of them.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/seaography_example/migration/README.md#2025-04-12_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- up -n 10\n```\n\n----------------------------------------\n\nTITLE: Rolling Back Last Applied Migration in SeaORM (Rust)\nDESCRIPTION: This command rolls back the last applied migration using the SeaORM Migrator CLI.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/react_admin/backend/migration/README.md#2025-04-12_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- down\n```\n\n----------------------------------------\n\nTITLE: Checking Migration Status in SeaORM using Cargo\nDESCRIPTION: This command checks the status of all migrations using the SeaORM Migrator CLI.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/salvo_example/migration/README.md#2025-04-12_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- status\n```\n\n----------------------------------------\n\nTITLE: Resetting All Migrations in SeaORM (Rust)\nDESCRIPTION: This command rolls back all applied migrations using the SeaORM Migrator CLI.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/loco_seaography/migration/README.md#2025-04-12_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- reset\n```\n\n----------------------------------------\n\nTITLE: Applying Limited Number of Pending Migrations in Sea ORM\nDESCRIPTION: This command applies a specified number of pending migrations. It allows for incremental updates by limiting the number of migrations to apply.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/loco_starter/migration/README.md#2025-04-12_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- up -n 10\n```\n\n----------------------------------------\n\nTITLE: Updating TryGetable Trait Implementation in Rust\nDESCRIPTION: Shows the change in TryGetable trait signature where the try_get method is replaced with try_get_by to support both string and numeric column indices.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/CHANGELOG.md#2025-04-12_snippet_41\n\nLANGUAGE: rust\nCODE:\n```\n// then\nfn try_get(res: &QueryResult, pre: &str, col: &str) -> Result<Self, TryGetError>;\n// now; ColIdx can be `&str` or `usize`\nfn try_get_by<I: ColIdx>(res: &QueryResult, index: I) -> Result<Self, TryGetError>;\n```\n\n----------------------------------------\n\nTITLE: Checking Migration Status in SeaORM (Rust)\nDESCRIPTION: This command checks the status of all migrations using the SeaORM Migrator CLI.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/react_admin/backend/migration/README.md#2025-04-12_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- status\n```\n\n----------------------------------------\n\nTITLE: Resetting All Migrations\nDESCRIPTION: Command to rollback all applied migrations without reapplying them.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/seaography_example/migration/README.md#2025-04-12_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- reset\n```\n\n----------------------------------------\n\nTITLE: Checking Migration Status in SeaORM (Rust)\nDESCRIPTION: This command checks and displays the status of all migrations using the SeaORM Migrator CLI.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/loco_seaography/migration/README.md#2025-04-12_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- status\n```\n\n----------------------------------------\n\nTITLE: Applying All Pending Migrations in SeaORM using Cargo\nDESCRIPTION: Commands to apply all pending database migrations in a SeaORM project. These can be executed with or without the explicit 'up' command.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/rocket_okapi_example/migration/README.md#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncargo run\n```\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- up\n```\n\n----------------------------------------\n\nTITLE: Checking Migration Status in Sea ORM\nDESCRIPTION: Command to check the current status of all migrations using the 'status' directive. This shows which migrations have been applied and which are pending.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/tonic_example/migration/README.md#2025-04-12_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- status\n```\n\n----------------------------------------\n\nTITLE: Using TeaEnum with ColumnDef in SeaORM\nDESCRIPTION: Example showing how to define and use an enum with ColumnDef in SeaORM, comparing the old and new syntax after the breaking changes were introduced.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/CHANGELOG.md#2025-04-12_snippet_47\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(Iden)]\nenum TeaEnum {\n    #[iden = \"tea\"]\n    Enum,\n    #[iden = \"EverydayTea\"]\n    EverydayTea,\n    #[iden = \"BreakfastTea\"]\n    BreakfastTea,\n}\n\n// then\nColumnDef::new(active_enum_child::Column::Tea)\n    .enumeration(\"tea\", vec![\"EverydayTea\", \"BreakfastTea\"])\n\n// now\nColumnDef::new(active_enum_child::Column::Tea)\n    .enumeration(TeaEnum::Enum, [TeaEnum::EverydayTea, TeaEnum::BreakfastTea])\n```\n\n----------------------------------------\n\nTITLE: Setting Database URL Environment Variable\nDESCRIPTION: Sets the MySQL database connection URL for the bakery database.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/seaography_example/README.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport DATABASE_URL=mysql://sea:sea@localhost/bakery\n```\n\n----------------------------------------\n\nTITLE: Checking Migration Status in SeaORM\nDESCRIPTION: Command to check the current status of all database migrations.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/graphql_example/migration/README.md#2025-04-12_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- status\n```\n\n----------------------------------------\n\nTITLE: Trait Associate Type Support in FromQueryResult\nDESCRIPTION: Demonstrates using trait associate types with the FromQueryResult derive macro.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/CHANGELOG.md#2025-04-12_snippet_38\n\nLANGUAGE: rust\nCODE:\n```\ntrait MyTrait {\n    type Item: TryGetable;\n}\n\n#[derive(FromQueryResult)]\nstruct TraitAssociateTypeTest<T>\nwhere\n    T: MyTrait,\n{\n    foo: T::Item,\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Migration Status in Sea ORM\nDESCRIPTION: Command to check the status of all migrations, showing which migrations have been applied and which are pending.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/axum_example/migration/README.md#2025-04-12_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- status\n```\n\n----------------------------------------\n\nTITLE: Implementing ValueType's array_type Method in SeaORM\nDESCRIPTION: Code showing the new array_type method that was added to the ValueType trait in SeaORM, which returns an ArrayType value.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/CHANGELOG.md#2025-04-12_snippet_48\n\nLANGUAGE: rust\nCODE:\n```\nimpl sea_orm::sea_query::ValueType for MyType {\n    fn array_type() -> sea_orm::sea_query::ArrayType {\n        sea_orm::sea_query::ArrayType::TypeName\n    }\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Rolling Back Migrations in SeaORM using Cargo\nDESCRIPTION: These commands rollback the last applied migration or a specified number of applied migrations using the SeaORM Migrator CLI.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/salvo_example/migration/README.md#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- down\n```\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- down -n 10\n```\n\n----------------------------------------\n\nTITLE: Modifying Database URL in Rocket Configuration (TOML)\nDESCRIPTION: Instructions to modify the 'url' variable in the Rocket.toml file to specify the database connection. This step allows users to choose their preferred database or use the default in-memory SQLite.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/rocket_okapi_example/README.md#2025-04-12_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\nurl = \"your_database_url_here\"\n```\n\n----------------------------------------\n\nTITLE: Checking Migration Status in SeaORM\nDESCRIPTION: Command to check the current status of all migrations in the database.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/poem_example/migration/README.md#2025-04-12_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- status\n```\n\n----------------------------------------\n\nTITLE: Updating ActiveEnum::name() Implementation in SeaORM\nDESCRIPTION: Example showing the change in return type for ActiveEnum::name() method from String to DynIden, demonstrating how to implement it correctly with the new requirements.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/CHANGELOG.md#2025-04-12_snippet_49\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(Debug, Iden)]\n#[iden = \"category\"]\npub struct CategoryEnum;\n\nimpl ActiveEnum for Category {\n    // then\n    fn name() -> String {\n        \"category\".to_owned()\n    }\n\n    // now\n    fn name() -> DynIden {\n        SeaRc::new(CategoryEnum)\n    }\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Rolling Back Migrations in SeaORM\nDESCRIPTION: Commands to rollback the last applied migrations, either all or a specific number.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/poem_example/migration/README.md#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- down\n```\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- down -n 10\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests for SeaORM Components\nDESCRIPTION: Commands to run unit tests for different SeaORM components without involving a live database.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/CONTRIBUTING.md#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncargo test --workspace\n```\n\nLANGUAGE: sh\nCODE:\n```\ncargo test --manifest-path sea-orm-cli/Cargo.toml\n```\n\nLANGUAGE: sh\nCODE:\n```\ncargo test --manifest-path sea-orm-rocket/Cargo.toml\n```\n\n----------------------------------------\n\nTITLE: Running Migrator CLI for Database Migrations\nDESCRIPTION: Commands to run the migration tool without arguments or to apply all pending migrations.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/seaography_example/migration/README.md#2025-04-12_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncargo run\n```\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- up\n```\n\n----------------------------------------\n\nTITLE: Updating Custom Column Type Definition\nDESCRIPTION: Shows changes in custom column type definition where the syntax for defining custom types has been updated.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/CHANGELOG.md#2025-04-12_snippet_45\n\nLANGUAGE: diff\nCODE:\n```\n// Compact Entity\n#[derive(Clone, Debug, PartialEq, Eq, DeriveEntityModel)]\n#[sea_orm(table_name = \"fruit\")]\npub struct Model {\n-   #[sea_orm(column_type = r#\"Custom(\"citext\".to_owned())\"#)]\n+   #[sea_orm(column_type = r#\"custom(\"citext\")\"#)]\n    pub column: String,\n}\n```\n\nLANGUAGE: diff\nCODE:\n```\n// Expanded Entity\nimpl ColumnTrait for Column {\n    type EntityName = Entity;\n\n    fn def(&self) -> ColumnDef {\n        match self {\n-           Self::Column => ColumnType::Custom(\"citext\".to_owned()).def(),\n+           Self::Column => ColumnType::custom(\"citext\").def(),\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Rolling Back Last Applied Migration in Sea ORM\nDESCRIPTION: Command to rollback the most recently applied migration in the database.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/axum_example/migration/README.md#2025-04-12_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- down\n```\n\n----------------------------------------\n\nTITLE: Running Mock Tests on Service Logic Crate\nDESCRIPTION: This snippet demonstrates how to run mock tests on the service logic crate. It changes to the service directory and runs cargo test with the 'mock' feature enabled.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/actix_example/README.md#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd service\ncargo test --features mock\n```\n\n----------------------------------------\n\nTITLE: Starting Loco Application Server\nDESCRIPTION: Command to start the Loco application server using cargo. The output shows the migration process, registered API routes, middleware configuration, and server startup information.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/loco_example/README.md#2025-04-12_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ cargo loco start\n\n    Finished dev [unoptimized + debuginfo] target(s) in 0.53s\n     Running `target/debug/todolist-cli start`\n2024-02-01T08:49:41.070430Z  INFO loco_rs::db: auto migrating\n2024-02-01T08:49:41.073698Z  INFO sea_orm_migration::migrator: Applying all pending migrations\n2024-02-01T08:49:41.078191Z  INFO sea_orm_migration::migrator: No pending migrations\n2024-02-01T08:49:41.100557Z  INFO loco_rs::controller::app_routes: [GET] /api/_ping\n2024-02-01T08:49:41.100617Z  INFO loco_rs::controller::app_routes: [GET] /api/_health\n2024-02-01T08:49:41.100667Z  INFO loco_rs::controller::app_routes: [GET] /api/notes\n2024-02-01T08:49:41.100702Z  INFO loco_rs::controller::app_routes: [POST] /api/notes\n2024-02-01T08:49:41.100738Z  INFO loco_rs::controller::app_routes: [GET] /api/notes/{id}\n2024-02-01T08:49:41.100791Z  INFO loco_rs::controller::app_routes: [DELETE] /api/notes/{id}\n2024-02-01T08:49:41.100817Z  INFO loco_rs::controller::app_routes: [POST] /api/notes/{id}\n2024-02-01T08:49:41.100934Z  INFO loco_rs::controller::app_routes: [Middleware] Adding limit payload data=\"5mb\"\n2024-02-01T08:49:41.101017Z  INFO loco_rs::controller::app_routes: [Middleware] Adding log trace id\n2024-02-01T08:49:41.101057Z  INFO loco_rs::controller::app_routes: [Middleware] Adding timeout layer\n2024-02-01T08:49:41.101192Z  INFO loco_rs::controller::app_routes: [Middleware] Adding cors\n2024-02-01T08:49:41.101241Z  INFO loco_rs::controller::app_routes: [Middleware] Adding static\n\n                      ▄     ▀\n                                 ▀  ▄\n                  ▄       ▀     ▄  ▄ ▄▀\n                                    ▄ ▀▄▄\n                        ▄     ▀    ▀  ▀▄▀█▄\n                                          ▀█▄\n▄▄▄▄▄▄▄  ▄▄▄▄▄▄▄▄▄   ▄▄▄▄▄▄▄▄▄▄▄ ▄▄▄▄▄▄▄▄▄ ▀▀█\n ██████  █████   ███ █████   ███ █████   ███ ▀█\n ██████  █████   ███ █████   ▀▀▀ █████   ███ ▄█▄\n ██████  █████   ███ █████       █████   ███ ████▄\n ██████  █████   ███ █████   ▄▄▄ █████   ███ █████\n ██████  █████   ███  ████   ███ █████   ███ ████▀\n   ▀▀▀██▄ ▀▀▀▀▀▀▀▀▀▀  ▀▀▀▀▀▀▀▀▀▀  ▀▀▀▀▀▀▀▀▀▀ ██▀\n       ▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀\n                https://loco.rs\n\nenvironment: development\n   database: automigrate\n     logger: debug\ncompilation: debug\n      modes: server\n\nlistening on port 3000\n```\n\n----------------------------------------\n\nTITLE: Implementing TryGetable for Custom Types\nDESCRIPTION: Demonstrates how to update custom TryGetable implementations to use the new try_get_by method signature.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/CHANGELOG.md#2025-04-12_snippet_42\n\nLANGUAGE: diff\nCODE:\n```\nimpl TryGetable for XXX {\n-   fn try_get(res: &QueryResult, pre: &str, col: &str) -> Result<Self, TryGetError> {\n+   fn try_get_by<I: sea_orm::ColIdx>(res: &QueryResult, idx: I) -> Result<Self, TryGetError> {\n-       let value: YYY = res.try_get(pre, col).map_err(TryGetError::DbErr)?;\n+       let value: YYY = res.try_get_by(idx).map_err(TryGetError::DbErr)?;\n        ..\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Rolling Back Last Applied Migration\nDESCRIPTION: Command to rollback the most recently applied migration in the database.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/seaography_example/migration/README.md#2025-04-12_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- down\n```\n\n----------------------------------------\n\nTITLE: Running the Rocket Server (Shell)\nDESCRIPTION: Command to start the Rocket server using Cargo. This step initiates the application and makes it available for interaction.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/rocket_okapi_example/README.md#2025-04-12_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncargo run\n```\n\n----------------------------------------\n\nTITLE: Running gRPC Client in Rust\nDESCRIPTION: Command to start the client application that communicates with the gRPC server.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/tonic_example/README.md#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncargo run --bin client\n```\n\n----------------------------------------\n\nTITLE: Running Mock Tests for Salvo-SeaORM Service\nDESCRIPTION: Commands to navigate to the service directory and run tests with the mock feature enabled, which allows testing database interactions without a real database connection.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/salvo_example/README.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd service\ncargo test --features mock\n```\n\n----------------------------------------\n\nTITLE: Rolling Back Multiple Migrations\nDESCRIPTION: Command to rollback the last 10 applied migrations from the database.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/seaography_example/migration/README.md#2025-04-12_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- down -n 10\n```\n\n----------------------------------------\n\nTITLE: Running Actix 4 Server with Auto-reloading using Cargo Watch\nDESCRIPTION: This snippet shows how to run the Actix 4 server with auto-reloading functionality. It uses systemfd to handle the HTTP port and cargo-watch to automatically rebuild and restart the server on file changes.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/actix_example/README.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo install systemfd cargo-watch\nsystemfd --no-pid -s http::8000 -- cargo watch -x run\n```\n\n----------------------------------------\n\nTITLE: Generating GraphQL Project\nDESCRIPTION: Generates GraphQL project files using SeaORM and Seaography CLI tools.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/seaography_example/README.md#2025-04-12_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf graphql # this entire folder is generated\nsea-orm-cli generate entity --output-dir graphql/src/entities --seaography\nseaography-cli graphql graphql/src/entities $DATABASE_URL sea-orm-seaography-example\n```\n\n----------------------------------------\n\nTITLE: Running SeaORM tests with mock feature\nDESCRIPTION: Command sequence for navigating to the service directory and running tests with the mock feature enabled. This allows testing service logic without requiring an actual database connection.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/axum_example/README.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd service\ncargo test --features mock\n```\n\n----------------------------------------\n\nTITLE: Installing Seaography CLI\nDESCRIPTION: Installs the Seaography CLI tool version 1.1.3 or higher using Cargo.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/seaography_example/README.md#2025-04-12_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncargo install seaography-cli@^1.1.3\n```\n\n----------------------------------------\n\nTITLE: Rolling Back Multiple Applied Migrations in SeaORM (Rust)\nDESCRIPTION: This command rolls back a specified number of applied migrations (in this case, 10) using the SeaORM Migrator CLI.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/react_admin/backend/migration/README.md#2025-04-12_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- down -n 10\n```\n\n----------------------------------------\n\nTITLE: Development Workflow Commands\nDESCRIPTION: Commands for developing the application. Shows how to run the frontend development server with hot reloading and how to start the backend server separately.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/loco_example/README.md#2025-04-12_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n$ cd frontend && yarn install && yarn dev\n```\n\nLANGUAGE: sh\nCODE:\n```\n$ cargo loco start\n```\n\n----------------------------------------\n\nTITLE: Running the GraphQL Project\nDESCRIPTION: Changes to the graphql directory and runs the generated project.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/seaography_example/README.md#2025-04-12_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd graphql\ncargo run\n```\n\n----------------------------------------\n\nTITLE: Running Mock Tests for SeaORM Service Logic\nDESCRIPTION: Commands to navigate to the service directory and run tests with the mock feature enabled, allowing database operations to be tested without a real database.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/tonic_example/README.md#2025-04-12_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd service\ncargo test --features mock\n```\n\n----------------------------------------\n\nTITLE: Rolling Back Multiple Applied Migrations in SeaORM\nDESCRIPTION: Command to roll back multiple recently applied migrations (in this case, 10) using the -n flag to specify the number of migrations to revert.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/rocket_okapi_example/migration/README.md#2025-04-12_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- down -n 10\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with NPM\nDESCRIPTION: Command to install all required application dependencies using npm package manager.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/react_admin/frontend/README.md#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Running mock tests on the service logic crate\nDESCRIPTION: Command for executing tests on the service logic crate with mock features enabled. This allows testing the service functionality without a real database connection.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/graphql_example/README.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd service\ncargo test --features mock\n```\n\n----------------------------------------\n\nTITLE: Running gRPC Server with SeaORM in Rust\nDESCRIPTION: Command to start the gRPC server component that uses SeaORM for database operations.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/tonic_example/README.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo run --bin server\n```\n\n----------------------------------------\n\nTITLE: Rolling Back Multiple Migrations with SeaORM\nDESCRIPTION: Command to rollback a specific number of previously applied migrations (10 in this example).\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/sea-orm-migration/README.md#2025-04-12_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- migrate down -n 10\n```\n\n----------------------------------------\n\nTITLE: Running Development Server\nDESCRIPTION: Command to start the application in development mode with hot-reloading enabled.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/react_admin/frontend/README.md#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Running Mock Tests for SeaORM Service\nDESCRIPTION: Command for running tests on the service logic crate with mock features enabled. This allows testing the application's service logic without requiring an actual database connection.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/poem_example/README.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd service\ncargo test --features mock\n```\n\n----------------------------------------\n\nTITLE: Running SeaORM Proxy Demo with GlueSQL\nDESCRIPTION: Command to execute the SeaORM Proxy Demo for GlueSQL. This runs the demo application using Cargo, which is Rust's package manager and build system.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/proxy_gluesql_example/README.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo run\n```\n\n----------------------------------------\n\nTITLE: Rolling back the most recent migration in SeaORM\nDESCRIPTION: Reverts the most recently applied migration, undoing its changes to the database schema.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/loco_example/migration/README.md#2025-04-12_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- down\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query for Gluten-Free Cakes\nDESCRIPTION: Query that filters and retrieves gluten-free cakes along with their bakery information.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/seaography_example/README.md#2025-04-12_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  cake(filters: { glutenFree: { eq: 1 } }) {\n    nodes {\n      name\n      price\n      glutenFree\n      bakery {\n        name\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: SeaORM Underscore Fields Workaround in Rust\nDESCRIPTION: This code snippet references a file that contains a workaround for correctly querying names with underscores in SeaORM. It also demonstrates the consequences of not implementing this workaround.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/issues/630/README.md#2025-04-12_snippet_1\n\nLANGUAGE: Rust\nCODE:\n```\nsrc/entity/underscores_workaround.rs\n```\n\n----------------------------------------\n\nTITLE: Resetting All Migrations in Sea ORM\nDESCRIPTION: Command to rollback all applied migrations, returning the database to its pre-migration state.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/axum_example/migration/README.md#2025-04-12_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- reset\n```\n\n----------------------------------------\n\nTITLE: Connecting to Database using Environment Variable in Rust\nDESCRIPTION: This snippet shows how to connect to a database using an environment variable in Rust. It uses the `env!()` macro to retrieve the DATABASE_URL at compile-time.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/issues/630/README.md#2025-04-12_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\nenv!(\"DATABASE_URL\")\n```\n\n----------------------------------------\n\nTITLE: Alternative Installation for SeaORM CLI\nDESCRIPTION: Alternative method for installing SeaORM CLI with a shorter binary name 'sea'.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/sea-orm-migration/README.md#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n> cargo install --bin sea\n> sea help\n```\n\n----------------------------------------\n\nTITLE: Rolling Back All Applied Migrations in SeaORM (Rust)\nDESCRIPTION: This command rolls back all applied migrations using the SeaORM Migrator CLI.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/react_admin/backend/migration/README.md#2025-04-12_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- reset\n```\n\n----------------------------------------\n\nTITLE: Creating Bakery Database in SQL\nDESCRIPTION: SQL commands to create a new 'bakery' database and grant necessary privileges to the 'sea' user.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/seaography_example/migration/README.md#2025-04-12_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE DATABASE bakery;\nGRANT ALL PRIVILEGES ON bakery.* TO sea;\n```\n\n----------------------------------------\n\nTITLE: Building Production Bundle\nDESCRIPTION: Command to create an optimized production build of the application.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/react_admin/frontend/README.md#2025-04-12_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Fresh Database Reset and Migration in Sea ORM\nDESCRIPTION: Command to drop all tables from the database and then reapply all migrations. This creates a fresh database state.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/axum_example/migration/README.md#2025-04-12_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- fresh\n```\n\n----------------------------------------\n\nTITLE: Setting Database URL Environment Variable\nDESCRIPTION: Shell command to set the DATABASE_URL environment variable pointing to the MySQL bakery database.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/seaography_example/migration/README.md#2025-04-12_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nexport DATABASE_URL=mysql://sea:sea@localhost/bakery\n```\n\n----------------------------------------\n\nTITLE: Refreshing Database by Dropping and Reapplying Migrations in Sea ORM\nDESCRIPTION: Command to completely reset the database by dropping all tables and then reapplying all migrations. This is useful when you want a clean slate without any residual data.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/tonic_example/migration/README.md#2025-04-12_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- fresh\n```\n\n----------------------------------------\n\nTITLE: Refreshing All Migrations with SeaORM Migrator\nDESCRIPTION: Command to refresh the database schema by first rolling back all applied migrations and then reapplying them all using the SeaORM migrator CLI.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/actix_example/migration/README.md#2025-04-12_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- refresh\n```\n\n----------------------------------------\n\nTITLE: Refreshing Migrations by Rolling Back and Reapplying in Sea ORM\nDESCRIPTION: Command to refresh the database by first rolling back all applied migrations and then reapplying them. This differs from 'fresh' as it uses migration rollbacks rather than dropping tables.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/tonic_example/migration/README.md#2025-04-12_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ncargo run -- refresh\n```\n\n----------------------------------------\n\nTITLE: Building Frontend Client with Yarn\nDESCRIPTION: Command to navigate to the frontend directory, install dependencies, and build the client for production. Shows the expected output including transformed modules and file sizes.\nSOURCE: https://github.com/SeaQL/sea-orm/blob/master/examples/loco_example/README.md#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ cd frontend && yarn install && yarn build\n\nvite v5.0.8 building for production...\n✓ 120 modules transformed.\ndist/index.html                   0.46 kB │ gzip:  0.30 kB\ndist/assets/index-AbTMZIjW.css    1.26 kB │ gzip:  0.65 kB\ndist/assets/index-MJFpQvzE.js   235.64 kB │ gzip: 75.58 kB\n✓ built in 2.01s\n```"
  }
]