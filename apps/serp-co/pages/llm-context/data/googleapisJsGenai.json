[
  {
    "owner": "googleapis",
    "repo": "js-genai",
    "content": "TITLE: Installing Google Gen AI SDK with npm\nDESCRIPTION: Command to install the Google Gen AI SDK package using npm. This is the first step to integrate Gemini capabilities into your JavaScript or TypeScript project.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @google/genai\n```\n\n----------------------------------------\n\nTITLE: Function Calling with Gemini API\nDESCRIPTION: Implementation of function calling to allow Gemini to interact with external systems. This example defines a light control function, sends a prompt to Gemini, and retrieves the function call parameters that Gemini decides to use.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/README.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport {GoogleGenAI, FunctionCallingConfigMode, FunctionDeclaration, Type} from '@google/genai';\nconst GEMINI_API_KEY = process.env.GEMINI_API_KEY;\n\nasync function main() {\n  const controlLightDeclaration: FunctionDeclaration = {\n    name: 'controlLight',\n    parameters: {\n      type: Type.OBJECT,\n      description: 'Set the brightness and color temperature of a room light.',\n      properties: {\n        brightness: {\n          type: Type.NUMBER,\n          description:\n              'Light level from 0 to 100. Zero is off and 100 is full brightness.',\n        },\n        colorTemperature: {\n          type: Type.STRING,\n          description:\n              'Color temperature of the light fixture which can be `daylight`, `cool`, or `warm`.',\n        },\n      },\n      required: ['brightness', 'colorTemperature'],\n    },\n  };\n\n  const ai = new GoogleGenAI({apiKey: GEMINI_API_KEY});\n  const response = await ai.models.generateContent({\n    model: 'gemini-2.0-flash-001',\n    contents: 'Dim the lights so the room feels cozy and warm.',\n    config: {\n      toolConfig: {\n        functionCallingConfig: {\n          // Force it to call any function\n          mode: FunctionCallingConfigMode.ANY,\n          allowedFunctionNames: ['controlLight'],\n        }\n      },\n      tools: [{functionDeclarations: [controlLightDeclaration]}]\n    }\n  });\n\n  console.log(response.functionCalls);\n}\n\nmain();\n```\n\n----------------------------------------\n\nTITLE: Basic Content Generation with Gemini API\nDESCRIPTION: Simple example demonstrating how to initialize the SDK with an API key and generate content using the Gemini model. This code asks a simple question and logs the response text.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {GoogleGenAI} from '@google/genai';\nconst GEMINI_API_KEY = process.env.GEMINI_API_KEY;\n\nconst ai = new GoogleGenAI({apiKey: GEMINI_API_KEY});\n\nasync function main() {\n  const response = await ai.models.generateContent({\n    model: 'gemini-2.0-flash-001',\n    contents: 'Why is the sky blue?',\n  });\n  console.log(response.text);\n}\n\nmain();\n```\n\n----------------------------------------\n\nTITLE: Utility Functions to Create Content Parts and Models in TypeScript\nDESCRIPTION: Includes various factory functions to create Part and Content objects from inputs like base64 data, executable code, function calls, function responses, text, and URIs. These utilities abstract construction details of content payloads used for model interactions. They accept parameters such as code strings, languages, names, and argument records, returning typed Part or Content instances. This standardized creation approach aids consistent API consumption and payload handling.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-web.api.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function createModelContent(partOrString: PartListUnion | string): Content;\nexport function createPartFromBase64(data: string, mimeType: string): Part;\nexport function createPartFromCodeExecutionResult(outcome: Outcome, output: string): Part;\nexport function createPartFromExecutableCode(code: string, language: Language): Part;\nexport function createPartFromFunctionCall(name: string, args: Record<string, unknown>): Part;\nexport function createPartFromFunctionResponse(id: string, name: string, response: Record<string, unknown>): Part;\nexport function createPartFromText(text: string): Part;\nexport function createPartFromUri(uri: string, mimeType: string): Part;\nexport function createUserContent(partOrString: PartListUnion | string): Content;\n```\n\n----------------------------------------\n\nTITLE: Defining the Models Class for API Interactions in TypeScript\nDESCRIPTION: Defines the `Models` class, a module for interacting with model-related endpoints of the Google GenAI API. It requires an `ApiClient` instance for construction and provides asynchronous methods for computing/counting tokens, embedding content, generating content (sync and streaming), generating images/videos, and retrieving model details. Note this class is marked as undocumented.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai.api.md#_snippet_22\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport class Models extends BaseModule {\n    constructor(apiClient: ApiClient);\n    computeTokens(params: types.ComputeTokensParameters): Promise<types.ComputeTokensResponse>;\n    countTokens(params: types.CountTokensParameters): Promise<types.CountTokensResponse>;\n    embedContent(params: types.EmbedContentParameters): Promise<types.EmbedContentResponse>;\n    generateContent: (params: types.GenerateContentParameters) => Promise<types.GenerateContentResponse>;\n    generateContentStream: (params: types.GenerateContentParameters) => Promise<AsyncGenerator<types.GenerateContentResponse>>;\n    generateImages: (params: types.GenerateImagesParameters) => Promise<types.GenerateImagesResponse>;\n    generateVideos(params: types.GenerateVideosParameters): Promise<types.GenerateVideosOperation>;\n    get(params: types.GetModelParameters): Promise<types.Model>;\n}\n```\n\n----------------------------------------\n\nTITLE: Chat and Chats Classes for Conversational AI in TypeScript\nDESCRIPTION: Contains two classes, 'Chat' and 'Chats', to facilitate single chat sessions and chat management respectively. The 'Chat' class manages conversation state history and supports methods to send messages synchronously and as streaming async generators. 'Chats' acts as a factory for chat instances bound to a specific model and API client. Dependencies include ApiClient, Models, and types for configuration and parameters. These abstractions enable easy integration with chat capabilities of the GenAI service.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-web.api.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class Chat {\n    constructor(apiClient: ApiClient, modelsModule: Models, model: string, config?: types.GenerateContentConfig, history?: types.Content[]);\n    getHistory(curated?: boolean): types.Content[];\n    sendMessage(params: types.SendMessageParameters): Promise<types.GenerateContentResponse>;\n    sendMessageStream(params: types.SendMessageParameters): Promise<AsyncGenerator<types.GenerateContentResponse>>;\n}\n\nexport class Chats {\n    constructor(modelsModule: Models, apiClient: ApiClient);\n    create(params: types.CreateChatParameters): Chat;\n}\n```\n\n----------------------------------------\n\nTITLE: GenerateContentParameters Interface Modeling Content Generation Input in TypeScript\nDESCRIPTION: Defines required parameters for generating content, including the model identifier and an array of content objects, along with an optional configuration object specifying generation preferences and options.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-node.api.md#_snippet_24\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface GenerateContentParameters {\n    config?: GenerateContentConfig;\n    contents: ContentListUnion;\n    model: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing with Gemini Developer API Key\nDESCRIPTION: Code snippet showing how to initialize the SDK for server-side applications using an API key from Google AI Studio. This is the standard way to authenticate with the Gemini Developer API.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/README.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GoogleGenAI } from '@google/genai';\nconst ai = new GoogleGenAI({apiKey: 'GEMINI_API_KEY'});\n```\n\n----------------------------------------\n\nTITLE: GenerateContentConfig Interface for Content Generation Settings in TypeScript\nDESCRIPTION: This interface defines detailed settings controlling content generation including abort signals, token limits, penalties, model selection, speech and tool configurations, stop sequences, temperature, safety settings, and output modalities, enabling fine-tuned generation control for API calls.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-node.api.md#_snippet_23\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface GenerateContentConfig {\n    abortSignal?: AbortSignal;\n    audioTimestamp?: boolean;\n    cachedContent?: string;\n    candidateCount?: number;\n    frequencyPenalty?: number;\n    httpOptions?: HttpOptions;\n    labels?: Record<string, string>;\n    logprobs?: number;\n    maxOutputTokens?: number;\n    mediaResolution?: MediaResolution;\n    modelSelectionConfig?: ModelSelectionConfig;\n    presencePenalty?: number;\n    responseLogprobs?: boolean;\n    responseMimeType?: string;\n    responseModalities?: string[];\n    responseSchema?: SchemaUnion;\n    routingConfig?: GenerationConfigRoutingConfig;\n    safetySettings?: SafetySetting[];\n    seed?: number;\n    speechConfig?: SpeechConfigUnion;\n    stopSequences?: string[];\n    systemInstruction?: ContentUnion;\n    temperature?: number;\n    thinkingConfig?: ThinkingConfig;\n    toolConfig?: ToolConfig;\n    tools?: ToolListUnion;\n    topK?: number;\n    topP?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Models Class Implementation for API Interaction\nDESCRIPTION: TypeScript class that extends BaseModule to provide methods for interacting with AI models, including token computation, content generation, image generation, and model retrieval.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-node.api.md#_snippet_48\n\nLANGUAGE: typescript\nCODE:\n```\nexport class Models extends BaseModule {\n    constructor(apiClient: ApiClient);\n    computeTokens(params: types.ComputeTokensParameters): Promise<types.ComputeTokensResponse>;\n    countTokens(params: types.CountTokensParameters): Promise<types.CountTokensResponse>;\n    embedContent(params: types.EmbedContentParameters): Promise<types.EmbedContentResponse>;\n    generateContent: (params: types.GenerateContentParameters) => Promise<types.GenerateContentResponse>;\n    generateContentStream: (params: types.GenerateContentParameters) => Promise<AsyncGenerator<types.GenerateContentResponse>>;\n    generateImages: (params: types.GenerateImagesParameters) => Promise<types.GenerateImagesResponse>;\n    generateVideos(params: types.GenerateVideosParameters): Promise<types.GenerateVideosOperation>;\n    get(params: types.GetModelParameters): Promise<types.Model>;\n}\n```\n\n----------------------------------------\n\nTITLE: GenerateContentResponse Class Representing Output of Content Generation in TypeScript\nDESCRIPTION: This class models the response from content generation, including candidate outputs, metadata, timing, function calls, various forms of text and code retrieved from the generation, and usage statistics, facilitating easy extraction of generated data.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-node.api.md#_snippet_25\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class GenerateContentResponse {\n    candidates?: Candidate[];\n    get codeExecutionResult(): string | undefined;\n    createTime?: string;\n    get data(): string | undefined;\n    get executableCode(): string | undefined;\n    get functionCalls(): FunctionCall[] | undefined;\n    modelVersion?: string;\n    promptFeedback?: GenerateContentResponsePromptFeedback;\n    responseId?: string;\n    get text(): string | undefined;\n    usageMetadata?: GenerateContentResponseUsageMetadata;\n}\n```\n\n----------------------------------------\n\nTITLE: Streaming Content Generation from Gemini\nDESCRIPTION: Example of using the streaming API to get content chunks as they're generated, providing a more responsive user experience. This code generates a poem and prints each chunk as it arrives.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/README.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport {GoogleGenAI} from '@google/genai';\nconst GEMINI_API_KEY = process.env.GEMINI_API_KEY;\n\nconst ai = new GoogleGenAI({apiKey: GEMINI_API_KEY});\n\nasync function main() {\n  const response = await ai.models.generateContentStream({\n    model: 'gemini-2.0-flash-001',\n    contents: 'Write a 100-word poem.',\n  });\n  for await (const chunk of response) {\n    console.log(chunk.text);\n  }\n}\n\nmain();\n```\n\n----------------------------------------\n\nTITLE: Defining Models Class - TypeScript\nDESCRIPTION: This code defines the `Models` class, extending `BaseModule`. It includes methods for computing tokens, counting tokens, embedding content, generating content, generating images, generating videos, and retrieving model information. It provides an API for interacting with different models.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-web.api.md#_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nexport class Models extends BaseModule {\n    constructor(apiClient: ApiClient);\n    computeTokens(params: types.ComputeTokensParameters): Promise<types.ComputeTokensResponse>;\n    countTokens(params: types.CountTokensParameters): Promise<types.CountTokensResponse>;\n    embedContent(params: types.EmbedContentParameters): Promise<types.EmbedContentResponse>;\n    generateContent: (params: types.GenerateContentParameters) => Promise<types.GenerateContentResponse>;\n    generateContentStream: (params: types.GenerateContentParameters) => Promise<AsyncGenerator<types.GenerateContentResponse>>;\n    generateImages: (params: types.GenerateImagesParameters) => Promise<types.GenerateImagesResponse>;\n    generateVideos(params: types.GenerateVideosParameters): Promise<types.GenerateVideosOperation>;\n    get(params: types.GetModelParameters): Promise<types.Model>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the Generic Pager Class in TypeScript\nDESCRIPTION: Implements a generic asynchronous iterator (`AsyncIterable`) for handling paginated API responses from the Google GenAI API. It takes the item type (`T`), the paged item identifier (`PagedItem`), a request function, the initial response, and configuration parameters. It provides methods to iterate through pages (`nextPage`, `[Symbol.asyncIterator]`), check for more pages (`hasNextPage`), and access items/page details. Note the warnings regarding forgotten exports for `PagedItemConfig` and `PagedItemResponse`.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai.api.md#_snippet_27\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport class Pager<T> implements AsyncIterable<T> {\n    [Symbol.asyncIterator](): AsyncIterator<T>;\n    constructor(name: PagedItem, request: (params: PagedItemConfig) => Promise<PagedItemResponse<T>>, response: PagedItemResponse<T>, params: PagedItemConfig);\n    getItem(index: number): T;\n    hasNextPage(): boolean;\n    // (undocumented)\n    protected idxInternal: number;\n    get name(): PagedItem;\n    nextPage(): Promise<T[]>;\n    get page(): T[];\n    get pageLength(): number;\n    get pageSize(): number;\n    get params(): PagedItemConfig;\n    // Warning: (ae-forgotten-export) The symbol \"PagedItemConfig\" needs to be exported by the entry point index.d.ts\n    // Warning: (ae-forgotten-export) The symbol \"PagedItemResponse\" needs to be exported by the entry point index.d.ts\n    //\n    // (undocumented)\n    protected requestInternal: (params: PagedItemConfig) => Promise<PagedItemResponse<T>>;\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Chat Sessions and Messaging in Google GenAI SDK TypeScript\nDESCRIPTION: Provides the 'Chat' and 'Chats' classes for managing conversational interactions with the Google GenAI backend. The 'Chat' class allows sending messages (including streaming responses), maintaining message history, and is instantiated with API client, models, and configuration parameters. The 'Chats' class serves as a factory to create and manage Chat instances, needing a models module and API client upon instantiation. These abstractions simplify interacting with GenAI chat models asynchronously.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-node.api.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class Chat {\n    constructor(apiClient: ApiClient, modelsModule: Models, model: string, config?: types.GenerateContentConfig, history?: types.Content[]);\n    getHistory(curated?: boolean): types.Content[];\n    sendMessage(params: types.SendMessageParameters): Promise<types.GenerateContentResponse>;\n    sendMessageStream(params: types.SendMessageParameters): Promise<AsyncGenerator<types.GenerateContentResponse>>;\n}\n\nexport class Chats {\n    constructor(modelsModule: Models, apiClient: ApiClient);\n    create(params: types.CreateChatParameters): Chat;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GenerateContentResponse Class in TypeScript\nDESCRIPTION: Class representing a response from content generation, with getters for accessing different response types like text, code, function calls, and data.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-web.api.md#_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class GenerateContentResponse {\n    candidates?: Candidate[];\n    get codeExecutionResult(): string | undefined;\n    createTime?: string;\n    get data(): string | undefined;\n    get executableCode(): string | undefined;\n    get functionCalls(): FunctionCall[] | undefined;\n    modelVersion?: string;\n    promptFeedback?: GenerateContentResponsePromptFeedback;\n    responseId?: string;\n    get text(): string | undefined;\n    usageMetadata?: GenerateContentResponseUsageMetadata;\n}\n```\n\n----------------------------------------\n\nTITLE: Constructing GoogleGenAI Client Class in TypeScript\nDESCRIPTION: This snippet defines the GoogleGenAI class, which serves as the main client to interact with various service submodules like chats, files, models, and operations. It takes GoogleGenAIOptions as input to configure authentication, API version, and other HTTP aspects. The class maintains protected and public properties representing API client and service modules, allowing access to Google GenAI services programmatically. This class encapsulates client initialization logic for managing all interactions with remote AI endpoints.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai.api.md#_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class GoogleGenAI {\n    constructor(options: GoogleGenAIOptions);\n    // (undocumented)\n    protected readonly apiClient: ApiClient;\n    // (undocumented)\n    readonly caches: Caches;\n    // (undocumented)\n    readonly chats: Chats;\n    // (undocumented)\n    readonly files: Files;\n    // (undocumented)\n    readonly live: Live;\n    // (undocumented)\n    readonly models: Models;\n    // (undocumented)\n    readonly operations: Operations;\n    // (undocumented)\n    readonly vertexai: boolean;\n}\n\nexport interface GoogleGenAIOptions {\n    apiKey?: string;\n    apiVersion?: string;\n    googleAuthOptions?: GoogleAuthOptions;\n    httpOptions?: HttpOptions;\n    location?: string;\n    project?: string;\n    vertexai?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SafetySetting interface in TypeScript\nDESCRIPTION: This code defines the `SafetySetting` interface, which includes optional properties for the harm category, the harm block method, and the harm block threshold. These settings are used to configure how safety filters are applied to content generation.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai.api.md#_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface SafetySetting {\n    category?: HarmCategory;\n    method?: HarmBlockMethod;\n    threshold?: HarmBlockThreshold;\n}\n```\n\n----------------------------------------\n\nTITLE: Chat Management Classes and Methods for Google GenAI in TypeScript\nDESCRIPTION: Defines a Chat class that manages individual chat sessions including sending messages synchronously and via streams, and retrieving chat history. Constructors require an ApiClient, Models, model identifier, optional configuration, and history. Additionally, a Chats class provides a factory method for creating Chat instances. These classes encapsulate chat-related API functionality supporting synchronous and asynchronous message interactions.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai.api.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class Chat {\n    constructor(apiClient: ApiClient, modelsModule: Models, model: string, config?: types.GenerateContentConfig, history?: types.Content[]);\n    getHistory(curated?: boolean): types.Content[];\n    sendMessage(params: types.SendMessageParameters): Promise<types.GenerateContentResponse>;\n    sendMessageStream(params: types.SendMessageParameters): Promise<AsyncGenerator<types.GenerateContentResponse>>;\n}\n\nexport class Chats {\n    constructor(modelsModule: Models, apiClient: ApiClient);\n    create(params: types.CreateChatParameters): Chat;\n}\n```\n\n----------------------------------------\n\nTITLE: Content Part Interfaces for Message Structure\nDESCRIPTION: TypeScript interfaces defining the structure of content parts in messages, supporting various content types like code, text, function calls, and media data.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-node.api.md#_snippet_51\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Part {\n    codeExecutionResult?: CodeExecutionResult;\n    executableCode?: ExecutableCode;\n    fileData?: FileData;\n    functionCall?: FunctionCall;\n    functionResponse?: FunctionResponse;\n    inlineData?: Blob_2;\n    text?: string;\n    thought?: boolean;\n    videoMetadata?: VideoMetadata;\n}\n\nexport type PartListUnion = PartUnion[] | PartUnion;\n\nexport type PartUnion = Part | string;\n```\n\n----------------------------------------\n\nTITLE: Initializing with Vertex AI Configuration\nDESCRIPTION: Sample code for initializing the SDK with Vertex AI instead of the Gemini Developer API. This requires specifying the Google Cloud project and location parameters.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/README.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GoogleGenAI } from '@google/genai';\n\nconst ai = new GoogleGenAI({\n    vertexai: true,\n    project: 'your_project',\n    location: 'your_location',\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Retrieval Configuration Interfaces in TypeScript\nDESCRIPTION: Defines interfaces related to data retrieval mechanisms used by the Google GenAI API, possibly for RAG. `Retrieval` specifies configuration options like disabling attribution and configuring retrieval sources like Vertex AI Search (`VertexAISearch`) or Vertex RAG Store (`VertexRagStore`). `RetrievalMetadata` provides metadata about the retrieval process, such as a Google Search dynamic retrieval score.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai.api.md#_snippet_35\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport interface Retrieval {\n    disableAttribution?: boolean;\n    vertexAiSearch?: VertexAISearch;\n    vertexRagStore?: VertexRagStore;\n}\n\n// @public\nexport interface RetrievalMetadata {\n    googleSearchDynamicRetrievalScore?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Factory Functions for Creating Content Parts and Models in TypeScript\nDESCRIPTION: A set of exported TypeScript functions that create 'Content' or 'Part' objects from various input types, such as base64 strings, executable code, function calls, text, and URIs. These utility functions facilitate standardized construction of content elements used for generating, sending, or embedding AI interactions. They support different content modalities and enforce required parameters like MIME type and language for accurate content representation.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-node.api.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function createModelContent(partOrString: PartListUnion | string): Content;\nexport function createPartFromBase64(data: string, mimeType: string): Part;\nexport function createPartFromCodeExecutionResult(outcome: Outcome, output: string): Part;\nexport function createPartFromExecutableCode(code: string, language: Language): Part;\nexport function createPartFromFunctionCall(name: string, args: Record<string, unknown>): Part;\nexport function createPartFromFunctionResponse(id: string, name: string, response: Record<string, unknown>): Part;\nexport function createPartFromText(text: string): Part;\nexport function createPartFromUri(uri: string, mimeType: string): Part;\nexport function createUserContent(partOrString: PartListUnion | string): Content;\n```\n\n----------------------------------------\n\nTITLE: GenerationConfig Interface for General Content Generation Parameters in TypeScript\nDESCRIPTION: Defines basic configurable parameters commonly used for generation tasks including token limits, penalty schedules, temperature, modality resolution, schema, routing, stop sequences, seed for determinism, and response logging preferences.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-node.api.md#_snippet_37\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface GenerationConfig {\n    audioTimestamp?: boolean;\n    candidateCount?: number;\n    frequencyPenalty?: number;\n    logprobs?: number;\n    maxOutputTokens?: number;\n    mediaResolution?: MediaResolution;\n    presencePenalty?: number;\n    responseLogprobs?: boolean;\n    responseMimeType?: string;\n    responseSchema?: Schema;\n    routingConfig?: GenerationConfigRoutingConfig;\n    seed?: number;\n    stopSequences?: string[];\n    temperature?: number;\n    topK?: number;\n    topP?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Safety Attributes Interface and Filter Level Enum in TypeScript\nDESCRIPTION: Defines structures related to safety filtering in the Google GenAI API. `SafetyAttributes` describes the safety assessment of content, including categories, content type, and scores. `SafetyFilterLevel` enumerates the strictness levels for blocking content (e.g., block low and above, medium and above, or none). Enum members are marked as undocumented.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai.api.md#_snippet_36\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport interface SafetyAttributes {\n    categories?: string[];\n    contentType?: string;\n    scores?: number[];\n}\n\n// @public\nexport enum SafetyFilterLevel {\n    // (undocumented)\n    BLOCK_LOW_AND_ABOVE = \"BLOCK_LOW_AND_ABOVE\",\n    // (undocumented)\n    BLOCK_MEDIUM_AND_ABOVE = \"BLOCK_MEDIUM_AND_ABOVE\",\n    // (undocumented)\n    BLOCK_NONE = \"BLOCK_NONE\",\n    // (undocumented)\n\n```\n\n----------------------------------------\n\nTITLE: Browser Initialization with API Key\nDESCRIPTION: Example of initializing the Google Gen AI SDK in a browser environment. Note that this approach should be used cautiously as it exposes API keys in client-side code.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/README.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GoogleGenAI } from '@google/genai';\nconst ai = new GoogleGenAI({apiKey: 'GEMINI_API_KEY'});\n```\n\n----------------------------------------\n\nTITLE: Defining ToolConfig Interface\nDESCRIPTION: Defines an interface called ToolConfig. It is used to configure tool features such as function calling, enabling and disabling particular aspects, which is specified through the function calling configuration.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-node.api.md#_snippet_83\n\n\n\n----------------------------------------\n\nTITLE: File Operation Interfaces and Classes for Create, Delete, and Download in TypeScript\nDESCRIPTION: Defines request configuration interfaces and parameter objects used for managing file operations including creation, deletion, and downloading. Optional abort signals and HTTP options support network control. Response classes indicate HTTP response results. These constructs are used for managing file entities related to the generative AI service within a typed API surface.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai.api.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface CreateFileConfig {\n    abortSignal?: AbortSignal;\n    httpOptions?: HttpOptions;\n}\n\nexport interface CreateFileParameters {\n    config?: CreateFileConfig;\n    file: File_2;\n}\n\nexport class CreateFileResponse {\n    sdkHttpResponse?: HttpResponse;\n}\n\nexport interface DeleteFileConfig {\n    abortSignal?: AbortSignal;\n    httpOptions?: HttpOptions;\n}\n\nexport interface DeleteFileParameters {\n    config?: DeleteFileConfig;\n    name: string;\n}\n\nexport class DeleteFileResponse {\n}\n\nexport interface DownloadFileConfig {\n    abortSignal?: AbortSignal;\n    httpOptions?: HttpOptions;\n}\n```\n\n----------------------------------------\n\nTITLE: API Client Class for Managing Cached Content in TypeScript\nDESCRIPTION: An object-oriented class representing operations for creating, retrieving, listing, updating, and deleting cached content objects. It requires an ApiClient instance and uses type-safe parameter and return types from the types module. Methods return Promises indicating asynchronous API calls. This class acts as a wrapper for cached content RESTful endpoints within the generative AI ecosystem.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai.api.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class Caches extends BaseModule {\n    constructor(apiClient: ApiClient);\n    create(params: types.CreateCachedContentParameters): Promise<types.CachedContent>;\n    delete(params: types.DeleteCachedContentParameters): Promise<types.DeleteCachedContentResponse>;\n    get(params: types.GetCachedContentParameters): Promise<types.CachedContent>;\n    list: (params?: types.ListCachedContentsParameters) => Promise<Pager<types.CachedContent>>;\n    update(params: types.UpdateCachedContentParameters): Promise<types.CachedContent>;\n}\n```\n\n----------------------------------------\n\nTITLE: Token Computation Interfaces and Classes in TypeScript\nDESCRIPTION: Interfaces and classes to facilitate token counting operations including configuration options such as abort signals, HTTP options, system instructions, and tool definitions. ComputeTokensParameters and CountTokensParameters define inputs consisting of content lists and models. Corresponding response classes include ComputeTokensResponse and CountTokensResponse, which encapsulate token details including cached content token counts and total tokens, enabling clients to estimate token usage programmatically.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai.api.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface ComputeTokensConfig {\n    abortSignal?: AbortSignal;\n    httpOptions?: HttpOptions;\n}\n\nexport interface ComputeTokensParameters {\n    config?: ComputeTokensConfig;\n    contents: ContentListUnion;\n    model: string;\n}\n\nexport class ComputeTokensResponse {\n    tokensInfo?: TokensInfo[];\n}\n\nexport interface CountTokensConfig {\n    abortSignal?: AbortSignal;\n    generationConfig?: GenerationConfig;\n    httpOptions?: HttpOptions;\n    systemInstruction?: ContentUnion;\n    tools?: Tool[];\n}\n\nexport interface CountTokensParameters {\n    config?: CountTokensConfig;\n    contents: ContentListUnion;\n    model: string;\n}\n\nexport class CountTokensResponse {\n    cachedContentTokenCount?: number;\n    totalTokens?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Files Class Extending BaseModule for File Operations in TypeScript\nDESCRIPTION: This class represents a file management module interfacing with the API client to delete, get, list, and upload files. It requires an ApiClient instance and returns promises for asynchronous API interactions, encapsulating file operations.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-node.api.md#_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class Files extends BaseModule {\n    constructor(apiClient: ApiClient);\n    delete(params: types.DeleteFileParameters): Promise<types.DeleteFileResponse>;\n    get(params: types.GetFileParameters): Promise<types.File>;\n    list: (params?: types.ListFilesParameters) => Promise<Pager<types.File>>;\n    upload(params: types.UploadFileParameters): Promise<types.File>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Tool interface in TypeScript\nDESCRIPTION: This code defines the `Tool` interface, which includes optional properties for `codeExecution`, `functionDeclarations`, `googleSearch`, `googleSearchRetrieval`, and `retrieval`. These properties represent different types of tools or capabilities that can be used by the system.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai.api.md#_snippet_59\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Tool {\n    codeExecution?: ToolCodeExecution;\n    functionDeclarations?: FunctionDeclaration[];\n    googleSearch?: GoogleSearch;\n    googleSearchRetrieval?: GoogleSearchRetrieval;\n    retrieval?: Retrieval;\n}\n```\n\n----------------------------------------\n\nTITLE: FunctionCallingConfig Interface for Function Invocation Restrictions in TypeScript\nDESCRIPTION: Defines configuration for allowed function calls including an optional list of function names and a mode enum specifying calling strategy (e.g., ANY, AUTO, NONE). It regulates function invocation behavior in generated content.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-node.api.md#_snippet_19\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface FunctionCallingConfig {\n    allowedFunctionNames?: string[];\n    mode?: FunctionCallingConfigMode;\n}\n```\n\n----------------------------------------\n\nTITLE: GenerateContentResponseUsageMetadata Class for Token Usage Tracking in TypeScript\nDESCRIPTION: Tracks detailed token counts for cached content, candidates, prompts, thoughts, tool usage, and total tokens, with modality-specific breakdowns and traffic types, useful for usage monitoring and billing.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-node.api.md#_snippet_27\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class GenerateContentResponseUsageMetadata {\n    cachedContentTokenCount?: number;\n    cacheTokensDetails?: ModalityTokenCount[];\n    candidatesTokenCount?: number;\n    candidatesTokensDetails?: ModalityTokenCount[];\n    promptTokenCount?: number;\n    promptTokensDetails?: ModalityTokenCount[];\n    thoughtsTokenCount?: number;\n    toolUsePromptTokenCount?: number;\n    toolUsePromptTokensDetails?: ModalityTokenCount[];\n    totalTokenCount?: number;\n    trafficType?: TrafficType;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Files Class in TypeScript\nDESCRIPTION: Class extending BaseModule that provides methods for file operations including delete, get, list, and upload functionalities for working with files in the API.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-web.api.md#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class Files extends BaseModule {\n    constructor(apiClient: ApiClient);\n    delete(params: types.DeleteFileParameters): Promise<types.DeleteFileResponse>;\n    get(params: types.GetFileParameters): Promise<types.File>;\n    list: (params?: types.ListFilesParameters) => Promise<Pager<types.File>>;\n    upload(params: types.UploadFileParameters): Promise<types.File>;\n}\n```\n\n----------------------------------------\n\nTITLE: Functions to Create Content and Parts in TypeScript\nDESCRIPTION: A collection of utility functions for generating content and parts from various inputs such as base64 data, code execution results, executable code snippets, function calls, function responses, text, and URIs. These functions standardize the creation of content parts for use in conversational AI applications, enabling consistent object construction for further processing or API submission.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai.api.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function createModelContent(partOrString: PartListUnion | string): Content;\nexport function createPartFromBase64(data: string, mimeType: string): Part;\nexport function createPartFromCodeExecutionResult(outcome: Outcome, output: string): Part;\nexport function createPartFromExecutableCode(code: string, language: Language): Part;\nexport function createPartFromFunctionCall(name: string, args: Record<string, unknown>): Part;\nexport function createPartFromFunctionResponse(id: string, name: string, response: Record<string, unknown>): Part;\nexport function createPartFromText(text: string): Part;\nexport function createPartFromUri(uri: string, mimeType: string): Part;\nexport function createUserContent(partOrString: PartListUnion | string): Content;\n```\n\n----------------------------------------\n\nTITLE: Declaring Live Session Management Classes and Interfaces in TypeScript\nDESCRIPTION: This snippet defines classes and interfaces for managing live real-time connections in the Google GenAI environment. The Live class handles connecting via WebSocket with provided authentication and factory parameters. LiveCallbacks interface declares handlers for connection lifecycle and message reception events. Several data structures represent message contents, setup configurations, client input types, and server responses to support live communication, streaming media, and interactive sessions with the AI service.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai.api.md#_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class Live {\n    // Warning: (ae-forgotten-export) The symbol \"Auth\" needs to be exported by the entry point index.d.ts\n    // Warning: (ae-forgotten-export) The symbol \"WebSocketFactory\" needs to be exported by the entry point index.d.ts\n    constructor(apiClient: ApiClient, auth: Auth, webSocketFactory: WebSocketFactory);\n    connect(params: types.LiveConnectParameters): Promise<Session>;\n}\n\nexport interface LiveCallbacks {\n    onclose?: ((e: CloseEvent) => void) | null;\n    onerror?: ((e: ErrorEvent) => void) | null;\n    onmessage: (e: LiveServerMessage) => void;\n    onopen?: (() => void) | null;\n}\n\nexport interface LiveClientContent {\n    turnComplete?: boolean;\n    turns?: Content[];\n}\n\nexport interface LiveClientMessage {\n    clientContent?: LiveClientContent;\n    realtimeInput?: LiveClientRealtimeInput;\n    setup?: LiveClientSetup;\n    toolResponse?: LiveClientToolResponse;\n}\n\nexport interface LiveClientRealtimeInput {\n    activityEnd?: ActivityEnd;\n    activityStart?: ActivityStart;\n    audio?: Blob_2;\n    audioStreamEnd?: boolean;\n    mediaChunks?: Blob_2[];\n    text?: string;\n    video?: Blob_2;\n}\n\nexport interface LiveClientSetup {\n    contextWindowCompression?: ContextWindowCompressionConfig;\n    generationConfig?: GenerationConfig;\n    inputAudioTranscription?: AudioTranscriptionConfig;\n    model?: string;\n    outputAudioTranscription?: AudioTranscriptionConfig;\n    realtimeInputConfig?: RealtimeInputConfig;\n    sessionResumption?: SessionResumptionConfig;\n    systemInstruction?: ContentUnion;\n    tools?: ToolListUnion;\n}\n\nexport class LiveClientToolResponse {\n    functionResponses?: FunctionResponse[];\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Caching Operations Class for GenAI API in TypeScript\nDESCRIPTION: Defines the 'Caches' class extending a base module, encapsulating CRUD operations for cached content resources. Methods include create, delete, get, list, and update, each interacting with corresponding API endpoints. Requires an ApiClient dependency for underlying HTTP requests and Types from 'types'. The class facilitates structured and asynchronous management of cache content within the GenAI ecosystem.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-web.api.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class Caches extends BaseModule {\n    constructor(apiClient: ApiClient);\n    create(params: types.CreateCachedContentParameters): Promise<types.CachedContent>;\n    delete(params: types.DeleteCachedContentParameters): Promise<types.DeleteCachedContentResponse>;\n    get(params: types.GetCachedContentParameters): Promise<types.CachedContent>;\n    list: (params?: types.ListCachedContentsParameters) => Promise<Pager<types.CachedContent>>;\n    update(params: types.UpdateCachedContentParameters): Promise<types.CachedContent>;\n}\n```\n\n----------------------------------------\n\nTITLE: GenerateImagesResponse Class Handling Generated Images and Safety Attributes in TypeScript\nDESCRIPTION: Models the response of an image generation request containing an array of generated images and any positive prompt safety attributes detected, enabling consumers to inspect generated content and safety compliance data.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-node.api.md#_snippet_32\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class GenerateImagesResponse {\n    generatedImages?: GeneratedImage[];\n    positivePromptSafetyAttributes?: SafetyAttributes;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the Part Interface and Related Types in TypeScript\nDESCRIPTION: Defines the `Part` interface, representing a component of content sent to or received from the Google GenAI API. A part can contain various types of data, such as code execution results, executable code, file data, function calls/responses, inline data (blobs), text, or video metadata. It also defines union types `PartUnion` (a single Part or a string) and `PartListUnion` (a single `PartUnion` or an array of them) for flexibility.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai.api.md#_snippet_28\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport interface Part {\n    codeExecutionResult?: CodeExecutionResult;\n    executableCode?: ExecutableCode;\n    fileData?: FileData;\n    functionCall?: FunctionCall;\n    functionResponse?: FunctionResponse;\n    inlineData?: Blob_2;\n    text?: string;\n    thought?: boolean;\n    videoMetadata?: VideoMetadata;\n}\n\n// @public (undocumented)\nexport type PartListUnion = PartUnion[] | PartUnion;\n\n// @public (undocumented)\nexport type PartUnion = Part | string;\n```\n\n----------------------------------------\n\nTITLE: FunctionCall Interface for Modeling Invoked Functions in TypeScript\nDESCRIPTION: This interface describes a function call with potentially passed arguments, an identifier, and a function name, used to represent calls triggered during content generation or API executions.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-node.api.md#_snippet_18\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface FunctionCall {\n    args?: Record<string, unknown>;\n    id?: string;\n    name?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Google GenAI SDK\nDESCRIPTION: Environment variable configuration required for the samples to authenticate with Gemini API and Google Cloud. These must be set before running any samples.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/sdk-samples/README.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nexport GEMINI_API_KEY=<GEMINI_KEY>\nexport GOOGLE_CLOUD_PROJECT=<GOOGLE_CLOUD_PROJECT>\nexport GOOGLE_CLOUD_LOCATION=<GCP_REGION>\n```\n\n----------------------------------------\n\nTITLE: Defining RagRetrievalConfig Interface - TypeScript\nDESCRIPTION: This code defines the `RagRetrievalConfig` interface. It contains optional properties for filter, hybrid search, ranking, and the top K results. This configures the retrieval process for Retrieval Augmented Generation (RAG).\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-web.api.md#_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface RagRetrievalConfig {\n    filter?: RagRetrievalConfigFilter;\n    hybridSearch?: RagRetrievalConfigHybridSearch;\n    ranking?: RagRetrievalConfigRanking;\n    topK?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: FunctionDeclaration Interface Describing Function Metadata and Schemas in TypeScript\nDESCRIPTION: This interface captures a function's description, name, parameters schema, and response schema to formally define functions available or expected during runtime or API use, supporting validation and typing.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-node.api.md#_snippet_21\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface FunctionDeclaration {\n    description?: string;\n    name?: string;\n    parameters?: Schema;\n    response?: Schema;\n}\n```\n\n----------------------------------------\n\nTITLE: Session Management Class Using WebSocket in TypeScript\nDESCRIPTION: Defines a 'Session' class to manage real-time sessions via a WebSocket connection. The class constructor accepts a WebSocket connection and an API client. It provides methods to close the session and send data, including client content, real-time input, and tool responses, via specific typed parameters. The class depends on the WebSocket_2 type and various parameter types from a 'types' namespace, requiring those to be correctly exported for full functionality.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-web.api.md#_snippet_55\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class Session {\n    constructor(conn: WebSocket_2, apiClient: ApiClient);\n    close(): void;\n    readonly conn: WebSocket_2;\n    sendClientContent(params: types.LiveSendClientContentParameters): void;\n    sendRealtimeInput(params: types.LiveSendRealtimeInputParameters): void;\n    sendToolResponse(params: types.LiveSendToolResponseParameters): void;\n}\n```\n\n----------------------------------------\n\nTITLE: File Interface Defining Metadata for File Resources in TypeScript\nDESCRIPTION: This interface describes various optional metadata properties for files, including creation and update timestamps, display and download info, MIME types, size, hashes, source, state, error status, and additional video metadata. It supports comprehensive file state modeling.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-node.api.md#_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface File_2 {\n    createTime?: string;\n    displayName?: string;\n    downloadUri?: string;\n    error?: FileStatus;\n    expirationTime?: string;\n    mimeType?: string;\n    name?: string;\n    sha256Hash?: string;\n    sizeBytes?: string;\n    source?: FileSource;\n    state?: FileState;\n    updateTime?: string;\n    uri?: string;\n    videoMetadata?: Record<string, unknown>;\n}\nexport { File_2 as File }\n```\n\n----------------------------------------\n\nTITLE: FetchPredictOperationParameters Interface Including Operation and Resource Names in TypeScript\nDESCRIPTION: Defines parameters for the fetch prediction operation, requiring an operationName string and a resourceName string for identifying resources. It optionally includes configuration for request customization.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-node.api.md#_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface FetchPredictOperationParameters {\n    config?: FetchPredictOperationConfig;\n    operationName: string;\n    resourceName: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Describing JSON Schema Interface in TypeScript\nDESCRIPTION: Defines a recursive and extensible interface 'Schema' representing JSON schema constructs for describing API data types and validations. Properties include metadata such as description, enum values, formatting, constraints on items, length, pattern, and properties, enabling dynamic schema definition. The interface supports nested schemas via the 'anyOf' and 'items' properties and specifies the data type via the 'type' property, which correlates to a 'Type' enum.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-web.api.md#_snippet_54\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface Schema {\n    anyOf?: Schema[];\n    default?: unknown;\n    description?: string;\n    enum?: string[];\n    example?: unknown;\n    format?: string;\n    items?: Schema;\n    maximum?: number;\n    maxItems?: string;\n    maxLength?: string;\n    maxProperties?: string;\n    minimum?: number;\n    minItems?: string;\n    minLength?: string;\n    minProperties?: string;\n    nullable?: boolean;\n    pattern?: string;\n    properties?: Record<string, Schema>;\n    propertyOrdering?: string[];\n    required?: string[];\n    title?: string;\n    type?: Type;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Session Class\nDESCRIPTION: Defines a class named Session, responsible for managing a communication session, likely over a WebSocket. The constructor requires a WebSocket_2 and an ApiClient. It includes methods for closing the session and sending different types of client content. This represents a class with methods but does not contain executable code.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-node.api.md#_snippet_65\n\n\n\n----------------------------------------\n\nTITLE: Defining VertexAISearch Interface\nDESCRIPTION: Defines an interface called VertexAISearch. It includes parameters for searching via Vertex AI, like specifying the datastore and search engine. It structures information that is used during the search.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-node.api.md#_snippet_97\n\n\n\n----------------------------------------\n\nTITLE: Defining a Schema Interface\nDESCRIPTION: Defines an interface called Schema. It describes the structure of data schemas. It includes various properties for defining the schema, such as 'anyOf', 'default', 'description', 'enum', 'example', 'format', etc. It structures the schema objects and describes the expected format.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-node.api.md#_snippet_60\n\n\n\n----------------------------------------\n\nTITLE: Embedding Content Interfaces and Response Class in TypeScript\nDESCRIPTION: Describes configuration options and parameters for embedding content, such as auto truncation, MIME type, output dimensionality, and task type. The EmbedContentParameters interface requires content and a model for embedding requests. EmbedContentResponse contains arrays of embeddings and optional metadata like billable character counts. These types facilitate embedding generation workflows for content understanding in AI models.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai.api.md#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface EmbedContentConfig {\n    abortSignal?: AbortSignal;\n    autoTruncate?: boolean;\n    httpOptions?: HttpOptions;\n    mimeType?: string;\n    outputDimensionality?: number;\n    taskType?: string;\n    title?: string;\n}\n\nexport interface EmbedContentMetadata {\n    billableCharacterCount?: number;\n}\n\nexport interface EmbedContentParameters {\n    config?: EmbedContentConfig;\n    contents: ContentListUnion;\n    model: string;\n}\n\nexport class EmbedContentResponse {\n    embeddings?: ContentEmbedding[];\n    metadata?: EmbedContentMetadata;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PersonGeneration Enum - TypeScript\nDESCRIPTION: This code defines the `PersonGeneration` enum. It specifies different policies for generating content related to people, including allowing adult content, allowing all content, and disallowing content generation. This controls the safety of generated content.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-web.api.md#_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\nexport enum PersonGeneration {\n    // (undocumented)\n    ALLOW_ADULT = \"ALLOW_ADULT\",\n    // (undocumented)\n    ALLOW_ALL = \"ALLOW_ALL\",\n    // (undocumented)\n    DONT_ALLOW = \"DONT_ALLOW\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieval and RAG Configuration Interfaces\nDESCRIPTION: TypeScript interfaces for configuring Retrieval Augmented Generation (RAG) settings, including filters, hybrid search parameters, and ranking configurations for AI content generation.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-node.api.md#_snippet_52\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface RagRetrievalConfig {\n    filter?: RagRetrievalConfigFilter;\n    hybridSearch?: RagRetrievalConfigHybridSearch;\n    ranking?: RagRetrievalConfigRanking;\n    topK?: number;\n}\n\nexport interface RagRetrievalConfigFilter {\n    metadataFilter?: string;\n    vectorDistanceThreshold?: number;\n    vectorSimilarityThreshold?: number;\n}\n\nexport interface RagRetrievalConfigHybridSearch {\n    alpha?: number;\n}\n\nexport interface RagRetrievalConfigRanking {\n    llmRanker?: RagRetrievalConfigRankingLlmRanker;\n    rankService?: RagRetrievalConfigRankingRankService;\n}\n\nexport interface RagRetrievalConfigRankingLlmRanker {\n    modelName?: string;\n}\n\nexport interface RagRetrievalConfigRankingRankService {\n    modelName?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Schema interface in TypeScript\nDESCRIPTION: This code defines the `Schema` interface, representing a JSON schema with properties such as `anyOf`, `default`, `description`, `enum`, `example`, `format`, `items`, `maximum`, `maxItems`, `maxLength`, `maxProperties`, `minimum`, `minItems`, `minLength`, `minProperties`, `nullable`, `pattern`, `properties`, `propertyOrdering`, `required`, `title`, and `type`. It is a complex definition which aims to type JSON data structures.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai.api.md#_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Schema {\n    anyOf?: Schema[];\n    default?: unknown;\n    description?: string;\n    enum?: string[];\n    example?: unknown;\n    format?: string;\n    items?: Schema;\n    maximum?: number;\n    maxItems?: string;\n    maxLength?: string;\n    maxProperties?: string;\n    minimum?: number;\n    minItems?: string;\n    minLength?: string;\n    minProperties?: string;\n    nullable?: boolean;\n    pattern?: string;\n    properties?: Record<string, Schema>;\n    propertyOrdering?: string[];\n    required?: string[];\n    title?: string;\n    type?: Type;\n}\n```\n\n----------------------------------------\n\nTITLE: Model and Token Count Interfaces for AI Models\nDESCRIPTION: TypeScript interfaces for representing AI model information, token counting, and mode settings for content generation tasks.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-node.api.md#_snippet_47\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ModalityTokenCount {\n    modality?: MediaModality;\n    tokenCount?: number;\n}\n\nexport enum Mode {\n    // (undocumented)\n    MODE_DYNAMIC = \"MODE_DYNAMIC\",\n    // (undocumented)\n    MODE_UNSPECIFIED = \"MODE_UNSPECIFIED\"\n}\n\nexport interface Model {\n    description?: string;\n    displayName?: string;\n    endpoints?: Endpoint[];\n    inputTokenLimit?: number;\n    labels?: Record<string, string>;\n    name?: string;\n    outputTokenLimit?: number;\n    supportedActions?: string[];\n    tunedModelInfo?: TunedModelInfo;\n    version?: string;\n}\n\nexport interface ModelSelectionConfig {\n    featureSelectionPreference?: FeatureSelectionPreference;\n}\n```\n\n----------------------------------------\n\nTITLE: File Upload and Caching Configuration Interfaces in TypeScript\nDESCRIPTION: Defines interfaces to manage file upload parameters and cached content update configurations. 'UploadFileParameters' encapsulate the file and optional configuration including MIME type and HTTP options, supporting abort signals. 'UpdateCachedContentConfig' supports abort signals, expiration timings, HTTP options, and time-to-live (TTL) settings for cache management. These interfaces enable robust upload and content caching operations with fine-grained control.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-web.api.md#_snippet_58\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface UploadFileConfig {\n    abortSignal?: AbortSignal;\n    displayName?: string;\n    httpOptions?: HttpOptions;\n    mimeType?: string;\n    name?: string;\n}\n\nexport interface UploadFileParameters {\n    config?: UploadFileConfig;\n    file: string | globalThis.Blob;\n}\n\nexport interface UpdateCachedContentConfig {\n    abortSignal?: AbortSignal;\n    expireTime?: string;\n    httpOptions?: HttpOptions;\n    ttl?: string;\n}\n\nexport interface UpdateCachedContentParameters {\n    config?: UpdateCachedContentConfig;\n    name: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a SpeechConfig Interface\nDESCRIPTION: Defines an interface called SpeechConfig. It is used to define speech configuration settings such as the language code and the voice configuration.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-node.api.md#_snippet_69\n\n\n\n----------------------------------------\n\nTITLE: Defining RAG Retrieval Configuration Interfaces in TypeScript\nDESCRIPTION: Defines a set of interfaces for configuring Retrieval-Augmented Generation (RAG) within the Google GenAI API. `RagRetrievalConfig` is the main interface, containing optional settings for filtering (`RagRetrievalConfigFilter`), hybrid search (`RagRetrievalConfigHybridSearch`), ranking (`RagRetrievalConfigRanking`), and the number of results (`topK`). Sub-interfaces define parameters for metadata filtering, vector distance/similarity thresholds, hybrid search weighting (`alpha`), and ranking models (LLM or Rank Service).\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai.api.md#_snippet_31\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport interface RagRetrievalConfig {\n    filter?: RagRetrievalConfigFilter;\n    hybridSearch?: RagRetrievalConfigHybridSearch;\n    ranking?: RagRetrievalConfigRanking;\n    topK?: number;\n}\n\n// @public\nexport interface RagRetrievalConfigFilter {\n    metadataFilter?: string;\n    vectorDistanceThreshold?: number;\n    vectorSimilarityThreshold?: number;\n}\n\n// @public\nexport interface RagRetrievalConfigHybridSearch {\n    alpha?: number;\n}\n\n// @public\nexport interface RagRetrievalConfigRanking {\n    llmRanker?: RagRetrievalConfigRankingLlmRanker;\n    rankService?: RagRetrievalConfigRankingRankService;\n}\n\n// @public\nexport interface RagRetrievalConfigRankingLlmRanker {\n    modelName?: string;\n}\n\n// @public\nexport interface RagRetrievalConfigRankingRankService {\n    modelName?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuration Interfaces for Speech and Style References in TypeScript\nDESCRIPTION: Includes interfaces defining configuration options for speech processing and style referencing. 'SpeechConfig' allows optional language code and voice configuration settings, while 'StyleReferenceConfig' specifies a descriptive style string to characterize referenced images. These interfaces serve as contract definitions for customizing speech synthesis and visual style application within the API ecosystem.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-web.api.md#_snippet_56\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface SpeechConfig {\n    languageCode?: string;\n    voiceConfig?: VoiceConfig;\n}\n\nexport interface StyleReferenceConfig {\n    styleDescription?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Mode Enum - TypeScript\nDESCRIPTION: This code defines the `Mode` enum. It specifies different modes of operation, including dynamic. It configures how the models are being used.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-web.api.md#_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nexport enum Mode {\n    // (undocumented)\n    MODE_DYNAMIC = \"MODE_DYNAMIC\",\n    // (undocumented)\n    MODE_UNSPECIFIED = \"MODE_UNSPECIFIED\"\n}\n```\n\n----------------------------------------\n\nTITLE: FunctionResponse Class Representing the Result of Function Execution in TypeScript\nDESCRIPTION: A class encapsulating the id, name, and response (as a record) of a function's execution, used to model returned data from invoked functions in API responses or generated content.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-node.api.md#_snippet_22\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class FunctionResponse {\n    id?: string;\n    name?: string;\n    response?: Record<string, unknown>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SendMessageParameters interface in TypeScript\nDESCRIPTION: This code defines the `SendMessageParameters` interface, which includes required `message` of type `PartListUnion`, and an optional `config` of type `GenerateContentConfig`. It is used as the input parameters for sending a message.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai.api.md#_snippet_43\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface SendMessageParameters {\n    config?: GenerateContentConfig;\n    message: PartListUnion;\n}\n```\n\n----------------------------------------\n\nTITLE: Building the Google GenAI JavaScript SDK\nDESCRIPTION: Commands to install dependencies and build both the SDK and samples. These steps need to be executed from the repository root before running any samples.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/sdk-samples/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# Build the SDK\nnpm install\nnpm run build\n\n# Build the samples\ncd sdk-samples\nnpm install\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Defining the Model Interface in TypeScript\nDESCRIPTION: Defines the structure representing a generative model within the Google GenAI API. It includes optional properties for description, display name, endpoints, token limits, labels, internal name, supported actions, tuned model information, and version.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai.api.md#_snippet_21\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport interface Model {\n    description?: string;\n    displayName?: string;\n    endpoints?: Endpoint[];\n    inputTokenLimit?: number;\n    labels?: Record<string, string>;\n    name?: string;\n    outputTokenLimit?: number;\n    supportedActions?: string[];\n    tunedModelInfo?: TunedModelInfo;\n    version?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Tool Interface\nDESCRIPTION: Defines an interface called Tool. It models the concept of tools, which contain different elements, like code execution, function declarations, Google search, and retrieval options. It defines tools and their potential configurations.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-node.api.md#_snippet_81\n\n\n\n----------------------------------------\n\nTITLE: Defining a Safety Rating Interface\nDESCRIPTION: Defines an interface called SafetyRating. It represents safety ratings associated with generated content. It includes boolean properties for blocked content, and HarmCategory, HarmProbability, HarmSeverity values and associated scores. It does not perform any operations but structures the safety attributes for content.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-node.api.md#_snippet_58\n\n\n\n----------------------------------------\n\nTITLE: Defining a SubjectReferenceConfig Interface\nDESCRIPTION: Defines an interface called SubjectReferenceConfig. It represents subject reference configuration, including subject description and type, designed to configure the subjects used in an analysis.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-node.api.md#_snippet_74\n\n\n\n----------------------------------------\n\nTITLE: GenerateContentResponsePromptFeedback Class Handling Safety and Blocking Feedback in TypeScript\nDESCRIPTION: Encapsulates feedback information on generated prompts including reasons for blocks, associated messages, and a list of safety ratings. It supports evaluation and compliance processing of generated content.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-node.api.md#_snippet_26\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class GenerateContentResponsePromptFeedback {\n    blockReason?: BlockedReason;\n    blockReasonMessage?: string;\n    safetyRatings?: SafetyRating[];\n}\n```\n\n----------------------------------------\n\nTITLE: Classes and Interfaces for Token Counting, Embedding and File Management in TypeScript\nDESCRIPTION: Defines TypeScript classes and interfaces managing token counting, embedding generation, and file operations within the Google GenAI SDK. Includes parameter and configuration interfaces for computing or counting tokens, classes representing responses, and parameters/config for file creation, deletion, and downloading. These facilitate programmatic control over token usage and file lifecycle, integral to AI content generation workflows.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-node.api.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface ComputeTokensConfig {\n    abortSignal?: AbortSignal;\n    httpOptions?: HttpOptions;\n}\nexport interface ComputeTokensParameters {\n    config?: ComputeTokensConfig;\n    contents: ContentListUnion;\n    model: string;\n}\nexport class ComputeTokensResponse {\n    tokensInfo?: TokensInfo[];\n}\nexport interface CountTokensConfig {\n    abortSignal?: AbortSignal;\n    generationConfig?: GenerationConfig;\n    httpOptions?: HttpOptions;\n    systemInstruction?: ContentUnion;\n    tools?: Tool[];\n}\nexport interface CountTokensParameters {\n    config?: CountTokensConfig;\n    contents: ContentListUnion;\n    model: string;\n}\nexport class CountTokensResponse {\n    cachedContentTokenCount?: number;\n    totalTokens?: number;\n}\nexport interface CreateFileConfig {\n    abortSignal?: AbortSignal;\n    httpOptions?: HttpOptions;\n}\nexport interface CreateFileParameters {\n    config?: CreateFileConfig;\n    file: File_2;\n}\nexport class CreateFileResponse {\n    sdkHttpResponse?: HttpResponse;\n}\nexport interface DeleteFileConfig {\n    abortSignal?: AbortSignal;\n    httpOptions?: HttpOptions;\n}\nexport interface DeleteFileParameters {\n    config?: DeleteFileConfig;\n    name: string;\n}\nexport class DeleteFileResponse {\n}\nexport interface DownloadFileConfig {\n    abortSignal?: AbortSignal;\n    httpOptions?: HttpOptions;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a UpdateCachedContentConfig Interface\nDESCRIPTION: Defines an interface called UpdateCachedContentConfig. It is used for configuration when updating cached content. This interface allows configuring a signal to abort operations, along with setting a time and TTL (Time-To-Live) for cached content. It leverages the AbortSignal type.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-node.api.md#_snippet_90\n\n\n\n----------------------------------------\n\nTITLE: Defining API Request Configuration Interfaces in TypeScript\nDESCRIPTION: This snippet declares TypeScript interfaces for configuration objects and parameters used when making API requests to fetch files, models, and operations in Google GenAI. Each config interface optionally includes an AbortSignal for cancellation and HTTP options to customize requests. Parameter interfaces extend these with required identifiers such as file names, model names, or operation names necessary for API calls. These interfaces standardize request inputs, improving type safety and code clarity in API interaction.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai.api.md#_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface GetFileConfig {\n    abortSignal?: AbortSignal;\n    httpOptions?: HttpOptions;\n}\n\n// @public\nexport interface GetFileParameters {\n    config?: GetFileConfig;\n    name: string;\n}\n\n// @public\nexport interface GetModelConfig {\n    abortSignal?: AbortSignal;\n    httpOptions?: HttpOptions;\n}\n\n// @public (undocumented)\nexport interface GetModelParameters {\n    config?: GetModelConfig;\n    // (undocumented)\n    model: string;\n}\n\n// @public (undocumented)\nexport interface GetOperationConfig {\n    abortSignal?: AbortSignal;\n    httpOptions?: HttpOptions;\n}\n\n// @public\nexport interface GetOperationParameters {\n    config?: GetOperationConfig;\n    operationName: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Content Safety Rating Interfaces in TypeScript\nDESCRIPTION: Defines interfaces and enumerations to model content safety ratings, including categories, probabilities, and severities. These interfaces specify optional properties related to whether content is blocked and the levels of harm associated with content, supporting use cases in content moderation. The dependencies include enumerations for HarmCategory, HarmProbability, HarmSeverity, HarmBlockMethod, and HarmBlockThreshold used throughout the rating and setting interfaces.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-web.api.md#_snippet_53\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface SafetyRating {\n    blocked?: boolean;\n    category?: HarmCategory;\n    probability?: HarmProbability;\n    probabilityScore?: number;\n    severity?: HarmSeverity;\n    severityScore?: number;\n}\n\nexport interface SafetySetting {\n    category?: HarmCategory;\n    method?: HarmBlockMethod;\n    threshold?: HarmBlockThreshold;\n}\n```\n\n----------------------------------------\n\nTITLE: GeneratedImage Interface Representing Image Output with Safety Metadata in TypeScript\nDESCRIPTION: Defines properties for a generated image including an enhanced prompt version, the actual image object, reason for any RAI filtering, and associated safety attributes, facilitating compliance and filtering information.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-node.api.md#_snippet_28\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface GeneratedImage {\n    enhancedPrompt?: string;\n    image?: Image_2;\n    raiFilteredReason?: string;\n    safetyAttributes?: SafetyAttributes;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining UploadFileParameters interface in TypeScript\nDESCRIPTION: This code defines the `UploadFileParameters` interface, which includes a required `file` property (either a string or a Blob), and an optional `config` property. It represents parameters for uploading a file.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai.api.md#_snippet_70\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface UploadFileParameters {\n    config?: UploadFileConfig;\n    file: string | globalThis.Blob;\n}\n```\n\n----------------------------------------\n\nTITLE: GenerateVideosParameters Interface Defining Input for Video Generation in TypeScript\nDESCRIPTION: Specifies required fields for video generation including the model name, an optional prompt string, optional config object to customize generation, and optional input image for video context or conditioning, structuring video generation requests.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-node.api.md#_snippet_35\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface GenerateVideosParameters {\n    config?: GenerateVideosConfig;\n    image?: Image_2;\n    model: string;\n    prompt?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RealtimeInputConfig Interface - TypeScript\nDESCRIPTION: This code defines the `RealtimeInputConfig` interface. It contains optional properties for activity handling, automatic activity detection, and turn coverage. This configures the behavior of realtime input processing.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-web.api.md#_snippet_44\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface RealtimeInputConfig {\n    activityHandling?: ActivityHandling;\n    automaticActivityDetection?: AutomaticActivityDetection;\n    turnCoverage?: TurnCoverage;\n}\n```\n\n----------------------------------------\n\nTITLE: GetCachedContentParameters Interface for Requesting Cached Content by Name in TypeScript\nDESCRIPTION: Defines parameters required to fetch cached content, including a required name string identifier and optional configuration for request control.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-node.api.md#_snippet_42\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface GetCachedContentParameters {\n    config?: GetCachedContentConfig;\n    name: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Realtime Input Configuration Interface in TypeScript\nDESCRIPTION: Defines the `RealtimeInputConfig` interface, likely used for configuring real-time interactions (e.g., streaming audio/video) with the Google GenAI API. It includes optional settings for activity handling, automatic activity detection, and turn coverage.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai.api.md#_snippet_33\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport interface RealtimeInputConfig {\n    activityHandling?: ActivityHandling;\n    automaticActivityDetection?: AutomaticActivityDetection;\n    turnCoverage?: TurnCoverage;\n}\n```\n\n----------------------------------------\n\nTITLE: Safety Filtering and Attributes Interfaces\nDESCRIPTION: TypeScript interfaces and enum for content safety filtering and attributes, including safety categories, scores, and filter levels for content moderation.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-node.api.md#_snippet_54\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface SafetyAttributes {\n    categories?: string[];\n    contentType?: string;\n    scores?: number[];\n}\n\nexport enum SafetyFilterLevel {\n    // (undocumented)\n    BLOCK_LOW_AND_ABOVE = \"BLOCK_LOW_AND_ABOVE\",\n    // (undocumented)\n    BLOCK_MEDIUM_AND_ABOVE = \"BLOCK_MEDIUM_AND_ABOVE\",\n    // (undocumented)\n    BLOCK_NONE = \"BLOCK_NONE\"\n}\n```\n\n----------------------------------------\n\nTITLE: FunctionCallingConfigMode Enum for Function Calling Strategies in TypeScript\nDESCRIPTION: Enumerates modes for function calling: ANY allows any function, AUTO is automatic determination, NONE disables function calling, and unspecified as default. This controls invocation strategies during generation.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-node.api.md#_snippet_20\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport enum FunctionCallingConfigMode {\n    ANY = \"ANY\",\n    AUTO = \"AUTO\",\n    MODE_UNSPECIFIED = \"MODE_UNSPECIFIED\",\n    NONE = \"NONE\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining HarmBlockMethod enum in TypeScript\nDESCRIPTION: This code defines an enum named `HarmBlockMethod` with different blocking options: `BLOCK_NONE`, `BLOCK_ONLY_HIGH`, and `BLOCK_ONLY_HIGH`. It's used to control how harmful content is blocked.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai.api.md#_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\nexport enum HarmBlockMethod {\n    // (undocumented)\n    BLOCK_NONE = \"BLOCK_NONE\",\n    // (undocumented)\n    BLOCK_ONLY_HIGH = \"BLOCK_ONLY_HIGH\",\n    BLOCK_ONLY_HIGH = \"BLOCK_ONLY_HIGH\"\n}\n```\n\n----------------------------------------\n\nTITLE: Representing ExecutableCode Interface in TypeScript\nDESCRIPTION: This interface captures executable code data with optional string properties for the code content and its programming language, enabling typed handling of code snippets within API interactions.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-node.api.md#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface ExecutableCode {\n    code?: string;\n    language?: Language;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ThinkingConfig Interface\nDESCRIPTION: Defines an interface named ThinkingConfig. It is used to configure a thought process for GenAI operations, like including thoughts, and sets a budget. This does not contain any code.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-node.api.md#_snippet_79\n\n\n\n----------------------------------------\n\nTITLE: Pager Class for Paginated Results\nDESCRIPTION: TypeScript class implementation for handling paginated results from the API, supporting async iteration over items and page navigation for different types of paginated content.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-node.api.md#_snippet_50\n\nLANGUAGE: typescript\nCODE:\n```\nexport class Pager<T> implements AsyncIterable<T> {\n    [Symbol.asyncIterator](): AsyncIterator<T>;\n    constructor(name: PagedItem, request: (params: PagedItemConfig) => Promise<PagedItemResponse<T>>, response: PagedItemResponse<T>, params: PagedItemConfig);\n    getItem(index: number): T;\n    hasNextPage(): boolean;\n    // (undocumented)\n    protected idxInternal: number;\n    get name(): PagedItem;\n    nextPage(): Promise<T[]>;\n    get page(): T[];\n    get pageLength(): number;\n    get pageSize(): number;\n    get params(): PagedItemConfig;\n    // (undocumented)\n    protected requestInternal: (params: PagedItemConfig) => Promise<PagedItemResponse<T>>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RagRetrievalConfigFilter Interface - TypeScript\nDESCRIPTION: This code defines the `RagRetrievalConfigFilter` interface. It contains optional properties for metadata filter, vector distance threshold, and vector similarity threshold. This allows filtering retrieval results based on metadata and vector similarity.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-web.api.md#_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface RagRetrievalConfigFilter {\n    metadataFilter?: string;\n    vectorDistanceThreshold?: number;\n    vectorSimilarityThreshold?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining API Data Models and Enums in TypeScript\nDESCRIPTION: Provides TypeScript interfaces and enums describing core data structures used by the SDK, such as ActivityStart, ActivityEnd, AudioTranscriptionConfig, CachedContent, Citation, Content, and enums like ActivityHandling and BlockedReason. These definitions model the data exchange contracts required by GenAI APIs, specifying optional properties and enumerated types representing state or categorical values. There are no dependencies other than standard TypeScript features.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-web.api.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface ActivityEnd {}\nexport enum ActivityHandling {\n    ACTIVITY_HANDLING_UNSPECIFIED = \"ACTIVITY_HANDLING_UNSPECIFIED\",\n    NO_INTERRUPTION = \"NO_INTERRUPTION\",\n    START_OF_ACTIVITY_INTERRUPTS = \"START_OF_ACTIVITY_INTERRUPTS\"\n}\nexport interface AudioTranscriptionConfig {}\nexport interface CachedContent {\n    createTime?: string;\n    displayName?: string;\n    expireTime?: string;\n    model?: string;\n    name?: string;\n    updateTime?: string;\n    usageMetadata?: CachedContentUsageMetadata;\n}\nexport interface CachedContentUsageMetadata {\n    audioDurationSeconds?: number;\n    imageCount?: number;\n    textCount?: number;\n    totalTokenCount?: number;\n    videoDurationSeconds?: number;\n}\nexport interface Citation {\n    endIndex?: number;\n    license?: string;\n    publicationDate?: GoogleTypeDate;\n    startIndex?: number;\n    title?: string;\n    uri?: string;\n}\nexport interface Content {\n    parts?: Part[];\n    role?: string;\n}\nexport enum BlockedReason {\n    BLOCKED_REASON_UNSPECIFIED = \"BLOCKED_REASON_UNSPECIFIED\",\n    BLOCKLIST = \"BLOCKLIST\",\n    OTHER = \"OTHER\",\n    PROHIBITED_CONTENT = \"PROHIBITED_CONTENT\",\n    SAFETY = \"SAFETY\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MaskReferenceConfig Interface - TypeScript\nDESCRIPTION: This code defines the `MaskReferenceConfig` interface. It contains optional properties for mask dilation, mask mode, and an array of segmentation classes. This structure configures mask generation and processing.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-web.api.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface MaskReferenceConfig {\n    maskDilation?: number;\n    maskMode?: MaskReferenceMode;\n    segmentationClasses?: number[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Safety Setting Interface\nDESCRIPTION: Defines an interface called SafetySetting, used to configure the safety parameters. It includes the category, method, and threshold of blocking. It is a configuration structure and does not contain executable code.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-node.api.md#_snippet_59\n\n\n\n----------------------------------------\n\nTITLE: GeneratedVideo Interface for Video Content Output in TypeScript\nDESCRIPTION: Represents a generated video output with an optional Video object, supporting video generation response handling within the API client.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-node.api.md#_snippet_29\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface GeneratedVideo {\n    video?: Video;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining UploadFileConfig Interface\nDESCRIPTION: Defines an interface called UploadFileConfig. This interface is used to configure the upload of files. It includes parameters such as the display name, HTTP options, mime type, and name. It also uses the AbortSignal type.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-node.api.md#_snippet_92\n\n\n\n----------------------------------------\n\nTITLE: Defining Pager Class - TypeScript\nDESCRIPTION: This code defines the `Pager` class, implementing the `AsyncIterable` interface. It enables asynchronous iteration through paged data. It fetches and manages data in pages, offering methods to navigate through results.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-web.api.md#_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nexport class Pager<T> implements AsyncIterable<T> {\n    [Symbol.asyncIterator](): AsyncIterator<T>;\n    constructor(name: PagedItem, request: (params: PagedItemConfig) => Promise<PagedItemResponse<T>>, response: PagedItemResponse<T>, params: PagedItemConfig);\n    getItem(index: number): T;\n    hasNextPage(): boolean;\n    // (undocumented)\n    protected idxInternal: number;\n    get name(): PagedItem;\n    nextPage(): Promise<T[]>;\n    get page(): T[];\n    get pageLength(): number;\n    get pageSize(): number;\n    get params(): PagedItemConfig;\n    // Warning: (ae-forgotten-export) The symbol \"PagedItemConfig\" needs to be exported by the entry point index.d.ts\n    // Warning: (ae-forgotten-export) The symbol \"PagedItemResponse\" needs to be exported by the entry point index.d.ts\n    //\n    // (undocumented)\n    protected requestInternal: (params: PagedItemConfig) => Promise<PagedItemResponse<T>>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SafetyFilterLevel Enum - TypeScript\nDESCRIPTION: This code defines the `SafetyFilterLevel` enum. It specifies different levels of safety filtering. It dictates which types of content will be blocked.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-web.api.md#_snippet_52\n\nLANGUAGE: typescript\nCODE:\n```\nexport enum SafetyFilterLevel {\n    // (undocumented)\n    BLOCK_LOW_AND_ABOVE = \"BLOCK_LOW_AND_ABOVE\",\n    // (undocumented)\n    BLOCK_MEDIUM_AND_ABOVE = \"BLOCK_MEDIUM_AND_ABOVE\",\n    // (undocumented)\n    BLOCK_NONE = \"BLOCK_NONE\",\n    // (undocumented)\n\n```\n\n----------------------------------------\n\nTITLE: Defining a Send Message Parameters Interface\nDESCRIPTION: Defines an interface named SendMessageParameters. It describes the structure used to send messages. It takes a GenerateContentConfig and message as parameters. It acts as a data structure for communication and not a callable function.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-node.api.md#_snippet_64\n\n\n\n----------------------------------------\n\nTITLE: Defining SafetyRating interface in TypeScript\nDESCRIPTION: This code defines the `SafetyRating` interface, which includes optional properties for indicating if content is blocked, the harm category, probability, probability score, severity, and severity score. It provides detailed information about the safety aspects of a given piece of content.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai.api.md#_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface SafetyRating {\n    blocked?: boolean;\n    category?: HarmCategory;\n    probability?: HarmProbability;\n    probabilityScore?: number;\n    severity?: HarmSeverity;\n    severityScore?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining UsageMetadata interface in TypeScript\nDESCRIPTION: This code defines the `UsageMetadata` interface, which includes optional properties related to token counts and traffic type. It describes metadata information about resource usage.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai.api.md#_snippet_73\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface UsageMetadata {\n    cachedContentTokenCount?: number;\n    cacheTokensDetails?: ModalityTokenCount[];\n    promptTokenCount?: number;\n    promptTokensDetails?: ModalityTokenCount[];\n    responseTokenCount?: number;\n    responseTokensDetails?: ModalityTokenCount[];\n    thoughtsTokenCount?: number;\n    toolUsePromptTokenCount?: number;\n    toolUsePromptTokensDetails?: ModalityTokenCount[];\n    totalTokenCount?: number;\n    trafficType?: TrafficType;\n}\n```\n\n----------------------------------------\n\nTITLE: FinishReason Enum Enumerating Various Completion Causes in TypeScript\nDESCRIPTION: Enumerates potential reasons an operation or generation may finish, such as STOP, MAX_TOKENS, SAFETY, BLOCKLIST, LANGUAGE issues, and others, standardizing status reporting for content generation or API responses.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-node.api.md#_snippet_17\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport enum FinishReason {\n    BLOCKLIST = \"BLOCKLIST\",\n    FINISH_REASON_UNSPECIFIED = \"FINISH_REASON_UNSPECIFIED\",\n    IMAGE_SAFETY = \"IMAGE_SAFETY\",\n    LANGUAGE = \"LANGUAGE\",\n    MALFORMED_FUNCTION_CALL = \"MALFORMED_FUNCTION_CALL\",\n    MAX_TOKENS = \"MAX_TOKENS\",\n    OTHER = \"OTHER\",\n    PROHIBITED_CONTENT = \"PROHIBITED_CONTENT\",\n    RECITATION = \"RECITATION\",\n    SAFETY = \"SAFETY\",\n    SPII = \"SPII\",\n    STOP = \"STOP\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Log Probability Result Interfaces in TypeScript\nDESCRIPTION: Defines interfaces for representing log probability results from the Google GenAI API. `LogprobsResult` holds chosen and top candidates, while `LogprobsResultCandidate` describes a single candidate with its log probability, token string, and token ID. `LogprobsResultTopCandidates` groups multiple candidates.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai.api.md#_snippet_14\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport interface LogprobsResult {\n    chosenCandidates?: LogprobsResultCandidate[];\n    topCandidates?: LogprobsResultTopCandidates[];\n}\n\n// @public\nexport interface LogprobsResultCandidate {\n    logProbability?: number;\n    token?: string;\n    tokenId?: number;\n}\n\n// @public\nexport interface LogprobsResultTopCandidates {\n    candidates?: LogprobsResultCandidate[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Live Server Interaction Interfaces in TypeScript\nDESCRIPTION: Defines several interfaces related to live server communication within the Google GenAI API. These structures represent different types of messages or updates exchanged during a live session, such as session resumption details (`LiveServerSessionResumptionUpdate`), setup completion signals (`LiveServerSetupComplete`), tool calls (`LiveServerToolCall`), and tool call cancellations (`LiveServerToolCallCancellation`). Many properties are optional, indicated by the `?`.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai.api.md#_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\n    goAway?: LiveServerGoAway;\n    serverContent?: LiveServerContent;\n    sessionResumptionUpdate?: LiveServerSessionResumptionUpdate;\n    setupComplete?: LiveServerSetupComplete;\n    toolCall?: LiveServerToolCall;\n    toolCallCancellation?: LiveServerToolCallCancellation;\n    usageMetadata?: UsageMetadata;\n}\n\n// @public\nexport interface LiveServerSessionResumptionUpdate {\n    lastConsumedClientMessageIndex?: string;\n    newHandle?: string;\n    resumable?: boolean;\n}\n\n// @public\nexport interface LiveServerSetupComplete {\n}\n\n// @public\nexport interface LiveServerToolCall {\n    functionCalls?: FunctionCall[];\n}\n\n// @public\nexport interface LiveServerToolCallCancellation {\n    ids?: string[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining UsageMetadata Interface\nDESCRIPTION: Defines an interface called UsageMetadata. It stores metadata about usage. It contains detailed information like token counts, prompt and response token counts, and the total number of tokens used during a process. It is used for data about the usage.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-node.api.md#_snippet_96\n\n\n\n----------------------------------------\n\nTITLE: Defining ToolCodeExecution Interface\nDESCRIPTION: Defines an interface called ToolCodeExecution. It describes the structure for the execution of code within a tool. It doesn't define any behavior.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-node.api.md#_snippet_82\n\n\n\n----------------------------------------\n\nTITLE: Defining Session class in TypeScript\nDESCRIPTION: This code defines the `Session` class, which takes `WebSocket_2` and `ApiClient` in the constructor. The class also has method `close()` to close the session, `sendClientContent()`, `sendRealtimeInput()` and `sendToolResponse()` to send specific type of contents. It manages WebSocket connections and API interactions.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai.api.md#_snippet_44\n\nLANGUAGE: typescript\nCODE:\n```\nexport class Session {\n    constructor(conn: WebSocket_2, apiClient: ApiClient);\n    close(): void;\n    // Warning: (ae-forgotten-export) The symbol \"WebSocket_2\" needs to be exported by the entry point index.d.ts\n    //\n    // (undocumented)\n    readonly conn: WebSocket_2;\n    sendClientContent(params: types.LiveSendClientContentParameters): void;\n    sendRealtimeInput(params: types.LiveSendRealtimeInputParameters): void;\n    sendToolResponse(params: types.LiveSendToolResponseParameters): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining LogprobsResult Interface - TypeScript\nDESCRIPTION: This code defines the `LogprobsResult` interface. It contains optional arrays of `LogprobsResultCandidate` and `LogprobsResultTopCandidates` objects.  This structure captures the log probabilities of different tokens.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-web.api.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface LogprobsResult {\n    chosenCandidates?: LogprobsResultCandidate[];\n    topCandidates?: LogprobsResultTopCandidates[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining LogprobsResultCandidate Interface - TypeScript\nDESCRIPTION: This code defines the `LogprobsResultCandidate` interface. It contains optional properties for log probability, token, and token ID. It represents a single candidate token and its associated log probability.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-web.api.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface LogprobsResultCandidate {\n    logProbability?: number;\n    token?: string;\n    tokenId?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Log Probability Interfaces for Content Generation\nDESCRIPTION: TypeScript interfaces for representing log probability results from the generative AI model, including chosen candidates and top candidates with their associated probabilities.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-node.api.md#_snippet_44\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface LogprobsResult {\n    chosenCandidates?: LogprobsResultCandidate[];\n    topCandidates?: LogprobsResultTopCandidates[];\n}\n\nexport interface LogprobsResultCandidate {\n    logProbability?: number;\n    token?: string;\n    tokenId?: number;\n}\n\nexport interface LogprobsResultTopCandidates {\n    candidates?: LogprobsResultCandidate[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining UploadFileParameters Interface\nDESCRIPTION: Defines an interface called UploadFileParameters. This interface is used to define the parameters for uploading a file. This interface contains the configuration options and the file itself. It leverages the Blob type.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-node.api.md#_snippet_93\n\n\n\n----------------------------------------\n\nTITLE: Defining Replay Data Structures in TypeScript\nDESCRIPTION: Defines interfaces and a class related to replaying recorded API interactions, potentially for testing or debugging within the Google GenAI client library context. `ReplayFile` groups interactions under a replay ID. `ReplayInteraction` holds a request/response pair. `ReplayRequest` details the HTTP request (method, URL, headers, body). `ReplayResponse` details the HTTP response (status code, headers, body) and includes SDK-specific response segments. Properties are marked as undocumented.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai.api.md#_snippet_34\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport interface ReplayFile {\n    // (undocumented)\n    interactions?: ReplayInteraction[];\n    // (undocumented)\n    replayId?: string;\n}\n\n// @public\nexport interface ReplayInteraction {\n    // (undocumented)\n    request?: ReplayRequest;\n    // (undocumented)\n    response?: ReplayResponse;\n}\n\n// @public\nexport interface ReplayRequest {\n    // (undocumented)\n    bodySegments?: Record<string, unknown>[];\n    // (undocumented)\n    headers?: Record<string, string>;\n    // (undocumented)\n    method?: string;\n    // (undocumented)\n    url?: string;\n}\n\n// @public\nexport class ReplayResponse {\n    // (undocumented)\n    bodySegments?: Record<string, unknown>[];\n    // (undocumented)\n    headers?: Record<string, string>;\n    // (undocumented)\n    sdkResponseSegments?: Record<string, unknown>[];\n    // (undocumented)\n    statusCode?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining UploadFileConfig interface in TypeScript\nDESCRIPTION: This code defines the `UploadFileConfig` interface, which includes optional properties for `abortSignal`, `displayName`, `httpOptions`, `mimeType`, and `name`. It's related to the upload file configuration.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai.api.md#_snippet_69\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface UploadFileConfig {\n    abortSignal?: AbortSignal;\n    displayName?: string;\n    httpOptions?: HttpOptions;\n    mimeType?: string;\n    name?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a StyleReferenceImage Interface\nDESCRIPTION: Defines an interface called StyleReferenceImage. It represents an image used for style references, which includes properties for configuration, reference ID, reference image, and reference type.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-node.api.md#_snippet_73\n\n\n\n----------------------------------------\n\nTITLE: Defining LogprobsResultTopCandidates Interface - TypeScript\nDESCRIPTION: This code defines the `LogprobsResultTopCandidates` interface. It contains an optional array of `LogprobsResultCandidate` objects representing the top candidate tokens.  It groups candidate tokens based on some criteria.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-web.api.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface LogprobsResultTopCandidates {\n    candidates?: LogprobsResultCandidate[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining VoiceConfig Interface\nDESCRIPTION: Defines an interface called VoiceConfig. It is used for configuring voice-related parameters. It currently supports prebuilt voice configurations.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-node.api.md#_snippet_102\n\n\n\n----------------------------------------\n\nTITLE: Defining the PagedItem Enum in TypeScript\nDESCRIPTION: Enumerates the types of resources that can be retrieved in paginated lists from the Google GenAI API, such as batch jobs, cached contents, files, models, and tuning jobs. These values are likely used internally by the Pager class. Note that members are marked as undocumented.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai.api.md#_snippet_26\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport enum PagedItem {\n    // (undocumented)\n    PAGED_ITEM_BATCH_JOBS = \"batchJobs\",\n    // (undocumented)\n    PAGED_ITEM_CACHED_CONTENTS = \"cachedContents\",\n    // (undocumented)\n    PAGED_ITEM_FILES = \"files\",\n    // (undocumented)\n    PAGED_ITEM_MODELS = \"models\",\n    // (undocumented)\n    PAGED_ITEM_TUNING_JOBS = \"tuningJobs\"\n}\n```\n\n----------------------------------------\n\nTITLE: Enumerating Harm Detection Categories and Thresholds in TypeScript\nDESCRIPTION: This snippet provides multiple TypeScript enums representing categories, severities, probabilities, block methods, and thresholds related to harm detection in content moderation. These enums define allowable string values indicating the nature and severity of harmful content and the method by which it should be processed or blocked. They enable consistent classification and evaluation of harmful content types across the API client implementation.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai.api.md#_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport enum HarmBlockMethod {\n    // (undocumented)\n    HARM_BLOCK_METHOD_UNSPECIFIED = \"HARM_BLOCK_METHOD_UNSPECIFIED\",\n    // (undocumented)\n    PROBABILITY = \"PROBABILITY\",\n    // (undocumented)\n    SEVERITY = \"SEVERITY\"\n}\n\nexport enum HarmBlockThreshold {\n    // (undocumented)\n    BLOCK_LOW_AND_ABOVE = \"BLOCK_LOW_AND_ABOVE\",\n    // (undocumented)\n    BLOCK_MEDIUM_AND_ABOVE = \"BLOCK_MEDIUM_AND_ABOVE\",\n    // (undocumented)\n    BLOCK_NONE = \"BLOCK_NONE\",\n    // (undocumented)\n    BLOCK_ONLY_HIGH = \"BLOCK_ONLY_HIGH\",\n    // (undocumented)\n    HARM_BLOCK_THRESHOLD_UNSPECIFIED = \"HARM_BLOCK_THRESHOLD_UNSPECIFIED\",\n    // (undocumented)\n    OFF = \"OFF\"\n}\n\nexport enum HarmCategory {\n    // (undocumented)\n    HARM_CATEGORY_CIVIC_INTEGRITY = \"HARM_CATEGORY_CIVIC_INTEGRITY\",\n    // (undocumented)\n    HARM_CATEGORY_DANGEROUS_CONTENT = \"HARM_CATEGORY_DANGEROUS_CONTENT\",\n    // (undocumented)\n    HARM_CATEGORY_HARASSMENT = \"HARM_CATEGORY_HARASSMENT\",\n    // (undocumented)\n    HARM_CATEGORY_HATE_SPEECH = \"HARM_CATEGORY_HATE_SPEECH\",\n    // (undocumented)\n    HARM_CATEGORY_SEXUALLY_EXPLICIT = \"HARM_CATEGORY_SEXUALLY_EXPLICIT\",\n    // (undocumented)\n    HARM_CATEGORY_UNSPECIFIED = \"HARM_CATEGORY_UNSPECIFIED\"\n}\n\nexport enum HarmProbability {\n    // (undocumented)\n    HARM_PROBABILITY_UNSPECIFIED = \"HARM_PROBABILITY_UNSPECIFIED\",\n    // (undocumented)\n    HIGH = \"HIGH\",\n    // (undocumented)\n    LOW = \"LOW\",\n    // (undocumented)\n    MEDIUM = \"MEDIUM\",\n    // (undocumented)\n    NEGLIGIBLE = \"NEGLIGIBLE\"\n}\n\nexport enum HarmSeverity {\n    // (undocumented)\n    HARM_SEVERITY_HIGH = \"HARM_SEVERITY_HIGH\",\n    // (undocumented)\n    HARM_SEVERITY_LOW = \"HARM_SEVERITY_LOW\",\n    // (undocumented)\n    HARM_SEVERITY_MEDIUM = \"HARM_SEVERITY_MEDIUM\",\n    // (undocumented)\n    HARM_SEVERITY_NEGLIGIBLE = \"HARM_SEVERITY_NEGLIGIBLE\",\n    // (undocumented)\n    HARM_SEVERITY_UNSPECIFIED = \"HARM_SEVERITY_UNSPECIFIED\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Part Interface - TypeScript\nDESCRIPTION: This code defines the `Part` interface. It represents a single part of a larger piece of content. It includes properties such as code execution result, executable code, file data, function call, function response, inline data, text, thought, and video metadata.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-web.api.md#_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Part {\n    codeExecutionResult?: CodeExecutionResult;\n    executableCode?: ExecutableCode;\n    fileData?: FileData;\n    functionCall?: FunctionCall;\n    functionResponse?: FunctionResponse;\n    inlineData?: Blob_2;\n    text?: string;\n    thought?: boolean;\n    videoMetadata?: VideoMetadata;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Harm Block Method Enum\nDESCRIPTION: Defines an enum called HarmBlockMethod. It represents methods for blocking content. The methods are described but not implemented in detail. It is used to control how the GenAI content is filtered for potentially harmful content.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-node.api.md#_snippet_56\n\n\n\n----------------------------------------\n\nTITLE: Defining Activity Handling Enums in TypeScript\nDESCRIPTION: Provides enumeration representing different types of activity handling states used within the API context. This enum categorizes how activities are managed or interrupted, with values like UNSPECIFIED, NO INTERRUPTION, and START OF ACTIVITY INTERRUPTS. It is used to standardize input or response values across activity-related features.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai.api.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport enum ActivityHandling {\n    ACTIVITY_HANDLING_UNSPECIFIED = \"ACTIVITY_HANDLING_UNSPECIFIED\",\n    NO_INTERRUPTION = \"NO_INTERRUPTION\",\n    START_OF_ACTIVITY_INTERRUPTS = \"START_OF_ACTIVITY_INTERRUPTS\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running a Google GenAI SDK Sample\nDESCRIPTION: Example command to execute a compiled sample file. This demonstrates how to run one of the sample files after completing the build process.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/sdk-samples/README.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnode build/generate_content_with_text.js\n```\n\n----------------------------------------\n\nTITLE: Defining the MediaModality Enum in TypeScript\nDESCRIPTION: Enumerates the types of media modalities supported or recognized by the Google GenAI API, such as audio, document, image, text, and video. `MODALITY_UNSPECIFIED` serves as a default or unknown state. Note that members are marked as undocumented.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai.api.md#_snippet_17\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport enum MediaModality {\n    // (undocumented)\n    AUDIO = \"AUDIO\",\n    // (undocumented)\n    DOCUMENT = \"DOCUMENT\",\n    // (undocumented)\n    IMAGE = \"IMAGE\",\n    // (undocumented)\n    MODALITY_UNSPECIFIED = \"MODALITY_UNSPECIFIED\",\n    // (undocumented)\n    TEXT = \"TEXT\",\n    // (undocumented)\n    VIDEO = \"VIDEO\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TunedModelInfo Interface\nDESCRIPTION: Defines an interface called TunedModelInfo. It represents information about a tuned model, including base model, create time, and update time.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-node.api.md#_snippet_87\n\n\n\n----------------------------------------\n\nTITLE: Defining SessionResumptionConfig interface in TypeScript\nDESCRIPTION: This code defines the `SessionResumptionConfig` interface, which includes optional properties `handle` and `transparent`. This is likely used to define how a session is resumed.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai.api.md#_snippet_45\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface SessionResumptionConfig {\n    handle?: string;\n    transparent?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: FileState Enum Describing File Processing Status in TypeScript\nDESCRIPTION: An enumeration listing possible file states including ACTIVE, FAILED, PROCESSING, and unspecified state, to indicate file lifecycle stages within the API ecosystem.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-node.api.md#_snippet_15\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport enum FileState {\n    ACTIVE = \"ACTIVE\",\n    FAILED = \"FAILED\",\n    PROCESSING = \"PROCESSING\",\n    STATE_UNSPECIFIED = \"STATE_UNSPECIFIED\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining VertexRagStore interface in TypeScript\nDESCRIPTION: This code defines the `VertexRagStore` interface, which includes optional properties related to RAG (Retrieval-Augmented Generation) configuration within Vertex AI, involving corpora, resources, retrieval configs, similarity and vector distance thresholds.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai.api.md#_snippet_75\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface VertexRagStore {\n    ragCorpora?: string[];\n    ragResources?: VertexRagStoreRagResource[];\n    ragRetrievalConfig?: RagRetrievalConfig;\n    similarityTopK?: number;\n    vectorDistanceThreshold?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RetrievalMetadata Interface - TypeScript\nDESCRIPTION: This code defines the `RetrievalMetadata` interface. It contains an optional property for the dynamic retrieval score from Google Search. It includes metadata about the retrieval process.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-web.api.md#_snippet_50\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface RetrievalMetadata {\n    googleSearchDynamicRetrievalScore?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ToolConfig interface in TypeScript\nDESCRIPTION: This code defines the `ToolConfig` interface, which includes an optional property for `functionCallingConfig`. It is related to the tool configuration with function calling.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai.api.md#_snippet_61\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ToolConfig {\n    functionCallingConfig?: FunctionCallingConfig;\n}\n```\n\n----------------------------------------\n\nTITLE: Interface Definitions for Cached Content and Usage Metadata in TypeScript\nDESCRIPTION: Defines interfaces describing cached content objects, including metadata and usage statistics such as audio duration, image count, text count, total token count, and video duration. These interfaces support the management and monitoring of cached data within generative AI workflows and are expected to be used as data models in caching APIs.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai.api.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface CachedContent {\n    createTime?: string;\n    displayName?: string;\n    expireTime?: string;\n    model?: string;\n    name?: string;\n    updateTime?: string;\n    usageMetadata?: CachedContentUsageMetadata;\n}\n\nexport interface CachedContentUsageMetadata {\n    audioDurationSeconds?: number;\n    imageCount?: number;\n    textCount?: number;\n    totalTokenCount?: number;\n    videoDurationSeconds?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ModelSelectionConfig Interface - TypeScript\nDESCRIPTION: This code defines the `ModelSelectionConfig` interface. It contains an optional property for feature selection preference. It allows configuring the model selection process based on desired features.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-web.api.md#_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ModelSelectionConfig {\n    featureSelectionPreference?: FeatureSelectionPreference;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining LiveServerToolCall Interface - TypeScript\nDESCRIPTION: This code defines the `LiveServerToolCall` interface. It contains an optional array of `FunctionCall` objects. This structure represents tool calls made by the live server.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-web.api.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface LiveServerToolCall {\n    functionCalls?: FunctionCall[];\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Cached Content CRUD Operations with TypeScript Classes\nDESCRIPTION: Defines a TypeScript class 'Caches' extending 'BaseModule' that encapsulates CRUD operations for cached content management via API calls. It provides asynchronous methods for creating, retrieving, updating, deleting, and listing cached content entries. This class requires an 'ApiClient' instance for HTTP requests and uses typed parameter objects for method calls. It is designed to integrate with the Google GenAI caching backend.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-node.api.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class Caches extends BaseModule {\n    constructor(apiClient: ApiClient);\n    create(params: types.CreateCachedContentParameters): Promise<types.CachedContent>;\n    delete(params: types.DeleteCachedContentParameters): Promise<types.DeleteCachedContentResponse>;\n    get(params: types.GetCachedContentParameters): Promise<types.CachedContent>;\n    list: (params?: types.ListCachedContentsParameters) => Promise<Pager<types.CachedContent>>;\n    update(params: types.UpdateCachedContentParameters): Promise<types.CachedContent>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Type Enum\nDESCRIPTION: Defines an enum called Type. It defines the different data types, such as ARRAY, BOOLEAN, INTEGER, NUMBER, OBJECT, and STRING, which are utilized for schema definition.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-node.api.md#_snippet_89\n\n\n\n----------------------------------------\n\nTITLE: Defining MediaResolution Enum - TypeScript\nDESCRIPTION: This code defines the `MediaResolution` enum. It specifies different resolutions for media, including high, low, and medium. It sets the quality level of the media content.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-web.api.md#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nexport enum MediaResolution {\n    // (undocumented)\n    MEDIA_RESOLUTION_HIGH = \"MEDIA_RESOLUTION_HIGH\",\n    // (undocumented)\n    MEDIA_RESOLUTION_LOW = \"MEDIA_RESOLUTION_LOW\",\n    // (undocumented)\n    MEDIA_RESOLUTION_MEDIUM = \"MEDIA_RESOLUTION_MEDIUM\",\n    // (undocumented)\n    MEDIA_RESOLUTION_UNSPECIFIED = \"MEDIA_RESOLUTION_UNSPECIFIED\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RagRetrievalConfigRanking Interface - TypeScript\nDESCRIPTION: This code defines the `RagRetrievalConfigRanking` interface. It contains optional properties for the LLM ranker and the rank service. It enables configuring the ranking of retrieval results.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-web.api.md#_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface RagRetrievalConfigRanking {\n    llmRanker?: RagRetrievalConfigRankingLlmRanker;\n    rankService?: RagRetrievalConfigRankingRankService;\n}\n```\n\n----------------------------------------\n\nTITLE: GenerateImagesConfig Interface Specifying Image Generation Options in TypeScript\nDESCRIPTION: Defines configuration options for image generation such as aspect ratio, guidance scale, watermark addition, prompt enhancements, number of images to generate, output compression and encoding, safety filter levels, seeding for randomness, and language settings, allowing comprehensive customization of image generation requests.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-node.api.md#_snippet_30\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface GenerateImagesConfig {\n    abortSignal?: AbortSignal;\n    addWatermark?: boolean;\n    aspectRatio?: string;\n    enhancePrompt?: boolean;\n    guidanceScale?: number;\n    httpOptions?: HttpOptions;\n    includeRaiReason?: boolean;\n    includeSafetyAttributes?: boolean;\n    language?: ImagePromptLanguage;\n    negativePrompt?: string;\n    numberOfImages?: number;\n    outputCompressionQuality?: number;\n    outputGcsUri?: string;\n    outputMimeType?: string;\n    personGeneration?: PersonGeneration;\n    safetyFilterLevel?: SafetyFilterLevel;\n    seed?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Operations Class and Operation Parameters for Video Generation\nDESCRIPTION: TypeScript implementations for handling long-running operations, particularly for video generation tasks, including parameter interfaces and a class that extends BaseModule.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-node.api.md#_snippet_49\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface OperationGetParameters {\n    config?: GetOperationConfig;\n    operation: GenerateVideosOperation;\n}\n\nexport class Operations extends BaseModule {\n    constructor(apiClient: ApiClient);\n    getVideosOperation(parameters: types.OperationGetParameters): Promise<types.GenerateVideosOperation>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SpeechConfig interface in TypeScript\nDESCRIPTION: This code defines the `SpeechConfig` interface, which includes optional properties for `languageCode` and `voiceConfig`. It allows to set the configurations for speech functionality.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai.api.md#_snippet_48\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface SpeechConfig {\n    languageCode?: string;\n    voiceConfig?: VoiceConfig;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining VertexRagStore Interface\nDESCRIPTION: Defines an interface called VertexRagStore. It configures a retrieval augmented generation (RAG) store. It includes properties for various parameters and retrieval configuration.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-node.api.md#_snippet_98\n\n\n\n----------------------------------------\n\nTITLE: Defining ToolListUnion Type\nDESCRIPTION: Defines a type alias named ToolListUnion. This type alias is an array of Tool, providing flexibility in structuring the list of tools.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-node.api.md#_snippet_84\n\n\n\n----------------------------------------\n\nTITLE: Defining the MediaResolution Enum in TypeScript\nDESCRIPTION: Enumerates the possible resolution settings for media processed by the Google GenAI API, including low, medium, and high options. `MEDIA_RESOLUTION_UNSPECIFIED` is the default or unknown state. Note that members are marked as undocumented.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai.api.md#_snippet_18\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport enum MediaResolution {\n    // (undocumented)\n    MEDIA_RESOLUTION_HIGH = \"MEDIA_RESOLUTION_HIGH\",\n    // (undocumented)\n    MEDIA_RESOLUTION_LOW = \"MEDIA_RESOLUTION_LOW\",\n    // (undocumented)\n    MEDIA_RESOLUTION_MEDIUM = \"MEDIA_RESOLUTION_MEDIUM\",\n    // (undocumented)\n    MEDIA_RESOLUTION_UNSPECIFIED = \"MEDIA_RESOLUTION_UNSPECIFIED\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RagRetrievalConfigRankingRankService Interface - TypeScript\nDESCRIPTION: This code defines the `RagRetrievalConfigRankingRankService` interface. It contains an optional property for the model name. It specifies the rank service to be used for ranking.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-web.api.md#_snippet_42\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface RagRetrievalConfigRankingRankService {\n    modelName?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: GenerateImagesParameters Interface Modeling Input for Image Generation in TypeScript\nDESCRIPTION: Specifies parameters including the model name, a textual prompt, and optional configuration settings for generating images, structuring input for image generation API calls.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-node.api.md#_snippet_31\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface GenerateImagesParameters {\n    config?: GenerateImagesConfig;\n    model: string;\n    prompt: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining VertexRagStoreRagResource Interface\nDESCRIPTION: Defines an interface called VertexRagStoreRagResource. It describes a resource to be used by a RAG store. It contains the RAG corpus, and file IDs.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-node.api.md#_snippet_99\n\n\n\n----------------------------------------\n\nTITLE: Defining RagRetrievalConfigHybridSearch Interface - TypeScript\nDESCRIPTION: This code defines the `RagRetrievalConfigHybridSearch` interface. It contains an optional property for alpha, which is the weight of the vector search results. It allows for hybrid search configurations.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-web.api.md#_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface RagRetrievalConfigHybridSearch {\n    alpha?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PartListUnion Type - TypeScript\nDESCRIPTION: This code defines the `PartListUnion` type, which represents either an array of `PartUnion` elements or a single `PartUnion` element. This allows for flexibility in handling content parts.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-web.api.md#_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\nexport type PartListUnion = PartUnion[] | PartUnion;\n```\n\n----------------------------------------\n\nTITLE: Defining LiveServerToolCallCancellation Interface - TypeScript\nDESCRIPTION: This code defines the `LiveServerToolCallCancellation` interface. It contains an optional array of strings representing the IDs of tool calls to be cancelled. It facilitates the cancellation of active tool calls.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-web.api.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface LiveServerToolCallCancellation {\n    ids?: string[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the Outcome Enum in TypeScript\nDESCRIPTION: Enumerates possible outcomes for operations or processes within the Google GenAI API, such as success (`OUTCOME_OK`), failure (`OUTCOME_FAILED`), timeout (`OUTCOME_DEADLINE_EXCEEDED`), or an unspecified state. Note that members are marked as undocumented.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai.api.md#_snippet_25\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport enum Outcome {\n    // (undocumented)\n    OUTCOME_DEADLINE_EXCEEDED = \"OUTCOME_DEADLINE_EXCEEDED\",\n    // (undocumented)\n    OUTCOME_FAILED = \"OUTCOME_FAILED\",\n    // (undocumented)\n    OUTCOME_OK = \"OUTCOME_OK\",\n    // (undocumented)\n    OUTCOME_UNSPECIFIED = \"OUTCOME_UNSPECIFIED\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RagRetrievalConfigRankingLlmRanker Interface - TypeScript\nDESCRIPTION: This code defines the `RagRetrievalConfigRankingLlmRanker` interface. It contains an optional property for the model name. It specifies the LLM to be used for ranking.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-web.api.md#_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface RagRetrievalConfigRankingLlmRanker {\n    modelName?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TurnCoverage enum in TypeScript\nDESCRIPTION: This code defines an enum named `TurnCoverage` with options `TURN_COVERAGE_UNSPECIFIED`, `TURN_INCLUDES_ALL_INPUT`, and `TURN_INCLUDES_ONLY_ACTIVITY`. It defines turn coverage for different input activities.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai.api.md#_snippet_65\n\nLANGUAGE: typescript\nCODE:\n```\nexport enum TurnCoverage {\n    // (undocumented)\n    TURN_COVERAGE_UNSPECIFIED = \"TURN_COVERAGE_UNSPECIFIED\",\n    // (undocumented)\n    TURN_INCLUDES_ALL_INPUT = \"TURN_INCLUDES_ALL_INPUT\",\n    // (undocumented)\n    TURN_INCLUDES_ONLY_ACTIVITY = \"TURN_INCLUDES_ONLY_ACTIVITY\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing and Running GenAI TypeScript Web Sample\nDESCRIPTION: Commands to install dependencies and start the development server for the GenAI TypeScript web sample application\nSOURCE: https://github.com/googleapis/js-genai/blob/main/sdk-samples/web/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Defining UpdateCachedContentConfig interface in TypeScript\nDESCRIPTION: This code defines the `UpdateCachedContentConfig` interface, which includes optional properties for `abortSignal`, `expireTime`, `httpOptions`, and `ttl`. This configuration is to update the cached content.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai.api.md#_snippet_67\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface UpdateCachedContentConfig {\n    abortSignal?: AbortSignal;\n    expireTime?: string;\n    httpOptions?: HttpOptions;\n    ttl?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: FileData Interface with URI and MIME Type in TypeScript\nDESCRIPTION: A simple interface for referencing file data via a file URI and an optional MIME type, used likely for upload or resource identification.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-node.api.md#_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface FileData {\n    fileUri?: string;\n    mimeType?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Media and Modality Enums for Content Processing\nDESCRIPTION: TypeScript enums defining different media types, resolutions, and modalities for content processing in the Google AI API, used to specify the type of media being processed.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-node.api.md#_snippet_46\n\nLANGUAGE: typescript\nCODE:\n```\nexport enum MediaModality {\n    // (undocumented)\n    AUDIO = \"AUDIO\",\n    // (undocumented)\n    DOCUMENT = \"DOCUMENT\",\n    // (undocumented)\n    IMAGE = \"IMAGE\",\n    // (undocumented)\n    MODALITY_UNSPECIFIED = \"MODALITY_UNSPECIFIED\",\n    // (undocumented)\n    TEXT = \"TEXT\",\n    // (undocumented)\n    VIDEO = \"VIDEO\"\n}\n\nexport enum MediaResolution {\n    // (undocumented)\n    MEDIA_RESOLUTION_HIGH = \"MEDIA_RESOLUTION_HIGH\",\n    // (undocumented)\n    MEDIA_RESOLUTION_LOW = \"MEDIA_RESOLUTION_LOW\",\n    // (undocumented)\n    MEDIA_RESOLUTION_MEDIUM = \"MEDIA_RESOLUTION_MEDIUM\",\n    // (undocumented)\n    MEDIA_RESOLUTION_UNSPECIFIED = \"MEDIA_RESOLUTION_UNSPECIFIED\"\n}\n\nexport enum Modality {\n    // (undocumented)\n    AUDIO = \"AUDIO\",\n    // (undocumented)\n    IMAGE = \"IMAGE\",\n    // (undocumented)\n    MODALITY_UNSPECIFIED = \"MODALITY_UNSPECIFIED\",\n    // (undocumented)\n    TEXT = \"TEXT\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TurnCoverage Enum\nDESCRIPTION: Defines an enum called TurnCoverage. It defines the scope or coverage of a 'turn' or interaction turn. The enum values are TURN_COVERAGE_UNSPECIFIED, TURN_INCLUDES_ALL_INPUT, and TURN_INCLUDES_ONLY_ACTIVITY.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-node.api.md#_snippet_88\n\n\n\n----------------------------------------\n\nTITLE: Defining Endpoint Interface in TypeScript\nDESCRIPTION: Interface for specifying a model endpoint with optional deployedModelId and name properties.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-web.api.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface Endpoint {\n    deployedModelId?: string;\n    name?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a SpeechConfigUnion Type\nDESCRIPTION: Defines a type alias called SpeechConfigUnion. It is a union type, which can either be a SpeechConfig object or a string, providing flexibility in the type of speech configuration parameters.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-node.api.md#_snippet_70\n\n\n\n----------------------------------------\n\nTITLE: Defining Session Resumption Config Interface\nDESCRIPTION: Defines an interface called SessionResumptionConfig. It is likely used for configuring session behavior in scenarios such as resuming interrupted sessions. It includes configuration properties such as handle and transparent settings.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-node.api.md#_snippet_66\n\n\n\n----------------------------------------\n\nTITLE: Defining TunedModelInfo interface in TypeScript\nDESCRIPTION: This code defines the `TunedModelInfo` interface, which includes optional properties for `baseModel`, `createTime`, and `updateTime`. These are the basic information of the tuned model.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai.api.md#_snippet_64\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface TunedModelInfo {\n    baseModel?: string;\n    createTime?: string;\n    updateTime?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining UpscaleImageParameters interface in TypeScript\nDESCRIPTION: This code defines the `UpscaleImageParameters` interface, which includes properties for `config`, `image`, `model`, and `upscaleFactor`. It is the parameters to upscale an image.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai.api.md#_snippet_72\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface UpscaleImageParameters {\n    config?: UpscaleImageConfig;\n    image: Image_2;\n    model: string;\n    upscaleFactor: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining UpscaleImageParameters Interface\nDESCRIPTION: Defines an interface called UpscaleImageParameters. It defines the parameters for an upscale image operation, taking a config, the input image, the model to use, and an upscale factor. It does not execute code.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-node.api.md#_snippet_95\n\n\n\n----------------------------------------\n\nTITLE: Defining SlidingWindow interface in TypeScript\nDESCRIPTION: This code defines the `SlidingWindow` interface, which includes optional properties for `targetTokens`. It is a data structure for the sliding window config with tokens.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai.api.md#_snippet_47\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface SlidingWindow {\n    targetTokens?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Segment Interface\nDESCRIPTION: Defines an interface called Segment. It represents a segment of text or other data, such as the start and end indices, and the part index along with text content. It models the segments which may represent sections of longer content.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-node.api.md#_snippet_63\n\n\n\n----------------------------------------\n\nTITLE: Defining a Sliding Window Interface\nDESCRIPTION: Defines an interface called SlidingWindow. It models parameters for a sliding window. It contains the targetTokens property which allows setting the target number of tokens.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-node.api.md#_snippet_68\n\n\n\n----------------------------------------\n\nTITLE: Defining MediaModality Enum - TypeScript\nDESCRIPTION: This code defines the `MediaModality` enum. It specifies different types of media, including audio, document, image, text, and video. It categorizes the modality of the media content.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-web.api.md#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nexport enum MediaModality {\n    // (undocumented)\n    AUDIO = \"AUDIO\",\n    // (undocumented)\n    DOCUMENT = \"DOCUMENT\",\n    // (undocumented)\n    IMAGE = \"IMAGE\",\n    // (undocumented)\n    MODALITY_UNSPECIFIED = \"MODALITY_UNSPECIFIED\",\n    // (undocumented)\n    TEXT = \"TEXT\",\n    // (undocumented)\n    VIDEO = \"VIDEO\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TrafficType enum in TypeScript\nDESCRIPTION: This code defines an enum named `TrafficType` with options `ON_DEMAND`, `PROVISIONED_THROUGHPUT`, and `TRAFFIC_TYPE_UNSPECIFIED`. It defines the type of traffic.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai.api.md#_snippet_62\n\nLANGUAGE: typescript\nCODE:\n```\nexport enum TrafficType {\n    // (undocumented)\n    ON_DEMAND = \"ON_DEMAND\",\n    // (undocumented)\n    PROVISIONED_THROUGHPUT = \"PROVISIONED_THROUGHPUT\",\n    // (undocumented)\n    TRAFFIC_TYPE_UNSPECIFIED = \"TRAFFIC_TYPE_UNSPECIFIED\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Modality Enum - TypeScript\nDESCRIPTION: This code defines the `Modality` enum. It specifies different modalities, including audio, image, and text. It categorizes the overall type of data being used.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-web.api.md#_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nexport enum Modality {\n    // (undocumented)\n    AUDIO = \"AUDIO\",\n    // (undocumented)\n    IMAGE = \"IMAGE\",\n    // (undocumented)\n    MODALITY_UNSPECIFIED = \"MODALITY_UNSPECIFIED\",\n    // (undocumented)\n    TEXT = \"TEXT\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Segment interface in TypeScript\nDESCRIPTION: This code defines the `Segment` interface, which includes optional properties for `endIndex`, `partIndex`, `startIndex`, and `text`. It represents a segment of text, likely within a larger document or conversation.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai.api.md#_snippet_42\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Segment {\n    endIndex?: number;\n    partIndex?: number;\n    startIndex?: number;\n    text?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SubjectReferenceType Enum\nDESCRIPTION: Defines an enum named SubjectReferenceType which is used for specifying the types of subjects that may be referenced. The enum contains values such as SUBJECT_TYPE_ANIMAL, SUBJECT_TYPE_DEFAULT, SUBJECT_TYPE_PERSON, and SUBJECT_TYPE_PRODUCT.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-node.api.md#_snippet_76\n\n\n\n----------------------------------------\n\nTITLE: Defining Harm Categories Enum\nDESCRIPTION: Defines an enum named HarmCategory, which represents the categories of harm that a content may be flagged for. The enum consists of several possible values, though their internal workings are not described in the code. It serves to categorize generated content based on its potential harm.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-node.api.md#_snippet_55\n\n\n\n----------------------------------------\n\nTITLE: Defining TokensInfo Interface\nDESCRIPTION: Defines an interface called TokensInfo. It represents information about tokens. It includes properties such as role, token IDs, and the tokens themselves. Used to track and process the tokens.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-node.api.md#_snippet_80\n\n\n\n----------------------------------------\n\nTITLE: Defining RawReferenceImage Interface - TypeScript\nDESCRIPTION: This code defines the `RawReferenceImage` interface. It contains optional properties for the reference ID, a reference image (`Image_2`), and a reference type. It represents a raw image used as a reference.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-web.api.md#_snippet_43\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface RawReferenceImage {\n    referenceId?: number;\n    referenceImage?: Image_2;\n    referenceType?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PartUnion Type - TypeScript\nDESCRIPTION: This code defines the `PartUnion` type, which represents either a `Part` object or a string. This allows for a flexible structure of content parts.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-web.api.md#_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\nexport type PartUnion = Part | string;\n```\n\n----------------------------------------\n\nTITLE: Defining Model Interface - TypeScript\nDESCRIPTION: This code defines the `Model` interface. It includes properties like description, display name, endpoints, token limits, labels, model name, supported actions, tuned model information, and version. It represents the structure of a generative AI model.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-web.api.md#_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Model {\n    description?: string;\n    displayName?: string;\n    endpoints?: Endpoint[];\n    inputTokenLimit?: number;\n    labels?: Record<string, string>;\n    name?: string;\n    outputTokenLimit?: number;\n    supportedActions?: string[];\n    tunedModelInfo?: TunedModelInfo;\n    version?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining EndSensitivity Enum for Sensitivity Levels in TypeScript\nDESCRIPTION: This enum specifies sensitivity levels as string constants to categorize end-level sensitivities (high, low, unspecified) within API responses or configurations. The values help standardize sensitivity handling across the library.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-node.api.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport enum EndSensitivity {\n    END_SENSITIVITY_HIGH = \"END_SENSITIVITY_HIGH\",\n    END_SENSITIVITY_LOW = \"END_SENSITIVITY_LOW\",\n    END_SENSITIVITY_UNSPECIFIED = \"END_SENSITIVITY_UNSPECIFIED\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Harm Block Threshold Enum\nDESCRIPTION: Defines an enum called HarmBlockThreshold which is used to indicate the level of sensitivity for blocking content. It provides multiple values but does not explain implementation details. It is utilized to define the sensitivity of content filtering.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-node.api.md#_snippet_57\n\n\n\n----------------------------------------\n\nTITLE: Defining StyleReferenceConfig interface in TypeScript\nDESCRIPTION: This code defines the `StyleReferenceConfig` interface, which includes an optional property for `styleDescription`. It provides description of the style reference.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai.api.md#_snippet_50\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface StyleReferenceConfig {\n    styleDescription?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PrebuiltVoiceConfig Interface - TypeScript\nDESCRIPTION: This code defines the `PrebuiltVoiceConfig` interface. It contains an optional property for the voice name. This allows specification of pre-built voice configurations.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-web.api.md#_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface PrebuiltVoiceConfig {\n    voiceName?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: FileStatus Interface Detailing File Error Codes and Messages in TypeScript\nDESCRIPTION: This interface encapsulates error information related to file processing, including an optional numeric code, an array of detailed records, and a message string describing the error.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-node.api.md#_snippet_16\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface FileStatus {\n    code?: number;\n    details?: Record<string, unknown>[];\n    message?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining UpdateCachedContentParameters Interface\nDESCRIPTION: Defines an interface called UpdateCachedContentParameters. It defines the parameters for updating cached content. It contains a config parameter and a name for the cached item.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-node.api.md#_snippet_91\n\n\n\n----------------------------------------\n\nTITLE: Defining VertexAISearch interface in TypeScript\nDESCRIPTION: This code defines the `VertexAISearch` interface, which includes optional properties for `datastore` and `engine`. This is related to Vertex AI Search.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai.api.md#_snippet_74\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface VertexAISearch {\n    datastore?: string;\n    engine?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining VideoMetadata interface in TypeScript\nDESCRIPTION: This code defines the `VideoMetadata` interface, which includes optional properties for `endOffset` and `startOffset`. It is video metadata information.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai.api.md#_snippet_78\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface VideoMetadata {\n    endOffset?: string;\n    startOffset?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Transcription Interface\nDESCRIPTION: Defines an interface named Transcription. It models a transcription object. It has properties representing whether the transcription is finished and includes the transcribed text.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-node.api.md#_snippet_86\n\n\n\n----------------------------------------\n\nTITLE: Defining a setDefaultBaseUrls Function\nDESCRIPTION: Defines a function called setDefaultBaseUrls which is used to set the base URLs. The function receives a parameter of BaseUrlParameters. This function does not contain implementation detail.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-node.api.md#_snippet_67\n\n\n\n----------------------------------------\n\nTITLE: Defining ModalityTokenCount Interface - TypeScript\nDESCRIPTION: This code defines the `ModalityTokenCount` interface. It contains optional properties for the media modality and the token count. It captures the token count for a specific modality of media.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-web.api.md#_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ModalityTokenCount {\n    modality?: MediaModality;\n    tokenCount?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Start Sensitivity Enum\nDESCRIPTION: Defines an enum called StartSensitivity. It is used to indicate the sensitivity to the start of a conversation or process. The enum values are START_SENSITIVITY_HIGH, START_SENSITIVITY_LOW, and START_SENSITIVITY_UNSPECIFIED, which define the different sensitivity levels. This is an enumeration.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-node.api.md#_snippet_71\n\n\n\n----------------------------------------\n\nTITLE: Defining TestTableFile Interface\nDESCRIPTION: Defines an interface called TestTableFile. It is used for test table files. It includes properties to hold the comment, parameter names, the method of the test, and the test table. This represents a data structure for test definitions.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-node.api.md#_snippet_77\n\n\n\n----------------------------------------\n\nTITLE: GenerateVideosOperation Interface Modeling Ongoing Video Generation Status in TypeScript\nDESCRIPTION: Represents the status of a video generation operation including completion flag, error details if any, metadata information, operation name, and final response containing generated videos. Used to track asynchronous video generation requests.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-node.api.md#_snippet_34\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface GenerateVideosOperation {\n    done?: boolean;\n    error?: Record<string, unknown>;\n    metadata?: Record<string, unknown>;\n    name?: string;\n    response?: GenerateVideosResponse;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining VideoMetadata Interface\nDESCRIPTION: Defines an interface called VideoMetadata. It provides metadata for a video, specifying the start and end offsets.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-node.api.md#_snippet_101\n\n\n\n----------------------------------------\n\nTITLE: Defining TrafficType Enum\nDESCRIPTION: Defines an enum called TrafficType. This is an enumeration that defines various traffic types such as ON_DEMAND and PROVISIONED_THROUGHPUT. It does not include executable statements or functionality.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-node.api.md#_snippet_85\n\n\n\n----------------------------------------\n\nTITLE: Defining LiveServerSessionResumptionUpdate Interface - TypeScript\nDESCRIPTION: This code defines the `LiveServerSessionResumptionUpdate` interface. It contains optional properties to track the last consumed client message index, a new handle, and whether the session is resumable. This is used for managing session resumption in live server scenarios.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-web.api.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface LiveServerSessionResumptionUpdate {\n    lastConsumedClientMessageIndex?: string;\n    newHandle?: string;\n    resumable?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Transcription interface in TypeScript\nDESCRIPTION: This code defines the `Transcription` interface, which includes optional boolean `finished` property and string `text` property. This is used to represent a transcription object.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai.api.md#_snippet_63\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Transcription {\n    finished?: boolean;\n    text?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: GenerateVideosConfig Interface for Video Generation Customization in TypeScript\nDESCRIPTION: Defines customizable options for video generation such as aspect ratio, duration, frame rate, prompt enhancements, output locations, resolution, seed for randomness, negative prompts, and pubsub topic for notifications, supporting detailed control of video synthesis requests.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-node.api.md#_snippet_33\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface GenerateVideosConfig {\n    abortSignal?: AbortSignal;\n    aspectRatio?: string;\n    durationSeconds?: number;\n    enhancePrompt?: boolean;\n    fps?: number;\n    httpOptions?: HttpOptions;\n    negativePrompt?: string;\n    numberOfVideos?: number;\n    outputGcsUri?: string;\n    personGeneration?: string;\n    pubsubTopic?: string;\n    resolution?: string;\n    seed?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: GenerationConfigRoutingConfigAutoRoutingMode Interface for Automatic Model Routing Preference in TypeScript\nDESCRIPTION: Defines an optional modelRoutingPreference string with allowed values to indicate quality, cost prioritization, or balanced routing in automatic mode configurations.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-node.api.md#_snippet_39\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface GenerationConfigRoutingConfigAutoRoutingMode {\n    modelRoutingPreference?: 'UNKNOWN' | 'PRIORITIZE_QUALITY' | 'BALANCED' | 'PRIORITIZE_COST';\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TestTableItem Interface\nDESCRIPTION: Defines an interface called TestTableItem. It models the items contained within the test table. It includes properties for exceptions, parameter overrides, and other configuration options.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-node.api.md#_snippet_78\n\n\n\n----------------------------------------\n\nTITLE: Defining ReplayFile Interface - TypeScript\nDESCRIPTION: This code defines the `ReplayFile` interface. It contains optional properties for interactions and a replay ID. It models a replay file for interaction tracing.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-web.api.md#_snippet_45\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ReplayFile {\n    // (undocumented)\n    interactions?: ReplayInteraction[];\n    // (undocumented)\n    replayId?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: GetCachedContentConfig Interface for Cached Content Fetch Configuration in TypeScript\nDESCRIPTION: Allows optional abort signal and HTTP options to be specified for retrieving cached content from the API, enabling request cancellation and configuration for fetch operations.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-node.api.md#_snippet_41\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface GetCachedContentConfig {\n    abortSignal?: AbortSignal;\n    httpOptions?: HttpOptions;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SubjectReferenceImage interface in TypeScript\nDESCRIPTION: This code defines the `SubjectReferenceImage` interface, which includes optional properties for `config`, `referenceId`, `referenceImage`, and `referenceType`. It is related to the subject reference image.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai.api.md#_snippet_53\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface SubjectReferenceImage {\n    config?: SubjectReferenceConfig;\n    referenceId?: number;\n    referenceImage?: Image_2;\n    referenceType?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TestTableItem interface in TypeScript\nDESCRIPTION: This code defines the `TestTableItem` interface, which includes optional properties for various conditions and overrides related to testing. These settings define how test table data behaves.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai.api.md#_snippet_56\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface TestTableItem {\n    exceptionIfMldev?: string;\n    exceptionIfVertex?: string;\n    hasUnion?: boolean;\n    ignoreKeys?: string[];\n    name?: string;\n    overrideReplayId?: string;\n    parameters?: Record<string, unknown>;\n    skipInApiMode?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ExecutableCode Interface in TypeScript\nDESCRIPTION: Interface for representing executable code snippets with optional code string and language property.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-web.api.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface ExecutableCode {\n    code?: string;\n    language?: Language;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining VertexRagStoreRagResource interface in TypeScript\nDESCRIPTION: This code defines the `VertexRagStoreRagResource` interface, which includes optional properties for `ragCorpus` and `ragFileIds`. This resources defines how the RAG (Retrieval-Augmented Generation) store retrieves corpus.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai.api.md#_snippet_76\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface VertexRagStoreRagResource {\n    ragCorpus?: string;\n    ragFileIds?: string[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SubjectReferenceConfig interface in TypeScript\nDESCRIPTION: This code defines the `SubjectReferenceConfig` interface, which includes optional properties for `subjectDescription` and `subjectType`. It is the configuration for the subject reference.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai.api.md#_snippet_52\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface SubjectReferenceConfig {\n    subjectDescription?: string;\n    subjectType?: SubjectReferenceType;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Video Interface\nDESCRIPTION: Defines an interface called Video. It describes a video data structure, which includes the MIME type, a URI, and video bytes. This is a representation of a video asset.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-node.api.md#_snippet_100\n\n\n\n----------------------------------------\n\nTITLE: Mask Reference Interfaces and Enums for Image Processing\nDESCRIPTION: TypeScript interfaces and enum for configuring mask references in image processing tasks, including mask dilation, mode settings, and segmentation classes.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-node.api.md#_snippet_45\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface MaskReferenceConfig {\n    maskDilation?: number;\n    maskMode?: MaskReferenceMode;\n    segmentationClasses?: number[];\n}\n\nexport interface MaskReferenceImage {\n    config?: MaskReferenceConfig;\n    referenceId?: number;\n    referenceImage?: Image_2;\n    referenceType?: string;\n}\n\nexport enum MaskReferenceMode {\n    // (undocumented)\n    MASK_MODE_BACKGROUND = \"MASK_MODE_BACKGROUND\",\n    // (undocumented)\n    MASK_MODE_DEFAULT = \"MASK_MODE_DEFAULT\",\n    // (undocumented)\n    MASK_MODE_FOREGROUND = \"MASK_MODE_FOREGROUND\",\n    // (undocumented)\n    MASK_MODE_SEMANTIC = \"MASK_MODE_SEMANTIC\",\n    // (undocumented)\n    MASK_MODE_USER_PROVIDED = \"MASK_MODE_USER_PROVIDED\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ReplayInteraction Interface - TypeScript\nDESCRIPTION: This code defines the `ReplayInteraction` interface. It contains optional properties for request and response objects. It models interactions within a replay file.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-web.api.md#_snippet_46\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ReplayInteraction {\n    // (undocumented)\n    request?: ReplayRequest;\n    // (undocumented)\n    response?: ReplayResponse;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining API Data Structures and Enums TypeScript\nDESCRIPTION: This snippet declares multiple TypeScript interfaces and enums representing configuration options, data models, and typed constants used throughout the Google GenAI API. It includes activities, audio transcription settings, cached content metadata, content embeddings, citation information, and control reference types. These definitions establish the expected shape of data exchanged with the API and enforce usage constraints.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-node.api.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface ActivityEnd {}\nexport enum ActivityHandling {\n    ACTIVITY_HANDLING_UNSPECIFIED = \"ACTIVITY_HANDLING_UNSPECIFIED\",\n    NO_INTERRUPTION = \"NO_INTERRUPTION\",\n    START_OF_ACTIVITY_INTERRUPTS = \"START_OF_ACTIVITY_INTERRUPTS\"\n}\nexport interface ActivityStart {}\nexport interface AudioTranscriptionConfig {}\nexport interface AutomaticActivityDetection {\n    disabled?: boolean;\n    endOfSpeechSensitivity?: EndSensitivity;\n    prefixPaddingMs?: number;\n    silenceDurationMs?: number;\n    startOfSpeechSensitivity?: StartSensitivity;\n}\nexport interface BaseUrlParameters {\n    geminiUrl?: string;\n    vertexUrl?: string;\n}\nexport interface Blob_2 {\n    data?: string;\n    mimeType?: string;\n}\nexport { Blob_2 as Blob }\nexport type BlobImageUnion = Blob_2;\nexport enum BlockedReason {\n    BLOCKED_REASON_UNSPECIFIED = \"BLOCKED_REASON_UNSPECIFIED\",\n    BLOCKLIST = \"BLOCKLIST\",\n    OTHER = \"OTHER\",\n    PROHIBITED_CONTENT = \"PROHIBITED_CONTENT\",\n    SAFETY = \"SAFETY\"\n}\nexport interface CachedContent {\n    createTime?: string;\n    displayName?: string;\n    expireTime?: string;\n    model?: string;\n    name?: string;\n    updateTime?: string;\n    usageMetadata?: CachedContentUsageMetadata;\n}\nexport interface CachedContentUsageMetadata {\n    audioDurationSeconds?: number;\n    imageCount?: number;\n    textCount?: number;\n    totalTokenCount?: number;\n    videoDurationSeconds?: number;\n}\nexport interface Candidate {\n    avgLogprobs?: number;\n    citationMetadata?: CitationMetadata;\n    content?: Content;\n    finishMessage?: string;\n    finishReason?: FinishReason;\n    groundingMetadata?: GroundingMetadata;\n    index?: number;\n    logprobsResult?: LogprobsResult;\n    safetyRatings?: SafetyRating[];\n    tokenCount?: number;\n}\nexport interface Citation {\n    endIndex?: number;\n    license?: string;\n    publicationDate?: GoogleTypeDate;\n    startIndex?: number;\n    title?: string;\n    uri?: string;\n}\nexport interface CitationMetadata {\n    citations?: Citation[];\n}\nexport interface CodeExecutionResult {\n    outcome?: Outcome;\n    output?: string;\n}\nexport interface ComputeTokensConfig {\n    abortSignal?: AbortSignal;\n    httpOptions?: HttpOptions;\n}\nexport interface ComputeTokensParameters {\n    config?: ComputeTokensConfig;\n    contents: ContentListUnion;\n    model: string;\n}\nexport interface Content {\n    parts?: Part[];\n    role?: string;\n}\nexport interface ContentEmbedding {\n    statistics?: ContentEmbeddingStatistics;\n    values?: number[];\n}\nexport interface ContentEmbeddingStatistics {\n    tokenCount?: number;\n    truncated?: boolean;\n}\nexport interface ContextWindowCompressionConfig {\n    slidingWindow?: SlidingWindow;\n    triggerTokens?: string;\n}\nexport interface ControlReferenceConfig {\n    controlType?: ControlReferenceType;\n    enableControlImageComputation?: boolean;\n}\nexport interface ControlReferenceImage {\n    config?: ControlReferenceConfig;\n    referenceId?: number;\n    referenceImage?: Image_2;\n    referenceType?: string;\n}\nexport enum ControlReferenceType {\n    CONTROL_TYPE_CANNY = \"CONTROL_TYPE_CANNY\",\n    CONTROL_TYPE_DEFAULT = \"CONTROL_TYPE_DEFAULT\",\n    CONTROL_TYPE_FACE_MESH = \"CONTROL_TYPE_FACE_MESH\",\n    CONTROL_TYPE_SCRIBBLE = \"CONTROL_TYPE_SCRIBBLE\"\n}\nexport interface CountTokensConfig {\n    abortSignal?: AbortSignal;\n    generationConfig?: GenerationConfig;\n    httpOptions?: HttpOptions;\n    systemInstruction?: ContentUnion;\n    tools?: Tool[];\n}\nexport interface CountTokensParameters {\n    config?: CountTokensConfig;\n    contents: ContentListUnion;\n    model: string;\n}\nexport interface CreateCachedContentConfig {\n    abortSignal?: AbortSignal;\n    contents?: ContentListUnion;\n    displayName?: string;\n    expireTime?: string;\n    httpOptions?: HttpOptions;\n    systemInstruction?: ContentUnion;\n    toolConfig?: ToolConfig;\n    tools?: Tool[];\n    ttl?: string;\n}\nexport interface CreateCachedContentParameters {\n    config?: CreateCachedContentConfig;\n    model: string;\n}\nexport interface CreateChatParameters {\n    config?: GenerateContentConfig;\n    history?: Content[];\n    model: string;\n}\nexport interface CreateFileConfig {\n    abortSignal?: AbortSignal;\n    httpOptions?: HttpOptions;\n}\nexport interface CreateFileParameters {\n    config?: CreateFileConfig;\n    file: File_2;\n}\nexport interface DeleteCachedContentConfig {\n    abortSignal?: AbortSignal;\n    httpOptions?: HttpOptions;\n}\nexport interface DeleteCachedContentParameters {\n    config?: DeleteCachedContentConfig;\n    name: string;\n}\nexport interface DeleteFileConfig {\n    abortSignal?: AbortSignal;\n    httpOptions?: HttpOptions;\n}\nexport interface DeleteFileParameters {\n    config?: DeleteFileConfig;\n    name: string;\n}\nexport interface DownloadFileConfig {\n    abortSignal?: AbortSignal;\n    httpOptions?: HttpOptions;\n}\nexport interface DynamicRetrievalConfig {\n    dynamicThreshold?: number;\n    mode?: DynamicRetrievalConfigMode;\n}\nexport enum DynamicRetrievalConfigMode {\n    MODE_DYNAMIC = \"MODE_DYNAMIC\",\n    MODE_UNSPECIFIED = \"MODE_UNSPECIFIED\"\n}\nexport interface EmbedContentConfig {\n    abortSignal?: AbortSignal;\n    autoTruncate?: boolean;\n    httpOptions?: HttpOptions;\n    mimeType?: string;\n    outputDimensionality?: number;\n    taskType?: string;\n    title?: string;\n}\nexport interface EmbedContentMetadata {\n    billableCharacterCount?: number;\n}\nexport interface EmbedContentParameters {\n    config?: EmbedContentConfig;\n    contents: ContentListUnion;\n    model: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Interface Definitions for Live Server Communication\nDESCRIPTION: TypeScript interfaces that define the structure of communication with the Live Server, including session resumption, setup completion, tool calls, and cancellations.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-node.api.md#_snippet_43\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface LiveServerSessionResumptionUpdate {\n    lastConsumedClientMessageIndex?: string;\n    newHandle?: string;\n    resumable?: boolean;\n}\n\nexport interface LiveServerSetupComplete {\n}\n\nexport interface LiveServerToolCall {\n    functionCalls?: FunctionCall[];\n}\n\nexport interface LiveServerToolCallCancellation {\n    ids?: string[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PagedItem Enum - TypeScript\nDESCRIPTION: This code defines the `PagedItem` enum. It specifies different types of paged items, including batch jobs, cached contents, files, models, and tuning jobs. It identifies the type of data being paginated.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-web.api.md#_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nexport enum PagedItem {\n    // (undocumented)\n    PAGED_ITEM_BATCH_JOBS = \"batchJobs\",\n    // (undocumented)\n    PAGED_ITEM_CACHED_CONTENTS = \"cachedContents\",\n    // (undocumented)\n    PAGED_ITEM_FILES = \"files\",\n    // (undocumented)\n    PAGED_ITEM_MODELS = \"models\",\n    // (undocumented)\n    PAGED_ITEM_TUNING_JOBS = \"tuningJobs\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Outcome Enum - TypeScript\nDESCRIPTION: This code defines the `Outcome` enum. It specifies various outcomes such as OK, failed, and deadline exceeded. It indicates the status of an operation.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-web.api.md#_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nexport enum Outcome {\n    // (undocumented)\n    OUTCOME_DEADLINE_EXCEEDED = \"OUTCOME_DEADLINE_EXCEEDED\",\n    // (undocumented)\n    OUTCOME_FAILED = \"OUTCOME_FAILED\",\n    // (undocumented)\n    OUTCOME_OK = \"OUTCOME_OK\",\n    // (undocumented)\n    OUTCOME_UNSPECIFIED = \"OUTCOME_UNSPECIFIED\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Video interface in TypeScript\nDESCRIPTION: This code defines the `Video` interface, which includes optional properties for `mimeType`, `uri`, and `videoBytes`. It defines the video type with mime type, URI, and the bytes.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai.api.md#_snippet_77\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Video {\n    mimeType?: string;\n    uri?: string;\n    videoBytes?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Retrieval Interface - TypeScript\nDESCRIPTION: This code defines the `Retrieval` interface. It contains optional properties for disabling attribution, using Vertex AI Search and Vertex Rag Store. It configures the retrieval process.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-web.api.md#_snippet_49\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Retrieval {\n    disableAttribution?: boolean;\n    vertexAiSearch?: VertexAISearch;\n    vertexRagStore?: VertexRagStore;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MaskReferenceImage Interface - TypeScript\nDESCRIPTION: This code defines the `MaskReferenceImage` interface. It contains optional properties for the mask configuration, a reference ID, a reference image (`Image_2`), and a reference type.  This represents an image used as a reference for masking operations.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-web.api.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface MaskReferenceImage {\n    config?: MaskReferenceConfig;\n    referenceId?: number;\n    referenceImage?: Image_2;\n    referenceType?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a SchemaUnion Type\nDESCRIPTION: Defines a type alias called SchemaUnion. It is an alias for the Schema interface, enabling type flexibility. This is an alias with no functional implementation.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-node.api.md#_snippet_61\n\n\n\n----------------------------------------\n\nTITLE: Defining setDefaultBaseUrls function in TypeScript\nDESCRIPTION: This code defines the `setDefaultBaseUrls` function, which takes a `BaseUrlParameters` object as input. The function likely sets the default base URLs used by the API client.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai.api.md#_snippet_46\n\nLANGUAGE: typescript\nCODE:\n```\nexport function setDefaultBaseUrls(baseUrlParams: BaseUrlParameters): void;\n```\n\n----------------------------------------\n\nTITLE: Defining LiveServerSetupComplete Interface - TypeScript\nDESCRIPTION: This code defines the `LiveServerSetupComplete` interface.  It's an empty interface indicating that the server setup is complete.  This is a marker interface with no properties.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-web.api.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface LiveServerSetupComplete {\n}\n```\n\n----------------------------------------\n\nTITLE: FetchPredictOperationConfig Interface for HTTP and AbortSignal in TypeScript\nDESCRIPTION: This interface provides optional HTTP options and an AbortSignal property to allow cancellation and customization of HTTP requests during prediction fetch operations, facilitating enhanced request management.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-node.api.md#_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface FetchPredictOperationConfig {\n    abortSignal?: AbortSignal;\n    httpOptions?: HttpOptions;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining UpscaleImageConfig interface in TypeScript\nDESCRIPTION: This code defines the `UpscaleImageConfig` interface, which includes optional properties for `abortSignal`, `httpOptions`, `includeRaiReason`, `outputCompressionQuality`, and `outputMimeType`. It is related to upscale image configuration.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai.api.md#_snippet_71\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface UpscaleImageConfig {\n    abortSignal?: AbortSignal;\n    httpOptions?: HttpOptions;\n    includeRaiReason?: boolean;\n    outputCompressionQuality?: number;\n    outputMimeType?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining UpscaleImageConfig Interface\nDESCRIPTION: Defines an interface called UpscaleImageConfig. It is used for configuring an upscale image operation, including a signal to abort, HTTP options, inclusion of RAI reasons, output compression quality, and output MIME type. It does not implement any logic.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-node.api.md#_snippet_94\n\n\n\n----------------------------------------\n\nTITLE: Defining VoiceConfig interface in TypeScript\nDESCRIPTION: This code defines the `VoiceConfig` interface, which includes an optional property for `prebuiltVoiceConfig`. This config is used for configuring voice.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai.api.md#_snippet_79\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface VoiceConfig {\n    prebuiltVoiceConfig?: PrebuiltVoiceConfig;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Type enum in TypeScript\nDESCRIPTION: This code defines an enum named `Type` with options `ARRAY`, `BOOLEAN`, `INTEGER`, `NUMBER`, `OBJECT`, `STRING`, and `TYPE_UNSPECIFIED`. It corresponds to the different types of data possible.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai.api.md#_snippet_66\n\nLANGUAGE: typescript\nCODE:\n```\nexport enum Type {\n    // (undocumented)\n    ARRAY = \"ARRAY\",\n    // (undocumented)\n    BOOLEAN = \"BOOLEAN\",\n    // (undocumented)\n    INTEGER = \"INTEGER\",\n    // (undocumented)\n    NUMBER = \"NUMBER\",\n    // (undocumented)\n    OBJECT = \"OBJECT\",\n    // (undocumented)\n    STRING = \"STRING\",\n    // (undocumented)\n    TYPE_UNSPECIFIED = \"TYPE_UNSPECIFIED\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TokensInfo interface in TypeScript\nDESCRIPTION: This code defines the `TokensInfo` interface, which includes optional properties for `role`, `tokenIds`, and `tokens`. It contains role and information of the tokens.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai.api.md#_snippet_58\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface TokensInfo {\n    role?: string;\n    tokenIds?: string[];\n    tokens?: string[];\n}\n```\n\n----------------------------------------\n\nTITLE: GenerateVideosResponse Class Modeling Generated Video Outputs and RAI Filtering Info in TypeScript\nDESCRIPTION: Captures the generated videos array, a count of media filtered by RAI (Responsible AI) mechanisms, and reasons for filtering, providing the final output and moderation information for video generation requests.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-node.api.md#_snippet_36\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class GenerateVideosResponse {\n    generatedVideos?: GeneratedVideo[];\n    raiMediaFilteredCount?: number;\n    raiMediaFilteredReasons?: string[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a SubjectReferenceImage Interface\nDESCRIPTION: Defines an interface called SubjectReferenceImage. It models an image used in the context of subject references, including configurations for the image and reference details. It uses the Image_2 type.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-node.api.md#_snippet_75\n\n\n\n----------------------------------------\n\nTITLE: Defining the Modality Enum in TypeScript\nDESCRIPTION: Enumerates basic content modalities like audio, image, and text, used within the Google GenAI API. `MODALITY_UNSPECIFIED` represents an unspecified or default state. Note that members are marked as undocumented.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai.api.md#_snippet_19\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport enum Modality {\n    // (undocumented)\n    AUDIO = \"AUDIO\",\n    // (undocumented)\n    IMAGE = \"IMAGE\",\n    // (undocumented)\n    MODALITY_UNSPECIFIED = \"MODALITY_UNSPECIFIED\",\n    // (undocumented)\n    TEXT = \"TEXT\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SubjectReferenceType enum in TypeScript\nDESCRIPTION: This code defines an enum named `SubjectReferenceType` with options `SUBJECT_TYPE_ANIMAL`, `SUBJECT_TYPE_DEFAULT`, `SUBJECT_TYPE_PERSON`, and `SUBJECT_TYPE_PRODUCT`. It's used to define the type of subject being referenced.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai.api.md#_snippet_54\n\nLANGUAGE: typescript\nCODE:\n```\nexport enum SubjectReferenceType {\n    // (undocumented)\n    SUBJECT_TYPE_ANIMAL = \"SUBJECT_TYPE_ANIMAL\",\n    // (undocumented)\n    SUBJECT_TYPE_DEFAULT = \"SUBJECT_TYPE_DEFAULT\",\n    // (undocumented)\n    SUBJECT_TYPE_PERSON = \"SUBJECT_TYPE_PERSON\",\n    // (undocumented)\n    SUBJECT_TYPE_PRODUCT = \"SUBJECT_TYPE_PRODUCT\"\n}\n```\n\n----------------------------------------\n\nTITLE: GenerationConfigRoutingConfigManualRoutingMode Interface for Manual Model Selection in TypeScript\nDESCRIPTION: Specifies manual mode routing configuration via an optional modelName string to enforce the use of a particular model during generation routing.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-node.api.md#_snippet_40\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface GenerationConfigRoutingConfigManualRoutingMode {\n    modelName?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Enumerations for Start Sensitivity and Subject Reference Types in TypeScript\nDESCRIPTION: Provides enumeration types to standardize possible values for start sensitivity levels in speech detection and subject types for image referencing. These enums clearly define restricted sets of constants like high, low, and unspecified sensitivity, and subject types including animal, person, product, and default categories, facilitating consistent usage and validation in the application logic.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-web.api.md#_snippet_57\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport enum StartSensitivity {\n    START_SENSITIVITY_HIGH = \"START_SENSITIVITY_HIGH\",\n    START_SENSITIVITY_LOW = \"START_SENSITIVITY_LOW\",\n    START_SENSITIVITY_UNSPECIFIED = \"START_SENSITIVITY_UNSPECIFIED\"\n}\n\nexport enum SubjectReferenceType {\n    SUBJECT_TYPE_ANIMAL = \"SUBJECT_TYPE_ANIMAL\",\n    SUBJECT_TYPE_DEFAULT = \"SUBJECT_TYPE_DEFAULT\",\n    SUBJECT_TYPE_PERSON = \"SUBJECT_TYPE_PERSON\",\n    SUBJECT_TYPE_PRODUCT = \"SUBJECT_TYPE_PRODUCT\"\n}\n```\n\n----------------------------------------\n\nTITLE: GenerationConfigRoutingConfig Interface for Routing Generation Models in TypeScript\nDESCRIPTION: Encapsulates routing configuration with optional automatic and manual modes to specify model routing preferences, allowing flexible generation routing control between balancing quality, cost, or specific model selection.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-node.api.md#_snippet_38\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface GenerationConfigRoutingConfig {\n    autoMode?: GenerationConfigRoutingConfigAutoRoutingMode;\n    manualMode?: GenerationConfigRoutingConfigManualRoutingMode;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ToolCodeExecution interface in TypeScript\nDESCRIPTION: This code defines the `ToolCodeExecution` interface, which does not contain any properties. This interface serves to define the type of `codeExecution` in `Tool` interface.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai.api.md#_snippet_60\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ToolCodeExecution {\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the Operations Class for API Interactions in TypeScript\nDESCRIPTION: Defines the `Operations` class, a module for interacting with long-running operation endpoints in the Google GenAI API, specifically for video generation. It requires an `ApiClient` for construction and provides a method `getVideosOperation` to fetch the status of a video generation task. Note this class is marked as undocumented.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai.api.md#_snippet_24\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public (undocumented)\nexport class Operations extends BaseModule {\n    constructor(apiClient: ApiClient);\n    getVideosOperation(parameters: types.OperationGetParameters): Promise<types.GenerateVideosOperation>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing HTTP Request Options and HttpResponse Class in TypeScript\nDESCRIPTION: This snippet details the HttpOptions interface for configuring HTTP request parameters like API version, base URL, headers, and timeout values. It also defines the HttpResponse class which wraps a standard Response object, exposing a method to parse JSON content asynchronously and property to access headers. This facilitates standardized HTTP interaction and response handling within the Google GenAI API client.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai.api.md#_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface HttpOptions {\n    apiVersion?: string;\n    baseUrl?: string;\n    headers?: Record<string, string>;\n    timeout?: number;\n}\n\nexport class HttpResponse {\n    constructor(response: Response);\n    headers?: Record<string, string>;\n    // (undocumented)\n    json(): Promise<unknown>;\n    responseInternal: Response;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Operations Class - TypeScript\nDESCRIPTION: This code defines the `Operations` class, extending `BaseModule`. It includes a method for retrieving video generation operation information. It provides API access to video operation details.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-web.api.md#_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nexport class Operations extends BaseModule {\n    constructor(apiClient: ApiClient);\n    getVideosOperation(parameters: types.OperationGetParameters): Promise<types.GenerateVideosOperation>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SearchEntryPoint interface in TypeScript\nDESCRIPTION: This code defines the `SearchEntryPoint` interface, which includes optional properties for `renderedContent` and `sdkBlob`. It likely represents an entry point for a search result or related information.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai.api.md#_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface SearchEntryPoint {\n    renderedContent?: string;\n    sdkBlob?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining UpdateCachedContentParameters interface in TypeScript\nDESCRIPTION: This code defines the `UpdateCachedContentParameters` interface, which includes a required `name` property of type string and an optional `config` property of type `UpdateCachedContentConfig`. This parameters defines the input for the update cache action.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai.api.md#_snippet_68\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface UpdateCachedContentParameters {\n    config?: UpdateCachedContentConfig;\n    name: string;\n}\n```\n\n----------------------------------------\n\nTITLE: FeatureSelectionPreference Enum Modeling Quality vs Cost in TypeScript\nDESCRIPTION: This enum defines preferences for feature selection strategies, such as balancing quality and cost, prioritizing either cost or quality, or unspecified. These constants assist in routing or optimization decisions inside the client.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-node.api.md#_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport enum FeatureSelectionPreference {\n    BALANCED = \"BALANCED\",\n    FEATURE_SELECTION_PREFERENCE_UNSPECIFIED = \"FEATURE_SELECTION_PREFERENCE_UNSPECIFIED\",\n    PRIORITIZE_COST = \"PRIORITIZE_COST\",\n    PRIORITIZE_QUALITY = \"PRIORITIZE_QUALITY\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing EndSensitivity Enum in TypeScript\nDESCRIPTION: Enum defining sensitivity levels for ending content generation with high, low, and unspecified options.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-web.api.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport enum EndSensitivity {\n    // (undocumented)\n    END_SENSITIVITY_HIGH = \"END_SENSITIVITY_HIGH\",\n    // (undocumented)\n    END_SENSITIVITY_LOW = \"END_SENSITIVITY_LOW\",\n    // (undocumented)\n    END_SENSITIVITY_UNSPECIFIED = \"END_SENSITIVITY_UNSPECIFIED\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SafetyAttributes Interface - TypeScript\nDESCRIPTION: This code defines the `SafetyAttributes` interface. It contains optional properties for safety categories, content type, and safety scores. It represents the safety attributes of a piece of content.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-web.api.md#_snippet_51\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface SafetyAttributes {\n    categories?: string[];\n    contentType?: string;\n    scores?: number[];\n}\n```\n\n----------------------------------------\n\nTITLE: Replay Interfaces for Interaction Recording\nDESCRIPTION: TypeScript interfaces for recording and replaying API interactions, including request and response structures with headers, body segments, and status information.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-node.api.md#_snippet_53\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ReplayFile {\n    // (undocumented)\n    interactions?: ReplayInteraction[];\n    // (undocumented)\n    replayId?: string;\n}\n\nexport interface ReplayInteraction {\n    // (undocumented)\n    request?: ReplayRequest;\n    // (undocumented)\n    response?: ReplayResponse;\n}\n\nexport interface ReplayRequest {\n    // (undocumented)\n    bodySegments?: Record<string, unknown>[];\n    // (undocumented)\n    headers?: Record<string, string>;\n    // (undocumented)\n    method?: string;\n    // (undocumented)\n    url?: string;\n}\n\nexport class ReplayResponse {\n    // (undocumented)\n    bodySegments?: Record<string, unknown>[];\n    // (undocumented)\n    headers?: Record<string, string>;\n    // (undocumented)\n    sdkResponseSegments?: Record<string, unknown>[];\n    // (undocumented)\n    statusCode?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ReplayResponse Class - TypeScript\nDESCRIPTION: This code defines the `ReplayResponse` class. It includes properties for body segments, headers, SDK response segments, and status code. It models the response part of a replayed interaction.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-web.api.md#_snippet_48\n\nLANGUAGE: typescript\nCODE:\n```\nexport class ReplayResponse {\n    // (undocumented)\n    bodySegments?: Record<string, unknown>[];\n    // (undocumented)\n    headers?: Record<string, string>;\n    // (undocumented)\n    sdkResponseSegments?: Record<string, unknown>[];\n    // (undocumented)\n    statusCode?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Search Entry Point Interface\nDESCRIPTION: Defines an interface called SearchEntryPoint. It represents an entry point for search functionality. It includes a rendered content string and an SDK blob as strings, enabling the display of search results in the UI. No operational logic is defined.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-node.api.md#_snippet_62\n\n\n\n----------------------------------------\n\nTITLE: Defining Endpoint Interface in TypeScript\nDESCRIPTION: This TypeScript interface models an API endpoint with optional properties for deployed model identification and endpoint name. It acts as a contract for endpoint objects throughout the client library.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-node.api.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface Endpoint {\n    deployedModelId?: string;\n    name?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the MaskReferenceMode Enum in TypeScript\nDESCRIPTION: Enumerates the possible modes for mask references used in the Google GenAI API. It includes modes like background, default, foreground, semantic, and user-provided. Note that the specific meaning of each undocumented mode requires further context.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai.api.md#_snippet_16\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport enum MaskReferenceMode {\n    // (undocumented)\n    MASK_MODE_BACKGROUND = \"MASK_MODE_BACKGROUND\",\n    // (undocumented)\n    MASK_MODE_DEFAULT = \"MASK_MODE_DEFAULT\",\n    // (undocumented)\n    MASK_MODE_FOREGROUND = \"MASK_MODE_FOREGROUND\",\n    // (undocumented)\n    MASK_MODE_SEMANTIC = \"MASK_MODE_SEMANTIC\",\n    // (undocumented)\n    MASK_MODE_USER_PROVIDED = \"MASK_MODE_USER_PROVIDED\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Model Selection and Operation Parameter Interfaces in TypeScript\nDESCRIPTION: Defines interfaces for model selection configuration (`ModelSelectionConfig`) and parameters for retrieving operation status (`OperationGetParameters`). `ModelSelectionConfig` includes preferences for feature selection. `OperationGetParameters` specifies the operation object and optional configuration for the get request.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai.api.md#_snippet_23\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport interface ModelSelectionConfig {\n    featureSelectionPreference?: FeatureSelectionPreference;\n}\n\n// @public\nexport interface OperationGetParameters {\n    config?: GetOperationConfig;\n    operation: GenerateVideosOperation;\n}\n```\n\n----------------------------------------\n\nTITLE: FileSource Enum Representing the Origin of Files in TypeScript\nDESCRIPTION: Defines constants for identifying file sources such as GENERATED, UPLOADED, or an unspecified state, aiding in categorizing file provenance in the system.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-node.api.md#_snippet_14\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport enum FileSource {\n    GENERATED = \"GENERATED\",\n    SOURCE_UNSPECIFIED = \"SOURCE_UNSPECIFIED\",\n    UPLOADED = \"UPLOADED\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ThinkingConfig interface in TypeScript\nDESCRIPTION: This code defines the `ThinkingConfig` interface, which includes optional properties for `includeThoughts` and `thinkingBudget`. It is used for the thinking configuration to decide whether to include thoughts or the budget.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai.api.md#_snippet_57\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ThinkingConfig {\n    includeThoughts?: boolean;\n    thinkingBudget?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Modality Token Count and Mode Interfaces/Enums in TypeScript\nDESCRIPTION: Defines the `ModalityTokenCount` interface to represent the token count for a specific media modality and the `Mode` enum, likely used for configuration settings (e.g., dynamic mode). The `Mode` enum members are undocumented.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai.api.md#_snippet_20\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport interface ModalityTokenCount {\n    modality?: MediaModality;\n    tokenCount?: number;\n}\n\n// @public\nexport enum Mode {\n    // (undocumented)\n    MODE_DYNAMIC = \"MODE_DYNAMIC\",\n    // (undocumented)\n    MODE_UNSPECIFIED = \"MODE_UNSPECIFIED\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MaskReferenceMode Enum - TypeScript\nDESCRIPTION: This code defines the `MaskReferenceMode` enum. It specifies different modes for mask generation, including background, default, foreground, semantic, and user-provided. These modes determine how the mask is generated based on the reference image.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-web.api.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nexport enum MaskReferenceMode {\n    // (undocumented)\n    MASK_MODE_BACKGROUND = \"MASK_MODE_BACKGROUND\",\n    // (undocumented)\n    MASK_MODE_DEFAULT = \"MASK_MODE_DEFAULT\",\n    // (undocumented)\n    MASK_MODE_FOREGROUND = \"MASK_MODE_FOREGROUND\",\n    // (undocumented)\n    MASK_MODE_SEMANTIC = \"MASK_MODE_SEMANTIC\",\n    // (undocumented)\n    MASK_MODE_USER_PROVIDED = \"MASK_MODE_USER_PROVIDED\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Raw Reference Image Interface in TypeScript\nDESCRIPTION: Defines the `RawReferenceImage` interface, used for providing raw image references within the Google GenAI API. It includes optional properties for a reference ID, the image data itself (`Image_2`), and the type of reference.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai.api.md#_snippet_32\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport interface RawReferenceImage {\n    referenceId?: number;\n    referenceImage?: Image_2;\n    referenceType?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Mask Reference Configuration Interfaces in TypeScript\nDESCRIPTION: Defines interfaces related to mask references for image manipulation or analysis within the Google GenAI API. `MaskReferenceConfig` specifies configuration details like dilation, mode, and segmentation classes. `MaskReferenceImage` links a configuration and an image (`Image_2`) using a reference ID and type.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai.api.md#_snippet_15\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport interface MaskReferenceConfig {\n    maskDilation?: number;\n    maskMode?: MaskReferenceMode;\n    segmentationClasses?: number[];\n}\n\n// @public\nexport interface MaskReferenceImage {\n    config?: MaskReferenceConfig;\n    referenceId?: number;\n    referenceImage?: Image_2;\n    referenceType?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Prebuilt Voice Configuration Interface in TypeScript\nDESCRIPTION: Defines the `PrebuiltVoiceConfig` interface, likely used for text-to-speech or related audio generation features in the Google GenAI API. It contains an optional property `voiceName` to specify a prebuilt voice model.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai.api.md#_snippet_30\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport interface PrebuiltVoiceConfig {\n    voiceName?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the PersonGeneration Enum in TypeScript\nDESCRIPTION: Enumerates options for controlling the generation of content depicting people within the Google GenAI API, likely related to safety or policy settings. Options include allowing adults, allowing all, or disallowing person generation. Note that members are marked as undocumented.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai.api.md#_snippet_29\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @public\nexport enum PersonGeneration {\n    // (undocumented)\n    ALLOW_ADULT = \"ALLOW_ADULT\",\n    // (undocumented)\n    ALLOW_ALL = \"ALLOW_ALL\",\n    // (undocumented)\n    DONT_ALLOW = \"DONT_ALLOW\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining StyleReferenceImage interface in TypeScript\nDESCRIPTION: This code defines the `StyleReferenceImage` interface, which includes optional properties for `config`, `referenceId`, `referenceImage`, and `referenceType`. It likely represents a reference image for styling purposes.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai.api.md#_snippet_51\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface StyleReferenceImage {\n    config?: StyleReferenceConfig;\n    referenceId?: number;\n    referenceImage?: Image_2;\n    referenceType?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a StyleReferenceConfig Interface\nDESCRIPTION: Defines an interface called StyleReferenceConfig. It is used to configure style references such as the style description.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-node.api.md#_snippet_72\n\n\n\n----------------------------------------\n\nTITLE: Defining StartSensitivity enum in TypeScript\nDESCRIPTION: This code defines an enum named `StartSensitivity` with options `START_SENSITIVITY_HIGH`, `START_SENSITIVITY_LOW`, and `START_SENSITIVITY_UNSPECIFIED`. It's used to determine the sensitivity level for detecting the start of something.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai.api.md#_snippet_49\n\nLANGUAGE: typescript\nCODE:\n```\nexport enum StartSensitivity {\n    // (undocumented)\n    START_SENSITIVITY_HIGH = \"START_SENSITIVITY_HIGH\",\n    // (undocumented)\n    START_SENSITIVITY_LOW = \"START_SENSITIVITY_LOW\",\n    // (undocumented)\n    START_SENSITIVITY_UNSPECIFIED = \"START_SENSITIVITY_UNSPECIFIED\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining OperationGetParameters Interface - TypeScript\nDESCRIPTION: This code defines the `OperationGetParameters` interface. It contains optional properties for the configuration and the `GenerateVideosOperation` object. It defines parameters for getting information about a video generation operation.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-web.api.md#_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface OperationGetParameters {\n    config?: GetOperationConfig;\n    operation: GenerateVideosOperation;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ReplayRequest Interface - TypeScript\nDESCRIPTION: This code defines the `ReplayRequest` interface. It contains optional properties for body segments, headers, method, and URL. It models the request part of a replayed interaction.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai-web.api.md#_snippet_47\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ReplayRequest {\n    // (undocumented)\n    bodySegments?: Record<string, unknown>[];\n    // (undocumented)\n    headers?: Record<string, string>;\n    // (undocumented)\n    method?: string;\n    // (undocumented)\n    url?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TestTableFile interface in TypeScript\nDESCRIPTION: This code defines the `TestTableFile` interface, which includes optional properties for `comment`, `parameterNames`, `testMethod`, and `testTable`. It seems to be the definition of a file related to testing tables.\nSOURCE: https://github.com/googleapis/js-genai/blob/main/api-report/genai.api.md#_snippet_55\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface TestTableFile {\n    // (undocumented)\n    comment?: string;\n    // (undocumented)\n    parameterNames?: string[];\n    // (undocumented)\n    testMethod?: string;\n    // (undocumented)\n    testTable?: TestTableItem[];\n}\n```"
  }
]