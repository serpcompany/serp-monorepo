[
  {
    "owner": "klinecharts",
    "repo": "klinechart",
    "content": "TITLE: Subscribing to Chart Actions in JavaScript\nDESCRIPTION: The `subscribeAction` function allows users to subscribe to various chart actions such as zooming, scrolling, and clicking on chart elements. It accepts a `type` parameter specifying the action type and a `cb` parameter for the callback function to be executed when the action occurs. The function returns `undefined`. This enables interactive and responsive chart experiences in web applications.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/api/instance/subscribeAction.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n`subscribeAction` subscribe to chart actions.\n```\n\n----------------------------------------\n\nTITLE: Initializing KLineCharts and Loading Financial Data\nDESCRIPTION: This JavaScript code initializes a KLineCharts instance and populates it with sample financial data. It creates a chart in the HTML element with ID 'chart' and applies OHLCV (Open, High, Low, Close, Volume) data with timestamps representing 1-minute intervals starting from April 23, 2020.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/@views/quick-start/create-chart/vanilla.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.onload = function () {\n  var chart = klinecharts.init('chart')\n\n  chart.applyNewData([\n    { close: 4976.16, high: 4977.99, low: 4970.12, open: 4972.89, timestamp: 1587660000000, volume: 204 },\n    { close: 4977.33, high: 4979.94, low: 4971.34, open: 4973.20, timestamp: 1587660060000, volume: 194 },\n    { close: 4977.93, high: 4977.93, low: 4974.20, open: 4976.53, timestamp: 1587660120000, volume: 197 },\n    { close: 4966.77, high: 4968.53, low: 4962.20, open: 4963.88, timestamp: 1587660180000, volume: 28 },\n    { close: 4961.56, high: 4972.61, low: 4961.28, open: 4961.28, timestamp: 1587660240000, volume: 184 },\n    { close: 4964.19, high: 4964.74, low: 4961.42, open: 4961.64, timestamp: 1587660300000, volume: 191 },\n    { close: 4968.93, high: 4972.70, low: 4964.55, open: 4966.96, timestamp: 1587660360000, volume: 105 },\n    { close: 4979.31, high: 4979.61, low: 4973.99, open: 4977.06, timestamp: 1587660420000, volume: 35 },\n    { close: 4977.02, high: 4981.66, low: 4975.14, open: 4981.66, timestamp: 1587660480000, volume: 135 },\n    { close: 4985.09, high: 4988.62, low: 4980.30, open: 4986.72, timestamp: 1587660540000, volume: 76 }\n  ])\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing KLineChart Constructor Type Definition in TypeScript\nDESCRIPTION: Defines the type structure for creating a KLineChart instance. Includes configuration options for layout, indicators, axis settings, locale, styles, timezone, and various formatting options. The constructor accepts a DOM element or string selector and an optional configuration object.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/@views/api/references/chart/init.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(\n  ds: string | HTMLElement,\n  options?: {\n    layout?: Array<{\n      type: 'candle' | 'indicator' | 'xAxis'\n      content?: Array<Indicator | string>\n      options?: {\n        id?: string\n        height?: number\n        minHeight?: number\n        dragEnabled?: boolean\n        order?: number\n        state?: 'normal' | 'maximize' | 'minimize'\n        axis?: {\n          name?: string\n          reverse?: boolean\n          inside?: boolean\n          position?: 'left' | 'right'\n          scrollZoomEnabled?: boolean\n          gap?: {\n            top?: number\n            bottom?: number\n          }\n          createRange?: (params: object) => ({\n            from: number\n            to: number\n            range: number\n            realFrom: number\n            realTo: number\n            realRange: number\n            displayFrom: number\n            displayTo: number\n            displayRange: number\n          })\n          createTicks?: (params: object) => Array<{\n            coord: number\n            value: number | string\n            text: string\n          }>\n        }\n      }\n    }>\n    locale?: string\n    styles?: string | Styles\n    timezone?: string\n    formatter?: {\n      formatDate?: (params: {\n        dateTimeFormat: Intl.DateTimeFormat\n        timestamp: number\n        template: string\n        type: 'tooltip' | 'crosshair' | 'xAxis'\n      }) => string\n      formatBigNumber?: (value: string | number) => string\n    }\n    thousandsSeparator?: {\n      sign?: string\n      format: (value: number | string) => string\n    }\n    decimalFold?: {\n      threshold?: number\n      format?: (value: number | string) => string\n    }\n  }\n) => Chart\n```\n\n----------------------------------------\n\nTITLE: Implementing KLineChart with time-series data in Vue\nDESCRIPTION: This Vue component integrates KLineChart to display financial candlestick data. It initializes the chart on mount, populates it with time-series data containing OHLC (Open, High, Low, Close) values, and properly disposes of the chart resources when the component is unmounted.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/@views/quick-start/create-chart/vue.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { onMounted, onUnmounted } from 'vue'\nimport { init, dispose } from 'klinecharts'\n\nonMounted(() => {\n  const chart = init('chart')\n\n  chart.applyNewData([\n    { close: 4976.16, high: 4977.99, low: 4970.12, open: 4972.89, timestamp: 1587660000000, volume: 204 },\n    { close: 4977.33, high: 4979.94, low: 4971.34, open: 4973.20, timestamp: 1587660060000, volume: 194 },\n    { close: 4977.93, high: 4977.93, low: 4974.20, open: 4976.53, timestamp: 1587660120000, volume: 197 },\n    { close: 4966.77, high: 4968.53, low: 4962.20, open: 4963.88, timestamp: 1587660180000, volume: 28 },\n    { close: 4961.56, high: 4972.61, low: 4961.28, open: 4961.28, timestamp: 1587660240000, volume: 184 },\n    { close: 4964.19, high: 4964.74, low: 4961.42, open: 4961.64, timestamp: 1587660300000, volume: 191 },\n    { close: 4968.93, high: 4972.70, low: 4964.55, open: 4966.96, timestamp: 1587660360000, volume: 105 },\n    { close: 4979.31, high: 4979.61, low: 4973.99, open: 4977.06, timestamp: 1587660420000, volume: 35 },\n    { close: 4977.02, high: 4981.66, low: 4975.14, open: 4981.66, timestamp: 1587660480000, volume: 135 },\n    { close: 4985.09, high: 4988.62, low: 4980.30, open: 4986.72, timestamp: 1587660540000, volume: 76 }\n  ])\n})\n\nonUnmounted(() => {\n  dispose('chart')\n})\n</script>\n\n<template>\n  <div id=\"chart\" style=\"width:600px;height:600px\"/>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Overlay in KLineChart\nDESCRIPTION: Demonstrates basic usage of the createOverlay method to add an overlay to a chart.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/api/instance/createOverlay.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<CreateOverlayBasic/>\n```\n\n----------------------------------------\n\nTITLE: Initializing KLineChart with React Component\nDESCRIPTION: Creates a React component that initializes a KLineChart instance, populates it with candlestick data, and handles cleanup on unmount. The chart displays financial data with timestamps, open/close/high/low prices, and volume information.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/@views/quick-start/create-chart/react.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useEffect } from 'react'\nimport { init, dispose } from 'klinecharts'\nexport default () => {\n  useEffect(() => {\n    const chart = init('chart')\n          \n    chart.applyNewData([\n      { close: 4976.16, high: 4977.99, low: 4970.12, open: 4972.89, timestamp: 1587660000000, volume: 204 },\n      { close: 4977.33, high: 4979.94, low: 4971.34, open: 4973.20, timestamp: 1587660060000, volume: 194 },\n      { close: 4977.93, high: 4977.93, low: 4974.20, open: 4976.53, timestamp: 1587660120000, volume: 197 },\n      { close: 4966.77, high: 4968.53, low: 4962.20, open: 4963.88, timestamp: 1587660180000, volume: 28 },\n      { close: 4961.56, high: 4972.61, low: 4961.28, open: 4961.28, timestamp: 1587660240000, volume: 184 },\n      { close: 4964.19, high: 4964.74, low: 4961.42, open: 4961.64, timestamp: 1587660300000, volume: 191 },\n      { close: 4968.93, high: 4972.70, low: 4964.55, open: 4966.96, timestamp: 1587660360000, volume: 105 },\n      { close: 4979.31, high: 4979.61, low: 4973.99, open: 4977.06, timestamp: 1587660420000, volume: 35 },\n      { close: 4977.02, high: 4981.66, low: 4975.14, open: 4981.66, timestamp: 1587660480000, volume: 135 },\n      { close: 4985.09, high: 4988.62, low: 4980.30, open: 4986.72, timestamp: 1587660540000, volume: 76 }\n    ])\n          \n    return () => {\n      dispose('chart')\n    }\n  }, [])\n\n  return <div id=\"chart\" style={{ width: 600, height: 600 }}/>\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing KLineChart in a SolidJS Component\nDESCRIPTION: A complete SolidJS component that initializes a KLineChart instance, populates it with financial candlestick data, and handles proper disposal on component unmount. The chart displays 10 data points with price and volume information.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/@views/quick-start/create-chart/solid.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { onMount, onCleanup } from 'solid-js'\nimport { init, dispose } from 'klinecharts'\n\nexport default () => {\n  onMount(() => {\n    const chart = init('chart')\n\n    chart.applyNewData([\n      { close: 4976.16, high: 4977.99, low: 4970.12, open: 4972.89, timestamp: 1587660000000, volume: 204 },\n      { close: 4977.33, high: 4979.94, low: 4971.34, open: 4973.20, timestamp: 1587660060000, volume: 194 },\n      { close: 4977.93, high: 4977.93, low: 4974.20, open: 4976.53, timestamp: 1587660120000, volume: 197 },\n      { close: 4966.77, high: 4968.53, low: 4962.20, open: 4963.88, timestamp: 1587660180000, volume: 28 },\n      { close: 4961.56, high: 4972.61, low: 4961.28, open: 4961.28, timestamp: 1587660240000, volume: 184 },\n      { close: 4964.19, high: 4964.74, low: 4961.42, open: 4961.64, timestamp: 1587660300000, volume: 191 },\n      { close: 4968.93, high: 4972.70, low: 4964.55, open: 4966.96, timestamp: 1587660360000, volume: 105 },\n      { close: 4979.31, high: 4979.61, low: 4973.99, open: 4977.06, timestamp: 1587660420000, volume: 35 },\n      { close: 4977.02, high: 4981.66, low: 4975.14, open: 4981.66, timestamp: 1587660480000, volume: 135 },\n      { close: 4985.09, high: 4988.62, low: 4980.30, open: 4986.72, timestamp: 1587660540000, volume: 76 }\n    ])\n  })\n\n  onCleanup(() => {\n    // 销毁图表\n    dispose('chart')\n  })\n\n  return <div id=\"chart\" style={{ width: '600px', height: '600px' }}/>\n}\n```\n\n----------------------------------------\n\nTITLE: Basic KLineChart Initialization in JavaScript\nDESCRIPTION: Demonstrates the basic usage of the init() function to create a KLineChart instance. The chart is initialized with a container element and default options.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/api/chart/init.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst chart = klinecharts.init('container')\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Financial Chart with KLineCharts in HTML\nDESCRIPTION: This HTML document sets up a basic financial chart using the KLineCharts library. It includes a container div with specific dimensions, loads the KLineCharts library from a CDN, and initializes a chart with sample OHLC (Open, High, Low, Close) price data when the page loads.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/@views/quick-start/create-chart/vanilla.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"cn\" >\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <meta name=\"theme-color\" content=\"#000000\" />\n    <meta name=\"keywords\" content=\"Quick Start\"/>\n    <meta name=\"description\" content=\"Quick Start\"/>\n    <title>Quick Start</title>\n    <script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/klinecharts/dist/umd/klinecharts.min.js\"></script>\n  </head>\n  <body>\n    <div id=\"chart\" style=\"width:600px;height:600px\"></div>\n    <script>\n      window.onload = function () {\n        var chart = klinecharts.init('chart')\n\n        chart.applyNewData([\n          { close: 4976.16, high: 4977.99, low: 4970.12, open: 4972.89, timestamp: 1587660000000, volume: 204 },\n          { close: 4977.33, high: 4979.94, low: 4971.34, open: 4973.20, timestamp: 1587660060000, volume: 194 },\n          { close: 4977.93, high: 4977.93, low: 4974.20, open: 4976.53, timestamp: 1587660120000, volume: 197 },\n          { close: 4966.77, high: 4968.53, low: 4962.20, open: 4963.88, timestamp: 1587660180000, volume: 28 },\n          { close: 4961.56, high: 4972.61, low: 4961.28, open: 4961.28, timestamp: 1587660240000, volume: 184 },\n          { close: 4964.19, high: 4964.74, low: 4961.42, open: 4961.64, timestamp: 1587660300000, volume: 191 },\n          { close: 4968.93, high: 4972.70, low: 4964.55, open: 4966.96, timestamp: 1587660360000, volume: 105 },\n          { close: 4979.31, high: 4979.61, low: 4973.99, open: 4977.06, timestamp: 1587660420000, volume: 35 },\n          { close: 4977.02, high: 4981.66, low: 4975.14, open: 4981.66, timestamp: 1587660480000, volume: 135 },\n          { close: 4985.09, high: 4988.62, low: 4980.30, open: 4986.72, timestamp: 1587660540000, volume: 76 }\n        ])\n      }\n    </script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Defining KLineChart Data Structure in TypeScript\nDESCRIPTION: This snippet defines the TypeScript interface for the data structure required by KLineChart. It includes mandatory fields like timestamp, open, close, high, and low prices, as well as optional fields for volume and turnover.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/guide/data-source.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  // Timestamp, millisecond, required fields\n  timestamp: number\n  // Open price, required fields\n  open: number\n  // Close price, required field\n  close: number\n  // Highest price, required field\n  high: number\n  // Lowest price, required field\n  low: number\n  // volume, optional field\n  volume: number\n  // Turnover, a non-required field, if you need to display the technical indicators 'EMV' and 'AVP', you need to fill this field with data.\n  turnover: number\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Overlay Indicator in KLineChart\nDESCRIPTION: Demonstrates how to create an indicator that overlays on the candlestick chart using the chart.createIndicator method. This example shows how to create an MA (Moving Average) indicator on the main candlestick pane.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/guide/indicator.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nchart.createIndicator('MA', true, { id:'candle_pane' })\n```\n\n----------------------------------------\n\nTITLE: Initializing and Populating KLineChart in Svelte Component\nDESCRIPTION: This snippet demonstrates how to initialize a KLineChart instance within a Svelte component using onMount and onDestroy lifecycle hooks. It creates a chart, applies initial data, and ensures proper cleanup when the component is destroyed.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/@views/quick-start/create-chart/svelte.md#2025-04-21_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<div id=\"chart\" style=\"width:600px;height:600px\"/>\n\n<script>\nimport { onMount, onDestroy } from 'svelte'\n\nonMount(() => {\n  const chart = init('chart')\n\n  chart.applyNewData([\n    { close: 4976.16, high: 4977.99, low: 4970.12, open: 4972.89, timestamp: 1587660000000, volume: 204 },\n    { close: 4977.33, high: 4979.94, low: 4971.34, open: 4973.20, timestamp: 1587660060000, volume: 194 },\n    { close: 4977.93, high: 4977.93, low: 4974.20, open: 4976.53, timestamp: 1587660120000, volume: 197 },\n    { close: 4966.77, high: 4968.53, low: 4962.20, open: 4963.88, timestamp: 1587660180000, volume: 28 },\n    { close: 4961.56, high: 4972.61, low: 4961.28, open: 4961.28, timestamp: 1587660240000, volume: 184 },\n    { close: 4964.19, high: 4964.74, low: 4961.42, open: 4961.64, timestamp: 1587660300000, volume: 191 },\n    { close: 4968.93, high: 4972.70, low: 4964.55, open: 4966.96, timestamp: 1587660360000, volume: 105 },\n    { close: 4979.31, high: 4979.61, low: 4973.99, open: 4977.06, timestamp: 1587660420000, volume: 35 },\n    { close: 4977.02, high: 4981.66, low: 4975.14, open: 4981.66, timestamp: 1587660480000, volume: 135 },\n    { close: 4985.09, high: 4988.62, low: 4980.30, open: 4986.72, timestamp: 1587660540000, volume: 76 }\n  ])\n})\n\nonDestroy(() => {\n  dispose('chart')\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing KLineCharts in an Angular Component with Financial Data Visualization\nDESCRIPTION: This code shows a complete Angular component implementation that uses KLineCharts to display financial data. It initializes the chart in the ngAfterViewInit lifecycle hook, populates it with candlestick data (OHLC with volume and timestamp information), and properly disposes of the chart when the component is destroyed to prevent memory leaks.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/@views/quick-start/create-chart/angular.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Component, AfterViewInit, OnDestroy } from '@angular/core';\nimport { init, dispose } from 'klinecharts';\n\n@Component({\n  selector: 'app-chart',\n  template: `<div id=\"chart\" style=\"width:600px;height:600px\"/>`,\n})\nexport class ChartComponent implements AfterViewInit, OnDestroy {\n  ngAfterViewInit(): void {\n    const chart = init('chart');\n\n    chart?.applyNewData([\n      { close: 4976.16, high: 4977.99, low: 4970.12, open: 4972.89, timestamp: 1587660000000, volume: 204 },\n      { close: 4977.33, high: 4979.94, low: 4971.34, open: 4973.20, timestamp: 1587660060000, volume: 194 },\n      { close: 4977.93, high: 4977.93, low: 4974.20, open: 4976.53, timestamp: 1587660120000, volume: 197 },\n      { close: 4966.77, high: 4968.53, low: 4962.20, open: 4963.88, timestamp: 1587660180000, volume: 28 },\n      { close: 4961.56, high: 4972.61, low: 4961.28, open: 4961.28, timestamp: 1587660240000, volume: 184 },\n      { close: 4964.19, high: 4964.74, low: 4961.42, open: 4961.64, timestamp: 1587660300000, volume: 191 },\n      { close: 4968.93, high: 4972.70, low: 4964.55, open: 4966.96, timestamp: 1587660360000, volume: 105 },\n      { close: 4979.31, high: 4979.61, low: 4973.99, open: 4977.06, timestamp: 1587660420000, volume: 35 },\n      { close: 4977.02, high: 4981.66, low: 4975.14, open: 4981.66, timestamp: 1587660480000, volume: 135 },\n      { close: 4985.09, high: 4988.62, low: 4980.30, open: 4986.72, timestamp: 1587660540000, volume: 76 }\n    ]);\n  }\n\n  ngOnDestroy(): void {\n    dispose('chart');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Default KLineChart Style Configuration in JavaScript\nDESCRIPTION: A comprehensive styles configuration object for KLineChart that defines appearance settings for all chart elements including grid, candles, price marks, tooltips, indicators, and axes. It specifies colors, sizes, fonts, borders, animations, and positioning for each component.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/@views/styles/config.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst styles = {\n  grid: {\n    show: true,\n    horizontal: {\n      show: true,\n      size: 1,\n      color: '#EDEDED',\n      style: 'dashed',\n      dashedValue: [2, 2]\n    },\n    vertical: {\n      show: true,\n      size: 1,\n      color: '#EDEDED',\n      style: 'dashed',\n      dashedValue: [2, 2]\n    }\n  },\n  candle: {\n    // 'candle_solid' | 'candle_stroke' | 'candle_up_stroke' | 'candle_down_stroke' | 'ohlc' | 'area'\n    type: 'candle_solid',\n    bar: {\n      // 'current_open' | 'previous_close'\n      compareRule: 'current_open',\n      upColor: '#2DC08E',\n      downColor: '#F92855',\n      noChangeColor: '#888888',\n      upBorderColor: '#2DC08E',\n      downBorderColor: '#F92855',\n      noChangeBorderColor: '#888888',\n      upWickColor: '#2DC08E',\n      downWickColor: '#F92855',\n      noChangeWickColor: '#888888'\n    },\n    area: {\n      lineSize: 2,\n      lineColor: '#2196F3',\n      smooth: false,\n      value: 'close',\n      backgroundColor: [{\n        offset: 0,\n        color: 'rgba(33, 150, 243, 0.01)'\n      }, {\n        offset: 1,\n        color: 'rgba(33, 150, 243, 0.2)'\n      }],\n      point: {\n        show: true,\n        color: blue,\n        radius: 4,\n        rippleColor: getAlphaBlue(0.3),\n        rippleRadius: 8,\n        animation: true,\n        animationDuration: 1000\n      }\n    },\n    priceMark: {\n      show: true,\n      high: {\n        show: true,\n        color: '#D9D9D9',\n        textMargin: 5,\n        textSize: 10,\n        textFamily: 'Helvetica Neue',\n        textWeight: 'normal'\n      },\n      low: {\n        show: true,\n        color: '#D9D9D9',\n        textMargin: 5,\n        textSize: 10,\n        textFamily: 'Helvetica Neue',\n        textWeight: 'normal',\n      },\n      last: {\n        show: true,\n        // 'current_open' | 'previous_close'\n        compareRule: 'current_open',\n        upColor: '#2DC08E',\n        downColor: '#F92855',\n        noChangeColor: '#888888',\n        line: {\n          show: true,\n          // 'solid' | 'dashed'\n          style: 'dashed',\n          dashedValue: [4, 4],\n          size: 1\n        },\n        text: {\n          show: true,\n          // 'fill' | 'stroke' | 'stroke_fill'\n          style: 'fill',\n          size: 12,\n          paddingLeft: 4,\n          paddingTop: 4,\n          paddingRight: 4,\n          paddingBottom: 4,\n          // 'solid' | 'dashed'\n          borderStyle: 'solid',\n          borderSize: 0,\n          borderColor: 'transparent',\n          borderDashedValue: [2, 2],\n          color: '#FFFFFF',\n          family: 'Helvetica Neue',\n          weight: 'normal',\n          borderRadius: 2\n        }\n      }\n    },\n    tooltip: {\n      offsetLeft: 4,\n      offsetTop: 6,\n      offsetRight: 4,\n      offsetBottom: 6,\n      // 'always' | 'follow_cross' | 'none'\n      showRule: 'always',\n      // 'standard' | 'rect'\n      showType: 'standard',\n      // e.g.\n      // [{ title: 'time', value: '{time}' }, { title: 'close', value: '{close}' }]\n      // [{ title: { text: 'time', color: '#fff' }, value: { text: '{time}', color: '#fff' } }, { title: 'close', value: '{close}' }]\n      custom: [\n        { title: 'time', value: '{time}' },\n        { title: 'open', value: '{open}' },\n        { title: 'high', value: '{high}' },\n        { title: 'low', value: '{low}' },\n        { title: 'close', value: '{close}' },\n        { title: 'volume', value: '{volume}' }\n      ],\n      defaultValue: 'n/a',\n      rect: {\n       // 'fixed' | 'pointer'\n        position: 'fixed',\n        paddingLeft: 4,\n        paddingRight: 4,\n        paddingTop: 4,\n        paddingBottom: 4,\n        offsetLeft: 4,\n        offsetTop: 4,\n        offsetRight: 4,\n        offsetBottom: 4,\n        borderRadius: 4,\n        borderSize: 1,\n        borderColor: '#f2f3f5',\n        color: '#FEFEFE'\n      },\n      text: {\n        size: 12,\n        family: 'Helvetica Neue',\n        weight: 'normal',\n        color: '#D9D9D9',\n        marginLeft: 8,\n        marginTop: 4,\n        marginRight: 8,\n        marginBottom: 4\n      },\n      // e.g.\n      // [{\n      //    id: 'icon_id',\n      //    position: 'left', // 'left', 'middle', 'right'\n      //    marginLeft: 8,\n      //    marginTop: 6,\n      //    marginRight: 0,\n      //    marginBottom: 0,\n      //    paddingLeft: 1,\n      //    paddingTop: 1,\n      //    paddingRight: 1,\n      //    paddingBottom: 1,\n      //    size: 12,\n      //    color: '#76808F',\n      //    activeColor: '#76808F',\n      //    backgroundColor: 'rgba(33, 150, 243, 0.2)',\n      //    activeBackgroundColor: 'rgba(33, 150, 243, 0.4)',\n      //    type: 'path', // 'path', 'iconFont'\n      //    path: {\n      //      style: 'stroke', // 'stroke', 'fill'\n      //      path: 'M6.81029,6.02908L11.7878,1.02746C12.0193,0.79483,12.0193,0.445881,11.7878,0.213247C11.5563,-0.019386,11.209,-0.019386,10.9775,0.213247L6,5.21486L1.02251,0.174475C0.790997,-0.0581583,0.44373,-0.0581583,0.212219,0.174475C-0.0192925,0.407108,-0.0192925,0.756058,0.212219,0.988691L5.18971,6.02908L0.173633,11.0307C-0.0578778,11.2633,-0.0578778,11.6123,0.173633,11.8449C0.289389,11.9612,0.44373,12,0.598071,12C0.752411,12,0.906752,11.9612,1.02251,11.8449L6,6.8433L10.9775,11.8449C11.0932,11.9612,11.2476,12,11.4019,12C11.5563,12,11.7106,11.9612,11.8264,11.8449C12.0579,11.6123,12.0579,11.2633,11.8264,11.0307L6.81029,6.02908Z',\n      //      lineWidth: 1,\n      //    },\n      //    iconFont: {\n      //      content: '\\ue900',\n      //      family: 'iconfont'\n      //    }\n      // }]\n      features: []\n    }\n  },\n  indicator: {\n    ohlc: {\n      // 'current_open' | 'previous_close'\n      compareRule: 'current_open',\n      upColor: 'rgba(45, 192, 142, .7)',\n      downColor: 'rgba(249, 40, 85, .7)',\n      noChangeColor: '#888888'\n    },\n    bars: [{\n      // 'fill' | 'stroke' | 'stroke_fill'\n      style: 'fill',\n      // 'solid' | 'dashed'\n      borderStyle: 'solid',\n      borderSize: 1,\n      borderDashedValue: [2, 2],\n      upColor: 'rgba(45, 192, 142, .7)',\n      downColor: 'rgba(249, 40, 85, .7)',\n      noChangeColor: '#888888'\n    }],\n    lines: [\n      {\n        // 'solid' | 'dashed'\n        style: 'solid',\n        smooth: false,\n        size: 1,\n        dashedValue: [2, 2],\n        color: '#FF9600'\n      }, {\n        style: 'solid',\n        smooth: false,\n        size: 1,\n        dashedValue: [2, 2],\n        color: '#935EBD'\n      }, {\n        style: 'solid',\n        smooth: false,\n        size: 1,\n        dashedValue: [2, 2],\n        color: '#2196F3'\n      }, {\n        style: 'solid',\n        smooth: false,\n        size: 1,\n        dashedValue: [2, 2],\n        color: '#E11D74'\n      }, {\n        style: 'solid',\n        smooth: false,\n        size: 1,\n        dashedValue: [2, 2],\n        color: '#01C5C4'\n      }\n    ],\n    circles: [{\n      // 'fill' | 'stroke' | 'stroke_fill'\n      style: 'fill',\n      // 'solid' | 'dashed'\n      borderStyle: 'solid',\n      borderSize: 1,\n      borderDashedValue: [2, 2],\n      upColor: 'rgba(45, 192, 142, .7)',\n      downColor: 'rgba(249, 40, 85, .7)',\n      noChangeColor: '#888888'\n    }],\n    lastValueMark: {\n      show: false,\n      text: {\n        show: false,\n        // 'fill' | 'stroke' | 'stroke_fill'\n        style: 'fill',\n        color: '#FFFFFF',\n        size: 12,\n        family: 'Helvetica Neue',\n        weight: 'normal',\n        // 'solid' | 'dashed'\n        borderStyle: 'solid',\n        borderSize: 1,\n        borderDashedValue: [2, 2],\n        paddingLeft: 4,\n        paddingTop: 4,\n        paddingRight: 4,\n        paddingBottom: 4,\n        borderRadius: 2\n      }\n    },\n    tooltip: {\n      offsetLeft: 4,\n      offsetTop: 6,\n      offsetRight: 4,\n      offsetBottom: 6,\n      // 'always' | 'follow_cross' | 'none'\n      showRule: 'always',\n      // 'standard' | 'rect'\n      showType: 'standard',\n      showName: true,\n      showParams: true,\n      defaultValue: 'n/a',\n      text: {\n        size: 12,\n        family: 'Helvetica Neue',\n        weight: 'normal',\n        color: '#D9D9D9',\n        marginTop: 4,\n        marginRight: 8,\n        marginBottom: 4,\n        marginLeft: 8\n      },\n      // e.g.\n      // [{\n      //    id: 'icon_id',\n      //    position: 'left', // 'left', 'middle', 'right'\n      //    marginLeft: 8,\n      //    marginTop: 6,\n      //    marginRight: 0,\n      //    marginBottom: 0,\n      //    paddingLeft: 1,\n      //    paddingTop: 1,\n      //    paddingRight: 1,\n      //    paddingBottom: 1,\n      //    size: 12,\n      //    color: '#76808F',\n      //    activeColor: '#76808F',\n      //    backgroundColor: 'rgba(33, 150, 243, 0.2)',\n      //    activeBackgroundColor: 'rgba(33, 150, 243, 0.4)',\n      //    type: 'path', // 'path', 'iconFont'\n      //    path: {\n      //      style: 'stroke', // 'stroke', 'fill'\n      //      path: 'M6.81029,6.02908L11.7878,1.02746C12.0193,0.79483,12.0193,0.445881,11.7878,0.213247C11.5563,-0.019386,11.209,-0.019386,10.9775,0.213247L6,5.21486L1.02251,0.174475C0.790997,-0.0581583,0.44373,-0.0581583,0.212219,0.174475C-0.0192925,0.407108,-0.0192925,0.756058,0.212219,0.988691L5.18971,6.02908L0.173633,11.0307C-0.0578778,11.2633,-0.0578778,11.6123,0.173633,11.8449C0.289389,11.9612,0.44373,12,0.598071,12C0.752411,12,0.906752,11.9612,1.02251,11.8449L6,6.8433L10.9775,11.8449C11.0932,11.9612,11.2476,12,11.4019,12C11.5563,12,11.7106,11.9612,11.8264,11.8449C12.0579,11.6123,12.0579,11.2633,11.8264,11.0307L6.81029,6.02908Z',\n      //      lineWidth: 1,\n      //    },\n      //    iconFont: {\n      //      content: '\\ue900',\n      //      family: 'iconfont'\n      //    }\n      // }]\n      features: []\n    }\n  },\n  xAxis: {\n    show: true,\n    size: 'auto',\n    axisLine: {\n      show: true,\n      color: '#888888',\n      size: 1\n    },\n    tickText: {\n      show: true,\n      color: '#D9D9D9',\n      family: 'Helvetica Neue',\n      weight: 'normal',\n      size: 12,\n      marginStart: 4,\n      marginEnd: 4\n    },\n    tickLine: {\n      show: true,\n      size: 1,\n      length: 3,\n      color: '#888888'\n    }\n  },\n  yAxis: {\n    show: true,\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Klinecharts in a Preact Component\nDESCRIPTION: A Preact functional component that initializes a klinechart, populates it with candlestick financial data, and properly disposes of it when the component unmounts. Uses the useEffect hook to handle the chart's lifecycle.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/@views/quick-start/create-chart/preact.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useEffect } from 'preact/hooks'\nimport { init, dispose } from 'klinecharts'\n\nexport default () => {\n  useEffect(() => {\n    const chart = init('chart')\n\n    chart.applyNewData([\n      { close: 4976.16, high: 4977.99, low: 4970.12, open: 4972.89, timestamp: 1587660000000, volume: 204 },\n      { close: 4977.33, high: 4979.94, low: 4971.34, open: 4973.20, timestamp: 1587660060000, volume: 194 },\n      { close: 4977.93, high: 4977.93, low: 4974.20, open: 4976.53, timestamp: 1587660120000, volume: 197 },\n      { close: 4966.77, high: 4968.53, low: 4962.20, open: 4963.88, timestamp: 1587660180000, volume: 28 },\n      { close: 4961.56, high: 4972.61, low: 4961.28, open: 4961.28, timestamp: 1587660240000, volume: 184 },\n      { close: 4964.19, high: 4964.74, low: 4961.42, open: 4961.64, timestamp: 1587660300000, volume: 191 },\n      { close: 4968.93, high: 4972.70, low: 4964.55, open: 4966.96, timestamp: 1587660360000, volume: 105 },\n      { close: 4979.31, high: 4979.61, low: 4973.99, open: 4977.06, timestamp: 1587660420000, volume: 35 },\n      { close: 4977.02, high: 4981.66, low: 4975.14, open: 4981.66, timestamp: 1587660480000, volume: 135 },\n      { close: 4985.09, high: 4988.62, low: 4980.30, open: 4986.72, timestamp: 1587660540000, volume: 76 }\n    ])\n\n    return () => {\n      dispose('chart')\n    }\n  }, [])\n\n  return <div id=\"chart\" style={{ width: 600, height: 600 }}/>\n}\n```\n\n----------------------------------------\n\nTITLE: Creating KLineChart in Vanilla JavaScript\nDESCRIPTION: Basic implementation of KLineChart using vanilla JavaScript without any framework dependencies.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/@views/quick-start/create-chart/index.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n<!--@include: @/@views/quick-start/create-chart/vanilla.md-->\n```\n\n----------------------------------------\n\nTITLE: Basic KLineChart Initialization in JavaScript\nDESCRIPTION: Demonstrates the basic usage of the init() function to create a KLineChart instance. It requires a container element or ID and returns a Chart object.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/api/chart/init.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { init } from 'klinecharts'\n\nconst chart = init('container')\n```\n\n----------------------------------------\n\nTITLE: Defining Indicator Configuration Object in KLineChart\nDESCRIPTION: Structure of the indicator configuration object, including properties like name, id, precision, calculation parameters, visibility, and custom drawing methods.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/api/instance/createIndicator.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  name: String,\n  id: String,\n  shortName: String,\n  precision: Number,\n  calcParams: Array,\n  shouldOhlc: Boolean,\n  shouldFormatBigNumber: Boolean,\n  visible: Boolean,\n  zLevel: Number,\n  extendData: Object,\n  series: String,\n  figures: Array,\n  minValue: Number,\n  maxValue: Number,\n  styles: Object,\n  shouldUpdate: Function,\n  calc: Function,\n  regenerateFigures: Function,\n  createTooltipDataSource: Function,\n  draw: Function,\n  onClick: Function,\n  onDataStateChange: Function\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring KLineChart Styles and Components\nDESCRIPTION: Comprehensive configuration object that defines the visual appearance and behavior of various KLineChart elements including axis lines, crosshairs, overlays, and text styling. Includes settings for colors, sizes, borders, and position parameters.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/@views/styles/config.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    size: 'auto',\n    position: 'right',\n    type: 'normal',\n    inside: false,\n    reverse: false,\n    axisLine: {\n      show: true,\n      color: '#888888',\n      size: 1\n    },\n    tickText: {\n      show: true,\n      color: '#D9D9D9',\n      family: 'Helvetica Neue',\n      weight: 'normal',\n      size: 12,\n      marginStart: 4,\n      marginEnd: 4\n    },\n    tickLine: {\n      show: true,\n      size: 1,\n      length: 3,\n      color: '#888888'\n    },\n    separator: {\n      size: 1,\n      color: '#888888',\n      fill: true,\n      activeBackgroundColor: 'rgba(230, 230, 230, .15)'\n    },\n    crosshair: {\n      show: true,\n      horizontal: {\n        show: true,\n        line: {\n          show: true,\n          style: 'dashed',\n          dashedValue: [4, 2],\n          size: 1,\n          color: '#888888'\n        },\n        text: {\n          show: true,\n          style: 'fill',\n          color: '#FFFFFF',\n          size: 12,\n          family: 'Helvetica Neue',\n          weight: 'normal',\n          borderStyle: 'solid',\n          borderDashedValue: [2, 2],\n          borderSize: 1,\n          borderColor: '#686D76',\n          borderRadius: 2,\n          paddingLeft: 4,\n          paddingRight: 4,\n          paddingTop: 4,\n          paddingBottom: 4,\n          backgroundColor: '#686D76'\n        }\n      },\n      vertical: {\n        show: true,\n        line: {\n          show: true,\n          style: 'dashed',\n          dashedValue: [4, 2],\n          size: 1,\n          color: '#888888'\n        },\n        text: {\n          show: true,\n          style: 'fill',\n          color: '#FFFFFF',\n          size: 12,\n          family: 'Helvetica Neue',\n          weight: 'normal',\n          borderStyle: 'solid',\n          borderDashedValue: [2, 2],\n          borderSize: 1,\n          borderColor: '#686D76',\n          borderRadius: 2,\n          paddingLeft: 4,\n          paddingRight: 4,\n          paddingTop: 4,\n          paddingBottom: 4,\n          backgroundColor: '#686D76'\n        }\n      }\n    },\n    overlay: {\n      point: {\n        color: '#1677FF',\n        borderColor: 'rgba(22, 119, 255, 0.35)',\n        borderSize: 1,\n        radius: 5,\n        activeColor: '#1677FF',\n        activeBorderColor: 'rgba(22, 119, 255, 0.35)',\n        activeBorderSize: 3,\n        activeRadius: 5\n      },\n      line: {\n        style: 'solid',\n        smooth: false,\n        color: '#1677FF',\n        size: 1,\n        dashedValue: [2, 2]\n      },\n      rect: {\n        style: 'fill',\n        color: 'rgba(22, 119, 255, 0.25)',\n        borderColor: '#1677FF',\n        borderSize: 1,\n        borderRadius: 0,\n        borderStyle: 'solid',\n        borderDashedValue: [2, 2]\n      },\n      polygon: {\n        style: 'fill',\n        color: '#1677FF',\n        borderColor: '#1677FF',\n        borderSize: 1,\n        borderStyle: 'solid',\n        borderDashedValue: [2, 2]\n      },\n      circle: {\n        style: 'fill',\n        color: 'rgba(22, 119, 255, 0.25)',\n        borderColor: '#1677FF',\n        borderSize: 1,\n        borderStyle: 'solid',\n        borderDashedValue: [2, 2]\n      },\n      arc: {\n        style: 'solid',\n        color: '#1677FF',\n        size: 1,\n        dashedValue: [2, 2]\n      },\n      text: {\n        style: 'fill',\n        color: '#FFFFFF',\n        size: 12,\n        family: 'Helvetica Neue',\n        weight: 'normal',\n        borderStyle: 'solid',\n        borderDashedValue: [2, 2],\n        borderSize: 0,\n        borderRadius: 2,\n        borderColor: '#1677FF',\n        paddingLeft: 0,\n        paddingRight: 0,\n        paddingTop: 0,\n        paddingBottom: 0,\n        backgroundColor: '#1677FF'\n      }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using KLineCharts Figures in JavaScript\nDESCRIPTION: Example of how to use figures in KLineCharts. It demonstrates getting a figure class and instantiating it to draw on a canvas context.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/guide/figure.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Get the figure class\n// name is the name of the figure, such as 'arc', 'circle', etc.\nconst Figure = klinecharts.getFigureClass(name)\n// instantiate and draw\n// attrs attribute\n// styles styles\n// ctx canvas context\nnew Figure(attrs, styles).draw(ctx)\n```\n\n----------------------------------------\n\nTITLE: Creating KLineChart in Vue\nDESCRIPTION: Code showing how to implement KLineChart in a Vue application using ref and onMounted lifecycle hooks.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/@views/quick-start/create-chart/index.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<!--@include: @/@views/quick-start/create-chart/vue.md-->\n```\n\n----------------------------------------\n\nTITLE: Creating an Indicator in KLineChart\nDESCRIPTION: Function signature for creating an indicator in KLineChart. It takes an indicator configuration, a stacking flag, and optional pane options as parameters.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/api/instance/createIndicator.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ncreateIndicator(indicator, isStack?, paneOptions?)\n```\n\n----------------------------------------\n\nTITLE: Creating KLineChart in Angular\nDESCRIPTION: Implementation example for integrating KLineChart into an Angular application using ViewChild and AfterViewInit.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/@views/quick-start/create-chart/index.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n<!--@include: @/@views/quick-start/create-chart/angular.md-->\n```\n\n----------------------------------------\n\nTITLE: Creating Time-Sharing Chart in KLineChart\nDESCRIPTION: This snippet demonstrates how to create a time-sharing chart by setting the candle style to 'area' type using the setStyles method.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/guide/faq.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nchart.setStyles({\n  candle: {\n    type: 'area',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Applying New Data to KLineChart in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the applyNewData method to load new K-line data into a KLineChart instance. It specifies the data format and options for indicating if more data is available.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/api/instance/applyNewData.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nchart.applyNewData([\n  { timestamp: 1606972800000, open: 6.929, high: 6.944, low: 6.922, close: 6.935 },\n  { timestamp: 1606975500000, open: 6.935, high: 6.936, low: 6.920, close: 6.928 },\n  { timestamp: 1606978200000, open: 6.928, high: 6.935, low: 6.924, close: 6.933 }\n], {\n  backward: true,\n  forward: false\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Date Formatter in KLineChart\nDESCRIPTION: This snippet demonstrates how to set a custom date formatter for a KLineChart instance. It uses the setFormatter method to define a function that formats dates in a specific way.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/api/instance/setFormatter.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nchart.setFormatter({\n  formatDate: (dateTimeFormat, timestamp, format) => {\n    const date = new Date(timestamp)\n    const YY = date.getFullYear()\n    const MM = date.getMonth() + 1\n    const DD = date.getDate()\n    const hh = date.getHours()\n    const mm = date.getMinutes()\n    const ss = date.getSeconds()\n    return `${YY}-${MM}-${DD} ${hh}:${mm}:${ss}`\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Chart Styles with setStyles Method in KLineCharts\nDESCRIPTION: The setStyles method is used to set the chart style in KLineCharts. It accepts a styles parameter which can be a registered style name or a Styles object. The method supports incremental values and returns undefined.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/api/instance/setStyles.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsetStyles(styles)\n```\n\n----------------------------------------\n\nTITLE: Configuring Pane Options for Indicators in KLineChart\nDESCRIPTION: Structure of the pane options object, used to customize the pane where the indicator is displayed, including properties for size, draggability, and axis configuration.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/api/instance/createIndicator.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  id: String,\n  height: Number,\n  minHeight: Number,\n  dragEnabled: Boolean,\n  order: Number,\n  state: String,\n  axis: {\n    name: String,\n    reverse: Boolean,\n    inside: Boolean,\n    position: String,\n    scrollZoomEnabled: Boolean,\n    gap: {\n      top: Number,\n      bottom: Number\n    },\n    createRange: Function,\n    createTicks: Function\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Y-Axis in KLineChart\nDESCRIPTION: The registerYAxis method accepts a configuration object that defines how the Y-axis should behave and appear. This includes options for positioning, value transformations, display formatting, and zooming behavior.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/api/chart/registerYAxis.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nregisterYAxis(yAxis)\n```\n\n----------------------------------------\n\nTITLE: Setting Timezone in KLineChart\nDESCRIPTION: Function to set the timezone for a KLineChart instance. Takes a timezone name parameter (e.g. 'Asia/Shanghai') and modifies the chart's timezone settings. Returns undefined after execution.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/api/instance/setTimezone.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsetTimezone(timezone)\n```\n\n----------------------------------------\n\nTITLE: Calculating Linear Slope and Intercept in TypeScript\nDESCRIPTION: A utility method that calculates the slope (k) and intercept (b) of a line defined by two coordinates. Returns an array containing these values for use in the equation y = kx + b.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/api/chart/utils.md#2025-04-21_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n(\n   coordinate1: {\n      x: number\n      y: number\n   },\n   coordinate2: {\n      x: number\n      y: number\n   }\n) => []\n```\n\n----------------------------------------\n\nTITLE: Defining Event Callback Function Type in KlineChart\nDESCRIPTION: This TypeScript type definition specifies the structure for event callback functions in the KlineChart library. It defines a function that takes an event type (such as zoom, scroll, range change, tooltip click, crosshair change, candle bar click, or pane drag) and a callback function that receives event data.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/@views/api/references/instance/subscribeAction.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(\n  type: 'onZoom' |\n    'onScroll' |\n    'onVisibleRangeChange' |\n    'onCandleTooltipFeatureClick' |\n    'onCrosshairChange' |\n    'onCandleBarClick' |\n    'onPaneDrag',\n  cb: (data: unknown) => void\n) => void\n```\n\n----------------------------------------\n\nTITLE: Extending KLineChart Styles with Custom Templates in JavaScript\nDESCRIPTION: Demonstrates how to extend KLineChart's styles with a custom template. This example creates and applies a custom 'custom-style' theme.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/api/chart/init.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { init, registerStyles } from 'klinecharts'\n\nregisterStyles('custom-style', {\n  grid: {\n    horizontal: { color: '#1a1a1a' },\n    vertical: { color: '#1a1a1a' }\n  }\n})\n\nconst chart = init('container', {\n  styles: 'custom-style'\n})\n```\n\n----------------------------------------\n\nTITLE: Custom Layout Configuration for KLineChart in JavaScript\nDESCRIPTION: Shows how to initialize a KLineChart with a custom layout configuration. The layout includes multiple panes for different chart components like candlestick and indicators.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/api/chart/init.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst chart = klinecharts.init('container', {\n  layout: [\n    { type: 'candle', options: { height: 200 } },\n    { type: 'indicator', options: { height: 80 }, content: { name: 'VOL' } },\n    { type: 'indicator', options: { height: 80 }, content: { name: 'MACD' } },\n    { type: 'xAxis', options: { height: 20 } }\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Custom Layout Configuration for KLineChart in JavaScript\nDESCRIPTION: Shows how to initialize a KLineChart with a custom layout configuration. This example creates a chart with two indicator windows and a main candlestick window.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/api/chart/init.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { init } from 'klinecharts'\n\nconst chart = init('container', {\n  layout: [\n    { type: 'indicator', height: 100, content: 'VOL' },\n    { type: 'main', content: 'candle' },\n    { type: 'indicator', height: 100, content: 'MA' }\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Updating KLineChart Data Method Signature\nDESCRIPTION: Method signature for updating chart data. The method takes K-line data as input and updates the chart by either overwriting existing data with matching timestamps or appending new data with greater timestamps.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/api/instance/updateData.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nupdateData(data): undefined\n```\n\n----------------------------------------\n\nTITLE: Y-Axis Configuration Interface Definition in TypeScript\nDESCRIPTION: Comprehensive interface definition for Y-axis configuration options including position settings, value transformations, display formatting, and tick generation. Provides type definitions for callback functions handling coordinate systems and value conversions.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/@views/api/references/chart/registerYAxis.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(\n  yAxis: {\n    name: string\n    reverse?: boolean\n    inside?: boolean\n    position?: 'left' | 'right'\n    scrollZoomEnabled?: boolean\n    gap?: {\n      top?: number\n      bottom?: number\n    }\n    valueToRealValue?: (value: number, params: object) => number\n    realValueToDisplayValue?: (value: number, params: object) => number\n    displayValueToRealValue?: (value: number, params: object) => number\n    realValueToValue?: (value: number, params: object) => number\n    displayValueToText?: (value: number, precision: number) => string\n    minSpan?: (precision: number) => number\n    createRange?: (params: object) => ({\n      from: number\n      to: number\n      range: number\n      realFrom: number\n      realTo: number\n      realRange: number\n      displayFrom: number\n      displayTo: number\n      displayRange: number\n    })\n    createTicks?: (params: object) => Array<{\n      coord: number\n      value: number | string\n      text: string\n    }>\n  }\n) => void\n```\n\n----------------------------------------\n\nTITLE: Defining scrollToDataIndex Method in KLineCharts\nDESCRIPTION: Defines the scrollToDataIndex method signature, which scrolls the right side of the chart to a specified data index position. It takes a dataIndex parameter and an optional animationDuration parameter.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/api/instance/scrollToDataIndex.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# scrollToDataIndex(dataIndex, animationDuration?)\n```\n\n----------------------------------------\n\nTITLE: Configuring Real-Time Chart Display in KLineChart\nDESCRIPTION: Sets up the chart style for real-time display by configuring the candle type as an area chart. This modification changes the traditional candlestick visualization to a continuous area display more suitable for real-time data.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/guide/faq.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nchart.setStyles({\n  candle: {\n    type: 'area',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Traditional Chinese Locale in KLineCharts\nDESCRIPTION: Example demonstrating how to register a new language locale (Traditional Chinese) using klinecharts.registerLocale(). Shows the setup of time, price, volume, turnover, and change text translations.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/guide/i18n.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nklinecharts.registerLocale('zh-HK', {\n  time: '時間：',\n  open: '開：',\n  high: '高：',\n  low: '低：',\n  close: '收：',\n  volume: '成交量：',\n  turnover: '成交額：',\n  change: '漲幅：'\n})\n```\n\n----------------------------------------\n\nTITLE: Declaring applyNewData Method with Parameters\nDESCRIPTION: Method signature for applyNewData that takes a dataList array containing K-line data and an optional more parameter to indicate if more data can be loaded in either direction.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/api/instance/applyNewData.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\napplyNewData(dataList, more?)\n```\n\n----------------------------------------\n\nTITLE: Formatting Large Numbers in TypeScript\nDESCRIPTION: A utility method that formats large numbers into abbreviated forms, such as converting 1000 to 1k or 1000000 to 1M. Makes large numbers more readable for display purposes.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/api/chart/utils.md#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n(value: string | number) => string\n```\n\n----------------------------------------\n\nTITLE: Declaring zoomAtCoordinate Function for KLineChart in JavaScript\nDESCRIPTION: Function signature for zoomAtCoordinate in KLineChart. It takes scale, coordinate, and animationDuration as parameters and returns undefined.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/api/instance/zoomAtCoordinate.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nzoomAtCoordinate(scale, coordinate?, animationDuration?)\n```\n\n----------------------------------------\n\nTITLE: Defining KLineChart Options Interface in TypeScript\nDESCRIPTION: This TypeScript definition specifies the configuration options for a KLineChart instance. It defines parameters for chart dimensions, interaction behaviors, display state, and axis configuration including custom ticks and range functions.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/@views/api/references/instance/setPaneOptions.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(\n  options?: {\n    id?: string\n    height?: number\n    minHeight?: number\n    dragEnabled?: boolean\n    order?: number\n    state?: 'normal' | 'maximize' | 'minimize'\n    axis?: {\n      name?: string\n      reverse?: boolean\n      inside?: boolean\n      position?: 'left' | 'right'\n      scrollZoomEnabled?: boolean\n      gap?: {\n        top?: number\n        bottom?: number\n      }\n      createRange?: (params: object) => ({\n        from: number\n        to: number\n        range: number\n        realFrom: number\n        realTo: number\n        realRange: number\n        displayFrom: number\n        displayTo: number\n        displayRange: number\n      })\n      createTicks?: (params: object) => Array<{\n        coord: number\n        value: number | string\n        text: string\n      }>\n    }\n  }\n) => void\n```\n\n----------------------------------------\n\nTITLE: Overriding Indicator Properties on Specific Pane in KLineChart\nDESCRIPTION: This example demonstrates how to override indicator properties on a specific pane using the paneId parameter. It modifies the MA indicator on the main pane (paneId = 'candle_pane') and the VOL indicator on the volume pane.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/api/instance/overrideIndicator.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nchart.overrideIndicator({\n  name: 'MA',\n  paneId: 'candle_pane',\n  visible: false\n})\n\nchart.overrideIndicator({\n  name: 'VOL',\n  paneId: 'volume_pane',\n  styles: {\n    bar: {\n      upColor: 'rgb(233, 47, 47)',\n      downColor: 'rgb(37, 141, 54)'\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Candlestick Bar Space in KLineChart\nDESCRIPTION: Method to set the spacing between candlesticks in a KLineChart. The space parameter accepts values between 1 and 50 pixels to control the width of each candlestick bar's allocated space.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/api/instance/setBarSpace.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsetBarSpace(space)\n```\n\n----------------------------------------\n\nTITLE: Defining Klinechart Overlay Configuration Interface in TypeScript\nDESCRIPTION: A TypeScript interface definition for configuring chart overlays in Klinechart. The interface includes properties for identification, visibility, positioning, interactivity modes, data points, styling, and numerous event handlers for user interactions like drawing, clicking, and moving.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/@views/api/references/instance/overrideOverlay.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(\n  overlay: {\n    name?: string\n    id?: string\n    groupId?: string\n    paneId?: string\n    lock?: boolean\n    visible?: boolean\n    zLevel?: number\n    needDefaultPointFigure?: boolean\n    needDefaultXAxisFigure?: boolean\n    needDefaultYAxisFigure?: boolean\n    mode?: 'normal' | 'weak_magnet' | 'strong_magnet'\n    modeSensitivity?: number\n    points?: Array<{ timestamp: number, dataIndex?: number, value?: number }>\n    extendData?: any\n    styles?: object\n    onDrawStart?: (event: object) => boolean\n    onDrawing?: (event: object) => boolean\n    onDrawEnd?: (event: object) => boolean\n    onClick?: (event: object) => boolean\n    onDoubleClick?: (event: object) => boolean\n    onRightClick?: (event: object) => boolean\n    onPressedMoveStart?: (event: object) => boolean\n    onPressedMoving?: (event: object) => boolean\n    onPressedMoveEnd?: (event: object) => boolean\n    onMouseEnter?: (event: object) => boolean\n    onMouseLeave?: (event: object) => boolean\n    onRemoved?: (event: object) => boolean\n    onSelected?: (event: object) => boolean\n    onDeselected?: (event: object) => boolean\n  }\n) => boolean\n```\n\n----------------------------------------\n\nTITLE: Scrolling Chart by Distance in KLineChart\nDESCRIPTION: Method signature and parameters for scrolling the chart by a specified distance. The method takes a distance parameter and an optional animation duration. Returns undefined.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/api/instance/scrollByDistance.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscrollByDistance(distance, animationDuration?)\n```\n\n----------------------------------------\n\nTITLE: Overriding KLineChart Styles Directly in JavaScript\nDESCRIPTION: Shows how to override specific style properties of a KLineChart directly during initialization. This example changes the candle colors.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/api/chart/init.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { init } from 'klinecharts'\n\nconst chart = init('container', {\n  styles: {\n    candle: {\n      upColor: '#26A69A',\n      downColor: '#EF5350'\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Overlay Parameters in KLineChart\nDESCRIPTION: Comprehensive parameter object for configuring chart overlays including name, id, visibility, events, and style settings. This configuration controls the behavior, appearance and interaction handling of chart overlays.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/api/instance/overrideOverlay.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  name: String,\n  id: String,\n  groupId: String,\n  paneId: String,\n  lock: Boolean,\n  visible: Boolean,\n  zLevel: Number,\n  needDefaultPointFigure: Boolean,\n  needDefaultXAxisFigure: Boolean,\n  needDefaultYAxisFigure: Boolean,\n  mode: 'normal' | 'weak_magnet' | 'strong_magnet',\n  modeSensitivity: Number,\n  points: Array,\n  extendData: Any,\n  styles: Object,\n  onDrawStart: Function,\n  onDrawing: Function,\n  onDrawEnd: Function,\n  onClick: Function,\n  onDoubleClick: Function,\n  onRightClick: Function,\n  onPressedMoveStart: Function,\n  onPressedMoving: Function,\n  onPressedMoveEnd: Function,\n  onMouseEnter: Function,\n  onMouseLeave: Function,\n  onRemoved: Function,\n  onSelected: Function,\n  onDeselected: Function\n}\n```\n\n----------------------------------------\n\nTITLE: Extending KLineChart Localization with Custom Languages in JavaScript\nDESCRIPTION: Shows how to extend KLineChart's localization with a custom language. This example adds German language support.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/api/chart/init.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { init, registerLocale } from 'klinecharts'\n\nregisterLocale('de-DE', {\n  time: 'Zeit',\n  open: 'Eröffnung',\n  high: 'Hoch',\n  low: 'Tief',\n  close: 'Schluss'\n})\n\nconst chart = init('container', {\n  locale: 'de-DE'\n})\n```\n\n----------------------------------------\n\nTITLE: Checking if Value is Valid in TypeScript\nDESCRIPTION: A utility method that checks if a value is valid (not null, undefined, etc.). Returns a boolean indicating whether the input is considered valid.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/api/chart/utils.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n(value: any) => boolean\n```\n\n----------------------------------------\n\nTITLE: Defining Indicator Interface in TypeScript for KLineChart\nDESCRIPTION: This TypeScript definition specifies the structure and properties of an indicator object in the KLineChart library. It includes properties for identification (id, name), calculation parameters, visualization settings, styling options, and callback functions for calculating values, generating tooltips, handling events, and rendering.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/@views/api/references/instance/overrideIndicator.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(\n  indicator: {\n    id?: string\n    paneId?: string\n    name?: string\n    shortName?: string\n    precision?: number\n    calcParams?: unknown[]\n    shouldOhlc?: boolean\n    shouldFormatBigNumber?: boolean\n    visible?: boolean\n    zLevel?: number\n    extendData?: unknown\n    series?: 'normal' | 'price' | 'volume',\n    figures?: Array<{\n      key: string\n      title?: string\n      type?: string\n      baseValue?: number\n      attrs?: (params: object) => object\n      styles?: (params: object) => object\n    }>\n    minValue?: number\n    maxValue?: number\n    styles?: Partial<IndicatorStyle>\n    shouldUpdate?: (prev: Indicator, current: Indicator) => (boolean | { calc: boolean, draw: boolean })\n    calc?: (kLineDataList: KLineData[], indicator: Indicator) => unknown[] | Promise<unknown[]>\n    regenerateFigures?: (calcParams: unknown[]) => Array<{\n      key: string\n      title?: string\n      type?: string\n      baseValue?: number\n      attrs?: (params: object) => object\n      styles?: (params: object) => object\n    }>\n    createTooltipDataSource?: (params: object) => ({\n      name?: string\n      calcParamsText?: string\n      features?: Array<{\n        id?: string\n        position?: 'left' | 'middle' | 'right'\n        marginLeft?: number\n        marginTop?: number\n        marginRight?: number\n        marginBottom?: number\n        paddingLeft?: number\n        paddingTop?: number\n        paddingRight?: number\n        paddingBottom?: number\n        size?: number\n        color?: string\n        activeColor?: string\n        backgroundColor?: string\n        activeBackgroundColor?: string\n        type?: 'path' | 'iconFont'\n        path?: {\n          style?: 'stroke' | 'fill'\n          path?: string\n          lineWidth?: number\n        }\n        iconFont?: {\n          content?: string\n          family?: string\n        }\n      }>\n      legends?: Array<{\n        title: string |\n          {\n            text: string\n            color: string\n          }\n        value: string |\n          {\n            text: string\n            color: string\n          }\n      }>\n    })\n    draw?: (params: object) => boolean\n    onClick?: (params: object) => void\n    onDataStateChange?: (params: object) => void\n  }\n) => void\n```\n\n----------------------------------------\n\nTITLE: Creating Overlay for Buy/Sell Points in KLineChart\nDESCRIPTION: This snippet shows how to create an overlay for marking buy/sell points using the built-in 'simpleAnnotation' overlay type with the createOverlay method.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/guide/faq.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncreateOverlay({ name: 'simpleAnnotation', ... }, paneId)\n```\n\n----------------------------------------\n\nTITLE: Defining setPaneOptions Method for KLineChart in JavaScript\nDESCRIPTION: This snippet defines the setPaneOptions method for KLineChart, which is used to configure pane settings. It includes parameters for pane id, height, drag behavior, order, state, and axis configuration.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/api/instance/setPaneOptions.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsetPaneOptions(options)\n```\n\n----------------------------------------\n\nTITLE: Formatting Dates in TypeScript\nDESCRIPTION: A utility method for formatting timestamps into human-readable dates. Uses a specified format pattern (like 'YYYY-MM-DD HH:mm:ss') and the Intl.DateTimeFormat API for localization.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/api/chart/utils.md#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n(dateTimeFormat: Intl.DateTimeFormat, timestamp: number, format: string) => string\n```\n\n----------------------------------------\n\nTITLE: Creating KLineChart in Preact\nDESCRIPTION: Code snippet showing how to use KLineChart with Preact framework, including component setup and initialization.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/@views/quick-start/create-chart/index.md#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<!--@include: @/@views/quick-start/create-chart/preact.md-->\n```\n\n----------------------------------------\n\nTITLE: Creating KLineChart in Svelte\nDESCRIPTION: Implementation of KLineChart in a Svelte component using onMount lifecycle function.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/@views/quick-start/create-chart/index.md#2025-04-21_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<!--@include: @/@views/quick-start/create-chart/svelte.md-->\n```\n\n----------------------------------------\n\nTITLE: Setting Big Number Formatter in KLineChart\nDESCRIPTION: This snippet shows how to set a custom big number formatter for a KLineChart instance. It uses the setFormatter method to define a function that formats large numbers into a more readable format.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/api/instance/setFormatter.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nchart.setFormatter({\n  formatBigNumber: (value) => {\n    if (value > 1000000000) {\n      return `${(value / 1000000000).toFixed(3)}B`\n    }\n    if (value > 1000000) {\n      return `${(value / 1000000).toFixed(3)}M`\n    }\n    if (value > 1000) {\n      return `${(value / 1000).toFixed(3)}K`\n    }\n    return value\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Load More Data Callback in KLineChart\nDESCRIPTION: Method signature and usage for setLoadMoreDataCallback which configures how additional chart data is loaded. The callback handles loading more historical data when needed.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/api/instance/setLoadMoreDataCallback.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsetLoadMoreDataCallback(cb)\n```\n\n----------------------------------------\n\nTITLE: Batch Creating Overlays in KLineChart\nDESCRIPTION: Demonstrates how to create multiple overlays at once using the createOverlay method.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/api/instance/createOverlay.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n<CreateOverlayBatch/>\n```\n\n----------------------------------------\n\nTITLE: Setting KlineChart Styles Dynamically (JavaScript)\nDESCRIPTION: This code shows how to dynamically set styles for a KlineChart instance using the setStyles method. It can be used to update chart styles after initialization.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/guide/styles.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsetStyles(styles)\n```\n\n----------------------------------------\n\nTITLE: Creating Overlay with Predefined Points in KLineChart\nDESCRIPTION: Illustrates how to create an overlay with predefined points using the createOverlay method.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/api/instance/createOverlay.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<CreateOverlayPoints/>\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Overlay in KLineChart\nDESCRIPTION: Shows how to create a custom overlay by extending the base functionality of createOverlay.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/api/instance/createOverlay.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<CreateOverlayExtension/>\n```\n\n----------------------------------------\n\nTITLE: Formatting Large Numbers in KLineChart using JavaScript\nDESCRIPTION: Shows how to format large numbers in a KLineChart. This example converts large numbers to abbreviated forms like 'k' for thousands and 'M' for millions.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/api/chart/init.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { init } from 'klinecharts'\n\nconst chart = init('container', {\n  formatter: {\n    formatBigNumber: value => {\n      if (value > 1000000) {\n        return `${(value / 1000000).toFixed(2)}M`\n      }\n      if (value > 1000) {\n        return `${(value / 1000).toFixed(2)}k`\n      }\n      return value\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Applying Built-in Style Templates to KLineChart in JavaScript\nDESCRIPTION: Shows how to apply a built-in style template to a KLineChart. This example uses the 'dark' theme.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/api/chart/init.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { init } from 'klinecharts'\n\nconst chart = init('container', {\n  styles: 'dark'\n})\n```\n\n----------------------------------------\n\nTITLE: Custom Date Formatting for KLineChart in JavaScript\nDESCRIPTION: Demonstrates how to customize the date format in a KLineChart. This example formats the date to display only the month and day.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/api/chart/init.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst chart = klinecharts.init('container', {\n  formatter: {\n    formatDate: (dateTimeFormat, timestamp) => {\n      const date = new Date(timestamp)\n      return `${date.getMonth() + 1}-${date.getDate()}`\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Chart Styles with getStyles() in KLineChart\nDESCRIPTION: This snippet demonstrates how to use the getStyles() method to retrieve the complete style configuration of a KLineChart instance. The method does not accept any parameters and returns the Styles object.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/api/instance/getStyles.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst styles = chart.getStyles()\n```\n\n----------------------------------------\n\nTITLE: KLineChart Data Parameter Structure\nDESCRIPTION: The data parameter structure follows the standard K-line data format reference as specified in the data source guide. Returns undefined after updating the chart.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/api/instance/updateData.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Parameters {\n  data: KLineData // K-line data format\n}\n\ninterface Returns {\n  undefined\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Decimal Zero Folding in KLineChart using JavaScript\nDESCRIPTION: Shows how to implement custom decimal zero folding in a KLineChart. This example folds zeros after two decimal places.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/api/chart/init.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { init } from 'klinecharts'\n\nconst chart = init('container', {\n  decimalFold: {\n    format: value => {\n      return Number(value).toFixed(2)\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Removing Technical Indicators in KLineChart\nDESCRIPTION: Method for removing technical indicators from a chart based on filter conditions. Accepts optional filter parameters including indicator id, name, and paneId. Returns a boolean indicating success.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/api/instance/removeIndicator.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nremoveIndicator(filter?)\n```\n\n----------------------------------------\n\nTITLE: Using SubscribeAction in Vue Component\nDESCRIPTION: This snippet illustrates the basic usage of the `SubscribeAction` component in a Vue.js application. The script setup imports and prepares the `SubscribeAction` component, demonstrating how to incorporate the subscription functionality within a Vue component. This setup allows developers to harness interactive chart functionalities in Vue-based applications.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/api/instance/subscribeAction.md#2025-04-21_snippet_1\n\nLANGUAGE: Vue\nCODE:\n```\n<script setup>\\nimport SubscribeAction from '../../../@views/api/samples/subscribeAction/index.vue'\\n</script>\\n\\n### Basic usage {#basic}\\n<SubscribeAction/>\n```\n\n----------------------------------------\n\nTITLE: Overriding Indicator Properties in KLineChart\nDESCRIPTION: The overrideIndicator method is used to override indicator attributes in KLineChart. It takes an indicator configuration object as a parameter and returns undefined. The method can be used to modify various properties of an indicator, including its visibility, precision, calculation parameters, and more.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/api/instance/overrideIndicator.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nchart.overrideIndicator({\n  name: 'MA',\n  calcParams: [5, 10, 30, 60],\n  precision: 4,\n  styles: {\n    margin: {\n      top: 10,\n      bottom: 10\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Checking if a Coordinate is on a Rectangle in TypeScript\nDESCRIPTION: A utility method that determines whether a given coordinate point lies on a rectangle. Takes a coordinate and rectangle parameters including position, width, and height.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/api/chart/utils.md#2025-04-21_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\n(\n   coordinate: {\n      x: number\n      y: number\n   },\n   rect: {\n      x: number\n      y: number\n      width: number\n      height: number\n   }\n) => boolean\n```\n\n----------------------------------------\n\nTITLE: Formatting Numerical Precision in TypeScript\nDESCRIPTION: A utility method that formats a number to a specified precision. Takes a string or number value and returns a formatted string with the desired decimal places.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/api/chart/utils.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n(value: string | number, precision?: number) => string\n```\n\n----------------------------------------\n\nTITLE: Setting Price and Volume Precision in KLineChart\nDESCRIPTION: The setPrecision method is used to set the price and volume precision for the chart. It takes an object with 'price' and 'volume' properties as its parameter and returns undefined.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/api/instance/setPrecision.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsetPrecision(precision)\n```\n\n----------------------------------------\n\nTITLE: Setting Chart Precision with setPrecision Method in KLineChart\nDESCRIPTION: The setPrecision method is used to configure the display precision for price and volume values in the chart. It accepts an object with price and volume precision settings and returns undefined after applying the configuration.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/api/instance/setPrecision.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsetPrecision(precision)\n```\n\n----------------------------------------\n\nTITLE: Customizing Date Format in KLineChart using JavaScript\nDESCRIPTION: Demonstrates how to customize the date format in a KLineChart. This example formats the date to show only the month and day.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/api/chart/init.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { init } from 'klinecharts'\n\nconst chart = init('container', {\n  formatter: {\n    formatDate: (dateTimeFormat, timestamp) => {\n      const date = new Date(timestamp)\n      return `${date.getMonth() + 1}-${date.getDate()}`\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: 调用getConvertPictureUrl函数获取图表图片URL (JavaScript)\nDESCRIPTION: 这段代码演示了如何使用getConvertPictureUrl函数来获取图表转换成图片后的URL。函数可以指定是否包含浮层、图片类型和背景色。\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/api/instance/getConvertPictureUrl.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngetConvertPictureUrl(includeOverlay?, type?, backgroundColor?)\n```\n\n----------------------------------------\n\nTITLE: Checking if a Coordinate is on a Circle in TypeScript\nDESCRIPTION: A utility method that determines whether a given coordinate point lies on a circle. Takes a coordinate and circle parameters including center position and radius.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/api/chart/utils.md#2025-04-21_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\n(\n   coordinate: {\n      x: number\n      y: number\n   },\n   circle: {\n      x: number\n      y: number\n      r: number\n   }\n) => boolean\n```\n\n----------------------------------------\n\nTITLE: Retrieving Visible Range in KLineChart (JavaScript)\nDESCRIPTION: The getVisibleRange() method is used to obtain the visible range information of the chart. It doesn't accept any parameters and returns a VisibleRange object containing range information.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/api/instance/getVisibleRange.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngetVisibleRange()\n```\n\n----------------------------------------\n\nTITLE: Setting Thousands Separator Configuration in KLineChart\nDESCRIPTION: The setThousandsSeparator method configures how numbers are formatted with thousands separators. It accepts a configuration object with either a 'sign' property for basic separation or a 'format' function for custom formatting. The method returns undefined.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/api/instance/setThousandsSeparator.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsetThousandsSeparator({\n  sign: string | boolean,\n  format?: (value: number) => string\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Nested Object Properties in TypeScript\nDESCRIPTION: A utility method that retrieves a value from a nested object using a dot-notation path. Supports accessing deeply nested properties and provides a default value if the property doesn't exist.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/api/chart/utils.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n(data: any, key: string, defaultValue?: any) => any\n```\n\n----------------------------------------\n\nTITLE: Defining Data Loading Callback Function Type in TypeScript for KLineChart\nDESCRIPTION: TypeScript type definition for a callback function that handles data loading in a KLineChart. The function takes a parameter object containing the loading direction ('forward' or 'backward'), the current data point, and a callback function to receive the loaded data.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/@views/api/references/instance/setLoadMoreDataCallback.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(\n  cb: (params: { \n    type: 'forward' | 'backward'\n    data: Nullable<KLineData>\n    callback: (dataList: KLineData[], more?: boolean) => void\n  }) => void\n) => void\n```\n\n----------------------------------------\n\nTITLE: Custom Decimal Folding in KLineChart JavaScript\nDESCRIPTION: Shows how to customize the folding of trailing zeros in decimal numbers for a KLineChart. This example keeps at least two decimal places.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/api/chart/init.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst chart = klinecharts.init('container', {\n  decimalFold: {\n    format: (value) => {\n      return Number(value).toFixed(2)\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Formatting Folded Decimals in TypeScript\nDESCRIPTION: A utility method that formats decimal numbers by folding them based on a threshold. Introduced in version 9.8.0, it helps simplify the display of decimal values that exceed a certain threshold.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/api/chart/utils.md#2025-04-21_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n(value: string | number, threshold: number) => string\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Chart Actions using subscribeAction in JavaScript\nDESCRIPTION: The subscribeAction method is used to subscribe to various chart actions in KLineChart. It takes two parameters: the action type and a callback function. The method returns undefined.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/api/instance/subscribeAction.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsubscribeAction(type, cb)\n```\n\n----------------------------------------\n\nTITLE: Getting Indicator Information with getIndicators Method in KLineChart\nDESCRIPTION: The getIndicators method retrieves an array of indicator information from a KLineChart instance. It optionally accepts filter parameters to narrow results by indicator id, name, or paneId.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/api/instance/getIndicators.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngetIndicators(filter?)\n```\n\n----------------------------------------\n\nTITLE: Defining zoomAtTimestamp Method for KLineChart in JavaScript\nDESCRIPTION: This snippet defines the zoomAtTimestamp method for KLineChart. It takes scale, timestamp, and optional animationDuration as parameters. The method zooms the chart to a specified timestamp with the given scale.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/api/instance/zoomAtTimestamp.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nzoomAtTimestamp(scale, timestamp, animationDuration?)\n```\n\n----------------------------------------\n\nTITLE: Screenshot Generation Function Type Definition in TypeScript\nDESCRIPTION: Function type definition that takes optional parameters for including overlay elements, specifying image format (png/jpeg/bmp), and setting background color. Returns a string representation of the generated image.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/@views/api/references/instance/getConvertPictureUrl.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(\n  includeOverlay?: boolean,\n  type?: 'png' | 'jpeg' | 'bmp',\n  backgroundColor?: string\n) => string\n```\n\n----------------------------------------\n\nTITLE: Converting KLineChart to Image URL\nDESCRIPTION: Method to convert a KLineChart instance into an image URL. Supports PNG, JPEG, and BMP formats with options for including overlays and setting background color.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/api/instance/getConvertPictureUrl.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngetConvertPictureUrl(includeOverlay?, type?, backgroundColor?)\n```\n\n----------------------------------------\n\nTITLE: Deep Cloning Objects in TypeScript\nDESCRIPTION: A utility method for creating a deep copy of any data structure. This function takes any value as input and returns a completely independent copy of it.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/api/chart/utils.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(target: any) => any\n```\n\n----------------------------------------\n\nTITLE: Instance API Changes - KLineCharts Migration\nDESCRIPTION: Documents removed and modified instance methods, parameter changes, and return value modifications.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/guide/v9-to-v10.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n+ Remove `setPriceVolumePrecision(pricePrecision, volumePrecision)`, please use `setPrecision(precision)` instead.\n+ Remove `applyMoreData(dataList, more, callback)` , `setLoadDataCallback(cb)` and `loadMore(cb)` , please use `setLoadMoreDataCallback(cb)` instead.\n+ Remove `getIndicatorByPaneId(paneId, name)`, please use `getIndicators(filter)` instead.\n+ Remove `getOverlayById(id)`, please use `getOverlays(filter)` instead.\n+ Remove `onTooltipIconClick` in `subscribeAction` and `unsubscribeAction`, use `onCandleTooltipFeatureClick` and `onClick` in indicators instead.\n+ `applyNewData(dataList, more, callback)` is changed to `applyNewData(dataList, more)` .\n+ `updateData(data, callback)` is changed to `updateData(data)` .\n+ `getBarSpace()` return value changed to object.\n+ `createIndicator` return value changed to return indicator id.\n```\n\n----------------------------------------\n\nTITLE: Zooming Chart at Specific Data Index\nDESCRIPTION: Method signature and parameters for zooming a KLineChart at a specified data index. Takes a scale factor, data index, and optional animation duration. Returns undefined.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/api/instance/zoomAtDataIndex.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nzoomAtDataIndex(scale, dataIndex, animationDuration?)\n```\n\n----------------------------------------\n\nTITLE: Defining scrollToRealTime Method for KLineChart in JavaScript\nDESCRIPTION: This code snippet defines the scrollToRealTime method for the KLineChart library. It scrolls the chart to the position of the latest data, with an optional animation duration.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/api/instance/scrollToRealTime.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscrollToRealTime(animationDuration?)\n```\n\n----------------------------------------\n\nTITLE: Initializing KlineChart with Custom Styles (JavaScript)\nDESCRIPTION: This snippet demonstrates how to initialize a KlineChart with custom styles using the init method. It allows for customization of various chart elements.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/guide/styles.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ninit(ds, options)\n```\n\n----------------------------------------\n\nTITLE: Defining getOverlays Function Parameters in JavaScript\nDESCRIPTION: This snippet outlines the parameters for the getOverlays function. It takes an optional filter object that can include id, name, groupId, and paneId for filtering overlays.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/api/instance/getOverlays.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  id: string,\n  name: string,\n  groupId: string,\n  paneId: string\n}\n```\n\n----------------------------------------\n\nTITLE: Localization Configuration for KLineChart in JavaScript\nDESCRIPTION: Demonstrates how to set the locale for a KLineChart. This example uses a built-in locale 'zh-CN' for Chinese language support.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/api/chart/init.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst chart = klinecharts.init('container', {\n  locale: 'zh-CN'\n})\n```\n\n----------------------------------------\n\nTITLE: Checking if a Coordinate is on an Arc in TypeScript\nDESCRIPTION: A utility method that determines whether a given coordinate point lies on an arc. Takes a coordinate and arc parameters including center position, radius, start angle, and end angle.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/api/chart/utils.md#2025-04-21_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n(\n   coordinate: {\n      x: number\n      y: number\n   },\n   arc: {\n      x: number\n      y: number\n      r: number\n      startAngle: number\n      endAngle: number\n   }\n) => boolean\n```\n\n----------------------------------------\n\nTITLE: Scrolling KLineChart to Data Index in JavaScript\nDESCRIPTION: The scrollToDataIndex method scrolls the rightmost part of the chart to a specified data index. It takes two parameters: dataIndex (required) and animationDuration (optional). If animationDuration is less than or equal to 0, there will be no animation.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/api/instance/scrollToDataIndex.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscrollToDataIndex(dataIndex, animationDuration?)\n```\n\n----------------------------------------\n\nTITLE: Custom Big Number Formatting for KLineChart in JavaScript\nDESCRIPTION: Shows how to customize the formatting of large numbers in a KLineChart. This example adds a custom suffix for millions and billions.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/api/chart/init.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst chart = klinecharts.init('container', {\n  formatter: {\n    formatBigNumber: (value) => {\n      if (value > 1000000000) {\n        return `${(value / 1000000000).toFixed(3)}B`\n      }\n      if (value > 1000000) {\n        return `${(value / 1000000).toFixed(3)}M`\n      }\n      if (value > 1000) {\n        return `${(value / 1000).toFixed(3)}K`\n      }\n      return value\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining KLineChart Data Update Callback Type\nDESCRIPTION: TypeScript type definition for a callback function that handles KLine chart data updates. Takes an array of KLineData and an optional boolean or object parameter to indicate the direction of data loading (forward/backward).\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/@views/api/references/instance/applyNewData.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(\n  dataList: KLineData[],\n  more?: boolean | {\n    forward?: boolean\n    backward?: boolean\n  }\n) => void\n```\n\n----------------------------------------\n\nTITLE: Decimal Fold Configuration Interface in TypeScript\nDESCRIPTION: Defines an interface for decimal folding that accepts an optional threshold number and an optional format function. The format function takes a number or string value and returns a formatted string.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/@views/api/references/instance/setDecimalFold.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(\n  decimalFold: {\n    threshold?: number\n    format?: (value: number | string) => string\n  }\n) => void\n```\n\n----------------------------------------\n\nTITLE: Getting Chart Size with getSize Method\nDESCRIPTION: The getSize method retrieves size information for different parts of the chart. It accepts optional parameters for paneId and position (root, main, or yAxis) and returns a Bounding object containing size dimensions.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/api/instance/getSize.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngetSize(paneId?, position?)\n```\n\n----------------------------------------\n\nTITLE: Calculating Y-Coordinate from Slope and Intercept in TypeScript\nDESCRIPTION: A utility method that calculates the y-coordinate of a point on a line defined by its slope and intercept. Takes an array containing k and b values and a target coordinate, returning the y-value.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/api/chart/utils.md#2025-04-21_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n(\n   kb: Array<number>,\n   targetCoordinate: {\n      x: number\n      y: number\n   }\n) => number\n```\n\n----------------------------------------\n\nTITLE: Setting Right Offset Distance in KlineChart\nDESCRIPTION: Method to set the distance between the last candlestick and the right edge of the chart. Takes a numeric distance parameter and returns undefined.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/api/instance/setOffsetRightDistance.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsetOffsetRightDistance(distance)\n```\n\n----------------------------------------\n\nTITLE: Unsubscribing Chart Actions in KLineChart\nDESCRIPTION: Method to unsubscribe from chart action events like zoom, scroll, and tooltip clicks. The method accepts an action type and optional callback parameter to either remove specific handlers or all handlers for that action type.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/api/instance/unsubscribeAction.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nunsubscribeAction(type, cb?)\n```\n\n----------------------------------------\n\nTITLE: Scrolling Chart to Timestamp Function\nDESCRIPTION: Method to scroll the right side of a KLineChart to a specified timestamp. Takes a timestamp parameter and an optional animation duration. Returns undefined.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/api/instance/scrollToTimestamp.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscrollToTimestamp(timestamp, animationDuration?)\n```\n\n----------------------------------------\n\nTITLE: Built-in Style Template for KLineChart in JavaScript\nDESCRIPTION: Shows how to apply a built-in style template to a KLineChart. This example uses the 'dark' theme.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/api/chart/init.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst chart = klinecharts.init('container', {\n  styles: 'dark'\n})\n```\n\n----------------------------------------\n\nTITLE: Filtering Overlays in KLineChart using TypeScript\nDESCRIPTION: This function signature defines a method to filter overlays in KLineChart. It accepts an optional filter object with properties for id, name, groupId, and paneId. The function returns an array of Overlay objects that match the specified criteria.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/@views/api/references/instance/getOverlays.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(\n  filter?: {\n    id?: string\n    name?: string\n    groupId?: string\n    paneId?: string\n  }\n) => Overlay[]\n```\n\n----------------------------------------\n\nTITLE: KLineChart中line基础图形的TypeScript定义\nDESCRIPTION: 定义了line基础图形的属性和样式。包括坐标集合属性，以及线条样式、尺寸、颜色等样式设置。\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/guide/figure.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nnew ({\n  attrs: {\n    // 坐标集合\n    coordinates: Array<{\n      x: number\n      y: number\n    }>\n  },\n  styles: {\n    // 样式，可选项`solid`，`dashed`\n    style?: 'solid' | 'dashed'\n    // 尺寸\n    size?: number\n    // 颜色\n    color?: string\n    // 虚线参数\n    dashedValue?: number[]\n  }\n}) => Figure\n```\n\n----------------------------------------\n\nTITLE: Executing Chart Actions with executeAction in KLineChart\nDESCRIPTION: The executeAction method is used to execute chart actions in KLineChart. It takes two parameters: type (only supports 'onCrosshairChange') and data. The method returns undefined.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/api/instance/executeAction.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexecuteAction(type, data)\n```\n\n----------------------------------------\n\nTITLE: Destroying KlineChart Instance\nDESCRIPTION: The dispose method is used to clean up and destroy a chart instance. It accepts either a chart instance, DOM element, or DOM element ID as its parameter and returns undefined.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/api/chart/dispose.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndispose(dcs)\n```\n\n----------------------------------------\n\nTITLE: applyNewData Parameters Structure\nDESCRIPTION: Definition of the parameters accepted by applyNewData method - dataList for K-line data array and more object for load more capabilities.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/api/instance/applyNewData.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  dataList: KLineData[],\n  more?: {\n    backward: boolean,\n    forward: boolean\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining VisibleRange Callback Type in TypeScript\nDESCRIPTION: TypeScript type definition for a callback function that returns a VisibleRange object. This function signature is used to define methods that calculate or return the visible range within a KLineChart component.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/@views/api/references/instance/getVisibleRange.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n() => VisibleRange\n```\n\n----------------------------------------\n\nTITLE: Retrieving Chart Data with getDataList()\nDESCRIPTION: The getDataList() method returns the current data points from a KLineChart instance as an array of KLineData objects. It requires no parameters and can be called directly on a chart instance.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/api/instance/getDataList.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngetDataList()\n```\n\n----------------------------------------\n\nTITLE: Checking if a Coordinate is on Text in TypeScript\nDESCRIPTION: A utility method that determines whether a given coordinate point lies on rendered text. Takes a coordinate, text parameters (content, position, alignment), and text styling information.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/api/chart/utils.md#2025-04-21_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\n(\n   coordinate: {\n      x: number\n      y: number\n   },\n   text: {\n      x: number\n      y: number\n      text: any\n      align?: 'center' | 'end' | 'left' | 'right' | 'start'\n      baseline?: 'alphabetic' | 'bottom' | 'hanging' | 'ideographic' | 'middle' | 'top'\n   },\n   styles: {\n      color?: string\n      size?: number\n      family?: string\n      weight?: number | string\n   }\n) => boolean\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Right Offset Distance in KLineChart\nDESCRIPTION: The setMaxOffsetRightDistance function sets the maximum distance from the last candlestick on the chart to the rightmost side. It takes a single parameter 'distance' and returns undefined.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/api/instance/setMaxOffsetRightDistance.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsetMaxOffsetRightDistance(distance)\n```\n\n----------------------------------------\n\nTITLE: Setting Chart Zoom Functionality\nDESCRIPTION: Method to enable or disable chart zooming capability. Takes a boolean parameter to control zoom state and returns undefined.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/api/instance/setZoomEnabled.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsetZoomEnabled(enabled)\n```\n\n----------------------------------------\n\nTITLE: Using getDom Method in KLineChart\nDESCRIPTION: The getDom method retrieves DOM elements from the chart. It accepts optional paneId and position parameters, where position can be 'root', 'main', or 'yAxis'. The method returns an HTMLElement or null if the element is not found.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/api/instance/getDom.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngetDom(paneId?, position?)\n```\n\n----------------------------------------\n\nTITLE: Coordinate Mapping Function Type Definition in TypeScript\nDESCRIPTION: This TypeScript type definition outlines a function that converts chart data points into screen coordinates. It accepts either a single data point or an array of points (with dataIndex, timestamp, or value properties) and an optional finder object for specifying pane context. The function returns corresponding coordinate objects with x and y values.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/@views/api/references/instance/convertToPixel.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(\n  value: {\n    dataIndex?: number\n    timestamp?: number\n    value?: number\n  } | Array<{\n    dataIndex?: number\n    timestamp?: number\n    value?: number\n  }>,\n  finder?: {\n    paneId?: string\n    absolute?: boolean\n  }\n) => { x: number?, y?: number } | Array<{ x?: number, y?: number }>\n```\n\n----------------------------------------\n\nTITLE: Getting Chart Pane Configuration in KLineChart\nDESCRIPTION: Method to retrieve configuration options for one or all panes in a KLineChart. Takes an optional pane ID parameter and returns either a single PaneOptions object, null, or an array of PaneOptions.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/api/instance/getPaneOptions.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngetPaneOptions(id?: string): PaneOptions | null | Array<PaneOptions>\n```\n\n----------------------------------------\n\nTITLE: Using clearData() Method in KLineChart\nDESCRIPTION: The clearData() method clears chart data without redrawing the chart. This method is typically handled internally by the library and doesn't need to be called manually to avoid repeated drawing operations.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/api/instance/clearData.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclearData()\n```\n\n----------------------------------------\n\nTITLE: Merging Objects in TypeScript\nDESCRIPTION: A utility method that merges one object (source) into another (target). This operation modifies the target object directly.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/api/chart/utils.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n(target: object, source: object) => void\n```\n\n----------------------------------------\n\nTITLE: Retrieving Price and Volume Precision in KLineChart\nDESCRIPTION: The getPrecision method retrieves a Precision object containing the precision values for price and volume data displayed in the chart. This method doesn't accept any parameters.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/api/instance/getPrecision.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngetPrecision()\n```\n\n----------------------------------------\n\nTITLE: Setting Decimal Fold Configuration in KLineChart\nDESCRIPTION: The setDecimalFold method is used to configure decimal folding in KLineChart. It takes a decimalFold object as a parameter, which includes a threshold for folding and an optional custom formatting method. The method returns undefined.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/api/instance/setDecimalFold.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsetDecimalFold(decimalFold)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Chart Right Offset Distance in KLineChart\nDESCRIPTION: Method to get the distance from the last candlestick to the right edge of the chart. Takes no parameters and returns a number representing the distance in pixels.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/api/instance/getOffsetRightDistance.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nchart.getOffsetRightDistance()\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum Left Visible Bar Count in KLineChart\nDESCRIPTION: Method to set the minimum number of candlesticks that should be visible on the left side of the chart. Takes a count parameter and returns undefined.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/api/instance/setLeftMinVisibleBarCount.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsetLeftMinVisibleBarCount(count)\n```\n\n----------------------------------------\n\nTITLE: Checking if a Coordinate is on a Line in TypeScript\nDESCRIPTION: A utility method that determines whether a given coordinate point lies on a line. Takes a coordinate and a line object containing an array of coordinates that define the line segments.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/api/chart/utils.md#2025-04-21_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\n(\n   coordinate: {\n      x: number\n      y: number\n   },\n   line: {\n      coordinates: Array<{\n         x: number\n         y: number\n      }>\n   }\n) => boolean\n```\n\n----------------------------------------\n\nTITLE: Getting Formatter API Reference in KLineChart\nDESCRIPTION: The getFormatter() method retrieves formatting API functionality for charts. It takes no parameters and returns a Formatter object containing custom formatting methods.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/api/instance/getFormatter.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst formatter = chart.getFormatter()\n```\n\n----------------------------------------\n\nTITLE: KlineChart Resize Method Definition\nDESCRIPTION: The resize() method is used to recalculate and adjust the size of all chart modules. It takes no parameters and returns undefined. Note that frequent calls may impact performance.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/api/instance/resize.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nresize()\n```\n\n----------------------------------------\n\nTITLE: Checking Scroll Functionality in KLineChart using isScrollEnabled()\nDESCRIPTION: The isScrollEnabled() method is used to check whether scrolling is possible in a KLineChart instance. It takes no parameters and returns a boolean value indicating whether scrolling is enabled.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/api/instance/isScrollEnabled.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nisScrollEnabled()\n```\n\n----------------------------------------\n\nTITLE: Built-in Overlay Types in KLineChart\nDESCRIPTION: List of all built-in overlay types available in KLineChart, including various line types and annotations.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/guide/overlay.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nhorizontalRayLine, horizontalSegment, horizontalStraightLine, verticalRayLine, verticalSegment, verticalStraightLine, rayLine, segment, straightLine, priceLine, priceChannelLine, parallelLine, fibonacciLine, circle, simpleAnnotation, simpleTag\n```\n\n----------------------------------------\n\nTITLE: Creating KLineChart in Solid\nDESCRIPTION: Example of implementing KLineChart in a Solid.js application using createSignal and onMount.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/@views/quick-start/create-chart/index.md#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<!--@include: @/@views/quick-start/create-chart/solid.md-->\n```\n\n----------------------------------------\n\nTITLE: Defining Locale Function Type for KLineChart in TypeScript\nDESCRIPTION: A TypeScript function type definition that specifies how to set the locale for a KLineChart. The function takes a locale identifier string and an object containing translated strings for various chart elements like time, open, high, low, close, volume, change, and turnover.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/@views/api/references/chart/registerLocale.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(\n  locale: string,\n  locales: {\n    time: string\n    open: string\n    high: string\n    low: string\n    close: string\n    volume: string\n    change: string\n    turnover: string\n  }\n) => void\n```\n\n----------------------------------------\n\nTITLE: Removing Overlays with Filter Parameters\nDESCRIPTION: Method signature and parameters for removing overlays from a chart. The method accepts optional filter conditions including id, name, groupId, and paneId to target specific overlays for removal.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/api/instance/removeOverlay.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nremoveOverlay(filter?: {\n  id?: string\n  name?: string\n  groupId?: string\n  paneId?: string\n}): boolean\n```\n\n----------------------------------------\n\nTITLE: Retrieving Chart Timezone using getTimezone() in KLineChart\nDESCRIPTION: The getTimezone() method is used to get the current timezone of a KLineChart instance. It doesn't accept any parameters and returns a string representing the timezone.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/api/instance/getTimezone.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst timezone = chart.getTimezone()\n```\n\n----------------------------------------\n\nTITLE: Setting Locale in KLineCharts\nDESCRIPTION: The setLocale function is used to set the locale for the chart. It takes a locale name as a parameter and returns undefined. Built-in locales include 'zh-CN' and 'en-US'.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/api/instance/setLocale.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsetLocale(locale)\n```\n\n----------------------------------------\n\nTITLE: Arc Figure Configuration in TypeScript\nDESCRIPTION: TypeScript interface for configuring an arc figure in KLineCharts. It specifies the attributes and styles that can be set for an arc.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/guide/figure.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nnew ({\n   attrs: {\n     // The x-axis coordinate value of the center of the circle\n     x: number\n     // The y-axis coordinate value of the center of the circle\n     y: number\n     // radius\n     r: number\n     // start angle\n     startAngle: number\n     // end angle\n     endAngle: number\n   },\n   styles: {\n     // style, optional `solid`, `dashed`\n     style?: 'solid' | 'dashed'\n     // size\n     size?: number\n     // color\n     color?: string\n     // dotted line parameter\n     dashedValue?: number[]\n   }\n}) => Figure\n```\n\n----------------------------------------\n\nTITLE: Custom Locale Extension for KLineChart in JavaScript\nDESCRIPTION: Shows how to extend KLineChart with a custom locale. This example adds support for the Spanish language.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/api/chart/init.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nklinecharts.registerLocale('es-ES', {\n  time: 'Tiempo',\n  open: 'Abrir',\n  high: 'Alto',\n  low: 'Bajo',\n  close: 'Cerrar',\n  volume: 'Volumen'\n})\nconst chart = klinecharts.init('container', {\n  locale: 'es-ES'\n})\n```\n\n----------------------------------------\n\nTITLE: Formatting Numbers with Thousands Separators in TypeScript\nDESCRIPTION: A utility method that formats numbers with thousands separators. Takes a numeric value and a separator sign, returning a string with the separators inserted at appropriate positions.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/api/chart/utils.md#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n(value: string | number, sign: string) => string\n```\n\n----------------------------------------\n\nTITLE: Retrieving Thousands Separator Configuration in KLineChart (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use the getThousandsSeparator() method to retrieve the thousands separator configuration from a KLineChart instance. The method doesn't accept any parameters and returns a ThousandsSeparator object.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/api/instance/getThousandsSeparator.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nchart.getThousandsSeparator()\n```\n\n----------------------------------------\n\nTITLE: Localizing KLineChart with Built-in Languages in JavaScript\nDESCRIPTION: Demonstrates how to set the locale for a KLineChart using built-in language support. This example sets the chart's language to English.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/api/chart/init.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { init } from 'klinecharts'\n\nconst chart = init('container', {\n  locale: 'en-US'\n})\n```\n\n----------------------------------------\n\nTITLE: Circle Figure Configuration in TypeScript\nDESCRIPTION: TypeScript interface for configuring a circle figure in KLineCharts. It defines the attributes and styles that can be set for a circle.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/guide/figure.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nnew ({\n   attrs: {\n     // The x-axis coordinate value of the center of the circle\n     x: number\n     // The y-axis coordinate value of the center of the circle\n     y: number\n     // radius\n     r: number\n   },\n   styles: {\n     // style, optional `fill`, `stroke`, `stroke_fill`\n     style?: 'fill' | 'stroke' | 'stroke_fill'\n     // color\n     color?: string\n     // border style\n     borderStyle?: 'solid' | 'dashed'\n     // border color\n     borderColor?: string\n     // frame size\n     borderSize?: number\n     // border dotted line parameters\n     borderDashedValue?: number[]\n   }\n}) => Figure\n```\n\n----------------------------------------\n\nTITLE: Checking if Value is a String in TypeScript\nDESCRIPTION: A utility method that tests whether a given value is a string. Returns a boolean indicating whether the input is of string type.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/api/chart/utils.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n(value: any) => boolean\n```\n\n----------------------------------------\n\nTITLE: Calculating Text Width in TypeScript\nDESCRIPTION: A utility method that calculates the width of text based on its content, size, weight, and font family. Useful for determining space requirements for text rendering in canvas or other drawing contexts.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/api/chart/utils.md#2025-04-21_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n(text: string, size?: number, weight?: string | number, family?: string) => number\n```\n\n----------------------------------------\n\nTITLE: Getting Supported Technical Indicators in KLineChart\nDESCRIPTION: The getSupportedIndicators method returns an array of strings representing all available technical indicators in the chart. This method takes no parameters and can be called on any initialized chart instance.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/api/chart/getSupportedIndicators.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngetSupportedIndicators()\n```\n\n----------------------------------------\n\nTITLE: Custom Style Template for KLineChart in JavaScript\nDESCRIPTION: Demonstrates how to create and apply a custom style template to a KLineChart. This example defines a new 'custom_style' with specific color settings.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/api/chart/init.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nklinecharts.registerStyles('custom_style', {\n  grid: {\n    horizontal: { color: '#393939' },\n    vertical: { color: '#393939' }\n  },\n  candle: {\n    priceMark: { high: { color: '#F5CB85' }, low: { color: '#F5CB85' } }\n  }\n})\nconst chart = klinecharts.init('container', {\n  styles: 'custom_style'\n})\n```\n\n----------------------------------------\n\nTITLE: Style Override for KLineChart in JavaScript\nDESCRIPTION: Shows how to override specific style properties of a KLineChart. This example changes the color of candlestick bars.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/api/chart/init.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst chart = klinecharts.init('container', {\n  styles: {\n    candle: {\n      bars: {\n        upColor: '#26A69A',\n        downColor: '#EF5350',\n        noChangeColor: '#888888'\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: 获取和使用KLineChart基础图形\nDESCRIPTION: 演示如何获取KLineChart中的基础图形类并实例化使用。需要在有画布上下文的情况下使用。\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/guide/figure.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// 获取基础图形实例\n// name为基础图形名字，如，'arc', 'circle'等。\nconst Figure = klinecharts.getFigureClass(name)\n// 实例化并绘制\n// attrs 属性\n// styles 样式\n// ctx 画布上下文\nnew Figure({ attrs, styles }).draw(ctx)\n```\n\n----------------------------------------\n\nTITLE: Timezone Configuration for KLineChart in JavaScript\nDESCRIPTION: Demonstrates how to set a specific timezone for a KLineChart. This example uses the 'America/New_York' timezone.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/api/chart/init.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst chart = klinecharts.init('container', {\n  timezone: 'America/New_York'\n})\n```\n\n----------------------------------------\n\nTITLE: Calculating Y-Coordinate on a Line from Two Points in TypeScript\nDESCRIPTION: A utility method that calculates the y-coordinate value of a point on a line defined by two other points. Takes three coordinate objects and returns the y-value at the target x-position.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/api/chart/utils.md#2025-04-21_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n(\n  coordinate1: {\n      x: number\n      y: number\n   },\n   coordinate2: {\n      x: number\n      y: number\n   },\n   targetCoordinate: {\n      x: number\n      y: number\n   }\n) => number\n```\n\n----------------------------------------\n\nTITLE: Getting Supported Figures in KLineChart\nDESCRIPTION: This code snippet demonstrates how to use the getSupportedFigures() function to retrieve the list of supported figures in a KLineChart instance. It doesn't require any parameters and returns an array of strings representing the supported figures.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/api/chart/getSupportedFigures.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nchart.getSupportedFigures()\n```\n\n----------------------------------------\n\nTITLE: Defining Formatter Type Interface in TypeScript for KlineChart\nDESCRIPTION: This TypeScript type definition specifies a formatter configuration object with optional methods for formatting dates and big numbers. The date formatter receives parameters including the date format, timestamp, template string, and context type (tooltip, crosshair, or xAxis), while the big number formatter handles string or number values.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/@views/api/references/instance/setFormatter.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(\n  formatter: {\n    formatDate?: (params: {\n      dateTimeFormat: Intl.DateTimeFormat\n      timestamp: number\n      template: string\n      type: 'tooltip' | 'crosshair' | 'xAxis'\n    }) => string\n    formatBigNumber?: (value: string | number) => string\n  }\n) => void\n```\n\n----------------------------------------\n\nTITLE: KLineChart中circle基础图形的TypeScript定义\nDESCRIPTION: 定义了circle基础图形的属性和样式。包括圆心坐标和半径等属性，以及填充样式、边框样式、颜色等样式设置。\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/guide/figure.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nnew ({\n  attrs: {\n    // 圆心x轴坐标值\n    x: number\n    // 圆心y轴坐标值\n    y: number\n    // 半径\n    r: number\n  },\n  styles: {\n    // 样式，可选项`fill`，`stroke`，`stroke_fill`\n    style?: 'fill' | 'stroke' | 'stroke_fill'\n    // 颜色\n    color?: string\n    // 边框样式\n    borderStyle?: 'solid' | 'dashed'\n    // 边框颜色\n    borderColor?: string\n    // 边框尺寸\n    borderSize?: number\n    // 边框虚线参数\n    borderDashedValue?: number[]\n  }\n}) => Figure\n```\n\n----------------------------------------\n\nTITLE: Retrieving Bounding Box Function Type in KLineChart\nDESCRIPTION: A TypeScript function type definition that accepts an optional pane ID string and position parameter ('root', 'main', or 'yAxis') and returns either a Bounding object or null. Used for getting dimensional information of chart components.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/@views/api/references/instance/getSize.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(paneId?: string, position?: 'root' | 'main' | 'yAxis') => Bounding | null\n```\n\n----------------------------------------\n\nTITLE: Checking if a Coordinate is on a Polygon in TypeScript\nDESCRIPTION: A utility method that determines whether a given coordinate point lies on a polygon. Takes a coordinate and a polygon object containing an array of coordinates that define the polygon vertices.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/api/chart/utils.md#2025-04-21_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\n(\n   coordinate: {\n      x: number\n      y: number\n   },\n   polygon: {\n      coordinates: Array<{\n         x: number\n         y: number\n      }>\n   }\n) => boolean\n```\n\n----------------------------------------\n\nTITLE: Checking Zoom Capability in KLineChart (JavaScript)\nDESCRIPTION: The isZoomEnabled() method is used to determine whether the chart can be scaled. It takes no parameters and returns a boolean value indicating whether zooming is enabled.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/api/instance/isZoomEnabled.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nisZoomEnabled()\n```\n\n----------------------------------------\n\nTITLE: Filter Function Type Definition in TypeScript\nDESCRIPTION: Defines a filter function type that takes an optional object parameter with id, name, groupId, and paneId properties. The function returns a boolean value indicating whether the filter criteria are met.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/@views/api/references/instance/removeOverlay.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(\n  filter?: {\n    id?: string\n    name?: string\n    groupId?: string\n    paneId?: string\n  }\n) => boolean\n```\n\n----------------------------------------\n\nTITLE: KLineChart中polygon基础图形的TypeScript定义\nDESCRIPTION: 定义了polygon基础图形的属性和样式。包括坐标集合属性，以及填充样式、边框样式、颜色等样式设置。\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/guide/figure.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nnew ({\n  attrs: {\n    // 坐标集合\n    coordinates: Array<{\n      x: number\n      y: number\n    }>\n  },\n  styles: {\n    // 样式，可选项`fill`，`stroke`，`stroke_fill`\n    style?: 'fill' | 'stroke' | 'stroke_fill'\n    // 颜色\n    color?: string\n    // 边框样式\n    borderStyle?: 'solid' | 'dashed'\n    // 边框颜色\n    borderColor?: string\n    // 边框尺寸\n    borderSize?: number\n    // 边框虚线参数\n    borderDashedValue?: number[]\n  }\n}) => Figure\n```\n\n----------------------------------------\n\nTITLE: Setting Timezone for KLineChart in JavaScript\nDESCRIPTION: Demonstrates how to set a specific timezone for a KLineChart. This example sets the chart's timezone to Shanghai.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/api/chart/init.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { init } from 'klinecharts'\n\nconst chart = init('container', {\n  timezone: 'Asia/Shanghai'\n})\n```\n\n----------------------------------------\n\nTITLE: Checking if Value is a Function in TypeScript\nDESCRIPTION: A utility method that tests whether a given value is a function. Returns a boolean indicating whether the input is a callable function.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/api/chart/utils.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n(value: any) => boolean\n```\n\n----------------------------------------\n\nTITLE: Defining Timestamp Navigation Function Type in TypeScript\nDESCRIPTION: TypeScript type definition for a function that accepts a timestamp parameter and an optional animation duration parameter. This function is designed to navigate to a specific point in time in a KLineChart visualization.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/@views/api/references/instance/scrollToTimestamp.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(timestamp: number, animationDuration?: number) => void\n```\n\n----------------------------------------\n\nTITLE: Function Type Signature for Retrieving Pane Options in TypeScript\nDESCRIPTION: Defines a TypeScript function type that accepts an optional string ID parameter and returns either a single PaneOptions object, null, or an array of PaneOptions. This function signature is used for retrieving configuration options for chart panes in the KLineChart library.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/@views/api/references/instance/getPaneOptions.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(id?: string) => PaneOptions | null | Array<PaneOptions>\n```\n\n----------------------------------------\n\nTITLE: Polygon Figure Configuration in TypeScript\nDESCRIPTION: TypeScript interface for configuring a polygon figure in KLineCharts. It defines the attributes and styles that can be set for a polygon.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/guide/figure.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nnew ({\n  attrs: {\n    // set of coordinates\n    coordinates: Array<{\n      x: number\n      y: number\n    }>\n  },\n  styles: {\n    // style, optional `fill`, `stroke`, `stroke_fill`\n    style?: 'fill' | 'stroke' | 'stroke_fill'\n    // color\n    color?: string\n    // border style\n    borderStyle?: 'solid' | 'dashed'\n    // border color\n    borderColor?: string\n    // frame size\n    borderSize?: number\n    // border dotted line parameter\n    borderDashedValue?: number[]\n  }\n}) => Figure\n```\n\n----------------------------------------\n\nTITLE: Defining Overlay Type in TypeScript for KLineChart\nDESCRIPTION: This TypeScript code defines the structure of an overlay object for KLineChart. It includes a name property, a draw function for rendering, and a checkEventOn function for event handling. The draw function takes a canvas context, attributes, and styles as parameters, while the checkEventOn function checks if an event occurred on the overlay.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/@views/api/references/chart/registerFigure.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(\n  overlay: {\n    name: string\n    draw: (ctx: CanvasRenderingContext2D, attrs: any, styles: object) => void\n    checkEventOn: (coordinate: Coordinate, attrs: any, styles: object) => boolean\n  }\n) => void\n```\n\n----------------------------------------\n\nTITLE: Defining Precision Configuration Function Type in TypeScript\nDESCRIPTION: A TypeScript function type definition that accepts an object parameter with optional price and volume precision settings. The function takes a configuration object and returns void, likely used for setting display precision in a financial chart.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/@views/api/references/instance/setPrecision.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(\n  precision: {\n    price?: number\n    volume?: number\n  }\n) => void\n```\n\n----------------------------------------\n\nTITLE: Line Figure Configuration in TypeScript\nDESCRIPTION: TypeScript interface for configuring a line figure in KLineCharts. It specifies the attributes and styles that can be set for a line.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/guide/figure.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nnew ({\n  attrs: {\n    // set of coordinates\n    coordinates: Array<{\n      x: number\n      y: number\n    }>\n  },\n  styles: {\n    // style, optional `solid`, `dashed`\n    style?: 'solid' | 'dashed'\n    // size\n    size?: number\n    // color\n    color?: string\n    // dotted line parameter\n    dashedValue?: number[]\n  }\n}) => Figure\n```\n\n----------------------------------------\n\nTITLE: Scale Animation Function Type Definition in TypeScript\nDESCRIPTION: Type definition for a function that handles chart scaling. Takes a scale number, timestamp, and optional animation duration as parameters. Used to control zoom/scale animations in KLineChart.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/@views/api/references/instance/zoomAtTimestamp.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(\n  scale: number,\n  timestamp: number, \n  animationDuration?: number\n) => void\n```\n\n----------------------------------------\n\nTITLE: Defining Event Listener Type for KLineChart in TypeScript\nDESCRIPTION: This code snippet defines a TypeScript type for event listener functions in KLineChart. It specifies the event types that can be listened to and the structure of the callback function. The callback function takes a single parameter of unknown type and returns void.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/@views/api/references/instance/unsubscribeAction.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(\n  type: 'onZoom' |\n    'onScroll' |\n    'onVisibleRangeChange' |\n    'onCandleTooltipFeatureClick' |\n    'onCrosshairChange' |\n    'onCandleBarClick' |\n    'onPaneDrag',\n  cb: (data: unknown) => void\n) => void\n```\n\n----------------------------------------\n\nTITLE: Defining X-Axis Configuration Interface in TypeScript for KLineChart\nDESCRIPTION: TypeScript type definition for configuring the X-axis in a KLineChart. It specifies required name property, optional scroll zoom enabling, and an optional function to create custom axis ticks with coordinate, value, and display text.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/@views/api/references/chart/registerXAxis.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(\n  xAxis: {\n    name: string\n    scrollZoomEnabled?: boolean\n    createTicks?: (params: object) => Array<{\n      coord: number\n      value: number | string\n      text: string\n    }>\n  }\n) => void\n```\n\n----------------------------------------\n\nTITLE: Rectangle Figure Configuration in TypeScript\nDESCRIPTION: TypeScript interface for configuring a rectangle figure in KLineCharts. It specifies the attributes and styles that can be set for a rectangle.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/guide/figure.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nnew ({\n  attrs: {\n    // The x-axis coordinate value of the starting point\n    x: number\n    // The y-axis coordinate value of the starting point\n    y: number\n    // width\n    width: number\n    // high\n    height: number\n  },\n  styles: {\n    // style, optional `fill`, `stroke`, `stroke_fill`\n    style?: 'fill' | 'stroke' | 'stroke_fill'\n    // color\n    color?: string\n    // border style\n    borderStyle?: 'solid' | 'dashed'\n    // border color\n    borderColor?: string\n    // frame size\n    borderSize?: number\n    // border dotted line parameters\n    borderDashedValue?: number[]\n    // Border fillet value\n    borderRadius?: number\n  }\n}) => Figure\n```\n\n----------------------------------------\n\nTITLE: Animation Duration Function Type Definition in TypeScript\nDESCRIPTION: Defines a function signature that takes an optional number parameter for animation duration and returns void. Used for configuring animation timing in KLineChart components.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/@views/api/references/instance/scrollToRealTime.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(animationDuration?: number) => void\n```\n\n----------------------------------------\n\nTITLE: Disabling Thousands Separator in KLineChart using JavaScript\nDESCRIPTION: Demonstrates how to disable the thousands separator in a KLineChart. This example removes the default thousands separator.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/api/chart/init.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { init } from 'klinecharts'\n\nconst chart = init('container', {\n  thousandsSeparator: {\n    sign: ''\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Function Type Definition for Figure Creation in TypeScript\nDESCRIPTION: Defines a TypeScript function type that takes a string parameter 'name' and returns a Figure object. This type definition is likely used for creating or retrieving figures in the KLineChart visualization library.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/@views/api/references/chart/getFigureClass.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(name: string) => Figure\n```\n\n----------------------------------------\n\nTITLE: Scale Function Type Definition in TypeScript\nDESCRIPTION: Defines a function type that takes a scale number, optional coordinate object with x and y properties, and optional animation duration. Returns void and is used for scaling operations with positioning control.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/@views/api/references/instance/zoomAtCoordinate.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(\n  scale: number,\n  coordinate?: {\n    x: number\n    y: number\n  }, \n  animationDuration?: number\n) => void\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for KLineChart Development\nDESCRIPTION: This snippet shows how to install the project dependencies using npm. The project requires a Node.js environment and can use npm, pnpm, or yarn as package managers.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/guide/local-development.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Root dir run\nnpm install\n```\n\n----------------------------------------\n\nTITLE: KLineChart HTML Element Retrieval Function Type in TypeScript\nDESCRIPTION: This TypeScript type definition describes a function that accepts an optional pane ID and position parameter to retrieve an HTML element from a chart. The function returns either an HTMLElement or null if no element is found.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/@views/api/references/instance/getDom.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(paneId?: string, position?: 'root' | 'main' | 'yAxis') => HTMLElement | null\n```\n\n----------------------------------------\n\nTITLE: Defining Function Type with Union Parameter in TypeScript\nDESCRIPTION: TypeScript function type definition that accepts either an HTMLElement, a Chart object, or a string identifier as parameter and returns void. This type is likely used for functions that operate on chart elements across the KLineChart library.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/@views/api/references/chart/dispose.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(dcs: HTMLElement | Chart | string) => void\n```\n\n----------------------------------------\n\nTITLE: Defining Style Setter Function Type in KlineChart\nDESCRIPTION: A TypeScript type definition for a function that sets styles in KlineChart. The function accepts either a string parameter or a Styles object and doesn't return any value.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/@views/api/references/instance/setStyles.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(styles: string | Styles) => void\n```\n\n----------------------------------------\n\nTITLE: Getting Supported Locales in KLineChart\nDESCRIPTION: The getSupportedLocales() method returns an array of strings representing all available locale options supported by the chart. This method takes no parameters and returns a string array containing locale identifiers.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/api/chart/getSupportedLocales.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngetSupportedLocales()\n```\n\n----------------------------------------\n\nTITLE: Calling setLeftMinVisibleBarCount Method in KLineChart\nDESCRIPTION: This snippet shows the method signature for setting the minimum number of candlestick bars that should be visible on the left side of a KLineChart. The method takes a count parameter and returns undefined.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/api/instance/setLeftMinVisibleBarCount.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nsetLeftMinVisibleBarCount(count)\n```\n\n----------------------------------------\n\nTITLE: Chart API Changes - KLineCharts Migration\nDESCRIPTION: Lists removed utility functions and changes to initialization options and parameters.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/guide/v9-to-v10.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n+ Remove `utils.drawArc(ctx, arc, styles)` , `utils.drawCircle(ctx, circle, styles)` , `utils.drawLine(ctx, line, styles)` , `utils.drawPolygon(ctx, polygon, styles)` , `utils.drawRect(ctx, rect, styles)` , `utils.drawText(ctx, text, styles)` , `utils.drawRectText(ctx, rectText, styles)` , please use `getFigureClass(name)` instead.\n+ `init(dcs, options)` , `position` in `options.layout` sub-item changed to `order` , `formatDate(dateTimeFormat, timestamp, format, type)` in `options.customApi` changed to `formatDate(timestamp, format, type)` , `options.thousandsSeparator` changed to object `{ sign, format }` , `options.decimalFoldThreshold` changed to `options.decimalFold` .\n```\n\n----------------------------------------\n\nTITLE: Defining ThousandsSeparator Function Type in TypeScript\nDESCRIPTION: This code snippet defines a function type that returns a ThousandsSeparator. It uses an arrow function syntax to declare a function that takes no parameters and returns a ThousandsSeparator type.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/@views/api/references/instance/getThousandsSeparator.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n() => ThousandsSeparator\n```\n\n----------------------------------------\n\nTITLE: Defining Arrow Function Type in TypeScript\nDESCRIPTION: TypeScript type definition for an arrow function that takes no parameters and returns a string array. This is a common type signature used for callback functions or methods that need to return multiple string values.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/@views/api/references/chart/getSupportedFigures.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n() => string[]\n```\n\n----------------------------------------\n\nTITLE: Describing Parameters for scrollToDataIndex in KLineCharts\nDESCRIPTION: Lists and describes the parameters for the scrollToDataIndex method. It includes dataIndex for specifying the target index and animationDuration for controlling the animation timing.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/api/instance/scrollToDataIndex.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Parameters {#parameters}\n- `dataIndex` Data index.\n- `animationDuration` Animation duration. If it is less than or equal to 0, there is no animation.\n```\n\n----------------------------------------\n\nTITLE: Defining Style Setting Function in TypeScript for KlineCharts\nDESCRIPTION: This TypeScript code defines a function type that takes a string name and a Styles object as parameters. It's likely used for setting or updating styles within the KlineCharts library. The function doesn't return anything (void).\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/@views/api/references/chart/registerStyles.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(\n  name: string,\n  styles: Styles\n) => void\n```\n\n----------------------------------------\n\nTITLE: Extension Modifications - KLineCharts Migration\nDESCRIPTION: Describes changes to indicator tooltip data structure and removal of built-in graphics.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/guide/v9-to-v10.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n+ The indicator `createTooltipDataSource` method return value `values` changed to `legends` , `icons` changed to `features` .\n+ Remove the built-in basic graphic `rectText`, please use `text` instead.\n```\n\n----------------------------------------\n\nTITLE: Function Type Definition for Boolean Toggle in TypeScript\nDESCRIPTION: A TypeScript function type definition that accepts a boolean parameter indicating whether a feature is enabled (true) or disabled (false), and returns void. This is commonly used for callback functions that handle toggling features.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/@views/api/references/instance/setScrollEnabled.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(enabled: boolean) => void\n```\n\n----------------------------------------\n\nTITLE: Defining Chart Panning Function Type in TypeScript\nDESCRIPTION: This TypeScript function type defines a panning operation that takes a distance parameter and an optional animation duration. The function returns void and is likely used for programmatically scrolling/panning the chart within the KLineChart library.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/@views/api/references/instance/scrollByDistance.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(distance: number, animationDuration?: number) => void\n```\n\n----------------------------------------\n\nTITLE: Creating KLineChart in React\nDESCRIPTION: Code snippet demonstrating how to integrate KLineChart into a React application using refs and useEffect.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/@views/quick-start/create-chart/index.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<!--@include: @/@views/quick-start/create-chart/react.md-->\n```\n\n----------------------------------------\n\nTITLE: TypeScript Function Type Definition Returning String Array\nDESCRIPTION: A TypeScript type definition for a function that takes no parameters and returns an array of strings. This is likely used as a type annotation for callback functions or handlers within the KLineChart library.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/@views/api/references/chart/getSupportedIndicators.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n() => string[]\n```\n\n----------------------------------------\n\nTITLE: Custom Thousands Separator Formatting in KLineChart using JavaScript\nDESCRIPTION: Shows how to implement a custom thousands separator format in a KLineChart. This example uses a space as the thousands separator.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/api/chart/init.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { init } from 'klinecharts'\n\nconst chart = init('container', {\n  thousandsSeparator: {\n    format: value => {\n      return value.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ' ')\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Distance Handler Function Type in TypeScript\nDESCRIPTION: A TypeScript function type declaration for a callback that processes a distance value. This type represents a function that takes a numeric distance parameter and returns void (no return value).\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/@views/api/references/instance/setOffsetRightDistance.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(distance: number) => void\n```\n\n----------------------------------------\n\nTITLE: Defining KLineData Callback Function Type in TypeScript\nDESCRIPTION: A TypeScript type definition for a callback function that accepts a single parameter of type KLineData and doesn't return a value. This function type is likely used for handling candlestick chart data in a financial charting application.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/@views/api/references/instance/updateData.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(data: KLineData) => void\n```\n\n----------------------------------------\n\nTITLE: Defining Formatter Function Type in TypeScript\nDESCRIPTION: Type definition for a function that returns a Formatter type. This represents a function signature with no parameters that returns a Formatter object.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/@views/api/references/instance/getFormatter.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n() => Formatter\n```\n\n----------------------------------------\n\nTITLE: KLineChart中arc基础图形的TypeScript定义\nDESCRIPTION: 定义了arc基础图形的属性和样式。包括圆心坐标、半径、起始和结束角度等属性，以及样式、尺寸、颜色等样式设置。\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/guide/figure.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nnew ({\n  attrs: {\n    // 圆心x轴坐标值\n    x: number\n    // 圆心y轴坐标值\n    y: number\n    // 半径\n    r: number\n    // 开始角度\n    startAngle: number\n    // 结束角度\n    endAngle: number\n  },\n  styles: {\n    // 样式，可选项`solid`，`dashed`\n    style?: 'solid' | 'dashed'\n    // 尺寸\n    size?: number\n    // 颜色\n    color?: string\n    // 虚线参数\n    dashedValue?: number[]\n  }\n}) => Figure\n```\n\n----------------------------------------\n\nTITLE: Defining String-Returning Function Type in TypeScript\nDESCRIPTION: This code snippet defines a TypeScript type for an anonymous function that takes no parameters and returns a string. It can be used to type functions that generate or return string values within the KLineChart project.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/@views/api/references/chart/version.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n() => string\n```\n\n----------------------------------------\n\nTITLE: Text Figure Configuration in TypeScript\nDESCRIPTION: TypeScript interface for configuring a text figure in KLineCharts. It defines the attributes and styles that can be set for text, including positioning, alignment, and various text styles.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/guide/figure.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nnew ({\n  attrs: {\n    // The x-axis coordinate value of the starting point\n    x: number\n    // The y-axis coordinate value of the starting point\n    y: number\n    // Fixed width\n    width: number\n    // Fixed height\n    height: number\n    // text content\n    text: any\n    // alignment\n    align: CanvasTextAlign\n     // benchmark\n    baseline: CanvasTextBaseline\n  },\n  styles: {\n    // style, optional `fill`, `stroke`, `stroke_fill`\n    style?: 'fill' | 'stroke' | 'stroke_fill'\n    // color\n    color?: string\n    // size\n    size?: number\n    // font\n    family?: string\n    // thickness\n    weight?: string | number\n    // left padding\n    paddingLeft?: number\n    // right padding\n    paddingRight?: number\n    // top padding\n    paddingTop?: number\n    // Bottom padding\n    paddingBottom?: number\n    // border style\n    borderStyle?: 'solid' | 'dashed'\n    // border color\n    borderColor?: string\n    // frame size\n    borderSize?: number\n    // border dotted line parameter\n    borderDashedValue?: number[]\n    // Border fillet value\n    borderRadius?: number\n    // background color\n    backgroundColor?: string | CanvasGradient\n  }\n}) => Figure\n```\n\n----------------------------------------\n\nTITLE: Defining Timezone Setter Function Type in TypeScript for KLineChart\nDESCRIPTION: This code snippet defines a TypeScript type for a function that sets the timezone in KLineChart. The function takes a single parameter 'timezone' as a string and returns void, indicating it performs an action without returning a value.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/@views/api/references/instance/setTimezone.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(timezone: string) => void\n```\n\n----------------------------------------\n\nTITLE: Defining Precision Function Type in TypeScript for KLineChart\nDESCRIPTION: A TypeScript function type definition that takes no parameters and returns a Precision type. This is likely used for determining or calculating precision values in the KLineChart library.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/@views/api/references/instance/getPrecision.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n() => Precision\n```\n\n----------------------------------------\n\nTITLE: Checking if Value is a Number in TypeScript\nDESCRIPTION: A utility method that tests whether a given value is a number. Returns a boolean indicating whether the input is of number type.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/api/chart/utils.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n(value: any) => boolean\n```\n\n----------------------------------------\n\nTITLE: Defining Coordinate to Data Mapping Type in TypeScript\nDESCRIPTION: Type definition for a function that converts coordinate positions to chart data points. Takes either a single coordinate or array of coordinates as input, with optional finder configuration. Returns corresponding data indices, timestamps and values.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/@views/api/references/instance/convertFromPixel.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(\n  coordinate: {\n    x?: number\n    y?: number\n  } | Array<{\n    x?: number\n    y?: number\n  },\n  finder?: {\n    paneId?: string\n    absolute?: boolean\n  }\n) => {\n    dataIndex?: number\n    timestamp?: number\n    value?: number\n  } | Array<{\n    dataIndex?: number\n    timestamp?: number\n    value?: number\n  }>\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Vue Customize Component\nDESCRIPTION: Script setup block that imports the Customize component from the views directory and renders it in the template.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/customize.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport Customize from '../@views/customize/index.vue'\n</script>\n\n<Customize/>\n```\n\n----------------------------------------\n\nTITLE: Defining Distance Callback Function Type in TypeScript\nDESCRIPTION: A TypeScript type definition for a callback function that accepts a numeric distance parameter and returns void. This type is likely used for event handlers or measurement operations in the KLineChart library.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/@views/api/references/instance/setMaxOffsetRightDistance.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(distance: number) => void\n```\n\n----------------------------------------\n\nTITLE: Defining DecimalFold Function Type in TypeScript\nDESCRIPTION: Type definition for a function that takes no parameters and returns a DecimalFold type. This appears to be used for decimal number handling or formatting in KLineCharts.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/@views/api/references/instance/getDecimalFold.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n() => DecimalFold\n```\n\n----------------------------------------\n\nTITLE: Disabling Decimal Zero Folding in KLineChart using JavaScript\nDESCRIPTION: Demonstrates how to disable the folding of trailing zeros in decimal numbers in a KLineChart. This example keeps all decimal places.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/api/chart/init.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { init } from 'klinecharts'\n\nconst chart = init('container', {\n  decimalFold: {\n    threshold: 0\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Function Type Returning KLineData Array in TypeScript\nDESCRIPTION: This TypeScript code defines a function type that returns an array of KLineData objects. This type is likely used for functions that generate or retrieve financial candlestick chart data for the KLineChart library.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/@views/api/references/instance/getDataList.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n() => KLineData[]\n```\n\n----------------------------------------\n\nTITLE: Specifying Return Value for scrollToDataIndex in KLineCharts\nDESCRIPTION: Describes the return value of the scrollToDataIndex method, which is undefined.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/api/instance/scrollToDataIndex.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### Returns {#returns}\n`scrollToDataIndex` returns `undefined` .\n```\n\n----------------------------------------\n\nTITLE: Space Parameter Callback Type Definition in TypeScript\nDESCRIPTION: Defines a function type that accepts a single numeric parameter 'space' and returns void. This type definition is commonly used for callback functions that handle spacing or padding operations.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/@views/api/references/instance/setBarSpace.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(space: number) => void\n```\n\n----------------------------------------\n\nTITLE: Defining Thousands Separator Configuration Type in TypeScript for KLineChart\nDESCRIPTION: A TypeScript type definition that specifies the configuration options for formatting numbers with thousands separators in KLineChart. It includes optional 'sign' property for specifying the separator character and an optional 'format' function for custom number formatting.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/@views/api/references/instance/setThousandsSeparator.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(\n  thousandsSeparator: {\n    sign?: string\n    format?: (value: number | string) => string\n  }\n) => void\n```\n\n----------------------------------------\n\nTITLE: Defining a No-Parameter Boolean Function Type in TypeScript\nDESCRIPTION: A TypeScript function type definition for a function that accepts no parameters and returns a boolean value. This type can be used as a type annotation for callback functions, event handlers, or predicate functions.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/@views/api/references/instance/isScrollEnabled.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n() => boolean\n```\n\n----------------------------------------\n\nTITLE: Setting Locale Type Definition in TypeScript\nDESCRIPTION: Defines a function type that takes a locale string parameter and returns void. Used for setting the localization in KLineChart.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/@views/api/references/instance/setLocale.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(locale: string) => void\n```\n\n----------------------------------------\n\nTITLE: Filtering Indicators in KLineChart using TypeScript\nDESCRIPTION: This TypeScript function signature defines a method for filtering indicators in KLineChart. It accepts an optional filter object with properties for id, name, and paneId, and returns an array of Indicator objects.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/@views/api/references/instance/getIndicators.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(\n  filter?: {\n    id?: string\n    name?: string\n    paneId?: string\n  }\n) => Indicator[]\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Offset Left Distance in KLineChart\nDESCRIPTION: The setMaxOffsetLeftDistance method sets the maximum distance of the first candlestick on the chart from the leftmost side. It takes a distance parameter and returns undefined.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/api/instance/setMaxOffsetLeftDistance.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsetMaxOffsetLeftDistance(distance)\n```\n\n----------------------------------------\n\nTITLE: Defining BarSpace Return Function in TypeScript\nDESCRIPTION: A TypeScript arrow function that returns a BarSpace type. This function is likely used as a callback or configuration handler within the KLineChart library to determine spacing between chart bars.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/@views/api/references/instance/getBarSpace.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n() => BarSpace\n```\n\n----------------------------------------\n\nTITLE: Defining String Array Function Type in TypeScript\nDESCRIPTION: TypeScript type definition for a function that takes no parameters and returns an array of strings. This is a simple arrow function type definition commonly used for callback functions or method signatures.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/@views/api/references/chart/getSupportedLocales.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n() => string[]\n```\n\n----------------------------------------\n\nTITLE: Function Type Definition in TypeScript\nDESCRIPTION: Defines a TypeScript function type that takes no parameters and returns a string value. This is commonly used as a type annotation for string-returning functions.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/@views/api/references/instance/getLocale.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n() => string\n```\n\n----------------------------------------\n\nTITLE: Defining a Function Type with Number Parameter in TypeScript\nDESCRIPTION: A TypeScript type definition for a function that accepts a single parameter 'distance' of type number and returns void. This type can be used for function parameters, variables, or as interface members.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/@views/api/references/instance/setMaxOffsetLeftDistance.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(distance: number) => void\n```\n\n----------------------------------------\n\nTITLE: Arrow Function Returning Styles Type in TypeScript\nDESCRIPTION: A TypeScript arrow function definition that returns a Styles object. This function doesn't take any parameters and serves as a style provider or factory function in the KlineChart project.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/@views/api/references/instance/getStyles.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n() => Styles\n```\n\n----------------------------------------\n\nTITLE: Defining String Array Return Type Function in TypeScript\nDESCRIPTION: Type definition for an arrow function that takes no parameters and returns a string array. This type can be used to define functions that need to return multiple string values in an array format.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/@views/api/references/chart/getSupportedOverlays.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n() => string[]\n```\n\n----------------------------------------\n\nTITLE: Filtering Function Signature in TypeScript for KLineChart Components\nDESCRIPTION: A TypeScript function signature that defines a filter callback for KLineChart. The function accepts an optional filter object with properties for id, name, and paneId, and returns a boolean value indicating whether an element matches the filter criteria.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/@views/api/references/instance/removeIndicator.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(\n  filter?: {\n    id?: string\n    name?: string\n    paneId?: string\n  }\n) => boolean\n```\n\n----------------------------------------\n\nTITLE: Checking if Value is an Object in TypeScript\nDESCRIPTION: A utility method that tests whether a given value is an object. Returns a boolean indicating whether the input is of object type.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/api/chart/utils.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n(value: any) => boolean\n```\n\n----------------------------------------\n\nTITLE: Defining Function Type with String Return in TypeScript\nDESCRIPTION: A TypeScript function type definition for a no-parameter function that returns a string. This type can be used for type annotations in TypeScript to enforce that a function conforms to this signature.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/@views/api/references/instance/getTimezone.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n() => string\n```\n\n----------------------------------------\n\nTITLE: KLineChart中text基础图形的TypeScript定义\nDESCRIPTION: 定义了text基础图形的属性和样式。包括起始点坐标、文本内容、宽高等属性，以及文本样式、字体、对齐方式、边框、背景色等样式设置。\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/guide/figure.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nnew ({\n  attrs: {\n    // 起始点x轴坐标值\n    x: number\n    // 起始点y轴坐标值\n    y: number\n    // 文字内容\n    text: any\n    // 指定宽\n    width?: number\n    // 指定高\n    height?: number\n    // 对齐方式\n    align?: CanvasTextAlign\n    // 基准\n    baseline?: CanvasTextBaseline\n  },\n  styles: {\n    // 样式，可选项`fill`，`stroke`，`stroke_fill`\n    style?: 'fill' | 'stroke' | 'stroke_fill'\n    // 颜色\n    color?: string\n    // 尺寸\n    size?: number\n    // 字体\n    family?: string\n    // 粗细\n    weight?: string | number\n    // 左内边距\n    paddingLeft?: number\n    // 右内边距\n    paddingRight?: number\n    // 上内边距\n    paddingTop?: number\n    // 下内边距\n    paddingBottom?: number\n    // 边框样式\n    borderStyle?: 'solid' | 'dashed'\n    // 边框颜色\n    borderColor?: string\n    // 边框尺寸\n    borderSize?: number\n    // 边框虚线参数\n    borderDashedValue?: number[]\n    // 边框圆角值\n    borderRadius?: number\n    // 背景色\n    backgroundColor?: string | CanvasGradient\n  }\n}) => Figure\n```\n\n----------------------------------------\n\nTITLE: Importing Vue Component for ScrollToDataIndex Example\nDESCRIPTION: Imports a Vue component named ScrollToDataIndex, likely containing an example implementation of the scrollToDataIndex method.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/api/instance/scrollToDataIndex.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport ScrollToDataIndex from '../../../@views/api/samples/scrollToDataIndex/index.vue'\n```\n\n----------------------------------------\n\nTITLE: Checking if Value is a Boolean in TypeScript\nDESCRIPTION: A utility method that tests whether a given value is a boolean. Returns a boolean indicating whether the input is of boolean type.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/api/chart/utils.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n(value: any) => boolean\n```\n\n----------------------------------------\n\nTITLE: Defining Function Type for Feature Toggle in KLineChart\nDESCRIPTION: A TypeScript function type definition that accepts a boolean parameter indicating whether a feature is enabled, and returns void. This type is likely used for callback functions that control feature enablement in the KLineChart library.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/@views/api/references/instance/setZoomEnabled.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(enabled: boolean) => void\n```\n\n----------------------------------------\n\nTITLE: Importing core.js Polyfill for Map Support in KLineCharts\nDESCRIPTION: Demonstrates how to import core.js polyfill to ensure Map compatibility in older browsers when using KLineCharts.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/guide/environment.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport 'core.js';\nimport { init } from 'klincharts';\n```\n\n----------------------------------------\n\nTITLE: Defining Void Function Type in TypeScript\nDESCRIPTION: Type declaration for a function that takes no parameters and returns void. This is commonly used when defining callback functions or event handlers that don't return a value.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/@views/api/references/instance/resize.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n() => void\n```\n\n----------------------------------------\n\nTITLE: Displaying KLineChart Package Badges in Markdown\nDESCRIPTION: This snippet shows how to display badges for unpkg and jsDelivr CDNs using Markdown syntax. It provides quick links to the latest versions of KLineChart on these CDN services.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/guide/quick-start.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![](https://img.shields.io/badge/unpkg-lastest-blue)](https://unpkg.com/browse/klinecharts/dist/umd/klinecharts.min.js)\n```\n\nLANGUAGE: markdown\nCODE:\n```\n[![](https://data.jsdelivr.com/v1/package/npm/klinecharts/badge)](https://www.jsdelivr.com/package/npm/klinecharts)\n```\n\n----------------------------------------\n\nTITLE: Defining Crosshair Change Event Handler Type in TypeScript\nDESCRIPTION: Type definition for a callback function that handles crosshair position changes in KLineChart. The handler takes two parameters: a string type identifier 'onCrosshairChange' and an unknown data payload representing the crosshair information.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/@views/api/references/instance/executeAction.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(\n   type: 'onCrosshairChange',\n   data: unknown\n) => void\n```\n\n----------------------------------------\n\nTITLE: Scale Function Type Definition in TypeScript\nDESCRIPTION: Defines a function type that takes a scale number, data index, and optional animation duration parameter. Used for handling scaling operations in KLineChart components.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/@views/api/references/instance/zoomAtDataIndex.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(\n  scale: number,\n  dataIndex: number, \n  animationDuration?: number\n) => void\n```\n\n----------------------------------------\n\nTITLE: Installing KLineCharts using bun\nDESCRIPTION: Command to install KLineCharts library using the bun package manager.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/@views/quick-start/download.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbun add klinecharts\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering KLineChart Customize Component in Vue\nDESCRIPTION: This Vue script imports a Customize component from a specific path and renders it within the template. It demonstrates how to set up a custom KLineChart component in a Vue application.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/customize.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport Customize from './@views/customize/index.vue'\n</script>\n\n<Customize/>\n```\n\n----------------------------------------\n\nTITLE: Defining Count Callback Type in TypeScript\nDESCRIPTION: Type definition for a callback function that accepts a numeric count parameter and returns void. This type is commonly used for handling count-based operations in the KLineChart library.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/@views/api/references/instance/setRightMinVisibleBarCount.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(count: number) => void\n```\n\n----------------------------------------\n\nTITLE: Disabling Thousands Separators in KLineChart JavaScript\nDESCRIPTION: Demonstrates how to disable the thousands separators in number formatting for a KLineChart.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/api/chart/init.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst chart = klinecharts.init('container', {\n  thousandsSeparator: { sign: '' }\n})\n```\n\n----------------------------------------\n\nTITLE: Installing KLineCharts using yarn\nDESCRIPTION: Command to install KLineCharts library using the yarn package manager.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/@views/quick-start/download.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add klinecharts\n```\n\n----------------------------------------\n\nTITLE: Style Configuration Changes - KLineCharts Migration\nDESCRIPTION: Details removed and modified style configuration properties including yAxis settings, overlay properties, and tooltip features.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/guide/v9-to-v10.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n+ Remove `yAxis.position` , `yAxis.type` , `yAxis.inside` and `yAxis.inside` . Please use the properties in the window configuration `axis` instead.\n+ Remove `overlay.rectText` .\n+ `candle.tooltip.icons` changed to `candle.tooltip.features`, `indicator.tooltip.icons` changed to `indicator.tooltip.features`.\n```\n\n----------------------------------------\n\nTITLE: KLineChart Callback Function Type Definition\nDESCRIPTION: Type definition for a callback function that takes a numeric data index and optional animation duration parameter, returning void. Used for handling chart interactions or animations in KLineChart.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/@views/api/references/instance/scrollToDataIndex.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(dataIndex: number, animationDuration?: number) => void\n```\n\n----------------------------------------\n\nTITLE: Configuring VitePress Home Page Layout for KLineChart\nDESCRIPTION: This markdown snippet defines the layout and features for the KLineChart project's home page using VitePress. It includes a title, layout specification, and a list of key features with icons, titles, and descriptions.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Highly customizable professional lightweight financial chart\n# https://vitepress.dev/reference/default-theme-home-page\nlayout: home\n\nfeatures:\n  - icon:\n      light: /images/box_light.png\n      dark: /images/box_dark.png\n    title: Out of the box\n    details: Simple and fast integration, zero cost to get started, displaying a chart in just 3 lines of code, allowing users to focus on data integration.\n  - icon:\n      light: /images/rocket_light.png\n      dark: /images/rocket_dark.png\n    title: Lightweight and smooth\n    details: Zero dependency, only about 50k under Gzip compression. Charts can remain smooth even with thousands of data.\n  - icon:\n      light: /images/power_light.png\n      dark: /images/power_dark.png\n    title: Powerful functionality\n    details: Built in multiple candlestick charts, multiple coordinate axes, dozens of commonly used indicators, and line drawing models to meet most needs.\n  - icon:\n      light: /images/expand_light.png\n      dark: /images/expand_dark.png\n    title: Highly expand\n    details: Provide rich APIs, style configurations, technical specifications, line drawing models, and coordinate axis extensions, with customizable functional combinations.\n  - icon:\n      light: /images/mobile_light.png\n      dark: /images/mobile_dark.png\n    title: Mobile\n    details: Specially adapted for mobile devices, fully capable of running on mobile browsers.\n  - icon:\n      light: /images/typescript_light.png\n      dark: /images/typescript_dark.png\n    title: Typescript\n    details: Provide a complete Typescript declaration file, perfectly supporting Typescript development.\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Boolean Function Type in TypeScript for KLineChart\nDESCRIPTION: This code snippet defines a TypeScript function type that takes no parameters and returns a boolean value. It's a concise representation of a predicate or condition function, commonly used in event handlers or filtering operations within the KLineChart library.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/@views/api/references/instance/isZoomEnabled.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n() => boolean\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Style Template in KLineChart\nDESCRIPTION: API method signature for registering custom style templates. Takes a name parameter for the template identifier and a styles object for configuration.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/api/chart/registerStyles.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nregisterStyles(name, styles)\n```\n\n----------------------------------------\n\nTITLE: Installing KLineCharts using npm\nDESCRIPTION: Command to install KLineCharts library using the npm package manager.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/@views/quick-start/download.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install klinecharts\n```\n\n----------------------------------------\n\nTITLE: Markdown Image Display for WeChat QR Code\nDESCRIPTION: Markdown code for displaying the WeChat QR code with specific styling attributes.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/guide/feedback.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<img style=\"width:180px;margin-top:10px\" src=\"/images/wechat.jpeg\"/>\n```\n\n----------------------------------------\n\nTITLE: Defining Void Function Type in TypeScript\nDESCRIPTION: Defines a function type signature that takes no parameters and returns void. This is commonly used to type callback functions or event handlers that don't return a value.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/@views/api/references/instance/clearData.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n() => void\n```\n\n----------------------------------------\n\nTITLE: Setting Chart Scroll Behavior in KLineChart\nDESCRIPTION: Method to enable or disable scrolling functionality in a KLineChart instance. Takes a boolean parameter to control scroll behavior and returns undefined.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/api/instance/setScrollEnabled.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsetScrollEnabled(enabled)\n```\n\n----------------------------------------\n\nTITLE: Including KLineCharts via CDN\nDESCRIPTION: HTML script tag to include KLineCharts directly from a CDN, allowing usage without a package manager.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/@views/quick-start/download.md#2025-04-21_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://cdn.jsdelivr.net/npm/klinecharts/dist/umd/klinecharts.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: KLineChart中rect基础图形的TypeScript定义\nDESCRIPTION: 定义了rect基础图形的属性和样式。包括起始点坐标、宽度和高度等属性，以及填充样式、边框样式、颜色、圆角等样式设置。\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/guide/figure.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nnew ({\n  attrs: {\n    // 起始点x轴坐标值\n    x: number\n    // 起始点y轴坐标值\n    y: number\n    // 宽度\n    width: number\n    // 高度\n    height: number\n  },\n  styles: {\n    // 样式，可选项`fill`，`stroke`，`stroke_fill`\n    style?: 'fill' | 'stroke' | 'stroke_fill'\n    // 颜色\n    color?: string\n    // 边框样式\n    borderStyle?: 'solid' | 'dashed',\n    // 边框颜色\n    borderColor?: string\n    // 边框尺寸\n    borderSize?: number\n    // 边框虚线参数\n    borderDashedValue?: number[]\n    // 边框圆角值\n    borderRadius?: number\n  }\n}) => Figure\n```\n\n----------------------------------------\n\nTITLE: Code Property Reference\nDESCRIPTION: Example of property reference changes in configuration\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/guide/changelog.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\ncandle.tooltip.icons changed to candle.tooltip.features\nindicator.tooltip.icons changed to indicator.tooltip.features\n```\n\n----------------------------------------\n\nTITLE: Installing KLineCharts using pnpm\nDESCRIPTION: Command to install KLineCharts library using the pnpm package manager.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/@views/quick-start/download.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm install klinecharts\n```\n\n----------------------------------------\n\nTITLE: Defining Function Type with Number Return in TypeScript\nDESCRIPTION: A TypeScript type definition for a function that takes no parameters and returns a number. This is commonly used for callback functions or function interfaces where a numeric value is expected to be returned.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/@views/api/references/instance/getOffsetRightDistance.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n() => number\n```\n\n----------------------------------------\n\nTITLE: Version Number and Date Format\nDESCRIPTION: Example of version numbering and date format used throughout the changelog\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/guide/changelog.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 10.0.0-alpha5\n`2025-03-09`\n```\n\n----------------------------------------\n\nTITLE: Rendering Style Explanation Component (Vue)\nDESCRIPTION: This Vue template renders the StyleExplain component, which provides a visual explanation of the chart styles.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/guide/styles.md#2025-04-21_snippet_3\n\nLANGUAGE: vue\nCODE:\n```\n<StyleExplain/>\n```\n\n----------------------------------------\n\nTITLE: Importing Style Explanation Component (Vue)\nDESCRIPTION: This Vue script setup imports a StyleExplain component, likely used to provide a visual explanation of the chart styles.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/guide/styles.md#2025-04-21_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport StyleExplain from '../../@views/styles/Explain.vue'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Markdown Link Structure for GitHub Issues\nDESCRIPTION: Markdown formatted links for GitHub issues and discussions sections of the KLineChart project repository.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/guide/feedback.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n+ Issues: [https://github.com/liihuu/KLineChart/issues](https://github.com/liihuu/KLineChart/issues)\n+ Discussions: [https://github.com/liihuu/KLineChart/discussions](https://github.com/liihuu/KLineChart/discussions)\n```\n\n----------------------------------------\n\nTITLE: Importing Intl.js Polyfill for Internationalization Support\nDESCRIPTION: Shows how to import Intl.js and its locale data to provide internationalization support for browsers lacking the Intl API.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/guide/environment.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport 'intl';\nimport 'intl/local-data/jsonp/en';\nimport { init } from 'klincharts';\n```\n\n----------------------------------------\n\nTITLE: Defining Count Callback Function Type in TypeScript\nDESCRIPTION: TypeScript function type definition for a callback that accepts a numeric count parameter and returns void. This type can be used to define callback function signatures that process numeric counts without returning any value.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/@views/api/references/instance/setLeftMinVisibleBarCount.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(count: number) => void\n```\n\n----------------------------------------\n\nTITLE: Running Lint Check Command for KLineChart\nDESCRIPTION: Command to run code linting checks before submitting pull requests to ensure code quality standards are met.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm run lint\n```\n\n----------------------------------------\n\nTITLE: Including External Markdown Files in Documentation\nDESCRIPTION: These HTML comments are used to include external Markdown files into the main documentation. They reference files containing information about downloading KLineChart and creating a chart.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/guide/quick-start.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!--@include: @/@views/quick-start/download.md-->\n```\n\nLANGUAGE: html\nCODE:\n```\n<!--@include: @/@views/quick-start/create-chart/index.md-->\n```\n\n----------------------------------------\n\nTITLE: API Method Reference\nDESCRIPTION: Example of API method changes and parameter modifications\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/guide/changelog.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nsubscribeAction and unsubscribeAction input parameter onTooltipIconClick changed to onCandleTooltipFeatureClick\n```\n\n----------------------------------------\n\nTITLE: Cryptocurrency Wallet Addresses\nDESCRIPTION: Collection of cryptocurrency wallet addresses for sponsoring KLineChart, including BTC, ETH, USDT-ERC20, and USDT-TRC20 addresses.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/sponsor.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nbc1qnwzukszzk5xfk0zs3sr8etzgctgnrtqts43jzp3khe6gm7xazprsp4y6n3\n```\n\nLANGUAGE: text\nCODE:\n```\n0xd2c3911654db861e0a2e17415e11a209c1fc3594\n```\n\nLANGUAGE: text\nCODE:\n```\n0xd2c3911654db861e0a2e17415e11a209c1fc3594\n```\n\nLANGUAGE: text\nCODE:\n```\nTHJpTQmFGaVm12KE1Jzc5mLXiApP6qXMCi\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum Visible Candlesticks with setRightMinVisibleBarCount in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the setRightMinVisibleBarCount method to set the minimum number of visible candlesticks on the right side of a KLineChart. The method takes a single parameter 'count' and returns undefined.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/api/instance/setRightMinVisibleBarCount.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nsetRightMinVisibleBarCount(count)\n```\n\n----------------------------------------\n\nTITLE: Custom Thousands Separator Formatting in KLineChart JavaScript\nDESCRIPTION: Shows how to customize the thousands separator formatting in a KLineChart. This example uses a space as the separator.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/api/chart/init.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst chart = klinecharts.init('container', {\n  thousandsSeparator: {\n    format: (value) => {\n      return value.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ' ')\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Building KLineChart from source\nDESCRIPTION: Commands to install dependencies and build the KLineChart library from source code. The generated files will be placed in the dist folder.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/README.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# Install the dependencies\nnpm install\n\n# Build files\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Starting KLineChart documentation locally\nDESCRIPTION: Commands to install dependencies and start the local documentation server for KLineChart. Requires Node.js to be installed.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Install the dependencies\nnpm install\n\n# Start document service\nnpm run docs:dev\n```\n\n----------------------------------------\n\nTITLE: Including KLineChart via jsDelivr CDN\nDESCRIPTION: HTML script tag to include the KLineChart library directly from the jsDelivr content delivery network.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/README.md#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/klinecharts/dist/klinecharts.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Including KLineChart via unpkg CDN\nDESCRIPTION: HTML script tag to include the KLineChart library directly from the unpkg content delivery network.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/README.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/javascript\" src=\"https://unpkg.com/klinecharts/dist/klinecharts.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Disabling Decimal Folding in KLineChart JavaScript\nDESCRIPTION: Demonstrates how to disable the folding of trailing zeros in decimal numbers for a KLineChart.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/docs/en-US/api/chart/init.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst chart = klinecharts.init('container', {\n  decimalFold: { threshold: 0 }\n})\n```\n\n----------------------------------------\n\nTITLE: Installing KLineChart using npm\nDESCRIPTION: Command to install the KLineChart library using npm package manager, saving it as a dependency in your project.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install klinecharts --save\n```\n\n----------------------------------------\n\nTITLE: Installing KLineChart using yarn\nDESCRIPTION: Command to add the KLineChart library to your project using the yarn package manager.\nSOURCE: https://github.com/klinecharts/klinechart/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add klinecharts\n```"
  }
]