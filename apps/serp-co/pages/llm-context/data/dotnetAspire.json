[
  {
    "owner": "dotnet",
    "repo": "aspire",
    "content": "TITLE: Configuring Aspire AppHost in Program.cs\nDESCRIPTION: Example of setting up a distributed application builder and adding project resources in Program.cs. The code demonstrates how to create a builder instance and add a project reference using the generated Projects.MyApp type.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Aspire.Hosting.AppHost/README.md#2025-04-20_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar builder = DistributedApplication.CreateBuilder(args);\n\n// The Projects.MyApp type is generated by custom MSBuild targets added\n// by the Aspire.Hosting.AppHost package when the MyApp project is added\n// as a project reference.\nvar app = builder.AddProject<Projects.MyApp>(\"myapp\");\n\nbuilder.Build().Run();\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL in AppHost\nDESCRIPTION: Example of registering and configuring PostgreSQL database in the AppHost project with service references.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Npgsql.EntityFrameworkCore.PostgreSQL/README.md#2025-04-20_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nvar postgresdb = builder.AddPostgres(\"pg\").AddDatabase(\"postgresdb\");\n\nvar myService = builder.AddProject<Projects.MyService>()\n                       .WithReference(postgresdb);\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry in ASP.NET Core Application\nDESCRIPTION: This C# code demonstrates how to configure OpenTelemetry metrics collection at startup in an ASP.NET Core application. It adds the Prometheus exporter, configures meters for ASP.NET Core components, and maps the Prometheus scraping endpoint.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Grafana/README.md#2025-04-20_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar builder = WebApplication.CreateBuilder(args);\nbuilder.Services.AddOpenTelemetry()\n    .WithMetrics(builder =>\n    {\n        builder.AddPrometheusExporter();\n        builder.AddMeter(\"Microsoft.AspNetCore.Hosting\", \"Microsoft.AspNetCore.Server.Kestrel\");\n    });\n\nvar app = builder.Build();\napp.MapPrometheusScrapingEndpoint();\n\napp.Run();\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Resources in an Aspire AppHost\nDESCRIPTION: This code demonstrates how to add a PostgreSQL resource to an Aspire AppHost, create a database, and connect a service to it using the WithReference method.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Aspire.Hosting.PostgreSQL/README.md#2025-04-20_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar db = builder.AddPostgres(\"pgsql\").AddDatabase(\"mydb\");\n\nvar myService = builder.AddProject<Projects.MyService>()\n                       .WithReference(db);\n```\n\n----------------------------------------\n\nTITLE: Adding SQL Server DbContext\nDESCRIPTION: Basic setup to register a DbContext with SQL Server in the dependency injection container\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Microsoft.EntityFrameworkCore.SqlServer/README.md#2025-04-20_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddSqlServerDbContext<MyDbContext>(\"sqldata\");\n```\n\n----------------------------------------\n\nTITLE: Registering and Referencing a Redis Server in AppHost\nDESCRIPTION: Code showing how to register a Redis server in the AppHost project and make it available to a service project using the WithReference method.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.StackExchange.Redis.OutputCaching/README.md#2025-04-20_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nvar redis = builder.AddRedis(\"cache\");\n\nvar myService = builder.AddProject<Projects.MyService>()\n                       .WithReference(redis);\n```\n\n----------------------------------------\n\nTITLE: Manual DbContext Configuration\nDESCRIPTION: Example of manually configuring DbContext with connection string and additional options\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Microsoft.EntityFrameworkCore.SqlServer/README.md#2025-04-20_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar connectionString = builder.Configuration.GetConnectionString(\"catalogdb\");\nbuilder.Services.AddDbContextPool<CatalogDbContext>(dbContextOptionsBuilder => dbContextOptionsBuilder.UseSqlServer(connectionString));\nbuilder.EnrichSqlServerDbContext<CatalogDbContext>();\n```\n\n----------------------------------------\n\nTITLE: Creating an empty .NET Aspire project\nDESCRIPTION: Command to create a new empty .NET Aspire project using the installed templates.\nSOURCE: https://github.com/dotnet/aspire/blob/main/docs/using-latest-daily.md#2025-04-20_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndotnet new aspire\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Blob Storage in AppHost\nDESCRIPTION: Example of how to add and configure Azure Blob Storage in an AppHost project, including conditional logic for publish mode and referencing the storage in a service project.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.Storage.Blobs/README.md#2025-04-20_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nvar blobs = builder.ExecutionContext.IsPublishMode\n    ? builder.AddAzureStorage(\"storage\").AddBlobs(\"blobs\")\n    : builder.AddConnectionString(\"blobs\");\n\nvar myService = builder.AddProject<Projects.MyService>()\n                       .WithReference(blobs);\n```\n\n----------------------------------------\n\nTITLE: Injecting IDistributedCache in a Controller\nDESCRIPTION: Demonstrates how to retrieve the IDistributedCache instance using dependency injection in a Web API controller constructor.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.StackExchange.Redis.DistributedCaching/README.md#2025-04-20_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nprivate readonly IDistributedCache _cache;\n\npublic ProductsController(IDistributedCache cache)\n{\n    _cache = cache;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Qdrant Resource in AppHost Program.cs\nDESCRIPTION: Example of adding a Qdrant vector database resource to an Aspire AppHost and referencing it from a service. This is implemented in the Program.cs file of the AppHost project.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Aspire.Hosting.Qdrant/README.md#2025-04-20_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar qdrant = builder.AddQdrant(\"qdrant\");\n\nvar myService = builder.AddProject<Projects.MyService>()\n                       .WithReference(qdrant);\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL in .NET Aspire AppHost\nDESCRIPTION: Example of adding a MySQL resource to an AppHost project and connecting a service to it. This snippet demonstrates creating a MySQL instance, adding a database, and setting up a service with a reference to that database.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Aspire.Hosting.MySql/README.md#2025-04-20_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar db = builder.AddMySql(\"mysql\").AddDatabase(\"mydb\");\n\nvar myService = builder.AddProject<Projects.MyService>()\n                       .WithReference(db);\n```\n\n----------------------------------------\n\nTITLE: AppHost Oracle Configuration\nDESCRIPTION: Example of registering and consuming an Oracle container in the AppHost project.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Oracle.EntityFrameworkCore/README.md#2025-04-20_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nvar freepdb1 = builder.AddOracle(\"oracle\").AddDatabase(\"freepdb1\");\n\nvar myService = builder.AddProject<Projects.MyService>()\n                     .WithReference(freepdb1);\n```\n\n----------------------------------------\n\nTITLE: Redis AppHost Configuration\nDESCRIPTION: Shows how to register and reference a Redis server in the AppHost project.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.StackExchange.Redis/README.md#2025-04-20_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nvar redis = builder.AddRedis(\"cache\");\n\nvar myService = builder.AddProject<Projects.MyService>()\n                       .WithReference(redis);\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Web PubSub in Aspire AppHost\nDESCRIPTION: Example code showing how to add an Azure Web PubSub connection in the AppHost's Program.cs file and reference it from a web frontend project.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Aspire.Hosting.Azure.WebPubSub/README.md#2025-04-20_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar wps = builder.AddAzureWebPubSub(\"wps1\");\n\nvar web = builder.AddProject<Projects.WebPubSubWeb>(\"webfrontend\")\n                       .WithReference(wps);\n```\n\n----------------------------------------\n\nTITLE: Adding and Referencing Azure App Configuration in .NET Aspire AppHost\nDESCRIPTION: C# code showing how to add an Azure App Configuration resource to a .NET Aspire application and reference it from a service. The code creates an AppConfiguration resource and connects a service to it.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Aspire.Hosting.Azure.AppConfiguration/README.md#2025-04-20_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar appConfig = builder.AddAzureAppConfiguration(\"config\");\n\nvar myService = builder.AddProject<Projects.MyService>()\n                       .WithReference(appConfig);\n```\n\n----------------------------------------\n\nTITLE: Implementing Aspire Component Configuration in C#\nDESCRIPTION: Demonstrates how to add a new Aspire component with configuration binding, named configuration support, and error handling for missing mandatory properties.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/README.md#2025-04-20_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic static void AddAbc(this IHostApplicationBuilder builder, Action<AbcSettings>? configureSettings = null)\n{\n    ArgumentNullException.ThrowIfNull(builder);\n\n    var settings = new AbcSettings();\n    builder.Configuration.GetSection(\"Aspire:Abc\").Bind(settings);\n\n    configureSettings?.Invoke(settings);\n\n    if (settings.MandatoryPropertyIsMissing)\n        throw new MeaningfulException($\"MandatoryPropertyName was not found at configuration path 'Aspire:Abc:{nameof(AbcSettings.MandatoryPropertyName)}'\");\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Redis Server in AppHost\nDESCRIPTION: Example showing how to register a Redis server in an AppHost project and reference it from a service using the WithReference method.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.StackExchange.Redis.DistributedCaching/README.md#2025-04-20_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nvar redis = builder.AddRedis(\"cache\");\n\nvar myService = builder.AddProject<Projects.MyService>()\n                       .WithReference(redis);\n```\n\n----------------------------------------\n\nTITLE: Using the Cosmos DB Emulator in Service Code\nDESCRIPTION: Service code showing how to consume a Cosmos DB emulator connection. This is identical to using a real Azure Cosmos DB connection, as the emulator details are abstracted by the AppHost.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Microsoft.Azure.Cosmos/README.md#2025-04-20_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\n// Service code\nbuilder.AddAzureCosmosClient(\"cosmos\");\n```\n\n----------------------------------------\n\nTITLE: Registering Valkey Server in AppHost\nDESCRIPTION: Code snippet demonstrating how to register a Valkey server in the AppHost Program.cs file and reference it in a service. This configures a Valkey cache named 'cache' and makes it available to the MyService project.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Aspire.Hosting.Valkey/README.md#2025-04-20_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar valkey = builder.AddValkey(\"cache\")\n\nvar myService = builder.AddProject<Projects.MyService>()\n                       .WithReference(valkey);\n```\n\n----------------------------------------\n\nTITLE: Registering Oracle DbContext\nDESCRIPTION: Basic registration of a DbContext with Oracle database connection using the AddOracleDatabaseDbContext extension method.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Oracle.EntityFrameworkCore/README.md#2025-04-20_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddOracleDatabaseDbContext<MyDbContext>(\"orcl\");\n```\n\n----------------------------------------\n\nTITLE: Injecting OpenAI Client in Controller\nDESCRIPTION: Example of dependency injection usage in a controller constructor to access the Azure OpenAI client\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.AI.OpenAI/README.md#2025-04-20_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nprivate readonly AzureOpenAIClient _client;\n\npublic CognitiveController(AzureOpenAIClient client)\n{\n    _client = client;\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Manifest for .NET Aspire Distributed Application\nDESCRIPTION: This JSON snippet represents the manifest file generated for a .NET Aspire distributed application. It defines components, their types, paths, environment variables, and bindings for deployment processing.\nSOURCE: https://github.com/dotnet/aspire/blob/main/docs/specs/manifest-spec.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"$schema\": \"https://json.schemastore.org/aspire-8.0.json\",\n    \"components\": {\n        \"postgres\": {\n            \"type\": \"postgres.v1\"\n        },\n        \"redis\": {\n            \"type\": \"redis.v1\"\n        },\n        \"catalogservice\": {\n            \"type\": \"project.v1\",\n            \"path\": \"[relative path to]\\\\eShopLite.BasketService.csproj\",\n            \"env\": {\n                \"ConnectionStrings__postgres\": \"{postgres.connectionString}\"\n            },\n            \"bindings\": {\n                \"http\": {\n                    \"scheme\": \"http\",\n                    \"protocol\": \"tcp\",\n                    \"transport\": \"http\",\n                    \"external\": false\n                }\n            }\n        },\n        \"basketservice\": {\n            \"type\": \"project.v1\",\n            \"path\": \"[relative path to]\\\\eShopLite.BasketService.csproj\",\n            \"env\": {\n                \"ConnectionStrings__redis\": \"{redis.connectionString}\"\n            },\n            \"bindings\": {\n                \"http\": {\n                    \"scheme\": \"http\",\n                    \"protocol\": \"tcp\",\n                    \"transport\": \"http\",\n                    \"external\": false\n                }\n            }\n        },\n        \"frontend\": {\n            \"type\": \"project.v1\",\n            \"path\": \"[relative path to]\\\\eShopLite.Frontend.csproj\",\n            \"bindings\": {\n                \"https\": {\n                    \"scheme\": \"https\",\n                    \"protocol\": \"tcp\",\n                    \"transport\": \"http\",\n                    \"external\": true\n                },\n                \"http\": {\n                    \"scheme\": \"http\",\n                    \"protocol\": \"tcp\",\n                    \"transport\": \"http\",\n                    \"external\": true\n                }\n            }\n        },\n        \"prometheus\": {\n            \"type\": \"container.v1\",\n            \"image\": \"prom/prometheus:latest\",\n            \"bindings\": {\n                \"http\": {\n                    \"containerPort\": 9090,\n                    \"protocol\": \"tcp\",\n                    \"transport\": \"http\",\n                    \"external\": false\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Cosmos DB Emulator in AppHost\nDESCRIPTION: AppHost code that sets up an Azure Cosmos DB emulator resource. The RunAsEmulator method configures the resource to use the local emulator container instead of connecting to Azure.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Microsoft.Azure.Cosmos/README.md#2025-04-20_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\n// AppHost\nvar cosmosdb = builder.AddAzureCosmosDB(\"cosmos\").RunAsEmulator();\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Cosmos Client in Service Project\nDESCRIPTION: C# code to add Azure Cosmos Client configuration in a service project using the Aspire.Microsoft.Azure.Cosmos package.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Aspire.Hosting.Azure.CosmosDB/README.md#2025-04-20_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddAzureCosmosClient(\"cosmosdb\");\n```\n\n----------------------------------------\n\nTITLE: Adding and Consuming Redis Resources in AppHost\nDESCRIPTION: Example of how to add a Redis resource to an AppHost and reference it from a service in the Program.cs file. This demonstrates adding a Redis instance and connecting a service to it.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Aspire.Hosting.Redis/README.md#2025-04-20_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar redis = builder.AddRedis(\"redis\");\n\nvar myService = builder.AddProject<Projects.MyService>()\n                       .WithReference(redis);\n```\n\n----------------------------------------\n\nTITLE: Basic DbContext Registration\nDESCRIPTION: Simple registration of a DbContext for Cosmos DB using the AddCosmosDbContext extension method.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Microsoft.EntityFrameworkCore.Cosmos/README.md#2025-04-20_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddCosmosDbContext<MyDbContext>(\"cosmosdb\", \"mydb\");\n```\n\n----------------------------------------\n\nTITLE: Registering SqlConnection with DI Container in C#\nDESCRIPTION: Adds a SQL Server client to the dependency injection container using the AddSqlServerClient extension method. This registers a SqlConnection instance that can be retrieved via dependency injection.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Microsoft.Data.SqlClient/README.md#2025-04-20_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddSqlServerClient(\"sqldata\");\n```\n\n----------------------------------------\n\nTITLE: Configuring SQL Server Resource in AppHost\nDESCRIPTION: This code snippet demonstrates how to add a SQL Server resource to the AppHost and consume the connection. It creates a SQL Server resource, adds a database, and references it in a service project.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Aspire.Hosting.SqlServer/README.md#2025-04-20_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar db = builder.AddSqlServer(\"sql\").AddDatabase(\"db\")\n\nvar myService = builder.AddProject<Projects.MyService>()\n                       .WithReference(db);\n```\n\n----------------------------------------\n\nTITLE: Adding Azure Key Vault Resource to .NET Aspire Application\nDESCRIPTION: C# code snippet demonstrating how to add an Azure Key Vault resource to a .NET Aspire application using the IDistributedApplicationBuilder interface. It shows how to create a Key Vault resource and reference it in a project.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Aspire.Hosting.Azure.KeyVault/README.md#2025-04-20_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar builder = DistributedApplication.CreateBuilder(args);\nbuilder.AddAzureProvisioner();\n\nvar keyVault = builder.AddAzureKeyVault(\"mykeyvault\");\n\nbuilder.AddProject<Projects.MyApp>(\"myapp\")\n       .WithReference(keyVault);\n```\n\n----------------------------------------\n\nTITLE: Registering RabbitMQ Server in AppHost\nDESCRIPTION: Demonstrates how to register a RabbitMQ server and consume the connection in an AppHost project.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.RabbitMQ.Client/README.md#2025-04-20_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nvar messaging = builder.AddRabbitMQ(\"messaging\");\n\nvar myService = builder.AddProject<Projects.MyService>()\n                       .WithReference(messaging);\n```\n\n----------------------------------------\n\nTITLE: Adding Azure Table Storage to AppHost\nDESCRIPTION: Example showing how to add an Azure Table Storage resource in the AppHost project and reference it from a service.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.Data.Tables/README.md#2025-04-20_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nvar tables = builder.ExecutionContext.IsPublishMode\n    ? builder.AddAzureStorage(\"storage\").AddTables(\"tables\")\n    : builder.AddConnectionString(\"tables\");\n\nvar myService = builder.AddProject<Projects.MyService>()\n                       .WithReference(tables);\n```\n\n----------------------------------------\n\nTITLE: Injecting TableServiceClient into a Controller\nDESCRIPTION: Example showing how to inject and use the TableServiceClient in an ASP.NET Core Web API controller.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.Data.Tables/README.md#2025-04-20_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nprivate readonly TableServiceClient _client;\n\npublic ProductsController(TableServiceClient client)\n{\n    _client = client;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Milvus Database in Aspire AppHost\nDESCRIPTION: Example code showing how to add a Milvus resource to an Aspire AppHost and reference it from a service. This demonstrates the core functionality of the Aspire.Hosting.Milvus library.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Aspire.Hosting.Milvus/README.md#2025-04-20_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar milvus = builder.AddMilvus(\"milvus\");\n\nvar myService = builder.AddProject<Projects.MyService>()\n                       .WithReference(milvus);\n```\n\n----------------------------------------\n\nTITLE: Configuring Oracle Database Resource in .NET Aspire AppHost\nDESCRIPTION: This code snippet demonstrates how to add an Oracle database resource to a .NET Aspire application and reference it in a service. It uses the AddOracle and AddDatabase methods to configure the database, and WithReference to associate it with a service.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Aspire.Hosting.Oracle/README.md#2025-04-20_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar db = builder.AddOracle(\"oracle\").AddDatabase(\"mydb\");\n\nvar myService = builder.AddProject<Projects.MyService>()\n                       .WithReference(db);\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Blob Storage in AppHost\nDESCRIPTION: Example showing how to add Azure Storage with Blob support to a .NET Aspire application in the AppHost's Program.cs file, and reference it from a service.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Aspire.Hosting.Azure.Storage/README.md#2025-04-20_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar blobs = builder.AddAzureStorage(\"storage\").AddBlobs(\"blobs\");\n\nvar myService = builder.AddProject<Projects.MyService>()\n                       .WithReference(blobs);\n```\n\n----------------------------------------\n\nTITLE: Registering BlobServiceClient in .NET Aspire Application\nDESCRIPTION: Example of how to register a BlobServiceClient in a .NET Aspire application's Program.cs file using the AddAzureBlobClient extension method.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.Storage.Blobs/README.md#2025-04-20_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddAzureBlobClient(\"blobs\");\n```\n\n----------------------------------------\n\nTITLE: Adding OpenTelemetry Packages to .NET Project\nDESCRIPTION: This XML snippet shows the required package references for adding OpenTelemetry support to a .NET project. It includes the Prometheus exporter for ASP.NET Core and the hosting extensions package.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Grafana/README.md#2025-04-20_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup>\n  <PackageReference Include=\"OpenTelemetry.Exporter.Prometheus.AspNetCore\" Version=\"1.7.0-alpha.1\" />\n  <PackageReference Include=\"OpenTelemetry.Extensions.Hosting\" Version=\"1.7.0-alpha.1\" />\n</ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Registering and Referencing PostgreSQL in AppHost\nDESCRIPTION: Example showing how to register a PostgreSQL database in the AppHost and reference it from a service.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Npgsql/README.md#2025-04-20_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nvar postgresdb = builder.AddPostgres(\"pg\").AddDatabase(\"postgresdb\");\n\nvar myService = builder.AddProject<Projects.MyService>()\n                       .WithReference(postgresdb);\n```\n\n----------------------------------------\n\nTITLE: Registering and referencing Milvus in AppHost\nDESCRIPTION: Example showing how to register a Milvus server in the AppHost and make it available to a service project using WithReference.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Milvus.Client/README.md#2025-04-20_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nvar milvus = builder.AddMilvus(\"milvus\");\n\nvar myService = builder.AddProject<Projects.MyService>()\n                       .WithReference(milvus);\n```\n\n----------------------------------------\n\nTITLE: Setting Up Azure Service Bus in AppHost\nDESCRIPTION: C# code for the AppHost Program.cs file that demonstrates how to add an Azure Service Bus connection and reference it in a service project. Creates a connection named 'sb' that can be used by other services.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Aspire.Hosting.Azure.ServiceBus/README.md#2025-04-20_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar serviceBus = builder.AddAzureServiceBus(\"sb\");\n\nvar myService = builder.AddProject<Projects.MyService>()\n                       .WithReference(serviceBus);\n```\n\n----------------------------------------\n\nTITLE: Retrieving DbContext in Controller\nDESCRIPTION: Example of how to retrieve the registered DbContext instance using dependency injection in a Web API controller.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.Npgsql.EntityFrameworkCore.PostgreSQL/README.md#2025-04-20_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nprivate readonly MyDbContext _context;\n\npublic ProductsController(MyDbContext context)\n{\n    _context = context;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JWT Bearer Authentication with Keycloak\nDESCRIPTION: Example of adding JWT Bearer authentication to an ASP.NET Core API project using Keycloak. Demonstrates setting up authentication with realm and audience configuration.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Keycloak.Authentication/README.md#2025-04-20_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddAuthentication()\n                .AddKeycloakJwtBearer(\"keycloak\", realm: \"WeatherShop\", options =>\n                {\n                    options.Audience = \"weather.api\";\n                });\n```\n\n----------------------------------------\n\nTITLE: Registering Garnet Server in AppHost\nDESCRIPTION: Code snippet for registering a Garnet server in an AppHost project and referencing it in a service. This establishes a Garnet cache named 'cache' that can be used by other services in the application.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Aspire.Hosting.Garnet/README.md#2025-04-20_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar garnet = builder.AddGarnet(\"cache\")\n\nvar myService = builder.AddProject<Projects.MyService>()\n                       .WithReference(garnet);\n```\n\n----------------------------------------\n\nTITLE: Creating a Distributed Application with .NET Aspire in C#\nDESCRIPTION: This code snippet demonstrates how to create a distributed application using .NET Aspire. It sets up database containers, adds project components, and configures their dependencies and service references.\nSOURCE: https://github.com/dotnet/aspire/blob/main/docs/specs/manifest-spec.md#2025-04-20_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Aspire.Hosting.Postgres;\nusing Aspire.Hosting.Redis;\nusing Projects = eShopLite.App.Projects;\n\nvar builder = DistributedApplication.CreateBuilder(args);\n\nvar catalogDb = builder.AddPostgresContainer(\"postgres\").AddDatabase(\"catalogdb\");\nvar redis = builder.AddRedisContainer(\"redis\");\n\nvar catalog = builder.AddProject<Projects.eShopLite_CatalogService>(\"catalogservice\")\n    .WithReference(catalogDb);\n\nvar basket = builder.AddProject<Projects.eShopLite_BasketService>(\"basketservice\")\n    .WithReference(redis);\n\nbuilder.AddProject<Projects.eShopLite_Frontend>(\"frontend\")\n    .WithServiceReference(basket)\n    .WithServiceReference(catalog)\n    .IsExternal();\n\nbuilder.AddContainer(\"prometheus\", \"prom/prometheus\")\n       .WithServiceBinding(9090);\n\nbuilder.Build().Run();\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Functions in Aspire AppHost\nDESCRIPTION: Example code for Program.cs showing how to configure an Azure Functions project as a resource in a .NET Aspire application. It demonstrates adding Azure Storage dependencies (queue and blob) and connecting them to the Functions project.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Aspire.Hosting.Azure.Functions/README.md#2025-04-20_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nusing Aspire.Hosting;\nusing Aspire.Hosting.Azure;\nusing Aspire.Hosting.Azure.Functions;\n\nvar builder = new DistributedApplicationBuilder();\n\nvar storage = builder.AddAzureStorage(\"storage\").RunAsEmulator();\nvar queue = storage.AddQueues(\"queue\");\nvar blob = storage.AddBlobs(\"blob\");\n\nbuilder.AddAzureFunctionsProject<Projects.Company_FunctionApp>(\"my-functions-project\")\n    .WithReference(queue)\n    .WithReference(blob);\n\nvar app = builder.Build();\n\napp.Run();\n```\n\n----------------------------------------\n\nTITLE: Custom DbContext Configuration\nDESCRIPTION: Advanced configuration example showing how to manually configure DbContext options and enrich with Aspire features.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Npgsql.EntityFrameworkCore.PostgreSQL/README.md#2025-04-20_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar connectionString = builder.Configuration.GetConnectionString(\"postgresdb\");\nbuilder.Services.AddDbContextPool<MyDbContext>(dbContextOptionsBuilder => dbContextOptionsBuilder.UseNpgsql(connectionString));\nbuilder.EnrichNpgsqlDbContext<MyDbContext>();\n```\n\n----------------------------------------\n\nTITLE: Consuming SignalR in Service Project\nDESCRIPTION: C# code showing how to configure SignalR in a service project's Program.cs file using the Microsoft.Azure.SignalR client library.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Aspire.Hosting.Azure.SignalR/README.md#2025-04-20_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddSignalR()\n    .AddNamedAzureSignalR(\"sr\");\n```\n\n----------------------------------------\n\nTITLE: Adding Redis Distributed Cache to Service Builder\nDESCRIPTION: Registers an IDistributedCache implementation that connects to Redis using the AddRedisDistributedCache extension method with a connection name parameter.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.StackExchange.Redis.DistributedCaching/README.md#2025-04-20_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddRedisDistributedCache(\"cache\");\n```\n\n----------------------------------------\n\nTITLE: Injecting IConnection in ASP.NET Core Controller\nDESCRIPTION: Shows how to inject and use the IConnection instance in an ASP.NET Core controller using dependency injection.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.RabbitMQ.Client/README.md#2025-04-20_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nprivate readonly IConnection _connection;\n\npublic ProductsController(IConnection connection)\n{\n    _connection = connection;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Azure Web PubSub Connection in AppHost Project\nDESCRIPTION: This code snippet demonstrates how to add an Azure Web PubSub connection in an AppHost project and reference it in a service.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.Messaging.WebPubSub/README.md#2025-04-20_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nvar webPubSub = builder.AddAzureWebPubSub(\"wps\");\n\nvar myService = builder.AddProject<Projects.MyService>()\n                       .WithReference(webPubSub);\n```\n\n----------------------------------------\n\nTITLE: Adding and Referencing a RabbitMQ Resource in AppHost\nDESCRIPTION: Example of how to add a RabbitMQ resource to a .NET Aspire application and reference it from a service. This code would typically be placed in the Program.cs file of the AppHost project.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Aspire.Hosting.RabbitMQ/README.md#2025-04-20_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar rmq = builder.AddRabbitMQ(\"rmq\");\n\nvar myService = builder.AddProject<Projects.MyService>()\n                       .WithReference(rmq);\n```\n\n----------------------------------------\n\nTITLE: Consuming Keycloak in API Service\nDESCRIPTION: Example of consuming Keycloak connection in an API service project using JWT Bearer authentication.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Keycloak.Authentication/README.md#2025-04-20_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddAuthentication()\n                .AddKeycloakJwtBearer(\"keycloak\", realm: \"WeatherShop\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Bus in AppHost\nDESCRIPTION: Example showing how to configure Service Bus connection in the AppHost project and reference it in a service.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.Messaging.ServiceBus/README.md#2025-04-20_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nvar serviceBus = builder.ExecutionContext.IsPublishMode\n    ? builder.AddAzureServiceBus(\"sb\")\n    : builder.AddConnectionString(\"sb\");\n\nvar myService = builder.AddProject<Projects.MyService>()\n                       .WithReference(serviceBus);\n```\n\n----------------------------------------\n\nTITLE: Adding Azure PostgreSQL Data Source\nDESCRIPTION: Registers a NpgsqlDataSource in the dependency injection container with a specified connection name.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.Npgsql/README.md#2025-04-20_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddAzureNpgsqlDataSource(\"postgresdb\");\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenID Connect Authentication with Keycloak\nDESCRIPTION: Example of adding OpenID Connect authentication to a Blazor project using Keycloak, including client configuration and scope settings.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Keycloak.Authentication/README.md#2025-04-20_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddAuthentication(OpenIdConnectDefaults.AuthenticationScheme)\n                .AddKeycloakOpenIdConnect(\n                    \"keycloak\", \n                    realm: \"WeatherShop\", \n                    options =>\n                    {\n                        options.ClientId = \"WeatherWeb\";\n                        options.ResponseType = OpenIdConnectResponseType.Code;\n                        options.Scope.Add(\"weather:all\");\n                    });\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure SignalR in ASP.NET Core with Aspire\nDESCRIPTION: The code snippet shows how to modify a standard SignalR setup to use Azure SignalR service with Aspire. It demonstrates adding a named Azure SignalR service by appending .AddNamedAzureSignalR(\"signalr\") to the AddSignalR() method call.\nSOURCE: https://github.com/dotnet/aspire/blob/main/playground/signalr/SignalRWeb/README.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nAnd modified [Program.cs](./Program.cs)  to append `.AddNamedAzureSignalR(\"signalr\")` to `AddSignalR()`.\n```\n\n----------------------------------------\n\nTITLE: Adding Azure OpenAI Service in AppHost Program.cs\nDESCRIPTION: C# code snippet demonstrating how to add an Azure OpenAI service to the application model and reference it in a project within the AppHost's Program.cs file.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Aspire.Hosting.Azure.CognitiveServices/README.md#2025-04-20_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar openai = builder.AddAzureOpenAI(\"openai\");\n\nvar myService = builder.AddProject<Projects.MyService>()\n                       .WithReference(openai);\n```\n\n----------------------------------------\n\nTITLE: Configuring DbContext with EnrichAzureNpgsqlDbContext\nDESCRIPTION: Example of how to configure specific options for Npgsql and register a DbContext using the EnrichAzureNpgsqlDbContext extension method.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.Npgsql.EntityFrameworkCore.PostgreSQL/README.md#2025-04-20_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar connectionString = builder.Configuration.GetConnectionString(\"postgresdb\");\nbuilder.Services.AddDbContextPool<MyDbContext>(dbContextOptionsBuilder => dbContextOptionsBuilder.UseNpgsql(connectionString));\nbuilder.EnrichAzureNpgsqlDbContext<MyDbContext>();\n```\n\n----------------------------------------\n\nTITLE: Custom DbContext Configuration\nDESCRIPTION: Advanced configuration using EnrichMySqlDbContext for custom DbContext setup with connection string and server version\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Pomelo.EntityFrameworkCore.MySql/README.md#2025-04-20_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar connectionString = builder.Configuration.GetConnectionString(\"mysqldb\");\nbuilder.Services.AddDbContextPool<MyDbContext>(dbContextOptionsBuilder => dbContextOptionsBuilder.UseMySql(connectionString, serverVersion));\nbuilder.EnrichMySqlDbContext<MyDbContext>();\n```\n\n----------------------------------------\n\nTITLE: Setting Up Cosmos DB in AppHost with Conditional Resource Creation\nDESCRIPTION: AppHost code that conditionally creates an Azure Cosmos DB resource or reads from connection strings based on execution mode. The connection is then passed to a service project using WithReference.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Microsoft.Azure.Cosmos/README.md#2025-04-20_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nvar cosmosdb = builder.ExecutionContext.IsPublishMode\n    ? builder.AddAzureCosmosDB(\"cdb\").AddCosmosDatabase(\"cosmosdb\")\n    : builder.AddConnectionString(\"cosmosdb\");\n\nvar myService = builder.AddProject<Projects.MyService>()\n                       .WithReference(cosmosdb);\n```\n\n----------------------------------------\n\nTITLE: Adding Azure Cosmos DB to AppHost in C#\nDESCRIPTION: C# code snippet demonstrating how to add an Azure Cosmos DB connection to the AppHost and reference it in a service project.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Aspire.Hosting.Azure.CosmosDB/README.md#2025-04-20_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar cosmosdb = builder.AddAzureCosmosDB(\"cdb\").AddCosmosDatabase(\"cosmosdb\");\n\nvar myService = builder.AddProject<Projects.MyService>()\n                       .WithReference(cosmosdb);\n```\n\n----------------------------------------\n\nTITLE: Adding MongoDB Resource to AppHost in Program.cs\nDESCRIPTION: Code snippet demonstrating how to add a MongoDB resource to the Aspire AppHost, create a database, and reference it from a service project.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Aspire.Hosting.MongoDB/README.md#2025-04-20_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar db = builder.AddMongoDB(\"mongodb\").AddDatabase(\"mydb\");\n\nvar myService = builder.AddProject<Projects.MyService>()\n                       .WithReference(db);\n```\n\n----------------------------------------\n\nTITLE: Registering and Referencing Seq in AppHost\nDESCRIPTION: Code to register a Seq server in the AppHost project and propagate its configuration to a service. This enables centralized Seq configuration in the AppHost.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Seq/README.md#2025-04-20_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nvar seq = builder.AddSeq(\"seq\");\n\nvar myService = builder.AddProject<Projects.MyService>()\n                       .WithReference(seq);\n```\n\n----------------------------------------\n\nTITLE: Registering MongoDB in AppHost\nDESCRIPTION: Example of how to register a MongoDB database and consume the connection in an AppHost project.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.MongoDB.Driver/README.md#2025-04-20_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nvar mongodb = builder.AddMongoDB(\"mongodb\").AddDatabase(\"mydatabase\");\n\nvar myService = builder.AddProject<Projects.MyService>()\n                       .WithReference(mongodb);\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Blob Storage Options in appsettings.json\nDESCRIPTION: Example of configuring various Azure Blob Storage options using the appsettings.json file, including disabling health checks and setting client options.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.Storage.Blobs/README.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Aspire\": {\n    \"Azure\": {\n      \"Storage\": {\n        \"Blobs\": {\n          \"DisableHealthChecks\": true,\n          \"DisableTracing\": false,\n          \"ClientOptions\": {\n            \"Diagnostics\": {\n              \"ApplicationId\": \"myapp\"\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using SecretClient with Dependency Injection\nDESCRIPTION: Example of injecting and using the SecretClient in a Web API controller to retrieve secrets on demand.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.Security.KeyVault/README.md#2025-04-20_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nprivate readonly SecretClient _client;\n\npublic ProductsController(SecretClient client)\n{\n    _client = client;\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Azure Search Client\nDESCRIPTION: Basic registration of SearchIndexClient in the dependency injection container\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.Search.Documents/README.md#2025-04-20_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddAzureSearchClient(\"searchConnectionName\");\n```\n\n----------------------------------------\n\nTITLE: Installing daily .NET Aspire project templates\nDESCRIPTION: Command to install the latest .NET Aspire project templates from daily builds, with the --force parameter to override any existing templates.\nSOURCE: https://github.com/dotnet/aspire/blob/main/docs/using-latest-daily.md#2025-04-20_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ndotnet new install Aspire.ProjectTemplates::*-* --force\n```\n\n----------------------------------------\n\nTITLE: Consuming SQL Reference in a Service Project\nDESCRIPTION: Demonstrates how to consume a SQL Server reference in a service project. This matches the name used in the AddDatabase method in the AppHost.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Microsoft.Data.SqlClient/README.md#2025-04-20_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddSqlServerClient(\"sqldata\");\n```\n\n----------------------------------------\n\nTITLE: Registering DockerComposePublisher in AppHost Program.cs\nDESCRIPTION: Code snippet showing how to register the DockerComposePublisher in the AppHost's Program.cs file. This enables Docker Compose publishing capabilities for the Aspire application.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Aspire.Hosting.Docker/README.md#2025-04-20_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddPublisher<DockerComposePublisher>(\"docker-compose\");\n```\n\n----------------------------------------\n\nTITLE: AppHost SQL Server Configuration\nDESCRIPTION: Example of configuring SQL Server in the AppHost project\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Microsoft.EntityFrameworkCore.SqlServer/README.md#2025-04-20_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nvar sql = builder.AddSqlServer(\"sql\").AddDatabase(\"sqldata\");\n\nvar myService = builder.AddProject<Projects.MyService>()\n                       .WithReference(sql);\n```\n\n----------------------------------------\n\nTITLE: Retrieving MongoDB Client in Controller\nDESCRIPTION: Example of how to retrieve an IMongoClient instance in a Web API controller using dependency injection.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.MongoDB.Driver/README.md#2025-04-20_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nprivate readonly IMongoClient _client;\n\npublic ProductsController(IMongoClient client)\n{\n    _client = client;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Web PubSub Connection with Connection String\nDESCRIPTION: This code snippet shows how to configure the Azure Web PubSub connection using a named connection string.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.Messaging.WebPubSub/README.md#2025-04-20_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddAzureWebPubSubServiceClient(\"WebPubSubConnectionName\", \"your_hub_name\");\n```\n\n----------------------------------------\n\nTITLE: Registering and Consuming Azure Database for PostgreSQL in AppHost\nDESCRIPTION: Example of how to register an Azure Database for PostgreSQL instance and consume the connection in the AppHost Program.cs file.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.Npgsql.EntityFrameworkCore.PostgreSQL/README.md#2025-04-20_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nvar postgresdb = builder.AddAzurePostgresFlexibleServer(\"pg\").AddDatabase(\"postgresdb\");\n\nvar myService = builder.AddProject<Projects.MyService>()\n                       .WithReference(postgresdb);\n```\n\n----------------------------------------\n\nTITLE: Adding Event Hubs Resources in AppHost\nDESCRIPTION: Example of adding Azure Event Hubs resources and consuming the connection in an AppHost project.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.Messaging.EventHubs/README.md#2025-04-20_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nvar eventHubs = builder.ExecutionContext.IsPublishMode\n    ? builder.AddAzureEventHubs(\"eventHubsConnectionName\").WithHub(\"MyHub\")\n    : builder.AddConnectionString(\"eventHubsConnectionName\");\n\nvar myService = builder.AddProject<Projects.MyService>()\n                       .WithReference(eventHubs);\n```\n\n----------------------------------------\n\nTITLE: Consuming MySQL Reference in a Service Project\nDESCRIPTION: Example of consuming a MySQL database reference in a service project's Program.cs file.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.MySqlConnector/README.md#2025-04-20_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddMySqlDataSource(\"mysqldb\");\n```\n\n----------------------------------------\n\nTITLE: Consuming MongoDB Connection in Service\nDESCRIPTION: Example of how to consume a MongoDB connection in a service project after it has been configured in the AppHost.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.MongoDB.Driver/README.md#2025-04-20_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddMongoDBClient(\"mongodb\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Kafka Resource in Aspire AppHost\nDESCRIPTION: Example code showing how to add a Kafka resource to an Aspire AppHost and reference it from a service in the Program.cs file.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Aspire.Hosting.Kafka/README.md#2025-04-20_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar kafka = builder.AddKafka(\"messaging\");\n\nvar myService = builder.AddProject<Projects.MyService>()\n                       .WithReference(kafka);\n```\n\n----------------------------------------\n\nTITLE: Registering Azure Cosmos DB Client in DI Container\nDESCRIPTION: Code snippet showing how to register a CosmosClient in the dependency injection container. It uses the AddAzureCosmosClient extension method with a connection name parameter.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Microsoft.Azure.Cosmos/README.md#2025-04-20_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddAzureCosmosClient(\"cosmosConnectionName\");\n```\n\n----------------------------------------\n\nTITLE: Configuring YARP Direct Forwarding with Service Discovery in a .NET Aspire Application\nDESCRIPTION: This example demonstrates how to configure service discovery and YARP direct forwarding in a .NET Aspire application. It shows the setup of service discovery, the addition of HTTP forwarding with service discovery support, and the mapping of a forwarding endpoint that resolves a service name to forward requests.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Microsoft.Extensions.ServiceDiscovery.Yarp/README.md#2025-04-20_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar builder = WebApplication.CreateBuilder(args);\n\n// Configure service discovery\nbuilder.Services.AddServiceDiscovery();\n\n// Add YARP Direct Forwarding with Service Discovery support\nbuilder.Services.AddHttpForwarderWithServiceDiscovery();\n\n// ... other configuration ...\n\nvar app = builder.Build();\n\n// ... other configuration ...\n\n// Map a Direct Forwarder which forwards requests to the resolved \"catalogservice\" endpoints\napp.MapForwarder(\"/catalog/images/{id}\", \"http://catalogservice\", \"/api/v1/catalog/items/{id}/image\");\n\napp.Run();\n```\n\n----------------------------------------\n\nTITLE: Customizing Azure Key Vault Resource in .NET Aspire\nDESCRIPTION: C# code example showing how to customize an Azure Key Vault resource in a .NET Aspire application. It demonstrates creating a parameter, assigning it to a Key Vault secret, and referencing the Key Vault in a project.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Aspire.Hosting.Azure.KeyVault/README.md#2025-04-20_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar builder = DistributedApplication.CreateBuilder(args);\nbuilder.AddAzureProvisioning();\n\nvar webhookSigningSharedSecret = builder.AddParameter(\"webhooksecret\", secret: true);\n\nvar keyVault = builder.AddAzureKeyVault(\"mykeyvault\", (_, construct, kv) => {\n\n  // Create a secret and assign an parameter resource to its value.\n  var secret = new KeyVaultSecret(construct, \"secret\");\n  secret.AssignProperty(x => x.Properties.Value, webhookSigningSharedSecret);\n\n});\n\nbuilder.AddProject<Projects.MyApp>(\"myapp\")\n       .WithReference(keyVault);\n```\n\n----------------------------------------\n\nTITLE: Registering Azure Key Vault Client for Dependency Injection\nDESCRIPTION: Code that demonstrates how to register a SecretClient in the dependency injection container for on-demand secret retrieval.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.Security.KeyVault/README.md#2025-04-20_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddAzureKeyVaultClient(\"secrets\");\n```\n\n----------------------------------------\n\nTITLE: Injecting DbContext in Controller\nDESCRIPTION: Example showing how to inject and use the DbContext in a Web API controller through dependency injection.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Npgsql.EntityFrameworkCore.PostgreSQL/README.md#2025-04-20_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nprivate readonly MyDbContext _context;\n\npublic ProductsController(MyDbContext context)\n{\n    _context = context;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Secret from IConfiguration\nDESCRIPTION: Example of retrieving a secret value from the configuration in a Web API controller using dependency injection and IConfiguration.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.Security.KeyVault/README.md#2025-04-20_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic ProductsController(IConfiguration configuration)\n{\n    string secretValue = configuration[\"secretKey\"];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Output Caching for Minimal API Endpoints\nDESCRIPTION: Examples showing how to configure output caching for minimal API endpoints either by calling the CacheOutput method or by applying the OutputCache attribute.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.StackExchange.Redis.OutputCaching/README.md#2025-04-20_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\napp.MapGet(\"/cached\", Gravatar.WriteGravatar).CacheOutput();\napp.MapGet(\"/attribute\", [OutputCache] (context) =>\n    Gravatar.WriteGravatar(context));\n```\n\n----------------------------------------\n\nTITLE: Registering OpenAI Client in DI Container\nDESCRIPTION: Adds an Azure OpenAI client to the dependency injection container with a specified connection name\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.AI.OpenAI/README.md#2025-04-20_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddAzureOpenAIClient(\"openaiConnectionName\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Bus Client Options\nDESCRIPTION: Example showing how to configure ServiceBusClientOptions using the configureClientBuilder delegate.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.Messaging.ServiceBus/README.md#2025-04-20_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddAzureServiceBusClient(\"sb\", configureClientBuilder: clientBuilder => clientBuilder.ConfigureOptions(options => options.Identifier = \"CLIENT_ID\"));\n```\n\n----------------------------------------\n\nTITLE: Configuring Keycloak Resource in AppHost Program.cs\nDESCRIPTION: This code snippet demonstrates how to add a Keycloak resource to the AppHost and enable service discovery. It adds a Keycloak resource with a specified name and port, then references it in a project.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Aspire.Hosting.Keycloak/README.md#2025-04-20_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar keycloak = builder.AddKeycloak(\"keycloak\", 8080);\n\nvar myService = builder.AddProject<Projects.MyService>()\n                       .WithReference(keycloak);\n```\n\n----------------------------------------\n\nTITLE: Consuming Database Connection in MyService\nDESCRIPTION: Example of how to consume the database connection in the MyService project's Program.cs file.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.Npgsql.EntityFrameworkCore.PostgreSQL/README.md#2025-04-20_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddAzureNpgsqlDbContext<MyDbContext>(\"postgresdb\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Key Vault Settings with Inline Delegates\nDESCRIPTION: Example of using inline delegates to configure Azure Key Vault settings, such as disabling health checks directly in code.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.Security.KeyVault/README.md#2025-04-20_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddAzureKeyVaultClient(\"secrets\", settings => settings.DisableHealthChecks = true);\n```\n\n----------------------------------------\n\nTITLE: DCP IDE Session Request Payload Structure in JSONC\nDESCRIPTION: Example payload structure for creating a new run session in DCP, demonstrating launch configuration options, environment variables, and program arguments. The payload includes project configuration, execution mode settings, and optional parameters.\nSOURCE: https://github.com/dotnet/aspire/blob/main/docs/specs/IDE-execution.md#2025-04-20_snippet_0\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n    \"launch_configurations\": [\n        {\n            // Indicates the type of the launch configuration. \n            // This is a required property for all kinds of launch configurations.\n            \"type\": \"project\",\n\n            \"project_path\": \"(Path to Visual Studio project file for the program)\",\n            \n            // ... other launch configuration properties\n        }\n    ]\n\n    // Environment variable settings (added on top of those inherited from IDE/user environment,\n    // and those read from the launch profile). Optional.\n    \"env\" : [\n        // Environment variables are modeled as objects, with 'name' and 'value' property, for example:\n        { \"name\": \"NO_COLOR\", \"value\": \"1\" },\n        { \"name\": \"EMPTY_VALUE_VAR\", \"value\": \"\" }\n    ],\n\n    // Invocation arguments for the program (modeled as array of strings). Optional.\n    \"args\": [\n        \"-v\",\n        \"1\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Registering DbContext with DI Container\nDESCRIPTION: Basic setup to register a DbContext with the dependency injection container using AddNpgsqlDbContext extension method.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Npgsql.EntityFrameworkCore.PostgreSQL/README.md#2025-04-20_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddNpgsqlDbContext<MyDbContext>(\"postgresdb\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Seq in Service with AppHost Reference\nDESCRIPTION: Code to configure logging and tracing to Seq in a service project when the Seq server is registered in the AppHost. This enables the service to receive the Seq configuration from the AppHost.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Seq/README.md#2025-04-20_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddSeqEndpoint(\"seq\");\n```\n\n----------------------------------------\n\nTITLE: Registering and Consuming Elasticsearch in AppHost\nDESCRIPTION: Example of how to register an Elasticsearch cluster and consume its connection in an AppHost project.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Elastic.Clients.Elasticsearch/README.md#2025-04-20_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nvar elasticsearch = builder.AddElasticsearch(\"elasticsearch\");\n\nvar myService = builder.AddProject<Projects.MyService>()\n                       .WithReference(elasticsearch);\n```\n\n----------------------------------------\n\nTITLE: Registering EventHubProducerClient in DI Container\nDESCRIPTION: Example of how to register an EventHubProducerClient in the dependency injection container using the AddAzureEventHubProducerClient extension method.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.Messaging.EventHubs/README.md#2025-04-20_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddAzureEventHubProducerClient(\"eventHubsConnectionName\");\n```\n\n----------------------------------------\n\nTITLE: Injecting BlobServiceClient in a Controller\nDESCRIPTION: Example of how to inject and use a BlobServiceClient in a Web API controller using dependency injection.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.Storage.Blobs/README.md#2025-04-20_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nprivate readonly BlobServiceClient _client;\n\npublic ProductsController(BlobServiceClient client)\n{\n    _client = client;\n}\n```\n\n----------------------------------------\n\nTITLE: Registering MilvusClient in dependency injection container\nDESCRIPTION: Adds a MilvusClient to the dependency injection container with a specified connection name.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Milvus.Client/README.md#2025-04-20_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddMilvusClient(\"milvus\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Elasticsearch with CloudId and ApiKey Using Inline Delegate\nDESCRIPTION: Example of how to configure the Elasticsearch client with CloudId and ApiKey using an inline delegate.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Elastic.Clients.Elasticsearch/README.md#2025-04-20_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddElasticsearchClient(\"elasticsearch\",\nsettings => {\n    settings.CloudId = \"Valid CloudId\";\n    settings.ApiKey = \"Valid ApiKey\";\n});\n```\n\n----------------------------------------\n\nTITLE: Consuming Qdrant Reference in Service Project\nDESCRIPTION: Code showing how to consume a Qdrant reference in a service project after it has been configured in AppHost.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Qdrant.Client/README.md#2025-04-20_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddQdrantClient(\"qdrant\");\n```\n\n----------------------------------------\n\nTITLE: Configuring NATS Resource in .NET Aspire AppHost\nDESCRIPTION: C# code snippet demonstrating how to add a NATS resource to a .NET Aspire AppHost and reference it in a service. This configuration is typically done in the Program.cs file of the AppHost project.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Aspire.Hosting.Nats/README.md#2025-04-20_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar nats = builder.AddNats(\"nats\");\n\nvar myService = builder.AddProject<Projects.MyService>()\n                       .WithReference(nats);\n```\n\n----------------------------------------\n\nTITLE: Registering and Consuming Azure Key Vault in AppHost\nDESCRIPTION: Example of registering an Azure Key Vault resource in AppHost and consuming it in a service project, with different behavior based on execution context.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.Security.KeyVault/README.md#2025-04-20_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\n// Service registration\nvar keyVault = builder.ExecutionContext.IsPublishMode\n    ? builder.AddAzureKeyVault(\"secrets\")\n    : builder.AddConnectionString(\"secrets\");\n\n// Service consumption\nvar myService = builder.AddProject<Projects.MyService>()\n                       .WithReference(keyVault);\n```\n\n----------------------------------------\n\nTITLE: Adding Azure Event Hubs to AppHost in C#\nDESCRIPTION: C# code snippet demonstrating how to add Azure Event Hubs connection to the AppHost and reference it in a service project.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Aspire.Hosting.Azure.EventHubs/README.md#2025-04-20_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar eventHubs = builder.AddAzureEventHubs(\"eh\");\n\nvar myService = builder.AddProject<Projects.MyService>()\n                       .WithReference(eventHubs);\n```\n\n----------------------------------------\n\nTITLE: AppHost Queue Configuration\nDESCRIPTION: Configuration of Azure Storage Queue in AppHost project with connection reference setup.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.Storage.Queues/README.md#2025-04-20_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nvar queue = builder.ExecutionContext.IsPublishMode\n    ? builder.AddAzureStorage(\"storage\").AddQueues(\"queue\")\n    : builder.AddConnectionString(\"queue\");\n\nvar myService = builder.AddProject<Projects.MyService>()\n                       .WithReference(queue);\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Blob Storage Settings Inline\nDESCRIPTION: Example of configuring Azure Blob Storage settings inline using a delegate when adding the client to the service collection.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.Storage.Blobs/README.md#2025-04-20_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddAzureBlobClient(\"blobs\", settings => settings.HealthChecks = false);\n```\n\n----------------------------------------\n\nTITLE: Configuring Orleans Cluster in a .NET Aspire AppHost\nDESCRIPTION: Example of configuring an Orleans cluster in a .NET Aspire AppHost. This code sets up Azure Storage for clustering and grain persistence, creates an Orleans cluster, and connects a server (silo) and client to it.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Aspire.Hosting.Orleans/README.md#2025-04-20_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar storage = builder.AddAzureStorage(\"storage\").RunAsEmulator();\nvar clusteringTable = storage.AddTables(\"clustering\");\nvar grainStorage = storage.AddBlobs(\"grainstate\");\n\nvar orleans = builder.AddOrleans(\"my-app\")\n                     .WithClustering(clusteringTable)\n                     .WithGrainStorage(\"Default\", grainStorage);\n\nbuilder.AddProject<Projects.OrleansServer>(\"silo\")\n       .WithReference(orleans);\n\nbuilder.AddProject<Projects.OrleansClient>(\"frontend\")\n       .WithReference(orleans.AsClient());\n```\n\n----------------------------------------\n\nTITLE: Adding Azure Log Analytics Workspace in AppHost\nDESCRIPTION: C# code snippet demonstrating how to add an Azure Log Analytics workspace to a .NET Aspire application and pass the workspace ID to a service via an environment variable.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Aspire.Hosting.Azure.OperationalInsights/README.md#2025-04-20_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar laws = builder.AddAzureLogAnalyticsWorkspace(\"laws\");\n\nvar myService = builder.AddProject<Projects.MyService>()\n                       .WithEnvironment(\"LOG_ANALYTICS_WORKSPACE_ID\", $\"{laws.WorkspaceId}\");\n```\n\n----------------------------------------\n\nTITLE: Consuming Azure Web PubSub Connection in Service Project\nDESCRIPTION: This code snippet shows how to consume the Azure Web PubSub connection in a service project's Program.cs file.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.Messaging.WebPubSub/README.md#2025-04-20_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddAzureWebPubSubServiceClient(\"wps\");\n```\n\n----------------------------------------\n\nTITLE: Configuring MySqlConnectorSettings in appsettings.json\nDESCRIPTION: JSON configuration example showing how to configure MySqlConnectorSettings options using the Aspire:MySqlConnector configuration key.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.MySqlConnector/README.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Aspire\": {\n    \"MySqlConnector\": {\n      \"DisableHealthChecks\": true,\n      \"DisableTracing\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Blob Storage Client Options Inline\nDESCRIPTION: Example of configuring Azure Blob Storage client options inline when adding the client to the service collection, setting the ApplicationId for diagnostics.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.Storage.Blobs/README.md#2025-04-20_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddAzureBlobClient(\"blobs\", configureClientBuilder: clientBuilder => clientBuilder.ConfigureOptions(options => options.Diagnostics.ApplicationId = \"myapp\"));\n```\n\n----------------------------------------\n\nTITLE: Service Queue Client Configuration\nDESCRIPTION: Configuration of Azure Queue Client in a service project using the connection reference.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.Storage.Queues/README.md#2025-04-20_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddAzureQueueClient(\"queue\");\n```\n\n----------------------------------------\n\nTITLE: Registering DbContext with AddAzureNpgsqlDbContext\nDESCRIPTION: Example of how to register a DbContext for dependency injection using the AddAzureNpgsqlDbContext extension method in the Program.cs file.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.Npgsql.EntityFrameworkCore.PostgreSQL/README.md#2025-04-20_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddAzureNpgsqlDbContext<MyDbContext>(\"postgresdb\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Keycloak in AppHost\nDESCRIPTION: Example of registering and configuring Keycloak server in the AppHost project, including service references and port configuration.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Keycloak.Authentication/README.md#2025-04-20_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nvar keycloak = builder.AddKeycloak(\"keycloak\", 8080);\n\nvar apiService = builder.AddProject<Projects.Keycloak_ApiService>(\"apiservice\")\n                        .WithReference(keycloak);\n\nbuilder.AddProject<Projects.Keycloak_Web>(\"webfrontend\")\n       .WithExternalHttpEndpoints()\n       .WithReference(keycloak)\n       .WithReference(apiService);\n```\n\n----------------------------------------\n\nTITLE: Configuring Seq with JSON Configuration\nDESCRIPTION: Example appsettings.json configuration that sets Seq options using the Microsoft.Extensions.Configuration system. This shows how to disable health checks and specify a custom server URL.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Seq/README.md#2025-04-20_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Aspire\": {\n    \"Seq\": {\n      \"DisableHealthChecks\": true,\n      \"ServerUrl\": \"http://localhost:5341\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Seq Endpoint to Service Project\nDESCRIPTION: Basic usage example showing how to register OpenTelemetry Protocol exporters to send logs and traces to Seq. This should be added to the Program.cs file of your service projects.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Seq/README.md#2025-04-20_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddSeqEndpoint(\"seq\");\n```\n\n----------------------------------------\n\nTITLE: Inline Settings Configuration\nDESCRIPTION: Examples of configuring Oracle EntityFrameworkCore settings using inline delegates.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Oracle.EntityFrameworkCore/README.md#2025-04-20_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddOracleDatabaseDbContext<MyDbContext>(\"orcl\", settings => settings.DisableHealthChecks = true);\n```\n\n----------------------------------------\n\nTITLE: Adding Azure Key Vault Secrets to Configuration\nDESCRIPTION: Code snippet showing how to extend the application's configuration to include secrets from Azure Key Vault using the AddAzureKeyVaultSecrets extension method.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.Security.KeyVault/README.md#2025-04-20_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Configuration.AddAzureKeyVaultSecrets(\"secrets\");\n```\n\n----------------------------------------\n\nTITLE: Inline Configuration of PostgreSQL Settings\nDESCRIPTION: Examples of configuring PostgreSQL settings using inline delegates for both AddNpgsqlDbContext and EnrichNpgsqlDbContext methods.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Npgsql.EntityFrameworkCore.PostgreSQL/README.md#2025-04-20_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddNpgsqlDbContext<MyDbContext>(\"postgresdb\", settings => settings.DisableHealthChecks = true);\n```\n\n----------------------------------------\n\nTITLE: Service Oracle Connection Configuration\nDESCRIPTION: Example of consuming the Oracle database connection in a service project.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Oracle.EntityFrameworkCore/README.md#2025-04-20_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddOracleDatabaseDbContext<MyDbContext>(\"freepdb1\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Search Client with Inline Delegates\nDESCRIPTION: Examples of configuring Azure Search client using inline delegates for settings and client options\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.Search.Documents/README.md#2025-04-20_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddAzureSearchClient(\"searchConnectionName\", settings => settings.DisableTracing = true);\n```\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddAzureSearchClient(\"searchConnectionName\", configureClientBuilder: builder => builder.ConfigureOptions(options => options.Diagnostics.ApplicationId = \"CLIENT_ID\"));\n```\n\n----------------------------------------\n\nTITLE: Consuming Azure Table Storage Connection in Service Project\nDESCRIPTION: Shows how to consume the Azure Table Storage connection in a service project after it has been referenced through AppHost.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.Data.Tables/README.md#2025-04-20_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddAzureTableClient(\"tables\");\n```\n\n----------------------------------------\n\nTITLE: Injecting ServiceBusClient in Controller\nDESCRIPTION: Example showing how to inject and use the ServiceBusClient in an API controller through dependency injection.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.Messaging.ServiceBus/README.md#2025-04-20_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nprivate readonly ServiceBusClient _client;\n\npublic ProductsController(ServiceBusClient client)\n{\n    _client = client;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving EventHubProducerClient in Controller\nDESCRIPTION: Example of how to retrieve an EventHubProducerClient instance using dependency injection in a Web API controller.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.Messaging.EventHubs/README.md#2025-04-20_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nprivate readonly EventHubProducerClient _client;\n\npublic ProductsController(EventHubProducerClient client)\n{\n    _client = client;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Blob Storage Connection String with Service URI\nDESCRIPTION: JSON configuration example for setting up an Azure Blob Storage connection using a Service URI in the appsettings.json file.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.Storage.Blobs/README.md#2025-04-20_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ConnectionStrings\": {\n    \"blobsConnectionName\": \"https://{account_name}.blob.core.windows.net/\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SignalR in AppHost\nDESCRIPTION: C# code demonstrating how to add and configure Azure SignalR connection in the AppHost Program.cs file. Shows adding SignalR service and referencing it in a project.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Aspire.Hosting.Azure.SignalR/README.md#2025-04-20_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar signalR = builder.AddAzureSignalR(\"sr\");\n\nvar myService = builder.AddProject<Projects.MyService>()\n                       .WithReference(signalR);\n```\n\n----------------------------------------\n\nTITLE: Configuring RabbitMQ Client Settings Inline in C#\nDESCRIPTION: Demonstrates how to configure RabbitMQ client settings inline using a delegate, specifically disabling health checks.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.RabbitMQ.Client/README.md#2025-04-20_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddRabbitMQClient(\"messaging\", settings => settings.DisableHealthChecks = true);\n```\n\n----------------------------------------\n\nTITLE: Configuring SqlClient Settings with Inline Delegate\nDESCRIPTION: Demonstrates how to configure SqlClient settings using an inline delegate. This approach allows you to set options programmatically when registering the SqlConnection.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Microsoft.Data.SqlClient/README.md#2025-04-20_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddSqlServerClient(\"sqldata\", settings => settings.DisableHealthChecks = true);\n```\n\n----------------------------------------\n\nTITLE: Consuming Event Hubs Connection in Service Project\nDESCRIPTION: Example of consuming the Event Hubs connection in a service project by adding an EventProcessorClient.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.Messaging.EventHubs/README.md#2025-04-20_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddAzureEventProcessorClient(\"eventHubsConnectionName\", settings =>\n{\n    settings.EventHubName = \"MyHub\";\n});\n```\n\n----------------------------------------\n\nTITLE: Consuming PostgreSQL Connection in a Service\nDESCRIPTION: Code showing how to consume the PostgreSQL database connection in a service's Program.cs file using the Aspire.Azure.Npgsql data source.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Aspire.Hosting.Azure.PostgreSQL/README.md#2025-04-20_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddAzureNpgsqlDataSource(\"postgresdb\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Connection Options with Inline Delegates\nDESCRIPTION: Shows how to configure Redis connection options such as connection timeout using an inline delegate parameter.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.StackExchange.Redis.DistributedCaching/README.md#2025-04-20_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddRedisDistributedCache(\"cache\", configureOptions: options => options.ConnectTimeout = 3000);\n```\n\n----------------------------------------\n\nTITLE: Using a Named Connection String for Redis\nDESCRIPTION: Shows how to configure Redis using a named connection string from the ConnectionStrings configuration section.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.StackExchange.Redis.DistributedCaching/README.md#2025-04-20_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddRedisDistributedCache(\"myRedisConnectionName\");\n```\n\n----------------------------------------\n\nTITLE: Consuming the Cosmos DB Connection in a Service Project\nDESCRIPTION: Service project code showing how to consume the Cosmos DB connection that was passed from the AppHost. This registers the CosmosClient in the service's DI container.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Microsoft.Azure.Cosmos/README.md#2025-04-20_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddAzureCosmosClient(\"cosmosdb\");\n```\n\n----------------------------------------\n\nTITLE: Registering MySQL in AppHost and Referencing in a Service\nDESCRIPTION: Example of registering a MySQL database in the AppHost and referencing it from a service project.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.MySqlConnector/README.md#2025-04-20_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nvar mysqldb = builder.AddMySql(\"mysql\").AddDatabase(\"mysqldb\");\n\nvar myService = builder.AddProject<Projects.MyService>()\n                       .WithReference(mysqldb);\n```\n\n----------------------------------------\n\nTITLE: Consuming Azure OpenAI Client in Service Program.cs\nDESCRIPTION: C# code snippet showing how to consume the Azure OpenAI connection in a service project's Program.cs file using the Aspire.Azure.AI.OpenAI client library.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Aspire.Hosting.Azure.CognitiveServices/README.md#2025-04-20_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddAzureOpenAIClient(\"openai\");\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAI Client Settings Inline\nDESCRIPTION: Examples of inline configuration for Azure OpenAI client settings and options\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.AI.OpenAI/README.md#2025-04-20_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddAzureOpenAIClient(\"openaiConnectionName\", settings => settings.DisableTracing = true);\n\nbuilder.AddAzureOpenAIClient(\"openaiConnectionName\", configureClientBuilder: configureClientBuilder: builder => builder.ConfigureOptions(options => options.NetworkTimeout = TimeSpan.FromSeconds(2)));\n```\n\n----------------------------------------\n\nTITLE: Configuring AppHost for OpenAI Service\nDESCRIPTION: Example of setting up Azure OpenAI service in the AppHost project\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.AI.OpenAI/README.md#2025-04-20_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nvar openai = builder.ExecutionContext.IsPublishMode\n    ? builder.AddAzureOpenAI(\"openai\")\n    : builder.AddConnectionString(\"openai\");\n\nvar myService = builder.AddProject<Projects.MyService>()\n                       .WithReference(openai);\n```\n\n----------------------------------------\n\nTITLE: Connection String Configuration\nDESCRIPTION: JSON configuration example for SQL Server connection string\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Microsoft.EntityFrameworkCore.SqlServer/README.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ConnectionStrings\": {\n    \"myConnection\": \"Data Source=myserver;Initial Catalog=master\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering MongoDB Client in DI Container\nDESCRIPTION: Example of how to register an IMongoClient in the dependency injection container using the AddMongoDBClient extension method.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.MongoDB.Driver/README.md#2025-04-20_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddMongoDBClient(\"mongodb\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Settings with Inline Delegates\nDESCRIPTION: Demonstrates how to configure StackExchangeRedisSettings using an inline delegate to disable health checks.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.StackExchange.Redis.DistributedCaching/README.md#2025-04-20_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddRedisDistributedCache(\"cache\", settings => settings.DisableHealthChecks = true);\n```\n\n----------------------------------------\n\nTITLE: Azure Search Settings Configuration\nDESCRIPTION: JSON configuration for Azure Search settings including tracing options\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.Search.Documents/README.md#2025-04-20_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Aspire\": {\n    \"Azure\": {\n      \"Search\": {\n        \"Documents\": {\n          \"DisableTracing\": false,\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Azure Application Insights with .NET Aspire AppHost\nDESCRIPTION: C# code example demonstrating how to add an Azure Application Insights connection to a .NET Aspire application and reference it from a service. This is implemented in the Program.cs file of the AppHost project.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Aspire.Hosting.Azure.ApplicationInsights/README.md#2025-04-20_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar appInsights = builder.AddAzureApplicationInsights(\"appInsights\");\n\nvar myService = builder.AddProject<Projects.MyService>()\n                       .WithReference(appInsights);\n```\n\n----------------------------------------\n\nTITLE: Consuming Service Bus Connection in a Service Project\nDESCRIPTION: C# code for a service project's Program.cs file showing how to consume the Azure Service Bus connection by adding a client using the Aspire.Azure.Messaging.ServiceBus component.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Aspire.Hosting.Azure.ServiceBus/README.md#2025-04-20_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddAzureServiceBusClient(\"sb\");\n```\n\n----------------------------------------\n\nTITLE: Registering Redis Server in AppHost\nDESCRIPTION: C# code demonstrating how to register an Azure Redis server and configure service references in the application host.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Aspire.Hosting.Azure.Redis/README.md#2025-04-20_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar redis = builder.AddAzureRedis(\"cache\");\n\nvar myService = builder.AddProject<Projects.MyService>()\n                       .WithReference(redis);\n```\n\n----------------------------------------\n\nTITLE: Custom DbContext Configuration\nDESCRIPTION: Advanced configuration using EnrichCosmosDbContext with manual DbContext registration.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Microsoft.EntityFrameworkCore.Cosmos/README.md#2025-04-20_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar connectionString = builder.Configuration.GetConnectionString(\"mydb\");\nbuilder.Services.AddDbContextPool<MyDbContext>(dbContextOptionsBuilder => dbContextOptionsBuilder.UseCosmos(connectionString, \"mydb\"));\nbuilder.EnrichCosmosDbContext<MyDbContext>();\n```\n\n----------------------------------------\n\nTITLE: Aspire Component Configuration in JSON\nDESCRIPTION: Configuration options for the Aspire PostgreSQL component including health checks and tracing settings.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Npgsql.EntityFrameworkCore.PostgreSQL/README.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Aspire\": {\n    \"Npgsql\": {\n      \"EntityFrameworkCore\": {\n        \"PostgreSQL\": {\n          \"DisableHealthChecks\": true,\n          \"DisableTracing\": true\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Client in Service Project\nDESCRIPTION: Code snippet showing how to configure a Redis client in a service project using the Aspire.StackExchange.Redis package. This connects to the Garnet cache instance defined in the AppHost.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Aspire.Hosting.Garnet/README.md#2025-04-20_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddRedisClient(\"cache\");\n```\n\n----------------------------------------\n\nTITLE: Registering and Referencing SQL Server in AppHost\nDESCRIPTION: Shows how to register a SQL Server instance and database in the AppHost, then reference it from a service project. This establishes the connection between the SQL resource and the service that will use it.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Microsoft.Data.SqlClient/README.md#2025-04-20_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nvar sql = builder.AddSqlServer(\"sql\").AddDatabase(\"sqldata\");\n\nvar myService = builder.AddProject<Projects.MyService>()\n                       .WithReference(sql);\n```\n\n----------------------------------------\n\nTITLE: Registering ServiceBusClient in DI Container\nDESCRIPTION: Adding Azure Service Bus client to the dependency injection container using the AddAzureServiceBusClient extension method.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.Messaging.ServiceBus/README.md#2025-04-20_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddAzureServiceBusClient(\"sb\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Milvus client with inline settings\nDESCRIPTION: Example of configuring MilvusClient by passing an Action delegate to set options directly in code, such as setting the API key.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Milvus.Client/README.md#2025-04-20_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddMilvusClient(\"milvus\", settings => settings.Key = \"root:12345!@#$%\");\n```\n\n----------------------------------------\n\nTITLE: Configuring EventProcessorClient Options\nDESCRIPTION: JSON configuration example for setting options for an EventProcessorClient using the Aspire:Azure:Messaging:EventHubs configuration key prefix.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.Messaging.EventHubs/README.md#2025-04-20_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Aspire\": {\n    \"Azure\": {\n      \"Messaging\": {\n        \"EventHubs\": {\n          \"EventProcessorClient\": {\n            \"EventHubName\": \"MyHub\",\n            \"BlobContainerName\": \"checkpoints\",\n            \"ClientOptions\": {\n              \"Identifier\": \"PROCESSOR_ID\"\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring QdrantClient with Inline Delegate\nDESCRIPTION: Example of configuring QdrantClient using an inline delegate to set options directly in code.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Qdrant.Client/README.md#2025-04-20_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddQdrantClient(\"qdrant\", settings => settings.ApiKey = \"12345!@#$%\");\n```\n\n----------------------------------------\n\nTITLE: Registering Azure Table Client in Service Container\nDESCRIPTION: Demonstrates how to register a TableServiceClient in the dependency injection container using the AddAzureTableClient extension method.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.Data.Tables/README.md#2025-04-20_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddAzureTableClient(\"tables\");\n```\n\n----------------------------------------\n\nTITLE: Consuming Valkey Connection in a Service\nDESCRIPTION: Code showing how to consume the Valkey redis connection in a service project using the Aspire.StackExchange.Redis client library. This connects to the 'cache' resource defined in the AppHost.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Aspire.Hosting.Valkey/README.md#2025-04-20_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddRedisClient(\"cache\");\n```\n\n----------------------------------------\n\nTITLE: Redis Advanced Configuration Settings\nDESCRIPTION: Demonstrates advanced Redis configuration options including timeout settings and feature flags.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.StackExchange.Redis/README.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Aspire\": {\n    \"StackExchange\": {\n      \"Redis\": {\n        \"ConfigurationOptions\": {\n          \"ConnectTimeout\": 3000,\n          \"ConnectRetry\": 2\n        },\n        \"DisableHealthChecks\": true,\n        \"DisableTracing\": false\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Fully Qualified Namespace Connection String\nDESCRIPTION: JSON configuration example for using a fully qualified namespace as a connection string, which works with the AzureMessagingEventHubsSettings.Credential property.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.Messaging.EventHubs/README.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ConnectionStrings\": {\n    \"eventHubsConnectionName\": \"{your_namespace}.servicebus.windows.net\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Consuming Keycloak in Web Frontend\nDESCRIPTION: Example of consuming Keycloak connection in a web frontend project using OpenID Connect authentication.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Keycloak.Authentication/README.md#2025-04-20_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nvar oidcScheme = OpenIdConnectDefaults.AuthenticationScheme;\n\nbuilder.Services.AddAuthentication(oidcScheme)\n                .AddKeycloakOpenIdConnect(\n                    \"keycloak\", \n                    realm: \"WeatherShop\", \n                    oidcScheme);\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAI Settings Inline\nDESCRIPTION: Example of configuring OpenAI settings using inline delegates for settings and client options.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.OpenAI/README.md#2025-04-20_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddOpenAIClient(\"openaiConnectionName\", settings => settings.DisableTracing = true);\n```\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddOpenAIClient(\"openaiConnectionName\", configureOptions: options => options.NetworkTimeout = TimeSpan.FromSeconds(2));\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Environment Variables in .NET Aspire\nDESCRIPTION: Example of environment variables used to configure OpenTelemetry in .NET Aspire applications. These variables set the service name, instance ID, and OTLP exporter endpoint.\nSOURCE: https://github.com/dotnet/aspire/blob/main/docs/open-telemetry-architecture.md#2025-04-20_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nOTEL_SERVICE_NAME = myfrontend\nOTEL_RESOURCE_ATTRIBUTES = service.instance.id=1a5f9c1e-e5ba-451b-95ee-ced1ee89c168\nOTEL_EXPORTER_OTLP_ENDPOINT = http://localhost:4318\n```\n\n----------------------------------------\n\nTITLE: Adding Output Cache Middleware to the Request Pipeline\nDESCRIPTION: Code snippet demonstrating how to add the output cache middleware to the request processing pipeline using the UseOutputCache method.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.StackExchange.Redis.OutputCaching/README.md#2025-04-20_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\napp.UseOutputCache();\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Bus with Inline Delegates\nDESCRIPTION: Example showing how to configure Service Bus settings using inline delegates for health check queue name.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.Messaging.ServiceBus/README.md#2025-04-20_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddAzureServiceBusClient(\"sb\", settings => settings.HealthCheckQueueName = \"myQueue\");\n```\n\n----------------------------------------\n\nTITLE: Running Aspire Applications with CLI\nDESCRIPTION: Starts an Aspire application. If no project is specified, it searches the current directory for a .csproj file. The command will error if it can't find a .csproj file or if multiple are found. This is a passthrough to 'dotnet run' via the CLI runner service.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Aspire.Cli/README.md#2025-04-20_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\naspire run [--project <PATH_TO_CSPROJ>]\n```\n\n----------------------------------------\n\nTITLE: Injecting CosmosClient in a Web API Controller\nDESCRIPTION: Example of using dependency injection to retrieve the CosmosClient instance in a controller. This shows the pattern for accessing the client after it has been registered in the DI container.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Microsoft.Azure.Cosmos/README.md#2025-04-20_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nprivate readonly CosmosClient _client;\n\npublic ProductsController(CosmosClient client)\n{\n    _client = client;\n}\n```\n\n----------------------------------------\n\nTITLE: AppHost Configuration\nDESCRIPTION: Configuration of Cosmos DB connection in the AppHost project with service reference.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Microsoft.EntityFrameworkCore.Cosmos/README.md#2025-04-20_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nvar cosmosdb = builder.AddAzureCosmosDB(\"cdb\").AddCosmosDatabase(\"cosmosdb\");\n\nvar myService = builder.AddProject<Projects.MyService>()\n                       .WithReference(cosmosdb);\n```\n\n----------------------------------------\n\nTITLE: Registering WebPubSubServiceClient in DI Container\nDESCRIPTION: This code snippet shows how to register a WebPubSubServiceClient for dependency injection using the AddAzureWebPubSubServiceClient extension method.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.Messaging.WebPubSub/README.md#2025-04-20_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddAzureWebPubSubServiceClient(\"wps1\");\n```\n\n----------------------------------------\n\nTITLE: Registering Azure Queue Client in DI Container\nDESCRIPTION: Basic registration of QueueServiceClient in the dependency injection container using AddAzureQueueClient extension method.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.Storage.Queues/README.md#2025-04-20_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddAzureQueueClient(\"queue\");\n```\n\n----------------------------------------\n\nTITLE: Service URI Connection Configuration\nDESCRIPTION: JSON configuration example for Azure Storage Queues using Service URI connection format.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.Storage.Queues/README.md#2025-04-20_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ConnectionStrings\": {\n    \"queueConnectionName\": \"https://{account_name}.queue.core.windows.net/\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Consuming Azure Blob Storage in a Service\nDESCRIPTION: Code for a service's Program.cs file showing how to consume the Azure Blob Storage connection using the Aspire.Azure.Storage.Blobs client library.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Aspire.Hosting.Azure.Storage/README.md#2025-04-20_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddAzureBlobClient(\"blobs\");\n```\n\n----------------------------------------\n\nTITLE: Retrieving MySqlConnection via Dependency Injection\nDESCRIPTION: Example of using dependency injection to retrieve a MySqlConnection in a controller constructor.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.MySqlConnector/README.md#2025-04-20_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nprivate readonly MySqlConnection _connection;\n\npublic ProductsController(MySqlConnection connection)\n{\n    _connection = connection;\n}\n```\n\n----------------------------------------\n\nTITLE: Inline Settings Configuration\nDESCRIPTION: Example of configuring Aspire PostgreSQL settings using an inline delegate.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.Npgsql/README.md#2025-04-20_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddAzureNpgsqlDataSource(\"postgresdb\", settings => settings.DisableHealthChecks = true);\n```\n\n----------------------------------------\n\nTITLE: Configuring Cosmos DB Settings with Inline Delegates\nDESCRIPTION: Code example showing how to configure Cosmos DB settings using inline delegates. This approach allows you to set options programmatically, such as disabling tracing.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Microsoft.Azure.Cosmos/README.md#2025-04-20_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddAzureCosmosClient(\"cosmosConnectionName\", settings => settings.DisableTracing = true);\n```\n\n----------------------------------------\n\nTITLE: Consuming Milvus reference in a service project\nDESCRIPTION: Example showing how to consume a Milvus reference in a service project that was established through WithReference in the AppHost.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Milvus.Client/README.md#2025-04-20_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddMilvusClient(\"milvus\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Component Settings in JSON\nDESCRIPTION: Demonstrates the JSON structure for configuring both Aspire-specific settings and Azure SDK ClientOptions for an Azure Service Bus component.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/README.md#2025-04-20_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Aspire\": {\n    \"Azure\": {\n      \"Messaging:ServiceBus\": {\n        \"HealthChecks\": false,\n        \"Namespace\": \"aspire-servicebus.servicebus.windows.net\",\n\n        \"ClientOptions\": {\n          \"RetryOptions\": {\n            \"MaxRetries\": 2,\n            \"Delay\": \"00:00:01\"\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering RabbitMQ Client in ASP.NET Core\nDESCRIPTION: Demonstrates how to register a RabbitMQ client in the dependency injection container using the AddRabbitMQClient extension method.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.RabbitMQ.Client/README.md#2025-04-20_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddRabbitMQClient(\"messaging\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Npgsql Options with Inline Delegates\nDESCRIPTION: Example of how to use an inline delegate to configure Npgsql settings when adding a data source.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Npgsql/README.md#2025-04-20_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddNpgsqlDataSource(\"postgresdb\", settings => settings.DisableHealthChecks = true);\n```\n\n----------------------------------------\n\nTITLE: Registering MySqlDataSource in DI Container\nDESCRIPTION: Example of adding a MySQL data source to the DI container using a direct connection string in Program.cs.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.MySqlConnector/README.md#2025-04-20_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddMySqlDataSource(\"server=mysql;user id=myuser;password=mypass\");\n```\n\n----------------------------------------\n\nTITLE: Azure PostgreSQL Server Configuration\nDESCRIPTION: Example of registering and configuring an Azure Database for PostgreSQL instance in the AppHost.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.Npgsql/README.md#2025-04-20_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nvar postgresdb = builder.AddAzurePostgresFlexibleServer(\"pg\").AddDatabase(\"postgresdb\");\n\nvar myService = builder.AddProject<Projects.MyService>()\n                       .WithReference(postgresdb);\n```\n\n----------------------------------------\n\nTITLE: Configuring CosmosClientOptions with Inline Delegates\nDESCRIPTION: Code example demonstrating how to configure CosmosClientOptions using the optional delegate parameter. This example sets the ApplicationName property which affects the User-Agent header for all requests.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Microsoft.Azure.Cosmos/README.md#2025-04-20_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddAzureCosmosClient(\"cosmosConnectionName\", configureClientOptions: clientOptions => clientOptions.ApplicationName = \"myapp\");\n```\n\n----------------------------------------\n\nTITLE: Using Named Connection String with AddSqlServerClient\nDESCRIPTION: Shows how to register a SQL connection using a named connection string from configuration. The method references a connection string that will be retrieved from the ConnectionStrings section.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Microsoft.Data.SqlClient/README.md#2025-04-20_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddSqlServerClient(\"myConnection\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Settings with Inline Delegates\nDESCRIPTION: Code example showing how to configure Redis settings using inline delegates, specifically disabling health checks programmatically.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.StackExchange.Redis.OutputCaching/README.md#2025-04-20_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddRedisOutputCache(\"cache\", settings => settings.DisableHealthChecks = true);\n```\n\n----------------------------------------\n\nTITLE: Azure OpenAI Settings Configuration\nDESCRIPTION: JSON configuration example for Azure OpenAI client settings including tracing and client options\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.AI.OpenAI/README.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Aspire\": {\n    \"Azure\": {\n      \"AI\": {\n        \"OpenAI\": {\n          \"DisableTracing\": false,\n          \"ClientOptions\": {\n            \"UserAgentApplicationId\": \"myapp\"\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting DbContext in Controller\nDESCRIPTION: Example showing how to inject and use the DbContext in a Web API controller\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Microsoft.EntityFrameworkCore.SqlServer/README.md#2025-04-20_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nprivate readonly MyDbContext _context;\n\npublic ProductsController(MyDbContext context)\n{\n    _context = context;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding NATS Client in Program.cs\nDESCRIPTION: Registers a NATS client connection in the dependency injection container using the AddNatsClient extension method.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.NATS.Net/README.md#2025-04-20_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddNatsClient(\"nats\");\n```\n\n----------------------------------------\n\nTITLE: Redis Controller Dependency Injection\nDESCRIPTION: Shows how to inject and use an IConnectionMultiplexer in a controller constructor.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.StackExchange.Redis/README.md#2025-04-20_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nprivate readonly IConnectionMultiplexer _cache;\n\npublic ProductsController(IConnectionMultiplexer cache)\n{\n    _cache = cache;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Settings Inline with EnrichAzureNpgsqlDbContext\nDESCRIPTION: Example of how to configure AzureNpgsqlEntityFrameworkCorePostgreSQLSettings options inline when calling EnrichAzureNpgsqlDbContext.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.Npgsql.EntityFrameworkCore.PostgreSQL/README.md#2025-04-20_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.EnrichAzureNpgsqlDbContext<MyDbContext>(settings => settings.DisableHealthChecks = true);\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Key Vault Options in appsettings.json\nDESCRIPTION: Example of configuring Azure Key Vault options using the appsettings.json file, including health checks, tracing, and client options.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.Security.KeyVault/README.md#2025-04-20_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Aspire\": {\n    \"Azure\": {\n      \"Security\": {\n        \"KeyVault\": {\n          \"DisableHealthChecks\": true,\n          \"DisableTracing\": false,\n          \"ClientOptions\": {\n            \"Diagnostics\": {\n              \"ApplicationId\": \"myapp\"\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Redis Configuration via appsettings.json\nDESCRIPTION: JSON configuration example showing how to configure StackExchangeRedisSettings and ConfigurationOptions using the Aspire:StackExchange:Redis configuration key.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.StackExchange.Redis.DistributedCaching/README.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Aspire\": {\n    \"StackExchange\": {\n      \"Redis\": {\n        \"ConfigurationOptions\": {\n          \"ConnectTimeout\": 3000,\n          \"ConnectRetry\": 2\n        },\n        \"DisableHealthChecks\": true,\n        \"DisableTracing\": false\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Named Connection String for Redis Output Cache\nDESCRIPTION: Code example showing how to configure Redis output cache with a named connection string that will be retrieved from the ConnectionStrings configuration section.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.StackExchange.Redis.OutputCaching/README.md#2025-04-20_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddRedisOutputCache(\"myRedisConnectionName\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Web PubSub Settings with Inline Delegate\nDESCRIPTION: This code snippet demonstrates how to configure Azure Web PubSub settings using an inline delegate, specifically disabling health checks.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.Messaging.WebPubSub/README.md#2025-04-20_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddAzureWebPubSubServiceClient(\"wps\", settings => settings.DisableHealthChecks = true);\n```\n\n----------------------------------------\n\nTITLE: Aspire PostgreSQL Settings Configuration\nDESCRIPTION: JSON configuration example for Aspire PostgreSQL settings including health checks and tracing options.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.Npgsql/README.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Aspire\": {\n    \"Npgsql\": {\n      \"DisableHealthChecks\": true,\n      \"DisableTracing\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting DbContext in Controller\nDESCRIPTION: Example of dependency injection usage in a Web API controller to access the MySQL DbContext\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Pomelo.EntityFrameworkCore.MySql/README.md#2025-04-20_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nprivate readonly MyDbContext _context;\n\npublic ProductsController(MyDbContext context)\n{\n    _context = context;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Options in JSON Configuration\nDESCRIPTION: JSON configuration example showing how to configure Redis settings including ConnectionOptions, health checks, and tracing in the appsettings.json file.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.StackExchange.Redis.OutputCaching/README.md#2025-04-20_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Aspire\": {\n    \"StackExchange\": {\n      \"Redis\": {\n        \"ConfigurationOptions\": {\n          \"ConnectTimeout\": 3000,\n          \"ConnectRetry\": 2\n        },\n        \"DisableHealthChecks\": true,\n        \"DisableTracing\": false\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering OpenAIClient in DI Container\nDESCRIPTION: Basic setup to register OpenAIClient with dependency injection using a connection name.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.OpenAI/README.md#2025-04-20_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddOpenAIClient(\"openaiConnectionName\");\n```\n\n----------------------------------------\n\nTITLE: Configuring WebPubSubServiceClientOptions with Inline Delegate\nDESCRIPTION: This code snippet shows how to configure WebPubSubServiceClientOptions using an inline delegate, specifically setting the maximum number of retries.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.Messaging.WebPubSub/README.md#2025-04-20_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddAzureWebPubSubServiceClient(\"wps\", configureClientBuilder: clientBuilder => clientBuilder.ConfigureOptions(options => options.Retry.MaxRetries = 5));\n```\n\n----------------------------------------\n\nTITLE: Configuring Connection String in appsettings.json\nDESCRIPTION: Example of how to configure a connection string in the appsettings.json file for use with AddAzureNpgsqlDbContext.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.Npgsql.EntityFrameworkCore.PostgreSQL/README.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ConnectionStrings\": {\n    \"myConnection\": \"Host=myserver;Database=test\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Search in AppHost\nDESCRIPTION: Example of adding and configuring Azure Search service in the application host\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.Search.Documents/README.md#2025-04-20_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nvar search = builder.ExecutionContext.IsPublishMode\n    ? builder.AddAzureSearch(\"search\")\n    : builder.AddConnectionString(\"search\");\n\nvar myService = builder.AddProject<Projects.MyService>()\n                       .WithReference(search);\n```\n\n----------------------------------------\n\nTITLE: Configuring MongoDB Settings Inline\nDESCRIPTION: Example of how to configure MongoDB settings inline using a delegate when calling AddMongoDBClient.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.MongoDB.Driver/README.md#2025-04-20_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddMongoDBClient(\"mongodb\", settings => settings.ConnectionString = \"mongodb://server:port/test\");\n```\n\n----------------------------------------\n\nTITLE: Inline Configuration Settings\nDESCRIPTION: Examples of inline configuration using delegates for both AddCosmosDbContext and EnrichCosmosDbContext.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Microsoft.EntityFrameworkCore.Cosmos/README.md#2025-04-20_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddCosmosDbContext<MyDbContext>(\"cosmosdb\", \"mydb\", settings => settings.DisableTracing = true);\n```\n\n----------------------------------------\n\nTITLE: Configuring RabbitMQ Client Settings in JSON\nDESCRIPTION: Example of configuring RabbitMQ client settings in the appsettings.json file, specifically disabling health checks.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.RabbitMQ.Client/README.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Aspire\": {\n    \"RabbitMQ\": {\n      \"Client\": {\n        \"DisableHealthChecks\": true\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting DbContext in Controller\nDESCRIPTION: Example of dependency injection usage to retrieve the DbContext instance in a Web API controller.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Oracle.EntityFrameworkCore/README.md#2025-04-20_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nprivate readonly MyDbContext _context;\n\npublic ProductsController(MyDbContext context)\n{\n    _context = context;\n}\n```\n\n----------------------------------------\n\nTITLE: DbContext Injection Example\nDESCRIPTION: Example showing how to inject and use the DbContext in a controller constructor.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Microsoft.EntityFrameworkCore.Cosmos/README.md#2025-04-20_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nprivate readonly MyDbContext _context;\n\npublic ProductsController(MyDbContext context)\n{\n    _context = context;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving NpgsqlDataSource through Dependency Injection\nDESCRIPTION: Example of how to retrieve a NpgsqlDataSource instance in a Web API controller using dependency injection.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Npgsql/README.md#2025-04-20_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nprivate readonly NpgsqlDataSource _dataSource;\n\npublic ProductsController(NpgsqlDataSource dataSource)\n{\n    _dataSource = dataSource;\n}\n```\n\n----------------------------------------\n\nTITLE: Dependency Injection Usage Example\nDESCRIPTION: Example of injecting and using NpgsqlDataSource in a controller constructor.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.Npgsql/README.md#2025-04-20_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nprivate readonly NpgsqlDataSource _dataSource;\n\npublic ProductsController(NpgsqlDataSource dataSource)\n{\n    _dataSource = dataSource;\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Configuration for Azure Web PubSub Connection String\nDESCRIPTION: This JSON configuration example shows how to specify the Azure Web PubSub connection string in the ConnectionStrings section.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.Messaging.WebPubSub/README.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ConnectionStrings\": {\n    \"WebPubSubConnectionName\": \"Endpoint=https://xxx.webpubsub.azure.com;AccessKey==xxxxxxx\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Blob Storage Connection String with Account Credentials\nDESCRIPTION: JSON configuration example for setting up an Azure Blob Storage connection using account credentials in the appsettings.json file.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.Storage.Blobs/README.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ConnectionStrings\": {\n    \"blobsConnectionName\": \"AccountName=myaccount;AccountKey=myaccountkey\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting QueueServiceClient in Controller\nDESCRIPTION: Example of dependency injection usage to retrieve QueueServiceClient instance in a Web API controller.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.Storage.Queues/README.md#2025-04-20_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nprivate readonly QueueServiceClient _client;\n\npublic ProductsController(QueueServiceClient client)\n{\n    _client = client;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Redis Package with .NET CLI\nDESCRIPTION: Command to install the Aspire.Hosting.Azure.Redis NuGet package in an AppHost project.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Aspire.Hosting.Azure.Redis/README.md#2025-04-20_snippet_0\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet add package Aspire.Hosting.Azure.Redis\n```\n\n----------------------------------------\n\nTITLE: Inline Configuration Settings\nDESCRIPTION: Examples of inline configuration using delegates for MySQL settings\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Pomelo.EntityFrameworkCore.MySql/README.md#2025-04-20_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddMySqlDbContext<MyDbContext>(\"mysqldb\", settings => settings.DisableHealthChecks = true);\n```\n\n----------------------------------------\n\nTITLE: Qdrant Settings Configuration in JSON\nDESCRIPTION: JSON configuration example showing how to configure QdrantSettings using the Aspire:Qdrant:Client configuration path.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Qdrant.Client/README.md#2025-04-20_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Aspire\": {\n    \"Qdrant\": {\n      \"Client\": {\n        \"Key\": \"123456!@#$%\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Redis Client Registration\nDESCRIPTION: Demonstrates how to register a Redis client with a connection name in the dependency injection container.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.StackExchange.Redis/README.md#2025-04-20_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddRedisClient(\"cache\");\n```\n\n----------------------------------------\n\nTITLE: Registering and Referencing a PostgreSQL Database in AppHost\nDESCRIPTION: Example of how to add an Azure PostgreSQL Flexible Server with a database in the AppHost Program.cs file and reference it from a service.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Aspire.Hosting.Azure.PostgreSQL/README.md#2025-04-20_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar postgresdb = builder.AddAzurePostgresFlexibleServer(\"pg\")\n                        .AddDatabase(\"postgresdb\");\n\nvar myService = builder.AddProject<Projects.MyService>()\n                       .WithReference(postgresdb);\n```\n\n----------------------------------------\n\nTITLE: Injecting NATS Connection in a Controller\nDESCRIPTION: Example of retrieving and using a NATS connection instance in a Web API controller through dependency injection.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.NATS.Net/README.md#2025-04-20_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nprivate readonly INatsConnection _connection;\n\npublic ProductsController(INatsConnection connection)\n{\n    _connection = connection;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MongoDB Settings in JSON\nDESCRIPTION: Example of how to configure MongoDB settings using the Aspire:MongoDB:Driver configuration key in a JSON file.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.MongoDB.Driver/README.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Aspire\": {\n    \"MongoDB\": {\n      \"Driver\": {\n        \"ConnectionString\": \"mongodb://server:port/test\",\n        \"DisableHealthChecks\": false,\n        \"HealthCheckTimeout\": 10000,\n        \"DisableTracing\": false\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Aspire.Hosting.Azure.Sql Package with NuGet\nDESCRIPTION: Command to install the .NET Aspire Azure SQL Server Hosting library using the dotnet CLI.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Aspire.Hosting.Azure.Sql/README.md#2025-04-20_snippet_0\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet add package Aspire.Hosting.Azure.Sql\n```\n\n----------------------------------------\n\nTITLE: Injecting Search Client in Controller\nDESCRIPTION: Example of dependency injection usage for SearchIndexClient in a controller\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.Search.Documents/README.md#2025-04-20_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nprivate readonly SearchIndexClient _indexClient;\n\npublic SearchController(SearchIndexClient indexClient)\n{\n    _indexClient = indexClient;\n}\n```\n\n----------------------------------------\n\nTITLE: Inline Configuration Settings\nDESCRIPTION: Examples of configuring SQL Server settings using inline delegates\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Microsoft.EntityFrameworkCore.SqlServer/README.md#2025-04-20_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddSqlServerDbContext<MyDbContext>(\"sqldata\", settings => settings.DisableHealthChecks = true);\n```\n\n----------------------------------------\n\nTITLE: Configuring SecretClientOptions with Inline Delegates\nDESCRIPTION: Example of configuring SecretClientOptions using inline delegates to set application-specific diagnostic information.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.Security.KeyVault/README.md#2025-04-20_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddAzureKeyVaultClient(\"secrets\", configureClientBuilder: clientBuilder => clientBuilder.ConfigureOptions(options => options.Diagnostics.ApplicationId = \"myapp\"));\n```\n\n----------------------------------------\n\nTITLE: Configuring Milvus with appsettings.json\nDESCRIPTION: JSON configuration example showing how to configure MilvusSettings using the Aspire:Milvus:Client configuration section.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Milvus.Client/README.md#2025-04-20_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Aspire\": {\n    \"Milvus\": {\n      \"Client\": {\n        \"Key\": \"root:123456!@#$%\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering NpgsqlDataSource in DI Container\nDESCRIPTION: Example showing how to register a NpgsqlDataSource in the dependency injection container using the AddNpgsqlDataSource extension method.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Npgsql/README.md#2025-04-20_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddNpgsqlDataSource(\"postgresdb\");\n```\n\n----------------------------------------\n\nTITLE: Using a Named Connection String\nDESCRIPTION: Example of how to use a named connection string when calling AddNpgsqlDataSource.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Npgsql/README.md#2025-04-20_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddNpgsqlDataSource(\"myConnection\");\n```\n\n----------------------------------------\n\nTITLE: Connection String Configuration in JSON\nDESCRIPTION: Example of configuring PostgreSQL connection string in application configuration file.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Npgsql.EntityFrameworkCore.PostgreSQL/README.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ConnectionStrings\": {\n    \"myConnection\": \"Host=myserver;Database=test\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MySqlDataSource with Named Connection String\nDESCRIPTION: Example of adding a MySQL data source using a named connection string that will be retrieved from configuration.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.MySqlConnector/README.md#2025-04-20_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddMySqlDataSource(\"myConnection\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Persistent Seq Data Storage\nDESCRIPTION: Code to register Seq with a data directory in the AppHost project to retain data and configuration across application restarts. The specified directory must exist before running the application.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Seq/README.md#2025-04-20_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nvar seq = builder.AddSeq(\"seq\", seqDataDirectory: \"./seqdata\");\n```\n\n----------------------------------------\n\nTITLE: Configuring RabbitMQ Connection String in JSON\nDESCRIPTION: Example of configuring a RabbitMQ connection string in the appsettings.json file.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.RabbitMQ.Client/README.md#2025-04-20_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ConnectionStrings\": {\n    \"myConnection\": \"amqp://username:password@localhost:5672\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Aspire.Azure.Messaging.EventHubs Package\nDESCRIPTION: Command to install the Aspire.Azure.Messaging.EventHubs NuGet package using the .NET CLI.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.Messaging.EventHubs/README.md#2025-04-20_snippet_0\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet add package Aspire.Azure.Messaging.EventHubs\n```\n\n----------------------------------------\n\nTITLE: Redis Connection String Configuration\nDESCRIPTION: JSON configuration example showing how to define a Redis connection string in the ConnectionStrings section of configuration.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.StackExchange.Redis.DistributedCaching/README.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ConnectionStrings\": {\n    \"myRedisConnectionName\": \"localhost:6379\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Aspire.StackExchange.Redis Package\nDESCRIPTION: Command to install the Aspire.StackExchange.Redis NuGet package using the dotnet CLI.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.StackExchange.Redis/README.md#2025-04-20_snippet_0\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet add package Aspire.StackExchange.Redis\n```\n\n----------------------------------------\n\nTITLE: Registering QdrantClient in DI Container\nDESCRIPTION: Adds a QdrantClient to the dependency injection container using a named connection string.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Qdrant.Client/README.md#2025-04-20_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddQdrantClient(\"qdrant\");\n```\n\n----------------------------------------\n\nTITLE: Inline Configuration of Queue Client\nDESCRIPTION: Examples of inline configuration for Queue Client settings and options using delegate methods.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.Storage.Queues/README.md#2025-04-20_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddAzureQueueClient(\"queue\", settings => settings.DisableHealthChecks = true);\n\nbuilder.AddAzureQueueClient(\"queue\", configureClientBuilder: clientBuilder => clientBuilder.ConfigureOptions(options => options.Diagnostics.ApplicationId = \"myapp\"));\n```\n\n----------------------------------------\n\nTITLE: Configuring SqlClient Options in JSON\nDESCRIPTION: Shows how to configure SqlClient options using appsettings.json. This example demonstrates disabling health checks through configuration using the Aspire:Microsoft:Data:SqlClient key path.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Microsoft.Data.SqlClient/README.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Aspire\": {\n    \"Microsoft\": {\n      \"Data\": {\n        \"SqlClient\": {\n          \"DisableHealthChecks\": false\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting SqlConnection in a Controller Constructor\nDESCRIPTION: Demonstrates how to retrieve a SqlConnection instance using dependency injection in a Web API controller. The connection is injected through the constructor and stored in a private field.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Microsoft.Data.SqlClient/README.md#2025-04-20_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nprivate readonly SqlConnection _connection;\n\npublic ProductsController(SqlConnection connection)\n{\n    _connection = connection;\n}\n```\n\n----------------------------------------\n\nTITLE: Registering MySQL DbContext in DI Container\nDESCRIPTION: Basic setup to register a DbContext with MySQL connection using the AddMySqlDbContext extension method\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Pomelo.EntityFrameworkCore.MySql/README.md#2025-04-20_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddMySqlDbContext<MyDbContext>(\"mysqldb\");\n```\n\n----------------------------------------\n\nTITLE: Aspire Oracle Configuration Settings\nDESCRIPTION: JSON configuration example for Oracle EntityFrameworkCore settings in appsettings.json.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Oracle.EntityFrameworkCore/README.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Aspire\": {\n    \"Oracle\": {\n      \"EntityFrameworkCore\": {\n        \"DisableHealthChecks\": true,\n        \"DisableTracing\": true\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Aspire Cosmos Package\nDESCRIPTION: Command to install the .NET Aspire Microsoft EntityFrameworkCore Cosmos library using NuGet package manager.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Microsoft.EntityFrameworkCore.Cosmos/README.md#2025-04-20_snippet_0\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet add package Aspire.Microsoft.EntityFrameworkCore.Cosmos\n```\n\n----------------------------------------\n\nTITLE: Creating a .NET Aspire starter project\nDESCRIPTION: Command to create a new .NET Aspire project using the starter template which includes additional components.\nSOURCE: https://github.com/dotnet/aspire/blob/main/docs/using-latest-daily.md#2025-04-20_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ndotnet new aspire-starter\n```\n\n----------------------------------------\n\nTITLE: Configuring EventHubProducerClient with EventHubName\nDESCRIPTION: Example of configuring an EventHubProducerClient with a specific EventHubName when the connection string does not include the EntityPath property.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.Messaging.EventHubs/README.md#2025-04-20_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddAzureEventHubProducerClient(\"eventHubsConnectionName\",\n    settings =>\n    {\n        settings.EventHubName = \"MyHub\";\n    });\n```\n\n----------------------------------------\n\nTITLE: Configuring HttpClient for Dashboard Endpoint\nDESCRIPTION: Shows how to configure an HttpClient to target a specific named endpoint (dashboard) using DNS SRV resolution.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Microsoft.Extensions.ServiceDiscovery.Dns/README.md#2025-04-20_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddHttpClient<BasketServiceDashboardClient>(\n    static client => client.BaseAddress = new(\"http://_dashboard.basket\"));\n```\n\n----------------------------------------\n\nTITLE: Installing Aspire Keycloak Authentication Package\nDESCRIPTION: Command to install the Aspire.Keycloak.Authentication NuGet package using the .NET CLI.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Keycloak.Authentication/README.md#2025-04-20_snippet_0\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet add package Aspire.Keycloak.Authentication\n```\n\n----------------------------------------\n\nTITLE: Configuring RabbitMQ ConnectionFactory in C#\nDESCRIPTION: Shows how to configure the RabbitMQ ConnectionFactory using a delegate, setting the client provided name for connections.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.RabbitMQ.Client/README.md#2025-04-20_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddRabbitMQClient(\"messaging\", configureConnectionFactory: factory => factory.ClientProvidedName = \"MyApp\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Provisioning Settings in User Secrets\nDESCRIPTION: JSON configuration for Azure development-time provisioning. Requires subscription ID, resource group prefix, and Azure location to automatically provision Azure resources for local development.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Aspire.Hosting.Azure.AppConfiguration/README.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Azure\": {\n      \"SubscriptionId\": \"<your subscription id>\",\n      \"ResourceGroupPrefix\": \"<prefix for the resource group>\",\n      \"Location\": \"<azure location>\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Search Client for Document Count\nDESCRIPTION: Example showing how to use SearchClient for querying document count in an index\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.Search.Documents/README.md#2025-04-20_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nprivate readonly SearchIndexClient _indexClient;\n\npublic SearchController(SearchIndexClient indexClient)\n{\n    _indexClient = indexClient;\n}\n\npublic async Task<long> GetDocumentCountAsync(string indexName, CancellationToken cancellationToken)\n{\n    var searchClient = _indexClient.GetSearchClient(indexName);\n    var documentCountResponse = await searchClient.GetDocumentCountAsync(cancellationToken);\n    return documentCountResponse.Value;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Account Endpoint Connection String in JSON Configuration\nDESCRIPTION: JSON configuration example for setting up an Azure Cosmos DB connection using the Account Endpoint approach. This works with the MicrosoftAzureCosmosSettings.Credential property to establish a connection.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Microsoft.Azure.Cosmos/README.md#2025-04-20_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ConnectionStrings\": {\n    \"cosmosConnectionName\": \"https://{account_name}.documents.azure.com:443/\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Provisioning Settings in JSON\nDESCRIPTION: This JSON snippet shows the configuration settings required for Azure provisioning in local development. It includes the subscription ID, resource group prefix, and Azure location.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Aspire.Hosting.Azure/README.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Azure\": {\n      \"SubscriptionId\": \"<your subscription id>\",\n      \"ResourceGroupPrefix\": \"<prefix for the resource group>\",\n      \"Location\": \"<azure location>\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Consuming Redis Reference in Service Project\nDESCRIPTION: Shows how to consume a Redis reference in a service project after it has been configured with WithReference in the AppHost.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.StackExchange.Redis.DistributedCaching/README.md#2025-04-20_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddRedisDistributedCache(\"cache\");\n```\n\n----------------------------------------\n\nTITLE: Installing Aspire.Hosting.Azure.EventHubs Package with .NET CLI\nDESCRIPTION: Command to install the Aspire.Hosting.Azure.EventHubs NuGet package using the .NET CLI.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Aspire.Hosting.Azure.EventHubs/README.md#2025-04-20_snippet_0\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet add package Aspire.Hosting.Azure.EventHubs\n```\n\n----------------------------------------\n\nTITLE: Aspire MySQL Settings Configuration\nDESCRIPTION: Configuration options for MySQL in appsettings.json including health checks and tracing settings\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Pomelo.EntityFrameworkCore.MySql/README.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Aspire\": {\n    \"Pomelo\": {\n      \"EntityFrameworkCore\": {\n        \"MySql\": {\n          \"DisableHealthChecks\": true,\n          \"DisableTracing\": true\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Aspire.Qdrant.Client Package with NuGet\nDESCRIPTION: Command to install the Aspire.Qdrant.Client package using the dotnet CLI tool.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Qdrant.Client/README.md#2025-04-20_snippet_0\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet add package Aspire.Qdrant.Client\n```\n\n----------------------------------------\n\nTITLE: Configuring Elasticsearch Client with Inline Delegate\nDESCRIPTION: Example of how to configure the Elasticsearch client using an inline delegate to set the endpoint.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Elastic.Clients.Elasticsearch/README.md#2025-04-20_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddElasticsearchClient(\"elasticsearch\", settings => settings.Endpoint = new Uri(\"http://elastic:password@localhost:27011\"));\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Provisioning Settings in JSON\nDESCRIPTION: JSON configuration for Azure provisioning settings, including subscription ID, resource group prefix, and location. These settings should be stored in user secrets for local development.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Aspire.Hosting.Azure.KeyVault/README.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Azure\": {\n      \"SubscriptionId\": \"<your subscription id>\",\n      \"ResourceGroupPrefix\": \"<prefix for the resource group>\",\n      \"Location\": \"<azure location>\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Aspire Settings Configuration\nDESCRIPTION: JSON configuration for EntityFrameworkCore Cosmos settings in appsettings.json.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Microsoft.EntityFrameworkCore.Cosmos/README.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Aspire\": {\n    \"Microsoft\": {\n      \"EntityFrameworkCore\": {\n        \"Cosmos\": {\n          \"DisableTracing\": true\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Service Bus Connection Configuration using Connection String\nDESCRIPTION: JSON configuration example showing how to configure Service Bus using a connection string.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.Messaging.ServiceBus/README.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ConnectionStrings\": {\n    \"serviceBusConnectionName\": \"Endpoint=sb://mynamespace.servicebus.windows.net/;SharedAccessKeyName=accesskeyname;SharedAccessKey=accesskey\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HttpClient for Default Basket Service Endpoint\nDESCRIPTION: Demonstrates how to configure an HttpClient to use the default endpoint of a service using DNS resolution.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Microsoft.Extensions.ServiceDiscovery.Dns/README.md#2025-04-20_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddHttpClient<BasketServiceClient>(\n    static client => client.BaseAddress = new(\"http://basket\"));\n```\n\n----------------------------------------\n\nTITLE: Aspire Configuration Settings\nDESCRIPTION: JSON configuration for Aspire SQL Server specific settings\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Microsoft.EntityFrameworkCore.SqlServer/README.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Aspire\": {\n    \"Microsoft\": {\n      \"EntityFrameworkCore\": {\n        \"SqlServer\": {\n          \"DisableHealthChecks\": true,\n          \"DisableTracing\": true\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing the Aspire.Hosting.Redis Package with NuGet\nDESCRIPTION: Command to install the Aspire.Hosting.Redis library package for AppHost projects using the .NET CLI.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.StackExchange.Redis.OutputCaching/README.md#2025-04-20_snippet_9\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet add package Aspire.Hosting.Redis\n```\n\n----------------------------------------\n\nTITLE: Using Named Connection Strings with NATS Client\nDESCRIPTION: Demonstrates how to add a NATS client using a named connection string that will be retrieved from configuration.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.NATS.Net/README.md#2025-04-20_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddNatsClient(\"myConnection\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Full Connection String\nDESCRIPTION: JSON configuration example for using a full connection string, including endpoint, shared access key name, shared access key, and entity path.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.Messaging.EventHubs/README.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ConnectionStrings\": {\n    \"eventHubsConnectionName\": \"Endpoint=sb://mynamespace.servicebus.windows.net/;SharedAccessKeyName=accesskeyname;SharedAccessKey=accesskey;EntityPath=MyHub\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Aspire.Hosting.Seq Package with .NET CLI\nDESCRIPTION: This command installs the Aspire.Hosting.Seq NuGet package in the AppHost project. It adds the necessary dependencies for configuring Seq resources in a .NET Aspire application.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Aspire.Hosting.Seq/README.md#2025-04-20_snippet_0\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet add package Aspire.Hosting.Seq\n```\n\n----------------------------------------\n\nTITLE: Adding a Node.js Application to a .NET Aspire Distributed Application\nDESCRIPTION: Demonstrates how to add a Node.js application to a .NET Aspire distributed application using the AddNpmApp extension method.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Aspire.Hosting.NodeJs/README.md#2025-04-20_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar builder = DistributedApplication.CreateBuilder(args);\n\nvar frontend = builder.AddNpmApp(\"frontend\", \"../NodeFrontend\")\n\nbuilder.Build().Run();\n```\n\n----------------------------------------\n\nTITLE: Telemetry Configuration Reference\nDESCRIPTION: Structured documentation of telemetry settings for Azure Aspire services and integrations. Includes log categories, activity source names, and available metrics for each component.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Telemetry.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Log categories, activity source names and metric names\n\nAspire.Azure.AI.OpenAI:\n- Log categories:\n  - \"Azure.Core\"\n  - \"Azure.Identity\"\n- Activity source names:\n  - \"OpenAI.*\"\n- Metric names:\n  - \"OpenAI.*\"\n\nAspire.Azure.Data.Tables:\n- Log categories:\n  - \"Azure.Core\"\n  - \"Azure.Identity\"\n- Activity source names:\n  - \"Azure.Data.Tables.*\"\n- Metric names:\n  - none (currently not supported by the Azure SDK)\n\n[...additional content truncated for brevity...]\n```\n\n----------------------------------------\n\nTITLE: Registering NATS Server in AppHost\nDESCRIPTION: Example of registering a NATS server in the AppHost and configuring a service to reference it for connectivity.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.NATS.Net/README.md#2025-04-20_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nvar nats = builder.AddNats(\"nats\");\n\nvar myService = builder.AddProject<Projects.MyService>()\n                       .WithReference(nats);\n```\n\n----------------------------------------\n\nTITLE: Connection String Configuration\nDESCRIPTION: JSON configuration example showing connection string setup in appsettings.json.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Oracle.EntityFrameworkCore/README.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ConnectionStrings\": {\n    \"myConnection\": \"Data Source=TORCL;User Id=myUsername;Password=myPassword;\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring DNS SRV Service Endpoint Provider in .NET\nDESCRIPTION: Shows how to configure DNS SRV endpoint resolution in a .NET application using AddDnsSrvServiceEndpointProvider method.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Microsoft.Extensions.ServiceDiscovery.Dns/README.md#2025-04-20_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddServiceDiscoveryCore();\nbuilder.Services.AddDnsSrvServiceEndpointProvider();\n```\n\n----------------------------------------\n\nTITLE: Configuring EventProcessorClient Options in Code\nDESCRIPTION: Example of configuring EventProcessorClient options using the configureClientBuilder parameter of the AddAzureEventProcessorClient method.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.Messaging.EventHubs/README.md#2025-04-20_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddAzureEventProcessorClient(\"eventHubsConnectionName\",\n    configureClientBuilder: clientBuilder => clientBuilder.ConfigureOptions(\n        options => options.Identifier = \"PROCESSOR_ID\"));\n```\n\n----------------------------------------\n\nTITLE: Registering Redis Output Cache in the Dependency Injection Container\nDESCRIPTION: Code snippet showing how to register the Redis output cache provider in the dependency injection container using the AddRedisOutputCache extension method with a connection name parameter.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.StackExchange.Redis.OutputCaching/README.md#2025-04-20_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddRedisOutputCache(\"cache\");\n```\n\n----------------------------------------\n\nTITLE: Installing Aspire Hosting Package\nDESCRIPTION: Command to install the Aspire.Hosting.SqlServer NuGet package\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Microsoft.EntityFrameworkCore.SqlServer/README.md#2025-04-20_snippet_7\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet add package Aspire.Hosting.SqlServer\n```\n\n----------------------------------------\n\nTITLE: Using Full Connection String in JSON Configuration\nDESCRIPTION: JSON configuration example for setting up an Azure Cosmos DB connection using a full connection string. This includes both the AccountEndpoint and AccountKey parameters.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Microsoft.Azure.Cosmos/README.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ConnectionStrings\": {\n    \"cosmosConnectionName\": \"AccountEndpoint=https://{account_name}.documents.azure.com:443/;AccountKey={account_key};\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Table Client with Named Connection String\nDESCRIPTION: Shows how to register a TableServiceClient using a named connection string from configuration.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.Data.Tables/README.md#2025-04-20_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddAzureTableClient(\"tableConnectionName\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Telemetry Limits in JSON for .NET Aspire Dashboard\nDESCRIPTION: This JSON snippet demonstrates how to configure telemetry limits for the .NET Aspire Dashboard using a JSON configuration file. It sets maximum counts for logs, traces, and metrics.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Aspire.Dashboard/README.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Dashboard\": {\n    \"TelemetryLimits\": {\n      \"MaxLogCount\": 1000,\n      \"MaxTraceCount\": 1000,\n      \"MaxMetricsCount\": 1000\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Elasticsearch Connection String\nDESCRIPTION: JSON configuration example showing how to specify the Elasticsearch connection string in the appsettings.json file.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Elastic.Clients.Elasticsearch/README.md#2025-04-20_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ConnectionStrings\": {\n    \"elasticsearch\": \"http://elastic:password@localhost:27011\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering ElasticsearchClient in DI Container\nDESCRIPTION: Example of how to register an ElasticsearchClient in the dependency injection container using the AddElasticsearchClient extension method.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Elastic.Clients.Elasticsearch/README.md#2025-04-20_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddElasticsearchClient(\"elasticsearch\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Seq with Inline Delegates\nDESCRIPTION: Example showing how to configure Seq settings using inline delegates in code. This approach allows for programmatic configuration of options like health checks, server URL, and request timeout.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Seq/README.md#2025-04-20_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddSeqEndpoint(\"seq\", settings => {\n    settings.DisableHealthChecks = true;\n    settings.ServerUrl = \"http://localhost:5341\";\n    settings.Logs.TimeoutMilliseconds = 10000;\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Provisioning Settings in JSON\nDESCRIPTION: JSON configuration for Azure provisioning, including subscription ID, resource group prefix, and location. These settings should be stored in user secrets for local development.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Aspire.Hosting.Azure.CognitiveServices/README.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Azure\": {\n      \"SubscriptionId\": \"<your subscription id>\",\n      \"ResourceGroupPrefix\": \"<prefix for the resource group>\",\n      \"Location\": \"<azure location>\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Service Bus Advanced Configuration Options\nDESCRIPTION: JSON configuration example showing various Service Bus configuration options including health checks and client options.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.Messaging.ServiceBus/README.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Aspire\": {\n    \"Azure\": {\n      \"Messaging\": {\n        \"ServiceBus\": {\n          \"HealthCheckQueueName\": \"myQueue\",\n          \"DisableTracing\": false,\n          \"ClientOptions\": {\n            \"Identifier\": \"CLIENT_ID\"\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Elasticsearch with CloudId and ApiKey\nDESCRIPTION: JSON configuration example showing how to set CloudId and ApiKey for Elastic Cloud in the appsettings.json file.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Elastic.Clients.Elasticsearch/README.md#2025-04-20_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Aspire\": {\n    \"Elastic\": {\n      \"Clients\": {\n        \"Elasticsearch\": {\n            \"ApiKey\": \"Valid ApiKey\",\n            \"CloudId\": \"Valid CloudId\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring DNS Service Endpoint Provider in .NET\nDESCRIPTION: Demonstrates how to add DNS service endpoint resolution to a .NET application's service collection using AddDnsServiceEndpointProvider method.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Microsoft.Extensions.ServiceDiscovery.Dns/README.md#2025-04-20_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddServiceDiscoveryCore();\nbuilder.Services.AddDnsServiceEndpointProvider();\n```\n\n----------------------------------------\n\nTITLE: Publishing Aspire Application to Kubernetes\nDESCRIPTION: Command to publish an Aspire application to Kubernetes using the 'aspire publish' CLI command. This targets the previously registered 'k8s' publisher and outputs artifacts to the 'artifacts' directory.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Aspire.Hosting.Kubernetes/README.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\naspire publish -t k8s -o artifacts\n```\n\n----------------------------------------\n\nTITLE: AppHost MySQL Configuration\nDESCRIPTION: Configuration of MySQL container and service reference in AppHost project\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Pomelo.EntityFrameworkCore.MySql/README.md#2025-04-20_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nvar mysqldb = builder.AddMySql(\"mysql\").AddDatabase(\"mysqldb\");\n\nvar myService = builder.AddProject<Projects.MyService>()\n                       .WithReference(mysqldb);\n```\n\n----------------------------------------\n\nTITLE: Connection String Configuration in appsettings.json\nDESCRIPTION: JSON configuration example showing how to define a named MySQL connection string in the ConnectionStrings section.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.MySqlConnector/README.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ConnectionStrings\": {\n    \"myConnection\": \"Server=mysql;Database=test\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Aspire.Hosting.MongoDB Package via NuGet\nDESCRIPTION: Command to add the Aspire.Hosting.MongoDB package to an AppHost project using the .NET CLI.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Aspire.Hosting.MongoDB/README.md#2025-04-20_snippet_0\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet add package Aspire.Hosting.MongoDB\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Table Client Options with Client Builder\nDESCRIPTION: Example showing how to configure TableClientOptions using the client builder, setting the application ID for diagnostics.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.Data.Tables/README.md#2025-04-20_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddAzureTableClient(\"tables\", configureClientBuilder: clientBuilder => clientBuilder.ConfigureOptions(options => options.Diagnostics.ApplicationId = \"myapp\"));\n```\n\n----------------------------------------\n\nTITLE: Configuring Milvus connection string in JSON\nDESCRIPTION: JSON configuration example showing how to define a Milvus connection string in the ConnectionStrings section.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Milvus.Client/README.md#2025-04-20_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ConnectionStrings\": {\n    \"milvus\": \"Endpoint=http://localhost:19530/;Key=root:123456!@#$%\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Aspire.Azure.Npgsql.EntityFrameworkCore.PostgreSQL Package\nDESCRIPTION: Command to install the .NET Aspire Azure PostgreSQL EntityFrameworkCore Npgsql library using NuGet package manager.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.Npgsql.EntityFrameworkCore.PostgreSQL/README.md#2025-04-20_snippet_0\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet add package Aspire.Azure.Npgsql.EntityFrameworkCore.PostgreSQL\n```\n\n----------------------------------------\n\nTITLE: Adding Azure Functions Project Reference\nDESCRIPTION: Command to add a reference to your Azure Functions project from the AppHost project using the dotnet CLI. This is required to configure the Functions project as a resource in your Aspire application.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Aspire.Hosting.Azure.Functions/README.md#2025-04-20_snippet_1\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet add reference ..\\Company.FunctionApp\\Company.FunctionApp.csproj\n```\n\n----------------------------------------\n\nTITLE: Azure OpenAI Connection Configuration\nDESCRIPTION: JSON configuration example showing connection string format in appsettings.json\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.AI.OpenAI/README.md#2025-04-20_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ConnectionStrings\": {\n    \"openaiConnectionName\": \"https://{account_name}.openai.azure.com/\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Aspire.Hosting.Nats Package\nDESCRIPTION: Command to install the Aspire.Hosting.Nats NuGet package for AppHost projects using the dotnet CLI.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.NATS.Net/README.md#2025-04-20_snippet_7\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet add package Aspire.Hosting.Nats\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Cosmos DB Options in appsettings.json\nDESCRIPTION: JSON configuration example that shows how to configure Azure Cosmos DB options using appsettings.json. This example disables tracing for Cosmos DB operations.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Microsoft.Azure.Cosmos/README.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Aspire\": {\n    \"Microsoft\": {\n      \"Azure\": {\n        \"Cosmos\": {\n          \"DisableTracing\": false,\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Azure Storage Queues Configuration Settings\nDESCRIPTION: Extended configuration options for Azure Storage Queues including health checks and tracing settings.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.Storage.Queues/README.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Aspire\": {\n    \"Azure\": {\n      \"Storage\": {\n        \"Queues\": {\n          \"DisableHealthChecks\": true,\n          \"DisableTracing\": false,\n          \"ClientOptions\": {\n            \"Diagnostics\": {\n              \"ApplicationId\": \"myapp\"\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Connection String Configuration in JSON\nDESCRIPTION: JSON configuration example showing how to define a Qdrant connection string in the ConnectionStrings section.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Qdrant.Client/README.md#2025-04-20_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ConnectionStrings\": {\n    \"qdrant\": \"Endpoint=http://localhost:6334;Key=123456!@#$%\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Aspire Oracle EntityFrameworkCore Package\nDESCRIPTION: Command to install the Aspire Oracle EntityFrameworkCore NuGet package using the .NET CLI.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Oracle.EntityFrameworkCore/README.md#2025-04-20_snippet_0\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet add package Aspire.Oracle.EntityFrameworkCore\n```\n\n----------------------------------------\n\nTITLE: Installing Aspire SQL Server Package\nDESCRIPTION: Command to install the Aspire.Microsoft.EntityFrameworkCore.SqlServer NuGet package\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Microsoft.EntityFrameworkCore.SqlServer/README.md#2025-04-20_snippet_0\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet add package Aspire.Microsoft.EntityFrameworkCore.SqlServer\n```\n\n----------------------------------------\n\nTITLE: Consuming RabbitMQ Connection in Service Project\nDESCRIPTION: Shows how to consume the RabbitMQ connection in a service project that references the AppHost.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.RabbitMQ.Client/README.md#2025-04-20_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddRabbitMQClient(\"messaging\");\n```\n\n----------------------------------------\n\nTITLE: OpenAI Connection String Configuration\nDESCRIPTION: JSON configuration example showing how to specify OpenAI connection string in appsettings.json.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.OpenAI/README.md#2025-04-20_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ConnectionStrings\": {\n    \"openaiConnectionName\": \"Endpoint=https://{openai_rest_api_url};Key={account_key};\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Storage Hosting Package\nDESCRIPTION: Command to install the Aspire.Hosting.Azure.Storage NuGet package for AppHost projects.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.Storage.Queues/README.md#2025-04-20_snippet_7\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet add package Aspire.Hosting.Azure.Storage\n```\n\n----------------------------------------\n\nTITLE: Configuring Project References for External Testing in .NET Aspire\nDESCRIPTION: Configuration syntax for handling project references that can switch between direct project references and package references based on the testing environment. Uses AspireProjectOrPackageReference to dynamically adjust references based on TestsRunningOutsideOfRepo flag.\nSOURCE: https://github.com/dotnet/aspire/blob/main/tests/Shared/RepoTesting/README.md#2025-04-20_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n@(AspireProjectOrPackageReference)\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Service Bus with Custom Credentials in C#\nDESCRIPTION: Shows how to configure an Azure Service Bus component with custom credentials using a ChainedTokenCredential.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/README.md#2025-04-20_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddAzureServiceBus(settings =>\n{\n    settings.Credential =\n        new ChainedTokenCredential(\n            new VisualStudioCredential(),\n            new VisualStudioCodeCredential());\n});\n```\n\n----------------------------------------\n\nTITLE: Localizing Strings in Aspire.Dashboard\nDESCRIPTION: Example of how to inject and use a localized string in an Aspire.Dashboard component using IStringLocalizer.\nSOURCE: https://github.com/dotnet/aspire/blob/main/docs/contributing.md#2025-04-20_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n@inject IStringLocalizer<Resources.ResxFile> Loc\n...\n<p>@Loc[Resources.ResxFile.YourStringHere]</p>\n```\n\n----------------------------------------\n\nTITLE: Connection String Configuration\nDESCRIPTION: JSON configuration example for Cosmos DB connection string.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Microsoft.EntityFrameworkCore.Cosmos/README.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ConnectionStrings\": {\n    \"myConnection\": \"AccountEndpoint=https://{account_name}.documents.azure.com:443/;AccountKey={account_key};\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Aspire.Hosting.Azure.EventHubs Package\nDESCRIPTION: Command to install the Aspire.Hosting.Azure.EventHubs NuGet package using the .NET CLI for AppHost projects.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.Messaging.EventHubs/README.md#2025-04-20_snippet_8\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet add package Aspire.Hosting.Azure.EventHubs\n```\n\n----------------------------------------\n\nTITLE: JSON Configuration for Azure Web PubSub Service Endpoint\nDESCRIPTION: This JSON configuration example shows how to specify the Azure Web PubSub service endpoint in the ConnectionStrings section.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.Messaging.WebPubSub/README.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ConnectionStrings\": {\n    \"WebPubSubConnectionName\": \"https://xxx.webpubsub.azure.com\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Aspire.Hosting.Garnet Package\nDESCRIPTION: Command to install the Aspire.Hosting.Garnet NuGet package in an AppHost project. This package is required to use Garnet cache functionality in a .NET Aspire application.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Aspire.Hosting.Garnet/README.md#2025-04-20_snippet_0\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet add package Aspire.Hosting.Garnet\n```\n\n----------------------------------------\n\nTITLE: NATS Configuration with appsettings.json\nDESCRIPTION: JSON configuration example showing how to configure NATS client settings using the Aspire:Nats:Client configuration key structure.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.NATS.Net/README.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Aspire\": {\n    \"Nats\": {\n      \"Client\": {\n        \"DisableHealthChecks\": true\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Aspire.Hosting.Docker Package with NuGet\nDESCRIPTION: Command to add the Aspire.Hosting.Docker package to an AppHost project using the .NET CLI.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Aspire.Hosting.Docker/README.md#2025-04-20_snippet_0\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet add package Aspire.Hosting.Docker\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Service Bus Connection String in C#\nDESCRIPTION: Shows how to configure an Azure Service Bus connection string directly in C# using the component's settings object.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/README.md#2025-04-20_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddAzureServiceBus(settings =>\n{\n    settings.ConnectionString = \"xyz\";\n});\n```\n\n----------------------------------------\n\nTITLE: Building a .NET Aspire project\nDESCRIPTION: Commands to restore NuGet packages and build a .NET Aspire solution after creating it from a template.\nSOURCE: https://github.com/dotnet/aspire/blob/main/docs/using-latest-daily.md#2025-04-20_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ndotnet restore\ndotnet build\n```\n\n----------------------------------------\n\nTITLE: Connection String Configuration\nDESCRIPTION: JSON configuration example showing how to specify a PostgreSQL connection string in appsettings.json.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.Npgsql/README.md#2025-04-20_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ConnectionStrings\": {\n    \"myConnection\": \"Host=myserver;Database=test\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Aspire.Hosting.Azure.ServiceBus Package with dotnet CLI\nDESCRIPTION: Command to install the .NET Aspire Azure Service Bus Hosting library using the dotnet CLI tool and NuGet package manager.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Aspire.Hosting.Azure.ServiceBus/README.md#2025-04-20_snippet_0\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet add package Aspire.Hosting.Azure.ServiceBus\n```\n\n----------------------------------------\n\nTITLE: Adding Azure AI Search Service in AppHost\nDESCRIPTION: C# code snippet demonstrating how to add an Azure AI Search service to the AppHost and reference it in a project.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Aspire.Hosting.Azure.Search/README.md#2025-04-20_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar search = builder.AddAzureSearch(\"search\");\n\nvar myService = builder.AddProject<Projects.MyService>()\n                       .WithReference(search);\n```\n\n----------------------------------------\n\nTITLE: Azure Search Endpoint Configuration\nDESCRIPTION: JSON configuration for Azure Search endpoint connection string\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.Search.Documents/README.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ConnectionStrings\": {\n    \"searchConnectionName\": \"https://{search_service}.search.windows.net/\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Table Storage Options via appsettings.json\nDESCRIPTION: Example showing how to configure Table Storage options through application settings, including disabling health checks and configuring client diagnostics.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.Data.Tables/README.md#2025-04-20_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Aspire\": {\n    \"Azure\": {\n      \"Data\": {\n        \"Tables\": {\n          \"DisableHealthChecks\": true,\n          \"DisableTracing\": false,\n          \"ClientOptions\": {\n            \"Diagnostics\": {\n              \"ApplicationId\": \"myapp\"\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Connection String Configuration\nDESCRIPTION: JSON configuration example for Azure Storage Queues using traditional connection string format.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.Storage.Queues/README.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ConnectionStrings\": {\n    \"queueConnectionName\": \"AccountName=myaccount;AccountKey=myaccountkey\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Provisioning Settings in User Secrets\nDESCRIPTION: JSON configuration needed for automatic development-time provisioning of Azure resources, including subscription ID, resource group prefix, and location.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Aspire.Hosting.Azure.PostgreSQL/README.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Azure\": {\n      \"SubscriptionId\": \"<your subscription id>\",\n      \"ResourceGroupPrefix\": \"<prefix for the resource group>\",\n      \"Location\": \"<azure location>\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning OpenTelemetry Confluent Kafka Instrumentation Repository\nDESCRIPTION: Commands to clone the OpenTelemetry .NET Contrib repository and checkout the specific version of Confluent Kafka instrumentation.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Vendoring/README.md#2025-04-20_snippet_2\n\nLANGUAGE: console\nCODE:\n```\ngit clone https://github.com/open-telemetry/opentelemetry-dotnet-contrib.git\ngit fetch --tags\ngit checkout tags/Instrumentation.ConfluentKafka-0.1.0-alpha.2\n```\n\n----------------------------------------\n\nTITLE: NATS Connection String Configuration in JSON\nDESCRIPTION: JSON configuration example showing how to define a NATS connection string in the ConnectionStrings section.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.NATS.Net/README.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ConnectionStrings\": {\n    \"myConnection\": \"nats://nats:4222\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Aspire.Milvus.Client package with NuGet\nDESCRIPTION: Command to install the .NET Aspire Milvus Client library using the dotnet CLI.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Milvus.Client/README.md#2025-04-20_snippet_0\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet add package Aspire.Milvus.Client\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Provisioning Settings in JSON\nDESCRIPTION: JSON configuration example for setting up Azure provisioning for local development. These settings should be stored in user secrets and include subscription ID, resource group prefix, and Azure location.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Aspire.Hosting.Azure.ApplicationInsights/README.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Azure\": {\n      \"SubscriptionId\": \"<your subscription id>\",\n      \"ResourceGroupPrefix\": \"<prefix for the resource group>\",\n      \"Location\": \"<azure location>\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Azure PostgreSQL Hosting Package\nDESCRIPTION: Command to install the Aspire.Hosting.Azure.PostgreSQL NuGet package using the .NET CLI.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.Npgsql/README.md#2025-04-20_snippet_6\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet add package Aspire.Hosting.Azure.PostgreSQL\n```\n\n----------------------------------------\n\nTITLE: Connection String Configuration in JSON\nDESCRIPTION: JSON configuration example showing how to define a connection string in the ConnectionStrings section.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Npgsql/README.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ConnectionStrings\": {\n    \"myConnection\": \"Host=myserver;Database=test\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Aspire.Hosting.PostgreSQL Package with NuGet\nDESCRIPTION: This command installs the .NET Aspire PostgreSQL Hosting library to an AppHost project using the dotnet CLI.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Aspire.Hosting.PostgreSQL/README.md#2025-04-20_snippet_0\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet add package Aspire.Hosting.PostgreSQL\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Provisioning Settings in User Secrets\nDESCRIPTION: JSON configuration for setting up Azure provisioning in local development. It includes subscription ID, resource group prefix, and location settings.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Aspire.Hosting.Azure.OperationalInsights/README.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Azure\": {\n      \"SubscriptionId\": \"<your subscription id>\",\n      \"ResourceGroupPrefix\": \"<prefix for the resource group>\",\n      \"Location\": \"<azure location>\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Redis Connection String in JSON Configuration\nDESCRIPTION: JSON configuration example showing how to define a Redis connection string in the ConnectionStrings section of a configuration file.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.StackExchange.Redis.OutputCaching/README.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ConnectionStrings\": {\n    \"myRedisConnectionName\": \"localhost:6379\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Aspire.Hosting.Azure.OperationalInsights Package\nDESCRIPTION: Command to install the .NET Aspire Azure Operational Insights Hosting library using the dotnet CLI and NuGet package manager.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Aspire.Hosting.Azure.OperationalInsights/README.md#2025-04-20_snippet_0\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet add package Aspire.Hosting.Azure.OperationalInsights\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Client with Azure Authentication\nDESCRIPTION: C# code showing how to configure Redis client with Microsoft Entra ID authentication using DefaultAzureCredential.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Aspire.Hosting.Azure.Redis/README.md#2025-04-20_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar azureOptionsProvider = new AzureOptionsProvider();\nvar configurationOptions = ConfigurationOptions.Parse(builder.Configuration.GetConnectionString(\"cache\") ?? throw new InvalidOperationException(\"Could not find a 'cache' connection string.\"));\nif (configurationOptions.EndPoints.Any(azureOptionsProvider.IsMatch))\n{\n    await configurationOptions.ConfigureForAzureWithTokenCredentialAsync(new DefaultAzureCredential());\n}\n\nbuilder.AddRedisClient(\"cache\", configureOptions: options =>\n{\n    options.Defaults = configurationOptions.Defaults;\n});\n```\n\n----------------------------------------\n\nTITLE: JSON Configuration for Azure Web PubSub Settings\nDESCRIPTION: This JSON configuration example shows how to configure various Azure Web PubSub settings using the Aspire:Azure:Messaging:WebPubSub configuration key.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.Messaging.WebPubSub/README.md#2025-04-20_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Aspire\": {\n    \"Azure\": {\n      \"Messaging\": {\n        \"WebPubSub\": {\n          \"DisableHealthChecks\": true,\n          \"HubName\": \"your_hub_name\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Aspire.Hosting.AppHost Package with .NET CLI\nDESCRIPTION: Command to install the Aspire.Hosting.AppHost NuGet package using the dotnet CLI.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Aspire.Hosting.AppHost/README.md#2025-04-20_snippet_0\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet add package Aspire.Hosting.AppHost\n```\n\n----------------------------------------\n\nTITLE: Configuring Connection String in JSON Configuration\nDESCRIPTION: Example of a connection string configuration in appsettings.json. The connection string is defined in the ConnectionStrings section with a key matching the name used in AddSqlServerClient.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Microsoft.Data.SqlClient/README.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ConnectionStrings\": {\n    \"myConnection\": \"Data Source=myserver;Initial Catalog=master\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Development Settings in JSON\nDESCRIPTION: JSON configuration for Azure development environment settings including subscription ID, resource group prefix, and location.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Aspire.Hosting.Azure.Redis/README.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Azure\": {\n      \"SubscriptionId\": \"<your subscription id>\",\n      \"ResourceGroupPrefix\": \"<prefix for the resource group>\",\n      \"Location\": \"<azure location>\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Environment for Aspire Development on Unix Systems\nDESCRIPTION: Command to set up the environment for using the locally built Aspire SDK and workload outside the repository on Unix-based systems. This sources a script that configures the necessary environment variables.\nSOURCE: https://github.com/dotnet/aspire/blob/main/tests/Aspire.Templates.Tests/README.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsource /path-to-aspire-repo/dogfood.sh\n```\n\n----------------------------------------\n\nTITLE: Azure Table Storage Service URI Configuration in JSON\nDESCRIPTION: Example of configuring a connection string using the service URI approach, which works with DefaultAzureCredential.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.Data.Tables/README.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ConnectionStrings\": {\n    \"tableConnectionName\": \"https://{account_name}.table.core.windows.net/\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Azure SignalR Package with .NET CLI\nDESCRIPTION: Command to install the Aspire.Hosting.Azure.SignalR NuGet package using the .NET CLI.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Aspire.Hosting.Azure.SignalR/README.md#2025-04-20_snippet_0\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet add package Aspire.Hosting.Azure.SignalR\n```\n\n----------------------------------------\n\nTITLE: Structuring Error Response in JSON\nDESCRIPTION: Example JSON structure for error responses, including error code, message, and optional details.\nSOURCE: https://github.com/dotnet/aspire/blob/main/docs/specs/IDE-execution.md#2025-04-20_snippet_2\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n    \"error\": {\n        // An \"error detail\" object\n        \"code\": \"ProjectNotFound\",\n        \"message\": \"The project 'C:\\nonexistent\\path\\frontend.csproj' was not found\",\n        \"details\": []\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Aspire.Hosting.PostgreSQL Package\nDESCRIPTION: Command to install the Aspire.Hosting.PostgreSQL library for AppHost projects using the dotnet CLI.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Npgsql/README.md#2025-04-20_snippet_7\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet add package Aspire.Hosting.PostgreSQL\n```\n\n----------------------------------------\n\nTITLE: Connection String Configuration in JSON\nDESCRIPTION: Example JSON configuration for specifying the Azure Key Vault connection string in the ConnectionStrings section.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.Security.KeyVault/README.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ConnectionStrings\": {\n    \"secretConnectionName\": \"https://{account_name}.vault.azure.net/\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Aspire.Npgsql Package\nDESCRIPTION: Command to install the .NET Aspire PostgreSQL Npgsql library using the dotnet CLI.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Npgsql/README.md#2025-04-20_snippet_0\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet add package Aspire.Npgsql\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Provisioning Settings in JSON\nDESCRIPTION: JSON configuration example for setting up Azure development-time provisioning. Defines the required Azure subscription ID, resource group prefix, and location needed for automatic resource configuration.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Aspire.Hosting.Azure.ServiceBus/README.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Azure\": {\n      \"SubscriptionId\": \"<your subscription id>\",\n      \"ResourceGroupPrefix\": \"<prefix for the resource group>\",\n      \"Location\": \"<azure location>\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Connection String Configuration in JSON\nDESCRIPTION: Example of MySQL connection string configuration in appsettings.json\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Pomelo.EntityFrameworkCore.MySql/README.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ConnectionStrings\": {\n    \"myConnection\": \"Server=myserver;Database=test\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Aspire.Hosting.Azure.CosmosDB Package with NuGet\nDESCRIPTION: Command to add the Aspire.Hosting.Azure.CosmosDB package to an AppHost project using the .NET CLI.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Aspire.Hosting.Azure.CosmosDB/README.md#2025-04-20_snippet_0\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet add package Aspire.Hosting.Azure.CosmosDB\n```\n\n----------------------------------------\n\nTITLE: Redis Inline Configuration\nDESCRIPTION: Examples of configuring Redis settings using inline delegates.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.StackExchange.Redis/README.md#2025-04-20_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddRedisClient(\"cache\", settings => settings.DisableHealthChecks = true);\n\nbuilder.AddRedisClient(\"cache\", configureOptions: options => options.ConnectTimeout = 3000);\n```\n\n----------------------------------------\n\nTITLE: Consuming Azure Event Hubs in Service Project with C#\nDESCRIPTION: C# code snippet showing how to consume the Azure Event Hubs connection in a service project using the Aspire.Azure.Messaging.EventHubs client library.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Aspire.Hosting.Azure.EventHubs/README.md#2025-04-20_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddAzureEventProcessorClient(\"eh\");\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Search Package using .NET CLI\nDESCRIPTION: Command to install the Aspire.Azure.Search.Documents NuGet package\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.Search.Documents/README.md#2025-04-20_snippet_0\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet add package Aspire.Azure.Search.Documents\n```\n\n----------------------------------------\n\nTITLE: Configuring Aspire.Npgsql Options in JSON\nDESCRIPTION: JSON configuration example showing how to configure Aspire.Npgsql options using the Aspire:Npgsql configuration key.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Npgsql/README.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Aspire\": {\n    \"Npgsql\": {\n      \"DisableHealthChecks\": true,\n      \"DisableTracing\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Provisioning Settings in JSON\nDESCRIPTION: JSON configuration for Azure provisioning, including subscription ID, resource group prefix, and location. This should be set in user secrets for local development.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Aspire.Hosting.Azure.Sql/README.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Azure\": {\n      \"SubscriptionId\": \"<your subscription id>\",\n      \"ResourceGroupPrefix\": \"<prefix for the resource group>\",\n      \"Location\": \"<azure location>\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Username Configuration\nDESCRIPTION: Example of manually configuring the username for PostgreSQL connection when automatic detection fails.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.Npgsql/README.md#2025-04-20_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddAzureNpgsqlDataSource(\"db\", configureDataSourceBuilder:\n  dataSourceBuilder => dataSourceBuilder.ConnectionStringBuilder.Username = \"<PRINCIPALNAME>\");\n```\n\n----------------------------------------\n\nTITLE: Publishing Aspire Application with Docker Compose\nDESCRIPTION: Shell command to publish an Aspire application using the Docker Compose publisher. The command specifies the docker-compose target and outputs artifacts to the 'artifacts' directory.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Aspire.Hosting.Docker/README.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\naspire publish -t docker-compose -o artifacts\n```\n\n----------------------------------------\n\nTITLE: Azure CLI Login and Registry Authentication\nDESCRIPTION: Commands to authenticate with Azure and login to the container registry using access token.\nSOURCE: https://github.com/dotnet/aspire/blob/main/docs/updating-container-registry.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\naz login\naz acr login --name netaspireci --expose-token --output tsv --query accessToken | docker login netaspireci.azurecr.io -u 00000000-0000-0000-0000-000000000000 --password-stdin\n```\n\n----------------------------------------\n\nTITLE: Consuming SQL Connection in MyService\nDESCRIPTION: C# code snippet for consuming the SQL connection in the MyService project's Program.cs file using the Aspire.Microsoft.Data.SqlClient library.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Aspire.Hosting.Azure.Sql/README.md#2025-04-20_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddSqlServerClient(\"sqldata\");\n```\n\n----------------------------------------\n\nTITLE: Installing Aspire.Seq Package with NuGet\nDESCRIPTION: Command to install the Aspire.Seq library package using the dotnet CLI. This is the first step to enable Seq integration in your .NET Aspire application.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Seq/README.md#2025-04-20_snippet_0\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet add package Aspire.Seq\n```\n\n----------------------------------------\n\nTITLE: Creating Database Migration using Entity Framework Core CLI\nDESCRIPTION: Command to generate a new database migration using the dotnet ef tool. The migration is created in the DatabaseMigration.ApiModel project while executed from the DatabaseMigration.ApiService directory.\nSOURCE: https://github.com/dotnet/aspire/blob/main/playground/DatabaseMigration/README.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\ndotnet ef migrations add MyNewMigration --project ..\\DatabaseMigration.ApiModel\\DatabaseMigration.ApiModel.csproj\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Storage Queues Package using dotnet CLI\nDESCRIPTION: Command to install the Aspire.Azure.Storage.Queues NuGet package using the .NET CLI.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.Storage.Queues/README.md#2025-04-20_snippet_0\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet add package Aspire.Azure.Storage.Queues\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Development Settings\nDESCRIPTION: JSON configuration for Azure development settings including subscription ID, resource group prefix, and location. These settings enable automatic provisioning of Azure resources.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Aspire.Hosting.Azure.SignalR/README.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Azure\": {\n      \"SubscriptionId\": \"<your subscription id>\",\n      \"ResourceGroupPrefix\": \"<prefix for the resource group>\",\n      \"Location\": \"<azure location>\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AzureNpgsqlEntityFrameworkCorePostgreSQLSettings in appsettings.json\nDESCRIPTION: Example of how to configure AzureNpgsqlEntityFrameworkCorePostgreSQLSettings options in the appsettings.json file.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.Npgsql.EntityFrameworkCore.PostgreSQL/README.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Aspire\": {\n    \"Npgsql\": {\n      \"EntityFrameworkCore\": {\n        \"PostgreSQL\": {\n          \"DisableHealthChecks\": true,\n          \"DisableTracing\": true\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Table Client with Inline Delegate\nDESCRIPTION: Example showing how to configure TableServiceClient settings using an inline delegate, specifically to disable health checks.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.Data.Tables/README.md#2025-04-20_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddAzureTableClient(\"tables\", settings => settings.DisableHealthChecks = true);\n```\n\n----------------------------------------\n\nTITLE: Generating Local NuGet Packages for .NET Aspire\nDESCRIPTION: Commands to generate local NuGet packages for testing Aspire changes in separate projects.\nSOURCE: https://github.com/dotnet/aspire/blob/main/docs/contributing.md#2025-04-20_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n.\\build.cmd -pack\n```\n\nLANGUAGE: shell\nCODE:\n```\n.\\build.sh -pack\n```\n\n----------------------------------------\n\nTITLE: Installing Aspire.Hosting.Azure.CognitiveServices Package with NuGet\nDESCRIPTION: Command to add the Aspire.Hosting.Azure.CognitiveServices package to an AppHost project using the dotnet CLI.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Aspire.Hosting.Azure.CognitiveServices/README.md#2025-04-20_snippet_0\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet add package Aspire.Hosting.Azure.CognitiveServices\n```\n\n----------------------------------------\n\nTITLE: Configuration Instructions for Azure Web PubSub Setup\nDESCRIPTION: Instructions for configuring Azure Web PubSub by updating the subscription ID and location in the application settings file.\nSOURCE: https://github.com/dotnet/aspire/blob/main/playground/webpubsub/WebPubSub.AppHost/README.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Aspire AppHost sample for Azure Web PubSub\n\n## Usage\n\nUpdate [appsettings.json](./appsettings.json] to use your `SubscriptionId` and `Location` to provision the Azure Web PubSub resource.\n```\n\n----------------------------------------\n\nTITLE: Docker Image Pull, Tag and Push Commands\nDESCRIPTION: Commands to pull a Redis image from Docker Hub, tag it for the Azure container registry, and push it to the registry.\nSOURCE: https://github.com/dotnet/aspire/blob/main/docs/updating-container-registry.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull docker.io/library/redis:7.2 --platform linux/amd64\ndocker tag library/redis:7.2 netaspireci.azurecr.io/library/redis:7.2\ndocker push netaspireci.azurecr.io/library/redis:7.2\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Service Definition with DNS SRV Configuration\nDESCRIPTION: YAML configuration for creating a Kubernetes service with multiple named endpoints that will generate DNS SRV records.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Microsoft.Extensions.ServiceDiscovery.Dns/README.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Service\nmetadata:\n  name: basket\nspec:\n  selector:\n    name: basket-service\n  clusterIP: None\n  ports:\n  - name: default\n    port: 8080\n  - name: dashboard\n    port: 8888\n```\n\n----------------------------------------\n\nTITLE: Configuring Outside-of-Repo Mode in XML\nDESCRIPTION: This XML snippet shows how to configure the project for outside-of-repo testing mode by setting a specific MSBuild property in the project file.\nSOURCE: https://github.com/dotnet/aspire/blob/main/tests/Aspire.EndToEnd.Tests/README.md#2025-04-20_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<_BuildForTestsRunningOutsideOfRepo>true</_BuildForTestsRunningOutsideOfRepo>\n```\n\n----------------------------------------\n\nTITLE: Installing Aspire Azure OpenAI Package\nDESCRIPTION: Command to install the Aspire.Azure.AI.OpenAI NuGet package using the .NET CLI\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.AI.OpenAI/README.md#2025-04-20_snippet_0\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet add package Aspire.Azure.AI.OpenAI\n```\n\n----------------------------------------\n\nTITLE: Installing Aspire.Microsoft.Azure.Cosmos Package with NuGet\nDESCRIPTION: Command to install the .NET Aspire Microsoft Azure Cosmos DB library using the .NET CLI. This adds the necessary package for Azure Cosmos DB integration to your project.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Microsoft.Azure.Cosmos/README.md#2025-04-20_snippet_0\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet add package Aspire.Microsoft.Azure.Cosmos\n```\n\n----------------------------------------\n\nTITLE: Building .NET Aspire Repository\nDESCRIPTION: Commands to build the .NET Aspire repository on Windows, macOS, and Linux platforms.\nSOURCE: https://github.com/dotnet/aspire/blob/main/docs/contributing.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n.\\build.cmd\n```\n\nLANGUAGE: shell\nCODE:\n```\n.\\build.sh\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Search Hosting Package\nDESCRIPTION: Command to install the Aspire.Hosting.Azure.Search NuGet package\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.Search.Documents/README.md#2025-04-20_snippet_8\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet add package Aspire.Hosting.Azure.Search\n```\n\n----------------------------------------\n\nTITLE: Displaying Target Framework Support for Aspire Versions\nDESCRIPTION: A markdown table showing the target framework support for different versions of .NET Aspire. It illustrates the LTS and optional STS version support across Aspire versions.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/README.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| .NET Aspire Version | Targets                         |\n|---------------------|---------------------------------|\n| 8.x                 | `net8.0`                        |\n| 9.x                 | `net8.0` (+`net9.0` optional)   |\n| 10.x                | `net10.0`                       |\n| 11.x                | `net10.0` (+`net11.0` optional) |\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Provisioning Settings in JSON\nDESCRIPTION: JSON configuration for Azure provisioning, including subscription ID, resource group prefix, and location. This should be set in user secrets for local development.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Aspire.Hosting.Azure.CosmosDB/README.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Azure\": {\n      \"SubscriptionId\": \"<your subscription id>\",\n      \"ResourceGroupPrefix\": \"<prefix for the resource group>\",\n      \"Location\": \"<azure location>\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Manual DbContext Configuration\nDESCRIPTION: Example of manual DbContext configuration using EnrichOracleDatabaseDbContext for custom options.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Oracle.EntityFrameworkCore/README.md#2025-04-20_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar connectionString = builder.Configuration.GetConnectionString(\"catalogdb\");\nbuilder.Services.AddDbContextPool<CatalogDbContext>(dbContextOptionsBuilder => dbContextOptionsBuilder.UseOracle(connectionString));\nbuilder.EnrichOracleDatabaseDbContext<CatalogDbContext>();\n```\n\n----------------------------------------\n\nTITLE: Installing Aspire Hosting Oracle Package\nDESCRIPTION: Command to install the Aspire.Hosting.Oracle NuGet package for AppHost projects.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Oracle.EntityFrameworkCore/README.md#2025-04-20_snippet_7\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet add package Aspire.Hosting.Oracle\n```\n\n----------------------------------------\n\nTITLE: Installing Aspire.NATS.Net Package with dotnet CLI\nDESCRIPTION: Command to install the Aspire.NATS.Net NuGet package using the dotnet CLI.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.NATS.Net/README.md#2025-04-20_snippet_0\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet add package Aspire.NATS.Net\n```\n\n----------------------------------------\n\nTITLE: Formatting Example for API Review Descriptions in .NET Aspire\nDESCRIPTION: Shows the contrast between good and bad descriptions for API review. A good description provides context about the widget factory API and explains the rationale for adding a string overload, while a bad example lacks detail and context.\nSOURCE: https://github.com/dotnet/aspire/blob/main/docs/api-review-process.md#2025-04-20_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nGood: This is the API for the widget factory, users use it in startup code to\nconfigure how their widgets work. We have an overload that accepts URI, but\nnot one that accepts string, so we're adding it for convenience.\n\nBad: Adding a string overload for Widget.ConfigureFactory.\n```\n\n----------------------------------------\n\nTITLE: Updating SQL Activity Source Helper in C#\nDESCRIPTION: Code snippet to update the ActivitySourceName and Version in the SqlActivitySourceHelper class for SQL Client instrumentation.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Vendoring/README.md#2025-04-20_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic const string ActivitySourceName = \"OpenTelemetry.Instrumentation.SqlClient\";\npublic static readonly Version Version = new Version(1, 7, 0, 1173);\n```\n\n----------------------------------------\n\nTITLE: Injecting OpenAIClient in Controller\nDESCRIPTION: Example of dependency injection usage in a controller constructor to access OpenAIClient.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.OpenAI/README.md#2025-04-20_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nprivate readonly OpenAIClient _client;\n\npublic ChatController(OpenAIClient client)\n{\n    _client = client;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing MySQL AppHost Package\nDESCRIPTION: Command to install the Aspire.Hosting.MySql package for AppHost projects\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Pomelo.EntityFrameworkCore.MySql/README.md#2025-04-20_snippet_7\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet add package Aspire.Hosting.MySql\n```\n\n----------------------------------------\n\nTITLE: Installing Aspire.MongoDB.Driver Package with NuGet\nDESCRIPTION: Command to install the Aspire.MongoDB.Driver library using the .NET CLI.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.MongoDB.Driver/README.md#2025-04-20_snippet_0\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet add package Aspire.MongoDB.Driver\n```\n\n----------------------------------------\n\nTITLE: Adding Aspire Integrations to Projects with CLI\nDESCRIPTION: Adds an Aspire integration to a project. If no package is specified, it lists available integrations in a selection prompt. Integrations can be referenced by friendly names. The command passes through to 'dotnet package search' for listing packages and 'dotnet package add' for adding them.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Aspire.Cli/README.md#2025-04-20_snippet_2\n\nLANGUAGE: cli\nCODE:\n```\naspire add [<PACKAGE_NAME>] [--project <PATH_TO_CSPROJ>]\n                        [-v|--version <VERSION>]\n                        [--prerelease]\n                        [-s|--source <NUGET_URL>]\n```\n\n----------------------------------------\n\nTITLE: Filtering Playground App Tests using Environment Variables\nDESCRIPTION: Shows how to use the TEST_PLAYGROUND_APPHOST_FILTER environment variable to run tests for specific playground applications. For example, setting the filter to 'testshop' will only run tests for the testshop application.\nSOURCE: https://github.com/dotnet/aspire/blob/main/tests/Aspire.Playground.Tests/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nTEST_PLAYGROUND_APPHOST_FILTER=testshop\n```\n\n----------------------------------------\n\nTITLE: Installing Aspire.Hosting.Milvus package with NuGet\nDESCRIPTION: Command to install the Aspire.Hosting.Milvus library using the dotnet CLI for AppHost projects.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Milvus.Client/README.md#2025-04-20_snippet_5\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet add package Aspire.Hosting.Milvus\n```\n\n----------------------------------------\n\nTITLE: Installing Aspire.Hosting.Nats Package with .NET CLI\nDESCRIPTION: Command to install the Aspire.Hosting.Nats NuGet package in the AppHost project using the .NET CLI. This package is required to use NATS functionality in a .NET Aspire application.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Aspire.Hosting.Nats/README.md#2025-04-20_snippet_0\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet add package Aspire.Hosting.Nats\n```\n\n----------------------------------------\n\nTITLE: Running a .NET Aspire project\nDESCRIPTION: Command to run a .NET Aspire project via the AppHost project, with Docker desktop required to be running.\nSOURCE: https://github.com/dotnet/aspire/blob/main/docs/using-latest-daily.md#2025-04-20_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ndotnet run --project \"<directoryname>.AppHost\"\n```\n\n----------------------------------------\n\nTITLE: Consuming Azure Key Vault Connection in a Service Project\nDESCRIPTION: Code example showing how to consume an Azure Key Vault connection that was passed from the AppHost project.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.Security.KeyVault/README.md#2025-04-20_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddAzureKeyVaultClient(\"secrets\");\n```\n\n----------------------------------------\n\nTITLE: Installing Aspire.Hosting.RabbitMQ Package with .NET CLI\nDESCRIPTION: Command to install the Aspire.Hosting.RabbitMQ NuGet package using the .NET CLI for AppHost projects.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.RabbitMQ.Client/README.md#2025-04-20_snippet_7\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet add package Aspire.Hosting.RabbitMQ\n```\n\n----------------------------------------\n\nTITLE: Installing Aspire.Hosting.NodeJs Package with NuGet\nDESCRIPTION: Shows how to install the Aspire.Hosting.NodeJs NuGet package in an AppHost project using the .NET CLI.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Aspire.Hosting.NodeJs/README.md#2025-04-20_snippet_0\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet add package Aspire.Hosting.NodeJs\n```\n\n----------------------------------------\n\nTITLE: Creating New Aspire Applications with CLI\nDESCRIPTION: Creates a new Aspire application based on templates. It pulls the latest Aspire templates and creates a new 'aspire-starter' app by default. The command is a passthrough to 'dotnet new install --force' for templates and 'dotnet new' for creating the app.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Aspire.Cli/README.md#2025-04-20_snippet_1\n\nLANGUAGE: cli\nCODE:\n```\naspire new [<TEMPLATE>] [-n|--name <PROJECT_NAME>]\n                        [-o|--output <OUTPUT_PATH>]\n                        [-v|--version <VERSION>]\n                        [-s|--source <NUGET_URL>]\n                        [--prerelease]\n```\n\n----------------------------------------\n\nTITLE: Running Qdrant Docker Container for Testing\nDESCRIPTION: Docker command to start a local Qdrant instance on ports 6333 and 6334 for running integration tests. Uses Qdrant version 1.8.0.\nSOURCE: https://github.com/dotnet/aspire/blob/main/tests/Aspire.Qdrant.Client.Tests/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -p 6333:6333 -p 6334:6334 qdrant/qdrant:v1.8.0\n```\n\n----------------------------------------\n\nTITLE: Installing Aspire.Hosting.Kubernetes Package with dotnet CLI\nDESCRIPTION: Command to add the Aspire.Hosting.Kubernetes NuGet package to an AppHost project. This is the first step to enable Kubernetes publishing in a .NET Aspire application.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Aspire.Hosting.Kubernetes/README.md#2025-04-20_snippet_0\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet add package Aspire.Hosting.Kubernetes\n```\n\n----------------------------------------\n\nTITLE: Creating local nuget.config file with dotnet CLI\nDESCRIPTION: Command to create a local nuget.config file in the repository root to avoid adding daily build feeds globally that might affect other projects.\nSOURCE: https://github.com/dotnet/aspire/blob/main/docs/using-latest-daily.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet new nugetconfig\n```\n\n----------------------------------------\n\nTITLE: Installing Aspire.Hosting.Elasticsearch Package\nDESCRIPTION: Command to install the Aspire.Hosting.Elasticsearch package for AppHost projects using the .NET CLI.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Elastic.Clients.Elasticsearch/README.md#2025-04-20_snippet_5\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet add package Aspire.Hosting.Elasticsearch\n```\n\n----------------------------------------\n\nTITLE: Installing Aspire.Elastic.Clients.Elasticsearch Package\nDESCRIPTION: Command to install the Aspire.Elastic.Clients.Elasticsearch package using the .NET CLI.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Elastic.Clients.Elasticsearch/README.md#2025-04-20_snippet_0\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet add package Aspire.Elastic.Clients.Elasticsearch\n```\n\n----------------------------------------\n\nTITLE: Installing Aspire.Azure.Data.Tables Package via NuGet\nDESCRIPTION: Shows how to install the Aspire.Azure.Data.Tables package using the dotnet CLI tool.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.Data.Tables/README.md#2025-04-20_snippet_0\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet add package Aspire.Azure.Data.Tables\n```\n\n----------------------------------------\n\nTITLE: Setting Outside-of-Repo Mode in XML (Directory.props)\nDESCRIPTION: This XML snippet demonstrates how to set the TestsRunningOutsideOfRepo property to true in the Directory.props file for command-line usage.\nSOURCE: https://github.com/dotnet/aspire/blob/main/tests/Aspire.EndToEnd.Tests/README.md#2025-04-20_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<TestsRunningOutsideOfRepo>true</TestsRunningOutsideOfRepo>\n```\n\n----------------------------------------\n\nTITLE: Installing Aspire.Hosting.Seq Package with NuGet\nDESCRIPTION: Command to install the Aspire.Hosting.Seq library package for AppHost projects using the dotnet CLI. This enables Seq server registration in the AppHost.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Seq/README.md#2025-04-20_snippet_4\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet add package Aspire.Hosting.Seq\n```\n\n----------------------------------------\n\nTITLE: Installing Aspire.Microsoft.Data.SqlClient Package with NuGet\nDESCRIPTION: Uses the dotnet CLI to add the Aspire.Microsoft.Data.SqlClient package to your project. This package is required to use SQL Server connection integration with Aspire.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Microsoft.Data.SqlClient/README.md#2025-04-20_snippet_0\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet add package Aspire.Microsoft.Data.SqlClient\n```\n\n----------------------------------------\n\nTITLE: Installing Aspire.Hosting.Kafka Package with .NET CLI\nDESCRIPTION: Command to install the Aspire.Hosting.Kafka NuGet package in an AppHost project using the .NET CLI.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Aspire.Hosting.Kafka/README.md#2025-04-20_snippet_0\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet add package Aspire.Hosting.Kafka\n```\n\n----------------------------------------\n\nTITLE: Terminating .NET Aspire TestShop Processes in PowerShell\nDESCRIPTION: This PowerShell command identifies, displays, and then terminates all running .NET Aspire TestShop processes. It uses the same process name matching as the previous command but adds a kill operation for each identified process.\nSOURCE: https://github.com/dotnet/aspire/blob/main/docs/tips-and-known-issues.md#2025-04-20_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nps | where ProcessName -cmatch '(Api)|(Catalog)|(Basket)|(AppHost)|(MyFrontend)|(OrderProcessor)' | % {Write-Output $_.Id; kill $_.Id }\n```\n\n----------------------------------------\n\nTITLE: Installing Aspire.Hosting.Azure.Storage Package with .NET CLI\nDESCRIPTION: Command to install the Aspire.Hosting.Azure.Storage NuGet package using the .NET CLI for AppHost projects.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.Storage.Blobs/README.md#2025-04-20_snippet_8\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet add package Aspire.Hosting.Azure.Storage\n```\n\n----------------------------------------\n\nTITLE: Installing Aspire Hosting Package\nDESCRIPTION: Command to install the Aspire Azure CosmosDB Hosting library.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Microsoft.EntityFrameworkCore.Cosmos/README.md#2025-04-20_snippet_7\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet add package Aspire.Hosting.Azure.CosmosDB\n```\n\n----------------------------------------\n\nTITLE: Building Aspire NuGet Packages with Build Command\nDESCRIPTION: Command to build all the NuGet packages required for testing the Aspire workload. This is a prerequisite step before installing the SDK and workload for testing.\nSOURCE: https://github.com/dotnet/aspire/blob/main/tests/Aspire.Templates.Tests/README.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n.\\build.cmd -pack\n```\n\n----------------------------------------\n\nTITLE: Installing Aspire.Azure.Storage.Blobs Package with .NET CLI\nDESCRIPTION: Command to install the Aspire.Azure.Storage.Blobs NuGet package using the .NET CLI.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.Storage.Blobs/README.md#2025-04-20_snippet_0\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet add package Aspire.Azure.Storage.Blobs\n```\n\n----------------------------------------\n\nTITLE: Installing Aspire.Hosting.Oracle Package with .NET CLI\nDESCRIPTION: This command installs the Aspire.Hosting.Oracle NuGet package in the AppHost project. It adds Oracle database configuration capabilities to the .NET Aspire application.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Aspire.Hosting.Oracle/README.md#2025-04-20_snippet_0\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet add package Aspire.Hosting.Oracle\n```\n\n----------------------------------------\n\nTITLE: Installing Aspire.Hosting.SqlServer Package\nDESCRIPTION: Uses the dotnet CLI to add the Aspire.Hosting.SqlServer package to your AppHost project. This package is required to register SQL Server resources in the Aspire application model.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Microsoft.Data.SqlClient/README.md#2025-04-20_snippet_7\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet add package Aspire.Hosting.SqlServer\n```\n\n----------------------------------------\n\nTITLE: Property Reference for Helix Test Configuration\nDESCRIPTION: Property reference syntax for including build properties from the repository when running tests in Helix environment.\nSOURCE: https://github.com/dotnet/aspire/blob/main/tests/Shared/RepoTesting/README.md#2025-04-20_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n@(PropertyForHelixRun)\n```\n\n----------------------------------------\n\nTITLE: Installing Aspire.Hosting.Azure.KeyVault Package\nDESCRIPTION: Command to install the Aspire Azure KeyVault Hosting library for AppHost projects using the dotnet CLI.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.Security.KeyVault/README.md#2025-04-20_snippet_9\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet add package Aspire.Hosting.Azure.KeyVault\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Key Vault Extension Package for .NET Aspire\nDESCRIPTION: Command to install the Aspire.Hosting.Azure.KeyVault NuGet package using the .NET CLI.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Aspire.Hosting.Azure.KeyVault/README.md#2025-04-20_snippet_0\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet add package Aspire.Hosting.Azure.KeyVault\n```\n\n----------------------------------------\n\nTITLE: Installing Aspire.Hosting.Azure.AppConfiguration Package with NuGet\nDESCRIPTION: Command to install the .NET Aspire Azure App Configuration Hosting library using the dotnet CLI package manager.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Aspire.Hosting.Azure.AppConfiguration/README.md#2025-04-20_snippet_0\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet add package Aspire.Hosting.Azure.AppConfiguration\n```\n\n----------------------------------------\n\nTITLE: Installing Aspire.Hosting.Azure.Functions Package with NuGet\nDESCRIPTION: Command to add the Aspire.Hosting.Azure.Functions package to your AppHost project using the dotnet CLI. The --prerelease flag is included as the package is in preview.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Aspire.Hosting.Azure.Functions/README.md#2025-04-20_snippet_0\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet add package Aspire.Hosting.Azure.Functions --prerelease\n```\n\n----------------------------------------\n\nTITLE: Configuring MongoDB Connection String in JSON\nDESCRIPTION: Example of how to specify a MongoDB connection string in the ConnectionStrings configuration section of a JSON file.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.MongoDB.Driver/README.md#2025-04-20_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ConnectionStrings\": {\n    \"myConnection\": \"mongodb://server:port/test\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Aspire.Hosting.Qdrant Package\nDESCRIPTION: Command to install the Aspire.Hosting.Qdrant package for AppHost integration using the dotnet CLI tool.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Qdrant.Client/README.md#2025-04-20_snippet_5\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet add package Aspire.Hosting.Qdrant\n```\n\n----------------------------------------\n\nTITLE: Defining Analyzer Rules Table in Markdown\nDESCRIPTION: A markdown table defining new analyzer rules for release 9.0, including rule ID, category, severity, and documentation links.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Aspire.Hosting.Analyzers/AnalyzerReleases.Shipped.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Release 9.0\n\n### New Rules\n\nRule ID | Category | Severity | Notes\n--------|----------|----------|-------\nASPIRE006 | Design | Error | Diagnostics, [Documentation](https://aka.ms/dotnet/aspire/ASPIRE006)\n```\n\n----------------------------------------\n\nTITLE: Installing Aspire.Hosting.Redis for AppHost Projects\nDESCRIPTION: Command to install the Aspire.Hosting.Redis library in an AppHost project using the dotnet CLI.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.StackExchange.Redis.DistributedCaching/README.md#2025-04-20_snippet_8\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet add package Aspire.Hosting.Redis\n```\n\n----------------------------------------\n\nTITLE: Installing Aspire Azure Application Insights Package using dotnet CLI\nDESCRIPTION: Command to add the Aspire.Hosting.Azure.ApplicationInsights package to your AppHost project using the dotnet CLI tool.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Aspire.Hosting.Azure.ApplicationInsights/README.md#2025-04-20_snippet_0\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet add package Aspire.Hosting.Azure.ApplicationInsights\n```\n\n----------------------------------------\n\nTITLE: Installing Aspire.Hosting.Azure.Search Package\nDESCRIPTION: Command to install the .NET Aspire Azure AI Search Hosting library using NuGet package manager.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Aspire.Hosting.Azure.Search/README.md#2025-04-20_snippet_0\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet add package Aspire.Hosting.Azure.Search\n```\n\n----------------------------------------\n\nTITLE: Installing Aspire PostgreSQL Package via .NET CLI\nDESCRIPTION: Commands to install the Aspire PostgreSQL EntityFrameworkCore Npgsql package using the .NET CLI and NuGet package manager.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Npgsql.EntityFrameworkCore.PostgreSQL/README.md#2025-04-20_snippet_0\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet add package Aspire.Npgsql.EntityFrameworkCore.PostgreSQL\n```\n\n----------------------------------------\n\nTITLE: Copying Configuration File for NuGet Sources\nDESCRIPTION: Command to copy a predefined NuGet configuration file that points to locally built packages. This is used in conjunction with the environment setup for testing outside the repository.\nSOURCE: https://github.com/dotnet/aspire/blob/main/tests/Aspire.Templates.Tests/README.md#2025-04-20_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nCopy tests/Shared/TemplateTesting/data/nuget8.config nuget.config\n```\n\n----------------------------------------\n\nTITLE: Installing Aspire.Hosting.Azure.PostgreSQL Package with NuGet\nDESCRIPTION: Command to install the .NET Aspire Azure PostgreSQL Hosting library using the dotnet CLI.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Aspire.Hosting.Azure.PostgreSQL/README.md#2025-04-20_snippet_0\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet add package Aspire.Hosting.Azure.PostgreSQL\n```\n\n----------------------------------------\n\nTITLE: Installing Aspire.Hosting.Azure.Storage Package with NuGet\nDESCRIPTION: Command to install the .NET Aspire Azure Storage Hosting library using the dotnet CLI.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Aspire.Hosting.Azure.Storage/README.md#2025-04-20_snippet_0\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet add package Aspire.Hosting.Azure.Storage\n```\n\n----------------------------------------\n\nTITLE: Installing Aspire Hosting Package\nDESCRIPTION: Command to install the Aspire.Hosting.Azure.CognitiveServices NuGet package\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.AI.OpenAI/README.md#2025-04-20_snippet_6\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet add package Aspire.Hosting.Azure.CognitiveServices\n```\n\n----------------------------------------\n\nTITLE: Installing Aspire SDK and Workload for Testing\nDESCRIPTION: Command to install the SDK and aspire workload using locally built NuGet packages. This creates a test installation in the artifacts directory that can be used by the tests.\nSOURCE: https://github.com/dotnet/aspire/blob/main/tests/Aspire.Templates.Tests/README.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet build tests/workloads.proj /p:Configuration=<config>\n```\n\n----------------------------------------\n\nTITLE: Configuring Settings Inline with AddAzureNpgsqlDbContext\nDESCRIPTION: Example of how to configure AzureNpgsqlEntityFrameworkCorePostgreSQLSettings options inline when calling AddAzureNpgsqlDbContext.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.Npgsql.EntityFrameworkCore.PostgreSQL/README.md#2025-04-20_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddAzureNpgsqlDbContext<MyDbContext>(\"postgresdb\", settings => settings.DisableHealthChecks = true);\n```\n\n----------------------------------------\n\nTITLE: Installing Aspire.StackExchange.Redis.DistributedCaching via NuGet\nDESCRIPTION: Command to install the .NET Aspire StackExchange Redis Distributed Cache library using the dotnet CLI.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.StackExchange.Redis.DistributedCaching/README.md#2025-04-20_snippet_0\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet add package Aspire.StackExchange.Redis.DistributedCaching\n```\n\n----------------------------------------\n\nTITLE: Declaring Angular License Information in JavaScript\nDESCRIPTION: This code snippet declares the license information for the Angular framework. It specifies the version as unknown, attributes the copyright to Google LLC from 2010-2024, provides the official website, and states that the license type is MIT.\nSOURCE: https://github.com/dotnet/aspire/blob/main/playground/BrowserTelemetry/BrowserTelemetry.Web/wwwroot/scripts/bundle.js.LICENSE.txt#2025-04-20_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n/**\n * @license Angular v<unknown>\n * (c) 2010-2024 Google LLC. https://angular.io/\n * License: MIT\n */\n```\n\n----------------------------------------\n\nTITLE: Installing Aspire.Hosting.RabbitMQ Package with NuGet\nDESCRIPTION: Command to add the Aspire.Hosting.RabbitMQ package to an AppHost project using the .NET CLI. This package provides the necessary components for working with RabbitMQ in a .NET Aspire application.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Aspire.Hosting.RabbitMQ/README.md#2025-04-20_snippet_0\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet add package Aspire.Hosting.RabbitMQ\n```\n\n----------------------------------------\n\nTITLE: Building Aspire NuGet Packages on Unix Systems\nDESCRIPTION: Command to build all the NuGet packages required for testing the Aspire workload on Unix-based systems. This is an alternative to the Windows build command.\nSOURCE: https://github.com/dotnet/aspire/blob/main/tests/Aspire.Templates.Tests/README.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n./build.sh -pack\n```\n\n----------------------------------------\n\nTITLE: Installing Aspire.Hosting.Qdrant Package with .NET CLI\nDESCRIPTION: Command to install the Aspire.Hosting.Qdrant NuGet package in the AppHost project using the .NET CLI.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Aspire.Hosting.Qdrant/README.md#2025-04-20_snippet_0\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet add package Aspire.Hosting.Qdrant\n```\n\n----------------------------------------\n\nTITLE: Building Web Assets with NPM in .NET Project\nDESCRIPTION: Command to rebuild the bundle.js file after changes to package.json or index.js. This command installs required npm packages and runs webpack to generate the bundled JavaScript file in the wwwroot/scripts directory.\nSOURCE: https://github.com/dotnet/aspire/blob/main/playground/BrowserTelemetry/BrowserTelemetry.Web/README.md#2025-04-20_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ndotnet build /t:NpmRunBuild\n```\n\n----------------------------------------\n\nTITLE: Installing Aspire.Azure.Messaging.WebPubSub Package using NuGet\nDESCRIPTION: This command installs the Aspire.Azure.Messaging.WebPubSub package via the .NET CLI.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.Messaging.WebPubSub/README.md#2025-04-20_snippet_0\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet add package Aspire.Azure.Messaging.WebPubSub\n```\n\n----------------------------------------\n\nTITLE: Installing Aspire.Hosting.Keycloak Package via NuGet\nDESCRIPTION: This command installs the .NET Aspire Keycloak Hosting library using the dotnet CLI. It should be run in the AppHost project directory.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Aspire.Hosting.Keycloak/README.md#2025-04-20_snippet_0\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet add package Aspire.Hosting.Keycloak\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure DevOps and Helix Test Exclusions in MSBuild\nDESCRIPTION: MSBuild properties to opt-out specific test projects from running in Azure DevOps CI and Helix environments for Windows and Linux platforms.\nSOURCE: https://github.com/dotnet/aspire/blob/main/tests/README.md#2025-04-20_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<RunOnAzdoCIWindows>false</RunOnAzdoCIWindows>\n<RunOnAzdoCILinux>false</RunOnAzdoCILinux>\n<RunOnAzdoHelixWindows>false</RunOnAzdoHelixWindows>\n<RunOnAzdoHelixLinux>false</RunOnAzdoHelixLinux>\n```\n\n----------------------------------------\n\nTITLE: NuGet Package Reference Block\nDESCRIPTION: Package identifier for the Microsoft.Extensions.ServiceDiscovery.Abstractions library that contains core abstractions for service discovery implementation.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Microsoft.Extensions.ServiceDiscovery.Abstractions/README.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nMicrosoft.Extensions.ServiceDiscovery.Abstractions\n```\n\n----------------------------------------\n\nTITLE: AppHost Connection String Configuration\nDESCRIPTION: Example of setting up OpenAI connection string in AppHost and referencing it in a service.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.OpenAI/README.md#2025-04-20_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nvar openai = builder.AddConnectionString(\"openai\");\n\nvar myService = builder.AddProject<Projects.MyService>()\n                       .WithReference(openai);\n```\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddOpenAIClient(\"openai\");\n```\n\n----------------------------------------\n\nTITLE: Installing Aspire.Hosting.Azure.WebPubSub Package with NuGet\nDESCRIPTION: Command to install the .NET Aspire Azure Web PubSub Hosting library using the dotnet CLI.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Aspire.Hosting.Azure.WebPubSub/README.md#2025-04-20_snippet_0\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet add package Aspire.Hosting.Azure.WebPubSub\n```\n\n----------------------------------------\n\nTITLE: Cloning OpenTelemetry StackExchange Redis Instrumentation Repository\nDESCRIPTION: Commands to clone the OpenTelemetry .NET Contrib repository and checkout the specific version of StackExchange Redis instrumentation.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Vendoring/README.md#2025-04-20_snippet_3\n\nLANGUAGE: console\nCODE:\n```\ngit clone https://github.com/open-telemetry/opentelemetry-dotnet-contrib.git\ngit fetch --tags\ngit checkout tags/Instrumentation.StackExchangeRedis-1.0.0-rc9.13\n```\n\n----------------------------------------\n\nTITLE: Implementing 1ES Pipeline Template with Multiple Outputs in YAML\nDESCRIPTION: This snippet demonstrates how to use Arcade's 1ES pipeline template with multiple outputs to reduce security scan overhead. It shows the structure of azure-pipelines.yml file extending MicroBuild.1ES.Official.yml template and using the jobs.yml template from Arcade.\nSOURCE: https://github.com/dotnet/aspire/blob/main/eng/common/template-guidance.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# azure-pipelines.yml\nextends:\n  template: azure-pipelines/MicroBuild.1ES.Official.yml@MicroBuildTemplate\n  parameters:\n    stages:\n    - stage: build\n      jobs:\n      - template: /eng/common/templates-official/jobs/jobs.yml@self\n        parameters:\n          # 1ES makes use of outputs to reduce security task injection overhead\n          templateContext:\n            outputs:\n            - output: pipelineArtifact\n              displayName: 'Publish logs from source'\n              continueOnError: true\n              condition: always()\n              targetPath: $(Build.ArtifactStagingDirectory)/artifacts/log\n              artifactName: Logs\n          jobs:\n          - job: Windows\n            steps:\n            - script: echo \"friendly neighborhood\" > artifacts/marvel/spiderman.txt\n          # copy build outputs to artifact staging directory for publishing\n          - task: CopyFiles@2\n              displayName: Gather build output\n              inputs:\n                SourceFolder: '$(Build.SourcesDirectory)/artifacts/marvel'\n                Contents: '**'\n                TargetFolder: '$(Build.ArtifactStagingDirectory)/artifacts/marvel'\n```\n\n----------------------------------------\n\nTITLE: Adding Local NuGet Package Source\nDESCRIPTION: Command to add a local NuGet package source for Aspire development packages.\nSOURCE: https://github.com/dotnet/aspire/blob/main/docs/contributing.md#2025-04-20_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndotnet nuget add source my_aspire_folder/artifacts/packages/Debug/Shipping\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Service Bus Connection String in JSON\nDESCRIPTION: Demonstrates how to configure an Azure Service Bus connection string in JSON, either in the global ConnectionStrings section or the component-specific section.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/README.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ConnectionStrings\": {\n    \"Aspire.Azure.Messaging.ServiceBus\": \"Endpoint=sb://foo;...\"\n  },\n  \"Aspire\": {\n    \"Azure\": {\n      \"Messaging:ServiceBus\": {\n        \"ConnectionString\": \"Endpoint=sb://foo;...\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Elasticsearch Settings in appsettings.json\nDESCRIPTION: JSON configuration example demonstrating how to set Elasticsearch client options in the appsettings.json file.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Elastic.Clients.Elasticsearch/README.md#2025-04-20_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Aspire\": {\n    \"Elastic\": {\n      \"Clients\": {\n        \"Elasticsearch\": {\n            \"Endpoint\": \"http://elastic:password@localhost:27011\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Azure Search Connection String Configuration\nDESCRIPTION: JSON configuration for Azure Search full connection string including key\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.Search.Documents/README.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ConnectionStrings\": {\n    \"searchConnectionName\": \"Endpoint=https://{search_service}.search.windows.net/;Key={account_key};\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding .NET 9 NuGet feed for Aspire builds\nDESCRIPTION: Command to add the special NuGet feed containing the latest .NET Aspire builds from the dotnet9 repository.\nSOURCE: https://github.com/dotnet/aspire/blob/main/docs/using-latest-daily.md#2025-04-20_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ndotnet nuget add source --name dotnet9 https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet9/nuget/v3/index.json\n```\n\n----------------------------------------\n\nTITLE: OpenAI Settings Configuration\nDESCRIPTION: JSON configuration example for OpenAI settings including tracing and client options.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.OpenAI/README.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Aspire\": {\n    \"OpenAI\": {\n      \"DisableTracing\": false,\n      \"ClientOptions\": {\n        \"UserAgentApplicationId\": \"myapp\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Azure Table Storage Connection String Configuration in JSON\nDESCRIPTION: Example of configuring a connection string using the traditional account name and key approach.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.Data.Tables/README.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ConnectionStrings\": {\n    \"tableConnectionName\": \"AccountName=myaccount;AccountKey=myaccountkey\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Emulator Configuration\nDESCRIPTION: Configuration for using the Azure Cosmos DB emulator in the AppHost project.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Microsoft.EntityFrameworkCore.Cosmos/README.md#2025-04-20_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n// AppHost\nvar cosmosdb = builder.AddAzureCosmosDB(\"cosmos\").RunAsEmulator();\n\n// Service code\nbuilder.AddCosmosDbContext<MyDbContext>(\"cosmos\", \"mydb\");\n```\n\n----------------------------------------\n\nTITLE: Consuming a Redis Reference in a Service Project\nDESCRIPTION: Code showing how to consume a Redis connection that was referenced from the AppHost project in a service project.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.StackExchange.Redis.OutputCaching/README.md#2025-04-20_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddRedisOutputCache(\"cache\");\n```\n\n----------------------------------------\n\nTITLE: Installing Aspire.Hosting.Azure.Storage Package\nDESCRIPTION: Shows how to install the Aspire.Hosting.Azure.Storage package for AppHost integration.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.Data.Tables/README.md#2025-04-20_snippet_9\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet add package Aspire.Hosting.Azure.Storage\n```\n\n----------------------------------------\n\nTITLE: Environment Setup Instructions - Markdown\nDESCRIPTION: Detailed markdown documentation for setting up .NET Aspire development environment, including Visual Studio, .NET SDK, container runtime, and VS Code DevContainer setup instructions.\nSOURCE: https://github.com/dotnet/aspire/blob/main/docs/machine-requirements.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Set up your environment\n\nWhether you want to contribute to Aspire, or just use the latest build of Aspire, these are the common pieces you need to install.\n\n## (Windows) Install Visual Studio\n\nOn Windows, Visual Studio contains special tooling support for .NET Aspire that you will want to have.\n\n[Visual Studio 2022 version 17.12](https://visualstudio.microsoft.com/vs) or later\n\nWhen you install, ensure that both:\n* `ASP.NET and web development` Workload is checked.\n* `.NET Aspire SDK` component in `Individual components` is checked.\n\n## Install the latest .NET 8 SDK\n[.NET 8 SDK](https://github.com/dotnet/installer#installers-and-binaries)\n\n## Install a supported container runtime\n\n### Docker Desktop\n* [Windows](https://docs.docker.com/desktop/install/windows-install/)\n* [MacOS X](https://docs.docker.com/desktop/install/mac-install/)\n* [Linux](https://docs.docker.com/desktop/install/linux-install/)\n\n### Podman\n* [Windows](https://podman.io/docs/installation#windows)\n* [macOS](https://podman.io/docs/installation#macos)\n* [Linux](https://podman.io/docs/installation#installing-on-linux)\n```\n\n----------------------------------------\n\nTITLE: Redis Connection String Configuration\nDESCRIPTION: Example of Redis connection string configuration in JSON format.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.StackExchange.Redis/README.md#2025-04-20_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ConnectionStrings\": {\n    \"myRedisConnectionName\": \"localhost:6379\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Azure Container Registry Import Command\nDESCRIPTION: Alternative command to import images directly using Azure Container Registry import functionality with Docker Hub credentials.\nSOURCE: https://github.com/dotnet/aspire/blob/main/docs/updating-container-registry.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\naz acr import --name netaspireci --source docker.io/library/redis:7.2 --image library/redis:7.2 --username <Docker Hub user name> --password <Docker Hub token>\n```\n\n----------------------------------------\n\nTITLE: Installing Aspire.Hosting.MongoDB Package\nDESCRIPTION: Command to install the Aspire.Hosting.MongoDB library using the .NET CLI in an AppHost project.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.MongoDB.Driver/README.md#2025-04-20_snippet_6\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet add package Aspire.Hosting.MongoDB\n```\n\n----------------------------------------\n\nTITLE: Installing Aspire.Hosting.Azure.PostgreSQL Package\nDESCRIPTION: Command to install the Aspire.Hosting.Azure.PostgreSQL library in the AppHost project using NuGet package manager.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.Npgsql.EntityFrameworkCore.PostgreSQL/README.md#2025-04-20_snippet_8\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet add package Aspire.Hosting.Azure.PostgreSQL\n```\n\n----------------------------------------\n\nTITLE: Installing Aspire.Hosting.Redis Package\nDESCRIPTION: Command to install the Aspire.Hosting.Redis NuGet package for AppHost integration.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.StackExchange.Redis/README.md#2025-04-20_snippet_6\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet add package Aspire.Hosting.Redis\n```\n\n----------------------------------------\n\nTITLE: Service Bus Connection Configuration using Namespace\nDESCRIPTION: JSON configuration example showing how to configure Service Bus using a fully qualified namespace.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.Messaging.ServiceBus/README.md#2025-04-20_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ConnectionStrings\": {\n    \"serviceBusConnectionName\": \"{your_namespace}.servicebus.windows.net\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Experimental Telemetry\nDESCRIPTION: Code to enable experimental OpenAI telemetry support using AppContext switch.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.OpenAI/README.md#2025-04-20_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nAppContext.SetSwitch(\"OpenAI.Experimental.EnableOpenTelemetry\", true);\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Distribution with OTLP\nDESCRIPTION: Dependency specification for OpenTelemetry distribution package with OTLP protocol support. Used to set up telemetry collection and export capabilities.\nSOURCE: https://github.com/dotnet/aspire/blob/main/playground/python/instrumented_script/requirements.txt#2025-04-20_snippet_0\n\nLANGUAGE: plain text\nCODE:\n```\nopentelemetry-distro[otlp]\n```\n\n----------------------------------------\n\nTITLE: Enabling Experimental Telemetry\nDESCRIPTION: Code to enable experimental telemetry support for Azure AI OpenAI\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.AI.OpenAI/README.md#2025-04-20_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nAppContext.SetSwitch(\"OpenAI.Experimental.EnableOpenTelemetry\", true);\n```\n\n----------------------------------------\n\nTITLE: Installing Aspire.Azure.Npgsql Package\nDESCRIPTION: Command to install the Aspire.Azure.Npgsql NuGet package using the .NET CLI.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.Npgsql/README.md#2025-04-20_snippet_0\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet add package Aspire.Azure.Npgsql\n```\n\n----------------------------------------\n\nTITLE: Installing Aspire.Azure.Security.KeyVault Package\nDESCRIPTION: Command to install the .NET Aspire Azure Key Vault library using the dotnet CLI and NuGet package manager.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.Security.KeyVault/README.md#2025-04-20_snippet_0\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet add package Aspire.Azure.Security.KeyVault\n```\n\n----------------------------------------\n\nTITLE: Installing Aspire.OpenAI Package with dotnet CLI\nDESCRIPTION: Command to install the Aspire.OpenAI NuGet package using the .NET CLI.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.OpenAI/README.md#2025-04-20_snippet_0\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet add package Aspire.OpenAI\n```\n\n----------------------------------------\n\nTITLE: Installing Aspire.RabbitMQ.Client Package with .NET CLI\nDESCRIPTION: Command to install the Aspire.RabbitMQ.Client NuGet package using the .NET CLI.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.RabbitMQ.Client/README.md#2025-04-20_snippet_0\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet add package Aspire.RabbitMQ.Client\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Service Bus Package using .NET CLI\nDESCRIPTION: Command to install the Aspire Azure Service Bus NuGet package in a .NET project.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.Messaging.ServiceBus/README.md#2025-04-20_snippet_0\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet add package Aspire.Azure.Messaging.ServiceBus\n```\n\n----------------------------------------\n\nTITLE: Installing the Aspire.StackExchange.Redis.OutputCaching Package with NuGet\nDESCRIPTION: Command to install the Aspire.StackExchange.Redis.OutputCaching library package using the .NET CLI.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.StackExchange.Redis.OutputCaching/README.md#2025-04-20_snippet_0\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet add package Aspire.StackExchange.Redis.OutputCaching\n```\n\n----------------------------------------\n\nTITLE: Installing Aspire MySQL Package via NuGet\nDESCRIPTION: Command to install the Aspire Pomelo EntityFrameworkCore MySQL library using the dotnet CLI\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Pomelo.EntityFrameworkCore.MySql/README.md#2025-04-20_snippet_0\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet add package Aspire.Pomelo.EntityFrameworkCore.MySql\n```\n\n----------------------------------------\n\nTITLE: Consuming Azure Search Connection in Service\nDESCRIPTION: Example of consuming Azure Search connection in a service project\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.Search.Documents/README.md#2025-04-20_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddAzureSearchClient(\"search\");\n```\n\n----------------------------------------\n\nTITLE: Running TestShop Sample from Command Line\nDESCRIPTION: Commands to restore dependencies and run the TestShop sample application from the command line.\nSOURCE: https://github.com/dotnet/aspire/blob/main/docs/contributing.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndotnet restore playground/TestShop/TestShop.AppHost/TestShop.AppHost.csproj\ndotnet run --project playground/TestShop/TestShop.AppHost/TestShop.AppHost.csproj\n```\n\n----------------------------------------\n\nTITLE: Consuming Service Bus Connection in Service\nDESCRIPTION: Example showing how to consume the Service Bus connection in a service project.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.Messaging.ServiceBus/README.md#2025-04-20_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddAzureServiceBusClient(\"sb\");\n```\n\n----------------------------------------\n\nTITLE: Default Framework Target Property\nDESCRIPTION: Property reference for specifying the default target framework in test configurations.\nSOURCE: https://github.com/dotnet/aspire/blob/main/tests/Shared/RepoTesting/README.md#2025-04-20_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n$(DefaultTargetFramework)\n```\n\n----------------------------------------\n\nTITLE: Configuring NATS Client Settings with Inline Delegates\nDESCRIPTION: Example of using an inline delegate to configure NATS client settings directly in code, specifically disabling health checks.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.NATS.Net/README.md#2025-04-20_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddNatsClient(\"nats\", settings => settings.DisableHealthChecks = true);\n```\n\n----------------------------------------\n\nTITLE: Consuming NATS Connection in a Service Project\nDESCRIPTION: Shows how to consume a NATS connection in a service project that references a NATS server from the AppHost.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.NATS.Net/README.md#2025-04-20_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddNatsClient(\"nats\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Seq Resource in .NET Aspire AppHost\nDESCRIPTION: This code snippet demonstrates how to add a Seq resource to a .NET Aspire AppHost and reference it in a service. It uses the AddSeq method to create the Seq resource and WithReference to connect it to a service.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Aspire.Hosting.Seq/README.md#2025-04-20_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar seq = builder.AddSeq(\"seq\");\n\nvar myService = builder.AddProject<Projects.MyService>()\n                       .WithReference(seq);\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Resource Provisioning with User Secrets\nDESCRIPTION: JSON configuration needed for local development with Azure resources. Includes subscription ID, resource group prefix, and Azure location settings required for automatic provisioning.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Aspire.Hosting.Azure.Storage/README.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Azure\": {\n      \"SubscriptionId\": \"<your subscription id>\",\n      \"ResourceGroupPrefix\": \"<prefix for the resource group>\",\n      \"Location\": \"<azure location>\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering KubernetesPublisher in Aspire AppHost\nDESCRIPTION: Code snippet showing how to register the KubernetesPublisher with a name of 'k8s' in the Program.cs file of an AppHost project. This registration makes the publisher available for use during deployment.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Aspire.Hosting.Kubernetes/README.md#2025-04-20_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddPublisher<KubernetesPublisher>(\"k8s\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Provisioning Settings in JSON\nDESCRIPTION: JSON configuration for Azure provisioning, including subscription ID, resource group prefix, and location. These settings should be stored in user secrets for local development.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Aspire.Hosting.Azure.Search/README.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Azure\": {\n      \"SubscriptionId\": \"<your subscription id>\",\n      \"ResourceGroupPrefix\": \"<prefix for the resource group>\",\n      \"Location\": \"<azure location>\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing .NET Aspire TestShop Process IDs in PowerShell\nDESCRIPTION: This PowerShell command identifies and displays the process IDs of all running .NET Aspire TestShop components. It uses a regular expression to match process names related to the TestShop application.\nSOURCE: https://github.com/dotnet/aspire/blob/main/docs/tips-and-known-issues.md#2025-04-20_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nps | where ProcessName -cmatch '(Api)|(Catalog)|(Basket)|(AppHost)|(MyFrontend)|(OrderProcessor)' | % {Write-Output $_.Id }\n```\n\n----------------------------------------\n\nTITLE: Configuring MySqlDataSource with Inline Delegates\nDESCRIPTION: Example of adding a MySQL data source with an inline delegate to configure settings such as disabling health checks.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.MySqlConnector/README.md#2025-04-20_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddMySqlDataSource(\"mysql\", settings => settings.DisableHealthChecks = true);\n```\n\n----------------------------------------\n\nTITLE: Installing Aspire.Hosting.Azure.CosmosDB Package\nDESCRIPTION: Command to install the Aspire Azure CosmosDB Hosting library using the .NET CLI. This package is needed in the AppHost project to configure Cosmos DB resources.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Microsoft.Azure.Cosmos/README.md#2025-04-20_snippet_8\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet add package Aspire.Hosting.Azure.CosmosDB\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting: Configuring Username for Managed Identity\nDESCRIPTION: Example of how to configure the Username property and use EnrichAzureNpgsqlDbContext when the application's Managed Identity cannot be detected.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.Npgsql.EntityFrameworkCore.PostgreSQL/README.md#2025-04-20_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddDbContextPool<MyDbContext>(options => options.UseNpgsql(newConnectionString));\nbuilder.EnrichAzureNpgsqlDbContext<MyDbContext>();\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Service Bus Hosting Package\nDESCRIPTION: Command to install the Aspire Azure Service Bus Hosting NuGet package in an AppHost project.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.Messaging.ServiceBus/README.md#2025-04-20_snippet_8\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet add package Aspire.Hosting.Azure.ServiceBus\n```\n\n----------------------------------------\n\nTITLE: Installing Aspire.Hosting.Orleans Package with NuGet\nDESCRIPTION: Command to add the Aspire.Hosting.Orleans package to an AppHost project using the dotnet CLI. This package provides Orleans integration capabilities for .NET Aspire applications.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Aspire.Hosting.Orleans/README.md#2025-04-20_snippet_0\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet add package Aspire.Hosting.Orleans\n```\n\n----------------------------------------\n\nTITLE: Cloning OpenTelemetry SQL Client Instrumentation Repository\nDESCRIPTION: Commands to clone the OpenTelemetry .NET repository and checkout the specific version of SQL Client instrumentation.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Vendoring/README.md#2025-04-20_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ngit clone https://github.com/open-telemetry/opentelemetry-dotnet.git\ngit fetch --tags\ngit checkout tags/Instrumentation.SqlClient-1.7.0-beta.1\n```\n\n----------------------------------------\n\nTITLE: Consuming Azure Blob Storage Connection in a Service Project\nDESCRIPTION: Example of how to consume the Azure Blob Storage connection in a service project's Program.cs file after it has been configured in the AppHost.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.Storage.Blobs/README.md#2025-04-20_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddAzureBlobClient(\"blobs\");\n```\n\n----------------------------------------\n\nTITLE: Registering and Referencing Qdrant in AppHost\nDESCRIPTION: Code for registering a Qdrant server in the AppHost and referencing it from a service project.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Qdrant.Client/README.md#2025-04-20_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nvar qdrant = builder.AddQdrant(\"qdrant\");\n\nvar myService = builder.AddProject<Projects.MyService>()\n                       .WithReference(qdrant);\n```\n\n----------------------------------------\n\nTITLE: Installing Aspire Hosting PostgreSQL Package\nDESCRIPTION: Command to install the Aspire.Hosting.PostgreSQL package for AppHost configuration.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Npgsql.EntityFrameworkCore.PostgreSQL/README.md#2025-04-20_snippet_7\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet add package Aspire.Hosting.PostgreSQL\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions Test Exclusions in MSBuild\nDESCRIPTION: MSBuild properties to opt-out specific test projects from running in GitHub Actions CI environment for Windows and Linux platforms.\nSOURCE: https://github.com/dotnet/aspire/blob/main/tests/README.md#2025-04-20_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<RunOnGithubActionsWindows>false</RunOnGithubActionsWindows>\n<RunOnGithubActionsLinux>false</RunOnGithubActionsLinux>\n```\n\n----------------------------------------\n\nTITLE: Configuring Named Instances for Aspire Components in JSON\nDESCRIPTION: Shows the JSON structure for configuring multiple named instances of an Aspire component under the component's configuration section.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/README.md#2025-04-20_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Aspire\": {\n    \"Abc\": {\n      \"named_one\": {\n\n      },\n      \"named_two\": {\n\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Connection Options with Inline Delegates\nDESCRIPTION: Code example showing how to configure Redis ConnectionOptions using inline delegates, specifically setting the connection timeout.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.StackExchange.Redis.OutputCaching/README.md#2025-04-20_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddRedisOutputCache(\"cache\", configureOptions: options => options.ConnectTimeout = 3000);\n```\n\n----------------------------------------\n\nTITLE: Consuming PostgreSQL Connection in a Service\nDESCRIPTION: Example showing how to consume a PostgreSQL database connection that was referenced from the AppHost.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Npgsql/README.md#2025-04-20_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddNpgsqlDataSource(\"postgresdb\");\n```\n\n----------------------------------------\n\nTITLE: Installing Aspire.Hosting.MySql Package for AppHost\nDESCRIPTION: Command to install the Aspire.Hosting.MySql NuGet package for use in the AppHost project.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.MySqlConnector/README.md#2025-04-20_snippet_7\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet add package Aspire.Hosting.MySql\n```\n\n----------------------------------------\n\nTITLE: Consuming Azure Search Client in Service Project\nDESCRIPTION: C# code snippet showing how to consume the Azure Search connection in a service project using the Aspire.Azure.Search.Documents client library.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Aspire.Hosting.Azure.Search/README.md#2025-04-20_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.AddAzureSearchClient(\"search\");\n```\n\n----------------------------------------\n\nTITLE: Injecting WebPubSubServiceClient in a Controller\nDESCRIPTION: This example demonstrates how to inject and use a WebPubSubServiceClient instance in a Web API controller.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Azure.Messaging.WebPubSub/README.md#2025-04-20_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nprivate readonly WebPubSubServiceClient _client;\n\npublic ProductsController(WebPubSubServiceClient client)\n{\n    _client = client;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining IDE Endpoint Information Response in JSON\nDESCRIPTION: Example JSON response for the IDE endpoint information request, listing supported protocol versions.\nSOURCE: https://github.com/dotnet/aspire/blob/main/docs/specs/IDE-execution.md#2025-04-20_snippet_1\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n    \"protocols_supported\": [ \"2024-03-03\" ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Cosmos Client for Emulator in Service\nDESCRIPTION: C# code to configure Azure Cosmos Client in a service project when using the emulator.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Aspire.Hosting.Azure.CosmosDB/README.md#2025-04-20_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n// Service code\nbuilder.AddAzureCosmosClient(\"cosmos\");\n```\n\n----------------------------------------\n\nTITLE: Installing Aspire.MySqlConnector Package with .NET CLI\nDESCRIPTION: Command to install the Aspire.MySqlConnector NuGet package using the dotnet CLI tool.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.MySqlConnector/README.md#2025-04-20_snippet_0\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet add package Aspire.MySqlConnector\n```\n\n----------------------------------------\n\nTITLE: Configuring NuGet.config for Local Aspire Packages\nDESCRIPTION: XML configuration to add a local package source for Aspire development packages in NuGet.config.\nSOURCE: https://github.com/dotnet/aspire/blob/main/docs/contributing.md#2025-04-20_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<add key=\"aspire-dev\" value=\"my_aspire_folder/artifacts/packages/Debug/Shipping\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Aspire.Hosting.Redis Package with NuGet\nDESCRIPTION: Command to install the .NET Aspire Redis Hosting library in an AppHost project using the dotnet CLI.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Aspire.Hosting.Redis/README.md#2025-04-20_snippet_0\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet add package Aspire.Hosting.Redis\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Cosmos DB Emulator in AppHost\nDESCRIPTION: C# code to set up Azure Cosmos DB emulator for local development in the AppHost project.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Aspire.Hosting.Azure.CosmosDB/README.md#2025-04-20_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n// AppHost\nvar cosmosdb = builder.AddAzureCosmosDB(\"cosmos\").RunAsEmulator();\n```\n\n----------------------------------------\n\nTITLE: Installing Aspire.Hosting.SqlServer Package via NuGet\nDESCRIPTION: This command installs the .NET Aspire SQL Server Hosting library using the dotnet CLI. It should be run in the AppHost project directory.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Aspire.Hosting.SqlServer/README.md#2025-04-20_snippet_0\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet add package Aspire.Hosting.SqlServer\n```\n\n----------------------------------------\n\nTITLE: Adding Bicep Template Resource in C#\nDESCRIPTION: This C# code snippet demonstrates how to add a resource based on a Bicep template in the AppHost's Program.cs file. It includes setting a parameter for the template.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Aspire.Hosting.Azure/README.md#2025-04-20_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar bicepResource = builder.AddBicepTemplate(\"bicep\", \"template.bicep\")\n                           .WithParameter(\"parametername\", \"parametervalue\");\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Aspire.Hosting.Azure Package with .NET CLI\nDESCRIPTION: This command installs the Aspire.Hosting.Azure NuGet package in the AppHost project using the .NET CLI.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Aspire.Hosting.Azure/README.md#2025-04-20_snippet_0\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet add package Aspire.Hosting.Azure\n```\n\n----------------------------------------\n\nTITLE: Registering Azure SQL Server in AppHost\nDESCRIPTION: C# code snippet for registering an Azure SQL Server database and consuming the connection in the AppHost's Program.cs file.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Aspire.Hosting.Azure.Sql/README.md#2025-04-20_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar sql = builder.AddAzureSqlServer(\"sql\")\n                 .AddDatabase(\"sqldata\");\n\nvar myService = builder.AddProject<Projects.MyService>()\n                       .WithReference(sql);\n```\n\n----------------------------------------\n\nTITLE: Installing Aspire Hosting Keycloak Package\nDESCRIPTION: Command to install the Aspire.Hosting.Keycloak NuGet package using the .NET CLI.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Components/Aspire.Keycloak.Authentication/README.md#2025-04-20_snippet_3\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet add package Aspire.Hosting.Keycloak\n```\n\n----------------------------------------\n\nTITLE: Package Source Mapping configuration for .NET Aspire\nDESCRIPTION: XML configuration for NuGet Package Source Mapping that maps Aspire-related packages to the dotnet9 feed.\nSOURCE: https://github.com/dotnet/aspire/blob/main/docs/using-latest-daily.md#2025-04-20_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<packageSourceMapping>\n  <packageSource key=\"dotnet9\">\n    <package pattern=\"Aspire.*\" />\n    <package pattern=\"Microsoft.Extensions.ServiceDiscovery*\" />\n    <package pattern=\"Microsoft.Extensions.Http.Resilience\" />\n  </packageSource>\n</packageSourceMapping>\n```\n\n----------------------------------------\n\nTITLE: Installing Aspire.Hosting.MySql Package with NuGet\nDESCRIPTION: Command to install the .NET Aspire MySQL Hosting library in an AppHost project using the dotnet CLI.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Aspire.Hosting.MySql/README.md#2025-04-20_snippet_0\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet add package Aspire.Hosting.MySql\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Provisioning Settings in JSON\nDESCRIPTION: JSON configuration for Azure provisioning settings, including subscription ID, resource group prefix, and location. These settings should be stored in user secrets for local development.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Aspire.Hosting.Azure.EventHubs/README.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Azure\": {\n      \"SubscriptionId\": \"<your subscription id>\",\n      \"ResourceGroupPrefix\": \"<prefix for the resource group>\",\n      \"Location\": \"<azure location>\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Aspire.Hosting.Milvus Package using dotnet CLI\nDESCRIPTION: Command to install the Aspire.Hosting.Milvus NuGet package in an AppHost project using the dotnet CLI.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Aspire.Hosting.Milvus/README.md#2025-04-20_snippet_0\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet add package Aspire.Hosting.Milvus\n```\n\n----------------------------------------\n\nTITLE: Environment Variable for External Test Configuration\nDESCRIPTION: Environment variable used to determine if tests are running outside the repository, affecting how project references are resolved.\nSOURCE: https://github.com/dotnet/aspire/blob/main/tests/Shared/RepoTesting/README.md#2025-04-20_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n$(TestsRunningOutsideOfRepo)\n```\n\n----------------------------------------\n\nTITLE: Installing Aspire.Hosting.Valkey Package with NuGet\nDESCRIPTION: Command to install the Aspire.Hosting.Valkey library using the .NET CLI NuGet package manager. This package provides extension methods for configuring Valkey cache in a .NET Aspire AppHost.\nSOURCE: https://github.com/dotnet/aspire/blob/main/src/Aspire.Hosting.Valkey/README.md#2025-04-20_snippet_0\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet add package Aspire.Hosting.Valkey\n```"
  }
]