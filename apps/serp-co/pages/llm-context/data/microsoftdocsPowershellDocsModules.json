[
  {
    "owner": "microsoftdocs",
    "repo": "powershell-docs-modules",
    "content": "TITLE: Wrapping apt command with Output Handler - JSON\nDESCRIPTION: This JSON configuration wraps the `apt` command to retrieve installed packages. The `OriginalCommandElements` array allows specifying command options. The `OutputHandlers` section uses PowerShell code to parse the text output, skip the first line, split each line into fields, and create a `pscustomobject` for each package with properties like Name, Version, Architecture and State. This enables advanced filtering using PowerShell cmdlets.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.Crescendo/About/about_Crescendo.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"$schema\": \"../src/Microsoft.PowerShell.Crescendo.Schema.json\",\n    \"Verb\": \"Get\",\n    \"Noun\":\"InstalledPackage\",\n    \"OriginalName\": \"apt\",\n    \"OriginalCommandElements\": [\n     \"-q\",\n     \"list\",\n     \"--installed\"\n    ],\n    \"OutputHandlers\": [\n        {\n            \"ParameterSetName\":\"Default\",\n            \"Handler\": \"$args[0]|select-object -skip 1|foreach-object{$n,$v,$p,$s = \\\"$_\\\" -split ' ';[pscustomobject]@{Name=$n -replace '/now';Version=$v;Architecture=$p;State = $s.Trim('[]') -split ','}}\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a new SecretStore vault in PowerShell\nDESCRIPTION: This code snippet demonstrates how to register a new SecretStore vault using the Register-SecretVault cmdlet. The -Name parameter specifies a friendly name for the vault, -ModuleName specifies the module name, and -DefaultVault sets the vault as the default.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/SecretManagement/how-to/manage-secretstore.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nRegister-SecretVault -Name SecretStore -ModuleName Microsoft.PowerShell.SecretStore -DefaultVault\n```\n\n----------------------------------------\n\nTITLE: Explicit Settings File Example - PowerShell\nDESCRIPTION: This example shows how to exclude specific rules and severity levels by defining settings in a `.psd1` file.  This allows customization of the analysis based on specific project requirements. This example excludes `PSAvoidUsingCmdletAliases` and `PSAvoidUsingWriteHost` and only includes `Error` and `Warning` severities.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/using-scriptanalyzer.md#_snippet_9\n\nLANGUAGE: powershell\nCODE:\n```\n# PSScriptAnalyzerSettings.psd1\n@{\n    Severity=@('Error','Warning')\n    ExcludeRules=@('PSAvoidUsingCmdletAliases', 'PSAvoidUsingWriteHost')\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Secret Vault\nDESCRIPTION: This code registers a new secret vault named 'SecretStore' using the Register-SecretVault cmdlet. It designates this vault as the default vault using the -DefaultVault parameter. The -ModuleName parameter specifies the module responsible for managing this vault.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/SecretManagement/get-started/using-secretstore.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nRegister-SecretVault -Name SecretStore -ModuleName Microsoft.PowerShell.SecretStore -DefaultVault\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of CmdletBinding PowerShell\nDESCRIPTION: This code snippet shows the correct way to declare a PowerShell function with `CmdletBinding` and `SupportsShouldProcess`. By using `SupportsShouldProcess`, the `$Confirm` and `$WhatIf` parameters are automatically provided. This method is recommended as it also provides additional generic functionality for interactive cmdlet experiences.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/UseSupportsShouldProcess.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nfunction foo {\n    [CmdletBinding(SupportsShouldProcess)]\n    param(\n        $param1\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Password Parameter Declaration PowerShell\nDESCRIPTION: This code snippet shows the correct way to declare a password parameter in PowerShell. The $Password parameter is declared as a [SecureString] type, which encrypts the password. This enhances security as the password is not stored in plain text. The CmdletBinding attribute enables cmdlet-like behavior.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/AvoidUsingPlainTextForPassword.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nfunction Test-Script\n{\n    [CmdletBinding()]\n    Param\n    (\n        [SecureString]\n        $Password\n    )\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: DSC Non-Class Resource: Correct Implementation (PowerShell)\nDESCRIPTION: This code snippet demonstrates the correct implementation of standard DSC functions for a non-class based resource, including `Get-TargetResource`, `Set-TargetResource`, and `Test-TargetResource`.  The `Test-TargetResource` function returns a boolean value indicating whether the resource is in the desired state. The mandatory parameter `$Name` is defined for each function.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/DSCStandardDSCFunctionsInResource.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nfunction Get-TargetResource\n{\n    [OutputType([Hashtable])]\n    param\n    (\n        [parameter(Mandatory = $true)]\n        [String]\n        $Name\n    )\n    ...\n}\n\nfunction Set-TargetResource\n{\n    param\n    (\n        [parameter(Mandatory = $true)]\n        [String]\n        $Name\n    )\n    ...\n}\n\nfunction Test-TargetResource\n{\n    [OutputType([System.Boolean])]\n    param\n    (\n        [parameter(Mandatory = $true)]\n        [String]\n        $Name\n    )\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SecretStore Vault in PowerShell\nDESCRIPTION: This snippet configures the SecretStore vault with specific settings. It registers SecretStore as the default vault, imports the password from the encrypted XML file, and sets the authentication method to 'Password', the password timeout to 3600 seconds (1 hour), and user interaction to 'None'. The `-Confirm:$false` parameter suppresses confirmation prompts. The configuration is applied using `Set-SecretStoreConfiguration`. Dependencies: the secure password file.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/SecretManagement/how-to/using-secrets-in-automation.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nRegister-SecretVault -Name SecretStore -ModuleName Microsoft.PowerShell.SecretStore -DefaultVault\n$password = Import-CliXml -Path $securePasswordPath\n\n$storeConfiguration = @{\n    Authentication = 'Password'\n    PasswordTimeout = 3600 # 1 hour\n    Interaction = 'None'\n    Password = $password\n    Confirm = $false\n}\nSet-SecretStoreConfiguration @storeConfiguration\n```\n\n----------------------------------------\n\nTITLE: Direct Command Execution - PowerShell\nDESCRIPTION: This snippet shows the correct way to execute a command directly in PowerShell, avoiding the security risks associated with `Invoke-Expression`. This is the preferred method when the command is known and doesn't rely on dynamically generated strings from user input.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/AvoidUsingInvokeExpression.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-Process\n```\n\n----------------------------------------\n\nTITLE: Example of Correct PowerShell Function Definition\nDESCRIPTION: This code snippet provides an example of a correct PowerShell function definition with comprehensive comment-based help. The comment block includes sections for Synopsis, Description, Examples, Inputs, Outputs, Notes, Component, Role, and Functionality, adhering to best practices for providing help information.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/ProvideCommentHelp.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.Synopsis\n    Short description\n.DESCRIPTION\n    Long description\n.EXAMPLE\n    Example of how to use this cmdlet\n.EXAMPLE\n    Another example of how to use this cmdlet\n.INPUTS\n    Inputs to this cmdlet (if any)\n.OUTPUTS\n    Output from this cmdlet (if any)\n.NOTES\n    General notes\n.COMPONENT\n    The component this cmdlet belongs to\n.ROLE\n    The role this cmdlet belongs to\n.FUNCTIONALITY\n    The functionality that best describes this cmdlet\n#>\n\nfunction Get-File\n{\n    [CmdletBinding()]\n    Param\n    (\n        ...\n    )\n\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Crescendo Command Configuration with Output Handler - JSON\nDESCRIPTION: This example shows a more complete Crescendo command configuration, including the `OriginalCommandElements`, `Description`, `Aliases`, and an `OutputHandler` that converts the JSON output of the original command to PowerShell objects. It defines the `azcmagent show` command. It is configured for Windows only.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/Crescendo/get-started/create-new-cmdlet.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://aka.ms/PowerShell/Crescendo/Schemas/2022-06\",\n  \"Commands\": [\n    {\n      \"Verb\": \"Show\",\n      \"Noun\": \"AzCmAgent\",\n      \"OriginalName\": \"c:/program files/AzureConnectedMachineAgent/azcmagent.exe\",\n      \"OriginalCommandElements\": [\n         \"show\",\n         \"--json\"\n      ],\n      \"Platform\": [\n        \"Windows\"\n      ],\n      \"Description\": \"Gets machine metadata and Agent status. This is primarily useful for troubleshooting.\",\n      \"Aliases\": [\n        \"azinfo\"\n      ],\n      \"OutputHandlers\": [\n        {\n            \"ParameterSetName\": \"Default\",\n            \"HandlerType\": \"Inline\",\n            \"Handler\": \"$args[0] | ConvertFrom-Json\"\n        }\n      ],\n      \"SupportsShouldProcess\": false,\n      \"SupportsTransactions\": false,\n      \"NoInvocation\": false,\n      \"Parameters\": [],\n      \"Examples\": []\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Warnings Automatically (Invoke-ScriptAnalyzer, PowerShell)\nDESCRIPTION: The `-Fix` parameter attempts to automatically fix certain warnings found during script analysis.  It applies the fixes before running the full analysis. It is crucial to back up files before using this parameter to avoid unintended changes.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/PSScriptAnalyzer/Invoke-ScriptAnalyzer.md#_snippet_12\n\nLANGUAGE: YAML\nCODE:\n```\nType: SwitchParameter\nParameter Sets: Path_SuppressedOnly, Path_IncludeSuppressed\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Creating a secret with metadata in PowerShell\nDESCRIPTION: This code snippet demonstrates how to create a new secret with associated metadata using the Set-Secret cmdlet. It defines a hashtable containing metadata key-value pairs, including a string, a DateTime, and an integer. The metadata is then passed to the Set-Secret cmdlet when creating the secret.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/SecretManagement/how-to/manage-secretstore.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\n$metadata = @{\n    Purpose = 'Testing'\n    Expires = (Get-Date).AddDays(30)\n    Limit = 5\n}\nSet-Secret -Name TestSecret -Secret NewSecret -Metadata $metadata\n```\n\n----------------------------------------\n\nTITLE: Start-ThreadJob and Start-Job with Using Scope - PowerShell\nDESCRIPTION: This snippet demonstrates the usage of the `$using:` scope modifier with `Start-ThreadJob` and `Start-Job`. It ensures that the variable `$foo` is accessible within the scriptblocks executed by these commands in separate runspaces. This allows for passing variables to the background job or thread job.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/UseUsingScopeModifierInNewRunspaces.md#_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\n$foo = 'foo'\nStart-ThreadJob -ScriptBlock { $using:foo }\nStart-Job -ScriptBlock {$using:foo }\n```\n\n----------------------------------------\n\nTITLE: Register Azure Key Vault with SecretManagement in PowerShell\nDESCRIPTION: This snippet installs the required modules, imports them, and registers the Azure Key Vault with SecretManagement for use in automation. It requires the Az.KeyVault module and user context of the automation account on the automation host. The $vaultName and $subID variables should be replaced with actual values.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/SecretManagement/how-to/using-azure-keyvault.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nInstall-Module -Name Microsoft.PowerShell.SecretManagement -Repository PSGallery -Force\nInstall-Module Az.KeyVault -Repository PSGallery -Force\nImport-Module Microsoft.PowerShell.SecretManagement\nImport-Module Az.KeyVault\n\n$VaultParameters = @{\n    AZKVaultName = $vaultName\n    SubscriptionId = $subID\n}\nRegister-SecretVault -Module Az.KeyVault -Name AzKV -VaultParameters $VaultParameters\n```\n\n----------------------------------------\n\nTITLE: Converting JSON Output to PowerShell Object\nDESCRIPTION: This example shows how to execute a command-line tool (`azcmagent`) with the `--json` flag to output in JSON format, then use `ConvertFrom-Json` to convert the JSON output into a PowerShell object. This facilitates easy access to the tool's data within PowerShell.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/Crescendo/get-started/research-tool.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nPS> $agentStatus = azcmagent show --json | ConvertFrom-Json\nPS> $agentStatus.services\n\ndisplayName       serviceName      status\n-----------       -----------      ------\nGC Service        gcarcservice     running\nExtension Service extensionservice running\nAgent Service     himds            running\n```\n\n----------------------------------------\n\nTITLE: Get All Secret Vaults PowerShell\nDESCRIPTION: This example demonstrates how to retrieve information for all registered secret vaults using the Get-SecretVault cmdlet without specifying any parameters. It retrieves the VaultName, ModuleName, and IsDefaultVault properties for each registered vault. No specific dependencies are required beyond having the Microsoft.PowerShell.SecretManagement module installed.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.SecretManagement/Get-SecretVault.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-SecretVault\n```\n\n----------------------------------------\n\nTITLE: Registering SecretStore Vault with Default Setting in PowerShell\nDESCRIPTION: This example demonstrates how to register a Microsoft.PowerShell.SecretStore extension vault and set it as the default vault using the Register-SecretVault cmdlet. It then uses Get-SecretVault to verify the registration and default vault status.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.SecretManagement/Register-SecretVault.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nRegister-SecretVault -Name LocalStore -ModuleName Microsoft.PowerShell.SecretStore -DefaultVault\nGet-SecretVault\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nVaultName  ModuleName                        IsDefaultVault\n---------\\  ----------                        --------------\nCredMan    Microsoft.PowerShell.CredManStore False\nLocalStore Microsoft.PowerShell.SecretStore  True\n```\n\n----------------------------------------\n\nTITLE: Wrapping /bin/ls with Crescendo - JSON\nDESCRIPTION: This JSON configuration wraps the `/bin/ls` command as a PowerShell function named `Get-FileList`. It defines two parameters: `Path` (positional with a default value of '.') and `Detail` (a switch that adds `-l` to the native command). No output handler is defined, so the raw text output is returned.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.Crescendo/About/about_Crescendo.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"$schema\": \"../src/Microsoft.PowerShell.Crescendo.Schema.json\",\n    \"Verb\": \"Get\",\n    \"Noun\":\"FileList\",\n    \"OriginalName\": \"/bin/ls\",\n    \"Parameters\": [\n        {\n            \"Name\": \"Path\",\n            \"OriginalName\": \"\",\n            \"OriginalPosition\": 1,\n            \"Position\": 0,\n            \"DefaultValue\": \".\"\n        },\n        {\n            \"Name\": \"Detail\",\n            \"OriginalName\": \"-l\",\n            \"ParameterType\": \"switch\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Get DSC Rules with Error Severity and Invoke Analyzer - PowerShell\nDESCRIPTION: This example filters DSC rules with Error severity and uses them to analyze files in a specified module path. It utilizes both Get-ScriptAnalyzerRule and Invoke-ScriptAnalyzerRule, demonstrating how to combine rule retrieval with script analysis for specific scenarios such as DSC module validation.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/PSScriptAnalyzer/Get-ScriptAnalyzerRule.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n$DSCError = Get-ScriptAnalyzerRule -Severity Error | Where-Object SourceName -eq PSDSC\n$Path = \"$home\\Documents\\WindowsPowerShell\\Modules\\MyDSCModule\\*\"\nInvoke-ScriptAnalyzerRule -Path $Path -IncludeRule $DSCError -Recurse\n```\n\n----------------------------------------\n\nTITLE: Set Secret with Metadata\nDESCRIPTION: This example demonstrates how to set a secret named `TargetSecret` in the `LocalStore` vault and includes metadata indicating the secret's expiration date.  The metadata is a hashtable containing key-value pairs. `Get-SecretInfo` is used to retrieve the metadata associated with the secret.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.SecretManagement/Set-Secret.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n$Metadata = @{ Expiration = ([datetime]::new(2022, 5, 1)) }\nSet-Secret -Name TargetSecret -Secret $targetToken -Vault LocalStore -Metadata $Metadata\nGet-SecretInfo -Name TargetSecret | Select-Object Name,Metadata\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nName         Metadata\n----         --------\nTargetSecret {[Expiration, 5/1/2022 12:00:00 AM]}\n```\n\n----------------------------------------\n\nTITLE: Creating a Secret\nDESCRIPTION: This code snippet demonstrates how to create a secret named 'TestSecret' with the value 'TestSecretPassword' using the Set-Secret cmdlet.  The secret is stored in the default registered vault.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/SecretManagement/get-started/using-secretstore.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-Secret -Name TestSecret -Secret \"TestSecretPassword\"\n```\n\n----------------------------------------\n\nTITLE: Correct Mandatory Parameter Definition PowerShell\nDESCRIPTION: This code snippet shows the correct way to define a mandatory parameter in a PowerShell function. The parameter `$Parameter1` is marked as mandatory using `[Parameter(Mandatory=$true)]` but does not have a default value. This forces PowerShell to prompt the user for a value when the function is called without the parameter specified, which is the expected behavior for mandatory parameters. This demonstrates the recommended approach.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/AvoidDefaultValueForMandatoryParameter.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nfunction Test\n{\n    [CmdletBinding()]\n    Param\n    (\n        [Parameter(Mandatory=$true)]\n        $Parameter1\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Listing registered SecretStore vaults in PowerShell\nDESCRIPTION: This code snippet shows how to retrieve a list of registered secret vaults using the Get-SecretVault cmdlet. It displays the name, module name, and whether the vault is the default vault.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/SecretManagement/how-to/manage-secretstore.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-SecretVault\n\nName        ModuleName                       IsDefaultVault\n----        ----------                       --------------\nEdge        SecretManagement.Chromium        False\nSecretStore Microsoft.PowerShell.SecretStore True\n```\n\n----------------------------------------\n\nTITLE: Viewing secret metadata in PowerShell\nDESCRIPTION: This code snippet shows how to view the metadata associated with a secret using the Get-SecretInfo cmdlet and piping the output to Format-List. It retrieves information about a secret, including its name, type, vault name, and metadata.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/SecretManagement/how-to/manage-secretstore.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-SecretInfo -Name TestSecret | Format-List *\n\nName      : TestSecret\nType      : String\nVaultName : SecretStore\nMetadata  : {[Limit, 5], [Expires, 6/23/2022 1:45:09 PM], [Purpose, Testing]}\n```\n\n----------------------------------------\n\nTITLE: Installing SecretManagement and SecretStore modules with PSResourceGet\nDESCRIPTION: This code snippet shows how to install the SecretManagement and SecretStore modules using the Install-PSResource cmdlet from the PSResourceGet module. It is intended for use with PSResourceGet version 1.x.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/SecretManagement/get-started/using-secretstore.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n# Install with PSResourceGet 1.x\nInstall-PSResource Microsoft.PowerShell.SecretManagement\nInstall-PSResource Microsoft.PowerShell.SecretStore\n```\n\n----------------------------------------\n\nTITLE: Defining Ollama Data Schemas in C#\nDESCRIPTION: This code snippet defines the C# classes used to structure the data exchanged with the Ollama API. It includes classes for the query sent to the API (`Query`) and the response received (`ResponseData`, `OllamaResponse`).  These classes are essential for serializing and deserializing data during API calls.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/AIShell/developer/create-ollama-agent.md#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nnamespace AIShell.Ollama.Agent;\n\n// Query class for the data to send to the endpoint\ninternal class Query\n{\n    public string prompt { get; set; }\n    public string model { get; set; }\n\n    public bool stream { get; set; }\n}\n\n// Response data schema\ninternal class ResponseData\n{\n    public string model { get; set; }\n    public string created_at { get; set; }\n    public string response { get; set; }\n    public bool done { get; set; }\n    public string done_reason { get; set; }\n    public int[] context { get; set; }\n    public double total_duration { get; set; }\n    public long load_duration { get; set; }\n    public int prompt_eval_count { get; set; }\n    public int prompt_eval_duration { get; set; }\n    public int eval_count { get; set; }\n    public long eval_duration { get; set; }\n}\n\ninternal class OllamaResponse\n{\n    public int Status { get; set; }\n    public string Error { get; set; }\n    public string Api_version { get; set; }\n    public ResponseData Data { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Bicep parameters for Azure OpenAI deployment\nDESCRIPTION: This Bicep code defines parameters for configuring the Azure OpenAI service deployment, including account name, custom domain, model details, capacity, and location.  It sets default values and constraints using decorators. Users must replace the placeholders in angle brackets with their own values before deploying the service. The model and version can be adjusted to suit the specific needs.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/AIShell/developer/deploy-azure-openai.md#_snippet_0\n\nLANGUAGE: bicep\nCODE:\n```\n@description('This is the name of your AI Service Account')\nparam aiserviceaccountname string = '<Insert own account name>'\n\n@description('Custom domain name for the endpoint')\nparam customDomainName string = '<Insert own unique domain name>'\n\n@description('Name of the deployment')\nparam modeldeploymentname string = '<Insert own deployment name>'\n\n@description('The model being deployed')\nparam model string = 'gpt-4'\n\n@description('Version of the model being deployed')\nparam modelversion string = 'turbo-2024-04-09'\n\n@description('Capacity for specific model used')\nparam capacity int = 80\n\n@description('Location for all resources.')\nparam location string = resourceGroup().location\n\n@allowed([\n  'S0'\n])\nparam sku string = 'S0'\n```\n\n----------------------------------------\n\nTITLE: Correct CmdletBinding Declaration PowerShell\nDESCRIPTION: This example demonstrates the correct way to implement a PowerShell function that changes the system state using the `ShouldProcess` feature. The `SupportsShouldProcess = $true` argument is included in the `CmdletBinding` attribute, which adds the `Confirm` and `WhatIf` parameters to the function.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/UseShouldProcessForStateChangingFunctions.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nfunction Set-ServiceObject\n{\n    [CmdletBinding(SupportsShouldProcess = $true)]\n    param\n    (\n        [string]\n        $Parameter1\n    )\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Secret Parameter Definition - YAML\nDESCRIPTION: This YAML snippet describes the -Secret parameter for the Set-Secret cmdlet. It specifies the type as Object and lists the supported object types (Byte[], String, SecureString, PSCredential, Hashtable).\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.SecretManagement/Set-SecretInfo.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nType: Object\nParameter Sets: ObjectParameterSet\nAliases:\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Suppressing Rules with SuppressMessageAttribute - PowerShell\nDESCRIPTION: This example demonstrates how to suppress a specific rule violation using the `.NET's SuppressMessageAttribute`. The example function `SuppressMe` is decorated with the attribute to suppress violations of the `PSProvideCommentHelp` rule. The scope of suppression is limited to the decorated script, function, or parameter.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/using-scriptanalyzer.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nfunction SuppressMe()\n{\n    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSProvideCommentHelp', '',\n        Justification='Just an example')]\n    param()\n\n    Write-Verbose -Message \"I'm making a difference!\"\n\n}\n```\n\n----------------------------------------\n\nTITLE: SecretStore Configuration Parameter: Interaction (YAML)\nDESCRIPTION: This YAML snippet documents the -Interaction parameter for the Set-SecretStoreConfiguration cmdlet. It specifies the type, parameter sets, aliases, whether it's required, position, default value, and whether it accepts pipeline input or wildcard characters. It defines whether the SecretStore prompts the user for a password.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.SecretStore/Set-SecretStoreConfiguration.md#_snippet_5\n\nLANGUAGE: YAML\nCODE:\n```\nType: Interaction\nParameter Sets: ParameterSet\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Avoiding Global Variables (Correct)\nDESCRIPTION: This code snippet demonstrates the correct approach by avoiding the use of global variables. It declares `$var1` without the `Global:` scope specifier and passes it as a parameter to the `Test-NotGlobal` function, promoting better scoping and preventing unintended side effects. No external dependencies are needed.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/AvoidGlobalVars.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n$var1 = $null\nfunction Test-NotGlobal ($var1, $var2)\n{\n    $a = $var1 + $var2\n}\n```\n\n----------------------------------------\n\nTITLE: Read-Host with AsSecureString (Correct)\nDESCRIPTION: This PowerShell snippet demonstrates the correct way to handle secure input using the `-AsSecureString` parameter of the `Read-Host` cmdlet. It directly reads the input as a SecureString, preventing it from being exposed in plain text. No additional conversion is needed in this case, enhancing security.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/AvoidUsingConvertToSecureStringWithPlainText.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n$SecureUserInput = Read-Host 'Please enter your secure code' -AsSecureString\n```\n\n----------------------------------------\n\nTITLE: Set-SecretStorePassword Syntax - Parameter Set - PowerShell\nDESCRIPTION: Shows the syntax for the Set-SecretStorePassword cmdlet including the `-NewPassword` and `-Password` parameters to set or change the store password. Requires PowerShell environment.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.SecretStore/Set-SecretStorePassword.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-SecretStorePassword -NewPassword <SecureString> [-Password <SecureString>] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Invoke Script Analyzer recursively on modules\nDESCRIPTION: This example runs Script Analyzer on all .ps1 and .psm1 files within the user's Modules directory and its subdirectories. The -Path parameter specifies the base directory, and the -Recurse parameter ensures that all subdirectories are also scanned. This provides a comprehensive analysis of all PowerShell module files within the directory structure.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/PSScriptAnalyzer/Invoke-ScriptAnalyzer.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nInvoke-ScriptAnalyzer -Path $home\\Documents\\WindowsPowerShell\\Modules -Recurse\n```\n\n----------------------------------------\n\nTITLE: Unlock-SecretVault Syntax - PowerShell\nDESCRIPTION: This snippet shows the syntax for using the `Unlock-SecretVault` cmdlet. It requires the `-Name` parameter, which specifies the name of the secret vault to unlock, and the `-Password` parameter, which takes a `SecureString` object representing the password. It also supports CommonParameters.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.SecretManagement/Unlock-SecretVault.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nUnlock-SecretVault [-Name] <String> [-Password] <SecureString> [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Display Secret Metadata - PowerShell\nDESCRIPTION: This example retrieves a specific secret named `SecretWithMetadata` and displays its metadata using `Select-Object -ExpandProperty Metadata`. The metadata includes key-value pairs showing the environment, expiration date, and group number. It also demonstrates the valid metadata types (String, DateTime, Int).\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.SecretManagement/Get-SecretInfo.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-SecretInfo -Name SecretWithMetadata | Select-Object -ExpandProperty Metadata\n```\n\n----------------------------------------\n\nTITLE: Creating Crescendo Configuration for VSSAdmin Cmdlets\nDESCRIPTION: This PowerShell script creates a Crescendo configuration for two cmdlets (`Get-VssProvider` and `Get-VssShadow`) that wrap the `VSSAdmin.exe` command-line tool.  It defines the command properties, adds examples, defines parameters and parameter sets for the `Get-VssShadow` cmdlet, and includes output handlers. It concludes by exporting the configuration to a JSON file and creates the module. The configuration requires the 'ParseProvider' and 'ParseShadow' output handler functions to be defined in the session.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/Crescendo/advanced/using-crescendo-cmdlets.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n# Create an empty array for Command object\n$CrescendoCommands = @()\n\n## Create first Crescendo command and set its properties\n$cmdlet = @{\n    Verb = 'Get'\n    Noun = 'VssProvider'\n    OriginalName = '$env:Windir/system32/vssadmin.exe'\n}\n$newCommand = New-CrescendoCommand @cmdlet\n$newCommand.OriginalCommandElements = @('list','providers')\n$newCommand.Description = 'List registered volume shadow copy providers'\n$newCommand.Usage = New-UsageInfo -usage $newCommand.Description\n$newCommand.Platform = @('Windows')\n\n### Add an example to the command\n$example = @{\n    Command = 'Get-VssProvider'\n    Description = 'Get a list of VSS Providers'\n    OriginalCommand = 'vssadmin list providers'\n}\n$newCommand.Examples += New-ExampleInfo @example\n\n### Add an Output Handler to the command\n$handler = New-OutputHandler\n$handler.ParameterSetName = 'Default'\n$handler.HandlerType = 'Function'\n$handler.Handler = 'ParseProvider'\n$newCommand.OutputHandlers += $handler\n\n## Add the command to the Commands collection of the configuration\n$CrescendoCommands += $newCommand\n\n## Create second Crescendo command and set its properties\n$cmdlet = @{\n    Verb = 'Get'\n    Noun = 'VssShadow'\n    OriginalName = '$env:Windir/system32/vssadmin.exe'\n}\n$newCommand = New-CrescendoCommand @cmdlet\n$newCommand.OriginalCommandElements = @('list','shadows')\n$newCommand.Description = 'List existing volume shadow copies. Without any options, ' +\n    'all shadow copies on the system are displayed ordered by shadow copy set. ' +\n    'Combinations of options can be used to refine the output.'\n$newCommand.Usage = New-UsageInfo -usage 'List existing volume shadow copies.'\n$newCommand.Platform = ,'Windows'\n\n### Add multiple examples to the command\n$example = @{\n    Command = 'Get-VssShadow'\n    Description = 'Get a list of VSS shadow copies'\n    OriginalCommand = 'vssadmin list shadows'\n}\n$newCommand.Examples += New-ExampleInfo @example\n$example = @{\n    Command = 'Get-VssShadow -For C:'\n    Description = 'Get a list of VSS shadow copies for volume C:'\n    OriginalCommand = 'vssadmin list shadows /For=C:'\n}\n$newCommand.Examples += New-ExampleInfo @example\n$example = @{\n    Command = \"Get-VssShadow -Shadow '{c17ebda1-5da3-4f4a-a3dc-f5920c30ed0f}\"\n    Description = 'Get a specific shadow copy'\n    OriginalCommand = 'vssadmin list shadows /Shadow={3872a791-51b6-4d10-813f-64b4beb9f935}'\n}\n$newCommand.Examples += New-ExampleInfo @example\n\n### Define the parameters and parameter sets\n$newCommand.DefaultParameterSetName = 'Default'\n\n#### Add a new parameter to the command\n$parameter = New-ParameterInfo -OriginalName '/For=' -Name 'For'\n$parameter.ParameterType = 'string'\n$parameter.ParameterSetName = @('Default','ByShadowId','BySetId')\n$parameter.NoGap = $true\n$parameter.Description = \"List the shadow copies for volume name like 'C:'\"\n$newCommand.Parameters += $parameter\n\n#### Add a new parameter to the command\n$parameter = New-ParameterInfo -OriginalName '/Shadow=' -Name 'Shadow'\n$parameter.ParameterType = 'string'\n$parameter.ParameterSetName = @('ByShadowId')\n$parameter.NoGap = $true\n$parameter.Mandatory = $true\n$parameter.Description = \"List shadow copies matching the Id in GUID format: \" +\n    \"'{XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX}'\"\n$newCommand.Parameters += $parameter\n\n#### Add a new parameter to the command\n$parameter = New-ParameterInfo -OriginalName '/Set=' -Name 'Set'\n$parameter.ParameterType = 'string'\n$parameter.ParameterSetName = @('BySetId')\n$parameter.NoGap = $true\n$parameter.Mandatory = $true\n$parameter.Description = \"List shadow copies matching the shadow set Id in GUID format: \" +\n    \"'{XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX}'\"\n$newCommand.Parameters += $parameter\n\n### Add an Output Handler to the command\n$handler = New-OutputHandler\n$handler.ParameterSetName = 'Default'\n$handler.HandlerType = 'Function'\n$handler.Handler = 'ParseShadow'\n$newCommand.OutputHandlers += $handler\n\n## Add the command to the Commands collection of the configuration\n$CrescendoCommands += $newCommand\n\n# Export the configuration to a JSON file and create the module\nExport-CrescendoCommand -command $CrescendoCommands -fileName .\\vssadmin.json\nExport-CrescendoModule -ConfigurationFile vssadmin.json -ModuleName .\\vssadmin.psm1 -Force\n```\n\n----------------------------------------\n\nTITLE: Initializing a Crescendo Command Object - PowerShell\nDESCRIPTION: This code initializes a Crescendo command object using the `New-CrescendoCommand` cmdlet. It defines the verb, noun, and original command name for the new cmdlet, and then displays all the possible property values of the newly created object. This command helps kickstart the creation of a new Crescendo cmdlet configuration.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/Crescendo/get-started/create-new-cmdlet.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n$parameters = @{\n    Verb = 'Show'\n    Noun = 'AzCmAgent'\n    OriginalName = \"c:/program files/AzureConnectedMachineAgent/azcmagent.exe\"\n}\nNew-CrescendoCommand @parameters | Format-List *\n```\n\n----------------------------------------\n\nTITLE: PowerShell FizzToolParser Function\nDESCRIPTION: This PowerShell function, `FizzToolParser`, handles the output of the `fizztool.exe` command. It checks if there are command results, converts JSON output to PowerShell objects if present. If there are no results, it retrieves errors from the error queue using `Pop-CrescendoNativeError`, filters for errors starting with 'ERROR:', and writes these errors using `Write-Error`.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/Crescendo/advanced/handling-errors.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nfunction FizzToolParser {\n    param(\n        [Parameter(Mandatory)]\n        [AllowNull()]\n        $cmdResults = ''\n    )\n\n    if ($null -ne $cmdResults) {\n        $cmdResults | Out-String | ConvertFrom-Json\n    } else {\n        Pop-CrescendoNativeError |\n            Where-Object {$_ -like 'ERROR:*'} |\n            Write-Error\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Hashtable (Case-Insensitive)\nDESCRIPTION: This snippet illustrates the correct way to create a hashtable using a literal expression `@{}`, which ensures case-insensitive key look-up in PowerShell. This is the preferred method for creating hashtables in PowerShell. The hashtable is assigned to the variable `$hashtable`. There are no dependencies.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/UseLiteralInitializerForHashtable.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n$hashtable = @{}\n```\n\n----------------------------------------\n\nTITLE: Installing SecretManagement and SecretStore modules with PowerShellGet\nDESCRIPTION: This code snippet demonstrates how to install the SecretManagement and SecretStore modules using the Install-Module cmdlet from the PowerShellGet module. It requires PowerShellGet version 2.x or later.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/SecretManagement/get-started/using-secretstore.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n# Install with PowerShellGet 2.x\nInstall-Module Microsoft.PowerShell.SecretManagement\nInstall-Module Microsoft.PowerShell.SecretStore\n```\n\n----------------------------------------\n\nTITLE: Correct use of named parameters in Get-Command\nDESCRIPTION: This example shows the correct way to use the `Get-Command` cmdlet by specifying parameter names explicitly. Using `-Noun ChildItem` and `-Module Microsoft.PowerShell.Management` makes the code more readable and less susceptible to errors caused by parameter reordering or changes in the cmdlet's definition.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/AvoidUsingPositionalParameters.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nGet-Command -Noun ChildItem -Module Microsoft.PowerShell.Management\n```\n\n----------------------------------------\n\nTITLE: Filtering By Severity (Invoke-ScriptAnalyzer, PowerShell)\nDESCRIPTION: The `-Severity` parameter allows you to filter the rule violations based on their severity level.  Valid values are `Error`, `Warning`, and `Information`. This filters the results after all rules are run.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/PSScriptAnalyzer/Invoke-ScriptAnalyzer.md#_snippet_23\n\nLANGUAGE: YAML\nCODE:\n```\nType: String[]\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: All rule violations\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Set Secret with String Value\nDESCRIPTION: This example demonstrates how to set a secret named `Secret1` with a string value using the `Set-Secret` cmdlet. It then retrieves the secret using `Get-Secret` to verify that the secret was added to the default vault.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.SecretManagement/Set-Secret.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-Secret -Name Secret1 -Secret \"SecretValue\"\nGet-Secret -Name Secret1\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nSystem.Security.SecureString\n```\n\n----------------------------------------\n\nTITLE: Listing Secret Information\nDESCRIPTION: This code snippet uses the Get-SecretInfo cmdlet to retrieve information about all secrets in the current vault, including their names, types, and the vault they are stored in.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/SecretManagement/get-started/using-secretstore.md#_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> Get-SecretInfo\n\nName       Type   VaultName\n----       ----   ---------\nTestSecret String SecretStore\n```\n\n----------------------------------------\n\nTITLE: Get-Secret with Name and Vault Parameters\nDESCRIPTION: This snippet shows the syntax for using the Get-Secret cmdlet with the Name and Vault parameters to retrieve a specific secret from a specified vault.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.SecretManagement/Get-Secret.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-Secret [-Name] <String> [[-Vault] <String>] [-AsPlainText] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Format script with .psd1 settings file - PowerShell\nDESCRIPTION: This example demonstrates formatting a PowerShell script using settings defined in a `.psd1` file.  The path to the settings file is passed to the `-Settings` parameter of the `Invoke-Formatter` cmdlet. This allows for reusable and shareable formatting configurations.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/PSScriptAnalyzer/Invoke-Formatter.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nInvoke-Formatter -ScriptDefinition $scriptDefinition -Settings /path/to/settings.psd1\n```\n\n----------------------------------------\n\nTITLE: Start AIShell Session with Specific Path - PowerShell\nDESCRIPTION: This example demonstrates how to start an AIShell session using a specific executable path. The `-PATH` parameter is used to provide the location of the `aish` executable. This allows you to run AIShell from a non-standard location or a specific version.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/AIShell/Start-AIShell.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nStart-AIShell -PATH C:\\Users\\aish.exe\n```\n\n----------------------------------------\n\nTITLE: Crescendo Configuration with Parameter Definition - JSON\nDESCRIPTION: This JSON configuration file defines a Crescendo cmdlet that includes a parameter definition. The cmdlet wraps the `azcmagent config get` command, and the `Property` parameter is mapped to the `get` argument of the original command. This example includes an output handler that converts the JSON output to PowerShell objects.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/Crescendo/get-started/create-new-cmdlet.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Verb\": \"Get\",\n    \"Noun\": \"AzCmAgentConfigProperty\",\n    \"Platform\": [\n        \"Windows\"\n    ],\n    \"OriginalCommandElements\": [\n        \"config\",\n        \"--json\"\n    ],\n    \"OriginalName\": \"c:/program files/AzureConnectedMachineAgent/azcmagent.exe\",\n    \"Description\": \" Get a configuration property's value\",\n    \"DefaultParameterSetName\": \"Default\",\n    \"Parameters\": [\n        {\n            \"OriginalName\": \"get\",\n            \"Name\": \"Property\",\n            \"ParameterType\": \"string\",\n            \"ParameterSetName\": [\n                \"Default\"\n            ],\n            \"Mandatory\": true,\n            \"Description\": \"Specify the name of the property to return\"\n        }\n    ],\n    \"OutputHandlers\": [\n        {\n            \"ParameterSetName\": \"Default\",\n            \"HandlerType\": \"Inline\",\n            \"Handler\": \"$args[0] | ConvertFrom-Json\"\n        }\n    ],\n    \"SupportsShouldProcess\": false,\n    \"SupportsTransactions\": false,\n    \"NoInvocation\": false,\n    \"Examples\": []\n}\n```\n\n----------------------------------------\n\nTITLE: DefaultVault Parameter Definition in YAML\nDESCRIPTION: This YAML snippet defines the DefaultVault parameter for the Register-SecretVault cmdlet. It indicates that if specified, the new extension vault is set as the default vault for the current user.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.SecretManagement/Register-SecretVault.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nType: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Correct Switch Parameter Definition in PowerShell\nDESCRIPTION: This code snippet showcases the correct way to define a switch parameter without a default value. The script explicitly checks if the switch parameter is present and sets it to `$false` if not.  This ensures expected switch parameter behavior.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/AvoidDefaultValueSwitchParameter.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nfunction Test-Script\n{\n    [CmdletBinding()]\n    Param\n    (\n        [String]\n        $Param1,\n\n        [switch]\n        $Switch\n    )\n\n    begin {\n        # Ensure that the $Switch is set to false if not provided\n        if (-not $PSBoundParameters.ContainsKey('Switch')) {\n            $Switch = $false\n        }\n    }\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Get Specific Secret Vault Info PowerShell\nDESCRIPTION: This example shows how to retrieve detailed information about a specific secret vault (LocalStore) using the Get-SecretVault cmdlet and then formats the output to display all properties. It requires the Microsoft.PowerShell.SecretManagement module and the specified vault to be registered. The output includes properties such as Name, ModuleName, ModulePath, Description, VaultParameters, and IsDefault.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.SecretManagement/Get-SecretVault.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-SecretVault -Name LocalStore | Format-List -Property *\n```\n\n----------------------------------------\n\nTITLE: Correct Comparison Operator Usage in PowerShell\nDESCRIPTION: This code snippet demonstrates the correct use of the `-gt` operator for 'greater than' comparison within an `if` statement in PowerShell. It shows the recommended way to compare values in PowerShell, avoiding the potential confusion with redirection operators.  This avoids unintended side effects.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/PossibleIncorrectUsageOfRedirectionOperator.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nif ($a -gt $b)\n{\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Get Secret Info by Wildcard Name - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve metadata for all secrets in registered vaults using the `Get-SecretInfo` cmdlet with a wildcard character for the `Name` parameter. It lists the name, type, and vault name for each secret in the `LocalStore` and `CredMan` vaults. It also illustrates different types that secrets can be.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.SecretManagement/Get-SecretInfo.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-SecretInfo -Name *\n```\n\n----------------------------------------\n\nTITLE: Listing and Unregistering a Secret Vault - PowerShell\nDESCRIPTION: This example shows how to list registered secret vaults, then un-register a specific vault (`LocalStore`), and verifies its removal. It also demonstrates re-registering the vault with a different name and setting it as the default.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.SecretManagement/Unregister-SecretVault.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS C:\\> Get-SecretVault\n\nVaultName  ModuleName                        IsDefaultVault\n---------  ----------                        --------------\nCredMan    Microsoft.PowerShell.CredManStore False\nLocalStore Microsoft.PowerShell.SecretStore  True\n\nPS C:\\> Unregister-SecretVault LocalStore\nPS C:\\> Get-SecretVault\n\nVaultName ModuleName                        IsDefaultVault\n--------- ----------                        --------------\nCredMan   Microsoft.PowerShell.CredManStore False\n\nPS C:\\> Get-Secret -Name Secret5\nGet-Secret: The secret Secret5 was not found.\n\nPS C:\\> Register-SecretVault -Name SecretStore -ModuleName Microsoft.PowerShell.SecretStore -DefaultVault\nPS C:\\> Get-SecretVault\n\nVaultName   ModuleName                        IsDefaultVault\n---------   ----------                        --------------\nCredMan     Microsoft.PowerShell.CredManStore False\nSecretStore Microsoft.PowerShell.SecretStore  True\n\nPS C:\\> Get-Secret -Name Secret5\nSystem.Security.SecureString\n```\n\n----------------------------------------\n\nTITLE: Handling Error Output (JSON)\nDESCRIPTION: Demonstrates how to define an output handler that uses Pop-CrescendoNativeError to retrieve and handle errors generated by the native command. The Handler is an inline scriptblock that processes each output object and then emits any captured errors using Pop-CrescendoNativeError -EmitAsError.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/Crescendo/whats-new/whats-new-in-crescendo-11.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n        \"ParameterSetName\": \"Default\",\n        \"StreamOutput\": true,\n        \"HandlerType\": \"Inline\",\n        \"Handler\": \"PROCESS { $_ } END { Pop-CrescendoNativeError -EmitAsError }\"\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Register-SecretVault Syntax in PowerShell\nDESCRIPTION: This code shows the syntax for the Register-SecretVault cmdlet, including the parameters it accepts.  It shows the parameter set, data types, and the common parameters.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.SecretManagement/Register-SecretVault.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nRegister-SecretVault [-ModuleName] <String> [[-Name] <String>] [-VaultParameters <Hashtable>]\n [-DefaultVault] [-AllowClobber] [-PassThru] [-Description <String>] [-WhatIf] [-Confirm]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Exporting JSON Schema using Export-Schema - PowerShell\nDESCRIPTION: This code snippet demonstrates how to use the `Export-Schema` cmdlet to export the JSON schema for command configuration as a PowerShell object. This cmdlet requires no input and outputs a `System.Object` representing the schema.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.Crescendo/Export-Schema.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nExport-Schema\n```\n\n----------------------------------------\n\nTITLE: Get SecretStore Configuration Example - PowerShell\nDESCRIPTION: This example demonstrates how to use `Get-SecretStoreConfiguration` to retrieve the current SecretStore configuration. The output displays the scope, authentication method, password timeout, and interaction settings.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.SecretStore/Get-SecretStoreConfiguration.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS C:\\> Get-SecretStoreConfiguration\n\n      Scope Authentication PasswordTimeout Interaction\n      ----- -------------- --------------- -----------\nCurrentUser       Password             900      Prompt\n```\n\n----------------------------------------\n\nTITLE: Remove Secret Using SecretInformation object via pipeline in PowerShell\nDESCRIPTION: This example demonstrates how to remove a secret by piping a SecretInformation object to the Remove-Secret cmdlet. It first retrieves the SecretInformation using Get-SecretInfo, then pipes that to Remove-Secret to delete the secret. Finally, it uses Get-Secret to confirm the deletion. This uses the InfoParameterSet.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.SecretManagement/Remove-Secret.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-SecretInfo -Name Secret2 -Vault CredMan | Remove-Secret\nGet-Secret -Name Secret2 -Vault CredMan\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-Secret: The secret Secret2 was not found.\n```\n\n----------------------------------------\n\nTITLE: Creating Module File From Command Help Files - PowerShell\nDESCRIPTION: This example demonstrates how to create a new module file from a folder containing command help files.  It uses Measure-PlatyPSMarkdown to find Markdown files, filters for CommandHelp filetypes, imports them using Import-MarkdownCommandHelp, and then generates the module file using New-MarkdownModuleFile.  The -Force parameter overwrites any existing file.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/New-MarkdownModuleFile.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n$mdfiles = Measure-PlatyPSMarkdown -Path .\\v2\\Microsoft.PowerShell.PlatyPS\\*.md\n$mdfiles | Where-Object Filetype -match 'CommandHelp' |\n    Import-MarkdownCommandHelp -Path {$_.FilePath} |\n    New-MarkdownModuleFile -OutputFolder .\\v2 -Force\n```\n\n----------------------------------------\n\nTITLE: Correct Parallel ForEach-Object Variable Access - PowerShell\nDESCRIPTION: This code demonstrates the correct way to access a variable from the parent scope within a parallel ForEach-Object scriptblock using the `$using:` scope modifier. This ensures that the variable is properly passed into the new runspace created by the `-Parallel` parameter.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/UseUsingScopeModifierInNewRunspaces.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n$var = 'foo'\n1..2 | ForEach-Object -Parallel { $using:var }\n```\n\n----------------------------------------\n\nTITLE: Create help from a module using New-MarkdownHelp (PowerShell)\nDESCRIPTION: This example shows how to create Markdown help files for all cmdlets within a specific module.  It first imports the PlatyPS module and then uses New-MarkdownHelp to generate Markdown files for each cmdlet in the module, storing them in the specified output folder. The -Force parameter ensures that existing files are overwritten.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/PlatyPS/New-MarkdownHelp.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS C:\\> Import-Module -Module \"PlatyPS\"\nPS C:\\> New-MarkdownHelp -Module \"PlatyPS\" -OutputFolder \".\\docs\" -Force\n\n\n    Directory: D:\\Working\\PlatyPS\\docs\n\n\nMode                LastWriteTime         Length Name\n----                -------------         ------ ----\n-a----        5/22/2016   6:54 PM           1496 Get-HelpPreview.md\n-a----        5/22/2016   6:54 PM           3208 Get-MarkdownMetadata.md\n-a----        5/22/2016   6:54 PM           3059 New-ExternalHelp.md\n-a----        5/22/2016   6:54 PM           2702 New-ExternalHelpCab.md\n-a----        5/22/2016   6:54 PM           6234 New-MarkdownHelp.md\n-a----        5/22/2016   6:54 PM           2346 Update-MarkdownHelp.md\n-a----        5/22/2016   6:54 PM           1633 Update-MarkdownHelpModule.md\n-a----        5/22/2016   6:54 PM           1630 Update-MarkdownHelpSchema.md\n```\n\n----------------------------------------\n\nTITLE: Assigning value using '-not' negation operator in PowerShell\nDESCRIPTION: This code snippet demonstrates the correct usage of the `-not` negation operator in PowerShell. It assigns the negation of `$true` to the variable `$MyVar`. This is the recommended approach by the ScriptAnalyzer rule PSAvoidExclaimOperator because it is more readable.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/AvoidExclaimOperator.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n$MyVar = -not $true\n```\n\n----------------------------------------\n\nTITLE: PassThru Parameter Definition in YAML\nDESCRIPTION: This YAML snippet defines the PassThru parameter for the Register-SecretVault cmdlet. This is a switch parameter that, when specified, makes the cmdlet return the SecretVaultInfo object for the registered vault.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.SecretManagement/Register-SecretVault.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nType: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Unlock SecretStore Vault with Get-SecretInfo - PowerShell\nDESCRIPTION: This example demonstrates unlocking the `SecretStore` vault using the `Unlock-SecretVault` cmdlet and subsequently retrieving secret information from the vault using `Get-SecretInfo` without prompting for the password.  It assumes the `$SecurePassword` variable is already populated with the correct SecureString password for the vault.  The code retrieves and displays the secret names, types, and vault names.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.SecretManagement/Unlock-SecretVault.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nUnlock-SecretVault -Name SecretStore -Password $SecurePassword\nGet-SecretInfo -Vault SecretStore\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\n```Output\nName             Type         VaultName\n----             ----         ---------\nSecret1          SecureString SecretStore\nSecret2          SecureString SecretStore\n```\n```\n\n----------------------------------------\n\nTITLE: Display contents of a MAML file using Show-HelpPreview\nDESCRIPTION: This example demonstrates how to use the `Show-HelpPreview` cmdlet to display the contents of a MAML file as it would appear when output by `Get-Help`. It uses the `-Path` parameter to specify the location of the MAML file.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/Show-HelpPreview.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nShow-HelpPreview -Path .\\Microsoft.PowerShell.PlatyPS\\Microsoft.PowerShell.PlatyPS-Help.xml\n```\n\n----------------------------------------\n\nTITLE: Generating PowerShell Module using Export-CrescendoModule\nDESCRIPTION: This snippet demonstrates how to generate a new PowerShell script module using the `Export-CrescendoModule` cmdlet. It takes a configuration file (AzCmAgent.json) and the desired module name (AzCmAgent.psm1) as input. The cmdlet generates both the module (PSM1) file and the module manifest (PSD1) file.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/Crescendo/get-started/generate-module.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nExport-CrescendoModule -ConfigurationFile AzCmAgent.json -ModuleName AzCmAgent.psm1\n```\n\n----------------------------------------\n\nTITLE: Correct: Using PSCredential Parameter in PowerShell\nDESCRIPTION: This code snippet demonstrates the recommended approach of using a `$Credential` parameter of type `PSCredential` in a PowerShell function. This allows for the secure and standardized handling of credentials. The function `Test-Script` now accepts a PSCredential object.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/AvoidUsingUsernameAndPasswordParams.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nfunction Test-Script\n{\n    [CmdletBinding()]\n    Param\n    (\n        [PSCredential]\n        $Credential\n    )\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Get-Secret with InputObject Parameter\nDESCRIPTION: This snippet shows the syntax for using the Get-Secret cmdlet with the InputObject parameter, which accepts a SecretInformation object obtained from Get-SecretInfo.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.SecretManagement/Get-Secret.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-Secret [-InputObject] <SecretInformation> [-AsPlainText] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Start AIShell Session - Basic Usage - PowerShell\nDESCRIPTION: This example demonstrates the basic usage of the `Start-AIShell` cmdlet. It starts an AIShell session using the default executable path specified in the `$env:PATH` environment variable. No specific path is provided, so the cmdlet searches the default locations.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/AIShell/Start-AIShell.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nStart-AIShell\n```\n\n----------------------------------------\n\nTITLE: Custom Rules with Default Rules - PowerShell\nDESCRIPTION: This example shows how to combine custom rules with the default rules by setting `IncludeDefaultRules` to `$true` and listing both default and custom rules in the `IncludeRules` property.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/using-scriptanalyzer.md#_snippet_15\n\nLANGUAGE: powershell\nCODE:\n```\n@{\n    CustomRulePath      = @(\n        '.\\output\\RequiredModules\\DscResource.AnalyzerRules'\n        '.\\tests\\QA\\AnalyzerRules\\SqlServerDsc.AnalyzerRules.psm1'\n    )\n\n    IncludeDefaultRules = $true\n\n    IncludeRules        = @(\n        # Default rules\n        'PSAvoidDefaultValueForMandatoryParameter'\n        'PSAvoidDefaultValueSwitchParameter'\n\n        # Custom rules\n        'Measure-*'\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Transforming a String Array to Comma-Separated String in Crescendo (JSON)\nDESCRIPTION: This code snippet demonstrates how to use the `ArgumentTransform` property in a Crescendo configuration file to transform a string array into a comma-separated string for a native command parameter. The `ArgumentTransform` scriptblock receives the string array `$v` as input and uses `-join ','` to concatenate the array elements with commas.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/Crescendo/advanced/transforming-arguments.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n\"Parameters\": [\n    {\n        \"Name\": \"ValueList\",\n        \"OriginalName\": \"--p2\",\n        \"ParameterType\": \"string[]\",\n        \"OriginalPosition\": 1,\n        \"ArgumentTransform\": \"param([string[]]$v) $v -join ','\"\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: VaultParameters Parameter Definition in YAML\nDESCRIPTION: This YAML snippet defines the VaultParameters parameter for the Register-SecretVault cmdlet. This is a hashtable containing key-value pairs used as optional parameters by the extension vault.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.SecretManagement/Register-SecretVault.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nType: Hashtable\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Invoke-Command with Hardcoded Local ComputerName (Wrong) PowerShell\nDESCRIPTION: This PowerShell function demonstrates the incorrect use of `Invoke-Command` with a hardcoded local computer name. This example highlights that even local computer names should not be hardcoded. This approach can lead to issues when the script is executed on different machines.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/AvoidUsingComputerNameHardcoded.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nFunction Invoke-MyLocalCommand ()\n{\n    Invoke-Command -Port 343 -ComputerName hardcodelocalhostname\n}\n```\n\n----------------------------------------\n\nTITLE: Suppressing rule violations using SuppressMessageAttribute\nDESCRIPTION: This example demonstrates how to suppress specific rule violations for a function using the SuppressMessageAttribute. It also shows how to use the -SuppressedOnly parameter to display only the suppressed rule violations. The attributes suppress PSAvoidUsingCmdletAliases and PSUseSingularNouns for the Get-Widgets function.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/PSScriptAnalyzer/Invoke-ScriptAnalyzer.md#_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\nfunction Get-Widgets\n{\n    [CmdletBinding()]\n    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute(\"PSUseSingularNouns\", \"\")]\n    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute(\"PSAvoidUsingCmdletAliases\", \"\", Justification=\"Resolution in progress.\")]\n    Param()\n\n    dir $pshome\n    ...\n}\n\nInvoke-ScriptAnalyzer -Path .\\Get-Widgets.ps1\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nInvoke-ScriptAnalyzer -Path .\\Get-Widgets.ps1 -SuppressedOnly\n```\n\n----------------------------------------\n\nTITLE: Correct ShouldContinue Implementation in PowerShell\nDESCRIPTION: This code snippet demonstrates the correct usage of the `ShouldContinue` method in a PowerShell function with a `$Force` parameter.  It includes a `[Switch]$Force` parameter that allows the user to bypass the `ShouldContinue` prompt.  This enables non-interactive execution scenarios.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/AvoidShouldContinueWithoutForce.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nFunction Test-ShouldContinue\n{\n    [CmdletBinding(SupportsShouldProcess=$true)]\n    Param\n    (\n        $MyString = 'blah',\n        [Switch]$Force\n    )\n\n    if ($Force -or $PsCmdlet.ShouldContinue('ShouldContinue Query', 'ShouldContinue Caption'))\n    {\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting and Unsetting the Default Secret Vault - PowerShell\nDESCRIPTION: This example demonstrates how to set a registered vault as the default vault and how to clear the default vault setting using the Set-SecretVaultDefault cmdlet. It also shows how to verify the current default vault using the Get-SecretVault cmdlet. The example includes the use of Get-SecretVault to display the IsDefaultVault status before and after setting/unsetting the default.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.SecretManagement/Set-SecretVaultDefault.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nPS C:\\> Get-SecretVault\n\nVaultName  ModuleName                        IsDefaultVault\n---------  ----------                        --------------\nCredMan    Microsoft.PowerShell.CredManStore False\nLocalStore Microsoft.PowerShell.SecretStore  True\n\nPS C:\\> Set-SecretVaultDefault -Name CredMan\nPS C:\\> Get-SecretVault\n\nVaultName  ModuleName                        IsDefaultVault\n---------  ----------                        --------------\nCredMan    Microsoft.PowerShell.CredManStore True\nLocalStore Microsoft.PowerShell.SecretStore  False\n\nPS C:\\> Set-SecretVaultDefault -ClearDefault\nPS C:\\> Get-SecretVault\n\nVaultName  ModuleName                        IsDefaultVault\n---------  ----------                        --------------\nCredMan    Microsoft.PowerShell.CredManStore False\nLocalStore Microsoft.PowerShell.SecretStore  False\n```\n\n----------------------------------------\n\nTITLE: Correct Assignment to Custom Variable - PowerShell\nDESCRIPTION: This code demonstrates correct usage by assigning the constructed error message to a custom variable named `$FinalErrorMessage` instead of the automatic variable `$Error`.  This avoids potential conflicts and ensures predictable behavior. The function `Get-CustomErrorMessage` takes an `$ErrorMessage` parameter and uses it to construct a custom error message stored in `$FinalErrorMessage`.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/AvoidAssignmentToAutomaticVariable.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nfunction Get-CustomErrorMessage($ErrorMessage){ $FinalErrorMessage = \"Error occurred: $ErrorMessage\" }\n```\n\n----------------------------------------\n\nTITLE: Invoke Script Analyzer excluding rules\nDESCRIPTION: This example shows how to run Script Analyzer while excluding certain rules from the analysis.  The -Path specifies the directory to scan, -Recurse enables scanning of subdirectories, and -ExcludeRule lists the rules to be excluded (PSAvoidUsingCmdletAliases and PSAvoidUsingInternalURLs).\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/PSScriptAnalyzer/Invoke-ScriptAnalyzer.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nInvoke-ScriptAnalyzer -Path C:\\ps-test\\MyModule -Recurse -ExcludeRule PSAvoidUsingCmdletAliases, PSAvoidUsingInternalURLs\n```\n\n----------------------------------------\n\nTITLE: Example Custom Rule Function - PowerShell\nDESCRIPTION: This comprehensive example demonstrates a custom rule function named `Measure-RequiresRunAsAdministrator` for PSScriptAnalyzer. The rule checks for the use of `#Requires -RunAsAdministrator` instead of custom methods for requiring elevated user rights. It uses `ScriptBlockAst` to parse the script and identifies potential violations.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/create-custom-rule.md#_snippet_7\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n    .SYNOPSIS\n    Uses #Requires -RunAsAdministrator instead of your own methods.\n    .DESCRIPTION\n    The #Requires statement prevents a script from running unless the Windows PowerShell\n    version, modules, snap-ins, and module and snap-in version prerequisites are met.\n    From Windows PowerShell 4.0, the #Requires statement let script developers require that\n    sessions be run with elevated user rights (run as Administrator). Script developers does\n    not need to write their own methods any more. To fix a violation of this rule, please\n    consider using #Requires -RunAsAdministrator instead of your own methods.\n    .EXAMPLE\n    Measure-RequiresRunAsAdministrator -ScriptBlockAst $ScriptBlockAst\n    .INPUTS\n    [System.Management.Automation.Language.ScriptBlockAst]\n    .OUTPUTS\n    [Microsoft.Windows.PowerShell.ScriptAnalyzer.Generic.DiagnosticRecord[]]\n    .NOTES\n    None\n#>\nfunction Measure-RequiresRunAsAdministrator\n{\n    [CmdletBinding()]\n    [OutputType([Microsoft.Windows.PowerShell.ScriptAnalyzer.Generic.DiagnosticRecord[]])]\n    Param\n    (\n        [Parameter(Mandatory = $true)]\n        [ValidateNotNullOrEmpty()]\n        [System.Management.Automation.Language.ScriptBlockAst]\n        $ScriptBlockAst\n    )\n\n    Process\n    {\n        $results = @()\n        try\n        {\n            #region Define predicates to find ASTs.\n            # Finds specific method, IsInRole.\n            [ScriptBlock]$predicate1 = {\n                param ([System.Management.Automation.Language.Ast]$Ast)\n                [bool]$returnValue = $false\n                if ($Ast -is [System.Management.Automation.Language.MemberExpressionAst])\n                {\n                    [System.Management.Automation.Language.MemberExpressionAst]$meAst = $Ast\n                    if ($meAst.Member -is [System.Management.Automation.Language.StringConstantExpressionAst])\n                    {\n                        [System.Management.Automation.Language.StringConstantExpressionAst]$sceAst = $meAst.Member\n                        if ($sceAst.Value -eq 'isinrole')\n                        {\n                            $returnValue = $true\n                        }\n                    }\n                }\n                return $returnValue\n            }\n\n            # Finds specific value, [system.security.principal.windowsbuiltinrole]::administrator.\n            [ScriptBlock]$predicate2 = {\n                param ([System.Management.Automation.Language.Ast]$Ast)\n                [bool]$returnValue = $false\n                if ($Ast -is [System.Management.Automation.Language.AssignmentStatementAst])\n                {\n                    [System.Management.Automation.Language.AssignmentStatementAst]$asAst = $Ast\n                    if ($asAst.Right.ToString() -eq '[system.security.principal.windowsbuiltinrole]::administrator')\n                    {\n                        $returnValue = $true\n                    }\n                }\n                return $returnValue\n            }\n            #endregion\n            #region Finds ASTs that match the predicates.\n\n            [System.Management.Automation.Language.Ast[]]$methodAst     = $ScriptBlockAst.FindAll($predicate1, $true)\n            [System.Management.Automation.Language.Ast[]]$assignmentAst = $ScriptBlockAst.FindAll($predicate2, $true)\n            if ($null -ne $ScriptBlockAst.ScriptRequirements)\n            {\n                if ((!$ScriptBlockAst.ScriptRequirements.IsElevationRequired) -and\n                ($methodAst.Count -ne 0) -and ($assignmentAst.Count -ne 0))\n                {\n                    $result = [Microsoft.Windows.PowerShell.ScriptAnalyzer.Generic.DiagnosticRecord]@{\n                        'Message' = $Messages.MeasureRequiresRunAsAdministrator\n                        'Extent' = $assignmentAst.Extent\n                        'RuleName' = $PSCmdlet.MyInvocation.InvocationName\n                        'Severity' = 'Information'\n                    }\n                    $results += $result\n                }\n            }\n            else\n            {\n                if (($methodAst.Count -ne 0) -and ($assignmentAst.Count -ne 0))\n                {\n                    $result = [Microsoft.Windows.PowerShell.ScriptAnalyzer.Generic.DiagnosticRecord]@{\n                        'Message' = $Messages.MeasureRequiresRunAsAdministrator\n                        'Extent' = $assignmentAst.Extent\n                        'RuleName' = $PSCmdlet.MyInvocation.InvocationName\n                        'Severity' = 'Information'\n                    }\n                    $results += $result\n                }\n            }\n            return $results\n            #endregion\n        }\n        catch\n        {\n            $PSCmdlet.ThrowTerminatingError($PSItem)\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PSUseCompatibleCmdlets Rule - PowerShell\nDESCRIPTION: This snippet shows how to configure the `PSUseCompatibleCmdlets` rule in the PSScriptAnalyzer settings file.  The `compatibility` parameter specifies which PowerShell platform(s) and OS(s) the script should be compatible with. It depends on the existence of the corresponding json files (e.g., `core-6.1.0-windows.json`) in the `Settings` directory of the `PSScriptAnalyzer` module.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/UseCompatibleCmdlets.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n@{\n    'Rules' = @{\n        'PSUseCompatibleCmdlets' = @{\n            'compatibility' = @('core-6.1.0-windows')\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Verbose Usage in PowerShell Function\nDESCRIPTION: This code snippet demonstrates the correct usage of verbose messages in a PowerShell function. It defines a function `Test-Function` with cmdlet binding and parameters.  It uses `Write-Verbose` to provide additional output. The function takes no explicit parameters. The use of `Write-Verbose` adheres to the best practice of providing user information.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/DSCUseVerboseMessageInDSCResource.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nFunction Test-Function\n{\n    [CmdletBinding()]\n    Param()\n    Write-Verbose 'Verbose output'\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Set-SecretStoreConfiguration Syntax (ParameterSet)\nDESCRIPTION: This syntax defines the ParameterSet for the Set-SecretStoreConfiguration cmdlet. It includes parameters for specifying scope, authentication, password timeout, interaction, password, and common PowerShell parameters. This parameter set provides comprehensive configuration options for the SecretStore.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.SecretStore/Set-SecretStoreConfiguration.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-SecretStoreConfiguration [-Scope <SecureStoreScope>] [-Authentication <Authenticate>]\n [-PasswordTimeout <Int32>] [-Interaction <Interaction>] [-Password <SecureString>] [-PassThru] [-WhatIf]\n [-Confirm] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Using SHA256 Hash Algorithm in PowerShell (Correct)\nDESCRIPTION: This code snippet shows the correct usage of the SHA256 hash algorithm in PowerShell. SHA256 is a more secure alternative to MD5. The `Get-FileHash` cmdlet calculates the SHA256 hash of the 'foo.txt' file.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/AvoidUsingBrokenHashAlgorithms.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nGet-FileHash foo.txt -Algorithm SHA256\n```\n\n----------------------------------------\n\nTITLE: Resetting SecretStore with PassThru\nDESCRIPTION: Demonstrates how to reset the SecretStore for the current user using the Reset-SecretStore cmdlet with the -PassThru parameter. The cmdlet prompts the user for confirmation and password input, then deletes all secrets and resets the configuration. The -PassThru parameter makes the cmdlet return the configuration after resetting.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.SecretStore/Reset-SecretStore.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS C:\\> Reset-SecretStore -PassThru\nWARNING: !!This operation will completely remove all SecretStore module secrets and reset\nconfiguration settings to default values!!\n\nReset SecretStore\nAre you sure you want to erase all secrets in SecretStore and reset configuration settings to default?\n[Y] Yes  [A] Yes to All  [N] No  [L] No to All  [S] Suspend  [?] Help (default is \"N\"): Y\nCreating a new Microsoft.PowerShell.SecretStore vault. A password is required by the current store configuration.\nEnter password:\n********\nEnter password again for verification:\n********\n\n      Scope Authentication PasswordTimeout Interaction\n      ----- -------------- --------------- -----------\nCurrentUser       Password             900      Prompt\n```\n\n----------------------------------------\n\nTITLE: Get-Secret Example 1: Retrieving a Secret\nDESCRIPTION: This example demonstrates how to retrieve a secret named `Secret1` from the `CredMan` vault. It showcases retrieving the secret as a SecureString and as plain text using the `-AsPlainText` parameter. The first command will return a SecureString object and the second returns a plain text string.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.SecretManagement/Get-Secret.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-Secret -Name Secret1 -Vault CredMan\nGet-Secret -Name Secret1 -Vault CredMan -AsPlainText\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nSystem.Security.SecureString\nPlainTextSecretString\n```\n\n----------------------------------------\n\nTITLE: Unlock SecretStore Syntax - PowerShell\nDESCRIPTION: Displays the syntax for the Unlock-SecretStore cmdlet.  It shows the required Password parameter as a SecureString, the optional PasswordTimeout parameter as an integer, and the common parameters.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.SecretStore/Unlock-SecretStore.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nUnlock-SecretStore -Password <SecureString> [-PasswordTimeout <Int32>] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Invoke-Command with Session and Using Scope - PowerShell\nDESCRIPTION: This code demonstrates the use of the `$using:` scope modifier when using `Invoke-Command` with the `-Session` parameter. A new PowerShell session is created, and the `$using:` modifier ensures that the variable `$bar` is accessible within the scriptblock executed in that session.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/UseUsingScopeModifierInNewRunspaces.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\n$bar = 'bar'\n$s = New-PSSession -ComputerName 'foo'\nInvoke-Command -Session $s -ScriptBlock { $using:bar }\n```\n\n----------------------------------------\n\nTITLE: Get-Secret Example 2: Retrieving a Secret using Pipeline\nDESCRIPTION: This example shows how to use `Get-SecretInfo` to retrieve secret information, and then pipe that object to `Get-Secret` to retrieve the actual secret as plain text.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.SecretManagement/Get-Secret.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-SecretInfo -Name Secret2 -Vault SecretStore | Get-Secret -AsPlainText\n```\n\n----------------------------------------\n\nTITLE: Exporting a Secure Password to an XML File in PowerShell\nDESCRIPTION: This snippet exports the password from a `$credential` object to an XML file, encrypting it using Windows Data Protection (DPAPI).  `Export-Clixml` serializes the `SecureString` for storage. The `$securePasswordPath` variable defines the path to the XML file where the encrypted password is saved. This approach offers a secure way to store the password on disk for later use. The password must be a SecureString object.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/SecretManagement/how-to/using-secrets-in-automation.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n$securePasswordPath = 'C:\\automation\\passwd.xml'\n$credential.Password |  Export-Clixml -Path $securePasswordPath\n```\n\n----------------------------------------\n\nTITLE: Avoid Wildcards in FunctionsToExport - PowerShell\nDESCRIPTION: Illustrates the inefficient and efficient ways to specify exported functions in a PowerShell module manifest. Avoid using `'*'` wildcard; use an explicit list of functions instead.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/UseToExportFieldsInManifest.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nFunctionsToExport = '*'\n```\n\nLANGUAGE: powershell\nCODE:\n```\nFunctionToExport = @(Get-Foo, Set-Foo)\n```\n\n----------------------------------------\n\nTITLE: Transforming PSCredential to Username/Password in Crescendo (JSON)\nDESCRIPTION: This code snippet demonstrates how to convert a `PSCredential` object into a username and password string suitable for the `net use` command.  The `ArgumentTransform` property uses an inline scriptblock to extract the username and password from the `PSCredential` object and formats them into the required string. `ArgumentTransformType` is set to `Inline`.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/Crescendo/advanced/transforming-arguments.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"$schema\": \"https://aka.ms/PowerShell/Crescendo/Schemas/2022-06\",\n    \"Commands\": [\n        {\n            \"Verb\": \"Connect\",\n            \"Noun\": \"WindowsShare\",\n            \"OriginalName\": \"NET.exe\",\n            \"Platform\": [\n                \"Windows\"\n            ],\n            \"OriginalCommandElements\": [ \"USE\" ],\n            \"Parameters\": [\n                {\n                    \"Name\": \"DriveName\",\n                    \"OriginalName\": \"\",\n                    \"DefaultValue\": \"*\",\n                    \"ParameterType\": \"string\",\n                    \"OriginalPosition\": 0\n                },\n                {\n                    \"Name\": \"Share\",\n                    \"OriginalName\": \"\",\n                    \"Mandatory\": true,\n                    \"OriginalPosition\": 1,\n                    \"ParameterType\": \"string\"\n                },\n                {\n                    \"Name\": \"Credential\",\n                    \"OriginalName\": \"\",\n                    \"ParameterType\": \"PSCredential\",\n                    \"Mandatory\": true,\n                    \"OriginalPosition\": 10,\n                    \"ArgumentTransform\": \"\\\"/USER:$($Credential.UserName)\\\";$Credential.GetNetworkCredential().Password\",\n                    \"ArgumentTransformType\": \"Inline\"\n                }\n            ]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Non-Interactive Password Change Example - PowerShell\nDESCRIPTION: Shows how to use the Set-SecretStorePassword cmdlet non-interactively by providing the current and new passwords as variables, making the script suitable for automated password changes. Requires SecureString variables named `$newPassword` and `$oldPassword` to be defined.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.SecretStore/Set-SecretStorePassword.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS C:\\> Set-SecretStorePassword -NewPassword $newPassword -Password $oldPassword\n```\n\n----------------------------------------\n\nTITLE: PowerShell Command Invocation with JSON Conversion\nDESCRIPTION: This snippet demonstrates how to invoke the `fizztool.exe` command with a specific key, pipe the output to PowerShell, and then use `ConvertFrom-Json` to transform the output string into a PowerShell object.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/Crescendo/advanced/handling-errors.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nfizztool.exe --key fizz | ConvertFrom-Json\n```\n\n----------------------------------------\n\nTITLE: Transforming Hashtable to Docker Environment Variables in Crescendo (JSON)\nDESCRIPTION: This code snippet showcases how to transform a PowerShell hashtable into a series of `--env key=value` arguments for a `docker run` command using the `ArgumentTransform` property. The scriptblock iterates through the keys of the input hashtable `$v` and formats each key-value pair into the required `--env` argument string.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/Crescendo/advanced/transforming-arguments.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"$schema\": \"https://aka.ms/PowerShell/Crescendo/Schemas/2022-06\",\n    \"Commands\": [\n        {\n            \"Verb\": \"Start\",\n            \"Noun\": \"DockerRun\",\n            \"OriginalName\": \"docker\",\n            \"OriginalCommandElements\": [\n                \"run\",\n                \"--rm\",\n                \"-it\"\n            ],\n            \"Parameters\": [\n                {\n                    \"Name\": \"Environment\",\n                    \"OriginalName\": \"\",\n                    \"ParameterType\": \"Hashtable\",\n                    \"OriginalPosition\": 0,\n                    \"ArgumentTransform\": \"param([Hashtable]$v) $v.Keys|Foreach-Object {''--env''; ''{0}={1}'' -f $_, $v[$_]}\"\n                },\n                {\n                    \"Name\": \"Image\",\n                    \"OriginalName\": \"\",\n                    \"ParameterType\": \"string\",\n                    \"DefaultValue\": \"ubuntu:latest\",\n                    \"OriginalPosition\": 10\n                }\n            ],\n            \"OutputHandlers\": [\n                {\n                    \"ParameterSetName\": \"Default\",\n                    \"HandlerType\": \"ByPass\"\n                }\n            ]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: AI Shell Chat Commands\nDESCRIPTION: This code snippet lists the default chat commands available in AI Shell, along with their descriptions and source. These commands are used to interact with the AI model, manage agents, and perform various actions within the chat session. Note that `/code post` command won't work in standalone executable.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/AIShell/get-started/aishell-standalone.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n  Name       Description                                      Source\n──────────────────────────────────────────────────────────────────────\n  /agent     Command for agent management.                    Core\n  /cls       Clear the screen.                                Core\n  /code      Command to interact with the code generated.     Core\n  /dislike   Dislike the last response and send feedback.     Core\n  /exit      Exit the interactive session.                    Core\n  /help      Show all available commands.                     Core\n  /like      Like the last response and send feedback.        Core\n  /refresh   Refresh the chat session.                        Core\n  /render    Render a markdown file, for diagnosis purpose.   Core\n  /retry     Regenerate a new response for the last query.    Core\n```\n\n----------------------------------------\n\nTITLE: Installing SecretStore and SecretManagement Modules in PowerShell\nDESCRIPTION: This snippet installs the Microsoft.PowerShell.SecretStore and Microsoft.PowerShell.SecretManagement modules from the PSGallery repository. It also imports these modules into the current PowerShell session. The `-Force` parameter is used to overwrite any existing versions of the modules. These modules provide the functionality to manage secrets within PowerShell scripts. Dependencies: PowerShellGet.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/SecretManagement/how-to/using-secrets-in-automation.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nInstall-Module -Name Microsoft.PowerShell.SecretStore -Repository PSGallery -Force\nInstall-Module -Name Microsoft.PowerShell.SecretManagement -Repository PSGallery -Force\nImport-Module Microsoft.PowerShell.SecretStore\nImport-Module Microsoft.PowerShell.SecretManagement\n```\n\n----------------------------------------\n\nTITLE: Invoke-AIShell Example\nDESCRIPTION: Demonstrates how to use the Invoke-AIShell cmdlet to send a query to the AIShell agent after starting the AIShell session. The query asks for a list of the five most CPU-intensive processes. The example depends on Start-AIShell to initialize the session.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/AIShell/Invoke-AIShell.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nStart-AIShell\nInvoke-AIShell -Query \"How do I list out the 5 most CPU intensive processes?\"\n```\n\n----------------------------------------\n\nTITLE: Deploying Azure OpenAI with Azure PowerShell\nDESCRIPTION: These Azure PowerShell commands deploy the Azure OpenAI service using a Bicep template, retrieve the endpoint URL, and list the account keys. Before running these commands, users must log in to Azure using `Connect-AzAccount` and set the subscription. Placeholders in angle brackets (`<>`) must be replaced with actual values for the resource group and account name.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/AIShell/developer/deploy-azure-openai.md#_snippet_2\n\nLANGUAGE: azurepowershell-interactive\nCODE:\n```\n$AzResourceGroupDeploymentSplat = @{\n    ResourceGroupName = '<resource group name>'\n    TemplateFile = './main.bicep'\n}\nNew-AzResourceGroupDeployment @AzResourceGroupDeploymentSplat\n\n# Get the endpoint and key of the deployment\n$AzCognitiveServicesAccountSplat = @{\n    ResourceGroupName = '<resource group name>'\n    Name = '<account name>'\n}\nGet-AzCognitiveServicesAccount @AzCognitiveServicesAccountSplat  |\n    Select-Object -Property Endpoint\n\nGet-AzCognitiveServicesAccountKey @AzCognitiveServicesAccountSplat |\n    Select-Object -Property Key1\n```\n\n----------------------------------------\n\nTITLE: Creating a Secure Password using Get-Credential in PowerShell\nDESCRIPTION: This snippet uses the `Get-Credential` cmdlet to prompt the user for a password, which is then stored as a `PSCredential` object. The `UserName` parameter is set to 'SecureStore', but its value is unimportant in this particular context. The primary purpose is to obtain a password as a `SecureString`.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/SecretManagement/how-to/using-secrets-in-automation.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> $credential = Get-Credential -UserName 'SecureStore'\n\nPowerShell credential request\nEnter your credentials.\nPassword for user SecureStore: **************\n```\n\n----------------------------------------\n\nTITLE: WhatIf Parameter Definition - YAML\nDESCRIPTION: This YAML snippet describes the -WhatIf parameter for the Set-Secret cmdlet. It is a SwitchParameter that shows what would happen if the cmdlet runs, without actually executing it.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.SecretManagement/Set-SecretInfo.md#_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nType: SwitchParameter\nParameter Sets: (All)\nAliases: wi\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Install AI Shell using installaishell.ps1 script\nDESCRIPTION: This PowerShell script uses Invoke-RestMethod to download and execute the installaishell.ps1 script from a remote location, which installs AI Shell. This method is convenient for Windows and macOS users.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/AIShell/install-aishell.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nInvoke-Expression \"& { $(Invoke-RestMethod 'https://aka.ms/install-aishell.ps1') }\"\n```\n\n----------------------------------------\n\nTITLE: Invoke Script Analyzer with custom rules\nDESCRIPTION: This example demonstrates how to use custom rules in addition to the default rules. The -Path specifies the script to analyze, -CustomRulePath specifies the directory containing custom rules, and -IncludeDefaultRules ensures that the standard rules are also included in the analysis.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/PSScriptAnalyzer/Invoke-ScriptAnalyzer.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nInvoke-ScriptAnalyzer -Path D:\\test_scripts\\Test-Script.ps1 -CustomRulePath C:\\CommunityAnalyzerRules -IncludeDefaultRules\n```\n\n----------------------------------------\n\nTITLE: Incorrect ShouldContinue Implementation in PowerShell\nDESCRIPTION: This code snippet demonstrates the incorrect usage of the `ShouldContinue` method in a PowerShell function without a `$Force` parameter. It shows a function that uses `ShouldContinue` without allowing the user to bypass the prompt.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/AvoidShouldContinueWithoutForce.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nFunction Test-ShouldContinue\n{\n    [CmdletBinding(SupportsShouldProcess=$true)]\n    Param\n    (\n        $MyString = 'blah'\n    )\n\n    if ($PsCmdlet.ShouldContinue('ShouldContinue Query', 'ShouldContinue Caption'))\n    {\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Piping Cmdlet Output with Select-Object in PowerShell\nDESCRIPTION: This snippet demonstrates how to pipe the output of the `Show-AzCmAgent` cmdlet to the `Select-Object` cmdlet to expand the `services` property. It requires that the `Show-AzCmAgent` cmdlet is available in the PowerShell session.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/Crescendo/get-started/generate-module.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nShow-AzCmAgent | Select-Object -ExpandProperty services\n```\n\n----------------------------------------\n\nTITLE: WhatIf Parameter Definition in YAML\nDESCRIPTION: This YAML snippet defines the WhatIf parameter for the Register-SecretVault cmdlet. This is a switch parameter that shows what would happen if the cmdlet were to run without actually executing it.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.SecretManagement/Register-SecretVault.md#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nType: SwitchParameter\nParameter Sets: (All)\nAliases: wi\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Import Yaml Module File to ModuleHelp Object - PowerShell\nDESCRIPTION: This example demonstrates how to import a Yaml module file using the Import-YamlModuleFile cmdlet. It takes a file path as input and outputs a structured ModuleHelp object containing the module's metadata, commands, and diagnostics.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/Import-YamlModuleFile.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nImport-YamlModuleFile .\\v2\\yaml\\Microsoft.PowerShell.PlatyPS.yml\n```\n\n----------------------------------------\n\nTITLE: DSC Class Resource: Correct Implementation (PowerShell)\nDESCRIPTION: This code snippet demonstrates the correct implementation of standard DSC functions for a class-based resource, including `Get`, `Set`, and `Test`.  The `Get` function returns an instance of the DSC Resource class (`MyDSCResource`). `Set` returns void, and `Test` returns a boolean. `$Name` is defined as a Key property.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/DSCStandardDSCFunctionsInResource.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\n[DscResource()]\nclass MyDSCResource\n{\n    [DscProperty(Key)]\n    [string] $Name\n\n    [MyDSCResource] Get()\n    {\n        ...\n    }\n\n    [void] Set()\n    {\n        ...\n    }\n\n    [bool] Test()\n    {\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Invoke Script Analyzer with a specific rule\nDESCRIPTION: This example demonstrates how to run Script Analyzer with only one specific rule enabled.  The -Path parameter specifies the module directory, and the -IncludeRule parameter limits the analysis to the PSAvoidUsingPositionalParameters rule.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/PSScriptAnalyzer/Invoke-ScriptAnalyzer.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nInvoke-ScriptAnalyzer -Path C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\Modules\\PSDiagnostics -IncludeRule PSAvoidUsingPositionalParameters\n```\n\n----------------------------------------\n\nTITLE: Get Rules by Name and Severity - PowerShell\nDESCRIPTION: This example shows how to retrieve rules based on both name patterns and severity levels. It retrieves rules containing 'Parameter' or 'Alias' in their names with either 'Error' or 'Warning' severity.  This is useful for targeting specific types of rules in a script analysis workflow.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/PSScriptAnalyzer/Get-ScriptAnalyzerRule.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\n$TestParameters = Get-ScriptAnalyzerRule -Severity Error, Warning -Name *Parameter*, *Alias*\n```\n\n----------------------------------------\n\nTITLE: Get All Script Analyzer Rules - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve all Script Analyzer rules available on the local computer. It shows the basic usage of the Get-ScriptAnalyzerRule cmdlet without any parameters, which returns all rules by default.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/PSScriptAnalyzer/Get-ScriptAnalyzerRule.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-ScriptAnalyzerRule\n```\n\n----------------------------------------\n\nTITLE: Export Crescendo Commands to Separate JSON Files - PowerShell\nDESCRIPTION: This example demonstrates how to import Crescendo Command objects from an existing JSON configuration file and then export them to separate JSON files, one file per command, into the specified target directory.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.Crescendo/Export-CrescendoCommand.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n$config = Import-CommandConfiguration C:\\projects\\vssadmin\\vssadmin.crescendo.config.json\nExport-CrescendoCommand -command $config -targetDirectory .\nGet-ChildItem\n```\n\n----------------------------------------\n\nTITLE: Set Secret with SecretInfo - PowerShell\nDESCRIPTION: This example demonstrates how to use the Set-Secret cmdlet with the SecretInfoParameterSet. It shows the syntax for setting a secret using a SecretInformation object, requiring the vault parameter. The NoClobber, WhatIf, and Confirm parameters are also shown, as well as the CommonParameters.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.SecretManagement/Set-SecretInfo.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nSet-Secret -SecretInfo <SecretInformation> [-Vault] <String> [-NoClobber] [-WhatIf] [-Confirm]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Exporting Crescendo Command Configuration - PowerShell\nDESCRIPTION: This code demonstrates how to create and export a Crescendo command configuration to a JSON file. It creates a Crescendo command object using `New-CrescendoCommand`, adds it to an array, and then exports the array to a JSON file using `Export-CrescendoCommand`. This allows for storing and reusing Crescendo configurations.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/Crescendo/get-started/create-new-cmdlet.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n$parameters = @{\n    Verb = 'Show'\n    Noun = 'AzCmAgent'\n    OriginalName = \"c:/program files/AzureConnectedMachineAgent/azcmagent.exe\"\n}\n$CrescendoCommands += New-CrescendoCommand @parameters\nExport-CrescendoCommand -command $CrescendoCommands -fileName .\\AzCmAgent.json\n```\n\n----------------------------------------\n\nTITLE: Unregistering All Secret Vaults - PowerShell\nDESCRIPTION: This example demonstrates how to un-register all registered secret vaults for the current user by piping the output of `Get-SecretVault` to `Unregister-SecretVault`.  It then verifies that no vaults are registered.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.SecretManagement/Unregister-SecretVault.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS C:\\> Get-SecretVault | Unregister-SecretVault\nPS C:\\> Get-SecretVault\n```\n\n----------------------------------------\n\nTITLE: Unlock SecretStore Example 1 - PowerShell\nDESCRIPTION: Demonstrates unlocking the SecretStore with Unlock-SecretStore after a Get-Secret command fails due to a locked vault.  It shows the user being prompted for a password and then successfully retrieving a secret after unlocking.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.SecretStore/Unlock-SecretStore.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS C:\\> Get-Secret Secret1 -Vault LocalStore\nGet-Secret: A valid password is required to access the Microsoft.PowerShell.SecretStore vault.\nGet-Secret: The secret Secret1 was not found.\n\nPS C:\\> Unlock-SecretStore\n\ncmdlet Unlock-SecretStore at command pipeline position 1\nSupply values for the following parameters:\nSecureStringPassword: *******\n\nPS C:\\> Get-Secret Secret1 -Vault LocalStore\nSystem.Security.SecureString\n```\n\n----------------------------------------\n\nTITLE: Implement basic Chat method\nDESCRIPTION: This C# code implements the initial Chat method to return a \"Hello World!\" response and handle potential OperationCanceledExceptions. It demonstrates a basic interaction with the AI Shell host.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/AIShell/developer/create-ollama-agent.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic async Task<bool> Chat(string input, IShell shell)\n{\n    // Get the shell host\n    IHost host = shell.Host;\n\n    // get the cancellation token\n    CancellationToken token = shell.CancellationToken;\n\n    try\n    {\n       host.RenderFullResponse(\"Hello World!\");\n    }\n    catch (OperationCanceledException e)\n    {\n        _text.AppendLine(e.ToString());\n\n        host.RenderFullResponse(_text.ToString());\n\n        return false;\n    }\n\n    return true;\n}\n```\n\n----------------------------------------\n\nTITLE: Scope Parameter Definition\nDESCRIPTION: YAML definition for the -Scope parameter of the Reset-SecretStore cmdlet. It specifies the type, accepted values (CurrentUser, AllUsers), requirement, position, default value (CurrentUser), pipeline input, and wildcard characters.  This parameter dictates the scope for which SecretStore is configured.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.SecretStore/Reset-SecretStore.md#_snippet_8\n\nLANGUAGE: YAML\nCODE:\n```\nType: SecureStoreScope\nParameter Sets: (All)\nAliases:\nAccepted values: CurrentUser, AllUsers\n\nRequired: False\nPosition: Named\nDefault value: CurrentUser\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Name Parameter Definition\nDESCRIPTION: Defines the `-Name` parameter for the `Get-Secret` cmdlet. It specifies the name of the secret to retrieve, and does not accept wildcard characters.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.SecretManagement/Get-Secret.md#_snippet_6\n\nLANGUAGE: YAML\nCODE:\n```\nType: String\nParameter Sets: NameParameterSet\nAliases:\n\nRequired: True\nPosition: 0\nDefault value: None\nAccept pipeline input: True (ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition for Name (YAML)\nDESCRIPTION: This YAML snippet defines the properties of the -Name parameter for the New-ParameterInfo cmdlet, including its type, parameter set, requirement, position, default value, and acceptance of pipeline input and wildcard characters.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.Crescendo/New-ParameterInfo.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: 0\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Invoke Script Analyzer on a script\nDESCRIPTION: This example shows how to run all Script Analyzer rules on a single PowerShell script file.  The -Path parameter specifies the location of the script to analyze.  No additional parameters are used, so all default rules are applied.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/PSScriptAnalyzer/Invoke-ScriptAnalyzer.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nInvoke-ScriptAnalyzer -Path C:\\Scripts\\Get-LogData.ps1\n```\n\n----------------------------------------\n\nTITLE: Correct Pipeline Input Handling in PowerShell\nDESCRIPTION: This code demonstrates the correct way to handle pipeline input in a PowerShell function. The `$Number` parameter is bound to pipeline input, and the value is accessed within the `process` block.  This ensures that each pipeline object is processed individually. Requires PowerShell environment. The input is a series of numbers piped into the `Get-Number` function, and the output is each number on a new line.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/UseProcessBlockForPipelineCommand.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nFunction Get-Number\n{\n    [CmdletBinding()]\n    Param(\n        [Parameter(ValueFromPipeline)]\n        [int]\n        $Number\n    )\n\n    process\n    {\n        $Number\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Set Secret with Object - PowerShell\nDESCRIPTION: This example demonstrates how to use the Set-Secret cmdlet with the ObjectParameterSet. It shows the syntax for setting a secret with an Object value, along with optional vault and metadata parameters. The NoClobber, WhatIf, and Confirm parameters are also shown, as well as the CommonParameters.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.SecretManagement/Set-SecretInfo.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nSet-Secret [-Name] <String> -Secret <Object> [[-Vault] <String>] [[-Metadata] <Hashtable>]\n [-NoClobber] [-WhatIf] [-Confirm] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Show-HelpPreview Syntax - LiteralPath Parameter Set\nDESCRIPTION: Defines the syntax for the Show-HelpPreview cmdlet when using the -LiteralPath parameter set.  It specifies the parameters available for this particular usage.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/Show-HelpPreview.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nShow-HelpPreview [-LiteralPath] <string[]> [-ConvertNotesToList] [-ConvertDoubleDashLists]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Authentication Parameter Definition\nDESCRIPTION: YAML definition for the -Authentication parameter. It specifies the type, accepted values (None, Password), requirement, position, default value (Password), pipeline input, and wildcard characters for the -Authentication parameter of the Reset-SecretStore cmdlet. It also includes a caution note regarding the security implications of setting Authentication to None.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.SecretStore/Reset-SecretStore.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\nType: Authenticate\nParameter Sets: (All)\nAliases:\nAccepted values: None, Password\n\nRequired: False\nPosition: Named\nDefault value: Password\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Confirm Parameter Definition\nDESCRIPTION: Defines the `-Confirm` parameter for the `Export-CrescendoModule` cmdlet.  It prompts for confirmation before running the cmdlet, is optional, and does not accept pipeline input or wildcard characters.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.Crescendo/Export-CrescendoModule.md#_snippet_8\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.Management.Automation.SwitchParameter\nParameter Sets: (All)\nAliases: cf\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Corrected Module Manifest Field Usage - PowerShell\nDESCRIPTION: This code snippet demonstrates the correct usage of the `RootModule` field in a PowerShell module manifest, replacing the deprecated `ModuleToProcess` field.  This change ensures compatibility and avoids deprecation warnings.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/AvoidUsingDeprecatedManifestFields.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nRootModule ='psscriptanalyzer'\n\nModuleVersion = '1.0'\n```\n\n----------------------------------------\n\nTITLE: Invoke-Command with ComputerName and Using Scope - PowerShell\nDESCRIPTION: This snippet showcases the correct usage of the `$using:` scope modifier when using `Invoke-Command` with the `-ComputerName` parameter. It ensures that the variable `$bar` is accessible within the scriptblock executed on the remote computer `foo`.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/UseUsingScopeModifierInNewRunspaces.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n$bar = 'bar'\nInvoke-Command -ComputerName 'foo' -ScriptBlock { $using:bar }\n```\n\n----------------------------------------\n\nTITLE: SecretInfo Parameter Definition - YAML\nDESCRIPTION: This YAML snippet describes the -SecretInfo parameter for the Set-Secret cmdlet. It specifies the type as SecretInformation and indicates that it enables copying secrets from one extension vault to another.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.SecretManagement/Set-SecretInfo.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nType: SecretInformation\nParameter Sets: SecretInfoParameterSet\nAliases:\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Correct PowerShell Module Manifest Example\nDESCRIPTION: This code snippet shows a correct PowerShell module manifest. It includes the mandatory 'ModuleVersion' key along with other metadata like author, nested modules, and exports. The presence of 'ModuleVersion' ensures that the manifest is considered valid and avoids the MissingModuleManifestField warning.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/MissingModuleManifestField.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n@{\n    ModuleVersion       = '1.0'\n    Author              = 'PowerShell Author'\n    NestedModules       = @('.\\mymodule.psm1')\n    FunctionsToExport   = '*'\n    CmdletsToExport     = '*'\n    VariablesToExport   = '*'\n}\n```\n\n----------------------------------------\n\nTITLE: Excluding Rules from Analysis (Invoke-ScriptAnalyzer, PowerShell)\nDESCRIPTION: The `-ExcludeRule` parameter omits specific rules from the Script Analyzer test. This allows users to ignore certain warnings or errors that are not relevant to their specific use case. Wildcard characters are supported for specifying rule names.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/PSScriptAnalyzer/Invoke-ScriptAnalyzer.md#_snippet_11\n\nLANGUAGE: YAML\nCODE:\n```\nType: String[]\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: All rules are included.\nAccept pipeline input: False\nAccept wildcard characters: True\n```\n\n----------------------------------------\n\nTITLE: Parameter: -CustomRulePath\nDESCRIPTION: Defines the path to a file or directory that contains custom rules. If specified, only custom rules found in the specified paths are used for the analysis. Supports wildcard characters. Requires the -IncludeDefaultRules parameter to include built-in rules.  When CustomRulePath is specified, only the custom rules found in the specified paths are used for the analysis. If `Invoke-ScriptAnalyzer` cannot find rules in the , it runs the standard rules without notice.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/PSScriptAnalyzer/Invoke-ScriptAnalyzer.md#_snippet_9\n\nLANGUAGE: YAML\nCODE:\n```\nType: String[]\nParameter Sets: (All)\nAliases: CustomizedRulePath\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: True\n```\n\n----------------------------------------\n\nTITLE: Vault Parameter Definition\nDESCRIPTION: Defines the `-Vault` parameter for the `Get-Secret` cmdlet. It specifies the name of the registered vault to retrieve the secret from.  If not specified, all registered vaults are searched.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.SecretManagement/Get-Secret.md#_snippet_7\n\nLANGUAGE: YAML\nCODE:\n```\nType: String\nParameter Sets: NameParameterSet\nAliases:\n\nRequired: False\nPosition: 1\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Analyze script with a profile definition\nDESCRIPTION: This example demonstrates how to analyze script files using a profile definition stored in a text file. The profile defines the severity levels and rules to include or exclude. The -Settings parameter specifies the path to the profile file. Conflicting parameters in the Invoke-ScriptAnalyzer command are ignored in favor of the profile settings.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/PSScriptAnalyzer/Invoke-ScriptAnalyzer.md#_snippet_7\n\nLANGUAGE: PowerShell\nCODE:\n```\n# In .\\ScriptAnalyzerProfile.txt\n@{\n    Severity = @('Error', 'Warning')\n    IncludeRules = 'PSAvoid*'\n    ExcludeRules = '*WriteHost'\n}\n\nInvoke-ScriptAnalyzer -Path $pshome\\Modules\\BitLocker -Settings .\\ScriptAnalyzerProfile.txt\n```\n\n----------------------------------------\n\nTITLE: Incorrect CmdletBinding Declaration PowerShell\nDESCRIPTION: This example shows an incorrect implementation of a PowerShell function that modifies system state but does not include the `SupportsShouldProcess` parameter in the `CmdletBinding` attribute. This prevents the function from supporting confirmation requests and WhatIf functionality.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/UseShouldProcessForStateChangingFunctions.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nfunction Set-ServiceObject\n{\n    [CmdletBinding()]\n    param\n    (\n        [string]\n        $Parameter1\n    )\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Syntax for Import-MamlHelp with Path - PowerShell\nDESCRIPTION: This code snippet shows the syntax for the Import-MamlHelp cmdlet when using the -Path parameter. The -Path parameter accepts an array of strings, allowing multiple paths to be specified. Common parameters are also supported.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/Import-MamlHelp.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nImport-MamlHelp [-Path] <string[]> [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: SecretStore Configuration Parameter: Confirm (YAML)\nDESCRIPTION: This YAML snippet documents the -Confirm parameter for the Set-SecretStoreConfiguration cmdlet. It specifies the type, parameter sets, aliases, whether it's required, position, default value, and whether it accepts pipeline input or wildcard characters. This parameter prompts for confirmation before running the cmdlet.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.SecretStore/Set-SecretStoreConfiguration.md#_snippet_10\n\nLANGUAGE: YAML\nCODE:\n```\nType: SwitchParameter\nParameter Sets: (All)\nAliases: cf\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Creating and Converting Output Handler to JSON\nDESCRIPTION: This example demonstrates how to create a new output handler object using `New-OutputHandler`, assign values to its properties, and then convert it to JSON format using `ConvertTo-Json`. The output shows the JSON representation of the created output handler.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.Crescendo/New-OutputHandler.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n$outhandler = New-OutputHandler\n$outhandler.ParameterSetName = 'Default'\n$outhandler.Handler = 'ParseShadowStorage'\n$outhandler.HandlerType = 'Function'\n$outhandler | ConvertTo-Json\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\n{\n  \"ParameterSetName\": \"Default\",\n  \"Handler\": \"ParseShadowStorage\",\n  \"HandlerType\": \"Function\",\n  \"StreamOutput\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Member Invocation PowerShell\nDESCRIPTION: This code demonstrates the correct way to access a member in PowerShell by directly specifying the property name. It accesses the 'length' property of a string object. The expected input is a string and the output is the length of the string.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/AvoidInvokingEmptyMembers.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n$MyString = 'abc'\n$MyString.('length')\n```\n\n----------------------------------------\n\nTITLE: Invoke ScriptAnalyzer with Explicit Settings - PowerShell\nDESCRIPTION: This example shows how to invoke `Invoke-ScriptAnalyzer` with a specific settings file. The `-Settings` parameter specifies the path to the `.psd1` settings file, which configures the analysis rules and severity levels.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/using-scriptanalyzer.md#_snippet_10\n\nLANGUAGE: powershell\nCODE:\n```\nInvoke-ScriptAnalyzer -Path MyScript.ps1 -Settings PSScriptAnalyzerSettings.psd1\n```\n\n----------------------------------------\n\nTITLE: Exclude Parameter from Native Command (JSON)\nDESCRIPTION: Demonstrates how to define a parameter that is not passed to the native command by setting the ExcludeAsArgument property to true. The parameter's value is then available for use within the output handler.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/Crescendo/whats-new/whats-new-in-crescendo-11.md#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n            \"Name\": \"Filter\",\n            \"ParameterType\": \"string\",\n            \"ExcludeAsArgument\": true,\n            \"Mandatory\": false,\n            \"Description\": \"Variable not sent to native app\"\n        }\n    ]\n```\n\n----------------------------------------\n\nTITLE: Correct HelpMessage Example (Valid String) PowerShell\nDESCRIPTION: This PowerShell function example demonstrates the correct usage of the `HelpMessage` attribute.  The `HelpMessage` is assigned a non-empty string, which avoids errors during function execution. The parameter `$Param` is defined with a proper `HelpMessage`. No dependencies.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/AvoidNullOrEmptyHelpMessageAttribute.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nFunction GoodFuncHelpMessage\n{\n    Param(\n        [Parameter(HelpMessage='This is helpful')]\n        [String]\n        $Param\n    )\n\n    $Param\n}\n```\n\n----------------------------------------\n\nTITLE: Convert Markdown to YAML with Encoding and Force\nDESCRIPTION: This example demonstrates how to use the `New-YamlHelp` cmdlet with specific encoding and force overwrite options. It reads Markdown help files from the `.\\docs` directory, converts them to YAML files with Unicode encoding, and stores them in the `.\\out\\yaml` directory, overwriting any existing files due to the `-Force` parameter.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/PlatyPS/New-YamlHelp.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS C:\\> New-YamlHelp -Path .\\docs -OutputFolder .\\out\\yaml -Force -Encoding ([System.Text.Encoding]::Unicode)\n```\n\n----------------------------------------\n\nTITLE: NewPassword Parameter Definition - YAML\nDESCRIPTION: Defines the `-NewPassword` parameter within the YAML schema. This parameter is of type SecureString, is required, and accepts pipeline input by value. It represents the new password for the SecretStore.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.SecretStore/Set-SecretStorePassword.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nType: SecureString\nParameter Sets: ParameterSet\nAliases:\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get SecretStore Configuration Syntax - PowerShell\nDESCRIPTION: This shows the basic syntax for the `Get-SecretStoreConfiguration` cmdlet. It accepts common parameters, but no specific parameters are required. This allows the cmdlet to retrieve the configuration without modification.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.SecretStore/Get-SecretStoreConfiguration.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-SecretStoreConfiguration [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Metadata Parameter Definition - YAML\nDESCRIPTION: This YAML snippet describes the -Metadata parameter for the Set-Secret cmdlet. It specifies the type as Hashtable, lists the allowed data types for metadata values (string, int, DateTime), and warns that metadata is not stored securely and should not contain sensitive information.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.SecretManagement/Set-SecretInfo.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nType: Hashtable\nParameter Sets: SecureStringParameterSet, ObjectParameterSet\nAliases:\n\nRequired: False\nPosition: 1\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Using Settings File (Invoke-ScriptAnalyzer, PowerShell)\nDESCRIPTION: The `-Settings` parameter allows you to provide a path to a file containing a user-defined profile or a hashtable object containing settings for ScriptAnalyzer.  Settings in the profile file take precedence over command-line arguments.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/PSScriptAnalyzer/Invoke-ScriptAnalyzer.md#_snippet_22\n\nLANGUAGE: YAML\nCODE:\n```\nType: Object\nParameter Sets: (All)\nAliases: Profile\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Configuring PSAvoidOverwritingBuiltInCmdlets Rule\nDESCRIPTION: This snippet configures the PSAvoidOverwritingBuiltInCmdlets rule to check for compatibility with PowerShell Core 6.1.0 on Windows. It sets the 'PowerShellVersion' parameter within the 'Rules' section of the PSScriptAnalyzer settings.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/AvoidOverwritingBuiltInCmdlets.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n@{\n    'Rules' = @{\n        'PSAvoidOverwritingBuiltInCmdlets' = @{\n            'PowerShellVersion' = @('core-6.1.0-windows')\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: WhatIf Parameter - YAML\nDESCRIPTION: Defines the WhatIf parameter for the Export-YamlCommandHelp cmdlet. It shows what would happen if the cmdlet runs, but the cmdlet is not actually run. This allows user to view the potential changes.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/Export-YamlCommandHelp.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Management.Automation.SwitchParameter\nParameter Sets: (All)\nAliases: wi\nAccepted values:\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: AsDictionary Parameter Definition - YAML\nDESCRIPTION: This YAML snippet defines the `-AsDictionary` parameter for the `Import-YamlCommandHelp` cmdlet. When this parameter is used, the cmdlet returns the information as an `OrderedDictionary` object instead of CommandHelp objects.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/Import-YamlCommandHelp.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.Management.Automation.SwitchParameter\nParameter Sets: (All)\nAliases:\nAccepted values:\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Updating Crescendo module help content\nDESCRIPTION: Updates the help content for the Microsoft.PowerShell.Crescendo module using the Update-Help cmdlet. The -Force parameter ensures that the latest available help content is downloaded and installed. Requires the Microsoft.PowerShell.Crescendo module to be installed.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/Crescendo/get-started/install-crescendo.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nUpdate-Help -Module Microsoft.PowerShell.Crescendo -Force\n```\n\n----------------------------------------\n\nTITLE: Creating a Crescendo Command Object and Converting to JSON - PowerShell\nDESCRIPTION: This example demonstrates how to create a new Crescendo command object using `New-CrescendoCommand` and then convert it to JSON format using `ConvertTo-Json`. The JSON output can be used to create a Crescendo configuration file.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.Crescendo/New-CrescendoCommand.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CrescendoCommand -Verb Get -Noun Something -OriginalName \"native.exe\" | ConvertTo-Json\n```\n\n----------------------------------------\n\nTITLE: Configuring openai-gpt agent settings via JSON\nDESCRIPTION: This JSON code snippet shows the configuration format for the `openai-gpt` agent.  It includes settings for the GPT model like name, description, endpoint, deployment name, model name, key, and a system prompt to guide the model's behavior. Users must replace the placeholder values in angle brackets (`<>`) with their actual Azure OpenAI deployment information. The `Active` field specifies the default GPT instance to use.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/AIShell/developer/deploy-azure-openai.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  // Declare GPT instances.\n  \"GPTs\": [\n      {\n        \"Name\": \"ps-az-gpt4\",\n        \"Description\": \"<insert description here>\",\n        \"Endpoint\": \"<insert endpoint here>\",\n        \"Deployment\": \"<insert deployment name here>\",\n        \"ModelName\": \"gpt-4\",\n        \"Key\": \"<insert key here>\",\n        \"SystemPrompt\": \"1. You are a helpful and friendly assistant with expertise in PowerShell scripting and command line.\\n2. Assume user is using the operating system `osx` unless otherwise specified.\\n3. Use the `code block` syntax in markdown to encapsulate any part in responses that is code, YAML, JSON or XML, but not table.\\n4. When encapsulating command line code, use '```powershell' if it's PowerShell command; use '```sh' if it's non-PowerShell CLI command.\\n5. When generating CLI commands, never ever break a command into multiple lines. Instead, always list all parameters and arguments of the command on the same line.\\n6. Please keep the response concise but to the point. Do not overexplain.\"\n      }\n  ],\n  // Specify the default GPT instance to use for user query.\n  // For example: \"ps-az-gpt4\"\n  \"Active\": \"ps-az-gpt4\"\n}\n```\n\n----------------------------------------\n\nTITLE: Test-SecretVault Example Usage\nDESCRIPTION: Demonstrates how to use the Test-SecretVault cmdlet to test a specific secret vault (CredMan). The -Verbose parameter is used to provide more detailed output during the test run. The example shows the expected output when the validation test succeeds.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.SecretManagement/Test-SecretVault.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS C:\\> Test-SecretVault -Name CredMan -Verbose\nVERBOSE: Invoking command Test-SecretVault on module Microsoft.PowerShell.CredManStore.Extension\nVERBOSE: Vault CredMan succeeded validation test\nTrue\n```\n\n----------------------------------------\n\nTITLE: Path Parameter Definition\nDESCRIPTION: Specifies that the `-Path` parameter requires an array of strings representing the paths to markdown files or folders used to create the external help file. The cmdlet accepts pipeline input for this parameter by property name or by value.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/PlatyPS/New-ExternalHelp.md#_snippet_7\n\nLANGUAGE: YAML\nCODE:\n```\nType: String[]\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: True\n```\n\n----------------------------------------\n\nTITLE: Including Specific Rules (Invoke-ScriptAnalyzer, PowerShell)\nDESCRIPTION: The `-IncludeRule` parameter limits the analysis to only the specified rules. This can be used to focus on specific aspects of the code or to troubleshoot issues related to particular rules. Wildcard characters are supported.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/PSScriptAnalyzer/Invoke-ScriptAnalyzer.md#_snippet_14\n\nLANGUAGE: YAML\nCODE:\n```\nType: String[]\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: All rules are included.\nAccept pipeline input: False\nAccept wildcard characters: True\n```\n\n----------------------------------------\n\nTITLE: Invoking WMI Method (Incorrect)\nDESCRIPTION: This code snippet demonstrates the incorrect usage of `Invoke-WmiMethod` to create a new process using the `Create` method of the `Win32_Process` class. It's recommended to use `Invoke-CimMethod` instead for better compatibility and adherence to WS-Management standards.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/AvoidUsingWMICmdlet.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nInvoke-WmiMethod -Class Win32_Process -Name 'Create' -ArgumentList @{ CommandLine = 'notepad.exe' }\n```\n\n----------------------------------------\n\nTITLE: Custom Rule Path Settings - PowerShell\nDESCRIPTION: This example demonstrates how to specify the paths to custom rules modules within the settings file using the `CustomRulePath` property. The specified paths can point to either a module's folder or a module script file (.psm1).\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/using-scriptanalyzer.md#_snippet_14\n\nLANGUAGE: powershell\nCODE:\n```\n@{\n    CustomRulePath      = @(\n        '.\\output\\RequiredModules\\DscResource.AnalyzerRules'\n        '.\\tests\\QA\\AnalyzerRules\\SqlServerDsc.AnalyzerRules.psm1'\n    )\n\n    IncludeRules        = @(\n        'Measure-*'\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: SecretStore Configuration Parameter: PassThru (YAML)\nDESCRIPTION: This YAML snippet documents the -PassThru parameter for the Set-SecretStoreConfiguration cmdlet. It specifies the type, parameter sets, aliases, whether it's required, position, default value, and whether it accepts pipeline input or wildcard characters. When used, it returns the SecretStore configuration after updating.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.SecretStore/Set-SecretStoreConfiguration.md#_snippet_6\n\nLANGUAGE: YAML\nCODE:\n```\nType: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Merging Markdown Help Files - PowerShell\nDESCRIPTION: This example demonstrates how to merge markdown help files for the Test-CsPhoneBootstrap cmdlet from Lync Server 2010 and Lync Server 2013 into a single markdown file. The resulting file will be located at the specified output path.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/PlatyPS/Merge-MarkdownHelp.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nMerge-MarkdownHelp -Path @('Lync Server 2010\\Test-CsPhoneBootstrap.md', 'Lync Server 2013\\Test-CsPhoneBootstrap.md') -OutputPath lync\n```\n\n----------------------------------------\n\nTITLE: Incorrect Write-Host Usage in PowerShell\nDESCRIPTION: This code snippet demonstrates the incorrect usage of `Write-Host` within a PowerShell function. `Write-Host` is intended for display purposes only and does not send output to the pipeline, making it unsuitable for returning values from functions. The function `Get-MeaningOfLife` attempts to display a message and a value using `Write-Host`.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/AvoidUsingWriteHost.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nfunction Get-MeaningOfLife\n{\n    Write-Host 'Computing the answer to the ultimate question of life, the universe and everything'\n    Write-Host 42\n}\n```\n\n----------------------------------------\n\nTITLE: Create a Parameter Object (PowerShell)\nDESCRIPTION: This example demonstrates how to use the New-ParameterInfo cmdlet to create a new parameter object with specified Name and OriginalName, and displays the object's properties.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.Crescendo/New-ParameterInfo.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n$param = New-ParameterInfo -Name ComputerName -OriginalName '--targethost'\n$param\n```\n\nLANGUAGE: powershell\nCODE:\n```\nName                            : ComputerName\nOriginalName                    : --targethost\nOriginalText                    : \nDescription                     : \nDefaultValue                    : \nDefaultMissingValue             : \nApplyToExecutable               : False\nParameterType                   : object\nAdditionalParameterAttributes   : \nMandatory                       : False\nParameterSetName                : \nAliases                         : \nPosition                        : 2147483647\nOriginalPosition                : 0\nValueFromPipeline               : False\nValueFromPipelineByPropertyName : False\nValueFromRemainingArguments     : False\nNoGap                           : False\n```\n\n----------------------------------------\n\nTITLE: Path Parameter - YAML\nDESCRIPTION: This YAML snippet defines the `-Path` parameter. It specifies a path to one or more module markdown files.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/Update-MarkdownModuleFile.md#_snippet_14\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.String\nParameter Sets: Path\nAliases:\nAccepted values:\nRequired: True\nPosition: 0\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Force Parameter Definition\nDESCRIPTION: Defines the `-Force` parameter for the `Export-CrescendoModule` cmdlet. It allows overwriting existing module files, is optional, and does not accept pipeline input or wildcard characters.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.Crescendo/Export-CrescendoModule.md#_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.Management.Automation.SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Convert Native Command Output to JSON - PowerShell\nDESCRIPTION: This snippet demonstrates how to use an OutputHandler to convert the output from a native command into JSON using `ConvertFrom-Json`. This enables PowerShell to work with the native command's output as structured data.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.Crescendo/About/about_Crescendo.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"OutputHandler\": [\n        \"ParameterSetName\": \"Default\"\n        \"Handler\": \"$args[0] | ConvertFrom-Json\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Set-SecretStoreConfiguration Example: Restore Default Configuration\nDESCRIPTION: This example demonstrates how to restore the SecretStore to its default configuration using the Set-SecretStoreConfiguration cmdlet with the -Default parameter. It includes a confirmation prompt and the resulting output showing the default settings.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.SecretStore/Set-SecretStoreConfiguration.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS C:\\> Set-SecretStoreConfiguration -Default\n\nConfirm\nAre you sure you want to perform this action?\nPerforming the operation \"Changes local store configuration\" on target \"SecretStore module local store\".\n[Y] Yes  [A] Yes to All  [N] No  [L] No to All  [S] Suspend  [?] Help (default is \"Y\"): Y\n\n      Scope Authentication PasswordTimeout Interaction\n      ----- -------------- --------------- -----------\nCurrentUser       Password             900      Prompt\n```\n\n----------------------------------------\n\nTITLE: Get-SecretVault Syntax PowerShell\nDESCRIPTION: Defines the syntax for the Get-SecretVault cmdlet, including the optional -Name parameter, which accepts a string array and supports wildcard characters. It utilizes common parameters available in PowerShell. This snippet does not execute any code but outlines how to use the cmdlet with its available options.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.SecretManagement/Get-SecretVault.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-SecretVault [[-Name] <String[]>] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Confirm Parameter - YAML\nDESCRIPTION: This YAML snippet defines the `-Confirm` parameter for the `Update-MarkdownModuleFile` cmdlet. When used, it prompts the user for confirmation before executing the cmdlet, preventing accidental changes.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/Update-MarkdownModuleFile.md#_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.Management.Automation.SwitchParameter\nParameter Sets: (All)\nAliases: cf\nAccepted values:\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Invoke Script Analyzer with specific severity and source\nDESCRIPTION: This example shows how to use the output of `Get-ScriptAnalyzerRule` to filter for specific rules based on severity and source name, then use those rules with `Invoke-ScriptAnalyzer`.  It analyzes the specified path using only rules that are of Error severity and have the PSDSC source name. Requires the get-scriptanalyzerrule to be working.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/PSScriptAnalyzer/Invoke-ScriptAnalyzer.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\n$DSCError = Get-ScriptAnalyzerRule -Severity Error | Where SourceName -eq PSDSC\n$Path = \"$home\\Documents\\WindowsPowerShell\\Modules\\MyDSCModule\"\nInvoke-ScriptAnalyzerRule -Path $Path -IncludeRule $DSCError -Recurse\n```\n\n----------------------------------------\n\nTITLE: Add members and methods to OllamaAgent\nDESCRIPTION: This C# code adds the required members and methods to the OllamaAgent class to fulfill the ILLMAgent interface's requirements. The code includes the agent's name, description, company, sample queries, legal links, chat service, and initialization logic.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/AIShell/developer/create-ollama-agent.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic sealed class OllamaAgent : ILLMAgent\n{\n    /// <summary>\n    /// The name of the agent\n    /// </summary>\n    public string Name => \"ollama\";\n\n    /// <summary>\n    /// The description of the agent to be shown at start up\n    /// </summary>\n    public string Description => \"This is an AI assistant that uses the Ollama CLI tool. Be sure to follow all prerequisites in https://aka.ms/ollama/readme\";\n\n    /// <summary>\n    /// This is the company added to `/like` and `/dislike` verbiage for who the telemetry helps.\n    /// </summary>\n    public string Company => \"Microsoft\";\n\n    /// <summary>\n    /// These are samples that are shown at start up for good questions to ask the agent\n    /// </summary>\n    public List<string> SampleQueries => [\n        \"How do I list files in a given directory?\"\n    ];\n\n    /// <summary>\n    /// These are any optional legal/additional information links you want to provide at start up\n    /// </summary>\n    public Dictionary<string, string> LegalLinks { private set; get; }\n\n    /// <summary>\n    /// This is the chat service to call the API from\n    /// </summary>\n    private OllamaChatService _chatService;\n\n    /// <summary>\n    /// A string builder to render the text at the end\n    /// </summary>\n    private StringBuilder _text;\n\n    /// <summary>\n    /// Dispose method to clean up the unmanaged resource of the chatService\n    /// </summary>\n    public void Dispose()\n    {\n        _chatService?.Dispose();\n    }\n\n    /// <summary>\n    /// Initializing function for the class when the shell registers an agent\n    /// </summary>\n    /// <param name=\"config\">Agent configuration for any configuration file and other settings</param>\n    public void Initialize(AgentConfig config)\n    {\n        _text = new StringBuilder();\n        _chatService = new OllamaChatService();\n\n        LegalLinks = new(StringComparer.OrdinalIgnoreCase)\n        {\n            [\"Ollama Docs\"] = \"https://github.com/ollama/ollama\",\n            [\"Prerequisites\"] = \"https://aka.ms/ollama/readme\"\n        };\n\n    }\n\n    /// <summary>\n    /// Get commands that an agent can register to the shell when being loaded\n    /// </summary>\n    public IEnumerable<CommandBase> GetCommands() => null;\n\n    /// <summary>\n    /// Gets the path to the setting file of the agent.\n    /// </summary>\n    public string SettingFile { private set; get; } = null;\n\n    /// <summary>\n    /// Refresh the current chat by starting a new chat session.\n    /// An agent can reset chat states in this method.\n    /// </summary>\n    public void RefreshChat() {}\n\n    /// <summary>\n    /// Gets a value indicating whether the agent accepts a specific user action feedback.\n    /// </summary>\n    /// <param name=\"action\">The user action.</param>\n    public bool CanAcceptFeedback(UserAction action) => false;\n\n    /// <summary>\n    /// A user action was taken against the last response from this agent.\n    /// </summary>\n    /// <param name=\"action\">Type of the action.</param>\n    /// <param name=\"actionPayload\"></param>\n    public void OnUserAction(UserActionPayload actionPayload) {}\n\n    /// <summary>\n    /// Main chat function that takes\n    /// </summary>\n    /// <param name=\"input\">The user input from the chat experience</param>\n    /// <param name=\"shell\">The shell that provides host functionality</param>\n    /// <returns>Task Boolean that indicates whether the query was served by the agent.</returns>\n    public async Task<bool> Chat(string input, IShell shell)\n    {\n\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Interaction Parameter Definition\nDESCRIPTION: YAML definition for the -Interaction parameter of the Reset-SecretStore cmdlet. It specifies the type, accepted values (None, Prompt), requirement, position, default value (Prompt), pipeline input, and wildcard characters.  This parameter controls whether the user is prompted for a password.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.SecretStore/Reset-SecretStore.md#_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\nType: Interaction\nParameter Sets: (All)\nAliases:\nAccepted values: None, Prompt\n\nRequired: False\nPosition: Named\nDefault value: Prompt\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Recursive Custom Rule Path (Invoke-ScriptAnalyzer, PowerShell)\nDESCRIPTION: The `-RecurseCustomRulePath` parameter allows the analyzer to find custom rules defined in subdirectories of the specified `CustomRulePath`. Without this parameter, only custom rules defined directly in the `CustomRulePath` are used.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/PSScriptAnalyzer/Invoke-ScriptAnalyzer.md#_snippet_18\n\nLANGUAGE: YAML\nCODE:\n```\nType: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Set Secret with SecureString\nDESCRIPTION: This example shows how to set a secret named `Secret2` in the `LocalStore` vault using the `Set-Secret` cmdlet.  Since no secret value is initially provided, the cmdlet prompts the user to enter a `SecureString` value. The console hides the entered string value for security.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.SecretManagement/Set-Secret.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS C:\\> Set-Secret -Name Secret2 -Vault LocalStore\n\ncmdlet Set-Secret at command pipeline position 1\nSupply values for the following parameters:\nSecureStringSecret: ***********\n\nPS C:\\> Get-Secret -Name Secret2\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nSystem.Security.SecureString\n```\n\n----------------------------------------\n\nTITLE: Crescendo Command Configuration Example - JSON\nDESCRIPTION: This is an example of a Crescendo command configuration file in JSON format.  It defines a cmdlet with a verb, noun, original command name, supported platforms, and other properties. This is a basic example that doesn't define any parameters or output handlers.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/Crescendo/get-started/create-new-cmdlet.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://aka.ms/PowerShell/Crescendo/Schemas/2022-06\",\n  \"Commands\": [\n    {\n      \"Verb\": \"Show\",\n      \"Noun\": \"AzCmAgent\",\n      \"OriginalName\": \"c:/program files/AzureConnectedMachineAgent/azcmagent.exe\",\n      \"Platform\": [\n        \"Windows\",\n        \"Linux\",\n        \"MacOS\"\n      ],\n      \"SupportsShouldProcess\": false,\n      \"SupportsTransactions\": false,\n      \"NoInvocation\": false,\n      \"Parameters\": [],\n      \"Examples\": []\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: New-ExternalHelp Syntax\nDESCRIPTION: Defines the syntax for the `New-ExternalHelp` cmdlet. It shows the parameters, including `-Path`, `-OutputPath`, `-ApplicableTag`, `-Encoding`, `-MaxAboutWidth`, `-ErrorLogFile`, `-Force`, and `-ShowProgress`, along with common parameters.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/PlatyPS/New-ExternalHelp.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-ExternalHelp -Path <String[]> -OutputPath <String> [-ApplicableTag <String[]>] [-Encoding <Encoding>]\n [-MaxAboutWidth <Int32>] [-ErrorLogFile <String>] [-Force] [-ShowProgress] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Unused Parameter Example (Wrong)\nDESCRIPTION: This PowerShell code snippet demonstrates an example of an unused parameter (`$Parameter2`) within a function definition. The `ReviewUnusedParameter` rule would flag this as a warning. `$Parameter1` is used, but `$Parameter2` is declared but never used within the function scope.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/ReviewUnusedParameter.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nfunction Test-Parameter\n{\n    Param (\n        $Parameter1,\n\n        # this parameter is never called in the function\n        $Parameter2\n    )\n\n    Get-Something $Parameter1\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Null Comparison in PowerShell\nDESCRIPTION: This example demonstrates the incorrect way to compare a variable with `$null`. The comparison operator may not function as expected when `$null` is on the right-hand side, particularly if the left-hand side is a collection. The function `Test-CompareWithNull` contains an incorrect if statement.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/PossibleIncorrectComparisonWithNull.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nfunction Test-CompareWithNull\n{\n    if ($DebugPreference -eq $null)\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: OutputFolder Parameter Definition\nDESCRIPTION: This YAML snippet defines the `-OutputFolder` parameter for the Export-MarkdownModuleFile cmdlet.  It specifies the directory where the markdown file should be saved. If the folder doesn't exist, it's created.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/Export-MarkdownModuleFile.md#_snippet_7\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\nAccepted values:\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Invoke ScriptAnalyzer for Parser Errors - PowerShell\nDESCRIPTION: This example demonstrates how to invoke PSScriptAnalyzer and display parser errors in the output. It uses `Invoke-ScriptAnalyzer` with a script definition that contains a syntax error.  The output shows the `RuleName` set to the `ErrorId` of the parser error, along with other diagnostic information.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/using-scriptanalyzer.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nInvoke-ScriptAnalyzer -ScriptDefinition '\"b\" = \"b\"; function eliminate-file () { }'\n```\n\n----------------------------------------\n\nTITLE: Invoke-Command with Environment Variable ComputerName (Correct) PowerShell\nDESCRIPTION: This PowerShell function demonstrates the correct use of `Invoke-Command` using the `$env:COMPUTERNAME` environment variable to get the local computer name.  This avoids hardcoding while still targeting the local machine. The function dynamically retrieves the computer name, making the script more portable and adaptable.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/AvoidUsingComputerNameHardcoded.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nFunction Invoke-MyLocalCommand ()\n{\n    Invoke-Command -Port 343 -ComputerName $env:COMPUTERNAME\n}\n```\n\n----------------------------------------\n\nTITLE: Using Invoke-Expression - PowerShell\nDESCRIPTION: This snippet demonstrates the use of `Invoke-Expression` to execute a string as a command. It is considered bad practice due to security vulnerabilities related to code injection when the string contains user-supplied data.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/AvoidUsingInvokeExpression.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nInvoke-Expression 'Get-Process'\n```\n\n----------------------------------------\n\nTITLE: Test-SecretVault Name Parameter Definition\nDESCRIPTION: Defines the YAML configuration for the `-Name` parameter of the `Test-SecretVault` cmdlet. This parameter allows specifying the name of vaults to test, accepting string arrays and wildcard characters. It is an optional, named parameter that accepts pipeline input both by property name and by value.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.SecretManagement/Test-SecretVault.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\nType: String[]\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: True\n```\n\n----------------------------------------\n\nTITLE: Using MD5 Hash Algorithm in PowerShell (Incorrect)\nDESCRIPTION: This code snippet demonstrates the incorrect usage of the MD5 hash algorithm in PowerShell. It's advised to avoid MD5 due to its security vulnerabilities. The `Get-FileHash` cmdlet is used to calculate the MD5 hash of the 'foo.txt' file.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/AvoidUsingBrokenHashAlgorithms.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nGet-FileHash foo.txt -Algorithm MD5\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition - HelpInfoUri - YAML\nDESCRIPTION: Defines the `-HelpInfoUri` parameter.  Allows specifying the URI used for updateable help.  If not specified, it uses the HelpInfoUri specified in the module manifest.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/New-MarkdownCommandHelp.md#_snippet_7\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\nAccepted values:\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Path Parameter Definition\nDESCRIPTION: Defines the `-Path` parameter for the `Show-HelpPreview` cmdlet. It specifies one or more paths to MAML help files. Wildcards are supported.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/Show-HelpPreview.md#_snippet_6\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.String[]\nParameter Sets: Path\nAliases:\nAccepted values:\nRequired: True\nPosition: 0\nDefault value: None\nAccept pipeline input: True (ByValue)\nAccept wildcard characters: True\n```\n\n----------------------------------------\n\nTITLE: Force Parameter Definition\nDESCRIPTION: YAML definition for the -Force parameter of the Reset-SecretStore cmdlet. It specifies the type, requirement, position, default value (False), pipeline input, and wildcard characters.  This parameter allows the user to bypass the confirmation prompt.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.SecretStore/Reset-SecretStore.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\nType: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Confirm Parameter Definition - YAML\nDESCRIPTION: This YAML snippet describes the -Confirm parameter for the Set-Secret cmdlet. It is a SwitchParameter that prompts for confirmation before running the cmdlet.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.SecretManagement/Set-SecretInfo.md#_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nType: SwitchParameter\nParameter Sets: (All)\nAliases: cf\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get-SecretInfo Syntax - PowerShell\nDESCRIPTION: This snippet shows the syntax for the Get-SecretInfo cmdlet. It takes optional Name and Vault parameters, and also supports CommonParameters. The Name parameter accepts wildcards, while the Vault parameter does not.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.SecretManagement/Get-SecretInfo.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-SecretInfo [[-Name] <String>] [[-Vault] <String>] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Update-MarkdownCommandHelp Syntax - Path\nDESCRIPTION: This PowerShell syntax block shows the usage of Update-MarkdownCommandHelp with the -Path parameter, allowing wildcard characters for specifying the markdown files to update. -NoBackup suppresses backup creation. -PassThru returns the updated object.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/Update-MarkdownCommandHelp.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nUpdate-MarkdownCommandHelp [-Path] <string[]> [-NoBackup] [-PassThru] [-WhatIf] [-Confirm]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Measure all Markdown files in a folder - PowerShell\nDESCRIPTION: This example demonstrates using the Measure-PlatyPSMarkdown cmdlet to analyze all Markdown files within a specified folder. It analyzes the files in the `.\\v2\\Microsoft.PowerShell.PlatyPS\\` directory and outputs a table showing the Title, Filetype, and Filepath of each Markdown file it measures. This command leverages the `-Path` parameter.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/Measure-PlatyPSMarkdown.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nMeasure-PlatyPSMarkdown -Path .\\v2\\Microsoft.PowerShell.PlatyPS\\*.md\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nTitle                               Filetype              Filepath\n-----                               --------              --------\nCompare-CommandHelp                 CommandHelp, V2Schema D:\\Git\\PS-Src\\platyPS\\v2docs\\v2\\Microsoft.PowerShell.PlatyPS\\Compare-CommandHelp.md\nExport-MamlCommandHelp              CommandHelp, V2Schema D:\\Git\\PS-Src\\platyPS\\v2docs\\v2\\Microsoft.PowerShell.PlatyPS\\Export-MamlCommandHelp.md\nExport-MarkdownCommandHelp          CommandHelp, V2Schema D:\\Git\\PS-Src\\platyPS\\v2docs\\v2\\Microsoft.PowerShell.PlatyPS\\Export-MarkdownCommandHelp.md\nExport-MarkdownModuleFile           CommandHelp, V2Schema D:\\Git\\PS-Src\\platyPS\\v2docs\\v2\\Microsoft.PowerShell.PlatyPS\\Export-MarkdownModuleFile.md\nExport-YamlCommandHelp              CommandHelp, V2Schema D:\\Git\\PS-Src\\platyPS\\v2docs\\v2\\Microsoft.PowerShell.PlatyPS\\Export-YamlCommandHelp.md\nExport-YamlModuleFile               CommandHelp, V2Schema D:\\Git\\PS-Src\\platyPS\\v2docs\\v2\\Microsoft.PowerShell.PlatyPS\\Export-YamlModuleFile.md\nImport-MamlHelp                     CommandHelp, V2Schema D:\\Git\\PS-Src\\platyPS\\v2docs\\v2\\Microsoft.PowerShell.PlatyPS\\Import-MamlHelp.md\nImport-MarkdownCommandHelp          CommandHelp, V2Schema D:\\Git\\PS-Src\\platyPS\\v2docs\\v2\\Microsoft.PowerShell.PlatyPS\\Import-MarkdownCommandHelp.md\nImport-MarkdownModuleFile           CommandHelp, V2Schema D:\\Git\\PS-Src\\platyPS\\v2docs\\v2\\Microsoft.PowerShell.PlatyPS\\Import-MarkdownModuleFile.md\nImport-YamlCommandHelp              CommandHelp, V2Schema D:\\Git\\PS-Src\\platyPS\\v2docs\\v2\\Microsoft.PowerShell.PlatyPS\\Import-YamlCommandHelp.md\nImport-YamlModuleFile               CommandHelp, V2Schema D:\\Git\\PS-Src\\platyPS\\v2docs\\v2\\Microsoft.PowerShell.PlatyPS\\Import-YamlModuleFile.md\nMeasure-PlatyPSMarkdown             CommandHelp, V2Schema D:\\Git\\PS-Src\\platyPS\\v2docs\\v2\\Microsoft.PowerShell.PlatyPS\\Measure-PlatyPSMarkdown.md\nMicrosoft.PowerShell.PlatyPS Module ModuleFile, V2Schema  D:\\Git\\PS-Src\\platyPS\\v2docs\\v2\\Microsoft.PowerShell.PlatyPS\\Microsoft.PowerShell.PlatyPS.md\nNew-CommandHelp                     CommandHelp, V2Schema D:\\Git\\PS-Src\\platyPS\\v2docs\\v2\\Microsoft.PowerShell.PlatyPS\\New-CommandHelp.md\nNew-MarkdownCommandHelp             CommandHelp, V2Schema D:\\Git\\PS-Src\\platyPS\\v2docs\\v2\\Microsoft.PowerShell.PlatyPS\\New-MarkdownCommandHelp.md\nNew-MarkdownModuleFile              CommandHelp, V2Schema D:\\Git\\PS-Src\\platyPS\\v2docs\\v2\\Microsoft.PowerShell.PlatyPS\\New-MarkdownModuleFile.md\nTest-MarkdownCommandHelp            CommandHelp, V2Schema D:\\Git\\PS-Src\\platyPS\\v2docs\\v2\\Microsoft.PowerShell.PlatyPS\\Test-MarkdownCommandHelp.md\nUpdate-CommandHelp                  CommandHelp, V2Schema D:\\Git\\PS-Src\\platyPS\\v2docs\\v2\\Microsoft.PowerShell.PlatyPS\\Update-CommandHelp.md\nUpdate-MarkdownCommandHelp          CommandHelp, V2Schema D:\\Git\\PS-Src\\platyPS\\v2docs\\v2\\Microsoft.PowerShell.PlatyPS\\Update-MarkdownCommandHelp.md\nUpdate-MarkdownModuleFile           CommandHelp, V2Schema D:\\Git\\PS-Src\\platyPS\\v2docs\\v2\\Microsoft.PowerShell.PlatyPS\\Update-MarkdownModuleFile.md\n```\n\n----------------------------------------\n\nTITLE: Incorrect Mandatory Parameter Definition PowerShell\nDESCRIPTION: This code snippet shows an incorrect implementation of a mandatory parameter in a PowerShell function. The parameter `$Parameter1` is marked as mandatory but also has a default value assigned. This is considered bad practice because PowerShell will prompt the user for input even if the default value is assigned, rendering the default value useless. This snippet demonstrates what to avoid when defining mandatory parameters.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/AvoidDefaultValueForMandatoryParameter.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nfunction Test\n{\n\n    [CmdletBinding()]\n    Param\n    (\n        [Parameter(Mandatory=$true)]\n        $Parameter1 = 'default Value'\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Correct DSC Resource Parameters PowerShell\nDESCRIPTION: Shows the correct implementation where all three DSC resource functions (`Get-TargetResource`, `Set-TargetResource`, and `Test-TargetResource`) define the same parameters.  The `$Name` and `$TargetResource` parameters are present in all function signatures, ensuring consistent behavior. This prevents parameter-related errors during DSC configuration.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/DSCUseIdenticalParametersForDSC.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nfunction Get-TargetResource\n{\n    [OutputType([Hashtable])]\n    param\n    (\n        [parameter(Mandatory = $true)]\n        [String]\n        $Name,\n\n        [String]\n        $TargetResource\n    )\n    ...\n}\n\nfunction Set-TargetResource\n{\n    param\n    (\n        [parameter(Mandatory = $true)]\n        [String]\n        $Name,\n\n        [String]\n        $TargetResource\n    )\n    ...\n}\n\nfunction Test-TargetResource\n{\n    [OutputType([System.Boolean])]\n    param\n    (\n        [parameter(Mandatory = $true)]\n        [String]\n        $Name,\n\n        [String]\n        $TargetResource\n    )\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Enable Exit with Error Code (Invoke-ScriptAnalyzer, PowerShell)\nDESCRIPTION: The `-EnableExit` parameter causes the PowerShell session to exit with an exit code equal to the number of error records upon completion of the script analysis. This is useful for CI/CD pipelines to indicate failure based on script errors.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/PSScriptAnalyzer/Invoke-ScriptAnalyzer.md#_snippet_10\n\nLANGUAGE: YAML\nCODE:\n```\nType: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Registering Azure Key Vault using Parameters in PowerShell\nDESCRIPTION: This example demonstrates registering an Az.KeyVault extension vault with specific parameters for connecting to an Azure Key Vault.  It shows how to pass vault parameters using a hashtable to specify the Key Vault name and Subscription ID. Requires the Az.KeyVault module to be installed.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.SecretManagement/Register-SecretVault.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n$parameters = @{\n    Name = 'Azure'\n    ModuleName = 'Az.KeyVault'\n    VaultParameters = @{\n        AZKVaultName = 'AzureKeyVault'\n        SubscriptionId = (Get-AzContext).Subscription.Id\n    }\n    DefaultVault = $true\n}\nRegister-SecretVault @parameters\nGet-SecretVault\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nName  ModuleName  IsDefaultVault\n----  ----------  --------------\nAzure Az.KeyVault True\n```\n\n----------------------------------------\n\nTITLE: Confirm Parameter (YAML)\nDESCRIPTION: Defines the -Confirm parameter in YAML, which prompts for confirmation before running the cmdlet. It is a switch parameter with aliases 'cf'.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/Update-MarkdownCommandHelp.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.Management.Automation.SwitchParameter\nParameter Sets: (All)\nAliases: cf\nAccepted values:\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Catch Block with Write-Error - PowerShell\nDESCRIPTION: Demonstrates the correct usage of a catch block in PowerShell using `Write-Error` to handle a `DivideByZeroException`.  This allows for logging the error.  No dependencies are needed. Input: An arithmetic operation that causes a divide-by-zero error. Output: An error message written to the error stream.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/AvoidUsingEmptyCatchBlock.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\ntry\n{\n    1/0\n}\ncatch [DivideByZeroException]\n{\n    Write-Error 'DivideByZeroException'\n}\n```\n\n----------------------------------------\n\nTITLE: Code Copy Subcommand\nDESCRIPTION: Describes the usage of the `/code copy` subcommand. Copies the n-th code snippet or all code snippets to the clipboard.  `n` is 1-based index. Requires the code snippet to be present.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/AIShell/how-to/aishell-reference.md#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\ncode copy [<n>] [options]\n```\n\n----------------------------------------\n\nTITLE: SecretStore Configuration Parameter: WhatIf (YAML)\nDESCRIPTION: This YAML snippet documents the -WhatIf parameter for the Set-SecretStoreConfiguration cmdlet. It specifies the type, parameter sets, aliases, whether it's required, position, default value, and whether it accepts pipeline input or wildcard characters. This parameter shows what would happen if the cmdlet ran without actually executing it.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.SecretStore/Set-SecretStoreConfiguration.md#_snippet_11\n\nLANGUAGE: YAML\nCODE:\n```\nType: SwitchParameter\nParameter Sets: (All)\nAliases: wi\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: New-ParameterInfo Syntax (PowerShell)\nDESCRIPTION: Defines the syntax for the New-ParameterInfo cmdlet, including the -Name and -OriginalName parameters, as well as the availability of CommonParameters.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.Crescendo/New-ParameterInfo.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-ParameterInfo [-Name] <String> [-OriginalName] <String> [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Reporting Summary (Invoke-ScriptAnalyzer, PowerShell)\nDESCRIPTION: The `-ReportSummary` parameter causes `Invoke-ScriptAnalyzer` to write a summary of the violations found to the host console. This provides a quick overview of the issues identified in the analyzed scripts.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/PSScriptAnalyzer/Invoke-ScriptAnalyzer.md#_snippet_19\n\nLANGUAGE: YAML\nCODE:\n```\nType: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Export CommandHelp objects to MAML - PowerShell Output\nDESCRIPTION: This represents the expected output after executing the Export-MamlCommandHelp cmdlet. It shows the directory, mode, last write time, length, and name of the generated MAML help file.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/Export-MamlCommandHelp.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nDirectory: D:\\Git\\PS-Src\\platyPS\\v2docs\\maml\n\nMode                 LastWriteTime         Length Name\n----                 -------------         ------ ----\n-a---           8/26/2024  3:18 PM         160928 Microsoft.PowerShell.PlatyPS-Help.xml\n```\n\n----------------------------------------\n\nTITLE: ConvertNotesToList Parameter Definition\nDESCRIPTION: Defines the `-ConvertNotesToList` parameter for the `Show-HelpPreview` cmdlet. This parameter formats multiple paragraph items in the **NOTES** section as single list items.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/Show-HelpPreview.md#_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.Management.Automation.SwitchParameter\nParameter Sets: (All)\nAliases:\nAccepted values:\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Correct Equality Operator Usage\nDESCRIPTION: This code snippet demonstrates the correct use of the `-eq` operator within an `if` statement to compare two variables in PowerShell.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/PossibleIncorrectUsageOfAssignmentOperator.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nif ($a -eq $b) # Compare $a with $b\n{\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: IncludeOutputFromClipboard Parameter Definition - YAML\nDESCRIPTION: This YAML code block defines the `-IncludeOutputFromClipboard` parameter for the `Resolve-Error` cmdlet. It specifies the data type, parameter set, whether it's required, its position, default value, and whether it accepts pipeline input or wildcard characters. This parameter allows including clipboard output in the error sent to AIShell.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/AIShell/Resolve-Error.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.Management.Automation.SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Export Crescendo Module and Import\nDESCRIPTION: This example shows how to export a Crescendo module using a configuration file and then import the generated module.  The `Export-CrescendoModule` cmdlet creates the module, and `Import-Module` loads it for use.  The configuration file `netsh*.json` is used as input.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.Crescendo/Export-CrescendoModule.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nExport-CrescendoModule -ModuleName netsh -ConfigurationFile netsh*.json\nImport-Module ./netsh.psm1\n```\n\n----------------------------------------\n\nTITLE: Catch Block with Throw - PowerShell\nDESCRIPTION: Demonstrates the correct usage of a catch block in PowerShell using `throw` to re-throw a `DivideByZeroException`.  This allows for propagating the error to a higher level.  No dependencies are needed. Input: An arithmetic operation that causes a divide-by-zero error. Output: An exception is re-thrown, potentially halting script execution.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/AvoidUsingEmptyCatchBlock.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\ntry\n{\n    1/0\n}\ncatch [DivideByZeroException]\n{\n    throw 'DivideByZeroException'\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Output Type for Custom Rules - PowerShell\nDESCRIPTION: This code snippet shows how to specify the output type of a custom rule function in PSScriptAnalyzer.  The output type must be `DiagnosticRecord[]`. This ensures that the rule's findings are correctly formatted for PSScriptAnalyzer to interpret.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/create-custom-rule.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n[OutputType([Microsoft.Windows.PowerShell.ScriptAnalyzer.Generic.DiagnosticRecord[]])]\n```\n\n----------------------------------------\n\nTITLE: LiteralPath Parameter Definition\nDESCRIPTION: Defines the `-LiteralPath` parameter for the `Show-HelpPreview` cmdlet. It specifies one or more paths to MAML help files. Wildcards aren't supported.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/Show-HelpPreview.md#_snippet_5\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.String[]\nParameter Sets: LiteralPath\nAliases: LP, PSPath\nAccepted values:\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: AsDictionary Parameter - YAML\nDESCRIPTION: This YAML snippet defines the `-AsDictionary` parameter for the `Import-YamlModuleFile` cmdlet. It specifies that when used, the command should return the ModuleHelp data as a dictionary object instead of a ModuleHelp object.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/Import-YamlModuleFile.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.Management.Automation.SwitchParameter\nParameter Sets: (All)\nAliases:\nAccepted values:\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Crescendo Schema Definition (JSON)\nDESCRIPTION: Defines the schema for Crescendo configuration files, specifying the structure for commands and their properties. The schema provides IntelliSense and tooltips during authoring in tools like Visual Studio Code. It includes the Commands array and the $schema definition pointing to the online resource.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/Crescendo/whats-new/whats-new-in-crescendo-11.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"$schema\": \"https://aka.ms/PowerShell/Crescendo/Schemas/2022-06\",\n   \"Commands\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Pipeline Input Handling in PowerShell\nDESCRIPTION: This code demonstrates an incorrect way to handle pipeline input in a PowerShell function.  The `$Number` parameter is bound to pipeline input, but the value is accessed directly in the function body instead of within the `process` block.  This results in only the last pipeline object being processed. Requires PowerShell environment. The input is a series of numbers piped into the `Get-Number` function, and the output is only the last number.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/UseProcessBlockForPipelineCommand.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nFunction Get-Number\n{\n    [CmdletBinding()]\n    Param(\n        [Parameter(ValueFromPipeline)]\n        [int]\n        $Number\n    )\n\n    $Number\n}\n```\n\n----------------------------------------\n\nTITLE: AlignAssignmentStatement Rule Configuration - PowerShell\nDESCRIPTION: This configuration example demonstrates how to enable the AlignAssignmentStatement rule and the CheckHashtable option within a PowerShell Script Analyzer rules configuration.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/AlignAssignmentStatement.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nRules = @{\n    PSAlignAssignmentStatement = @{\n        Enable = $true\n        CheckHashtable = $true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Example: Single Quotes for Constant String (PowerShell)\nDESCRIPTION: This snippet demonstrates the correct usage of single quotes for a constant string in PowerShell. The rule suggests this approach when the string does not contain variables or expressions. This makes the intent clearer. No dependencies.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/AvoidUsingDoubleQuotesForConstantString.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n$constantValue = 'I Love PowerShell'\n```\n\n----------------------------------------\n\nTITLE: Confirm Execution (Invoke-ScriptAnalyzer, PowerShell)\nDESCRIPTION: The `-Confirm` parameter prompts the user for confirmation before running the cmdlet. This helps to prevent accidental execution of the cmdlet with potentially unwanted parameters.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/PSScriptAnalyzer/Invoke-ScriptAnalyzer.md#_snippet_25\n\nLANGUAGE: YAML\nCODE:\n```\nType: SwitchParameter\nParameter Sets: (All)\nAliases: cf\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: YAML Parameter Definition for CabinetFilesFolder\nDESCRIPTION: This YAML snippet defines the CabinetFilesFolder parameter for the New-HelpCabinetFile cmdlet. It specifies the data type as System.String, indicates that it is a required parameter at position 0, and disallows pipeline input or wildcard characters. This parameter specifies the location of the MAML files to be packaged into the help cabinet file.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/New-HelpCabinetFile.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\nAccepted values:\nRequired: True\nPosition: 0\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Incorrect HelpMessage Examples (Null/Empty) PowerShell\nDESCRIPTION: These PowerShell function examples demonstrate incorrect usage of the `HelpMessage` attribute.  The `HelpMessage` is either assigned an empty string, a null value, or has no assignment, all of which will cause PowerShell to throw an error when the function is executed. The parameter `$Param` is defined with the incorrect `HelpMessage`. No dependencies.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/AvoidNullOrEmptyHelpMessageAttribute.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nFunction BadFuncEmptyHelpMessageEmpty\n{\n    Param(\n        [Parameter(HelpMessage='')]\n        [String]\n        $Param\n    )\n\n    $Param\n}\n\nFunction BadFuncEmptyHelpMessageNull\n{\n    Param(\n        [Parameter(HelpMessage=$null)]\n        [String]\n        $Param\n    )\n\n    $Param\n}\n\nFunction BadFuncEmptyHelpMessageNoAssignment\n{\n    Param(\n        [Parameter(HelpMessage)]\n        [String]\n        $Param\n    )\n\n    $Param\n}\n```\n\n----------------------------------------\n\nTITLE: Set-SecretStoreConfiguration Syntax (DefaultParameterSet)\nDESCRIPTION: This syntax defines the DefaultParameterSet for the Set-SecretStoreConfiguration cmdlet. It provides a simplified way to reset the SecretStore to its default configuration using the -Default parameter, along with optional parameters for password and common PowerShell parameters. It's used to restore default settings.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.SecretStore/Set-SecretStoreConfiguration.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-SecretStoreConfiguration [-Default] [-Password <SecureString>] [-PassThru] [-WhatIf] [-Confirm]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Analyze script stored as a string\nDESCRIPTION: This example demonstrates how to analyze a script that is stored as a string using the -ScriptDefinition parameter. The script definition is passed directly as a string. The FileName property of the DiagnosticRecord object is $null when using this parameter.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/PSScriptAnalyzer/Invoke-ScriptAnalyzer.md#_snippet_8\n\nLANGUAGE: PowerShell\nCODE:\n```\nInvoke-ScriptAnalyzer -ScriptDefinition \"function Get-Widgets {Write-Host 'Hello'}\"\n```\n\n----------------------------------------\n\nTITLE: Using Default Hash Algorithm in PowerShell (Correct)\nDESCRIPTION: This code snippet shows the correct usage of the `Get-FileHash` cmdlet without explicitly specifying the algorithm. By default, it uses SHA256, which is a secure option. This calculates the SHA256 hash of the 'foo.txt' file.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/AvoidUsingBrokenHashAlgorithms.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nGet-FileHash foo.txt\n```\n\n----------------------------------------\n\nTITLE: Resolve-Error Syntax - PowerShell\nDESCRIPTION: This shows the syntax for the Resolve-Error cmdlet, including the available parameters: -Agent and -IncludeOutputFromClipboard, along with the common parameters.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/AIShell/Resolve-Error.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nResolve-Error [-Agent <String>] [-IncludeOutputFromClipboard] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Agent Config Arguments & Options\nDESCRIPTION: Details the arguments and options for the `/agent config` subcommand.\nArguments: `<azure|openai-gpt>` Name of an agent.\nOptions:\n- `--editor <editor>` The editor to open the setting file in.\n- `-h`, `--help` Show help and usage information\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/AIShell/how-to/aishell-reference.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nArguments: `<azure|openai-gpt>` Name of an agent.\n\nOptions:\n\n- `--editor <editor>` The editor to open the setting file in.\n- `-h`, `--help` Show help and usage information\n```\n\n----------------------------------------\n\nTITLE: Add AIShell.Abstraction NuGet package\nDESCRIPTION: This shell command adds the AIShell.Abstraction NuGet package to the project. This package contains the ILLMAgent interface, which is essential for creating AI Shell agents.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/AIShell/developer/create-ollama-agent.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package AIShell.Abstraction --version 1.0.0-preview.2\n```\n\n----------------------------------------\n\nTITLE: Agent Config Example\nDESCRIPTION: Example usage of the `/agent config` subcommand with the `openai-gpt` agent. This will open the configuration file for the `openai-gpt` agent in the default editor, or the editor specified with the `--editor` option.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/AIShell/how-to/aishell-reference.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n/agent config openai-gpt\n```\n\n----------------------------------------\n\nTITLE: Configuring PSPlaceCloseBrace Rule in PowerShell\nDESCRIPTION: This snippet demonstrates how to configure the `PSPlaceCloseBrace` rule within PowerShell ScriptAnalyzer. It shows how to enable the rule, specify whether empty lines before close braces are allowed, indicate whether one-line blocks should be ignored, and enforce a new line after the brace. The `Enable` parameter activates the rule. `NoEmptyLineBefore` checks for empty lines before the brace. `IgnoreOneLineBlock` determines if braces in one-line blocks are ignored. `NewLineAfter` enforces a new line after the closing brace. These settings allow customization of the rule's behavior to fit specific coding styles.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/PlaceCloseBrace.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nRules = @{\n    PSPlaceCloseBrace = @{\n        Enable = $true\n        NoEmptyLineBefore = $false\n        IgnoreOneLineBlock = $true\n        NewLineAfter = $true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect DSC Resource Functions\nDESCRIPTION: Shows an incorrect implementation where the `Get-TargetResource` function is missing the mandatory `$Name` parameter, and `Set-TargetResource` and `Test-TargetResource` functions have differing parameters, violating the rule that parameters corresponding to MOF properties marked as `Key` or `Required` must be present and mandatory in all three functions. It highlights a common mistake in DSC resource development.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/DSCUseIdenticalMandatoryParametersForDSC.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nfunction Get-TargetResource\n{\n    [CmdletBinding()]\n    param\n    (\n        [Parameter(Mandatory = $true)]\n        [ValidateNotNullOrEmpty()]\n        [String]\n        $Message\n    )\n}\n\nfunction Set-TargetResource\n{\n    [CmdletBinding()]\n    param\n    (\n        [Parameter(Mandatory = $true)]\n        [ValidateNotNullOrEmpty()]\n        [String]\n        $Message,\n\n        [Parameter(Mandatory = $true)]\n        [ValidateNotNullOrEmpty()]\n        [String]\n        $Name\n    )\n}\n\nfunction Test-TargetResource\n{\n    [CmdletBinding()]\n    param\n    (\n        [Parameter(Mandatory = $true)]\n        [ValidateNotNullOrEmpty()]\n        [String]\n        $Message,\n\n        [Parameter(Mandatory = $true)]\n        [ValidateNotNullOrEmpty()]\n        [String]\n        $Name\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PSAvoidLongLines Rule in PowerShell\nDESCRIPTION: This configuration snippet demonstrates how to enable the 'PSAvoidLongLines' rule in PowerShell Script Analyzer and set the maximum allowed line length. It shows the structure for defining rules within the Script Analyzer settings. The 'Enable' parameter activates the rule, and 'MaximumLineLength' customizes the line length limit.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/AvoidLongLines.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nRules = @{\n    PSAvoidLongLines  = @{\n        Enable     = $true\n        MaximumLineLength = 120\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Argument Value Transformation - String Array Join (JSON)\nDESCRIPTION: This example shows how to transform a string array parameter by joining its elements into a single string. The ArgumentTransformType is set to \"Inline\", and the ArgumentTransform scriptblock uses the -join operator to concatenate the array elements.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/Crescendo/whats-new/whats-new-in-crescendo-11.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n        \"Name\": \"join\",\n        \"OriginalName\": \"--p2\",\n        \"ParameterType\": \"string[]\",\n        \"OriginalPosition\": 1,\n        \"ArgumentTransform\": \"param([string[]]$v) $v -join '' ''\",\n        \"ArgumentTransformType\": \"Inline\"\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Import-MarkdownModuleFile Example\nDESCRIPTION: Demonstrates how to use the Import-MarkdownModuleFile cmdlet to convert a Markdown module file. It specifies the path to the Markdown file and shows the resulting ModuleHelp object.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/Import-MarkdownModuleFile.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nImport-MarkdownModuleFile .\\v2\\Microsoft.PowerShell.PlatyPS\\Microsoft.PowerShell.PlatyPS.md\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nMetadata      : {[document type, module], [HelpInfoUri, ], [Locale, en-US], [Module Guid,\n                0bdcabef-a4b7-4a6d-bf7e-d879817ebbff]…}\nTitle         : Microsoft.PowerShell.PlatyPS Module\nModule        : Microsoft.PowerShell.PlatyPS\nModuleGuid    : 0bdcabef-a4b7-4a6d-bf7e-d879817ebbff\nDescription   : This module contains cmdlets to help with the creation help content for PowerShell commands.\nLocale        : en-US\nCommandGroups : {Microsoft.PowerShell.PlatyPS.ModuleCommandGroup}\nDiagnostics   : Microsoft.PowerShell.PlatyPS.Model.Diagnostics\n```\n\n----------------------------------------\n\nTITLE: Defining AST Parameter for Custom Rule - PowerShell\nDESCRIPTION: This code snippet illustrates how to define an Ast parameter for a custom rule function in PSScriptAnalyzer. The parameter name must end with 'Ast', and the type should be `System.Management.Automation.Language.ScriptBlockAst`.  This allows the rule to analyze the script's abstract syntax tree.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/create-custom-rule.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nParam\n(\n    [Parameter(Mandatory = $true)]\n    [ValidateNotNullOrEmpty()]\n    [System.Management.Automation.Language.ScriptBlockAst]\n    $testAst\n)\n```\n\n----------------------------------------\n\nTITLE: Creating External Help from Folder\nDESCRIPTION: This example demonstrates how to create an external help file based on the contents of the `.\\docs` folder and save it to the `out\\platyPS\\en-US` folder. This example follows the best practice of including the locale in the output folder name.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/PlatyPS/New-ExternalHelp.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS C:\\> New-ExternalHelp -Path \".\\docs\" -OutputPath \"out\\platyPS\\en-US\"\n\n    Directory: D:\\Working\\PlatyPS\\out\\platyPS\\en-US\n\n\nMode                LastWriteTime         Length Name\n----\t\t\t\t\t-------------\t\t\t--------- ----\n-a----\t\t\t5/19/2016  12:32 PM\t\t  46776 platyPS-help.xml\n```\n\n----------------------------------------\n\nTITLE: Force Parameter Definition - YAML\nDESCRIPTION: This YAML snippet defines the -Force parameter for the Export-MamlCommandHelp cmdlet. It enables overwriting the output file if it already exists.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/Export-MamlCommandHelp.md#_snippet_5\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.Management.Automation.SwitchParameter\nParameter Sets: (All)\nAliases:\nAccepted values:\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Export Crescendo Module with Force\nDESCRIPTION: This example demonstrates exporting a Crescendo module and overwriting any existing module files using the `-force` parameter.  `Export-CrescendoModule` is used with the module name `netsh` and configuration file `netsh*.json`. The `-force` parameter ensures any existing files are overwritten.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.Crescendo/Export-CrescendoModule.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nExport-CrescendoModule netsh netsh*.json -force\n```\n\n----------------------------------------\n\nTITLE: Import Command Configuration PowerShell\nDESCRIPTION: This example demonstrates how to use the `Import-CommandConfiguration` cmdlet to import a Crescendo command configuration file.  The cmdlet takes the path to the JSON file as input and returns a command object.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.Crescendo/Import-CommandConfiguration.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nImport-CommandConfiguration ifconfig.crescendo.json\n```\n\n----------------------------------------\n\nTITLE: Attempt Unlock on Non-Unlockable Vault - PowerShell\nDESCRIPTION: This example attempts to unlock the `CredMan` vault using the `Unlock-SecretVault` cmdlet, but since the `CredMan` vault doesn't support unlocking, a warning message is displayed.  This demonstrates the cmdlet's behavior when attempting to unlock a vault that does not support password unlocking. No assumptions are made about pre-existing variable values.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.SecretManagement/Unlock-SecretVault.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nUnlock-SecretVault -Name CredMan -Password $SecurePassword\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\n```Output\nWARNING: Cannot unlock extension vault 'CredMan': The vault does not support the Unlock-SecretVault\nfunction.\n```\n```\n\n----------------------------------------\n\nTITLE: Correct Assignment with Command\nDESCRIPTION: This code snippet demonstrates the correct use of the assignment operator `=` to assign the result of a command to a variable within an `if` statement. The code executes the `Do-SomethingWith` action only if the command `Get-Something` returns a value.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/PossibleIncorrectUsageOfAssignmentOperator.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nif ($a = Get-Something) # Only execute action if command returns something and assign result to variable\n{\n    Do-SomethingWith $a\n}\n```\n\n----------------------------------------\n\nTITLE: Assigning value using '!' negation operator in PowerShell\nDESCRIPTION: This code snippet demonstrates the incorrect usage of the '!' negation operator in PowerShell. It assigns the negation of `$true` to the variable `$MyVar`. The ScriptAnalyzer rule PSAvoidExclaimOperator flags this as bad practice because it is less readable than using `-not`.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/AvoidExclaimOperator.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n$MyVar = !$true\n```\n\n----------------------------------------\n\nTITLE: AllowClobber Parameter Definition in YAML\nDESCRIPTION: This YAML snippet defines the AllowClobber parameter for the Register-SecretVault cmdlet. It indicates that if specified, the cmdlet can overwrite an existing registered extension vault with the same name.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.SecretManagement/Register-SecretVault.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nType: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Configuring UseConsistentWhitespace Rule in PowerShell\nDESCRIPTION: This code snippet demonstrates how to configure the `UseConsistentWhitespace` rule in PowerShell ScriptAnalyzer. The configuration includes enabling the rule and specifying which whitespace checks to perform, such as those around inner braces, open braces, open parentheses, operators, pipes, separators, and parameters. The `CheckPipeForRedundantWhitespace` and `IgnoreAssignmentOperatorInsideHashTable` options are also demonstrated.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/UseConsistentWhitespace.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nRules = @{\n    PSUseConsistentWhitespace  = @{\n        Enable                          = $true\n        CheckInnerBrace                 = $true\n        CheckOpenBrace                  = $true\n        CheckOpenParen                  = $true\n        CheckOperator                   = $true\n        CheckPipe                       = $true\n        CheckPipeForRedundantWhitespace = $false\n        CheckSeparator                  = $true\n        CheckParameter                  = $false\n        IgnoreAssignmentOperatorInsideHashTable = $false\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Import-CommandConfiguration Syntax\nDESCRIPTION: This snippet shows the syntax for the `Import-CommandConfiguration` cmdlet. It accepts a string parameter `file` which specifies the path to the Crescendo configuration file. It also accepts common parameters.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.Crescendo/Import-CommandConfiguration.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nImport-CommandConfiguration [-file] <String> [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Update Module File with Command Help Objects - PowerShell\nDESCRIPTION: This example shows how to update a Markdown module file with CommandHelp objects. It first measures PlatyPS Markdown files, filters for CommandHelp filetypes, imports the command help, and then updates the module file.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/Update-MarkdownModuleFile.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n$mdfiles = Measure-PlatyPSMarkdown -Path .\\Microsoft.PowerShell.PlatyPS\\*.md\n$mdfiles | Where-Object Filetype -match 'CommandHelp' |\n    Import-MarkdownCommandHelp -Path {$_.FilePath} |\n    Update-MarkdownModuleFile -Path .\\Microsoft.PowerShell.PlatyPS\\Microsoft.PowerShell.PlatyPS.md\n```\n\n----------------------------------------\n\nTITLE: Invoke-WebRequest with AllowUnencryptedAuthentication (Wrong)\nDESCRIPTION: This snippet demonstrates the incorrect usage of Invoke-WebRequest with the AllowUnencryptedAuthentication parameter.  Using this parameter sends credentials over an unencrypted connection, which is a security risk. Avoid using this parameter.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/AvoidUsingAllowUnencryptedAuthentication.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nInvoke-WebRequest foo -AllowUnencryptedAuthentication\n```\n\n----------------------------------------\n\nTITLE: Configuring PSUseSingularNouns Rule in PowerShell\nDESCRIPTION: This code snippet shows the configuration options for the 'PSUseSingularNouns' rule in PowerShell ScriptAnalyzer. It allows enabling/disabling the rule and defining a list of allowed plural nouns that should be excluded from the rule. The 'Enable' parameter controls whether the rule is active, and the 'NounAllowList' specifies exceptions.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/UseSingularNouns.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nRules = @{\n    PSUseSingularNouns = @{\n        Enable           = $true\n        NounAllowList    = 'Data', 'Windows', 'Foos'\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring UseCompatibleSyntax Rule in PowerShell\nDESCRIPTION: This code snippet demonstrates how to configure the `UseCompatibleSyntax` rule within a PowerShell settings file. It enables the rule and specifies target PowerShell versions (6.0, 5.1, and 4.0) for syntax compatibility checks.  The rule identifies any syntax incompatible with these versions.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/UseCompatibleSyntax.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n@{\n    Rules = @{\n        PSUseCompatibleSyntax = @{\n            Enable = $true\n            TargetVersions = @(\n                '6.0',\n                '5.1',\n                '4.0'\n            )\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Crescendo Output Handler Definition\nDESCRIPTION: This JSON defines an output handler within Crescendo that uses `Pop-CrescendoNativeError` to retrieve errors and emits them as errors, effectively passing native command errors to the user.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/Crescendo/advanced/handling-errors.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"OutputHandlers\": [\n    {\n        \"ParameterSetName\": \"Default\",\n        \"StreamOutput\": true,\n        \"HandlerType\": \"Inline\",\n        \"Handler\": \"PROCESS { $_ } END { Pop-CrescendoNativeError -EmitAsError }\"\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Incorrect Password Parameter Declaration PowerShell\nDESCRIPTION: This code snippet shows an incorrect way to declare a password parameter in PowerShell. The $Password parameter is declared as a [string] type, which stores the password in plain text. This is a security risk because the password can be easily exposed. The CmdletBinding attribute enables cmdlet-like behavior.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/AvoidUsingPlainTextForPassword.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nfunction Test-Script\n{\n    [CmdletBinding()]\n    Param\n    (\n        [string]\n        $Password\n    )\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Update-CommandHelp - PowerShell\nDESCRIPTION: This example demonstrates how to use `Update-CommandHelp` to update CommandHelp objects from Markdown files. It filters files to include only CommandHelp types, applies the update based on the file path, and then shows the count of updated CommandHelp objects.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/Update-CommandHelp.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n$mdfiles = Measure-PlatyPSMarkdown -Path .\\v1\\Microsoft.PowerShell.PlatyPS\\*.md\n$cmdobj = $mdfiles | Where-Object Filetype -match 'CommandHelp' |\n    Update-CommandHelp -Path {$_.FilePath}\n$cmdobj.count\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\n19\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Secret as Plain Text\nDESCRIPTION: This code retrieves the secret named 'TestSecret' and displays it as plain text using the Get-Secret cmdlet with the -AsPlainText switch.  This is useful for verifying the secret's value but should be used with caution due to security implications.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/SecretManagement/get-started/using-secretstore.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> Get-Secret -Name TestSecret -AsPlainText\nTestSecretPassword\n```\n\n----------------------------------------\n\nTITLE: Format script with default settings - PowerShell\nDESCRIPTION: This example demonstrates how to format a PowerShell script using the `Invoke-Formatter` cmdlet with the default settings. It defines a script as a string, and then passes it to `Invoke-Formatter`. The output is the formatted version of the script.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/PSScriptAnalyzer/Invoke-Formatter.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n$scriptDefinition = @'\nfunction foo {\n\"hello\"\n  }\n'@\n\nInvoke-Formatter -ScriptDefinition $scriptDefinition\n```\n\n----------------------------------------\n\nTITLE: Defining a function with default scope in PowerShell\nDESCRIPTION: This code snippet demonstrates the correct way of defining a function within a module, using the module scope implicitly. By not specifying a scope, the function will be scoped to the module. This avoids potential name collisions with functions in other scopes.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/AvoidGlobalFunctions.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nfunction functionName {}\n```\n\n----------------------------------------\n\nTITLE: Define ConvertDoubleDashLists Parameter (YAML)\nDESCRIPTION: Defines the `-ConvertDoubleDashLists` parameter, indicating whether to convert double-hyphen list bullets into single-hyphen bullets. It applies to the 'FromMaml' parameter set.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/PlatyPS/New-MarkdownHelp.md#_snippet_8\n\nLANGUAGE: YAML\nCODE:\n```\nType: SwitchParameter\nParameter Sets: FromMaml\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Incorrect DSC Resource Parameters PowerShell\nDESCRIPTION: Demonstrates an incorrect implementation where the `Get-TargetResource`, `Set-TargetResource` and `Test-TargetResource` functions do not have identical parameters.  Specifically, `Set-TargetResource` and `Test-TargetResource` are missing the `$TargetResource` parameter defined in `Get-TargetResource`. This inconsistency will cause errors during DSC configuration.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/DSCUseIdenticalParametersForDSC.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nfunction Get-TargetResource\n{\n    [OutputType([Hashtable])]\n    param\n    (\n        [parameter(Mandatory = $true)]\n        [String]\n        $Name,\n\n        [String]\n        $TargetResource\n    )\n    ...\n}\n\nfunction Set-TargetResource\n{\n    param\n    (\n        [parameter(Mandatory = $true)]\n        [String]\n        $Name\n    )\n    ...\n}\n\nfunction Test-TargetResource\n{\n    [OutputType([System.Boolean])]\n    param\n    (\n        [parameter(Mandatory = $true)]\n        [String]\n        $Name\n    )\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: SecretStore Configuration Parameter: Scope (YAML)\nDESCRIPTION: This YAML snippet documents the -Scope parameter for the Set-SecretStoreConfiguration cmdlet. It specifies the type, parameter sets, aliases, accepted values, whether it's required, position, default value, and whether it accepts pipeline input or wildcard characters. It defines the context for the SecretStore configuration.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.SecretStore/Set-SecretStoreConfiguration.md#_snippet_9\n\nLANGUAGE: YAML\nCODE:\n```\nType: SecureStoreScope\nParameter Sets: ParameterSet\nAliases:\nAccepted values: CurrentUser, AllUsers\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Create help from MAML file using New-MarkdownHelp (PowerShell)\nDESCRIPTION: This example demonstrates how to create Markdown help files from existing MAML (.xml) help files. It uses the New-MarkdownHelp cmdlet with the -MamlFile parameter to specify the path to the MAML file and the -OutputFolder parameter to define the destination directory for the generated Markdown files. The example creates Markdown files for cmdlets in the PSReadLine module.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/PlatyPS/New-MarkdownHelp.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS C:\\> New-MarkdownHelp -OutputFolder \"D:\\PSReadLine\\docs\" -MamlFile 'C:\\Program Files\\WindowsPowerShell\\Modules\\PSReadLine\\1.1\\en-US\\Microsoft.PowerShell.PSReadLine.dll-help.xml'\n\n    Directory: D:\\PSReadLine\\docs\n\n\nMode                LastWriteTime         Length Name\n----                -------------         ------ ----\n-a----        5/22/2016   6:56 PM           7443 Get-PSReadLineKeyHandler.md\n-a----        5/22/2016   6:56 PM           3586 Get-PSReadLineOption.md\n-a----        5/22/2016   6:56 PM           1549 Remove-PSReadLineKeyHandler.md\n-a----        5/22/2016   6:56 PM           5947 Set-PSReadLineKeyHandler.md\n-a----        5/22/2016   6:56 PM          15320 Set-PSReadLineOption.md\n```\n\n----------------------------------------\n\nTITLE: Correct DSC Resource Functions\nDESCRIPTION: Shows the correct implementation where all three functions (`Get-TargetResource`, `Set-TargetResource`, and `Test-TargetResource`) define the same mandatory parameters `$Message` and `$Name`.  This adheres to the DSC rule of consistent mandatory parameters across the Get/Set/Test functions when a property is marked as `Key` or `Required` in the MOF file.  Ensures proper DSC resource behavior.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/DSCUseIdenticalMandatoryParametersForDSC.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nfunction Get-TargetResource\n{\n    [CmdletBinding()]\n    param\n    (\n        [Parameter(Mandatory = $true)]\n        [ValidateNotNullOrEmpty()]\n        [String]\n        $Message,\n\n        [Parameter(Mandatory = $true)]\n        [ValidateNotNullOrEmpty()]\n        [String]\n        $Name\n    )\n}\n\nfunction Set-TargetResource\n{\n    [CmdletBinding()]\n    param\n    (\n        [Parameter(Mandatory = $true)]\n        [ValidateNotNullOrEmpty()]\n        [String]\n        $Message,\n\n        [Parameter(Mandatory = $true)]\n        [ValidateNotNullOrEmpty()]\n        [String]\n        $Name\n    )\n}\n\nfunction Test-TargetResource\n{\n    [CmdletBinding()]\n    param\n    (\n        [Parameter(Mandatory = $true)]\n        [ValidateNotNullOrEmpty()]\n        [String]\n        $Message,\n\n        [Parameter(Mandatory = $true)]\n        [ValidateNotNullOrEmpty()]\n        [String]\n        $Name\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect: Username and Password Parameters in PowerShell\nDESCRIPTION: This code snippet demonstrates the incorrect approach of using separate `$Username` and `$Password` parameters in a PowerShell function. This method is discouraged due to security concerns and lack of standardization. The function `Test-Script` accepts a string for the username and a secure string for the password.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/AvoidUsingUsernameAndPasswordParams.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nfunction Test-Script\n{\n    [CmdletBinding()]\n    Param\n    (\n        [String]\n        $Username,\n        [SecureString]\n        $Password\n    )\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Set Secret with Metadata (Error)\nDESCRIPTION: This example shows the attempt to set a secret named `PublishSecret` in the `LocalStore2` vault with extra metadata. Since vault `LocalStore2` doesn't support secret metadata, the operation results in an error.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.SecretManagement/Set-Secret.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\n$Metadata = @{ Expiration = ([datetime]::new(2022, 5, 1)) }\nSet-Secret -Name PublishSecret -Secret $targetToken -Vault LocalStore2 -Metadata $Metadata\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-Secret: Cannot store secret PublishSecret. Vault LocalStore2 does not support secret metadata.\n```\n\n----------------------------------------\n\nTITLE: Invoke ScriptAnalyzer with Included Rules - PowerShell\nDESCRIPTION: This example shows how to invoke `Invoke-ScriptAnalyzer` with a settings file that specifies the rules to include in the analysis using `IncludeRules`.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/using-scriptanalyzer.md#_snippet_12\n\nLANGUAGE: powershell\nCODE:\n```\nInvoke-ScriptAnalyzer -Path MyScript.ps1 -Settings PSScriptAnalyzerSettings.psd1\n```\n\n----------------------------------------\n\nTITLE: Correct Cmdlet Casing - PowerShell\nDESCRIPTION: This snippet shows the correct casing of the `Invoke-Command` cmdlet and `-RunAsAdministrator` parameter. This demonstrates the recommended practice for using correct casing as suggested by the rule.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/UseCorrectCasing.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nInvoke-Command { 'foo' } -RunAsAdministrator\n```\n\n----------------------------------------\n\nTITLE: Incorrect Example: Double Quotes for Constant String (PowerShell)\nDESCRIPTION: This snippet demonstrates the incorrect usage of double quotes for a constant string in PowerShell.  The rule suggests using single quotes when the string does not contain variables or expressions to be evaluated. This snippet violates that rule. No dependencies.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/AvoidUsingDoubleQuotesForConstantString.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n$constantValue = \"I Love PowerShell\"\n```\n\n----------------------------------------\n\nTITLE: Avoid Null in FunctionsToExport - PowerShell\nDESCRIPTION: Demonstrates the incorrect and correct ways to specify that no functions are exported in a PowerShell module manifest. Using `$null` is inefficient; use `@()` instead.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/UseToExportFieldsInManifest.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nFunctionsToExport = $null\n```\n\nLANGUAGE: powershell\nCODE:\n```\nFunctionToExport = @()\n```\n\n----------------------------------------\n\nTITLE: Preview Execution (Invoke-ScriptAnalyzer, PowerShell)\nDESCRIPTION: The `-WhatIf` parameter shows what would happen if the cmdlet were run, without actually executing it. This is useful for testing and validating the command before making any changes.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/PSScriptAnalyzer/Invoke-ScriptAnalyzer.md#_snippet_26\n\nLANGUAGE: YAML\nCODE:\n```\nType: SwitchParameter\nParameter Sets: (All)\nAliases: wi\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Exporting the Custom Rule Function - PowerShell\nDESCRIPTION: This code snippet illustrates how to export the custom rule function using `Export-ModuleMember`.  This step is essential for PSScriptAnalyzer to discover and use the custom rule.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/create-custom-rule.md#_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\nExport-ModuleMember -Function (FunctionName)\n```\n\n----------------------------------------\n\nTITLE: Invoke-WebRequest (Correct)\nDESCRIPTION: This snippet demonstrates the correct way to use Invoke-WebRequest without the AllowUnencryptedAuthentication parameter.  This ensures that credentials are not sent over unencrypted connections, improving security.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/AvoidUsingAllowUnencryptedAuthentication.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nInvoke-WebRequest foo\n```\n\n----------------------------------------\n\nTITLE: Project file with AIShell.Abstraction\nDESCRIPTION: This XML code represents the project file (.csproj) after adding the AIShell.Abstraction NuGet package. It specifies the target framework, implicit usings, and the package reference.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/AIShell/developer/create-ollama-agent.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<Project Sdk=\"Microsoft.NET.Sdk\">\n\n  <PropertyGroup>\n    <TargetFramework>net8.0</TargetFramework>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <SuppressNETCoreSdkPreviewMessage>true</SuppressNETCoreSdkPreviewMessage>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <PackageReference Include=\"AIShell.Abstraction\" Version=\"1.0.0-preview.2\" />\n  </ItemGroup>\n</Project>\n```\n\n----------------------------------------\n\nTITLE: Incorrect Assignment Operator Usage\nDESCRIPTION: This code snippet demonstrates the incorrect use of the assignment operator `=` within an `if` statement. It is likely the user intended to use the equality operator `-eq`.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/PossibleIncorrectUsageOfAssignmentOperator.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nif ($a = $b)\n{\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Code Post Arguments & Options\nDESCRIPTION: Details the arguments and options for the `/code post` subcommand. The `<n>` argument represents the 1-based index of the code snippet to post. If no value is given, all the code is posted. Options include displaying the help information.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/AIShell/how-to/aishell-reference.md#_snippet_11\n\nLANGUAGE: text\nCODE:\n```\nArguments:\n\n- `<n>` Use the n-th (1-based) code snippet. Use all the code when no value is specified.\n\nOptions:\n\n- `-h, --help` Show help and usage information\n```\n\n----------------------------------------\n\nTITLE: Creating a CAB file using New-ExternalHelpCab\nDESCRIPTION: Demonstrates how to use the New-ExternalHelpCab cmdlet to create a .cab file from a specified content folder, landing page, and output location. It uses a hashtable to pass parameters.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/PlatyPS/New-ExternalHelpCab.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n$params = @{\n    CabFilesFolder  = 'C:\\Module\\ExternalHelpContent'\n    LandingPagePath = 'C:\\Module\\ModuleName.md'\n    OutputFolder    = 'C:\\Module\\Cab\\'\n}\nNew-ExternalHelpCab @params\n```\n\n----------------------------------------\n\nTITLE: Vault Parameter Definition - YAML\nDESCRIPTION: This YAML snippet defines the Vault parameter for the Get-SecretInfo cmdlet. It specifies the data type as String, indicates it's optional (Required: False), and notes that it does not accept wildcard characters (Accept wildcard characters: False).\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.SecretManagement/Get-SecretInfo.md#_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\nType: String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 1\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Invoking CIM Method (Correct)\nDESCRIPTION: This code snippet demonstrates the correct usage of `Invoke-CimMethod` to create a new process using the `Create` method of the `Win32_Process` class. This is the recommended approach for invoking WMI methods in PowerShell.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/AvoidUsingWMICmdlet.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nInvoke-CimMethod -ClassName Win32_Process -MethodName 'Create' -Arguments @{ CommandLine = 'notepad.exe' }\n```\n\n----------------------------------------\n\nTITLE: Argument Value Transformation - Ordered Hashtable (JSON)\nDESCRIPTION: This snippet demonstrates argument transformation for an ordered hashtable, converting it into a string where each key-value pair is formatted and joined.  The ArgumentTransformType is set to \"Inline\", and the ArgumentTransform scriptblock iterates through the keys, formats each pair, and joins them into a single string.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/Crescendo/whats-new/whats-new-in-crescendo-11.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n        \"Name\": \"hasht2\",\n        \"OriginalName\": \"--p1ordered\",\n        \"ParameterType\": \"System.Collections.Specialized.OrderedDictionary\",\n        \"OriginalPosition\": 0,\n        \"ArgumentTransform\": \"param([System.Collections.Specialized.OrderedDictionary]$v) $v.Keys.ForEach({''{0}={1}'' -f $_,$v[$_]}) -join ''\\r\\n''\",\n        \"ArgumentTransformType\": \"Inline\"\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Including Suppressed Diagnostics (Invoke-ScriptAnalyzer, PowerShell)\nDESCRIPTION: The `-IncludeSuppressed` parameter includes diagnostics that have been suppressed in the output. This is useful for reviewing why certain rules were suppressed and ensuring that the suppressions are still valid.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/PSScriptAnalyzer/Invoke-ScriptAnalyzer.md#_snippet_15\n\nLANGUAGE: YAML\nCODE:\n```\nType: SwitchParameter\nParameter Sets: Path_IncludeSuppressed, ScriptDefinition_IncludeSuppressed\nAliases:\n\nRequired: True\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Calling Chat Service in Main Agent Class - C#\nDESCRIPTION: This code snippet demonstrates how to call the `OllamaChatService` from the main agent's `Chat` method. It checks if the Ollama server is running, calls the `GetChatResponseAsync` method using the `IHost` interface for spinner management and cancellation, and renders the response to the user. It uses `AIShell.Abstraction` namespace and requires the `AIShell.Abstraction` package.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/AIShell/developer/create-ollama-agent.md#_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\npublic async Task<bool> Chat(string input, IShell shell)\n{\n    // Get the shell host\n    IHost host = shell.Host;\n\n    // get the cancellation token\n    CancellationToken token = shell.CancellationToken;\n\n    if (Process.GetProcessesByName(\"ollama\").Length is 0)\n    {\n        host.RenderFullResponse(\"Please be sure that Ollama is installed and the server is running. Ensure that you have met all the prerequisites in the README for this agent.\");\n        return false;\n    }\n\n    ResponseData ollamaResponse = await host.RunWithSpinnerAsync(\n        status: \"Thinking ...\",\n        func: async context => await _chatService.GetChatResponseAsync(context, input, token)\n    ).ConfigureAwait(false);\n\n    if (ollamaResponse is not null)\n    {\n        // render the content\n        host.RenderFullResponse(ollamaResponse.response);\n    }\n\n    return true;\n}\n```\n\n----------------------------------------\n\nTITLE: Create Usage Object and Convert to JSON\nDESCRIPTION: This example demonstrates how to create a Crescendo Usage object using `New-UsageInfo` and then convert it to JSON format using `ConvertTo-Json`. The `-usage` parameter is used to specify the description.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.Crescendo/New-UsageInfo.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n$usage = New-UsageInfo -usage 'This is a description for how to use the cmdlet.'\n$usage | ConvertTo-Json\n```\n\n----------------------------------------\n\nTITLE: SecretStore Configuration Parameter: Default (YAML)\nDESCRIPTION: This YAML snippet documents the -Default parameter for the Set-SecretStoreConfiguration cmdlet. It specifies the type, parameter sets, aliases, whether it's required, position, default value, and whether it accepts pipeline input or wildcard characters. It's a switch parameter used to reset the SecretStore configuration to its defaults.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.SecretStore/Set-SecretStoreConfiguration.md#_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\nType: SwitchParameter\nParameter Sets: DefaultParameterSet\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Export Crescendo Commands to Single JSON File - PowerShell\nDESCRIPTION: This example shows how to import Crescendo Command objects from an existing JSON configuration file and then export them to a single JSON file, consolidating all commands into one file.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.Crescendo/Export-CrescendoCommand.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n$config = Import-CommandConfiguration C:\\projects\\vssadmin\\vssadmin.crescendo.config.json\nExport-CrescendoCommand -command $config -fileName VssAdmin.crescendo.json\nGet-ChildItem\n```\n\n----------------------------------------\n\nTITLE: Output of Export Crescendo Command - Separate Files\nDESCRIPTION: This shows the expected output after running the Export-CrescendoCommand cmdlet to create separate JSON files for each Crescendo command in the specified directory. Each file is named after the command it represents.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.Crescendo/Export-CrescendoCommand.md#_snippet_1\n\nLANGUAGE: Output\nCODE:\n```\nDirectory: D:\\temp\\Crescendo\n\nMode                 LastWriteTime         Length Name\n----                 -------------         ------ ----\n-a---          12/13/2022  3:24 PM            869 Get-VssProvider.crescendo.json\n-a---          12/13/2022  3:24 PM           3483 Get-VssShadow.crescendo.json\n-a---          12/13/2022  3:24 PM           2474 Get-VssShadowStorage.crescendo.json\n-a---          12/13/2022  3:24 PM            863 Get-VssVolume.crescendo.json\n-a---          12/13/2022  3:24 PM            860 Get-VssWriter.crescendo.json\n-a---          12/13/2022  3:24 PM           4973 Resize-VssShadowStorage.crescendo.json\n```\n\n----------------------------------------\n\nTITLE: Correct Cmdlet Verb Usage PowerShell\nDESCRIPTION: This example demonstrates the correct usage of an approved verb, 'Update', in a PowerShell cmdlet name.  'Update' is an approved verb for modifying an item.  Using approved verbs ensures consistency and discoverability within PowerShell.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/UseApprovedVerbs.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nfunction Update-Item\n{\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Building the Agent - Shell\nDESCRIPTION: This code snippet shows the command to build the agent. It uses the `dotnet build` command to compile all the necessary packages into the `bin\\Debug\\net8.0` folder of the project.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/AIShell/developer/create-ollama-agent.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ndotnet build\n```\n\n----------------------------------------\n\nTITLE: Measure Markdown Files by Path - PowerShell\nDESCRIPTION: This syntax demonstrates how to use the Measure-PlatyPSMarkdown cmdlet with the -Path parameter to specify the location of one or more Markdown files for analysis. It allows the use of wildcards to analyze multiple files at once.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/Measure-PlatyPSMarkdown.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nMeasure-PlatyPSMarkdown [-Path] <string[]> [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Comparing Empty Array with Null in PowerShell\nDESCRIPTION: This example illustrates the behavior of comparing an empty array with `$null`. When the array is on the left-hand side, the comparison returns `false` because no matching objects are returned from the empty array.  Using `$null` on the left returns `true` because the array is empty.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/PossibleIncorrectComparisonWithNull.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n# This example returns 'false' because the comparison does not return any objects from the array\nif (@() -eq $null) { 'true' } else { 'false' }\n# This example returns 'true' because the array is empty\nif ($null -ne @()) { 'true' } else { 'false' }\n```\n\n----------------------------------------\n\nTITLE: Metadata Parameter Definition - YAML\nDESCRIPTION: This YAML snippet defines the Metadata parameter, which is a hashtable to add to the frontmatter of the Markdown file. It describes that you can't overwrite the values of the `document type` or `PlatyPS schema version` keys. If these keys are present in the hashtable, the cmdlet ignores the values and outputs a warning. The parameter type is System.Collections.Hashtable and it's optional.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/New-MarkdownModuleFile.md#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Collections.Hashtable\nParameter Sets: (All)\nAliases:\nAccepted values:\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Correct OutputType Declaration PowerShell\nDESCRIPTION: This code snippet demonstrates the correct usage of the OutputType attribute. The function `Get-Foo` declares that it returns a `String`, and the function actually returns a string ('four'). This ensures consistency between the declared output type and the actual returned type. The [CmdletBinding()] attribute allows the use of cmdlet features. The Param() block defines parameters, but is empty in this case.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/UseOutputTypeCorrectly.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nfunction Get-Foo\n{\n        [CmdletBinding()]\n        [OutputType([String])]\n        Param(\n        )\n\n        return 'four'\n}\n```\n\n----------------------------------------\n\nTITLE: Test-SecretVault Syntax\nDESCRIPTION: Defines the syntax for the Test-SecretVault cmdlet.  It shows the -Name parameter which accepts a string array and the availability of CommonParameters. The cmdlet is used to test secret vaults.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.SecretManagement/Test-SecretVault.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nTest-SecretVault [-Name <String[]>] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Incorrect PowerShell Function Definition with Reserved Parameter\nDESCRIPTION: This code snippet demonstrates an incorrect PowerShell function definition that attempts to redefine the `$ErrorVariable` common parameter within an advanced function.  This results in the ReservedParams error. The `CmdletBinding` attribute makes it an advanced function, automatically including common parameters.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/ReservedParams.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nfunction Test\n{\n    [CmdletBinding()]\n    Param\n    (\n        $ErrorVariable,\n        $Parameter2\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Define ModulePagePath Parameter (YAML)\nDESCRIPTION: Defines the `-ModulePagePath` parameter, allowing the specification of a new name/location for the module page, overriding the default location.  It applies to 'FromModule' and 'FromMaml' parameter sets.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/PlatyPS/New-MarkdownHelp.md#_snippet_12\n\nLANGUAGE: YAML\nCODE:\n```\nType: String\nParameter Sets: FromModule, FromMaml\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Output from Export-MarkdownModuleFile\nDESCRIPTION: This is the expected output after running the Export-MarkdownModuleFile cmdlet, showing the directory, modification time, file length, and filename of the exported module.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/Export-MarkdownModuleFile.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nDirectory: D:\\Git\\PS-Src\\platyPS\\v2docs\\v1\\new\\Microsoft.PowerShell.PlatyPS\n\nMode                 LastWriteTime         Length Name\n----                 -------------         ------ ----\n-a---           8/26/2024  3:38 PM           2716 Microsoft.PowerShell.PlatyPS.md\n```\n\n----------------------------------------\n\nTITLE: Incorrect DSC Class-Based Resource (Wrong Return Types)\nDESCRIPTION: This snippet shows an incorrect DSC class-based resource definition where the Get and Set methods return String objects. Get should return the class type itself and Set should return void.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/DSCReturnCorrectTypesForDSCFunctions.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n[DscResource()]\nclass MyDSCResource\n{\n    [DscProperty(Key)]\n    [string] $Name\n\n    [String] Get()\n    {\n        ...\n    }\n\n    [String] Set()\n    {\n        ...\n    }\n\n    [bool] Test()\n    {\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Get Custom Rules with Recursive Path - PowerShell\nDESCRIPTION: This example demonstrates how to retrieve custom script analyzer rules from specified paths, including rules defined in subdirectories. It uses the -CustomRulePath parameter along with the -RecurseCustomRulePath switch to include rules found within nested folders.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/PSScriptAnalyzer/Get-ScriptAnalyzerRule.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-ScriptAnalyzerRule -CustomRulePath $home\\Documents\\WindowsPowerShell\\Modules\\*StrictRules -RecurseCustomRulePath\n```\n\n----------------------------------------\n\nTITLE: Get Help Preview Example - PowerShell\nDESCRIPTION: This example shows how to preview the PlatyPS help file using the Get-HelpPreview cmdlet, then access the Name property of the returned help objects.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/PlatyPS/Get-HelpPreview.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS C:\\> $Help = Get-HelpPreview -Path \".\\out\\platyPS\\en-US\\PlatyPS-help.xml\"\nPS C:\\> $Help.Name\n\nGet-HelpPreview\nGet-MarkdownMetadata\nNew-ExternalHelp\nNew-ExternalHelpCab\nNew-MarkdownHelp\nUpdate-MarkdownHelp\nUpdate-MarkdownHelpModule\nUpdate-MarkdownHelpSchema\n```\n\n----------------------------------------\n\nTITLE: Correct Write-Verbose and Write-Output Usage in PowerShell\nDESCRIPTION: This code snippet demonstrates the correct usage of `Write-Verbose` for informational messages and `Write-Output` for returning values from a PowerShell function. The `Get-MeaningOfLife` function now uses `Write-Verbose` to display a message (which can be controlled by the user with the `-Verbose` parameter) and `Write-Output` to return the value 42 to the pipeline.  It also shows an exception for using `Write-Host` inside of a function using the `Show` verb.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/AvoidUsingWriteHost.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nfunction Get-MeaningOfLife\n{\n    [CmdletBinding()]Param() # makes it possible to support Verbose output\n\n    Write-Verbose 'Computing the answer to the ultimate question of life, the universe and everything'\n    Write-Output 42\n}\n\nfunction Show-Something\n{\n    Write-Host 'show something on screen'\n}\n```\n\n----------------------------------------\n\nTITLE: Pipeline Indentation Example - IncreaseIndentationAfterEveryPipeline\nDESCRIPTION: This example demonstrates the 'IncreaseIndentationAfterEveryPipeline' setting for pipeline indentation. Each pipeline in the chain increases the indentation level, leading to a stair-step effect. This format visually emphasizes the flow of data through the pipeline.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/UseConsistentIndentation.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nfoo |\n    bar |\n        baz\n```\n\n----------------------------------------\n\nTITLE: Encoding Parameter Definition\nDESCRIPTION: Specifies that the `-Encoding` parameter accepts a `System.Text.Encoding` object to define the character encoding for the external help file. The default encoding is UTF8 without BOM.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/PlatyPS/New-ExternalHelp.md#_snippet_5\n\nLANGUAGE: YAML\nCODE:\n```\nType: Encoding\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: UTF8 without BOM\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Splitting Windows Terminal Pane\nDESCRIPTION: This command splits the Windows Terminal pane. This command is provided as an example of how to achieve a split pane experience. Refer to your terminal application's documentation for specific commands.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/AIShell/concepts/FAQ.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nwt -w 0 sp\n```\n\n----------------------------------------\n\nTITLE: Inspecting VSSAdmin Command Help\nDESCRIPTION: These commands are used to display the help information for the `vssadmin list providers` and `vssadmin list shadows` commands. This allows the script to understand the parameters and usage of the original commands before creating the Crescendo cmdlets.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/Crescendo/advanced/using-crescendo-cmdlets.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nvssadmin list providers /?\nvssadmin list shadows /?\n```\n\n----------------------------------------\n\nTITLE: Correct DSC Class-Based Resource (Correct Return Types)\nDESCRIPTION: This snippet demonstrates the correct DSC class-based resource definition, ensuring that the Get method returns an instance of the class itself (MyDSCResource), Set returns void, and Test returns a boolean value. This ensures proper data handling and expected behavior within the DSC framework.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/DSCReturnCorrectTypesForDSCFunctions.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\n[DscResource()]\nclass MyDSCResource\n{\n    [DscProperty(Key)]\n    [string] $Name\n\n    [MyDSCResource] Get()\n    {\n        ...\n    }\n\n    [void] Set()\n    {\n        ...\n    }\n\n    [bool] Test()\n    {\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: InputObject Parameter Definition\nDESCRIPTION: Defines the `-InputObject` parameter for the `Get-Secret` cmdlet. It allows specifying a SecretInformation object instead of the Name and Vault parameters.  The SecretInformation object is obtained using the `Get-SecretInfo` cmdlet.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.SecretManagement/Get-Secret.md#_snippet_5\n\nLANGUAGE: YAML\nCODE:\n```\nType: SecretInformation\nParameter Sets: InfoParameterSet\nAliases:\n\nRequired: True\nPosition: 0\nDefault value: None\nAccept pipeline input: True (ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Example Crescendo Command Object JSON Output\nDESCRIPTION: This JSON represents the output of the `New-CrescendoCommand` cmdlet after being converted to JSON. It shows the structure and properties of a Crescendo command object, including verb, noun, original name, and other configuration options.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.Crescendo/New-CrescendoCommand.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"Verb\": \"Get\",\n  \"Noun\": \"Something\",\n  \"OriginalName\": \"native.exe\",\n  \"OriginalCommandElements\": null,\n  \"Platform\": [\n    \"Windows\",\n    \"Linux\",\n    \"MacOS\"\n  ],\n  \"Elevation\": null,\n  \"Aliases\": null,\n  \"DefaultParameterSetName\": null,\n  \"SupportsShouldProcess\": false,\n  \"ConfirmImpact\": null,\n  \"SupportsTransactions\": false,\n  \"NoInvocation\": false,\n  \"Description\": null,\n  \"Usage\": null,\n  \"Parameters\": [],\n  \"Examples\": [],\n  \"OriginalText\": null,\n  \"HelpLinks\": null,\n  \"OutputHandlers\": null,\n  \"FunctionName\": \"Get-Something\"\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Cmdlet Verb Usage PowerShell\nDESCRIPTION: This example demonstrates the incorrect usage of a non-approved verb, 'Change', in a PowerShell cmdlet name. The cmdlet is intended to modify an item, but uses a verb that is not on the approved list.  The `Get-Verb` cmdlet can be used to identify approved verbs.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/UseApprovedVerbs.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nfunction Change-Item\n{\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: OutputFolder Parameter Definition\nDESCRIPTION: YAML definition for the OutputFolder parameter, specifying its type, requirement, position, default value, pipeline input acceptance, and wildcard character acceptance. This parameter defines the location where the .cab file and helpinfo.xml file are created.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/PlatyPS/New-ExternalHelpCab.md#_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\nType: String\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Writing Warnings and Errors to File\nDESCRIPTION: This example demonstrates how to create an external help file and save any warnings or errors encountered during the process to a JSON log file named `WarningsAndErrors.json`. The output help file is saved to the `out\\platyPS\\en-US` folder.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/PlatyPS/New-ExternalHelp.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS C:\\> New-ExternalHelp -Path \".\\docs\" -OutputPath \"out\\platyPS\\en-US\" -ErrorLogFile \".\\WarningsAndErrors.json\"\n\n    Directory: D:\\Working\\PlatyPS\\out\\platyPS\\en-US\n\n\nMode                LastWriteTime         Length Name\n----\t\t\t\t\t-------------\t\t\t--------- ----\n-a----\t\t\t5/19/2016  12:32 PM\t\t  46776 platyPS-help.xml\n```\n\n----------------------------------------\n\nTITLE: ErrorLogFile Parameter Definition\nDESCRIPTION: Specifies that the `-ErrorLogFile` parameter requires a string value representing the path to save the formatted results log file. The file must have a `.json` extension and contains a JSON object with `Message`, `FilePath`, and `Severity` properties.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/PlatyPS/New-ExternalHelp.md#_snippet_10\n\nLANGUAGE: YAML\nCODE:\n```\nType: String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: WhatIf Parameter Definition\nDESCRIPTION: YAML definition for the -WhatIf parameter of the Reset-SecretStore cmdlet. It specifies the type, requirement, position, default value (False), pipeline input, and wildcard characters. When specified, the cmdlet shows what would happen if it was run.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.SecretStore/Reset-SecretStore.md#_snippet_10\n\nLANGUAGE: YAML\nCODE:\n```\nType: SwitchParameter\nParameter Sets: (All)\nAliases: wi\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Correct ShouldProcess Implementation PowerShell\nDESCRIPTION: This PowerShell function demonstrates the correct usage of `ShouldProcess`. The function declares the `SupportsShouldProcess` attribute in `CmdletBinding` and calls the `$PSCmdlet.ShouldProcess` method before performing the action.  It takes `$Path` and `$Content` parameters, prompts the user using `ShouldProcess` before writing the content to the specified file, and includes a `WhatIf` block.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/ShouldProcess.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nfunction Set-File\n{\n    [CmdletBinding(SupportsShouldProcess=$true)]\n    Param\n    (\n        # Path to file\n        [Parameter(Mandatory=$true)]\n        $Path,\n\n        [Parameter(Mandatory=$true)]\n        [string]$Content\n    )\n\n    if ($PSCmdlet.ShouldProcess($Path, (\"Setting content to '{0}'\" -f $Content)))\n    {\n        $Content | Out-File -FilePath $Path\n    }\n    else\n    {\n        # Code that should be processed if doing a WhatIf operation\n        # Must NOT change anything outside of the function / script\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: LiteralPath Parameter (YAML)\nDESCRIPTION: Defines the -LiteralPath parameter in YAML, which specifies a path to one or more markdown command files without wildcard interpretation.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/Update-MarkdownCommandHelp.md#_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.String[]\nParameter Sets: LiteralPath\nAliases:\nAccepted values:\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Using Global Variables (Incorrect)\nDESCRIPTION: This code snippet demonstrates the incorrect usage of a global variable `$Global:var1` within a function.  It assigns a null value to the global variable and then attempts to use it within the `Test-NotGlobal` function. This can lead to unexpected behavior and is generally discouraged. There are no external dependencies.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/AvoidGlobalVars.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n$Global:var1 = $null\nfunction Test-NotGlobal ($var)\n{\n    $a = $var + $var1\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Azure OpenAI with Azure CLI\nDESCRIPTION: These Azure CLI commands deploy the Azure OpenAI service using a Bicep template, retrieve the endpoint URL, and list the account keys.  Before running these commands, users must log in to Azure using `az login` and set the correct subscription.  Placeholders in angle brackets (`<>`) must be replaced with actual values for the resource group and account name.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/AIShell/developer/deploy-azure-openai.md#_snippet_1\n\nLANGUAGE: azurecli-interactive\nCODE:\n```\naz deployment group create \\\n    --resource-group '<resource group name>' \\\n    --template-file ./main.bicep\n\n# Get the endpoint and key of the deployment\naz cognitiveservices account show \\\n    --name '<account name>'\n    --resource-group '<resource group name>' | jq -r .properties.endpoint\n\naz cognitiveservices account keys list \\\n    --name '<account name>' \\\n    --resource-group  '<resource group name>' | jq -r .key1\n```\n\n----------------------------------------\n\nTITLE: OpenAI Agent Configuration\nDESCRIPTION: This JSONC snippet shows the configuration format for the OpenAI agent. It includes settings for Azure OpenAI and public OpenAI services, allowing users to specify endpoints, deployment names, model names, API keys, and system prompts. The `Active` field specifies the default GPT instance to use.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/AIShell/how-to/agent-openai.md#_snippet_0\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  // Declare GPT instances.\n  \"GPTs\": [\n    // To use the Azure OpenAI service:\n    // - Set `Endpoint` to the endpoint of your Azure OpenAI service,\n    //     or the endpoint to the Azure API Management service if you are using it as a gateway.\n    // - Set `Deployment` to the deployment name of your Azure OpenAI service.\n    // - Set `ModelName` to the name of the model used for your deployment, e.g. \"gpt-4-0613\".\n    // - Set `Key` to the access key of your Azure OpenAI service,\n    //     or the key of the Azure API Management service if you are using it as a gateway.\n    {\n      \"Name\": \"ps-az-gpt4\",\n      \"Description\": \"A GPT instance with expertise in PowerShell scripting and command line utilities. Use gpt-4 running in Azure.\",\n      \"Endpoint\": \"<insert your Azure OpenAI endpoint>\",\n      \"Deployment\": \"<insert your deployment name>\",\n      \"ModelName\": \"<insert the model name>\",   // required field to infer properties of the service, such as token limit.\n      \"Key\": \"<insert your key>\",\n      \"SystemPrompt\": \"1. You are a helpful and friendly assistant with expertise in PowerShell scripting and command line.\\n2. Assume user is using the operating system `Windows 11` unless otherwise specified.\\n3. Use the `code block` syntax in markdown to encapsulate any part in responses that is code, YAML, JSON or XML, but not table.\\n4. When encapsulating command line code, use '```powershell' if it's PowerShell command; use '```sh' if it's non-PowerShell CLI command.\\n5. When generating CLI commands, never ever break a command into multiple lines. Instead, always list all parameters and arguments of the command on the same line.\\n6. Please keep the response concise but to the point. Do not overexplain.\"\n    },\n\n    // To use the public OpenAI service:\n    // - Ignore the `Endpoint` and `Deployment` keys.\n    // - Set `ModelName` to the name of the model to be used.\n    // - Set `Key` to be the OpenAI access token.\n    // For example:\n    {\n        \"Name\": \"ps-gpt4o\",\n        \"Description\": \"A GPT instance with expertise in PowerShell scripting and command line utilities. Use gpt-4o running in OpenAI.\",\n        \"ModelName\": \"gpt-4o\",\n        \"Key\": \"<insert your key>\",\n        \"SystemPrompt\": \"1. You are a helpful and friendly assistant with expertise in PowerShell scripting and command line.\\n2. Assume user is using the operating system `Windows 11` unless otherwise specified.\\n3. Use the `code block` syntax in markdown to encapsulate any part in responses that is code, YAML, JSON or XML, but not table.\\n4. When encapsulating command line code, use '```powershell' if it's PowerShell command; use '```sh' if it's non-PowerShell CLI command.\\n5. When generating CLI commands, never ever break a command into multiple lines. Instead, always list all parameters and arguments of the command on the same line.\\n6. Please keep the response concise but to the point. Do not overexplain.\"\n    }\n  ],\n\n  // Specify the default GPT instance to use for user query.\n  \"Active\": \"ps-az-gpt4\"\n}\n```\n\n----------------------------------------\n\nTITLE: Create help with module page from MAML using New-MarkdownHelp (PowerShell)\nDESCRIPTION: This example extends the previous one by adding the -WithModulePage and -ModuleName parameters. This creates an additional Markdown file representing the module page, which includes links to all other cmdlets' Markdown files in the module, and metadata for creating .cab files for distributable help.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/PlatyPS/New-MarkdownHelp.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS C:\\> New-MarkdownHelp -OutputFolder \"D:\\PSReadLine\\docs\" -MamlFile 'C:\\Program Files\\WindowsPowerShell\\Modules\\PSReadLine\\1.1\\en-US\\Microsoft.PowerShell.PSReadLine.dll-help.xml' -WithModulePage  -Force -ModuleName \"PSReadLine\"\n\n\n    Directory: D:\\PSReadLine\\docs\n\n\nMode                LastWriteTime         Length Name\n----                -------------         ------ ----\n-a----        5/22/2016   6:59 PM           7443 Get-PSReadLineKeyHandler.md\n-a----        5/22/2016   6:59 PM           3586 Get-PSReadLineOption.md\n-a----        5/22/2016   6:59 PM           1549 Remove-PSReadLineKeyHandler.md\n-a----        5/22/2016   6:59 PM           5947 Set-PSReadLineKeyHandler.md\n-a----        5/22/2016   6:59 PM          15320 Set-PSReadLineOption.md\n-a----        5/22/2016   6:59 PM            942 PSReadLine.md\n```\n\n----------------------------------------\n\nTITLE: Test-IsCrescendoCommand Syntax - PowerShell\nDESCRIPTION: Defines the syntax for the Test-IsCrescendoCommand cmdlet. The cmdlet accepts an array of objects as input for the -Command parameter and supports common parameters for controlling output and error handling.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.Crescendo/Test-IsCrescendoCommand.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nTest-IsCrescendoCommand [-Command] <Object[]> [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Configuring Telemetry and Logging - JSON\nDESCRIPTION: This JSON snippet shows the configuration settings for the Copilot in Azure agent. It includes options to enable or disable logging and telemetry. The logging setting controls whether the agent writes logs to the `~/.aish/agent-config/azure` directory. The telemetry setting controls whether the agent collects product usage data.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/AIShell/how-to/agent-azure.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"logging\": true,\n  \"telemetry\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Update one file and capture log - PowerShell\nDESCRIPTION: This example shows how to update a single markdown help file and capture log information. It utilizes the `-Path` parameter to specify the individual file and the `-LogPath` parameter to specify the file where the log information should be written.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/PlatyPS/Update-MarkdownHelp.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS C:\\> Update-MarkdownHelp -Path \".\\docs\\Update-MarkdownHelp.md\" -LogPath \".\\markdown.log\"\n\n    Directory: D:\\Working\\PlatyPS\\docs\n\n\nMode                LastWriteTime         Length Name\n----\t\t\t\t\t-------------\t\t\t-----\t----\n-a----\t\t5/22/2016   8:20 PM           9993 New-MarkdownHelp.md\n```\n\n----------------------------------------\n\nTITLE: Exporting Crescendo Module (PowerShell)\nDESCRIPTION: Demonstrates how to use the Export-CrescendoModule cmdlet with the NoClobberManifest switch to prevent overwriting the module manifest (.psd1) during module export. This is useful when the manifest has been customized beyond Crescendo's scope and needs to be preserved.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/Crescendo/whats-new/whats-new-in-crescendo-11.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nExport-CrescendoModule -ConfigurationFile .\\myconfig.json -ModuleName .\\Mymodule -NoClobberManifest\n```\n\n----------------------------------------\n\nTITLE: Reset-SecretStore Syntax\nDESCRIPTION: Defines the syntax for the Reset-SecretStore cmdlet. It shows the available parameters, including Scope, Authentication, Password, PasswordTimeout, Interaction, PassThru, Force, WhatIf, and Confirm.  It also indicates the support for common parameters.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.SecretStore/Reset-SecretStore.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nReset-SecretStore [-Scope <SecureStoreScope>] [-Authentication <Authenticate>] [-Password <SecureString>]\n [-PasswordTimeout <Int32>] [-Interaction <Interaction>] [-PassThru] [-Force] [-WhatIf] [-Confirm]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: HelpVersion Parameter Definition - YAML\nDESCRIPTION: This YAML snippet defines the HelpVersion parameter, allowing to specify the version of the help.  The default value is `1.0.0.0`. This version is written to the `HelpInfo.xml` file that is used for updateable help. It's of type System.Version and it is optional.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/New-MarkdownModuleFile.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Version\nParameter Sets: (All)\nAliases:\nAccepted values:\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for a Subcommand\nDESCRIPTION: This example demonstrates how to display help content for a specific subcommand (`config`) of a command-line tool (`azcmagent`). It shows the available subcommands, flags, and global flags for the specified subcommand.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/Crescendo/get-started/research-tool.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> azcmagent config --help\nChange configuration settings for this machine\n\nUsage:\n  azcmagent config [command]\n\nAvailable Commands:\n  clear       Clear a configuration property's value\n  get         Get a configuration property's value\n  info        Describes the config properties users can set\n  list        List all configuration properties and values\n  set         Set a value for a configuration property\n\nFlags:\n  -h, --help      help for config\n      --version   version for config\n\nGlobal Flags:\n      --config string   config file (default is $HOME/.azcmagent.yaml)\n  -j, --json            Output in JSON format\n      --log-stderr      Redirect error and verbose messages to stderr\n  -v, --verbose         Increase logging verbosity to show all logs\n\nUse \"azcmagent config [command] --help\" for more information about a command.\n```\n\n----------------------------------------\n\nTITLE: UpdateInputOutput Parameter - YAML\nDESCRIPTION: Defines the `-UpdateInputOutput` parameter, a switch to refresh the Input and Output sections to reflect the current state of the cmdlet. WARNING: this parameter will remove any manual additions to these sections.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/PlatyPS/Update-MarkdownHelp.md#_snippet_10\n\nLANGUAGE: YAML\nCODE:\n```\nType: SwitchParameter\nParameter Sets: (All)\nAliases: \n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Agent List Subcommand\nDESCRIPTION: Describes the usage of the `/agent list` subcommand. This command lists all available agents.  The command has no required arguments.  It provides a description for each agent. The options allow the display of help information.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/AIShell/how-to/aishell-reference.md#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n> /agent list\n\n  Name             Description\n───────────────────────────────────────────---------------------──\n  openai-gpt       This agent is designed to provide a flexible\n                   platform for interacting with OpenAI services\n                   (Azure OpenAI or the public OpenAI) through\n                   one or more customly defined GPT instances.\n\n                   The agent is currently not ready to serve\n                   queries, because there is no GPT defined.\n                   Please follow the steps below to configure the\n                   setting file properly before using this agent:\n\n                   1. Run '/agent config' to open the setting file.\n                   2. Define the GPT(s). See details at\n                      https://aka.ms/aish/openai\n                   3. Run '/refresh' to apply the new settings.\n  azure (active)   This AI assistant can generate Azure CLI and\n                   Azure PowerShell commands for managing\n                   Azure resources, answer questions, and provides\n                   information tailored to your specific Azure\n                   environment.\n```\n\n----------------------------------------\n\nTITLE: ForEach-Object Scope Issue (False Positive)\nDESCRIPTION: This example illustrates a false positive warning. The variable `$bar` is assigned within the `ForEach-Object` scriptblock and used outside it. However, the rule detects `$bar` as unused because its usage is outside the scope where it was defined within the ForEach-Object.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/UseDeclaredVarsMoreThanAssignments.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n$foo | ForEach-Object {\n    if ($_ -eq $false) {\n        $bar = $true\n    }\n}\n\nif($bar){\n    Write-Host 'Collection contained a false case.'\n}\n```\n\n----------------------------------------\n\nTITLE: HelpVersion Parameter - YAML\nDESCRIPTION: This YAML snippet defines the `-HelpVersion` parameter. This parameter specifies the version of the help, which is written to the `HelpInfo.xml` file.  The default value is `1.0.0.0`.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/Update-MarkdownModuleFile.md#_snippet_9\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.Version\nParameter Sets: (All)\nAliases:\nAccepted values:\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: ConvertDoubleDashLists Parameter Definition\nDESCRIPTION: Defines the `-ConvertDoubleDashLists` parameter for the `Show-HelpPreview` cmdlet.  This parameter converts double-hyphen list bullets into single-hyphen bullets.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/Show-HelpPreview.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.Management.Automation.SwitchParameter\nParameter Sets: (All)\nAliases:\nAccepted values:\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Creating CommandHelp Object for New-PSSession\nDESCRIPTION: This example demonstrates how to create a `CommandHelp` object for the `New-PSSession` cmdlet and then uses `Get-Member` to display the object's properties and methods. This allows inspection of the structure of the `CommandHelp` object.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/New-CommandHelp.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CommandHelp New-PSSession | Get-Member\n```\n\n----------------------------------------\n\nTITLE: Install AI Shell PowerShell Module\nDESCRIPTION: This PowerShell command installs the AIShell module from the PowerShell Gallery. It is used as part of the manual installation process for Windows and macOS.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/AIShell/install-aishell.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nInstall-PSResource -Name AIShell\n```\n\n----------------------------------------\n\nTITLE: CommandHelp Parameter Definition - YAML\nDESCRIPTION: This YAML snippet defines the CommandHelp parameter for the New-MarkdownModuleFile cmdlet.  It specifies the type as an array of Microsoft.PowerShell.PlatyPS.Model.CommandHelp objects, indicates that it accepts pipeline input by value, and that wildcards are not supported. The parameter is optional.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/New-MarkdownModuleFile.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nType: Microsoft.PowerShell.PlatyPS.Model.CommandHelp[]\nParameter Sets: (All)\nAliases:\nAccepted values:\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Configuring UseConsistentIndentation Rule in PowerShell\nDESCRIPTION: This code snippet demonstrates how to configure the UseConsistentIndentation rule within the ScriptAnalyzer settings. It shows how to enable the rule, define the indentation size, specify the pipeline indentation behavior, and choose the indentation type (space or tab). The settings are used to enforce consistent code formatting across PowerShell scripts.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/UseConsistentIndentation.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nRules = @{\n    PSUseConsistentIndentation = @{\n        Enable = $true\n        IndentationSize = 4\n        PipelineIndentation = 'IncreaseIndentationForFirstPipeline'\n        Kind = 'space'\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Agent Config Subcommand\nDESCRIPTION: Describes the usage of the `/agent config` subcommand. This command opens the configuration file for a specified agent (or the active agent if none specified). Options allow specifying the editor to use. Requires an agent name as an argument (e.g., azure, openai-gpt).\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/AIShell/how-to/aishell-reference.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n/agent config [<agent>] [options]\n```\n\n----------------------------------------\n\nTITLE: Get-HelpPreview Syntax - PowerShell\nDESCRIPTION: This code snippet defines the syntax for the `Get-HelpPreview` cmdlet, including the `-Path`, `-ConvertNotesToList`, and `-ConvertDoubleDashLists` parameters.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/PlatyPS/Get-HelpPreview.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-HelpPreview -Path <String[]> [-ConvertNotesToList] [-ConvertDoubleDashLists] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Path Parameter Definition (YAML)\nDESCRIPTION: Defines the `-Path` parameter for the `Get-MarkdownMetadata` cmdlet using YAML. It specifies the type, parameter set, aliases, and other properties, including whether the parameter is required and accepts pipeline input.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/PlatyPS/Get-MarkdownMetadata.md#_snippet_5\n\nLANGUAGE: YAML\nCODE:\n```\nType: String[]\nParameter Sets: FromPath\nAliases:\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: True\n```\n\n----------------------------------------\n\nTITLE: Adding Comment-Based Help to Function - PowerShell\nDESCRIPTION: This code snippet demonstrates how to add comment-based help to a PowerShell function. The `.DESCRIPTION` field becomes the description for the customized rule. This is a basic requirement for PSScriptAnalyzer custom rules.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/create-custom-rule.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n    Name of your rule.\n.DESCRIPTION\n    This would be the description of your rule. Please refer to Rule Documentation\n    for consistent rule messages.\n.EXAMPLE\n.INPUTS\n.OUTPUTS\n.NOTES\n#>\n```\n\n----------------------------------------\n\nTITLE: Creating Updateable Help Files for a Module in PowerShell\nDESCRIPTION: This PowerShell code snippet demonstrates how to use the New-HelpCabinetFile cmdlet to create updateable help files for a module. It defines the parameters needed, including the cabinet files folder, the module Markdown file, and the output folder. This ensures that the cmdlet can correctly package the MAML files into .cab and .zip files for PowerShell's updateable help system.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/New-HelpCabinetFile.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n$params = @{\n    CabinetFilesFolder = '.\\maml\\Microsoft.PowerShell.PlatyPS'\n    MarkdownModuleFile = '.\\Microsoft.PowerShell.PlatyPS\\Microsoft.PowerShell.PlatyPS.md'\n    OutputFolder       = '.\\cab'\n}\nNew-HelpCabinetFile @params\n```\n\n----------------------------------------\n\nTITLE: Code Post Subcommand\nDESCRIPTION: Describes the usage of the `/code post` subcommand. Posts the n-th (1-based) code snippet to the connected command-line shell, or all code if `<n>` isn't specified.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/AIShell/how-to/aishell-reference.md#_snippet_10\n\nLANGUAGE: text\nCODE:\n```\n/code post [<n>] [options]\n```\n\n----------------------------------------\n\nTITLE: Import Yaml Help - LiteralPath Syntax - PowerShell\nDESCRIPTION: This code snippet shows the syntax for using the `-LiteralPath` parameter with `Import-YamlCommandHelp`. It specifies that the cmdlet accepts a string array for the literal path to the Yaml files, without wildcard interpretation.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/Import-YamlCommandHelp.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nImport-YamlCommandHelp -LiteralPath <string[]> [-AsDictionary] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Update CommandHelp using LiteralPath parameter - PowerShell\nDESCRIPTION: Updates a `CommandHelp` object using the specified literal path. No wildcard characters are interpreted.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/Update-CommandHelp.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nUpdate-CommandHelp -LiteralPath <string[]> [-WhatIf] [-Confirm] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Creating Module File From Command List - PowerShell\nDESCRIPTION: This example creates a module file from a list of commands. It uses Get-Command to retrieve commands from the Microsoft.PowerShell.PlatyPS module, converts them to CommandHelp objects using New-CommandHelp, and then creates the module file using New-MarkdownModuleFile. The command uses splatting for parameter passing and includes the -Force parameter to overwrite any existing file. \nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/New-MarkdownModuleFile.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n$newMarkdownCommandHelpSplat = @{\n    CommandHelp  = Get-Command -Module Microsoft.PowerShell.PlatyPS | New-CommandHelp\n    OutputFolder = '.\\new'\n    Force        = $true\n}\nNew-MarkdownModuleFile @newMarkdownCommandHelpSplat\n```\n\n----------------------------------------\n\nTITLE: Update Markdown Command Help Example\nDESCRIPTION: This PowerShell example demonstrates how to use the Measure-PlatyPSMarkdown cmdlet to find Markdown files, filter for CommandHelp files, and then update them using Update-MarkdownCommandHelp.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/Update-MarkdownCommandHelp.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n$mdfiles = Measure-PlatyPSMarkdown -Path .\\v1\\Microsoft.PowerShell.PlatyPS\\*.md\n$mdfiles | Where-Object Filetype -match 'CommandHelp' |\n    Update-MarkdownCommandHelp -Path {$_.FilePath}\n```\n\n----------------------------------------\n\nTITLE: Create help from a command using New-MarkdownHelp (PowerShell)\nDESCRIPTION: This example demonstrates how to generate Markdown help files for a PowerShell function. It first defines a simple function Command03 with a string parameter and then uses New-MarkdownHelp to create the corresponding Markdown file in the specified output folder. The output shows the created Markdown file.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/PlatyPS/New-MarkdownHelp.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS C:\\> function Command03 {param([string]$Value)}\nPS C:\\> New-MarkdownHelp -Command \"Command03\" -OutputFolder \".\\docs\"\n\n\n    Directory: D:\\Working\\docs\n\n\nMode                LastWriteTime         Length Name\n----                -------------         ------ ----\n-a----        5/22/2016   6:53 PM            664 Command03.md\n```\n\n----------------------------------------\n\nTITLE: Convert Markdown command help to Yaml - PowerShell\nDESCRIPTION: This example imports Markdown help in the old format from the `.\\v1` folder and exports it to the `.\\v2` folder in the new format. It uses `Measure-PlatyPSMarkdown`, `Import-MarkdownCommandHelp`, and `Export-YamlCommandHelp` cmdlets to achieve this.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/Export-YamlCommandHelp.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n$mdfiles = Measure-PlatyPSMarkdown -Path .\\v2\\Microsoft.PowerShell.PlatyPS\\*.md\n$mdfiles | Where-Object Filetype -match 'CommandHelp' |\n    Import-MarkdownCommandHelp -Path {$_.FilePath} |\n    Export-YamlCommandHelp -OutputFolder .\\v2\\yaml\n```\n\n----------------------------------------\n\nTITLE: Convert Markdown Help to New Format - Single File\nDESCRIPTION: This example demonstrates how to import Markdown help in the old format from a specified path and export it to the new format to another specified path.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/Export-MarkdownCommandHelp.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n$chobj = Import-MarkdownCommandHelp -Path .\\v1\\Export-YamlModuleFile.md\nExport-MarkdownCommandHelp -CommandHelp $chobj -OutputFolder .\\v2\n```\n\n----------------------------------------\n\nTITLE: Incorrect ShouldProcess Implementation PowerShell\nDESCRIPTION: This PowerShell function demonstrates the incorrect usage of `ShouldProcess`. The function declares the `SupportsShouldProcess` attribute in `CmdletBinding` but does not call the `ShouldProcess` method, violating the rule. It takes a `$Path` parameter and attempts to write 'String' to the specified file without confirming with the user via `ShouldProcess`.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/ShouldProcess.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nfunction Set-File\n{\n    [CmdletBinding(SupportsShouldProcess=$true)]\n    Param\n    (\n        # Path to file\n        [Parameter(Mandatory=$true)]\n        $Path\n    )\n    'String' | Out-File -FilePath $Path\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Crescendo module using PowerShellGet\nDESCRIPTION: Installs the latest version of the Microsoft.PowerShell.Crescendo module using the Install-Module cmdlet from PowerShellGet 2.x. The -Force parameter ensures the module is installed or updated, even if an older version exists. Requires PowerShellGet 2.x to be installed.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/Crescendo/get-started/install-crescendo.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n# Install the current release\nInstall-Module Microsoft.PowerShell.Crescendo -Force\n```\n\n----------------------------------------\n\nTITLE: Encoding Parameter Definition - YAML\nDESCRIPTION: This YAML snippet defines the -Encoding parameter for the Export-MamlCommandHelp cmdlet. It specifies the encoding to use when writing the MAML file, defaulting to `$OutputEncoding` if no value is provided.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/Export-MamlCommandHelp.md#_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.Text.Encoding\nParameter Sets: (All)\nAliases:\nAccepted values:\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get metadata from files in a folder (PowerShell)\nDESCRIPTION: This example demonstrates retrieving metadata from all markdown files within a specified folder. The `Get-MarkdownMetadata` cmdlet is invoked with the `-Path` parameter, pointing to the directory containing the markdown files. The example displays the key-value pairs extracted from each file.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/PlatyPS/Get-MarkdownMetadata.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS C:\\> Get-MarkdownMetadata -Path \".\\docs\"\n\nKey                Value\n-- -                -----\nexternal help file platyPS-help.xml\nschema             2.0.0\nexternal help file platyPS-help.xml\nschema             2.0.0\nexternal help file platyPS-help.xml\nschema             2.0.0\nexternal help file platyPS-help.xml\nschema             2.0.0\nexternal help file platyPS-help.xml\nschema             2.0.0\nexternal help file platyPS-help.xml\nschema             2.0.0\nexternal help file platyPS-help.xml\nschema             2.0.0\nexternal help file platyPS-help.xml\nschema             2.0.0\n```\n\n----------------------------------------\n\nTITLE: Unlocking and Using Secrets from SecretStore in PowerShell\nDESCRIPTION: This snippet demonstrates how to unlock the SecretStore vault using a password imported from an encrypted XML file. It uses the `Unlock-SecretStore` cmdlet to unlock the vault for the current session, and then retrieves a secret named 'CIJobSecret' using `Get-Secret`. This enables the automation script to access and use the stored secret. Dependencies: configured SecretStore vault and secure password file.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/SecretManagement/how-to/using-secrets-in-automation.md#_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\n$password = Import-CliXml -Path $securePasswordPath\nUnlock-SecretStore -Password $password\n$automationPassword = Get-Secret -Name CIJobSecret\n```\n\n----------------------------------------\n\nTITLE: Incorrect DSC Function Definitions (Non-Class)\nDESCRIPTION: This snippet shows incorrect definitions of Get-TargetResource, Set-TargetResource, and Test-TargetResource functions in a DSC resource, lacking explicit OutputType attributes, potentially leading to incorrect data type handling by DSC. These are the wrong way to define dsc resources.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/DSCReturnCorrectTypesForDSCFunctions.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nfunction Get-TargetResource\n{\n    param\n    (\n        [parameter(Mandatory = $true)]\n        [String]\n        $Name\n    )\n    ...\n}\n\nfunction Set-TargetResource\n{\n    param\n    (\n        [parameter(Mandatory = $true)]\n        [String]\n        $Name\n    )\n    ...\n}\n\nfunction Test-TargetResource\n{\n    param\n    (\n        [parameter(Mandatory = $true)]\n        [String]\n        $Name\n    )\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PSProvideCommentHelp Rule in PowerShell\nDESCRIPTION: This code snippet demonstrates how to configure the `PSProvideCommentHelp` rule in PowerShell Script Analyzer. It shows how to enable or disable the rule, specify whether to check only exported functions/cmdlets, set the comment style (block or line), enable VSCode snippet correction, and define the placement of the help comments relative to the function definition.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/ProvideCommentHelp.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nRules = @{\n    PSProvideCommentHelp = @{\n        Enable = $true\n        ExportedOnly = $false\n        BlockComment = $true\n        VSCodeSnippetCorrection = $false\n        Placement = 'before'\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Bypassing Output Handling (JSON)\nDESCRIPTION: Shows how to configure Crescendo to bypass output handling entirely by setting the HandlerType to \"ByPass\" in the OutputHandlers section of the configuration file. This can be useful when the native command's output changes based on whether it's sent to the screen or the pipeline, which can cause unwanted results with Crescendo's pipeline-based output handling.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/Crescendo/whats-new/whats-new-in-crescendo-11.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n        \"ParameterSetName\": \"Default\",\n        \"HandlerType\": \"ByPass\"\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Initializing ScriptAnalyzer in C#\nDESCRIPTION: This C# snippet demonstrates how to initialize ScriptAnalyzer by using public interfaces. It shows the `Initialize` method with its parameters, which includes the runspace, output writer, customized rule path, and filters for rules by name and severity, as well as the `suppressedOnly` flag and profile settings.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/using-scriptanalyzer.md#_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.Windows.PowerShell.ScriptAnalyzer;\n\npublic void Initialize(System.Management.Automation.Runspaces.Runspace runspace,\nMicrosoft.Windows.PowerShell.ScriptAnalyzer.IOutputWriter outputWriter,\n[string[] customizedRulePath = null],\n[string[] includeRuleNames = null],\n[string[] excludeRuleNames = null],\n[string[] severity = null],\n[bool suppressedOnly = false],\n[string profile = null])\n```\n\n----------------------------------------\n\nTITLE: Update-MarkdownCommandHelp Syntax - LiteralPath\nDESCRIPTION: This PowerShell syntax block illustrates how to use Update-MarkdownCommandHelp with the -LiteralPath parameter. -LiteralPath treats the path exactly as it is typed, without wildcard interpretation. -NoBackup suppresses backup creation. -PassThru returns the updated object.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/Update-MarkdownCommandHelp.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nUpdate-MarkdownCommandHelp -LiteralPath <string[]> [-NoBackup] [-PassThru] [-WhatIf] [-Confirm]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Incorrect PowerShell Function with Multiple Type Attributes\nDESCRIPTION: This PowerShell function demonstrates the incorrect usage of multiple type specifiers on a parameter. The `$Switch` parameter is defined with both `[switch]` and `[int]` attributes, which can lead to runtime errors.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/AvoidMultipleTypeAttributes.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nfunction Test-Script\n{\n    [CmdletBinding()]\n    Param\n    (\n        [switch]\n        [int]\n        $Switch\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a DiagnosticRecord - PowerShell\nDESCRIPTION: This code snippet demonstrates how to create a `DiagnosticRecord` object in PowerShell, which is the required output format for PSScriptAnalyzer custom rules. It highlights the four mandatory properties: `Message`, `Extent`, `RuleName`, and `Severity`.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/create-custom-rule.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\n$result = [Microsoft.Windows.PowerShell.ScriptAnalyzer.Generic.DiagnosticRecord[]]@{\n    \"Message\"  = \"This is a sample rule\"\n    \"Extent\"   = $ast.Extent\n    \"RuleName\" = $PSCmdlet.MyInvocation.InvocationName\n    \"Severity\" = \"Warning\"\n}\n```\n\n----------------------------------------\n\nTITLE: YAML Parameter Definition for WhatIf\nDESCRIPTION: This YAML snippet defines the WhatIf parameter for the New-HelpCabinetFile cmdlet. It specifies that it's a SwitchParameter, which allows it to be present or absent, and provides an alias 'wi'. It's an optional parameter, and its default value is False. When present, the cmdlet shows what would happen without actually running.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/New-HelpCabinetFile.md#_snippet_5\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.Management.Automation.SwitchParameter\nParameter Sets: (All)\nAliases: wi\nAccepted values:\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Configuring PSAvoidUsingPositionalParameters Rule\nDESCRIPTION: This snippet shows how to configure the `PSAvoidUsingPositionalParameters` rule within PowerShell Script Analyzer. It demonstrates setting the `CommandAllowList` to exclude specific commands from the rule and enabling or disabling the rule using the `Enable` parameter. This configuration allows users to customize the rule's behavior according to their specific needs and coding conventions.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/AvoidUsingPositionalParameters.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nRules = @{\n    PSAvoidUsingPositionalParameters = @{\n        CommandAllowList = 'Join-Path', 'MyCmdletOrScript'\n        Enable           = $true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Convert Markdown Help to New Format - Folder\nDESCRIPTION: This example demonstrates how to import Markdown help files in the old format from a folder and export them in the new format to a new folder. The new markdown files are written to folder named for the module they belong to.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/Export-MarkdownCommandHelp.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n$mdfiles = Measure-PlatyPSMarkdown -Path .\\v1\\Microsoft.PowerShell.PlatyPS\\*.md\n$mdfiles | Where-Object Filetype -match 'CommandHelp' |\n    Import-MarkdownCommandHelp -Path {$_.FilePath} |\n    Export-MarkdownCommandHelp -OutputFolder .\\v1\\new\n```\n\n----------------------------------------\n\nTITLE: NoBackup Parameter (YAML)\nDESCRIPTION: Defines the -NoBackup parameter in YAML, which suppresses the creation of a backup file before updating the markdown file.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/Update-MarkdownCommandHelp.md#_snippet_5\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.Management.Automation.SwitchParameter\nParameter Sets: (All)\nAliases:\nAccepted values:\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition - OutputFolder - YAML\nDESCRIPTION: Defines the `-OutputFolder` parameter for the `New-MarkdownCommandHelp` cmdlet. This parameter specifies the location where the generated Markdown help files are written. It is a required parameter.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/New-MarkdownCommandHelp.md#_snippet_13\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\nAccepted values:\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Incorrect Switch Parameter Definition in PowerShell\nDESCRIPTION: This code snippet demonstrates the incorrect way of defining a switch parameter with a default value of `$true`. This is considered bad practice because switch parameters are inherently designed to be `$false` if not specified.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/AvoidDefaultValueSwitchParameter.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nfunction Test-Script\n{\n    [CmdletBinding()]\n    Param\n    (\n        [String]\n        $Param1,\n\n        [switch]\n        $Switch=$True\n    )\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Define OutputFolder Parameter (YAML)\nDESCRIPTION: Defines the `-OutputFolder` parameter, specifying the path of the folder where markdown help files will be created.  This parameter is required and applicable to all parameter sets.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/PlatyPS/New-MarkdownHelp.md#_snippet_5\n\nLANGUAGE: YAML\nCODE:\n```\nType: String\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Add Ollama check to Chat method\nDESCRIPTION: This C# code extends the Chat method to check if the Ollama process is running. If Ollama is not running, it renders an error message using the AI Shell host and returns false, indicating that the agent cannot serve the query.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/AIShell/developer/create-ollama-agent.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\npublic async Task<bool> Chat(string input, IShell shell)\n{\n    // Get the shell host\n    IHost host = shell.Host;\n\n    // get the cancellation token\n    CancellationToken token = shell.CancellationToken;\n\n    if (Process.GetProcessesByName(\"ollama\").Length is 0)\n    {\n        host.RenderFullResponse(\"Please be sure that Ollama is installed and the server is running. Ensure that you have met all the prerequisites in the README for this agent.\");\n        return false;\n    }\n\n    // Calls to the API will go here\n\n    return true;\n}\n```\n\n----------------------------------------\n\nTITLE: SecretStore Configuration Parameter: PasswordTimeout (YAML)\nDESCRIPTION: This YAML snippet documents the -PasswordTimeout parameter for the Set-SecretStoreConfiguration cmdlet. It specifies the type, parameter sets, aliases, whether it's required, position, default value, and whether it accepts pipeline input or wildcard characters.  It configures how long the SecretStore remains unlocked after authentication.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.SecretStore/Set-SecretStoreConfiguration.md#_snippet_8\n\nLANGUAGE: YAML\nCODE:\n```\nType: Int32\nParameter Sets: ParameterSet\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Suppressing Rules with Target Property - PowerShell\nDESCRIPTION: This example illustrates the use of the `Target` property of `SuppressMessageAttribute` to restrict rule suppression to functions matching a regular expression or wildcard pattern. It suppresses the `PSAvoidUsingWriteHost` rule in `start-bar` and `start-baz` but not in `start-foo` and `start-bam`.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/using-scriptanalyzer.md#_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\n[System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingWriteHost', '',\n    Scope='Function', Target='start-ba[rz]')]\nparam()\nfunction start-foo {\n    write-host \"start-foo\"\n}\n\nfunction start-bar {\n    write-host \"start-bar\"\n}\n\nfunction start-baz {\n    write-host \"start-baz\"\n}\n\nfunction start-bam {\n    write-host \"start-bam\"\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Markdown Help - PowerShell\nDESCRIPTION: This code updates existing Markdown files for a PowerShell module using the `Update-MarkdownHelpModule` cmdlet. It specifies the path to the folder containing the Markdown files, refreshes the module page, and includes other options such as ordering parameters alphabetically and updating input/output types.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PlatyPS/create-help-using-platyps.md#_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\n$parameters = @{\n    Path = <folder with Markdown>\n    RefreshModulePage = $true\n    AlphabeticParamsOrder = $true\n    UpdateInputOutput = $true\n    ExcludeDontShow = $true\n    LogPath = <path to store log file>\n    Encoding = [System.Text.Encoding]::UTF8\n}\nUpdate-MarkdownHelpModule @parameters\n```\n\n----------------------------------------\n\nTITLE: Querying and Removing WMI Objects (Incorrect)\nDESCRIPTION: This code snippet demonstrates the incorrect usage of `Get-WmiObject` and `Remove-WmiObject` to query for processes with names starting with 'myprocess' and then remove them. It's recommended to use `Get-CimInstance` and `Remove-CimInstance` instead for better compatibility and adherence to WS-Management standards.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/AvoidUsingWMICmdlet.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nGet-WmiObject -Query 'Select * from Win32_Process where name LIKE \"myprocess%\"' | Remove-WmiObject\n```\n\n----------------------------------------\n\nTITLE: SecretStore Configuration Parameter: Authentication (YAML)\nDESCRIPTION: This YAML snippet documents the -Authentication parameter for the Set-SecretStoreConfiguration cmdlet. It specifies the type, parameter sets, aliases, whether it's required, position, default value, and whether it accepts pipeline input or wildcard characters. It defines how access to the SecretStore is authenticated (Password or None).\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.SecretStore/Set-SecretStoreConfiguration.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\nType: Authenticate\nParameter Sets: ParameterSet\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: Password\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Code Save Arguments & Options\nDESCRIPTION: Details the arguments and options for the `/code save` subcommand. Requires the file path to save the code to. Options include appending to the file and displaying the help information.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/AIShell/how-to/aishell-reference.md#_snippet_9\n\nLANGUAGE: text\nCODE:\n```\nArguments:\n\n- `<file>`  The file path to save the code to.\n\nOptions:\n\n- `--append` Append to the end of the file.\n- `-h`, `--help` Show help and usage information\n```\n\n----------------------------------------\n\nTITLE: Name Parameter Definition - YAML\nDESCRIPTION: This YAML snippet defines the -Name parameter for the Get-ScriptAnalyzerRule cmdlet. It specifies the parameter's type, if it is required or not, its position, default value, and whether it accepts pipeline input and wildcard characters. This parameter allows the user to get rules with the specified names or name patterns.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/PSScriptAnalyzer/Get-ScriptAnalyzerRule.md#_snippet_6\n\nLANGUAGE: YAML\nCODE:\n```\nType: String[]\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: All rules\nAccept pipeline input: False\nAccept wildcard characters: True\n```\n\n----------------------------------------\n\nTITLE: Export CommandHelp objects to MAML - PowerShell\nDESCRIPTION: This example demonstrates how to create MAML help files for a module. It uses Measure-PlatyPSMarkdown to find Markdown files, filters for CommandHelp files, imports them using Import-MarkdownCommandHelp, and then exports them to MAML files in the specified output folder.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/Export-MamlCommandHelp.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n$mdfiles = Measure-PlatyPSMarkdown -Path .\\v2\\Microsoft.PowerShell.PlatyPS\\*.md\n$mdfiles | Where-Object Filetype -match 'CommandHelp' |\n    Import-MarkdownCommandHelp -Path {$_.FilePath} |\n    Export-MamlCommandHelp -OutputFolder .\\maml\n```\n\n----------------------------------------\n\nTITLE: SecretStore Configuration Parameter: Password (YAML)\nDESCRIPTION: This YAML snippet documents the -Password parameter for the Set-SecretStoreConfiguration cmdlet. It specifies the type, parameter sets, aliases, whether it's required, position, default value, and whether it accepts pipeline input or wildcard characters.  It is used to set or authorize password changes for the SecretStore.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.SecretStore/Set-SecretStoreConfiguration.md#_snippet_7\n\nLANGUAGE: YAML\nCODE:\n```\nType: SecureString\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: YAML Parameter Definition for Confirm\nDESCRIPTION: This YAML snippet defines the Confirm parameter for the New-HelpCabinetFile cmdlet. It specifies that it's a SwitchParameter, which allows it to be present or absent, and provides an alias 'cf'. It is an optional parameter, and its default value is False, meaning confirmation is not prompted by default.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/New-HelpCabinetFile.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.Management.Automation.SwitchParameter\nParameter Sets: (All)\nAliases: cf\nAccepted values:\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Create Markdown help files for a module - PowerShell\nDESCRIPTION: This example demonstrates how to create Markdown help files for a specified PowerShell module using the `New-MarkdownCommandHelp` cmdlet. It uses a splatting technique for passing parameters to the cmdlet.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/New-MarkdownCommandHelp.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n$newMarkdownCommandHelpSplat = @{\n    ModuleInfo = Get-Module Microsoft.PowerShell.PlatyPS\n    OutputFolder = '.'\n    HelpVersion = '1.0.0.0'\n    WithModulePage = $true\n}\nNew-MarkdownCommandHelp @newMarkdownCommandHelpSplat\n```\n\n----------------------------------------\n\nTITLE: Crescendo Configuration for Get-FizzBuzz Cmdlet\nDESCRIPTION: This JSON configuration defines a Crescendo cmdlet named `Get-FizzBuzz`. It specifies the verb, noun, original name (native command), a required parameter `Key`, and associates the cmdlet with a custom `FizzToolParser` function as its output handler. The schema URL is also specified.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/Crescendo/advanced/handling-errors.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"$schema\": \"https://aka.ms/PowerShell/Crescendo/Schemas/2022-06\",\n    \"Commands\": [\n        {\n            \"Verb\": \"Get\",\n            \"Noun\": \"FizzBuzz\",\n            \"OriginalName\": \"fizztool\",\n            \"Parameters\": [\n                {\n                    \"Name\": \"Key\",\n                    \"OriginalName\": \"--key\",\n                    \"ParameterType\": \"string\",\n                    \"OriginalPosition\": 0,\n                    \"Required\": true\n                },\n            ],\n            \"OutputHandlers\": [\n                {\n                    \"ParameterSetName\": \"Default\",\n                    \"HandlerType\": \"Function\",\n                    \"Handler\": \"FizzToolParser\"\n                }\n            ]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Update-MarkdownModuleFile Syntax - LiteralPath Parameter Set - PowerShell\nDESCRIPTION: This syntax describes the usage of `Update-MarkdownModuleFile` cmdlet with the `-LiteralPath` parameter set. The `LiteralPath` parameter specifies the exact path to the markdown module file. Wildcard characters are not interpreted.  The `CommandHelp` objects provide the content to update in the module file.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/Update-MarkdownModuleFile.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nUpdate-MarkdownModuleFile [-CommandHelp] <CommandHelp[]> -LiteralPath <string>\n [-Encoding <Encoding>] [-Force] [-HelpUri <string>] [-HelpInfoUri <string>]\n [-HelpVersion <version>] [-Locale <string>] [-Metadata <hashtable>] [-NoBackup] [-WhatIf]\n [-Confirm] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Correct PowerShell Function Definition - Renaming Reserved Parameter\nDESCRIPTION: This code snippet showcases the correct way to define a PowerShell advanced function that avoids redefining common parameters. The `$ErrorVariable` parameter has been renamed to `$Err` to prevent conflicts with the reserved common parameter. The `CmdletBinding` attribute creates an advanced function, and the common parameters are implicitly available.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/ReservedParams.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nfunction Test\n{\n    [CmdletBinding()]\n    Param\n    (\n        $Err,\n        $Parameter2\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Path Parameter Definition\nDESCRIPTION: Defines the -Path parameter for the Import-MarkdownModuleFile cmdlet.  This parameter specifies the path to the markdown files, allowing wildcard characters. It accepts an array of strings and supports pipeline input by value.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/Import-MarkdownModuleFile.md#_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.String[]\nParameter Sets: Path\nAliases:\nAccepted values:\nRequired: True\nPosition: 0\nDefault value: None\nAccept pipeline input: True (ByValue)\nAccept wildcard characters: True\n```\n\n----------------------------------------\n\nTITLE: Password Parameter Definition\nDESCRIPTION: YAML definition for the -Password parameter of the Reset-SecretStore cmdlet. It specifies the type, requirement, position, default value (None), pipeline input, and wildcard characters. The parameter specifies the password for SecretStore.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.SecretStore/Reset-SecretStore.md#_snippet_6\n\nLANGUAGE: YAML\nCODE:\n```\nType: SecureString\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Empty Catch Block - PowerShell\nDESCRIPTION: Demonstrates an incorrect usage of an empty catch block in PowerShell.  This prevents proper error handling when a `DivideByZeroException` occurs within the try block.  No dependencies are needed. Input: An arithmetic operation that causes a divide-by-zero error.  Output: None, as the exception is caught but not handled.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/AvoidUsingEmptyCatchBlock.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\ntry\n{\n    1/0\n}\ncatch [DivideByZeroException]\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Set Secret with SecureString - PowerShell\nDESCRIPTION: This example demonstrates how to use the Set-Secret cmdlet with the SecureStringParameterSet. It shows the syntax for setting a secret with a SecureString value, along with optional vault and metadata parameters. The NoClobber, WhatIf, and Confirm parameters are also shown, as well as the CommonParameters.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.SecretManagement/Set-SecretInfo.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nSet-Secret [-Name] <String> -SecureStringSecret <SecureString> [[-Vault] <String>]\n [[-Metadata] <Hashtable>] [-NoClobber] [-WhatIf] [-Confirm] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: DSC Class Resource: Missing Get Function (PowerShell)\nDESCRIPTION: This code snippet demonstrates an incorrect implementation of a class-based DSC resource because it is missing the `Get` function with the correct return type. The `Get` function is required to retrieve the current state of the resource. The function should return the type of the DSC resource class itself (`MyDSCResource`).\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/DSCStandardDSCFunctionsInResource.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n[DscResource()]\nclass MyDSCResource\n{\n    [DscProperty(Key)]\n    [string] $Name\n\n    [void] Set()\n    {\n        ...\n    }\n\n    [bool] Test()\n    {\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Correct DSC Function Definitions (Non-Class)\nDESCRIPTION: This snippet demonstrates the correct way to define Get-TargetResource, Set-TargetResource, and Test-TargetResource functions in a DSC resource by using the OutputType attribute to explicitly define the return types: Hashtable for Get-TargetResource and boolean for Test-TargetResource. Set-TargetResource should return nothing.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/DSCReturnCorrectTypesForDSCFunctions.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nfunction Get-TargetResource\n{\n    [OutputType([Hashtable])]\n    param\n    (\n        [parameter(Mandatory = $true)]\n        [String]\n        $Name\n    )\n    ...\n}\n\nfunction Set-TargetResource\n{\n    param\n    (\n        [parameter(Mandatory = $true)]\n        [String]\n        $Name\n    )\n    ...\n}\n\nfunction Test-TargetResource\n{\n    [OutputType([System.Boolean])]\n    param\n    (\n        [parameter(Mandatory = $true)]\n        [String]\n        $Name\n    )\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Format script with hashtable settings - PowerShell\nDESCRIPTION: This example shows how to format a PowerShell script using `Invoke-Formatter` with custom settings defined in a hashtable. The hashtable specifies which rules to include and their configurations (e.g., `PSPlaceOpenBrace` and `PSUseConsistentIndentation`).\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/PSScriptAnalyzer/Invoke-Formatter.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n$scriptDefinition = @'\nfunction foo {\n\"hello\"\n}\n'@\n\n$settings = @{\n    IncludeRules = @(\"PSPlaceOpenBrace\", \"PSUseConsistentIndentation\")\n    Rules = @{\n        PSPlaceOpenBrace = @{\n            Enable = $true\n            OnSameLine = $false\n        }\n        PSUseConsistentIndentation = @{\n            Enable = $true\n        }\n    }\n}\n\nInvoke-Formatter -ScriptDefinition $scriptDefinition -Settings $settings\n```\n\n----------------------------------------\n\nTITLE: Corrected Unused Parameter Example\nDESCRIPTION: This PowerShell code snippet shows the corrected version of the previous example, where the previously unused parameter (`$Parameter2`) is now being used within the function scope. This resolves the warning issued by the `ReviewUnusedParameter` rule. Both `$Parameter1` and `$Parameter2` are now used within the function scope.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/ReviewUnusedParameter.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nfunction Test-Parameter\n{\n    Param (\n        $Parameter1,\n\n        # now this parameter is being called in the same scope\n        $Parameter2\n    )\n\n    Get-Something $Parameter1 $Parameter2\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Script Path (Invoke-ScriptAnalyzer, PowerShell)\nDESCRIPTION: The `-Path` parameter specifies the path to the script or module to be analyzed. Wildcard characters are supported, allowing for the analysis of multiple files or directories. The parameter accepts paths to `.ps1` and `.psm1` files, and ignores other file types.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/PSScriptAnalyzer/Invoke-ScriptAnalyzer.md#_snippet_16\n\nLANGUAGE: YAML\nCODE:\n```\nType: String\nParameter Sets: Path_SuppressedOnly, Path_IncludeSuppressed\nAliases: PSPath\n\nRequired: True\nPosition: 0\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: True\n```\n\n----------------------------------------\n\nTITLE: Correct Credential Parameter Declaration - PowerShell\nDESCRIPTION: This code snippet shows the correct way to declare a Credential parameter in a PowerShell function. The Credential parameter is defined as a PSCredential type, which is the recommended practice.  Using PSCredential ensures secure credential handling and aligns with PowerShell best practices.  This example demonstrates the recommended approach for defining credential parameters.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/UsePSCredentialType.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nfunction Credential([PSCredential]$Credential)\n{\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Path Parameter - YAML\nDESCRIPTION: This YAML snippet defines the `-Path` parameter for the `Import-YamlModuleFile` cmdlet. It specifies a path to one or more locations containing Yaml module files. Supports wildcard characters.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/Import-YamlModuleFile.md#_snippet_5\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.String[]\nParameter Sets: Path\nAliases:\nAccepted values:\nRequired: True\nPosition: 0\nDefault value: None\nAccept pipeline input: True (ByValue)\nAccept wildcard characters: True\n```\n\n----------------------------------------\n\nTITLE: Creating Ollama Chat Service in C#\nDESCRIPTION: This code creates a C# chat service (`OllamaChatService`) that interacts with the Ollama API. It includes methods for preparing the chat request (`PrepareForChat`), sending the request, and processing the response (`GetChatResponseAsync`). It uses `HttpClient` for making HTTP requests and `System.Text.Json` for JSON serialization and deserialization.  The `AIShell.Abstraction` namespace is required and the `AIShell.Abstraction` package is required as a dependency.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/AIShell/developer/create-ollama-agent.md#_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nusing System.Net.Http.Headers;\nusing System.Text;\nusing System.Text.Json;\n\nusing AIShell.Abstraction;\n\nnamespace AIShell.Ollama.Agent;\n\ninternal class OllamaChatService : IDisposable\n{\n    /// <summary>\n    /// Ollama endpoint to call to generate a response\n    /// </summary>\n    internal const string Endpoint = \"http://localhost:11434/api/generate\";\n\n    /// <summary>\n    /// Http client\n    /// </summary>\n    private readonly HttpClient _client;\n\n    /// <summary>\n    /// Initialization method to initialize the http client\n    /// </summary>\n\n    internal OllamaChatService()\n    {\n        _client = new HttpClient();\n    }\n\n    /// <summary>\n    /// Dispose of the http client\n    /// </summary>\n    public void Dispose()\n    {\n        _client.Dispose();\n    }\n\n    /// <summary>\n    /// Preparing chat with data to be sent\n    /// </summary>\n    /// <param name=\"input\">The user input from the chat experience</param>\n    /// <returns>The HTTP request message</returns>\n    private HttpRequestMessage PrepareForChat(string input)\n    {\n        // Main data to send to the endpoint\n        var requestData = new Query\n        {\n            model = \"phi3\",\n            prompt = input,\n            stream = false\n        };\n\n        var json = JsonSerializer.Serialize(requestData);\n\n        var data = new StringContent(json, Encoding.UTF8, \"application/json\");\n        var request = new HttpRequestMessage(HttpMethod.Post, Endpoint) { Content = data };\n\n        return request;\n    }\n\n    /// <summary>\n    /// Getting the chat response async\n    /// </summary>\n    /// <param name=\"context\">Interface for the status context used when displaying a spinner.</param>\n    /// <param name=\"input\">The user input from the chat experience</param>\n    /// <param name=\"cancellationToken\">The cancellation token to exit out of request</param>\n    /// <returns>Response data from the API call</returns>\n    internal async Task<ResponseData> GetChatResponseAsync(IStatusContext context, string input, CancellationToken cancellationToken)\n    {\n        try\n        {\n            HttpRequestMessage request = PrepareForChat(input);\n            HttpResponseMessage response = await _client.SendAsync(request, cancellationToken);\n            response.EnsureSuccessStatusCode();\n\n            context?.Status(\"Receiving Payload ...\");\n            Console.Write(response.Content);\n            var content = await response.Content.ReadAsStreamAsync(cancellationToken);\n            return JsonSerializer.Deserialize<ResponseData>(content);\n        }\n        catch (OperationCanceledException)\n        {\n            // Operation was cancelled by user.\n        }\n\n        return null;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: ModuleName Parameter Definition\nDESCRIPTION: Defines the `-ModuleName` parameter for the `Export-CrescendoModule` cmdlet. It specifies the name of the module file to create, is required, and does not accept pipeline input or wildcard characters.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.Crescendo/Export-CrescendoModule.md#_snippet_5\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: 0\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: ConvertTo-SecureString with AsPlainText (Incorrect)\nDESCRIPTION: This PowerShell snippet demonstrates the incorrect usage of `ConvertTo-SecureString` with the `-AsPlainText` parameter, which exposes the secure code in plain text. The `Read-Host` cmdlet prompts the user for input, and then `ConvertTo-SecureString` attempts to encrypt it, but the `-AsPlainText` parameter defeats the purpose. This approach is not recommended for handling sensitive data.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/AvoidUsingConvertToSecureStringWithPlainText.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n$UserInput = Read-Host 'Please enter your secure code'\n$EncryptedInput = ConvertTo-SecureString -String $UserInput -AsPlainText -Force\n```\n\n----------------------------------------\n\nTITLE: New-MarkdownAboutHelp Syntax - PowerShell\nDESCRIPTION: Defines the syntax for the `New-MarkdownAboutHelp` cmdlet.  It takes an `OutputFolder` (string) as a mandatory parameter and an optional `AboutName` (string).  It also supports `CommonParameters`.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/PlatyPS/New-MarkdownAboutHelp.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-MarkdownAboutHelp [-OutputFolder] <String> [[-AboutName] <String>] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Incorrect Cmdlet Casing - PowerShell\nDESCRIPTION: This snippet demonstrates the incorrect casing of the `Invoke-Command` cmdlet and `-RunAsAdministrator` parameter. The rule suggests using the exact casing for better readability and consistency.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/UseCorrectCasing.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\ninvoke-command { 'foo' } -runasadministrator\n```\n\n----------------------------------------\n\nTITLE: Importing Yaml Command Help using Path - PowerShell\nDESCRIPTION: This code snippet demonstrates how to use the `Import-YamlCommandHelp` cmdlet to import Yaml files from a specified path. It selects the `Title` property of the imported objects. It converts the Yaml file in a specified directory and converts to CommandHelp objects, enabling to export to different formats.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/Import-YamlCommandHelp.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nImport-YamlCommandHelp -Path .\\v2\\yaml\\*-*.yml | Select-Object Title\n```\n\n----------------------------------------\n\nTITLE: Including Default Rules (Invoke-ScriptAnalyzer, PowerShell)\nDESCRIPTION: The `-IncludeDefaultRules` parameter ensures that the default rules are executed along with any custom rules specified. This is useful when using custom rulesets but still wanting to leverage the standard analysis provided by PSScriptAnalyzer.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/PSScriptAnalyzer/Invoke-ScriptAnalyzer.md#_snippet_13\n\nLANGUAGE: YAML\nCODE:\n```\nType: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Analyzing Path with ScriptAnalyzer in C#\nDESCRIPTION: This C# snippet illustrates how to analyze a file path using ScriptAnalyzer. It shows the `AnalyzePath` method, which takes the path to the script as input and a boolean value to enable recursive search in subdirectories. It returns a collection of `DiagnosticRecord` objects representing the analysis results.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/using-scriptanalyzer.md#_snippet_18\n\nLANGUAGE: csharp\nCODE:\n```\npublic System.Collections.Generic.IEnumerable<DiagnosticRecord> AnalyzePath(string path,\n    [bool searchRecursively = false])\n```\n\n----------------------------------------\n\nTITLE: Collection Comparison with Null in PowerShell\nDESCRIPTION: This example demonstrates how PowerShell compares a collection to a scalar value. Each element in the collection is compared, and any matching elements are returned.  In the case of `$null`, no elements are returned, but the result is still different than evaluating if the entire collection is `$null`.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/PossibleIncorrectComparisonWithNull.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nPS> 1,2,3,1,2 -eq $null\nPS> 1,2,3,1,2 -eq 1\n1\n1\nPS> (1,2,3,1,2 -eq $null).count\n0\nPS> (1,2,$null,3,$null,1,2 -eq $null).count\n2\n```\n\n----------------------------------------\n\nTITLE: Incorrect Credential Parameter Declaration - PowerShell\nDESCRIPTION: This code snippet shows an incorrect way to declare a Credential parameter in a PowerShell function.  The Credential parameter is defined as a String, which is not the recommended approach. The correct way is to use the PSCredential type for enhanced security and consistent credential handling. This example demonstrates what to avoid when defining credential parameters.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/UsePSCredentialType.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nfunction Credential([String]$Credential)\n{\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: ConfigurationFile Parameter Definition\nDESCRIPTION: Defines the `-ConfigurationFile` parameter for the `Export-CrescendoModule` cmdlet. It specifies that this parameter accepts an array of strings representing the JSON configuration files for the module proxies, is required, and accepts pipeline input by property name and wildcard characters.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.Crescendo/Export-CrescendoModule.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.String[]\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: 1\nDefault value: None\nAccept pipeline input: True (ByPropertyName)\nAccept wildcard characters: True\n```\n\n----------------------------------------\n\nTITLE: Description Parameter in YAML\nDESCRIPTION: This YAML snippet shows the definition of the `-description` parameter for the `New-ExampleInfo` cmdlet. The YAML specifies the type, parameter sets, aliases, required status, position, default value, and pipeline input settings for the parameter. This is part of defining cmdlet parameters in Crescendo.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.Crescendo/New-ExampleInfo.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: 1\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Import Cmdlet Markdown Files Example - PowerShell\nDESCRIPTION: This example demonstrates how to import cmdlet Markdown files from a folder and convert them to CommandHelp objects. It uses Measure-PlatyPSMarkdown to identify CommandHelp files, then imports them using Import-MarkdownCommandHelp and selects the 'Title' property from the resulting objects.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/Import-MarkdownCommandHelp.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n$mdfiles = Measure-PlatyPSMarkdown -Path .\\v2\\Microsoft.PowerShell.PlatyPS\\*.md\n$mdfiles | Where-Object Filetype -match 'CommandHelp' |\n    Import-MarkdownCommandHelp -Path {$_.FilePath} |\n    Select-Object Title\n```\n\n----------------------------------------\n\nTITLE: ApplicableTag Parameter Definition\nDESCRIPTION: Specifies that the `-ApplicableTag` parameter requires an array of strings representing tags used as a filter. Cmdlets or parameters are ignored if their `applicable` metadata doesn't contain any of the provided tags. If `applicable` is omitted, the cmdlet or parameter is always present.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/PlatyPS/New-ExternalHelp.md#_snippet_8\n\nLANGUAGE: YAML\nCODE:\n```\nType: String[]\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Import-MarkdownCommandHelp Syntax - LiteralPath Parameter Set - PowerShell\nDESCRIPTION: Defines the syntax for the Import-MarkdownCommandHelp cmdlet using the LiteralPath parameter set. The -LiteralPath parameter specifies the exact path to the Markdown files, without wildcard interpretation. Common parameters are also supported.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/Import-MarkdownCommandHelp.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nImport-MarkdownCommandHelp -LiteralPath <string[]> [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Encoding Parameter - YAML\nDESCRIPTION: Defines the `-Encoding` parameter for the `Update-MarkdownHelp` cmdlet, specifying the character encoding for the external help file. The value is a `System.Text.Encoding` object and the default value is UTF8 without BOM. This allows customizing the encoding of the updated files.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/PlatyPS/Update-MarkdownHelp.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\nType: Encoding\nParameter Sets: (All)\nAliases: \n\nRequired: False\nPosition: 1\nDefault value: UTF8 without BOM\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Incorrect Member Invocation PowerShell\nDESCRIPTION: This code demonstrates an incorrect way of invoking a member in PowerShell using string concatenation, which can lead to unexpected behavior.  It attempts to access the 'length' property of a string object by dynamically creating the property name. The expected input is a string and the output is potentially an error or unexpected result.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/AvoidInvokingEmptyMembers.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n$MyString = 'abc'\n$MyString.('len'+'gth')\n```\n\n----------------------------------------\n\nTITLE: Importing MAML Help from a File using Path - PowerShell\nDESCRIPTION: This example demonstrates how to import a MAML help file located at the specified path. The Import-MamlHelp cmdlet is used with the -Path parameter to specify the location of the MAML XML file.  The MAML file is then parsed and converted into CommandHelp objects.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/Import-MamlHelp.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nImport-MamlHelp -Path .\\maml\\Microsoft.PowerShell.PlatyPS.dll-Help.xml\n```\n\n----------------------------------------\n\nTITLE: Set Secret Metadata Example - PowerShell\nDESCRIPTION: This example demonstrates how to add metadata to a secret using the Set-SecretInfo (should be Set-Secret) cmdlet. It sets an expiration date for a secret named `Secret1` stored in `Vault1`. It then retrieves the metadata to verify the added information.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.SecretManagement/Set-SecretInfo.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nSet-SecretInfo -Name Secret1 -Vault Vault1 -Metadata @{ Expiration = ([datetime]::new(2022, 5, 1)) }\nGet-SecretInfo -Name Secret1 -Vault Vault1 | Select-Object Name,Metadata\n```\n\nLANGUAGE: powershell\nCODE:\n```\nName         Metadata\n----\t         --------\nSecret1 {[Expiration, 5/1/2022 12:00:00 AM]}\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition in YAML\nDESCRIPTION: This YAML snippet shows the definition of the `-command` parameter for the `New-ExampleInfo` cmdlet. The YAML specifies the type, parameter sets, aliases, required status, position, default value, and pipeline input settings for the parameter. This is part of defining cmdlet parameters in Crescendo.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.Crescendo/New-ExampleInfo.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: 0\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Create About Topic MD File - PowerShell\nDESCRIPTION: Demonstrates how to create a new PowerShell About Topic Markdown file using `New-MarkdownAboutHelp`. It specifies the output folder and the name of the about topic.  Then lists the files in the output directory.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/PlatyPS/New-MarkdownAboutHelp.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS C:\\> New-MarkdownAboutHelp -OutputFolder C:\\Test -AboutName TestAboutTopic\nPS C:\\> Get-ChildItem C:\\Test\n\n    Directory: C:\\Test\n\n\nMode                LastWriteTime         Length Name\n----\t\t\t\t\t\t\t\t\t\t\t\t\t-------------\t\t\t------ ----\n-a----\t\t\t\t\t7/13/2016   2:12 PM\t\t\t\t  1491 about_TestAboutTopic.md\n```\n\n----------------------------------------\n\nTITLE: Incorrect Comparison Operator Usage in PowerShell\nDESCRIPTION: This code snippet demonstrates the incorrect use of the `>` operator for comparison within an `if` statement in PowerShell. It highlights a common mistake where users familiar with other programming languages might unintentionally use `>` instead of `-gt`. The rule flags this usage to prevent errors.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/PossibleIncorrectUsageOfRedirectionOperator.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nif ($a > $b)\n{\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Incorrect PowerShell Function Definition\nDESCRIPTION: This code snippet illustrates an example of a PowerShell function definition that is considered incorrect because it lacks comment-based help. The `Get-File` function is defined without any preceding comment block providing a synopsis, description, examples, inputs, outputs, or other relevant information.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/ProvideCommentHelp.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nfunction Get-File\n{\n    [CmdletBinding()]\n    Param\n    (\n        ...\n    )\n\n}\n```\n\n----------------------------------------\n\nTITLE: Define WithModulePage Parameter (YAML)\nDESCRIPTION: Defines the `-WithModulePage` parameter, indicating whether to create a module page in the output folder. The file name is derived from the `ModuleName` parameter, defaulting to `MamlModule` if not specified. The `ModulePagePath` parameter can override this.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/PlatyPS/New-MarkdownHelp.md#_snippet_6\n\nLANGUAGE: YAML\nCODE:\n```\nType: SwitchParameter\nParameter Sets: FromModule, FromMaml\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Argument Value Transformation - Multiplication (JSON)\nDESCRIPTION: This code shows how to define an argument transformation that multiplies an integer parameter by 2. The ArgumentTransformType is set to \"Inline\", and the ArgumentTransform contains a scriptblock that performs the multiplication.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/Crescendo/whats-new/whats-new-in-crescendo-11.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n        \"Name\": \"mult2\",\n        \"OriginalName\": \"--p3\",\n        \"ParameterType\": \"int\",\n        \"OriginalPosition\": 2,\n        \"ArgumentTransform\": \"param([int]$v) $v * 2\",\n        \"ArgumentTransformType\": \"Inline\"\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Measure Markdown Files by Literal Path - PowerShell\nDESCRIPTION: This syntax demonstrates how to use the Measure-PlatyPSMarkdown cmdlet with the -LiteralPath parameter to specify the exact location of one or more Markdown files. This method prevents wildcard interpretation and requires single quotes for paths with escape characters.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/Measure-PlatyPSMarkdown.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nMeasure-PlatyPSMarkdown -LiteralPath <string[]> [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Suppressing Parameter-Specific Rules - PowerShell\nDESCRIPTION: This example shows how to suppress a specific rule violation for a specific parameter using the `SuppressMessageAttribute`.  The `CheckId` parameter of the attribute is set to the name of the parameter, in this case, suppressing the `PSProvideDefaultParameterValue` rule for parameters `$b` and `$a`.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/using-scriptanalyzer.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nfunction SuppressTwoVariables()\n{\n    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSProvideDefaultParameterValue', 'b')]\n    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSProvideDefaultParameterValue', 'a')]\n    param([string]$a, [int]$b)\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Invoke-Command with Parameterized ComputerName (Correct) PowerShell\nDESCRIPTION: This PowerShell function demonstrates the correct use of `Invoke-Command` with a parameter for the computer name. It takes `$ComputerName` as a parameter, allowing the user to specify the target computer when calling the function. This avoids hardcoding and enhances flexibility.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/AvoidUsingComputerNameHardcoded.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nFunction Invoke-MyCommand ($ComputerName)\n{\n    Invoke-Command -Port 343 -ComputerName $ComputerName\n}\n```\n\n----------------------------------------\n\nTITLE: Querying and Removing CIM Objects (Correct)\nDESCRIPTION: This code snippet demonstrates the correct usage of `Get-CimInstance` and `Remove-CIMInstance` to query for processes with names starting with 'myprocess' and then remove them. This is the recommended approach for managing WMI objects in PowerShell.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/AvoidUsingWMICmdlet.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nGet-CimInstance -Query 'Select * from Win32_Process where name LIKE \"myprocess%\"' | Remove-CIMInstance\n```\n\n----------------------------------------\n\nTITLE: Defining Token Parameter for Custom Rule - PowerShell\nDESCRIPTION: This code snippet shows how to define a Token parameter for a custom rule function in PSScriptAnalyzer. The parameter name must end with 'Token', and the type should be `System.Management.Automation.Language.Token[]`. This enables the rule to examine the script's tokens.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/create-custom-rule.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nParam\n(\n    [Parameter(Mandatory = $true)]\n    [ValidateNotNullOrEmpty()]\n    [System.Management.Automation.Language.Token[]]\n    $testToken\n)\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition - Metadata - YAML\nDESCRIPTION: Defines the `-Metadata` parameter for the `New-MarkdownCommandHelp` cmdlet.  This allows adding metadata to the frontmatter of the Markdown files using a hashtable.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/New-MarkdownCommandHelp.md#_snippet_11\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.Collections.Hashtable\nParameter Sets: (All)\nAliases:\nAccepted values:\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition - Locale - YAML\nDESCRIPTION: Defines the `-Locale` parameter for the `New-MarkdownCommandHelp` cmdlet.  This allows the user to specify the language locale for the generated help files.  The default value is the current CultureInfo.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/New-MarkdownCommandHelp.md#_snippet_10\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\nAccepted values:\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Correct PowerShell Function Definition\nDESCRIPTION: This code snippet demonstrates a correct function definition in PowerShell. The function name 'MyFunction' does not contain any reserved characters, adhering to the naming conventions and avoiding potential errors.  This is the recommended way to define a function in PowerShell.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/ReservedCmdletChar.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nfunction MyFunction\n{...}\n```\n\n----------------------------------------\n\nTITLE: Metadata Parameter Definition\nDESCRIPTION: This YAML snippet defines the `-Metadata` parameter for the Export-MarkdownModuleFile cmdlet. The metadata parameter accepts a hashtable containing key-value pairs which are added to the frontmatter of the markdown file. New keys are added and values of existing keys are overwritten.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/Export-MarkdownModuleFile.md#_snippet_5\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.Collections.Hashtable\nParameter Sets: (All)\nAliases:\nAccepted values:\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Define ConvertNotesToList Parameter (YAML)\nDESCRIPTION: Defines the `-ConvertNotesToList` parameter, indicating whether to format multiple paragraph items in the NOTES section as single list items. It only applies to the 'FromMaml' parameter set.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/PlatyPS/New-MarkdownHelp.md#_snippet_7\n\nLANGUAGE: YAML\nCODE:\n```\nType: SwitchParameter\nParameter Sets: FromMaml\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Description Parameter Definition in YAML\nDESCRIPTION: This YAML snippet defines the Description parameter for the Register-SecretVault cmdlet.  It is a string used to describe the vault, included in the vault registry information.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.SecretManagement/Register-SecretVault.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nType: String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: YAML Definition of -LiteralPath Parameter\nDESCRIPTION: This YAML snippet defines the -LiteralPath parameter for the Import-MamlHelp cmdlet.  It specifies the parameter's type, parameter set, aliases, requirements, position, default value, pipeline input support, and wildcard character support.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/Import-MamlHelp.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.String[]\nParameter Sets: LiteralPath\nAliases:\nAccepted values:\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: PassThru Parameter Definition\nDESCRIPTION: Defines the `-PassThru` parameter for the `Export-CrescendoModule` cmdlet. It emits an object with the path to the .psm1 file and the arguments to New-ModuleManifest, is optional, and does not accept pipeline input or wildcard characters.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.Crescendo/Export-CrescendoModule.md#_snippet_7\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.Management.Automation.SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Vault Parameter Definition - YAML\nDESCRIPTION: This YAML snippet describes the -Vault parameter for the Set-Secret cmdlet. It specifies the type as String and indicates that wildcard characters are not permitted. It also notes that it's required for the SecretInfoParameterSet.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.SecretManagement/Set-SecretInfo.md#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nType: String\nParameter Sets: SecureStringParameterSet, ObjectParameterSet\nAliases:\n\nRequired: False (SecureStringParameterSet, ObjectParameterSet), True (SecretInfoParameterSet)\nPosition: 2\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Syntax for Import-MamlHelp with LiteralPath - PowerShell\nDESCRIPTION: This code snippet shows the syntax for the Import-MamlHelp cmdlet when using the -LiteralPath parameter. The -LiteralPath parameter accepts an array of strings, which are treated literally without wildcard interpretation. Common parameters are also supported.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/Import-MamlHelp.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nImport-MamlHelp -LiteralPath <string[]> [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Markdown Parameter Definition (YAML)\nDESCRIPTION: Defines the `-Markdown` parameter for the `Get-MarkdownMetadata` cmdlet using YAML. It specifies the parameter's type, parameter set, aliases, and whether it is required. Notably, it does not accept pipeline input or wildcard characters.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/PlatyPS/Get-MarkdownMetadata.md#_snippet_6\n\nLANGUAGE: YAML\nCODE:\n```\nType: String\nParameter Sets: FromMarkdownString\nAliases:\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Incorrect Parallel ForEach-Object Variable Access - PowerShell\nDESCRIPTION: This code demonstrates the incorrect way to access a variable from the parent scope within a parallel ForEach-Object scriptblock. It lacks the `$using:` scope modifier, which will lead to unexpected behavior as the variable might not be available in the new runspace.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/UseUsingScopeModifierInNewRunspaces.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n$var = 'foo'\n1..2 | ForEach-Object -Parallel { $var }\n```\n\n----------------------------------------\n\nTITLE: Compare CommandHelp objects\nDESCRIPTION: This example demonstrates how to compare two CommandHelp objects imported from different Markdown files using the `Compare-CommandHelp` cmdlet. It imports two versions of the same command help file, compares them, and then saves the differences to a log file.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/Compare-CommandHelp.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n$refcmd = Import-MarkdownCommandHelp -Path .\\v1\\Microsoft.PowerShell.PlatyPS\\Compare-CommandHelp.md\n$diffcmd = Import-MarkdownCommandHelp -Path .\\v2\\Microsoft.PowerShell.PlatyPS\\Compare-CommandHelp.md\nCompare-CommandHelp -ReferenceCommandHelp $refcmd -DifferenceCommandHelp $diffcmd > .\\diff.log\n```\n\n----------------------------------------\n\nTITLE: Name Parameter Definition - YAML\nDESCRIPTION: This YAML snippet defines the Name parameter for the Get-SecretInfo cmdlet. It specifies the data type as String, indicates it's optional (Required: False), and notes that it accepts wildcard characters (Accept wildcard characters: True).\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.SecretManagement/Get-SecretInfo.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\nType: String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 0\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: True\n```\n\n----------------------------------------\n\nTITLE: Remove Secret with Name and Vault Parameters in PowerShell\nDESCRIPTION: This example demonstrates how to remove a secret by specifying its name and the vault it belongs to. It then verifies that the secret is no longer accessible using the Get-Secret cmdlet. This is the default parameter set for Remove-Secret.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.SecretManagement/Remove-Secret.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-Secret -Name secretTest -Vault CredMan\nGet-Secret -Name secretTest -Vault CredMan\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-Secret: The secret secretTest was not found.\n```\n\n----------------------------------------\n\nTITLE: PassThru Parameter Definition\nDESCRIPTION: YAML definition for the -PassThru parameter of the Reset-SecretStore cmdlet. It specifies the type, requirement, position, default value (False), pipeline input, and wildcard characters. When used, the cmdlet returns the updated SecretStore configuration object.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.SecretStore/Reset-SecretStore.md#_snippet_5\n\nLANGUAGE: YAML\nCODE:\n```\nType: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition - ModuleInfo - YAML\nDESCRIPTION: Defines the `-ModuleInfo` parameter, which accepts an array of `PSModuleInfo` objects. This allows generating help files for all commands within the specified modules. Accepts pipeline input by value.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/New-MarkdownCommandHelp.md#_snippet_12\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.Management.Automation.PSModuleInfo[]\nParameter Sets: (All)\nAliases:\nAccepted values:\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Getting Rules from ScriptAnalyzer in C#\nDESCRIPTION: This C# snippet shows how to retrieve rules from ScriptAnalyzer based on module names and rule names. The `GetRule` method takes arrays of module names and rule names as input and returns a collection of `IRule` objects that match the specified criteria.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/using-scriptanalyzer.md#_snippet_19\n\nLANGUAGE: csharp\nCODE:\n```\npublic System.Collections.Generic.IEnumerable<IRule> GetRule(string[] moduleNames,\n    string[] ruleNames)\n```\n\n----------------------------------------\n\nTITLE: PasswordTimeout Parameter Definition\nDESCRIPTION: YAML definition for the -PasswordTimeout parameter of the Reset-SecretStore cmdlet. It specifies the type, requirement, position, default value (900), pipeline input, and wildcard characters. This parameter controls the length of time SecretStore remains unlocked.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.SecretStore/Reset-SecretStore.md#_snippet_7\n\nLANGUAGE: YAML\nCODE:\n```\nType: Int32\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: 900\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: ErrorVariable Scope Issue (False Positive)\nDESCRIPTION: This example shows another false positive. The `$errResult` variable is used as the `ErrorVariable` parameter in the `Write-Host` command. Despite being used, the rule doesn't recognize this indirect usage and flags `$errResult` as unused.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/UseDeclaredVarsMoreThanAssignments.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\n$errResult = $null\nWrite-Host 'Ugh:' -ErrorVariable errResult\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition for OriginalName (YAML)\nDESCRIPTION: This YAML snippet defines the properties of the -OriginalName parameter for the New-ParameterInfo cmdlet, including its type, parameter set, requirement, position, default value, and acceptance of pipeline input and wildcard characters.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.Crescendo/New-ParameterInfo.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: 1\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get metadata from a file (PowerShell)\nDESCRIPTION: This example demonstrates how to retrieve metadata from a specific markdown file using the `Get-MarkdownMetadata` cmdlet with the `-Path` parameter. It reads the metadata block from the specified file and displays the key-value pairs.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/PlatyPS/Get-MarkdownMetadata.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS C:\\> Get-MarkdownMetadata -Path \".\\docs\\Get-MarkdownMetadata.md\"\n\nKey                Value\n-- -                -----\nexternal help file platyPS-help.xml\nschema             2.0.0\n```\n\n----------------------------------------\n\nTITLE: New-ExampleInfo Usage\nDESCRIPTION: This example demonstrates how to use the New-ExampleInfo cmdlet to create an example object, and then converts it to JSON format. The New-ExampleInfo cmdlet takes parameters such as command, originalCommand, and description. The ConvertTo-Json cmdlet is used to convert the PowerShell object to a JSON string.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.Crescendo/New-ExampleInfo.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-ExampleInfo -command Get-Something -originalCommand native.exe -description 'this is some text' |\n    ConvertTo-Json\n```\n\n----------------------------------------\n\nTITLE: Define AlphabeticParamsOrder Parameter (YAML)\nDESCRIPTION: Defines the `-AlphabeticParamsOrder` parameter, indicating whether to order parameters alphabetically in the PARAMETERS section. Common parameters like `-Confirm`, `-WhatIf` are exceptions and are listed last. Applies to all parameter sets.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/PlatyPS/New-MarkdownHelp.md#_snippet_9\n\nLANGUAGE: YAML\nCODE:\n```\nType: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Confirm Parameter - YAML\nDESCRIPTION: Defines the Confirm parameter for the Export-YamlCommandHelp cmdlet. This is a switch parameter that prompts the user for confirmation before running the cmdlet. This is a standard parameter provided by powershell to ensure the user wants to proceed with the command.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/Export-YamlCommandHelp.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Management.Automation.SwitchParameter\nParameter Sets: (All)\nAliases: cf\nAccepted values:\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Export Module File to Markdown\nDESCRIPTION: This example demonstrates how to convert an old module file to the new format by importing a module Markdown file and exporting it to a new Markdown file in the new format using the `Export-MarkdownModuleFile` cmdlet. It uses the `Import-MarkdownModuleFile` cmdlet to read the original file.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/Export-MarkdownModuleFile.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nImport-MarkdownModuleFile -Path .\\v1\\Microsoft.PowerShell.PlatyPS\\Microsoft.PowerShell.PlatyPS.md |    Export-MarkdownModuleFile -OutputFolder .\\v1\\new\\Microsoft.PowerShell.PlatyPS -Force\n```\n\n----------------------------------------\n\nTITLE: Agent Parameter Definition - YAML\nDESCRIPTION: This YAML code block defines the `-Agent` parameter for the `Resolve-Error` cmdlet. It specifies the data type, parameter set, whether it's required, its position, default value, and whether it accepts pipeline input or wildcard characters.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/AIShell/Resolve-Error.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Installing PlatyPS module - PowerShell\nDESCRIPTION: These commands install the PlatyPS module from the PowerShell Gallery using either PowerShellGet 2.x or PSResourceGet 1.x. The `-Force` or `-Reinstall` parameter ensures that the module is installed or updated even if it already exists.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PlatyPS/create-help-using-platyps.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n# Install using PowerShellGet 2.x\nInstall-Module platyps -Force\n\n# Install using PSResourceGet 1.x\nInstall-PSResource platyps -Reinstall\n```\n\n----------------------------------------\n\nTITLE: HelpInfoUri Parameter Definition - YAML\nDESCRIPTION: This YAML snippet defines the HelpInfoUri parameter, which allows specifying the URI used for updateable help. By default, the cmdlet uses the HelpInfoUri specified in the module manifest. It is a System.String type and is optional.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/New-MarkdownModuleFile.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\nAccepted values:\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Creating Help with Custom Encoding\nDESCRIPTION: This example shows how to create an external help file with Unicode encoding, overwriting any existing file with the `-Force` parameter. It saves the file to the `out\\PlatyPS\\en-US` folder.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/PlatyPS/New-ExternalHelp.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS C:\\> New-ExternalHelp -Path \".\\docs\" -OutputPath \"out\\PlatyPS\\en-US\" -Force -Encoding ([System.Text.Encoding]::Unicode)\n\n\n    Directory: D:\\Working\\PlatyPS\\out\\PlatyPS\\en-US\n\n\nMode                LastWriteTime         Length Name\n----\t\t\t\t\t-------------\t\t\t--------- ----\n-a----\t\t\t5/22/2016   6:34 PM\t\t 132942 platyPS-help.xml\n```\n\n----------------------------------------\n\nTITLE: YAML Definition of -Path Parameter\nDESCRIPTION: This YAML snippet defines the -Path parameter for the Import-MamlHelp cmdlet. It specifies the parameter's type, parameter set, aliases, requirements, position, default value, pipeline input support, and wildcard character support. Wildcard characters are supported when using the -Path parameter.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/Import-MamlHelp.md#_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.String[]\nParameter Sets: Path\nAliases:\nAccepted values:\nRequired: True\nPosition: 0\nDefault value: None\nAccept pipeline input: True (ByValue)\nAccept wildcard characters: True\n```\n\n----------------------------------------\n\nTITLE: Recursive Path Traversal (Invoke-ScriptAnalyzer, PowerShell)\nDESCRIPTION: The `-Recurse` parameter enables recursive analysis of files within the specified path and its subdirectories. This allows for a comprehensive analysis of large projects without having to specify each file individually.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/PSScriptAnalyzer/Invoke-ScriptAnalyzer.md#_snippet_17\n\nLANGUAGE: YAML\nCODE:\n```\nType: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: ExcludeDontShow Parameter - YAML\nDESCRIPTION: Defines the `-ExcludeDontShow` parameter, a switch that excludes parameters marked with `DontShow` in the parameter attribute from the help content.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/PlatyPS/Update-MarkdownHelp.md#_snippet_12\n\nLANGUAGE: YAML\nCODE:\n```\nType: SwitchParameter\nParameter Sets: (All)\nAliases: \n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Path Parameter - YAML\nDESCRIPTION: Defines the `-Path` parameter, an array of strings representing the paths of markdown files and folders to update. This parameter is required and accepts wildcard characters, allowing flexible specification of the target files.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/PlatyPS/Update-MarkdownHelp.md#_snippet_6\n\nLANGUAGE: YAML\nCODE:\n```\nType: String[]\nParameter Sets: (All)\nAliases: \n\nRequired: True\nPosition: 0\nDefault value: None\nAccept pipeline input: True (ByValue)\nAccept wildcard characters: True\n```\n\n----------------------------------------\n\nTITLE: Creating Global Alias (Incorrect)\nDESCRIPTION: This example demonstrates the incorrect way to create a global alias in PowerShell. Using the `-Scope Global` parameter with `New-Alias` overrides existing aliases with matching names, potentially causing issues for users of the module or script.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/AvoidGlobalAliases.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-Alias -Name Name -Value Value -Scope Global\n```\n\n----------------------------------------\n\nTITLE: Code Copy Arguments & Options\nDESCRIPTION: Details the arguments and options for the `/code copy` subcommand. The `<n>` argument is the 1-based index of the code snippet. If no value is specified, all code is copied. Options include displaying the help information.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/AIShell/how-to/aishell-reference.md#_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nArguments:\n\n- `<n>` Use the n-th (1-based) code snippet. Use all the code when no value is specified.\n[default: -1]\n\nOptions:\n\n- `-h`, `--help`  Show help and usage information\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition - AbbreviateParameterTypename - YAML\nDESCRIPTION: Defines the `-AbbreviateParameterTypename` parameter for the `New-MarkdownCommandHelp` cmdlet. This parameter controls whether full or short type names are used in the generated Markdown help files. It is a switch parameter.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/New-MarkdownCommandHelp.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.Management.Automation.SwitchParameter\nParameter Sets: (All)\nAliases:\nAccepted values:\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: LandingPagePath Parameter Definition\nDESCRIPTION: YAML definition for the LandingPagePath parameter, specifying its type, requirement, position, default value, pipeline input acceptance, and wildcard character acceptance. This parameter expects the path to the module Markdown file.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/PlatyPS/New-ExternalHelpCab.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\nType: String\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Parameter definition for -Command - YAML\nDESCRIPTION: Defines the -Command parameter for the Test-IsCrescendoCommand cmdlet using YAML. It specifies the type as Object[], indicates that it is a required parameter, defines its position, and clarifies its acceptance of pipeline input.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.Crescendo/Test-IsCrescendoCommand.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\nType: Object[]\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: 0\nDefault value: None\nAccept pipeline input: True (ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Import Yaml Module File - LiteralPath Parameter - PowerShell\nDESCRIPTION: Illustrates the usage of the `-LiteralPath` parameter with the `Import-YamlModuleFile` cmdlet. The `-LiteralPath` parameter specifies the exact path to one or more YAML module files, without interpreting any characters as wildcards. The path is used exactly as typed.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/Import-YamlModuleFile.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nImport-YamlModuleFile -LiteralPath <string[]> [-AsDictionary] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Correct Cmdlet Usage - PowerShell\nDESCRIPTION: This code snippet demonstrates the correct usage of the `Set-Date` cmdlet. It first retrieves the current date using `Get-Date` and then explicitly passes it to `Set-Date` using the `-Date` parameter, ensuring that the cmdlet receives the expected input.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/UseCmdletCorrectly.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nFunction Set-TodaysDate ()\n{\n    $date = Get-Date\n    Set-Date -Date $date\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Function Definition with Automatic Variable - PowerShell\nDESCRIPTION: This code demonstrates incorrect usage by defining a function `foo` with a parameter named `$Error`, which is an automatic variable in PowerShell. This can lead to unexpected behavior and should be avoided. The automatic variable `$Error` should not be used as parameter name.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/AvoidAssignmentToAutomaticVariable.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nfunction foo($Error){ }\n```\n\n----------------------------------------\n\nTITLE: NoClobberManifest Parameter Definition\nDESCRIPTION: Defines the `-NoClobberManifest` parameter for the `Export-CrescendoModule` cmdlet. It prevents overwriting the module manifest file, is optional, and does not accept pipeline input or wildcard characters.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.Crescendo/Export-CrescendoModule.md#_snippet_6\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.Management.Automation.SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: AI Shell Usage\nDESCRIPTION: Describes the usage and command-line options for the AI Shell (aish). The AI shell takes a query as an argument and provides options for communication channels, shell wrappers and help.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/AIShell/how-to/aishell-reference.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nDescription:\n  AI for the command line.\n\nUsage:\n  aish [<query>] [options]\n\nArguments:\n  <query>  The query term used to get response from AI.\n\nOptions:\n  --channel <channel>              A named pipe used to setup communication\n                                   between aish and the command-line shell.\n  --shell-wrapper <shell-wrapper>  Path to the configuration file to wrap\n                                   AI Shell as a different application.\n  --version                        Show version information\n  -?, -h, --help                   Show help and usage information\n```\n\n----------------------------------------\n\nTITLE: Define Session Parameter (YAML)\nDESCRIPTION: Defines the `-Session` parameter, providing support for remote commands. It requires a session created with `Import-PSSession` for accurate parameter metadata. It applies to 'FromModule' and 'FromCommand' parameter sets.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/PlatyPS/New-MarkdownHelp.md#_snippet_11\n\nLANGUAGE: YAML\nCODE:\n```\nType: PSSession\nParameter Sets: FromModule, FromCommand\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: OutputFolder Parameter Definition - YAML\nDESCRIPTION: This YAML snippet defines the -OutputFolder parameter for the Export-MamlCommandHelp cmdlet. It specifies the directory where the MAML file will be saved; the directory is created if it doesn't exist.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/Export-MamlCommandHelp.md#_snippet_6\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\nAccepted values:\nRequired: True\nPosition: 1\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Update-MarkdownModuleFile Syntax - Path Parameter Set - PowerShell\nDESCRIPTION: This syntax describes the usage of `Update-MarkdownModuleFile` cmdlet with the `-Path` parameter set.  It updates a Markdown module file using a specified path and a collection of command help objects.  The `CommandHelp` objects are used to update the module file's content.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/Update-MarkdownModuleFile.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nUpdate-MarkdownModuleFile [-Path] <string> [-CommandHelp] <CommandHelp[]> [-Encoding <Encoding>]\n [-Force] [-HelpUri <string>] [-HelpInfoUri <string>] [-HelpVersion <version>] [-Locale <string>]\n [-Metadata <hashtable>] [-NoBackup] [-WhatIf] [-Confirm] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Define OnlineVersionUrl Parameter (YAML)\nDESCRIPTION: Defines the `-OnlineVersionUrl` parameter, specifying the URL where updated help can be downloaded.  If no value is specified, the cmdlet uses an empty string. This parameter is part of the 'FromCommand' parameter set.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/PlatyPS/New-MarkdownHelp.md#_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\nType: String\nParameter Sets: FromCommand\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Configuring CommandsToTraverse for ReviewUnusedParameter\nDESCRIPTION: This code snippet demonstrates how to configure the `CommandsToTraverse` setting for the `PSReviewUnusedParameter` rule. This allows the rule to examine additional commands that accept scriptblocks, beyond the default `Where-Object` and `ForEach-Object`. The configuration adds `Invoke-PSFProtectedCommand` to the list of commands to traverse.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/ReviewUnusedParameter.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n@{\n    Rules = @{\n        PSReviewUnusedParameter = @{\n            CommandsToTraverse = @(\n                'Invoke-PSFProtectedCommand'\n            )\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Listing Module Commands in PowerShell\nDESCRIPTION: This snippet shows how to import a PowerShell module using `Import-Module` and then list the commands available in that module using `Get-Command`. It depends on the AzCmAgent.psd1 module manifest file being available in the current directory.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/Crescendo/get-started/generate-module.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nImport-Module .\\AzCmAgent.psd1\nGet-Command -Module AzCmAgent\n```\n\n----------------------------------------\n\nTITLE: Confirm Parameter Definition - YAML\nDESCRIPTION: This YAML snippet defines the Confirm parameter, which prompts for confirmation before running the cmdlet.  It's a SwitchParameter and is optional. It does not accept pipeline input or wildcards.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/New-MarkdownModuleFile.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Management.Automation.SwitchParameter\nParameter Sets: (All)\nAliases: cf\nAccepted values:\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Workflow InlineScript with Using Scope - PowerShell\nDESCRIPTION: This example shows how to use the `$using:` scope modifier within an `InlineScript` block inside a PowerShell workflow. The variable `$foo` is defined in the workflow scope and then accessed within the `InlineScript` block using `$using:foo`.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/UseUsingScopeModifierInNewRunspaces.md#_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\n# Remark: Workflow is supported on Windows PowerShell only\nWorkflow {\n    $foo = 'foo'\n    InlineScript { $using:foo }\n}\n```\n\n----------------------------------------\n\nTITLE: Invoke ScriptAnalyzer with Built-in Presets - PowerShell\nDESCRIPTION: This example shows how to invoke ScriptAnalyzer using a built-in preset. It demonstrates using the `PSGallery` preset to analyze a module.  The `-Recurse` parameter analyzes all scripts within the specified path and its subdirectories.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/using-scriptanalyzer.md#_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\nInvoke-ScriptAnalyzer -Path /path/to/module/ -Settings PSGallery -Recurse\n```\n\n----------------------------------------\n\nTITLE: Path Parameter Definition - YAML\nDESCRIPTION: This YAML snippet defines the `-Path` parameter for the `Import-YamlCommandHelp` cmdlet. It specifies a path to one or more locations where Yaml command files are located, supporting wildcard characters.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/Import-YamlCommandHelp.md#_snippet_5\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.String[]\nParameter Sets: Path\nAliases: FullName\nAccepted values:\nRequired: True\nPosition: 0\nDefault value: None\nAccept pipeline input: True (ByValue)\nAccept wildcard characters: True\n```\n\n----------------------------------------\n\nTITLE: NoClobber Parameter Definition - YAML\nDESCRIPTION: This YAML snippet describes the -NoClobber parameter for the Set-Secret cmdlet. It is a SwitchParameter that, when present, causes the command to error if a secret with the same name already exists in the vault.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.SecretManagement/Set-SecretInfo.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nType: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: ShowProgress Parameter Definition\nDESCRIPTION: Specifies that the `-ShowProgress` parameter is a switch parameter that, when present, displays progress bars during the parsing of markdown files. Using this parameter slows down the help generation process.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/PlatyPS/New-ExternalHelp.md#_snippet_11\n\nLANGUAGE: YAML\nCODE:\n```\nType: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Executing Show-AzCmAgent Cmdlet\nDESCRIPTION: This snippet demonstrates how to execute the `Show-AzCmAgent` cmdlet within the imported module. It assumes that the module has already been imported into the PowerShell session and that the `azcmagent` tool requires elevation to run.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/Crescendo/get-started/generate-module.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nShow-AzCmAgent\n```\n\n----------------------------------------\n\nTITLE: Define DSC Resource MOF Class\nDESCRIPTION: Defines a DSC resource class `WaitForAny` in a MOF file.  It includes properties `Name` (Key) and `NodeName` (Required). This MOF definition dictates parameter requirements for Get/Set/Test functions.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/DSCUseIdenticalMandatoryParametersForDSC.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nclass WaitForAny : OMI_BaseResource\n{\n    [key, Description(\"Name of Resource on remote machine\")]\n    string Name;\n\n    [required, Description(\"List of remote machines\")]\n    string NodeName[];\n};\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition - Encoding - YAML\nDESCRIPTION: Defines the `-Encoding` parameter for the `New-MarkdownCommandHelp` cmdlet. This parameter allows the user to specify the encoding used for the output files. If not specified, the cmdlet uses the value specified by `$OutputEncoding`.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/New-MarkdownCommandHelp.md#_snippet_5\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.Text.Encoding\nParameter Sets: (All)\nAliases:\nAccepted values:\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: AboutName Parameter Definition - YAML\nDESCRIPTION: Defines the `-AboutName` parameter for the `New-MarkdownAboutHelp` cmdlet within a YAML block.  Specifies its type as string, indicates that it is optional and accepts no wildcard characters.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/PlatyPS/New-MarkdownAboutHelp.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\nType: String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 1\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Intentional Assignment Suppression\nDESCRIPTION: This code snippet demonstrates how to suppress the warning when an assignment within an `if` statement is intentional by wrapping the expression in extra parentheses. This signals that the assignment is not an accidental use of the assignment operator instead of equality.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/PossibleIncorrectUsageOfAssignmentOperator.md#_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nif (($shortVariableName = $SuperLongVariableName['SpecialItem']['AnotherItem']))\n{\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Encoding Parameter Definition - YAML\nDESCRIPTION: This YAML snippet defines the Encoding parameter, allowing specification of the character encoding for output files. If not specified, the cmdlet defaults to `$OutputEncoding`. The parameter type is System.Text.Encoding and it's optional.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/New-MarkdownModuleFile.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Text.Encoding\nParameter Sets: (All)\nAliases:\nAccepted values:\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Creating External Help Files - PowerShell\nDESCRIPTION: This command creates external help files (MAML and plain text) from Markdown files using the `New-ExternalHelp` cmdlet. It specifies the path to the folder containing the Markdown files and the output path for the generated help files.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PlatyPS/create-help-using-platyps.md#_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nNew-ExternalHelp -Path <folder with MDs> -OutputPath <output help folder>\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition - WhatIf - YAML\nDESCRIPTION: Defines the `-WhatIf` parameter for the `New-MarkdownCommandHelp` cmdlet.  It is a standard switch parameter that shows what would happen if the cmdlet were run, without actually executing it.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/New-MarkdownCommandHelp.md#_snippet_14\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.Management.Automation.SwitchParameter\nParameter Sets: (All)\nAliases: wi\nAccepted values:\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Create Markdown help files from a list of commands - PowerShell\nDESCRIPTION: This example demonstrates how to create Markdown help files from a list of PowerShell commands within a module. It also uses splatting for parameter passing to `New-MarkdownCommandHelp`.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/New-MarkdownCommandHelp.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n$newMarkdownCommandHelpSplat = @{\n    CommandInfo = Get-Command -Module Microsoft.PowerShell.PlatyPS\n    OutputFolder = '.'\n    HelpVersion = '1.0.0.0'\n    WithModulePage = $true\n}\nNew-MarkdownCommandHelp @newMarkdownCommandHelpSplat\n```\n\n----------------------------------------\n\nTITLE: LiteralPath Parameter Definition\nDESCRIPTION: Defines the -LiteralPath parameter for the Import-MarkdownModuleFile cmdlet. This parameter specifies the path to the markdown files without interpreting wildcard characters. It accepts an array of strings and supports pipeline input by property name.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/Import-MarkdownModuleFile.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.String[]\nParameter Sets: LiteralPath\nAliases:\nAccepted values:\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Update Markdown Help Syntax - PowerShell\nDESCRIPTION: Defines the syntax for the `Update-MarkdownHelp` cmdlet, including parameters such as `-Path`, `-Encoding`, `-LogPath`, and other optional switches. It illustrates how the cmdlet can be used to update markdown help files.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/PlatyPS/Update-MarkdownHelp.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nUpdate-MarkdownHelp [-Path] <String[]> [[-Encoding] <Encoding>] [[-LogPath] <String>] [-LogAppend]\n [-AlphabeticParamsOrder] [-UseFullTypeName] [-UpdateInputOutput] [-Force] [-Session <PSSession>]\n [-ExcludeDontShow] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Implicit Settings File Invocation - PowerShell\nDESCRIPTION: This example demonstrates implicit settings file usage. When a file named `PSScriptAnalyzerSettings.psd1` is placed in the project root directory, PSScriptAnalyzer automatically discovers it when the project root is passed to the `-Path` parameter.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/using-scriptanalyzer.md#_snippet_13\n\nLANGUAGE: powershell\nCODE:\n```\nInvoke-ScriptAnalyzer -Path \"C:\\path\\to\\project\" -Recurse\n```\n\n----------------------------------------\n\nTITLE: DSC Non-Class Resource: Missing Test-TargetResource (PowerShell)\nDESCRIPTION: This code snippet demonstrates an incorrect implementation of a DSC resource because it is missing the `Test-TargetResource` function.  This function is required for non-class based DSC resources to determine the current state of the resource.  The snippet shows `Get-TargetResource` and `Set-TargetResource` functions, but lacks the crucial state checking functionality.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/DSCStandardDSCFunctionsInResource.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nfunction Get-TargetResource\n{\n    [OutputType([Hashtable])]\n    param\n    (\n        [parameter(Mandatory = $true)]\n        [String]\n        $Name\n    )\n    ...\n}\n\nfunction Set-TargetResource\n{\n    param\n    (\n        [parameter(Mandatory = $true)]\n        [String]\n        $Name\n    )\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Pipeline Indentation Example - IncreaseIndentationForFirstPipeline\nDESCRIPTION: This example demonstrates the 'IncreaseIndentationForFirstPipeline' setting for pipeline indentation.  It shows that the first pipeline increases the indentation level, while subsequent pipelines maintain that indentation. This provides a consistent and readable format for multi-line PowerShell commands.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/UseConsistentIndentation.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nfoo |\n    bar |\n    baz\n```\n\n----------------------------------------\n\nTITLE: Configuring PSPlaceOpenBrace Rule in PowerShell\nDESCRIPTION: This snippet demonstrates how to configure the `PSPlaceOpenBrace` rule within PowerShell ScriptAnalyzer. It allows enabling the rule, specifying whether the open brace should be on the same line, enforcing a newline after the open brace, and ignoring one-line blocks.  The configuration is done within the `Rules` hashtable, which is passed to ScriptAnalyzer.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/PlaceOpenBrace.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nRules = @{\n    PSPlaceOpenBrace = @{\n        Enable = $true\n        OnSameLine = $true\n        NewLineAfter = $true\n        IgnoreOneLineBlock = $true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Confirm Parameter Definition - YAML\nDESCRIPTION: This YAML snippet defines the -Confirm parameter for the Export-MamlCommandHelp cmdlet. It indicates whether the cmdlet should prompt for confirmation before running.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/Export-MamlCommandHelp.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.Management.Automation.SwitchParameter\nParameter Sets: (All)\nAliases: cf\nAccepted values:\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: New-UsageInfo Syntax\nDESCRIPTION: Shows the syntax of the `New-UsageInfo` cmdlet with the `-usage` parameter and CommonParameters.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.Crescendo/New-UsageInfo.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-UsageInfo [-usage] <String> [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: LiteralPath Parameter Definition - YAML\nDESCRIPTION: This YAML snippet defines the `-LiteralPath` parameter for the `Import-YamlCommandHelp` cmdlet. It specifies a path to one or more Yaml command files, treating the path literally without wildcard interpretation.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/Import-YamlCommandHelp.md#_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.String[]\nParameter Sets: LiteralPath\nAliases:\nAccepted values:\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Output of Export Crescendo Command - Single File\nDESCRIPTION: This output shows the result of exporting Crescendo commands into a single JSON file, including the timestamp, length, and filename of the generated JSON file.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.Crescendo/Export-CrescendoCommand.md#_snippet_3\n\nLANGUAGE: Output\nCODE:\n```\nDirectory: D:\\temp\\Crescendo\n\nMode                 LastWriteTime         Length Name\n----                 -------------         ------ ----\n-a---          12/13/2022  3:10 PM          15313 VssAdmin.crescendo.json\n```\n\n----------------------------------------\n\nTITLE: CommandHelp Parameter - YAML\nDESCRIPTION: Defines the CommandHelp parameter for the Export-YamlCommandHelp cmdlet. It specifies that the parameter accepts a CommandHelp object or an array of CommandHelp objects via pipeline input. This parameter is required for exporting command help to YAML.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/Export-YamlCommandHelp.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nType: Microsoft.PowerShell.PlatyPS.Model.CommandHelp[]\nParameter Sets: (All)\nAliases:\nAccepted values:\nRequired: True\nPosition: 0\nDefault value: None\nAccept pipeline input: True (ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Implement OllamaAgent class\nDESCRIPTION: This C# code implements the basic structure of the OllamaAgent class, including necessary namespaces and the ILLMAgent interface. This serves as the foundation for the agent's functionality.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/AIShell/developer/create-ollama-agent.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.Diagnostics;\nusing System.Text;\nusing System.Text.Json;\nusing AIShell.Abstraction;\n\nnamespace AIShell.Ollama.Agent;\n\npublic sealed class OllamaAgent : ILLMAgent\n{\n\n}\n```\n\n----------------------------------------\n\nTITLE: Interactive Password Change Example - PowerShell\nDESCRIPTION: Demonstrates an interactive session where the user is prompted for the old password, new password, and verification of the new password when using the Set-SecretStorePassword cmdlet. Requires user interaction within a PowerShell session.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.SecretStore/Set-SecretStorePassword.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS C:\\> Set-SecretStorePassword\nOld password\nEnter password:\n*******\nNew password\nEnter password:\n*******\nEnter password again for verification:\n*******\n```\n\n----------------------------------------\n\nTITLE: Resolve Last Error Example - PowerShell\nDESCRIPTION: This example demonstrates how to use the Resolve-Error cmdlet to resolve the last error that occurred in the current AIShell session.  It assumes that an error has occurred after starting an AIShell session and attempts to resolve it using the default agent.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/AIShell/Resolve-Error.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> Start-AIShell\n#User receives an error\n\nPS> Resolve-Error\n```\n\n----------------------------------------\n\nTITLE: OutputFolder Parameter - YAML\nDESCRIPTION: Defines the OutputFolder parameter for the Export-YamlCommandHelp cmdlet. This parameter specifies the folder where the markdown file will be saved. If the specified folder does not already exists, it will be created.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/Export-YamlCommandHelp.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\nAccepted values:\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Using SHA1 Hash Algorithm in PowerShell (Incorrect)\nDESCRIPTION: This code snippet demonstrates the incorrect usage of the SHA1 hash algorithm in PowerShell. It's advised to avoid SHA1 due to its security vulnerabilities.  The `Get-FileHash` cmdlet is used to calculate the SHA1 hash of the 'foo.txt' file.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/AvoidUsingBrokenHashAlgorithms.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nGet-FileHash foo.txt -Algorithm SHA1\n```\n\n----------------------------------------\n\nTITLE: Setting secret metadata in PowerShell\nDESCRIPTION: This code snippet shows how to update the metadata associated with an existing secret using the Set-SecretInfo cmdlet. The example overwrites any existing metadata with the new provided value.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/SecretManagement/how-to/manage-secretstore.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-SecretInfo TestSecret -Metadata @{Purpose = \"showing the new cmdlet\"}\nGet-SecretInfo -Name TestSecret | Select-Object Metadata\n\nMetadata\n--------\n{[Purpose, showing the new cmdlet]}\n```\n\n----------------------------------------\n\nTITLE: Import Yaml Help - Path Syntax - PowerShell\nDESCRIPTION: This code snippet shows the syntax for using the `-Path` parameter with `Import-YamlCommandHelp`. It specifies that the cmdlet accepts a string array for the path to the Yaml files. This set is the default.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/Import-YamlCommandHelp.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nImport-YamlCommandHelp [-Path] <string[]> [-AsDictionary] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Argument Value Transformation - Function Call (JSON)\nDESCRIPTION: Illustrates how to define an argument transformation that calls a function. The ArgumentTransformType is set to \"function\", and the ArgumentTransform specifies the name of the function to be called.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/Crescendo/whats-new/whats-new-in-crescendo-11.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n        \"Name\" : \"Param1\",\n        \"ArgumentTransform\": \"myfunction\",\n        \"ArgumentTransformType\" : \"function\"\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Unused Variable Declaration (Incorrect)\nDESCRIPTION: This example demonstrates incorrect usage where a variable `$declaredVar2` is assigned a value but never used within the function's scriptblock. This will trigger the 'UseDeclaredVarsMoreThanAssignments' warning.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/UseDeclaredVarsMoreThanAssignments.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nfunction Test\n{\n    $declaredVar = 'Declared just for fun'\n    $declaredVar2 = 'Not used'\n    Write-Output $declaredVar\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PSAvoidExclaimOperator rule in PowerShell\nDESCRIPTION: This code snippet shows how to configure the `PSAvoidExclaimOperator` rule within the ScriptAnalyzer configuration.  It demonstrates enabling the rule by setting the `Enable` parameter to `$true`.  The configuration should be placed in a ScriptAnalyzer settings file.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/AvoidExclaimOperator.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nRules = @{\n    PSAvoidExclaimOperator  = @{\n        Enable = $true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Define ExcludeDontShow Parameter (YAML)\nDESCRIPTION: Defines the `-ExcludeDontShow` parameter, indicating whether to exclude parameters marked with `DontShow` in the parameter attribute from the help content. It applies to all parameter sets.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/PlatyPS/New-MarkdownHelp.md#_snippet_13\n\nLANGUAGE: YAML\nCODE:\n```\nType: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Suppressing Output (Invoke-ScriptAnalyzer, PowerShell)\nDESCRIPTION: The `-SuppressedOnly` parameter restricts the output to only include violations for rules that have been suppressed using the `SuppressMessageAttribute`. It returns a `SuppressedRecord` object.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/PSScriptAnalyzer/Invoke-ScriptAnalyzer.md#_snippet_24\n\nLANGUAGE: YAML\nCODE:\n```\nType: SwitchParameter\nParameter Sets: Path_SuppressedOnly, ScriptDefinition_SuppressedOnly\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: HelpInfoUri Parameter - YAML\nDESCRIPTION: This YAML snippet defines the `-HelpInfoUri` parameter. This parameter allows specification of the URI used for updateable help. If not specified, it uses the HelpInfoUri from the module manifest.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/Update-MarkdownModuleFile.md#_snippet_7\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\nAccepted values:\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Suppressing PSUseSingularNouns Rule in PowerShell\nDESCRIPTION: This code snippet demonstrates how to suppress the 'PSUseSingularNouns' rule for a specific function name using the `System.Diagnostics.CodeAnalysis.SuppressMessageAttribute`. This is useful when a function name with a plural noun is intentionally used and should not trigger the rule.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/UseSingularNouns.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nfunction Get-Elements {\n    [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseSingularNouns', 'Get-Elements')]\n    Param()\n}\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition - HelpVersion - YAML\nDESCRIPTION: Defines the `-HelpVersion` parameter for the `New-MarkdownCommandHelp` cmdlet. It allows specifying the version of the help, which is written to the `HelpInfo.xml` file used for updateable help.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/New-MarkdownCommandHelp.md#_snippet_9\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.Version\nParameter Sets: (All)\nAliases:\nAccepted values:\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Unregister Secret Vault by Name - PowerShell\nDESCRIPTION: This code snippet demonstrates how to un-register a secret vault by specifying its name. The `-Name` parameter is used to identify the vault to be un-registered. Wildcard characters are permitted in the name.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.SecretManagement/Unregister-SecretVault.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nUnregister-SecretVault [-Name] <String[]> [-WhatIf] [-Confirm] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: WhatIf Parameter - YAML\nDESCRIPTION: This YAML snippet defines the `-WhatIf` parameter. When used, the cmdlet shows what would happen if it ran but does not actually execute the command.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/Update-MarkdownModuleFile.md#_snippet_15\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.Management.Automation.SwitchParameter\nParameter Sets: (All)\nAliases:\nAccepted values:\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Incorrect Cmdlet Usage - PowerShell\nDESCRIPTION: This code snippet demonstrates the incorrect usage of the `Set-Date` cmdlet. It invokes the cmdlet without specifying the `-Date` parameter, which could lead to unexpected behavior or errors if the cmdlet relies on an explicit date value.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/UseCmdletCorrectly.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nFunction Set-TodaysDate ()\n{\n    Set-Date\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Getting SecretStore configuration in PowerShell\nDESCRIPTION: This code snippet demonstrates how to view the current configuration settings of a SecretStore vault using the Get-SecretStoreConfiguration cmdlet. The output displays the Scope, Authentication, PasswordTimeout, and Interaction settings.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/SecretManagement/how-to/manage-secretstore.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-SecretStoreConfiguration\n\n      Scope Authentication PasswordTimeout Interaction\n      ----- -------------- --------------- -----------\nCurrentUser       Password             900      Prompt\n```\n\n----------------------------------------\n\nTITLE: Syntax for New-CrescendoCommand - PowerShell\nDESCRIPTION: This code snippet shows the syntax for the New-CrescendoCommand cmdlet.  It highlights the required Verb and Noun parameters, as well as the optional OriginalName parameter. CommonParameters are also supported.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.Crescendo/New-CrescendoCommand.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-CrescendoCommand [-Verb] <String> [-Noun] <String> [[-OriginalName] <String>]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Executing Get-AzCmAgentConfigProperty Cmdlet\nDESCRIPTION: This snippet executes the `Get-AzCmAgentConfigProperty` cmdlet with the `-Property` parameter set to `proxy.url`.  It relies on the AzCmAgent module being imported and the cmdlet being available in the current session.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/Crescendo/get-started/generate-module.md#_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nGet-AzCmAgentConfigProperty -Property proxy.url\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition - Force - YAML\nDESCRIPTION: Defines the `-Force` parameter for the `New-MarkdownCommandHelp` cmdlet. When used, it allows the cmdlet to overwrite existing files in the output folder.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/New-MarkdownCommandHelp.md#_snippet_6\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.Management.Automation.SwitchParameter\nParameter Sets: (All)\nAliases:\nAccepted values:\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Locale Parameter Definition - YAML\nDESCRIPTION: This YAML snippet defines the Locale parameter, allowing the specification of the language locale for the help files. By default, the cmdlet uses the current CultureInfo. It is a System.String type and optional.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/New-MarkdownModuleFile.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\nAccepted values:\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Set Secret Metadata Error Example - PowerShell\nDESCRIPTION: This example demonstrates how to handle the error when a vault does not support metadata. It attempts to add metadata to a secret named `Secret2` in `Vault2`, but the command fails because `Vault2` does not support metadata.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.SecretManagement/Set-SecretInfo.md#_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nSet-SecretInfo -Name Secret2 -Vault Vault2 -Metadata @{ Expiration = ([datetime]::new(2022, 5, 1)) }\n```\n\nLANGUAGE: powershell\nCODE:\n```\nSet-SecretInfo: Cannot set secret metadata Secret2. Vault Vault2 does not support secret metadata.\n```\n\n----------------------------------------\n\nTITLE: Force Parameter - YAML\nDESCRIPTION: This YAML snippet defines the `-Force` parameter. Using `-Force` allows the cmdlet to overwrite the output file if it already exists, without prompting for confirmation.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/Update-MarkdownModuleFile.md#_snippet_6\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.Management.Automation.SwitchParameter\nParameter Sets: (All)\nAliases:\nAccepted values:\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Encoding Parameter - YAML\nDESCRIPTION: Defines the Encoding parameter for the Export-YamlCommandHelp cmdlet. It specifies the encoding to use when writing the YAML file. If not specified, it defaults to the `$OutputEncoding` preference variable.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/Export-YamlCommandHelp.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Text.Encoding\nParameter Sets: (All)\nAliases:\nAccepted values:\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: WhatIf Parameter (YAML)\nDESCRIPTION: Defines the -WhatIf parameter in YAML, which shows what would happen if the cmdlet runs without actually executing it. It has the alias 'wi'.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/Update-MarkdownCommandHelp.md#_snippet_8\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.Management.Automation.SwitchParameter\nParameter Sets: (All)\nAliases: wi\nAccepted values:\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Path Parameter definition - YAML\nDESCRIPTION: Defines the -Path parameter, which specifies the path to one or more Markdown command file, allowing wildcard characters.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/Update-CommandHelp.md#_snippet_5\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.String[]\nParameter Sets: Path\nAliases:\nAccepted values:\nRequired: True\nPosition: 0\nDefault value: None\nAccept pipeline input: True (ByValue)\nAccept wildcard characters: True\n```\n\n----------------------------------------\n\nTITLE: Testing for Crescendo Command in PowerShell\nDESCRIPTION: This snippet utilizes `Test-IsCrescendoCommand` to check if the `Get-AzCmAgentConfigProperty` cmdlet was generated by Crescendo. It takes the cmdlet name as input and returns whether the command is a Crescendo-generated command and if it requires elevation.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/Crescendo/get-started/generate-module.md#_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nTest-IsCrescendoCommand -Command Get-AzCmAgentConfigProperty\n```\n\n----------------------------------------\n\nTITLE: Export-CrescendoModule Syntax\nDESCRIPTION: This displays the syntax for the `Export-CrescendoModule` cmdlet. It shows the available parameters, including `ConfigurationFile`, `ModuleName`, `Force`, `NoClobberManifest`, `PassThru`, `WhatIf`, and `Confirm`, as well as the common parameters.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.Crescendo/Export-CrescendoModule.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nExport-CrescendoModule [-ConfigurationFile] <String[]> [-ModuleName] <String> [-Force]\n [-NoClobberManifest] [-PassThru] [-WhatIf] [-Confirm] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Suppressing Specific Function Violations - PowerShell\nDESCRIPTION: This example demonstrates suppressing violations in `start-bar`, `start-baz`, and `start-bam` but not in `start-foo` by using the `Target` property of the `SuppressMessageAttribute` with a wildcard pattern `start-b*`.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/using-scriptanalyzer.md#_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\n[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingWriteHost', '',\n    Scope='Function', Target='start-b*')]\nParam()\n```\n\n----------------------------------------\n\nTITLE: Get-MarkdownMetadata Syntax (FromMarkdownString)\nDESCRIPTION: Defines the syntax for the `Get-MarkdownMetadata` cmdlet when using the `-Markdown` parameter.  This allows passing a markdown string directly to the cmdlet. It supports common parameters for controlling execution.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/PlatyPS/Get-MarkdownMetadata.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-MarkdownMetadata -Markdown <String> [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: ModuleName Parameter Definition in YAML\nDESCRIPTION: This YAML snippet defines the ModuleName parameter for the Register-SecretVault cmdlet. This is a string specifying the name or path of the PowerShell module that implements the extension vault.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.SecretManagement/Register-SecretVault.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nType: String\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: 1\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Force Parameter - YAML\nDESCRIPTION: Defines the `-Force` parameter, a switch to remove help files that no longer exists within sessions (for example if function was deleted).\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/PlatyPS/Update-MarkdownHelp.md#_snippet_11\n\nLANGUAGE: YAML\nCODE:\n```\nType: SwitchParameter\nParameter Sets: (All)\nAliases: \n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Correct Cmdlet Naming in PowerShell\nDESCRIPTION: This example demonstrates the correct way to name a cmdlet using a singular noun ('Get-File'). This follows the PowerShell best practice and would not be flagged by the 'PSUseSingularNouns' ScriptAnalyzer rule.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/UseSingularNouns.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nfunction Get-File\n{\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: LiteralPath Parameter definition - YAML\nDESCRIPTION: Defines the -LiteralPath parameter, which specifies a path to markdown command files without interpreting wildcards.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/Update-CommandHelp.md#_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.String[]\nParameter Sets: LiteralPath\nAliases:\nAccepted values:\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByVale)\nAccept wildcard characters: False'\n```\n\n----------------------------------------\n\nTITLE: Get Script Analyzer Rules by Severity - PowerShell\nDESCRIPTION: This example retrieves Script Analyzer rules with the Error severity level.  It demonstrates how to use the -Severity parameter to filter rules based on their severity, allowing users to focus on critical issues.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/PSScriptAnalyzer/Get-ScriptAnalyzerRule.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-ScriptAnalyzerRule -Severity Error\n```\n\n----------------------------------------\n\nTITLE: Name Parameter Definition in YAML\nDESCRIPTION: This YAML snippet defines the Name parameter for the Register-SecretVault cmdlet. This is a string specifying the name of the extension vault. If not specified, the module name is used.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.SecretManagement/Register-SecretVault.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nType: String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 0\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: CabFilesFolder Parameter Definition\nDESCRIPTION: YAML definition for the CabFilesFolder parameter, specifying its type, requirement, position, default value, pipeline input acceptance, and wildcard character acceptance.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/PlatyPS/New-ExternalHelpCab.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\nType: String\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Import-MarkdownModuleFile Syntax (LiteralPath)\nDESCRIPTION: Defines the syntax for the Import-MarkdownModuleFile cmdlet when using the -LiteralPath parameter to specify the Markdown module file(s). It accepts a string array of literal paths and common parameters.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/Import-MarkdownModuleFile.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nImport-MarkdownModuleFile -LiteralPath <string[]> [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition - Confirm - YAML\nDESCRIPTION: Defines the `-Confirm` parameter for the `New-MarkdownCommandHelp` cmdlet.  It is a standard switch parameter that prompts the user for confirmation before running the cmdlet.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/New-MarkdownCommandHelp.md#_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.Management.Automation.SwitchParameter\nParameter Sets: (All)\nAliases: cf\nAccepted values:\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Updating Module Landing Page - PowerShell\nDESCRIPTION: This command updates the module landing page with synopsis descriptions from cmdlet help files. It requires the path to the output folder containing the Markdown files.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PlatyPS/create-help-using-platyps.md#_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nUpdate-MarkdownHelpModule -Path <full path output folder> -RefreshModulePage\n```\n\n----------------------------------------\n\nTITLE: Usage Parameter Definition\nDESCRIPTION: This shows the YAML definition of the `-usage` parameter within the Crescendo configuration. It specifies the parameter's type, required status, position, and other properties.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.Crescendo/New-UsageInfo.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: 0\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Unregister Secret Vault by Object - PowerShell\nDESCRIPTION: This code snippet demonstrates how to un-register a secret vault by providing a `SecretVaultInfo` object. The `-SecretVault` parameter accepts a `SecretVaultInfo` object representing the vault to be un-registered.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.SecretManagement/Unregister-SecretVault.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nUnregister-SecretVault [-SecretVault] <SecretVaultInfo> [-WhatIf] [-Confirm] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Suppressing All Function Violations - PowerShell\nDESCRIPTION: This example demonstrates how to suppress violations in all functions by setting the `Target` property of the `SuppressMessageAttribute` to `*`. It suppresses the `PSAvoidUsingWriteHost` rule in all functions.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/using-scriptanalyzer.md#_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\n[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingWriteHost', '',\n    Scope='Function', Target='*')]\nParam()\n```\n\n----------------------------------------\n\nTITLE: Import Yaml Module File - Path Parameter - PowerShell\nDESCRIPTION: Illustrates the usage of the `-Path` parameter with the `Import-YamlModuleFile` cmdlet. The `-Path` parameter specifies the path to one or more YAML module files. Accepts wildcard characters.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/Import-YamlModuleFile.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nImport-YamlModuleFile [-Path] <string[]> [-AsDictionary] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Import-MarkdownCommandHelp Syntax - Path Parameter Set - PowerShell\nDESCRIPTION: Defines the syntax for the Import-MarkdownCommandHelp cmdlet using the Path parameter set. The -Path parameter specifies the location of the Markdown files to import. Common parameters are also supported.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/Import-MarkdownCommandHelp.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nImport-MarkdownCommandHelp [-Path] <string[]> [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Importing SecretManagement and SecretStore Modules\nDESCRIPTION: This code snippet imports the SecretManagement and SecretStore modules into the current PowerShell session.  This is necessary to use the cmdlets provided by these modules.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/SecretManagement/get-started/using-secretstore.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nImport-Module Microsoft.PowerShell.SecretManagement\nImport-Module Microsoft.PowerShell.SecretStore\n```\n\n----------------------------------------\n\nTITLE: Metadata Parameter - YAML\nDESCRIPTION: This YAML snippet defines the `-Metadata` parameter.  It accepts a hashtable of metadata to add or update in the markdown file's frontmatter. It outputs a warning if attempting to overwrite `document type` or `PlatyPS schema version`.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/Update-MarkdownModuleFile.md#_snippet_12\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.Collections.Hashtable\nParameter Sets: (All)\nAliases:\nAccepted values:\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: WhatIf Parameter Definition - YAML\nDESCRIPTION: This YAML snippet defines the -WhatIf parameter for the Export-MamlCommandHelp cmdlet.  It shows what would happen if the cmdlet were to run without actually executing it.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/Export-MamlCommandHelp.md#_snippet_7\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.Management.Automation.SwitchParameter\nParameter Sets: (All)\nAliases: wi\nAccepted values:\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition - HelpUri - YAML\nDESCRIPTION: Defines the `-HelpUri` parameter, used to specify the URI for online help. By default, the cmdlet uses the URI defined in the `[CmdletBinding()]` attribute for the command.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/New-MarkdownCommandHelp.md#_snippet_8\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\nAccepted values:\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Saving DSC Dependencies (Invoke-ScriptAnalyzer, PowerShell)\nDESCRIPTION: The `-SaveDscDependency` parameter allows `Invoke-ScriptAnalyzer` to resolve DSC resource dependencies.  It downloads missing modules from the PowerShell Gallery to a temporary location during the scan, if the module is not already available in `$env:PSModulePath`.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/PSScriptAnalyzer/Invoke-ScriptAnalyzer.md#_snippet_20\n\nLANGUAGE: YAML\nCODE:\n```\nType: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Incorrect PowerShell Semicolon Usage Example (Multiline)\nDESCRIPTION: This PowerShell code snippet demonstrates another case of incorrect semicolon usage. The semicolon at the end of the `Install-Module` command is considered bad practice by this rule.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/AvoidSemicolonsAsLineTerminators.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nInstall-Module -Name PSScriptAnalyzer;\n$a = 1 + $b\n```\n\n----------------------------------------\n\nTITLE: WhatIf Parameter Definition - YAML\nDESCRIPTION: This YAML snippet defines the WhatIf parameter which shows what would happen if the cmdlet runs. The cmdlet isn't run when WhatIf is specified. It is a switch parameter and optional.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/New-MarkdownModuleFile.md#_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Management.Automation.SwitchParameter\nParameter Sets: (All)\nAliases: wi\nAccepted values:\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Incorrect PowerShell Function Definition\nDESCRIPTION: This code snippet demonstrates an incorrect function definition in PowerShell. It uses a reserved character '[' within the function name 'MyFunction[1]', which will cause parsing or runtime errors. The reserved characters should be removed from the function name.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/ReservedCmdletChar.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nfunction MyFunction[1]\n{...}\n```\n\n----------------------------------------\n\nTITLE: Confirm Parameter definition - YAML\nDESCRIPTION: Defines the -Confirm parameter, which prompts for confirmation before executing the cmdlet.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/Update-CommandHelp.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.Management.Automation.SwitchParameter\nParameter Sets: (All)\nAliases: cf\nAccepted values:\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Force Parameter Definition\nDESCRIPTION: Specifies that the `-Force` parameter is a switch parameter that, when present, allows the cmdlet to overwrite an existing file with the same name.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/PlatyPS/New-ExternalHelp.md#_snippet_6\n\nLANGUAGE: YAML\nCODE:\n```\nType: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Force Parameter Definition\nDESCRIPTION: This YAML snippet defines the `-Force` parameter for the Export-MarkdownModuleFile cmdlet. Using the Force parameter overwrites the output file if it already exists.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/Export-MarkdownModuleFile.md#_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.Management.Automation.SwitchParameter\nParameter Sets: (All)\nAliases:\nAccepted values:\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Confirm Parameter Definition in YAML\nDESCRIPTION: This YAML snippet defines the Confirm parameter for the Register-SecretVault cmdlet. This is a switch parameter used to prompt for confirmation before running the cmdlet.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.SecretManagement/Register-SecretVault.md#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nType: SwitchParameter\nParameter Sets: (All)\nAliases: cf\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Correct PowerShell Semicolon Usage Example\nDESCRIPTION: This PowerShell code snippet demonstrates the correct usage: a semicolon is permitted within a single line when multiple commands exist on that line.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/AvoidSemicolonsAsLineTerminators.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nInstall-Module -Name PSScriptAnalyzer; $a = 1 + $b\n```\n\n----------------------------------------\n\nTITLE: Confirm Parameter Definition\nDESCRIPTION: This YAML snippet defines the `-Confirm` parameter for the Export-MarkdownModuleFile cmdlet. This parameter prompts the user for confirmation before running the cmdlet.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/Export-MarkdownModuleFile.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.Management.Automation.SwitchParameter\nParameter Sets: (All)\nAliases: cf\nAccepted values:\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Update CommandHelp using Path parameter - PowerShell\nDESCRIPTION: Updates a `CommandHelp` object using the specified path. This allows for wildcard characters to be used in defining the path.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/Update-CommandHelp.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nUpdate-CommandHelp [-Path] <string[]> [-WhatIf] [-Confirm] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Show-HelpPreview Syntax - Path Parameter Set\nDESCRIPTION: Defines the syntax for the Show-HelpPreview cmdlet when using the -Path parameter set. It specifies the parameters available for this particular usage.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/Show-HelpPreview.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nShow-HelpPreview [-Path] <string[]> [-ConvertNotesToList] [-ConvertDoubleDashLists]\n [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Metadata Parameter - YAML\nDESCRIPTION: Defines the Metadata parameter for the Export-YamlCommandHelp cmdlet. It allows adding metadata to the frontmatter of the YAML file using a hashtable.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/Export-YamlCommandHelp.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Collections.Hashtable\nParameter Sets: (All)\nAliases:\nAccepted values:\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: HelpUri Parameter - YAML\nDESCRIPTION: This YAML snippet defines the `-HelpUri` parameter.  It allows you to specify the URI for the help content.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/Update-MarkdownModuleFile.md#_snippet_8\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\nAccepted values:\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Output of Usage Object to JSON\nDESCRIPTION: This shows the JSON output that is created from the command `$usage | ConvertTo-Json` in the previous example.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.Crescendo/New-UsageInfo.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n{\n  \"Synopsis\": \"This is a description for how to use the cmdlet.\",\n  \"SupportsFlags\": false,\n  \"HasOptions\": false,\n  \"OriginalText\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Test Markdown Command Help with Path\nDESCRIPTION: Tests the structure of a Markdown command help file using the -Path parameter. The cmdlet checks for the presence and order of required elements within the Markdown file. The path argument specifies the location of the markdown file to validate.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/Test-MarkdownCommandHelp.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nTest-MarkdownCommandHelp [-Path] <string[]> [-DetailView] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Suppressing Rules with Scope Property - PowerShell\nDESCRIPTION: This example demonstrates using the `Scope` property of the `SuppressMessageAttribute` to limit rule suppression to functions within the attribute's scope. The example uses `Scope='Function'` to suppress violations on all functions within the scope of the attribute.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/using-scriptanalyzer.md#_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\n[Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSProvideCommentHelp', '', Scope='Function')]\nparam()\n\nfunction InternalFunction\n{\n    param()\n\n    Write-Verbose -Message \"I am invincible!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Verbose Usage in PowerShell Function\nDESCRIPTION: This code snippet demonstrates the incorrect usage of verbose messages in a PowerShell function, where no verbose message is provided. It defines a function `Test-Function` with cmdlet binding and parameters, but lacks any `Write-Verbose` calls. The function takes no explicit parameters. The missing `Write-Verbose` call violates the best practice of providing user information.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/DSCUseVerboseMessageInDSCResource.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nFunction Test-Function\n{\n    [CmdletBinding()]\n    Param()\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: OutputPath Parameter Definition\nDESCRIPTION: Specifies that the `-OutputPath` parameter requires a string value representing the path where the external help file should be saved.  The folder name should end with a locale folder (e.g., `.\\out\\PlatyPS\\en-US\\`).\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/PlatyPS/New-ExternalHelp.md#_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\nType: String\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Define UseFullTypeName Parameter (YAML)\nDESCRIPTION: Defines the `-UseFullTypeName` parameter, indicating whether the document will use the full type name instead of a short name for parameters.  Applies to all parameter sets.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/PlatyPS/New-MarkdownHelp.md#_snippet_10\n\nLANGUAGE: YAML\nCODE:\n```\nType: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: SecureStringSecret Parameter Definition - YAML\nDESCRIPTION: This YAML snippet describes the -SecureStringSecret parameter for the Set-Secret cmdlet. It specifies the type as SecureString.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.SecretManagement/Set-SecretInfo.md#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nType: SecureString\nParameter Sets: SecureStringParameterSet\nAliases:\n\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Create a new classlib project\nDESCRIPTION: This shell command creates a new class library project in the specified directory. This is the first step in building the Ollama agent.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/AIShell/developer/create-ollama-agent.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet new classlib\n```\n\n----------------------------------------\n\nTITLE: Importing PlatyPS Module - PowerShell\nDESCRIPTION: This command imports the PlatyPS module into the current PowerShell session, making its cmdlets available for use.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PlatyPS/create-help-using-platyps.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nImport-Module platyps\n```\n\n----------------------------------------\n\nTITLE: Encoding Parameter - YAML\nDESCRIPTION: This YAML snippet defines the `-Encoding` parameter.  It specifies the character encoding to use when writing to the markdown file.  If omitted, it defaults to the value of the `$OutputEncoding` preference variable.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/Update-MarkdownModuleFile.md#_snippet_5\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.Text.Encoding\nParameter Sets: (All)\nAliases:\nAccepted values:\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Installing Crescendo module using PSResourceGet\nDESCRIPTION: Installs the latest version of the Microsoft.PowerShell.Crescendo module using the Install-PSResource cmdlet from Microsoft.PowerShell.PSResourceGet. The -Reinstall parameter ensures that the module is installed or updated. Requires Microsoft.PowerShell.PSResourceGet to be installed.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/Crescendo/get-started/install-crescendo.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n# Install the current release\nInstall-PSResource Microsoft.PowerShell.Crescendo -Reinstall\n```\n\n----------------------------------------\n\nTITLE: Importing a module - PowerShell\nDESCRIPTION: This command imports a specified PowerShell module into the current session, allowing its cmdlets and functions to be used. Replace `<your module name>` with the actual name of the module.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PlatyPS/create-help-using-platyps.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nImport-Module <your module name>\n```\n\n----------------------------------------\n\nTITLE: Confirm Parameter Definition\nDESCRIPTION: YAML definition for the -Confirm parameter of the Reset-SecretStore cmdlet. It specifies the type, requirement, position, default value (False), pipeline input, and wildcard characters. When specified, the cmdlet prompts for confirmation before execution.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.SecretStore/Reset-SecretStore.md#_snippet_9\n\nLANGUAGE: YAML\nCODE:\n```\nType: SwitchParameter\nParameter Sets: (All)\nAliases: cf\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Start-AIShell Syntax - PowerShell\nDESCRIPTION: This snippet displays the syntax for the `Start-AIShell` cmdlet, showcasing its optional `-Path` parameter.  The Path parameter accepts a string value representing the executable path. Common parameters are also supported.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/AIShell/Start-AIShell.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nStart-AIShell [-Path <String>] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Correct Null Comparison in PowerShell\nDESCRIPTION: This example demonstrates the correct way to compare a variable with `$null`. To ensure reliable results, `$null` should be placed on the left-hand side of the comparison operator. The function `Test-CompareWithNull` contains the corrected if statement.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/PossibleIncorrectComparisonWithNull.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nfunction Test-CompareWithNull\n{\n    if ($null -eq $DebugPreference)\n    {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: New-ExternalHelpCab Syntax\nDESCRIPTION: Displays the syntax for the New-ExternalHelpCab cmdlet, outlining the required and optional parameters.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/PlatyPS/New-ExternalHelpCab.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-ExternalHelpCab -CabFilesFolder <String> -LandingPagePath <String>\n -OutputFolder <String>\n [-IncrementHelpVersion] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Force Parameter - YAML\nDESCRIPTION: Defines the Force parameter for the Export-YamlCommandHelp cmdlet. It's a switch parameter that allows overwriting the output file if it already exists.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/Export-YamlCommandHelp.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Management.Automation.SwitchParameter\nParameter Sets: (All)\nAliases:\nAccepted values:\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Creating CAB files with New-ExternalHelpCab in PowerShell\nDESCRIPTION: This code snippet demonstrates how to use the `New-ExternalHelpCab` cmdlet in PowerShell to create CAB files for updateable help. It defines a hashtable `$helpCabParameters` containing the required parameters such as the source folder for MAML files, the path to the landing page, and the output folder for the CAB files. The cmdlet is then invoked with these parameters.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PlatyPS/create-help-using-platyps.md#_snippet_8\n\nLANGUAGE: PowerShell\nCODE:\n```\n$helpCabParameters = @{\n    CabFilesFolder = $MamlOutputFolder\n    LandingPagePath = $LandingPage\n    OutputFolder = $CabOutputFolder\n}\nNew-ExternalHelpCab @helpCabParameters\n```\n\n----------------------------------------\n\nTITLE: Original Command Parameter in YAML\nDESCRIPTION: This YAML snippet shows the definition of the `-originalCommand` parameter for the `New-ExampleInfo` cmdlet. The YAML specifies the type, parameter sets, aliases, required status, position, default value, and pipeline input settings for the parameter. This is part of defining cmdlet parameters in Crescendo.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.Crescendo/New-ExampleInfo.md#_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 2\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Incorrect Cmdlet Naming in PowerShell\nDESCRIPTION: This example shows an incorrect cmdlet name that uses a plural noun ('Get-Files'). This violates the PowerShell best practice of using singular nouns for cmdlet names. The ScriptAnalyzer rule 'PSUseSingularNouns' would flag this example.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/UseSingularNouns.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nfunction Get-Files\n{\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: LogAppend Parameter - YAML\nDESCRIPTION: Defines the `-LogAppend` parameter as a switch parameter. When specified, it appends information to the log file instead of overwriting it. This provides a way to maintain a history of updates.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/PlatyPS/Update-MarkdownHelp.md#_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\nType: SwitchParameter\nParameter Sets: (All)\nAliases: \n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Incorrect OutputType Declaration PowerShell\nDESCRIPTION: This code snippet demonstrates an incorrect usage of the OutputType attribute. The function `Get-Foo` declares that it returns a `String`, but the function actually returns an integer (4). This mismatch can lead to unexpected behavior in PowerShell scripts. The [CmdletBinding()] attribute allows the use of cmdlet features. The Param() block defines parameters, but is empty in this case.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/UseOutputTypeCorrectly.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nfunction Get-Foo\n{\n        [CmdletBinding()]\n        [OutputType([String])]\n        Param(\n        )\n        return 4\n}\n```\n\n----------------------------------------\n\nTITLE: LiteralPath Parameter - YAML\nDESCRIPTION: This YAML snippet defines the `-LiteralPath` parameter for the `Import-YamlModuleFile` cmdlet. It specifies a path to one or more Yaml module files where the value is used exactly as it's typed, without wildcard interpretation.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/Import-YamlModuleFile.md#_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.String[]\nParameter Sets: LiteralPath\nAliases:\nAccepted values:\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByPropertyName)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Update all files in a folder - PowerShell\nDESCRIPTION: This example demonstrates how to update all markdown help files within a specified directory. It uses the `-Path` parameter to specify the directory containing the files to be updated.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/PlatyPS/Update-MarkdownHelp.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS C:\\> Update-MarkdownHelp -Path \".\\docs\"\n\n    Directory: D:\\working\\PlatyPS\\docs\n\n\nMode                LastWriteTime         Length Name\n----\t\t\t\t\t-------------\t\t\t-----\t----\n-a----\t\t5/22/2016   6:54 PM           1496 Get-HelpPreview.md\n-a----\t\t5/22/2016   6:54 PM           3208 Get-MarkdownMetadata.md\n-a----\t\t5/22/2016   6:54 PM           3059 New-ExternalHelp.md\n-a----\t\t5/22/2016   6:54 PM           2702 New-ExternalHelpCab.md\n-a----\t\t5/22/2016   6:54 PM           6234 New-MarkdownHelp.md\n-a----\t\t5/22/2016   6:54 PM           2346 Update-MarkdownHelp.md\n-a----\t\t5/22/2016   6:54 PM           1633 Update-MarkdownHelpModule.md\n-a----\t\t5/22/2016   6:54 PM           1630 Update-MarkdownHelpSchema.md\n```\n\n----------------------------------------\n\nTITLE: Convert Markdown help to YAML\nDESCRIPTION: This example demonstrates how to use the `New-YamlHelp` cmdlet to convert Markdown help files in the `.\\docs` directory to YAML files and store them in the `.\\out\\yaml` directory. It creates one YAML file for each cmdlet, enabling external tools to read structured data.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/PlatyPS/New-YamlHelp.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS C:\\> New-YamlHelp -Path .\\docs -OutputFolder .\\out\\yaml\n```\n\n----------------------------------------\n\nTITLE: HelpUri Parameter Definition - YAML\nDESCRIPTION: This YAML snippet defines the HelpUri parameter, allowing to specify the URI used for help files. It is a System.String type and is optional.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/New-MarkdownModuleFile.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\nAccepted values:\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Displaying Top-Level Help for Command-Line Tool\nDESCRIPTION: This example shows how to display the top-level help content of a command-line tool (`azcmagent` in this case) by running it without any parameters. This help typically lists available subcommands and options.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/Crescendo/get-started/research-tool.md#_snippet_0\n\nLANGUAGE: output\nCODE:\n```\n...\nUsage:\n  azcmagent [command]\n\nAvailable Commands:\n  check       Runs connectivity checks\n  config      Change configuration settings for this machine\n  connect     Connects this machine to Azure\n  disconnect  Disconnects this machine from Azure\n  help        Help about any command\n  license     Display the End-user license agreement file\n  logs        Creates a .zip file containing relevant logs. This is primarily useful for troubleshooting.\n  show        Gets machine metadata and Agent status. This is primarily useful for troubleshooting.\n  version     Display the Hybrid Management Agent version\n...\n```\n\n----------------------------------------\n\nTITLE: WhatIf Parameter definition - YAML\nDESCRIPTION: Defines the -WhatIf parameter, which shows what would happen if the cmdlet runs without actually running it.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/Update-CommandHelp.md#_snippet_6\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.Management.Automation.SwitchParameter\nParameter Sets: (All)\nAliases: wi\nAccepted values:\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Session Parameter - YAML\nDESCRIPTION: Defines the `-Session` parameter, which provides support for remote commands. It requires passing the session used to create commands with `Import-PSSession` for accurate parameter metadata retrieval from the remote session.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/PlatyPS/Update-MarkdownHelp.md#_snippet_9\n\nLANGUAGE: YAML\nCODE:\n```\nType: PSSession\nParameter Sets: (All)\nAliases: \n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Aligned Hashtable Example - PowerShell\nDESCRIPTION: This example shows an aligned hashtable.  The equals signs in the assignment statements are in the same column, improving readability. This demonstrates the desired outcome of the AlignAssignmentStatement rule.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/AlignAssignmentStatement.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n$hashtable = @{\n    property1       = 'value'\n    anotherProperty = 'another value'\n}\n```\n\n----------------------------------------\n\nTITLE: RecurseCustomRulePath Parameter Definition - YAML\nDESCRIPTION: This YAML snippet defines the -RecurseCustomRulePath parameter for the Get-ScriptAnalyzerRule cmdlet. It specifies the parameter's type, whether it's required, its position, default value, and whether it accepts pipeline input and wildcard characters. This parameter allows searching the CustomRulePath recursively.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/PSScriptAnalyzer/Get-ScriptAnalyzerRule.md#_snippet_7\n\nLANGUAGE: YAML\nCODE:\n```\nType: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Invoke-AIShell Syntax (Default)\nDESCRIPTION: Defines the syntax for the Invoke-AIShell cmdlet using the Default parameter set.  It takes a query string, an optional agent name, and an optional context object as input. Results are displayed in the AIShell window.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/AIShell/Invoke-AIShell.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nInvoke-AIShell [-Query] <String> [-Agent <String>] [[-Context] <PSObject>] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Visual Studio Code Settings for Custom Rules - JSON\nDESCRIPTION: This example shows how to configure Visual Studio Code to use custom rules defined in a settings file. By adding a workspace settings file (`.vscode/settings.json`) and specifying the path to the analyzer settings file, Visual Studio Code will use the custom rules for script analysis.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/using-scriptanalyzer.md#_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"powershell.scriptAnalysis.settingsPath\": \".vscode/analyzersettings.psd1\",\n    \"powershell.scriptAnalysis.enable\": true,\n}\n```\n\n----------------------------------------\n\nTITLE: Force Parameter Definition - YAML\nDESCRIPTION: This YAML snippet defines the Force parameter which allows overwriting existing files. It's a SwitchParameter. By default, the cmdlet does not overwrite existing files.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/New-MarkdownModuleFile.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.Management.Automation.SwitchParameter\nParameter Sets: (All)\nAliases:\nAccepted values:\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get-MarkdownMetadata Syntax (FromPath)\nDESCRIPTION: Defines the syntax for the `Get-MarkdownMetadata` cmdlet when using the `-Path` parameter. This allows specifying an array of paths to markdown files or folders. It supports common parameters for controlling execution.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/PlatyPS/Get-MarkdownMetadata.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-MarkdownMetadata -Path <String[]> [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: ModuleFileInfo Parameter Definition\nDESCRIPTION: This YAML snippet defines the `-ModuleFileInfo` parameter for the Export-MarkdownModuleFile cmdlet. This parameter accepts a ModuleFileInfo object, typically created by the `Import-MarkdownModuleFile` cmdlet, representing the module file to export.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/Export-MarkdownModuleFile.md#_snippet_6\n\nLANGUAGE: YAML\nCODE:\n```\nType: Microsoft.PowerShell.PlatyPS.ModuleFileInfo[]\nParameter Sets: (All)\nAliases:\nAccepted values:\nRequired: True\nPosition: 0\nDefault value: None\nAccept pipeline input: True (ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Name Parameter Definition - YAML\nDESCRIPTION: This YAML snippet describes the -Name parameter for the Set-Secret cmdlet. It specifies the type as String and indicates that wildcard characters are not permitted.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.SecretManagement/Set-SecretInfo.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nType: String\nParameter Sets: SecureStringParameterSet, ObjectParameterSet\nAliases:\n\nRequired: True\nPosition: 0\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Get metadata from a string (PowerShell)\nDESCRIPTION: This example shows how to retrieve metadata from a markdown string stored in a variable. First, the content of a markdown file is read into the `$Markdown` variable. Then, `Get-MarkdownMetadata` is used with the `-Markdown` parameter to extract metadata from the string.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/PlatyPS/Get-MarkdownMetadata.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS C:\\> $Markdown = Get-Content -Path \".\\docs\\Get-MarkdownMetadata.md\" -Raw\nPS C:\\> Get-MarkdownMetadata -Markdown $Markdown\n\nKey                Value\n-- -                -----\nexternal help file platyPS-help.xml\nschema             2.0.0\n```\n\n----------------------------------------\n\nTITLE: Encoding Parameter Definition\nDESCRIPTION: This YAML snippet defines the `-Encoding` parameter for the Export-MarkdownModuleFile cmdlet. It specifies the encoding to use when writing the markdown file.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/Export-MarkdownModuleFile.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.Text.Encoding\nParameter Sets: (All)\nAliases:\nAccepted values:\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Adding Suggested Corrections to DiagnosticRecord - PowerShell\nDESCRIPTION: This snippet explains how to include `SuggestedCorrections` in the DiagnosticRecord.  It demonstrates creating a `CorrectionExtent` object with start and end line/column numbers, the replacement text, file path, and an optional description, followed by constructing a collection of these `CorrectionExtent` objects and assigning it to the `SuggestedCorrections` property.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/create-custom-rule.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\n[int]$startLineNumber =  $ast.Extent.StartLineNumber\n[int]$endLineNumber = $ast.Extent.EndLineNumber\n[int]$startColumnNumber = $ast.Extent.StartColumnNumber\n[int]$endColumnNumber = $ast.Extent.EndColumnNumber\n[string]$correction = 'Correct text that replaces Extent text'\n[string]$file = $MyInvocation.MyCommand.Definition\n[string]$optionalDescription = 'Useful but optional description text'\n$objParams = @{\n  TypeName = 'Microsoft.Windows.PowerShell.ScriptAnalyzer.Generic.CorrectionExtent'\n  ArgumentList = $startLineNumber, $endLineNumber, $startColumnNumber,\n                 $endColumnNumber, $correction, $file, $optionalDescription\n}\n$correctionExtent = New-Object @objParams\n$suggestedCorrections = New-Object System.Collections.ObjectModel.Collection[$($objParams.TypeName)]\n$suggestedCorrections.add($correctionExtent) | Out-Null\n\n[Microsoft.Windows.Powershell.ScriptAnalyzer.Generic.DiagnosticRecord]@{\n    \"Message\"              = \"This is a rule with a suggested correction\"\n    \"Extent\"               = $ast.Extent\n    \"RuleName\"             = $PSCmdlet.MyInvocation.InvocationName\n    \"Severity\"             = \"Warning\"\n    \"Severity\"             = \"Warning\"\n    \"RuleSuppressionID\"    = \"MyRuleSuppressionID\"\n    \"SuggestedCorrections\" = $suggestedCorrections\n}\n```\n\n----------------------------------------\n\nTITLE: WhatIf Parameter Definition\nDESCRIPTION: Defines the `-WhatIf` parameter for the `Export-CrescendoModule` cmdlet. It shows what would happen if the cmdlet runs without actually running it, is optional, and does not accept pipeline input or wildcard characters.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.Crescendo/Export-CrescendoModule.md#_snippet_9\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.Management.Automation.SwitchParameter\nParameter Sets: (All)\nAliases: wi\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Running the Agent - Shell\nDESCRIPTION: This code snippet shows the output when running AI Shell with the Ollama agent installed.  It shows the selection of the agent.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/AIShell/developer/create-ollama-agent.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nAI Shell\nv1.0.0-preview.2\n\nPlease select an agent to use:\n\n    azure\n   >ollama\n    openai-gpt\n```\n\n----------------------------------------\n\nTITLE: Defining Script Inline (Invoke-ScriptAnalyzer, PowerShell)\nDESCRIPTION: The `-ScriptDefinition` parameter allows you to run the analysis on a string containing commands, functions, or expressions. This is useful for analyzing code snippets without needing to save them to a file first.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/PSScriptAnalyzer/Invoke-ScriptAnalyzer.md#_snippet_21\n\nLANGUAGE: YAML\nCODE:\n```\nType: String\nParameter Sets: ScriptDefinition_IncludeSuppressed, ScriptDefinition_SuppressedOnly\nAliases:\n\nRequired: True\nPosition: 0\nDefault value: None\nAccept pipeline input: True (ByPropertyName, ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Severity Parameter Definition - YAML\nDESCRIPTION: This YAML snippet defines the -Severity parameter for the Get-ScriptAnalyzerRule cmdlet. It specifies the parameter's type, whether it's required, its position, default value, and whether it accepts pipeline input and wildcard characters. This parameter is used to get only rules with the specified severity values.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/PSScriptAnalyzer/Get-ScriptAnalyzerRule.md#_snippet_8\n\nLANGUAGE: YAML\nCODE:\n```\nType: String[]\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: All rules\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Include Specific Rules with Settings - PowerShell\nDESCRIPTION: This example demonstrates how to include only specific rules in the analysis by defining the `IncludeRules` property in a settings file. This enables focusing the analysis on a subset of rules relevant to the project.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/using-scriptanalyzer.md#_snippet_11\n\nLANGUAGE: powershell\nCODE:\n```\n# PSScriptAnalyzerSettings.psd1\n@{\n    IncludeRules=@('PSAvoidUsingPlainTextForPassword',\n                'PSAvoidUsingConvertToSecureStringWithPlainText')\n}\n```\n\n----------------------------------------\n\nTITLE: Test Markdown Command Help with LiteralPath\nDESCRIPTION: Tests the structure of a Markdown command help file using the -LiteralPath parameter. This parameter treats the path exactly as it is typed, without interpreting any characters as wildcards. It is useful when the path includes escape characters and should be enclosed in single quotation marks.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/Test-MarkdownCommandHelp.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nTest-MarkdownCommandHelp -LiteralPath <string[]> [-DetailView] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Generating Markdown Help - PowerShell\nDESCRIPTION: This code snippet generates Markdown files for a specified PowerShell module using the `New-MarkdownHelp` cmdlet from the PlatyPS module. It defines parameters such as the module name, output path, and encoding. It also creates an _about_ topic markdown using `New-MarkdownAboutHelp`.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PlatyPS/create-help-using-platyps.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\n$OutputFolder = <output path>\n$parameters = @{\n    Module = <ModuleName>\n    OutputFolder = $OutputFolder\n    AlphabeticParamsOrder = $true\n    WithModulePage = $true\n    ExcludeDontShow = $true\n    Encoding = [System.Text.Encoding]::UTF8\n}\nNew-MarkdownHelp @parameters\n\nNew-MarkdownAboutHelp -OutputFolder $OutputFolder -AboutName \"topic_name\"\n```\n\n----------------------------------------\n\nTITLE: YAML Parameter Definition for OutputFolder\nDESCRIPTION: This YAML snippet defines the OutputFolder parameter for the New-HelpCabinetFile cmdlet. It specifies the data type as System.String, indicates that it is a required parameter at position 2, and disallows pipeline input or wildcard characters. This parameter designates the location where the .cab, .zip, and HelpInfo.xml files will be written.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/New-HelpCabinetFile.md#_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\nAccepted values:\nRequired: True\nPosition: 2\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Code Save Subcommand\nDESCRIPTION: Describes the usage of the `/code save` subcommand. Saves all generated code to a specified file. Requires a file path as an argument.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/AIShell/how-to/aishell-reference.md#_snippet_8\n\nLANGUAGE: text\nCODE:\n```\n/code save <file> [options]\n```\n\n----------------------------------------\n\nTITLE: Configuring PSAvoidSemicolonsAsLineTerminators rule\nDESCRIPTION: This PowerShell code snippet configures the `PSAvoidSemicolonsAsLineTerminators` rule within PSScriptAnalyzer. It shows how to enable or disable the rule.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/AvoidSemicolonsAsLineTerminators.md#_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nRules = @{\n    PSAvoidSemicolonsAsLineTerminators  = @{\n        Enable     = $true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: AlphabeticParamsOrder Parameter - YAML\nDESCRIPTION: Defines the `-AlphabeticParamsOrder` parameter, a switch that orders parameters alphabetically by name in the PARAMETERS section. Exceptions are made for `-Confirm`, `-WhatIf`, `-IncludeTotalCount`, `-Skip`, and `-First` parameters, which appear last due to their common behavior.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/PlatyPS/Update-MarkdownHelp.md#_snippet_7\n\nLANGUAGE: YAML\nCODE:\n```\nType: SwitchParameter\nParameter Sets: (All)\nAliases: \n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Initializing Hashtable (Case-Sensitive) using New-Object\nDESCRIPTION: This snippet shows another incorrect way to create a hashtable using the `New-Object -TypeName hashtable` cmdlet, which also results in case-sensitive key look-up. This method is not recommended in PowerShell because it can lead to inconsistencies. The hashtable is assigned to the variable `$hashtable`. There are no dependencies.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/UseLiteralInitializerForHashtable.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n$hashtable = New-Object -TypeName hashtable\n```\n\n----------------------------------------\n\nTITLE: Defining a global function in PowerShell\nDESCRIPTION: This code snippet demonstrates the incorrect way of defining a function in the global scope. Defining functions in the global scope can cause conflicts with existing functions, making debugging difficult. Avoid using the `global:` scope modifier.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/AvoidGlobalFunctions.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nfunction global:functionName {}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Manual Parameter Declaration PowerShell\nDESCRIPTION: This code snippet demonstrates the incorrect way to declare the `$Confirm` and `$WhatIf` parameters manually in a PowerShell function. The rule advises against this practice as `CmdletBinding` with `SupportsShouldProcess` provides these parameters automatically. This approach lacks the benefits of using `SupportsShouldProcess` functionality.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/UseSupportsShouldProcess.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nfunction foo {\n    param(\n        $param1,\n        $Confirm,\n        $WhatIf\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Unaligned Hashtable Example - PowerShell\nDESCRIPTION: This example shows an unaligned hashtable, where the equals signs in the assignment statements are not in the same column. This is what the AlignAssignmentStatement rule flags.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/AlignAssignmentStatement.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n$hashtable = @{\n    property1 = 'value'\n    anotherProperty = 'another value'\n}\n```\n\n----------------------------------------\n\nTITLE: Invoke-Command with Hardcoded ComputerName (Wrong) PowerShell\nDESCRIPTION: This PowerShell function demonstrates the incorrect use of `Invoke-Command` with a hardcoded computer name. It is considered bad practice because it exposes sensitive information and makes the function less flexible. The `ComputerName` parameter should not have a hardcoded value.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/AvoidUsingComputerNameHardcoded.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nFunction Invoke-MyRemoteCommand ()\n{\n    Invoke-Command -Port 343 -ComputerName hardcoderemotehostname\n}\n```\n\n----------------------------------------\n\nTITLE: Suppressing ParseErrors with Severity Parameter - PowerShell\nDESCRIPTION: This example demonstrates how to suppress parser errors from the output by using the `Severity` parameter. By excluding `ParseError` from the `Severity` parameter, only warnings are displayed in the output.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/using-scriptanalyzer.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n$invokeScriptAnalyzerSplat = @{\n    ScriptDefinition = '\"b\" = \"b\"; function eliminate-file () { }'\n    Severity = 'Warning'\n}\nInvoke-ScriptAnalyzer @invokeScriptAnalyzerSplat\n```\n\n----------------------------------------\n\nTITLE: Locale Parameter - YAML\nDESCRIPTION: This YAML snippet defines the `-Locale` parameter. It allows specification of the language locale for the help files. Defaults to the current `CultureInfo`.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/Update-MarkdownModuleFile.md#_snippet_11\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\nAccepted values:\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Incorrect Equality Operator Usage\nDESCRIPTION: This code snippet demonstrates the incorrect use of the `==` operator within an `if` statement.  In PowerShell, `-eq` is the proper equality operator.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/PossibleIncorrectUsageOfAssignmentOperator.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nif ($a == $b)\n{\n\n}\n```\n\n----------------------------------------\n\nTITLE: WhatIf Parameter Definition\nDESCRIPTION: This YAML snippet defines the `-WhatIf` parameter for the Export-MarkdownModuleFile cmdlet. When specified, it shows what would happen if the cmdlet runs without actually executing it.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/Export-MarkdownModuleFile.md#_snippet_8\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.Management.Automation.SwitchParameter\nParameter Sets: (All)\nAliases: wi\nAccepted values:\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Testing cmdlets created by Crescendo - PowerShell\nDESCRIPTION: Illustrates how to use Test-IsCrescendoCommand to determine if various cmdlets were created by Crescendo. The examples show different outputs based on whether the cmdlet is a function or a Crescendo-created cmdlet.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.Crescendo/Test-IsCrescendoCommand.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nTest-IsCrescendoCommand Get-Command\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nTest-IsCrescendoCommand Expand-Archive\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nTest-IsCrescendoCommand Get-VssProvider\n```\n\n----------------------------------------\n\nTITLE: Import Cmdlet Markdown Files Output - PowerShell\nDESCRIPTION: This is the sample output from the Import Cmdlet Markdown Files example. It shows the titles of the CommandHelp objects that were created by importing the Markdown files.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/Import-MarkdownCommandHelp.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nTitle\n-----\nCompare-CommandHelp\nExport-MamlCommandHelp\nExport-MarkdownCommandHelp\nExport-MarkdownModuleFile\nExport-YamlCommandHelp\nExport-YamlModuleFile\nImport-MamlHelp\nImport-MarkdownCommandHelp\nImport-MarkdownModuleFile\nImport-YamlCommandHelp\nImport-YamlModuleFile\nMeasure-PlatyPSMarkdown\nNew-CommandHelp\nNew-MarkdownCommandHelp\nNew-MarkdownModuleFile\nTest-MarkdownCommandHelp\nUpdate-CommandHelp\nUpdate-MarkdownCommandHelp\nUpdate-MarkdownModuleFile\n```\n\n----------------------------------------\n\nTITLE: Merge-MarkdownHelp Syntax - PowerShell\nDESCRIPTION: This snippet shows the syntax for the Merge-MarkdownHelp cmdlet. It highlights the parameters available for controlling the merging process, including input paths, output path, encoding, and merge markers. Common parameters are also supported.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/PlatyPS/Merge-MarkdownHelp.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nMerge-MarkdownHelp [-Path] <String[]> [-OutputPath] <String> [-Encoding <Encoding>] [-ExplicitApplicableIfAll]\n [-Force] [[-MergeMarker] <String>] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: IncrementHelpVersion Parameter Definition\nDESCRIPTION: YAML definition for the IncrementHelpVersion parameter, specifying its type, requirement, position, default value, pipeline input acceptance, and wildcard character acceptance. This parameter controls whether the help version in the module Markdown file is automatically incremented.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/PlatyPS/New-ExternalHelpCab.md#_snippet_5\n\nLANGUAGE: YAML\nCODE:\n```\nType: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Variable Used (Correct)\nDESCRIPTION: This example demonstrates correct usage where all declared variables are used within the function's scriptblock. The variable `$declaredVar` is assigned a value and then used in the `Write-Output` command.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/UseDeclaredVarsMoreThanAssignments.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nfunction Test\n{\n    $declaredVar = 'Declared just for fun'\n    Write-Output $declaredVar\n}\n```\n\n----------------------------------------\n\nTITLE: Create About Topic Txt File - PowerShell\nDESCRIPTION: Demonstrates how to create a new PowerShell About Topic Txt file from an existing Markdown file using `New-ExternalHelp`. It specifies the path to the Markdown file and the output path for the Txt file. Lists the generated file in the output directory.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/PlatyPS/New-MarkdownAboutHelp.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS C:\\> New-ExternalHelp -Path C:\\Test\\ -OutputPath C:\\Test\n\n\n    Directory: C:\\Test\n\n\nMode                LastWriteTime         Length Name\n----\t\t\t\t\t\t\t\t\t\t\t\t\t-------------\t\t\t------ ----\n-a----\t\t\t\t\t7/13/2016   2:15 PM\t\t\t\t  1550 about_TestAboutTopic.help.txt\n```\n\n----------------------------------------\n\nTITLE: NoBackup Parameter - YAML\nDESCRIPTION: This YAML snippet defines the `-NoBackup` parameter. Using this parameter suppresses the creation of a backup file before updating the markdown file.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/Update-MarkdownModuleFile.md#_snippet_13\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.Management.Automation.SwitchParameter\nParameter Sets: (All)\nAliases:\nAccepted values:\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Invoke-AIShell Syntax (Clipboard)\nDESCRIPTION: Defines the syntax for the Invoke-AIShell cmdlet using the Clipboard parameter set. It accepts a query string, an optional agent name, and utilizes the clipboard content as context. Results are displayed in the AIShell window.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/AIShell/Invoke-AIShell.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nInvoke-AIShell [-Query] <String> [-Agent <String>] [-ContextFromClipboard] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Correct PowerShell Function with Single Type Attribute\nDESCRIPTION: This PowerShell function demonstrates the correct usage of a single type specifier on a parameter. The `$Switch` parameter is defined with only the `[switch]` attribute, avoiding potential runtime errors caused by multiple type specifiers.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/AvoidMultipleTypeAttributes.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nfunction Test-Script\n{\n    [CmdletBinding()]\n    Param\n    (\n        [switch]\n        $Switch\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition - CommandInfo - YAML\nDESCRIPTION: Defines the `-CommandInfo` parameter for the `New-MarkdownCommandHelp` cmdlet. This parameter accepts an array of `CommandInfo` objects, allowing the user to specify which commands to generate help files for. Accepts pipeline input by value.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/New-MarkdownCommandHelp.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.Management.Automation.CommandInfo[]\nParameter Sets: (All)\nAliases:\nAccepted values:\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: True (ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition - WithModulePage - YAML\nDESCRIPTION: Defines the `-WithModulePage` parameter for the `New-MarkdownCommandHelp` cmdlet.  If used, it creates a Markdown file for the module, in addition to the command help files.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/New-MarkdownCommandHelp.md#_snippet_15\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.Management.Automation.SwitchParameter\nParameter Sets: (All)\nAliases:\nAccepted values:\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Installing PSScriptAnalyzer with PSResourceGet\nDESCRIPTION: This snippet installs the PSScriptAnalyzer module using the Install-PSResource cmdlet from the PSResourceGet module. The -Name parameter specifies the module to install, and the -Reinstall parameter ensures the module is installed even if an older version is present or if it's already installed.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/overview.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nInstall-PSResource -Name PSScriptAnalyzer -Reinstall\n```\n\n----------------------------------------\n\nTITLE: OutputFolder Parameter Definition - YAML\nDESCRIPTION: Defines the `-OutputFolder` parameter for the `New-MarkdownAboutHelp` cmdlet within a YAML block.  Specifies its type as string, indicates that it is required and accepts no wildcard characters.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/PlatyPS/New-MarkdownAboutHelp.md#_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\nType: String\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: 0\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Correct PowerShell Semicolon Usage Example (Multiline No Semicolon)\nDESCRIPTION: This PowerShell code snippet demonstrates the correct usage: no semicolon used to terminate a line.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/AvoidSemicolonsAsLineTerminators.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nInstall-Module -Name PSScriptAnalyzer\n$a = 1 + $b\n```\n\n----------------------------------------\n\nTITLE: LogPath Parameter - YAML\nDESCRIPTION: Defines the `-LogPath` parameter, specifying the file path for log information. The cmdlet writes the VERBOSE stream to the log file, and when combined with the `-Verbose` parameter, the information is also written to the console. It allows for capturing detailed logs of the update process.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/PlatyPS/Update-MarkdownHelp.md#_snippet_5\n\nLANGUAGE: YAML\nCODE:\n```\nType: String\nParameter Sets: (All)\nAliases: \n\nRequired: False\nPosition: 2\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Initializing Hashtable (Case-Sensitive)\nDESCRIPTION: This snippet demonstrates how to incorrectly create a hashtable using the `[hashtable]::new()` method, resulting in case-sensitive key look-up. This approach is discouraged in PowerShell due to its case-insensitive nature. The hashtable is assigned to the variable `$hashtable`. There are no dependencies.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/UseLiteralInitializerForHashtable.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n$hashtable = [hashtable]::new()\n```\n\n----------------------------------------\n\nTITLE: MaxAboutWidth Parameter Definition\nDESCRIPTION: Specifies that the `-MaxAboutWidth` parameter accepts an integer representing the maximum line length for generating \"about\" help text files. The default value is 80.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/PlatyPS/New-ExternalHelp.md#_snippet_9\n\nLANGUAGE: YAML\nCODE:\n```\nType: Int32\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: 80\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Previewing Compiled Help - PowerShell\nDESCRIPTION: This command previews the compiled MAML help file content using the `Get-HelpPreview` cmdlet.  It displays the help content as it would appear when using `Get-Help` in the PowerShell console.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PlatyPS/create-help-using-platyps.md#_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\nGet-HelpPreview -Path \"<ModuleName>-Help.xml\"\n```\n\n----------------------------------------\n\nTITLE: OutputFolder Parameter Definition - YAML\nDESCRIPTION: This YAML snippet defines the OutputFolder parameter, specifying the location where the Markdown module file is written. The cmdlet creates a folder for each module based on the CommandHelp object being processed. The parameter type is System.String and it's required.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/New-MarkdownModuleFile.md#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\nAccepted values:\nRequired: True\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: CommandHelp Parameter Definition - YAML\nDESCRIPTION: This YAML snippet defines the -CommandHelp parameter for the Export-MamlCommandHelp cmdlet. It specifies the parameter's type, parameter sets, aliases, accepted values, requirement, position, default value, and pipeline input acceptance.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/Export-MamlCommandHelp.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\nType: Microsoft.PowerShell.PlatyPS.Model.CommandHelp[]\nParameter Sets: (All)\nAliases:\nAccepted values:\nRequired: True\nPosition: 0\nDefault value: None\nAccept pipeline input: True (ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: GPT Management Command Help\nDESCRIPTION: This shell snippet displays the help information for the `/gpt` command within the `openai-gpt` agent. It shows the command's usage, options, and available subcommands for listing and using GPT instances.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/AIShell/how-to/agent-openai.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\naish:1> /gpt --help\nDescription:\n  Command for GPT management within the 'openai-gpt' agent.\n\nUsage:\n  gpt [command] [options]\n\nOptions:\n  -h, --help  Show help and usage information\n\nCommands:\n  list <GPT>  List a specific GPT, or all available GPTs.\n  use <GPT>   Specify a GPT to use, or choose one from the available GPTs.\n```\n\n----------------------------------------\n\nTITLE: Uninstall AI Shell using installaishell.ps1 script\nDESCRIPTION: This PowerShell script uninstalls AI Shell by downloading and executing the installaishell.ps1 script with the `-Uninstall` parameter. This method works on Windows and macOS systems.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/AIShell/install-aishell.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nInvoke-Expression \"& { $(Invoke-RestMethod 'https://aka.ms/install-aishell.ps1') } -Uninstall\"\n```\n\n----------------------------------------\n\nTITLE: CustomRulePath Parameter Definition - YAML\nDESCRIPTION: This YAML snippet defines the -CustomRulePath parameter for the Get-ScriptAnalyzerRule cmdlet. It specifies the parameter's type, whether it's required, its position, default value, and whether it accepts pipeline input and wildcard characters. This parameter allows users to specify paths to custom script analyzer rules.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/PSScriptAnalyzer/Get-ScriptAnalyzerRule.md#_snippet_5\n\nLANGUAGE: YAML\nCODE:\n```\nType: String[]\nParameter Sets: (All)\nAliases: CustomizedRulePath\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: True\n```\n\n----------------------------------------\n\nTITLE: Installing PSScriptAnalyzer with PowerShellGet\nDESCRIPTION: This snippet installs the PSScriptAnalyzer module using the Install-Module cmdlet from the PowerShellGet module. The -Name parameter specifies the module to install, and the -Force parameter ensures the module is installed even if an older version is present or if it's already installed.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/overview.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nInstall-Module -Name PSScriptAnalyzer -Force\n```\n\n----------------------------------------\n\nTITLE: SecretVault -Name Parameter Definition YAML\nDESCRIPTION: This YAML snippet defines the -Name parameter for the Get-SecretVault cmdlet.  It specifies the data type as String[], indicates that it is an optional parameter, its position is 0, the default value is None, and wildcard characters are accepted. This parameter is used to filter the vaults returned by the cmdlet based on their names.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.SecretManagement/Get-SecretVault.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nType: String[]\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 0\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: True\n```\n\n----------------------------------------\n\nTITLE: CommandHelp Parameter - YAML\nDESCRIPTION: This YAML snippet defines the `-CommandHelp` parameter for the `Update-MarkdownModuleFile` cmdlet. It accepts an array of `CommandHelp` objects via pipeline or parameter input. These objects contain the command help information used to update the markdown module file.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/Update-MarkdownModuleFile.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\nType: Microsoft.PowerShell.PlatyPS.Model.CommandHelp[]\nParameter Sets: (All)\nAliases:\nAccepted values:\nRequired: False\nPosition: 1\nDefault value: None\nAccept pipeline input: True (ByValue)\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Chat Commands List\nDESCRIPTION: Lists the available chat commands within the AI Shell, specifying their description and source (Core). These commands enable interaction with the AI model and the chat session itself. Includes commands for agent management, screen clearing, code interaction, feedback, session control, and more.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/AIShell/how-to/aishell-reference.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n  Name       Description                                      Source\n──────────────────────────────────────────────────────────────────────\n  /agent     Command for agent management.                    Core\n  /cls       Clear the screen.                                Core\n  /code      Command to interact with the code generated.     Core\n  /dislike   Dislike the last response and send feedback.     Core\n  /exit      Exit the interactive session.                    Core\n  /help      Show all available commands.                     Core\n  /like      Like the last response and send feedback.        Core\n  /refresh   Refresh the chat session.                        Core\n  /render    Render a markdown file, for diagnosis purpose.   Core\n  /retry     Regenerate a new response for the last query.    Core\n```\n\n----------------------------------------\n\nTITLE: Test Markdown help file example\nDESCRIPTION: This example demonstrates how to use the Test-MarkdownCommandHelp cmdlet to test the structure of a Markdown Module help file, including the use of the -DetailView parameter to display detailed validation information.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/Test-MarkdownCommandHelp.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nTest-MarkdownCommandHelp .\\v2\\Microsoft.PowerShell.PlatyPS\\Microsoft.PowerShell.PlatyPS.md -DetailView\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nTest-MarkdownCommandHelp\n  Valid: False\n  File: D:\\Git\\PS-Src\\platyPS\\v2docs\\v2\\Microsoft.PowerShell.PlatyPS\\Microsoft.PowerShell.PlatyPS.md\n\nMessages:\n  PASS: First element is a thematic break\n  FAIL: SYNOPSIS not found.\n  FAIL: SYNTAX not found.\n  FAIL: DESCRIPTION not found.\n  FAIL: EXAMPLES not found.\n  FAIL: PARAMETERS not found.\n  FAIL: INPUTS not found.\n  FAIL: OUTPUTS not found.\n  FAIL: NOTES not found.\n  FAIL: RELATED LINKS not found.\n```\n\n----------------------------------------\n\nTITLE: Incorrect use of positional parameters in Get-Command\nDESCRIPTION: This example demonstrates the incorrect usage of `Get-Command` cmdlet by using positional parameters. The `ChildItem` and `Microsoft.PowerShell.Management` are passed as positional arguments, making the code less readable and potentially error-prone if the cmdlet's parameter order changes.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/AvoidUsingPositionalParameters.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nGet-Command ChildItem Microsoft.PowerShell.Management\n```\n\n----------------------------------------\n\nTITLE: Password Parameter Definition - YAML\nDESCRIPTION: Defines the `-Password` parameter within the YAML schema. This parameter is of type SecureString, is optional, and does not accept pipeline input. It represents the existing password needed to unlock the SecretStore.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.SecretStore/Set-SecretStorePassword.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nType: SecureString\nParameter Sets: ParameterSet\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: ExampleInfo JSON Output\nDESCRIPTION: This JSON snippet shows the output of the New-ExampleInfo cmdlet after being converted to JSON. The JSON object represents an example with properties like Command, OriginalCommand, and Description. These values are populated from the parameters passed to New-ExampleInfo.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.Crescendo/New-ExampleInfo.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"Command\": \"Get-Something\",\n  \"OriginalCommand\": \"native.exe\",\n  \"Description\": \"this is some text\"\n}\n```\n\n----------------------------------------\n\nTITLE: Import-MarkdownModuleFile Syntax (Path)\nDESCRIPTION: Defines the syntax for the Import-MarkdownModuleFile cmdlet when using the -Path parameter to specify the Markdown module file(s). It accepts a string array of paths and common parameters.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/Import-MarkdownModuleFile.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nImport-MarkdownModuleFile [-Path] <string[]> [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: AsPlainText Parameter Definition\nDESCRIPTION: Defines the `-AsPlainText` parameter for the `Get-Secret` cmdlet. It specifies that a secret of type String or SecureString should be returned as a String (plain text) instead of a SecureString.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.SecretManagement/Get-Secret.md#_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\nType: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Incorrect PowerShell Semicolon Usage Example\nDESCRIPTION: This PowerShell code snippet demonstrates incorrect usage of semicolons as line terminators. Semicolons should be avoided at the end of lines for better readability.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/AvoidSemicolonsAsLineTerminators.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nInstall-Module -Name PSScriptAnalyzer; $a = 1 + $b;\n```\n\n----------------------------------------\n\nTITLE: YAML Parameter Definition for MarkdownModuleFile\nDESCRIPTION: This YAML snippet defines the MarkdownModuleFile parameter for the New-HelpCabinetFile cmdlet. It specifies the data type as System.String, indicates that it is a required parameter at position 1, and disallows pipeline input or wildcard characters. This parameter represents the full path to the module's Markdown file, which contains metadata used for naming the cabinet file.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/New-HelpCabinetFile.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.String\nParameter Sets: (All)\nAliases:\nAccepted values:\nRequired: True\nPosition: 1\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: PassThru Parameter (YAML)\nDESCRIPTION: Defines the -PassThru parameter in YAML, which returns the updated file object as output.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/Update-MarkdownCommandHelp.md#_snippet_6\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.Management.Automation.SwitchParameter\nParameter Sets: (All)\nAliases:\nAccepted values:\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Set-SecretStorePassword Syntax - No Parameter Set - PowerShell\nDESCRIPTION: Shows the basic syntax for the Set-SecretStorePassword cmdlet without any specific parameters.  The user will be prompted for current and new passwords. Requires PowerShell environment.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.SecretStore/Set-SecretStorePassword.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-SecretStorePassword [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: UseFullTypeName Parameter - YAML\nDESCRIPTION: Defines the `-UseFullTypeName` parameter, a switch that indicates the use of full type names instead of short names for parameters in the target document. This clarifies parameter types for users.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/PlatyPS/Update-MarkdownHelp.md#_snippet_8\n\nLANGUAGE: YAML\nCODE:\n```\nType: SwitchParameter\nParameter Sets: (All)\nAliases: \n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Path Parameter (YAML)\nDESCRIPTION: Defines the -Path parameter in YAML, which specifies the path to one or more Markdown command files, allowing wildcard characters.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/Update-MarkdownCommandHelp.md#_snippet_7\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.String[]\nParameter Sets: Path\nAliases:\nAccepted values:\nRequired: True\nPosition: 0\nDefault value: None\nAccept pipeline input: True (ByValue)\nAccept wildcard characters: True\n```\n\n----------------------------------------\n\nTITLE: LiteralPath Parameter - YAML\nDESCRIPTION: This YAML snippet defines the `-LiteralPath` parameter. It specifies the path to one or more module markdown files, treating the path literally (no wildcard expansion).\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/ps-modules/Microsoft.PowerShell.PlatyPS/Update-MarkdownModuleFile.md#_snippet_10\n\nLANGUAGE: YAML\nCODE:\n```\nType: System.String\nParameter Sets: LiteralPath\nAliases:\nAccepted values:\nRequired: True\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n```\n\n----------------------------------------\n\nTITLE: Incorrect Assignment to Automatic Variable - PowerShell\nDESCRIPTION: This code demonstrates incorrect usage by attempting to directly assign a value to the `$Error` automatic variable within the `Get-CustomErrorMessage` function.  Assigning values to certain automatic variables can cause errors or unexpected behavior. `$ErrorMessage` is used to construct the error message, which is then incorrectly assigned to the `$Error` variable.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/AvoidAssignmentToAutomaticVariable.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nfunction Get-CustomErrorMessage($ErrorMessage){ $Error = \"Error occurred: $ErrorMessage\" }\n```\n\n----------------------------------------\n\nTITLE: Creating Alias (Correct)\nDESCRIPTION: This example demonstrates the correct way to create an alias in PowerShell without explicitly specifying the global scope. By default, aliases are created in the current scope, avoiding potential conflicts with existing global aliases.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/AvoidGlobalAliases.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-Alias -Name Name1 -Value Value\n```\n\n----------------------------------------\n\nTITLE: Incorrect PowerShell Module Manifest Example\nDESCRIPTION: This code snippet demonstrates an incorrect PowerShell module manifest. It lacks the mandatory 'ModuleVersion' key, which triggers the MissingModuleManifestField warning. The manifest defines module metadata such as author, nested modules, and exports, but the absence of 'ModuleVersion' makes it invalid.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/MissingModuleManifestField.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n@{\n    Author              = 'PowerShell Author'\n    NestedModules       = @('.\\mymodule.psm1')\n    FunctionsToExport   = '*'\n    CmdletsToExport     = '*'\n    VariablesToExport   = '*'\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Module Manifest Field Usage - PowerShell\nDESCRIPTION: This code snippet demonstrates the incorrect usage of the deprecated `ModuleToProcess` field in a PowerShell module manifest. It highlights the field that should be replaced to maintain compatibility and avoid warnings.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/AvoidUsingDeprecatedManifestFields.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nModuleToProcess ='psscriptanalyzer'\n\nModuleVersion = '1.0'\n```\n\n----------------------------------------\n\nTITLE: Pipeline Indentation Example - NoIndentation\nDESCRIPTION: This example demonstrates the 'NoIndentation' setting for pipeline indentation.  With this setting, no additional indentation is added after any pipeline. This can be useful for conserving horizontal space or aligning code with specific style guidelines.\nSOURCE: https://github.com/microsoftdocs/powershell-docs-modules/blob/main/reference/docs-conceptual/PSScriptAnalyzer/Rules/UseConsistentIndentation.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nfoo |\nbar |\nbaz\n```"
  }
]