[
  {
    "owner": "callstack",
    "repo": "react-native-paper",
    "content": "TITLE: Accessing Theme Properties with useTheme Hook - JavaScript\nDESCRIPTION: Illustrates how to access theme properties, such as colors, within a component using the `useTheme()` hook provided by React Native Paper.  The theme object contains customizable styles that can be applied to various UI elements. Requires import of `useTheme` from 'react-native-paper'.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/02-theming.mdx#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport * as React from 'react';\nimport { useTheme } from 'react-native-paper';\n\nexport default function PaymentScreen() {\n  const theme = useTheme();\n\n  return <View style={{ backgroundColor: theme.colors.primary }} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Theme with PaperProvider - JavaScript\nDESCRIPTION: Demonstrates how to wrap the root component with `PaperProvider` to enable theming support in React Native Paper. This is the foundational step for applying custom themes to the entire application.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/02-theming.mdx#_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport * as React from 'react';\nimport { PaperProvider } from 'react-native-paper';\nimport App from './src/App';\n\nexport default function Main() {\n  return (\n    <PaperProvider>\n      <App />\n    </PaperProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Default Theme - JavaScript\nDESCRIPTION: Demonstrates how to extend the default React Native Paper theme with custom properties and colors. This allows developers to customize the look and feel of components while maintaining the base styling. Requires import of `MD3LightTheme` or `MD2LightTheme` as `DefaultTheme` from 'react-native-paper'.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/02-theming.mdx#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport * as React from 'react';\nimport {\n  MD3LightTheme as DefaultTheme,\n  PaperProvider,\n} from 'react-native-paper';\nimport App from './src/App';\n\nconst theme = {\n  ...DefaultTheme,\n  // Specify custom property\n  myOwnProperty: true,\n  // Specify custom property in nested object\n  colors: {\n    ...DefaultTheme.colors,\n    myOwnColor: '#BADA55',\n  },\n};\n\nexport default function Main() {\n  return (\n    <PaperProvider theme={theme}>\n      <App />\n    </PaperProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Context Provider for Theme Switching in React Native\nDESCRIPTION: This code snippet initializes the Context Provider to manage theme switching in a React Native application using React Native Paper. It defines a functional component `App` that uses `React.useState` to manage the current theme (dark or default), `React.useCallback` to create a memoized `toggleTheme` function, and `React.useMemo` to create a `preferences` object containing the `toggleTheme` function and the `isThemeDark` state. The `PreferencesContext.Provider` wraps the application, making the theme preferences accessible to all components.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/08-theming-with-react-navigation.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { PreferencesContext } from './PreferencesContext';\n\nconst Stack = createStackNavigator();\n\nexport default function App() {\n  const [isThemeDark, setIsThemeDark] = React.useState(false);\n\n  let theme = isThemeDark ? CombinedDarkTheme : CombinedDefaultTheme;\n\n  const toggleTheme = React.useCallback(() => {\n    return setIsThemeDark(!isThemeDark);\n  }, [isThemeDark]);\n\n  const preferences = React.useMemo(\n    () => ({\n      toggleTheme,\n      isThemeDark,\n    }),\n    [toggleTheme, isThemeDark]\n  );\n\n  return (\n    // Context is wired into the local state of our main component, so that its values could be propagated throughout the entire application\n    <PreferencesContext.Provider value={preferences}>\n      <PaperProvider theme={theme}>\n        <NavigationContainer theme={theme}>\n          <Stack.Navigator initialRouteName=\"Home\">\n            <Stack.Screen name=\"Home\" component={HomeScreen} />\n            <Stack.Screen name=\"Details\" component={DetailsScreen} />\n          </Stack.Navigator>\n        </NavigationContainer>\n      </PaperProvider>\n    </PreferencesContext.Provider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Vector Icons\nDESCRIPTION: This command installs the react-native-vector-icons package using npm.  This is needed if you're on a vanilla React Native project, as some components use icons internally.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/01-getting-started.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react-native-vector-icons\n```\n\n----------------------------------------\n\nTITLE: Using MaterialCommunityIcons with Button Component in React Native Paper\nDESCRIPTION: This snippet demonstrates how to use an icon from the MaterialCommunityIcons library with the `Button` component in React Native Paper. It leverages `react-native-vector-icons` to render the icon specified by its name. Make sure `react-native-vector-icons` is properly linked in your project.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/03-icons.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<Button icon=\"camera\">\n  Press me\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Simple Built-in Theme Override - JavaScript\nDESCRIPTION: This code snippet demonstrates how to override the default theme properties in React Native Paper using JavaScript. It customizes the roundness and colors of the default theme.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/02-theming.mdx#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as React from 'react';\nimport { MD3LightTheme, PaperProvider } from 'react-native-paper';\nimport App from './src/App';\n\nconst theme = {\n  ...MD3LightTheme, // or MD3DarkTheme\n  roundness: 2,\n  colors: {\n    ...MD3LightTheme.colors,\n    primary: '#3498db',\n    secondary: '#f1c40f',\n    tertiary: '#a1b2c3',\n  },\n};\n\nexport default function Main() {\n  return (\n    <PaperProvider theme={theme}>\n      <App />\n    </PaperProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Stack Navigator with React Navigation (JavaScript)\nDESCRIPTION: This snippet initializes a basic navigation stack using react-navigation.  It creates a Stack Navigator with two screens, 'Home' and 'Details', associating them with HomeScreen and DetailsScreen components respectively.  It imports necessary modules from 'react-navigation/native' and 'react-navigation/stack'.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/09-react-navigation.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport 'react-native-gesture-handler';\nimport React from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\n\nconst Stack = createStackNavigator();\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <Stack.Navigator initialRouteName=\"Home\">\n        <Stack.Screen name=\"Home\" component={HomeScreen} />\n        <Stack.Screen name=\"Details\" component={DetailsScreen} />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Wrapping with PaperProvider\nDESCRIPTION: This code snippet shows how to wrap your root component with PaperProvider. PaperProvider provides the theme to all the components. It is a good idea to add it in the component which is passed to AppRegistry.registerComponent.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/01-getting-started.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport { AppRegistry } from 'react-native';\nimport { PaperProvider } from 'react-native-paper';\nimport { name as appName } from './app.json';\nimport App from './src/App';\n\nexport default function Main() {\n  return (\n    <PaperProvider>\n      <App />\n    </PaperProvider>\n  );\n}\n\nAppRegistry.registerComponent(appName, () => Main);\n```\n\n----------------------------------------\n\nTITLE: Merging Themes with deepmerge (MD3)\nDESCRIPTION: Merges the default and dark themes from React Native Paper (MD3) and React Navigation using the `deepmerge` library.  The Navigation themes have already been adapted to MD3 using the `adaptNavigationTheme` function.  This combines the theme properties into single theme objects.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/08-theming-with-react-navigation.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  NavigationContainer,\n  DarkTheme as NavigationDarkTheme,\n  DefaultTheme as NavigationDefaultTheme,\n} from '@react-navigation/native';\nimport {\n  MD3DarkTheme,\n  MD3LightTheme,\n  adaptNavigationTheme,\n} from 'react-native-paper';\nimport merge from 'deepmerge';\n\nconst { LightTheme, DarkTheme } = adaptNavigationTheme({\n  reactNavigationLight: NavigationDefaultTheme,\n  reactNavigationDark: NavigationDarkTheme,\n});\n\nconst CombinedDefaultTheme = merge(MD3LightTheme, LightTheme);\nconst CombinedDarkTheme = merge(MD3DarkTheme, DarkTheme);\n```\n\n----------------------------------------\n\nTITLE: Customizing Stack Header with AppBar (JavaScript)\nDESCRIPTION: This snippet customizes the Stack Navigator's header by passing a custom component, `CustomNavigationBar`. It sets the `header` option within `screenOptions` to render the custom navigation bar for all screens in the stack.  `CustomNavigationBar` receives navigation props.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/09-react-navigation.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <Stack.Navigator\n        initialRouteName=\"Home\"\n        screenOptions={{\n          header: (props) => <CustomNavigationBar {...props} />,\n        }}>\n        <Stack.Screen name=\"Home\" component={HomeScreen} />\n        <Stack.Screen name=\"Details\" component={DetailsScreen} />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Theme Properties with withTheme HOC - JavaScript\nDESCRIPTION: Shows how to access theme properties using the `withTheme()` Higher-Order Component (HOC) from React Native Paper.  Wrapping a component with `withTheme()` injects the theme as a prop.  Requires import of `withTheme` from 'react-native-paper'.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/02-theming.mdx#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport * as React from 'react';\nimport { withTheme } from 'react-native-paper';\n\nfunction PaymentScreen({ theme }) {\n  return <View style={{ backgroundColor: theme.colors.primary }} />;\n}\n\nexport default withTheme(PaymentScreen);\n```\n\n----------------------------------------\n\nTITLE: Adding Back Button to AppBar (JavaScript)\nDESCRIPTION: This snippet adds a back button to the AppBar using `Appbar.BackAction` from `react-native-paper`. It conditionally renders the back button based on the `back` prop, which indicates whether there is a previous screen in the navigation stack. Requires react-native-paper and @react-navigation/elements.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/09-react-navigation.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Appbar } from 'react-native-paper';\nimport { getHeaderTitle } from '@react-navigation/elements';\n\nexport default function CustomNavigationBar({ navigation, route, options, back }) {\n  const title = getHeaderTitle(options, route.name);\n\n  return (\n    <Appbar.Header>\n      {back ? <Appbar.BackAction onPress={navigation.goBack} /> : null}\n      <Appbar.Content title={title} />\n    </Appbar.Header>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using the useAppTheme Hook - TypeScript\nDESCRIPTION: This TypeScript code demonstrates how to use the custom `useAppTheme` hook in a component to access custom theme properties. It retrieves a custom color from the theme and applies it to a View.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/02-theming.mdx#_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as React from 'react';\nimport { useAppTheme } from './App';\n\nexport default function HomeScreen() {\n  const {\n    colors: { brandPrimary },\n  } = useAppTheme();\n\n  return <View style={{ backgroundColor: brandPrimary }}>...</View>;\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Context and Implementing Theme Toggle with React Native Paper\nDESCRIPTION: This code snippet demonstrates how to access the theme context and implement a theme toggle using React Native Paper components. The `Header` component uses the `useTheme` hook to access the current theme and `React.useContext` to access the `PreferencesContext` and retrieve the `toggleTheme` function and `isThemeDark` state. A `Switch` component is used to allow the user to toggle between light and dark themes. The Appbar's theme is also customized using the context.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/08-theming-with-react-navigation.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { useTheme, Appbar, TouchableRipple, Switch } from 'react-native-paper';\nimport { PreferencesContext } from './PreferencesContext';\n\nconst Header = ({ scene }) => {\n  const theme = useTheme();\n  const { toggleTheme, isThemeDark } = React.useContext(PreferencesContext);\n\n  return (\n    <Appbar.Header\n      theme={{\n        colors: {\n          primary: theme?.colors.surface,\n        },\n      }}\n    >\n      <Appbar.Content title={scene.route?.name} />\n        <Switch\n          color={'red'}\n          value={isThemeDark}\n          onValueChange={toggleTheme}\n        />\n    </Appbar.Header>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Dynamic AppBar Title with getHeaderTitle (JavaScript)\nDESCRIPTION: This snippet dynamically sets the AppBar title using `getHeaderTitle` from `@react-navigation/elements`. It retrieves the title based on the current route and options passed to the `CustomNavigationBar` component. Requires `@react-navigation/elements` and `react-native-paper`.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/09-react-navigation.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Appbar } from 'react-native-paper';\nimport { getHeaderTitle } from '@react-navigation/elements';\n\nexport default function CustomNavigationBar({ route, options }) {\n  const title = getHeaderTitle(options, route.name);\n\n  return (\n    <Appbar.Header>\n      <Appbar.Content title={title} />\n    </Appbar.Header>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Babel Plugin Configuration\nDESCRIPTION: This code snippet demonstrates how to configure the babel plugin for React Native Paper to reduce bundle size in a React Native project. The plugin rewrites import statements to import only the used modules. This is configured in the babel.config.js file.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/01-getting-started.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  presets: ['module:metro-react-native-babel-preset'],\n  env: {\n    production: {\n      plugins: ['react-native-paper/babel'],\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Typography: Replacing Old Components with Text Variant\nDESCRIPTION: This snippet shows how to replace old typography components (Headline, Title, Subheading, Paragraph, Caption) with the new `<Text>` component and the `variant` prop, which is required for migrating to Material You.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/10-migration-guide-to-5.0.md#_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n- <Headline>Headline</Headline>\n+ <Text variant=\"headlineSmall\">Headline</Text>\n\n- <Title>Title</Title>\n+ <Text variant=\"titleLarge\">Title</Text>\n\n- <Subheading>Subheading</Subheading>\n+ <Text variant=\"titleMedium\">Subheading</Text>\n\n- <Paragraph>Paragraph</Paragraph>\n+ <Text variant=\"bodyMedium\">Paragraph</Text>\n\n- <Caption>Caption</Caption>\n+ <Text variant=\"bodySmall\">Caption</Text>\n```\n\n----------------------------------------\n\nTITLE: Modify package.json scripts for CRA\nDESCRIPTION: This diff shows the changes to the `package.json` scripts to use `react-app-rewired` instead of `react-scripts` for `start`, `build`, and `test` commands in a Create React App project. This allows customization of the webpack configuration without ejecting.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/05-react-native-web.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n/* package.json */\n\n  \"scripts\": {\n-   \"start\": \"react-scripts start\",\n+   \"start\": \"react-app-rewired start\",\n-   \"build\": \"react-scripts build\",\n+   \"build\": \"react-app-rewired build\",\n-   \"test\": \"react-scripts test --env=jsdom\",\n+   \"test\": \"react-app-rewired test --env=jsdom\"\n}\n```\n\n----------------------------------------\n\nTITLE: Theming: Setting Material Design Version\nDESCRIPTION: This snippet demonstrates how to specify the Material Design version (2 or 3) in the theme configuration using the `version` property.  This allows you to choose between Material Design 2 and Material You (Material Design 3).\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/10-migration-guide-to-5.0.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ntheme: {\n  /* ... */\n  version: 3 | 2\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Theme to a Component - JavaScript\nDESCRIPTION: This JavaScript code shows how to apply a theme directly to a React Native Paper component by passing the `theme` prop.  The component's theme is merged with the global `PaperProvider` theme.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/02-theming.mdx#_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as React from 'react';\nimport { Button } from 'react-native-paper';\n\nexport default function ButtonExample() {\n  return (\n    <Button raised theme={{ roundness: 3 }}>\n      Press me\n    </Button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: React Navigation and Paper Provider Setup\nDESCRIPTION: Sets up the basic application structure with React Navigation's `NavigationContainer` and React Native Paper's `PaperProvider`. It includes a simple example of a stack navigator with two screens.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/08-theming-with-react-navigation.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { TouchableOpacity } from 'react-native';\nimport {\n  Card,\n  Title,\n  Paragraph,\n  List,\n  PaperProvider,\n} from 'react-native-paper';\n\nconst Stack = createStackNavigator();\n\nconst HomeScreen = ({ navigation }) => (\n  <TouchableOpacity\n    onPress={() =>\n      navigation?.push('Details', {\n        title,\n        content,\n      })\n    }\n  >\n    <Card>\n      <Card.Content>\n        <Title>{title}</Title>\n        <Paragraph>{content}</Paragraph>\n      </Card.Content>\n    </Card>\n  </TouchableOpacity>\n);\n\nconst DetailsScreen = (props) => {\n  const { title, content } = props?.route?.params;\n  return (\n    <List.Section>\n      <List.Subheader>{title}</List.Subheader>\n      <List.Item title={content} />\n    </List.Section>\n  );\n};\n\nexport default function App() {\n  return (\n    <PaperProvider>\n      <NavigationContainer>\n        <Stack.Navigator initialRouteName=\"Home\">\n          <Stack.Screen name=\"Home\" component={HomeScreen} />\n          <Stack.Screen name=\"Details\" component={DetailsScreen} />\n        </Stack.Navigator>\n      </NavigationContainer>\n    </PaperProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Typed useAppTheme Hook - TypeScript\nDESCRIPTION: This TypeScript code defines a typed `useAppTheme` hook for accessing the extended theme. This provides type safety when using custom theme properties throughout the application.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/02-theming.mdx#_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as React from 'react';\nimport {\n  MD3LightTheme,\n  PaperProvider,\n  useTheme,\n} from 'react-native-paper';\nimport App from './src/App';\n\nconst theme = {\n  ...MD3LightTheme,\n\n  // Specify a custom property\n  custom: 'property',\n\n  // Specify a custom property in nested object\n  colors: {\n    ...MD3LightTheme.colors,\n    brandPrimary: '#fefefe',\n    brandSecondary: 'red',\n  },\n};\n\nexport type AppTheme = typeof theme;\n\nexport const useAppTheme = () => useTheme<AppTheme>();\n\nexport default function Main() {\n  return (\n    <PaperProvider theme={theme}>\n      <App />\n    </PaperProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Babel Loader (CRA)\nDESCRIPTION: This JavaScript snippet configures babel-loader using react-app-rewired to compile JavaScript files, specifically targeting react-native-paper and react-native-vector-icons within the node_modules directory. It disables babelrc and configFile to prevent conflicts and specifies presets and plugins for compilation.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/05-react-native-web.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = function override(config, env) {\n  config.module.rules.push({\n    test: /\\.js$/,\n    exclude: /node_modules[/\\\\](?!react-native-vector-icons)/,\n    use: {\n      loader: \"babel-loader\",\n      options: {\n        // Disable reading babel configuration\n        babelrc: false,\n        configFile: false,\n\n        // The configuration for compilation\n        presets: [\n          [\"@babel/preset-env\", { useBuiltIns: \"usage\" }],\n          \"@babel/preset-react\",\n          \"@babel/preset-flow\",\n          \"@babel/preset-typescript\"\n        ],\n        plugins: [\n          \"@babel/plugin-proposal-class-properties\",\n          \"@babel/plugin-proposal-object-rest-spread\"\n        ]\n      }\n    }\n  });\n\n  return config;\n};\n```\n\n----------------------------------------\n\nTITLE: Updating BottomNavigation routes - JavaScript\nDESCRIPTION: This snippet demonstrates how to update the `routes` property in the `BottomNavigation` component.  It shows the removal of the `color` property and the renaming of `icon` to `focusedIcon`. The optional `unfocusedIcon` prop is introduced for theme version 3 compatibility. This update is crucial for migrating to newer versions of React Native Paper.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/10-migration-guide-to-5.0.md#_snippet_15\n\nLANGUAGE: diff\nCODE:\n```\nroutes: [\n- { key: \"album\", title: \"Album\", icon: \"image-album\", color: \"#3F51B5\" },\n+ { key: \"album\", title: \"Album\", focusedIcon: \"image-album\" },\n- { key: \"library\", title: \"Library\", icon: \"inbox\", color: \"#009688\" },\n+ { key: \"library\", title: \"Library\", focusedIcon: \"inbox\", unfocusedIcon: \"inbox-outline\" },\n- { key: \"favorites\", title: \"Favorites\", icon: \"heart\", color: \"#795548\" },\n+ { key: \"favorites\", title: \"Favorites\", focusedIcon: \"heart\", unfocusedIcon: \"heart-outline; },\n- { key: \"purchased\", title: \"Purchased\", icon: \"shopping-cart\", color: \"#607D8B\" },\n+ { key: \"purchased\", title: \"Purchased\", focusedIcon: \"shopping-cart\" },\n]\n```\n\n----------------------------------------\n\nTITLE: Using Dynamic Color Schemes - JSX\nDESCRIPTION: Shows how to apply a dynamically generated color scheme to the application theme.  The `yourGeneratedLightOrDarkScheme` should be replaced with the actual generated color scheme object.  Requires import of `MD3LightTheme` or `MD2LightTheme` as `DefaultTheme` from 'react-native-paper'.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/02-theming.mdx#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport * as React from 'react';\nimport {\n  MD3LightTheme as DefaultTheme,\n  PaperProvider,\n} from 'react-native-paper';\nimport App from './src/App';\n\nconst theme = {\n  ...DefaultTheme,\n  colors: yourGeneratedLightOrDarkScheme.colors, // Copy it from the color codes scheme and then use it here\n};\n\nexport default function Main() {\n  return (\n    <PaperProvider theme={theme}>\n      <App />\n    </PaperProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Adapting Navigation Theme (MD3)\nDESCRIPTION: Adapts the React Navigation theme to align with the Material Design 3 color system used by React Native Paper. It uses the `adaptNavigationTheme` utility to adjust navigation-compliant themes in both light and dark modes.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/08-theming-with-react-navigation.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  DarkTheme as NavigationDarkTheme,\n  DefaultTheme as NavigationDefaultTheme,\n} from '@react-navigation/native';\nimport { adaptNavigationTheme } from 'react-native-paper';\n\nconst { LightTheme, DarkTheme } = adaptNavigationTheme({\n  reactNavigationLight: NavigationDefaultTheme,\n  reactNavigationDark: NavigationDarkTheme,\n});\n```\n\n----------------------------------------\n\nTITLE: Styling the Bottom Navigation Bar in React Native\nDESCRIPTION: This snippet shows how to customize the style of the bottom navigation bar using the `barStyle` prop.  It sets the `activeColor`, `inactiveColor`, and `backgroundColor` to customize the appearance of the tab bar. It also provides an example to adjust the bottom padding for translucent navigation bars on Android. Requires react-native-paper and react-navigation dependencies.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/09-bottom-navigation.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<Tab.Navigator\n  initialRouteName=\"Home\"\n  activeColor=\"#f0edf6\"\n  inactiveColor=\"#3e2465\"\n  barStyle={{ backgroundColor: '#694fad' }}\n>\n  {/* ... */}\n</Tab.Navigator>\n```\n\nLANGUAGE: javascript\nCODE:\n```\n<Tab.Navigator\n  initialRouteName=\"Home\"\n  activeColor=\"#f0edf6\"\n  inactiveColor=\"#3e2465\"\n  barStyle={{ paddingBottom: 48 }}\n>\n  {/* ... */}\n</Tab.Navigator>\n```\n\n----------------------------------------\n\nTITLE: Theming: Colors Configuration\nDESCRIPTION: This snippet illustrates the new color palette structure for theming in Material You (MD3). It showcases the properties required within the `colors` object, including primary, secondary, tertiary, surface, background, and error colors, along with their corresponding 'on' colors and elevation levels.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/10-migration-guide-to-5.0.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ntheme: {\n  /* ... */\n  colors: {\n    primary,\n    primaryContainer,\n    secondary,\n    secondaryContainer,\n    tertiary,\n    tertiaryContainer,\n    surface,\n    surfaceVariant,\n    surfaceDisabled,\n    background,\n    error,\n    errorContainer,\n    onPrimary,\n    onPrimaryContainer,\n    onSecondary,\n    onSecondaryContainer,\n    onTertiary,\n    onTertiaryContainer,\n    onSurface,\n    onSurfaceVariant,\n    onSurfaceDisabled,\n    onError,\n    onErrorContainer,\n    onBackground,\n    outline,\n    shadow,\n    inverseOnSurface,\n    inverseSurface,\n    inversePrimary,\n    backdrop,\n    elevation: {\n      level0,\n      level1,\n      level2,\n      level3,\n      level4,\n      level5\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Icons with PaperProvider in React Native Paper\nDESCRIPTION: This snippet demonstrates how to use custom icons (other than MaterialCommunityIcons) within React Native Paper by passing them to the `settings` prop of the `PaperProvider` component. It imports a custom icon component (e.g., from FontAwesome) and uses it to render the icon.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/03-icons.mdx#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport AwesomeIcon from 'react-native-vector-icons/FontAwesome';\n// ...\n\n      <PaperProvider\n        settings={{\n          icon: props => <AwesomeIcon {...props} />,\n        }}\n        theme={this.state.theme}\n      >\n        // ...\n      </PaperProvider>\n```\n\n----------------------------------------\n\nTITLE: Merging Themes with Vanilla JS (MD2)\nDESCRIPTION: Merges the default and dark themes from React Native Paper (MD2) and React Navigation using vanilla JavaScript spread syntax. This provides an alternative to using a library like `deepmerge`.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/08-theming-with-react-navigation.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst CombinedDefaultTheme = {\n  ...MD2LightTheme,\n  ...NavigationDefaultTheme,\n  colors: {\n    ...MD2LightTheme.colors,\n    ...NavigationDefaultTheme.colors,\n  },\n};\nconst CombinedDarkTheme = {\n  ...MD2DarkTheme,\n  ...NavigationDarkTheme,\n  colors: {\n    ...MD2DarkTheme.colors,\n    ...NavigationDarkTheme.colors,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Importing and Using createMaterialBottomTabNavigator in React Native\nDESCRIPTION: This snippet demonstrates how to import the `createMaterialBottomTabNavigator` from the `react-native-paper/react-navigation` library and use it to create a basic tab navigator with two screens, Home and Settings.  It defines a `MyTabs` component that renders the tab navigator. Requires react-native-paper and react-navigation dependencies.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/09-bottom-navigation.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMaterialBottomTabNavigator } from 'react-native-paper/react-navigation';\n\nconst Tab = createMaterialBottomTabNavigator();\n\nfunction MyTabs() {\n  return (\n    <Tab.Navigator>\n      <Tab.Screen name=\"Home\" component={HomeScreen} />\n      <Tab.Screen name=\"Settings\" component={SettingsScreen} />\n    </Tab.Navigator>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Merging Themes with Vanilla JS (MD3)\nDESCRIPTION: Merges the default and dark themes from React Native Paper (MD3) and React Navigation using vanilla JavaScript spread syntax. The Navigation themes have already been adapted to MD3.  This provides an alternative to using a library like `deepmerge`.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/08-theming-with-react-navigation.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst { LightTheme, DarkTheme } = adaptNavigationTheme({\n  reactNavigationLight: NavigationDefaultTheme,\n  reactNavigationDark: NavigationDarkTheme,\n});\n\nconst CombinedDefaultTheme = {\n  ...MD3LightTheme,\n  ...LightTheme,\n  colors: {\n    ...MD3LightTheme.colors,\n    ...LightTheme.colors,\n  },\n};\nconst CombinedDarkTheme = {\n  ...MD3DarkTheme,\n  ...DarkTheme,\n  colors: {\n    ...MD3DarkTheme.colors,\n    ...DarkTheme.colors,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing CustomNavigationBar with AppBar (JavaScript)\nDESCRIPTION: This snippet implements a basic `CustomNavigationBar` using `AppBar` from `react-native-paper`.  It renders an `Appbar.Header` containing an `Appbar.Content` component with a hardcoded title. Requires react-native-paper.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/09-react-navigation.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Appbar } from 'react-native-paper';\n\nexport default function CustomNavigationBar() {\n  return (\n    <Appbar.Header>\n      <Appbar.Content title=\"My awesome app\" />\n    </Appbar.Header>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Install Webpack and Dependencies\nDESCRIPTION: This command installs webpack, webpack-cli, and webpack-dev-server as dev dependencies, providing the necessary tools for bundling and serving the application in a web environment.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/05-react-native-web.md#_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\nnpm install --save-dev webpack webpack-cli webpack-dev-server\n```\n\n----------------------------------------\n\nTITLE: Load MaterialCommunityIcons\nDESCRIPTION: This JavaScript snippet demonstrates how to load Material Community Icons in a React Native Paper application running on the web.  It checks if the platform is 'web', and if so, injects a style tag into the DOM which defines the `@font-face` rule for the `MaterialCommunityIcons` font family. The `src` property points to the TTF file of the font, which is required using `require`.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/05-react-native-web.md#_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\n<PaperProvider>\n  <React.Fragment>\n    {Platform.OS === 'web' ? (\n      <style type=\"text/css\">{`\n        @font-face {\n          font-family: 'MaterialCommunityIcons';\n          src: url(${require('react-native-vector-icons/Fonts/MaterialCommunityIcons.ttf')}) format('truetype');\n        }\n      `}</style>\n    ) : null}\n    <App />\n  </React.Fragment>\n</PaperProvider>\n```\n\n----------------------------------------\n\nTITLE: Configure Babel Loader (Webpack)\nDESCRIPTION: This JavaScript snippet configures babel-loader within the webpack configuration to process JavaScript files. It specifically excludes files within `node_modules` except for `react-native-vector-icons`, ensuring that necessary modules are properly transpiled. It disables reading babel configuration files to prevent any conflicts, and specifies the presets and plugins needed for transforming the code.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/05-react-native-web.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  test: /\\.js$/,\n  exclude: /node_modules[/\\\\](?!react-native-vector-icons)/,\n  use: {\n    loader: 'babel-loader',\n    options: {\n      // Disable reading babel configuration\n      babelrc: false,\n      configFile: false,\n\n      // The configuration for compilation\n      presets: [\n        ['@babel/preset-env', { useBuiltIns: 'usage' }],\n        '@babel/preset-react',\n        '@babel/preset-flow',\n        \"@babel/preset-typescript\"\n      ],\n      plugins: [\n        '@babel/plugin-proposal-class-properties',\n        '@babel/plugin-proposal-object-rest-spread'\n      ],\n    },\n  },\n},\n```\n\n----------------------------------------\n\nTITLE: Using Local Image as Icon with Button in React Native Paper\nDESCRIPTION: This snippet demonstrates using a local image as the icon for the `Button` component in React Native Paper. The `icon` prop accepts a `require` statement pointing to the local image file. Ensure the image is located in the correct relative path.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/03-icons.mdx#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<Button icon={require('../assets/chameleon.jpg')}>\n  Press me\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Paper v5\nDESCRIPTION: This snippet shows how to install React Native Paper v5 using npm. It also demonstrates the installation of react-native-safe-area-context, a new dependency, and the linking of native libraries for iOS.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/10-migration-guide-to-5.0.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react-native-paper\n```\n\n----------------------------------------\n\nTITLE: Sync Dynamic Colors with System Colors - TypeScript\nDESCRIPTION: Demonstrates how to synchronize dynamic colors with system colors on Android 12+ devices using the `expo-material3-theme` library. This ensures that the application theme adapts to the user's system color preferences. Requires installation and setup of the `expo-material3-theme` library.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/02-theming.mdx#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useMaterial3Theme } from '@pchmn/expo-material3-theme';\nimport { useColorScheme } from 'react-native';\nimport {\n  MD3DarkTheme,\n  MD3LightTheme,\n  PaperProvider,\n} from 'react-native-paper';\nimport App from './src/App';\n\nexport default function Main() {\n  const colorScheme = useColorScheme();\n  const { theme } = useMaterial3Theme();\n\n  const paperTheme =\n    colorScheme === 'dark'\n      ? { ...MD3DarkTheme, colors: theme.dark }\n      : { ...MD3LightTheme, colors: theme.light };\n\n  return (\n    <PaperProvider theme={paperTheme}>\n      <App />\n    </PaperProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Material Design 2 Simple Setup - JavaScript\nDESCRIPTION: This JavaScript code demonstrates how to enable Material Design 2 theme in React Native Paper. By passing `{ version: 2 }` to PaperProvider, the app uses the built-in Material Design 2 theme.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/02-theming.mdx#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as React from 'react';\nimport { PaperProvider } from 'react-native-paper';\nimport App from './src/App';\n\nexport default function Main() {\n  return (\n    <PaperProvider theme={{ version: 2 }}>\n      <App />\n    </PaperProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Button color props - JavaScript\nDESCRIPTION: This snippet illustrates how to update the `color` prop in the `Button` component to `textColor` and `buttonColor`.  `textColor` sets the text color, and `buttonColor` sets the background color. This change is part of the React Native Paper v3 theme update.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/10-migration-guide-to-5.0.md#_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n- <Button mode=\"text\" color=\"red\" onPress={onPress}>Custom text color</Button>\n+ <Button mode=\"text\" textColor=\"red\" onPress={onPress}>Custom text color</Button>\n```\n\nLANGUAGE: javascript\nCODE:\n```\n- <Button mode=\"contained\" color=\"red\" onPress={onPress}>Custom text color</Button>\n+ <Button mode=\"contained\" buttonColor=\"red\" onPress={onPress}>Custom background color</Button>\n```\n\nLANGUAGE: string\nCODE:\n```\ndiff\n```\n\n----------------------------------------\n\nTITLE: Customizing Theme\nDESCRIPTION: This code snippet demonstrates how to provide a custom theme to customize the colors. It shows how to extend MD3LightTheme and override the primary and secondary colors.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/01-getting-started.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport { MD3LightTheme as DefaultTheme, PaperProvider } from 'react-native-paper';\nimport App from './src/App';\n\nconst theme = {\n  ...DefaultTheme,\n  colors: {\n    ...DefaultTheme.colors,\n    primary: 'tomato',\n    secondary: 'yellow',\n  },\n};\n\nexport default function Main() {\n  return (\n    <PaperProvider theme={theme}>\n      <App />\n    </PaperProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Appbar.Content: Removing Subtitle\nDESCRIPTION: This snippet shows how to remove the `subtitle` and `subtitleStyle` props from the `Appbar.Content` component, as they are no longer supported in the new design guidelines.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/10-migration-guide-to-5.0.md#_snippet_13\n\nLANGUAGE: diff\nCODE:\n```\n- <Appbar.Content title=\"Title\" subtitle=\"Subtitle\" styles={styles.subtitle} />\n+ <Appbar.Content title=\"Title\" />\n```\n\n----------------------------------------\n\nTITLE: Preventing Default Tab Press Behavior in React Native\nDESCRIPTION: This snippet demonstrates how to prevent the default behavior when a tab is pressed using the `tabPress` event listener. It calls `event.preventDefault()` to stop the default action and allows you to implement custom behavior. Requires react-native-paper and react-navigation dependencies.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/09-bottom-navigation.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nReact.useEffect(() => {\n  const unsubscribe = navigation.addListener('tabPress', (e) => {\n    // Prevent default behavior\n\n    e.preventDefault();\n    // Do something manually\n    // ...\n  });\n\n  return unsubscribe;\n}, [navigation]);\n```\n\n----------------------------------------\n\nTITLE: Install React Native Web and Dependencies\nDESCRIPTION: This command installs react-native-web, react-dom, and react-art, which are required for running React Native components in a web environment.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/05-react-native-web.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nnpm install react-native-web react-dom react-art\n```\n\n----------------------------------------\n\nTITLE: Updating Menu.Item icon prop to leadingIcon - JavaScript\nDESCRIPTION: This code showcases the renaming of the `icon` prop in the `Menu.Item` component to `leadingIcon`.  This change provides more clarity in determining where the icon is located. Requires React Native Paper library.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/10-migration-guide-to-5.0.md#_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\n- <Menu.Item icon=\"redo\" onPress={() => {}} title=\"Redo\" />\n+ <Menu.Item leadingIcon=\"redo\" onPress={() => {}} title=\"Redo\" />\n```\n\nLANGUAGE: string\nCODE:\n```\ndiff\n```\n\n----------------------------------------\n\nTITLE: Using Remote Image as Icon with Button in React Native Paper\nDESCRIPTION: This snippet shows how to use a remote image as an icon for the `Button` component in React Native Paper. The `icon` prop accepts an object with a `uri` property pointing to the image URL.  The image might be rendered with a different color than the original depending on the component's styling.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/03-icons.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<Button icon={{ uri: 'https://avatars0.githubusercontent.com/u/17571969?v=3&s=400' }}>\n  Press me\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Updating Divider props: inset to leftInset - JavaScript\nDESCRIPTION: This code shows the replacement of the `inset` prop in the `Divider` component with `leftInset`. This change allows more specific control over the left inset of the divider. Requires React Native Paper library.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/10-migration-guide-to-5.0.md#_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\n- <Divider inset />\n+ <Divider leftInset />\n```\n\nLANGUAGE: string\nCODE:\n```\ndiff\n```\n\n----------------------------------------\n\nTITLE: Using FAB with size prop - JavaScript\nDESCRIPTION: This code showcases the usage of the `size` prop for the `FAB` component. The `size` prop defines the height of the FAB. Requires React Native Paper library.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/10-migration-guide-to-5.0.md#_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\n<FAB size=\"large\" />\n```\n\n----------------------------------------\n\nTITLE: Typography: Configuring Fonts\nDESCRIPTION: This snippet demonstrates how to configure fonts using the `configureFonts` utility in React Native Paper v5. It shows how to pass the font config object and the `isV3` property to adjust theme fonts for Material Design 2 or 3.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/10-migration-guide-to-5.0.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconfigureFonts(params)\n```\n\n----------------------------------------\n\nTITLE: Navigating to a specific screen in React Navigation Tab Navigator\nDESCRIPTION: This snippet demonstrates how to navigate to a specific screen within the tab navigator using the `jumpTo` helper function.  It shows how to pass parameters to the destination route. Requires react-native-paper and react-navigation dependencies.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/09-bottom-navigation.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nnavigation.jumpTo('Profile', { name: 'Michaś' });\n```\n\n----------------------------------------\n\nTITLE: Appbar: Elevated Prop\nDESCRIPTION: This snippet shows how to add a shadow to the `Appbar` component by passing the `elevated` prop. By default, the theme version 3 `Appbar` and `Appbar.Header` don't have a shadow.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/10-migration-guide-to-5.0.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n<Appbar elevated>\n  /* ... */\n</Appbar>\n```\n\n----------------------------------------\n\nTITLE: Disable Ripple Effect Globally - React Native\nDESCRIPTION: This snippet shows how to disable the ripple effect for all React Native Paper components by setting `rippleEffectEnabled` to `false` within the `settings` prop of the `PaperProvider` component. This will apply the setting to all components wrapped by the provider.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/11-ripple-effect.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Provider as PaperProvider } from 'react-native-paper';\n// ...\n\n<PaperProvider\n  settings={{\n    rippleEffectEnabled: false\n  }}\n>\n  // ...\n</PaperProvider>\n```\n\n----------------------------------------\n\nTITLE: Updating IconButton color prop to iconColor - JavaScript\nDESCRIPTION: This code shows the renaming of the `color` prop in the `IconButton` component to `iconColor`. This clarifies the purpose of the prop as controlling the icon's color. Requires React Native Paper library.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/10-migration-guide-to-5.0.md#_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\n- <IconButton color=\"red\" />\n+ <IconButton iconColor=\"red\" />\n```\n\nLANGUAGE: string\nCODE:\n```\ndiff\n```\n\n----------------------------------------\n\nTITLE: Adding Navigation Button to HomeScreen (JavaScript)\nDESCRIPTION: This snippet adds a navigation button to the HomeScreen component, enabling navigation to the DetailsScreen. It uses the `Button` component from 'react-native-paper' and the `navigation` prop provided by `Stack.Screen` to trigger the navigation. It requires react-native-paper for the Button component.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/09-react-navigation.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Button } from 'react-native-paper';\n\nfunction HomeScreen({ navigation }) {\n  return (\n    <View style={style.container}>\n      <Text>Home Screen</Text>\n      <Button mode=\"contained\" onPress={() => navigation.navigate('Details')}>\n        Go to details\n      </Button>\n    </View>\n  );\n}\n\nconst style = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: SegmentedButtons Usage\nDESCRIPTION: Shows how to implement the new `SegmentedButtons` component in React Native Paper. This example demonstrates the basic usage with single select variant, including setting up the state and handling value changes.  It allows users to select options, switch views, or sort elements.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/10-migration-guide-to-5.0.md#_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\nconst MyComponent = () => {\n  const [value, setValue] = React.useState('');\n\n  return (\n      <SegmentedButtons\n        value={value}\n        onValueChange={setValue}\n        buttons={[\n          {\n            value: 'walk',\n            label: 'Walking',\n          },\n          {\n            value: 'train',\n            label: 'Transit',\n          },\n          {\n            value: 'drive',\n            label: 'Driving',\n          },\n        ]}\n      />\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Appbar: Setting Mode\nDESCRIPTION: This snippet shows how to set the `mode` prop on the `Appbar` component to use different app bar styles: small, medium, large, or center-aligned.  The default mode is `small`.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/10-migration-guide-to-5.0.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n<Appbar mode=\"center-aligned\">\n  /* ... */\n</Appbar>\n```\n\n----------------------------------------\n\nTITLE: Creating React Context for Theme\nDESCRIPTION: Defines a React Context (`PreferencesContext`) for managing the application's theme. It includes a toggle function for switching themes and a boolean value indicating whether the dark theme is active.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/08-theming-with-react-navigation.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\n\nexport const PreferencesContext = React.createContext({\n  toggleTheme: () => {},\n  isThemeDark: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Surface Elevation Prop\nDESCRIPTION: Demonstrates the change in how elevation is handled in the `Surface` component.  The elevation prop is now a separate prop instead of being part of the style. This is to support both iOS and Android platforms.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/10-migration-guide-to-5.0.md#_snippet_41\n\nLANGUAGE: diff\nCODE:\n```\n- <Surface style={{ elevation: 1 }} />\n+ <Surface elevation={1} />\n```\n\n----------------------------------------\n\nTITLE: Appbar: Using safeAreaInsets\nDESCRIPTION: This snippet shows how to use the `safeAreaInsets` prop on the `Appbar` component. We have added a property `safeAreaInsets` to make it easier for users to build the `BottomBar`, formed on the `Appbar` components.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/10-migration-guide-to-5.0.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n<Appbar safeAreaInsets={{ bottom: 47 }}>\n  /* ... */\n</Appbar>\n```\n\n----------------------------------------\n\nTITLE: Implementing HomeScreen and DetailsScreen Components (JavaScript)\nDESCRIPTION: This snippet implements the HomeScreen and DetailsScreen components. Each component renders a View containing a Text element indicating the screen name.  It also includes a StyleSheet for basic styling. Required dependency is 'react-native'.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/09-react-navigation.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport {View, Text, Button, StyleSheet} from 'react-native';\n\nfunction HomeScreen() {\n  return (\n    <View style={style.container}>\n      <Text>Home Screen</Text>\n    </View>\n  );\n}\n\nfunction DetailsScreen() {\n  return (\n    <View style={style.container}>\n      <Text>Details Screen</Text>\n    </View>\n  );\n}\n\nconst style = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Advanced Theme Override - TypeScript\nDESCRIPTION: This TypeScript code demonstrates how to extend the default theme schema by adding new properties. It shows how to add a custom property to the theme and to a nested object within the theme, ensuring type safety.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/02-theming.mdx#_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as React from 'react';\nimport { MD3LightTheme, PaperProvider } from 'react-native-paper';\nimport App from './src/App';\n\nconst theme = {\n  ...MD3LightTheme,\n\n  // Specify a custom property\n  custom: 'property',\n\n  // Specify a custom property in nested object\n  colors: {\n    ...MD3LightTheme.colors,\n    brandPrimary: '#fefefe',\n    brandSecondary: 'red',\n  },\n};\n\nexport default function Main() {\n  return (\n    <PaperProvider theme={theme}>\n      <App />\n    </PaperProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: RTL Support with Image Source Icon in React Native Paper\nDESCRIPTION: This snippet showcases how to configure RTL (Right-to-Left) support for an image source icon in the `Button` component of React Native Paper. It utilizes the `direction` property within the `icon` object to specify the desired direction ('rtl' for right-to-left, 'ltr' for left-to-right, or 'auto' to use device settings).\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/03-icons.mdx#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n<Button icon={{ source: { uri: 'https://avatars0.githubusercontent.com/u/17571969?v=3&s=400' }, direction: 'rtl' }}>\n  Press me\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Using compact BottomNavigation prop - JavaScript\nDESCRIPTION: This code shows how to use the `compact` prop with the `BottomNavigation` component.  Setting `compact` adjusts tab distribution across the width, especially in horizontal mode. This prop is compatible with both theme versions.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/10-migration-guide-to-5.0.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n<BottomNavigation compact />\n```\n\n----------------------------------------\n\nTITLE: Configure Asset Resource (Webpack >= 5)\nDESCRIPTION: This JavaScript snippet configures webpack's built-in asset resource handling for image and font assets.  It defines a regular expression to match files with extensions like .jpg, .png, .woff, .woff2, .eot, .ttf, and .svg. The `asset/resource` type instructs webpack to emit a separate file and export the URL.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/05-react-native-web.md#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  test: /\\.(jpg|png|woff|woff2|eot|ttf|svg)$/,\n  type: 'asset/resource'\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Menu to AppBar (JavaScript)\nDESCRIPTION: This snippet adds a menu to the AppBar using `Menu` and `Appbar.Action` from `react-native-paper`. It manages the menu's visibility using a state variable and conditionally renders the menu based on the `back` prop. Requires react-native-paper and @react-navigation/elements.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/09-react-navigation.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { Appbar, Menu } from 'react-native-paper';\nimport { getHeaderTitle } from '@react-navigation/elements';\n\nexport default function CustomNavigationBar({\n  navigation,\n  route,\n  options,\n  back,\n}) {\n  const [visible, setVisible] = React.useState(false);\n  const openMenu = () => setVisible(true);\n  const closeMenu = () => setVisible(false);\n\n  const title = getHeaderTitle(options, route.name);\n\n  return (\n    <Appbar.Header>\n      {back ? <Appbar.BackAction onPress={navigation.goBack} /> : null}\n      <Appbar.Content title={title} />\n      {!back ? (\n        <Menu\n          visible={visible}\n          onDismiss={closeMenu}\n          anchor={\n            <Appbar.Action\n              icon=\"dots-vertical\"\n              onPress={openMenu}\n            />\n          }>\n          <Menu.Item\n            onPress={() => {\n              console.log('Option 1 was pressed');\n            }}\n            title=\"Option 1\"\n          />\n          <Menu.Item\n            onPress={() => {\n              console.log('Option 2 was pressed');\n            }}\n            title=\"Option 2\"\n          />\n          <Menu.Item\n            onPress={() => {\n              console.log('Option 3 was pressed');\n            }}\n            title=\"Option 3\"\n            disabled\n          />\n        </Menu>\n      ) : null}\n    </Appbar.Header>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using elevated and container-tonal Button modes - JavaScript\nDESCRIPTION: This example demonstrates the usage of `elevated` and `container-tonal` modes for the `Button` component. `elevated` provides visual separation and `container-tonal` offers a middle ground between contained and outlined styles.  Requires React Native Paper library.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/10-migration-guide-to-5.0.md#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n<>\n  <Button icon=\"camera\" mode=\"elevated\" onPress={onPress}>\n    Elevated\n  </Button>\n  <Button icon=\"camera\" mode=\"container-tonal\" onPress={onPress}>\n    Container tonal\n  </Button>\n</>\n```\n\n----------------------------------------\n\nTITLE: RTL Support with Icon Name in React Native Paper\nDESCRIPTION: This snippet showcases how to configure RTL (Right-to-Left) support for an icon name in the `Button` component of React Native Paper. It utilizes the `direction` property within the `icon` object to specify the desired direction ('rtl' for right-to-left, 'ltr' for left-to-right, or 'auto' to use device settings).\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/03-icons.mdx#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n<Button icon={{ source: \"add-a-photo\", direction: 'rtl' }}>\n  Press me\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Updating FAB.Group actions prop labelStyle - JavaScript\nDESCRIPTION: This code demonstrates the renaming of the `labelStyle` property within the `actions` array of the `FAB.Group` component to `containerStyle`. The prop now refers to the container, and `labelStyle` is now for the text label. Requires React Native Paper library.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/10-migration-guide-to-5.0.md#_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\n- <FAB.Group actions={[{ icon: \"plus\", labelStyle: styles.customStyle }]} />\n+ <FAB.Group actions={[{ icon: \"plus\", containerStyle: styles.customStyle, labelStyle: styles.newLabelStyle }]} />\n```\n\nLANGUAGE: string\nCODE:\n```\ndiff\n```\n\n----------------------------------------\n\nTITLE: Importing MD3 Themes\nDESCRIPTION: Imports Material Design 3 themes in both light and dark modes from React Native Paper. These themes can be used directly or combined with other themes.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/08-theming-with-react-navigation.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  MD3LightTheme,\n  MD3DarkTheme,\n} from 'react-native-paper';\n```\n\n----------------------------------------\n\nTITLE: Using IconButton with selected prop - JavaScript\nDESCRIPTION: This code demonstrates the usage of the `selected` prop with the `IconButton` component. The `selected` prop sets an alternative color scheme. Requires React Native Paper library.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/10-migration-guide-to-5.0.md#_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\n<IconButton selected>\n```\n\n----------------------------------------\n\nTITLE: Using Checkbox.Item with labelVariant - JavaScript\nDESCRIPTION: This snippet illustrates the usage of the `labelVariant` prop in `Checkbox.Item`.  It allows specifying text styles for the label based on its type role and size.  Requires React Native Paper library.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/10-migration-guide-to-5.0.md#_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\n<Checkbox.Item \n  labelVariant=\"titleLarge\"\n>\n```\n\n----------------------------------------\n\nTITLE: Using Dialog.Icon in Dialog - JavaScript\nDESCRIPTION: This code demonstrates how to use the `Dialog.Icon` component within a `Dialog`.  It places an icon at the top of the dialog's content. Requires React Native Paper and is only compatible with theme version 3.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/10-migration-guide-to-5.0.md#_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\n<Portal>\n  <Dialog visible={visible} onDismiss={hideDialog}>\n    <Dialog.Icon icon=\"alert\" />\n  </Dialog>\n</Portal>\n```\n\n----------------------------------------\n\nTITLE: Merging Themes with deepmerge (MD2)\nDESCRIPTION: Merges the default and dark themes from React Native Paper (MD2) and React Navigation using the `deepmerge` library. This combines the theme properties into single theme objects.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/08-theming-with-react-navigation.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  NavigationContainer,\n  DarkTheme as NavigationDarkTheme,\n  DefaultTheme as NavigationDefaultTheme,\n} from '@react-navigation/native';\nimport {\n  MD2DarkTheme,\n  MD2LightTheme,\n} from 'react-native-paper';\nimport merge from 'deepmerge';\n\nconst CombinedDefaultTheme = merge(MD2LightTheme, NavigationDefaultTheme);\nconst CombinedDarkTheme = merge(MD2DarkTheme, NavigationDarkTheme);\n```\n\n----------------------------------------\n\nTITLE: RadioButton.Item Label Variant\nDESCRIPTION: Demonstrates how to use the `labelVariant` prop to define text styles for the `RadioButton.Item` component in React Native Paper.  This allows for specifying the text size and type role of the label.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/10-migration-guide-to-5.0.md#_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\n<RadioButton.Item \n  labelVariant=\"titleLarge\"\n>\n```\n\n----------------------------------------\n\nTITLE: Using FAB with customSize prop - JavaScript\nDESCRIPTION: This snippet shows how to define a custom size for the `FAB` component using the `customSize` prop.  This allows for more precise control over the FAB's dimensions. Requires React Native Paper library.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/10-migration-guide-to-5.0.md#_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\n<FAB customSize={64}>\n```\n\n----------------------------------------\n\nTITLE: Using a Render Function for Custom Icon with Button in React Native Paper\nDESCRIPTION: This snippet illustrates using a render function to create a custom icon for the `Button` component in React Native Paper. The function receives `size` and `color` properties and returns a React element, which is then used as the icon. The developer is responsible for ensuring the element's size is appropriate.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/03-icons.mdx#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n<Button\n  icon={({ size, color }) => (\n    <Image\n      source={require('../assets/chameleon.jpg')}\n      style={{ width: size, height: size, tintColor: color }}\n    />\n  )}\n>\n  Press me\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Using Chip with compact, elevated, and showSelectedOverlay props - JavaScript\nDESCRIPTION: This code demonstrates the use of `compact`, `elevated`, and `showSelectedOverlay` props with the `Chip` component. These properties control padding, elevation, and the display of a selected overlay, respectively. Requires React Native Paper library.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/10-migration-guide-to-5.0.md#_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\n<>\n  <Chip compact>Compact Chip</Chip>\n  <Chip icon=\"camera\" elevated>Elevated Chip</Chip>\n  <Chip icon=\"camera\" selected showSelectedOverlay>Chip with selected overlay</Chip>\n</>\n```\n\n----------------------------------------\n\nTITLE: Customize Ripple Color in Button - React Native\nDESCRIPTION: This snippet demonstrates how to customize the ripple effect color of a React Native Paper Button component using the `rippleColor` prop. The color is set to a transparent red.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/11-ripple-effect.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<Button\n  rippleColor=\"#FF000020\"\n  icon=\"camera\"\n  mode=\"contained\"\n  onPress={() => console.log('Pressed')}>\n  Press me\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Wrapping with Redux Provider\nDESCRIPTION: This code snippet demonstrates how to wrap your root component with both Redux Provider and PaperProvider. Redux Provider should be wrapped outside PaperProvider so that the context is available to components rendered inside a Modal from the library.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/01-getting-started.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from 'react';\nimport { PaperProvider } from 'react-native-paper';\nimport { Provider as StoreProvider } from 'react-redux';\nimport App from './src/App';\nimport store from './store';\n\nexport default function Main() {\n  return (\n    <StoreProvider store={store}>\n      <PaperProvider>\n        <App />\n      </PaperProvider>\n    </StoreProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Updating FAB small prop to size prop - JavaScript\nDESCRIPTION: This example demonstrates how to update the `small` prop in the `FAB` component to the `size` prop with a value of 'small'. Requires React Native Paper library.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/10-migration-guide-to-5.0.md#_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\n- <FAB small />\n+ <FAB size=\"small\" />\n```\n\nLANGUAGE: string\nCODE:\n```\ndiff\n```\n\n----------------------------------------\n\nTITLE: Using IconButton with containerColor prop - JavaScript\nDESCRIPTION: This code showcases the usage of the `containerColor` prop for the `IconButton` component. The `containerColor` prop sets a custom background color for the icon container. Requires React Native Paper library.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/10-migration-guide-to-5.0.md#_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\n<IconButton containerColor=\"red\">\n```\n\n----------------------------------------\n\nTITLE: Updating FAB.Group actions prop small - JavaScript\nDESCRIPTION: This code shows the replacement of the `small` property within the `actions` array of the `FAB.Group` component. The small prop on action item has been replaced with size='small' on the FAB component. Requires React Native Paper library.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/10-migration-guide-to-5.0.md#_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\n- <FAB.Group actions={[{ icon: \"plus\", small }]} />\n+ <FAB.Group actions={[{ icon: \"plus\" }]} />\n```\n\nLANGUAGE: string\nCODE:\n```\ndiff\n```\n\n----------------------------------------\n\nTITLE: Using FAB with mode prop - JavaScript\nDESCRIPTION: This snippet shows how to use the `mode` prop with the `FAB` component to specify whether a button should be flat or elevated. The default `variant` prop is `primary`. Requires React Native Paper library.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/10-migration-guide-to-5.0.md#_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\n<FAB mode=\"flat\" />\n```\n\n----------------------------------------\n\nTITLE: Importing Themes (MD2)\nDESCRIPTION: Imports light and dark theme variants from React Navigation and React Native Paper for Material Design 2. This provides a starting point for theme customization and combination.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/08-theming-with-react-navigation.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  DarkTheme as NavigationDarkTheme,\n  DefaultTheme as NavigationDefaultTheme,\n} from '@react-navigation/native';\n\nimport {\n  MD2LightTheme,\n  MD2DarkTheme,\n} from 'react-native-paper';\n```\n\n----------------------------------------\n\nTITLE: TextInput.Icon Prop Renaming\nDESCRIPTION: Illustrates the renaming of the `name` prop to `icon` in the `TextInput.Icon` component.  The `icon` prop now accepts more than just an icon name; it can also accept a function.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/10-migration-guide-to-5.0.md#_snippet_42\n\nLANGUAGE: diff\nCODE:\n```\n- <TextInput.Icon name=\"magnify\" />\n+ <TextInput.Icon icon=\"magnify\" />\n```\n\n----------------------------------------\n\nTITLE: Using Menu.Item with dense and trailingIcon - JavaScript\nDESCRIPTION: This code shows the usage of the `dense` and `trailingIcon` props in the `Menu.Item` component. The `dense` prop sets a smaller item height, and `trailingIcon` displays an icon at the end of the item row. Requires React Native Paper library.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/10-migration-guide-to-5.0.md#_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\n<Menu.Item dense trailingIcon=\"chevron-up\">\n```\n\n----------------------------------------\n\nTITLE: Appbar.Action: Using isLeading Prop\nDESCRIPTION: This snippet shows how to use the `isLeading` prop on the `Appbar.Action` component to indicate that the action is the leading button and should be placed at the beginning of the `Appbar`.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/10-migration-guide-to-5.0.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n<Appbar.Action isLeading icon=\"magnify\" onPress={() => {}} />\n```\n\n----------------------------------------\n\nTITLE: Configure File Loader (Webpack < 5)\nDESCRIPTION: This JavaScript snippet configures file-loader within webpack to handle image and font assets. It defines a regular expression to match files with extensions like .jpg, .png, .woff, .woff2, .eot, .ttf, and .svg. When these files are imported, file-loader copies them to the output directory and provides the correct URL for the application to use.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/05-react-native-web.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  test: /\\.(jpg|png|woff|woff2|eot|ttf|svg)$/,\n  loader: 'file-loader',\n}\n```\n\n----------------------------------------\n\nTITLE: Import Platform from react-native\nDESCRIPTION: Imports the Platform module from react-native, which allows checking the current operating system (e.g., 'web', 'ios', 'android') at runtime.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/05-react-native-web.md#_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Platform } from 'react-native';\n```\n\n----------------------------------------\n\nTITLE: Install File Loader\nDESCRIPTION: This command installs file-loader as a dev dependency. file-loader is used to handle static assets like images, fonts, and other files by copying them to the output directory and providing a URL to reference them in the application. This is for webpack versions less than 5.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/05-react-native-web.md#_snippet_9\n\nLANGUAGE: Bash\nCODE:\n```\nnpm install --save-dev file-loader\n```\n\n----------------------------------------\n\nTITLE: Install React App Rewired\nDESCRIPTION: Installs react-app-rewired as a dev dependency, which allows overriding the default webpack configuration in Create React App without ejecting.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/05-react-native-web.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nnpm install --save-dev react-app-rewired\n```\n\n----------------------------------------\n\nTITLE: Webpack Configuration File\nDESCRIPTION: This `webpack.config.js` file configures webpack for a React Native project to run on the web.  It specifies the entry point, output path, enables source maps, and configures the development server.  It is a basic starting point and requires further configuration for loaders and resolvers.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/05-react-native-web.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst path = require('path');\n\nmodule.exports = {\n  mode: 'development',\n\n  // Path to the entry file, change it according to the path you have\n  entry: path.join(__dirname, 'App.js'),\n\n  // Path for the output files\n  output: {\n    path: path.join(__dirname, 'dist'),\n    filename: 'app.bundle.js',\n  },\n\n  // Enable source map support\n  devtool: 'source-map',\n\n  // Loaders and resolver config\n  module: {\n    rules: [\n\n    ],\n  },\n  resolve: {\n\n  },\n\n  // Development server config\n  devServer: {\n    contentBase: [path.join(__dirname, 'public')],\n    historyApiFallback: true,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Typography: Migrating configureFonts from v2 to v3\nDESCRIPTION: This snippet demonstrates how to migrate the `configureFonts` function from v2 to v3. The font config previously passed directly into function has to be passed into the params object property called `config` and the params object property `isV3` has to be set to `false`\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/10-migration-guide-to-5.0.md#_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\n- configureFonts(fontConfig)\n+ configureFonts({config: fontConfig, isV3: false})\n```\n\n----------------------------------------\n\nTITLE: Typography: Text Variants\nDESCRIPTION: This snippet shows how to use the new `<Text>` component with the `variant` prop to define different text styles based on Material You's typography scale. It includes examples for Display, Headline, Title, Label, and Body variants in large, medium, and small sizes.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/10-migration-guide-to-5.0.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n<Text variant=\"displayLarge\">Display Large</Text>\n<Text variant=\"displayMedium\">Display Medium</Text>\n<Text variant=\"displaySmall\">Display small</Text>\n\n<Text variant=\"headlineLarge\">Headline Large</Text>\n<Text variant=\"headlineMedium\">Headline Medium</Text>\n<Text variant=\"headlineSmall\">Headline Small</Text>\n\n<Text variant=\"titleLarge\">Title Large</Text>\n<Text variant=\"titleMedium\">Title Medium</Text>\n<Text variant=\"titleSmall\">Title Small</Text>\n\n<Text variant=\"bodyLarge\">Body Large</Text>\n<Text variant=\"bodyMedium\">Body Medium</Text>\n<Text variant=\"bodySmall\">Body Small</Text>\n\n<Text variant=\"labelLarge\">Label Large</Text>\n<Text variant=\"labelMedium\">Label Medium</Text>\n<Text variant=\"labelSmall\">Label Small</Text>\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Yarn\nDESCRIPTION: This command installs all the necessary dependencies for the React Native Paper website using Yarn. It is a prerequisite for local development and building the website.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ yarn\n```\n\n----------------------------------------\n\nTITLE: RTL Support with Render Function Icon in React Native Paper\nDESCRIPTION: This snippet demonstrates using a render function to create a custom icon for the `Button` component in React Native Paper with RTL support.  The render function receives `direction` property, which can be used to transform the icon based on the layout direction.  In this example, the icon is flipped horizontally when the `direction` is `'rtl'`.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/03-icons.mdx#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n<Button\n  icon={({ size, color, direction }) => (\n    <Image\n      source={require('../assets/chameleon.jpg')}\n      style={[\n        {\n          transform: [{ scaleX: direction === 'rtl' ? -1 : 1 }],\n        },\n        {\n          width: size,\n          height: size,\n          tintColor: color\n        }\n      ]}\n    />\n  )}\n>\n  Press me\n</Button>\n```\n\n----------------------------------------\n\nTITLE: Alias react-native (Webpack)\nDESCRIPTION: This JavaScript snippet configures webpack to alias `react-native` to `react-native-web`. This ensures that when the application imports modules from `react-native`, it actually uses the corresponding modules from `react-native-web`, enabling the React Native code to run on the web.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/05-react-native-web.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nalias: {\n  'react-native$': require.resolve('react-native-web'),\n}\n```\n\n----------------------------------------\n\nTITLE: Using Card with contained mode - JavaScript\nDESCRIPTION: This code shows how to use the `contained` mode for the `Card` component. The `contained` mode applies the card's specified background color without elevation or a border. Requires React Native Paper library.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/10-migration-guide-to-5.0.md#_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n<Card mode=\"contained\" />\n```\n\n----------------------------------------\n\nTITLE: Customizing All Component Instances - JavaScript\nDESCRIPTION: This JavaScript code provides an example of creating a custom component wrapper that applies a specific style to all instances of a React Native Paper component. This avoids directly changing the global theme properties.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/02-theming.mdx#_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as React from 'react';\nimport { Button } from 'react-native-paper';\n\nexport default function FancyButton(props) {\n  return (\n    <Button\n      theme={{ typescale: { labelLarge: { letterSpacing: 1 } } }}\n      {...props}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Card.Title with titleVariant and subtitleVariant - JavaScript\nDESCRIPTION: This code shows how to use the `titleVariant` and `subtitleVariant` props within the `Card.Title` component. These props allow developers to specify text styles for the title and subtitle according to their type role and size requirements. Requires React Native Paper library.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/10-migration-guide-to-5.0.md#_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n<Card.Title\n  titleVariant=\"headlineMedium\"\n  subtitleVariant=\"bodyLarge\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Add Web Script to package.json\nDESCRIPTION: This JSON snippet adds a custom script named `web` to the `package.json` file. This script simplifies running the webpack development server with the `--open` flag, which automatically opens the application in the browser.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/05-react-native-web.md#_snippet_14\n\nLANGUAGE: JSON\nCODE:\n```\n\"web\": \"webpack-dev-server --open\"\n```\n\n----------------------------------------\n\nTITLE: Installing deepmerge\nDESCRIPTION: Installs the `deepmerge` package using npm or yarn. This package is used to merge the theme objects from React Native Paper and React Navigation.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/08-theming-with-react-navigation.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install deepmerge\n```\n\n----------------------------------------\n\nTITLE: Building Static Website Content\nDESCRIPTION: This command generates static content for the React Native Paper website and places it in the `build` directory. This directory can then be served using any static content hosting service for deployment.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/README.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n$ yarn build\n```\n\n----------------------------------------\n\nTITLE: Material Design 2 with TypeScript - TypeScript\nDESCRIPTION: This TypeScript code example showcases how to extend the Material Design 2 theme with custom properties and types. It defines a custom type `AppTheme` and uses the `useAppTheme` hook to access the custom theme properties.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/02-theming.mdx#_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as React from 'react';\nimport {\n  MD2LightTheme,\n  PaperProvider,\n  useTheme,\n} from 'react-native-paper';\nimport App from './src/App';\n\nconst theme = {\n  // Extend Material Design 2 theme\n\n  ...MD2LightTheme, // or MD2DarkTheme\n\n  // Specify a custom property\n  myOwnProperty: true,\n\n  // Specify a custom nested property\n  colors: {\n    ...MD2LightTheme.colors,\n    myOwnColor: '#BADA55',\n  },\n};\n\nexport type AppTheme = typeof theme;\n\nexport const useAppTheme = () => useTheme<AppTheme>();\n\nexport default function Main() {\n  return (\n    <PaperProvider theme={theme}>\n      <App />\n    </PaperProvider>\n  );\n}\n\n// App.tsx\n\nexport default function App() {\n  const { theme } = useAppTheme();\n\n  return <View style={{ backgroundColor: theme.colors.primary }} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Website Using SSH\nDESCRIPTION: This command deploys the React Native Paper website to GitHub Pages using SSH. It first builds the website and then pushes the static content to the `gh-pages` branch.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/README.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n$ USE_SSH=true yarn deploy\n```\n\n----------------------------------------\n\nTITLE: Using Drawer.Section with showDivider prop - JavaScript\nDESCRIPTION: This code demonstrates the use of the `showDivider` prop within the `Drawer.Section` component. Setting `showDivider` to `false` prevents the display of a separator at the end of the section. Requires React Native Paper library.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/10-migration-guide-to-5.0.md#_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\n<Drawer.Section showDivider={false}>\n  <Drawer.CollapsedItem\n    focusedIcon=\"inbox\"\n    unfocusedIcon=\"inbox-outline\"\n    label=\"Inbox\"\n  />\n  <Drawer.CollapsedItem\n    focusedIcon=\"star\"\n    unfocusedIcon=\"star-outline\"\n    label=\"Starred\"\n  />\n</Drawer.Section>\n```\n\n----------------------------------------\n\nTITLE: Deploying Website without SSH\nDESCRIPTION: This command deploys the React Native Paper website to GitHub Pages without using SSH, requiring the GitHub username to be provided. It builds the website and pushes the static content to the `gh-pages` branch.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/README.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\n$ GIT_USER=<Your GitHub username> yarn deploy\n```\n\n----------------------------------------\n\nTITLE: Using FAB with variant prop - JavaScript\nDESCRIPTION: This example demonstrates the usage of the `variant` prop for the `FAB` component. The `variant` prop allows customization of color mappings. Requires React Native Paper library.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/10-migration-guide-to-5.0.md#_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\n<FAB variant=\"tertiary\" />\n```\n\n----------------------------------------\n\nTITLE: Adapting React Navigation Theme - TypeScript\nDESCRIPTION: Shows how to adapt a React Navigation theme to use Material Design 3 colors from React Native Paper. This allows for a consistent color scheme between the application and React Navigation's UI elements. Requires React Navigation libraries and `adaptNavigationTheme` from 'react-native-paper'.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/02-theming.mdx#_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\n// App.tsx\nimport { NavigationContainer, DefaultTheme } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { PaperProvider, MD3LightTheme, adaptNavigationTheme } from 'react-native-paper';\nconst Stack = createStackNavigator();\nconst { LightTheme } = adaptNavigationTheme({ reactNavigationLight: DefaultTheme });\nexport default function App() {\n  return (\n    <PaperProvider theme={MD3LightTheme}>\n      <NavigationContainer theme={LightTheme}>\n        <Stack.Navigator initialRouteName=\"Home\">\n          <Stack.Screen name=\"Home\" component={HomeScreen} />\n          <Stack.Screen name=\"Details\" component={DetailsScreen} />\n        </Stack.Navigator>\n      </NavigationContainer>\n    </PaperProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Babel Plugin Configuration for Expo\nDESCRIPTION: This code snippet demonstrates how to configure the babel plugin for React Native Paper to reduce bundle size in an Expo project.  It is configured in the babel.config.js file.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/01-getting-started.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = function(api) {\n  api.cache(true);\n  return {\n    presets: ['babel-preset-expo'],\n    env: {\n      production: {\n        plugins: ['react-native-paper/babel'],\n      },\n    },\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: HTML Template\nDESCRIPTION: This `index.html` file serves as the HTML template for the web application. It includes meta tags for character set, compatibility, and viewport settings. It also defines basic styling and includes a div with id `root` where the React application will be rendered and a script tag to load the bundled JavaScript.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/05-react-native-web.md#_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n<!doctype html>\n<head>\n  <meta charSet=\"utf-8\" />\n  <meta httpEquiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n\n  <meta name=\"viewport\" content=\"width=device-width,minimum-scale=1,initial-scale=1\" />\n\n  <title>App</title>\n\n  <style>\n    html, body, #root {\n      height: 100%;\n    }\n\n    #root {\n      display: flex;\n      flex-direction: column;\n    }\n  </style>\n</head>\n<body>\n  <div id=\"root\"></div>\n  <script src=\"app.bundle.js\"></script>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Flow Configuration\nDESCRIPTION: This code snippet demonstrates how to configure Flow typechecking to recognize .js, .native.js, .android.js, and .ios.js files.  This configuration is added to the .flowconfig file.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/01-getting-started.md#_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\nmodule.file_ext=.js\nmodule.file_ext=.native.js\nmodule.file_ext=.android.js\nmodule.file_ext=.ios.js\n```\n\n----------------------------------------\n\nTITLE: Importing a Button Component from React Native Paper\nDESCRIPTION: This snippet demonstrates how to import the Button component from the react-native-paper library. This is necessary to use the Paper's button component in a React Native application.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/src/pages/index.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Button} from 'react-native-paper';\n```\n\n----------------------------------------\n\nTITLE: Tooltip Component Usage\nDESCRIPTION: Shows how to use the `Tooltip` component in React Native Paper. This example demonstrates displaying a tooltip for an `IconButton` component.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/10-migration-guide-to-5.0.md#_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\n<Tooltip title=\"Selected Camera\">\n  <IconButton icon=\"camera\" selected size={24} onPress={() => {}} />\n</Tooltip>\n```\n\n----------------------------------------\n\nTITLE: Starting Local Development Server\nDESCRIPTION: This command starts a local development server using Yarn. It allows for live updates and reflects changes in the browser without requiring a server restart. This is essential for efficient website development.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n$ yarn start\n```\n\n----------------------------------------\n\nTITLE: Passing Combined Theme to Providers\nDESCRIPTION: Passes the combined dark theme (`CombinedDarkTheme`) to both the `PaperProvider` and `NavigationContainer`. This ensures that both React Native Paper and React Navigation use the same theme.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/08-theming-with-react-navigation.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst Stack = createStackNavigator();\n\nexport default function App() {\n  return (\n    <PaperProvider theme={CombinedDarkTheme}>\n      <NavigationContainer theme={CombinedDarkTheme}>\n        <Stack.Navigator initialRouteName=\"Home\">\n          <Stack.Screen name=\"Home\" component={HomeScreen} />\n          <Stack.Screen name=\"Details\" component={DetailsScreen} />\n        </Stack.Navigator>\n      </NavigationContainer>\n    </PaperProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing a Release using Yarn\nDESCRIPTION: This snippet demonstrates how to publish a new release of React Native Paper using `yarn release`. It relies on the `release-it` tool and requires a `GITHUB_TOKEN` environment variable with 'repo' access.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn release\n```\n\n----------------------------------------\n\nTITLE: Complete Example of Bottom Navigation with Icons\nDESCRIPTION: This snippet showcases a complete example of using `createMaterialBottomTabNavigator` with icons from `react-native-vector-icons`. It defines three tabs (Feed, Notifications, Profile) and customizes their labels and icons using the `options` prop.  Requires react-native-paper, react-navigation, and react-native-vector-icons dependencies.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/09-bottom-navigation.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createMaterialBottomTabNavigator } from 'react-native-paper/react-navigation';\nimport MaterialCommunityIcons from 'react-native-vector-icons/MaterialCommunityIcons';\n\nconst Tab = createMaterialBottomTabNavigator();\n\nfunction MyTabs() {\n  return (\n    <Tab.Navigator\n      initialRouteName=\"Feed\"\n      activeColor=\"#e91e63\"\n      barStyle={{ backgroundColor: 'tomato' }}\n    >\n      <Tab.Screen\n        name=\"Feed\"\n        component={Feed}\n        options={{\n          tabBarLabel: 'Home',\n          tabBarIcon: ({ color }) => (\n            <MaterialCommunityIcons name=\"home\" color={color} size={26} />\n          ),\n        }}\n      />\n      <Tab.Screen\n        name=\"Notifications\"\n        component={Notifications}\n        options={{\n          tabBarLabel: 'Updates',\n          tabBarIcon: ({ color }) => (\n            <MaterialCommunityIcons name=\"bell\" color={color} size={26} />\n          ),\n        }}\n      />\n      <Tab.Screen\n        name=\"Profile\"\n        component={Profile}\n        options={{\n          tabBarLabel: 'Profile',\n          tabBarIcon: ({ color }) => (\n            <MaterialCommunityIcons name=\"account\" color={color} size={26} />\n          ),\n        }}\n      />\n    </Tab.Navigator>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Wrapping Root Component with PaperProvider (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to wrap your root component with the `PaperProvider` from `react-native-paper`. This is essential for the `Menu` component to function correctly.  It wraps the `NavigationContainer` with `PaperProvider`. Requires react-native-paper.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/09-react-navigation.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { PaperProvider } from 'react-native-paper';\n\n// ...\n\n<PaperProvider>\n  <NavigationContainer>\n    <Stack.Navigator\n      initialRouteName=\"Home\"\n      screenOptions={{\n        header: (props) => <CustomNavigationBar {...props} />,\n      }}>\n      <Stack.Screen name=\"Home\" component={HomeScreen} />\n      <Stack.Screen name=\"Details\" component={DetailsScreen} />\n    </Stack.Navigator>\n  </NavigationContainer>\n</PaperProvider>\n```\n\n----------------------------------------\n\nTITLE: Using Drawer.CollapsedItem - JavaScript\nDESCRIPTION: This code showcases how to use the `Drawer.CollapsedItem` component within a `Drawer.Section`.  It represents a navigation destination with an icon and optional label.  Requires React Native Paper and is only compatible with theme version 3.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/10-migration-guide-to-5.0.md#_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\n<Drawer.Section>\n  <Drawer.CollapsedItem\n    focusedIcon=\"inbox\"\n    unfocusedIcon=\"inbox-outline\"\n    label=\"Inbox\"\n  />\n  <Drawer.CollapsedItem\n    focusedIcon=\"star\"\n    unfocusedIcon=\"star-outline\"\n    label=\"Starred\"\n  />\n</Drawer.Section>\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Paper\nDESCRIPTION: This command installs the react-native-paper package using npm. This is the first step to using React Native Paper in your project.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/01-getting-started.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react-native-paper\n```\n\n----------------------------------------\n\nTITLE: Material Design 2 Advanced Setup - JavaScript\nDESCRIPTION: This JavaScript code shows how to customize Material Design 2 theme by extending `MD2LightTheme`. It shows an example of adding a custom property and customizing a nested color property.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/02-theming.mdx#_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport * as React from 'react';\nimport { MD2LightTheme, PaperProvider } from 'react-native-paper';\nimport App from './src/App';\n\nexport default function Main() {\n  const theme = {\n    ...MD2LightTheme,\n\n    // Specify a custom property\n    custom: 'property',\n\n    // Specify a custom nested property\n    colors: {\n      ...MD2LightTheme.colors,\n      primary: '#fefefe',\n    },\n  };\n\n  return (\n    <PaperProvider theme={theme}>\n      <App />\n    </PaperProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Safe Area Context\nDESCRIPTION: This snippet shows how to install react-native-safe-area-context using npm. This is a new dependency required for v5.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/10-migration-guide-to-5.0.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react-native-safe-area-context\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Safe Area Context\nDESCRIPTION: This command installs the react-native-safe-area-context package using npm. It is required from v5 of `react-native-paper` to handle safe area.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/01-getting-started.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react-native-safe-area-context\n```\n\n----------------------------------------\n\nTITLE: Snackbar: Using elevation Prop\nDESCRIPTION: This snippet shows how to use the `elevation` prop to adjust the elevation of the `Snackbar` component. This replaces the previous method of setting elevation through the style prop.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/10-migration-guide-to-5.0.md#_snippet_14\n\nLANGUAGE: diff\nCODE:\n```\n- <Snackbar style={{elevation: 1}}>Hello</Snackbar>\n+ <Snackbar elevation={1}>Hello</Snackbar>\n```\n\n----------------------------------------\n\nTITLE: Linking Native iOS Dependencies\nDESCRIPTION: This command links the native parts of the library for iOS platform using pod-install. It is a requirement for `iOS` platform.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/01-getting-started.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx pod-install\n```\n\n----------------------------------------\n\nTITLE: Linking Native Libraries for iOS\nDESCRIPTION: This snippet shows how to link the native libraries for the iOS platform using npx pod-install.\nSOURCE: https://github.com/callstack/react-native-paper/blob/main/docs/docs/guides/10-migration-guide-to-5.0.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx pod-install\n```"
  }
]