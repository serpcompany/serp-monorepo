[
  {
    "owner": "temporalio",
    "repo": "sdk-java",
    "content": "TITLE: Configuring Temporal Connection in Spring Boot YAML\nDESCRIPTION: Basic configuration for connecting to a local Temporal server instance. This snippet shows how to set up connection parameters in application.yml for a Spring Boot application.\nSOURCE: https://github.com/temporalio/sdk-java/blob/master/temporal-spring-boot-autoconfigure/README.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nspring.temporal:\n  connection:\n    target: local # you can specify a host:port here for a remote connection\n    # specifying local is equivalent to WorkflowServiceStubs.newLocalServiceStubs() so all other connection options are ignored. \n    # enable-https: true\n  # namespace: default # you can specify a custom namespace that you are using\n```\n\n----------------------------------------\n\nTITLE: Configuring Temporal SDK Dependency in Maven POM\nDESCRIPTION: XML snippet showing how to add the Temporal Java SDK as a dependency in a Maven pom.xml file. Users should replace N.N.N with the desired version number of the SDK.\nSOURCE: https://github.com/temporalio/sdk-java/blob/master/README.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>io.temporal</groupId>\n  <artifactId>temporal-sdk</artifactId>\n  <version>N.N.N</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Configuring Temporal SDK Dependency in Gradle\nDESCRIPTION: Gradle build script snippet showing how to add the Temporal Java SDK as a dependency. Users should replace N.N.N with the desired version number of the SDK.\nSOURCE: https://github.com/temporalio/sdk-java/blob/master/README.md#2025-04-23_snippet_1\n\nLANGUAGE: gradle\nCODE:\n```\ncompile group: 'io.temporal', name: 'temporal-sdk', version: 'N.N.N'\n```\n\n----------------------------------------\n\nTITLE: Explicit Worker Configuration in Spring Boot\nDESCRIPTION: Basic example of explicitly configuring Temporal workers in a Spring Boot application. This defines task queues, workflow classes, and activity beans.\nSOURCE: https://github.com/temporalio/sdk-java/blob/master/temporal-spring-boot-autoconfigure/README.md#2025-04-23_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nspring.temporal:\n  workers:\n    - task-queue: your-task-queue-name\n      name: your-worker-name # unique name of the Worker. If not specified, Task Queue is used as the Worker name.\n      workflow-classes:\n        - your.package.YouWorkflowImpl\n      activity-beans:\n        - activity-bean-name1\n```\n\n----------------------------------------\n\nTITLE: Extended Worker Configuration in Spring Boot\nDESCRIPTION: Comprehensive configuration example for Temporal workers with capacity settings, rate limits, build ID and other advanced options.\nSOURCE: https://github.com/temporalio/sdk-java/blob/master/temporal-spring-boot-autoconfigure/README.md#2025-04-23_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nspring.temporal:\n  workers:\n    - task-queue: your-task-queue-name\n      # name: your-worker-name # unique name of the Worker. If not specified, Task Queue is used as the Worker name.\n      workflow-classes:\n        - your.package.YouWorkflowImpl\n      activity-beans:\n        - activity-bean-name1\n      nexus-service-beans:\n        - nexus-service-bean-name1\n      # capacity:\n        # max-concurrent-workflow-task-executors: 200\n        # max-concurrent-activity-executors: 200\n        # max-concurrent-local-activity-executors: 200\n        # max-concurrent-workflow-task-pollers: 5\n        # max-concurrent-activity-task-pollers: 5\n      # virtual-thread:\n        # using-virtual-threads: true # only supported if JDK 21 or newer is used\n      # rate-limits:\n        # max-worker-activities-per-second: 5.0\n        # max-task-queue-activities-per-second: 5.0\n      # build-id:\n        # worker-build-id: \"1.0.0\"\n  # workflow-cache:\n    # max-instances: 600\n    # max-threads: 600\n    # using-virtual-workflow-threads: true # only supported if JDK 21 or newer is used\n  # start-workers: false # disable auto-start of WorkersFactory and Workers if you want to make any custom changes before the start\n```\n\n----------------------------------------\n\nTITLE: Configuring Auto-Discovery for Temporal Components\nDESCRIPTION: Configuration for auto-discovering Temporal workflows, activities, and nexus services from specified packages. This eliminates the need for explicit registration of components.\nSOURCE: https://github.com/temporalio/sdk-java/blob/master/temporal-spring-boot-autoconfigure/README.md#2025-04-23_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nspring.temporal:\n  workers-auto-discovery:\n    packages:\n      - your.package # enumerate all the packages that contain your workflow, activity implementations, and nexus service implementations.\n```\n\n----------------------------------------\n\nTITLE: Kotlin Nested Options DSL Configuration\nDESCRIPTION: Shows how to use nested DSL syntax for configuring ActivityOptions with embedded RetryOptions configuration.\nSOURCE: https://github.com/temporalio/sdk-java/blob/master/temporal-kotlin/README.md#2025-04-23_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval activityOptions = ActivityOptions {\n    // ActivityOptions DSL\n    setTaskQueue(\"TestQueue\")\n    setStartToCloseTimeout(Duration.ofMinutes(1))\n    setScheduleToCloseTimeout(Duration.ofHours(1))\n    setRetryOptions {\n        // Nested RetryOptions DSL\n        setInitialInterval(Duration.ofMillis(100))\n        setMaximumInterval(Duration.ofSeconds(1))\n        setBackoffCoefficient(1.5)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Temporal Client with OpenTracing Interceptor\nDESCRIPTION: Code to configure the Temporal WorkflowClient with OpenTracing support through the OpenTracingClientInterceptor. This enables the propagation of OpenTracing Span Context in client operations.\nSOURCE: https://github.com/temporalio/sdk-java/blob/master/temporal-opentracing/README.md#2025-04-23_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nWorkflowClientOptions.newBuilder()\n   //...\n   .setInterceptors(new OpenTracingClientInterceptor())\n   .build();\n```\n\n----------------------------------------\n\nTITLE: Configuring Temporal Worker with OpenTracing Interceptor\nDESCRIPTION: Code to configure Temporal Workers with OpenTracing support through the OpenTracingWorkerInterceptor. This enables the propagation of OpenTracing Span Context in worker operations.\nSOURCE: https://github.com/temporalio/sdk-java/blob/master/temporal-opentracing/README.md#2025-04-23_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nWorkerFactoryOptions.newBuilder()\n   //...\n   .setWorkerInterceptors(new OpenTracingWorkerInterceptor())\n   .build();\n```\n\n----------------------------------------\n\nTITLE: Setting up a JUnit Test Class for Temporal Workflows\nDESCRIPTION: Java test class setup that autowires the TestWorkflowEnvironment and WorkflowClient beans for testing Temporal workflows.\nSOURCE: https://github.com/temporalio/sdk-java/blob/master/temporal-spring-boot-autoconfigure/README.md#2025-04-23_snippet_10\n\nLANGUAGE: java\nCODE:\n```\n@SpringBootTest(classes = Test.Configuration.class)\n@TestInstance(TestInstance.Lifecycle.PER_CLASS)\npublic class Test {\n  @Autowired ConfigurableApplicationContext applicationContext;\n  @Autowired TestWorkflowEnvironment testWorkflowEnvironment;\n  @Autowired WorkflowClient workflowClient;\n\n  @BeforeEach\n  void setUp() {\n    applicationContext.start();\n  }\n\n  @Test\n  @Timeout(value = 10)\n  public void test() {\n    # ...\n  }\n\n  @ComponentScan # to discover activity beans annotated with @Component\n  # @EnableAutoConfiguration # can be used to load only AutoConfigurations if usage of @ComponentScan is not desired \n  public static class Configuration {}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring API Key Authentication for Temporal Cloud\nDESCRIPTION: Configuration for authenticating with Temporal Cloud using API keys. When an API key is specified, HTTPS is automatically enabled.\nSOURCE: https://github.com/temporalio/sdk-java/blob/master/temporal-spring-boot-autoconfigure/README.md#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nspring.temporal:\n  connection:\n    apiKey: <API key>\n```\n\n----------------------------------------\n\nTITLE: Configuring mTLS Authentication with Inline Certificates\nDESCRIPTION: Alternative configuration for mTLS using inline certificate and key content instead of file paths. This approach allows passing credentials via environment variables.\nSOURCE: https://github.com/temporalio/sdk-java/blob/master/temporal-spring-boot-autoconfigure/README.md#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nspring.temporal:\n  connection:\n    mtls:\n      key: <raw content of the key PEM file>\n      cert-chain: <raw content of the cert chain PEM file>\n      # key-password: <password_for_the_key>\n      # insecure-trust-manager: true # or add ca.pem to java default truststore\n```\n\n----------------------------------------\n\nTITLE: Configuring mTLS Authentication for Temporal in Spring Boot\nDESCRIPTION: Configuration for mutual TLS (mTLS) authentication with Temporal Server using PKCS8 or PKCS12 certificates. This enables secure communication between the client and server.\nSOURCE: https://github.com/temporalio/sdk-java/blob/master/temporal-spring-boot-autoconfigure/README.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nspring.temporal:\n  connection:\n    mtls:\n      key-file: /path/to/key.key\n      cert-chain-file: /path/to/cert.pem # If you use PKCS12 (.pkcs12, .pfx or .p12), you don't need to set it because certificates chain is bundled into the key file\n      # key-password: <password_for_the_key>\n      # insecure-trust-manager: true # or add ca.pem to java default truststore\n      # server-name: <server_name_override> # optional server name overrider, used as authority of ManagedChannelBuilder\n```\n\n----------------------------------------\n\nTITLE: Kotlin Workflow Metadata Extensions\nDESCRIPTION: Demonstrates the use of Kotlin extensions for resolving workflow-related names and types from class and method references.\nSOURCE: https://github.com/temporalio/sdk-java/blob/master/temporal-kotlin/README.md#2025-04-23_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nval activityName = activityName(ActivityInterface::activityMethod)\nval workflowName = workflowName<WorkflowInterface>()\nval workflowSignalName = workflowSignalName(WorkflowInterface::signalMethod)\nval workflowQueryType = workflowQueryType(WorkflowInterface::queryMethod)\n```\n\n----------------------------------------\n\nTITLE: Kotlin RetryOptions DSL Usage\nDESCRIPTION: Demonstrates the use of Kotlin DSL for creating and modifying RetryOptions with fluent syntax, showing both initial creation and copying with modifications.\nSOURCE: https://github.com/temporalio/sdk-java/blob/master/temporal-kotlin/README.md#2025-04-23_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nval sourceRetryOptions = RetryOptions {\n    setInitialInterval(Duration.ofMillis(100))\n    setMaximumInterval(Duration.ofSeconds(1))\n    setBackoffCoefficient(1.5)\n    setMaximumAttempts(5)\n}\n\nval overriddenRetryOptions = sourceRetryOptions.copy {\n  setInitialInterval(Duration.ofMillis(10))\n  setMaximumAttempts(10)\n  setDoNotRetry(\"some-error\")\n}\n```\n\n----------------------------------------\n\nTITLE: Kotlin Worker Configuration DSL\nDESCRIPTION: Demonstrates the use of DSL syntax for configuring WorkerFactory and Worker instances with specific options.\nSOURCE: https://github.com/temporalio/sdk-java/blob/master/temporal-kotlin/README.md#2025-04-23_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval workerFactory = WorkerFactory(workflowClient) {\n  // WorkerFactoryOptions DSL\n  setMaxWorkflowThreadCount(800)\n  setWorkflowCacheSize(800)\n}\n\nval worker = workerFactory.newWorker(\"taskQueue\") {\n  // WorkerOptions DSL\n  setDefaultDeadlockDetectionTimeout(5000)\n}\n```\n\n----------------------------------------\n\nTITLE: Kotlin Reified Type Extensions Usage\nDESCRIPTION: Shows how to use reified type parameters instead of explicit Class objects for improved type safety and cleaner syntax.\nSOURCE: https://github.com/temporalio/sdk-java/blob/master/temporal-kotlin/README.md#2025-04-23_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nval workflowResult = workflowStub.getResult<List<Long>>()\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Namespaces in YAML\nDESCRIPTION: YAML configuration for setting up multiple namespaces in Temporal with different worker configurations and package paths for workflow/activity discovery.\nSOURCE: https://github.com/temporalio/sdk-java/blob/master/temporal-spring-boot-autoconfigure/README.md#2025-04-23_snippet_11\n\nLANGUAGE: yml\nCODE:\n```\nspring.temporal:\n    namespaces:\n      - namespace: assign\n        alias: assign\n        workers-auto-discovery:\n          packages: com.component.temporal.assign\n        workers:\n          - task-queue: global\n      - namespace: unassign\n        alias: unassign\n        workers-auto-discovery:\n          packages: com.component.temporal.unassign\n        workers:\n          - task-queue: global\n```\n\n----------------------------------------\n\nTITLE: Injecting Namespace-Specific WorkflowClient Instances\nDESCRIPTION: Java code showing how to inject different WorkflowClient instances for different Temporal namespaces using the @Resource annotation.\nSOURCE: https://github.com/temporalio/sdk-java/blob/master/temporal-spring-boot-autoconfigure/README.md#2025-04-23_snippet_13\n\nLANGUAGE: java\nCODE:\n```\n    // temporalWorkflowClient is the primary and rootNamespace bean. \n    @Resource\n    WorkflowClient workflowClient;\n\n    // Bean name here corresponds to the namespace/alias + Simple Class Name\n    @Resource(name = \"assignWorkflowClient\")\n    private WorkflowClient assignWorkflowClient;\n\n    @Resource(name = \"unassignWorkflowClient\")\n    private WorkflowClient unassignWorkflowClient;\n```\n\n----------------------------------------\n\nTITLE: Customizing Temporal Options for Specific Namespaces\nDESCRIPTION: Java configuration demonstrating how to customize Temporal options for different namespaces by creating beans with namespace-specific names.\nSOURCE: https://github.com/temporalio/sdk-java/blob/master/temporal-spring-boot-autoconfigure/README.md#2025-04-23_snippet_12\n\nLANGUAGE: java\nCODE:\n```\n    // TemporalOptionsCustomizer type beans must start with the namespace/alias you defined and end with function class \n    // name you want to customizer and concat Customizer as the bean name.\n    @Bean\n    TemporalOptionsCustomizer<WorkflowServiceStubsOptions.Builder> assignWorkflowServiceStubsCustomizer() {\n        return builder -> builder.setKeepAliveTime(Duration.ofHours(1));\n    }\n\n    // Data converter is also supported\n    @Bean\n    DataConverter assignDataConverter() {\n        return DataConverter.getDefaultInstance();\n    }\n```\n\n----------------------------------------\n\nTITLE: Autowiring ScheduleClient in Spring Boot Application\nDESCRIPTION: Example of autowiring a ScheduleClient in a Spring Boot application. This is used for working with Temporal schedules.\nSOURCE: https://github.com/temporalio/sdk-java/blob/master/temporal-spring-boot-autoconfigure/README.md#2025-04-23_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@SpringBootApplication\nclass App {\n  @Autowire\n  private ScheduleClient scheduleClient;\n}\n```\n\n----------------------------------------\n\nTITLE: Autowiring WorkflowClient in Spring Boot Application\nDESCRIPTION: Example of autowiring a WorkflowClient in a Spring Boot application. This allows the application to interact with Temporal workflows.\nSOURCE: https://github.com/temporalio/sdk-java/blob/master/temporal-spring-boot-autoconfigure/README.md#2025-04-23_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@SpringBootApplication\nclass App {\n  @Autowire\n  private WorkflowClient workflowClient;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Temporal Testing Dependency in Gradle\nDESCRIPTION: This snippet demonstrates how to add the temporal-testing dependency to a Gradle build file. It includes the testImplementation configuration for the dependency.\nSOURCE: https://github.com/temporalio/sdk-java/blob/master/temporal-testing/README.md#2025-04-23_snippet_1\n\nLANGUAGE: gradle\nCODE:\n```\ntestImplementation(\"io.temporal:temporal-testing:N.N.N\")\n```\n\n----------------------------------------\n\nTITLE: Adding Temporal Testing Dependency in Maven\nDESCRIPTION: This snippet shows how to add the temporal-testing dependency to a Maven pom.xml file. It specifies the groupId, artifactId, and version placeholders for the dependency.\nSOURCE: https://github.com/temporalio/sdk-java/blob/master/temporal-testing/README.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>io.temporal</groupId>\n  <artifactId>temporal-testing</artifactId>\n  <version>N.N.N</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Adding Temporal Testing with JUnit Extensions in Gradle\nDESCRIPTION: This snippet shows how to add the temporal-testing dependency with JUnit4 or JUnit5 extensions in a Gradle build file. It uses the capabilities block to require specific JUnit extension capabilities.\nSOURCE: https://github.com/temporalio/sdk-java/blob/master/temporal-testing/README.md#2025-04-23_snippet_2\n\nLANGUAGE: gradle\nCODE:\n```\ntestImplementation(\"io.temporal:temporal-testing:N.N.N\") {\n    capabilities {\n        requireCapability(\"io.temporal:temporal-testing-junit4\")\n        //requireCapability(\"io.temporal:temporal-testing-junit5\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Temporal Test Server in YAML\nDESCRIPTION: YAML configuration to enable the Temporal test server for testing workflows with an in-memory Java Test Server.\nSOURCE: https://github.com/temporalio/sdk-java/blob/master/temporal-spring-boot-autoconfigure/README.md#2025-04-23_snippet_9\n\nLANGUAGE: yml\nCODE:\n```\nspring.temporal:\n  test-server:\n    enabled: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Sonatype Snapshot Repository in Maven POM\nDESCRIPTION: XML configuration for adding the Sonatype snapshot repository to a Maven pom.xml file, enabling access to development snapshot releases of the Temporal Java SDK.\nSOURCE: https://github.com/temporalio/sdk-java/blob/master/README.md#2025-04-23_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<repositories>\n    <repository>\n        <id>oss-sonatype</id>\n        <name>oss-sonatype</name>\n        <url>https://oss.sonatype.org/content/repositories/snapshots/</url>\n        <snapshots>\n            <enabled>true</enabled>\n        </snapshots>\n    </repository>\n</repositories>\n```\n\n----------------------------------------\n\nTITLE: Configuring Sonatype Snapshot Repository in Gradle\nDESCRIPTION: Gradle build script configuration for adding the Sonatype snapshot repository, enabling access to development snapshot releases of the Temporal Java SDK.\nSOURCE: https://github.com/temporalio/sdk-java/blob/master/README.md#2025-04-23_snippet_3\n\nLANGUAGE: gradle\nCODE:\n```\nrepositories {\n    maven {\n        url \"https://oss.sonatype.org/content/repositories/snapshots/\"\n    }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Maven Dependency Configuration for Temporal Kotlin\nDESCRIPTION: Maven configuration snippet showing how to add the temporal-kotlin dependency to a project's pom.xml file.\nSOURCE: https://github.com/temporalio/sdk-java/blob/master/temporal-kotlin/README.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>io.temporal</groupId>\n  <artifactId>temporal-kotlin</artifactId>\n  <version>N.N.N</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Running the Test Server Test with GraalVM Tracing Agent\nDESCRIPTION: Command to run the test server test with the GraalVM tracing agent enabled through Gradle. This is used to generate metadata for native-image compilation.\nSOURCE: https://github.com/temporalio/sdk-java/blob/master/temporal-test-server/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew -Pagent -PnativeBuild :temporal-test-server:test\n```\n\n----------------------------------------\n\nTITLE: Building a Test Server Using GraalVM Native-Image\nDESCRIPTION: Command to build a native executable of the Temporal test server from the root of the java-sdk repo. The built executable will be located at build/graal/temporal-test-server and requires a port number argument.\nSOURCE: https://github.com/temporalio/sdk-java/blob/master/temporal-test-server/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew -PnativeBuild :temporal-test-server:nativeCompile\n```\n\n----------------------------------------\n\nTITLE: Copying Metadata from Test Run for Native-Image Compilation\nDESCRIPTION: Command to copy metadata generated by the GraalVM tracing agent during a test run for use in native-image compilation.\nSOURCE: https://github.com/temporalio/sdk-java/blob/master/temporal-test-server/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew -PnativeBuild  :temporal-test-server:metadataCopy --task test \n```\n\n----------------------------------------\n\nTITLE: Running the Test Server as a Native-Image Through Gradle\nDESCRIPTION: Command to run the Temporal test server as a native-image using Gradle from the root of the java-sdk repo.\nSOURCE: https://github.com/temporalio/sdk-java/blob/master/temporal-test-server/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n ./gradlew -PnativeBuild :temporal-test-server:nativeRun    \n```\n\n----------------------------------------\n\nTITLE: Referencing RDE Server Implementation Classes in Java\nDESCRIPTION: This snippet shows the fully qualified class names for two reference implementations of RDE servers provided by the module. The RDEHttpServer is a standalone simple HTTP server, while RDEServlet4 is a servlet compatible with Java Servlet Specification 3.0 and 4.0.\nSOURCE: https://github.com/temporalio/sdk-java/blob/master/temporal-remote-data-encoder/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nio.temporal.rde.httpserver.RDEHttpServer\nio.temporal.rde.servlet.RDEServlet4\n```\n\n----------------------------------------\n\nTITLE: Referencing RDE Codec Implementation Classes in Java\nDESCRIPTION: This snippet shows the fully qualified class names for the abstract base class and a concrete implementation of RDE codecs. AbstractRemoteDataEncoderCodec is the base class for custom implementations, while OkHttpRemoteDataEncoderCodec is a specific implementation using the OkHttpClient.\nSOURCE: https://github.com/temporalio/sdk-java/blob/master/temporal-remote-data-encoder/README.md#2025-04-23_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nio.temporal.payload.codec.AbstractRemoteDataEncoderCodec\nio.temporal.payload.codec.OkHttpRemoteDataEncoderCodec\n```\n\n----------------------------------------\n\nTITLE: Describing Temporal Java SDK Module with Shaded Dependencies in Markdown\nDESCRIPTION: This snippet provides an overview of a specialized Temporal Java SDK module that includes shaded dependencies. It explains the purpose of the module, its components, and when to use it instead of the regular modules.\nSOURCE: https://github.com/temporalio/sdk-java/blob/master/temporal-shaded/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# Temporal Java SDK and Testing Framework with shaded dependencies\n\nThis module provides a single temporal-sdk, temporal-testing, temporal-test-server, temporal-serviceclient modules\nwith shaded Protobuf 3, gRPC and Guava.\n\nUsage of this module is not recommended, but may be necessary for users with outdated dependencies who can't upgrade for compatibility reasons.\ngRPC/netty, Guava and Proto3 are common culprits of such conflicts.\n\nIf you are not struggling with dependencies hell, please stick to the regular temporal-sdk and temporal-testing modules.\n```\n\n----------------------------------------\n\nTITLE: Starting Temporal Server with Docker\nDESCRIPTION: Commands to download the Temporal docker-compose configuration and start the Temporal server locally, which is required for running tests.\nSOURCE: https://github.com/temporalio/sdk-java/blob/master/CONTRIBUTING.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -O https://raw.githubusercontent.com/temporalio/temporal/master/docker/docker-compose.yml\ndocker-compose up\n```\n\n----------------------------------------\n\nTITLE: Building Temporal Java SDK\nDESCRIPTION: Command to build the SDK project without cleaning first. This includes compilation, tests, and code formatting.\nSOURCE: https://github.com/temporalio/sdk-java/blob/master/CONTRIBUTING.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew build\n```\n\n----------------------------------------\n\nTITLE: Building Temporal Java SDK\nDESCRIPTION: Command to clean and build the SDK project. This runs a full build process including tests and code formatting.\nSOURCE: https://github.com/temporalio/sdk-java/blob/master/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew clean build\n```\n\n----------------------------------------\n\nTITLE: Running Tests for Temporal Java SDK\nDESCRIPTION: Command to execute all tests in the SDK project. This requires the Temporal server to be running locally.\nSOURCE: https://github.com/temporalio/sdk-java/blob/master/CONTRIBUTING.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew test\n```\n\n----------------------------------------\n\nTITLE: Checking License Headers\nDESCRIPTION: Command to verify that all source files contain the required license headers as part of the project's open source compliance.\nSOURCE: https://github.com/temporalio/sdk-java/blob/master/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew licenseCheck\n```\n\n----------------------------------------\n\nTITLE: Generating License Headers\nDESCRIPTION: Command to automatically add the required license headers to all source files that are missing them.\nSOURCE: https://github.com/temporalio/sdk-java/blob/master/CONTRIBUTING.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew licenseFormat\n```\n\n----------------------------------------\n\nTITLE: Setting Up OpenTracing Bridge for OpenTelemetry\nDESCRIPTION: Code demonstrating how to set up the OpenTracing to OpenTelemetry bridge for users who are using OpenTelemetry. This bridge makes OpenTelemetry available through the OpenTracing API.\nSOURCE: https://github.com/temporalio/sdk-java/blob/master/temporal-opentracing/README.md#2025-04-23_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nio.opentracing.Tracer tracer = OpenTracingShim.createTracerShim();\n//or io.opentracing.Tracer tracer = OpenTracingShim.createTracerShim(openTelemetry);\nGlobalTracer.registerIfAbsent(tracer);\n```"
  }
]