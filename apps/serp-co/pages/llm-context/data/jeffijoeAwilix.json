[
  {
    "owner": "jeffijoe",
    "repo": "awilix",
    "content": "TITLE: Basic Awilix Usage in JavaScript\nDESCRIPTION: Demonstrates creating a container, registering modules, and resolving dependencies using Awilix.\nSOURCE: https://github.com/jeffijoe/awilix/blob/master/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst awilix = require('awilix')\n\nconst container = awilix.createContainer({\n  injectionMode: awilix.InjectionMode.PROXY,\n  strict: true,\n})\n\nclass UserController {\n  constructor(opts) {\n    this.userService = opts.userService\n  }\n\n  getUser(ctx) {\n    return this.userService.getUser(ctx.params.id)\n  }\n}\n\ncontainer.register({\n  userController: awilix.asClass(UserController),\n})\n\nconst makeUserService = ({ db }) => {\n  return {\n    getUser: (id) => {\n      return db.query(`select * from users where id=${id}`)\n    },\n  }\n}\n\ncontainer.register({\n  userService: awilix.asFunction(makeUserService),\n})\n\nfunction Database(connectionString, timeout) {\n  this.conn = connectToYourDatabaseSomehow(connectionString, timeout)\n}\n\nDatabase.prototype.query = function (sql) {\n  return this.conn.rawSql(sql)\n}\n\ncontainer.register({\n  db: awilix.asClass(Database).classic(),\n})\n\ncontainer.register({\n  connectionString: awilix.asValue(process.env.CONN_STR),\n  timeout: awilix.asValue(1000),\n})\n\nrouter.get('/api/users/:id', container.resolve('userController').getUser)\n\nrouter.get('/api/users/:id', container.cradle.userController.getUser)\n```\n\n----------------------------------------\n\nTITLE: Dependency Registration Examples\nDESCRIPTION: Demonstrates different ways to register dependencies using asValue, asFunction and asClass with various lifetimes and chaining syntax.\nSOURCE: https://github.com/jeffijoe/awilix/blob/master/README.md#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n// name-resolver\ncontainer.register('connectionString', asValue('localhost:1433;user=...'))\ncontainer.register('mailService', asFunction(makeMailService))\ncontainer.register('context', asClass(SessionContext))\n\n// object\ncontainer.register({\n  connectionString: asValue('localhost:1433;user=...'),\n  mailService: asFunction(makeMailService, { lifetime: Lifetime.SINGLETON }),\n  context: asClass(SessionContext, { lifetime: Lifetime.SCOPED }),\n})\n\n// `asClass` and `asFunction` also supports a fluid syntax.\n// This...\ncontainer.register(\n  'mailService',\n  asFunction(makeMailService).setLifetime(Lifetime.SINGLETON),\n)\n// .. is the same as this:\ncontainer.register('context', asClass(SessionContext).singleton())\n\n// .. and here are the other `Lifetime` variants as fluid functions.\ncontainer.register('context', asClass(SessionContext).transient())\ncontainer.register('context', asClass(SessionContext).scoped())\n```\n\n----------------------------------------\n\nTITLE: Registering Modules with Specific Lifetimes in Awilix\nDESCRIPTION: Shows how to register modules with different lifetimes (SINGLETON, SCOPED, TRANSIENT) using Awilix.\nSOURCE: https://github.com/jeffijoe/awilix/blob/master/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { asClass, asFunction, asValue } = awilix\n\nclass MailService {}\n\ncontainer.register({\n  mailService: asClass(MailService, { lifetime: Lifetime.SINGLETON }),\n})\n\n// or using the chaining configuration API..\ncontainer.register({\n  mailService: asClass(MailService).setLifetime(Lifetime.SINGLETON),\n})\n\n// or..\ncontainer.register({\n  mailService: asClass(MailService).singleton(),\n})\n\n// or.......\ncontainer.register('mailService', asClass(MailService, { lifetime: SINGLETON }))\n```\n\n----------------------------------------\n\nTITLE: Implementing Scoped Lifetime in Awilix for Web Applications\nDESCRIPTION: Demonstrates how to use scoped lifetime in Awilix for managing state in web applications. It shows creating a container, registering a scoped service, and using it in a web framework middleware.\nSOURCE: https://github.com/jeffijoe/awilix/blob/master/README.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { createContainer, asClass, asValue } = awilix\nconst container = createContainer()\n\nclass MessageService {\n  constructor({ currentUser }) {\n    this.user = currentUser\n  }\n\n  getMessages() {\n    const id = this.user.id\n    // wee!\n  }\n}\n\ncontainer.register({\n  messageService: asClass(MessageService).scoped(),\n})\n\n// imagine middleware in some web framework..\napp.use((req, res, next) => {\n  // create a scoped container\n  req.scope = container.createScope()\n\n  // register some request-specific data..\n  req.scope.register({\n    currentUser: asValue(req.user),\n  })\n\n  next()\n})\n\napp.get('/messages', (req, res) => {\n  // for each request we get a new message service!\n  const messageService = req.scope.resolve('messageService')\n  messageService.getMessages().then((messages) => {\n    res.send(200, messages)\n  })\n})\n\n// The message service can now be tested\n// without depending on any request data!\n```\n\n----------------------------------------\n\nTITLE: Loading Modules with container.loadModules() in JavaScript\nDESCRIPTION: Demonstrates how to use the loadModules() method to register modules from file paths using glob patterns. The example shows different configuration options including lifetime settings and name formatting.\nSOURCE: https://github.com/jeffijoe/awilix/blob/master/README.md#2025-04-22_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n// index.js\ncontainer.loadModules(['services/*.js', 'repositories/*.js', 'db/db.js'])\n\ncontainer.cradle.userService.getUser(123)\n\n// to configure lifetime for all modules loaded..\ncontainer.loadModules([\n  'services/*.js',\n  'repositories/*.js',\n  'db/db.js'\n], {\n  resolverOptions: {\n    lifetime: Lifetime.SINGLETON\n  }\n})\n\ncontainer.cradle.userService.getUser(123)\n\n// to configure lifetime for specific globs..\ncontainer.loadModules([\n  ['services/*.js', Lifetime.SCOPED], // all services will have scoped lifetime\n  'repositories/*.js',\n  'db/db.js'\n], {\n  resolverOptions: {\n    lifetime: Lifetime.SINGLETON // db and repositories will be singleton\n  }\n)\n\ncontainer.cradle.userService.getUser(123)\n\n// to use camelCase for modules where filenames are not camelCase\ncontainer.loadModules(['repositories/account-repository.js', 'db/db.js'], {\n  formatName: 'camelCase'\n})\n\ncontainer.cradle.accountRepository.getUser(123)\n\n// to customize how modules are named in the container (and for injection)\ncontainer.loadModules(['repository/account.js', 'service/email.js'], {\n  // This formats the module name so `repository/account.js` becomes `accountRepository`\n  formatName: (name, descriptor) => {\n    const splat = descriptor.path.split('/')\n    const namespace = splat[splat.length - 2] // `repository` or `service`\n    const upperNamespace =\n      namespace.charAt(0).toUpperCase() + namespace.substring(1)\n    return name + upperNamespace\n  }\n})\n\ncontainer.cradle.accountRepository.getUser(123)\ncontainer.cradle.emailService.sendEmail('test@test.com', 'waddup')\n```\n\n----------------------------------------\n\nTITLE: Auto-loading Modules with Awilix in JavaScript\nDESCRIPTION: Demonstrates how to use Awilix's loadModules function to automatically register services and repositories with custom configuration options.\nSOURCE: https://github.com/jeffijoe/awilix/blob/master/README.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst awilix = require('awilix')\n\nconst container = awilix.createContainer()\n\ncontainer.loadModules(\n  [\n    [\n      'models/**/*.js',\n      {\n        register: awilix.asValue,\n        lifetime: Lifetime.SINGLETON,\n      },\n    ],\n    'services/**/*.js',\n    'repositories/**/*.js',\n  ],\n  {\n    formatName: 'camelCase',\n    resolverOptions: {\n      lifetime: Lifetime.SINGLETON,\n      register: awilix.asClass,\n    },\n  },\n)\n\ncontainer.resolve('userService').getUser(1)\n```\n\n----------------------------------------\n\nTITLE: Creating Scopes with container.createScope() in JavaScript\nDESCRIPTION: Explains how to create and use scopes in Awilix which allows for scoped lifetime registrations. Demonstrates how scopes maintain their own caches and can register additional dependencies that are only available within that scope.\nSOURCE: https://github.com/jeffijoe/awilix/blob/master/README.md#2025-04-22_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n// Increments the counter every time it is resolved.\nlet counter = 1\ncontainer.register({\n  counterValue: asFunction(() => counter++).scoped(),\n})\nconst scope1 = container.createScope()\nconst scope2 = container.createScope()\n\nconst scope1Child = scope1.createScope()\n\nscope1.cradle.counterValue === 1\nscope1.cradle.counterValue === 1\nscope2.cradle.counterValue === 2\nscope2.cradle.counterValue === 2\n\nscope1Child.cradle.counterValue === 3\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlet counter = 1\ncontainer.register({\n  counterValue: asFunction(() => counter++).scoped(),\n})\nconst scope1 = container.createScope()\nconst scope2 = container.createScope()\n\n// The root container is also a scope.\ncontainer.cradle.counterValue === 1\ncontainer.cradle.counterValue === 1\n\n// This scope resolves and caches it's own.\nscope1.cradle.counterValue === 2\nscope1.cradle.counterValue === 2\n\n// This scope resolves and caches it's own.\nscope2.cradle.counterValue === 3\nscope2.cradle.counterValue === 3\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Register a transient function\n// that returns the value of the scope-provided dependency.\n// For this example we could also use scoped lifetime.\ncontainer.register({\n  scopedValue: asFunction((cradle) => 'Hello ' + cradle.someValue),\n})\n\n// Create a scope and register a value.\nconst scope = container.createScope()\nscope.register({\n  someValue: asValue('scope'),\n})\n\nscope.cradle.scopedValue === 'Hello scope'\ncontainer.cradle.someValue\n// throws AwilixResolutionException\n// because the root container does not know\n// of the resolver.\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// It does not matter when the scope is created,\n// it will still have anything that is registered\n// in its parent.\nconst scope = container.createScope()\n\ncontainer.register({\n  value: asValue('root'),\n  usedValue: asFunction((cradle) => `hello from ${cradle.value}`),\n})\n\nscope.register({\n  value: asValue('scope'),\n})\n\ncontainer.cradle.value === 'root'\nscope.cradle.value === 'scope'\ncontainer.cradle.usedValue === 'hello from root'\nscope.cradle.usedValue === 'hello from scope'\n```\n\n----------------------------------------\n\nTITLE: Building Instances with container.build() in JavaScript\nDESCRIPTION: Shows how to use the build() method to inject dependencies into a class or function without registering it in the container. It demonstrates both shorthand and explicit approaches with performance considerations.\nSOURCE: https://github.com/jeffijoe/awilix/blob/master/README.md#2025-04-22_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n// The following are equivelant..\nclass MyClass {\n  constructor({ ping }) {\n    this.ping = ping\n  }\n\n  pong() {\n    return this.ping\n  }\n}\n\nconst createMyFunc = ({ ping }) => ({\n  pong: () => ping,\n})\n\ncontainer.register({\n  ping: asValue('pong'),\n})\n\n// Shorthand\n// This uses `utils.isClass()` to determine whether to\n// use `asClass` or `asFunction`. This is fine for\n// one-time resolutions.\nconst myClass = container.build(MyClass)\nconst myFunc = container.build(createMyFunc)\n\n// Explicit\n// Save the resolver if you are planning on invoking often.\n// **Especially** if you're using classic resolution.\nconst myClassResolver = asClass(MyClass)\nconst myFuncResolver = asFunction(MyFunc)\n\nconst myClass = container.build(myClassResolver)\nconst myFunc = container.build(myFuncResolver)\n```\n\n----------------------------------------\n\nTITLE: Configuring Injection Modes in Awilix\nDESCRIPTION: Shows how to configure injection modes (PROXY and CLASSIC) in Awilix. It demonstrates setting injection modes container-wide, per-resolver, and for auto-loading modules.\nSOURCE: https://github.com/jeffijoe/awilix/blob/master/README.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst { createContainer, InjectionMode } = require('awilix')\n\nconst container = createContainer({ injectionMode: InjectionMode.CLASSIC })\n\ncontainer.register({\n  logger: asClass(Logger).classic(),\n  // or..\n  emailService: asFunction(makeEmailService).proxy()\n  // or..\n  notificationService: asClass(NotificationService).setInjectionMode(InjectionMode.CLASSIC)\n})\n\n// or..\ncontainer.register({\n  logger: asClass(Logger, { injectionMode: InjectionMode.CLASSIC })\n})\n\n// For auto-loading modules:\nconst container = createContainer()\ncontainer.loadModules(['services/**/*.js', 'repositories/**/*.js'], {\n  resolverOptions: {\n    injectionMode: InjectionMode.CLASSIC,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Comparing CLASSIC and PROXY Injection Modes in Awilix\nDESCRIPTION: Compares the CLASSIC and PROXY injection modes in Awilix, demonstrating how they affect function signatures and testability. It shows examples of dependency injection using both modes.\nSOURCE: https://github.com/jeffijoe/awilix/blob/master/README.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// CLASSIC\nfunction database(connectionString, timeout, logger) {\n  // ...\n}\n\n// Shorter, but less readable, order-sensitive\nconst db = database('localhost:1337;user=123...', 4000, new LoggerMock())\n\n// PROXY\nfunction database({ connectionString, timeout, logger }) {\n  // ...\n}\n\n// Longer, more readable, order does not matter\nconst db = database({\n  logger: new LoggerMock(),\n  timeout: 4000,\n  connectionString: 'localhost:1337;user=123...',\n})\n```\n\n----------------------------------------\n\nTITLE: Inlining Resolver Options in Awilix\nDESCRIPTION: Demonstrates how to use inline resolver options in Awilix, including setting lifetime, injection mode, and custom naming for auto-loaded modules.\nSOURCE: https://github.com/jeffijoe/awilix/blob/master/README.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { RESOLVER, Lifetime, InjectionMode } from 'awilix'\n\nexport default class AwesomeService {\n  constructor(awesomeRepository) {\n    this.awesomeRepository = awesomeRepository\n  }\n}\n\nAwesomeService[RESOLVER] = {\n  name: 'superService',\n  lifetime: Lifetime.SCOPED,\n  injectionMode: InjectionMode.CLASSIC\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Per-Module Local Injections in Awilix\nDESCRIPTION: Shows various ways to set up per-module local injections in Awilix, allowing for module-specific configuration values.\nSOURCE: https://github.com/jeffijoe/awilix/blob/master/README.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createContainer, Lifetime, asFunction } from 'awilix'\nimport createUserRepository from './repositories/userRepository'\n\nconst container = createContainer()\n  .register({\n    userRepository: asFunction(createUserRepository)\n      .inject(() => ({ timeout: 2000 })),\n  })\n  .register({\n    userRepository: asFunction(createUserRepository, {\n      injector: () => ({ timeout: 2000 }),\n    }),\n  })\n  .register(\n    'userRepository',\n    asFunction(createUserRepository, {\n      injector: () => ({ timeout: 2000 }),\n    }),\n  )\n  .loadModules([['repositories/*.js', { injector: () => ({ timeout: 2000 }) }]])\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Lifetime Mismatches in Awilix Registrations\nDESCRIPTION: Illustrates potential issues with mismatched lifetimes in Awilix registrations. It shows how a singleton depending on a transient registration can lead to stale data, and how strict mode can help catch these issues.\nSOURCE: https://github.com/jeffijoe/awilix/blob/master/README.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst makePrintTime =\n  ({ time }) =>\n  () => {\n    console.log('Time:', time)\n  }\n\nconst getTime = () => new Date().toString()\n\ncontainer.register({\n  printTime: asFunction(makePrintTime).singleton(),\n  time: asFunction(getTime).transient(),\n})\n\n// Resolving `time` 2 times will\n// invoke `getTime` 2 times.\ncontainer.resolve('time')\ncontainer.resolve('time')\n\n// These will print the same timestamp at all times,\n// because `printTime` is singleton and\n// `getTime` was invoked when making the singleton.\ncontainer.resolve('printTime')()\ncontainer.resolve('printTime')()\n```\n\n----------------------------------------\n\nTITLE: Implementing Container Disposal in Awilix\nDESCRIPTION: Shows how to properly dispose of an Awilix container, including registering disposers for resources like database connection pools.\nSOURCE: https://github.com/jeffijoe/awilix/blob/master/README.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createContainer, asClass } from 'awilix'\nimport pg from 'pg'\n\nclass TodoStore {\n  constructor({ pool }) {\n    this.pool = pool\n  }\n\n  async getTodos() {\n    const result = await this.pool.query('SELECT * FROM todos')\n    return result.rows\n  }\n}\n\nfunction configureContainer() {\n  return container.register({\n    todoStore: asClass(TodoStore),\n    pool: asFunction(() => new pg.Pool())\n      .singleton()\n      .disposer((pool) => pool.end()),\n  })\n}\n\nconst container = configureContainer()\nconst todoStore = container.resolve('todoStore')\n\n// Later...\ncontainer.dispose().then(() => {\n  console.log('Container has been disposed!')\n})\n```\n\n----------------------------------------\n\nTITLE: Disposing Resources with container.dispose() in JavaScript\nDESCRIPTION: Explains how to use the dispose() method to clean up resources when they are no longer needed. This example shows proper disposal of a PostgreSQL connection pool with a singleton lifetime.\nSOURCE: https://github.com/jeffijoe/awilix/blob/master/README.md#2025-04-22_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nconst pg = require('pg')\n\ncontainer.register({\n  pool: asFunction(() => new pg.Pool())\n    .disposer((pool) => pool.end())\n    // IMPORTANT! Must be either singleton or scoped!\n    .singleton(),\n})\n\nconst pool = container.resolve('pool')\npool.query('...')\n\n// Later..\ncontainer.dispose().then(() => {\n  console.log('All dependencies disposed, you can exit now. :)')\n})\n```\n\n----------------------------------------\n\nTITLE: Caching Container Resolutions\nDESCRIPTION: Example showing the container's internal caching mechanism using a singleton counter. Demonstrates cache invalidation and resolution.\nSOURCE: https://github.com/jeffijoe/awilix/blob/master/README.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nlet counter = 1\ncontainer.register({\n  count: asFunction(() => counter++).singleton(),\n})\n\ncontainer.cradle.count === 1\ncontainer.cradle.count === 1\n\ncontainer.cache.delete('count')\ncontainer.cradle.count === 2\n```\n\n----------------------------------------\n\nTITLE: Creating Alias Registration with aliasTo\nDESCRIPTION: Demonstrates creating an alias to reference another registered dependency using aliasTo(). The alias resolves to the same value as the original registration.\nSOURCE: https://github.com/jeffijoe/awilix/blob/master/README.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\ncontainer.register({\n  val: asValue(123),\n  aliasVal: aliasTo('val'),\n})\n\ncontainer.resolve('aliasVal') === container.resolve('val')\n```\n\n----------------------------------------\n\nTITLE: Listing Modules with listModules\nDESCRIPTION: Shows how to use listModules() to get an array of module names and paths matching glob patterns. Useful for dynamic module loading.\nSOURCE: https://github.com/jeffijoe/awilix/blob/master/README.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst listModules = require('awilix').listModules\n\nconst result = listModules(['services/*.js'])\n\nconsole.log(result)\n// << [{ name: 'someService', path: 'path/to/services/someService.js' }]\n```\n\n----------------------------------------\n\nTITLE: Setting RESOLVER Property for Non-Default Exports in JavaScript\nDESCRIPTION: Demonstrates how to set the RESOLVER property on a non-default export to enable auto-loading in Awilix.\nSOURCE: https://github.com/jeffijoe/awilix/blob/master/README.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst { RESOLVER } = require('awilix')\nexport class ServiceClass {}\nServiceClass[RESOLVER] = {}\n```\n\n----------------------------------------\n\nTITLE: Setting RESOLVER Property for Non-Default Exports in TypeScript\nDESCRIPTION: Shows a more concise way to set the RESOLVER property on a class for auto-loading in TypeScript.\nSOURCE: https://github.com/jeffijoe/awilix/blob/master/README.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RESOLVER } from 'awilix'\nexport class ServiceClass {\n  static [RESOLVER] = {}\n}\n```\n\n----------------------------------------\n\nTITLE: Container Options Configuration\nDESCRIPTION: Shows how to access container configuration options that were passed during creation.\nSOURCE: https://github.com/jeffijoe/awilix/blob/master/README.md#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst container = createContainer({\n  injectionMode: InjectionMode.CLASSIC,\n})\n\nconsole.log(container.options.injectionMode) // 'CLASSIC'\n```\n\n----------------------------------------\n\nTITLE: Awilix Release History Documentation\nDESCRIPTION: A detailed changelog entry documenting version changes, bug fixes, and new features. Notable changes include support for Symbols, console.log fixes, TypeScript improvements, and registration options enhancements.\nSOURCE: https://github.com/jeffijoe/awilix/blob/master/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n# 2.9.0\n\n- Fix issue with `console.log` on the cradle throwing an error.\n  ([#7](https://github.com/jeffijoe/awilix/issues/7))\n  - This _should_ not break anything, but just to be safe I did a minor version\n    bump.\n- Add support for `Symbol`s (although not recommended).\n\n# 2.8.4\n\n- Change `RegistrationOptions` typing to union of string and options\n\n# 2.8.3\n\n- Fix typing for `REGISTRATION` symbol\n\n# 2.8.2\n\n- Fix typing for `loadModules` — it didn't allow the shortcut version of\n  `['glob.js', Lifetime.SCOPED]`\n- Add Prettier formatting as well as `lint-staged` to keep the tests passing and\n  the code fresh before committing.\n\n# 2.8.1\n\n- Remove `is-plain-object` and `is-string`, use simple checks instead. Trying to\n  keep the dependencies as thin as possible.\n\n# 2.8.0\n\n- **[NEW]**: Support inline registration options\n  ([#34](https://github.com/jeffijoe/awilix/issues/34))\n\n# 2.7.1\n\n- **[FIXED]**: `container.loadModules()` typing fix, thanks\n  [@dboune](https://github.com/dboune)!\n\n# 2.7.0\n\n- **[BREAKING]**: Custom `isClass` function that will treat\n  `function Capital () {}` as a class due to the capital first letter of the\n  function name. This is to improve compatibility with Babel's ES5 code\n  generator, and is also a pretty commonly accepted standard naming convention.\n  ([#28](https://github.com/jeffijoe/awilix/issues/28))\n- **[NEW]**: Added support for passing in a `register` function to\n  `loadModules`. ([#28](https://github.com/jeffijoe/awilix/issues/28))\n\n# 2.6.2\n\n- **[FIXED]**: Parsing regression in 2.6.1\n  ([#30](https://github.com/jeffijoe/awilix/issues/30))\n\n# 2.6.1\n\n- **[FIXED]**: Implemented a crude arguments parser to replace regex.\n  ([#30](https://github.com/jeffijoe/awilix/issues/30))\n\n# 2.6.0\n\n- **[NEW]**: infer function name for `registerClass`/`registerFunction`\n  ([#26](https://github.com/jeffijoe/awilix/issues/26))\n- **[FIXED]**: Corrected some TypeScript typings related to `registerClass` and\n  `registerFunction`.\n\n# 2.5.0\n\n- **[NEW]**: Implemented per-module locals injection\n  ([#24](https://github.com/jeffijoe/awilix/issues/24)).\n- Fixed issue where passing a `Lifetime` like\n  `.registerFunction('name', func, Lifetime.SCOPED)` didn't work.\n- Documented `asClass`, `asValue` and `asFunction`.\n- **[FIXED]**: nasty options leaking when using\n  `registerClass/Function({ test1: [Test1, { }], test2: [Test2, { }] })`.\n\n# 2.4.0\n\n- **[BREAKING]**: Guard assertions added to `asFunction` and `asClass`. This\n  will prevent some nasty runtime behaviors.\n  ([#20](https://github.com/jeffijoe/awilix/issues/20)), thanks\n  [@zer0tonin](https://github.com/zer0tonin)!\n\n# 2.3.0\n\n- **[NEW]**: Classic dependency resolution mode using parameter name matching\n  implemented, thanks to\n  [@cjhoward92](https://github.com/jeffijoe/awilix/pull/21)! This is an\n  alternative to the default proxy mechanism.\n- **[BREAKING]**: The `registerX({ name: [value, options]})` pattern is not\n  needed for `registerValue` because it is so simple is requires no\n  configuration. It was causing trouble when attempting to register an array as\n  a value, because the `register` function would think it was the\n  value-options-array pattern when it shouldn't be. **This change is breaking in\n  the sense that it solves the unexpected behavior, but it breaks existing\n  registrations that would register arrays by using\n  `registerValue({ name: [[1, 2]] })` (multi-dimensional array to work around\n  the pre-2.3.0 behavior)**\n- [chore]: Updated packages.\n\n# 2.2.6\n\n- Pass in the module descriptor to `formatName` - thanks @anasinnyk!\n- Fixed some issues with TypeScript definitions.\n\n# 2.2.5\n\n- Fixed `registerFunction` return type definition - thanks @ycros!\n\n# 2.2.4\n\n- TypeScript definitions - thanks @blove!\n\n# 2.2.3\n\n- Webpack 2 compatibility - thanks @ewrogers!\n\n# 2.2.2\n\n- `console.log`ing the container will, instead of throwing an error, display a\n  string summary of the container. Fixes #7.\n- started logging changes to a changelog (sorry about being so late to the\n  party)\n```\n\n----------------------------------------\n\nTITLE: Configuring Scoped Container with Awilix v4\nDESCRIPTION: Demonstrates how to set up root and scoped containers in Awilix v4, registering a logger class and showing how scoped registrations now maintain their own cache. This fixes the issue where scoped registrations previously traveled up the container hierarchy.\nSOURCE: https://github.com/jeffijoe/awilix/blob/master/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// app.js\nimport { Logger } from './logger'\nimport { createContainer, asClass, InjectionMode } from 'awilix'\n\nconst container = createContainer({\n  injectionMode: InjectionMode.CLASSIC,\n}).register({\n  logger: asClass(Logger).scoped(),\n})\n\nconst scope = container.createScope()\nscope.register({\n  loggerPrefix: asValue('dope scope'),\n})\n\nconst rootLogger = container.resolve('logger')\nconst scopeLogger = scope.resolve('logger')\n\nrootLogger.log('yo!') // [root]: yo!\nscopeLogger.log('wassup!') // [dope scope]: wassup!\n```\n\n----------------------------------------\n\nTITLE: Implementing Scoped Logger Example in Awilix v4\nDESCRIPTION: Example demonstrating the corrected scoped caching behavior in Awilix v4, showing how a Logger class with different prefixes is handled in root and scoped containers. This illustrates how scoped registrations now maintain their own cache rather than using parent container's cache.\nSOURCE: https://github.com/jeffijoe/awilix/blob/master/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// logger.js\nexport class Logger {\n  constructor(loggerPrefix = 'root') {\n    this.prefix = loggerPrefix\n  }\n\n  log(message) {\n    console.log(`[${this.prefix}]: ${message}`)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing and Running the Awilix Koa Example\nDESCRIPTION: Commands to install dependencies and start the example Koa application that demonstrates Awilix dependency injection. Once started, the application will be available at http://localhost:4321/messages?userId=1.\nSOURCE: https://github.com/jeffijoe/awilix/blob/master/examples/koa/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Installing Awilix using npm or yarn\nDESCRIPTION: Shows how to install Awilix using npm or yarn package managers.\nSOURCE: https://github.com/jeffijoe/awilix/blob/master/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install awilix\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add awilix\n```"
  }
]