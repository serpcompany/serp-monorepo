[
  {
    "owner": "markdown-it",
    "repo": "markdown-it",
    "content": "TITLE: Syntax Highlighting with highlight.js\nDESCRIPTION: This snippet demonstrates how to integrate syntax highlighting using highlight.js. It defines a `highlight` function within the markdown-it options that uses highlight.js to highlight code blocks based on their language. It includes both the standard usage and a method to override the full wrapper.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/README.md#_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimport markdownit from 'markdown-it'\nimport hljs from 'highlight.js' // https://highlightjs.org\n\n// Actual default values\nconst md = markdownit({\n  highlight: function (str, lang) {\n    if (lang && hljs.getLanguage(lang)) {\n      try {\n        return hljs.highlight(str, { language: lang }).value;\n      } catch (__) {}\n    }\n\n    return ''; // use external default escaping\n  }\n});\n```\n\nLANGUAGE: js\nCODE:\n```\nimport markdownit from 'markdown-it'\nimport hljs from 'highlight.js' // https://highlightjs.org\n\n// Actual default values\nconst md = markdownit({\n  highlight: function (str, lang) {\n    if (lang && hljs.getLanguage(lang)) {\n      try {\n        return '<pre><code class=\"hljs\">' +\n               hljs.highlight(str, { language: lang, ignoreIllegals: true }).value +\n               '</code></pre>';\n      } catch (__) {}\n    }\n\n    return '<pre><code class=\"hljs\">' + md.utils.escapeHtml(str) + '</code></pre>';\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Basic markdown-it rendering in Node.js/Browser\nDESCRIPTION: This snippet demonstrates the most basic usage of markdown-it: importing/accessing the library, creating a markdown-it instance, and rendering a Markdown string to HTML. It shows both Node.js (CJS or ESM) and browser usage patterns.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/support/api_header.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// node.js\n// can use `require('markdown-it')` for CJS\nimport markdownit from 'markdown-it'\nconst md = markdownit()\nconst result = md.render('# markdown-it rulezz!');\n\n// browser with UMD build, added to \"window\" on script load\n// Note, there is no dash in \"markdownit\".\nconst md = window.markdownit();\nconst result = md.render('# markdown-it rulezz!');\n```\n\n----------------------------------------\n\nTITLE: Modify Markdown-it List Rendering with Token Class\nDESCRIPTION: This code snippet modifies the Markdown-it renderer rules to wrap list item content with <span> tags using the `Token` class. It offers a more structured and robust approach than string manipulation, especially for complex modifications. Requires markdown-it package.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/docs/examples/renderer_rules.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst MarkdownIt = require('markdown-it');\nconst Token = require('markdown-it/lib/token');\nconst md = new MarkdownIt();\n\nconst proxy = (tokens, idx, options, env, self) => self.renderToken(tokens, idx, options);\n\nconst defaultListItemOpenRenderer = md.renderer.rules.list_item_open || proxy;\nconst defaultSpanOpenRenderer = md.renderer.rules.span_open || proxy;\n\nmd.renderer.rules.list_item_open = function(tokens, idx, options, env, self) {\n    const span = new Token(\"span_open\", \"span\", 1);\n    return `${defaultListItemOpenRenderer(tokens, idx, options, env, self)}${defaultSpanOpenRenderer([span], 0, options, env, self)}`;\n};\n\nconst defaultListItemCloseRenderer = md.renderer.rules.list_item_close || proxy;\nconst defaultSpanCloseRenderer = md.renderer.rules.span_close|| proxy;\n\nmd.renderer.rules.list_item_close = function(tokens, idx, options, env, self) {\n    const span = new Token(\"span_close\", \"span\", -1);\n    return `${defaultSpanCloseRenderer([span], 0, options, env, self)}${defaultListItemCloseRenderer(tokens, idx, options, env, self)}`;\n};\n\nconsole.log(md.render(\"- Hello World\"));\n```\n\n----------------------------------------\n\nTITLE: Defining a New Rendering Rule in Markdown-it (JavaScript)\nDESCRIPTION: This snippet shows how to define a new rendering rule for a specific Markdown element (e.g., `bullet_list_open` for `<ul>` tags). The rule is a function that receives tokens, index, options, environment, and a renderer reference.  This function is assigned to the corresponding key in `md.renderer.rules`.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/docs/examples/renderer_rules.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst MarkdownIt = require('markdown-it');\nconst md = new MarkdownIt();\n\nmd.renderer.rules.bullet_list_open = function(tokens, idx, options, env, self) {\n   // tokes: List of all tokens being parsed\n   // idx: Number that corresponds to the key of the current token in tokens\n   // options: The options defined when creating the new markdown-it object ({} in our case)\n   // env ???\n   // self: A reference to the renderer itself\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing Default Renderer Rules in Markdown-it (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to access and list the default renderer rules in a Markdown-it instance. It initializes Markdown-it and then logs the keys of the `md.renderer.rules` object, which contains the rendering functions for various Markdown elements.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/docs/examples/renderer_rules.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst MarkdownIt = require('markdown-it');\nconst md = new MarkdownIt();\n\nconsole.log(Object.keys(md.renderer.rules))\n```\n\n----------------------------------------\n\nTITLE: Renderer Rule Signature (JavaScript)\nDESCRIPTION: This snippet showcases the standard function signature for markdown-it renderer rules.  The function accepts tokens, the index of the current token, options, the environment, and the renderer instance itself. It should return the resulting HTML string for the token.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/docs/architecture.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction (tokens, idx, options, env, renderer) {\n  // ...\n  return htmlResult;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing markdown-it with Presets and Options\nDESCRIPTION: This section shows how to initialize markdown-it with different presets and custom options. Presets define combinations of active rules and options. Options can be used to configure various aspects of the parser, such as enabling HTML tags or linkify.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/benchmark/samples/README.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n// commonmark mode\nvar md = require('markdown-it')('commonmark');\n\n// default mode\nvar md = require('markdown-it')();\n\n// enable everything\nvar md = require('markdown-it')({\n  html: true,\n  linkify: true,\n  typographer: true\n});\n\n// full options list (defaults)\nvar md = require('markdown-it')({\n  html:         false,        // Enable HTML tags in source\n  xhtmlOut:     false,        // Use '/' to close single tags (<br />).\n                              // This is only for full CommonMark compatibility.\n  breaks:       false,        // Convert '\\n' in paragraphs into <br>\n  langPrefix:   'language-',  // CSS language prefix for fenced blocks. Can be\n                              // useful for external highlighters.\n  linkify:      false,        // Autoconvert URL-like text to links\n\n  // Enable some language-neutral replacement + quotes beautification\n  typographer:  false,\n\n  // Double + single quotes replacement pairs, when typographer enabled,\n  // and smartquotes on. Set doubles to '«»' for Russian, '„“' for German.\n  quotes: '“”‘’',\n\n  // Highlighter function. Should return escaped HTML,\n  // or '' if the source string is not changed and should be escaped externaly.\n  highlight: function (/*str, lang*/) { return ''; }\n});\n```\n\n----------------------------------------\n\nTITLE: Example Token Object Structure (JavaScript)\nDESCRIPTION: This code shows the structure of a Token object, which represents a parsed Markdown element.  It highlights the `type`, `tag`, `attrs`, `nesting`, and other properties that define how the element should be rendered into HTML.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/docs/examples/renderer_rules.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"type\": \"bullet_list_open\",\n    \"tag\": \"ul\",\n    \"attrs\": null,\n    \"map\": [\n      0,\n      1\n    ],\n    \"nesting\": 1,\n    \"level\": 0,\n    \"children\": null,\n    \"content\": \"\",\n    \"markup\": \"-\",\n    \"info\": \"\",\n    \"meta\": null,\n    \"block\": true,\n    \"hidden\": false\n  }\n```\n\n----------------------------------------\n\nTITLE: Modify Markdown-it List Rendering with String Manipulation\nDESCRIPTION: This code snippet modifies the Markdown-it renderer rules to wrap the content of each list item (<li>) in a <span> tag.  It uses string concatenation to add the opening and closing span tags before and after the list item's content. Requires markdown-it package.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/docs/examples/renderer_rules.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst MarkdownIt = require('markdown-it');\nconst md = new MarkdownIt();\n\nconst proxy = (tokens, idx, options, env, self) => self.renderToken(tokens, idx, options);\nconst defaultListItemOpenRenderer = md.renderer.rules.list_item_open || proxy;\n\nmd.renderer.rules.list_item_open = function(tokens, idx, options, env, self) {\n  return `${defaultListItemOpenRenderer(tokens, idx, options, env, self)}<span>`;\n};\n\nconst defaultListItemCloseRenderer = md.renderer.rules.list_item_close || proxy;\n\nmd.renderer.rules.list_item_close = function(tokens, idx, options, env, self) {\n  return `</span>${defaultListItemCloseRenderer(tokens, idx, options, env, self)}`;\n};\n```\n\n----------------------------------------\n\nTITLE: Inline Link - Image - Markdown\nDESCRIPTION: Shows an inline link containing an image.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_199\n\nLANGUAGE: markdown\nCODE:\n```\n[![moon](moon.jpg)](/uri)\n```\n\nLANGUAGE: html\nCODE:\n```\n<p><a href=\"/uri\"><img src=\"moon.jpg\" alt=\"moon\" /></a></p>\n```\n\n----------------------------------------\n\nTITLE: Managing Rules in markdown-it\nDESCRIPTION: This snippet demonstrates how to enable and disable rules in markdown-it, controlling which Markdown features are active. Rules can be managed individually or in groups, allowing for customization of the parser's behavior. It also shows enabling all rules by setting options.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/support/api_header.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport markdownit from 'markdown-it'\n\n// Activate/deactivate rules, with currying\nconst md = markdownit()\n  .disable(['link', 'image'])\n  .enable(['link'])\n  .enable('image');\n\n// Enable everything\nconst md = markdownit({\n  html: true,\n  linkify: true,\n  typographer: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Inline Markdown\nDESCRIPTION: This snippet shows how to render a single line of Markdown without wrapping it in a paragraph. This is useful for rendering short Markdown snippets within other HTML elements.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/support/api_header.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport markdownit from 'markdown-it'\nconst md = markdownit()\nconst result = md.renderInline('__markdown-it__ rulezz!');\n```\n\n----------------------------------------\n\nTITLE: Rendering Inline Markdown\nDESCRIPTION: This code snippet renders a single line of Markdown without wrapping it in a paragraph tag. It utilizes the `renderInline` method of the `markdown-it` instance.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/benchmark/samples/README.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar md = require('markdown-it')();\nvar result = md.renderInline('__markdown-it__ rulezz!');\n```\n\n----------------------------------------\n\nTITLE: HTML List Example with Span Wrapper\nDESCRIPTION: This example demonstrates an HTML list with a <span> element wrapping the text content inside the <li>. This wrapper allows for proper block-level styling and line wrapping when using CSS pseudo-classes.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/docs/examples/renderer_rules.md#_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<ul>\n  <li>\n    <span>Hello World</span>\n  </li>\n<ul>\n```\n\n----------------------------------------\n\nTITLE: Rendering URI Autolink\nDESCRIPTION: This snippet demonstrates rendering a simple URI autolink. `<http://foo.bar.baz>` becomes `<p><a href=\"http://foo.bar.baz\">http://foo.bar.baz</a></p>`. The URI is automatically converted into a link.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_276\n\nLANGUAGE: markdown\nCODE:\n```\n<http://foo.bar.baz>\n.\n<p><a href=\"http://foo.bar.baz\">http://foo.bar.baz</a></p>\n```\n\n----------------------------------------\n\nTITLE: Initializing markdown-it with Presets and Options\nDESCRIPTION: This snippet demonstrates various ways to initialize markdown-it with presets and options.  Presets define sets of active rules and options. It shows how to use `commonmark`, the default preset, enabling all options, and setting specific options like `html`, `linkify`, and `typographer`.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/README.md#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport markdownit from 'markdown-it'\n\n// commonmark mode\nconst md = markdownit('commonmark')\n\n// default mode\nconst md = markdownit()\n\n// enable everything\nconst md = markdownit({\n  html: true,\n  linkify: true,\n  typographer: true\n})\n\n// full options list (defaults)\nconst md = markdownit({\n  // Enable HTML tags in source\n  html:         false,\n\n  // Use '/' to close single tags (<br />).\n  // This is only for full CommonMark compatibility.\n  xhtmlOut:     false,\n\n  // Convert '\\n' in paragraphs into <br>\n  breaks:       false,\n\n  // CSS language prefix for fenced blocks. Can be\n  // useful for external highlighters.\n  langPrefix:   'language-',\n\n  // Autoconvert URL-like text to links\n  linkify:      false,\n\n  // Enable some language-neutral replacement + quotes beautification\n  // For the full list of replacements, see https://github.com/markdown-it/markdown-it/blob/master/lib/rules_core/replacements.mjs\n  typographer:  false,\n\n  // Double + single quotes replacement pairs, when typographer enabled,\n  // and smartquotes on. Could be either a String or an Array.\n  //\n  // For example, you can use '«»„“' for Russian, '„“‚‘' for German,\n  // and ['«\\xA0', '\\xA0»', '‹\\xA0', '\\xA0›'] for French (including nbsp).\n  quotes: '“”‘’',\n\n  // Highlighter function. Should return escaped HTML,\n  // or '' if the source string is not changed and should be escaped externally.\n  // If result starts with <pre... internal wrapper is skipped.\n  highlight: function (/*str, lang*/) { return ''; }\n});\n```\n\n----------------------------------------\n\nTITLE: HTML Output of String Manipulation Modification\nDESCRIPTION: This code represents the expected HTML output after applying the string manipulation modification to Markdown-it, showing the list item wrapped in a span element.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/docs/examples/renderer_rules.md#_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<ul>\n  <li>\n    <span>Hello World</span>\n  </li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Initializing markdown-it with presets and options\nDESCRIPTION: This code demonstrates how to initialize markdown-it with presets (`commonmark`, `zero`, or `default`) and/or a set of options. Presets define combinations of active rules and options. Options allow fine-grained control over the parser's behavior.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/support/api_header.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport markdownit from 'markdown-it'\n\n// commonmark mode\nconst md = markdownit('commonmark')\n\n// default mode\nconst md = markdownit()\n\n// enable everything\nconst md = markdownit({\n  html: true,\n  linkify: true,\n  typographer: true\n})\n\n// full options list (defaults)\nconst md = markdownit({\n  // Enable HTML tags in source\n  html:         false,\n\n  // Use '/' to close single tags (<br />).\n  // This is only for full CommonMark compatibility.\n  xhtmlOut:     false,\n\n  // Convert '\\n' in paragraphs into <br>\n  breaks:       false,\n\n  // CSS language prefix for fenced blocks. Can be\n  // useful for external highlighters.\n  langPrefix:   'language-',\n\n  // Autoconvert URL-like text to links\n  linkify:      false,\n\n  // Enable some language-neutral replacement + quotes beautification\n  // For the full list of replacements, see https://github.com/markdown-it/markdown-it/blob/master/lib/rules_core/replacements.mjs\n  typographer:  false,\n\n  // Double + single quotes replacement pairs, when typographer enabled,\n  // and smartquotes on. Could be either a String or an Array.\n  //\n  // For example, you can use '«»„“' for Russian, '„“‚‘' for German,\n  // and ['«\\xA0', '\\xA0»', '‹\\xA0', '\\xA0›'] for French (including nbsp).\n  quotes: '“”‘’',\n\n  // Highlighter function. Should return escaped HTML,\n  // or '' if the source string is not changed and should be escaped externally.\n  // If result starts with <pre... internal wrapper is skipped.\n  highlight: function (/*str, lang*/) { return ''; }\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Email Autolink\nDESCRIPTION: This example demonstrates rendering a simple email autolink. `<foo@bar.example.com>` becomes `<p><a href=\"mailto:foo@bar.example.com\">foo@bar.example.com</a></p>`. The parser automatically converts the email address into a `mailto:` link.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_286\n\nLANGUAGE: markdown\nCODE:\n```\n<foo@bar.example.com>\n.\n<p><a href=\"mailto:foo@bar.example.com\">foo@bar.example.com</a></p>\n```\n\n----------------------------------------\n\nTITLE: Inline Link - No Link Precedence - Markdown\nDESCRIPTION: Illustrates that brackets that are not part of links do not take precedence.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_205\n\nLANGUAGE: markdown\nCODE:\n```\n*foo [bar* baz]\n```\n\nLANGUAGE: html\nCODE:\n```\n<p><em>foo [bar</em> baz]</p>\n```\n\n----------------------------------------\n\nTITLE: Testing Escape Sequences\nDESCRIPTION: This snippet tests various escape sequences to ensure they are handled correctly. It covers escaping special characters, backslashes, and HTML-like tags.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/benchmark/samples/inline-escape.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n\\!\\\\\\\"\\#\\$\\%\\&\\'\\(\\)\\*\\+\\,\\.\\/\\:\\;\\<\\=\\>\\?\n\n\\@ \\[ \\] \\^ \\_ \\` \\{ \\| \\} \\~ \\- \\'\n\n\\\n\\\\\n\\\\\\\n\\\\\\\\\n\\\\\\\\\\\n\n\\<this\\> \\<is\\> \\<not\\> \\<html\\>\n```\n\n----------------------------------------\n\nTITLE: HTML Block with Script Tag Markdown Example\nDESCRIPTION: Demonstrates how markdown-it handles HTML blocks starting with `<script>` tags. This ensures that content following the script tag on the same line is treated as part of the HTML block and not interpreted as Markdown. The input includes a script tag and content on the same line, and the output shows the entire block rendered as HTML.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_38\n\nLANGUAGE: Markdown\nCODE:\n```\n<script>\nfoo\n</script>1. *bar*\n.\n<script>\nfoo\n</script>1. *bar*\n```\n\n----------------------------------------\n\nTITLE: Markdown List Creation Example\nDESCRIPTION: This example demonstrates the creation of a list, list item, and paragraph blocks within a blockquote. Text is then added to the paragraph block inside the list item.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_302\n\nLANGUAGE: tree\nCODE:\n```\n-> document\n  -> block_quote\n       paragraph\n         \"Lorem ipsum dolor\\nsit amet.\"\n    -> list (type=bullet tight=true bullet_char=-)\n      -> list_item\n        -> paragraph\n             \"Qui *quodsi iracundia*\"\n```\n\n----------------------------------------\n\nTITLE: AsciiDoc List Example\nDESCRIPTION: This AsciiDoc example shows a nested list with continued items and an indented block. It demonstrates the syntax for creating lists and code blocks in AsciiDoc.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_0\n\nLANGUAGE: asciidoc\nCODE:\n```\n1. List item one.\n+\nList item one continued with a second paragraph followed by an\nIndented block.\n+\n.................\n$ ls *.sh\n$ mv *.sh ~/tmp\n.................\n+\nList item continued with a third paragraph.\n\n2. List item two continued with an open block.\n+\n--\nThis paragraph is part of the preceding list item.\n\na. This list is nested and does not require explicit item\ncontinuation.\n+\nThis paragraph is part of the preceding list item.\n\nb. List item b.\n\nThis paragraph belongs to item two of the outer list.\n--\n```\n\n----------------------------------------\n\nTITLE: Renderer Rule - Convert Vimeo Link to Iframe (JavaScript)\nDESCRIPTION: This snippet demonstrates how to override the default image renderer rule in markdown-it to convert images with Vimeo links into embedded iframes. It defines a new renderer rule that checks if the image source is a Vimeo link, and if so, generates an iframe with the Vimeo player. The original image rendering is used if the link is not a Vimeo link.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/docs/architecture.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar md = require('markdown-it')();\n\nvar defaultRender = md.renderer.rules.image,\n    vimeoRE       = /^https?:\\/\\/(www\\.)?vimeo.com\\/(\\d+)($|\\/)/;\n\nmd.renderer.rules.image = function (tokens, idx, options, env, self) {\n  var src = tokens[idx].attrGet('src');\n\n  if (vimeoRE.test(src)) {\n    var id = src.match(vimeoRE)[2];\n\n    return '<div class=\"embed-responsive embed-responsive-16by9\">\\n' +\n           '  <iframe class=\"embed-responsive-item\" src=\"//player.vimeo.com/video/' + id + '\"></iframe>\\n' +\n           '</div>\\n';\n  }\n\n  // Pass the token to the default renderer.\n  return defaultRender(tokens, idx, options, env, self);\n};\n```\n\n----------------------------------------\n\nTITLE: Parsing Basic Reference Link\nDESCRIPTION: This example shows a basic reference link. The link text is `foo`, and the reference is `ref`. The reference `ref` is defined as `/uri`.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_229\n\nLANGUAGE: markdown\nCODE:\n```\n[ref[]: /uri\n\n[foo][ref[bar]]\n\n[ref[bar]]: /uri\n.\n<p>[foo][ref[bar]]</p>\n<p>[ref[bar]]: /uri</p>\n```\n\n----------------------------------------\n\nTITLE: Renderer Rule - Add target=\"_blank\" to Links (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to modify the default link rendering in markdown-it to automatically add the `target=\"_blank\"` attribute to all links. It defines a new renderer rule for `link_open` tokens that sets the `target` attribute to `_blank`. The original rendering logic is preserved, either by calling the previously overridden renderer or the default renderer.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/docs/architecture.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Remember the old renderer if overridden, or proxy to the default renderer.\nvar defaultRender = md.renderer.rules.link_open || function (tokens, idx, options, env, self) {\n  return self.renderToken(tokens, idx, options);\n};\n\nmd.renderer.rules.link_open = function (tokens, idx, options, env, self) {\n  // Add a new `target` attribute, or replace the value of the existing one.\n  tokens[idx].attrSet('target', '_blank');\n\n  // Pass the token to the default renderer.\n  return defaultRender(tokens, idx, options, env, self);\n};\n```\n\n----------------------------------------\n\nTITLE: Reference Link - Inline Content - Markdown\nDESCRIPTION: Demonstrates a reference link containing inline content like emphasis, strong text, and code.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_212\n\nLANGUAGE: markdown\nCODE:\n```\n[link *foo **bar** `#`*][ref]\n\n[ref]: /uri\n```\n\nLANGUAGE: html\nCODE:\n```\n<p><a href=\"/uri\">link <em>foo <strong>bar</strong> <code>#</code></em></a></p>\n```\n\n----------------------------------------\n\nTITLE: HTML Block Indentation with Div Markdown Example\nDESCRIPTION: Demonstrates how markdown-it handles indentation of HTML div tags within a Markdown document. This example checks if the parser correctly handles different levels of indentation (up to three spaces) before a div tag. The input includes an indented div tag, and the output shows the rendered div with indentation preserved when less than 4 spaces, otherwise a code block.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_44\n\nLANGUAGE: Markdown\nCODE:\n```\n  <div>\n\n    <div>\n.\n  <div>\n<pre><code>&lt;div&gt;\n</code></pre>\n```\n\n----------------------------------------\n\nTITLE: Rendering Image with Case-Insensitive Reference\nDESCRIPTION: This snippet shows how case-insensitive references work with images. `![foo][bar]\n\n[BAR]: /url` is rendered as `<p><img src=\"/url\" alt=\"foo\" /></p>`.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_265\n\nLANGUAGE: markdown\nCODE:\n```\n![foo][bar]\n\n[BAR]: /url\n.\n<p><img src=\"/url\" alt=\"foo\" /></p>\n```\n\n----------------------------------------\n\nTITLE: Rendering Image with Case-Insensitive Shortcut Reference\nDESCRIPTION: This snippet showcases an image with a case-insensitive shortcut reference. `![Foo]\n\n[foo]: /url \"title\"` becomes `<p><img src=\"/url\" alt=\"Foo\" title=\"title\" /></p>`. The case difference is ignored when resolving the reference.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_273\n\nLANGUAGE: markdown\nCODE:\n```\n![Foo]\n\n[foo]: /url \"title\"\n.\n<p><img src=\"/url\" alt=\"Foo\" title=\"title\" /></p>\n```\n\n----------------------------------------\n\nTITLE: Testing Markdown-it List Modification with String Manipulation\nDESCRIPTION: This snippet builds upon the previous one by adding a test case to render a Markdown list and print the resulting HTML to the console using the modified Markdown-it instance. Requires markdown-it package.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/docs/examples/renderer_rules.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst MarkdownIt = require('markdown-it');\nconst md = new MarkdownIt();\n\nconst proxy = (tokens, idx, options, env, self) => self.renderToken(tokens, idx, options);\nconst defaultListItemOpenRenderer = md.renderer.rules.list_item_open || proxy;\n\nmd.renderer.rules.list_item_open = function(tokens, idx, options, env, self) {\n  return `${defaultListItemOpenRenderer(tokens, idx, options, env, self)}<span>`;\n};\n\nconst defaultListItemCloseRenderer = md.renderer.rules.list_item_close || proxy;\n\nmd.renderer.rules.list_item_close = function(tokens, idx, options, env, self) {\n  return `</span>${defaultListItemCloseRenderer(tokens, idx, options, env, self)}`;\n};\n\nconsole.log(md.render(\"- Hello World\"));\n```\n\n----------------------------------------\n\nTITLE: Reusing Existing Rendering Rules in Markdown-it (JavaScript)\nDESCRIPTION: This snippet demonstrates how to reuse an existing rendering rule while modifying its behavior. It saves a reference to the original rule and then calls it within the new rule after making custom changes. A proxy function is used as a default if the rule is initially undefined.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/docs/examples/renderer_rules.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst MarkdownIt = require('markdown-it');\nconst md = new MarkdownIt();\n\nconst proxy = (tokens, idx, options, env, self) => self.renderToken(tokens, idx, options);\nconst defaultBulletListOpenRenderer = md.renderer.rules.bullet_list_open || proxy;\n\nmd.renderer.rules.bullet_list_open = function(tokens, idx, options, env, self) {\n   // Make your changes here ...\n   // ... then render it using the existing logic\n   return defaultBulletListOpenRenderer(tokens, idx, options, env, self)\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring linkifier options in markdown-it\nDESCRIPTION: This snippet demonstrates how to configure the `linkify-it` dependency to enable fuzzy IP address linking, which was disabled by default in version 4.2.0 due to potential conflicts with version number patterns. The `md.linkify.set({ fuzzyIP: true })` call reverts to the old behavior where links with IP hosts and without protocols are linkified.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/CHANGELOG.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nmd.linkify.set({ fuzzyIP: true })\n```\n\n----------------------------------------\n\nTITLE: HTML Block Indentation with Comment Markdown Example\nDESCRIPTION: Demonstrates how markdown-it handles indentation of HTML comments within a Markdown document. This example checks if the parser correctly handles different levels of indentation (up to three spaces) before an HTML comment. The input includes an indented HTML comment, and the output shows the rendered comment with indentation preserved when less than 4 spaces, otherwise a code block.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_43\n\nLANGUAGE: Markdown\nCODE:\n```\n  <!-- foo -->\n\n    <!-- foo -->\n.\n  <!-- foo -->\n<pre><code>&lt;!-- foo --&gt;\n</code></pre>\n```\n\n----------------------------------------\n\nTITLE: Syntax Highlighting with highlight.js\nDESCRIPTION: These snippets show how to integrate syntax highlighting into markdown-it using highlight.js. The `highlight` option is used to provide a custom highlighting function. The first example demonstrates basic highlighting, while the second provides full wrapper control for custom HTML structure.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/support/api_header.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport markdownit from 'markdown-it'\nimport hljs from 'highlight.js' // https://highlightjs.org\n\n// Actual default values\nconst md = markdownit({\n  highlight: function (str, lang) {\n    if (lang && hljs.getLanguage(lang)) {\n      try {\n        return hljs.highlight(str, { language: lang }).value;\n      } catch (__) {}\n    }\n\n    return ''; // use external default escaping\n  }\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport markdownit from 'markdown-it'\nimport hljs from 'highlight.js' // https://highlightjs.org\n\n// Actual default values\nconst md = markdownit({\n  highlight: function (str, lang) {\n    if (lang && hljs.getLanguage(lang)) {\n      try {\n        return '<pre><code class=\"hljs\">' +\n               hljs.highlight(str, { language: lang, ignoreIllegals: true }).value +\n               '</code></pre>';\n      } catch (__) {}\n    }\n\n    return '<pre><code class=\"hljs\">' + md.utils.escapeHtml(str) + '</code></pre>';\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: HTML Table Structure (Variant)\nDESCRIPTION: This HTML snippet defines another table structure, similar to the previous one, with slightly different formatting. It also tests Markdown-it's rendering of tables.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/benchmark/samples/block-html.md#_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<table>\n\n  <tr>\n\n    <td>\n\n      test\n\n    </td>\n\n  </tr>\n\n</table>\n```\n\n----------------------------------------\n\nTITLE: Rendering Nested Image Syntax\nDESCRIPTION: This example clarifies how nested image syntax is handled.  `![foo ![bar](/url)](/url2)` results in `<p><img src=\"/url2\" alt=\"foo bar\" /></p>`. The inner image tag is treated as part of the alt text of the outer image tag, and is not rendered as an image itself.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_256\n\nLANGUAGE: markdown\nCODE:\n```\n![foo ![bar](/url)](/url2)\n.\n<p><img src=\"/url2\" alt=\"foo bar\" /></p>\n```\n\n----------------------------------------\n\nTITLE: Adding a CSS Class to a Token (JavaScript)\nDESCRIPTION: This example adds the CSS class \"lorem_ipsum\" to every `<ul>` element by modifying the `bullet_list_open` rule. It uses the `attrJoin` method on the token to add or update the `class` attribute without overwriting existing classes.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/docs/examples/renderer_rules.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst MarkdownIt = require('markdown-it');\nconst md = new MarkdownIt();\n\nconst proxy = (tokens, idx, options, env, self) => self.renderToken(tokens, idx, options);\nconst defaultBulletListOpenRenderer = md.renderer.rules.bullet_list_open || proxy;\n\nmd.renderer.rules.bullet_list_open = function(tokens, idx, options, env, self) {\n   // Make your changes here ...\n   tokens[idx].attrJoin(\"class\", \"lorem_ipsum\")\n   // ... then render it using the existing logic\n   return defaultBulletListOpenRenderer(tokens, idx, options, env, self)\n};\n```\n\n----------------------------------------\n\nTITLE: Syntax Highlighting with highlight.js\nDESCRIPTION: This code shows how to integrate syntax highlighting with markdown-it using highlight.js. The `highlight` option is set to a function that attempts to highlight code blocks based on the specified language. If no language is specified or highlighting fails, it returns an empty string.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/benchmark/samples/README.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar hljs = require('highlight.js') // https://highlightjs.org/\n\n// Actual default values\nvar md = require('markdown-it')({\n  highlight: function (str, lang) {\n    if (lang && hljs.getLanguage(lang)) {\n      try {\n        return hljs.highlight(str, { language: lang }).value;\n      } catch (__) {}\n    }\n\n    try {\n      return hljs.highlightAuto(str).value;\n    } catch (__) {}\n\n    return ''; // use external default escaping\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Markdown - Simple Example (Node.js/Browser)\nDESCRIPTION: This example demonstrates how to use markdown-it to render a simple Markdown string into HTML.  It shows both the Node.js (CJS & ESM) and browser (UMD) usage patterns. It initializes the markdown-it parser and then uses the `render` method to convert Markdown to HTML.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/README.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n// node.js\n// can use `require('markdown-it')` for CJS\nimport markdownit from 'markdown-it'\nconst md = markdownit()\nconst result = md.render('# markdown-it rulezz!');\n\n// browser with UMD build, added to \"window\" on script load\n// Note, there is no dash in \"markdownit\".\nconst md = window.markdownit();\nconst result = md.render('# markdown-it rulezz!');\n```\n\n----------------------------------------\n\nTITLE: Testing the Custom Rendering Rule (JavaScript)\nDESCRIPTION: This code combines the custom rendering rule with the Markdown-it instance and renders a simple Markdown list. The output shows that the `<ul>` element now has the added CSS class \"lorem_ipsum\".\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/docs/examples/renderer_rules.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst MarkdownIt = require('markdown-it');\nconst md = new MarkdownIt();\n\nconst proxy = (tokens, idx, options, env, self) => self.renderToken(tokens, idx, options);\nconst defaultBulletListOpenRenderer = md.renderer.rules.bullet_list_open || proxy;\n\nmd.renderer.rules.bullet_list_open = function(tokens, idx, options, env, self) {\n   // Make your changes here ...\n   tokens[idx].attrJoin(\"class\", \"lorem_ipsum\");\n   // ... then render it using the existing logic\n   return defaultBulletListOpenRenderer(tokens, idx, options, env, self)\n};\n\nconsole.log(md.render(\"- Hello World\"));\n```\n\n----------------------------------------\n\nTITLE: Markdown List Item with Indented Code\nDESCRIPTION: This code shows a common pattern where indented code follows a list item. The traditional four-space rule would require the code to be indented six spaces after the list marker, which could break existing markdown that assumes eight spaces.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_60\n\nLANGUAGE: markdown\nCODE:\n```\n1.  foo\n\n        indented code\n```\n\n----------------------------------------\n\nTITLE: Add target=\"_blank\" to Links with markdown-it-for-inline (JavaScript)\nDESCRIPTION: This snippet showcases how to use the `markdown-it-for-inline` plugin to add the `target=\"_blank\"` attribute to all links. It initializes markdown-it with the plugin and configures it to target `link_open` tokens, setting the `target` attribute to `_blank` during the inline processing stage.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/docs/architecture.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar iterator = require('markdown-it-for-inline');\n\nvar md = require('markdown-it')()\n            .use(iterator, 'url_new_win', 'link_open', function (tokens, idx) {\n              tokens[idx].attrSet('target', '_blank');\n            });\n```\n\n----------------------------------------\n\nTITLE: Enabling and Disabling Rules in markdown-it\nDESCRIPTION: This snippet demonstrates how to manage rules in markdown-it using the `enable` and `disable` methods. Rules can be enabled or disabled individually, or in groups. The `enable` method can also accept a preset name to enable a set of predefined rules.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/benchmark/samples/README.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Activate/deactivate rules, with curring\nvar md = require('markdown-it')()\n            .disable([ 'link', 'image' ])\n            .enable([ 'link' ])\n            .enable('image');\n\n// Enable everything\nmd = require('markdown-it')('full', {\n  html: true,\n  linkify: true,\n  typographer: true,\n});\n```\n\n----------------------------------------\n\nTITLE: HTML Block Followed by Markdown Markdown Example\nDESCRIPTION: Demonstrates that a following blank line is needed after an HTML block, except for blocks of types 1-5, to properly separate the block from proceeding Markdown. The input has a div block followed by italicized markdown, and the expected result shows the italicized text is rendered as plain text.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_46\n\nLANGUAGE: Markdown\nCODE:\n```\n<div>\nbar\n</div>\n*foo*\n.\n<div>\nbar\n</div>\n*foo*\n```\n\n----------------------------------------\n\nTITLE: Rendering Image with Link in Description\nDESCRIPTION: This example demonstrates an image with a link within its description. `![foo [bar](/url)](/url2)` is rendered as `<p><img src=\"/url2\" alt=\"foo bar\" /></p>`.  The inline link inside the alt text is parsed, but only its plain text content is used for the image's alt attribute.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_257\n\nLANGUAGE: markdown\nCODE:\n```\n![foo [bar](/url)](/url2)\n.\n<p><img src=\"/url2\" alt=\"foo bar\" /></p>\n```\n\n----------------------------------------\n\nTITLE: HTML Block with Comment Markdown Example\nDESCRIPTION: Demonstrates how markdown-it handles HTML comments within Markdown documents. This example verifies that the parser correctly identifies and preserves HTML comments without interpreting their content as Markdown. The input shows an HTML comment and italicized text, and the output shows the rendered comment and paragraph with italicized text.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_37\n\nLANGUAGE: Markdown\nCODE:\n```\n<!-- foo -->*bar*\n*baz*\n.\n<!-- foo -->*bar*\n<p><em>baz</em></p>\n```\n\n----------------------------------------\n\nTITLE: HTML Block with List and Div Example\nDESCRIPTION: Demonstrates how markdown-it handles HTML blocks containing lists and div tags.  This example verifies the parser's ability to handle divs inside a list and preserve the correct list structure. The input shows a list item containing a div, and the expected output is the rendered HTML list.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_35\n\nLANGUAGE: Markdown\nCODE:\n```\n- <div>\n- foo\n.\n<ul>\n<li>\n<div>\n</li>\n<li>foo</li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: HTML Block Type 7 Not Interrupting Paragraph Markdown Example\nDESCRIPTION: Demonstrates that HTML blocks of type 7 (e.g., `<a>`) cannot interrupt a paragraph in markdown-it. The example shows how text followed by an HTML block of type 7 is treated as a single paragraph. The input shows text immediately followed by an `<a>` tag, and the output shows the entire block rendered as one paragraph.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_47\n\nLANGUAGE: Markdown\nCODE:\n```\nFoo\n<a href=\"bar\">\nbaz\n.\n<p>Foo\n<a href=\"bar\">\nbaz</p>\n```\n\n----------------------------------------\n\nTITLE: Rendering Image with Reference Link and Emphasis\nDESCRIPTION: This snippet illustrates rendering an image with emphasis in its reference link. `![foo *bar*][]\n\n[*foo* bar]: /url \"title\"` becomes `<p><img src=\"/url\" alt=\"foo bar\" title=\"title\" /></p>`. The emphasis within the reference label affects the alt text.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_258\n\nLANGUAGE: markdown\nCODE:\n```\n![foo *bar*][]\n\n[*foo* bar]: /url \"title\"\n.\n<p><img src=\"/url\" alt=\"foo bar\" title=\"title\" /></p>\n```\n\n----------------------------------------\n\nTITLE: Inline Link - Autolink Precedence - Markdown\nDESCRIPTION: Demonstrates the precedence of autolinks over link grouping.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_208\n\nLANGUAGE: markdown\nCODE:\n```\n[foo<https://example.com/?search=](uri)>\n```\n\nLANGUAGE: html\nCODE:\n```\n<p>[foo<a href=\"https://example.com/?search=%5D(uri)\">https://example.com/?search=](uri)</a></p>\n```\n\n----------------------------------------\n\nTITLE: Rendering Image with Reference Link\nDESCRIPTION: This snippet shows how an image with a reference link is rendered. The markdown `![foo *bar*]\n\n[foo *bar*]: train.jpg \"train & tracks\"` is converted to `<p><img src=\"train.jpg\" alt=\"foo bar\" title=\"train &amp; tracks\" /></p>`. The image source and title are resolved from the reference link.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_255\n\nLANGUAGE: markdown\nCODE:\n```\n![foo *bar*]\n\n[foo *bar*]: train.jpg \"train & tracks\"\n.\n<p><img src=\"train.jpg\" alt=\"foo bar\" title=\"train &amp; tracks\" /></p>\n```\n\n----------------------------------------\n\nTITLE: Rendering URI Autolink with Custom Scheme\nDESCRIPTION: This example demonstrates rendering a URI autolink with a custom scheme. `<irc://foo.bar:2233/baz>` becomes `<p><a href=\"irc://foo.bar:2233/baz\">irc://foo.bar:2233/baz</a></p>`. Custom schemes are correctly recognized as valid autolinks.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_278\n\nLANGUAGE: markdown\nCODE:\n```\n<irc://foo.bar:2233/baz>\n.\n<p><a href=\"irc://foo.bar:2233/baz\">irc://foo.bar:2233/baz</a></p>\n```\n\n----------------------------------------\n\nTITLE: Markdown List Example\nDESCRIPTION: This Markdown example mirrors the AsciiDoc example, demonstrating equivalent list structures and indentation for code blocks.  It showcases Markdown's readability, especially in nested lists.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n1.  List item one.\n\n    List item one continued with a second paragraph followed by an\n    Indented block.\n\n        $ ls *.sh\n        $ mv *.sh ~/tmp\n\n    List item continued with a third paragraph.\n\n2.  List item two continued with an open block.\n\n    This paragraph is part of the preceding list item.\n\n    1. This list is nested and does not require explicit item continuation.\n\n       This paragraph is part of the preceding list item.\n\n    2. List item b.\n\n    This paragraph belongs to item two of the outer list.\n```\n\n----------------------------------------\n\nTITLE: HTML Block with Processing Instruction Markdown Example\nDESCRIPTION: Demonstrates how markdown-it handles processing instructions within a Markdown document. This example checks if the parser correctly identifies and preserves processing instructions (e.g., `<?php ?>`). The input shows a PHP processing instruction followed by text, and the expected output is the rendered processing instruction and paragraph.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_40\n\nLANGUAGE: Markdown\nCODE:\n```\n<?php\n\n  echo '>';\n\n?>\nokay\n.\n<?php\n\n  echo '>';\n\n?>\n<p>okay</p>\n```\n\n----------------------------------------\n\nTITLE: HTML Block Without Blank Lines and Markdown Markdown Example\nDESCRIPTION: Demonstrates how markdown-it handles Markdown content directly inside HTML blocks without blank lines. It showcases how Markdown content is treated literally if not separated by blank lines. The input shows a div with Markdown content immediately inside, and the output shows the Markdown as literal text within the HTML block.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_49\n\nLANGUAGE: Markdown\nCODE:\n```\n<div>\n*Emphasized* text.\n</div>\n.\n<div>\n*Emphasized* text.\n</div>\n```\n\n----------------------------------------\n\nTITLE: Rendering Inline Image with Title\nDESCRIPTION: This example demonstrates how an inline image with a title attribute is rendered to HTML. The markdown `![foo](/url \"title\")` is transformed into `<p><img src=\"/url\" alt=\"foo\" title=\"title\" /></p>`. The `alt` attribute is derived from the image description and the `title` attribute comes from the title string.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_254\n\nLANGUAGE: markdown\nCODE:\n```\n![foo](/url \"title\")\n.\n<p><img src=\"/url\" alt=\"foo\" title=\"title\" /></p>\n```\n\n----------------------------------------\n\nTITLE: HTML Block with Blank Lines and Markdown Markdown Example\nDESCRIPTION: Demonstrates how markdown-it handles blank lines within HTML blocks when Markdown content is included. It showcases the interaction between HTML and Markdown when separated by blank lines within a div tag. The input shows a div with blank lines separating Markdown, and the output shows the Markdown correctly parsed within the HTML block.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_48\n\nLANGUAGE: Markdown\nCODE:\n```\n<div>\n\n*Emphasized* text.\n\n</div>\n.\n<div>\n<p><em>Emphasized</em> text.</p>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Rendering Image with Collapsed Reference and Emphasis\nDESCRIPTION: This example demonstrates an image with a collapsed reference and emphasis. `![*foo* bar][]\n\n[*foo* bar]: /url \"title\"` renders as `<p><img src=\"/url\" alt=\"foo bar\" title=\"title\" /></p>`. The alt text reflects the emphasis in the label.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_267\n\nLANGUAGE: markdown\nCODE:\n```\n![*foo* bar][]\n\n[*foo* bar]: /url \"title\"\n.\n<p><img src=\"/url\" alt=\"foo bar\" title=\"title\" /></p>\n```\n\n----------------------------------------\n\nTITLE: HTML Block Interrupting Paragraph Markdown Example\nDESCRIPTION: Demonstrates how an HTML block of types 1-6 can interrupt a paragraph in markdown-it. The example illustrates that a blank line is not required before the HTML block to interrupt the paragraph. The input shows a paragraph followed immediately by a div block, and the output shows the separate paragraph and div elements.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_45\n\nLANGUAGE: Markdown\nCODE:\n```\nFoo\n<div>\nbar\n</div>\n.\n<p>Foo</p>\n<div>\nbar\n</div>\n```\n\n----------------------------------------\n\nTITLE: Loading Plugins into markdown-it\nDESCRIPTION: This example demonstrates how to load plugins into a markdown-it instance using the `use` method. Plugins can extend the functionality of the parser with custom rules and features. The `use` method can accept multiple parameters, including options for the plugin.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/benchmark/samples/README.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar md = require('markdown-it')()\n            .use(plugin1)\n            .use(plugin2, opts, ...)\n            .use(plugin3);\n```\n\n----------------------------------------\n\nTITLE: Handling Unescaped Brackets in Link Labels\nDESCRIPTION: This example demonstrates how unescaped brackets in link labels are treated. `![[foo]]\n\n[[foo]]: /url \"title\"` becomes `<p>![[foo]]</p>\n<p>[[foo]]: /url &quot;title&quot;</p>`. The parser does not interpret the brackets as part of a valid image.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_272\n\nLANGUAGE: markdown\nCODE:\n```\n![[foo]]\n\n[[foo]]: /url \"title\"\n.\n<p>![[foo]]</p>\n<p>[[foo]]: /url &quot;title&quot;</p>\n```\n\n----------------------------------------\n\nTITLE: Creating a Markdown Table with Alignment\nDESCRIPTION: This snippet shows how to create a markdown table with different column alignments. It uses colons in the separator line to specify centered and right alignment. The table has four columns and two rows of data.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/benchmark/samples/block-tables.md#_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n| Header 1 | Header 2 | Header 3 | Header 4 |\n| :------: | -------: | :------- | -------- |\n| Cell 1   | Cell 2   | Cell 3   | Cell 4   |\n| Cell 5   | Cell 6   | Cell 7   | Cell 8   |\n```\n\n----------------------------------------\n\nTITLE: Escaping Exclamation Mark Before Link\nDESCRIPTION: This example explains escaping the exclamation mark before a link. `\\![foo]\n\n[foo]: /url \"title\"` becomes `<p>!<a href=\"/url\" title=\"title\">foo</a></p>`. Escaping the `!` prevents it from being treated as an image, and the `[foo]` is rendered as a link.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_275\n\nLANGUAGE: markdown\nCODE:\n```\n\\![foo]\n\n[foo]: /url \"title\"\n.\n<p>!<a href=\"/url\" title=\"title\">foo</a></p>\n```\n\n----------------------------------------\n\nTITLE: Markdown Table with Mixed Alignment and Formatting\nDESCRIPTION: This snippet showcases a markdown table with a mix of left, center, and right alignments. It also includes text formatting within a cell (italicized text). The table has four columns and two rows of data.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/benchmark/samples/block-tables.md#_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\nHeader 1|Header 2|Header 3|Header 4\n:-------|:------:|-------:|--------\nCell 1  |Cell 2  |Cell 3  |Cell 4\n*Cell 5*|Cell 6  |Cell 7  |Cell 8\n```\n\n----------------------------------------\n\nTITLE: Basic markdown-it Usage in Node.js\nDESCRIPTION: This snippet demonstrates basic usage of markdown-it in a Node.js environment. It requires the `markdown-it` module, creates a new instance, and renders a Markdown string to HTML.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/benchmark/samples/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// node.js, \"classic\" way:\nvar MarkdownIt = require('markdown-it'),\n    md = new MarkdownIt();\nvar result = md.render('# markdown-it rulezz!');\n\n// node.js, the same, but with sugar:\nvar md = require('markdown-it')();\nvar result = md.render('# markdown-it rulezz!');\n\n// browser without AMD, added to \"window\" on script load\n// Note, there are no dash.\nvar md = window.markdownit();\nvar result = md.render('# markdown-it rulezz!');\n```\n\n----------------------------------------\n\nTITLE: HTML Output for List with Intervening Paragraphs (Correct)\nDESCRIPTION: This demonstrates the desired, and arguably more intuitive, HTML output for the initial Markdown snippet, where the paragraph 'bar' and the list item 'baz' are correctly nested within the first list item 'foo'.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_54\n\nLANGUAGE: html\nCODE:\n```\n<ul>\n<li>\n<p>foo</p>\n<p>bar</p>\n<ul>\n<li>baz</li>\n</ul>\n</li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Markdown Inline Structure Example\nDESCRIPTION: This is an example of the document tree after the inline structure phase. It shows how the raw string contents of paragraphs have been parsed into inline elements like strings and emphasis.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_304\n\nLANGUAGE: tree\nCODE:\n```\ndocument\n  block_quote\n    paragraph\n      str \"Lorem ipsum dolor\"\n      softbreak\n      str \"sit amet.\"\n    list (type=bullet tight=true bullet_char=-)\n      list_item\n        paragraph\n          str \"Qui \"\n          emph\n            str \"quodsi iracundia\"\n      list_item\n        paragraph\n          str \"aliquando id\"\n```\n\n----------------------------------------\n\nTITLE: Parsing Collapsed Reference Link with Space\nDESCRIPTION: This example shows that there must be no spaces between the first set of brackets and the second set `[]` of the collapsed reference link. `[foo] []` will not be parsed as a valid link.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_238\n\nLANGUAGE: markdown\nCODE:\n```\n[foo] \n[]\n\n[foo]: /url \"title\"\n.\n<p><a href=\"/url\" title=\"title\">foo</a>\n[]</p>\n```\n\n----------------------------------------\n\nTITLE: Parsing Multiple Reference Links - Case 3\nDESCRIPTION: This example shows multiple reference links in a sequence. Because `[bar]` is followed by `[baz]`, then `[foo]` will not be parsed as shortcut reference link. In this scenario only `[baz]` is defined and parsed correctly.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_253\n\nLANGUAGE: markdown\nCODE:\n```\n[foo][bar][baz]\n\n[baz]: /url1\n[foo]: /url2\n.\n<p>[foo]<a href=\"/url1\">bar</a></p>\n```\n\n----------------------------------------\n\nTITLE: Rendering Hard Line Breaks\nDESCRIPTION: Explains how Markdown-it renders hard line breaks using two or more spaces or a backslash at the end of a line. It demonstrates how leading spaces on the next line are ignored and shows examples of hard line breaks within emphasis, links, and other constructs.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_296\n\nLANGUAGE: HTML\nCODE:\n```\nfoo  \nbaz\n.\n<p>foo<br />\nbaz</p>\n```\n\nLANGUAGE: HTML\nCODE:\n```\nfoo\\\nbaz\n.\n<p>foo<br />\nbaz</p>\n```\n\nLANGUAGE: HTML\nCODE:\n```\nfoo       \nbaz\n.\n<p>foo<br />\nbaz</p>\n```\n\nLANGUAGE: HTML\nCODE:\n```\nfoo  \n     bar\n.\n<p>foo<br />\nbar</p>\n```\n\nLANGUAGE: HTML\nCODE:\n```\nfoo\\\n     bar\n.\n<p>foo<br />\nbar</p>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n*foo  \nbar*\n.\n<p><em>foo<br />\nbar</em></p>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n*foo\\\nbar*\n.\n<p><em>foo<br />\nbar</em></p>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n`code  \nspan`\n.\n<p><code>code   span</code></p>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n`code\\\nspan`\n.\n<p><code>code\\ span</code></p>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<a href=\"foo  \nbar\">\n.\n<p><a href=\"foo  \nbar\"></p>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<a href=\"foo\\\nbar\">\n.\n<p><a href=\"foo\\\nbar\"></p>\n```\n\nLANGUAGE: HTML\nCODE:\n```\nfoo\\\n.\n<p>foo\\</p>\n```\n\nLANGUAGE: HTML\nCODE:\n```\nfoo  \n.\n<p>foo</p>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n### foo\\\n.\n<h3>foo\\</h3>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n### foo  \n.\n<h3>foo</h3>\n```\n\n----------------------------------------\n\nTITLE: Parsing Nested Brackets in Reference Link\nDESCRIPTION: This example shows how nested brackets are handled in reference links. The parser interprets `[[[foo]]]` as plain text since there's no matching definition available for a reference without any closing bracket.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_230\n\nLANGUAGE: markdown\nCODE:\n```\n[[[foo]]]\n\n[[[foo]]]: /url\n.\n<p>[[[foo]]]</p>\n<p>[[[foo]]]: /url</p>\n```\n\n----------------------------------------\n\nTITLE: Rendering Image with Spaced Attributes\nDESCRIPTION: This example demonstrates handling of spaced attributes in image syntax. `My ![foo bar](/path/to/train.jpg  \"title\"   )` becomes `<p>My <img src=\"/path/to/train.jpg\" alt=\"foo bar\" title=\"title\" /></p>`. The parser correctly extracts attributes even with extra spaces.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_261\n\nLANGUAGE: markdown\nCODE:\n```\nMy ![foo bar](/path/to/train.jpg  \"title\"   )\n.\n<p>My <img src=\"/path/to/train.jpg\" alt=\"foo bar\" title=\"title\" /></p>\n```\n\n----------------------------------------\n\nTITLE: Benchmarking markdown-it with benchmark.mjs\nDESCRIPTION: This Bash command executes the benchmark script `benchmark/benchmark.mjs` to assess the performance of markdown-it.  The output shows the operations per second (ops/sec) for different Markdown parsers, including markdown-it, commonmark-reference, and marked.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/benchmark/samples/README.md#_snippet_7\n\nLANGUAGE: Bash\nCODE:\n```\n$ benchmark/benchmark.mjs spec\n```\n\n----------------------------------------\n\nTITLE: Rendering Inline Markdown\nDESCRIPTION: This snippet demonstrates how to render inline Markdown, without the paragraph wrapping that `render()` provides, using `renderInline()`. It imports the `markdownit` library and calls `renderInline()` with a Markdown string to render.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/README.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport markdownit from 'markdown-it'\nconst md = markdownit()\nconst result = md.renderInline('__markdown-it__ rulezz!');\n```\n\n----------------------------------------\n\nTITLE: Rendering Email Autolink with Special Characters\nDESCRIPTION: This example shows rendering an email autolink with special characters. `<foo+special@Bar.baz-bar0.com>` becomes `<p><a href=\"mailto:foo+special@Bar.baz-bar0.com\">foo+special@Bar.baz-bar0.com</a></p>`. The parser correctly handles characters like `+` in the email address.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_287\n\nLANGUAGE: markdown\nCODE:\n```\n<foo+special@Bar.baz-bar0.com>\n.\n<p><a href=\"mailto:foo+special@Bar.baz-bar0.com\">foo+special@Bar.baz-bar0.com</a></p>\n```\n\n----------------------------------------\n\nTITLE: Managing Parser Rules\nDESCRIPTION: This snippet demonstrates how to manage parser rules in markdown-it using the `enable` and `disable` methods. It shows how to enable and disable specific rules to customize the parsing behavior.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/README.md#_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nimport markdownit from 'markdown-it'\n\n// Activate/deactivate rules, with currying\nconst md = markdownit()\n  .disable(['link', 'image'])\n  .enable(['link'])\n  .enable('image');\n\n// Enable everything\nconst md = markdownit({\n  html: true,\n  linkify: true,\n  typographer: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Final Markdown Block Structure Tree\nDESCRIPTION: This is the final document tree after parsing all the input lines. It includes a blockquote containing a paragraph and a list with two list items, each containing a paragraph.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_303\n\nLANGUAGE: tree\nCODE:\n```\n-> document\n  -> block_quote\n       paragraph\n         \"Lorem ipsum dolor\\nsit amet.\"\n    -> list (type=bullet tight=true bullet_char=-)\n         list_item\n           paragraph\n             \"Qui *quodsi iracundia*\"\n      -> list_item\n        -> paragraph\n             \"aliquando id\"\n```\n\n----------------------------------------\n\nTITLE: Rendering Image with Collapsed Reference\nDESCRIPTION: This example renders an image with a collapsed reference. `![foo][]\n\n[foo]: /url \"title\"` renders as `<p><img src=\"/url\" alt=\"foo\" title=\"title\" /></p>`. The image URL and title are taken from the collapsed reference.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_266\n\nLANGUAGE: markdown\nCODE:\n```\n![foo][]\n\n[foo]: /url \"title\"\n.\n<p><img src=\"/url\" alt=\"foo\" title=\"title\" /></p>\n```\n\n----------------------------------------\n\nTITLE: Configuring Linkify-it\nDESCRIPTION: This example shows how to configure the linkify-it library, which is used by markdown-it when the `linkify` option is set to `true`.  It accesses the `linkify` instance through `md.linkify` and disables the conversion of emails to links.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/README.md#_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nmd.linkify.set({ fuzzyEmail: false });  // disables converting email to link\n```\n\n----------------------------------------\n\nTITLE: Parsing Multiple Reference Links - Case 1\nDESCRIPTION: This example shows multiple reference links in a sequence, where `[foo][bar]` is parsed as a reference and `[baz]` is defined. `[foo]` will be rendered as plain text because no ref definition available for it.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_251\n\nLANGUAGE: markdown\nCODE:\n```\n[foo][bar][baz]\n\n[baz]: /url\n.\n<p>[foo]<a href=\"/url\">bar</a></p>\n```\n\n----------------------------------------\n\nTITLE: Running Benchmark\nDESCRIPTION: This snippet demonstrates how to run the benchmark suite for markdown-it.  It executes the `benchmark-deps` script, then executes the benchmark script. Note that the output shown is example output and will vary based on system configuration.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/README.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpm run benchmark-deps\nbenchmark/benchmark.mjs readme\n```\n\n----------------------------------------\n\nTITLE: Configuring Linkify-it\nDESCRIPTION: This snippet shows how to configure the linkify-it library, which is used by markdown-it when the `linkify` option is enabled. This allows customization of link detection and conversion, such as disabling email address linking.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/support/api_header.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nmd.linkify.set({ fuzzyEmail: false });  // disables converting email to link\n```\n\n----------------------------------------\n\nTITLE: Indented HTML Table Block Markdown Example\nDESCRIPTION: Demonstrates how markdown-it handles an indented HTML table which will be treated as a code block. The input is an HTML table with indented tags, and the expected output is the HTML as code.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_51\n\nLANGUAGE: Markdown\nCODE:\n```\n<table>\n\n  <tr>\n\n    <td>\n      Hi\n    </td>\n\n  </tr>\n\n</table>\n.\n<table>\n  <tr>\n<pre><code>&lt;td&gt;\n  Hi\n&lt;/td&gt;\n</code></pre>\n  </tr>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Rendering URI Autolink with Made-Up Scheme\nDESCRIPTION: This example renders a URI autolink with a made-up scheme. `<made-up-scheme://foo,bar>` becomes `<p><a href=\"made-up-scheme://foo,bar\">made-up-scheme://foo,bar</a></p>`. The parser does not validate the scheme against a registry.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_281\n\nLANGUAGE: markdown\nCODE:\n```\n<made-up-scheme://foo,bar>\n.\n<p><a href=\"made-up-scheme://foo,bar\">made-up-scheme://foo,bar</a></p>\n```\n\n----------------------------------------\n\nTITLE: ATX Headings: Simple Examples\nDESCRIPTION: Demonstrates basic ATX heading syntax with levels 1 through 6. Each heading level is represented by a different number of '#' characters. The output shows the corresponding HTML heading tags (<h1> to <h6>).\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_16\n\nLANGUAGE: markdown\nCODE:\n```\n# foo\n## foo\n### foo\n#### foo\n##### foo\n###### foo\n```\n\nLANGUAGE: html\nCODE:\n```\n<h1>foo</h1>\n<h2>foo</h2>\n<h3>foo</h3>\n<h4>foo</h4>\n<h5>foo</h5>\n<h6>foo</h6>\n```\n\n----------------------------------------\n\nTITLE: Rendering URI Autolink with Non-Standard Scheme Characters\nDESCRIPTION: This example shows rendering a URI autolink with non-standard scheme characters. `<a+b+c:d>` becomes `<p><a href=\"a+b+c:d\">a+b+c:d</a></p>`. The parser accepts `+`, `.`, and `-` characters in schemes.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_280\n\nLANGUAGE: markdown\nCODE:\n```\n<a+b+c:d>\n.\n<p><a href=\"a+b+c:d\">a+b+c:d</a></p>\n```\n\n----------------------------------------\n\nTITLE: Markdown Ambiguity Example: Block vs Inline\nDESCRIPTION: This example explores the precedence between block-level elements (like list items) and inline elements (like code spans).  It shows how a code span might interfere with the interpretation of list structure.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n- `a long code span can contain a hyphen like this\n  - and it can screw things up`\n```\n\n----------------------------------------\n\nTITLE: Rendering URI Autolink with Query Parameters\nDESCRIPTION: This example showcases rendering a URI autolink containing query parameters. `<https://foo.bar.baz/test?q=hello&id=22&boolean>` becomes `<p><a href=\"https://foo.bar.baz/test?q=hello&amp;id=22&amp;boolean\">https://foo.bar.baz/test?q=hello&amp;id=22&amp;boolean</a></p>`.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_277\n\nLANGUAGE: markdown\nCODE:\n```\n<https://foo.bar.baz/test?q=hello&id=22&boolean>\n.\n<p><a href=\"https://foo.bar.baz/test?q=hello&amp;id=22&amp;boolean\">https://foo.bar.baz/test?q=hello&amp;id=22&amp;boolean</a></p>\n```\n\n----------------------------------------\n\nTITLE: HTML Block with Declaration Markdown Example\nDESCRIPTION: Demonstrates how markdown-it handles HTML declarations within a Markdown document. This example verifies the correct parsing of declarations such as `<!DOCTYPE html>`. The input is an HTML declaration, and the expected output is the rendered HTML declaration.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_41\n\nLANGUAGE: Markdown\nCODE:\n```\n<!DOCTYPE html>\n.\n<!DOCTYPE html>\n```\n\n----------------------------------------\n\nTITLE: Rendering Image with Shortcut Reference and Emphasis\nDESCRIPTION: This example demonstrates an image with a shortcut reference and emphasis. `![*foo* bar]\n\n[*foo* bar]: /url \"title\"` results in `<p><img src=\"/url\" alt=\"foo bar\" title=\"title\" /></p>`. The alt text includes the emphasized text.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_271\n\nLANGUAGE: markdown\nCODE:\n```\n![*foo* bar]\n\n[*foo* bar]: /url \"title\"\n.\n<p><img src=\"/url\" alt=\"foo bar\" title=\"title\" /></p>\n```\n\n----------------------------------------\n\nTITLE: Rendering Image with Shortcut Reference\nDESCRIPTION: This snippet renders an image using a shortcut reference link. `![foo]\n\n[foo]: /url \"title\"` becomes `<p><img src=\"/url\" alt=\"foo\" title=\"title\" /></p>`. The shortcut reference is correctly resolved.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_270\n\nLANGUAGE: markdown\nCODE:\n```\n![foo]\n\n[foo]: /url \"title\"\n.\n<p><img src=\"/url\" alt=\"foo\" title=\"title\" /></p>\n```\n\n----------------------------------------\n\nTITLE: CDATA Section\nDESCRIPTION: This snippet defines a CDATA section. CDATA sections are used to escape blocks of text containing characters that would otherwise be interpreted as markup. It tests if Markdown-it correctly ignores the content within the CDATA section.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/benchmark/samples/block-html.md#_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<![CDATA[\n  [[[[[[[[[[[... *cdata section - this should not be parsed* ...]]]]]]]]]]]\n]]>\n```\n\n----------------------------------------\n\nTITLE: Loading markdown-it Plugins\nDESCRIPTION: This snippet demonstrates how to load plugins into a markdown-it instance. Plugins extend the functionality of markdown-it by adding new rules and syntax extensions. Plugins are loaded using the `.use()` method.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/support/api_header.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport markdownit from 'markdown-it'\n\nconst md = markdownit\n  .use(plugin1)\n  .use(plugin2, opts, ...)\n  .use(plugin3);\n```\n\n----------------------------------------\n\nTITLE: Rendering URI Autolink with Uppercase Scheme\nDESCRIPTION: This snippet renders a URI autolink with an uppercase scheme. `<MAILTO:FOO@BAR.BAZ>` becomes `<p><a href=\"MAILTO:FOO@BAR.BAZ\">MAILTO:FOO@BAR.BAZ</a></p>`. Autolinks are case-insensitive regarding the scheme.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_279\n\nLANGUAGE: markdown\nCODE:\n```\n<MAILTO:FOO@BAR.BAZ>\n.\n<p><a href=\"MAILTO:FOO@BAR.BAZ\">MAILTO:FOO@BAR.BAZ</a></p>\n```\n\n----------------------------------------\n\nTITLE: Rendering Image with Reference\nDESCRIPTION: This example renders an image using a reference link. `![foo][bar]\n\n[bar]: /url` results in `<p><img src=\"/url\" alt=\"foo\" /></p>`. The image URL is extracted from the reference.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_264\n\nLANGUAGE: markdown\nCODE:\n```\n![foo][bar]\n\n[bar]: /url\n.\n<p><img src=\"/url\" alt=\"foo\" /></p>\n```\n\n----------------------------------------\n\nTITLE: HTML List Example without Wrapper\nDESCRIPTION: This example shows an HTML list without a wrapper element around the text content inside the <li>. This can lead to improper line wrapping when CSS styling with pseudo-classes is applied.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/docs/examples/renderer_rules.md#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<ul>\n  <li>Hello World</li>\n<ul>\n```\n\n----------------------------------------\n\nTITLE: Rendering Inline Image with Source\nDESCRIPTION: This example shows a simple inline image with a source URL. `![foo](train.jpg)` is rendered as `<p><img src=\"train.jpg\" alt=\"foo\" /></p>`. The `alt` attribute is derived from the image description.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_260\n\nLANGUAGE: markdown\nCODE:\n```\n![foo](train.jpg)\n.\n<p><img src=\"train.jpg\" alt=\"foo\" /></p>\n```\n\n----------------------------------------\n\nTITLE: Loading Plugins into markdown-it\nDESCRIPTION: This example demonstrates how to load plugins into markdown-it using the `use` method. It shows how to chain multiple `use` calls and pass options to the plugins.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/README.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport markdownit from 'markdown-it'\n\nconst md = markdownit\n  .use(plugin1)\n  .use(plugin2, opts, ...)\n  .use(plugin3);\n```\n\n----------------------------------------\n\nTITLE: Rendering URI Autolink with Hostname and Port\nDESCRIPTION: This example shows rendering a URI autolink with a hostname and port. `<localhost:5001/foo>` becomes `<p><a href=\"localhost:5001/foo\">localhost:5001/foo</a></p>`. The parser treats the hostname and port as a valid URI.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_283\n\nLANGUAGE: markdown\nCODE:\n```\n<localhost:5001/foo>\n.\n<p><a href=\"localhost:5001/foo\">localhost:5001/foo</a></p>\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Markdown Table\nDESCRIPTION: This snippet demonstrates a basic markdown table with two columns. It shows the syntax for defining headers and separating them from the data rows. The table contains two rows of data.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/benchmark/samples/block-tables.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n| Heading 1 | Heading 2\n| --------- | ---------\n| Cell 1    | Cell 2\n| Cell 3    | Cell 4\n```\n\n----------------------------------------\n\nTITLE: Rendering Image with Case-Insensitive Reference Link\nDESCRIPTION: This example showcases how case-insensitive reference links are handled for images.  `![foo *bar*][foobar]\n\n[FOOBAR]: train.jpg \"train & tracks\"` becomes `<p><img src=\"train.jpg\" alt=\"foo bar\" title=\"train &amp; tracks\" /></p>`. The parser correctly matches the image to its reference, irrespective of case.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_259\n\nLANGUAGE: markdown\nCODE:\n```\n![foo *bar*][foobar]\n\n[FOOBAR]: train.jpg \"train & tracks\"\n.\n<p><img src=\"train.jpg\" alt=\"foo bar\" title=\"train &amp; tracks\" /></p>\n```\n\n----------------------------------------\n\nTITLE: HTML Output for Blockquote with List and Continuation Paragraph\nDESCRIPTION: This represents the HTML output of the previous snippet, with the 'two' being parsed as a continuation paragraph within the list item inside the blockquote, according to `Markdown.pl`.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_58\n\nLANGUAGE: html\nCODE:\n```\n<blockquote>\n<ul>\n<li>\n<p>one</p>\n<p>two</p>\n</li>\n</ul>\n</blockquote>\n```\n\n----------------------------------------\n\nTITLE: Rendering Image with Case-Insensitive Collapsed Reference\nDESCRIPTION: This snippet demonstrates rendering an image with a case-insensitive collapsed reference. `![Foo][]\n\n[foo]: /url \"title\"` becomes `<p><img src=\"/url\" alt=\"Foo\" title=\"title\" /></p>`.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_268\n\nLANGUAGE: markdown\nCODE:\n```\n![Foo][]\n\n[foo]: /url \"title\"\n.\n<p><img src=\"/url\" alt=\"Foo\" title=\"title\" /></p>\n```\n\n----------------------------------------\n\nTITLE: Precedence of Full Reference Links\nDESCRIPTION: This example shows full and collapsed references taking precedence over shortcut references. `[foo][bar]` is parsed as a full reference link, using the definition of `bar`.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_247\n\nLANGUAGE: markdown\nCODE:\n```\n[foo][bar]\n\n[foo]: /url1\n[bar]: /url2\n.\n<p><a href=\"/url2\">foo</a></p>\n```\n\n----------------------------------------\n\nTITLE: Parsing Shortcut Reference Link with Nested Brackets\nDESCRIPTION: This example shows nested brackets with shortcut reference links. The outer brackets are parsed literally and the inner part is a valid link.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_241\n\nLANGUAGE: markdown\nCODE:\n```\n[[*foo* bar]]\n\n[*foo* bar]: /url \"title\"\n.\n<p>[<a href=\"/url\" title=\"title\"><em>foo</em> bar</a>]</p>\n```\n\n----------------------------------------\n\nTITLE: Parsing Reference Link Ending with Asterisk\nDESCRIPTION: This example shows that a reference link ends with the first following closing bracket. `[foo*]` is treated as a reference link, not as emphasized text.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_246\n\nLANGUAGE: markdown\nCODE:\n```\n[foo*]: /url\n\n*[foo*]\n.\n<p>*<a href=\"/url\">foo*</a></p>\n```\n\n----------------------------------------\n\nTITLE: Rendering Image with Empty Alt Text\nDESCRIPTION: This example demonstrates rendering an image with empty alt text. `![](/url)` is rendered as `<p><img src=\"/url\" alt=\"\" /></p>`.  The `alt` attribute will be an empty string.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_263\n\nLANGUAGE: markdown\nCODE:\n```\n![](/url)\n.\n<p><img src=\"/url\" alt=\"\" /></p>\n```\n\n----------------------------------------\n\nTITLE: Parsing Multiple Reference Links - Case 2\nDESCRIPTION: This example shows multiple reference links in a sequence, where both `[bar]` and `[baz]` are defined. Therefore both are parsed as reference links.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_252\n\nLANGUAGE: markdown\nCODE:\n```\n[foo][bar][baz]\n\n[baz]: /url1\n[bar]: /url2\n.\n<p><a href=\"/url2\">foo</a><a href=\"/url1\">baz</a></p>\n```\n\n----------------------------------------\n\nTITLE: Markdown Ambiguity Example: Inline Precedence\nDESCRIPTION: This example questions the precedence between inline structures like code spans and links. Does the code span prevent the text from being recognized as a link?\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n[a backtick (`)](/url) and [another backtick (`)](/url).\n```\n\n----------------------------------------\n\nTITLE: Rendering URI Autolink with Relative Path\nDESCRIPTION: This snippet demonstrates rendering a URI autolink with a relative path. `<https://../>` becomes `<p><a href=\"https://../\">https://../</a></p>`. The parser does not resolve relative paths.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_282\n\nLANGUAGE: markdown\nCODE:\n```\n<https://../>\n.\n<p><a href=\"https://../\">https://../</a></p>\n```\n\n----------------------------------------\n\nTITLE: ATX Headings: Leading/Trailing Spaces\nDESCRIPTION: Shows that leading and trailing spaces or tabs around the heading content are ignored during parsing. The rendered heading will not include these extra spaces.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_21\n\nLANGUAGE: markdown\nCODE:\n```\n#                  foo                     \n```\n\nLANGUAGE: html\nCODE:\n```\n<h1>foo</h1>\n```\n\n----------------------------------------\n\nTITLE: Installing markdown-it with npm\nDESCRIPTION: This command installs the markdown-it package using npm, a package manager for Node.js. The `--save` flag adds markdown-it as a dependency to your project's `package.json` file.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/benchmark/samples/README.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nnpm install markdown-it --save\n```\n\n----------------------------------------\n\nTITLE: Running Spec Tests with Python\nDESCRIPTION: This Python command demonstrates how to run the `spec_tests.py` script to test a Markdown program against the CommonMark specification. It requires the spec.txt file and the path to the markdown program.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\npython test/spec_tests.py --spec spec.txt --program PROGRAM\n```\n\n----------------------------------------\n\nTITLE: Markdown Emphasis with Punctuation\nDESCRIPTION: Demonstrates emphasis generation when the opening delimiter is both left- and right-flanking but is preceded by punctuation. This shows a valid scenario for emphasis creation.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_75\n\nLANGUAGE: markdown\nCODE:\n```\nfoo-_(bar)_\n.\n<p>foo-<em>(bar)</em></p>\n```\n\n----------------------------------------\n\nTITLE: HTML Output of Token Class Modification\nDESCRIPTION: This shows the resulting HTML output when applying the token-based modification. Note the extra span tag. The prior example is recommended over this one.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/docs/examples/renderer_rules.md#_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<ul>\n  <li>\n    <span>Hello World<span>\n  </li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Markdown No Emphasis Due to Adjacent Characters with Underscores\nDESCRIPTION: Shows an example where emphasis is not applied because the underscore is preceded by an alphanumeric character and followed by punctuation. The underscores are treated as literal characters.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_70\n\nLANGUAGE: markdown\nCODE:\n```\na_\"foo\"_\n```\n\nLANGUAGE: html\nCODE:\n```\n<p>a_&quot;foo&quot;_</p>\n```\n\n----------------------------------------\n\nTITLE: Markdown Ambiguity Example: Multiple Reference Definitions\nDESCRIPTION: This example shows what should happen when the same reference link is defined multiple times within the document. Which definition takes precedence?\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_14\n\nLANGUAGE: markdown\nCODE:\n```\n[foo]: /url1\n[foo]: /url2\n\n[foo][]\n```\n\n----------------------------------------\n\nTITLE: Invalid Email Autolink - Missing Scheme\nDESCRIPTION: This example shows an invalid email autolink due to a missing scheme. `<foo.bar.baz>` becomes `<p>&lt;foo.bar.baz&gt;</p>`. The missing scheme prevents it from being recognized as an autolink.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_292\n\nLANGUAGE: markdown\nCODE:\n```\n<foo.bar.baz>\n.\n<p>&lt;foo.bar.baz&gt;</p>\n```\n\n----------------------------------------\n\nTITLE: Markdown No Emphasis Due to Adjacent Characters\nDESCRIPTION: Shows an example where emphasis is not applied because the asterisk is preceded by an alphanumeric character and followed by punctuation. The asterisks are treated as literal characters.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_63\n\nLANGUAGE: markdown\nCODE:\n```\na*\"foo\"*\n```\n\nLANGUAGE: html\nCODE:\n```\n<p>a*&quot;foo&quot;*</p>\n```\n\n----------------------------------------\n\nTITLE: Emphasis with interior delimiters\nDESCRIPTION: This snippet shows when the lengths of the interior closing and opening delimiter runs are *both* multiples of 3, they can match to create emphasis.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_126\n\nLANGUAGE: markdown\nCODE:\n```\nfoo***bar***baz\n```\n\nLANGUAGE: html\nCODE:\n```\n<p>foo<em><strong>bar</strong></em>baz</p>\n```\n\n----------------------------------------\n\nTITLE: ATX Headings: Inline Parsing\nDESCRIPTION: Illustrates that the content of an ATX heading is parsed as inline Markdown. This means that formatting such as emphasis and strong emphasis are recognized and rendered accordingly.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_20\n\nLANGUAGE: markdown\nCODE:\n```\n# foo *bar* \\*baz\\*\n```\n\nLANGUAGE: html\nCODE:\n```\n<h1>foo <em>bar</em> *baz*</h1>\n```\n\n----------------------------------------\n\nTITLE: ATX Headings: No Blank Lines Required\nDESCRIPTION: Shows that ATX headings do not need to be separated from surrounding content by blank lines. They can interrupt paragraphs and other block-level elements.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_30\n\nLANGUAGE: markdown\nCODE:\n```\n****\n## foo\n****\n```\n\nLANGUAGE: html\nCODE:\n```\n<hr />\n<h2>foo</h2>\n<hr />\n```\n\n----------------------------------------\n\nTITLE: Precedence of Collapsed Reference Links\nDESCRIPTION: This example shows that collapsed references take precedence over shortcut references. `[foo][]` is parsed as a collapsed reference link, using the definition of `foo`.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_248\n\nLANGUAGE: markdown\nCODE:\n```\n[foo][]\n\n[foo]: /url1\n.\n<p><a href=\"/url1\">foo</a></p>\n```\n\n----------------------------------------\n\nTITLE: Emphasis and Image (Asterisks)\nDESCRIPTION: Emphasis and image interaction.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_185\n\nLANGUAGE: markdown\nCODE:\n```\n*<img src=\"foo\" title=\"*\"/>\n```\n\nLANGUAGE: html\nCODE:\n```\n<p>*<img src=\"foo\" title=\"*\"/></p>\n```\n\n----------------------------------------\n\nTITLE: Inline Link - Inline Content - Markdown\nDESCRIPTION: Demonstrates an inline link containing inline content like emphasis, strong text, and code.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_198\n\nLANGUAGE: markdown\nCODE:\n```\n[link *foo **bar** `#`*](/uri)\n```\n\nLANGUAGE: html\nCODE:\n```\n<p><a href=\"/uri\">link <em>foo <strong>bar</strong> <code>#</code></em></a></p>\n```\n\n----------------------------------------\n\nTITLE: HTML Block with Style Tag on Single Line Markdown Example\nDESCRIPTION: Demonstrates how markdown-it handles HTML blocks with a style tag that is completely contained on a single line.  The example ensures the parser recognizes the complete style tag and renders it correctly without unexpected line breaks or formatting. The input includes a style tag and italicized text, and the output shows the rendered style tag and paragraph with italicized text.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_36\n\nLANGUAGE: Markdown\nCODE:\n```\n<style>p{color:red;}</style>\n*foo*\n.\n<style>p{color:red;}</style>\n<p><em>foo</em></p>\n```\n\n----------------------------------------\n\nTITLE: ATX Headings: Too Much Indentation\nDESCRIPTION: Shows that four or more spaces of indentation before the '#' characters will result in the line being treated as a code block instead of a heading.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_23\n\nLANGUAGE: markdown\nCODE:\n```\n    # foo\n```\n\nLANGUAGE: html\nCODE:\n```\n<pre><code># foo\n</code></pre>\n```\n\n----------------------------------------\n\nTITLE: HTML Output of Custom Rule (HTML)\nDESCRIPTION: This is the HTML output generated by the test code, demonstrating that the \"lorem_ipsum\" class has been successfully added to the `<ul>` element.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/docs/examples/renderer_rules.md#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<ul class=\"lorem_ipsum\">\n<li>Hello World</li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Invalid Email Autolink - Space Inside Brackets\nDESCRIPTION: This example demonstrates an invalid email autolink with a space inside the brackets. `< https://foo.bar >` becomes `<p>&lt; https://foo.bar &gt;</p>`. The space invalidates the autolink.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_290\n\nLANGUAGE: markdown\nCODE:\n```\n< https://foo.bar >\n.\n<p>&lt; https://foo.bar &gt;</p>\n```\n\n----------------------------------------\n\nTITLE: Rendering Soft Line Breaks\nDESCRIPTION: Illustrates how Markdown-it renders soft line breaks as either a line ending or a space. It demonstrates how spaces at the end of a line and the beginning of the next line are removed.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_297\n\nLANGUAGE: HTML\nCODE:\n```\nfoo\nbaz\n.\n<p>foo\nbaz</p>\n```\n\nLANGUAGE: HTML\nCODE:\n```\nfoo \n baz\n.\n<p>foo\nbaz</p>\n```\n\n----------------------------------------\n\nTITLE: Markdown Emphasis: Punctuation and Alphanumeric Restriction\nDESCRIPTION: Shows that emphasis is not generated when the asterisk is preceded by punctuation and followed by an alphanumeric character, as it's not part of a right-flanking delimiter run.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_79\n\nLANGUAGE: markdown\nCODE:\n```\n*(*foo)\n.\n<p>*(*foo)</p>\n```\n\n----------------------------------------\n\nTITLE: Precedence of Inline Links\nDESCRIPTION: This example shows that inline links take precedence over reference links. `[foo]()` is parsed as an inline link with an empty URL, not as a reference to `foo`.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_249\n\nLANGUAGE: markdown\nCODE:\n```\n[foo]()\n\n[foo]: /url1\n.\n<p><a href=\"\">foo</a></p>\n```\n\n----------------------------------------\n\nTITLE: ATX Headings: Indentation\nDESCRIPTION: Demonstrates that up to three spaces of indentation are allowed before the '#' characters. More than three spaces will cause the line to be treated as a code block.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_22\n\nLANGUAGE: markdown\nCODE:\n```\n ### foo\n  ## foo\n   # foo\n```\n\nLANGUAGE: html\nCODE:\n```\n<h3>foo</h3>\n<h2>foo</h2>\n<h1>foo</h1>\n```\n\n----------------------------------------\n\nTITLE: Markdown Blockquote with List and Continuation Paragraph\nDESCRIPTION: This snippet shows a blockquote containing a list, followed by a continuation paragraph. It demonstrates similar behavior to the previous example, with `Markdown.pl` parsing.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_57\n\nLANGUAGE: markdown\nCODE:\n```\n>   - one\n>\n>  two\n```\n\n----------------------------------------\n\nTITLE: Markdown List with Continuation Paragraph\nDESCRIPTION: This example shows how `Markdown.pl` parses a list item followed by a continuation paragraph with less indentation than the initial list marker, leading to unintuitive results.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_55\n\nLANGUAGE: markdown\nCODE:\n```\n   - one\n\n  two\n```\n\n----------------------------------------\n\nTITLE: Markdown List Item with Subparagraph\nDESCRIPTION: This demonstrates a list item where the subparagraph has less indentation than the first paragraph.  The document proposes handling this as a valid subparagraph despite the reduced indentation.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_59\n\nLANGUAGE: markdown\nCODE:\n```\n 10. foo\n\n   bar  \n```\n\n----------------------------------------\n\nTITLE: Parsing Collapsed Reference Link with Emphasis\nDESCRIPTION: This example showcases a collapsed reference link with emphasis within the link text. The link text `*foo* bar` is parsed as inlines.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_236\n\nLANGUAGE: markdown\nCODE:\n```\n[*foo* bar][]\n\n[*foo* bar]: /url \"title\"\n.\n<p><a href=\"/url\" title=\"title\"><em>foo</em> bar</a></p>\n```\n\n----------------------------------------\n\nTITLE: Parsing Collapsed Reference Link\nDESCRIPTION: This example demonstrates the use of collapsed reference links. `[foo][]` is equivalent to `[foo][foo]`, using the definition associated with `foo`.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_235\n\nLANGUAGE: markdown\nCODE:\n```\n[foo][]\n\n[foo]: /url \"title\"\n.\n<p><a href=\"/url\" title=\"title\">foo</a></p>\n```\n\n----------------------------------------\n\nTITLE: Markdown Ambiguity Example: List Marker Alignment\nDESCRIPTION: This example highlights different interpretations of indentation and alignment of list markers. Specifically, it asks whether ordered list markers can be right-aligned.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n 8. item 1\n 9. item 2\n10. item 2a\n```\n\n----------------------------------------\n\nTITLE: Installing markdown-it with npm\nDESCRIPTION: This snippet shows how to install the markdown-it package using npm (Node Package Manager). This is the standard method for including markdown-it in Node.js projects.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install markdown-it\n```\n\n----------------------------------------\n\nTITLE: Parsing Shortcut Reference Link\nDESCRIPTION: This example shows the use of shortcut reference links. `[foo]` is equivalent to `[foo][]`, using the definition associated with `foo`.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_239\n\nLANGUAGE: markdown\nCODE:\n```\n[foo]\n\n[foo]: /url \"title\"\n.\n<p><a href=\"/url\" title=\"title\">foo</a></p>\n```\n\n----------------------------------------\n\nTITLE: Markdown Ambiguity Example: Code Block\nDESCRIPTION: This Markdown example illustrates an ambiguity regarding blank lines before indented code blocks. Some implementations require a blank line before a code block, while others do not.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nparagraph\n    code?\n```\n\n----------------------------------------\n\nTITLE: Parsing Case-Insensitive Collapsed Reference Link\nDESCRIPTION: This example illustrates that link labels are case-insensitive in collapsed reference links. `[Foo][]` correctly resolves to the definition of `[foo]`.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_237\n\nLANGUAGE: markdown\nCODE:\n```\n[Foo][]\n\n[foo]: /url \"title\"\n.\n<p><a href=\"/url\" title=\"title\">Foo</a></p>\n```\n\n----------------------------------------\n\nTITLE: Another Basic Markdown Table Example\nDESCRIPTION: This snippet provides another example of a basic markdown table. It demonstrates a simple table structure with headers separated from the data rows using hyphens.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/benchmark/samples/block-tables.md#_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\nHeader 1 | Header 2\n-------- | --------\nCell 1   | Cell 2\nCell 3   | Cell 4\n```\n\n----------------------------------------\n\nTITLE: ATX Headings: Non-Space After Closing\nDESCRIPTION: Demonstrates that if anything other than a space or tab follows the closing sequence of '#' characters, it is considered part of the heading's content.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_27\n\nLANGUAGE: markdown\nCODE:\n```\n### foo ### b\n```\n\nLANGUAGE: html\nCODE:\n```\n<h3>foo ### b</h3>\n```\n\n----------------------------------------\n\nTITLE: Rendering Image with URL Source\nDESCRIPTION: This example demonstrates rendering an image with a URL enclosed in angle brackets. `![foo](<url>)` is rendered as `<p><img src=\"url\" alt=\"foo\" /></p>`.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_262\n\nLANGUAGE: markdown\nCODE:\n```\n![foo](<url>)\n.\n<p><img src=\"url\" alt=\"foo\" /></p>\n```\n\n----------------------------------------\n\nTITLE: Parsing Backslash in Reference Link\nDESCRIPTION: This example demonstrates how a backslash is parsed within a reference link definition. The link text becomes `bar\\` and points to `/uri`.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_232\n\nLANGUAGE: markdown\nCODE:\n```\n[bar\\\\]: /uri\n\n[bar\\\\ ]\n.\n<p><a href=\"/uri\">bar\\</a></p>\n```\n\n----------------------------------------\n\nTITLE: Markdown No Emphasis with Unicode Symbols\nDESCRIPTION: Illustrates that Unicode symbols count as punctuation, preventing emphasis when they are adjacent to asterisks. The asterisks are treated as literal characters.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_65\n\nLANGUAGE: markdown\nCODE:\n```\n*$*alpha.\n\n*£*bravo.\n\n*€*charlie.\n```\n\nLANGUAGE: html\nCODE:\n```\n<p>*$*alpha.</p>\n<p>*£*bravo.</p>\n<p>*€*charlie.</p>\n```\n\n----------------------------------------\n\nTITLE: Markdown Ambiguity Example: Emphasis Precedence\nDESCRIPTION: This example clarifies the precedence rules between emphasis and strong emphasis markers. It demonstrates cases where the nesting of * and ** markers can be ambiguous.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n*foo *bar* baz*\n```\n\n----------------------------------------\n\nTITLE: Markdown Strong Emphasis: Punctuation and Alphanumeric Restriction Asterisks\nDESCRIPTION: Demonstrates that strong emphasis is not generated when double asterisks are preceded by an alphanumeric character and followed by punctuation.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_91\n\nLANGUAGE: markdown\nCODE:\n```\na**\"foo\"**\n.\n<p>a**&quot;foo&quot;**</p>\n```\n\n----------------------------------------\n\nTITLE: ATX Headings: Escaped '#'\nDESCRIPTION: Demonstrates that escaping the '#' character with a backslash prevents it from being interpreted as part of a heading. The escaped '#' is treated as literal text.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_19\n\nLANGUAGE: markdown\nCODE:\n```\n\\## foo\n```\n\nLANGUAGE: html\nCODE:\n```\n<p>## foo</p>\n```\n\n----------------------------------------\n\nTITLE: Parsing Shortcut Reference Link with Trailing Space\nDESCRIPTION: This example shows how a space after the link text is preserved when using a shortcut reference link.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_244\n\nLANGUAGE: markdown\nCODE:\n```\n[foo] bar\n\n[foo]: /url\n.\n<p><a href=\"/url\">foo</a> bar</p>\n```\n\n----------------------------------------\n\nTITLE: ATX Headings: Space Before Closing Required\nDESCRIPTION: Illustrates that a space or tab is required before the closing sequence of '#' characters. Without a space, the closing sequence is treated as part of the heading's content.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_28\n\nLANGUAGE: markdown\nCODE:\n```\n# foo#\n```\n\nLANGUAGE: html\nCODE:\n```\n<h1>foo#</h1>\n```\n\n----------------------------------------\n\nTITLE: Inline Link with Destination and Title - Markdown\nDESCRIPTION: Demonstrates an inline link with a URI destination and a title attribute. Spaces, tabs, and a line ending are allowed around the destination and title.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_192\n\nLANGUAGE: markdown\nCODE:\n```\n[link](   /uri\n  \"title\"  )\n```\n\nLANGUAGE: html\nCODE:\n```\n<p><a href=\"/uri\" title=\"title\">link</a></p>\n```\n\n----------------------------------------\n\nTITLE: ATX Headings: Spaces After Closing\nDESCRIPTION: Shows that spaces or tabs are allowed after the closing sequence of '#' characters. This allows for more flexible formatting.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_26\n\nLANGUAGE: markdown\nCODE:\n```\n### foo ###     \n```\n\nLANGUAGE: html\nCODE:\n```\n<h3>foo</h3>\n```\n\n----------------------------------------\n\nTITLE: Markdown Strong Emphasis: Punctuation and Alphanumeric Restriction Asterisks\nDESCRIPTION: Demonstrates that strong emphasis is not generated when the asterisk is preceded by punctuation and followed by an alphanumeric character.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_103\n\nLANGUAGE: markdown\nCODE:\n```\n**(**foo)\n.\n<p>**(**foo)</p>\n```\n\n----------------------------------------\n\nTITLE: Markdown Strong Emphasis: Chained Underscores\nDESCRIPTION: Illustrates a case where chain of words surrounded by underscores will result in emphasis, with the inner underscores untouched.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_113\n\nLANGUAGE: markdown\nCODE:\n```\n__foo__bar__baz__\n.\n<p><strong>foo__bar__baz</strong></p>\n```\n\n----------------------------------------\n\nTITLE: Plain Text URI\nDESCRIPTION: This example shows a plain text URI, not enclosed in brackets. `https://example.com` remains `https://example.com`. It is not automatically converted to a link.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_293\n\nLANGUAGE: markdown\nCODE:\n```\nhttps://example.com\n.\n<p>https://example.com</p>\n```\n\n----------------------------------------\n\nTITLE: HTML Block Element\nDESCRIPTION: This HTML snippet defines a simple div block with a class. It's likely used to test how Markdown-it handles block-level HTML elements.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/benchmark/samples/block-html.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"this is an html block\">\n\nblah blah\n\n</div>\n```\n\n----------------------------------------\n\nTITLE: Markdown Ambiguity Example: Heading in List Item\nDESCRIPTION: This example tests whether section headings are allowed inside list items. Different Markdown implementations handle this differently.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n- # Heading\n```\n\n----------------------------------------\n\nTITLE: Inline Link - No Space After Text - Markdown\nDESCRIPTION: Shows that spaces are not allowed between the link text and the opening parenthesis of the URI in an inline link.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_193\n\nLANGUAGE: markdown\nCODE:\n```\n[link] (/uri)\n```\n\nLANGUAGE: html\nCODE:\n```\n<p>[link] (/uri)</p>\n```\n\n----------------------------------------\n\nTITLE: Markdown Block Structure Example\nDESCRIPTION: This example demonstrates the initial document structure in the block structure parsing phase. It shows a simple document block before any content is added.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_299\n\nLANGUAGE: tree\nCODE:\n```\n-> document\n```\n\n----------------------------------------\n\nTITLE: Markdown Blockquote and Paragraph Creation\nDESCRIPTION: This example showcases how a blockquote and paragraph block are created based on the input Markdown. The text is added to the open paragraph block.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_300\n\nLANGUAGE: tree\nCODE:\n```\n-> document\n  -> block_quote\n    -> paragraph\n         \"Lorem ipsum dolor\"\n```\n\n----------------------------------------\n\nTITLE: Markdown Ambiguity Example: List Marker Transition\nDESCRIPTION: This example demonstrates the ambiguity of handling lists when the marker style changes (numbers to bullets). Some parsers treat it as one list, while others split it into two.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n1. fee\n2. fie\n-  foe\n-  fum\n```\n\n----------------------------------------\n\nTITLE: Markdown Strong Emphasis: Whitespace After Opening Asterisks\nDESCRIPTION: Shows that strong emphasis is not generated if there is whitespace after the opening double asterisk delimiter.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_90\n\nLANGUAGE: markdown\nCODE:\n```\n** foo bar**\n.\n<p>** foo bar**</p>\n```\n\n----------------------------------------\n\nTITLE: Markdown Strong Emphasis: Whitespace Before Closing Asterisks\nDESCRIPTION: Shows that strong emphasis is not generated if there is whitespace before the closing double asterisk delimiter.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_102\n\nLANGUAGE: markdown\nCODE:\n```\n**foo bar **\n.\n<p>**foo bar **</p>\n```\n\n----------------------------------------\n\nTITLE: Markdown Strong Emphasis: Whitespace After Opening Underscores\nDESCRIPTION: Shows that strong emphasis is not generated if there is whitespace after the opening double underscore delimiter.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_94\n\nLANGUAGE: markdown\nCODE:\n```\n__ foo bar__\n.\n<p>__ foo bar__</p>\n```\n\n----------------------------------------\n\nTITLE: Markdown Strong Emphasis: Punctuation Preceding Underscores\nDESCRIPTION: Demonstrates that strong emphasis is generated when the opening delimiter is preceded by punctuation.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_101\n\nLANGUAGE: markdown\nCODE:\n```\nfoo-__(bar)__\n.\n<p>foo-<strong>(bar)</strong></p>\n```\n\n----------------------------------------\n\nTITLE: Markdown No Intraword Emphasis with Underscores\nDESCRIPTION: Demonstrates that intraword emphasis is not permitted when using underscores as delimiters. The underscores are treated as literal characters.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_71\n\nLANGUAGE: markdown\nCODE:\n```\nfoo_bar_\n```\n\nLANGUAGE: html\nCODE:\n```\n<p>foo_bar_</p>\n```\n\n----------------------------------------\n\nTITLE: Markdown Emphasis: Punctuation and Alphanumeric Restriction Underscore\nDESCRIPTION: Demonstrates that emphasis is not generated when an underscore is preceded by punctuation and followed by an alphanumeric character.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_83\n\nLANGUAGE: markdown\nCODE:\n```\n_(_foo)\n.\n<p>_(_foo)</p>\n```\n\n----------------------------------------\n\nTITLE: Markdown Ambiguity Example: Empty List Items\nDESCRIPTION: This example illustrates the ambiguity of empty list items, and how they should be handled by Markdown parsers.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n* a\n*\n* b\n```\n\n----------------------------------------\n\nTITLE: Markdown Emphasis Example with Underscores\nDESCRIPTION: Demonstrates basic emphasis using underscores in Markdown. The text \"foo bar\" will be rendered with emphasis.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_68\n\nLANGUAGE: markdown\nCODE:\n```\n_foo bar_\n```\n\nLANGUAGE: html\nCODE:\n```\n<p><em>foo bar</em></p>\n```\n\n----------------------------------------\n\nTITLE: Markdown Emphasis: Punctuation Following Underscore\nDESCRIPTION: Illustrates that emphasis can be generated if the closing delimiter is followed by punctuation.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_88\n\nLANGUAGE: markdown\nCODE:\n```\n_(bar)_.\n.\n<p><em>(bar)</em>.</p>\n```\n\n----------------------------------------\n\nTITLE: Inline Link - Nested Links 2 - Markdown\nDESCRIPTION: Demonstrates that links may not contain other links, even with emphasis.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_201\n\nLANGUAGE: markdown\nCODE:\n```\n[foo *[bar [baz](/uri)](/uri)*](/uri)\n```\n\nLANGUAGE: html\nCODE:\n```\n<p>[foo <em>[bar <a href=\"/uri\">baz</a>](/uri)</em>](/uri)</p>\n```\n\n----------------------------------------\n\nTITLE: Markdown Strong Emphasis: Cyrillic Characters\nDESCRIPTION: Shows that strong emphasis is not applied to cyrillic chars surrounded by underscores\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_112\n\nLANGUAGE: markdown\nCODE:\n```\n__пристаням__стремятся\n.\n<p>__пристаням__стремятся</p>\n```\n\n----------------------------------------\n\nTITLE: Reference Link - Emphasis Precedence 2 - Markdown\nDESCRIPTION: Shows the precedence of link text grouping over emphasis grouping when the emphasis is after the link, in a reference link.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_217\n\nLANGUAGE: markdown\nCODE:\n```\n[foo *bar][ref]*\n\n[ref]: /uri\n```\n\nLANGUAGE: html\nCODE:\n```\n<p><a href=\"/uri\">foo *bar</a>*</p>\n```\n\n----------------------------------------\n\nTITLE: Reference Link - No Space Between Text and Label 2 - Markdown\nDESCRIPTION: Illustrates that spaces/newlines are not allowed between link text and label.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_225\n\nLANGUAGE: markdown\nCODE:\n```\n[foo]\n[bar]\n\n[bar]: /url \"title\"\n```\n\nLANGUAGE: html\nCODE:\n```\n<p>[foo]\n<a href=\"/url\" title=\"title\">bar</a></p>\n```\n\n----------------------------------------\n\nTITLE: Reference Link - Multiple Definitions - Markdown\nDESCRIPTION: When there are multiple matching [link reference definitions], the first is used.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_226\n\nLANGUAGE: markdown\nCODE:\n```\n[foo]: /url1\n\n[foo]: /url2\n\n[bar][foo]\n```\n\nLANGUAGE: html\nCODE:\n```\n<p><a href=\"/url1\">bar</a></p>\n```\n\n----------------------------------------\n\nTITLE: Markdown Emphasis: Span Contents\nDESCRIPTION: Demonstrates that emphasis can contain inline elements like links.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_115\n\nLANGUAGE: markdown\nCODE:\n```\n*foo [bar](/url)*\n.\n<p><em>foo <a href=\"/url\">bar</a></em></p>\n```\n\n----------------------------------------\n\nTITLE: Parsing Textual Content\nDESCRIPTION: Demonstrates how Markdown-it parses plain textual content, preserving internal spaces verbatim.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_298\n\nLANGUAGE: HTML\nCODE:\n```\nhello $.;'there\n.\n<p>hello $.;'there</p>\n```\n\nLANGUAGE: HTML\nCODE:\n```\nFoo χρῆν\n.\n<p>Foo χρῆν</p>\n```\n\nLANGUAGE: HTML\nCODE:\n```\nMultiple     spaces\n.\n<p>Multiple     spaces</p>\n```\n\n----------------------------------------\n\nTITLE: Markdown Emphasis: Whitespace Before Closing Underscore\nDESCRIPTION: Shows that emphasis is not generated if there is whitespace before the closing underscore delimiter.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_82\n\nLANGUAGE: markdown\nCODE:\n```\n_foo bar _\n.\n<p>_foo bar _</p>\n```\n\n----------------------------------------\n\nTITLE: Markdown Emphasis: Consecutive Underscores\nDESCRIPTION: Demonstrates how consecutive underscores are handled to create emphasis across multiple words.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_87\n\nLANGUAGE: markdown\nCODE:\n```\n_foo_bar_baz_\n.\n<p><em>foo_bar_baz</em></p>\n```\n\n----------------------------------------\n\nTITLE: Markdown Strong Emphasis: Cyrillic Characters Underscores\nDESCRIPTION: Demonstrates that underscores around Cyrillic characters do not create strong emphasis.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_99\n\nLANGUAGE: markdown\nCODE:\n```\nпристаням__стремятся__\n.\n<p>пристаням__стремятся__</p>\n```\n\n----------------------------------------\n\nTITLE: Markdown Emphasis: Cyrillic Characters with Underscores\nDESCRIPTION: Shows that underscores surrounding Cyrillic characters do not create emphasis.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_86\n\nLANGUAGE: markdown\nCODE:\n```\n_пристаням_стремятся\n.\n<p>_пристаням_стремятся</p>\n```\n\n----------------------------------------\n\nTITLE: Nested Strong Emphasis with Same Delimiters (Underscores)\nDESCRIPTION: Shows using the same delimiter for nested emphasis, using underscores.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_175\n\nLANGUAGE: markdown\nCODE:\n```\n____foo____\n```\n\nLANGUAGE: html\nCODE:\n```\n<p><strong><strong>foo</strong></strong></p>\n```\n\n----------------------------------------\n\nTITLE: Markdown Strong Emphasis: Intraword Asterisks Permitted\nDESCRIPTION: Illustrates that intraword strong emphasis is permitted with double asterisks.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_92\n\nLANGUAGE: markdown\nCODE:\n```\nfoo**bar**\n.\n<p>foo<strong>bar</strong></p>\n```\n\n----------------------------------------\n\nTITLE: Emphasis and Strong Emphasis Combination\nDESCRIPTION: Demonstrates combining asterisks for emphasis and strong emphasis with multiple levels of strong emphasis.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_127\n\nLANGUAGE: markdown\nCODE:\n```\nfoo******bar*********baz\n```\n\nLANGUAGE: html\nCODE:\n```\n<p>foo<strong><strong><strong>bar</strong></strong></strong>***baz</p>\n```\n\n----------------------------------------\n\nTITLE: Inline Link - Unbalanced Brackets - Markdown\nDESCRIPTION: Demonstrates that unbalanced brackets are not allowed in link text without escaping.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_195\n\nLANGUAGE: markdown\nCODE:\n```\n[link] bar](/uri)\n```\n\nLANGUAGE: html\nCODE:\n```\n<p>[link] bar](/uri)</p>\n```\n\n----------------------------------------\n\nTITLE: Markdown Strong Emphasis: Numbers and Underscores\nDESCRIPTION: Shows that underscores between numbers do not create strong emphasis.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_98\n\nLANGUAGE: markdown\nCODE:\n```\n5__6__78\n.\n<p>5__6__78</p>\n```\n\n----------------------------------------\n\nTITLE: Reference Link - HTML Tag Precedence - Markdown\nDESCRIPTION: Shows the precedence of HTML tags over link grouping in a reference link.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_218\n\nLANGUAGE: markdown\nCODE:\n```\n[foo <bar attr=\"][ref]\">\n\n[ref]: /uri\n```\n\nLANGUAGE: html\nCODE:\n```\n<p>[foo <bar attr=\"][ref]\"></p>\n```\n\n----------------------------------------\n\nTITLE: Markdown Strong Emphasis: Intraword Underscores Forbidden\nDESCRIPTION: Illustrates that intraword strong emphasis is forbidden with double underscores.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_97\n\nLANGUAGE: markdown\nCODE:\n```\nfoo__bar__\n.\n<p>foo__bar__</p>\n```\n\n----------------------------------------\n\nTITLE: Empty Strong Emphasis Prevention\nDESCRIPTION: Shows that four asterisks are not considered an empty strong emphasis.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_131\n\nLANGUAGE: markdown\nCODE:\n```\n**** is not an empty strong emphasis\n```\n\nLANGUAGE: html\nCODE:\n```\n<p>**** is not an empty strong emphasis</p>\n```\n\n----------------------------------------\n\nTITLE: Markdown Emphasis: Nested Underscores\nDESCRIPTION: Illustrates nested emphasis using underscores, resulting in emphasis within emphasis.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_84\n\nLANGUAGE: markdown\nCODE:\n```\n_(_foo_)_\n.\n<p><em>(<em>foo</em>)</em></p>\n```\n\n----------------------------------------\n\nTITLE: Reference Link - Brackets in Labels - Markdown\nDESCRIPTION: Link labels cannot contain brackets, unless they are backslash-escaped.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_228\n\nLANGUAGE: markdown\nCODE:\n```\n[foo][ref[]\n\n[ref[]: /uri\n```\n\nLANGUAGE: html\nCODE:\n```\n<p>[foo][ref[]</p>\n```\n\n----------------------------------------\n\nTITLE: Reference Link - Autolink Precedence - Markdown\nDESCRIPTION: Demonstrates the precedence of autolinks over link grouping in a reference link.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_220\n\nLANGUAGE: markdown\nCODE:\n```\n[foo<https://example.com/?search=][ref]>\n\n[ref]: /uri\n```\n\nLANGUAGE: html\nCODE:\n```\n<p>[foo<a href=\"https://example.com/?search=%5D%5Bref%5D\">https://example.com/?search=][ref]</a></p>\n```\n\n----------------------------------------\n\nTITLE: Reference Link - Code Span Precedence - Markdown\nDESCRIPTION: Illustrates the precedence of code spans over link grouping in a reference link.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_219\n\nLANGUAGE: markdown\nCODE:\n```\n[foo`][ref]`\n\n[ref]: /uri\n```\n\nLANGUAGE: html\nCODE:\n```\n<p>[foo<code>][ref]</code></p>\n```\n\n----------------------------------------\n\nTITLE: Reference Link - Normalized Strings - Markdown\nDESCRIPTION: Matching is performed on normalized strings, not parsed inline content.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_227\n\nLANGUAGE: markdown\nCODE:\n```\n[bar][foo!]\n\n[foo!]: /url\n```\n\nLANGUAGE: html\nCODE:\n```\n<p>[bar][foo!]</p>\n```\n\n----------------------------------------\n\nTITLE: Markdown Emphasis: Triple Asterisk 2\nDESCRIPTION: Complex nested emphasis and strong emphasis with asterisks\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_124\n\nLANGUAGE: markdown\nCODE:\n```\n*foo **bar***\n.\n<p><em>foo <strong>bar</strong></em></p>\n```\n\n----------------------------------------\n\nTITLE: Empty Strong Emphasis (Underscores)\nDESCRIPTION: Shows that using two underscores results in plain text.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_144\n\nLANGUAGE: markdown\nCODE:\n```\n__ is not an empty emphasis\n```\n\nLANGUAGE: html\nCODE:\n```\n<p>__ is not an empty emphasis</p>\n```\n\n----------------------------------------\n\nTITLE: Markdown Emphasis: Triple Asterisk\nDESCRIPTION: Complex nested emphasis and strong emphasis with asterisks\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_123\n\nLANGUAGE: markdown\nCODE:\n```\n***foo** bar*\n.\n<p><em><strong>foo</strong> bar</em></p>\n```\n\n----------------------------------------\n\nTITLE: Markdown Emphasis: Line Break Inside\nDESCRIPTION: Show that a line break does not end emphasis.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_116\n\nLANGUAGE: markdown\nCODE:\n```\n*foo\nbar*\n.\n<p><em>foo\nbar</em></p>\n```\n\n----------------------------------------\n\nTITLE: Markdown Cyrillic Underscore Example\nDESCRIPTION: Demonstrates underscores in a cyrillic word. Should not be rendered as emphasis.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_73\n\nLANGUAGE: markdown\nCODE:\n```\nпристаням_стремятся_\n```\n\nLANGUAGE: html\nCODE:\n```\n<p>пристаням_стремятся_</p>\n```\n\n----------------------------------------\n\nTITLE: Reference Link - Balanced Brackets - Markdown\nDESCRIPTION: Illustrates a reference link where the link text contains balanced brackets.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_210\n\nLANGUAGE: markdown\nCODE:\n```\n[link [foo [bar]]][ref]\n\n[ref]: /uri\n```\n\nLANGUAGE: html\nCODE:\n```\n<p><a href=\"/uri\">link [foo [bar]]</a></p>\n```\n\n----------------------------------------\n\nTITLE: Reference Link - Emphasis Precedence - Markdown\nDESCRIPTION: Illustrates the precedence of link text grouping over emphasis grouping in a reference link.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_216\n\nLANGUAGE: markdown\nCODE:\n```\n*[foo*][ref]\n\n[ref]: /uri\n```\n\nLANGUAGE: html\nCODE:\n```\n<p>*<a href=\"/uri\">foo*</a></p>\n```\n\n----------------------------------------\n\nTITLE: Nested Strong Emphasis with Same Delimiters\nDESCRIPTION: Shows using the same delimiter for nested emphasis.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_174\n\nLANGUAGE: markdown\nCODE:\n```\n****foo****\n```\n\nLANGUAGE: html\nCODE:\n```\n<p><strong><strong>foo</strong></strong></p>\n```\n\n----------------------------------------\n\nTITLE: Markdown Strong Emphasis: Basic Asterisks\nDESCRIPTION: Demonstrates basic strong emphasis using double asterisks.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_89\n\nLANGUAGE: markdown\nCODE:\n```\n**foo bar**\n.\n<p><strong>foo bar</strong></p>\n```\n\n----------------------------------------\n\nTITLE: Markdown Emphasis: Adjacent nested emphasis/strong emphasis\nDESCRIPTION: Demonstrates when adjacent nested emphasis/strong emphasis render\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_122\n\nLANGUAGE: markdown\nCODE:\n```\n*foo**bar**baz*\n.\n<p><em>foo<strong>bar</strong>baz</em></p>\n```\n\n----------------------------------------\n\nTITLE: Markdown Emphasis: Triple Asterisk 3\nDESCRIPTION: Complex nested emphasis and strong emphasis with asterisks\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_125\n\nLANGUAGE: markdown\nCODE:\n```\n*foo**bar***\n.\n<p>\n</p>\n```\n\n----------------------------------------\n\nTITLE: Markdown Emphasis: Intraword Underscore Disallowed\nDESCRIPTION: Demonstrates that intraword emphasis is disallowed for underscores.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_85\n\nLANGUAGE: markdown\nCODE:\n```\n_foo_bar\n.\n<p>_foo_bar</p>\n```\n\n----------------------------------------\n\nTITLE: Nested Emphasis and Strong Emphasis (Underscores)\nDESCRIPTION: Demonstrates nesting emphasis within strong emphasis using underscores.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_134\n\nLANGUAGE: markdown\nCODE:\n```\n__foo _bar_ baz__\n```\n\nLANGUAGE: html\nCODE:\n```\n<p><strong>foo <em>bar</em> baz</strong></p>\n```\n\n----------------------------------------\n\nTITLE: Markdown Strong Emphasis: Basic Underscores\nDESCRIPTION: Demonstrates basic strong emphasis using double underscores.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_93\n\nLANGUAGE: markdown\nCODE:\n```\n__foo bar__\n.\n<p><strong>foo bar</strong></p>\n```\n\n----------------------------------------\n\nTITLE: Markdown Strong Emphasis: Intraword Asterisks\nDESCRIPTION: Demonstrates intraword strong emphasis with asterisks.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_107\n\nLANGUAGE: markdown\nCODE:\n```\n**foo**bar\n.\n<p><strong>foo</strong>bar</p>\n```\n\n----------------------------------------\n\nTITLE: Strong Emphasis Containing Link\nDESCRIPTION: Demonstrates that strong emphasis can contain a link.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_132\n\nLANGUAGE: markdown\nCODE:\n```\n**foo [bar](/url)**\n```\n\nLANGUAGE: html\nCODE:\n```\n<p><strong>foo <a href=\"/url\">bar</a></strong></p>\n```\n\n----------------------------------------\n\nTITLE: Nested Strong Emphasis (Underscores)\nDESCRIPTION: Demonstrates nesting strong emphasis within strong emphasis using underscores.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_135\n\nLANGUAGE: markdown\nCODE:\n```\n__foo __bar__ baz__\n```\n\nLANGUAGE: html\nCODE:\n```\n<p><strong>foo <strong>bar</strong> baz</strong></p>\n```\n\n----------------------------------------\n\nTITLE: Reference Link - Unicode Case Fold - Markdown\nDESCRIPTION: Unicode case fold is used for matching reference links.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_222\n\nLANGUAGE: markdown\nCODE:\n```\n[ẞ]\n\n[SS]: /url\n```\n\nLANGUAGE: html\nCODE:\n```\n<p><a href=\"/url\">ẞ</a></p>\n```\n\n----------------------------------------\n\nTITLE: Markdown Emphasis: Nested single underscore\nDESCRIPTION: Demonstrates nesting single underscore.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_118\n\nLANGUAGE: markdown\nCODE:\n```\n_foo _bar_ baz_\n.\n<p><em>foo <em>bar</em> baz</em></p>\n```\n\n----------------------------------------\n\nTITLE: Strong Emphasis with Nested Strong Emphasis (Asterisks)\nDESCRIPTION: Demonstrates nested strong emphasis within strong emphasis using asterisks.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_137\n\nLANGUAGE: markdown\nCODE:\n```\n**foo **bar****\n```\n\nLANGUAGE: html\nCODE:\n```\n<p><strong>foo <strong>bar</strong></strong></p>\n```\n\n----------------------------------------\n\nTITLE: Reference Link - Escaped Bracket - Markdown\nDESCRIPTION: Shows how to escape a bracket in link text of a reference link using a backslash.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_211\n\nLANGUAGE: markdown\nCODE:\n```\n[link \\[bar][ref]\n\n[ref]: /uri\n```\n\nLANGUAGE: html\nCODE:\n```\n<p><a href=\"/uri\">link [bar</a></p>\n```\n\n----------------------------------------\n\nTITLE: Parsing Raw HTML Tags\nDESCRIPTION: Demonstrates how Markdown-it parses various valid and invalid HTML tags, including open tags, closing tags, empty elements, and tags with attributes. It shows how the parser handles whitespace, custom tag names, and illegal characters in tag and attribute names and values.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_295\n\nLANGUAGE: HTML\nCODE:\n```\n<a><bab><c2c>\n.\n<p><a><bab><c2c></p>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<a/><b2/>\n.\n<p><a/><b2/></p>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<a  /><b2\ndata=\"foo\" >\n.\n<p><a  /><b2\ndata=\"foo\" ></p>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<a foo=\"bar\" bam = 'baz <em>\"</em>'\n_boolean zoop:33=zoop:33 />\n.\n<p><a foo=\"bar\" bam = 'baz <em>\"</em>'\n_boolean zoop:33=zoop:33 /></p>\n```\n\nLANGUAGE: HTML\nCODE:\n```\nFoo <responsive-image src=\"foo.jpg\" />\n.\n<p>Foo <responsive-image src=\"foo.jpg\" /></p>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<33> <__>\n.\n<p>&lt;33&gt; &lt;__&gt;</p>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<a h*#ref=\"hi\">\n.\n<p>&lt;a h*#ref=&quot;hi&quot;&gt;</p>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<a href=\"hi'> <a href=hi'>\n.\n<p>&lt;a href=&quot;hi'&gt; &lt;a href=hi'&gt;</p>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n< a><\nfoo><bar/ >\n<foo bar=baz\nbim!bop />\n.\n<p>&lt; a&gt;&lt;\nfoo&gt;&lt;bar/ &gt;\n&lt;foo bar=baz\nbim!bop /&gt;</p>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<a href='bar'title=title>\n.\n<p>&lt;a href='bar'title=title&gt;</p>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n</a></foo >\n.\n<p></a></foo ></p>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n</a href=\"foo\">\n.\n<p>&lt;/a href=&quot;foo&quot;&gt;</p>\n```\n\nLANGUAGE: HTML\nCODE:\n```\nfoo <!-- this is a --\ncomment - with hyphens -->\n.\n<p>foo <!-- this is a --\ncomment - with hyphens --></p>\n```\n\nLANGUAGE: HTML\nCODE:\n```\nfoo <!--> foo -->\n\nfoo <!---> foo -->\n.\n<p>foo <!--> foo --&gt;</p>\n<p>foo <!---> foo --&gt;</p>\n```\n\nLANGUAGE: HTML\nCODE:\n```\nfoo <?php echo $a; ?>\n.\n<p>foo <?php echo $a; ?></p>\n```\n\nLANGUAGE: HTML\nCODE:\n```\nfoo <!ELEMENT br EMPTY>\n.\n<p>foo <!ELEMENT br EMPTY></p>\n```\n\nLANGUAGE: HTML\nCODE:\n```\nfoo <![CDATA[>&<]]>\n.\n<p>foo <![CDATA[>&<]]></p>\n```\n\nLANGUAGE: HTML\nCODE:\n```\nfoo <a href=\"&ouml;\">\n.\n<p>foo <a href=\"&ouml;\"></p>\n```\n\nLANGUAGE: HTML\nCODE:\n```\nfoo <a href=\"\\*\">\n.\n<p>foo <a href=\"\\*\"></p>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<a href=\\\"\\\">\n.\n<p>&lt;a href=&quot;&quot;&quot;&gt;</p>\n```\n\n----------------------------------------\n\nTITLE: HTML Table Structure\nDESCRIPTION: This HTML snippet defines a table structure with a single row and cell containing bold text. It tests Markdown-it's ability to render HTML tables.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/benchmark/samples/block-html.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<table>\n  <tr>\n    <td>\n      **test**\n    </td>\n  </tr>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Parsing Nested Shortcut Reference Link\nDESCRIPTION: This example demonstrates nested reference links. Only the inner `[foo]` is parsed as a link, because the outer brackets are not balanced with a corresponding definition.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_242\n\nLANGUAGE: markdown\nCODE:\n```\n[[bar [foo]\n\n[foo]: /url\n.\n<p>[[bar <a href=\"/url\">foo</a></p>\n```\n\n----------------------------------------\n\nTITLE: Markdown Emphasis: Underscore inside asterisk\nDESCRIPTION: Illustrates underscore inside an asterisk block.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_119\n\nLANGUAGE: markdown\nCODE:\n```\n__foo_ bar_\n.\n<p><em><em>foo</em> bar</em></p>\n```\n\n----------------------------------------\n\nTITLE: Unmatched Underscores in Emphasis\nDESCRIPTION: Shows an unmatched underscore with an emphasis made with underscores.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_165\n\nLANGUAGE: markdown\nCODE:\n```\n_foo__\n```\n\nLANGUAGE: html\nCODE:\n```\n<p><em>foo</em>_</p>\n```\n\n----------------------------------------\n\nTITLE: Escaped Underscore in Strong Emphasis\nDESCRIPTION: Shows escaping an underscore in strong emphasis using underscores.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_162\n\nLANGUAGE: markdown\nCODE:\n```\nfoo __\\___\n```\n\nLANGUAGE: html\nCODE:\n```\n<p>foo <strong>_</strong></p>\n```\n\n----------------------------------------\n\nTITLE: Reference Link - Case Insensitive - Markdown\nDESCRIPTION: Matching reference links is case-insensitive.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_221\n\nLANGUAGE: markdown\nCODE:\n```\n[foo][BaR]\n\n[bar]: /url \"title\"\n```\n\nLANGUAGE: html\nCODE:\n```\n<p><a href=\"/url\" title=\"title\">foo</a></p>\n```\n\n----------------------------------------\n\nTITLE: Strong Emphasis and Link (Underscores)\nDESCRIPTION: Shows strong emphasis with link.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_187\n\nLANGUAGE: markdown\nCODE:\n```\n__<a href=\"__\">\n```\n\nLANGUAGE: html\nCODE:\n```\n<p>__<a href=\"__\"></p>\n```\n\n----------------------------------------\n\nTITLE: Strong Emphasis Containing Link with Emphasis\nDESCRIPTION: Demonstrates strong emphasis containing a link with emphasis inside.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_143\n\nLANGUAGE: markdown\nCODE:\n```\n**foo [*bar*](/url)**\n```\n\nLANGUAGE: html\nCODE:\n```\n<p><strong>foo <a href=\"/url\"><em>bar</em></a></strong></p>\n```\n\n----------------------------------------\n\nTITLE: Strong Emphasis with Partial Underscores\nDESCRIPTION: Shows partial underscores forming strong emphasis.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_136\n\nLANGUAGE: markdown\nCODE:\n```\n____foo__ bar__\n```\n\nLANGUAGE: html\nCODE:\n```\n<p><strong><strong>foo</strong> bar</strong></p>\n```\n\n----------------------------------------\n\nTITLE: Strong Emphasis and Emphasis (Asterisks)\nDESCRIPTION: Shows strong emphasis and emphasis with asterisks.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_139\n\nLANGUAGE: markdown\nCODE:\n```\n**foo*bar*baz**\n```\n\nLANGUAGE: html\nCODE:\n```\n<p><strong>foo<em>bar</em>baz</strong></p>\n```\n\n----------------------------------------\n\nTITLE: Escaped Asterisk in Emphasis\nDESCRIPTION: Shows how an escaped asterisk within emphasis is handled.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_147\n\nLANGUAGE: markdown\nCODE:\n```\nfoo *\\**\n```\n\nLANGUAGE: html\nCODE:\n```\n<p>foo <em>*</em></p>\n```\n\n----------------------------------------\n\nTITLE: Escaped Asterisk in Strong Emphasis\nDESCRIPTION: Shows escaping an asterisk in strong emphasis.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_150\n\nLANGUAGE: markdown\nCODE:\n```\nfoo **\\***\n```\n\nLANGUAGE: html\nCODE:\n```\n<p>foo <strong>*</strong></p>\n```\n\n----------------------------------------\n\nTITLE: Reference Link - Image - Markdown\nDESCRIPTION: Shows a reference link containing an image.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_213\n\nLANGUAGE: markdown\nCODE:\n```\n[![moon](moon.jpg)][ref]\n\n[ref]: /uri\n```\n\nLANGUAGE: html\nCODE:\n```\n<p><a href=\"/uri\"><img src=\"moon.jpg\" alt=\"moon\" /></a></p>\n```\n\n----------------------------------------\n\nTITLE: Strong Emphasis and Autolink (Asterisks)\nDESCRIPTION: Strong emphasis and autolink.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_190\n\nLANGUAGE: markdown\nCODE:\n```\n**a<https://foo.bar/?q=**>\n```\n\nLANGUAGE: html\nCODE:\n```\n<p>**a<a href=\"https://foo.bar/?q=**\">https://foo.bar/?q=**</a></p>\n```\n\n----------------------------------------\n\nTITLE: Multiple Nested Strong Emphasis (Asterisks)\nDESCRIPTION: Multiple levels of nested strong emphasis.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_176\n\nLANGUAGE: markdown\nCODE:\n```\n******foo******\n```\n\nLANGUAGE: html\nCODE:\n```\n<p><strong><strong><strong>foo</strong></strong></strong></p>\n```\n\n----------------------------------------\n\nTITLE: Strong Emphasis and Autolink (Underscores)\nDESCRIPTION: Strong emphasis and autolink underscores.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_191\n\nLANGUAGE: markdown\nCODE:\n```\n__a<https://foo.bar/?q=__>\n```\n\nLANGUAGE: html\nCODE:\n```\n<p>__a<a href=\"https://foo.bar/?q=__\">https://foo.bar/?q=__</a></p>\n```\n\n----------------------------------------\n\nTITLE: Emphasis Inside Strong Emphasis (Underscores)\nDESCRIPTION: Demonstrates emphasis inside strong emphasis using underscores.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_178\n\nLANGUAGE: markdown\nCODE:\n```\n_____foo_____\n```\n\nLANGUAGE: html\nCODE:\n```\n<p><em><strong><strong>foo</strong></strong></em></p>\n```\n\n----------------------------------------\n\nTITLE: Unmatched Asterisks\nDESCRIPTION: Demonstrates that unmatched asterisks are rendered literally.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_146\n\nLANGUAGE: markdown\nCODE:\n```\nfoo ***\n```\n\nLANGUAGE: html\nCODE:\n```\n<p>foo ***</p>\n```\n\n----------------------------------------\n\nTITLE: Emphasis not closed (Asterisks)\nDESCRIPTION: Emphasis not closed with asterisks.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_182\n\nLANGUAGE: markdown\nCODE:\n```\n*foo *bar baz*\n```\n\nLANGUAGE: html\nCODE:\n```\n<p>*foo <em>bar baz</em></p>\n```\n\n----------------------------------------\n\nTITLE: Emphasis Inside Strong Emphasis\nDESCRIPTION: Illustrates emphasis inside strong emphasis using asterisks.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_140\n\nLANGUAGE: markdown\nCODE:\n```\n***foo* bar**\n```\n\nLANGUAGE: html\nCODE:\n```\n<p><strong><em>foo</em> bar</strong></p>\n```\n\n----------------------------------------\n\nTITLE: Multiple Unmatched Underscores\nDESCRIPTION: Shows rendering multiple unmatched underscores.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_161\n\nLANGUAGE: markdown\nCODE:\n```\nfoo _____\n```\n\nLANGUAGE: html\nCODE:\n```\n<p>foo _____</p>\n```\n\n----------------------------------------\n\nTITLE: Unclosed Emphasis (Underscores)\nDESCRIPTION: Unclosed emphasis using underscores.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_180\n\nLANGUAGE: markdown\nCODE:\n```\n*foo __bar *baz bim__ bam*\n```\n\nLANGUAGE: html\nCODE:\n```\n<p><em>foo <strong>bar *baz bim</strong> bam</em></p>\n```\n\n----------------------------------------\n\nTITLE: Unmatched Asterisks in Strong Emphasis\nDESCRIPTION: Unmatched asterisk after strong emphasis\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_156\n\nLANGUAGE: markdown\nCODE:\n```\n**foo***\n```\n\nLANGUAGE: html\nCODE:\n```\n<p><strong>foo</strong>*</p>\n```\n\n----------------------------------------\n\nTITLE: Strong Emphasis Containing Emphasis\nDESCRIPTION: Shows strong emphasis containing emphasis.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_138\n\nLANGUAGE: markdown\nCODE:\n```\n**foo *bar* baz**\n```\n\nLANGUAGE: html\nCODE:\n```\n<p><strong>foo <em>bar</em> baz</strong></p>\n```\n\n----------------------------------------\n\nTITLE: Underscore in Emphasis\nDESCRIPTION: Shows underscore within emphasis.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_148\n\nLANGUAGE: markdown\nCODE:\n```\nfoo *_*\n```\n\nLANGUAGE: html\nCODE:\n```\n<p>foo <em>_</em></p>\n```\n\n----------------------------------------\n\nTITLE: Unmatched Underscores\nDESCRIPTION: Illustrates rendering unmatched underscores literally.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_158\n\nLANGUAGE: markdown\nCODE:\n```\nfoo ___\n```\n\nLANGUAGE: html\nCODE:\n```\n<p>foo ___</p>\n```\n\n----------------------------------------\n\nTITLE: Emphasis Using Different Delimiters\nDESCRIPTION: Using underscores\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_171\n\nLANGUAGE: markdown\nCODE:\n```\n*_foo_*\n```\n\nLANGUAGE: html\nCODE:\n```\n<p><em><em>foo</em></em></p>\n```\n\n----------------------------------------\n\nTITLE: Unclosed Emphasis (Asterisks)\nDESCRIPTION: Unclosed emphasis example.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_179\n\nLANGUAGE: markdown\nCODE:\n```\n*foo _bar* baz_\n```\n\nLANGUAGE: html\nCODE:\n```\n<p><em>foo _bar</em> baz_</p>\n```\n\n----------------------------------------\n\nTITLE: Inline Link - Emphasis Precedence 2 - Markdown\nDESCRIPTION: Shows the precedence of link text grouping over emphasis grouping when the emphasis is after the link.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_204\n\nLANGUAGE: markdown\nCODE:\n```\n[foo *bar](baz*)\n```\n\nLANGUAGE: html\nCODE:\n```\n<p><a href=\"baz*\">foo *bar</a></p>\n```\n\n----------------------------------------\n\nTITLE: HTML Table Block Markdown Example\nDESCRIPTION: Demonstrates how markdown-it handles HTML table blocks within a Markdown document. This example verifies that the parser correctly renders a standard HTML table. The input is a basic HTML table structure, and the expected output is the rendered HTML table.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_50\n\nLANGUAGE: Markdown\nCODE:\n```\n<table>\n\n<tr>\n\n<td>\nHi\n</td>\n\n</tr>\n\n</table>\n.\n<table>\n<tr>\n<td>\nHi\n</td>\n</tr>\n</table>\n```\n\n----------------------------------------\n\nTITLE: ATX Headings: Interrupts Paragraphs\nDESCRIPTION: Illustrates that ATX headings can interrupt paragraphs.  The text before the heading is rendered as a paragraph, the heading is rendered as a heading, and the text after the heading is rendered as a new paragraph.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_31\n\nLANGUAGE: markdown\nCODE:\n```\nFoo bar\n# baz\nBar foo\n```\n\nLANGUAGE: html\nCODE:\n```\n<p>Foo bar</p>\n<h1>baz</h1>\n<p>Bar foo</p>\n```\n\n----------------------------------------\n\nTITLE: Underscores with Emphasis\nDESCRIPTION: More complex test case.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_167\n\nLANGUAGE: markdown\nCODE:\n```\n____foo_\n```\n\nLANGUAGE: html\nCODE:\n```\n<p>___<em>foo</em></p>\n```\n\n----------------------------------------\n\nTITLE: HTML Block with Multi-line Comment Markdown Example\nDESCRIPTION: Demonstrates how markdown-it handles multi-line HTML comments within a Markdown document. This checks if the parser correctly identifies and preserves multi-line comments. The input includes a multi-line HTML comment followed by text, and the output shows the rendered comment and paragraph.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_39\n\nLANGUAGE: Markdown\nCODE:\n```\n<!-- Foo\n\nbar\n   baz -->\nokay\n.\n<!-- Foo\n\nbar\n   baz -->\n<p>okay</p>\n```\n\n----------------------------------------\n\nTITLE: Reference Link - Simple - Markdown\nDESCRIPTION: A simple example of a full reference link.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_209\n\nLANGUAGE: markdown\nCODE:\n```\n[foo][bar]\n\n[bar]: /url \"title\"\n```\n\nLANGUAGE: html\nCODE:\n```\n<p><a href=\"/url\" title=\"title\">foo</a></p>\n```\n\n----------------------------------------\n\nTITLE: Nesting Emphasis\nDESCRIPTION: Illustrates indefinite levels of nesting using asterisks for emphasis and strong emphasis.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_128\n\nLANGUAGE: markdown\nCODE:\n```\n*foo **bar *baz* bim** bop*\n```\n\nLANGUAGE: html\nCODE:\n```\n<p><em>foo <strong>bar <em>baz</em> bim</strong> bop</em></p>\n```\n\n----------------------------------------\n\nTITLE: Emphasis and Link (Asterisks)\nDESCRIPTION: Emphasis and link interaction.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_183\n\nLANGUAGE: markdown\nCODE:\n```\n*[bar*](/url)\n```\n\nLANGUAGE: html\nCODE:\n```\n<p>*<a href=\"/url\">bar*</a></p>\n```\n\n----------------------------------------\n\nTITLE: Markdown Strong Emphasis: Nested Emphasis and Quotes\nDESCRIPTION: Demonstrates nested strong emphasis, emphasis and quotes.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_106\n\nLANGUAGE: markdown\nCODE:\n```\n**foo \"*bar*\" foo**\n.\n<p><strong>foo &quot;<em>bar</em>&quot; foo</strong></p>\n```\n\n----------------------------------------\n\nTITLE: Nested Emphasis and Strong Emphasis with Newlines\nDESCRIPTION: Shows how to nest indefinite levels of emphasis and strong emphasis when newlines are present.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_142\n\nLANGUAGE: markdown\nCODE:\n```\n**foo *bar **baz**\nbim* bop**\n```\n\nLANGUAGE: html\nCODE:\n```\n<p><strong>foo <em>bar <strong>baz</strong>\nbim</em> bop</strong></p>\n```\n\n----------------------------------------\n\nTITLE: Markdown Strong Emphasis: Nested with Single Underscores\nDESCRIPTION: Illustrates nested emphasis and strong emphasis with single and double underscores.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_110\n\nLANGUAGE: markdown\nCODE:\n```\n_(__foo__)_\n.\n<p><em>(<strong>foo</strong>)</em></p>\n```\n\n----------------------------------------\n\nTITLE: Parsing Shortcut Reference Link with Emphasis\nDESCRIPTION: This example shows a shortcut reference link with emphasis within the link text.  The link text `*foo* bar` is parsed as inlines.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_240\n\nLANGUAGE: markdown\nCODE:\n```\n[*foo* bar]\n\n[*foo* bar]: /url \"title\"\n.\n<p><a href=\"/url\" title=\"title\"><em>foo</em> bar</a></p>\n```\n\n----------------------------------------\n\nTITLE: Markdown Emphasis: Nested\nDESCRIPTION: Demonstrates nesting emphasis and strong emphasis.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_117\n\nLANGUAGE: markdown\nCODE:\n```\n_foo __bar__ baz_\n.\n<p><em>foo <strong>bar</strong> baz</em></p>\n```\n\n----------------------------------------\n\nTITLE: Emphasis Inside Strong Emphasis (Asterisks)\nDESCRIPTION: Strong emphasis and emphasis combination\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_177\n\nLANGUAGE: markdown\nCODE:\n```\n***foo***\n```\n\nLANGUAGE: html\nCODE:\n```\n<p><em><strong>foo</strong></em></p>\n```\n\n----------------------------------------\n\nTITLE: Mismatched Underscores in Emphasis\nDESCRIPTION: Mismatched underscore emphasis and result.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_164\n\nLANGUAGE: markdown\nCODE:\n```\n__foo_\n```\n\nLANGUAGE: html\nCODE:\n```\n<p>_<em>foo</em></p>\n```\n\n----------------------------------------\n\nTITLE: Emphasis with Link\nDESCRIPTION: Shows how emphasis interacts with links within markdown-it.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_129\n\nLANGUAGE: markdown\nCODE:\n```\n*foo [*bar*](/url)*\n```\n\nLANGUAGE: html\nCODE:\n```\n<p><em>foo <a href=\"/url\"><em>bar</em></a></em></p>\n```\n\n----------------------------------------\n\nTITLE: Inline Link - Nested Image Link - Markdown\nDESCRIPTION: Shows an example of a nested image and link.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_202\n\nLANGUAGE: markdown\nCODE:\n```\n![[[foo](uri1)](uri2)](uri3)\n```\n\nLANGUAGE: html\nCODE:\n```\n<p><img src=\"uri3\" alt=\"[foo](uri2)\" /></p>\n```\n\n----------------------------------------\n\nTITLE: Inline Link - Balanced Brackets - Markdown\nDESCRIPTION: Illustrates an inline link where the link text contains balanced brackets.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_194\n\nLANGUAGE: markdown\nCODE:\n```\n[link [foo [bar]]](/uri)\n```\n\nLANGUAGE: html\nCODE:\n```\n<p><a href=\"/uri\">link [foo [bar]]</a></p>\n```\n\n----------------------------------------\n\nTITLE: HTML Block with Blockquote and Div Example\nDESCRIPTION: Demonstrates how markdown-it handles HTML blocks containing blockquotes and div tags. This example checks how the parser handles nested HTML elements within a blockquote, and the expected rendering of the HTML block. The input shows a blockquote containing a div, and the expected output is the rendered HTML.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_34\n\nLANGUAGE: Markdown\nCODE:\n```\n> <div>\n> foo\n\nbar\n.\n<blockquote>\n<div>\nfoo\n</blockquote>\n<p>bar</p>\n```\n\n----------------------------------------\n\nTITLE: Markdown Strong Emphasis: Nested Emphasis Asterisks\nDESCRIPTION: Illustrates nested emphasis and strong emphasis with parenthesis using asterisks.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_104\n\nLANGUAGE: markdown\nCODE:\n```\n*(**foo**)*\n.\n<p><em>(<strong>foo</strong>)</em></p>\n```\n\n----------------------------------------\n\nTITLE: Inline Link - Nested Links - Markdown\nDESCRIPTION: Illustrates that links may not contain other links.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_200\n\nLANGUAGE: markdown\nCODE:\n```\n[foo [bar](/uri)](/uri)\n```\n\nLANGUAGE: html\nCODE:\n```\n<p>[foo <a href=\"/uri\">bar</a>](/uri)</p>\n```\n\n----------------------------------------\n\nTITLE: Markdown Emphasis Example\nDESCRIPTION: Demonstrates basic emphasis using asterisks in Markdown. The text \"foo bar\" will be rendered with emphasis.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_61\n\nLANGUAGE: markdown\nCODE:\n```\n*foo bar*\n```\n\nLANGUAGE: html\nCODE:\n```\n<p><em>foo bar</em></p>\n```\n\n----------------------------------------\n\nTITLE: Strong Emphasis and Link (Asterisks)\nDESCRIPTION: Strong emphasis and link\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_186\n\nLANGUAGE: markdown\nCODE:\n```\n**<a href=\"**\">\n```\n\nLANGUAGE: html\nCODE:\n```\n<p>**<a href=\"**\"></p>\n```\n\n----------------------------------------\n\nTITLE: Strong Emphasis with Newline\nDESCRIPTION: Illustrates strong emphasis spanning multiple lines.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_133\n\nLANGUAGE: markdown\nCODE:\n```\n**foo\nbar**\n```\n\nLANGUAGE: html\nCODE:\n```\n<p><strong>foo\nbar</strong></p>\n```\n\n----------------------------------------\n\nTITLE: Markdown Intraword Emphasis with Asterisks\nDESCRIPTION: Shows that intraword emphasis is permitted when using asterisks as delimiters. The \"bar\" portion of \"foo*bar*\" is rendered with emphasis.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_66\n\nLANGUAGE: markdown\nCODE:\n```\nfoo*bar*\n```\n\nLANGUAGE: html\nCODE:\n```\n<p>foo<em>bar</em></p>\n```\n\n----------------------------------------\n\nTITLE: Inline Link - Code Span Precedence - Markdown\nDESCRIPTION: Illustrates the precedence of code spans over link grouping.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_207\n\nLANGUAGE: markdown\nCODE:\n```\n[foo`](/uri)`\n```\n\nLANGUAGE: html\nCODE:\n```\n<p>[foo<code>](/uri)</code></p>\n```\n\n----------------------------------------\n\nTITLE: Parsing Inline Link with Text\nDESCRIPTION: This example shows an inline link with surrounding text and a defined reference label. In this scenario, because of the inline link, the reference is not used.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_250\n\nLANGUAGE: markdown\nCODE:\n```\n[foo](not a link)\n\n[foo]: /url1\n.\n<p><a href=\"/url1\">foo</a>(not a link)</p>\n```\n\n----------------------------------------\n\nTITLE: Markdown Emphasis: Nested Delimiters\nDESCRIPTION: Illustrates how nested delimiters are parsed to create emphasis within emphasis, demonstrating the interaction of parenthesis with emphasis markers.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_80\n\nLANGUAGE: markdown\nCODE:\n```\n*(*foo*)*\n.\n<p><em>(<em>foo</em>)</em></p>\n```\n\n----------------------------------------\n\nTITLE: Parsing Escaped Bracket in Reference Link\nDESCRIPTION: This example illustrates how escaping a closing bracket affects reference link parsing. `[ref\\[]` is treated as a valid reference, where the `]` is escaped, linking `foo` to `/uri`.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_231\n\nLANGUAGE: markdown\nCODE:\n```\n[foo][ref\\[]\n\n[ref\\[]: /uri\n.\n<p><a href=\"/uri\">foo</a></p>\n```\n\n----------------------------------------\n\nTITLE: Inline Link - Escaped Bracket - Markdown\nDESCRIPTION: Shows how to escape a bracket in link text using a backslash.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_197\n\nLANGUAGE: markdown\nCODE:\n```\n[link \\[bar](/uri)\n```\n\nLANGUAGE: html\nCODE:\n```\n<p><a href=\"/uri\">link [bar</a></p>\n```\n\n----------------------------------------\n\nTITLE: Unmatched Asterisks in Emphasis\nDESCRIPTION: Unmatched asterisks after emphasis.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_157\n\nLANGUAGE: markdown\nCODE:\n```\n*foo****\n```\n\nLANGUAGE: html\nCODE:\n```\n<p><em>foo</em>***</p>\n```\n\n----------------------------------------\n\nTITLE: Emphasis Inside Strong Emphasis (Asterisks)\nDESCRIPTION: Shows the reverse: strong emphasis containing emphasis using asterisks.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_141\n\nLANGUAGE: markdown\nCODE:\n```\n**foo *bar***\n```\n\nLANGUAGE: html\nCODE:\n```\n<p><strong>foo <em>bar</em></strong></p>\n```\n\n----------------------------------------\n\nTITLE: Markdown Strong Emphasis: Followed by Punctuation\nDESCRIPTION: Illustrates when strong emphasis is enabled by following punctuation.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_114\n\nLANGUAGE: markdown\nCODE:\n```\n__(bar)__.\n.\n<p><strong>(bar)</strong>.</p>\n```\n\n----------------------------------------\n\nTITLE: Strong Emphasis Using Different Delimiters\nDESCRIPTION: Shows using different delimiters for nesting\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_170\n\nLANGUAGE: markdown\nCODE:\n```\n**foo**\n```\n\nLANGUAGE: html\nCODE:\n```\n<p><strong>foo</strong></p>\n```\n\n----------------------------------------\n\nTITLE: Parsing Case-Insensitive Shortcut Reference Link\nDESCRIPTION: This example illustrates that link labels are case-insensitive in shortcut reference links. `[Foo]` correctly resolves to the definition of `[foo]`.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_243\n\nLANGUAGE: markdown\nCODE:\n```\n[Foo]\n\n[foo]: /url \"title\"\n.\n<p><a href=\"/url\" title=\"title\">Foo</a></p>\n```\n\n----------------------------------------\n\nTITLE: Inline Link - HTML Tag Precedence - Markdown\nDESCRIPTION: Shows the precedence of HTML tags over link grouping.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_206\n\nLANGUAGE: markdown\nCODE:\n```\n[foo <bar attr=\"](baz)\">\n```\n\nLANGUAGE: html\nCODE:\n```\n<p>[foo <bar attr=\"](baz)\"></p>\n```\n\n----------------------------------------\n\nTITLE: ATX Headings: Empty Headings\nDESCRIPTION: Demonstrates that ATX headings can be empty, consisting only of the '#' characters and optional closing sequences. These are rendered as empty heading tags.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_32\n\nLANGUAGE: markdown\nCODE:\n```\n## \n#\n### ###\n```\n\nLANGUAGE: html\nCODE:\n```\n<h2></h2>\n<h1></h1>\n<h3></h3>\n```\n\n----------------------------------------\n\nTITLE: Emphasis and Link (Underscores)\nDESCRIPTION: Emphasis and link interaction.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_184\n\nLANGUAGE: markdown\nCODE:\n```\n_foo [bar_](/url)\n```\n\nLANGUAGE: html\nCODE:\n```\n<p>_foo <a href=\"/url\">bar_</a></p>\n```\n\n----------------------------------------\n\nTITLE: Markdown Strong Emphasis: Punctuation and Alphanumeric Restriction Underscores\nDESCRIPTION: Shows that strong emphasis is not generated when underscores are preceded by an alphanumeric and followed by punctuation.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_96\n\nLANGUAGE: markdown\nCODE:\n```\na__\"foo\"__\n.\n<p>a__&quot;foo&quot;__</p>\n```\n\n----------------------------------------\n\nTITLE: Markdown Lazy Continuation Example\nDESCRIPTION: This snippet illustrates a lazy continuation, where a new line is appended to an existing paragraph within a blockquote.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_301\n\nLANGUAGE: tree\nCODE:\n```\n-> document\n  -> block_quote\n    -> paragraph\n         \"Lorem ipsum dolor\\nsit amet.\"\n```\n\n----------------------------------------\n\nTITLE: Emphasis and Code (Asterisks)\nDESCRIPTION: Emphasis and code interaction.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_188\n\nLANGUAGE: markdown\nCODE:\n```\n*a `*`*\n```\n\nLANGUAGE: html\nCODE:\n```\n<p><em>a <code>*</code></em></p>\n```\n\n----------------------------------------\n\nTITLE: Markdown Emphasis: Intraword Asterisk\nDESCRIPTION: Demonstrates that intraword emphasis is allowed with asterisks.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_81\n\nLANGUAGE: markdown\nCODE:\n```\n*foo*bar\n.\n<p><em>foo</em>bar</p>\n```\n\n----------------------------------------\n\nTITLE: Handling Spaces in URI Autolinks\nDESCRIPTION: This example demonstrates the handling of spaces within URI autolinks. `<https://foo.bar/baz bim>` becomes `<p>&lt;https://foo.bar/baz bim&gt;</p>`. Spaces invalidate the autolink, resulting in plain text rendering.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_284\n\nLANGUAGE: markdown\nCODE:\n```\n<https://foo.bar/baz bim>\n.\n<p>&lt;https://foo.bar/baz bim&gt;</p>\n```\n\n----------------------------------------\n\nTITLE: Emphasis and Code (Underscores)\nDESCRIPTION: Emphasis with code using underscores.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_189\n\nLANGUAGE: markdown\nCODE:\n```\n_a `_`_\n```\n\nLANGUAGE: html\nCODE:\n```\n<p><em>a <code>_</code></em></p>\n```\n\n----------------------------------------\n\nTITLE: Reference Link - Consecutive Spaces - Markdown\nDESCRIPTION: Consecutive internal spaces, tabs, and line endings are treated as one space for matching.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_223\n\nLANGUAGE: markdown\nCODE:\n```\n[Foo\n  bar]: /url\n\n[Baz][Foo bar]\n```\n\nLANGUAGE: html\nCODE:\n```\n<p><a href=\"/url\">Baz</a></p>\n```\n\n----------------------------------------\n\nTITLE: Unmatched Asterisk in Emphasis\nDESCRIPTION: Shows an unmatched asterisk in emphasis, rendering * outside the emphasis.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_153\n\nLANGUAGE: markdown\nCODE:\n```\n*foo**\n```\n\nLANGUAGE: html\nCODE:\n```\n<p><em>foo</em>*</p>\n```\n\n----------------------------------------\n\nTITLE: Inline Link - Emphasis Precedence - Markdown\nDESCRIPTION: Illustrates the precedence of link text grouping over emphasis grouping.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_203\n\nLANGUAGE: markdown\nCODE:\n```\n*[foo*](/uri)\n```\n\nLANGUAGE: html\nCODE:\n```\n<p>*<a href=\"/uri\">foo*</a></p>\n```\n\n----------------------------------------\n\nTITLE: Markdown Emphasis: Asterisk inside asterisk\nDESCRIPTION: Illustrates asterisk inside another asterisk\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_120\n\nLANGUAGE: markdown\nCODE:\n```\n*foo *bar**\n.\n<p><em>foo <em>bar</em></em></p>\n```\n\n----------------------------------------\n\nTITLE: Reference Link - No Space Between Text and Label - Markdown\nDESCRIPTION: No spaces, tabs, or line endings are allowed between the [link text] and the [link label].\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_224\n\nLANGUAGE: markdown\nCODE:\n```\n[foo] [bar]\n\n[bar]: /url \"title\"\n```\n\nLANGUAGE: html\nCODE:\n```\n<p>[foo] <a href=\"/url\" title=\"title\">bar</a></p>\n```\n\n----------------------------------------\n\nTITLE: ATX Headings: Closing Sequence\nDESCRIPTION: Demonstrates the use of optional closing '#' sequences.  The closing sequence doesn't need to match the opening sequence's length. Spaces or tabs are allowed after the closing sequence.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_24\n\nLANGUAGE: markdown\nCODE:\n```\n## foo ##\n  ###   bar    ###\n```\n\nLANGUAGE: html\nCODE:\n```\n<h2>foo</h2>\n<h3>bar</h3>\n```\n\n----------------------------------------\n\nTITLE: Markdown Emphasis: Complex nested\nDESCRIPTION: Complex nested emphasis and strong emphasis with asterisks\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_121\n\nLANGUAGE: markdown\nCODE:\n```\n*foo **bar** baz*\n.\n<p><em>foo <strong>bar</strong> baz</em></p>\n```\n\n----------------------------------------\n\nTITLE: Handling Backslash Escapes in Email Autolinks\nDESCRIPTION: This example demonstrates handling backslash escapes inside email autolinks. `<foo\\+@bar.example.com>` becomes `<p>&lt;foo+@bar.example.com&gt;</p>`. Backslash escapes are not processed, invalidating the autolink.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_288\n\nLANGUAGE: markdown\nCODE:\n```\n<foo\\+@bar.example.com>\n.\n<p>&lt;foo+@bar.example.com&gt;</p>\n```\n\n----------------------------------------\n\nTITLE: Markdown Numeric Emphasis with Asterisks\nDESCRIPTION: Illustrates intraword emphasis within numeric strings using asterisks. The \"6\" portion of \"5*6*78\" is rendered with emphasis.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_67\n\nLANGUAGE: markdown\nCODE:\n```\n5*6*78\n```\n\nLANGUAGE: html\nCODE:\n```\n<p>5<em>6</em>78</p>\n```\n\n----------------------------------------\n\nTITLE: Markdown Strong Emphasis: Intraword Underscores Forbidden\nDESCRIPTION: Demonstrates intraword strong emphasis is forbidden with underscores.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_111\n\nLANGUAGE: markdown\nCODE:\n```\n__foo__bar\n.\n<p>__foo__bar</p>\n```\n\n----------------------------------------\n\nTITLE: Handling Backslash Escapes in URI Autolinks\nDESCRIPTION: This example demonstrates handling backslash escapes inside URI autolinks. `<https://example.com/\\[\\>` becomes `<p><a href=\"https://example.com/%5C%5B%5C\">https://example.com/\\[\\</a></p>`. Backslash escapes are interpreted literally within the URI.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_285\n\nLANGUAGE: markdown\nCODE:\n```\n<https://example.com/\\[\\>\n.\n<p><a href=\"https://example.com/%5C%5B%5C\">https://example.com/\\[\\</a></p>\n```\n\n----------------------------------------\n\nTITLE: HTML Block with CDATA Markdown Example\nDESCRIPTION: Demonstrates how markdown-it handles CDATA sections within a Markdown document. This example checks if the parser correctly identifies and preserves CDATA blocks without interpreting their content as Markdown. The input includes a CDATA section containing javascript code followed by text, and the output shows the rendered CDATA section and a paragraph.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_42\n\nLANGUAGE: Markdown\nCODE:\n```\n<![CDATA[\nfunction matchwo(a,b)\n{\n  if (a < b && a < 0) then {\n    return 1;\n\n  } else {\n\n    return 0;\n  }\n}\n]]>\nokay\n.\n<![CDATA[\nfunction matchwo(a,b)\n{\n  if (a < b && a < 0) then {\n    return 1;\n\n  } else {\n\n    return 0;\n  }\n}\n]]>\n<p>okay</p>\n```\n\n----------------------------------------\n\nTITLE: Markdown Emphasis: Mismatched Delimiters\nDESCRIPTION: Illustrates a scenario where emphasis is not created because the closing delimiter does not match the opening delimiter (underscore and asterisk).\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_76\n\nLANGUAGE: markdown\nCODE:\n```\n_foo*\n.\n<p>_foo*</p>\n```\n\n----------------------------------------\n\nTITLE: Markdown Ambiguity Example: Thematic Break in List\nDESCRIPTION: This Markdown example poses a question whether a thematic break (horizontal rule) within a list item splits the list into two separate lists, or if it remains a single list with a thematic break within it.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n* a\n* * * * *\n* b\n```\n\n----------------------------------------\n\nTITLE: Escaping Initial Bracket in Image Description\nDESCRIPTION: This example shows how to escape the initial bracket in an image description. `!\\[foo]\n\n[foo]: /url \"title\"` is rendered as `<p>![foo]</p>`. The backslash prevents the `!` from being interpreted as the start of an image tag.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_274\n\nLANGUAGE: markdown\nCODE:\n```\n!\\[foo]\n\n[foo]: /url \"title\"\n.\n<p>![foo]</p>\n```\n\n----------------------------------------\n\nTITLE: Markdown Strong Emphasis: Complex Nested Example\nDESCRIPTION: Demonstrates a complex example of nested emphasis and strong emphasis.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_105\n\nLANGUAGE: markdown\nCODE:\n```\n**Gomphocarpus (*Gomphocarpus physocarpus*, syn.\n*Asclepias physocarpa*)**\n.\n<p><strong>Gomphocarpus (<em>Gomphocarpus physocarpus</em>, syn.\n<em>Asclepias physocarpa</em>)</strong></p>\n```\n\n----------------------------------------\n\nTITLE: Markdown Numeric Underscore Example\nDESCRIPTION: Demonstrates underscores between numbers. Should not be rendered as emphasis.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_72\n\nLANGUAGE: markdown\nCODE:\n```\n5_6_78\n```\n\nLANGUAGE: html\nCODE:\n```\n<p>5_6_78</p>\n```\n\n----------------------------------------\n\nTITLE: Parsing Reference Link with Spaces\nDESCRIPTION: This example demonstrates that reference links cannot contain only spaces, tabs or line endings, the reference link will not be parsed correctly.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_234\n\nLANGUAGE: markdown\nCODE:\n```\n[\n ]\n\n[\n ]: /uri\n.\n<p>[\n]</p>\n<p>[\n]: /uri</p>\n```\n\n----------------------------------------\n\nTITLE: Strong Emphasis Using Different Delimiters Underscores\nDESCRIPTION: Using underscores\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_172\n\nLANGUAGE: markdown\nCODE:\n```\n__foo__\n```\n\nLANGUAGE: html\nCODE:\n```\n<p><strong>foo</strong></p>\n```\n\n----------------------------------------\n\nTITLE: Markdown Strong Emphasis: Commas and Underscores\nDESCRIPTION: Illustrates how commas and underscores interact to create nested strong emphasis.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_100\n\nLANGUAGE: markdown\nCODE:\n```\n__foo, __bar__, baz__\n.\n<p><strong>foo, <strong>bar</strong>, baz</strong></p>\n```\n\n----------------------------------------\n\nTITLE: Underscores with Strong Emphasis\nDESCRIPTION: More complex test case.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_166\n\nLANGUAGE: markdown\nCODE:\n```\n___foo__\n```\n\nLANGUAGE: html\nCODE:\n```\n<p>_<strong>foo</strong></p>\n```\n\n----------------------------------------\n\nTITLE: Emphasis Using Different Delimiters Asterisk\nDESCRIPTION: Using asterisks.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_173\n\nLANGUAGE: markdown\nCODE:\n```\n_*foo*_\n```\n\nLANGUAGE: html\nCODE:\n```\n<p><em><em>foo</em></em></p>\n```\n\n----------------------------------------\n\nTITLE: Strong Emphasis not closed (Asterisks)\nDESCRIPTION: Strong emphasis not closed with asterisks.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_181\n\nLANGUAGE: markdown\nCODE:\n```\n**foo **bar baz**\n```\n\nLANGUAGE: html\nCODE:\n```\n<p>**foo <strong>bar baz</strong></p>\n```\n\n----------------------------------------\n\nTITLE: Markdown Ambiguity Example: Reference Links in Blockquotes\nDESCRIPTION: This example highlights that some markdown parsers may not support link reference definitions inside blockquotes or list items.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\n> Blockquote [foo].\n>\n> [foo]: /url\n```\n\n----------------------------------------\n\nTITLE: Unmatched Asterisk in Strong Emphasis\nDESCRIPTION: Shows an unmatched asterisk in strong emphasis, rendering * outside the emphasis.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_152\n\nLANGUAGE: markdown\nCODE:\n```\n**foo*\n```\n\nLANGUAGE: html\nCODE:\n```\n<p>*<em>foo</em></p>\n```\n\n----------------------------------------\n\nTITLE: Unmatched Underscores with Emphasis\nDESCRIPTION: Similar to above.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_169\n\nLANGUAGE: markdown\nCODE:\n```\n_foo____\n```\n\nLANGUAGE: html\nCODE:\n```\n<p><em>foo</em>___</p>\n```\n\n----------------------------------------\n\nTITLE: HTML Block with Style Tag Markdown Example\nDESCRIPTION: Demonstrates how markdown-it handles HTML blocks with `<style>` tags. It showcases how the parser recognizes the start and end tags and renders the HTML block accordingly. The input shows a style tag followed by \"foo\", and the expected output is the same.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_33\n\nLANGUAGE: Markdown\nCODE:\n```\n<style\n  type=\"text/css\">\n\nfoo\n.\n<style\n  type=\"text/css\">\n\nfoo\n```\n\n----------------------------------------\n\nTITLE: More Unmatched Asterisks\nDESCRIPTION: More examples of unmatched asterisks with combinations of strong and em.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_155\n\nLANGUAGE: markdown\nCODE:\n```\n****foo*\n```\n\nLANGUAGE: html\nCODE:\n```\n<p>***<em>foo</em></p>\n```\n\n----------------------------------------\n\nTITLE: Markdown Strong Emphasis: Punctuation and Alphanumeric Restriction Underscores\nDESCRIPTION: Demonstrates that strong emphasis is not generated when the underscore is preceded by punctuation and followed by an alphanumeric character.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_109\n\nLANGUAGE: markdown\nCODE:\n```\n__(__foo)\n.\n<p>__(__foo)</p>\n```\n\n----------------------------------------\n\nTITLE: Reference Link - Nested Links - Markdown\nDESCRIPTION: Illustrates that links may not contain other links in a reference link.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_214\n\nLANGUAGE: markdown\nCODE:\n```\n[foo [bar](/uri)][ref]\n\n[ref]: /uri\n```\n\nLANGUAGE: html\nCODE:\n```\n<p>[foo <a href=\"/uri\">bar</a>]<a href=\"/uri\">ref</a></p>\n```\n\n----------------------------------------\n\nTITLE: Markdown Emphasis: Whitespace Before Closing Delimiter\nDESCRIPTION: Shows that emphasis is not generated if there is whitespace before the closing asterisk delimiter.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_77\n\nLANGUAGE: markdown\nCODE:\n```\n*foo bar *\n.\n<p>*foo bar *</p>\n```\n\n----------------------------------------\n\nTITLE: Markdown Emphasis with Underscore\nDESCRIPTION: Demonstrates that emphasis is not generated when underscores are surrounded by alphanumeric characters. The first delimiter is right-flanking and the second is left-flanking, thus not creating emphasis.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_74\n\nLANGUAGE: markdown\nCODE:\n```\naa_\"bb\"_cc\n.\n<p>aa_&quot;bb&quot;_cc</p>\n```\n\n----------------------------------------\n\nTITLE: ATX Headings: More than six '#'\nDESCRIPTION: Illustrates that more than six '#' characters at the beginning of a line are not parsed as a heading. Instead, they are treated as regular text within a paragraph.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_17\n\nLANGUAGE: markdown\nCODE:\n```\n####### foo\n```\n\nLANGUAGE: html\nCODE:\n```\n<p>####### foo</p>\n```\n\n----------------------------------------\n\nTITLE: Markdown Emphasis: Line Ending as Whitespace\nDESCRIPTION: Demonstrates that a line ending is treated as whitespace, preventing emphasis if it precedes the closing asterisk.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_78\n\nLANGUAGE: markdown\nCODE:\n```\n*foo bar\n*\n.\n<p>*foo bar\n*</p>\n```\n\n----------------------------------------\n\nTITLE: Asterisk in Emphasis (Underscores)\nDESCRIPTION: Rendering of an asterisk inside an emphasis made with underscores.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_160\n\nLANGUAGE: markdown\nCODE:\n```\nfoo _*_\n```\n\nLANGUAGE: html\nCODE:\n```\n<p>foo <em>*</em></p>\n```\n\n----------------------------------------\n\nTITLE: ATX Headings: Space Required\nDESCRIPTION: Shows that at least one space or tab is required between the '#' characters and the heading's contents. Without a space, the line is not recognized as a heading and is rendered as plain text.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_18\n\nLANGUAGE: markdown\nCODE:\n```\n#5 bolt\n\n#hashtag\n```\n\nLANGUAGE: html\nCODE:\n```\n<p>#5 bolt</p>\n<p>#hashtag</p>\n```\n\n----------------------------------------\n\nTITLE: Markdown No Emphasis with Unicode Whitespace\nDESCRIPTION: Demonstrates that Unicode non-breaking spaces are treated as whitespace, preventing emphasis from being applied. The asterisks are treated as literal characters.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_64\n\nLANGUAGE: markdown\nCODE:\n```\n* a *\n```\n\nLANGUAGE: html\nCODE:\n```\n<p>* a *</p>\n```\n\n----------------------------------------\n\nTITLE: Markdown Strong Emphasis: Whitespace Before Closing Underscores\nDESCRIPTION: Shows that strong emphasis is not generated if there is whitespace before the closing double underscore delimiter.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_108\n\nLANGUAGE: markdown\nCODE:\n```\n__foo bar __\n.\n<p>__foo bar __</p>\n```\n\n----------------------------------------\n\nTITLE: Markdown No Emphasis Due to Whitespace with Underscores\nDESCRIPTION: Illustrates a case where emphasis is not applied because the opening underscore is followed by whitespace. The text remains unformatted.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_69\n\nLANGUAGE: markdown\nCODE:\n```\n_ foo bar_\n```\n\nLANGUAGE: html\nCODE:\n```\n<p>_ foo bar_</p>\n```\n\n----------------------------------------\n\nTITLE: Reference Link - Nested Links 2 - Markdown\nDESCRIPTION: Demonstrates that links may not contain other links, even with emphasis, within a reference link.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_215\n\nLANGUAGE: markdown\nCODE:\n```\n[foo *bar [baz][ref]*][ref]\n\n[ref]: /uri\n```\n\nLANGUAGE: html\nCODE:\n```\n<p>[foo <em>bar <a href=\"/uri\">baz</a></em>]<a href=\"/uri\">ref</a></p>\n```\n\n----------------------------------------\n\nTITLE: Escaped Underscore in Emphasis\nDESCRIPTION: Escaping an underscore in emphasis.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_159\n\nLANGUAGE: markdown\nCODE:\n```\nfoo _\\__\n```\n\nLANGUAGE: html\nCODE:\n```\n<p>foo <em>_</em></p>\n```\n\n----------------------------------------\n\nTITLE: Multiple Unmatched Asterisks\nDESCRIPTION: Shows multiple unmatched asterisks.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_149\n\nLANGUAGE: markdown\nCODE:\n```\nfoo *****\n```\n\nLANGUAGE: html\nCODE:\n```\n<p>foo *****</p>\n```\n\n----------------------------------------\n\nTITLE: Parsing Escaped Bracket in Link\nDESCRIPTION: This example shows how to prevent a link from being created by backslash-escaping the opening bracket. The text `[foo]` is treated as plain text.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_245\n\nLANGUAGE: markdown\nCODE:\n```\n\\[foo]\n\n[foo]: /url \"title\"\n.\n<p>[foo]</p>\n```\n\n----------------------------------------\n\nTITLE: Asterisk in Strong Emphasis\nDESCRIPTION: Shows an asterisk inside strong emphasis made with underscores.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_163\n\nLANGUAGE: markdown\nCODE:\n```\nfoo __*__\n```\n\nLANGUAGE: html\nCODE:\n```\n<p>foo <strong>*</strong></p>\n```\n\n----------------------------------------\n\nTITLE: Unmatched Asterisks in Strong Emphasis\nDESCRIPTION: Shows multiple unmatched asterisks and the result.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_154\n\nLANGUAGE: markdown\nCODE:\n```\n***foo**\n```\n\nLANGUAGE: html\nCODE:\n```\n<p>*<strong>foo</strong></p>\n```\n\n----------------------------------------\n\nTITLE: Parsing Empty Reference Link\nDESCRIPTION: This example shows that an empty reference link `[]` without any characters inside the brackets is treated as plain text, not as a valid link.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_233\n\nLANGUAGE: markdown\nCODE:\n```\n[]\n\n[]: /uri\n.\n<p>[]</p>\n<p>[]: /uri</p>\n```\n\n----------------------------------------\n\nTITLE: Markdown Strong Emphasis: Line Ending as Whitespace Underscores\nDESCRIPTION: Demonstrates that a line ending counts as whitespace and prevents strong emphasis using underscores.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_95\n\nLANGUAGE: markdown\nCODE:\n```\n__\nfoo bar__\n.\n<p>__\nfoo bar__</p>\n```\n\n----------------------------------------\n\nTITLE: Invalid Email Autolink - Invalid Scheme\nDESCRIPTION: This example demonstrates an invalid email autolink with an invalid scheme. `<m:abc>` becomes `<p>&lt;m:abc&gt;</p>`. The scheme `m` is not a valid scheme, invalidating the autolink.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_291\n\nLANGUAGE: markdown\nCODE:\n```\n<m:abc>\n.\n<p>&lt;m:abc&gt;</p>\n```\n\n----------------------------------------\n\nTITLE: ATX Headings: Variable Closing Length\nDESCRIPTION: Demonstrates that the closing '#' sequence does not need to be the same length as the opening sequence.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_25\n\nLANGUAGE: markdown\nCODE:\n```\n# foo ##################################\n##### foo ##\n```\n\nLANGUAGE: html\nCODE:\n```\n<h1>foo</h1>\n<h5>foo</h5>\n```\n\n----------------------------------------\n\nTITLE: Handling Spaces in Collapsed Reference\nDESCRIPTION: This example showcases the handling of spaces within collapsed reference links. `![foo] \n[]\n\n[foo]: /url \"title\"` becomes `<p><img src=\"/url\" alt=\"foo\" title=\"title\" />\n[]</p>`. The parser does not allow spaces between the brackets in a collapsed reference.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_269\n\nLANGUAGE: markdown\nCODE:\n```\n![foo] \n[]\n\n[foo]: /url \"title\"\n.\n<p><img src=\"/url\" alt=\"foo\" title=\"title\" />\n[]</p>\n```\n\n----------------------------------------\n\nTITLE: ATX Headings: Escaped '#' in Closing\nDESCRIPTION: Demonstrates that backslash-escaped '#' characters do not count as part of the closing sequence.  The escaped '#' characters are rendered as literal '#' characters within the heading.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_29\n\nLANGUAGE: markdown\nCODE:\n```\n### foo \\###\n## foo #\\##\n# foo \\#\n```\n\nLANGUAGE: html\nCODE:\n```\n<h3>foo ###</h3>\n<h2>foo ###</h2>\n<h1>foo #</h1>\n```\n\n----------------------------------------\n\nTITLE: Markdown No Emphasis Due to Whitespace\nDESCRIPTION: Illustrates a case where emphasis is not applied because the opening asterisk is followed by whitespace. The text remains unformatted.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_62\n\nLANGUAGE: markdown\nCODE:\n```\na * foo bar*\n```\n\nLANGUAGE: html\nCODE:\n```\n<p>a * foo bar*</p>\n```\n\n----------------------------------------\n\nTITLE: Invalid Email Autolink - Empty Brackets\nDESCRIPTION: This example demonstrates an invalid email autolink consisting of empty brackets. `<>` becomes `<p>&lt;&gt;</p>`. This is not recognized as a valid autolink.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_289\n\nLANGUAGE: markdown\nCODE:\n```\n<>\n.\n<p>&lt;&gt;</p>\n```\n\n----------------------------------------\n\nTITLE: Markdown Input Example\nDESCRIPTION: This is a set of Markdown input lines that will be used to generate a document tree.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_305\n\nLANGUAGE: markdown\nCODE:\n```\n> Lorem ipsum dolor\nsit amet.\n> - Qui *quodsi iracundia*\n> - aliquando id\n```\n\n----------------------------------------\n\nTITLE: Empty Emphasis Prevention\nDESCRIPTION: Demonstrates that empty emphasis or strong emphasis is not allowed and is rendered as plain text.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_130\n\nLANGUAGE: markdown\nCODE:\n```\n** is not an empty emphasis\n```\n\nLANGUAGE: html\nCODE:\n```\n<p>** is not an empty emphasis</p>\n```\n\n----------------------------------------\n\nTITLE: Markdown Ambiguity Example: Loose/Tight Lists\nDESCRIPTION: This example shows the ambiguity of loose and tight lists, and whether a list can be partially loose and partially tight. It highlights inconsistent rendering between different implementations.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n1. one\n\n2. two\n3. three\n```\n\n----------------------------------------\n\nTITLE: Plain Text Email\nDESCRIPTION: This example shows a plain text email address, not enclosed in brackets. `foo@bar.example.com` remains `foo@bar.example.com`. It is not automatically converted to a link.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_294\n\nLANGUAGE: markdown\nCODE:\n```\nfoo@bar.example.com\n.\n<p>foo@bar.example.com</p>\n```\n\n----------------------------------------\n\nTITLE: Markdown Ambiguity Example: Nested Lists\nDESCRIPTION: This example explores the interpretation of nested lists and how blank lines affect the structure. The expected output and parsing rules vary between implementations.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n1.  one\n    - a\n\n    - b\n2.  two\n```\n\n----------------------------------------\n\nTITLE: Empty Strong Emphasis (Multiple Underscores)\nDESCRIPTION: Demonstrates that four underscores results in plain text.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_145\n\nLANGUAGE: markdown\nCODE:\n```\n____ is not an empty strong emphasis\n```\n\nLANGUAGE: html\nCODE:\n```\n<p>____ is not an empty strong emphasis</p>\n```\n\n----------------------------------------\n\nTITLE: Markdown List with Intervening Paragraphs\nDESCRIPTION: This snippet demonstrates how the four-space rule in some Markdown implementations can lead to unexpected parsing results, where an intervening paragraph breaks a list into multiple separate lists.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_52\n\nLANGUAGE: markdown\nCODE:\n```\n- foo\n\n  bar\n\n  - baz\n```\n\n----------------------------------------\n\nTITLE: Underscore in Strong Emphasis\nDESCRIPTION: Illustrates an underscore in strong emphasis.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_151\n\nLANGUAGE: markdown\nCODE:\n```\nfoo **_**\n```\n\nLANGUAGE: html\nCODE:\n```\n<p>foo <strong>_</strong></p>\n```\n\n----------------------------------------\n\nTITLE: HTML Output for List with Intervening Paragraphs (Incorrect)\nDESCRIPTION: This shows the incorrect HTML output that results from applying the four-space rule to the previous Markdown snippet, resulting in three separate list items instead of a nested structure.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_53\n\nLANGUAGE: html\nCODE:\n```\n<ul>\n<li>foo</li>\n</ul>\n<p>bar</p>\n<ul>\n<li>baz</li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Installing markdown-it with npm\nDESCRIPTION: This command installs the markdown-it package using Node Package Manager (npm). It's the standard way to add markdown-it as a dependency to a Node.js project.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/support/api_header.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install markdown-it\n```\n\n----------------------------------------\n\nTITLE: Unmatched Underscores with Emphasis\nDESCRIPTION: Unmatched underscores at the end with emphasis.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_168\n\nLANGUAGE: markdown\nCODE:\n```\n__foo___\n```\n\nLANGUAGE: html\nCODE:\n```\n<p><strong>foo</strong>_</p>\n```\n\n----------------------------------------\n\nTITLE: Inline Link - Unbalanced Brackets 2 - Markdown\nDESCRIPTION: Illustrates how an unclosed bracket in link text can lead to unexpected HTML structure.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_196\n\nLANGUAGE: markdown\nCODE:\n```\n[link [bar](/uri)\n```\n\nLANGUAGE: html\nCODE:\n```\n<p>[link <a href=\"/uri\">bar</a></p>\n```\n\n----------------------------------------\n\nTITLE: HTML Output for List with Continuation Paragraph\nDESCRIPTION: This is the HTML output corresponding to the `Markdown.pl` parsing of the previous snippet, where 'two' is treated as a continuation paragraph of the 'one' list item.\nSOURCE: https://github.com/markdown-it/markdown-it/blob/master/test/fixtures/commonmark/spec.txt#_snippet_56\n\nLANGUAGE: html\nCODE:\n```\n<ul>\n<li>\n<p>one</p>\n<p>two</p>\n</li>\n</ul>\n```"
  }
]