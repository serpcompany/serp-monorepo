[
  {
    "owner": "icflorescu",
    "repo": "mantine-datatable",
    "content": "TITLE: Implementing a Basic Mantine DataTable with Custom Column Rendering\nDESCRIPTION: Demonstrates how to create a basic DataTable component with custom column configuration, including custom titles, text alignment, and cell data rendering. The example also shows how to handle row click events.\nSOURCE: https://github.com/icflorescu/mantine-datatable/blob/main/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n'use client';\n\nimport { Box } from '@mantine/core';\nimport { showNotification } from '@mantine/notifications';\nimport { DataTable } from 'mantine-datatable';\n\nexport function GettingStartedExample() {\n  return (\n    <DataTable\n      withTableBorder\n      borderRadius=\"sm\"\n      withColumnBorders\n      striped\n      highlightOnHover\n      // ðŸ‘‡ provide data\n      records={[\n        { id: 1, name: 'Joe Biden', bornIn: 1942, party: 'Democratic' },\n        // more records...\n      ]}\n      // ðŸ‘‡ define columns\n      columns={[\n        {\n          accessor: 'id',\n          // ðŸ‘‡ this column has a custom title\n          title: '#',\n          // ðŸ‘‡ right-align column\n          textAlign: 'right',\n        },\n        { accessor: 'name' },\n        {\n          accessor: 'party',\n          // ðŸ‘‡ this column has custom cell data rendering\n          render: ({ party }) => (\n            <Box fw={700} c={party === 'Democratic' ? 'blue' : 'red'}>\n              {party.slice(0, 3).toUpperCase()}\n            </Box>\n          ),\n        },\n        { accessor: 'bornIn' },\n      ]}\n      // ðŸ‘‡ execute this callback when a row is clicked\n      onRowClick={({ record: { name, party, bornIn } }) =>\n        showNotification({\n          title: `Clicked on ${name}`,\n          message: `You clicked on ${name}, a ${party.toLowerCase()} president born in ${bornIn}`,\n          withBorder: true,\n        })\n      }\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Mantine DataTable CSS styles with proper layering\nDESCRIPTION: Shows how to import the necessary CSS files for Mantine DataTable and how to apply styles in the correct order using CSS layers.\nSOURCE: https://github.com/icflorescu/mantine-datatable/blob/main/README.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport '@mantine/core/styles.layer.css';\nimport 'mantine-datatable/styles.layer.css';\nimport './layout.css';\n```\n\nLANGUAGE: css\nCODE:\n```\n/* layout.css */\n/* ðŸ‘‡ Apply Mantine core styles first, DataTable styles second */\n@layer mantine, mantine-datatable;\n```\n\n----------------------------------------\n\nTITLE: Running Development Server with Yarn\nDESCRIPTION: This command starts the development server, typically for local development and testing. It uses Yarn to execute a predefined script. It is essential for developers to see live changes while working on the project.\nSOURCE: https://github.com/icflorescu/mantine-datatable/blob/main/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Initializing Project with Yarn\nDESCRIPTION: This snippet explains how to install project dependencies using Yarn, a package manager.  It assumes a `yarn.lock` file is present in the project root, indicating that Yarn is the preferred package manager.  It ensures all dependencies are installed before running any scripts, thus making it easier to run the other scripts.\nSOURCE: https://github.com/icflorescu/mantine-datatable/blob/main/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Linting Code with Yarn\nDESCRIPTION: This command checks the code for linting errors using a linter defined in the project. It helps maintain code quality and consistency by identifying and reporting code style issues and potential errors. It should be run before submitting any code changes.\nSOURCE: https://github.com/icflorescu/mantine-datatable/blob/main/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn lint\n```\n\n----------------------------------------\n\nTITLE: Formatting Code with Yarn and Prettier\nDESCRIPTION: This command automatically formats the code using Prettier, adhering to the project's coding style. Prettier helps maintain a consistent coding style across the project, making the code easier to read and understand. Running this command helps in standardization.\nSOURCE: https://github.com/icflorescu/mantine-datatable/blob/main/CONTRIBUTING.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nyarn format\n```\n\n----------------------------------------\n\nTITLE: Building Code with Yarn\nDESCRIPTION: This command compiles the code and checks for any compilation errors.  It prepares the code for deployment and ensures that the codebase compiles correctly. This is a critical step before any deployment or pull request.\nSOURCE: https://github.com/icflorescu/mantine-datatable/blob/main/CONTRIBUTING.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nyarn build\n```"
  }
]