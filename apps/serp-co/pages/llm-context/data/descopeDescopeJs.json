[
  {
    "owner": "descope",
    "repo": "descope-js",
    "content": "TITLE: Implementing Sign-Up Form with Password in React\nDESCRIPTION: A React component for a sign-up form using Descope SDK. It captures user information and uses the password.signUp method to register a new user with their email and password.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/libs/escape-markdown/README.md#2025-04-22_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { useDescope } from '@descope/react-sdk';\n\nexport default function CustomSignUpForm() {\n  const { sdk } = useDescope();\n  \n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState(false);\n  \n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setError('');\n    \n    try {\n      // Sign up the user with password\n      await sdk.password.signUp(email, password, {\n        name: name,\n        // You can add more user attributes here as needed\n      });\n      \n      setSuccess(true);\n      // You can choose to redirect the user or show a success message\n    } catch (err) {\n      setError(err.message || 'Sign up failed. Please try again.');\n      console.error('Sign up error:', err);\n    }\n  };\n\n  if (success) {\n    return (\n      <div className=\"success-message\">\n        <h2>Account Created!</h2>\n        <p>Your account has been successfully created. You can now login.</p>\n        {/* Add a link to your login page */}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"custom-form\">\n      <h2>Create a New Account</h2>\n      {error && <div className=\"error-message\">{error}</div>}\n      \n      <form onSubmit={handleSubmit}>\n        <div className=\"form-group\">\n          <label htmlFor=\"name\">Full Name:</label>\n          <input\n            id=\"name\"\n            type=\"text\"\n            value={name}\n            onChange={(e) => setName(e.target.value)}\n            required\n          />\n        </div>\n        \n        <div className=\"form-group\">\n          <label htmlFor=\"email\">Email:</label>\n          <input\n            id=\"email\"\n            type=\"email\"\n            value={email}\n            onChange={(e) => setEmail(e.target.value)}\n            required\n          />\n        </div>\n        \n        <div className=\"form-group\">\n          <label htmlFor=\"password\">Password:</label>\n          <input\n            id=\"password\"\n            type=\"password\"\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n            required\n          />\n        </div>\n        \n        <button type=\"submit\" className=\"submit-button\">\n          Sign Up\n        </button>\n      </form>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Performing Authentication with Descope SDK in JavaScript\nDESCRIPTION: Example of using the Descope SDK to perform email OTP (One-Time Password) authentication, including sending the OTP and verifying it.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/sdks/web-js-sdk/README.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst userIdentifier = 'identifier';\nlet res = await sdk.otp.signIn.email(userIdentifier);\nif (!res.ok) {\n  throw Error('Failed to sign in');\n}\n\n// Get the one time code from email and verify it\nconst codeFromEmail = '1234';\nres = await sdk.otp.verify.email(userIdentifier, codeFromEmail);\nif (!res.ok) {\n  throw Error('Failed to sign in');\n}\n\n// Get session token\nconst sessionToken = sdk.getSessionToken();\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-In Flow Component Logic\nDESCRIPTION: TypeScript component implementation for handling Descope authentication flow events such as successful login, errors, and component readiness. Demonstrates event handling for the sign-in flow.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/sdks/angular-sdk/README.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html'\n})\nexport class AppComponent {\n  // Optionally, you can show/hide loading indication until the flow page is ready\n  // See usage in onReady() method and the html template\n  isLoading = true;\n\n  onSuccess(e: CustomEvent) {\n    console.log('SUCCESSFULLY LOGGED IN', e.detail);\n  }\n\n  onError(e: CustomEvent) {\n    console.log('ERROR FROM LOG IN FLOW', e.detail);\n  }\n\n  onReady() {\n    this.isLoading = false;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication State Management with Descope React Hooks\nDESCRIPTION: Example showing how to use useDescope, useSession, and useUser hooks to manage authentication state, user details, and logout functionality within a React component. Must be used within AuthProvider context.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/sdks/react-sdk/README.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useDescope, useSession, useUser } from '@descope/react-sdk';\nimport { useCallback } from 'react';\n\nconst App = () => {\n  const { isAuthenticated, isSessionLoading, sessionToken } = useSession();\n  const { user, isUserLoading } = useUser();\n  const sdk = useDescope();\n\n  if (isSessionLoading || isUserLoading) {\n    return <p>Loading...</p>;\n  }\n\n  const handleLogout = useCallback(() => {\n    sdk.logout();\n  }, [sdk]);\n\n  if (isAuthenticated) {\n    return (\n      <>\n        <p>Hello {user.name}</p>\n        <button onClick={handleLogout}>Logout</button>\n      </>\n    );\n  }\n\n  return <p>You are not logged in</p>;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Descope AuthProvider\nDESCRIPTION: Setup for wrapping the React application with Descope's AuthProvider component, including project ID configuration and optional base URL for cookie management\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/sdks/react-sdk/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { AuthProvider } from '@descope/react-sdk';\n\nconst AppRoot = () => {\n  return (\n    <AuthProvider\n      projectId=\"my-project-id\"\n      // If the Descope project manages the token response in cookies, a custom domain\n      // must be configured (e.g., https://auth.app.example.com)\n      // and should be set as the baseUrl property.\n      // baseUrl = \"https://auth.app.example.com\"\n    >\n      <App />\n    </AuthProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Creating OTP (One-Time Password) Authentication Form in React\nDESCRIPTION: A React component that implements OTP-based authentication using Descope SDK. It first sends a one-time code to the user's email or phone, then validates the code to complete authentication.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/libs/escape-markdown/README.md#2025-04-22_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { useDescope } from '@descope/react-sdk';\n\nexport default function OTPAuthForm() {\n  const { sdk } = useDescope();\n  \n  const [step, setStep] = useState('request'); // 'request', 'verify'\n  const [loginId, setLoginId] = useState('');\n  const [code, setCode] = useState('');\n  const [error, setError] = useState('');\n  const [method, setMethod] = useState('email'); // 'email' or 'sms'\n  \n  const handleRequestCode = async (e) => {\n    e.preventDefault();\n    setError('');\n    \n    try {\n      if (method === 'email') {\n        await sdk.otp.emailSignIn(loginId);\n      } else if (method === 'sms') {\n        await sdk.otp.smsSignIn(loginId);\n      }\n      setStep('verify');\n    } catch (err) {\n      setError(err.message || `Failed to send code to ${method}. Please try again.`);\n      console.error('OTP request error:', err);\n    }\n  };\n  \n  const handleVerifyCode = async (e) => {\n    e.preventDefault();\n    setError('');\n    \n    try {\n      if (method === 'email') {\n        await sdk.otp.verifyEmail(loginId, code);\n      } else if (method === 'sms') {\n        await sdk.otp.verifySms(loginId, code);\n      }\n      // On successful verification, the session will be established\n      // and you can redirect the user or show a success message\n    } catch (err) {\n      setError(err.message || 'Invalid code. Please try again.');\n      console.error('OTP verification error:', err);\n    }\n  };\n\n  return (\n    <div className=\"custom-form\">\n      <h2>Sign In with One-Time Code</h2>\n      {error && <div className=\"error-message\">{error}</div>}\n      \n      <div className=\"method-toggle\">\n        <button \n          className={method === 'email' ? 'active' : ''}\n          onClick={() => setMethod('email')}\n          type=\"button\"\n        >\n          Email\n        </button>\n        <button \n          className={method === 'sms' ? 'active' : ''}\n          onClick={() => setMethod('sms')}\n          type=\"button\"\n        >\n          SMS\n        </button>\n      </div>\n      \n      {step === 'request' ? (\n        <form onSubmit={handleRequestCode}>\n          <div className=\"form-group\">\n            <label htmlFor=\"loginId\">\n              {method === 'email' ? 'Email:' : 'Phone Number:'}\n            </label>\n            <input\n              id=\"loginId\"\n              type={method === 'email' ? 'email' : 'tel'}\n              value={loginId}\n              onChange={(e) => setLoginId(e.target.value)}\n              placeholder={method === 'email' ? 'your@email.com' : '+1234567890'}\n              required\n            />\n          </div>\n          \n          <button type=\"submit\" className=\"submit-button\">\n            Send Code\n          </button>\n        </form>\n      ) : (\n        <form onSubmit={handleVerifyCode}>\n          <p>\n            {method === 'email' \n              ? 'A code has been sent to your email address.' \n              : 'A code has been sent to your phone number.'}\n          </p>\n          \n          <div className=\"form-group\">\n            <label htmlFor=\"code\">Verification Code:</label>\n            <input\n              id=\"code\"\n              type=\"text\"\n              value={code}\n              onChange={(e) => setCode(e.target.value)}\n              placeholder=\"Enter verification code\"\n              required\n            />\n          </div>\n          \n          <button type=\"submit\" className=\"submit-button\">\n            Verify Code\n          </button>\n          \n          <button \n            type=\"button\" \n            className=\"resend-button\"\n            onClick={handleRequestCode}\n          >\n            Resend Code\n          </button>\n        </form>\n      )}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing and Configuring Descope SDK in JavaScript\nDESCRIPTION: Example of importing and initializing the Descope SDK with various configuration options, including project ID, token persistence, session token management, and auto-refresh settings.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/sdks/web-js-sdk/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport descopeSdk from '@descope/web-js-sdk';\n\nconst myProjectId = 'xxx';\n\nconst sdk = descopeSdk({\n  projectId: myProjectId,\n  persistTokens: true,\n  sessionTokenViaCookie: false,\n  autoRefresh: true,\n  storeLastAuthenticatedUser: false,\n  keepLastAuthenticatedUserAfterLogout: true,\n  refreshCookieName: \"cookie-1\",\n  getExternalToken: async () => {\n    return 'my-external-token';\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Magic Link Authentication Form in React\nDESCRIPTION: A React component for passwordless authentication using Magic Links with Descope SDK. The user provides their email and receives a secure link that authenticates them when clicked, without requiring a password.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/libs/escape-markdown/README.md#2025-04-22_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { useDescope } from '@descope/react-sdk';\n\nexport default function MagicLinkForm() {\n  const { sdk } = useDescope();\n  \n  const [email, setEmail] = useState('');\n  const [error, setError] = useState('');\n  const [sent, setSent] = useState(false);\n  \n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setError('');\n    \n    try {\n      // Request a magic link to be sent to the user's email\n      // The current URL will be used as redirect URL after authentication\n      await sdk.magicLink.signIn(email, window.location.href);\n      setSent(true);\n    } catch (err) {\n      setError(err.message || 'Failed to send magic link. Please try again.');\n      console.error('Magic link error:', err);\n    }\n  };\n\n  if (sent) {\n    return (\n      <div className=\"success-message\">\n        <h2>Check Your Email</h2>\n        <p>We've sent a secure link to <strong>{email}</strong>.</p>\n        <p>Click the link in the email to sign in to your account.</p>\n        <button \n          onClick={() => setSent(false)} \n          className=\"back-button\"\n        >\n          Back to Login\n        </button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"custom-form\">\n      <h2>Sign In with Magic Link</h2>\n      <p>Enter your email to receive a secure, passwordless login link.</p>\n      \n      {error && <div className=\"error-message\">{error}</div>}\n      \n      <form onSubmit={handleSubmit}>\n        <div className=\"form-group\">\n          <label htmlFor=\"email\">Email:</label>\n          <input\n            id=\"email\"\n            type=\"email\"\n            value={email}\n            onChange={(e) => setEmail(e.target.value)}\n            placeholder=\"your@email.com\"\n            required\n          />\n        </div>\n        \n        <button type=\"submit\" className=\"submit-button\">\n          Send Magic Link\n        </button>\n      </form>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing User Management Widget in Vue\nDESCRIPTION: Demonstrates how to use the UserManagement widget component to embed a user management table in your application. This allows creation, editing, activating/disabling users, password resets, and more within a specific tenant.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/sdks/vue-sdk/README.md#2025-04-22_snippet_8\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <UserManagement tenant=\"tenant-id\" widget-id=\"user-management-widget\" />\n</template>\n\n<script setup>\nimport { UserManagement } from '@descope/vue-sdk';\n</script>\n```\n\n----------------------------------------\n\nTITLE: Initializing Descope Plugin in Vue Application\nDESCRIPTION: Setup code to initialize the Descope plugin in a Vue application with project configuration options.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/sdks/vue-sdk/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport App from './App.vue';\nimport descope from '@descope/vue-sdk';\n\nconst app = createApp(App);\napp.use(descope, {\n  projectId: 'my-project-id',\n  // baseUrl: https://auth.app.example.com'\n});\napp.mount('#app');\n```\n\n----------------------------------------\n\nTITLE: Creating Password Reset Form with Descope SDK in React\nDESCRIPTION: A React component for password reset utilizing Descope SDK. The form handles the initial email submission to trigger a reset code, then allows the user to input the code and create a new password.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/libs/escape-markdown/README.md#2025-04-22_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { useDescope } from '@descope/react-sdk';\n\nexport default function CustomPasswordResetForm() {\n  const { sdk } = useDescope();\n  \n  // Track the step of the reset process\n  const [step, setStep] = useState('request'); // 'request', 'reset', 'success'\n  const [email, setEmail] = useState('');\n  const [code, setCode] = useState('');\n  const [newPassword, setNewPassword] = useState('');\n  const [error, setError] = useState('');\n  \n  const handleRequestReset = async (e) => {\n    e.preventDefault();\n    setError('');\n    \n    try {\n      // Request password reset\n      await sdk.password.sendPasswordReset(email);\n      setStep('reset');\n    } catch (err) {\n      setError(err.message || 'Failed to request password reset. Please try again.');\n      console.error('Password reset request error:', err);\n    }\n  };\n  \n  const handleResetPassword = async (e) => {\n    e.preventDefault();\n    setError('');\n    \n    try {\n      // Verify the code and set the new password\n      await sdk.password.resetPassword(email, code, newPassword);\n      setStep('success');\n    } catch (err) {\n      setError(err.message || 'Failed to reset password. Please check your code and try again.');\n      console.error('Password reset error:', err);\n    }\n  };\n\n  if (step === 'success') {\n    return (\n      <div className=\"success-message\">\n        <h2>Password Reset Successful!</h2>\n        <p>Your password has been updated. You can now login with your new password.</p>\n        {/* Add a link to your login page */}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"custom-form\">\n      <h2>Reset Your Password</h2>\n      {error && <div className=\"error-message\">{error}</div>}\n      \n      {step === 'request' ? (\n        <form onSubmit={handleRequestReset}>\n          <p>Enter your email address to receive a password reset code.</p>\n          <div className=\"form-group\">\n            <label htmlFor=\"email\">Email:</label>\n            <input\n              id=\"email\"\n              type=\"email\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n              required\n            />\n          </div>\n          \n          <button type=\"submit\" className=\"submit-button\">\n            Request Reset Code\n          </button>\n        </form>\n      ) : (\n        <form onSubmit={handleResetPassword}>\n          <p>Check your email for the reset code and enter it below along with your new password.</p>\n          \n          <div className=\"form-group\">\n            <label htmlFor=\"code\">Reset Code:</label>\n            <input\n              id=\"code\"\n              type=\"text\"\n              value={code}\n              onChange={(e) => setCode(e.target.value)}\n              required\n            />\n          </div>\n          \n          <div className=\"form-group\">\n            <label htmlFor=\"newPassword\">New Password:</label>\n            <input\n              id=\"newPassword\"\n              type=\"password\"\n              value={newPassword}\n              onChange={(e) => setNewPassword(e.target.value)}\n              required\n            />\n          </div>\n          \n          <button type=\"submit\" className=\"submit-button\">\n            Reset Password\n          </button>\n        </form>\n      )}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Applications Portal Widget in Vue\nDESCRIPTION: Shows how to use the ApplicationsPortal widget to embed an applications portal component that allows users to access applications they are assigned to.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/sdks/vue-sdk/README.md#2025-04-22_snippet_13\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <ApplicationsPortal widget-id=\"applications-portal-widget\" />\n</template>\n\n<script setup>\nimport { ApplicationsPortal } from '@descope/vue-sdk';\n</script>\n```\n\n----------------------------------------\n\nTITLE: Installing Descope SDK via npm\nDESCRIPTION: Command to install the Descope Angular SDK package using npm. This is the first step to integrate Descope authentication into your Angular application.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/sdks/angular-sdk/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i --save @descope/angular-sdk\n```\n\n----------------------------------------\n\nTITLE: Implementing User Profile Management in React with Descope SDK\nDESCRIPTION: A React component for managing user profile data using Descope SDK. It allows users to view and update their profile information, including name, email, and other attributes stored in the Descope user management system.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/libs/escape-markdown/README.md#2025-04-22_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState, useEffect } from 'react';\nimport { useDescope, useUser } from '@descope/react-sdk';\n\nexport default function UserProfileForm() {\n  const { sdk } = useDescope();\n  const { user, refresh } = useUser();\n  \n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    phone: '',\n    // Add any other user attributes you want to display/edit\n  });\n  const [isEditing, setIsEditing] = useState(false);\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n  \n  // Load user data when component mounts\n  useEffect(() => {\n    if (user) {\n      setFormData({\n        name: user.name || '',\n        email: user.email || '',\n        phone: user.phone || '',\n        // Map other user attributes as needed\n      });\n    }\n  }, [user]);\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setFormData((prev) => ({ ...prev, [name]: value }));\n  };\n  \n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setError('');\n    setSuccess('');\n    \n    try {\n      // Update user profile information\n      await sdk.user.updateSelf({\n        name: formData.name,\n        email: formData.email,\n        phone: formData.phone,\n        // Include other attributes as needed\n      });\n      \n      // Refresh user information\n      await refresh();\n      \n      setIsEditing(false);\n      setSuccess('Profile updated successfully!');\n    } catch (err) {\n      setError(err.message || 'Failed to update profile. Please try again.');\n      console.error('Profile update error:', err);\n    }\n  };\n\n  if (!user) {\n    return <p>Please login to view your profile.</p>;\n  }\n\n  return (\n    <div className=\"user-profile\">\n      <h2>Your Profile</h2>\n      \n      {error && <div className=\"error-message\">{error}</div>}\n      {success && <div className=\"success-message\">{success}</div>}\n      \n      {isEditing ? (\n        <form onSubmit={handleSubmit}>\n          <div className=\"form-group\">\n            <label htmlFor=\"name\">Full Name:</label>\n            <input\n              id=\"name\"\n              name=\"name\"\n              type=\"text\"\n              value={formData.name}\n              onChange={handleChange}\n            />\n          </div>\n          \n          <div className=\"form-group\">\n            <label htmlFor=\"email\">Email:</label>\n            <input\n              id=\"email\"\n              name=\"email\"\n              type=\"email\"\n              value={formData.email}\n              onChange={handleChange}\n            />\n          </div>\n          \n          <div className=\"form-group\">\n            <label htmlFor=\"phone\">Phone Number:</label>\n            <input\n              id=\"phone\"\n              name=\"phone\"\n              type=\"tel\"\n              value={formData.phone}\n              onChange={handleChange}\n            />\n          </div>\n          \n          <div className=\"button-group\">\n            <button type=\"submit\" className=\"submit-button\">\n              Save Changes\n            </button>\n            <button \n              type=\"button\" \n              className=\"cancel-button\"\n              onClick={() => setIsEditing(false)}\n            >\n              Cancel\n            </button>\n          </div>\n        </form>\n      ) : (\n        <div className=\"profile-info\">\n          <div className=\"info-row\">\n            <strong>Name:</strong> {formData.name || 'Not set'}\n          </div>\n          <div className=\"info-row\">\n            <strong>Email:</strong> {formData.email || 'Not set'}\n          </div>\n          <div className=\"info-row\">\n            <strong>Phone:</strong> {formData.phone || 'Not set'}\n          </div>\n          \n          <button \n            onClick={() => setIsEditing(true)} \n            className=\"edit-button\"\n          >\n            Edit Profile\n          </button>\n        </div>\n      )}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Descope SDK in JavaScript\nDESCRIPTION: This snippet shows how to initialize the Descope SDK with a project ID. It sets up the base URL and creates an instance of the SDK.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/libs/sdk-mixins/README.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Descope } from '@descope/web-js-sdk';\n\nconst sdk = Descope({\n    projectId: 'P2_XX...XX',\n    baseUrl: 'https://api.descope.com',\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using Descope JavaScript SDK\nDESCRIPTION: This snippet demonstrates how to import, initialize, and use the Descope SDK. It creates an SDK instance with a project ID and performs an email sign-in operation.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/sdks/core-js-sdk/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport createSdk from '@descope/core-js-sdk';\n\nconst projectId = '<project-id>';\n\nconst sdk = createSdk({ projectId });\n\nconst loginId = 'loginId';\n\nsdk.otp.signIn.email(loginId);\n```\n\n----------------------------------------\n\nTITLE: Using DescopeAuthService for Auth State Management\nDESCRIPTION: TypeScript component implementation demonstrating how to use the DescopeAuthService to track authentication state and user details. Shows how to subscribe to session and user observables and implement logout functionality.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/sdks/angular-sdk/README.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Component, OnInit } from '@angular/core';\nimport { DescopeAuthService } from '@descope/angular-sdk';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent implements OnInit {\n  isAuthenticated: boolean = false;\n  userName: string = '';\n\n  constructor(private authService: DescopeAuthService) {}\n\n  ngOnInit() {\n    this.authService.session$.subscribe((session) => {\n      this.isAuthenticated = session.isAuthenticated;\n    });\n    this.authService.user$.subscribe((descopeUser) => {\n      if (descopeUser.user) {\n        this.userName = descopeUser.user.name ?? '';\n      }\n    });\n  }\n\n  logout() {\n    this.authService.descopeSdk.logout();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Flow ID Component\nDESCRIPTION: Complete example of the Descope custom flow component with all available configuration options. This demonstrates how to use a specific flow ID and configure options like theme, locale, and event handling.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/sdks/angular-sdk/README.md#2025-04-22_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<descope\n     flowId=\"<your_flow_id>\"\n     (success)=\"<your_success_function>\"\n     (error)=\"<your_error_function>\"\n<!-- theme can be \"light\", \"dark\" or \"os\", which auto select a theme based on the OS theme. Default is \"light\"\n     theme=\"dark\"\n\n     locale can be any supported locale which the flow's screen translated to, if not provided, the locale is taken from the browser's locale.\n     locale=\"en\"\n\n     debug can be set to true to enable debug mode\n     debug=\"true\"\n\n     tenant ID for SSO (SAML) login. If not provided, Descope will use the domain of available email to choose the tenant\n     tenant=<tenantId>\n\n     Redirect URL for OAuth and SSO (will be used when redirecting back from the OAuth provider / IdP), or for \"Magic Link\" and \"Enchanted Link\" (will be used as a link in the message sent to the the user)\n     redirectUrl=<redirectUrl>\n\n     telemetryKey=<telemtry_key>\n\n     autoFocus can be true, false or \"skipFirstScreen\". Default is true.\n     - true: automatically focus on the first input of each screen\n     - false: do not automatically focus on screen's inputs\n     - \"skipFirstScreen\": automatically focus on the first input of each screen, except first screen\n     autoFocus=\"skipFirstScreen\"\n\n    validateOnBlur can be true or false. Default is false.\n     - true: Trigger input validation upon blur, in addition to the validation on submit\n     - false: do not trigger input validation upon blur\n\n    restartOnError can be true or false. Default is false.\n     - true: In case of flow version mismatch, will restart the flow if the components version was not changed\n     - false: Will not auto restart the flow in case of a flow version mismatch\n\n     errorTransformer is a function that receives an error object and returns a string. The returned string will be displayed to the user.\n     NOTE: errorTransformer is not required. If not provided, the error object will be displayed as is.\n     Example:\n     errorTransformer = (error: { text: string; type: string }): string => {\n         const translationMap: { [key: string]: string } = {\n             SAMLStartFailed: 'Failed to start SAML flow'\n         };\n         return translationMap[error.type] || error.text;\n     };\n     ...\n     errorTransformer={errorTransformer}\n\n    form is an object the initial form context that is used in screens inputs in the flow execution.\n    Used to inject predefined input values on flow start such as custom inputs, custom attributes and other inputs.\n    Keys passed can be accessed in flows actions, conditions and screens prefixed with \"form.\".\n    NOTE: form is not required. If not provided, 'form' context key will be empty before user input.\n    Example:\n    form={{ email: \"predefinedname@domain.com\",  firstName: \"test\", \"customAttribute.test\": \"aaaa\", \"myCustomInput\": 12 }}\n\n    client is an object the initial client context in the flow execution.\n    Keys passed can be accessed in flows actions and conditions prefixed with \"client.\".\n    NOTE: client is not required. If not provided, context key will be empty.\n    Example:\n    client={{ version: \"1.2.0\" }}\n\n    Use a custom style name or keep empty to use the default style.\n    styleId=\"my-awesome-style\"\n\n    Set a CSP nonce that will be used for style and script tags.\n    nonce=\"rAnd0m\"\n\n    Clear screen error message on user input.\n    dismissScreenErrorOnInput=true\n\n     logger is an object describing how to log info, warn and errors.\n     NOTE: logger is not required. If not provided, the logs will be printed to the console.\n     Example:\n     const logger = {\n     \tinfo: (title: string, description: string, state: any) => {\n          console.log(title, description, JSON.stringify(state));\n      },\n     \twarn: (title: string, description: string) => {\n          console.warn(title);\n      },\n     \terror: (title: string, description: string) => {\n          console.error('OH NOO');\n      },\n     }\n     ...\n     logger={logger}-->\n></descope>\n```\n\n----------------------------------------\n\nTITLE: Implementing Default Authentication Flows\nDESCRIPTION: Example of implementing default authentication flows using Descope's pre-built components with success and error handlers\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/sdks/react-sdk/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { SignInFlow } from '@descope/react-sdk'\n// you can choose flow to run from the following\n// import { SignUpFlow } from '@descope/react-sdk'\n// import { SignUpOrInFlow } from '@descope/react-sdk'\n\nconst App = () => {\n    return (\n        {...}\n        <SignInFlow\n            onSuccess={(e) => console.log('Logged in!')}\n            onError={(e) => console.log('Could not logged in!')}\n        />\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Performing OAuth Sign-In with Descope SDK in JavaScript\nDESCRIPTION: This function demonstrates how to initiate an OAuth sign-in process using the Descope SDK. It takes parameters for the OAuth provider, return URL, and optional settings.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/libs/sdk-mixins/README.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nasync function oauthSignIn(provider, returnUrl, options = {}) {\n    try {\n        const res = await sdk.oauth.start(provider, returnUrl, options);\n        return res;\n    } catch (error) {\n        console.error('OAuth sign-in failed:', error);\n        throw error;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Screen Updates\nDESCRIPTION: Example of handling custom screen updates in Descope flows with state management and form handling\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/sdks/react-sdk/README.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst CustomScreen = ({onClick, setForm}) => {\n  const onChange = (e) => setForm({ email: e.target.value })\n\n  return (\n    <>\n      <input\n        type=\"email\"\n        placeholder=\"Email\"\n        onChange={onChange}\n      />\n      <button\n        type=\"button\"\n        onClick={onClick}\n      >\n        Submit\n      </button>\n    </>\n)}\n\nconst Login = () => {\n  const [state, setState] = useState();\n  const [form, setForm] = useState();\n\n  const onScreenUpdate = (screenName, context, next) => {\n    setState({screenName, context, next})\n\n    if (screenName === 'My Custom Screen') {\n      return true;\n    }\n\n    return false;\n  };\n\n  return <Descope\n  ...\n  onScreenUpdate={onScreenUpdate}\n  >{state.screenName === 'My Custom Screen' && <CustomScreen\n    onClick={() => {\n      // replace with the button interaction id\n      state.next('interactionId', form)\n    }}\n    setForm={setForm}/>}\n  </Descope>\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Descope Flow Component\nDESCRIPTION: Vue component implementation showing how to use the Descope flow component with various configuration options and event handlers.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/sdks/vue-sdk/README.md#2025-04-22_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <p v-if=\"isFlowLoading\">Loading...</p>\n  <Descope flowId=\"my-flow-id\" @success=\"handleSuccess\" @error=\"handleError\" @ready=\"handleReady\" />\n</template>\n\n<script setup>\nimport { Descope } from '@descope/vue-sdk';\nimport { ref } from 'vue';\n\nconst isFlowLoading = ref(true);\n\nconst handleSuccess = (e) => {\n  console.log('Logged in!', e);\n};\n\nconst handleError = (e) => {\n  console.log('Could not log in', e);\n};\n\nconst handleReady = () => {\n  isFlowLoading.value = false;\n};\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing OIDC Login with Redirect\nDESCRIPTION: Implementation of OIDC login functionality using the useDescope hook. Shows how to trigger login with redirect and handle custom redirect URIs.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/sdks/react-sdk/README.md#2025-04-22_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nconst MyComponent = () => {\n  const sdk = useDescope();\n\n  return (\n    // ...\n    <button\n      onClick={() => {\n        sdk.oidc.loginWithRedirect({\n          // By default, the login will redirect the user to the current URL\n          // If you want to redirect the user to a different URL, you can specify it here\n          redirect_uri: window.location.origin,\n        });\n      }}\n    >\n      Login with OIDC\n    </button>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Up Event Listeners for Descope SDK in JavaScript\nDESCRIPTION: Demonstrates how to set up event listeners for session token changes, authentication state changes, and user changes using the Descope SDK.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/sdks/web-js-sdk/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nsdk.onSessionTokenChange((newSession, oldSession) => {\n  // handle session token change...\n});\n\nsdk.onIsAuthenticatedChange((isAuthenticated) => {\n  // handle authentication change...\n});\n\nsdk.onUserChange((newUser, oldUser) => {\n  // handle user change...\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Descope SDK and Creating Custom Form Component in React\nDESCRIPTION: Example showing how to initialize the Descope SDK and create a custom login form component in React. The component manages form state, handles submission, and interacts with Descope's authentication API.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/libs/escape-markdown/README.md#2025-04-22_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useEffect, useState } from 'react';\nimport { useDescope, useSession, useUser } from '@descope/react-sdk';\n\nexport default function CustomLoginForm() {\n  const { isAuthenticated, isSessionLoading } = useSession();\n  const { user } = useUser();\n  const { sdk } = useDescope();\n  \n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [error, setError] = useState('');\n  \n  useEffect(() => {\n    if (isAuthenticated) {\n      // If user is already authenticated, redirect to a specific page.\n      // You can use `window.history.pushState` or a routing library\n      // Also can use the user object from useUser hook.\n      console.log('Logged in user:', user);\n    }\n  }, [isAuthenticated, user]);\n\n  if (isSessionLoading) {\n    return <p>Loading...</p>;\n  }\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setError('');\n    \n    try {\n      // Call the Descope SDK to authenticate\n      await sdk.password.signIn(email, password);\n      // Successful authentication will trigger the session\n      // change and the effect above will redirect the user.\n    } catch (err) {\n      setError(err.message || 'Authentication failed. Please try again.');\n      console.error('Authentication error:', err);\n    }\n  };\n\n  return (\n    <div className=\"custom-form\">\n      <h2>Login to Your Account</h2>\n      {error && <div className=\"error-message\">{error}</div>}\n      \n      <form onSubmit={handleSubmit}>\n        <div className=\"form-group\">\n          <label htmlFor=\"email\">Email:</label>\n          <input\n            id=\"email\"\n            type=\"email\"\n            value={email}\n            onChange={(e) => setEmail(e.target.value)}\n            required\n          />\n        </div>\n        \n        <div className=\"form-group\">\n          <label htmlFor=\"password\">Password:</label>\n          <input\n            id=\"password\"\n            type=\"password\"\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n            required\n          />\n        </div>\n        \n        <button type=\"submit\" className=\"submit-button\">\n          Login\n        </button>\n      </form>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Completing OIDC Login with Descope SDK in JavaScript\nDESCRIPTION: Shows two methods to finish the OIDC login process after user redirection: finishLoginIfNeed and finishLogin.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/sdks/web-js-sdk/README.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// Using finishLoginIfNeed (recommended):\nawait sdk.oidc.finishLoginIfNeed();\n\n// Using finishLogin:\nawait sdk.oidc.finishLogin();\n```\n\n----------------------------------------\n\nTITLE: Initializing Descope SDK in Vue Application and Accessing SDK Instance\nDESCRIPTION: Shows how to initialize the Descope plugin in a Vue application and access the SDK instance outside of Vue components. The example demonstrates setting up event listeners for session token and authentication state changes.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/sdks/vue-sdk/README.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport App from './components/App.vue';\nimport descope, { getSdk } from '../src';\n\nconst app = createApp(App);\n\napp.use(descope, {\n  projectId: 'project-id',\n});\n\nconst sdk = getSdk();\n\nsdk?.onSessionTokenChange((newSession) => {\n  // here you can implement custom logic when the session is changing,\n  // note that the session may be not available if it is managed in cookies\n});\n\nsdk?.onIsAuthenticatedChange((isAuthenticated) => {\n  // here you can implement custom logic when the authentication state is changing\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Flow with ID\nDESCRIPTION: Implementation of a custom authentication flow using Descope component with detailed configuration options including theming, localization, and error handling\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/sdks/react-sdk/README.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Descope } from '@descope/react-sdk'\n\nconst App = () => {\n    return (\n        {...}\n        <Descope\n            flowId=\"my-flow-id\"\n            onSuccess={(e) => console.log('Logged in!')}\n            onError={(e) => console.log('Could not logged in')}\n        />\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Refreshing User Data After Backend Updates in Vue\nDESCRIPTION: Demonstrates how to refresh the user data and session token in the frontend after the user has been updated in the backend using the Descope SDK's me() or refresh() methods.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/sdks/vue-sdk/README.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst sdk = useDescope();\n\nconst handleUpdateUser = () => {\n  myBackendUpdateUser().then(() => {\n    sdk.me();\n    // or\n    sdk.refresh();\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring AuthProvider with OIDC Settings\nDESCRIPTION: Setup of the AuthProvider component with OIDC configuration options. Demonstrates basic setup with project ID and optional detailed OIDC configuration including application ID, redirect URI, and scope settings.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/sdks/react-sdk/README.md#2025-04-22_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nimport { AuthProvider } from '@descope/react-sdk';\n\nconst AppRoot = () => {\n  return (\n    <AuthProvider\n      projectId=\"my-project-id\" // also serves as the client ID\n      oidcConfig={true}\n\n      /* alternatively, you can pass the oidcConfig object\n      oidcConfig={{\n        applicationId: 'my-application-id', // optional, if not provided, the default OIDC application will be used\n          \n        redirectUri: 'https://my-app.com/redirect', // optional, if not provided, the default redirect URI will be used\n        \n        \n        scope: 'openid profile email', // optional, if not provided, default is openid email offline_access roles descope.custom_claims\n      }}\n      */\n    >\n      <App />\n    </AuthProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Social Login Buttons in React with Descope SDK\nDESCRIPTION: This React component creates custom social login buttons that integrate with Descope authentication. It provides buttons for popular social providers like Google, GitHub, and Microsoft, using the Descope SDK to handle the OAuth flow.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/libs/escape-markdown/README.md#2025-04-22_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useDescope } from '@descope/react-sdk';\n\nexport default function SocialLoginButtons() {\n  const { sdk } = useDescope();\n  \n  const handleSocialLogin = async (provider) => {\n    try {\n      // Start the OAuth flow with the selected provider\n      await sdk.oauth.start(provider, window.location.href);\n      // The page will redirect to the provider's login page\n      // After successful authentication, the provider will redirect back\n      // to the redirect URL (current page in this example)\n    } catch (err) {\n      console.error(`Error starting ${provider} login:`, err);\n    }\n  };\n\n  return (\n    <div className=\"social-login-container\">\n      <h3>Or continue with</h3>\n      \n      <div className=\"social-buttons\">\n        <button \n          onClick={() => handleSocialLogin('google')} \n          className=\"social-button google\"\n        >\n          <img src=\"/google-icon.svg\" alt=\"Google\" />\n          Sign in with Google\n        </button>\n        \n        <button \n          onClick={() => handleSocialLogin('github')} \n          className=\"social-button github\"\n        >\n          <img src=\"/github-icon.svg\" alt=\"GitHub\" />\n          Sign in with GitHub\n        </button>\n        \n        <button \n          onClick={() => handleSocialLogin('microsoft')} \n          className=\"social-button microsoft\"\n        >\n          <img src=\"/microsoft-icon.svg\" alt=\"Microsoft\" />\n          Sign in with Microsoft\n        </button>\n        \n        {/* Add more social login buttons as needed */}\n      </div>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Updating User Data in Angular Component\nDESCRIPTION: TypeScript example showing how to refresh user data after backend updates using the Descope SDK.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/sdks/angular-sdk/README.md#2025-04-22_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DescopeAuthService } from '@descope/angular-sdk';\n\nexport class MyComponent {\n  // ...\n  constructor(private authService: DescopeAuthService) {}\n\n  handleUpdateUser() {\n    myBackendUpdateUser().then(() => {\n      this.authService.descopeSdk.me();\n      // or\n      this.authService.descopeSdk.refresh();\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling OAuth Callback in JavaScript with Descope SDK\nDESCRIPTION: This function processes the OAuth callback after a successful authentication. It exchanges the authorization code for a session token using the Descope SDK.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/libs/sdk-mixins/README.md#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nasync function handleOAuthCallback(code) {\n    try {\n        const res = await sdk.oauth.exchange(code);\n        return res;\n    } catch (error) {\n        console.error('OAuth callback handling failed:', error);\n        throw error;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Including Descope Web Component in HTML\nDESCRIPTION: Instructions for adding the Descope Web Component script to an HTML file. This allows the component to be used directly in HTML without a build process.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/sdks/web-component/README.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<head>\n  <script src=\"./descope-wc.js\"></script>\n</head>\n```\n\n----------------------------------------\n\nTITLE: Implementing User Profile Widget in Angular\nDESCRIPTION: Shows how to embed a user profile component that allows users to update their profile picture, personal information, authentication methods, and logout.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/sdks/angular-sdk/README.md#2025-04-22_snippet_17\n\nLANGUAGE: html\nCODE:\n```\n<user-profile widgetId=\"user-profile-widget\"\n(logout)=\"<your_logout_function>\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing User Management Widget\nDESCRIPTION: Demonstrates how to embed a user management table using the UserManagement widget component for tenant-based administration\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/sdks/react-sdk/README.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { UserManagement } from '@descope/react-sdk';\n...\n  <UserManagement\n    widgetId=\"user-management-widget\"\n    tenant=\"tenant-id\"\n  />\n```\n\n----------------------------------------\n\nTITLE: Session Token API Authorization Implementation\nDESCRIPTION: Example of using getSessionToken to retrieve and pass session token in API request Authorization header for server-side validation.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/sdks/react-sdk/README.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getSessionToken } from '@descope/react-sdk';\n\nexport const fetchData = async () => {\n  const sessionToken = getSessionToken();\n  const res = await fetch('/path/to/server/api', {\n    headers: {\n      Authorization: `Bearer ${sessionToken}`,\n    },\n  });\n  // ... use res\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Applications Portal Widget in Angular\nDESCRIPTION: Shows how to embed an applications portal component that allows users to access their assigned applications.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/sdks/angular-sdk/README.md#2025-04-22_snippet_18\n\nLANGUAGE: html\nCODE:\n```\n<applications-portal widgetId=\"applications-portal-widget\" />\n```\n\n----------------------------------------\n\nTITLE: Using Descope Hooks in Vue Components\nDESCRIPTION: Example showing how to use Descope hooks (useDescope, useSession, useUser) for authentication state management in Vue components.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/sdks/vue-sdk/README.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n<template>\n\t<div>\n\t\t<div v-if=\"isSessionLoading || isUserLoading\">Loading ...</div>\n\t\t<div v-else-if=\"isAuthenticated\">\n\t\t\t<div>Hello {{ user?.name }}</div>\n\t\t\t<button @click=\"logout()\">Logout</button>\n\t\t</div>\n\t\t<div v-else>You are not logged in</div>\n\t</div>\n</template>\n\n<script setup>\nimport { useDescope, useSession, useUser } from '@descope/vue-sdk';\n\nconst { isAuthenticated, isLoading: isSessionLoading } = useSession();\nconst { user, isLoading: isUserLoading } = useUser();\nconst { logout } = useDescope();\n</script>\n```\n\n----------------------------------------\n\nTITLE: Component Implementation with Session Token API\nDESCRIPTION: Example of a React component implementing the fetchData function that uses session token for API authentication.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/sdks/react-sdk/README.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { fetchData } from 'path/to/api/file'\nimport { useCallback } from 'react'\n\nconst Component = () => {\n    const onClick = useCallback(() => {\n        fetchData()\n    },[])\n    return (\n        {...}\n        {\n            <button onClick={onClick}>Click Me</button>\n        }\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Applications Portal Widget\nDESCRIPTION: Shows how to integrate the ApplicationsPortal widget for displaying and accessing assigned applications\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/sdks/react-sdk/README.md#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ApplicationsPortal } from '@descope/react-sdk';\n...\n  <ApplicationsPortal\n    widgetId=\"applications-portal-widget\"\n  />\n```\n\n----------------------------------------\n\nTITLE: Configuring Route Guards with Descope\nDESCRIPTION: Implements route protection using Descope auth guard to prevent unauthorized access to protected routes.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/sdks/angular-sdk/README.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { HomeComponent } from './home/home.component';\nimport { ProtectedComponent } from './protected/protected.component';\nimport { descopeAuthGuard } from '@descope/angular-sdk';\nimport { LoginComponent } from './login/login.component';\n\nconst routes: Routes = [\n  {\n    path: 'step-up',\n    component: ProtectedComponent,\n    canActivate: [descopeAuthGuard],\n    data: { descopeFallbackUrl: '/' }\n  },\n  { path: 'login', component: LoginComponent },\n  { path: '**', component: HomeComponent }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes, { enableTracing: false })],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule {}\n```\n\n----------------------------------------\n\nTITLE: Session Token API Request Example\nDESCRIPTION: Example of making an API request with session token authentication using the getSessionToken function.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/sdks/vue-sdk/README.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getSessionToken } from '@descope/vue-sdk';\n\nexport const fetchData = async () => {\n  const sessionToken = getSessionToken();\n  const res = await fetch('/path/to/server/api', {\n    headers: {\n      Authorization: `Bearer ${sessionToken}`,\n    },\n  });\n  // ... use res\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Default Sign-In Flow Template\nDESCRIPTION: HTML template for implementing Descope's default sign-in flow component with event handlers for success, error, and ready events. Includes an optional loading indicator.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/sdks/angular-sdk/README.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<descope-sign-in-flow\n        (success)=\"onSuccess($event)\"\n        (error)=\"onError($event)\"\n        (ready)=\"onReady()\"\n></descope-sign-in-flow>\n<!-- Optionally, you can show/hide loading indication until the flow page is ready -->\n<div\n  *ngIf=\"isLoading\"\n  class=\"loading-indicator\"\n  style=\"display: flex; justify-content: center; align-items: center;\"\n>\n  Loading...\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Descope\nDESCRIPTION: Example environment variables needed for the Descope integration, including project ID, flow ID, and management key. A custom sign-in route is also defined.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/sdks/nextjs-sdk/examples/app-router/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nNEXT_PUBLIC_DESCOPE_PROJECT_ID=<Your Descope Project-ID>\nNEXT_PUBLIC_DESCOPE_FLOW_ID=<Your Descope Flow-ID>\nDESCOPE_MANAGEMENT_KEY=<Your Descope Management Key> # Default is sign-up-or-in\n# This is an example of a custom route for the sign-in page\n# the /login route is the one that this example uses\nSIGN_IN_ROUTE=\"/login\"\n```\n\n----------------------------------------\n\nTITLE: Cookie-based Session Token Configuration\nDESCRIPTION: Example of configuring AuthProvider to manage session tokens via cookies with optional SameSite and Secure settings.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/sdks/react-sdk/README.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { AuthProvider } from '@descope/react-sdk';\n\nconst AppRoot = () => {\n  return (\n    <AuthProvider projectId=\"my-project-id\" sessionTokenViaCookie>\n      <App />\n    </AuthProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Descope Widget in HTML\nDESCRIPTION: HTML implementation example showing how to embed the Descope role management widget with configuration parameters.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/widgets/role-management-widget/README.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n// replace x.x.x with the latest release of the widget: https://www.npmjs.com/package/@descope/role-management-widget\n<script src=\"https://descopecdn.com/npm/@descope/role-management-widget@x.x.x/dist/index.js\"></script>\n<descope-role-management-widget\n  base-url=\"<DESCOPE_BASE_URL>\"\n  project-id=\"<DESCOPE_PROJECT_ID>\"\n  tenant=\"<DESCOPE_TENANT>\"\n  debug=\"<DEBUG_MODE>\"\n  theme=\"<DESCOPE_THEME>\"\n  widget-id=\"<DESCOPE_WIDGET_ID>\"\n></descope-role-management-widget>\n```\n\n----------------------------------------\n\nTITLE: Refreshing Session Token with Descope SDK in JavaScript\nDESCRIPTION: This function refreshes the session token using the Descope SDK. It takes the current refresh token as a parameter and returns a new session token.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/libs/sdk-mixins/README.md#2025-04-22_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nasync function refreshToken(refreshToken) {\n    try {\n        const res = await sdk.refresh(refreshToken);\n        return res;\n    } catch (error) {\n        console.error('Token refresh failed:', error);\n        throw error;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Session Token Cookie\nDESCRIPTION: Example of configuring Descope plugin to use cookie-based session token storage.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/sdks/vue-sdk/README.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createApp } from 'vue';\nimport App from './components/App.vue';\nimport descope from '@descope/vue-sdk';\n\nconst app = createApp(App);\n\napp.use(descope, {\n  projectId: 'project-id',\n  sessionTokenViaCookie: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Descope SDK in Standalone Mode\nDESCRIPTION: Example of how to configure the Descope SDK for an Angular application using the standalone mode approach. This injects the DescopeAuthConfig with a project ID.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/sdks/angular-sdk/README.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { bootstrapApplication } from '@angular/platform-browser';\nimport { AppComponent } from './app/app.component';\nimport { DescopeAuthConfig } from '@descope/angular-sdk';\n\nbootstrapApplication(AppComponent, {\n  providers: [\n    { provide: DescopeAuthConfig, useValue: { projectId: '<your_project_id>' } }\n  ]\n}).catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Basic Logout Implementation\nDESCRIPTION: Simple implementation of user logout functionality using the Descope SDK's logout method.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/sdks/react-sdk/README.md#2025-04-22_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nconst MyComponent = () => {\n  const sdk = useDescope();\n\n  return (\n    // ...\n    <button\n      onClick={() => {\n        sdk.logout();\n      }}\n    >\n      Logout\n    </button>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing External Token Authentication with AuthProvider\nDESCRIPTION: Shows how to migrate sessions from an external authentication provider to Descope using the AuthProvider component with getExternalToken prop\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/sdks/react-sdk/README.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { AuthProvider } from '@descope/react-sdk';\n\nconst AppRoot = () => {\n  return (\n    <AuthProvider\n      projectId=\"my-project-id\"\n      getExternalToken={async () => {\n        // Bring token from external provider (e.g. get access token from another auth provider)\n        return 'my-external-token';\n      }}\n    >\n      <App />\n    </AuthProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Access Key Management Widget in Vue\nDESCRIPTION: Shows how to use the AccessKeyManagement widget to embed an access key management table. Provides examples for both admin view (managing all tenant users' access keys) and user view (managing access keys for the logged-in user).\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/sdks/vue-sdk/README.md#2025-04-22_snippet_10\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <!-- admin view: manage all tenant users' access keys -->\n  <AccessKeyManagement tenant=\"tenant-id\" widget-id=\"access-key-management-widget\" />\n\n  <!-- user view: mange access key for the logged-in tenant's user  -->\n  <AccessKeyManagement tenant=\"tenant-id\" widget-id=\"user-access-key-management-widget\" />\n</template>\n\n<script setup>\nimport { AccessKeyManagement } from '@descope/vue-sdk';\n</script>\n```\n\n----------------------------------------\n\nTITLE: Custom Refresh Cookie Configuration\nDESCRIPTION: Example of configuring AuthProvider with a custom refresh cookie name for managing multiple Descope projects on the same domain.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/sdks/react-sdk/README.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { AuthProvider } from '@descope/react-sdk';\n\nconst AppRoot = () => {\n  return (\n    <AuthProvider projectId=\"my-project-id\" refreshCookieName=\"MY_DSR\">\n      <App />\n    </AuthProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Handling Success Event in Descope Web Component\nDESCRIPTION: Example showing how to add a success event listener to a Descope web component. The success event fires when a flow completes successfully and includes flow result details in the event object.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/sdks/web-component/README.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst descopeWcEle = document.getElementsByTagName('descope-wc')[0];\ndescopeWcEle.addEventListener('success', (e) => alert(`Success! - ${JSON.stringify(e.detail)}`);\n```\n\n----------------------------------------\n\nTITLE: Implementing Audit Management Widget in Vue\nDESCRIPTION: Demonstrates how to use the AuditManagement widget component to embed an audit table in your application for a specific tenant.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/sdks/vue-sdk/README.md#2025-04-22_snippet_11\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <AuditManagement tenant=\"tenant-id\" widget-id=\"audit-management-widget\" />\n</template>\n\n<script setup>\nimport { AuditManagement } from '@descope/vue-sdk';\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing DescopeAuthModule in NgModule Configuration\nDESCRIPTION: Example of how to import and configure the DescopeAuthModule in an Angular application using the NgModule approach. Requires a valid Descope project ID.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/sdks/angular-sdk/README.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { AppComponent } from './app.component';\nimport { DescopeAuthModule } from '@descope/angular-sdk';\n\n@NgModule({\n  declarations: [AppComponent],\n  imports: [\n    BrowserModule,\n    DescopeAuthModule.forRoot({\n      projectId: '<your_project_id>'\n    })\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Error Event Handling in Descope Web Component\nDESCRIPTION: Example of adding an event listener for error events emitted by the Descope Web Component. This allows custom error handling such as displaying alerts to users.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/sdks/web-component/README.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst descopeWcEle = document.getElementsByTagName('descope-wc')[0];\ndescopeWcEle.addEventListener('error', (e) => alert(`Error! - ${e.detail.errorMessage}`));\n```\n\n----------------------------------------\n\nTITLE: Using Descope Web Component in HTML with Parameters\nDESCRIPTION: Example of adding the Descope Web Component to an HTML page with project ID, flow ID, and optional form and client parameters for pre-filling data in the authentication flow.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/sdks/web-component/README.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<descope-wc project-id=\"<project-id>\" flow-id=\"<flow-id>\" form='{ \"email\": \"predefinedname@domain.com\", \"myCustomInput\": \"12\" }' client='{ \"browserVersion\": window.navigator.appVersion }'></descope-wc>\n```\n\n----------------------------------------\n\nTITLE: Custom Screen Update Handler\nDESCRIPTION: Example of implementing a custom screen update handler function for Descope flows.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/sdks/vue-sdk/README.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction onScreenUpdate(screenName, context, next) {\n  if (screenName === 'My Custom Screen') {\n    return true;\n  }\n\n  return false;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Descope Interceptor for HTTP Requests\nDESCRIPTION: Configures HTTP interceptor to handle authentication tokens and auto-refresh sessions on 401/403 errors.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/sdks/angular-sdk/README.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { AppComponent } from './app.component';\nimport {\n  HttpClientModule,\n  provideHttpClient,\n  withInterceptors\n} from '@angular/common/http';\nimport { DescopeAuthModule, descopeInterceptor } from '@descope/angular-sdk';\n\n@NgModule({\n  declarations: [AppComponent],\n  imports: [\n    BrowserModule,\n    HttpClientModule,\n    DescopeAuthModule.forRoot({\n      projectId: '<your_project_id>',\n      pathsToIntercept: ['/protectedPath']\n    })\n  ],\n  providers: [provideHttpClient(withInterceptors([descopeInterceptor]))],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Descope Web Component in JavaScript\nDESCRIPTION: Example of how to import and use the Descope Web Component in a JavaScript application. The import defines a custom 'descope-wc' element that can be used in JSX or HTML.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/sdks/web-component/README.md#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport '@descope/web-component' // This import will define `descope-wc` custom element\nimport { DescopeWc } // In case you need types definition or you want to use the class directly\n\n// Render Descope Web Component, for example:\nrender(){\n  return (\n    <descope-wc project-id=\"myProjectId\"/>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Session Refresh in Angular Module\nDESCRIPTION: Configures automatic session and user refresh on page load using APP_INITIALIZER provider in Angular module.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/sdks/angular-sdk/README.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { APP_INITIALIZER, NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { AppComponent } from './app.component';\nimport { DescopeAuthModule, DescopeAuthService } from '@descope/angular-sdk';\nimport { zip } from 'rxjs';\n\nexport function initializeApp(authService: DescopeAuthService) {\n  return () => zip([authService.refreshSession(), authService.refreshUser()]);\n}\n\n@NgModule({\n  declarations: [AppComponent],\n  imports: [\n    BrowserModule,\n    DescopeAuthModule.forRoot({\n      projectId: '<your_project_id>'\n    })\n  ],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: initializeApp,\n      deps: [DescopeAuthService],\n      multi: true\n    }\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Custom Error Transformer for Descope Web Component\nDESCRIPTION: Example of implementing a custom error transformer function to translate or modify error messages displayed to users. The function maps error types to custom messages.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/sdks/web-component/README.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfunction translateError(error) {\n  const translationMap = {\n    SAMLStartFailed: 'No es posible iniciar sesión en este momento, por favor intenta nuevamente más tarde',\n  };\n  return translationMap[error.type] || error.text;\n}\n\nconst descopeWcEle = document.getElementsByTagName('descope-wc')[0];\n\ndescopeWcEle.errorTransformer = translateError;\n```\n\n----------------------------------------\n\nTITLE: Implementing onScreenUpdate Function for Custom Screens\nDESCRIPTION: Example implementation of the onScreenUpdate function that allows rendering custom screens instead of default Descope flow screens. This function decides whether to use a custom screen based on the screen name.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/sdks/angular-sdk/README.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nfunction onScreenUpdate(screenName, context, next, ref) {\n  if (screenName === 'My Custom Screen') {\n    return true;\n  }\n\n  return false;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Descope User Management Widget in HTML\nDESCRIPTION: This example demonstrates how to include and initialize the Descope user management widget in an HTML file. It shows the script tag for loading the widget and the custom element tag with configuration attributes.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/widgets/user-management-widget/README.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n// replace x.x.x with the latest release of the widget: https://www.npmjs.com/package/@descope/user-management-widget\n<script src=\"https://descopecdn.com/npm/@descope/user-management-widget@x.x.x/dist/index.js\"></script>\n<descope-user-management-widget\n  base-url=\"<DESCOPE_BASE_URL>\"\n  project-id=\"<DESCOPE_PROJECT_ID>\"\n  tenant=\"<DESCOPE_TENANT>\"\n  debug=\"<DEBUG_MODE>\"\n  theme=\"<DESCOPE_THEME>\"\n  widget-id=\"<DESCOPE_WIDGET_ID>\"\n></descope-user-management-widget>\n```\n\n----------------------------------------\n\nTITLE: Custom Screen Rendering with onScreenUpdate in Descope Web Component\nDESCRIPTION: Example of using the onScreenUpdate callback to render custom screens within the authentication flow. This function intercepts specific screens and replaces them with custom HTML and event handling.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/sdks/web-component/README.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nfunction onScreenUpdate(screenName, context, next, ref) {\n  if (screenName === 'My Custom Screen') {\n    ref.innerHTML = `\n          <form>\n            <input type=\"text\" name=\"email\" placeholder=\"Email\" />\n            <button type=\"submit\">Submit</button>\n          </form>\n        `;\n\n    ref.closest('form').addEventListener('submit', (e) => {\n      e.preventDefault();\n      const formData = new FormData(e.target);\n      const data = Object.fromEntries(formData.entries());\n\n      // replace with the button interaction id\n      next('interactionId', data);\n    });\n\n    return true;\n  }\n\n  return false;\n}\n\nconst descopeWcEle = document.querySelector('descope-wc');\n\ndescopeWcEle.onScreenUpdate = onScreenUpdate;\n```\n\n----------------------------------------\n\nTITLE: User Management Widget Implementation\nDESCRIPTION: HTML template for embedding the User Management widget to handle user-related administrative actions.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/sdks/angular-sdk/README.md#2025-04-22_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<user-management tenant=\"tenant-id\" widgetId=\"user-management-widget\" />\n```\n\n----------------------------------------\n\nTITLE: Integrating Descope Applications Portal Widget in HTML\nDESCRIPTION: Example showing how to add the widget to an HTML page, including script import, widget element with configuration parameters, and event handling for logout. Replace x.x.x with the latest version of the widget.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/widgets/applications-portal-widget/README.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n// replace x.x.x with the latest release of the widget: https://www.npmjs.com/package/@descope/applications-portal-widget\n<script src=\"https://descopecdn.com/npm/@descope/applications-portal-widget@x.x.x/dist/index.js\"></script>\n<descope-applications-portal-widget\n  base-url=\"<DESCOPE_BASE_URL>\"\n  project-id=\"<DESCOPE_PROJECT_ID>\"\n  tenant=\"<DESCOPE_TENANT>\"\n  debug=\"<DEBUG_MODE>\"\n  theme=\"<DESCOPE_THEME>\"\n  widget-id=\"<DESCOPE_WIDGET_ID>\"\n></descope-applications-portal-widget>\n\n<script>\n  function onLogout(error) {\n    window.location.reload();\n  }\n  const descopeWidgetEle = document.getElementsByTagName('descope-applications-portal-widget')[0];\n  descopeWidgetEle.logout = onLogout;\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating a TOTP (Time-based One-Time Password) Setup Form in React\nDESCRIPTION: A React component that helps users set up Two-Factor Authentication using Time-based One-Time Passwords with Descope. It guides the user through generating a QR code and verifying their TOTP setup.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/libs/escape-markdown/README.md#2025-04-22_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useState } from 'react';\nimport { useDescope, useUser } from '@descope/react-sdk';\n\nexport default function TOTPSetupForm() {\n  const { sdk } = useDescope();\n  const { user } = useUser();\n  \n  const [step, setStep] = useState('start'); // 'start', 'verify', 'success'\n  const [qrCode, setQrCode] = useState('');\n  const [key, setKey] = useState('');\n  const [code, setCode] = useState('');\n  const [error, setError] = useState('');\n  \n  const handleStartSetup = async () => {\n    setError('');\n    \n    try {\n      // Start the TOTP setup process\n      const response = await sdk.totp.setupStart(user.loginIds[0]);\n      setQrCode(response.totpImage);\n      setKey(response.totpKey);\n      setStep('verify');\n    } catch (err) {\n      setError(err.message || 'Failed to start TOTP setup. Please try again.');\n      console.error('TOTP setup error:', err);\n    }\n  };\n  \n  const handleVerifySetup = async (e) => {\n    e.preventDefault();\n    setError('');\n    \n    try {\n      // Verify the TOTP setup with the user-provided code\n      await sdk.totp.setupFinish(user.loginIds[0], code);\n      setStep('success');\n    } catch (err) {\n      setError(err.message || 'Invalid verification code. Please try again.');\n      console.error('TOTP verification error:', err);\n    }\n  };\n\n  if (step === 'success') {\n    return (\n      <div className=\"success-message\">\n        <h2>Two-Factor Authentication Enabled</h2>\n        <p>Your account is now protected with an additional layer of security!</p>\n        <p>You'll need to enter a verification code from your authenticator app whenever you sign in.</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"custom-form totp-setup\">\n      <h2>Set Up Two-Factor Authentication</h2>\n      <p>Enhance your account security by setting up two-factor authentication.</p>\n      \n      {error && <div className=\"error-message\">{error}</div>}\n      \n      {step === 'start' ? (\n        <div className=\"setup-start\">\n          <p>You'll need an authenticator app like Google Authenticator, Authy, or Microsoft Authenticator.</p>\n          <button \n            onClick={handleStartSetup} \n            className=\"submit-button\"\n          >\n            Start Setup\n          </button>\n        </div>\n      ) : (\n        <div className=\"setup-verify\">\n          <div className=\"qr-container\">\n            {qrCode && (\n              <img \n                src={qrCode} \n                alt=\"QR Code for authenticator app\" \n                className=\"qr-code\" \n              />\n            )}\n          </div>\n          \n          <div className=\"manual-key\">\n            <p>If you can't scan the QR code, enter this key manually:</p>\n            <div className=\"key-display\">{key}</div>\n          </div>\n          \n          <form onSubmit={handleVerifySetup}>\n            <p>After scanning the QR code or entering the key in your authenticator app, enter the verification code shown in the app:</p>\n            \n            <div className=\"form-group\">\n              <label htmlFor=\"code\">Verification Code:</label>\n              <input\n                id=\"code\"\n                type=\"text\"\n                value={code}\n                onChange={(e) => setCode(e.target.value)}\n                placeholder=\"Enter 6-digit code\"\n                required\n              />\n            </div>\n            \n            <button type=\"submit\" className=\"submit-button\">\n              Verify and Activate\n            </button>\n          </form>\n        </div>\n      )}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OIDC with Descope SDK in JavaScript\nDESCRIPTION: Shows how to initialize the Descope SDK with OIDC (OpenID Connect) configuration, including both default and custom application settings.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/sdks/web-js-sdk/README.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Initialize the SDK with OIDC\nconst sdk = descopeSdk({\n  projectId: 'xxx',\n  oidcConfig: true,\n});\n\n// Initialize the SDK with custom OIDC application\nconst sdk = descopeSdk({\n  projectId: 'xxx',\n  oidcConfig: {\n    applicationId: 'my-application-id',\n    redirectUri: 'https://my-app.com/redirect',\n    scope: 'openid profile email',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Integrating Descope User Profile Widget in HTML\nDESCRIPTION: Demonstrates how to include and configure the Descope User Profile Widget in an HTML file. It includes the widget script, sets up the custom element with necessary attributes, and adds a logout handler function.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/widgets/user-profile-widget/README.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n// replace x.x.x with the latest release of the widget: https://www.npmjs.com/package/@descope/user-profile-widget\n<script src=\"https://descopecdn.com/npm/@descope/user-profile-widget@x.x.x/dist/index.js\"></script>\n<descope-user-profile-widget\n  base-url=\"<DESCOPE_BASE_URL>\"\n  project-id=\"<DESCOPE_PROJECT_ID>\"\n  tenant=\"<DESCOPE_TENANT>\"\n  debug=\"<DEBUG_MODE>\"\n  theme=\"<DESCOPE_THEME>\"\n  widget-id=\"<DESCOPE_WIDGET_ID>\"\n></descope-user-profile-widget>\n\n<script>\n  function onLogout(error) {\n    window.location.reload();\n  }\n  const descopeWidgetEle = document.getElementsByTagName('descope-user-profile-widget')[0];\n  descopeWidgetEle.logout = onLogout;\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing User Profile Widget in Vue\nDESCRIPTION: Shows how to use the UserProfile widget to allow users to manage their profile information, authentication methods, and logout functionality. Includes handling the logout event.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/sdks/vue-sdk/README.md#2025-04-22_snippet_12\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <UserProfile widget-id=\"user-profile-widget\" @logout=\"onLogout\" />\n</template>\n\n<script setup>\nimport { UserProfile } from '@descope/vue-sdk';\n\nconst onLogout = () => (window.location.href = '/login');\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing SDK Script Function in TypeScript\nDESCRIPTION: This TypeScript code outline demonstrates the structure of an SDK script file. It exports a default function that accepts initialization arguments, configuration, and a callback function for returning results.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/sdks/web-component/src/lib/descope-wc/sdkScripts/README.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default function (args: any, config: { baseUrl: string }, callback: (result: any) => void) {\n  // Script implementation\n}\n```\n\n----------------------------------------\n\nTITLE: Role Management Widget Implementation\nDESCRIPTION: HTML template for embedding the Role Management widget to handle role-related administrative actions.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/sdks/angular-sdk/README.md#2025-04-22_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<role-management tenant=\"tenant-id\" widgetId=\"role-management-widget\" />\n```\n\n----------------------------------------\n\nTITLE: Handling Ready Event in Descope Web Component\nDESCRIPTION: Example demonstrating how to listen for the ready event on a Descope web component. This event fires when the page is ready and is useful for managing loading states, including cases involving redirections like Magic Link or OAuth flows.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/sdks/web-component/README.md#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst descopeWcEle = document.getElementsByTagName('descope-wc')[0];\ndescopeWcEle.addEventListener('ready', () => {\n  // Remove/hide the loading indication\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Descope Widget\nDESCRIPTION: Environment configuration file setup for the Descope access key management widget, including base URL, project ID, tenant settings, and display options.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/widgets/access-key-management-widget/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nDESCOPE_BASE_URL=   # env base url, default: \"https://app.descope.com\"\nDESCOPE_PROJECT_ID= # your Descope's project ID\nDESCOPE_TENANT=     # tenant ID\nDEBUG_MODE=         # \"true\" / \"false\", default: \"false\"\nDESCOPE_THEME=      # \"light\" / \"dark\" / \"os\", default: \"light\"\nDESCOPE_WIDGET_ID=  # default: \"access-key-management-widget\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Descope Widget\nDESCRIPTION: Environment configuration file setup for the Descope role management widget, including base URL, project ID, tenant settings, and display options.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/widgets/role-management-widget/README.md#2025-04-22_snippet_0\n\nLANGUAGE: env\nCODE:\n```\nDESCOPE_BASE_URL=   # env base url, default: \"https://app.descope.com\"\nDESCOPE_PROJECT_ID= # your Descope's project ID\nDESCOPE_TENANT=     # tenant ID\nDEBUG_MODE=         # \"true\" / \"false\", default: \"false\"\nDESCOPE_THEME=      # \"light\" / \"dark\" / \"os\", default: \"light\"\nDESCOPE_WIDGET_ID=  # default: \"role-management-widget\"\n```\n\n----------------------------------------\n\nTITLE: Implementing User Profile Widget\nDESCRIPTION: Demonstrates integration of the UserProfile widget for user profile management and authentication settings\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/sdks/react-sdk/README.md#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nimport { UserProfile } from '@descope/react-sdk';\n...\n  <UserProfile\n    widgetId=\"user-profile-widget\"\n    onLogout={() => {\n      // add here you own logout callback\n      window.location.href = '/login';\n    }}\n  />\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Configuration\nDESCRIPTION: Example of environment variables needed for Descope integration, including project ID, flow ID, and management key. Also includes a custom route configuration for the sign-in page.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/sdks/nextjs-sdk/examples/pages-router/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nNEXT_PUBLIC_DESCOPE_PROJECT_ID=<Your Descope Project-ID>\nNEXT_PUBLIC_DESCOPE_FLOW_ID=<Your Descope Flow-ID>\nDESCOPE_MANAGEMENT_KEY=<Your Descope Management Key> # Default is sign-up-or-in\n# This is an example of a custom route for the sign-in page\n# the /login route is the one that this example uses\nSIGN_IN_ROUTE=\"/login\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Descope User Management Widget\nDESCRIPTION: This snippet shows the structure of the .env file required for setting up the Descope user management widget. It includes variables for base URL, project ID, tenant, debug mode, theme, and widget ID.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/widgets/user-management-widget/README.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nDESCOPE_BASE_URL=   # env base url, default: \"https://app.descope.com\"\nDESCOPE_PROJECT_ID= # your Descope's project ID\nDESCOPE_TENANT=     # tenant ID\nDEBUG_MODE=         # \"true\" / \"false\", default: \"false\"\nDESCOPE_THEME=      # \"light\" / \"dark\" / \"os\", default: \"light\"\nDESCOPE_WIDGET_ID=  # default: \"user-management-widget\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Role Management Widget\nDESCRIPTION: Shows how to integrate the RoleManagement widget for managing roles and permissions within a tenant context\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/sdks/react-sdk/README.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { RoleManagement } from '@descope/react-sdk';\n...\n  <RoleManagement\n    widgetId=\"role-management-widget\"\n    tenant=\"tenant-id\"\n  />\n```\n\n----------------------------------------\n\nTITLE: Environment Configuration for Descope Example\nDESCRIPTION: Environment variables needed to run the example. Includes required Descope Project ID and Flow ID, as well as optional base URL and locale settings.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/sdks/web-component/README.md#2025-04-22_snippet_4\n\nLANGUAGE: env\nCODE:\n```\n// .env\n# Descope Project ID\nDESCOPE_PROJECT_ID=<project-id>\n# Flow ID to run, e.g. sign-up-or-in\nDESCOPE_FLOW_ID=<flow-id>\n# Optional - Descope base URL\nDESCOPE_BASE_URL\n# Optional - Descope locale (according to the target locales configured in the flow)\nDESCOPE_LOCALE=<locale>\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Descope Widget\nDESCRIPTION: Environment configuration file setup for the Descope audit management widget, defining base URL, project ID, tenant, debug mode, theme, and widget ID settings.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/widgets/audit-management-widget/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nDESCOPE_BASE_URL=   # env base url, default: \"https://app.descope.com\"\nDESCOPE_PROJECT_ID= # your Descope's project ID\nDESCOPE_TENANT=     # tenant ID\nDEBUG_MODE=         # \"true\" / \"false\", default: \"false\"\nDESCOPE_THEME=      # \"light\" / \"dark\" / \"os\", default: \"light\"\nDESCOPE_WIDGET_ID=  # default: \"audit-management-widget\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Role Management Widget in Vue\nDESCRIPTION: Shows how to use the RoleManagement widget component to embed a role management table that allows creating, modifying, and deleting roles within a tenant. Project-level roles cannot be edited by tenant-level users.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/sdks/vue-sdk/README.md#2025-04-22_snippet_9\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <RoleManagement tenant=\"tenant-id\" widget-id=\"role-management-widget\" />\n</template>\n\n<script setup>\nimport { RoleManagement } from '@descope/vue-sdk';\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables in TypeScript\nDESCRIPTION: Example of setting up environment configuration for the Descope SDK including project ID and other optional parameters.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/sdks/angular-sdk/README.md#2025-04-22_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Env } from './conifg';\n\nexport const environment: Env = {\n  descopeProjectId: '<your_project_id>'\n};\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Env } from './conifg';\n\nexport const environment: Env = {\n  descopeProjectId: '<your_project_id>',\n  descopeBaseUrl: '<your_base_url>',\n  descopeBaseStaticUrl: '<your_base_static_url>',\n  descopeFlowId: 'sign-in',\n  descopeDebugMode: false,\n  descopeTheme: 'os',\n  descopeLocale: 'en_US',\n  descopeRedirectUrl: '<your_redirect_url>',\n  descopeTelemetryKey: '<your_telemetry_key>',\n  descopeStepUpFlowId: 'step-up',\n  descopeBackendUrl: 'http://localhost:8080/protected'\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Environment Configuration for Descope Applications Portal Widget\nDESCRIPTION: Create an .env file in the widget package with configuration values for the Descope base URL, project ID, widget ID, debug mode, and theme setting.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/widgets/applications-portal-widget/README.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nDESCOPE_BASE_URL=   # env base url\nDESCOPE_PROJECT_ID= # project ID\nDESCOPE_WIDGET_ID=  # default: applications-portal-widget\nDEBUG_MODE=         # \"true\" / \"false\", default: \"false\"\nDESCOPE_THEME=      # \"light\" / \"dark\" / \"os\", default: \"light\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Access Key Management Widget\nDESCRIPTION: Demonstrates implementation of the AccessKeyManagement widget for managing user access keys at both admin and user levels\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/sdks/react-sdk/README.md#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport { AccessKeyManagement } from '@descope/react-sdk';\n...\n  {\n\t  /* admin view: manage all tenant users' access keys */\n  }\n  <AccessKeyManagement\n    widgetId=\"access-key-management-widget\"\n    tenant=\"tenant-id\"\n  />\n\n  {\n    /* user view: mange access key for the logged-in tenant's user */\n  }\n  <AccessKeyManagement\n    widgetId=\"user-access-key-management-widget\"\n    tenant=\"tenant-id\"\n  />\n```\n\n----------------------------------------\n\nTITLE: Custom Logger Implementation for Descope Web Component\nDESCRIPTION: Example of implementing a custom logger object for the Descope Web Component. The logger handles info, warning, and error messages with custom formatting.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/sdks/web-component/README.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst logger = {\n  info: (message: string, description: string, state: any) => {\n    console.log(message, description);\n  },\n  warn: (title: string, description: string) => {\n    console.warn(`WARN: ${title}`, description);\n  },\n  error: (title: string, description: string) => {\n    console.error(`ERROR: ${title}`, description);\n  },\n};\n\nconst descopeWcEle = document.getElementsByTagName('descope-wc')[0];\n\ndescopeWcEle.logger = logger;\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Descope User Profile Widget\nDESCRIPTION: Sets up the necessary environment variables for the Descope User Profile Widget in an .env file. These variables include the base URL, project ID, widget ID, debug mode, and theme settings.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/widgets/user-profile-widget/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nDESCOPE_BASE_URL=   # env base url\nDESCOPE_PROJECT_ID= # project ID\nDESCOPE_WIDGET_ID=  # default: user-profile-widget\nDEBUG_MODE=         # \"true\" / \"false\", default: \"false\"\nDESCOPE_THEME=      # \"light\" / \"dark\" / \"os\", default: \"light\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Access Key Management Widget in Angular\nDESCRIPTION: Shows how to embed access key management widgets for both admin and user views, allowing management of tenant users' access keys.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/sdks/angular-sdk/README.md#2025-04-22_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<!-- admin view: manage all tenant users' access keys -->\n<access-key-management\n  tenant=\"tenant-id\"\n  widgetId=\"access-key-management-widget\"\n/>\n\n<!-- user view: mange access key for the logged-in tenant's user -->\n<access-key-management\n  tenant=\"tenant-id\"\n  widgetId=\"user-access-key-management-widget\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Audit Management Widget\nDESCRIPTION: Shows how to embed an audit table using the AuditManagement widget component\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/sdks/react-sdk/README.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport { AuditManagement } from '@descope/react-sdk';\n...\n  <AuditManagement\n    widgetId=\"audit-management-widget\"\n    tenant=\"tenant-id\"\n  />\n```\n\n----------------------------------------\n\nTITLE: Implementing Audit Management Widget in Angular\nDESCRIPTION: Demonstrates how to embed an audit table widget in an Angular application for tracking user activities.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/sdks/angular-sdk/README.md#2025-04-22_snippet_16\n\nLANGUAGE: html\nCODE:\n```\n<audit-management tenant=\"tenant-id\" widgetId=\"audit-management-widget\" />\n```\n\n----------------------------------------\n\nTITLE: Manual Session Refresh Implementation\nDESCRIPTION: Example of manually triggering session refresh using the useDescope hook when automatic refresh via useSession is not needed.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/sdks/react-sdk/README.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst { refresh } = useDescope();\nuseEffect(() => {\n  refresh();\n}, [refresh]);\n```\n\n----------------------------------------\n\nTITLE: Advanced OIDC Logout with Redirect\nDESCRIPTION: Implementation of OIDC logout with custom post-logout redirect functionality. Demonstrates how to specify a custom redirect URL after logout.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/sdks/react-sdk/README.md#2025-04-22_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nconst MyComponent = () => {\n  const sdk = useDescope();\n\n  return (\n    // ...\n    <button\n      onClick={() => {\n        sdk.oidc.logout({\n          // by default, the logout will redirect the user to the current URL\n          // if you want to redirect the user to a different URL, you can specify it here\n          post_logout_redirect_uri: window.location.origin + '/after-logout',\n        });\n      }}\n    >\n      Logout\n    </button>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Initiating OIDC Login with Descope SDK in JavaScript\nDESCRIPTION: Demonstrates how to start the OIDC login process using the Descope SDK's loginWithRedirect method.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/sdks/web-js-sdk/README.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nawait sdk.oidc.loginWithRedirect({\n  redirect_uri: window.location.origin,\n});\n```\n\n----------------------------------------\n\nTITLE: Auth State Management Template\nDESCRIPTION: HTML template for displaying authentication-related UI elements based on user's authentication state. Shows conditional rendering for login status and logout button.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/sdks/angular-sdk/README.md#2025-04-22_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<p *ngIf=\"!isAuthenticated\"> You are not logged in</p>\n<button *ngIf=\"isAuthenticated\" (click)=\"logout()\">LOGOUT</button>\n<p>User: {{userName}}</p>\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for Descope Integration\nDESCRIPTION: Configuration to add Descope type definitions to your TypeScript configuration file. This ensures proper type checking for Descope SDK functions and components.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/sdks/angular-sdk/README.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n  \"compilerOptions\": {\n    \"typeRoots\": [\"./node_modules/@descope\"],\n    <other options>\n  }\n```\n\n----------------------------------------\n\nTITLE: Implementing Descope Widget in HTML\nDESCRIPTION: HTML implementation example showing how to embed the Descope access key management widget with configurable attributes for base URL, project ID, tenant, debug mode, theme, and widget ID.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/widgets/access-key-management-widget/README.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n// replace x.x.x with the latest release of the widget: https://www.npmjs.com/package/@descope/access-key-management-widget\n<script src=\"https://descopecdn.com/npm/@descope/access-key-management-widget@x.x.x/dist/index.js\"></script>\n<descope-access-key-management-widget\n  base-url=\"<DESCOPE_BASE_URL>\"\n  project-id=\"<DESCOPE_PROJECT_ID>\"\n  tenant=\"<DESCOPE_TENANT>\"\n  debug=\"<DEBUG_MODE>\"\n  theme=\"<DESCOPE_THEME>\"\n  widget-id=\"<DESCOPE_WIDGET_ID>\"\n></descope-access-key-management-widget>\n```\n\n----------------------------------------\n\nTITLE: Implementing Descope Widget in HTML\nDESCRIPTION: HTML implementation example showing how to include and configure the Descope audit management widget using a script tag and custom element with configuration attributes.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/widgets/audit-management-widget/README.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n// replace x.x.x with the latest release of the widget: https://www.npmjs.com/package/@descope/audit-management-widget\n<script src=\"https://descopecdn.com/npm/@descope/audit-management-widget@x.x.x/dist/index.js\"></script>\n<descope-audit-management-widget\n  base-url=\"<DESCOPE_BASE_URL>\"\n  project-id=\"<DESCOPE_PROJECT_ID>\"\n  tenant=\"<DESCOPE_TENANT>\"\n  debug=\"<DEBUG_MODE>\"\n  theme=\"<DESCOPE_THEME>\"\n  widget-id=\"<DESCOPE_WIDGET_ID>\"\n></descope-audit-management-widget>\n```\n\n----------------------------------------\n\nTITLE: Configuring SDK Scripts in JSON for Descope Flow\nDESCRIPTION: This JSON snippet shows how to configure SDK scripts in the flow config entry. It specifies the script ID, an optional result key, and initialization arguments.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/sdks/web-component/src/lib/descope-wc/sdkScripts/README.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sdkScripts\": {\n    \"id\": \"script-id\",\n    \"resultKey\": \"result-key\",\n    \"initArgs\": {\n      /* Arguments passed to the script */\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Descope Web SDK via npm\nDESCRIPTION: Command to install the @descope/web-js-sdk package using npm package manager.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/sdks/web-js-sdk/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @descope/web-js-sdk\n```\n\n----------------------------------------\n\nTITLE: Installing Descope Web Component with npm\nDESCRIPTION: Command to install the @descope/web-component package using npm package manager.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/sdks/web-component/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @descope/web-component\n```\n\n----------------------------------------\n\nTITLE: Building the Descope SDK Package\nDESCRIPTION: Command to build the Descope SDK package from the parent directory. This needs to be executed before setting up the example project.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/sdks/nextjs-sdk/examples/app-router/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n(cd ../../ && npm run build)\n```\n\n----------------------------------------\n\nTITLE: Installing Descope Vue SDK via NPM\nDESCRIPTION: Command to install the Descope Vue SDK package using npm package manager.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/sdks/vue-sdk/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i --save @descope/vue-sdk\n```\n\n----------------------------------------\n\nTITLE: Running the Example Application\nDESCRIPTION: Command to start the development server for the example application on port 3001.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/sdks/nextjs-sdk/examples/pages-router/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Recent Feature Additions and Bug Fixes\nDESCRIPTION: A chronological log of version updates for the Descope JS core SDK, including changes like adding OIDC prompt parameters, HTTP client patches, flow runner logging, and implicit grant type support.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/sdks/core-js-sdk/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [2.23.2](https://github.com/descope/descope-js/compare/core-js-sdk-2.23.1...core-js-sdk-2.23.2) (2024-07-10)\n\n### Features\n* add oidc prompt parameter RELEASE ([#676](https://github.com/descope/descope-js/issues/676))\n* Add Patch method to HTTP client ([#675](https://github.com/descope/descope-js/issues/675))\n* Log flow runner logs if they exists ([#672](https://github.com/descope/descope-js/issues/672))\n* Support implicit grant type for native ([#635](https://github.com/descope/descope-js/issues/635))\n```\n\n----------------------------------------\n\nTITLE: Apps Portal SDK Integration\nDESCRIPTION: Implementation of applications portal SDK functionality (#808)\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/sdks/react-sdk/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n* apps portal sdks ([#808](https://github.com/descope/descope-js/issues/808)) ([30b11b0](https://github.com/descope/descope-js/commit/30b11b0ec8252281ed3cfb273e415edfa2fa1070))\n```\n\n----------------------------------------\n\nTITLE: Logout Previous Sessions Feature\nDESCRIPTION: New feature implementation for logging out previous sessions (#846)\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/sdks/react-sdk/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n* Logout previous sessions RELEASE ([#846](https://github.com/descope/descope-js/issues/846)) ([193b640](https://github.com/descope/descope-js/commit/193b640bb81b157d172ca4e58d32f742e97009fe))\n```\n\n----------------------------------------\n\nTITLE: Style ID Addition to Widgets\nDESCRIPTION: Feature addition to include style-id attribute for widgets (#840)\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/sdks/react-sdk/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n* add style-id to widgets ([#840](https://github.com/descope/descope-js/issues/840)) ([0573afd](https://github.com/descope/descope-js/commit/0573afd7e3e873a18bfba605643dd20820cf0365))\n```\n\n----------------------------------------\n\nTITLE: Configuring CommonJS Dependencies in Angular\nDESCRIPTION: JSON configuration to allow CommonJS dependencies in Angular applications to resolve build warnings.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/sdks/angular-sdk/README.md#2025-04-22_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n\"architect\": {\n\t\"build\": {\n\t\t\"builder\": \"@angular-devkit/build-angular:browser\",\n\t\t\"options\": {\n\t\t\t\"allowedCommonJsDependencies\": [\"lodash.get\"],\n\t\t\t<other_options>\n\t\t}\n\t\t<other_config>\n\t}\n\t<other_config>\n}\n```\n\n----------------------------------------\n\nTITLE: Feature Documentation\nDESCRIPTION: Documentation of new features added to the widget including role management and access keys\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/widgets/role-management-widget/CHANGELOG.md#2025-04-22_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n### Features\n\n* Add access keys management widget ([#421](https://github.com/descope/descope-js/issues/421)) ([1f7868d])\n* Add role management widget ([#412](https://github.com/descope/descope-js/issues/412)) ([007dc22])\n* Widget mocks ([#429](https://github.com/descope/descope-js/issues/429)) ([1b83a6d])\n```\n\n----------------------------------------\n\nTITLE: Version Release Notes in Markdown\nDESCRIPTION: Changelog entries detailing version changes, bug fixes, features and dependency updates for the Descope JS web component library.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/sdks/web-component/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## [3.12.0](https://github.com/descope/descope-js/compare/web-component-3.11.25...web-component-3.12.0) (2024-05-22)\n\n### Features\n\n* use base url for static content ([#593](https://github.com/descope/descope-js/issues/593)) ([3d42936](https://github.com/descope/descope-js/commit/3d4293646c49714b78b7d740d39c376873f0658c))\n```\n\n----------------------------------------\n\nTITLE: Angular Lazy Module Bug Fix\nDESCRIPTION: Fix for Angular lazy module loading issue (#851)\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/sdks/react-sdk/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* angualr lazy module ([#851](https://github.com/descope/descope-js/issues/851)) ([0b7b7f5](https://github.com/descope/descope-js/commit/0b7b7f56fb7d9300540526c24b2967d1839b4612))\n```\n\n----------------------------------------\n\nTITLE: Installing Descope React SDK\nDESCRIPTION: Command to install the Descope React SDK package using npm\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/sdks/react-sdk/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i --save @descope/react-sdk\n```\n\n----------------------------------------\n\nTITLE: Version Control and Dependency Update Commits\nDESCRIPTION: Git commit messages and version control information showing dependency updates, bug fixes and feature additions to the sdk-component-drivers package.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/libs/sdk-component-drivers/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Dependency Updates\n\n* `sdk-helpers` updated to version `0.1.27`\n```\n\nLANGUAGE: markdown\nCODE:\n```\n### Bug Fixes\n\n* polyfil lodash get ([#439](https://github.com/descope/descope-js/issues/439)) RELEASE ([007734f](https://github.com/descope/descope-js/commit/007734f949f23bb48bf0a3bd427a07eafee88c23))\n```\n\nLANGUAGE: markdown\nCODE:\n```\n### Features\n\n* Add access keys management widget ([#421](https://github.com/descope/descope-js/issues/421)) ([1f7868d](https://github.com/descope/descope-js/commit/1f7868db53aa65d2c3f447f7968f9fc7a741105a))\n* Edit/View Permissions for admin widget ([#418](https://github.com/descope/descope-js/issues/418)) ([95ed565](https://github.com/descope/descope-js/commit/95ed565692f759ec3313f4ae215a6f881dd59375))\n```\n\n----------------------------------------\n\nTITLE: Installing @descope/core-js-sdk via npm\nDESCRIPTION: This snippet shows how to install the Descope JavaScript core SDK using npm. It's a prerequisite for using the SDK in your project.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/sdks/core-js-sdk/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @descope/core-js-sdk\n```\n\n----------------------------------------\n\nTITLE: Bug Fix Commit for tslib Dependency\nDESCRIPTION: Git commit hash and PR reference for updating tslib dependency to version 2.6.3.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/widgets/user-profile-widget/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n([a9e328c](https://github.com/descope/descope-js/commit/a9e328c78b450f3799fcc03652eaca3011efa0df))\n```\n\n----------------------------------------\n\nTITLE: Feature Release Note - Initial Audit Widget Release\nDESCRIPTION: Markdown entry documenting the initial release of the audit management widget with version 0.1.0, including dependency versions and associated pull request.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/widgets/audit-management-widget/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Features\n\n* Audit widget RELEASE ([#502](https://github.com/descope/descope-js/issues/502)) ([d04199b](https://github.com/descope/descope-js/commit/d04199bc0d99083202f19cd28f0c2316cb19eb94))\n```\n\n----------------------------------------\n\nTITLE: Setting Up Environment Variables\nDESCRIPTION: Example of setting up project ID environment variable for running the examples\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/sdks/react-sdk/README.md#2025-04-22_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nexport DESCOPE_PROJECT_ID=<Project-ID>\n```\n\n----------------------------------------\n\nTITLE: Running the Next.js Development Server\nDESCRIPTION: Command to start the Next.js development server for the Descope authentication example.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/sdks/nextjs-sdk/examples/app-router/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies\nDESCRIPTION: Command to install all the required dependencies for the NextJS Descope example project.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/sdks/nextjs-sdk/examples/app-router/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies\nDESCRIPTION: Command to install the necessary npm dependencies for the example project.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/sdks/nextjs-sdk/examples/pages-router/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Running Example Application\nDESCRIPTION: Commands to install dependencies and start the example application\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/sdks/react-sdk/README.md#2025-04-22_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nnpm i && npm start\n```\n\n----------------------------------------\n\nTITLE: RestartOnError Exposure Fix\nDESCRIPTION: Bug fix to expose restartOnError functionality across all SDKs (#838)\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/sdks/react-sdk/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n* expose restartOnError on all sdks ([#838](https://github.com/descope/descope-js/issues/838)) ([dd20924](https://github.com/descope/descope-js/commit/dd20924dfd02345eae2972d5154b9be8a209a906))\n```\n\n----------------------------------------\n\nTITLE: Version Numbers and Release Info in Markdown\nDESCRIPTION: Version numbers and release information displayed in markdown format, detailing changes across multiple releases including bug fixes, dependency updates and new features.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/sdks/web-component/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Bug Fixes\n\n* handle mismatch flow version ([#818](https://github.com/descope/descope-js/issues/818)) ([9aa29e2](https://github.com/descope/descope-js/commit/9aa29e2a6293d761275738edced7091c785503f0))\n\n## [3.26.0](https://github.com/descope/descope-js/compare/web-component-3.25.3...web-component-3.26.0) (2024-10-14)\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry Format - Markdown\nDESCRIPTION: Each changelog entry uses a standardized format to document version changes, including version number, comparison link, dependency updates, features, and bug fixes.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/sdks/web-js-sdk/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [1.31.3](https://github.com/descope/descope-js/compare/web-js-sdk-1.31.2...web-js-sdk-1.31.3) (2025-04-21)\n\n### Dependency Updates\n\n* `core-js-sdk` updated to version `2.43.1`\n```\n\n----------------------------------------\n\nTITLE: Building the Descope SDK Package\nDESCRIPTION: Command to build the Descope SDK package from the parent directory before using it in the example project.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/sdks/nextjs-sdk/examples/pages-router/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n(cd ../../ && npm run build)\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies in Markdown Changelog\nDESCRIPTION: This snippet shows how dependency updates are documented in the changelog using Markdown format. It lists the updated packages and their new versions.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/widgets/role-management-widget/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Dependency Updates\n\n* `web-js-sdk` updated to version `1.13.7`\n```\n\n----------------------------------------\n\nTITLE: Supporting Cookie Rename Feature in Applications Portal Widget\nDESCRIPTION: Added support for cookie rename functionality in version 0.3.0, which appears to be a significant feature enhancement for the widget.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/widgets/applications-portal-widget/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* support cookie rename ([#1025](https://github.com/descope/descope-js/issues/1025)) RELEASE ([cc90806](https://github.com/descope/descope-js/commit/cc90806d8c97d1579d89921ee23c9bf846d11b5f))\n```\n\n----------------------------------------\n\nTITLE: Version 3.18.3 Release Notes\nDESCRIPTION: Release notes detailing dependency updates to web-js-sdk version 1.15.0 and the addition of OIDC prompt parameter functionality.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/sdks/web-component/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Dependency Updates\n\n* `web-js-sdk` updated to version `1.15.0`\n\n### Features\n\n* add oidc prompt parameter RELEASE ([#676](https://github.com/descope/descope-js/issues/676)) ([b5f7bcf](https://github.com/descope/descope-js/commit/b5f7bcf30e1ed203821cd53ddfe7d7eb1c97f326))\n```\n\n----------------------------------------\n\nTITLE: Bug Fix Documentation\nDESCRIPTION: Documentation of bug fixes and widget improvements\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/widgets/role-management-widget/CHANGELOG.md#2025-04-22_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n### Bug Fixes\n\n* widget fixes RELEASE ([#480](https://github.com/descope/descope-js/issues/480)) ([fed3eba])\n* Fix widget style ([#461](https://github.com/descope/descope-js/issues/461)) ([f639b8d])\n* filter custom attrs ([#450](https://github.com/descope/descope-js/issues/450)) ([43c1059])\n```\n\n----------------------------------------\n\nTITLE: Documenting Bug Fixes in Markdown Changelog\nDESCRIPTION: This snippet demonstrates how bug fixes are recorded in the changelog using Markdown format. It includes a link to the GitHub issue and a brief description of the fix.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/widgets/role-management-widget/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Bug Fixes\n\n* **deps:** update dependency tslib to v2.6.3 ([#651](https://github.com/descope/descope-js/issues/651)) ([a9e328c](https://github.com/descope/descope-js/commit/a9e328c78b450f3799fcc03652eaca3011efa0df))\n```\n\n----------------------------------------\n\nTITLE: Release Notes Markdown\nDESCRIPTION: Changelog entries documenting version changes, dependency updates, features and bug fixes for the access key management widget package.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/widgets/access-key-management-widget/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n## [0.1.3] (2024-03-19)\n\n### Dependency Updates\n\n* `web-js-sdk` updated to version `1.10.8`\n\n### Bug Fixes\n\n* **deps:** update dependency reselect to v5.1.0 ([#440]) ([bba913f])\n\n## [0.1.2] (2024-03-19)\n\n## [0.1.1] (2024-03-19)\n\n### Dependency Updates\n\n* `web-js-sdk` updated to version `1.10.7`\n\n## 0.1.0 (2024-03-18)\n\n### Dependency Updates\n\n* `web-js-sdk` updated to version `1.10.6`\n* `sdk-helpers` updated to version `0.1.0`\n* `sdk-mixins` updated to version `0.1.0`\n* `sdk-component-drivers` updated to version `0.1.0`\n\n### Features\n\n* Add access keys management widget ([#421]) ([1f7868d])\n* Widget mocks ([#429]) ([1b83a6d])\n\n### Bug Fixes\n\n* Add editable support for access keys ([#426]) ([0f2eb4d])\n* block delete for non editable RELEASE ([#434]) ([f6def54])\n```\n\n----------------------------------------\n\nTITLE: Release Version Links\nDESCRIPTION: Links to version comparisons and release details in GitHub repository\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/widgets/role-management-widget/CHANGELOG.md#2025-04-22_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n## [0.1.25](https://github.com/descope/descope-js/compare/role-management-widget-0.1.24...role-management-widget-0.1.25)\n```\n\n----------------------------------------\n\nTITLE: Bug Fix Release Note for Role Management Widget\nDESCRIPTION: Git commit message documenting bug fixes for theme mixin and search mocks in the widget.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/widgets/role-management-widget/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### Bug Fixes\n\n* theme mixin RELEASE ([#529](https://github.com/descope/descope-js/issues/529)) ([4e1746e](https://github.com/descope/descope-js/commit/4e1746e5db30acea0a4f8776975471d305399d8c))\n```\n\n----------------------------------------\n\nTITLE: Bug Fix Commit for Issue 641\nDESCRIPTION: Git commit hash and PR reference for fixing issue 641.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/widgets/user-profile-widget/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n([b4f338b](https://github.com/descope/descope-js/commit/b4f338b93ba2e9e2929b9ad52d2ce1ba752b98c1))\n```\n\n----------------------------------------\n\nTITLE: Issue 6069 Fix Release Note\nDESCRIPTION: Git commit message documenting a fix for issue #6069 in the codebase.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/widgets/role-management-widget/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n### Bug Fixes\n\n* issue 6069 RELEASE ([#482](https://github.com/descope/descope-js/issues/482)) ([5b68211](https://github.com/descope/descope-js/commit/5b682116a952028d15c1b846366e724b32ef59a2))\n```\n\n----------------------------------------\n\nTITLE: Widget Search Mock Fix Release Note\nDESCRIPTION: Git commit message documenting a bug fix for handling 9 items in widget search mocks.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/widgets/role-management-widget/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n### Bug Fixes\n\n* 9 items in widgets search mocks RELEASE ([#483](https://github.com/descope/descope-js/issues/483)) ([ae51c42](https://github.com/descope/descope-js/commit/ae51c42c9e1f21f25ffdcefda5434b4b40b80abd))\n```\n\n----------------------------------------\n\nTITLE: Bug Fix: Widget Search Mocks\nDESCRIPTION: Commit updating widget search mock data\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/widgets/access-key-management-widget/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n* 9 items in widgets search mocks RELEASE ([#483](https://github.com/descope/descope-js/issues/483)) ([ae51c42](https://github.com/descope/descope-js/commit/ae51c42c9e1f21f25ffdcefda5434b4b40b80abd))\n```\n\n----------------------------------------\n\nTITLE: Bug Fix Commit - Tenant Removal\nDESCRIPTION: Commit hash bca7b86 removing tenant functionality\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/widgets/user-profile-widget/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\nremove tenant ([#563](https://github.com/descope/descope-js/issues/563)) ([bca7b86](https://github.com/descope/descope-js/commit/bca7b860337388d534610dd0d904ad99f719b5a7))\n```\n\n----------------------------------------\n\nTITLE: Displaying Version History in Markdown\nDESCRIPTION: This code snippet shows the structure of how version history is documented in the changelog, including version numbers, dates, and dependency updates.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/sdks/angular-sdk/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n## [0.14.14](https://github.com/descope/descope-js/compare/angular-sdk-0.14.13...angular-sdk-0.14.14) (2025-04-21)\n\n### Dependency Updates\n\n* `user-profile-widget` updated to version `0.4.19`\n* `web-component` updated to version `3.42.2`\n```\n\n----------------------------------------\n\nTITLE: Bug Fix Commit Messages\nDESCRIPTION: Git commit messages documenting dependency updates and bug fixes\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/widgets/access-key-management-widget/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* **deps:** update dependency tslib to v2.6.3 ([#651](https://github.com/descope/descope-js/issues/651)) ([a9e328c])\n* **deps:** update dependency reselect to v5.1.1 ([#644](https://github.com/descope/descope-js/issues/644)) ([e7f6699])\n* base static url for widgets RELEASE ([#599](https://github.com/descope/descope-js/issues/599)) ([d2aa32c])\n```\n\n----------------------------------------\n\nTITLE: Bug Fix Commit for Reselect Dependency\nDESCRIPTION: Git commit hash and PR reference for updating reselect dependency to version 5.1.1.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/widgets/user-profile-widget/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n([e7f6699](https://github.com/descope/descope-js/commit/e7f669993e0b5b19a36f28ed6f4814c73029e7d6))\n```\n\n----------------------------------------\n\nTITLE: Fixing TSLib Dependency in Applications Portal Widget\nDESCRIPTION: Bug fix updating the tslib dependency to version 2.8.1 in the applications portal widget module.\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/widgets/applications-portal-widget/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n* **deps:** update dependency tslib to v2.8.1 ([#912](https://github.com/descope/descope-js/issues/912)) ([e49bd4b](https://github.com/descope/descope-js/commit/e49bd4b4668e3139b1d8a059858df36831782500))\n```\n\n----------------------------------------\n\nTITLE: Bug Fix: Filter Custom Attributes\nDESCRIPTION: Commit fixing custom attribute filtering functionality\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/widgets/access-key-management-widget/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n* filter custom attrs ([#450](https://github.com/descope/descope-js/issues/450)) ([43c1059](https://github.com/descope/descope-js/commit/43c1059b738981ff170281d299769036c90f406b))\n```\n\n----------------------------------------\n\nTITLE: Bug Fix: Widget Style Updates\nDESCRIPTION: Commit addressing widget styling issues\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/widgets/access-key-management-widget/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n* Fix widget style ([#461](https://github.com/descope/descope-js/issues/461)) ([f639b8d](https://github.com/descope/descope-js/commit/f639b8dcae74626c1126f811129ad89fe8aecec8))\n```\n\n----------------------------------------\n\nTITLE: Bug Fix Commit - Base Static URL\nDESCRIPTION: Commit hash d2aa32c fixing base static URL configuration for widgets\nSOURCE: https://github.com/descope/descope-js/blob/main/packages/widgets/user-profile-widget/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nbase static url for widgets RELEASE ([#599](https://github.com/descope/descope-js/issues/599)) ([d2aa32c](https://github.com/descope/descope-js/commit/d2aa32c3339d552fe9307c3cdd6e21919d44ce78))\n```"
  }
]