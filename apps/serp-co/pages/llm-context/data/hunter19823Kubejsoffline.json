[
  {
    "owner": "hunter19823",
    "repo": "kubejsoffline",
    "content": "TITLE: Implementing OfflinePlugin class for KubeJS in Java\nDESCRIPTION: Defines the OfflinePlugin class which implements the KubeJS plugin interface. The plugin initializes with a logger and registers a handler for the event bus when loaded.\nSOURCE: https://github.com/hunter19823/kubejsoffline/blob/1.20.1/common/src/main/resources/kubejs.plugins.txt#2025-04-23_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\npackage pie.ilikepiefoo.kubejsoffline;\n\nimport dev.latvian.mods.kubejs.KubeJSPlugin;\nimport dev.latvian.mods.kubejs.script.ScriptType;\nimport org.apache.logging.log4j.LogManager;\nimport org.apache.logging.log4j.Logger;\n\npublic class OfflinePlugin extends KubeJSPlugin {\n    public static final Logger LOGGER = LogManager.getLogger(\"KubeJS Offline\");\n\n    @Override\n    public void registerEvents() {\n        LOGGER.info(\"KubeJS Offline: Event Bus Registration\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Raw Class Data Structure in KubeJS Offline\nDESCRIPTION: Detailed definition of a Raw Class object including its metadata, hierarchy information, fields, constructors, and methods.\nSOURCE: https://github.com/hunter19823/kubejsoffline/blob/1.20.1/schemabreakdown.md#2025-04-23_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n*name: *nameID\n*id: *classID\n*modifier: *int\npackage: *packageID\nsuperClass: *TypeID\ninterfaces: *[*TypeID]\nannotations: *[*annotationID]\n*(typeVariables): *[*TypeVariableReference]\n(innerClasses | outerClass): *([*classID] | classID)\n\nfields:\n    *name: *nameID\n    *modifier: *int\n    *(type | typeVariable): *TypeOrTypeVariableID\n    annotations: *[*annotationID]\n\nconstructors:\n    *modifier: *int\n    annotations: *[*annotationID]\n    *(type | typeVariable): *TypeOrTypeVariableID\n    parameters: *[*ParameterID]\n    exceptions: *[*TypeID]\n\nmethods:\n    *modifier: int\n    annotations: *[*annotationID]\n    *(typeVariables): *[*TypeVariableReference]\n    *(type | typeVariable): *TypeOrTypeVariableID\n    parameters: *[*ParameterID]\n    exceptions: *[*TypeID]\n```\n\n----------------------------------------\n\nTITLE: Defining Collections Types Structure in KubeJS Offline\nDESCRIPTION: Describes the index structure for Types collection, which can contain RawClass, Parameterized Type, or Wildcard Type objects.\nSOURCE: https://github.com/hunter19823/kubejsoffline/blob/1.20.1/schemabreakdown.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nindex: *(RawClass | Parameterized Type | Wildcard Type)\n```\n\n----------------------------------------\n\nTITLE: Defining Parameter Data Structure in KubeJS Offline\nDESCRIPTION: Defines the fields of a Parameter object, including name, type/typeVariable reference, and annotations.\nSOURCE: https://github.com/hunter19823/kubejsoffline/blob/1.20.1/schemabreakdown.md#2025-04-23_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n*name: *nameID\n*(type | typeVariable): *TypeOrTypeVariableID\nannotations: *[*annotationID]\n```\n\n----------------------------------------\n\nTITLE: Defining Type Variable Data Structure in KubeJS Offline\nDESCRIPTION: Defines the structure for a Type Variable, including its ID, name, and extends/supers references.\nSOURCE: https://github.com/hunter19823/kubejsoffline/blob/1.20.1/schemabreakdown.md#2025-04-23_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n*id: *typeVariableID\n*typeVariableName: *nameID\n*(extends | supers):\n    *(type | typeVariable): *TypeOrTypeVariableID\n```\n\n----------------------------------------\n\nTITLE: Defining Parametrized Type Data Structure in KubeJS Offline\nDESCRIPTION: Defines the structure for a Parametrized Type, including its ID, raw type, and actual types references.\nSOURCE: https://github.com/hunter19823/kubejsoffline/blob/1.20.1/schemabreakdown.md#2025-04-23_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n*id: *typeID\n*rawType: *classID\n*actualTypes:\n    *(type | typeVariable): *TypeOrTypeVariableID\n```\n\n----------------------------------------\n\nTITLE: Defining Wildcard Type Data Structure in KubeJS Offline\nDESCRIPTION: Defines the structure for a Wildcard Type, including its ID and extends/supers references.\nSOURCE: https://github.com/hunter19823/kubejsoffline/blob/1.20.1/schemabreakdown.md#2025-04-23_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n*id: *typeID\n*(extends | supers):\n    *(type | typeVariable): *TypeOrTypeVariableID\n```\n\n----------------------------------------\n\nTITLE: Defining TypeOrTypeVariableReference Structure in KubeJS Offline\nDESCRIPTION: Defines the structure for TypeOrTypeVariableReference, which can be either a TypeReference or TypeVariableReference.\nSOURCE: https://github.com/hunter19823/kubejsoffline/blob/1.20.1/schemabreakdown.md#2025-04-23_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n*(TypeReference | TypeVariableReference)\n```\n\n----------------------------------------\n\nTITLE: Defining Collections Packages Structure in KubeJS Offline\nDESCRIPTION: Describes the index structure for Packages collection, with parsing instructions for name resolution based on nameID or combination of nameID and packageID.\nSOURCE: https://github.com/hunter19823/kubejsoffline/blob/1.20.1/schemabreakdown.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nindex: *(nameID | [*nameID, *packageID])\n    parsing instructions:\n        1. If the item at the index is a string, return the name with that ID.\n        2. If the item at the index is an array, return the name of the first item in that array, appended by a period, appended by the package name in the second index.\n```\n\n----------------------------------------\n\nTITLE: Defining Collections Parameters Structure in KubeJS Offline\nDESCRIPTION: Describes the index structure for Parameters collection, which contains Parameter objects.\nSOURCE: https://github.com/hunter19823/kubejsoffline/blob/1.20.1/schemabreakdown.md#2025-04-23_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\nindex: *Parameter\n```\n\n----------------------------------------\n\nTITLE: Defining TypeReference Structure in KubeJS Offline\nDESCRIPTION: Defines the structure for TypeReference, which can be either a typeID or an array containing a typeID and depth.\nSOURCE: https://github.com/hunter19823/kubejsoffline/blob/1.20.1/schemabreakdown.md#2025-04-23_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n*(typeID | [*typeID, *depth])\n```\n\n----------------------------------------\n\nTITLE: Defining TypeVariableReference Structure in KubeJS Offline\nDESCRIPTION: Defines the structure for TypeVariableReference, which can be either a typeVariableID or an array containing a typeVariableID and depth.\nSOURCE: https://github.com/hunter19823/kubejsoffline/blob/1.20.1/schemabreakdown.md#2025-04-23_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n*(typeVariableID | [*typeVariableID, *depth])\n```\n\n----------------------------------------\n\nTITLE: Defining Collections Annotations Structure in KubeJS Offline\nDESCRIPTION: Describes the index structure for Annotations collection, which contains string values.\nSOURCE: https://github.com/hunter19823/kubejsoffline/blob/1.20.1/schemabreakdown.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nindex: *string\n```\n\n----------------------------------------\n\nTITLE: Defining Collections Names Structure in KubeJS Offline\nDESCRIPTION: Describes the index structure for Names collection, which contains string values.\nSOURCE: https://github.com/hunter19823/kubejsoffline/blob/1.20.1/schemabreakdown.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nindex: *string\n```"
  }
]