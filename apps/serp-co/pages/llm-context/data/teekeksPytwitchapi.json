[
  {
    "owner": "teekeks",
    "repo": "pytwitchapi",
    "content": "TITLE: Performing User Authentication with twitchAPI in Python\nDESCRIPTION: Illustrates how to obtain a user authentication token using the built-in `UserAuthenticator`. It requires initializing `Twitch` with app credentials, defining the required authorization `AuthScope`, and then calling `auth.authenticate()`. This process opens a browser window for the user to authorize the application. The function returns the access token and refresh token upon successful authorization. Requires a pre-configured OAuth Redirect URL (`http://localhost:17563`) in the Twitch developer console. Depends on `twitchAPI` and `asyncio`.\nSOURCE: https://github.com/teekeks/pytwitchapi/blob/master/README.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom twitchAPI.twitch import Twitch\nfrom twitchAPI.oauth import UserAuthenticator\nfrom twitchAPI.type import AuthScope\n\ntwitch = await Twitch('my_app_id', 'my_app_secret')\n\ntarget_scope = [AuthScope.BITS_READ]\nauth = UserAuthenticator(twitch, target_scope, force_verify=False)\n# this will open your default browser and prompt you with the twitch verification website\ntoken, refresh_token = await auth.authenticate()\n# add User authentication\nawait twitch.set_user_authentication(token, target_scope, refresh_token)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Basic Chat Commands Using pytwitchapi - Python\nDESCRIPTION: Creates a minimal Twitch chat bot using pytwitchapi that connects to specified channels, authenticates a user, and registers two simple commands (!one and !two). Required dependencies are pytwitchapi, with authentication scope for chat read/edit. Inputs include Twitch API credentials and channel names; outputs are command replies in chat. The implementation demonstrates asynchronous bot setup and graceful shutdown handling.\nSOURCE: https://github.com/teekeks/pytwitchapi/blob/master/docs/tutorial/chat-use-middleware.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\\nfrom twitchAPI import Twitch\\nfrom twitchAPI.chat import Chat, ChatCommand\\nfrom twitchAPI.oauth import UserAuthenticationStorageHelper\\nfrom twitchAPI.types import AuthScope\\n\\n\\nAPP_ID = 'your_app_id'\\nAPP_SECRET = 'your_app_secret'\\nSCOPES = [AuthScope.CHAT_READ, AuthScope.CHAT_EDIT]\\nTARGET_CHANNEL = ['your_first_channel', 'your_second_channel']\\n\\n\\nasync def command_one(cmd: ChatCommand):\\n    await cmd.reply('This is the first command!')\\n\\n\\nasync def command_two(cmd: ChatCommand):\\n    await cmd.reply('This is the second command!')\\n\\n\\nasync def run():\\n    twitch = await Twitch(APP_ID, APP_SECRET)\\n    helper = UserAuthenticationStorageHelper(twitch, SCOPES)\\n    await helper.bind()\\n    chat = await Chat(twitch, initial_channel=TARGET_CHANNEL)\\n\\n    chat.register_command('one', command_one)\\n    chat.register_command('two', command_two)\\n\\n    chat.start()\\n    try:\\n        input('press Enter to shut down...\\\\n')\\n    except KeyboardInterrupt:\\n        pass\\n    finally:\\n        chat.stop()\\n        await twitch.close()\\n\\n\\nasyncio.run(run())\n```\n\n----------------------------------------\n\nTITLE: Initializing Twitch API and Fetching User ID in Python\nDESCRIPTION: Demonstrates initializing the `Twitch` client using application credentials (`app_id`, `app_secret`), which automatically handles app authentication. It then asynchronously fetches the user data for a specified login name using `twitch.get_users()` and extracts the user ID using the `first` helper. Requires the `twitchAPI` library and `asyncio`.\nSOURCE: https://github.com/teekeks/pytwitchapi/blob/master/README.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom twitchAPI.twitch import Twitch\nfrom twitchAPI.helper import first\nimport asyncio\n\nasync def twitch_example():\n    # initialize the twitch instance, this will by default also create a app authentication for you\n    twitch = await Twitch('app_id', 'app_secret')\n    # call the API for the data of your twitch user\n    # this returns a async generator that can be used to iterate over all results\n    # but we are just interested in the first result\n    # using the first helper makes this easy.\n    user = await first(twitch.get_users(logins='your_twitch_user'))\n    # print the ID of your user or do whatever else you want with it\n    print(user.id)\n\n# run this example\nasyncio.run(twitch_example())\n```\n\n----------------------------------------\n\nTITLE: Performing App Authentication with twitchAPI in Python\nDESCRIPTION: Shows the simplest way to perform App authentication by initializing the `Twitch` object with the application's ID and secret. This grants access to API endpoints that require app-level authentication and provides better rate limits than unauthenticated requests. Requires `twitchAPI` and `asyncio`.\nSOURCE: https://github.com/teekeks/pytwitchapi/blob/master/README.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom twitchAPI.twitch import Twitch\ntwitch = await Twitch('my_app_id', 'my_app_secret')\n```\n\n----------------------------------------\n\nTITLE: User Authentication for Twitch API in Python\nDESCRIPTION: Demonstrates how to perform user authentication for the Twitch API, including opening a browser for user authorization and handling tokens.\nSOURCE: https://github.com/teekeks/pytwitchapi/blob/master/docs/index.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom twitchAPI.twitch import Twitch\nfrom twitchAPI.oauth import UserAuthenticator\nfrom twitchAPI.type import AuthScope\n\ntwitch = await Twitch('my_app_id', 'my_app_secret')\n\ntarget_scope = [AuthScope.BITS_READ]\nauth = UserAuthenticator(twitch, target_scope, force_verify=False)\n# this will open your default browser and prompt you with the twitch verification website\ntoken, refresh_token = await auth.authenticate()\n# add User authentication\nawait twitch.set_user_authentication(token, target_scope, refresh_token)\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Twitch Chat Bot in Python\nDESCRIPTION: Illustrates building a basic Twitch chat bot using `twitchAPI.chat`. The example covers initializing the `Twitch` API client, authenticating with chat scopes (`CHAT_READ`, `CHAT_EDIT`), creating a `Chat` instance, registering event handlers for `READY` (to join channels), `MESSAGE` (to process incoming messages), and `SUB` (to handle subscriptions), registering a chat command (`!reply`), starting the bot, and gracefully shutting it down. Requires `twitchAPI` and `asyncio`.\nSOURCE: https://github.com/teekeks/pytwitchapi/blob/master/README.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom twitchAPI.twitch import Twitch\nfrom twitchAPI.oauth import UserAuthenticator\nfrom twitchAPI.type import AuthScope, ChatEvent\nfrom twitchAPI.chat import Chat, EventData, ChatMessage, ChatSub, ChatCommand\nimport asyncio\n\nAPP_ID = 'my_app_id'\nAPP_SECRET = 'my_app_secret'\nUSER_SCOPE = [AuthScope.CHAT_READ, AuthScope.CHAT_EDIT]\nTARGET_CHANNEL = 'teekeks42'\n\n\n# this will be called when the event READY is triggered, which will be on bot start\nasync def on_ready(ready_event: EventData):\n    print('Bot is ready for work, joining channels')\n    # join our target channel, if you want to join multiple, either call join for each individually\n    # or even better pass a list of channels as the argument\n    await ready_event.chat.join_room(TARGET_CHANNEL)\n    # you can do other bot initialization things in here\n\n\n# this will be called whenever a message in a channel was send by either the bot OR another user\nasync def on_message(msg: ChatMessage):\n    print(f'in {msg.room.name}, {msg.user.name} said: {msg.text}')\n\n\n# this will be called whenever someone subscribes to a channel\nasync def on_sub(sub: ChatSub):\n    print(f'New subscription in {sub.room.name}:\\\\n'\n          f'  Type: {sub.sub_plan}\\\\n'\n          f'  Message: {sub.sub_message}')\n\n\n# this will be called whenever the !reply command is issued\nasync def test_command(cmd: ChatCommand):\n    if len(cmd.parameter) == 0:\n        await cmd.reply('you did not tell me what to reply with')\n    else:\n        await cmd.reply(f'{cmd.user.name}: {cmd.parameter}')\n\n\n# this is where we set up the bot\nasync def run():\n    # set up twitch api instance and add user authentication with some scopes\n    twitch = await Twitch(APP_ID, APP_SECRET)\n    auth = UserAuthenticator(twitch, USER_SCOPE)\n    token, refresh_token = await auth.authenticate()\n    await twitch.set_user_authentication(token, USER_SCOPE, refresh_token)\n\n    # create chat instance\n    chat = await Chat(twitch)\n\n    # register the handlers for the events you want\n\n    # listen to when the bot is done starting up and ready to join channels\n    chat.register_event(ChatEvent.READY, on_ready)\n    # listen to chat messages\n    chat.register_event(ChatEvent.MESSAGE, on_message)\n    # listen to channel subscriptions\n    chat.register_event(ChatEvent.SUB, on_sub)\n    # there are more events, you can view them all in this documentation\n\n    # you can directly register commands and their handlers, this will register the !reply command\n    chat.register_command('reply', test_command)\n\n\n    # we are done with our setup, lets start this bot up!\n    chat.start()\n\n    # lets run till we press enter in the console\n    try:\n        input('press ENTER to stop\\n')\n    finally:\n        # now we can close the chat bot and the twitch api client\n        chat.stop()\n        await twitch.close()\n\n\n# lets run our setup\nasyncio.run(run())\n```\n\n----------------------------------------\n\nTITLE: Using PubSub to Listen for Twitch Events in Python\nDESCRIPTION: Provides a complete example of using the PubSub client to listen for whisper events. It involves setting up the `Twitch` instance, performing user authentication with the necessary scope (`WHISPERS_READ`), obtaining the target user ID, initializing and starting the `PubSub` client, subscribing to the whisper topic using `listen_whispers` with a callback function, and finally stopping the client and closing the connection. Requires `twitchAPI`, `asyncio`, `pprint`, and `uuid`.\nSOURCE: https://github.com/teekeks/pytwitchapi/blob/master/README.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom twitchAPI.pubsub import PubSub\nfrom twitchAPI.twitch import Twitch\nfrom twitchAPI.helper import first\nfrom twitchAPI.type import AuthScope\nfrom twitchAPI.oauth import UserAuthenticator\nimport asyncio\nfrom pprint import pprint\nfrom uuid import UUID\n\nAPP_ID = 'my_app_id'\nAPP_SECRET = 'my_app_secret'\nUSER_SCOPE = [AuthScope.WHISPERS_READ]\nTARGET_CHANNEL = 'teekeks42'\n\nasync def callback_whisper(uuid: UUID, data: dict) -> None:\n    print('got callback for UUID ' + str(uuid))\n    pprint(data)\n\n\nasync def run_example():\n    # setting up Authentication and getting your user id\n    twitch = await Twitch(APP_ID, APP_SECRET)\n    auth = UserAuthenticator(twitch, [AuthScope.WHISPERS_READ], force_verify=False)\n    token, refresh_token = await auth.authenticate()\n    # you can get your user auth token and user auth refresh token following the example in twitchAPI.oauth\n    await twitch.set_user_authentication(token, [AuthScope.WHISPERS_READ], refresh_token)\n    user = await first(twitch.get_users(logins=[TARGET_CHANNEL]))\n\n    # starting up PubSub\n    pubsub = PubSub(twitch)\n    pubsub.start()\n    # you can either start listening before or after you started pubsub.\n    uuid = await pubsub.listen_whispers(user.id, callback_whisper)\n    input('press ENTER to close...')\n    # you do not need to unlisten to topics before stopping but you can listen and unlisten at any moment you want\n    await pubsub.unlisten(uuid)\n    pubsub.stop()\n    await twitch.close()\n\nasyncio.run(run_example())\n```\n\n----------------------------------------\n\nTITLE: Refreshing User Access Token with twitchAPI in Python\nDESCRIPTION: Demonstrates how to use a previously obtained refresh token to get a new user access token and a potentially new refresh token. This is done using the `refresh_access_token` function, passing the existing refresh token, client ID, and client secret. Requires `twitchAPI.oauth` and `asyncio`.\nSOURCE: https://github.com/teekeks/pytwitchapi/blob/master/README.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom twitchAPI.oauth import refresh_access_token\nnew_token, new_refresh_token = await refresh_access_token('refresh_token', 'client_id', 'client_secret')\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of UserAuthenticationStorageHelper in Python\nDESCRIPTION: This snippet demonstrates the fundamental use of `UserAuthenticationStorageHelper` to manage Twitch user tokens. It initializes the Twitch API, sets up the helper to store tokens in the default 'user_token.json' file, automatically handling token generation and refresh. Requires the `twitchAPI` library and `asyncio` for execution.\nSOURCE: https://github.com/teekeks/pytwitchapi/blob/master/docs/tutorial/reuse-user-token.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom twitchAPI import Twitch\nfrom twitchAPI.oauth import UserAuthenticationStorageHelper\nfrom twitchAPI.types import AuthScope\n\nAPP_ID = 'my_app_id'\nAPP_SECRET = 'my_app_secret'\nUSER_SCOPE = [AuthScope.CHAT_READ, AuthScope.CHAT_EDIT]\n\n\nasync def run():\n    twitch = await Twitch(APP_ID, APP_SECRET)\n    helper = UserAuthenticationStorageHelper(twitch, USER_SCOPE)\n    await helper.bind()\n    # do things\n\n    await twitch.close()\n\n\n# lets run our setup\nasyncio.run(run())\n```\n\n----------------------------------------\n\nTITLE: Mocking User Authentication with pytwitchapi in Python\nDESCRIPTION: This snippet shows how to mock user authentication using `pytwitchapi` and `twitch-cli`. It initializes the Twitch client with mock URLs, explicitly disables `auto_refresh_auth` as the mock API doesn't provide refresh tokens, uses `UserAuthenticator.mock_authenticate` with the mock auth URL to get a token for a specific user ID, sets the user authentication on the client, retrieves the authenticated user's details, and prints their login. Requires `twitch-cli` installed and `twitch mock-api start` running.\nSOURCE: https://github.com/teekeks/pytwitchapi/blob/master/docs/tutorial/mocking.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom twitchAPI.oauth import UserAuthenticator\nfrom twitchAPI.helper import first\nfrom twitchAPI.twitch import Twitch\n\nCLIENT_ID = 'GENERATED_CLIENT_ID'\nCLIENT_SECRET = 'GENERATED_CLIENT_SECRET'\nUSER_ID = '53100947'\n\n\nasync def run():\n    twitch = await Twitch(CLIENT_ID,\n                          CLIENT_SECRET,\n                          base_url='http://localhost:8080/mock/',\n                          auth_base_url='http://localhost:8080/auth/')\n    twitch.auto_refresh_auth = False\n    auth = UserAuthenticator(twitch, [], auth_base_url='http://localhost:8080/auth/')\n    token = await auth.mock_authenticate(USER_ID)\n    await twitch.set_user_authentication(token, [])\n    user = await first(twitch.get_users())\n    print(user.login)\n    await twitch.close()\n\n\nasyncio.run(run())\n```\n\n----------------------------------------\n\nTITLE: Setting Authentication Token Refresh Callbacks in Python\nDESCRIPTION: Shows how to define and set asynchronous callback functions for handling automatic refreshes of both user and app access tokens. The `user_auth_refresh_callback` receives the new token and refresh token, while `app_auth_refresh_callback` receives the new app token. These callbacks are assigned to the corresponding attributes of the initialized `Twitch` instance. Requires `twitchAPI` and `asyncio`.\nSOURCE: https://github.com/teekeks/pytwitchapi/blob/master/README.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom twitchAPI.twitch import Twitch\n\nasync def user_refresh(token: str, refresh_token: str):\n    print(f'my new user token is: {token}')\n\nasync def app_refresh(token: str):\n    print(f'my new app token is: {token}')\n\ntwitch = await Twitch('my_app_id', 'my_app_secret')\ntwitch.app_auth_refresh_callback = app_refresh\ntwitch.user_auth_refresh_callback = user_refresh\n```\n\n----------------------------------------\n\nTITLE: Implementing Twitch OAuth Headless Authentication with Flask in Python\nDESCRIPTION: This Python script demonstrates headless Twitch user authentication using the twitchAPI library and Flask. It initializes Flask, sets up Twitch API credentials (APP_ID, APP_SECRET) and required scopes (TARGET_SCOPE). It defines a redirect URL (MY_URL) and creates two Flask routes: '/login' to initiate the auth flow by redirecting the user to Twitch, and '/login/confirm' to handle the callback from Twitch, validate the state, exchange the authorization code for access and refresh tokens using `auth.authenticate`, and set the user authentication context on the `twitch` object using `twitch.set_user_authentication`. The script uses `asyncio` to run the initial asynchronous setup (`twitch_setup`). Dependencies include `twitchAPI`, `flask`, and `asyncio`. Ensure the `MY_URL` is registered as a redirect URL in the Twitch Developer Console.\nSOURCE: https://github.com/teekeks/pytwitchapi/blob/master/docs/tutorial/user-auth-headless.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom twitchAPI.twitch import Twitch\nfrom twitchAPI.oauth import UserAuthenticator\nfrom twitchAPI.type import AuthScope, TwitchAPIException\nfrom flask import Flask, redirect, request\n\nAPP_ID = 'my_app_id'\nAPP_SECRET = 'my_app_secret'\nTARGET_SCOPE = [AuthScope.CHAT_EDIT, AuthScope.CHAT_READ]\nMY_URL = 'http://localhost:5000/login/confirm'\n\n\napp = Flask(__name__)\ntwitch: Twitch\nauth: UserAuthenticator\n\n\n@app.route('/login')\ndef login():\n    return redirect(auth.return_auth_url())\n\n\n@app.route('/login/confirm')\nasync def login_confirm():\n    state = request.args.get('state')\n    if state != auth.state:\n        return 'Bad state', 401\n    code = request.args.get('code')\n    if code is None:\n        return 'Missing code', 400\n    try:\n        token, refresh = await auth.authenticate(user_token=code)\n        await twitch.set_user_authentication(token, TARGET_SCOPE, refresh)\n    except TwitchAPIException as e:\n        return 'Failed to generate auth token', 400\n    return 'Sucessfully authenticated!'\n\n\nasync def twitch_setup():\n    global twitch, auth\n    twitch = await Twitch(APP_ID, APP_SECRET)\n    auth = UserAuthenticator(twitch, TARGET_SCOPE, url=MY_URL)\n\n\nasyncio.run(twitch_setup())\n```\n\n----------------------------------------\n\nTITLE: Mocking App Authentication and API Calls with pytwitchapi in Python\nDESCRIPTION: This snippet demonstrates initializing the `pytwitchapi` Twitch client to interact with a running `twitch-cli` mock API server for app authentication. It sets the `base_url` and `auth_base_url` to the mock server endpoints, authenticates implicitly using client ID and secret, retrieves user information using `get_users`, and prints the user's login name. Requires `twitch-cli` installed and `twitch mock-api start` running.\nSOURCE: https://github.com/teekeks/pytwitchapi/blob/master/docs/tutorial/mocking.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom twitchAPI.helper import first\nfrom twitchAPI.twitch import Twitch\n\nCLIENT_ID = 'GENERATED_CLIENT_ID'\nCLIENT_SECRET = 'GENERATED_CLIENT_SECRET'\nUSER_ID = '53100947'\n\n\nasync def run():\n    twitch = await Twitch(CLIENT_ID,\n                          CLIENT_SECRET,\n                          base_url='http://localhost:8080/mock/',\n                          auth_base_url='http://localhost:8080/auth/')\n    user = await first(twitch.get_users(user_ids=USER_ID))\n    print(user.login)\n    await twitch.close()\n\n\nasyncio.run(run())\n```\n\n----------------------------------------\n\nTITLE: Applying Global Middleware for Chat Commands Using pytwitchapi - Python\nDESCRIPTION: Extends the basic chat bot setup by adding global middleware to restrict command usage to a whitelist of users and a specific channel. Utilizes UserRestriction and ChannelRestriction classes from pytwitchapi. Inputs are allowed user(s) and channel(s); outputs are commands filtered so only authorized users/channels allow execution. Setup is asynchronous and can be further customized by changing middleware parameters.\nSOURCE: https://github.com/teekeks/pytwitchapi/blob/master/docs/tutorial/chat-use-middleware.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\\nfrom twitchAPI import Twitch\\nfrom twitchAPI.chat import Chat, ChatCommand\\nfrom twitchAPI.chat.middleware import UserRestriction, ChannelRestriction\\nfrom twitchAPI.oauth import UserAuthenticationStorageHelper\\nfrom twitchAPI.types import AuthScope\\n\\n\\nAPP_ID = 'your_app_id'\\nAPP_SECRET = 'your_app_secret'\\nSCOPES = [AuthScope.CHAT_READ, AuthScope.CHAT_EDIT]\\nTARGET_CHANNEL = ['your_first_channel', 'your_second_channel']\\n\\n\\nasync def command_one(cmd: ChatCommand):\\n    await cmd.reply('This is the first command!')\\n\\n\\nasync def command_two(cmd: ChatCommand):\\n    await cmd.reply('This is the second command!')\\n\\n\\nasync def run():\\n    twitch = await Twitch(APP_ID, APP_SECRET)\\n    helper = UserAuthenticationStorageHelper(twitch, SCOPES)\\n    await helper.bind()\\n    chat = await Chat(twitch, initial_channel=TARGET_CHANNEL)\\n    chat.register_command_middleware(UserRestriction(allowed_users=['user1']))\\n    chat.register_command_middleware(ChannelRestriction(allowed_channel=['your_first_channel']))\\n\\n    chat.register_command('one', command_one)\\n    chat.register_command('two', command_two)\\n\\n    chat.start()\\n    try:\\n        input('press Enter to shut down...\\\\n')\\n    except KeyboardInterrupt:\\n        pass\\n    finally:\\n        chat.stop()\\n        await twitch.close()\\n\\n\\nasyncio.run(run())\n```\n\n----------------------------------------\n\nTITLE: Mocking EventSub Webhook Triggering with pytwitchapi in Python\nDESCRIPTION: This snippet demonstrates setting up an EventSub Webhook subscription using `pytwitchapi` against the live Twitch API (using real credentials) but generating a `twitch-cli` command to trigger a mock event. It initializes the Twitch client with real credentials, authenticates the user, sets up an `EventSubWebhook` listener, subscribes to the `channel.subscribe` event on the live API, and prints the `twitch event trigger` command needed to send a mock event to the specified webhook callback URL using `twitch-cli`. Note that subscription uses the live API, while triggering is mocked via CLI.\nSOURCE: https://github.com/teekeks/pytwitchapi/blob/master/docs/tutorial/mocking.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom twitchAPI.oauth import UserAuthenticationStorageHelper\nfrom twitchAPI.eventsub.webhook import EventSubWebhook\nfrom twitchAPI.object.eventsub import ChannelSubscribeEvent\nfrom twitchAPI.helper import first\nfrom twitchAPI.twitch import Twitch\nfrom twitchAPI.type import AuthScope\n\nCLIENT_ID = 'REAL_CLIENT_ID'\nCLIENT_SECRET = 'REAL_CLIENT_SECRET'\nEVENTSUB_URL = 'https://my.eventsub.url'\n\n\nasync def on_subscribe(data: ChannelSubscribeEvent):\n    print(f'{data.event.user_name} just subscribed!')\n\n\nasync def run():\n    twitch = await Twitch(CLIENT_ID,\n                          CLIENT_SECRET)\n    auth = UserAuthenticationStorageHelper(twitch, [AuthScope.CHANNEL_READ_SUBSCRIPTIONS])\n    await auth.bind()\n    user = await first(twitch.get_users())\n    eventsub = EventSubWebhook(EVENTSUB_URL, 8080, twitch)\n    eventsub.start()\n    sub_id = await eventsub.listen_channel_subscribe(user.id, on_subscribe)\n    print(f'twitch event trigger channel.subscribe -F {EVENTSUB_URL}/callback -t {user.id} -u {sub_id} -s {eventsub.secret}')\n\n    try:\n        input('press ENTER to stop')\n    finally:\n        await eventsub.stop()\n        await twitch.close()\n\n\nasyncio.run(run())\n```\n\n----------------------------------------\n\nTITLE: Adding Single Command Middleware for Chat Commands Using pytwitchapi - Python\nDESCRIPTION: Demonstrates how to apply middleware to only a specific command, restricting execution to the streamer of the current channel using the StreamerOnly middleware class. The rest of the bot operates as before. Requires StreamerOnly and standard pytwitchapi dependencies. The affected command (`one`) checks who issued it before executing. This approach lets developers tightly control sensitive commands per use case.\nSOURCE: https://github.com/teekeks/pytwitchapi/blob/master/docs/tutorial/chat-use-middleware.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\\nfrom twitchAPI import Twitch\\nfrom twitchAPI.chat import Chat, ChatCommand\\nfrom twitchAPI.chat.middleware import StreamerOnly\\nfrom twitchAPI.oauth import UserAuthenticationStorageHelper\\nfrom twitchAPI.types import AuthScope\\n\\n\\nAPP_ID = 'your_app_id'\\nAPP_SECRET = 'your_app_secret'\\nSCOPES = [AuthScope.CHAT_READ, AuthScope.CHAT_EDIT]\\nTARGET_CHANNEL = ['your_first_channel', 'your_second_channel']\\n\\n\\nasync def command_one(cmd: ChatCommand):\\n    await cmd.reply('This is the first command!')\\n\\n\\nasync def command_two(cmd: ChatCommand):\\n    await cmd.reply('This is the second command!')\\n\\n\\nasync def run():\\n    twitch = await Twitch(APP_ID, APP_SECRET)\\n    helper = UserAuthenticationStorageHelper(twitch, SCOPES)\\n    await helper.bind()\\n    chat = await Chat(twitch, initial_channel=TARGET_CHANNEL)\\n\\n    chat.register_command('one', command_one, command_middleware=[StreamerOnly()])\\n    chat.register_command('two', command_two)\\n\\n    chat.start()\\n    try:\\n        input('press Enter to shut down...\\\\n')\\n    except KeyboardInterrupt:\\n        pass\\n    finally:\\n        chat.stop()\\n        await twitch.close()\\n\\n\\nasyncio.run(run())\n```\n\n----------------------------------------\n\nTITLE: Mocking EventSub Websocket with pytwitchapi in Python\nDESCRIPTION: This snippet demonstrates setting up and mocking EventSub Websocket events using `pytwitchapi` and `twitch-cli`. It initializes the Twitch client with mock credentials and URLs, performs mock user authentication, connects an `EventSubWebsocket` client to the mock websocket server URL (`ws://127.0.0.1:8080/ws`), subscribes to the `channel.subscribe` event using the mock subscription URL, and prints the `twitch event trigger` command needed to send a mock event via the CLI to the websocket listener. Requires `twitch-cli mock-api start` and `twitch event websocket start` running.\nSOURCE: https://github.com/teekeks/pytwitchapi/blob/master/docs/tutorial/mocking.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom twitchAPI.oauth import UserAuthenticator\nfrom twitchAPI.eventsub.websocket import EventSubWebsocket\nfrom twitchAPI.object.eventsub import ChannelSubscribeEvent\nfrom twitchAPI.helper import first\nfrom twitchAPI.twitch import Twitch\nfrom twitchAPI.type import AuthScope\n\nCLIENT_ID = 'GENERATED_CLIENT_ID'\nCLIENT_SECRET = 'GENERATED_CLIENT_SECRET'\nUSER_ID = '53100947'\n\n\nasync def on_subscribe(data: ChannelSubscribeEvent):\n    print(f'{data.event.user_name} just subscribed!')\n\n\nasync def run():\n    twitch = await Twitch(CLIENT_ID,\n                          CLIENT_SECRET,\n                          base_url='http://localhost:8080/mock/',\n                          auth_base_url='http://localhost:8080/auth/')\n    twitch.auto_refresh_auth = False\n    auth = UserAuthenticator(twitch, [AuthScope.CHANNEL_READ_SUBSCRIPTIONS], auth_base_url='http://localhost:8080/auth/')\n    token = await auth.mock_authenticate(USER_ID)\n    await twitch.set_user_authentication(token, [AuthScope.CHANNEL_READ_SUBSCRIPTIONS])\n    user = await first(twitch.get_users())\n    eventsub = EventSubWebsocket(twitch,\n                                 connection_url='ws://127.0.0.1:8080/ws',\n                                 subscription_url='http://127.0.0.1:8080/')\n    eventsub.start()\n    sub_id = await eventsub.listen_channel_subscribe(user.id, on_subscribe)\n    print(f'twitch event trigger channel.subscribe -t {user.id} -u {sub_id} -T websocket')\n\n    try:\n        input('press ENTER to stop\\n')\n    finally:\n        await eventsub.stop()\n        await twitch.close()\n\n\nasyncio.run(run())\n```\n\n----------------------------------------\n\nTITLE: Using Custom Token Generation Logic with UserAuthenticationStorageHelper in Python\nDESCRIPTION: This snippet demonstrates how to provide a custom asynchronous function (`my_token_generator`) to `UserAuthenticationStorageHelper` for generating new user tokens. This allows overriding the default `UserAuthenticator`, useful for headless setups or custom authentication flows. The custom function must accept the Twitch instance and target scopes, returning a tuple of (token, refresh_token).\nSOURCE: https://github.com/teekeks/pytwitchapi/blob/master/docs/tutorial/reuse-user-token.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom twitchAPI import Twitch\nfrom twitchAPI.oauth import UserAuthenticationStorageHelper\nfrom twitchAPI.types import AuthScope\n\nAPP_ID = 'my_app_id'\nAPP_SECRET = 'my_app_secret'\nUSER_SCOPE = [AuthScope.CHAT_READ, AuthScope.CHAT_EDIT]\n\n\nasync def my_token_generator(twitch: Twitch, target_scope: List[AuthScope]) -> (str, str):\n    # generate new token + refresh token here and return it\n    return 'token', 'refresh_token'\n\nasync def run():\n    twitch = await Twitch(APP_ID, APP_SECRET)\n    helper = UserAuthenticationStorageHelper(twitch, \n                                             USER_SCOPE, \n                                             auth_generator_func=my_token_generator)\n    await helper.bind()\n    # do things\n\n    await twitch.close()\n\n\n# lets run our setup\nasyncio.run(run())\n```\n\n----------------------------------------\n\nTITLE: Setting Auth Token Refresh Callbacks for Twitch API in Python\nDESCRIPTION: Demonstrates how to set callbacks for both user and app access token refreshes in the Twitch API.\nSOURCE: https://github.com/teekeks/pytwitchapi/blob/master/docs/index.rst#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom twitchAPI.twitch import Twitch\n\nasync def user_refresh(token: str, refresh_token: str):\n    print(f'my new user token is: {token}')\n\nasync def app_refresh(token: str):\n    print(f'my new app token is: {token}')\n\ntwitch = await Twitch('my_app_id', 'my_app_secret')\ntwitch.app_auth_refresh_callback = app_refresh\ntwitch.user_auth_refresh_callback = user_refresh\n```\n\n----------------------------------------\n\nTITLE: Installing the twitchAPI Library using Pip\nDESCRIPTION: Installs the `twitchAPI` package using the Python package installer, pip. This command downloads and installs the library and its dependencies, making it available for import in Python projects.\nSOURCE: https://github.com/teekeks/pytwitchapi/blob/master/README.md#2025-04-22_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\npip install twitchAPI\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Coin Flip Middleware for Command Restriction - Python\nDESCRIPTION: Defines a custom middleware subclass (MyOwnCoinFlipMiddleware) for the TwitchAPI chat system, which randomly allows commands to execute 50% of the time. This example demonstrates best practices for __init__ compatibility with default middlewares, as well as asynchronous hooks for checking execution permission and post-execution handling. Dependencies include twitchAPI.chat.middleware.BaseCommandMiddleware, ChatCommand, and the 'random' module. The class can be passed as a command middleware when registering chat commands to apply probabilistic execution gating.\nSOURCE: https://github.com/teekeks/pytwitchapi/blob/master/docs/tutorial/chat-use-middleware.rst#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Callable, Optional, Awaitable\n\nclass MyOwnCoinFlipMiddleware(BaseCommandMiddleware):\n\n   # it is best practice to add this part of the init function to be compatible with the default middlewares\n   # but you can also leave this out should you know you dont need it\n   def __init__(self, execute_blocked_handler: Optional[Callable[[ChatCommand], Awaitable[None]]] = None):\n     self.execute_blocked_handler = execute_blocked_handler\n\n   async def can_execute(cmd: ChatCommand) -> bool:\n      # add your own logic here, return True if the command should execute and False otherwise\n      return random.choice([True, False])\n\n   async def was_executed(cmd: ChatCommand):\n      # this will be called whenever a command this Middleware is attached to was executed, use this to update your internal state\n      # since this is a basic example, we do nothing here\n      pass\n```\n\n----------------------------------------\n\nTITLE: Registering Command Middleware in TwitchAPI Chat - Python\nDESCRIPTION: Registers user and channel restriction middleware with the chat system, then registers two commands ('one' and 'two') for command processing. The chat system is started and, after a blocking user input or KeyboardInterrupt, is shut down gracefully with the event loop closed. Dependencies include the pytwitchapi chat module and any associated middleware or handler functions. 'chat', 'twitch', 'UserRestriction', 'ChannelRestriction', 'handle_blocked_user', and 'handle_blocked_channel' must be defined elsewhere in the context. Key parameters include allowed user/channel lists, command function handlers, and a blocking handler for restricted access.\nSOURCE: https://github.com/teekeks/pytwitchapi/blob/master/docs/tutorial/chat-use-middleware.rst#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nchat.register_command_middleware(UserRestriction(allowed_users=['user1'],\n                                                     execute_blocked_handler=handle_blocked_user))\nchat.register_command_middleware(ChannelRestriction(allowed_channel=['your_first_channel'],\n                                                    execute_blocked_handler=handle_blocked_channel))\n\nchat.register_command('one', command_one)\nchat.register_command('two', command_two)\n\nchat.start()\ntry:\n    input('press Enter to shut down...\\n')\nexcept KeyboardInterrupt:\n    pass\nfinally:\n    chat.stop()\n    await twitch.close()\n\n\nasyncio.run(run())\n```\n\n----------------------------------------\n\nTITLE: EventSub Implementation in v4 (After Migration)\nDESCRIPTION: Example of EventSub implementation in v4 of the pytwitchapi library. It demonstrates the new approach using EventSubWebhook class and object-based callbacks with typed events.\nSOURCE: https://github.com/teekeks/pytwitchapi/blob/master/docs/v4-migration.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom twitchAPI.eventsub.webhook import EventSubWebhook\nfrom twitchAPI.object.eventsub import ChannelFollowEvent\nimport asyncio\n\nEVENTSUB_URL = 'https://url.to.your.webhook.com'\n\n\nasync def on_follow(data: ChannelFollowEvent):\n    print(f'{data.event.user_name} now follows {data.event.broadcaster_user_name}!')\n\n\nasync def eventsub_webhook_example():\n    # twitch setup is left out of this example\n\n    eventsub = EventSubWebhook(EVENTSUB_URL, 8080, twitch)\n    await eventsub.unsubscribe_all()\n    eventsub.start()\n    await eventsub.listen_channel_follow_v2(user.id, user.id, on_follow)\n\n    try:\n        input('press Enter to shut down...')\n    finally:\n        await eventsub.stop()\n        await twitch.close()\n    print('done')\n\n\nasyncio.run(eventsub_webhook_example())\n```\n\n----------------------------------------\n\nTITLE: Custom Middleware-Specific Blocked Handlers in pytwitchapi Chat - Python\nDESCRIPTION: Shows how to assign specific handler functions to different middleware, allowing for unique user feedback depending on which rule blocks command execution. Uses `handle_blocked_user` and `handle_blocked_channel` to customize replies. This is set via the execute_blocked_handler argument or attribute in the middleware's construction. Enables granular feedback for various access policies.\nSOURCE: https://github.com/teekeks/pytwitchapi/blob/master/docs/tutorial/chat-use-middleware.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\\nfrom twitchAPI import Twitch\\nfrom twitchAPI.chat import Chat, ChatCommand\\nfrom twitchAPI.chat.middleware import UserRestriction, ChannelRestriction\\nfrom twitchAPI.oauth import UserAuthenticationStorageHelper\\nfrom twitchAPI.types import AuthScope\\n\\n\\nAPP_ID = 'your_app_id'\\nAPP_SECRET = 'your_app_secret'\\nSCOPES = [AuthScope.CHAT_READ, AuthScope.CHAT_EDIT]\\nTARGET_CHANNEL = ['your_first_channel', 'your_second_channel']\\n\\n\\nasync def command_one(cmd: ChatCommand):\\n    await cmd.reply('This is the first command!')\\n\\n\\nasync def command_two(cmd: ChatCommand):\\n    await cmd.reply('This is the second command!')\\n\\n\\nasync def handle_blocked_user(cmd: ChatCommand):\\n    await cmd.reply(f'Only user1 is allowed to use {cmd.name}!')\\n\\n\\nasync def handle_blocked_channel(cmd: ChatCommand):\\n    await cmd.reply(f'{cmd.name} can only be used in channel your_first_channel!')\\n\\n\\nasync def run():\\n    twitch = await Twitch(APP_ID, APP_SECRET)\\n    helper = UserAuthenticationStorageHelper(twitch, SCOPES)\\n    await helper.bind()\\n    chat = await Chat(twitch, initial_channel=TARGET_CHANNEL)\n```\n\n----------------------------------------\n\nTITLE: EventSub Implementation in v3 (Before Migration)\nDESCRIPTION: Example of EventSub implementation in v3 of the pytwitchapi library. This shows the old pattern using the EventSub class and dictionary-based callbacks for handling events.\nSOURCE: https://github.com/teekeks/pytwitchapi/blob/master/docs/v4-migration.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom twitchAPI.eventsub import EventSub\nimport asyncio\n\nEVENTSUB_URL = 'https://url.to.your.webhook.com'\n\n\nasync def on_follow(data: dict):\n    print(data)\n\n\nasync def eventsub_example():\n    # twitch setup is left out of this example\n\n    event_sub = EventSub(EVENTSUB_URL, APP_ID, 8080, twitch)\n    await event_sub.unsubscribe_all()\n    event_sub.start()\n    await event_sub.listen_channel_follow_v2(user.id, user.id, on_follow)\n\n    try:\n        input('press Enter to shut down...')\n    finally:\n        await event_sub.stop()\n        await twitch.close()\n    print('done')\n\n\nasyncio.run(eventsub_example())\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Token Storage Path with UserAuthenticationStorageHelper in Python\nDESCRIPTION: This snippet shows how to configure `UserAuthenticationStorageHelper` to store the user token in a custom file location instead of the default. It uses the `storage_path` parameter during helper initialization, passing a `PurePath` object from the `pathlib` library. Dependencies include `twitchAPI`, `asyncio`, and `pathlib`.\nSOURCE: https://github.com/teekeks/pytwitchapi/blob/master/docs/tutorial/reuse-user-token.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom twitchAPI import Twitch\nfrom twitchAPI.oauth import UserAuthenticationStorageHelper\nfrom twitchAPI.types import AuthScope\nfrom pathlib import PurePath\n\nAPP_ID = 'my_app_id'\nAPP_SECRET = 'my_app_secret'\nUSER_SCOPE = [AuthScope.CHAT_READ, AuthScope.CHAT_EDIT]\n\n\nasync def run():\n    twitch = await Twitch(APP_ID, APP_SECRET)\n    helper = UserAuthenticationStorageHelper(twitch,\n                                             USER_SCOPE, \n                                             storage_path=PurePath('/my/new/path/file.json'))\n    await helper.bind()\n    # do things\n\n    await twitch.close()\n\n\n# lets run our setup\nasyncio.run(run())\n```\n\n----------------------------------------\n\nTITLE: Working with TwitchObject in Python\nDESCRIPTION: Demonstrates how to work with TwitchObject, which is now returned by many API calls instead of dictionaries. It shows how to access properties and convert to a dictionary if needed.\nSOURCE: https://github.com/teekeks/pytwitchapi/blob/master/docs/v3-migration.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nblocked_term = await twitch.add_blocked_term('broadcaster_id', 'moderator_id', 'bad_word')\nprint(blocked_term.id)\n```\n\n----------------------------------------\n\nTITLE: Working with AsyncIterTwitchObject in Python\nDESCRIPTION: Demonstrates the usage of AsyncIterTwitchObject, which is used for API calls that return useful data outside of the paginated list.\nSOURCE: https://github.com/teekeks/pytwitchapi/blob/master/docs/v3-migration.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nschedule = await twitch.get_channel_stream_schedule('user_id')\nprint(schedule.broadcaster_name)\nasync for segment in schedule:\n    print(segment.title)\n```\n\n----------------------------------------\n\nTITLE: EventSub Operations in Python (V2)\nDESCRIPTION: Example of EventSub operations in version 2 of the library, including unsubscribing and listening to events.\nSOURCE: https://github.com/teekeks/pytwitchapi/blob/master/docs/v3-migration.rst#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nevent_sub.unsubscribe_all()\nevent_sub.listen_channel_follow(user_id, on_follow)\n```\n\n----------------------------------------\n\nTITLE: Working with IterTwitchObject in Python\nDESCRIPTION: Shows how to work with IterTwitchObject, which is returned by some API calls. It allows iterating over a list within the object while also accessing other data.\nSOURCE: https://github.com/teekeks/pytwitchapi/blob/master/docs/v3-migration.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nlb = await twitch.get_bits_leaderboard()\nprint(lb.total)\nfor e in lb:\n    print(f'#{e.rank:02d} - {e.user_name}: {e.score}')\n```\n\n----------------------------------------\n\nTITLE: Using AsyncGenerator in Python for Twitch API\nDESCRIPTION: Shows how to use AsyncGenerator, which is used to automatically iterate over all possible results of an API call, handling pagination automatically.\nSOURCE: https://github.com/teekeks/pytwitchapi/blob/master/docs/v3-migration.rst#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nasync for tag in twitch.get_all_stream_tags():\n    print(tag.tag_id)\n```\n\n----------------------------------------\n\nTITLE: Stopping EventSub in Python (V2)\nDESCRIPTION: Example of stopping EventSub in version 2 of the library.\nSOURCE: https://github.com/teekeks/pytwitchapi/blob/master/docs/v3-migration.rst#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nevent_sub.stop()\n```\n\n----------------------------------------\n\nTITLE: EventSub Operations in Python (V3)\nDESCRIPTION: Example of EventSub operations in version 3 of the library, now using async functions for unsubscribing and listening to events.\nSOURCE: https://github.com/teekeks/pytwitchapi/blob/master/docs/v3-migration.rst#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nawait event_sub.unsubscribe_all()\nawait event_sub.listen_channel_follow(user_id, on_follow)\n```\n\n----------------------------------------\n\nTITLE: Stopping EventSub in Python (V3)\nDESCRIPTION: Example of stopping EventSub in version 3 of the library, now using an async function.\nSOURCE: https://github.com/teekeks/pytwitchapi/blob/master/docs/v3-migration.rst#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nawait event_sub.stop()\n```\n\n----------------------------------------\n\nTITLE: PubSub Callback in Python (V3)\nDESCRIPTION: Example of a PubSub callback function in version 3 of the library, now using an async function.\nSOURCE: https://github.com/teekeks/pytwitchapi/blob/master/docs/v3-migration.rst#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nasync def callback_whisper(uuid: UUID, data: dict) -> None:\n    print('got callback for UUID ' + str(uuid))\n    pprint(data)\n```\n\n----------------------------------------\n\nTITLE: PubSub Callback in Python (V2)\nDESCRIPTION: Example of a PubSub callback function in version 2 of the library.\nSOURCE: https://github.com/teekeks/pytwitchapi/blob/master/docs/v3-migration.rst#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef callback_whisper(uuid: UUID, data: dict) -> None:\n    print('got callback for UUID ' + str(uuid))\n    pprint(data)\n```\n\n----------------------------------------\n\nTITLE: Referencing twitchAPI.eventsub.websocket Module in Python\nDESCRIPTION: Represents the module path `twitchAPI.eventsub.websocket` within the PyTwitchAPI library. This module handles Twitch EventSub websocket events and is associated with the `twitchAPI.eventsub.websocket.EventSubWebsocket` class and its `logger` instance as indicated in the surrounding table.\nSOURCE: https://github.com/teekeks/pytwitchapi/blob/master/docs/index.rst#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n`twitchAPI.eventsub.websocket`\n```\n\n----------------------------------------\n\nTITLE: Initializing Twitch API Client in Python (V3)\nDESCRIPTION: Example of initializing the Twitch API client in version 3 of the library. It demonstrates the use of async functions for creation and callbacks.\nSOURCE: https://github.com/teekeks/pytwitchapi/blob/master/docs/v3-migration.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom twitchAPI.twitch import Twitch\n\nasync def user_refresh(token: str, refresh_token: str):\n    print(f'my new user token is: {token}')\n\nasync def app_refresh(token: str):\n    print(f'my new app token is: {token}')\n\ntwitch = await Twitch('my_app_id', 'my_app_secret')\ntwitch.app_auth_refresh_callback = app_refresh\ntwitch.user_auth_refresh_callback = user_refresh\n```\n\n----------------------------------------\n\nTITLE: Initializing Twitch API Client in Python (V2)\nDESCRIPTION: Example of initializing the Twitch API client in version 2 of the library. It shows how to create a Twitch object and set up refresh callbacks.\nSOURCE: https://github.com/teekeks/pytwitchapi/blob/master/docs/v3-migration.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom twitchAPI.twitch import Twitch\n\ndef user_refresh(token: str, refresh_token: str):\n    print(f'my new user token is: {token}')\n\ndef app_refresh(token: str):\n    print(f'my new app token is: {token}')\n\ntwitch = Twitch('app_id', 'app_secret')\ntwitch.app_auth_refresh_callback = app_refresh\ntwitch.user_auth_refresh_callback = user_refresh\n```\n\n----------------------------------------\n\nTITLE: Referencing twitchAPI.oauth.code_flow Module in Python\nDESCRIPTION: Represents the module path `twitchAPI.oauth.code_flow` within the PyTwitchAPI library. This module specifically implements the OAuth authorization code flow and is associated with the `twitchAPI.oauth.CodeFlow` class and its `logger` instance as indicated in the surrounding table.\nSOURCE: https://github.com/teekeks/pytwitchapi/blob/master/docs/index.rst#2025-04-22_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n`twitchAPI.oauth.code_flow`\n```\n\n----------------------------------------\n\nTITLE: Registering a Command with Custom Coin Flip Middleware - Python\nDESCRIPTION: Registers a new chat command 'ban-me' with the TwitchAPI chat system, attaching the custom MyOwnCoinFlipMiddleware so the command is executed randomly 50% of the time based on the custom middleware class. Dependencies are the previously defined chat instance, parameter execute_ban_me (the handler function), and the MyOwnCoinFlipMiddleware class. The 'command_middleware' parameter takes a list of middleware instances that are consulted before command execution.\nSOURCE: https://github.com/teekeks/pytwitchapi/blob/master/docs/tutorial/chat-use-middleware.rst#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nchat.register_command('ban-me', execute_ban_me, command_middleware=[MyOwnCoinFlipMiddleware()])\n```\n\n----------------------------------------\n\nTITLE: Handling Blocked Command Execution with a Default Handler Using pytwitchapi - Python\nDESCRIPTION: Defines a global handler function for blocked command executions, replying to the user when middleware denies access. The handler (`handle_command_blocked`) notifies users if a command is blocked and is set as the Chat instance's `default_command_execution_blocked_handler`. This method covers all middleware blocks without special per-middleware handling. Prerequisites are the same as earlier, with an emphasis on providing meaningful user feedback.\nSOURCE: https://github.com/teekeks/pytwitchapi/blob/master/docs/tutorial/chat-use-middleware.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\\nfrom twitchAPI import Twitch\\nfrom twitchAPI.chat import Chat, ChatCommand\\nfrom twitchAPI.chat.middleware import UserRestriction, ChannelRestriction\\nfrom twitchAPI.oauth import UserAuthenticationStorageHelper\\nfrom twitchAPI.types import AuthScope\\n\\n\\nAPP_ID = 'your_app_id'\\nAPP_SECRET = 'your_app_secret'\\nSCOPES = [AuthScope.CHAT_READ, AuthScope.CHAT_EDIT]\\nTARGET_CHANNEL = ['your_first_channel', 'your_second_channel']\\n\\n\\nasync def command_one(cmd: ChatCommand):\\n    await cmd.reply('This is the first command!')\\n\\n\\nasync def command_two(cmd: ChatCommand):\\n    await cmd.reply('This is the second command!')\\n\\n\\nasync def handle_command_blocked(cmd: ChatCommand):\\n    await cmd.reply(f'You are not allowed to use {cmd.name}!')\\n\\n\\nasync def run():\\n    twitch = await Twitch(APP_ID, APP_SECRET)\\n    helper = UserAuthenticationStorageHelper(twitch, SCOPES)\\n    await helper.bind()\\n    chat = await Chat(twitch, initial_channel=TARGET_CHANNEL)\\n    chat.register_command_middleware(UserRestriction(allowed_users=['user1']))\\n    chat.register_command_middleware(ChannelRestriction(allowed_channel=['your_first_channel']))\\n\\n    chat.register_command('one', command_one)\\n    chat.register_command('two', command_two)\\n    chat.default_command_execution_blocked_handler = handle_command_blocked\\n\\n    chat.start()\\n    try:\\n        input('press Enter to shut down...\\\\n')\\n    except KeyboardInterrupt:\\n        pass\\n    finally:\\n        chat.stop()\\n        await twitch.close()\\n\\n\\nasyncio.run(run())\n```\n\n----------------------------------------\n\nTITLE: Referencing twitchAPI.oauth.storage_helper Module in Python\nDESCRIPTION: Represents the module path `twitchAPI.oauth.storage_helper` within the PyTwitchAPI library. This module provides helper functionalities for storing user authentication data, likely related to OAuth tokens, and is associated with the `twitchAPI.oauth.UserAuthenticationStorageHelper` class and its `logger` instance as indicated in the surrounding table.\nSOURCE: https://github.com/teekeks/pytwitchapi/blob/master/docs/index.rst#2025-04-22_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n`twitchAPI.oauth.storage_helper`\n```\n\n----------------------------------------\n\nTITLE: Basic TwitchAPI Usage Example in Python\nDESCRIPTION: Demonstrates how to initialize a Twitch instance, create app authentication, and retrieve user data using the Twitch API.\nSOURCE: https://github.com/teekeks/pytwitchapi/blob/master/docs/index.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom twitchAPI.twitch import Twitch\nfrom twitchAPI.helper import first\nimport asyncio\n\nasync def twitch_example():\n    # initialize the twitch instance, this will by default also create a app authentication for you\n    twitch = await Twitch('app_id', 'app_secret')\n    # call the API for the data of your twitch user\n    # this returns a async generator that can be used to iterate over all results\n    # but we are just interested in the first result\n    # using the first helper makes this easy.\n    user = await first(twitch.get_users(logins='your_twitch_user'))\n    # print the ID of your user or do whatever else you want with it\n    print(user.id)\n\n# run this example\nasyncio.run(twitch_example())\n```\n\n----------------------------------------\n\nTITLE: App Authentication for Twitch API in Python\nDESCRIPTION: Shows how to perform app authentication for the Twitch API.\nSOURCE: https://github.com/teekeks/pytwitchapi/blob/master/docs/index.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom twitchAPI.twitch import Twitch\ntwitch = await Twitch('my_app_id', 'my_app_secret')\n```\n\n----------------------------------------\n\nTITLE: Refreshing Access Token for Twitch API in Python\nDESCRIPTION: Shows how to refresh an access token for the Twitch API using a refresh token.\nSOURCE: https://github.com/teekeks/pytwitchapi/blob/master/docs/index.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom twitchAPI.oauth import refresh_access_token\nnew_token, new_refresh_token = await refresh_access_token('refresh_token', 'client_id', 'client_secret')\n```\n\n----------------------------------------\n\nTITLE: PubSub Usage Example for Twitch API in Python\nDESCRIPTION: Illustrates how to use PubSub to subscribe to whisper events in the Twitch API, including authentication and event handling.\nSOURCE: https://github.com/teekeks/pytwitchapi/blob/master/docs/index.rst#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom twitchAPI.pubsub import PubSub\nfrom twitchAPI.twitch import Twitch\nfrom twitchAPI.helper import first\nfrom twitchAPI.type import AuthScope\nfrom twitchAPI.oauth import UserAuthenticator\nimport asyncio\nfrom pprint import pprint\nfrom uuid import UUID\n\nAPP_ID = 'my_app_id'\nAPP_SECRET = 'my_app_secret'\nUSER_SCOPE = [AuthScope.WHISPERS_READ]\nTARGET_CHANNEL = 'teekeks42'\n\nasync def callback_whisper(uuid: UUID, data: dict) -> None:\n    print('got callback for UUID ' + str(uuid))\n    pprint(data)\n\n\nasync def run_example():\n    # setting up Authentication and getting your user id\n    twitch = await Twitch(APP_ID, APP_SECRET)\n    auth = UserAuthenticator(twitch, [AuthScope.WHISPERS_READ], force_verify=False)\n    token, refresh_token = await auth.authenticate()\n    # you can get your user auth token and user auth refresh token following the example in twitchAPI.oauth\n    await twitch.set_user_authentication(token, [AuthScope.WHISPERS_READ], refresh_token)\n    user = await first(twitch.get_users(logins=[TARGET_CHANNEL]))\n\n    # starting up PubSub\n    pubsub = PubSub(twitch)\n    pubsub.start()\n    # you can either start listening before or after you started pubsub.\n    uuid = await pubsub.listen_whispers(user.id, callback_whisper)\n    input('press ENTER to close...')\n    # you do not need to unlisten to topics before stopping but you can listen and unlisten at any moment you want\n    await pubsub.unlisten(uuid)\n    pubsub.stop()\n    await twitch.close()\n\nasyncio.run(run_example())\n```\n\n----------------------------------------\n\nTITLE: Chat Bot Example for Twitch API in Python\nDESCRIPTION: Demonstrates how to create a simple Twitch chat bot using the Chat module, including event handling and command registration.\nSOURCE: https://github.com/teekeks/pytwitchapi/blob/master/docs/index.rst#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom twitchAPI.twitch import Twitch\nfrom twitchAPI.oauth import UserAuthenticator\nfrom twitchAPI.type import AuthScope, ChatEvent\nfrom twitchAPI.chat import Chat, EventData, ChatMessage, ChatSub, ChatCommand\nimport asyncio\n\nAPP_ID = 'my_app_id'\nAPP_SECRET = 'my_app_secret'\nUSER_SCOPE = [AuthScope.CHAT_READ, AuthScope.CHAT_EDIT]\nTARGET_CHANNEL = 'teekeks42'\n\n\n# this will be called when the event READY is triggered, which will be on bot start\nasync def on_ready(ready_event: EventData):\n    print('Bot is ready for work, joining channels')\n    # join our target channel, if you want to join multiple, either call join for each individually\n    # or even better pass a list of channels as the argument\n    await ready_event.chat.join_room(TARGET_CHANNEL)\n    # you can do other bot initialization things in here\n\n\n# this will be called whenever a message in a channel was send by either the bot OR another user\nasync def on_message(msg: ChatMessage):\n    print(f'in {msg.room.name}, {msg.user.name} said: {msg.text}')\n\n\n# this will be called whenever someone subscribes to a channel\nasync def on_sub(sub: ChatSub):\n    print(f'New subscription in {sub.room.name}:\\n'\n          f'  Type: {sub.sub_plan}\\n'\n          f'  Message: {sub.sub_message}')\n\n\n# this will be called whenever the !reply command is issued\nasync def test_command(cmd: ChatCommand):\n    if len(cmd.parameter) == 0:\n        await cmd.reply('you did not tell me what to reply with')\n    else:\n        await cmd.reply(f'{cmd.user.name}: {cmd.parameter}')\n\n\n# this is where we set up the bot\nasync def run():\n    # set up twitch api instance and add user authentication with some scopes\n    twitch = await Twitch(APP_ID, APP_SECRET)\n    auth = UserAuthenticator(twitch, USER_SCOPE)\n    token, refresh_token = await auth.authenticate()\n    await twitch.set_user_authentication(token, USER_SCOPE, refresh_token)\n\n    # create chat instance\n    chat = await Chat(twitch)\n\n    # register the handlers for the events you want\n\n    # listen to when the bot is done starting up and ready to join channels\n    chat.register_event(ChatEvent.READY, on_ready)\n    # listen to chat messages\n    chat.register_event(ChatEvent.MESSAGE, on_message)\n    # listen to channel subscriptions\n    chat.register_event(ChatEvent.SUB, on_sub)\n    # there are more events, you can view them all in this documentation\n\n    # you can directly register commands and their handlers, this will register the !reply command\n    chat.register_command('reply', test_command)\n\n\n    # we are done with our setup, lets start this bot up!\n    chat.start()\n\n    # lets run till we press enter in the console\n    try:\n        input('press ENTER to stop\\n')\n    finally:\n        # now we can close the chat bot and the twitch api client\n        chat.stop()\n        await twitch.close()\n\n\n# lets run our setup\nasyncio.run(run())\n```\n\n----------------------------------------\n\nTITLE: Referencing twitchAPI.chat Module in Python\nDESCRIPTION: Represents the module path `twitchAPI.chat` within the PyTwitchAPI library. This module contains functionalities related to Twitch chat interactions and is associated with the `twitchAPI.chat.Chat` class and its `logger` instance as indicated in the surrounding table.\nSOURCE: https://github.com/teekeks/pytwitchapi/blob/master/docs/index.rst#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n`twitchAPI.chat`\n```\n\n----------------------------------------\n\nTITLE: Referencing twitchAPI.eventsub.webhook Module in Python\nDESCRIPTION: Represents the module path `twitchAPI.eventsub.webhook` within the PyTwitchAPI library. This module handles Twitch EventSub webhook events and is associated with the `twitchAPI.eventsub.webhook.EventSubWebhook` class and its `logger` instance as indicated in the surrounding table.\nSOURCE: https://github.com/teekeks/pytwitchapi/blob/master/docs/index.rst#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n`twitchAPI.eventsub.webhook`\n```\n\n----------------------------------------\n\nTITLE: Referencing twitchAPI.pubsub Module in Python\nDESCRIPTION: Represents the module path `twitchAPI.pubsub` within the PyTwitchAPI library. This module handles Twitch PubSub interactions and is associated with the `twitchAPI.pubsub.PubSub` class and its `logger` instance as indicated in the surrounding table.\nSOURCE: https://github.com/teekeks/pytwitchapi/blob/master/docs/index.rst#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n`twitchAPI.pubsub`\n```\n\n----------------------------------------\n\nTITLE: Auto-Documenting twitchAPI.eventsub Module in reStructuredText\nDESCRIPTION: This snippet is a reStructuredText configuration block for Sphinx, enabling automatic documentation of the twitchAPI.eventsub module and all its members. It leverages the automodule directive, specifying that all members, undocumented elements, inheritance, and inherited members should be shown. There are no code-level dependencies, but Sphinx with the autodoc extension must be installed, and the module being referenced must be importable. There is no input or output beyond the generated documentation.\nSOURCE: https://github.com/teekeks/pytwitchapi/blob/master/docs/modules/twitchAPI.eventsub.rst#2025-04-22_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: twitchAPI.eventsub\n    :members:\n    :undoc-members:\n    :show-inheritance:\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Referencing twitchAPI.oauth Module in Python\nDESCRIPTION: Represents the module path `twitchAPI.oauth` within the PyTwitchAPI library. This module deals with OAuth authentication mechanisms and is associated with the `twitchAPI.oauth.UserAuthenticator` class and its `logger` instance as indicated in the surrounding table.\nSOURCE: https://github.com/teekeks/pytwitchapi/blob/master/docs/index.rst#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n`twitchAPI.oauth`\n```\n\n----------------------------------------\n\nTITLE: Using first() helper function in Python\nDESCRIPTION: Added a new helper function 'first()' to the twitchAPI.helper module.\nSOURCE: https://github.com/teekeks/pytwitchapi/blob/master/docs/changelog.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom twitchAPI.helper import first\n```\n\n----------------------------------------\n\nTITLE: Documenting TwitchAPI Type Module with Sphinx\nDESCRIPTION: Sphinx documentation directive that automatically generates API documentation from the twitchAPI.type module. It includes all members, undocumented members, inheritance information, and inherited members.\nSOURCE: https://github.com/teekeks/pytwitchapi/blob/master/docs/modules/twitchAPI.type.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: twitchAPI.type\n    :members:\n    :undoc-members:\n    :show-inheritance:\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Setting custom end document for UserAuthenticator in Python\nDESCRIPTION: Added ability to set a custom document shown at the end of the Auth flow in UserAuthenticator.\nSOURCE: https://github.com/teekeks/pytwitchapi/blob/master/docs/changelog.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom twitchAPI.oauth import UserAuthenticator\n\nauthenticator = UserAuthenticator()\nauthenticator.document = \"Custom HTML document\"\n```\n\n----------------------------------------\n\nTITLE: Using browser controls in UserAuthenticator.authenticate() in Python\nDESCRIPTION: Added browser controls to the authenticate method of UserAuthenticator.\nSOURCE: https://github.com/teekeks/pytwitchapi/blob/master/docs/changelog.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom twitchAPI.oauth import UserAuthenticator\n\nauthenticator = UserAuthenticator()\nauthenticator.authenticate(browser_controls=True)\n```\n\n----------------------------------------\n\nTITLE: Installing Python Twitch API Library\nDESCRIPTION: Instructions for installing the twitchAPI library using pip.\nSOURCE: https://github.com/teekeks/pytwitchapi/blob/master/docs/index.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install twitchAPI\n```\n\n----------------------------------------\n\nTITLE: Defining Dependencies for PytwitchAPI Python Package\nDESCRIPTION: This requirements file specifies the external Python packages required by the PytwitchAPI library. It includes aiohttp for asynchronous HTTP requests, python-dateutil for handling date/time operations, typing_extensions for enhanced type hint support, and enum-tools for enumeration functionality.\nSOURCE: https://github.com/teekeks/pytwitchapi/blob/master/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\naiohttp>=3.9.3\npython-dateutil>=2.8.2\ntyping_extensions\nenum-tools\n```\n\n----------------------------------------\n\nTITLE: Documenting Python Twitch API Object Module with Sphinx\nDESCRIPTION: Sphinx documentation configuration using automodule directive to generate API documentation for the twitchAPI.object module. Includes all members, undocumented members, inheritance details and inherited members.\nSOURCE: https://github.com/teekeks/pytwitchapi/blob/master/docs/modules/twitchAPI.object.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: twitchAPI.object\n    :members:\n    :undoc-members:\n    :show-inheritance:\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx automodule for twitchAPI.chat\nDESCRIPTION: Sphinx directive to automatically document the twitchAPI.chat module, including all members, undocumented members, and inherited members with their inheritance relationships.\nSOURCE: https://github.com/teekeks/pytwitchapi/blob/master/docs/modules/twitchAPI.chat.rst#2025-04-22_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: twitchAPI.chat\n    :members:\n    :undoc-members:\n    :show-inheritance:\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Sphinx Automodule Directive for twitchAPI.eventsub.websocket\nDESCRIPTION: This snippet uses the Sphinx `automodule` directive in reStructuredText to automatically generate documentation for the Python module `twitchAPI.eventsub.websocket`. The options specified (`:members:`, `:undoc-members:`, `:show-inheritance:`, `:inherited-members:`) instruct Sphinx to include all members (public, private, and special), even those without docstrings, display class inheritance diagrams, and include members inherited from base classes. The `:orphan:` directive at the top indicates that this documentation page should not be listed in any table of contents (`toctree`).\nSOURCE: https://github.com/teekeks/pytwitchapi/blob/master/docs/modules/twitchAPI.eventsub.websocket.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n:orphan:\n\n.. automodule:: twitchAPI.eventsub.websocket\n    :members:\n    :undoc-members:\n    :show-inheritance:\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Autodoc for Twitch API EventSub Webhook Module\nDESCRIPTION: This reStructuredText directive configures Sphinx's autodoc extension to generate documentation for the twitchAPI.eventsub.webhook module. It includes all members, undocumented members, and shows inheritance including inherited members.\nSOURCE: https://github.com/teekeks/pytwitchapi/blob/master/docs/modules/twitchAPI.eventsub.webhook.rst#2025-04-22_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n:orphan:\n\n.. automodule:: twitchAPI.eventsub.webhook\n    :members:\n    :undoc-members:\n    :show-inheritance:\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx autodoc for twitchAPI's EventSub module\nDESCRIPTION: Sphinx configuration directives that specify how to generate API documentation for the EventSub module. These directives tell Sphinx to include all members, undocumented members, show inheritance relationships, and document inherited members.\nSOURCE: https://github.com/teekeks/pytwitchapi/blob/master/docs/modules/twitchAPI.object.eventsub.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: twitchAPI.object.eventsub\n    :members:\n    :undoc-members:\n    :show-inheritance:\n    :inherited-members:\n```"
  }
]